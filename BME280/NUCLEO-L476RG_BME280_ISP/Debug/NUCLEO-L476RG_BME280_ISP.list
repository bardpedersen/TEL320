
NUCLEO-L476RG_BME280_ISP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005460  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080055f0  080055f0  000155f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005678  08005678  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08005678  08005678  00015678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005680  08005680  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005680  08005680  00015680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005684  08005684  00015684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005688  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  2000005c  080056e4  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002b4  080056e4  000202b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c418  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b0a  00000000  00000000  0002c4e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ac8  00000000  00000000  0002dff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000084f  00000000  00000000  0002eac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025f2d  00000000  00000000  0002f30f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cdba  00000000  00000000  0005523c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e9b48  00000000  00000000  00061ff6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003160  00000000  00000000  0014bb40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0014eca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080055d8 	.word	0x080055d8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	080055d8 	.word	0x080055d8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_ldivmod>:
 8000270:	b97b      	cbnz	r3, 8000292 <__aeabi_ldivmod+0x22>
 8000272:	b972      	cbnz	r2, 8000292 <__aeabi_ldivmod+0x22>
 8000274:	2900      	cmp	r1, #0
 8000276:	bfbe      	ittt	lt
 8000278:	2000      	movlt	r0, #0
 800027a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800027e:	e006      	blt.n	800028e <__aeabi_ldivmod+0x1e>
 8000280:	bf08      	it	eq
 8000282:	2800      	cmpeq	r0, #0
 8000284:	bf1c      	itt	ne
 8000286:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800028a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800028e:	f000 b9bb 	b.w	8000608 <__aeabi_idiv0>
 8000292:	f1ad 0c08 	sub.w	ip, sp, #8
 8000296:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800029a:	2900      	cmp	r1, #0
 800029c:	db09      	blt.n	80002b2 <__aeabi_ldivmod+0x42>
 800029e:	2b00      	cmp	r3, #0
 80002a0:	db1a      	blt.n	80002d8 <__aeabi_ldivmod+0x68>
 80002a2:	f000 f84d 	bl	8000340 <__udivmoddi4>
 80002a6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ae:	b004      	add	sp, #16
 80002b0:	4770      	bx	lr
 80002b2:	4240      	negs	r0, r0
 80002b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	db1b      	blt.n	80002f4 <__aeabi_ldivmod+0x84>
 80002bc:	f000 f840 	bl	8000340 <__udivmoddi4>
 80002c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c8:	b004      	add	sp, #16
 80002ca:	4240      	negs	r0, r0
 80002cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002d0:	4252      	negs	r2, r2
 80002d2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d6:	4770      	bx	lr
 80002d8:	4252      	negs	r2, r2
 80002da:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002de:	f000 f82f 	bl	8000340 <__udivmoddi4>
 80002e2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ea:	b004      	add	sp, #16
 80002ec:	4240      	negs	r0, r0
 80002ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002f2:	4770      	bx	lr
 80002f4:	4252      	negs	r2, r2
 80002f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002fa:	f000 f821 	bl	8000340 <__udivmoddi4>
 80002fe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000302:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000306:	b004      	add	sp, #16
 8000308:	4252      	negs	r2, r2
 800030a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800030e:	4770      	bx	lr

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000320:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000324:	f000 b970 	b.w	8000608 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9e08      	ldr	r6, [sp, #32]
 8000346:	460d      	mov	r5, r1
 8000348:	4604      	mov	r4, r0
 800034a:	460f      	mov	r7, r1
 800034c:	2b00      	cmp	r3, #0
 800034e:	d14a      	bne.n	80003e6 <__udivmoddi4+0xa6>
 8000350:	428a      	cmp	r2, r1
 8000352:	4694      	mov	ip, r2
 8000354:	d965      	bls.n	8000422 <__udivmoddi4+0xe2>
 8000356:	fab2 f382 	clz	r3, r2
 800035a:	b143      	cbz	r3, 800036e <__udivmoddi4+0x2e>
 800035c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000360:	f1c3 0220 	rsb	r2, r3, #32
 8000364:	409f      	lsls	r7, r3
 8000366:	fa20 f202 	lsr.w	r2, r0, r2
 800036a:	4317      	orrs	r7, r2
 800036c:	409c      	lsls	r4, r3
 800036e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000372:	fa1f f58c 	uxth.w	r5, ip
 8000376:	fbb7 f1fe 	udiv	r1, r7, lr
 800037a:	0c22      	lsrs	r2, r4, #16
 800037c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000380:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000384:	fb01 f005 	mul.w	r0, r1, r5
 8000388:	4290      	cmp	r0, r2
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x62>
 800038c:	eb1c 0202 	adds.w	r2, ip, r2
 8000390:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000394:	f080 811c 	bcs.w	80005d0 <__udivmoddi4+0x290>
 8000398:	4290      	cmp	r0, r2
 800039a:	f240 8119 	bls.w	80005d0 <__udivmoddi4+0x290>
 800039e:	3902      	subs	r1, #2
 80003a0:	4462      	add	r2, ip
 80003a2:	1a12      	subs	r2, r2, r0
 80003a4:	b2a4      	uxth	r4, r4
 80003a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003b2:	fb00 f505 	mul.w	r5, r0, r5
 80003b6:	42a5      	cmp	r5, r4
 80003b8:	d90a      	bls.n	80003d0 <__udivmoddi4+0x90>
 80003ba:	eb1c 0404 	adds.w	r4, ip, r4
 80003be:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003c2:	f080 8107 	bcs.w	80005d4 <__udivmoddi4+0x294>
 80003c6:	42a5      	cmp	r5, r4
 80003c8:	f240 8104 	bls.w	80005d4 <__udivmoddi4+0x294>
 80003cc:	4464      	add	r4, ip
 80003ce:	3802      	subs	r0, #2
 80003d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003d4:	1b64      	subs	r4, r4, r5
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11e      	cbz	r6, 80003e2 <__udivmoddi4+0xa2>
 80003da:	40dc      	lsrs	r4, r3
 80003dc:	2300      	movs	r3, #0
 80003de:	e9c6 4300 	strd	r4, r3, [r6]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0xbc>
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	f000 80ed 	beq.w	80005ca <__udivmoddi4+0x28a>
 80003f0:	2100      	movs	r1, #0
 80003f2:	e9c6 0500 	strd	r0, r5, [r6]
 80003f6:	4608      	mov	r0, r1
 80003f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fc:	fab3 f183 	clz	r1, r3
 8000400:	2900      	cmp	r1, #0
 8000402:	d149      	bne.n	8000498 <__udivmoddi4+0x158>
 8000404:	42ab      	cmp	r3, r5
 8000406:	d302      	bcc.n	800040e <__udivmoddi4+0xce>
 8000408:	4282      	cmp	r2, r0
 800040a:	f200 80f8 	bhi.w	80005fe <__udivmoddi4+0x2be>
 800040e:	1a84      	subs	r4, r0, r2
 8000410:	eb65 0203 	sbc.w	r2, r5, r3
 8000414:	2001      	movs	r0, #1
 8000416:	4617      	mov	r7, r2
 8000418:	2e00      	cmp	r6, #0
 800041a:	d0e2      	beq.n	80003e2 <__udivmoddi4+0xa2>
 800041c:	e9c6 4700 	strd	r4, r7, [r6]
 8000420:	e7df      	b.n	80003e2 <__udivmoddi4+0xa2>
 8000422:	b902      	cbnz	r2, 8000426 <__udivmoddi4+0xe6>
 8000424:	deff      	udf	#255	; 0xff
 8000426:	fab2 f382 	clz	r3, r2
 800042a:	2b00      	cmp	r3, #0
 800042c:	f040 8090 	bne.w	8000550 <__udivmoddi4+0x210>
 8000430:	1a8a      	subs	r2, r1, r2
 8000432:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000436:	fa1f fe8c 	uxth.w	lr, ip
 800043a:	2101      	movs	r1, #1
 800043c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000440:	fb07 2015 	mls	r0, r7, r5, r2
 8000444:	0c22      	lsrs	r2, r4, #16
 8000446:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800044a:	fb0e f005 	mul.w	r0, lr, r5
 800044e:	4290      	cmp	r0, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x124>
 8000452:	eb1c 0202 	adds.w	r2, ip, r2
 8000456:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x122>
 800045c:	4290      	cmp	r0, r2
 800045e:	f200 80cb 	bhi.w	80005f8 <__udivmoddi4+0x2b8>
 8000462:	4645      	mov	r5, r8
 8000464:	1a12      	subs	r2, r2, r0
 8000466:	b2a4      	uxth	r4, r4
 8000468:	fbb2 f0f7 	udiv	r0, r2, r7
 800046c:	fb07 2210 	mls	r2, r7, r0, r2
 8000470:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000474:	fb0e fe00 	mul.w	lr, lr, r0
 8000478:	45a6      	cmp	lr, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x14e>
 800047c:	eb1c 0404 	adds.w	r4, ip, r4
 8000480:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000484:	d202      	bcs.n	800048c <__udivmoddi4+0x14c>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f200 80bb 	bhi.w	8000602 <__udivmoddi4+0x2c2>
 800048c:	4610      	mov	r0, r2
 800048e:	eba4 040e 	sub.w	r4, r4, lr
 8000492:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000496:	e79f      	b.n	80003d8 <__udivmoddi4+0x98>
 8000498:	f1c1 0720 	rsb	r7, r1, #32
 800049c:	408b      	lsls	r3, r1
 800049e:	fa22 fc07 	lsr.w	ip, r2, r7
 80004a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80004a6:	fa05 f401 	lsl.w	r4, r5, r1
 80004aa:	fa20 f307 	lsr.w	r3, r0, r7
 80004ae:	40fd      	lsrs	r5, r7
 80004b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004b4:	4323      	orrs	r3, r4
 80004b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80004ba:	fa1f fe8c 	uxth.w	lr, ip
 80004be:	fb09 5518 	mls	r5, r9, r8, r5
 80004c2:	0c1c      	lsrs	r4, r3, #16
 80004c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004c8:	fb08 f50e 	mul.w	r5, r8, lr
 80004cc:	42a5      	cmp	r5, r4
 80004ce:	fa02 f201 	lsl.w	r2, r2, r1
 80004d2:	fa00 f001 	lsl.w	r0, r0, r1
 80004d6:	d90b      	bls.n	80004f0 <__udivmoddi4+0x1b0>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004e0:	f080 8088 	bcs.w	80005f4 <__udivmoddi4+0x2b4>
 80004e4:	42a5      	cmp	r5, r4
 80004e6:	f240 8085 	bls.w	80005f4 <__udivmoddi4+0x2b4>
 80004ea:	f1a8 0802 	sub.w	r8, r8, #2
 80004ee:	4464      	add	r4, ip
 80004f0:	1b64      	subs	r4, r4, r5
 80004f2:	b29d      	uxth	r5, r3
 80004f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004f8:	fb09 4413 	mls	r4, r9, r3, r4
 80004fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000500:	fb03 fe0e 	mul.w	lr, r3, lr
 8000504:	45a6      	cmp	lr, r4
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x1da>
 8000508:	eb1c 0404 	adds.w	r4, ip, r4
 800050c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000510:	d26c      	bcs.n	80005ec <__udivmoddi4+0x2ac>
 8000512:	45a6      	cmp	lr, r4
 8000514:	d96a      	bls.n	80005ec <__udivmoddi4+0x2ac>
 8000516:	3b02      	subs	r3, #2
 8000518:	4464      	add	r4, ip
 800051a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800051e:	fba3 9502 	umull	r9, r5, r3, r2
 8000522:	eba4 040e 	sub.w	r4, r4, lr
 8000526:	42ac      	cmp	r4, r5
 8000528:	46c8      	mov	r8, r9
 800052a:	46ae      	mov	lr, r5
 800052c:	d356      	bcc.n	80005dc <__udivmoddi4+0x29c>
 800052e:	d053      	beq.n	80005d8 <__udivmoddi4+0x298>
 8000530:	b156      	cbz	r6, 8000548 <__udivmoddi4+0x208>
 8000532:	ebb0 0208 	subs.w	r2, r0, r8
 8000536:	eb64 040e 	sbc.w	r4, r4, lr
 800053a:	fa04 f707 	lsl.w	r7, r4, r7
 800053e:	40ca      	lsrs	r2, r1
 8000540:	40cc      	lsrs	r4, r1
 8000542:	4317      	orrs	r7, r2
 8000544:	e9c6 7400 	strd	r7, r4, [r6]
 8000548:	4618      	mov	r0, r3
 800054a:	2100      	movs	r1, #0
 800054c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000550:	f1c3 0120 	rsb	r1, r3, #32
 8000554:	fa02 fc03 	lsl.w	ip, r2, r3
 8000558:	fa20 f201 	lsr.w	r2, r0, r1
 800055c:	fa25 f101 	lsr.w	r1, r5, r1
 8000560:	409d      	lsls	r5, r3
 8000562:	432a      	orrs	r2, r5
 8000564:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000568:	fa1f fe8c 	uxth.w	lr, ip
 800056c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000570:	fb07 1510 	mls	r5, r7, r0, r1
 8000574:	0c11      	lsrs	r1, r2, #16
 8000576:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800057a:	fb00 f50e 	mul.w	r5, r0, lr
 800057e:	428d      	cmp	r5, r1
 8000580:	fa04 f403 	lsl.w	r4, r4, r3
 8000584:	d908      	bls.n	8000598 <__udivmoddi4+0x258>
 8000586:	eb1c 0101 	adds.w	r1, ip, r1
 800058a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800058e:	d22f      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 8000590:	428d      	cmp	r5, r1
 8000592:	d92d      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 8000594:	3802      	subs	r0, #2
 8000596:	4461      	add	r1, ip
 8000598:	1b49      	subs	r1, r1, r5
 800059a:	b292      	uxth	r2, r2
 800059c:	fbb1 f5f7 	udiv	r5, r1, r7
 80005a0:	fb07 1115 	mls	r1, r7, r5, r1
 80005a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005a8:	fb05 f10e 	mul.w	r1, r5, lr
 80005ac:	4291      	cmp	r1, r2
 80005ae:	d908      	bls.n	80005c2 <__udivmoddi4+0x282>
 80005b0:	eb1c 0202 	adds.w	r2, ip, r2
 80005b4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80005b8:	d216      	bcs.n	80005e8 <__udivmoddi4+0x2a8>
 80005ba:	4291      	cmp	r1, r2
 80005bc:	d914      	bls.n	80005e8 <__udivmoddi4+0x2a8>
 80005be:	3d02      	subs	r5, #2
 80005c0:	4462      	add	r2, ip
 80005c2:	1a52      	subs	r2, r2, r1
 80005c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005c8:	e738      	b.n	800043c <__udivmoddi4+0xfc>
 80005ca:	4631      	mov	r1, r6
 80005cc:	4630      	mov	r0, r6
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xa2>
 80005d0:	4639      	mov	r1, r7
 80005d2:	e6e6      	b.n	80003a2 <__udivmoddi4+0x62>
 80005d4:	4610      	mov	r0, r2
 80005d6:	e6fb      	b.n	80003d0 <__udivmoddi4+0x90>
 80005d8:	4548      	cmp	r0, r9
 80005da:	d2a9      	bcs.n	8000530 <__udivmoddi4+0x1f0>
 80005dc:	ebb9 0802 	subs.w	r8, r9, r2
 80005e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005e4:	3b01      	subs	r3, #1
 80005e6:	e7a3      	b.n	8000530 <__udivmoddi4+0x1f0>
 80005e8:	4645      	mov	r5, r8
 80005ea:	e7ea      	b.n	80005c2 <__udivmoddi4+0x282>
 80005ec:	462b      	mov	r3, r5
 80005ee:	e794      	b.n	800051a <__udivmoddi4+0x1da>
 80005f0:	4640      	mov	r0, r8
 80005f2:	e7d1      	b.n	8000598 <__udivmoddi4+0x258>
 80005f4:	46d0      	mov	r8, sl
 80005f6:	e77b      	b.n	80004f0 <__udivmoddi4+0x1b0>
 80005f8:	3d02      	subs	r5, #2
 80005fa:	4462      	add	r2, ip
 80005fc:	e732      	b.n	8000464 <__udivmoddi4+0x124>
 80005fe:	4608      	mov	r0, r1
 8000600:	e70a      	b.n	8000418 <__udivmoddi4+0xd8>
 8000602:	4464      	add	r4, ip
 8000604:	3802      	subs	r0, #2
 8000606:	e742      	b.n	800048e <__udivmoddi4+0x14e>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <BME280_compensate_T_int32.1>:
  MX_SPI1_Init();
  /* USER CODE BEGIN 2 */


	// Copy functions from data sheet that compensate data from sensor and switch "BME280_S32_t" to "int32_t"
	int32_t BME280_compensate_T_int32(int32_t adc_T) {
 800060c:	b480      	push	{r7}
 800060e:	b087      	sub	sp, #28
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
 8000614:	4663      	mov	r3, ip
 8000616:	f8c7 c000 	str.w	ip, [r7]

		int32_t var1, var2, T;
		var1 = ((((adc_T >> 3) - ((int32_t) dig_T1 << 1))) * ((int32_t) dig_T2))
 800061a:	687a      	ldr	r2, [r7, #4]
 800061c:	10d1      	asrs	r1, r2, #3
 800061e:	8c1a      	ldrh	r2, [r3, #32]
 8000620:	0052      	lsls	r2, r2, #1
 8000622:	1a8a      	subs	r2, r1, r2
 8000624:	f9b3 101e 	ldrsh.w	r1, [r3, #30]
 8000628:	fb01 f202 	mul.w	r2, r1, r2
 800062c:	12d2      	asrs	r2, r2, #11
 800062e:	617a      	str	r2, [r7, #20]
				>> 11;
		var2 = (((((adc_T >> 4) - ((int32_t) dig_T1))
 8000630:	687a      	ldr	r2, [r7, #4]
 8000632:	1112      	asrs	r2, r2, #4
 8000634:	8c19      	ldrh	r1, [r3, #32]
 8000636:	1a52      	subs	r2, r2, r1
				* ((adc_T >> 4) - ((int32_t) dig_T1))) >> 12)
 8000638:	6879      	ldr	r1, [r7, #4]
 800063a:	1109      	asrs	r1, r1, #4
 800063c:	8c18      	ldrh	r0, [r3, #32]
 800063e:	1a09      	subs	r1, r1, r0
 8000640:	fb01 f202 	mul.w	r2, r1, r2
 8000644:	1312      	asrs	r2, r2, #12
				* ((int32_t) dig_T3)) >> 14;
 8000646:	f9b3 101c 	ldrsh.w	r1, [r3, #28]
 800064a:	fb01 f202 	mul.w	r2, r1, r2
		var2 = (((((adc_T >> 4) - ((int32_t) dig_T1))
 800064e:	1392      	asrs	r2, r2, #14
 8000650:	613a      	str	r2, [r7, #16]
		t_fine = var1 + var2;
 8000652:	6979      	ldr	r1, [r7, #20]
 8000654:	693a      	ldr	r2, [r7, #16]
 8000656:	440a      	add	r2, r1
 8000658:	601a      	str	r2, [r3, #0]
		T = (t_fine * 5 + 128) >> 8;
 800065a:	681a      	ldr	r2, [r3, #0]
 800065c:	4613      	mov	r3, r2
 800065e:	009b      	lsls	r3, r3, #2
 8000660:	4413      	add	r3, r2
 8000662:	3380      	adds	r3, #128	; 0x80
 8000664:	121b      	asrs	r3, r3, #8
 8000666:	60fb      	str	r3, [r7, #12]
		return T;
 8000668:	68fb      	ldr	r3, [r7, #12]
	}
 800066a:	4618      	mov	r0, r3
 800066c:	371c      	adds	r7, #28
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
	...

08000678 <main>:
{
 8000678:	b5b0      	push	{r4, r5, r7, lr}
 800067a:	b0ba      	sub	sp, #232	; 0xe8
 800067c:	af0e      	add	r7, sp, #56	; 0x38
int main(void)
 800067e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8000682:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HAL_Init();
 8000686:	f000 ffc7 	bl	8001618 <HAL_Init>
  SystemClock_Config();
 800068a:	f000 fd3b 	bl	8001104 <SystemClock_Config>
  MX_GPIO_Init();
 800068e:	f000 fdf9 	bl	8001284 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000692:	f000 fdc7 	bl	8001224 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000696:	f000 fd87 	bl	80011a8 <MX_SPI1_Init>
		*dig_H6 = (compData2[7]);

	}

	// Sets Chip select pin to high on init.
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800069a:	2201      	movs	r2, #1
 800069c:	2140      	movs	r1, #64	; 0x40
 800069e:	4890      	ldr	r0, [pc, #576]	; (80008e0 <main+0x268>)
 80006a0:	f001 faea 	bl	8001c78 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80006a4:	2064      	movs	r0, #100	; 0x64
 80006a6:	f001 f833 	bl	8001710 <HAL_Delay>

	uint8_t activateHumidity[2];
	activateHumidity[0] = 0xF2 & 0b01111111;  //From data sheet, it says to pass address, but the 7-bit should be 0 for write.
 80006aa:	2372      	movs	r3, #114	; 0x72
 80006ac:	733b      	strb	r3, [r7, #12]
	activateHumidity[1] = 0x03; //00000011  // From data sheet its only the first 3 bits that counts. And 011 says its oversampling ×4
 80006ae:	2303      	movs	r3, #3
 80006b0:	737b      	strb	r3, [r7, #13]

	uint8_t activateTempPres[2];
	activateTempPres[0] = 0xF4 & 0b01111111; //
 80006b2:	2374      	movs	r3, #116	; 0x74
 80006b4:	723b      	strb	r3, [r7, #8]
	activateTempPres[1] = 0x27; //00100111 //bit 7,6,5 = temperature sampling (001), bit 4,3,2 = hum sampling (001), bit 1,0 = normal mode (11)
 80006b6:	2327      	movs	r3, #39	; 0x27
 80006b8:	727b      	strb	r3, [r7, #9]

	// Sets chip select to low and sends address and value to initialization the sensor to normal mode with selected samples.
	//  From data sheet the humidity need to be initialization first, and only works after temperature and pressure also has been initialization.
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80006ba:	2200      	movs	r2, #0
 80006bc:	2140      	movs	r1, #64	; 0x40
 80006be:	4888      	ldr	r0, [pc, #544]	; (80008e0 <main+0x268>)
 80006c0:	f001 fada 	bl	8001c78 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, activateHumidity, 2, 1000);
 80006c4:	f107 010c 	add.w	r1, r7, #12
 80006c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006cc:	2202      	movs	r2, #2
 80006ce:	4885      	ldr	r0, [pc, #532]	; (80008e4 <main+0x26c>)
 80006d0:	f002 fead 	bl	800342e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80006d4:	2201      	movs	r2, #1
 80006d6:	2140      	movs	r1, #64	; 0x40
 80006d8:	4881      	ldr	r0, [pc, #516]	; (80008e0 <main+0x268>)
 80006da:	f001 facd 	bl	8001c78 <HAL_GPIO_WritePin>

	HAL_Delay(100);
 80006de:	2064      	movs	r0, #100	; 0x64
 80006e0:	f001 f816 	bl	8001710 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80006e4:	2200      	movs	r2, #0
 80006e6:	2140      	movs	r1, #64	; 0x40
 80006e8:	487d      	ldr	r0, [pc, #500]	; (80008e0 <main+0x268>)
 80006ea:	f001 fac5 	bl	8001c78 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, activateTempPres, 2, 1000);
 80006ee:	f107 0108 	add.w	r1, r7, #8
 80006f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006f6:	2202      	movs	r2, #2
 80006f8:	487a      	ldr	r0, [pc, #488]	; (80008e4 <main+0x26c>)
 80006fa:	f002 fe98 	bl	800342e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80006fe:	2201      	movs	r2, #1
 8000700:	2140      	movs	r1, #64	; 0x40
 8000702:	4877      	ldr	r0, [pc, #476]	; (80008e0 <main+0x268>)
 8000704:	f001 fab8 	bl	8001c78 <HAL_GPIO_WritePin>

	HAL_Delay(100);
 8000708:	2064      	movs	r0, #100	; 0x64
 800070a:	f001 f801 	bl	8001710 <HAL_Delay>

	calibData(&dig_T1, &dig_T2, &dig_T3, &dig_P1, &dig_P2, &dig_P3, &dig_P4, &dig_P5, &dig_P6, &dig_P7, &dig_P8, &dig_P9, &dig_H1, &dig_H2, &dig_H3, &dig_H4, &dig_H5, &dig_H6);
 800070e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000712:	f103 0410 	add.w	r4, r3, #16
 8000716:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800071a:	f103 021c 	add.w	r2, r3, #28
 800071e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000722:	f103 011e 	add.w	r1, r3, #30
 8000726:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800072a:	f103 0020 	add.w	r0, r3, #32
 800072e:	f107 0568 	add.w	r5, r7, #104	; 0x68
 8000732:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000736:	3324      	adds	r3, #36	; 0x24
 8000738:	930d      	str	r3, [sp, #52]	; 0x34
 800073a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800073e:	3306      	adds	r3, #6
 8000740:	930c      	str	r3, [sp, #48]	; 0x30
 8000742:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000746:	3308      	adds	r3, #8
 8000748:	930b      	str	r3, [sp, #44]	; 0x2c
 800074a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800074e:	3323      	adds	r3, #35	; 0x23
 8000750:	930a      	str	r3, [sp, #40]	; 0x28
 8000752:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000756:	3304      	adds	r3, #4
 8000758:	9309      	str	r3, [sp, #36]	; 0x24
 800075a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800075e:	3322      	adds	r3, #34	; 0x22
 8000760:	9308      	str	r3, [sp, #32]
 8000762:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000766:	330e      	adds	r3, #14
 8000768:	9307      	str	r3, [sp, #28]
 800076a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800076e:	330c      	adds	r3, #12
 8000770:	9306      	str	r3, [sp, #24]
 8000772:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000776:	330a      	adds	r3, #10
 8000778:	9305      	str	r3, [sp, #20]
 800077a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800077e:	331a      	adds	r3, #26
 8000780:	9304      	str	r3, [sp, #16]
 8000782:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000786:	3318      	adds	r3, #24
 8000788:	9303      	str	r3, [sp, #12]
 800078a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800078e:	3316      	adds	r3, #22
 8000790:	9302      	str	r3, [sp, #8]
 8000792:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000796:	3314      	adds	r3, #20
 8000798:	9301      	str	r3, [sp, #4]
 800079a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800079e:	3312      	adds	r3, #18
 80007a0:	9300      	str	r3, [sp, #0]
 80007a2:	46ac      	mov	ip, r5
 80007a4:	4623      	mov	r3, r4
 80007a6:	f000 fba9 	bl	8000efc <calibData.0>

	HAL_Delay(100);
 80007aa:	2064      	movs	r0, #100	; 0x64
 80007ac:	f000 ffb0 	bl	8001710 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	uint8_t chipAddress = 0xD0 | 0b10000000; //From data sheet, it says to pass address, but the 7-bit should be 1 for read
 80007b0:	23d0      	movs	r3, #208	; 0xd0
 80007b2:	71fb      	strb	r3, [r7, #7]
	uint8_t chipID; // Shall write memory from sensor to this memory address on stm32
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80007b4:	2200      	movs	r2, #0
 80007b6:	2140      	movs	r1, #64	; 0x40
 80007b8:	4849      	ldr	r0, [pc, #292]	; (80008e0 <main+0x268>)
 80007ba:	f001 fa5d 	bl	8001c78 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &chipAddress, 1, 1000);
 80007be:	1df9      	adds	r1, r7, #7
 80007c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007c4:	2201      	movs	r2, #1
 80007c6:	4847      	ldr	r0, [pc, #284]	; (80008e4 <main+0x26c>)
 80007c8:	f002 fe31 	bl	800342e <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &chipID, 1, 1000);
 80007cc:	1db9      	adds	r1, r7, #6
 80007ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007d2:	2201      	movs	r2, #1
 80007d4:	4843      	ldr	r0, [pc, #268]	; (80008e4 <main+0x26c>)
 80007d6:	f002 ff9f 	bl	8003718 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80007da:	2201      	movs	r2, #1
 80007dc:	2140      	movs	r1, #64	; 0x40
 80007de:	4840      	ldr	r0, [pc, #256]	; (80008e0 <main+0x268>)
 80007e0:	f001 fa4a 	bl	8001c78 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80007e4:	2064      	movs	r0, #100	; 0x64
 80007e6:	f000 ff93 	bl	8001710 <HAL_Delay>

	uint8_t rawDataAddress = 0xF7; // Here the 7bit already is 1.
 80007ea:	23f7      	movs	r3, #247	; 0xf7
 80007ec:	717b      	strb	r3, [r7, #5]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2140      	movs	r1, #64	; 0x40
 80007f2:	483b      	ldr	r0, [pc, #236]	; (80008e0 <main+0x268>)
 80007f4:	f001 fa40 	bl	8001c78 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &rawDataAddress, 1, 1000);
 80007f8:	1d79      	adds	r1, r7, #5
 80007fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007fe:	2201      	movs	r2, #1
 8000800:	4838      	ldr	r0, [pc, #224]	; (80008e4 <main+0x26c>)
 8000802:	f002 fe14 	bl	800342e <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, rawData, 8, 1000);
 8000806:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800080a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800080e:	2208      	movs	r2, #8
 8000810:	4834      	ldr	r0, [pc, #208]	; (80008e4 <main+0x26c>)
 8000812:	f002 ff81 	bl	8003718 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000816:	2201      	movs	r2, #1
 8000818:	2140      	movs	r1, #64	; 0x40
 800081a:	4831      	ldr	r0, [pc, #196]	; (80008e0 <main+0x268>)
 800081c:	f001 fa2c 	bl	8001c78 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000820:	2064      	movs	r0, #100	; 0x64
 8000822:	f000 ff75 	bl	8001710 <HAL_Delay>

	pRaw = (rawData[0]<<12)|(rawData[1]<<4)|(rawData[2]>>4); // Organize data from list to their corresponding variable as it is in data sheet.
 8000826:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800082a:	031a      	lsls	r2, r3, #12
 800082c:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8000830:	011b      	lsls	r3, r3, #4
 8000832:	4313      	orrs	r3, r2
 8000834:	f897 2062 	ldrb.w	r2, [r7, #98]	; 0x62
 8000838:	0912      	lsrs	r2, r2, #4
 800083a:	b2d2      	uxtb	r2, r2
 800083c:	4313      	orrs	r3, r2
 800083e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	tRaw = (rawData[3]<<12)|(rawData[4]<<4)|(rawData[5]>>4);
 8000842:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000846:	031a      	lsls	r2, r3, #12
 8000848:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800084c:	011b      	lsls	r3, r3, #4
 800084e:	4313      	orrs	r3, r2
 8000850:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 8000854:	0912      	lsrs	r2, r2, #4
 8000856:	b2d2      	uxtb	r2, r2
 8000858:	4313      	orrs	r3, r2
 800085a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	hRaw = (rawData[6]<<8)|(rawData[7]);
 800085e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000862:	021b      	lsls	r3, r3, #8
 8000864:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8000868:	4313      	orrs	r3, r2
 800086a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	temp = BME280_compensate_T_int32(tRaw); // Put data in function and receive corrected data
 800086e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000872:	469c      	mov	ip, r3
 8000874:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8000878:	f7ff fec8 	bl	800060c <BME280_compensate_T_int32.1>
 800087c:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
	pressure = BME280_compensate_P_int64(pRaw);
 8000880:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000884:	469c      	mov	ip, r3
 8000886:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800088a:	f000 f831 	bl	80008f0 <BME280_compensate_P_int64.2>
 800088e:	4603      	mov	r3, r0
 8000890:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	humid = bme280_compensate_H_int32(hRaw);
 8000894:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000898:	469c      	mov	ip, r3
 800089a:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 800089e:	f000 fad1 	bl	8000e44 <bme280_compensate_H_int32.3>
 80008a2:	4603      	mov	r3, r0
 80008a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

	len = sprintf(sendData, "%u,%u,%u\n", temp, pressure, humid); // Turn initialization to string
 80008a8:	f107 0010 	add.w	r0, r7, #16
 80008ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80008b0:	9300      	str	r3, [sp, #0]
 80008b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80008b6:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80008ba:	490b      	ldr	r1, [pc, #44]	; (80008e8 <main+0x270>)
 80008bc:	f004 f9e8 	bl	8004c90 <siprintf>
 80008c0:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

	HAL_UART_Transmit(&huart2, (uint8_t*) sendData, len, 10); // Sending with UART
 80008c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80008c8:	b29a      	uxth	r2, r3
 80008ca:	f107 0110 	add.w	r1, r7, #16
 80008ce:	230a      	movs	r3, #10
 80008d0:	4806      	ldr	r0, [pc, #24]	; (80008ec <main+0x274>)
 80008d2:	f003 fc85 	bl	80041e0 <HAL_UART_Transmit>
	HAL_Delay(100);
 80008d6:	2064      	movs	r0, #100	; 0x64
 80008d8:	f000 ff1a 	bl	8001710 <HAL_Delay>
  {
 80008dc:	e768      	b.n	80007b0 <main+0x138>
 80008de:	bf00      	nop
 80008e0:	48000400 	.word	0x48000400
 80008e4:	20000078 	.word	0x20000078
 80008e8:	080055f0 	.word	0x080055f0
 80008ec:	200000dc 	.word	0x200000dc

080008f0 <BME280_compensate_P_int64.2>:
	uint32_t BME280_compensate_P_int64(int32_t adc_P) {
 80008f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80008f4:	b0cb      	sub	sp, #300	; 0x12c
 80008f6:	af00      	add	r7, sp, #0
 80008f8:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 80008fc:	4666      	mov	r6, ip
 80008fe:	f8c7 c108 	str.w	ip, [r7, #264]	; 0x108
		var1 = ((int64_t) t_fine) - 128000;
 8000902:	6833      	ldr	r3, [r6, #0]
 8000904:	17da      	asrs	r2, r3, #31
 8000906:	461c      	mov	r4, r3
 8000908:	4615      	mov	r5, r2
 800090a:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 800090e:	f145 3bff 	adc.w	fp, r5, #4294967295	; 0xffffffff
 8000912:	e9c7 ab48 	strd	sl, fp, [r7, #288]	; 0x120
		var2 = var1 * var1 * (int64_t) dig_P6;
 8000916:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800091a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800091e:	fb03 f102 	mul.w	r1, r3, r2
 8000922:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8000926:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800092a:	fb02 f303 	mul.w	r3, r2, r3
 800092e:	18ca      	adds	r2, r1, r3
 8000930:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000934:	fba3 8903 	umull	r8, r9, r3, r3
 8000938:	eb02 0309 	add.w	r3, r2, r9
 800093c:	4699      	mov	r9, r3
 800093e:	f9b6 301a 	ldrsh.w	r3, [r6, #26]
 8000942:	b21b      	sxth	r3, r3
 8000944:	17da      	asrs	r2, r3, #31
 8000946:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800094a:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800094e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8000952:	4603      	mov	r3, r0
 8000954:	fb03 f209 	mul.w	r2, r3, r9
 8000958:	460b      	mov	r3, r1
 800095a:	fb08 f303 	mul.w	r3, r8, r3
 800095e:	4413      	add	r3, r2
 8000960:	4602      	mov	r2, r0
 8000962:	fba8 1202 	umull	r1, r2, r8, r2
 8000966:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800096a:	460a      	mov	r2, r1
 800096c:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8000970:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8000974:	4413      	add	r3, r2
 8000976:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800097a:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 800097e:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 8000982:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		var2 = var2 + ((var1 * (int64_t) dig_P5) << 17);
 8000986:	f9b6 3018 	ldrsh.w	r3, [r6, #24]
 800098a:	b21b      	sxth	r3, r3
 800098c:	17da      	asrs	r2, r3, #31
 800098e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000992:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8000996:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800099a:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 800099e:	462a      	mov	r2, r5
 80009a0:	fb02 f203 	mul.w	r2, r2, r3
 80009a4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80009a8:	4621      	mov	r1, r4
 80009aa:	fb01 f303 	mul.w	r3, r1, r3
 80009ae:	441a      	add	r2, r3
 80009b0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80009b4:	4621      	mov	r1, r4
 80009b6:	fba3 1301 	umull	r1, r3, r3, r1
 80009ba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80009be:	460b      	mov	r3, r1
 80009c0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80009c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80009c8:	18d3      	adds	r3, r2, r3
 80009ca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80009ce:	f04f 0000 	mov.w	r0, #0
 80009d2:	f04f 0100 	mov.w	r1, #0
 80009d6:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 80009da:	462b      	mov	r3, r5
 80009dc:	0459      	lsls	r1, r3, #17
 80009de:	4623      	mov	r3, r4
 80009e0:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 80009e4:	4623      	mov	r3, r4
 80009e6:	0458      	lsls	r0, r3, #17
 80009e8:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80009ec:	1814      	adds	r4, r2, r0
 80009ee:	643c      	str	r4, [r7, #64]	; 0x40
 80009f0:	414b      	adcs	r3, r1
 80009f2:	647b      	str	r3, [r7, #68]	; 0x44
 80009f4:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80009f8:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		var2 = var2 + (((int64_t) dig_P4) << 35);
 80009fc:	f9b6 3016 	ldrsh.w	r3, [r6, #22]
 8000a00:	b21b      	sxth	r3, r3
 8000a02:	17da      	asrs	r2, r3, #31
 8000a04:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000a08:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8000a0c:	f04f 0000 	mov.w	r0, #0
 8000a10:	f04f 0100 	mov.w	r1, #0
 8000a14:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000a18:	00d9      	lsls	r1, r3, #3
 8000a1a:	2000      	movs	r0, #0
 8000a1c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8000a20:	1814      	adds	r4, r2, r0
 8000a22:	63bc      	str	r4, [r7, #56]	; 0x38
 8000a24:	414b      	adcs	r3, r1
 8000a26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000a28:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8000a2c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		var1 = ((var1 * var1 * (int64_t) dig_P3) >> 8)
 8000a30:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8000a34:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000a38:	fb03 f102 	mul.w	r1, r3, r2
 8000a3c:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8000a40:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000a44:	fb02 f303 	mul.w	r3, r2, r3
 8000a48:	18ca      	adds	r2, r1, r3
 8000a4a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000a4e:	fba3 1303 	umull	r1, r3, r3, r3
 8000a52:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8000a56:	460b      	mov	r3, r1
 8000a58:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8000a5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000a60:	18d3      	adds	r3, r2, r3
 8000a62:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8000a66:	f9b6 3014 	ldrsh.w	r3, [r6, #20]
 8000a6a:	b21b      	sxth	r3, r3
 8000a6c:	17da      	asrs	r2, r3, #31
 8000a6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8000a72:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8000a76:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 8000a7a:	462b      	mov	r3, r5
 8000a7c:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8000a80:	4642      	mov	r2, r8
 8000a82:	fb02 f203 	mul.w	r2, r2, r3
 8000a86:	464b      	mov	r3, r9
 8000a88:	4621      	mov	r1, r4
 8000a8a:	fb01 f303 	mul.w	r3, r1, r3
 8000a8e:	4413      	add	r3, r2
 8000a90:	4622      	mov	r2, r4
 8000a92:	4641      	mov	r1, r8
 8000a94:	fba2 1201 	umull	r1, r2, r2, r1
 8000a98:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8000a9c:	460a      	mov	r2, r1
 8000a9e:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8000aa2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8000aa6:	4413      	add	r3, r2
 8000aa8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	f04f 0100 	mov.w	r1, #0
 8000ab4:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8000ab8:	4623      	mov	r3, r4
 8000aba:	0a18      	lsrs	r0, r3, #8
 8000abc:	462b      	mov	r3, r5
 8000abe:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000ac2:	462b      	mov	r3, r5
 8000ac4:	1219      	asrs	r1, r3, #8
				+ ((var1 * (int64_t) dig_P2) << 12);
 8000ac6:	f9b6 3012 	ldrsh.w	r3, [r6, #18]
 8000aca:	b21b      	sxth	r3, r3
 8000acc:	17da      	asrs	r2, r3, #31
 8000ace:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000ad2:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8000ad6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000ada:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8000ade:	464a      	mov	r2, r9
 8000ae0:	fb02 f203 	mul.w	r2, r2, r3
 8000ae4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000ae8:	4644      	mov	r4, r8
 8000aea:	fb04 f303 	mul.w	r3, r4, r3
 8000aee:	441a      	add	r2, r3
 8000af0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000af4:	4644      	mov	r4, r8
 8000af6:	fba3 4304 	umull	r4, r3, r3, r4
 8000afa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8000afe:	4623      	mov	r3, r4
 8000b00:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000b04:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000b08:	18d3      	adds	r3, r2, r3
 8000b0a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8000b0e:	f04f 0200 	mov.w	r2, #0
 8000b12:	f04f 0300 	mov.w	r3, #0
 8000b16:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8000b1a:	464c      	mov	r4, r9
 8000b1c:	0323      	lsls	r3, r4, #12
 8000b1e:	4644      	mov	r4, r8
 8000b20:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8000b24:	4644      	mov	r4, r8
 8000b26:	0322      	lsls	r2, r4, #12
		var1 = ((var1 * var1 * (int64_t) dig_P3) >> 8)
 8000b28:	1884      	adds	r4, r0, r2
 8000b2a:	633c      	str	r4, [r7, #48]	; 0x30
 8000b2c:	eb41 0303 	adc.w	r3, r1, r3
 8000b30:	637b      	str	r3, [r7, #52]	; 0x34
 8000b32:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8000b36:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
		var1 = (((((int64_t) 1) << 47) + var1)) * ((int64_t) dig_P1) >> 33;
 8000b3a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8000b3e:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8000b42:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8000b46:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8000b4a:	8a33      	ldrh	r3, [r6, #16]
 8000b4c:	b29b      	uxth	r3, r3
 8000b4e:	2200      	movs	r2, #0
 8000b50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000b54:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8000b58:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8000b5c:	462b      	mov	r3, r5
 8000b5e:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8000b62:	4642      	mov	r2, r8
 8000b64:	fb02 f203 	mul.w	r2, r2, r3
 8000b68:	464b      	mov	r3, r9
 8000b6a:	4621      	mov	r1, r4
 8000b6c:	fb01 f303 	mul.w	r3, r1, r3
 8000b70:	4413      	add	r3, r2
 8000b72:	4622      	mov	r2, r4
 8000b74:	4641      	mov	r1, r8
 8000b76:	fba2 1201 	umull	r1, r2, r2, r1
 8000b7a:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8000b7e:	460a      	mov	r2, r1
 8000b80:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8000b84:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8000b88:	4413      	add	r3, r2
 8000b8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8000b8e:	f04f 0200 	mov.w	r2, #0
 8000b92:	f04f 0300 	mov.w	r3, #0
 8000b96:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8000b9a:	4629      	mov	r1, r5
 8000b9c:	104a      	asrs	r2, r1, #1
 8000b9e:	4629      	mov	r1, r5
 8000ba0:	17cb      	asrs	r3, r1, #31
 8000ba2:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
		if (var1 == 0) {
 8000ba6:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8000baa:	4313      	orrs	r3, r2
 8000bac:	d101      	bne.n	8000bb2 <BME280_compensate_P_int64.2+0x2c2>
			return 0; // avoid exception caused by division by zero
 8000bae:	2300      	movs	r3, #0
 8000bb0:	e142      	b.n	8000e38 <BME280_compensate_P_int64.2+0x548>
		p = 1048576 - adc_P;
 8000bb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000bb6:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8000bba:	17da      	asrs	r2, r3, #31
 8000bbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8000bbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000bc0:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8000bc4:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
		p = (((p << 31) - var2) * 3125) / var1;
 8000bc8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000bcc:	105b      	asrs	r3, r3, #1
 8000bce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000bd2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000bd6:	07db      	lsls	r3, r3, #31
 8000bd8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000bdc:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8000be0:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8000be4:	4621      	mov	r1, r4
 8000be6:	1a89      	subs	r1, r1, r2
 8000be8:	67b9      	str	r1, [r7, #120]	; 0x78
 8000bea:	4629      	mov	r1, r5
 8000bec:	eb61 0303 	sbc.w	r3, r1, r3
 8000bf0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000bf2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8000bf6:	4622      	mov	r2, r4
 8000bf8:	462b      	mov	r3, r5
 8000bfa:	1891      	adds	r1, r2, r2
 8000bfc:	6239      	str	r1, [r7, #32]
 8000bfe:	415b      	adcs	r3, r3
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
 8000c02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000c06:	4621      	mov	r1, r4
 8000c08:	1851      	adds	r1, r2, r1
 8000c0a:	61b9      	str	r1, [r7, #24]
 8000c0c:	4629      	mov	r1, r5
 8000c0e:	414b      	adcs	r3, r1
 8000c10:	61fb      	str	r3, [r7, #28]
 8000c12:	f04f 0200 	mov.w	r2, #0
 8000c16:	f04f 0300 	mov.w	r3, #0
 8000c1a:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8000c1e:	4649      	mov	r1, r9
 8000c20:	018b      	lsls	r3, r1, #6
 8000c22:	4641      	mov	r1, r8
 8000c24:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8000c28:	4641      	mov	r1, r8
 8000c2a:	018a      	lsls	r2, r1, #6
 8000c2c:	4641      	mov	r1, r8
 8000c2e:	1889      	adds	r1, r1, r2
 8000c30:	6139      	str	r1, [r7, #16]
 8000c32:	4649      	mov	r1, r9
 8000c34:	eb43 0101 	adc.w	r1, r3, r1
 8000c38:	6179      	str	r1, [r7, #20]
 8000c3a:	f04f 0200 	mov.w	r2, #0
 8000c3e:	f04f 0300 	mov.w	r3, #0
 8000c42:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8000c46:	4649      	mov	r1, r9
 8000c48:	008b      	lsls	r3, r1, #2
 8000c4a:	4641      	mov	r1, r8
 8000c4c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000c50:	4641      	mov	r1, r8
 8000c52:	008a      	lsls	r2, r1, #2
 8000c54:	4610      	mov	r0, r2
 8000c56:	4619      	mov	r1, r3
 8000c58:	4603      	mov	r3, r0
 8000c5a:	4622      	mov	r2, r4
 8000c5c:	189b      	adds	r3, r3, r2
 8000c5e:	60bb      	str	r3, [r7, #8]
 8000c60:	460b      	mov	r3, r1
 8000c62:	462a      	mov	r2, r5
 8000c64:	eb42 0303 	adc.w	r3, r2, r3
 8000c68:	60fb      	str	r3, [r7, #12]
 8000c6a:	f04f 0200 	mov.w	r2, #0
 8000c6e:	f04f 0300 	mov.w	r3, #0
 8000c72:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8000c76:	4649      	mov	r1, r9
 8000c78:	008b      	lsls	r3, r1, #2
 8000c7a:	4641      	mov	r1, r8
 8000c7c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000c80:	4641      	mov	r1, r8
 8000c82:	008a      	lsls	r2, r1, #2
 8000c84:	4610      	mov	r0, r2
 8000c86:	4619      	mov	r1, r3
 8000c88:	4603      	mov	r3, r0
 8000c8a:	4622      	mov	r2, r4
 8000c8c:	189b      	adds	r3, r3, r2
 8000c8e:	673b      	str	r3, [r7, #112]	; 0x70
 8000c90:	462b      	mov	r3, r5
 8000c92:	460a      	mov	r2, r1
 8000c94:	eb42 0303 	adc.w	r3, r2, r3
 8000c98:	677b      	str	r3, [r7, #116]	; 0x74
 8000c9a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8000c9e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8000ca2:	f7ff fae5 	bl	8000270 <__aeabi_ldivmod>
 8000ca6:	4602      	mov	r2, r0
 8000ca8:	460b      	mov	r3, r1
 8000caa:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
		var1 = (((int64_t) dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 8000cae:	f9b6 300e 	ldrsh.w	r3, [r6, #14]
 8000cb2:	b21b      	sxth	r3, r3
 8000cb4:	17da      	asrs	r2, r3, #31
 8000cb6:	66bb      	str	r3, [r7, #104]	; 0x68
 8000cb8:	66fa      	str	r2, [r7, #108]	; 0x6c
 8000cba:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8000cbe:	f04f 0000 	mov.w	r0, #0
 8000cc2:	f04f 0100 	mov.w	r1, #0
 8000cc6:	0b50      	lsrs	r0, r2, #13
 8000cc8:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000ccc:	1359      	asrs	r1, r3, #13
 8000cce:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8000cd2:	462b      	mov	r3, r5
 8000cd4:	fb00 f203 	mul.w	r2, r0, r3
 8000cd8:	4623      	mov	r3, r4
 8000cda:	fb03 f301 	mul.w	r3, r3, r1
 8000cde:	4413      	add	r3, r2
 8000ce0:	4622      	mov	r2, r4
 8000ce2:	fba2 1200 	umull	r1, r2, r2, r0
 8000ce6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8000cea:	460a      	mov	r2, r1
 8000cec:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8000cf0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8000cf4:	4413      	add	r3, r2
 8000cf6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8000cfa:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8000cfe:	f04f 0000 	mov.w	r0, #0
 8000d02:	f04f 0100 	mov.w	r1, #0
 8000d06:	0b50      	lsrs	r0, r2, #13
 8000d08:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000d0c:	1359      	asrs	r1, r3, #13
 8000d0e:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8000d12:	462b      	mov	r3, r5
 8000d14:	fb00 f203 	mul.w	r2, r0, r3
 8000d18:	4623      	mov	r3, r4
 8000d1a:	fb03 f301 	mul.w	r3, r3, r1
 8000d1e:	4413      	add	r3, r2
 8000d20:	4622      	mov	r2, r4
 8000d22:	fba2 1200 	umull	r1, r2, r2, r0
 8000d26:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8000d2a:	460a      	mov	r2, r1
 8000d2c:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8000d30:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8000d34:	4413      	add	r3, r2
 8000d36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8000d3a:	f04f 0200 	mov.w	r2, #0
 8000d3e:	f04f 0300 	mov.w	r3, #0
 8000d42:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8000d46:	4621      	mov	r1, r4
 8000d48:	0e4a      	lsrs	r2, r1, #25
 8000d4a:	4629      	mov	r1, r5
 8000d4c:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8000d50:	4629      	mov	r1, r5
 8000d52:	164b      	asrs	r3, r1, #25
 8000d54:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
		var2 = (((int64_t) dig_P8) * p) >> 19;
 8000d58:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8000d5c:	b21b      	sxth	r3, r3
 8000d5e:	17da      	asrs	r2, r3, #31
 8000d60:	663b      	str	r3, [r7, #96]	; 0x60
 8000d62:	667a      	str	r2, [r7, #100]	; 0x64
 8000d64:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000d68:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8000d6c:	462a      	mov	r2, r5
 8000d6e:	fb02 f203 	mul.w	r2, r2, r3
 8000d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000d76:	4621      	mov	r1, r4
 8000d78:	fb01 f303 	mul.w	r3, r1, r3
 8000d7c:	4413      	add	r3, r2
 8000d7e:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8000d82:	4621      	mov	r1, r4
 8000d84:	fba2 1201 	umull	r1, r2, r2, r1
 8000d88:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8000d8c:	460a      	mov	r2, r1
 8000d8e:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8000d92:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8000d96:	4413      	add	r3, r2
 8000d98:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8000d9c:	f04f 0200 	mov.w	r2, #0
 8000da0:	f04f 0300 	mov.w	r3, #0
 8000da4:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8000da8:	4621      	mov	r1, r4
 8000daa:	0cca      	lsrs	r2, r1, #19
 8000dac:	4629      	mov	r1, r5
 8000dae:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8000db2:	4629      	mov	r1, r5
 8000db4:	14cb      	asrs	r3, r1, #19
 8000db6:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
		p = ((p + var1 + var2) >> 8) + (((int64_t) dig_P7) << 4);
 8000dba:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8000dbe:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8000dc2:	1884      	adds	r4, r0, r2
 8000dc4:	65bc      	str	r4, [r7, #88]	; 0x58
 8000dc6:	eb41 0303 	adc.w	r3, r1, r3
 8000dca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000dcc:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8000dd0:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8000dd4:	4621      	mov	r1, r4
 8000dd6:	1889      	adds	r1, r1, r2
 8000dd8:	6539      	str	r1, [r7, #80]	; 0x50
 8000dda:	4629      	mov	r1, r5
 8000ddc:	eb43 0101 	adc.w	r1, r3, r1
 8000de0:	6579      	str	r1, [r7, #84]	; 0x54
 8000de2:	f04f 0000 	mov.w	r0, #0
 8000de6:	f04f 0100 	mov.w	r1, #0
 8000dea:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8000dee:	4623      	mov	r3, r4
 8000df0:	0a18      	lsrs	r0, r3, #8
 8000df2:	462b      	mov	r3, r5
 8000df4:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000df8:	462b      	mov	r3, r5
 8000dfa:	1219      	asrs	r1, r3, #8
 8000dfc:	f9b6 300a 	ldrsh.w	r3, [r6, #10]
 8000e00:	b21b      	sxth	r3, r3
 8000e02:	17da      	asrs	r2, r3, #31
 8000e04:	64bb      	str	r3, [r7, #72]	; 0x48
 8000e06:	64fa      	str	r2, [r7, #76]	; 0x4c
 8000e08:	f04f 0200 	mov.w	r2, #0
 8000e0c:	f04f 0300 	mov.w	r3, #0
 8000e10:	e9d7 5612 	ldrd	r5, r6, [r7, #72]	; 0x48
 8000e14:	4634      	mov	r4, r6
 8000e16:	0123      	lsls	r3, r4, #4
 8000e18:	462c      	mov	r4, r5
 8000e1a:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000e1e:	462c      	mov	r4, r5
 8000e20:	0122      	lsls	r2, r4, #4
 8000e22:	1884      	adds	r4, r0, r2
 8000e24:	603c      	str	r4, [r7, #0]
 8000e26:	eb41 0303 	adc.w	r3, r1, r3
 8000e2a:	607b      	str	r3, [r7, #4]
 8000e2c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000e30:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
		return (uint32_t) p;
 8000e34:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
	}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f507 7796 	add.w	r7, r7, #300	; 0x12c
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000e44 <bme280_compensate_H_int32.3>:
	uint32_t bme280_compensate_H_int32(int32_t adc_H) {
 8000e44:	b490      	push	{r4, r7}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	4663      	mov	r3, ip
 8000e4e:	f8c7 c000 	str.w	ip, [r7]
		v_x1_u32r = (t_fine - ((int32_t) 76800));
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	f5a2 3296 	sub.w	r2, r2, #76800	; 0x12c00
 8000e58:	60fa      	str	r2, [r7, #12]
		v_x1_u32r = (((((adc_H << 14) - (((int32_t) dig_H4) << 20)
 8000e5a:	687a      	ldr	r2, [r7, #4]
 8000e5c:	0391      	lsls	r1, r2, #14
 8000e5e:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8000e62:	0512      	lsls	r2, r2, #20
 8000e64:	1a89      	subs	r1, r1, r2
				- (((int32_t) dig_H5) * v_x1_u32r)) + ((int32_t) 16384)) >> 15)
 8000e66:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8000e6a:	4610      	mov	r0, r2
 8000e6c:	68fa      	ldr	r2, [r7, #12]
 8000e6e:	fb00 f202 	mul.w	r2, r0, r2
 8000e72:	1a8a      	subs	r2, r1, r2
 8000e74:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8000e78:	13d2      	asrs	r2, r2, #15
				* (((((((v_x1_u32r * ((int32_t) dig_H6)) >> 10)
 8000e7a:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
 8000e7e:	4608      	mov	r0, r1
 8000e80:	68f9      	ldr	r1, [r7, #12]
 8000e82:	fb00 f101 	mul.w	r1, r0, r1
 8000e86:	1289      	asrs	r1, r1, #10
						* (((v_x1_u32r * ((int32_t) dig_H3)) >> 11)
 8000e88:	f893 0023 	ldrb.w	r0, [r3, #35]	; 0x23
 8000e8c:	4604      	mov	r4, r0
 8000e8e:	68f8      	ldr	r0, [r7, #12]
 8000e90:	fb04 f000 	mul.w	r0, r4, r0
 8000e94:	12c0      	asrs	r0, r0, #11
								+ ((int32_t) 32768))) >> 10)
 8000e96:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
						* (((v_x1_u32r * ((int32_t) dig_H3)) >> 11)
 8000e9a:	fb00 f101 	mul.w	r1, r0, r1
								+ ((int32_t) 32768))) >> 10)
 8000e9e:	1289      	asrs	r1, r1, #10
						+ ((int32_t) 2097152)) * ((int32_t) dig_H2) + 8192)
 8000ea0:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 8000ea4:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
 8000ea8:	fb00 f101 	mul.w	r1, r0, r1
 8000eac:	f501 5100 	add.w	r1, r1, #8192	; 0x2000
						>> 14));
 8000eb0:	1389      	asrs	r1, r1, #14
		v_x1_u32r = (((((adc_H << 14) - (((int32_t) dig_H4) << 20)
 8000eb2:	fb01 f202 	mul.w	r2, r1, r2
 8000eb6:	60fa      	str	r2, [r7, #12]
				- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8000eb8:	68fa      	ldr	r2, [r7, #12]
 8000eba:	13d2      	asrs	r2, r2, #15
 8000ebc:	68f9      	ldr	r1, [r7, #12]
 8000ebe:	13c9      	asrs	r1, r1, #15
 8000ec0:	fb01 f202 	mul.w	r2, r1, r2
 8000ec4:	11d2      	asrs	r2, r2, #7
						* ((int32_t) dig_H1)) >> 4));
 8000ec6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8000eca:	fb02 f303 	mul.w	r3, r2, r3
 8000ece:	111b      	asrs	r3, r3, #4
		v_x1_u32r = (v_x1_u32r
 8000ed0:	68fa      	ldr	r2, [r7, #12]
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	60fb      	str	r3, [r7, #12]
		v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8000edc:	60fb      	str	r3, [r7, #12]
		v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8000ee4:	bfa8      	it	ge
 8000ee6:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8000eea:	60fb      	str	r3, [r7, #12]
		return (uint32_t) (v_x1_u32r >> 12);
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	131b      	asrs	r3, r3, #12
	}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3710      	adds	r7, #16
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bc90      	pop	{r4, r7}
 8000ef8:	4770      	bx	lr
	...

08000efc <calibData.0>:
	void calibData(uint16_t *dig_T1,int16_t *dig_T2,int16_t *dig_T3,uint16_t *dig_P1,int16_t *dig_P2,int16_t *dig_P3,int16_t *dig_P4,int16_t *dig_P5,int16_t *dig_P6,int16_t *dig_P7,int16_t *dig_P8,int16_t *dig_P9,uint8_t *dig_H1,int16_t *dig_H2,uint8_t *dig_H3,int16_t *dig_H4,int16_t *dig_H5,uint8_t *dig_H6){
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b090      	sub	sp, #64	; 0x40
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6178      	str	r0, [r7, #20]
 8000f04:	6139      	str	r1, [r7, #16]
 8000f06:	60fa      	str	r2, [r7, #12]
 8000f08:	60bb      	str	r3, [r7, #8]
 8000f0a:	f8c7 c004 	str.w	ip, [r7, #4]
		uint8_t tempPresAddress = 0x88; //From data sheet, it says to pass address, but the 7-bit should be 1 for read. As it already is
 8000f0e:	2388      	movs	r3, #136	; 0x88
 8000f10:	76fb      	strb	r3, [r7, #27]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000f12:	2200      	movs	r2, #0
 8000f14:	2140      	movs	r1, #64	; 0x40
 8000f16:	4879      	ldr	r0, [pc, #484]	; (80010fc <calibData.0+0x200>)
 8000f18:	f000 feae 	bl	8001c78 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, &tempPresAddress, 1, 1000);
 8000f1c:	f107 011b 	add.w	r1, r7, #27
 8000f20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f24:	2201      	movs	r2, #1
 8000f26:	4876      	ldr	r0, [pc, #472]	; (8001100 <calibData.0+0x204>)
 8000f28:	f002 fa81 	bl	800342e <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, compData, 25, 1000); // From data sheet it says when reading more than one byte it will read from the next address. This is taken advantage of by reading multiple bytes from one line and adding them to a list.
 8000f2c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000f30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f34:	2219      	movs	r2, #25
 8000f36:	4872      	ldr	r0, [pc, #456]	; (8001100 <calibData.0+0x204>)
 8000f38:	f002 fbee 	bl	8003718 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	2140      	movs	r1, #64	; 0x40
 8000f40:	486e      	ldr	r0, [pc, #440]	; (80010fc <calibData.0+0x200>)
 8000f42:	f000 fe99 	bl	8001c78 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000f46:	2064      	movs	r0, #100	; 0x64
 8000f48:	f000 fbe2 	bl	8001710 <HAL_Delay>
		uint8_t humAddress = 0xE1; // Here the 7bit already is 1.
 8000f4c:	23e1      	movs	r3, #225	; 0xe1
 8000f4e:	76bb      	strb	r3, [r7, #26]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000f50:	2200      	movs	r2, #0
 8000f52:	2140      	movs	r1, #64	; 0x40
 8000f54:	4869      	ldr	r0, [pc, #420]	; (80010fc <calibData.0+0x200>)
 8000f56:	f000 fe8f 	bl	8001c78 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, &humAddress, 1, 1000);
 8000f5a:	f107 011a 	add.w	r1, r7, #26
 8000f5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f62:	2201      	movs	r2, #1
 8000f64:	4866      	ldr	r0, [pc, #408]	; (8001100 <calibData.0+0x204>)
 8000f66:	f002 fa62 	bl	800342e <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, compData2, 7, 1000);
 8000f6a:	f107 011c 	add.w	r1, r7, #28
 8000f6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f72:	2207      	movs	r2, #7
 8000f74:	4862      	ldr	r0, [pc, #392]	; (8001100 <calibData.0+0x204>)
 8000f76:	f002 fbcf 	bl	8003718 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	2140      	movs	r1, #64	; 0x40
 8000f7e:	485f      	ldr	r0, [pc, #380]	; (80010fc <calibData.0+0x200>)
 8000f80:	f000 fe7a 	bl	8001c78 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000f84:	2064      	movs	r0, #100	; 0x64
 8000f86:	f000 fbc3 	bl	8001710 <HAL_Delay>
		*dig_T1 = (compData[1] << 8) | compData[0]; // Organize data from list to their corresponding variable as it is in data sheet.
 8000f8a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000f8e:	021b      	lsls	r3, r3, #8
 8000f90:	b21a      	sxth	r2, r3
 8000f92:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000f96:	b21b      	sxth	r3, r3
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	b21b      	sxth	r3, r3
 8000f9c:	b29a      	uxth	r2, r3
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	801a      	strh	r2, [r3, #0]
		*dig_T2 = (compData[3] << 8) | compData[2];
 8000fa2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000fa6:	021b      	lsls	r3, r3, #8
 8000fa8:	b21a      	sxth	r2, r3
 8000faa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000fae:	b21b      	sxth	r3, r3
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	b21a      	sxth	r2, r3
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	801a      	strh	r2, [r3, #0]
		*dig_T3 = (compData[5] << 8) | compData[4];
 8000fb8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000fbc:	021b      	lsls	r3, r3, #8
 8000fbe:	b21a      	sxth	r2, r3
 8000fc0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000fc4:	b21b      	sxth	r3, r3
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	b21a      	sxth	r2, r3
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	801a      	strh	r2, [r3, #0]
		*dig_P1 = (compData[7] << 8) | compData[5];
 8000fce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000fd2:	021b      	lsls	r3, r3, #8
 8000fd4:	b21a      	sxth	r2, r3
 8000fd6:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000fda:	b21b      	sxth	r3, r3
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	b21b      	sxth	r3, r3
 8000fe0:	b29a      	uxth	r2, r3
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	801a      	strh	r2, [r3, #0]
		*dig_P2 = (compData[9] << 8) | compData[6];
 8000fe6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000fea:	021b      	lsls	r3, r3, #8
 8000fec:	b21a      	sxth	r2, r3
 8000fee:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000ff2:	b21b      	sxth	r3, r3
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	b21a      	sxth	r2, r3
 8000ff8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ffa:	801a      	strh	r2, [r3, #0]
		*dig_P3 = (compData[11] << 8) | compData[10];
 8000ffc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001000:	021b      	lsls	r3, r3, #8
 8001002:	b21a      	sxth	r2, r3
 8001004:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001008:	b21b      	sxth	r3, r3
 800100a:	4313      	orrs	r3, r2
 800100c:	b21a      	sxth	r2, r3
 800100e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001010:	801a      	strh	r2, [r3, #0]
		*dig_P4 = (compData[13] << 8) | compData[12];
 8001012:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001016:	021b      	lsls	r3, r3, #8
 8001018:	b21a      	sxth	r2, r3
 800101a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800101e:	b21b      	sxth	r3, r3
 8001020:	4313      	orrs	r3, r2
 8001022:	b21a      	sxth	r2, r3
 8001024:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001026:	801a      	strh	r2, [r3, #0]
		*dig_P5 = (compData[15] << 8) | compData[14];
 8001028:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800102c:	021b      	lsls	r3, r3, #8
 800102e:	b21a      	sxth	r2, r3
 8001030:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001034:	b21b      	sxth	r3, r3
 8001036:	4313      	orrs	r3, r2
 8001038:	b21a      	sxth	r2, r3
 800103a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800103c:	801a      	strh	r2, [r3, #0]
		*dig_P6 = (compData[17] << 8) | compData[16];
 800103e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001042:	021b      	lsls	r3, r3, #8
 8001044:	b21a      	sxth	r2, r3
 8001046:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800104a:	b21b      	sxth	r3, r3
 800104c:	4313      	orrs	r3, r2
 800104e:	b21a      	sxth	r2, r3
 8001050:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001052:	801a      	strh	r2, [r3, #0]
		*dig_P7 = (compData[19] << 8) | compData[18];
 8001054:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001058:	021b      	lsls	r3, r3, #8
 800105a:	b21a      	sxth	r2, r3
 800105c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001060:	b21b      	sxth	r3, r3
 8001062:	4313      	orrs	r3, r2
 8001064:	b21a      	sxth	r2, r3
 8001066:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001068:	801a      	strh	r2, [r3, #0]
		*dig_P8 = (compData[21] << 8) | compData[20];
 800106a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800106e:	021b      	lsls	r3, r3, #8
 8001070:	b21a      	sxth	r2, r3
 8001072:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001076:	b21b      	sxth	r3, r3
 8001078:	4313      	orrs	r3, r2
 800107a:	b21a      	sxth	r2, r3
 800107c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800107e:	801a      	strh	r2, [r3, #0]
		*dig_P9 = (compData[23] << 8) | compData[22];
 8001080:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001084:	021b      	lsls	r3, r3, #8
 8001086:	b21a      	sxth	r2, r3
 8001088:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800108c:	b21b      	sxth	r3, r3
 800108e:	4313      	orrs	r3, r2
 8001090:	b21a      	sxth	r2, r3
 8001092:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001094:	801a      	strh	r2, [r3, #0]
		*dig_H1 = compData[24];
 8001096:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 800109a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800109c:	701a      	strb	r2, [r3, #0]
		*dig_H2 = (compData2[1] << 8) | compData2[0];
 800109e:	7f7b      	ldrb	r3, [r7, #29]
 80010a0:	021b      	lsls	r3, r3, #8
 80010a2:	b21a      	sxth	r2, r3
 80010a4:	7f3b      	ldrb	r3, [r7, #28]
 80010a6:	b21b      	sxth	r3, r3
 80010a8:	4313      	orrs	r3, r2
 80010aa:	b21a      	sxth	r2, r3
 80010ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80010ae:	801a      	strh	r2, [r3, #0]
		*dig_H3 = (compData2[2]);
 80010b0:	7fba      	ldrb	r2, [r7, #30]
 80010b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80010b4:	701a      	strb	r2, [r3, #0]
		*dig_H4 = (compData2[3] << 4) | (compData2[4] & 0x0f);
 80010b6:	7ffb      	ldrb	r3, [r7, #31]
 80010b8:	011b      	lsls	r3, r3, #4
 80010ba:	b21a      	sxth	r2, r3
 80010bc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80010c0:	b21b      	sxth	r3, r3
 80010c2:	f003 030f 	and.w	r3, r3, #15
 80010c6:	b21b      	sxth	r3, r3
 80010c8:	4313      	orrs	r3, r2
 80010ca:	b21a      	sxth	r2, r3
 80010cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80010ce:	801a      	strh	r2, [r3, #0]
		*dig_H5 = (compData2[6] << 4) | (compData2[5] >> 4);
 80010d0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80010d4:	011b      	lsls	r3, r3, #4
 80010d6:	b21a      	sxth	r2, r3
 80010d8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80010dc:	091b      	lsrs	r3, r3, #4
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	b21b      	sxth	r3, r3
 80010e2:	4313      	orrs	r3, r2
 80010e4:	b21a      	sxth	r2, r3
 80010e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80010e8:	801a      	strh	r2, [r3, #0]
		*dig_H6 = (compData2[7]);
 80010ea:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80010ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80010f0:	701a      	strb	r2, [r3, #0]
	}
 80010f2:	bf00      	nop
 80010f4:	3740      	adds	r7, #64	; 0x40
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	48000400 	.word	0x48000400
 8001100:	20000078 	.word	0x20000078

08001104 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b096      	sub	sp, #88	; 0x58
 8001108:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800110a:	f107 0314 	add.w	r3, r7, #20
 800110e:	2244      	movs	r2, #68	; 0x44
 8001110:	2100      	movs	r1, #0
 8001112:	4618      	mov	r0, r3
 8001114:	f003 fddc 	bl	8004cd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001118:	463b      	mov	r3, r7
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]
 8001120:	609a      	str	r2, [r3, #8]
 8001122:	60da      	str	r2, [r3, #12]
 8001124:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001126:	f44f 7000 	mov.w	r0, #512	; 0x200
 800112a:	f000 fdcb 	bl	8001cc4 <HAL_PWREx_ControlVoltageScaling>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001134:	f000 f90c 	bl	8001350 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001138:	2302      	movs	r3, #2
 800113a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800113c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001140:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001142:	2310      	movs	r3, #16
 8001144:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001146:	2302      	movs	r3, #2
 8001148:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800114a:	2302      	movs	r3, #2
 800114c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800114e:	2301      	movs	r3, #1
 8001150:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001152:	230a      	movs	r3, #10
 8001154:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001156:	2307      	movs	r3, #7
 8001158:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800115a:	2302      	movs	r3, #2
 800115c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800115e:	2302      	movs	r3, #2
 8001160:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001162:	f107 0314 	add.w	r3, r7, #20
 8001166:	4618      	mov	r0, r3
 8001168:	f000 fe02 	bl	8001d70 <HAL_RCC_OscConfig>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001172:	f000 f8ed 	bl	8001350 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001176:	230f      	movs	r3, #15
 8001178:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800117a:	2303      	movs	r3, #3
 800117c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800117e:	2300      	movs	r3, #0
 8001180:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001182:	2300      	movs	r3, #0
 8001184:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001186:	2300      	movs	r3, #0
 8001188:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800118a:	463b      	mov	r3, r7
 800118c:	2104      	movs	r1, #4
 800118e:	4618      	mov	r0, r3
 8001190:	f001 f9ca 	bl	8002528 <HAL_RCC_ClockConfig>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800119a:	f000 f8d9 	bl	8001350 <Error_Handler>
  }
}
 800119e:	bf00      	nop
 80011a0:	3758      	adds	r7, #88	; 0x58
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
	...

080011a8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011ac:	4b1b      	ldr	r3, [pc, #108]	; (800121c <MX_SPI1_Init+0x74>)
 80011ae:	4a1c      	ldr	r2, [pc, #112]	; (8001220 <MX_SPI1_Init+0x78>)
 80011b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011b2:	4b1a      	ldr	r3, [pc, #104]	; (800121c <MX_SPI1_Init+0x74>)
 80011b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011ba:	4b18      	ldr	r3, [pc, #96]	; (800121c <MX_SPI1_Init+0x74>)
 80011bc:	2200      	movs	r2, #0
 80011be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011c0:	4b16      	ldr	r3, [pc, #88]	; (800121c <MX_SPI1_Init+0x74>)
 80011c2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80011c6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011c8:	4b14      	ldr	r3, [pc, #80]	; (800121c <MX_SPI1_Init+0x74>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011ce:	4b13      	ldr	r3, [pc, #76]	; (800121c <MX_SPI1_Init+0x74>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011d4:	4b11      	ldr	r3, [pc, #68]	; (800121c <MX_SPI1_Init+0x74>)
 80011d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011da:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80011dc:	4b0f      	ldr	r3, [pc, #60]	; (800121c <MX_SPI1_Init+0x74>)
 80011de:	2228      	movs	r2, #40	; 0x28
 80011e0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011e2:	4b0e      	ldr	r3, [pc, #56]	; (800121c <MX_SPI1_Init+0x74>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011e8:	4b0c      	ldr	r3, [pc, #48]	; (800121c <MX_SPI1_Init+0x74>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011ee:	4b0b      	ldr	r3, [pc, #44]	; (800121c <MX_SPI1_Init+0x74>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80011f4:	4b09      	ldr	r3, [pc, #36]	; (800121c <MX_SPI1_Init+0x74>)
 80011f6:	2207      	movs	r2, #7
 80011f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80011fa:	4b08      	ldr	r3, [pc, #32]	; (800121c <MX_SPI1_Init+0x74>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001200:	4b06      	ldr	r3, [pc, #24]	; (800121c <MX_SPI1_Init+0x74>)
 8001202:	2208      	movs	r2, #8
 8001204:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001206:	4805      	ldr	r0, [pc, #20]	; (800121c <MX_SPI1_Init+0x74>)
 8001208:	f002 f86e 	bl	80032e8 <HAL_SPI_Init>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001212:	f000 f89d 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000078 	.word	0x20000078
 8001220:	40013000 	.word	0x40013000

08001224 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001228:	4b14      	ldr	r3, [pc, #80]	; (800127c <MX_USART2_UART_Init+0x58>)
 800122a:	4a15      	ldr	r2, [pc, #84]	; (8001280 <MX_USART2_UART_Init+0x5c>)
 800122c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800122e:	4b13      	ldr	r3, [pc, #76]	; (800127c <MX_USART2_UART_Init+0x58>)
 8001230:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001234:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001236:	4b11      	ldr	r3, [pc, #68]	; (800127c <MX_USART2_UART_Init+0x58>)
 8001238:	2200      	movs	r2, #0
 800123a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800123c:	4b0f      	ldr	r3, [pc, #60]	; (800127c <MX_USART2_UART_Init+0x58>)
 800123e:	2200      	movs	r2, #0
 8001240:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001242:	4b0e      	ldr	r3, [pc, #56]	; (800127c <MX_USART2_UART_Init+0x58>)
 8001244:	2200      	movs	r2, #0
 8001246:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001248:	4b0c      	ldr	r3, [pc, #48]	; (800127c <MX_USART2_UART_Init+0x58>)
 800124a:	220c      	movs	r2, #12
 800124c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800124e:	4b0b      	ldr	r3, [pc, #44]	; (800127c <MX_USART2_UART_Init+0x58>)
 8001250:	2200      	movs	r2, #0
 8001252:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001254:	4b09      	ldr	r3, [pc, #36]	; (800127c <MX_USART2_UART_Init+0x58>)
 8001256:	2200      	movs	r2, #0
 8001258:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800125a:	4b08      	ldr	r3, [pc, #32]	; (800127c <MX_USART2_UART_Init+0x58>)
 800125c:	2200      	movs	r2, #0
 800125e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001260:	4b06      	ldr	r3, [pc, #24]	; (800127c <MX_USART2_UART_Init+0x58>)
 8001262:	2200      	movs	r2, #0
 8001264:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001266:	4805      	ldr	r0, [pc, #20]	; (800127c <MX_USART2_UART_Init+0x58>)
 8001268:	f002 ff6c 	bl	8004144 <HAL_UART_Init>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001272:	f000 f86d 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	200000dc 	.word	0x200000dc
 8001280:	40004400 	.word	0x40004400

08001284 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b08a      	sub	sp, #40	; 0x28
 8001288:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128a:	f107 0314 	add.w	r3, r7, #20
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	60da      	str	r2, [r3, #12]
 8001298:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800129a:	4b2a      	ldr	r3, [pc, #168]	; (8001344 <MX_GPIO_Init+0xc0>)
 800129c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129e:	4a29      	ldr	r2, [pc, #164]	; (8001344 <MX_GPIO_Init+0xc0>)
 80012a0:	f043 0304 	orr.w	r3, r3, #4
 80012a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012a6:	4b27      	ldr	r3, [pc, #156]	; (8001344 <MX_GPIO_Init+0xc0>)
 80012a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012aa:	f003 0304 	and.w	r3, r3, #4
 80012ae:	613b      	str	r3, [r7, #16]
 80012b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012b2:	4b24      	ldr	r3, [pc, #144]	; (8001344 <MX_GPIO_Init+0xc0>)
 80012b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b6:	4a23      	ldr	r2, [pc, #140]	; (8001344 <MX_GPIO_Init+0xc0>)
 80012b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012be:	4b21      	ldr	r3, [pc, #132]	; (8001344 <MX_GPIO_Init+0xc0>)
 80012c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ca:	4b1e      	ldr	r3, [pc, #120]	; (8001344 <MX_GPIO_Init+0xc0>)
 80012cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ce:	4a1d      	ldr	r2, [pc, #116]	; (8001344 <MX_GPIO_Init+0xc0>)
 80012d0:	f043 0301 	orr.w	r3, r3, #1
 80012d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012d6:	4b1b      	ldr	r3, [pc, #108]	; (8001344 <MX_GPIO_Init+0xc0>)
 80012d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	60bb      	str	r3, [r7, #8]
 80012e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e2:	4b18      	ldr	r3, [pc, #96]	; (8001344 <MX_GPIO_Init+0xc0>)
 80012e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e6:	4a17      	ldr	r2, [pc, #92]	; (8001344 <MX_GPIO_Init+0xc0>)
 80012e8:	f043 0302 	orr.w	r3, r3, #2
 80012ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ee:	4b15      	ldr	r3, [pc, #84]	; (8001344 <MX_GPIO_Init+0xc0>)
 80012f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f2:	f003 0302 	and.w	r3, r3, #2
 80012f6:	607b      	str	r3, [r7, #4]
 80012f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_RESET);
 80012fa:	2200      	movs	r2, #0
 80012fc:	2140      	movs	r1, #64	; 0x40
 80012fe:	4812      	ldr	r0, [pc, #72]	; (8001348 <MX_GPIO_Init+0xc4>)
 8001300:	f000 fcba 	bl	8001c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001304:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001308:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800130a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800130e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001314:	f107 0314 	add.w	r3, r7, #20
 8001318:	4619      	mov	r1, r3
 800131a:	480c      	ldr	r0, [pc, #48]	; (800134c <MX_GPIO_Init+0xc8>)
 800131c:	f000 fb02 	bl	8001924 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS1_Pin */
  GPIO_InitStruct.Pin = CS1_Pin;
 8001320:	2340      	movs	r3, #64	; 0x40
 8001322:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001324:	2301      	movs	r3, #1
 8001326:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132c:	2300      	movs	r3, #0
 800132e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS1_GPIO_Port, &GPIO_InitStruct);
 8001330:	f107 0314 	add.w	r3, r7, #20
 8001334:	4619      	mov	r1, r3
 8001336:	4804      	ldr	r0, [pc, #16]	; (8001348 <MX_GPIO_Init+0xc4>)
 8001338:	f000 faf4 	bl	8001924 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800133c:	bf00      	nop
 800133e:	3728      	adds	r7, #40	; 0x28
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40021000 	.word	0x40021000
 8001348:	48000400 	.word	0x48000400
 800134c:	48000800 	.word	0x48000800

08001350 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001354:	b672      	cpsid	i
}
 8001356:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001358:	e7fe      	b.n	8001358 <Error_Handler+0x8>
	...

0800135c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001362:	4b0f      	ldr	r3, [pc, #60]	; (80013a0 <HAL_MspInit+0x44>)
 8001364:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001366:	4a0e      	ldr	r2, [pc, #56]	; (80013a0 <HAL_MspInit+0x44>)
 8001368:	f043 0301 	orr.w	r3, r3, #1
 800136c:	6613      	str	r3, [r2, #96]	; 0x60
 800136e:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <HAL_MspInit+0x44>)
 8001370:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	607b      	str	r3, [r7, #4]
 8001378:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800137a:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <HAL_MspInit+0x44>)
 800137c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800137e:	4a08      	ldr	r2, [pc, #32]	; (80013a0 <HAL_MspInit+0x44>)
 8001380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001384:	6593      	str	r3, [r2, #88]	; 0x58
 8001386:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <HAL_MspInit+0x44>)
 8001388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800138a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800138e:	603b      	str	r3, [r7, #0]
 8001390:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001392:	bf00      	nop
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	40021000 	.word	0x40021000

080013a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08a      	sub	sp, #40	; 0x28
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ac:	f107 0314 	add.w	r3, r7, #20
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a17      	ldr	r2, [pc, #92]	; (8001420 <HAL_SPI_MspInit+0x7c>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d128      	bne.n	8001418 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013c6:	4b17      	ldr	r3, [pc, #92]	; (8001424 <HAL_SPI_MspInit+0x80>)
 80013c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ca:	4a16      	ldr	r2, [pc, #88]	; (8001424 <HAL_SPI_MspInit+0x80>)
 80013cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013d0:	6613      	str	r3, [r2, #96]	; 0x60
 80013d2:	4b14      	ldr	r3, [pc, #80]	; (8001424 <HAL_SPI_MspInit+0x80>)
 80013d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013da:	613b      	str	r3, [r7, #16]
 80013dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013de:	4b11      	ldr	r3, [pc, #68]	; (8001424 <HAL_SPI_MspInit+0x80>)
 80013e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e2:	4a10      	ldr	r2, [pc, #64]	; (8001424 <HAL_SPI_MspInit+0x80>)
 80013e4:	f043 0301 	orr.w	r3, r3, #1
 80013e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ea:	4b0e      	ldr	r3, [pc, #56]	; (8001424 <HAL_SPI_MspInit+0x80>)
 80013ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ee:	f003 0301 	and.w	r3, r3, #1
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80013f6:	23e0      	movs	r3, #224	; 0xe0
 80013f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fa:	2302      	movs	r3, #2
 80013fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fe:	2300      	movs	r3, #0
 8001400:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001402:	2303      	movs	r3, #3
 8001404:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001406:	2305      	movs	r3, #5
 8001408:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140a:	f107 0314 	add.w	r3, r7, #20
 800140e:	4619      	mov	r1, r3
 8001410:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001414:	f000 fa86 	bl	8001924 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001418:	bf00      	nop
 800141a:	3728      	adds	r7, #40	; 0x28
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40013000 	.word	0x40013000
 8001424:	40021000 	.word	0x40021000

08001428 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b0ac      	sub	sp, #176	; 0xb0
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001430:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]
 800143c:	60da      	str	r2, [r3, #12]
 800143e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001440:	f107 0314 	add.w	r3, r7, #20
 8001444:	2288      	movs	r2, #136	; 0x88
 8001446:	2100      	movs	r1, #0
 8001448:	4618      	mov	r0, r3
 800144a:	f003 fc41 	bl	8004cd0 <memset>
  if(huart->Instance==USART2)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a21      	ldr	r2, [pc, #132]	; (80014d8 <HAL_UART_MspInit+0xb0>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d13b      	bne.n	80014d0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001458:	2302      	movs	r3, #2
 800145a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800145c:	2300      	movs	r3, #0
 800145e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001460:	f107 0314 	add.w	r3, r7, #20
 8001464:	4618      	mov	r0, r3
 8001466:	f001 fa83 	bl	8002970 <HAL_RCCEx_PeriphCLKConfig>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001470:	f7ff ff6e 	bl	8001350 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001474:	4b19      	ldr	r3, [pc, #100]	; (80014dc <HAL_UART_MspInit+0xb4>)
 8001476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001478:	4a18      	ldr	r2, [pc, #96]	; (80014dc <HAL_UART_MspInit+0xb4>)
 800147a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800147e:	6593      	str	r3, [r2, #88]	; 0x58
 8001480:	4b16      	ldr	r3, [pc, #88]	; (80014dc <HAL_UART_MspInit+0xb4>)
 8001482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001484:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001488:	613b      	str	r3, [r7, #16]
 800148a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800148c:	4b13      	ldr	r3, [pc, #76]	; (80014dc <HAL_UART_MspInit+0xb4>)
 800148e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001490:	4a12      	ldr	r2, [pc, #72]	; (80014dc <HAL_UART_MspInit+0xb4>)
 8001492:	f043 0301 	orr.w	r3, r3, #1
 8001496:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001498:	4b10      	ldr	r3, [pc, #64]	; (80014dc <HAL_UART_MspInit+0xb4>)
 800149a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149c:	f003 0301 	and.w	r3, r3, #1
 80014a0:	60fb      	str	r3, [r7, #12]
 80014a2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80014a4:	230c      	movs	r3, #12
 80014a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014aa:	2302      	movs	r3, #2
 80014ac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b6:	2303      	movs	r3, #3
 80014b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014bc:	2307      	movs	r3, #7
 80014be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014c6:	4619      	mov	r1, r3
 80014c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014cc:	f000 fa2a 	bl	8001924 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014d0:	bf00      	nop
 80014d2:	37b0      	adds	r7, #176	; 0xb0
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40004400 	.word	0x40004400
 80014dc:	40021000 	.word	0x40021000

080014e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014e4:	e7fe      	b.n	80014e4 <NMI_Handler+0x4>

080014e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014e6:	b480      	push	{r7}
 80014e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ea:	e7fe      	b.n	80014ea <HardFault_Handler+0x4>

080014ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014f0:	e7fe      	b.n	80014f0 <MemManage_Handler+0x4>

080014f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014f2:	b480      	push	{r7}
 80014f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014f6:	e7fe      	b.n	80014f6 <BusFault_Handler+0x4>

080014f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014fc:	e7fe      	b.n	80014fc <UsageFault_Handler+0x4>

080014fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014fe:	b480      	push	{r7}
 8001500:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001502:	bf00      	nop
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001510:	bf00      	nop
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr

0800151a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800151a:	b480      	push	{r7}
 800151c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800152c:	f000 f8d0 	bl	80016d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001530:	bf00      	nop
 8001532:	bd80      	pop	{r7, pc}

08001534 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b086      	sub	sp, #24
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800153c:	4a14      	ldr	r2, [pc, #80]	; (8001590 <_sbrk+0x5c>)
 800153e:	4b15      	ldr	r3, [pc, #84]	; (8001594 <_sbrk+0x60>)
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001548:	4b13      	ldr	r3, [pc, #76]	; (8001598 <_sbrk+0x64>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d102      	bne.n	8001556 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001550:	4b11      	ldr	r3, [pc, #68]	; (8001598 <_sbrk+0x64>)
 8001552:	4a12      	ldr	r2, [pc, #72]	; (800159c <_sbrk+0x68>)
 8001554:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001556:	4b10      	ldr	r3, [pc, #64]	; (8001598 <_sbrk+0x64>)
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4413      	add	r3, r2
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	429a      	cmp	r2, r3
 8001562:	d207      	bcs.n	8001574 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001564:	f003 fbbc 	bl	8004ce0 <__errno>
 8001568:	4603      	mov	r3, r0
 800156a:	220c      	movs	r2, #12
 800156c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800156e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001572:	e009      	b.n	8001588 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001574:	4b08      	ldr	r3, [pc, #32]	; (8001598 <_sbrk+0x64>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800157a:	4b07      	ldr	r3, [pc, #28]	; (8001598 <_sbrk+0x64>)
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4413      	add	r3, r2
 8001582:	4a05      	ldr	r2, [pc, #20]	; (8001598 <_sbrk+0x64>)
 8001584:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001586:	68fb      	ldr	r3, [r7, #12]
}
 8001588:	4618      	mov	r0, r3
 800158a:	3718      	adds	r7, #24
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20018000 	.word	0x20018000
 8001594:	00000400 	.word	0x00000400
 8001598:	20000164 	.word	0x20000164
 800159c:	200002b8 	.word	0x200002b8

080015a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80015a4:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <SystemInit+0x20>)
 80015a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015aa:	4a05      	ldr	r2, [pc, #20]	; (80015c0 <SystemInit+0x20>)
 80015ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	e000ed00 	.word	0xe000ed00

080015c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80015c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015fc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015c8:	f7ff ffea 	bl	80015a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015cc:	480c      	ldr	r0, [pc, #48]	; (8001600 <LoopForever+0x6>)
  ldr r1, =_edata
 80015ce:	490d      	ldr	r1, [pc, #52]	; (8001604 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015d0:	4a0d      	ldr	r2, [pc, #52]	; (8001608 <LoopForever+0xe>)
  movs r3, #0
 80015d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015d4:	e002      	b.n	80015dc <LoopCopyDataInit>

080015d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015da:	3304      	adds	r3, #4

080015dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015e0:	d3f9      	bcc.n	80015d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015e2:	4a0a      	ldr	r2, [pc, #40]	; (800160c <LoopForever+0x12>)
  ldr r4, =_ebss
 80015e4:	4c0a      	ldr	r4, [pc, #40]	; (8001610 <LoopForever+0x16>)
  movs r3, #0
 80015e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015e8:	e001      	b.n	80015ee <LoopFillZerobss>

080015ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015ec:	3204      	adds	r2, #4

080015ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015f0:	d3fb      	bcc.n	80015ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015f2:	f003 fb7b 	bl	8004cec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015f6:	f7ff f83f 	bl	8000678 <main>

080015fa <LoopForever>:

LoopForever:
    b LoopForever
 80015fa:	e7fe      	b.n	80015fa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80015fc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001600:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001604:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001608:	08005688 	.word	0x08005688
  ldr r2, =_sbss
 800160c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001610:	200002b4 	.word	0x200002b4

08001614 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001614:	e7fe      	b.n	8001614 <ADC1_2_IRQHandler>
	...

08001618 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800161e:	2300      	movs	r3, #0
 8001620:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001622:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <HAL_Init+0x3c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a0b      	ldr	r2, [pc, #44]	; (8001654 <HAL_Init+0x3c>)
 8001628:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800162c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800162e:	2003      	movs	r0, #3
 8001630:	f000 f944 	bl	80018bc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001634:	2000      	movs	r0, #0
 8001636:	f000 f80f 	bl	8001658 <HAL_InitTick>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d002      	beq.n	8001646 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	71fb      	strb	r3, [r7, #7]
 8001644:	e001      	b.n	800164a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001646:	f7ff fe89 	bl	800135c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800164a:	79fb      	ldrb	r3, [r7, #7]
}
 800164c:	4618      	mov	r0, r3
 800164e:	3708      	adds	r7, #8
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	40022000 	.word	0x40022000

08001658 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001660:	2300      	movs	r3, #0
 8001662:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001664:	4b17      	ldr	r3, [pc, #92]	; (80016c4 <HAL_InitTick+0x6c>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d023      	beq.n	80016b4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800166c:	4b16      	ldr	r3, [pc, #88]	; (80016c8 <HAL_InitTick+0x70>)
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	4b14      	ldr	r3, [pc, #80]	; (80016c4 <HAL_InitTick+0x6c>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	4619      	mov	r1, r3
 8001676:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800167a:	fbb3 f3f1 	udiv	r3, r3, r1
 800167e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001682:	4618      	mov	r0, r3
 8001684:	f000 f941 	bl	800190a <HAL_SYSTICK_Config>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d10f      	bne.n	80016ae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2b0f      	cmp	r3, #15
 8001692:	d809      	bhi.n	80016a8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001694:	2200      	movs	r2, #0
 8001696:	6879      	ldr	r1, [r7, #4]
 8001698:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800169c:	f000 f919 	bl	80018d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016a0:	4a0a      	ldr	r2, [pc, #40]	; (80016cc <HAL_InitTick+0x74>)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6013      	str	r3, [r2, #0]
 80016a6:	e007      	b.n	80016b8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	73fb      	strb	r3, [r7, #15]
 80016ac:	e004      	b.n	80016b8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	73fb      	strb	r3, [r7, #15]
 80016b2:	e001      	b.n	80016b8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80016b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3710      	adds	r7, #16
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20000008 	.word	0x20000008
 80016c8:	20000000 	.word	0x20000000
 80016cc:	20000004 	.word	0x20000004

080016d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016d4:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <HAL_IncTick+0x20>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	461a      	mov	r2, r3
 80016da:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <HAL_IncTick+0x24>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4413      	add	r3, r2
 80016e0:	4a04      	ldr	r2, [pc, #16]	; (80016f4 <HAL_IncTick+0x24>)
 80016e2:	6013      	str	r3, [r2, #0]
}
 80016e4:	bf00      	nop
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	20000008 	.word	0x20000008
 80016f4:	20000168 	.word	0x20000168

080016f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  return uwTick;
 80016fc:	4b03      	ldr	r3, [pc, #12]	; (800170c <HAL_GetTick+0x14>)
 80016fe:	681b      	ldr	r3, [r3, #0]
}
 8001700:	4618      	mov	r0, r3
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	20000168 	.word	0x20000168

08001710 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001718:	f7ff ffee 	bl	80016f8 <HAL_GetTick>
 800171c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001728:	d005      	beq.n	8001736 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800172a:	4b0a      	ldr	r3, [pc, #40]	; (8001754 <HAL_Delay+0x44>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	461a      	mov	r2, r3
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	4413      	add	r3, r2
 8001734:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001736:	bf00      	nop
 8001738:	f7ff ffde 	bl	80016f8 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	68fa      	ldr	r2, [r7, #12]
 8001744:	429a      	cmp	r2, r3
 8001746:	d8f7      	bhi.n	8001738 <HAL_Delay+0x28>
  {
  }
}
 8001748:	bf00      	nop
 800174a:	bf00      	nop
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20000008 	.word	0x20000008

08001758 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f003 0307 	and.w	r3, r3, #7
 8001766:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001768:	4b0c      	ldr	r3, [pc, #48]	; (800179c <__NVIC_SetPriorityGrouping+0x44>)
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800176e:	68ba      	ldr	r2, [r7, #8]
 8001770:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001774:	4013      	ands	r3, r2
 8001776:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001780:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001784:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001788:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800178a:	4a04      	ldr	r2, [pc, #16]	; (800179c <__NVIC_SetPriorityGrouping+0x44>)
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	60d3      	str	r3, [r2, #12]
}
 8001790:	bf00      	nop
 8001792:	3714      	adds	r7, #20
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	e000ed00 	.word	0xe000ed00

080017a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017a4:	4b04      	ldr	r3, [pc, #16]	; (80017b8 <__NVIC_GetPriorityGrouping+0x18>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	0a1b      	lsrs	r3, r3, #8
 80017aa:	f003 0307 	and.w	r3, r3, #7
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	e000ed00 	.word	0xe000ed00

080017bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	6039      	str	r1, [r7, #0]
 80017c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	db0a      	blt.n	80017e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	b2da      	uxtb	r2, r3
 80017d4:	490c      	ldr	r1, [pc, #48]	; (8001808 <__NVIC_SetPriority+0x4c>)
 80017d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017da:	0112      	lsls	r2, r2, #4
 80017dc:	b2d2      	uxtb	r2, r2
 80017de:	440b      	add	r3, r1
 80017e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017e4:	e00a      	b.n	80017fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	b2da      	uxtb	r2, r3
 80017ea:	4908      	ldr	r1, [pc, #32]	; (800180c <__NVIC_SetPriority+0x50>)
 80017ec:	79fb      	ldrb	r3, [r7, #7]
 80017ee:	f003 030f 	and.w	r3, r3, #15
 80017f2:	3b04      	subs	r3, #4
 80017f4:	0112      	lsls	r2, r2, #4
 80017f6:	b2d2      	uxtb	r2, r2
 80017f8:	440b      	add	r3, r1
 80017fa:	761a      	strb	r2, [r3, #24]
}
 80017fc:	bf00      	nop
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	e000e100 	.word	0xe000e100
 800180c:	e000ed00 	.word	0xe000ed00

08001810 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001810:	b480      	push	{r7}
 8001812:	b089      	sub	sp, #36	; 0x24
 8001814:	af00      	add	r7, sp, #0
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f003 0307 	and.w	r3, r3, #7
 8001822:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	f1c3 0307 	rsb	r3, r3, #7
 800182a:	2b04      	cmp	r3, #4
 800182c:	bf28      	it	cs
 800182e:	2304      	movcs	r3, #4
 8001830:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	3304      	adds	r3, #4
 8001836:	2b06      	cmp	r3, #6
 8001838:	d902      	bls.n	8001840 <NVIC_EncodePriority+0x30>
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	3b03      	subs	r3, #3
 800183e:	e000      	b.n	8001842 <NVIC_EncodePriority+0x32>
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001844:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	43da      	mvns	r2, r3
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	401a      	ands	r2, r3
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001858:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	fa01 f303 	lsl.w	r3, r1, r3
 8001862:	43d9      	mvns	r1, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001868:	4313      	orrs	r3, r2
         );
}
 800186a:	4618      	mov	r0, r3
 800186c:	3724      	adds	r7, #36	; 0x24
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
	...

08001878 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	3b01      	subs	r3, #1
 8001884:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001888:	d301      	bcc.n	800188e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800188a:	2301      	movs	r3, #1
 800188c:	e00f      	b.n	80018ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800188e:	4a0a      	ldr	r2, [pc, #40]	; (80018b8 <SysTick_Config+0x40>)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	3b01      	subs	r3, #1
 8001894:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001896:	210f      	movs	r1, #15
 8001898:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800189c:	f7ff ff8e 	bl	80017bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018a0:	4b05      	ldr	r3, [pc, #20]	; (80018b8 <SysTick_Config+0x40>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018a6:	4b04      	ldr	r3, [pc, #16]	; (80018b8 <SysTick_Config+0x40>)
 80018a8:	2207      	movs	r2, #7
 80018aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	e000e010 	.word	0xe000e010

080018bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f7ff ff47 	bl	8001758 <__NVIC_SetPriorityGrouping>
}
 80018ca:	bf00      	nop
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b086      	sub	sp, #24
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	4603      	mov	r3, r0
 80018da:	60b9      	str	r1, [r7, #8]
 80018dc:	607a      	str	r2, [r7, #4]
 80018de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80018e0:	2300      	movs	r3, #0
 80018e2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018e4:	f7ff ff5c 	bl	80017a0 <__NVIC_GetPriorityGrouping>
 80018e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	68b9      	ldr	r1, [r7, #8]
 80018ee:	6978      	ldr	r0, [r7, #20]
 80018f0:	f7ff ff8e 	bl	8001810 <NVIC_EncodePriority>
 80018f4:	4602      	mov	r2, r0
 80018f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018fa:	4611      	mov	r1, r2
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff ff5d 	bl	80017bc <__NVIC_SetPriority>
}
 8001902:	bf00      	nop
 8001904:	3718      	adds	r7, #24
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	b082      	sub	sp, #8
 800190e:	af00      	add	r7, sp, #0
 8001910:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f7ff ffb0 	bl	8001878 <SysTick_Config>
 8001918:	4603      	mov	r3, r0
}
 800191a:	4618      	mov	r0, r3
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
	...

08001924 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001924:	b480      	push	{r7}
 8001926:	b087      	sub	sp, #28
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800192e:	2300      	movs	r3, #0
 8001930:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001932:	e17f      	b.n	8001c34 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	2101      	movs	r1, #1
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	fa01 f303 	lsl.w	r3, r1, r3
 8001940:	4013      	ands	r3, r2
 8001942:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	2b00      	cmp	r3, #0
 8001948:	f000 8171 	beq.w	8001c2e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f003 0303 	and.w	r3, r3, #3
 8001954:	2b01      	cmp	r3, #1
 8001956:	d005      	beq.n	8001964 <HAL_GPIO_Init+0x40>
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f003 0303 	and.w	r3, r3, #3
 8001960:	2b02      	cmp	r3, #2
 8001962:	d130      	bne.n	80019c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	2203      	movs	r2, #3
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	43db      	mvns	r3, r3
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	4013      	ands	r3, r2
 800197a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	68da      	ldr	r2, [r3, #12]
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	4313      	orrs	r3, r2
 800198c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	693a      	ldr	r2, [r7, #16]
 8001992:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800199a:	2201      	movs	r2, #1
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	fa02 f303 	lsl.w	r3, r2, r3
 80019a2:	43db      	mvns	r3, r3
 80019a4:	693a      	ldr	r2, [r7, #16]
 80019a6:	4013      	ands	r3, r2
 80019a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	091b      	lsrs	r3, r3, #4
 80019b0:	f003 0201 	and.w	r2, r3, #1
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	4313      	orrs	r3, r2
 80019be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f003 0303 	and.w	r3, r3, #3
 80019ce:	2b03      	cmp	r3, #3
 80019d0:	d118      	bne.n	8001a04 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80019d8:	2201      	movs	r2, #1
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	43db      	mvns	r3, r3
 80019e2:	693a      	ldr	r2, [r7, #16]
 80019e4:	4013      	ands	r3, r2
 80019e6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	08db      	lsrs	r3, r3, #3
 80019ee:	f003 0201 	and.w	r2, r3, #1
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f003 0303 	and.w	r3, r3, #3
 8001a0c:	2b03      	cmp	r3, #3
 8001a0e:	d017      	beq.n	8001a40 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	2203      	movs	r2, #3
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	43db      	mvns	r3, r3
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	4013      	ands	r3, r2
 8001a26:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	689a      	ldr	r2, [r3, #8]
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	693a      	ldr	r2, [r7, #16]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f003 0303 	and.w	r3, r3, #3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d123      	bne.n	8001a94 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	08da      	lsrs	r2, r3, #3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	3208      	adds	r2, #8
 8001a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a58:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	f003 0307 	and.w	r3, r3, #7
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	220f      	movs	r2, #15
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	691a      	ldr	r2, [r3, #16]
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	f003 0307 	and.w	r3, r3, #7
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	08da      	lsrs	r2, r3, #3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	3208      	adds	r2, #8
 8001a8e:	6939      	ldr	r1, [r7, #16]
 8001a90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	2203      	movs	r2, #3
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f003 0203 	and.w	r2, r3, #3
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	693a      	ldr	r2, [r7, #16]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	693a      	ldr	r2, [r7, #16]
 8001ac6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	f000 80ac 	beq.w	8001c2e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ad6:	4b5f      	ldr	r3, [pc, #380]	; (8001c54 <HAL_GPIO_Init+0x330>)
 8001ad8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ada:	4a5e      	ldr	r2, [pc, #376]	; (8001c54 <HAL_GPIO_Init+0x330>)
 8001adc:	f043 0301 	orr.w	r3, r3, #1
 8001ae0:	6613      	str	r3, [r2, #96]	; 0x60
 8001ae2:	4b5c      	ldr	r3, [pc, #368]	; (8001c54 <HAL_GPIO_Init+0x330>)
 8001ae4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	60bb      	str	r3, [r7, #8]
 8001aec:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001aee:	4a5a      	ldr	r2, [pc, #360]	; (8001c58 <HAL_GPIO_Init+0x334>)
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	089b      	lsrs	r3, r3, #2
 8001af4:	3302      	adds	r3, #2
 8001af6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001afa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	f003 0303 	and.w	r3, r3, #3
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	220f      	movs	r2, #15
 8001b06:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0a:	43db      	mvns	r3, r3
 8001b0c:	693a      	ldr	r2, [r7, #16]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b18:	d025      	beq.n	8001b66 <HAL_GPIO_Init+0x242>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a4f      	ldr	r2, [pc, #316]	; (8001c5c <HAL_GPIO_Init+0x338>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d01f      	beq.n	8001b62 <HAL_GPIO_Init+0x23e>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a4e      	ldr	r2, [pc, #312]	; (8001c60 <HAL_GPIO_Init+0x33c>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d019      	beq.n	8001b5e <HAL_GPIO_Init+0x23a>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a4d      	ldr	r2, [pc, #308]	; (8001c64 <HAL_GPIO_Init+0x340>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d013      	beq.n	8001b5a <HAL_GPIO_Init+0x236>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a4c      	ldr	r2, [pc, #304]	; (8001c68 <HAL_GPIO_Init+0x344>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d00d      	beq.n	8001b56 <HAL_GPIO_Init+0x232>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a4b      	ldr	r2, [pc, #300]	; (8001c6c <HAL_GPIO_Init+0x348>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d007      	beq.n	8001b52 <HAL_GPIO_Init+0x22e>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a4a      	ldr	r2, [pc, #296]	; (8001c70 <HAL_GPIO_Init+0x34c>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d101      	bne.n	8001b4e <HAL_GPIO_Init+0x22a>
 8001b4a:	2306      	movs	r3, #6
 8001b4c:	e00c      	b.n	8001b68 <HAL_GPIO_Init+0x244>
 8001b4e:	2307      	movs	r3, #7
 8001b50:	e00a      	b.n	8001b68 <HAL_GPIO_Init+0x244>
 8001b52:	2305      	movs	r3, #5
 8001b54:	e008      	b.n	8001b68 <HAL_GPIO_Init+0x244>
 8001b56:	2304      	movs	r3, #4
 8001b58:	e006      	b.n	8001b68 <HAL_GPIO_Init+0x244>
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e004      	b.n	8001b68 <HAL_GPIO_Init+0x244>
 8001b5e:	2302      	movs	r3, #2
 8001b60:	e002      	b.n	8001b68 <HAL_GPIO_Init+0x244>
 8001b62:	2301      	movs	r3, #1
 8001b64:	e000      	b.n	8001b68 <HAL_GPIO_Init+0x244>
 8001b66:	2300      	movs	r3, #0
 8001b68:	697a      	ldr	r2, [r7, #20]
 8001b6a:	f002 0203 	and.w	r2, r2, #3
 8001b6e:	0092      	lsls	r2, r2, #2
 8001b70:	4093      	lsls	r3, r2
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b78:	4937      	ldr	r1, [pc, #220]	; (8001c58 <HAL_GPIO_Init+0x334>)
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	089b      	lsrs	r3, r3, #2
 8001b7e:	3302      	adds	r3, #2
 8001b80:	693a      	ldr	r2, [r7, #16]
 8001b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b86:	4b3b      	ldr	r3, [pc, #236]	; (8001c74 <HAL_GPIO_Init+0x350>)
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	43db      	mvns	r3, r3
 8001b90:	693a      	ldr	r2, [r7, #16]
 8001b92:	4013      	ands	r3, r2
 8001b94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d003      	beq.n	8001baa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001baa:	4a32      	ldr	r2, [pc, #200]	; (8001c74 <HAL_GPIO_Init+0x350>)
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001bb0:	4b30      	ldr	r3, [pc, #192]	; (8001c74 <HAL_GPIO_Init+0x350>)
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	693a      	ldr	r2, [r7, #16]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d003      	beq.n	8001bd4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001bcc:	693a      	ldr	r2, [r7, #16]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001bd4:	4a27      	ldr	r2, [pc, #156]	; (8001c74 <HAL_GPIO_Init+0x350>)
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001bda:	4b26      	ldr	r3, [pc, #152]	; (8001c74 <HAL_GPIO_Init+0x350>)
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	43db      	mvns	r3, r3
 8001be4:	693a      	ldr	r2, [r7, #16]
 8001be6:	4013      	ands	r3, r2
 8001be8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d003      	beq.n	8001bfe <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001bf6:	693a      	ldr	r2, [r7, #16]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001bfe:	4a1d      	ldr	r2, [pc, #116]	; (8001c74 <HAL_GPIO_Init+0x350>)
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001c04:	4b1b      	ldr	r3, [pc, #108]	; (8001c74 <HAL_GPIO_Init+0x350>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	4013      	ands	r3, r2
 8001c12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d003      	beq.n	8001c28 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c28:	4a12      	ldr	r2, [pc, #72]	; (8001c74 <HAL_GPIO_Init+0x350>)
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	3301      	adds	r3, #1
 8001c32:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	f47f ae78 	bne.w	8001934 <HAL_GPIO_Init+0x10>
  }
}
 8001c44:	bf00      	nop
 8001c46:	bf00      	nop
 8001c48:	371c      	adds	r7, #28
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	40021000 	.word	0x40021000
 8001c58:	40010000 	.word	0x40010000
 8001c5c:	48000400 	.word	0x48000400
 8001c60:	48000800 	.word	0x48000800
 8001c64:	48000c00 	.word	0x48000c00
 8001c68:	48001000 	.word	0x48001000
 8001c6c:	48001400 	.word	0x48001400
 8001c70:	48001800 	.word	0x48001800
 8001c74:	40010400 	.word	0x40010400

08001c78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	460b      	mov	r3, r1
 8001c82:	807b      	strh	r3, [r7, #2]
 8001c84:	4613      	mov	r3, r2
 8001c86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c88:	787b      	ldrb	r3, [r7, #1]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d003      	beq.n	8001c96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c8e:	887a      	ldrh	r2, [r7, #2]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c94:	e002      	b.n	8001c9c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c96:	887a      	ldrh	r2, [r7, #2]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001cac:	4b04      	ldr	r3, [pc, #16]	; (8001cc0 <HAL_PWREx_GetVoltageRange+0x18>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	40007000 	.word	0x40007000

08001cc4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cd2:	d130      	bne.n	8001d36 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cd4:	4b23      	ldr	r3, [pc, #140]	; (8001d64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001cdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ce0:	d038      	beq.n	8001d54 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ce2:	4b20      	ldr	r3, [pc, #128]	; (8001d64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001cea:	4a1e      	ldr	r2, [pc, #120]	; (8001d64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cf0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001cf2:	4b1d      	ldr	r3, [pc, #116]	; (8001d68 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2232      	movs	r2, #50	; 0x32
 8001cf8:	fb02 f303 	mul.w	r3, r2, r3
 8001cfc:	4a1b      	ldr	r2, [pc, #108]	; (8001d6c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8001d02:	0c9b      	lsrs	r3, r3, #18
 8001d04:	3301      	adds	r3, #1
 8001d06:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d08:	e002      	b.n	8001d10 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	3b01      	subs	r3, #1
 8001d0e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d10:	4b14      	ldr	r3, [pc, #80]	; (8001d64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d12:	695b      	ldr	r3, [r3, #20]
 8001d14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d1c:	d102      	bne.n	8001d24 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d1f2      	bne.n	8001d0a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d24:	4b0f      	ldr	r3, [pc, #60]	; (8001d64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d26:	695b      	ldr	r3, [r3, #20]
 8001d28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d30:	d110      	bne.n	8001d54 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e00f      	b.n	8001d56 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d36:	4b0b      	ldr	r3, [pc, #44]	; (8001d64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d42:	d007      	beq.n	8001d54 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d44:	4b07      	ldr	r3, [pc, #28]	; (8001d64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d4c:	4a05      	ldr	r2, [pc, #20]	; (8001d64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d52:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3714      	adds	r7, #20
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	40007000 	.word	0x40007000
 8001d68:	20000000 	.word	0x20000000
 8001d6c:	431bde83 	.word	0x431bde83

08001d70 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b088      	sub	sp, #32
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d101      	bne.n	8001d82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e3ca      	b.n	8002518 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d82:	4b97      	ldr	r3, [pc, #604]	; (8001fe0 <HAL_RCC_OscConfig+0x270>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f003 030c 	and.w	r3, r3, #12
 8001d8a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d8c:	4b94      	ldr	r3, [pc, #592]	; (8001fe0 <HAL_RCC_OscConfig+0x270>)
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	f003 0303 	and.w	r3, r3, #3
 8001d94:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0310 	and.w	r3, r3, #16
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	f000 80e4 	beq.w	8001f6c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d007      	beq.n	8001dba <HAL_RCC_OscConfig+0x4a>
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	2b0c      	cmp	r3, #12
 8001dae:	f040 808b 	bne.w	8001ec8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	f040 8087 	bne.w	8001ec8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001dba:	4b89      	ldr	r3, [pc, #548]	; (8001fe0 <HAL_RCC_OscConfig+0x270>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d005      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x62>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	699b      	ldr	r3, [r3, #24]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d101      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e3a2      	b.n	8002518 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a1a      	ldr	r2, [r3, #32]
 8001dd6:	4b82      	ldr	r3, [pc, #520]	; (8001fe0 <HAL_RCC_OscConfig+0x270>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0308 	and.w	r3, r3, #8
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d004      	beq.n	8001dec <HAL_RCC_OscConfig+0x7c>
 8001de2:	4b7f      	ldr	r3, [pc, #508]	; (8001fe0 <HAL_RCC_OscConfig+0x270>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dea:	e005      	b.n	8001df8 <HAL_RCC_OscConfig+0x88>
 8001dec:	4b7c      	ldr	r3, [pc, #496]	; (8001fe0 <HAL_RCC_OscConfig+0x270>)
 8001dee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001df2:	091b      	lsrs	r3, r3, #4
 8001df4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d223      	bcs.n	8001e44 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6a1b      	ldr	r3, [r3, #32]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f000 fd55 	bl	80028b0 <RCC_SetFlashLatencyFromMSIRange>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e383      	b.n	8002518 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e10:	4b73      	ldr	r3, [pc, #460]	; (8001fe0 <HAL_RCC_OscConfig+0x270>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a72      	ldr	r2, [pc, #456]	; (8001fe0 <HAL_RCC_OscConfig+0x270>)
 8001e16:	f043 0308 	orr.w	r3, r3, #8
 8001e1a:	6013      	str	r3, [r2, #0]
 8001e1c:	4b70      	ldr	r3, [pc, #448]	; (8001fe0 <HAL_RCC_OscConfig+0x270>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a1b      	ldr	r3, [r3, #32]
 8001e28:	496d      	ldr	r1, [pc, #436]	; (8001fe0 <HAL_RCC_OscConfig+0x270>)
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e2e:	4b6c      	ldr	r3, [pc, #432]	; (8001fe0 <HAL_RCC_OscConfig+0x270>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	021b      	lsls	r3, r3, #8
 8001e3c:	4968      	ldr	r1, [pc, #416]	; (8001fe0 <HAL_RCC_OscConfig+0x270>)
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	604b      	str	r3, [r1, #4]
 8001e42:	e025      	b.n	8001e90 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e44:	4b66      	ldr	r3, [pc, #408]	; (8001fe0 <HAL_RCC_OscConfig+0x270>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a65      	ldr	r2, [pc, #404]	; (8001fe0 <HAL_RCC_OscConfig+0x270>)
 8001e4a:	f043 0308 	orr.w	r3, r3, #8
 8001e4e:	6013      	str	r3, [r2, #0]
 8001e50:	4b63      	ldr	r3, [pc, #396]	; (8001fe0 <HAL_RCC_OscConfig+0x270>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a1b      	ldr	r3, [r3, #32]
 8001e5c:	4960      	ldr	r1, [pc, #384]	; (8001fe0 <HAL_RCC_OscConfig+0x270>)
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e62:	4b5f      	ldr	r3, [pc, #380]	; (8001fe0 <HAL_RCC_OscConfig+0x270>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	69db      	ldr	r3, [r3, #28]
 8001e6e:	021b      	lsls	r3, r3, #8
 8001e70:	495b      	ldr	r1, [pc, #364]	; (8001fe0 <HAL_RCC_OscConfig+0x270>)
 8001e72:	4313      	orrs	r3, r2
 8001e74:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d109      	bne.n	8001e90 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a1b      	ldr	r3, [r3, #32]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f000 fd15 	bl	80028b0 <RCC_SetFlashLatencyFromMSIRange>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e343      	b.n	8002518 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e90:	f000 fc4a 	bl	8002728 <HAL_RCC_GetSysClockFreq>
 8001e94:	4602      	mov	r2, r0
 8001e96:	4b52      	ldr	r3, [pc, #328]	; (8001fe0 <HAL_RCC_OscConfig+0x270>)
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	091b      	lsrs	r3, r3, #4
 8001e9c:	f003 030f 	and.w	r3, r3, #15
 8001ea0:	4950      	ldr	r1, [pc, #320]	; (8001fe4 <HAL_RCC_OscConfig+0x274>)
 8001ea2:	5ccb      	ldrb	r3, [r1, r3]
 8001ea4:	f003 031f 	and.w	r3, r3, #31
 8001ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8001eac:	4a4e      	ldr	r2, [pc, #312]	; (8001fe8 <HAL_RCC_OscConfig+0x278>)
 8001eae:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001eb0:	4b4e      	ldr	r3, [pc, #312]	; (8001fec <HAL_RCC_OscConfig+0x27c>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7ff fbcf 	bl	8001658 <HAL_InitTick>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001ebe:	7bfb      	ldrb	r3, [r7, #15]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d052      	beq.n	8001f6a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001ec4:	7bfb      	ldrb	r3, [r7, #15]
 8001ec6:	e327      	b.n	8002518 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d032      	beq.n	8001f36 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001ed0:	4b43      	ldr	r3, [pc, #268]	; (8001fe0 <HAL_RCC_OscConfig+0x270>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a42      	ldr	r2, [pc, #264]	; (8001fe0 <HAL_RCC_OscConfig+0x270>)
 8001ed6:	f043 0301 	orr.w	r3, r3, #1
 8001eda:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001edc:	f7ff fc0c 	bl	80016f8 <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ee4:	f7ff fc08 	bl	80016f8 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e310      	b.n	8002518 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ef6:	4b3a      	ldr	r3, [pc, #232]	; (8001fe0 <HAL_RCC_OscConfig+0x270>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d0f0      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f02:	4b37      	ldr	r3, [pc, #220]	; (8001fe0 <HAL_RCC_OscConfig+0x270>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a36      	ldr	r2, [pc, #216]	; (8001fe0 <HAL_RCC_OscConfig+0x270>)
 8001f08:	f043 0308 	orr.w	r3, r3, #8
 8001f0c:	6013      	str	r3, [r2, #0]
 8001f0e:	4b34      	ldr	r3, [pc, #208]	; (8001fe0 <HAL_RCC_OscConfig+0x270>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a1b      	ldr	r3, [r3, #32]
 8001f1a:	4931      	ldr	r1, [pc, #196]	; (8001fe0 <HAL_RCC_OscConfig+0x270>)
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f20:	4b2f      	ldr	r3, [pc, #188]	; (8001fe0 <HAL_RCC_OscConfig+0x270>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	69db      	ldr	r3, [r3, #28]
 8001f2c:	021b      	lsls	r3, r3, #8
 8001f2e:	492c      	ldr	r1, [pc, #176]	; (8001fe0 <HAL_RCC_OscConfig+0x270>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	604b      	str	r3, [r1, #4]
 8001f34:	e01a      	b.n	8001f6c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001f36:	4b2a      	ldr	r3, [pc, #168]	; (8001fe0 <HAL_RCC_OscConfig+0x270>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a29      	ldr	r2, [pc, #164]	; (8001fe0 <HAL_RCC_OscConfig+0x270>)
 8001f3c:	f023 0301 	bic.w	r3, r3, #1
 8001f40:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f42:	f7ff fbd9 	bl	80016f8 <HAL_GetTick>
 8001f46:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f48:	e008      	b.n	8001f5c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f4a:	f7ff fbd5 	bl	80016f8 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d901      	bls.n	8001f5c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e2dd      	b.n	8002518 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f5c:	4b20      	ldr	r3, [pc, #128]	; (8001fe0 <HAL_RCC_OscConfig+0x270>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d1f0      	bne.n	8001f4a <HAL_RCC_OscConfig+0x1da>
 8001f68:	e000      	b.n	8001f6c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f6a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0301 	and.w	r3, r3, #1
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d074      	beq.n	8002062 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	2b08      	cmp	r3, #8
 8001f7c:	d005      	beq.n	8001f8a <HAL_RCC_OscConfig+0x21a>
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	2b0c      	cmp	r3, #12
 8001f82:	d10e      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	2b03      	cmp	r3, #3
 8001f88:	d10b      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f8a:	4b15      	ldr	r3, [pc, #84]	; (8001fe0 <HAL_RCC_OscConfig+0x270>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d064      	beq.n	8002060 <HAL_RCC_OscConfig+0x2f0>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d160      	bne.n	8002060 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e2ba      	b.n	8002518 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001faa:	d106      	bne.n	8001fba <HAL_RCC_OscConfig+0x24a>
 8001fac:	4b0c      	ldr	r3, [pc, #48]	; (8001fe0 <HAL_RCC_OscConfig+0x270>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a0b      	ldr	r2, [pc, #44]	; (8001fe0 <HAL_RCC_OscConfig+0x270>)
 8001fb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fb6:	6013      	str	r3, [r2, #0]
 8001fb8:	e026      	b.n	8002008 <HAL_RCC_OscConfig+0x298>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fc2:	d115      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x280>
 8001fc4:	4b06      	ldr	r3, [pc, #24]	; (8001fe0 <HAL_RCC_OscConfig+0x270>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a05      	ldr	r2, [pc, #20]	; (8001fe0 <HAL_RCC_OscConfig+0x270>)
 8001fca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fce:	6013      	str	r3, [r2, #0]
 8001fd0:	4b03      	ldr	r3, [pc, #12]	; (8001fe0 <HAL_RCC_OscConfig+0x270>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a02      	ldr	r2, [pc, #8]	; (8001fe0 <HAL_RCC_OscConfig+0x270>)
 8001fd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fda:	6013      	str	r3, [r2, #0]
 8001fdc:	e014      	b.n	8002008 <HAL_RCC_OscConfig+0x298>
 8001fde:	bf00      	nop
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	080055fc 	.word	0x080055fc
 8001fe8:	20000000 	.word	0x20000000
 8001fec:	20000004 	.word	0x20000004
 8001ff0:	4ba0      	ldr	r3, [pc, #640]	; (8002274 <HAL_RCC_OscConfig+0x504>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a9f      	ldr	r2, [pc, #636]	; (8002274 <HAL_RCC_OscConfig+0x504>)
 8001ff6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ffa:	6013      	str	r3, [r2, #0]
 8001ffc:	4b9d      	ldr	r3, [pc, #628]	; (8002274 <HAL_RCC_OscConfig+0x504>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a9c      	ldr	r2, [pc, #624]	; (8002274 <HAL_RCC_OscConfig+0x504>)
 8002002:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002006:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d013      	beq.n	8002038 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002010:	f7ff fb72 	bl	80016f8 <HAL_GetTick>
 8002014:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002016:	e008      	b.n	800202a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002018:	f7ff fb6e 	bl	80016f8 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	2b64      	cmp	r3, #100	; 0x64
 8002024:	d901      	bls.n	800202a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e276      	b.n	8002518 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800202a:	4b92      	ldr	r3, [pc, #584]	; (8002274 <HAL_RCC_OscConfig+0x504>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d0f0      	beq.n	8002018 <HAL_RCC_OscConfig+0x2a8>
 8002036:	e014      	b.n	8002062 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002038:	f7ff fb5e 	bl	80016f8 <HAL_GetTick>
 800203c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800203e:	e008      	b.n	8002052 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002040:	f7ff fb5a 	bl	80016f8 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b64      	cmp	r3, #100	; 0x64
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e262      	b.n	8002518 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002052:	4b88      	ldr	r3, [pc, #544]	; (8002274 <HAL_RCC_OscConfig+0x504>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d1f0      	bne.n	8002040 <HAL_RCC_OscConfig+0x2d0>
 800205e:	e000      	b.n	8002062 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002060:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	2b00      	cmp	r3, #0
 800206c:	d060      	beq.n	8002130 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	2b04      	cmp	r3, #4
 8002072:	d005      	beq.n	8002080 <HAL_RCC_OscConfig+0x310>
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	2b0c      	cmp	r3, #12
 8002078:	d119      	bne.n	80020ae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	2b02      	cmp	r3, #2
 800207e:	d116      	bne.n	80020ae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002080:	4b7c      	ldr	r3, [pc, #496]	; (8002274 <HAL_RCC_OscConfig+0x504>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002088:	2b00      	cmp	r3, #0
 800208a:	d005      	beq.n	8002098 <HAL_RCC_OscConfig+0x328>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d101      	bne.n	8002098 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e23f      	b.n	8002518 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002098:	4b76      	ldr	r3, [pc, #472]	; (8002274 <HAL_RCC_OscConfig+0x504>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	691b      	ldr	r3, [r3, #16]
 80020a4:	061b      	lsls	r3, r3, #24
 80020a6:	4973      	ldr	r1, [pc, #460]	; (8002274 <HAL_RCC_OscConfig+0x504>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020ac:	e040      	b.n	8002130 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d023      	beq.n	80020fe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020b6:	4b6f      	ldr	r3, [pc, #444]	; (8002274 <HAL_RCC_OscConfig+0x504>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a6e      	ldr	r2, [pc, #440]	; (8002274 <HAL_RCC_OscConfig+0x504>)
 80020bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c2:	f7ff fb19 	bl	80016f8 <HAL_GetTick>
 80020c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020c8:	e008      	b.n	80020dc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020ca:	f7ff fb15 	bl	80016f8 <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d901      	bls.n	80020dc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e21d      	b.n	8002518 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020dc:	4b65      	ldr	r3, [pc, #404]	; (8002274 <HAL_RCC_OscConfig+0x504>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d0f0      	beq.n	80020ca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020e8:	4b62      	ldr	r3, [pc, #392]	; (8002274 <HAL_RCC_OscConfig+0x504>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	691b      	ldr	r3, [r3, #16]
 80020f4:	061b      	lsls	r3, r3, #24
 80020f6:	495f      	ldr	r1, [pc, #380]	; (8002274 <HAL_RCC_OscConfig+0x504>)
 80020f8:	4313      	orrs	r3, r2
 80020fa:	604b      	str	r3, [r1, #4]
 80020fc:	e018      	b.n	8002130 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020fe:	4b5d      	ldr	r3, [pc, #372]	; (8002274 <HAL_RCC_OscConfig+0x504>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a5c      	ldr	r2, [pc, #368]	; (8002274 <HAL_RCC_OscConfig+0x504>)
 8002104:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002108:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800210a:	f7ff faf5 	bl	80016f8 <HAL_GetTick>
 800210e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002110:	e008      	b.n	8002124 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002112:	f7ff faf1 	bl	80016f8 <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	2b02      	cmp	r3, #2
 800211e:	d901      	bls.n	8002124 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e1f9      	b.n	8002518 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002124:	4b53      	ldr	r3, [pc, #332]	; (8002274 <HAL_RCC_OscConfig+0x504>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800212c:	2b00      	cmp	r3, #0
 800212e:	d1f0      	bne.n	8002112 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0308 	and.w	r3, r3, #8
 8002138:	2b00      	cmp	r3, #0
 800213a:	d03c      	beq.n	80021b6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	695b      	ldr	r3, [r3, #20]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d01c      	beq.n	800217e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002144:	4b4b      	ldr	r3, [pc, #300]	; (8002274 <HAL_RCC_OscConfig+0x504>)
 8002146:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800214a:	4a4a      	ldr	r2, [pc, #296]	; (8002274 <HAL_RCC_OscConfig+0x504>)
 800214c:	f043 0301 	orr.w	r3, r3, #1
 8002150:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002154:	f7ff fad0 	bl	80016f8 <HAL_GetTick>
 8002158:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800215a:	e008      	b.n	800216e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800215c:	f7ff facc 	bl	80016f8 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b02      	cmp	r3, #2
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e1d4      	b.n	8002518 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800216e:	4b41      	ldr	r3, [pc, #260]	; (8002274 <HAL_RCC_OscConfig+0x504>)
 8002170:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002174:	f003 0302 	and.w	r3, r3, #2
 8002178:	2b00      	cmp	r3, #0
 800217a:	d0ef      	beq.n	800215c <HAL_RCC_OscConfig+0x3ec>
 800217c:	e01b      	b.n	80021b6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800217e:	4b3d      	ldr	r3, [pc, #244]	; (8002274 <HAL_RCC_OscConfig+0x504>)
 8002180:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002184:	4a3b      	ldr	r2, [pc, #236]	; (8002274 <HAL_RCC_OscConfig+0x504>)
 8002186:	f023 0301 	bic.w	r3, r3, #1
 800218a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800218e:	f7ff fab3 	bl	80016f8 <HAL_GetTick>
 8002192:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002194:	e008      	b.n	80021a8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002196:	f7ff faaf 	bl	80016f8 <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d901      	bls.n	80021a8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e1b7      	b.n	8002518 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021a8:	4b32      	ldr	r3, [pc, #200]	; (8002274 <HAL_RCC_OscConfig+0x504>)
 80021aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d1ef      	bne.n	8002196 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0304 	and.w	r3, r3, #4
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f000 80a6 	beq.w	8002310 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021c4:	2300      	movs	r3, #0
 80021c6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80021c8:	4b2a      	ldr	r3, [pc, #168]	; (8002274 <HAL_RCC_OscConfig+0x504>)
 80021ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d10d      	bne.n	80021f0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021d4:	4b27      	ldr	r3, [pc, #156]	; (8002274 <HAL_RCC_OscConfig+0x504>)
 80021d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d8:	4a26      	ldr	r2, [pc, #152]	; (8002274 <HAL_RCC_OscConfig+0x504>)
 80021da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021de:	6593      	str	r3, [r2, #88]	; 0x58
 80021e0:	4b24      	ldr	r3, [pc, #144]	; (8002274 <HAL_RCC_OscConfig+0x504>)
 80021e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e8:	60bb      	str	r3, [r7, #8]
 80021ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021ec:	2301      	movs	r3, #1
 80021ee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021f0:	4b21      	ldr	r3, [pc, #132]	; (8002278 <HAL_RCC_OscConfig+0x508>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d118      	bne.n	800222e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021fc:	4b1e      	ldr	r3, [pc, #120]	; (8002278 <HAL_RCC_OscConfig+0x508>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a1d      	ldr	r2, [pc, #116]	; (8002278 <HAL_RCC_OscConfig+0x508>)
 8002202:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002206:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002208:	f7ff fa76 	bl	80016f8 <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002210:	f7ff fa72 	bl	80016f8 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b02      	cmp	r3, #2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e17a      	b.n	8002518 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002222:	4b15      	ldr	r3, [pc, #84]	; (8002278 <HAL_RCC_OscConfig+0x508>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800222a:	2b00      	cmp	r3, #0
 800222c:	d0f0      	beq.n	8002210 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d108      	bne.n	8002248 <HAL_RCC_OscConfig+0x4d8>
 8002236:	4b0f      	ldr	r3, [pc, #60]	; (8002274 <HAL_RCC_OscConfig+0x504>)
 8002238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800223c:	4a0d      	ldr	r2, [pc, #52]	; (8002274 <HAL_RCC_OscConfig+0x504>)
 800223e:	f043 0301 	orr.w	r3, r3, #1
 8002242:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002246:	e029      	b.n	800229c <HAL_RCC_OscConfig+0x52c>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	2b05      	cmp	r3, #5
 800224e:	d115      	bne.n	800227c <HAL_RCC_OscConfig+0x50c>
 8002250:	4b08      	ldr	r3, [pc, #32]	; (8002274 <HAL_RCC_OscConfig+0x504>)
 8002252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002256:	4a07      	ldr	r2, [pc, #28]	; (8002274 <HAL_RCC_OscConfig+0x504>)
 8002258:	f043 0304 	orr.w	r3, r3, #4
 800225c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002260:	4b04      	ldr	r3, [pc, #16]	; (8002274 <HAL_RCC_OscConfig+0x504>)
 8002262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002266:	4a03      	ldr	r2, [pc, #12]	; (8002274 <HAL_RCC_OscConfig+0x504>)
 8002268:	f043 0301 	orr.w	r3, r3, #1
 800226c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002270:	e014      	b.n	800229c <HAL_RCC_OscConfig+0x52c>
 8002272:	bf00      	nop
 8002274:	40021000 	.word	0x40021000
 8002278:	40007000 	.word	0x40007000
 800227c:	4b9c      	ldr	r3, [pc, #624]	; (80024f0 <HAL_RCC_OscConfig+0x780>)
 800227e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002282:	4a9b      	ldr	r2, [pc, #620]	; (80024f0 <HAL_RCC_OscConfig+0x780>)
 8002284:	f023 0301 	bic.w	r3, r3, #1
 8002288:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800228c:	4b98      	ldr	r3, [pc, #608]	; (80024f0 <HAL_RCC_OscConfig+0x780>)
 800228e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002292:	4a97      	ldr	r2, [pc, #604]	; (80024f0 <HAL_RCC_OscConfig+0x780>)
 8002294:	f023 0304 	bic.w	r3, r3, #4
 8002298:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d016      	beq.n	80022d2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022a4:	f7ff fa28 	bl	80016f8 <HAL_GetTick>
 80022a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022aa:	e00a      	b.n	80022c2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ac:	f7ff fa24 	bl	80016f8 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e12a      	b.n	8002518 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022c2:	4b8b      	ldr	r3, [pc, #556]	; (80024f0 <HAL_RCC_OscConfig+0x780>)
 80022c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022c8:	f003 0302 	and.w	r3, r3, #2
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d0ed      	beq.n	80022ac <HAL_RCC_OscConfig+0x53c>
 80022d0:	e015      	b.n	80022fe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022d2:	f7ff fa11 	bl	80016f8 <HAL_GetTick>
 80022d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022d8:	e00a      	b.n	80022f0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022da:	f7ff fa0d 	bl	80016f8 <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d901      	bls.n	80022f0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e113      	b.n	8002518 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022f0:	4b7f      	ldr	r3, [pc, #508]	; (80024f0 <HAL_RCC_OscConfig+0x780>)
 80022f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1ed      	bne.n	80022da <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022fe:	7ffb      	ldrb	r3, [r7, #31]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d105      	bne.n	8002310 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002304:	4b7a      	ldr	r3, [pc, #488]	; (80024f0 <HAL_RCC_OscConfig+0x780>)
 8002306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002308:	4a79      	ldr	r2, [pc, #484]	; (80024f0 <HAL_RCC_OscConfig+0x780>)
 800230a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800230e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002314:	2b00      	cmp	r3, #0
 8002316:	f000 80fe 	beq.w	8002516 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800231e:	2b02      	cmp	r3, #2
 8002320:	f040 80d0 	bne.w	80024c4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002324:	4b72      	ldr	r3, [pc, #456]	; (80024f0 <HAL_RCC_OscConfig+0x780>)
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	f003 0203 	and.w	r2, r3, #3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002334:	429a      	cmp	r2, r3
 8002336:	d130      	bne.n	800239a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002342:	3b01      	subs	r3, #1
 8002344:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002346:	429a      	cmp	r2, r3
 8002348:	d127      	bne.n	800239a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002354:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002356:	429a      	cmp	r2, r3
 8002358:	d11f      	bne.n	800239a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002364:	2a07      	cmp	r2, #7
 8002366:	bf14      	ite	ne
 8002368:	2201      	movne	r2, #1
 800236a:	2200      	moveq	r2, #0
 800236c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800236e:	4293      	cmp	r3, r2
 8002370:	d113      	bne.n	800239a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800237c:	085b      	lsrs	r3, r3, #1
 800237e:	3b01      	subs	r3, #1
 8002380:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002382:	429a      	cmp	r2, r3
 8002384:	d109      	bne.n	800239a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002390:	085b      	lsrs	r3, r3, #1
 8002392:	3b01      	subs	r3, #1
 8002394:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002396:	429a      	cmp	r2, r3
 8002398:	d06e      	beq.n	8002478 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	2b0c      	cmp	r3, #12
 800239e:	d069      	beq.n	8002474 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80023a0:	4b53      	ldr	r3, [pc, #332]	; (80024f0 <HAL_RCC_OscConfig+0x780>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d105      	bne.n	80023b8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80023ac:	4b50      	ldr	r3, [pc, #320]	; (80024f0 <HAL_RCC_OscConfig+0x780>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d001      	beq.n	80023bc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e0ad      	b.n	8002518 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80023bc:	4b4c      	ldr	r3, [pc, #304]	; (80024f0 <HAL_RCC_OscConfig+0x780>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a4b      	ldr	r2, [pc, #300]	; (80024f0 <HAL_RCC_OscConfig+0x780>)
 80023c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023c6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80023c8:	f7ff f996 	bl	80016f8 <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023ce:	e008      	b.n	80023e2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023d0:	f7ff f992 	bl	80016f8 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e09a      	b.n	8002518 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023e2:	4b43      	ldr	r3, [pc, #268]	; (80024f0 <HAL_RCC_OscConfig+0x780>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d1f0      	bne.n	80023d0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023ee:	4b40      	ldr	r3, [pc, #256]	; (80024f0 <HAL_RCC_OscConfig+0x780>)
 80023f0:	68da      	ldr	r2, [r3, #12]
 80023f2:	4b40      	ldr	r3, [pc, #256]	; (80024f4 <HAL_RCC_OscConfig+0x784>)
 80023f4:	4013      	ands	r3, r2
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80023fe:	3a01      	subs	r2, #1
 8002400:	0112      	lsls	r2, r2, #4
 8002402:	4311      	orrs	r1, r2
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002408:	0212      	lsls	r2, r2, #8
 800240a:	4311      	orrs	r1, r2
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002410:	0852      	lsrs	r2, r2, #1
 8002412:	3a01      	subs	r2, #1
 8002414:	0552      	lsls	r2, r2, #21
 8002416:	4311      	orrs	r1, r2
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800241c:	0852      	lsrs	r2, r2, #1
 800241e:	3a01      	subs	r2, #1
 8002420:	0652      	lsls	r2, r2, #25
 8002422:	4311      	orrs	r1, r2
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002428:	0912      	lsrs	r2, r2, #4
 800242a:	0452      	lsls	r2, r2, #17
 800242c:	430a      	orrs	r2, r1
 800242e:	4930      	ldr	r1, [pc, #192]	; (80024f0 <HAL_RCC_OscConfig+0x780>)
 8002430:	4313      	orrs	r3, r2
 8002432:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002434:	4b2e      	ldr	r3, [pc, #184]	; (80024f0 <HAL_RCC_OscConfig+0x780>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a2d      	ldr	r2, [pc, #180]	; (80024f0 <HAL_RCC_OscConfig+0x780>)
 800243a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800243e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002440:	4b2b      	ldr	r3, [pc, #172]	; (80024f0 <HAL_RCC_OscConfig+0x780>)
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	4a2a      	ldr	r2, [pc, #168]	; (80024f0 <HAL_RCC_OscConfig+0x780>)
 8002446:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800244a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800244c:	f7ff f954 	bl	80016f8 <HAL_GetTick>
 8002450:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002452:	e008      	b.n	8002466 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002454:	f7ff f950 	bl	80016f8 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b02      	cmp	r3, #2
 8002460:	d901      	bls.n	8002466 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e058      	b.n	8002518 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002466:	4b22      	ldr	r3, [pc, #136]	; (80024f0 <HAL_RCC_OscConfig+0x780>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d0f0      	beq.n	8002454 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002472:	e050      	b.n	8002516 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e04f      	b.n	8002518 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002478:	4b1d      	ldr	r3, [pc, #116]	; (80024f0 <HAL_RCC_OscConfig+0x780>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d148      	bne.n	8002516 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002484:	4b1a      	ldr	r3, [pc, #104]	; (80024f0 <HAL_RCC_OscConfig+0x780>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a19      	ldr	r2, [pc, #100]	; (80024f0 <HAL_RCC_OscConfig+0x780>)
 800248a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800248e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002490:	4b17      	ldr	r3, [pc, #92]	; (80024f0 <HAL_RCC_OscConfig+0x780>)
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	4a16      	ldr	r2, [pc, #88]	; (80024f0 <HAL_RCC_OscConfig+0x780>)
 8002496:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800249a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800249c:	f7ff f92c 	bl	80016f8 <HAL_GetTick>
 80024a0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024a2:	e008      	b.n	80024b6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024a4:	f7ff f928 	bl	80016f8 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e030      	b.n	8002518 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024b6:	4b0e      	ldr	r3, [pc, #56]	; (80024f0 <HAL_RCC_OscConfig+0x780>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d0f0      	beq.n	80024a4 <HAL_RCC_OscConfig+0x734>
 80024c2:	e028      	b.n	8002516 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	2b0c      	cmp	r3, #12
 80024c8:	d023      	beq.n	8002512 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ca:	4b09      	ldr	r3, [pc, #36]	; (80024f0 <HAL_RCC_OscConfig+0x780>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a08      	ldr	r2, [pc, #32]	; (80024f0 <HAL_RCC_OscConfig+0x780>)
 80024d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d6:	f7ff f90f 	bl	80016f8 <HAL_GetTick>
 80024da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024dc:	e00c      	b.n	80024f8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024de:	f7ff f90b 	bl	80016f8 <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d905      	bls.n	80024f8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e013      	b.n	8002518 <HAL_RCC_OscConfig+0x7a8>
 80024f0:	40021000 	.word	0x40021000
 80024f4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024f8:	4b09      	ldr	r3, [pc, #36]	; (8002520 <HAL_RCC_OscConfig+0x7b0>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d1ec      	bne.n	80024de <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002504:	4b06      	ldr	r3, [pc, #24]	; (8002520 <HAL_RCC_OscConfig+0x7b0>)
 8002506:	68da      	ldr	r2, [r3, #12]
 8002508:	4905      	ldr	r1, [pc, #20]	; (8002520 <HAL_RCC_OscConfig+0x7b0>)
 800250a:	4b06      	ldr	r3, [pc, #24]	; (8002524 <HAL_RCC_OscConfig+0x7b4>)
 800250c:	4013      	ands	r3, r2
 800250e:	60cb      	str	r3, [r1, #12]
 8002510:	e001      	b.n	8002516 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e000      	b.n	8002518 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002516:	2300      	movs	r3, #0
}
 8002518:	4618      	mov	r0, r3
 800251a:	3720      	adds	r7, #32
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	40021000 	.word	0x40021000
 8002524:	feeefffc 	.word	0xfeeefffc

08002528 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d101      	bne.n	800253c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e0e7      	b.n	800270c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800253c:	4b75      	ldr	r3, [pc, #468]	; (8002714 <HAL_RCC_ClockConfig+0x1ec>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0307 	and.w	r3, r3, #7
 8002544:	683a      	ldr	r2, [r7, #0]
 8002546:	429a      	cmp	r2, r3
 8002548:	d910      	bls.n	800256c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800254a:	4b72      	ldr	r3, [pc, #456]	; (8002714 <HAL_RCC_ClockConfig+0x1ec>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f023 0207 	bic.w	r2, r3, #7
 8002552:	4970      	ldr	r1, [pc, #448]	; (8002714 <HAL_RCC_ClockConfig+0x1ec>)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	4313      	orrs	r3, r2
 8002558:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800255a:	4b6e      	ldr	r3, [pc, #440]	; (8002714 <HAL_RCC_ClockConfig+0x1ec>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0307 	and.w	r3, r3, #7
 8002562:	683a      	ldr	r2, [r7, #0]
 8002564:	429a      	cmp	r2, r3
 8002566:	d001      	beq.n	800256c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e0cf      	b.n	800270c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0302 	and.w	r3, r3, #2
 8002574:	2b00      	cmp	r3, #0
 8002576:	d010      	beq.n	800259a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	689a      	ldr	r2, [r3, #8]
 800257c:	4b66      	ldr	r3, [pc, #408]	; (8002718 <HAL_RCC_ClockConfig+0x1f0>)
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002584:	429a      	cmp	r2, r3
 8002586:	d908      	bls.n	800259a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002588:	4b63      	ldr	r3, [pc, #396]	; (8002718 <HAL_RCC_ClockConfig+0x1f0>)
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	4960      	ldr	r1, [pc, #384]	; (8002718 <HAL_RCC_ClockConfig+0x1f0>)
 8002596:	4313      	orrs	r3, r2
 8002598:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d04c      	beq.n	8002640 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	2b03      	cmp	r3, #3
 80025ac:	d107      	bne.n	80025be <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025ae:	4b5a      	ldr	r3, [pc, #360]	; (8002718 <HAL_RCC_ClockConfig+0x1f0>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d121      	bne.n	80025fe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e0a6      	b.n	800270c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d107      	bne.n	80025d6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025c6:	4b54      	ldr	r3, [pc, #336]	; (8002718 <HAL_RCC_ClockConfig+0x1f0>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d115      	bne.n	80025fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e09a      	b.n	800270c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d107      	bne.n	80025ee <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025de:	4b4e      	ldr	r3, [pc, #312]	; (8002718 <HAL_RCC_ClockConfig+0x1f0>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d109      	bne.n	80025fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e08e      	b.n	800270c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025ee:	4b4a      	ldr	r3, [pc, #296]	; (8002718 <HAL_RCC_ClockConfig+0x1f0>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d101      	bne.n	80025fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e086      	b.n	800270c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80025fe:	4b46      	ldr	r3, [pc, #280]	; (8002718 <HAL_RCC_ClockConfig+0x1f0>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f023 0203 	bic.w	r2, r3, #3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	4943      	ldr	r1, [pc, #268]	; (8002718 <HAL_RCC_ClockConfig+0x1f0>)
 800260c:	4313      	orrs	r3, r2
 800260e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002610:	f7ff f872 	bl	80016f8 <HAL_GetTick>
 8002614:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002616:	e00a      	b.n	800262e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002618:	f7ff f86e 	bl	80016f8 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	f241 3288 	movw	r2, #5000	; 0x1388
 8002626:	4293      	cmp	r3, r2
 8002628:	d901      	bls.n	800262e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e06e      	b.n	800270c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800262e:	4b3a      	ldr	r3, [pc, #232]	; (8002718 <HAL_RCC_ClockConfig+0x1f0>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f003 020c 	and.w	r2, r3, #12
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	429a      	cmp	r2, r3
 800263e:	d1eb      	bne.n	8002618 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d010      	beq.n	800266e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689a      	ldr	r2, [r3, #8]
 8002650:	4b31      	ldr	r3, [pc, #196]	; (8002718 <HAL_RCC_ClockConfig+0x1f0>)
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002658:	429a      	cmp	r2, r3
 800265a:	d208      	bcs.n	800266e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800265c:	4b2e      	ldr	r3, [pc, #184]	; (8002718 <HAL_RCC_ClockConfig+0x1f0>)
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	492b      	ldr	r1, [pc, #172]	; (8002718 <HAL_RCC_ClockConfig+0x1f0>)
 800266a:	4313      	orrs	r3, r2
 800266c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800266e:	4b29      	ldr	r3, [pc, #164]	; (8002714 <HAL_RCC_ClockConfig+0x1ec>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0307 	and.w	r3, r3, #7
 8002676:	683a      	ldr	r2, [r7, #0]
 8002678:	429a      	cmp	r2, r3
 800267a:	d210      	bcs.n	800269e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800267c:	4b25      	ldr	r3, [pc, #148]	; (8002714 <HAL_RCC_ClockConfig+0x1ec>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f023 0207 	bic.w	r2, r3, #7
 8002684:	4923      	ldr	r1, [pc, #140]	; (8002714 <HAL_RCC_ClockConfig+0x1ec>)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	4313      	orrs	r3, r2
 800268a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800268c:	4b21      	ldr	r3, [pc, #132]	; (8002714 <HAL_RCC_ClockConfig+0x1ec>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0307 	and.w	r3, r3, #7
 8002694:	683a      	ldr	r2, [r7, #0]
 8002696:	429a      	cmp	r2, r3
 8002698:	d001      	beq.n	800269e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e036      	b.n	800270c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0304 	and.w	r3, r3, #4
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d008      	beq.n	80026bc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026aa:	4b1b      	ldr	r3, [pc, #108]	; (8002718 <HAL_RCC_ClockConfig+0x1f0>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	4918      	ldr	r1, [pc, #96]	; (8002718 <HAL_RCC_ClockConfig+0x1f0>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0308 	and.w	r3, r3, #8
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d009      	beq.n	80026dc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026c8:	4b13      	ldr	r3, [pc, #76]	; (8002718 <HAL_RCC_ClockConfig+0x1f0>)
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	691b      	ldr	r3, [r3, #16]
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	4910      	ldr	r1, [pc, #64]	; (8002718 <HAL_RCC_ClockConfig+0x1f0>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026dc:	f000 f824 	bl	8002728 <HAL_RCC_GetSysClockFreq>
 80026e0:	4602      	mov	r2, r0
 80026e2:	4b0d      	ldr	r3, [pc, #52]	; (8002718 <HAL_RCC_ClockConfig+0x1f0>)
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	091b      	lsrs	r3, r3, #4
 80026e8:	f003 030f 	and.w	r3, r3, #15
 80026ec:	490b      	ldr	r1, [pc, #44]	; (800271c <HAL_RCC_ClockConfig+0x1f4>)
 80026ee:	5ccb      	ldrb	r3, [r1, r3]
 80026f0:	f003 031f 	and.w	r3, r3, #31
 80026f4:	fa22 f303 	lsr.w	r3, r2, r3
 80026f8:	4a09      	ldr	r2, [pc, #36]	; (8002720 <HAL_RCC_ClockConfig+0x1f8>)
 80026fa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80026fc:	4b09      	ldr	r3, [pc, #36]	; (8002724 <HAL_RCC_ClockConfig+0x1fc>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4618      	mov	r0, r3
 8002702:	f7fe ffa9 	bl	8001658 <HAL_InitTick>
 8002706:	4603      	mov	r3, r0
 8002708:	72fb      	strb	r3, [r7, #11]

  return status;
 800270a:	7afb      	ldrb	r3, [r7, #11]
}
 800270c:	4618      	mov	r0, r3
 800270e:	3710      	adds	r7, #16
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	40022000 	.word	0x40022000
 8002718:	40021000 	.word	0x40021000
 800271c:	080055fc 	.word	0x080055fc
 8002720:	20000000 	.word	0x20000000
 8002724:	20000004 	.word	0x20000004

08002728 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002728:	b480      	push	{r7}
 800272a:	b089      	sub	sp, #36	; 0x24
 800272c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800272e:	2300      	movs	r3, #0
 8002730:	61fb      	str	r3, [r7, #28]
 8002732:	2300      	movs	r3, #0
 8002734:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002736:	4b3e      	ldr	r3, [pc, #248]	; (8002830 <HAL_RCC_GetSysClockFreq+0x108>)
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f003 030c 	and.w	r3, r3, #12
 800273e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002740:	4b3b      	ldr	r3, [pc, #236]	; (8002830 <HAL_RCC_GetSysClockFreq+0x108>)
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	f003 0303 	and.w	r3, r3, #3
 8002748:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d005      	beq.n	800275c <HAL_RCC_GetSysClockFreq+0x34>
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	2b0c      	cmp	r3, #12
 8002754:	d121      	bne.n	800279a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2b01      	cmp	r3, #1
 800275a:	d11e      	bne.n	800279a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800275c:	4b34      	ldr	r3, [pc, #208]	; (8002830 <HAL_RCC_GetSysClockFreq+0x108>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0308 	and.w	r3, r3, #8
 8002764:	2b00      	cmp	r3, #0
 8002766:	d107      	bne.n	8002778 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002768:	4b31      	ldr	r3, [pc, #196]	; (8002830 <HAL_RCC_GetSysClockFreq+0x108>)
 800276a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800276e:	0a1b      	lsrs	r3, r3, #8
 8002770:	f003 030f 	and.w	r3, r3, #15
 8002774:	61fb      	str	r3, [r7, #28]
 8002776:	e005      	b.n	8002784 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002778:	4b2d      	ldr	r3, [pc, #180]	; (8002830 <HAL_RCC_GetSysClockFreq+0x108>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	091b      	lsrs	r3, r3, #4
 800277e:	f003 030f 	and.w	r3, r3, #15
 8002782:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002784:	4a2b      	ldr	r2, [pc, #172]	; (8002834 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800278c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d10d      	bne.n	80027b0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002798:	e00a      	b.n	80027b0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	2b04      	cmp	r3, #4
 800279e:	d102      	bne.n	80027a6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80027a0:	4b25      	ldr	r3, [pc, #148]	; (8002838 <HAL_RCC_GetSysClockFreq+0x110>)
 80027a2:	61bb      	str	r3, [r7, #24]
 80027a4:	e004      	b.n	80027b0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	2b08      	cmp	r3, #8
 80027aa:	d101      	bne.n	80027b0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80027ac:	4b23      	ldr	r3, [pc, #140]	; (800283c <HAL_RCC_GetSysClockFreq+0x114>)
 80027ae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	2b0c      	cmp	r3, #12
 80027b4:	d134      	bne.n	8002820 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80027b6:	4b1e      	ldr	r3, [pc, #120]	; (8002830 <HAL_RCC_GetSysClockFreq+0x108>)
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	f003 0303 	and.w	r3, r3, #3
 80027be:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d003      	beq.n	80027ce <HAL_RCC_GetSysClockFreq+0xa6>
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	2b03      	cmp	r3, #3
 80027ca:	d003      	beq.n	80027d4 <HAL_RCC_GetSysClockFreq+0xac>
 80027cc:	e005      	b.n	80027da <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80027ce:	4b1a      	ldr	r3, [pc, #104]	; (8002838 <HAL_RCC_GetSysClockFreq+0x110>)
 80027d0:	617b      	str	r3, [r7, #20]
      break;
 80027d2:	e005      	b.n	80027e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80027d4:	4b19      	ldr	r3, [pc, #100]	; (800283c <HAL_RCC_GetSysClockFreq+0x114>)
 80027d6:	617b      	str	r3, [r7, #20]
      break;
 80027d8:	e002      	b.n	80027e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	617b      	str	r3, [r7, #20]
      break;
 80027de:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80027e0:	4b13      	ldr	r3, [pc, #76]	; (8002830 <HAL_RCC_GetSysClockFreq+0x108>)
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	091b      	lsrs	r3, r3, #4
 80027e6:	f003 0307 	and.w	r3, r3, #7
 80027ea:	3301      	adds	r3, #1
 80027ec:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80027ee:	4b10      	ldr	r3, [pc, #64]	; (8002830 <HAL_RCC_GetSysClockFreq+0x108>)
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	0a1b      	lsrs	r3, r3, #8
 80027f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027f8:	697a      	ldr	r2, [r7, #20]
 80027fa:	fb03 f202 	mul.w	r2, r3, r2
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	fbb2 f3f3 	udiv	r3, r2, r3
 8002804:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002806:	4b0a      	ldr	r3, [pc, #40]	; (8002830 <HAL_RCC_GetSysClockFreq+0x108>)
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	0e5b      	lsrs	r3, r3, #25
 800280c:	f003 0303 	and.w	r3, r3, #3
 8002810:	3301      	adds	r3, #1
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002816:	697a      	ldr	r2, [r7, #20]
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	fbb2 f3f3 	udiv	r3, r2, r3
 800281e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002820:	69bb      	ldr	r3, [r7, #24]
}
 8002822:	4618      	mov	r0, r3
 8002824:	3724      	adds	r7, #36	; 0x24
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	40021000 	.word	0x40021000
 8002834:	08005614 	.word	0x08005614
 8002838:	00f42400 	.word	0x00f42400
 800283c:	007a1200 	.word	0x007a1200

08002840 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002844:	4b03      	ldr	r3, [pc, #12]	; (8002854 <HAL_RCC_GetHCLKFreq+0x14>)
 8002846:	681b      	ldr	r3, [r3, #0]
}
 8002848:	4618      	mov	r0, r3
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	20000000 	.word	0x20000000

08002858 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800285c:	f7ff fff0 	bl	8002840 <HAL_RCC_GetHCLKFreq>
 8002860:	4602      	mov	r2, r0
 8002862:	4b06      	ldr	r3, [pc, #24]	; (800287c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	0a1b      	lsrs	r3, r3, #8
 8002868:	f003 0307 	and.w	r3, r3, #7
 800286c:	4904      	ldr	r1, [pc, #16]	; (8002880 <HAL_RCC_GetPCLK1Freq+0x28>)
 800286e:	5ccb      	ldrb	r3, [r1, r3]
 8002870:	f003 031f 	and.w	r3, r3, #31
 8002874:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002878:	4618      	mov	r0, r3
 800287a:	bd80      	pop	{r7, pc}
 800287c:	40021000 	.word	0x40021000
 8002880:	0800560c 	.word	0x0800560c

08002884 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002888:	f7ff ffda 	bl	8002840 <HAL_RCC_GetHCLKFreq>
 800288c:	4602      	mov	r2, r0
 800288e:	4b06      	ldr	r3, [pc, #24]	; (80028a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	0adb      	lsrs	r3, r3, #11
 8002894:	f003 0307 	and.w	r3, r3, #7
 8002898:	4904      	ldr	r1, [pc, #16]	; (80028ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800289a:	5ccb      	ldrb	r3, [r1, r3]
 800289c:	f003 031f 	and.w	r3, r3, #31
 80028a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	40021000 	.word	0x40021000
 80028ac:	0800560c 	.word	0x0800560c

080028b0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b086      	sub	sp, #24
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80028b8:	2300      	movs	r3, #0
 80028ba:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80028bc:	4b2a      	ldr	r3, [pc, #168]	; (8002968 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d003      	beq.n	80028d0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80028c8:	f7ff f9ee 	bl	8001ca8 <HAL_PWREx_GetVoltageRange>
 80028cc:	6178      	str	r0, [r7, #20]
 80028ce:	e014      	b.n	80028fa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80028d0:	4b25      	ldr	r3, [pc, #148]	; (8002968 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d4:	4a24      	ldr	r2, [pc, #144]	; (8002968 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028da:	6593      	str	r3, [r2, #88]	; 0x58
 80028dc:	4b22      	ldr	r3, [pc, #136]	; (8002968 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028e4:	60fb      	str	r3, [r7, #12]
 80028e6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80028e8:	f7ff f9de 	bl	8001ca8 <HAL_PWREx_GetVoltageRange>
 80028ec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80028ee:	4b1e      	ldr	r3, [pc, #120]	; (8002968 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f2:	4a1d      	ldr	r2, [pc, #116]	; (8002968 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028f8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002900:	d10b      	bne.n	800291a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2b80      	cmp	r3, #128	; 0x80
 8002906:	d919      	bls.n	800293c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2ba0      	cmp	r3, #160	; 0xa0
 800290c:	d902      	bls.n	8002914 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800290e:	2302      	movs	r3, #2
 8002910:	613b      	str	r3, [r7, #16]
 8002912:	e013      	b.n	800293c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002914:	2301      	movs	r3, #1
 8002916:	613b      	str	r3, [r7, #16]
 8002918:	e010      	b.n	800293c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2b80      	cmp	r3, #128	; 0x80
 800291e:	d902      	bls.n	8002926 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002920:	2303      	movs	r3, #3
 8002922:	613b      	str	r3, [r7, #16]
 8002924:	e00a      	b.n	800293c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2b80      	cmp	r3, #128	; 0x80
 800292a:	d102      	bne.n	8002932 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800292c:	2302      	movs	r3, #2
 800292e:	613b      	str	r3, [r7, #16]
 8002930:	e004      	b.n	800293c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2b70      	cmp	r3, #112	; 0x70
 8002936:	d101      	bne.n	800293c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002938:	2301      	movs	r3, #1
 800293a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800293c:	4b0b      	ldr	r3, [pc, #44]	; (800296c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f023 0207 	bic.w	r2, r3, #7
 8002944:	4909      	ldr	r1, [pc, #36]	; (800296c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	4313      	orrs	r3, r2
 800294a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800294c:	4b07      	ldr	r3, [pc, #28]	; (800296c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0307 	and.w	r3, r3, #7
 8002954:	693a      	ldr	r2, [r7, #16]
 8002956:	429a      	cmp	r2, r3
 8002958:	d001      	beq.n	800295e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e000      	b.n	8002960 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800295e:	2300      	movs	r3, #0
}
 8002960:	4618      	mov	r0, r3
 8002962:	3718      	adds	r7, #24
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	40021000 	.word	0x40021000
 800296c:	40022000 	.word	0x40022000

08002970 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b086      	sub	sp, #24
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002978:	2300      	movs	r3, #0
 800297a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800297c:	2300      	movs	r3, #0
 800297e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002988:	2b00      	cmp	r3, #0
 800298a:	d041      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002990:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002994:	d02a      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002996:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800299a:	d824      	bhi.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800299c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80029a0:	d008      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80029a2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80029a6:	d81e      	bhi.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00a      	beq.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80029ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029b0:	d010      	beq.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80029b2:	e018      	b.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80029b4:	4b86      	ldr	r3, [pc, #536]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	4a85      	ldr	r2, [pc, #532]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029be:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029c0:	e015      	b.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	3304      	adds	r3, #4
 80029c6:	2100      	movs	r1, #0
 80029c8:	4618      	mov	r0, r3
 80029ca:	f000 fabb 	bl	8002f44 <RCCEx_PLLSAI1_Config>
 80029ce:	4603      	mov	r3, r0
 80029d0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029d2:	e00c      	b.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	3320      	adds	r3, #32
 80029d8:	2100      	movs	r1, #0
 80029da:	4618      	mov	r0, r3
 80029dc:	f000 fba6 	bl	800312c <RCCEx_PLLSAI2_Config>
 80029e0:	4603      	mov	r3, r0
 80029e2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029e4:	e003      	b.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	74fb      	strb	r3, [r7, #19]
      break;
 80029ea:	e000      	b.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80029ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029ee:	7cfb      	ldrb	r3, [r7, #19]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d10b      	bne.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029f4:	4b76      	ldr	r3, [pc, #472]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029fa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a02:	4973      	ldr	r1, [pc, #460]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002a0a:	e001      	b.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a0c:	7cfb      	ldrb	r3, [r7, #19]
 8002a0e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d041      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a20:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002a24:	d02a      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002a26:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002a2a:	d824      	bhi.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002a2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a30:	d008      	beq.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002a32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a36:	d81e      	bhi.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d00a      	beq.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002a3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a40:	d010      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002a42:	e018      	b.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a44:	4b62      	ldr	r3, [pc, #392]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	4a61      	ldr	r2, [pc, #388]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a4e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a50:	e015      	b.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	3304      	adds	r3, #4
 8002a56:	2100      	movs	r1, #0
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f000 fa73 	bl	8002f44 <RCCEx_PLLSAI1_Config>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a62:	e00c      	b.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	3320      	adds	r3, #32
 8002a68:	2100      	movs	r1, #0
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f000 fb5e 	bl	800312c <RCCEx_PLLSAI2_Config>
 8002a70:	4603      	mov	r3, r0
 8002a72:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a74:	e003      	b.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	74fb      	strb	r3, [r7, #19]
      break;
 8002a7a:	e000      	b.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002a7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a7e:	7cfb      	ldrb	r3, [r7, #19]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d10b      	bne.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002a84:	4b52      	ldr	r3, [pc, #328]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a8a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a92:	494f      	ldr	r1, [pc, #316]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002a9a:	e001      	b.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a9c:	7cfb      	ldrb	r3, [r7, #19]
 8002a9e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f000 80a0 	beq.w	8002bee <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002ab2:	4b47      	ldr	r3, [pc, #284]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e000      	b.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00d      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ac8:	4b41      	ldr	r3, [pc, #260]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002acc:	4a40      	ldr	r2, [pc, #256]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ace:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ad2:	6593      	str	r3, [r2, #88]	; 0x58
 8002ad4:	4b3e      	ldr	r3, [pc, #248]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002adc:	60bb      	str	r3, [r7, #8]
 8002ade:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ae4:	4b3b      	ldr	r3, [pc, #236]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a3a      	ldr	r2, [pc, #232]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002aea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002af0:	f7fe fe02 	bl	80016f8 <HAL_GetTick>
 8002af4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002af6:	e009      	b.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002af8:	f7fe fdfe 	bl	80016f8 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d902      	bls.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	74fb      	strb	r3, [r7, #19]
        break;
 8002b0a:	e005      	b.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b0c:	4b31      	ldr	r3, [pc, #196]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d0ef      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002b18:	7cfb      	ldrb	r3, [r7, #19]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d15c      	bne.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b1e:	4b2c      	ldr	r3, [pc, #176]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b28:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d01f      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b36:	697a      	ldr	r2, [r7, #20]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d019      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b3c:	4b24      	ldr	r3, [pc, #144]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b46:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b48:	4b21      	ldr	r3, [pc, #132]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b4e:	4a20      	ldr	r2, [pc, #128]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b58:	4b1d      	ldr	r3, [pc, #116]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b5e:	4a1c      	ldr	r2, [pc, #112]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b68:	4a19      	ldr	r2, [pc, #100]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d016      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b7a:	f7fe fdbd 	bl	80016f8 <HAL_GetTick>
 8002b7e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b80:	e00b      	b.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b82:	f7fe fdb9 	bl	80016f8 <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d902      	bls.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	74fb      	strb	r3, [r7, #19]
            break;
 8002b98:	e006      	b.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b9a:	4b0d      	ldr	r3, [pc, #52]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ba0:	f003 0302 	and.w	r3, r3, #2
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d0ec      	beq.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002ba8:	7cfb      	ldrb	r3, [r7, #19]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10c      	bne.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bae:	4b08      	ldr	r3, [pc, #32]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bb4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bbe:	4904      	ldr	r1, [pc, #16]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002bc6:	e009      	b.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002bc8:	7cfb      	ldrb	r3, [r7, #19]
 8002bca:	74bb      	strb	r3, [r7, #18]
 8002bcc:	e006      	b.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002bce:	bf00      	nop
 8002bd0:	40021000 	.word	0x40021000
 8002bd4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bd8:	7cfb      	ldrb	r3, [r7, #19]
 8002bda:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bdc:	7c7b      	ldrb	r3, [r7, #17]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d105      	bne.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002be2:	4b9e      	ldr	r3, [pc, #632]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be6:	4a9d      	ldr	r2, [pc, #628]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002be8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bec:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d00a      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002bfa:	4b98      	ldr	r3, [pc, #608]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c00:	f023 0203 	bic.w	r2, r3, #3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c08:	4994      	ldr	r1, [pc, #592]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0302 	and.w	r3, r3, #2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00a      	beq.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c1c:	4b8f      	ldr	r3, [pc, #572]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c22:	f023 020c 	bic.w	r2, r3, #12
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c2a:	498c      	ldr	r1, [pc, #560]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0304 	and.w	r3, r3, #4
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00a      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c3e:	4b87      	ldr	r3, [pc, #540]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c44:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4c:	4983      	ldr	r1, [pc, #524]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0308 	and.w	r3, r3, #8
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d00a      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c60:	4b7e      	ldr	r3, [pc, #504]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c66:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6e:	497b      	ldr	r1, [pc, #492]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0310 	and.w	r3, r3, #16
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d00a      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c82:	4b76      	ldr	r3, [pc, #472]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c90:	4972      	ldr	r1, [pc, #456]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0320 	and.w	r3, r3, #32
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00a      	beq.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ca4:	4b6d      	ldr	r3, [pc, #436]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002caa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cb2:	496a      	ldr	r1, [pc, #424]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00a      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002cc6:	4b65      	ldr	r3, [pc, #404]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ccc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd4:	4961      	ldr	r1, [pc, #388]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d00a      	beq.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ce8:	4b5c      	ldr	r3, [pc, #368]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cf6:	4959      	ldr	r1, [pc, #356]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00a      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d0a:	4b54      	ldr	r3, [pc, #336]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d10:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d18:	4950      	ldr	r1, [pc, #320]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d00a      	beq.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d2c:	4b4b      	ldr	r3, [pc, #300]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d32:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d3a:	4948      	ldr	r1, [pc, #288]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d00a      	beq.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d4e:	4b43      	ldr	r3, [pc, #268]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d54:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d5c:	493f      	ldr	r1, [pc, #252]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d028      	beq.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d70:	4b3a      	ldr	r3, [pc, #232]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d76:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d7e:	4937      	ldr	r1, [pc, #220]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d8e:	d106      	bne.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d90:	4b32      	ldr	r3, [pc, #200]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	4a31      	ldr	r2, [pc, #196]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d9a:	60d3      	str	r3, [r2, #12]
 8002d9c:	e011      	b.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002da2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002da6:	d10c      	bne.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	3304      	adds	r3, #4
 8002dac:	2101      	movs	r1, #1
 8002dae:	4618      	mov	r0, r3
 8002db0:	f000 f8c8 	bl	8002f44 <RCCEx_PLLSAI1_Config>
 8002db4:	4603      	mov	r3, r0
 8002db6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002db8:	7cfb      	ldrb	r3, [r7, #19]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002dbe:	7cfb      	ldrb	r3, [r7, #19]
 8002dc0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d028      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002dce:	4b23      	ldr	r3, [pc, #140]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dd4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ddc:	491f      	ldr	r1, [pc, #124]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002dec:	d106      	bne.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dee:	4b1b      	ldr	r3, [pc, #108]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	4a1a      	ldr	r2, [pc, #104]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002df4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002df8:	60d3      	str	r3, [r2, #12]
 8002dfa:	e011      	b.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e00:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e04:	d10c      	bne.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	3304      	adds	r3, #4
 8002e0a:	2101      	movs	r1, #1
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f000 f899 	bl	8002f44 <RCCEx_PLLSAI1_Config>
 8002e12:	4603      	mov	r3, r0
 8002e14:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e16:	7cfb      	ldrb	r3, [r7, #19]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d001      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002e1c:	7cfb      	ldrb	r3, [r7, #19]
 8002e1e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d02b      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e2c:	4b0b      	ldr	r3, [pc, #44]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e32:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e3a:	4908      	ldr	r1, [pc, #32]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e4a:	d109      	bne.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e4c:	4b03      	ldr	r3, [pc, #12]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	4a02      	ldr	r2, [pc, #8]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e56:	60d3      	str	r3, [r2, #12]
 8002e58:	e014      	b.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002e5a:	bf00      	nop
 8002e5c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e68:	d10c      	bne.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	3304      	adds	r3, #4
 8002e6e:	2101      	movs	r1, #1
 8002e70:	4618      	mov	r0, r3
 8002e72:	f000 f867 	bl	8002f44 <RCCEx_PLLSAI1_Config>
 8002e76:	4603      	mov	r3, r0
 8002e78:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e7a:	7cfb      	ldrb	r3, [r7, #19]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d001      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002e80:	7cfb      	ldrb	r3, [r7, #19]
 8002e82:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d02f      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e90:	4b2b      	ldr	r3, [pc, #172]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e96:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e9e:	4928      	ldr	r1, [pc, #160]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002eaa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002eae:	d10d      	bne.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	3304      	adds	r3, #4
 8002eb4:	2102      	movs	r1, #2
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f000 f844 	bl	8002f44 <RCCEx_PLLSAI1_Config>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ec0:	7cfb      	ldrb	r3, [r7, #19]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d014      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002ec6:	7cfb      	ldrb	r3, [r7, #19]
 8002ec8:	74bb      	strb	r3, [r7, #18]
 8002eca:	e011      	b.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ed0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ed4:	d10c      	bne.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	3320      	adds	r3, #32
 8002eda:	2102      	movs	r1, #2
 8002edc:	4618      	mov	r0, r3
 8002ede:	f000 f925 	bl	800312c <RCCEx_PLLSAI2_Config>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ee6:	7cfb      	ldrb	r3, [r7, #19]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d001      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002eec:	7cfb      	ldrb	r3, [r7, #19]
 8002eee:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d00a      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002efc:	4b10      	ldr	r3, [pc, #64]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f02:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f0a:	490d      	ldr	r1, [pc, #52]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00b      	beq.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f1e:	4b08      	ldr	r3, [pc, #32]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f24:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f2e:	4904      	ldr	r1, [pc, #16]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f30:	4313      	orrs	r3, r2
 8002f32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002f36:	7cbb      	ldrb	r3, [r7, #18]
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3718      	adds	r7, #24
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	40021000 	.word	0x40021000

08002f44 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f52:	4b75      	ldr	r3, [pc, #468]	; (8003128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	f003 0303 	and.w	r3, r3, #3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d018      	beq.n	8002f90 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002f5e:	4b72      	ldr	r3, [pc, #456]	; (8003128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	f003 0203 	and.w	r2, r3, #3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d10d      	bne.n	8002f8a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
       ||
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d009      	beq.n	8002f8a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002f76:	4b6c      	ldr	r3, [pc, #432]	; (8003128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	091b      	lsrs	r3, r3, #4
 8002f7c:	f003 0307 	and.w	r3, r3, #7
 8002f80:	1c5a      	adds	r2, r3, #1
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
       ||
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d047      	beq.n	800301a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	73fb      	strb	r3, [r7, #15]
 8002f8e:	e044      	b.n	800301a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2b03      	cmp	r3, #3
 8002f96:	d018      	beq.n	8002fca <RCCEx_PLLSAI1_Config+0x86>
 8002f98:	2b03      	cmp	r3, #3
 8002f9a:	d825      	bhi.n	8002fe8 <RCCEx_PLLSAI1_Config+0xa4>
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d002      	beq.n	8002fa6 <RCCEx_PLLSAI1_Config+0x62>
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d009      	beq.n	8002fb8 <RCCEx_PLLSAI1_Config+0x74>
 8002fa4:	e020      	b.n	8002fe8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002fa6:	4b60      	ldr	r3, [pc, #384]	; (8003128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d11d      	bne.n	8002fee <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fb6:	e01a      	b.n	8002fee <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002fb8:	4b5b      	ldr	r3, [pc, #364]	; (8003128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d116      	bne.n	8002ff2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fc8:	e013      	b.n	8002ff2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002fca:	4b57      	ldr	r3, [pc, #348]	; (8003128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10f      	bne.n	8002ff6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002fd6:	4b54      	ldr	r3, [pc, #336]	; (8003128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d109      	bne.n	8002ff6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002fe6:	e006      	b.n	8002ff6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	73fb      	strb	r3, [r7, #15]
      break;
 8002fec:	e004      	b.n	8002ff8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002fee:	bf00      	nop
 8002ff0:	e002      	b.n	8002ff8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ff2:	bf00      	nop
 8002ff4:	e000      	b.n	8002ff8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ff6:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ff8:	7bfb      	ldrb	r3, [r7, #15]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d10d      	bne.n	800301a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002ffe:	4b4a      	ldr	r3, [pc, #296]	; (8003128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6819      	ldr	r1, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	3b01      	subs	r3, #1
 8003010:	011b      	lsls	r3, r3, #4
 8003012:	430b      	orrs	r3, r1
 8003014:	4944      	ldr	r1, [pc, #272]	; (8003128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003016:	4313      	orrs	r3, r2
 8003018:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800301a:	7bfb      	ldrb	r3, [r7, #15]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d17d      	bne.n	800311c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003020:	4b41      	ldr	r3, [pc, #260]	; (8003128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a40      	ldr	r2, [pc, #256]	; (8003128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003026:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800302a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800302c:	f7fe fb64 	bl	80016f8 <HAL_GetTick>
 8003030:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003032:	e009      	b.n	8003048 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003034:	f7fe fb60 	bl	80016f8 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b02      	cmp	r3, #2
 8003040:	d902      	bls.n	8003048 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	73fb      	strb	r3, [r7, #15]
        break;
 8003046:	e005      	b.n	8003054 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003048:	4b37      	ldr	r3, [pc, #220]	; (8003128 <RCCEx_PLLSAI1_Config+0x1e4>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d1ef      	bne.n	8003034 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003054:	7bfb      	ldrb	r3, [r7, #15]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d160      	bne.n	800311c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d111      	bne.n	8003084 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003060:	4b31      	ldr	r3, [pc, #196]	; (8003128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003068:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	6892      	ldr	r2, [r2, #8]
 8003070:	0211      	lsls	r1, r2, #8
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	68d2      	ldr	r2, [r2, #12]
 8003076:	0912      	lsrs	r2, r2, #4
 8003078:	0452      	lsls	r2, r2, #17
 800307a:	430a      	orrs	r2, r1
 800307c:	492a      	ldr	r1, [pc, #168]	; (8003128 <RCCEx_PLLSAI1_Config+0x1e4>)
 800307e:	4313      	orrs	r3, r2
 8003080:	610b      	str	r3, [r1, #16]
 8003082:	e027      	b.n	80030d4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	2b01      	cmp	r3, #1
 8003088:	d112      	bne.n	80030b0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800308a:	4b27      	ldr	r3, [pc, #156]	; (8003128 <RCCEx_PLLSAI1_Config+0x1e4>)
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003092:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	6892      	ldr	r2, [r2, #8]
 800309a:	0211      	lsls	r1, r2, #8
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	6912      	ldr	r2, [r2, #16]
 80030a0:	0852      	lsrs	r2, r2, #1
 80030a2:	3a01      	subs	r2, #1
 80030a4:	0552      	lsls	r2, r2, #21
 80030a6:	430a      	orrs	r2, r1
 80030a8:	491f      	ldr	r1, [pc, #124]	; (8003128 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	610b      	str	r3, [r1, #16]
 80030ae:	e011      	b.n	80030d4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030b0:	4b1d      	ldr	r3, [pc, #116]	; (8003128 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030b2:	691b      	ldr	r3, [r3, #16]
 80030b4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80030b8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	6892      	ldr	r2, [r2, #8]
 80030c0:	0211      	lsls	r1, r2, #8
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	6952      	ldr	r2, [r2, #20]
 80030c6:	0852      	lsrs	r2, r2, #1
 80030c8:	3a01      	subs	r2, #1
 80030ca:	0652      	lsls	r2, r2, #25
 80030cc:	430a      	orrs	r2, r1
 80030ce:	4916      	ldr	r1, [pc, #88]	; (8003128 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80030d4:	4b14      	ldr	r3, [pc, #80]	; (8003128 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a13      	ldr	r2, [pc, #76]	; (8003128 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80030de:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030e0:	f7fe fb0a 	bl	80016f8 <HAL_GetTick>
 80030e4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80030e6:	e009      	b.n	80030fc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030e8:	f7fe fb06 	bl	80016f8 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d902      	bls.n	80030fc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	73fb      	strb	r3, [r7, #15]
          break;
 80030fa:	e005      	b.n	8003108 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80030fc:	4b0a      	ldr	r3, [pc, #40]	; (8003128 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d0ef      	beq.n	80030e8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003108:	7bfb      	ldrb	r3, [r7, #15]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d106      	bne.n	800311c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800310e:	4b06      	ldr	r3, [pc, #24]	; (8003128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003110:	691a      	ldr	r2, [r3, #16]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	4904      	ldr	r1, [pc, #16]	; (8003128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003118:	4313      	orrs	r3, r2
 800311a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800311c:	7bfb      	ldrb	r3, [r7, #15]
}
 800311e:	4618      	mov	r0, r3
 8003120:	3710      	adds	r7, #16
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	40021000 	.word	0x40021000

0800312c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003136:	2300      	movs	r3, #0
 8003138:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800313a:	4b6a      	ldr	r3, [pc, #424]	; (80032e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	f003 0303 	and.w	r3, r3, #3
 8003142:	2b00      	cmp	r3, #0
 8003144:	d018      	beq.n	8003178 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003146:	4b67      	ldr	r3, [pc, #412]	; (80032e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	f003 0203 	and.w	r2, r3, #3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	429a      	cmp	r2, r3
 8003154:	d10d      	bne.n	8003172 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
       ||
 800315a:	2b00      	cmp	r3, #0
 800315c:	d009      	beq.n	8003172 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800315e:	4b61      	ldr	r3, [pc, #388]	; (80032e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	091b      	lsrs	r3, r3, #4
 8003164:	f003 0307 	and.w	r3, r3, #7
 8003168:	1c5a      	adds	r2, r3, #1
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
       ||
 800316e:	429a      	cmp	r2, r3
 8003170:	d047      	beq.n	8003202 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	73fb      	strb	r3, [r7, #15]
 8003176:	e044      	b.n	8003202 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2b03      	cmp	r3, #3
 800317e:	d018      	beq.n	80031b2 <RCCEx_PLLSAI2_Config+0x86>
 8003180:	2b03      	cmp	r3, #3
 8003182:	d825      	bhi.n	80031d0 <RCCEx_PLLSAI2_Config+0xa4>
 8003184:	2b01      	cmp	r3, #1
 8003186:	d002      	beq.n	800318e <RCCEx_PLLSAI2_Config+0x62>
 8003188:	2b02      	cmp	r3, #2
 800318a:	d009      	beq.n	80031a0 <RCCEx_PLLSAI2_Config+0x74>
 800318c:	e020      	b.n	80031d0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800318e:	4b55      	ldr	r3, [pc, #340]	; (80032e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0302 	and.w	r3, r3, #2
 8003196:	2b00      	cmp	r3, #0
 8003198:	d11d      	bne.n	80031d6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800319e:	e01a      	b.n	80031d6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80031a0:	4b50      	ldr	r3, [pc, #320]	; (80032e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d116      	bne.n	80031da <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031b0:	e013      	b.n	80031da <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80031b2:	4b4c      	ldr	r3, [pc, #304]	; (80032e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d10f      	bne.n	80031de <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80031be:	4b49      	ldr	r3, [pc, #292]	; (80032e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d109      	bne.n	80031de <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80031ce:	e006      	b.n	80031de <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	73fb      	strb	r3, [r7, #15]
      break;
 80031d4:	e004      	b.n	80031e0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80031d6:	bf00      	nop
 80031d8:	e002      	b.n	80031e0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80031da:	bf00      	nop
 80031dc:	e000      	b.n	80031e0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80031de:	bf00      	nop
    }

    if(status == HAL_OK)
 80031e0:	7bfb      	ldrb	r3, [r7, #15]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d10d      	bne.n	8003202 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80031e6:	4b3f      	ldr	r3, [pc, #252]	; (80032e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6819      	ldr	r1, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	3b01      	subs	r3, #1
 80031f8:	011b      	lsls	r3, r3, #4
 80031fa:	430b      	orrs	r3, r1
 80031fc:	4939      	ldr	r1, [pc, #228]	; (80032e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003202:	7bfb      	ldrb	r3, [r7, #15]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d167      	bne.n	80032d8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003208:	4b36      	ldr	r3, [pc, #216]	; (80032e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a35      	ldr	r2, [pc, #212]	; (80032e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800320e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003212:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003214:	f7fe fa70 	bl	80016f8 <HAL_GetTick>
 8003218:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800321a:	e009      	b.n	8003230 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800321c:	f7fe fa6c 	bl	80016f8 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b02      	cmp	r3, #2
 8003228:	d902      	bls.n	8003230 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	73fb      	strb	r3, [r7, #15]
        break;
 800322e:	e005      	b.n	800323c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003230:	4b2c      	ldr	r3, [pc, #176]	; (80032e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d1ef      	bne.n	800321c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800323c:	7bfb      	ldrb	r3, [r7, #15]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d14a      	bne.n	80032d8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d111      	bne.n	800326c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003248:	4b26      	ldr	r3, [pc, #152]	; (80032e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800324a:	695b      	ldr	r3, [r3, #20]
 800324c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003250:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	6892      	ldr	r2, [r2, #8]
 8003258:	0211      	lsls	r1, r2, #8
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	68d2      	ldr	r2, [r2, #12]
 800325e:	0912      	lsrs	r2, r2, #4
 8003260:	0452      	lsls	r2, r2, #17
 8003262:	430a      	orrs	r2, r1
 8003264:	491f      	ldr	r1, [pc, #124]	; (80032e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003266:	4313      	orrs	r3, r2
 8003268:	614b      	str	r3, [r1, #20]
 800326a:	e011      	b.n	8003290 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800326c:	4b1d      	ldr	r3, [pc, #116]	; (80032e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800326e:	695b      	ldr	r3, [r3, #20]
 8003270:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003274:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	6892      	ldr	r2, [r2, #8]
 800327c:	0211      	lsls	r1, r2, #8
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	6912      	ldr	r2, [r2, #16]
 8003282:	0852      	lsrs	r2, r2, #1
 8003284:	3a01      	subs	r2, #1
 8003286:	0652      	lsls	r2, r2, #25
 8003288:	430a      	orrs	r2, r1
 800328a:	4916      	ldr	r1, [pc, #88]	; (80032e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800328c:	4313      	orrs	r3, r2
 800328e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003290:	4b14      	ldr	r3, [pc, #80]	; (80032e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a13      	ldr	r2, [pc, #76]	; (80032e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003296:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800329a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800329c:	f7fe fa2c 	bl	80016f8 <HAL_GetTick>
 80032a0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80032a2:	e009      	b.n	80032b8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80032a4:	f7fe fa28 	bl	80016f8 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d902      	bls.n	80032b8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	73fb      	strb	r3, [r7, #15]
          break;
 80032b6:	e005      	b.n	80032c4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80032b8:	4b0a      	ldr	r3, [pc, #40]	; (80032e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d0ef      	beq.n	80032a4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80032c4:	7bfb      	ldrb	r3, [r7, #15]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d106      	bne.n	80032d8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80032ca:	4b06      	ldr	r3, [pc, #24]	; (80032e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032cc:	695a      	ldr	r2, [r3, #20]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	695b      	ldr	r3, [r3, #20]
 80032d2:	4904      	ldr	r1, [pc, #16]	; (80032e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80032d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3710      	adds	r7, #16
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	40021000 	.word	0x40021000

080032e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d101      	bne.n	80032fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e095      	b.n	8003426 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d108      	bne.n	8003314 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800330a:	d009      	beq.n	8003320 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	61da      	str	r2, [r3, #28]
 8003312:	e005      	b.n	8003320 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b00      	cmp	r3, #0
 8003330:	d106      	bne.n	8003340 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f7fe f832 	bl	80013a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2202      	movs	r2, #2
 8003344:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003356:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003360:	d902      	bls.n	8003368 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003362:	2300      	movs	r3, #0
 8003364:	60fb      	str	r3, [r7, #12]
 8003366:	e002      	b.n	800336e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003368:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800336c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003376:	d007      	beq.n	8003388 <HAL_SPI_Init+0xa0>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003380:	d002      	beq.n	8003388 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003398:	431a      	orrs	r2, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	431a      	orrs	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	695b      	ldr	r3, [r3, #20]
 80033a8:	f003 0301 	and.w	r3, r3, #1
 80033ac:	431a      	orrs	r2, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033b6:	431a      	orrs	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	69db      	ldr	r3, [r3, #28]
 80033bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033c0:	431a      	orrs	r2, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a1b      	ldr	r3, [r3, #32]
 80033c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ca:	ea42 0103 	orr.w	r1, r2, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	430a      	orrs	r2, r1
 80033dc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	0c1b      	lsrs	r3, r3, #16
 80033e4:	f003 0204 	and.w	r2, r3, #4
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ec:	f003 0310 	and.w	r3, r3, #16
 80033f0:	431a      	orrs	r2, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033f6:	f003 0308 	and.w	r3, r3, #8
 80033fa:	431a      	orrs	r2, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003404:	ea42 0103 	orr.w	r1, r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	430a      	orrs	r2, r1
 8003414:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3710      	adds	r7, #16
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800342e:	b580      	push	{r7, lr}
 8003430:	b088      	sub	sp, #32
 8003432:	af00      	add	r7, sp, #0
 8003434:	60f8      	str	r0, [r7, #12]
 8003436:	60b9      	str	r1, [r7, #8]
 8003438:	603b      	str	r3, [r7, #0]
 800343a:	4613      	mov	r3, r2
 800343c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800343e:	2300      	movs	r3, #0
 8003440:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003448:	2b01      	cmp	r3, #1
 800344a:	d101      	bne.n	8003450 <HAL_SPI_Transmit+0x22>
 800344c:	2302      	movs	r3, #2
 800344e:	e15f      	b.n	8003710 <HAL_SPI_Transmit+0x2e2>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003458:	f7fe f94e 	bl	80016f8 <HAL_GetTick>
 800345c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800345e:	88fb      	ldrh	r3, [r7, #6]
 8003460:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b01      	cmp	r3, #1
 800346c:	d002      	beq.n	8003474 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800346e:	2302      	movs	r3, #2
 8003470:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003472:	e148      	b.n	8003706 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d002      	beq.n	8003480 <HAL_SPI_Transmit+0x52>
 800347a:	88fb      	ldrh	r3, [r7, #6]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d102      	bne.n	8003486 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003484:	e13f      	b.n	8003706 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2203      	movs	r2, #3
 800348a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2200      	movs	r2, #0
 8003492:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	68ba      	ldr	r2, [r7, #8]
 8003498:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	88fa      	ldrh	r2, [r7, #6]
 800349e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	88fa      	ldrh	r2, [r7, #6]
 80034a4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2200      	movs	r2, #0
 80034c0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034d0:	d10f      	bne.n	80034f2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034e0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034f0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034fc:	2b40      	cmp	r3, #64	; 0x40
 80034fe:	d007      	beq.n	8003510 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800350e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003518:	d94f      	bls.n	80035ba <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d002      	beq.n	8003528 <HAL_SPI_Transmit+0xfa>
 8003522:	8afb      	ldrh	r3, [r7, #22]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d142      	bne.n	80035ae <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800352c:	881a      	ldrh	r2, [r3, #0]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003538:	1c9a      	adds	r2, r3, #2
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003542:	b29b      	uxth	r3, r3
 8003544:	3b01      	subs	r3, #1
 8003546:	b29a      	uxth	r2, r3
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800354c:	e02f      	b.n	80035ae <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f003 0302 	and.w	r3, r3, #2
 8003558:	2b02      	cmp	r3, #2
 800355a:	d112      	bne.n	8003582 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003560:	881a      	ldrh	r2, [r3, #0]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800356c:	1c9a      	adds	r2, r3, #2
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003576:	b29b      	uxth	r3, r3
 8003578:	3b01      	subs	r3, #1
 800357a:	b29a      	uxth	r2, r3
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003580:	e015      	b.n	80035ae <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003582:	f7fe f8b9 	bl	80016f8 <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	683a      	ldr	r2, [r7, #0]
 800358e:	429a      	cmp	r2, r3
 8003590:	d803      	bhi.n	800359a <HAL_SPI_Transmit+0x16c>
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003598:	d102      	bne.n	80035a0 <HAL_SPI_Transmit+0x172>
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d106      	bne.n	80035ae <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80035ac:	e0ab      	b.n	8003706 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d1ca      	bne.n	800354e <HAL_SPI_Transmit+0x120>
 80035b8:	e080      	b.n	80036bc <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d002      	beq.n	80035c8 <HAL_SPI_Transmit+0x19a>
 80035c2:	8afb      	ldrh	r3, [r7, #22]
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d174      	bne.n	80036b2 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d912      	bls.n	80035f8 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d6:	881a      	ldrh	r2, [r3, #0]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e2:	1c9a      	adds	r2, r3, #2
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	3b02      	subs	r3, #2
 80035f0:	b29a      	uxth	r2, r3
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80035f6:	e05c      	b.n	80036b2 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	330c      	adds	r3, #12
 8003602:	7812      	ldrb	r2, [r2, #0]
 8003604:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800360a:	1c5a      	adds	r2, r3, #1
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003614:	b29b      	uxth	r3, r3
 8003616:	3b01      	subs	r3, #1
 8003618:	b29a      	uxth	r2, r3
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800361e:	e048      	b.n	80036b2 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f003 0302 	and.w	r3, r3, #2
 800362a:	2b02      	cmp	r3, #2
 800362c:	d12b      	bne.n	8003686 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003632:	b29b      	uxth	r3, r3
 8003634:	2b01      	cmp	r3, #1
 8003636:	d912      	bls.n	800365e <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800363c:	881a      	ldrh	r2, [r3, #0]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003648:	1c9a      	adds	r2, r3, #2
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003652:	b29b      	uxth	r3, r3
 8003654:	3b02      	subs	r3, #2
 8003656:	b29a      	uxth	r2, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800365c:	e029      	b.n	80036b2 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	330c      	adds	r3, #12
 8003668:	7812      	ldrb	r2, [r2, #0]
 800366a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003670:	1c5a      	adds	r2, r3, #1
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800367a:	b29b      	uxth	r3, r3
 800367c:	3b01      	subs	r3, #1
 800367e:	b29a      	uxth	r2, r3
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003684:	e015      	b.n	80036b2 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003686:	f7fe f837 	bl	80016f8 <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	683a      	ldr	r2, [r7, #0]
 8003692:	429a      	cmp	r2, r3
 8003694:	d803      	bhi.n	800369e <HAL_SPI_Transmit+0x270>
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800369c:	d102      	bne.n	80036a4 <HAL_SPI_Transmit+0x276>
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d106      	bne.n	80036b2 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80036b0:	e029      	b.n	8003706 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1b1      	bne.n	8003620 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036bc:	69ba      	ldr	r2, [r7, #24]
 80036be:	6839      	ldr	r1, [r7, #0]
 80036c0:	68f8      	ldr	r0, [r7, #12]
 80036c2:	f000 fcf9 	bl	80040b8 <SPI_EndRxTxTransaction>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d002      	beq.n	80036d2 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2220      	movs	r2, #32
 80036d0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10a      	bne.n	80036f0 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80036da:	2300      	movs	r3, #0
 80036dc:	613b      	str	r3, [r7, #16]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	613b      	str	r3, [r7, #16]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	613b      	str	r3, [r7, #16]
 80036ee:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d002      	beq.n	80036fe <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	77fb      	strb	r3, [r7, #31]
 80036fc:	e003      	b.n	8003706 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2201      	movs	r2, #1
 8003702:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800370e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003710:	4618      	mov	r0, r3
 8003712:	3720      	adds	r7, #32
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b088      	sub	sp, #32
 800371c:	af02      	add	r7, sp, #8
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	603b      	str	r3, [r7, #0]
 8003724:	4613      	mov	r3, r2
 8003726:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003728:	2300      	movs	r3, #0
 800372a:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003732:	b2db      	uxtb	r3, r3
 8003734:	2b01      	cmp	r3, #1
 8003736:	d002      	beq.n	800373e <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8003738:	2302      	movs	r3, #2
 800373a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800373c:	e11a      	b.n	8003974 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003746:	d112      	bne.n	800376e <HAL_SPI_Receive+0x56>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d10e      	bne.n	800376e <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2204      	movs	r2, #4
 8003754:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003758:	88fa      	ldrh	r2, [r7, #6]
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	9300      	str	r3, [sp, #0]
 800375e:	4613      	mov	r3, r2
 8003760:	68ba      	ldr	r2, [r7, #8]
 8003762:	68b9      	ldr	r1, [r7, #8]
 8003764:	68f8      	ldr	r0, [r7, #12]
 8003766:	f000 f90e 	bl	8003986 <HAL_SPI_TransmitReceive>
 800376a:	4603      	mov	r3, r0
 800376c:	e107      	b.n	800397e <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003774:	2b01      	cmp	r3, #1
 8003776:	d101      	bne.n	800377c <HAL_SPI_Receive+0x64>
 8003778:	2302      	movs	r3, #2
 800377a:	e100      	b.n	800397e <HAL_SPI_Receive+0x266>
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003784:	f7fd ffb8 	bl	80016f8 <HAL_GetTick>
 8003788:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d002      	beq.n	8003796 <HAL_SPI_Receive+0x7e>
 8003790:	88fb      	ldrh	r3, [r7, #6]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d102      	bne.n	800379c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	75fb      	strb	r3, [r7, #23]
    goto error;
 800379a:	e0eb      	b.n	8003974 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2204      	movs	r2, #4
 80037a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2200      	movs	r2, #0
 80037a8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	68ba      	ldr	r2, [r7, #8]
 80037ae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	88fa      	ldrh	r2, [r7, #6]
 80037b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	88fa      	ldrh	r2, [r7, #6]
 80037bc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2200      	movs	r2, #0
 80037c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2200      	movs	r2, #0
 80037ca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2200      	movs	r2, #0
 80037d0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2200      	movs	r2, #0
 80037d6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80037e6:	d908      	bls.n	80037fa <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	685a      	ldr	r2, [r3, #4]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80037f6:	605a      	str	r2, [r3, #4]
 80037f8:	e007      	b.n	800380a <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	685a      	ldr	r2, [r3, #4]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003808:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003812:	d10f      	bne.n	8003834 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003822:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003832:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800383e:	2b40      	cmp	r3, #64	; 0x40
 8003840:	d007      	beq.n	8003852 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003850:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800385a:	d86f      	bhi.n	800393c <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800385c:	e034      	b.n	80038c8 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f003 0301 	and.w	r3, r3, #1
 8003868:	2b01      	cmp	r3, #1
 800386a:	d117      	bne.n	800389c <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f103 020c 	add.w	r2, r3, #12
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003878:	7812      	ldrb	r2, [r2, #0]
 800387a:	b2d2      	uxtb	r2, r2
 800387c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003882:	1c5a      	adds	r2, r3, #1
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800388e:	b29b      	uxth	r3, r3
 8003890:	3b01      	subs	r3, #1
 8003892:	b29a      	uxth	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800389a:	e015      	b.n	80038c8 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800389c:	f7fd ff2c 	bl	80016f8 <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	683a      	ldr	r2, [r7, #0]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d803      	bhi.n	80038b4 <HAL_SPI_Receive+0x19c>
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038b2:	d102      	bne.n	80038ba <HAL_SPI_Receive+0x1a2>
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d106      	bne.n	80038c8 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2201      	movs	r2, #1
 80038c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80038c6:	e055      	b.n	8003974 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d1c4      	bne.n	800385e <HAL_SPI_Receive+0x146>
 80038d4:	e038      	b.n	8003948 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f003 0301 	and.w	r3, r3, #1
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d115      	bne.n	8003910 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68da      	ldr	r2, [r3, #12]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ee:	b292      	uxth	r2, r2
 80038f0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f6:	1c9a      	adds	r2, r3, #2
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003902:	b29b      	uxth	r3, r3
 8003904:	3b01      	subs	r3, #1
 8003906:	b29a      	uxth	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800390e:	e015      	b.n	800393c <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003910:	f7fd fef2 	bl	80016f8 <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	683a      	ldr	r2, [r7, #0]
 800391c:	429a      	cmp	r2, r3
 800391e:	d803      	bhi.n	8003928 <HAL_SPI_Receive+0x210>
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003926:	d102      	bne.n	800392e <HAL_SPI_Receive+0x216>
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d106      	bne.n	800393c <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2201      	movs	r2, #1
 8003936:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800393a:	e01b      	b.n	8003974 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003942:	b29b      	uxth	r3, r3
 8003944:	2b00      	cmp	r3, #0
 8003946:	d1c6      	bne.n	80038d6 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003948:	693a      	ldr	r2, [r7, #16]
 800394a:	6839      	ldr	r1, [r7, #0]
 800394c:	68f8      	ldr	r0, [r7, #12]
 800394e:	f000 fb5b 	bl	8004008 <SPI_EndRxTransaction>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d002      	beq.n	800395e <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2220      	movs	r2, #32
 800395c:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003962:	2b00      	cmp	r3, #0
 8003964:	d002      	beq.n	800396c <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	75fb      	strb	r3, [r7, #23]
 800396a:	e003      	b.n	8003974 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800397c:	7dfb      	ldrb	r3, [r7, #23]
}
 800397e:	4618      	mov	r0, r3
 8003980:	3718      	adds	r7, #24
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}

08003986 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003986:	b580      	push	{r7, lr}
 8003988:	b08a      	sub	sp, #40	; 0x28
 800398a:	af00      	add	r7, sp, #0
 800398c:	60f8      	str	r0, [r7, #12]
 800398e:	60b9      	str	r1, [r7, #8]
 8003990:	607a      	str	r2, [r7, #4]
 8003992:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003994:	2301      	movs	r3, #1
 8003996:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003998:	2300      	movs	r3, #0
 800399a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d101      	bne.n	80039ac <HAL_SPI_TransmitReceive+0x26>
 80039a8:	2302      	movs	r3, #2
 80039aa:	e20a      	b.n	8003dc2 <HAL_SPI_TransmitReceive+0x43c>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039b4:	f7fd fea0 	bl	80016f8 <HAL_GetTick>
 80039b8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80039c0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80039c8:	887b      	ldrh	r3, [r7, #2]
 80039ca:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80039cc:	887b      	ldrh	r3, [r7, #2]
 80039ce:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80039d0:	7efb      	ldrb	r3, [r7, #27]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d00e      	beq.n	80039f4 <HAL_SPI_TransmitReceive+0x6e>
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039dc:	d106      	bne.n	80039ec <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d102      	bne.n	80039ec <HAL_SPI_TransmitReceive+0x66>
 80039e6:	7efb      	ldrb	r3, [r7, #27]
 80039e8:	2b04      	cmp	r3, #4
 80039ea:	d003      	beq.n	80039f4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80039ec:	2302      	movs	r3, #2
 80039ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80039f2:	e1e0      	b.n	8003db6 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d005      	beq.n	8003a06 <HAL_SPI_TransmitReceive+0x80>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d002      	beq.n	8003a06 <HAL_SPI_TransmitReceive+0x80>
 8003a00:	887b      	ldrh	r3, [r7, #2]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d103      	bne.n	8003a0e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003a0c:	e1d3      	b.n	8003db6 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	2b04      	cmp	r3, #4
 8003a18:	d003      	beq.n	8003a22 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2205      	movs	r2, #5
 8003a1e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2200      	movs	r2, #0
 8003a26:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	887a      	ldrh	r2, [r7, #2]
 8003a32:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	887a      	ldrh	r2, [r7, #2]
 8003a3a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	68ba      	ldr	r2, [r7, #8]
 8003a42:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	887a      	ldrh	r2, [r7, #2]
 8003a48:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	887a      	ldrh	r2, [r7, #2]
 8003a4e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2200      	movs	r2, #0
 8003a54:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a64:	d802      	bhi.n	8003a6c <HAL_SPI_TransmitReceive+0xe6>
 8003a66:	8a3b      	ldrh	r3, [r7, #16]
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d908      	bls.n	8003a7e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	685a      	ldr	r2, [r3, #4]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a7a:	605a      	str	r2, [r3, #4]
 8003a7c:	e007      	b.n	8003a8e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	685a      	ldr	r2, [r3, #4]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003a8c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a98:	2b40      	cmp	r3, #64	; 0x40
 8003a9a:	d007      	beq.n	8003aac <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003aaa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ab4:	f240 8081 	bls.w	8003bba <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d002      	beq.n	8003ac6 <HAL_SPI_TransmitReceive+0x140>
 8003ac0:	8a7b      	ldrh	r3, [r7, #18]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d16d      	bne.n	8003ba2 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aca:	881a      	ldrh	r2, [r3, #0]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad6:	1c9a      	adds	r2, r3, #2
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	3b01      	subs	r3, #1
 8003ae4:	b29a      	uxth	r2, r3
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003aea:	e05a      	b.n	8003ba2 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d11b      	bne.n	8003b32 <HAL_SPI_TransmitReceive+0x1ac>
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d016      	beq.n	8003b32 <HAL_SPI_TransmitReceive+0x1ac>
 8003b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d113      	bne.n	8003b32 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b0e:	881a      	ldrh	r2, [r3, #0]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b1a:	1c9a      	adds	r2, r3, #2
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	3b01      	subs	r3, #1
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f003 0301 	and.w	r3, r3, #1
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d11c      	bne.n	8003b7a <HAL_SPI_TransmitReceive+0x1f4>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d016      	beq.n	8003b7a <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68da      	ldr	r2, [r3, #12]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b56:	b292      	uxth	r2, r2
 8003b58:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5e:	1c9a      	adds	r2, r3, #2
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	3b01      	subs	r3, #1
 8003b6e:	b29a      	uxth	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b76:	2301      	movs	r3, #1
 8003b78:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003b7a:	f7fd fdbd 	bl	80016f8 <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d80b      	bhi.n	8003ba2 <HAL_SPI_TransmitReceive+0x21c>
 8003b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b90:	d007      	beq.n	8003ba2 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8003ba0:	e109      	b.n	8003db6 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d19f      	bne.n	8003aec <HAL_SPI_TransmitReceive+0x166>
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d199      	bne.n	8003aec <HAL_SPI_TransmitReceive+0x166>
 8003bb8:	e0e3      	b.n	8003d82 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d003      	beq.n	8003bca <HAL_SPI_TransmitReceive+0x244>
 8003bc2:	8a7b      	ldrh	r3, [r7, #18]
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	f040 80cf 	bne.w	8003d68 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d912      	bls.n	8003bfa <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd8:	881a      	ldrh	r2, [r3, #0]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be4:	1c9a      	adds	r2, r3, #2
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	3b02      	subs	r3, #2
 8003bf2:	b29a      	uxth	r2, r3
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003bf8:	e0b6      	b.n	8003d68 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	330c      	adds	r3, #12
 8003c04:	7812      	ldrb	r2, [r2, #0]
 8003c06:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c0c:	1c5a      	adds	r2, r3, #1
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	b29a      	uxth	r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c20:	e0a2      	b.n	8003d68 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	f003 0302 	and.w	r3, r3, #2
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d134      	bne.n	8003c9a <HAL_SPI_TransmitReceive+0x314>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d02f      	beq.n	8003c9a <HAL_SPI_TransmitReceive+0x314>
 8003c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d12c      	bne.n	8003c9a <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d912      	bls.n	8003c70 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c4e:	881a      	ldrh	r2, [r3, #0]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c5a:	1c9a      	adds	r2, r3, #2
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	3b02      	subs	r3, #2
 8003c68:	b29a      	uxth	r2, r3
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c6e:	e012      	b.n	8003c96 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	330c      	adds	r3, #12
 8003c7a:	7812      	ldrb	r2, [r2, #0]
 8003c7c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c82:	1c5a      	adds	r2, r3, #1
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c96:	2300      	movs	r3, #0
 8003c98:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	f003 0301 	and.w	r3, r3, #1
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d148      	bne.n	8003d3a <HAL_SPI_TransmitReceive+0x3b4>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d042      	beq.n	8003d3a <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d923      	bls.n	8003d08 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	68da      	ldr	r2, [r3, #12]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cca:	b292      	uxth	r2, r2
 8003ccc:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd2:	1c9a      	adds	r2, r3, #2
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	3b02      	subs	r3, #2
 8003ce2:	b29a      	uxth	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d81f      	bhi.n	8003d36 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	685a      	ldr	r2, [r3, #4]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003d04:	605a      	str	r2, [r3, #4]
 8003d06:	e016      	b.n	8003d36 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f103 020c 	add.w	r2, r3, #12
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d14:	7812      	ldrb	r2, [r2, #0]
 8003d16:	b2d2      	uxtb	r2, r2
 8003d18:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1e:	1c5a      	adds	r2, r3, #1
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	3b01      	subs	r3, #1
 8003d2e:	b29a      	uxth	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d36:	2301      	movs	r3, #1
 8003d38:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003d3a:	f7fd fcdd 	bl	80016f8 <HAL_GetTick>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d803      	bhi.n	8003d52 <HAL_SPI_TransmitReceive+0x3cc>
 8003d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d50:	d102      	bne.n	8003d58 <HAL_SPI_TransmitReceive+0x3d2>
 8003d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d107      	bne.n	8003d68 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2201      	movs	r2, #1
 8003d62:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8003d66:	e026      	b.n	8003db6 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	f47f af57 	bne.w	8003c22 <HAL_SPI_TransmitReceive+0x29c>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	f47f af50 	bne.w	8003c22 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d82:	69fa      	ldr	r2, [r7, #28]
 8003d84:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d86:	68f8      	ldr	r0, [r7, #12]
 8003d88:	f000 f996 	bl	80040b8 <SPI_EndRxTxTransaction>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d005      	beq.n	8003d9e <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2220      	movs	r2, #32
 8003d9c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d003      	beq.n	8003dae <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dac:	e003      	b.n	8003db6 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2201      	movs	r2, #1
 8003db2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003dbe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3728      	adds	r7, #40	; 0x28
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
	...

08003dcc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b088      	sub	sp, #32
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	603b      	str	r3, [r7, #0]
 8003dd8:	4613      	mov	r3, r2
 8003dda:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003ddc:	f7fd fc8c 	bl	80016f8 <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de4:	1a9b      	subs	r3, r3, r2
 8003de6:	683a      	ldr	r2, [r7, #0]
 8003de8:	4413      	add	r3, r2
 8003dea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003dec:	f7fd fc84 	bl	80016f8 <HAL_GetTick>
 8003df0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003df2:	4b39      	ldr	r3, [pc, #228]	; (8003ed8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	015b      	lsls	r3, r3, #5
 8003df8:	0d1b      	lsrs	r3, r3, #20
 8003dfa:	69fa      	ldr	r2, [r7, #28]
 8003dfc:	fb02 f303 	mul.w	r3, r2, r3
 8003e00:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e02:	e054      	b.n	8003eae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e0a:	d050      	beq.n	8003eae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e0c:	f7fd fc74 	bl	80016f8 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	69fa      	ldr	r2, [r7, #28]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d902      	bls.n	8003e22 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d13d      	bne.n	8003e9e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	685a      	ldr	r2, [r3, #4]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003e30:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e3a:	d111      	bne.n	8003e60 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e44:	d004      	beq.n	8003e50 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e4e:	d107      	bne.n	8003e60 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e5e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e68:	d10f      	bne.n	8003e8a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e78:	601a      	str	r2, [r3, #0]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e88:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e017      	b.n	8003ece <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d101      	bne.n	8003ea8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	689a      	ldr	r2, [r3, #8]
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	68ba      	ldr	r2, [r7, #8]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	bf0c      	ite	eq
 8003ebe:	2301      	moveq	r3, #1
 8003ec0:	2300      	movne	r3, #0
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	79fb      	ldrb	r3, [r7, #7]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d19b      	bne.n	8003e04 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3720      	adds	r7, #32
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	20000000 	.word	0x20000000

08003edc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b08a      	sub	sp, #40	; 0x28
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	60b9      	str	r1, [r7, #8]
 8003ee6:	607a      	str	r2, [r7, #4]
 8003ee8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003eea:	2300      	movs	r3, #0
 8003eec:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003eee:	f7fd fc03 	bl	80016f8 <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef6:	1a9b      	subs	r3, r3, r2
 8003ef8:	683a      	ldr	r2, [r7, #0]
 8003efa:	4413      	add	r3, r2
 8003efc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003efe:	f7fd fbfb 	bl	80016f8 <HAL_GetTick>
 8003f02:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	330c      	adds	r3, #12
 8003f0a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003f0c:	4b3d      	ldr	r3, [pc, #244]	; (8004004 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	4613      	mov	r3, r2
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	4413      	add	r3, r2
 8003f16:	00da      	lsls	r2, r3, #3
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	0d1b      	lsrs	r3, r3, #20
 8003f1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f1e:	fb02 f303 	mul.w	r3, r2, r3
 8003f22:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003f24:	e060      	b.n	8003fe8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003f2c:	d107      	bne.n	8003f3e <SPI_WaitFifoStateUntilTimeout+0x62>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d104      	bne.n	8003f3e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003f3c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f44:	d050      	beq.n	8003fe8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f46:	f7fd fbd7 	bl	80016f8 <HAL_GetTick>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	6a3b      	ldr	r3, [r7, #32]
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d902      	bls.n	8003f5c <SPI_WaitFifoStateUntilTimeout+0x80>
 8003f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d13d      	bne.n	8003fd8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	685a      	ldr	r2, [r3, #4]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003f6a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f74:	d111      	bne.n	8003f9a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f7e:	d004      	beq.n	8003f8a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f88:	d107      	bne.n	8003f9a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f98:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fa2:	d10f      	bne.n	8003fc4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fb2:	601a      	str	r2, [r3, #0]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fc2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	e010      	b.n	8003ffa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d101      	bne.n	8003fe2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	689a      	ldr	r2, [r3, #8]
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d196      	bne.n	8003f26 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3728      	adds	r7, #40	; 0x28
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	20000000 	.word	0x20000000

08004008 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b086      	sub	sp, #24
 800400c:	af02      	add	r7, sp, #8
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800401c:	d111      	bne.n	8004042 <SPI_EndRxTransaction+0x3a>
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004026:	d004      	beq.n	8004032 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004030:	d107      	bne.n	8004042 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004040:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	9300      	str	r3, [sp, #0]
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	2200      	movs	r2, #0
 800404a:	2180      	movs	r1, #128	; 0x80
 800404c:	68f8      	ldr	r0, [r7, #12]
 800404e:	f7ff febd 	bl	8003dcc <SPI_WaitFlagStateUntilTimeout>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d007      	beq.n	8004068 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800405c:	f043 0220 	orr.w	r2, r3, #32
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004064:	2303      	movs	r3, #3
 8004066:	e023      	b.n	80040b0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004070:	d11d      	bne.n	80040ae <SPI_EndRxTransaction+0xa6>
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800407a:	d004      	beq.n	8004086 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004084:	d113      	bne.n	80040ae <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	9300      	str	r3, [sp, #0]
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	2200      	movs	r2, #0
 800408e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004092:	68f8      	ldr	r0, [r7, #12]
 8004094:	f7ff ff22 	bl	8003edc <SPI_WaitFifoStateUntilTimeout>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d007      	beq.n	80040ae <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040a2:	f043 0220 	orr.w	r2, r3, #32
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e000      	b.n	80040b0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80040ae:	2300      	movs	r3, #0
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3710      	adds	r7, #16
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b086      	sub	sp, #24
 80040bc:	af02      	add	r7, sp, #8
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	9300      	str	r3, [sp, #0]
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80040d0:	68f8      	ldr	r0, [r7, #12]
 80040d2:	f7ff ff03 	bl	8003edc <SPI_WaitFifoStateUntilTimeout>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d007      	beq.n	80040ec <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040e0:	f043 0220 	orr.w	r2, r3, #32
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e027      	b.n	800413c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	9300      	str	r3, [sp, #0]
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	2200      	movs	r2, #0
 80040f4:	2180      	movs	r1, #128	; 0x80
 80040f6:	68f8      	ldr	r0, [r7, #12]
 80040f8:	f7ff fe68 	bl	8003dcc <SPI_WaitFlagStateUntilTimeout>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d007      	beq.n	8004112 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004106:	f043 0220 	orr.w	r2, r3, #32
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e014      	b.n	800413c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	9300      	str	r3, [sp, #0]
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	2200      	movs	r2, #0
 800411a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800411e:	68f8      	ldr	r0, [r7, #12]
 8004120:	f7ff fedc 	bl	8003edc <SPI_WaitFifoStateUntilTimeout>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d007      	beq.n	800413a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800412e:	f043 0220 	orr.w	r2, r3, #32
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e000      	b.n	800413c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800413a:	2300      	movs	r3, #0
}
 800413c:	4618      	mov	r0, r3
 800413e:	3710      	adds	r7, #16
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b082      	sub	sp, #8
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d101      	bne.n	8004156 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e040      	b.n	80041d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800415a:	2b00      	cmp	r3, #0
 800415c:	d106      	bne.n	800416c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f7fd f95e 	bl	8001428 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2224      	movs	r2, #36	; 0x24
 8004170:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f022 0201 	bic.w	r2, r2, #1
 8004180:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004186:	2b00      	cmp	r3, #0
 8004188:	d002      	beq.n	8004190 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 fb6a 	bl	8004864 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f000 f8af 	bl	80042f4 <UART_SetConfig>
 8004196:	4603      	mov	r3, r0
 8004198:	2b01      	cmp	r3, #1
 800419a:	d101      	bne.n	80041a0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e01b      	b.n	80041d8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	685a      	ldr	r2, [r3, #4]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	689a      	ldr	r2, [r3, #8]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f042 0201 	orr.w	r2, r2, #1
 80041ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f000 fbe9 	bl	80049a8 <UART_CheckIdleState>
 80041d6:	4603      	mov	r3, r0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3708      	adds	r7, #8
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b08a      	sub	sp, #40	; 0x28
 80041e4:	af02      	add	r7, sp, #8
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	603b      	str	r3, [r7, #0]
 80041ec:	4613      	mov	r3, r2
 80041ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041f4:	2b20      	cmp	r3, #32
 80041f6:	d178      	bne.n	80042ea <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d002      	beq.n	8004204 <HAL_UART_Transmit+0x24>
 80041fe:	88fb      	ldrh	r3, [r7, #6]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d101      	bne.n	8004208 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e071      	b.n	80042ec <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2200      	movs	r2, #0
 800420c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2221      	movs	r2, #33	; 0x21
 8004214:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004216:	f7fd fa6f 	bl	80016f8 <HAL_GetTick>
 800421a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	88fa      	ldrh	r2, [r7, #6]
 8004220:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	88fa      	ldrh	r2, [r7, #6]
 8004228:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004234:	d108      	bne.n	8004248 <HAL_UART_Transmit+0x68>
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d104      	bne.n	8004248 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800423e:	2300      	movs	r3, #0
 8004240:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	61bb      	str	r3, [r7, #24]
 8004246:	e003      	b.n	8004250 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800424c:	2300      	movs	r3, #0
 800424e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004250:	e030      	b.n	80042b4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	9300      	str	r3, [sp, #0]
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	2200      	movs	r2, #0
 800425a:	2180      	movs	r1, #128	; 0x80
 800425c:	68f8      	ldr	r0, [r7, #12]
 800425e:	f000 fc4b 	bl	8004af8 <UART_WaitOnFlagUntilTimeout>
 8004262:	4603      	mov	r3, r0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d004      	beq.n	8004272 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2220      	movs	r2, #32
 800426c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e03c      	b.n	80042ec <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d10b      	bne.n	8004290 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	881a      	ldrh	r2, [r3, #0]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004284:	b292      	uxth	r2, r2
 8004286:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	3302      	adds	r3, #2
 800428c:	61bb      	str	r3, [r7, #24]
 800428e:	e008      	b.n	80042a2 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	781a      	ldrb	r2, [r3, #0]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	b292      	uxth	r2, r2
 800429a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	3301      	adds	r3, #1
 80042a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	3b01      	subs	r3, #1
 80042ac:	b29a      	uxth	r2, r3
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d1c8      	bne.n	8004252 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	9300      	str	r3, [sp, #0]
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	2200      	movs	r2, #0
 80042c8:	2140      	movs	r1, #64	; 0x40
 80042ca:	68f8      	ldr	r0, [r7, #12]
 80042cc:	f000 fc14 	bl	8004af8 <UART_WaitOnFlagUntilTimeout>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d004      	beq.n	80042e0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2220      	movs	r2, #32
 80042da:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80042dc:	2303      	movs	r3, #3
 80042de:	e005      	b.n	80042ec <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2220      	movs	r2, #32
 80042e4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80042e6:	2300      	movs	r3, #0
 80042e8:	e000      	b.n	80042ec <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80042ea:	2302      	movs	r3, #2
  }
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3720      	adds	r7, #32
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042f8:	b08a      	sub	sp, #40	; 0x28
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80042fe:	2300      	movs	r3, #0
 8004300:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	689a      	ldr	r2, [r3, #8]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	431a      	orrs	r2, r3
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	431a      	orrs	r2, r3
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	69db      	ldr	r3, [r3, #28]
 8004318:	4313      	orrs	r3, r2
 800431a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	4ba4      	ldr	r3, [pc, #656]	; (80045b4 <UART_SetConfig+0x2c0>)
 8004324:	4013      	ands	r3, r2
 8004326:	68fa      	ldr	r2, [r7, #12]
 8004328:	6812      	ldr	r2, [r2, #0]
 800432a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800432c:	430b      	orrs	r3, r1
 800432e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	68da      	ldr	r2, [r3, #12]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	430a      	orrs	r2, r1
 8004344:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	699b      	ldr	r3, [r3, #24]
 800434a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a99      	ldr	r2, [pc, #612]	; (80045b8 <UART_SetConfig+0x2c4>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d004      	beq.n	8004360 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6a1b      	ldr	r3, [r3, #32]
 800435a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800435c:	4313      	orrs	r3, r2
 800435e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004370:	430a      	orrs	r2, r1
 8004372:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a90      	ldr	r2, [pc, #576]	; (80045bc <UART_SetConfig+0x2c8>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d126      	bne.n	80043cc <UART_SetConfig+0xd8>
 800437e:	4b90      	ldr	r3, [pc, #576]	; (80045c0 <UART_SetConfig+0x2cc>)
 8004380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004384:	f003 0303 	and.w	r3, r3, #3
 8004388:	2b03      	cmp	r3, #3
 800438a:	d81b      	bhi.n	80043c4 <UART_SetConfig+0xd0>
 800438c:	a201      	add	r2, pc, #4	; (adr r2, 8004394 <UART_SetConfig+0xa0>)
 800438e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004392:	bf00      	nop
 8004394:	080043a5 	.word	0x080043a5
 8004398:	080043b5 	.word	0x080043b5
 800439c:	080043ad 	.word	0x080043ad
 80043a0:	080043bd 	.word	0x080043bd
 80043a4:	2301      	movs	r3, #1
 80043a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043aa:	e116      	b.n	80045da <UART_SetConfig+0x2e6>
 80043ac:	2302      	movs	r3, #2
 80043ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043b2:	e112      	b.n	80045da <UART_SetConfig+0x2e6>
 80043b4:	2304      	movs	r3, #4
 80043b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043ba:	e10e      	b.n	80045da <UART_SetConfig+0x2e6>
 80043bc:	2308      	movs	r3, #8
 80043be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043c2:	e10a      	b.n	80045da <UART_SetConfig+0x2e6>
 80043c4:	2310      	movs	r3, #16
 80043c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043ca:	e106      	b.n	80045da <UART_SetConfig+0x2e6>
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a7c      	ldr	r2, [pc, #496]	; (80045c4 <UART_SetConfig+0x2d0>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d138      	bne.n	8004448 <UART_SetConfig+0x154>
 80043d6:	4b7a      	ldr	r3, [pc, #488]	; (80045c0 <UART_SetConfig+0x2cc>)
 80043d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043dc:	f003 030c 	and.w	r3, r3, #12
 80043e0:	2b0c      	cmp	r3, #12
 80043e2:	d82d      	bhi.n	8004440 <UART_SetConfig+0x14c>
 80043e4:	a201      	add	r2, pc, #4	; (adr r2, 80043ec <UART_SetConfig+0xf8>)
 80043e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ea:	bf00      	nop
 80043ec:	08004421 	.word	0x08004421
 80043f0:	08004441 	.word	0x08004441
 80043f4:	08004441 	.word	0x08004441
 80043f8:	08004441 	.word	0x08004441
 80043fc:	08004431 	.word	0x08004431
 8004400:	08004441 	.word	0x08004441
 8004404:	08004441 	.word	0x08004441
 8004408:	08004441 	.word	0x08004441
 800440c:	08004429 	.word	0x08004429
 8004410:	08004441 	.word	0x08004441
 8004414:	08004441 	.word	0x08004441
 8004418:	08004441 	.word	0x08004441
 800441c:	08004439 	.word	0x08004439
 8004420:	2300      	movs	r3, #0
 8004422:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004426:	e0d8      	b.n	80045da <UART_SetConfig+0x2e6>
 8004428:	2302      	movs	r3, #2
 800442a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800442e:	e0d4      	b.n	80045da <UART_SetConfig+0x2e6>
 8004430:	2304      	movs	r3, #4
 8004432:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004436:	e0d0      	b.n	80045da <UART_SetConfig+0x2e6>
 8004438:	2308      	movs	r3, #8
 800443a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800443e:	e0cc      	b.n	80045da <UART_SetConfig+0x2e6>
 8004440:	2310      	movs	r3, #16
 8004442:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004446:	e0c8      	b.n	80045da <UART_SetConfig+0x2e6>
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a5e      	ldr	r2, [pc, #376]	; (80045c8 <UART_SetConfig+0x2d4>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d125      	bne.n	800449e <UART_SetConfig+0x1aa>
 8004452:	4b5b      	ldr	r3, [pc, #364]	; (80045c0 <UART_SetConfig+0x2cc>)
 8004454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004458:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800445c:	2b30      	cmp	r3, #48	; 0x30
 800445e:	d016      	beq.n	800448e <UART_SetConfig+0x19a>
 8004460:	2b30      	cmp	r3, #48	; 0x30
 8004462:	d818      	bhi.n	8004496 <UART_SetConfig+0x1a2>
 8004464:	2b20      	cmp	r3, #32
 8004466:	d00a      	beq.n	800447e <UART_SetConfig+0x18a>
 8004468:	2b20      	cmp	r3, #32
 800446a:	d814      	bhi.n	8004496 <UART_SetConfig+0x1a2>
 800446c:	2b00      	cmp	r3, #0
 800446e:	d002      	beq.n	8004476 <UART_SetConfig+0x182>
 8004470:	2b10      	cmp	r3, #16
 8004472:	d008      	beq.n	8004486 <UART_SetConfig+0x192>
 8004474:	e00f      	b.n	8004496 <UART_SetConfig+0x1a2>
 8004476:	2300      	movs	r3, #0
 8004478:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800447c:	e0ad      	b.n	80045da <UART_SetConfig+0x2e6>
 800447e:	2302      	movs	r3, #2
 8004480:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004484:	e0a9      	b.n	80045da <UART_SetConfig+0x2e6>
 8004486:	2304      	movs	r3, #4
 8004488:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800448c:	e0a5      	b.n	80045da <UART_SetConfig+0x2e6>
 800448e:	2308      	movs	r3, #8
 8004490:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004494:	e0a1      	b.n	80045da <UART_SetConfig+0x2e6>
 8004496:	2310      	movs	r3, #16
 8004498:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800449c:	e09d      	b.n	80045da <UART_SetConfig+0x2e6>
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a4a      	ldr	r2, [pc, #296]	; (80045cc <UART_SetConfig+0x2d8>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d125      	bne.n	80044f4 <UART_SetConfig+0x200>
 80044a8:	4b45      	ldr	r3, [pc, #276]	; (80045c0 <UART_SetConfig+0x2cc>)
 80044aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80044b2:	2bc0      	cmp	r3, #192	; 0xc0
 80044b4:	d016      	beq.n	80044e4 <UART_SetConfig+0x1f0>
 80044b6:	2bc0      	cmp	r3, #192	; 0xc0
 80044b8:	d818      	bhi.n	80044ec <UART_SetConfig+0x1f8>
 80044ba:	2b80      	cmp	r3, #128	; 0x80
 80044bc:	d00a      	beq.n	80044d4 <UART_SetConfig+0x1e0>
 80044be:	2b80      	cmp	r3, #128	; 0x80
 80044c0:	d814      	bhi.n	80044ec <UART_SetConfig+0x1f8>
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d002      	beq.n	80044cc <UART_SetConfig+0x1d8>
 80044c6:	2b40      	cmp	r3, #64	; 0x40
 80044c8:	d008      	beq.n	80044dc <UART_SetConfig+0x1e8>
 80044ca:	e00f      	b.n	80044ec <UART_SetConfig+0x1f8>
 80044cc:	2300      	movs	r3, #0
 80044ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044d2:	e082      	b.n	80045da <UART_SetConfig+0x2e6>
 80044d4:	2302      	movs	r3, #2
 80044d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044da:	e07e      	b.n	80045da <UART_SetConfig+0x2e6>
 80044dc:	2304      	movs	r3, #4
 80044de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044e2:	e07a      	b.n	80045da <UART_SetConfig+0x2e6>
 80044e4:	2308      	movs	r3, #8
 80044e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044ea:	e076      	b.n	80045da <UART_SetConfig+0x2e6>
 80044ec:	2310      	movs	r3, #16
 80044ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044f2:	e072      	b.n	80045da <UART_SetConfig+0x2e6>
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a35      	ldr	r2, [pc, #212]	; (80045d0 <UART_SetConfig+0x2dc>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d12a      	bne.n	8004554 <UART_SetConfig+0x260>
 80044fe:	4b30      	ldr	r3, [pc, #192]	; (80045c0 <UART_SetConfig+0x2cc>)
 8004500:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004504:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004508:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800450c:	d01a      	beq.n	8004544 <UART_SetConfig+0x250>
 800450e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004512:	d81b      	bhi.n	800454c <UART_SetConfig+0x258>
 8004514:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004518:	d00c      	beq.n	8004534 <UART_SetConfig+0x240>
 800451a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800451e:	d815      	bhi.n	800454c <UART_SetConfig+0x258>
 8004520:	2b00      	cmp	r3, #0
 8004522:	d003      	beq.n	800452c <UART_SetConfig+0x238>
 8004524:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004528:	d008      	beq.n	800453c <UART_SetConfig+0x248>
 800452a:	e00f      	b.n	800454c <UART_SetConfig+0x258>
 800452c:	2300      	movs	r3, #0
 800452e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004532:	e052      	b.n	80045da <UART_SetConfig+0x2e6>
 8004534:	2302      	movs	r3, #2
 8004536:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800453a:	e04e      	b.n	80045da <UART_SetConfig+0x2e6>
 800453c:	2304      	movs	r3, #4
 800453e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004542:	e04a      	b.n	80045da <UART_SetConfig+0x2e6>
 8004544:	2308      	movs	r3, #8
 8004546:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800454a:	e046      	b.n	80045da <UART_SetConfig+0x2e6>
 800454c:	2310      	movs	r3, #16
 800454e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004552:	e042      	b.n	80045da <UART_SetConfig+0x2e6>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a17      	ldr	r2, [pc, #92]	; (80045b8 <UART_SetConfig+0x2c4>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d13a      	bne.n	80045d4 <UART_SetConfig+0x2e0>
 800455e:	4b18      	ldr	r3, [pc, #96]	; (80045c0 <UART_SetConfig+0x2cc>)
 8004560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004564:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004568:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800456c:	d01a      	beq.n	80045a4 <UART_SetConfig+0x2b0>
 800456e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004572:	d81b      	bhi.n	80045ac <UART_SetConfig+0x2b8>
 8004574:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004578:	d00c      	beq.n	8004594 <UART_SetConfig+0x2a0>
 800457a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800457e:	d815      	bhi.n	80045ac <UART_SetConfig+0x2b8>
 8004580:	2b00      	cmp	r3, #0
 8004582:	d003      	beq.n	800458c <UART_SetConfig+0x298>
 8004584:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004588:	d008      	beq.n	800459c <UART_SetConfig+0x2a8>
 800458a:	e00f      	b.n	80045ac <UART_SetConfig+0x2b8>
 800458c:	2300      	movs	r3, #0
 800458e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004592:	e022      	b.n	80045da <UART_SetConfig+0x2e6>
 8004594:	2302      	movs	r3, #2
 8004596:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800459a:	e01e      	b.n	80045da <UART_SetConfig+0x2e6>
 800459c:	2304      	movs	r3, #4
 800459e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045a2:	e01a      	b.n	80045da <UART_SetConfig+0x2e6>
 80045a4:	2308      	movs	r3, #8
 80045a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045aa:	e016      	b.n	80045da <UART_SetConfig+0x2e6>
 80045ac:	2310      	movs	r3, #16
 80045ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045b2:	e012      	b.n	80045da <UART_SetConfig+0x2e6>
 80045b4:	efff69f3 	.word	0xefff69f3
 80045b8:	40008000 	.word	0x40008000
 80045bc:	40013800 	.word	0x40013800
 80045c0:	40021000 	.word	0x40021000
 80045c4:	40004400 	.word	0x40004400
 80045c8:	40004800 	.word	0x40004800
 80045cc:	40004c00 	.word	0x40004c00
 80045d0:	40005000 	.word	0x40005000
 80045d4:	2310      	movs	r3, #16
 80045d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a9f      	ldr	r2, [pc, #636]	; (800485c <UART_SetConfig+0x568>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d17a      	bne.n	80046da <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80045e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80045e8:	2b08      	cmp	r3, #8
 80045ea:	d824      	bhi.n	8004636 <UART_SetConfig+0x342>
 80045ec:	a201      	add	r2, pc, #4	; (adr r2, 80045f4 <UART_SetConfig+0x300>)
 80045ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f2:	bf00      	nop
 80045f4:	08004619 	.word	0x08004619
 80045f8:	08004637 	.word	0x08004637
 80045fc:	08004621 	.word	0x08004621
 8004600:	08004637 	.word	0x08004637
 8004604:	08004627 	.word	0x08004627
 8004608:	08004637 	.word	0x08004637
 800460c:	08004637 	.word	0x08004637
 8004610:	08004637 	.word	0x08004637
 8004614:	0800462f 	.word	0x0800462f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004618:	f7fe f91e 	bl	8002858 <HAL_RCC_GetPCLK1Freq>
 800461c:	61f8      	str	r0, [r7, #28]
        break;
 800461e:	e010      	b.n	8004642 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004620:	4b8f      	ldr	r3, [pc, #572]	; (8004860 <UART_SetConfig+0x56c>)
 8004622:	61fb      	str	r3, [r7, #28]
        break;
 8004624:	e00d      	b.n	8004642 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004626:	f7fe f87f 	bl	8002728 <HAL_RCC_GetSysClockFreq>
 800462a:	61f8      	str	r0, [r7, #28]
        break;
 800462c:	e009      	b.n	8004642 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800462e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004632:	61fb      	str	r3, [r7, #28]
        break;
 8004634:	e005      	b.n	8004642 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004636:	2300      	movs	r3, #0
 8004638:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004640:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	2b00      	cmp	r3, #0
 8004646:	f000 80fb 	beq.w	8004840 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	685a      	ldr	r2, [r3, #4]
 800464e:	4613      	mov	r3, r2
 8004650:	005b      	lsls	r3, r3, #1
 8004652:	4413      	add	r3, r2
 8004654:	69fa      	ldr	r2, [r7, #28]
 8004656:	429a      	cmp	r2, r3
 8004658:	d305      	bcc.n	8004666 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004660:	69fa      	ldr	r2, [r7, #28]
 8004662:	429a      	cmp	r2, r3
 8004664:	d903      	bls.n	800466e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800466c:	e0e8      	b.n	8004840 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	2200      	movs	r2, #0
 8004672:	461c      	mov	r4, r3
 8004674:	4615      	mov	r5, r2
 8004676:	f04f 0200 	mov.w	r2, #0
 800467a:	f04f 0300 	mov.w	r3, #0
 800467e:	022b      	lsls	r3, r5, #8
 8004680:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004684:	0222      	lsls	r2, r4, #8
 8004686:	68f9      	ldr	r1, [r7, #12]
 8004688:	6849      	ldr	r1, [r1, #4]
 800468a:	0849      	lsrs	r1, r1, #1
 800468c:	2000      	movs	r0, #0
 800468e:	4688      	mov	r8, r1
 8004690:	4681      	mov	r9, r0
 8004692:	eb12 0a08 	adds.w	sl, r2, r8
 8004696:	eb43 0b09 	adc.w	fp, r3, r9
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	603b      	str	r3, [r7, #0]
 80046a2:	607a      	str	r2, [r7, #4]
 80046a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046a8:	4650      	mov	r0, sl
 80046aa:	4659      	mov	r1, fp
 80046ac:	f7fb fe30 	bl	8000310 <__aeabi_uldivmod>
 80046b0:	4602      	mov	r2, r0
 80046b2:	460b      	mov	r3, r1
 80046b4:	4613      	mov	r3, r2
 80046b6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046be:	d308      	bcc.n	80046d2 <UART_SetConfig+0x3de>
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046c6:	d204      	bcs.n	80046d2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	69ba      	ldr	r2, [r7, #24]
 80046ce:	60da      	str	r2, [r3, #12]
 80046d0:	e0b6      	b.n	8004840 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80046d8:	e0b2      	b.n	8004840 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	69db      	ldr	r3, [r3, #28]
 80046de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046e2:	d15e      	bne.n	80047a2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80046e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80046e8:	2b08      	cmp	r3, #8
 80046ea:	d828      	bhi.n	800473e <UART_SetConfig+0x44a>
 80046ec:	a201      	add	r2, pc, #4	; (adr r2, 80046f4 <UART_SetConfig+0x400>)
 80046ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046f2:	bf00      	nop
 80046f4:	08004719 	.word	0x08004719
 80046f8:	08004721 	.word	0x08004721
 80046fc:	08004729 	.word	0x08004729
 8004700:	0800473f 	.word	0x0800473f
 8004704:	0800472f 	.word	0x0800472f
 8004708:	0800473f 	.word	0x0800473f
 800470c:	0800473f 	.word	0x0800473f
 8004710:	0800473f 	.word	0x0800473f
 8004714:	08004737 	.word	0x08004737
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004718:	f7fe f89e 	bl	8002858 <HAL_RCC_GetPCLK1Freq>
 800471c:	61f8      	str	r0, [r7, #28]
        break;
 800471e:	e014      	b.n	800474a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004720:	f7fe f8b0 	bl	8002884 <HAL_RCC_GetPCLK2Freq>
 8004724:	61f8      	str	r0, [r7, #28]
        break;
 8004726:	e010      	b.n	800474a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004728:	4b4d      	ldr	r3, [pc, #308]	; (8004860 <UART_SetConfig+0x56c>)
 800472a:	61fb      	str	r3, [r7, #28]
        break;
 800472c:	e00d      	b.n	800474a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800472e:	f7fd fffb 	bl	8002728 <HAL_RCC_GetSysClockFreq>
 8004732:	61f8      	str	r0, [r7, #28]
        break;
 8004734:	e009      	b.n	800474a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004736:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800473a:	61fb      	str	r3, [r7, #28]
        break;
 800473c:	e005      	b.n	800474a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800473e:	2300      	movs	r3, #0
 8004740:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004748:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d077      	beq.n	8004840 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	005a      	lsls	r2, r3, #1
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	085b      	lsrs	r3, r3, #1
 800475a:	441a      	add	r2, r3
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	fbb2 f3f3 	udiv	r3, r2, r3
 8004764:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	2b0f      	cmp	r3, #15
 800476a:	d916      	bls.n	800479a <UART_SetConfig+0x4a6>
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004772:	d212      	bcs.n	800479a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	b29b      	uxth	r3, r3
 8004778:	f023 030f 	bic.w	r3, r3, #15
 800477c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	085b      	lsrs	r3, r3, #1
 8004782:	b29b      	uxth	r3, r3
 8004784:	f003 0307 	and.w	r3, r3, #7
 8004788:	b29a      	uxth	r2, r3
 800478a:	8afb      	ldrh	r3, [r7, #22]
 800478c:	4313      	orrs	r3, r2
 800478e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	8afa      	ldrh	r2, [r7, #22]
 8004796:	60da      	str	r2, [r3, #12]
 8004798:	e052      	b.n	8004840 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80047a0:	e04e      	b.n	8004840 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80047a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80047a6:	2b08      	cmp	r3, #8
 80047a8:	d827      	bhi.n	80047fa <UART_SetConfig+0x506>
 80047aa:	a201      	add	r2, pc, #4	; (adr r2, 80047b0 <UART_SetConfig+0x4bc>)
 80047ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047b0:	080047d5 	.word	0x080047d5
 80047b4:	080047dd 	.word	0x080047dd
 80047b8:	080047e5 	.word	0x080047e5
 80047bc:	080047fb 	.word	0x080047fb
 80047c0:	080047eb 	.word	0x080047eb
 80047c4:	080047fb 	.word	0x080047fb
 80047c8:	080047fb 	.word	0x080047fb
 80047cc:	080047fb 	.word	0x080047fb
 80047d0:	080047f3 	.word	0x080047f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047d4:	f7fe f840 	bl	8002858 <HAL_RCC_GetPCLK1Freq>
 80047d8:	61f8      	str	r0, [r7, #28]
        break;
 80047da:	e014      	b.n	8004806 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047dc:	f7fe f852 	bl	8002884 <HAL_RCC_GetPCLK2Freq>
 80047e0:	61f8      	str	r0, [r7, #28]
        break;
 80047e2:	e010      	b.n	8004806 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047e4:	4b1e      	ldr	r3, [pc, #120]	; (8004860 <UART_SetConfig+0x56c>)
 80047e6:	61fb      	str	r3, [r7, #28]
        break;
 80047e8:	e00d      	b.n	8004806 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047ea:	f7fd ff9d 	bl	8002728 <HAL_RCC_GetSysClockFreq>
 80047ee:	61f8      	str	r0, [r7, #28]
        break;
 80047f0:	e009      	b.n	8004806 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047f6:	61fb      	str	r3, [r7, #28]
        break;
 80047f8:	e005      	b.n	8004806 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80047fa:	2300      	movs	r3, #0
 80047fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004804:	bf00      	nop
    }

    if (pclk != 0U)
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d019      	beq.n	8004840 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	085a      	lsrs	r2, r3, #1
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	441a      	add	r2, r3
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	fbb2 f3f3 	udiv	r3, r2, r3
 800481e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004820:	69bb      	ldr	r3, [r7, #24]
 8004822:	2b0f      	cmp	r3, #15
 8004824:	d909      	bls.n	800483a <UART_SetConfig+0x546>
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800482c:	d205      	bcs.n	800483a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800482e:	69bb      	ldr	r3, [r7, #24]
 8004830:	b29a      	uxth	r2, r3
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	60da      	str	r2, [r3, #12]
 8004838:	e002      	b.n	8004840 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2200      	movs	r2, #0
 8004844:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2200      	movs	r2, #0
 800484a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800484c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004850:	4618      	mov	r0, r3
 8004852:	3728      	adds	r7, #40	; 0x28
 8004854:	46bd      	mov	sp, r7
 8004856:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800485a:	bf00      	nop
 800485c:	40008000 	.word	0x40008000
 8004860:	00f42400 	.word	0x00f42400

08004864 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004870:	f003 0308 	and.w	r3, r3, #8
 8004874:	2b00      	cmp	r3, #0
 8004876:	d00a      	beq.n	800488e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	430a      	orrs	r2, r1
 800488c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004892:	f003 0301 	and.w	r3, r3, #1
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00a      	beq.n	80048b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	430a      	orrs	r2, r1
 80048ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b4:	f003 0302 	and.w	r3, r3, #2
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d00a      	beq.n	80048d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	430a      	orrs	r2, r1
 80048d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d6:	f003 0304 	and.w	r3, r3, #4
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d00a      	beq.n	80048f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	430a      	orrs	r2, r1
 80048f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f8:	f003 0310 	and.w	r3, r3, #16
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d00a      	beq.n	8004916 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	430a      	orrs	r2, r1
 8004914:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491a:	f003 0320 	and.w	r3, r3, #32
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00a      	beq.n	8004938 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	430a      	orrs	r2, r1
 8004936:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004940:	2b00      	cmp	r3, #0
 8004942:	d01a      	beq.n	800497a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	430a      	orrs	r2, r1
 8004958:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004962:	d10a      	bne.n	800497a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	430a      	orrs	r2, r1
 8004978:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00a      	beq.n	800499c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	430a      	orrs	r2, r1
 800499a:	605a      	str	r2, [r3, #4]
  }
}
 800499c:	bf00      	nop
 800499e:	370c      	adds	r7, #12
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b098      	sub	sp, #96	; 0x60
 80049ac:	af02      	add	r7, sp, #8
 80049ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80049b8:	f7fc fe9e 	bl	80016f8 <HAL_GetTick>
 80049bc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0308 	and.w	r3, r3, #8
 80049c8:	2b08      	cmp	r3, #8
 80049ca:	d12e      	bne.n	8004a2a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80049d0:	9300      	str	r3, [sp, #0]
 80049d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049d4:	2200      	movs	r2, #0
 80049d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 f88c 	bl	8004af8 <UART_WaitOnFlagUntilTimeout>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d021      	beq.n	8004a2a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ee:	e853 3f00 	ldrex	r3, [r3]
 80049f2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80049f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049fa:	653b      	str	r3, [r7, #80]	; 0x50
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	461a      	mov	r2, r3
 8004a02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a04:	647b      	str	r3, [r7, #68]	; 0x44
 8004a06:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a08:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004a0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a0c:	e841 2300 	strex	r3, r2, [r1]
 8004a10:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004a12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d1e6      	bne.n	80049e6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2220      	movs	r2, #32
 8004a1c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e062      	b.n	8004af0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0304 	and.w	r3, r3, #4
 8004a34:	2b04      	cmp	r3, #4
 8004a36:	d149      	bne.n	8004acc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a3c:	9300      	str	r3, [sp, #0]
 8004a3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a40:	2200      	movs	r2, #0
 8004a42:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 f856 	bl	8004af8 <UART_WaitOnFlagUntilTimeout>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d03c      	beq.n	8004acc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5a:	e853 3f00 	ldrex	r3, [r3]
 8004a5e:	623b      	str	r3, [r7, #32]
   return(result);
 8004a60:	6a3b      	ldr	r3, [r7, #32]
 8004a62:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a70:	633b      	str	r3, [r7, #48]	; 0x30
 8004a72:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a78:	e841 2300 	strex	r3, r2, [r1]
 8004a7c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d1e6      	bne.n	8004a52 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	3308      	adds	r3, #8
 8004a8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	e853 3f00 	ldrex	r3, [r3]
 8004a92:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f023 0301 	bic.w	r3, r3, #1
 8004a9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	3308      	adds	r3, #8
 8004aa2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004aa4:	61fa      	str	r2, [r7, #28]
 8004aa6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa8:	69b9      	ldr	r1, [r7, #24]
 8004aaa:	69fa      	ldr	r2, [r7, #28]
 8004aac:	e841 2300 	strex	r3, r2, [r1]
 8004ab0:	617b      	str	r3, [r7, #20]
   return(result);
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d1e5      	bne.n	8004a84 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2220      	movs	r2, #32
 8004abc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	e011      	b.n	8004af0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2220      	movs	r2, #32
 8004ad0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2220      	movs	r2, #32
 8004ad6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3758      	adds	r7, #88	; 0x58
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b084      	sub	sp, #16
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	603b      	str	r3, [r7, #0]
 8004b04:	4613      	mov	r3, r2
 8004b06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b08:	e049      	b.n	8004b9e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b0a:	69bb      	ldr	r3, [r7, #24]
 8004b0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b10:	d045      	beq.n	8004b9e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b12:	f7fc fdf1 	bl	80016f8 <HAL_GetTick>
 8004b16:	4602      	mov	r2, r0
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	69ba      	ldr	r2, [r7, #24]
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d302      	bcc.n	8004b28 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d101      	bne.n	8004b2c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	e048      	b.n	8004bbe <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0304 	and.w	r3, r3, #4
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d031      	beq.n	8004b9e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	69db      	ldr	r3, [r3, #28]
 8004b40:	f003 0308 	and.w	r3, r3, #8
 8004b44:	2b08      	cmp	r3, #8
 8004b46:	d110      	bne.n	8004b6a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2208      	movs	r2, #8
 8004b4e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b50:	68f8      	ldr	r0, [r7, #12]
 8004b52:	f000 f838 	bl	8004bc6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2208      	movs	r2, #8
 8004b5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e029      	b.n	8004bbe <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	69db      	ldr	r3, [r3, #28]
 8004b70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b78:	d111      	bne.n	8004b9e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b82:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b84:	68f8      	ldr	r0, [r7, #12]
 8004b86:	f000 f81e 	bl	8004bc6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2220      	movs	r2, #32
 8004b8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	e00f      	b.n	8004bbe <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	69da      	ldr	r2, [r3, #28]
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	68ba      	ldr	r2, [r7, #8]
 8004baa:	429a      	cmp	r2, r3
 8004bac:	bf0c      	ite	eq
 8004bae:	2301      	moveq	r3, #1
 8004bb0:	2300      	movne	r3, #0
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	79fb      	ldrb	r3, [r7, #7]
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d0a6      	beq.n	8004b0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bbc:	2300      	movs	r3, #0
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3710      	adds	r7, #16
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}

08004bc6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004bc6:	b480      	push	{r7}
 8004bc8:	b095      	sub	sp, #84	; 0x54
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bd6:	e853 3f00 	ldrex	r3, [r3]
 8004bda:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bde:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004be2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	461a      	mov	r2, r3
 8004bea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bec:	643b      	str	r3, [r7, #64]	; 0x40
 8004bee:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004bf2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004bf4:	e841 2300 	strex	r3, r2, [r1]
 8004bf8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d1e6      	bne.n	8004bce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	3308      	adds	r3, #8
 8004c06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c08:	6a3b      	ldr	r3, [r7, #32]
 8004c0a:	e853 3f00 	ldrex	r3, [r3]
 8004c0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c10:	69fb      	ldr	r3, [r7, #28]
 8004c12:	f023 0301 	bic.w	r3, r3, #1
 8004c16:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	3308      	adds	r3, #8
 8004c1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c20:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c28:	e841 2300 	strex	r3, r2, [r1]
 8004c2c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d1e5      	bne.n	8004c00 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d118      	bne.n	8004c6e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	e853 3f00 	ldrex	r3, [r3]
 8004c48:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	f023 0310 	bic.w	r3, r3, #16
 8004c50:	647b      	str	r3, [r7, #68]	; 0x44
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	461a      	mov	r2, r3
 8004c58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c5a:	61bb      	str	r3, [r7, #24]
 8004c5c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c5e:	6979      	ldr	r1, [r7, #20]
 8004c60:	69ba      	ldr	r2, [r7, #24]
 8004c62:	e841 2300 	strex	r3, r2, [r1]
 8004c66:	613b      	str	r3, [r7, #16]
   return(result);
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d1e6      	bne.n	8004c3c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2220      	movs	r2, #32
 8004c72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004c82:	bf00      	nop
 8004c84:	3754      	adds	r7, #84	; 0x54
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr
	...

08004c90 <siprintf>:
 8004c90:	b40e      	push	{r1, r2, r3}
 8004c92:	b500      	push	{lr}
 8004c94:	b09c      	sub	sp, #112	; 0x70
 8004c96:	ab1d      	add	r3, sp, #116	; 0x74
 8004c98:	9002      	str	r0, [sp, #8]
 8004c9a:	9006      	str	r0, [sp, #24]
 8004c9c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004ca0:	4809      	ldr	r0, [pc, #36]	; (8004cc8 <siprintf+0x38>)
 8004ca2:	9107      	str	r1, [sp, #28]
 8004ca4:	9104      	str	r1, [sp, #16]
 8004ca6:	4909      	ldr	r1, [pc, #36]	; (8004ccc <siprintf+0x3c>)
 8004ca8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004cac:	9105      	str	r1, [sp, #20]
 8004cae:	6800      	ldr	r0, [r0, #0]
 8004cb0:	9301      	str	r3, [sp, #4]
 8004cb2:	a902      	add	r1, sp, #8
 8004cb4:	f000 f89a 	bl	8004dec <_svfiprintf_r>
 8004cb8:	9b02      	ldr	r3, [sp, #8]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	701a      	strb	r2, [r3, #0]
 8004cbe:	b01c      	add	sp, #112	; 0x70
 8004cc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004cc4:	b003      	add	sp, #12
 8004cc6:	4770      	bx	lr
 8004cc8:	20000058 	.word	0x20000058
 8004ccc:	ffff0208 	.word	0xffff0208

08004cd0 <memset>:
 8004cd0:	4402      	add	r2, r0
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d100      	bne.n	8004cda <memset+0xa>
 8004cd8:	4770      	bx	lr
 8004cda:	f803 1b01 	strb.w	r1, [r3], #1
 8004cde:	e7f9      	b.n	8004cd4 <memset+0x4>

08004ce0 <__errno>:
 8004ce0:	4b01      	ldr	r3, [pc, #4]	; (8004ce8 <__errno+0x8>)
 8004ce2:	6818      	ldr	r0, [r3, #0]
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop
 8004ce8:	20000058 	.word	0x20000058

08004cec <__libc_init_array>:
 8004cec:	b570      	push	{r4, r5, r6, lr}
 8004cee:	4d0d      	ldr	r5, [pc, #52]	; (8004d24 <__libc_init_array+0x38>)
 8004cf0:	4c0d      	ldr	r4, [pc, #52]	; (8004d28 <__libc_init_array+0x3c>)
 8004cf2:	1b64      	subs	r4, r4, r5
 8004cf4:	10a4      	asrs	r4, r4, #2
 8004cf6:	2600      	movs	r6, #0
 8004cf8:	42a6      	cmp	r6, r4
 8004cfa:	d109      	bne.n	8004d10 <__libc_init_array+0x24>
 8004cfc:	4d0b      	ldr	r5, [pc, #44]	; (8004d2c <__libc_init_array+0x40>)
 8004cfe:	4c0c      	ldr	r4, [pc, #48]	; (8004d30 <__libc_init_array+0x44>)
 8004d00:	f000 fc6a 	bl	80055d8 <_init>
 8004d04:	1b64      	subs	r4, r4, r5
 8004d06:	10a4      	asrs	r4, r4, #2
 8004d08:	2600      	movs	r6, #0
 8004d0a:	42a6      	cmp	r6, r4
 8004d0c:	d105      	bne.n	8004d1a <__libc_init_array+0x2e>
 8004d0e:	bd70      	pop	{r4, r5, r6, pc}
 8004d10:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d14:	4798      	blx	r3
 8004d16:	3601      	adds	r6, #1
 8004d18:	e7ee      	b.n	8004cf8 <__libc_init_array+0xc>
 8004d1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d1e:	4798      	blx	r3
 8004d20:	3601      	adds	r6, #1
 8004d22:	e7f2      	b.n	8004d0a <__libc_init_array+0x1e>
 8004d24:	08005680 	.word	0x08005680
 8004d28:	08005680 	.word	0x08005680
 8004d2c:	08005680 	.word	0x08005680
 8004d30:	08005684 	.word	0x08005684

08004d34 <__retarget_lock_acquire_recursive>:
 8004d34:	4770      	bx	lr

08004d36 <__retarget_lock_release_recursive>:
 8004d36:	4770      	bx	lr

08004d38 <__ssputs_r>:
 8004d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d3c:	688e      	ldr	r6, [r1, #8]
 8004d3e:	461f      	mov	r7, r3
 8004d40:	42be      	cmp	r6, r7
 8004d42:	680b      	ldr	r3, [r1, #0]
 8004d44:	4682      	mov	sl, r0
 8004d46:	460c      	mov	r4, r1
 8004d48:	4690      	mov	r8, r2
 8004d4a:	d82c      	bhi.n	8004da6 <__ssputs_r+0x6e>
 8004d4c:	898a      	ldrh	r2, [r1, #12]
 8004d4e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004d52:	d026      	beq.n	8004da2 <__ssputs_r+0x6a>
 8004d54:	6965      	ldr	r5, [r4, #20]
 8004d56:	6909      	ldr	r1, [r1, #16]
 8004d58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004d5c:	eba3 0901 	sub.w	r9, r3, r1
 8004d60:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004d64:	1c7b      	adds	r3, r7, #1
 8004d66:	444b      	add	r3, r9
 8004d68:	106d      	asrs	r5, r5, #1
 8004d6a:	429d      	cmp	r5, r3
 8004d6c:	bf38      	it	cc
 8004d6e:	461d      	movcc	r5, r3
 8004d70:	0553      	lsls	r3, r2, #21
 8004d72:	d527      	bpl.n	8004dc4 <__ssputs_r+0x8c>
 8004d74:	4629      	mov	r1, r5
 8004d76:	f000 f957 	bl	8005028 <_malloc_r>
 8004d7a:	4606      	mov	r6, r0
 8004d7c:	b360      	cbz	r0, 8004dd8 <__ssputs_r+0xa0>
 8004d7e:	6921      	ldr	r1, [r4, #16]
 8004d80:	464a      	mov	r2, r9
 8004d82:	f000 fbc7 	bl	8005514 <memcpy>
 8004d86:	89a3      	ldrh	r3, [r4, #12]
 8004d88:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004d8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d90:	81a3      	strh	r3, [r4, #12]
 8004d92:	6126      	str	r6, [r4, #16]
 8004d94:	6165      	str	r5, [r4, #20]
 8004d96:	444e      	add	r6, r9
 8004d98:	eba5 0509 	sub.w	r5, r5, r9
 8004d9c:	6026      	str	r6, [r4, #0]
 8004d9e:	60a5      	str	r5, [r4, #8]
 8004da0:	463e      	mov	r6, r7
 8004da2:	42be      	cmp	r6, r7
 8004da4:	d900      	bls.n	8004da8 <__ssputs_r+0x70>
 8004da6:	463e      	mov	r6, r7
 8004da8:	6820      	ldr	r0, [r4, #0]
 8004daa:	4632      	mov	r2, r6
 8004dac:	4641      	mov	r1, r8
 8004dae:	f000 fb86 	bl	80054be <memmove>
 8004db2:	68a3      	ldr	r3, [r4, #8]
 8004db4:	1b9b      	subs	r3, r3, r6
 8004db6:	60a3      	str	r3, [r4, #8]
 8004db8:	6823      	ldr	r3, [r4, #0]
 8004dba:	4433      	add	r3, r6
 8004dbc:	6023      	str	r3, [r4, #0]
 8004dbe:	2000      	movs	r0, #0
 8004dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dc4:	462a      	mov	r2, r5
 8004dc6:	f000 fb4b 	bl	8005460 <_realloc_r>
 8004dca:	4606      	mov	r6, r0
 8004dcc:	2800      	cmp	r0, #0
 8004dce:	d1e0      	bne.n	8004d92 <__ssputs_r+0x5a>
 8004dd0:	6921      	ldr	r1, [r4, #16]
 8004dd2:	4650      	mov	r0, sl
 8004dd4:	f000 fbac 	bl	8005530 <_free_r>
 8004dd8:	230c      	movs	r3, #12
 8004dda:	f8ca 3000 	str.w	r3, [sl]
 8004dde:	89a3      	ldrh	r3, [r4, #12]
 8004de0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004de4:	81a3      	strh	r3, [r4, #12]
 8004de6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004dea:	e7e9      	b.n	8004dc0 <__ssputs_r+0x88>

08004dec <_svfiprintf_r>:
 8004dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004df0:	4698      	mov	r8, r3
 8004df2:	898b      	ldrh	r3, [r1, #12]
 8004df4:	061b      	lsls	r3, r3, #24
 8004df6:	b09d      	sub	sp, #116	; 0x74
 8004df8:	4607      	mov	r7, r0
 8004dfa:	460d      	mov	r5, r1
 8004dfc:	4614      	mov	r4, r2
 8004dfe:	d50e      	bpl.n	8004e1e <_svfiprintf_r+0x32>
 8004e00:	690b      	ldr	r3, [r1, #16]
 8004e02:	b963      	cbnz	r3, 8004e1e <_svfiprintf_r+0x32>
 8004e04:	2140      	movs	r1, #64	; 0x40
 8004e06:	f000 f90f 	bl	8005028 <_malloc_r>
 8004e0a:	6028      	str	r0, [r5, #0]
 8004e0c:	6128      	str	r0, [r5, #16]
 8004e0e:	b920      	cbnz	r0, 8004e1a <_svfiprintf_r+0x2e>
 8004e10:	230c      	movs	r3, #12
 8004e12:	603b      	str	r3, [r7, #0]
 8004e14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e18:	e0d0      	b.n	8004fbc <_svfiprintf_r+0x1d0>
 8004e1a:	2340      	movs	r3, #64	; 0x40
 8004e1c:	616b      	str	r3, [r5, #20]
 8004e1e:	2300      	movs	r3, #0
 8004e20:	9309      	str	r3, [sp, #36]	; 0x24
 8004e22:	2320      	movs	r3, #32
 8004e24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e28:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e2c:	2330      	movs	r3, #48	; 0x30
 8004e2e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004fd4 <_svfiprintf_r+0x1e8>
 8004e32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e36:	f04f 0901 	mov.w	r9, #1
 8004e3a:	4623      	mov	r3, r4
 8004e3c:	469a      	mov	sl, r3
 8004e3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e42:	b10a      	cbz	r2, 8004e48 <_svfiprintf_r+0x5c>
 8004e44:	2a25      	cmp	r2, #37	; 0x25
 8004e46:	d1f9      	bne.n	8004e3c <_svfiprintf_r+0x50>
 8004e48:	ebba 0b04 	subs.w	fp, sl, r4
 8004e4c:	d00b      	beq.n	8004e66 <_svfiprintf_r+0x7a>
 8004e4e:	465b      	mov	r3, fp
 8004e50:	4622      	mov	r2, r4
 8004e52:	4629      	mov	r1, r5
 8004e54:	4638      	mov	r0, r7
 8004e56:	f7ff ff6f 	bl	8004d38 <__ssputs_r>
 8004e5a:	3001      	adds	r0, #1
 8004e5c:	f000 80a9 	beq.w	8004fb2 <_svfiprintf_r+0x1c6>
 8004e60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e62:	445a      	add	r2, fp
 8004e64:	9209      	str	r2, [sp, #36]	; 0x24
 8004e66:	f89a 3000 	ldrb.w	r3, [sl]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	f000 80a1 	beq.w	8004fb2 <_svfiprintf_r+0x1c6>
 8004e70:	2300      	movs	r3, #0
 8004e72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e7a:	f10a 0a01 	add.w	sl, sl, #1
 8004e7e:	9304      	str	r3, [sp, #16]
 8004e80:	9307      	str	r3, [sp, #28]
 8004e82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004e86:	931a      	str	r3, [sp, #104]	; 0x68
 8004e88:	4654      	mov	r4, sl
 8004e8a:	2205      	movs	r2, #5
 8004e8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e90:	4850      	ldr	r0, [pc, #320]	; (8004fd4 <_svfiprintf_r+0x1e8>)
 8004e92:	f7fb f99d 	bl	80001d0 <memchr>
 8004e96:	9a04      	ldr	r2, [sp, #16]
 8004e98:	b9d8      	cbnz	r0, 8004ed2 <_svfiprintf_r+0xe6>
 8004e9a:	06d0      	lsls	r0, r2, #27
 8004e9c:	bf44      	itt	mi
 8004e9e:	2320      	movmi	r3, #32
 8004ea0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ea4:	0711      	lsls	r1, r2, #28
 8004ea6:	bf44      	itt	mi
 8004ea8:	232b      	movmi	r3, #43	; 0x2b
 8004eaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004eae:	f89a 3000 	ldrb.w	r3, [sl]
 8004eb2:	2b2a      	cmp	r3, #42	; 0x2a
 8004eb4:	d015      	beq.n	8004ee2 <_svfiprintf_r+0xf6>
 8004eb6:	9a07      	ldr	r2, [sp, #28]
 8004eb8:	4654      	mov	r4, sl
 8004eba:	2000      	movs	r0, #0
 8004ebc:	f04f 0c0a 	mov.w	ip, #10
 8004ec0:	4621      	mov	r1, r4
 8004ec2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ec6:	3b30      	subs	r3, #48	; 0x30
 8004ec8:	2b09      	cmp	r3, #9
 8004eca:	d94d      	bls.n	8004f68 <_svfiprintf_r+0x17c>
 8004ecc:	b1b0      	cbz	r0, 8004efc <_svfiprintf_r+0x110>
 8004ece:	9207      	str	r2, [sp, #28]
 8004ed0:	e014      	b.n	8004efc <_svfiprintf_r+0x110>
 8004ed2:	eba0 0308 	sub.w	r3, r0, r8
 8004ed6:	fa09 f303 	lsl.w	r3, r9, r3
 8004eda:	4313      	orrs	r3, r2
 8004edc:	9304      	str	r3, [sp, #16]
 8004ede:	46a2      	mov	sl, r4
 8004ee0:	e7d2      	b.n	8004e88 <_svfiprintf_r+0x9c>
 8004ee2:	9b03      	ldr	r3, [sp, #12]
 8004ee4:	1d19      	adds	r1, r3, #4
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	9103      	str	r1, [sp, #12]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	bfbb      	ittet	lt
 8004eee:	425b      	neglt	r3, r3
 8004ef0:	f042 0202 	orrlt.w	r2, r2, #2
 8004ef4:	9307      	strge	r3, [sp, #28]
 8004ef6:	9307      	strlt	r3, [sp, #28]
 8004ef8:	bfb8      	it	lt
 8004efa:	9204      	strlt	r2, [sp, #16]
 8004efc:	7823      	ldrb	r3, [r4, #0]
 8004efe:	2b2e      	cmp	r3, #46	; 0x2e
 8004f00:	d10c      	bne.n	8004f1c <_svfiprintf_r+0x130>
 8004f02:	7863      	ldrb	r3, [r4, #1]
 8004f04:	2b2a      	cmp	r3, #42	; 0x2a
 8004f06:	d134      	bne.n	8004f72 <_svfiprintf_r+0x186>
 8004f08:	9b03      	ldr	r3, [sp, #12]
 8004f0a:	1d1a      	adds	r2, r3, #4
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	9203      	str	r2, [sp, #12]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	bfb8      	it	lt
 8004f14:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004f18:	3402      	adds	r4, #2
 8004f1a:	9305      	str	r3, [sp, #20]
 8004f1c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004fe4 <_svfiprintf_r+0x1f8>
 8004f20:	7821      	ldrb	r1, [r4, #0]
 8004f22:	2203      	movs	r2, #3
 8004f24:	4650      	mov	r0, sl
 8004f26:	f7fb f953 	bl	80001d0 <memchr>
 8004f2a:	b138      	cbz	r0, 8004f3c <_svfiprintf_r+0x150>
 8004f2c:	9b04      	ldr	r3, [sp, #16]
 8004f2e:	eba0 000a 	sub.w	r0, r0, sl
 8004f32:	2240      	movs	r2, #64	; 0x40
 8004f34:	4082      	lsls	r2, r0
 8004f36:	4313      	orrs	r3, r2
 8004f38:	3401      	adds	r4, #1
 8004f3a:	9304      	str	r3, [sp, #16]
 8004f3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f40:	4825      	ldr	r0, [pc, #148]	; (8004fd8 <_svfiprintf_r+0x1ec>)
 8004f42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004f46:	2206      	movs	r2, #6
 8004f48:	f7fb f942 	bl	80001d0 <memchr>
 8004f4c:	2800      	cmp	r0, #0
 8004f4e:	d038      	beq.n	8004fc2 <_svfiprintf_r+0x1d6>
 8004f50:	4b22      	ldr	r3, [pc, #136]	; (8004fdc <_svfiprintf_r+0x1f0>)
 8004f52:	bb1b      	cbnz	r3, 8004f9c <_svfiprintf_r+0x1b0>
 8004f54:	9b03      	ldr	r3, [sp, #12]
 8004f56:	3307      	adds	r3, #7
 8004f58:	f023 0307 	bic.w	r3, r3, #7
 8004f5c:	3308      	adds	r3, #8
 8004f5e:	9303      	str	r3, [sp, #12]
 8004f60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f62:	4433      	add	r3, r6
 8004f64:	9309      	str	r3, [sp, #36]	; 0x24
 8004f66:	e768      	b.n	8004e3a <_svfiprintf_r+0x4e>
 8004f68:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f6c:	460c      	mov	r4, r1
 8004f6e:	2001      	movs	r0, #1
 8004f70:	e7a6      	b.n	8004ec0 <_svfiprintf_r+0xd4>
 8004f72:	2300      	movs	r3, #0
 8004f74:	3401      	adds	r4, #1
 8004f76:	9305      	str	r3, [sp, #20]
 8004f78:	4619      	mov	r1, r3
 8004f7a:	f04f 0c0a 	mov.w	ip, #10
 8004f7e:	4620      	mov	r0, r4
 8004f80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f84:	3a30      	subs	r2, #48	; 0x30
 8004f86:	2a09      	cmp	r2, #9
 8004f88:	d903      	bls.n	8004f92 <_svfiprintf_r+0x1a6>
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d0c6      	beq.n	8004f1c <_svfiprintf_r+0x130>
 8004f8e:	9105      	str	r1, [sp, #20]
 8004f90:	e7c4      	b.n	8004f1c <_svfiprintf_r+0x130>
 8004f92:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f96:	4604      	mov	r4, r0
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e7f0      	b.n	8004f7e <_svfiprintf_r+0x192>
 8004f9c:	ab03      	add	r3, sp, #12
 8004f9e:	9300      	str	r3, [sp, #0]
 8004fa0:	462a      	mov	r2, r5
 8004fa2:	4b0f      	ldr	r3, [pc, #60]	; (8004fe0 <_svfiprintf_r+0x1f4>)
 8004fa4:	a904      	add	r1, sp, #16
 8004fa6:	4638      	mov	r0, r7
 8004fa8:	f3af 8000 	nop.w
 8004fac:	1c42      	adds	r2, r0, #1
 8004fae:	4606      	mov	r6, r0
 8004fb0:	d1d6      	bne.n	8004f60 <_svfiprintf_r+0x174>
 8004fb2:	89ab      	ldrh	r3, [r5, #12]
 8004fb4:	065b      	lsls	r3, r3, #25
 8004fb6:	f53f af2d 	bmi.w	8004e14 <_svfiprintf_r+0x28>
 8004fba:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004fbc:	b01d      	add	sp, #116	; 0x74
 8004fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fc2:	ab03      	add	r3, sp, #12
 8004fc4:	9300      	str	r3, [sp, #0]
 8004fc6:	462a      	mov	r2, r5
 8004fc8:	4b05      	ldr	r3, [pc, #20]	; (8004fe0 <_svfiprintf_r+0x1f4>)
 8004fca:	a904      	add	r1, sp, #16
 8004fcc:	4638      	mov	r0, r7
 8004fce:	f000 f919 	bl	8005204 <_printf_i>
 8004fd2:	e7eb      	b.n	8004fac <_svfiprintf_r+0x1c0>
 8004fd4:	08005644 	.word	0x08005644
 8004fd8:	0800564e 	.word	0x0800564e
 8004fdc:	00000000 	.word	0x00000000
 8004fe0:	08004d39 	.word	0x08004d39
 8004fe4:	0800564a 	.word	0x0800564a

08004fe8 <sbrk_aligned>:
 8004fe8:	b570      	push	{r4, r5, r6, lr}
 8004fea:	4e0e      	ldr	r6, [pc, #56]	; (8005024 <sbrk_aligned+0x3c>)
 8004fec:	460c      	mov	r4, r1
 8004fee:	6831      	ldr	r1, [r6, #0]
 8004ff0:	4605      	mov	r5, r0
 8004ff2:	b911      	cbnz	r1, 8004ffa <sbrk_aligned+0x12>
 8004ff4:	f000 fa7e 	bl	80054f4 <_sbrk_r>
 8004ff8:	6030      	str	r0, [r6, #0]
 8004ffa:	4621      	mov	r1, r4
 8004ffc:	4628      	mov	r0, r5
 8004ffe:	f000 fa79 	bl	80054f4 <_sbrk_r>
 8005002:	1c43      	adds	r3, r0, #1
 8005004:	d00a      	beq.n	800501c <sbrk_aligned+0x34>
 8005006:	1cc4      	adds	r4, r0, #3
 8005008:	f024 0403 	bic.w	r4, r4, #3
 800500c:	42a0      	cmp	r0, r4
 800500e:	d007      	beq.n	8005020 <sbrk_aligned+0x38>
 8005010:	1a21      	subs	r1, r4, r0
 8005012:	4628      	mov	r0, r5
 8005014:	f000 fa6e 	bl	80054f4 <_sbrk_r>
 8005018:	3001      	adds	r0, #1
 800501a:	d101      	bne.n	8005020 <sbrk_aligned+0x38>
 800501c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005020:	4620      	mov	r0, r4
 8005022:	bd70      	pop	{r4, r5, r6, pc}
 8005024:	200002ac 	.word	0x200002ac

08005028 <_malloc_r>:
 8005028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800502c:	1ccd      	adds	r5, r1, #3
 800502e:	f025 0503 	bic.w	r5, r5, #3
 8005032:	3508      	adds	r5, #8
 8005034:	2d0c      	cmp	r5, #12
 8005036:	bf38      	it	cc
 8005038:	250c      	movcc	r5, #12
 800503a:	2d00      	cmp	r5, #0
 800503c:	4607      	mov	r7, r0
 800503e:	db01      	blt.n	8005044 <_malloc_r+0x1c>
 8005040:	42a9      	cmp	r1, r5
 8005042:	d905      	bls.n	8005050 <_malloc_r+0x28>
 8005044:	230c      	movs	r3, #12
 8005046:	603b      	str	r3, [r7, #0]
 8005048:	2600      	movs	r6, #0
 800504a:	4630      	mov	r0, r6
 800504c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005050:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005124 <_malloc_r+0xfc>
 8005054:	f000 f9f8 	bl	8005448 <__malloc_lock>
 8005058:	f8d8 3000 	ldr.w	r3, [r8]
 800505c:	461c      	mov	r4, r3
 800505e:	bb5c      	cbnz	r4, 80050b8 <_malloc_r+0x90>
 8005060:	4629      	mov	r1, r5
 8005062:	4638      	mov	r0, r7
 8005064:	f7ff ffc0 	bl	8004fe8 <sbrk_aligned>
 8005068:	1c43      	adds	r3, r0, #1
 800506a:	4604      	mov	r4, r0
 800506c:	d155      	bne.n	800511a <_malloc_r+0xf2>
 800506e:	f8d8 4000 	ldr.w	r4, [r8]
 8005072:	4626      	mov	r6, r4
 8005074:	2e00      	cmp	r6, #0
 8005076:	d145      	bne.n	8005104 <_malloc_r+0xdc>
 8005078:	2c00      	cmp	r4, #0
 800507a:	d048      	beq.n	800510e <_malloc_r+0xe6>
 800507c:	6823      	ldr	r3, [r4, #0]
 800507e:	4631      	mov	r1, r6
 8005080:	4638      	mov	r0, r7
 8005082:	eb04 0903 	add.w	r9, r4, r3
 8005086:	f000 fa35 	bl	80054f4 <_sbrk_r>
 800508a:	4581      	cmp	r9, r0
 800508c:	d13f      	bne.n	800510e <_malloc_r+0xe6>
 800508e:	6821      	ldr	r1, [r4, #0]
 8005090:	1a6d      	subs	r5, r5, r1
 8005092:	4629      	mov	r1, r5
 8005094:	4638      	mov	r0, r7
 8005096:	f7ff ffa7 	bl	8004fe8 <sbrk_aligned>
 800509a:	3001      	adds	r0, #1
 800509c:	d037      	beq.n	800510e <_malloc_r+0xe6>
 800509e:	6823      	ldr	r3, [r4, #0]
 80050a0:	442b      	add	r3, r5
 80050a2:	6023      	str	r3, [r4, #0]
 80050a4:	f8d8 3000 	ldr.w	r3, [r8]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d038      	beq.n	800511e <_malloc_r+0xf6>
 80050ac:	685a      	ldr	r2, [r3, #4]
 80050ae:	42a2      	cmp	r2, r4
 80050b0:	d12b      	bne.n	800510a <_malloc_r+0xe2>
 80050b2:	2200      	movs	r2, #0
 80050b4:	605a      	str	r2, [r3, #4]
 80050b6:	e00f      	b.n	80050d8 <_malloc_r+0xb0>
 80050b8:	6822      	ldr	r2, [r4, #0]
 80050ba:	1b52      	subs	r2, r2, r5
 80050bc:	d41f      	bmi.n	80050fe <_malloc_r+0xd6>
 80050be:	2a0b      	cmp	r2, #11
 80050c0:	d917      	bls.n	80050f2 <_malloc_r+0xca>
 80050c2:	1961      	adds	r1, r4, r5
 80050c4:	42a3      	cmp	r3, r4
 80050c6:	6025      	str	r5, [r4, #0]
 80050c8:	bf18      	it	ne
 80050ca:	6059      	strne	r1, [r3, #4]
 80050cc:	6863      	ldr	r3, [r4, #4]
 80050ce:	bf08      	it	eq
 80050d0:	f8c8 1000 	streq.w	r1, [r8]
 80050d4:	5162      	str	r2, [r4, r5]
 80050d6:	604b      	str	r3, [r1, #4]
 80050d8:	4638      	mov	r0, r7
 80050da:	f104 060b 	add.w	r6, r4, #11
 80050de:	f000 f9b9 	bl	8005454 <__malloc_unlock>
 80050e2:	f026 0607 	bic.w	r6, r6, #7
 80050e6:	1d23      	adds	r3, r4, #4
 80050e8:	1af2      	subs	r2, r6, r3
 80050ea:	d0ae      	beq.n	800504a <_malloc_r+0x22>
 80050ec:	1b9b      	subs	r3, r3, r6
 80050ee:	50a3      	str	r3, [r4, r2]
 80050f0:	e7ab      	b.n	800504a <_malloc_r+0x22>
 80050f2:	42a3      	cmp	r3, r4
 80050f4:	6862      	ldr	r2, [r4, #4]
 80050f6:	d1dd      	bne.n	80050b4 <_malloc_r+0x8c>
 80050f8:	f8c8 2000 	str.w	r2, [r8]
 80050fc:	e7ec      	b.n	80050d8 <_malloc_r+0xb0>
 80050fe:	4623      	mov	r3, r4
 8005100:	6864      	ldr	r4, [r4, #4]
 8005102:	e7ac      	b.n	800505e <_malloc_r+0x36>
 8005104:	4634      	mov	r4, r6
 8005106:	6876      	ldr	r6, [r6, #4]
 8005108:	e7b4      	b.n	8005074 <_malloc_r+0x4c>
 800510a:	4613      	mov	r3, r2
 800510c:	e7cc      	b.n	80050a8 <_malloc_r+0x80>
 800510e:	230c      	movs	r3, #12
 8005110:	603b      	str	r3, [r7, #0]
 8005112:	4638      	mov	r0, r7
 8005114:	f000 f99e 	bl	8005454 <__malloc_unlock>
 8005118:	e797      	b.n	800504a <_malloc_r+0x22>
 800511a:	6025      	str	r5, [r4, #0]
 800511c:	e7dc      	b.n	80050d8 <_malloc_r+0xb0>
 800511e:	605b      	str	r3, [r3, #4]
 8005120:	deff      	udf	#255	; 0xff
 8005122:	bf00      	nop
 8005124:	200002a8 	.word	0x200002a8

08005128 <_printf_common>:
 8005128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800512c:	4616      	mov	r6, r2
 800512e:	4699      	mov	r9, r3
 8005130:	688a      	ldr	r2, [r1, #8]
 8005132:	690b      	ldr	r3, [r1, #16]
 8005134:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005138:	4293      	cmp	r3, r2
 800513a:	bfb8      	it	lt
 800513c:	4613      	movlt	r3, r2
 800513e:	6033      	str	r3, [r6, #0]
 8005140:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005144:	4607      	mov	r7, r0
 8005146:	460c      	mov	r4, r1
 8005148:	b10a      	cbz	r2, 800514e <_printf_common+0x26>
 800514a:	3301      	adds	r3, #1
 800514c:	6033      	str	r3, [r6, #0]
 800514e:	6823      	ldr	r3, [r4, #0]
 8005150:	0699      	lsls	r1, r3, #26
 8005152:	bf42      	ittt	mi
 8005154:	6833      	ldrmi	r3, [r6, #0]
 8005156:	3302      	addmi	r3, #2
 8005158:	6033      	strmi	r3, [r6, #0]
 800515a:	6825      	ldr	r5, [r4, #0]
 800515c:	f015 0506 	ands.w	r5, r5, #6
 8005160:	d106      	bne.n	8005170 <_printf_common+0x48>
 8005162:	f104 0a19 	add.w	sl, r4, #25
 8005166:	68e3      	ldr	r3, [r4, #12]
 8005168:	6832      	ldr	r2, [r6, #0]
 800516a:	1a9b      	subs	r3, r3, r2
 800516c:	42ab      	cmp	r3, r5
 800516e:	dc26      	bgt.n	80051be <_printf_common+0x96>
 8005170:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005174:	1e13      	subs	r3, r2, #0
 8005176:	6822      	ldr	r2, [r4, #0]
 8005178:	bf18      	it	ne
 800517a:	2301      	movne	r3, #1
 800517c:	0692      	lsls	r2, r2, #26
 800517e:	d42b      	bmi.n	80051d8 <_printf_common+0xb0>
 8005180:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005184:	4649      	mov	r1, r9
 8005186:	4638      	mov	r0, r7
 8005188:	47c0      	blx	r8
 800518a:	3001      	adds	r0, #1
 800518c:	d01e      	beq.n	80051cc <_printf_common+0xa4>
 800518e:	6823      	ldr	r3, [r4, #0]
 8005190:	6922      	ldr	r2, [r4, #16]
 8005192:	f003 0306 	and.w	r3, r3, #6
 8005196:	2b04      	cmp	r3, #4
 8005198:	bf02      	ittt	eq
 800519a:	68e5      	ldreq	r5, [r4, #12]
 800519c:	6833      	ldreq	r3, [r6, #0]
 800519e:	1aed      	subeq	r5, r5, r3
 80051a0:	68a3      	ldr	r3, [r4, #8]
 80051a2:	bf0c      	ite	eq
 80051a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051a8:	2500      	movne	r5, #0
 80051aa:	4293      	cmp	r3, r2
 80051ac:	bfc4      	itt	gt
 80051ae:	1a9b      	subgt	r3, r3, r2
 80051b0:	18ed      	addgt	r5, r5, r3
 80051b2:	2600      	movs	r6, #0
 80051b4:	341a      	adds	r4, #26
 80051b6:	42b5      	cmp	r5, r6
 80051b8:	d11a      	bne.n	80051f0 <_printf_common+0xc8>
 80051ba:	2000      	movs	r0, #0
 80051bc:	e008      	b.n	80051d0 <_printf_common+0xa8>
 80051be:	2301      	movs	r3, #1
 80051c0:	4652      	mov	r2, sl
 80051c2:	4649      	mov	r1, r9
 80051c4:	4638      	mov	r0, r7
 80051c6:	47c0      	blx	r8
 80051c8:	3001      	adds	r0, #1
 80051ca:	d103      	bne.n	80051d4 <_printf_common+0xac>
 80051cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80051d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051d4:	3501      	adds	r5, #1
 80051d6:	e7c6      	b.n	8005166 <_printf_common+0x3e>
 80051d8:	18e1      	adds	r1, r4, r3
 80051da:	1c5a      	adds	r2, r3, #1
 80051dc:	2030      	movs	r0, #48	; 0x30
 80051de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80051e2:	4422      	add	r2, r4
 80051e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80051e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80051ec:	3302      	adds	r3, #2
 80051ee:	e7c7      	b.n	8005180 <_printf_common+0x58>
 80051f0:	2301      	movs	r3, #1
 80051f2:	4622      	mov	r2, r4
 80051f4:	4649      	mov	r1, r9
 80051f6:	4638      	mov	r0, r7
 80051f8:	47c0      	blx	r8
 80051fa:	3001      	adds	r0, #1
 80051fc:	d0e6      	beq.n	80051cc <_printf_common+0xa4>
 80051fe:	3601      	adds	r6, #1
 8005200:	e7d9      	b.n	80051b6 <_printf_common+0x8e>
	...

08005204 <_printf_i>:
 8005204:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005208:	7e0f      	ldrb	r7, [r1, #24]
 800520a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800520c:	2f78      	cmp	r7, #120	; 0x78
 800520e:	4691      	mov	r9, r2
 8005210:	4680      	mov	r8, r0
 8005212:	460c      	mov	r4, r1
 8005214:	469a      	mov	sl, r3
 8005216:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800521a:	d807      	bhi.n	800522c <_printf_i+0x28>
 800521c:	2f62      	cmp	r7, #98	; 0x62
 800521e:	d80a      	bhi.n	8005236 <_printf_i+0x32>
 8005220:	2f00      	cmp	r7, #0
 8005222:	f000 80d4 	beq.w	80053ce <_printf_i+0x1ca>
 8005226:	2f58      	cmp	r7, #88	; 0x58
 8005228:	f000 80c0 	beq.w	80053ac <_printf_i+0x1a8>
 800522c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005230:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005234:	e03a      	b.n	80052ac <_printf_i+0xa8>
 8005236:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800523a:	2b15      	cmp	r3, #21
 800523c:	d8f6      	bhi.n	800522c <_printf_i+0x28>
 800523e:	a101      	add	r1, pc, #4	; (adr r1, 8005244 <_printf_i+0x40>)
 8005240:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005244:	0800529d 	.word	0x0800529d
 8005248:	080052b1 	.word	0x080052b1
 800524c:	0800522d 	.word	0x0800522d
 8005250:	0800522d 	.word	0x0800522d
 8005254:	0800522d 	.word	0x0800522d
 8005258:	0800522d 	.word	0x0800522d
 800525c:	080052b1 	.word	0x080052b1
 8005260:	0800522d 	.word	0x0800522d
 8005264:	0800522d 	.word	0x0800522d
 8005268:	0800522d 	.word	0x0800522d
 800526c:	0800522d 	.word	0x0800522d
 8005270:	080053b5 	.word	0x080053b5
 8005274:	080052dd 	.word	0x080052dd
 8005278:	0800536f 	.word	0x0800536f
 800527c:	0800522d 	.word	0x0800522d
 8005280:	0800522d 	.word	0x0800522d
 8005284:	080053d7 	.word	0x080053d7
 8005288:	0800522d 	.word	0x0800522d
 800528c:	080052dd 	.word	0x080052dd
 8005290:	0800522d 	.word	0x0800522d
 8005294:	0800522d 	.word	0x0800522d
 8005298:	08005377 	.word	0x08005377
 800529c:	682b      	ldr	r3, [r5, #0]
 800529e:	1d1a      	adds	r2, r3, #4
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	602a      	str	r2, [r5, #0]
 80052a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80052ac:	2301      	movs	r3, #1
 80052ae:	e09f      	b.n	80053f0 <_printf_i+0x1ec>
 80052b0:	6820      	ldr	r0, [r4, #0]
 80052b2:	682b      	ldr	r3, [r5, #0]
 80052b4:	0607      	lsls	r7, r0, #24
 80052b6:	f103 0104 	add.w	r1, r3, #4
 80052ba:	6029      	str	r1, [r5, #0]
 80052bc:	d501      	bpl.n	80052c2 <_printf_i+0xbe>
 80052be:	681e      	ldr	r6, [r3, #0]
 80052c0:	e003      	b.n	80052ca <_printf_i+0xc6>
 80052c2:	0646      	lsls	r6, r0, #25
 80052c4:	d5fb      	bpl.n	80052be <_printf_i+0xba>
 80052c6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80052ca:	2e00      	cmp	r6, #0
 80052cc:	da03      	bge.n	80052d6 <_printf_i+0xd2>
 80052ce:	232d      	movs	r3, #45	; 0x2d
 80052d0:	4276      	negs	r6, r6
 80052d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052d6:	485a      	ldr	r0, [pc, #360]	; (8005440 <_printf_i+0x23c>)
 80052d8:	230a      	movs	r3, #10
 80052da:	e012      	b.n	8005302 <_printf_i+0xfe>
 80052dc:	682b      	ldr	r3, [r5, #0]
 80052de:	6820      	ldr	r0, [r4, #0]
 80052e0:	1d19      	adds	r1, r3, #4
 80052e2:	6029      	str	r1, [r5, #0]
 80052e4:	0605      	lsls	r5, r0, #24
 80052e6:	d501      	bpl.n	80052ec <_printf_i+0xe8>
 80052e8:	681e      	ldr	r6, [r3, #0]
 80052ea:	e002      	b.n	80052f2 <_printf_i+0xee>
 80052ec:	0641      	lsls	r1, r0, #25
 80052ee:	d5fb      	bpl.n	80052e8 <_printf_i+0xe4>
 80052f0:	881e      	ldrh	r6, [r3, #0]
 80052f2:	4853      	ldr	r0, [pc, #332]	; (8005440 <_printf_i+0x23c>)
 80052f4:	2f6f      	cmp	r7, #111	; 0x6f
 80052f6:	bf0c      	ite	eq
 80052f8:	2308      	moveq	r3, #8
 80052fa:	230a      	movne	r3, #10
 80052fc:	2100      	movs	r1, #0
 80052fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005302:	6865      	ldr	r5, [r4, #4]
 8005304:	60a5      	str	r5, [r4, #8]
 8005306:	2d00      	cmp	r5, #0
 8005308:	bfa2      	ittt	ge
 800530a:	6821      	ldrge	r1, [r4, #0]
 800530c:	f021 0104 	bicge.w	r1, r1, #4
 8005310:	6021      	strge	r1, [r4, #0]
 8005312:	b90e      	cbnz	r6, 8005318 <_printf_i+0x114>
 8005314:	2d00      	cmp	r5, #0
 8005316:	d04b      	beq.n	80053b0 <_printf_i+0x1ac>
 8005318:	4615      	mov	r5, r2
 800531a:	fbb6 f1f3 	udiv	r1, r6, r3
 800531e:	fb03 6711 	mls	r7, r3, r1, r6
 8005322:	5dc7      	ldrb	r7, [r0, r7]
 8005324:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005328:	4637      	mov	r7, r6
 800532a:	42bb      	cmp	r3, r7
 800532c:	460e      	mov	r6, r1
 800532e:	d9f4      	bls.n	800531a <_printf_i+0x116>
 8005330:	2b08      	cmp	r3, #8
 8005332:	d10b      	bne.n	800534c <_printf_i+0x148>
 8005334:	6823      	ldr	r3, [r4, #0]
 8005336:	07de      	lsls	r6, r3, #31
 8005338:	d508      	bpl.n	800534c <_printf_i+0x148>
 800533a:	6923      	ldr	r3, [r4, #16]
 800533c:	6861      	ldr	r1, [r4, #4]
 800533e:	4299      	cmp	r1, r3
 8005340:	bfde      	ittt	le
 8005342:	2330      	movle	r3, #48	; 0x30
 8005344:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005348:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800534c:	1b52      	subs	r2, r2, r5
 800534e:	6122      	str	r2, [r4, #16]
 8005350:	f8cd a000 	str.w	sl, [sp]
 8005354:	464b      	mov	r3, r9
 8005356:	aa03      	add	r2, sp, #12
 8005358:	4621      	mov	r1, r4
 800535a:	4640      	mov	r0, r8
 800535c:	f7ff fee4 	bl	8005128 <_printf_common>
 8005360:	3001      	adds	r0, #1
 8005362:	d14a      	bne.n	80053fa <_printf_i+0x1f6>
 8005364:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005368:	b004      	add	sp, #16
 800536a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800536e:	6823      	ldr	r3, [r4, #0]
 8005370:	f043 0320 	orr.w	r3, r3, #32
 8005374:	6023      	str	r3, [r4, #0]
 8005376:	4833      	ldr	r0, [pc, #204]	; (8005444 <_printf_i+0x240>)
 8005378:	2778      	movs	r7, #120	; 0x78
 800537a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800537e:	6823      	ldr	r3, [r4, #0]
 8005380:	6829      	ldr	r1, [r5, #0]
 8005382:	061f      	lsls	r7, r3, #24
 8005384:	f851 6b04 	ldr.w	r6, [r1], #4
 8005388:	d402      	bmi.n	8005390 <_printf_i+0x18c>
 800538a:	065f      	lsls	r7, r3, #25
 800538c:	bf48      	it	mi
 800538e:	b2b6      	uxthmi	r6, r6
 8005390:	07df      	lsls	r7, r3, #31
 8005392:	bf48      	it	mi
 8005394:	f043 0320 	orrmi.w	r3, r3, #32
 8005398:	6029      	str	r1, [r5, #0]
 800539a:	bf48      	it	mi
 800539c:	6023      	strmi	r3, [r4, #0]
 800539e:	b91e      	cbnz	r6, 80053a8 <_printf_i+0x1a4>
 80053a0:	6823      	ldr	r3, [r4, #0]
 80053a2:	f023 0320 	bic.w	r3, r3, #32
 80053a6:	6023      	str	r3, [r4, #0]
 80053a8:	2310      	movs	r3, #16
 80053aa:	e7a7      	b.n	80052fc <_printf_i+0xf8>
 80053ac:	4824      	ldr	r0, [pc, #144]	; (8005440 <_printf_i+0x23c>)
 80053ae:	e7e4      	b.n	800537a <_printf_i+0x176>
 80053b0:	4615      	mov	r5, r2
 80053b2:	e7bd      	b.n	8005330 <_printf_i+0x12c>
 80053b4:	682b      	ldr	r3, [r5, #0]
 80053b6:	6826      	ldr	r6, [r4, #0]
 80053b8:	6961      	ldr	r1, [r4, #20]
 80053ba:	1d18      	adds	r0, r3, #4
 80053bc:	6028      	str	r0, [r5, #0]
 80053be:	0635      	lsls	r5, r6, #24
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	d501      	bpl.n	80053c8 <_printf_i+0x1c4>
 80053c4:	6019      	str	r1, [r3, #0]
 80053c6:	e002      	b.n	80053ce <_printf_i+0x1ca>
 80053c8:	0670      	lsls	r0, r6, #25
 80053ca:	d5fb      	bpl.n	80053c4 <_printf_i+0x1c0>
 80053cc:	8019      	strh	r1, [r3, #0]
 80053ce:	2300      	movs	r3, #0
 80053d0:	6123      	str	r3, [r4, #16]
 80053d2:	4615      	mov	r5, r2
 80053d4:	e7bc      	b.n	8005350 <_printf_i+0x14c>
 80053d6:	682b      	ldr	r3, [r5, #0]
 80053d8:	1d1a      	adds	r2, r3, #4
 80053da:	602a      	str	r2, [r5, #0]
 80053dc:	681d      	ldr	r5, [r3, #0]
 80053de:	6862      	ldr	r2, [r4, #4]
 80053e0:	2100      	movs	r1, #0
 80053e2:	4628      	mov	r0, r5
 80053e4:	f7fa fef4 	bl	80001d0 <memchr>
 80053e8:	b108      	cbz	r0, 80053ee <_printf_i+0x1ea>
 80053ea:	1b40      	subs	r0, r0, r5
 80053ec:	6060      	str	r0, [r4, #4]
 80053ee:	6863      	ldr	r3, [r4, #4]
 80053f0:	6123      	str	r3, [r4, #16]
 80053f2:	2300      	movs	r3, #0
 80053f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053f8:	e7aa      	b.n	8005350 <_printf_i+0x14c>
 80053fa:	6923      	ldr	r3, [r4, #16]
 80053fc:	462a      	mov	r2, r5
 80053fe:	4649      	mov	r1, r9
 8005400:	4640      	mov	r0, r8
 8005402:	47d0      	blx	sl
 8005404:	3001      	adds	r0, #1
 8005406:	d0ad      	beq.n	8005364 <_printf_i+0x160>
 8005408:	6823      	ldr	r3, [r4, #0]
 800540a:	079b      	lsls	r3, r3, #30
 800540c:	d413      	bmi.n	8005436 <_printf_i+0x232>
 800540e:	68e0      	ldr	r0, [r4, #12]
 8005410:	9b03      	ldr	r3, [sp, #12]
 8005412:	4298      	cmp	r0, r3
 8005414:	bfb8      	it	lt
 8005416:	4618      	movlt	r0, r3
 8005418:	e7a6      	b.n	8005368 <_printf_i+0x164>
 800541a:	2301      	movs	r3, #1
 800541c:	4632      	mov	r2, r6
 800541e:	4649      	mov	r1, r9
 8005420:	4640      	mov	r0, r8
 8005422:	47d0      	blx	sl
 8005424:	3001      	adds	r0, #1
 8005426:	d09d      	beq.n	8005364 <_printf_i+0x160>
 8005428:	3501      	adds	r5, #1
 800542a:	68e3      	ldr	r3, [r4, #12]
 800542c:	9903      	ldr	r1, [sp, #12]
 800542e:	1a5b      	subs	r3, r3, r1
 8005430:	42ab      	cmp	r3, r5
 8005432:	dcf2      	bgt.n	800541a <_printf_i+0x216>
 8005434:	e7eb      	b.n	800540e <_printf_i+0x20a>
 8005436:	2500      	movs	r5, #0
 8005438:	f104 0619 	add.w	r6, r4, #25
 800543c:	e7f5      	b.n	800542a <_printf_i+0x226>
 800543e:	bf00      	nop
 8005440:	08005655 	.word	0x08005655
 8005444:	08005666 	.word	0x08005666

08005448 <__malloc_lock>:
 8005448:	4801      	ldr	r0, [pc, #4]	; (8005450 <__malloc_lock+0x8>)
 800544a:	f7ff bc73 	b.w	8004d34 <__retarget_lock_acquire_recursive>
 800544e:	bf00      	nop
 8005450:	200002a4 	.word	0x200002a4

08005454 <__malloc_unlock>:
 8005454:	4801      	ldr	r0, [pc, #4]	; (800545c <__malloc_unlock+0x8>)
 8005456:	f7ff bc6e 	b.w	8004d36 <__retarget_lock_release_recursive>
 800545a:	bf00      	nop
 800545c:	200002a4 	.word	0x200002a4

08005460 <_realloc_r>:
 8005460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005464:	4680      	mov	r8, r0
 8005466:	4614      	mov	r4, r2
 8005468:	460e      	mov	r6, r1
 800546a:	b921      	cbnz	r1, 8005476 <_realloc_r+0x16>
 800546c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005470:	4611      	mov	r1, r2
 8005472:	f7ff bdd9 	b.w	8005028 <_malloc_r>
 8005476:	b92a      	cbnz	r2, 8005484 <_realloc_r+0x24>
 8005478:	f000 f85a 	bl	8005530 <_free_r>
 800547c:	4625      	mov	r5, r4
 800547e:	4628      	mov	r0, r5
 8005480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005484:	f000 f8a0 	bl	80055c8 <_malloc_usable_size_r>
 8005488:	4284      	cmp	r4, r0
 800548a:	4607      	mov	r7, r0
 800548c:	d802      	bhi.n	8005494 <_realloc_r+0x34>
 800548e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005492:	d812      	bhi.n	80054ba <_realloc_r+0x5a>
 8005494:	4621      	mov	r1, r4
 8005496:	4640      	mov	r0, r8
 8005498:	f7ff fdc6 	bl	8005028 <_malloc_r>
 800549c:	4605      	mov	r5, r0
 800549e:	2800      	cmp	r0, #0
 80054a0:	d0ed      	beq.n	800547e <_realloc_r+0x1e>
 80054a2:	42bc      	cmp	r4, r7
 80054a4:	4622      	mov	r2, r4
 80054a6:	4631      	mov	r1, r6
 80054a8:	bf28      	it	cs
 80054aa:	463a      	movcs	r2, r7
 80054ac:	f000 f832 	bl	8005514 <memcpy>
 80054b0:	4631      	mov	r1, r6
 80054b2:	4640      	mov	r0, r8
 80054b4:	f000 f83c 	bl	8005530 <_free_r>
 80054b8:	e7e1      	b.n	800547e <_realloc_r+0x1e>
 80054ba:	4635      	mov	r5, r6
 80054bc:	e7df      	b.n	800547e <_realloc_r+0x1e>

080054be <memmove>:
 80054be:	4288      	cmp	r0, r1
 80054c0:	b510      	push	{r4, lr}
 80054c2:	eb01 0402 	add.w	r4, r1, r2
 80054c6:	d902      	bls.n	80054ce <memmove+0x10>
 80054c8:	4284      	cmp	r4, r0
 80054ca:	4623      	mov	r3, r4
 80054cc:	d807      	bhi.n	80054de <memmove+0x20>
 80054ce:	1e43      	subs	r3, r0, #1
 80054d0:	42a1      	cmp	r1, r4
 80054d2:	d008      	beq.n	80054e6 <memmove+0x28>
 80054d4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80054d8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80054dc:	e7f8      	b.n	80054d0 <memmove+0x12>
 80054de:	4402      	add	r2, r0
 80054e0:	4601      	mov	r1, r0
 80054e2:	428a      	cmp	r2, r1
 80054e4:	d100      	bne.n	80054e8 <memmove+0x2a>
 80054e6:	bd10      	pop	{r4, pc}
 80054e8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80054ec:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80054f0:	e7f7      	b.n	80054e2 <memmove+0x24>
	...

080054f4 <_sbrk_r>:
 80054f4:	b538      	push	{r3, r4, r5, lr}
 80054f6:	4d06      	ldr	r5, [pc, #24]	; (8005510 <_sbrk_r+0x1c>)
 80054f8:	2300      	movs	r3, #0
 80054fa:	4604      	mov	r4, r0
 80054fc:	4608      	mov	r0, r1
 80054fe:	602b      	str	r3, [r5, #0]
 8005500:	f7fc f818 	bl	8001534 <_sbrk>
 8005504:	1c43      	adds	r3, r0, #1
 8005506:	d102      	bne.n	800550e <_sbrk_r+0x1a>
 8005508:	682b      	ldr	r3, [r5, #0]
 800550a:	b103      	cbz	r3, 800550e <_sbrk_r+0x1a>
 800550c:	6023      	str	r3, [r4, #0]
 800550e:	bd38      	pop	{r3, r4, r5, pc}
 8005510:	200002b0 	.word	0x200002b0

08005514 <memcpy>:
 8005514:	440a      	add	r2, r1
 8005516:	4291      	cmp	r1, r2
 8005518:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800551c:	d100      	bne.n	8005520 <memcpy+0xc>
 800551e:	4770      	bx	lr
 8005520:	b510      	push	{r4, lr}
 8005522:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005526:	f803 4f01 	strb.w	r4, [r3, #1]!
 800552a:	4291      	cmp	r1, r2
 800552c:	d1f9      	bne.n	8005522 <memcpy+0xe>
 800552e:	bd10      	pop	{r4, pc}

08005530 <_free_r>:
 8005530:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005532:	2900      	cmp	r1, #0
 8005534:	d044      	beq.n	80055c0 <_free_r+0x90>
 8005536:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800553a:	9001      	str	r0, [sp, #4]
 800553c:	2b00      	cmp	r3, #0
 800553e:	f1a1 0404 	sub.w	r4, r1, #4
 8005542:	bfb8      	it	lt
 8005544:	18e4      	addlt	r4, r4, r3
 8005546:	f7ff ff7f 	bl	8005448 <__malloc_lock>
 800554a:	4a1e      	ldr	r2, [pc, #120]	; (80055c4 <_free_r+0x94>)
 800554c:	9801      	ldr	r0, [sp, #4]
 800554e:	6813      	ldr	r3, [r2, #0]
 8005550:	b933      	cbnz	r3, 8005560 <_free_r+0x30>
 8005552:	6063      	str	r3, [r4, #4]
 8005554:	6014      	str	r4, [r2, #0]
 8005556:	b003      	add	sp, #12
 8005558:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800555c:	f7ff bf7a 	b.w	8005454 <__malloc_unlock>
 8005560:	42a3      	cmp	r3, r4
 8005562:	d908      	bls.n	8005576 <_free_r+0x46>
 8005564:	6825      	ldr	r5, [r4, #0]
 8005566:	1961      	adds	r1, r4, r5
 8005568:	428b      	cmp	r3, r1
 800556a:	bf01      	itttt	eq
 800556c:	6819      	ldreq	r1, [r3, #0]
 800556e:	685b      	ldreq	r3, [r3, #4]
 8005570:	1949      	addeq	r1, r1, r5
 8005572:	6021      	streq	r1, [r4, #0]
 8005574:	e7ed      	b.n	8005552 <_free_r+0x22>
 8005576:	461a      	mov	r2, r3
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	b10b      	cbz	r3, 8005580 <_free_r+0x50>
 800557c:	42a3      	cmp	r3, r4
 800557e:	d9fa      	bls.n	8005576 <_free_r+0x46>
 8005580:	6811      	ldr	r1, [r2, #0]
 8005582:	1855      	adds	r5, r2, r1
 8005584:	42a5      	cmp	r5, r4
 8005586:	d10b      	bne.n	80055a0 <_free_r+0x70>
 8005588:	6824      	ldr	r4, [r4, #0]
 800558a:	4421      	add	r1, r4
 800558c:	1854      	adds	r4, r2, r1
 800558e:	42a3      	cmp	r3, r4
 8005590:	6011      	str	r1, [r2, #0]
 8005592:	d1e0      	bne.n	8005556 <_free_r+0x26>
 8005594:	681c      	ldr	r4, [r3, #0]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	6053      	str	r3, [r2, #4]
 800559a:	440c      	add	r4, r1
 800559c:	6014      	str	r4, [r2, #0]
 800559e:	e7da      	b.n	8005556 <_free_r+0x26>
 80055a0:	d902      	bls.n	80055a8 <_free_r+0x78>
 80055a2:	230c      	movs	r3, #12
 80055a4:	6003      	str	r3, [r0, #0]
 80055a6:	e7d6      	b.n	8005556 <_free_r+0x26>
 80055a8:	6825      	ldr	r5, [r4, #0]
 80055aa:	1961      	adds	r1, r4, r5
 80055ac:	428b      	cmp	r3, r1
 80055ae:	bf04      	itt	eq
 80055b0:	6819      	ldreq	r1, [r3, #0]
 80055b2:	685b      	ldreq	r3, [r3, #4]
 80055b4:	6063      	str	r3, [r4, #4]
 80055b6:	bf04      	itt	eq
 80055b8:	1949      	addeq	r1, r1, r5
 80055ba:	6021      	streq	r1, [r4, #0]
 80055bc:	6054      	str	r4, [r2, #4]
 80055be:	e7ca      	b.n	8005556 <_free_r+0x26>
 80055c0:	b003      	add	sp, #12
 80055c2:	bd30      	pop	{r4, r5, pc}
 80055c4:	200002a8 	.word	0x200002a8

080055c8 <_malloc_usable_size_r>:
 80055c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055cc:	1f18      	subs	r0, r3, #4
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	bfbc      	itt	lt
 80055d2:	580b      	ldrlt	r3, [r1, r0]
 80055d4:	18c0      	addlt	r0, r0, r3
 80055d6:	4770      	bx	lr

080055d8 <_init>:
 80055d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055da:	bf00      	nop
 80055dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055de:	bc08      	pop	{r3}
 80055e0:	469e      	mov	lr, r3
 80055e2:	4770      	bx	lr

080055e4 <_fini>:
 80055e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055e6:	bf00      	nop
 80055e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055ea:	bc08      	pop	{r3}
 80055ec:	469e      	mov	lr, r3
 80055ee:	4770      	bx	lr
