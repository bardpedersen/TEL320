
NUCLEO-L476RG_BME280_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08005358  08005358  00015358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053e0  080053e0  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  080053e0  080053e0  000153e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053e8  080053e8  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053e8  080053e8  000153e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053ec  080053ec  000153ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080053f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  2000005c  0800544c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002a4  0800544c  000202a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d898  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001cd7  00000000  00000000  0002d967  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bd8  00000000  00000000  0002f640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000935  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002621a  00000000  00000000  00030b4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000efee  00000000  00000000  00056d67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ea73b  00000000  00000000  00065d55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003640  00000000  00000000  00150490  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00153ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005340 	.word	0x08005340

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08005340 	.word	0x08005340

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_ldivmod>:
 8000270:	b97b      	cbnz	r3, 8000292 <__aeabi_ldivmod+0x22>
 8000272:	b972      	cbnz	r2, 8000292 <__aeabi_ldivmod+0x22>
 8000274:	2900      	cmp	r1, #0
 8000276:	bfbe      	ittt	lt
 8000278:	2000      	movlt	r0, #0
 800027a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800027e:	e006      	blt.n	800028e <__aeabi_ldivmod+0x1e>
 8000280:	bf08      	it	eq
 8000282:	2800      	cmpeq	r0, #0
 8000284:	bf1c      	itt	ne
 8000286:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800028a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800028e:	f000 b9bb 	b.w	8000608 <__aeabi_idiv0>
 8000292:	f1ad 0c08 	sub.w	ip, sp, #8
 8000296:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800029a:	2900      	cmp	r1, #0
 800029c:	db09      	blt.n	80002b2 <__aeabi_ldivmod+0x42>
 800029e:	2b00      	cmp	r3, #0
 80002a0:	db1a      	blt.n	80002d8 <__aeabi_ldivmod+0x68>
 80002a2:	f000 f84d 	bl	8000340 <__udivmoddi4>
 80002a6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ae:	b004      	add	sp, #16
 80002b0:	4770      	bx	lr
 80002b2:	4240      	negs	r0, r0
 80002b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	db1b      	blt.n	80002f4 <__aeabi_ldivmod+0x84>
 80002bc:	f000 f840 	bl	8000340 <__udivmoddi4>
 80002c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c8:	b004      	add	sp, #16
 80002ca:	4240      	negs	r0, r0
 80002cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002d0:	4252      	negs	r2, r2
 80002d2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d6:	4770      	bx	lr
 80002d8:	4252      	negs	r2, r2
 80002da:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002de:	f000 f82f 	bl	8000340 <__udivmoddi4>
 80002e2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ea:	b004      	add	sp, #16
 80002ec:	4240      	negs	r0, r0
 80002ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002f2:	4770      	bx	lr
 80002f4:	4252      	negs	r2, r2
 80002f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002fa:	f000 f821 	bl	8000340 <__udivmoddi4>
 80002fe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000302:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000306:	b004      	add	sp, #16
 8000308:	4252      	negs	r2, r2
 800030a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800030e:	4770      	bx	lr

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000320:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000324:	f000 b970 	b.w	8000608 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9e08      	ldr	r6, [sp, #32]
 8000346:	460d      	mov	r5, r1
 8000348:	4604      	mov	r4, r0
 800034a:	460f      	mov	r7, r1
 800034c:	2b00      	cmp	r3, #0
 800034e:	d14a      	bne.n	80003e6 <__udivmoddi4+0xa6>
 8000350:	428a      	cmp	r2, r1
 8000352:	4694      	mov	ip, r2
 8000354:	d965      	bls.n	8000422 <__udivmoddi4+0xe2>
 8000356:	fab2 f382 	clz	r3, r2
 800035a:	b143      	cbz	r3, 800036e <__udivmoddi4+0x2e>
 800035c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000360:	f1c3 0220 	rsb	r2, r3, #32
 8000364:	409f      	lsls	r7, r3
 8000366:	fa20 f202 	lsr.w	r2, r0, r2
 800036a:	4317      	orrs	r7, r2
 800036c:	409c      	lsls	r4, r3
 800036e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000372:	fa1f f58c 	uxth.w	r5, ip
 8000376:	fbb7 f1fe 	udiv	r1, r7, lr
 800037a:	0c22      	lsrs	r2, r4, #16
 800037c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000380:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000384:	fb01 f005 	mul.w	r0, r1, r5
 8000388:	4290      	cmp	r0, r2
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x62>
 800038c:	eb1c 0202 	adds.w	r2, ip, r2
 8000390:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000394:	f080 811c 	bcs.w	80005d0 <__udivmoddi4+0x290>
 8000398:	4290      	cmp	r0, r2
 800039a:	f240 8119 	bls.w	80005d0 <__udivmoddi4+0x290>
 800039e:	3902      	subs	r1, #2
 80003a0:	4462      	add	r2, ip
 80003a2:	1a12      	subs	r2, r2, r0
 80003a4:	b2a4      	uxth	r4, r4
 80003a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003b2:	fb00 f505 	mul.w	r5, r0, r5
 80003b6:	42a5      	cmp	r5, r4
 80003b8:	d90a      	bls.n	80003d0 <__udivmoddi4+0x90>
 80003ba:	eb1c 0404 	adds.w	r4, ip, r4
 80003be:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003c2:	f080 8107 	bcs.w	80005d4 <__udivmoddi4+0x294>
 80003c6:	42a5      	cmp	r5, r4
 80003c8:	f240 8104 	bls.w	80005d4 <__udivmoddi4+0x294>
 80003cc:	4464      	add	r4, ip
 80003ce:	3802      	subs	r0, #2
 80003d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003d4:	1b64      	subs	r4, r4, r5
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11e      	cbz	r6, 80003e2 <__udivmoddi4+0xa2>
 80003da:	40dc      	lsrs	r4, r3
 80003dc:	2300      	movs	r3, #0
 80003de:	e9c6 4300 	strd	r4, r3, [r6]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0xbc>
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	f000 80ed 	beq.w	80005ca <__udivmoddi4+0x28a>
 80003f0:	2100      	movs	r1, #0
 80003f2:	e9c6 0500 	strd	r0, r5, [r6]
 80003f6:	4608      	mov	r0, r1
 80003f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fc:	fab3 f183 	clz	r1, r3
 8000400:	2900      	cmp	r1, #0
 8000402:	d149      	bne.n	8000498 <__udivmoddi4+0x158>
 8000404:	42ab      	cmp	r3, r5
 8000406:	d302      	bcc.n	800040e <__udivmoddi4+0xce>
 8000408:	4282      	cmp	r2, r0
 800040a:	f200 80f8 	bhi.w	80005fe <__udivmoddi4+0x2be>
 800040e:	1a84      	subs	r4, r0, r2
 8000410:	eb65 0203 	sbc.w	r2, r5, r3
 8000414:	2001      	movs	r0, #1
 8000416:	4617      	mov	r7, r2
 8000418:	2e00      	cmp	r6, #0
 800041a:	d0e2      	beq.n	80003e2 <__udivmoddi4+0xa2>
 800041c:	e9c6 4700 	strd	r4, r7, [r6]
 8000420:	e7df      	b.n	80003e2 <__udivmoddi4+0xa2>
 8000422:	b902      	cbnz	r2, 8000426 <__udivmoddi4+0xe6>
 8000424:	deff      	udf	#255	; 0xff
 8000426:	fab2 f382 	clz	r3, r2
 800042a:	2b00      	cmp	r3, #0
 800042c:	f040 8090 	bne.w	8000550 <__udivmoddi4+0x210>
 8000430:	1a8a      	subs	r2, r1, r2
 8000432:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000436:	fa1f fe8c 	uxth.w	lr, ip
 800043a:	2101      	movs	r1, #1
 800043c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000440:	fb07 2015 	mls	r0, r7, r5, r2
 8000444:	0c22      	lsrs	r2, r4, #16
 8000446:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800044a:	fb0e f005 	mul.w	r0, lr, r5
 800044e:	4290      	cmp	r0, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x124>
 8000452:	eb1c 0202 	adds.w	r2, ip, r2
 8000456:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x122>
 800045c:	4290      	cmp	r0, r2
 800045e:	f200 80cb 	bhi.w	80005f8 <__udivmoddi4+0x2b8>
 8000462:	4645      	mov	r5, r8
 8000464:	1a12      	subs	r2, r2, r0
 8000466:	b2a4      	uxth	r4, r4
 8000468:	fbb2 f0f7 	udiv	r0, r2, r7
 800046c:	fb07 2210 	mls	r2, r7, r0, r2
 8000470:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000474:	fb0e fe00 	mul.w	lr, lr, r0
 8000478:	45a6      	cmp	lr, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x14e>
 800047c:	eb1c 0404 	adds.w	r4, ip, r4
 8000480:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000484:	d202      	bcs.n	800048c <__udivmoddi4+0x14c>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f200 80bb 	bhi.w	8000602 <__udivmoddi4+0x2c2>
 800048c:	4610      	mov	r0, r2
 800048e:	eba4 040e 	sub.w	r4, r4, lr
 8000492:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000496:	e79f      	b.n	80003d8 <__udivmoddi4+0x98>
 8000498:	f1c1 0720 	rsb	r7, r1, #32
 800049c:	408b      	lsls	r3, r1
 800049e:	fa22 fc07 	lsr.w	ip, r2, r7
 80004a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80004a6:	fa05 f401 	lsl.w	r4, r5, r1
 80004aa:	fa20 f307 	lsr.w	r3, r0, r7
 80004ae:	40fd      	lsrs	r5, r7
 80004b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004b4:	4323      	orrs	r3, r4
 80004b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80004ba:	fa1f fe8c 	uxth.w	lr, ip
 80004be:	fb09 5518 	mls	r5, r9, r8, r5
 80004c2:	0c1c      	lsrs	r4, r3, #16
 80004c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004c8:	fb08 f50e 	mul.w	r5, r8, lr
 80004cc:	42a5      	cmp	r5, r4
 80004ce:	fa02 f201 	lsl.w	r2, r2, r1
 80004d2:	fa00 f001 	lsl.w	r0, r0, r1
 80004d6:	d90b      	bls.n	80004f0 <__udivmoddi4+0x1b0>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004e0:	f080 8088 	bcs.w	80005f4 <__udivmoddi4+0x2b4>
 80004e4:	42a5      	cmp	r5, r4
 80004e6:	f240 8085 	bls.w	80005f4 <__udivmoddi4+0x2b4>
 80004ea:	f1a8 0802 	sub.w	r8, r8, #2
 80004ee:	4464      	add	r4, ip
 80004f0:	1b64      	subs	r4, r4, r5
 80004f2:	b29d      	uxth	r5, r3
 80004f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004f8:	fb09 4413 	mls	r4, r9, r3, r4
 80004fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000500:	fb03 fe0e 	mul.w	lr, r3, lr
 8000504:	45a6      	cmp	lr, r4
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x1da>
 8000508:	eb1c 0404 	adds.w	r4, ip, r4
 800050c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000510:	d26c      	bcs.n	80005ec <__udivmoddi4+0x2ac>
 8000512:	45a6      	cmp	lr, r4
 8000514:	d96a      	bls.n	80005ec <__udivmoddi4+0x2ac>
 8000516:	3b02      	subs	r3, #2
 8000518:	4464      	add	r4, ip
 800051a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800051e:	fba3 9502 	umull	r9, r5, r3, r2
 8000522:	eba4 040e 	sub.w	r4, r4, lr
 8000526:	42ac      	cmp	r4, r5
 8000528:	46c8      	mov	r8, r9
 800052a:	46ae      	mov	lr, r5
 800052c:	d356      	bcc.n	80005dc <__udivmoddi4+0x29c>
 800052e:	d053      	beq.n	80005d8 <__udivmoddi4+0x298>
 8000530:	b156      	cbz	r6, 8000548 <__udivmoddi4+0x208>
 8000532:	ebb0 0208 	subs.w	r2, r0, r8
 8000536:	eb64 040e 	sbc.w	r4, r4, lr
 800053a:	fa04 f707 	lsl.w	r7, r4, r7
 800053e:	40ca      	lsrs	r2, r1
 8000540:	40cc      	lsrs	r4, r1
 8000542:	4317      	orrs	r7, r2
 8000544:	e9c6 7400 	strd	r7, r4, [r6]
 8000548:	4618      	mov	r0, r3
 800054a:	2100      	movs	r1, #0
 800054c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000550:	f1c3 0120 	rsb	r1, r3, #32
 8000554:	fa02 fc03 	lsl.w	ip, r2, r3
 8000558:	fa20 f201 	lsr.w	r2, r0, r1
 800055c:	fa25 f101 	lsr.w	r1, r5, r1
 8000560:	409d      	lsls	r5, r3
 8000562:	432a      	orrs	r2, r5
 8000564:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000568:	fa1f fe8c 	uxth.w	lr, ip
 800056c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000570:	fb07 1510 	mls	r5, r7, r0, r1
 8000574:	0c11      	lsrs	r1, r2, #16
 8000576:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800057a:	fb00 f50e 	mul.w	r5, r0, lr
 800057e:	428d      	cmp	r5, r1
 8000580:	fa04 f403 	lsl.w	r4, r4, r3
 8000584:	d908      	bls.n	8000598 <__udivmoddi4+0x258>
 8000586:	eb1c 0101 	adds.w	r1, ip, r1
 800058a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800058e:	d22f      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 8000590:	428d      	cmp	r5, r1
 8000592:	d92d      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 8000594:	3802      	subs	r0, #2
 8000596:	4461      	add	r1, ip
 8000598:	1b49      	subs	r1, r1, r5
 800059a:	b292      	uxth	r2, r2
 800059c:	fbb1 f5f7 	udiv	r5, r1, r7
 80005a0:	fb07 1115 	mls	r1, r7, r5, r1
 80005a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005a8:	fb05 f10e 	mul.w	r1, r5, lr
 80005ac:	4291      	cmp	r1, r2
 80005ae:	d908      	bls.n	80005c2 <__udivmoddi4+0x282>
 80005b0:	eb1c 0202 	adds.w	r2, ip, r2
 80005b4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80005b8:	d216      	bcs.n	80005e8 <__udivmoddi4+0x2a8>
 80005ba:	4291      	cmp	r1, r2
 80005bc:	d914      	bls.n	80005e8 <__udivmoddi4+0x2a8>
 80005be:	3d02      	subs	r5, #2
 80005c0:	4462      	add	r2, ip
 80005c2:	1a52      	subs	r2, r2, r1
 80005c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005c8:	e738      	b.n	800043c <__udivmoddi4+0xfc>
 80005ca:	4631      	mov	r1, r6
 80005cc:	4630      	mov	r0, r6
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xa2>
 80005d0:	4639      	mov	r1, r7
 80005d2:	e6e6      	b.n	80003a2 <__udivmoddi4+0x62>
 80005d4:	4610      	mov	r0, r2
 80005d6:	e6fb      	b.n	80003d0 <__udivmoddi4+0x90>
 80005d8:	4548      	cmp	r0, r9
 80005da:	d2a9      	bcs.n	8000530 <__udivmoddi4+0x1f0>
 80005dc:	ebb9 0802 	subs.w	r8, r9, r2
 80005e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005e4:	3b01      	subs	r3, #1
 80005e6:	e7a3      	b.n	8000530 <__udivmoddi4+0x1f0>
 80005e8:	4645      	mov	r5, r8
 80005ea:	e7ea      	b.n	80005c2 <__udivmoddi4+0x282>
 80005ec:	462b      	mov	r3, r5
 80005ee:	e794      	b.n	800051a <__udivmoddi4+0x1da>
 80005f0:	4640      	mov	r0, r8
 80005f2:	e7d1      	b.n	8000598 <__udivmoddi4+0x258>
 80005f4:	46d0      	mov	r8, sl
 80005f6:	e77b      	b.n	80004f0 <__udivmoddi4+0x1b0>
 80005f8:	3d02      	subs	r5, #2
 80005fa:	4462      	add	r2, ip
 80005fc:	e732      	b.n	8000464 <__udivmoddi4+0x124>
 80005fe:	4608      	mov	r0, r1
 8000600:	e70a      	b.n	8000418 <__udivmoddi4+0xd8>
 8000602:	4464      	add	r4, ip
 8000604:	3802      	subs	r0, #2
 8000606:	e742      	b.n	800048e <__udivmoddi4+0x14e>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <BME280_compensate_T_int32.1>:
  MX_USART2_UART_Init();
  MX_I2C1_Init();
  /* USER CODE BEGIN 2 */

	// Copy functions from data sheet that compensate data from sensor and switch "BME280_S32_t" to "int32_t"
	int32_t BME280_compensate_T_int32(int32_t adc_T) {
 800060c:	b480      	push	{r7}
 800060e:	b087      	sub	sp, #28
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
 8000614:	4663      	mov	r3, ip
 8000616:	f8c7 c000 	str.w	ip, [r7]

		int32_t var1, var2, T;
		var1 = ((((adc_T >> 3) - ((int32_t) dig_T1 << 1))) * ((int32_t) dig_T2))
 800061a:	687a      	ldr	r2, [r7, #4]
 800061c:	10d1      	asrs	r1, r2, #3
 800061e:	8c1a      	ldrh	r2, [r3, #32]
 8000620:	0052      	lsls	r2, r2, #1
 8000622:	1a8a      	subs	r2, r1, r2
 8000624:	f9b3 101e 	ldrsh.w	r1, [r3, #30]
 8000628:	fb01 f202 	mul.w	r2, r1, r2
 800062c:	12d2      	asrs	r2, r2, #11
 800062e:	617a      	str	r2, [r7, #20]
				>> 11;
		var2 = (((((adc_T >> 4) - ((int32_t) dig_T1))
 8000630:	687a      	ldr	r2, [r7, #4]
 8000632:	1112      	asrs	r2, r2, #4
 8000634:	8c19      	ldrh	r1, [r3, #32]
 8000636:	1a52      	subs	r2, r2, r1
				* ((adc_T >> 4) - ((int32_t) dig_T1))) >> 12)
 8000638:	6879      	ldr	r1, [r7, #4]
 800063a:	1109      	asrs	r1, r1, #4
 800063c:	8c18      	ldrh	r0, [r3, #32]
 800063e:	1a09      	subs	r1, r1, r0
 8000640:	fb01 f202 	mul.w	r2, r1, r2
 8000644:	1312      	asrs	r2, r2, #12
				* ((int32_t) dig_T3)) >> 14;
 8000646:	f9b3 101c 	ldrsh.w	r1, [r3, #28]
 800064a:	fb01 f202 	mul.w	r2, r1, r2
		var2 = (((((adc_T >> 4) - ((int32_t) dig_T1))
 800064e:	1392      	asrs	r2, r2, #14
 8000650:	613a      	str	r2, [r7, #16]
		t_fine = var1 + var2;
 8000652:	6979      	ldr	r1, [r7, #20]
 8000654:	693a      	ldr	r2, [r7, #16]
 8000656:	440a      	add	r2, r1
 8000658:	601a      	str	r2, [r3, #0]
		T = (t_fine * 5 + 128) >> 8;
 800065a:	681a      	ldr	r2, [r3, #0]
 800065c:	4613      	mov	r3, r2
 800065e:	009b      	lsls	r3, r3, #2
 8000660:	4413      	add	r3, r2
 8000662:	3380      	adds	r3, #128	; 0x80
 8000664:	121b      	asrs	r3, r3, #8
 8000666:	60fb      	str	r3, [r7, #12]
		return T;
 8000668:	68fb      	ldr	r3, [r7, #12]
	}
 800066a:	4618      	mov	r0, r3
 800066c:	371c      	adds	r7, #28
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
	...

08000678 <main>:
{
 8000678:	b5b0      	push	{r4, r5, r7, lr}
 800067a:	b0b8      	sub	sp, #224	; 0xe0
 800067c:	af0e      	add	r7, sp, #56	; 0x38
int main(void)
 800067e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8000682:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HAL_Init();
 8000686:	f000 ff8f 	bl	80015a8 <HAL_Init>
  SystemClock_Config();
 800068a:	f000 fce5 	bl	8001058 <SystemClock_Config>
  MX_GPIO_Init();
 800068e:	f000 fda5 	bl	80011dc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000692:	f000 fd73 	bl	800117c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000696:	f000 fd31 	bl	80010fc <MX_I2C1_Init>
		*dig_H4 = (compData[28] << 4) | (compData[29] & 0x0f);
		*dig_H5 = (compData[30] << 4) | (compData[29] >> 4);
		*dig_H6 = (compData[31]);
	}

	dataWrite = 0xB6;
 800069a:	23b6      	movs	r3, #182	; 0xb6
 800069c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(&hi2c1, 0x77<<1, 0xE0, 1, &dataWrite, 1, 1000);
 80006a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006a4:	9302      	str	r3, [sp, #8]
 80006a6:	2301      	movs	r3, #1
 80006a8:	9301      	str	r3, [sp, #4]
 80006aa:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80006ae:	9300      	str	r3, [sp, #0]
 80006b0:	2301      	movs	r3, #1
 80006b2:	22e0      	movs	r2, #224	; 0xe0
 80006b4:	21ee      	movs	r1, #238	; 0xee
 80006b6:	4874      	ldr	r0, [pc, #464]	; (8000888 <main+0x210>)
 80006b8:	f001 fb5a 	bl	8001d70 <HAL_I2C_Mem_Write>

	HAL_Delay(100);
 80006bc:	2064      	movs	r0, #100	; 0x64
 80006be:	f000 ffef 	bl	80016a0 <HAL_Delay>

	//  From data sheet the humidity need to be initialization first, and only works after temperature and pressure also has been initialization.
	dataWrite = 0x03; //00000011  // From data sheet its only the first 3 bits that counts. And 011 says its oversampling ×4
 80006c2:	2303      	movs	r3, #3
 80006c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(&hi2c1, 0x77<<1, 0xF2, 1, &dataWrite, 1, 1000);
 80006c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006cc:	9302      	str	r3, [sp, #8]
 80006ce:	2301      	movs	r3, #1
 80006d0:	9301      	str	r3, [sp, #4]
 80006d2:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80006d6:	9300      	str	r3, [sp, #0]
 80006d8:	2301      	movs	r3, #1
 80006da:	22f2      	movs	r2, #242	; 0xf2
 80006dc:	21ee      	movs	r1, #238	; 0xee
 80006de:	486a      	ldr	r0, [pc, #424]	; (8000888 <main+0x210>)
 80006e0:	f001 fb46 	bl	8001d70 <HAL_I2C_Mem_Write>

	HAL_Delay(100);
 80006e4:	2064      	movs	r0, #100	; 0x64
 80006e6:	f000 ffdb 	bl	80016a0 <HAL_Delay>

	//  From data sheet the humidity need to be initialization first, and only works after temperature and pressure also has been initialization.
	dataWrite = 0x27; //00100111 //bit 7,6,5 = temperature sampling (001), bit 4,3,2 = hum sampling (001), bit 1,0 = normal mode (11)
 80006ea:	2327      	movs	r3, #39	; 0x27
 80006ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(&hi2c1, 0x77<<1, 0xF4, 1, &dataWrite, 1, 1000);
 80006f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006f4:	9302      	str	r3, [sp, #8]
 80006f6:	2301      	movs	r3, #1
 80006f8:	9301      	str	r3, [sp, #4]
 80006fa:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80006fe:	9300      	str	r3, [sp, #0]
 8000700:	2301      	movs	r3, #1
 8000702:	22f4      	movs	r2, #244	; 0xf4
 8000704:	21ee      	movs	r1, #238	; 0xee
 8000706:	4860      	ldr	r0, [pc, #384]	; (8000888 <main+0x210>)
 8000708:	f001 fb32 	bl	8001d70 <HAL_I2C_Mem_Write>

	HAL_Delay(100);
 800070c:	2064      	movs	r0, #100	; 0x64
 800070e:	f000 ffc7 	bl	80016a0 <HAL_Delay>

	// Get compensating numbers
	calibData(&dig_T1, &dig_T2, &dig_T3, &dig_P1, &dig_P2, &dig_P3, &dig_P4, &dig_P5, &dig_P6, &dig_P7, &dig_P8, &dig_P9, &dig_H1, &dig_H2, &dig_H3, &dig_H4, &dig_H5, &dig_H6);
 8000712:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000716:	f103 0410 	add.w	r4, r3, #16
 800071a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800071e:	f103 021c 	add.w	r2, r3, #28
 8000722:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000726:	f103 011e 	add.w	r1, r3, #30
 800072a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800072e:	f103 0020 	add.w	r0, r3, #32
 8000732:	f107 0560 	add.w	r5, r7, #96	; 0x60
 8000736:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800073a:	3324      	adds	r3, #36	; 0x24
 800073c:	930d      	str	r3, [sp, #52]	; 0x34
 800073e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000742:	3306      	adds	r3, #6
 8000744:	930c      	str	r3, [sp, #48]	; 0x30
 8000746:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800074a:	3308      	adds	r3, #8
 800074c:	930b      	str	r3, [sp, #44]	; 0x2c
 800074e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000752:	3323      	adds	r3, #35	; 0x23
 8000754:	930a      	str	r3, [sp, #40]	; 0x28
 8000756:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800075a:	3304      	adds	r3, #4
 800075c:	9309      	str	r3, [sp, #36]	; 0x24
 800075e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000762:	3322      	adds	r3, #34	; 0x22
 8000764:	9308      	str	r3, [sp, #32]
 8000766:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800076a:	330e      	adds	r3, #14
 800076c:	9307      	str	r3, [sp, #28]
 800076e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000772:	330c      	adds	r3, #12
 8000774:	9306      	str	r3, [sp, #24]
 8000776:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800077a:	330a      	adds	r3, #10
 800077c:	9305      	str	r3, [sp, #20]
 800077e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000782:	331a      	adds	r3, #26
 8000784:	9304      	str	r3, [sp, #16]
 8000786:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800078a:	3318      	adds	r3, #24
 800078c:	9303      	str	r3, [sp, #12]
 800078e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000792:	3316      	adds	r3, #22
 8000794:	9302      	str	r3, [sp, #8]
 8000796:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800079a:	3314      	adds	r3, #20
 800079c:	9301      	str	r3, [sp, #4]
 800079e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80007a2:	3312      	adds	r3, #18
 80007a4:	9300      	str	r3, [sp, #0]
 80007a6:	46ac      	mov	ip, r5
 80007a8:	4623      	mov	r3, r4
 80007aa:	f000 fb79 	bl	8000ea0 <calibData.0>

	HAL_Delay(100);
 80007ae:	2064      	movs	r0, #100	; 0x64
 80007b0:	f000 ff76 	bl	80016a0 <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	// Get raw data from sensor memory
	HAL_I2C_Mem_Read(&hi2c1, 0x77<<1, 0xF7, 1, rawData, 8, 1000);
 80007b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007b8:	9302      	str	r3, [sp, #8]
 80007ba:	2308      	movs	r3, #8
 80007bc:	9301      	str	r3, [sp, #4]
 80007be:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80007c2:	9300      	str	r3, [sp, #0]
 80007c4:	2301      	movs	r3, #1
 80007c6:	22f7      	movs	r2, #247	; 0xf7
 80007c8:	21ee      	movs	r1, #238	; 0xee
 80007ca:	482f      	ldr	r0, [pc, #188]	; (8000888 <main+0x210>)
 80007cc:	f001 fbe4 	bl	8001f98 <HAL_I2C_Mem_Read>

	pRaw = (rawData[0]<<12)|(rawData[1]<<4)|(rawData[2]>>4); // Organize data from list to their corresponding variable as it is in data sheet.
 80007d0:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 80007d4:	031a      	lsls	r2, r3, #12
 80007d6:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 80007da:	011b      	lsls	r3, r3, #4
 80007dc:	4313      	orrs	r3, r2
 80007de:	f897 205a 	ldrb.w	r2, [r7, #90]	; 0x5a
 80007e2:	0912      	lsrs	r2, r2, #4
 80007e4:	b2d2      	uxtb	r2, r2
 80007e6:	4313      	orrs	r3, r2
 80007e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	tRaw = (rawData[3]<<12)|(rawData[4]<<4)|(rawData[5]>>4);
 80007ec:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80007f0:	031a      	lsls	r2, r3, #12
 80007f2:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80007f6:	011b      	lsls	r3, r3, #4
 80007f8:	4313      	orrs	r3, r2
 80007fa:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 80007fe:	0912      	lsrs	r2, r2, #4
 8000800:	b2d2      	uxtb	r2, r2
 8000802:	4313      	orrs	r3, r2
 8000804:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	hRaw = (rawData[6]<<8)|(rawData[7]);
 8000808:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800080c:	021b      	lsls	r3, r3, #8
 800080e:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8000812:	4313      	orrs	r3, r2
 8000814:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	temp = BME280_compensate_T_int32(tRaw); // Put data in function and receive corrected data
 8000818:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800081c:	469c      	mov	ip, r3
 800081e:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8000822:	f7ff fef3 	bl	800060c <BME280_compensate_T_int32.1>
 8000826:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
	pressure = BME280_compensate_P_int64(pRaw);
 800082a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800082e:	469c      	mov	ip, r3
 8000830:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8000834:	f000 f82e 	bl	8000894 <BME280_compensate_P_int64.2>
 8000838:	4603      	mov	r3, r0
 800083a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	humid = bme280_compensate_H_int32(hRaw);
 800083e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000842:	469c      	mov	ip, r3
 8000844:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8000848:	f000 face 	bl	8000de8 <bme280_compensate_H_int32.3>
 800084c:	4603      	mov	r3, r0
 800084e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	len = sprintf(sendData, "%u,%u,%u\r\n", temp, pressure, humid); // Turn initialization to string
 8000852:	1d38      	adds	r0, r7, #4
 8000854:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000858:	9300      	str	r3, [sp, #0]
 800085a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800085e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8000862:	490a      	ldr	r1, [pc, #40]	; (800088c <main+0x214>)
 8000864:	f004 f8c8 	bl	80049f8 <siprintf>
 8000868:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c

	HAL_UART_Transmit(&huart2, (uint8_t*) sendData, len, 10); // Sending with UART
 800086c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000870:	b29a      	uxth	r2, r3
 8000872:	1d39      	adds	r1, r7, #4
 8000874:	230a      	movs	r3, #10
 8000876:	4806      	ldr	r0, [pc, #24]	; (8000890 <main+0x218>)
 8000878:	f003 fb66 	bl	8003f48 <HAL_UART_Transmit>
	HAL_Delay(1000);
 800087c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000880:	f000 ff0e 	bl	80016a0 <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c1, 0x77<<1, 0xF7, 1, rawData, 8, 1000);
 8000884:	e796      	b.n	80007b4 <main+0x13c>
 8000886:	bf00      	nop
 8000888:	20000078 	.word	0x20000078
 800088c:	08005358 	.word	0x08005358
 8000890:	200000cc 	.word	0x200000cc

08000894 <BME280_compensate_P_int64.2>:
	uint32_t BME280_compensate_P_int64(int32_t adc_P) {
 8000894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000898:	b0cb      	sub	sp, #300	; 0x12c
 800089a:	af00      	add	r7, sp, #0
 800089c:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 80008a0:	4666      	mov	r6, ip
 80008a2:	f8c7 c108 	str.w	ip, [r7, #264]	; 0x108
		var1 = ((int64_t) t_fine) - 128000;
 80008a6:	6833      	ldr	r3, [r6, #0]
 80008a8:	17da      	asrs	r2, r3, #31
 80008aa:	461c      	mov	r4, r3
 80008ac:	4615      	mov	r5, r2
 80008ae:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 80008b2:	f145 3bff 	adc.w	fp, r5, #4294967295	; 0xffffffff
 80008b6:	e9c7 ab48 	strd	sl, fp, [r7, #288]	; 0x120
		var2 = var1 * var1 * (int64_t) dig_P6;
 80008ba:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80008be:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80008c2:	fb03 f102 	mul.w	r1, r3, r2
 80008c6:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80008ca:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80008ce:	fb02 f303 	mul.w	r3, r2, r3
 80008d2:	18ca      	adds	r2, r1, r3
 80008d4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80008d8:	fba3 8903 	umull	r8, r9, r3, r3
 80008dc:	eb02 0309 	add.w	r3, r2, r9
 80008e0:	4699      	mov	r9, r3
 80008e2:	f9b6 301a 	ldrsh.w	r3, [r6, #26]
 80008e6:	b21b      	sxth	r3, r3
 80008e8:	17da      	asrs	r2, r3, #31
 80008ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80008ee:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80008f2:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80008f6:	4603      	mov	r3, r0
 80008f8:	fb03 f209 	mul.w	r2, r3, r9
 80008fc:	460b      	mov	r3, r1
 80008fe:	fb08 f303 	mul.w	r3, r8, r3
 8000902:	4413      	add	r3, r2
 8000904:	4602      	mov	r2, r0
 8000906:	fba8 1202 	umull	r1, r2, r8, r2
 800090a:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800090e:	460a      	mov	r2, r1
 8000910:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8000914:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8000918:	4413      	add	r3, r2
 800091a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800091e:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8000922:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 8000926:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		var2 = var2 + ((var1 * (int64_t) dig_P5) << 17);
 800092a:	f9b6 3018 	ldrsh.w	r3, [r6, #24]
 800092e:	b21b      	sxth	r3, r3
 8000930:	17da      	asrs	r2, r3, #31
 8000932:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000936:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800093a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800093e:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8000942:	462a      	mov	r2, r5
 8000944:	fb02 f203 	mul.w	r2, r2, r3
 8000948:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800094c:	4621      	mov	r1, r4
 800094e:	fb01 f303 	mul.w	r3, r1, r3
 8000952:	441a      	add	r2, r3
 8000954:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000958:	4621      	mov	r1, r4
 800095a:	fba3 1301 	umull	r1, r3, r3, r1
 800095e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000962:	460b      	mov	r3, r1
 8000964:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8000968:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800096c:	18d3      	adds	r3, r2, r3
 800096e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000972:	f04f 0000 	mov.w	r0, #0
 8000976:	f04f 0100 	mov.w	r1, #0
 800097a:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 800097e:	462b      	mov	r3, r5
 8000980:	0459      	lsls	r1, r3, #17
 8000982:	4623      	mov	r3, r4
 8000984:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8000988:	4623      	mov	r3, r4
 800098a:	0458      	lsls	r0, r3, #17
 800098c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8000990:	1814      	adds	r4, r2, r0
 8000992:	643c      	str	r4, [r7, #64]	; 0x40
 8000994:	414b      	adcs	r3, r1
 8000996:	647b      	str	r3, [r7, #68]	; 0x44
 8000998:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800099c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		var2 = var2 + (((int64_t) dig_P4) << 35);
 80009a0:	f9b6 3016 	ldrsh.w	r3, [r6, #22]
 80009a4:	b21b      	sxth	r3, r3
 80009a6:	17da      	asrs	r2, r3, #31
 80009a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80009ac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80009b0:	f04f 0000 	mov.w	r0, #0
 80009b4:	f04f 0100 	mov.w	r1, #0
 80009b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80009bc:	00d9      	lsls	r1, r3, #3
 80009be:	2000      	movs	r0, #0
 80009c0:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80009c4:	1814      	adds	r4, r2, r0
 80009c6:	63bc      	str	r4, [r7, #56]	; 0x38
 80009c8:	414b      	adcs	r3, r1
 80009ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80009cc:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80009d0:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		var1 = ((var1 * var1 * (int64_t) dig_P3) >> 8)
 80009d4:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80009d8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80009dc:	fb03 f102 	mul.w	r1, r3, r2
 80009e0:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80009e4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80009e8:	fb02 f303 	mul.w	r3, r2, r3
 80009ec:	18ca      	adds	r2, r1, r3
 80009ee:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80009f2:	fba3 1303 	umull	r1, r3, r3, r3
 80009f6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80009fa:	460b      	mov	r3, r1
 80009fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8000a00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000a04:	18d3      	adds	r3, r2, r3
 8000a06:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8000a0a:	f9b6 3014 	ldrsh.w	r3, [r6, #20]
 8000a0e:	b21b      	sxth	r3, r3
 8000a10:	17da      	asrs	r2, r3, #31
 8000a12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8000a16:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8000a1a:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 8000a1e:	462b      	mov	r3, r5
 8000a20:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8000a24:	4642      	mov	r2, r8
 8000a26:	fb02 f203 	mul.w	r2, r2, r3
 8000a2a:	464b      	mov	r3, r9
 8000a2c:	4621      	mov	r1, r4
 8000a2e:	fb01 f303 	mul.w	r3, r1, r3
 8000a32:	4413      	add	r3, r2
 8000a34:	4622      	mov	r2, r4
 8000a36:	4641      	mov	r1, r8
 8000a38:	fba2 1201 	umull	r1, r2, r2, r1
 8000a3c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8000a40:	460a      	mov	r2, r1
 8000a42:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8000a46:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8000a4a:	4413      	add	r3, r2
 8000a4c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8000a50:	f04f 0000 	mov.w	r0, #0
 8000a54:	f04f 0100 	mov.w	r1, #0
 8000a58:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8000a5c:	4623      	mov	r3, r4
 8000a5e:	0a18      	lsrs	r0, r3, #8
 8000a60:	462b      	mov	r3, r5
 8000a62:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000a66:	462b      	mov	r3, r5
 8000a68:	1219      	asrs	r1, r3, #8
				+ ((var1 * (int64_t) dig_P2) << 12);
 8000a6a:	f9b6 3012 	ldrsh.w	r3, [r6, #18]
 8000a6e:	b21b      	sxth	r3, r3
 8000a70:	17da      	asrs	r2, r3, #31
 8000a72:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000a76:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8000a7a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000a7e:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8000a82:	464a      	mov	r2, r9
 8000a84:	fb02 f203 	mul.w	r2, r2, r3
 8000a88:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000a8c:	4644      	mov	r4, r8
 8000a8e:	fb04 f303 	mul.w	r3, r4, r3
 8000a92:	441a      	add	r2, r3
 8000a94:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000a98:	4644      	mov	r4, r8
 8000a9a:	fba3 4304 	umull	r4, r3, r3, r4
 8000a9e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8000aa2:	4623      	mov	r3, r4
 8000aa4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000aa8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000aac:	18d3      	adds	r3, r2, r3
 8000aae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8000ab2:	f04f 0200 	mov.w	r2, #0
 8000ab6:	f04f 0300 	mov.w	r3, #0
 8000aba:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8000abe:	464c      	mov	r4, r9
 8000ac0:	0323      	lsls	r3, r4, #12
 8000ac2:	4644      	mov	r4, r8
 8000ac4:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8000ac8:	4644      	mov	r4, r8
 8000aca:	0322      	lsls	r2, r4, #12
		var1 = ((var1 * var1 * (int64_t) dig_P3) >> 8)
 8000acc:	1884      	adds	r4, r0, r2
 8000ace:	633c      	str	r4, [r7, #48]	; 0x30
 8000ad0:	eb41 0303 	adc.w	r3, r1, r3
 8000ad4:	637b      	str	r3, [r7, #52]	; 0x34
 8000ad6:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8000ada:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
		var1 = (((((int64_t) 1) << 47) + var1)) * ((int64_t) dig_P1) >> 33;
 8000ade:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8000ae2:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8000ae6:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8000aea:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8000aee:	8a33      	ldrh	r3, [r6, #16]
 8000af0:	b29b      	uxth	r3, r3
 8000af2:	2200      	movs	r2, #0
 8000af4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000af8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8000afc:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8000b00:	462b      	mov	r3, r5
 8000b02:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8000b06:	4642      	mov	r2, r8
 8000b08:	fb02 f203 	mul.w	r2, r2, r3
 8000b0c:	464b      	mov	r3, r9
 8000b0e:	4621      	mov	r1, r4
 8000b10:	fb01 f303 	mul.w	r3, r1, r3
 8000b14:	4413      	add	r3, r2
 8000b16:	4622      	mov	r2, r4
 8000b18:	4641      	mov	r1, r8
 8000b1a:	fba2 1201 	umull	r1, r2, r2, r1
 8000b1e:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8000b22:	460a      	mov	r2, r1
 8000b24:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8000b28:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8000b2c:	4413      	add	r3, r2
 8000b2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8000b32:	f04f 0200 	mov.w	r2, #0
 8000b36:	f04f 0300 	mov.w	r3, #0
 8000b3a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8000b3e:	4629      	mov	r1, r5
 8000b40:	104a      	asrs	r2, r1, #1
 8000b42:	4629      	mov	r1, r5
 8000b44:	17cb      	asrs	r3, r1, #31
 8000b46:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
		if (var1 == 0) {
 8000b4a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8000b4e:	4313      	orrs	r3, r2
 8000b50:	d101      	bne.n	8000b56 <BME280_compensate_P_int64.2+0x2c2>
			return 0; // avoid exception caused by division by zero
 8000b52:	2300      	movs	r3, #0
 8000b54:	e142      	b.n	8000ddc <BME280_compensate_P_int64.2+0x548>
		p = 1048576 - adc_P;
 8000b56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000b5a:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8000b5e:	17da      	asrs	r2, r3, #31
 8000b60:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000b64:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8000b68:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
		p = (((p << 31) - var2) * 3125) / var1;
 8000b6c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000b70:	105b      	asrs	r3, r3, #1
 8000b72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000b76:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000b7a:	07db      	lsls	r3, r3, #31
 8000b7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000b80:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8000b84:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8000b88:	4621      	mov	r1, r4
 8000b8a:	1a89      	subs	r1, r1, r2
 8000b8c:	67b9      	str	r1, [r7, #120]	; 0x78
 8000b8e:	4629      	mov	r1, r5
 8000b90:	eb61 0303 	sbc.w	r3, r1, r3
 8000b94:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000b96:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8000b9a:	4622      	mov	r2, r4
 8000b9c:	462b      	mov	r3, r5
 8000b9e:	1891      	adds	r1, r2, r2
 8000ba0:	6239      	str	r1, [r7, #32]
 8000ba2:	415b      	adcs	r3, r3
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24
 8000ba6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000baa:	4621      	mov	r1, r4
 8000bac:	1851      	adds	r1, r2, r1
 8000bae:	61b9      	str	r1, [r7, #24]
 8000bb0:	4629      	mov	r1, r5
 8000bb2:	414b      	adcs	r3, r1
 8000bb4:	61fb      	str	r3, [r7, #28]
 8000bb6:	f04f 0200 	mov.w	r2, #0
 8000bba:	f04f 0300 	mov.w	r3, #0
 8000bbe:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8000bc2:	4649      	mov	r1, r9
 8000bc4:	018b      	lsls	r3, r1, #6
 8000bc6:	4641      	mov	r1, r8
 8000bc8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8000bcc:	4641      	mov	r1, r8
 8000bce:	018a      	lsls	r2, r1, #6
 8000bd0:	4641      	mov	r1, r8
 8000bd2:	1889      	adds	r1, r1, r2
 8000bd4:	6139      	str	r1, [r7, #16]
 8000bd6:	4649      	mov	r1, r9
 8000bd8:	eb43 0101 	adc.w	r1, r3, r1
 8000bdc:	6179      	str	r1, [r7, #20]
 8000bde:	f04f 0200 	mov.w	r2, #0
 8000be2:	f04f 0300 	mov.w	r3, #0
 8000be6:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8000bea:	4649      	mov	r1, r9
 8000bec:	008b      	lsls	r3, r1, #2
 8000bee:	4641      	mov	r1, r8
 8000bf0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000bf4:	4641      	mov	r1, r8
 8000bf6:	008a      	lsls	r2, r1, #2
 8000bf8:	4610      	mov	r0, r2
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	4622      	mov	r2, r4
 8000c00:	189b      	adds	r3, r3, r2
 8000c02:	60bb      	str	r3, [r7, #8]
 8000c04:	460b      	mov	r3, r1
 8000c06:	462a      	mov	r2, r5
 8000c08:	eb42 0303 	adc.w	r3, r2, r3
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	f04f 0200 	mov.w	r2, #0
 8000c12:	f04f 0300 	mov.w	r3, #0
 8000c16:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8000c1a:	4649      	mov	r1, r9
 8000c1c:	008b      	lsls	r3, r1, #2
 8000c1e:	4641      	mov	r1, r8
 8000c20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000c24:	4641      	mov	r1, r8
 8000c26:	008a      	lsls	r2, r1, #2
 8000c28:	4610      	mov	r0, r2
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	4622      	mov	r2, r4
 8000c30:	189b      	adds	r3, r3, r2
 8000c32:	673b      	str	r3, [r7, #112]	; 0x70
 8000c34:	462b      	mov	r3, r5
 8000c36:	460a      	mov	r2, r1
 8000c38:	eb42 0303 	adc.w	r3, r2, r3
 8000c3c:	677b      	str	r3, [r7, #116]	; 0x74
 8000c3e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8000c42:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8000c46:	f7ff fb13 	bl	8000270 <__aeabi_ldivmod>
 8000c4a:	4602      	mov	r2, r0
 8000c4c:	460b      	mov	r3, r1
 8000c4e:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
		var1 = (((int64_t) dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 8000c52:	f9b6 300e 	ldrsh.w	r3, [r6, #14]
 8000c56:	b21b      	sxth	r3, r3
 8000c58:	17da      	asrs	r2, r3, #31
 8000c5a:	66bb      	str	r3, [r7, #104]	; 0x68
 8000c5c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8000c5e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8000c62:	f04f 0000 	mov.w	r0, #0
 8000c66:	f04f 0100 	mov.w	r1, #0
 8000c6a:	0b50      	lsrs	r0, r2, #13
 8000c6c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000c70:	1359      	asrs	r1, r3, #13
 8000c72:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8000c76:	462b      	mov	r3, r5
 8000c78:	fb00 f203 	mul.w	r2, r0, r3
 8000c7c:	4623      	mov	r3, r4
 8000c7e:	fb03 f301 	mul.w	r3, r3, r1
 8000c82:	4413      	add	r3, r2
 8000c84:	4622      	mov	r2, r4
 8000c86:	fba2 1200 	umull	r1, r2, r2, r0
 8000c8a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8000c8e:	460a      	mov	r2, r1
 8000c90:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8000c94:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8000c98:	4413      	add	r3, r2
 8000c9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8000c9e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8000ca2:	f04f 0000 	mov.w	r0, #0
 8000ca6:	f04f 0100 	mov.w	r1, #0
 8000caa:	0b50      	lsrs	r0, r2, #13
 8000cac:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000cb0:	1359      	asrs	r1, r3, #13
 8000cb2:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8000cb6:	462b      	mov	r3, r5
 8000cb8:	fb00 f203 	mul.w	r2, r0, r3
 8000cbc:	4623      	mov	r3, r4
 8000cbe:	fb03 f301 	mul.w	r3, r3, r1
 8000cc2:	4413      	add	r3, r2
 8000cc4:	4622      	mov	r2, r4
 8000cc6:	fba2 1200 	umull	r1, r2, r2, r0
 8000cca:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8000cce:	460a      	mov	r2, r1
 8000cd0:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8000cd4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8000cd8:	4413      	add	r3, r2
 8000cda:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8000cde:	f04f 0200 	mov.w	r2, #0
 8000ce2:	f04f 0300 	mov.w	r3, #0
 8000ce6:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8000cea:	4621      	mov	r1, r4
 8000cec:	0e4a      	lsrs	r2, r1, #25
 8000cee:	4629      	mov	r1, r5
 8000cf0:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8000cf4:	4629      	mov	r1, r5
 8000cf6:	164b      	asrs	r3, r1, #25
 8000cf8:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
		var2 = (((int64_t) dig_P8) * p) >> 19;
 8000cfc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8000d00:	b21b      	sxth	r3, r3
 8000d02:	17da      	asrs	r2, r3, #31
 8000d04:	663b      	str	r3, [r7, #96]	; 0x60
 8000d06:	667a      	str	r2, [r7, #100]	; 0x64
 8000d08:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000d0c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8000d10:	462a      	mov	r2, r5
 8000d12:	fb02 f203 	mul.w	r2, r2, r3
 8000d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000d1a:	4621      	mov	r1, r4
 8000d1c:	fb01 f303 	mul.w	r3, r1, r3
 8000d20:	4413      	add	r3, r2
 8000d22:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8000d26:	4621      	mov	r1, r4
 8000d28:	fba2 1201 	umull	r1, r2, r2, r1
 8000d2c:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8000d30:	460a      	mov	r2, r1
 8000d32:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8000d36:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8000d3a:	4413      	add	r3, r2
 8000d3c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8000d40:	f04f 0200 	mov.w	r2, #0
 8000d44:	f04f 0300 	mov.w	r3, #0
 8000d48:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8000d4c:	4621      	mov	r1, r4
 8000d4e:	0cca      	lsrs	r2, r1, #19
 8000d50:	4629      	mov	r1, r5
 8000d52:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8000d56:	4629      	mov	r1, r5
 8000d58:	14cb      	asrs	r3, r1, #19
 8000d5a:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
		p = ((p + var1 + var2) >> 8) + (((int64_t) dig_P7) << 4);
 8000d5e:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8000d62:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8000d66:	1884      	adds	r4, r0, r2
 8000d68:	65bc      	str	r4, [r7, #88]	; 0x58
 8000d6a:	eb41 0303 	adc.w	r3, r1, r3
 8000d6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000d70:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8000d74:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8000d78:	4621      	mov	r1, r4
 8000d7a:	1889      	adds	r1, r1, r2
 8000d7c:	6539      	str	r1, [r7, #80]	; 0x50
 8000d7e:	4629      	mov	r1, r5
 8000d80:	eb43 0101 	adc.w	r1, r3, r1
 8000d84:	6579      	str	r1, [r7, #84]	; 0x54
 8000d86:	f04f 0000 	mov.w	r0, #0
 8000d8a:	f04f 0100 	mov.w	r1, #0
 8000d8e:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8000d92:	4623      	mov	r3, r4
 8000d94:	0a18      	lsrs	r0, r3, #8
 8000d96:	462b      	mov	r3, r5
 8000d98:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000d9c:	462b      	mov	r3, r5
 8000d9e:	1219      	asrs	r1, r3, #8
 8000da0:	f9b6 300a 	ldrsh.w	r3, [r6, #10]
 8000da4:	b21b      	sxth	r3, r3
 8000da6:	17da      	asrs	r2, r3, #31
 8000da8:	64bb      	str	r3, [r7, #72]	; 0x48
 8000daa:	64fa      	str	r2, [r7, #76]	; 0x4c
 8000dac:	f04f 0200 	mov.w	r2, #0
 8000db0:	f04f 0300 	mov.w	r3, #0
 8000db4:	e9d7 5612 	ldrd	r5, r6, [r7, #72]	; 0x48
 8000db8:	4634      	mov	r4, r6
 8000dba:	0123      	lsls	r3, r4, #4
 8000dbc:	462c      	mov	r4, r5
 8000dbe:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000dc2:	462c      	mov	r4, r5
 8000dc4:	0122      	lsls	r2, r4, #4
 8000dc6:	1884      	adds	r4, r0, r2
 8000dc8:	603c      	str	r4, [r7, #0]
 8000dca:	eb41 0303 	adc.w	r3, r1, r3
 8000dce:	607b      	str	r3, [r7, #4]
 8000dd0:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000dd4:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
		return (uint32_t) p;
 8000dd8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
	}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f507 7796 	add.w	r7, r7, #300	; 0x12c
 8000de2:	46bd      	mov	sp, r7
 8000de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000de8 <bme280_compensate_H_int32.3>:
	uint32_t bme280_compensate_H_int32(int32_t adc_H) {
 8000de8:	b490      	push	{r4, r7}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	4663      	mov	r3, ip
 8000df2:	f8c7 c000 	str.w	ip, [r7]
		v_x1_u32r = (t_fine - ((int32_t) 76800));
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	f5a2 3296 	sub.w	r2, r2, #76800	; 0x12c00
 8000dfc:	60fa      	str	r2, [r7, #12]
		v_x1_u32r = (((((adc_H << 14) - (((int32_t) dig_H4) << 20)
 8000dfe:	687a      	ldr	r2, [r7, #4]
 8000e00:	0391      	lsls	r1, r2, #14
 8000e02:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8000e06:	0512      	lsls	r2, r2, #20
 8000e08:	1a89      	subs	r1, r1, r2
				- (((int32_t) dig_H5) * v_x1_u32r)) + ((int32_t) 16384)) >> 15)
 8000e0a:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8000e0e:	4610      	mov	r0, r2
 8000e10:	68fa      	ldr	r2, [r7, #12]
 8000e12:	fb00 f202 	mul.w	r2, r0, r2
 8000e16:	1a8a      	subs	r2, r1, r2
 8000e18:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8000e1c:	13d2      	asrs	r2, r2, #15
				* (((((((v_x1_u32r * ((int32_t) dig_H6)) >> 10)
 8000e1e:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
 8000e22:	4608      	mov	r0, r1
 8000e24:	68f9      	ldr	r1, [r7, #12]
 8000e26:	fb00 f101 	mul.w	r1, r0, r1
 8000e2a:	1289      	asrs	r1, r1, #10
						* (((v_x1_u32r * ((int32_t) dig_H3)) >> 11)
 8000e2c:	f893 0023 	ldrb.w	r0, [r3, #35]	; 0x23
 8000e30:	4604      	mov	r4, r0
 8000e32:	68f8      	ldr	r0, [r7, #12]
 8000e34:	fb04 f000 	mul.w	r0, r4, r0
 8000e38:	12c0      	asrs	r0, r0, #11
								+ ((int32_t) 32768))) >> 10)
 8000e3a:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
						* (((v_x1_u32r * ((int32_t) dig_H3)) >> 11)
 8000e3e:	fb00 f101 	mul.w	r1, r0, r1
								+ ((int32_t) 32768))) >> 10)
 8000e42:	1289      	asrs	r1, r1, #10
						+ ((int32_t) 2097152)) * ((int32_t) dig_H2) + 8192)
 8000e44:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 8000e48:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
 8000e4c:	fb00 f101 	mul.w	r1, r0, r1
 8000e50:	f501 5100 	add.w	r1, r1, #8192	; 0x2000
						>> 14));
 8000e54:	1389      	asrs	r1, r1, #14
		v_x1_u32r = (((((adc_H << 14) - (((int32_t) dig_H4) << 20)
 8000e56:	fb01 f202 	mul.w	r2, r1, r2
 8000e5a:	60fa      	str	r2, [r7, #12]
				- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8000e5c:	68fa      	ldr	r2, [r7, #12]
 8000e5e:	13d2      	asrs	r2, r2, #15
 8000e60:	68f9      	ldr	r1, [r7, #12]
 8000e62:	13c9      	asrs	r1, r1, #15
 8000e64:	fb01 f202 	mul.w	r2, r1, r2
 8000e68:	11d2      	asrs	r2, r2, #7
						* ((int32_t) dig_H1)) >> 4));
 8000e6a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8000e6e:	fb02 f303 	mul.w	r3, r2, r3
 8000e72:	111b      	asrs	r3, r3, #4
		v_x1_u32r = (v_x1_u32r
 8000e74:	68fa      	ldr	r2, [r7, #12]
 8000e76:	1ad3      	subs	r3, r2, r3
 8000e78:	60fb      	str	r3, [r7, #12]
		v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8000e80:	60fb      	str	r3, [r7, #12]
		v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8000e88:	bfa8      	it	ge
 8000e8a:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8000e8e:	60fb      	str	r3, [r7, #12]
		return (uint32_t) (v_x1_u32r >> 12);
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	131b      	asrs	r3, r3, #12
	}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3710      	adds	r7, #16
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bc90      	pop	{r4, r7}
 8000e9c:	4770      	bx	lr
	...

08000ea0 <calibData.0>:
	void calibData(uint16_t *dig_T1,int16_t *dig_T2,int16_t *dig_T3,uint16_t *dig_P1,int16_t *dig_P2,int16_t *dig_P3,int16_t *dig_P4,int16_t *dig_P5,int16_t *dig_P6,int16_t *dig_P7,int16_t *dig_P8,int16_t *dig_P9,uint8_t *dig_H1,int16_t *dig_H2,uint8_t *dig_H3,int16_t *dig_H4,int16_t *dig_H5,uint8_t *dig_H6){
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b092      	sub	sp, #72	; 0x48
 8000ea4:	af04      	add	r7, sp, #16
 8000ea6:	6178      	str	r0, [r7, #20]
 8000ea8:	6139      	str	r1, [r7, #16]
 8000eaa:	60fa      	str	r2, [r7, #12]
 8000eac:	60bb      	str	r3, [r7, #8]
 8000eae:	f8c7 c004 	str.w	ip, [r7, #4]
		HAL_I2C_Mem_Read(&hi2c1, 0x77<<1, 0x88, 1, compData, 25, 1000);
 8000eb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eb6:	9302      	str	r3, [sp, #8]
 8000eb8:	2319      	movs	r3, #25
 8000eba:	9301      	str	r3, [sp, #4]
 8000ebc:	f107 0318 	add.w	r3, r7, #24
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	2288      	movs	r2, #136	; 0x88
 8000ec6:	21ee      	movs	r1, #238	; 0xee
 8000ec8:	4862      	ldr	r0, [pc, #392]	; (8001054 <calibData.0+0x1b4>)
 8000eca:	f001 f865 	bl	8001f98 <HAL_I2C_Mem_Read>
		HAL_I2C_Mem_Read(&hi2c1, 0x77<<1, 0xE1, 1, (uint8_t *)compData+25, 7, 1000);
 8000ece:	f107 0318 	add.w	r3, r7, #24
 8000ed2:	3319      	adds	r3, #25
 8000ed4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ed8:	9202      	str	r2, [sp, #8]
 8000eda:	2207      	movs	r2, #7
 8000edc:	9201      	str	r2, [sp, #4]
 8000ede:	9300      	str	r3, [sp, #0]
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	22e1      	movs	r2, #225	; 0xe1
 8000ee4:	21ee      	movs	r1, #238	; 0xee
 8000ee6:	485b      	ldr	r0, [pc, #364]	; (8001054 <calibData.0+0x1b4>)
 8000ee8:	f001 f856 	bl	8001f98 <HAL_I2C_Mem_Read>
		*dig_T1 = (compData[1] << 8) | compData[0]; // Organize data from list to their corresponding variable as it is in data sheet.
 8000eec:	7e7b      	ldrb	r3, [r7, #25]
 8000eee:	021b      	lsls	r3, r3, #8
 8000ef0:	b21a      	sxth	r2, r3
 8000ef2:	7e3b      	ldrb	r3, [r7, #24]
 8000ef4:	b21b      	sxth	r3, r3
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	b21b      	sxth	r3, r3
 8000efa:	b29a      	uxth	r2, r3
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	801a      	strh	r2, [r3, #0]
		*dig_T2 = (compData[3] << 8) | compData[2];
 8000f00:	7efb      	ldrb	r3, [r7, #27]
 8000f02:	021b      	lsls	r3, r3, #8
 8000f04:	b21a      	sxth	r2, r3
 8000f06:	7ebb      	ldrb	r3, [r7, #26]
 8000f08:	b21b      	sxth	r3, r3
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	b21a      	sxth	r2, r3
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	801a      	strh	r2, [r3, #0]
		*dig_T3 = (compData[5] << 8) | compData[4];
 8000f12:	7f7b      	ldrb	r3, [r7, #29]
 8000f14:	021b      	lsls	r3, r3, #8
 8000f16:	b21a      	sxth	r2, r3
 8000f18:	7f3b      	ldrb	r3, [r7, #28]
 8000f1a:	b21b      	sxth	r3, r3
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	b21a      	sxth	r2, r3
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	801a      	strh	r2, [r3, #0]
		*dig_P1 = (compData[7] << 8) | compData[5];
 8000f24:	7ffb      	ldrb	r3, [r7, #31]
 8000f26:	021b      	lsls	r3, r3, #8
 8000f28:	b21a      	sxth	r2, r3
 8000f2a:	7f7b      	ldrb	r3, [r7, #29]
 8000f2c:	b21b      	sxth	r3, r3
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	b21b      	sxth	r3, r3
 8000f32:	b29a      	uxth	r2, r3
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	801a      	strh	r2, [r3, #0]
		*dig_P2 = (compData[9] << 8) | compData[6];
 8000f38:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000f3c:	021b      	lsls	r3, r3, #8
 8000f3e:	b21a      	sxth	r2, r3
 8000f40:	7fbb      	ldrb	r3, [r7, #30]
 8000f42:	b21b      	sxth	r3, r3
 8000f44:	4313      	orrs	r3, r2
 8000f46:	b21a      	sxth	r2, r3
 8000f48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f4a:	801a      	strh	r2, [r3, #0]
		*dig_P3 = (compData[11] << 8) | compData[10];
 8000f4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000f50:	021b      	lsls	r3, r3, #8
 8000f52:	b21a      	sxth	r2, r3
 8000f54:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000f58:	b21b      	sxth	r3, r3
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	b21a      	sxth	r2, r3
 8000f5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f60:	801a      	strh	r2, [r3, #0]
		*dig_P4 = (compData[13] << 8) | compData[12];
 8000f62:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000f66:	021b      	lsls	r3, r3, #8
 8000f68:	b21a      	sxth	r2, r3
 8000f6a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000f6e:	b21b      	sxth	r3, r3
 8000f70:	4313      	orrs	r3, r2
 8000f72:	b21a      	sxth	r2, r3
 8000f74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f76:	801a      	strh	r2, [r3, #0]
		*dig_P5 = (compData[15] << 8) | compData[14];
 8000f78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f7c:	021b      	lsls	r3, r3, #8
 8000f7e:	b21a      	sxth	r2, r3
 8000f80:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000f84:	b21b      	sxth	r3, r3
 8000f86:	4313      	orrs	r3, r2
 8000f88:	b21a      	sxth	r2, r3
 8000f8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f8c:	801a      	strh	r2, [r3, #0]
		*dig_P6 = (compData[17] << 8) | compData[16];
 8000f8e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000f92:	021b      	lsls	r3, r3, #8
 8000f94:	b21a      	sxth	r2, r3
 8000f96:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000f9a:	b21b      	sxth	r3, r3
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	b21a      	sxth	r2, r3
 8000fa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000fa2:	801a      	strh	r2, [r3, #0]
		*dig_P7 = (compData[19] << 8) | compData[18];
 8000fa4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000fa8:	021b      	lsls	r3, r3, #8
 8000faa:	b21a      	sxth	r2, r3
 8000fac:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000fb0:	b21b      	sxth	r3, r3
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	b21a      	sxth	r2, r3
 8000fb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000fb8:	801a      	strh	r2, [r3, #0]
		*dig_P8 = (compData[21] << 8) | compData[20];
 8000fba:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000fbe:	021b      	lsls	r3, r3, #8
 8000fc0:	b21a      	sxth	r2, r3
 8000fc2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000fc6:	b21b      	sxth	r3, r3
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	b21a      	sxth	r2, r3
 8000fcc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000fce:	801a      	strh	r2, [r3, #0]
		*dig_P9 = (compData[23] << 8) | compData[22];
 8000fd0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000fd4:	021b      	lsls	r3, r3, #8
 8000fd6:	b21a      	sxth	r2, r3
 8000fd8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000fdc:	b21b      	sxth	r3, r3
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	b21a      	sxth	r2, r3
 8000fe2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000fe4:	801a      	strh	r2, [r3, #0]
		*dig_H1 = compData[24];
 8000fe6:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000fea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000fec:	701a      	strb	r2, [r3, #0]
		*dig_H2 = (compData[26] << 8) | compData[25];
 8000fee:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8000ff2:	021b      	lsls	r3, r3, #8
 8000ff4:	b21a      	sxth	r2, r3
 8000ff6:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8000ffa:	b21b      	sxth	r3, r3
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	b21a      	sxth	r2, r3
 8001000:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001002:	801a      	strh	r2, [r3, #0]
		*dig_H3 = (compData[27]);
 8001004:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8001008:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800100a:	701a      	strb	r2, [r3, #0]
		*dig_H4 = (compData[28] << 4) | (compData[29] & 0x0f);
 800100c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001010:	011b      	lsls	r3, r3, #4
 8001012:	b21a      	sxth	r2, r3
 8001014:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001018:	b21b      	sxth	r3, r3
 800101a:	f003 030f 	and.w	r3, r3, #15
 800101e:	b21b      	sxth	r3, r3
 8001020:	4313      	orrs	r3, r2
 8001022:	b21a      	sxth	r2, r3
 8001024:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001026:	801a      	strh	r2, [r3, #0]
		*dig_H5 = (compData[30] << 4) | (compData[29] >> 4);
 8001028:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800102c:	011b      	lsls	r3, r3, #4
 800102e:	b21a      	sxth	r2, r3
 8001030:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001034:	091b      	lsrs	r3, r3, #4
 8001036:	b2db      	uxtb	r3, r3
 8001038:	b21b      	sxth	r3, r3
 800103a:	4313      	orrs	r3, r2
 800103c:	b21a      	sxth	r2, r3
 800103e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001040:	801a      	strh	r2, [r3, #0]
		*dig_H6 = (compData[31]);
 8001042:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001046:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001048:	701a      	strb	r2, [r3, #0]
	}
 800104a:	bf00      	nop
 800104c:	3738      	adds	r7, #56	; 0x38
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	20000078 	.word	0x20000078

08001058 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b096      	sub	sp, #88	; 0x58
 800105c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800105e:	f107 0314 	add.w	r3, r7, #20
 8001062:	2244      	movs	r2, #68	; 0x44
 8001064:	2100      	movs	r1, #0
 8001066:	4618      	mov	r0, r3
 8001068:	f003 fce6 	bl	8004a38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800106c:	463b      	mov	r3, r7
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	605a      	str	r2, [r3, #4]
 8001074:	609a      	str	r2, [r3, #8]
 8001076:	60da      	str	r2, [r3, #12]
 8001078:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800107a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800107e:	f001 fc03 	bl	8002888 <HAL_PWREx_ControlVoltageScaling>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001088:	f000 f90e 	bl	80012a8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800108c:	2302      	movs	r3, #2
 800108e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001090:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001094:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001096:	2310      	movs	r3, #16
 8001098:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800109a:	2302      	movs	r3, #2
 800109c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800109e:	2302      	movs	r3, #2
 80010a0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010a2:	2301      	movs	r3, #1
 80010a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80010a6:	230a      	movs	r3, #10
 80010a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80010aa:	2307      	movs	r3, #7
 80010ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010ae:	2302      	movs	r3, #2
 80010b0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010b2:	2302      	movs	r3, #2
 80010b4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010b6:	f107 0314 	add.w	r3, r7, #20
 80010ba:	4618      	mov	r0, r3
 80010bc:	f001 fc3a 	bl	8002934 <HAL_RCC_OscConfig>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <SystemClock_Config+0x72>
  {
    Error_Handler();
 80010c6:	f000 f8ef 	bl	80012a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ca:	230f      	movs	r3, #15
 80010cc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ce:	2303      	movs	r3, #3
 80010d0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010d2:	2300      	movs	r3, #0
 80010d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010d6:	2300      	movs	r3, #0
 80010d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010da:	2300      	movs	r3, #0
 80010dc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010de:	463b      	mov	r3, r7
 80010e0:	2104      	movs	r1, #4
 80010e2:	4618      	mov	r0, r3
 80010e4:	f002 f802 	bl	80030ec <HAL_RCC_ClockConfig>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80010ee:	f000 f8db 	bl	80012a8 <Error_Handler>
  }
}
 80010f2:	bf00      	nop
 80010f4:	3758      	adds	r7, #88	; 0x58
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
	...

080010fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001100:	4b1b      	ldr	r3, [pc, #108]	; (8001170 <MX_I2C1_Init+0x74>)
 8001102:	4a1c      	ldr	r2, [pc, #112]	; (8001174 <MX_I2C1_Init+0x78>)
 8001104:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8001106:	4b1a      	ldr	r3, [pc, #104]	; (8001170 <MX_I2C1_Init+0x74>)
 8001108:	4a1b      	ldr	r2, [pc, #108]	; (8001178 <MX_I2C1_Init+0x7c>)
 800110a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800110c:	4b18      	ldr	r3, [pc, #96]	; (8001170 <MX_I2C1_Init+0x74>)
 800110e:	2200      	movs	r2, #0
 8001110:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001112:	4b17      	ldr	r3, [pc, #92]	; (8001170 <MX_I2C1_Init+0x74>)
 8001114:	2201      	movs	r2, #1
 8001116:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001118:	4b15      	ldr	r3, [pc, #84]	; (8001170 <MX_I2C1_Init+0x74>)
 800111a:	2200      	movs	r2, #0
 800111c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800111e:	4b14      	ldr	r3, [pc, #80]	; (8001170 <MX_I2C1_Init+0x74>)
 8001120:	2200      	movs	r2, #0
 8001122:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001124:	4b12      	ldr	r3, [pc, #72]	; (8001170 <MX_I2C1_Init+0x74>)
 8001126:	2200      	movs	r2, #0
 8001128:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800112a:	4b11      	ldr	r3, [pc, #68]	; (8001170 <MX_I2C1_Init+0x74>)
 800112c:	2200      	movs	r2, #0
 800112e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001130:	4b0f      	ldr	r3, [pc, #60]	; (8001170 <MX_I2C1_Init+0x74>)
 8001132:	2200      	movs	r2, #0
 8001134:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001136:	480e      	ldr	r0, [pc, #56]	; (8001170 <MX_I2C1_Init+0x74>)
 8001138:	f000 fd7e 	bl	8001c38 <HAL_I2C_Init>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001142:	f000 f8b1 	bl	80012a8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001146:	2100      	movs	r1, #0
 8001148:	4809      	ldr	r0, [pc, #36]	; (8001170 <MX_I2C1_Init+0x74>)
 800114a:	f001 faf7 	bl	800273c <HAL_I2CEx_ConfigAnalogFilter>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001154:	f000 f8a8 	bl	80012a8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001158:	2100      	movs	r1, #0
 800115a:	4805      	ldr	r0, [pc, #20]	; (8001170 <MX_I2C1_Init+0x74>)
 800115c:	f001 fb39 	bl	80027d2 <HAL_I2CEx_ConfigDigitalFilter>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001166:	f000 f89f 	bl	80012a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20000078 	.word	0x20000078
 8001174:	40005400 	.word	0x40005400
 8001178:	10909cec 	.word	0x10909cec

0800117c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001180:	4b14      	ldr	r3, [pc, #80]	; (80011d4 <MX_USART2_UART_Init+0x58>)
 8001182:	4a15      	ldr	r2, [pc, #84]	; (80011d8 <MX_USART2_UART_Init+0x5c>)
 8001184:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001186:	4b13      	ldr	r3, [pc, #76]	; (80011d4 <MX_USART2_UART_Init+0x58>)
 8001188:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800118c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800118e:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <MX_USART2_UART_Init+0x58>)
 8001190:	2200      	movs	r2, #0
 8001192:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001194:	4b0f      	ldr	r3, [pc, #60]	; (80011d4 <MX_USART2_UART_Init+0x58>)
 8001196:	2200      	movs	r2, #0
 8001198:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800119a:	4b0e      	ldr	r3, [pc, #56]	; (80011d4 <MX_USART2_UART_Init+0x58>)
 800119c:	2200      	movs	r2, #0
 800119e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011a0:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <MX_USART2_UART_Init+0x58>)
 80011a2:	220c      	movs	r2, #12
 80011a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011a6:	4b0b      	ldr	r3, [pc, #44]	; (80011d4 <MX_USART2_UART_Init+0x58>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011ac:	4b09      	ldr	r3, [pc, #36]	; (80011d4 <MX_USART2_UART_Init+0x58>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011b2:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <MX_USART2_UART_Init+0x58>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011b8:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <MX_USART2_UART_Init+0x58>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011be:	4805      	ldr	r0, [pc, #20]	; (80011d4 <MX_USART2_UART_Init+0x58>)
 80011c0:	f002 fe74 	bl	8003eac <HAL_UART_Init>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80011ca:	f000 f86d 	bl	80012a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	200000cc 	.word	0x200000cc
 80011d8:	40004400 	.word	0x40004400

080011dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08a      	sub	sp, #40	; 0x28
 80011e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e2:	f107 0314 	add.w	r3, r7, #20
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	605a      	str	r2, [r3, #4]
 80011ec:	609a      	str	r2, [r3, #8]
 80011ee:	60da      	str	r2, [r3, #12]
 80011f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011f2:	4b2b      	ldr	r3, [pc, #172]	; (80012a0 <MX_GPIO_Init+0xc4>)
 80011f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f6:	4a2a      	ldr	r2, [pc, #168]	; (80012a0 <MX_GPIO_Init+0xc4>)
 80011f8:	f043 0304 	orr.w	r3, r3, #4
 80011fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011fe:	4b28      	ldr	r3, [pc, #160]	; (80012a0 <MX_GPIO_Init+0xc4>)
 8001200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001202:	f003 0304 	and.w	r3, r3, #4
 8001206:	613b      	str	r3, [r7, #16]
 8001208:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800120a:	4b25      	ldr	r3, [pc, #148]	; (80012a0 <MX_GPIO_Init+0xc4>)
 800120c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120e:	4a24      	ldr	r2, [pc, #144]	; (80012a0 <MX_GPIO_Init+0xc4>)
 8001210:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001214:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001216:	4b22      	ldr	r3, [pc, #136]	; (80012a0 <MX_GPIO_Init+0xc4>)
 8001218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001222:	4b1f      	ldr	r3, [pc, #124]	; (80012a0 <MX_GPIO_Init+0xc4>)
 8001224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001226:	4a1e      	ldr	r2, [pc, #120]	; (80012a0 <MX_GPIO_Init+0xc4>)
 8001228:	f043 0301 	orr.w	r3, r3, #1
 800122c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800122e:	4b1c      	ldr	r3, [pc, #112]	; (80012a0 <MX_GPIO_Init+0xc4>)
 8001230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	60bb      	str	r3, [r7, #8]
 8001238:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800123a:	4b19      	ldr	r3, [pc, #100]	; (80012a0 <MX_GPIO_Init+0xc4>)
 800123c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123e:	4a18      	ldr	r2, [pc, #96]	; (80012a0 <MX_GPIO_Init+0xc4>)
 8001240:	f043 0302 	orr.w	r3, r3, #2
 8001244:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001246:	4b16      	ldr	r3, [pc, #88]	; (80012a0 <MX_GPIO_Init+0xc4>)
 8001248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124a:	f003 0302 	and.w	r3, r3, #2
 800124e:	607b      	str	r3, [r7, #4]
 8001250:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001252:	2200      	movs	r2, #0
 8001254:	2120      	movs	r1, #32
 8001256:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800125a:	f000 fcd5 	bl	8001c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800125e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001262:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001264:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001268:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800126e:	f107 0314 	add.w	r3, r7, #20
 8001272:	4619      	mov	r1, r3
 8001274:	480b      	ldr	r0, [pc, #44]	; (80012a4 <MX_GPIO_Init+0xc8>)
 8001276:	f000 fb1d 	bl	80018b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800127a:	2320      	movs	r3, #32
 800127c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127e:	2301      	movs	r3, #1
 8001280:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001286:	2300      	movs	r3, #0
 8001288:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800128a:	f107 0314 	add.w	r3, r7, #20
 800128e:	4619      	mov	r1, r3
 8001290:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001294:	f000 fb0e 	bl	80018b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001298:	bf00      	nop
 800129a:	3728      	adds	r7, #40	; 0x28
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40021000 	.word	0x40021000
 80012a4:	48000800 	.word	0x48000800

080012a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012ac:	b672      	cpsid	i
}
 80012ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012b0:	e7fe      	b.n	80012b0 <Error_Handler+0x8>
	...

080012b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ba:	4b0f      	ldr	r3, [pc, #60]	; (80012f8 <HAL_MspInit+0x44>)
 80012bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012be:	4a0e      	ldr	r2, [pc, #56]	; (80012f8 <HAL_MspInit+0x44>)
 80012c0:	f043 0301 	orr.w	r3, r3, #1
 80012c4:	6613      	str	r3, [r2, #96]	; 0x60
 80012c6:	4b0c      	ldr	r3, [pc, #48]	; (80012f8 <HAL_MspInit+0x44>)
 80012c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012ca:	f003 0301 	and.w	r3, r3, #1
 80012ce:	607b      	str	r3, [r7, #4]
 80012d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012d2:	4b09      	ldr	r3, [pc, #36]	; (80012f8 <HAL_MspInit+0x44>)
 80012d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012d6:	4a08      	ldr	r2, [pc, #32]	; (80012f8 <HAL_MspInit+0x44>)
 80012d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012dc:	6593      	str	r3, [r2, #88]	; 0x58
 80012de:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <HAL_MspInit+0x44>)
 80012e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e6:	603b      	str	r3, [r7, #0]
 80012e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ea:	bf00      	nop
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	40021000 	.word	0x40021000

080012fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b0ac      	sub	sp, #176	; 0xb0
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001304:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001314:	f107 0314 	add.w	r3, r7, #20
 8001318:	2288      	movs	r2, #136	; 0x88
 800131a:	2100      	movs	r1, #0
 800131c:	4618      	mov	r0, r3
 800131e:	f003 fb8b 	bl	8004a38 <memset>
  if(hi2c->Instance==I2C1)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a21      	ldr	r2, [pc, #132]	; (80013ac <HAL_I2C_MspInit+0xb0>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d13b      	bne.n	80013a4 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800132c:	2340      	movs	r3, #64	; 0x40
 800132e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001330:	2300      	movs	r3, #0
 8001332:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001334:	f107 0314 	add.w	r3, r7, #20
 8001338:	4618      	mov	r0, r3
 800133a:	f002 f8fb 	bl	8003534 <HAL_RCCEx_PeriphCLKConfig>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001344:	f7ff ffb0 	bl	80012a8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001348:	4b19      	ldr	r3, [pc, #100]	; (80013b0 <HAL_I2C_MspInit+0xb4>)
 800134a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800134c:	4a18      	ldr	r2, [pc, #96]	; (80013b0 <HAL_I2C_MspInit+0xb4>)
 800134e:	f043 0302 	orr.w	r3, r3, #2
 8001352:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001354:	4b16      	ldr	r3, [pc, #88]	; (80013b0 <HAL_I2C_MspInit+0xb4>)
 8001356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001358:	f003 0302 	and.w	r3, r3, #2
 800135c:	613b      	str	r3, [r7, #16]
 800135e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001360:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001364:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001368:	2312      	movs	r3, #18
 800136a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001374:	2303      	movs	r3, #3
 8001376:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800137a:	2304      	movs	r3, #4
 800137c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001380:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001384:	4619      	mov	r1, r3
 8001386:	480b      	ldr	r0, [pc, #44]	; (80013b4 <HAL_I2C_MspInit+0xb8>)
 8001388:	f000 fa94 	bl	80018b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800138c:	4b08      	ldr	r3, [pc, #32]	; (80013b0 <HAL_I2C_MspInit+0xb4>)
 800138e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001390:	4a07      	ldr	r2, [pc, #28]	; (80013b0 <HAL_I2C_MspInit+0xb4>)
 8001392:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001396:	6593      	str	r3, [r2, #88]	; 0x58
 8001398:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <HAL_I2C_MspInit+0xb4>)
 800139a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800139c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80013a4:	bf00      	nop
 80013a6:	37b0      	adds	r7, #176	; 0xb0
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40005400 	.word	0x40005400
 80013b0:	40021000 	.word	0x40021000
 80013b4:	48000400 	.word	0x48000400

080013b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b0ac      	sub	sp, #176	; 0xb0
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013d0:	f107 0314 	add.w	r3, r7, #20
 80013d4:	2288      	movs	r2, #136	; 0x88
 80013d6:	2100      	movs	r1, #0
 80013d8:	4618      	mov	r0, r3
 80013da:	f003 fb2d 	bl	8004a38 <memset>
  if(huart->Instance==USART2)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a21      	ldr	r2, [pc, #132]	; (8001468 <HAL_UART_MspInit+0xb0>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d13b      	bne.n	8001460 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80013e8:	2302      	movs	r3, #2
 80013ea:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80013ec:	2300      	movs	r3, #0
 80013ee:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013f0:	f107 0314 	add.w	r3, r7, #20
 80013f4:	4618      	mov	r0, r3
 80013f6:	f002 f89d 	bl	8003534 <HAL_RCCEx_PeriphCLKConfig>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001400:	f7ff ff52 	bl	80012a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001404:	4b19      	ldr	r3, [pc, #100]	; (800146c <HAL_UART_MspInit+0xb4>)
 8001406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001408:	4a18      	ldr	r2, [pc, #96]	; (800146c <HAL_UART_MspInit+0xb4>)
 800140a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800140e:	6593      	str	r3, [r2, #88]	; 0x58
 8001410:	4b16      	ldr	r3, [pc, #88]	; (800146c <HAL_UART_MspInit+0xb4>)
 8001412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001418:	613b      	str	r3, [r7, #16]
 800141a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800141c:	4b13      	ldr	r3, [pc, #76]	; (800146c <HAL_UART_MspInit+0xb4>)
 800141e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001420:	4a12      	ldr	r2, [pc, #72]	; (800146c <HAL_UART_MspInit+0xb4>)
 8001422:	f043 0301 	orr.w	r3, r3, #1
 8001426:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001428:	4b10      	ldr	r3, [pc, #64]	; (800146c <HAL_UART_MspInit+0xb4>)
 800142a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142c:	f003 0301 	and.w	r3, r3, #1
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001434:	230c      	movs	r3, #12
 8001436:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143a:	2302      	movs	r3, #2
 800143c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001446:	2303      	movs	r3, #3
 8001448:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800144c:	2307      	movs	r3, #7
 800144e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001452:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001456:	4619      	mov	r1, r3
 8001458:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800145c:	f000 fa2a 	bl	80018b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001460:	bf00      	nop
 8001462:	37b0      	adds	r7, #176	; 0xb0
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	40004400 	.word	0x40004400
 800146c:	40021000 	.word	0x40021000

08001470 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001474:	e7fe      	b.n	8001474 <NMI_Handler+0x4>

08001476 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001476:	b480      	push	{r7}
 8001478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800147a:	e7fe      	b.n	800147a <HardFault_Handler+0x4>

0800147c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001480:	e7fe      	b.n	8001480 <MemManage_Handler+0x4>

08001482 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001482:	b480      	push	{r7}
 8001484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001486:	e7fe      	b.n	8001486 <BusFault_Handler+0x4>

08001488 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800148c:	e7fe      	b.n	800148c <UsageFault_Handler+0x4>

0800148e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800148e:	b480      	push	{r7}
 8001490:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001492:	bf00      	nop
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr

080014aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014bc:	f000 f8d0 	bl	8001660 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014c0:	bf00      	nop
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014cc:	4a14      	ldr	r2, [pc, #80]	; (8001520 <_sbrk+0x5c>)
 80014ce:	4b15      	ldr	r3, [pc, #84]	; (8001524 <_sbrk+0x60>)
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014d8:	4b13      	ldr	r3, [pc, #76]	; (8001528 <_sbrk+0x64>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d102      	bne.n	80014e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014e0:	4b11      	ldr	r3, [pc, #68]	; (8001528 <_sbrk+0x64>)
 80014e2:	4a12      	ldr	r2, [pc, #72]	; (800152c <_sbrk+0x68>)
 80014e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014e6:	4b10      	ldr	r3, [pc, #64]	; (8001528 <_sbrk+0x64>)
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4413      	add	r3, r2
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d207      	bcs.n	8001504 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014f4:	f003 faa8 	bl	8004a48 <__errno>
 80014f8:	4603      	mov	r3, r0
 80014fa:	220c      	movs	r2, #12
 80014fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001502:	e009      	b.n	8001518 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001504:	4b08      	ldr	r3, [pc, #32]	; (8001528 <_sbrk+0x64>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800150a:	4b07      	ldr	r3, [pc, #28]	; (8001528 <_sbrk+0x64>)
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4413      	add	r3, r2
 8001512:	4a05      	ldr	r2, [pc, #20]	; (8001528 <_sbrk+0x64>)
 8001514:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001516:	68fb      	ldr	r3, [r7, #12]
}
 8001518:	4618      	mov	r0, r3
 800151a:	3718      	adds	r7, #24
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20018000 	.word	0x20018000
 8001524:	00000400 	.word	0x00000400
 8001528:	20000154 	.word	0x20000154
 800152c:	200002a8 	.word	0x200002a8

08001530 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001534:	4b06      	ldr	r3, [pc, #24]	; (8001550 <SystemInit+0x20>)
 8001536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800153a:	4a05      	ldr	r2, [pc, #20]	; (8001550 <SystemInit+0x20>)
 800153c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001540:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001544:	bf00      	nop
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	e000ed00 	.word	0xe000ed00

08001554 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001554:	f8df d034 	ldr.w	sp, [pc, #52]	; 800158c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001558:	f7ff ffea 	bl	8001530 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800155c:	480c      	ldr	r0, [pc, #48]	; (8001590 <LoopForever+0x6>)
  ldr r1, =_edata
 800155e:	490d      	ldr	r1, [pc, #52]	; (8001594 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001560:	4a0d      	ldr	r2, [pc, #52]	; (8001598 <LoopForever+0xe>)
  movs r3, #0
 8001562:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001564:	e002      	b.n	800156c <LoopCopyDataInit>

08001566 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001566:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001568:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800156a:	3304      	adds	r3, #4

0800156c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800156c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800156e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001570:	d3f9      	bcc.n	8001566 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001572:	4a0a      	ldr	r2, [pc, #40]	; (800159c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001574:	4c0a      	ldr	r4, [pc, #40]	; (80015a0 <LoopForever+0x16>)
  movs r3, #0
 8001576:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001578:	e001      	b.n	800157e <LoopFillZerobss>

0800157a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800157a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800157c:	3204      	adds	r2, #4

0800157e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800157e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001580:	d3fb      	bcc.n	800157a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001582:	f003 fa67 	bl	8004a54 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001586:	f7ff f877 	bl	8000678 <main>

0800158a <LoopForever>:

LoopForever:
    b LoopForever
 800158a:	e7fe      	b.n	800158a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800158c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001590:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001594:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001598:	080053f0 	.word	0x080053f0
  ldr r2, =_sbss
 800159c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80015a0:	200002a4 	.word	0x200002a4

080015a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015a4:	e7fe      	b.n	80015a4 <ADC1_2_IRQHandler>
	...

080015a8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015ae:	2300      	movs	r3, #0
 80015b0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015b2:	4b0c      	ldr	r3, [pc, #48]	; (80015e4 <HAL_Init+0x3c>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a0b      	ldr	r2, [pc, #44]	; (80015e4 <HAL_Init+0x3c>)
 80015b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015bc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015be:	2003      	movs	r0, #3
 80015c0:	f000 f944 	bl	800184c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015c4:	2000      	movs	r0, #0
 80015c6:	f000 f80f 	bl	80015e8 <HAL_InitTick>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d002      	beq.n	80015d6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	71fb      	strb	r3, [r7, #7]
 80015d4:	e001      	b.n	80015da <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015d6:	f7ff fe6d 	bl	80012b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015da:	79fb      	ldrb	r3, [r7, #7]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3708      	adds	r7, #8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	40022000 	.word	0x40022000

080015e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80015f0:	2300      	movs	r3, #0
 80015f2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80015f4:	4b17      	ldr	r3, [pc, #92]	; (8001654 <HAL_InitTick+0x6c>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d023      	beq.n	8001644 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80015fc:	4b16      	ldr	r3, [pc, #88]	; (8001658 <HAL_InitTick+0x70>)
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	4b14      	ldr	r3, [pc, #80]	; (8001654 <HAL_InitTick+0x6c>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	4619      	mov	r1, r3
 8001606:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800160a:	fbb3 f3f1 	udiv	r3, r3, r1
 800160e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001612:	4618      	mov	r0, r3
 8001614:	f000 f941 	bl	800189a <HAL_SYSTICK_Config>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d10f      	bne.n	800163e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2b0f      	cmp	r3, #15
 8001622:	d809      	bhi.n	8001638 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001624:	2200      	movs	r2, #0
 8001626:	6879      	ldr	r1, [r7, #4]
 8001628:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800162c:	f000 f919 	bl	8001862 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001630:	4a0a      	ldr	r2, [pc, #40]	; (800165c <HAL_InitTick+0x74>)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6013      	str	r3, [r2, #0]
 8001636:	e007      	b.n	8001648 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	73fb      	strb	r3, [r7, #15]
 800163c:	e004      	b.n	8001648 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	73fb      	strb	r3, [r7, #15]
 8001642:	e001      	b.n	8001648 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001648:	7bfb      	ldrb	r3, [r7, #15]
}
 800164a:	4618      	mov	r0, r3
 800164c:	3710      	adds	r7, #16
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	20000008 	.word	0x20000008
 8001658:	20000000 	.word	0x20000000
 800165c:	20000004 	.word	0x20000004

08001660 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001664:	4b06      	ldr	r3, [pc, #24]	; (8001680 <HAL_IncTick+0x20>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	461a      	mov	r2, r3
 800166a:	4b06      	ldr	r3, [pc, #24]	; (8001684 <HAL_IncTick+0x24>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4413      	add	r3, r2
 8001670:	4a04      	ldr	r2, [pc, #16]	; (8001684 <HAL_IncTick+0x24>)
 8001672:	6013      	str	r3, [r2, #0]
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	20000008 	.word	0x20000008
 8001684:	20000158 	.word	0x20000158

08001688 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  return uwTick;
 800168c:	4b03      	ldr	r3, [pc, #12]	; (800169c <HAL_GetTick+0x14>)
 800168e:	681b      	ldr	r3, [r3, #0]
}
 8001690:	4618      	mov	r0, r3
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	20000158 	.word	0x20000158

080016a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016a8:	f7ff ffee 	bl	8001688 <HAL_GetTick>
 80016ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016b8:	d005      	beq.n	80016c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80016ba:	4b0a      	ldr	r3, [pc, #40]	; (80016e4 <HAL_Delay+0x44>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	461a      	mov	r2, r3
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	4413      	add	r3, r2
 80016c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016c6:	bf00      	nop
 80016c8:	f7ff ffde 	bl	8001688 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	68fa      	ldr	r2, [r7, #12]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d8f7      	bhi.n	80016c8 <HAL_Delay+0x28>
  {
  }
}
 80016d8:	bf00      	nop
 80016da:	bf00      	nop
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000008 	.word	0x20000008

080016e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f003 0307 	and.w	r3, r3, #7
 80016f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016f8:	4b0c      	ldr	r3, [pc, #48]	; (800172c <__NVIC_SetPriorityGrouping+0x44>)
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016fe:	68ba      	ldr	r2, [r7, #8]
 8001700:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001704:	4013      	ands	r3, r2
 8001706:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001710:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001714:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001718:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800171a:	4a04      	ldr	r2, [pc, #16]	; (800172c <__NVIC_SetPriorityGrouping+0x44>)
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	60d3      	str	r3, [r2, #12]
}
 8001720:	bf00      	nop
 8001722:	3714      	adds	r7, #20
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	e000ed00 	.word	0xe000ed00

08001730 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001734:	4b04      	ldr	r3, [pc, #16]	; (8001748 <__NVIC_GetPriorityGrouping+0x18>)
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	0a1b      	lsrs	r3, r3, #8
 800173a:	f003 0307 	and.w	r3, r3, #7
}
 800173e:	4618      	mov	r0, r3
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr
 8001748:	e000ed00 	.word	0xe000ed00

0800174c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	4603      	mov	r3, r0
 8001754:	6039      	str	r1, [r7, #0]
 8001756:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175c:	2b00      	cmp	r3, #0
 800175e:	db0a      	blt.n	8001776 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	b2da      	uxtb	r2, r3
 8001764:	490c      	ldr	r1, [pc, #48]	; (8001798 <__NVIC_SetPriority+0x4c>)
 8001766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176a:	0112      	lsls	r2, r2, #4
 800176c:	b2d2      	uxtb	r2, r2
 800176e:	440b      	add	r3, r1
 8001770:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001774:	e00a      	b.n	800178c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	b2da      	uxtb	r2, r3
 800177a:	4908      	ldr	r1, [pc, #32]	; (800179c <__NVIC_SetPriority+0x50>)
 800177c:	79fb      	ldrb	r3, [r7, #7]
 800177e:	f003 030f 	and.w	r3, r3, #15
 8001782:	3b04      	subs	r3, #4
 8001784:	0112      	lsls	r2, r2, #4
 8001786:	b2d2      	uxtb	r2, r2
 8001788:	440b      	add	r3, r1
 800178a:	761a      	strb	r2, [r3, #24]
}
 800178c:	bf00      	nop
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	e000e100 	.word	0xe000e100
 800179c:	e000ed00 	.word	0xe000ed00

080017a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b089      	sub	sp, #36	; 0x24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	f1c3 0307 	rsb	r3, r3, #7
 80017ba:	2b04      	cmp	r3, #4
 80017bc:	bf28      	it	cs
 80017be:	2304      	movcs	r3, #4
 80017c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	3304      	adds	r3, #4
 80017c6:	2b06      	cmp	r3, #6
 80017c8:	d902      	bls.n	80017d0 <NVIC_EncodePriority+0x30>
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	3b03      	subs	r3, #3
 80017ce:	e000      	b.n	80017d2 <NVIC_EncodePriority+0x32>
 80017d0:	2300      	movs	r3, #0
 80017d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	43da      	mvns	r2, r3
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	401a      	ands	r2, r3
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	fa01 f303 	lsl.w	r3, r1, r3
 80017f2:	43d9      	mvns	r1, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f8:	4313      	orrs	r3, r2
         );
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3724      	adds	r7, #36	; 0x24
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
	...

08001808 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	3b01      	subs	r3, #1
 8001814:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001818:	d301      	bcc.n	800181e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800181a:	2301      	movs	r3, #1
 800181c:	e00f      	b.n	800183e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800181e:	4a0a      	ldr	r2, [pc, #40]	; (8001848 <SysTick_Config+0x40>)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	3b01      	subs	r3, #1
 8001824:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001826:	210f      	movs	r1, #15
 8001828:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800182c:	f7ff ff8e 	bl	800174c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001830:	4b05      	ldr	r3, [pc, #20]	; (8001848 <SysTick_Config+0x40>)
 8001832:	2200      	movs	r2, #0
 8001834:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001836:	4b04      	ldr	r3, [pc, #16]	; (8001848 <SysTick_Config+0x40>)
 8001838:	2207      	movs	r2, #7
 800183a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	e000e010 	.word	0xe000e010

0800184c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f7ff ff47 	bl	80016e8 <__NVIC_SetPriorityGrouping>
}
 800185a:	bf00      	nop
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b086      	sub	sp, #24
 8001866:	af00      	add	r7, sp, #0
 8001868:	4603      	mov	r3, r0
 800186a:	60b9      	str	r1, [r7, #8]
 800186c:	607a      	str	r2, [r7, #4]
 800186e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001870:	2300      	movs	r3, #0
 8001872:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001874:	f7ff ff5c 	bl	8001730 <__NVIC_GetPriorityGrouping>
 8001878:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	68b9      	ldr	r1, [r7, #8]
 800187e:	6978      	ldr	r0, [r7, #20]
 8001880:	f7ff ff8e 	bl	80017a0 <NVIC_EncodePriority>
 8001884:	4602      	mov	r2, r0
 8001886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800188a:	4611      	mov	r1, r2
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff ff5d 	bl	800174c <__NVIC_SetPriority>
}
 8001892:	bf00      	nop
 8001894:	3718      	adds	r7, #24
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800189a:	b580      	push	{r7, lr}
 800189c:	b082      	sub	sp, #8
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f7ff ffb0 	bl	8001808 <SysTick_Config>
 80018a8:	4603      	mov	r3, r0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
	...

080018b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b087      	sub	sp, #28
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018be:	2300      	movs	r3, #0
 80018c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018c2:	e17f      	b.n	8001bc4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	2101      	movs	r1, #1
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	fa01 f303 	lsl.w	r3, r1, r3
 80018d0:	4013      	ands	r3, r2
 80018d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	f000 8171 	beq.w	8001bbe <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f003 0303 	and.w	r3, r3, #3
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d005      	beq.n	80018f4 <HAL_GPIO_Init+0x40>
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f003 0303 	and.w	r3, r3, #3
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d130      	bne.n	8001956 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	2203      	movs	r2, #3
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	43db      	mvns	r3, r3
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	4013      	ands	r3, r2
 800190a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	68da      	ldr	r2, [r3, #12]
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	4313      	orrs	r3, r2
 800191c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	693a      	ldr	r2, [r7, #16]
 8001922:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800192a:	2201      	movs	r2, #1
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	43db      	mvns	r3, r3
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	4013      	ands	r3, r2
 8001938:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	091b      	lsrs	r3, r3, #4
 8001940:	f003 0201 	and.w	r2, r3, #1
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	4313      	orrs	r3, r2
 800194e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f003 0303 	and.w	r3, r3, #3
 800195e:	2b03      	cmp	r3, #3
 8001960:	d118      	bne.n	8001994 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001966:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001968:	2201      	movs	r2, #1
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	43db      	mvns	r3, r3
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	4013      	ands	r3, r2
 8001976:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	08db      	lsrs	r3, r3, #3
 800197e:	f003 0201 	and.w	r2, r3, #1
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	4313      	orrs	r3, r2
 800198c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	693a      	ldr	r2, [r7, #16]
 8001992:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f003 0303 	and.w	r3, r3, #3
 800199c:	2b03      	cmp	r3, #3
 800199e:	d017      	beq.n	80019d0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	2203      	movs	r2, #3
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	43db      	mvns	r3, r3
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	4013      	ands	r3, r2
 80019b6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	689a      	ldr	r2, [r3, #8]
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	693a      	ldr	r2, [r7, #16]
 80019ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f003 0303 	and.w	r3, r3, #3
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d123      	bne.n	8001a24 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	08da      	lsrs	r2, r3, #3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	3208      	adds	r2, #8
 80019e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	f003 0307 	and.w	r3, r3, #7
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	220f      	movs	r2, #15
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	43db      	mvns	r3, r3
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	4013      	ands	r3, r2
 80019fe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	691a      	ldr	r2, [r3, #16]
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	f003 0307 	and.w	r3, r3, #7
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	693a      	ldr	r2, [r7, #16]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	08da      	lsrs	r2, r3, #3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	3208      	adds	r2, #8
 8001a1e:	6939      	ldr	r1, [r7, #16]
 8001a20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	2203      	movs	r2, #3
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	43db      	mvns	r3, r3
 8001a36:	693a      	ldr	r2, [r7, #16]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f003 0203 	and.w	r2, r3, #3
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	f000 80ac 	beq.w	8001bbe <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a66:	4b5f      	ldr	r3, [pc, #380]	; (8001be4 <HAL_GPIO_Init+0x330>)
 8001a68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a6a:	4a5e      	ldr	r2, [pc, #376]	; (8001be4 <HAL_GPIO_Init+0x330>)
 8001a6c:	f043 0301 	orr.w	r3, r3, #1
 8001a70:	6613      	str	r3, [r2, #96]	; 0x60
 8001a72:	4b5c      	ldr	r3, [pc, #368]	; (8001be4 <HAL_GPIO_Init+0x330>)
 8001a74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	60bb      	str	r3, [r7, #8]
 8001a7c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a7e:	4a5a      	ldr	r2, [pc, #360]	; (8001be8 <HAL_GPIO_Init+0x334>)
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	089b      	lsrs	r3, r3, #2
 8001a84:	3302      	adds	r3, #2
 8001a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	f003 0303 	and.w	r3, r3, #3
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	220f      	movs	r2, #15
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001aa8:	d025      	beq.n	8001af6 <HAL_GPIO_Init+0x242>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a4f      	ldr	r2, [pc, #316]	; (8001bec <HAL_GPIO_Init+0x338>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d01f      	beq.n	8001af2 <HAL_GPIO_Init+0x23e>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a4e      	ldr	r2, [pc, #312]	; (8001bf0 <HAL_GPIO_Init+0x33c>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d019      	beq.n	8001aee <HAL_GPIO_Init+0x23a>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a4d      	ldr	r2, [pc, #308]	; (8001bf4 <HAL_GPIO_Init+0x340>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d013      	beq.n	8001aea <HAL_GPIO_Init+0x236>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4a4c      	ldr	r2, [pc, #304]	; (8001bf8 <HAL_GPIO_Init+0x344>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d00d      	beq.n	8001ae6 <HAL_GPIO_Init+0x232>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a4b      	ldr	r2, [pc, #300]	; (8001bfc <HAL_GPIO_Init+0x348>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d007      	beq.n	8001ae2 <HAL_GPIO_Init+0x22e>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a4a      	ldr	r2, [pc, #296]	; (8001c00 <HAL_GPIO_Init+0x34c>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d101      	bne.n	8001ade <HAL_GPIO_Init+0x22a>
 8001ada:	2306      	movs	r3, #6
 8001adc:	e00c      	b.n	8001af8 <HAL_GPIO_Init+0x244>
 8001ade:	2307      	movs	r3, #7
 8001ae0:	e00a      	b.n	8001af8 <HAL_GPIO_Init+0x244>
 8001ae2:	2305      	movs	r3, #5
 8001ae4:	e008      	b.n	8001af8 <HAL_GPIO_Init+0x244>
 8001ae6:	2304      	movs	r3, #4
 8001ae8:	e006      	b.n	8001af8 <HAL_GPIO_Init+0x244>
 8001aea:	2303      	movs	r3, #3
 8001aec:	e004      	b.n	8001af8 <HAL_GPIO_Init+0x244>
 8001aee:	2302      	movs	r3, #2
 8001af0:	e002      	b.n	8001af8 <HAL_GPIO_Init+0x244>
 8001af2:	2301      	movs	r3, #1
 8001af4:	e000      	b.n	8001af8 <HAL_GPIO_Init+0x244>
 8001af6:	2300      	movs	r3, #0
 8001af8:	697a      	ldr	r2, [r7, #20]
 8001afa:	f002 0203 	and.w	r2, r2, #3
 8001afe:	0092      	lsls	r2, r2, #2
 8001b00:	4093      	lsls	r3, r2
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b08:	4937      	ldr	r1, [pc, #220]	; (8001be8 <HAL_GPIO_Init+0x334>)
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	089b      	lsrs	r3, r3, #2
 8001b0e:	3302      	adds	r3, #2
 8001b10:	693a      	ldr	r2, [r7, #16]
 8001b12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b16:	4b3b      	ldr	r3, [pc, #236]	; (8001c04 <HAL_GPIO_Init+0x350>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	43db      	mvns	r3, r3
 8001b20:	693a      	ldr	r2, [r7, #16]
 8001b22:	4013      	ands	r3, r2
 8001b24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d003      	beq.n	8001b3a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b3a:	4a32      	ldr	r2, [pc, #200]	; (8001c04 <HAL_GPIO_Init+0x350>)
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b40:	4b30      	ldr	r3, [pc, #192]	; (8001c04 <HAL_GPIO_Init+0x350>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d003      	beq.n	8001b64 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001b5c:	693a      	ldr	r2, [r7, #16]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b64:	4a27      	ldr	r2, [pc, #156]	; (8001c04 <HAL_GPIO_Init+0x350>)
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001b6a:	4b26      	ldr	r3, [pc, #152]	; (8001c04 <HAL_GPIO_Init+0x350>)
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	43db      	mvns	r3, r3
 8001b74:	693a      	ldr	r2, [r7, #16]
 8001b76:	4013      	ands	r3, r2
 8001b78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d003      	beq.n	8001b8e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b8e:	4a1d      	ldr	r2, [pc, #116]	; (8001c04 <HAL_GPIO_Init+0x350>)
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001b94:	4b1b      	ldr	r3, [pc, #108]	; (8001c04 <HAL_GPIO_Init+0x350>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d003      	beq.n	8001bb8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001bb8:	4a12      	ldr	r2, [pc, #72]	; (8001c04 <HAL_GPIO_Init+0x350>)
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	fa22 f303 	lsr.w	r3, r2, r3
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	f47f ae78 	bne.w	80018c4 <HAL_GPIO_Init+0x10>
  }
}
 8001bd4:	bf00      	nop
 8001bd6:	bf00      	nop
 8001bd8:	371c      	adds	r7, #28
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	40021000 	.word	0x40021000
 8001be8:	40010000 	.word	0x40010000
 8001bec:	48000400 	.word	0x48000400
 8001bf0:	48000800 	.word	0x48000800
 8001bf4:	48000c00 	.word	0x48000c00
 8001bf8:	48001000 	.word	0x48001000
 8001bfc:	48001400 	.word	0x48001400
 8001c00:	48001800 	.word	0x48001800
 8001c04:	40010400 	.word	0x40010400

08001c08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	460b      	mov	r3, r1
 8001c12:	807b      	strh	r3, [r7, #2]
 8001c14:	4613      	mov	r3, r2
 8001c16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c18:	787b      	ldrb	r3, [r7, #1]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d003      	beq.n	8001c26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c1e:	887a      	ldrh	r2, [r7, #2]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c24:	e002      	b.n	8001c2c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c26:	887a      	ldrh	r2, [r7, #2]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c2c:	bf00      	nop
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d101      	bne.n	8001c4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e08d      	b.n	8001d66 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d106      	bne.n	8001c64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f7ff fb4c 	bl	80012fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2224      	movs	r2, #36	; 0x24
 8001c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f022 0201 	bic.w	r2, r2, #1
 8001c7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685a      	ldr	r2, [r3, #4]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c88:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	689a      	ldr	r2, [r3, #8]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c98:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d107      	bne.n	8001cb2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	689a      	ldr	r2, [r3, #8]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001cae:	609a      	str	r2, [r3, #8]
 8001cb0:	e006      	b.n	8001cc0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	689a      	ldr	r2, [r3, #8]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001cbe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d108      	bne.n	8001cda <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	685a      	ldr	r2, [r3, #4]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001cd6:	605a      	str	r2, [r3, #4]
 8001cd8:	e007      	b.n	8001cea <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	685a      	ldr	r2, [r3, #4]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ce8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	6812      	ldr	r2, [r2, #0]
 8001cf4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cfc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	68da      	ldr	r2, [r3, #12]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d0c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	691a      	ldr	r2, [r3, #16]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	695b      	ldr	r3, [r3, #20]
 8001d16:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	699b      	ldr	r3, [r3, #24]
 8001d1e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	430a      	orrs	r2, r1
 8001d26:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	69d9      	ldr	r1, [r3, #28]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6a1a      	ldr	r2, [r3, #32]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	430a      	orrs	r2, r1
 8001d36:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f042 0201 	orr.w	r2, r2, #1
 8001d46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2220      	movs	r2, #32
 8001d52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
	...

08001d70 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b088      	sub	sp, #32
 8001d74:	af02      	add	r7, sp, #8
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	4608      	mov	r0, r1
 8001d7a:	4611      	mov	r1, r2
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	4603      	mov	r3, r0
 8001d80:	817b      	strh	r3, [r7, #10]
 8001d82:	460b      	mov	r3, r1
 8001d84:	813b      	strh	r3, [r7, #8]
 8001d86:	4613      	mov	r3, r2
 8001d88:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b20      	cmp	r3, #32
 8001d94:	f040 80f9 	bne.w	8001f8a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d98:	6a3b      	ldr	r3, [r7, #32]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d002      	beq.n	8001da4 <HAL_I2C_Mem_Write+0x34>
 8001d9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d105      	bne.n	8001db0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001daa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e0ed      	b.n	8001f8c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d101      	bne.n	8001dbe <HAL_I2C_Mem_Write+0x4e>
 8001dba:	2302      	movs	r3, #2
 8001dbc:	e0e6      	b.n	8001f8c <HAL_I2C_Mem_Write+0x21c>
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001dc6:	f7ff fc5f 	bl	8001688 <HAL_GetTick>
 8001dca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	9300      	str	r3, [sp, #0]
 8001dd0:	2319      	movs	r3, #25
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001dd8:	68f8      	ldr	r0, [r7, #12]
 8001dda:	f000 fac3 	bl	8002364 <I2C_WaitOnFlagUntilTimeout>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e0d1      	b.n	8001f8c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2221      	movs	r2, #33	; 0x21
 8001dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2240      	movs	r2, #64	; 0x40
 8001df4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	6a3a      	ldr	r2, [r7, #32]
 8001e02:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001e08:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e10:	88f8      	ldrh	r0, [r7, #6]
 8001e12:	893a      	ldrh	r2, [r7, #8]
 8001e14:	8979      	ldrh	r1, [r7, #10]
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	9301      	str	r3, [sp, #4]
 8001e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e1c:	9300      	str	r3, [sp, #0]
 8001e1e:	4603      	mov	r3, r0
 8001e20:	68f8      	ldr	r0, [r7, #12]
 8001e22:	f000 f9d3 	bl	80021cc <I2C_RequestMemoryWrite>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d005      	beq.n	8001e38 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e0a9      	b.n	8001f8c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	2bff      	cmp	r3, #255	; 0xff
 8001e40:	d90e      	bls.n	8001e60 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	22ff      	movs	r2, #255	; 0xff
 8001e46:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e4c:	b2da      	uxtb	r2, r3
 8001e4e:	8979      	ldrh	r1, [r7, #10]
 8001e50:	2300      	movs	r3, #0
 8001e52:	9300      	str	r3, [sp, #0]
 8001e54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e58:	68f8      	ldr	r0, [r7, #12]
 8001e5a:	f000 fc3d 	bl	80026d8 <I2C_TransferConfig>
 8001e5e:	e00f      	b.n	8001e80 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e64:	b29a      	uxth	r2, r3
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e6e:	b2da      	uxtb	r2, r3
 8001e70:	8979      	ldrh	r1, [r7, #10]
 8001e72:	2300      	movs	r3, #0
 8001e74:	9300      	str	r3, [sp, #0]
 8001e76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e7a:	68f8      	ldr	r0, [r7, #12]
 8001e7c:	f000 fc2c 	bl	80026d8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e80:	697a      	ldr	r2, [r7, #20]
 8001e82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e84:	68f8      	ldr	r0, [r7, #12]
 8001e86:	f000 fabc 	bl	8002402 <I2C_WaitOnTXISFlagUntilTimeout>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e07b      	b.n	8001f8c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e98:	781a      	ldrb	r2, [r3, #0]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea4:	1c5a      	adds	r2, r3, #1
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ebc:	3b01      	subs	r3, #1
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d034      	beq.n	8001f38 <HAL_I2C_Mem_Write+0x1c8>
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d130      	bne.n	8001f38 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	9300      	str	r3, [sp, #0]
 8001eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001edc:	2200      	movs	r2, #0
 8001ede:	2180      	movs	r1, #128	; 0x80
 8001ee0:	68f8      	ldr	r0, [r7, #12]
 8001ee2:	f000 fa3f 	bl	8002364 <I2C_WaitOnFlagUntilTimeout>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e04d      	b.n	8001f8c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	2bff      	cmp	r3, #255	; 0xff
 8001ef8:	d90e      	bls.n	8001f18 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	22ff      	movs	r2, #255	; 0xff
 8001efe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f04:	b2da      	uxtb	r2, r3
 8001f06:	8979      	ldrh	r1, [r7, #10]
 8001f08:	2300      	movs	r3, #0
 8001f0a:	9300      	str	r3, [sp, #0]
 8001f0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f10:	68f8      	ldr	r0, [r7, #12]
 8001f12:	f000 fbe1 	bl	80026d8 <I2C_TransferConfig>
 8001f16:	e00f      	b.n	8001f38 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f1c:	b29a      	uxth	r2, r3
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f26:	b2da      	uxtb	r2, r3
 8001f28:	8979      	ldrh	r1, [r7, #10]
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	9300      	str	r3, [sp, #0]
 8001f2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f32:	68f8      	ldr	r0, [r7, #12]
 8001f34:	f000 fbd0 	bl	80026d8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d19e      	bne.n	8001e80 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f42:	697a      	ldr	r2, [r7, #20]
 8001f44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f46:	68f8      	ldr	r0, [r7, #12]
 8001f48:	f000 faa2 	bl	8002490 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e01a      	b.n	8001f8c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2220      	movs	r2, #32
 8001f5c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	6859      	ldr	r1, [r3, #4]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	4b0a      	ldr	r3, [pc, #40]	; (8001f94 <HAL_I2C_Mem_Write+0x224>)
 8001f6a:	400b      	ands	r3, r1
 8001f6c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2220      	movs	r2, #32
 8001f72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f86:	2300      	movs	r3, #0
 8001f88:	e000      	b.n	8001f8c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001f8a:	2302      	movs	r3, #2
  }
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3718      	adds	r7, #24
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	fe00e800 	.word	0xfe00e800

08001f98 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b088      	sub	sp, #32
 8001f9c:	af02      	add	r7, sp, #8
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	4608      	mov	r0, r1
 8001fa2:	4611      	mov	r1, r2
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	817b      	strh	r3, [r7, #10]
 8001faa:	460b      	mov	r3, r1
 8001fac:	813b      	strh	r3, [r7, #8]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b20      	cmp	r3, #32
 8001fbc:	f040 80fd 	bne.w	80021ba <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fc0:	6a3b      	ldr	r3, [r7, #32]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d002      	beq.n	8001fcc <HAL_I2C_Mem_Read+0x34>
 8001fc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d105      	bne.n	8001fd8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fd2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e0f1      	b.n	80021bc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d101      	bne.n	8001fe6 <HAL_I2C_Mem_Read+0x4e>
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	e0ea      	b.n	80021bc <HAL_I2C_Mem_Read+0x224>
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001fee:	f7ff fb4b 	bl	8001688 <HAL_GetTick>
 8001ff2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	9300      	str	r3, [sp, #0]
 8001ff8:	2319      	movs	r3, #25
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002000:	68f8      	ldr	r0, [r7, #12]
 8002002:	f000 f9af 	bl	8002364 <I2C_WaitOnFlagUntilTimeout>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e0d5      	b.n	80021bc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2222      	movs	r2, #34	; 0x22
 8002014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2240      	movs	r2, #64	; 0x40
 800201c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2200      	movs	r2, #0
 8002024:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	6a3a      	ldr	r2, [r7, #32]
 800202a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002030:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2200      	movs	r2, #0
 8002036:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002038:	88f8      	ldrh	r0, [r7, #6]
 800203a:	893a      	ldrh	r2, [r7, #8]
 800203c:	8979      	ldrh	r1, [r7, #10]
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	9301      	str	r3, [sp, #4]
 8002042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002044:	9300      	str	r3, [sp, #0]
 8002046:	4603      	mov	r3, r0
 8002048:	68f8      	ldr	r0, [r7, #12]
 800204a:	f000 f913 	bl	8002274 <I2C_RequestMemoryRead>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d005      	beq.n	8002060 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2200      	movs	r2, #0
 8002058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e0ad      	b.n	80021bc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002064:	b29b      	uxth	r3, r3
 8002066:	2bff      	cmp	r3, #255	; 0xff
 8002068:	d90e      	bls.n	8002088 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	22ff      	movs	r2, #255	; 0xff
 800206e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002074:	b2da      	uxtb	r2, r3
 8002076:	8979      	ldrh	r1, [r7, #10]
 8002078:	4b52      	ldr	r3, [pc, #328]	; (80021c4 <HAL_I2C_Mem_Read+0x22c>)
 800207a:	9300      	str	r3, [sp, #0]
 800207c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002080:	68f8      	ldr	r0, [r7, #12]
 8002082:	f000 fb29 	bl	80026d8 <I2C_TransferConfig>
 8002086:	e00f      	b.n	80020a8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800208c:	b29a      	uxth	r2, r3
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002096:	b2da      	uxtb	r2, r3
 8002098:	8979      	ldrh	r1, [r7, #10]
 800209a:	4b4a      	ldr	r3, [pc, #296]	; (80021c4 <HAL_I2C_Mem_Read+0x22c>)
 800209c:	9300      	str	r3, [sp, #0]
 800209e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020a2:	68f8      	ldr	r0, [r7, #12]
 80020a4:	f000 fb18 	bl	80026d8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	9300      	str	r3, [sp, #0]
 80020ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ae:	2200      	movs	r2, #0
 80020b0:	2104      	movs	r1, #4
 80020b2:	68f8      	ldr	r0, [r7, #12]
 80020b4:	f000 f956 	bl	8002364 <I2C_WaitOnFlagUntilTimeout>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e07c      	b.n	80021bc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020cc:	b2d2      	uxtb	r2, r2
 80020ce:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d4:	1c5a      	adds	r2, r3, #1
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020de:	3b01      	subs	r3, #1
 80020e0:	b29a      	uxth	r2, r3
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	3b01      	subs	r3, #1
 80020ee:	b29a      	uxth	r2, r3
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d034      	beq.n	8002168 <HAL_I2C_Mem_Read+0x1d0>
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002102:	2b00      	cmp	r3, #0
 8002104:	d130      	bne.n	8002168 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	9300      	str	r3, [sp, #0]
 800210a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800210c:	2200      	movs	r2, #0
 800210e:	2180      	movs	r1, #128	; 0x80
 8002110:	68f8      	ldr	r0, [r7, #12]
 8002112:	f000 f927 	bl	8002364 <I2C_WaitOnFlagUntilTimeout>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e04d      	b.n	80021bc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002124:	b29b      	uxth	r3, r3
 8002126:	2bff      	cmp	r3, #255	; 0xff
 8002128:	d90e      	bls.n	8002148 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	22ff      	movs	r2, #255	; 0xff
 800212e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002134:	b2da      	uxtb	r2, r3
 8002136:	8979      	ldrh	r1, [r7, #10]
 8002138:	2300      	movs	r3, #0
 800213a:	9300      	str	r3, [sp, #0]
 800213c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002140:	68f8      	ldr	r0, [r7, #12]
 8002142:	f000 fac9 	bl	80026d8 <I2C_TransferConfig>
 8002146:	e00f      	b.n	8002168 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800214c:	b29a      	uxth	r2, r3
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002156:	b2da      	uxtb	r2, r3
 8002158:	8979      	ldrh	r1, [r7, #10]
 800215a:	2300      	movs	r3, #0
 800215c:	9300      	str	r3, [sp, #0]
 800215e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002162:	68f8      	ldr	r0, [r7, #12]
 8002164:	f000 fab8 	bl	80026d8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800216c:	b29b      	uxth	r3, r3
 800216e:	2b00      	cmp	r3, #0
 8002170:	d19a      	bne.n	80020a8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002172:	697a      	ldr	r2, [r7, #20]
 8002174:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002176:	68f8      	ldr	r0, [r7, #12]
 8002178:	f000 f98a 	bl	8002490 <I2C_WaitOnSTOPFlagUntilTimeout>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e01a      	b.n	80021bc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2220      	movs	r2, #32
 800218c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	6859      	ldr	r1, [r3, #4]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	4b0b      	ldr	r3, [pc, #44]	; (80021c8 <HAL_I2C_Mem_Read+0x230>)
 800219a:	400b      	ands	r3, r1
 800219c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2220      	movs	r2, #32
 80021a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80021b6:	2300      	movs	r3, #0
 80021b8:	e000      	b.n	80021bc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80021ba:	2302      	movs	r3, #2
  }
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3718      	adds	r7, #24
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	80002400 	.word	0x80002400
 80021c8:	fe00e800 	.word	0xfe00e800

080021cc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af02      	add	r7, sp, #8
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	4608      	mov	r0, r1
 80021d6:	4611      	mov	r1, r2
 80021d8:	461a      	mov	r2, r3
 80021da:	4603      	mov	r3, r0
 80021dc:	817b      	strh	r3, [r7, #10]
 80021de:	460b      	mov	r3, r1
 80021e0:	813b      	strh	r3, [r7, #8]
 80021e2:	4613      	mov	r3, r2
 80021e4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80021e6:	88fb      	ldrh	r3, [r7, #6]
 80021e8:	b2da      	uxtb	r2, r3
 80021ea:	8979      	ldrh	r1, [r7, #10]
 80021ec:	4b20      	ldr	r3, [pc, #128]	; (8002270 <I2C_RequestMemoryWrite+0xa4>)
 80021ee:	9300      	str	r3, [sp, #0]
 80021f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021f4:	68f8      	ldr	r0, [r7, #12]
 80021f6:	f000 fa6f 	bl	80026d8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021fa:	69fa      	ldr	r2, [r7, #28]
 80021fc:	69b9      	ldr	r1, [r7, #24]
 80021fe:	68f8      	ldr	r0, [r7, #12]
 8002200:	f000 f8ff 	bl	8002402 <I2C_WaitOnTXISFlagUntilTimeout>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e02c      	b.n	8002268 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800220e:	88fb      	ldrh	r3, [r7, #6]
 8002210:	2b01      	cmp	r3, #1
 8002212:	d105      	bne.n	8002220 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002214:	893b      	ldrh	r3, [r7, #8]
 8002216:	b2da      	uxtb	r2, r3
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	629a      	str	r2, [r3, #40]	; 0x28
 800221e:	e015      	b.n	800224c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002220:	893b      	ldrh	r3, [r7, #8]
 8002222:	0a1b      	lsrs	r3, r3, #8
 8002224:	b29b      	uxth	r3, r3
 8002226:	b2da      	uxtb	r2, r3
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800222e:	69fa      	ldr	r2, [r7, #28]
 8002230:	69b9      	ldr	r1, [r7, #24]
 8002232:	68f8      	ldr	r0, [r7, #12]
 8002234:	f000 f8e5 	bl	8002402 <I2C_WaitOnTXISFlagUntilTimeout>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e012      	b.n	8002268 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002242:	893b      	ldrh	r3, [r7, #8]
 8002244:	b2da      	uxtb	r2, r3
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	9300      	str	r3, [sp, #0]
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	2200      	movs	r2, #0
 8002254:	2180      	movs	r1, #128	; 0x80
 8002256:	68f8      	ldr	r0, [r7, #12]
 8002258:	f000 f884 	bl	8002364 <I2C_WaitOnFlagUntilTimeout>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e000      	b.n	8002268 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	3710      	adds	r7, #16
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	80002000 	.word	0x80002000

08002274 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b086      	sub	sp, #24
 8002278:	af02      	add	r7, sp, #8
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	4608      	mov	r0, r1
 800227e:	4611      	mov	r1, r2
 8002280:	461a      	mov	r2, r3
 8002282:	4603      	mov	r3, r0
 8002284:	817b      	strh	r3, [r7, #10]
 8002286:	460b      	mov	r3, r1
 8002288:	813b      	strh	r3, [r7, #8]
 800228a:	4613      	mov	r3, r2
 800228c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800228e:	88fb      	ldrh	r3, [r7, #6]
 8002290:	b2da      	uxtb	r2, r3
 8002292:	8979      	ldrh	r1, [r7, #10]
 8002294:	4b20      	ldr	r3, [pc, #128]	; (8002318 <I2C_RequestMemoryRead+0xa4>)
 8002296:	9300      	str	r3, [sp, #0]
 8002298:	2300      	movs	r3, #0
 800229a:	68f8      	ldr	r0, [r7, #12]
 800229c:	f000 fa1c 	bl	80026d8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022a0:	69fa      	ldr	r2, [r7, #28]
 80022a2:	69b9      	ldr	r1, [r7, #24]
 80022a4:	68f8      	ldr	r0, [r7, #12]
 80022a6:	f000 f8ac 	bl	8002402 <I2C_WaitOnTXISFlagUntilTimeout>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e02c      	b.n	800230e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80022b4:	88fb      	ldrh	r3, [r7, #6]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d105      	bne.n	80022c6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80022ba:	893b      	ldrh	r3, [r7, #8]
 80022bc:	b2da      	uxtb	r2, r3
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	629a      	str	r2, [r3, #40]	; 0x28
 80022c4:	e015      	b.n	80022f2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80022c6:	893b      	ldrh	r3, [r7, #8]
 80022c8:	0a1b      	lsrs	r3, r3, #8
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	b2da      	uxtb	r2, r3
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022d4:	69fa      	ldr	r2, [r7, #28]
 80022d6:	69b9      	ldr	r1, [r7, #24]
 80022d8:	68f8      	ldr	r0, [r7, #12]
 80022da:	f000 f892 	bl	8002402 <I2C_WaitOnTXISFlagUntilTimeout>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d001      	beq.n	80022e8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e012      	b.n	800230e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80022e8:	893b      	ldrh	r3, [r7, #8]
 80022ea:	b2da      	uxtb	r2, r3
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	9300      	str	r3, [sp, #0]
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	2200      	movs	r2, #0
 80022fa:	2140      	movs	r1, #64	; 0x40
 80022fc:	68f8      	ldr	r0, [r7, #12]
 80022fe:	f000 f831 	bl	8002364 <I2C_WaitOnFlagUntilTimeout>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e000      	b.n	800230e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	80002000 	.word	0x80002000

0800231c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	699b      	ldr	r3, [r3, #24]
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b02      	cmp	r3, #2
 8002330:	d103      	bne.n	800233a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2200      	movs	r2, #0
 8002338:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	699b      	ldr	r3, [r3, #24]
 8002340:	f003 0301 	and.w	r3, r3, #1
 8002344:	2b01      	cmp	r3, #1
 8002346:	d007      	beq.n	8002358 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	699a      	ldr	r2, [r3, #24]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f042 0201 	orr.w	r2, r2, #1
 8002356:	619a      	str	r2, [r3, #24]
  }
}
 8002358:	bf00      	nop
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	603b      	str	r3, [r7, #0]
 8002370:	4613      	mov	r3, r2
 8002372:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002374:	e031      	b.n	80023da <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800237c:	d02d      	beq.n	80023da <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800237e:	f7ff f983 	bl	8001688 <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	429a      	cmp	r2, r3
 800238c:	d302      	bcc.n	8002394 <I2C_WaitOnFlagUntilTimeout+0x30>
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d122      	bne.n	80023da <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	699a      	ldr	r2, [r3, #24]
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	4013      	ands	r3, r2
 800239e:	68ba      	ldr	r2, [r7, #8]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	bf0c      	ite	eq
 80023a4:	2301      	moveq	r3, #1
 80023a6:	2300      	movne	r3, #0
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	461a      	mov	r2, r3
 80023ac:	79fb      	ldrb	r3, [r7, #7]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d113      	bne.n	80023da <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b6:	f043 0220 	orr.w	r2, r3, #32
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2220      	movs	r2, #32
 80023c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2200      	movs	r2, #0
 80023ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e00f      	b.n	80023fa <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	699a      	ldr	r2, [r3, #24]
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	4013      	ands	r3, r2
 80023e4:	68ba      	ldr	r2, [r7, #8]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	bf0c      	ite	eq
 80023ea:	2301      	moveq	r3, #1
 80023ec:	2300      	movne	r3, #0
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	461a      	mov	r2, r3
 80023f2:	79fb      	ldrb	r3, [r7, #7]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d0be      	beq.n	8002376 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3710      	adds	r7, #16
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b084      	sub	sp, #16
 8002406:	af00      	add	r7, sp, #0
 8002408:	60f8      	str	r0, [r7, #12]
 800240a:	60b9      	str	r1, [r7, #8]
 800240c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800240e:	e033      	b.n	8002478 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	68b9      	ldr	r1, [r7, #8]
 8002414:	68f8      	ldr	r0, [r7, #12]
 8002416:	f000 f87f 	bl	8002518 <I2C_IsErrorOccurred>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e031      	b.n	8002488 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800242a:	d025      	beq.n	8002478 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800242c:	f7ff f92c 	bl	8001688 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	68ba      	ldr	r2, [r7, #8]
 8002438:	429a      	cmp	r2, r3
 800243a:	d302      	bcc.n	8002442 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d11a      	bne.n	8002478 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	699b      	ldr	r3, [r3, #24]
 8002448:	f003 0302 	and.w	r3, r3, #2
 800244c:	2b02      	cmp	r3, #2
 800244e:	d013      	beq.n	8002478 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002454:	f043 0220 	orr.w	r2, r3, #32
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2220      	movs	r2, #32
 8002460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2200      	movs	r2, #0
 8002468:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e007      	b.n	8002488 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b02      	cmp	r3, #2
 8002484:	d1c4      	bne.n	8002410 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002486:	2300      	movs	r3, #0
}
 8002488:	4618      	mov	r0, r3
 800248a:	3710      	adds	r7, #16
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800249c:	e02f      	b.n	80024fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	68b9      	ldr	r1, [r7, #8]
 80024a2:	68f8      	ldr	r0, [r7, #12]
 80024a4:	f000 f838 	bl	8002518 <I2C_IsErrorOccurred>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e02d      	b.n	800250e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024b2:	f7ff f8e9 	bl	8001688 <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	68ba      	ldr	r2, [r7, #8]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d302      	bcc.n	80024c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d11a      	bne.n	80024fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	699b      	ldr	r3, [r3, #24]
 80024ce:	f003 0320 	and.w	r3, r3, #32
 80024d2:	2b20      	cmp	r3, #32
 80024d4:	d013      	beq.n	80024fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024da:	f043 0220 	orr.w	r2, r3, #32
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2220      	movs	r2, #32
 80024e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e007      	b.n	800250e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	f003 0320 	and.w	r3, r3, #32
 8002508:	2b20      	cmp	r3, #32
 800250a:	d1c8      	bne.n	800249e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3710      	adds	r7, #16
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
	...

08002518 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b08a      	sub	sp, #40	; 0x28
 800251c:	af00      	add	r7, sp, #0
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	60b9      	str	r1, [r7, #8]
 8002522:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002524:	2300      	movs	r3, #0
 8002526:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002532:	2300      	movs	r3, #0
 8002534:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	f003 0310 	and.w	r3, r3, #16
 8002540:	2b00      	cmp	r3, #0
 8002542:	d068      	beq.n	8002616 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2210      	movs	r2, #16
 800254a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800254c:	e049      	b.n	80025e2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002554:	d045      	beq.n	80025e2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002556:	f7ff f897 	bl	8001688 <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	68ba      	ldr	r2, [r7, #8]
 8002562:	429a      	cmp	r2, r3
 8002564:	d302      	bcc.n	800256c <I2C_IsErrorOccurred+0x54>
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d13a      	bne.n	80025e2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002576:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800257e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	699b      	ldr	r3, [r3, #24]
 8002586:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800258a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800258e:	d121      	bne.n	80025d4 <I2C_IsErrorOccurred+0xbc>
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002596:	d01d      	beq.n	80025d4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002598:	7cfb      	ldrb	r3, [r7, #19]
 800259a:	2b20      	cmp	r3, #32
 800259c:	d01a      	beq.n	80025d4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	685a      	ldr	r2, [r3, #4]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025ac:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80025ae:	f7ff f86b 	bl	8001688 <HAL_GetTick>
 80025b2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025b4:	e00e      	b.n	80025d4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80025b6:	f7ff f867 	bl	8001688 <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	2b19      	cmp	r3, #25
 80025c2:	d907      	bls.n	80025d4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80025c4:	6a3b      	ldr	r3, [r7, #32]
 80025c6:	f043 0320 	orr.w	r3, r3, #32
 80025ca:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80025d2:	e006      	b.n	80025e2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	f003 0320 	and.w	r3, r3, #32
 80025de:	2b20      	cmp	r3, #32
 80025e0:	d1e9      	bne.n	80025b6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	f003 0320 	and.w	r3, r3, #32
 80025ec:	2b20      	cmp	r3, #32
 80025ee:	d003      	beq.n	80025f8 <I2C_IsErrorOccurred+0xe0>
 80025f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d0aa      	beq.n	800254e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80025f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d103      	bne.n	8002608 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2220      	movs	r2, #32
 8002606:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002608:	6a3b      	ldr	r3, [r7, #32]
 800260a:	f043 0304 	orr.w	r3, r3, #4
 800260e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002624:	2b00      	cmp	r3, #0
 8002626:	d00b      	beq.n	8002640 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002628:	6a3b      	ldr	r3, [r7, #32]
 800262a:	f043 0301 	orr.w	r3, r3, #1
 800262e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002638:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00b      	beq.n	8002662 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800264a:	6a3b      	ldr	r3, [r7, #32]
 800264c:	f043 0308 	orr.w	r3, r3, #8
 8002650:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800265a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002668:	2b00      	cmp	r3, #0
 800266a:	d00b      	beq.n	8002684 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800266c:	6a3b      	ldr	r3, [r7, #32]
 800266e:	f043 0302 	orr.w	r3, r3, #2
 8002672:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f44f 7200 	mov.w	r2, #512	; 0x200
 800267c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002684:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002688:	2b00      	cmp	r3, #0
 800268a:	d01c      	beq.n	80026c6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800268c:	68f8      	ldr	r0, [r7, #12]
 800268e:	f7ff fe45 	bl	800231c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	6859      	ldr	r1, [r3, #4]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	4b0d      	ldr	r3, [pc, #52]	; (80026d4 <I2C_IsErrorOccurred+0x1bc>)
 800269e:	400b      	ands	r3, r1
 80026a0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026a6:	6a3b      	ldr	r3, [r7, #32]
 80026a8:	431a      	orrs	r2, r3
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2220      	movs	r2, #32
 80026b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80026c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3728      	adds	r7, #40	; 0x28
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	fe00e800 	.word	0xfe00e800

080026d8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80026d8:	b480      	push	{r7}
 80026da:	b087      	sub	sp, #28
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	607b      	str	r3, [r7, #4]
 80026e2:	460b      	mov	r3, r1
 80026e4:	817b      	strh	r3, [r7, #10]
 80026e6:	4613      	mov	r3, r2
 80026e8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80026ea:	897b      	ldrh	r3, [r7, #10]
 80026ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80026f0:	7a7b      	ldrb	r3, [r7, #9]
 80026f2:	041b      	lsls	r3, r3, #16
 80026f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80026f8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80026fe:	6a3b      	ldr	r3, [r7, #32]
 8002700:	4313      	orrs	r3, r2
 8002702:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002706:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	685a      	ldr	r2, [r3, #4]
 800270e:	6a3b      	ldr	r3, [r7, #32]
 8002710:	0d5b      	lsrs	r3, r3, #21
 8002712:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002716:	4b08      	ldr	r3, [pc, #32]	; (8002738 <I2C_TransferConfig+0x60>)
 8002718:	430b      	orrs	r3, r1
 800271a:	43db      	mvns	r3, r3
 800271c:	ea02 0103 	and.w	r1, r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	697a      	ldr	r2, [r7, #20]
 8002726:	430a      	orrs	r2, r1
 8002728:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800272a:	bf00      	nop
 800272c:	371c      	adds	r7, #28
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	03ff63ff 	.word	0x03ff63ff

0800273c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800274c:	b2db      	uxtb	r3, r3
 800274e:	2b20      	cmp	r3, #32
 8002750:	d138      	bne.n	80027c4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002758:	2b01      	cmp	r3, #1
 800275a:	d101      	bne.n	8002760 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800275c:	2302      	movs	r3, #2
 800275e:	e032      	b.n	80027c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2224      	movs	r2, #36	; 0x24
 800276c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 0201 	bic.w	r2, r2, #1
 800277e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800278e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	6819      	ldr	r1, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	683a      	ldr	r2, [r7, #0]
 800279c:	430a      	orrs	r2, r1
 800279e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f042 0201 	orr.w	r2, r2, #1
 80027ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2220      	movs	r2, #32
 80027b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027c0:	2300      	movs	r3, #0
 80027c2:	e000      	b.n	80027c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80027c4:	2302      	movs	r3, #2
  }
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr

080027d2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80027d2:	b480      	push	{r7}
 80027d4:	b085      	sub	sp, #20
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
 80027da:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	2b20      	cmp	r3, #32
 80027e6:	d139      	bne.n	800285c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d101      	bne.n	80027f6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80027f2:	2302      	movs	r3, #2
 80027f4:	e033      	b.n	800285e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2201      	movs	r2, #1
 80027fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2224      	movs	r2, #36	; 0x24
 8002802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f022 0201 	bic.w	r2, r2, #1
 8002814:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002824:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	021b      	lsls	r3, r3, #8
 800282a:	68fa      	ldr	r2, [r7, #12]
 800282c:	4313      	orrs	r3, r2
 800282e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f042 0201 	orr.w	r2, r2, #1
 8002846:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2220      	movs	r2, #32
 800284c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002858:	2300      	movs	r3, #0
 800285a:	e000      	b.n	800285e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800285c:	2302      	movs	r3, #2
  }
}
 800285e:	4618      	mov	r0, r3
 8002860:	3714      	adds	r7, #20
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
	...

0800286c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002870:	4b04      	ldr	r3, [pc, #16]	; (8002884 <HAL_PWREx_GetVoltageRange+0x18>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002878:	4618      	mov	r0, r3
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	40007000 	.word	0x40007000

08002888 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002888:	b480      	push	{r7}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002896:	d130      	bne.n	80028fa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002898:	4b23      	ldr	r3, [pc, #140]	; (8002928 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80028a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028a4:	d038      	beq.n	8002918 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80028a6:	4b20      	ldr	r3, [pc, #128]	; (8002928 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80028ae:	4a1e      	ldr	r2, [pc, #120]	; (8002928 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028b4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80028b6:	4b1d      	ldr	r3, [pc, #116]	; (800292c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2232      	movs	r2, #50	; 0x32
 80028bc:	fb02 f303 	mul.w	r3, r2, r3
 80028c0:	4a1b      	ldr	r2, [pc, #108]	; (8002930 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80028c2:	fba2 2303 	umull	r2, r3, r2, r3
 80028c6:	0c9b      	lsrs	r3, r3, #18
 80028c8:	3301      	adds	r3, #1
 80028ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028cc:	e002      	b.n	80028d4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	3b01      	subs	r3, #1
 80028d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028d4:	4b14      	ldr	r3, [pc, #80]	; (8002928 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028d6:	695b      	ldr	r3, [r3, #20]
 80028d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028e0:	d102      	bne.n	80028e8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d1f2      	bne.n	80028ce <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80028e8:	4b0f      	ldr	r3, [pc, #60]	; (8002928 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028ea:	695b      	ldr	r3, [r3, #20]
 80028ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028f4:	d110      	bne.n	8002918 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e00f      	b.n	800291a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80028fa:	4b0b      	ldr	r3, [pc, #44]	; (8002928 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002902:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002906:	d007      	beq.n	8002918 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002908:	4b07      	ldr	r3, [pc, #28]	; (8002928 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002910:	4a05      	ldr	r2, [pc, #20]	; (8002928 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002912:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002916:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3714      	adds	r7, #20
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	40007000 	.word	0x40007000
 800292c:	20000000 	.word	0x20000000
 8002930:	431bde83 	.word	0x431bde83

08002934 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b088      	sub	sp, #32
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d101      	bne.n	8002946 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e3ca      	b.n	80030dc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002946:	4b97      	ldr	r3, [pc, #604]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f003 030c 	and.w	r3, r3, #12
 800294e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002950:	4b94      	ldr	r3, [pc, #592]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	f003 0303 	and.w	r3, r3, #3
 8002958:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0310 	and.w	r3, r3, #16
 8002962:	2b00      	cmp	r3, #0
 8002964:	f000 80e4 	beq.w	8002b30 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d007      	beq.n	800297e <HAL_RCC_OscConfig+0x4a>
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	2b0c      	cmp	r3, #12
 8002972:	f040 808b 	bne.w	8002a8c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	2b01      	cmp	r3, #1
 800297a:	f040 8087 	bne.w	8002a8c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800297e:	4b89      	ldr	r3, [pc, #548]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d005      	beq.n	8002996 <HAL_RCC_OscConfig+0x62>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d101      	bne.n	8002996 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e3a2      	b.n	80030dc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a1a      	ldr	r2, [r3, #32]
 800299a:	4b82      	ldr	r3, [pc, #520]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0308 	and.w	r3, r3, #8
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d004      	beq.n	80029b0 <HAL_RCC_OscConfig+0x7c>
 80029a6:	4b7f      	ldr	r3, [pc, #508]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029ae:	e005      	b.n	80029bc <HAL_RCC_OscConfig+0x88>
 80029b0:	4b7c      	ldr	r3, [pc, #496]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 80029b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029b6:	091b      	lsrs	r3, r3, #4
 80029b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029bc:	4293      	cmp	r3, r2
 80029be:	d223      	bcs.n	8002a08 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a1b      	ldr	r3, [r3, #32]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f000 fd55 	bl	8003474 <RCC_SetFlashLatencyFromMSIRange>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d001      	beq.n	80029d4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e383      	b.n	80030dc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029d4:	4b73      	ldr	r3, [pc, #460]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a72      	ldr	r2, [pc, #456]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 80029da:	f043 0308 	orr.w	r3, r3, #8
 80029de:	6013      	str	r3, [r2, #0]
 80029e0:	4b70      	ldr	r3, [pc, #448]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a1b      	ldr	r3, [r3, #32]
 80029ec:	496d      	ldr	r1, [pc, #436]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029f2:	4b6c      	ldr	r3, [pc, #432]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	69db      	ldr	r3, [r3, #28]
 80029fe:	021b      	lsls	r3, r3, #8
 8002a00:	4968      	ldr	r1, [pc, #416]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	604b      	str	r3, [r1, #4]
 8002a06:	e025      	b.n	8002a54 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a08:	4b66      	ldr	r3, [pc, #408]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a65      	ldr	r2, [pc, #404]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002a0e:	f043 0308 	orr.w	r3, r3, #8
 8002a12:	6013      	str	r3, [r2, #0]
 8002a14:	4b63      	ldr	r3, [pc, #396]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a1b      	ldr	r3, [r3, #32]
 8002a20:	4960      	ldr	r1, [pc, #384]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a26:	4b5f      	ldr	r3, [pc, #380]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	69db      	ldr	r3, [r3, #28]
 8002a32:	021b      	lsls	r3, r3, #8
 8002a34:	495b      	ldr	r1, [pc, #364]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d109      	bne.n	8002a54 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a1b      	ldr	r3, [r3, #32]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f000 fd15 	bl	8003474 <RCC_SetFlashLatencyFromMSIRange>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d001      	beq.n	8002a54 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e343      	b.n	80030dc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a54:	f000 fc4a 	bl	80032ec <HAL_RCC_GetSysClockFreq>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	4b52      	ldr	r3, [pc, #328]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	091b      	lsrs	r3, r3, #4
 8002a60:	f003 030f 	and.w	r3, r3, #15
 8002a64:	4950      	ldr	r1, [pc, #320]	; (8002ba8 <HAL_RCC_OscConfig+0x274>)
 8002a66:	5ccb      	ldrb	r3, [r1, r3]
 8002a68:	f003 031f 	and.w	r3, r3, #31
 8002a6c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a70:	4a4e      	ldr	r2, [pc, #312]	; (8002bac <HAL_RCC_OscConfig+0x278>)
 8002a72:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002a74:	4b4e      	ldr	r3, [pc, #312]	; (8002bb0 <HAL_RCC_OscConfig+0x27c>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7fe fdb5 	bl	80015e8 <HAL_InitTick>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002a82:	7bfb      	ldrb	r3, [r7, #15]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d052      	beq.n	8002b2e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002a88:	7bfb      	ldrb	r3, [r7, #15]
 8002a8a:	e327      	b.n	80030dc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d032      	beq.n	8002afa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a94:	4b43      	ldr	r3, [pc, #268]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a42      	ldr	r2, [pc, #264]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002a9a:	f043 0301 	orr.w	r3, r3, #1
 8002a9e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002aa0:	f7fe fdf2 	bl	8001688 <HAL_GetTick>
 8002aa4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002aa6:	e008      	b.n	8002aba <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002aa8:	f7fe fdee 	bl	8001688 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e310      	b.n	80030dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002aba:	4b3a      	ldr	r3, [pc, #232]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d0f0      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ac6:	4b37      	ldr	r3, [pc, #220]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a36      	ldr	r2, [pc, #216]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002acc:	f043 0308 	orr.w	r3, r3, #8
 8002ad0:	6013      	str	r3, [r2, #0]
 8002ad2:	4b34      	ldr	r3, [pc, #208]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a1b      	ldr	r3, [r3, #32]
 8002ade:	4931      	ldr	r1, [pc, #196]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ae4:	4b2f      	ldr	r3, [pc, #188]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	69db      	ldr	r3, [r3, #28]
 8002af0:	021b      	lsls	r3, r3, #8
 8002af2:	492c      	ldr	r1, [pc, #176]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	604b      	str	r3, [r1, #4]
 8002af8:	e01a      	b.n	8002b30 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002afa:	4b2a      	ldr	r3, [pc, #168]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a29      	ldr	r2, [pc, #164]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002b00:	f023 0301 	bic.w	r3, r3, #1
 8002b04:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b06:	f7fe fdbf 	bl	8001688 <HAL_GetTick>
 8002b0a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b0c:	e008      	b.n	8002b20 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b0e:	f7fe fdbb 	bl	8001688 <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d901      	bls.n	8002b20 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e2dd      	b.n	80030dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b20:	4b20      	ldr	r3, [pc, #128]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0302 	and.w	r3, r3, #2
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d1f0      	bne.n	8002b0e <HAL_RCC_OscConfig+0x1da>
 8002b2c:	e000      	b.n	8002b30 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b2e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0301 	and.w	r3, r3, #1
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d074      	beq.n	8002c26 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	2b08      	cmp	r3, #8
 8002b40:	d005      	beq.n	8002b4e <HAL_RCC_OscConfig+0x21a>
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	2b0c      	cmp	r3, #12
 8002b46:	d10e      	bne.n	8002b66 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	2b03      	cmp	r3, #3
 8002b4c:	d10b      	bne.n	8002b66 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b4e:	4b15      	ldr	r3, [pc, #84]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d064      	beq.n	8002c24 <HAL_RCC_OscConfig+0x2f0>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d160      	bne.n	8002c24 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e2ba      	b.n	80030dc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b6e:	d106      	bne.n	8002b7e <HAL_RCC_OscConfig+0x24a>
 8002b70:	4b0c      	ldr	r3, [pc, #48]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a0b      	ldr	r2, [pc, #44]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002b76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b7a:	6013      	str	r3, [r2, #0]
 8002b7c:	e026      	b.n	8002bcc <HAL_RCC_OscConfig+0x298>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b86:	d115      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x280>
 8002b88:	4b06      	ldr	r3, [pc, #24]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a05      	ldr	r2, [pc, #20]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002b8e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b92:	6013      	str	r3, [r2, #0]
 8002b94:	4b03      	ldr	r3, [pc, #12]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a02      	ldr	r2, [pc, #8]	; (8002ba4 <HAL_RCC_OscConfig+0x270>)
 8002b9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b9e:	6013      	str	r3, [r2, #0]
 8002ba0:	e014      	b.n	8002bcc <HAL_RCC_OscConfig+0x298>
 8002ba2:	bf00      	nop
 8002ba4:	40021000 	.word	0x40021000
 8002ba8:	08005364 	.word	0x08005364
 8002bac:	20000000 	.word	0x20000000
 8002bb0:	20000004 	.word	0x20000004
 8002bb4:	4ba0      	ldr	r3, [pc, #640]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a9f      	ldr	r2, [pc, #636]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002bba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bbe:	6013      	str	r3, [r2, #0]
 8002bc0:	4b9d      	ldr	r3, [pc, #628]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a9c      	ldr	r2, [pc, #624]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002bc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d013      	beq.n	8002bfc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd4:	f7fe fd58 	bl	8001688 <HAL_GetTick>
 8002bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bda:	e008      	b.n	8002bee <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bdc:	f7fe fd54 	bl	8001688 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b64      	cmp	r3, #100	; 0x64
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e276      	b.n	80030dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bee:	4b92      	ldr	r3, [pc, #584]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d0f0      	beq.n	8002bdc <HAL_RCC_OscConfig+0x2a8>
 8002bfa:	e014      	b.n	8002c26 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bfc:	f7fe fd44 	bl	8001688 <HAL_GetTick>
 8002c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c02:	e008      	b.n	8002c16 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c04:	f7fe fd40 	bl	8001688 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b64      	cmp	r3, #100	; 0x64
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e262      	b.n	80030dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c16:	4b88      	ldr	r3, [pc, #544]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d1f0      	bne.n	8002c04 <HAL_RCC_OscConfig+0x2d0>
 8002c22:	e000      	b.n	8002c26 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d060      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	2b04      	cmp	r3, #4
 8002c36:	d005      	beq.n	8002c44 <HAL_RCC_OscConfig+0x310>
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	2b0c      	cmp	r3, #12
 8002c3c:	d119      	bne.n	8002c72 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d116      	bne.n	8002c72 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c44:	4b7c      	ldr	r3, [pc, #496]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d005      	beq.n	8002c5c <HAL_RCC_OscConfig+0x328>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d101      	bne.n	8002c5c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e23f      	b.n	80030dc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c5c:	4b76      	ldr	r3, [pc, #472]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	691b      	ldr	r3, [r3, #16]
 8002c68:	061b      	lsls	r3, r3, #24
 8002c6a:	4973      	ldr	r1, [pc, #460]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c70:	e040      	b.n	8002cf4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d023      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c7a:	4b6f      	ldr	r3, [pc, #444]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a6e      	ldr	r2, [pc, #440]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002c80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c86:	f7fe fcff 	bl	8001688 <HAL_GetTick>
 8002c8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c8c:	e008      	b.n	8002ca0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c8e:	f7fe fcfb 	bl	8001688 <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d901      	bls.n	8002ca0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	e21d      	b.n	80030dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ca0:	4b65      	ldr	r3, [pc, #404]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d0f0      	beq.n	8002c8e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cac:	4b62      	ldr	r3, [pc, #392]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	691b      	ldr	r3, [r3, #16]
 8002cb8:	061b      	lsls	r3, r3, #24
 8002cba:	495f      	ldr	r1, [pc, #380]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	604b      	str	r3, [r1, #4]
 8002cc0:	e018      	b.n	8002cf4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cc2:	4b5d      	ldr	r3, [pc, #372]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a5c      	ldr	r2, [pc, #368]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002cc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ccc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cce:	f7fe fcdb 	bl	8001688 <HAL_GetTick>
 8002cd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002cd4:	e008      	b.n	8002ce8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cd6:	f7fe fcd7 	bl	8001688 <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d901      	bls.n	8002ce8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e1f9      	b.n	80030dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ce8:	4b53      	ldr	r3, [pc, #332]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1f0      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0308 	and.w	r3, r3, #8
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d03c      	beq.n	8002d7a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	695b      	ldr	r3, [r3, #20]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d01c      	beq.n	8002d42 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d08:	4b4b      	ldr	r3, [pc, #300]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002d0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d0e:	4a4a      	ldr	r2, [pc, #296]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002d10:	f043 0301 	orr.w	r3, r3, #1
 8002d14:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d18:	f7fe fcb6 	bl	8001688 <HAL_GetTick>
 8002d1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d1e:	e008      	b.n	8002d32 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d20:	f7fe fcb2 	bl	8001688 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e1d4      	b.n	80030dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d32:	4b41      	ldr	r3, [pc, #260]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002d34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d0ef      	beq.n	8002d20 <HAL_RCC_OscConfig+0x3ec>
 8002d40:	e01b      	b.n	8002d7a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d42:	4b3d      	ldr	r3, [pc, #244]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002d44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d48:	4a3b      	ldr	r2, [pc, #236]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002d4a:	f023 0301 	bic.w	r3, r3, #1
 8002d4e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d52:	f7fe fc99 	bl	8001688 <HAL_GetTick>
 8002d56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d58:	e008      	b.n	8002d6c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d5a:	f7fe fc95 	bl	8001688 <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d901      	bls.n	8002d6c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e1b7      	b.n	80030dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d6c:	4b32      	ldr	r3, [pc, #200]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002d6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d1ef      	bne.n	8002d5a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0304 	and.w	r3, r3, #4
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	f000 80a6 	beq.w	8002ed4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002d8c:	4b2a      	ldr	r3, [pc, #168]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d10d      	bne.n	8002db4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d98:	4b27      	ldr	r3, [pc, #156]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d9c:	4a26      	ldr	r2, [pc, #152]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002d9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002da2:	6593      	str	r3, [r2, #88]	; 0x58
 8002da4:	4b24      	ldr	r3, [pc, #144]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002da8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dac:	60bb      	str	r3, [r7, #8]
 8002dae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002db0:	2301      	movs	r3, #1
 8002db2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002db4:	4b21      	ldr	r3, [pc, #132]	; (8002e3c <HAL_RCC_OscConfig+0x508>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d118      	bne.n	8002df2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002dc0:	4b1e      	ldr	r3, [pc, #120]	; (8002e3c <HAL_RCC_OscConfig+0x508>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a1d      	ldr	r2, [pc, #116]	; (8002e3c <HAL_RCC_OscConfig+0x508>)
 8002dc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dcc:	f7fe fc5c 	bl	8001688 <HAL_GetTick>
 8002dd0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dd2:	e008      	b.n	8002de6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dd4:	f7fe fc58 	bl	8001688 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e17a      	b.n	80030dc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002de6:	4b15      	ldr	r3, [pc, #84]	; (8002e3c <HAL_RCC_OscConfig+0x508>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d0f0      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d108      	bne.n	8002e0c <HAL_RCC_OscConfig+0x4d8>
 8002dfa:	4b0f      	ldr	r3, [pc, #60]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e00:	4a0d      	ldr	r2, [pc, #52]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002e02:	f043 0301 	orr.w	r3, r3, #1
 8002e06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e0a:	e029      	b.n	8002e60 <HAL_RCC_OscConfig+0x52c>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	2b05      	cmp	r3, #5
 8002e12:	d115      	bne.n	8002e40 <HAL_RCC_OscConfig+0x50c>
 8002e14:	4b08      	ldr	r3, [pc, #32]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e1a:	4a07      	ldr	r2, [pc, #28]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002e1c:	f043 0304 	orr.w	r3, r3, #4
 8002e20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e24:	4b04      	ldr	r3, [pc, #16]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e2a:	4a03      	ldr	r2, [pc, #12]	; (8002e38 <HAL_RCC_OscConfig+0x504>)
 8002e2c:	f043 0301 	orr.w	r3, r3, #1
 8002e30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e34:	e014      	b.n	8002e60 <HAL_RCC_OscConfig+0x52c>
 8002e36:	bf00      	nop
 8002e38:	40021000 	.word	0x40021000
 8002e3c:	40007000 	.word	0x40007000
 8002e40:	4b9c      	ldr	r3, [pc, #624]	; (80030b4 <HAL_RCC_OscConfig+0x780>)
 8002e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e46:	4a9b      	ldr	r2, [pc, #620]	; (80030b4 <HAL_RCC_OscConfig+0x780>)
 8002e48:	f023 0301 	bic.w	r3, r3, #1
 8002e4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e50:	4b98      	ldr	r3, [pc, #608]	; (80030b4 <HAL_RCC_OscConfig+0x780>)
 8002e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e56:	4a97      	ldr	r2, [pc, #604]	; (80030b4 <HAL_RCC_OscConfig+0x780>)
 8002e58:	f023 0304 	bic.w	r3, r3, #4
 8002e5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d016      	beq.n	8002e96 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e68:	f7fe fc0e 	bl	8001688 <HAL_GetTick>
 8002e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e6e:	e00a      	b.n	8002e86 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e70:	f7fe fc0a 	bl	8001688 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d901      	bls.n	8002e86 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e12a      	b.n	80030dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e86:	4b8b      	ldr	r3, [pc, #556]	; (80030b4 <HAL_RCC_OscConfig+0x780>)
 8002e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e8c:	f003 0302 	and.w	r3, r3, #2
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d0ed      	beq.n	8002e70 <HAL_RCC_OscConfig+0x53c>
 8002e94:	e015      	b.n	8002ec2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e96:	f7fe fbf7 	bl	8001688 <HAL_GetTick>
 8002e9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e9c:	e00a      	b.n	8002eb4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e9e:	f7fe fbf3 	bl	8001688 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d901      	bls.n	8002eb4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e113      	b.n	80030dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002eb4:	4b7f      	ldr	r3, [pc, #508]	; (80030b4 <HAL_RCC_OscConfig+0x780>)
 8002eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d1ed      	bne.n	8002e9e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ec2:	7ffb      	ldrb	r3, [r7, #31]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d105      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ec8:	4b7a      	ldr	r3, [pc, #488]	; (80030b4 <HAL_RCC_OscConfig+0x780>)
 8002eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ecc:	4a79      	ldr	r2, [pc, #484]	; (80030b4 <HAL_RCC_OscConfig+0x780>)
 8002ece:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ed2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	f000 80fe 	beq.w	80030da <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	f040 80d0 	bne.w	8003088 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002ee8:	4b72      	ldr	r3, [pc, #456]	; (80030b4 <HAL_RCC_OscConfig+0x780>)
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	f003 0203 	and.w	r2, r3, #3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d130      	bne.n	8002f5e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f06:	3b01      	subs	r3, #1
 8002f08:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d127      	bne.n	8002f5e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f18:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d11f      	bne.n	8002f5e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f28:	2a07      	cmp	r2, #7
 8002f2a:	bf14      	ite	ne
 8002f2c:	2201      	movne	r2, #1
 8002f2e:	2200      	moveq	r2, #0
 8002f30:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d113      	bne.n	8002f5e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f40:	085b      	lsrs	r3, r3, #1
 8002f42:	3b01      	subs	r3, #1
 8002f44:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d109      	bne.n	8002f5e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f54:	085b      	lsrs	r3, r3, #1
 8002f56:	3b01      	subs	r3, #1
 8002f58:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d06e      	beq.n	800303c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	2b0c      	cmp	r3, #12
 8002f62:	d069      	beq.n	8003038 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002f64:	4b53      	ldr	r3, [pc, #332]	; (80030b4 <HAL_RCC_OscConfig+0x780>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d105      	bne.n	8002f7c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002f70:	4b50      	ldr	r3, [pc, #320]	; (80030b4 <HAL_RCC_OscConfig+0x780>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d001      	beq.n	8002f80 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e0ad      	b.n	80030dc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002f80:	4b4c      	ldr	r3, [pc, #304]	; (80030b4 <HAL_RCC_OscConfig+0x780>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a4b      	ldr	r2, [pc, #300]	; (80030b4 <HAL_RCC_OscConfig+0x780>)
 8002f86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f8a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f8c:	f7fe fb7c 	bl	8001688 <HAL_GetTick>
 8002f90:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f92:	e008      	b.n	8002fa6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f94:	f7fe fb78 	bl	8001688 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e09a      	b.n	80030dc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fa6:	4b43      	ldr	r3, [pc, #268]	; (80030b4 <HAL_RCC_OscConfig+0x780>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d1f0      	bne.n	8002f94 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fb2:	4b40      	ldr	r3, [pc, #256]	; (80030b4 <HAL_RCC_OscConfig+0x780>)
 8002fb4:	68da      	ldr	r2, [r3, #12]
 8002fb6:	4b40      	ldr	r3, [pc, #256]	; (80030b8 <HAL_RCC_OscConfig+0x784>)
 8002fb8:	4013      	ands	r3, r2
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002fc2:	3a01      	subs	r2, #1
 8002fc4:	0112      	lsls	r2, r2, #4
 8002fc6:	4311      	orrs	r1, r2
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002fcc:	0212      	lsls	r2, r2, #8
 8002fce:	4311      	orrs	r1, r2
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002fd4:	0852      	lsrs	r2, r2, #1
 8002fd6:	3a01      	subs	r2, #1
 8002fd8:	0552      	lsls	r2, r2, #21
 8002fda:	4311      	orrs	r1, r2
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002fe0:	0852      	lsrs	r2, r2, #1
 8002fe2:	3a01      	subs	r2, #1
 8002fe4:	0652      	lsls	r2, r2, #25
 8002fe6:	4311      	orrs	r1, r2
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002fec:	0912      	lsrs	r2, r2, #4
 8002fee:	0452      	lsls	r2, r2, #17
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	4930      	ldr	r1, [pc, #192]	; (80030b4 <HAL_RCC_OscConfig+0x780>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002ff8:	4b2e      	ldr	r3, [pc, #184]	; (80030b4 <HAL_RCC_OscConfig+0x780>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a2d      	ldr	r2, [pc, #180]	; (80030b4 <HAL_RCC_OscConfig+0x780>)
 8002ffe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003002:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003004:	4b2b      	ldr	r3, [pc, #172]	; (80030b4 <HAL_RCC_OscConfig+0x780>)
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	4a2a      	ldr	r2, [pc, #168]	; (80030b4 <HAL_RCC_OscConfig+0x780>)
 800300a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800300e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003010:	f7fe fb3a 	bl	8001688 <HAL_GetTick>
 8003014:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003016:	e008      	b.n	800302a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003018:	f7fe fb36 	bl	8001688 <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	2b02      	cmp	r3, #2
 8003024:	d901      	bls.n	800302a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e058      	b.n	80030dc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800302a:	4b22      	ldr	r3, [pc, #136]	; (80030b4 <HAL_RCC_OscConfig+0x780>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d0f0      	beq.n	8003018 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003036:	e050      	b.n	80030da <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e04f      	b.n	80030dc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800303c:	4b1d      	ldr	r3, [pc, #116]	; (80030b4 <HAL_RCC_OscConfig+0x780>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d148      	bne.n	80030da <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003048:	4b1a      	ldr	r3, [pc, #104]	; (80030b4 <HAL_RCC_OscConfig+0x780>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a19      	ldr	r2, [pc, #100]	; (80030b4 <HAL_RCC_OscConfig+0x780>)
 800304e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003052:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003054:	4b17      	ldr	r3, [pc, #92]	; (80030b4 <HAL_RCC_OscConfig+0x780>)
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	4a16      	ldr	r2, [pc, #88]	; (80030b4 <HAL_RCC_OscConfig+0x780>)
 800305a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800305e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003060:	f7fe fb12 	bl	8001688 <HAL_GetTick>
 8003064:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003066:	e008      	b.n	800307a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003068:	f7fe fb0e 	bl	8001688 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b02      	cmp	r3, #2
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e030      	b.n	80030dc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800307a:	4b0e      	ldr	r3, [pc, #56]	; (80030b4 <HAL_RCC_OscConfig+0x780>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d0f0      	beq.n	8003068 <HAL_RCC_OscConfig+0x734>
 8003086:	e028      	b.n	80030da <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	2b0c      	cmp	r3, #12
 800308c:	d023      	beq.n	80030d6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800308e:	4b09      	ldr	r3, [pc, #36]	; (80030b4 <HAL_RCC_OscConfig+0x780>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a08      	ldr	r2, [pc, #32]	; (80030b4 <HAL_RCC_OscConfig+0x780>)
 8003094:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003098:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800309a:	f7fe faf5 	bl	8001688 <HAL_GetTick>
 800309e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030a0:	e00c      	b.n	80030bc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030a2:	f7fe faf1 	bl	8001688 <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d905      	bls.n	80030bc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e013      	b.n	80030dc <HAL_RCC_OscConfig+0x7a8>
 80030b4:	40021000 	.word	0x40021000
 80030b8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030bc:	4b09      	ldr	r3, [pc, #36]	; (80030e4 <HAL_RCC_OscConfig+0x7b0>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d1ec      	bne.n	80030a2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80030c8:	4b06      	ldr	r3, [pc, #24]	; (80030e4 <HAL_RCC_OscConfig+0x7b0>)
 80030ca:	68da      	ldr	r2, [r3, #12]
 80030cc:	4905      	ldr	r1, [pc, #20]	; (80030e4 <HAL_RCC_OscConfig+0x7b0>)
 80030ce:	4b06      	ldr	r3, [pc, #24]	; (80030e8 <HAL_RCC_OscConfig+0x7b4>)
 80030d0:	4013      	ands	r3, r2
 80030d2:	60cb      	str	r3, [r1, #12]
 80030d4:	e001      	b.n	80030da <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e000      	b.n	80030dc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80030da:	2300      	movs	r3, #0
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3720      	adds	r7, #32
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	40021000 	.word	0x40021000
 80030e8:	feeefffc 	.word	0xfeeefffc

080030ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d101      	bne.n	8003100 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e0e7      	b.n	80032d0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003100:	4b75      	ldr	r3, [pc, #468]	; (80032d8 <HAL_RCC_ClockConfig+0x1ec>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0307 	and.w	r3, r3, #7
 8003108:	683a      	ldr	r2, [r7, #0]
 800310a:	429a      	cmp	r2, r3
 800310c:	d910      	bls.n	8003130 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800310e:	4b72      	ldr	r3, [pc, #456]	; (80032d8 <HAL_RCC_ClockConfig+0x1ec>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f023 0207 	bic.w	r2, r3, #7
 8003116:	4970      	ldr	r1, [pc, #448]	; (80032d8 <HAL_RCC_ClockConfig+0x1ec>)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	4313      	orrs	r3, r2
 800311c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800311e:	4b6e      	ldr	r3, [pc, #440]	; (80032d8 <HAL_RCC_ClockConfig+0x1ec>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0307 	and.w	r3, r3, #7
 8003126:	683a      	ldr	r2, [r7, #0]
 8003128:	429a      	cmp	r2, r3
 800312a:	d001      	beq.n	8003130 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e0cf      	b.n	80032d0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0302 	and.w	r3, r3, #2
 8003138:	2b00      	cmp	r3, #0
 800313a:	d010      	beq.n	800315e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689a      	ldr	r2, [r3, #8]
 8003140:	4b66      	ldr	r3, [pc, #408]	; (80032dc <HAL_RCC_ClockConfig+0x1f0>)
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003148:	429a      	cmp	r2, r3
 800314a:	d908      	bls.n	800315e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800314c:	4b63      	ldr	r3, [pc, #396]	; (80032dc <HAL_RCC_ClockConfig+0x1f0>)
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	4960      	ldr	r1, [pc, #384]	; (80032dc <HAL_RCC_ClockConfig+0x1f0>)
 800315a:	4313      	orrs	r3, r2
 800315c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	2b00      	cmp	r3, #0
 8003168:	d04c      	beq.n	8003204 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	2b03      	cmp	r3, #3
 8003170:	d107      	bne.n	8003182 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003172:	4b5a      	ldr	r3, [pc, #360]	; (80032dc <HAL_RCC_ClockConfig+0x1f0>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d121      	bne.n	80031c2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e0a6      	b.n	80032d0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	2b02      	cmp	r3, #2
 8003188:	d107      	bne.n	800319a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800318a:	4b54      	ldr	r3, [pc, #336]	; (80032dc <HAL_RCC_ClockConfig+0x1f0>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d115      	bne.n	80031c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e09a      	b.n	80032d0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d107      	bne.n	80031b2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031a2:	4b4e      	ldr	r3, [pc, #312]	; (80032dc <HAL_RCC_ClockConfig+0x1f0>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d109      	bne.n	80031c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e08e      	b.n	80032d0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031b2:	4b4a      	ldr	r3, [pc, #296]	; (80032dc <HAL_RCC_ClockConfig+0x1f0>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d101      	bne.n	80031c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e086      	b.n	80032d0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80031c2:	4b46      	ldr	r3, [pc, #280]	; (80032dc <HAL_RCC_ClockConfig+0x1f0>)
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f023 0203 	bic.w	r2, r3, #3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	4943      	ldr	r1, [pc, #268]	; (80032dc <HAL_RCC_ClockConfig+0x1f0>)
 80031d0:	4313      	orrs	r3, r2
 80031d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031d4:	f7fe fa58 	bl	8001688 <HAL_GetTick>
 80031d8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031da:	e00a      	b.n	80031f2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031dc:	f7fe fa54 	bl	8001688 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e06e      	b.n	80032d0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031f2:	4b3a      	ldr	r3, [pc, #232]	; (80032dc <HAL_RCC_ClockConfig+0x1f0>)
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f003 020c 	and.w	r2, r3, #12
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	429a      	cmp	r2, r3
 8003202:	d1eb      	bne.n	80031dc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0302 	and.w	r3, r3, #2
 800320c:	2b00      	cmp	r3, #0
 800320e:	d010      	beq.n	8003232 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689a      	ldr	r2, [r3, #8]
 8003214:	4b31      	ldr	r3, [pc, #196]	; (80032dc <HAL_RCC_ClockConfig+0x1f0>)
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800321c:	429a      	cmp	r2, r3
 800321e:	d208      	bcs.n	8003232 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003220:	4b2e      	ldr	r3, [pc, #184]	; (80032dc <HAL_RCC_ClockConfig+0x1f0>)
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	492b      	ldr	r1, [pc, #172]	; (80032dc <HAL_RCC_ClockConfig+0x1f0>)
 800322e:	4313      	orrs	r3, r2
 8003230:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003232:	4b29      	ldr	r3, [pc, #164]	; (80032d8 <HAL_RCC_ClockConfig+0x1ec>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0307 	and.w	r3, r3, #7
 800323a:	683a      	ldr	r2, [r7, #0]
 800323c:	429a      	cmp	r2, r3
 800323e:	d210      	bcs.n	8003262 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003240:	4b25      	ldr	r3, [pc, #148]	; (80032d8 <HAL_RCC_ClockConfig+0x1ec>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f023 0207 	bic.w	r2, r3, #7
 8003248:	4923      	ldr	r1, [pc, #140]	; (80032d8 <HAL_RCC_ClockConfig+0x1ec>)
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	4313      	orrs	r3, r2
 800324e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003250:	4b21      	ldr	r3, [pc, #132]	; (80032d8 <HAL_RCC_ClockConfig+0x1ec>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0307 	and.w	r3, r3, #7
 8003258:	683a      	ldr	r2, [r7, #0]
 800325a:	429a      	cmp	r2, r3
 800325c:	d001      	beq.n	8003262 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e036      	b.n	80032d0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0304 	and.w	r3, r3, #4
 800326a:	2b00      	cmp	r3, #0
 800326c:	d008      	beq.n	8003280 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800326e:	4b1b      	ldr	r3, [pc, #108]	; (80032dc <HAL_RCC_ClockConfig+0x1f0>)
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	4918      	ldr	r1, [pc, #96]	; (80032dc <HAL_RCC_ClockConfig+0x1f0>)
 800327c:	4313      	orrs	r3, r2
 800327e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0308 	and.w	r3, r3, #8
 8003288:	2b00      	cmp	r3, #0
 800328a:	d009      	beq.n	80032a0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800328c:	4b13      	ldr	r3, [pc, #76]	; (80032dc <HAL_RCC_ClockConfig+0x1f0>)
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	691b      	ldr	r3, [r3, #16]
 8003298:	00db      	lsls	r3, r3, #3
 800329a:	4910      	ldr	r1, [pc, #64]	; (80032dc <HAL_RCC_ClockConfig+0x1f0>)
 800329c:	4313      	orrs	r3, r2
 800329e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80032a0:	f000 f824 	bl	80032ec <HAL_RCC_GetSysClockFreq>
 80032a4:	4602      	mov	r2, r0
 80032a6:	4b0d      	ldr	r3, [pc, #52]	; (80032dc <HAL_RCC_ClockConfig+0x1f0>)
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	091b      	lsrs	r3, r3, #4
 80032ac:	f003 030f 	and.w	r3, r3, #15
 80032b0:	490b      	ldr	r1, [pc, #44]	; (80032e0 <HAL_RCC_ClockConfig+0x1f4>)
 80032b2:	5ccb      	ldrb	r3, [r1, r3]
 80032b4:	f003 031f 	and.w	r3, r3, #31
 80032b8:	fa22 f303 	lsr.w	r3, r2, r3
 80032bc:	4a09      	ldr	r2, [pc, #36]	; (80032e4 <HAL_RCC_ClockConfig+0x1f8>)
 80032be:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80032c0:	4b09      	ldr	r3, [pc, #36]	; (80032e8 <HAL_RCC_ClockConfig+0x1fc>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7fe f98f 	bl	80015e8 <HAL_InitTick>
 80032ca:	4603      	mov	r3, r0
 80032cc:	72fb      	strb	r3, [r7, #11]

  return status;
 80032ce:	7afb      	ldrb	r3, [r7, #11]
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3710      	adds	r7, #16
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	40022000 	.word	0x40022000
 80032dc:	40021000 	.word	0x40021000
 80032e0:	08005364 	.word	0x08005364
 80032e4:	20000000 	.word	0x20000000
 80032e8:	20000004 	.word	0x20000004

080032ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b089      	sub	sp, #36	; 0x24
 80032f0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80032f2:	2300      	movs	r3, #0
 80032f4:	61fb      	str	r3, [r7, #28]
 80032f6:	2300      	movs	r3, #0
 80032f8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032fa:	4b3e      	ldr	r3, [pc, #248]	; (80033f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f003 030c 	and.w	r3, r3, #12
 8003302:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003304:	4b3b      	ldr	r3, [pc, #236]	; (80033f4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	f003 0303 	and.w	r3, r3, #3
 800330c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d005      	beq.n	8003320 <HAL_RCC_GetSysClockFreq+0x34>
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	2b0c      	cmp	r3, #12
 8003318:	d121      	bne.n	800335e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2b01      	cmp	r3, #1
 800331e:	d11e      	bne.n	800335e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003320:	4b34      	ldr	r3, [pc, #208]	; (80033f4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0308 	and.w	r3, r3, #8
 8003328:	2b00      	cmp	r3, #0
 800332a:	d107      	bne.n	800333c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800332c:	4b31      	ldr	r3, [pc, #196]	; (80033f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800332e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003332:	0a1b      	lsrs	r3, r3, #8
 8003334:	f003 030f 	and.w	r3, r3, #15
 8003338:	61fb      	str	r3, [r7, #28]
 800333a:	e005      	b.n	8003348 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800333c:	4b2d      	ldr	r3, [pc, #180]	; (80033f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	091b      	lsrs	r3, r3, #4
 8003342:	f003 030f 	and.w	r3, r3, #15
 8003346:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003348:	4a2b      	ldr	r2, [pc, #172]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003350:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d10d      	bne.n	8003374 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800335c:	e00a      	b.n	8003374 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	2b04      	cmp	r3, #4
 8003362:	d102      	bne.n	800336a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003364:	4b25      	ldr	r3, [pc, #148]	; (80033fc <HAL_RCC_GetSysClockFreq+0x110>)
 8003366:	61bb      	str	r3, [r7, #24]
 8003368:	e004      	b.n	8003374 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	2b08      	cmp	r3, #8
 800336e:	d101      	bne.n	8003374 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003370:	4b23      	ldr	r3, [pc, #140]	; (8003400 <HAL_RCC_GetSysClockFreq+0x114>)
 8003372:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	2b0c      	cmp	r3, #12
 8003378:	d134      	bne.n	80033e4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800337a:	4b1e      	ldr	r3, [pc, #120]	; (80033f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	f003 0303 	and.w	r3, r3, #3
 8003382:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	2b02      	cmp	r3, #2
 8003388:	d003      	beq.n	8003392 <HAL_RCC_GetSysClockFreq+0xa6>
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	2b03      	cmp	r3, #3
 800338e:	d003      	beq.n	8003398 <HAL_RCC_GetSysClockFreq+0xac>
 8003390:	e005      	b.n	800339e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003392:	4b1a      	ldr	r3, [pc, #104]	; (80033fc <HAL_RCC_GetSysClockFreq+0x110>)
 8003394:	617b      	str	r3, [r7, #20]
      break;
 8003396:	e005      	b.n	80033a4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003398:	4b19      	ldr	r3, [pc, #100]	; (8003400 <HAL_RCC_GetSysClockFreq+0x114>)
 800339a:	617b      	str	r3, [r7, #20]
      break;
 800339c:	e002      	b.n	80033a4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	617b      	str	r3, [r7, #20]
      break;
 80033a2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80033a4:	4b13      	ldr	r3, [pc, #76]	; (80033f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	091b      	lsrs	r3, r3, #4
 80033aa:	f003 0307 	and.w	r3, r3, #7
 80033ae:	3301      	adds	r3, #1
 80033b0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80033b2:	4b10      	ldr	r3, [pc, #64]	; (80033f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	0a1b      	lsrs	r3, r3, #8
 80033b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033bc:	697a      	ldr	r2, [r7, #20]
 80033be:	fb03 f202 	mul.w	r2, r3, r2
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033c8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80033ca:	4b0a      	ldr	r3, [pc, #40]	; (80033f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	0e5b      	lsrs	r3, r3, #25
 80033d0:	f003 0303 	and.w	r3, r3, #3
 80033d4:	3301      	adds	r3, #1
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80033da:	697a      	ldr	r2, [r7, #20]
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	fbb2 f3f3 	udiv	r3, r2, r3
 80033e2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80033e4:	69bb      	ldr	r3, [r7, #24]
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3724      	adds	r7, #36	; 0x24
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	40021000 	.word	0x40021000
 80033f8:	0800537c 	.word	0x0800537c
 80033fc:	00f42400 	.word	0x00f42400
 8003400:	007a1200 	.word	0x007a1200

08003404 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003404:	b480      	push	{r7}
 8003406:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003408:	4b03      	ldr	r3, [pc, #12]	; (8003418 <HAL_RCC_GetHCLKFreq+0x14>)
 800340a:	681b      	ldr	r3, [r3, #0]
}
 800340c:	4618      	mov	r0, r3
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	20000000 	.word	0x20000000

0800341c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003420:	f7ff fff0 	bl	8003404 <HAL_RCC_GetHCLKFreq>
 8003424:	4602      	mov	r2, r0
 8003426:	4b06      	ldr	r3, [pc, #24]	; (8003440 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	0a1b      	lsrs	r3, r3, #8
 800342c:	f003 0307 	and.w	r3, r3, #7
 8003430:	4904      	ldr	r1, [pc, #16]	; (8003444 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003432:	5ccb      	ldrb	r3, [r1, r3]
 8003434:	f003 031f 	and.w	r3, r3, #31
 8003438:	fa22 f303 	lsr.w	r3, r2, r3
}
 800343c:	4618      	mov	r0, r3
 800343e:	bd80      	pop	{r7, pc}
 8003440:	40021000 	.word	0x40021000
 8003444:	08005374 	.word	0x08005374

08003448 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800344c:	f7ff ffda 	bl	8003404 <HAL_RCC_GetHCLKFreq>
 8003450:	4602      	mov	r2, r0
 8003452:	4b06      	ldr	r3, [pc, #24]	; (800346c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	0adb      	lsrs	r3, r3, #11
 8003458:	f003 0307 	and.w	r3, r3, #7
 800345c:	4904      	ldr	r1, [pc, #16]	; (8003470 <HAL_RCC_GetPCLK2Freq+0x28>)
 800345e:	5ccb      	ldrb	r3, [r1, r3]
 8003460:	f003 031f 	and.w	r3, r3, #31
 8003464:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003468:	4618      	mov	r0, r3
 800346a:	bd80      	pop	{r7, pc}
 800346c:	40021000 	.word	0x40021000
 8003470:	08005374 	.word	0x08005374

08003474 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b086      	sub	sp, #24
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800347c:	2300      	movs	r3, #0
 800347e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003480:	4b2a      	ldr	r3, [pc, #168]	; (800352c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003484:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d003      	beq.n	8003494 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800348c:	f7ff f9ee 	bl	800286c <HAL_PWREx_GetVoltageRange>
 8003490:	6178      	str	r0, [r7, #20]
 8003492:	e014      	b.n	80034be <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003494:	4b25      	ldr	r3, [pc, #148]	; (800352c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003498:	4a24      	ldr	r2, [pc, #144]	; (800352c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800349a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800349e:	6593      	str	r3, [r2, #88]	; 0x58
 80034a0:	4b22      	ldr	r3, [pc, #136]	; (800352c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a8:	60fb      	str	r3, [r7, #12]
 80034aa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80034ac:	f7ff f9de 	bl	800286c <HAL_PWREx_GetVoltageRange>
 80034b0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80034b2:	4b1e      	ldr	r3, [pc, #120]	; (800352c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b6:	4a1d      	ldr	r2, [pc, #116]	; (800352c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034bc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034c4:	d10b      	bne.n	80034de <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2b80      	cmp	r3, #128	; 0x80
 80034ca:	d919      	bls.n	8003500 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2ba0      	cmp	r3, #160	; 0xa0
 80034d0:	d902      	bls.n	80034d8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80034d2:	2302      	movs	r3, #2
 80034d4:	613b      	str	r3, [r7, #16]
 80034d6:	e013      	b.n	8003500 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80034d8:	2301      	movs	r3, #1
 80034da:	613b      	str	r3, [r7, #16]
 80034dc:	e010      	b.n	8003500 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2b80      	cmp	r3, #128	; 0x80
 80034e2:	d902      	bls.n	80034ea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80034e4:	2303      	movs	r3, #3
 80034e6:	613b      	str	r3, [r7, #16]
 80034e8:	e00a      	b.n	8003500 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2b80      	cmp	r3, #128	; 0x80
 80034ee:	d102      	bne.n	80034f6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80034f0:	2302      	movs	r3, #2
 80034f2:	613b      	str	r3, [r7, #16]
 80034f4:	e004      	b.n	8003500 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2b70      	cmp	r3, #112	; 0x70
 80034fa:	d101      	bne.n	8003500 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80034fc:	2301      	movs	r3, #1
 80034fe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003500:	4b0b      	ldr	r3, [pc, #44]	; (8003530 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f023 0207 	bic.w	r2, r3, #7
 8003508:	4909      	ldr	r1, [pc, #36]	; (8003530 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	4313      	orrs	r3, r2
 800350e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003510:	4b07      	ldr	r3, [pc, #28]	; (8003530 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0307 	and.w	r3, r3, #7
 8003518:	693a      	ldr	r2, [r7, #16]
 800351a:	429a      	cmp	r2, r3
 800351c:	d001      	beq.n	8003522 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e000      	b.n	8003524 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003522:	2300      	movs	r3, #0
}
 8003524:	4618      	mov	r0, r3
 8003526:	3718      	adds	r7, #24
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	40021000 	.word	0x40021000
 8003530:	40022000 	.word	0x40022000

08003534 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b086      	sub	sp, #24
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800353c:	2300      	movs	r3, #0
 800353e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003540:	2300      	movs	r3, #0
 8003542:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800354c:	2b00      	cmp	r3, #0
 800354e:	d041      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003554:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003558:	d02a      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800355a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800355e:	d824      	bhi.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003560:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003564:	d008      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003566:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800356a:	d81e      	bhi.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00a      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003570:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003574:	d010      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003576:	e018      	b.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003578:	4b86      	ldr	r3, [pc, #536]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	4a85      	ldr	r2, [pc, #532]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800357e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003582:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003584:	e015      	b.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	3304      	adds	r3, #4
 800358a:	2100      	movs	r1, #0
 800358c:	4618      	mov	r0, r3
 800358e:	f000 fabb 	bl	8003b08 <RCCEx_PLLSAI1_Config>
 8003592:	4603      	mov	r3, r0
 8003594:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003596:	e00c      	b.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	3320      	adds	r3, #32
 800359c:	2100      	movs	r1, #0
 800359e:	4618      	mov	r0, r3
 80035a0:	f000 fba6 	bl	8003cf0 <RCCEx_PLLSAI2_Config>
 80035a4:	4603      	mov	r3, r0
 80035a6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035a8:	e003      	b.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	74fb      	strb	r3, [r7, #19]
      break;
 80035ae:	e000      	b.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80035b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035b2:	7cfb      	ldrb	r3, [r7, #19]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d10b      	bne.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80035b8:	4b76      	ldr	r3, [pc, #472]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035be:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035c6:	4973      	ldr	r1, [pc, #460]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80035ce:	e001      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035d0:	7cfb      	ldrb	r3, [r7, #19]
 80035d2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d041      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035e4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80035e8:	d02a      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80035ea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80035ee:	d824      	bhi.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80035f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80035f4:	d008      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80035f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80035fa:	d81e      	bhi.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d00a      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003600:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003604:	d010      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003606:	e018      	b.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003608:	4b62      	ldr	r3, [pc, #392]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	4a61      	ldr	r2, [pc, #388]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800360e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003612:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003614:	e015      	b.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	3304      	adds	r3, #4
 800361a:	2100      	movs	r1, #0
 800361c:	4618      	mov	r0, r3
 800361e:	f000 fa73 	bl	8003b08 <RCCEx_PLLSAI1_Config>
 8003622:	4603      	mov	r3, r0
 8003624:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003626:	e00c      	b.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	3320      	adds	r3, #32
 800362c:	2100      	movs	r1, #0
 800362e:	4618      	mov	r0, r3
 8003630:	f000 fb5e 	bl	8003cf0 <RCCEx_PLLSAI2_Config>
 8003634:	4603      	mov	r3, r0
 8003636:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003638:	e003      	b.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	74fb      	strb	r3, [r7, #19]
      break;
 800363e:	e000      	b.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003640:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003642:	7cfb      	ldrb	r3, [r7, #19]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d10b      	bne.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003648:	4b52      	ldr	r3, [pc, #328]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800364a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800364e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003656:	494f      	ldr	r1, [pc, #316]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003658:	4313      	orrs	r3, r2
 800365a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800365e:	e001      	b.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003660:	7cfb      	ldrb	r3, [r7, #19]
 8003662:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800366c:	2b00      	cmp	r3, #0
 800366e:	f000 80a0 	beq.w	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003672:	2300      	movs	r3, #0
 8003674:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003676:	4b47      	ldr	r3, [pc, #284]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800367a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d101      	bne.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003682:	2301      	movs	r3, #1
 8003684:	e000      	b.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003686:	2300      	movs	r3, #0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d00d      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800368c:	4b41      	ldr	r3, [pc, #260]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800368e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003690:	4a40      	ldr	r2, [pc, #256]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003692:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003696:	6593      	str	r3, [r2, #88]	; 0x58
 8003698:	4b3e      	ldr	r3, [pc, #248]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800369a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800369c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036a0:	60bb      	str	r3, [r7, #8]
 80036a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036a4:	2301      	movs	r3, #1
 80036a6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036a8:	4b3b      	ldr	r3, [pc, #236]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a3a      	ldr	r2, [pc, #232]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80036ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80036b4:	f7fd ffe8 	bl	8001688 <HAL_GetTick>
 80036b8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80036ba:	e009      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036bc:	f7fd ffe4 	bl	8001688 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d902      	bls.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	74fb      	strb	r3, [r7, #19]
        break;
 80036ce:	e005      	b.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80036d0:	4b31      	ldr	r3, [pc, #196]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d0ef      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80036dc:	7cfb      	ldrb	r3, [r7, #19]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d15c      	bne.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80036e2:	4b2c      	ldr	r3, [pc, #176]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ec:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d01f      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036fa:	697a      	ldr	r2, [r7, #20]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d019      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003700:	4b24      	ldr	r3, [pc, #144]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003706:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800370a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800370c:	4b21      	ldr	r3, [pc, #132]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800370e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003712:	4a20      	ldr	r2, [pc, #128]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003718:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800371c:	4b1d      	ldr	r3, [pc, #116]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800371e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003722:	4a1c      	ldr	r2, [pc, #112]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003724:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003728:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800372c:	4a19      	ldr	r2, [pc, #100]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	2b00      	cmp	r3, #0
 800373c:	d016      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800373e:	f7fd ffa3 	bl	8001688 <HAL_GetTick>
 8003742:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003744:	e00b      	b.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003746:	f7fd ff9f 	bl	8001688 <HAL_GetTick>
 800374a:	4602      	mov	r2, r0
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	f241 3288 	movw	r2, #5000	; 0x1388
 8003754:	4293      	cmp	r3, r2
 8003756:	d902      	bls.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	74fb      	strb	r3, [r7, #19]
            break;
 800375c:	e006      	b.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800375e:	4b0d      	ldr	r3, [pc, #52]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003764:	f003 0302 	and.w	r3, r3, #2
 8003768:	2b00      	cmp	r3, #0
 800376a:	d0ec      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800376c:	7cfb      	ldrb	r3, [r7, #19]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d10c      	bne.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003772:	4b08      	ldr	r3, [pc, #32]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003778:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003782:	4904      	ldr	r1, [pc, #16]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003784:	4313      	orrs	r3, r2
 8003786:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800378a:	e009      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800378c:	7cfb      	ldrb	r3, [r7, #19]
 800378e:	74bb      	strb	r3, [r7, #18]
 8003790:	e006      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003792:	bf00      	nop
 8003794:	40021000 	.word	0x40021000
 8003798:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800379c:	7cfb      	ldrb	r3, [r7, #19]
 800379e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037a0:	7c7b      	ldrb	r3, [r7, #17]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d105      	bne.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037a6:	4b9e      	ldr	r3, [pc, #632]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037aa:	4a9d      	ldr	r2, [pc, #628]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037b0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00a      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037be:	4b98      	ldr	r3, [pc, #608]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037c4:	f023 0203 	bic.w	r2, r3, #3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037cc:	4994      	ldr	r1, [pc, #592]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0302 	and.w	r3, r3, #2
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00a      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037e0:	4b8f      	ldr	r3, [pc, #572]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e6:	f023 020c 	bic.w	r2, r3, #12
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ee:	498c      	ldr	r1, [pc, #560]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0304 	and.w	r3, r3, #4
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00a      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003802:	4b87      	ldr	r3, [pc, #540]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003808:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003810:	4983      	ldr	r1, [pc, #524]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003812:	4313      	orrs	r3, r2
 8003814:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0308 	and.w	r3, r3, #8
 8003820:	2b00      	cmp	r3, #0
 8003822:	d00a      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003824:	4b7e      	ldr	r3, [pc, #504]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800382a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003832:	497b      	ldr	r1, [pc, #492]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003834:	4313      	orrs	r3, r2
 8003836:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0310 	and.w	r3, r3, #16
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00a      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003846:	4b76      	ldr	r3, [pc, #472]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800384c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003854:	4972      	ldr	r1, [pc, #456]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003856:	4313      	orrs	r3, r2
 8003858:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0320 	and.w	r3, r3, #32
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00a      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003868:	4b6d      	ldr	r3, [pc, #436]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800386a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800386e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003876:	496a      	ldr	r1, [pc, #424]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003878:	4313      	orrs	r3, r2
 800387a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00a      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800388a:	4b65      	ldr	r3, [pc, #404]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800388c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003890:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003898:	4961      	ldr	r1, [pc, #388]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800389a:	4313      	orrs	r3, r2
 800389c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00a      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80038ac:	4b5c      	ldr	r3, [pc, #368]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038ba:	4959      	ldr	r1, [pc, #356]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00a      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038ce:	4b54      	ldr	r3, [pc, #336]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038d4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038dc:	4950      	ldr	r1, [pc, #320]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d00a      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80038f0:	4b4b      	ldr	r3, [pc, #300]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038fe:	4948      	ldr	r1, [pc, #288]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003900:	4313      	orrs	r3, r2
 8003902:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00a      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003912:	4b43      	ldr	r3, [pc, #268]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003918:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003920:	493f      	ldr	r1, [pc, #252]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003922:	4313      	orrs	r3, r2
 8003924:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d028      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003934:	4b3a      	ldr	r3, [pc, #232]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800393a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003942:	4937      	ldr	r1, [pc, #220]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003944:	4313      	orrs	r3, r2
 8003946:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800394e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003952:	d106      	bne.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003954:	4b32      	ldr	r3, [pc, #200]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	4a31      	ldr	r2, [pc, #196]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800395a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800395e:	60d3      	str	r3, [r2, #12]
 8003960:	e011      	b.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003966:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800396a:	d10c      	bne.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	3304      	adds	r3, #4
 8003970:	2101      	movs	r1, #1
 8003972:	4618      	mov	r0, r3
 8003974:	f000 f8c8 	bl	8003b08 <RCCEx_PLLSAI1_Config>
 8003978:	4603      	mov	r3, r0
 800397a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800397c:	7cfb      	ldrb	r3, [r7, #19]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d001      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003982:	7cfb      	ldrb	r3, [r7, #19]
 8003984:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d028      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003992:	4b23      	ldr	r3, [pc, #140]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003998:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a0:	491f      	ldr	r1, [pc, #124]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039b0:	d106      	bne.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039b2:	4b1b      	ldr	r3, [pc, #108]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	4a1a      	ldr	r2, [pc, #104]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039bc:	60d3      	str	r3, [r2, #12]
 80039be:	e011      	b.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039c8:	d10c      	bne.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	3304      	adds	r3, #4
 80039ce:	2101      	movs	r1, #1
 80039d0:	4618      	mov	r0, r3
 80039d2:	f000 f899 	bl	8003b08 <RCCEx_PLLSAI1_Config>
 80039d6:	4603      	mov	r3, r0
 80039d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039da:	7cfb      	ldrb	r3, [r7, #19]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d001      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80039e0:	7cfb      	ldrb	r3, [r7, #19]
 80039e2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d02b      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80039f0:	4b0b      	ldr	r3, [pc, #44]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039fe:	4908      	ldr	r1, [pc, #32]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a0e:	d109      	bne.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a10:	4b03      	ldr	r3, [pc, #12]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	4a02      	ldr	r2, [pc, #8]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a1a:	60d3      	str	r3, [r2, #12]
 8003a1c:	e014      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003a1e:	bf00      	nop
 8003a20:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a2c:	d10c      	bne.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	3304      	adds	r3, #4
 8003a32:	2101      	movs	r1, #1
 8003a34:	4618      	mov	r0, r3
 8003a36:	f000 f867 	bl	8003b08 <RCCEx_PLLSAI1_Config>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a3e:	7cfb      	ldrb	r3, [r7, #19]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d001      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003a44:	7cfb      	ldrb	r3, [r7, #19]
 8003a46:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d02f      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a54:	4b2b      	ldr	r3, [pc, #172]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a5a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a62:	4928      	ldr	r1, [pc, #160]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a64:	4313      	orrs	r3, r2
 8003a66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a72:	d10d      	bne.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	3304      	adds	r3, #4
 8003a78:	2102      	movs	r1, #2
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f000 f844 	bl	8003b08 <RCCEx_PLLSAI1_Config>
 8003a80:	4603      	mov	r3, r0
 8003a82:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a84:	7cfb      	ldrb	r3, [r7, #19]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d014      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003a8a:	7cfb      	ldrb	r3, [r7, #19]
 8003a8c:	74bb      	strb	r3, [r7, #18]
 8003a8e:	e011      	b.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a98:	d10c      	bne.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	3320      	adds	r3, #32
 8003a9e:	2102      	movs	r1, #2
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f000 f925 	bl	8003cf0 <RCCEx_PLLSAI2_Config>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003aaa:	7cfb      	ldrb	r3, [r7, #19]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d001      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003ab0:	7cfb      	ldrb	r3, [r7, #19]
 8003ab2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d00a      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003ac0:	4b10      	ldr	r3, [pc, #64]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ac6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ace:	490d      	ldr	r1, [pc, #52]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00b      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003ae2:	4b08      	ldr	r3, [pc, #32]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003af2:	4904      	ldr	r1, [pc, #16]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003afa:	7cbb      	ldrb	r3, [r7, #18]
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3718      	adds	r7, #24
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	40021000 	.word	0x40021000

08003b08 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b12:	2300      	movs	r3, #0
 8003b14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b16:	4b75      	ldr	r3, [pc, #468]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	f003 0303 	and.w	r3, r3, #3
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d018      	beq.n	8003b54 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003b22:	4b72      	ldr	r3, [pc, #456]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	f003 0203 	and.w	r2, r3, #3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d10d      	bne.n	8003b4e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
       ||
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d009      	beq.n	8003b4e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003b3a:	4b6c      	ldr	r3, [pc, #432]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	091b      	lsrs	r3, r3, #4
 8003b40:	f003 0307 	and.w	r3, r3, #7
 8003b44:	1c5a      	adds	r2, r3, #1
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
       ||
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d047      	beq.n	8003bde <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	73fb      	strb	r3, [r7, #15]
 8003b52:	e044      	b.n	8003bde <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2b03      	cmp	r3, #3
 8003b5a:	d018      	beq.n	8003b8e <RCCEx_PLLSAI1_Config+0x86>
 8003b5c:	2b03      	cmp	r3, #3
 8003b5e:	d825      	bhi.n	8003bac <RCCEx_PLLSAI1_Config+0xa4>
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d002      	beq.n	8003b6a <RCCEx_PLLSAI1_Config+0x62>
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d009      	beq.n	8003b7c <RCCEx_PLLSAI1_Config+0x74>
 8003b68:	e020      	b.n	8003bac <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b6a:	4b60      	ldr	r3, [pc, #384]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0302 	and.w	r3, r3, #2
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d11d      	bne.n	8003bb2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b7a:	e01a      	b.n	8003bb2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b7c:	4b5b      	ldr	r3, [pc, #364]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d116      	bne.n	8003bb6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b8c:	e013      	b.n	8003bb6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b8e:	4b57      	ldr	r3, [pc, #348]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d10f      	bne.n	8003bba <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b9a:	4b54      	ldr	r3, [pc, #336]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d109      	bne.n	8003bba <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003baa:	e006      	b.n	8003bba <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	73fb      	strb	r3, [r7, #15]
      break;
 8003bb0:	e004      	b.n	8003bbc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003bb2:	bf00      	nop
 8003bb4:	e002      	b.n	8003bbc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003bb6:	bf00      	nop
 8003bb8:	e000      	b.n	8003bbc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003bba:	bf00      	nop
    }

    if(status == HAL_OK)
 8003bbc:	7bfb      	ldrb	r3, [r7, #15]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d10d      	bne.n	8003bde <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003bc2:	4b4a      	ldr	r3, [pc, #296]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6819      	ldr	r1, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	3b01      	subs	r3, #1
 8003bd4:	011b      	lsls	r3, r3, #4
 8003bd6:	430b      	orrs	r3, r1
 8003bd8:	4944      	ldr	r1, [pc, #272]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003bde:	7bfb      	ldrb	r3, [r7, #15]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d17d      	bne.n	8003ce0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003be4:	4b41      	ldr	r3, [pc, #260]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a40      	ldr	r2, [pc, #256]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003bee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bf0:	f7fd fd4a 	bl	8001688 <HAL_GetTick>
 8003bf4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003bf6:	e009      	b.n	8003c0c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003bf8:	f7fd fd46 	bl	8001688 <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d902      	bls.n	8003c0c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	73fb      	strb	r3, [r7, #15]
        break;
 8003c0a:	e005      	b.n	8003c18 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c0c:	4b37      	ldr	r3, [pc, #220]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d1ef      	bne.n	8003bf8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003c18:	7bfb      	ldrb	r3, [r7, #15]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d160      	bne.n	8003ce0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d111      	bne.n	8003c48 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c24:	4b31      	ldr	r3, [pc, #196]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003c2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	6892      	ldr	r2, [r2, #8]
 8003c34:	0211      	lsls	r1, r2, #8
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	68d2      	ldr	r2, [r2, #12]
 8003c3a:	0912      	lsrs	r2, r2, #4
 8003c3c:	0452      	lsls	r2, r2, #17
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	492a      	ldr	r1, [pc, #168]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	610b      	str	r3, [r1, #16]
 8003c46:	e027      	b.n	8003c98 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d112      	bne.n	8003c74 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c4e:	4b27      	ldr	r3, [pc, #156]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003c56:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	6892      	ldr	r2, [r2, #8]
 8003c5e:	0211      	lsls	r1, r2, #8
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	6912      	ldr	r2, [r2, #16]
 8003c64:	0852      	lsrs	r2, r2, #1
 8003c66:	3a01      	subs	r2, #1
 8003c68:	0552      	lsls	r2, r2, #21
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	491f      	ldr	r1, [pc, #124]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	610b      	str	r3, [r1, #16]
 8003c72:	e011      	b.n	8003c98 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c74:	4b1d      	ldr	r3, [pc, #116]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003c7c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	6892      	ldr	r2, [r2, #8]
 8003c84:	0211      	lsls	r1, r2, #8
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	6952      	ldr	r2, [r2, #20]
 8003c8a:	0852      	lsrs	r2, r2, #1
 8003c8c:	3a01      	subs	r2, #1
 8003c8e:	0652      	lsls	r2, r2, #25
 8003c90:	430a      	orrs	r2, r1
 8003c92:	4916      	ldr	r1, [pc, #88]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003c98:	4b14      	ldr	r3, [pc, #80]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a13      	ldr	r2, [pc, #76]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c9e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ca2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ca4:	f7fd fcf0 	bl	8001688 <HAL_GetTick>
 8003ca8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003caa:	e009      	b.n	8003cc0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003cac:	f7fd fcec 	bl	8001688 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d902      	bls.n	8003cc0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	73fb      	strb	r3, [r7, #15]
          break;
 8003cbe:	e005      	b.n	8003ccc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003cc0:	4b0a      	ldr	r3, [pc, #40]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d0ef      	beq.n	8003cac <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003ccc:	7bfb      	ldrb	r3, [r7, #15]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d106      	bne.n	8003ce0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003cd2:	4b06      	ldr	r3, [pc, #24]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cd4:	691a      	ldr	r2, [r3, #16]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	4904      	ldr	r1, [pc, #16]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3710      	adds	r7, #16
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	40021000 	.word	0x40021000

08003cf0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003cfe:	4b6a      	ldr	r3, [pc, #424]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	f003 0303 	and.w	r3, r3, #3
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d018      	beq.n	8003d3c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003d0a:	4b67      	ldr	r3, [pc, #412]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	f003 0203 	and.w	r2, r3, #3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d10d      	bne.n	8003d36 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
       ||
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d009      	beq.n	8003d36 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003d22:	4b61      	ldr	r3, [pc, #388]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	091b      	lsrs	r3, r3, #4
 8003d28:	f003 0307 	and.w	r3, r3, #7
 8003d2c:	1c5a      	adds	r2, r3, #1
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
       ||
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d047      	beq.n	8003dc6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	73fb      	strb	r3, [r7, #15]
 8003d3a:	e044      	b.n	8003dc6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2b03      	cmp	r3, #3
 8003d42:	d018      	beq.n	8003d76 <RCCEx_PLLSAI2_Config+0x86>
 8003d44:	2b03      	cmp	r3, #3
 8003d46:	d825      	bhi.n	8003d94 <RCCEx_PLLSAI2_Config+0xa4>
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d002      	beq.n	8003d52 <RCCEx_PLLSAI2_Config+0x62>
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d009      	beq.n	8003d64 <RCCEx_PLLSAI2_Config+0x74>
 8003d50:	e020      	b.n	8003d94 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d52:	4b55      	ldr	r3, [pc, #340]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d11d      	bne.n	8003d9a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d62:	e01a      	b.n	8003d9a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d64:	4b50      	ldr	r3, [pc, #320]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d116      	bne.n	8003d9e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d74:	e013      	b.n	8003d9e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d76:	4b4c      	ldr	r3, [pc, #304]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d10f      	bne.n	8003da2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d82:	4b49      	ldr	r3, [pc, #292]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d109      	bne.n	8003da2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d92:	e006      	b.n	8003da2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	73fb      	strb	r3, [r7, #15]
      break;
 8003d98:	e004      	b.n	8003da4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003d9a:	bf00      	nop
 8003d9c:	e002      	b.n	8003da4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003d9e:	bf00      	nop
 8003da0:	e000      	b.n	8003da4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003da2:	bf00      	nop
    }

    if(status == HAL_OK)
 8003da4:	7bfb      	ldrb	r3, [r7, #15]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d10d      	bne.n	8003dc6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003daa:	4b3f      	ldr	r3, [pc, #252]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6819      	ldr	r1, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	011b      	lsls	r3, r3, #4
 8003dbe:	430b      	orrs	r3, r1
 8003dc0:	4939      	ldr	r1, [pc, #228]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003dc6:	7bfb      	ldrb	r3, [r7, #15]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d167      	bne.n	8003e9c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003dcc:	4b36      	ldr	r3, [pc, #216]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a35      	ldr	r2, [pc, #212]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dd6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dd8:	f7fd fc56 	bl	8001688 <HAL_GetTick>
 8003ddc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003dde:	e009      	b.n	8003df4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003de0:	f7fd fc52 	bl	8001688 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d902      	bls.n	8003df4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	73fb      	strb	r3, [r7, #15]
        break;
 8003df2:	e005      	b.n	8003e00 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003df4:	4b2c      	ldr	r3, [pc, #176]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d1ef      	bne.n	8003de0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003e00:	7bfb      	ldrb	r3, [r7, #15]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d14a      	bne.n	8003e9c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d111      	bne.n	8003e30 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e0c:	4b26      	ldr	r3, [pc, #152]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e0e:	695b      	ldr	r3, [r3, #20]
 8003e10:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003e14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	6892      	ldr	r2, [r2, #8]
 8003e1c:	0211      	lsls	r1, r2, #8
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	68d2      	ldr	r2, [r2, #12]
 8003e22:	0912      	lsrs	r2, r2, #4
 8003e24:	0452      	lsls	r2, r2, #17
 8003e26:	430a      	orrs	r2, r1
 8003e28:	491f      	ldr	r1, [pc, #124]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	614b      	str	r3, [r1, #20]
 8003e2e:	e011      	b.n	8003e54 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e30:	4b1d      	ldr	r3, [pc, #116]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e32:	695b      	ldr	r3, [r3, #20]
 8003e34:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003e38:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	6892      	ldr	r2, [r2, #8]
 8003e40:	0211      	lsls	r1, r2, #8
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	6912      	ldr	r2, [r2, #16]
 8003e46:	0852      	lsrs	r2, r2, #1
 8003e48:	3a01      	subs	r2, #1
 8003e4a:	0652      	lsls	r2, r2, #25
 8003e4c:	430a      	orrs	r2, r1
 8003e4e:	4916      	ldr	r1, [pc, #88]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003e54:	4b14      	ldr	r3, [pc, #80]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a13      	ldr	r2, [pc, #76]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e5e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e60:	f7fd fc12 	bl	8001688 <HAL_GetTick>
 8003e64:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003e66:	e009      	b.n	8003e7c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003e68:	f7fd fc0e 	bl	8001688 <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d902      	bls.n	8003e7c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	73fb      	strb	r3, [r7, #15]
          break;
 8003e7a:	e005      	b.n	8003e88 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003e7c:	4b0a      	ldr	r3, [pc, #40]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d0ef      	beq.n	8003e68 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003e88:	7bfb      	ldrb	r3, [r7, #15]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d106      	bne.n	8003e9c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003e8e:	4b06      	ldr	r3, [pc, #24]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e90:	695a      	ldr	r2, [r3, #20]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	695b      	ldr	r3, [r3, #20]
 8003e96:	4904      	ldr	r1, [pc, #16]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3710      	adds	r7, #16
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	40021000 	.word	0x40021000

08003eac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b082      	sub	sp, #8
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d101      	bne.n	8003ebe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e040      	b.n	8003f40 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d106      	bne.n	8003ed4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f7fd fa72 	bl	80013b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2224      	movs	r2, #36	; 0x24
 8003ed8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f022 0201 	bic.w	r2, r2, #1
 8003ee8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d002      	beq.n	8003ef8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 fb6a 	bl	80045cc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f000 f8af 	bl	800405c <UART_SetConfig>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d101      	bne.n	8003f08 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e01b      	b.n	8003f40 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	685a      	ldr	r2, [r3, #4]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f16:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	689a      	ldr	r2, [r3, #8]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f26:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f042 0201 	orr.w	r2, r2, #1
 8003f36:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f000 fbe9 	bl	8004710 <UART_CheckIdleState>
 8003f3e:	4603      	mov	r3, r0
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3708      	adds	r7, #8
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b08a      	sub	sp, #40	; 0x28
 8003f4c:	af02      	add	r7, sp, #8
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	603b      	str	r3, [r7, #0]
 8003f54:	4613      	mov	r3, r2
 8003f56:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f5c:	2b20      	cmp	r3, #32
 8003f5e:	d178      	bne.n	8004052 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d002      	beq.n	8003f6c <HAL_UART_Transmit+0x24>
 8003f66:	88fb      	ldrh	r3, [r7, #6]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d101      	bne.n	8003f70 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e071      	b.n	8004054 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2221      	movs	r2, #33	; 0x21
 8003f7c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f7e:	f7fd fb83 	bl	8001688 <HAL_GetTick>
 8003f82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	88fa      	ldrh	r2, [r7, #6]
 8003f88:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	88fa      	ldrh	r2, [r7, #6]
 8003f90:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f9c:	d108      	bne.n	8003fb0 <HAL_UART_Transmit+0x68>
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d104      	bne.n	8003fb0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	61bb      	str	r3, [r7, #24]
 8003fae:	e003      	b.n	8003fb8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003fb8:	e030      	b.n	800401c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	9300      	str	r3, [sp, #0]
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	2180      	movs	r1, #128	; 0x80
 8003fc4:	68f8      	ldr	r0, [r7, #12]
 8003fc6:	f000 fc4b 	bl	8004860 <UART_WaitOnFlagUntilTimeout>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d004      	beq.n	8003fda <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2220      	movs	r2, #32
 8003fd4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e03c      	b.n	8004054 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d10b      	bne.n	8003ff8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	881a      	ldrh	r2, [r3, #0]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fec:	b292      	uxth	r2, r2
 8003fee:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	3302      	adds	r3, #2
 8003ff4:	61bb      	str	r3, [r7, #24]
 8003ff6:	e008      	b.n	800400a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	781a      	ldrb	r2, [r3, #0]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	b292      	uxth	r2, r2
 8004002:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	3301      	adds	r3, #1
 8004008:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004010:	b29b      	uxth	r3, r3
 8004012:	3b01      	subs	r3, #1
 8004014:	b29a      	uxth	r2, r3
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004022:	b29b      	uxth	r3, r3
 8004024:	2b00      	cmp	r3, #0
 8004026:	d1c8      	bne.n	8003fba <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	9300      	str	r3, [sp, #0]
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	2200      	movs	r2, #0
 8004030:	2140      	movs	r1, #64	; 0x40
 8004032:	68f8      	ldr	r0, [r7, #12]
 8004034:	f000 fc14 	bl	8004860 <UART_WaitOnFlagUntilTimeout>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d004      	beq.n	8004048 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2220      	movs	r2, #32
 8004042:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	e005      	b.n	8004054 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2220      	movs	r2, #32
 800404c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800404e:	2300      	movs	r3, #0
 8004050:	e000      	b.n	8004054 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004052:	2302      	movs	r3, #2
  }
}
 8004054:	4618      	mov	r0, r3
 8004056:	3720      	adds	r7, #32
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800405c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004060:	b08a      	sub	sp, #40	; 0x28
 8004062:	af00      	add	r7, sp, #0
 8004064:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004066:	2300      	movs	r3, #0
 8004068:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	689a      	ldr	r2, [r3, #8]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	691b      	ldr	r3, [r3, #16]
 8004074:	431a      	orrs	r2, r3
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	695b      	ldr	r3, [r3, #20]
 800407a:	431a      	orrs	r2, r3
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	69db      	ldr	r3, [r3, #28]
 8004080:	4313      	orrs	r3, r2
 8004082:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	4ba4      	ldr	r3, [pc, #656]	; (800431c <UART_SetConfig+0x2c0>)
 800408c:	4013      	ands	r3, r2
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	6812      	ldr	r2, [r2, #0]
 8004092:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004094:	430b      	orrs	r3, r1
 8004096:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	68da      	ldr	r2, [r3, #12]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	430a      	orrs	r2, r1
 80040ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	699b      	ldr	r3, [r3, #24]
 80040b2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a99      	ldr	r2, [pc, #612]	; (8004320 <UART_SetConfig+0x2c4>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d004      	beq.n	80040c8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6a1b      	ldr	r3, [r3, #32]
 80040c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040c4:	4313      	orrs	r3, r2
 80040c6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040d8:	430a      	orrs	r2, r1
 80040da:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a90      	ldr	r2, [pc, #576]	; (8004324 <UART_SetConfig+0x2c8>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d126      	bne.n	8004134 <UART_SetConfig+0xd8>
 80040e6:	4b90      	ldr	r3, [pc, #576]	; (8004328 <UART_SetConfig+0x2cc>)
 80040e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ec:	f003 0303 	and.w	r3, r3, #3
 80040f0:	2b03      	cmp	r3, #3
 80040f2:	d81b      	bhi.n	800412c <UART_SetConfig+0xd0>
 80040f4:	a201      	add	r2, pc, #4	; (adr r2, 80040fc <UART_SetConfig+0xa0>)
 80040f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040fa:	bf00      	nop
 80040fc:	0800410d 	.word	0x0800410d
 8004100:	0800411d 	.word	0x0800411d
 8004104:	08004115 	.word	0x08004115
 8004108:	08004125 	.word	0x08004125
 800410c:	2301      	movs	r3, #1
 800410e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004112:	e116      	b.n	8004342 <UART_SetConfig+0x2e6>
 8004114:	2302      	movs	r3, #2
 8004116:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800411a:	e112      	b.n	8004342 <UART_SetConfig+0x2e6>
 800411c:	2304      	movs	r3, #4
 800411e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004122:	e10e      	b.n	8004342 <UART_SetConfig+0x2e6>
 8004124:	2308      	movs	r3, #8
 8004126:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800412a:	e10a      	b.n	8004342 <UART_SetConfig+0x2e6>
 800412c:	2310      	movs	r3, #16
 800412e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004132:	e106      	b.n	8004342 <UART_SetConfig+0x2e6>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a7c      	ldr	r2, [pc, #496]	; (800432c <UART_SetConfig+0x2d0>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d138      	bne.n	80041b0 <UART_SetConfig+0x154>
 800413e:	4b7a      	ldr	r3, [pc, #488]	; (8004328 <UART_SetConfig+0x2cc>)
 8004140:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004144:	f003 030c 	and.w	r3, r3, #12
 8004148:	2b0c      	cmp	r3, #12
 800414a:	d82d      	bhi.n	80041a8 <UART_SetConfig+0x14c>
 800414c:	a201      	add	r2, pc, #4	; (adr r2, 8004154 <UART_SetConfig+0xf8>)
 800414e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004152:	bf00      	nop
 8004154:	08004189 	.word	0x08004189
 8004158:	080041a9 	.word	0x080041a9
 800415c:	080041a9 	.word	0x080041a9
 8004160:	080041a9 	.word	0x080041a9
 8004164:	08004199 	.word	0x08004199
 8004168:	080041a9 	.word	0x080041a9
 800416c:	080041a9 	.word	0x080041a9
 8004170:	080041a9 	.word	0x080041a9
 8004174:	08004191 	.word	0x08004191
 8004178:	080041a9 	.word	0x080041a9
 800417c:	080041a9 	.word	0x080041a9
 8004180:	080041a9 	.word	0x080041a9
 8004184:	080041a1 	.word	0x080041a1
 8004188:	2300      	movs	r3, #0
 800418a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800418e:	e0d8      	b.n	8004342 <UART_SetConfig+0x2e6>
 8004190:	2302      	movs	r3, #2
 8004192:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004196:	e0d4      	b.n	8004342 <UART_SetConfig+0x2e6>
 8004198:	2304      	movs	r3, #4
 800419a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800419e:	e0d0      	b.n	8004342 <UART_SetConfig+0x2e6>
 80041a0:	2308      	movs	r3, #8
 80041a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041a6:	e0cc      	b.n	8004342 <UART_SetConfig+0x2e6>
 80041a8:	2310      	movs	r3, #16
 80041aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041ae:	e0c8      	b.n	8004342 <UART_SetConfig+0x2e6>
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a5e      	ldr	r2, [pc, #376]	; (8004330 <UART_SetConfig+0x2d4>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d125      	bne.n	8004206 <UART_SetConfig+0x1aa>
 80041ba:	4b5b      	ldr	r3, [pc, #364]	; (8004328 <UART_SetConfig+0x2cc>)
 80041bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80041c4:	2b30      	cmp	r3, #48	; 0x30
 80041c6:	d016      	beq.n	80041f6 <UART_SetConfig+0x19a>
 80041c8:	2b30      	cmp	r3, #48	; 0x30
 80041ca:	d818      	bhi.n	80041fe <UART_SetConfig+0x1a2>
 80041cc:	2b20      	cmp	r3, #32
 80041ce:	d00a      	beq.n	80041e6 <UART_SetConfig+0x18a>
 80041d0:	2b20      	cmp	r3, #32
 80041d2:	d814      	bhi.n	80041fe <UART_SetConfig+0x1a2>
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d002      	beq.n	80041de <UART_SetConfig+0x182>
 80041d8:	2b10      	cmp	r3, #16
 80041da:	d008      	beq.n	80041ee <UART_SetConfig+0x192>
 80041dc:	e00f      	b.n	80041fe <UART_SetConfig+0x1a2>
 80041de:	2300      	movs	r3, #0
 80041e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041e4:	e0ad      	b.n	8004342 <UART_SetConfig+0x2e6>
 80041e6:	2302      	movs	r3, #2
 80041e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041ec:	e0a9      	b.n	8004342 <UART_SetConfig+0x2e6>
 80041ee:	2304      	movs	r3, #4
 80041f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041f4:	e0a5      	b.n	8004342 <UART_SetConfig+0x2e6>
 80041f6:	2308      	movs	r3, #8
 80041f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041fc:	e0a1      	b.n	8004342 <UART_SetConfig+0x2e6>
 80041fe:	2310      	movs	r3, #16
 8004200:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004204:	e09d      	b.n	8004342 <UART_SetConfig+0x2e6>
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a4a      	ldr	r2, [pc, #296]	; (8004334 <UART_SetConfig+0x2d8>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d125      	bne.n	800425c <UART_SetConfig+0x200>
 8004210:	4b45      	ldr	r3, [pc, #276]	; (8004328 <UART_SetConfig+0x2cc>)
 8004212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004216:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800421a:	2bc0      	cmp	r3, #192	; 0xc0
 800421c:	d016      	beq.n	800424c <UART_SetConfig+0x1f0>
 800421e:	2bc0      	cmp	r3, #192	; 0xc0
 8004220:	d818      	bhi.n	8004254 <UART_SetConfig+0x1f8>
 8004222:	2b80      	cmp	r3, #128	; 0x80
 8004224:	d00a      	beq.n	800423c <UART_SetConfig+0x1e0>
 8004226:	2b80      	cmp	r3, #128	; 0x80
 8004228:	d814      	bhi.n	8004254 <UART_SetConfig+0x1f8>
 800422a:	2b00      	cmp	r3, #0
 800422c:	d002      	beq.n	8004234 <UART_SetConfig+0x1d8>
 800422e:	2b40      	cmp	r3, #64	; 0x40
 8004230:	d008      	beq.n	8004244 <UART_SetConfig+0x1e8>
 8004232:	e00f      	b.n	8004254 <UART_SetConfig+0x1f8>
 8004234:	2300      	movs	r3, #0
 8004236:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800423a:	e082      	b.n	8004342 <UART_SetConfig+0x2e6>
 800423c:	2302      	movs	r3, #2
 800423e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004242:	e07e      	b.n	8004342 <UART_SetConfig+0x2e6>
 8004244:	2304      	movs	r3, #4
 8004246:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800424a:	e07a      	b.n	8004342 <UART_SetConfig+0x2e6>
 800424c:	2308      	movs	r3, #8
 800424e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004252:	e076      	b.n	8004342 <UART_SetConfig+0x2e6>
 8004254:	2310      	movs	r3, #16
 8004256:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800425a:	e072      	b.n	8004342 <UART_SetConfig+0x2e6>
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a35      	ldr	r2, [pc, #212]	; (8004338 <UART_SetConfig+0x2dc>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d12a      	bne.n	80042bc <UART_SetConfig+0x260>
 8004266:	4b30      	ldr	r3, [pc, #192]	; (8004328 <UART_SetConfig+0x2cc>)
 8004268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800426c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004270:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004274:	d01a      	beq.n	80042ac <UART_SetConfig+0x250>
 8004276:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800427a:	d81b      	bhi.n	80042b4 <UART_SetConfig+0x258>
 800427c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004280:	d00c      	beq.n	800429c <UART_SetConfig+0x240>
 8004282:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004286:	d815      	bhi.n	80042b4 <UART_SetConfig+0x258>
 8004288:	2b00      	cmp	r3, #0
 800428a:	d003      	beq.n	8004294 <UART_SetConfig+0x238>
 800428c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004290:	d008      	beq.n	80042a4 <UART_SetConfig+0x248>
 8004292:	e00f      	b.n	80042b4 <UART_SetConfig+0x258>
 8004294:	2300      	movs	r3, #0
 8004296:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800429a:	e052      	b.n	8004342 <UART_SetConfig+0x2e6>
 800429c:	2302      	movs	r3, #2
 800429e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042a2:	e04e      	b.n	8004342 <UART_SetConfig+0x2e6>
 80042a4:	2304      	movs	r3, #4
 80042a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042aa:	e04a      	b.n	8004342 <UART_SetConfig+0x2e6>
 80042ac:	2308      	movs	r3, #8
 80042ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042b2:	e046      	b.n	8004342 <UART_SetConfig+0x2e6>
 80042b4:	2310      	movs	r3, #16
 80042b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042ba:	e042      	b.n	8004342 <UART_SetConfig+0x2e6>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a17      	ldr	r2, [pc, #92]	; (8004320 <UART_SetConfig+0x2c4>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d13a      	bne.n	800433c <UART_SetConfig+0x2e0>
 80042c6:	4b18      	ldr	r3, [pc, #96]	; (8004328 <UART_SetConfig+0x2cc>)
 80042c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80042d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042d4:	d01a      	beq.n	800430c <UART_SetConfig+0x2b0>
 80042d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042da:	d81b      	bhi.n	8004314 <UART_SetConfig+0x2b8>
 80042dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042e0:	d00c      	beq.n	80042fc <UART_SetConfig+0x2a0>
 80042e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042e6:	d815      	bhi.n	8004314 <UART_SetConfig+0x2b8>
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d003      	beq.n	80042f4 <UART_SetConfig+0x298>
 80042ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042f0:	d008      	beq.n	8004304 <UART_SetConfig+0x2a8>
 80042f2:	e00f      	b.n	8004314 <UART_SetConfig+0x2b8>
 80042f4:	2300      	movs	r3, #0
 80042f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042fa:	e022      	b.n	8004342 <UART_SetConfig+0x2e6>
 80042fc:	2302      	movs	r3, #2
 80042fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004302:	e01e      	b.n	8004342 <UART_SetConfig+0x2e6>
 8004304:	2304      	movs	r3, #4
 8004306:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800430a:	e01a      	b.n	8004342 <UART_SetConfig+0x2e6>
 800430c:	2308      	movs	r3, #8
 800430e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004312:	e016      	b.n	8004342 <UART_SetConfig+0x2e6>
 8004314:	2310      	movs	r3, #16
 8004316:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800431a:	e012      	b.n	8004342 <UART_SetConfig+0x2e6>
 800431c:	efff69f3 	.word	0xefff69f3
 8004320:	40008000 	.word	0x40008000
 8004324:	40013800 	.word	0x40013800
 8004328:	40021000 	.word	0x40021000
 800432c:	40004400 	.word	0x40004400
 8004330:	40004800 	.word	0x40004800
 8004334:	40004c00 	.word	0x40004c00
 8004338:	40005000 	.word	0x40005000
 800433c:	2310      	movs	r3, #16
 800433e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a9f      	ldr	r2, [pc, #636]	; (80045c4 <UART_SetConfig+0x568>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d17a      	bne.n	8004442 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800434c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004350:	2b08      	cmp	r3, #8
 8004352:	d824      	bhi.n	800439e <UART_SetConfig+0x342>
 8004354:	a201      	add	r2, pc, #4	; (adr r2, 800435c <UART_SetConfig+0x300>)
 8004356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800435a:	bf00      	nop
 800435c:	08004381 	.word	0x08004381
 8004360:	0800439f 	.word	0x0800439f
 8004364:	08004389 	.word	0x08004389
 8004368:	0800439f 	.word	0x0800439f
 800436c:	0800438f 	.word	0x0800438f
 8004370:	0800439f 	.word	0x0800439f
 8004374:	0800439f 	.word	0x0800439f
 8004378:	0800439f 	.word	0x0800439f
 800437c:	08004397 	.word	0x08004397
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004380:	f7ff f84c 	bl	800341c <HAL_RCC_GetPCLK1Freq>
 8004384:	61f8      	str	r0, [r7, #28]
        break;
 8004386:	e010      	b.n	80043aa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004388:	4b8f      	ldr	r3, [pc, #572]	; (80045c8 <UART_SetConfig+0x56c>)
 800438a:	61fb      	str	r3, [r7, #28]
        break;
 800438c:	e00d      	b.n	80043aa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800438e:	f7fe ffad 	bl	80032ec <HAL_RCC_GetSysClockFreq>
 8004392:	61f8      	str	r0, [r7, #28]
        break;
 8004394:	e009      	b.n	80043aa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004396:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800439a:	61fb      	str	r3, [r7, #28]
        break;
 800439c:	e005      	b.n	80043aa <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800439e:	2300      	movs	r3, #0
 80043a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80043a8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	f000 80fb 	beq.w	80045a8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	685a      	ldr	r2, [r3, #4]
 80043b6:	4613      	mov	r3, r2
 80043b8:	005b      	lsls	r3, r3, #1
 80043ba:	4413      	add	r3, r2
 80043bc:	69fa      	ldr	r2, [r7, #28]
 80043be:	429a      	cmp	r2, r3
 80043c0:	d305      	bcc.n	80043ce <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80043c8:	69fa      	ldr	r2, [r7, #28]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d903      	bls.n	80043d6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80043d4:	e0e8      	b.n	80045a8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	2200      	movs	r2, #0
 80043da:	461c      	mov	r4, r3
 80043dc:	4615      	mov	r5, r2
 80043de:	f04f 0200 	mov.w	r2, #0
 80043e2:	f04f 0300 	mov.w	r3, #0
 80043e6:	022b      	lsls	r3, r5, #8
 80043e8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80043ec:	0222      	lsls	r2, r4, #8
 80043ee:	68f9      	ldr	r1, [r7, #12]
 80043f0:	6849      	ldr	r1, [r1, #4]
 80043f2:	0849      	lsrs	r1, r1, #1
 80043f4:	2000      	movs	r0, #0
 80043f6:	4688      	mov	r8, r1
 80043f8:	4681      	mov	r9, r0
 80043fa:	eb12 0a08 	adds.w	sl, r2, r8
 80043fe:	eb43 0b09 	adc.w	fp, r3, r9
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	603b      	str	r3, [r7, #0]
 800440a:	607a      	str	r2, [r7, #4]
 800440c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004410:	4650      	mov	r0, sl
 8004412:	4659      	mov	r1, fp
 8004414:	f7fb ff7c 	bl	8000310 <__aeabi_uldivmod>
 8004418:	4602      	mov	r2, r0
 800441a:	460b      	mov	r3, r1
 800441c:	4613      	mov	r3, r2
 800441e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004420:	69bb      	ldr	r3, [r7, #24]
 8004422:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004426:	d308      	bcc.n	800443a <UART_SetConfig+0x3de>
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800442e:	d204      	bcs.n	800443a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	69ba      	ldr	r2, [r7, #24]
 8004436:	60da      	str	r2, [r3, #12]
 8004438:	e0b6      	b.n	80045a8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004440:	e0b2      	b.n	80045a8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	69db      	ldr	r3, [r3, #28]
 8004446:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800444a:	d15e      	bne.n	800450a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800444c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004450:	2b08      	cmp	r3, #8
 8004452:	d828      	bhi.n	80044a6 <UART_SetConfig+0x44a>
 8004454:	a201      	add	r2, pc, #4	; (adr r2, 800445c <UART_SetConfig+0x400>)
 8004456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800445a:	bf00      	nop
 800445c:	08004481 	.word	0x08004481
 8004460:	08004489 	.word	0x08004489
 8004464:	08004491 	.word	0x08004491
 8004468:	080044a7 	.word	0x080044a7
 800446c:	08004497 	.word	0x08004497
 8004470:	080044a7 	.word	0x080044a7
 8004474:	080044a7 	.word	0x080044a7
 8004478:	080044a7 	.word	0x080044a7
 800447c:	0800449f 	.word	0x0800449f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004480:	f7fe ffcc 	bl	800341c <HAL_RCC_GetPCLK1Freq>
 8004484:	61f8      	str	r0, [r7, #28]
        break;
 8004486:	e014      	b.n	80044b2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004488:	f7fe ffde 	bl	8003448 <HAL_RCC_GetPCLK2Freq>
 800448c:	61f8      	str	r0, [r7, #28]
        break;
 800448e:	e010      	b.n	80044b2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004490:	4b4d      	ldr	r3, [pc, #308]	; (80045c8 <UART_SetConfig+0x56c>)
 8004492:	61fb      	str	r3, [r7, #28]
        break;
 8004494:	e00d      	b.n	80044b2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004496:	f7fe ff29 	bl	80032ec <HAL_RCC_GetSysClockFreq>
 800449a:	61f8      	str	r0, [r7, #28]
        break;
 800449c:	e009      	b.n	80044b2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800449e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044a2:	61fb      	str	r3, [r7, #28]
        break;
 80044a4:	e005      	b.n	80044b2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80044a6:	2300      	movs	r3, #0
 80044a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80044b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d077      	beq.n	80045a8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	005a      	lsls	r2, r3, #1
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	085b      	lsrs	r3, r3, #1
 80044c2:	441a      	add	r2, r3
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80044cc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	2b0f      	cmp	r3, #15
 80044d2:	d916      	bls.n	8004502 <UART_SetConfig+0x4a6>
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044da:	d212      	bcs.n	8004502 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	b29b      	uxth	r3, r3
 80044e0:	f023 030f 	bic.w	r3, r3, #15
 80044e4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	085b      	lsrs	r3, r3, #1
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	f003 0307 	and.w	r3, r3, #7
 80044f0:	b29a      	uxth	r2, r3
 80044f2:	8afb      	ldrh	r3, [r7, #22]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	8afa      	ldrh	r2, [r7, #22]
 80044fe:	60da      	str	r2, [r3, #12]
 8004500:	e052      	b.n	80045a8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004508:	e04e      	b.n	80045a8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800450a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800450e:	2b08      	cmp	r3, #8
 8004510:	d827      	bhi.n	8004562 <UART_SetConfig+0x506>
 8004512:	a201      	add	r2, pc, #4	; (adr r2, 8004518 <UART_SetConfig+0x4bc>)
 8004514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004518:	0800453d 	.word	0x0800453d
 800451c:	08004545 	.word	0x08004545
 8004520:	0800454d 	.word	0x0800454d
 8004524:	08004563 	.word	0x08004563
 8004528:	08004553 	.word	0x08004553
 800452c:	08004563 	.word	0x08004563
 8004530:	08004563 	.word	0x08004563
 8004534:	08004563 	.word	0x08004563
 8004538:	0800455b 	.word	0x0800455b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800453c:	f7fe ff6e 	bl	800341c <HAL_RCC_GetPCLK1Freq>
 8004540:	61f8      	str	r0, [r7, #28]
        break;
 8004542:	e014      	b.n	800456e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004544:	f7fe ff80 	bl	8003448 <HAL_RCC_GetPCLK2Freq>
 8004548:	61f8      	str	r0, [r7, #28]
        break;
 800454a:	e010      	b.n	800456e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800454c:	4b1e      	ldr	r3, [pc, #120]	; (80045c8 <UART_SetConfig+0x56c>)
 800454e:	61fb      	str	r3, [r7, #28]
        break;
 8004550:	e00d      	b.n	800456e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004552:	f7fe fecb 	bl	80032ec <HAL_RCC_GetSysClockFreq>
 8004556:	61f8      	str	r0, [r7, #28]
        break;
 8004558:	e009      	b.n	800456e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800455a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800455e:	61fb      	str	r3, [r7, #28]
        break;
 8004560:	e005      	b.n	800456e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004562:	2300      	movs	r3, #0
 8004564:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800456c:	bf00      	nop
    }

    if (pclk != 0U)
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d019      	beq.n	80045a8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	085a      	lsrs	r2, r3, #1
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	441a      	add	r2, r3
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	fbb2 f3f3 	udiv	r3, r2, r3
 8004586:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	2b0f      	cmp	r3, #15
 800458c:	d909      	bls.n	80045a2 <UART_SetConfig+0x546>
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004594:	d205      	bcs.n	80045a2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004596:	69bb      	ldr	r3, [r7, #24]
 8004598:	b29a      	uxth	r2, r3
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	60da      	str	r2, [r3, #12]
 80045a0:	e002      	b.n	80045a8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2200      	movs	r2, #0
 80045ac:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2200      	movs	r2, #0
 80045b2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80045b4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3728      	adds	r7, #40	; 0x28
 80045bc:	46bd      	mov	sp, r7
 80045be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045c2:	bf00      	nop
 80045c4:	40008000 	.word	0x40008000
 80045c8:	00f42400 	.word	0x00f42400

080045cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d8:	f003 0308 	and.w	r3, r3, #8
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d00a      	beq.n	80045f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	430a      	orrs	r2, r1
 80045f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fa:	f003 0301 	and.w	r3, r3, #1
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00a      	beq.n	8004618 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	430a      	orrs	r2, r1
 8004616:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461c:	f003 0302 	and.w	r3, r3, #2
 8004620:	2b00      	cmp	r3, #0
 8004622:	d00a      	beq.n	800463a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	430a      	orrs	r2, r1
 8004638:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463e:	f003 0304 	and.w	r3, r3, #4
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00a      	beq.n	800465c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	430a      	orrs	r2, r1
 800465a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004660:	f003 0310 	and.w	r3, r3, #16
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00a      	beq.n	800467e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	430a      	orrs	r2, r1
 800467c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004682:	f003 0320 	and.w	r3, r3, #32
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00a      	beq.n	80046a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	430a      	orrs	r2, r1
 800469e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d01a      	beq.n	80046e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	430a      	orrs	r2, r1
 80046c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046ca:	d10a      	bne.n	80046e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	430a      	orrs	r2, r1
 80046e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00a      	beq.n	8004704 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	430a      	orrs	r2, r1
 8004702:	605a      	str	r2, [r3, #4]
  }
}
 8004704:	bf00      	nop
 8004706:	370c      	adds	r7, #12
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b098      	sub	sp, #96	; 0x60
 8004714:	af02      	add	r7, sp, #8
 8004716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004720:	f7fc ffb2 	bl	8001688 <HAL_GetTick>
 8004724:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0308 	and.w	r3, r3, #8
 8004730:	2b08      	cmp	r3, #8
 8004732:	d12e      	bne.n	8004792 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004734:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004738:	9300      	str	r3, [sp, #0]
 800473a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800473c:	2200      	movs	r2, #0
 800473e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 f88c 	bl	8004860 <UART_WaitOnFlagUntilTimeout>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d021      	beq.n	8004792 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004756:	e853 3f00 	ldrex	r3, [r3]
 800475a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800475c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800475e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004762:	653b      	str	r3, [r7, #80]	; 0x50
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	461a      	mov	r2, r3
 800476a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800476c:	647b      	str	r3, [r7, #68]	; 0x44
 800476e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004770:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004772:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004774:	e841 2300 	strex	r3, r2, [r1]
 8004778:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800477a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800477c:	2b00      	cmp	r3, #0
 800477e:	d1e6      	bne.n	800474e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2220      	movs	r2, #32
 8004784:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e062      	b.n	8004858 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0304 	and.w	r3, r3, #4
 800479c:	2b04      	cmp	r3, #4
 800479e:	d149      	bne.n	8004834 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80047a4:	9300      	str	r3, [sp, #0]
 80047a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047a8:	2200      	movs	r2, #0
 80047aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f000 f856 	bl	8004860 <UART_WaitOnFlagUntilTimeout>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d03c      	beq.n	8004834 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c2:	e853 3f00 	ldrex	r3, [r3]
 80047c6:	623b      	str	r3, [r7, #32]
   return(result);
 80047c8:	6a3b      	ldr	r3, [r7, #32]
 80047ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80047ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	461a      	mov	r2, r3
 80047d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047d8:	633b      	str	r3, [r7, #48]	; 0x30
 80047da:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047e0:	e841 2300 	strex	r3, r2, [r1]
 80047e4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80047e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d1e6      	bne.n	80047ba <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	3308      	adds	r3, #8
 80047f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	e853 3f00 	ldrex	r3, [r3]
 80047fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f023 0301 	bic.w	r3, r3, #1
 8004802:	64bb      	str	r3, [r7, #72]	; 0x48
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	3308      	adds	r3, #8
 800480a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800480c:	61fa      	str	r2, [r7, #28]
 800480e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004810:	69b9      	ldr	r1, [r7, #24]
 8004812:	69fa      	ldr	r2, [r7, #28]
 8004814:	e841 2300 	strex	r3, r2, [r1]
 8004818:	617b      	str	r3, [r7, #20]
   return(result);
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d1e5      	bne.n	80047ec <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2220      	movs	r2, #32
 8004824:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004830:	2303      	movs	r3, #3
 8004832:	e011      	b.n	8004858 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2220      	movs	r2, #32
 8004838:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2220      	movs	r2, #32
 800483e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004856:	2300      	movs	r3, #0
}
 8004858:	4618      	mov	r0, r3
 800485a:	3758      	adds	r7, #88	; 0x58
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	603b      	str	r3, [r7, #0]
 800486c:	4613      	mov	r3, r2
 800486e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004870:	e049      	b.n	8004906 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004878:	d045      	beq.n	8004906 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800487a:	f7fc ff05 	bl	8001688 <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	69ba      	ldr	r2, [r7, #24]
 8004886:	429a      	cmp	r2, r3
 8004888:	d302      	bcc.n	8004890 <UART_WaitOnFlagUntilTimeout+0x30>
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d101      	bne.n	8004894 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	e048      	b.n	8004926 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0304 	and.w	r3, r3, #4
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d031      	beq.n	8004906 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	69db      	ldr	r3, [r3, #28]
 80048a8:	f003 0308 	and.w	r3, r3, #8
 80048ac:	2b08      	cmp	r3, #8
 80048ae:	d110      	bne.n	80048d2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2208      	movs	r2, #8
 80048b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80048b8:	68f8      	ldr	r0, [r7, #12]
 80048ba:	f000 f838 	bl	800492e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2208      	movs	r2, #8
 80048c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e029      	b.n	8004926 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	69db      	ldr	r3, [r3, #28]
 80048d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048e0:	d111      	bne.n	8004906 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80048ec:	68f8      	ldr	r0, [r7, #12]
 80048ee:	f000 f81e 	bl	800492e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2220      	movs	r2, #32
 80048f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e00f      	b.n	8004926 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	69da      	ldr	r2, [r3, #28]
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	4013      	ands	r3, r2
 8004910:	68ba      	ldr	r2, [r7, #8]
 8004912:	429a      	cmp	r2, r3
 8004914:	bf0c      	ite	eq
 8004916:	2301      	moveq	r3, #1
 8004918:	2300      	movne	r3, #0
 800491a:	b2db      	uxtb	r3, r3
 800491c:	461a      	mov	r2, r3
 800491e:	79fb      	ldrb	r3, [r7, #7]
 8004920:	429a      	cmp	r2, r3
 8004922:	d0a6      	beq.n	8004872 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004924:	2300      	movs	r3, #0
}
 8004926:	4618      	mov	r0, r3
 8004928:	3710      	adds	r7, #16
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}

0800492e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800492e:	b480      	push	{r7}
 8004930:	b095      	sub	sp, #84	; 0x54
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800493c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800493e:	e853 3f00 	ldrex	r3, [r3]
 8004942:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004946:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800494a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	461a      	mov	r2, r3
 8004952:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004954:	643b      	str	r3, [r7, #64]	; 0x40
 8004956:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004958:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800495a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800495c:	e841 2300 	strex	r3, r2, [r1]
 8004960:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004964:	2b00      	cmp	r3, #0
 8004966:	d1e6      	bne.n	8004936 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	3308      	adds	r3, #8
 800496e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004970:	6a3b      	ldr	r3, [r7, #32]
 8004972:	e853 3f00 	ldrex	r3, [r3]
 8004976:	61fb      	str	r3, [r7, #28]
   return(result);
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	f023 0301 	bic.w	r3, r3, #1
 800497e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	3308      	adds	r3, #8
 8004986:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004988:	62fa      	str	r2, [r7, #44]	; 0x2c
 800498a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800498c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800498e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004990:	e841 2300 	strex	r3, r2, [r1]
 8004994:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004998:	2b00      	cmp	r3, #0
 800499a:	d1e5      	bne.n	8004968 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d118      	bne.n	80049d6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	e853 3f00 	ldrex	r3, [r3]
 80049b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	f023 0310 	bic.w	r3, r3, #16
 80049b8:	647b      	str	r3, [r7, #68]	; 0x44
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	461a      	mov	r2, r3
 80049c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049c2:	61bb      	str	r3, [r7, #24]
 80049c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c6:	6979      	ldr	r1, [r7, #20]
 80049c8:	69ba      	ldr	r2, [r7, #24]
 80049ca:	e841 2300 	strex	r3, r2, [r1]
 80049ce:	613b      	str	r3, [r7, #16]
   return(result);
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d1e6      	bne.n	80049a4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2220      	movs	r2, #32
 80049da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80049ea:	bf00      	nop
 80049ec:	3754      	adds	r7, #84	; 0x54
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
	...

080049f8 <siprintf>:
 80049f8:	b40e      	push	{r1, r2, r3}
 80049fa:	b500      	push	{lr}
 80049fc:	b09c      	sub	sp, #112	; 0x70
 80049fe:	ab1d      	add	r3, sp, #116	; 0x74
 8004a00:	9002      	str	r0, [sp, #8]
 8004a02:	9006      	str	r0, [sp, #24]
 8004a04:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004a08:	4809      	ldr	r0, [pc, #36]	; (8004a30 <siprintf+0x38>)
 8004a0a:	9107      	str	r1, [sp, #28]
 8004a0c:	9104      	str	r1, [sp, #16]
 8004a0e:	4909      	ldr	r1, [pc, #36]	; (8004a34 <siprintf+0x3c>)
 8004a10:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a14:	9105      	str	r1, [sp, #20]
 8004a16:	6800      	ldr	r0, [r0, #0]
 8004a18:	9301      	str	r3, [sp, #4]
 8004a1a:	a902      	add	r1, sp, #8
 8004a1c:	f000 f89a 	bl	8004b54 <_svfiprintf_r>
 8004a20:	9b02      	ldr	r3, [sp, #8]
 8004a22:	2200      	movs	r2, #0
 8004a24:	701a      	strb	r2, [r3, #0]
 8004a26:	b01c      	add	sp, #112	; 0x70
 8004a28:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a2c:	b003      	add	sp, #12
 8004a2e:	4770      	bx	lr
 8004a30:	20000058 	.word	0x20000058
 8004a34:	ffff0208 	.word	0xffff0208

08004a38 <memset>:
 8004a38:	4402      	add	r2, r0
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d100      	bne.n	8004a42 <memset+0xa>
 8004a40:	4770      	bx	lr
 8004a42:	f803 1b01 	strb.w	r1, [r3], #1
 8004a46:	e7f9      	b.n	8004a3c <memset+0x4>

08004a48 <__errno>:
 8004a48:	4b01      	ldr	r3, [pc, #4]	; (8004a50 <__errno+0x8>)
 8004a4a:	6818      	ldr	r0, [r3, #0]
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	20000058 	.word	0x20000058

08004a54 <__libc_init_array>:
 8004a54:	b570      	push	{r4, r5, r6, lr}
 8004a56:	4d0d      	ldr	r5, [pc, #52]	; (8004a8c <__libc_init_array+0x38>)
 8004a58:	4c0d      	ldr	r4, [pc, #52]	; (8004a90 <__libc_init_array+0x3c>)
 8004a5a:	1b64      	subs	r4, r4, r5
 8004a5c:	10a4      	asrs	r4, r4, #2
 8004a5e:	2600      	movs	r6, #0
 8004a60:	42a6      	cmp	r6, r4
 8004a62:	d109      	bne.n	8004a78 <__libc_init_array+0x24>
 8004a64:	4d0b      	ldr	r5, [pc, #44]	; (8004a94 <__libc_init_array+0x40>)
 8004a66:	4c0c      	ldr	r4, [pc, #48]	; (8004a98 <__libc_init_array+0x44>)
 8004a68:	f000 fc6a 	bl	8005340 <_init>
 8004a6c:	1b64      	subs	r4, r4, r5
 8004a6e:	10a4      	asrs	r4, r4, #2
 8004a70:	2600      	movs	r6, #0
 8004a72:	42a6      	cmp	r6, r4
 8004a74:	d105      	bne.n	8004a82 <__libc_init_array+0x2e>
 8004a76:	bd70      	pop	{r4, r5, r6, pc}
 8004a78:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a7c:	4798      	blx	r3
 8004a7e:	3601      	adds	r6, #1
 8004a80:	e7ee      	b.n	8004a60 <__libc_init_array+0xc>
 8004a82:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a86:	4798      	blx	r3
 8004a88:	3601      	adds	r6, #1
 8004a8a:	e7f2      	b.n	8004a72 <__libc_init_array+0x1e>
 8004a8c:	080053e8 	.word	0x080053e8
 8004a90:	080053e8 	.word	0x080053e8
 8004a94:	080053e8 	.word	0x080053e8
 8004a98:	080053ec 	.word	0x080053ec

08004a9c <__retarget_lock_acquire_recursive>:
 8004a9c:	4770      	bx	lr

08004a9e <__retarget_lock_release_recursive>:
 8004a9e:	4770      	bx	lr

08004aa0 <__ssputs_r>:
 8004aa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004aa4:	688e      	ldr	r6, [r1, #8]
 8004aa6:	461f      	mov	r7, r3
 8004aa8:	42be      	cmp	r6, r7
 8004aaa:	680b      	ldr	r3, [r1, #0]
 8004aac:	4682      	mov	sl, r0
 8004aae:	460c      	mov	r4, r1
 8004ab0:	4690      	mov	r8, r2
 8004ab2:	d82c      	bhi.n	8004b0e <__ssputs_r+0x6e>
 8004ab4:	898a      	ldrh	r2, [r1, #12]
 8004ab6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004aba:	d026      	beq.n	8004b0a <__ssputs_r+0x6a>
 8004abc:	6965      	ldr	r5, [r4, #20]
 8004abe:	6909      	ldr	r1, [r1, #16]
 8004ac0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ac4:	eba3 0901 	sub.w	r9, r3, r1
 8004ac8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004acc:	1c7b      	adds	r3, r7, #1
 8004ace:	444b      	add	r3, r9
 8004ad0:	106d      	asrs	r5, r5, #1
 8004ad2:	429d      	cmp	r5, r3
 8004ad4:	bf38      	it	cc
 8004ad6:	461d      	movcc	r5, r3
 8004ad8:	0553      	lsls	r3, r2, #21
 8004ada:	d527      	bpl.n	8004b2c <__ssputs_r+0x8c>
 8004adc:	4629      	mov	r1, r5
 8004ade:	f000 f957 	bl	8004d90 <_malloc_r>
 8004ae2:	4606      	mov	r6, r0
 8004ae4:	b360      	cbz	r0, 8004b40 <__ssputs_r+0xa0>
 8004ae6:	6921      	ldr	r1, [r4, #16]
 8004ae8:	464a      	mov	r2, r9
 8004aea:	f000 fbc7 	bl	800527c <memcpy>
 8004aee:	89a3      	ldrh	r3, [r4, #12]
 8004af0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004af8:	81a3      	strh	r3, [r4, #12]
 8004afa:	6126      	str	r6, [r4, #16]
 8004afc:	6165      	str	r5, [r4, #20]
 8004afe:	444e      	add	r6, r9
 8004b00:	eba5 0509 	sub.w	r5, r5, r9
 8004b04:	6026      	str	r6, [r4, #0]
 8004b06:	60a5      	str	r5, [r4, #8]
 8004b08:	463e      	mov	r6, r7
 8004b0a:	42be      	cmp	r6, r7
 8004b0c:	d900      	bls.n	8004b10 <__ssputs_r+0x70>
 8004b0e:	463e      	mov	r6, r7
 8004b10:	6820      	ldr	r0, [r4, #0]
 8004b12:	4632      	mov	r2, r6
 8004b14:	4641      	mov	r1, r8
 8004b16:	f000 fb86 	bl	8005226 <memmove>
 8004b1a:	68a3      	ldr	r3, [r4, #8]
 8004b1c:	1b9b      	subs	r3, r3, r6
 8004b1e:	60a3      	str	r3, [r4, #8]
 8004b20:	6823      	ldr	r3, [r4, #0]
 8004b22:	4433      	add	r3, r6
 8004b24:	6023      	str	r3, [r4, #0]
 8004b26:	2000      	movs	r0, #0
 8004b28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b2c:	462a      	mov	r2, r5
 8004b2e:	f000 fb4b 	bl	80051c8 <_realloc_r>
 8004b32:	4606      	mov	r6, r0
 8004b34:	2800      	cmp	r0, #0
 8004b36:	d1e0      	bne.n	8004afa <__ssputs_r+0x5a>
 8004b38:	6921      	ldr	r1, [r4, #16]
 8004b3a:	4650      	mov	r0, sl
 8004b3c:	f000 fbac 	bl	8005298 <_free_r>
 8004b40:	230c      	movs	r3, #12
 8004b42:	f8ca 3000 	str.w	r3, [sl]
 8004b46:	89a3      	ldrh	r3, [r4, #12]
 8004b48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b4c:	81a3      	strh	r3, [r4, #12]
 8004b4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b52:	e7e9      	b.n	8004b28 <__ssputs_r+0x88>

08004b54 <_svfiprintf_r>:
 8004b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b58:	4698      	mov	r8, r3
 8004b5a:	898b      	ldrh	r3, [r1, #12]
 8004b5c:	061b      	lsls	r3, r3, #24
 8004b5e:	b09d      	sub	sp, #116	; 0x74
 8004b60:	4607      	mov	r7, r0
 8004b62:	460d      	mov	r5, r1
 8004b64:	4614      	mov	r4, r2
 8004b66:	d50e      	bpl.n	8004b86 <_svfiprintf_r+0x32>
 8004b68:	690b      	ldr	r3, [r1, #16]
 8004b6a:	b963      	cbnz	r3, 8004b86 <_svfiprintf_r+0x32>
 8004b6c:	2140      	movs	r1, #64	; 0x40
 8004b6e:	f000 f90f 	bl	8004d90 <_malloc_r>
 8004b72:	6028      	str	r0, [r5, #0]
 8004b74:	6128      	str	r0, [r5, #16]
 8004b76:	b920      	cbnz	r0, 8004b82 <_svfiprintf_r+0x2e>
 8004b78:	230c      	movs	r3, #12
 8004b7a:	603b      	str	r3, [r7, #0]
 8004b7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b80:	e0d0      	b.n	8004d24 <_svfiprintf_r+0x1d0>
 8004b82:	2340      	movs	r3, #64	; 0x40
 8004b84:	616b      	str	r3, [r5, #20]
 8004b86:	2300      	movs	r3, #0
 8004b88:	9309      	str	r3, [sp, #36]	; 0x24
 8004b8a:	2320      	movs	r3, #32
 8004b8c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b90:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b94:	2330      	movs	r3, #48	; 0x30
 8004b96:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004d3c <_svfiprintf_r+0x1e8>
 8004b9a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b9e:	f04f 0901 	mov.w	r9, #1
 8004ba2:	4623      	mov	r3, r4
 8004ba4:	469a      	mov	sl, r3
 8004ba6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004baa:	b10a      	cbz	r2, 8004bb0 <_svfiprintf_r+0x5c>
 8004bac:	2a25      	cmp	r2, #37	; 0x25
 8004bae:	d1f9      	bne.n	8004ba4 <_svfiprintf_r+0x50>
 8004bb0:	ebba 0b04 	subs.w	fp, sl, r4
 8004bb4:	d00b      	beq.n	8004bce <_svfiprintf_r+0x7a>
 8004bb6:	465b      	mov	r3, fp
 8004bb8:	4622      	mov	r2, r4
 8004bba:	4629      	mov	r1, r5
 8004bbc:	4638      	mov	r0, r7
 8004bbe:	f7ff ff6f 	bl	8004aa0 <__ssputs_r>
 8004bc2:	3001      	adds	r0, #1
 8004bc4:	f000 80a9 	beq.w	8004d1a <_svfiprintf_r+0x1c6>
 8004bc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004bca:	445a      	add	r2, fp
 8004bcc:	9209      	str	r2, [sp, #36]	; 0x24
 8004bce:	f89a 3000 	ldrb.w	r3, [sl]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	f000 80a1 	beq.w	8004d1a <_svfiprintf_r+0x1c6>
 8004bd8:	2300      	movs	r3, #0
 8004bda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004bde:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004be2:	f10a 0a01 	add.w	sl, sl, #1
 8004be6:	9304      	str	r3, [sp, #16]
 8004be8:	9307      	str	r3, [sp, #28]
 8004bea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004bee:	931a      	str	r3, [sp, #104]	; 0x68
 8004bf0:	4654      	mov	r4, sl
 8004bf2:	2205      	movs	r2, #5
 8004bf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bf8:	4850      	ldr	r0, [pc, #320]	; (8004d3c <_svfiprintf_r+0x1e8>)
 8004bfa:	f7fb fae9 	bl	80001d0 <memchr>
 8004bfe:	9a04      	ldr	r2, [sp, #16]
 8004c00:	b9d8      	cbnz	r0, 8004c3a <_svfiprintf_r+0xe6>
 8004c02:	06d0      	lsls	r0, r2, #27
 8004c04:	bf44      	itt	mi
 8004c06:	2320      	movmi	r3, #32
 8004c08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c0c:	0711      	lsls	r1, r2, #28
 8004c0e:	bf44      	itt	mi
 8004c10:	232b      	movmi	r3, #43	; 0x2b
 8004c12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c16:	f89a 3000 	ldrb.w	r3, [sl]
 8004c1a:	2b2a      	cmp	r3, #42	; 0x2a
 8004c1c:	d015      	beq.n	8004c4a <_svfiprintf_r+0xf6>
 8004c1e:	9a07      	ldr	r2, [sp, #28]
 8004c20:	4654      	mov	r4, sl
 8004c22:	2000      	movs	r0, #0
 8004c24:	f04f 0c0a 	mov.w	ip, #10
 8004c28:	4621      	mov	r1, r4
 8004c2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c2e:	3b30      	subs	r3, #48	; 0x30
 8004c30:	2b09      	cmp	r3, #9
 8004c32:	d94d      	bls.n	8004cd0 <_svfiprintf_r+0x17c>
 8004c34:	b1b0      	cbz	r0, 8004c64 <_svfiprintf_r+0x110>
 8004c36:	9207      	str	r2, [sp, #28]
 8004c38:	e014      	b.n	8004c64 <_svfiprintf_r+0x110>
 8004c3a:	eba0 0308 	sub.w	r3, r0, r8
 8004c3e:	fa09 f303 	lsl.w	r3, r9, r3
 8004c42:	4313      	orrs	r3, r2
 8004c44:	9304      	str	r3, [sp, #16]
 8004c46:	46a2      	mov	sl, r4
 8004c48:	e7d2      	b.n	8004bf0 <_svfiprintf_r+0x9c>
 8004c4a:	9b03      	ldr	r3, [sp, #12]
 8004c4c:	1d19      	adds	r1, r3, #4
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	9103      	str	r1, [sp, #12]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	bfbb      	ittet	lt
 8004c56:	425b      	neglt	r3, r3
 8004c58:	f042 0202 	orrlt.w	r2, r2, #2
 8004c5c:	9307      	strge	r3, [sp, #28]
 8004c5e:	9307      	strlt	r3, [sp, #28]
 8004c60:	bfb8      	it	lt
 8004c62:	9204      	strlt	r2, [sp, #16]
 8004c64:	7823      	ldrb	r3, [r4, #0]
 8004c66:	2b2e      	cmp	r3, #46	; 0x2e
 8004c68:	d10c      	bne.n	8004c84 <_svfiprintf_r+0x130>
 8004c6a:	7863      	ldrb	r3, [r4, #1]
 8004c6c:	2b2a      	cmp	r3, #42	; 0x2a
 8004c6e:	d134      	bne.n	8004cda <_svfiprintf_r+0x186>
 8004c70:	9b03      	ldr	r3, [sp, #12]
 8004c72:	1d1a      	adds	r2, r3, #4
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	9203      	str	r2, [sp, #12]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	bfb8      	it	lt
 8004c7c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004c80:	3402      	adds	r4, #2
 8004c82:	9305      	str	r3, [sp, #20]
 8004c84:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004d4c <_svfiprintf_r+0x1f8>
 8004c88:	7821      	ldrb	r1, [r4, #0]
 8004c8a:	2203      	movs	r2, #3
 8004c8c:	4650      	mov	r0, sl
 8004c8e:	f7fb fa9f 	bl	80001d0 <memchr>
 8004c92:	b138      	cbz	r0, 8004ca4 <_svfiprintf_r+0x150>
 8004c94:	9b04      	ldr	r3, [sp, #16]
 8004c96:	eba0 000a 	sub.w	r0, r0, sl
 8004c9a:	2240      	movs	r2, #64	; 0x40
 8004c9c:	4082      	lsls	r2, r0
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	3401      	adds	r4, #1
 8004ca2:	9304      	str	r3, [sp, #16]
 8004ca4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ca8:	4825      	ldr	r0, [pc, #148]	; (8004d40 <_svfiprintf_r+0x1ec>)
 8004caa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004cae:	2206      	movs	r2, #6
 8004cb0:	f7fb fa8e 	bl	80001d0 <memchr>
 8004cb4:	2800      	cmp	r0, #0
 8004cb6:	d038      	beq.n	8004d2a <_svfiprintf_r+0x1d6>
 8004cb8:	4b22      	ldr	r3, [pc, #136]	; (8004d44 <_svfiprintf_r+0x1f0>)
 8004cba:	bb1b      	cbnz	r3, 8004d04 <_svfiprintf_r+0x1b0>
 8004cbc:	9b03      	ldr	r3, [sp, #12]
 8004cbe:	3307      	adds	r3, #7
 8004cc0:	f023 0307 	bic.w	r3, r3, #7
 8004cc4:	3308      	adds	r3, #8
 8004cc6:	9303      	str	r3, [sp, #12]
 8004cc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cca:	4433      	add	r3, r6
 8004ccc:	9309      	str	r3, [sp, #36]	; 0x24
 8004cce:	e768      	b.n	8004ba2 <_svfiprintf_r+0x4e>
 8004cd0:	fb0c 3202 	mla	r2, ip, r2, r3
 8004cd4:	460c      	mov	r4, r1
 8004cd6:	2001      	movs	r0, #1
 8004cd8:	e7a6      	b.n	8004c28 <_svfiprintf_r+0xd4>
 8004cda:	2300      	movs	r3, #0
 8004cdc:	3401      	adds	r4, #1
 8004cde:	9305      	str	r3, [sp, #20]
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	f04f 0c0a 	mov.w	ip, #10
 8004ce6:	4620      	mov	r0, r4
 8004ce8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004cec:	3a30      	subs	r2, #48	; 0x30
 8004cee:	2a09      	cmp	r2, #9
 8004cf0:	d903      	bls.n	8004cfa <_svfiprintf_r+0x1a6>
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d0c6      	beq.n	8004c84 <_svfiprintf_r+0x130>
 8004cf6:	9105      	str	r1, [sp, #20]
 8004cf8:	e7c4      	b.n	8004c84 <_svfiprintf_r+0x130>
 8004cfa:	fb0c 2101 	mla	r1, ip, r1, r2
 8004cfe:	4604      	mov	r4, r0
 8004d00:	2301      	movs	r3, #1
 8004d02:	e7f0      	b.n	8004ce6 <_svfiprintf_r+0x192>
 8004d04:	ab03      	add	r3, sp, #12
 8004d06:	9300      	str	r3, [sp, #0]
 8004d08:	462a      	mov	r2, r5
 8004d0a:	4b0f      	ldr	r3, [pc, #60]	; (8004d48 <_svfiprintf_r+0x1f4>)
 8004d0c:	a904      	add	r1, sp, #16
 8004d0e:	4638      	mov	r0, r7
 8004d10:	f3af 8000 	nop.w
 8004d14:	1c42      	adds	r2, r0, #1
 8004d16:	4606      	mov	r6, r0
 8004d18:	d1d6      	bne.n	8004cc8 <_svfiprintf_r+0x174>
 8004d1a:	89ab      	ldrh	r3, [r5, #12]
 8004d1c:	065b      	lsls	r3, r3, #25
 8004d1e:	f53f af2d 	bmi.w	8004b7c <_svfiprintf_r+0x28>
 8004d22:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004d24:	b01d      	add	sp, #116	; 0x74
 8004d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d2a:	ab03      	add	r3, sp, #12
 8004d2c:	9300      	str	r3, [sp, #0]
 8004d2e:	462a      	mov	r2, r5
 8004d30:	4b05      	ldr	r3, [pc, #20]	; (8004d48 <_svfiprintf_r+0x1f4>)
 8004d32:	a904      	add	r1, sp, #16
 8004d34:	4638      	mov	r0, r7
 8004d36:	f000 f919 	bl	8004f6c <_printf_i>
 8004d3a:	e7eb      	b.n	8004d14 <_svfiprintf_r+0x1c0>
 8004d3c:	080053ac 	.word	0x080053ac
 8004d40:	080053b6 	.word	0x080053b6
 8004d44:	00000000 	.word	0x00000000
 8004d48:	08004aa1 	.word	0x08004aa1
 8004d4c:	080053b2 	.word	0x080053b2

08004d50 <sbrk_aligned>:
 8004d50:	b570      	push	{r4, r5, r6, lr}
 8004d52:	4e0e      	ldr	r6, [pc, #56]	; (8004d8c <sbrk_aligned+0x3c>)
 8004d54:	460c      	mov	r4, r1
 8004d56:	6831      	ldr	r1, [r6, #0]
 8004d58:	4605      	mov	r5, r0
 8004d5a:	b911      	cbnz	r1, 8004d62 <sbrk_aligned+0x12>
 8004d5c:	f000 fa7e 	bl	800525c <_sbrk_r>
 8004d60:	6030      	str	r0, [r6, #0]
 8004d62:	4621      	mov	r1, r4
 8004d64:	4628      	mov	r0, r5
 8004d66:	f000 fa79 	bl	800525c <_sbrk_r>
 8004d6a:	1c43      	adds	r3, r0, #1
 8004d6c:	d00a      	beq.n	8004d84 <sbrk_aligned+0x34>
 8004d6e:	1cc4      	adds	r4, r0, #3
 8004d70:	f024 0403 	bic.w	r4, r4, #3
 8004d74:	42a0      	cmp	r0, r4
 8004d76:	d007      	beq.n	8004d88 <sbrk_aligned+0x38>
 8004d78:	1a21      	subs	r1, r4, r0
 8004d7a:	4628      	mov	r0, r5
 8004d7c:	f000 fa6e 	bl	800525c <_sbrk_r>
 8004d80:	3001      	adds	r0, #1
 8004d82:	d101      	bne.n	8004d88 <sbrk_aligned+0x38>
 8004d84:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004d88:	4620      	mov	r0, r4
 8004d8a:	bd70      	pop	{r4, r5, r6, pc}
 8004d8c:	2000029c 	.word	0x2000029c

08004d90 <_malloc_r>:
 8004d90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d94:	1ccd      	adds	r5, r1, #3
 8004d96:	f025 0503 	bic.w	r5, r5, #3
 8004d9a:	3508      	adds	r5, #8
 8004d9c:	2d0c      	cmp	r5, #12
 8004d9e:	bf38      	it	cc
 8004da0:	250c      	movcc	r5, #12
 8004da2:	2d00      	cmp	r5, #0
 8004da4:	4607      	mov	r7, r0
 8004da6:	db01      	blt.n	8004dac <_malloc_r+0x1c>
 8004da8:	42a9      	cmp	r1, r5
 8004daa:	d905      	bls.n	8004db8 <_malloc_r+0x28>
 8004dac:	230c      	movs	r3, #12
 8004dae:	603b      	str	r3, [r7, #0]
 8004db0:	2600      	movs	r6, #0
 8004db2:	4630      	mov	r0, r6
 8004db4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004db8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004e8c <_malloc_r+0xfc>
 8004dbc:	f000 f9f8 	bl	80051b0 <__malloc_lock>
 8004dc0:	f8d8 3000 	ldr.w	r3, [r8]
 8004dc4:	461c      	mov	r4, r3
 8004dc6:	bb5c      	cbnz	r4, 8004e20 <_malloc_r+0x90>
 8004dc8:	4629      	mov	r1, r5
 8004dca:	4638      	mov	r0, r7
 8004dcc:	f7ff ffc0 	bl	8004d50 <sbrk_aligned>
 8004dd0:	1c43      	adds	r3, r0, #1
 8004dd2:	4604      	mov	r4, r0
 8004dd4:	d155      	bne.n	8004e82 <_malloc_r+0xf2>
 8004dd6:	f8d8 4000 	ldr.w	r4, [r8]
 8004dda:	4626      	mov	r6, r4
 8004ddc:	2e00      	cmp	r6, #0
 8004dde:	d145      	bne.n	8004e6c <_malloc_r+0xdc>
 8004de0:	2c00      	cmp	r4, #0
 8004de2:	d048      	beq.n	8004e76 <_malloc_r+0xe6>
 8004de4:	6823      	ldr	r3, [r4, #0]
 8004de6:	4631      	mov	r1, r6
 8004de8:	4638      	mov	r0, r7
 8004dea:	eb04 0903 	add.w	r9, r4, r3
 8004dee:	f000 fa35 	bl	800525c <_sbrk_r>
 8004df2:	4581      	cmp	r9, r0
 8004df4:	d13f      	bne.n	8004e76 <_malloc_r+0xe6>
 8004df6:	6821      	ldr	r1, [r4, #0]
 8004df8:	1a6d      	subs	r5, r5, r1
 8004dfa:	4629      	mov	r1, r5
 8004dfc:	4638      	mov	r0, r7
 8004dfe:	f7ff ffa7 	bl	8004d50 <sbrk_aligned>
 8004e02:	3001      	adds	r0, #1
 8004e04:	d037      	beq.n	8004e76 <_malloc_r+0xe6>
 8004e06:	6823      	ldr	r3, [r4, #0]
 8004e08:	442b      	add	r3, r5
 8004e0a:	6023      	str	r3, [r4, #0]
 8004e0c:	f8d8 3000 	ldr.w	r3, [r8]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d038      	beq.n	8004e86 <_malloc_r+0xf6>
 8004e14:	685a      	ldr	r2, [r3, #4]
 8004e16:	42a2      	cmp	r2, r4
 8004e18:	d12b      	bne.n	8004e72 <_malloc_r+0xe2>
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	605a      	str	r2, [r3, #4]
 8004e1e:	e00f      	b.n	8004e40 <_malloc_r+0xb0>
 8004e20:	6822      	ldr	r2, [r4, #0]
 8004e22:	1b52      	subs	r2, r2, r5
 8004e24:	d41f      	bmi.n	8004e66 <_malloc_r+0xd6>
 8004e26:	2a0b      	cmp	r2, #11
 8004e28:	d917      	bls.n	8004e5a <_malloc_r+0xca>
 8004e2a:	1961      	adds	r1, r4, r5
 8004e2c:	42a3      	cmp	r3, r4
 8004e2e:	6025      	str	r5, [r4, #0]
 8004e30:	bf18      	it	ne
 8004e32:	6059      	strne	r1, [r3, #4]
 8004e34:	6863      	ldr	r3, [r4, #4]
 8004e36:	bf08      	it	eq
 8004e38:	f8c8 1000 	streq.w	r1, [r8]
 8004e3c:	5162      	str	r2, [r4, r5]
 8004e3e:	604b      	str	r3, [r1, #4]
 8004e40:	4638      	mov	r0, r7
 8004e42:	f104 060b 	add.w	r6, r4, #11
 8004e46:	f000 f9b9 	bl	80051bc <__malloc_unlock>
 8004e4a:	f026 0607 	bic.w	r6, r6, #7
 8004e4e:	1d23      	adds	r3, r4, #4
 8004e50:	1af2      	subs	r2, r6, r3
 8004e52:	d0ae      	beq.n	8004db2 <_malloc_r+0x22>
 8004e54:	1b9b      	subs	r3, r3, r6
 8004e56:	50a3      	str	r3, [r4, r2]
 8004e58:	e7ab      	b.n	8004db2 <_malloc_r+0x22>
 8004e5a:	42a3      	cmp	r3, r4
 8004e5c:	6862      	ldr	r2, [r4, #4]
 8004e5e:	d1dd      	bne.n	8004e1c <_malloc_r+0x8c>
 8004e60:	f8c8 2000 	str.w	r2, [r8]
 8004e64:	e7ec      	b.n	8004e40 <_malloc_r+0xb0>
 8004e66:	4623      	mov	r3, r4
 8004e68:	6864      	ldr	r4, [r4, #4]
 8004e6a:	e7ac      	b.n	8004dc6 <_malloc_r+0x36>
 8004e6c:	4634      	mov	r4, r6
 8004e6e:	6876      	ldr	r6, [r6, #4]
 8004e70:	e7b4      	b.n	8004ddc <_malloc_r+0x4c>
 8004e72:	4613      	mov	r3, r2
 8004e74:	e7cc      	b.n	8004e10 <_malloc_r+0x80>
 8004e76:	230c      	movs	r3, #12
 8004e78:	603b      	str	r3, [r7, #0]
 8004e7a:	4638      	mov	r0, r7
 8004e7c:	f000 f99e 	bl	80051bc <__malloc_unlock>
 8004e80:	e797      	b.n	8004db2 <_malloc_r+0x22>
 8004e82:	6025      	str	r5, [r4, #0]
 8004e84:	e7dc      	b.n	8004e40 <_malloc_r+0xb0>
 8004e86:	605b      	str	r3, [r3, #4]
 8004e88:	deff      	udf	#255	; 0xff
 8004e8a:	bf00      	nop
 8004e8c:	20000298 	.word	0x20000298

08004e90 <_printf_common>:
 8004e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e94:	4616      	mov	r6, r2
 8004e96:	4699      	mov	r9, r3
 8004e98:	688a      	ldr	r2, [r1, #8]
 8004e9a:	690b      	ldr	r3, [r1, #16]
 8004e9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	bfb8      	it	lt
 8004ea4:	4613      	movlt	r3, r2
 8004ea6:	6033      	str	r3, [r6, #0]
 8004ea8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004eac:	4607      	mov	r7, r0
 8004eae:	460c      	mov	r4, r1
 8004eb0:	b10a      	cbz	r2, 8004eb6 <_printf_common+0x26>
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	6033      	str	r3, [r6, #0]
 8004eb6:	6823      	ldr	r3, [r4, #0]
 8004eb8:	0699      	lsls	r1, r3, #26
 8004eba:	bf42      	ittt	mi
 8004ebc:	6833      	ldrmi	r3, [r6, #0]
 8004ebe:	3302      	addmi	r3, #2
 8004ec0:	6033      	strmi	r3, [r6, #0]
 8004ec2:	6825      	ldr	r5, [r4, #0]
 8004ec4:	f015 0506 	ands.w	r5, r5, #6
 8004ec8:	d106      	bne.n	8004ed8 <_printf_common+0x48>
 8004eca:	f104 0a19 	add.w	sl, r4, #25
 8004ece:	68e3      	ldr	r3, [r4, #12]
 8004ed0:	6832      	ldr	r2, [r6, #0]
 8004ed2:	1a9b      	subs	r3, r3, r2
 8004ed4:	42ab      	cmp	r3, r5
 8004ed6:	dc26      	bgt.n	8004f26 <_printf_common+0x96>
 8004ed8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004edc:	1e13      	subs	r3, r2, #0
 8004ede:	6822      	ldr	r2, [r4, #0]
 8004ee0:	bf18      	it	ne
 8004ee2:	2301      	movne	r3, #1
 8004ee4:	0692      	lsls	r2, r2, #26
 8004ee6:	d42b      	bmi.n	8004f40 <_printf_common+0xb0>
 8004ee8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004eec:	4649      	mov	r1, r9
 8004eee:	4638      	mov	r0, r7
 8004ef0:	47c0      	blx	r8
 8004ef2:	3001      	adds	r0, #1
 8004ef4:	d01e      	beq.n	8004f34 <_printf_common+0xa4>
 8004ef6:	6823      	ldr	r3, [r4, #0]
 8004ef8:	6922      	ldr	r2, [r4, #16]
 8004efa:	f003 0306 	and.w	r3, r3, #6
 8004efe:	2b04      	cmp	r3, #4
 8004f00:	bf02      	ittt	eq
 8004f02:	68e5      	ldreq	r5, [r4, #12]
 8004f04:	6833      	ldreq	r3, [r6, #0]
 8004f06:	1aed      	subeq	r5, r5, r3
 8004f08:	68a3      	ldr	r3, [r4, #8]
 8004f0a:	bf0c      	ite	eq
 8004f0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f10:	2500      	movne	r5, #0
 8004f12:	4293      	cmp	r3, r2
 8004f14:	bfc4      	itt	gt
 8004f16:	1a9b      	subgt	r3, r3, r2
 8004f18:	18ed      	addgt	r5, r5, r3
 8004f1a:	2600      	movs	r6, #0
 8004f1c:	341a      	adds	r4, #26
 8004f1e:	42b5      	cmp	r5, r6
 8004f20:	d11a      	bne.n	8004f58 <_printf_common+0xc8>
 8004f22:	2000      	movs	r0, #0
 8004f24:	e008      	b.n	8004f38 <_printf_common+0xa8>
 8004f26:	2301      	movs	r3, #1
 8004f28:	4652      	mov	r2, sl
 8004f2a:	4649      	mov	r1, r9
 8004f2c:	4638      	mov	r0, r7
 8004f2e:	47c0      	blx	r8
 8004f30:	3001      	adds	r0, #1
 8004f32:	d103      	bne.n	8004f3c <_printf_common+0xac>
 8004f34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f3c:	3501      	adds	r5, #1
 8004f3e:	e7c6      	b.n	8004ece <_printf_common+0x3e>
 8004f40:	18e1      	adds	r1, r4, r3
 8004f42:	1c5a      	adds	r2, r3, #1
 8004f44:	2030      	movs	r0, #48	; 0x30
 8004f46:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f4a:	4422      	add	r2, r4
 8004f4c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f50:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f54:	3302      	adds	r3, #2
 8004f56:	e7c7      	b.n	8004ee8 <_printf_common+0x58>
 8004f58:	2301      	movs	r3, #1
 8004f5a:	4622      	mov	r2, r4
 8004f5c:	4649      	mov	r1, r9
 8004f5e:	4638      	mov	r0, r7
 8004f60:	47c0      	blx	r8
 8004f62:	3001      	adds	r0, #1
 8004f64:	d0e6      	beq.n	8004f34 <_printf_common+0xa4>
 8004f66:	3601      	adds	r6, #1
 8004f68:	e7d9      	b.n	8004f1e <_printf_common+0x8e>
	...

08004f6c <_printf_i>:
 8004f6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f70:	7e0f      	ldrb	r7, [r1, #24]
 8004f72:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004f74:	2f78      	cmp	r7, #120	; 0x78
 8004f76:	4691      	mov	r9, r2
 8004f78:	4680      	mov	r8, r0
 8004f7a:	460c      	mov	r4, r1
 8004f7c:	469a      	mov	sl, r3
 8004f7e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004f82:	d807      	bhi.n	8004f94 <_printf_i+0x28>
 8004f84:	2f62      	cmp	r7, #98	; 0x62
 8004f86:	d80a      	bhi.n	8004f9e <_printf_i+0x32>
 8004f88:	2f00      	cmp	r7, #0
 8004f8a:	f000 80d4 	beq.w	8005136 <_printf_i+0x1ca>
 8004f8e:	2f58      	cmp	r7, #88	; 0x58
 8004f90:	f000 80c0 	beq.w	8005114 <_printf_i+0x1a8>
 8004f94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f98:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004f9c:	e03a      	b.n	8005014 <_printf_i+0xa8>
 8004f9e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004fa2:	2b15      	cmp	r3, #21
 8004fa4:	d8f6      	bhi.n	8004f94 <_printf_i+0x28>
 8004fa6:	a101      	add	r1, pc, #4	; (adr r1, 8004fac <_printf_i+0x40>)
 8004fa8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004fac:	08005005 	.word	0x08005005
 8004fb0:	08005019 	.word	0x08005019
 8004fb4:	08004f95 	.word	0x08004f95
 8004fb8:	08004f95 	.word	0x08004f95
 8004fbc:	08004f95 	.word	0x08004f95
 8004fc0:	08004f95 	.word	0x08004f95
 8004fc4:	08005019 	.word	0x08005019
 8004fc8:	08004f95 	.word	0x08004f95
 8004fcc:	08004f95 	.word	0x08004f95
 8004fd0:	08004f95 	.word	0x08004f95
 8004fd4:	08004f95 	.word	0x08004f95
 8004fd8:	0800511d 	.word	0x0800511d
 8004fdc:	08005045 	.word	0x08005045
 8004fe0:	080050d7 	.word	0x080050d7
 8004fe4:	08004f95 	.word	0x08004f95
 8004fe8:	08004f95 	.word	0x08004f95
 8004fec:	0800513f 	.word	0x0800513f
 8004ff0:	08004f95 	.word	0x08004f95
 8004ff4:	08005045 	.word	0x08005045
 8004ff8:	08004f95 	.word	0x08004f95
 8004ffc:	08004f95 	.word	0x08004f95
 8005000:	080050df 	.word	0x080050df
 8005004:	682b      	ldr	r3, [r5, #0]
 8005006:	1d1a      	adds	r2, r3, #4
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	602a      	str	r2, [r5, #0]
 800500c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005010:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005014:	2301      	movs	r3, #1
 8005016:	e09f      	b.n	8005158 <_printf_i+0x1ec>
 8005018:	6820      	ldr	r0, [r4, #0]
 800501a:	682b      	ldr	r3, [r5, #0]
 800501c:	0607      	lsls	r7, r0, #24
 800501e:	f103 0104 	add.w	r1, r3, #4
 8005022:	6029      	str	r1, [r5, #0]
 8005024:	d501      	bpl.n	800502a <_printf_i+0xbe>
 8005026:	681e      	ldr	r6, [r3, #0]
 8005028:	e003      	b.n	8005032 <_printf_i+0xc6>
 800502a:	0646      	lsls	r6, r0, #25
 800502c:	d5fb      	bpl.n	8005026 <_printf_i+0xba>
 800502e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005032:	2e00      	cmp	r6, #0
 8005034:	da03      	bge.n	800503e <_printf_i+0xd2>
 8005036:	232d      	movs	r3, #45	; 0x2d
 8005038:	4276      	negs	r6, r6
 800503a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800503e:	485a      	ldr	r0, [pc, #360]	; (80051a8 <_printf_i+0x23c>)
 8005040:	230a      	movs	r3, #10
 8005042:	e012      	b.n	800506a <_printf_i+0xfe>
 8005044:	682b      	ldr	r3, [r5, #0]
 8005046:	6820      	ldr	r0, [r4, #0]
 8005048:	1d19      	adds	r1, r3, #4
 800504a:	6029      	str	r1, [r5, #0]
 800504c:	0605      	lsls	r5, r0, #24
 800504e:	d501      	bpl.n	8005054 <_printf_i+0xe8>
 8005050:	681e      	ldr	r6, [r3, #0]
 8005052:	e002      	b.n	800505a <_printf_i+0xee>
 8005054:	0641      	lsls	r1, r0, #25
 8005056:	d5fb      	bpl.n	8005050 <_printf_i+0xe4>
 8005058:	881e      	ldrh	r6, [r3, #0]
 800505a:	4853      	ldr	r0, [pc, #332]	; (80051a8 <_printf_i+0x23c>)
 800505c:	2f6f      	cmp	r7, #111	; 0x6f
 800505e:	bf0c      	ite	eq
 8005060:	2308      	moveq	r3, #8
 8005062:	230a      	movne	r3, #10
 8005064:	2100      	movs	r1, #0
 8005066:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800506a:	6865      	ldr	r5, [r4, #4]
 800506c:	60a5      	str	r5, [r4, #8]
 800506e:	2d00      	cmp	r5, #0
 8005070:	bfa2      	ittt	ge
 8005072:	6821      	ldrge	r1, [r4, #0]
 8005074:	f021 0104 	bicge.w	r1, r1, #4
 8005078:	6021      	strge	r1, [r4, #0]
 800507a:	b90e      	cbnz	r6, 8005080 <_printf_i+0x114>
 800507c:	2d00      	cmp	r5, #0
 800507e:	d04b      	beq.n	8005118 <_printf_i+0x1ac>
 8005080:	4615      	mov	r5, r2
 8005082:	fbb6 f1f3 	udiv	r1, r6, r3
 8005086:	fb03 6711 	mls	r7, r3, r1, r6
 800508a:	5dc7      	ldrb	r7, [r0, r7]
 800508c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005090:	4637      	mov	r7, r6
 8005092:	42bb      	cmp	r3, r7
 8005094:	460e      	mov	r6, r1
 8005096:	d9f4      	bls.n	8005082 <_printf_i+0x116>
 8005098:	2b08      	cmp	r3, #8
 800509a:	d10b      	bne.n	80050b4 <_printf_i+0x148>
 800509c:	6823      	ldr	r3, [r4, #0]
 800509e:	07de      	lsls	r6, r3, #31
 80050a0:	d508      	bpl.n	80050b4 <_printf_i+0x148>
 80050a2:	6923      	ldr	r3, [r4, #16]
 80050a4:	6861      	ldr	r1, [r4, #4]
 80050a6:	4299      	cmp	r1, r3
 80050a8:	bfde      	ittt	le
 80050aa:	2330      	movle	r3, #48	; 0x30
 80050ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 80050b0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80050b4:	1b52      	subs	r2, r2, r5
 80050b6:	6122      	str	r2, [r4, #16]
 80050b8:	f8cd a000 	str.w	sl, [sp]
 80050bc:	464b      	mov	r3, r9
 80050be:	aa03      	add	r2, sp, #12
 80050c0:	4621      	mov	r1, r4
 80050c2:	4640      	mov	r0, r8
 80050c4:	f7ff fee4 	bl	8004e90 <_printf_common>
 80050c8:	3001      	adds	r0, #1
 80050ca:	d14a      	bne.n	8005162 <_printf_i+0x1f6>
 80050cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80050d0:	b004      	add	sp, #16
 80050d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050d6:	6823      	ldr	r3, [r4, #0]
 80050d8:	f043 0320 	orr.w	r3, r3, #32
 80050dc:	6023      	str	r3, [r4, #0]
 80050de:	4833      	ldr	r0, [pc, #204]	; (80051ac <_printf_i+0x240>)
 80050e0:	2778      	movs	r7, #120	; 0x78
 80050e2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80050e6:	6823      	ldr	r3, [r4, #0]
 80050e8:	6829      	ldr	r1, [r5, #0]
 80050ea:	061f      	lsls	r7, r3, #24
 80050ec:	f851 6b04 	ldr.w	r6, [r1], #4
 80050f0:	d402      	bmi.n	80050f8 <_printf_i+0x18c>
 80050f2:	065f      	lsls	r7, r3, #25
 80050f4:	bf48      	it	mi
 80050f6:	b2b6      	uxthmi	r6, r6
 80050f8:	07df      	lsls	r7, r3, #31
 80050fa:	bf48      	it	mi
 80050fc:	f043 0320 	orrmi.w	r3, r3, #32
 8005100:	6029      	str	r1, [r5, #0]
 8005102:	bf48      	it	mi
 8005104:	6023      	strmi	r3, [r4, #0]
 8005106:	b91e      	cbnz	r6, 8005110 <_printf_i+0x1a4>
 8005108:	6823      	ldr	r3, [r4, #0]
 800510a:	f023 0320 	bic.w	r3, r3, #32
 800510e:	6023      	str	r3, [r4, #0]
 8005110:	2310      	movs	r3, #16
 8005112:	e7a7      	b.n	8005064 <_printf_i+0xf8>
 8005114:	4824      	ldr	r0, [pc, #144]	; (80051a8 <_printf_i+0x23c>)
 8005116:	e7e4      	b.n	80050e2 <_printf_i+0x176>
 8005118:	4615      	mov	r5, r2
 800511a:	e7bd      	b.n	8005098 <_printf_i+0x12c>
 800511c:	682b      	ldr	r3, [r5, #0]
 800511e:	6826      	ldr	r6, [r4, #0]
 8005120:	6961      	ldr	r1, [r4, #20]
 8005122:	1d18      	adds	r0, r3, #4
 8005124:	6028      	str	r0, [r5, #0]
 8005126:	0635      	lsls	r5, r6, #24
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	d501      	bpl.n	8005130 <_printf_i+0x1c4>
 800512c:	6019      	str	r1, [r3, #0]
 800512e:	e002      	b.n	8005136 <_printf_i+0x1ca>
 8005130:	0670      	lsls	r0, r6, #25
 8005132:	d5fb      	bpl.n	800512c <_printf_i+0x1c0>
 8005134:	8019      	strh	r1, [r3, #0]
 8005136:	2300      	movs	r3, #0
 8005138:	6123      	str	r3, [r4, #16]
 800513a:	4615      	mov	r5, r2
 800513c:	e7bc      	b.n	80050b8 <_printf_i+0x14c>
 800513e:	682b      	ldr	r3, [r5, #0]
 8005140:	1d1a      	adds	r2, r3, #4
 8005142:	602a      	str	r2, [r5, #0]
 8005144:	681d      	ldr	r5, [r3, #0]
 8005146:	6862      	ldr	r2, [r4, #4]
 8005148:	2100      	movs	r1, #0
 800514a:	4628      	mov	r0, r5
 800514c:	f7fb f840 	bl	80001d0 <memchr>
 8005150:	b108      	cbz	r0, 8005156 <_printf_i+0x1ea>
 8005152:	1b40      	subs	r0, r0, r5
 8005154:	6060      	str	r0, [r4, #4]
 8005156:	6863      	ldr	r3, [r4, #4]
 8005158:	6123      	str	r3, [r4, #16]
 800515a:	2300      	movs	r3, #0
 800515c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005160:	e7aa      	b.n	80050b8 <_printf_i+0x14c>
 8005162:	6923      	ldr	r3, [r4, #16]
 8005164:	462a      	mov	r2, r5
 8005166:	4649      	mov	r1, r9
 8005168:	4640      	mov	r0, r8
 800516a:	47d0      	blx	sl
 800516c:	3001      	adds	r0, #1
 800516e:	d0ad      	beq.n	80050cc <_printf_i+0x160>
 8005170:	6823      	ldr	r3, [r4, #0]
 8005172:	079b      	lsls	r3, r3, #30
 8005174:	d413      	bmi.n	800519e <_printf_i+0x232>
 8005176:	68e0      	ldr	r0, [r4, #12]
 8005178:	9b03      	ldr	r3, [sp, #12]
 800517a:	4298      	cmp	r0, r3
 800517c:	bfb8      	it	lt
 800517e:	4618      	movlt	r0, r3
 8005180:	e7a6      	b.n	80050d0 <_printf_i+0x164>
 8005182:	2301      	movs	r3, #1
 8005184:	4632      	mov	r2, r6
 8005186:	4649      	mov	r1, r9
 8005188:	4640      	mov	r0, r8
 800518a:	47d0      	blx	sl
 800518c:	3001      	adds	r0, #1
 800518e:	d09d      	beq.n	80050cc <_printf_i+0x160>
 8005190:	3501      	adds	r5, #1
 8005192:	68e3      	ldr	r3, [r4, #12]
 8005194:	9903      	ldr	r1, [sp, #12]
 8005196:	1a5b      	subs	r3, r3, r1
 8005198:	42ab      	cmp	r3, r5
 800519a:	dcf2      	bgt.n	8005182 <_printf_i+0x216>
 800519c:	e7eb      	b.n	8005176 <_printf_i+0x20a>
 800519e:	2500      	movs	r5, #0
 80051a0:	f104 0619 	add.w	r6, r4, #25
 80051a4:	e7f5      	b.n	8005192 <_printf_i+0x226>
 80051a6:	bf00      	nop
 80051a8:	080053bd 	.word	0x080053bd
 80051ac:	080053ce 	.word	0x080053ce

080051b0 <__malloc_lock>:
 80051b0:	4801      	ldr	r0, [pc, #4]	; (80051b8 <__malloc_lock+0x8>)
 80051b2:	f7ff bc73 	b.w	8004a9c <__retarget_lock_acquire_recursive>
 80051b6:	bf00      	nop
 80051b8:	20000294 	.word	0x20000294

080051bc <__malloc_unlock>:
 80051bc:	4801      	ldr	r0, [pc, #4]	; (80051c4 <__malloc_unlock+0x8>)
 80051be:	f7ff bc6e 	b.w	8004a9e <__retarget_lock_release_recursive>
 80051c2:	bf00      	nop
 80051c4:	20000294 	.word	0x20000294

080051c8 <_realloc_r>:
 80051c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051cc:	4680      	mov	r8, r0
 80051ce:	4614      	mov	r4, r2
 80051d0:	460e      	mov	r6, r1
 80051d2:	b921      	cbnz	r1, 80051de <_realloc_r+0x16>
 80051d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80051d8:	4611      	mov	r1, r2
 80051da:	f7ff bdd9 	b.w	8004d90 <_malloc_r>
 80051de:	b92a      	cbnz	r2, 80051ec <_realloc_r+0x24>
 80051e0:	f000 f85a 	bl	8005298 <_free_r>
 80051e4:	4625      	mov	r5, r4
 80051e6:	4628      	mov	r0, r5
 80051e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051ec:	f000 f8a0 	bl	8005330 <_malloc_usable_size_r>
 80051f0:	4284      	cmp	r4, r0
 80051f2:	4607      	mov	r7, r0
 80051f4:	d802      	bhi.n	80051fc <_realloc_r+0x34>
 80051f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80051fa:	d812      	bhi.n	8005222 <_realloc_r+0x5a>
 80051fc:	4621      	mov	r1, r4
 80051fe:	4640      	mov	r0, r8
 8005200:	f7ff fdc6 	bl	8004d90 <_malloc_r>
 8005204:	4605      	mov	r5, r0
 8005206:	2800      	cmp	r0, #0
 8005208:	d0ed      	beq.n	80051e6 <_realloc_r+0x1e>
 800520a:	42bc      	cmp	r4, r7
 800520c:	4622      	mov	r2, r4
 800520e:	4631      	mov	r1, r6
 8005210:	bf28      	it	cs
 8005212:	463a      	movcs	r2, r7
 8005214:	f000 f832 	bl	800527c <memcpy>
 8005218:	4631      	mov	r1, r6
 800521a:	4640      	mov	r0, r8
 800521c:	f000 f83c 	bl	8005298 <_free_r>
 8005220:	e7e1      	b.n	80051e6 <_realloc_r+0x1e>
 8005222:	4635      	mov	r5, r6
 8005224:	e7df      	b.n	80051e6 <_realloc_r+0x1e>

08005226 <memmove>:
 8005226:	4288      	cmp	r0, r1
 8005228:	b510      	push	{r4, lr}
 800522a:	eb01 0402 	add.w	r4, r1, r2
 800522e:	d902      	bls.n	8005236 <memmove+0x10>
 8005230:	4284      	cmp	r4, r0
 8005232:	4623      	mov	r3, r4
 8005234:	d807      	bhi.n	8005246 <memmove+0x20>
 8005236:	1e43      	subs	r3, r0, #1
 8005238:	42a1      	cmp	r1, r4
 800523a:	d008      	beq.n	800524e <memmove+0x28>
 800523c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005240:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005244:	e7f8      	b.n	8005238 <memmove+0x12>
 8005246:	4402      	add	r2, r0
 8005248:	4601      	mov	r1, r0
 800524a:	428a      	cmp	r2, r1
 800524c:	d100      	bne.n	8005250 <memmove+0x2a>
 800524e:	bd10      	pop	{r4, pc}
 8005250:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005254:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005258:	e7f7      	b.n	800524a <memmove+0x24>
	...

0800525c <_sbrk_r>:
 800525c:	b538      	push	{r3, r4, r5, lr}
 800525e:	4d06      	ldr	r5, [pc, #24]	; (8005278 <_sbrk_r+0x1c>)
 8005260:	2300      	movs	r3, #0
 8005262:	4604      	mov	r4, r0
 8005264:	4608      	mov	r0, r1
 8005266:	602b      	str	r3, [r5, #0]
 8005268:	f7fc f92c 	bl	80014c4 <_sbrk>
 800526c:	1c43      	adds	r3, r0, #1
 800526e:	d102      	bne.n	8005276 <_sbrk_r+0x1a>
 8005270:	682b      	ldr	r3, [r5, #0]
 8005272:	b103      	cbz	r3, 8005276 <_sbrk_r+0x1a>
 8005274:	6023      	str	r3, [r4, #0]
 8005276:	bd38      	pop	{r3, r4, r5, pc}
 8005278:	200002a0 	.word	0x200002a0

0800527c <memcpy>:
 800527c:	440a      	add	r2, r1
 800527e:	4291      	cmp	r1, r2
 8005280:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005284:	d100      	bne.n	8005288 <memcpy+0xc>
 8005286:	4770      	bx	lr
 8005288:	b510      	push	{r4, lr}
 800528a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800528e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005292:	4291      	cmp	r1, r2
 8005294:	d1f9      	bne.n	800528a <memcpy+0xe>
 8005296:	bd10      	pop	{r4, pc}

08005298 <_free_r>:
 8005298:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800529a:	2900      	cmp	r1, #0
 800529c:	d044      	beq.n	8005328 <_free_r+0x90>
 800529e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052a2:	9001      	str	r0, [sp, #4]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	f1a1 0404 	sub.w	r4, r1, #4
 80052aa:	bfb8      	it	lt
 80052ac:	18e4      	addlt	r4, r4, r3
 80052ae:	f7ff ff7f 	bl	80051b0 <__malloc_lock>
 80052b2:	4a1e      	ldr	r2, [pc, #120]	; (800532c <_free_r+0x94>)
 80052b4:	9801      	ldr	r0, [sp, #4]
 80052b6:	6813      	ldr	r3, [r2, #0]
 80052b8:	b933      	cbnz	r3, 80052c8 <_free_r+0x30>
 80052ba:	6063      	str	r3, [r4, #4]
 80052bc:	6014      	str	r4, [r2, #0]
 80052be:	b003      	add	sp, #12
 80052c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80052c4:	f7ff bf7a 	b.w	80051bc <__malloc_unlock>
 80052c8:	42a3      	cmp	r3, r4
 80052ca:	d908      	bls.n	80052de <_free_r+0x46>
 80052cc:	6825      	ldr	r5, [r4, #0]
 80052ce:	1961      	adds	r1, r4, r5
 80052d0:	428b      	cmp	r3, r1
 80052d2:	bf01      	itttt	eq
 80052d4:	6819      	ldreq	r1, [r3, #0]
 80052d6:	685b      	ldreq	r3, [r3, #4]
 80052d8:	1949      	addeq	r1, r1, r5
 80052da:	6021      	streq	r1, [r4, #0]
 80052dc:	e7ed      	b.n	80052ba <_free_r+0x22>
 80052de:	461a      	mov	r2, r3
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	b10b      	cbz	r3, 80052e8 <_free_r+0x50>
 80052e4:	42a3      	cmp	r3, r4
 80052e6:	d9fa      	bls.n	80052de <_free_r+0x46>
 80052e8:	6811      	ldr	r1, [r2, #0]
 80052ea:	1855      	adds	r5, r2, r1
 80052ec:	42a5      	cmp	r5, r4
 80052ee:	d10b      	bne.n	8005308 <_free_r+0x70>
 80052f0:	6824      	ldr	r4, [r4, #0]
 80052f2:	4421      	add	r1, r4
 80052f4:	1854      	adds	r4, r2, r1
 80052f6:	42a3      	cmp	r3, r4
 80052f8:	6011      	str	r1, [r2, #0]
 80052fa:	d1e0      	bne.n	80052be <_free_r+0x26>
 80052fc:	681c      	ldr	r4, [r3, #0]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	6053      	str	r3, [r2, #4]
 8005302:	440c      	add	r4, r1
 8005304:	6014      	str	r4, [r2, #0]
 8005306:	e7da      	b.n	80052be <_free_r+0x26>
 8005308:	d902      	bls.n	8005310 <_free_r+0x78>
 800530a:	230c      	movs	r3, #12
 800530c:	6003      	str	r3, [r0, #0]
 800530e:	e7d6      	b.n	80052be <_free_r+0x26>
 8005310:	6825      	ldr	r5, [r4, #0]
 8005312:	1961      	adds	r1, r4, r5
 8005314:	428b      	cmp	r3, r1
 8005316:	bf04      	itt	eq
 8005318:	6819      	ldreq	r1, [r3, #0]
 800531a:	685b      	ldreq	r3, [r3, #4]
 800531c:	6063      	str	r3, [r4, #4]
 800531e:	bf04      	itt	eq
 8005320:	1949      	addeq	r1, r1, r5
 8005322:	6021      	streq	r1, [r4, #0]
 8005324:	6054      	str	r4, [r2, #4]
 8005326:	e7ca      	b.n	80052be <_free_r+0x26>
 8005328:	b003      	add	sp, #12
 800532a:	bd30      	pop	{r4, r5, pc}
 800532c:	20000298 	.word	0x20000298

08005330 <_malloc_usable_size_r>:
 8005330:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005334:	1f18      	subs	r0, r3, #4
 8005336:	2b00      	cmp	r3, #0
 8005338:	bfbc      	itt	lt
 800533a:	580b      	ldrlt	r3, [r1, r0]
 800533c:	18c0      	addlt	r0, r0, r3
 800533e:	4770      	bx	lr

08005340 <_init>:
 8005340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005342:	bf00      	nop
 8005344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005346:	bc08      	pop	{r3}
 8005348:	469e      	mov	lr, r3
 800534a:	4770      	bx	lr

0800534c <_fini>:
 800534c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800534e:	bf00      	nop
 8005350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005352:	bc08      	pop	{r3}
 8005354:	469e      	mov	lr, r3
 8005356:	4770      	bx	lr
