
NUCLEO-L476RG_A111.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012cf8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005cd8  08012e88  08012e88  00022e88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018b60  08018b60  00030368  2**0
                  CONTENTS
  4 .ARM          00000008  08018b60  08018b60  00028b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018b68  08018b68  00030368  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018b68  08018b68  00028b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018b6c  08018b6c  00028b6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000368  20000000  08018b70  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  20000368  08018ed8  00030368  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000067c  08018ed8  0003067c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030368  2**0
                  CONTENTS, READONLY
 12 .comment      0000008f  00000000  00000000  00030398  2**0
                  CONTENTS, READONLY
 13 .debug_info   00061b2e  00000000  00000000  00030427  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000dfd2  00000000  00000000  00091f55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002110  00000000  00000000  0009ff28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000984  00000000  00000000  000a2038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000281ee  00000000  00000000  000a29bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00027cde  00000000  00000000  000cabaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f8dfc  00000000  00000000  000f2888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000087f4  00000000  00000000  001eb684  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001f3e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000198a5  00000000  00000000  001f3edb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00003a10  00000000  00000000  0020d780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000368 	.word	0x20000368
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08012e70 	.word	0x08012e70

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000036c 	.word	0x2000036c
 80001cc:	08012e70 	.word	0x08012e70

080001d0 <acc_alg_biquad_q3_12_complex_direct_form_1_reverse>:
 80001d0:	f06f 0c03 	mvn.w	ip, #3
 80001d4:	3904      	subs	r1, #4
 80001d6:	e004      	b.n	80001e2 <head_complex>

080001d8 <acc_alg_biquad_q3_12_complex_direct_form_1>:
 80001d8:	f04f 0c04 	mov.w	ip, #4
 80001dc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80001e0:	4252      	negs	r2, r2

080001e2 <head_complex>:
 80001e2:	0092      	lsls	r2, r2, #2
 80001e4:	d100      	bne.n	80001e8 <init_complex>
 80001e6:	4770      	bx	lr

080001e8 <init_complex>:
 80001e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001ec:	eac3 4603 	pkhbt	r6, r3, r3, lsl #16
 80001f0:	eac3 4723 	pkhtb	r7, r3, r3, asr #16
 80001f4:	f8b0 a000 	ldrh.w	sl, [r0]
 80001f8:	8844      	ldrh	r4, [r0, #2]
 80001fa:	8883      	ldrh	r3, [r0, #4]
 80001fc:	88c5      	ldrh	r5, [r0, #6]
 80001fe:	8900      	ldrh	r0, [r0, #8]
 8000200:	f5c5 4570 	rsb	r5, r5, #61440	; 0xf000
 8000204:	eac3 4e00 	pkhbt	lr, r3, r0, lsl #16
 8000208:	4663      	mov	r3, ip
 800020a:	eac4 4c05 	pkhbt	ip, r4, r5, lsl #16
 800020e:	b234      	sxth	r4, r6
 8000210:	b23d      	sxth	r5, r7
 8000212:	ea4f 3804 	mov.w	r8, r4, lsl #12
 8000216:	ea4f 3905 	mov.w	r9, r5, lsl #12
 800021a:	0034      	movs	r4, r6
 800021c:	003d      	movs	r5, r7

0800021e <loop_complex>:
 800021e:	5888      	ldr	r0, [r1, r2]
 8000220:	fb1a 8800 	smlabb	r8, sl, r0, r8
 8000224:	fb1a 9910 	smlabt	r9, sl, r0, r9
 8000228:	fb2c 8804 	smlad	r8, ip, r4, r8
 800022c:	fb2c 9915 	smladx	r9, ip, r5, r9
 8000230:	fb4e 8806 	smlsd	r8, lr, r6, r8
 8000234:	fb4e 9917 	smlsdx	r9, lr, r7, r9
 8000238:	0026      	movs	r6, r4
 800023a:	002f      	movs	r7, r5
 800023c:	eac0 1408 	pkhbt	r4, r0, r8, lsl #4
 8000240:	eac0 3529 	pkhtb	r5, r0, r9, asr #12
 8000244:	0428      	lsls	r0, r5, #16
 8000246:	eac0 4024 	pkhtb	r0, r0, r4, asr #16
 800024a:	5088      	str	r0, [r1, r2]
 800024c:	18d2      	adds	r2, r2, r3
 800024e:	d1e6      	bne.n	800021e <loop_complex>
 8000250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08000254 <acc_alg_biquad_q3_12_direct_form_1_reverse>:
 8000254:	f06f 0c01 	mvn.w	ip, #1
 8000258:	3902      	subs	r1, #2
 800025a:	e004      	b.n	8000266 <head_real>

0800025c <acc_alg_biquad_q3_12_direct_form_1>:
 800025c:	f05f 0c02 	movs.w	ip, #2
 8000260:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8000264:	4252      	negs	r2, r2

08000266 <head_real>:
 8000266:	0052      	lsls	r2, r2, #1
 8000268:	d100      	bne.n	800026c <init_real>
 800026a:	4770      	bx	lr

0800026c <init_real>:
 800026c:	e92d 44f0 	stmdb	sp!, {r4, r5, r6, r7, sl, lr}
 8000270:	4667      	mov	r7, ip
 8000272:	f8b0 a000 	ldrh.w	sl, [r0]
 8000276:	8844      	ldrh	r4, [r0, #2]
 8000278:	8885      	ldrh	r5, [r0, #4]
 800027a:	88c6      	ldrh	r6, [r0, #6]
 800027c:	8900      	ldrh	r0, [r0, #8]
 800027e:	f5c6 4670 	rsb	r6, r6, #61440	; 0xf000
 8000282:	eac4 4c06 	pkhbt	ip, r4, r6, lsl #16
 8000286:	eac5 4e00 	pkhbt	lr, r5, r0, lsl #16
 800028a:	eac3 4403 	pkhbt	r4, r3, r3, lsl #16
 800028e:	0025      	movs	r5, r4
 8000290:	b21b      	sxth	r3, r3
 8000292:	031e      	lsls	r6, r3, #12

08000294 <loop_real>:
 8000294:	5a88      	ldrh	r0, [r1, r2]
 8000296:	fb1a 6600 	smlabb	r6, sl, r0, r6
 800029a:	fb2c 6604 	smlad	r6, ip, r4, r6
 800029e:	fb4e 6605 	smlsd	r6, lr, r5, r6
 80002a2:	0025      	movs	r5, r4
 80002a4:	eac0 1406 	pkhbt	r4, r0, r6, lsl #4
 80002a8:	1420      	asrs	r0, r4, #16
 80002aa:	5288      	strh	r0, [r1, r2]
 80002ac:	19d2      	adds	r2, r2, r7
 80002ae:	d1f1      	bne.n	8000294 <loop_real>
 80002b0:	e8bd 84f0 	ldmia.w	sp!, {r4, r5, r6, r7, sl, pc}
	...

080002c0 <memchr>:
 80002c0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002c4:	2a10      	cmp	r2, #16
 80002c6:	db2b      	blt.n	8000320 <memchr+0x60>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	d008      	beq.n	80002e0 <memchr+0x20>
 80002ce:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d2:	3a01      	subs	r2, #1
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d02d      	beq.n	8000334 <memchr+0x74>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	b342      	cbz	r2, 8000330 <memchr+0x70>
 80002de:	d1f6      	bne.n	80002ce <memchr+0xe>
 80002e0:	b4f0      	push	{r4, r5, r6, r7}
 80002e2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002e6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ea:	f022 0407 	bic.w	r4, r2, #7
 80002ee:	f07f 0700 	mvns.w	r7, #0
 80002f2:	2300      	movs	r3, #0
 80002f4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002f8:	3c08      	subs	r4, #8
 80002fa:	ea85 0501 	eor.w	r5, r5, r1
 80002fe:	ea86 0601 	eor.w	r6, r6, r1
 8000302:	fa85 f547 	uadd8	r5, r5, r7
 8000306:	faa3 f587 	sel	r5, r3, r7
 800030a:	fa86 f647 	uadd8	r6, r6, r7
 800030e:	faa5 f687 	sel	r6, r5, r7
 8000312:	b98e      	cbnz	r6, 8000338 <memchr+0x78>
 8000314:	d1ee      	bne.n	80002f4 <memchr+0x34>
 8000316:	bcf0      	pop	{r4, r5, r6, r7}
 8000318:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800031c:	f002 0207 	and.w	r2, r2, #7
 8000320:	b132      	cbz	r2, 8000330 <memchr+0x70>
 8000322:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000326:	3a01      	subs	r2, #1
 8000328:	ea83 0301 	eor.w	r3, r3, r1
 800032c:	b113      	cbz	r3, 8000334 <memchr+0x74>
 800032e:	d1f8      	bne.n	8000322 <memchr+0x62>
 8000330:	2000      	movs	r0, #0
 8000332:	4770      	bx	lr
 8000334:	3801      	subs	r0, #1
 8000336:	4770      	bx	lr
 8000338:	2d00      	cmp	r5, #0
 800033a:	bf06      	itte	eq
 800033c:	4635      	moveq	r5, r6
 800033e:	3803      	subeq	r0, #3
 8000340:	3807      	subne	r0, #7
 8000342:	f015 0f01 	tst.w	r5, #1
 8000346:	d107      	bne.n	8000358 <memchr+0x98>
 8000348:	3001      	adds	r0, #1
 800034a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800034e:	bf02      	ittt	eq
 8000350:	3001      	addeq	r0, #1
 8000352:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000356:	3001      	addeq	r0, #1
 8000358:	bcf0      	pop	{r4, r5, r6, r7}
 800035a:	3801      	subs	r0, #1
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop

08000360 <strlen>:
 8000360:	4603      	mov	r3, r0
 8000362:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000366:	2a00      	cmp	r2, #0
 8000368:	d1fb      	bne.n	8000362 <strlen+0x2>
 800036a:	1a18      	subs	r0, r3, r0
 800036c:	3801      	subs	r0, #1
 800036e:	4770      	bx	lr

08000370 <__aeabi_drsub>:
 8000370:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000374:	e002      	b.n	800037c <__adddf3>
 8000376:	bf00      	nop

08000378 <__aeabi_dsub>:
 8000378:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800037c <__adddf3>:
 800037c:	b530      	push	{r4, r5, lr}
 800037e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000382:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	bf1f      	itttt	ne
 8000392:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000396:	ea55 0c02 	orrsne.w	ip, r5, r2
 800039a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800039e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003a2:	f000 80e2 	beq.w	800056a <__adddf3+0x1ee>
 80003a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ae:	bfb8      	it	lt
 80003b0:	426d      	neglt	r5, r5
 80003b2:	dd0c      	ble.n	80003ce <__adddf3+0x52>
 80003b4:	442c      	add	r4, r5
 80003b6:	ea80 0202 	eor.w	r2, r0, r2
 80003ba:	ea81 0303 	eor.w	r3, r1, r3
 80003be:	ea82 0000 	eor.w	r0, r2, r0
 80003c2:	ea83 0101 	eor.w	r1, r3, r1
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	2d36      	cmp	r5, #54	; 0x36
 80003d0:	bf88      	it	hi
 80003d2:	bd30      	pophi	{r4, r5, pc}
 80003d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003e4:	d002      	beq.n	80003ec <__adddf3+0x70>
 80003e6:	4240      	negs	r0, r0
 80003e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003f8:	d002      	beq.n	8000400 <__adddf3+0x84>
 80003fa:	4252      	negs	r2, r2
 80003fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000400:	ea94 0f05 	teq	r4, r5
 8000404:	f000 80a7 	beq.w	8000556 <__adddf3+0x1da>
 8000408:	f1a4 0401 	sub.w	r4, r4, #1
 800040c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000410:	db0d      	blt.n	800042e <__adddf3+0xb2>
 8000412:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000416:	fa22 f205 	lsr.w	r2, r2, r5
 800041a:	1880      	adds	r0, r0, r2
 800041c:	f141 0100 	adc.w	r1, r1, #0
 8000420:	fa03 f20e 	lsl.w	r2, r3, lr
 8000424:	1880      	adds	r0, r0, r2
 8000426:	fa43 f305 	asr.w	r3, r3, r5
 800042a:	4159      	adcs	r1, r3
 800042c:	e00e      	b.n	800044c <__adddf3+0xd0>
 800042e:	f1a5 0520 	sub.w	r5, r5, #32
 8000432:	f10e 0e20 	add.w	lr, lr, #32
 8000436:	2a01      	cmp	r2, #1
 8000438:	fa03 fc0e 	lsl.w	ip, r3, lr
 800043c:	bf28      	it	cs
 800043e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000442:	fa43 f305 	asr.w	r3, r3, r5
 8000446:	18c0      	adds	r0, r0, r3
 8000448:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	d507      	bpl.n	8000462 <__adddf3+0xe6>
 8000452:	f04f 0e00 	mov.w	lr, #0
 8000456:	f1dc 0c00 	rsbs	ip, ip, #0
 800045a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800045e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000462:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000466:	d31b      	bcc.n	80004a0 <__adddf3+0x124>
 8000468:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800046c:	d30c      	bcc.n	8000488 <__adddf3+0x10c>
 800046e:	0849      	lsrs	r1, r1, #1
 8000470:	ea5f 0030 	movs.w	r0, r0, rrx
 8000474:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000478:	f104 0401 	add.w	r4, r4, #1
 800047c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000480:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000484:	f080 809a 	bcs.w	80005bc <__adddf3+0x240>
 8000488:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800048c:	bf08      	it	eq
 800048e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000492:	f150 0000 	adcs.w	r0, r0, #0
 8000496:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800049a:	ea41 0105 	orr.w	r1, r1, r5
 800049e:	bd30      	pop	{r4, r5, pc}
 80004a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004a4:	4140      	adcs	r0, r0
 80004a6:	eb41 0101 	adc.w	r1, r1, r1
 80004aa:	3c01      	subs	r4, #1
 80004ac:	bf28      	it	cs
 80004ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004b2:	d2e9      	bcs.n	8000488 <__adddf3+0x10c>
 80004b4:	f091 0f00 	teq	r1, #0
 80004b8:	bf04      	itt	eq
 80004ba:	4601      	moveq	r1, r0
 80004bc:	2000      	moveq	r0, #0
 80004be:	fab1 f381 	clz	r3, r1
 80004c2:	bf08      	it	eq
 80004c4:	3320      	addeq	r3, #32
 80004c6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ca:	f1b3 0220 	subs.w	r2, r3, #32
 80004ce:	da0c      	bge.n	80004ea <__adddf3+0x16e>
 80004d0:	320c      	adds	r2, #12
 80004d2:	dd08      	ble.n	80004e6 <__adddf3+0x16a>
 80004d4:	f102 0c14 	add.w	ip, r2, #20
 80004d8:	f1c2 020c 	rsb	r2, r2, #12
 80004dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80004e0:	fa21 f102 	lsr.w	r1, r1, r2
 80004e4:	e00c      	b.n	8000500 <__adddf3+0x184>
 80004e6:	f102 0214 	add.w	r2, r2, #20
 80004ea:	bfd8      	it	le
 80004ec:	f1c2 0c20 	rsble	ip, r2, #32
 80004f0:	fa01 f102 	lsl.w	r1, r1, r2
 80004f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004f8:	bfdc      	itt	le
 80004fa:	ea41 010c 	orrle.w	r1, r1, ip
 80004fe:	4090      	lslle	r0, r2
 8000500:	1ae4      	subs	r4, r4, r3
 8000502:	bfa2      	ittt	ge
 8000504:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000508:	4329      	orrge	r1, r5
 800050a:	bd30      	popge	{r4, r5, pc}
 800050c:	ea6f 0404 	mvn.w	r4, r4
 8000510:	3c1f      	subs	r4, #31
 8000512:	da1c      	bge.n	800054e <__adddf3+0x1d2>
 8000514:	340c      	adds	r4, #12
 8000516:	dc0e      	bgt.n	8000536 <__adddf3+0x1ba>
 8000518:	f104 0414 	add.w	r4, r4, #20
 800051c:	f1c4 0220 	rsb	r2, r4, #32
 8000520:	fa20 f004 	lsr.w	r0, r0, r4
 8000524:	fa01 f302 	lsl.w	r3, r1, r2
 8000528:	ea40 0003 	orr.w	r0, r0, r3
 800052c:	fa21 f304 	lsr.w	r3, r1, r4
 8000530:	ea45 0103 	orr.w	r1, r5, r3
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	f1c4 040c 	rsb	r4, r4, #12
 800053a:	f1c4 0220 	rsb	r2, r4, #32
 800053e:	fa20 f002 	lsr.w	r0, r0, r2
 8000542:	fa01 f304 	lsl.w	r3, r1, r4
 8000546:	ea40 0003 	orr.w	r0, r0, r3
 800054a:	4629      	mov	r1, r5
 800054c:	bd30      	pop	{r4, r5, pc}
 800054e:	fa21 f004 	lsr.w	r0, r1, r4
 8000552:	4629      	mov	r1, r5
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f094 0f00 	teq	r4, #0
 800055a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800055e:	bf06      	itte	eq
 8000560:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000564:	3401      	addeq	r4, #1
 8000566:	3d01      	subne	r5, #1
 8000568:	e74e      	b.n	8000408 <__adddf3+0x8c>
 800056a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800056e:	bf18      	it	ne
 8000570:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000574:	d029      	beq.n	80005ca <__adddf3+0x24e>
 8000576:	ea94 0f05 	teq	r4, r5
 800057a:	bf08      	it	eq
 800057c:	ea90 0f02 	teqeq	r0, r2
 8000580:	d005      	beq.n	800058e <__adddf3+0x212>
 8000582:	ea54 0c00 	orrs.w	ip, r4, r0
 8000586:	bf04      	itt	eq
 8000588:	4619      	moveq	r1, r3
 800058a:	4610      	moveq	r0, r2
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	ea91 0f03 	teq	r1, r3
 8000592:	bf1e      	ittt	ne
 8000594:	2100      	movne	r1, #0
 8000596:	2000      	movne	r0, #0
 8000598:	bd30      	popne	{r4, r5, pc}
 800059a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800059e:	d105      	bne.n	80005ac <__adddf3+0x230>
 80005a0:	0040      	lsls	r0, r0, #1
 80005a2:	4149      	adcs	r1, r1
 80005a4:	bf28      	it	cs
 80005a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005aa:	bd30      	pop	{r4, r5, pc}
 80005ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005b0:	bf3c      	itt	cc
 80005b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005b6:	bd30      	popcc	{r4, r5, pc}
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005c4:	f04f 0000 	mov.w	r0, #0
 80005c8:	bd30      	pop	{r4, r5, pc}
 80005ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ce:	bf1a      	itte	ne
 80005d0:	4619      	movne	r1, r3
 80005d2:	4610      	movne	r0, r2
 80005d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005d8:	bf1c      	itt	ne
 80005da:	460b      	movne	r3, r1
 80005dc:	4602      	movne	r2, r0
 80005de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005e2:	bf06      	itte	eq
 80005e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005e8:	ea91 0f03 	teqeq	r1, r3
 80005ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	bf00      	nop

080005f4 <__aeabi_ui2d>:
 80005f4:	f090 0f00 	teq	r0, #0
 80005f8:	bf04      	itt	eq
 80005fa:	2100      	moveq	r1, #0
 80005fc:	4770      	bxeq	lr
 80005fe:	b530      	push	{r4, r5, lr}
 8000600:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000604:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000608:	f04f 0500 	mov.w	r5, #0
 800060c:	f04f 0100 	mov.w	r1, #0
 8000610:	e750      	b.n	80004b4 <__adddf3+0x138>
 8000612:	bf00      	nop

08000614 <__aeabi_i2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800062c:	bf48      	it	mi
 800062e:	4240      	negmi	r0, r0
 8000630:	f04f 0100 	mov.w	r1, #0
 8000634:	e73e      	b.n	80004b4 <__adddf3+0x138>
 8000636:	bf00      	nop

08000638 <__aeabi_f2d>:
 8000638:	0042      	lsls	r2, r0, #1
 800063a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800063e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000642:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000646:	bf1f      	itttt	ne
 8000648:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800064c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000650:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000654:	4770      	bxne	lr
 8000656:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800065a:	bf08      	it	eq
 800065c:	4770      	bxeq	lr
 800065e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000662:	bf04      	itt	eq
 8000664:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000668:	4770      	bxeq	lr
 800066a:	b530      	push	{r4, r5, lr}
 800066c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000670:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000674:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000678:	e71c      	b.n	80004b4 <__adddf3+0x138>
 800067a:	bf00      	nop

0800067c <__aeabi_ul2d>:
 800067c:	ea50 0201 	orrs.w	r2, r0, r1
 8000680:	bf08      	it	eq
 8000682:	4770      	bxeq	lr
 8000684:	b530      	push	{r4, r5, lr}
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	e00a      	b.n	80006a2 <__aeabi_l2d+0x16>

0800068c <__aeabi_l2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800069a:	d502      	bpl.n	80006a2 <__aeabi_l2d+0x16>
 800069c:	4240      	negs	r0, r0
 800069e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ae:	f43f aed8 	beq.w	8000462 <__adddf3+0xe6>
 80006b2:	f04f 0203 	mov.w	r2, #3
 80006b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ba:	bf18      	it	ne
 80006bc:	3203      	addne	r2, #3
 80006be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006c2:	bf18      	it	ne
 80006c4:	3203      	addne	r2, #3
 80006c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ca:	f1c2 0320 	rsb	r3, r2, #32
 80006ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006da:	ea40 000e 	orr.w	r0, r0, lr
 80006de:	fa21 f102 	lsr.w	r1, r1, r2
 80006e2:	4414      	add	r4, r2
 80006e4:	e6bd      	b.n	8000462 <__adddf3+0xe6>
 80006e6:	bf00      	nop

080006e8 <__aeabi_dmul>:
 80006e8:	b570      	push	{r4, r5, r6, lr}
 80006ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006f6:	bf1d      	ittte	ne
 80006f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006fc:	ea94 0f0c 	teqne	r4, ip
 8000700:	ea95 0f0c 	teqne	r5, ip
 8000704:	f000 f8de 	bleq	80008c4 <__aeabi_dmul+0x1dc>
 8000708:	442c      	add	r4, r5
 800070a:	ea81 0603 	eor.w	r6, r1, r3
 800070e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000712:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000716:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800071a:	bf18      	it	ne
 800071c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000720:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000724:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000728:	d038      	beq.n	800079c <__aeabi_dmul+0xb4>
 800072a:	fba0 ce02 	umull	ip, lr, r0, r2
 800072e:	f04f 0500 	mov.w	r5, #0
 8000732:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000736:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800073a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800073e:	f04f 0600 	mov.w	r6, #0
 8000742:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000746:	f09c 0f00 	teq	ip, #0
 800074a:	bf18      	it	ne
 800074c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000750:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000754:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000758:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800075c:	d204      	bcs.n	8000768 <__aeabi_dmul+0x80>
 800075e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000762:	416d      	adcs	r5, r5
 8000764:	eb46 0606 	adc.w	r6, r6, r6
 8000768:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800076c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000770:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000774:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000778:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800077c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000780:	bf88      	it	hi
 8000782:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000786:	d81e      	bhi.n	80007c6 <__aeabi_dmul+0xde>
 8000788:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800078c:	bf08      	it	eq
 800078e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000792:	f150 0000 	adcs.w	r0, r0, #0
 8000796:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007a0:	ea46 0101 	orr.w	r1, r6, r1
 80007a4:	ea40 0002 	orr.w	r0, r0, r2
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007b0:	bfc2      	ittt	gt
 80007b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ba:	bd70      	popgt	{r4, r5, r6, pc}
 80007bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007c0:	f04f 0e00 	mov.w	lr, #0
 80007c4:	3c01      	subs	r4, #1
 80007c6:	f300 80ab 	bgt.w	8000920 <__aeabi_dmul+0x238>
 80007ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007ce:	bfde      	ittt	le
 80007d0:	2000      	movle	r0, #0
 80007d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007d6:	bd70      	pople	{r4, r5, r6, pc}
 80007d8:	f1c4 0400 	rsb	r4, r4, #0
 80007dc:	3c20      	subs	r4, #32
 80007de:	da35      	bge.n	800084c <__aeabi_dmul+0x164>
 80007e0:	340c      	adds	r4, #12
 80007e2:	dc1b      	bgt.n	800081c <__aeabi_dmul+0x134>
 80007e4:	f104 0414 	add.w	r4, r4, #20
 80007e8:	f1c4 0520 	rsb	r5, r4, #32
 80007ec:	fa00 f305 	lsl.w	r3, r0, r5
 80007f0:	fa20 f004 	lsr.w	r0, r0, r4
 80007f4:	fa01 f205 	lsl.w	r2, r1, r5
 80007f8:	ea40 0002 	orr.w	r0, r0, r2
 80007fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000800:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000804:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000808:	fa21 f604 	lsr.w	r6, r1, r4
 800080c:	eb42 0106 	adc.w	r1, r2, r6
 8000810:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000814:	bf08      	it	eq
 8000816:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800081a:	bd70      	pop	{r4, r5, r6, pc}
 800081c:	f1c4 040c 	rsb	r4, r4, #12
 8000820:	f1c4 0520 	rsb	r5, r4, #32
 8000824:	fa00 f304 	lsl.w	r3, r0, r4
 8000828:	fa20 f005 	lsr.w	r0, r0, r5
 800082c:	fa01 f204 	lsl.w	r2, r1, r4
 8000830:	ea40 0002 	orr.w	r0, r0, r2
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800083c:	f141 0100 	adc.w	r1, r1, #0
 8000840:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000844:	bf08      	it	eq
 8000846:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800084a:	bd70      	pop	{r4, r5, r6, pc}
 800084c:	f1c4 0520 	rsb	r5, r4, #32
 8000850:	fa00 f205 	lsl.w	r2, r0, r5
 8000854:	ea4e 0e02 	orr.w	lr, lr, r2
 8000858:	fa20 f304 	lsr.w	r3, r0, r4
 800085c:	fa01 f205 	lsl.w	r2, r1, r5
 8000860:	ea43 0302 	orr.w	r3, r3, r2
 8000864:	fa21 f004 	lsr.w	r0, r1, r4
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	fa21 f204 	lsr.w	r2, r1, r4
 8000870:	ea20 0002 	bic.w	r0, r0, r2
 8000874:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000878:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800087c:	bf08      	it	eq
 800087e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f094 0f00 	teq	r4, #0
 8000888:	d10f      	bne.n	80008aa <__aeabi_dmul+0x1c2>
 800088a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800088e:	0040      	lsls	r0, r0, #1
 8000890:	eb41 0101 	adc.w	r1, r1, r1
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	bf08      	it	eq
 800089a:	3c01      	subeq	r4, #1
 800089c:	d0f7      	beq.n	800088e <__aeabi_dmul+0x1a6>
 800089e:	ea41 0106 	orr.w	r1, r1, r6
 80008a2:	f095 0f00 	teq	r5, #0
 80008a6:	bf18      	it	ne
 80008a8:	4770      	bxne	lr
 80008aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008ae:	0052      	lsls	r2, r2, #1
 80008b0:	eb43 0303 	adc.w	r3, r3, r3
 80008b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008b8:	bf08      	it	eq
 80008ba:	3d01      	subeq	r5, #1
 80008bc:	d0f7      	beq.n	80008ae <__aeabi_dmul+0x1c6>
 80008be:	ea43 0306 	orr.w	r3, r3, r6
 80008c2:	4770      	bx	lr
 80008c4:	ea94 0f0c 	teq	r4, ip
 80008c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008cc:	bf18      	it	ne
 80008ce:	ea95 0f0c 	teqne	r5, ip
 80008d2:	d00c      	beq.n	80008ee <__aeabi_dmul+0x206>
 80008d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d8:	bf18      	it	ne
 80008da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008de:	d1d1      	bne.n	8000884 <__aeabi_dmul+0x19c>
 80008e0:	ea81 0103 	eor.w	r1, r1, r3
 80008e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008e8:	f04f 0000 	mov.w	r0, #0
 80008ec:	bd70      	pop	{r4, r5, r6, pc}
 80008ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f2:	bf06      	itte	eq
 80008f4:	4610      	moveq	r0, r2
 80008f6:	4619      	moveq	r1, r3
 80008f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fc:	d019      	beq.n	8000932 <__aeabi_dmul+0x24a>
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	d102      	bne.n	800090a <__aeabi_dmul+0x222>
 8000904:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000908:	d113      	bne.n	8000932 <__aeabi_dmul+0x24a>
 800090a:	ea95 0f0c 	teq	r5, ip
 800090e:	d105      	bne.n	800091c <__aeabi_dmul+0x234>
 8000910:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000914:	bf1c      	itt	ne
 8000916:	4610      	movne	r0, r2
 8000918:	4619      	movne	r1, r3
 800091a:	d10a      	bne.n	8000932 <__aeabi_dmul+0x24a>
 800091c:	ea81 0103 	eor.w	r1, r1, r3
 8000920:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000924:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000928:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800092c:	f04f 0000 	mov.w	r0, #0
 8000930:	bd70      	pop	{r4, r5, r6, pc}
 8000932:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000936:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800093a:	bd70      	pop	{r4, r5, r6, pc}

0800093c <__aeabi_ddiv>:
 800093c:	b570      	push	{r4, r5, r6, lr}
 800093e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000942:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000946:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800094a:	bf1d      	ittte	ne
 800094c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000950:	ea94 0f0c 	teqne	r4, ip
 8000954:	ea95 0f0c 	teqne	r5, ip
 8000958:	f000 f8a7 	bleq	8000aaa <__aeabi_ddiv+0x16e>
 800095c:	eba4 0405 	sub.w	r4, r4, r5
 8000960:	ea81 0e03 	eor.w	lr, r1, r3
 8000964:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000968:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800096c:	f000 8088 	beq.w	8000a80 <__aeabi_ddiv+0x144>
 8000970:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000974:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000978:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800097c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000980:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000984:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000988:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800098c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000990:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000994:	429d      	cmp	r5, r3
 8000996:	bf08      	it	eq
 8000998:	4296      	cmpeq	r6, r2
 800099a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800099e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009a2:	d202      	bcs.n	80009aa <__aeabi_ddiv+0x6e>
 80009a4:	085b      	lsrs	r3, r3, #1
 80009a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009aa:	1ab6      	subs	r6, r6, r2
 80009ac:	eb65 0503 	sbc.w	r5, r5, r3
 80009b0:	085b      	lsrs	r3, r3, #1
 80009b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009be:	ebb6 0e02 	subs.w	lr, r6, r2
 80009c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009c6:	bf22      	ittt	cs
 80009c8:	1ab6      	subcs	r6, r6, r2
 80009ca:	4675      	movcs	r5, lr
 80009cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80009d0:	085b      	lsrs	r3, r3, #1
 80009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009de:	bf22      	ittt	cs
 80009e0:	1ab6      	subcs	r6, r6, r2
 80009e2:	4675      	movcs	r5, lr
 80009e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009e8:	085b      	lsrs	r3, r3, #1
 80009ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80009f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009f6:	bf22      	ittt	cs
 80009f8:	1ab6      	subcs	r6, r6, r2
 80009fa:	4675      	movcs	r5, lr
 80009fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a00:	085b      	lsrs	r3, r3, #1
 8000a02:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a06:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a0a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a0e:	bf22      	ittt	cs
 8000a10:	1ab6      	subcs	r6, r6, r2
 8000a12:	4675      	movcs	r5, lr
 8000a14:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a18:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a1c:	d018      	beq.n	8000a50 <__aeabi_ddiv+0x114>
 8000a1e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a22:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a26:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a2a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a2e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a32:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a36:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a3a:	d1c0      	bne.n	80009be <__aeabi_ddiv+0x82>
 8000a3c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a40:	d10b      	bne.n	8000a5a <__aeabi_ddiv+0x11e>
 8000a42:	ea41 0100 	orr.w	r1, r1, r0
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a4e:	e7b6      	b.n	80009be <__aeabi_ddiv+0x82>
 8000a50:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a54:	bf04      	itt	eq
 8000a56:	4301      	orreq	r1, r0
 8000a58:	2000      	moveq	r0, #0
 8000a5a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a5e:	bf88      	it	hi
 8000a60:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a64:	f63f aeaf 	bhi.w	80007c6 <__aeabi_dmul+0xde>
 8000a68:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a6c:	bf04      	itt	eq
 8000a6e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a72:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a76:	f150 0000 	adcs.w	r0, r0, #0
 8000a7a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a7e:	bd70      	pop	{r4, r5, r6, pc}
 8000a80:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a84:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a88:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a8c:	bfc2      	ittt	gt
 8000a8e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a92:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a96:	bd70      	popgt	{r4, r5, r6, pc}
 8000a98:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a9c:	f04f 0e00 	mov.w	lr, #0
 8000aa0:	3c01      	subs	r4, #1
 8000aa2:	e690      	b.n	80007c6 <__aeabi_dmul+0xde>
 8000aa4:	ea45 0e06 	orr.w	lr, r5, r6
 8000aa8:	e68d      	b.n	80007c6 <__aeabi_dmul+0xde>
 8000aaa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000aae:	ea94 0f0c 	teq	r4, ip
 8000ab2:	bf08      	it	eq
 8000ab4:	ea95 0f0c 	teqeq	r5, ip
 8000ab8:	f43f af3b 	beq.w	8000932 <__aeabi_dmul+0x24a>
 8000abc:	ea94 0f0c 	teq	r4, ip
 8000ac0:	d10a      	bne.n	8000ad8 <__aeabi_ddiv+0x19c>
 8000ac2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ac6:	f47f af34 	bne.w	8000932 <__aeabi_dmul+0x24a>
 8000aca:	ea95 0f0c 	teq	r5, ip
 8000ace:	f47f af25 	bne.w	800091c <__aeabi_dmul+0x234>
 8000ad2:	4610      	mov	r0, r2
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	e72c      	b.n	8000932 <__aeabi_dmul+0x24a>
 8000ad8:	ea95 0f0c 	teq	r5, ip
 8000adc:	d106      	bne.n	8000aec <__aeabi_ddiv+0x1b0>
 8000ade:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ae2:	f43f aefd 	beq.w	80008e0 <__aeabi_dmul+0x1f8>
 8000ae6:	4610      	mov	r0, r2
 8000ae8:	4619      	mov	r1, r3
 8000aea:	e722      	b.n	8000932 <__aeabi_dmul+0x24a>
 8000aec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000af0:	bf18      	it	ne
 8000af2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000af6:	f47f aec5 	bne.w	8000884 <__aeabi_dmul+0x19c>
 8000afa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000afe:	f47f af0d 	bne.w	800091c <__aeabi_dmul+0x234>
 8000b02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b06:	f47f aeeb 	bne.w	80008e0 <__aeabi_dmul+0x1f8>
 8000b0a:	e712      	b.n	8000932 <__aeabi_dmul+0x24a>

08000b0c <__gedf2>:
 8000b0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b10:	e006      	b.n	8000b20 <__cmpdf2+0x4>
 8000b12:	bf00      	nop

08000b14 <__ledf2>:
 8000b14:	f04f 0c01 	mov.w	ip, #1
 8000b18:	e002      	b.n	8000b20 <__cmpdf2+0x4>
 8000b1a:	bf00      	nop

08000b1c <__cmpdf2>:
 8000b1c:	f04f 0c01 	mov.w	ip, #1
 8000b20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	bf18      	it	ne
 8000b32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b36:	d01b      	beq.n	8000b70 <__cmpdf2+0x54>
 8000b38:	b001      	add	sp, #4
 8000b3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b3e:	bf0c      	ite	eq
 8000b40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b44:	ea91 0f03 	teqne	r1, r3
 8000b48:	bf02      	ittt	eq
 8000b4a:	ea90 0f02 	teqeq	r0, r2
 8000b4e:	2000      	moveq	r0, #0
 8000b50:	4770      	bxeq	lr
 8000b52:	f110 0f00 	cmn.w	r0, #0
 8000b56:	ea91 0f03 	teq	r1, r3
 8000b5a:	bf58      	it	pl
 8000b5c:	4299      	cmppl	r1, r3
 8000b5e:	bf08      	it	eq
 8000b60:	4290      	cmpeq	r0, r2
 8000b62:	bf2c      	ite	cs
 8000b64:	17d8      	asrcs	r0, r3, #31
 8000b66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b6a:	f040 0001 	orr.w	r0, r0, #1
 8000b6e:	4770      	bx	lr
 8000b70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b78:	d102      	bne.n	8000b80 <__cmpdf2+0x64>
 8000b7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7e:	d107      	bne.n	8000b90 <__cmpdf2+0x74>
 8000b80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b88:	d1d6      	bne.n	8000b38 <__cmpdf2+0x1c>
 8000b8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8e:	d0d3      	beq.n	8000b38 <__cmpdf2+0x1c>
 8000b90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_cdrcmple>:
 8000b98:	4684      	mov	ip, r0
 8000b9a:	4610      	mov	r0, r2
 8000b9c:	4662      	mov	r2, ip
 8000b9e:	468c      	mov	ip, r1
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4663      	mov	r3, ip
 8000ba4:	e000      	b.n	8000ba8 <__aeabi_cdcmpeq>
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_cdcmpeq>:
 8000ba8:	b501      	push	{r0, lr}
 8000baa:	f7ff ffb7 	bl	8000b1c <__cmpdf2>
 8000bae:	2800      	cmp	r0, #0
 8000bb0:	bf48      	it	mi
 8000bb2:	f110 0f00 	cmnmi.w	r0, #0
 8000bb6:	bd01      	pop	{r0, pc}

08000bb8 <__aeabi_dcmpeq>:
 8000bb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bbc:	f7ff fff4 	bl	8000ba8 <__aeabi_cdcmpeq>
 8000bc0:	bf0c      	ite	eq
 8000bc2:	2001      	moveq	r0, #1
 8000bc4:	2000      	movne	r0, #0
 8000bc6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bca:	bf00      	nop

08000bcc <__aeabi_dcmplt>:
 8000bcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bd0:	f7ff ffea 	bl	8000ba8 <__aeabi_cdcmpeq>
 8000bd4:	bf34      	ite	cc
 8000bd6:	2001      	movcc	r0, #1
 8000bd8:	2000      	movcs	r0, #0
 8000bda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bde:	bf00      	nop

08000be0 <__aeabi_dcmple>:
 8000be0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be4:	f7ff ffe0 	bl	8000ba8 <__aeabi_cdcmpeq>
 8000be8:	bf94      	ite	ls
 8000bea:	2001      	movls	r0, #1
 8000bec:	2000      	movhi	r0, #0
 8000bee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_dcmpge>:
 8000bf4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf8:	f7ff ffce 	bl	8000b98 <__aeabi_cdrcmple>
 8000bfc:	bf94      	ite	ls
 8000bfe:	2001      	movls	r0, #1
 8000c00:	2000      	movhi	r0, #0
 8000c02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c06:	bf00      	nop

08000c08 <__aeabi_dcmpgt>:
 8000c08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c0c:	f7ff ffc4 	bl	8000b98 <__aeabi_cdrcmple>
 8000c10:	bf34      	ite	cc
 8000c12:	2001      	movcc	r0, #1
 8000c14:	2000      	movcs	r0, #0
 8000c16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c1a:	bf00      	nop

08000c1c <__aeabi_dcmpun>:
 8000c1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c24:	d102      	bne.n	8000c2c <__aeabi_dcmpun+0x10>
 8000c26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c2a:	d10a      	bne.n	8000c42 <__aeabi_dcmpun+0x26>
 8000c2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c34:	d102      	bne.n	8000c3c <__aeabi_dcmpun+0x20>
 8000c36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_dcmpun+0x26>
 8000c3c:	f04f 0000 	mov.w	r0, #0
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0001 	mov.w	r0, #1
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2iz>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c50:	d215      	bcs.n	8000c7e <__aeabi_d2iz+0x36>
 8000c52:	d511      	bpl.n	8000c78 <__aeabi_d2iz+0x30>
 8000c54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c5c:	d912      	bls.n	8000c84 <__aeabi_d2iz+0x3c>
 8000c5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c72:	bf18      	it	ne
 8000c74:	4240      	negne	r0, r0
 8000c76:	4770      	bx	lr
 8000c78:	f04f 0000 	mov.w	r0, #0
 8000c7c:	4770      	bx	lr
 8000c7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c82:	d105      	bne.n	8000c90 <__aeabi_d2iz+0x48>
 8000c84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c88:	bf08      	it	eq
 8000c8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c8e:	4770      	bx	lr
 8000c90:	f04f 0000 	mov.w	r0, #0
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2uiz>:
 8000c98:	004a      	lsls	r2, r1, #1
 8000c9a:	d211      	bcs.n	8000cc0 <__aeabi_d2uiz+0x28>
 8000c9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ca0:	d211      	bcs.n	8000cc6 <__aeabi_d2uiz+0x2e>
 8000ca2:	d50d      	bpl.n	8000cc0 <__aeabi_d2uiz+0x28>
 8000ca4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ca8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000cac:	d40e      	bmi.n	8000ccc <__aeabi_d2uiz+0x34>
 8000cae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000cb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000cba:	fa23 f002 	lsr.w	r0, r3, r2
 8000cbe:	4770      	bx	lr
 8000cc0:	f04f 0000 	mov.w	r0, #0
 8000cc4:	4770      	bx	lr
 8000cc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cca:	d102      	bne.n	8000cd2 <__aeabi_d2uiz+0x3a>
 8000ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd0:	4770      	bx	lr
 8000cd2:	f04f 0000 	mov.w	r0, #0
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b970 	b.w	8000fd0 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f806 	bl	8000d08 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9e08      	ldr	r6, [sp, #32]
 8000d0e:	460d      	mov	r5, r1
 8000d10:	4604      	mov	r4, r0
 8000d12:	460f      	mov	r7, r1
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d14a      	bne.n	8000dae <__udivmoddi4+0xa6>
 8000d18:	428a      	cmp	r2, r1
 8000d1a:	4694      	mov	ip, r2
 8000d1c:	d965      	bls.n	8000dea <__udivmoddi4+0xe2>
 8000d1e:	fab2 f382 	clz	r3, r2
 8000d22:	b143      	cbz	r3, 8000d36 <__udivmoddi4+0x2e>
 8000d24:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d28:	f1c3 0220 	rsb	r2, r3, #32
 8000d2c:	409f      	lsls	r7, r3
 8000d2e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d32:	4317      	orrs	r7, r2
 8000d34:	409c      	lsls	r4, r3
 8000d36:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d3a:	fa1f f58c 	uxth.w	r5, ip
 8000d3e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d42:	0c22      	lsrs	r2, r4, #16
 8000d44:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d48:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d4c:	fb01 f005 	mul.w	r0, r1, r5
 8000d50:	4290      	cmp	r0, r2
 8000d52:	d90a      	bls.n	8000d6a <__udivmoddi4+0x62>
 8000d54:	eb1c 0202 	adds.w	r2, ip, r2
 8000d58:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d5c:	f080 811c 	bcs.w	8000f98 <__udivmoddi4+0x290>
 8000d60:	4290      	cmp	r0, r2
 8000d62:	f240 8119 	bls.w	8000f98 <__udivmoddi4+0x290>
 8000d66:	3902      	subs	r1, #2
 8000d68:	4462      	add	r2, ip
 8000d6a:	1a12      	subs	r2, r2, r0
 8000d6c:	b2a4      	uxth	r4, r4
 8000d6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d76:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d7a:	fb00 f505 	mul.w	r5, r0, r5
 8000d7e:	42a5      	cmp	r5, r4
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x90>
 8000d82:	eb1c 0404 	adds.w	r4, ip, r4
 8000d86:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d8a:	f080 8107 	bcs.w	8000f9c <__udivmoddi4+0x294>
 8000d8e:	42a5      	cmp	r5, r4
 8000d90:	f240 8104 	bls.w	8000f9c <__udivmoddi4+0x294>
 8000d94:	4464      	add	r4, ip
 8000d96:	3802      	subs	r0, #2
 8000d98:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d9c:	1b64      	subs	r4, r4, r5
 8000d9e:	2100      	movs	r1, #0
 8000da0:	b11e      	cbz	r6, 8000daa <__udivmoddi4+0xa2>
 8000da2:	40dc      	lsrs	r4, r3
 8000da4:	2300      	movs	r3, #0
 8000da6:	e9c6 4300 	strd	r4, r3, [r6]
 8000daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0xbc>
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	f000 80ed 	beq.w	8000f92 <__udivmoddi4+0x28a>
 8000db8:	2100      	movs	r1, #0
 8000dba:	e9c6 0500 	strd	r0, r5, [r6]
 8000dbe:	4608      	mov	r0, r1
 8000dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc4:	fab3 f183 	clz	r1, r3
 8000dc8:	2900      	cmp	r1, #0
 8000dca:	d149      	bne.n	8000e60 <__udivmoddi4+0x158>
 8000dcc:	42ab      	cmp	r3, r5
 8000dce:	d302      	bcc.n	8000dd6 <__udivmoddi4+0xce>
 8000dd0:	4282      	cmp	r2, r0
 8000dd2:	f200 80f8 	bhi.w	8000fc6 <__udivmoddi4+0x2be>
 8000dd6:	1a84      	subs	r4, r0, r2
 8000dd8:	eb65 0203 	sbc.w	r2, r5, r3
 8000ddc:	2001      	movs	r0, #1
 8000dde:	4617      	mov	r7, r2
 8000de0:	2e00      	cmp	r6, #0
 8000de2:	d0e2      	beq.n	8000daa <__udivmoddi4+0xa2>
 8000de4:	e9c6 4700 	strd	r4, r7, [r6]
 8000de8:	e7df      	b.n	8000daa <__udivmoddi4+0xa2>
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xe6>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f382 	clz	r3, r2
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	f040 8090 	bne.w	8000f18 <__udivmoddi4+0x210>
 8000df8:	1a8a      	subs	r2, r1, r2
 8000dfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dfe:	fa1f fe8c 	uxth.w	lr, ip
 8000e02:	2101      	movs	r1, #1
 8000e04:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e08:	fb07 2015 	mls	r0, r7, r5, r2
 8000e0c:	0c22      	lsrs	r2, r4, #16
 8000e0e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e12:	fb0e f005 	mul.w	r0, lr, r5
 8000e16:	4290      	cmp	r0, r2
 8000e18:	d908      	bls.n	8000e2c <__udivmoddi4+0x124>
 8000e1a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e1e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e22:	d202      	bcs.n	8000e2a <__udivmoddi4+0x122>
 8000e24:	4290      	cmp	r0, r2
 8000e26:	f200 80cb 	bhi.w	8000fc0 <__udivmoddi4+0x2b8>
 8000e2a:	4645      	mov	r5, r8
 8000e2c:	1a12      	subs	r2, r2, r0
 8000e2e:	b2a4      	uxth	r4, r4
 8000e30:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e34:	fb07 2210 	mls	r2, r7, r0, r2
 8000e38:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e3c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e40:	45a6      	cmp	lr, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x14e>
 8000e44:	eb1c 0404 	adds.w	r4, ip, r4
 8000e48:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e4c:	d202      	bcs.n	8000e54 <__udivmoddi4+0x14c>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	f200 80bb 	bhi.w	8000fca <__udivmoddi4+0x2c2>
 8000e54:	4610      	mov	r0, r2
 8000e56:	eba4 040e 	sub.w	r4, r4, lr
 8000e5a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e5e:	e79f      	b.n	8000da0 <__udivmoddi4+0x98>
 8000e60:	f1c1 0720 	rsb	r7, r1, #32
 8000e64:	408b      	lsls	r3, r1
 8000e66:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e6e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e72:	fa20 f307 	lsr.w	r3, r0, r7
 8000e76:	40fd      	lsrs	r5, r7
 8000e78:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e7c:	4323      	orrs	r3, r4
 8000e7e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e82:	fa1f fe8c 	uxth.w	lr, ip
 8000e86:	fb09 5518 	mls	r5, r9, r8, r5
 8000e8a:	0c1c      	lsrs	r4, r3, #16
 8000e8c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e90:	fb08 f50e 	mul.w	r5, r8, lr
 8000e94:	42a5      	cmp	r5, r4
 8000e96:	fa02 f201 	lsl.w	r2, r2, r1
 8000e9a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e9e:	d90b      	bls.n	8000eb8 <__udivmoddi4+0x1b0>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ea8:	f080 8088 	bcs.w	8000fbc <__udivmoddi4+0x2b4>
 8000eac:	42a5      	cmp	r5, r4
 8000eae:	f240 8085 	bls.w	8000fbc <__udivmoddi4+0x2b4>
 8000eb2:	f1a8 0802 	sub.w	r8, r8, #2
 8000eb6:	4464      	add	r4, ip
 8000eb8:	1b64      	subs	r4, r4, r5
 8000eba:	b29d      	uxth	r5, r3
 8000ebc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ec0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ec4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ec8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ecc:	45a6      	cmp	lr, r4
 8000ece:	d908      	bls.n	8000ee2 <__udivmoddi4+0x1da>
 8000ed0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ed8:	d26c      	bcs.n	8000fb4 <__udivmoddi4+0x2ac>
 8000eda:	45a6      	cmp	lr, r4
 8000edc:	d96a      	bls.n	8000fb4 <__udivmoddi4+0x2ac>
 8000ede:	3b02      	subs	r3, #2
 8000ee0:	4464      	add	r4, ip
 8000ee2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ee6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eea:	eba4 040e 	sub.w	r4, r4, lr
 8000eee:	42ac      	cmp	r4, r5
 8000ef0:	46c8      	mov	r8, r9
 8000ef2:	46ae      	mov	lr, r5
 8000ef4:	d356      	bcc.n	8000fa4 <__udivmoddi4+0x29c>
 8000ef6:	d053      	beq.n	8000fa0 <__udivmoddi4+0x298>
 8000ef8:	b156      	cbz	r6, 8000f10 <__udivmoddi4+0x208>
 8000efa:	ebb0 0208 	subs.w	r2, r0, r8
 8000efe:	eb64 040e 	sbc.w	r4, r4, lr
 8000f02:	fa04 f707 	lsl.w	r7, r4, r7
 8000f06:	40ca      	lsrs	r2, r1
 8000f08:	40cc      	lsrs	r4, r1
 8000f0a:	4317      	orrs	r7, r2
 8000f0c:	e9c6 7400 	strd	r7, r4, [r6]
 8000f10:	4618      	mov	r0, r3
 8000f12:	2100      	movs	r1, #0
 8000f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f18:	f1c3 0120 	rsb	r1, r3, #32
 8000f1c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f20:	fa20 f201 	lsr.w	r2, r0, r1
 8000f24:	fa25 f101 	lsr.w	r1, r5, r1
 8000f28:	409d      	lsls	r5, r3
 8000f2a:	432a      	orrs	r2, r5
 8000f2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f30:	fa1f fe8c 	uxth.w	lr, ip
 8000f34:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f38:	fb07 1510 	mls	r5, r7, r0, r1
 8000f3c:	0c11      	lsrs	r1, r2, #16
 8000f3e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f42:	fb00 f50e 	mul.w	r5, r0, lr
 8000f46:	428d      	cmp	r5, r1
 8000f48:	fa04 f403 	lsl.w	r4, r4, r3
 8000f4c:	d908      	bls.n	8000f60 <__udivmoddi4+0x258>
 8000f4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f52:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f56:	d22f      	bcs.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f58:	428d      	cmp	r5, r1
 8000f5a:	d92d      	bls.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	4461      	add	r1, ip
 8000f60:	1b49      	subs	r1, r1, r5
 8000f62:	b292      	uxth	r2, r2
 8000f64:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f68:	fb07 1115 	mls	r1, r7, r5, r1
 8000f6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f70:	fb05 f10e 	mul.w	r1, r5, lr
 8000f74:	4291      	cmp	r1, r2
 8000f76:	d908      	bls.n	8000f8a <__udivmoddi4+0x282>
 8000f78:	eb1c 0202 	adds.w	r2, ip, r2
 8000f7c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f80:	d216      	bcs.n	8000fb0 <__udivmoddi4+0x2a8>
 8000f82:	4291      	cmp	r1, r2
 8000f84:	d914      	bls.n	8000fb0 <__udivmoddi4+0x2a8>
 8000f86:	3d02      	subs	r5, #2
 8000f88:	4462      	add	r2, ip
 8000f8a:	1a52      	subs	r2, r2, r1
 8000f8c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f90:	e738      	b.n	8000e04 <__udivmoddi4+0xfc>
 8000f92:	4631      	mov	r1, r6
 8000f94:	4630      	mov	r0, r6
 8000f96:	e708      	b.n	8000daa <__udivmoddi4+0xa2>
 8000f98:	4639      	mov	r1, r7
 8000f9a:	e6e6      	b.n	8000d6a <__udivmoddi4+0x62>
 8000f9c:	4610      	mov	r0, r2
 8000f9e:	e6fb      	b.n	8000d98 <__udivmoddi4+0x90>
 8000fa0:	4548      	cmp	r0, r9
 8000fa2:	d2a9      	bcs.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fa4:	ebb9 0802 	subs.w	r8, r9, r2
 8000fa8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fac:	3b01      	subs	r3, #1
 8000fae:	e7a3      	b.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fb0:	4645      	mov	r5, r8
 8000fb2:	e7ea      	b.n	8000f8a <__udivmoddi4+0x282>
 8000fb4:	462b      	mov	r3, r5
 8000fb6:	e794      	b.n	8000ee2 <__udivmoddi4+0x1da>
 8000fb8:	4640      	mov	r0, r8
 8000fba:	e7d1      	b.n	8000f60 <__udivmoddi4+0x258>
 8000fbc:	46d0      	mov	r8, sl
 8000fbe:	e77b      	b.n	8000eb8 <__udivmoddi4+0x1b0>
 8000fc0:	3d02      	subs	r5, #2
 8000fc2:	4462      	add	r2, ip
 8000fc4:	e732      	b.n	8000e2c <__udivmoddi4+0x124>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e70a      	b.n	8000de0 <__udivmoddi4+0xd8>
 8000fca:	4464      	add	r4, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e742      	b.n	8000e56 <__udivmoddi4+0x14e>

08000fd0 <__aeabi_idiv0>:
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop

08000fd4 <disable_interrupts>:
 */
#define ACC_BOARD_REF_FREQ 26000000


static inline void disable_interrupts(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fd8:	b672      	cpsid	i
}
 8000fda:	bf00      	nop
	__disable_irq();
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr

08000fe6 <enable_interrupts>:


static inline void enable_interrupts(void)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 8000fea:	b662      	cpsie	i
}
 8000fec:	bf00      	nop
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8000fee:	f3bf 8f6f 	isb	sy
}
 8000ff2:	bf00      	nop
	__enable_irq();
	__ISB();
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
	...

08001000 <acc_hal_integration_sensor_transfer>:
// Implementation of RSS HAL handlers
//----------------------------------------


static void acc_hal_integration_sensor_transfer(acc_sensor_id_t sensor_id, uint8_t *buffer, size_t buffer_size)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b088      	sub	sp, #32
 8001004:	af02      	add	r7, sp, #8
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	607a      	str	r2, [r7, #4]
	(void)sensor_id;  // Ignore parameter sensor_id

	const uint32_t SPI_TRANSMIT_RECEIVE_TIMEOUT = 5000;
 800100c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001010:	617b      	str	r3, [r7, #20]

	HAL_GPIO_WritePin(A111_CS_N_GPIO_Port, A111_CS_N_Pin, GPIO_PIN_RESET);
 8001012:	2200      	movs	r2, #0
 8001014:	2140      	movs	r1, #64	; 0x40
 8001016:	480b      	ldr	r0, [pc, #44]	; (8001044 <acc_hal_integration_sensor_transfer+0x44>)
 8001018:	f001 fc5c 	bl	80028d4 <HAL_GPIO_WritePin>

		// Enable interrupt again, the ISR will execute directly after this
		enable_interrupts();
	}
#else
	HAL_SPI_TransmitReceive(&A111_SPI_HANDLE, buffer, buffer, buffer_size, SPI_TRANSMIT_RECEIVE_TIMEOUT);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	b29a      	uxth	r2, r3
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	9300      	str	r3, [sp, #0]
 8001024:	4613      	mov	r3, r2
 8001026:	68ba      	ldr	r2, [r7, #8]
 8001028:	68b9      	ldr	r1, [r7, #8]
 800102a:	4807      	ldr	r0, [pc, #28]	; (8001048 <acc_hal_integration_sensor_transfer+0x48>)
 800102c:	f003 f851 	bl	80040d2 <HAL_SPI_TransmitReceive>
#endif

	HAL_GPIO_WritePin(A111_CS_N_GPIO_Port, A111_CS_N_Pin, GPIO_PIN_SET);
 8001030:	2201      	movs	r2, #1
 8001032:	2140      	movs	r1, #64	; 0x40
 8001034:	4803      	ldr	r0, [pc, #12]	; (8001044 <acc_hal_integration_sensor_transfer+0x44>)
 8001036:	f001 fc4d 	bl	80028d4 <HAL_GPIO_WritePin>
}
 800103a:	bf00      	nop
 800103c:	3718      	adds	r7, #24
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	48000400 	.word	0x48000400
 8001048:	20000384 	.word	0x20000384

0800104c <acc_hal_integration_sensor_power_on>:


static void acc_hal_integration_sensor_power_on(acc_sensor_id_t sensor_id)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
	(void)sensor_id;  // Ignore parameter sensor_id

	HAL_GPIO_WritePin(A111_ENABLE_GPIO_Port, A111_ENABLE_Pin, GPIO_PIN_SET);
 8001054:	2201      	movs	r2, #1
 8001056:	2120      	movs	r1, #32
 8001058:	4807      	ldr	r0, [pc, #28]	; (8001078 <acc_hal_integration_sensor_power_on+0x2c>)
 800105a:	f001 fc3b 	bl	80028d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A111_CS_N_GPIO_Port, A111_CS_N_Pin, GPIO_PIN_SET);
 800105e:	2201      	movs	r2, #1
 8001060:	2140      	movs	r1, #64	; 0x40
 8001062:	4805      	ldr	r0, [pc, #20]	; (8001078 <acc_hal_integration_sensor_power_on+0x2c>)
 8001064:	f001 fc36 	bl	80028d4 <HAL_GPIO_WritePin>

	// Wait 2 ms to make sure that the sensor crystal have time to stabilize
	HAL_Delay(2);
 8001068:	2002      	movs	r0, #2
 800106a:	f001 f93b 	bl	80022e4 <HAL_Delay>
}
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	48000400 	.word	0x48000400

0800107c <acc_hal_integration_sensor_power_off>:


static void acc_hal_integration_sensor_power_off(acc_sensor_id_t sensor_id)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
	(void)sensor_id;  // Ignore parameter sensor_id

	HAL_GPIO_WritePin(A111_CS_N_GPIO_Port, A111_CS_N_Pin, GPIO_PIN_RESET);
 8001084:	2200      	movs	r2, #0
 8001086:	2140      	movs	r1, #64	; 0x40
 8001088:	4807      	ldr	r0, [pc, #28]	; (80010a8 <acc_hal_integration_sensor_power_off+0x2c>)
 800108a:	f001 fc23 	bl	80028d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A111_ENABLE_GPIO_Port, A111_ENABLE_Pin, GPIO_PIN_RESET);
 800108e:	2200      	movs	r2, #0
 8001090:	2120      	movs	r1, #32
 8001092:	4805      	ldr	r0, [pc, #20]	; (80010a8 <acc_hal_integration_sensor_power_off+0x2c>)
 8001094:	f001 fc1e 	bl	80028d4 <HAL_GPIO_WritePin>

	// Wait after power off to leave the sensor in a known state
	// in case the application intends to enable the sensor directly
	HAL_Delay(2);
 8001098:	2002      	movs	r0, #2
 800109a:	f001 f923 	bl	80022e4 <HAL_Delay>
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	48000400 	.word	0x48000400

080010ac <acc_hal_integration_wait_for_sensor_interrupt>:


static bool acc_hal_integration_wait_for_sensor_interrupt(acc_sensor_id_t sensor_id, uint32_t timeout_ms)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
	(void)sensor_id; // Ignore parameter sensor_id

	const uint32_t wait_begin_ms = HAL_GetTick();
 80010b6:	f001 f909 	bl	80022cc <HAL_GetTick>
 80010ba:	60f8      	str	r0, [r7, #12]
	while ((HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) != GPIO_PIN_SET) &&
 80010bc:	e00d      	b.n	80010da <acc_hal_integration_wait_for_sensor_interrupt+0x2e>
	       (HAL_GetTick() - wait_begin_ms < timeout_ms))
	{
		// Wait for the GPIO interrupt
		disable_interrupts();
 80010be:	f7ff ff89 	bl	8000fd4 <disable_interrupts>
		// Check again so that IRQ did not occur
		if (HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) != GPIO_PIN_SET)
 80010c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ca:	f001 fbeb 	bl	80028a4 <HAL_GPIO_ReadPin>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d000      	beq.n	80010d6 <acc_hal_integration_wait_for_sensor_interrupt+0x2a>
		{
			__WFI();
 80010d4:	bf30      	wfi
		}

		// Enable interrupts again to allow pending interrupt to be handled
		enable_interrupts();
 80010d6:	f7ff ff86 	bl	8000fe6 <enable_interrupts>
	while ((HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) != GPIO_PIN_SET) &&
 80010da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e2:	f001 fbdf 	bl	80028a4 <HAL_GPIO_ReadPin>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d007      	beq.n	80010fc <acc_hal_integration_wait_for_sensor_interrupt+0x50>
	       (HAL_GetTick() - wait_begin_ms < timeout_ms))
 80010ec:	f001 f8ee 	bl	80022cc <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	1ad3      	subs	r3, r2, r3
	while ((HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) != GPIO_PIN_SET) &&
 80010f6:	683a      	ldr	r2, [r7, #0]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d8e0      	bhi.n	80010be <acc_hal_integration_wait_for_sensor_interrupt+0x12>
	}

	return HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) == GPIO_PIN_SET;
 80010fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001100:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001104:	f001 fbce 	bl	80028a4 <HAL_GPIO_ReadPin>
 8001108:	4603      	mov	r3, r0
 800110a:	2b01      	cmp	r3, #1
 800110c:	bf0c      	ite	eq
 800110e:	2301      	moveq	r3, #1
 8001110:	2300      	movne	r3, #0
 8001112:	b2db      	uxtb	r3, r3
}
 8001114:	4618      	mov	r0, r3
 8001116:	3710      	adds	r7, #16
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <acc_hal_integration_get_reference_frequency>:


static float acc_hal_integration_get_reference_frequency(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
	return ACC_BOARD_REF_FREQ;
 8001120:	4b04      	ldr	r3, [pc, #16]	; (8001134 <acc_hal_integration_get_reference_frequency+0x18>)
 8001122:	ee07 3a90 	vmov	s15, r3
}
 8001126:	eeb0 0a67 	vmov.f32	s0, s15
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	4bc65d40 	.word	0x4bc65d40

08001138 <acc_hal_integration_get_implementation>:
	.optimization.transfer16 = NULL,
};


const acc_hal_t *acc_hal_integration_get_implementation(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
	return &hal;
 800113c:	4b02      	ldr	r3, [pc, #8]	; (8001148 <acc_hal_integration_get_implementation+0x10>)
}
 800113e:	4618      	mov	r0, r3
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	08012f78 	.word	0x08012f78

0800114c <acc_integration_log>:

#define LOG_FORMAT "%02u:%02u:%02u.%03u (%c) (%s) %s\n"


void acc_integration_log(acc_log_level_t level, const char *module, const char *format, ...)
{
 800114c:	b40c      	push	{r2, r3}
 800114e:	b580      	push	{r7, lr}
 8001150:	b0b4      	sub	sp, #208	; 0xd0
 8001152:	af04      	add	r7, sp, #16
 8001154:	4603      	mov	r3, r0
 8001156:	6039      	str	r1, [r7, #0]
 8001158:	71fb      	strb	r3, [r7, #7]
	char    log_buffer[LOG_BUFFER_MAX_SIZE];
	va_list ap;

	va_start(ap, format);
 800115a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800115e:	60bb      	str	r3, [r7, #8]

	int ret = vsnprintf(log_buffer, LOG_BUFFER_MAX_SIZE, format, ap);
 8001160:	f107 000c 	add.w	r0, r7, #12
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800116a:	2196      	movs	r1, #150	; 0x96
 800116c:	f00d fb24 	bl	800e7b8 <vsniprintf>
 8001170:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc

	if (ret >= LOG_BUFFER_MAX_SIZE)
 8001174:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001178:	2b95      	cmp	r3, #149	; 0x95
 800117a:	dd0b      	ble.n	8001194 <acc_integration_log+0x48>
	{
		log_buffer[LOG_BUFFER_MAX_SIZE - 4] = '.';
 800117c:	232e      	movs	r3, #46	; 0x2e
 800117e:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
		log_buffer[LOG_BUFFER_MAX_SIZE - 3] = '.';
 8001182:	232e      	movs	r3, #46	; 0x2e
 8001184:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		log_buffer[LOG_BUFFER_MAX_SIZE - 2] = '.';
 8001188:	232e      	movs	r3, #46	; 0x2e
 800118a:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
		log_buffer[LOG_BUFFER_MAX_SIZE - 1] = 0;
 800118e:	2300      	movs	r3, #0
 8001190:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
	}

	uint32_t time_ms = acc_integration_get_time();
 8001194:	f000 f876 	bl	8001284 <acc_integration_get_time>
 8001198:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
	char     level_ch;

	unsigned int timestamp    = time_ms;
 800119c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80011a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	unsigned int hours        = timestamp / 1000 / 60 / 60;
 80011a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80011a8:	4a2f      	ldr	r2, [pc, #188]	; (8001268 <acc_integration_log+0x11c>)
 80011aa:	fba2 2303 	umull	r2, r3, r2, r3
 80011ae:	0d5b      	lsrs	r3, r3, #21
 80011b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	unsigned int minutes      = timestamp / 1000 / 60 % 60;
 80011b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80011b8:	4a2c      	ldr	r2, [pc, #176]	; (800126c <acc_integration_log+0x120>)
 80011ba:	fba2 2303 	umull	r2, r3, r2, r3
 80011be:	0b9a      	lsrs	r2, r3, #14
 80011c0:	4b2b      	ldr	r3, [pc, #172]	; (8001270 <acc_integration_log+0x124>)
 80011c2:	fba3 1302 	umull	r1, r3, r3, r2
 80011c6:	0959      	lsrs	r1, r3, #5
 80011c8:	460b      	mov	r3, r1
 80011ca:	011b      	lsls	r3, r3, #4
 80011cc:	1a5b      	subs	r3, r3, r1
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	unsigned int seconds      = timestamp / 1000 % 60;
 80011d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80011da:	4a26      	ldr	r2, [pc, #152]	; (8001274 <acc_integration_log+0x128>)
 80011dc:	fba2 2303 	umull	r2, r3, r2, r3
 80011e0:	099a      	lsrs	r2, r3, #6
 80011e2:	4b23      	ldr	r3, [pc, #140]	; (8001270 <acc_integration_log+0x124>)
 80011e4:	fba3 1302 	umull	r1, r3, r3, r2
 80011e8:	0959      	lsrs	r1, r3, #5
 80011ea:	460b      	mov	r3, r1
 80011ec:	011b      	lsls	r3, r3, #4
 80011ee:	1a5b      	subs	r3, r3, r1
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	1ad3      	subs	r3, r2, r3
 80011f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	unsigned int milliseconds = timestamp % 1000;
 80011f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80011fc:	4a1d      	ldr	r2, [pc, #116]	; (8001274 <acc_integration_log+0x128>)
 80011fe:	fba2 1203 	umull	r1, r2, r2, r3
 8001202:	0992      	lsrs	r2, r2, #6
 8001204:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001208:	fb01 f202 	mul.w	r2, r1, r2
 800120c:	1a9b      	subs	r3, r3, r2
 800120e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	level_ch = (level <= ACC_LOG_LEVEL_DEBUG) ? "EWIVD"[level] : '?';
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	2b04      	cmp	r3, #4
 8001216:	d803      	bhi.n	8001220 <acc_integration_log+0xd4>
 8001218:	79fb      	ldrb	r3, [r7, #7]
 800121a:	4a17      	ldr	r2, [pc, #92]	; (8001278 <acc_integration_log+0x12c>)
 800121c:	5cd3      	ldrb	r3, [r2, r3]
 800121e:	e000      	b.n	8001222 <acc_integration_log+0xd6>
 8001220:	233f      	movs	r3, #63	; 0x3f
 8001222:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

	printf(LOG_FORMAT, hours, minutes, seconds, milliseconds, level_ch, module, log_buffer);
 8001226:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800122a:	f107 020c 	add.w	r2, r7, #12
 800122e:	9203      	str	r2, [sp, #12]
 8001230:	683a      	ldr	r2, [r7, #0]
 8001232:	9202      	str	r2, [sp, #8]
 8001234:	9301      	str	r3, [sp, #4]
 8001236:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800123a:	9300      	str	r3, [sp, #0]
 800123c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001240:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001244:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8001248:	480c      	ldr	r0, [pc, #48]	; (800127c <acc_integration_log+0x130>)
 800124a:	f00d f9d1 	bl	800e5f0 <iprintf>

	fflush(stdout);
 800124e:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <acc_integration_log+0x134>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	4618      	mov	r0, r3
 8001256:	f00d f907 	bl	800e468 <fflush>

	va_end(ap);
}
 800125a:	bf00      	nop
 800125c:	37c0      	adds	r7, #192	; 0xc0
 800125e:	46bd      	mov	sp, r7
 8001260:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001264:	b002      	add	sp, #8
 8001266:	4770      	bx	lr
 8001268:	95217cb1 	.word	0x95217cb1
 800126c:	45e7b273 	.word	0x45e7b273
 8001270:	88888889 	.word	0x88888889
 8001274:	10624dd3 	.word	0x10624dd3
 8001278:	08012eac 	.word	0x08012eac
 800127c:	08012e88 	.word	0x08012e88
 8001280:	200001e4 	.word	0x200001e4

08001284 <acc_integration_get_time>:
	HAL_Delay(time_msec);
}


uint32_t acc_integration_get_time(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8001288:	f001 f820 	bl	80022cc <HAL_GetTick>
 800128c:	4603      	mov	r3, r0
}
 800128e:	4618      	mov	r0, r3
 8001290:	bd80      	pop	{r7, pc}
 8001292:	0000      	movs	r0, r0
 8001294:	0000      	movs	r0, r0
	...

08001298 <water_flow>:
#include <stdlib.h>
#include <stdbool.h>
#include <math.h>
#include "estimated_water_speed.h"

uint16_t water_flow(double higth, double radius, double K, double S, double n, uint16_t number_peaks) {
 8001298:	b5b0      	push	{r4, r5, r7, lr}
 800129a:	b094      	sub	sp, #80	; 0x50
 800129c:	af00      	add	r7, sp, #0
 800129e:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 80012a2:	ed87 1b08 	vstr	d1, [r7, #32]
 80012a6:	ed87 2b06 	vstr	d2, [r7, #24]
 80012aa:	ed87 3b04 	vstr	d3, [r7, #16]
 80012ae:	ed87 4b02 	vstr	d4, [r7, #8]
 80012b2:	4603      	mov	r3, r0
 80012b4:	80fb      	strh	r3, [r7, #6]
	double theta, R, A, Q;

    if (higth == 2 * radius || number_peaks == 1) { // Full pipe
 80012b6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80012ba:	4602      	mov	r2, r0
 80012bc:	460b      	mov	r3, r1
 80012be:	f7ff f85d 	bl	800037c <__adddf3>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80012ca:	f7ff fc75 	bl	8000bb8 <__aeabi_dcmpeq>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d102      	bne.n	80012da <water_flow+0x42>
 80012d4:	88fb      	ldrh	r3, [r7, #6]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d11d      	bne.n	8001316 <water_flow+0x7e>
        R = radius / 2; // Hydraulic radius
 80012da:	f04f 0200 	mov.w	r2, #0
 80012de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012e2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80012e6:	f7ff fb29 	bl	800093c <__aeabi_ddiv>
 80012ea:	4602      	mov	r2, r0
 80012ec:	460b      	mov	r3, r1
 80012ee:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
        A = M_PI * pow(radius, 2); // Area of the pipe
 80012f2:	ed9f 1b65 	vldr	d1, [pc, #404]	; 8001488 <water_flow+0x1f0>
 80012f6:	ed97 0b08 	vldr	d0, [r7, #32]
 80012fa:	f00f fa55 	bl	80107a8 <pow>
 80012fe:	ec51 0b10 	vmov	r0, r1, d0
 8001302:	a365      	add	r3, pc, #404	; (adr r3, 8001498 <water_flow+0x200>)
 8001304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001308:	f7ff f9ee 	bl	80006e8 <__aeabi_dmul>
 800130c:	4602      	mov	r2, r0
 800130e:	460b      	mov	r3, r1
 8001310:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8001314:	e07d      	b.n	8001412 <water_flow+0x17a>
    } 
    else {
        theta = 2 * acos((radius - higth) / radius);
 8001316:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800131a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800131e:	f7ff f82b 	bl	8000378 <__aeabi_dsub>
 8001322:	4602      	mov	r2, r0
 8001324:	460b      	mov	r3, r1
 8001326:	4610      	mov	r0, r2
 8001328:	4619      	mov	r1, r3
 800132a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800132e:	f7ff fb05 	bl	800093c <__aeabi_ddiv>
 8001332:	4602      	mov	r2, r0
 8001334:	460b      	mov	r3, r1
 8001336:	ec43 2b17 	vmov	d7, r2, r3
 800133a:	eeb0 0a47 	vmov.f32	s0, s14
 800133e:	eef0 0a67 	vmov.f32	s1, s15
 8001342:	f00f f9fd 	bl	8010740 <acos>
 8001346:	ec51 0b10 	vmov	r0, r1, d0
 800134a:	4602      	mov	r2, r0
 800134c:	460b      	mov	r3, r1
 800134e:	f7ff f815 	bl	800037c <__adddf3>
 8001352:	4602      	mov	r2, r0
 8001354:	460b      	mov	r3, r1
 8001356:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
        R = (pow(radius, 2) * ((theta - sin(theta)) / 2)) / (radius * theta); // Hydraulic radius
 800135a:	ed9f 1b4b 	vldr	d1, [pc, #300]	; 8001488 <water_flow+0x1f0>
 800135e:	ed97 0b08 	vldr	d0, [r7, #32]
 8001362:	f00f fa21 	bl	80107a8 <pow>
 8001366:	ec55 4b10 	vmov	r4, r5, d0
 800136a:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 800136e:	f00f fac3 	bl	80108f8 <sin>
 8001372:	ec53 2b10 	vmov	r2, r3, d0
 8001376:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800137a:	f7fe fffd 	bl	8000378 <__aeabi_dsub>
 800137e:	4602      	mov	r2, r0
 8001380:	460b      	mov	r3, r1
 8001382:	4610      	mov	r0, r2
 8001384:	4619      	mov	r1, r3
 8001386:	f04f 0200 	mov.w	r2, #0
 800138a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800138e:	f7ff fad5 	bl	800093c <__aeabi_ddiv>
 8001392:	4602      	mov	r2, r0
 8001394:	460b      	mov	r3, r1
 8001396:	4620      	mov	r0, r4
 8001398:	4629      	mov	r1, r5
 800139a:	f7ff f9a5 	bl	80006e8 <__aeabi_dmul>
 800139e:	4602      	mov	r2, r0
 80013a0:	460b      	mov	r3, r1
 80013a2:	4614      	mov	r4, r2
 80013a4:	461d      	mov	r5, r3
 80013a6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80013aa:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80013ae:	f7ff f99b 	bl	80006e8 <__aeabi_dmul>
 80013b2:	4602      	mov	r2, r0
 80013b4:	460b      	mov	r3, r1
 80013b6:	4620      	mov	r0, r4
 80013b8:	4629      	mov	r1, r5
 80013ba:	f7ff fabf 	bl	800093c <__aeabi_ddiv>
 80013be:	4602      	mov	r2, r0
 80013c0:	460b      	mov	r3, r1
 80013c2:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
        A = pow(radius, 2) * ((theta - sin(theta)) / 2);
 80013c6:	ed9f 1b30 	vldr	d1, [pc, #192]	; 8001488 <water_flow+0x1f0>
 80013ca:	ed97 0b08 	vldr	d0, [r7, #32]
 80013ce:	f00f f9eb 	bl	80107a8 <pow>
 80013d2:	ec55 4b10 	vmov	r4, r5, d0
 80013d6:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 80013da:	f00f fa8d 	bl	80108f8 <sin>
 80013de:	ec53 2b10 	vmov	r2, r3, d0
 80013e2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80013e6:	f7fe ffc7 	bl	8000378 <__aeabi_dsub>
 80013ea:	4602      	mov	r2, r0
 80013ec:	460b      	mov	r3, r1
 80013ee:	4610      	mov	r0, r2
 80013f0:	4619      	mov	r1, r3
 80013f2:	f04f 0200 	mov.w	r2, #0
 80013f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013fa:	f7ff fa9f 	bl	800093c <__aeabi_ddiv>
 80013fe:	4602      	mov	r2, r0
 8001400:	460b      	mov	r3, r1
 8001402:	4620      	mov	r0, r4
 8001404:	4629      	mov	r1, r5
 8001406:	f7ff f96f 	bl	80006e8 <__aeabi_dmul>
 800140a:	4602      	mov	r2, r0
 800140c:	460b      	mov	r3, r1
 800140e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }

    Q = (K * A * pow(R, 2.0/3.0) * sqrt(S)) / n; // Flow rate in m^3/s
 8001412:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001416:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800141a:	f7ff f965 	bl	80006e8 <__aeabi_dmul>
 800141e:	4602      	mov	r2, r0
 8001420:	460b      	mov	r3, r1
 8001422:	4614      	mov	r4, r2
 8001424:	461d      	mov	r5, r3
 8001426:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8001490 <water_flow+0x1f8>
 800142a:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 800142e:	f00f f9bb 	bl	80107a8 <pow>
 8001432:	ec53 2b10 	vmov	r2, r3, d0
 8001436:	4620      	mov	r0, r4
 8001438:	4629      	mov	r1, r5
 800143a:	f7ff f955 	bl	80006e8 <__aeabi_dmul>
 800143e:	4602      	mov	r2, r0
 8001440:	460b      	mov	r3, r1
 8001442:	4614      	mov	r4, r2
 8001444:	461d      	mov	r5, r3
 8001446:	ed97 0b04 	vldr	d0, [r7, #16]
 800144a:	f00f fa1d 	bl	8010888 <sqrt>
 800144e:	ec53 2b10 	vmov	r2, r3, d0
 8001452:	4620      	mov	r0, r4
 8001454:	4629      	mov	r1, r5
 8001456:	f7ff f947 	bl	80006e8 <__aeabi_dmul>
 800145a:	4602      	mov	r2, r0
 800145c:	460b      	mov	r3, r1
 800145e:	4610      	mov	r0, r2
 8001460:	4619      	mov	r1, r3
 8001462:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001466:	f7ff fa69 	bl	800093c <__aeabi_ddiv>
 800146a:	4602      	mov	r2, r0
 800146c:	460b      	mov	r3, r1
 800146e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    return Q;
 8001472:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001476:	f7ff fc0f 	bl	8000c98 <__aeabi_d2uiz>
 800147a:	4603      	mov	r3, r0
 800147c:	b29b      	uxth	r3, r3
}
 800147e:	4618      	mov	r0, r3
 8001480:	3750      	adds	r7, #80	; 0x50
 8001482:	46bd      	mov	sp, r7
 8001484:	bdb0      	pop	{r4, r5, r7, pc}
 8001486:	bf00      	nop
 8001488:	00000000 	.word	0x00000000
 800148c:	40000000 	.word	0x40000000
 8001490:	55555555 	.word	0x55555555
 8001494:	3fe55555 	.word	0x3fe55555
 8001498:	54442d18 	.word	0x54442d18
 800149c:	400921fb 	.word	0x400921fb

080014a0 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	60b9      	str	r1, [r7, #8]
 80014aa:	607a      	str	r2, [r7, #4]
	(void)file;
	HAL_UART_Transmit(&huart2, ptr, len, 0xFFFF);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	b29a      	uxth	r2, r3
 80014b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014b4:	68b9      	ldr	r1, [r7, #8]
 80014b6:	4804      	ldr	r0, [pc, #16]	; (80014c8 <_write+0x28>)
 80014b8:	f003 f9e0 	bl	800487c <HAL_UART_Transmit>
	return len;
 80014bc:	687b      	ldr	r3, [r7, #4]
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3710      	adds	r7, #16
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	200003e8 	.word	0x200003e8

080014cc <update_configuration.1>:
{
  /* USER CODE BEGIN 1 */


	void update_configuration(acc_service_configuration_t envelope_configuration, float start_m, float length_m)
	{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	ed87 0a02 	vstr	s0, [r7, #8]
 80014d8:	edc7 0a01 	vstr	s1, [r7, #4]
 80014dc:	f8c7 c000 	str.w	ip, [r7]

		acc_service_profile_set(envelope_configuration, ACC_SERVICE_PROFILE_1);
 80014e0:	2101      	movs	r1, #1
 80014e2:	68f8      	ldr	r0, [r7, #12]
 80014e4:	f004 f93a 	bl	800575c <acc_service_profile_set>
		acc_service_requested_start_set(envelope_configuration, start_m);
 80014e8:	ed97 0a02 	vldr	s0, [r7, #8]
 80014ec:	68f8      	ldr	r0, [r7, #12]
 80014ee:	f003 ffb1 	bl	8005454 <acc_service_requested_start_set>
		acc_service_requested_length_set(envelope_configuration, length_m);
 80014f2:	ed97 0a01 	vldr	s0, [r7, #4]
 80014f6:	68f8      	ldr	r0, [r7, #12]
 80014f8:	f003 ffba 	bl	8005470 <acc_service_requested_length_set>
	}
 80014fc:	bf00      	nop
 80014fe:	3710      	adds	r7, #16
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <main>:
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
int main(void)
 800150a:	f107 0310 	add.w	r3, r7, #16
 800150e:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001510:	f000 fe6c 	bl	80021ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001514:	f000 fa84 	bl	8001a20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001518:	f000 fb42 	bl	8001ba0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800151c:	f000 fb10 	bl	8001b40 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8001520:	f000 fad0 	bl	8001ac4 <MX_SPI3_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_Delay(5000);
 8001524:	f241 3088 	movw	r0, #5000	; 0x1388
 8001528:	f000 fedc 	bl	80022e4 <HAL_Delay>
	  acc_example_service_envelope(0, NULL);
 800152c:	1d3b      	adds	r3, r7, #4
 800152e:	469c      	mov	ip, r3
 8001530:	2100      	movs	r1, #0
 8001532:	2000      	movs	r0, #0
 8001534:	f000 f828 	bl	8001588 <acc_example_service_envelope.0>
	  HAL_Delay(5000);
 8001538:	e7f4      	b.n	8001524 <main+0x20>
	...

0800153c <print_data.2>:
	{
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0
 8001542:	60f8      	str	r0, [r7, #12]
 8001544:	460b      	mov	r3, r1
 8001546:	817b      	strh	r3, [r7, #10]
 8001548:	f8c7 c004 	str.w	ip, [r7, #4]
		for (uint16_t i = 0; i < data_length; i++)
 800154c:	2300      	movs	r3, #0
 800154e:	82fb      	strh	r3, [r7, #22]
 8001550:	e00b      	b.n	800156a <print_data.2+0x2e>
			printf("%6u", (unsigned int)(data[i]));
 8001552:	8afb      	ldrh	r3, [r7, #22]
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	68fa      	ldr	r2, [r7, #12]
 8001558:	4413      	add	r3, r2
 800155a:	881b      	ldrh	r3, [r3, #0]
 800155c:	4619      	mov	r1, r3
 800155e:	4808      	ldr	r0, [pc, #32]	; (8001580 <print_data.2+0x44>)
 8001560:	f00d f846 	bl	800e5f0 <iprintf>
		for (uint16_t i = 0; i < data_length; i++)
 8001564:	8afb      	ldrh	r3, [r7, #22]
 8001566:	3301      	adds	r3, #1
 8001568:	82fb      	strh	r3, [r7, #22]
 800156a:	8afa      	ldrh	r2, [r7, #22]
 800156c:	897b      	ldrh	r3, [r7, #10]
 800156e:	429a      	cmp	r2, r3
 8001570:	d3ef      	bcc.n	8001552 <print_data.2+0x16>
		printf("\n");
 8001572:	200a      	movs	r0, #10
 8001574:	f00d f84e 	bl	800e614 <putchar>
	}
 8001578:	bf00      	nop
 800157a:	3718      	adds	r7, #24
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	08012eb4 	.word	0x08012eb4
 8001584:	00000000 	.word	0x00000000

08001588 <acc_example_service_envelope.0>:
	{
 8001588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800158c:	b0ae      	sub	sp, #184	; 0xb8
 800158e:	af00      	add	r7, sp, #0
 8001590:	60f8      	str	r0, [r7, #12]
 8001592:	60b9      	str	r1, [r7, #8]
 8001594:	4666      	mov	r6, ip
 8001596:	f8c7 c004 	str.w	ip, [r7, #4]
 800159a:	466b      	mov	r3, sp
 800159c:	469a      	mov	sl, r3
		float start_m  = 0.2f;
 800159e:	4b52      	ldr	r3, [pc, #328]	; (80016e8 <acc_example_service_envelope.0+0x160>)
 80015a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		float length_m = 0.5f;
 80015a4:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80015a8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		const acc_hal_t *hal = acc_hal_integration_get_implementation();
 80015ac:	f7ff fdc4 	bl	8001138 <acc_hal_integration_get_implementation>
 80015b0:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
		if (!acc_rss_activate(hal))
 80015b4:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80015b8:	f003 feb8 	bl	800532c <acc_rss_activate>
 80015bc:	4603      	mov	r3, r0
 80015be:	f083 0301 	eor.w	r3, r3, #1
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d004      	beq.n	80015d2 <acc_example_service_envelope.0+0x4a>
			printf("acc_rss_activate() failed\n");
 80015c8:	4848      	ldr	r0, [pc, #288]	; (80016ec <acc_example_service_envelope.0+0x164>)
 80015ca:	f00d f87f 	bl	800e6cc <puts>
			return EXIT_FAILURE;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e202      	b.n	80019d8 <acc_example_service_envelope.0+0x450>
		acc_service_configuration_t envelope_configuration = acc_service_envelope_configuration_create();
 80015d2:	f004 fa05 	bl	80059e0 <acc_service_envelope_configuration_create>
 80015d6:	4603      	mov	r3, r0
 80015d8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (envelope_configuration == NULL)
 80015da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d106      	bne.n	80015ee <acc_example_service_envelope.0+0x66>
			printf("acc_service_envelope_configuration_create() failed\n");
 80015e0:	4843      	ldr	r0, [pc, #268]	; (80016f0 <acc_example_service_envelope.0+0x168>)
 80015e2:	f00d f873 	bl	800e6cc <puts>
			acc_rss_deactivate();
 80015e6:	f003 fedf 	bl	80053a8 <acc_rss_deactivate>
			return EXIT_FAILURE;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e1f4      	b.n	80019d8 <acc_example_service_envelope.0+0x450>
		update_configuration(envelope_configuration, start_m, length_m);
 80015ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015f0:	46b4      	mov	ip, r6
 80015f2:	edd7 0a25 	vldr	s1, [r7, #148]	; 0x94
 80015f6:	ed97 0a26 	vldr	s0, [r7, #152]	; 0x98
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7ff ff66 	bl	80014cc <update_configuration.1>
		acc_service_handle_t handle = acc_service_create(envelope_configuration);
 8001600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001602:	4618      	mov	r0, r3
 8001604:	f004 fb0c 	bl	8005c20 <acc_service_create>
 8001608:	4603      	mov	r3, r0
 800160a:	627b      	str	r3, [r7, #36]	; 0x24
		if (handle == NULL)
 800160c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160e:	2b00      	cmp	r3, #0
 8001610:	d10b      	bne.n	800162a <acc_example_service_envelope.0+0xa2>
			printf("acc_service_create() failed\n");
 8001612:	4838      	ldr	r0, [pc, #224]	; (80016f4 <acc_example_service_envelope.0+0x16c>)
 8001614:	f00d f85a 	bl	800e6cc <puts>
			acc_service_envelope_configuration_destroy(&envelope_configuration);
 8001618:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800161c:	4618      	mov	r0, r3
 800161e:	f004 fa6d 	bl	8005afc <acc_service_envelope_configuration_destroy>
			acc_rss_deactivate();
 8001622:	f003 fec1 	bl	80053a8 <acc_rss_deactivate>
			return EXIT_FAILURE;
 8001626:	2301      	movs	r3, #1
 8001628:	e1d6      	b.n	80019d8 <acc_example_service_envelope.0+0x450>
		acc_service_envelope_configuration_destroy(&envelope_configuration);
 800162a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800162e:	4618      	mov	r0, r3
 8001630:	f004 fa64 	bl	8005afc <acc_service_envelope_configuration_destroy>
		acc_service_envelope_metadata_t envelope_metadata = { 0 };
 8001634:	f107 0314 	add.w	r3, r7, #20
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	609a      	str	r2, [r3, #8]
 8001640:	60da      	str	r2, [r3, #12]
		acc_service_envelope_get_metadata(handle, &envelope_metadata);
 8001642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001644:	f107 0214 	add.w	r2, r7, #20
 8001648:	4611      	mov	r1, r2
 800164a:	4618      	mov	r0, r3
 800164c:	f004 fa68 	bl	8005b20 <acc_service_envelope_get_metadata>
		if (!acc_service_activate(handle))
 8001650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001652:	4618      	mov	r0, r3
 8001654:	f003 ff60 	bl	8005518 <acc_service_activate>
 8001658:	4603      	mov	r3, r0
 800165a:	f083 0301 	eor.w	r3, r3, #1
 800165e:	b2db      	uxtb	r3, r3
 8001660:	2b00      	cmp	r3, #0
 8001662:	d00b      	beq.n	800167c <acc_example_service_envelope.0+0xf4>
			printf("acc_service_activate() failed\n");
 8001664:	4824      	ldr	r0, [pc, #144]	; (80016f8 <acc_example_service_envelope.0+0x170>)
 8001666:	f00d f831 	bl	800e6cc <puts>
			acc_service_destroy(&handle);
 800166a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800166e:	4618      	mov	r0, r3
 8001670:	f004 fb4a 	bl	8005d08 <acc_service_destroy>
			acc_rss_deactivate();
 8001674:	f003 fe98 	bl	80053a8 <acc_rss_deactivate>
			return EXIT_FAILURE;
 8001678:	2301      	movs	r3, #1
 800167a:	e1ad      	b.n	80019d8 <acc_example_service_envelope.0+0x450>
		bool                               success    = true;
 800167c:	2301      	movs	r3, #1
 800167e:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
		const int                          iterations = 5;
 8001682:	2305      	movs	r3, #5
 8001684:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		uint16_t                           data[envelope_metadata.data_length];
 8001688:	8bb9      	ldrh	r1, [r7, #28]
 800168a:	460b      	mov	r3, r1
 800168c:	3b01      	subs	r3, #1
 800168e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001692:	b28b      	uxth	r3, r1
 8001694:	2200      	movs	r2, #0
 8001696:	4698      	mov	r8, r3
 8001698:	4691      	mov	r9, r2
 800169a:	f04f 0200 	mov.w	r2, #0
 800169e:	f04f 0300 	mov.w	r3, #0
 80016a2:	ea4f 1309 	mov.w	r3, r9, lsl #4
 80016a6:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 80016aa:	ea4f 1208 	mov.w	r2, r8, lsl #4
 80016ae:	b28b      	uxth	r3, r1
 80016b0:	2200      	movs	r2, #0
 80016b2:	461c      	mov	r4, r3
 80016b4:	4615      	mov	r5, r2
 80016b6:	f04f 0200 	mov.w	r2, #0
 80016ba:	f04f 0300 	mov.w	r3, #0
 80016be:	012b      	lsls	r3, r5, #4
 80016c0:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80016c4:	0122      	lsls	r2, r4, #4
 80016c6:	460b      	mov	r3, r1
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	3307      	adds	r3, #7
 80016cc:	08db      	lsrs	r3, r3, #3
 80016ce:	00db      	lsls	r3, r3, #3
 80016d0:	ebad 0d03 	sub.w	sp, sp, r3
 80016d4:	466b      	mov	r3, sp
 80016d6:	3301      	adds	r3, #1
 80016d8:	085b      	lsrs	r3, r3, #1
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		for (int i = 0; i < iterations; i++)
 80016e0:	2300      	movs	r3, #0
 80016e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80016e6:	e155      	b.n	8001994 <acc_example_service_envelope.0+0x40c>
 80016e8:	3e4ccccd 	.word	0x3e4ccccd
 80016ec:	08012eb8 	.word	0x08012eb8
 80016f0:	08012ed4 	.word	0x08012ed4
 80016f4:	08012f08 	.word	0x08012f08
 80016f8:	08012f24 	.word	0x08012f24
 80016fc:	42c80000 	.word	0x42c80000
			success = acc_service_envelope_get_next(handle, data, envelope_metadata.data_length, &result_info);
 8001700:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001702:	8bba      	ldrh	r2, [r7, #28]
 8001704:	f107 0310 	add.w	r3, r7, #16
 8001708:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800170c:	f004 fa2a 	bl	8005b64 <acc_service_envelope_get_next>
 8001710:	4603      	mov	r3, r0
 8001712:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
			if (!success)
 8001716:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800171a:	f083 0301 	eor.w	r3, r3, #1
 800171e:	b2db      	uxtb	r3, r3
 8001720:	2b00      	cmp	r3, #0
 8001722:	f040 813f 	bne.w	80019a4 <acc_example_service_envelope.0+0x41c>
			int* peaks = mutliple_peak_detection(data, envelope_metadata.data_length);
 8001726:	8bbb      	ldrh	r3, [r7, #28]
 8001728:	4619      	mov	r1, r3
 800172a:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800172e:	f000 facf 	bl	8001cd0 <mutliple_peak_detection>
 8001732:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
			print_data(data, envelope_metadata.data_length);
 8001736:	8bbb      	ldrh	r3, [r7, #28]
 8001738:	46b4      	mov	ip, r6
 800173a:	4619      	mov	r1, r3
 800173c:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8001740:	f7ff fefc 	bl	800153c <print_data.2>
			double oldMin = 0;
 8001744:	f04f 0200 	mov.w	r2, #0
 8001748:	f04f 0300 	mov.w	r3, #0
 800174c:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
			double oldMax = envelope_metadata.data_length;
 8001750:	8bbb      	ldrh	r3, [r7, #28]
 8001752:	4618      	mov	r0, r3
 8001754:	f7fe ff4e 	bl	80005f4 <__aeabi_ui2d>
 8001758:	4602      	mov	r2, r0
 800175a:	460b      	mov	r3, r1
 800175c:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
			double newMin = start_m *100;
 8001760:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8001764:	ed1f 7a1b 	vldr	s14, [pc, #-108]	; 80016fc <acc_example_service_envelope.0+0x174>
 8001768:	ee67 7a87 	vmul.f32	s15, s15, s14
 800176c:	ee17 0a90 	vmov	r0, s15
 8001770:	f7fe ff62 	bl	8000638 <__aeabi_f2d>
 8001774:	4602      	mov	r2, r0
 8001776:	460b      	mov	r3, r1
 8001778:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			double newMax = (start_m + length_m)*100;
 800177c:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8001780:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8001784:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001788:	ed1f 7a24 	vldr	s14, [pc, #-144]	; 80016fc <acc_example_service_envelope.0+0x174>
 800178c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001790:	ee17 0a90 	vmov	r0, s15
 8001794:	f7fe ff50 	bl	8000638 <__aeabi_f2d>
 8001798:	4602      	mov	r2, r0
 800179a:	460b      	mov	r3, r1
 800179c:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
			double radius = 6.5; // cm
 80017a0:	f04f 0200 	mov.w	r2, #0
 80017a4:	4b96      	ldr	r3, [pc, #600]	; (8001a00 <acc_example_service_envelope.0+0x478>)
 80017a6:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
			double peak1 = (((peaks[0] - oldMin) / (oldMax - oldMin)) * (newMax - newMin) + newMin);
 80017aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7fe ff2f 	bl	8000614 <__aeabi_i2d>
 80017b6:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80017ba:	f7fe fddd 	bl	8000378 <__aeabi_dsub>
 80017be:	4602      	mov	r2, r0
 80017c0:	460b      	mov	r3, r1
 80017c2:	4614      	mov	r4, r2
 80017c4:	461d      	mov	r5, r3
 80017c6:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80017ca:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80017ce:	f7fe fdd3 	bl	8000378 <__aeabi_dsub>
 80017d2:	4602      	mov	r2, r0
 80017d4:	460b      	mov	r3, r1
 80017d6:	4620      	mov	r0, r4
 80017d8:	4629      	mov	r1, r5
 80017da:	f7ff f8af 	bl	800093c <__aeabi_ddiv>
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	4614      	mov	r4, r2
 80017e4:	461d      	mov	r5, r3
 80017e6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80017ea:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80017ee:	f7fe fdc3 	bl	8000378 <__aeabi_dsub>
 80017f2:	4602      	mov	r2, r0
 80017f4:	460b      	mov	r3, r1
 80017f6:	4620      	mov	r0, r4
 80017f8:	4629      	mov	r1, r5
 80017fa:	f7fe ff75 	bl	80006e8 <__aeabi_dmul>
 80017fe:	4602      	mov	r2, r0
 8001800:	460b      	mov	r3, r1
 8001802:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001806:	f7fe fdb9 	bl	800037c <__adddf3>
 800180a:	4602      	mov	r2, r0
 800180c:	460b      	mov	r3, r1
 800180e:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
			double peak2 = (((peaks[1] - oldMin) / (oldMax - oldMin)) * (newMax - newMin) + newMin);
 8001812:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001816:	3304      	adds	r3, #4
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4618      	mov	r0, r3
 800181c:	f7fe fefa 	bl	8000614 <__aeabi_i2d>
 8001820:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001824:	f7fe fda8 	bl	8000378 <__aeabi_dsub>
 8001828:	4602      	mov	r2, r0
 800182a:	460b      	mov	r3, r1
 800182c:	4614      	mov	r4, r2
 800182e:	461d      	mov	r5, r3
 8001830:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001834:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001838:	f7fe fd9e 	bl	8000378 <__aeabi_dsub>
 800183c:	4602      	mov	r2, r0
 800183e:	460b      	mov	r3, r1
 8001840:	4620      	mov	r0, r4
 8001842:	4629      	mov	r1, r5
 8001844:	f7ff f87a 	bl	800093c <__aeabi_ddiv>
 8001848:	4602      	mov	r2, r0
 800184a:	460b      	mov	r3, r1
 800184c:	4614      	mov	r4, r2
 800184e:	461d      	mov	r5, r3
 8001850:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001854:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001858:	f7fe fd8e 	bl	8000378 <__aeabi_dsub>
 800185c:	4602      	mov	r2, r0
 800185e:	460b      	mov	r3, r1
 8001860:	4620      	mov	r0, r4
 8001862:	4629      	mov	r1, r5
 8001864:	f7fe ff40 	bl	80006e8 <__aeabi_dmul>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001870:	f7fe fd84 	bl	800037c <__adddf3>
 8001874:	4602      	mov	r2, r0
 8001876:	460b      	mov	r3, r1
 8001878:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
			printf("Peaks ");
 800187c:	4861      	ldr	r0, [pc, #388]	; (8001a04 <acc_example_service_envelope.0+0x47c>)
 800187e:	f00c feb7 	bl	800e5f0 <iprintf>
			printf("%6f\n",peak1);
 8001882:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8001886:	4860      	ldr	r0, [pc, #384]	; (8001a08 <acc_example_service_envelope.0+0x480>)
 8001888:	f00c feb2 	bl	800e5f0 <iprintf>
			printf("%6f",peak2);
 800188c:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8001890:	485e      	ldr	r0, [pc, #376]	; (8001a0c <acc_example_service_envelope.0+0x484>)
 8001892:	f00c fead 	bl	800e5f0 <iprintf>
			printf("\n");
 8001896:	200a      	movs	r0, #10
 8001898:	f00c febc 	bl	800e614 <putchar>
		    if (peak1 < peak2){
 800189c:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80018a0:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80018a4:	f7ff f992 	bl	8000bcc <__aeabi_dcmplt>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d00b      	beq.n	80018c6 <acc_example_service_envelope.0+0x33e>
		    	double temp = peak1;
 80018ae:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80018b2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		    	peak1 = peak2;
 80018b6:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80018ba:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
		    	peak2 = temp;
 80018be:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80018c2:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
		    uint16_t num_peaks = 2;
 80018c6:	2302      	movs	r3, #2
 80018c8:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
		    if (peak1 == newMin || peak2 == newMin){
 80018cc:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80018d0:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80018d4:	f7ff f970 	bl	8000bb8 <__aeabi_dcmpeq>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d108      	bne.n	80018f0 <acc_example_service_envelope.0+0x368>
 80018de:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80018e2:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80018e6:	f7ff f967 	bl	8000bb8 <__aeabi_dcmpeq>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d002      	beq.n	80018f6 <acc_example_service_envelope.0+0x36e>
		    	num_peaks = 1;
 80018f0:	2301      	movs	r3, #1
 80018f2:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
		    double value = 2*radius - (peak1 - peak2);
 80018f6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80018fa:	4602      	mov	r2, r0
 80018fc:	460b      	mov	r3, r1
 80018fe:	f7fe fd3d 	bl	800037c <__adddf3>
 8001902:	4602      	mov	r2, r0
 8001904:	460b      	mov	r3, r1
 8001906:	4614      	mov	r4, r2
 8001908:	461d      	mov	r5, r3
 800190a:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800190e:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8001912:	f7fe fd31 	bl	8000378 <__aeabi_dsub>
 8001916:	4602      	mov	r2, r0
 8001918:	460b      	mov	r3, r1
 800191a:	4620      	mov	r0, r4
 800191c:	4629      	mov	r1, r5
 800191e:	f7fe fd2b 	bl	8000378 <__aeabi_dsub>
 8001922:	4602      	mov	r2, r0
 8001924:	460b      	mov	r3, r1
 8001926:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		    printf("Height");
 800192a:	4839      	ldr	r0, [pc, #228]	; (8001a10 <acc_example_service_envelope.0+0x488>)
 800192c:	f00c fe60 	bl	800e5f0 <iprintf>
		    printf("%.2f\n",value);
 8001930:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001934:	4837      	ldr	r0, [pc, #220]	; (8001a14 <acc_example_service_envelope.0+0x48c>)
 8001936:	f00c fe5b 	bl	800e5f0 <iprintf>
		    double K = 1.49; // Constant
 800193a:	a32b      	add	r3, pc, #172	; (adr r3, 80019e8 <acc_example_service_envelope.0+0x460>)
 800193c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001940:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
		    double S = 0.001; // Slope of the pipe, assumption.
 8001944:	a32a      	add	r3, pc, #168	; (adr r3, 80019f0 <acc_example_service_envelope.0+0x468>)
 8001946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800194a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
		    double n = 0.20; // Roughness coefficient, assumption.
 800194e:	a32a      	add	r3, pc, #168	; (adr r3, 80019f8 <acc_example_service_envelope.0+0x470>)
 8001950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001954:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		    uint16_t Q = water_flow(value, radius, K, S, n, num_peaks);
 8001958:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800195c:	4618      	mov	r0, r3
 800195e:	ed97 4b0c 	vldr	d4, [r7, #48]	; 0x30
 8001962:	ed97 3b0e 	vldr	d3, [r7, #56]	; 0x38
 8001966:	ed97 2b10 	vldr	d2, [r7, #64]	; 0x40
 800196a:	ed97 1b16 	vldr	d1, [r7, #88]	; 0x58
 800196e:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 8001972:	f7ff fc91 	bl	8001298 <water_flow>
 8001976:	4603      	mov	r3, r0
 8001978:	85fb      	strh	r3, [r7, #46]	; 0x2e
			printf("Speed ");
 800197a:	4827      	ldr	r0, [pc, #156]	; (8001a18 <acc_example_service_envelope.0+0x490>)
 800197c:	f00c fe38 	bl	800e5f0 <iprintf>
		    printf("%6u\n", Q);
 8001980:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001982:	4619      	mov	r1, r3
 8001984:	4825      	ldr	r0, [pc, #148]	; (8001a1c <acc_example_service_envelope.0+0x494>)
 8001986:	f00c fe33 	bl	800e5f0 <iprintf>
		for (int i = 0; i < iterations; i++)
 800198a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800198e:	3301      	adds	r3, #1
 8001990:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001994:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001998:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800199c:	429a      	cmp	r2, r3
 800199e:	f6ff aeaf 	blt.w	8001700 <acc_example_service_envelope.0+0x178>
 80019a2:	e000      	b.n	80019a6 <acc_example_service_envelope.0+0x41e>
				break;
 80019a4:	bf00      	nop
		bool deactivated = acc_service_deactivate(handle);
 80019a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a8:	4618      	mov	r0, r3
 80019aa:	f003 fdf7 	bl	800559c <acc_service_deactivate>
 80019ae:	4603      	mov	r3, r0
 80019b0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		acc_service_destroy(&handle);
 80019b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019b8:	4618      	mov	r0, r3
 80019ba:	f004 f9a5 	bl	8005d08 <acc_service_destroy>
		acc_rss_deactivate();
 80019be:	f003 fcf3 	bl	80053a8 <acc_rss_deactivate>
		if (deactivated && success)
 80019c2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d005      	beq.n	80019d6 <acc_example_service_envelope.0+0x44e>
 80019ca:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <acc_example_service_envelope.0+0x44e>
			return EXIT_SUCCESS;
 80019d2:	2300      	movs	r3, #0
 80019d4:	e000      	b.n	80019d8 <acc_example_service_envelope.0+0x450>
		return EXIT_FAILURE;
 80019d6:	2301      	movs	r3, #1
 80019d8:	46d5      	mov	sp, sl
	}
 80019da:	4618      	mov	r0, r3
 80019dc:	37b8      	adds	r7, #184	; 0xb8
 80019de:	46bd      	mov	sp, r7
 80019e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80019e4:	f3af 8000 	nop.w
 80019e8:	3d70a3d7 	.word	0x3d70a3d7
 80019ec:	3ff7d70a 	.word	0x3ff7d70a
 80019f0:	d2f1a9fc 	.word	0xd2f1a9fc
 80019f4:	3f50624d 	.word	0x3f50624d
 80019f8:	9999999a 	.word	0x9999999a
 80019fc:	3fc99999 	.word	0x3fc99999
 8001a00:	401a0000 	.word	0x401a0000
 8001a04:	08012f44 	.word	0x08012f44
 8001a08:	08012f4c 	.word	0x08012f4c
 8001a0c:	08012f54 	.word	0x08012f54
 8001a10:	08012f58 	.word	0x08012f58
 8001a14:	08012f60 	.word	0x08012f60
 8001a18:	08012f68 	.word	0x08012f68
 8001a1c:	08012f70 	.word	0x08012f70

08001a20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b096      	sub	sp, #88	; 0x58
 8001a24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a26:	f107 0314 	add.w	r3, r7, #20
 8001a2a:	2244      	movs	r2, #68	; 0x44
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f00c ff80 	bl	800e934 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a34:	463b      	mov	r3, r7
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]
 8001a3a:	605a      	str	r2, [r3, #4]
 8001a3c:	609a      	str	r2, [r3, #8]
 8001a3e:	60da      	str	r2, [r3, #12]
 8001a40:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001a42:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001a46:	f000 ff8f 	bl	8002968 <HAL_PWREx_ControlVoltageScaling>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001a50:	f000 f938 	bl	8001cc4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a54:	2302      	movs	r3, #2
 8001a56:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a5c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a5e:	2310      	movs	r3, #16
 8001a60:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a62:	2302      	movs	r3, #2
 8001a64:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a66:	2302      	movs	r3, #2
 8001a68:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001a6e:	230a      	movs	r3, #10
 8001a70:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001a72:	2307      	movs	r3, #7
 8001a74:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a76:	2302      	movs	r3, #2
 8001a78:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a7e:	f107 0314 	add.w	r3, r7, #20
 8001a82:	4618      	mov	r0, r3
 8001a84:	f000 ffc6 	bl	8002a14 <HAL_RCC_OscConfig>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001a8e:	f000 f919 	bl	8001cc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a92:	230f      	movs	r3, #15
 8001a94:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a96:	2303      	movs	r3, #3
 8001a98:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001aa6:	463b      	mov	r3, r7
 8001aa8:	2104      	movs	r1, #4
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f001 fb8e 	bl	80031cc <HAL_RCC_ClockConfig>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001ab6:	f000 f905 	bl	8001cc4 <Error_Handler>
  }
}
 8001aba:	bf00      	nop
 8001abc:	3758      	adds	r7, #88	; 0x58
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
	...

08001ac4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001ac8:	4b1b      	ldr	r3, [pc, #108]	; (8001b38 <MX_SPI3_Init+0x74>)
 8001aca:	4a1c      	ldr	r2, [pc, #112]	; (8001b3c <MX_SPI3_Init+0x78>)
 8001acc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001ace:	4b1a      	ldr	r3, [pc, #104]	; (8001b38 <MX_SPI3_Init+0x74>)
 8001ad0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ad4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001ad6:	4b18      	ldr	r3, [pc, #96]	; (8001b38 <MX_SPI3_Init+0x74>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001adc:	4b16      	ldr	r3, [pc, #88]	; (8001b38 <MX_SPI3_Init+0x74>)
 8001ade:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001ae2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ae4:	4b14      	ldr	r3, [pc, #80]	; (8001b38 <MX_SPI3_Init+0x74>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001aea:	4b13      	ldr	r3, [pc, #76]	; (8001b38 <MX_SPI3_Init+0x74>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001af0:	4b11      	ldr	r3, [pc, #68]	; (8001b38 <MX_SPI3_Init+0x74>)
 8001af2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001af6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001af8:	4b0f      	ldr	r3, [pc, #60]	; (8001b38 <MX_SPI3_Init+0x74>)
 8001afa:	2228      	movs	r2, #40	; 0x28
 8001afc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001afe:	4b0e      	ldr	r3, [pc, #56]	; (8001b38 <MX_SPI3_Init+0x74>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b04:	4b0c      	ldr	r3, [pc, #48]	; (8001b38 <MX_SPI3_Init+0x74>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b0a:	4b0b      	ldr	r3, [pc, #44]	; (8001b38 <MX_SPI3_Init+0x74>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001b10:	4b09      	ldr	r3, [pc, #36]	; (8001b38 <MX_SPI3_Init+0x74>)
 8001b12:	2207      	movs	r2, #7
 8001b14:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001b16:	4b08      	ldr	r3, [pc, #32]	; (8001b38 <MX_SPI3_Init+0x74>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001b1c:	4b06      	ldr	r3, [pc, #24]	; (8001b38 <MX_SPI3_Init+0x74>)
 8001b1e:	2208      	movs	r2, #8
 8001b20:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001b22:	4805      	ldr	r0, [pc, #20]	; (8001b38 <MX_SPI3_Init+0x74>)
 8001b24:	f002 fa32 	bl	8003f8c <HAL_SPI_Init>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001b2e:	f000 f8c9 	bl	8001cc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001b32:	bf00      	nop
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	20000384 	.word	0x20000384
 8001b3c:	40003c00 	.word	0x40003c00

08001b40 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b44:	4b14      	ldr	r3, [pc, #80]	; (8001b98 <MX_USART2_UART_Init+0x58>)
 8001b46:	4a15      	ldr	r2, [pc, #84]	; (8001b9c <MX_USART2_UART_Init+0x5c>)
 8001b48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b4a:	4b13      	ldr	r3, [pc, #76]	; (8001b98 <MX_USART2_UART_Init+0x58>)
 8001b4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b52:	4b11      	ldr	r3, [pc, #68]	; (8001b98 <MX_USART2_UART_Init+0x58>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b58:	4b0f      	ldr	r3, [pc, #60]	; (8001b98 <MX_USART2_UART_Init+0x58>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b5e:	4b0e      	ldr	r3, [pc, #56]	; (8001b98 <MX_USART2_UART_Init+0x58>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b64:	4b0c      	ldr	r3, [pc, #48]	; (8001b98 <MX_USART2_UART_Init+0x58>)
 8001b66:	220c      	movs	r2, #12
 8001b68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b6a:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <MX_USART2_UART_Init+0x58>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b70:	4b09      	ldr	r3, [pc, #36]	; (8001b98 <MX_USART2_UART_Init+0x58>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b76:	4b08      	ldr	r3, [pc, #32]	; (8001b98 <MX_USART2_UART_Init+0x58>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b7c:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <MX_USART2_UART_Init+0x58>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b82:	4805      	ldr	r0, [pc, #20]	; (8001b98 <MX_USART2_UART_Init+0x58>)
 8001b84:	f002 fe2c 	bl	80047e0 <HAL_UART_Init>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001b8e:	f000 f899 	bl	8001cc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b92:	bf00      	nop
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	200003e8 	.word	0x200003e8
 8001b9c:	40004400 	.word	0x40004400

08001ba0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b08a      	sub	sp, #40	; 0x28
 8001ba4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba6:	f107 0314 	add.w	r3, r7, #20
 8001baa:	2200      	movs	r2, #0
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	605a      	str	r2, [r3, #4]
 8001bb0:	609a      	str	r2, [r3, #8]
 8001bb2:	60da      	str	r2, [r3, #12]
 8001bb4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bb6:	4b40      	ldr	r3, [pc, #256]	; (8001cb8 <MX_GPIO_Init+0x118>)
 8001bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bba:	4a3f      	ldr	r2, [pc, #252]	; (8001cb8 <MX_GPIO_Init+0x118>)
 8001bbc:	f043 0304 	orr.w	r3, r3, #4
 8001bc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bc2:	4b3d      	ldr	r3, [pc, #244]	; (8001cb8 <MX_GPIO_Init+0x118>)
 8001bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bc6:	f003 0304 	and.w	r3, r3, #4
 8001bca:	613b      	str	r3, [r7, #16]
 8001bcc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bce:	4b3a      	ldr	r3, [pc, #232]	; (8001cb8 <MX_GPIO_Init+0x118>)
 8001bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd2:	4a39      	ldr	r2, [pc, #228]	; (8001cb8 <MX_GPIO_Init+0x118>)
 8001bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bda:	4b37      	ldr	r3, [pc, #220]	; (8001cb8 <MX_GPIO_Init+0x118>)
 8001bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be6:	4b34      	ldr	r3, [pc, #208]	; (8001cb8 <MX_GPIO_Init+0x118>)
 8001be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bea:	4a33      	ldr	r2, [pc, #204]	; (8001cb8 <MX_GPIO_Init+0x118>)
 8001bec:	f043 0301 	orr.w	r3, r3, #1
 8001bf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bf2:	4b31      	ldr	r3, [pc, #196]	; (8001cb8 <MX_GPIO_Init+0x118>)
 8001bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	60bb      	str	r3, [r7, #8]
 8001bfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bfe:	4b2e      	ldr	r3, [pc, #184]	; (8001cb8 <MX_GPIO_Init+0x118>)
 8001c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c02:	4a2d      	ldr	r2, [pc, #180]	; (8001cb8 <MX_GPIO_Init+0x118>)
 8001c04:	f043 0302 	orr.w	r3, r3, #2
 8001c08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c0a:	4b2b      	ldr	r3, [pc, #172]	; (8001cb8 <MX_GPIO_Init+0x118>)
 8001c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	607b      	str	r3, [r7, #4]
 8001c14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001c16:	2200      	movs	r2, #0
 8001c18:	2120      	movs	r1, #32
 8001c1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c1e:	f000 fe59 	bl	80028d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A111_ENABLE_Pin|A111_CS_N_Pin, GPIO_PIN_RESET);
 8001c22:	2200      	movs	r2, #0
 8001c24:	2160      	movs	r1, #96	; 0x60
 8001c26:	4825      	ldr	r0, [pc, #148]	; (8001cbc <MX_GPIO_Init+0x11c>)
 8001c28:	f000 fe54 	bl	80028d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001c2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c32:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001c36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001c3c:	f107 0314 	add.w	r3, r7, #20
 8001c40:	4619      	mov	r1, r3
 8001c42:	481f      	ldr	r0, [pc, #124]	; (8001cc0 <MX_GPIO_Init+0x120>)
 8001c44:	f000 fc84 	bl	8002550 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001c48:	2320      	movs	r3, #32
 8001c4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c50:	2300      	movs	r3, #0
 8001c52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c54:	2300      	movs	r3, #0
 8001c56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001c58:	f107 0314 	add.w	r3, r7, #20
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c62:	f000 fc75 	bl	8002550 <HAL_GPIO_Init>

  /*Configure GPIO pin : A111_SENSOR_INTERRUPT_Pin */
  GPIO_InitStruct.Pin = A111_SENSOR_INTERRUPT_Pin;
 8001c66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c6c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c72:	2300      	movs	r3, #0
 8001c74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(A111_SENSOR_INTERRUPT_GPIO_Port, &GPIO_InitStruct);
 8001c76:	f107 0314 	add.w	r3, r7, #20
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c80:	f000 fc66 	bl	8002550 <HAL_GPIO_Init>

  /*Configure GPIO pins : A111_ENABLE_Pin A111_CS_N_Pin */
  GPIO_InitStruct.Pin = A111_ENABLE_Pin|A111_CS_N_Pin;
 8001c84:	2360      	movs	r3, #96	; 0x60
 8001c86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c90:	2300      	movs	r3, #0
 8001c92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c94:	f107 0314 	add.w	r3, r7, #20
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4808      	ldr	r0, [pc, #32]	; (8001cbc <MX_GPIO_Init+0x11c>)
 8001c9c:	f000 fc58 	bl	8002550 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	2017      	movs	r0, #23
 8001ca6:	f000 fc1c 	bl	80024e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001caa:	2017      	movs	r0, #23
 8001cac:	f000 fc35 	bl	800251a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001cb0:	bf00      	nop
 8001cb2:	3728      	adds	r7, #40	; 0x28
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	48000400 	.word	0x48000400
 8001cc0:	48000800 	.word	0x48000800

08001cc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001cc8:	b672      	cpsid	i
}
 8001cca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ccc:	e7fe      	b.n	8001ccc <Error_Handler+0x8>
	...

08001cd0 <mutliple_peak_detection>:

struct Tuple{
	int index;
	uint16_t value;
};
int* mutliple_peak_detection(uint16_t *data, uint16_t data_length){
 8001cd0:	b5b0      	push	{r4, r5, r7, lr}
 8001cd2:	b08c      	sub	sp, #48	; 0x30
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	460b      	mov	r3, r1
 8001cda:	807b      	strh	r3, [r7, #2]

	uint16_t sum = 0;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	85fb      	strh	r3, [r7, #46]	; 0x2e
	for (int i = 0; i < data_length; i++){
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ce4:	e00a      	b.n	8001cfc <mutliple_peak_detection+0x2c>
		sum = sum + data[i];
 8001ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	4413      	add	r3, r2
 8001cee:	881a      	ldrh	r2, [r3, #0]
 8001cf0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001cf2:	4413      	add	r3, r2
 8001cf4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	for (int i = 0; i < data_length; i++){
 8001cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cfc:	887b      	ldrh	r3, [r7, #2]
 8001cfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d00:	429a      	cmp	r2, r3
 8001d02:	dbf0      	blt.n	8001ce6 <mutliple_peak_detection+0x16>

	}
	uint16_t baseline = sum/data_length;
 8001d04:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001d06:	887b      	ldrh	r3, [r7, #2]
 8001d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d0c:	847b      	strh	r3, [r7, #34]	; 0x22
	struct Tuple peaks[] = {
 8001d0e:	f107 030c 	add.w	r3, r7, #12
 8001d12:	2200      	movs	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	605a      	str	r2, [r3, #4]
 8001d18:	609a      	str	r2, [r3, #8]
 8001d1a:	60da      	str	r2, [r3, #12]
						   {0,0},
						   {0,0}
	};

	for (int i = 0;i<data_length-5;i++){
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d20:	e055      	b.n	8001dce <mutliple_peak_detection+0xfe>
		if (data[i] > data[i-1] && data[i] > data[i+5]&& data[i] > baseline){
 8001d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	4413      	add	r3, r2
 8001d2a:	881a      	ldrh	r2, [r3, #0]
 8001d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8001d32:	3b01      	subs	r3, #1
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	6879      	ldr	r1, [r7, #4]
 8001d38:	440b      	add	r3, r1
 8001d3a:	881b      	ldrh	r3, [r3, #0]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d943      	bls.n	8001dc8 <mutliple_peak_detection+0xf8>
 8001d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	4413      	add	r3, r2
 8001d48:	881a      	ldrh	r2, [r3, #0]
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4c:	3305      	adds	r3, #5
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	6879      	ldr	r1, [r7, #4]
 8001d52:	440b      	add	r3, r1
 8001d54:	881b      	ldrh	r3, [r3, #0]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d936      	bls.n	8001dc8 <mutliple_peak_detection+0xf8>
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	4413      	add	r3, r2
 8001d62:	881b      	ldrh	r3, [r3, #0]
 8001d64:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d22e      	bcs.n	8001dc8 <mutliple_peak_detection+0xf8>
			if (data[i] > peaks[0].value){
 8001d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	4413      	add	r3, r2
 8001d72:	881a      	ldrh	r2, [r3, #0]
 8001d74:	8a3b      	ldrh	r3, [r7, #16]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d911      	bls.n	8001d9e <mutliple_peak_detection+0xce>
				if (i - peaks[0].index > 10){
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b0a      	cmp	r3, #10
 8001d82:	dd03      	ble.n	8001d8c <mutliple_peak_detection+0xbc>
					peaks[1].index = peaks[0].index;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	617b      	str	r3, [r7, #20]
					peaks[1].value = peaks[0].value;
 8001d88:	8a3b      	ldrh	r3, [r7, #16]
 8001d8a:	833b      	strh	r3, [r7, #24]
				}
				peaks[0].index = i;
 8001d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8e:	60fb      	str	r3, [r7, #12]
				peaks[0].value = data[i];
 8001d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	4413      	add	r3, r2
 8001d98:	881b      	ldrh	r3, [r3, #0]
 8001d9a:	823b      	strh	r3, [r7, #16]
 8001d9c:	e014      	b.n	8001dc8 <mutliple_peak_detection+0xf8>
			}

			else if (data[i] > peaks[1].value && i - peaks[0].index > 10){
 8001d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	4413      	add	r3, r2
 8001da6:	881a      	ldrh	r2, [r3, #0]
 8001da8:	8b3b      	ldrh	r3, [r7, #24]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d90c      	bls.n	8001dc8 <mutliple_peak_detection+0xf8>
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	2b0a      	cmp	r3, #10
 8001db6:	dd07      	ble.n	8001dc8 <mutliple_peak_detection+0xf8>
				peaks[1].index = i;
 8001db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dba:	617b      	str	r3, [r7, #20]
				peaks[1].value = data[i];
 8001dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	881b      	ldrh	r3, [r3, #0]
 8001dc6:	833b      	strh	r3, [r7, #24]
	for (int i = 0;i<data_length-5;i++){
 8001dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dca:	3301      	adds	r3, #1
 8001dcc:	627b      	str	r3, [r7, #36]	; 0x24
 8001dce:	887b      	ldrh	r3, [r7, #2]
 8001dd0:	3b05      	subs	r3, #5
 8001dd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	dba4      	blt.n	8001d22 <mutliple_peak_detection+0x52>
			}
		}
	}
	int* peakIndexes = (int*)malloc(2 * sizeof(int));
 8001dd8:	2008      	movs	r0, #8
 8001dda:	f00b fd75 	bl	800d8c8 <malloc>
 8001dde:	4603      	mov	r3, r0
 8001de0:	61fb      	str	r3, [r7, #28]
	if (peaks[1].value <= 0.5*peaks[0].value){
 8001de2:	8b3b      	ldrh	r3, [r7, #24]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7fe fc15 	bl	8000614 <__aeabi_i2d>
 8001dea:	4604      	mov	r4, r0
 8001dec:	460d      	mov	r5, r1
 8001dee:	8a3b      	ldrh	r3, [r7, #16]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7fe fc0f 	bl	8000614 <__aeabi_i2d>
 8001df6:	f04f 0200 	mov.w	r2, #0
 8001dfa:	4b0d      	ldr	r3, [pc, #52]	; (8001e30 <mutliple_peak_detection+0x160>)
 8001dfc:	f7fe fc74 	bl	80006e8 <__aeabi_dmul>
 8001e00:	4602      	mov	r2, r0
 8001e02:	460b      	mov	r3, r1
 8001e04:	4620      	mov	r0, r4
 8001e06:	4629      	mov	r1, r5
 8001e08:	f7fe feea 	bl	8000be0 <__aeabi_dcmple>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <mutliple_peak_detection+0x146>
		peaks[1].index = 0;
 8001e12:	2300      	movs	r3, #0
 8001e14:	617b      	str	r3, [r7, #20]

	}

	peakIndexes[0] = peaks[0].index;
 8001e16:	68fa      	ldr	r2, [r7, #12]
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	601a      	str	r2, [r3, #0]
	peakIndexes[1] = peaks[1].index;
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	3304      	adds	r3, #4
 8001e20:	697a      	ldr	r2, [r7, #20]
 8001e22:	601a      	str	r2, [r3, #0]

	return peakIndexes;
 8001e24:	69fb      	ldr	r3, [r7, #28]



}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3730      	adds	r7, #48	; 0x30
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bdb0      	pop	{r4, r5, r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	3fe00000 	.word	0x3fe00000

08001e34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e3a:	4b0f      	ldr	r3, [pc, #60]	; (8001e78 <HAL_MspInit+0x44>)
 8001e3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e3e:	4a0e      	ldr	r2, [pc, #56]	; (8001e78 <HAL_MspInit+0x44>)
 8001e40:	f043 0301 	orr.w	r3, r3, #1
 8001e44:	6613      	str	r3, [r2, #96]	; 0x60
 8001e46:	4b0c      	ldr	r3, [pc, #48]	; (8001e78 <HAL_MspInit+0x44>)
 8001e48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	607b      	str	r3, [r7, #4]
 8001e50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e52:	4b09      	ldr	r3, [pc, #36]	; (8001e78 <HAL_MspInit+0x44>)
 8001e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e56:	4a08      	ldr	r2, [pc, #32]	; (8001e78 <HAL_MspInit+0x44>)
 8001e58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e5c:	6593      	str	r3, [r2, #88]	; 0x58
 8001e5e:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <HAL_MspInit+0x44>)
 8001e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e66:	603b      	str	r3, [r7, #0]
 8001e68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e6a:	bf00      	nop
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	40021000 	.word	0x40021000

08001e7c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b08a      	sub	sp, #40	; 0x28
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e84:	f107 0314 	add.w	r3, r7, #20
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	605a      	str	r2, [r3, #4]
 8001e8e:	609a      	str	r2, [r3, #8]
 8001e90:	60da      	str	r2, [r3, #12]
 8001e92:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a17      	ldr	r2, [pc, #92]	; (8001ef8 <HAL_SPI_MspInit+0x7c>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d128      	bne.n	8001ef0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001e9e:	4b17      	ldr	r3, [pc, #92]	; (8001efc <HAL_SPI_MspInit+0x80>)
 8001ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea2:	4a16      	ldr	r2, [pc, #88]	; (8001efc <HAL_SPI_MspInit+0x80>)
 8001ea4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ea8:	6593      	str	r3, [r2, #88]	; 0x58
 8001eaa:	4b14      	ldr	r3, [pc, #80]	; (8001efc <HAL_SPI_MspInit+0x80>)
 8001eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001eb2:	613b      	str	r3, [r7, #16]
 8001eb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eb6:	4b11      	ldr	r3, [pc, #68]	; (8001efc <HAL_SPI_MspInit+0x80>)
 8001eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eba:	4a10      	ldr	r2, [pc, #64]	; (8001efc <HAL_SPI_MspInit+0x80>)
 8001ebc:	f043 0304 	orr.w	r3, r3, #4
 8001ec0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ec2:	4b0e      	ldr	r3, [pc, #56]	; (8001efc <HAL_SPI_MspInit+0x80>)
 8001ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ec6:	f003 0304 	and.w	r3, r3, #4
 8001eca:	60fb      	str	r3, [r7, #12]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = A111_SPI_SCK_Pin|A111_SPI_MISO_Pin|A111_SPI_MOSI_Pin;
 8001ece:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001ed2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001edc:	2303      	movs	r3, #3
 8001ede:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001ee0:	2306      	movs	r3, #6
 8001ee2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ee4:	f107 0314 	add.w	r3, r7, #20
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4805      	ldr	r0, [pc, #20]	; (8001f00 <HAL_SPI_MspInit+0x84>)
 8001eec:	f000 fb30 	bl	8002550 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001ef0:	bf00      	nop
 8001ef2:	3728      	adds	r7, #40	; 0x28
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40003c00 	.word	0x40003c00
 8001efc:	40021000 	.word	0x40021000
 8001f00:	48000800 	.word	0x48000800

08001f04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b0ac      	sub	sp, #176	; 0xb0
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f0c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f10:	2200      	movs	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]
 8001f14:	605a      	str	r2, [r3, #4]
 8001f16:	609a      	str	r2, [r3, #8]
 8001f18:	60da      	str	r2, [r3, #12]
 8001f1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f1c:	f107 0314 	add.w	r3, r7, #20
 8001f20:	2288      	movs	r2, #136	; 0x88
 8001f22:	2100      	movs	r1, #0
 8001f24:	4618      	mov	r0, r3
 8001f26:	f00c fd05 	bl	800e934 <memset>
  if(huart->Instance==USART2)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a21      	ldr	r2, [pc, #132]	; (8001fb4 <HAL_UART_MspInit+0xb0>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d13b      	bne.n	8001fac <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001f34:	2302      	movs	r3, #2
 8001f36:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f3c:	f107 0314 	add.w	r3, r7, #20
 8001f40:	4618      	mov	r0, r3
 8001f42:	f001 fb67 	bl	8003614 <HAL_RCCEx_PeriphCLKConfig>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001f4c:	f7ff feba 	bl	8001cc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f50:	4b19      	ldr	r3, [pc, #100]	; (8001fb8 <HAL_UART_MspInit+0xb4>)
 8001f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f54:	4a18      	ldr	r2, [pc, #96]	; (8001fb8 <HAL_UART_MspInit+0xb4>)
 8001f56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f5a:	6593      	str	r3, [r2, #88]	; 0x58
 8001f5c:	4b16      	ldr	r3, [pc, #88]	; (8001fb8 <HAL_UART_MspInit+0xb4>)
 8001f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f64:	613b      	str	r3, [r7, #16]
 8001f66:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f68:	4b13      	ldr	r3, [pc, #76]	; (8001fb8 <HAL_UART_MspInit+0xb4>)
 8001f6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f6c:	4a12      	ldr	r2, [pc, #72]	; (8001fb8 <HAL_UART_MspInit+0xb4>)
 8001f6e:	f043 0301 	orr.w	r3, r3, #1
 8001f72:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f74:	4b10      	ldr	r3, [pc, #64]	; (8001fb8 <HAL_UART_MspInit+0xb4>)
 8001f76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f78:	f003 0301 	and.w	r3, r3, #1
 8001f7c:	60fb      	str	r3, [r7, #12]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001f80:	230c      	movs	r3, #12
 8001f82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f86:	2302      	movs	r3, #2
 8001f88:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f92:	2303      	movs	r3, #3
 8001f94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f98:	2307      	movs	r3, #7
 8001f9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f9e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fa8:	f000 fad2 	bl	8002550 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001fac:	bf00      	nop
 8001fae:	37b0      	adds	r7, #176	; 0xb0
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	40004400 	.word	0x40004400
 8001fb8:	40021000 	.word	0x40021000

08001fbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fc0:	e7fe      	b.n	8001fc0 <NMI_Handler+0x4>

08001fc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fc6:	e7fe      	b.n	8001fc6 <HardFault_Handler+0x4>

08001fc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fcc:	e7fe      	b.n	8001fcc <MemManage_Handler+0x4>

08001fce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fd2:	e7fe      	b.n	8001fd2 <BusFault_Handler+0x4>

08001fd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fd8:	e7fe      	b.n	8001fd8 <UsageFault_Handler+0x4>

08001fda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fec:	bf00      	nop
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr

08001ff6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ffa:	bf00      	nop
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002008:	f000 f94c 	bl	80022a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800200c:	bf00      	nop
 800200e:	bd80      	pop	{r7, pc}

08002010 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(A111_SENSOR_INTERRUPT_Pin);
 8002014:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002018:	f000 fc74 	bl	8002904 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800201c:	bf00      	nop
 800201e:	bd80      	pop	{r7, pc}

08002020 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  return 1;
 8002024:	2301      	movs	r3, #1
}
 8002026:	4618      	mov	r0, r3
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <_kill>:

int _kill(int pid, int sig)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800203a:	f00c fcdd 	bl	800e9f8 <__errno>
 800203e:	4603      	mov	r3, r0
 8002040:	2216      	movs	r2, #22
 8002042:	601a      	str	r2, [r3, #0]
  return -1;
 8002044:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002048:	4618      	mov	r0, r3
 800204a:	3708      	adds	r7, #8
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <_exit>:

void _exit (int status)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002058:	f04f 31ff 	mov.w	r1, #4294967295
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f7ff ffe7 	bl	8002030 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002062:	e7fe      	b.n	8002062 <_exit+0x12>

08002064 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b086      	sub	sp, #24
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002070:	2300      	movs	r3, #0
 8002072:	617b      	str	r3, [r7, #20]
 8002074:	e00a      	b.n	800208c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002076:	f3af 8000 	nop.w
 800207a:	4601      	mov	r1, r0
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	1c5a      	adds	r2, r3, #1
 8002080:	60ba      	str	r2, [r7, #8]
 8002082:	b2ca      	uxtb	r2, r1
 8002084:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	3301      	adds	r3, #1
 800208a:	617b      	str	r3, [r7, #20]
 800208c:	697a      	ldr	r2, [r7, #20]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	429a      	cmp	r2, r3
 8002092:	dbf0      	blt.n	8002076 <_read+0x12>
  }

  return len;
 8002094:	687b      	ldr	r3, [r7, #4]
}
 8002096:	4618      	mov	r0, r3
 8002098:	3718      	adds	r7, #24
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <_close>:
  }
  return len;
}

int _close(int file)
{
 800209e:	b480      	push	{r7}
 80020a0:	b083      	sub	sp, #12
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr

080020b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020b6:	b480      	push	{r7}
 80020b8:	b083      	sub	sp, #12
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
 80020be:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020c6:	605a      	str	r2, [r3, #4]
  return 0;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <_isatty>:

int _isatty(int file)
{
 80020d6:	b480      	push	{r7}
 80020d8:	b083      	sub	sp, #12
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020de:	2301      	movs	r3, #1
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3714      	adds	r7, #20
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
	...

08002108 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002110:	4a14      	ldr	r2, [pc, #80]	; (8002164 <_sbrk+0x5c>)
 8002112:	4b15      	ldr	r3, [pc, #84]	; (8002168 <_sbrk+0x60>)
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800211c:	4b13      	ldr	r3, [pc, #76]	; (800216c <_sbrk+0x64>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d102      	bne.n	800212a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002124:	4b11      	ldr	r3, [pc, #68]	; (800216c <_sbrk+0x64>)
 8002126:	4a12      	ldr	r2, [pc, #72]	; (8002170 <_sbrk+0x68>)
 8002128:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800212a:	4b10      	ldr	r3, [pc, #64]	; (800216c <_sbrk+0x64>)
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4413      	add	r3, r2
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	429a      	cmp	r2, r3
 8002136:	d207      	bcs.n	8002148 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002138:	f00c fc5e 	bl	800e9f8 <__errno>
 800213c:	4603      	mov	r3, r0
 800213e:	220c      	movs	r2, #12
 8002140:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002142:	f04f 33ff 	mov.w	r3, #4294967295
 8002146:	e009      	b.n	800215c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002148:	4b08      	ldr	r3, [pc, #32]	; (800216c <_sbrk+0x64>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800214e:	4b07      	ldr	r3, [pc, #28]	; (800216c <_sbrk+0x64>)
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4413      	add	r3, r2
 8002156:	4a05      	ldr	r2, [pc, #20]	; (800216c <_sbrk+0x64>)
 8002158:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800215a:	68fb      	ldr	r3, [r7, #12]
}
 800215c:	4618      	mov	r0, r3
 800215e:	3718      	adds	r7, #24
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	20018000 	.word	0x20018000
 8002168:	00000400 	.word	0x00000400
 800216c:	20000470 	.word	0x20000470
 8002170:	20000680 	.word	0x20000680

08002174 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002178:	4b06      	ldr	r3, [pc, #24]	; (8002194 <SystemInit+0x20>)
 800217a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800217e:	4a05      	ldr	r2, [pc, #20]	; (8002194 <SystemInit+0x20>)
 8002180:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002184:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002188:	bf00      	nop
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	e000ed00 	.word	0xe000ed00

08002198 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002198:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021d0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800219c:	f7ff ffea 	bl	8002174 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021a0:	480c      	ldr	r0, [pc, #48]	; (80021d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80021a2:	490d      	ldr	r1, [pc, #52]	; (80021d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80021a4:	4a0d      	ldr	r2, [pc, #52]	; (80021dc <LoopForever+0xe>)
  movs r3, #0
 80021a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021a8:	e002      	b.n	80021b0 <LoopCopyDataInit>

080021aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021ae:	3304      	adds	r3, #4

080021b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021b4:	d3f9      	bcc.n	80021aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021b6:	4a0a      	ldr	r2, [pc, #40]	; (80021e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80021b8:	4c0a      	ldr	r4, [pc, #40]	; (80021e4 <LoopForever+0x16>)
  movs r3, #0
 80021ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021bc:	e001      	b.n	80021c2 <LoopFillZerobss>

080021be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021c0:	3204      	adds	r2, #4

080021c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021c4:	d3fb      	bcc.n	80021be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021c6:	f00c fc1d 	bl	800ea04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80021ca:	f7ff f99b 	bl	8001504 <main>

080021ce <LoopForever>:

LoopForever:
    b LoopForever
 80021ce:	e7fe      	b.n	80021ce <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80021d0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80021d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021d8:	20000368 	.word	0x20000368
  ldr r2, =_sidata
 80021dc:	08018b70 	.word	0x08018b70
  ldr r2, =_sbss
 80021e0:	20000368 	.word	0x20000368
  ldr r4, =_ebss
 80021e4:	2000067c 	.word	0x2000067c

080021e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80021e8:	e7fe      	b.n	80021e8 <ADC1_2_IRQHandler>
	...

080021ec <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80021f2:	2300      	movs	r3, #0
 80021f4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021f6:	4b0c      	ldr	r3, [pc, #48]	; (8002228 <HAL_Init+0x3c>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a0b      	ldr	r2, [pc, #44]	; (8002228 <HAL_Init+0x3c>)
 80021fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002200:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002202:	2003      	movs	r0, #3
 8002204:	f000 f962 	bl	80024cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002208:	2000      	movs	r0, #0
 800220a:	f000 f80f 	bl	800222c <HAL_InitTick>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d002      	beq.n	800221a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	71fb      	strb	r3, [r7, #7]
 8002218:	e001      	b.n	800221e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800221a:	f7ff fe0b 	bl	8001e34 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800221e:	79fb      	ldrb	r3, [r7, #7]
}
 8002220:	4618      	mov	r0, r3
 8002222:	3708      	adds	r7, #8
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	40022000 	.word	0x40022000

0800222c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002234:	2300      	movs	r3, #0
 8002236:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002238:	4b17      	ldr	r3, [pc, #92]	; (8002298 <HAL_InitTick+0x6c>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d023      	beq.n	8002288 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002240:	4b16      	ldr	r3, [pc, #88]	; (800229c <HAL_InitTick+0x70>)
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	4b14      	ldr	r3, [pc, #80]	; (8002298 <HAL_InitTick+0x6c>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	4619      	mov	r1, r3
 800224a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800224e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002252:	fbb2 f3f3 	udiv	r3, r2, r3
 8002256:	4618      	mov	r0, r3
 8002258:	f000 f96d 	bl	8002536 <HAL_SYSTICK_Config>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d10f      	bne.n	8002282 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2b0f      	cmp	r3, #15
 8002266:	d809      	bhi.n	800227c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002268:	2200      	movs	r2, #0
 800226a:	6879      	ldr	r1, [r7, #4]
 800226c:	f04f 30ff 	mov.w	r0, #4294967295
 8002270:	f000 f937 	bl	80024e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002274:	4a0a      	ldr	r2, [pc, #40]	; (80022a0 <HAL_InitTick+0x74>)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6013      	str	r3, [r2, #0]
 800227a:	e007      	b.n	800228c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	73fb      	strb	r3, [r7, #15]
 8002280:	e004      	b.n	800228c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	73fb      	strb	r3, [r7, #15]
 8002286:	e001      	b.n	800228c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800228c:	7bfb      	ldrb	r3, [r7, #15]
}
 800228e:	4618      	mov	r0, r3
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	20000008 	.word	0x20000008
 800229c:	20000000 	.word	0x20000000
 80022a0:	20000004 	.word	0x20000004

080022a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80022a8:	4b06      	ldr	r3, [pc, #24]	; (80022c4 <HAL_IncTick+0x20>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	461a      	mov	r2, r3
 80022ae:	4b06      	ldr	r3, [pc, #24]	; (80022c8 <HAL_IncTick+0x24>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4413      	add	r3, r2
 80022b4:	4a04      	ldr	r2, [pc, #16]	; (80022c8 <HAL_IncTick+0x24>)
 80022b6:	6013      	str	r3, [r2, #0]
}
 80022b8:	bf00      	nop
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	20000008 	.word	0x20000008
 80022c8:	20000474 	.word	0x20000474

080022cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  return uwTick;
 80022d0:	4b03      	ldr	r3, [pc, #12]	; (80022e0 <HAL_GetTick+0x14>)
 80022d2:	681b      	ldr	r3, [r3, #0]
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	20000474 	.word	0x20000474

080022e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022ec:	f7ff ffee 	bl	80022cc <HAL_GetTick>
 80022f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022fc:	d005      	beq.n	800230a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80022fe:	4b0a      	ldr	r3, [pc, #40]	; (8002328 <HAL_Delay+0x44>)
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	461a      	mov	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	4413      	add	r3, r2
 8002308:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800230a:	bf00      	nop
 800230c:	f7ff ffde 	bl	80022cc <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	429a      	cmp	r2, r3
 800231a:	d8f7      	bhi.n	800230c <HAL_Delay+0x28>
  {
  }
}
 800231c:	bf00      	nop
 800231e:	bf00      	nop
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	20000008 	.word	0x20000008

0800232c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800232c:	b480      	push	{r7}
 800232e:	b085      	sub	sp, #20
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f003 0307 	and.w	r3, r3, #7
 800233a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800233c:	4b0c      	ldr	r3, [pc, #48]	; (8002370 <__NVIC_SetPriorityGrouping+0x44>)
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002342:	68ba      	ldr	r2, [r7, #8]
 8002344:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002348:	4013      	ands	r3, r2
 800234a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002354:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800235c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800235e:	4a04      	ldr	r2, [pc, #16]	; (8002370 <__NVIC_SetPriorityGrouping+0x44>)
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	60d3      	str	r3, [r2, #12]
}
 8002364:	bf00      	nop
 8002366:	3714      	adds	r7, #20
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr
 8002370:	e000ed00 	.word	0xe000ed00

08002374 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002378:	4b04      	ldr	r3, [pc, #16]	; (800238c <__NVIC_GetPriorityGrouping+0x18>)
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	0a1b      	lsrs	r3, r3, #8
 800237e:	f003 0307 	and.w	r3, r3, #7
}
 8002382:	4618      	mov	r0, r3
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr
 800238c:	e000ed00 	.word	0xe000ed00

08002390 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	4603      	mov	r3, r0
 8002398:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800239a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	db0b      	blt.n	80023ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023a2:	79fb      	ldrb	r3, [r7, #7]
 80023a4:	f003 021f 	and.w	r2, r3, #31
 80023a8:	4907      	ldr	r1, [pc, #28]	; (80023c8 <__NVIC_EnableIRQ+0x38>)
 80023aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ae:	095b      	lsrs	r3, r3, #5
 80023b0:	2001      	movs	r0, #1
 80023b2:	fa00 f202 	lsl.w	r2, r0, r2
 80023b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023ba:	bf00      	nop
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	e000e100 	.word	0xe000e100

080023cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	4603      	mov	r3, r0
 80023d4:	6039      	str	r1, [r7, #0]
 80023d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	db0a      	blt.n	80023f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	b2da      	uxtb	r2, r3
 80023e4:	490c      	ldr	r1, [pc, #48]	; (8002418 <__NVIC_SetPriority+0x4c>)
 80023e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ea:	0112      	lsls	r2, r2, #4
 80023ec:	b2d2      	uxtb	r2, r2
 80023ee:	440b      	add	r3, r1
 80023f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023f4:	e00a      	b.n	800240c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	b2da      	uxtb	r2, r3
 80023fa:	4908      	ldr	r1, [pc, #32]	; (800241c <__NVIC_SetPriority+0x50>)
 80023fc:	79fb      	ldrb	r3, [r7, #7]
 80023fe:	f003 030f 	and.w	r3, r3, #15
 8002402:	3b04      	subs	r3, #4
 8002404:	0112      	lsls	r2, r2, #4
 8002406:	b2d2      	uxtb	r2, r2
 8002408:	440b      	add	r3, r1
 800240a:	761a      	strb	r2, [r3, #24]
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr
 8002418:	e000e100 	.word	0xe000e100
 800241c:	e000ed00 	.word	0xe000ed00

08002420 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002420:	b480      	push	{r7}
 8002422:	b089      	sub	sp, #36	; 0x24
 8002424:	af00      	add	r7, sp, #0
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f003 0307 	and.w	r3, r3, #7
 8002432:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	f1c3 0307 	rsb	r3, r3, #7
 800243a:	2b04      	cmp	r3, #4
 800243c:	bf28      	it	cs
 800243e:	2304      	movcs	r3, #4
 8002440:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	3304      	adds	r3, #4
 8002446:	2b06      	cmp	r3, #6
 8002448:	d902      	bls.n	8002450 <NVIC_EncodePriority+0x30>
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	3b03      	subs	r3, #3
 800244e:	e000      	b.n	8002452 <NVIC_EncodePriority+0x32>
 8002450:	2300      	movs	r3, #0
 8002452:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002454:	f04f 32ff 	mov.w	r2, #4294967295
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	43da      	mvns	r2, r3
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	401a      	ands	r2, r3
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002468:	f04f 31ff 	mov.w	r1, #4294967295
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	fa01 f303 	lsl.w	r3, r1, r3
 8002472:	43d9      	mvns	r1, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002478:	4313      	orrs	r3, r2
         );
}
 800247a:	4618      	mov	r0, r3
 800247c:	3724      	adds	r7, #36	; 0x24
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
	...

08002488 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	3b01      	subs	r3, #1
 8002494:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002498:	d301      	bcc.n	800249e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800249a:	2301      	movs	r3, #1
 800249c:	e00f      	b.n	80024be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800249e:	4a0a      	ldr	r2, [pc, #40]	; (80024c8 <SysTick_Config+0x40>)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	3b01      	subs	r3, #1
 80024a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024a6:	210f      	movs	r1, #15
 80024a8:	f04f 30ff 	mov.w	r0, #4294967295
 80024ac:	f7ff ff8e 	bl	80023cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024b0:	4b05      	ldr	r3, [pc, #20]	; (80024c8 <SysTick_Config+0x40>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024b6:	4b04      	ldr	r3, [pc, #16]	; (80024c8 <SysTick_Config+0x40>)
 80024b8:	2207      	movs	r2, #7
 80024ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	e000e010 	.word	0xe000e010

080024cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f7ff ff29 	bl	800232c <__NVIC_SetPriorityGrouping>
}
 80024da:	bf00      	nop
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b086      	sub	sp, #24
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	4603      	mov	r3, r0
 80024ea:	60b9      	str	r1, [r7, #8]
 80024ec:	607a      	str	r2, [r7, #4]
 80024ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80024f0:	2300      	movs	r3, #0
 80024f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80024f4:	f7ff ff3e 	bl	8002374 <__NVIC_GetPriorityGrouping>
 80024f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	68b9      	ldr	r1, [r7, #8]
 80024fe:	6978      	ldr	r0, [r7, #20]
 8002500:	f7ff ff8e 	bl	8002420 <NVIC_EncodePriority>
 8002504:	4602      	mov	r2, r0
 8002506:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800250a:	4611      	mov	r1, r2
 800250c:	4618      	mov	r0, r3
 800250e:	f7ff ff5d 	bl	80023cc <__NVIC_SetPriority>
}
 8002512:	bf00      	nop
 8002514:	3718      	adds	r7, #24
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	b082      	sub	sp, #8
 800251e:	af00      	add	r7, sp, #0
 8002520:	4603      	mov	r3, r0
 8002522:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff ff31 	bl	8002390 <__NVIC_EnableIRQ>
}
 800252e:	bf00      	nop
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b082      	sub	sp, #8
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f7ff ffa2 	bl	8002488 <SysTick_Config>
 8002544:	4603      	mov	r3, r0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
	...

08002550 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002550:	b480      	push	{r7}
 8002552:	b087      	sub	sp, #28
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800255a:	2300      	movs	r3, #0
 800255c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800255e:	e17f      	b.n	8002860 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	2101      	movs	r1, #1
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	fa01 f303 	lsl.w	r3, r1, r3
 800256c:	4013      	ands	r3, r2
 800256e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2b00      	cmp	r3, #0
 8002574:	f000 8171 	beq.w	800285a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f003 0303 	and.w	r3, r3, #3
 8002580:	2b01      	cmp	r3, #1
 8002582:	d005      	beq.n	8002590 <HAL_GPIO_Init+0x40>
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f003 0303 	and.w	r3, r3, #3
 800258c:	2b02      	cmp	r3, #2
 800258e:	d130      	bne.n	80025f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	2203      	movs	r2, #3
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	43db      	mvns	r3, r3
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	4013      	ands	r3, r2
 80025a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	68da      	ldr	r2, [r3, #12]
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80025c6:	2201      	movs	r2, #1
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	fa02 f303 	lsl.w	r3, r2, r3
 80025ce:	43db      	mvns	r3, r3
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	4013      	ands	r3, r2
 80025d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	091b      	lsrs	r3, r3, #4
 80025dc:	f003 0201 	and.w	r2, r3, #1
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	fa02 f303 	lsl.w	r3, r2, r3
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f003 0303 	and.w	r3, r3, #3
 80025fa:	2b03      	cmp	r3, #3
 80025fc:	d118      	bne.n	8002630 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002602:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002604:	2201      	movs	r2, #1
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	43db      	mvns	r3, r3
 800260e:	693a      	ldr	r2, [r7, #16]
 8002610:	4013      	ands	r3, r2
 8002612:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	08db      	lsrs	r3, r3, #3
 800261a:	f003 0201 	and.w	r2, r3, #1
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	4313      	orrs	r3, r2
 8002628:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	693a      	ldr	r2, [r7, #16]
 800262e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f003 0303 	and.w	r3, r3, #3
 8002638:	2b03      	cmp	r3, #3
 800263a:	d017      	beq.n	800266c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	2203      	movs	r2, #3
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	43db      	mvns	r3, r3
 800264e:	693a      	ldr	r2, [r7, #16]
 8002650:	4013      	ands	r3, r2
 8002652:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	689a      	ldr	r2, [r3, #8]
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	693a      	ldr	r2, [r7, #16]
 8002662:	4313      	orrs	r3, r2
 8002664:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f003 0303 	and.w	r3, r3, #3
 8002674:	2b02      	cmp	r3, #2
 8002676:	d123      	bne.n	80026c0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	08da      	lsrs	r2, r3, #3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	3208      	adds	r2, #8
 8002680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002684:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	f003 0307 	and.w	r3, r3, #7
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	220f      	movs	r2, #15
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	43db      	mvns	r3, r3
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	4013      	ands	r3, r2
 800269a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	691a      	ldr	r2, [r3, #16]
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	f003 0307 	and.w	r3, r3, #7
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ac:	693a      	ldr	r2, [r7, #16]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	08da      	lsrs	r2, r3, #3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	3208      	adds	r2, #8
 80026ba:	6939      	ldr	r1, [r7, #16]
 80026bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	2203      	movs	r2, #3
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	43db      	mvns	r3, r3
 80026d2:	693a      	ldr	r2, [r7, #16]
 80026d4:	4013      	ands	r3, r2
 80026d6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f003 0203 	and.w	r2, r3, #3
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	693a      	ldr	r2, [r7, #16]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	f000 80ac 	beq.w	800285a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002702:	4b5f      	ldr	r3, [pc, #380]	; (8002880 <HAL_GPIO_Init+0x330>)
 8002704:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002706:	4a5e      	ldr	r2, [pc, #376]	; (8002880 <HAL_GPIO_Init+0x330>)
 8002708:	f043 0301 	orr.w	r3, r3, #1
 800270c:	6613      	str	r3, [r2, #96]	; 0x60
 800270e:	4b5c      	ldr	r3, [pc, #368]	; (8002880 <HAL_GPIO_Init+0x330>)
 8002710:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	60bb      	str	r3, [r7, #8]
 8002718:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800271a:	4a5a      	ldr	r2, [pc, #360]	; (8002884 <HAL_GPIO_Init+0x334>)
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	089b      	lsrs	r3, r3, #2
 8002720:	3302      	adds	r3, #2
 8002722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002726:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	f003 0303 	and.w	r3, r3, #3
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	220f      	movs	r2, #15
 8002732:	fa02 f303 	lsl.w	r3, r2, r3
 8002736:	43db      	mvns	r3, r3
 8002738:	693a      	ldr	r2, [r7, #16]
 800273a:	4013      	ands	r3, r2
 800273c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002744:	d025      	beq.n	8002792 <HAL_GPIO_Init+0x242>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a4f      	ldr	r2, [pc, #316]	; (8002888 <HAL_GPIO_Init+0x338>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d01f      	beq.n	800278e <HAL_GPIO_Init+0x23e>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a4e      	ldr	r2, [pc, #312]	; (800288c <HAL_GPIO_Init+0x33c>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d019      	beq.n	800278a <HAL_GPIO_Init+0x23a>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a4d      	ldr	r2, [pc, #308]	; (8002890 <HAL_GPIO_Init+0x340>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d013      	beq.n	8002786 <HAL_GPIO_Init+0x236>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a4c      	ldr	r2, [pc, #304]	; (8002894 <HAL_GPIO_Init+0x344>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d00d      	beq.n	8002782 <HAL_GPIO_Init+0x232>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a4b      	ldr	r2, [pc, #300]	; (8002898 <HAL_GPIO_Init+0x348>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d007      	beq.n	800277e <HAL_GPIO_Init+0x22e>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a4a      	ldr	r2, [pc, #296]	; (800289c <HAL_GPIO_Init+0x34c>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d101      	bne.n	800277a <HAL_GPIO_Init+0x22a>
 8002776:	2306      	movs	r3, #6
 8002778:	e00c      	b.n	8002794 <HAL_GPIO_Init+0x244>
 800277a:	2307      	movs	r3, #7
 800277c:	e00a      	b.n	8002794 <HAL_GPIO_Init+0x244>
 800277e:	2305      	movs	r3, #5
 8002780:	e008      	b.n	8002794 <HAL_GPIO_Init+0x244>
 8002782:	2304      	movs	r3, #4
 8002784:	e006      	b.n	8002794 <HAL_GPIO_Init+0x244>
 8002786:	2303      	movs	r3, #3
 8002788:	e004      	b.n	8002794 <HAL_GPIO_Init+0x244>
 800278a:	2302      	movs	r3, #2
 800278c:	e002      	b.n	8002794 <HAL_GPIO_Init+0x244>
 800278e:	2301      	movs	r3, #1
 8002790:	e000      	b.n	8002794 <HAL_GPIO_Init+0x244>
 8002792:	2300      	movs	r3, #0
 8002794:	697a      	ldr	r2, [r7, #20]
 8002796:	f002 0203 	and.w	r2, r2, #3
 800279a:	0092      	lsls	r2, r2, #2
 800279c:	4093      	lsls	r3, r2
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80027a4:	4937      	ldr	r1, [pc, #220]	; (8002884 <HAL_GPIO_Init+0x334>)
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	089b      	lsrs	r3, r3, #2
 80027aa:	3302      	adds	r3, #2
 80027ac:	693a      	ldr	r2, [r7, #16]
 80027ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027b2:	4b3b      	ldr	r3, [pc, #236]	; (80028a0 <HAL_GPIO_Init+0x350>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	43db      	mvns	r3, r3
 80027bc:	693a      	ldr	r2, [r7, #16]
 80027be:	4013      	ands	r3, r2
 80027c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d003      	beq.n	80027d6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80027d6:	4a32      	ldr	r2, [pc, #200]	; (80028a0 <HAL_GPIO_Init+0x350>)
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80027dc:	4b30      	ldr	r3, [pc, #192]	; (80028a0 <HAL_GPIO_Init+0x350>)
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	43db      	mvns	r3, r3
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	4013      	ands	r3, r2
 80027ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d003      	beq.n	8002800 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002800:	4a27      	ldr	r2, [pc, #156]	; (80028a0 <HAL_GPIO_Init+0x350>)
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002806:	4b26      	ldr	r3, [pc, #152]	; (80028a0 <HAL_GPIO_Init+0x350>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	43db      	mvns	r3, r3
 8002810:	693a      	ldr	r2, [r7, #16]
 8002812:	4013      	ands	r3, r2
 8002814:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d003      	beq.n	800282a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	4313      	orrs	r3, r2
 8002828:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800282a:	4a1d      	ldr	r2, [pc, #116]	; (80028a0 <HAL_GPIO_Init+0x350>)
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002830:	4b1b      	ldr	r3, [pc, #108]	; (80028a0 <HAL_GPIO_Init+0x350>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	43db      	mvns	r3, r3
 800283a:	693a      	ldr	r2, [r7, #16]
 800283c:	4013      	ands	r3, r2
 800283e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d003      	beq.n	8002854 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	4313      	orrs	r3, r2
 8002852:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002854:	4a12      	ldr	r2, [pc, #72]	; (80028a0 <HAL_GPIO_Init+0x350>)
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	3301      	adds	r3, #1
 800285e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	fa22 f303 	lsr.w	r3, r2, r3
 800286a:	2b00      	cmp	r3, #0
 800286c:	f47f ae78 	bne.w	8002560 <HAL_GPIO_Init+0x10>
  }
}
 8002870:	bf00      	nop
 8002872:	bf00      	nop
 8002874:	371c      	adds	r7, #28
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	40021000 	.word	0x40021000
 8002884:	40010000 	.word	0x40010000
 8002888:	48000400 	.word	0x48000400
 800288c:	48000800 	.word	0x48000800
 8002890:	48000c00 	.word	0x48000c00
 8002894:	48001000 	.word	0x48001000
 8002898:	48001400 	.word	0x48001400
 800289c:	48001800 	.word	0x48001800
 80028a0:	40010400 	.word	0x40010400

080028a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	460b      	mov	r3, r1
 80028ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	691a      	ldr	r2, [r3, #16]
 80028b4:	887b      	ldrh	r3, [r7, #2]
 80028b6:	4013      	ands	r3, r2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d002      	beq.n	80028c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80028bc:	2301      	movs	r3, #1
 80028be:	73fb      	strb	r3, [r7, #15]
 80028c0:	e001      	b.n	80028c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028c2:	2300      	movs	r3, #0
 80028c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80028c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3714      	adds	r7, #20
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	460b      	mov	r3, r1
 80028de:	807b      	strh	r3, [r7, #2]
 80028e0:	4613      	mov	r3, r2
 80028e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028e4:	787b      	ldrb	r3, [r7, #1]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d003      	beq.n	80028f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028ea:	887a      	ldrh	r2, [r7, #2]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80028f0:	e002      	b.n	80028f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028f2:	887a      	ldrh	r2, [r7, #2]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	4603      	mov	r3, r0
 800290c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800290e:	4b08      	ldr	r3, [pc, #32]	; (8002930 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002910:	695a      	ldr	r2, [r3, #20]
 8002912:	88fb      	ldrh	r3, [r7, #6]
 8002914:	4013      	ands	r3, r2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d006      	beq.n	8002928 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800291a:	4a05      	ldr	r2, [pc, #20]	; (8002930 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800291c:	88fb      	ldrh	r3, [r7, #6]
 800291e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002920:	88fb      	ldrh	r3, [r7, #6]
 8002922:	4618      	mov	r0, r3
 8002924:	f000 f806 	bl	8002934 <HAL_GPIO_EXTI_Callback>
  }
}
 8002928:	bf00      	nop
 800292a:	3708      	adds	r7, #8
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	40010400 	.word	0x40010400

08002934 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	4603      	mov	r3, r0
 800293c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800293e:	bf00      	nop
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
	...

0800294c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002950:	4b04      	ldr	r3, [pc, #16]	; (8002964 <HAL_PWREx_GetVoltageRange+0x18>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002958:	4618      	mov	r0, r3
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	40007000 	.word	0x40007000

08002968 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002968:	b480      	push	{r7}
 800296a:	b085      	sub	sp, #20
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002976:	d130      	bne.n	80029da <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002978:	4b23      	ldr	r3, [pc, #140]	; (8002a08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002980:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002984:	d038      	beq.n	80029f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002986:	4b20      	ldr	r3, [pc, #128]	; (8002a08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800298e:	4a1e      	ldr	r2, [pc, #120]	; (8002a08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002990:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002994:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002996:	4b1d      	ldr	r3, [pc, #116]	; (8002a0c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2232      	movs	r2, #50	; 0x32
 800299c:	fb02 f303 	mul.w	r3, r2, r3
 80029a0:	4a1b      	ldr	r2, [pc, #108]	; (8002a10 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80029a2:	fba2 2303 	umull	r2, r3, r2, r3
 80029a6:	0c9b      	lsrs	r3, r3, #18
 80029a8:	3301      	adds	r3, #1
 80029aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029ac:	e002      	b.n	80029b4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	3b01      	subs	r3, #1
 80029b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029b4:	4b14      	ldr	r3, [pc, #80]	; (8002a08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029b6:	695b      	ldr	r3, [r3, #20]
 80029b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029c0:	d102      	bne.n	80029c8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d1f2      	bne.n	80029ae <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80029c8:	4b0f      	ldr	r3, [pc, #60]	; (8002a08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029ca:	695b      	ldr	r3, [r3, #20]
 80029cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029d4:	d110      	bne.n	80029f8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e00f      	b.n	80029fa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80029da:	4b0b      	ldr	r3, [pc, #44]	; (8002a08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80029e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029e6:	d007      	beq.n	80029f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80029e8:	4b07      	ldr	r3, [pc, #28]	; (8002a08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80029f0:	4a05      	ldr	r2, [pc, #20]	; (8002a08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029f6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3714      	adds	r7, #20
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	40007000 	.word	0x40007000
 8002a0c:	20000000 	.word	0x20000000
 8002a10:	431bde83 	.word	0x431bde83

08002a14 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b088      	sub	sp, #32
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d101      	bne.n	8002a26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e3ca      	b.n	80031bc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a26:	4b97      	ldr	r3, [pc, #604]	; (8002c84 <HAL_RCC_OscConfig+0x270>)
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f003 030c 	and.w	r3, r3, #12
 8002a2e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a30:	4b94      	ldr	r3, [pc, #592]	; (8002c84 <HAL_RCC_OscConfig+0x270>)
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	f003 0303 	and.w	r3, r3, #3
 8002a38:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0310 	and.w	r3, r3, #16
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	f000 80e4 	beq.w	8002c10 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d007      	beq.n	8002a5e <HAL_RCC_OscConfig+0x4a>
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	2b0c      	cmp	r3, #12
 8002a52:	f040 808b 	bne.w	8002b6c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	f040 8087 	bne.w	8002b6c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a5e:	4b89      	ldr	r3, [pc, #548]	; (8002c84 <HAL_RCC_OscConfig+0x270>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d005      	beq.n	8002a76 <HAL_RCC_OscConfig+0x62>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d101      	bne.n	8002a76 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e3a2      	b.n	80031bc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a1a      	ldr	r2, [r3, #32]
 8002a7a:	4b82      	ldr	r3, [pc, #520]	; (8002c84 <HAL_RCC_OscConfig+0x270>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0308 	and.w	r3, r3, #8
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d004      	beq.n	8002a90 <HAL_RCC_OscConfig+0x7c>
 8002a86:	4b7f      	ldr	r3, [pc, #508]	; (8002c84 <HAL_RCC_OscConfig+0x270>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a8e:	e005      	b.n	8002a9c <HAL_RCC_OscConfig+0x88>
 8002a90:	4b7c      	ldr	r3, [pc, #496]	; (8002c84 <HAL_RCC_OscConfig+0x270>)
 8002a92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a96:	091b      	lsrs	r3, r3, #4
 8002a98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d223      	bcs.n	8002ae8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a1b      	ldr	r3, [r3, #32]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f000 fd55 	bl	8003554 <RCC_SetFlashLatencyFromMSIRange>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e383      	b.n	80031bc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ab4:	4b73      	ldr	r3, [pc, #460]	; (8002c84 <HAL_RCC_OscConfig+0x270>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a72      	ldr	r2, [pc, #456]	; (8002c84 <HAL_RCC_OscConfig+0x270>)
 8002aba:	f043 0308 	orr.w	r3, r3, #8
 8002abe:	6013      	str	r3, [r2, #0]
 8002ac0:	4b70      	ldr	r3, [pc, #448]	; (8002c84 <HAL_RCC_OscConfig+0x270>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6a1b      	ldr	r3, [r3, #32]
 8002acc:	496d      	ldr	r1, [pc, #436]	; (8002c84 <HAL_RCC_OscConfig+0x270>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ad2:	4b6c      	ldr	r3, [pc, #432]	; (8002c84 <HAL_RCC_OscConfig+0x270>)
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	69db      	ldr	r3, [r3, #28]
 8002ade:	021b      	lsls	r3, r3, #8
 8002ae0:	4968      	ldr	r1, [pc, #416]	; (8002c84 <HAL_RCC_OscConfig+0x270>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	604b      	str	r3, [r1, #4]
 8002ae6:	e025      	b.n	8002b34 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ae8:	4b66      	ldr	r3, [pc, #408]	; (8002c84 <HAL_RCC_OscConfig+0x270>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a65      	ldr	r2, [pc, #404]	; (8002c84 <HAL_RCC_OscConfig+0x270>)
 8002aee:	f043 0308 	orr.w	r3, r3, #8
 8002af2:	6013      	str	r3, [r2, #0]
 8002af4:	4b63      	ldr	r3, [pc, #396]	; (8002c84 <HAL_RCC_OscConfig+0x270>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a1b      	ldr	r3, [r3, #32]
 8002b00:	4960      	ldr	r1, [pc, #384]	; (8002c84 <HAL_RCC_OscConfig+0x270>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b06:	4b5f      	ldr	r3, [pc, #380]	; (8002c84 <HAL_RCC_OscConfig+0x270>)
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	69db      	ldr	r3, [r3, #28]
 8002b12:	021b      	lsls	r3, r3, #8
 8002b14:	495b      	ldr	r1, [pc, #364]	; (8002c84 <HAL_RCC_OscConfig+0x270>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d109      	bne.n	8002b34 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a1b      	ldr	r3, [r3, #32]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f000 fd15 	bl	8003554 <RCC_SetFlashLatencyFromMSIRange>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d001      	beq.n	8002b34 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e343      	b.n	80031bc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b34:	f000 fc4a 	bl	80033cc <HAL_RCC_GetSysClockFreq>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	4b52      	ldr	r3, [pc, #328]	; (8002c84 <HAL_RCC_OscConfig+0x270>)
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	091b      	lsrs	r3, r3, #4
 8002b40:	f003 030f 	and.w	r3, r3, #15
 8002b44:	4950      	ldr	r1, [pc, #320]	; (8002c88 <HAL_RCC_OscConfig+0x274>)
 8002b46:	5ccb      	ldrb	r3, [r1, r3]
 8002b48:	f003 031f 	and.w	r3, r3, #31
 8002b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b50:	4a4e      	ldr	r2, [pc, #312]	; (8002c8c <HAL_RCC_OscConfig+0x278>)
 8002b52:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b54:	4b4e      	ldr	r3, [pc, #312]	; (8002c90 <HAL_RCC_OscConfig+0x27c>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7ff fb67 	bl	800222c <HAL_InitTick>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002b62:	7bfb      	ldrb	r3, [r7, #15]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d052      	beq.n	8002c0e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002b68:	7bfb      	ldrb	r3, [r7, #15]
 8002b6a:	e327      	b.n	80031bc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d032      	beq.n	8002bda <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b74:	4b43      	ldr	r3, [pc, #268]	; (8002c84 <HAL_RCC_OscConfig+0x270>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a42      	ldr	r2, [pc, #264]	; (8002c84 <HAL_RCC_OscConfig+0x270>)
 8002b7a:	f043 0301 	orr.w	r3, r3, #1
 8002b7e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b80:	f7ff fba4 	bl	80022cc <HAL_GetTick>
 8002b84:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b86:	e008      	b.n	8002b9a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b88:	f7ff fba0 	bl	80022cc <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e310      	b.n	80031bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b9a:	4b3a      	ldr	r3, [pc, #232]	; (8002c84 <HAL_RCC_OscConfig+0x270>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d0f0      	beq.n	8002b88 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ba6:	4b37      	ldr	r3, [pc, #220]	; (8002c84 <HAL_RCC_OscConfig+0x270>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a36      	ldr	r2, [pc, #216]	; (8002c84 <HAL_RCC_OscConfig+0x270>)
 8002bac:	f043 0308 	orr.w	r3, r3, #8
 8002bb0:	6013      	str	r3, [r2, #0]
 8002bb2:	4b34      	ldr	r3, [pc, #208]	; (8002c84 <HAL_RCC_OscConfig+0x270>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	4931      	ldr	r1, [pc, #196]	; (8002c84 <HAL_RCC_OscConfig+0x270>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bc4:	4b2f      	ldr	r3, [pc, #188]	; (8002c84 <HAL_RCC_OscConfig+0x270>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	69db      	ldr	r3, [r3, #28]
 8002bd0:	021b      	lsls	r3, r3, #8
 8002bd2:	492c      	ldr	r1, [pc, #176]	; (8002c84 <HAL_RCC_OscConfig+0x270>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	604b      	str	r3, [r1, #4]
 8002bd8:	e01a      	b.n	8002c10 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002bda:	4b2a      	ldr	r3, [pc, #168]	; (8002c84 <HAL_RCC_OscConfig+0x270>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a29      	ldr	r2, [pc, #164]	; (8002c84 <HAL_RCC_OscConfig+0x270>)
 8002be0:	f023 0301 	bic.w	r3, r3, #1
 8002be4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002be6:	f7ff fb71 	bl	80022cc <HAL_GetTick>
 8002bea:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bec:	e008      	b.n	8002c00 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bee:	f7ff fb6d 	bl	80022cc <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d901      	bls.n	8002c00 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e2dd      	b.n	80031bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c00:	4b20      	ldr	r3, [pc, #128]	; (8002c84 <HAL_RCC_OscConfig+0x270>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0302 	and.w	r3, r3, #2
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d1f0      	bne.n	8002bee <HAL_RCC_OscConfig+0x1da>
 8002c0c:	e000      	b.n	8002c10 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c0e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0301 	and.w	r3, r3, #1
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d074      	beq.n	8002d06 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	2b08      	cmp	r3, #8
 8002c20:	d005      	beq.n	8002c2e <HAL_RCC_OscConfig+0x21a>
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	2b0c      	cmp	r3, #12
 8002c26:	d10e      	bne.n	8002c46 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	2b03      	cmp	r3, #3
 8002c2c:	d10b      	bne.n	8002c46 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c2e:	4b15      	ldr	r3, [pc, #84]	; (8002c84 <HAL_RCC_OscConfig+0x270>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d064      	beq.n	8002d04 <HAL_RCC_OscConfig+0x2f0>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d160      	bne.n	8002d04 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e2ba      	b.n	80031bc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c4e:	d106      	bne.n	8002c5e <HAL_RCC_OscConfig+0x24a>
 8002c50:	4b0c      	ldr	r3, [pc, #48]	; (8002c84 <HAL_RCC_OscConfig+0x270>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a0b      	ldr	r2, [pc, #44]	; (8002c84 <HAL_RCC_OscConfig+0x270>)
 8002c56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c5a:	6013      	str	r3, [r2, #0]
 8002c5c:	e026      	b.n	8002cac <HAL_RCC_OscConfig+0x298>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c66:	d115      	bne.n	8002c94 <HAL_RCC_OscConfig+0x280>
 8002c68:	4b06      	ldr	r3, [pc, #24]	; (8002c84 <HAL_RCC_OscConfig+0x270>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a05      	ldr	r2, [pc, #20]	; (8002c84 <HAL_RCC_OscConfig+0x270>)
 8002c6e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c72:	6013      	str	r3, [r2, #0]
 8002c74:	4b03      	ldr	r3, [pc, #12]	; (8002c84 <HAL_RCC_OscConfig+0x270>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a02      	ldr	r2, [pc, #8]	; (8002c84 <HAL_RCC_OscConfig+0x270>)
 8002c7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c7e:	6013      	str	r3, [r2, #0]
 8002c80:	e014      	b.n	8002cac <HAL_RCC_OscConfig+0x298>
 8002c82:	bf00      	nop
 8002c84:	40021000 	.word	0x40021000
 8002c88:	08012fb4 	.word	0x08012fb4
 8002c8c:	20000000 	.word	0x20000000
 8002c90:	20000004 	.word	0x20000004
 8002c94:	4ba0      	ldr	r3, [pc, #640]	; (8002f18 <HAL_RCC_OscConfig+0x504>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a9f      	ldr	r2, [pc, #636]	; (8002f18 <HAL_RCC_OscConfig+0x504>)
 8002c9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c9e:	6013      	str	r3, [r2, #0]
 8002ca0:	4b9d      	ldr	r3, [pc, #628]	; (8002f18 <HAL_RCC_OscConfig+0x504>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a9c      	ldr	r2, [pc, #624]	; (8002f18 <HAL_RCC_OscConfig+0x504>)
 8002ca6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002caa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d013      	beq.n	8002cdc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb4:	f7ff fb0a 	bl	80022cc <HAL_GetTick>
 8002cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cba:	e008      	b.n	8002cce <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cbc:	f7ff fb06 	bl	80022cc <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b64      	cmp	r3, #100	; 0x64
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e276      	b.n	80031bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cce:	4b92      	ldr	r3, [pc, #584]	; (8002f18 <HAL_RCC_OscConfig+0x504>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d0f0      	beq.n	8002cbc <HAL_RCC_OscConfig+0x2a8>
 8002cda:	e014      	b.n	8002d06 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cdc:	f7ff faf6 	bl	80022cc <HAL_GetTick>
 8002ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ce2:	e008      	b.n	8002cf6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ce4:	f7ff faf2 	bl	80022cc <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b64      	cmp	r3, #100	; 0x64
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e262      	b.n	80031bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cf6:	4b88      	ldr	r3, [pc, #544]	; (8002f18 <HAL_RCC_OscConfig+0x504>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1f0      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x2d0>
 8002d02:	e000      	b.n	8002d06 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d060      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	2b04      	cmp	r3, #4
 8002d16:	d005      	beq.n	8002d24 <HAL_RCC_OscConfig+0x310>
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	2b0c      	cmp	r3, #12
 8002d1c:	d119      	bne.n	8002d52 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d116      	bne.n	8002d52 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d24:	4b7c      	ldr	r3, [pc, #496]	; (8002f18 <HAL_RCC_OscConfig+0x504>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d005      	beq.n	8002d3c <HAL_RCC_OscConfig+0x328>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d101      	bne.n	8002d3c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e23f      	b.n	80031bc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d3c:	4b76      	ldr	r3, [pc, #472]	; (8002f18 <HAL_RCC_OscConfig+0x504>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	061b      	lsls	r3, r3, #24
 8002d4a:	4973      	ldr	r1, [pc, #460]	; (8002f18 <HAL_RCC_OscConfig+0x504>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d50:	e040      	b.n	8002dd4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d023      	beq.n	8002da2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d5a:	4b6f      	ldr	r3, [pc, #444]	; (8002f18 <HAL_RCC_OscConfig+0x504>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a6e      	ldr	r2, [pc, #440]	; (8002f18 <HAL_RCC_OscConfig+0x504>)
 8002d60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d66:	f7ff fab1 	bl	80022cc <HAL_GetTick>
 8002d6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d6c:	e008      	b.n	8002d80 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d6e:	f7ff faad 	bl	80022cc <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d901      	bls.n	8002d80 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e21d      	b.n	80031bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d80:	4b65      	ldr	r3, [pc, #404]	; (8002f18 <HAL_RCC_OscConfig+0x504>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d0f0      	beq.n	8002d6e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d8c:	4b62      	ldr	r3, [pc, #392]	; (8002f18 <HAL_RCC_OscConfig+0x504>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	691b      	ldr	r3, [r3, #16]
 8002d98:	061b      	lsls	r3, r3, #24
 8002d9a:	495f      	ldr	r1, [pc, #380]	; (8002f18 <HAL_RCC_OscConfig+0x504>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	604b      	str	r3, [r1, #4]
 8002da0:	e018      	b.n	8002dd4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002da2:	4b5d      	ldr	r3, [pc, #372]	; (8002f18 <HAL_RCC_OscConfig+0x504>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a5c      	ldr	r2, [pc, #368]	; (8002f18 <HAL_RCC_OscConfig+0x504>)
 8002da8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002dac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dae:	f7ff fa8d 	bl	80022cc <HAL_GetTick>
 8002db2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002db4:	e008      	b.n	8002dc8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002db6:	f7ff fa89 	bl	80022cc <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d901      	bls.n	8002dc8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e1f9      	b.n	80031bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002dc8:	4b53      	ldr	r3, [pc, #332]	; (8002f18 <HAL_RCC_OscConfig+0x504>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d1f0      	bne.n	8002db6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0308 	and.w	r3, r3, #8
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d03c      	beq.n	8002e5a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	695b      	ldr	r3, [r3, #20]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d01c      	beq.n	8002e22 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002de8:	4b4b      	ldr	r3, [pc, #300]	; (8002f18 <HAL_RCC_OscConfig+0x504>)
 8002dea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dee:	4a4a      	ldr	r2, [pc, #296]	; (8002f18 <HAL_RCC_OscConfig+0x504>)
 8002df0:	f043 0301 	orr.w	r3, r3, #1
 8002df4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002df8:	f7ff fa68 	bl	80022cc <HAL_GetTick>
 8002dfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dfe:	e008      	b.n	8002e12 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e00:	f7ff fa64 	bl	80022cc <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e1d4      	b.n	80031bc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e12:	4b41      	ldr	r3, [pc, #260]	; (8002f18 <HAL_RCC_OscConfig+0x504>)
 8002e14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d0ef      	beq.n	8002e00 <HAL_RCC_OscConfig+0x3ec>
 8002e20:	e01b      	b.n	8002e5a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e22:	4b3d      	ldr	r3, [pc, #244]	; (8002f18 <HAL_RCC_OscConfig+0x504>)
 8002e24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e28:	4a3b      	ldr	r2, [pc, #236]	; (8002f18 <HAL_RCC_OscConfig+0x504>)
 8002e2a:	f023 0301 	bic.w	r3, r3, #1
 8002e2e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e32:	f7ff fa4b 	bl	80022cc <HAL_GetTick>
 8002e36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e38:	e008      	b.n	8002e4c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e3a:	f7ff fa47 	bl	80022cc <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d901      	bls.n	8002e4c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e1b7      	b.n	80031bc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e4c:	4b32      	ldr	r3, [pc, #200]	; (8002f18 <HAL_RCC_OscConfig+0x504>)
 8002e4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d1ef      	bne.n	8002e3a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0304 	and.w	r3, r3, #4
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	f000 80a6 	beq.w	8002fb4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002e6c:	4b2a      	ldr	r3, [pc, #168]	; (8002f18 <HAL_RCC_OscConfig+0x504>)
 8002e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d10d      	bne.n	8002e94 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e78:	4b27      	ldr	r3, [pc, #156]	; (8002f18 <HAL_RCC_OscConfig+0x504>)
 8002e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e7c:	4a26      	ldr	r2, [pc, #152]	; (8002f18 <HAL_RCC_OscConfig+0x504>)
 8002e7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e82:	6593      	str	r3, [r2, #88]	; 0x58
 8002e84:	4b24      	ldr	r3, [pc, #144]	; (8002f18 <HAL_RCC_OscConfig+0x504>)
 8002e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e8c:	60bb      	str	r3, [r7, #8]
 8002e8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e90:	2301      	movs	r3, #1
 8002e92:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e94:	4b21      	ldr	r3, [pc, #132]	; (8002f1c <HAL_RCC_OscConfig+0x508>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d118      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ea0:	4b1e      	ldr	r3, [pc, #120]	; (8002f1c <HAL_RCC_OscConfig+0x508>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a1d      	ldr	r2, [pc, #116]	; (8002f1c <HAL_RCC_OscConfig+0x508>)
 8002ea6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eaa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eac:	f7ff fa0e 	bl	80022cc <HAL_GetTick>
 8002eb0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002eb2:	e008      	b.n	8002ec6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eb4:	f7ff fa0a 	bl	80022cc <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e17a      	b.n	80031bc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ec6:	4b15      	ldr	r3, [pc, #84]	; (8002f1c <HAL_RCC_OscConfig+0x508>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d0f0      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d108      	bne.n	8002eec <HAL_RCC_OscConfig+0x4d8>
 8002eda:	4b0f      	ldr	r3, [pc, #60]	; (8002f18 <HAL_RCC_OscConfig+0x504>)
 8002edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee0:	4a0d      	ldr	r2, [pc, #52]	; (8002f18 <HAL_RCC_OscConfig+0x504>)
 8002ee2:	f043 0301 	orr.w	r3, r3, #1
 8002ee6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002eea:	e029      	b.n	8002f40 <HAL_RCC_OscConfig+0x52c>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	2b05      	cmp	r3, #5
 8002ef2:	d115      	bne.n	8002f20 <HAL_RCC_OscConfig+0x50c>
 8002ef4:	4b08      	ldr	r3, [pc, #32]	; (8002f18 <HAL_RCC_OscConfig+0x504>)
 8002ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002efa:	4a07      	ldr	r2, [pc, #28]	; (8002f18 <HAL_RCC_OscConfig+0x504>)
 8002efc:	f043 0304 	orr.w	r3, r3, #4
 8002f00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f04:	4b04      	ldr	r3, [pc, #16]	; (8002f18 <HAL_RCC_OscConfig+0x504>)
 8002f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f0a:	4a03      	ldr	r2, [pc, #12]	; (8002f18 <HAL_RCC_OscConfig+0x504>)
 8002f0c:	f043 0301 	orr.w	r3, r3, #1
 8002f10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f14:	e014      	b.n	8002f40 <HAL_RCC_OscConfig+0x52c>
 8002f16:	bf00      	nop
 8002f18:	40021000 	.word	0x40021000
 8002f1c:	40007000 	.word	0x40007000
 8002f20:	4b9c      	ldr	r3, [pc, #624]	; (8003194 <HAL_RCC_OscConfig+0x780>)
 8002f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f26:	4a9b      	ldr	r2, [pc, #620]	; (8003194 <HAL_RCC_OscConfig+0x780>)
 8002f28:	f023 0301 	bic.w	r3, r3, #1
 8002f2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f30:	4b98      	ldr	r3, [pc, #608]	; (8003194 <HAL_RCC_OscConfig+0x780>)
 8002f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f36:	4a97      	ldr	r2, [pc, #604]	; (8003194 <HAL_RCC_OscConfig+0x780>)
 8002f38:	f023 0304 	bic.w	r3, r3, #4
 8002f3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d016      	beq.n	8002f76 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f48:	f7ff f9c0 	bl	80022cc <HAL_GetTick>
 8002f4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f4e:	e00a      	b.n	8002f66 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f50:	f7ff f9bc 	bl	80022cc <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e12a      	b.n	80031bc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f66:	4b8b      	ldr	r3, [pc, #556]	; (8003194 <HAL_RCC_OscConfig+0x780>)
 8002f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f6c:	f003 0302 	and.w	r3, r3, #2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d0ed      	beq.n	8002f50 <HAL_RCC_OscConfig+0x53c>
 8002f74:	e015      	b.n	8002fa2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f76:	f7ff f9a9 	bl	80022cc <HAL_GetTick>
 8002f7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f7c:	e00a      	b.n	8002f94 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f7e:	f7ff f9a5 	bl	80022cc <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d901      	bls.n	8002f94 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e113      	b.n	80031bc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f94:	4b7f      	ldr	r3, [pc, #508]	; (8003194 <HAL_RCC_OscConfig+0x780>)
 8002f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1ed      	bne.n	8002f7e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fa2:	7ffb      	ldrb	r3, [r7, #31]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d105      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fa8:	4b7a      	ldr	r3, [pc, #488]	; (8003194 <HAL_RCC_OscConfig+0x780>)
 8002faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fac:	4a79      	ldr	r2, [pc, #484]	; (8003194 <HAL_RCC_OscConfig+0x780>)
 8002fae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fb2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f000 80fe 	beq.w	80031ba <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	f040 80d0 	bne.w	8003168 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002fc8:	4b72      	ldr	r3, [pc, #456]	; (8003194 <HAL_RCC_OscConfig+0x780>)
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	f003 0203 	and.w	r2, r3, #3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d130      	bne.n	800303e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d127      	bne.n	800303e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ff8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d11f      	bne.n	800303e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003008:	2a07      	cmp	r2, #7
 800300a:	bf14      	ite	ne
 800300c:	2201      	movne	r2, #1
 800300e:	2200      	moveq	r2, #0
 8003010:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003012:	4293      	cmp	r3, r2
 8003014:	d113      	bne.n	800303e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003020:	085b      	lsrs	r3, r3, #1
 8003022:	3b01      	subs	r3, #1
 8003024:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003026:	429a      	cmp	r2, r3
 8003028:	d109      	bne.n	800303e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003034:	085b      	lsrs	r3, r3, #1
 8003036:	3b01      	subs	r3, #1
 8003038:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800303a:	429a      	cmp	r2, r3
 800303c:	d06e      	beq.n	800311c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	2b0c      	cmp	r3, #12
 8003042:	d069      	beq.n	8003118 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003044:	4b53      	ldr	r3, [pc, #332]	; (8003194 <HAL_RCC_OscConfig+0x780>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d105      	bne.n	800305c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003050:	4b50      	ldr	r3, [pc, #320]	; (8003194 <HAL_RCC_OscConfig+0x780>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d001      	beq.n	8003060 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e0ad      	b.n	80031bc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003060:	4b4c      	ldr	r3, [pc, #304]	; (8003194 <HAL_RCC_OscConfig+0x780>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a4b      	ldr	r2, [pc, #300]	; (8003194 <HAL_RCC_OscConfig+0x780>)
 8003066:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800306a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800306c:	f7ff f92e 	bl	80022cc <HAL_GetTick>
 8003070:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003072:	e008      	b.n	8003086 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003074:	f7ff f92a 	bl	80022cc <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b02      	cmp	r3, #2
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e09a      	b.n	80031bc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003086:	4b43      	ldr	r3, [pc, #268]	; (8003194 <HAL_RCC_OscConfig+0x780>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1f0      	bne.n	8003074 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003092:	4b40      	ldr	r3, [pc, #256]	; (8003194 <HAL_RCC_OscConfig+0x780>)
 8003094:	68da      	ldr	r2, [r3, #12]
 8003096:	4b40      	ldr	r3, [pc, #256]	; (8003198 <HAL_RCC_OscConfig+0x784>)
 8003098:	4013      	ands	r3, r2
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80030a2:	3a01      	subs	r2, #1
 80030a4:	0112      	lsls	r2, r2, #4
 80030a6:	4311      	orrs	r1, r2
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80030ac:	0212      	lsls	r2, r2, #8
 80030ae:	4311      	orrs	r1, r2
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80030b4:	0852      	lsrs	r2, r2, #1
 80030b6:	3a01      	subs	r2, #1
 80030b8:	0552      	lsls	r2, r2, #21
 80030ba:	4311      	orrs	r1, r2
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80030c0:	0852      	lsrs	r2, r2, #1
 80030c2:	3a01      	subs	r2, #1
 80030c4:	0652      	lsls	r2, r2, #25
 80030c6:	4311      	orrs	r1, r2
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80030cc:	0912      	lsrs	r2, r2, #4
 80030ce:	0452      	lsls	r2, r2, #17
 80030d0:	430a      	orrs	r2, r1
 80030d2:	4930      	ldr	r1, [pc, #192]	; (8003194 <HAL_RCC_OscConfig+0x780>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80030d8:	4b2e      	ldr	r3, [pc, #184]	; (8003194 <HAL_RCC_OscConfig+0x780>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a2d      	ldr	r2, [pc, #180]	; (8003194 <HAL_RCC_OscConfig+0x780>)
 80030de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030e2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030e4:	4b2b      	ldr	r3, [pc, #172]	; (8003194 <HAL_RCC_OscConfig+0x780>)
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	4a2a      	ldr	r2, [pc, #168]	; (8003194 <HAL_RCC_OscConfig+0x780>)
 80030ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030ee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030f0:	f7ff f8ec 	bl	80022cc <HAL_GetTick>
 80030f4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030f6:	e008      	b.n	800310a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030f8:	f7ff f8e8 	bl	80022cc <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b02      	cmp	r3, #2
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e058      	b.n	80031bc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800310a:	4b22      	ldr	r3, [pc, #136]	; (8003194 <HAL_RCC_OscConfig+0x780>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d0f0      	beq.n	80030f8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003116:	e050      	b.n	80031ba <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e04f      	b.n	80031bc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800311c:	4b1d      	ldr	r3, [pc, #116]	; (8003194 <HAL_RCC_OscConfig+0x780>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d148      	bne.n	80031ba <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003128:	4b1a      	ldr	r3, [pc, #104]	; (8003194 <HAL_RCC_OscConfig+0x780>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a19      	ldr	r2, [pc, #100]	; (8003194 <HAL_RCC_OscConfig+0x780>)
 800312e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003132:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003134:	4b17      	ldr	r3, [pc, #92]	; (8003194 <HAL_RCC_OscConfig+0x780>)
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	4a16      	ldr	r2, [pc, #88]	; (8003194 <HAL_RCC_OscConfig+0x780>)
 800313a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800313e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003140:	f7ff f8c4 	bl	80022cc <HAL_GetTick>
 8003144:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003146:	e008      	b.n	800315a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003148:	f7ff f8c0 	bl	80022cc <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b02      	cmp	r3, #2
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e030      	b.n	80031bc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800315a:	4b0e      	ldr	r3, [pc, #56]	; (8003194 <HAL_RCC_OscConfig+0x780>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d0f0      	beq.n	8003148 <HAL_RCC_OscConfig+0x734>
 8003166:	e028      	b.n	80031ba <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	2b0c      	cmp	r3, #12
 800316c:	d023      	beq.n	80031b6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800316e:	4b09      	ldr	r3, [pc, #36]	; (8003194 <HAL_RCC_OscConfig+0x780>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a08      	ldr	r2, [pc, #32]	; (8003194 <HAL_RCC_OscConfig+0x780>)
 8003174:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003178:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800317a:	f7ff f8a7 	bl	80022cc <HAL_GetTick>
 800317e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003180:	e00c      	b.n	800319c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003182:	f7ff f8a3 	bl	80022cc <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	2b02      	cmp	r3, #2
 800318e:	d905      	bls.n	800319c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e013      	b.n	80031bc <HAL_RCC_OscConfig+0x7a8>
 8003194:	40021000 	.word	0x40021000
 8003198:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800319c:	4b09      	ldr	r3, [pc, #36]	; (80031c4 <HAL_RCC_OscConfig+0x7b0>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d1ec      	bne.n	8003182 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80031a8:	4b06      	ldr	r3, [pc, #24]	; (80031c4 <HAL_RCC_OscConfig+0x7b0>)
 80031aa:	68da      	ldr	r2, [r3, #12]
 80031ac:	4905      	ldr	r1, [pc, #20]	; (80031c4 <HAL_RCC_OscConfig+0x7b0>)
 80031ae:	4b06      	ldr	r3, [pc, #24]	; (80031c8 <HAL_RCC_OscConfig+0x7b4>)
 80031b0:	4013      	ands	r3, r2
 80031b2:	60cb      	str	r3, [r1, #12]
 80031b4:	e001      	b.n	80031ba <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e000      	b.n	80031bc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80031ba:	2300      	movs	r3, #0
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3720      	adds	r7, #32
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	40021000 	.word	0x40021000
 80031c8:	feeefffc 	.word	0xfeeefffc

080031cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d101      	bne.n	80031e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e0e7      	b.n	80033b0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031e0:	4b75      	ldr	r3, [pc, #468]	; (80033b8 <HAL_RCC_ClockConfig+0x1ec>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0307 	and.w	r3, r3, #7
 80031e8:	683a      	ldr	r2, [r7, #0]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d910      	bls.n	8003210 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ee:	4b72      	ldr	r3, [pc, #456]	; (80033b8 <HAL_RCC_ClockConfig+0x1ec>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f023 0207 	bic.w	r2, r3, #7
 80031f6:	4970      	ldr	r1, [pc, #448]	; (80033b8 <HAL_RCC_ClockConfig+0x1ec>)
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031fe:	4b6e      	ldr	r3, [pc, #440]	; (80033b8 <HAL_RCC_ClockConfig+0x1ec>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0307 	and.w	r3, r3, #7
 8003206:	683a      	ldr	r2, [r7, #0]
 8003208:	429a      	cmp	r2, r3
 800320a:	d001      	beq.n	8003210 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e0cf      	b.n	80033b0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0302 	and.w	r3, r3, #2
 8003218:	2b00      	cmp	r3, #0
 800321a:	d010      	beq.n	800323e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	689a      	ldr	r2, [r3, #8]
 8003220:	4b66      	ldr	r3, [pc, #408]	; (80033bc <HAL_RCC_ClockConfig+0x1f0>)
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003228:	429a      	cmp	r2, r3
 800322a:	d908      	bls.n	800323e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800322c:	4b63      	ldr	r3, [pc, #396]	; (80033bc <HAL_RCC_ClockConfig+0x1f0>)
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	4960      	ldr	r1, [pc, #384]	; (80033bc <HAL_RCC_ClockConfig+0x1f0>)
 800323a:	4313      	orrs	r3, r2
 800323c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	2b00      	cmp	r3, #0
 8003248:	d04c      	beq.n	80032e4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	2b03      	cmp	r3, #3
 8003250:	d107      	bne.n	8003262 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003252:	4b5a      	ldr	r3, [pc, #360]	; (80033bc <HAL_RCC_ClockConfig+0x1f0>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d121      	bne.n	80032a2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e0a6      	b.n	80033b0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	2b02      	cmp	r3, #2
 8003268:	d107      	bne.n	800327a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800326a:	4b54      	ldr	r3, [pc, #336]	; (80033bc <HAL_RCC_ClockConfig+0x1f0>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d115      	bne.n	80032a2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e09a      	b.n	80033b0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d107      	bne.n	8003292 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003282:	4b4e      	ldr	r3, [pc, #312]	; (80033bc <HAL_RCC_ClockConfig+0x1f0>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d109      	bne.n	80032a2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e08e      	b.n	80033b0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003292:	4b4a      	ldr	r3, [pc, #296]	; (80033bc <HAL_RCC_ClockConfig+0x1f0>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e086      	b.n	80033b0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032a2:	4b46      	ldr	r3, [pc, #280]	; (80033bc <HAL_RCC_ClockConfig+0x1f0>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f023 0203 	bic.w	r2, r3, #3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	4943      	ldr	r1, [pc, #268]	; (80033bc <HAL_RCC_ClockConfig+0x1f0>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032b4:	f7ff f80a 	bl	80022cc <HAL_GetTick>
 80032b8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ba:	e00a      	b.n	80032d2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032bc:	f7ff f806 	bl	80022cc <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e06e      	b.n	80033b0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032d2:	4b3a      	ldr	r3, [pc, #232]	; (80033bc <HAL_RCC_ClockConfig+0x1f0>)
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f003 020c 	and.w	r2, r3, #12
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d1eb      	bne.n	80032bc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0302 	and.w	r3, r3, #2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d010      	beq.n	8003312 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	689a      	ldr	r2, [r3, #8]
 80032f4:	4b31      	ldr	r3, [pc, #196]	; (80033bc <HAL_RCC_ClockConfig+0x1f0>)
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d208      	bcs.n	8003312 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003300:	4b2e      	ldr	r3, [pc, #184]	; (80033bc <HAL_RCC_ClockConfig+0x1f0>)
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	492b      	ldr	r1, [pc, #172]	; (80033bc <HAL_RCC_ClockConfig+0x1f0>)
 800330e:	4313      	orrs	r3, r2
 8003310:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003312:	4b29      	ldr	r3, [pc, #164]	; (80033b8 <HAL_RCC_ClockConfig+0x1ec>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0307 	and.w	r3, r3, #7
 800331a:	683a      	ldr	r2, [r7, #0]
 800331c:	429a      	cmp	r2, r3
 800331e:	d210      	bcs.n	8003342 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003320:	4b25      	ldr	r3, [pc, #148]	; (80033b8 <HAL_RCC_ClockConfig+0x1ec>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f023 0207 	bic.w	r2, r3, #7
 8003328:	4923      	ldr	r1, [pc, #140]	; (80033b8 <HAL_RCC_ClockConfig+0x1ec>)
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	4313      	orrs	r3, r2
 800332e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003330:	4b21      	ldr	r3, [pc, #132]	; (80033b8 <HAL_RCC_ClockConfig+0x1ec>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0307 	and.w	r3, r3, #7
 8003338:	683a      	ldr	r2, [r7, #0]
 800333a:	429a      	cmp	r2, r3
 800333c:	d001      	beq.n	8003342 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e036      	b.n	80033b0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0304 	and.w	r3, r3, #4
 800334a:	2b00      	cmp	r3, #0
 800334c:	d008      	beq.n	8003360 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800334e:	4b1b      	ldr	r3, [pc, #108]	; (80033bc <HAL_RCC_ClockConfig+0x1f0>)
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	4918      	ldr	r1, [pc, #96]	; (80033bc <HAL_RCC_ClockConfig+0x1f0>)
 800335c:	4313      	orrs	r3, r2
 800335e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0308 	and.w	r3, r3, #8
 8003368:	2b00      	cmp	r3, #0
 800336a:	d009      	beq.n	8003380 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800336c:	4b13      	ldr	r3, [pc, #76]	; (80033bc <HAL_RCC_ClockConfig+0x1f0>)
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	00db      	lsls	r3, r3, #3
 800337a:	4910      	ldr	r1, [pc, #64]	; (80033bc <HAL_RCC_ClockConfig+0x1f0>)
 800337c:	4313      	orrs	r3, r2
 800337e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003380:	f000 f824 	bl	80033cc <HAL_RCC_GetSysClockFreq>
 8003384:	4602      	mov	r2, r0
 8003386:	4b0d      	ldr	r3, [pc, #52]	; (80033bc <HAL_RCC_ClockConfig+0x1f0>)
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	091b      	lsrs	r3, r3, #4
 800338c:	f003 030f 	and.w	r3, r3, #15
 8003390:	490b      	ldr	r1, [pc, #44]	; (80033c0 <HAL_RCC_ClockConfig+0x1f4>)
 8003392:	5ccb      	ldrb	r3, [r1, r3]
 8003394:	f003 031f 	and.w	r3, r3, #31
 8003398:	fa22 f303 	lsr.w	r3, r2, r3
 800339c:	4a09      	ldr	r2, [pc, #36]	; (80033c4 <HAL_RCC_ClockConfig+0x1f8>)
 800339e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80033a0:	4b09      	ldr	r3, [pc, #36]	; (80033c8 <HAL_RCC_ClockConfig+0x1fc>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7fe ff41 	bl	800222c <HAL_InitTick>
 80033aa:	4603      	mov	r3, r0
 80033ac:	72fb      	strb	r3, [r7, #11]

  return status;
 80033ae:	7afb      	ldrb	r3, [r7, #11]
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3710      	adds	r7, #16
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	40022000 	.word	0x40022000
 80033bc:	40021000 	.word	0x40021000
 80033c0:	08012fb4 	.word	0x08012fb4
 80033c4:	20000000 	.word	0x20000000
 80033c8:	20000004 	.word	0x20000004

080033cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b089      	sub	sp, #36	; 0x24
 80033d0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80033d2:	2300      	movs	r3, #0
 80033d4:	61fb      	str	r3, [r7, #28]
 80033d6:	2300      	movs	r3, #0
 80033d8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033da:	4b3e      	ldr	r3, [pc, #248]	; (80034d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f003 030c 	and.w	r3, r3, #12
 80033e2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033e4:	4b3b      	ldr	r3, [pc, #236]	; (80034d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	f003 0303 	and.w	r3, r3, #3
 80033ec:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d005      	beq.n	8003400 <HAL_RCC_GetSysClockFreq+0x34>
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	2b0c      	cmp	r3, #12
 80033f8:	d121      	bne.n	800343e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d11e      	bne.n	800343e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003400:	4b34      	ldr	r3, [pc, #208]	; (80034d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0308 	and.w	r3, r3, #8
 8003408:	2b00      	cmp	r3, #0
 800340a:	d107      	bne.n	800341c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800340c:	4b31      	ldr	r3, [pc, #196]	; (80034d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800340e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003412:	0a1b      	lsrs	r3, r3, #8
 8003414:	f003 030f 	and.w	r3, r3, #15
 8003418:	61fb      	str	r3, [r7, #28]
 800341a:	e005      	b.n	8003428 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800341c:	4b2d      	ldr	r3, [pc, #180]	; (80034d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	091b      	lsrs	r3, r3, #4
 8003422:	f003 030f 	and.w	r3, r3, #15
 8003426:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003428:	4a2b      	ldr	r2, [pc, #172]	; (80034d8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003430:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d10d      	bne.n	8003454 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800343c:	e00a      	b.n	8003454 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	2b04      	cmp	r3, #4
 8003442:	d102      	bne.n	800344a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003444:	4b25      	ldr	r3, [pc, #148]	; (80034dc <HAL_RCC_GetSysClockFreq+0x110>)
 8003446:	61bb      	str	r3, [r7, #24]
 8003448:	e004      	b.n	8003454 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	2b08      	cmp	r3, #8
 800344e:	d101      	bne.n	8003454 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003450:	4b23      	ldr	r3, [pc, #140]	; (80034e0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003452:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	2b0c      	cmp	r3, #12
 8003458:	d134      	bne.n	80034c4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800345a:	4b1e      	ldr	r3, [pc, #120]	; (80034d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	f003 0303 	and.w	r3, r3, #3
 8003462:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	2b02      	cmp	r3, #2
 8003468:	d003      	beq.n	8003472 <HAL_RCC_GetSysClockFreq+0xa6>
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	2b03      	cmp	r3, #3
 800346e:	d003      	beq.n	8003478 <HAL_RCC_GetSysClockFreq+0xac>
 8003470:	e005      	b.n	800347e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003472:	4b1a      	ldr	r3, [pc, #104]	; (80034dc <HAL_RCC_GetSysClockFreq+0x110>)
 8003474:	617b      	str	r3, [r7, #20]
      break;
 8003476:	e005      	b.n	8003484 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003478:	4b19      	ldr	r3, [pc, #100]	; (80034e0 <HAL_RCC_GetSysClockFreq+0x114>)
 800347a:	617b      	str	r3, [r7, #20]
      break;
 800347c:	e002      	b.n	8003484 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	617b      	str	r3, [r7, #20]
      break;
 8003482:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003484:	4b13      	ldr	r3, [pc, #76]	; (80034d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	091b      	lsrs	r3, r3, #4
 800348a:	f003 0307 	and.w	r3, r3, #7
 800348e:	3301      	adds	r3, #1
 8003490:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003492:	4b10      	ldr	r3, [pc, #64]	; (80034d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	0a1b      	lsrs	r3, r3, #8
 8003498:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800349c:	697a      	ldr	r2, [r7, #20]
 800349e:	fb03 f202 	mul.w	r2, r3, r2
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80034aa:	4b0a      	ldr	r3, [pc, #40]	; (80034d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	0e5b      	lsrs	r3, r3, #25
 80034b0:	f003 0303 	and.w	r3, r3, #3
 80034b4:	3301      	adds	r3, #1
 80034b6:	005b      	lsls	r3, r3, #1
 80034b8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80034ba:	697a      	ldr	r2, [r7, #20]
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	fbb2 f3f3 	udiv	r3, r2, r3
 80034c2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80034c4:	69bb      	ldr	r3, [r7, #24]
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3724      	adds	r7, #36	; 0x24
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	40021000 	.word	0x40021000
 80034d8:	08012fcc 	.word	0x08012fcc
 80034dc:	00f42400 	.word	0x00f42400
 80034e0:	007a1200 	.word	0x007a1200

080034e4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034e4:	b480      	push	{r7}
 80034e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034e8:	4b03      	ldr	r3, [pc, #12]	; (80034f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80034ea:	681b      	ldr	r3, [r3, #0]
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	20000000 	.word	0x20000000

080034fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003500:	f7ff fff0 	bl	80034e4 <HAL_RCC_GetHCLKFreq>
 8003504:	4602      	mov	r2, r0
 8003506:	4b06      	ldr	r3, [pc, #24]	; (8003520 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	0a1b      	lsrs	r3, r3, #8
 800350c:	f003 0307 	and.w	r3, r3, #7
 8003510:	4904      	ldr	r1, [pc, #16]	; (8003524 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003512:	5ccb      	ldrb	r3, [r1, r3]
 8003514:	f003 031f 	and.w	r3, r3, #31
 8003518:	fa22 f303 	lsr.w	r3, r2, r3
}
 800351c:	4618      	mov	r0, r3
 800351e:	bd80      	pop	{r7, pc}
 8003520:	40021000 	.word	0x40021000
 8003524:	08012fc4 	.word	0x08012fc4

08003528 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800352c:	f7ff ffda 	bl	80034e4 <HAL_RCC_GetHCLKFreq>
 8003530:	4602      	mov	r2, r0
 8003532:	4b06      	ldr	r3, [pc, #24]	; (800354c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	0adb      	lsrs	r3, r3, #11
 8003538:	f003 0307 	and.w	r3, r3, #7
 800353c:	4904      	ldr	r1, [pc, #16]	; (8003550 <HAL_RCC_GetPCLK2Freq+0x28>)
 800353e:	5ccb      	ldrb	r3, [r1, r3]
 8003540:	f003 031f 	and.w	r3, r3, #31
 8003544:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003548:	4618      	mov	r0, r3
 800354a:	bd80      	pop	{r7, pc}
 800354c:	40021000 	.word	0x40021000
 8003550:	08012fc4 	.word	0x08012fc4

08003554 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b086      	sub	sp, #24
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800355c:	2300      	movs	r3, #0
 800355e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003560:	4b2a      	ldr	r3, [pc, #168]	; (800360c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d003      	beq.n	8003574 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800356c:	f7ff f9ee 	bl	800294c <HAL_PWREx_GetVoltageRange>
 8003570:	6178      	str	r0, [r7, #20]
 8003572:	e014      	b.n	800359e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003574:	4b25      	ldr	r3, [pc, #148]	; (800360c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003578:	4a24      	ldr	r2, [pc, #144]	; (800360c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800357a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800357e:	6593      	str	r3, [r2, #88]	; 0x58
 8003580:	4b22      	ldr	r3, [pc, #136]	; (800360c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003588:	60fb      	str	r3, [r7, #12]
 800358a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800358c:	f7ff f9de 	bl	800294c <HAL_PWREx_GetVoltageRange>
 8003590:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003592:	4b1e      	ldr	r3, [pc, #120]	; (800360c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003596:	4a1d      	ldr	r2, [pc, #116]	; (800360c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003598:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800359c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035a4:	d10b      	bne.n	80035be <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2b80      	cmp	r3, #128	; 0x80
 80035aa:	d919      	bls.n	80035e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2ba0      	cmp	r3, #160	; 0xa0
 80035b0:	d902      	bls.n	80035b8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035b2:	2302      	movs	r3, #2
 80035b4:	613b      	str	r3, [r7, #16]
 80035b6:	e013      	b.n	80035e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035b8:	2301      	movs	r3, #1
 80035ba:	613b      	str	r3, [r7, #16]
 80035bc:	e010      	b.n	80035e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2b80      	cmp	r3, #128	; 0x80
 80035c2:	d902      	bls.n	80035ca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80035c4:	2303      	movs	r3, #3
 80035c6:	613b      	str	r3, [r7, #16]
 80035c8:	e00a      	b.n	80035e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2b80      	cmp	r3, #128	; 0x80
 80035ce:	d102      	bne.n	80035d6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035d0:	2302      	movs	r3, #2
 80035d2:	613b      	str	r3, [r7, #16]
 80035d4:	e004      	b.n	80035e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2b70      	cmp	r3, #112	; 0x70
 80035da:	d101      	bne.n	80035e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035dc:	2301      	movs	r3, #1
 80035de:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80035e0:	4b0b      	ldr	r3, [pc, #44]	; (8003610 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f023 0207 	bic.w	r2, r3, #7
 80035e8:	4909      	ldr	r1, [pc, #36]	; (8003610 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80035f0:	4b07      	ldr	r3, [pc, #28]	; (8003610 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0307 	and.w	r3, r3, #7
 80035f8:	693a      	ldr	r2, [r7, #16]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d001      	beq.n	8003602 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e000      	b.n	8003604 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	3718      	adds	r7, #24
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	40021000 	.word	0x40021000
 8003610:	40022000 	.word	0x40022000

08003614 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b086      	sub	sp, #24
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800361c:	2300      	movs	r3, #0
 800361e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003620:	2300      	movs	r3, #0
 8003622:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800362c:	2b00      	cmp	r3, #0
 800362e:	d041      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003634:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003638:	d02a      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800363a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800363e:	d824      	bhi.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003640:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003644:	d008      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003646:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800364a:	d81e      	bhi.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00a      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003650:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003654:	d010      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003656:	e018      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003658:	4b86      	ldr	r3, [pc, #536]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	4a85      	ldr	r2, [pc, #532]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800365e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003662:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003664:	e015      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	3304      	adds	r3, #4
 800366a:	2100      	movs	r1, #0
 800366c:	4618      	mov	r0, r3
 800366e:	f000 fabb 	bl	8003be8 <RCCEx_PLLSAI1_Config>
 8003672:	4603      	mov	r3, r0
 8003674:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003676:	e00c      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	3320      	adds	r3, #32
 800367c:	2100      	movs	r1, #0
 800367e:	4618      	mov	r0, r3
 8003680:	f000 fba6 	bl	8003dd0 <RCCEx_PLLSAI2_Config>
 8003684:	4603      	mov	r3, r0
 8003686:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003688:	e003      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	74fb      	strb	r3, [r7, #19]
      break;
 800368e:	e000      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003690:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003692:	7cfb      	ldrb	r3, [r7, #19]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d10b      	bne.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003698:	4b76      	ldr	r3, [pc, #472]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800369a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800369e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036a6:	4973      	ldr	r1, [pc, #460]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80036ae:	e001      	b.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036b0:	7cfb      	ldrb	r3, [r7, #19]
 80036b2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d041      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036c4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80036c8:	d02a      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80036ca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80036ce:	d824      	bhi.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80036d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036d4:	d008      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80036d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036da:	d81e      	bhi.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d00a      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80036e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036e4:	d010      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80036e6:	e018      	b.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80036e8:	4b62      	ldr	r3, [pc, #392]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	4a61      	ldr	r2, [pc, #388]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036f2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80036f4:	e015      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	3304      	adds	r3, #4
 80036fa:	2100      	movs	r1, #0
 80036fc:	4618      	mov	r0, r3
 80036fe:	f000 fa73 	bl	8003be8 <RCCEx_PLLSAI1_Config>
 8003702:	4603      	mov	r3, r0
 8003704:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003706:	e00c      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	3320      	adds	r3, #32
 800370c:	2100      	movs	r1, #0
 800370e:	4618      	mov	r0, r3
 8003710:	f000 fb5e 	bl	8003dd0 <RCCEx_PLLSAI2_Config>
 8003714:	4603      	mov	r3, r0
 8003716:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003718:	e003      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	74fb      	strb	r3, [r7, #19]
      break;
 800371e:	e000      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003720:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003722:	7cfb      	ldrb	r3, [r7, #19]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d10b      	bne.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003728:	4b52      	ldr	r3, [pc, #328]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800372a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800372e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003736:	494f      	ldr	r1, [pc, #316]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003738:	4313      	orrs	r3, r2
 800373a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800373e:	e001      	b.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003740:	7cfb      	ldrb	r3, [r7, #19]
 8003742:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800374c:	2b00      	cmp	r3, #0
 800374e:	f000 80a0 	beq.w	8003892 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003752:	2300      	movs	r3, #0
 8003754:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003756:	4b47      	ldr	r3, [pc, #284]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800375a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d101      	bne.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003762:	2301      	movs	r3, #1
 8003764:	e000      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003766:	2300      	movs	r3, #0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d00d      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800376c:	4b41      	ldr	r3, [pc, #260]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800376e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003770:	4a40      	ldr	r2, [pc, #256]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003772:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003776:	6593      	str	r3, [r2, #88]	; 0x58
 8003778:	4b3e      	ldr	r3, [pc, #248]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800377a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800377c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003780:	60bb      	str	r3, [r7, #8]
 8003782:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003784:	2301      	movs	r3, #1
 8003786:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003788:	4b3b      	ldr	r3, [pc, #236]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a3a      	ldr	r2, [pc, #232]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800378e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003792:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003794:	f7fe fd9a 	bl	80022cc <HAL_GetTick>
 8003798:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800379a:	e009      	b.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800379c:	f7fe fd96 	bl	80022cc <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d902      	bls.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	74fb      	strb	r3, [r7, #19]
        break;
 80037ae:	e005      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80037b0:	4b31      	ldr	r3, [pc, #196]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d0ef      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80037bc:	7cfb      	ldrb	r3, [r7, #19]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d15c      	bne.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80037c2:	4b2c      	ldr	r3, [pc, #176]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037cc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d01f      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037da:	697a      	ldr	r2, [r7, #20]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d019      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80037e0:	4b24      	ldr	r3, [pc, #144]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037ea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80037ec:	4b21      	ldr	r3, [pc, #132]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f2:	4a20      	ldr	r2, [pc, #128]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80037fc:	4b1d      	ldr	r3, [pc, #116]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003802:	4a1c      	ldr	r2, [pc, #112]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003804:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003808:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800380c:	4a19      	ldr	r2, [pc, #100]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	2b00      	cmp	r3, #0
 800381c:	d016      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800381e:	f7fe fd55 	bl	80022cc <HAL_GetTick>
 8003822:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003824:	e00b      	b.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003826:	f7fe fd51 	bl	80022cc <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	f241 3288 	movw	r2, #5000	; 0x1388
 8003834:	4293      	cmp	r3, r2
 8003836:	d902      	bls.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	74fb      	strb	r3, [r7, #19]
            break;
 800383c:	e006      	b.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800383e:	4b0d      	ldr	r3, [pc, #52]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003844:	f003 0302 	and.w	r3, r3, #2
 8003848:	2b00      	cmp	r3, #0
 800384a:	d0ec      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800384c:	7cfb      	ldrb	r3, [r7, #19]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d10c      	bne.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003852:	4b08      	ldr	r3, [pc, #32]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003854:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003858:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003862:	4904      	ldr	r1, [pc, #16]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003864:	4313      	orrs	r3, r2
 8003866:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800386a:	e009      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800386c:	7cfb      	ldrb	r3, [r7, #19]
 800386e:	74bb      	strb	r3, [r7, #18]
 8003870:	e006      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003872:	bf00      	nop
 8003874:	40021000 	.word	0x40021000
 8003878:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800387c:	7cfb      	ldrb	r3, [r7, #19]
 800387e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003880:	7c7b      	ldrb	r3, [r7, #17]
 8003882:	2b01      	cmp	r3, #1
 8003884:	d105      	bne.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003886:	4b9e      	ldr	r3, [pc, #632]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800388a:	4a9d      	ldr	r2, [pc, #628]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800388c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003890:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00a      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800389e:	4b98      	ldr	r3, [pc, #608]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038a4:	f023 0203 	bic.w	r2, r3, #3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ac:	4994      	ldr	r1, [pc, #592]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0302 	and.w	r3, r3, #2
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d00a      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038c0:	4b8f      	ldr	r3, [pc, #572]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c6:	f023 020c 	bic.w	r2, r3, #12
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ce:	498c      	ldr	r1, [pc, #560]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0304 	and.w	r3, r3, #4
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d00a      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80038e2:	4b87      	ldr	r3, [pc, #540]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f0:	4983      	ldr	r1, [pc, #524]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0308 	and.w	r3, r3, #8
 8003900:	2b00      	cmp	r3, #0
 8003902:	d00a      	beq.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003904:	4b7e      	ldr	r3, [pc, #504]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800390a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003912:	497b      	ldr	r1, [pc, #492]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003914:	4313      	orrs	r3, r2
 8003916:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0310 	and.w	r3, r3, #16
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00a      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003926:	4b76      	ldr	r3, [pc, #472]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003928:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800392c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003934:	4972      	ldr	r1, [pc, #456]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003936:	4313      	orrs	r3, r2
 8003938:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0320 	and.w	r3, r3, #32
 8003944:	2b00      	cmp	r3, #0
 8003946:	d00a      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003948:	4b6d      	ldr	r3, [pc, #436]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800394a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800394e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003956:	496a      	ldr	r1, [pc, #424]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003958:	4313      	orrs	r3, r2
 800395a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00a      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800396a:	4b65      	ldr	r3, [pc, #404]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800396c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003970:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003978:	4961      	ldr	r1, [pc, #388]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800397a:	4313      	orrs	r3, r2
 800397c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003988:	2b00      	cmp	r3, #0
 800398a:	d00a      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800398c:	4b5c      	ldr	r3, [pc, #368]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800398e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003992:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800399a:	4959      	ldr	r1, [pc, #356]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800399c:	4313      	orrs	r3, r2
 800399e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00a      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039ae:	4b54      	ldr	r3, [pc, #336]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039bc:	4950      	ldr	r1, [pc, #320]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d00a      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80039d0:	4b4b      	ldr	r3, [pc, #300]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039de:	4948      	ldr	r1, [pc, #288]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00a      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80039f2:	4b43      	ldr	r3, [pc, #268]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a00:	493f      	ldr	r1, [pc, #252]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a02:	4313      	orrs	r3, r2
 8003a04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d028      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a14:	4b3a      	ldr	r3, [pc, #232]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a1a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a22:	4937      	ldr	r1, [pc, #220]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a32:	d106      	bne.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a34:	4b32      	ldr	r3, [pc, #200]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	4a31      	ldr	r2, [pc, #196]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a3e:	60d3      	str	r3, [r2, #12]
 8003a40:	e011      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a46:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a4a:	d10c      	bne.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	3304      	adds	r3, #4
 8003a50:	2101      	movs	r1, #1
 8003a52:	4618      	mov	r0, r3
 8003a54:	f000 f8c8 	bl	8003be8 <RCCEx_PLLSAI1_Config>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003a5c:	7cfb      	ldrb	r3, [r7, #19]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d001      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003a62:	7cfb      	ldrb	r3, [r7, #19]
 8003a64:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d028      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003a72:	4b23      	ldr	r3, [pc, #140]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a78:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a80:	491f      	ldr	r1, [pc, #124]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a90:	d106      	bne.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a92:	4b1b      	ldr	r3, [pc, #108]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	4a1a      	ldr	r2, [pc, #104]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a9c:	60d3      	str	r3, [r2, #12]
 8003a9e:	e011      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003aa8:	d10c      	bne.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	3304      	adds	r3, #4
 8003aae:	2101      	movs	r1, #1
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f000 f899 	bl	8003be8 <RCCEx_PLLSAI1_Config>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003aba:	7cfb      	ldrb	r3, [r7, #19]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d001      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003ac0:	7cfb      	ldrb	r3, [r7, #19]
 8003ac2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d02b      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ad0:	4b0b      	ldr	r3, [pc, #44]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ade:	4908      	ldr	r1, [pc, #32]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003aee:	d109      	bne.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003af0:	4b03      	ldr	r3, [pc, #12]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	4a02      	ldr	r2, [pc, #8]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003af6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003afa:	60d3      	str	r3, [r2, #12]
 8003afc:	e014      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003afe:	bf00      	nop
 8003b00:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b08:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b0c:	d10c      	bne.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	3304      	adds	r3, #4
 8003b12:	2101      	movs	r1, #1
 8003b14:	4618      	mov	r0, r3
 8003b16:	f000 f867 	bl	8003be8 <RCCEx_PLLSAI1_Config>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b1e:	7cfb      	ldrb	r3, [r7, #19]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d001      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003b24:	7cfb      	ldrb	r3, [r7, #19]
 8003b26:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d02f      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b34:	4b2b      	ldr	r3, [pc, #172]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b3a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b42:	4928      	ldr	r1, [pc, #160]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b52:	d10d      	bne.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	3304      	adds	r3, #4
 8003b58:	2102      	movs	r1, #2
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f000 f844 	bl	8003be8 <RCCEx_PLLSAI1_Config>
 8003b60:	4603      	mov	r3, r0
 8003b62:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b64:	7cfb      	ldrb	r3, [r7, #19]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d014      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003b6a:	7cfb      	ldrb	r3, [r7, #19]
 8003b6c:	74bb      	strb	r3, [r7, #18]
 8003b6e:	e011      	b.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b78:	d10c      	bne.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	3320      	adds	r3, #32
 8003b7e:	2102      	movs	r1, #2
 8003b80:	4618      	mov	r0, r3
 8003b82:	f000 f925 	bl	8003dd0 <RCCEx_PLLSAI2_Config>
 8003b86:	4603      	mov	r3, r0
 8003b88:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b8a:	7cfb      	ldrb	r3, [r7, #19]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d001      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003b90:	7cfb      	ldrb	r3, [r7, #19]
 8003b92:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d00a      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003ba0:	4b10      	ldr	r3, [pc, #64]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ba6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bae:	490d      	ldr	r1, [pc, #52]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d00b      	beq.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003bc2:	4b08      	ldr	r3, [pc, #32]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bc8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bd2:	4904      	ldr	r1, [pc, #16]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003bda:	7cbb      	ldrb	r3, [r7, #18]
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3718      	adds	r7, #24
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	40021000 	.word	0x40021000

08003be8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003bf6:	4b75      	ldr	r3, [pc, #468]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	f003 0303 	and.w	r3, r3, #3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d018      	beq.n	8003c34 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003c02:	4b72      	ldr	r3, [pc, #456]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	f003 0203 	and.w	r2, r3, #3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d10d      	bne.n	8003c2e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
       ||
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d009      	beq.n	8003c2e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003c1a:	4b6c      	ldr	r3, [pc, #432]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	091b      	lsrs	r3, r3, #4
 8003c20:	f003 0307 	and.w	r3, r3, #7
 8003c24:	1c5a      	adds	r2, r3, #1
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
       ||
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d047      	beq.n	8003cbe <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	73fb      	strb	r3, [r7, #15]
 8003c32:	e044      	b.n	8003cbe <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2b03      	cmp	r3, #3
 8003c3a:	d018      	beq.n	8003c6e <RCCEx_PLLSAI1_Config+0x86>
 8003c3c:	2b03      	cmp	r3, #3
 8003c3e:	d825      	bhi.n	8003c8c <RCCEx_PLLSAI1_Config+0xa4>
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d002      	beq.n	8003c4a <RCCEx_PLLSAI1_Config+0x62>
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d009      	beq.n	8003c5c <RCCEx_PLLSAI1_Config+0x74>
 8003c48:	e020      	b.n	8003c8c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003c4a:	4b60      	ldr	r3, [pc, #384]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0302 	and.w	r3, r3, #2
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d11d      	bne.n	8003c92 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c5a:	e01a      	b.n	8003c92 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c5c:	4b5b      	ldr	r3, [pc, #364]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d116      	bne.n	8003c96 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c6c:	e013      	b.n	8003c96 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c6e:	4b57      	ldr	r3, [pc, #348]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d10f      	bne.n	8003c9a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c7a:	4b54      	ldr	r3, [pc, #336]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d109      	bne.n	8003c9a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c8a:	e006      	b.n	8003c9a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	73fb      	strb	r3, [r7, #15]
      break;
 8003c90:	e004      	b.n	8003c9c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c92:	bf00      	nop
 8003c94:	e002      	b.n	8003c9c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c96:	bf00      	nop
 8003c98:	e000      	b.n	8003c9c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c9a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c9c:	7bfb      	ldrb	r3, [r7, #15]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d10d      	bne.n	8003cbe <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003ca2:	4b4a      	ldr	r3, [pc, #296]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6819      	ldr	r1, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	011b      	lsls	r3, r3, #4
 8003cb6:	430b      	orrs	r3, r1
 8003cb8:	4944      	ldr	r1, [pc, #272]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003cbe:	7bfb      	ldrb	r3, [r7, #15]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d17d      	bne.n	8003dc0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003cc4:	4b41      	ldr	r3, [pc, #260]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a40      	ldr	r2, [pc, #256]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003cce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cd0:	f7fe fafc 	bl	80022cc <HAL_GetTick>
 8003cd4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003cd6:	e009      	b.n	8003cec <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003cd8:	f7fe faf8 	bl	80022cc <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d902      	bls.n	8003cec <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	73fb      	strb	r3, [r7, #15]
        break;
 8003cea:	e005      	b.n	8003cf8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003cec:	4b37      	ldr	r3, [pc, #220]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d1ef      	bne.n	8003cd8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003cf8:	7bfb      	ldrb	r3, [r7, #15]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d160      	bne.n	8003dc0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d111      	bne.n	8003d28 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d04:	4b31      	ldr	r3, [pc, #196]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003d0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	6892      	ldr	r2, [r2, #8]
 8003d14:	0211      	lsls	r1, r2, #8
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	68d2      	ldr	r2, [r2, #12]
 8003d1a:	0912      	lsrs	r2, r2, #4
 8003d1c:	0452      	lsls	r2, r2, #17
 8003d1e:	430a      	orrs	r2, r1
 8003d20:	492a      	ldr	r1, [pc, #168]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	610b      	str	r3, [r1, #16]
 8003d26:	e027      	b.n	8003d78 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d112      	bne.n	8003d54 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d2e:	4b27      	ldr	r3, [pc, #156]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003d36:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	6892      	ldr	r2, [r2, #8]
 8003d3e:	0211      	lsls	r1, r2, #8
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	6912      	ldr	r2, [r2, #16]
 8003d44:	0852      	lsrs	r2, r2, #1
 8003d46:	3a01      	subs	r2, #1
 8003d48:	0552      	lsls	r2, r2, #21
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	491f      	ldr	r1, [pc, #124]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	610b      	str	r3, [r1, #16]
 8003d52:	e011      	b.n	8003d78 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d54:	4b1d      	ldr	r3, [pc, #116]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d56:	691b      	ldr	r3, [r3, #16]
 8003d58:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003d5c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	6892      	ldr	r2, [r2, #8]
 8003d64:	0211      	lsls	r1, r2, #8
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	6952      	ldr	r2, [r2, #20]
 8003d6a:	0852      	lsrs	r2, r2, #1
 8003d6c:	3a01      	subs	r2, #1
 8003d6e:	0652      	lsls	r2, r2, #25
 8003d70:	430a      	orrs	r2, r1
 8003d72:	4916      	ldr	r1, [pc, #88]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003d78:	4b14      	ldr	r3, [pc, #80]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a13      	ldr	r2, [pc, #76]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d7e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d82:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d84:	f7fe faa2 	bl	80022cc <HAL_GetTick>
 8003d88:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d8a:	e009      	b.n	8003da0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d8c:	f7fe fa9e 	bl	80022cc <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d902      	bls.n	8003da0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	73fb      	strb	r3, [r7, #15]
          break;
 8003d9e:	e005      	b.n	8003dac <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003da0:	4b0a      	ldr	r3, [pc, #40]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d0ef      	beq.n	8003d8c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003dac:	7bfb      	ldrb	r3, [r7, #15]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d106      	bne.n	8003dc0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003db2:	4b06      	ldr	r3, [pc, #24]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003db4:	691a      	ldr	r2, [r3, #16]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	4904      	ldr	r1, [pc, #16]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3710      	adds	r7, #16
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	40021000 	.word	0x40021000

08003dd0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003dde:	4b6a      	ldr	r3, [pc, #424]	; (8003f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	f003 0303 	and.w	r3, r3, #3
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d018      	beq.n	8003e1c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003dea:	4b67      	ldr	r3, [pc, #412]	; (8003f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	f003 0203 	and.w	r2, r3, #3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d10d      	bne.n	8003e16 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
       ||
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d009      	beq.n	8003e16 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003e02:	4b61      	ldr	r3, [pc, #388]	; (8003f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	091b      	lsrs	r3, r3, #4
 8003e08:	f003 0307 	and.w	r3, r3, #7
 8003e0c:	1c5a      	adds	r2, r3, #1
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
       ||
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d047      	beq.n	8003ea6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	73fb      	strb	r3, [r7, #15]
 8003e1a:	e044      	b.n	8003ea6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2b03      	cmp	r3, #3
 8003e22:	d018      	beq.n	8003e56 <RCCEx_PLLSAI2_Config+0x86>
 8003e24:	2b03      	cmp	r3, #3
 8003e26:	d825      	bhi.n	8003e74 <RCCEx_PLLSAI2_Config+0xa4>
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d002      	beq.n	8003e32 <RCCEx_PLLSAI2_Config+0x62>
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d009      	beq.n	8003e44 <RCCEx_PLLSAI2_Config+0x74>
 8003e30:	e020      	b.n	8003e74 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003e32:	4b55      	ldr	r3, [pc, #340]	; (8003f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0302 	and.w	r3, r3, #2
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d11d      	bne.n	8003e7a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e42:	e01a      	b.n	8003e7a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003e44:	4b50      	ldr	r3, [pc, #320]	; (8003f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d116      	bne.n	8003e7e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e54:	e013      	b.n	8003e7e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003e56:	4b4c      	ldr	r3, [pc, #304]	; (8003f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d10f      	bne.n	8003e82 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003e62:	4b49      	ldr	r3, [pc, #292]	; (8003f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d109      	bne.n	8003e82 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003e72:	e006      	b.n	8003e82 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	73fb      	strb	r3, [r7, #15]
      break;
 8003e78:	e004      	b.n	8003e84 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e7a:	bf00      	nop
 8003e7c:	e002      	b.n	8003e84 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e7e:	bf00      	nop
 8003e80:	e000      	b.n	8003e84 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e82:	bf00      	nop
    }

    if(status == HAL_OK)
 8003e84:	7bfb      	ldrb	r3, [r7, #15]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d10d      	bne.n	8003ea6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003e8a:	4b3f      	ldr	r3, [pc, #252]	; (8003f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6819      	ldr	r1, [r3, #0]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	011b      	lsls	r3, r3, #4
 8003e9e:	430b      	orrs	r3, r1
 8003ea0:	4939      	ldr	r1, [pc, #228]	; (8003f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003ea6:	7bfb      	ldrb	r3, [r7, #15]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d167      	bne.n	8003f7c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003eac:	4b36      	ldr	r3, [pc, #216]	; (8003f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a35      	ldr	r2, [pc, #212]	; (8003f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eb6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003eb8:	f7fe fa08 	bl	80022cc <HAL_GetTick>
 8003ebc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003ebe:	e009      	b.n	8003ed4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003ec0:	f7fe fa04 	bl	80022cc <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d902      	bls.n	8003ed4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	73fb      	strb	r3, [r7, #15]
        break;
 8003ed2:	e005      	b.n	8003ee0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003ed4:	4b2c      	ldr	r3, [pc, #176]	; (8003f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d1ef      	bne.n	8003ec0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003ee0:	7bfb      	ldrb	r3, [r7, #15]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d14a      	bne.n	8003f7c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d111      	bne.n	8003f10 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003eec:	4b26      	ldr	r3, [pc, #152]	; (8003f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eee:	695b      	ldr	r3, [r3, #20]
 8003ef0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003ef4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	6892      	ldr	r2, [r2, #8]
 8003efc:	0211      	lsls	r1, r2, #8
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	68d2      	ldr	r2, [r2, #12]
 8003f02:	0912      	lsrs	r2, r2, #4
 8003f04:	0452      	lsls	r2, r2, #17
 8003f06:	430a      	orrs	r2, r1
 8003f08:	491f      	ldr	r1, [pc, #124]	; (8003f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	614b      	str	r3, [r1, #20]
 8003f0e:	e011      	b.n	8003f34 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003f10:	4b1d      	ldr	r3, [pc, #116]	; (8003f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f12:	695b      	ldr	r3, [r3, #20]
 8003f14:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003f18:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	6892      	ldr	r2, [r2, #8]
 8003f20:	0211      	lsls	r1, r2, #8
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	6912      	ldr	r2, [r2, #16]
 8003f26:	0852      	lsrs	r2, r2, #1
 8003f28:	3a01      	subs	r2, #1
 8003f2a:	0652      	lsls	r2, r2, #25
 8003f2c:	430a      	orrs	r2, r1
 8003f2e:	4916      	ldr	r1, [pc, #88]	; (8003f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003f34:	4b14      	ldr	r3, [pc, #80]	; (8003f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a13      	ldr	r2, [pc, #76]	; (8003f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f3e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f40:	f7fe f9c4 	bl	80022cc <HAL_GetTick>
 8003f44:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003f46:	e009      	b.n	8003f5c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003f48:	f7fe f9c0 	bl	80022cc <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d902      	bls.n	8003f5c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	73fb      	strb	r3, [r7, #15]
          break;
 8003f5a:	e005      	b.n	8003f68 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003f5c:	4b0a      	ldr	r3, [pc, #40]	; (8003f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d0ef      	beq.n	8003f48 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003f68:	7bfb      	ldrb	r3, [r7, #15]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d106      	bne.n	8003f7c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003f6e:	4b06      	ldr	r3, [pc, #24]	; (8003f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f70:	695a      	ldr	r2, [r3, #20]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	4904      	ldr	r1, [pc, #16]	; (8003f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3710      	adds	r7, #16
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	40021000 	.word	0x40021000

08003f8c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d101      	bne.n	8003f9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e095      	b.n	80040ca <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d108      	bne.n	8003fb8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fae:	d009      	beq.n	8003fc4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	61da      	str	r2, [r3, #28]
 8003fb6:	e005      	b.n	8003fc4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d106      	bne.n	8003fe4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f7fd ff4c 	bl	8001e7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2202      	movs	r2, #2
 8003fe8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ffa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004004:	d902      	bls.n	800400c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004006:	2300      	movs	r3, #0
 8004008:	60fb      	str	r3, [r7, #12]
 800400a:	e002      	b.n	8004012 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800400c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004010:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800401a:	d007      	beq.n	800402c <HAL_SPI_Init+0xa0>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004024:	d002      	beq.n	800402c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800403c:	431a      	orrs	r2, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	f003 0302 	and.w	r3, r3, #2
 8004046:	431a      	orrs	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	695b      	ldr	r3, [r3, #20]
 800404c:	f003 0301 	and.w	r3, r3, #1
 8004050:	431a      	orrs	r2, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800405a:	431a      	orrs	r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	69db      	ldr	r3, [r3, #28]
 8004060:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004064:	431a      	orrs	r2, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a1b      	ldr	r3, [r3, #32]
 800406a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800406e:	ea42 0103 	orr.w	r1, r2, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004076:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	430a      	orrs	r2, r1
 8004080:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	699b      	ldr	r3, [r3, #24]
 8004086:	0c1b      	lsrs	r3, r3, #16
 8004088:	f003 0204 	and.w	r2, r3, #4
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004090:	f003 0310 	and.w	r3, r3, #16
 8004094:	431a      	orrs	r2, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800409a:	f003 0308 	and.w	r3, r3, #8
 800409e:	431a      	orrs	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80040a8:	ea42 0103 	orr.w	r1, r2, r3
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	430a      	orrs	r2, r1
 80040b8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80040c8:	2300      	movs	r3, #0
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3710      	adds	r7, #16
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}

080040d2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80040d2:	b580      	push	{r7, lr}
 80040d4:	b08a      	sub	sp, #40	; 0x28
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	60f8      	str	r0, [r7, #12]
 80040da:	60b9      	str	r1, [r7, #8]
 80040dc:	607a      	str	r2, [r7, #4]
 80040de:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80040e0:	2301      	movs	r3, #1
 80040e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80040e4:	2300      	movs	r3, #0
 80040e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d101      	bne.n	80040f8 <HAL_SPI_TransmitReceive+0x26>
 80040f4:	2302      	movs	r3, #2
 80040f6:	e20a      	b.n	800450e <HAL_SPI_TransmitReceive+0x43c>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004100:	f7fe f8e4 	bl	80022cc <HAL_GetTick>
 8004104:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800410c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004114:	887b      	ldrh	r3, [r7, #2]
 8004116:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004118:	887b      	ldrh	r3, [r7, #2]
 800411a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800411c:	7efb      	ldrb	r3, [r7, #27]
 800411e:	2b01      	cmp	r3, #1
 8004120:	d00e      	beq.n	8004140 <HAL_SPI_TransmitReceive+0x6e>
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004128:	d106      	bne.n	8004138 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d102      	bne.n	8004138 <HAL_SPI_TransmitReceive+0x66>
 8004132:	7efb      	ldrb	r3, [r7, #27]
 8004134:	2b04      	cmp	r3, #4
 8004136:	d003      	beq.n	8004140 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004138:	2302      	movs	r3, #2
 800413a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800413e:	e1e0      	b.n	8004502 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d005      	beq.n	8004152 <HAL_SPI_TransmitReceive+0x80>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d002      	beq.n	8004152 <HAL_SPI_TransmitReceive+0x80>
 800414c:	887b      	ldrh	r3, [r7, #2]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d103      	bne.n	800415a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004158:	e1d3      	b.n	8004502 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004160:	b2db      	uxtb	r3, r3
 8004162:	2b04      	cmp	r3, #4
 8004164:	d003      	beq.n	800416e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2205      	movs	r2, #5
 800416a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2200      	movs	r2, #0
 8004172:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	887a      	ldrh	r2, [r7, #2]
 800417e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	887a      	ldrh	r2, [r7, #2]
 8004186:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	68ba      	ldr	r2, [r7, #8]
 800418e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	887a      	ldrh	r2, [r7, #2]
 8004194:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	887a      	ldrh	r2, [r7, #2]
 800419a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2200      	movs	r2, #0
 80041a0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2200      	movs	r2, #0
 80041a6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80041b0:	d802      	bhi.n	80041b8 <HAL_SPI_TransmitReceive+0xe6>
 80041b2:	8a3b      	ldrh	r3, [r7, #16]
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d908      	bls.n	80041ca <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	685a      	ldr	r2, [r3, #4]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80041c6:	605a      	str	r2, [r3, #4]
 80041c8:	e007      	b.n	80041da <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	685a      	ldr	r2, [r3, #4]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80041d8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041e4:	2b40      	cmp	r3, #64	; 0x40
 80041e6:	d007      	beq.n	80041f8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004200:	f240 8081 	bls.w	8004306 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d002      	beq.n	8004212 <HAL_SPI_TransmitReceive+0x140>
 800420c:	8a7b      	ldrh	r3, [r7, #18]
 800420e:	2b01      	cmp	r3, #1
 8004210:	d16d      	bne.n	80042ee <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004216:	881a      	ldrh	r2, [r3, #0]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004222:	1c9a      	adds	r2, r3, #2
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800422c:	b29b      	uxth	r3, r3
 800422e:	3b01      	subs	r3, #1
 8004230:	b29a      	uxth	r2, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004236:	e05a      	b.n	80042ee <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f003 0302 	and.w	r3, r3, #2
 8004242:	2b02      	cmp	r3, #2
 8004244:	d11b      	bne.n	800427e <HAL_SPI_TransmitReceive+0x1ac>
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800424a:	b29b      	uxth	r3, r3
 800424c:	2b00      	cmp	r3, #0
 800424e:	d016      	beq.n	800427e <HAL_SPI_TransmitReceive+0x1ac>
 8004250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004252:	2b01      	cmp	r3, #1
 8004254:	d113      	bne.n	800427e <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800425a:	881a      	ldrh	r2, [r3, #0]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004266:	1c9a      	adds	r2, r3, #2
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004270:	b29b      	uxth	r3, r3
 8004272:	3b01      	subs	r3, #1
 8004274:	b29a      	uxth	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800427a:	2300      	movs	r3, #0
 800427c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f003 0301 	and.w	r3, r3, #1
 8004288:	2b01      	cmp	r3, #1
 800428a:	d11c      	bne.n	80042c6 <HAL_SPI_TransmitReceive+0x1f4>
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004292:	b29b      	uxth	r3, r3
 8004294:	2b00      	cmp	r3, #0
 8004296:	d016      	beq.n	80042c6 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68da      	ldr	r2, [r3, #12]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a2:	b292      	uxth	r2, r2
 80042a4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042aa:	1c9a      	adds	r2, r3, #2
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	3b01      	subs	r3, #1
 80042ba:	b29a      	uxth	r2, r3
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80042c2:	2301      	movs	r3, #1
 80042c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80042c6:	f7fe f801 	bl	80022cc <HAL_GetTick>
 80042ca:	4602      	mov	r2, r0
 80042cc:	69fb      	ldr	r3, [r7, #28]
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d80b      	bhi.n	80042ee <HAL_SPI_TransmitReceive+0x21c>
 80042d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042dc:	d007      	beq.n	80042ee <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80042ec:	e109      	b.n	8004502 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d19f      	bne.n	8004238 <HAL_SPI_TransmitReceive+0x166>
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042fe:	b29b      	uxth	r3, r3
 8004300:	2b00      	cmp	r3, #0
 8004302:	d199      	bne.n	8004238 <HAL_SPI_TransmitReceive+0x166>
 8004304:	e0e3      	b.n	80044ce <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d003      	beq.n	8004316 <HAL_SPI_TransmitReceive+0x244>
 800430e:	8a7b      	ldrh	r3, [r7, #18]
 8004310:	2b01      	cmp	r3, #1
 8004312:	f040 80cf 	bne.w	80044b4 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800431a:	b29b      	uxth	r3, r3
 800431c:	2b01      	cmp	r3, #1
 800431e:	d912      	bls.n	8004346 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004324:	881a      	ldrh	r2, [r3, #0]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004330:	1c9a      	adds	r2, r3, #2
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800433a:	b29b      	uxth	r3, r3
 800433c:	3b02      	subs	r3, #2
 800433e:	b29a      	uxth	r2, r3
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004344:	e0b6      	b.n	80044b4 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	330c      	adds	r3, #12
 8004350:	7812      	ldrb	r2, [r2, #0]
 8004352:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004358:	1c5a      	adds	r2, r3, #1
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004362:	b29b      	uxth	r3, r3
 8004364:	3b01      	subs	r3, #1
 8004366:	b29a      	uxth	r2, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800436c:	e0a2      	b.n	80044b4 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f003 0302 	and.w	r3, r3, #2
 8004378:	2b02      	cmp	r3, #2
 800437a:	d134      	bne.n	80043e6 <HAL_SPI_TransmitReceive+0x314>
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004380:	b29b      	uxth	r3, r3
 8004382:	2b00      	cmp	r3, #0
 8004384:	d02f      	beq.n	80043e6 <HAL_SPI_TransmitReceive+0x314>
 8004386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004388:	2b01      	cmp	r3, #1
 800438a:	d12c      	bne.n	80043e6 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004390:	b29b      	uxth	r3, r3
 8004392:	2b01      	cmp	r3, #1
 8004394:	d912      	bls.n	80043bc <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800439a:	881a      	ldrh	r2, [r3, #0]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a6:	1c9a      	adds	r2, r3, #2
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	3b02      	subs	r3, #2
 80043b4:	b29a      	uxth	r2, r3
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80043ba:	e012      	b.n	80043e2 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	330c      	adds	r3, #12
 80043c6:	7812      	ldrb	r2, [r2, #0]
 80043c8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ce:	1c5a      	adds	r2, r3, #1
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043d8:	b29b      	uxth	r3, r3
 80043da:	3b01      	subs	r3, #1
 80043dc:	b29a      	uxth	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80043e2:	2300      	movs	r3, #0
 80043e4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	f003 0301 	and.w	r3, r3, #1
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d148      	bne.n	8004486 <HAL_SPI_TransmitReceive+0x3b4>
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d042      	beq.n	8004486 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004406:	b29b      	uxth	r3, r3
 8004408:	2b01      	cmp	r3, #1
 800440a:	d923      	bls.n	8004454 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	68da      	ldr	r2, [r3, #12]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004416:	b292      	uxth	r2, r2
 8004418:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441e:	1c9a      	adds	r2, r3, #2
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800442a:	b29b      	uxth	r3, r3
 800442c:	3b02      	subs	r3, #2
 800442e:	b29a      	uxth	r2, r3
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800443c:	b29b      	uxth	r3, r3
 800443e:	2b01      	cmp	r3, #1
 8004440:	d81f      	bhi.n	8004482 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	685a      	ldr	r2, [r3, #4]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004450:	605a      	str	r2, [r3, #4]
 8004452:	e016      	b.n	8004482 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f103 020c 	add.w	r2, r3, #12
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004460:	7812      	ldrb	r2, [r2, #0]
 8004462:	b2d2      	uxtb	r2, r2
 8004464:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446a:	1c5a      	adds	r2, r3, #1
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004476:	b29b      	uxth	r3, r3
 8004478:	3b01      	subs	r3, #1
 800447a:	b29a      	uxth	r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004482:	2301      	movs	r3, #1
 8004484:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004486:	f7fd ff21 	bl	80022cc <HAL_GetTick>
 800448a:	4602      	mov	r2, r0
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004492:	429a      	cmp	r2, r3
 8004494:	d803      	bhi.n	800449e <HAL_SPI_TransmitReceive+0x3cc>
 8004496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800449c:	d102      	bne.n	80044a4 <HAL_SPI_TransmitReceive+0x3d2>
 800449e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d107      	bne.n	80044b4 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2201      	movs	r2, #1
 80044ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80044b2:	e026      	b.n	8004502 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	f47f af57 	bne.w	800436e <HAL_SPI_TransmitReceive+0x29c>
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	f47f af50 	bne.w	800436e <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80044ce:	69fa      	ldr	r2, [r7, #28]
 80044d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80044d2:	68f8      	ldr	r0, [r7, #12]
 80044d4:	f000 f93e 	bl	8004754 <SPI_EndRxTxTransaction>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d005      	beq.n	80044ea <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2220      	movs	r2, #32
 80044e8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d003      	beq.n	80044fa <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044f8:	e003      	b.n	8004502 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2201      	movs	r2, #1
 80044fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800450a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800450e:	4618      	mov	r0, r3
 8004510:	3728      	adds	r7, #40	; 0x28
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
	...

08004518 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b088      	sub	sp, #32
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	603b      	str	r3, [r7, #0]
 8004524:	4613      	mov	r3, r2
 8004526:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004528:	f7fd fed0 	bl	80022cc <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004530:	1a9b      	subs	r3, r3, r2
 8004532:	683a      	ldr	r2, [r7, #0]
 8004534:	4413      	add	r3, r2
 8004536:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004538:	f7fd fec8 	bl	80022cc <HAL_GetTick>
 800453c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800453e:	4b39      	ldr	r3, [pc, #228]	; (8004624 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	015b      	lsls	r3, r3, #5
 8004544:	0d1b      	lsrs	r3, r3, #20
 8004546:	69fa      	ldr	r2, [r7, #28]
 8004548:	fb02 f303 	mul.w	r3, r2, r3
 800454c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800454e:	e054      	b.n	80045fa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004556:	d050      	beq.n	80045fa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004558:	f7fd feb8 	bl	80022cc <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	69fa      	ldr	r2, [r7, #28]
 8004564:	429a      	cmp	r2, r3
 8004566:	d902      	bls.n	800456e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d13d      	bne.n	80045ea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	685a      	ldr	r2, [r3, #4]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800457c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004586:	d111      	bne.n	80045ac <SPI_WaitFlagStateUntilTimeout+0x94>
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004590:	d004      	beq.n	800459c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800459a:	d107      	bne.n	80045ac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045b4:	d10f      	bne.n	80045d6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045c4:	601a      	str	r2, [r3, #0]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2201      	movs	r2, #1
 80045da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e017      	b.n	800461a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d101      	bne.n	80045f4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80045f0:	2300      	movs	r3, #0
 80045f2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	3b01      	subs	r3, #1
 80045f8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	689a      	ldr	r2, [r3, #8]
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	4013      	ands	r3, r2
 8004604:	68ba      	ldr	r2, [r7, #8]
 8004606:	429a      	cmp	r2, r3
 8004608:	bf0c      	ite	eq
 800460a:	2301      	moveq	r3, #1
 800460c:	2300      	movne	r3, #0
 800460e:	b2db      	uxtb	r3, r3
 8004610:	461a      	mov	r2, r3
 8004612:	79fb      	ldrb	r3, [r7, #7]
 8004614:	429a      	cmp	r2, r3
 8004616:	d19b      	bne.n	8004550 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	3720      	adds	r7, #32
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	20000000 	.word	0x20000000

08004628 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b08a      	sub	sp, #40	; 0x28
 800462c:	af00      	add	r7, sp, #0
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	607a      	str	r2, [r7, #4]
 8004634:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004636:	2300      	movs	r3, #0
 8004638:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800463a:	f7fd fe47 	bl	80022cc <HAL_GetTick>
 800463e:	4602      	mov	r2, r0
 8004640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004642:	1a9b      	subs	r3, r3, r2
 8004644:	683a      	ldr	r2, [r7, #0]
 8004646:	4413      	add	r3, r2
 8004648:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800464a:	f7fd fe3f 	bl	80022cc <HAL_GetTick>
 800464e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	330c      	adds	r3, #12
 8004656:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004658:	4b3d      	ldr	r3, [pc, #244]	; (8004750 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	4613      	mov	r3, r2
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	4413      	add	r3, r2
 8004662:	00da      	lsls	r2, r3, #3
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	0d1b      	lsrs	r3, r3, #20
 8004668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800466a:	fb02 f303 	mul.w	r3, r2, r3
 800466e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004670:	e060      	b.n	8004734 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004678:	d107      	bne.n	800468a <SPI_WaitFifoStateUntilTimeout+0x62>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d104      	bne.n	800468a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	b2db      	uxtb	r3, r3
 8004686:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004688:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004690:	d050      	beq.n	8004734 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004692:	f7fd fe1b 	bl	80022cc <HAL_GetTick>
 8004696:	4602      	mov	r2, r0
 8004698:	6a3b      	ldr	r3, [r7, #32]
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800469e:	429a      	cmp	r2, r3
 80046a0:	d902      	bls.n	80046a8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80046a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d13d      	bne.n	8004724 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	685a      	ldr	r2, [r3, #4]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80046b6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046c0:	d111      	bne.n	80046e6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046ca:	d004      	beq.n	80046d6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046d4:	d107      	bne.n	80046e6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046e4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046ee:	d10f      	bne.n	8004710 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046fe:	601a      	str	r2, [r3, #0]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800470e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2200      	movs	r2, #0
 800471c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	e010      	b.n	8004746 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d101      	bne.n	800472e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800472a:	2300      	movs	r3, #0
 800472c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	3b01      	subs	r3, #1
 8004732:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	689a      	ldr	r2, [r3, #8]
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	4013      	ands	r3, r2
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	429a      	cmp	r2, r3
 8004742:	d196      	bne.n	8004672 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004744:	2300      	movs	r3, #0
}
 8004746:	4618      	mov	r0, r3
 8004748:	3728      	adds	r7, #40	; 0x28
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	20000000 	.word	0x20000000

08004754 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b086      	sub	sp, #24
 8004758:	af02      	add	r7, sp, #8
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	60b9      	str	r1, [r7, #8]
 800475e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	9300      	str	r3, [sp, #0]
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	2200      	movs	r2, #0
 8004768:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800476c:	68f8      	ldr	r0, [r7, #12]
 800476e:	f7ff ff5b 	bl	8004628 <SPI_WaitFifoStateUntilTimeout>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d007      	beq.n	8004788 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800477c:	f043 0220 	orr.w	r2, r3, #32
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e027      	b.n	80047d8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	9300      	str	r3, [sp, #0]
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	2200      	movs	r2, #0
 8004790:	2180      	movs	r1, #128	; 0x80
 8004792:	68f8      	ldr	r0, [r7, #12]
 8004794:	f7ff fec0 	bl	8004518 <SPI_WaitFlagStateUntilTimeout>
 8004798:	4603      	mov	r3, r0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d007      	beq.n	80047ae <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047a2:	f043 0220 	orr.w	r2, r3, #32
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e014      	b.n	80047d8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	9300      	str	r3, [sp, #0]
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80047ba:	68f8      	ldr	r0, [r7, #12]
 80047bc:	f7ff ff34 	bl	8004628 <SPI_WaitFifoStateUntilTimeout>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d007      	beq.n	80047d6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047ca:	f043 0220 	orr.w	r2, r3, #32
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e000      	b.n	80047d8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80047d6:	2300      	movs	r3, #0
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3710      	adds	r7, #16
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b082      	sub	sp, #8
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d101      	bne.n	80047f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e040      	b.n	8004874 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d106      	bne.n	8004808 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f7fd fb7e 	bl	8001f04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2224      	movs	r2, #36	; 0x24
 800480c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f022 0201 	bic.w	r2, r2, #1
 800481c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004822:	2b00      	cmp	r3, #0
 8004824:	d002      	beq.n	800482c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 fb6a 	bl	8004f00 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f000 f8af 	bl	8004990 <UART_SetConfig>
 8004832:	4603      	mov	r3, r0
 8004834:	2b01      	cmp	r3, #1
 8004836:	d101      	bne.n	800483c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e01b      	b.n	8004874 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	685a      	ldr	r2, [r3, #4]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800484a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	689a      	ldr	r2, [r3, #8]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800485a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f042 0201 	orr.w	r2, r2, #1
 800486a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f000 fbe9 	bl	8005044 <UART_CheckIdleState>
 8004872:	4603      	mov	r3, r0
}
 8004874:	4618      	mov	r0, r3
 8004876:	3708      	adds	r7, #8
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}

0800487c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b08a      	sub	sp, #40	; 0x28
 8004880:	af02      	add	r7, sp, #8
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	603b      	str	r3, [r7, #0]
 8004888:	4613      	mov	r3, r2
 800488a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004890:	2b20      	cmp	r3, #32
 8004892:	d178      	bne.n	8004986 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d002      	beq.n	80048a0 <HAL_UART_Transmit+0x24>
 800489a:	88fb      	ldrh	r3, [r7, #6]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d101      	bne.n	80048a4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e071      	b.n	8004988 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2221      	movs	r2, #33	; 0x21
 80048b0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048b2:	f7fd fd0b 	bl	80022cc <HAL_GetTick>
 80048b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	88fa      	ldrh	r2, [r7, #6]
 80048bc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	88fa      	ldrh	r2, [r7, #6]
 80048c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048d0:	d108      	bne.n	80048e4 <HAL_UART_Transmit+0x68>
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d104      	bne.n	80048e4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80048da:	2300      	movs	r3, #0
 80048dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	61bb      	str	r3, [r7, #24]
 80048e2:	e003      	b.n	80048ec <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048e8:	2300      	movs	r3, #0
 80048ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80048ec:	e030      	b.n	8004950 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	9300      	str	r3, [sp, #0]
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	2200      	movs	r2, #0
 80048f6:	2180      	movs	r1, #128	; 0x80
 80048f8:	68f8      	ldr	r0, [r7, #12]
 80048fa:	f000 fc4b 	bl	8005194 <UART_WaitOnFlagUntilTimeout>
 80048fe:	4603      	mov	r3, r0
 8004900:	2b00      	cmp	r3, #0
 8004902:	d004      	beq.n	800490e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2220      	movs	r2, #32
 8004908:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e03c      	b.n	8004988 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d10b      	bne.n	800492c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	881a      	ldrh	r2, [r3, #0]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004920:	b292      	uxth	r2, r2
 8004922:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	3302      	adds	r3, #2
 8004928:	61bb      	str	r3, [r7, #24]
 800492a:	e008      	b.n	800493e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	781a      	ldrb	r2, [r3, #0]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	b292      	uxth	r2, r2
 8004936:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	3301      	adds	r3, #1
 800493c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004944:	b29b      	uxth	r3, r3
 8004946:	3b01      	subs	r3, #1
 8004948:	b29a      	uxth	r2, r3
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004956:	b29b      	uxth	r3, r3
 8004958:	2b00      	cmp	r3, #0
 800495a:	d1c8      	bne.n	80048ee <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	9300      	str	r3, [sp, #0]
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	2200      	movs	r2, #0
 8004964:	2140      	movs	r1, #64	; 0x40
 8004966:	68f8      	ldr	r0, [r7, #12]
 8004968:	f000 fc14 	bl	8005194 <UART_WaitOnFlagUntilTimeout>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d004      	beq.n	800497c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2220      	movs	r2, #32
 8004976:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004978:	2303      	movs	r3, #3
 800497a:	e005      	b.n	8004988 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2220      	movs	r2, #32
 8004980:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004982:	2300      	movs	r3, #0
 8004984:	e000      	b.n	8004988 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004986:	2302      	movs	r3, #2
  }
}
 8004988:	4618      	mov	r0, r3
 800498a:	3720      	adds	r7, #32
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}

08004990 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004990:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004994:	b08a      	sub	sp, #40	; 0x28
 8004996:	af00      	add	r7, sp, #0
 8004998:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800499a:	2300      	movs	r3, #0
 800499c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	689a      	ldr	r2, [r3, #8]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	691b      	ldr	r3, [r3, #16]
 80049a8:	431a      	orrs	r2, r3
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	695b      	ldr	r3, [r3, #20]
 80049ae:	431a      	orrs	r2, r3
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	69db      	ldr	r3, [r3, #28]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	4ba4      	ldr	r3, [pc, #656]	; (8004c50 <UART_SetConfig+0x2c0>)
 80049c0:	4013      	ands	r3, r2
 80049c2:	68fa      	ldr	r2, [r7, #12]
 80049c4:	6812      	ldr	r2, [r2, #0]
 80049c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80049c8:	430b      	orrs	r3, r1
 80049ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	68da      	ldr	r2, [r3, #12]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	430a      	orrs	r2, r1
 80049e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	699b      	ldr	r3, [r3, #24]
 80049e6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a99      	ldr	r2, [pc, #612]	; (8004c54 <UART_SetConfig+0x2c4>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d004      	beq.n	80049fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6a1b      	ldr	r3, [r3, #32]
 80049f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049f8:	4313      	orrs	r3, r2
 80049fa:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a0c:	430a      	orrs	r2, r1
 8004a0e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a90      	ldr	r2, [pc, #576]	; (8004c58 <UART_SetConfig+0x2c8>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d126      	bne.n	8004a68 <UART_SetConfig+0xd8>
 8004a1a:	4b90      	ldr	r3, [pc, #576]	; (8004c5c <UART_SetConfig+0x2cc>)
 8004a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a20:	f003 0303 	and.w	r3, r3, #3
 8004a24:	2b03      	cmp	r3, #3
 8004a26:	d81b      	bhi.n	8004a60 <UART_SetConfig+0xd0>
 8004a28:	a201      	add	r2, pc, #4	; (adr r2, 8004a30 <UART_SetConfig+0xa0>)
 8004a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a2e:	bf00      	nop
 8004a30:	08004a41 	.word	0x08004a41
 8004a34:	08004a51 	.word	0x08004a51
 8004a38:	08004a49 	.word	0x08004a49
 8004a3c:	08004a59 	.word	0x08004a59
 8004a40:	2301      	movs	r3, #1
 8004a42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a46:	e116      	b.n	8004c76 <UART_SetConfig+0x2e6>
 8004a48:	2302      	movs	r3, #2
 8004a4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a4e:	e112      	b.n	8004c76 <UART_SetConfig+0x2e6>
 8004a50:	2304      	movs	r3, #4
 8004a52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a56:	e10e      	b.n	8004c76 <UART_SetConfig+0x2e6>
 8004a58:	2308      	movs	r3, #8
 8004a5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a5e:	e10a      	b.n	8004c76 <UART_SetConfig+0x2e6>
 8004a60:	2310      	movs	r3, #16
 8004a62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a66:	e106      	b.n	8004c76 <UART_SetConfig+0x2e6>
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a7c      	ldr	r2, [pc, #496]	; (8004c60 <UART_SetConfig+0x2d0>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d138      	bne.n	8004ae4 <UART_SetConfig+0x154>
 8004a72:	4b7a      	ldr	r3, [pc, #488]	; (8004c5c <UART_SetConfig+0x2cc>)
 8004a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a78:	f003 030c 	and.w	r3, r3, #12
 8004a7c:	2b0c      	cmp	r3, #12
 8004a7e:	d82d      	bhi.n	8004adc <UART_SetConfig+0x14c>
 8004a80:	a201      	add	r2, pc, #4	; (adr r2, 8004a88 <UART_SetConfig+0xf8>)
 8004a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a86:	bf00      	nop
 8004a88:	08004abd 	.word	0x08004abd
 8004a8c:	08004add 	.word	0x08004add
 8004a90:	08004add 	.word	0x08004add
 8004a94:	08004add 	.word	0x08004add
 8004a98:	08004acd 	.word	0x08004acd
 8004a9c:	08004add 	.word	0x08004add
 8004aa0:	08004add 	.word	0x08004add
 8004aa4:	08004add 	.word	0x08004add
 8004aa8:	08004ac5 	.word	0x08004ac5
 8004aac:	08004add 	.word	0x08004add
 8004ab0:	08004add 	.word	0x08004add
 8004ab4:	08004add 	.word	0x08004add
 8004ab8:	08004ad5 	.word	0x08004ad5
 8004abc:	2300      	movs	r3, #0
 8004abe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ac2:	e0d8      	b.n	8004c76 <UART_SetConfig+0x2e6>
 8004ac4:	2302      	movs	r3, #2
 8004ac6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004aca:	e0d4      	b.n	8004c76 <UART_SetConfig+0x2e6>
 8004acc:	2304      	movs	r3, #4
 8004ace:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ad2:	e0d0      	b.n	8004c76 <UART_SetConfig+0x2e6>
 8004ad4:	2308      	movs	r3, #8
 8004ad6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ada:	e0cc      	b.n	8004c76 <UART_SetConfig+0x2e6>
 8004adc:	2310      	movs	r3, #16
 8004ade:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ae2:	e0c8      	b.n	8004c76 <UART_SetConfig+0x2e6>
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a5e      	ldr	r2, [pc, #376]	; (8004c64 <UART_SetConfig+0x2d4>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d125      	bne.n	8004b3a <UART_SetConfig+0x1aa>
 8004aee:	4b5b      	ldr	r3, [pc, #364]	; (8004c5c <UART_SetConfig+0x2cc>)
 8004af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004af4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004af8:	2b30      	cmp	r3, #48	; 0x30
 8004afa:	d016      	beq.n	8004b2a <UART_SetConfig+0x19a>
 8004afc:	2b30      	cmp	r3, #48	; 0x30
 8004afe:	d818      	bhi.n	8004b32 <UART_SetConfig+0x1a2>
 8004b00:	2b20      	cmp	r3, #32
 8004b02:	d00a      	beq.n	8004b1a <UART_SetConfig+0x18a>
 8004b04:	2b20      	cmp	r3, #32
 8004b06:	d814      	bhi.n	8004b32 <UART_SetConfig+0x1a2>
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d002      	beq.n	8004b12 <UART_SetConfig+0x182>
 8004b0c:	2b10      	cmp	r3, #16
 8004b0e:	d008      	beq.n	8004b22 <UART_SetConfig+0x192>
 8004b10:	e00f      	b.n	8004b32 <UART_SetConfig+0x1a2>
 8004b12:	2300      	movs	r3, #0
 8004b14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b18:	e0ad      	b.n	8004c76 <UART_SetConfig+0x2e6>
 8004b1a:	2302      	movs	r3, #2
 8004b1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b20:	e0a9      	b.n	8004c76 <UART_SetConfig+0x2e6>
 8004b22:	2304      	movs	r3, #4
 8004b24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b28:	e0a5      	b.n	8004c76 <UART_SetConfig+0x2e6>
 8004b2a:	2308      	movs	r3, #8
 8004b2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b30:	e0a1      	b.n	8004c76 <UART_SetConfig+0x2e6>
 8004b32:	2310      	movs	r3, #16
 8004b34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b38:	e09d      	b.n	8004c76 <UART_SetConfig+0x2e6>
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a4a      	ldr	r2, [pc, #296]	; (8004c68 <UART_SetConfig+0x2d8>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d125      	bne.n	8004b90 <UART_SetConfig+0x200>
 8004b44:	4b45      	ldr	r3, [pc, #276]	; (8004c5c <UART_SetConfig+0x2cc>)
 8004b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b4a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004b4e:	2bc0      	cmp	r3, #192	; 0xc0
 8004b50:	d016      	beq.n	8004b80 <UART_SetConfig+0x1f0>
 8004b52:	2bc0      	cmp	r3, #192	; 0xc0
 8004b54:	d818      	bhi.n	8004b88 <UART_SetConfig+0x1f8>
 8004b56:	2b80      	cmp	r3, #128	; 0x80
 8004b58:	d00a      	beq.n	8004b70 <UART_SetConfig+0x1e0>
 8004b5a:	2b80      	cmp	r3, #128	; 0x80
 8004b5c:	d814      	bhi.n	8004b88 <UART_SetConfig+0x1f8>
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d002      	beq.n	8004b68 <UART_SetConfig+0x1d8>
 8004b62:	2b40      	cmp	r3, #64	; 0x40
 8004b64:	d008      	beq.n	8004b78 <UART_SetConfig+0x1e8>
 8004b66:	e00f      	b.n	8004b88 <UART_SetConfig+0x1f8>
 8004b68:	2300      	movs	r3, #0
 8004b6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b6e:	e082      	b.n	8004c76 <UART_SetConfig+0x2e6>
 8004b70:	2302      	movs	r3, #2
 8004b72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b76:	e07e      	b.n	8004c76 <UART_SetConfig+0x2e6>
 8004b78:	2304      	movs	r3, #4
 8004b7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b7e:	e07a      	b.n	8004c76 <UART_SetConfig+0x2e6>
 8004b80:	2308      	movs	r3, #8
 8004b82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b86:	e076      	b.n	8004c76 <UART_SetConfig+0x2e6>
 8004b88:	2310      	movs	r3, #16
 8004b8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b8e:	e072      	b.n	8004c76 <UART_SetConfig+0x2e6>
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a35      	ldr	r2, [pc, #212]	; (8004c6c <UART_SetConfig+0x2dc>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d12a      	bne.n	8004bf0 <UART_SetConfig+0x260>
 8004b9a:	4b30      	ldr	r3, [pc, #192]	; (8004c5c <UART_SetConfig+0x2cc>)
 8004b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ba0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ba4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ba8:	d01a      	beq.n	8004be0 <UART_SetConfig+0x250>
 8004baa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bae:	d81b      	bhi.n	8004be8 <UART_SetConfig+0x258>
 8004bb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bb4:	d00c      	beq.n	8004bd0 <UART_SetConfig+0x240>
 8004bb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bba:	d815      	bhi.n	8004be8 <UART_SetConfig+0x258>
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d003      	beq.n	8004bc8 <UART_SetConfig+0x238>
 8004bc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bc4:	d008      	beq.n	8004bd8 <UART_SetConfig+0x248>
 8004bc6:	e00f      	b.n	8004be8 <UART_SetConfig+0x258>
 8004bc8:	2300      	movs	r3, #0
 8004bca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bce:	e052      	b.n	8004c76 <UART_SetConfig+0x2e6>
 8004bd0:	2302      	movs	r3, #2
 8004bd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bd6:	e04e      	b.n	8004c76 <UART_SetConfig+0x2e6>
 8004bd8:	2304      	movs	r3, #4
 8004bda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bde:	e04a      	b.n	8004c76 <UART_SetConfig+0x2e6>
 8004be0:	2308      	movs	r3, #8
 8004be2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004be6:	e046      	b.n	8004c76 <UART_SetConfig+0x2e6>
 8004be8:	2310      	movs	r3, #16
 8004bea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bee:	e042      	b.n	8004c76 <UART_SetConfig+0x2e6>
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a17      	ldr	r2, [pc, #92]	; (8004c54 <UART_SetConfig+0x2c4>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d13a      	bne.n	8004c70 <UART_SetConfig+0x2e0>
 8004bfa:	4b18      	ldr	r3, [pc, #96]	; (8004c5c <UART_SetConfig+0x2cc>)
 8004bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c00:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004c04:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c08:	d01a      	beq.n	8004c40 <UART_SetConfig+0x2b0>
 8004c0a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c0e:	d81b      	bhi.n	8004c48 <UART_SetConfig+0x2b8>
 8004c10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c14:	d00c      	beq.n	8004c30 <UART_SetConfig+0x2a0>
 8004c16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c1a:	d815      	bhi.n	8004c48 <UART_SetConfig+0x2b8>
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d003      	beq.n	8004c28 <UART_SetConfig+0x298>
 8004c20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c24:	d008      	beq.n	8004c38 <UART_SetConfig+0x2a8>
 8004c26:	e00f      	b.n	8004c48 <UART_SetConfig+0x2b8>
 8004c28:	2300      	movs	r3, #0
 8004c2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c2e:	e022      	b.n	8004c76 <UART_SetConfig+0x2e6>
 8004c30:	2302      	movs	r3, #2
 8004c32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c36:	e01e      	b.n	8004c76 <UART_SetConfig+0x2e6>
 8004c38:	2304      	movs	r3, #4
 8004c3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c3e:	e01a      	b.n	8004c76 <UART_SetConfig+0x2e6>
 8004c40:	2308      	movs	r3, #8
 8004c42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c46:	e016      	b.n	8004c76 <UART_SetConfig+0x2e6>
 8004c48:	2310      	movs	r3, #16
 8004c4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c4e:	e012      	b.n	8004c76 <UART_SetConfig+0x2e6>
 8004c50:	efff69f3 	.word	0xefff69f3
 8004c54:	40008000 	.word	0x40008000
 8004c58:	40013800 	.word	0x40013800
 8004c5c:	40021000 	.word	0x40021000
 8004c60:	40004400 	.word	0x40004400
 8004c64:	40004800 	.word	0x40004800
 8004c68:	40004c00 	.word	0x40004c00
 8004c6c:	40005000 	.word	0x40005000
 8004c70:	2310      	movs	r3, #16
 8004c72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a9f      	ldr	r2, [pc, #636]	; (8004ef8 <UART_SetConfig+0x568>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d17a      	bne.n	8004d76 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004c80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c84:	2b08      	cmp	r3, #8
 8004c86:	d824      	bhi.n	8004cd2 <UART_SetConfig+0x342>
 8004c88:	a201      	add	r2, pc, #4	; (adr r2, 8004c90 <UART_SetConfig+0x300>)
 8004c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c8e:	bf00      	nop
 8004c90:	08004cb5 	.word	0x08004cb5
 8004c94:	08004cd3 	.word	0x08004cd3
 8004c98:	08004cbd 	.word	0x08004cbd
 8004c9c:	08004cd3 	.word	0x08004cd3
 8004ca0:	08004cc3 	.word	0x08004cc3
 8004ca4:	08004cd3 	.word	0x08004cd3
 8004ca8:	08004cd3 	.word	0x08004cd3
 8004cac:	08004cd3 	.word	0x08004cd3
 8004cb0:	08004ccb 	.word	0x08004ccb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cb4:	f7fe fc22 	bl	80034fc <HAL_RCC_GetPCLK1Freq>
 8004cb8:	61f8      	str	r0, [r7, #28]
        break;
 8004cba:	e010      	b.n	8004cde <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cbc:	4b8f      	ldr	r3, [pc, #572]	; (8004efc <UART_SetConfig+0x56c>)
 8004cbe:	61fb      	str	r3, [r7, #28]
        break;
 8004cc0:	e00d      	b.n	8004cde <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cc2:	f7fe fb83 	bl	80033cc <HAL_RCC_GetSysClockFreq>
 8004cc6:	61f8      	str	r0, [r7, #28]
        break;
 8004cc8:	e009      	b.n	8004cde <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cce:	61fb      	str	r3, [r7, #28]
        break;
 8004cd0:	e005      	b.n	8004cde <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004cdc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	f000 80fb 	beq.w	8004edc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	685a      	ldr	r2, [r3, #4]
 8004cea:	4613      	mov	r3, r2
 8004cec:	005b      	lsls	r3, r3, #1
 8004cee:	4413      	add	r3, r2
 8004cf0:	69fa      	ldr	r2, [r7, #28]
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d305      	bcc.n	8004d02 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004cfc:	69fa      	ldr	r2, [r7, #28]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d903      	bls.n	8004d0a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004d08:	e0e8      	b.n	8004edc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	461c      	mov	r4, r3
 8004d10:	4615      	mov	r5, r2
 8004d12:	f04f 0200 	mov.w	r2, #0
 8004d16:	f04f 0300 	mov.w	r3, #0
 8004d1a:	022b      	lsls	r3, r5, #8
 8004d1c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004d20:	0222      	lsls	r2, r4, #8
 8004d22:	68f9      	ldr	r1, [r7, #12]
 8004d24:	6849      	ldr	r1, [r1, #4]
 8004d26:	0849      	lsrs	r1, r1, #1
 8004d28:	2000      	movs	r0, #0
 8004d2a:	4688      	mov	r8, r1
 8004d2c:	4681      	mov	r9, r0
 8004d2e:	eb12 0a08 	adds.w	sl, r2, r8
 8004d32:	eb43 0b09 	adc.w	fp, r3, r9
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	603b      	str	r3, [r7, #0]
 8004d3e:	607a      	str	r2, [r7, #4]
 8004d40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d44:	4650      	mov	r0, sl
 8004d46:	4659      	mov	r1, fp
 8004d48:	f7fb ffc6 	bl	8000cd8 <__aeabi_uldivmod>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	460b      	mov	r3, r1
 8004d50:	4613      	mov	r3, r2
 8004d52:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d5a:	d308      	bcc.n	8004d6e <UART_SetConfig+0x3de>
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d62:	d204      	bcs.n	8004d6e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	69ba      	ldr	r2, [r7, #24]
 8004d6a:	60da      	str	r2, [r3, #12]
 8004d6c:	e0b6      	b.n	8004edc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004d74:	e0b2      	b.n	8004edc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	69db      	ldr	r3, [r3, #28]
 8004d7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d7e:	d15e      	bne.n	8004e3e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004d80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d84:	2b08      	cmp	r3, #8
 8004d86:	d828      	bhi.n	8004dda <UART_SetConfig+0x44a>
 8004d88:	a201      	add	r2, pc, #4	; (adr r2, 8004d90 <UART_SetConfig+0x400>)
 8004d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d8e:	bf00      	nop
 8004d90:	08004db5 	.word	0x08004db5
 8004d94:	08004dbd 	.word	0x08004dbd
 8004d98:	08004dc5 	.word	0x08004dc5
 8004d9c:	08004ddb 	.word	0x08004ddb
 8004da0:	08004dcb 	.word	0x08004dcb
 8004da4:	08004ddb 	.word	0x08004ddb
 8004da8:	08004ddb 	.word	0x08004ddb
 8004dac:	08004ddb 	.word	0x08004ddb
 8004db0:	08004dd3 	.word	0x08004dd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004db4:	f7fe fba2 	bl	80034fc <HAL_RCC_GetPCLK1Freq>
 8004db8:	61f8      	str	r0, [r7, #28]
        break;
 8004dba:	e014      	b.n	8004de6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004dbc:	f7fe fbb4 	bl	8003528 <HAL_RCC_GetPCLK2Freq>
 8004dc0:	61f8      	str	r0, [r7, #28]
        break;
 8004dc2:	e010      	b.n	8004de6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004dc4:	4b4d      	ldr	r3, [pc, #308]	; (8004efc <UART_SetConfig+0x56c>)
 8004dc6:	61fb      	str	r3, [r7, #28]
        break;
 8004dc8:	e00d      	b.n	8004de6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dca:	f7fe faff 	bl	80033cc <HAL_RCC_GetSysClockFreq>
 8004dce:	61f8      	str	r0, [r7, #28]
        break;
 8004dd0:	e009      	b.n	8004de6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dd6:	61fb      	str	r3, [r7, #28]
        break;
 8004dd8:	e005      	b.n	8004de6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004de4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d077      	beq.n	8004edc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004dec:	69fb      	ldr	r3, [r7, #28]
 8004dee:	005a      	lsls	r2, r3, #1
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	085b      	lsrs	r3, r3, #1
 8004df6:	441a      	add	r2, r3
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e00:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e02:	69bb      	ldr	r3, [r7, #24]
 8004e04:	2b0f      	cmp	r3, #15
 8004e06:	d916      	bls.n	8004e36 <UART_SetConfig+0x4a6>
 8004e08:	69bb      	ldr	r3, [r7, #24]
 8004e0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e0e:	d212      	bcs.n	8004e36 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	f023 030f 	bic.w	r3, r3, #15
 8004e18:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	085b      	lsrs	r3, r3, #1
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	f003 0307 	and.w	r3, r3, #7
 8004e24:	b29a      	uxth	r2, r3
 8004e26:	8afb      	ldrh	r3, [r7, #22]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	8afa      	ldrh	r2, [r7, #22]
 8004e32:	60da      	str	r2, [r3, #12]
 8004e34:	e052      	b.n	8004edc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004e3c:	e04e      	b.n	8004edc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e3e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e42:	2b08      	cmp	r3, #8
 8004e44:	d827      	bhi.n	8004e96 <UART_SetConfig+0x506>
 8004e46:	a201      	add	r2, pc, #4	; (adr r2, 8004e4c <UART_SetConfig+0x4bc>)
 8004e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e4c:	08004e71 	.word	0x08004e71
 8004e50:	08004e79 	.word	0x08004e79
 8004e54:	08004e81 	.word	0x08004e81
 8004e58:	08004e97 	.word	0x08004e97
 8004e5c:	08004e87 	.word	0x08004e87
 8004e60:	08004e97 	.word	0x08004e97
 8004e64:	08004e97 	.word	0x08004e97
 8004e68:	08004e97 	.word	0x08004e97
 8004e6c:	08004e8f 	.word	0x08004e8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e70:	f7fe fb44 	bl	80034fc <HAL_RCC_GetPCLK1Freq>
 8004e74:	61f8      	str	r0, [r7, #28]
        break;
 8004e76:	e014      	b.n	8004ea2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e78:	f7fe fb56 	bl	8003528 <HAL_RCC_GetPCLK2Freq>
 8004e7c:	61f8      	str	r0, [r7, #28]
        break;
 8004e7e:	e010      	b.n	8004ea2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e80:	4b1e      	ldr	r3, [pc, #120]	; (8004efc <UART_SetConfig+0x56c>)
 8004e82:	61fb      	str	r3, [r7, #28]
        break;
 8004e84:	e00d      	b.n	8004ea2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e86:	f7fe faa1 	bl	80033cc <HAL_RCC_GetSysClockFreq>
 8004e8a:	61f8      	str	r0, [r7, #28]
        break;
 8004e8c:	e009      	b.n	8004ea2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e92:	61fb      	str	r3, [r7, #28]
        break;
 8004e94:	e005      	b.n	8004ea2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004e96:	2300      	movs	r3, #0
 8004e98:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004ea0:	bf00      	nop
    }

    if (pclk != 0U)
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d019      	beq.n	8004edc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	085a      	lsrs	r2, r3, #1
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	441a      	add	r2, r3
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eba:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	2b0f      	cmp	r3, #15
 8004ec0:	d909      	bls.n	8004ed6 <UART_SetConfig+0x546>
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ec8:	d205      	bcs.n	8004ed6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	b29a      	uxth	r2, r3
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	60da      	str	r2, [r3, #12]
 8004ed4:	e002      	b.n	8004edc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004ee8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3728      	adds	r7, #40	; 0x28
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ef6:	bf00      	nop
 8004ef8:	40008000 	.word	0x40008000
 8004efc:	00f42400 	.word	0x00f42400

08004f00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0c:	f003 0308 	and.w	r3, r3, #8
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d00a      	beq.n	8004f2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	430a      	orrs	r2, r1
 8004f28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2e:	f003 0301 	and.w	r3, r3, #1
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00a      	beq.n	8004f4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	430a      	orrs	r2, r1
 8004f4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f50:	f003 0302 	and.w	r3, r3, #2
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d00a      	beq.n	8004f6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	430a      	orrs	r2, r1
 8004f6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f72:	f003 0304 	and.w	r3, r3, #4
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00a      	beq.n	8004f90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	430a      	orrs	r2, r1
 8004f8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f94:	f003 0310 	and.w	r3, r3, #16
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d00a      	beq.n	8004fb2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb6:	f003 0320 	and.w	r3, r3, #32
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d00a      	beq.n	8004fd4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	430a      	orrs	r2, r1
 8004fd2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d01a      	beq.n	8005016 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	430a      	orrs	r2, r1
 8004ff4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ffe:	d10a      	bne.n	8005016 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	430a      	orrs	r2, r1
 8005014:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00a      	beq.n	8005038 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	430a      	orrs	r2, r1
 8005036:	605a      	str	r2, [r3, #4]
  }
}
 8005038:	bf00      	nop
 800503a:	370c      	adds	r7, #12
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b098      	sub	sp, #96	; 0x60
 8005048:	af02      	add	r7, sp, #8
 800504a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005054:	f7fd f93a 	bl	80022cc <HAL_GetTick>
 8005058:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0308 	and.w	r3, r3, #8
 8005064:	2b08      	cmp	r3, #8
 8005066:	d12e      	bne.n	80050c6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005068:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800506c:	9300      	str	r3, [sp, #0]
 800506e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005070:	2200      	movs	r2, #0
 8005072:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 f88c 	bl	8005194 <UART_WaitOnFlagUntilTimeout>
 800507c:	4603      	mov	r3, r0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d021      	beq.n	80050c6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800508a:	e853 3f00 	ldrex	r3, [r3]
 800508e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005092:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005096:	653b      	str	r3, [r7, #80]	; 0x50
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	461a      	mov	r2, r3
 800509e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050a0:	647b      	str	r3, [r7, #68]	; 0x44
 80050a2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80050a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050a8:	e841 2300 	strex	r3, r2, [r1]
 80050ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80050ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d1e6      	bne.n	8005082 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2220      	movs	r2, #32
 80050b8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	e062      	b.n	800518c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0304 	and.w	r3, r3, #4
 80050d0:	2b04      	cmp	r3, #4
 80050d2:	d149      	bne.n	8005168 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80050d8:	9300      	str	r3, [sp, #0]
 80050da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050dc:	2200      	movs	r2, #0
 80050de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 f856 	bl	8005194 <UART_WaitOnFlagUntilTimeout>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d03c      	beq.n	8005168 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f6:	e853 3f00 	ldrex	r3, [r3]
 80050fa:	623b      	str	r3, [r7, #32]
   return(result);
 80050fc:	6a3b      	ldr	r3, [r7, #32]
 80050fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005102:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	461a      	mov	r2, r3
 800510a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800510c:	633b      	str	r3, [r7, #48]	; 0x30
 800510e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005110:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005112:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005114:	e841 2300 	strex	r3, r2, [r1]
 8005118:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800511a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800511c:	2b00      	cmp	r3, #0
 800511e:	d1e6      	bne.n	80050ee <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	3308      	adds	r3, #8
 8005126:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	e853 3f00 	ldrex	r3, [r3]
 800512e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f023 0301 	bic.w	r3, r3, #1
 8005136:	64bb      	str	r3, [r7, #72]	; 0x48
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	3308      	adds	r3, #8
 800513e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005140:	61fa      	str	r2, [r7, #28]
 8005142:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005144:	69b9      	ldr	r1, [r7, #24]
 8005146:	69fa      	ldr	r2, [r7, #28]
 8005148:	e841 2300 	strex	r3, r2, [r1]
 800514c:	617b      	str	r3, [r7, #20]
   return(result);
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d1e5      	bne.n	8005120 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2220      	movs	r2, #32
 8005158:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	e011      	b.n	800518c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2220      	movs	r2, #32
 800516c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2220      	movs	r2, #32
 8005172:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800518a:	2300      	movs	r3, #0
}
 800518c:	4618      	mov	r0, r3
 800518e:	3758      	adds	r7, #88	; 0x58
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	603b      	str	r3, [r7, #0]
 80051a0:	4613      	mov	r3, r2
 80051a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051a4:	e049      	b.n	800523a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ac:	d045      	beq.n	800523a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051ae:	f7fd f88d 	bl	80022cc <HAL_GetTick>
 80051b2:	4602      	mov	r2, r0
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	1ad3      	subs	r3, r2, r3
 80051b8:	69ba      	ldr	r2, [r7, #24]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d302      	bcc.n	80051c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d101      	bne.n	80051c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80051c4:	2303      	movs	r3, #3
 80051c6:	e048      	b.n	800525a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 0304 	and.w	r3, r3, #4
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d031      	beq.n	800523a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	69db      	ldr	r3, [r3, #28]
 80051dc:	f003 0308 	and.w	r3, r3, #8
 80051e0:	2b08      	cmp	r3, #8
 80051e2:	d110      	bne.n	8005206 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	2208      	movs	r2, #8
 80051ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051ec:	68f8      	ldr	r0, [r7, #12]
 80051ee:	f000 f838 	bl	8005262 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2208      	movs	r2, #8
 80051f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e029      	b.n	800525a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	69db      	ldr	r3, [r3, #28]
 800520c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005210:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005214:	d111      	bne.n	800523a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800521e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005220:	68f8      	ldr	r0, [r7, #12]
 8005222:	f000 f81e 	bl	8005262 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2220      	movs	r2, #32
 800522a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e00f      	b.n	800525a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	69da      	ldr	r2, [r3, #28]
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	4013      	ands	r3, r2
 8005244:	68ba      	ldr	r2, [r7, #8]
 8005246:	429a      	cmp	r2, r3
 8005248:	bf0c      	ite	eq
 800524a:	2301      	moveq	r3, #1
 800524c:	2300      	movne	r3, #0
 800524e:	b2db      	uxtb	r3, r3
 8005250:	461a      	mov	r2, r3
 8005252:	79fb      	ldrb	r3, [r7, #7]
 8005254:	429a      	cmp	r2, r3
 8005256:	d0a6      	beq.n	80051a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	3710      	adds	r7, #16
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}

08005262 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005262:	b480      	push	{r7}
 8005264:	b095      	sub	sp, #84	; 0x54
 8005266:	af00      	add	r7, sp, #0
 8005268:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005272:	e853 3f00 	ldrex	r3, [r3]
 8005276:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800527a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800527e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	461a      	mov	r2, r3
 8005286:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005288:	643b      	str	r3, [r7, #64]	; 0x40
 800528a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800528c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800528e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005290:	e841 2300 	strex	r3, r2, [r1]
 8005294:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005298:	2b00      	cmp	r3, #0
 800529a:	d1e6      	bne.n	800526a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	3308      	adds	r3, #8
 80052a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a4:	6a3b      	ldr	r3, [r7, #32]
 80052a6:	e853 3f00 	ldrex	r3, [r3]
 80052aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80052ac:	69fb      	ldr	r3, [r7, #28]
 80052ae:	f023 0301 	bic.w	r3, r3, #1
 80052b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	3308      	adds	r3, #8
 80052ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80052c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052c4:	e841 2300 	strex	r3, r2, [r1]
 80052c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80052ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d1e5      	bne.n	800529c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d118      	bne.n	800530a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	e853 3f00 	ldrex	r3, [r3]
 80052e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	f023 0310 	bic.w	r3, r3, #16
 80052ec:	647b      	str	r3, [r7, #68]	; 0x44
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	461a      	mov	r2, r3
 80052f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052f6:	61bb      	str	r3, [r7, #24]
 80052f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052fa:	6979      	ldr	r1, [r7, #20]
 80052fc:	69ba      	ldr	r2, [r7, #24]
 80052fe:	e841 2300 	strex	r3, r2, [r1]
 8005302:	613b      	str	r3, [r7, #16]
   return(result);
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d1e6      	bne.n	80052d8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2220      	movs	r2, #32
 800530e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800531e:	bf00      	nop
 8005320:	3754      	adds	r7, #84	; 0x54
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr
	...

0800532c <acc_rss_activate>:
 800532c:	b510      	push	{r4, lr}
 800532e:	4c18      	ldr	r4, [pc, #96]	; (8005390 <acc_rss_activate+0x64>)
 8005330:	7823      	ldrb	r3, [r4, #0]
 8005332:	b9c3      	cbnz	r3, 8005366 <acc_rss_activate+0x3a>
 8005334:	b1a8      	cbz	r0, 8005362 <acc_rss_activate+0x36>
 8005336:	f001 f8bd 	bl	80064b4 <acc_rss_integration_register>
 800533a:	b188      	cbz	r0, 8005360 <acc_rss_activate+0x34>
 800533c:	f000 fc62 	bl	8005c04 <acc_service_manager_activate>
 8005340:	b1e8      	cbz	r0, 800537e <acc_rss_activate+0x52>
 8005342:	f002 fda3 	bl	8007e8c <acc_sensor_manager_activate>
 8005346:	b1d0      	cbz	r0, 800537e <acc_rss_activate+0x52>
 8005348:	2301      	movs	r3, #1
 800534a:	7023      	strb	r3, [r4, #0]
 800534c:	f001 f9b0 	bl	80066b0 <acc_rss_integration_log_level>
 8005350:	2801      	cmp	r0, #1
 8005352:	d905      	bls.n	8005360 <acc_rss_activate+0x34>
 8005354:	4b0f      	ldr	r3, [pc, #60]	; (8005394 <acc_rss_activate+0x68>)
 8005356:	4a10      	ldr	r2, [pc, #64]	; (8005398 <acc_rss_activate+0x6c>)
 8005358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800535a:	4910      	ldr	r1, [pc, #64]	; (800539c <acc_rss_activate+0x70>)
 800535c:	2002      	movs	r0, #2
 800535e:	4798      	blx	r3
 8005360:	7823      	ldrb	r3, [r4, #0]
 8005362:	4618      	mov	r0, r3
 8005364:	bd10      	pop	{r4, pc}
 8005366:	f001 f9a3 	bl	80066b0 <acc_rss_integration_log_level>
 800536a:	2801      	cmp	r0, #1
 800536c:	d9f8      	bls.n	8005360 <acc_rss_activate+0x34>
 800536e:	4b09      	ldr	r3, [pc, #36]	; (8005394 <acc_rss_activate+0x68>)
 8005370:	4a0b      	ldr	r2, [pc, #44]	; (80053a0 <acc_rss_activate+0x74>)
 8005372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005374:	4909      	ldr	r1, [pc, #36]	; (800539c <acc_rss_activate+0x70>)
 8005376:	2002      	movs	r0, #2
 8005378:	4798      	blx	r3
 800537a:	7823      	ldrb	r3, [r4, #0]
 800537c:	e7f1      	b.n	8005362 <acc_rss_activate+0x36>
 800537e:	4b05      	ldr	r3, [pc, #20]	; (8005394 <acc_rss_activate+0x68>)
 8005380:	4a08      	ldr	r2, [pc, #32]	; (80053a4 <acc_rss_activate+0x78>)
 8005382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005384:	4905      	ldr	r1, [pc, #20]	; (800539c <acc_rss_activate+0x70>)
 8005386:	2000      	movs	r0, #0
 8005388:	4798      	blx	r3
 800538a:	7823      	ldrb	r3, [r4, #0]
 800538c:	4618      	mov	r0, r3
 800538e:	bd10      	pop	{r4, pc}
 8005390:	20000478 	.word	0x20000478
 8005394:	20000640 	.word	0x20000640
 8005398:	08012ffc 	.word	0x08012ffc
 800539c:	0801301c 	.word	0x0801301c
 80053a0:	08013038 	.word	0x08013038
 80053a4:	08013020 	.word	0x08013020

080053a8 <acc_rss_deactivate>:
 80053a8:	b510      	push	{r4, lr}
 80053aa:	4c0b      	ldr	r4, [pc, #44]	; (80053d8 <acc_rss_deactivate+0x30>)
 80053ac:	7823      	ldrb	r3, [r4, #0]
 80053ae:	b903      	cbnz	r3, 80053b2 <acc_rss_deactivate+0xa>
 80053b0:	bd10      	pop	{r4, pc}
 80053b2:	f000 fcd5 	bl	8005d60 <acc_service_manager_deactivate>
 80053b6:	f002 fda5 	bl	8007f04 <acc_sensor_manager_deactivate>
 80053ba:	f001 f979 	bl	80066b0 <acc_rss_integration_log_level>
 80053be:	2801      	cmp	r0, #1
 80053c0:	d905      	bls.n	80053ce <acc_rss_deactivate+0x26>
 80053c2:	4b06      	ldr	r3, [pc, #24]	; (80053dc <acc_rss_deactivate+0x34>)
 80053c4:	4a06      	ldr	r2, [pc, #24]	; (80053e0 <acc_rss_deactivate+0x38>)
 80053c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053c8:	4906      	ldr	r1, [pc, #24]	; (80053e4 <acc_rss_deactivate+0x3c>)
 80053ca:	2002      	movs	r0, #2
 80053cc:	4798      	blx	r3
 80053ce:	f001 f8b1 	bl	8006534 <acc_rss_integration_unregister>
 80053d2:	2300      	movs	r3, #0
 80053d4:	7023      	strb	r3, [r4, #0]
 80053d6:	bd10      	pop	{r4, pc}
 80053d8:	20000478 	.word	0x20000478
 80053dc:	20000640 	.word	0x20000640
 80053e0:	08013060 	.word	0x08013060
 80053e4:	0801301c 	.word	0x0801301c

080053e8 <acc_service_get_base_configuration>:
 80053e8:	b510      	push	{r4, lr}
 80053ea:	4604      	mov	r4, r0
 80053ec:	b108      	cbz	r0, 80053f2 <acc_service_get_base_configuration+0xa>
 80053ee:	6900      	ldr	r0, [r0, #16]
 80053f0:	bd10      	pop	{r4, pc}
 80053f2:	f001 f95d 	bl	80066b0 <acc_rss_integration_log_level>
 80053f6:	2800      	cmp	r0, #0
 80053f8:	d0fa      	beq.n	80053f0 <acc_service_get_base_configuration+0x8>
 80053fa:	4b04      	ldr	r3, [pc, #16]	; (800540c <acc_service_get_base_configuration+0x24>)
 80053fc:	4a04      	ldr	r2, [pc, #16]	; (8005410 <acc_service_get_base_configuration+0x28>)
 80053fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005400:	4904      	ldr	r1, [pc, #16]	; (8005414 <acc_service_get_base_configuration+0x2c>)
 8005402:	2001      	movs	r0, #1
 8005404:	4798      	blx	r3
 8005406:	4620      	mov	r0, r4
 8005408:	bd10      	pop	{r4, pc}
 800540a:	bf00      	nop
 800540c:	20000640 	.word	0x20000640
 8005410:	08013084 	.word	0x08013084
 8005414:	0801309c 	.word	0x0801309c

08005418 <set_maximize_signal_attenuation>:
 8005418:	b570      	push	{r4, r5, r6, lr}
 800541a:	460d      	mov	r5, r1
 800541c:	4606      	mov	r6, r0
 800541e:	f7ff ffe3 	bl	80053e8 <acc_service_get_base_configuration>
 8005422:	b158      	cbz	r0, 800543c <set_maximize_signal_attenuation+0x24>
 8005424:	4629      	mov	r1, r5
 8005426:	4604      	mov	r4, r0
 8005428:	f000 ff38 	bl	800629c <acc_base_configuration_maximize_signal_attenuation_set>
 800542c:	b93d      	cbnz	r5, 800543e <set_maximize_signal_attenuation+0x26>
 800542e:	68b3      	ldr	r3, [r6, #8]
 8005430:	b123      	cbz	r3, 800543c <set_maximize_signal_attenuation+0x24>
 8005432:	7971      	ldrb	r1, [r6, #5]
 8005434:	4630      	mov	r0, r6
 8005436:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800543a:	4718      	bx	r3
 800543c:	bd70      	pop	{r4, r5, r6, pc}
 800543e:	4620      	mov	r0, r4
 8005440:	210f      	movs	r1, #15
 8005442:	f000 fe1d 	bl	8006080 <acc_base_configuration_integrator_set>
 8005446:	4620      	mov	r0, r4
 8005448:	2101      	movs	r1, #1
 800544a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800544e:	f000 be3f 	b.w	80060d0 <acc_base_configuration_integrator_ramp_up_set>
 8005452:	bf00      	nop

08005454 <acc_service_requested_start_set>:
 8005454:	b500      	push	{lr}
 8005456:	b083      	sub	sp, #12
 8005458:	ed8d 0a01 	vstr	s0, [sp, #4]
 800545c:	f7ff ffc4 	bl	80053e8 <acc_service_get_base_configuration>
 8005460:	ed9d 0a01 	vldr	s0, [sp, #4]
 8005464:	b003      	add	sp, #12
 8005466:	f85d eb04 	ldr.w	lr, [sp], #4
 800546a:	f000 bcd3 	b.w	8005e14 <acc_base_configuration_requested_start_set>
 800546e:	bf00      	nop

08005470 <acc_service_requested_length_set>:
 8005470:	b500      	push	{lr}
 8005472:	b083      	sub	sp, #12
 8005474:	ed8d 0a01 	vstr	s0, [sp, #4]
 8005478:	f7ff ffb6 	bl	80053e8 <acc_service_get_base_configuration>
 800547c:	ed9d 0a01 	vldr	s0, [sp, #4]
 8005480:	b003      	add	sp, #12
 8005482:	f85d eb04 	ldr.w	lr, [sp], #4
 8005486:	f000 bce1 	b.w	8005e4c <acc_base_configuration_requested_length_set>
 800548a:	bf00      	nop

0800548c <acc_service_pipeline_destroy>:
 800548c:	b510      	push	{r4, lr}
 800548e:	4604      	mov	r4, r0
 8005490:	6900      	ldr	r0, [r0, #16]
 8005492:	b118      	cbz	r0, 800549c <acc_service_pipeline_destroy+0x10>
 8005494:	68c3      	ldr	r3, [r0, #12]
 8005496:	4798      	blx	r3
 8005498:	2300      	movs	r3, #0
 800549a:	6123      	str	r3, [r4, #16]
 800549c:	bd10      	pop	{r4, pc}
 800549e:	bf00      	nop

080054a0 <acc_service_send_data>:
 80054a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054a2:	9e06      	ldr	r6, [sp, #24]
 80054a4:	6944      	ldr	r4, [r0, #20]
 80054a6:	7835      	ldrb	r5, [r6, #0]
 80054a8:	461f      	mov	r7, r3
 80054aa:	b91d      	cbnz	r5, 80054b4 <acc_service_send_data+0x14>
 80054ac:	7ea5      	ldrb	r5, [r4, #26]
 80054ae:	b95d      	cbnz	r5, 80054c8 <acc_service_send_data+0x28>
 80054b0:	68a3      	ldr	r3, [r4, #8]
 80054b2:	6019      	str	r1, [r3, #0]
 80054b4:	6920      	ldr	r0, [r4, #16]
 80054b6:	7665      	strb	r5, [r4, #25]
 80054b8:	b128      	cbz	r0, 80054c6 <acc_service_send_data+0x26>
 80054ba:	6962      	ldr	r2, [r4, #20]
 80054bc:	4639      	mov	r1, r7
 80054be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80054c2:	f009 bac5 	b.w	800ea50 <memcpy>
 80054c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054c8:	68e3      	ldr	r3, [r4, #12]
 80054ca:	6860      	ldr	r0, [r4, #4]
 80054cc:	429a      	cmp	r2, r3
 80054ce:	bf28      	it	cs
 80054d0:	461a      	movcs	r2, r3
 80054d2:	f009 fabd 	bl	800ea50 <memcpy>
 80054d6:	7835      	ldrb	r5, [r6, #0]
 80054d8:	e7ec      	b.n	80054b4 <acc_service_send_data+0x14>
 80054da:	bf00      	nop

080054dc <acc_service_set_module_active>:
 80054dc:	4b01      	ldr	r3, [pc, #4]	; (80054e4 <acc_service_set_module_active+0x8>)
 80054de:	7018      	strb	r0, [r3, #0]
 80054e0:	4770      	bx	lr
 80054e2:	bf00      	nop
 80054e4:	20000479 	.word	0x20000479

080054e8 <acc_service_handle_valid>:
 80054e8:	b508      	push	{r3, lr}
 80054ea:	b118      	cbz	r0, 80054f4 <acc_service_handle_valid+0xc>
 80054ec:	6802      	ldr	r2, [r0, #0]
 80054ee:	4b06      	ldr	r3, [pc, #24]	; (8005508 <acc_service_handle_valid+0x20>)
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d007      	beq.n	8005504 <acc_service_handle_valid+0x1c>
 80054f4:	4b05      	ldr	r3, [pc, #20]	; (800550c <acc_service_handle_valid+0x24>)
 80054f6:	4a06      	ldr	r2, [pc, #24]	; (8005510 <acc_service_handle_valid+0x28>)
 80054f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054fa:	4906      	ldr	r1, [pc, #24]	; (8005514 <acc_service_handle_valid+0x2c>)
 80054fc:	2000      	movs	r0, #0
 80054fe:	4798      	blx	r3
 8005500:	2000      	movs	r0, #0
 8005502:	bd08      	pop	{r3, pc}
 8005504:	2001      	movs	r0, #1
 8005506:	bd08      	pop	{r3, pc}
 8005508:	acc09ee8 	.word	0xacc09ee8
 800550c:	20000640 	.word	0x20000640
 8005510:	080130a4 	.word	0x080130a4
 8005514:	0801309c 	.word	0x0801309c

08005518 <acc_service_activate>:
 8005518:	b570      	push	{r4, r5, r6, lr}
 800551a:	4604      	mov	r4, r0
 800551c:	f7ff ffe4 	bl	80054e8 <acc_service_handle_valid>
 8005520:	b1b0      	cbz	r0, 8005550 <acc_service_activate+0x38>
 8005522:	4b19      	ldr	r3, [pc, #100]	; (8005588 <acc_service_activate+0x70>)
 8005524:	7818      	ldrb	r0, [r3, #0]
 8005526:	b198      	cbz	r0, 8005550 <acc_service_activate+0x38>
 8005528:	7a63      	ldrb	r3, [r4, #9]
 800552a:	b903      	cbnz	r3, 800552e <acc_service_activate+0x16>
 800552c:	bd70      	pop	{r4, r5, r6, pc}
 800552e:	6863      	ldr	r3, [r4, #4]
 8005530:	2b2a      	cmp	r3, #42	; 0x2a
 8005532:	d80d      	bhi.n	8005550 <acc_service_activate+0x38>
 8005534:	4d15      	ldr	r5, [pc, #84]	; (800558c <acc_service_activate+0x74>)
 8005536:	f815 2013 	ldrb.w	r2, [r5, r3, lsl #1]
 800553a:	b94a      	cbnz	r2, 8005550 <acc_service_activate+0x38>
 800553c:	eb05 0243 	add.w	r2, r5, r3, lsl #1
 8005540:	2101      	movs	r1, #1
 8005542:	7856      	ldrb	r6, [r2, #1]
 8005544:	f805 1013 	strb.w	r1, [r5, r3, lsl #1]
 8005548:	b156      	cbz	r6, 8005560 <acc_service_activate+0x48>
 800554a:	2200      	movs	r2, #0
 800554c:	f805 2013 	strb.w	r2, [r5, r3, lsl #1]
 8005550:	4b0f      	ldr	r3, [pc, #60]	; (8005590 <acc_service_activate+0x78>)
 8005552:	4a10      	ldr	r2, [pc, #64]	; (8005594 <acc_service_activate+0x7c>)
 8005554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005556:	4910      	ldr	r1, [pc, #64]	; (8005598 <acc_service_activate+0x80>)
 8005558:	2000      	movs	r0, #0
 800555a:	4798      	blx	r3
 800555c:	2000      	movs	r0, #0
 800555e:	bd70      	pop	{r4, r5, r6, pc}
 8005560:	f104 0018 	add.w	r0, r4, #24
 8005564:	f002 fe38 	bl	80081d8 <acc_sensor_manager_start_measurement>
 8005568:	6863      	ldr	r3, [r4, #4]
 800556a:	b910      	cbnz	r0, 8005572 <acc_service_activate+0x5a>
 800556c:	2b2a      	cmp	r3, #42	; 0x2a
 800556e:	d8ef      	bhi.n	8005550 <acc_service_activate+0x38>
 8005570:	e7eb      	b.n	800554a <acc_service_activate+0x32>
 8005572:	2b2a      	cmp	r3, #42	; 0x2a
 8005574:	d805      	bhi.n	8005582 <acc_service_activate+0x6a>
 8005576:	f44f 7280 	mov.w	r2, #256	; 0x100
 800557a:	7266      	strb	r6, [r4, #9]
 800557c:	f825 2013 	strh.w	r2, [r5, r3, lsl #1]
 8005580:	bd70      	pop	{r4, r5, r6, pc}
 8005582:	7266      	strb	r6, [r4, #9]
 8005584:	bd70      	pop	{r4, r5, r6, pc}
 8005586:	bf00      	nop
 8005588:	20000479 	.word	0x20000479
 800558c:	2000047c 	.word	0x2000047c
 8005590:	20000640 	.word	0x20000640
 8005594:	080130b4 	.word	0x080130b4
 8005598:	0801309c 	.word	0x0801309c

0800559c <acc_service_deactivate>:
 800559c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055a0:	4605      	mov	r5, r0
 80055a2:	f7ff ffa1 	bl	80054e8 <acc_service_handle_valid>
 80055a6:	b110      	cbz	r0, 80055ae <acc_service_deactivate+0x12>
 80055a8:	4b16      	ldr	r3, [pc, #88]	; (8005604 <acc_service_deactivate+0x68>)
 80055aa:	781c      	ldrb	r4, [r3, #0]
 80055ac:	b94c      	cbnz	r4, 80055c2 <acc_service_deactivate+0x26>
 80055ae:	4b16      	ldr	r3, [pc, #88]	; (8005608 <acc_service_deactivate+0x6c>)
 80055b0:	4a16      	ldr	r2, [pc, #88]	; (800560c <acc_service_deactivate+0x70>)
 80055b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055b4:	4916      	ldr	r1, [pc, #88]	; (8005610 <acc_service_deactivate+0x74>)
 80055b6:	2000      	movs	r0, #0
 80055b8:	4798      	blx	r3
 80055ba:	2400      	movs	r4, #0
 80055bc:	4620      	mov	r0, r4
 80055be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055c2:	7a6b      	ldrb	r3, [r5, #9]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d1f9      	bne.n	80055bc <acc_service_deactivate+0x20>
 80055c8:	686b      	ldr	r3, [r5, #4]
 80055ca:	2b2a      	cmp	r3, #42	; 0x2a
 80055cc:	d8ef      	bhi.n	80055ae <acc_service_deactivate+0x12>
 80055ce:	4e11      	ldr	r6, [pc, #68]	; (8005614 <acc_service_deactivate+0x78>)
 80055d0:	f816 7013 	ldrb.w	r7, [r6, r3, lsl #1]
 80055d4:	2f00      	cmp	r7, #0
 80055d6:	d1ea      	bne.n	80055ae <acc_service_deactivate+0x12>
 80055d8:	f04f 0801 	mov.w	r8, #1
 80055dc:	f105 0018 	add.w	r0, r5, #24
 80055e0:	f806 8013 	strb.w	r8, [r6, r3, lsl #1]
 80055e4:	f002 fe32 	bl	800824c <acc_sensor_manager_stop_measurement>
 80055e8:	686b      	ldr	r3, [r5, #4]
 80055ea:	2b2a      	cmp	r3, #42	; 0x2a
 80055ec:	d807      	bhi.n	80055fe <acc_service_deactivate+0x62>
 80055ee:	eb06 0243 	add.w	r2, r6, r3, lsl #1
 80055f2:	7057      	strb	r7, [r2, #1]
 80055f4:	f885 8009 	strb.w	r8, [r5, #9]
 80055f8:	f806 7013 	strb.w	r7, [r6, r3, lsl #1]
 80055fc:	e7de      	b.n	80055bc <acc_service_deactivate+0x20>
 80055fe:	f885 8009 	strb.w	r8, [r5, #9]
 8005602:	e7db      	b.n	80055bc <acc_service_deactivate+0x20>
 8005604:	20000479 	.word	0x20000479
 8005608:	20000640 	.word	0x20000640
 800560c:	080130d0 	.word	0x080130d0
 8005610:	0801309c 	.word	0x0801309c
 8005614:	2000047c 	.word	0x2000047c

08005618 <acc_service_get_next>:
 8005618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800561c:	460c      	mov	r4, r1
 800561e:	b082      	sub	sp, #8
 8005620:	4606      	mov	r6, r0
 8005622:	f7ff ff61 	bl	80054e8 <acc_service_handle_valid>
 8005626:	7ea5      	ldrb	r5, [r4, #26]
 8005628:	b175      	cbz	r5, 8005648 <acc_service_get_next+0x30>
 800562a:	6863      	ldr	r3, [r4, #4]
 800562c:	b10b      	cbz	r3, 8005632 <acc_service_get_next+0x1a>
 800562e:	68e3      	ldr	r3, [r4, #12]
 8005630:	b96b      	cbnz	r3, 800564e <acc_service_get_next+0x36>
 8005632:	4b29      	ldr	r3, [pc, #164]	; (80056d8 <acc_service_get_next+0xc0>)
 8005634:	4a29      	ldr	r2, [pc, #164]	; (80056dc <acc_service_get_next+0xc4>)
 8005636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005638:	4929      	ldr	r1, [pc, #164]	; (80056e0 <acc_service_get_next+0xc8>)
 800563a:	2000      	movs	r0, #0
 800563c:	4798      	blx	r3
 800563e:	2500      	movs	r5, #0
 8005640:	4628      	mov	r0, r5
 8005642:	b002      	add	sp, #8
 8005644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005648:	68a3      	ldr	r3, [r4, #8]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d033      	beq.n	80056b6 <acc_service_get_next+0x9e>
 800564e:	b920      	cbnz	r0, 800565a <acc_service_get_next+0x42>
 8005650:	2500      	movs	r5, #0
 8005652:	4628      	mov	r0, r5
 8005654:	b002      	add	sp, #8
 8005656:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800565a:	7a33      	ldrb	r3, [r6, #8]
 800565c:	7822      	ldrb	r2, [r4, #0]
 800565e:	4293      	cmp	r3, r2
 8005660:	d007      	beq.n	8005672 <acc_service_get_next+0x5a>
 8005662:	491d      	ldr	r1, [pc, #116]	; (80056d8 <acc_service_get_next+0xc0>)
 8005664:	9200      	str	r2, [sp, #0]
 8005666:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 8005668:	4a1e      	ldr	r2, [pc, #120]	; (80056e4 <acc_service_get_next+0xcc>)
 800566a:	491d      	ldr	r1, [pc, #116]	; (80056e0 <acc_service_get_next+0xc8>)
 800566c:	2000      	movs	r0, #0
 800566e:	47a0      	blx	r4
 8005670:	e7ee      	b.n	8005650 <acc_service_get_next+0x38>
 8005672:	7e27      	ldrb	r7, [r4, #24]
 8005674:	bb4f      	cbnz	r7, 80056ca <acc_service_get_next+0xb2>
 8005676:	f896 8009 	ldrb.w	r8, [r6, #9]
 800567a:	f1b8 0f00 	cmp.w	r8, #0
 800567e:	d00f      	beq.n	80056a0 <acc_service_get_next+0x88>
 8005680:	4b15      	ldr	r3, [pc, #84]	; (80056d8 <acc_service_get_next+0xc0>)
 8005682:	4a19      	ldr	r2, [pc, #100]	; (80056e8 <acc_service_get_next+0xd0>)
 8005684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005686:	4916      	ldr	r1, [pc, #88]	; (80056e0 <acc_service_get_next+0xc8>)
 8005688:	2000      	movs	r0, #0
 800568a:	4798      	blx	r3
 800568c:	2500      	movs	r5, #0
 800568e:	2f00      	cmp	r7, #0
 8005690:	d0df      	beq.n	8005652 <acc_service_get_next+0x3a>
 8005692:	4630      	mov	r0, r6
 8005694:	f7ff ff82 	bl	800559c <acc_service_deactivate>
 8005698:	4628      	mov	r0, r5
 800569a:	b002      	add	sp, #8
 800569c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056a0:	6933      	ldr	r3, [r6, #16]
 80056a2:	6174      	str	r4, [r6, #20]
 80056a4:	e9d3 0200 	ldrd	r0, r2, [r3]
 80056a8:	4790      	blx	r2
 80056aa:	7e65      	ldrb	r5, [r4, #25]
 80056ac:	f8c6 8014 	str.w	r8, [r6, #20]
 80056b0:	f085 0501 	eor.w	r5, r5, #1
 80056b4:	e7eb      	b.n	800568e <acc_service_get_next+0x76>
 80056b6:	4b08      	ldr	r3, [pc, #32]	; (80056d8 <acc_service_get_next+0xc0>)
 80056b8:	4a0c      	ldr	r2, [pc, #48]	; (80056ec <acc_service_get_next+0xd4>)
 80056ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056bc:	4908      	ldr	r1, [pc, #32]	; (80056e0 <acc_service_get_next+0xc8>)
 80056be:	4628      	mov	r0, r5
 80056c0:	4798      	blx	r3
 80056c2:	4628      	mov	r0, r5
 80056c4:	b002      	add	sp, #8
 80056c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056ca:	4630      	mov	r0, r6
 80056cc:	f7ff ff24 	bl	8005518 <acc_service_activate>
 80056d0:	4607      	mov	r7, r0
 80056d2:	2800      	cmp	r0, #0
 80056d4:	d1cf      	bne.n	8005676 <acc_service_get_next+0x5e>
 80056d6:	e7bb      	b.n	8005650 <acc_service_get_next+0x38>
 80056d8:	20000640 	.word	0x20000640
 80056dc:	080130ec 	.word	0x080130ec
 80056e0:	0801309c 	.word	0x0801309c
 80056e4:	08013124 	.word	0x08013124
 80056e8:	08013140 	.word	0x08013140
 80056ec:	0801310c 	.word	0x0801310c

080056f0 <acc_service_configuration_valid>:
 80056f0:	b508      	push	{r3, lr}
 80056f2:	b118      	cbz	r0, 80056fc <acc_service_configuration_valid+0xc>
 80056f4:	4b09      	ldr	r3, [pc, #36]	; (800571c <acc_service_configuration_valid+0x2c>)
 80056f6:	6802      	ldr	r2, [r0, #0]
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d007      	beq.n	800570c <acc_service_configuration_valid+0x1c>
 80056fc:	4b08      	ldr	r3, [pc, #32]	; (8005720 <acc_service_configuration_valid+0x30>)
 80056fe:	4a09      	ldr	r2, [pc, #36]	; (8005724 <acc_service_configuration_valid+0x34>)
 8005700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005702:	4909      	ldr	r1, [pc, #36]	; (8005728 <acc_service_configuration_valid+0x38>)
 8005704:	2000      	movs	r0, #0
 8005706:	4798      	blx	r3
 8005708:	2000      	movs	r0, #0
 800570a:	bd08      	pop	{r3, pc}
 800570c:	8b03      	ldrh	r3, [r0, #24]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d0f4      	beq.n	80056fc <acc_service_configuration_valid+0xc>
 8005712:	6943      	ldr	r3, [r0, #20]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d0f1      	beq.n	80056fc <acc_service_configuration_valid+0xc>
 8005718:	2001      	movs	r0, #1
 800571a:	bd08      	pop	{r3, pc}
 800571c:	acc09dd7 	.word	0xacc09dd7
 8005720:	20000640 	.word	0x20000640
 8005724:	08013084 	.word	0x08013084
 8005728:	0801309c 	.word	0x0801309c

0800572c <acc_service_configuration_check>:
 800572c:	b510      	push	{r4, lr}
 800572e:	4604      	mov	r4, r0
 8005730:	f7ff ffde 	bl	80056f0 <acc_service_configuration_valid>
 8005734:	b118      	cbz	r0, 800573e <acc_service_configuration_check+0x12>
 8005736:	7963      	ldrb	r3, [r4, #5]
 8005738:	3b01      	subs	r3, #1
 800573a:	2b04      	cmp	r3, #4
 800573c:	d800      	bhi.n	8005740 <acc_service_configuration_check+0x14>
 800573e:	bd10      	pop	{r4, pc}
 8005740:	4b03      	ldr	r3, [pc, #12]	; (8005750 <acc_service_configuration_check+0x24>)
 8005742:	4a04      	ldr	r2, [pc, #16]	; (8005754 <acc_service_configuration_check+0x28>)
 8005744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005746:	4904      	ldr	r1, [pc, #16]	; (8005758 <acc_service_configuration_check+0x2c>)
 8005748:	2000      	movs	r0, #0
 800574a:	4798      	blx	r3
 800574c:	2000      	movs	r0, #0
 800574e:	bd10      	pop	{r4, pc}
 8005750:	20000640 	.word	0x20000640
 8005754:	08013158 	.word	0x08013158
 8005758:	0801309c 	.word	0x0801309c

0800575c <acc_service_profile_set>:
 800575c:	b510      	push	{r4, lr}
 800575e:	b138      	cbz	r0, 8005770 <acc_service_profile_set+0x14>
 8005760:	6882      	ldr	r2, [r0, #8]
 8005762:	4604      	mov	r4, r0
 8005764:	b122      	cbz	r2, 8005770 <acc_service_profile_set+0x14>
 8005766:	7141      	strb	r1, [r0, #5]
 8005768:	4790      	blx	r2
 800576a:	7b23      	ldrb	r3, [r4, #12]
 800576c:	b963      	cbnz	r3, 8005788 <acc_service_profile_set+0x2c>
 800576e:	bd10      	pop	{r4, pc}
 8005770:	f000 ff9e 	bl	80066b0 <acc_rss_integration_log_level>
 8005774:	2800      	cmp	r0, #0
 8005776:	d0fa      	beq.n	800576e <acc_service_profile_set+0x12>
 8005778:	4b06      	ldr	r3, [pc, #24]	; (8005794 <acc_service_profile_set+0x38>)
 800577a:	4a07      	ldr	r2, [pc, #28]	; (8005798 <acc_service_profile_set+0x3c>)
 800577c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800577e:	4907      	ldr	r1, [pc, #28]	; (800579c <acc_service_profile_set+0x40>)
 8005780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005784:	2001      	movs	r0, #1
 8005786:	4718      	bx	r3
 8005788:	4620      	mov	r0, r4
 800578a:	2101      	movs	r1, #1
 800578c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005790:	f7ff be42 	b.w	8005418 <set_maximize_signal_attenuation>
 8005794:	20000640 	.word	0x20000640
 8005798:	08013084 	.word	0x08013084
 800579c:	0801309c 	.word	0x0801309c

080057a0 <acc_service_maximize_signal_attenuation_set>:
 80057a0:	b110      	cbz	r0, 80057a8 <acc_service_maximize_signal_attenuation_set+0x8>
 80057a2:	7301      	strb	r1, [r0, #12]
 80057a4:	f7ff be38 	b.w	8005418 <set_maximize_signal_attenuation>
 80057a8:	b510      	push	{r4, lr}
 80057aa:	f000 ff81 	bl	80066b0 <acc_rss_integration_log_level>
 80057ae:	b138      	cbz	r0, 80057c0 <acc_service_maximize_signal_attenuation_set+0x20>
 80057b0:	4b04      	ldr	r3, [pc, #16]	; (80057c4 <acc_service_maximize_signal_attenuation_set+0x24>)
 80057b2:	4a05      	ldr	r2, [pc, #20]	; (80057c8 <acc_service_maximize_signal_attenuation_set+0x28>)
 80057b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057b6:	4905      	ldr	r1, [pc, #20]	; (80057cc <acc_service_maximize_signal_attenuation_set+0x2c>)
 80057b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057bc:	2001      	movs	r0, #1
 80057be:	4718      	bx	r3
 80057c0:	bd10      	pop	{r4, pc}
 80057c2:	bf00      	nop
 80057c4:	20000640 	.word	0x20000640
 80057c8:	08013084 	.word	0x08013084
 80057cc:	0801309c 	.word	0x0801309c

080057d0 <acc_service_initialize_service_configuration>:
 80057d0:	b538      	push	{r3, r4, r5, lr}
 80057d2:	7101      	strb	r1, [r0, #4]
 80057d4:	6102      	str	r2, [r0, #16]
 80057d6:	9905      	ldr	r1, [sp, #20]
 80057d8:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80057dc:	4d07      	ldr	r5, [pc, #28]	; (80057fc <acc_service_initialize_service_configuration+0x2c>)
 80057de:	6143      	str	r3, [r0, #20]
 80057e0:	4604      	mov	r4, r0
 80057e2:	6005      	str	r5, [r0, #0]
 80057e4:	6081      	str	r1, [r0, #8]
 80057e6:	8302      	strh	r2, [r0, #24]
 80057e8:	f89d 1018 	ldrb.w	r1, [sp, #24]
 80057ec:	f7ff ffb6 	bl	800575c <acc_service_profile_set>
 80057f0:	4620      	mov	r0, r4
 80057f2:	2100      	movs	r1, #0
 80057f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80057f8:	f7ff bfd2 	b.w	80057a0 <acc_service_maximize_signal_attenuation_set>
 80057fc:	acc09dd7 	.word	0xacc09dd7

08005800 <envelope_send_data>:
 8005800:	b570      	push	{r4, r5, r6, lr}
 8005802:	460b      	mov	r3, r1
 8005804:	b084      	sub	sp, #16
 8005806:	ac02      	add	r4, sp, #8
 8005808:	4601      	mov	r1, r0
 800580a:	4610      	mov	r0, r2
 800580c:	795a      	ldrb	r2, [r3, #5]
 800580e:	9400      	str	r4, [sp, #0]
 8005810:	791e      	ldrb	r6, [r3, #4]
 8005812:	79dd      	ldrb	r5, [r3, #7]
 8005814:	799c      	ldrb	r4, [r3, #6]
 8005816:	f88d 200d 	strb.w	r2, [sp, #13]
 800581a:	f88d 2008 	strb.w	r2, [sp, #8]
 800581e:	691a      	ldr	r2, [r3, #16]
 8005820:	f88d 600e 	strb.w	r6, [sp, #14]
 8005824:	ab03      	add	r3, sp, #12
 8005826:	f88d 500f 	strb.w	r5, [sp, #15]
 800582a:	f88d 400c 	strb.w	r4, [sp, #12]
 800582e:	f7ff fe37 	bl	80054a0 <acc_service_send_data>
 8005832:	b004      	add	sp, #16
 8005834:	bd70      	pop	{r4, r5, r6, pc}
 8005836:	bf00      	nop

08005838 <envelope_create_service>:
 8005838:	b570      	push	{r4, r5, r6, lr}
 800583a:	b0a4      	sub	sp, #144	; 0x90
 800583c:	2288      	movs	r2, #136	; 0x88
 800583e:	4604      	mov	r4, r0
 8005840:	a802      	add	r0, sp, #8
 8005842:	460d      	mov	r5, r1
 8005844:	f009 f904 	bl	800ea50 <memcpy>
 8005848:	a809      	add	r0, sp, #36	; 0x24
 800584a:	f000 fcc3 	bl	80061d4 <acc_base_configuration_downsampling_factor_get>
 800584e:	ee07 0a90 	vmov	s15, r0
 8005852:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8005856:	eddd 7a23 	vldr	s15, [sp, #140]	; 0x8c
 800585a:	a809      	add	r0, sp, #36	; 0x24
 800585c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005860:	f000 fbb2 	bl	8005fc8 <acc_base_configuration_demodulation_filter_cutoff_freq_ratio_set>
 8005864:	a802      	add	r0, sp, #8
 8005866:	f7ff ff61 	bl	800572c <acc_service_configuration_check>
 800586a:	b1c0      	cbz	r0, 800589e <envelope_create_service+0x66>
 800586c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800586e:	2b04      	cmp	r3, #4
 8005870:	d00f      	beq.n	8005892 <envelope_create_service+0x5a>
 8005872:	a809      	add	r0, sp, #36	; 0x24
 8005874:	f000 fdb8 	bl	80063e8 <acc_base_configuration_check>
 8005878:	b188      	cbz	r0, 800589e <envelope_create_service+0x66>
 800587a:	a809      	add	r0, sp, #36	; 0x24
 800587c:	f000 fcaa 	bl	80061d4 <acc_base_configuration_downsampling_factor_get>
 8005880:	1e43      	subs	r3, r0, #1
 8005882:	b29b      	uxth	r3, r3
 8005884:	2b01      	cmp	r3, #1
 8005886:	d90d      	bls.n	80058a4 <envelope_create_service+0x6c>
 8005888:	2804      	cmp	r0, #4
 800588a:	d00b      	beq.n	80058a4 <envelope_create_service+0x6c>
 800588c:	4b1a      	ldr	r3, [pc, #104]	; (80058f8 <envelope_create_service+0xc0>)
 800588e:	4a1b      	ldr	r2, [pc, #108]	; (80058fc <envelope_create_service+0xc4>)
 8005890:	e001      	b.n	8005896 <envelope_create_service+0x5e>
 8005892:	4b19      	ldr	r3, [pc, #100]	; (80058f8 <envelope_create_service+0xc0>)
 8005894:	4a1a      	ldr	r2, [pc, #104]	; (8005900 <envelope_create_service+0xc8>)
 8005896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005898:	491a      	ldr	r1, [pc, #104]	; (8005904 <envelope_create_service+0xcc>)
 800589a:	2000      	movs	r0, #0
 800589c:	4798      	blx	r3
 800589e:	2000      	movs	r0, #0
 80058a0:	b024      	add	sp, #144	; 0x90
 80058a2:	bd70      	pop	{r4, r5, r6, pc}
 80058a4:	2200      	movs	r2, #0
 80058a6:	4611      	mov	r1, r2
 80058a8:	a809      	add	r0, sp, #36	; 0x24
 80058aa:	f000 fd01 	bl	80062b0 <acc_base_configuration_cca_get>
 80058ae:	2100      	movs	r1, #0
 80058b0:	4606      	mov	r6, r0
 80058b2:	a809      	add	r0, sp, #36	; 0x24
 80058b4:	f000 fb4e 	bl	8005f54 <acc_base_configuration_time_domain_low_pass_filter_alpha_get>
 80058b8:	b106      	cbz	r6, 80058bc <envelope_create_service+0x84>
 80058ba:	b990      	cbnz	r0, 80058e2 <envelope_create_service+0xaa>
 80058bc:	792b      	ldrb	r3, [r5, #4]
 80058be:	7223      	strb	r3, [r4, #8]
 80058c0:	4b11      	ldr	r3, [pc, #68]	; (8005908 <envelope_create_service+0xd0>)
 80058c2:	9301      	str	r3, [sp, #4]
 80058c4:	aa09      	add	r2, sp, #36	; 0x24
 80058c6:	4623      	mov	r3, r4
 80058c8:	a901      	add	r1, sp, #4
 80058ca:	f104 0018 	add.w	r0, r4, #24
 80058ce:	f000 ff21 	bl	8006714 <acc_pipeline_envelope_assemble>
 80058d2:	4b0e      	ldr	r3, [pc, #56]	; (800590c <envelope_create_service+0xd4>)
 80058d4:	6120      	str	r0, [r4, #16]
 80058d6:	3800      	subs	r0, #0
 80058d8:	bf18      	it	ne
 80058da:	2001      	movne	r0, #1
 80058dc:	60e3      	str	r3, [r4, #12]
 80058de:	b024      	add	sp, #144	; 0x90
 80058e0:	bd70      	pop	{r4, r5, r6, pc}
 80058e2:	f000 fee5 	bl	80066b0 <acc_rss_integration_log_level>
 80058e6:	2800      	cmp	r0, #0
 80058e8:	d0e8      	beq.n	80058bc <envelope_create_service+0x84>
 80058ea:	4b03      	ldr	r3, [pc, #12]	; (80058f8 <envelope_create_service+0xc0>)
 80058ec:	4a08      	ldr	r2, [pc, #32]	; (8005910 <envelope_create_service+0xd8>)
 80058ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058f0:	4904      	ldr	r1, [pc, #16]	; (8005904 <envelope_create_service+0xcc>)
 80058f2:	2001      	movs	r0, #1
 80058f4:	4798      	blx	r3
 80058f6:	e7e1      	b.n	80058bc <envelope_create_service+0x84>
 80058f8:	20000640 	.word	0x20000640
 80058fc:	080131c0 	.word	0x080131c0
 8005900:	08013170 	.word	0x08013170
 8005904:	080131ac 	.word	0x080131ac
 8005908:	08005801 	.word	0x08005801
 800590c:	0800548d 	.word	0x0800548d
 8005910:	080131e0 	.word	0x080131e0

08005914 <get_and_validate_envelope_configuration>:
 8005914:	b510      	push	{r4, lr}
 8005916:	4604      	mov	r4, r0
 8005918:	f7ff feea 	bl	80056f0 <acc_service_configuration_valid>
 800591c:	b108      	cbz	r0, 8005922 <get_and_validate_envelope_configuration+0xe>
 800591e:	7923      	ldrb	r3, [r4, #4]
 8005920:	b153      	cbz	r3, 8005938 <get_and_validate_envelope_configuration+0x24>
 8005922:	f000 fec5 	bl	80066b0 <acc_rss_integration_log_level>
 8005926:	b130      	cbz	r0, 8005936 <get_and_validate_envelope_configuration+0x22>
 8005928:	4b04      	ldr	r3, [pc, #16]	; (800593c <get_and_validate_envelope_configuration+0x28>)
 800592a:	4a05      	ldr	r2, [pc, #20]	; (8005940 <get_and_validate_envelope_configuration+0x2c>)
 800592c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800592e:	4905      	ldr	r1, [pc, #20]	; (8005944 <get_and_validate_envelope_configuration+0x30>)
 8005930:	2001      	movs	r0, #1
 8005932:	4798      	blx	r3
 8005934:	2000      	movs	r0, #0
 8005936:	bd10      	pop	{r4, pc}
 8005938:	4620      	mov	r0, r4
 800593a:	bd10      	pop	{r4, pc}
 800593c:	20000640 	.word	0x20000640
 8005940:	08013084 	.word	0x08013084
 8005944:	080131ac 	.word	0x080131ac

08005948 <set_configuration_for_profile>:
 8005948:	b530      	push	{r4, r5, lr}
 800594a:	b083      	sub	sp, #12
 800594c:	460c      	mov	r4, r1
 800594e:	f7ff ffe1 	bl	8005914 <get_and_validate_envelope_configuration>
 8005952:	b1c0      	cbz	r0, 8005986 <set_configuration_for_profile+0x3e>
 8005954:	1e61      	subs	r1, r4, #1
 8005956:	4605      	mov	r5, r0
 8005958:	301c      	adds	r0, #28
 800595a:	2904      	cmp	r1, #4
 800595c:	d813      	bhi.n	8005986 <set_configuration_for_profile+0x3e>
 800595e:	e8df f001 	tbb	[pc, r1]
 8005962:	2514      	.short	0x2514
 8005964:	3836      	.short	0x3836
 8005966:	03          	.byte	0x03
 8005967:	00          	.byte	0x00
 8005968:	2110      	movs	r1, #16
 800596a:	9001      	str	r0, [sp, #4]
 800596c:	f000 fb9c 	bl	80060a8 <acc_base_configuration_wg_duration_set>
 8005970:	9801      	ldr	r0, [sp, #4]
 8005972:	2106      	movs	r1, #6
 8005974:	f000 fb84 	bl	8006080 <acc_base_configuration_integrator_set>
 8005978:	9801      	ldr	r0, [sp, #4]
 800597a:	2101      	movs	r1, #1
 800597c:	f000 fba8 	bl	80060d0 <acc_base_configuration_integrator_ramp_up_set>
 8005980:	4b15      	ldr	r3, [pc, #84]	; (80059d8 <set_configuration_for_profile+0x90>)
 8005982:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
 8005986:	b003      	add	sp, #12
 8005988:	bd30      	pop	{r4, r5, pc}
 800598a:	2100      	movs	r1, #0
 800598c:	9001      	str	r0, [sp, #4]
 800598e:	f000 fb8b 	bl	80060a8 <acc_base_configuration_wg_duration_set>
 8005992:	9801      	ldr	r0, [sp, #4]
 8005994:	2100      	movs	r1, #0
 8005996:	f000 fb73 	bl	8006080 <acc_base_configuration_integrator_set>
 800599a:	9801      	ldr	r0, [sp, #4]
 800599c:	2103      	movs	r1, #3
 800599e:	f000 fb97 	bl	80060d0 <acc_base_configuration_integrator_ramp_up_set>
 80059a2:	4b0e      	ldr	r3, [pc, #56]	; (80059dc <set_configuration_for_profile+0x94>)
 80059a4:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
 80059a8:	b003      	add	sp, #12
 80059aa:	bd30      	pop	{r4, r5, pc}
 80059ac:	2107      	movs	r1, #7
 80059ae:	9001      	str	r0, [sp, #4]
 80059b0:	f000 fb7a 	bl	80060a8 <acc_base_configuration_wg_duration_set>
 80059b4:	9801      	ldr	r0, [sp, #4]
 80059b6:	2106      	movs	r1, #6
 80059b8:	f000 fb62 	bl	8006080 <acc_base_configuration_integrator_set>
 80059bc:	9801      	ldr	r0, [sp, #4]
 80059be:	2109      	movs	r1, #9
 80059c0:	f000 fb86 	bl	80060d0 <acc_base_configuration_integrator_ramp_up_set>
 80059c4:	4b04      	ldr	r3, [pc, #16]	; (80059d8 <set_configuration_for_profile+0x90>)
 80059c6:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
 80059ca:	b003      	add	sp, #12
 80059cc:	bd30      	pop	{r4, r5, pc}
 80059ce:	2109      	movs	r1, #9
 80059d0:	e7ed      	b.n	80059ae <set_configuration_for_profile+0x66>
 80059d2:	210c      	movs	r1, #12
 80059d4:	e7c9      	b.n	800596a <set_configuration_for_profile+0x22>
 80059d6:	bf00      	nop
 80059d8:	3b843809 	.word	0x3b843809
 80059dc:	3c8461fa 	.word	0x3c8461fa

080059e0 <acc_service_envelope_configuration_create>:
 80059e0:	b570      	push	{r4, r5, r6, lr}
 80059e2:	4a3e      	ldr	r2, [pc, #248]	; (8005adc <acc_service_envelope_configuration_create+0xfc>)
 80059e4:	b084      	sub	sp, #16
 80059e6:	236d      	movs	r3, #109	; 0x6d
 80059e8:	2188      	movs	r1, #136	; 0x88
 80059ea:	2001      	movs	r0, #1
 80059ec:	f000 fe30 	bl	8006650 <acc_rss_integration_mem_calloc_debug>
 80059f0:	4605      	mov	r5, r0
 80059f2:	2800      	cmp	r0, #0
 80059f4:	d06f      	beq.n	8005ad6 <acc_service_envelope_configuration_create+0xf6>
 80059f6:	493a      	ldr	r1, [pc, #232]	; (8005ae0 <acc_service_envelope_configuration_create+0x100>)
 80059f8:	f100 041c 	add.w	r4, r0, #28
 80059fc:	2602      	movs	r6, #2
 80059fe:	2358      	movs	r3, #88	; 0x58
 8005a00:	4622      	mov	r2, r4
 8005a02:	e9cd 3100 	strd	r3, r1, [sp]
 8005a06:	9602      	str	r6, [sp, #8]
 8005a08:	4b36      	ldr	r3, [pc, #216]	; (8005ae4 <acc_service_envelope_configuration_create+0x104>)
 8005a0a:	2100      	movs	r1, #0
 8005a0c:	f7ff fee0 	bl	80057d0 <acc_service_initialize_service_configuration>
 8005a10:	ed9f 0a35 	vldr	s0, [pc, #212]	; 8005ae8 <acc_service_envelope_configuration_create+0x108>
 8005a14:	4620      	mov	r0, r4
 8005a16:	f000 f9fd 	bl	8005e14 <acc_base_configuration_requested_start_set>
 8005a1a:	ed9f 0a34 	vldr	s0, [pc, #208]	; 8005aec <acc_service_envelope_configuration_create+0x10c>
 8005a1e:	4620      	mov	r0, r4
 8005a20:	f000 fa14 	bl	8005e4c <acc_base_configuration_requested_length_set>
 8005a24:	4620      	mov	r0, r4
 8005a26:	2106      	movs	r1, #6
 8005a28:	f000 fc64 	bl	80062f4 <acc_base_configuration_mur_set>
 8005a2c:	4620      	mov	r0, r4
 8005a2e:	210a      	movs	r1, #10
 8005a30:	f000 fa64 	bl	8005efc <acc_base_configuration_hw_accelerated_average_samples_set>
 8005a34:	2101      	movs	r1, #1
 8005a36:	4620      	mov	r0, r4
 8005a38:	f000 f9d6 	bl	8005de8 <acc_base_configuration_sensor_set>
 8005a3c:	4620      	mov	r0, r4
 8005a3e:	f000 fa13 	bl	8005e68 <acc_base_configuration_repetition_mode_on_demand_set>
 8005a42:	4631      	mov	r1, r6
 8005a44:	4620      	mov	r0, r4
 8005a46:	f000 fa1f 	bl	8005e88 <acc_base_configuration_power_save_mode_set>
 8005a4a:	4620      	mov	r0, r4
 8005a4c:	2100      	movs	r1, #0
 8005a4e:	f000 fb67 	bl	8006120 <acc_base_configuration_use_point_range_set>
 8005a52:	4620      	mov	r0, r4
 8005a54:	2100      	movs	r1, #0
 8005a56:	f000 fb4f 	bl	80060f8 <acc_base_configuration_sweep_type_debug_set>
 8005a5a:	4620      	mov	r0, r4
 8005a5c:	2100      	movs	r1, #0
 8005a5e:	f000 fa25 	bl	8005eac <acc_base_configuration_tx_disable_set>
 8005a62:	4620      	mov	r0, r4
 8005a64:	2100      	movs	r1, #0
 8005a66:	f000 fa35 	bl	8005ed4 <acc_base_configuration_decrease_tx_emission_set>
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	4611      	mov	r1, r2
 8005a6e:	2340      	movs	r3, #64	; 0x40
 8005a70:	4620      	mov	r0, r4
 8005a72:	f000 fc2f 	bl	80062d4 <acc_base_configuration_cca_set>
 8005a76:	4620      	mov	r0, r4
 8005a78:	21ff      	movs	r1, #255	; 0xff
 8005a7a:	f000 fb6f 	bl	800615c <acc_base_configuration_staggered_vga_stabilization_time_set>
 8005a7e:	4620      	mov	r0, r4
 8005a80:	2100      	movs	r1, #0
 8005a82:	f000 fb61 	bl	8006148 <acc_base_configuration_use_fast_dll_refresh_routine_set>
 8005a86:	4620      	mov	r0, r4
 8005a88:	2101      	movs	r1, #1
 8005a8a:	f000 fbad 	bl	80061e8 <acc_base_configuration_downsampling_factor_set>
 8005a8e:	4620      	mov	r0, r4
 8005a90:	210b      	movs	r1, #11
 8005a92:	f000 fae3 	bl	800605c <acc_base_configuration_gain_set>
 8005a96:	2101      	movs	r1, #1
 8005a98:	4620      	mov	r0, r4
 8005a9a:	f000 fbb9 	bl	8006210 <acc_base_configuration_noise_level_normalization_set>
 8005a9e:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8005af0 <acc_service_envelope_configuration_create+0x110>
 8005aa2:	4620      	mov	r0, r4
 8005aa4:	f000 fa48 	bl	8005f38 <acc_base_configuration_phase_compensation_alpha_set>
 8005aa8:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8005af4 <acc_service_envelope_configuration_create+0x114>
 8005aac:	4620      	mov	r0, r4
 8005aae:	2101      	movs	r1, #1
 8005ab0:	f000 fa5c 	bl	8005f6c <acc_base_configuration_time_domain_low_pass_filter_alpha_set>
 8005ab4:	4620      	mov	r0, r4
 8005ab6:	2101      	movs	r1, #1
 8005ab8:	f000 fa70 	bl	8005f9c <acc_base_configuration_filter_demodulated_data_set>
 8005abc:	4620      	mov	r0, r4
 8005abe:	2101      	movs	r1, #1
 8005ac0:	f000 fbc4 	bl	800624c <acc_base_configuration_asynchronous_measurement_set>
 8005ac4:	4620      	mov	r0, r4
 8005ac6:	f44f 5196 	mov.w	r1, #4800	; 0x12c0
 8005aca:	f000 fbd3 	bl	8006274 <acc_base_configuration_min_pipeline_memory_size_set>
 8005ace:	490a      	ldr	r1, [pc, #40]	; (8005af8 <acc_service_envelope_configuration_create+0x118>)
 8005ad0:	4620      	mov	r0, r4
 8005ad2:	f000 fa1b 	bl	8005f0c <acc_base_configuration_radar_engine_creation_set>
 8005ad6:	4628      	mov	r0, r5
 8005ad8:	b004      	add	sp, #16
 8005ada:	bd70      	pop	{r4, r5, r6, pc}
 8005adc:	080131ac 	.word	0x080131ac
 8005ae0:	08005949 	.word	0x08005949
 8005ae4:	08005839 	.word	0x08005839
 8005ae8:	3e4ccccd 	.word	0x3e4ccccd
 8005aec:	3ecccccd 	.word	0x3ecccccd
 8005af0:	3dcccccd 	.word	0x3dcccccd
 8005af4:	3e99999a 	.word	0x3e99999a
 8005af8:	080074ed 	.word	0x080074ed

08005afc <acc_service_envelope_configuration_destroy>:
 8005afc:	b130      	cbz	r0, 8005b0c <acc_service_envelope_configuration_destroy+0x10>
 8005afe:	b510      	push	{r4, lr}
 8005b00:	4604      	mov	r4, r0
 8005b02:	6800      	ldr	r0, [r0, #0]
 8005b04:	f7ff fdf4 	bl	80056f0 <acc_service_configuration_valid>
 8005b08:	b908      	cbnz	r0, 8005b0e <acc_service_envelope_configuration_destroy+0x12>
 8005b0a:	bd10      	pop	{r4, pc}
 8005b0c:	4770      	bx	lr
 8005b0e:	6820      	ldr	r0, [r4, #0]
 8005b10:	f7ff ff00 	bl	8005914 <get_and_validate_envelope_configuration>
 8005b14:	f000 fdba 	bl	800668c <acc_rss_integration_mem_free>
 8005b18:	2300      	movs	r3, #0
 8005b1a:	6023      	str	r3, [r4, #0]
 8005b1c:	bd10      	pop	{r4, pc}
 8005b1e:	bf00      	nop

08005b20 <acc_service_envelope_get_metadata>:
 8005b20:	b1e0      	cbz	r0, 8005b5c <acc_service_envelope_get_metadata+0x3c>
 8005b22:	7a03      	ldrb	r3, [r0, #8]
 8005b24:	b9d3      	cbnz	r3, 8005b5c <acc_service_envelope_get_metadata+0x3c>
 8005b26:	b1c9      	cbz	r1, 8005b5c <acc_service_envelope_get_metadata+0x3c>
 8005b28:	6903      	ldr	r3, [r0, #16]
 8005b2a:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8005b60 <acc_service_envelope_get_metadata+0x40>
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	edd3 7a08 	vldr	s15, [r3, #32]
 8005b34:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005b36:	8d58      	ldrh	r0, [r3, #42]	; 0x2a
 8005b38:	b430      	push	{r4, r5}
 8005b3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b3e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005b42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b46:	695d      	ldr	r5, [r3, #20]
 8005b48:	699c      	ldr	r4, [r3, #24]
 8005b4a:	604c      	str	r4, [r1, #4]
 8005b4c:	1e53      	subs	r3, r2, #1
 8005b4e:	600d      	str	r5, [r1, #0]
 8005b50:	edc1 7a03 	vstr	s15, [r1, #12]
 8005b54:	bc30      	pop	{r4, r5}
 8005b56:	814b      	strh	r3, [r1, #10]
 8005b58:	8108      	strh	r0, [r1, #8]
 8005b5a:	4770      	bx	lr
 8005b5c:	4770      	bx	lr
 8005b5e:	bf00      	nop
 8005b60:	4d8ef3c2 	.word	0x4d8ef3c2

08005b64 <acc_service_envelope_get_next>:
 8005b64:	b530      	push	{r4, r5, lr}
 8005b66:	b08b      	sub	sp, #44	; 0x2c
 8005b68:	0052      	lsls	r2, r2, #1
 8005b6a:	9101      	str	r1, [sp, #4]
 8005b6c:	2400      	movs	r4, #0
 8005b6e:	9206      	str	r2, [sp, #24]
 8005b70:	9307      	str	r3, [sp, #28]
 8005b72:	2204      	movs	r2, #4
 8005b74:	2301      	movs	r3, #1
 8005b76:	9104      	str	r1, [sp, #16]
 8005b78:	ad01      	add	r5, sp, #4
 8005b7a:	a903      	add	r1, sp, #12
 8005b7c:	f88d 400c 	strb.w	r4, [sp, #12]
 8005b80:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
 8005b84:	9505      	str	r5, [sp, #20]
 8005b86:	9208      	str	r2, [sp, #32]
 8005b88:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
 8005b8c:	f7ff fd44 	bl	8005618 <acc_service_get_next>
 8005b90:	b00b      	add	sp, #44	; 0x2c
 8005b92:	bd30      	pop	{r4, r5, pc}

08005b94 <destroy_handle>:
 8005b94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b98:	4e15      	ldr	r6, [pc, #84]	; (8005bf0 <destroy_handle+0x5c>)
 8005b9a:	4605      	mov	r5, r0
 8005b9c:	6874      	ldr	r4, [r6, #4]
 8005b9e:	f000 fd87 	bl	80066b0 <acc_rss_integration_log_level>
 8005ba2:	2803      	cmp	r0, #3
 8005ba4:	d906      	bls.n	8005bb4 <destroy_handle+0x20>
 8005ba6:	4a13      	ldr	r2, [pc, #76]	; (8005bf4 <destroy_handle+0x60>)
 8005ba8:	686b      	ldr	r3, [r5, #4]
 8005baa:	6b57      	ldr	r7, [r2, #52]	; 0x34
 8005bac:	4912      	ldr	r1, [pc, #72]	; (8005bf8 <destroy_handle+0x64>)
 8005bae:	4a13      	ldr	r2, [pc, #76]	; (8005bfc <destroy_handle+0x68>)
 8005bb0:	2004      	movs	r0, #4
 8005bb2:	47b8      	blx	r7
 8005bb4:	b144      	cbz	r4, 8005bc8 <destroy_handle+0x34>
 8005bb6:	42ac      	cmp	r4, r5
 8005bb8:	d102      	bne.n	8005bc0 <destroy_handle+0x2c>
 8005bba:	e016      	b.n	8005bea <destroy_handle+0x56>
 8005bbc:	42a5      	cmp	r5, r4
 8005bbe:	d00d      	beq.n	8005bdc <destroy_handle+0x48>
 8005bc0:	4623      	mov	r3, r4
 8005bc2:	6d64      	ldr	r4, [r4, #84]	; 0x54
 8005bc4:	2c00      	cmp	r4, #0
 8005bc6:	d1f9      	bne.n	8005bbc <destroy_handle+0x28>
 8005bc8:	4a0a      	ldr	r2, [pc, #40]	; (8005bf4 <destroy_handle+0x60>)
 8005bca:	686b      	ldr	r3, [r5, #4]
 8005bcc:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8005bce:	490a      	ldr	r1, [pc, #40]	; (8005bf8 <destroy_handle+0x64>)
 8005bd0:	4a0b      	ldr	r2, [pc, #44]	; (8005c00 <destroy_handle+0x6c>)
 8005bd2:	46a4      	mov	ip, r4
 8005bd4:	2000      	movs	r0, #0
 8005bd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005bda:	4760      	bx	ip
 8005bdc:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 8005bde:	655a      	str	r2, [r3, #84]	; 0x54
 8005be0:	4628      	mov	r0, r5
 8005be2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005be6:	f000 bd51 	b.w	800668c <acc_rss_integration_mem_free>
 8005bea:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8005bec:	6073      	str	r3, [r6, #4]
 8005bee:	e7f7      	b.n	8005be0 <destroy_handle+0x4c>
 8005bf0:	200004d4 	.word	0x200004d4
 8005bf4:	20000640 	.word	0x20000640
 8005bf8:	0801324c 	.word	0x0801324c
 8005bfc:	08013228 	.word	0x08013228
 8005c00:	0801325c 	.word	0x0801325c

08005c04 <acc_service_manager_activate>:
 8005c04:	b510      	push	{r4, lr}
 8005c06:	4c05      	ldr	r4, [pc, #20]	; (8005c1c <acc_service_manager_activate+0x18>)
 8005c08:	7820      	ldrb	r0, [r4, #0]
 8005c0a:	b100      	cbz	r0, 8005c0e <acc_service_manager_activate+0xa>
 8005c0c:	bd10      	pop	{r4, pc}
 8005c0e:	2001      	movs	r0, #1
 8005c10:	7020      	strb	r0, [r4, #0]
 8005c12:	f7ff fc63 	bl	80054dc <acc_service_set_module_active>
 8005c16:	7820      	ldrb	r0, [r4, #0]
 8005c18:	bd10      	pop	{r4, pc}
 8005c1a:	bf00      	nop
 8005c1c:	200004d4 	.word	0x200004d4

08005c20 <acc_service_create>:
 8005c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c24:	4e30      	ldr	r6, [pc, #192]	; (8005ce8 <acc_service_create+0xc8>)
 8005c26:	7834      	ldrb	r4, [r6, #0]
 8005c28:	2c00      	cmp	r4, #0
 8005c2a:	d041      	beq.n	8005cb0 <acc_service_create+0x90>
 8005c2c:	4605      	mov	r5, r0
 8005c2e:	f7ff fd5f 	bl	80056f0 <acc_service_configuration_valid>
 8005c32:	b1a0      	cbz	r0, 8005c5e <acc_service_create+0x3e>
 8005c34:	692b      	ldr	r3, [r5, #16]
 8005c36:	68df      	ldr	r7, [r3, #12]
 8005c38:	1e7b      	subs	r3, r7, #1
 8005c3a:	2b29      	cmp	r3, #41	; 0x29
 8005c3c:	d84a      	bhi.n	8005cd4 <acc_service_create+0xb4>
 8005c3e:	7873      	ldrb	r3, [r6, #1]
 8005c40:	b98b      	cbnz	r3, 8005c66 <acc_service_create+0x46>
 8005c42:	6873      	ldr	r3, [r6, #4]
 8005c44:	b913      	cbnz	r3, 8005c4c <acc_service_create+0x2c>
 8005c46:	e00e      	b.n	8005c66 <acc_service_create+0x46>
 8005c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c4a:	b163      	cbz	r3, 8005c66 <acc_service_create+0x46>
 8005c4c:	685a      	ldr	r2, [r3, #4]
 8005c4e:	4297      	cmp	r7, r2
 8005c50:	d1fa      	bne.n	8005c48 <acc_service_create+0x28>
 8005c52:	4b26      	ldr	r3, [pc, #152]	; (8005cec <acc_service_create+0xcc>)
 8005c54:	4a26      	ldr	r2, [pc, #152]	; (8005cf0 <acc_service_create+0xd0>)
 8005c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c58:	4926      	ldr	r1, [pc, #152]	; (8005cf4 <acc_service_create+0xd4>)
 8005c5a:	2000      	movs	r0, #0
 8005c5c:	4798      	blx	r3
 8005c5e:	2400      	movs	r4, #0
 8005c60:	4620      	mov	r0, r4
 8005c62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c66:	8b2c      	ldrh	r4, [r5, #24]
 8005c68:	f000 fd22 	bl	80066b0 <acc_rss_integration_log_level>
 8005c6c:	2803      	cmp	r0, #3
 8005c6e:	d907      	bls.n	8005c80 <acc_service_create+0x60>
 8005c70:	4b1e      	ldr	r3, [pc, #120]	; (8005cec <acc_service_create+0xcc>)
 8005c72:	4a21      	ldr	r2, [pc, #132]	; (8005cf8 <acc_service_create+0xd8>)
 8005c74:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 8005c78:	491e      	ldr	r1, [pc, #120]	; (8005cf4 <acc_service_create+0xd4>)
 8005c7a:	463b      	mov	r3, r7
 8005c7c:	2004      	movs	r0, #4
 8005c7e:	47c0      	blx	r8
 8005c80:	4621      	mov	r1, r4
 8005c82:	4a1c      	ldr	r2, [pc, #112]	; (8005cf4 <acc_service_create+0xd4>)
 8005c84:	23bd      	movs	r3, #189	; 0xbd
 8005c86:	2001      	movs	r0, #1
 8005c88:	f000 fce2 	bl	8006650 <acc_rss_integration_mem_calloc_debug>
 8005c8c:	4604      	mov	r4, r0
 8005c8e:	2800      	cmp	r0, #0
 8005c90:	d0e5      	beq.n	8005c5e <acc_service_create+0x3e>
 8005c92:	6873      	ldr	r3, [r6, #4]
 8005c94:	4a19      	ldr	r2, [pc, #100]	; (8005cfc <acc_service_create+0xdc>)
 8005c96:	6047      	str	r7, [r0, #4]
 8005c98:	6002      	str	r2, [r0, #0]
 8005c9a:	6543      	str	r3, [r0, #84]	; 0x54
 8005c9c:	6070      	str	r0, [r6, #4]
 8005c9e:	696b      	ldr	r3, [r5, #20]
 8005ca0:	4629      	mov	r1, r5
 8005ca2:	4798      	blx	r3
 8005ca4:	b168      	cbz	r0, 8005cc2 <acc_service_create+0xa2>
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	7263      	strb	r3, [r4, #9]
 8005caa:	4620      	mov	r0, r4
 8005cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cb0:	4b0e      	ldr	r3, [pc, #56]	; (8005cec <acc_service_create+0xcc>)
 8005cb2:	4a13      	ldr	r2, [pc, #76]	; (8005d00 <acc_service_create+0xe0>)
 8005cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cb6:	490f      	ldr	r1, [pc, #60]	; (8005cf4 <acc_service_create+0xd4>)
 8005cb8:	4620      	mov	r0, r4
 8005cba:	4798      	blx	r3
 8005cbc:	4620      	mov	r0, r4
 8005cbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cc2:	68e3      	ldr	r3, [r4, #12]
 8005cc4:	b10b      	cbz	r3, 8005cca <acc_service_create+0xaa>
 8005cc6:	4620      	mov	r0, r4
 8005cc8:	4798      	blx	r3
 8005cca:	4620      	mov	r0, r4
 8005ccc:	f7ff ff62 	bl	8005b94 <destroy_handle>
 8005cd0:	2400      	movs	r4, #0
 8005cd2:	e7c5      	b.n	8005c60 <acc_service_create+0x40>
 8005cd4:	4b05      	ldr	r3, [pc, #20]	; (8005cec <acc_service_create+0xcc>)
 8005cd6:	4a0b      	ldr	r2, [pc, #44]	; (8005d04 <acc_service_create+0xe4>)
 8005cd8:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8005cda:	4906      	ldr	r1, [pc, #24]	; (8005cf4 <acc_service_create+0xd4>)
 8005cdc:	232a      	movs	r3, #42	; 0x2a
 8005cde:	2000      	movs	r0, #0
 8005ce0:	47a0      	blx	r4
 8005ce2:	2400      	movs	r4, #0
 8005ce4:	e7bc      	b.n	8005c60 <acc_service_create+0x40>
 8005ce6:	bf00      	nop
 8005ce8:	200004d4 	.word	0x200004d4
 8005cec:	20000640 	.word	0x20000640
 8005cf0:	080132f0 	.word	0x080132f0
 8005cf4:	0801324c 	.word	0x0801324c
 8005cf8:	080132bc 	.word	0x080132bc
 8005cfc:	acc09ee8 	.word	0xacc09ee8
 8005d00:	080132dc 	.word	0x080132dc
 8005d04:	08013290 	.word	0x08013290

08005d08 <acc_service_destroy>:
 8005d08:	4b11      	ldr	r3, [pc, #68]	; (8005d50 <acc_service_destroy+0x48>)
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	b510      	push	{r4, lr}
 8005d0e:	b133      	cbz	r3, 8005d1e <acc_service_destroy+0x16>
 8005d10:	4604      	mov	r4, r0
 8005d12:	b118      	cbz	r0, 8005d1c <acc_service_destroy+0x14>
 8005d14:	6800      	ldr	r0, [r0, #0]
 8005d16:	f7ff fbe7 	bl	80054e8 <acc_service_handle_valid>
 8005d1a:	b960      	cbnz	r0, 8005d36 <acc_service_destroy+0x2e>
 8005d1c:	bd10      	pop	{r4, pc}
 8005d1e:	f000 fcc7 	bl	80066b0 <acc_rss_integration_log_level>
 8005d22:	2800      	cmp	r0, #0
 8005d24:	d0fa      	beq.n	8005d1c <acc_service_destroy+0x14>
 8005d26:	4b0b      	ldr	r3, [pc, #44]	; (8005d54 <acc_service_destroy+0x4c>)
 8005d28:	4a0b      	ldr	r2, [pc, #44]	; (8005d58 <acc_service_destroy+0x50>)
 8005d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d2c:	490b      	ldr	r1, [pc, #44]	; (8005d5c <acc_service_destroy+0x54>)
 8005d2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d32:	2001      	movs	r0, #1
 8005d34:	4718      	bx	r3
 8005d36:	6820      	ldr	r0, [r4, #0]
 8005d38:	f7ff fc30 	bl	800559c <acc_service_deactivate>
 8005d3c:	6820      	ldr	r0, [r4, #0]
 8005d3e:	68c3      	ldr	r3, [r0, #12]
 8005d40:	b10b      	cbz	r3, 8005d46 <acc_service_destroy+0x3e>
 8005d42:	4798      	blx	r3
 8005d44:	6820      	ldr	r0, [r4, #0]
 8005d46:	f7ff ff25 	bl	8005b94 <destroy_handle>
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	6023      	str	r3, [r4, #0]
 8005d4e:	bd10      	pop	{r4, pc}
 8005d50:	200004d4 	.word	0x200004d4
 8005d54:	20000640 	.word	0x20000640
 8005d58:	080132dc 	.word	0x080132dc
 8005d5c:	0801324c 	.word	0x0801324c

08005d60 <acc_service_manager_deactivate>:
 8005d60:	b538      	push	{r3, r4, r5, lr}
 8005d62:	4c0e      	ldr	r4, [pc, #56]	; (8005d9c <acc_service_manager_deactivate+0x3c>)
 8005d64:	7823      	ldrb	r3, [r4, #0]
 8005d66:	b1bb      	cbz	r3, 8005d98 <acc_service_manager_deactivate+0x38>
 8005d68:	6863      	ldr	r3, [r4, #4]
 8005d6a:	b17b      	cbz	r3, 8005d8c <acc_service_manager_deactivate+0x2c>
 8005d6c:	1d25      	adds	r5, r4, #4
 8005d6e:	4628      	mov	r0, r5
 8005d70:	f7ff ffca 	bl	8005d08 <acc_service_destroy>
 8005d74:	6863      	ldr	r3, [r4, #4]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d1f9      	bne.n	8005d6e <acc_service_manager_deactivate+0xe>
 8005d7a:	f000 fc99 	bl	80066b0 <acc_rss_integration_log_level>
 8005d7e:	b128      	cbz	r0, 8005d8c <acc_service_manager_deactivate+0x2c>
 8005d80:	4b07      	ldr	r3, [pc, #28]	; (8005da0 <acc_service_manager_deactivate+0x40>)
 8005d82:	4a08      	ldr	r2, [pc, #32]	; (8005da4 <acc_service_manager_deactivate+0x44>)
 8005d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d86:	4908      	ldr	r1, [pc, #32]	; (8005da8 <acc_service_manager_deactivate+0x48>)
 8005d88:	2001      	movs	r0, #1
 8005d8a:	4798      	blx	r3
 8005d8c:	2000      	movs	r0, #0
 8005d8e:	7020      	strb	r0, [r4, #0]
 8005d90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d94:	f7ff bba2 	b.w	80054dc <acc_service_set_module_active>
 8005d98:	bd38      	pop	{r3, r4, r5, pc}
 8005d9a:	bf00      	nop
 8005d9c:	200004d4 	.word	0x200004d4
 8005da0:	20000640 	.word	0x20000640
 8005da4:	08013318 	.word	0x08013318
 8005da8:	0801324c 	.word	0x0801324c

08005dac <configuration_is_valid>:
 8005dac:	b108      	cbz	r0, 8005db2 <configuration_is_valid+0x6>
 8005dae:	2001      	movs	r0, #1
 8005db0:	4770      	bx	lr
 8005db2:	b510      	push	{r4, lr}
 8005db4:	4604      	mov	r4, r0
 8005db6:	f000 fc7b 	bl	80066b0 <acc_rss_integration_log_level>
 8005dba:	b130      	cbz	r0, 8005dca <configuration_is_valid+0x1e>
 8005dbc:	4b03      	ldr	r3, [pc, #12]	; (8005dcc <configuration_is_valid+0x20>)
 8005dbe:	4a04      	ldr	r2, [pc, #16]	; (8005dd0 <configuration_is_valid+0x24>)
 8005dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dc2:	4904      	ldr	r1, [pc, #16]	; (8005dd4 <configuration_is_valid+0x28>)
 8005dc4:	2001      	movs	r0, #1
 8005dc6:	4798      	blx	r3
 8005dc8:	4620      	mov	r0, r4
 8005dca:	bd10      	pop	{r4, pc}
 8005dcc:	20000640 	.word	0x20000640
 8005dd0:	08013364 	.word	0x08013364
 8005dd4:	08013380 	.word	0x08013380

08005dd8 <acc_base_configuration_sensor_get>:
 8005dd8:	b510      	push	{r4, lr}
 8005dda:	4604      	mov	r4, r0
 8005ddc:	f7ff ffe6 	bl	8005dac <configuration_is_valid>
 8005de0:	b900      	cbnz	r0, 8005de4 <acc_base_configuration_sensor_get+0xc>
 8005de2:	bd10      	pop	{r4, pc}
 8005de4:	68e0      	ldr	r0, [r4, #12]
 8005de6:	bd10      	pop	{r4, pc}

08005de8 <acc_base_configuration_sensor_set>:
 8005de8:	b538      	push	{r3, r4, r5, lr}
 8005dea:	460d      	mov	r5, r1
 8005dec:	4604      	mov	r4, r0
 8005dee:	f7ff ffdd 	bl	8005dac <configuration_is_valid>
 8005df2:	b100      	cbz	r0, 8005df6 <acc_base_configuration_sensor_set+0xe>
 8005df4:	60e5      	str	r5, [r4, #12]
 8005df6:	bd38      	pop	{r3, r4, r5, pc}

08005df8 <acc_base_configuration_requested_start_get>:
 8005df8:	b510      	push	{r4, lr}
 8005dfa:	4604      	mov	r4, r0
 8005dfc:	f7ff ffd6 	bl	8005dac <configuration_is_valid>
 8005e00:	b910      	cbnz	r0, 8005e08 <acc_base_configuration_requested_start_get+0x10>
 8005e02:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8005e10 <acc_base_configuration_requested_start_get+0x18>
 8005e06:	bd10      	pop	{r4, pc}
 8005e08:	ed94 0a09 	vldr	s0, [r4, #36]	; 0x24
 8005e0c:	bd10      	pop	{r4, pc}
 8005e0e:	bf00      	nop
 8005e10:	00000000 	.word	0x00000000

08005e14 <acc_base_configuration_requested_start_set>:
 8005e14:	b510      	push	{r4, lr}
 8005e16:	ed2d 8b02 	vpush	{d8}
 8005e1a:	4604      	mov	r4, r0
 8005e1c:	eeb0 8a40 	vmov.f32	s16, s0
 8005e20:	f7ff ffc4 	bl	8005dac <configuration_is_valid>
 8005e24:	b108      	cbz	r0, 8005e2a <acc_base_configuration_requested_start_set+0x16>
 8005e26:	ed84 8a09 	vstr	s16, [r4, #36]	; 0x24
 8005e2a:	ecbd 8b02 	vpop	{d8}
 8005e2e:	bd10      	pop	{r4, pc}

08005e30 <acc_base_configuration_requested_length_get>:
 8005e30:	b510      	push	{r4, lr}
 8005e32:	4604      	mov	r4, r0
 8005e34:	f7ff ffba 	bl	8005dac <configuration_is_valid>
 8005e38:	b910      	cbnz	r0, 8005e40 <acc_base_configuration_requested_length_get+0x10>
 8005e3a:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8005e48 <acc_base_configuration_requested_length_get+0x18>
 8005e3e:	bd10      	pop	{r4, pc}
 8005e40:	ed94 0a0a 	vldr	s0, [r4, #40]	; 0x28
 8005e44:	bd10      	pop	{r4, pc}
 8005e46:	bf00      	nop
 8005e48:	00000000 	.word	0x00000000

08005e4c <acc_base_configuration_requested_length_set>:
 8005e4c:	b510      	push	{r4, lr}
 8005e4e:	ed2d 8b02 	vpush	{d8}
 8005e52:	4604      	mov	r4, r0
 8005e54:	eeb0 8a40 	vmov.f32	s16, s0
 8005e58:	f7ff ffa8 	bl	8005dac <configuration_is_valid>
 8005e5c:	b108      	cbz	r0, 8005e62 <acc_base_configuration_requested_length_set+0x16>
 8005e5e:	ed84 8a0a 	vstr	s16, [r4, #40]	; 0x28
 8005e62:	ecbd 8b02 	vpop	{d8}
 8005e66:	bd10      	pop	{r4, pc}

08005e68 <acc_base_configuration_repetition_mode_on_demand_set>:
 8005e68:	b510      	push	{r4, lr}
 8005e6a:	4604      	mov	r4, r0
 8005e6c:	f7ff ff9e 	bl	8005dac <configuration_is_valid>
 8005e70:	b108      	cbz	r0, 8005e76 <acc_base_configuration_repetition_mode_on_demand_set+0xe>
 8005e72:	2301      	movs	r3, #1
 8005e74:	7123      	strb	r3, [r4, #4]
 8005e76:	bd10      	pop	{r4, pc}

08005e78 <acc_base_configuration_power_save_mode_get>:
 8005e78:	b510      	push	{r4, lr}
 8005e7a:	4604      	mov	r4, r0
 8005e7c:	f7ff ff96 	bl	8005dac <configuration_is_valid>
 8005e80:	b900      	cbnz	r0, 8005e84 <acc_base_configuration_power_save_mode_get+0xc>
 8005e82:	bd10      	pop	{r4, pc}
 8005e84:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005e86:	bd10      	pop	{r4, pc}

08005e88 <acc_base_configuration_power_save_mode_set>:
 8005e88:	b538      	push	{r3, r4, r5, lr}
 8005e8a:	460d      	mov	r5, r1
 8005e8c:	4604      	mov	r4, r0
 8005e8e:	f7ff ff8d 	bl	8005dac <configuration_is_valid>
 8005e92:	b100      	cbz	r0, 8005e96 <acc_base_configuration_power_save_mode_set+0xe>
 8005e94:	63a5      	str	r5, [r4, #56]	; 0x38
 8005e96:	bd38      	pop	{r3, r4, r5, pc}

08005e98 <acc_base_configuration_tx_disable_get>:
 8005e98:	b510      	push	{r4, lr}
 8005e9a:	4604      	mov	r4, r0
 8005e9c:	f7ff ff86 	bl	8005dac <configuration_is_valid>
 8005ea0:	b900      	cbnz	r0, 8005ea4 <acc_base_configuration_tx_disable_get+0xc>
 8005ea2:	bd10      	pop	{r4, pc}
 8005ea4:	f894 0047 	ldrb.w	r0, [r4, #71]	; 0x47
 8005ea8:	bd10      	pop	{r4, pc}
 8005eaa:	bf00      	nop

08005eac <acc_base_configuration_tx_disable_set>:
 8005eac:	b538      	push	{r3, r4, r5, lr}
 8005eae:	460d      	mov	r5, r1
 8005eb0:	4604      	mov	r4, r0
 8005eb2:	f7ff ff7b 	bl	8005dac <configuration_is_valid>
 8005eb6:	b108      	cbz	r0, 8005ebc <acc_base_configuration_tx_disable_set+0x10>
 8005eb8:	f884 5047 	strb.w	r5, [r4, #71]	; 0x47
 8005ebc:	bd38      	pop	{r3, r4, r5, pc}
 8005ebe:	bf00      	nop

08005ec0 <acc_base_configuration_decrease_tx_emission_get>:
 8005ec0:	b510      	push	{r4, lr}
 8005ec2:	4604      	mov	r4, r0
 8005ec4:	f7ff ff72 	bl	8005dac <configuration_is_valid>
 8005ec8:	b900      	cbnz	r0, 8005ecc <acc_base_configuration_decrease_tx_emission_get+0xc>
 8005eca:	bd10      	pop	{r4, pc}
 8005ecc:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 8005ed0:	bd10      	pop	{r4, pc}
 8005ed2:	bf00      	nop

08005ed4 <acc_base_configuration_decrease_tx_emission_set>:
 8005ed4:	b538      	push	{r3, r4, r5, lr}
 8005ed6:	460d      	mov	r5, r1
 8005ed8:	4604      	mov	r4, r0
 8005eda:	f7ff ff67 	bl	8005dac <configuration_is_valid>
 8005ede:	b108      	cbz	r0, 8005ee4 <acc_base_configuration_decrease_tx_emission_set+0x10>
 8005ee0:	f884 5048 	strb.w	r5, [r4, #72]	; 0x48
 8005ee4:	bd38      	pop	{r3, r4, r5, pc}
 8005ee6:	bf00      	nop

08005ee8 <acc_base_configuration_hw_accelerated_average_samples_get>:
 8005ee8:	b510      	push	{r4, lr}
 8005eea:	4604      	mov	r4, r0
 8005eec:	f7ff ff5e 	bl	8005dac <configuration_is_valid>
 8005ef0:	b900      	cbnz	r0, 8005ef4 <acc_base_configuration_hw_accelerated_average_samples_get+0xc>
 8005ef2:	bd10      	pop	{r4, pc}
 8005ef4:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
 8005ef8:	bd10      	pop	{r4, pc}
 8005efa:	bf00      	nop

08005efc <acc_base_configuration_hw_accelerated_average_samples_set>:
 8005efc:	b538      	push	{r3, r4, r5, lr}
 8005efe:	460d      	mov	r5, r1
 8005f00:	4604      	mov	r4, r0
 8005f02:	f7ff ff53 	bl	8005dac <configuration_is_valid>
 8005f06:	b100      	cbz	r0, 8005f0a <acc_base_configuration_hw_accelerated_average_samples_set+0xe>
 8005f08:	87a5      	strh	r5, [r4, #60]	; 0x3c
 8005f0a:	bd38      	pop	{r3, r4, r5, pc}

08005f0c <acc_base_configuration_radar_engine_creation_set>:
 8005f0c:	b538      	push	{r3, r4, r5, lr}
 8005f0e:	460d      	mov	r5, r1
 8005f10:	4604      	mov	r4, r0
 8005f12:	f7ff ff4b 	bl	8005dac <configuration_is_valid>
 8005f16:	b100      	cbz	r0, 8005f1a <acc_base_configuration_radar_engine_creation_set+0xe>
 8005f18:	6025      	str	r5, [r4, #0]
 8005f1a:	bd38      	pop	{r3, r4, r5, pc}

08005f1c <acc_base_configuration_phase_compensation_alpha_get>:
 8005f1c:	b510      	push	{r4, lr}
 8005f1e:	4604      	mov	r4, r0
 8005f20:	f7ff ff44 	bl	8005dac <configuration_is_valid>
 8005f24:	b910      	cbnz	r0, 8005f2c <acc_base_configuration_phase_compensation_alpha_get+0x10>
 8005f26:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8005f34 <acc_base_configuration_phase_compensation_alpha_get+0x18>
 8005f2a:	bd10      	pop	{r4, pc}
 8005f2c:	ed94 0a04 	vldr	s0, [r4, #16]
 8005f30:	bd10      	pop	{r4, pc}
 8005f32:	bf00      	nop
 8005f34:	00000000 	.word	0x00000000

08005f38 <acc_base_configuration_phase_compensation_alpha_set>:
 8005f38:	b510      	push	{r4, lr}
 8005f3a:	ed2d 8b02 	vpush	{d8}
 8005f3e:	4604      	mov	r4, r0
 8005f40:	eeb0 8a40 	vmov.f32	s16, s0
 8005f44:	f7ff ff32 	bl	8005dac <configuration_is_valid>
 8005f48:	b108      	cbz	r0, 8005f4e <acc_base_configuration_phase_compensation_alpha_set+0x16>
 8005f4a:	ed84 8a04 	vstr	s16, [r4, #16]
 8005f4e:	ecbd 8b02 	vpop	{d8}
 8005f52:	bd10      	pop	{r4, pc}

08005f54 <acc_base_configuration_time_domain_low_pass_filter_alpha_get>:
 8005f54:	b538      	push	{r3, r4, r5, lr}
 8005f56:	460d      	mov	r5, r1
 8005f58:	4604      	mov	r4, r0
 8005f5a:	f7ff ff27 	bl	8005dac <configuration_is_valid>
 8005f5e:	b900      	cbnz	r0, 8005f62 <acc_base_configuration_time_domain_low_pass_filter_alpha_get+0xe>
 8005f60:	bd38      	pop	{r3, r4, r5, pc}
 8005f62:	b10d      	cbz	r5, 8005f68 <acc_base_configuration_time_domain_low_pass_filter_alpha_get+0x14>
 8005f64:	6963      	ldr	r3, [r4, #20]
 8005f66:	602b      	str	r3, [r5, #0]
 8005f68:	7e20      	ldrb	r0, [r4, #24]
 8005f6a:	bd38      	pop	{r3, r4, r5, pc}

08005f6c <acc_base_configuration_time_domain_low_pass_filter_alpha_set>:
 8005f6c:	b538      	push	{r3, r4, r5, lr}
 8005f6e:	ed2d 8b02 	vpush	{d8}
 8005f72:	460d      	mov	r5, r1
 8005f74:	eeb0 8a40 	vmov.f32	s16, s0
 8005f78:	4604      	mov	r4, r0
 8005f7a:	f7ff ff17 	bl	8005dac <configuration_is_valid>
 8005f7e:	b110      	cbz	r0, 8005f86 <acc_base_configuration_time_domain_low_pass_filter_alpha_set+0x1a>
 8005f80:	ed84 8a05 	vstr	s16, [r4, #20]
 8005f84:	7625      	strb	r5, [r4, #24]
 8005f86:	ecbd 8b02 	vpop	{d8}
 8005f8a:	bd38      	pop	{r3, r4, r5, pc}

08005f8c <acc_base_configuration_filter_demodulated_data_get>:
 8005f8c:	b510      	push	{r4, lr}
 8005f8e:	4604      	mov	r4, r0
 8005f90:	f7ff ff0c 	bl	8005dac <configuration_is_valid>
 8005f94:	b900      	cbnz	r0, 8005f98 <acc_base_configuration_filter_demodulated_data_get+0xc>
 8005f96:	bd10      	pop	{r4, pc}
 8005f98:	7f20      	ldrb	r0, [r4, #28]
 8005f9a:	bd10      	pop	{r4, pc}

08005f9c <acc_base_configuration_filter_demodulated_data_set>:
 8005f9c:	b538      	push	{r3, r4, r5, lr}
 8005f9e:	460d      	mov	r5, r1
 8005fa0:	4604      	mov	r4, r0
 8005fa2:	f7ff ff03 	bl	8005dac <configuration_is_valid>
 8005fa6:	b100      	cbz	r0, 8005faa <acc_base_configuration_filter_demodulated_data_set+0xe>
 8005fa8:	7725      	strb	r5, [r4, #28]
 8005faa:	bd38      	pop	{r3, r4, r5, pc}

08005fac <acc_base_configuration_demodulation_filter_cutoff_freq_ratio_get>:
 8005fac:	b510      	push	{r4, lr}
 8005fae:	4604      	mov	r4, r0
 8005fb0:	f7ff fefc 	bl	8005dac <configuration_is_valid>
 8005fb4:	b910      	cbnz	r0, 8005fbc <acc_base_configuration_demodulation_filter_cutoff_freq_ratio_get+0x10>
 8005fb6:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8005fc4 <acc_base_configuration_demodulation_filter_cutoff_freq_ratio_get+0x18>
 8005fba:	bd10      	pop	{r4, pc}
 8005fbc:	ed94 0a08 	vldr	s0, [r4, #32]
 8005fc0:	bd10      	pop	{r4, pc}
 8005fc2:	bf00      	nop
 8005fc4:	00000000 	.word	0x00000000

08005fc8 <acc_base_configuration_demodulation_filter_cutoff_freq_ratio_set>:
 8005fc8:	b510      	push	{r4, lr}
 8005fca:	ed2d 8b02 	vpush	{d8}
 8005fce:	4604      	mov	r4, r0
 8005fd0:	eeb0 8a40 	vmov.f32	s16, s0
 8005fd4:	f7ff feea 	bl	8005dac <configuration_is_valid>
 8005fd8:	b108      	cbz	r0, 8005fde <acc_base_configuration_demodulation_filter_cutoff_freq_ratio_set+0x16>
 8005fda:	ed84 8a08 	vstr	s16, [r4, #32]
 8005fde:	ecbd 8b02 	vpop	{d8}
 8005fe2:	bd10      	pop	{r4, pc}

08005fe4 <acc_base_configuration_point_start_get>:
 8005fe4:	b510      	push	{r4, lr}
 8005fe6:	4604      	mov	r4, r0
 8005fe8:	f7ff fee0 	bl	8005dac <configuration_is_valid>
 8005fec:	b900      	cbnz	r0, 8005ff0 <acc_base_configuration_point_start_get+0xc>
 8005fee:	bd10      	pop	{r4, pc}
 8005ff0:	f9b4 0034 	ldrsh.w	r0, [r4, #52]	; 0x34
 8005ff4:	bd10      	pop	{r4, pc}
 8005ff6:	bf00      	nop

08005ff8 <acc_base_configuration_point_length_get>:
 8005ff8:	b510      	push	{r4, lr}
 8005ffa:	4604      	mov	r4, r0
 8005ffc:	f7ff fed6 	bl	8005dac <configuration_is_valid>
 8006000:	b900      	cbnz	r0, 8006004 <acc_base_configuration_point_length_get+0xc>
 8006002:	bd10      	pop	{r4, pc}
 8006004:	f9b4 0036 	ldrsh.w	r0, [r4, #54]	; 0x36
 8006008:	bd10      	pop	{r4, pc}
 800600a:	bf00      	nop

0800600c <acc_base_configuration_repetition_mode_get>:
 800600c:	b510      	push	{r4, lr}
 800600e:	4604      	mov	r4, r0
 8006010:	f7ff fecc 	bl	8005dac <configuration_is_valid>
 8006014:	b900      	cbnz	r0, 8006018 <acc_base_configuration_repetition_mode_get+0xc>
 8006016:	bd10      	pop	{r4, pc}
 8006018:	7920      	ldrb	r0, [r4, #4]
 800601a:	bd10      	pop	{r4, pc}

0800601c <acc_base_configuration_update_rate_get>:
 800601c:	b510      	push	{r4, lr}
 800601e:	4604      	mov	r4, r0
 8006020:	f7ff fec4 	bl	8005dac <configuration_is_valid>
 8006024:	b158      	cbz	r0, 800603e <acc_base_configuration_update_rate_get+0x22>
 8006026:	7923      	ldrb	r3, [r4, #4]
 8006028:	2b02      	cmp	r3, #2
 800602a:	d005      	beq.n	8006038 <acc_base_configuration_update_rate_get+0x1c>
 800602c:	d802      	bhi.n	8006034 <acc_base_configuration_update_rate_get+0x18>
 800602e:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8006044 <acc_base_configuration_update_rate_get+0x28>
 8006032:	bd10      	pop	{r4, pc}
 8006034:	2b03      	cmp	r3, #3
 8006036:	d102      	bne.n	800603e <acc_base_configuration_update_rate_get+0x22>
 8006038:	ed94 0a02 	vldr	s0, [r4, #8]
 800603c:	bd10      	pop	{r4, pc}
 800603e:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8006048 <acc_base_configuration_update_rate_get+0x2c>
 8006042:	bd10      	pop	{r4, pc}
 8006044:	7f800000 	.word	0x7f800000
 8006048:	7fc00000 	.word	0x7fc00000

0800604c <acc_base_configuration_gain_get>:
 800604c:	b510      	push	{r4, lr}
 800604e:	4604      	mov	r4, r0
 8006050:	f7ff feac 	bl	8005dac <configuration_is_valid>
 8006054:	b900      	cbnz	r0, 8006058 <acc_base_configuration_gain_get+0xc>
 8006056:	bd10      	pop	{r4, pc}
 8006058:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
 800605a:	bd10      	pop	{r4, pc}

0800605c <acc_base_configuration_gain_set>:
 800605c:	b538      	push	{r3, r4, r5, lr}
 800605e:	460d      	mov	r5, r1
 8006060:	4604      	mov	r4, r0
 8006062:	f7ff fea3 	bl	8005dac <configuration_is_valid>
 8006066:	b100      	cbz	r0, 800606a <acc_base_configuration_gain_set+0xe>
 8006068:	87e5      	strh	r5, [r4, #62]	; 0x3e
 800606a:	bd38      	pop	{r3, r4, r5, pc}

0800606c <acc_base_configuration_integrator_get>:
 800606c:	b510      	push	{r4, lr}
 800606e:	4604      	mov	r4, r0
 8006070:	f7ff fe9c 	bl	8005dac <configuration_is_valid>
 8006074:	b900      	cbnz	r0, 8006078 <acc_base_configuration_integrator_get+0xc>
 8006076:	bd10      	pop	{r4, pc}
 8006078:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
 800607c:	bd10      	pop	{r4, pc}
 800607e:	bf00      	nop

08006080 <acc_base_configuration_integrator_set>:
 8006080:	b538      	push	{r3, r4, r5, lr}
 8006082:	460d      	mov	r5, r1
 8006084:	4604      	mov	r4, r0
 8006086:	f7ff fe91 	bl	8005dac <configuration_is_valid>
 800608a:	b108      	cbz	r0, 8006090 <acc_base_configuration_integrator_set+0x10>
 800608c:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
 8006090:	bd38      	pop	{r3, r4, r5, pc}
 8006092:	bf00      	nop

08006094 <acc_base_configuration_wg_duration_get>:
 8006094:	b510      	push	{r4, lr}
 8006096:	4604      	mov	r4, r0
 8006098:	f7ff fe88 	bl	8005dac <configuration_is_valid>
 800609c:	b900      	cbnz	r0, 80060a0 <acc_base_configuration_wg_duration_get+0xc>
 800609e:	bd10      	pop	{r4, pc}
 80060a0:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
 80060a4:	bd10      	pop	{r4, pc}
 80060a6:	bf00      	nop

080060a8 <acc_base_configuration_wg_duration_set>:
 80060a8:	b538      	push	{r3, r4, r5, lr}
 80060aa:	460d      	mov	r5, r1
 80060ac:	4604      	mov	r4, r0
 80060ae:	f7ff fe7d 	bl	8005dac <configuration_is_valid>
 80060b2:	b108      	cbz	r0, 80060b8 <acc_base_configuration_wg_duration_set+0x10>
 80060b4:	f8a4 5042 	strh.w	r5, [r4, #66]	; 0x42
 80060b8:	bd38      	pop	{r3, r4, r5, pc}
 80060ba:	bf00      	nop

080060bc <acc_base_configuration_integrator_ramp_up_get>:
 80060bc:	b510      	push	{r4, lr}
 80060be:	4604      	mov	r4, r0
 80060c0:	f7ff fe74 	bl	8005dac <configuration_is_valid>
 80060c4:	b900      	cbnz	r0, 80060c8 <acc_base_configuration_integrator_ramp_up_get+0xc>
 80060c6:	bd10      	pop	{r4, pc}
 80060c8:	f8b4 0044 	ldrh.w	r0, [r4, #68]	; 0x44
 80060cc:	bd10      	pop	{r4, pc}
 80060ce:	bf00      	nop

080060d0 <acc_base_configuration_integrator_ramp_up_set>:
 80060d0:	b538      	push	{r3, r4, r5, lr}
 80060d2:	460d      	mov	r5, r1
 80060d4:	4604      	mov	r4, r0
 80060d6:	f7ff fe69 	bl	8005dac <configuration_is_valid>
 80060da:	b108      	cbz	r0, 80060e0 <acc_base_configuration_integrator_ramp_up_set+0x10>
 80060dc:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
 80060e0:	bd38      	pop	{r3, r4, r5, pc}
 80060e2:	bf00      	nop

080060e4 <acc_base_configuration_sampling_mode_get>:
 80060e4:	b510      	push	{r4, lr}
 80060e6:	4604      	mov	r4, r0
 80060e8:	f7ff fe60 	bl	8005dac <configuration_is_valid>
 80060ec:	b900      	cbnz	r0, 80060f0 <acc_base_configuration_sampling_mode_get+0xc>
 80060ee:	bd10      	pop	{r4, pc}
 80060f0:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
 80060f4:	bd10      	pop	{r4, pc}
 80060f6:	bf00      	nop

080060f8 <acc_base_configuration_sweep_type_debug_set>:
 80060f8:	b538      	push	{r3, r4, r5, lr}
 80060fa:	460d      	mov	r5, r1
 80060fc:	4604      	mov	r4, r0
 80060fe:	f7ff fe55 	bl	8005dac <configuration_is_valid>
 8006102:	b108      	cbz	r0, 8006108 <acc_base_configuration_sweep_type_debug_set+0x10>
 8006104:	f884 5046 	strb.w	r5, [r4, #70]	; 0x46
 8006108:	bd38      	pop	{r3, r4, r5, pc}
 800610a:	bf00      	nop

0800610c <acc_base_configuration_sweep_type_debug_get>:
 800610c:	b510      	push	{r4, lr}
 800610e:	4604      	mov	r4, r0
 8006110:	f7ff fe4c 	bl	8005dac <configuration_is_valid>
 8006114:	b900      	cbnz	r0, 8006118 <acc_base_configuration_sweep_type_debug_get+0xc>
 8006116:	bd10      	pop	{r4, pc}
 8006118:	f894 0046 	ldrb.w	r0, [r4, #70]	; 0x46
 800611c:	bd10      	pop	{r4, pc}
 800611e:	bf00      	nop

08006120 <acc_base_configuration_use_point_range_set>:
 8006120:	b538      	push	{r3, r4, r5, lr}
 8006122:	460d      	mov	r5, r1
 8006124:	4604      	mov	r4, r0
 8006126:	f7ff fe41 	bl	8005dac <configuration_is_valid>
 800612a:	b108      	cbz	r0, 8006130 <acc_base_configuration_use_point_range_set+0x10>
 800612c:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
 8006130:	bd38      	pop	{r3, r4, r5, pc}
 8006132:	bf00      	nop

08006134 <acc_base_configuration_use_point_range_get>:
 8006134:	b510      	push	{r4, lr}
 8006136:	4604      	mov	r4, r0
 8006138:	f7ff fe38 	bl	8005dac <configuration_is_valid>
 800613c:	b900      	cbnz	r0, 8006140 <acc_base_configuration_use_point_range_get+0xc>
 800613e:	bd10      	pop	{r4, pc}
 8006140:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8006144:	bd10      	pop	{r4, pc}
 8006146:	bf00      	nop

08006148 <acc_base_configuration_use_fast_dll_refresh_routine_set>:
 8006148:	b538      	push	{r3, r4, r5, lr}
 800614a:	460d      	mov	r5, r1
 800614c:	4604      	mov	r4, r0
 800614e:	f7ff fe2d 	bl	8005dac <configuration_is_valid>
 8006152:	b108      	cbz	r0, 8006158 <acc_base_configuration_use_fast_dll_refresh_routine_set+0x10>
 8006154:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 8006158:	bd38      	pop	{r3, r4, r5, pc}
 800615a:	bf00      	nop

0800615c <acc_base_configuration_staggered_vga_stabilization_time_set>:
 800615c:	b538      	push	{r3, r4, r5, lr}
 800615e:	460d      	mov	r5, r1
 8006160:	4604      	mov	r4, r0
 8006162:	f7ff fe23 	bl	8005dac <configuration_is_valid>
 8006166:	b108      	cbz	r0, 800616c <acc_base_configuration_staggered_vga_stabilization_time_set+0x10>
 8006168:	f8a4 5056 	strh.w	r5, [r4, #86]	; 0x56
 800616c:	bd38      	pop	{r3, r4, r5, pc}
 800616e:	bf00      	nop

08006170 <acc_base_configuration_bba_reset_clocksync_perturbation_get>:
 8006170:	b510      	push	{r4, lr}
 8006172:	4604      	mov	r4, r0
 8006174:	f7ff fe1a 	bl	8005dac <configuration_is_valid>
 8006178:	b900      	cbnz	r0, 800617c <acc_base_configuration_bba_reset_clocksync_perturbation_get+0xc>
 800617a:	bd10      	pop	{r4, pc}
 800617c:	f894 0063 	ldrb.w	r0, [r4, #99]	; 0x63
 8006180:	bd10      	pop	{r4, pc}
 8006182:	bf00      	nop

08006184 <acc_base_configuration_bba_linear_resync_perturbation_get>:
 8006184:	b510      	push	{r4, lr}
 8006186:	4604      	mov	r4, r0
 8006188:	f7ff fe10 	bl	8005dac <configuration_is_valid>
 800618c:	b900      	cbnz	r0, 8006190 <acc_base_configuration_bba_linear_resync_perturbation_get+0xc>
 800618e:	bd10      	pop	{r4, pc}
 8006190:	f894 0064 	ldrb.w	r0, [r4, #100]	; 0x64
 8006194:	bd10      	pop	{r4, pc}
 8006196:	bf00      	nop

08006198 <acc_base_configuration_bba_fast_refresh_disable_get>:
 8006198:	b510      	push	{r4, lr}
 800619a:	4604      	mov	r4, r0
 800619c:	f7ff fe06 	bl	8005dac <configuration_is_valid>
 80061a0:	b900      	cbnz	r0, 80061a4 <acc_base_configuration_bba_fast_refresh_disable_get+0xc>
 80061a2:	bd10      	pop	{r4, pc}
 80061a4:	f894 0065 	ldrb.w	r0, [r4, #101]	; 0x65
 80061a8:	bd10      	pop	{r4, pc}
 80061aa:	bf00      	nop

080061ac <acc_base_configuration_ignore_range_limits_get>:
 80061ac:	b510      	push	{r4, lr}
 80061ae:	4604      	mov	r4, r0
 80061b0:	f7ff fdfc 	bl	8005dac <configuration_is_valid>
 80061b4:	b900      	cbnz	r0, 80061b8 <acc_base_configuration_ignore_range_limits_get+0xc>
 80061b6:	bd10      	pop	{r4, pc}
 80061b8:	f894 0066 	ldrb.w	r0, [r4, #102]	; 0x66
 80061bc:	bd10      	pop	{r4, pc}
 80061be:	bf00      	nop

080061c0 <acc_base_configuration_sparse_sweeps_per_frame_get>:
 80061c0:	b510      	push	{r4, lr}
 80061c2:	4604      	mov	r4, r0
 80061c4:	f7ff fdf2 	bl	8005dac <configuration_is_valid>
 80061c8:	b900      	cbnz	r0, 80061cc <acc_base_configuration_sparse_sweeps_per_frame_get+0xc>
 80061ca:	bd10      	pop	{r4, pc}
 80061cc:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 80061d0:	bd10      	pop	{r4, pc}
 80061d2:	bf00      	nop

080061d4 <acc_base_configuration_downsampling_factor_get>:
 80061d4:	b510      	push	{r4, lr}
 80061d6:	4604      	mov	r4, r0
 80061d8:	f7ff fde8 	bl	8005dac <configuration_is_valid>
 80061dc:	b900      	cbnz	r0, 80061e0 <acc_base_configuration_downsampling_factor_get+0xc>
 80061de:	bd10      	pop	{r4, pc}
 80061e0:	f8b4 0060 	ldrh.w	r0, [r4, #96]	; 0x60
 80061e4:	bd10      	pop	{r4, pc}
 80061e6:	bf00      	nop

080061e8 <acc_base_configuration_downsampling_factor_set>:
 80061e8:	b538      	push	{r3, r4, r5, lr}
 80061ea:	460d      	mov	r5, r1
 80061ec:	4604      	mov	r4, r0
 80061ee:	f7ff fddd 	bl	8005dac <configuration_is_valid>
 80061f2:	b108      	cbz	r0, 80061f8 <acc_base_configuration_downsampling_factor_set+0x10>
 80061f4:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
 80061f8:	bd38      	pop	{r3, r4, r5, pc}
 80061fa:	bf00      	nop

080061fc <acc_base_configuration_noise_level_normalization_get>:
 80061fc:	b510      	push	{r4, lr}
 80061fe:	4604      	mov	r4, r0
 8006200:	f7ff fdd4 	bl	8005dac <configuration_is_valid>
 8006204:	b900      	cbnz	r0, 8006208 <acc_base_configuration_noise_level_normalization_get+0xc>
 8006206:	bd10      	pop	{r4, pc}
 8006208:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
 800620c:	bd10      	pop	{r4, pc}
 800620e:	bf00      	nop

08006210 <acc_base_configuration_noise_level_normalization_set>:
 8006210:	b538      	push	{r3, r4, r5, lr}
 8006212:	460d      	mov	r5, r1
 8006214:	4604      	mov	r4, r0
 8006216:	f7ff fdc9 	bl	8005dac <configuration_is_valid>
 800621a:	b108      	cbz	r0, 8006220 <acc_base_configuration_noise_level_normalization_set+0x10>
 800621c:	f884 5049 	strb.w	r5, [r4, #73]	; 0x49
 8006220:	bd38      	pop	{r3, r4, r5, pc}
 8006222:	bf00      	nop

08006224 <acc_base_configuration_noise_deviation_override_get>:
 8006224:	b510      	push	{r4, lr}
 8006226:	4604      	mov	r4, r0
 8006228:	f7ff fdc0 	bl	8005dac <configuration_is_valid>
 800622c:	b900      	cbnz	r0, 8006230 <acc_base_configuration_noise_deviation_override_get+0xc>
 800622e:	bd10      	pop	{r4, pc}
 8006230:	f8b4 004c 	ldrh.w	r0, [r4, #76]	; 0x4c
 8006234:	bd10      	pop	{r4, pc}
 8006236:	bf00      	nop

08006238 <acc_base_configuration_asynchronous_measurement_get>:
 8006238:	b510      	push	{r4, lr}
 800623a:	4604      	mov	r4, r0
 800623c:	f7ff fdb6 	bl	8005dac <configuration_is_valid>
 8006240:	b900      	cbnz	r0, 8006244 <acc_base_configuration_asynchronous_measurement_get+0xc>
 8006242:	bd10      	pop	{r4, pc}
 8006244:	f894 004e 	ldrb.w	r0, [r4, #78]	; 0x4e
 8006248:	bd10      	pop	{r4, pc}
 800624a:	bf00      	nop

0800624c <acc_base_configuration_asynchronous_measurement_set>:
 800624c:	b538      	push	{r3, r4, r5, lr}
 800624e:	460d      	mov	r5, r1
 8006250:	4604      	mov	r4, r0
 8006252:	f7ff fdab 	bl	8005dac <configuration_is_valid>
 8006256:	b108      	cbz	r0, 800625c <acc_base_configuration_asynchronous_measurement_set+0x10>
 8006258:	f884 504e 	strb.w	r5, [r4, #78]	; 0x4e
 800625c:	bd38      	pop	{r3, r4, r5, pc}
 800625e:	bf00      	nop

08006260 <acc_base_configuration_min_pipeline_memory_size_get>:
 8006260:	b510      	push	{r4, lr}
 8006262:	4604      	mov	r4, r0
 8006264:	f7ff fda2 	bl	8005dac <configuration_is_valid>
 8006268:	b900      	cbnz	r0, 800626c <acc_base_configuration_min_pipeline_memory_size_get+0xc>
 800626a:	bd10      	pop	{r4, pc}
 800626c:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
 8006270:	bd10      	pop	{r4, pc}
 8006272:	bf00      	nop

08006274 <acc_base_configuration_min_pipeline_memory_size_set>:
 8006274:	b538      	push	{r3, r4, r5, lr}
 8006276:	460d      	mov	r5, r1
 8006278:	4604      	mov	r4, r0
 800627a:	f7ff fd97 	bl	8005dac <configuration_is_valid>
 800627e:	b108      	cbz	r0, 8006284 <acc_base_configuration_min_pipeline_memory_size_set+0x10>
 8006280:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 8006284:	bd38      	pop	{r3, r4, r5, pc}
 8006286:	bf00      	nop

08006288 <acc_base_configuration_maximize_signal_attenuation_get>:
 8006288:	b510      	push	{r4, lr}
 800628a:	4604      	mov	r4, r0
 800628c:	f7ff fd8e 	bl	8005dac <configuration_is_valid>
 8006290:	b900      	cbnz	r0, 8006294 <acc_base_configuration_maximize_signal_attenuation_get+0xc>
 8006292:	bd10      	pop	{r4, pc}
 8006294:	f894 004a 	ldrb.w	r0, [r4, #74]	; 0x4a
 8006298:	bd10      	pop	{r4, pc}
 800629a:	bf00      	nop

0800629c <acc_base_configuration_maximize_signal_attenuation_set>:
 800629c:	b538      	push	{r3, r4, r5, lr}
 800629e:	460d      	mov	r5, r1
 80062a0:	4604      	mov	r4, r0
 80062a2:	f7ff fd83 	bl	8005dac <configuration_is_valid>
 80062a6:	b108      	cbz	r0, 80062ac <acc_base_configuration_maximize_signal_attenuation_set+0x10>
 80062a8:	f884 504a 	strb.w	r5, [r4, #74]	; 0x4a
 80062ac:	bd38      	pop	{r3, r4, r5, pc}
 80062ae:	bf00      	nop

080062b0 <acc_base_configuration_cca_get>:
 80062b0:	b570      	push	{r4, r5, r6, lr}
 80062b2:	460e      	mov	r6, r1
 80062b4:	4615      	mov	r5, r2
 80062b6:	4604      	mov	r4, r0
 80062b8:	f7ff fd78 	bl	8005dac <configuration_is_valid>
 80062bc:	b148      	cbz	r0, 80062d2 <acc_base_configuration_cca_get+0x22>
 80062be:	b116      	cbz	r6, 80062c6 <acc_base_configuration_cca_get+0x16>
 80062c0:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 80062c4:	7033      	strb	r3, [r6, #0]
 80062c6:	b115      	cbz	r5, 80062ce <acc_base_configuration_cca_get+0x1e>
 80062c8:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 80062cc:	802b      	strh	r3, [r5, #0]
 80062ce:	f894 004f 	ldrb.w	r0, [r4, #79]	; 0x4f
 80062d2:	bd70      	pop	{r4, r5, r6, pc}

080062d4 <acc_base_configuration_cca_set>:
 80062d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062d6:	460f      	mov	r7, r1
 80062d8:	4616      	mov	r6, r2
 80062da:	461d      	mov	r5, r3
 80062dc:	4604      	mov	r4, r0
 80062de:	f7ff fd65 	bl	8005dac <configuration_is_valid>
 80062e2:	b128      	cbz	r0, 80062f0 <acc_base_configuration_cca_set+0x1c>
 80062e4:	f884 704f 	strb.w	r7, [r4, #79]	; 0x4f
 80062e8:	f884 6050 	strb.w	r6, [r4, #80]	; 0x50
 80062ec:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
 80062f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062f2:	bf00      	nop

080062f4 <acc_base_configuration_mur_set>:
 80062f4:	b538      	push	{r3, r4, r5, lr}
 80062f6:	460d      	mov	r5, r1
 80062f8:	4604      	mov	r4, r0
 80062fa:	f7ff fd57 	bl	8005dac <configuration_is_valid>
 80062fe:	b108      	cbz	r0, 8006304 <acc_base_configuration_mur_set+0x10>
 8006300:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
 8006304:	bd38      	pop	{r3, r4, r5, pc}
 8006306:	bf00      	nop

08006308 <acc_base_configuration_sampling_mode_to_string>:
 8006308:	b130      	cbz	r0, 8006318 <acc_base_configuration_sampling_mode_to_string+0x10>
 800630a:	4b04      	ldr	r3, [pc, #16]	; (800631c <acc_base_configuration_sampling_mode_to_string+0x14>)
 800630c:	4a04      	ldr	r2, [pc, #16]	; (8006320 <acc_base_configuration_sampling_mode_to_string+0x18>)
 800630e:	2801      	cmp	r0, #1
 8006310:	bf14      	ite	ne
 8006312:	4618      	movne	r0, r3
 8006314:	4610      	moveq	r0, r2
 8006316:	4770      	bx	lr
 8006318:	4802      	ldr	r0, [pc, #8]	; (8006324 <acc_base_configuration_sampling_mode_to_string+0x1c>)
 800631a:	4770      	bx	lr
 800631c:	0801485c 	.word	0x0801485c
 8006320:	08013398 	.word	0x08013398
 8006324:	08013394 	.word	0x08013394

08006328 <acc_base_configuration_print>:
 8006328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800632c:	b08f      	sub	sp, #60	; 0x3c
 800632e:	4604      	mov	r4, r0
 8006330:	f000 f9be 	bl	80066b0 <acc_rss_integration_log_level>
 8006334:	2801      	cmp	r0, #1
 8006336:	d94a      	bls.n	80063ce <acc_base_configuration_print+0xa6>
 8006338:	4b26      	ldr	r3, [pc, #152]	; (80063d4 <acc_base_configuration_print+0xac>)
 800633a:	4620      	mov	r0, r4
 800633c:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 8006340:	f7ff fd4a 	bl	8005dd8 <acc_base_configuration_sensor_get>
 8006344:	4683      	mov	fp, r0
 8006346:	4620      	mov	r0, r4
 8006348:	f7ff fdce 	bl	8005ee8 <acc_base_configuration_hw_accelerated_average_samples_get>
 800634c:	4605      	mov	r5, r0
 800634e:	4620      	mov	r0, r4
 8006350:	f7ff fe7c 	bl	800604c <acc_base_configuration_gain_get>
 8006354:	4606      	mov	r6, r0
 8006356:	4620      	mov	r0, r4
 8006358:	f7ff fe88 	bl	800606c <acc_base_configuration_integrator_get>
 800635c:	4607      	mov	r7, r0
 800635e:	4620      	mov	r0, r4
 8006360:	f7ff fe98 	bl	8006094 <acc_base_configuration_wg_duration_get>
 8006364:	4680      	mov	r8, r0
 8006366:	4620      	mov	r0, r4
 8006368:	f7ff fea8 	bl	80060bc <acc_base_configuration_integrator_ramp_up_get>
 800636c:	4681      	mov	r9, r0
 800636e:	4620      	mov	r0, r4
 8006370:	f7ff fd82 	bl	8005e78 <acc_base_configuration_power_save_mode_get>
 8006374:	2804      	cmp	r0, #4
 8006376:	bf96      	itet	ls
 8006378:	4b17      	ldrls	r3, [pc, #92]	; (80063d8 <acc_base_configuration_print+0xb0>)
 800637a:	4918      	ldrhi	r1, [pc, #96]	; (80063dc <acc_base_configuration_print+0xb4>)
 800637c:	f853 1020 	ldrls.w	r1, [r3, r0, lsl #2]
 8006380:	910d      	str	r1, [sp, #52]	; 0x34
 8006382:	4620      	mov	r0, r4
 8006384:	f7ff feae 	bl	80060e4 <acc_base_configuration_sampling_mode_get>
 8006388:	f7ff ffbe 	bl	8006308 <acc_base_configuration_sampling_mode_to_string>
 800638c:	4602      	mov	r2, r0
 800638e:	4620      	mov	r0, r4
 8006390:	920c      	str	r2, [sp, #48]	; 0x30
 8006392:	f7ff fd81 	bl	8005e98 <acc_base_configuration_tx_disable_get>
 8006396:	4603      	mov	r3, r0
 8006398:	4620      	mov	r0, r4
 800639a:	930b      	str	r3, [sp, #44]	; 0x2c
 800639c:	f7ff ff10 	bl	80061c0 <acc_base_configuration_sparse_sweeps_per_frame_get>
 80063a0:	4684      	mov	ip, r0
 80063a2:	4620      	mov	r0, r4
 80063a4:	4664      	mov	r4, ip
 80063a6:	f7ff fd8b 	bl	8005ec0 <acc_base_configuration_decrease_tx_emission_get>
 80063aa:	990d      	ldr	r1, [sp, #52]	; 0x34
 80063ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80063ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063b0:	9206      	str	r2, [sp, #24]
 80063b2:	e9cd 9104 	strd	r9, r1, [sp, #16]
 80063b6:	9307      	str	r3, [sp, #28]
 80063b8:	9009      	str	r0, [sp, #36]	; 0x24
 80063ba:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80063be:	e9cd 5600 	strd	r5, r6, [sp]
 80063c2:	4a07      	ldr	r2, [pc, #28]	; (80063e0 <acc_base_configuration_print+0xb8>)
 80063c4:	4907      	ldr	r1, [pc, #28]	; (80063e4 <acc_base_configuration_print+0xbc>)
 80063c6:	9408      	str	r4, [sp, #32]
 80063c8:	465b      	mov	r3, fp
 80063ca:	2002      	movs	r0, #2
 80063cc:	47d0      	blx	sl
 80063ce:	b00f      	add	sp, #60	; 0x3c
 80063d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063d4:	20000640 	.word	0x20000640
 80063d8:	080135b0 	.word	0x080135b0
 80063dc:	0801485c 	.word	0x0801485c
 80063e0:	0801339c 	.word	0x0801339c
 80063e4:	08013380 	.word	0x08013380

080063e8 <acc_base_configuration_check>:
 80063e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ea:	4605      	mov	r5, r0
 80063ec:	f7ff fcde 	bl	8005dac <configuration_is_valid>
 80063f0:	4604      	mov	r4, r0
 80063f2:	b318      	cbz	r0, 800643c <acc_base_configuration_check+0x54>
 80063f4:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80063f6:	2b04      	cmp	r3, #4
 80063f8:	d819      	bhi.n	800642e <acc_base_configuration_check+0x46>
 80063fa:	d02d      	beq.n	8006458 <acc_base_configuration_check+0x70>
 80063fc:	8feb      	ldrh	r3, [r5, #62]	; 0x3e
 80063fe:	2b16      	cmp	r3, #22
 8006400:	d821      	bhi.n	8006446 <acc_base_configuration_check+0x5e>
 8006402:	8fab      	ldrh	r3, [r5, #60]	; 0x3c
 8006404:	3b01      	subs	r3, #1
 8006406:	b29b      	uxth	r3, r3
 8006408:	2b3e      	cmp	r3, #62	; 0x3e
 800640a:	d819      	bhi.n	8006440 <acc_base_configuration_check+0x58>
 800640c:	6bae      	ldr	r6, [r5, #56]	; 0x38
 800640e:	792b      	ldrb	r3, [r5, #4]
 8006410:	b9e6      	cbnz	r6, 800644c <acc_base_configuration_check+0x64>
 8006412:	2b03      	cmp	r3, #3
 8006414:	d037      	beq.n	8006486 <acc_base_configuration_check+0x9e>
 8006416:	2301      	movs	r3, #1
 8006418:	f885 304e 	strb.w	r3, [r5, #78]	; 0x4e
 800641c:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
 8006420:	2b06      	cmp	r3, #6
 8006422:	d00b      	beq.n	800643c <acc_base_configuration_check+0x54>
 8006424:	2b09      	cmp	r3, #9
 8006426:	d009      	beq.n	800643c <acc_base_configuration_check+0x54>
 8006428:	4b18      	ldr	r3, [pc, #96]	; (800648c <acc_base_configuration_check+0xa4>)
 800642a:	4a19      	ldr	r2, [pc, #100]	; (8006490 <acc_base_configuration_check+0xa8>)
 800642c:	e001      	b.n	8006432 <acc_base_configuration_check+0x4a>
 800642e:	4b17      	ldr	r3, [pc, #92]	; (800648c <acc_base_configuration_check+0xa4>)
 8006430:	4a18      	ldr	r2, [pc, #96]	; (8006494 <acc_base_configuration_check+0xac>)
 8006432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006434:	4918      	ldr	r1, [pc, #96]	; (8006498 <acc_base_configuration_check+0xb0>)
 8006436:	2000      	movs	r0, #0
 8006438:	4798      	blx	r3
 800643a:	2400      	movs	r4, #0
 800643c:	4620      	mov	r0, r4
 800643e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006440:	4b12      	ldr	r3, [pc, #72]	; (800648c <acc_base_configuration_check+0xa4>)
 8006442:	4a16      	ldr	r2, [pc, #88]	; (800649c <acc_base_configuration_check+0xb4>)
 8006444:	e7f5      	b.n	8006432 <acc_base_configuration_check+0x4a>
 8006446:	4b11      	ldr	r3, [pc, #68]	; (800648c <acc_base_configuration_check+0xa4>)
 8006448:	4a15      	ldr	r2, [pc, #84]	; (80064a0 <acc_base_configuration_check+0xb8>)
 800644a:	e7f2      	b.n	8006432 <acc_base_configuration_check+0x4a>
 800644c:	2b03      	cmp	r3, #3
 800644e:	d00c      	beq.n	800646a <acc_base_configuration_check+0x82>
 8006450:	f036 0304 	bics.w	r3, r6, #4
 8006454:	d1e2      	bne.n	800641c <acc_base_configuration_check+0x34>
 8006456:	e7de      	b.n	8006416 <acc_base_configuration_check+0x2e>
 8006458:	f000 f8a2 	bl	80065a0 <acc_rss_integration_is_hibernate_capable>
 800645c:	b160      	cbz	r0, 8006478 <acc_base_configuration_check+0x90>
 800645e:	792b      	ldrb	r3, [r5, #4]
 8006460:	2b03      	cmp	r3, #3
 8006462:	d1cb      	bne.n	80063fc <acc_base_configuration_check+0x14>
 8006464:	4b09      	ldr	r3, [pc, #36]	; (800648c <acc_base_configuration_check+0xa4>)
 8006466:	4a0f      	ldr	r2, [pc, #60]	; (80064a4 <acc_base_configuration_check+0xbc>)
 8006468:	e7e3      	b.n	8006432 <acc_base_configuration_check+0x4a>
 800646a:	f895 704e 	ldrb.w	r7, [r5, #78]	; 0x4e
 800646e:	2f00      	cmp	r7, #0
 8006470:	d1ee      	bne.n	8006450 <acc_base_configuration_check+0x68>
 8006472:	4b06      	ldr	r3, [pc, #24]	; (800648c <acc_base_configuration_check+0xa4>)
 8006474:	4a0c      	ldr	r2, [pc, #48]	; (80064a8 <acc_base_configuration_check+0xc0>)
 8006476:	e7dc      	b.n	8006432 <acc_base_configuration_check+0x4a>
 8006478:	4904      	ldr	r1, [pc, #16]	; (800648c <acc_base_configuration_check+0xa4>)
 800647a:	4a0c      	ldr	r2, [pc, #48]	; (80064ac <acc_base_configuration_check+0xc4>)
 800647c:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800647e:	4906      	ldr	r1, [pc, #24]	; (8006498 <acc_base_configuration_check+0xb0>)
 8006480:	4604      	mov	r4, r0
 8006482:	47a8      	blx	r5
 8006484:	e7da      	b.n	800643c <acc_base_configuration_check+0x54>
 8006486:	4b01      	ldr	r3, [pc, #4]	; (800648c <acc_base_configuration_check+0xa4>)
 8006488:	4a09      	ldr	r2, [pc, #36]	; (80064b0 <acc_base_configuration_check+0xc8>)
 800648a:	e7d2      	b.n	8006432 <acc_base_configuration_check+0x4a>
 800648c:	20000640 	.word	0x20000640
 8006490:	08013574 	.word	0x08013574
 8006494:	080133d4 	.word	0x080133d4
 8006498:	08013380 	.word	0x08013380
 800649c:	080134a4 	.word	0x080134a4
 80064a0:	08013470 	.word	0x08013470
 80064a4:	0801342c 	.word	0x0801342c
 80064a8:	08013534 	.word	0x08013534
 80064ac:	080133ec 	.word	0x080133ec
 80064b0:	080134f8 	.word	0x080134f8

080064b4 <acc_rss_integration_register>:
 80064b4:	b538      	push	{r3, r4, r5, lr}
 80064b6:	6943      	ldr	r3, [r0, #20]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d02b      	beq.n	8006514 <acc_rss_integration_register+0x60>
 80064bc:	6983      	ldr	r3, [r0, #24]
 80064be:	b34b      	cbz	r3, 8006514 <acc_rss_integration_register+0x60>
 80064c0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80064c2:	b323      	cbz	r3, 800650e <acc_rss_integration_register+0x5a>
 80064c4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80064c6:	b32b      	cbz	r3, 8006514 <acc_rss_integration_register+0x60>
 80064c8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80064ca:	b31b      	cbz	r3, 8006514 <acc_rss_integration_register+0x60>
 80064cc:	6883      	ldr	r3, [r0, #8]
 80064ce:	b30b      	cbz	r3, 8006514 <acc_rss_integration_register+0x60>
 80064d0:	68c3      	ldr	r3, [r0, #12]
 80064d2:	b1fb      	cbz	r3, 8006514 <acc_rss_integration_register+0x60>
 80064d4:	6903      	ldr	r3, [r0, #16]
 80064d6:	b1eb      	cbz	r3, 8006514 <acc_rss_integration_register+0x60>
 80064d8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80064da:	b313      	cbz	r3, 8006522 <acc_rss_integration_register+0x6e>
 80064dc:	6802      	ldr	r2, [r0, #0]
 80064de:	2a2a      	cmp	r2, #42	; 0x2a
 80064e0:	d81a      	bhi.n	8006518 <acc_rss_integration_register+0x64>
 80064e2:	6842      	ldr	r2, [r0, #4]
 80064e4:	2a0f      	cmp	r2, #15
 80064e6:	d917      	bls.n	8006518 <acc_rss_integration_register+0x64>
 80064e8:	69c2      	ldr	r2, [r0, #28]
 80064ea:	b10a      	cbz	r2, 80064f0 <acc_rss_integration_register+0x3c>
 80064ec:	6a02      	ldr	r2, [r0, #32]
 80064ee:	b19a      	cbz	r2, 8006518 <acc_rss_integration_register+0x64>
 80064f0:	4605      	mov	r5, r0
 80064f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80064f4:	4c0c      	ldr	r4, [pc, #48]	; (8006528 <acc_rss_integration_register+0x74>)
 80064f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80064fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80064fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006500:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006504:	2301      	movs	r3, #1
 8006506:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800650a:	4618      	mov	r0, r3
 800650c:	bd38      	pop	{r3, r4, r5, pc}
 800650e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006510:	2b00      	cmp	r3, #0
 8006512:	d1d7      	bne.n	80064c4 <acc_rss_integration_register+0x10>
 8006514:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006516:	b123      	cbz	r3, 8006522 <acc_rss_integration_register+0x6e>
 8006518:	4a04      	ldr	r2, [pc, #16]	; (800652c <acc_rss_integration_register+0x78>)
 800651a:	4905      	ldr	r1, [pc, #20]	; (8006530 <acc_rss_integration_register+0x7c>)
 800651c:	2000      	movs	r0, #0
 800651e:	4798      	blx	r3
 8006520:	2300      	movs	r3, #0
 8006522:	4618      	mov	r0, r3
 8006524:	bd38      	pop	{r3, r4, r5, pc}
 8006526:	bf00      	nop
 8006528:	20000640 	.word	0x20000640
 800652c:	080135c4 	.word	0x080135c4
 8006530:	080135d8 	.word	0x080135d8

08006534 <acc_rss_integration_unregister>:
 8006534:	4802      	ldr	r0, [pc, #8]	; (8006540 <acc_rss_integration_unregister+0xc>)
 8006536:	223c      	movs	r2, #60	; 0x3c
 8006538:	2100      	movs	r1, #0
 800653a:	f008 b9fb 	b.w	800e934 <memset>
 800653e:	bf00      	nop
 8006540:	20000640 	.word	0x20000640

08006544 <acc_rss_integration_get_sensor_count>:
 8006544:	4b01      	ldr	r3, [pc, #4]	; (800654c <acc_rss_integration_get_sensor_count+0x8>)
 8006546:	6818      	ldr	r0, [r3, #0]
 8006548:	4770      	bx	lr
 800654a:	bf00      	nop
 800654c:	20000640 	.word	0x20000640

08006550 <acc_rss_integration_get_sensor_reference_frequency>:
 8006550:	4b01      	ldr	r3, [pc, #4]	; (8006558 <acc_rss_integration_get_sensor_reference_frequency+0x8>)
 8006552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006554:	4718      	bx	r3
 8006556:	bf00      	nop
 8006558:	20000640 	.word	0x20000640

0800655c <acc_rss_integration_get_max_spi_transfer_size>:
 800655c:	4b01      	ldr	r3, [pc, #4]	; (8006564 <acc_rss_integration_get_max_spi_transfer_size+0x8>)
 800655e:	6858      	ldr	r0, [r3, #4]
 8006560:	4770      	bx	lr
 8006562:	bf00      	nop
 8006564:	20000640 	.word	0x20000640

08006568 <acc_rss_integration_sensor_device_power_on>:
 8006568:	4b01      	ldr	r3, [pc, #4]	; (8006570 <acc_rss_integration_sensor_device_power_on+0x8>)
 800656a:	695b      	ldr	r3, [r3, #20]
 800656c:	4718      	bx	r3
 800656e:	bf00      	nop
 8006570:	20000640 	.word	0x20000640

08006574 <acc_rss_integration_sensor_device_power_off>:
 8006574:	4b01      	ldr	r3, [pc, #4]	; (800657c <acc_rss_integration_sensor_device_power_off+0x8>)
 8006576:	699b      	ldr	r3, [r3, #24]
 8006578:	4718      	bx	r3
 800657a:	bf00      	nop
 800657c:	20000640 	.word	0x20000640

08006580 <acc_rss_integration_sensor_device_hibernate_enter>:
 8006580:	4b02      	ldr	r3, [pc, #8]	; (800658c <acc_rss_integration_sensor_device_hibernate_enter+0xc>)
 8006582:	69db      	ldr	r3, [r3, #28]
 8006584:	b103      	cbz	r3, 8006588 <acc_rss_integration_sensor_device_hibernate_enter+0x8>
 8006586:	4718      	bx	r3
 8006588:	4770      	bx	lr
 800658a:	bf00      	nop
 800658c:	20000640 	.word	0x20000640

08006590 <acc_rss_integration_sensor_device_hibernate_exit>:
 8006590:	4b02      	ldr	r3, [pc, #8]	; (800659c <acc_rss_integration_sensor_device_hibernate_exit+0xc>)
 8006592:	6a1b      	ldr	r3, [r3, #32]
 8006594:	b103      	cbz	r3, 8006598 <acc_rss_integration_sensor_device_hibernate_exit+0x8>
 8006596:	4718      	bx	r3
 8006598:	4770      	bx	lr
 800659a:	bf00      	nop
 800659c:	20000640 	.word	0x20000640

080065a0 <acc_rss_integration_is_hibernate_capable>:
 80065a0:	4b02      	ldr	r3, [pc, #8]	; (80065ac <acc_rss_integration_is_hibernate_capable+0xc>)
 80065a2:	69d8      	ldr	r0, [r3, #28]
 80065a4:	3800      	subs	r0, #0
 80065a6:	bf18      	it	ne
 80065a8:	2001      	movne	r0, #1
 80065aa:	4770      	bx	lr
 80065ac:	20000640 	.word	0x20000640

080065b0 <acc_rss_integration_wait_for_sensor_interrupt>:
 80065b0:	4b01      	ldr	r3, [pc, #4]	; (80065b8 <acc_rss_integration_wait_for_sensor_interrupt+0x8>)
 80065b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b4:	4718      	bx	r3
 80065b6:	bf00      	nop
 80065b8:	20000640 	.word	0x20000640

080065bc <acc_rss_integration_sensor_device_transfer>:
 80065bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065c0:	4f10      	ldr	r7, [pc, #64]	; (8006604 <acc_rss_integration_sensor_device_transfer+0x48>)
 80065c2:	f8d7 e038 	ldr.w	lr, [r7, #56]	; 0x38
 80065c6:	f1be 0f00 	cmp.w	lr, #0
 80065ca:	d003      	beq.n	80065d4 <acc_rss_integration_sensor_device_transfer+0x18>
 80065cc:	4673      	mov	r3, lr
 80065ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065d2:	4718      	bx	r3
 80065d4:	460c      	mov	r4, r1
 80065d6:	4606      	mov	r6, r0
 80065d8:	4611      	mov	r1, r2
 80065da:	4615      	mov	r5, r2
 80065dc:	4620      	mov	r0, r4
 80065de:	4698      	mov	r8, r3
 80065e0:	f002 fd3a 	bl	8009058 <acc_utils_swap16_array>
 80065e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e6:	4630      	mov	r0, r6
 80065e8:	006a      	lsls	r2, r5, #1
 80065ea:	4621      	mov	r1, r4
 80065ec:	4798      	blx	r3
 80065ee:	f1b8 0f00 	cmp.w	r8, #0
 80065f2:	d101      	bne.n	80065f8 <acc_rss_integration_sensor_device_transfer+0x3c>
 80065f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065f8:	4629      	mov	r1, r5
 80065fa:	4620      	mov	r0, r4
 80065fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006600:	f002 bd2a 	b.w	8009058 <acc_utils_swap16_array>
 8006604:	20000640 	.word	0x20000640

08006608 <acc_rss_integration_mem_alloc_debug>:
 8006608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800660c:	4f0c      	ldr	r7, [pc, #48]	; (8006640 <acc_rss_integration_mem_alloc_debug+0x38>)
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	4688      	mov	r8, r1
 8006612:	4616      	mov	r6, r2
 8006614:	4605      	mov	r5, r0
 8006616:	4798      	blx	r3
 8006618:	4604      	mov	r4, r0
 800661a:	b150      	cbz	r0, 8006632 <acc_rss_integration_mem_alloc_debug+0x2a>
 800661c:	4b09      	ldr	r3, [pc, #36]	; (8006644 <acc_rss_integration_mem_alloc_debug+0x3c>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	b123      	cbz	r3, 800662c <acc_rss_integration_mem_alloc_debug+0x24>
 8006622:	689f      	ldr	r7, [r3, #8]
 8006624:	4642      	mov	r2, r8
 8006626:	4633      	mov	r3, r6
 8006628:	4629      	mov	r1, r5
 800662a:	47b8      	blx	r7
 800662c:	4620      	mov	r0, r4
 800662e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006634:	4a04      	ldr	r2, [pc, #16]	; (8006648 <acc_rss_integration_mem_alloc_debug+0x40>)
 8006636:	4905      	ldr	r1, [pc, #20]	; (800664c <acc_rss_integration_mem_alloc_debug+0x44>)
 8006638:	4798      	blx	r3
 800663a:	4620      	mov	r0, r4
 800663c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006640:	20000640 	.word	0x20000640
 8006644:	200004dc 	.word	0x200004dc
 8006648:	080135e8 	.word	0x080135e8
 800664c:	080135d8 	.word	0x080135d8

08006650 <acc_rss_integration_mem_calloc_debug>:
 8006650:	b570      	push	{r4, r5, r6, lr}
 8006652:	b190      	cbz	r0, 800667a <acc_rss_integration_mem_calloc_debug+0x2a>
 8006654:	460c      	mov	r4, r1
 8006656:	4611      	mov	r1, r2
 8006658:	461a      	mov	r2, r3
 800665a:	fba0 3604 	umull	r3, r6, r0, r4
 800665e:	b97e      	cbnz	r6, 8006680 <acc_rss_integration_mem_calloc_debug+0x30>
 8006660:	fb04 f500 	mul.w	r5, r4, r0
 8006664:	4628      	mov	r0, r5
 8006666:	f7ff ffcf 	bl	8006608 <acc_rss_integration_mem_alloc_debug>
 800666a:	4604      	mov	r4, r0
 800666c:	b118      	cbz	r0, 8006676 <acc_rss_integration_mem_calloc_debug+0x26>
 800666e:	462a      	mov	r2, r5
 8006670:	4631      	mov	r1, r6
 8006672:	f008 f95f 	bl	800e934 <memset>
 8006676:	4620      	mov	r0, r4
 8006678:	bd70      	pop	{r4, r5, r6, pc}
 800667a:	4604      	mov	r4, r0
 800667c:	4620      	mov	r0, r4
 800667e:	bd70      	pop	{r4, r5, r6, pc}
 8006680:	4801      	ldr	r0, [pc, #4]	; (8006688 <acc_rss_integration_mem_calloc_debug+0x38>)
 8006682:	21dd      	movs	r1, #221	; 0xdd
 8006684:	f002 fa38 	bl	8008af8 <acc_assert_fail>
 8006688:	080135d8 	.word	0x080135d8

0800668c <acc_rss_integration_mem_free>:
 800668c:	4b06      	ldr	r3, [pc, #24]	; (80066a8 <acc_rss_integration_mem_free+0x1c>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	b510      	push	{r4, lr}
 8006692:	4604      	mov	r4, r0
 8006694:	b10b      	cbz	r3, 800669a <acc_rss_integration_mem_free+0xe>
 8006696:	68db      	ldr	r3, [r3, #12]
 8006698:	4798      	blx	r3
 800669a:	4b04      	ldr	r3, [pc, #16]	; (80066ac <acc_rss_integration_mem_free+0x20>)
 800669c:	4620      	mov	r0, r4
 800669e:	68db      	ldr	r3, [r3, #12]
 80066a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066a4:	4718      	bx	r3
 80066a6:	bf00      	nop
 80066a8:	200004dc 	.word	0x200004dc
 80066ac:	20000640 	.word	0x20000640

080066b0 <acc_rss_integration_log_level>:
 80066b0:	4b01      	ldr	r3, [pc, #4]	; (80066b8 <acc_rss_integration_log_level+0x8>)
 80066b2:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
 80066b6:	4770      	bx	lr
 80066b8:	20000640 	.word	0x20000640

080066bc <inject_data>:
 80066bc:	3034      	adds	r0, #52	; 0x34
 80066be:	f003 bacf 	b.w	8009c60 <acc_element_source_adc_inject_data>
 80066c2:	bf00      	nop

080066c4 <disassemble>:
 80066c4:	b538      	push	{r3, r4, r5, lr}
 80066c6:	6805      	ldr	r5, [r0, #0]
 80066c8:	4604      	mov	r4, r0
 80066ca:	b155      	cbz	r5, 80066e2 <disassemble+0x1e>
 80066cc:	f105 0034 	add.w	r0, r5, #52	; 0x34
 80066d0:	f003 fa76 	bl	8009bc0 <acc_element_source_adc_release>
 80066d4:	f8d5 03a4 	ldr.w	r0, [r5, #932]	; 0x3a4
 80066d8:	f7ff ffd8 	bl	800668c <acc_rss_integration_mem_free>
 80066dc:	4628      	mov	r0, r5
 80066de:	f7ff ffd5 	bl	800668c <acc_rss_integration_mem_free>
 80066e2:	4620      	mov	r0, r4
 80066e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80066e8:	f7ff bfd0 	b.w	800668c <acc_rss_integration_mem_free>

080066ec <produce>:
 80066ec:	b510      	push	{r4, lr}
 80066ee:	4604      	mov	r4, r0
 80066f0:	3034      	adds	r0, #52	; 0x34
 80066f2:	f003 fa73 	bl	8009bdc <acc_element_source_adc_produce>
 80066f6:	b960      	cbnz	r0, 8006712 <produce+0x26>
 80066f8:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 80066fc:	f8d4 2348 	ldr.w	r2, [r4, #840]	; 0x348
 8006700:	6118      	str	r0, [r3, #16]
 8006702:	2101      	movs	r1, #1
 8006704:	7198      	strb	r0, [r3, #6]
 8006706:	7159      	strb	r1, [r3, #5]
 8006708:	f504 7051 	add.w	r0, r4, #836	; 0x344
 800670c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006710:	4710      	bx	r2
 8006712:	bd10      	pop	{r4, pc}

08006714 <acc_pipeline_envelope_assemble>:
 8006714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006718:	ed2d 8b08 	vpush	{d8-d11}
 800671c:	460e      	mov	r6, r1
 800671e:	b08b      	sub	sp, #44	; 0x2c
 8006720:	461c      	mov	r4, r3
 8006722:	2110      	movs	r1, #16
 8006724:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006728:	4681      	mov	r9, r0
 800672a:	4615      	mov	r5, r2
 800672c:	2001      	movs	r0, #1
 800672e:	4ae4      	ldr	r2, [pc, #912]	; (8006ac0 <acc_pipeline_envelope_assemble+0x3ac>)
 8006730:	e9cd 6403 	strd	r6, r4, [sp, #12]
 8006734:	f7ff ff8c 	bl	8006650 <acc_rss_integration_mem_calloc_debug>
 8006738:	4ae1      	ldr	r2, [pc, #900]	; (8006ac0 <acc_pipeline_envelope_assemble+0x3ac>)
 800673a:	4606      	mov	r6, r0
 800673c:	f240 1301 	movw	r3, #257	; 0x101
 8006740:	f44f 716b 	mov.w	r1, #940	; 0x3ac
 8006744:	2001      	movs	r0, #1
 8006746:	f7ff ff83 	bl	8006650 <acc_rss_integration_mem_calloc_debug>
 800674a:	4604      	mov	r4, r0
 800674c:	2e00      	cmp	r6, #0
 800674e:	f000 8208 	beq.w	8006b62 <acc_pipeline_envelope_assemble+0x44e>
 8006752:	2800      	cmp	r0, #0
 8006754:	f000 8205 	beq.w	8006b62 <acc_pipeline_envelope_assemble+0x44e>
 8006758:	f100 0334 	add.w	r3, r0, #52	; 0x34
 800675c:	f500 7262 	add.w	r2, r0, #904	; 0x388
 8006760:	f100 0814 	add.w	r8, r0, #20
 8006764:	6030      	str	r0, [r6, #0]
 8006766:	4649      	mov	r1, r9
 8006768:	4618      	mov	r0, r3
 800676a:	9200      	str	r2, [sp, #0]
 800676c:	ee08 3a10 	vmov	s16, r3
 8006770:	462a      	mov	r2, r5
 8006772:	4643      	mov	r3, r8
 8006774:	f003 fa04 	bl	8009b80 <acc_element_source_adc_init_radar_engine>
 8006778:	4681      	mov	r9, r0
 800677a:	2800      	cmp	r0, #0
 800677c:	f000 81aa 	beq.w	8006ad4 <acc_pipeline_envelope_assemble+0x3c0>
 8006780:	2100      	movs	r1, #0
 8006782:	4628      	mov	r0, r5
 8006784:	f7ff fbe6 	bl	8005f54 <acc_base_configuration_time_domain_low_pass_filter_alpha_get>
 8006788:	4683      	mov	fp, r0
 800678a:	2007      	movs	r0, #7
 800678c:	f8b4 9388 	ldrh.w	r9, [r4, #904]	; 0x388
 8006790:	f002 f9ca 	bl	8008b28 <acc_element_sizeof>
 8006794:	f8b4 a396 	ldrh.w	sl, [r4, #918]	; 0x396
 8006798:	f8b4 3392 	ldrh.w	r3, [r4, #914]	; 0x392
 800679c:	f8b4 2394 	ldrh.w	r2, [r4, #916]	; 0x394
 80067a0:	4453      	add	r3, sl
 80067a2:	ea4f 0a43 	mov.w	sl, r3, lsl #1
 80067a6:	0053      	lsls	r3, r2, #1
 80067a8:	459a      	cmp	sl, r3
 80067aa:	bf38      	it	cc
 80067ac:	469a      	movcc	sl, r3
 80067ae:	fb00 f909 	mul.w	r9, r0, r9
 80067b2:	45ca      	cmp	sl, r9
 80067b4:	4628      	mov	r0, r5
 80067b6:	bf38      	it	cc
 80067b8:	46ca      	movcc	sl, r9
 80067ba:	f7ff fd51 	bl	8006260 <acc_base_configuration_min_pipeline_memory_size_get>
 80067be:	4582      	cmp	sl, r0
 80067c0:	bf38      	it	cc
 80067c2:	4682      	movcc	sl, r0
 80067c4:	f8c4 a3a8 	str.w	sl, [r4, #936]	; 0x3a8
 80067c8:	f1bb 0f00 	cmp.w	fp, #0
 80067cc:	d115      	bne.n	80067fa <acc_pipeline_envelope_assemble+0xe6>
 80067ce:	49bc      	ldr	r1, [pc, #752]	; (8006ac0 <acc_pipeline_envelope_assemble+0x3ac>)
 80067d0:	f240 1285 	movw	r2, #389	; 0x185
 80067d4:	4650      	mov	r0, sl
 80067d6:	f7ff ff17 	bl	8006608 <acc_rss_integration_mem_alloc_debug>
 80067da:	4681      	mov	r9, r0
 80067dc:	f8c4 03a4 	str.w	r0, [r4, #932]	; 0x3a4
 80067e0:	2800      	cmp	r0, #0
 80067e2:	f040 8181 	bne.w	8006ae8 <acc_pipeline_envelope_assemble+0x3d4>
 80067e6:	4630      	mov	r0, r6
 80067e8:	f7ff ff6c 	bl	80066c4 <disassemble>
 80067ec:	2600      	movs	r6, #0
 80067ee:	4630      	mov	r0, r6
 80067f0:	b00b      	add	sp, #44	; 0x2c
 80067f2:	ecbd 8b08 	vpop	{d8-d11}
 80067f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067fa:	2007      	movs	r0, #7
 80067fc:	f8b4 9388 	ldrh.w	r9, [r4, #904]	; 0x388
 8006800:	f002 f992 	bl	8008b28 <acc_element_sizeof>
 8006804:	f10a 030a 	add.w	r3, sl, #10
 8006808:	fb00 3009 	mla	r0, r0, r9, r3
 800680c:	49ac      	ldr	r1, [pc, #688]	; (8006ac0 <acc_pipeline_envelope_assemble+0x3ac>)
 800680e:	f240 1285 	movw	r2, #389	; 0x185
 8006812:	f7ff fef9 	bl	8006608 <acc_rss_integration_mem_alloc_debug>
 8006816:	4681      	mov	r9, r0
 8006818:	f8c4 03a4 	str.w	r0, [r4, #932]	; 0x3a4
 800681c:	2800      	cmp	r0, #0
 800681e:	d0e2      	beq.n	80067e6 <acc_pipeline_envelope_assemble+0xd2>
 8006820:	f8b4 138a 	ldrh.w	r1, [r4, #906]	; 0x38a
 8006824:	9105      	str	r1, [sp, #20]
 8006826:	2007      	movs	r0, #7
 8006828:	f002 f97e 	bl	8008b28 <acc_element_sizeof>
 800682c:	9905      	ldr	r1, [sp, #20]
 800682e:	f10a 0204 	add.w	r2, sl, #4
 8006832:	fb00 9101 	mla	r1, r0, r1, r9
 8006836:	444a      	add	r2, r9
 8006838:	f104 0c06 	add.w	ip, r4, #6
 800683c:	1de0      	adds	r0, r4, #7
 800683e:	f104 0310 	add.w	r3, r4, #16
 8006842:	e9cd 2106 	strd	r2, r1, [sp, #24]
 8006846:	f8c4 c05c 	str.w	ip, [r4, #92]	; 0x5c
 800684a:	f104 020c 	add.w	r2, r4, #12
 800684e:	f104 0c08 	add.w	ip, r4, #8
 8006852:	6620      	str	r0, [r4, #96]	; 0x60
 8006854:	1d20      	adds	r0, r4, #4
 8006856:	e9c4 2c19 	strd	r2, ip, [r4, #100]	; 0x64
 800685a:	65a3      	str	r3, [r4, #88]	; 0x58
 800685c:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 8006860:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 8006864:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8006868:	e9c4 9931 	strd	r9, r9, [r4, #196]	; 0xc4
 800686c:	f8c4 9048 	str.w	r9, [r4, #72]	; 0x48
 8006870:	6564      	str	r4, [r4, #84]	; 0x54
 8006872:	f8c4 9084 	str.w	r9, [r4, #132]	; 0x84
 8006876:	4628      	mov	r0, r5
 8006878:	4617      	mov	r7, r2
 800687a:	9305      	str	r3, [sp, #20]
 800687c:	f7ff fcbe 	bl	80061fc <acc_base_configuration_noise_level_normalization_get>
 8006880:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 8006884:	9907      	ldr	r1, [sp, #28]
 8006886:	b118      	cbz	r0, 8006890 <acc_pipeline_envelope_assemble+0x17c>
 8006888:	e9c4 9941 	strd	r9, r9, [r4, #260]	; 0x104
 800688c:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8006890:	e9c4 9951 	strd	r9, r9, [r4, #324]	; 0x144
 8006894:	e9c4 9960 	strd	r9, r9, [r4, #384]	; 0x180
 8006898:	e9c4 9971 	strd	r9, r9, [r4, #452]	; 0x1c4
 800689c:	e9c4 9183 	strd	r9, r1, [r4, #524]	; 0x20c
 80068a0:	e9c4 1192 	strd	r1, r1, [r4, #584]	; 0x248
 80068a4:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
 80068a8:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194
 80068ac:	f8c4 71a0 	str.w	r7, [r4, #416]	; 0x1a0
 80068b0:	f8c4 31d8 	str.w	r3, [r4, #472]	; 0x1d8
 80068b4:	f8c4 3220 	str.w	r3, [r4, #544]	; 0x220
 80068b8:	f8c4 325c 	str.w	r3, [r4, #604]	; 0x25c
 80068bc:	f1bb 0f00 	cmp.w	fp, #0
 80068c0:	d007      	beq.n	80068d2 <acc_pipeline_envelope_assemble+0x1be>
 80068c2:	e9c4 12a7 	strd	r1, r2, [r4, #668]	; 0x29c
 80068c6:	eb09 000a 	add.w	r0, r9, sl
 80068ca:	f8c4 02a8 	str.w	r0, [r4, #680]	; 0x2a8
 80068ce:	f8c4 32b0 	str.w	r3, [r4, #688]	; 0x2b0
 80068d2:	e9c4 29b7 	strd	r2, r9, [r4, #732]	; 0x2dc
 80068d6:	e9c4 99c6 	strd	r9, r9, [r4, #792]	; 0x318
 80068da:	f8c4 32f0 	str.w	r3, [r4, #752]	; 0x2f0
 80068de:	f8c4 332c 	str.w	r3, [r4, #812]	; 0x32c
 80068e2:	f8c4 9354 	str.w	r9, [r4, #852]	; 0x354
 80068e6:	ee18 0a10 	vmov	r0, s16
 80068ea:	f8c4 437c 	str.w	r4, [r4, #892]	; 0x37c
 80068ee:	f504 7369 	add.w	r3, r4, #932	; 0x3a4
 80068f2:	4642      	mov	r2, r8
 80068f4:	4629      	mov	r1, r5
 80068f6:	f003 f951 	bl	8009b9c <acc_element_source_adc_init>
 80068fa:	4681      	mov	r9, r0
 80068fc:	2800      	cmp	r0, #0
 80068fe:	f000 80e9 	beq.w	8006ad4 <acc_pipeline_envelope_assemble+0x3c0>
 8006902:	f104 03b4 	add.w	r3, r4, #180	; 0xb4
 8006906:	f104 0a74 	add.w	sl, r4, #116	; 0x74
 800690a:	461f      	mov	r7, r3
 800690c:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8006ac4 <acc_pipeline_envelope_assemble+0x3b0>
 8006910:	2105      	movs	r1, #5
 8006912:	4650      	mov	r0, sl
 8006914:	ee09 3a90 	vmov	s19, r3
 8006918:	f002 f954 	bl	8008bc4 <acc_element_saturation_check_init>
 800691c:	4638      	mov	r0, r7
 800691e:	2200      	movs	r2, #0
 8006920:	2105      	movs	r1, #5
 8006922:	f002 fc77 	bl	8009214 <acc_element_centering_init>
 8006926:	4628      	mov	r0, r5
 8006928:	f7ff fc68 	bl	80061fc <acc_base_configuration_noise_level_normalization_get>
 800692c:	2800      	cmp	r0, #0
 800692e:	f040 80fa 	bne.w	8006b26 <acc_pipeline_envelope_assemble+0x412>
 8006932:	f504 739a 	add.w	r3, r4, #308	; 0x134
 8006936:	4618      	mov	r0, r3
 8006938:	ee08 3a90 	vmov	s17, r3
 800693c:	f504 73b8 	add.w	r3, r4, #368	; 0x170
 8006940:	461f      	mov	r7, r3
 8006942:	2207      	movs	r2, #7
 8006944:	2105      	movs	r1, #5
 8006946:	ee0a 3a90 	vmov	s21, r3
 800694a:	f002 fd2f 	bl	80093ac <acc_element_converter_init>
 800694e:	eddf 0a5d 	vldr	s1, [pc, #372]	; 8006ac4 <acc_pipeline_envelope_assemble+0x3b0>
 8006952:	ed94 0a08 	vldr	s0, [r4, #32]
 8006956:	2107      	movs	r1, #7
 8006958:	4638      	mov	r0, r7
 800695a:	f002 fee9 	bl	8009730 <acc_element_iq_mixer_init>
 800695e:	f504 73da 	add.w	r3, r4, #436	; 0x1b4
 8006962:	f8b4 2390 	ldrh.w	r2, [r4, #912]	; 0x390
 8006966:	9206      	str	r2, [sp, #24]
 8006968:	461f      	mov	r7, r3
 800696a:	4628      	mov	r0, r5
 800696c:	ee0b 3a10 	vmov	s22, r3
 8006970:	f8b4 338e 	ldrh.w	r3, [r4, #910]	; 0x38e
 8006974:	9305      	str	r3, [sp, #20]
 8006976:	f7ff fad1 	bl	8005f1c <acc_base_configuration_phase_compensation_alpha_get>
 800697a:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 800697e:	4638      	mov	r0, r7
 8006980:	2107      	movs	r1, #7
 8006982:	f504 77fe 	add.w	r7, r4, #508	; 0x1fc
 8006986:	f003 f809 	bl	800999c <acc_element_phase_compensation_init>
 800698a:	f8b4 238c 	ldrh.w	r2, [r4, #908]	; 0x38c
 800698e:	2107      	movs	r1, #7
 8006990:	4638      	mov	r0, r7
 8006992:	f002 fd7d 	bl	8009490 <acc_element_crop_init>
 8006996:	4628      	mov	r0, r5
 8006998:	f7ff faf8 	bl	8005f8c <acc_base_configuration_filter_demodulated_data_get>
 800699c:	f504 7b0e 	add.w	fp, r4, #568	; 0x238
 80069a0:	9005      	str	r0, [sp, #20]
 80069a2:	4628      	mov	r0, r5
 80069a4:	f7ff fb02 	bl	8005fac <acc_base_configuration_demodulation_filter_cutoff_freq_ratio_get>
 80069a8:	2107      	movs	r1, #7
 80069aa:	9a05      	ldr	r2, [sp, #20]
 80069ac:	4643      	mov	r3, r8
 80069ae:	4658      	mov	r0, fp
 80069b0:	f002 fdd0 	bl	8009554 <acc_element_depth_domain_low_pass_filter_init>
 80069b4:	a909      	add	r1, sp, #36	; 0x24
 80069b6:	4628      	mov	r0, r5
 80069b8:	ee09 7a10 	vmov	s18, r7
 80069bc:	f7ff faca 	bl	8005f54 <acc_base_configuration_time_domain_low_pass_filter_alpha_get>
 80069c0:	2800      	cmp	r0, #0
 80069c2:	f040 80a8 	bne.w	8006b16 <acc_pipeline_envelope_assemble+0x402>
 80069c6:	f504 7933 	add.w	r9, r4, #716	; 0x2cc
 80069ca:	2107      	movs	r1, #7
 80069cc:	4648      	mov	r0, r9
 80069ce:	f504 7842 	add.w	r8, r4, #776	; 0x308
 80069d2:	f002 fbb9 	bl	8009148 <acc_element_abs_init>
 80069d6:	f504 7351 	add.w	r3, r4, #836	; 0x344
 80069da:	2202      	movs	r2, #2
 80069dc:	2104      	movs	r1, #4
 80069de:	4640      	mov	r0, r8
 80069e0:	461f      	mov	r7, r3
 80069e2:	ee0a 3a10 	vmov	s20, r3
 80069e6:	f002 fce1 	bl	80093ac <acc_element_converter_init>
 80069ea:	9a03      	ldr	r2, [sp, #12]
 80069ec:	4638      	mov	r0, r7
 80069ee:	6811      	ldr	r1, [r2, #0]
 80069f0:	f002 f958 	bl	8008ca4 <acc_element_sink_callback_init>
 80069f4:	ee18 0a10 	vmov	r0, s16
 80069f8:	4651      	mov	r1, sl
 80069fa:	f002 f8a1 	bl	8008b40 <acc_element_connect>
 80069fe:	4650      	mov	r0, sl
 8006a00:	ee19 1a90 	vmov	r1, s19
 8006a04:	f002 f89c 	bl	8008b40 <acc_element_connect>
 8006a08:	4628      	mov	r0, r5
 8006a0a:	f7ff fbf7 	bl	80061fc <acc_base_configuration_noise_level_normalization_get>
 8006a0e:	2800      	cmp	r0, #0
 8006a10:	d07a      	beq.n	8006b08 <acc_pipeline_envelope_assemble+0x3f4>
 8006a12:	f104 0af4 	add.w	sl, r4, #244	; 0xf4
 8006a16:	ee19 0a90 	vmov	r0, s19
 8006a1a:	4651      	mov	r1, sl
 8006a1c:	f002 f890 	bl	8008b40 <acc_element_connect>
 8006a20:	ee18 1a90 	vmov	r1, s17
 8006a24:	4650      	mov	r0, sl
 8006a26:	f002 f88b 	bl	8008b40 <acc_element_connect>
 8006a2a:	ee18 0a90 	vmov	r0, s17
 8006a2e:	ee1a 1a90 	vmov	r1, s21
 8006a32:	f002 f885 	bl	8008b40 <acc_element_connect>
 8006a36:	ee1b 1a10 	vmov	r1, s22
 8006a3a:	ee1a 0a90 	vmov	r0, s21
 8006a3e:	f002 f87f 	bl	8008b40 <acc_element_connect>
 8006a42:	ee19 1a10 	vmov	r1, s18
 8006a46:	ee1b 0a10 	vmov	r0, s22
 8006a4a:	f002 f879 	bl	8008b40 <acc_element_connect>
 8006a4e:	ee19 0a10 	vmov	r0, s18
 8006a52:	4659      	mov	r1, fp
 8006a54:	f002 f874 	bl	8008b40 <acc_element_connect>
 8006a58:	4628      	mov	r0, r5
 8006a5a:	2100      	movs	r1, #0
 8006a5c:	f7ff fa7a 	bl	8005f54 <acc_base_configuration_time_domain_low_pass_filter_alpha_get>
 8006a60:	2800      	cmp	r0, #0
 8006a62:	d04c      	beq.n	8006afe <acc_pipeline_envelope_assemble+0x3ea>
 8006a64:	f504 7523 	add.w	r5, r4, #652	; 0x28c
 8006a68:	4658      	mov	r0, fp
 8006a6a:	4629      	mov	r1, r5
 8006a6c:	f002 f868 	bl	8008b40 <acc_element_connect>
 8006a70:	4649      	mov	r1, r9
 8006a72:	4628      	mov	r0, r5
 8006a74:	f002 f864 	bl	8008b40 <acc_element_connect>
 8006a78:	4648      	mov	r0, r9
 8006a7a:	4641      	mov	r1, r8
 8006a7c:	f002 f860 	bl	8008b40 <acc_element_connect>
 8006a80:	ee1a 1a10 	vmov	r1, s20
 8006a84:	4640      	mov	r0, r8
 8006a86:	f002 f85b 	bl	8008b40 <acc_element_connect>
 8006a8a:	ee18 0a10 	vmov	r0, s16
 8006a8e:	f003 f8a1 	bl	8009bd4 <acc_element_source_adc_validate>
 8006a92:	4605      	mov	r5, r0
 8006a94:	2800      	cmp	r0, #0
 8006a96:	d055      	beq.n	8006b44 <acc_pipeline_envelope_assemble+0x430>
 8006a98:	ee18 0a10 	vmov	r0, s16
 8006a9c:	f003 f896 	bl	8009bcc <acc_element_source_adc_reset>
 8006aa0:	9804      	ldr	r0, [sp, #16]
 8006aa2:	4909      	ldr	r1, [pc, #36]	; (8006ac8 <acc_pipeline_envelope_assemble+0x3b4>)
 8006aa4:	4a09      	ldr	r2, [pc, #36]	; (8006acc <acc_pipeline_envelope_assemble+0x3b8>)
 8006aa6:	4b0a      	ldr	r3, [pc, #40]	; (8006ad0 <acc_pipeline_envelope_assemble+0x3bc>)
 8006aa8:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 8006aac:	4630      	mov	r0, r6
 8006aae:	e9c6 1201 	strd	r1, r2, [r6, #4]
 8006ab2:	60f3      	str	r3, [r6, #12]
 8006ab4:	b00b      	add	sp, #44	; 0x2c
 8006ab6:	ecbd 8b08 	vpop	{d8-d11}
 8006aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006abe:	bf00      	nop
 8006ac0:	080135f8 	.word	0x080135f8
 8006ac4:	00000000 	.word	0x00000000
 8006ac8:	080066ed 	.word	0x080066ed
 8006acc:	080066bd 	.word	0x080066bd
 8006ad0:	080066c5 	.word	0x080066c5
 8006ad4:	4630      	mov	r0, r6
 8006ad6:	f7ff fdf5 	bl	80066c4 <disassemble>
 8006ada:	464e      	mov	r6, r9
 8006adc:	4630      	mov	r0, r6
 8006ade:	b00b      	add	sp, #44	; 0x2c
 8006ae0:	ecbd 8b08 	vpop	{d8-d11}
 8006ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ae8:	f8b4 238a 	ldrh.w	r2, [r4, #906]	; 0x38a
 8006aec:	9205      	str	r2, [sp, #20]
 8006aee:	2007      	movs	r0, #7
 8006af0:	f002 f81a 	bl	8008b28 <acc_element_sizeof>
 8006af4:	9a05      	ldr	r2, [sp, #20]
 8006af6:	fb00 9202 	mla	r2, r0, r2, r9
 8006afa:	4611      	mov	r1, r2
 8006afc:	e69c      	b.n	8006838 <acc_pipeline_envelope_assemble+0x124>
 8006afe:	4658      	mov	r0, fp
 8006b00:	4649      	mov	r1, r9
 8006b02:	f002 f81d 	bl	8008b40 <acc_element_connect>
 8006b06:	e7b7      	b.n	8006a78 <acc_pipeline_envelope_assemble+0x364>
 8006b08:	ee19 0a90 	vmov	r0, s19
 8006b0c:	ee18 1a90 	vmov	r1, s17
 8006b10:	f002 f816 	bl	8008b40 <acc_element_connect>
 8006b14:	e789      	b.n	8006a2a <acc_pipeline_envelope_assemble+0x316>
 8006b16:	ed9d 0a09 	vldr	s0, [sp, #36]	; 0x24
 8006b1a:	2107      	movs	r1, #7
 8006b1c:	f504 7023 	add.w	r0, r4, #652	; 0x28c
 8006b20:	f003 f806 	bl	8009b30 <acc_element_time_domain_low_pass_filter_init>
 8006b24:	e74f      	b.n	80069c6 <acc_pipeline_envelope_assemble+0x2b2>
 8006b26:	4628      	mov	r0, r5
 8006b28:	f7ff fbae 	bl	8006288 <acc_base_configuration_maximize_signal_attenuation_get>
 8006b2c:	2800      	cmp	r0, #0
 8006b2e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8006b30:	bf14      	ite	ne
 8006b32:	231e      	movne	r3, #30
 8006b34:	f44f 7396 	moveq.w	r3, #300	; 0x12c
 8006b38:	2105      	movs	r1, #5
 8006b3a:	f104 00f4 	add.w	r0, r4, #244	; 0xf4
 8006b3e:	f002 fe83 	bl	8009848 <acc_element_noise_level_normalization_init>
 8006b42:	e6f6      	b.n	8006932 <acc_pipeline_envelope_assemble+0x21e>
 8006b44:	4b0d      	ldr	r3, [pc, #52]	; (8006b7c <acc_pipeline_envelope_assemble+0x468>)
 8006b46:	4a0e      	ldr	r2, [pc, #56]	; (8006b80 <acc_pipeline_envelope_assemble+0x46c>)
 8006b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b4a:	490e      	ldr	r1, [pc, #56]	; (8006b84 <acc_pipeline_envelope_assemble+0x470>)
 8006b4c:	4798      	blx	r3
 8006b4e:	4630      	mov	r0, r6
 8006b50:	f7ff fdb8 	bl	80066c4 <disassemble>
 8006b54:	462e      	mov	r6, r5
 8006b56:	4630      	mov	r0, r6
 8006b58:	b00b      	add	sp, #44	; 0x2c
 8006b5a:	ecbd 8b08 	vpop	{d8-d11}
 8006b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b62:	4630      	mov	r0, r6
 8006b64:	f7ff fd92 	bl	800668c <acc_rss_integration_mem_free>
 8006b68:	4620      	mov	r0, r4
 8006b6a:	f7ff fd8f 	bl	800668c <acc_rss_integration_mem_free>
 8006b6e:	2600      	movs	r6, #0
 8006b70:	4630      	mov	r0, r6
 8006b72:	b00b      	add	sp, #44	; 0x2c
 8006b74:	ecbd 8b08 	vpop	{d8-d11}
 8006b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b7c:	20000640 	.word	0x20000640
 8006b80:	0801360c 	.word	0x0801360c
 8006b84:	080135f8 	.word	0x080135f8

08006b88 <destroy>:
 8006b88:	b510      	push	{r4, lr}
 8006b8a:	4604      	mov	r4, r0
 8006b8c:	6940      	ldr	r0, [r0, #20]
 8006b8e:	b118      	cbz	r0, 8006b98 <destroy+0x10>
 8006b90:	f7ff fd7c 	bl	800668c <acc_rss_integration_mem_free>
 8006b94:	2300      	movs	r3, #0
 8006b96:	6163      	str	r3, [r4, #20]
 8006b98:	bd10      	pop	{r4, pc}
 8006b9a:	bf00      	nop

08006b9c <process_data>:
 8006b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ba0:	6944      	ldr	r4, [r0, #20]
 8006ba2:	f8b4 70ce 	ldrh.w	r7, [r4, #206]	; 0xce
 8006ba6:	b917      	cbnz	r7, 8006bae <process_data+0x12>
 8006ba8:	2001      	movs	r0, #1
 8006baa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bae:	f8b4 c0c8 	ldrh.w	ip, [r4, #200]	; 0xc8
 8006bb2:	f8b4 80c4 	ldrh.w	r8, [r4, #196]	; 0xc4
 8006bb6:	f8b4 e0cc 	ldrh.w	lr, [r4, #204]	; 0xcc
 8006bba:	461d      	mov	r5, r3
 8006bbc:	4616      	mov	r6, r2
 8006bbe:	237c      	movs	r3, #124	; 0x7c
 8006bc0:	680a      	ldr	r2, [r1, #0]
 8006bc2:	fbb3 f3fe 	udiv	r3, r3, lr
 8006bc6:	fb03 f30c 	mul.w	r3, r3, ip
 8006bca:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 8006bce:	eb02 0803 	add.w	r8, r2, r3
 8006bd2:	4642      	mov	r2, r8
 8006bd4:	6801      	ldr	r1, [r0, #0]
 8006bd6:	463b      	mov	r3, r7
 8006bd8:	2001      	movs	r0, #1
 8006bda:	f002 f875 	bl	8008cc8 <acc_probes_execute_uint16>
 8006bde:	f8b4 10ce 	ldrh.w	r1, [r4, #206]	; 0xce
 8006be2:	4640      	mov	r0, r8
 8006be4:	f001 ff5a 	bl	8008a9c <acc_alg_cca_u16_calculate>
 8006be8:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8006c24 <process_data+0x88>
 8006bec:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006bee:	ed85 0a01 	vstr	s0, [r5, #4]
 8006bf2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8006bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bfa:	bfcc      	ite	gt
 8006bfc:	2201      	movgt	r2, #1
 8006bfe:	2200      	movle	r2, #0
 8006c00:	702a      	strb	r2, [r5, #0]
 8006c02:	b14b      	cbz	r3, 8006c18 <process_data+0x7c>
 8006c04:	2200      	movs	r2, #0
 8006c06:	f8b4 10ce 	ldrh.w	r1, [r4, #206]	; 0xce
 8006c0a:	6833      	ldr	r3, [r6, #0]
 8006c0c:	722a      	strb	r2, [r5, #8]
 8006c0e:	1a5b      	subs	r3, r3, r1
 8006c10:	6033      	str	r3, [r6, #0]
 8006c12:	2001      	movs	r0, #1
 8006c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c18:	f894 20c0 	ldrb.w	r2, [r4, #192]	; 0xc0
 8006c1c:	f082 0201 	eor.w	r2, r2, #1
 8006c20:	e7f1      	b.n	8006c06 <process_data+0x6a>
 8006c22:	bf00      	nop
 8006c24:	42640000 	.word	0x42640000

08006c28 <transfer_data>:
 8006c28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006c2c:	6944      	ldr	r4, [r0, #20]
 8006c2e:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
 8006c32:	b089      	sub	sp, #36	; 0x24
 8006c34:	4680      	mov	r8, r0
 8006c36:	460f      	mov	r7, r1
 8006c38:	4691      	mov	r9, r2
 8006c3a:	b90b      	cbnz	r3, 8006c40 <transfer_data+0x18>
 8006c3c:	f8a4 30c6 	strh.w	r3, [r4, #198]	; 0xc6
 8006c40:	f8b4 20ce 	ldrh.w	r2, [r4, #206]	; 0xce
 8006c44:	f8b4 50c8 	ldrh.w	r5, [r4, #200]	; 0xc8
 8006c48:	f8b4 30cc 	ldrh.w	r3, [r4, #204]	; 0xcc
 8006c4c:	a902      	add	r1, sp, #8
 8006c4e:	4620      	mov	r0, r4
 8006c50:	267c      	movs	r6, #124	; 0x7c
 8006c52:	fbb6 f3f3 	udiv	r3, r6, r3
 8006c56:	fb03 2505 	mla	r5, r3, r5, r2
 8006c5a:	f005 f925 	bl	800bea8 <acc_cpd_linear_sweep_get_info>
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	9a02      	ldr	r2, [sp, #8]
 8006c62:	f8b4 10c6 	ldrh.w	r1, [r4, #198]	; 0xc6
 8006c66:	f8d8 0000 	ldr.w	r0, [r8]
 8006c6a:	442a      	add	r2, r5
 8006c6c:	4419      	add	r1, r3
 8006c6e:	f001 fdd7 	bl	8008820 <acc_sensor_protocol_r2_transfer_data>
 8006c72:	f104 02bc 	add.w	r2, r4, #188	; 0xbc
 8006c76:	ab01      	add	r3, sp, #4
 8006c78:	4621      	mov	r1, r4
 8006c7a:	4680      	mov	r8, r0
 8006c7c:	f005 f92c 	bl	800bed8 <acc_cpd_linear_sweep_check>
 8006c80:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006c84:	3b00      	subs	r3, #0
 8006c86:	bf18      	it	ne
 8006c88:	2301      	movne	r3, #1
 8006c8a:	a902      	add	r1, sp, #8
 8006c8c:	f889 3000 	strb.w	r3, [r9]
 8006c90:	4620      	mov	r0, r4
 8006c92:	f005 f909 	bl	800bea8 <acc_cpd_linear_sweep_get_info>
 8006c96:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
 8006c9a:	6838      	ldr	r0, [r7, #0]
 8006c9c:	9902      	ldr	r1, [sp, #8]
 8006c9e:	006a      	lsls	r2, r5, #1
 8006ca0:	eb08 0141 	add.w	r1, r8, r1, lsl #1
 8006ca4:	4418      	add	r0, r3
 8006ca6:	f007 fe2b 	bl	800e900 <memmove>
 8006caa:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
 8006cae:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
 8006cb2:	f8b4 10cc 	ldrh.w	r1, [r4, #204]	; 0xcc
 8006cb6:	fbb6 f6f1 	udiv	r6, r6, r1
 8006cba:	fb03 f306 	mul.w	r3, r3, r6
 8006cbe:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8006cc2:	4628      	mov	r0, r5
 8006cc4:	f8a4 30c6 	strh.w	r3, [r4, #198]	; 0xc6
 8006cc8:	f8a4 20c4 	strh.w	r2, [r4, #196]	; 0xc4
 8006ccc:	b009      	add	sp, #36	; 0x24
 8006cce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006cd2:	bf00      	nop

08006cd4 <measure_noise>:
 8006cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cd8:	b0b7      	sub	sp, #220	; 0xdc
 8006cda:	4604      	mov	r4, r0
 8006cdc:	4688      	mov	r8, r1
 8006cde:	4616      	mov	r6, r2
 8006ce0:	f7ff fce6 	bl	80066b0 <acc_rss_integration_log_level>
 8006ce4:	2803      	cmp	r0, #3
 8006ce6:	d905      	bls.n	8006cf4 <measure_noise+0x20>
 8006ce8:	4b41      	ldr	r3, [pc, #260]	; (8006df0 <measure_noise+0x11c>)
 8006cea:	4a42      	ldr	r2, [pc, #264]	; (8006df4 <measure_noise+0x120>)
 8006cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cee:	4942      	ldr	r1, [pc, #264]	; (8006df8 <measure_noise+0x124>)
 8006cf0:	2004      	movs	r0, #4
 8006cf2:	4798      	blx	r3
 8006cf4:	f8d4 9014 	ldr.w	r9, [r4, #20]
 8006cf8:	f8d4 a000 	ldr.w	sl, [r4]
 8006cfc:	4649      	mov	r1, r9
 8006cfe:	22bc      	movs	r2, #188	; 0xbc
 8006d00:	a807      	add	r0, sp, #28
 8006d02:	f007 fea5 	bl	800ea50 <memcpy>
 8006d06:	9d30      	ldr	r5, [sp, #192]	; 0xc0
 8006d08:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8006d0c:	f8d8 1000 	ldr.w	r1, [r8]
 8006d10:	f8b9 b0cc 	ldrh.w	fp, [r9, #204]	; 0xcc
 8006d14:	00ad      	lsls	r5, r5, #2
 8006d16:	1e6f      	subs	r7, r5, #1
 8006d18:	972c      	str	r7, [sp, #176]	; 0xb0
 8006d1a:	2702      	movs	r7, #2
 8006d1c:	2400      	movs	r4, #0
 8006d1e:	ab07      	add	r3, sp, #28
 8006d20:	972d      	str	r7, [sp, #180]	; 0xb4
 8006d22:	4650      	mov	r0, sl
 8006d24:	2701      	movs	r7, #1
 8006d26:	971d      	str	r7, [sp, #116]	; 0x74
 8006d28:	9422      	str	r4, [sp, #136]	; 0x88
 8006d2a:	941c      	str	r4, [sp, #112]	; 0x70
 8006d2c:	f88d 40c8 	strb.w	r4, [sp, #200]	; 0xc8
 8006d30:	9434      	str	r4, [sp, #208]	; 0xd0
 8006d32:	f004 fb2b 	bl	800b38c <acc_cpd_linear_sweep_load_program>
 8006d36:	4650      	mov	r0, sl
 8006d38:	f005 f860 	bl	800bdfc <acc_cpd_linear_sweep_run_program>
 8006d3c:	4650      	mov	r0, sl
 8006d3e:	466b      	mov	r3, sp
 8006d40:	2264      	movs	r2, #100	; 0x64
 8006d42:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006d46:	f001 fc21 	bl	800858c <acc_sensor_protocol_r2_wait_for_event>
 8006d4a:	4607      	mov	r7, r0
 8006d4c:	b918      	cbnz	r0, 8006d56 <measure_noise+0x82>
 8006d4e:	4638      	mov	r0, r7
 8006d50:	b037      	add	sp, #220	; 0xdc
 8006d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d56:	a901      	add	r1, sp, #4
 8006d58:	4648      	mov	r0, r9
 8006d5a:	237c      	movs	r3, #124	; 0x7c
 8006d5c:	f8d8 8000 	ldr.w	r8, [r8]
 8006d60:	fbb3 fbfb 	udiv	fp, r3, fp
 8006d64:	b2ad      	uxth	r5, r5
 8006d66:	f005 f89f 	bl	800bea8 <acc_cpd_linear_sweep_get_info>
 8006d6a:	9a01      	ldr	r2, [sp, #4]
 8006d6c:	fb0b f505 	mul.w	r5, fp, r5
 8006d70:	4641      	mov	r1, r8
 8006d72:	442a      	add	r2, r5
 8006d74:	4650      	mov	r0, sl
 8006d76:	f001 fd53 	bl	8008820 <acc_sensor_protocol_r2_transfer_data>
 8006d7a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006d7e:	4680      	mov	r8, r0
 8006d80:	4650      	mov	r0, sl
 8006d82:	f001 fc9b 	bl	80086bc <acc_sensor_protocol_r2_stop>
 8006d86:	4648      	mov	r0, r9
 8006d88:	a901      	add	r1, sp, #4
 8006d8a:	f005 f88d 	bl	800bea8 <acc_cpd_linear_sweep_get_info>
 8006d8e:	9801      	ldr	r0, [sp, #4]
 8006d90:	2d0e      	cmp	r5, #14
 8006d92:	eb08 0040 	add.w	r0, r8, r0, lsl #1
 8006d96:	d91c      	bls.n	8006dd2 <measure_noise+0xfe>
 8006d98:	006a      	lsls	r2, r5, #1
 8006d9a:	3a02      	subs	r2, #2
 8006d9c:	f100 011a 	add.w	r1, r0, #26
 8006da0:	eb00 0e02 	add.w	lr, r0, r2
 8006da4:	460b      	mov	r3, r1
 8006da6:	f833 cf02 	ldrh.w	ip, [r3, #2]!
 8006daa:	459e      	cmp	lr, r3
 8006dac:	4464      	add	r4, ip
 8006dae:	d1fa      	bne.n	8006da6 <measure_noise+0xd2>
 8006db0:	4410      	add	r0, r2
 8006db2:	2200      	movs	r2, #0
 8006db4:	3d0e      	subs	r5, #14
 8006db6:	fbb4 f4f5 	udiv	r4, r4, r5
 8006dba:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 8006dbe:	1b1b      	subs	r3, r3, r4
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	bfb8      	it	lt
 8006dc4:	425b      	neglt	r3, r3
 8006dc6:	4288      	cmp	r0, r1
 8006dc8:	441a      	add	r2, r3
 8006dca:	d1f6      	bne.n	8006dba <measure_noise+0xe6>
 8006dcc:	fbb2 f4f5 	udiv	r4, r2, r5
 8006dd0:	b2a4      	uxth	r4, r4
 8006dd2:	8034      	strh	r4, [r6, #0]
 8006dd4:	f7ff fc6c 	bl	80066b0 <acc_rss_integration_log_level>
 8006dd8:	2803      	cmp	r0, #3
 8006dda:	d9b8      	bls.n	8006d4e <measure_noise+0x7a>
 8006ddc:	4b04      	ldr	r3, [pc, #16]	; (8006df0 <measure_noise+0x11c>)
 8006dde:	4a07      	ldr	r2, [pc, #28]	; (8006dfc <measure_noise+0x128>)
 8006de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006de2:	4905      	ldr	r1, [pc, #20]	; (8006df8 <measure_noise+0x124>)
 8006de4:	2004      	movs	r0, #4
 8006de6:	4798      	blx	r3
 8006de8:	4638      	mov	r0, r7
 8006dea:	b037      	add	sp, #220	; 0xdc
 8006dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006df0:	20000640 	.word	0x20000640
 8006df4:	0801362c 	.word	0x0801362c
 8006df8:	08013650 	.word	0x08013650
 8006dfc:	08013664 	.word	0x08013664

08006e00 <calibrate>:
 8006e00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006e04:	b09b      	sub	sp, #108	; 0x6c
 8006e06:	4604      	mov	r4, r0
 8006e08:	460d      	mov	r5, r1
 8006e0a:	4616      	mov	r6, r2
 8006e0c:	461f      	mov	r7, r3
 8006e0e:	f7ff fc4f 	bl	80066b0 <acc_rss_integration_log_level>
 8006e12:	2803      	cmp	r0, #3
 8006e14:	d905      	bls.n	8006e22 <calibrate+0x22>
 8006e16:	4b46      	ldr	r3, [pc, #280]	; (8006f30 <calibrate+0x130>)
 8006e18:	4a46      	ldr	r2, [pc, #280]	; (8006f34 <calibrate+0x134>)
 8006e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e1c:	4946      	ldr	r1, [pc, #280]	; (8006f38 <calibrate+0x138>)
 8006e1e:	2004      	movs	r0, #4
 8006e20:	4798      	blx	r3
 8006e22:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8006e26:	6824      	ldr	r4, [r4, #0]
 8006e28:	2300      	movs	r3, #0
 8006e2a:	f8c8 30bc 	str.w	r3, [r8, #188]	; 0xbc
 8006e2e:	f7ff fb8f 	bl	8006550 <acc_rss_integration_get_sensor_reference_frequency>
 8006e32:	a812      	add	r0, sp, #72	; 0x48
 8006e34:	a902      	add	r1, sp, #8
 8006e36:	ed8d 0a12 	vstr	s0, [sp, #72]	; 0x48
 8006e3a:	f001 fffb 	bl	8008e34 <acc_cpd_pll_divisors_calculate>
 8006e3e:	b920      	cbnz	r0, 8006e4a <calibrate+0x4a>
 8006e40:	2400      	movs	r4, #0
 8006e42:	4620      	mov	r0, r4
 8006e44:	b01b      	add	sp, #108	; 0x6c
 8006e46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006e4a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8006e4e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8006e52:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8006e56:	f8bd c010 	ldrh.w	ip, [sp, #16]
 8006e5a:	9207      	str	r2, [sp, #28]
 8006e5c:	e9cd 4305 	strd	r4, r3, [sp, #20]
 8006e60:	9008      	str	r0, [sp, #32]
 8006e62:	6869      	ldr	r1, [r5, #4]
 8006e64:	6828      	ldr	r0, [r5, #0]
 8006e66:	f8ad c024 	strh.w	ip, [sp, #36]	; 0x24
 8006e6a:	466b      	mov	r3, sp
 8006e6c:	aa05      	add	r2, sp, #20
 8006e6e:	f002 ff0d 	bl	8009c8c <acc_cpd_cbank_and_vana_calibration>
 8006e72:	2800      	cmp	r0, #0
 8006e74:	d0e4      	beq.n	8006e40 <calibrate+0x40>
 8006e76:	f8b8 90ce 	ldrh.w	r9, [r8, #206]	; 0xce
 8006e7a:	f898 10d0 	ldrb.w	r1, [r8, #208]	; 0xd0
 8006e7e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8006e82:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
 8006e86:	f1b9 0000 	subs.w	r0, r9, #0
 8006e8a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8006e8e:	920b      	str	r2, [sp, #44]	; 0x2c
 8006e90:	bf18      	it	ne
 8006e92:	2001      	movne	r0, #1
 8006e94:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8006e98:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
 8006e9c:	910c      	str	r1, [sp, #48]	; 0x30
 8006e9e:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8006ea2:	9900      	ldr	r1, [sp, #0]
 8006ea4:	940a      	str	r4, [sp, #40]	; 0x28
 8006ea6:	900d      	str	r0, [sp, #52]	; 0x34
 8006ea8:	f89d 4004 	ldrb.w	r4, [sp, #4]
 8006eac:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8006eb0:	910f      	str	r1, [sp, #60]	; 0x3c
 8006eb2:	ab12      	add	r3, sp, #72	; 0x48
 8006eb4:	e9d5 0100 	ldrd	r0, r1, [r5]
 8006eb8:	aa0a      	add	r2, sp, #40	; 0x28
 8006eba:	9410      	str	r4, [sp, #64]	; 0x40
 8006ebc:	f8ad 9046 	strh.w	r9, [sp, #70]	; 0x46
 8006ec0:	f003 f936 	bl	800a130 <acc_cpd_dll_calibration>
 8006ec4:	4604      	mov	r4, r0
 8006ec6:	f1b9 0f00 	cmp.w	r9, #0
 8006eca:	d004      	beq.n	8006ed6 <calibrate+0xd6>
 8006ecc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006ece:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
 8006ed2:	607a      	str	r2, [r7, #4]
 8006ed4:	703b      	strb	r3, [r7, #0]
 8006ed6:	2c00      	cmp	r4, #0
 8006ed8:	d0b2      	beq.n	8006e40 <calibrate+0x40>
 8006eda:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	; 0x48
 8006ede:	9b00      	ldr	r3, [sp, #0]
 8006ee0:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8006ee4:	80b3      	strh	r3, [r6, #4]
 8006ee6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006ee8:	80f0      	strh	r0, [r6, #6]
 8006eea:	8131      	strh	r1, [r6, #8]
 8006eec:	f8bd 0054 	ldrh.w	r0, [sp, #84]	; 0x54
 8006ef0:	f8bd 1056 	ldrh.w	r1, [sp, #86]	; 0x56
 8006ef4:	8172      	strh	r2, [r6, #10]
 8006ef6:	81b3      	strh	r3, [r6, #12]
 8006ef8:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
 8006efc:	81f0      	strh	r0, [r6, #14]
 8006efe:	2306      	movs	r3, #6
 8006f00:	8231      	strh	r1, [r6, #16]
 8006f02:	8272      	strh	r2, [r6, #18]
 8006f04:	6033      	str	r3, [r6, #0]
 8006f06:	f7ff fbd3 	bl	80066b0 <acc_rss_integration_log_level>
 8006f0a:	2803      	cmp	r0, #3
 8006f0c:	d905      	bls.n	8006f1a <calibrate+0x11a>
 8006f0e:	4b08      	ldr	r3, [pc, #32]	; (8006f30 <calibrate+0x130>)
 8006f10:	4a0a      	ldr	r2, [pc, #40]	; (8006f3c <calibrate+0x13c>)
 8006f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f14:	4908      	ldr	r1, [pc, #32]	; (8006f38 <calibrate+0x138>)
 8006f16:	2004      	movs	r0, #4
 8006f18:	4798      	blx	r3
 8006f1a:	f7ff fbc9 	bl	80066b0 <acc_rss_integration_log_level>
 8006f1e:	2801      	cmp	r0, #1
 8006f20:	d98f      	bls.n	8006e42 <calibrate+0x42>
 8006f22:	4b03      	ldr	r3, [pc, #12]	; (8006f30 <calibrate+0x130>)
 8006f24:	4a06      	ldr	r2, [pc, #24]	; (8006f40 <calibrate+0x140>)
 8006f26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f28:	4903      	ldr	r1, [pc, #12]	; (8006f38 <calibrate+0x138>)
 8006f2a:	2002      	movs	r0, #2
 8006f2c:	4798      	blx	r3
 8006f2e:	e788      	b.n	8006e42 <calibrate+0x42>
 8006f30:	20000640 	.word	0x20000640
 8006f34:	08013684 	.word	0x08013684
 8006f38:	08013650 	.word	0x08013650
 8006f3c:	080136a4 	.word	0x080136a4
 8006f40:	080136c0 	.word	0x080136c0

08006f44 <set_calibration_context>:
 8006f44:	b570      	push	{r4, r5, r6, lr}
 8006f46:	680b      	ldr	r3, [r1, #0]
 8006f48:	2b06      	cmp	r3, #6
 8006f4a:	b08c      	sub	sp, #48	; 0x30
 8006f4c:	d00b      	beq.n	8006f66 <set_calibration_context+0x22>
 8006f4e:	4929      	ldr	r1, [pc, #164]	; (8006ff4 <set_calibration_context+0xb0>)
 8006f50:	4a29      	ldr	r2, [pc, #164]	; (8006ff8 <set_calibration_context+0xb4>)
 8006f52:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 8006f54:	4929      	ldr	r1, [pc, #164]	; (8006ffc <set_calibration_context+0xb8>)
 8006f56:	2006      	movs	r0, #6
 8006f58:	9000      	str	r0, [sp, #0]
 8006f5a:	2000      	movs	r0, #0
 8006f5c:	47a0      	blx	r4
 8006f5e:	2600      	movs	r6, #0
 8006f60:	4630      	mov	r0, r6
 8006f62:	b00c      	add	sp, #48	; 0x30
 8006f64:	bd70      	pop	{r4, r5, r6, pc}
 8006f66:	460d      	mov	r5, r1
 8006f68:	4604      	mov	r4, r0
 8006f6a:	f7ff faf1 	bl	8006550 <acc_rss_integration_get_sensor_reference_frequency>
 8006f6e:	a806      	add	r0, sp, #24
 8006f70:	a903      	add	r1, sp, #12
 8006f72:	ed8d 0a06 	vstr	s0, [sp, #24]
 8006f76:	f001 ff5d 	bl	8008e34 <acc_cpd_pll_divisors_calculate>
 8006f7a:	4606      	mov	r6, r0
 8006f7c:	2800      	cmp	r0, #0
 8006f7e:	d0ef      	beq.n	8006f60 <set_calibration_context+0x1c>
 8006f80:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8006f84:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8006f88:	6063      	str	r3, [r4, #4]
 8006f8a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8006f8e:	60a2      	str	r2, [r4, #8]
 8006f90:	6023      	str	r3, [r4, #0]
 8006f92:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8006f96:	88ab      	ldrh	r3, [r5, #4]
 8006f98:	81a2      	strh	r2, [r4, #12]
 8006f9a:	88ea      	ldrh	r2, [r5, #6]
 8006f9c:	6123      	str	r3, [r4, #16]
 8006f9e:	892b      	ldrh	r3, [r5, #8]
 8006fa0:	6162      	str	r2, [r4, #20]
 8006fa2:	896a      	ldrh	r2, [r5, #10]
 8006fa4:	61a3      	str	r3, [r4, #24]
 8006fa6:	89ab      	ldrh	r3, [r5, #12]
 8006fa8:	61e2      	str	r2, [r4, #28]
 8006faa:	8a2a      	ldrh	r2, [r5, #16]
 8006fac:	6223      	str	r3, [r4, #32]
 8006fae:	8a6b      	ldrh	r3, [r5, #18]
 8006fb0:	89e8      	ldrh	r0, [r5, #14]
 8006fb2:	84a2      	strh	r2, [r4, #36]	; 0x24
 8006fb4:	84e3      	strh	r3, [r4, #38]	; 0x26
 8006fb6:	aa06      	add	r2, sp, #24
 8006fb8:	217c      	movs	r1, #124	; 0x7c
 8006fba:	f002 f821 	bl	8009000 <acc_dll_calculate_area_settings>
 8006fbe:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 8006fc2:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 8006fc6:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8006fca:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8006fce:	62a0      	str	r0, [r4, #40]	; 0x28
 8006fd0:	62e1      	str	r1, [r4, #44]	; 0x2c
 8006fd2:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
 8006fd6:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8006fda:	6322      	str	r2, [r4, #48]	; 0x30
 8006fdc:	6363      	str	r3, [r4, #52]	; 0x34
 8006fde:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8006fe2:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8006fe6:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
 8006fea:	4630      	mov	r0, r6
 8006fec:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
 8006ff0:	b00c      	add	sp, #48	; 0x30
 8006ff2:	bd70      	pop	{r4, r5, r6, pc}
 8006ff4:	20000640 	.word	0x20000640
 8006ff8:	080136e0 	.word	0x080136e0
 8006ffc:	08013650 	.word	0x08013650

08007000 <get_package_range_coarse_max>:
 8007000:	b530      	push	{r4, r5, lr}
 8007002:	f8b0 50cc 	ldrh.w	r5, [r0, #204]	; 0xcc
 8007006:	b087      	sub	sp, #28
 8007008:	b185      	cbz	r5, 800702c <get_package_range_coarse_max+0x2c>
 800700a:	4604      	mov	r4, r0
 800700c:	4669      	mov	r1, sp
 800700e:	f004 ff4b 	bl	800bea8 <acc_cpd_linear_sweep_get_info>
 8007012:	9b00      	ldr	r3, [sp, #0]
 8007014:	f8b4 00ce 	ldrh.w	r0, [r4, #206]	; 0xce
 8007018:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 800701c:	1a1b      	subs	r3, r3, r0
 800701e:	207c      	movs	r0, #124	; 0x7c
 8007020:	fbb0 f0f5 	udiv	r0, r0, r5
 8007024:	fbb3 f0f0 	udiv	r0, r3, r0
 8007028:	b007      	add	sp, #28
 800702a:	bd30      	pop	{r4, r5, pc}
 800702c:	4802      	ldr	r0, [pc, #8]	; (8007038 <get_package_range_coarse_max+0x38>)
 800702e:	f44f 71a9 	mov.w	r1, #338	; 0x152
 8007032:	f001 fd61 	bl	8008af8 <acc_assert_fail>
 8007036:	bf00      	nop
 8007038:	08013650 	.word	0x08013650

0800703c <initialize>:
 800703c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007040:	460d      	mov	r5, r1
 8007042:	f891 1032 	ldrb.w	r1, [r1, #50]	; 0x32
 8007046:	2906      	cmp	r1, #6
 8007048:	b08f      	sub	sp, #60	; 0x3c
 800704a:	4606      	mov	r6, r0
 800704c:	4690      	mov	r8, r2
 800704e:	461f      	mov	r7, r3
 8007050:	d00d      	beq.n	800706e <initialize+0x32>
 8007052:	2909      	cmp	r1, #9
 8007054:	d00b      	beq.n	800706e <initialize+0x32>
 8007056:	4ba8      	ldr	r3, [pc, #672]	; (80072f8 <initialize+0x2bc>)
 8007058:	4aa8      	ldr	r2, [pc, #672]	; (80072fc <initialize+0x2c0>)
 800705a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800705c:	49a8      	ldr	r1, [pc, #672]	; (8007300 <initialize+0x2c4>)
 800705e:	2000      	movs	r0, #0
 8007060:	4798      	blx	r3
 8007062:	f04f 0900 	mov.w	r9, #0
 8007066:	4648      	mov	r0, r9
 8007068:	b00f      	add	sp, #60	; 0x3c
 800706a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800706e:	aa06      	add	r2, sp, #24
 8007070:	f10d 0116 	add.w	r1, sp, #22
 8007074:	4628      	mov	r0, r5
 8007076:	6974      	ldr	r4, [r6, #20]
 8007078:	f7ff f91a 	bl	80062b0 <acc_base_configuration_cca_get>
 800707c:	2800      	cmp	r0, #0
 800707e:	d03f      	beq.n	8007100 <initialize+0xc4>
 8007080:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8007084:	f89d 0016 	ldrb.w	r0, [sp, #22]
 8007088:	f8a4 30ce 	strh.w	r3, [r4, #206]	; 0xce
 800708c:	f884 00d0 	strb.w	r0, [r4, #208]	; 0xd0
 8007090:	4628      	mov	r0, r5
 8007092:	f7ff f89f 	bl	80061d4 <acc_base_configuration_downsampling_factor_get>
 8007096:	2300      	movs	r3, #0
 8007098:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
 800709c:	f8a4 00cc 	strh.w	r0, [r4, #204]	; 0xcc
 80070a0:	4628      	mov	r0, r5
 80070a2:	f7fe fef9 	bl	8005e98 <acc_base_configuration_tx_disable_get>
 80070a6:	f04f 0b01 	mov.w	fp, #1
 80070aa:	f884 00c0 	strb.w	r0, [r4, #192]	; 0xc0
 80070ae:	f884 b0ad 	strb.w	fp, [r4, #173]	; 0xad
 80070b2:	4620      	mov	r0, r4
 80070b4:	f7ff ffa4 	bl	8007000 <get_package_range_coarse_max>
 80070b8:	4b92      	ldr	r3, [pc, #584]	; (8007304 <initialize+0x2c8>)
 80070ba:	b280      	uxth	r0, r0
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	9002      	str	r0, [sp, #8]
 80070c0:	237c      	movs	r3, #124	; 0x7c
 80070c2:	f106 0a04 	add.w	sl, r6, #4
 80070c6:	9201      	str	r2, [sp, #4]
 80070c8:	9300      	str	r3, [sp, #0]
 80070ca:	4652      	mov	r2, sl
 80070cc:	463b      	mov	r3, r7
 80070ce:	4641      	mov	r1, r8
 80070d0:	4628      	mov	r0, r5
 80070d2:	f000 fa95 	bl	8007600 <acc_radar_engine_common_sweep_w_dly_initialize_range>
 80070d6:	4681      	mov	r9, r0
 80070d8:	2800      	cmp	r0, #0
 80070da:	d0c4      	beq.n	8007066 <initialize+0x2a>
 80070dc:	4628      	mov	r0, r5
 80070de:	f7ff f815 	bl	800610c <acc_base_configuration_sweep_type_debug_get>
 80070e2:	b980      	cbnz	r0, 8007106 <initialize+0xca>
 80070e4:	e9c4 0b12 	strd	r0, fp, [r4, #72]	; 0x48
 80070e8:	2300      	movs	r3, #0
 80070ea:	6523      	str	r3, [r4, #80]	; 0x50
 80070ec:	4628      	mov	r0, r5
 80070ee:	f7fe ff8d 	bl	800600c <acc_base_configuration_repetition_mode_get>
 80070f2:	2803      	cmp	r0, #3
 80070f4:	f200 80d8 	bhi.w	80072a8 <initialize+0x26c>
 80070f8:	e8df f000 	tbb	[pc, r0]
 80070fc:	0abfd9d1 	.word	0x0abfd9d1
 8007100:	f8a4 00ce 	strh.w	r0, [r4, #206]	; 0xce
 8007104:	e7c2      	b.n	800708c <initialize+0x50>
 8007106:	2300      	movs	r3, #0
 8007108:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
 800710c:	64e3      	str	r3, [r4, #76]	; 0x4c
 800710e:	e7eb      	b.n	80070e8 <initialize+0xac>
 8007110:	4628      	mov	r0, r5
 8007112:	f10d 0b20 	add.w	fp, sp, #32
 8007116:	f7fe ff81 	bl	800601c <acc_base_configuration_update_rate_get>
 800711a:	a907      	add	r1, sp, #28
 800711c:	4658      	mov	r0, fp
 800711e:	f000 fa27 	bl	8007570 <acc_radar_engine_common_frequency_to_main_clk>
 8007122:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8007126:	2301      	movs	r3, #1
 8007128:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
 800712c:	e9c4 1217 	strd	r1, r2, [r4, #92]	; 0x5c
 8007130:	4628      	mov	r0, r5
 8007132:	f7fe fea1 	bl	8005e78 <acc_base_configuration_power_save_mode_get>
 8007136:	2804      	cmp	r0, #4
 8007138:	d807      	bhi.n	800714a <initialize+0x10e>
 800713a:	e8df f000 	tbb	[pc, r0]
 800713e:	0303      	.short	0x0303
 8007140:	c1c5      	.short	0xc1c5
 8007142:	03          	.byte	0x03
 8007143:	00          	.byte	0x00
 8007144:	2301      	movs	r3, #1
 8007146:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
 800714a:	f10d 021a 	add.w	r2, sp, #26
 800714e:	f10d 0117 	add.w	r1, sp, #23
 8007152:	4628      	mov	r0, r5
 8007154:	f7ff f8ac 	bl	80062b0 <acc_base_configuration_cca_get>
 8007158:	2800      	cmp	r0, #0
 800715a:	f000 80ba 	beq.w	80072d2 <initialize+0x296>
 800715e:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8007162:	2201      	movs	r2, #1
 8007164:	3b01      	subs	r3, #1
 8007166:	e9c4 232d 	strd	r2, r3, [r4, #180]	; 0xb4
 800716a:	4628      	mov	r0, r5
 800716c:	f7fe fe94 	bl	8005e98 <acc_base_configuration_tx_disable_get>
 8007170:	2800      	cmp	r0, #0
 8007172:	f000 80bb 	beq.w	80072ec <initialize+0x2b0>
 8007176:	2000      	movs	r0, #0
 8007178:	66e0      	str	r0, [r4, #108]	; 0x6c
 800717a:	4628      	mov	r0, r5
 800717c:	f7fe fea0 	bl	8005ec0 <acc_base_configuration_decrease_tx_emission_get>
 8007180:	f080 0001 	eor.w	r0, r0, #1
 8007184:	2301      	movs	r3, #1
 8007186:	b2c0      	uxtb	r0, r0
 8007188:	e9c4 031c 	strd	r0, r3, [r4, #112]	; 0x70
 800718c:	4628      	mov	r0, r5
 800718e:	f7fe feab 	bl	8005ee8 <acc_base_configuration_hw_accelerated_average_samples_get>
 8007192:	3801      	subs	r0, #1
 8007194:	67a0      	str	r0, [r4, #120]	; 0x78
 8007196:	4628      	mov	r0, r5
 8007198:	f7fe ff58 	bl	800604c <acc_base_configuration_gain_get>
 800719c:	67e0      	str	r0, [r4, #124]	; 0x7c
 800719e:	4628      	mov	r0, r5
 80071a0:	f7fe ff64 	bl	800606c <acc_base_configuration_integrator_get>
 80071a4:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
 80071a8:	4628      	mov	r0, r5
 80071aa:	f7fe ff87 	bl	80060bc <acc_base_configuration_integrator_ramp_up_get>
 80071ae:	3801      	subs	r0, #1
 80071b0:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 80071b4:	4628      	mov	r0, r5
 80071b6:	f7fe ff6d 	bl	8006094 <acc_base_configuration_wg_duration_get>
 80071ba:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80071be:	4628      	mov	r0, r5
 80071c0:	f7fe ffea 	bl	8006198 <acc_base_configuration_bba_fast_refresh_disable_get>
 80071c4:	f884 008d 	strb.w	r0, [r4, #141]	; 0x8d
 80071c8:	4628      	mov	r0, r5
 80071ca:	f7ff f803 	bl	80061d4 <acc_base_configuration_downsampling_factor_get>
 80071ce:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
 80071d2:	4628      	mov	r0, r5
 80071d4:	f7fe ffcc 	bl	8006170 <acc_base_configuration_bba_reset_clocksync_perturbation_get>
 80071d8:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c
 80071dc:	4628      	mov	r0, r5
 80071de:	f7fe ffd1 	bl	8006184 <acc_base_configuration_bba_linear_resync_perturbation_get>
 80071e2:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
 80071e6:	4628      	mov	r0, r5
 80071e8:	f7ff f826 	bl	8006238 <acc_base_configuration_asynchronous_measurement_get>
 80071ec:	88b2      	ldrh	r2, [r6, #4]
 80071ee:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 80071f2:	f080 0001 	eor.w	r0, r0, #1
 80071f6:	2301      	movs	r3, #1
 80071f8:	f884 00ac 	strb.w	r0, [r4, #172]	; 0xac
 80071fc:	f884 30ad 	strb.w	r3, [r4, #173]	; 0xad
 8007200:	4650      	mov	r0, sl
 8007202:	f000 fcc9 	bl	8007b98 <acc_radar_engine_common_sweep_w_dly_stitching_required>
 8007206:	2800      	cmp	r0, #0
 8007208:	d16c      	bne.n	80072e4 <initialize+0x2a8>
 800720a:	8970      	ldrh	r0, [r6, #10]
 800720c:	f9b6 3008 	ldrsh.w	r3, [r6, #8]
 8007210:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 8007214:	3801      	subs	r0, #1
 8007216:	88f3      	ldrh	r3, [r6, #6]
 8007218:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 800721c:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
 8007220:	f7ff f996 	bl	8006550 <acc_rss_integration_get_sensor_reference_frequency>
 8007224:	893b      	ldrh	r3, [r7, #8]
 8007226:	ed84 0a2c 	vstr	s0, [r4, #176]	; 0xb0
 800722a:	f44f 7261 	mov.w	r2, #900	; 0x384
 800722e:	f8a8 2014 	strh.w	r2, [r8, #20]
 8007232:	f8b4 10cc 	ldrh.w	r1, [r4, #204]	; 0xcc
 8007236:	227c      	movs	r2, #124	; 0x7c
 8007238:	fbb2 f2f1 	udiv	r2, r2, r1
 800723c:	fb03 f302 	mul.w	r3, r3, r2
 8007240:	2200      	movs	r2, #0
 8007242:	817b      	strh	r3, [r7, #10]
 8007244:	833a      	strh	r2, [r7, #24]
 8007246:	4659      	mov	r1, fp
 8007248:	4620      	mov	r0, r4
 800724a:	f004 fe2d 	bl	800bea8 <acc_cpd_linear_sweep_get_info>
 800724e:	465a      	mov	r2, fp
 8007250:	6831      	ldr	r1, [r6, #0]
 8007252:	2301      	movs	r3, #1
 8007254:	2013      	movs	r0, #19
 8007256:	f001 fd37 	bl	8008cc8 <acc_probes_execute_uint16>
 800725a:	f000 fcf9 	bl	8007c50 <acc_sensor_r2_get_max_header_length>
 800725e:	f8b4 20ce 	ldrh.w	r2, [r4, #206]	; 0xce
 8007262:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8007266:	4413      	add	r3, r2
 8007268:	4418      	add	r0, r3
 800726a:	81f8      	strh	r0, [r7, #14]
 800726c:	f44f 6316 	mov.w	r3, #2400	; 0x960
 8007270:	4648      	mov	r0, r9
 8007272:	81bb      	strh	r3, [r7, #12]
 8007274:	b00f      	add	sp, #60	; 0x3c
 8007276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800727a:	4628      	mov	r0, r5
 800727c:	f10d 0b20 	add.w	fp, sp, #32
 8007280:	f7fe fecc 	bl	800601c <acc_base_configuration_update_rate_get>
 8007284:	a907      	add	r1, sp, #28
 8007286:	4658      	mov	r0, fp
 8007288:	f000 f972 	bl	8007570 <acc_radar_engine_common_frequency_to_main_clk>
 800728c:	2301      	movs	r3, #1
 800728e:	9a07      	ldr	r2, [sp, #28]
 8007290:	6563      	str	r3, [r4, #84]	; 0x54
 8007292:	2100      	movs	r1, #0
 8007294:	9b08      	ldr	r3, [sp, #32]
 8007296:	6623      	str	r3, [r4, #96]	; 0x60
 8007298:	e9c4 1216 	strd	r1, r2, [r4, #88]	; 0x58
 800729c:	e748      	b.n	8007130 <initialize+0xf4>
 800729e:	2300      	movs	r3, #0
 80072a0:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
 80072a4:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
 80072a8:	f10d 0b20 	add.w	fp, sp, #32
 80072ac:	e740      	b.n	8007130 <initialize+0xf4>
 80072ae:	2300      	movs	r3, #0
 80072b0:	2201      	movs	r2, #1
 80072b2:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
 80072b6:	6563      	str	r3, [r4, #84]	; 0x54
 80072b8:	65a2      	str	r2, [r4, #88]	; 0x58
 80072ba:	f10d 0b20 	add.w	fp, sp, #32
 80072be:	e737      	b.n	8007130 <initialize+0xf4>
 80072c0:	2300      	movs	r3, #0
 80072c2:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
 80072c6:	e740      	b.n	800714a <initialize+0x10e>
 80072c8:	2201      	movs	r2, #1
 80072ca:	2300      	movs	r3, #0
 80072cc:	e9c4 2319 	strd	r2, r3, [r4, #100]	; 0x64
 80072d0:	e73b      	b.n	800714a <initialize+0x10e>
 80072d2:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
 80072d6:	4628      	mov	r0, r5
 80072d8:	f7fe fdde 	bl	8005e98 <acc_base_configuration_tx_disable_get>
 80072dc:	f080 0001 	eor.w	r0, r0, #1
 80072e0:	b2c0      	uxtb	r0, r0
 80072e2:	e749      	b.n	8007178 <initialize+0x13c>
 80072e4:	6970      	ldr	r0, [r6, #20]
 80072e6:	f7ff fe8b 	bl	8007000 <get_package_range_coarse_max>
 80072ea:	e78f      	b.n	800720c <initialize+0x1d0>
 80072ec:	f89d 0017 	ldrb.w	r0, [sp, #23]
 80072f0:	f080 0001 	eor.w	r0, r0, #1
 80072f4:	e740      	b.n	8007178 <initialize+0x13c>
 80072f6:	bf00      	nop
 80072f8:	20000640 	.word	0x20000640
 80072fc:	08013574 	.word	0x08013574
 8007300:	08013650 	.word	0x08013650
 8007304:	080137d0 	.word	0x080137d0

08007308 <coarse_count_for_next_package>:
 8007308:	b538      	push	{r3, r4, r5, lr}
 800730a:	8983      	ldrh	r3, [r0, #12]
 800730c:	4604      	mov	r4, r0
 800730e:	6940      	ldr	r0, [r0, #20]
 8007310:	3b01      	subs	r3, #1
 8007312:	f8b0 20c2 	ldrh.w	r2, [r0, #194]	; 0xc2
 8007316:	b29b      	uxth	r3, r3
 8007318:	429a      	cmp	r2, r3
 800731a:	d109      	bne.n	8007330 <coarse_count_for_next_package+0x28>
 800731c:	8965      	ldrh	r5, [r4, #10]
 800731e:	f7ff fe6f 	bl	8007000 <get_package_range_coarse_max>
 8007322:	fbb5 f3f0 	udiv	r3, r5, r0
 8007326:	fb03 5010 	mls	r0, r3, r0, r5
 800732a:	b100      	cbz	r0, 800732e <coarse_count_for_next_package+0x26>
 800732c:	bd38      	pop	{r3, r4, r5, pc}
 800732e:	6960      	ldr	r0, [r4, #20]
 8007330:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007334:	f7ff be64 	b.w	8007000 <get_package_range_coarse_max>

08007338 <update_program>:
 8007338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800733c:	6946      	ldr	r6, [r0, #20]
 800733e:	8987      	ldrh	r7, [r0, #12]
 8007340:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
 8007342:	f896 20c0 	ldrb.w	r2, [r6, #192]	; 0xc0
 8007346:	460d      	mov	r5, r1
 8007348:	fab3 f383 	clz	r3, r3
 800734c:	2a00      	cmp	r2, #0
 800734e:	bf18      	it	ne
 8007350:	4611      	movne	r1, r2
 8007352:	2f01      	cmp	r7, #1
 8007354:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8007358:	bf94      	ite	ls
 800735a:	f04f 0900 	movls.w	r9, #0
 800735e:	f04f 0901 	movhi.w	r9, #1
 8007362:	2f01      	cmp	r7, #1
 8007364:	b085      	sub	sp, #20
 8007366:	4604      	mov	r4, r0
 8007368:	ea83 0a01 	eor.w	sl, r3, r1
 800736c:	d933      	bls.n	80073d6 <update_program+0x9e>
 800736e:	f8b6 30c2 	ldrh.w	r3, [r6, #194]	; 0xc2
 8007372:	f9b0 b008 	ldrsh.w	fp, [r0, #8]
 8007376:	3301      	adds	r3, #1
 8007378:	b29b      	uxth	r3, r3
 800737a:	fbb3 f8f7 	udiv	r8, r3, r7
 800737e:	fb07 3718 	mls	r7, r7, r8, r3
 8007382:	fa1f f887 	uxth.w	r8, r7
 8007386:	f8a6 80c2 	strh.w	r8, [r6, #194]	; 0xc2
 800738a:	4630      	mov	r0, r6
 800738c:	f7ff fe38 	bl	8007000 <get_package_range_coarse_max>
 8007390:	4607      	mov	r7, r0
 8007392:	4620      	mov	r0, r4
 8007394:	f7ff ffb8 	bl	8007308 <coarse_count_for_next_package>
 8007398:	f896 20c0 	ldrb.w	r2, [r6, #192]	; 0xc0
 800739c:	f8c6 00c8 	str.w	r0, [r6, #200]	; 0xc8
 80073a0:	fb07 b708 	mla	r7, r7, r8, fp
 80073a4:	3801      	subs	r0, #1
 80073a6:	e9cd 0701 	strd	r0, r7, [sp, #4]
 80073aa:	f88d 9000 	strb.w	r9, [sp]
 80073ae:	f88d 9001 	strb.w	r9, [sp, #1]
 80073b2:	f88d a002 	strb.w	sl, [sp, #2]
 80073b6:	b15a      	cbz	r2, 80073d0 <update_program+0x98>
 80073b8:	2500      	movs	r5, #0
 80073ba:	6820      	ldr	r0, [r4, #0]
 80073bc:	9503      	str	r5, [sp, #12]
 80073be:	4669      	mov	r1, sp
 80073c0:	f004 fd20 	bl	800be04 <acc_cpd_linear_sweep_update_program>
 80073c4:	b108      	cbz	r0, 80073ca <update_program+0x92>
 80073c6:	9b03      	ldr	r3, [sp, #12]
 80073c8:	66f3      	str	r3, [r6, #108]	; 0x6c
 80073ca:	b005      	add	sp, #20
 80073cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073d0:	f085 0501 	eor.w	r5, r5, #1
 80073d4:	e7f1      	b.n	80073ba <update_program+0x82>
 80073d6:	428b      	cmp	r3, r1
 80073d8:	d003      	beq.n	80073e2 <update_program+0xaa>
 80073da:	f04f 30ff 	mov.w	r0, #4294967295
 80073de:	2700      	movs	r7, #0
 80073e0:	e7e1      	b.n	80073a6 <update_program+0x6e>
 80073e2:	2001      	movs	r0, #1
 80073e4:	e7f1      	b.n	80073ca <update_program+0x92>
 80073e6:	bf00      	nop

080073e8 <start>:
 80073e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80073ec:	6944      	ldr	r4, [r0, #20]
 80073ee:	f8d4 70b4 	ldr.w	r7, [r4, #180]	; 0xb4
 80073f2:	f894 80ac 	ldrb.w	r8, [r4, #172]	; 0xac
 80073f6:	f8d4 906c 	ldr.w	r9, [r4, #108]	; 0x6c
 80073fa:	2300      	movs	r3, #0
 80073fc:	b085      	sub	sp, #20
 80073fe:	4606      	mov	r6, r0
 8007400:	460d      	mov	r5, r1
 8007402:	f8a4 30c2 	strh.w	r3, [r4, #194]	; 0xc2
 8007406:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 800740a:	b117      	cbz	r7, 8007412 <start+0x2a>
 800740c:	f1b8 0f00 	cmp.w	r8, #0
 8007410:	d11f      	bne.n	8007452 <start+0x6a>
 8007412:	4630      	mov	r0, r6
 8007414:	f7ff ff78 	bl	8007308 <coarse_count_for_next_package>
 8007418:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
 800741c:	f7ff f948 	bl	80066b0 <acc_rss_integration_log_level>
 8007420:	2803      	cmp	r0, #3
 8007422:	d905      	bls.n	8007430 <start+0x48>
 8007424:	4b2b      	ldr	r3, [pc, #172]	; (80074d4 <start+0xec>)
 8007426:	4a2c      	ldr	r2, [pc, #176]	; (80074d8 <start+0xf0>)
 8007428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800742a:	492c      	ldr	r1, [pc, #176]	; (80074dc <start+0xf4>)
 800742c:	2004      	movs	r0, #4
 800742e:	4798      	blx	r3
 8007430:	e9d5 1200 	ldrd	r1, r2, [r5]
 8007434:	6830      	ldr	r0, [r6, #0]
 8007436:	4623      	mov	r3, r4
 8007438:	f003 ffa8 	bl	800b38c <acc_cpd_linear_sweep_load_program>
 800743c:	4605      	mov	r5, r0
 800743e:	b950      	cbnz	r0, 8007456 <start+0x6e>
 8007440:	4b24      	ldr	r3, [pc, #144]	; (80074d4 <start+0xec>)
 8007442:	4a27      	ldr	r2, [pc, #156]	; (80074e0 <start+0xf8>)
 8007444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007446:	4925      	ldr	r1, [pc, #148]	; (80074dc <start+0xf4>)
 8007448:	4798      	blx	r3
 800744a:	4628      	mov	r0, r5
 800744c:	b005      	add	sp, #20
 800744e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007452:	66e3      	str	r3, [r4, #108]	; 0x6c
 8007454:	e7dd      	b.n	8007412 <start+0x2a>
 8007456:	6830      	ldr	r0, [r6, #0]
 8007458:	f004 fcd0 	bl	800bdfc <acc_cpd_linear_sweep_run_program>
 800745c:	4605      	mov	r5, r0
 800745e:	2800      	cmp	r0, #0
 8007460:	d032      	beq.n	80074c8 <start+0xe0>
 8007462:	f1b8 0f00 	cmp.w	r8, #0
 8007466:	d00f      	beq.n	8007488 <start+0xa0>
 8007468:	6931      	ldr	r1, [r6, #16]
 800746a:	6830      	ldr	r0, [r6, #0]
 800746c:	f001 f9ae 	bl	80087cc <acc_sensor_protocol_r2_wait_for_sync_start>
 8007470:	b350      	cbz	r0, 80074c8 <start+0xe0>
 8007472:	f7ff f91d 	bl	80066b0 <acc_rss_integration_log_level>
 8007476:	2801      	cmp	r0, #1
 8007478:	d905      	bls.n	8007486 <start+0x9e>
 800747a:	4b16      	ldr	r3, [pc, #88]	; (80074d4 <start+0xec>)
 800747c:	4a19      	ldr	r2, [pc, #100]	; (80074e4 <start+0xfc>)
 800747e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007480:	4916      	ldr	r1, [pc, #88]	; (80074dc <start+0xf4>)
 8007482:	2002      	movs	r0, #2
 8007484:	4798      	blx	r3
 8007486:	b96f      	cbnz	r7, 80074a4 <start+0xbc>
 8007488:	f7ff f912 	bl	80066b0 <acc_rss_integration_log_level>
 800748c:	2803      	cmp	r0, #3
 800748e:	d9dc      	bls.n	800744a <start+0x62>
 8007490:	4b10      	ldr	r3, [pc, #64]	; (80074d4 <start+0xec>)
 8007492:	4a15      	ldr	r2, [pc, #84]	; (80074e8 <start+0x100>)
 8007494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007496:	4911      	ldr	r1, [pc, #68]	; (80074dc <start+0xf4>)
 8007498:	2004      	movs	r0, #4
 800749a:	4798      	blx	r3
 800749c:	4628      	mov	r0, r5
 800749e:	b005      	add	sp, #20
 80074a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80074a4:	2300      	movs	r3, #0
 80074a6:	2201      	movs	r2, #1
 80074a8:	6830      	ldr	r0, [r6, #0]
 80074aa:	f8c4 906c 	str.w	r9, [r4, #108]	; 0x6c
 80074ae:	4669      	mov	r1, sp
 80074b0:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80074b4:	f8cd 900c 	str.w	r9, [sp, #12]
 80074b8:	f8ad 3000 	strh.w	r3, [sp]
 80074bc:	f88d 2002 	strb.w	r2, [sp, #2]
 80074c0:	f004 fca0 	bl	800be04 <acc_cpd_linear_sweep_update_program>
 80074c4:	2800      	cmp	r0, #0
 80074c6:	d1df      	bne.n	8007488 <start+0xa0>
 80074c8:	2500      	movs	r5, #0
 80074ca:	4628      	mov	r0, r5
 80074cc:	b005      	add	sp, #20
 80074ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80074d2:	bf00      	nop
 80074d4:	20000640 	.word	0x20000640
 80074d8:	08013720 	.word	0x08013720
 80074dc:	08013650 	.word	0x08013650
 80074e0:	08013748 	.word	0x08013748
 80074e4:	08013764 	.word	0x08013764
 80074e8:	08013788 	.word	0x08013788

080074ec <acc_radar_engine_linear_create>:
 80074ec:	b538      	push	{r3, r4, r5, lr}
 80074ee:	4a11      	ldr	r2, [pc, #68]	; (8007534 <acc_radar_engine_linear_create+0x48>)
 80074f0:	4604      	mov	r4, r0
 80074f2:	460d      	mov	r5, r1
 80074f4:	f44f 7393 	mov.w	r3, #294	; 0x126
 80074f8:	21d4      	movs	r1, #212	; 0xd4
 80074fa:	2001      	movs	r0, #1
 80074fc:	f7ff f8a8 	bl	8006650 <acc_rss_integration_mem_calloc_debug>
 8007500:	6160      	str	r0, [r4, #20]
 8007502:	b1a8      	cbz	r0, 8007530 <acc_radar_engine_linear_create+0x44>
 8007504:	4628      	mov	r0, r5
 8007506:	f7fe fc67 	bl	8005dd8 <acc_base_configuration_sensor_get>
 800750a:	6020      	str	r0, [r4, #0]
 800750c:	4628      	mov	r0, r5
 800750e:	f7fe fe93 	bl	8006238 <acc_base_configuration_asynchronous_measurement_get>
 8007512:	73a0      	strb	r0, [r4, #14]
 8007514:	4628      	mov	r0, r5
 8007516:	f7fe fcaf 	bl	8005e78 <acc_base_configuration_power_save_mode_get>
 800751a:	fab0 f080 	clz	r0, r0
 800751e:	0940      	lsrs	r0, r0, #5
 8007520:	73e0      	strb	r0, [r4, #15]
 8007522:	4628      	mov	r0, r5
 8007524:	f000 f80a 	bl	800753c <acc_radar_engine_common_get_timeout_ms>
 8007528:	4b03      	ldr	r3, [pc, #12]	; (8007538 <acc_radar_engine_linear_create+0x4c>)
 800752a:	6120      	str	r0, [r4, #16]
 800752c:	61a3      	str	r3, [r4, #24]
 800752e:	2001      	movs	r0, #1
 8007530:	bd38      	pop	{r3, r4, r5, pc}
 8007532:	bf00      	nop
 8007534:	08013650 	.word	0x08013650
 8007538:	080137ac 	.word	0x080137ac

0800753c <acc_radar_engine_common_get_timeout_ms>:
 800753c:	b510      	push	{r4, lr}
 800753e:	4604      	mov	r4, r0
 8007540:	f7fe fd64 	bl	800600c <acc_base_configuration_repetition_mode_get>
 8007544:	2801      	cmp	r0, #1
 8007546:	d00d      	beq.n	8007564 <acc_radar_engine_common_get_timeout_ms+0x28>
 8007548:	4620      	mov	r0, r4
 800754a:	f7fe fd67 	bl	800601c <acc_base_configuration_update_rate_get>
 800754e:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800756c <acc_radar_engine_common_get_timeout_ms+0x30>
 8007552:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007556:	ee77 7a87 	vadd.f32	s15, s15, s14
 800755a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800755e:	ee17 0a90 	vmov	r0, s15
 8007562:	bd10      	pop	{r4, pc}
 8007564:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8007568:	bd10      	pop	{r4, pc}
 800756a:	bf00      	nop
 800756c:	44fa0000 	.word	0x44fa0000

08007570 <acc_radar_engine_common_frequency_to_main_clk>:
 8007570:	b538      	push	{r3, r4, r5, lr}
 8007572:	ed2d 8b02 	vpush	{d8}
 8007576:	4604      	mov	r4, r0
 8007578:	eeb0 8a40 	vmov.f32	s16, s0
 800757c:	460d      	mov	r5, r1
 800757e:	f7fe ffe7 	bl	8006550 <acc_rss_integration_get_sensor_reference_frequency>
 8007582:	eec0 7a08 	vdiv.f32	s15, s0, s16
 8007586:	ecbd 8b02 	vpop	{d8}
 800758a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800758e:	ee17 3a90 	vmov	r3, s15
 8007592:	0c1a      	lsrs	r2, r3, #16
 8007594:	b29b      	uxth	r3, r3
 8007596:	602a      	str	r2, [r5, #0]
 8007598:	6023      	str	r3, [r4, #0]
 800759a:	bd38      	pop	{r3, r4, r5, pc}

0800759c <get_dt>:
 800759c:	b508      	push	{r3, lr}
 800759e:	ed2d 8b02 	vpush	{d8}
 80075a2:	ee08 0a10 	vmov	s16, r0
 80075a6:	f7fe ffd3 	bl	8006550 <acc_rss_integration_get_sensor_reference_frequency>
 80075aa:	eef0 8a40 	vmov.f32	s17, s0
 80075ae:	f001 fd1f 	bl	8008ff0 <acc_cpd_pll_divisors_ref_divisor>
 80075b2:	ee28 0a80 	vmul.f32	s0, s17, s0
 80075b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075ba:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80075be:	eeb8 8a48 	vcvt.f32.u32	s16, s16
 80075c2:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80075c6:	ecbd 8b02 	vpop	{d8}
 80075ca:	bd08      	pop	{r3, pc}

080075cc <points_to_meter>:
 80075cc:	b508      	push	{r3, lr}
 80075ce:	4603      	mov	r3, r0
 80075d0:	ed2d 8b02 	vpush	{d8}
 80075d4:	4608      	mov	r0, r1
 80075d6:	ee08 3a10 	vmov	s16, r3
 80075da:	f7ff ffdf 	bl	800759c <get_dt>
 80075de:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 80075e2:	eddf 7a06 	vldr	s15, [pc, #24]	; 80075fc <points_to_meter+0x30>
 80075e6:	ee28 8a00 	vmul.f32	s16, s16, s0
 80075ea:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80075ee:	ee28 8a27 	vmul.f32	s16, s16, s15
 80075f2:	ee28 0a00 	vmul.f32	s0, s16, s0
 80075f6:	ecbd 8b02 	vpop	{d8}
 80075fa:	bd08      	pop	{r3, pc}
 80075fc:	4d8ef3c2 	.word	0x4d8ef3c2

08007600 <acc_radar_engine_common_sweep_w_dly_initialize_range>:
 8007600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007604:	ed2d 8b04 	vpush	{d8-d9}
 8007608:	b089      	sub	sp, #36	; 0x24
 800760a:	4689      	mov	r9, r1
 800760c:	9e16      	ldr	r6, [sp, #88]	; 0x58
 800760e:	f89d a05c 	ldrb.w	sl, [sp, #92]	; 0x5c
 8007612:	f9bd b05e 	ldrsh.w	fp, [sp, #94]	; 0x5e
 8007616:	9306      	str	r3, [sp, #24]
 8007618:	4617      	mov	r7, r2
 800761a:	4680      	mov	r8, r0
 800761c:	f7fe fd8a 	bl	8006134 <acc_base_configuration_use_point_range_get>
 8007620:	2800      	cmp	r0, #0
 8007622:	d03d      	beq.n	80076a0 <acc_radar_engine_common_sweep_w_dly_initialize_range+0xa0>
 8007624:	4640      	mov	r0, r8
 8007626:	f7fe fcdd 	bl	8005fe4 <acc_base_configuration_point_start_get>
 800762a:	4605      	mov	r5, r0
 800762c:	4640      	mov	r0, r8
 800762e:	f7fe fce3 	bl	8005ff8 <acc_base_configuration_point_length_get>
 8007632:	182c      	adds	r4, r5, r0
 8007634:	f1ba 0f00 	cmp.w	sl, #0
 8007638:	d02f      	beq.n	800769a <acc_radar_engine_common_sweep_w_dly_initialize_range+0x9a>
 800763a:	f06f 020b 	mvn.w	r2, #11
 800763e:	4593      	cmp	fp, r2
 8007640:	bfb8      	it	lt
 8007642:	4693      	movlt	fp, r2
 8007644:	f898 202e 	ldrb.w	r2, [r8, #46]	; 0x2e
 8007648:	b31a      	cbz	r2, 8007692 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x92>
 800764a:	f8b8 3030 	ldrh.w	r3, [r8, #48]	; 0x30
 800764e:	9307      	str	r3, [sp, #28]
 8007650:	4640      	mov	r0, r8
 8007652:	f7fe fdbf 	bl	80061d4 <acc_base_configuration_downsampling_factor_get>
 8007656:	2801      	cmp	r0, #1
 8007658:	4682      	mov	sl, r0
 800765a:	d90a      	bls.n	8007672 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x72>
 800765c:	2802      	cmp	r0, #2
 800765e:	f000 8121 	beq.w	80078a4 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2a4>
 8007662:	1b60      	subs	r0, r4, r5
 8007664:	fb90 f2fa 	sdiv	r2, r0, sl
 8007668:	fb0a 0a12 	mls	sl, sl, r2, r0
 800766c:	f1ba 0f00 	cmp.w	sl, #0
 8007670:	dc55      	bgt.n	800771e <acc_radar_engine_common_sweep_w_dly_initialize_range+0x11e>
 8007672:	42ac      	cmp	r4, r5
 8007674:	da61      	bge.n	800773a <acc_radar_engine_common_sweep_w_dly_initialize_range+0x13a>
 8007676:	4b9b      	ldr	r3, [pc, #620]	; (80078e4 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2e4>)
 8007678:	4a9b      	ldr	r2, [pc, #620]	; (80078e8 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2e8>)
 800767a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800767c:	499b      	ldr	r1, [pc, #620]	; (80078ec <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2ec>)
 800767e:	2000      	movs	r0, #0
 8007680:	4798      	blx	r3
 8007682:	f04f 0a00 	mov.w	sl, #0
 8007686:	4650      	mov	r0, sl
 8007688:	b009      	add	sp, #36	; 0x24
 800768a:	ecbd 8b04 	vpop	{d8-d9}
 800768e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007692:	f898 3032 	ldrb.w	r3, [r8, #50]	; 0x32
 8007696:	9307      	str	r3, [sp, #28]
 8007698:	e7da      	b.n	8007650 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x50>
 800769a:	f06f 0b0b 	mvn.w	fp, #11
 800769e:	e7d1      	b.n	8007644 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x44>
 80076a0:	4640      	mov	r0, r8
 80076a2:	f7fe fba9 	bl	8005df8 <acc_base_configuration_requested_start_get>
 80076a6:	4640      	mov	r0, r8
 80076a8:	eeb0 8a40 	vmov.f32	s16, s0
 80076ac:	f7fe fbc0 	bl	8005e30 <acc_base_configuration_requested_length_get>
 80076b0:	4630      	mov	r0, r6
 80076b2:	ee78 8a00 	vadd.f32	s17, s16, s0
 80076b6:	f7ff ff71 	bl	800759c <get_dt>
 80076ba:	eddf 9a8d 	vldr	s19, [pc, #564]	; 80078f0 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2f0>
 80076be:	ee38 7a08 	vadd.f32	s14, s16, s16
 80076c2:	ee20 0a29 	vmul.f32	s0, s0, s19
 80076c6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80076ca:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80076ce:	4630      	mov	r0, r6
 80076d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076d4:	eebe 8a00 	vmov.f32	s16, #224	; 0xbf000000 -0.5
 80076d8:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 80076dc:	bf54      	ite	pl
 80076de:	eeb0 7a49 	vmovpl.f32	s14, s18
 80076e2:	eeb0 7a48 	vmovmi.f32	s14, s16
 80076e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80076ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80076ee:	ee17 5a90 	vmov	r5, s15
 80076f2:	f7ff ff53 	bl	800759c <get_dt>
 80076f6:	ee38 7aa8 	vadd.f32	s14, s17, s17
 80076fa:	ee20 0a29 	vmul.f32	s0, s0, s19
 80076fe:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8007702:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800770a:	bf58      	it	pl
 800770c:	eeb0 8a49 	vmovpl.f32	s16, s18
 8007710:	ee37 8a88 	vadd.f32	s16, s15, s16
 8007714:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8007718:	ee17 4a90 	vmov	r4, s15
 800771c:	e78a      	b.n	8007634 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x34>
 800771e:	f7fe ffc7 	bl	80066b0 <acc_rss_integration_log_level>
 8007722:	2801      	cmp	r0, #1
 8007724:	d905      	bls.n	8007732 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x132>
 8007726:	496f      	ldr	r1, [pc, #444]	; (80078e4 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2e4>)
 8007728:	4a72      	ldr	r2, [pc, #456]	; (80078f4 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2f4>)
 800772a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800772c:	496f      	ldr	r1, [pc, #444]	; (80078ec <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2ec>)
 800772e:	2002      	movs	r0, #2
 8007730:	4798      	blx	r3
 8007732:	eba4 040a 	sub.w	r4, r4, sl
 8007736:	42ac      	cmp	r4, r5
 8007738:	db9d      	blt.n	8007676 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x76>
 800773a:	4640      	mov	r0, r8
 800773c:	f7fe fd36 	bl	80061ac <acc_base_configuration_ignore_range_limits_get>
 8007740:	4682      	mov	sl, r0
 8007742:	b970      	cbnz	r0, 8007762 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x162>
 8007744:	fb0b fb06 	mul.w	fp, fp, r6
 8007748:	45ab      	cmp	fp, r5
 800774a:	f300 80d9 	bgt.w	8007900 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x300>
 800774e:	9b07      	ldr	r3, [sp, #28]
 8007750:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8007754:	f1ab 0b4b 	sub.w	fp, fp, #75	; 0x4b
 8007758:	fb06 fb0b 	mul.w	fp, r6, fp
 800775c:	455c      	cmp	r4, fp
 800775e:	f300 8171 	bgt.w	8007a44 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x444>
 8007762:	4640      	mov	r0, r8
 8007764:	f7fe fd36 	bl	80061d4 <acc_base_configuration_downsampling_factor_get>
 8007768:	f898 202e 	ldrb.w	r2, [r8, #46]	; 0x2e
 800776c:	4683      	mov	fp, r0
 800776e:	2a00      	cmp	r2, #0
 8007770:	f000 80a7 	beq.w	80078c2 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2c2>
 8007774:	f8b8 e030 	ldrh.w	lr, [r8, #48]	; 0x30
 8007778:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800777a:	fb95 f1fb 	sdiv	r1, r5, fp
 800777e:	eb04 72d4 	add.w	r2, r4, r4, lsr #31
 8007782:	fb92 f2f6 	sdiv	r2, r2, r6
 8007786:	eba2 72d4 	sub.w	r2, r2, r4, lsr #31
 800778a:	3201      	adds	r2, #1
 800778c:	eb05 70d5 	add.w	r0, r5, r5, lsr #31
 8007790:	fb90 f0f6 	sdiv	r0, r0, r6
 8007794:	eba0 70d5 	sub.w	r0, r0, r5, lsr #31
 8007798:	1a12      	subs	r2, r2, r0
 800779a:	fb0b 5111 	mls	r1, fp, r1, r5
 800779e:	b292      	uxth	r2, r2
 80077a0:	4459      	add	r1, fp
 80077a2:	fbb2 fcf3 	udiv	ip, r2, r3
 80077a6:	80fa      	strh	r2, [r7, #6]
 80077a8:	fb03 2a1c 	mls	sl, r3, ip, r2
 80077ac:	fb91 f2fb 	sdiv	r2, r1, fp
 80077b0:	fb0b 1112 	mls	r1, fp, r2, r1
 80077b4:	f8a7 e000 	strh.w	lr, [r7]
 80077b8:	80b8      	strh	r0, [r7, #4]
 80077ba:	fa1f fc8c 	uxth.w	ip, ip
 80077be:	8079      	strh	r1, [r7, #2]
 80077c0:	f1ba 0f00 	cmp.w	sl, #0
 80077c4:	d001      	beq.n	80077ca <acc_radar_engine_common_sweep_w_dly_initialize_range+0x1ca>
 80077c6:	f10c 0c01 	add.w	ip, ip, #1
 80077ca:	f8a7 c008 	strh.w	ip, [r7, #8]
 80077ce:	4640      	mov	r0, r8
 80077d0:	f7fe fb52 	bl	8005e78 <acc_base_configuration_power_save_mode_get>
 80077d4:	4602      	mov	r2, r0
 80077d6:	4640      	mov	r0, r8
 80077d8:	9207      	str	r2, [sp, #28]
 80077da:	f7fe fc17 	bl	800600c <acc_base_configuration_repetition_mode_get>
 80077de:	9a07      	ldr	r2, [sp, #28]
 80077e0:	2a04      	cmp	r2, #4
 80077e2:	d001      	beq.n	80077e8 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x1e8>
 80077e4:	2801      	cmp	r0, #1
 80077e6:	d003      	beq.n	80077f0 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x1f0>
 80077e8:	88fb      	ldrh	r3, [r7, #6]
 80077ea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d876      	bhi.n	80078de <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2de>
 80077f0:	4630      	mov	r0, r6
 80077f2:	f7ff fed3 	bl	800759c <get_dt>
 80077f6:	ee07 ba90 	vmov	s15, fp
 80077fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077fe:	4631      	mov	r1, r6
 8007800:	ee27 0a80 	vmul.f32	s0, s15, s0
 8007804:	4628      	mov	r0, r5
 8007806:	ed89 0a03 	vstr	s0, [r9, #12]
 800780a:	f7ff fedf 	bl	80075cc <points_to_meter>
 800780e:	4631      	mov	r1, r6
 8007810:	4620      	mov	r0, r4
 8007812:	ed89 0a00 	vstr	s0, [r9]
 8007816:	f7ff fed9 	bl	80075cc <points_to_meter>
 800781a:	fbb6 f2fb 	udiv	r2, r6, fp
 800781e:	fb95 fcf6 	sdiv	ip, r5, r6
 8007822:	edd9 7a00 	vldr	s15, [r9]
 8007826:	88fb      	ldrh	r3, [r7, #6]
 8007828:	8939      	ldrh	r1, [r7, #8]
 800782a:	9806      	ldr	r0, [sp, #24]
 800782c:	ed89 0a02 	vstr	s0, [r9, #8]
 8007830:	1b64      	subs	r4, r4, r5
 8007832:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007836:	fbb4 f4fb 	udiv	r4, r4, fp
 800783a:	3401      	adds	r4, #1
 800783c:	b2a4      	uxth	r4, r4
 800783e:	f8a9 4016 	strh.w	r4, [r9, #22]
 8007842:	ed89 0a01 	vstr	s0, [r9, #4]
 8007846:	f8a9 1018 	strh.w	r1, [r9, #24]
 800784a:	80c2      	strh	r2, [r0, #6]
 800784c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800784e:	8084      	strh	r4, [r0, #4]
 8007850:	fb06 551c 	mls	r5, r6, ip, r5
 8007854:	4435      	add	r5, r6
 8007856:	429a      	cmp	r2, r3
 8007858:	fb95 fcf6 	sdiv	ip, r5, r6
 800785c:	8103      	strh	r3, [r0, #8]
 800785e:	fb06 551c 	mls	r5, r6, ip, r5
 8007862:	8201      	strh	r1, [r0, #16]
 8007864:	fb95 f5fb 	sdiv	r5, r5, fp
 8007868:	fb03 f606 	mul.w	r6, r3, r6
 800786c:	8045      	strh	r5, [r0, #2]
 800786e:	fbb6 fbfb 	udiv	fp, r6, fp
 8007872:	f8a0 b000 	strh.w	fp, [r0]
 8007876:	d227      	bcs.n	80078c8 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2c8>
 8007878:	b292      	uxth	r2, r2
 800787a:	8282      	strh	r2, [r0, #20]
 800787c:	f1ba 0f00 	cmp.w	sl, #0
 8007880:	d006      	beq.n	8007890 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x290>
 8007882:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007884:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007886:	fbb3 f2f2 	udiv	r2, r3, r2
 800788a:	fb01 3312 	mls	r3, r1, r2, r3
 800788e:	b29a      	uxth	r2, r3
 8007890:	9b06      	ldr	r3, [sp, #24]
 8007892:	f04f 0a01 	mov.w	sl, #1
 8007896:	4650      	mov	r0, sl
 8007898:	82da      	strh	r2, [r3, #22]
 800789a:	b009      	add	sp, #36	; 0x24
 800789c:	ecbd 8b04 	vpop	{d8-d9}
 80078a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078a4:	07eb      	lsls	r3, r5, #31
 80078a6:	f53f aedc 	bmi.w	8007662 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x62>
 80078aa:	f7fe ff01 	bl	80066b0 <acc_rss_integration_log_level>
 80078ae:	2801      	cmp	r0, #1
 80078b0:	d905      	bls.n	80078be <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2be>
 80078b2:	490c      	ldr	r1, [pc, #48]	; (80078e4 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2e4>)
 80078b4:	4a10      	ldr	r2, [pc, #64]	; (80078f8 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2f8>)
 80078b6:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80078b8:	490c      	ldr	r1, [pc, #48]	; (80078ec <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2ec>)
 80078ba:	4650      	mov	r0, sl
 80078bc:	4798      	blx	r3
 80078be:	3501      	adds	r5, #1
 80078c0:	e6cf      	b.n	8007662 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x62>
 80078c2:	f898 e032 	ldrb.w	lr, [r8, #50]	; 0x32
 80078c6:	e757      	b.n	8007778 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x178>
 80078c8:	9a06      	ldr	r2, [sp, #24]
 80078ca:	f04f 0a01 	mov.w	sl, #1
 80078ce:	4650      	mov	r0, sl
 80078d0:	8293      	strh	r3, [r2, #20]
 80078d2:	82d3      	strh	r3, [r2, #22]
 80078d4:	b009      	add	sp, #36	; 0x24
 80078d6:	ecbd 8b04 	vpop	{d8-d9}
 80078da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078de:	4b01      	ldr	r3, [pc, #4]	; (80078e4 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2e4>)
 80078e0:	4a06      	ldr	r2, [pc, #24]	; (80078fc <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2fc>)
 80078e2:	e6ca      	b.n	800767a <acc_radar_engine_common_sweep_w_dly_initialize_range+0x7a>
 80078e4:	20000640 	.word	0x20000640
 80078e8:	08013864 	.word	0x08013864
 80078ec:	08013810 	.word	0x08013810
 80078f0:	4d8ef3c2 	.word	0x4d8ef3c2
 80078f4:	08013830 	.word	0x08013830
 80078f8:	080137d8 	.word	0x080137d8
 80078fc:	08013914 	.word	0x08013914
 8007900:	4b9d      	ldr	r3, [pc, #628]	; (8007b78 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x578>)
 8007902:	4c9e      	ldr	r4, [pc, #632]	; (8007b7c <acc_radar_engine_common_sweep_w_dly_initialize_range+0x57c>)
 8007904:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 8007906:	4631      	mov	r1, r6
 8007908:	4628      	mov	r0, r5
 800790a:	f7ff fe5f 	bl	80075cc <points_to_meter>
 800790e:	4b9c      	ldr	r3, [pc, #624]	; (8007b80 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x580>)
 8007910:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007918:	4631      	mov	r1, r6
 800791a:	4628      	mov	r0, r5
 800791c:	bf54      	ite	pl
 800791e:	4698      	movpl	r8, r3
 8007920:	46a0      	movmi	r8, r4
 8007922:	f7ff fe53 	bl	80075cc <points_to_meter>
 8007926:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800792a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800792e:	eddf 7a95 	vldr	s15, [pc, #596]	; 8007b84 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x584>
 8007932:	bf48      	it	mi
 8007934:	eeb1 0a40 	vnegmi.f32	s0, s0
 8007938:	ee30 0a27 	vadd.f32	s0, s0, s15
 800793c:	4628      	mov	r0, r5
 800793e:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8007942:	4631      	mov	r1, r6
 8007944:	ee17 5a90 	vmov	r5, s15
 8007948:	f7ff fe40 	bl	80075cc <points_to_meter>
 800794c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007954:	eddf 7a8b 	vldr	s15, [pc, #556]	; 8007b84 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x584>
 8007958:	ed9f 6a8a 	vldr	s12, [pc, #552]	; 8007b84 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x584>
 800795c:	eddf 6a8a 	vldr	s13, [pc, #552]	; 8007b88 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x588>
 8007960:	bf48      	it	mi
 8007962:	eeb1 0a40 	vnegmi.f32	s0, s0
 8007966:	ee70 7a27 	vadd.f32	s15, s0, s15
 800796a:	4631      	mov	r1, r6
 800796c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007974:	bf4c      	ite	mi
 8007976:	eeb1 7a67 	vnegmi.f32	s14, s15
 800797a:	eeb0 7a67 	vmovpl.f32	s14, s15
 800797e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8007982:	4658      	mov	r0, fp
 8007984:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8007988:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800798c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007990:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007994:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007998:	ee17 4a90 	vmov	r4, s15
 800799c:	f7ff fe16 	bl	80075cc <points_to_meter>
 80079a0:	4b77      	ldr	r3, [pc, #476]	; (8007b80 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x580>)
 80079a2:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8007b7c <acc_radar_engine_common_sweep_w_dly_initialize_range+0x57c>
 80079a6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80079aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079ae:	4631      	mov	r1, r6
 80079b0:	4658      	mov	r0, fp
 80079b2:	bf54      	ite	pl
 80079b4:	4699      	movpl	r9, r3
 80079b6:	46e1      	movmi	r9, ip
 80079b8:	f7ff fe08 	bl	80075cc <points_to_meter>
 80079bc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80079c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079c4:	eddf 7a6f 	vldr	s15, [pc, #444]	; 8007b84 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x584>
 80079c8:	bf48      	it	mi
 80079ca:	eeb1 0a40 	vnegmi.f32	s0, s0
 80079ce:	ee30 0a27 	vadd.f32	s0, s0, s15
 80079d2:	4631      	mov	r1, r6
 80079d4:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80079d8:	4658      	mov	r0, fp
 80079da:	ee17 6a90 	vmov	r6, s15
 80079de:	f7ff fdf5 	bl	80075cc <points_to_meter>
 80079e2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80079e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079ea:	eddf 7a66 	vldr	s15, [pc, #408]	; 8007b84 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x584>
 80079ee:	ed9f 6a65 	vldr	s12, [pc, #404]	; 8007b84 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x584>
 80079f2:	eddf 6a65 	vldr	s13, [pc, #404]	; 8007b88 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x588>
 80079f6:	4a65      	ldr	r2, [pc, #404]	; (8007b8c <acc_radar_engine_common_sweep_w_dly_initialize_range+0x58c>)
 80079f8:	9603      	str	r6, [sp, #12]
 80079fa:	bf48      	it	mi
 80079fc:	eeb1 0a40 	vnegmi.f32	s0, s0
 8007a00:	ee70 7a27 	vadd.f32	s15, s0, s15
 8007a04:	f8cd 9008 	str.w	r9, [sp, #8]
 8007a08:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a10:	bf4c      	ite	mi
 8007a12:	eeb1 7a67 	vnegmi.f32	s14, s15
 8007a16:	eeb0 7a67 	vmovpl.f32	s14, s15
 8007a1a:	ee37 7a06 	vadd.f32	s14, s14, s12
 8007a1e:	9401      	str	r4, [sp, #4]
 8007a20:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8007a24:	9500      	str	r5, [sp, #0]
 8007a26:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8007a2a:	4643      	mov	r3, r8
 8007a2c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007a30:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007a34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a38:	4955      	ldr	r1, [pc, #340]	; (8007b90 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x590>)
 8007a3a:	edcd 7a04 	vstr	s15, [sp, #16]
 8007a3e:	2000      	movs	r0, #0
 8007a40:	47b8      	blx	r7
 8007a42:	e620      	b.n	8007686 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x86>
 8007a44:	4b4c      	ldr	r3, [pc, #304]	; (8007b78 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x578>)
 8007a46:	4631      	mov	r1, r6
 8007a48:	4620      	mov	r0, r4
 8007a4a:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 8007a4c:	f7ff fdbe 	bl	80075cc <points_to_meter>
 8007a50:	4a4a      	ldr	r2, [pc, #296]	; (8007b7c <acc_radar_engine_common_sweep_w_dly_initialize_range+0x57c>)
 8007a52:	4b4b      	ldr	r3, [pc, #300]	; (8007b80 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x580>)
 8007a54:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a5c:	4631      	mov	r1, r6
 8007a5e:	4620      	mov	r0, r4
 8007a60:	bf4c      	ite	mi
 8007a62:	4690      	movmi	r8, r2
 8007a64:	4698      	movpl	r8, r3
 8007a66:	f7ff fdb1 	bl	80075cc <points_to_meter>
 8007a6a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a72:	eddf 7a44 	vldr	s15, [pc, #272]	; 8007b84 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x584>
 8007a76:	bf48      	it	mi
 8007a78:	eeb1 0a40 	vnegmi.f32	s0, s0
 8007a7c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007a80:	4620      	mov	r0, r4
 8007a82:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8007a86:	4631      	mov	r1, r6
 8007a88:	ee17 5a90 	vmov	r5, s15
 8007a8c:	f7ff fd9e 	bl	80075cc <points_to_meter>
 8007a90:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a98:	eddf 7a3a 	vldr	s15, [pc, #232]	; 8007b84 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x584>
 8007a9c:	ed9f 6a39 	vldr	s12, [pc, #228]	; 8007b84 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x584>
 8007aa0:	eddf 6a39 	vldr	s13, [pc, #228]	; 8007b88 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x588>
 8007aa4:	bf48      	it	mi
 8007aa6:	eeb1 0a40 	vnegmi.f32	s0, s0
 8007aaa:	ee70 7a27 	vadd.f32	s15, s0, s15
 8007aae:	4631      	mov	r1, r6
 8007ab0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ab8:	bf4c      	ite	mi
 8007aba:	eeb1 7a67 	vnegmi.f32	s14, s15
 8007abe:	eeb0 7a67 	vmovpl.f32	s14, s15
 8007ac2:	ee37 7a06 	vadd.f32	s14, s14, s12
 8007ac6:	4658      	mov	r0, fp
 8007ac8:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8007acc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8007ad0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007ad4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007ad8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007adc:	ee17 4a90 	vmov	r4, s15
 8007ae0:	f7ff fd74 	bl	80075cc <points_to_meter>
 8007ae4:	4a25      	ldr	r2, [pc, #148]	; (8007b7c <acc_radar_engine_common_sweep_w_dly_initialize_range+0x57c>)
 8007ae6:	4b26      	ldr	r3, [pc, #152]	; (8007b80 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x580>)
 8007ae8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007af0:	4631      	mov	r1, r6
 8007af2:	4658      	mov	r0, fp
 8007af4:	bf4c      	ite	mi
 8007af6:	4691      	movmi	r9, r2
 8007af8:	4699      	movpl	r9, r3
 8007afa:	f7ff fd67 	bl	80075cc <points_to_meter>
 8007afe:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b06:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8007b84 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x584>
 8007b0a:	bf48      	it	mi
 8007b0c:	eeb1 0a40 	vnegmi.f32	s0, s0
 8007b10:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007b14:	4631      	mov	r1, r6
 8007b16:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8007b1a:	4658      	mov	r0, fp
 8007b1c:	ee17 6a90 	vmov	r6, s15
 8007b20:	f7ff fd54 	bl	80075cc <points_to_meter>
 8007b24:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007b28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b2c:	eddf 7a15 	vldr	s15, [pc, #84]	; 8007b84 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x584>
 8007b30:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8007b84 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x584>
 8007b34:	eddf 6a14 	vldr	s13, [pc, #80]	; 8007b88 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x588>
 8007b38:	4a16      	ldr	r2, [pc, #88]	; (8007b94 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x594>)
 8007b3a:	9603      	str	r6, [sp, #12]
 8007b3c:	bf48      	it	mi
 8007b3e:	eeb1 0a40 	vnegmi.f32	s0, s0
 8007b42:	ee70 7a27 	vadd.f32	s15, s0, s15
 8007b46:	f8cd 9008 	str.w	r9, [sp, #8]
 8007b4a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b52:	bf4c      	ite	mi
 8007b54:	eeb1 7a67 	vnegmi.f32	s14, s15
 8007b58:	eeb0 7a67 	vmovpl.f32	s14, s15
 8007b5c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8007b60:	9401      	str	r4, [sp, #4]
 8007b62:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8007b66:	9500      	str	r5, [sp, #0]
 8007b68:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8007b6c:	4643      	mov	r3, r8
 8007b6e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007b72:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007b76:	e75d      	b.n	8007a34 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x434>
 8007b78:	20000640 	.word	0x20000640
 8007b7c:	080137d4 	.word	0x080137d4
 8007b80:	0801485c 	.word	0x0801485c
 8007b84:	350637bd 	.word	0x350637bd
 8007b88:	49742400 	.word	0x49742400
 8007b8c:	08013894 	.word	0x08013894
 8007b90:	08013810 	.word	0x08013810
 8007b94:	080138d4 	.word	0x080138d4

08007b98 <acc_radar_engine_common_sweep_w_dly_stitching_required>:
 8007b98:	8900      	ldrh	r0, [r0, #8]
 8007b9a:	2801      	cmp	r0, #1
 8007b9c:	bf94      	ite	ls
 8007b9e:	2000      	movls	r0, #0
 8007ba0:	2001      	movhi	r0, #1
 8007ba2:	4770      	bx	lr

08007ba4 <internal_buffer_processed_read>:
 8007ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ba8:	b085      	sub	sp, #20
 8007baa:	461f      	mov	r7, r3
 8007bac:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
 8007bb0:	9101      	str	r1, [sp, #4]
 8007bb2:	4682      	mov	sl, r0
 8007bb4:	4689      	mov	r9, r1
 8007bb6:	4615      	mov	r5, r2
 8007bb8:	f7fe fcd0 	bl	800655c <acc_rss_integration_get_max_spi_transfer_size>
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007bc2:	9302      	str	r3, [sp, #8]
 8007bc4:	2f00      	cmp	r7, #0
 8007bc6:	d03d      	beq.n	8007c44 <internal_buffer_processed_read+0xa0>
 8007bc8:	429c      	cmp	r4, r3
 8007bca:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8007bce:	bf14      	ite	ne
 8007bd0:	f44f 4be0 	movne.w	fp, #28672	; 0x7000
 8007bd4:	f44f 4b00 	moveq.w	fp, #32768	; 0x8000
 8007bd8:	f1a0 0803 	sub.w	r8, r0, #3
 8007bdc:	9300      	str	r3, [sp, #0]
 8007bde:	fa0f fb8b 	sxth.w	fp, fp
 8007be2:	e024      	b.n	8007c2e <internal_buffer_processed_read+0x8a>
 8007be4:	b2a6      	uxth	r6, r4
 8007be6:	9900      	ldr	r1, [sp, #0]
 8007be8:	f8a9 1004 	strh.w	r1, [r9, #4]
 8007bec:	1e72      	subs	r2, r6, #1
 8007bee:	ea4b 0305 	orr.w	r3, fp, r5
 8007bf2:	f8a9 2002 	strh.w	r2, [r9, #2]
 8007bf6:	f8a9 3000 	strh.w	r3, [r9]
 8007bfa:	4649      	mov	r1, r9
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	4650      	mov	r0, sl
 8007c00:	1ce2      	adds	r2, r4, #3
 8007c02:	f7fe fcdb 	bl	80065bc <acc_rss_integration_sensor_device_transfer>
 8007c06:	9802      	ldr	r0, [sp, #8]
 8007c08:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8007c0c:	f8c9 0000 	str.w	r0, [r9]
 8007c10:	f8a9 3004 	strh.w	r3, [r9, #4]
 8007c14:	eb09 0944 	add.w	r9, r9, r4, lsl #1
 8007c18:	442e      	add	r6, r5
 8007c1a:	f8d9 0000 	ldr.w	r0, [r9]
 8007c1e:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 8007c22:	9002      	str	r0, [sp, #8]
 8007c24:	1b3f      	subs	r7, r7, r4
 8007c26:	b2b5      	uxth	r5, r6
 8007c28:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007c2c:	d00a      	beq.n	8007c44 <internal_buffer_processed_read+0xa0>
 8007c2e:	45b8      	cmp	r8, r7
 8007c30:	4644      	mov	r4, r8
 8007c32:	bf28      	it	cs
 8007c34:	463c      	movcs	r4, r7
 8007c36:	45b8      	cmp	r8, r7
 8007c38:	d2d4      	bcs.n	8007be4 <internal_buffer_processed_read+0x40>
 8007c3a:	e000      	b.n	8007c3e <internal_buffer_processed_read+0x9a>
 8007c3c:	3c01      	subs	r4, #1
 8007c3e:	07e3      	lsls	r3, r4, #31
 8007c40:	d4fc      	bmi.n	8007c3c <internal_buffer_processed_read+0x98>
 8007c42:	e7cf      	b.n	8007be4 <internal_buffer_processed_read+0x40>
 8007c44:	9801      	ldr	r0, [sp, #4]
 8007c46:	3006      	adds	r0, #6
 8007c48:	b005      	add	sp, #20
 8007c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c4e:	bf00      	nop

08007c50 <acc_sensor_r2_get_max_header_length>:
 8007c50:	2003      	movs	r0, #3
 8007c52:	4770      	bx	lr

08007c54 <acc_sensor_r2_conf_write_instr>:
 8007c54:	b510      	push	{r4, lr}
 8007c56:	b084      	sub	sp, #16
 8007c58:	f441 43a0 	orr.w	r3, r1, #20480	; 0x5000
 8007c5c:	4604      	mov	r4, r0
 8007c5e:	9201      	str	r2, [sp, #4]
 8007c60:	f10d 010a 	add.w	r1, sp, #10
 8007c64:	a801      	add	r0, sp, #4
 8007c66:	2201      	movs	r2, #1
 8007c68:	f8ad 3008 	strh.w	r3, [sp, #8]
 8007c6c:	f001 fa00 	bl	8009070 <acc_utils_uint32_to_transfer_buffer>
 8007c70:	4620      	mov	r0, r4
 8007c72:	a902      	add	r1, sp, #8
 8007c74:	2300      	movs	r3, #0
 8007c76:	2203      	movs	r2, #3
 8007c78:	f7fe fca0 	bl	80065bc <acc_rss_integration_sensor_device_transfer>
 8007c7c:	b004      	add	sp, #16
 8007c7e:	bd10      	pop	{r4, pc}

08007c80 <acc_sensor_r2_prepare_load_confmem>:
 8007c80:	0849      	lsrs	r1, r1, #1
 8007c82:	b538      	push	{r3, r4, r5, lr}
 8007c84:	6010      	str	r0, [r2, #0]
 8007c86:	461c      	mov	r4, r3
 8007c88:	6019      	str	r1, [r3, #0]
 8007c8a:	4615      	mov	r5, r2
 8007c8c:	f7fe fc66 	bl	800655c <acc_rss_integration_get_max_spi_transfer_size>
 8007c90:	6821      	ldr	r1, [r4, #0]
 8007c92:	ebb1 0f50 	cmp.w	r1, r0, lsr #1
 8007c96:	d807      	bhi.n	8007ca8 <acc_sensor_r2_prepare_load_confmem+0x28>
 8007c98:	682b      	ldr	r3, [r5, #0]
 8007c9a:	3901      	subs	r1, #1
 8007c9c:	f021 0101 	bic.w	r1, r1, #1
 8007ca0:	3302      	adds	r3, #2
 8007ca2:	602b      	str	r3, [r5, #0]
 8007ca4:	6021      	str	r1, [r4, #0]
 8007ca6:	bd38      	pop	{r3, r4, r5, pc}
 8007ca8:	f7fe fc58 	bl	800655c <acc_rss_integration_get_max_spi_transfer_size>
 8007cac:	0841      	lsrs	r1, r0, #1
 8007cae:	e7f3      	b.n	8007c98 <acc_sensor_r2_prepare_load_confmem+0x18>

08007cb0 <acc_sensor_r2_load_confmem>:
 8007cb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007cb4:	b083      	sub	sp, #12
 8007cb6:	1c5d      	adds	r5, r3, #1
 8007cb8:	4606      	mov	r6, r0
 8007cba:	460c      	mov	r4, r1
 8007cbc:	4617      	mov	r7, r2
 8007cbe:	f7fe fcf7 	bl	80066b0 <acc_rss_integration_log_level>
 8007cc2:	2803      	cmp	r0, #3
 8007cc4:	ea4f 0845 	mov.w	r8, r5, lsl #1
 8007cc8:	d908      	bls.n	8007cdc <acc_sensor_r2_load_confmem+0x2c>
 8007cca:	4b11      	ldr	r3, [pc, #68]	; (8007d10 <acc_sensor_r2_load_confmem+0x60>)
 8007ccc:	9400      	str	r4, [sp, #0]
 8007cce:	f8d3 9034 	ldr.w	r9, [r3, #52]	; 0x34
 8007cd2:	4a10      	ldr	r2, [pc, #64]	; (8007d14 <acc_sensor_r2_load_confmem+0x64>)
 8007cd4:	4910      	ldr	r1, [pc, #64]	; (8007d18 <acc_sensor_r2_load_confmem+0x68>)
 8007cd6:	4633      	mov	r3, r6
 8007cd8:	2004      	movs	r0, #4
 8007cda:	47c8      	blx	r9
 8007cdc:	f7fe fc3e 	bl	800655c <acc_rss_integration_get_max_spi_transfer_size>
 8007ce0:	4540      	cmp	r0, r8
 8007ce2:	d208      	bcs.n	8007cf6 <acc_sensor_r2_load_confmem+0x46>
 8007ce4:	4b0a      	ldr	r3, [pc, #40]	; (8007d10 <acc_sensor_r2_load_confmem+0x60>)
 8007ce6:	4a0d      	ldr	r2, [pc, #52]	; (8007d1c <acc_sensor_r2_load_confmem+0x6c>)
 8007ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cea:	490b      	ldr	r1, [pc, #44]	; (8007d18 <acc_sensor_r2_load_confmem+0x68>)
 8007cec:	2000      	movs	r0, #0
 8007cee:	b003      	add	sp, #12
 8007cf0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007cf4:	4718      	bx	r3
 8007cf6:	f444 44a0 	orr.w	r4, r4, #20480	; 0x5000
 8007cfa:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8007cfe:	4639      	mov	r1, r7
 8007d00:	4630      	mov	r0, r6
 8007d02:	2300      	movs	r3, #0
 8007d04:	803c      	strh	r4, [r7, #0]
 8007d06:	b003      	add	sp, #12
 8007d08:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007d0c:	f7fe bc56 	b.w	80065bc <acc_rss_integration_sensor_device_transfer>
 8007d10:	20000640 	.word	0x20000640
 8007d14:	08013950 	.word	0x08013950
 8007d18:	08013940 	.word	0x08013940
 8007d1c:	08013978 	.word	0x08013978

08007d20 <acc_sensor_r2_buffer_processed_verify_size>:
 8007d20:	3103      	adds	r1, #3
 8007d22:	ebb0 0f41 	cmp.w	r0, r1, lsl #1
 8007d26:	bf2c      	ite	cs
 8007d28:	2001      	movcs	r0, #1
 8007d2a:	2000      	movcc	r0, #0
 8007d2c:	4770      	bx	lr
 8007d2e:	bf00      	nop

08007d30 <acc_sensor_r2_buffer_processed_read>:
 8007d30:	b510      	push	{r4, lr}
 8007d32:	b082      	sub	sp, #8
 8007d34:	2400      	movs	r4, #0
 8007d36:	9400      	str	r4, [sp, #0]
 8007d38:	f7ff ff34 	bl	8007ba4 <internal_buffer_processed_read>
 8007d3c:	b002      	add	sp, #8
 8007d3e:	bd10      	pop	{r4, pc}

08007d40 <acc_sensor_manager_power_on_and_start_sensor>:
 8007d40:	b570      	push	{r4, r5, r6, lr}
 8007d42:	6986      	ldr	r6, [r0, #24]
 8007d44:	4604      	mov	r4, r0
 8007d46:	4630      	mov	r0, r6
 8007d48:	f7fe fc0e 	bl	8006568 <acc_rss_integration_sensor_device_power_on>
 8007d4c:	4b0a      	ldr	r3, [pc, #40]	; (8007d78 <acc_sensor_manager_power_on_and_start_sensor+0x38>)
 8007d4e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007d50:	6819      	ldr	r1, [r3, #0]
 8007d52:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 8007d56:	00db      	lsls	r3, r3, #3
 8007d58:	3b48      	subs	r3, #72	; 0x48
 8007d5a:	4419      	add	r1, r3
 8007d5c:	1d20      	adds	r0, r4, #4
 8007d5e:	f000 fe5f 	bl	8008a20 <acc_sweep_manager_start>
 8007d62:	4605      	mov	r5, r0
 8007d64:	b118      	cbz	r0, 8007d6e <acc_sensor_manager_power_on_and_start_sensor+0x2e>
 8007d66:	2301      	movs	r3, #1
 8007d68:	70e3      	strb	r3, [r4, #3]
 8007d6a:	4628      	mov	r0, r5
 8007d6c:	bd70      	pop	{r4, r5, r6, pc}
 8007d6e:	4630      	mov	r0, r6
 8007d70:	f7fe fc00 	bl	8006574 <acc_rss_integration_sensor_device_power_off>
 8007d74:	4628      	mov	r0, r5
 8007d76:	bd70      	pop	{r4, r5, r6, pc}
 8007d78:	200004e8 	.word	0x200004e8

08007d7c <calibrate_sensor>:
 8007d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d80:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8007e50 <calibrate_sensor+0xd4>
 8007d84:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 8007e54 <calibrate_sensor+0xd8>
 8007d88:	f8d8 3000 	ldr.w	r3, [r8]
 8007d8c:	eb00 04c0 	add.w	r4, r0, r0, lsl #3
 8007d90:	00e4      	lsls	r4, r4, #3
 8007d92:	3c48      	subs	r4, #72	; 0x48
 8007d94:	4423      	add	r3, r4
 8007d96:	f04f 0900 	mov.w	r9, #0
 8007d9a:	b085      	sub	sp, #20
 8007d9c:	460e      	mov	r6, r1
 8007d9e:	f883 9041 	strb.w	r9, [r3, #65]	; 0x41
 8007da2:	f883 9042 	strb.w	r9, [r3, #66]	; 0x42
 8007da6:	f8c3 b044 	str.w	fp, [r3, #68]	; 0x44
 8007daa:	4607      	mov	r7, r0
 8007dac:	4692      	mov	sl, r2
 8007dae:	f7fe fbdb 	bl	8006568 <acc_rss_integration_sensor_device_power_on>
 8007db2:	4630      	mov	r0, r6
 8007db4:	f000 fe10 	bl	80089d8 <acc_sweep_manager_is_sensor_connected>
 8007db8:	b968      	cbnz	r0, 8007dd6 <calibrate_sensor+0x5a>
 8007dba:	4b21      	ldr	r3, [pc, #132]	; (8007e40 <calibrate_sensor+0xc4>)
 8007dbc:	4a21      	ldr	r2, [pc, #132]	; (8007e44 <calibrate_sensor+0xc8>)
 8007dbe:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8007dc0:	4921      	ldr	r1, [pc, #132]	; (8007e48 <calibrate_sensor+0xcc>)
 8007dc2:	463b      	mov	r3, r7
 8007dc4:	4605      	mov	r5, r0
 8007dc6:	47a0      	blx	r4
 8007dc8:	4638      	mov	r0, r7
 8007dca:	f7fe fbd3 	bl	8006574 <acc_rss_integration_sensor_device_power_off>
 8007dce:	4628      	mov	r0, r5
 8007dd0:	b005      	add	sp, #20
 8007dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dd6:	4639      	mov	r1, r7
 8007dd8:	200b      	movs	r0, #11
 8007dda:	f000 ffa3 	bl	8008d24 <acc_probes_execute_primitive_probe>
 8007dde:	f8d8 2000 	ldr.w	r2, [r8]
 8007de2:	f8cd 9004 	str.w	r9, [sp, #4]
 8007de6:	4651      	mov	r1, sl
 8007de8:	4630      	mov	r0, r6
 8007dea:	4422      	add	r2, r4
 8007dec:	ab01      	add	r3, sp, #4
 8007dee:	f8cd b008 	str.w	fp, [sp, #8]
 8007df2:	f8cd 900c 	str.w	r9, [sp, #12]
 8007df6:	f000 fdf3 	bl	80089e0 <acc_sweep_manager_calibrate>
 8007dfa:	4605      	mov	r5, r0
 8007dfc:	b9c8      	cbnz	r0, 8007e32 <calibrate_sensor+0xb6>
 8007dfe:	4b10      	ldr	r3, [pc, #64]	; (8007e40 <calibrate_sensor+0xc4>)
 8007e00:	4a12      	ldr	r2, [pc, #72]	; (8007e4c <calibrate_sensor+0xd0>)
 8007e02:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8007e04:	4910      	ldr	r1, [pc, #64]	; (8007e48 <calibrate_sensor+0xcc>)
 8007e06:	463b      	mov	r3, r7
 8007e08:	47b0      	blx	r6
 8007e0a:	f8d8 3000 	ldr.w	r3, [r8]
 8007e0e:	441c      	add	r4, r3
 8007e10:	9a02      	ldr	r2, [sp, #8]
 8007e12:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007e16:	6462      	str	r2, [r4, #68]	; 0x44
 8007e18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e1c:	4639      	mov	r1, r7
 8007e1e:	200c      	movs	r0, #12
 8007e20:	f000 ff80 	bl	8008d24 <acc_probes_execute_primitive_probe>
 8007e24:	4638      	mov	r0, r7
 8007e26:	f7fe fba5 	bl	8006574 <acc_rss_integration_sensor_device_power_off>
 8007e2a:	4628      	mov	r0, r5
 8007e2c:	b005      	add	sp, #20
 8007e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e32:	f8d8 3000 	ldr.w	r3, [r8]
 8007e36:	441c      	add	r4, r3
 8007e38:	2301      	movs	r3, #1
 8007e3a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8007e3e:	e7e7      	b.n	8007e10 <calibrate_sensor+0x94>
 8007e40:	20000640 	.word	0x20000640
 8007e44:	08013998 	.word	0x08013998
 8007e48:	080139d4 	.word	0x080139d4
 8007e4c:	080139e4 	.word	0x080139e4
 8007e50:	200004e8 	.word	0x200004e8
 8007e54:	ff800000 	.word	0xff800000

08007e58 <acc_sensor_manager_hibernate_enter>:
 8007e58:	b538      	push	{r3, r4, r5, lr}
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	3004      	adds	r0, #4
 8007e5e:	699d      	ldr	r5, [r3, #24]
 8007e60:	f000 fdf6 	bl	8008a50 <acc_sweep_manager_wait_for_hibernate_ready>
 8007e64:	4604      	mov	r4, r0
 8007e66:	b930      	cbnz	r0, 8007e76 <acc_sensor_manager_hibernate_enter+0x1e>
 8007e68:	4b05      	ldr	r3, [pc, #20]	; (8007e80 <acc_sensor_manager_hibernate_enter+0x28>)
 8007e6a:	4a06      	ldr	r2, [pc, #24]	; (8007e84 <acc_sensor_manager_hibernate_enter+0x2c>)
 8007e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e6e:	4906      	ldr	r1, [pc, #24]	; (8007e88 <acc_sensor_manager_hibernate_enter+0x30>)
 8007e70:	4798      	blx	r3
 8007e72:	4620      	mov	r0, r4
 8007e74:	bd38      	pop	{r3, r4, r5, pc}
 8007e76:	4628      	mov	r0, r5
 8007e78:	f7fe fb82 	bl	8006580 <acc_rss_integration_sensor_device_hibernate_enter>
 8007e7c:	4620      	mov	r0, r4
 8007e7e:	bd38      	pop	{r3, r4, r5, pc}
 8007e80:	20000640 	.word	0x20000640
 8007e84:	08013a08 	.word	0x08013a08
 8007e88:	080139d4 	.word	0x080139d4

08007e8c <acc_sensor_manager_activate>:
 8007e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e90:	4e18      	ldr	r6, [pc, #96]	; (8007ef4 <acc_sensor_manager_activate+0x68>)
 8007e92:	7834      	ldrb	r4, [r6, #0]
 8007e94:	b114      	cbz	r4, 8007e9c <acc_sensor_manager_activate+0x10>
 8007e96:	4620      	mov	r0, r4
 8007e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e9c:	f7fe fb52 	bl	8006544 <acc_rss_integration_get_sensor_count>
 8007ea0:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8007ea4:	4914      	ldr	r1, [pc, #80]	; (8007ef8 <acc_sensor_manager_activate+0x6c>)
 8007ea6:	4f15      	ldr	r7, [pc, #84]	; (8007efc <acc_sensor_manager_activate+0x70>)
 8007ea8:	00c0      	lsls	r0, r0, #3
 8007eaa:	f240 1253 	movw	r2, #339	; 0x153
 8007eae:	f7fe fbab 	bl	8006608 <acc_rss_integration_mem_alloc_debug>
 8007eb2:	6038      	str	r0, [r7, #0]
 8007eb4:	2800      	cmp	r0, #0
 8007eb6:	d0ee      	beq.n	8007e96 <acc_sensor_manager_activate+0xa>
 8007eb8:	f8df 8044 	ldr.w	r8, [pc, #68]	; 8007f00 <acc_sensor_manager_activate+0x74>
 8007ebc:	4625      	mov	r5, r4
 8007ebe:	e00e      	b.n	8007ede <acc_sensor_manager_activate+0x52>
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	2248      	movs	r2, #72	; 0x48
 8007eca:	2100      	movs	r1, #0
 8007ecc:	f006 fd32 	bl	800e934 <memset>
 8007ed0:	3401      	adds	r4, #1
 8007ed2:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 8007ed6:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
 8007eda:	f8c0 8044 	str.w	r8, [r0, #68]	; 0x44
 8007ede:	f7fe fb31 	bl	8006544 <acc_rss_integration_get_sensor_count>
 8007ee2:	42a0      	cmp	r0, r4
 8007ee4:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 8007ee8:	d8ea      	bhi.n	8007ec0 <acc_sensor_manager_activate+0x34>
 8007eea:	2401      	movs	r4, #1
 8007eec:	7034      	strb	r4, [r6, #0]
 8007eee:	4620      	mov	r0, r4
 8007ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ef4:	200004e0 	.word	0x200004e0
 8007ef8:	080139d4 	.word	0x080139d4
 8007efc:	200004e8 	.word	0x200004e8
 8007f00:	ff800000 	.word	0xff800000

08007f04 <acc_sensor_manager_deactivate>:
 8007f04:	b510      	push	{r4, lr}
 8007f06:	4c05      	ldr	r4, [pc, #20]	; (8007f1c <acc_sensor_manager_deactivate+0x18>)
 8007f08:	7823      	ldrb	r3, [r4, #0]
 8007f0a:	b903      	cbnz	r3, 8007f0e <acc_sensor_manager_deactivate+0xa>
 8007f0c:	bd10      	pop	{r4, pc}
 8007f0e:	4b04      	ldr	r3, [pc, #16]	; (8007f20 <acc_sensor_manager_deactivate+0x1c>)
 8007f10:	6818      	ldr	r0, [r3, #0]
 8007f12:	f7fe fbbb 	bl	800668c <acc_rss_integration_mem_free>
 8007f16:	2300      	movs	r3, #0
 8007f18:	7023      	strb	r3, [r4, #0]
 8007f1a:	bd10      	pop	{r4, pc}
 8007f1c:	200004e0 	.word	0x200004e0
 8007f20:	200004e8 	.word	0x200004e8

08007f24 <acc_sensor_manager_acquire_adc_data>:
 8007f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f28:	7846      	ldrb	r6, [r0, #1]
 8007f2a:	461c      	mov	r4, r3
 8007f2c:	b13e      	cbz	r6, 8007f3e <acc_sensor_manager_acquire_adc_data+0x1a>
 8007f2e:	2300      	movs	r3, #0
 8007f30:	7023      	strb	r3, [r4, #0]
 8007f32:	7063      	strb	r3, [r4, #1]
 8007f34:	70a3      	strb	r3, [r4, #2]
 8007f36:	70e3      	strb	r3, [r4, #3]
 8007f38:	4630      	mov	r0, r6
 8007f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f3e:	f8df c0fc 	ldr.w	ip, [pc, #252]	; 800803c <acc_sensor_manager_acquire_adc_data+0x118>
 8007f42:	f8d0 9018 	ldr.w	r9, [r0, #24]
 8007f46:	f8dc c000 	ldr.w	ip, [ip]
 8007f4a:	4605      	mov	r5, r0
 8007f4c:	4688      	mov	r8, r1
 8007f4e:	4617      	mov	r7, r2
 8007f50:	f1bc 0f00 	cmp.w	ip, #0
 8007f54:	d014      	beq.n	8007f80 <acc_sensor_manager_acquire_adc_data+0x5c>
 8007f56:	f8dc a00c 	ldr.w	sl, [ip, #12]
 8007f5a:	f1ba 0f00 	cmp.w	sl, #0
 8007f5e:	d00f      	beq.n	8007f80 <acc_sensor_manager_acquire_adc_data+0x5c>
 8007f60:	47d0      	blx	sl
 8007f62:	2800      	cmp	r0, #0
 8007f64:	d0e8      	beq.n	8007f38 <acc_sensor_manager_acquire_adc_data+0x14>
 8007f66:	786e      	ldrb	r6, [r5, #1]
 8007f68:	2e00      	cmp	r6, #0
 8007f6a:	d1e5      	bne.n	8007f38 <acc_sensor_manager_acquire_adc_data+0x14>
 8007f6c:	463b      	mov	r3, r7
 8007f6e:	4642      	mov	r2, r8
 8007f70:	4649      	mov	r1, r9
 8007f72:	2601      	movs	r6, #1
 8007f74:	2002      	movs	r0, #2
 8007f76:	f000 fea7 	bl	8008cc8 <acc_probes_execute_uint16>
 8007f7a:	4630      	mov	r0, r6
 8007f7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f80:	2300      	movs	r3, #0
 8007f82:	7023      	strb	r3, [r4, #0]
 8007f84:	7063      	strb	r3, [r4, #1]
 8007f86:	70a3      	strb	r3, [r4, #2]
 8007f88:	70e3      	strb	r3, [r4, #3]
 8007f8a:	f895 a000 	ldrb.w	sl, [r5]
 8007f8e:	f1ba 0f02 	cmp.w	sl, #2
 8007f92:	d031      	beq.n	8007ff8 <acc_sensor_manager_acquire_adc_data+0xd4>
 8007f94:	f1ba 0f01 	cmp.w	sl, #1
 8007f98:	d034      	beq.n	8008004 <acc_sensor_manager_acquire_adc_data+0xe0>
 8007f9a:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8007f9c:	1d28      	adds	r0, r5, #4
 8007f9e:	f000 fd5f 	bl	8008a60 <acc_sweep_manager_acquire_adc_data>
 8007fa2:	6843      	ldr	r3, [r0, #4]
 8007fa4:	b30b      	cbz	r3, 8007fea <acc_sensor_manager_acquire_adc_data+0xc6>
 8007fa6:	4543      	cmp	r3, r8
 8007fa8:	d13b      	bne.n	8008022 <acc_sensor_manager_acquire_adc_data+0xfe>
 8007faa:	8843      	ldrh	r3, [r0, #2]
 8007fac:	42bb      	cmp	r3, r7
 8007fae:	d133      	bne.n	8008018 <acc_sensor_manager_acquire_adc_data+0xf4>
 8007fb0:	4b1e      	ldr	r3, [pc, #120]	; (800802c <acc_sensor_manager_acquire_adc_data+0x108>)
 8007fb2:	68c1      	ldr	r1, [r0, #12]
 8007fb4:	681a      	ldr	r2, [r3, #0]
 8007fb6:	7a06      	ldrb	r6, [r0, #8]
 8007fb8:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8007fbc:	00db      	lsls	r3, r3, #3
 8007fbe:	3b48      	subs	r3, #72	; 0x48
 8007fc0:	4413      	add	r3, r2
 8007fc2:	7802      	ldrb	r2, [r0, #0]
 8007fc4:	7022      	strb	r2, [r4, #0]
 8007fc6:	7842      	ldrb	r2, [r0, #1]
 8007fc8:	7062      	strb	r2, [r4, #1]
 8007fca:	f1ba 0f02 	cmp.w	sl, #2
 8007fce:	7a42      	ldrb	r2, [r0, #9]
 8007fd0:	70e2      	strb	r2, [r4, #3]
 8007fd2:	70a6      	strb	r6, [r4, #2]
 8007fd4:	6459      	str	r1, [r3, #68]	; 0x44
 8007fd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007fda:	d017      	beq.n	800800c <acc_sensor_manager_acquire_adc_data+0xe8>
 8007fdc:	f1ba 0f01 	cmp.w	sl, #1
 8007fe0:	d1c1      	bne.n	8007f66 <acc_sensor_manager_acquire_adc_data+0x42>
 8007fe2:	4628      	mov	r0, r5
 8007fe4:	f7ff ff38 	bl	8007e58 <acc_sensor_manager_hibernate_enter>
 8007fe8:	e7bd      	b.n	8007f66 <acc_sensor_manager_acquire_adc_data+0x42>
 8007fea:	4911      	ldr	r1, [pc, #68]	; (8008030 <acc_sensor_manager_acquire_adc_data+0x10c>)
 8007fec:	4a11      	ldr	r2, [pc, #68]	; (8008034 <acc_sensor_manager_acquire_adc_data+0x110>)
 8007fee:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 8007ff0:	4911      	ldr	r1, [pc, #68]	; (8008038 <acc_sensor_manager_acquire_adc_data+0x114>)
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	47a0      	blx	r4
 8007ff6:	e79f      	b.n	8007f38 <acc_sensor_manager_acquire_adc_data+0x14>
 8007ff8:	4628      	mov	r0, r5
 8007ffa:	f7ff fea1 	bl	8007d40 <acc_sensor_manager_power_on_and_start_sensor>
 8007ffe:	2800      	cmp	r0, #0
 8008000:	d1cb      	bne.n	8007f9a <acc_sensor_manager_acquire_adc_data+0x76>
 8008002:	e799      	b.n	8007f38 <acc_sensor_manager_acquire_adc_data+0x14>
 8008004:	4648      	mov	r0, r9
 8008006:	f7fe fac3 	bl	8006590 <acc_rss_integration_sensor_device_hibernate_exit>
 800800a:	e7c6      	b.n	8007f9a <acc_sensor_manager_acquire_adc_data+0x76>
 800800c:	4648      	mov	r0, r9
 800800e:	f7fe fab1 	bl	8006574 <acc_rss_integration_sensor_device_power_off>
 8008012:	2300      	movs	r3, #0
 8008014:	70eb      	strb	r3, [r5, #3]
 8008016:	e7a6      	b.n	8007f66 <acc_sensor_manager_acquire_adc_data+0x42>
 8008018:	4807      	ldr	r0, [pc, #28]	; (8008038 <acc_sensor_manager_acquire_adc_data+0x114>)
 800801a:	f240 11c9 	movw	r1, #457	; 0x1c9
 800801e:	f000 fd6b 	bl	8008af8 <acc_assert_fail>
 8008022:	4805      	ldr	r0, [pc, #20]	; (8008038 <acc_sensor_manager_acquire_adc_data+0x114>)
 8008024:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 8008028:	f000 fd66 	bl	8008af8 <acc_assert_fail>
 800802c:	200004e8 	.word	0x200004e8
 8008030:	20000640 	.word	0x20000640
 8008034:	08013a28 	.word	0x08013a28
 8008038:	080139d4 	.word	0x080139d4
 800803c:	200004e4 	.word	0x200004e4

08008040 <acc_sensor_manager_prepare_radar_engine>:
 8008040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008044:	f100 0804 	add.w	r8, r0, #4
 8008048:	4617      	mov	r7, r2
 800804a:	4605      	mov	r5, r0
 800804c:	2234      	movs	r2, #52	; 0x34
 800804e:	460c      	mov	r4, r1
 8008050:	4640      	mov	r0, r8
 8008052:	2100      	movs	r1, #0
 8008054:	461e      	mov	r6, r3
 8008056:	f006 fc6d 	bl	800e934 <memset>
 800805a:	4b1e      	ldr	r3, [pc, #120]	; (80080d4 <acc_sensor_manager_prepare_radar_engine+0x94>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	463a      	mov	r2, r7
 8008060:	4640      	mov	r0, r8
 8008062:	b33b      	cbz	r3, 80080b4 <acc_sensor_manager_prepare_radar_engine+0x74>
 8008064:	f8d3 9000 	ldr.w	r9, [r3]
 8008068:	f1b9 0f00 	cmp.w	r9, #0
 800806c:	d022      	beq.n	80080b4 <acc_sensor_manager_prepare_radar_engine+0x74>
 800806e:	4633      	mov	r3, r6
 8008070:	4621      	mov	r1, r4
 8008072:	47c8      	blx	r9
 8008074:	4607      	mov	r7, r0
 8008076:	4620      	mov	r0, r4
 8008078:	f7fd fefe 	bl	8005e78 <acc_base_configuration_power_save_mode_get>
 800807c:	b320      	cbz	r0, 80080c8 <acc_sensor_manager_prepare_radar_engine+0x88>
 800807e:	2804      	cmp	r0, #4
 8008080:	d025      	beq.n	80080ce <acc_sensor_manager_prepare_radar_engine+0x8e>
 8008082:	2300      	movs	r3, #0
 8008084:	702b      	strb	r3, [r5, #0]
 8008086:	4620      	mov	r0, r4
 8008088:	f7fd ffc0 	bl	800600c <acc_base_configuration_repetition_mode_get>
 800808c:	fab0 f280 	clz	r2, r0
 8008090:	0952      	lsrs	r2, r2, #5
 8008092:	706a      	strb	r2, [r5, #1]
 8008094:	4620      	mov	r0, r4
 8008096:	f7fe f8cf 	bl	8006238 <acc_base_configuration_asynchronous_measurement_get>
 800809a:	70a8      	strb	r0, [r5, #2]
 800809c:	4620      	mov	r0, r4
 800809e:	f7fd fe9b 	bl	8005dd8 <acc_base_configuration_sensor_get>
 80080a2:	4632      	mov	r2, r6
 80080a4:	4601      	mov	r1, r0
 80080a6:	231a      	movs	r3, #26
 80080a8:	2005      	movs	r0, #5
 80080aa:	f000 fe23 	bl	8008cf4 <acc_probes_execute_struct>
 80080ae:	4638      	mov	r0, r7
 80080b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080b4:	4633      	mov	r3, r6
 80080b6:	4621      	mov	r1, r4
 80080b8:	f000 fbec 	bl	8008894 <acc_sweep_manager_prepare>
 80080bc:	4607      	mov	r7, r0
 80080be:	4620      	mov	r0, r4
 80080c0:	f7fd feda 	bl	8005e78 <acc_base_configuration_power_save_mode_get>
 80080c4:	2800      	cmp	r0, #0
 80080c6:	d1da      	bne.n	800807e <acc_sensor_manager_prepare_radar_engine+0x3e>
 80080c8:	2302      	movs	r3, #2
 80080ca:	702b      	strb	r3, [r5, #0]
 80080cc:	e7db      	b.n	8008086 <acc_sensor_manager_prepare_radar_engine+0x46>
 80080ce:	2301      	movs	r3, #1
 80080d0:	702b      	strb	r3, [r5, #0]
 80080d2:	e7d8      	b.n	8008086 <acc_sensor_manager_prepare_radar_engine+0x46>
 80080d4:	200004e4 	.word	0x200004e4

080080d8 <acc_sensor_manager_prepare_measurement>:
 80080d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080dc:	4680      	mov	r8, r0
 80080de:	b083      	sub	sp, #12
 80080e0:	4608      	mov	r0, r1
 80080e2:	460e      	mov	r6, r1
 80080e4:	4617      	mov	r7, r2
 80080e6:	469a      	mov	sl, r3
 80080e8:	f7fd fe76 	bl	8005dd8 <acc_base_configuration_sensor_get>
 80080ec:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 80081d4 <acc_sensor_manager_prepare_measurement+0xfc>
 80080f0:	4605      	mov	r5, r0
 80080f2:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
 80080f6:	4630      	mov	r0, r6
 80080f8:	f7fe f894 	bl	8006224 <acc_base_configuration_noise_deviation_override_get>
 80080fc:	00e4      	lsls	r4, r4, #3
 80080fe:	f8d9 1000 	ldr.w	r1, [r9]
 8008102:	4b32      	ldr	r3, [pc, #200]	; (80081cc <acc_sensor_manager_prepare_measurement+0xf4>)
 8008104:	4a32      	ldr	r2, [pc, #200]	; (80081d0 <acc_sensor_manager_prepare_measurement+0xf8>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	3c48      	subs	r4, #72	; 0x48
 800810a:	440c      	add	r4, r1
 800810c:	2100      	movs	r1, #0
 800810e:	4683      	mov	fp, r0
 8008110:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008114:	6462      	str	r2, [r4, #68]	; 0x44
 8008116:	b163      	cbz	r3, 8008132 <acc_sensor_manager_prepare_measurement+0x5a>
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	b153      	cbz	r3, 8008132 <acc_sensor_manager_prepare_measurement+0x5a>
 800811c:	4652      	mov	r2, sl
 800811e:	4630      	mov	r0, r6
 8008120:	4639      	mov	r1, r7
 8008122:	4798      	blx	r3
 8008124:	4604      	mov	r4, r0
 8008126:	2800      	cmp	r0, #0
 8008128:	d14b      	bne.n	80081c2 <acc_sensor_manager_prepare_measurement+0xea>
 800812a:	4620      	mov	r0, r4
 800812c:	b003      	add	sp, #12
 800812e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008132:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8008136:	f8c8 a038 	str.w	sl, [r8, #56]	; 0x38
 800813a:	b17b      	cbz	r3, 800815c <acc_sensor_manager_prepare_measurement+0x84>
 800813c:	f1bb 0f00 	cmp.w	fp, #0
 8008140:	d01b      	beq.n	800817a <acc_sensor_manager_prepare_measurement+0xa2>
 8008142:	f8a7 b014 	strh.w	fp, [r7, #20]
 8008146:	463a      	mov	r2, r7
 8008148:	4629      	mov	r1, r5
 800814a:	2320      	movs	r3, #32
 800814c:	200e      	movs	r0, #14
 800814e:	f000 fdd1 	bl	8008cf4 <acc_probes_execute_struct>
 8008152:	2401      	movs	r4, #1
 8008154:	4620      	mov	r0, r4
 8008156:	b003      	add	sp, #12
 8008158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800815c:	f108 0104 	add.w	r1, r8, #4
 8008160:	4652      	mov	r2, sl
 8008162:	4628      	mov	r0, r5
 8008164:	9101      	str	r1, [sp, #4]
 8008166:	f7ff fe09 	bl	8007d7c <calibrate_sensor>
 800816a:	9901      	ldr	r1, [sp, #4]
 800816c:	4604      	mov	r4, r0
 800816e:	2800      	cmp	r0, #0
 8008170:	d1e4      	bne.n	800813c <acc_sensor_manager_prepare_measurement+0x64>
 8008172:	4608      	mov	r0, r1
 8008174:	f000 fc28 	bl	80089c8 <acc_sweep_manager_release>
 8008178:	e7d7      	b.n	800812a <acc_sensor_manager_prepare_measurement+0x52>
 800817a:	4630      	mov	r0, r6
 800817c:	f7fe f83e 	bl	80061fc <acc_base_configuration_noise_level_normalization_get>
 8008180:	2800      	cmp	r0, #0
 8008182:	d0e0      	beq.n	8008146 <acc_sensor_manager_prepare_measurement+0x6e>
 8008184:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8008188:	4630      	mov	r0, r6
 800818a:	f7fe f9ed 	bl	8006568 <acc_rss_integration_sensor_device_power_on>
 800818e:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 8008192:	f8d9 1000 	ldr.w	r1, [r9]
 8008196:	f8d8 2038 	ldr.w	r2, [r8, #56]	; 0x38
 800819a:	00db      	lsls	r3, r3, #3
 800819c:	3b48      	subs	r3, #72	; 0x48
 800819e:	f108 0804 	add.w	r8, r8, #4
 80081a2:	4419      	add	r1, r3
 80081a4:	4640      	mov	r0, r8
 80081a6:	f107 0314 	add.w	r3, r7, #20
 80081aa:	f000 fc23 	bl	80089f4 <acc_sweep_manager_measure_noise>
 80081ae:	4604      	mov	r4, r0
 80081b0:	4630      	mov	r0, r6
 80081b2:	f7fe f9df 	bl	8006574 <acc_rss_integration_sensor_device_power_off>
 80081b6:	2c00      	cmp	r4, #0
 80081b8:	d1c5      	bne.n	8008146 <acc_sensor_manager_prepare_measurement+0x6e>
 80081ba:	4640      	mov	r0, r8
 80081bc:	f000 fc04 	bl	80089c8 <acc_sweep_manager_release>
 80081c0:	e7b3      	b.n	800812a <acc_sensor_manager_prepare_measurement+0x52>
 80081c2:	f1bb 0f00 	cmp.w	fp, #0
 80081c6:	d0be      	beq.n	8008146 <acc_sensor_manager_prepare_measurement+0x6e>
 80081c8:	e7bb      	b.n	8008142 <acc_sensor_manager_prepare_measurement+0x6a>
 80081ca:	bf00      	nop
 80081cc:	200004e4 	.word	0x200004e4
 80081d0:	ff800000 	.word	0xff800000
 80081d4:	200004e8 	.word	0x200004e8

080081d8 <acc_sensor_manager_start_measurement>:
 80081d8:	4b1b      	ldr	r3, [pc, #108]	; (8008248 <acc_sensor_manager_start_measurement+0x70>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	b570      	push	{r4, r5, r6, lr}
 80081de:	4604      	mov	r4, r0
 80081e0:	b123      	cbz	r3, 80081ec <acc_sensor_manager_start_measurement+0x14>
 80081e2:	689b      	ldr	r3, [r3, #8]
 80081e4:	b113      	cbz	r3, 80081ec <acc_sensor_manager_start_measurement+0x14>
 80081e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80081ea:	4718      	bx	r3
 80081ec:	7823      	ldrb	r3, [r4, #0]
 80081ee:	2b02      	cmp	r3, #2
 80081f0:	d008      	beq.n	8008204 <acc_sensor_manager_start_measurement+0x2c>
 80081f2:	4620      	mov	r0, r4
 80081f4:	f7ff fda4 	bl	8007d40 <acc_sensor_manager_power_on_and_start_sensor>
 80081f8:	b160      	cbz	r0, 8008214 <acc_sensor_manager_start_measurement+0x3c>
 80081fa:	78a3      	ldrb	r3, [r4, #2]
 80081fc:	b12b      	cbz	r3, 800820a <acc_sensor_manager_start_measurement+0x32>
 80081fe:	7823      	ldrb	r3, [r4, #0]
 8008200:	2b01      	cmp	r3, #1
 8008202:	d010      	beq.n	8008226 <acc_sensor_manager_start_measurement+0x4e>
 8008204:	2501      	movs	r5, #1
 8008206:	4628      	mov	r0, r5
 8008208:	bd70      	pop	{r4, r5, r6, pc}
 800820a:	1d25      	adds	r5, r4, #4
 800820c:	4628      	mov	r0, r5
 800820e:	f000 fc23 	bl	8008a58 <acc_sweep_manager_measure>
 8008212:	b910      	cbnz	r0, 800821a <acc_sensor_manager_start_measurement+0x42>
 8008214:	2500      	movs	r5, #0
 8008216:	4628      	mov	r0, r5
 8008218:	bd70      	pop	{r4, r5, r6, pc}
 800821a:	4628      	mov	r0, r5
 800821c:	f000 fc12 	bl	8008a44 <acc_sweep_manager_wait_for_data>
 8008220:	2800      	cmp	r0, #0
 8008222:	d1ec      	bne.n	80081fe <acc_sensor_manager_start_measurement+0x26>
 8008224:	e7f6      	b.n	8008214 <acc_sensor_manager_start_measurement+0x3c>
 8008226:	1d25      	adds	r5, r4, #4
 8008228:	4628      	mov	r0, r5
 800822a:	f000 fc0b 	bl	8008a44 <acc_sweep_manager_wait_for_data>
 800822e:	2800      	cmp	r0, #0
 8008230:	d0f0      	beq.n	8008214 <acc_sensor_manager_start_measurement+0x3c>
 8008232:	4628      	mov	r0, r5
 8008234:	f000 fc10 	bl	8008a58 <acc_sweep_manager_measure>
 8008238:	4605      	mov	r5, r0
 800823a:	2800      	cmp	r0, #0
 800823c:	d0ea      	beq.n	8008214 <acc_sensor_manager_start_measurement+0x3c>
 800823e:	4620      	mov	r0, r4
 8008240:	f7ff fe0a 	bl	8007e58 <acc_sensor_manager_hibernate_enter>
 8008244:	e7df      	b.n	8008206 <acc_sensor_manager_start_measurement+0x2e>
 8008246:	bf00      	nop
 8008248:	200004e4 	.word	0x200004e4

0800824c <acc_sensor_manager_stop_measurement>:
 800824c:	78c3      	ldrb	r3, [r0, #3]
 800824e:	b903      	cbnz	r3, 8008252 <acc_sensor_manager_stop_measurement+0x6>
 8008250:	4770      	bx	lr
 8008252:	b510      	push	{r4, lr}
 8008254:	4604      	mov	r4, r0
 8008256:	6980      	ldr	r0, [r0, #24]
 8008258:	f7fe f98c 	bl	8006574 <acc_rss_integration_sensor_device_power_off>
 800825c:	2300      	movs	r3, #0
 800825e:	70e3      	strb	r3, [r4, #3]
 8008260:	bd10      	pop	{r4, pc}
 8008262:	bf00      	nop

08008264 <acc_sensor_manager_release_measurement>:
 8008264:	6983      	ldr	r3, [r0, #24]
 8008266:	b173      	cbz	r3, 8008286 <acc_sensor_manager_release_measurement+0x22>
 8008268:	4a07      	ldr	r2, [pc, #28]	; (8008288 <acc_sensor_manager_release_measurement+0x24>)
 800826a:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800826e:	6812      	ldr	r2, [r2, #0]
 8008270:	00db      	lsls	r3, r3, #3
 8008272:	3b48      	subs	r3, #72	; 0x48
 8008274:	4413      	add	r3, r2
 8008276:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800827a:	b90a      	cbnz	r2, 8008280 <acc_sensor_manager_release_measurement+0x1c>
 800827c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008280:	3004      	adds	r0, #4
 8008282:	f000 bba1 	b.w	80089c8 <acc_sweep_manager_release>
 8008286:	4770      	bx	lr
 8008288:	200004e8 	.word	0x200004e8

0800828c <acc_sensor_manager_get_sensor_id>:
 800828c:	6980      	ldr	r0, [r0, #24]
 800828e:	4770      	bx	lr

08008290 <acc_sensor_protocol_r2_prepare_load>:
 8008290:	b570      	push	{r4, r5, r6, lr}
 8008292:	b084      	sub	sp, #16
 8008294:	4604      	mov	r4, r0
 8008296:	4608      	mov	r0, r1
 8008298:	4611      	mov	r1, r2
 800829a:	461a      	mov	r2, r3
 800829c:	9b08      	ldr	r3, [sp, #32]
 800829e:	f7ff fcef 	bl	8007c80 <acc_sensor_r2_prepare_load_confmem>
 80082a2:	2300      	movs	r3, #0
 80082a4:	4620      	mov	r0, r4
 80082a6:	f10d 020e 	add.w	r2, sp, #14
 80082aa:	212a      	movs	r1, #42	; 0x2a
 80082ac:	f8ad 300e 	strh.w	r3, [sp, #14]
 80082b0:	f000 fd50 	bl	8008d54 <acc_sensor_reg_read>
 80082b4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80082b8:	065b      	lsls	r3, r3, #25
 80082ba:	d436      	bmi.n	800832a <acc_sensor_protocol_r2_prepare_load+0x9a>
 80082bc:	f10d 020e 	add.w	r2, sp, #14
 80082c0:	2500      	movs	r5, #0
 80082c2:	2111      	movs	r1, #17
 80082c4:	4620      	mov	r0, r4
 80082c6:	f8ad 500e 	strh.w	r5, [sp, #14]
 80082ca:	f000 fd43 	bl	8008d54 <acc_sensor_reg_read>
 80082ce:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80082d2:	f413 6680 	ands.w	r6, r3, #1024	; 0x400
 80082d6:	d00c      	beq.n	80082f2 <acc_sensor_protocol_r2_prepare_load+0x62>
 80082d8:	4b1b      	ldr	r3, [pc, #108]	; (8008348 <acc_sensor_protocol_r2_prepare_load+0xb8>)
 80082da:	4a1c      	ldr	r2, [pc, #112]	; (800834c <acc_sensor_protocol_r2_prepare_load+0xbc>)
 80082dc:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 80082de:	491c      	ldr	r1, [pc, #112]	; (8008350 <acc_sensor_protocol_r2_prepare_load+0xc0>)
 80082e0:	4623      	mov	r3, r4
 80082e2:	4628      	mov	r0, r5
 80082e4:	47b0      	blx	r6
 80082e6:	4620      	mov	r0, r4
 80082e8:	f004 f888 	bl	800c3fc <acc_sensor_diagnostics_r2_sensor_status>
 80082ec:	4628      	mov	r0, r5
 80082ee:	b004      	add	sp, #16
 80082f0:	bd70      	pop	{r4, r5, r6, pc}
 80082f2:	2501      	movs	r5, #1
 80082f4:	4629      	mov	r1, r5
 80082f6:	4620      	mov	r0, r4
 80082f8:	9500      	str	r5, [sp, #0]
 80082fa:	2380      	movs	r3, #128	; 0x80
 80082fc:	2202      	movs	r2, #2
 80082fe:	f000 fd4f 	bl	8008da0 <acc_sensor_reg_field_write>
 8008302:	2380      	movs	r3, #128	; 0x80
 8008304:	461a      	mov	r2, r3
 8008306:	4620      	mov	r0, r4
 8008308:	9600      	str	r6, [sp, #0]
 800830a:	2107      	movs	r1, #7
 800830c:	f000 fd48 	bl	8008da0 <acc_sensor_reg_field_write>
 8008310:	462a      	mov	r2, r5
 8008312:	4620      	mov	r0, r4
 8008314:	2105      	movs	r1, #5
 8008316:	f000 fd33 	bl	8008d80 <acc_sensor_reg_write>
 800831a:	4620      	mov	r0, r4
 800831c:	2203      	movs	r2, #3
 800831e:	217a      	movs	r1, #122	; 0x7a
 8008320:	f000 fd2e 	bl	8008d80 <acc_sensor_reg_write>
 8008324:	4628      	mov	r0, r5
 8008326:	b004      	add	sp, #16
 8008328:	bd70      	pop	{r4, r5, r6, pc}
 800832a:	f7fe f9c1 	bl	80066b0 <acc_rss_integration_log_level>
 800832e:	b130      	cbz	r0, 800833e <acc_sensor_protocol_r2_prepare_load+0xae>
 8008330:	4b05      	ldr	r3, [pc, #20]	; (8008348 <acc_sensor_protocol_r2_prepare_load+0xb8>)
 8008332:	4a08      	ldr	r2, [pc, #32]	; (8008354 <acc_sensor_protocol_r2_prepare_load+0xc4>)
 8008334:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8008336:	4906      	ldr	r1, [pc, #24]	; (8008350 <acc_sensor_protocol_r2_prepare_load+0xc0>)
 8008338:	4623      	mov	r3, r4
 800833a:	2001      	movs	r0, #1
 800833c:	47a8      	blx	r5
 800833e:	4620      	mov	r0, r4
 8008340:	f004 f85c 	bl	800c3fc <acc_sensor_diagnostics_r2_sensor_status>
 8008344:	e7ba      	b.n	80082bc <acc_sensor_protocol_r2_prepare_load+0x2c>
 8008346:	bf00      	nop
 8008348:	20000640 	.word	0x20000640
 800834c:	08013a80 	.word	0x08013a80
 8008350:	08013a6c 	.word	0x08013a6c
 8008354:	08013a40 	.word	0x08013a40

08008358 <acc_sensor_protocol_r2_run_program>:
 8008358:	b5f0      	push	{r4, r5, r6, r7, lr}
 800835a:	b085      	sub	sp, #20
 800835c:	4604      	mov	r4, r0
 800835e:	460e      	mov	r6, r1
 8008360:	f7fe f9a6 	bl	80066b0 <acc_rss_integration_log_level>
 8008364:	2803      	cmp	r0, #3
 8008366:	d907      	bls.n	8008378 <acc_sensor_protocol_r2_run_program+0x20>
 8008368:	4b1e      	ldr	r3, [pc, #120]	; (80083e4 <acc_sensor_protocol_r2_run_program+0x8c>)
 800836a:	9600      	str	r6, [sp, #0]
 800836c:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 800836e:	4a1e      	ldr	r2, [pc, #120]	; (80083e8 <acc_sensor_protocol_r2_run_program+0x90>)
 8008370:	491e      	ldr	r1, [pc, #120]	; (80083ec <acc_sensor_protocol_r2_run_program+0x94>)
 8008372:	4623      	mov	r3, r4
 8008374:	2004      	movs	r0, #4
 8008376:	47a8      	blx	r5
 8008378:	f10d 020e 	add.w	r2, sp, #14
 800837c:	2700      	movs	r7, #0
 800837e:	2111      	movs	r1, #17
 8008380:	4620      	mov	r0, r4
 8008382:	f8ad 700e 	strh.w	r7, [sp, #14]
 8008386:	f000 fce5 	bl	8008d54 <acc_sensor_reg_read>
 800838a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 800838e:	f412 6580 	ands.w	r5, r2, #1024	; 0x400
 8008392:	d11a      	bne.n	80083ca <acc_sensor_protocol_r2_run_program+0x72>
 8008394:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008398:	d309      	bcc.n	80083ae <acc_sensor_protocol_r2_run_program+0x56>
 800839a:	4b12      	ldr	r3, [pc, #72]	; (80083e4 <acc_sensor_protocol_r2_run_program+0x8c>)
 800839c:	4a14      	ldr	r2, [pc, #80]	; (80083f0 <acc_sensor_protocol_r2_run_program+0x98>)
 800839e:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 80083a0:	4912      	ldr	r1, [pc, #72]	; (80083ec <acc_sensor_protocol_r2_run_program+0x94>)
 80083a2:	4628      	mov	r0, r5
 80083a4:	4633      	mov	r3, r6
 80083a6:	47a0      	blx	r4
 80083a8:	4628      	mov	r0, r5
 80083aa:	b005      	add	sp, #20
 80083ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083ae:	462a      	mov	r2, r5
 80083b0:	4620      	mov	r0, r4
 80083b2:	2110      	movs	r1, #16
 80083b4:	f000 fce4 	bl	8008d80 <acc_sensor_reg_write>
 80083b8:	4620      	mov	r0, r4
 80083ba:	f446 6280 	orr.w	r2, r6, #1024	; 0x400
 80083be:	2110      	movs	r1, #16
 80083c0:	f000 fcde 	bl	8008d80 <acc_sensor_reg_write>
 80083c4:	2001      	movs	r0, #1
 80083c6:	b005      	add	sp, #20
 80083c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083ca:	4b06      	ldr	r3, [pc, #24]	; (80083e4 <acc_sensor_protocol_r2_run_program+0x8c>)
 80083cc:	4a09      	ldr	r2, [pc, #36]	; (80083f4 <acc_sensor_protocol_r2_run_program+0x9c>)
 80083ce:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 80083d0:	4906      	ldr	r1, [pc, #24]	; (80083ec <acc_sensor_protocol_r2_run_program+0x94>)
 80083d2:	4623      	mov	r3, r4
 80083d4:	4638      	mov	r0, r7
 80083d6:	47a8      	blx	r5
 80083d8:	4620      	mov	r0, r4
 80083da:	f004 f80f 	bl	800c3fc <acc_sensor_diagnostics_r2_sensor_status>
 80083de:	4638      	mov	r0, r7
 80083e0:	b005      	add	sp, #20
 80083e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083e4:	20000640 	.word	0x20000640
 80083e8:	08013ab0 	.word	0x08013ab0
 80083ec:	08013a6c 	.word	0x08013a6c
 80083f0:	08013b04 	.word	0x08013b04
 80083f4:	08013ad4 	.word	0x08013ad4

080083f8 <acc_sensor_protocol_r2_terminate_program>:
 80083f8:	b530      	push	{r4, r5, lr}
 80083fa:	b083      	sub	sp, #12
 80083fc:	2300      	movs	r3, #0
 80083fe:	f10d 0206 	add.w	r2, sp, #6
 8008402:	2111      	movs	r1, #17
 8008404:	f8ad 3006 	strh.w	r3, [sp, #6]
 8008408:	4605      	mov	r5, r0
 800840a:	f000 fca3 	bl	8008d54 <acc_sensor_reg_read>
 800840e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8008412:	f413 6480 	ands.w	r4, r3, #1024	; 0x400
 8008416:	d10b      	bne.n	8008430 <acc_sensor_protocol_r2_terminate_program+0x38>
 8008418:	4b09      	ldr	r3, [pc, #36]	; (8008440 <acc_sensor_protocol_r2_terminate_program+0x48>)
 800841a:	4a0a      	ldr	r2, [pc, #40]	; (8008444 <acc_sensor_protocol_r2_terminate_program+0x4c>)
 800841c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800841e:	490a      	ldr	r1, [pc, #40]	; (8008448 <acc_sensor_protocol_r2_terminate_program+0x50>)
 8008420:	4620      	mov	r0, r4
 8008422:	4798      	blx	r3
 8008424:	4628      	mov	r0, r5
 8008426:	f003 ffe9 	bl	800c3fc <acc_sensor_diagnostics_r2_sensor_status>
 800842a:	4620      	mov	r0, r4
 800842c:	b003      	add	sp, #12
 800842e:	bd30      	pop	{r4, r5, pc}
 8008430:	4628      	mov	r0, r5
 8008432:	2201      	movs	r2, #1
 8008434:	2174      	movs	r1, #116	; 0x74
 8008436:	f000 fca3 	bl	8008d80 <acc_sensor_reg_write>
 800843a:	2001      	movs	r0, #1
 800843c:	b003      	add	sp, #12
 800843e:	bd30      	pop	{r4, r5, pc}
 8008440:	20000640 	.word	0x20000640
 8008444:	08013b20 	.word	0x08013b20
 8008448:	08013a6c 	.word	0x08013a6c

0800844c <acc_sensor_protocol_r2_is_sensor_running>:
 800844c:	b500      	push	{lr}
 800844e:	b083      	sub	sp, #12
 8008450:	2300      	movs	r3, #0
 8008452:	f10d 0206 	add.w	r2, sp, #6
 8008456:	2111      	movs	r1, #17
 8008458:	f8ad 3006 	strh.w	r3, [sp, #6]
 800845c:	f000 fc7a 	bl	8008d54 <acc_sensor_reg_read>
 8008460:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8008464:	f3c0 2080 	ubfx	r0, r0, #10, #1
 8008468:	b003      	add	sp, #12
 800846a:	f85d fb04 	ldr.w	pc, [sp], #4
 800846e:	bf00      	nop

08008470 <acc_sensor_protocol_r2_ack_event>:
 8008470:	b570      	push	{r4, r5, r6, lr}
 8008472:	b082      	sub	sp, #8
 8008474:	2300      	movs	r3, #0
 8008476:	f10d 0206 	add.w	r2, sp, #6
 800847a:	2138      	movs	r1, #56	; 0x38
 800847c:	4605      	mov	r5, r0
 800847e:	f8ad 3006 	strh.w	r3, [sp, #6]
 8008482:	f000 fc67 	bl	8008d54 <acc_sensor_reg_read>
 8008486:	f8bd 4006 	ldrh.w	r4, [sp, #6]
 800848a:	b114      	cbz	r4, 8008492 <acc_sensor_protocol_r2_ack_event+0x22>
 800848c:	2001      	movs	r0, #1
 800848e:	b002      	add	sp, #8
 8008490:	bd70      	pop	{r4, r5, r6, pc}
 8008492:	4b06      	ldr	r3, [pc, #24]	; (80084ac <acc_sensor_protocol_r2_ack_event+0x3c>)
 8008494:	4a06      	ldr	r2, [pc, #24]	; (80084b0 <acc_sensor_protocol_r2_ack_event+0x40>)
 8008496:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8008498:	4906      	ldr	r1, [pc, #24]	; (80084b4 <acc_sensor_protocol_r2_ack_event+0x44>)
 800849a:	462b      	mov	r3, r5
 800849c:	4620      	mov	r0, r4
 800849e:	47b0      	blx	r6
 80084a0:	4628      	mov	r0, r5
 80084a2:	f003 ffab 	bl	800c3fc <acc_sensor_diagnostics_r2_sensor_status>
 80084a6:	4620      	mov	r0, r4
 80084a8:	b002      	add	sp, #8
 80084aa:	bd70      	pop	{r4, r5, r6, pc}
 80084ac:	20000640 	.word	0x20000640
 80084b0:	08013b54 	.word	0x08013b54
 80084b4:	08013a6c 	.word	0x08013a6c

080084b8 <acc_sensor_protocol_r2_get_event>:
 80084b8:	b570      	push	{r4, r5, r6, lr}
 80084ba:	460c      	mov	r4, r1
 80084bc:	b084      	sub	sp, #16
 80084be:	b301      	cbz	r1, 8008502 <acc_sensor_protocol_r2_get_event+0x4a>
 80084c0:	f10d 020e 	add.w	r2, sp, #14
 80084c4:	2128      	movs	r1, #40	; 0x28
 80084c6:	4605      	mov	r5, r0
 80084c8:	f000 fc44 	bl	8008d54 <acc_sensor_reg_read>
 80084cc:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 80084d0:	8062      	strh	r2, [r4, #2]
 80084d2:	b2d3      	uxtb	r3, r2
 80084d4:	2b01      	cmp	r3, #1
 80084d6:	7023      	strb	r3, [r4, #0]
 80084d8:	d026      	beq.n	8008528 <acc_sensor_protocol_r2_get_event+0x70>
 80084da:	d80c      	bhi.n	80084f6 <acc_sensor_protocol_r2_get_event+0x3e>
 80084dc:	4b22      	ldr	r3, [pc, #136]	; (8008568 <acc_sensor_protocol_r2_get_event+0xb0>)
 80084de:	4a23      	ldr	r2, [pc, #140]	; (800856c <acc_sensor_protocol_r2_get_event+0xb4>)
 80084e0:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 80084e2:	4923      	ldr	r1, [pc, #140]	; (8008570 <acc_sensor_protocol_r2_get_event+0xb8>)
 80084e4:	462b      	mov	r3, r5
 80084e6:	2000      	movs	r0, #0
 80084e8:	47a0      	blx	r4
 80084ea:	4628      	mov	r0, r5
 80084ec:	f003 ff86 	bl	800c3fc <acc_sensor_diagnostics_r2_sensor_status>
 80084f0:	2000      	movs	r0, #0
 80084f2:	b004      	add	sp, #16
 80084f4:	bd70      	pop	{r4, r5, r6, pc}
 80084f6:	1e9a      	subs	r2, r3, #2
 80084f8:	2a09      	cmp	r2, #9
 80084fa:	d80b      	bhi.n	8008514 <acc_sensor_protocol_r2_get_event+0x5c>
 80084fc:	2001      	movs	r0, #1
 80084fe:	b004      	add	sp, #16
 8008500:	bd70      	pop	{r4, r5, r6, pc}
 8008502:	4b19      	ldr	r3, [pc, #100]	; (8008568 <acc_sensor_protocol_r2_get_event+0xb0>)
 8008504:	4a1b      	ldr	r2, [pc, #108]	; (8008574 <acc_sensor_protocol_r2_get_event+0xbc>)
 8008506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008508:	4919      	ldr	r1, [pc, #100]	; (8008570 <acc_sensor_protocol_r2_get_event+0xb8>)
 800850a:	4620      	mov	r0, r4
 800850c:	4798      	blx	r3
 800850e:	4620      	mov	r0, r4
 8008510:	b004      	add	sp, #16
 8008512:	bd70      	pop	{r4, r5, r6, pc}
 8008514:	4a14      	ldr	r2, [pc, #80]	; (8008568 <acc_sensor_protocol_r2_get_event+0xb0>)
 8008516:	9500      	str	r5, [sp, #0]
 8008518:	6b56      	ldr	r6, [r2, #52]	; 0x34
 800851a:	4915      	ldr	r1, [pc, #84]	; (8008570 <acc_sensor_protocol_r2_get_event+0xb8>)
 800851c:	4a16      	ldr	r2, [pc, #88]	; (8008578 <acc_sensor_protocol_r2_get_event+0xc0>)
 800851e:	2000      	movs	r0, #0
 8008520:	47b0      	blx	r6
 8008522:	2300      	movs	r3, #0
 8008524:	7023      	strb	r3, [r4, #0]
 8008526:	e7e0      	b.n	80084ea <acc_sensor_protocol_r2_get_event+0x32>
 8008528:	f5b2 5f88 	cmp.w	r2, #4352	; 0x1100
 800852c:	ea4f 2112 	mov.w	r1, r2, lsr #8
 8008530:	d203      	bcs.n	800853a <acc_sensor_protocol_r2_get_event+0x82>
 8008532:	4a12      	ldr	r2, [pc, #72]	; (800857c <acc_sensor_protocol_r2_get_event+0xc4>)
 8008534:	408b      	lsls	r3, r1
 8008536:	401a      	ands	r2, r3
 8008538:	b96a      	cbnz	r2, 8008556 <acc_sensor_protocol_r2_get_event+0x9e>
 800853a:	4a0b      	ldr	r2, [pc, #44]	; (8008568 <acc_sensor_protocol_r2_get_event+0xb0>)
 800853c:	f242 1301 	movw	r3, #8449	; 0x2101
 8008540:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8008542:	8063      	strh	r3, [r4, #2]
 8008544:	2320      	movs	r3, #32
 8008546:	4a0e      	ldr	r2, [pc, #56]	; (8008580 <acc_sensor_protocol_r2_get_event+0xc8>)
 8008548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800854c:	4a0d      	ldr	r2, [pc, #52]	; (8008584 <acc_sensor_protocol_r2_get_event+0xcc>)
 800854e:	4908      	ldr	r1, [pc, #32]	; (8008570 <acc_sensor_protocol_r2_get_event+0xb8>)
 8008550:	2000      	movs	r0, #0
 8008552:	47b0      	blx	r6
 8008554:	e7c9      	b.n	80084ea <acc_sensor_protocol_r2_get_event+0x32>
 8008556:	1e4b      	subs	r3, r1, #1
 8008558:	4a03      	ldr	r2, [pc, #12]	; (8008568 <acc_sensor_protocol_r2_get_event+0xb0>)
 800855a:	b2db      	uxtb	r3, r3
 800855c:	2b20      	cmp	r3, #32
 800855e:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8008560:	d9f1      	bls.n	8008546 <acc_sensor_protocol_r2_get_event+0x8e>
 8008562:	4b09      	ldr	r3, [pc, #36]	; (8008588 <acc_sensor_protocol_r2_get_event+0xd0>)
 8008564:	e7f2      	b.n	800854c <acc_sensor_protocol_r2_get_event+0x94>
 8008566:	bf00      	nop
 8008568:	20000640 	.word	0x20000640
 800856c:	08013bac 	.word	0x08013bac
 8008570:	08013a6c 	.word	0x08013a6c
 8008574:	08013b98 	.word	0x08013b98
 8008578:	08013bf0 	.word	0x08013bf0
 800857c:	00010016 	.word	0x00010016
 8008580:	08013ecc 	.word	0x08013ecc
 8008584:	08013bd0 	.word	0x08013bd0
 8008588:	08013b88 	.word	0x08013b88

0800858c <acc_sensor_protocol_r2_wait_for_event>:
 800858c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008590:	b087      	sub	sp, #28
 8008592:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 8008648 <acc_sensor_protocol_r2_wait_for_event+0xbc>
 8008596:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800865c <acc_sensor_protocol_r2_wait_for_event+0xd0>
 800859a:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 8008650 <acc_sensor_protocol_r2_wait_for_event+0xc4>
 800859e:	9303      	str	r3, [sp, #12]
 80085a0:	4604      	mov	r4, r0
 80085a2:	460e      	mov	r6, r1
 80085a4:	4690      	mov	r8, r2
 80085a6:	2500      	movs	r5, #0
 80085a8:	e018      	b.n	80085dc <acc_sensor_protocol_r2_wait_for_event+0x50>
 80085aa:	4620      	mov	r0, r4
 80085ac:	f8ad 3016 	strh.w	r3, [sp, #22]
 80085b0:	f000 fbd0 	bl	8008d54 <acc_sensor_reg_read>
 80085b4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80085b8:	065b      	lsls	r3, r3, #25
 80085ba:	d434      	bmi.n	8008626 <acc_sensor_protocol_r2_wait_for_event+0x9a>
 80085bc:	f7fe f878 	bl	80066b0 <acc_rss_integration_log_level>
 80085c0:	4607      	mov	r7, r0
 80085c2:	4623      	mov	r3, r4
 80085c4:	4652      	mov	r2, sl
 80085c6:	4649      	mov	r1, r9
 80085c8:	2001      	movs	r0, #1
 80085ca:	b117      	cbz	r7, 80085d2 <acc_sensor_protocol_r2_wait_for_event+0x46>
 80085cc:	f8db 7034 	ldr.w	r7, [fp, #52]	; 0x34
 80085d0:	47b8      	blx	r7
 80085d2:	4545      	cmp	r5, r8
 80085d4:	f105 0301 	add.w	r3, r5, #1
 80085d8:	d018      	beq.n	800860c <acc_sensor_protocol_r2_wait_for_event+0x80>
 80085da:	461d      	mov	r5, r3
 80085dc:	4631      	mov	r1, r6
 80085de:	4620      	mov	r0, r4
 80085e0:	f7fd ffe6 	bl	80065b0 <acc_rss_integration_wait_for_sensor_interrupt>
 80085e4:	f10d 0216 	add.w	r2, sp, #22
 80085e8:	212a      	movs	r1, #42	; 0x2a
 80085ea:	2300      	movs	r3, #0
 80085ec:	4607      	mov	r7, r0
 80085ee:	2800      	cmp	r0, #0
 80085f0:	d1db      	bne.n	80085aa <acc_sensor_protocol_r2_wait_for_event+0x1e>
 80085f2:	4b15      	ldr	r3, [pc, #84]	; (8008648 <acc_sensor_protocol_r2_wait_for_event+0xbc>)
 80085f4:	4a15      	ldr	r2, [pc, #84]	; (800864c <acc_sensor_protocol_r2_wait_for_event+0xc0>)
 80085f6:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 80085f8:	4915      	ldr	r1, [pc, #84]	; (8008650 <acc_sensor_protocol_r2_wait_for_event+0xc4>)
 80085fa:	4623      	mov	r3, r4
 80085fc:	47a8      	blx	r5
 80085fe:	4620      	mov	r0, r4
 8008600:	f003 fefc 	bl	800c3fc <acc_sensor_diagnostics_r2_sensor_status>
 8008604:	4638      	mov	r0, r7
 8008606:	b007      	add	sp, #28
 8008608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800860c:	4a0e      	ldr	r2, [pc, #56]	; (8008648 <acc_sensor_protocol_r2_wait_for_event+0xbc>)
 800860e:	9400      	str	r4, [sp, #0]
 8008610:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8008612:	490f      	ldr	r1, [pc, #60]	; (8008650 <acc_sensor_protocol_r2_wait_for_event+0xc4>)
 8008614:	4a0f      	ldr	r2, [pc, #60]	; (8008654 <acc_sensor_protocol_r2_wait_for_event+0xc8>)
 8008616:	462b      	mov	r3, r5
 8008618:	2000      	movs	r0, #0
 800861a:	47a0      	blx	r4
 800861c:	2700      	movs	r7, #0
 800861e:	4638      	mov	r0, r7
 8008620:	b007      	add	sp, #28
 8008622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008626:	9903      	ldr	r1, [sp, #12]
 8008628:	4620      	mov	r0, r4
 800862a:	f7ff ff45 	bl	80084b8 <acc_sensor_protocol_r2_get_event>
 800862e:	4607      	mov	r7, r0
 8008630:	2800      	cmp	r0, #0
 8008632:	d1e7      	bne.n	8008604 <acc_sensor_protocol_r2_wait_for_event+0x78>
 8008634:	4b04      	ldr	r3, [pc, #16]	; (8008648 <acc_sensor_protocol_r2_wait_for_event+0xbc>)
 8008636:	4a08      	ldr	r2, [pc, #32]	; (8008658 <acc_sensor_protocol_r2_wait_for_event+0xcc>)
 8008638:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 800863a:	4905      	ldr	r1, [pc, #20]	; (8008650 <acc_sensor_protocol_r2_wait_for_event+0xc4>)
 800863c:	4623      	mov	r3, r4
 800863e:	47a8      	blx	r5
 8008640:	4638      	mov	r0, r7
 8008642:	b007      	add	sp, #28
 8008644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008648:	20000640 	.word	0x20000640
 800864c:	08013c20 	.word	0x08013c20
 8008650:	08013a6c 	.word	0x08013a6c
 8008654:	08013c6c 	.word	0x08013c6c
 8008658:	08013ca8 	.word	0x08013ca8
 800865c:	08013c48 	.word	0x08013c48

08008660 <acc_sensor_protocol_r2_wait_for_specific_event>:
 8008660:	b570      	push	{r4, r5, r6, lr}
 8008662:	b084      	sub	sp, #16
 8008664:	4616      	mov	r6, r2
 8008666:	461c      	mov	r4, r3
 8008668:	2264      	movs	r2, #100	; 0x64
 800866a:	ab03      	add	r3, sp, #12
 800866c:	4605      	mov	r5, r0
 800866e:	f7ff ff8d 	bl	800858c <acc_sensor_protocol_r2_wait_for_event>
 8008672:	b168      	cbz	r0, 8008690 <acc_sensor_protocol_r2_wait_for_specific_event+0x30>
 8008674:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8008678:	42b3      	cmp	r3, r6
 800867a:	d00b      	beq.n	8008694 <acc_sensor_protocol_r2_wait_for_specific_event+0x34>
 800867c:	e9cd 3600 	strd	r3, r6, [sp]
 8008680:	4a08      	ldr	r2, [pc, #32]	; (80086a4 <acc_sensor_protocol_r2_wait_for_specific_event+0x44>)
 8008682:	4b09      	ldr	r3, [pc, #36]	; (80086a8 <acc_sensor_protocol_r2_wait_for_specific_event+0x48>)
 8008684:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8008686:	4909      	ldr	r1, [pc, #36]	; (80086ac <acc_sensor_protocol_r2_wait_for_specific_event+0x4c>)
 8008688:	4a09      	ldr	r2, [pc, #36]	; (80086b0 <acc_sensor_protocol_r2_wait_for_specific_event+0x50>)
 800868a:	2000      	movs	r0, #0
 800868c:	47a0      	blx	r4
 800868e:	2000      	movs	r0, #0
 8008690:	b004      	add	sp, #16
 8008692:	bd70      	pop	{r4, r5, r6, pc}
 8008694:	2c00      	cmp	r4, #0
 8008696:	d0fb      	beq.n	8008690 <acc_sensor_protocol_r2_wait_for_specific_event+0x30>
 8008698:	4628      	mov	r0, r5
 800869a:	f7ff fee9 	bl	8008470 <acc_sensor_protocol_r2_ack_event>
 800869e:	b004      	add	sp, #16
 80086a0:	bd70      	pop	{r4, r5, r6, pc}
 80086a2:	bf00      	nop
 80086a4:	20000640 	.word	0x20000640
 80086a8:	08013f50 	.word	0x08013f50
 80086ac:	08013a6c 	.word	0x08013a6c
 80086b0:	08013cd0 	.word	0x08013cd0

080086b4 <acc_sensor_protocol_r2_wait_for_hibernate_ready>:
 80086b4:	2301      	movs	r3, #1
 80086b6:	220b      	movs	r2, #11
 80086b8:	f7ff bfd2 	b.w	8008660 <acc_sensor_protocol_r2_wait_for_specific_event>

080086bc <acc_sensor_protocol_r2_stop>:
 80086bc:	b530      	push	{r4, r5, lr}
 80086be:	b083      	sub	sp, #12
 80086c0:	460c      	mov	r4, r1
 80086c2:	4605      	mov	r5, r0
 80086c4:	f7ff fe98 	bl	80083f8 <acc_sensor_protocol_r2_terminate_program>
 80086c8:	b910      	cbnz	r0, 80086d0 <acc_sensor_protocol_r2_stop+0x14>
 80086ca:	2000      	movs	r0, #0
 80086cc:	b003      	add	sp, #12
 80086ce:	bd30      	pop	{r4, r5, pc}
 80086d0:	4628      	mov	r0, r5
 80086d2:	f7ff fecd 	bl	8008470 <acc_sensor_protocol_r2_ack_event>
 80086d6:	2800      	cmp	r0, #0
 80086d8:	d0f7      	beq.n	80086ca <acc_sensor_protocol_r2_stop+0xe>
 80086da:	4621      	mov	r1, r4
 80086dc:	ab01      	add	r3, sp, #4
 80086de:	2264      	movs	r2, #100	; 0x64
 80086e0:	4628      	mov	r0, r5
 80086e2:	f7ff ff53 	bl	800858c <acc_sensor_protocol_r2_wait_for_event>
 80086e6:	2800      	cmp	r0, #0
 80086e8:	d0ef      	beq.n	80086ca <acc_sensor_protocol_r2_stop+0xe>
 80086ea:	4628      	mov	r0, r5
 80086ec:	f7ff fec0 	bl	8008470 <acc_sensor_protocol_r2_ack_event>
 80086f0:	2800      	cmp	r0, #0
 80086f2:	d0ea      	beq.n	80086ca <acc_sensor_protocol_r2_stop+0xe>
 80086f4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80086f8:	2b02      	cmp	r3, #2
 80086fa:	d0e7      	beq.n	80086cc <acc_sensor_protocol_r2_stop+0x10>
 80086fc:	4a05      	ldr	r2, [pc, #20]	; (8008714 <acc_sensor_protocol_r2_stop+0x58>)
 80086fe:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8008702:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8008704:	4904      	ldr	r1, [pc, #16]	; (8008718 <acc_sensor_protocol_r2_stop+0x5c>)
 8008706:	4a05      	ldr	r2, [pc, #20]	; (800871c <acc_sensor_protocol_r2_stop+0x60>)
 8008708:	2000      	movs	r0, #0
 800870a:	47a0      	blx	r4
 800870c:	4628      	mov	r0, r5
 800870e:	f003 fe75 	bl	800c3fc <acc_sensor_diagnostics_r2_sensor_status>
 8008712:	e7da      	b.n	80086ca <acc_sensor_protocol_r2_stop+0xe>
 8008714:	20000640 	.word	0x20000640
 8008718:	08013a6c 	.word	0x08013a6c
 800871c:	08013cfc 	.word	0x08013cfc

08008720 <acc_sensor_protocol_r2_wait_for_radar_data>:
 8008720:	b570      	push	{r4, r5, r6, lr}
 8008722:	b084      	sub	sp, #16
 8008724:	4616      	mov	r6, r2
 8008726:	ab03      	add	r3, sp, #12
 8008728:	2264      	movs	r2, #100	; 0x64
 800872a:	4605      	mov	r5, r0
 800872c:	f7ff ff2e 	bl	800858c <acc_sensor_protocol_r2_wait_for_event>
 8008730:	4604      	mov	r4, r0
 8008732:	b180      	cbz	r0, 8008756 <acc_sensor_protocol_r2_wait_for_radar_data+0x36>
 8008734:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8008738:	2b06      	cmp	r3, #6
 800873a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800873e:	d10d      	bne.n	800875c <acc_sensor_protocol_r2_wait_for_radar_data+0x3c>
 8008740:	0519      	lsls	r1, r3, #20
 8008742:	d50b      	bpl.n	800875c <acc_sensor_protocol_r2_wait_for_radar_data+0x3c>
 8008744:	f413 6280 	ands.w	r2, r3, #1024	; 0x400
 8008748:	d114      	bne.n	8008774 <acc_sensor_protocol_r2_wait_for_radar_data+0x54>
 800874a:	b106      	cbz	r6, 800874e <acc_sensor_protocol_r2_wait_for_radar_data+0x2e>
 800874c:	7032      	strb	r2, [r6, #0]
 800874e:	05da      	lsls	r2, r3, #23
 8008750:	d425      	bmi.n	800879e <acc_sensor_protocol_r2_wait_for_radar_data+0x7e>
 8008752:	059b      	lsls	r3, r3, #22
 8008754:	d418      	bmi.n	8008788 <acc_sensor_protocol_r2_wait_for_radar_data+0x68>
 8008756:	4620      	mov	r0, r4
 8008758:	b004      	add	sp, #16
 800875a:	bd70      	pop	{r4, r5, r6, pc}
 800875c:	4a16      	ldr	r2, [pc, #88]	; (80087b8 <acc_sensor_protocol_r2_wait_for_radar_data+0x98>)
 800875e:	9300      	str	r3, [sp, #0]
 8008760:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8008762:	4916      	ldr	r1, [pc, #88]	; (80087bc <acc_sensor_protocol_r2_wait_for_radar_data+0x9c>)
 8008764:	4a16      	ldr	r2, [pc, #88]	; (80087c0 <acc_sensor_protocol_r2_wait_for_radar_data+0xa0>)
 8008766:	462b      	mov	r3, r5
 8008768:	2000      	movs	r0, #0
 800876a:	47a0      	blx	r4
 800876c:	2400      	movs	r4, #0
 800876e:	4620      	mov	r0, r4
 8008770:	b004      	add	sp, #16
 8008772:	bd70      	pop	{r4, r5, r6, pc}
 8008774:	4629      	mov	r1, r5
 8008776:	200f      	movs	r0, #15
 8008778:	f000 fad4 	bl	8008d24 <acc_probes_execute_primitive_probe>
 800877c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8008780:	4622      	mov	r2, r4
 8008782:	2e00      	cmp	r6, #0
 8008784:	d1e2      	bne.n	800874c <acc_sensor_protocol_r2_wait_for_radar_data+0x2c>
 8008786:	e7e2      	b.n	800874e <acc_sensor_protocol_r2_wait_for_radar_data+0x2e>
 8008788:	f7fd ff92 	bl	80066b0 <acc_rss_integration_log_level>
 800878c:	2803      	cmp	r0, #3
 800878e:	d9e2      	bls.n	8008756 <acc_sensor_protocol_r2_wait_for_radar_data+0x36>
 8008790:	4b09      	ldr	r3, [pc, #36]	; (80087b8 <acc_sensor_protocol_r2_wait_for_radar_data+0x98>)
 8008792:	4a0c      	ldr	r2, [pc, #48]	; (80087c4 <acc_sensor_protocol_r2_wait_for_radar_data+0xa4>)
 8008794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008796:	4909      	ldr	r1, [pc, #36]	; (80087bc <acc_sensor_protocol_r2_wait_for_radar_data+0x9c>)
 8008798:	2004      	movs	r0, #4
 800879a:	4798      	blx	r3
 800879c:	e7db      	b.n	8008756 <acc_sensor_protocol_r2_wait_for_radar_data+0x36>
 800879e:	f7fd ff87 	bl	80066b0 <acc_rss_integration_log_level>
 80087a2:	2803      	cmp	r0, #3
 80087a4:	d905      	bls.n	80087b2 <acc_sensor_protocol_r2_wait_for_radar_data+0x92>
 80087a6:	4b04      	ldr	r3, [pc, #16]	; (80087b8 <acc_sensor_protocol_r2_wait_for_radar_data+0x98>)
 80087a8:	4a07      	ldr	r2, [pc, #28]	; (80087c8 <acc_sensor_protocol_r2_wait_for_radar_data+0xa8>)
 80087aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087ac:	4903      	ldr	r1, [pc, #12]	; (80087bc <acc_sensor_protocol_r2_wait_for_radar_data+0x9c>)
 80087ae:	2004      	movs	r0, #4
 80087b0:	4798      	blx	r3
 80087b2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80087b6:	e7cc      	b.n	8008752 <acc_sensor_protocol_r2_wait_for_radar_data+0x32>
 80087b8:	20000640 	.word	0x20000640
 80087bc:	08013a6c 	.word	0x08013a6c
 80087c0:	08013d1c 	.word	0x08013d1c
 80087c4:	08013d68 	.word	0x08013d68
 80087c8:	08013d4c 	.word	0x08013d4c

080087cc <acc_sensor_protocol_r2_wait_for_sync_start>:
 80087cc:	b570      	push	{r4, r5, r6, lr}
 80087ce:	b084      	sub	sp, #16
 80087d0:	ab03      	add	r3, sp, #12
 80087d2:	2264      	movs	r2, #100	; 0x64
 80087d4:	4605      	mov	r5, r0
 80087d6:	f7ff fed9 	bl	800858c <acc_sensor_protocol_r2_wait_for_event>
 80087da:	4604      	mov	r4, r0
 80087dc:	b178      	cbz	r0, 80087fe <acc_sensor_protocol_r2_wait_for_sync_start+0x32>
 80087de:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80087e2:	2b06      	cmp	r3, #6
 80087e4:	d008      	beq.n	80087f8 <acc_sensor_protocol_r2_wait_for_sync_start+0x2c>
 80087e6:	4a0a      	ldr	r2, [pc, #40]	; (8008810 <acc_sensor_protocol_r2_wait_for_sync_start+0x44>)
 80087e8:	9300      	str	r3, [sp, #0]
 80087ea:	6b54      	ldr	r4, [r2, #52]	; 0x34
 80087ec:	4909      	ldr	r1, [pc, #36]	; (8008814 <acc_sensor_protocol_r2_wait_for_sync_start+0x48>)
 80087ee:	4a0a      	ldr	r2, [pc, #40]	; (8008818 <acc_sensor_protocol_r2_wait_for_sync_start+0x4c>)
 80087f0:	462b      	mov	r3, r5
 80087f2:	2000      	movs	r0, #0
 80087f4:	47a0      	blx	r4
 80087f6:	2400      	movs	r4, #0
 80087f8:	4620      	mov	r0, r4
 80087fa:	b004      	add	sp, #16
 80087fc:	bd70      	pop	{r4, r5, r6, pc}
 80087fe:	4b04      	ldr	r3, [pc, #16]	; (8008810 <acc_sensor_protocol_r2_wait_for_sync_start+0x44>)
 8008800:	4a06      	ldr	r2, [pc, #24]	; (800881c <acc_sensor_protocol_r2_wait_for_sync_start+0x50>)
 8008802:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8008804:	4903      	ldr	r1, [pc, #12]	; (8008814 <acc_sensor_protocol_r2_wait_for_sync_start+0x48>)
 8008806:	462b      	mov	r3, r5
 8008808:	47b0      	blx	r6
 800880a:	4620      	mov	r0, r4
 800880c:	b004      	add	sp, #16
 800880e:	bd70      	pop	{r4, r5, r6, pc}
 8008810:	20000640 	.word	0x20000640
 8008814:	08013a6c 	.word	0x08013a6c
 8008818:	08013db4 	.word	0x08013db4
 800881c:	08013d80 	.word	0x08013d80

08008820 <acc_sensor_protocol_r2_transfer_data>:
 8008820:	b530      	push	{r4, r5, lr}
 8008822:	b083      	sub	sp, #12
 8008824:	4613      	mov	r3, r2
 8008826:	9201      	str	r2, [sp, #4]
 8008828:	2200      	movs	r2, #0
 800882a:	4605      	mov	r5, r0
 800882c:	f7ff fa80 	bl	8007d30 <acc_sensor_r2_buffer_processed_read>
 8008830:	9b01      	ldr	r3, [sp, #4]
 8008832:	4604      	mov	r4, r0
 8008834:	4602      	mov	r2, r0
 8008836:	4629      	mov	r1, r5
 8008838:	2000      	movs	r0, #0
 800883a:	f000 fa45 	bl	8008cc8 <acc_probes_execute_uint16>
 800883e:	4620      	mov	r0, r4
 8008840:	b003      	add	sp, #12
 8008842:	bd30      	pop	{r4, r5, pc}

08008844 <acc_sensor_protocol_r2_check_asic_id>:
 8008844:	b530      	push	{r4, r5, lr}
 8008846:	2400      	movs	r4, #0
 8008848:	b085      	sub	sp, #20
 800884a:	f10d 020e 	add.w	r2, sp, #14
 800884e:	460d      	mov	r5, r1
 8008850:	4621      	mov	r1, r4
 8008852:	f8ad 400e 	strh.w	r4, [sp, #14]
 8008856:	f000 fa7d 	bl	8008d54 <acc_sensor_reg_read>
 800885a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 800885e:	f241 1312 	movw	r3, #4370	; 0x1112
 8008862:	429a      	cmp	r2, r3
 8008864:	d00a      	beq.n	800887c <acc_sensor_protocol_r2_check_asic_id+0x38>
 8008866:	b965      	cbnz	r5, 8008882 <acc_sensor_protocol_r2_check_asic_id+0x3e>
 8008868:	4907      	ldr	r1, [pc, #28]	; (8008888 <acc_sensor_protocol_r2_check_asic_id+0x44>)
 800886a:	9200      	str	r2, [sp, #0]
 800886c:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 800886e:	4a07      	ldr	r2, [pc, #28]	; (800888c <acc_sensor_protocol_r2_check_asic_id+0x48>)
 8008870:	4907      	ldr	r1, [pc, #28]	; (8008890 <acc_sensor_protocol_r2_check_asic_id+0x4c>)
 8008872:	4628      	mov	r0, r5
 8008874:	47a0      	blx	r4
 8008876:	4628      	mov	r0, r5
 8008878:	b005      	add	sp, #20
 800887a:	bd30      	pop	{r4, r5, pc}
 800887c:	2001      	movs	r0, #1
 800887e:	b005      	add	sp, #20
 8008880:	bd30      	pop	{r4, r5, pc}
 8008882:	4620      	mov	r0, r4
 8008884:	b005      	add	sp, #20
 8008886:	bd30      	pop	{r4, r5, pc}
 8008888:	20000640 	.word	0x20000640
 800888c:	08013df0 	.word	0x08013df0
 8008890:	08013a6c 	.word	0x08013a6c

08008894 <acc_sweep_manager_prepare>:
 8008894:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008898:	4680      	mov	r8, r0
 800889a:	b095      	sub	sp, #84	; 0x54
 800889c:	4608      	mov	r0, r1
 800889e:	460c      	mov	r4, r1
 80088a0:	4617      	mov	r7, r2
 80088a2:	4699      	mov	r9, r3
 80088a4:	f7fd fa98 	bl	8005dd8 <acc_base_configuration_sensor_get>
 80088a8:	4601      	mov	r1, r0
 80088aa:	4620      	mov	r0, r4
 80088ac:	9101      	str	r1, [sp, #4]
 80088ae:	f7fd fbf1 	bl	8006094 <acc_base_configuration_wg_duration_get>
 80088b2:	4603      	mov	r3, r0
 80088b4:	4620      	mov	r0, r4
 80088b6:	f8ad 300c 	strh.w	r3, [sp, #12]
 80088ba:	f7fd fbd7 	bl	800606c <acc_base_configuration_integrator_get>
 80088be:	4603      	mov	r3, r0
 80088c0:	4620      	mov	r0, r4
 80088c2:	f8ad 300e 	strh.w	r3, [sp, #14]
 80088c6:	f7fd fbf9 	bl	80060bc <acc_base_configuration_integrator_ramp_up_get>
 80088ca:	4603      	mov	r3, r0
 80088cc:	4620      	mov	r0, r4
 80088ce:	f8ad 3010 	strh.w	r3, [sp, #16]
 80088d2:	f7fd faf5 	bl	8005ec0 <acc_base_configuration_decrease_tx_emission_get>
 80088d6:	4605      	mov	r5, r0
 80088d8:	2304      	movs	r3, #4
 80088da:	9901      	ldr	r1, [sp, #4]
 80088dc:	f8ad 5012 	strh.w	r5, [sp, #18]
 80088e0:	aa03      	add	r2, sp, #12
 80088e2:	f108 0514 	add.w	r5, r8, #20
 80088e6:	2012      	movs	r0, #18
 80088e8:	f000 f9ee 	bl	8008cc8 <acc_probes_execute_uint16>
 80088ec:	2220      	movs	r2, #32
 80088ee:	2100      	movs	r1, #0
 80088f0:	4628      	mov	r0, r5
 80088f2:	f006 f81f 	bl	800e934 <memset>
 80088f6:	6823      	ldr	r3, [r4, #0]
 80088f8:	4628      	mov	r0, r5
 80088fa:	4621      	mov	r1, r4
 80088fc:	4798      	blx	r3
 80088fe:	4606      	mov	r6, r0
 8008900:	2800      	cmp	r0, #0
 8008902:	d04e      	beq.n	80089a2 <acc_sweep_manager_prepare+0x10e>
 8008904:	2220      	movs	r2, #32
 8008906:	2100      	movs	r1, #0
 8008908:	a80c      	add	r0, sp, #48	; 0x30
 800890a:	f006 f813 	bl	800e934 <memset>
 800890e:	f8d8 002c 	ldr.w	r0, [r8, #44]	; 0x2c
 8008912:	2100      	movs	r1, #0
 8008914:	6806      	ldr	r6, [r0, #0]
 8008916:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 800891a:	e9cd 1105 	strd	r1, r1, [sp, #20]
 800891e:	e9cd 1107 	strd	r1, r1, [sp, #28]
 8008922:	e9cd 1109 	strd	r1, r1, [sp, #36]	; 0x24
 8008926:	aa0c      	add	r2, sp, #48	; 0x30
 8008928:	ab05      	add	r3, sp, #20
 800892a:	4621      	mov	r1, r4
 800892c:	4628      	mov	r0, r5
 800892e:	47b0      	blx	r6
 8008930:	4606      	mov	r6, r0
 8008932:	2800      	cmp	r0, #0
 8008934:	d039      	beq.n	80089aa <acc_sweep_manager_prepare+0x116>
 8008936:	b137      	cbz	r7, 8008946 <acc_sweep_manager_prepare+0xb2>
 8008938:	ad0c      	add	r5, sp, #48	; 0x30
 800893a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800893c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800893e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8008942:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8008946:	f1b9 0f00 	cmp.w	r9, #0
 800894a:	d011      	beq.n	8008970 <acc_sweep_manager_prepare+0xdc>
 800894c:	ad05      	add	r5, sp, #20
 800894e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008950:	f8c9 0000 	str.w	r0, [r9]
 8008954:	f8c9 1004 	str.w	r1, [r9, #4]
 8008958:	cd03      	ldmia	r5!, {r0, r1}
 800895a:	882d      	ldrh	r5, [r5, #0]
 800895c:	f8c9 2008 	str.w	r2, [r9, #8]
 8008960:	f8c9 300c 	str.w	r3, [r9, #12]
 8008964:	f8a9 5018 	strh.w	r5, [r9, #24]
 8008968:	f8c9 0010 	str.w	r0, [r9, #16]
 800896c:	f8c9 1014 	str.w	r1, [r9, #20]
 8008970:	4620      	mov	r0, r4
 8008972:	f7fd fb4b 	bl	800600c <acc_base_configuration_repetition_mode_get>
 8008976:	2801      	cmp	r0, #1
 8008978:	d020      	beq.n	80089bc <acc_sweep_manager_prepare+0x128>
 800897a:	4620      	mov	r0, r4
 800897c:	f7fd fb4e 	bl	800601c <acc_base_configuration_update_rate_get>
 8008980:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80089c4 <acc_sweep_manager_prepare+0x130>
 8008984:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8008988:	ee77 7a87 	vadd.f32	s15, s15, s14
 800898c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008990:	ee17 3a90 	vmov	r3, s15
 8008994:	2200      	movs	r2, #0
 8008996:	f8c8 3000 	str.w	r3, [r8]
 800899a:	f8c8 2008 	str.w	r2, [r8, #8]
 800899e:	f8a8 2006 	strh.w	r2, [r8, #6]
 80089a2:	4630      	mov	r0, r6
 80089a4:	b015      	add	sp, #84	; 0x54
 80089a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80089aa:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 80089ae:	4628      	mov	r0, r5
 80089b0:	6a1b      	ldr	r3, [r3, #32]
 80089b2:	4798      	blx	r3
 80089b4:	4630      	mov	r0, r6
 80089b6:	b015      	add	sp, #84	; 0x54
 80089b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80089bc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80089c0:	e7e8      	b.n	8008994 <acc_sweep_manager_prepare+0x100>
 80089c2:	bf00      	nop
 80089c4:	44fa0000 	.word	0x44fa0000

080089c8 <acc_sweep_manager_release>:
 80089c8:	b120      	cbz	r0, 80089d4 <acc_sweep_manager_release+0xc>
 80089ca:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80089cc:	b113      	cbz	r3, 80089d4 <acc_sweep_manager_release+0xc>
 80089ce:	6a1b      	ldr	r3, [r3, #32]
 80089d0:	3014      	adds	r0, #20
 80089d2:	4718      	bx	r3
 80089d4:	4770      	bx	lr
 80089d6:	bf00      	nop

080089d8 <acc_sweep_manager_is_sensor_connected>:
 80089d8:	3014      	adds	r0, #20
 80089da:	f003 bc69 	b.w	800c2b0 <acc_radar_engine_check_asic_id>
 80089de:	bf00      	nop

080089e0 <acc_sweep_manager_calibrate>:
 80089e0:	b410      	push	{r4}
 80089e2:	4604      	mov	r4, r0
 80089e4:	3014      	adds	r0, #20
 80089e6:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 80089e8:	68a4      	ldr	r4, [r4, #8]
 80089ea:	46a4      	mov	ip, r4
 80089ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089f0:	4760      	bx	ip
 80089f2:	bf00      	nop

080089f4 <acc_sweep_manager_measure_noise>:
 80089f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089f8:	4604      	mov	r4, r0
 80089fa:	e9d0 050a 	ldrd	r0, r5, [r0, #40]	; 0x28
 80089fe:	686f      	ldr	r7, [r5, #4]
 8008a00:	461e      	mov	r6, r3
 8008a02:	4615      	mov	r5, r2
 8008a04:	47b8      	blx	r7
 8008a06:	b140      	cbz	r0, 8008a1a <acc_sweep_manager_measure_noise+0x26>
 8008a08:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008a0a:	4632      	mov	r2, r6
 8008a0c:	4629      	mov	r1, r5
 8008a0e:	f104 0014 	add.w	r0, r4, #20
 8008a12:	68db      	ldr	r3, [r3, #12]
 8008a14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a18:	4718      	bx	r3
 8008a1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a1e:	bf00      	nop

08008a20 <acc_sweep_manager_start>:
 8008a20:	b570      	push	{r4, r5, r6, lr}
 8008a22:	4604      	mov	r4, r0
 8008a24:	e9d0 030a 	ldrd	r0, r3, [r0, #40]	; 0x28
 8008a28:	685b      	ldr	r3, [r3, #4]
 8008a2a:	4615      	mov	r5, r2
 8008a2c:	4798      	blx	r3
 8008a2e:	b138      	cbz	r0, 8008a40 <acc_sweep_manager_start+0x20>
 8008a30:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008a32:	4629      	mov	r1, r5
 8008a34:	f104 0014 	add.w	r0, r4, #20
 8008a38:	691b      	ldr	r3, [r3, #16]
 8008a3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008a3e:	4718      	bx	r3
 8008a40:	bd70      	pop	{r4, r5, r6, pc}
 8008a42:	bf00      	nop

08008a44 <acc_sweep_manager_wait_for_data>:
 8008a44:	f850 1b14 	ldr.w	r1, [r0], #20
 8008a48:	2200      	movs	r2, #0
 8008a4a:	f003 bc35 	b.w	800c2b8 <acc_radar_engine_wait_for_radar_data>
 8008a4e:	bf00      	nop

08008a50 <acc_sweep_manager_wait_for_hibernate_ready>:
 8008a50:	f850 1b14 	ldr.w	r1, [r0], #20
 8008a54:	f003 bc38 	b.w	800c2c8 <acc_radar_engine_wait_for_hibernate_ready>

08008a58 <acc_sweep_manager_measure>:
 8008a58:	3014      	adds	r0, #20
 8008a5a:	f003 bc31 	b.w	800c2c0 <acc_radar_engine_measure>
 8008a5e:	bf00      	nop

08008a60 <acc_sweep_manager_acquire_adc_data>:
 8008a60:	b570      	push	{r4, r5, r6, lr}
 8008a62:	2300      	movs	r3, #0
 8008a64:	b084      	sub	sp, #16
 8008a66:	4604      	mov	r4, r0
 8008a68:	6043      	str	r3, [r0, #4]
 8008a6a:	6083      	str	r3, [r0, #8]
 8008a6c:	60c3      	str	r3, [r0, #12]
 8008a6e:	6103      	str	r3, [r0, #16]
 8008a70:	466a      	mov	r2, sp
 8008a72:	3014      	adds	r0, #20
 8008a74:	f003 fc2c 	bl	800c2d0 <acc_radar_engine_acquire_adc_data>
 8008a78:	9b02      	ldr	r3, [sp, #8]
 8008a7a:	f8bd 6000 	ldrh.w	r6, [sp]
 8008a7e:	f8bd 5002 	ldrh.w	r5, [sp, #2]
 8008a82:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8008a86:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008a8a:	60a0      	str	r0, [r4, #8]
 8008a8c:	1d20      	adds	r0, r4, #4
 8008a8e:	80e6      	strh	r6, [r4, #6]
 8008a90:	80a5      	strh	r5, [r4, #4]
 8008a92:	7321      	strb	r1, [r4, #12]
 8008a94:	7362      	strb	r2, [r4, #13]
 8008a96:	6123      	str	r3, [r4, #16]
 8008a98:	b004      	add	sp, #16
 8008a9a:	bd70      	pop	{r4, r5, r6, pc}

08008a9c <acc_alg_cca_u16_calculate>:
 8008a9c:	2901      	cmp	r1, #1
 8008a9e:	b538      	push	{r3, r4, r5, lr}
 8008aa0:	d925      	bls.n	8008aee <acc_alg_cca_u16_calculate+0x52>
 8008aa2:	1e8d      	subs	r5, r1, #2
 8008aa4:	1c83      	adds	r3, r0, #2
 8008aa6:	b2ad      	uxth	r5, r5
 8008aa8:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8008aac:	2400      	movs	r4, #0
 8008aae:	4602      	mov	r2, r0
 8008ab0:	3002      	adds	r0, #2
 8008ab2:	8853      	ldrh	r3, [r2, #2]
 8008ab4:	8812      	ldrh	r2, [r2, #0]
 8008ab6:	1a9b      	subs	r3, r3, r2
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	bfb8      	it	lt
 8008abc:	425b      	neglt	r3, r3
 8008abe:	4285      	cmp	r5, r0
 8008ac0:	441c      	add	r4, r3
 8008ac2:	d1f4      	bne.n	8008aae <acc_alg_cca_u16_calculate+0x12>
 8008ac4:	ee07 4a90 	vmov	s15, r4
 8008ac8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008acc:	ee07 1a10 	vmov	s14, r1
 8008ad0:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 8008ad4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ad8:	ee30 0a47 	vsub.f32	s0, s0, s14
 8008adc:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8008ae0:	f007 ff62 	bl	80109a8 <log10f>
 8008ae4:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8008ae8:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008aec:	bd38      	pop	{r3, r4, r5, pc}
 8008aee:	eddf 7a01 	vldr	s15, [pc, #4]	; 8008af4 <acc_alg_cca_u16_calculate+0x58>
 8008af2:	e7eb      	b.n	8008acc <acc_alg_cca_u16_calculate+0x30>
 8008af4:	00000000 	.word	0x00000000

08008af8 <acc_assert_fail>:
 8008af8:	b500      	push	{lr}
 8008afa:	4b07      	ldr	r3, [pc, #28]	; (8008b18 <acc_assert_fail+0x20>)
 8008afc:	4a07      	ldr	r2, [pc, #28]	; (8008b1c <acc_assert_fail+0x24>)
 8008afe:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8008b00:	b083      	sub	sp, #12
 8008b02:	4603      	mov	r3, r0
 8008b04:	9100      	str	r1, [sp, #0]
 8008b06:	2000      	movs	r0, #0
 8008b08:	4905      	ldr	r1, [pc, #20]	; (8008b20 <acc_assert_fail+0x28>)
 8008b0a:	47a0      	blx	r4
 8008b0c:	4b05      	ldr	r3, [pc, #20]	; (8008b24 <acc_assert_fail+0x2c>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	b103      	cbz	r3, 8008b14 <acc_assert_fail+0x1c>
 8008b12:	4798      	blx	r3
 8008b14:	e7fe      	b.n	8008b14 <acc_assert_fail+0x1c>
 8008b16:	bf00      	nop
 8008b18:	20000640 	.word	0x20000640
 8008b1c:	08013f80 	.word	0x08013f80
 8008b20:	08013f98 	.word	0x08013f98
 8008b24:	200004ec 	.word	0x200004ec

08008b28 <acc_element_sizeof>:
 8008b28:	3801      	subs	r0, #1
 8008b2a:	b2c0      	uxtb	r0, r0
 8008b2c:	2807      	cmp	r0, #7
 8008b2e:	bf9a      	itte	ls
 8008b30:	4b02      	ldrls	r3, [pc, #8]	; (8008b3c <acc_element_sizeof+0x14>)
 8008b32:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8008b36:	2000      	movhi	r0, #0
 8008b38:	4770      	bx	lr
 8008b3a:	bf00      	nop
 8008b3c:	08013fa0 	.word	0x08013fa0

08008b40 <acc_element_connect>:
 8008b40:	6001      	str	r1, [r0, #0]
 8008b42:	4770      	bx	lr

08008b44 <event>:
 8008b44:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8008b46:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8008b48:	ed90 0a0e 	vldr	s0, [r0, #56]	; 0x38
 8008b4c:	6811      	ldr	r1, [r2, #0]
 8008b4e:	b570      	push	{r4, r5, r6, lr}
 8008b50:	4604      	mov	r4, r0
 8008b52:	e9d0 0504 	ldrd	r0, r5, [r0, #16]
 8008b56:	4798      	blx	r3
 8008b58:	6823      	ldr	r3, [r4, #0]
 8008b5a:	7028      	strb	r0, [r5, #0]
 8008b5c:	685a      	ldr	r2, [r3, #4]
 8008b5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008b62:	4618      	mov	r0, r3
 8008b64:	4710      	bx	r2
 8008b66:	bf00      	nop

08008b68 <reset>:
 8008b68:	6800      	ldr	r0, [r0, #0]
 8008b6a:	68c3      	ldr	r3, [r0, #12]
 8008b6c:	4718      	bx	r3
 8008b6e:	bf00      	nop

08008b70 <validate>:
 8008b70:	6983      	ldr	r3, [r0, #24]
 8008b72:	b510      	push	{r4, lr}
 8008b74:	4604      	mov	r4, r0
 8008b76:	b113      	cbz	r3, 8008b7e <validate+0xe>
 8008b78:	f7fd fd9a 	bl	80066b0 <acc_rss_integration_log_level>
 8008b7c:	b978      	cbnz	r0, 8008b9e <validate+0x2e>
 8008b7e:	69e3      	ldr	r3, [r4, #28]
 8008b80:	b143      	cbz	r3, 8008b94 <validate+0x24>
 8008b82:	f7fd fd95 	bl	80066b0 <acc_rss_integration_log_level>
 8008b86:	b128      	cbz	r0, 8008b94 <validate+0x24>
 8008b88:	4b08      	ldr	r3, [pc, #32]	; (8008bac <validate+0x3c>)
 8008b8a:	4a09      	ldr	r2, [pc, #36]	; (8008bb0 <validate+0x40>)
 8008b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b8e:	4909      	ldr	r1, [pc, #36]	; (8008bb4 <validate+0x44>)
 8008b90:	2001      	movs	r0, #1
 8008b92:	4798      	blx	r3
 8008b94:	6820      	ldr	r0, [r4, #0]
 8008b96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b9a:	6883      	ldr	r3, [r0, #8]
 8008b9c:	4718      	bx	r3
 8008b9e:	4b03      	ldr	r3, [pc, #12]	; (8008bac <validate+0x3c>)
 8008ba0:	4a05      	ldr	r2, [pc, #20]	; (8008bb8 <validate+0x48>)
 8008ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ba4:	4903      	ldr	r1, [pc, #12]	; (8008bb4 <validate+0x44>)
 8008ba6:	2001      	movs	r0, #1
 8008ba8:	4798      	blx	r3
 8008baa:	e7e8      	b.n	8008b7e <validate+0xe>
 8008bac:	20000640 	.word	0x20000640
 8008bb0:	08013ff0 	.word	0x08013ff0
 8008bb4:	08013fd4 	.word	0x08013fd4
 8008bb8:	08013fc0 	.word	0x08013fc0

08008bbc <saturation_check_i16>:
 8008bbc:	f003 be8e 	b.w	800c8dc <acc_alg_basic_saturation_check_i16>

08008bc0 <saturation_check_u16>:
 8008bc0:	f003 be58 	b.w	800c874 <acc_alg_basic_saturation_check_u16>

08008bc4 <acc_element_saturation_check_init>:
 8008bc4:	2903      	cmp	r1, #3
 8008bc6:	ed80 0a0e 	vstr	s0, [r0, #56]	; 0x38
 8008bca:	d00e      	beq.n	8008bea <acc_element_saturation_check_init+0x26>
 8008bcc:	2905      	cmp	r1, #5
 8008bce:	d016      	beq.n	8008bfe <acc_element_saturation_check_init+0x3a>
 8008bd0:	2902      	cmp	r1, #2
 8008bd2:	d014      	beq.n	8008bfe <acc_element_saturation_check_init+0x3a>
 8008bd4:	b510      	push	{r4, lr}
 8008bd6:	4b0b      	ldr	r3, [pc, #44]	; (8008c04 <acc_element_saturation_check_init+0x40>)
 8008bd8:	4a0b      	ldr	r2, [pc, #44]	; (8008c08 <acc_element_saturation_check_init+0x44>)
 8008bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bdc:	490b      	ldr	r1, [pc, #44]	; (8008c0c <acc_element_saturation_check_init+0x48>)
 8008bde:	2400      	movs	r4, #0
 8008be0:	63c4      	str	r4, [r0, #60]	; 0x3c
 8008be2:	4620      	mov	r0, r4
 8008be4:	4798      	blx	r3
 8008be6:	4620      	mov	r0, r4
 8008be8:	bd10      	pop	{r4, pc}
 8008bea:	4b09      	ldr	r3, [pc, #36]	; (8008c10 <acc_element_saturation_check_init+0x4c>)
 8008bec:	63c3      	str	r3, [r0, #60]	; 0x3c
 8008bee:	4909      	ldr	r1, [pc, #36]	; (8008c14 <acc_element_saturation_check_init+0x50>)
 8008bf0:	4a09      	ldr	r2, [pc, #36]	; (8008c18 <acc_element_saturation_check_init+0x54>)
 8008bf2:	4b0a      	ldr	r3, [pc, #40]	; (8008c1c <acc_element_saturation_check_init+0x58>)
 8008bf4:	60c3      	str	r3, [r0, #12]
 8008bf6:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8008bfa:	2001      	movs	r0, #1
 8008bfc:	4770      	bx	lr
 8008bfe:	4b08      	ldr	r3, [pc, #32]	; (8008c20 <acc_element_saturation_check_init+0x5c>)
 8008c00:	63c3      	str	r3, [r0, #60]	; 0x3c
 8008c02:	e7f4      	b.n	8008bee <acc_element_saturation_check_init+0x2a>
 8008c04:	20000640 	.word	0x20000640
 8008c08:	08014000 	.word	0x08014000
 8008c0c:	08013fd4 	.word	0x08013fd4
 8008c10:	08008bbd 	.word	0x08008bbd
 8008c14:	08008b45 	.word	0x08008b45
 8008c18:	08008b71 	.word	0x08008b71
 8008c1c:	08008b69 	.word	0x08008b69
 8008c20:	08008bc1 	.word	0x08008bc1

08008c24 <consume>:
 8008c24:	b510      	push	{r4, lr}
 8008c26:	4604      	mov	r4, r0
 8008c28:	e9d0 230f 	ldrd	r2, r3, [r0, #60]	; 0x3c
 8008c2c:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8008c2e:	6900      	ldr	r0, [r0, #16]
 8008c30:	4798      	blx	r3
 8008c32:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008c34:	2200      	movs	r2, #0
 8008c36:	611a      	str	r2, [r3, #16]
 8008c38:	bd10      	pop	{r4, pc}
 8008c3a:	bf00      	nop

08008c3c <reset>:
 8008c3c:	4770      	bx	lr
 8008c3e:	bf00      	nop

08008c40 <validate>:
 8008c40:	6983      	ldr	r3, [r0, #24]
 8008c42:	b510      	push	{r4, lr}
 8008c44:	4604      	mov	r4, r0
 8008c46:	b113      	cbz	r3, 8008c4e <validate+0xe>
 8008c48:	f7fd fd32 	bl	80066b0 <acc_rss_integration_log_level>
 8008c4c:	b9c8      	cbnz	r0, 8008c82 <validate+0x42>
 8008c4e:	69e3      	ldr	r3, [r4, #28]
 8008c50:	b113      	cbz	r3, 8008c58 <validate+0x18>
 8008c52:	f7fd fd2d 	bl	80066b0 <acc_rss_integration_log_level>
 8008c56:	b948      	cbnz	r0, 8008c6c <validate+0x2c>
 8008c58:	6963      	ldr	r3, [r4, #20]
 8008c5a:	b183      	cbz	r3, 8008c7e <validate+0x3e>
 8008c5c:	4b0c      	ldr	r3, [pc, #48]	; (8008c90 <validate+0x50>)
 8008c5e:	4a0d      	ldr	r2, [pc, #52]	; (8008c94 <validate+0x54>)
 8008c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c62:	490d      	ldr	r1, [pc, #52]	; (8008c98 <validate+0x58>)
 8008c64:	2000      	movs	r0, #0
 8008c66:	4798      	blx	r3
 8008c68:	2000      	movs	r0, #0
 8008c6a:	bd10      	pop	{r4, pc}
 8008c6c:	4b08      	ldr	r3, [pc, #32]	; (8008c90 <validate+0x50>)
 8008c6e:	4a0b      	ldr	r2, [pc, #44]	; (8008c9c <validate+0x5c>)
 8008c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c72:	4909      	ldr	r1, [pc, #36]	; (8008c98 <validate+0x58>)
 8008c74:	2001      	movs	r0, #1
 8008c76:	4798      	blx	r3
 8008c78:	6963      	ldr	r3, [r4, #20]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d1ee      	bne.n	8008c5c <validate+0x1c>
 8008c7e:	2001      	movs	r0, #1
 8008c80:	bd10      	pop	{r4, pc}
 8008c82:	4b03      	ldr	r3, [pc, #12]	; (8008c90 <validate+0x50>)
 8008c84:	4a06      	ldr	r2, [pc, #24]	; (8008ca0 <validate+0x60>)
 8008c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c88:	4903      	ldr	r1, [pc, #12]	; (8008c98 <validate+0x58>)
 8008c8a:	2001      	movs	r0, #1
 8008c8c:	4798      	blx	r3
 8008c8e:	e7de      	b.n	8008c4e <validate+0xe>
 8008c90:	20000640 	.word	0x20000640
 8008c94:	0801402c 	.word	0x0801402c
 8008c98:	08014014 	.word	0x08014014
 8008c9c:	08013ff0 	.word	0x08013ff0
 8008ca0:	08013fc0 	.word	0x08013fc0

08008ca4 <acc_element_sink_callback_init>:
 8008ca4:	b410      	push	{r4}
 8008ca6:	4a05      	ldr	r2, [pc, #20]	; (8008cbc <acc_element_sink_callback_init+0x18>)
 8008ca8:	4c05      	ldr	r4, [pc, #20]	; (8008cc0 <acc_element_sink_callback_init+0x1c>)
 8008caa:	4b06      	ldr	r3, [pc, #24]	; (8008cc4 <acc_element_sink_callback_init+0x20>)
 8008cac:	6401      	str	r1, [r0, #64]	; 0x40
 8008cae:	e9c0 4201 	strd	r4, r2, [r0, #4]
 8008cb2:	60c3      	str	r3, [r0, #12]
 8008cb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008cb8:	4770      	bx	lr
 8008cba:	bf00      	nop
 8008cbc:	08008c41 	.word	0x08008c41
 8008cc0:	08008c25 	.word	0x08008c25
 8008cc4:	08008c3d 	.word	0x08008c3d

08008cc8 <acc_probes_execute_uint16>:
 8008cc8:	b530      	push	{r4, r5, lr}
 8008cca:	4c09      	ldr	r4, [pc, #36]	; (8008cf0 <acc_probes_execute_uint16+0x28>)
 8008ccc:	eb04 1400 	add.w	r4, r4, r0, lsl #4
 8008cd0:	b085      	sub	sp, #20
 8008cd2:	6865      	ldr	r5, [r4, #4]
 8008cd4:	f88d 0004 	strb.w	r0, [sp, #4]
 8008cd8:	2001      	movs	r0, #1
 8008cda:	e9cd 1002 	strd	r1, r0, [sp, #8]
 8008cde:	b12d      	cbz	r5, 8008cec <acc_probes_execute_uint16+0x24>
 8008ce0:	4611      	mov	r1, r2
 8008ce2:	461a      	mov	r2, r3
 8008ce4:	4082      	lsls	r2, r0
 8008ce6:	68e3      	ldr	r3, [r4, #12]
 8008ce8:	a801      	add	r0, sp, #4
 8008cea:	47a8      	blx	r5
 8008cec:	b005      	add	sp, #20
 8008cee:	bd30      	pop	{r4, r5, pc}
 8008cf0:	2000000c 	.word	0x2000000c

08008cf4 <acc_probes_execute_struct>:
 8008cf4:	b530      	push	{r4, r5, lr}
 8008cf6:	4c0a      	ldr	r4, [pc, #40]	; (8008d20 <acc_probes_execute_struct+0x2c>)
 8008cf8:	eb04 1400 	add.w	r4, r4, r0, lsl #4
 8008cfc:	b085      	sub	sp, #20
 8008cfe:	6865      	ldr	r5, [r4, #4]
 8008d00:	f88d 0004 	strb.w	r0, [sp, #4]
 8008d04:	2007      	movs	r0, #7
 8008d06:	e9cd 1002 	strd	r1, r0, [sp, #8]
 8008d0a:	b135      	cbz	r5, 8008d1a <acc_probes_execute_struct+0x26>
 8008d0c:	4611      	mov	r1, r2
 8008d0e:	a801      	add	r0, sp, #4
 8008d10:	461a      	mov	r2, r3
 8008d12:	68e3      	ldr	r3, [r4, #12]
 8008d14:	47a8      	blx	r5
 8008d16:	b005      	add	sp, #20
 8008d18:	bd30      	pop	{r4, r5, pc}
 8008d1a:	2001      	movs	r0, #1
 8008d1c:	b005      	add	sp, #20
 8008d1e:	bd30      	pop	{r4, r5, pc}
 8008d20:	2000000c 	.word	0x2000000c

08008d24 <acc_probes_execute_primitive_probe>:
 8008d24:	b510      	push	{r4, lr}
 8008d26:	4b0a      	ldr	r3, [pc, #40]	; (8008d50 <acc_probes_execute_primitive_probe+0x2c>)
 8008d28:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8008d2c:	b084      	sub	sp, #16
 8008d2e:	685c      	ldr	r4, [r3, #4]
 8008d30:	f88d 0004 	strb.w	r0, [sp, #4]
 8008d34:	2200      	movs	r2, #0
 8008d36:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8008d3a:	b12c      	cbz	r4, 8008d48 <acc_probes_execute_primitive_probe+0x24>
 8008d3c:	68db      	ldr	r3, [r3, #12]
 8008d3e:	4611      	mov	r1, r2
 8008d40:	a801      	add	r0, sp, #4
 8008d42:	47a0      	blx	r4
 8008d44:	b004      	add	sp, #16
 8008d46:	bd10      	pop	{r4, pc}
 8008d48:	2001      	movs	r0, #1
 8008d4a:	b004      	add	sp, #16
 8008d4c:	bd10      	pop	{r4, pc}
 8008d4e:	bf00      	nop
 8008d50:	2000000c 	.word	0x2000000c

08008d54 <acc_sensor_reg_read>:
 8008d54:	b530      	push	{r4, r5, lr}
 8008d56:	b083      	sub	sp, #12
 8008d58:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
 8008d5c:	4614      	mov	r4, r2
 8008d5e:	2500      	movs	r5, #0
 8008d60:	f8ad 1000 	strh.w	r1, [sp]
 8008d64:	2301      	movs	r3, #1
 8008d66:	2203      	movs	r2, #3
 8008d68:	4669      	mov	r1, sp
 8008d6a:	f8ad 5002 	strh.w	r5, [sp, #2]
 8008d6e:	f8ad 5004 	strh.w	r5, [sp, #4]
 8008d72:	f7fd fc23 	bl	80065bc <acc_rss_integration_sensor_device_transfer>
 8008d76:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8008d7a:	8023      	strh	r3, [r4, #0]
 8008d7c:	b003      	add	sp, #12
 8008d7e:	bd30      	pop	{r4, r5, pc}

08008d80 <acc_sensor_reg_write>:
 8008d80:	b530      	push	{r4, r5, lr}
 8008d82:	b083      	sub	sp, #12
 8008d84:	f441 5480 	orr.w	r4, r1, #4096	; 0x1000
 8008d88:	4615      	mov	r5, r2
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	2202      	movs	r2, #2
 8008d8e:	a901      	add	r1, sp, #4
 8008d90:	f8ad 4004 	strh.w	r4, [sp, #4]
 8008d94:	f8ad 5006 	strh.w	r5, [sp, #6]
 8008d98:	f7fd fc10 	bl	80065bc <acc_rss_integration_sensor_device_transfer>
 8008d9c:	b003      	add	sp, #12
 8008d9e:	bd30      	pop	{r4, r5, pc}

08008da0 <acc_sensor_reg_field_write>:
 8008da0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008da4:	b082      	sub	sp, #8
 8008da6:	461d      	mov	r5, r3
 8008da8:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8008dac:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
 8008db0:	f8ad 3000 	strh.w	r3, [sp]
 8008db4:	2700      	movs	r7, #0
 8008db6:	468a      	mov	sl, r1
 8008db8:	4691      	mov	r9, r2
 8008dba:	4669      	mov	r1, sp
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	2203      	movs	r2, #3
 8008dc0:	4680      	mov	r8, r0
 8008dc2:	f8ad 7002 	strh.w	r7, [sp, #2]
 8008dc6:	f8ad 7004 	strh.w	r7, [sp, #4]
 8008dca:	f7fd fbf7 	bl	80065bc <acc_rss_integration_sensor_device_transfer>
 8008dce:	f9bd 6004 	ldrsh.w	r6, [sp, #4]
 8008dd2:	fa04 f10a 	lsl.w	r1, r4, sl
 8008dd6:	4071      	eors	r1, r6
 8008dd8:	ea01 0409 	and.w	r4, r1, r9
 8008ddc:	f445 5580 	orr.w	r5, r5, #4096	; 0x1000
 8008de0:	4640      	mov	r0, r8
 8008de2:	463b      	mov	r3, r7
 8008de4:	4669      	mov	r1, sp
 8008de6:	4074      	eors	r4, r6
 8008de8:	2202      	movs	r2, #2
 8008dea:	f8ad 5000 	strh.w	r5, [sp]
 8008dee:	f8ad 4002 	strh.w	r4, [sp, #2]
 8008df2:	f7fd fbe3 	bl	80065bc <acc_rss_integration_sensor_device_transfer>
 8008df6:	b002      	add	sp, #8
 8008df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008dfc <acc_sensor_conf_read_instr>:
 8008dfc:	b530      	push	{r4, r5, lr}
 8008dfe:	b085      	sub	sp, #20
 8008e00:	2401      	movs	r4, #1
 8008e02:	f441 4120 	orr.w	r1, r1, #40960	; 0xa000
 8008e06:	4623      	mov	r3, r4
 8008e08:	2500      	movs	r5, #0
 8008e0a:	f8ad 1004 	strh.w	r1, [sp, #4]
 8008e0e:	2205      	movs	r2, #5
 8008e10:	a901      	add	r1, sp, #4
 8008e12:	f8ad 4006 	strh.w	r4, [sp, #6]
 8008e16:	f8ad 5008 	strh.w	r5, [sp, #8]
 8008e1a:	f8cd 500a 	str.w	r5, [sp, #10]
 8008e1e:	f7fd fbcd 	bl	80065bc <acc_rss_integration_sensor_device_transfer>
 8008e22:	f10d 000a 	add.w	r0, sp, #10
 8008e26:	4622      	mov	r2, r4
 8008e28:	4669      	mov	r1, sp
 8008e2a:	f000 f92f 	bl	800908c <acc_utils_transfer_buffer_to_uint32>
 8008e2e:	9800      	ldr	r0, [sp, #0]
 8008e30:	b005      	add	sp, #20
 8008e32:	bd30      	pop	{r4, r5, pc}

08008e34 <acc_cpd_pll_divisors_calculate>:
 8008e34:	edd0 7a00 	vldr	s15, [r0]
 8008e38:	ed9f 6a61 	vldr	s12, [pc, #388]	; 8008fc0 <acc_cpd_pll_divisors_calculate+0x18c>
 8008e3c:	eddf 6a61 	vldr	s13, [pc, #388]	; 8008fc4 <acc_cpd_pll_divisors_calculate+0x190>
 8008e40:	ee86 7a27 	vdiv.f32	s14, s12, s15
 8008e44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e46:	4606      	mov	r6, r0
 8008e48:	b083      	sub	sp, #12
 8008e4a:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8008e4e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8008e52:	eef4 7ae6 	vcmpe.f32	s15, s13
 8008e56:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8008e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e5e:	ee17 3a10 	vmov	r3, s14
 8008e62:	b29c      	uxth	r4, r3
 8008e64:	dc06      	bgt.n	8008e74 <acc_cpd_pll_divisors_calculate+0x40>
 8008e66:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8008fc8 <acc_cpd_pll_divisors_calculate+0x194>
 8008e6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e72:	d571      	bpl.n	8008f58 <acc_cpd_pll_divisors_calculate+0x124>
 8008e74:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e7c:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8008fcc <acc_cpd_pll_divisors_calculate+0x198>
 8008e80:	bf4c      	ite	mi
 8008e82:	4b53      	ldrmi	r3, [pc, #332]	; (8008fd0 <acc_cpd_pll_divisors_calculate+0x19c>)
 8008e84:	4b53      	ldrpl	r3, [pc, #332]	; (8008fd4 <acc_cpd_pll_divisors_calculate+0x1a0>)
 8008e86:	ed9f 6a51 	vldr	s12, [pc, #324]	; 8008fcc <acc_cpd_pll_divisors_calculate+0x198>
 8008e8a:	eddf 6a53 	vldr	s13, [pc, #332]	; 8008fd8 <acc_cpd_pll_divisors_calculate+0x1a4>
 8008e8e:	4d53      	ldr	r5, [pc, #332]	; (8008fdc <acc_cpd_pll_divisors_calculate+0x1a8>)
 8008e90:	4953      	ldr	r1, [pc, #332]	; (8008fe0 <acc_cpd_pll_divisors_calculate+0x1ac>)
 8008e92:	6b6f      	ldr	r7, [r5, #52]	; 0x34
 8008e94:	bf48      	it	mi
 8008e96:	eef1 7a67 	vnegmi.f32	s15, s15
 8008e9a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008e9e:	2000      	movs	r0, #0
 8008ea0:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8008ea4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008eac:	ee17 2a10 	vmov	r2, s14
 8008eb0:	bf4c      	ite	mi
 8008eb2:	eeb1 7a67 	vnegmi.f32	s14, s15
 8008eb6:	eeb0 7a67 	vmovpl.f32	s14, s15
 8008eba:	ee37 7a06 	vadd.f32	s14, s14, s12
 8008ebe:	9200      	str	r2, [sp, #0]
 8008ec0:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8008ec4:	4a47      	ldr	r2, [pc, #284]	; (8008fe4 <acc_cpd_pll_divisors_calculate+0x1b0>)
 8008ec6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8008eca:	3c10      	subs	r4, #16
 8008ecc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008ed0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008ed4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ed8:	edcd 7a01 	vstr	s15, [sp, #4]
 8008edc:	47b8      	blx	r7
 8008ede:	2cef      	cmp	r4, #239	; 0xef
 8008ee0:	d937      	bls.n	8008f52 <acc_cpd_pll_divisors_calculate+0x11e>
 8008ee2:	edd6 7a00 	vldr	s15, [r6]
 8008ee6:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8008fcc <acc_cpd_pll_divisors_calculate+0x198>
 8008eea:	ed9f 6a38 	vldr	s12, [pc, #224]	; 8008fcc <acc_cpd_pll_divisors_calculate+0x198>
 8008eee:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8008fd8 <acc_cpd_pll_divisors_calculate+0x1a4>
 8008ef2:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 8008ef4:	493a      	ldr	r1, [pc, #232]	; (8008fe0 <acc_cpd_pll_divisors_calculate+0x1ac>)
 8008ef6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008efe:	bf48      	it	mi
 8008f00:	eef1 7a67 	vnegmi.f32	s15, s15
 8008f04:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008f08:	bf4c      	ite	mi
 8008f0a:	4b31      	ldrmi	r3, [pc, #196]	; (8008fd0 <acc_cpd_pll_divisors_calculate+0x19c>)
 8008f0c:	4b31      	ldrpl	r3, [pc, #196]	; (8008fd4 <acc_cpd_pll_divisors_calculate+0x1a0>)
 8008f0e:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8008f12:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f1a:	ee17 2a10 	vmov	r2, s14
 8008f1e:	bf4c      	ite	mi
 8008f20:	eeb1 7a67 	vnegmi.f32	s14, s15
 8008f24:	eeb0 7a67 	vmovpl.f32	s14, s15
 8008f28:	ee37 7a06 	vadd.f32	s14, s14, s12
 8008f2c:	9200      	str	r2, [sp, #0]
 8008f2e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8008f32:	4a2c      	ldr	r2, [pc, #176]	; (8008fe4 <acc_cpd_pll_divisors_calculate+0x1b0>)
 8008f34:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8008f38:	2000      	movs	r0, #0
 8008f3a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008f3e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008f42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f46:	edcd 7a01 	vstr	s15, [sp, #4]
 8008f4a:	47a0      	blx	r4
 8008f4c:	2000      	movs	r0, #0
 8008f4e:	b003      	add	sp, #12
 8008f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f52:	2000      	movs	r0, #0
 8008f54:	b003      	add	sp, #12
 8008f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f58:	f1a4 0310 	sub.w	r3, r4, #16
 8008f5c:	b29b      	uxth	r3, r3
 8008f5e:	2bef      	cmp	r3, #239	; 0xef
 8008f60:	d901      	bls.n	8008f66 <acc_cpd_pll_divisors_calculate+0x132>
 8008f62:	4d1e      	ldr	r5, [pc, #120]	; (8008fdc <acc_cpd_pll_divisors_calculate+0x1a8>)
 8008f64:	e7bf      	b.n	8008ee6 <acc_cpd_pll_divisors_calculate+0xb2>
 8008f66:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008f6a:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8008fe8 <acc_cpd_pll_divisors_calculate+0x1b4>
 8008f6e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8008fec <acc_cpd_pll_divisors_calculate+0x1b8>
 8008f72:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008f76:	2c3f      	cmp	r4, #63	; 0x3f
 8008f78:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008f7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f80:	ee17 2a90 	vmov	r2, s15
 8008f84:	810a      	strh	r2, [r1, #8]
 8008f86:	d912      	bls.n	8008fae <acc_cpd_pll_divisors_calculate+0x17a>
 8008f88:	2cbf      	cmp	r4, #191	; 0xbf
 8008f8a:	f04f 0301 	mov.w	r3, #1
 8008f8e:	bf98      	it	ls
 8008f90:	f1a4 0240 	subls.w	r2, r4, #64	; 0x40
 8008f94:	804b      	strh	r3, [r1, #2]
 8008f96:	bf8c      	ite	hi
 8008f98:	08e2      	lsrhi	r2, r4, #3
 8008f9a:	f3c2 02cf 	ubfxls	r2, r2, #3, #16
 8008f9e:	f004 0307 	and.w	r3, r4, #7
 8008fa2:	808a      	strh	r2, [r1, #4]
 8008fa4:	80cb      	strh	r3, [r1, #6]
 8008fa6:	2001      	movs	r0, #1
 8008fa8:	800c      	strh	r4, [r1, #0]
 8008faa:	b003      	add	sp, #12
 8008fac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008fae:	2200      	movs	r2, #0
 8008fb0:	2c2f      	cmp	r4, #47	; 0x2f
 8008fb2:	bf88      	it	hi
 8008fb4:	4623      	movhi	r3, r4
 8008fb6:	808b      	strh	r3, [r1, #4]
 8008fb8:	804a      	strh	r2, [r1, #2]
 8008fba:	80ca      	strh	r2, [r1, #6]
 8008fbc:	e7f3      	b.n	8008fa6 <acc_cpd_pll_divisors_calculate+0x172>
 8008fbe:	bf00      	nop
 8008fc0:	4f1502f9 	.word	0x4f1502f9
 8008fc4:	4c989680 	.word	0x4c989680
 8008fc8:	4b989680 	.word	0x4b989680
 8008fcc:	350637bd 	.word	0x350637bd
 8008fd0:	080137d4 	.word	0x080137d4
 8008fd4:	0801485c 	.word	0x0801485c
 8008fd8:	49742400 	.word	0x49742400
 8008fdc:	20000640 	.word	0x20000640
 8008fe0:	08014080 	.word	0x08014080
 8008fe4:	08014054 	.word	0x08014054
 8008fe8:	b55b38e8 	.word	0xb55b38e8
 8008fec:	427c0000 	.word	0x427c0000

08008ff0 <acc_cpd_pll_divisors_ref_divisor>:
 8008ff0:	eddf 7a02 	vldr	s15, [pc, #8]	; 8008ffc <acc_cpd_pll_divisors_ref_divisor+0xc>
 8008ff4:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8008ff8:	f007 be32 	b.w	8010c60 <roundf>
 8008ffc:	4f1502f9 	.word	0x4f1502f9

08009000 <acc_dll_calculate_area_settings>:
 8009000:	0080      	lsls	r0, r0, #2
 8009002:	b280      	uxth	r0, r0
 8009004:	eb00 0351 	add.w	r3, r0, r1, lsr #1
 8009008:	b29b      	uxth	r3, r3
 800900a:	428b      	cmp	r3, r1
 800900c:	8010      	strh	r0, [r2, #0]
 800900e:	8053      	strh	r3, [r2, #2]
 8009010:	d20c      	bcs.n	800902c <acc_dll_calculate_area_settings+0x2c>
 8009012:	2301      	movs	r3, #1
 8009014:	2100      	movs	r1, #0
 8009016:	2003      	movs	r0, #3
 8009018:	8093      	strh	r3, [r2, #4]
 800901a:	8153      	strh	r3, [r2, #10]
 800901c:	8193      	strh	r3, [r2, #12]
 800901e:	8213      	strh	r3, [r2, #16]
 8009020:	80d1      	strh	r1, [r2, #6]
 8009022:	8251      	strh	r1, [r2, #18]
 8009024:	8291      	strh	r1, [r2, #20]
 8009026:	8110      	strh	r0, [r2, #8]
 8009028:	81d0      	strh	r0, [r2, #14]
 800902a:	4770      	bx	lr
 800902c:	b430      	push	{r4, r5}
 800902e:	fbb3 f4f1 	udiv	r4, r3, r1
 8009032:	2500      	movs	r5, #0
 8009034:	fb01 3114 	mls	r1, r1, r4, r3
 8009038:	2401      	movs	r4, #1
 800903a:	2303      	movs	r3, #3
 800903c:	8094      	strh	r4, [r2, #4]
 800903e:	80d4      	strh	r4, [r2, #6]
 8009040:	8154      	strh	r4, [r2, #10]
 8009042:	8214      	strh	r4, [r2, #16]
 8009044:	8254      	strh	r4, [r2, #18]
 8009046:	8195      	strh	r5, [r2, #12]
 8009048:	81d5      	strh	r5, [r2, #14]
 800904a:	8295      	strh	r5, [r2, #20]
 800904c:	8050      	strh	r0, [r2, #2]
 800904e:	bc30      	pop	{r4, r5}
 8009050:	8011      	strh	r1, [r2, #0]
 8009052:	8113      	strh	r3, [r2, #8]
 8009054:	4770      	bx	lr
 8009056:	bf00      	nop

08009058 <acc_utils_swap16_array>:
 8009058:	b141      	cbz	r1, 800906c <acc_utils_swap16_array+0x14>
 800905a:	3802      	subs	r0, #2
 800905c:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8009060:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8009064:	ba5b      	rev16	r3, r3
 8009066:	4288      	cmp	r0, r1
 8009068:	8003      	strh	r3, [r0, #0]
 800906a:	d1f9      	bne.n	8009060 <acc_utils_swap16_array+0x8>
 800906c:	4770      	bx	lr
 800906e:	bf00      	nop

08009070 <acc_utils_uint32_to_transfer_buffer>:
 8009070:	b152      	cbz	r2, 8009088 <acc_utils_uint32_to_transfer_buffer+0x18>
 8009072:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8009076:	3804      	subs	r0, #4
 8009078:	f850 3f04 	ldr.w	r3, [r0, #4]!
 800907c:	804b      	strh	r3, [r1, #2]
 800907e:	0c1b      	lsrs	r3, r3, #16
 8009080:	800b      	strh	r3, [r1, #0]
 8009082:	3104      	adds	r1, #4
 8009084:	4291      	cmp	r1, r2
 8009086:	d1f7      	bne.n	8009078 <acc_utils_uint32_to_transfer_buffer+0x8>
 8009088:	4770      	bx	lr
 800908a:	bf00      	nop

0800908c <acc_utils_transfer_buffer_to_uint32>:
 800908c:	b17a      	cbz	r2, 80090ae <acc_utils_transfer_buffer_to_uint32+0x22>
 800908e:	b410      	push	{r4}
 8009090:	3904      	subs	r1, #4
 8009092:	eb00 0482 	add.w	r4, r0, r2, lsl #2
 8009096:	8802      	ldrh	r2, [r0, #0]
 8009098:	8843      	ldrh	r3, [r0, #2]
 800909a:	3004      	adds	r0, #4
 800909c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80090a0:	4284      	cmp	r4, r0
 80090a2:	f841 3f04 	str.w	r3, [r1, #4]!
 80090a6:	d1f6      	bne.n	8009096 <acc_utils_transfer_buffer_to_uint32+0xa>
 80090a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80090ac:	4770      	bx	lr
 80090ae:	4770      	bx	lr

080090b0 <event>:
 80090b0:	b570      	push	{r4, r5, r6, lr}
 80090b2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80090b4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80090b6:	682a      	ldr	r2, [r5, #0]
 80090b8:	4604      	mov	r4, r0
 80090ba:	e9d0 0104 	ldrd	r0, r1, [r0, #16]
 80090be:	4798      	blx	r3
 80090c0:	6823      	ldr	r3, [r4, #0]
 80090c2:	6028      	str	r0, [r5, #0]
 80090c4:	685a      	ldr	r2, [r3, #4]
 80090c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80090ca:	4618      	mov	r0, r3
 80090cc:	4710      	bx	r2
 80090ce:	bf00      	nop

080090d0 <reset>:
 80090d0:	6800      	ldr	r0, [r0, #0]
 80090d2:	68c3      	ldr	r3, [r0, #12]
 80090d4:	4718      	bx	r3
 80090d6:	bf00      	nop

080090d8 <validate>:
 80090d8:	6983      	ldr	r3, [r0, #24]
 80090da:	b510      	push	{r4, lr}
 80090dc:	4604      	mov	r4, r0
 80090de:	b113      	cbz	r3, 80090e6 <validate+0xe>
 80090e0:	f7fd fae6 	bl	80066b0 <acc_rss_integration_log_level>
 80090e4:	b978      	cbnz	r0, 8009106 <validate+0x2e>
 80090e6:	69e3      	ldr	r3, [r4, #28]
 80090e8:	b143      	cbz	r3, 80090fc <validate+0x24>
 80090ea:	f7fd fae1 	bl	80066b0 <acc_rss_integration_log_level>
 80090ee:	b128      	cbz	r0, 80090fc <validate+0x24>
 80090f0:	4b08      	ldr	r3, [pc, #32]	; (8009114 <validate+0x3c>)
 80090f2:	4a09      	ldr	r2, [pc, #36]	; (8009118 <validate+0x40>)
 80090f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090f6:	4909      	ldr	r1, [pc, #36]	; (800911c <validate+0x44>)
 80090f8:	2001      	movs	r0, #1
 80090fa:	4798      	blx	r3
 80090fc:	6820      	ldr	r0, [r4, #0]
 80090fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009102:	6883      	ldr	r3, [r0, #8]
 8009104:	4718      	bx	r3
 8009106:	4b03      	ldr	r3, [pc, #12]	; (8009114 <validate+0x3c>)
 8009108:	4a05      	ldr	r2, [pc, #20]	; (8009120 <validate+0x48>)
 800910a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800910c:	4903      	ldr	r1, [pc, #12]	; (800911c <validate+0x44>)
 800910e:	2001      	movs	r0, #1
 8009110:	4798      	blx	r3
 8009112:	e7e8      	b.n	80090e6 <validate+0xe>
 8009114:	20000640 	.word	0x20000640
 8009118:	08013ff0 	.word	0x08013ff0
 800911c:	08014094 	.word	0x08014094
 8009120:	08013fc0 	.word	0x08013fc0

08009124 <abs_q3_12_complex>:
 8009124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009126:	0897      	lsrs	r7, r2, #2
 8009128:	d00b      	beq.n	8009142 <abs_q3_12_complex+0x1e>
 800912a:	4604      	mov	r4, r0
 800912c:	1e8d      	subs	r5, r1, #2
 800912e:	eb00 0687 	add.w	r6, r0, r7, lsl #2
 8009132:	f854 0b04 	ldr.w	r0, [r4], #4
 8009136:	f004 fafb 	bl	800d730 <acc_alg_basic_math_q3_12_complex_scalar_abs>
 800913a:	42b4      	cmp	r4, r6
 800913c:	f825 0f02 	strh.w	r0, [r5, #2]!
 8009140:	d1f7      	bne.n	8009132 <abs_q3_12_complex+0xe>
 8009142:	0078      	lsls	r0, r7, #1
 8009144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009146:	bf00      	nop

08009148 <acc_element_abs_init>:
 8009148:	b510      	push	{r4, lr}
 800914a:	4a0b      	ldr	r2, [pc, #44]	; (8009178 <acc_element_abs_init+0x30>)
 800914c:	4c0b      	ldr	r4, [pc, #44]	; (800917c <acc_element_abs_init+0x34>)
 800914e:	4b0c      	ldr	r3, [pc, #48]	; (8009180 <acc_element_abs_init+0x38>)
 8009150:	60c3      	str	r3, [r0, #12]
 8009152:	2907      	cmp	r1, #7
 8009154:	e9c0 4201 	strd	r4, r2, [r0, #4]
 8009158:	d103      	bne.n	8009162 <acc_element_abs_init+0x1a>
 800915a:	4b0a      	ldr	r3, [pc, #40]	; (8009184 <acc_element_abs_init+0x3c>)
 800915c:	6383      	str	r3, [r0, #56]	; 0x38
 800915e:	2001      	movs	r0, #1
 8009160:	bd10      	pop	{r4, pc}
 8009162:	4b09      	ldr	r3, [pc, #36]	; (8009188 <acc_element_abs_init+0x40>)
 8009164:	4a09      	ldr	r2, [pc, #36]	; (800918c <acc_element_abs_init+0x44>)
 8009166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009168:	4909      	ldr	r1, [pc, #36]	; (8009190 <acc_element_abs_init+0x48>)
 800916a:	2400      	movs	r4, #0
 800916c:	6384      	str	r4, [r0, #56]	; 0x38
 800916e:	4620      	mov	r0, r4
 8009170:	4798      	blx	r3
 8009172:	4620      	mov	r0, r4
 8009174:	bd10      	pop	{r4, pc}
 8009176:	bf00      	nop
 8009178:	080090d9 	.word	0x080090d9
 800917c:	080090b1 	.word	0x080090b1
 8009180:	080090d1 	.word	0x080090d1
 8009184:	08009125 	.word	0x08009125
 8009188:	20000640 	.word	0x20000640
 800918c:	08014000 	.word	0x08014000
 8009190:	08014094 	.word	0x08014094

08009194 <event>:
 8009194:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8009196:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009198:	6811      	ldr	r1, [r2, #0]
 800919a:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
 800919c:	b510      	push	{r4, lr}
 800919e:	4604      	mov	r4, r0
 80091a0:	6900      	ldr	r0, [r0, #16]
 80091a2:	4798      	blx	r3
 80091a4:	6820      	ldr	r0, [r4, #0]
 80091a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091aa:	6843      	ldr	r3, [r0, #4]
 80091ac:	4718      	bx	r3
 80091ae:	bf00      	nop

080091b0 <reset>:
 80091b0:	6800      	ldr	r0, [r0, #0]
 80091b2:	68c3      	ldr	r3, [r0, #12]
 80091b4:	4718      	bx	r3
 80091b6:	bf00      	nop

080091b8 <validate>:
 80091b8:	6983      	ldr	r3, [r0, #24]
 80091ba:	b510      	push	{r4, lr}
 80091bc:	4604      	mov	r4, r0
 80091be:	b113      	cbz	r3, 80091c6 <validate+0xe>
 80091c0:	f7fd fa76 	bl	80066b0 <acc_rss_integration_log_level>
 80091c4:	b978      	cbnz	r0, 80091e6 <validate+0x2e>
 80091c6:	69e3      	ldr	r3, [r4, #28]
 80091c8:	b143      	cbz	r3, 80091dc <validate+0x24>
 80091ca:	f7fd fa71 	bl	80066b0 <acc_rss_integration_log_level>
 80091ce:	b128      	cbz	r0, 80091dc <validate+0x24>
 80091d0:	4b08      	ldr	r3, [pc, #32]	; (80091f4 <validate+0x3c>)
 80091d2:	4a09      	ldr	r2, [pc, #36]	; (80091f8 <validate+0x40>)
 80091d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091d6:	4909      	ldr	r1, [pc, #36]	; (80091fc <validate+0x44>)
 80091d8:	2001      	movs	r0, #1
 80091da:	4798      	blx	r3
 80091dc:	6820      	ldr	r0, [r4, #0]
 80091de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091e2:	6883      	ldr	r3, [r0, #8]
 80091e4:	4718      	bx	r3
 80091e6:	4b03      	ldr	r3, [pc, #12]	; (80091f4 <validate+0x3c>)
 80091e8:	4a05      	ldr	r2, [pc, #20]	; (8009200 <validate+0x48>)
 80091ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091ec:	4903      	ldr	r1, [pc, #12]	; (80091fc <validate+0x44>)
 80091ee:	2001      	movs	r0, #1
 80091f0:	4798      	blx	r3
 80091f2:	e7e8      	b.n	80091c6 <validate+0xe>
 80091f4:	20000640 	.word	0x20000640
 80091f8:	08013ff0 	.word	0x08013ff0
 80091fc:	080140a0 	.word	0x080140a0
 8009200:	08013fc0 	.word	0x08013fc0

08009204 <centering_q12_4>:
 8009204:	f3c1 014f 	ubfx	r1, r1, #1, #16
 8009208:	f3c2 024f 	ubfx	r2, r2, #1, #16
 800920c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009210:	f003 bbe2 	b.w	800c9d8 <acc_alg_basic_subtract_section_mean_q12_4>

08009214 <acc_element_centering_init>:
 8009214:	b430      	push	{r4, r5}
 8009216:	4b09      	ldr	r3, [pc, #36]	; (800923c <acc_element_centering_init+0x28>)
 8009218:	60c3      	str	r3, [r0, #12]
 800921a:	2905      	cmp	r1, #5
 800921c:	4d08      	ldr	r5, [pc, #32]	; (8009240 <acc_element_centering_init+0x2c>)
 800921e:	4c09      	ldr	r4, [pc, #36]	; (8009244 <acc_element_centering_init+0x30>)
 8009220:	bf08      	it	eq
 8009222:	4909      	ldreq	r1, [pc, #36]	; (8009248 <acc_element_centering_init+0x34>)
 8009224:	8782      	strh	r2, [r0, #60]	; 0x3c
 8009226:	bf1a      	itte	ne
 8009228:	2300      	movne	r3, #0
 800922a:	4619      	movne	r1, r3
 800922c:	2301      	moveq	r3, #1
 800922e:	e9c0 5401 	strd	r5, r4, [r0, #4]
 8009232:	6381      	str	r1, [r0, #56]	; 0x38
 8009234:	bc30      	pop	{r4, r5}
 8009236:	4618      	mov	r0, r3
 8009238:	4770      	bx	lr
 800923a:	bf00      	nop
 800923c:	080091b1 	.word	0x080091b1
 8009240:	08009195 	.word	0x08009195
 8009244:	080091b9 	.word	0x080091b9
 8009248:	08009205 	.word	0x08009205

0800924c <convert_q3_12_to_u16>:
 800924c:	0853      	lsrs	r3, r2, #1
 800924e:	d010      	beq.n	8009272 <convert_q3_12_to_u16+0x26>
 8009250:	b410      	push	{r4}
 8009252:	eb01 0443 	add.w	r4, r1, r3, lsl #1
 8009256:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 800925a:	f831 3d02 	ldrh.w	r3, [r1, #-2]!
 800925e:	005b      	lsls	r3, r3, #1
 8009260:	4281      	cmp	r1, r0
 8009262:	f824 3d02 	strh.w	r3, [r4, #-2]!
 8009266:	d1f8      	bne.n	800925a <convert_q3_12_to_u16+0xe>
 8009268:	f022 0001 	bic.w	r0, r2, #1
 800926c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009270:	4770      	bx	lr
 8009272:	f022 0001 	bic.w	r0, r2, #1
 8009276:	4770      	bx	lr

08009278 <convert_q3_12_complex_to_f32_complex>:
 8009278:	0892      	lsrs	r2, r2, #2
 800927a:	d024      	beq.n	80092c6 <convert_q3_12_complex_to_f32_complex+0x4e>
 800927c:	eddf 6a13 	vldr	s13, [pc, #76]	; 80092cc <convert_q3_12_complex_to_f32_complex+0x54>
 8009280:	eddf 5a13 	vldr	s11, [pc, #76]	; 80092d0 <convert_q3_12_complex_to_f32_complex+0x58>
 8009284:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8009288:	00d0      	lsls	r0, r2, #3
 800928a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800928e:	f933 cc02 	ldrsh.w	ip, [r3, #-2]
 8009292:	ee07 ca10 	vmov	s14, ip
 8009296:	f933 cd04 	ldrsh.w	ip, [r3, #-4]!
 800929a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800929e:	ee07 ca90 	vmov	s15, ip
 80092a2:	ee27 7a26 	vmul.f32	s14, s14, s13
 80092a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80092aa:	ee27 6a25 	vmul.f32	s12, s14, s11
 80092ae:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80092b2:	ed02 7a01 	vstr	s14, [r2, #-4]
 80092b6:	ee77 7a86 	vadd.f32	s15, s15, s12
 80092ba:	3a08      	subs	r2, #8
 80092bc:	edc2 7a00 	vstr	s15, [r2]
 80092c0:	4291      	cmp	r1, r2
 80092c2:	d1e4      	bne.n	800928e <convert_q3_12_complex_to_f32_complex+0x16>
 80092c4:	4770      	bx	lr
 80092c6:	4610      	mov	r0, r2
 80092c8:	4770      	bx	lr
 80092ca:	bf00      	nop
 80092cc:	39800000 	.word	0x39800000
 80092d0:	00000000 	.word	0x00000000

080092d4 <convert_q12_4_to_q3_12>:
 80092d4:	0853      	lsrs	r3, r2, #1
 80092d6:	d012      	beq.n	80092fe <convert_q12_4_to_q3_12+0x2a>
 80092d8:	b410      	push	{r4}
 80092da:	eb01 0443 	add.w	r4, r1, r3, lsl #1
 80092de:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 80092e2:	f931 3d02 	ldrsh.w	r3, [r1, #-2]!
 80092e6:	105b      	asrs	r3, r3, #1
 80092e8:	f483 4340 	eor.w	r3, r3, #49152	; 0xc000
 80092ec:	4281      	cmp	r1, r0
 80092ee:	f824 3d02 	strh.w	r3, [r4, #-2]!
 80092f2:	d1f6      	bne.n	80092e2 <convert_q12_4_to_q3_12+0xe>
 80092f4:	f022 0001 	bic.w	r0, r2, #1
 80092f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80092fc:	4770      	bx	lr
 80092fe:	f022 0001 	bic.w	r0, r2, #1
 8009302:	4770      	bx	lr

08009304 <convert_q12_4_to_q3_12_complex>:
 8009304:	b470      	push	{r4, r5, r6}
 8009306:	4605      	mov	r5, r0
 8009308:	0850      	lsrs	r0, r2, #1
 800930a:	d012      	beq.n	8009332 <convert_q12_4_to_q3_12_complex+0x2e>
 800930c:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8009310:	eb05 0440 	add.w	r4, r5, r0, lsl #1
 8009314:	2600      	movs	r6, #0
 8009316:	0080      	lsls	r0, r0, #2
 8009318:	f934 3d02 	ldrsh.w	r3, [r4, #-2]!
 800931c:	f821 6c02 	strh.w	r6, [r1, #-2]
 8009320:	105b      	asrs	r3, r3, #1
 8009322:	f483 4340 	eor.w	r3, r3, #49152	; 0xc000
 8009326:	42a5      	cmp	r5, r4
 8009328:	f821 3c04 	strh.w	r3, [r1, #-4]
 800932c:	f1a1 0104 	sub.w	r1, r1, #4
 8009330:	d1f2      	bne.n	8009318 <convert_q12_4_to_q3_12_complex+0x14>
 8009332:	bc70      	pop	{r4, r5, r6}
 8009334:	4770      	bx	lr
 8009336:	bf00      	nop

08009338 <event>:
 8009338:	b570      	push	{r4, r5, r6, lr}
 800933a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800933c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800933e:	682a      	ldr	r2, [r5, #0]
 8009340:	4604      	mov	r4, r0
 8009342:	e9d0 0104 	ldrd	r0, r1, [r0, #16]
 8009346:	4798      	blx	r3
 8009348:	6823      	ldr	r3, [r4, #0]
 800934a:	6028      	str	r0, [r5, #0]
 800934c:	685a      	ldr	r2, [r3, #4]
 800934e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009352:	4618      	mov	r0, r3
 8009354:	4710      	bx	r2
 8009356:	bf00      	nop

08009358 <reset>:
 8009358:	6800      	ldr	r0, [r0, #0]
 800935a:	68c3      	ldr	r3, [r0, #12]
 800935c:	4718      	bx	r3
 800935e:	bf00      	nop

08009360 <validate>:
 8009360:	6983      	ldr	r3, [r0, #24]
 8009362:	b510      	push	{r4, lr}
 8009364:	4604      	mov	r4, r0
 8009366:	b113      	cbz	r3, 800936e <validate+0xe>
 8009368:	f7fd f9a2 	bl	80066b0 <acc_rss_integration_log_level>
 800936c:	b978      	cbnz	r0, 800938e <validate+0x2e>
 800936e:	69e3      	ldr	r3, [r4, #28]
 8009370:	b143      	cbz	r3, 8009384 <validate+0x24>
 8009372:	f7fd f99d 	bl	80066b0 <acc_rss_integration_log_level>
 8009376:	b128      	cbz	r0, 8009384 <validate+0x24>
 8009378:	4b08      	ldr	r3, [pc, #32]	; (800939c <validate+0x3c>)
 800937a:	4a09      	ldr	r2, [pc, #36]	; (80093a0 <validate+0x40>)
 800937c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800937e:	4909      	ldr	r1, [pc, #36]	; (80093a4 <validate+0x44>)
 8009380:	2001      	movs	r0, #1
 8009382:	4798      	blx	r3
 8009384:	6820      	ldr	r0, [r4, #0]
 8009386:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800938a:	6883      	ldr	r3, [r0, #8]
 800938c:	4718      	bx	r3
 800938e:	4b03      	ldr	r3, [pc, #12]	; (800939c <validate+0x3c>)
 8009390:	4a05      	ldr	r2, [pc, #20]	; (80093a8 <validate+0x48>)
 8009392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009394:	4903      	ldr	r1, [pc, #12]	; (80093a4 <validate+0x44>)
 8009396:	2001      	movs	r0, #1
 8009398:	4798      	blx	r3
 800939a:	e7e8      	b.n	800936e <validate+0xe>
 800939c:	20000640 	.word	0x20000640
 80093a0:	08013ff0 	.word	0x08013ff0
 80093a4:	080140b4 	.word	0x080140b4
 80093a8:	08013fc0 	.word	0x08013fc0

080093ac <acc_element_converter_init>:
 80093ac:	3a02      	subs	r2, #2
 80093ae:	b510      	push	{r4, lr}
 80093b0:	2a05      	cmp	r2, #5
 80093b2:	d804      	bhi.n	80093be <acc_element_converter_init+0x12>
 80093b4:	e8df f002 	tbb	[pc, r2]
 80093b8:	031d0319 	.word	0x031d0319
 80093bc:	0d21      	.short	0x0d21
 80093be:	2300      	movs	r3, #0
 80093c0:	6383      	str	r3, [r0, #56]	; 0x38
 80093c2:	4b10      	ldr	r3, [pc, #64]	; (8009404 <acc_element_converter_init+0x58>)
 80093c4:	4a10      	ldr	r2, [pc, #64]	; (8009408 <acc_element_converter_init+0x5c>)
 80093c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093c8:	4910      	ldr	r1, [pc, #64]	; (800940c <acc_element_converter_init+0x60>)
 80093ca:	2000      	movs	r0, #0
 80093cc:	4798      	blx	r3
 80093ce:	2000      	movs	r0, #0
 80093d0:	bd10      	pop	{r4, pc}
 80093d2:	2905      	cmp	r1, #5
 80093d4:	d1f3      	bne.n	80093be <acc_element_converter_init+0x12>
 80093d6:	4c0e      	ldr	r4, [pc, #56]	; (8009410 <acc_element_converter_init+0x64>)
 80093d8:	490e      	ldr	r1, [pc, #56]	; (8009414 <acc_element_converter_init+0x68>)
 80093da:	4a0f      	ldr	r2, [pc, #60]	; (8009418 <acc_element_converter_init+0x6c>)
 80093dc:	4b0f      	ldr	r3, [pc, #60]	; (800941c <acc_element_converter_init+0x70>)
 80093de:	6384      	str	r4, [r0, #56]	; 0x38
 80093e0:	e9c0 1201 	strd	r1, r2, [r0, #4]
 80093e4:	60c3      	str	r3, [r0, #12]
 80093e6:	2001      	movs	r0, #1
 80093e8:	bd10      	pop	{r4, pc}
 80093ea:	2904      	cmp	r1, #4
 80093ec:	d1e7      	bne.n	80093be <acc_element_converter_init+0x12>
 80093ee:	4c0c      	ldr	r4, [pc, #48]	; (8009420 <acc_element_converter_init+0x74>)
 80093f0:	e7f2      	b.n	80093d8 <acc_element_converter_init+0x2c>
 80093f2:	2905      	cmp	r1, #5
 80093f4:	d1e3      	bne.n	80093be <acc_element_converter_init+0x12>
 80093f6:	4c0b      	ldr	r4, [pc, #44]	; (8009424 <acc_element_converter_init+0x78>)
 80093f8:	e7ee      	b.n	80093d8 <acc_element_converter_init+0x2c>
 80093fa:	2907      	cmp	r1, #7
 80093fc:	d1df      	bne.n	80093be <acc_element_converter_init+0x12>
 80093fe:	4c0a      	ldr	r4, [pc, #40]	; (8009428 <acc_element_converter_init+0x7c>)
 8009400:	e7ea      	b.n	80093d8 <acc_element_converter_init+0x2c>
 8009402:	bf00      	nop
 8009404:	20000640 	.word	0x20000640
 8009408:	080140c8 	.word	0x080140c8
 800940c:	080140b4 	.word	0x080140b4
 8009410:	08009305 	.word	0x08009305
 8009414:	08009339 	.word	0x08009339
 8009418:	08009361 	.word	0x08009361
 800941c:	08009359 	.word	0x08009359
 8009420:	0800924d 	.word	0x0800924d
 8009424:	080092d5 	.word	0x080092d5
 8009428:	08009279 	.word	0x08009279

0800942c <event>:
 800942c:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800942e:	6803      	ldr	r3, [r0, #0]
 8009430:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8009432:	6011      	str	r1, [r2, #0]
 8009434:	4618      	mov	r0, r3
 8009436:	685a      	ldr	r2, [r3, #4]
 8009438:	4710      	bx	r2
 800943a:	bf00      	nop

0800943c <reset>:
 800943c:	6800      	ldr	r0, [r0, #0]
 800943e:	68c3      	ldr	r3, [r0, #12]
 8009440:	4718      	bx	r3
 8009442:	bf00      	nop

08009444 <validate>:
 8009444:	6983      	ldr	r3, [r0, #24]
 8009446:	b510      	push	{r4, lr}
 8009448:	4604      	mov	r4, r0
 800944a:	b113      	cbz	r3, 8009452 <validate+0xe>
 800944c:	f7fd f930 	bl	80066b0 <acc_rss_integration_log_level>
 8009450:	b978      	cbnz	r0, 8009472 <validate+0x2e>
 8009452:	69e3      	ldr	r3, [r4, #28]
 8009454:	b143      	cbz	r3, 8009468 <validate+0x24>
 8009456:	f7fd f92b 	bl	80066b0 <acc_rss_integration_log_level>
 800945a:	b128      	cbz	r0, 8009468 <validate+0x24>
 800945c:	4b08      	ldr	r3, [pc, #32]	; (8009480 <validate+0x3c>)
 800945e:	4a09      	ldr	r2, [pc, #36]	; (8009484 <validate+0x40>)
 8009460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009462:	4909      	ldr	r1, [pc, #36]	; (8009488 <validate+0x44>)
 8009464:	2001      	movs	r0, #1
 8009466:	4798      	blx	r3
 8009468:	6820      	ldr	r0, [r4, #0]
 800946a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800946e:	6883      	ldr	r3, [r0, #8]
 8009470:	4718      	bx	r3
 8009472:	4b03      	ldr	r3, [pc, #12]	; (8009480 <validate+0x3c>)
 8009474:	4a05      	ldr	r2, [pc, #20]	; (800948c <validate+0x48>)
 8009476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009478:	4903      	ldr	r1, [pc, #12]	; (8009488 <validate+0x44>)
 800947a:	2001      	movs	r0, #1
 800947c:	4798      	blx	r3
 800947e:	e7e8      	b.n	8009452 <validate+0xe>
 8009480:	20000640 	.word	0x20000640
 8009484:	08013ff0 	.word	0x08013ff0
 8009488:	080140f0 	.word	0x080140f0
 800948c:	08013fc0 	.word	0x08013fc0

08009490 <acc_element_crop_init>:
 8009490:	b538      	push	{r3, r4, r5, lr}
 8009492:	4604      	mov	r4, r0
 8009494:	4608      	mov	r0, r1
 8009496:	4615      	mov	r5, r2
 8009498:	f7ff fb46 	bl	8008b28 <acc_element_sizeof>
 800949c:	4904      	ldr	r1, [pc, #16]	; (80094b0 <acc_element_crop_init+0x20>)
 800949e:	4a05      	ldr	r2, [pc, #20]	; (80094b4 <acc_element_crop_init+0x24>)
 80094a0:	4b05      	ldr	r3, [pc, #20]	; (80094b8 <acc_element_crop_init+0x28>)
 80094a2:	60e3      	str	r3, [r4, #12]
 80094a4:	fb05 f000 	mul.w	r0, r5, r0
 80094a8:	e9c4 1201 	strd	r1, r2, [r4, #4]
 80094ac:	63a0      	str	r0, [r4, #56]	; 0x38
 80094ae:	bd38      	pop	{r3, r4, r5, pc}
 80094b0:	0800942d 	.word	0x0800942d
 80094b4:	08009445 	.word	0x08009445
 80094b8:	0800943d 	.word	0x0800943d

080094bc <filter_no_operation>:
 80094bc:	4770      	bx	lr
 80094be:	bf00      	nop

080094c0 <event>:
 80094c0:	b510      	push	{r4, lr}
 80094c2:	4604      	mov	r4, r0
 80094c4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80094c6:	4798      	blx	r3
 80094c8:	6820      	ldr	r0, [r4, #0]
 80094ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094ce:	6843      	ldr	r3, [r0, #4]
 80094d0:	4718      	bx	r3
 80094d2:	bf00      	nop

080094d4 <reset>:
 80094d4:	6800      	ldr	r0, [r0, #0]
 80094d6:	68c3      	ldr	r3, [r0, #12]
 80094d8:	4718      	bx	r3
 80094da:	bf00      	nop

080094dc <filter_q3_12_complex>:
 80094dc:	4603      	mov	r3, r0
 80094de:	3040      	adds	r0, #64	; 0x40
 80094e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80094e2:	6919      	ldr	r1, [r3, #16]
 80094e4:	6812      	ldr	r2, [r2, #0]
 80094e6:	0892      	lsrs	r2, r2, #2
 80094e8:	f003 bc5c 	b.w	800cda4 <acc_alg_biquad_q3_12_complex_direct_form_1_filtfilt_reduced_edge_transients>

080094ec <validate>:
 80094ec:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 80094f0:	429a      	cmp	r2, r3
 80094f2:	b510      	push	{r4, lr}
 80094f4:	d007      	beq.n	8009506 <validate+0x1a>
 80094f6:	4b12      	ldr	r3, [pc, #72]	; (8009540 <validate+0x54>)
 80094f8:	4a12      	ldr	r2, [pc, #72]	; (8009544 <validate+0x58>)
 80094fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094fc:	4912      	ldr	r1, [pc, #72]	; (8009548 <validate+0x5c>)
 80094fe:	2000      	movs	r0, #0
 8009500:	4798      	blx	r3
 8009502:	2000      	movs	r0, #0
 8009504:	bd10      	pop	{r4, pc}
 8009506:	6983      	ldr	r3, [r0, #24]
 8009508:	4604      	mov	r4, r0
 800950a:	b113      	cbz	r3, 8009512 <validate+0x26>
 800950c:	f7fd f8d0 	bl	80066b0 <acc_rss_integration_log_level>
 8009510:	b978      	cbnz	r0, 8009532 <validate+0x46>
 8009512:	69e3      	ldr	r3, [r4, #28]
 8009514:	b143      	cbz	r3, 8009528 <validate+0x3c>
 8009516:	f7fd f8cb 	bl	80066b0 <acc_rss_integration_log_level>
 800951a:	b128      	cbz	r0, 8009528 <validate+0x3c>
 800951c:	4b08      	ldr	r3, [pc, #32]	; (8009540 <validate+0x54>)
 800951e:	4a0b      	ldr	r2, [pc, #44]	; (800954c <validate+0x60>)
 8009520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009522:	4909      	ldr	r1, [pc, #36]	; (8009548 <validate+0x5c>)
 8009524:	2001      	movs	r0, #1
 8009526:	4798      	blx	r3
 8009528:	6820      	ldr	r0, [r4, #0]
 800952a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800952e:	6883      	ldr	r3, [r0, #8]
 8009530:	4718      	bx	r3
 8009532:	4b03      	ldr	r3, [pc, #12]	; (8009540 <validate+0x54>)
 8009534:	4a06      	ldr	r2, [pc, #24]	; (8009550 <validate+0x64>)
 8009536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009538:	4903      	ldr	r1, [pc, #12]	; (8009548 <validate+0x5c>)
 800953a:	2001      	movs	r0, #1
 800953c:	4798      	blx	r3
 800953e:	e7e8      	b.n	8009512 <validate+0x26>
 8009540:	20000640 	.word	0x20000640
 8009544:	08014100 	.word	0x08014100
 8009548:	08014128 	.word	0x08014128
 800954c:	08013ff0 	.word	0x08013ff0
 8009550:	08013fc0 	.word	0x08013fc0

08009554 <acc_element_depth_domain_low_pass_filter_init>:
 8009554:	b570      	push	{r4, r5, r6, lr}
 8009556:	4604      	mov	r4, r0
 8009558:	4823      	ldr	r0, [pc, #140]	; (80095e8 <acc_element_depth_domain_low_pass_filter_init+0x94>)
 800955a:	6060      	str	r0, [r4, #4]
 800955c:	4823      	ldr	r0, [pc, #140]	; (80095ec <acc_element_depth_domain_low_pass_filter_init+0x98>)
 800955e:	60a0      	str	r0, [r4, #8]
 8009560:	4823      	ldr	r0, [pc, #140]	; (80095f0 <acc_element_depth_domain_low_pass_filter_init+0x9c>)
 8009562:	60e0      	str	r0, [r4, #12]
 8009564:	461e      	mov	r6, r3
 8009566:	b30a      	cbz	r2, 80095ac <acc_element_depth_domain_low_pass_filter_init+0x58>
 8009568:	eddf 7a22 	vldr	s15, [pc, #136]	; 80095f4 <acc_element_depth_domain_low_pass_filter_init+0xa0>
 800956c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8009570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009574:	d513      	bpl.n	800959e <acc_element_depth_domain_low_pass_filter_init+0x4a>
 8009576:	eeb0 0a67 	vmov.f32	s0, s15
 800957a:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
 800957e:	2907      	cmp	r1, #7
 8009580:	d124      	bne.n	80095cc <acc_element_depth_domain_low_pass_filter_init+0x78>
 8009582:	4b1d      	ldr	r3, [pc, #116]	; (80095f8 <acc_element_depth_domain_low_pass_filter_init+0xa4>)
 8009584:	63a3      	str	r3, [r4, #56]	; 0x38
 8009586:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 800958a:	2300      	movs	r3, #0
 800958c:	f104 0140 	add.w	r1, r4, #64	; 0x40
 8009590:	2001      	movs	r0, #1
 8009592:	f003 fa6d 	bl	800ca70 <acc_alg_biquad_q3_12_lowpass_coeffs>
 8009596:	4605      	mov	r5, r0
 8009598:	b188      	cbz	r0, 80095be <acc_element_depth_domain_low_pass_filter_init+0x6a>
 800959a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800959c:	e00b      	b.n	80095b6 <acc_element_depth_domain_low_pass_filter_init+0x62>
 800959e:	eddf 7a17 	vldr	s15, [pc, #92]	; 80095fc <acc_element_depth_domain_low_pass_filter_init+0xa8>
 80095a2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80095a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095aa:	dd19      	ble.n	80095e0 <acc_element_depth_domain_low_pass_filter_init+0x8c>
 80095ac:	4b14      	ldr	r3, [pc, #80]	; (8009600 <acc_element_depth_domain_low_pass_filter_init+0xac>)
 80095ae:	63a3      	str	r3, [r4, #56]	; 0x38
 80095b0:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80095b4:	63e2      	str	r2, [r4, #60]	; 0x3c
 80095b6:	2501      	movs	r5, #1
 80095b8:	61f2      	str	r2, [r6, #28]
 80095ba:	4628      	mov	r0, r5
 80095bc:	bd70      	pop	{r4, r5, r6, pc}
 80095be:	4b11      	ldr	r3, [pc, #68]	; (8009604 <acc_element_depth_domain_low_pass_filter_init+0xb0>)
 80095c0:	4a11      	ldr	r2, [pc, #68]	; (8009608 <acc_element_depth_domain_low_pass_filter_init+0xb4>)
 80095c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095c4:	4911      	ldr	r1, [pc, #68]	; (800960c <acc_element_depth_domain_low_pass_filter_init+0xb8>)
 80095c6:	4798      	blx	r3
 80095c8:	4628      	mov	r0, r5
 80095ca:	bd70      	pop	{r4, r5, r6, pc}
 80095cc:	4b0d      	ldr	r3, [pc, #52]	; (8009604 <acc_element_depth_domain_low_pass_filter_init+0xb0>)
 80095ce:	4a10      	ldr	r2, [pc, #64]	; (8009610 <acc_element_depth_domain_low_pass_filter_init+0xbc>)
 80095d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095d2:	490e      	ldr	r1, [pc, #56]	; (800960c <acc_element_depth_domain_low_pass_filter_init+0xb8>)
 80095d4:	2000      	movs	r0, #0
 80095d6:	63a0      	str	r0, [r4, #56]	; 0x38
 80095d8:	4605      	mov	r5, r0
 80095da:	4798      	blx	r3
 80095dc:	4628      	mov	r0, r5
 80095de:	bd70      	pop	{r4, r5, r6, pc}
 80095e0:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
 80095e4:	e7cb      	b.n	800957e <acc_element_depth_domain_low_pass_filter_init+0x2a>
 80095e6:	bf00      	nop
 80095e8:	080094c1 	.word	0x080094c1
 80095ec:	080094ed 	.word	0x080094ed
 80095f0:	080094d5 	.word	0x080094d5
 80095f4:	3b843809 	.word	0x3b843809
 80095f8:	080094dd 	.word	0x080094dd
 80095fc:	3efdca08 	.word	0x3efdca08
 8009600:	080094bd 	.word	0x080094bd
 8009604:	20000640 	.word	0x20000640
 8009608:	08014150 	.word	0x08014150
 800960c:	08014128 	.word	0x08014128
 8009610:	08014000 	.word	0x08014000

08009614 <event>:
 8009614:	b510      	push	{r4, lr}
 8009616:	4604      	mov	r4, r0
 8009618:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800961a:	4798      	blx	r3
 800961c:	6820      	ldr	r0, [r4, #0]
 800961e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009622:	6843      	ldr	r3, [r0, #4]
 8009624:	4718      	bx	r3
 8009626:	bf00      	nop

08009628 <reset>:
 8009628:	6800      	ldr	r0, [r0, #0]
 800962a:	68c3      	ldr	r3, [r0, #12]
 800962c:	4718      	bx	r3
 800962e:	bf00      	nop

08009630 <iq_mix_q3_12>:
 8009630:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8009632:	ed90 1a10 	vldr	s2, [r0, #64]	; 0x40
 8009636:	edd0 0a0f 	vldr	s1, [r0, #60]	; 0x3c
 800963a:	b538      	push	{r3, r4, r5, lr}
 800963c:	6815      	ldr	r5, [r2, #0]
 800963e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8009640:	4604      	mov	r4, r0
 8009642:	086d      	lsrs	r5, r5, #1
 8009644:	ed93 0a00 	vldr	s0, [r3]
 8009648:	462a      	mov	r2, r5
 800964a:	e9d0 0104 	ldrd	r0, r1, [r0, #16]
 800964e:	f003 fbc7 	bl	800cde0 <acc_alg_iq_demodulation_q3_12_real>
 8009652:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009654:	00ad      	lsls	r5, r5, #2
 8009656:	601d      	str	r5, [r3, #0]
 8009658:	bd38      	pop	{r3, r4, r5, pc}
 800965a:	bf00      	nop

0800965c <iq_mix_q3_12_complex>:
 800965c:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800965e:	ed90 1a10 	vldr	s2, [r0, #64]	; 0x40
 8009662:	edd0 0a0f 	vldr	s1, [r0, #60]	; 0x3c
 8009666:	b538      	push	{r3, r4, r5, lr}
 8009668:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800966a:	6815      	ldr	r5, [r2, #0]
 800966c:	ed93 0a00 	vldr	s0, [r3]
 8009670:	4604      	mov	r4, r0
 8009672:	08a9      	lsrs	r1, r5, #2
 8009674:	6900      	ldr	r0, [r0, #16]
 8009676:	f003 fc15 	bl	800cea4 <acc_alg_iq_demodulation_q3_12_complex>
 800967a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800967c:	f025 0503 	bic.w	r5, r5, #3
 8009680:	601d      	str	r5, [r3, #0]
 8009682:	bd38      	pop	{r3, r4, r5, pc}

08009684 <validate>:
 8009684:	4a21      	ldr	r2, [pc, #132]	; (800970c <validate+0x88>)
 8009686:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009688:	4293      	cmp	r3, r2
 800968a:	b510      	push	{r4, lr}
 800968c:	4604      	mov	r4, r0
 800968e:	d023      	beq.n	80096d8 <validate+0x54>
 8009690:	4a1f      	ldr	r2, [pc, #124]	; (8009710 <validate+0x8c>)
 8009692:	4293      	cmp	r3, r2
 8009694:	d007      	beq.n	80096a6 <validate+0x22>
 8009696:	4b1f      	ldr	r3, [pc, #124]	; (8009714 <validate+0x90>)
 8009698:	4a1f      	ldr	r2, [pc, #124]	; (8009718 <validate+0x94>)
 800969a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800969c:	491f      	ldr	r1, [pc, #124]	; (800971c <validate+0x98>)
 800969e:	2000      	movs	r0, #0
 80096a0:	4798      	blx	r3
 80096a2:	2000      	movs	r0, #0
 80096a4:	bd10      	pop	{r4, pc}
 80096a6:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 80096aa:	429a      	cmp	r2, r3
 80096ac:	d027      	beq.n	80096fe <validate+0x7a>
 80096ae:	69a3      	ldr	r3, [r4, #24]
 80096b0:	b113      	cbz	r3, 80096b8 <validate+0x34>
 80096b2:	f7fc fffd 	bl	80066b0 <acc_rss_integration_log_level>
 80096b6:	b9d8      	cbnz	r0, 80096f0 <validate+0x6c>
 80096b8:	69e3      	ldr	r3, [r4, #28]
 80096ba:	b143      	cbz	r3, 80096ce <validate+0x4a>
 80096bc:	f7fc fff8 	bl	80066b0 <acc_rss_integration_log_level>
 80096c0:	b128      	cbz	r0, 80096ce <validate+0x4a>
 80096c2:	4b14      	ldr	r3, [pc, #80]	; (8009714 <validate+0x90>)
 80096c4:	4a16      	ldr	r2, [pc, #88]	; (8009720 <validate+0x9c>)
 80096c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096c8:	4914      	ldr	r1, [pc, #80]	; (800971c <validate+0x98>)
 80096ca:	2001      	movs	r0, #1
 80096cc:	4798      	blx	r3
 80096ce:	6820      	ldr	r0, [r4, #0]
 80096d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096d4:	6883      	ldr	r3, [r0, #8]
 80096d6:	4718      	bx	r3
 80096d8:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 80096dc:	429a      	cmp	r2, r3
 80096de:	d0e6      	beq.n	80096ae <validate+0x2a>
 80096e0:	4b0c      	ldr	r3, [pc, #48]	; (8009714 <validate+0x90>)
 80096e2:	4a10      	ldr	r2, [pc, #64]	; (8009724 <validate+0xa0>)
 80096e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096e6:	490d      	ldr	r1, [pc, #52]	; (800971c <validate+0x98>)
 80096e8:	2000      	movs	r0, #0
 80096ea:	4798      	blx	r3
 80096ec:	2000      	movs	r0, #0
 80096ee:	bd10      	pop	{r4, pc}
 80096f0:	4b08      	ldr	r3, [pc, #32]	; (8009714 <validate+0x90>)
 80096f2:	4a0d      	ldr	r2, [pc, #52]	; (8009728 <validate+0xa4>)
 80096f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096f6:	4909      	ldr	r1, [pc, #36]	; (800971c <validate+0x98>)
 80096f8:	2001      	movs	r0, #1
 80096fa:	4798      	blx	r3
 80096fc:	e7dc      	b.n	80096b8 <validate+0x34>
 80096fe:	4b05      	ldr	r3, [pc, #20]	; (8009714 <validate+0x90>)
 8009700:	4a0a      	ldr	r2, [pc, #40]	; (800972c <validate+0xa8>)
 8009702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009704:	4905      	ldr	r1, [pc, #20]	; (800971c <validate+0x98>)
 8009706:	2000      	movs	r0, #0
 8009708:	4798      	blx	r3
 800970a:	e7ca      	b.n	80096a2 <validate+0x1e>
 800970c:	0800965d 	.word	0x0800965d
 8009710:	08009631 	.word	0x08009631
 8009714:	20000640 	.word	0x20000640
 8009718:	080141c8 	.word	0x080141c8
 800971c:	0801417c 	.word	0x0801417c
 8009720:	08013ff0 	.word	0x08013ff0
 8009724:	08014100 	.word	0x08014100
 8009728:	08013fc0 	.word	0x08013fc0
 800972c:	08014190 	.word	0x08014190

08009730 <acc_element_iq_mixer_init>:
 8009730:	4b10      	ldr	r3, [pc, #64]	; (8009774 <acc_element_iq_mixer_init+0x44>)
 8009732:	4a11      	ldr	r2, [pc, #68]	; (8009778 <acc_element_iq_mixer_init+0x48>)
 8009734:	6043      	str	r3, [r0, #4]
 8009736:	4b11      	ldr	r3, [pc, #68]	; (800977c <acc_element_iq_mixer_init+0x4c>)
 8009738:	ed80 0a0f 	vstr	s0, [r0, #60]	; 0x3c
 800973c:	2904      	cmp	r1, #4
 800973e:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8009742:	edc0 0a10 	vstr	s1, [r0, #64]	; 0x40
 8009746:	d00c      	beq.n	8009762 <acc_element_iq_mixer_init+0x32>
 8009748:	2907      	cmp	r1, #7
 800974a:	d00e      	beq.n	800976a <acc_element_iq_mixer_init+0x3a>
 800974c:	b510      	push	{r4, lr}
 800974e:	4b0c      	ldr	r3, [pc, #48]	; (8009780 <acc_element_iq_mixer_init+0x50>)
 8009750:	4a0c      	ldr	r2, [pc, #48]	; (8009784 <acc_element_iq_mixer_init+0x54>)
 8009752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009754:	490c      	ldr	r1, [pc, #48]	; (8009788 <acc_element_iq_mixer_init+0x58>)
 8009756:	2400      	movs	r4, #0
 8009758:	6384      	str	r4, [r0, #56]	; 0x38
 800975a:	4620      	mov	r0, r4
 800975c:	4798      	blx	r3
 800975e:	4620      	mov	r0, r4
 8009760:	bd10      	pop	{r4, pc}
 8009762:	4b0a      	ldr	r3, [pc, #40]	; (800978c <acc_element_iq_mixer_init+0x5c>)
 8009764:	6383      	str	r3, [r0, #56]	; 0x38
 8009766:	2001      	movs	r0, #1
 8009768:	4770      	bx	lr
 800976a:	4b09      	ldr	r3, [pc, #36]	; (8009790 <acc_element_iq_mixer_init+0x60>)
 800976c:	6383      	str	r3, [r0, #56]	; 0x38
 800976e:	2001      	movs	r0, #1
 8009770:	4770      	bx	lr
 8009772:	bf00      	nop
 8009774:	08009615 	.word	0x08009615
 8009778:	08009685 	.word	0x08009685
 800977c:	08009629 	.word	0x08009629
 8009780:	20000640 	.word	0x20000640
 8009784:	08014000 	.word	0x08014000
 8009788:	0801417c 	.word	0x0801417c
 800978c:	08009631 	.word	0x08009631
 8009790:	0800965d 	.word	0x0800965d

08009794 <noise_level_normalization_u16>:
 8009794:	0849      	lsrs	r1, r1, #1
 8009796:	d01e      	beq.n	80097d6 <noise_level_normalization_u16+0x42>
 8009798:	b470      	push	{r4, r5, r6}
 800979a:	eb00 0441 	add.w	r4, r0, r1, lsl #1
 800979e:	f64f 75ff 	movw	r5, #65535	; 0xffff
 80097a2:	2600      	movs	r6, #0
 80097a4:	b92a      	cbnz	r2, 80097b2 <noise_level_normalization_u16+0x1e>
 80097a6:	8005      	strh	r5, [r0, #0]
 80097a8:	3002      	adds	r0, #2
 80097aa:	42a0      	cmp	r0, r4
 80097ac:	d1fa      	bne.n	80097a4 <noise_level_normalization_u16+0x10>
 80097ae:	bc70      	pop	{r4, r5, r6}
 80097b0:	4770      	bx	lr
 80097b2:	8801      	ldrh	r1, [r0, #0]
 80097b4:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
 80097b8:	fb03 f101 	mul.w	r1, r3, r1
 80097bc:	fb91 f1f2 	sdiv	r1, r1, r2
 80097c0:	f511 4100 	adds.w	r1, r1, #32768	; 0x8000
 80097c4:	d405      	bmi.n	80097d2 <noise_level_normalization_u16+0x3e>
 80097c6:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80097ca:	bfa8      	it	ge
 80097cc:	4629      	movge	r1, r5
 80097ce:	8001      	strh	r1, [r0, #0]
 80097d0:	e7ea      	b.n	80097a8 <noise_level_normalization_u16+0x14>
 80097d2:	8006      	strh	r6, [r0, #0]
 80097d4:	e7e8      	b.n	80097a8 <noise_level_normalization_u16+0x14>
 80097d6:	4770      	bx	lr

080097d8 <event>:
 80097d8:	b570      	push	{r4, r5, r6, lr}
 80097da:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80097dc:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 80097de:	6819      	ldr	r1, [r3, #0]
 80097e0:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 80097e2:	8f43      	ldrh	r3, [r0, #58]	; 0x3a
 80097e4:	4604      	mov	r4, r0
 80097e6:	6900      	ldr	r0, [r0, #16]
 80097e8:	47a8      	blx	r5
 80097ea:	6820      	ldr	r0, [r4, #0]
 80097ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80097f0:	6843      	ldr	r3, [r0, #4]
 80097f2:	4718      	bx	r3

080097f4 <reset>:
 80097f4:	6800      	ldr	r0, [r0, #0]
 80097f6:	68c3      	ldr	r3, [r0, #12]
 80097f8:	4718      	bx	r3
 80097fa:	bf00      	nop

080097fc <validate>:
 80097fc:	6983      	ldr	r3, [r0, #24]
 80097fe:	b510      	push	{r4, lr}
 8009800:	4604      	mov	r4, r0
 8009802:	b113      	cbz	r3, 800980a <validate+0xe>
 8009804:	f7fc ff54 	bl	80066b0 <acc_rss_integration_log_level>
 8009808:	b978      	cbnz	r0, 800982a <validate+0x2e>
 800980a:	69e3      	ldr	r3, [r4, #28]
 800980c:	b143      	cbz	r3, 8009820 <validate+0x24>
 800980e:	f7fc ff4f 	bl	80066b0 <acc_rss_integration_log_level>
 8009812:	b128      	cbz	r0, 8009820 <validate+0x24>
 8009814:	4b08      	ldr	r3, [pc, #32]	; (8009838 <validate+0x3c>)
 8009816:	4a09      	ldr	r2, [pc, #36]	; (800983c <validate+0x40>)
 8009818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800981a:	4909      	ldr	r1, [pc, #36]	; (8009840 <validate+0x44>)
 800981c:	2001      	movs	r0, #1
 800981e:	4798      	blx	r3
 8009820:	6820      	ldr	r0, [r4, #0]
 8009822:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009826:	6883      	ldr	r3, [r0, #8]
 8009828:	4718      	bx	r3
 800982a:	4b03      	ldr	r3, [pc, #12]	; (8009838 <validate+0x3c>)
 800982c:	4a05      	ldr	r2, [pc, #20]	; (8009844 <validate+0x48>)
 800982e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009830:	4903      	ldr	r1, [pc, #12]	; (8009840 <validate+0x44>)
 8009832:	2001      	movs	r0, #1
 8009834:	4798      	blx	r3
 8009836:	e7e8      	b.n	800980a <validate+0xe>
 8009838:	20000640 	.word	0x20000640
 800983c:	08013ff0 	.word	0x08013ff0
 8009840:	080141e0 	.word	0x080141e0
 8009844:	08013fc0 	.word	0x08013fc0

08009848 <acc_element_noise_level_normalization_init>:
 8009848:	2902      	cmp	r1, #2
 800984a:	b510      	push	{r4, lr}
 800984c:	8702      	strh	r2, [r0, #56]	; 0x38
 800984e:	8743      	strh	r3, [r0, #58]	; 0x3a
 8009850:	d001      	beq.n	8009856 <acc_element_noise_level_normalization_init+0xe>
 8009852:	2905      	cmp	r1, #5
 8009854:	d109      	bne.n	800986a <acc_element_noise_level_normalization_init+0x22>
 8009856:	490a      	ldr	r1, [pc, #40]	; (8009880 <acc_element_noise_level_normalization_init+0x38>)
 8009858:	4a0a      	ldr	r2, [pc, #40]	; (8009884 <acc_element_noise_level_normalization_init+0x3c>)
 800985a:	4c0b      	ldr	r4, [pc, #44]	; (8009888 <acc_element_noise_level_normalization_init+0x40>)
 800985c:	4b0b      	ldr	r3, [pc, #44]	; (800988c <acc_element_noise_level_normalization_init+0x44>)
 800985e:	63c4      	str	r4, [r0, #60]	; 0x3c
 8009860:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8009864:	60c3      	str	r3, [r0, #12]
 8009866:	2001      	movs	r0, #1
 8009868:	bd10      	pop	{r4, pc}
 800986a:	4b09      	ldr	r3, [pc, #36]	; (8009890 <acc_element_noise_level_normalization_init+0x48>)
 800986c:	4a09      	ldr	r2, [pc, #36]	; (8009894 <acc_element_noise_level_normalization_init+0x4c>)
 800986e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009870:	4909      	ldr	r1, [pc, #36]	; (8009898 <acc_element_noise_level_normalization_init+0x50>)
 8009872:	2400      	movs	r4, #0
 8009874:	63c4      	str	r4, [r0, #60]	; 0x3c
 8009876:	4620      	mov	r0, r4
 8009878:	4798      	blx	r3
 800987a:	4620      	mov	r0, r4
 800987c:	bd10      	pop	{r4, pc}
 800987e:	bf00      	nop
 8009880:	080097d9 	.word	0x080097d9
 8009884:	080097fd 	.word	0x080097fd
 8009888:	08009795 	.word	0x08009795
 800988c:	080097f5 	.word	0x080097f5
 8009890:	20000640 	.word	0x20000640
 8009894:	08014000 	.word	0x08014000
 8009898:	080141e0 	.word	0x080141e0

0800989c <event>:
 800989c:	b510      	push	{r4, lr}
 800989e:	4604      	mov	r4, r0
 80098a0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80098a2:	4798      	blx	r3
 80098a4:	6820      	ldr	r0, [r4, #0]
 80098a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098aa:	6843      	ldr	r3, [r0, #4]
 80098ac:	4718      	bx	r3
 80098ae:	bf00      	nop

080098b0 <reset>:
 80098b0:	6800      	ldr	r0, [r0, #0]
 80098b2:	68c3      	ldr	r3, [r0, #12]
 80098b4:	4718      	bx	r3
 80098b6:	bf00      	nop

080098b8 <do_phase_compensation_q3_12>:
 80098b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098bc:	2a7c      	cmp	r2, #124	; 0x7c
 80098be:	b0fd      	sub	sp, #500	; 0x1f4
 80098c0:	d82a      	bhi.n	8009918 <do_phase_compensation_q3_12+0x60>
 80098c2:	4689      	mov	r9, r1
 80098c4:	b329      	cbz	r1, 8009912 <do_phase_compensation_q3_12+0x5a>
 80098c6:	469a      	mov	sl, r3
 80098c8:	ab7c      	add	r3, sp, #496	; 0x1f0
 80098ca:	2600      	movs	r6, #0
 80098cc:	eb03 0b82 	add.w	fp, r3, r2, lsl #2
 80098d0:	4615      	mov	r5, r2
 80098d2:	4604      	mov	r4, r0
 80098d4:	46b0      	mov	r8, r6
 80098d6:	f5ab 7bfa 	sub.w	fp, fp, #500	; 0x1f4
 80098da:	0097      	lsls	r7, r2, #2
 80098dc:	4621      	mov	r1, r4
 80098de:	463a      	mov	r2, r7
 80098e0:	4668      	mov	r0, sp
 80098e2:	f005 f8b5 	bl	800ea50 <memcpy>
 80098e6:	462a      	mov	r2, r5
 80098e8:	4651      	mov	r1, sl
 80098ea:	4668      	mov	r0, sp
 80098ec:	f8cd 8000 	str.w	r8, [sp]
 80098f0:	f8cb 8000 	str.w	r8, [fp]
 80098f4:	f003 fb48 	bl	800cf88 <acc_alg_phase_estimation_q3_12>
 80098f8:	4629      	mov	r1, r5
 80098fa:	4668      	mov	r0, sp
 80098fc:	f003 ff4c 	bl	800d798 <acc_alg_basic_math_q3_12_complex_conj_normalize>
 8009900:	3601      	adds	r6, #1
 8009902:	4620      	mov	r0, r4
 8009904:	462a      	mov	r2, r5
 8009906:	4669      	mov	r1, sp
 8009908:	f003 feee 	bl	800d6e8 <acc_alg_basic_math_q3_12_complex_mul>
 800990c:	45b1      	cmp	r9, r6
 800990e:	443c      	add	r4, r7
 8009910:	d1e4      	bne.n	80098dc <do_phase_compensation_q3_12+0x24>
 8009912:	b07d      	add	sp, #500	; 0x1f4
 8009914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009918:	4801      	ldr	r0, [pc, #4]	; (8009920 <do_phase_compensation_q3_12+0x68>)
 800991a:	217d      	movs	r1, #125	; 0x7d
 800991c:	f7ff f8ec 	bl	8008af8 <acc_assert_fail>
 8009920:	08014204 	.word	0x08014204

08009924 <phase_compensate_q3_12_complex>:
 8009924:	e9d0 120f 	ldrd	r1, r2, [r0, #60]	; 0x3c
 8009928:	f9b0 3044 	ldrsh.w	r3, [r0, #68]	; 0x44
 800992c:	6900      	ldr	r0, [r0, #16]
 800992e:	f7ff bfc3 	b.w	80098b8 <do_phase_compensation_q3_12>
 8009932:	bf00      	nop

08009934 <validate>:
 8009934:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 8009938:	429a      	cmp	r2, r3
 800993a:	b510      	push	{r4, lr}
 800993c:	d007      	beq.n	800994e <validate+0x1a>
 800993e:	4b12      	ldr	r3, [pc, #72]	; (8009988 <validate+0x54>)
 8009940:	4a12      	ldr	r2, [pc, #72]	; (800998c <validate+0x58>)
 8009942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009944:	4912      	ldr	r1, [pc, #72]	; (8009990 <validate+0x5c>)
 8009946:	2000      	movs	r0, #0
 8009948:	4798      	blx	r3
 800994a:	2000      	movs	r0, #0
 800994c:	bd10      	pop	{r4, pc}
 800994e:	6983      	ldr	r3, [r0, #24]
 8009950:	4604      	mov	r4, r0
 8009952:	b113      	cbz	r3, 800995a <validate+0x26>
 8009954:	f7fc feac 	bl	80066b0 <acc_rss_integration_log_level>
 8009958:	b978      	cbnz	r0, 800997a <validate+0x46>
 800995a:	69e3      	ldr	r3, [r4, #28]
 800995c:	b143      	cbz	r3, 8009970 <validate+0x3c>
 800995e:	f7fc fea7 	bl	80066b0 <acc_rss_integration_log_level>
 8009962:	b128      	cbz	r0, 8009970 <validate+0x3c>
 8009964:	4b08      	ldr	r3, [pc, #32]	; (8009988 <validate+0x54>)
 8009966:	4a0b      	ldr	r2, [pc, #44]	; (8009994 <validate+0x60>)
 8009968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800996a:	4909      	ldr	r1, [pc, #36]	; (8009990 <validate+0x5c>)
 800996c:	2001      	movs	r0, #1
 800996e:	4798      	blx	r3
 8009970:	6820      	ldr	r0, [r4, #0]
 8009972:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009976:	6883      	ldr	r3, [r0, #8]
 8009978:	4718      	bx	r3
 800997a:	4b03      	ldr	r3, [pc, #12]	; (8009988 <validate+0x54>)
 800997c:	4a06      	ldr	r2, [pc, #24]	; (8009998 <validate+0x64>)
 800997e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009980:	4903      	ldr	r1, [pc, #12]	; (8009990 <validate+0x5c>)
 8009982:	2001      	movs	r0, #1
 8009984:	4798      	blx	r3
 8009986:	e7e8      	b.n	800995a <validate+0x26>
 8009988:	20000640 	.word	0x20000640
 800998c:	08014100 	.word	0x08014100
 8009990:	08014204 	.word	0x08014204
 8009994:	08013ff0 	.word	0x08013ff0
 8009998:	08013fc0 	.word	0x08013fc0

0800999c <acc_element_phase_compensation_init>:
 800999c:	eddf 6a17 	vldr	s13, [pc, #92]	; 80099fc <acc_element_phase_compensation_init+0x60>
 80099a0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80099a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099a8:	ee20 0a26 	vmul.f32	s0, s0, s13
 80099ac:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80099b0:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80099b4:	bfb8      	it	lt
 80099b6:	eef0 7a47 	vmovlt.f32	s15, s14
 80099ba:	ee30 0a27 	vadd.f32	s0, s0, s15
 80099be:	b538      	push	{r3, r4, r5, lr}
 80099c0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80099c4:	6403      	str	r3, [r0, #64]	; 0x40
 80099c6:	4b0e      	ldr	r3, [pc, #56]	; (8009a00 <acc_element_phase_compensation_init+0x64>)
 80099c8:	4d0e      	ldr	r5, [pc, #56]	; (8009a04 <acc_element_phase_compensation_init+0x68>)
 80099ca:	4c0f      	ldr	r4, [pc, #60]	; (8009a08 <acc_element_phase_compensation_init+0x6c>)
 80099cc:	60c3      	str	r3, [r0, #12]
 80099ce:	ee10 3a10 	vmov	r3, s0
 80099d2:	2907      	cmp	r1, #7
 80099d4:	e9c0 5401 	strd	r5, r4, [r0, #4]
 80099d8:	63c2      	str	r2, [r0, #60]	; 0x3c
 80099da:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 80099de:	d103      	bne.n	80099e8 <acc_element_phase_compensation_init+0x4c>
 80099e0:	4b0a      	ldr	r3, [pc, #40]	; (8009a0c <acc_element_phase_compensation_init+0x70>)
 80099e2:	6383      	str	r3, [r0, #56]	; 0x38
 80099e4:	2001      	movs	r0, #1
 80099e6:	bd38      	pop	{r3, r4, r5, pc}
 80099e8:	4b09      	ldr	r3, [pc, #36]	; (8009a10 <acc_element_phase_compensation_init+0x74>)
 80099ea:	4a0a      	ldr	r2, [pc, #40]	; (8009a14 <acc_element_phase_compensation_init+0x78>)
 80099ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099ee:	490a      	ldr	r1, [pc, #40]	; (8009a18 <acc_element_phase_compensation_init+0x7c>)
 80099f0:	2400      	movs	r4, #0
 80099f2:	6384      	str	r4, [r0, #56]	; 0x38
 80099f4:	4620      	mov	r0, r4
 80099f6:	4798      	blx	r3
 80099f8:	4620      	mov	r0, r4
 80099fa:	bd38      	pop	{r3, r4, r5, pc}
 80099fc:	45800000 	.word	0x45800000
 8009a00:	080098b1 	.word	0x080098b1
 8009a04:	0800989d 	.word	0x0800989d
 8009a08:	08009935 	.word	0x08009935
 8009a0c:	08009925 	.word	0x08009925
 8009a10:	20000640 	.word	0x20000640
 8009a14:	08014000 	.word	0x08014000
 8009a18:	08014204 	.word	0x08014204

08009a1c <reset>:
 8009a1c:	69c3      	ldr	r3, [r0, #28]
 8009a1e:	6800      	ldr	r0, [r0, #0]
 8009a20:	2201      	movs	r2, #1
 8009a22:	701a      	strb	r2, [r3, #0]
 8009a24:	68c3      	ldr	r3, [r0, #12]
 8009a26:	4718      	bx	r3

08009a28 <event>:
 8009a28:	b570      	push	{r4, r5, r6, lr}
 8009a2a:	69c5      	ldr	r5, [r0, #28]
 8009a2c:	462b      	mov	r3, r5
 8009a2e:	4604      	mov	r4, r0
 8009a30:	f813 2b04 	ldrb.w	r2, [r3], #4
 8009a34:	b962      	cbnz	r2, 8009a50 <event+0x28>
 8009a36:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8009a38:	6b85      	ldr	r5, [r0, #56]	; 0x38
 8009a3a:	ed90 0a0f 	vldr	s0, [r0, #60]	; 0x3c
 8009a3e:	6812      	ldr	r2, [r2, #0]
 8009a40:	6900      	ldr	r0, [r0, #16]
 8009a42:	4619      	mov	r1, r3
 8009a44:	47a8      	blx	r5
 8009a46:	6820      	ldr	r0, [r4, #0]
 8009a48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009a4c:	6843      	ldr	r3, [r0, #4]
 8009a4e:	4718      	bx	r3
 8009a50:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8009a52:	6901      	ldr	r1, [r0, #16]
 8009a54:	6812      	ldr	r2, [r2, #0]
 8009a56:	4618      	mov	r0, r3
 8009a58:	f004 fffa 	bl	800ea50 <memcpy>
 8009a5c:	6820      	ldr	r0, [r4, #0]
 8009a5e:	2300      	movs	r3, #0
 8009a60:	702b      	strb	r3, [r5, #0]
 8009a62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009a66:	6843      	ldr	r3, [r0, #4]
 8009a68:	4718      	bx	r3
 8009a6a:	bf00      	nop

08009a6c <filter_q3_12_complex>:
 8009a6c:	b530      	push	{r4, r5, lr}
 8009a6e:	ed2d 8b02 	vpush	{d8}
 8009a72:	b083      	sub	sp, #12
 8009a74:	4604      	mov	r4, r0
 8009a76:	2007      	movs	r0, #7
 8009a78:	eeb0 8a40 	vmov.f32	s16, s0
 8009a7c:	4615      	mov	r5, r2
 8009a7e:	9101      	str	r1, [sp, #4]
 8009a80:	f7ff f852 	bl	8008b28 <acc_element_sizeof>
 8009a84:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8009ac8 <filter_q3_12_complex+0x5c>
 8009a88:	9901      	ldr	r1, [sp, #4]
 8009a8a:	fbb5 f3f0 	udiv	r3, r5, r0
 8009a8e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8009a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a96:	ee28 8a07 	vmul.f32	s16, s16, s14
 8009a9a:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8009a9e:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8009aa2:	bfb8      	it	lt
 8009aa4:	eeb0 0a67 	vmovlt.f32	s0, s15
 8009aa8:	ee38 8a00 	vadd.f32	s16, s16, s0
 8009aac:	4620      	mov	r0, r4
 8009aae:	eebd 8ac8 	vcvt.s32.f32	s16, s16
 8009ab2:	ee18 2a10 	vmov	r2, s16
 8009ab6:	b212      	sxth	r2, r2
 8009ab8:	b003      	add	sp, #12
 8009aba:	ecbd 8b02 	vpop	{d8}
 8009abe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009ac2:	f002 bfab 	b.w	800ca1c <acc_alg_basic_exponential_smoothing_q3_12_complex>
 8009ac6:	bf00      	nop
 8009ac8:	45800000 	.word	0x45800000

08009acc <validate>:
 8009acc:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 8009ad0:	429a      	cmp	r2, r3
 8009ad2:	b510      	push	{r4, lr}
 8009ad4:	d015      	beq.n	8009b02 <validate+0x36>
 8009ad6:	6984      	ldr	r4, [r0, #24]
 8009ad8:	b13c      	cbz	r4, 8009aea <validate+0x1e>
 8009ada:	4b10      	ldr	r3, [pc, #64]	; (8009b1c <validate+0x50>)
 8009adc:	4a10      	ldr	r2, [pc, #64]	; (8009b20 <validate+0x54>)
 8009ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ae0:	4910      	ldr	r1, [pc, #64]	; (8009b24 <validate+0x58>)
 8009ae2:	2000      	movs	r0, #0
 8009ae4:	4798      	blx	r3
 8009ae6:	2000      	movs	r0, #0
 8009ae8:	bd10      	pop	{r4, pc}
 8009aea:	69c2      	ldr	r2, [r0, #28]
 8009aec:	3204      	adds	r2, #4
 8009aee:	4293      	cmp	r3, r2
 8009af0:	d00f      	beq.n	8009b12 <validate+0x46>
 8009af2:	4b0a      	ldr	r3, [pc, #40]	; (8009b1c <validate+0x50>)
 8009af4:	4a0c      	ldr	r2, [pc, #48]	; (8009b28 <validate+0x5c>)
 8009af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009af8:	490a      	ldr	r1, [pc, #40]	; (8009b24 <validate+0x58>)
 8009afa:	4620      	mov	r0, r4
 8009afc:	4798      	blx	r3
 8009afe:	2000      	movs	r0, #0
 8009b00:	bd10      	pop	{r4, pc}
 8009b02:	4b06      	ldr	r3, [pc, #24]	; (8009b1c <validate+0x50>)
 8009b04:	4a09      	ldr	r2, [pc, #36]	; (8009b2c <validate+0x60>)
 8009b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b08:	4906      	ldr	r1, [pc, #24]	; (8009b24 <validate+0x58>)
 8009b0a:	2000      	movs	r0, #0
 8009b0c:	4798      	blx	r3
 8009b0e:	2000      	movs	r0, #0
 8009b10:	bd10      	pop	{r4, pc}
 8009b12:	6800      	ldr	r0, [r0, #0]
 8009b14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b18:	6883      	ldr	r3, [r0, #8]
 8009b1a:	4718      	bx	r3
 8009b1c:	20000640 	.word	0x20000640
 8009b20:	08014270 	.word	0x08014270
 8009b24:	0801424c 	.word	0x0801424c
 8009b28:	08014290 	.word	0x08014290
 8009b2c:	08014220 	.word	0x08014220

08009b30 <acc_element_time_domain_low_pass_filter_init>:
 8009b30:	b510      	push	{r4, lr}
 8009b32:	4a0c      	ldr	r2, [pc, #48]	; (8009b64 <acc_element_time_domain_low_pass_filter_init+0x34>)
 8009b34:	4c0c      	ldr	r4, [pc, #48]	; (8009b68 <acc_element_time_domain_low_pass_filter_init+0x38>)
 8009b36:	4b0d      	ldr	r3, [pc, #52]	; (8009b6c <acc_element_time_domain_low_pass_filter_init+0x3c>)
 8009b38:	60c3      	str	r3, [r0, #12]
 8009b3a:	2907      	cmp	r1, #7
 8009b3c:	e9c0 4201 	strd	r4, r2, [r0, #4]
 8009b40:	ed80 0a0f 	vstr	s0, [r0, #60]	; 0x3c
 8009b44:	d103      	bne.n	8009b4e <acc_element_time_domain_low_pass_filter_init+0x1e>
 8009b46:	4b0a      	ldr	r3, [pc, #40]	; (8009b70 <acc_element_time_domain_low_pass_filter_init+0x40>)
 8009b48:	6383      	str	r3, [r0, #56]	; 0x38
 8009b4a:	2001      	movs	r0, #1
 8009b4c:	bd10      	pop	{r4, pc}
 8009b4e:	4b09      	ldr	r3, [pc, #36]	; (8009b74 <acc_element_time_domain_low_pass_filter_init+0x44>)
 8009b50:	4a09      	ldr	r2, [pc, #36]	; (8009b78 <acc_element_time_domain_low_pass_filter_init+0x48>)
 8009b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b54:	4909      	ldr	r1, [pc, #36]	; (8009b7c <acc_element_time_domain_low_pass_filter_init+0x4c>)
 8009b56:	2400      	movs	r4, #0
 8009b58:	6384      	str	r4, [r0, #56]	; 0x38
 8009b5a:	4620      	mov	r0, r4
 8009b5c:	4798      	blx	r3
 8009b5e:	4620      	mov	r0, r4
 8009b60:	bd10      	pop	{r4, pc}
 8009b62:	bf00      	nop
 8009b64:	08009acd 	.word	0x08009acd
 8009b68:	08009a29 	.word	0x08009a29
 8009b6c:	08009a1d 	.word	0x08009a1d
 8009b70:	08009a6d 	.word	0x08009a6d
 8009b74:	20000640 	.word	0x20000640
 8009b78:	08014000 	.word	0x08014000
 8009b7c:	0801424c 	.word	0x0801424c

08009b80 <acc_element_source_adc_init_radar_engine>:
 8009b80:	b538      	push	{r3, r4, r5, lr}
 8009b82:	9d04      	ldr	r5, [sp, #16]
 8009b84:	4604      	mov	r4, r0
 8009b86:	4608      	mov	r0, r1
 8009b88:	63e1      	str	r1, [r4, #60]	; 0x3c
 8009b8a:	4611      	mov	r1, r2
 8009b8c:	461a      	mov	r2, r3
 8009b8e:	462b      	mov	r3, r5
 8009b90:	f7fe fa56 	bl	8008040 <acc_sensor_manager_prepare_radar_engine>
 8009b94:	896b      	ldrh	r3, [r5, #10]
 8009b96:	8723      	strh	r3, [r4, #56]	; 0x38
 8009b98:	bd38      	pop	{r3, r4, r5, pc}
 8009b9a:	bf00      	nop

08009b9c <acc_element_source_adc_init>:
 8009b9c:	b510      	push	{r4, lr}
 8009b9e:	b084      	sub	sp, #16
 8009ba0:	4604      	mov	r4, r0
 8009ba2:	4608      	mov	r0, r1
 8009ba4:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8009ba8:	9101      	str	r1, [sp, #4]
 8009baa:	f7fc fbbd 	bl	8006328 <acc_base_configuration_print>
 8009bae:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009bb2:	9901      	ldr	r1, [sp, #4]
 8009bb4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8009bb6:	b004      	add	sp, #16
 8009bb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bbc:	f7fe ba8c 	b.w	80080d8 <acc_sensor_manager_prepare_measurement>

08009bc0 <acc_element_source_adc_release>:
 8009bc0:	b110      	cbz	r0, 8009bc8 <acc_element_source_adc_release+0x8>
 8009bc2:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8009bc4:	f7fe bb4e 	b.w	8008264 <acc_sensor_manager_release_measurement>
 8009bc8:	4770      	bx	lr
 8009bca:	bf00      	nop

08009bcc <acc_element_source_adc_reset>:
 8009bcc:	6800      	ldr	r0, [r0, #0]
 8009bce:	68c3      	ldr	r3, [r0, #12]
 8009bd0:	4718      	bx	r3
 8009bd2:	bf00      	nop

08009bd4 <acc_element_source_adc_validate>:
 8009bd4:	6800      	ldr	r0, [r0, #0]
 8009bd6:	6883      	ldr	r3, [r0, #8]
 8009bd8:	4718      	bx	r3
 8009bda:	bf00      	nop

08009bdc <acc_element_source_adc_produce>:
 8009bdc:	b530      	push	{r4, r5, lr}
 8009bde:	4604      	mov	r4, r0
 8009be0:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8009be2:	b083      	sub	sp, #12
 8009be4:	2800      	cmp	r0, #0
 8009be6:	d02f      	beq.n	8009c48 <acc_element_source_adc_produce+0x6c>
 8009be8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009bea:	4a19      	ldr	r2, [pc, #100]	; (8009c50 <acc_element_source_adc_produce+0x74>)
 8009bec:	6a25      	ldr	r5, [r4, #32]
 8009bee:	601a      	str	r2, [r3, #0]
 8009bf0:	f7fe fb4c 	bl	800828c <acc_sensor_manager_get_sensor_id>
 8009bf4:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 8009bf6:	6028      	str	r0, [r5, #0]
 8009bf8:	6961      	ldr	r1, [r4, #20]
 8009bfa:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8009bfc:	ab01      	add	r3, sp, #4
 8009bfe:	f7fe f991 	bl	8007f24 <acc_sensor_manager_acquire_adc_data>
 8009c02:	4605      	mov	r5, r0
 8009c04:	b1c0      	cbz	r0, 8009c38 <acc_element_source_adc_produce+0x5c>
 8009c06:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 8009c0a:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8009c0c:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8009c10:	005b      	lsls	r3, r3, #1
 8009c12:	6003      	str	r3, [r0, #0]
 8009c14:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009c16:	7011      	strb	r1, [r2, #0]
 8009c18:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009c1c:	701a      	strb	r2, [r3, #0]
 8009c1e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009c22:	b90b      	cbnz	r3, 8009c28 <acc_element_source_adc_produce+0x4c>
 8009c24:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009c28:	6820      	ldr	r0, [r4, #0]
 8009c2a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8009c2c:	7013      	strb	r3, [r2, #0]
 8009c2e:	6843      	ldr	r3, [r0, #4]
 8009c30:	4798      	blx	r3
 8009c32:	4628      	mov	r0, r5
 8009c34:	b003      	add	sp, #12
 8009c36:	bd30      	pop	{r4, r5, pc}
 8009c38:	4b06      	ldr	r3, [pc, #24]	; (8009c54 <acc_element_source_adc_produce+0x78>)
 8009c3a:	4a07      	ldr	r2, [pc, #28]	; (8009c58 <acc_element_source_adc_produce+0x7c>)
 8009c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c3e:	4907      	ldr	r1, [pc, #28]	; (8009c5c <acc_element_source_adc_produce+0x80>)
 8009c40:	4798      	blx	r3
 8009c42:	4628      	mov	r0, r5
 8009c44:	b003      	add	sp, #12
 8009c46:	bd30      	pop	{r4, r5, pc}
 8009c48:	4605      	mov	r5, r0
 8009c4a:	4628      	mov	r0, r5
 8009c4c:	b003      	add	sp, #12
 8009c4e:	bd30      	pop	{r4, r5, pc}
 8009c50:	51645c3c 	.word	0x51645c3c
 8009c54:	20000640 	.word	0x20000640
 8009c58:	080142b8 	.word	0x080142b8
 8009c5c:	080142d8 	.word	0x080142d8

08009c60 <acc_element_source_adc_inject_data>:
 8009c60:	b570      	push	{r4, r5, r6, lr}
 8009c62:	4604      	mov	r4, r0
 8009c64:	6940      	ldr	r0, [r0, #20]
 8009c66:	4e08      	ldr	r6, [pc, #32]	; (8009c88 <acc_element_source_adc_inject_data+0x28>)
 8009c68:	4615      	mov	r5, r2
 8009c6a:	f004 fef1 	bl	800ea50 <memcpy>
 8009c6e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009c70:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009c72:	6820      	ldr	r0, [r4, #0]
 8009c74:	6a22      	ldr	r2, [r4, #32]
 8009c76:	600d      	str	r5, [r1, #0]
 8009c78:	2100      	movs	r1, #0
 8009c7a:	601e      	str	r6, [r3, #0]
 8009c7c:	6843      	ldr	r3, [r0, #4]
 8009c7e:	6011      	str	r1, [r2, #0]
 8009c80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009c84:	4718      	bx	r3
 8009c86:	bf00      	nop
 8009c88:	51645c3c 	.word	0x51645c3c

08009c8c <acc_cpd_cbank_and_vana_calibration>:
 8009c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c90:	ed2d 8b02 	vpush	{d8}
 8009c94:	4614      	mov	r4, r2
 8009c96:	b08b      	sub	sp, #44	; 0x2c
 8009c98:	461e      	mov	r6, r3
 8009c9a:	ab09      	add	r3, sp, #36	; 0x24
 8009c9c:	4680      	mov	r8, r0
 8009c9e:	4689      	mov	r9, r1
 8009ca0:	460a      	mov	r2, r1
 8009ca2:	2500      	movs	r5, #0
 8009ca4:	4601      	mov	r1, r0
 8009ca6:	6820      	ldr	r0, [r4, #0]
 8009ca8:	9300      	str	r3, [sp, #0]
 8009caa:	ab08      	add	r3, sp, #32
 8009cac:	e9cd 5508 	strd	r5, r5, [sp, #32]
 8009cb0:	9606      	str	r6, [sp, #24]
 8009cb2:	f7fe faed 	bl	8008290 <acc_sensor_protocol_r2_prepare_load>
 8009cb6:	2800      	cmp	r0, #0
 8009cb8:	f000 808b 	beq.w	8009dd2 <acc_cpd_cbank_and_vana_calibration+0x146>
 8009cbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cbe:	461e      	mov	r6, r3
 8009cc0:	f5c5 734b 	rsb	r3, r5, #812	; 0x32c
 8009cc4:	429e      	cmp	r6, r3
 8009cc6:	bf28      	it	cs
 8009cc8:	461e      	movcs	r6, r3
 8009cca:	9f08      	ldr	r7, [sp, #32]
 8009ccc:	f003 fc22 	bl	800d514 <acc_image_a111_r2c_cbank_and_vana_calibration_get>
 8009cd0:	ea4f 0a55 	mov.w	sl, r5, lsr #1
 8009cd4:	0872      	lsrs	r2, r6, #1
 8009cd6:	4639      	mov	r1, r7
 8009cd8:	eb00 008a 	add.w	r0, r0, sl, lsl #2
 8009cdc:	f003 fbcc 	bl	800d478 <acc_confprogram_copy>
 8009ce0:	b2b2      	uxth	r2, r6
 8009ce2:	9204      	str	r2, [sp, #16]
 8009ce4:	f003 fc1a 	bl	800d51c <acc_image_a111_r2c_cbank_and_vana_calibration_param_table_get>
 8009ce8:	6862      	ldr	r2, [r4, #4]
 8009cea:	9201      	str	r2, [sp, #4]
 8009cec:	2218      	movs	r2, #24
 8009cee:	b2a9      	uxth	r1, r5
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	9200      	str	r2, [sp, #0]
 8009cf4:	4638      	mov	r0, r7
 8009cf6:	9a04      	ldr	r2, [sp, #16]
 8009cf8:	9205      	str	r2, [sp, #20]
 8009cfa:	9104      	str	r1, [sp, #16]
 8009cfc:	f003 face 	bl	800d29c <acc_confprogram_patch_offset>
 8009d00:	f003 fc0c 	bl	800d51c <acc_image_a111_r2c_cbank_and_vana_calibration_param_table_get>
 8009d04:	68a2      	ldr	r2, [r4, #8]
 8009d06:	9201      	str	r2, [sp, #4]
 8009d08:	2216      	movs	r2, #22
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	9200      	str	r2, [sp, #0]
 8009d0e:	4638      	mov	r0, r7
 8009d10:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8009d14:	f003 fac2 	bl	800d29c <acc_confprogram_patch_offset>
 8009d18:	f003 fc00 	bl	800d51c <acc_image_a111_r2c_cbank_and_vana_calibration_param_table_get>
 8009d1c:	68e2      	ldr	r2, [r4, #12]
 8009d1e:	9201      	str	r2, [sp, #4]
 8009d20:	2217      	movs	r2, #23
 8009d22:	4603      	mov	r3, r0
 8009d24:	9200      	str	r2, [sp, #0]
 8009d26:	4638      	mov	r0, r7
 8009d28:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8009d2c:	f003 fab6 	bl	800d29c <acc_confprogram_patch_offset>
 8009d30:	f003 fbf4 	bl	800d51c <acc_image_a111_r2c_cbank_and_vana_calibration_param_table_get>
 8009d34:	f04f 0c15 	mov.w	ip, #21
 8009d38:	4603      	mov	r3, r0
 8009d3a:	8a20      	ldrh	r0, [r4, #16]
 8009d3c:	9001      	str	r0, [sp, #4]
 8009d3e:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8009d42:	f8cd c000 	str.w	ip, [sp]
 8009d46:	4638      	mov	r0, r7
 8009d48:	f003 faa8 	bl	800d29c <acc_confprogram_patch_offset>
 8009d4c:	f003 fbe6 	bl	800d51c <acc_image_a111_r2c_cbank_and_vana_calibration_param_table_get>
 8009d50:	f04f 0b00 	mov.w	fp, #0
 8009d54:	f04f 0c10 	mov.w	ip, #16
 8009d58:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	e9cd bc00 	strd	fp, ip, [sp]
 8009d62:	4638      	mov	r0, r7
 8009d64:	f003 fa9a 	bl	800d29c <acc_confprogram_patch_offset>
 8009d68:	4633      	mov	r3, r6
 8009d6a:	6820      	ldr	r0, [r4, #0]
 8009d6c:	4642      	mov	r2, r8
 8009d6e:	fa1f f18a 	uxth.w	r1, sl
 8009d72:	f7fd ff9d 	bl	8007cb0 <acc_sensor_r2_load_confmem>
 8009d76:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009d78:	4435      	add	r5, r6
 8009d7a:	f5b5 7f4b 	cmp.w	r5, #812	; 0x32c
 8009d7e:	d39f      	bcc.n	8009cc0 <acc_cpd_cbank_and_vana_calibration+0x34>
 8009d80:	48ba      	ldr	r0, [pc, #744]	; (800a06c <acc_cpd_cbank_and_vana_calibration+0x3e0>)
 8009d82:	f003 fb87 	bl	800d494 <acc_diagnostic_log_set_scope>
 8009d86:	6821      	ldr	r1, [r4, #0]
 8009d88:	48b9      	ldr	r0, [pc, #740]	; (800a070 <acc_cpd_cbank_and_vana_calibration+0x3e4>)
 8009d8a:	f003 fba3 	bl	800d4d4 <acc_diagnostic_log_scalar>
 8009d8e:	48b9      	ldr	r0, [pc, #740]	; (800a074 <acc_cpd_cbank_and_vana_calibration+0x3e8>)
 8009d90:	2203      	movs	r2, #3
 8009d92:	4659      	mov	r1, fp
 8009d94:	f003 fb86 	bl	800d4a4 <acc_diagnostic_log_declare_parameter>
 8009d98:	6826      	ldr	r6, [r4, #0]
 8009d9a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009d9e:	4630      	mov	r0, r6
 8009da0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8009da4:	f7fe fb52 	bl	800844c <acc_sensor_protocol_r2_is_sensor_running>
 8009da8:	4605      	mov	r5, r0
 8009daa:	b1f0      	cbz	r0, 8009dea <acc_cpd_cbank_and_vana_calibration+0x15e>
 8009dac:	4db2      	ldr	r5, [pc, #712]	; (800a078 <acc_cpd_cbank_and_vana_calibration+0x3ec>)
 8009dae:	4ab3      	ldr	r2, [pc, #716]	; (800a07c <acc_cpd_cbank_and_vana_calibration+0x3f0>)
 8009db0:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 8009db2:	49b3      	ldr	r1, [pc, #716]	; (800a080 <acc_cpd_cbank_and_vana_calibration+0x3f4>)
 8009db4:	4633      	mov	r3, r6
 8009db6:	4658      	mov	r0, fp
 8009db8:	47a0      	blx	r4
 8009dba:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009dbc:	4ab1      	ldr	r2, [pc, #708]	; (800a084 <acc_cpd_cbank_and_vana_calibration+0x3f8>)
 8009dbe:	49b0      	ldr	r1, [pc, #704]	; (800a080 <acc_cpd_cbank_and_vana_calibration+0x3f4>)
 8009dc0:	2000      	movs	r0, #0
 8009dc2:	4798      	blx	r3
 8009dc4:	2600      	movs	r6, #0
 8009dc6:	4630      	mov	r0, r6
 8009dc8:	b00b      	add	sp, #44	; 0x2c
 8009dca:	ecbd 8b02 	vpop	{d8}
 8009dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dd2:	4ba9      	ldr	r3, [pc, #676]	; (800a078 <acc_cpd_cbank_and_vana_calibration+0x3ec>)
 8009dd4:	4aac      	ldr	r2, [pc, #688]	; (800a088 <acc_cpd_cbank_and_vana_calibration+0x3fc>)
 8009dd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dd8:	49a9      	ldr	r1, [pc, #676]	; (800a080 <acc_cpd_cbank_and_vana_calibration+0x3f4>)
 8009dda:	4606      	mov	r6, r0
 8009ddc:	4798      	blx	r3
 8009dde:	4630      	mov	r0, r6
 8009de0:	b00b      	add	sp, #44	; 0x2c
 8009de2:	ecbd 8b02 	vpop	{d8}
 8009de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dea:	f003 fb93 	bl	800d514 <acc_image_a111_r2c_cbank_and_vana_calibration_get>
 8009dee:	9004      	str	r0, [sp, #16]
 8009df0:	f003 fb94 	bl	800d51c <acc_image_a111_r2c_cbank_and_vana_calibration_param_table_get>
 8009df4:	f8df a2b4 	ldr.w	sl, [pc, #692]	; 800a0ac <acc_cpd_cbank_and_vana_calibration+0x420>
 8009df8:	9904      	ldr	r1, [sp, #16]
 8009dfa:	f8df b278 	ldr.w	fp, [pc, #632]	; 800a074 <acc_cpd_cbank_and_vana_calibration+0x3e8>
 8009dfe:	2201      	movs	r2, #1
 8009e00:	4603      	mov	r3, r0
 8009e02:	9200      	str	r2, [sp, #0]
 8009e04:	e9cd 5a01 	strd	r5, sl, [sp, #4]
 8009e08:	462a      	mov	r2, r5
 8009e0a:	4630      	mov	r0, r6
 8009e0c:	ee08 8a10 	vmov	s16, r8
 8009e10:	f003 fab8 	bl	800d384 <acc_confprogram_live_patch>
 8009e14:	462f      	mov	r7, r5
 8009e16:	9405      	str	r4, [sp, #20]
 8009e18:	462c      	mov	r4, r5
 8009e1a:	4639      	mov	r1, r7
 8009e1c:	4658      	mov	r0, fp
 8009e1e:	f003 fb49 	bl	800d4b4 <acc_diagnostic_log_set_parameter>
 8009e22:	f003 fb77 	bl	800d514 <acc_image_a111_r2c_cbank_and_vana_calibration_get>
 8009e26:	9004      	str	r0, [sp, #16]
 8009e28:	f003 fb78 	bl	800d51c <acc_image_a111_r2c_cbank_and_vana_calibration_param_table_get>
 8009e2c:	221c      	movs	r2, #28
 8009e2e:	9904      	ldr	r1, [sp, #16]
 8009e30:	9200      	str	r2, [sp, #0]
 8009e32:	4603      	mov	r3, r0
 8009e34:	e9cd 7a01 	strd	r7, sl, [sp, #4]
 8009e38:	4630      	mov	r0, r6
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	f003 faa2 	bl	800d384 <acc_confprogram_live_patch>
 8009e40:	21ef      	movs	r1, #239	; 0xef
 8009e42:	4630      	mov	r0, r6
 8009e44:	f7fe fa88 	bl	8008358 <acc_sensor_protocol_r2_run_program>
 8009e48:	2800      	cmp	r0, #0
 8009e4a:	f000 8131 	beq.w	800a0b0 <acc_cpd_cbank_and_vana_calibration+0x424>
 8009e4e:	2300      	movs	r3, #0
 8009e50:	2209      	movs	r2, #9
 8009e52:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8009e56:	4630      	mov	r0, r6
 8009e58:	f7fe fc02 	bl	8008660 <acc_sensor_protocol_r2_wait_for_specific_event>
 8009e5c:	b938      	cbnz	r0, 8009e6e <acc_cpd_cbank_and_vana_calibration+0x1e2>
 8009e5e:	4d86      	ldr	r5, [pc, #536]	; (800a078 <acc_cpd_cbank_and_vana_calibration+0x3ec>)
 8009e60:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 8009e62:	4a8a      	ldr	r2, [pc, #552]	; (800a08c <acc_cpd_cbank_and_vana_calibration+0x400>)
 8009e64:	4986      	ldr	r1, [pc, #536]	; (800a080 <acc_cpd_cbank_and_vana_calibration+0x3f4>)
 8009e66:	463b      	mov	r3, r7
 8009e68:	2000      	movs	r0, #0
 8009e6a:	47a0      	blx	r4
 8009e6c:	e7a5      	b.n	8009dba <acc_cpd_cbank_and_vana_calibration+0x12e>
 8009e6e:	2110      	movs	r1, #16
 8009e70:	4648      	mov	r0, r9
 8009e72:	f7fd ff55 	bl	8007d20 <acc_sensor_r2_buffer_processed_verify_size>
 8009e76:	b928      	cbnz	r0, 8009e84 <acc_cpd_cbank_and_vana_calibration+0x1f8>
 8009e78:	4d7f      	ldr	r5, [pc, #508]	; (800a078 <acc_cpd_cbank_and_vana_calibration+0x3ec>)
 8009e7a:	4a85      	ldr	r2, [pc, #532]	; (800a090 <acc_cpd_cbank_and_vana_calibration+0x404>)
 8009e7c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009e7e:	4980      	ldr	r1, [pc, #512]	; (800a080 <acc_cpd_cbank_and_vana_calibration+0x3f4>)
 8009e80:	4798      	blx	r3
 8009e82:	e7ed      	b.n	8009e60 <acc_cpd_cbank_and_vana_calibration+0x1d4>
 8009e84:	ee18 1a10 	vmov	r1, s16
 8009e88:	2310      	movs	r3, #16
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	4630      	mov	r0, r6
 8009e8e:	f7fd ff4f 	bl	8007d30 <acc_sensor_r2_buffer_processed_read>
 8009e92:	2310      	movs	r3, #16
 8009e94:	4602      	mov	r2, r0
 8009e96:	4680      	mov	r8, r0
 8009e98:	4631      	mov	r1, r6
 8009e9a:	2000      	movs	r0, #0
 8009e9c:	f7fe ff14 	bl	8008cc8 <acc_probes_execute_uint16>
 8009ea0:	4630      	mov	r0, r6
 8009ea2:	f7fe fae5 	bl	8008470 <acc_sensor_protocol_r2_ack_event>
 8009ea6:	2800      	cmp	r0, #0
 8009ea8:	d0d9      	beq.n	8009e5e <acc_cpd_cbank_and_vana_calibration+0x1d2>
 8009eaa:	2500      	movs	r5, #0
 8009eac:	462b      	mov	r3, r5
 8009eae:	4642      	mov	r2, r8
 8009eb0:	f108 0c1e 	add.w	ip, r8, #30
 8009eb4:	8851      	ldrh	r1, [r2, #2]
 8009eb6:	f832 0b02 	ldrh.w	r0, [r2], #2
 8009eba:	4281      	cmp	r1, r0
 8009ebc:	440b      	add	r3, r1
 8009ebe:	bf34      	ite	cc
 8009ec0:	1a41      	subcc	r1, r0, r1
 8009ec2:	1a09      	subcs	r1, r1, r0
 8009ec4:	428d      	cmp	r5, r1
 8009ec6:	bf38      	it	cc
 8009ec8:	460d      	movcc	r5, r1
 8009eca:	4594      	cmp	ip, r2
 8009ecc:	d1f2      	bne.n	8009eb4 <acc_cpd_cbank_and_vana_calibration+0x228>
 8009ece:	4871      	ldr	r0, [pc, #452]	; (800a094 <acc_cpd_cbank_and_vana_calibration+0x408>)
 8009ed0:	9304      	str	r3, [sp, #16]
 8009ed2:	4659      	mov	r1, fp
 8009ed4:	f003 faf6 	bl	800d4c4 <acc_diagnostic_log_array>
 8009ed8:	2110      	movs	r1, #16
 8009eda:	4640      	mov	r0, r8
 8009edc:	f003 fb02 	bl	800d4e4 <acc_diagnostic_log_data_u16>
 8009ee0:	f8b8 2000 	ldrh.w	r2, [r8]
 8009ee4:	9b04      	ldr	r3, [sp, #16]
 8009ee6:	4413      	add	r3, r2
 8009ee8:	ea4f 1813 	mov.w	r8, r3, lsr #4
 8009eec:	f5a8 43f2 	sub.w	r3, r8, #30976	; 0x7900
 8009ef0:	3b18      	subs	r3, #24
 8009ef2:	b29b      	uxth	r3, r3
 8009ef4:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8009ef8:	428b      	cmp	r3, r1
 8009efa:	d83d      	bhi.n	8009f78 <acc_cpd_cbank_and_vana_calibration+0x2ec>
 8009efc:	f5b5 7f48 	cmp.w	r5, #800	; 0x320
 8009f00:	d83a      	bhi.n	8009f78 <acc_cpd_cbank_and_vana_calibration+0x2ec>
 8009f02:	f8cd 8010 	str.w	r8, [sp, #16]
 8009f06:	9c05      	ldr	r4, [sp, #20]
 8009f08:	9507      	str	r5, [sp, #28]
 8009f0a:	f7fc fbd1 	bl	80066b0 <acc_rss_integration_log_level>
 8009f0e:	2803      	cmp	r0, #3
 8009f10:	ee18 8a10 	vmov	r8, s16
 8009f14:	9a04      	ldr	r2, [sp, #16]
 8009f16:	9b07      	ldr	r3, [sp, #28]
 8009f18:	d909      	bls.n	8009f2e <acc_cpd_cbank_and_vana_calibration+0x2a2>
 8009f1a:	b292      	uxth	r2, r2
 8009f1c:	4d56      	ldr	r5, [pc, #344]	; (800a078 <acc_cpd_cbank_and_vana_calibration+0x3ec>)
 8009f1e:	9301      	str	r3, [sp, #4]
 8009f20:	9200      	str	r2, [sp, #0]
 8009f22:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 8009f24:	4a5c      	ldr	r2, [pc, #368]	; (800a098 <acc_cpd_cbank_and_vana_calibration+0x40c>)
 8009f26:	4956      	ldr	r1, [pc, #344]	; (800a080 <acc_cpd_cbank_and_vana_calibration+0x3f4>)
 8009f28:	4633      	mov	r3, r6
 8009f2a:	2004      	movs	r0, #4
 8009f2c:	47a8      	blx	r5
 8009f2e:	9e06      	ldr	r6, [sp, #24]
 8009f30:	7137      	strb	r7, [r6, #4]
 8009f32:	6825      	ldr	r5, [r4, #0]
 8009f34:	f003 faee 	bl	800d514 <acc_image_a111_r2c_cbank_and_vana_calibration_get>
 8009f38:	9004      	str	r0, [sp, #16]
 8009f3a:	f003 faef 	bl	800d51c <acc_image_a111_r2c_cbank_and_vana_calibration_param_table_get>
 8009f3e:	7936      	ldrb	r6, [r6, #4]
 8009f40:	9904      	ldr	r1, [sp, #16]
 8009f42:	f8cd a008 	str.w	sl, [sp, #8]
 8009f46:	221c      	movs	r2, #28
 8009f48:	e9cd 2600 	strd	r2, r6, [sp]
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	2200      	movs	r2, #0
 8009f50:	4628      	mov	r0, r5
 8009f52:	f003 fa17 	bl	800d384 <acc_confprogram_live_patch>
 8009f56:	6820      	ldr	r0, [r4, #0]
 8009f58:	2119      	movs	r1, #25
 8009f5a:	f7fe f9fd 	bl	8008358 <acc_sensor_protocol_r2_run_program>
 8009f5e:	4606      	mov	r6, r0
 8009f60:	bb00      	cbnz	r0, 8009fa4 <acc_cpd_cbank_and_vana_calibration+0x318>
 8009f62:	4b45      	ldr	r3, [pc, #276]	; (800a078 <acc_cpd_cbank_and_vana_calibration+0x3ec>)
 8009f64:	4a4d      	ldr	r2, [pc, #308]	; (800a09c <acc_cpd_cbank_and_vana_calibration+0x410>)
 8009f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f68:	4945      	ldr	r1, [pc, #276]	; (800a080 <acc_cpd_cbank_and_vana_calibration+0x3f4>)
 8009f6a:	4798      	blx	r3
 8009f6c:	4630      	mov	r0, r6
 8009f6e:	b00b      	add	sp, #44	; 0x2c
 8009f70:	ecbd 8b02 	vpop	{d8}
 8009f74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f78:	f7fc fb9a 	bl	80066b0 <acc_rss_integration_log_level>
 8009f7c:	2803      	cmp	r0, #3
 8009f7e:	d90a      	bls.n	8009f96 <acc_cpd_cbank_and_vana_calibration+0x30a>
 8009f80:	fa1f f288 	uxth.w	r2, r8
 8009f84:	e9cd 2500 	strd	r2, r5, [sp]
 8009f88:	4b3b      	ldr	r3, [pc, #236]	; (800a078 <acc_cpd_cbank_and_vana_calibration+0x3ec>)
 8009f8a:	4a43      	ldr	r2, [pc, #268]	; (800a098 <acc_cpd_cbank_and_vana_calibration+0x40c>)
 8009f8c:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8009f8e:	493c      	ldr	r1, [pc, #240]	; (800a080 <acc_cpd_cbank_and_vana_calibration+0x3f4>)
 8009f90:	4633      	mov	r3, r6
 8009f92:	2004      	movs	r0, #4
 8009f94:	47a8      	blx	r5
 8009f96:	b10c      	cbz	r4, 8009f9c <acc_cpd_cbank_and_vana_calibration+0x310>
 8009f98:	4d37      	ldr	r5, [pc, #220]	; (800a078 <acc_cpd_cbank_and_vana_calibration+0x3ec>)
 8009f9a:	e70e      	b.n	8009dba <acc_cpd_cbank_and_vana_calibration+0x12e>
 8009f9c:	f89d 7025 	ldrb.w	r7, [sp, #37]	; 0x25
 8009fa0:	2401      	movs	r4, #1
 8009fa2:	e73a      	b.n	8009e1a <acc_cpd_cbank_and_vana_calibration+0x18e>
 8009fa4:	4648      	mov	r0, r9
 8009fa6:	2108      	movs	r1, #8
 8009fa8:	6826      	ldr	r6, [r4, #0]
 8009faa:	f7fd feb9 	bl	8007d20 <acc_sensor_r2_buffer_processed_verify_size>
 8009fae:	b958      	cbnz	r0, 8009fc8 <acc_cpd_cbank_and_vana_calibration+0x33c>
 8009fb0:	4d31      	ldr	r5, [pc, #196]	; (800a078 <acc_cpd_cbank_and_vana_calibration+0x3ec>)
 8009fb2:	4a37      	ldr	r2, [pc, #220]	; (800a090 <acc_cpd_cbank_and_vana_calibration+0x404>)
 8009fb4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009fb6:	4932      	ldr	r1, [pc, #200]	; (800a080 <acc_cpd_cbank_and_vana_calibration+0x3f4>)
 8009fb8:	4798      	blx	r3
 8009fba:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009fbc:	4a38      	ldr	r2, [pc, #224]	; (800a0a0 <acc_cpd_cbank_and_vana_calibration+0x414>)
 8009fbe:	4930      	ldr	r1, [pc, #192]	; (800a080 <acc_cpd_cbank_and_vana_calibration+0x3f4>)
 8009fc0:	2000      	movs	r0, #0
 8009fc2:	4798      	blx	r3
 8009fc4:	2600      	movs	r6, #0
 8009fc6:	e70a      	b.n	8009dde <acc_cpd_cbank_and_vana_calibration+0x152>
 8009fc8:	2300      	movs	r3, #0
 8009fca:	2203      	movs	r2, #3
 8009fcc:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8009fd0:	4630      	mov	r0, r6
 8009fd2:	f7fe fb45 	bl	8008660 <acc_sensor_protocol_r2_wait_for_specific_event>
 8009fd6:	2800      	cmp	r0, #0
 8009fd8:	d046      	beq.n	800a068 <acc_cpd_cbank_and_vana_calibration+0x3dc>
 8009fda:	2408      	movs	r4, #8
 8009fdc:	4623      	mov	r3, r4
 8009fde:	2200      	movs	r2, #0
 8009fe0:	4641      	mov	r1, r8
 8009fe2:	4630      	mov	r0, r6
 8009fe4:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
 8009fe8:	f7fd fea2 	bl	8007d30 <acc_sensor_r2_buffer_processed_read>
 8009fec:	492d      	ldr	r1, [pc, #180]	; (800a0a4 <acc_cpd_cbank_and_vana_calibration+0x418>)
 8009fee:	4605      	mov	r5, r0
 8009ff0:	482d      	ldr	r0, [pc, #180]	; (800a0a8 <acc_cpd_cbank_and_vana_calibration+0x41c>)
 8009ff2:	f003 fa67 	bl	800d4c4 <acc_diagnostic_log_array>
 8009ff6:	4621      	mov	r1, r4
 8009ff8:	4628      	mov	r0, r5
 8009ffa:	1eac      	subs	r4, r5, #2
 8009ffc:	f003 fa72 	bl	800d4e4 <acc_diagnostic_log_data_u16>
 800a000:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 800a004:	4620      	mov	r0, r4
 800a006:	2300      	movs	r3, #0
 800a008:	f830 2f02 	ldrh.w	r2, [r0, #2]!
 800a00c:	f5d2 4100 	rsbs	r1, r2, #32768	; 0x8000
 800a010:	bf48      	it	mi
 800a012:	f5a2 4100 	submi.w	r1, r2, #32768	; 0x8000
 800a016:	42b9      	cmp	r1, r7
 800a018:	bfb8      	it	lt
 800a01a:	f8ad 3024 	strhlt.w	r3, [sp, #36]	; 0x24
 800a01e:	f103 0301 	add.w	r3, r3, #1
 800a022:	bfb8      	it	lt
 800a024:	460f      	movlt	r7, r1
 800a026:	2b08      	cmp	r3, #8
 800a028:	d1ee      	bne.n	800a008 <acc_cpd_cbank_and_vana_calibration+0x37c>
 800a02a:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 800a02e:	4631      	mov	r1, r6
 800a030:	aa09      	add	r2, sp, #36	; 0x24
 800a032:	2301      	movs	r3, #1
 800a034:	f007 0707 	and.w	r7, r7, #7
 800a038:	2006      	movs	r0, #6
 800a03a:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 800a03e:	f7fe fe43 	bl	8008cc8 <acc_probes_execute_uint16>
 800a042:	4630      	mov	r0, r6
 800a044:	f7fe fa14 	bl	8008470 <acc_sensor_protocol_r2_ack_event>
 800a048:	4606      	mov	r6, r0
 800a04a:	b168      	cbz	r0, 800a068 <acc_cpd_cbank_and_vana_calibration+0x3dc>
 800a04c:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 800a050:	2900      	cmp	r1, #0
 800a052:	d05e      	beq.n	800a112 <acc_cpd_cbank_and_vana_calibration+0x486>
 800a054:	2300      	movs	r3, #0
 800a056:	e001      	b.n	800a05c <acc_cpd_cbank_and_vana_calibration+0x3d0>
 800a058:	428b      	cmp	r3, r1
 800a05a:	d030      	beq.n	800a0be <acc_cpd_cbank_and_vana_calibration+0x432>
 800a05c:	f934 2f02 	ldrsh.w	r2, [r4, #2]!
 800a060:	2a00      	cmp	r2, #0
 800a062:	f103 0301 	add.w	r3, r3, #1
 800a066:	daf7      	bge.n	800a058 <acc_cpd_cbank_and_vana_calibration+0x3cc>
 800a068:	4d03      	ldr	r5, [pc, #12]	; (800a078 <acc_cpd_cbank_and_vana_calibration+0x3ec>)
 800a06a:	e7a6      	b.n	8009fba <acc_cpd_cbank_and_vana_calibration+0x32e>
 800a06c:	08014334 	.word	0x08014334
 800a070:	08014350 	.word	0x08014350
 800a074:	0801435c 	.word	0x0801435c
 800a078:	20000640 	.word	0x20000640
 800a07c:	08014368 	.word	0x08014368
 800a080:	08014330 	.word	0x08014330
 800a084:	08014430 	.word	0x08014430
 800a088:	080142ec 	.word	0x080142ec
 800a08c:	08014404 	.word	0x08014404
 800a090:	080143dc 	.word	0x080143dc
 800a094:	080143f4 	.word	0x080143f4
 800a098:	080144c4 	.word	0x080144c4
 800a09c:	08014448 	.word	0x08014448
 800a0a0:	0801448c 	.word	0x0801448c
 800a0a4:	0801485c 	.word	0x0801485c
 800a0a8:	0801447c 	.word	0x0801447c
 800a0ac:	08007c55 	.word	0x08007c55
 800a0b0:	4d19      	ldr	r5, [pc, #100]	; (800a118 <acc_cpd_cbank_and_vana_calibration+0x48c>)
 800a0b2:	4a1a      	ldr	r2, [pc, #104]	; (800a11c <acc_cpd_cbank_and_vana_calibration+0x490>)
 800a0b4:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 800a0b6:	491a      	ldr	r1, [pc, #104]	; (800a120 <acc_cpd_cbank_and_vana_calibration+0x494>)
 800a0b8:	463b      	mov	r3, r7
 800a0ba:	47a0      	blx	r4
 800a0bc:	e67d      	b.n	8009dba <acc_cpd_cbank_and_vana_calibration+0x12e>
 800a0be:	1c4b      	adds	r3, r1, #1
 800a0c0:	2b07      	cmp	r3, #7
 800a0c2:	dc0c      	bgt.n	800a0de <acc_cpd_cbank_and_vana_calibration+0x452>
 800a0c4:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 800a0c8:	e001      	b.n	800a0ce <acc_cpd_cbank_and_vana_calibration+0x442>
 800a0ca:	2b08      	cmp	r3, #8
 800a0cc:	d007      	beq.n	800a0de <acc_cpd_cbank_and_vana_calibration+0x452>
 800a0ce:	f835 2b02 	ldrh.w	r2, [r5], #2
 800a0d2:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800a0d6:	f103 0301 	add.w	r3, r3, #1
 800a0da:	d8f6      	bhi.n	800a0ca <acc_cpd_cbank_and_vana_calibration+0x43e>
 800a0dc:	e7c4      	b.n	800a068 <acc_cpd_cbank_and_vana_calibration+0x3dc>
 800a0de:	9b06      	ldr	r3, [sp, #24]
 800a0e0:	6019      	str	r1, [r3, #0]
 800a0e2:	f7fc fae5 	bl	80066b0 <acc_rss_integration_log_level>
 800a0e6:	2801      	cmp	r0, #1
 800a0e8:	d909      	bls.n	800a0fe <acc_cpd_cbank_and_vana_calibration+0x472>
 800a0ea:	9906      	ldr	r1, [sp, #24]
 800a0ec:	4a0a      	ldr	r2, [pc, #40]	; (800a118 <acc_cpd_cbank_and_vana_calibration+0x48c>)
 800a0ee:	790b      	ldrb	r3, [r1, #4]
 800a0f0:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800a0f2:	9300      	str	r3, [sp, #0]
 800a0f4:	680b      	ldr	r3, [r1, #0]
 800a0f6:	4a0b      	ldr	r2, [pc, #44]	; (800a124 <acc_cpd_cbank_and_vana_calibration+0x498>)
 800a0f8:	4909      	ldr	r1, [pc, #36]	; (800a120 <acc_cpd_cbank_and_vana_calibration+0x494>)
 800a0fa:	2002      	movs	r0, #2
 800a0fc:	47a0      	blx	r4
 800a0fe:	9c06      	ldr	r4, [sp, #24]
 800a100:	4809      	ldr	r0, [pc, #36]	; (800a128 <acc_cpd_cbank_and_vana_calibration+0x49c>)
 800a102:	6821      	ldr	r1, [r4, #0]
 800a104:	f003 f9e6 	bl	800d4d4 <acc_diagnostic_log_scalar>
 800a108:	7921      	ldrb	r1, [r4, #4]
 800a10a:	4808      	ldr	r0, [pc, #32]	; (800a12c <acc_cpd_cbank_and_vana_calibration+0x4a0>)
 800a10c:	f003 f9e2 	bl	800d4d4 <acc_diagnostic_log_scalar>
 800a110:	e665      	b.n	8009dde <acc_cpd_cbank_and_vana_calibration+0x152>
 800a112:	2301      	movs	r3, #1
 800a114:	e7d6      	b.n	800a0c4 <acc_cpd_cbank_and_vana_calibration+0x438>
 800a116:	bf00      	nop
 800a118:	20000640 	.word	0x20000640
 800a11c:	0801439c 	.word	0x0801439c
 800a120:	08014330 	.word	0x08014330
 800a124:	080144a4 	.word	0x080144a4
 800a128:	080144b8 	.word	0x080144b8
 800a12c:	0801435c 	.word	0x0801435c

0800a130 <acc_cpd_dll_calibration>:
 800a130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a134:	ed2d 8b0a 	vpush	{d8-d12}
 800a138:	b0c7      	sub	sp, #284	; 0x11c
 800a13a:	461d      	mov	r5, r3
 800a13c:	9309      	str	r3, [sp, #36]	; 0x24
 800a13e:	2400      	movs	r4, #0
 800a140:	4b63      	ldr	r3, [pc, #396]	; (800a2d0 <acc_cpd_dll_calibration+0x1a0>)
 800a142:	61eb      	str	r3, [r5, #28]
 800a144:	f5b1 7f45 	cmp.w	r1, #788	; 0x314
 800a148:	ee0b 0a90 	vmov	s23, r0
 800a14c:	4693      	mov	fp, r2
 800a14e:	766c      	strb	r4, [r5, #25]
 800a150:	f0c0 8479 	bcc.w	800aa46 <acc_cpd_dll_calibration+0x916>
 800a154:	f5a1 7316 	sub.w	r3, r1, #600	; 0x258
 800a158:	f023 0301 	bic.w	r3, r3, #1
 800a15c:	f5a1 7145 	sub.w	r1, r1, #788	; 0x314
 800a160:	f021 0201 	bic.w	r2, r1, #1
 800a164:	18c3      	adds	r3, r0, r3
 800a166:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800a16a:	ee0c 1a10 	vmov	s24, r1
 800a16e:	9312      	str	r3, [sp, #72]	; 0x48
 800a170:	eb00 0a02 	add.w	sl, r0, r2
 800a174:	f0c0 8085 	bcc.w	800a282 <acc_cpd_dll_calibration+0x152>
 800a178:	4856      	ldr	r0, [pc, #344]	; (800a2d4 <acc_cpd_dll_calibration+0x1a4>)
 800a17a:	ed9f 9a57 	vldr	s18, [pc, #348]	; 800a2d8 <acc_cpd_dll_calibration+0x1a8>
 800a17e:	eddf 8a57 	vldr	s17, [pc, #348]	; 800a2dc <acc_cpd_dll_calibration+0x1ac>
 800a182:	f003 f987 	bl	800d494 <acc_diagnostic_log_set_scope>
 800a186:	f8db 1000 	ldr.w	r1, [fp]
 800a18a:	4855      	ldr	r0, [pc, #340]	; (800a2e0 <acc_cpd_dll_calibration+0x1b0>)
 800a18c:	f003 f9a2 	bl	800d4d4 <acc_diagnostic_log_scalar>
 800a190:	4854      	ldr	r0, [pc, #336]	; (800a2e4 <acc_cpd_dll_calibration+0x1b4>)
 800a192:	2202      	movs	r2, #2
 800a194:	2101      	movs	r1, #1
 800a196:	f003 f985 	bl	800d4a4 <acc_diagnostic_log_declare_parameter>
 800a19a:	4853      	ldr	r0, [pc, #332]	; (800a2e8 <acc_cpd_dll_calibration+0x1b8>)
 800a19c:	221f      	movs	r2, #31
 800a19e:	2100      	movs	r1, #0
 800a1a0:	f003 f980 	bl	800d4a4 <acc_diagnostic_log_declare_parameter>
 800a1a4:	4851      	ldr	r0, [pc, #324]	; (800a2ec <acc_cpd_dll_calibration+0x1bc>)
 800a1a6:	227b      	movs	r2, #123	; 0x7b
 800a1a8:	2100      	movs	r1, #0
 800a1aa:	f003 f97b 	bl	800d4a4 <acc_diagnostic_log_declare_parameter>
 800a1ae:	2302      	movs	r3, #2
 800a1b0:	461c      	mov	r4, r3
 800a1b2:	484f      	ldr	r0, [pc, #316]	; (800a2f0 <acc_cpd_dll_calibration+0x1c0>)
 800a1b4:	9319      	str	r3, [sp, #100]	; 0x64
 800a1b6:	220b      	movs	r2, #11
 800a1b8:	2100      	movs	r1, #0
 800a1ba:	f003 f973 	bl	800d4a4 <acc_diagnostic_log_declare_parameter>
 800a1be:	46d1      	mov	r9, sl
 800a1c0:	940e      	str	r4, [sp, #56]	; 0x38
 800a1c2:	46da      	mov	sl, fp
 800a1c4:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a1c6:	4847      	ldr	r0, [pc, #284]	; (800a2e4 <acc_cpd_dll_calibration+0x1b4>)
 800a1c8:	ed9f 8a4a 	vldr	s16, [pc, #296]	; 800a2f4 <acc_cpd_dll_calibration+0x1c4>
 800a1cc:	f003 f972 	bl	800d4b4 <acc_diagnostic_log_set_parameter>
 800a1d0:	ab20      	add	r3, sp, #128	; 0x80
 800a1d2:	464c      	mov	r4, r9
 800a1d4:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800a1d6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800a1d8:	ee1c ba10 	vmov	fp, s24
 800a1dc:	ee1b 9a90 	vmov	r9, s23
 800a1e0:	2500      	movs	r5, #0
 800a1e2:	4698      	mov	r8, r3
 800a1e4:	e023      	b.n	800a22e <acc_cpd_dll_calibration+0xfe>
 800a1e6:	f837 3b32 	ldrh.w	r3, [r7], #50
 800a1ea:	ee07 3a10 	vmov	s14, r3
 800a1ee:	4b42      	ldr	r3, [pc, #264]	; (800a2f8 <acc_cpd_dll_calibration+0x1c8>)
 800a1f0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800a1f4:	f833 2016 	ldrh.w	r2, [r3, r6, lsl #1]
 800a1f8:	4b40      	ldr	r3, [pc, #256]	; (800a2fc <acc_cpd_dll_calibration+0x1cc>)
 800a1fa:	ee27 7a09 	vmul.f32	s14, s14, s18
 800a1fe:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 800a202:	ee37 7a66 	vsub.f32	s14, s14, s13
 800a206:	1ad3      	subs	r3, r2, r3
 800a208:	b21b      	sxth	r3, r3
 800a20a:	ee07 3a90 	vmov	s15, r3
 800a20e:	ee27 7a28 	vmul.f32	s14, s14, s17
 800a212:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a216:	ee27 7a08 	vmul.f32	s14, s14, s16
 800a21a:	2d0c      	cmp	r5, #12
 800a21c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a220:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a224:	ee17 3a90 	vmov	r3, s15
 800a228:	f828 3b02 	strh.w	r3, [r8], #2
 800a22c:	d035      	beq.n	800a29a <acc_cpd_dll_calibration+0x16a>
 800a22e:	4629      	mov	r1, r5
 800a230:	482f      	ldr	r0, [pc, #188]	; (800a2f0 <acc_cpd_dll_calibration+0x1c0>)
 800a232:	f003 f93f 	bl	800d4b4 <acc_diagnostic_log_set_parameter>
 800a236:	e9da 1200 	ldrd	r1, r2, [sl]
 800a23a:	e9da 3002 	ldrd	r3, r0, [sl, #8]
 800a23e:	9139      	str	r1, [sp, #228]	; 0xe4
 800a240:	e9cd 303b 	strd	r3, r0, [sp, #236]	; 0xec
 800a244:	f8da 1014 	ldr.w	r1, [sl, #20]
 800a248:	f8da 0018 	ldr.w	r0, [sl, #24]
 800a24c:	f8ba c010 	ldrh.w	ip, [sl, #16]
 800a250:	923a      	str	r2, [sp, #232]	; 0xe8
 800a252:	9140      	str	r1, [sp, #256]	; 0x100
 800a254:	9041      	str	r0, [sp, #260]	; 0x104
 800a256:	463b      	mov	r3, r7
 800a258:	aa39      	add	r2, sp, #228	; 0xe4
 800a25a:	4659      	mov	r1, fp
 800a25c:	4648      	mov	r0, r9
 800a25e:	e9cd 653e 	strd	r6, r5, [sp, #248]	; 0xf8
 800a262:	f8ad c0f4 	strh.w	ip, [sp, #244]	; 0xf4
 800a266:	f001 fe85 	bl	800bf74 <acc_cpd_rx_fine_dip_calibration>
 800a26a:	3501      	adds	r5, #1
 800a26c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800a270:	2800      	cmp	r0, #0
 800a272:	d1b8      	bne.n	800a1e6 <acc_cpd_dll_calibration+0xb6>
 800a274:	4604      	mov	r4, r0
 800a276:	4620      	mov	r0, r4
 800a278:	b047      	add	sp, #284	; 0x11c
 800a27a:	ecbd 8b0a 	vpop	{d8-d12}
 800a27e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a282:	f7fc fa15 	bl	80066b0 <acc_rss_integration_log_level>
 800a286:	2801      	cmp	r0, #1
 800a288:	f67f af76 	bls.w	800a178 <acc_cpd_dll_calibration+0x48>
 800a28c:	4b1c      	ldr	r3, [pc, #112]	; (800a300 <acc_cpd_dll_calibration+0x1d0>)
 800a28e:	4a1d      	ldr	r2, [pc, #116]	; (800a304 <acc_cpd_dll_calibration+0x1d4>)
 800a290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a292:	491d      	ldr	r1, [pc, #116]	; (800a308 <acc_cpd_dll_calibration+0x1d8>)
 800a294:	2002      	movs	r0, #2
 800a296:	4798      	blx	r3
 800a298:	e76e      	b.n	800a178 <acc_cpd_dll_calibration+0x48>
 800a29a:	491c      	ldr	r1, [pc, #112]	; (800a30c <acc_cpd_dll_calibration+0x1dc>)
 800a29c:	481c      	ldr	r0, [pc, #112]	; (800a310 <acc_cpd_dll_calibration+0x1e0>)
 800a29e:	f003 f911 	bl	800d4c4 <acc_diagnostic_log_array>
 800a2a2:	4629      	mov	r1, r5
 800a2a4:	a820      	add	r0, sp, #128	; 0x80
 800a2a6:	f003 f91d 	bl	800d4e4 <acc_diagnostic_log_data_u16>
 800a2aa:	aa1d      	add	r2, sp, #116	; 0x74
 800a2ac:	a920      	add	r1, sp, #128	; 0x80
 800a2ae:	4628      	mov	r0, r5
 800a2b0:	f000 fd66 	bl	800ad80 <acc_dll_dly_coarse_priority_sort>
 800a2b4:	4915      	ldr	r1, [pc, #84]	; (800a30c <acc_cpd_dll_calibration+0x1dc>)
 800a2b6:	4817      	ldr	r0, [pc, #92]	; (800a314 <acc_cpd_dll_calibration+0x1e4>)
 800a2b8:	f003 f904 	bl	800d4c4 <acc_diagnostic_log_array>
 800a2bc:	4629      	mov	r1, r5
 800a2be:	a81d      	add	r0, sp, #116	; 0x74
 800a2c0:	f003 f920 	bl	800d504 <acc_diagnostic_log_data_u8>
 800a2c4:	ab1d      	add	r3, sp, #116	; 0x74
 800a2c6:	930d      	str	r3, [sp, #52]	; 0x34
 800a2c8:	4653      	mov	r3, sl
 800a2ca:	4699      	mov	r9, r3
 800a2cc:	46a2      	mov	sl, r4
 800a2ce:	e075      	b.n	800a3bc <acc_cpd_dll_calibration+0x28c>
 800a2d0:	ff800000 	.word	0xff800000
 800a2d4:	08014534 	.word	0x08014534
 800a2d8:	37800000 	.word	0x37800000
 800a2dc:	3f99999a 	.word	0x3f99999a
 800a2e0:	08014350 	.word	0x08014350
 800a2e4:	08014544 	.word	0x08014544
 800a2e8:	08014550 	.word	0x08014550
 800a2ec:	0801455c 	.word	0x0801455c
 800a2f0:	08014568 	.word	0x08014568
 800a2f4:	447a0000 	.word	0x447a0000
 800a2f8:	080185dc 	.word	0x080185dc
 800a2fc:	080185d4 	.word	0x080185d4
 800a300:	20000640 	.word	0x20000640
 800a304:	08014508 	.word	0x08014508
 800a308:	080144f4 	.word	0x080144f4
 800a30c:	08014574 	.word	0x08014574
 800a310:	0801458c 	.word	0x0801458c
 800a314:	080145a0 	.word	0x080145a0
 800a318:	f5a2 7243 	sub.w	r2, r2, #780	; 0x30c
 800a31c:	f5b2 7fe6 	cmp.w	r2, #460	; 0x1cc
 800a320:	f200 82eb 	bhi.w	800a8fa <acc_cpd_dll_calibration+0x7ca>
 800a324:	f9bd 206e 	ldrsh.w	r2, [sp, #110]	; 0x6e
 800a328:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a32a:	1a9b      	subs	r3, r3, r2
 800a32c:	b21b      	sxth	r3, r3
 800a32e:	2b00      	cmp	r3, #0
 800a330:	bfb8      	it	lt
 800a332:	425b      	neglt	r3, r3
 800a334:	b21b      	sxth	r3, r3
 800a336:	2b64      	cmp	r3, #100	; 0x64
 800a338:	f300 82df 	bgt.w	800a8fa <acc_cpd_dll_calibration+0x7ca>
 800a33c:	ee18 3a10 	vmov	r3, s16
 800a340:	4293      	cmp	r3, r2
 800a342:	f2c0 82da 	blt.w	800a8fa <acc_cpd_dll_calibration+0x7ca>
 800a346:	49d4      	ldr	r1, [pc, #848]	; (800a698 <acc_cpd_dll_calibration+0x568>)
 800a348:	48d4      	ldr	r0, [pc, #848]	; (800a69c <acc_cpd_dll_calibration+0x56c>)
 800a34a:	f003 f8bb 	bl	800d4c4 <acc_diagnostic_log_array>
 800a34e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800a350:	4628      	mov	r0, r5
 800a352:	4621      	mov	r1, r4
 800a354:	f003 f8c6 	bl	800d4e4 <acc_diagnostic_log_data_u16>
 800a358:	4621      	mov	r1, r4
 800a35a:	4628      	mov	r0, r5
 800a35c:	f000 fc76 	bl	800ac4c <acc_dll_check_direct_leakage>
 800a360:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800a364:	4604      	mov	r4, r0
 800a366:	4658      	mov	r0, fp
 800a368:	f7fe f9a8 	bl	80086bc <acc_sensor_protocol_r2_stop>
 800a36c:	2c00      	cmp	r4, #0
 800a36e:	f040 840f 	bne.w	800ab90 <acc_cpd_dll_calibration+0xa60>
 800a372:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a374:	2b01      	cmp	r3, #1
 800a376:	f04f 0100 	mov.w	r1, #0
 800a37a:	f040 82e5 	bne.w	800a948 <acc_cpd_dll_calibration+0x818>
 800a37e:	f7fc f997 	bl	80066b0 <acc_rss_integration_log_level>
 800a382:	2803      	cmp	r0, #3
 800a384:	d908      	bls.n	800a398 <acc_cpd_dll_calibration+0x268>
 800a386:	4bc6      	ldr	r3, [pc, #792]	; (800a6a0 <acc_cpd_dll_calibration+0x570>)
 800a388:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a38a:	9200      	str	r2, [sp, #0]
 800a38c:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800a38e:	4ac5      	ldr	r2, [pc, #788]	; (800a6a4 <acc_cpd_dll_calibration+0x574>)
 800a390:	49c5      	ldr	r1, [pc, #788]	; (800a6a8 <acc_cpd_dll_calibration+0x578>)
 800a392:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a394:	2004      	movs	r0, #4
 800a396:	47a0      	blx	r4
 800a398:	f7fc f98a 	bl	80066b0 <acc_rss_integration_log_level>
 800a39c:	2803      	cmp	r0, #3
 800a39e:	d908      	bls.n	800a3b2 <acc_cpd_dll_calibration+0x282>
 800a3a0:	4bbf      	ldr	r3, [pc, #764]	; (800a6a0 <acc_cpd_dll_calibration+0x570>)
 800a3a2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a3a4:	9200      	str	r2, [sp, #0]
 800a3a6:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800a3a8:	4ac0      	ldr	r2, [pc, #768]	; (800a6ac <acc_cpd_dll_calibration+0x57c>)
 800a3aa:	49bf      	ldr	r1, [pc, #764]	; (800a6a8 <acc_cpd_dll_calibration+0x578>)
 800a3ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a3ae:	2004      	movs	r0, #4
 800a3b0:	47a0      	blx	r4
 800a3b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a3b4:	aa20      	add	r2, sp, #128	; 0x80
 800a3b6:	429a      	cmp	r2, r3
 800a3b8:	f000 8332 	beq.w	800aa20 <acc_cpd_dll_calibration+0x8f0>
 800a3bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a3be:	48bc      	ldr	r0, [pc, #752]	; (800a6b0 <acc_cpd_dll_calibration+0x580>)
 800a3c0:	f812 3b01 	ldrb.w	r3, [r2], #1
 800a3c4:	9311      	str	r3, [sp, #68]	; 0x44
 800a3c6:	461c      	mov	r4, r3
 800a3c8:	4619      	mov	r1, r3
 800a3ca:	920d      	str	r2, [sp, #52]	; 0x34
 800a3cc:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800a3d0:	f003 f870 	bl	800d4b4 <acc_diagnostic_log_set_parameter>
 800a3d4:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800a3d6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800a3da:	eb06 0544 	add.w	r5, r6, r4, lsl #1
 800a3de:	4629      	mov	r1, r5
 800a3e0:	ab2c      	add	r3, sp, #176	; 0xb0
 800a3e2:	aa39      	add	r2, sp, #228	; 0xe4
 800a3e4:	2019      	movs	r0, #25
 800a3e6:	f000 fd8f 	bl	800af08 <acc_dll_plateau_finder>
 800a3ea:	9016      	str	r0, [sp, #88]	; 0x58
 800a3ec:	2800      	cmp	r0, #0
 800a3ee:	d0d3      	beq.n	800a398 <acc_cpd_dll_calibration+0x268>
 800a3f0:	f836 3014 	ldrh.w	r3, [r6, r4, lsl #1]
 800a3f4:	49af      	ldr	r1, [pc, #700]	; (800a6b4 <acc_cpd_dll_calibration+0x584>)
 800a3f6:	eddf 6abc 	vldr	s13, [pc, #752]	; 800a6e8 <acc_cpd_dll_calibration+0x5b8>
 800a3fa:	ee07 3a10 	vmov	s14, r3
 800a3fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a400:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800a404:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800a408:	49ab      	ldr	r1, [pc, #684]	; (800a6b8 <acc_cpd_dll_calibration+0x588>)
 800a40a:	ee27 7a09 	vmul.f32	s14, s14, s18
 800a40e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800a412:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800a416:	1ad3      	subs	r3, r2, r3
 800a418:	ee37 7a46 	vsub.f32	s14, s14, s12
 800a41c:	b21b      	sxth	r3, r3
 800a41e:	ee07 3a90 	vmov	s15, r3
 800a422:	ee27 7a28 	vmul.f32	s14, s14, s17
 800a426:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a42a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a42e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a432:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a436:	ee17 3a90 	vmov	r3, s15
 800a43a:	b21a      	sxth	r2, r3
 800a43c:	f5a2 7343 	sub.w	r3, r2, #780	; 0x30c
 800a440:	b29b      	uxth	r3, r3
 800a442:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 800a446:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
 800a44a:	f200 82dd 	bhi.w	800aa08 <acc_cpd_dll_calibration+0x8d8>
 800a44e:	f8bd 40e4 	ldrh.w	r4, [sp, #228]	; 0xe4
 800a452:	4b9a      	ldr	r3, [pc, #616]	; (800a6bc <acc_cpd_dll_calibration+0x58c>)
 800a454:	a946      	add	r1, sp, #280	; 0x118
 800a456:	eb01 0144 	add.w	r1, r1, r4, lsl #1
 800a45a:	ee07 2a90 	vmov	s15, r2
 800a45e:	f831 6c68 	ldrh.w	r6, [r1, #-104]
 800a462:	9613      	str	r6, [sp, #76]	; 0x4c
 800a464:	4632      	mov	r2, r6
 800a466:	fba3 2302 	umull	r2, r3, r3, r2
 800a46a:	f3c3 0387 	ubfx	r3, r3, #2, #8
 800a46e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a472:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
 800a476:	ee07 3a90 	vmov	s15, r3
 800a47a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a47e:	ee67 7a89 	vmul.f32	s15, s15, s18
 800a482:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800a486:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800a48a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a48e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a492:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a496:	ee17 3a90 	vmov	r3, s15
 800a49a:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
 800a49e:	f7fc f907 	bl	80066b0 <acc_rss_integration_log_level>
 800a4a2:	2803      	cmp	r0, #3
 800a4a4:	d907      	bls.n	800a4b6 <acc_cpd_dll_calibration+0x386>
 800a4a6:	4a7e      	ldr	r2, [pc, #504]	; (800a6a0 <acc_cpd_dll_calibration+0x570>)
 800a4a8:	9600      	str	r6, [sp, #0]
 800a4aa:	4623      	mov	r3, r4
 800a4ac:	497e      	ldr	r1, [pc, #504]	; (800a6a8 <acc_cpd_dll_calibration+0x578>)
 800a4ae:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800a4b0:	4a83      	ldr	r2, [pc, #524]	; (800a6c0 <acc_cpd_dll_calibration+0x590>)
 800a4b2:	2004      	movs	r0, #4
 800a4b4:	47a0      	blx	r4
 800a4b6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a4b8:	4882      	ldr	r0, [pc, #520]	; (800a6c4 <acc_cpd_dll_calibration+0x594>)
 800a4ba:	f002 fffb 	bl	800d4b4 <acc_diagnostic_log_set_parameter>
 800a4be:	4982      	ldr	r1, [pc, #520]	; (800a6c8 <acc_cpd_dll_calibration+0x598>)
 800a4c0:	4882      	ldr	r0, [pc, #520]	; (800a6cc <acc_cpd_dll_calibration+0x59c>)
 800a4c2:	f002 ffff 	bl	800d4c4 <acc_diagnostic_log_array>
 800a4c6:	2101      	movs	r1, #1
 800a4c8:	f10d 006a 	add.w	r0, sp, #106	; 0x6a
 800a4cc:	f003 f812 	bl	800d4f4 <acc_diagnostic_log_data_i16>
 800a4d0:	497d      	ldr	r1, [pc, #500]	; (800a6c8 <acc_cpd_dll_calibration+0x598>)
 800a4d2:	487f      	ldr	r0, [pc, #508]	; (800a6d0 <acc_cpd_dll_calibration+0x5a0>)
 800a4d4:	f002 fff6 	bl	800d4c4 <acc_diagnostic_log_array>
 800a4d8:	2101      	movs	r1, #1
 800a4da:	a81a      	add	r0, sp, #104	; 0x68
 800a4dc:	f003 f80a 	bl	800d4f4 <acc_diagnostic_log_data_i16>
 800a4e0:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
 800a4e4:	f2a3 431a 	subw	r3, r3, #1050	; 0x41a
 800a4e8:	b29b      	uxth	r3, r3
 800a4ea:	2bc8      	cmp	r3, #200	; 0xc8
 800a4ec:	f200 8330 	bhi.w	800ab50 <acc_cpd_dll_calibration+0xa20>
 800a4f0:	2302      	movs	r3, #2
 800a4f2:	9315      	str	r3, [sp, #84]	; 0x54
 800a4f4:	211b      	movs	r1, #27
 800a4f6:	b28b      	uxth	r3, r1
 800a4f8:	461c      	mov	r4, r3
 800a4fa:	4876      	ldr	r0, [pc, #472]	; (800a6d4 <acc_cpd_dll_calibration+0x5a4>)
 800a4fc:	9318      	str	r3, [sp, #96]	; 0x60
 800a4fe:	f002 ffd9 	bl	800d4b4 <acc_diagnostic_log_set_parameter>
 800a502:	4620      	mov	r0, r4
 800a504:	aa26      	add	r2, sp, #152	; 0x98
 800a506:	217c      	movs	r1, #124	; 0x7c
 800a508:	f7fe fd7a 	bl	8009000 <acc_dll_calculate_area_settings>
 800a50c:	f899 301c 	ldrb.w	r3, [r9, #28]
 800a510:	2b00      	cmp	r3, #0
 800a512:	f000 8274 	beq.w	800a9fe <acc_cpd_dll_calibration+0x8ce>
 800a516:	f899 301d 	ldrb.w	r3, [r9, #29]
 800a51a:	f083 0301 	eor.w	r3, r3, #1
 800a51e:	f8b9 2010 	ldrh.w	r2, [r9, #16]
 800a522:	f8d9 100c 	ldr.w	r1, [r9, #12]
 800a526:	f8bd b0ac 	ldrh.w	fp, [sp, #172]	; 0xac
 800a52a:	f8bd c098 	ldrh.w	ip, [sp, #152]	; 0x98
 800a52e:	f8bd 709a 	ldrh.w	r7, [sp, #154]	; 0x9a
 800a532:	f8bd 609e 	ldrh.w	r6, [sp, #158]	; 0x9e
 800a536:	f8bd 50a0 	ldrh.w	r5, [sp, #160]	; 0xa0
 800a53a:	e9d9 4001 	ldrd	r4, r0, [r9, #4]
 800a53e:	e9d9 8e05 	ldrd	r8, lr, [r9, #20]
 800a542:	f8aa 200c 	strh.w	r2, [sl, #12]
 800a546:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a548:	f8ca 2018 	str.w	r2, [sl, #24]
 800a54c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a54e:	f8ca 1008 	str.w	r1, [sl, #8]
 800a552:	f8ca 201c 	str.w	r2, [sl, #28]
 800a556:	f8bd 10aa 	ldrh.w	r1, [sp, #170]	; 0xaa
 800a55a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a55c:	f8ca 4000 	str.w	r4, [sl]
 800a560:	e9ca 8e04 	strd	r8, lr, [sl, #16]
 800a564:	f8bd 40a4 	ldrh.w	r4, [sp, #164]	; 0xa4
 800a568:	f8ca 0004 	str.w	r0, [sl, #4]
 800a56c:	f04f 0e01 	mov.w	lr, #1
 800a570:	f8bd 00a6 	ldrh.w	r0, [sp, #166]	; 0xa6
 800a574:	f8ca 2020 	str.w	r2, [sl, #32]
 800a578:	2200      	movs	r2, #0
 800a57a:	f8ca c028 	str.w	ip, [sl, #40]	; 0x28
 800a57e:	f8ca 702c 	str.w	r7, [sl, #44]	; 0x2c
 800a582:	f04f 0c06 	mov.w	ip, #6
 800a586:	2703      	movs	r7, #3
 800a588:	f8ca 6030 	str.w	r6, [sl, #48]	; 0x30
 800a58c:	f8ca 5034 	str.w	r5, [sl, #52]	; 0x34
 800a590:	f06f 0601 	mvn.w	r6, #1
 800a594:	f8ca 4038 	str.w	r4, [sl, #56]	; 0x38
 800a598:	f8ca 003c 	str.w	r0, [sl, #60]	; 0x3c
 800a59c:	240f      	movs	r4, #15
 800a59e:	e9ca 1b10 	strd	r1, fp, [sl, #64]	; 0x40
 800a5a2:	2007      	movs	r0, #7
 800a5a4:	e9ca 2e12 	strd	r2, lr, [sl, #72]	; 0x48
 800a5a8:	e9ca e216 	strd	lr, r2, [sl, #88]	; 0x58
 800a5ac:	e9ca 2214 	strd	r2, r2, [sl, #80]	; 0x50
 800a5b0:	e9ca 2218 	strd	r2, r2, [sl, #96]	; 0x60
 800a5b4:	e9ca 2227 	strd	r2, r2, [sl, #156]	; 0x9c
 800a5b8:	f8ca 2068 	str.w	r2, [sl, #104]	; 0x68
 800a5bc:	f8ca 2078 	str.w	r2, [sl, #120]	; 0x78
 800a5c0:	f8ca 2084 	str.w	r2, [sl, #132]	; 0x84
 800a5c4:	f8aa 208c 	strh.w	r2, [sl, #140]	; 0x8c
 800a5c8:	2516      	movs	r5, #22
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	e9ca c724 	strd	ip, r7, [sl, #144]	; 0x90
 800a5d0:	e9ca ee1c 	strd	lr, lr, [sl, #112]	; 0x70
 800a5d4:	e9ca 541f 	strd	r5, r4, [sl, #124]	; 0x7c
 800a5d8:	f8ca e0a4 	str.w	lr, [sl, #164]	; 0xa4
 800a5dc:	f8ca 20a8 	str.w	r2, [sl, #168]	; 0xa8
 800a5e0:	f88a e0ad 	strb.w	lr, [sl, #173]	; 0xad
 800a5e4:	f8ca 306c 	str.w	r3, [sl, #108]	; 0x6c
 800a5e8:	f8ca 6098 	str.w	r6, [sl, #152]	; 0x98
 800a5ec:	f8ca 0088 	str.w	r0, [sl, #136]	; 0x88
 800a5f0:	f7fb ffae 	bl	8006550 <acc_rss_integration_get_sensor_reference_frequency>
 800a5f4:	f8b9 301e 	ldrh.w	r3, [r9, #30]
 800a5f8:	f899 201c 	ldrb.w	r2, [r9, #28]
 800a5fc:	ed8a 0a2c 	vstr	s0, [sl, #176]	; 0xb0
 800a600:	3b01      	subs	r3, #1
 800a602:	e9ca 232d 	strd	r2, r3, [sl, #180]	; 0xb4
 800a606:	f9bd 3068 	ldrsh.w	r3, [sp, #104]	; 0x68
 800a60a:	930f      	str	r3, [sp, #60]	; 0x3c
 800a60c:	f04f 0100 	mov.w	r1, #0
 800a610:	f9bd 306a 	ldrsh.w	r3, [sp, #106]	; 0x6a
 800a614:	f88a 10ac 	strb.w	r1, [sl, #172]	; 0xac
 800a618:	9314      	str	r3, [sp, #80]	; 0x50
 800a61a:	a926      	add	r1, sp, #152	; 0x98
 800a61c:	f89a 308c 	ldrb.w	r3, [sl, #140]	; 0x8c
 800a620:	9308      	str	r3, [sp, #32]
 800a622:	4650      	mov	r0, sl
 800a624:	f8d9 b000 	ldr.w	fp, [r9]
 800a628:	f8da 4094 	ldr.w	r4, [sl, #148]	; 0x94
 800a62c:	f8da 60a4 	ldr.w	r6, [sl, #164]	; 0xa4
 800a630:	f8da 7080 	ldr.w	r7, [sl, #128]	; 0x80
 800a634:	f001 fc38 	bl	800bea8 <acc_cpd_linear_sweep_get_info>
 800a638:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800a63a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800a63c:	429a      	cmp	r2, r3
 800a63e:	f000 81fb 	beq.w	800aa38 <acc_cpd_dll_calibration+0x908>
 800a642:	f899 301c 	ldrb.w	r3, [r9, #28]
 800a646:	2b00      	cmp	r3, #0
 800a648:	f000 81db 	beq.w	800aa02 <acc_cpd_dll_calibration+0x8d2>
 800a64c:	f8b9 301e 	ldrh.w	r3, [r9, #30]
 800a650:	ee0c 3a90 	vmov	s25, r3
 800a654:	ee1c 2a10 	vmov	r2, s24
 800a658:	ee1b 1a90 	vmov	r1, s23
 800a65c:	4653      	mov	r3, sl
 800a65e:	4658      	mov	r0, fp
 800a660:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800a662:	f000 fe93 	bl	800b38c <acc_cpd_linear_sweep_load_program>
 800a666:	2800      	cmp	r0, #0
 800a668:	f000 81b9 	beq.w	800a9de <acc_cpd_dll_calibration+0x8ae>
 800a66c:	f899 301c 	ldrb.w	r3, [r9, #28]
 800a670:	930a      	str	r3, [sp, #40]	; 0x28
 800a672:	b113      	cbz	r3, 800a67a <acc_cpd_dll_calibration+0x54a>
 800a674:	f899 301d 	ldrb.w	r3, [r9, #29]
 800a678:	930a      	str	r3, [sp, #40]	; 0x28
 800a67a:	ee07 6a90 	vmov	s15, r6
 800a67e:	eddf 6a16 	vldr	s13, [pc, #88]	; 800a6d8 <acc_cpd_dll_calibration+0x5a8>
 800a682:	ed9f ba16 	vldr	s22, [pc, #88]	; 800a6dc <acc_cpd_dll_calibration+0x5ac>
 800a686:	eddf aa16 	vldr	s21, [pc, #88]	; 800a6e0 <acc_cpd_dll_calibration+0x5b0>
 800a68a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a68e:	3401      	adds	r4, #1
 800a690:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a694:	b2a4      	uxth	r4, r4
 800a696:	e029      	b.n	800a6ec <acc_cpd_dll_calibration+0x5bc>
 800a698:	0801489c 	.word	0x0801489c
 800a69c:	080148cc 	.word	0x080148cc
 800a6a0:	20000640 	.word	0x20000640
 800a6a4:	080147fc 	.word	0x080147fc
 800a6a8:	080144f4 	.word	0x080144f4
 800a6ac:	08014860 	.word	0x08014860
 800a6b0:	08014568 	.word	0x08014568
 800a6b4:	080185dc 	.word	0x080185dc
 800a6b8:	080185d4 	.word	0x080185d4
 800a6bc:	cccccccd 	.word	0xcccccccd
 800a6c0:	080145e0 	.word	0x080145e0
 800a6c4:	0801455c 	.word	0x0801455c
 800a6c8:	080145f8 	.word	0x080145f8
 800a6cc:	0801461c 	.word	0x0801461c
 800a6d0:	08014624 	.word	0x08014624
 800a6d4:	08014550 	.word	0x08014550
 800a6d8:	42f80000 	.word	0x42f80000
 800a6dc:	42640000 	.word	0x42640000
 800a6e0:	42172c98 	.word	0x42172c98
 800a6e4:	402ca8ad 	.word	0x402ca8ad
 800a6e8:	447a0000 	.word	0x447a0000
 800a6ec:	ee1c 2a90 	vmov	r2, s25
 800a6f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6f4:	ee17 3a90 	vmov	r3, s15
 800a6f8:	b29b      	uxth	r3, r3
 800a6fa:	fb04 f303 	mul.w	r3, r4, r3
 800a6fe:	441d      	add	r5, r3
 800a700:	18aa      	adds	r2, r5, r2
 800a702:	9317      	str	r3, [sp, #92]	; 0x5c
 800a704:	920b      	str	r2, [sp, #44]	; 0x2c
 800a706:	ea4f 0843 	mov.w	r8, r3, lsl #1
 800a70a:	4658      	mov	r0, fp
 800a70c:	f001 fb76 	bl	800bdfc <acc_cpd_linear_sweep_run_program>
 800a710:	2800      	cmp	r0, #0
 800a712:	f000 8164 	beq.w	800a9de <acc_cpd_dll_calibration+0x8ae>
 800a716:	ed1f aa0d 	vldr	s20, [pc, #-52]	; 800a6e4 <acc_cpd_dll_calibration+0x5b4>
 800a71a:	ed5f 9a0d 	vldr	s19, [pc, #-52]	; 800a6e8 <acc_cpd_dll_calibration+0x5b8>
 800a71e:	2600      	movs	r6, #0
 800a720:	ab1c      	add	r3, sp, #112	; 0x70
 800a722:	2264      	movs	r2, #100	; 0x64
 800a724:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800a728:	4658      	mov	r0, fp
 800a72a:	f7fd ff2f 	bl	800858c <acc_sensor_protocol_r2_wait_for_event>
 800a72e:	2800      	cmp	r0, #0
 800a730:	f000 8155 	beq.w	800a9de <acc_cpd_dll_calibration+0x8ae>
 800a734:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
 800a738:	2b06      	cmp	r3, #6
 800a73a:	f040 8150 	bne.w	800a9de <acc_cpd_dll_calibration+0x8ae>
 800a73e:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 800a742:	ee1c 0a10 	vmov	r0, s24
 800a746:	f7fd faeb 	bl	8007d20 <acc_sensor_r2_buffer_processed_verify_size>
 800a74a:	2800      	cmp	r0, #0
 800a74c:	f000 813d 	beq.w	800a9ca <acc_cpd_dll_calibration+0x89a>
 800a750:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a752:	ee1b 1a90 	vmov	r1, s23
 800a756:	4658      	mov	r0, fp
 800a758:	f7fe f862 	bl	8008820 <acc_sensor_protocol_r2_transfer_data>
 800a75c:	4604      	mov	r4, r0
 800a75e:	2800      	cmp	r0, #0
 800a760:	f000 813d 	beq.w	800a9de <acc_cpd_dll_calibration+0x8ae>
 800a764:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800a766:	f899 301c 	ldrb.w	r3, [r9, #28]
 800a76a:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 800a76e:	b1fb      	cbz	r3, 800a7b0 <acc_cpd_dll_calibration+0x680>
 800a770:	ee1c 3a90 	vmov	r3, s25
 800a774:	eb05 0208 	add.w	r2, r5, r8
 800a778:	4659      	mov	r1, fp
 800a77a:	2001      	movs	r0, #1
 800a77c:	920c      	str	r2, [sp, #48]	; 0x30
 800a77e:	f7fe faa3 	bl	8008cc8 <acc_probes_execute_uint16>
 800a782:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a784:	ee1c 1a90 	vmov	r1, s25
 800a788:	4610      	mov	r0, r2
 800a78a:	f7fe f987 	bl	8008a9c <acc_alg_cca_u16_calculate>
 800a78e:	eeb4 0acb 	vcmpe.f32	s0, s22
 800a792:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a798:	bfcc      	ite	gt
 800a79a:	2301      	movgt	r3, #1
 800a79c:	2300      	movle	r3, #0
 800a79e:	ed82 0a07 	vstr	s0, [r2, #28]
 800a7a2:	7653      	strb	r3, [r2, #25]
 800a7a4:	f300 8237 	bgt.w	800ac16 <acc_cpd_dll_calibration+0xae6>
 800a7a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	f040 80f1 	bne.w	800a992 <acc_cpd_dll_calibration+0x862>
 800a7b0:	eeb0 0a6a 	vmov.f32	s0, s21
 800a7b4:	4641      	mov	r1, r8
 800a7b6:	4628      	mov	r0, r5
 800a7b8:	f002 f85c 	bl	800c874 <acc_alg_basic_saturation_check_u16>
 800a7bc:	2800      	cmp	r0, #0
 800a7be:	f040 80c6 	bne.w	800a94e <acc_cpd_dll_calibration+0x81e>
 800a7c2:	2f00      	cmp	r7, #0
 800a7c4:	f040 814b 	bne.w	800aa5e <acc_cpd_dll_calibration+0x92e>
 800a7c8:	9b08      	ldr	r3, [sp, #32]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	f040 81a8 	bne.w	800ab20 <acc_cpd_dll_calibration+0x9f0>
 800a7d0:	f7fb ff6e 	bl	80066b0 <acc_rss_integration_log_level>
 800a7d4:	2803      	cmp	r0, #3
 800a7d6:	d905      	bls.n	800a7e4 <acc_cpd_dll_calibration+0x6b4>
 800a7d8:	4bbf      	ldr	r3, [pc, #764]	; (800aad8 <acc_cpd_dll_calibration+0x9a8>)
 800a7da:	4ac0      	ldr	r2, [pc, #768]	; (800aadc <acc_cpd_dll_calibration+0x9ac>)
 800a7dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7de:	49c0      	ldr	r1, [pc, #768]	; (800aae0 <acc_cpd_dll_calibration+0x9b0>)
 800a7e0:	2004      	movs	r0, #4
 800a7e2:	4798      	blx	r3
 800a7e4:	eeb0 0a4a 	vmov.f32	s0, s20
 800a7e8:	4641      	mov	r1, r8
 800a7ea:	4628      	mov	r0, r5
 800a7ec:	f002 f842 	bl	800c874 <acc_alg_basic_saturation_check_u16>
 800a7f0:	2800      	cmp	r0, #0
 800a7f2:	f040 81a2 	bne.w	800ab3a <acc_cpd_dll_calibration+0xa0a>
 800a7f6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800a7f8:	f8da 2020 	ldr.w	r2, [sl, #32]
 800a7fc:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 800a800:	49b8      	ldr	r1, [pc, #736]	; (800aae4 <acc_cpd_dll_calibration+0x9b4>)
 800a802:	9829      	ldr	r0, [sp, #164]	; 0xa4
 800a804:	ee06 3a90 	vmov	s13, r3
 800a808:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a80a:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 800a80e:	615f      	str	r7, [r3, #20]
 800a810:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800a814:	f831 3012 	ldrh.w	r3, [r1, r2, lsl #1]
 800a818:	49b3      	ldr	r1, [pc, #716]	; (800aae8 <acc_cpd_dll_calibration+0x9b8>)
 800a81a:	ee66 6a89 	vmul.f32	s13, s13, s18
 800a81e:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 800a822:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800a826:	ee76 6ae5 	vsub.f32	s13, s13, s11
 800a82a:	1a5b      	subs	r3, r3, r1
 800a82c:	b21b      	sxth	r3, r3
 800a82e:	ee07 0a90 	vmov	s15, r0
 800a832:	ee08 3a10 	vmov	s16, r3
 800a836:	e9dd 0208 	ldrd	r0, r2, [sp, #32]
 800a83a:	ee66 6aa8 	vmul.f32	s13, s13, s17
 800a83e:	eeb8 6ac8 	vcvt.f32.s32	s12, s16
 800a842:	ee66 6aa9 	vmul.f32	s13, s13, s19
 800a846:	7610      	strb	r0, [r2, #24]
 800a848:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800a84a:	49a8      	ldr	r1, [pc, #672]	; (800aaec <acc_cpd_dll_calibration+0x9bc>)
 800a84c:	f834 3012 	ldrh.w	r3, [r4, r2, lsl #1]
 800a850:	48a7      	ldr	r0, [pc, #668]	; (800aaf0 <acc_cpd_dll_calibration+0x9c0>)
 800a852:	ee76 6a66 	vsub.f32	s13, s12, s13
 800a856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a85a:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 800a85e:	ee07 3a10 	vmov	s14, r3
 800a862:	ee67 7a89 	vmul.f32	s15, s15, s18
 800a866:	ee16 3a90 	vmov	r3, s13
 800a86a:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800a86e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800a872:	b21b      	sxth	r3, r3
 800a874:	ee06 3a90 	vmov	s13, r3
 800a878:	ee27 7a09 	vmul.f32	s14, s14, s18
 800a87c:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800a880:	ee37 7a65 	vsub.f32	s14, s14, s11
 800a884:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800a888:	ee67 7aa9 	vmul.f32	s15, s15, s19
 800a88c:	ee27 7a28 	vmul.f32	s14, s14, s17
 800a890:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a894:	ee27 7a29 	vmul.f32	s14, s14, s19
 800a898:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a89c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800a8a0:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
 800a8a4:	ee17 3a90 	vmov	r3, s15
 800a8a8:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
 800a8ac:	ee17 3a10 	vmov	r3, s14
 800a8b0:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
 800a8b4:	f002 fe06 	bl	800d4c4 <acc_diagnostic_log_array>
 800a8b8:	2101      	movs	r1, #1
 800a8ba:	a81b      	add	r0, sp, #108	; 0x6c
 800a8bc:	f002 fe1a 	bl	800d4f4 <acc_diagnostic_log_data_i16>
 800a8c0:	498a      	ldr	r1, [pc, #552]	; (800aaec <acc_cpd_dll_calibration+0x9bc>)
 800a8c2:	488b      	ldr	r0, [pc, #556]	; (800aaf0 <acc_cpd_dll_calibration+0x9c0>)
 800a8c4:	f002 fdfe 	bl	800d4c4 <acc_diagnostic_log_array>
 800a8c8:	2101      	movs	r1, #1
 800a8ca:	f10d 006e 	add.w	r0, sp, #110	; 0x6e
 800a8ce:	f002 fe11 	bl	800d4f4 <acc_diagnostic_log_data_i16>
 800a8d2:	4986      	ldr	r1, [pc, #536]	; (800aaec <acc_cpd_dll_calibration+0x9bc>)
 800a8d4:	4887      	ldr	r0, [pc, #540]	; (800aaf4 <acc_cpd_dll_calibration+0x9c4>)
 800a8d6:	f002 fdf5 	bl	800d4c4 <acc_diagnostic_log_array>
 800a8da:	2101      	movs	r1, #1
 800a8dc:	a81c      	add	r0, sp, #112	; 0x70
 800a8de:	f002 fe09 	bl	800d4f4 <acc_diagnostic_log_data_i16>
 800a8e2:	f8bd 206c 	ldrh.w	r2, [sp, #108]	; 0x6c
 800a8e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a8e8:	1a9b      	subs	r3, r3, r2
 800a8ea:	b21b      	sxth	r3, r3
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	bfb8      	it	lt
 800a8f0:	425b      	neglt	r3, r3
 800a8f2:	b21b      	sxth	r3, r3
 800a8f4:	2b64      	cmp	r3, #100	; 0x64
 800a8f6:	f77f ad0f 	ble.w	800a318 <acc_cpd_dll_calibration+0x1e8>
 800a8fa:	2e02      	cmp	r6, #2
 800a8fc:	d00f      	beq.n	800a91e <acc_cpd_dll_calibration+0x7ee>
 800a8fe:	f7fb fed7 	bl	80066b0 <acc_rss_integration_log_level>
 800a902:	2803      	cmp	r0, #3
 800a904:	d906      	bls.n	800a914 <acc_cpd_dll_calibration+0x7e4>
 800a906:	4b74      	ldr	r3, [pc, #464]	; (800aad8 <acc_cpd_dll_calibration+0x9a8>)
 800a908:	4a7b      	ldr	r2, [pc, #492]	; (800aaf8 <acc_cpd_dll_calibration+0x9c8>)
 800a90a:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800a90c:	4974      	ldr	r1, [pc, #464]	; (800aae0 <acc_cpd_dll_calibration+0x9b0>)
 800a90e:	4633      	mov	r3, r6
 800a910:	2004      	movs	r0, #4
 800a912:	47a0      	blx	r4
 800a914:	4658      	mov	r0, fp
 800a916:	3601      	adds	r6, #1
 800a918:	f7fd fdaa 	bl	8008470 <acc_sensor_protocol_r2_ack_event>
 800a91c:	e700      	b.n	800a720 <acc_cpd_dll_calibration+0x5f0>
 800a91e:	f7fb fec7 	bl	80066b0 <acc_rss_integration_log_level>
 800a922:	2803      	cmp	r0, #3
 800a924:	d92f      	bls.n	800a986 <acc_cpd_dll_calibration+0x856>
 800a926:	4b6c      	ldr	r3, [pc, #432]	; (800aad8 <acc_cpd_dll_calibration+0x9a8>)
 800a928:	4a74      	ldr	r2, [pc, #464]	; (800aafc <acc_cpd_dll_calibration+0x9cc>)
 800a92a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a92c:	496c      	ldr	r1, [pc, #432]	; (800aae0 <acc_cpd_dll_calibration+0x9b0>)
 800a92e:	2004      	movs	r0, #4
 800a930:	4798      	blx	r3
 800a932:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800a936:	4658      	mov	r0, fp
 800a938:	f7fd fec0 	bl	80086bc <acc_sensor_protocol_r2_stop>
 800a93c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a93e:	2b01      	cmp	r3, #1
 800a940:	f04f 0100 	mov.w	r1, #0
 800a944:	f43f ad1b 	beq.w	800a37e <acc_cpd_dll_calibration+0x24e>
 800a948:	2301      	movs	r3, #1
 800a94a:	9315      	str	r3, [sp, #84]	; 0x54
 800a94c:	e5d3      	b.n	800a4f6 <acc_cpd_dll_calibration+0x3c6>
 800a94e:	eeb0 0a4a 	vmov.f32	s0, s20
 800a952:	4641      	mov	r1, r8
 800a954:	4628      	mov	r0, r5
 800a956:	f001 ff8d 	bl	800c874 <acc_alg_basic_saturation_check_u16>
 800a95a:	2800      	cmp	r0, #0
 800a95c:	f43f af4b 	beq.w	800a7f6 <acc_cpd_dll_calibration+0x6c6>
 800a960:	2f0f      	cmp	r7, #15
 800a962:	f040 80ea 	bne.w	800ab3a <acc_cpd_dll_calibration+0xa0a>
 800a966:	9b08      	ldr	r3, [sp, #32]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	f000 80fd 	beq.w	800ab68 <acc_cpd_dll_calibration+0xa38>
 800a96e:	f7fb fe9f 	bl	80066b0 <acc_rss_integration_log_level>
 800a972:	2803      	cmp	r0, #3
 800a974:	f67f af3f 	bls.w	800a7f6 <acc_cpd_dll_calibration+0x6c6>
 800a978:	4b57      	ldr	r3, [pc, #348]	; (800aad8 <acc_cpd_dll_calibration+0x9a8>)
 800a97a:	4a61      	ldr	r2, [pc, #388]	; (800ab00 <acc_cpd_dll_calibration+0x9d0>)
 800a97c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a97e:	4958      	ldr	r1, [pc, #352]	; (800aae0 <acc_cpd_dll_calibration+0x9b0>)
 800a980:	2004      	movs	r0, #4
 800a982:	4798      	blx	r3
 800a984:	e737      	b.n	800a7f6 <acc_cpd_dll_calibration+0x6c6>
 800a986:	4658      	mov	r0, fp
 800a988:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800a98c:	f7fd fe96 	bl	80086bc <acc_sensor_protocol_r2_stop>
 800a990:	e4ef      	b.n	800a372 <acc_cpd_dll_calibration+0x242>
 800a992:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800a996:	4658      	mov	r0, fp
 800a998:	f7fd fe90 	bl	80086bc <acc_sensor_protocol_r2_stop>
 800a99c:	4658      	mov	r0, fp
 800a99e:	f7fd fd55 	bl	800844c <acc_sensor_protocol_r2_is_sensor_running>
 800a9a2:	900a      	str	r0, [sp, #40]	; 0x28
 800a9a4:	bb10      	cbnz	r0, 800a9ec <acc_cpd_dll_calibration+0x8bc>
 800a9a6:	f002 fdc5 	bl	800d534 <acc_image_a111_r2c_sweep_get>
 800a9aa:	900c      	str	r0, [sp, #48]	; 0x30
 800a9ac:	f002 fdc6 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800a9b0:	4a54      	ldr	r2, [pc, #336]	; (800ab04 <acc_cpd_dll_calibration+0x9d4>)
 800a9b2:	9202      	str	r2, [sp, #8]
 800a9b4:	2401      	movs	r4, #1
 800a9b6:	2272      	movs	r2, #114	; 0x72
 800a9b8:	e9cd 2400 	strd	r2, r4, [sp]
 800a9bc:	4603      	mov	r3, r0
 800a9be:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a9c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a9c2:	4658      	mov	r0, fp
 800a9c4:	f002 fcde 	bl	800d384 <acc_confprogram_live_patch>
 800a9c8:	e69f      	b.n	800a70a <acc_cpd_dll_calibration+0x5da>
 800a9ca:	4b43      	ldr	r3, [pc, #268]	; (800aad8 <acc_cpd_dll_calibration+0x9a8>)
 800a9cc:	4944      	ldr	r1, [pc, #272]	; (800aae0 <acc_cpd_dll_calibration+0x9b0>)
 800a9ce:	4a4e      	ldr	r2, [pc, #312]	; (800ab08 <acc_cpd_dll_calibration+0x9d8>)
 800a9d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9d2:	4798      	blx	r3
 800a9d4:	4658      	mov	r0, fp
 800a9d6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800a9da:	f7fd fe6f 	bl	80086bc <acc_sensor_protocol_r2_stop>
 800a9de:	2400      	movs	r4, #0
 800a9e0:	4620      	mov	r0, r4
 800a9e2:	b047      	add	sp, #284	; 0x11c
 800a9e4:	ecbd 8b0a 	vpop	{d8-d12}
 800a9e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9ec:	4b3a      	ldr	r3, [pc, #232]	; (800aad8 <acc_cpd_dll_calibration+0x9a8>)
 800a9ee:	4a47      	ldr	r2, [pc, #284]	; (800ab0c <acc_cpd_dll_calibration+0x9dc>)
 800a9f0:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800a9f2:	493b      	ldr	r1, [pc, #236]	; (800aae0 <acc_cpd_dll_calibration+0x9b0>)
 800a9f4:	46d9      	mov	r9, fp
 800a9f6:	464b      	mov	r3, r9
 800a9f8:	2000      	movs	r0, #0
 800a9fa:	47a0      	blx	r4
 800a9fc:	e7ef      	b.n	800a9de <acc_cpd_dll_calibration+0x8ae>
 800a9fe:	2301      	movs	r3, #1
 800aa00:	e58d      	b.n	800a51e <acc_cpd_dll_calibration+0x3ee>
 800aa02:	ee0c 3a90 	vmov	s25, r3
 800aa06:	e625      	b.n	800a654 <acc_cpd_dll_calibration+0x524>
 800aa08:	f7fb fe52 	bl	80066b0 <acc_rss_integration_log_level>
 800aa0c:	2803      	cmp	r0, #3
 800aa0e:	f67f acc3 	bls.w	800a398 <acc_cpd_dll_calibration+0x268>
 800aa12:	4b31      	ldr	r3, [pc, #196]	; (800aad8 <acc_cpd_dll_calibration+0x9a8>)
 800aa14:	4a3e      	ldr	r2, [pc, #248]	; (800ab10 <acc_cpd_dll_calibration+0x9e0>)
 800aa16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa18:	4931      	ldr	r1, [pc, #196]	; (800aae0 <acc_cpd_dll_calibration+0x9b0>)
 800aa1a:	2004      	movs	r0, #4
 800aa1c:	4798      	blx	r3
 800aa1e:	e4bb      	b.n	800a398 <acc_cpd_dll_calibration+0x268>
 800aa20:	464b      	mov	r3, r9
 800aa22:	46d1      	mov	r9, sl
 800aa24:	469a      	mov	sl, r3
 800aa26:	2301      	movs	r3, #1
 800aa28:	930e      	str	r3, [sp, #56]	; 0x38
 800aa2a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800aa2c:	2b01      	cmp	r3, #1
 800aa2e:	d0d6      	beq.n	800a9de <acc_cpd_dll_calibration+0x8ae>
 800aa30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aa32:	9319      	str	r3, [sp, #100]	; 0x64
 800aa34:	f7ff bbc6 	b.w	800a1c4 <acc_cpd_dll_calibration+0x94>
 800aa38:	4b27      	ldr	r3, [pc, #156]	; (800aad8 <acc_cpd_dll_calibration+0x9a8>)
 800aa3a:	4a36      	ldr	r2, [pc, #216]	; (800ab14 <acc_cpd_dll_calibration+0x9e4>)
 800aa3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa3e:	4928      	ldr	r1, [pc, #160]	; (800aae0 <acc_cpd_dll_calibration+0x9b0>)
 800aa40:	2000      	movs	r0, #0
 800aa42:	4798      	blx	r3
 800aa44:	e7cb      	b.n	800a9de <acc_cpd_dll_calibration+0x8ae>
 800aa46:	4b24      	ldr	r3, [pc, #144]	; (800aad8 <acc_cpd_dll_calibration+0x9a8>)
 800aa48:	4a33      	ldr	r2, [pc, #204]	; (800ab18 <acc_cpd_dll_calibration+0x9e8>)
 800aa4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa4c:	4924      	ldr	r1, [pc, #144]	; (800aae0 <acc_cpd_dll_calibration+0x9b0>)
 800aa4e:	4620      	mov	r0, r4
 800aa50:	4798      	blx	r3
 800aa52:	4620      	mov	r0, r4
 800aa54:	b047      	add	sp, #284	; 0x11c
 800aa56:	ecbd 8b0a 	vpop	{d8-d12}
 800aa5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa5e:	2f08      	cmp	r7, #8
 800aa60:	bf38      	it	cc
 800aa62:	2708      	movcc	r7, #8
 800aa64:	f7fb fe24 	bl	80066b0 <acc_rss_integration_log_level>
 800aa68:	2803      	cmp	r0, #3
 800aa6a:	f1a7 0708 	sub.w	r7, r7, #8
 800aa6e:	d906      	bls.n	800aa7e <acc_cpd_dll_calibration+0x94e>
 800aa70:	4b19      	ldr	r3, [pc, #100]	; (800aad8 <acc_cpd_dll_calibration+0x9a8>)
 800aa72:	4a2a      	ldr	r2, [pc, #168]	; (800ab1c <acc_cpd_dll_calibration+0x9ec>)
 800aa74:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800aa76:	491a      	ldr	r1, [pc, #104]	; (800aae0 <acc_cpd_dll_calibration+0x9b0>)
 800aa78:	463b      	mov	r3, r7
 800aa7a:	2004      	movs	r0, #4
 800aa7c:	47a0      	blx	r4
 800aa7e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800aa82:	4658      	mov	r0, fp
 800aa84:	f7fd fe1a 	bl	80086bc <acc_sensor_protocol_r2_stop>
 800aa88:	4658      	mov	r0, fp
 800aa8a:	f7fd fcdf 	bl	800844c <acc_sensor_protocol_r2_is_sensor_running>
 800aa8e:	4602      	mov	r2, r0
 800aa90:	2800      	cmp	r0, #0
 800aa92:	d1ab      	bne.n	800a9ec <acc_cpd_dll_calibration+0x8bc>
 800aa94:	9210      	str	r2, [sp, #64]	; 0x40
 800aa96:	f002 fd4d 	bl	800d534 <acc_image_a111_r2c_sweep_get>
 800aa9a:	900c      	str	r0, [sp, #48]	; 0x30
 800aa9c:	f002 fd4e 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800aaa0:	4c18      	ldr	r4, [pc, #96]	; (800ab04 <acc_cpd_dll_calibration+0x9d4>)
 800aaa2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800aaa4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800aaa6:	2544      	movs	r5, #68	; 0x44
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	9500      	str	r5, [sp, #0]
 800aaac:	4658      	mov	r0, fp
 800aaae:	e9cd 7401 	strd	r7, r4, [sp, #4]
 800aab2:	f002 fc67 	bl	800d384 <acc_confprogram_live_patch>
 800aab6:	f002 fd3d 	bl	800d534 <acc_image_a111_r2c_sweep_get>
 800aaba:	900c      	str	r0, [sp, #48]	; 0x30
 800aabc:	f002 fd3e 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800aac0:	2542      	movs	r5, #66	; 0x42
 800aac2:	9a08      	ldr	r2, [sp, #32]
 800aac4:	9201      	str	r2, [sp, #4]
 800aac6:	4603      	mov	r3, r0
 800aac8:	990c      	ldr	r1, [sp, #48]	; 0x30
 800aaca:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800aacc:	9402      	str	r4, [sp, #8]
 800aace:	9500      	str	r5, [sp, #0]
 800aad0:	4658      	mov	r0, fp
 800aad2:	f002 fc57 	bl	800d384 <acc_confprogram_live_patch>
 800aad6:	e618      	b.n	800a70a <acc_cpd_dll_calibration+0x5da>
 800aad8:	20000640 	.word	0x20000640
 800aadc:	0801469c 	.word	0x0801469c
 800aae0:	080144f4 	.word	0x080144f4
 800aae4:	080185dc 	.word	0x080185dc
 800aae8:	080185d4 	.word	0x080185d4
 800aaec:	080145f8 	.word	0x080145f8
 800aaf0:	0801476c 	.word	0x0801476c
 800aaf4:	0801477c 	.word	0x0801477c
 800aaf8:	0801478c 	.word	0x0801478c
 800aafc:	080147b4 	.word	0x080147b4
 800ab00:	080146f0 	.word	0x080146f0
 800ab04:	08007c55 	.word	0x08007c55
 800ab08:	080143dc 	.word	0x080143dc
 800ab0c:	08014368 	.word	0x08014368
 800ab10:	080145b8 	.word	0x080145b8
 800ab14:	08014654 	.word	0x08014654
 800ab18:	080135e8 	.word	0x080135e8
 800ab1c:	080146bc 	.word	0x080146bc
 800ab20:	f7fb fdc6 	bl	80066b0 <acc_rss_integration_log_level>
 800ab24:	2803      	cmp	r0, #3
 800ab26:	d92d      	bls.n	800ab84 <acc_cpd_dll_calibration+0xa54>
 800ab28:	4b3e      	ldr	r3, [pc, #248]	; (800ac24 <acc_cpd_dll_calibration+0xaf4>)
 800ab2a:	4a3f      	ldr	r2, [pc, #252]	; (800ac28 <acc_cpd_dll_calibration+0xaf8>)
 800ab2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab2e:	493f      	ldr	r1, [pc, #252]	; (800ac2c <acc_cpd_dll_calibration+0xafc>)
 800ab30:	9708      	str	r7, [sp, #32]
 800ab32:	2004      	movs	r0, #4
 800ab34:	4798      	blx	r3
 800ab36:	270f      	movs	r7, #15
 800ab38:	e7a1      	b.n	800aa7e <acc_cpd_dll_calibration+0x94e>
 800ab3a:	3708      	adds	r7, #8
 800ab3c:	2f0f      	cmp	r7, #15
 800ab3e:	bf28      	it	cs
 800ab40:	270f      	movcs	r7, #15
 800ab42:	f7fb fdb5 	bl	80066b0 <acc_rss_integration_log_level>
 800ab46:	2803      	cmp	r0, #3
 800ab48:	d999      	bls.n	800aa7e <acc_cpd_dll_calibration+0x94e>
 800ab4a:	4b36      	ldr	r3, [pc, #216]	; (800ac24 <acc_cpd_dll_calibration+0xaf4>)
 800ab4c:	4a38      	ldr	r2, [pc, #224]	; (800ac30 <acc_cpd_dll_calibration+0xb00>)
 800ab4e:	e791      	b.n	800aa74 <acc_cpd_dll_calibration+0x944>
 800ab50:	f7fb fdae 	bl	80066b0 <acc_rss_integration_log_level>
 800ab54:	2803      	cmp	r0, #3
 800ab56:	f67f ac1f 	bls.w	800a398 <acc_cpd_dll_calibration+0x268>
 800ab5a:	4b32      	ldr	r3, [pc, #200]	; (800ac24 <acc_cpd_dll_calibration+0xaf4>)
 800ab5c:	4a35      	ldr	r2, [pc, #212]	; (800ac34 <acc_cpd_dll_calibration+0xb04>)
 800ab5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab60:	4932      	ldr	r1, [pc, #200]	; (800ac2c <acc_cpd_dll_calibration+0xafc>)
 800ab62:	2004      	movs	r0, #4
 800ab64:	4798      	blx	r3
 800ab66:	e417      	b.n	800a398 <acc_cpd_dll_calibration+0x268>
 800ab68:	9008      	str	r0, [sp, #32]
 800ab6a:	f7fb fda1 	bl	80066b0 <acc_rss_integration_log_level>
 800ab6e:	2803      	cmp	r0, #3
 800ab70:	9b08      	ldr	r3, [sp, #32]
 800ab72:	d90a      	bls.n	800ab8a <acc_cpd_dll_calibration+0xa5a>
 800ab74:	492b      	ldr	r1, [pc, #172]	; (800ac24 <acc_cpd_dll_calibration+0xaf4>)
 800ab76:	4a30      	ldr	r2, [pc, #192]	; (800ac38 <acc_cpd_dll_calibration+0xb08>)
 800ab78:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 800ab7a:	492c      	ldr	r1, [pc, #176]	; (800ac2c <acc_cpd_dll_calibration+0xafc>)
 800ab7c:	2004      	movs	r0, #4
 800ab7e:	47a0      	blx	r4
 800ab80:	2700      	movs	r7, #0
 800ab82:	e77c      	b.n	800aa7e <acc_cpd_dll_calibration+0x94e>
 800ab84:	9708      	str	r7, [sp, #32]
 800ab86:	270f      	movs	r7, #15
 800ab88:	e779      	b.n	800aa7e <acc_cpd_dll_calibration+0x94e>
 800ab8a:	9308      	str	r3, [sp, #32]
 800ab8c:	2700      	movs	r7, #0
 800ab8e:	e776      	b.n	800aa7e <acc_cpd_dll_calibration+0x94e>
 800ab90:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ab92:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
 800ab96:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800ab98:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
 800ab9c:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800ab9e:	6008      	str	r0, [r1, #0]
 800aba0:	818d      	strh	r5, [r1, #12]
 800aba2:	81ca      	strh	r2, [r1, #14]
 800aba4:	820b      	strh	r3, [r1, #16]
 800aba6:	f7fb fd83 	bl	80066b0 <acc_rss_integration_log_level>
 800abaa:	2803      	cmp	r0, #3
 800abac:	d909      	bls.n	800abc2 <acc_cpd_dll_calibration+0xa92>
 800abae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abb0:	4a1c      	ldr	r2, [pc, #112]	; (800ac24 <acc_cpd_dll_calibration+0xaf4>)
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800abb6:	491d      	ldr	r1, [pc, #116]	; (800ac2c <acc_cpd_dll_calibration+0xafc>)
 800abb8:	9300      	str	r3, [sp, #0]
 800abba:	4a20      	ldr	r2, [pc, #128]	; (800ac3c <acc_cpd_dll_calibration+0xb0c>)
 800abbc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800abbe:	2004      	movs	r0, #4
 800abc0:	47a8      	blx	r5
 800abc2:	f7fb fd75 	bl	80066b0 <acc_rss_integration_log_level>
 800abc6:	2801      	cmp	r0, #1
 800abc8:	d91e      	bls.n	800ac08 <acc_cpd_dll_calibration+0xad8>
 800abca:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800abcc:	4a1c      	ldr	r2, [pc, #112]	; (800ac40 <acc_cpd_dll_calibration+0xb10>)
 800abce:	7e39      	ldrb	r1, [r7, #24]
 800abd0:	f8df c074 	ldr.w	ip, [pc, #116]	; 800ac48 <acc_cpd_dll_calibration+0xb18>
 800abd4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800abd6:	89b8      	ldrh	r0, [r7, #12]
 800abd8:	683e      	ldr	r6, [r7, #0]
 800abda:	9300      	str	r3, [sp, #0]
 800abdc:	2900      	cmp	r1, #0
 800abde:	bf14      	ite	ne
 800abe0:	4663      	movne	r3, ip
 800abe2:	4613      	moveq	r3, r2
 800abe4:	4d0f      	ldr	r5, [pc, #60]	; (800ac24 <acc_cpd_dll_calibration+0xaf4>)
 800abe6:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800abea:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800abee:	9306      	str	r3, [sp, #24]
 800abf0:	697b      	ldr	r3, [r7, #20]
 800abf2:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 800abf4:	9305      	str	r3, [sp, #20]
 800abf6:	e9cd 1203 	strd	r1, r2, [sp, #12]
 800abfa:	e9cd 6001 	strd	r6, r0, [sp, #4]
 800abfe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ac00:	4a10      	ldr	r2, [pc, #64]	; (800ac44 <acc_cpd_dll_calibration+0xb14>)
 800ac02:	490a      	ldr	r1, [pc, #40]	; (800ac2c <acc_cpd_dll_calibration+0xafc>)
 800ac04:	2002      	movs	r0, #2
 800ac06:	47a8      	blx	r5
 800ac08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac0a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ac0c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ac0e:	6059      	str	r1, [r3, #4]
 800ac10:	609a      	str	r2, [r3, #8]
 800ac12:	f7ff bb30 	b.w	800a276 <acc_cpd_dll_calibration+0x146>
 800ac16:	4658      	mov	r0, fp
 800ac18:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800ac1c:	f7fd fd4e 	bl	80086bc <acc_sensor_protocol_r2_stop>
 800ac20:	e6dd      	b.n	800a9de <acc_cpd_dll_calibration+0x8ae>
 800ac22:	bf00      	nop
 800ac24:	20000640 	.word	0x20000640
 800ac28:	08014674 	.word	0x08014674
 800ac2c:	080144f4 	.word	0x080144f4
 800ac30:	08014738 	.word	0x08014738
 800ac34:	0801462c 	.word	0x0801462c
 800ac38:	08014710 	.word	0x08014710
 800ac3c:	080147cc 	.word	0x080147cc
 800ac40:	080144ec 	.word	0x080144ec
 800ac44:	08014830 	.word	0x08014830
 800ac48:	080144e4 	.word	0x080144e4

0800ac4c <acc_dll_check_direct_leakage>:
 800ac4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac50:	4b44      	ldr	r3, [pc, #272]	; (800ad64 <acc_dll_check_direct_leakage+0x118>)
 800ac52:	460d      	mov	r5, r1
 800ac54:	fba3 3101 	umull	r3, r1, r3, r1
 800ac58:	ea4f 0991 	mov.w	r9, r1, lsr #2
 800ac5c:	f021 0403 	bic.w	r4, r1, #3
 800ac60:	b084      	sub	sp, #16
 800ac62:	464b      	mov	r3, r9
 800ac64:	eb04 0191 	add.w	r1, r4, r1, lsr #2
 800ac68:	4602      	mov	r2, r0
 800ac6a:	4682      	mov	sl, r0
 800ac6c:	f002 f9e2 	bl	800d034 <acc_alg_power_bins>
 800ac70:	2d04      	cmp	r5, #4
 800ac72:	d924      	bls.n	800acbe <acc_dll_check_direct_leakage+0x72>
 800ac74:	f1aa 0602 	sub.w	r6, sl, #2
 800ac78:	2300      	movs	r3, #0
 800ac7a:	4632      	mov	r2, r6
 800ac7c:	461c      	mov	r4, r3
 800ac7e:	f832 1f02 	ldrh.w	r1, [r2, #2]!
 800ac82:	3301      	adds	r3, #1
 800ac84:	428c      	cmp	r4, r1
 800ac86:	bf38      	it	cc
 800ac88:	460c      	movcc	r4, r1
 800ac8a:	4599      	cmp	r9, r3
 800ac8c:	d8f7      	bhi.n	800ac7e <acc_dll_check_direct_leakage+0x32>
 800ac8e:	4b36      	ldr	r3, [pc, #216]	; (800ad68 <acc_dll_check_direct_leakage+0x11c>)
 800ac90:	2d0e      	cmp	r5, #14
 800ac92:	fba3 3404 	umull	r3, r4, r3, r4
 800ac96:	f3c4 084f 	ubfx	r8, r4, #1, #16
 800ac9a:	d910      	bls.n	800acbe <acc_dll_check_direct_leakage+0x72>
 800ac9c:	2702      	movs	r7, #2
 800ac9e:	f836 5f02 	ldrh.w	r5, [r6, #2]!
 800aca2:	88b4      	ldrh	r4, [r6, #4]
 800aca4:	42a5      	cmp	r5, r4
 800aca6:	d902      	bls.n	800acae <acc_dll_check_direct_leakage+0x62>
 800aca8:	4623      	mov	r3, r4
 800acaa:	462c      	mov	r4, r5
 800acac:	461d      	mov	r5, r3
 800acae:	4544      	cmp	r4, r8
 800acb0:	d902      	bls.n	800acb8 <acc_dll_check_direct_leakage+0x6c>
 800acb2:	ebb4 0fc5 	cmp.w	r4, r5, lsl #3
 800acb6:	d834      	bhi.n	800ad22 <acc_dll_check_direct_leakage+0xd6>
 800acb8:	3701      	adds	r7, #1
 800acba:	45b9      	cmp	r9, r7
 800acbc:	d8ef      	bhi.n	800ac9e <acc_dll_check_direct_leakage+0x52>
 800acbe:	ea4f 0559 	mov.w	r5, r9, lsr #1
 800acc2:	f105 0308 	add.w	r3, r5, #8
 800acc6:	454b      	cmp	r3, r9
 800acc8:	d821      	bhi.n	800ad0e <acc_dll_check_direct_leakage+0xc2>
 800acca:	f1aa 0202 	sub.w	r2, sl, #2
 800acce:	f10a 000e 	add.w	r0, sl, #14
 800acd2:	2400      	movs	r4, #0
 800acd4:	f832 1f02 	ldrh.w	r1, [r2, #2]!
 800acd8:	4290      	cmp	r0, r2
 800acda:	440c      	add	r4, r1
 800acdc:	d1fa      	bne.n	800acd4 <acc_dll_check_direct_leakage+0x88>
 800acde:	1c6a      	adds	r2, r5, #1
 800ace0:	4293      	cmp	r3, r2
 800ace2:	bf34      	ite	cc
 800ace4:	2301      	movcc	r3, #1
 800ace6:	2308      	movcs	r3, #8
 800ace8:	442b      	add	r3, r5
 800acea:	eb0a 0343 	add.w	r3, sl, r3, lsl #1
 800acee:	eb0a 0a45 	add.w	sl, sl, r5, lsl #1
 800acf2:	2500      	movs	r5, #0
 800acf4:	f83a 2b02 	ldrh.w	r2, [sl], #2
 800acf8:	4553      	cmp	r3, sl
 800acfa:	4415      	add	r5, r2
 800acfc:	d1fa      	bne.n	800acf4 <acc_dll_check_direct_leakage+0xa8>
 800acfe:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800ad02:	42ab      	cmp	r3, r5
 800ad04:	d81f      	bhi.n	800ad46 <acc_dll_check_direct_leakage+0xfa>
 800ad06:	2001      	movs	r0, #1
 800ad08:	b004      	add	sp, #16
 800ad0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad0e:	4b17      	ldr	r3, [pc, #92]	; (800ad6c <acc_dll_check_direct_leakage+0x120>)
 800ad10:	4a17      	ldr	r2, [pc, #92]	; (800ad70 <acc_dll_check_direct_leakage+0x124>)
 800ad12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad14:	4917      	ldr	r1, [pc, #92]	; (800ad74 <acc_dll_check_direct_leakage+0x128>)
 800ad16:	2000      	movs	r0, #0
 800ad18:	4798      	blx	r3
 800ad1a:	2000      	movs	r0, #0
 800ad1c:	b004      	add	sp, #16
 800ad1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad22:	f7fb fcc5 	bl	80066b0 <acc_rss_integration_log_level>
 800ad26:	2803      	cmp	r0, #3
 800ad28:	d909      	bls.n	800ad3e <acc_dll_check_direct_leakage+0xf2>
 800ad2a:	e9cd 5801 	strd	r5, r8, [sp, #4]
 800ad2e:	4a0f      	ldr	r2, [pc, #60]	; (800ad6c <acc_dll_check_direct_leakage+0x120>)
 800ad30:	9400      	str	r4, [sp, #0]
 800ad32:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800ad34:	490f      	ldr	r1, [pc, #60]	; (800ad74 <acc_dll_check_direct_leakage+0x128>)
 800ad36:	4a10      	ldr	r2, [pc, #64]	; (800ad78 <acc_dll_check_direct_leakage+0x12c>)
 800ad38:	463b      	mov	r3, r7
 800ad3a:	2004      	movs	r0, #4
 800ad3c:	47a0      	blx	r4
 800ad3e:	2000      	movs	r0, #0
 800ad40:	b004      	add	sp, #16
 800ad42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad46:	f7fb fcb3 	bl	80066b0 <acc_rss_integration_log_level>
 800ad4a:	2803      	cmp	r0, #3
 800ad4c:	d9f7      	bls.n	800ad3e <acc_dll_check_direct_leakage+0xf2>
 800ad4e:	4a07      	ldr	r2, [pc, #28]	; (800ad6c <acc_dll_check_direct_leakage+0x120>)
 800ad50:	9500      	str	r5, [sp, #0]
 800ad52:	4623      	mov	r3, r4
 800ad54:	2004      	movs	r0, #4
 800ad56:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800ad58:	4906      	ldr	r1, [pc, #24]	; (800ad74 <acc_dll_check_direct_leakage+0x128>)
 800ad5a:	4a08      	ldr	r2, [pc, #32]	; (800ad7c <acc_dll_check_direct_leakage+0x130>)
 800ad5c:	47a0      	blx	r4
 800ad5e:	2000      	movs	r0, #0
 800ad60:	e7d2      	b.n	800ad08 <acc_dll_check_direct_leakage+0xbc>
 800ad62:	bf00      	nop
 800ad64:	cccccccd 	.word	0xcccccccd
 800ad68:	aaaaaaab 	.word	0xaaaaaaab
 800ad6c:	20000640 	.word	0x20000640
 800ad70:	08014958 	.word	0x08014958
 800ad74:	0801493c 	.word	0x0801493c
 800ad78:	080148e0 	.word	0x080148e0
 800ad7c:	08014968 	.word	0x08014968

0800ad80 <acc_dll_dly_coarse_priority_sort>:
 800ad80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad84:	b084      	sub	sp, #16
 800ad86:	2800      	cmp	r0, #0
 800ad88:	f000 80ad 	beq.w	800aee6 <acc_dll_dly_coarse_priority_sort+0x166>
 800ad8c:	280c      	cmp	r0, #12
 800ad8e:	f200 80a6 	bhi.w	800aede <acc_dll_dly_coarse_priority_sort+0x15e>
 800ad92:	2400      	movs	r4, #0
 800ad94:	ed9f 4a56 	vldr	s8, [pc, #344]	; 800aef0 <acc_dll_dly_coarse_priority_sort+0x170>
 800ad98:	eddf 4a56 	vldr	s9, [pc, #344]	; 800aef4 <acc_dll_dly_coarse_priority_sort+0x174>
 800ad9c:	ed9f 6a56 	vldr	s12, [pc, #344]	; 800aef8 <acc_dll_dly_coarse_priority_sort+0x178>
 800ada0:	ed9f 5a56 	vldr	s10, [pc, #344]	; 800aefc <acc_dll_dly_coarse_priority_sort+0x17c>
 800ada4:	eddf 5a56 	vldr	s11, [pc, #344]	; 800af00 <acc_dll_dly_coarse_priority_sort+0x180>
 800ada8:	4626      	mov	r6, r4
 800adaa:	f10d 0e04 	add.w	lr, sp, #4
 800adae:	f102 3cff 	add.w	ip, r2, #4294967295
 800adb2:	460d      	mov	r5, r1
 800adb4:	1e47      	subs	r7, r0, #1
 800adb6:	f240 5813 	movw	r8, #1299	; 0x513
 800adba:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 800adbe:	2c00      	cmp	r4, #0
 800adc0:	d067      	beq.n	800ae92 <acc_dll_dly_coarse_priority_sort+0x112>
 800adc2:	42bc      	cmp	r4, r7
 800adc4:	d016      	beq.n	800adf4 <acc_dll_dly_coarse_priority_sort+0x74>
 800adc6:	f935 ac02 	ldrsh.w	sl, [r5, #-2]
 800adca:	f9b5 3000 	ldrsh.w	r3, [r5]
 800adce:	459a      	cmp	sl, r3
 800add0:	dd18      	ble.n	800ae04 <acc_dll_dly_coarse_priority_sort+0x84>
 800add2:	f9b5 9002 	ldrsh.w	r9, [r5, #2]
 800add6:	454b      	cmp	r3, r9
 800add8:	dd14      	ble.n	800ae04 <acc_dll_dly_coarse_priority_sort+0x84>
 800adda:	45c2      	cmp	sl, r8
 800addc:	dc12      	bgt.n	800ae04 <acc_dll_dly_coarse_priority_sort+0x84>
 800adde:	4543      	cmp	r3, r8
 800ade0:	dc10      	bgt.n	800ae04 <acc_dll_dly_coarse_priority_sort+0x84>
 800ade2:	eba9 090a 	sub.w	r9, r9, sl
 800ade6:	ee07 9a90 	vmov	s15, r9
 800adea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800adee:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800adf2:	e05e      	b.n	800aeb2 <acc_dll_dly_coarse_priority_sort+0x132>
 800adf4:	f935 9c02 	ldrsh.w	r9, [r5, #-2]
 800adf8:	f9b5 3000 	ldrsh.w	r3, [r5]
 800adfc:	4599      	cmp	r9, r3
 800adfe:	dd01      	ble.n	800ae04 <acc_dll_dly_coarse_priority_sort+0x84>
 800ae00:	45c1      	cmp	r9, r8
 800ae02:	dd65      	ble.n	800aed0 <acc_dll_dly_coarse_priority_sort+0x150>
 800ae04:	eef0 6a46 	vmov.f32	s13, s12
 800ae08:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	bfb8      	it	lt
 800ae10:	425b      	neglt	r3, r3
 800ae12:	ee07 3a90 	vmov	s15, r3
 800ae16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ae1a:	3401      	adds	r4, #1
 800ae1c:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800ae20:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800ae24:	b2e6      	uxtb	r6, r4
 800ae26:	42b0      	cmp	r0, r6
 800ae28:	f105 0502 	add.w	r5, r5, #2
 800ae2c:	ee67 7a25 	vmul.f32	s15, s14, s11
 800ae30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae38:	ee17 3a90 	vmov	r3, s15
 800ae3c:	f80e 3b01 	strb.w	r3, [lr], #1
 800ae40:	d8bd      	bhi.n	800adbe <acc_dll_dly_coarse_priority_sort+0x3e>
 800ae42:	3802      	subs	r0, #2
 800ae44:	f102 0c01 	add.w	ip, r2, #1
 800ae48:	fa5f fe87 	uxtb.w	lr, r7
 800ae4c:	fa5c f780 	uxtab	r7, ip, r0
 800ae50:	eba7 0e0e 	sub.w	lr, r7, lr
 800ae54:	45be      	cmp	lr, r7
 800ae56:	d019      	beq.n	800ae8c <acc_dll_dly_coarse_priority_sort+0x10c>
 800ae58:	4613      	mov	r3, r2
 800ae5a:	2400      	movs	r4, #0
 800ae5c:	7819      	ldrb	r1, [r3, #0]
 800ae5e:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800ae62:	ad04      	add	r5, sp, #16
 800ae64:	186e      	adds	r6, r5, r1
 800ae66:	4405      	add	r5, r0
 800ae68:	f816 6c0c 	ldrb.w	r6, [r6, #-12]
 800ae6c:	f815 5c0c 	ldrb.w	r5, [r5, #-12]
 800ae70:	42ae      	cmp	r6, r5
 800ae72:	d904      	bls.n	800ae7e <acc_dll_dly_coarse_priority_sort+0xfe>
 800ae74:	3401      	adds	r4, #1
 800ae76:	b2e4      	uxtb	r4, r4
 800ae78:	f803 0c01 	strb.w	r0, [r3, #-1]
 800ae7c:	7019      	strb	r1, [r3, #0]
 800ae7e:	429f      	cmp	r7, r3
 800ae80:	d1ec      	bne.n	800ae5c <acc_dll_dly_coarse_priority_sort+0xdc>
 800ae82:	45bc      	cmp	ip, r7
 800ae84:	d002      	beq.n	800ae8c <acc_dll_dly_coarse_priority_sort+0x10c>
 800ae86:	3f01      	subs	r7, #1
 800ae88:	2c00      	cmp	r4, #0
 800ae8a:	d1e3      	bne.n	800ae54 <acc_dll_dly_coarse_priority_sort+0xd4>
 800ae8c:	b004      	add	sp, #16
 800ae8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae92:	f9b1 9000 	ldrsh.w	r9, [r1]
 800ae96:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800ae9a:	4599      	cmp	r9, r3
 800ae9c:	dd13      	ble.n	800aec6 <acc_dll_dly_coarse_priority_sort+0x146>
 800ae9e:	45c1      	cmp	r9, r8
 800aea0:	dc11      	bgt.n	800aec6 <acc_dll_dly_coarse_priority_sort+0x146>
 800aea2:	eba3 0309 	sub.w	r3, r3, r9
 800aea6:	ee07 3a90 	vmov	s15, r3
 800aeaa:	f9b5 3000 	ldrsh.w	r3, [r5]
 800aeae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aeb2:	eef4 7ac4 	vcmpe.f32	s15, s8
 800aeb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aeba:	bf54      	ite	pl
 800aebc:	eef0 6a46 	vmovpl.f32	s13, s12
 800aec0:	eef0 6a64 	vmovmi.f32	s13, s9
 800aec4:	e7a0      	b.n	800ae08 <acc_dll_dly_coarse_priority_sort+0x88>
 800aec6:	f9b5 3000 	ldrsh.w	r3, [r5]
 800aeca:	eef0 6a46 	vmov.f32	s13, s12
 800aece:	e79b      	b.n	800ae08 <acc_dll_dly_coarse_priority_sort+0x88>
 800aed0:	eba3 0909 	sub.w	r9, r3, r9
 800aed4:	ee07 9a90 	vmov	s15, r9
 800aed8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aedc:	e7e9      	b.n	800aeb2 <acc_dll_dly_coarse_priority_sort+0x132>
 800aede:	4809      	ldr	r0, [pc, #36]	; (800af04 <acc_dll_dly_coarse_priority_sort+0x184>)
 800aee0:	211f      	movs	r1, #31
 800aee2:	f7fd fe09 	bl	8008af8 <acc_assert_fail>
 800aee6:	4807      	ldr	r0, [pc, #28]	; (800af04 <acc_dll_dly_coarse_priority_sort+0x184>)
 800aee8:	211a      	movs	r1, #26
 800aeea:	f7fd fe05 	bl	8008af8 <acc_assert_fail>
 800aeee:	bf00      	nop
 800aef0:	c2c80000 	.word	0xc2c80000
 800aef4:	00000000 	.word	0x00000000
 800aef8:	42480000 	.word	0x42480000
 800aefc:	447a0000 	.word	0x447a0000
 800af00:	42c80000 	.word	0x42c80000
 800af04:	080149a8 	.word	0x080149a8

0800af08 <acc_dll_plateau_finder>:
 800af08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af0c:	b0af      	sub	sp, #188	; 0xbc
 800af0e:	2819      	cmp	r0, #25
 800af10:	9104      	str	r1, [sp, #16]
 800af12:	f200 8226 	bhi.w	800b362 <acc_dll_plateau_finder+0x45a>
 800af16:	2801      	cmp	r0, #1
 800af18:	4683      	mov	fp, r0
 800af1a:	4615      	mov	r5, r2
 800af1c:	469a      	mov	sl, r3
 800af1e:	f240 8217 	bls.w	800b350 <acc_dll_plateau_finder+0x448>
 800af22:	f1a0 0902 	sub.w	r9, r0, #2
 800af26:	2100      	movs	r1, #0
 800af28:	fa1f f989 	uxth.w	r9, r9
 800af2c:	2301      	movs	r3, #1
 800af2e:	ed9f 7ad2 	vldr	s14, [pc, #840]	; 800b278 <acc_dll_plateau_finder+0x370>
 800af32:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800af36:	9205      	str	r2, [sp, #20]
 800af38:	f109 0902 	add.w	r9, r9, #2
 800af3c:	460c      	mov	r4, r1
 800af3e:	460e      	mov	r6, r1
 800af40:	461d      	mov	r5, r3
 800af42:	e006      	b.n	800af52 <acc_dll_plateau_finder+0x4a>
 800af44:	f10b 32ff 	add.w	r2, fp, #4294967295
 800af48:	42aa      	cmp	r2, r5
 800af4a:	d019      	beq.n	800af80 <acc_dll_plateau_finder+0x78>
 800af4c:	3501      	adds	r5, #1
 800af4e:	45a9      	cmp	r9, r5
 800af50:	d04b      	beq.n	800afea <acc_dll_plateau_finder+0xe2>
 800af52:	f8b8 2000 	ldrh.w	r2, [r8]
 800af56:	f838 0f02 	ldrh.w	r0, [r8, #2]!
 800af5a:	ee07 2a90 	vmov	s15, r2
 800af5e:	4282      	cmp	r2, r0
 800af60:	bf34      	ite	cc
 800af62:	1a82      	subcc	r2, r0, r2
 800af64:	1a12      	subcs	r2, r2, r0
 800af66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800af6a:	b2af      	uxth	r7, r5
 800af6c:	b292      	uxth	r2, r2
 800af6e:	3401      	adds	r4, #1
 800af70:	4439      	add	r1, r7
 800af72:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 800af76:	ee37 7a27 	vadd.f32	s14, s14, s15
 800af7a:	b2a4      	uxth	r4, r4
 800af7c:	b289      	uxth	r1, r1
 800af7e:	d9e1      	bls.n	800af44 <acc_dll_plateau_finder+0x3c>
 800af80:	2c02      	cmp	r4, #2
 800af82:	f240 8191 	bls.w	800b2a8 <acc_dll_plateau_finder+0x3a0>
 800af86:	ee07 1a90 	vmov	s15, r1
 800af8a:	eef8 5a67 	vcvt.f32.u32	s11, s15
 800af8e:	ee07 4a90 	vmov	s15, r4
 800af92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af96:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800af9a:	eec5 7aa6 	vdiv.f32	s15, s11, s13
 800af9e:	ab2e      	add	r3, sp, #184	; 0xb8
 800afa0:	eb03 0046 	add.w	r0, r3, r6, lsl #1
 800afa4:	3501      	adds	r5, #1
 800afa6:	f106 0c01 	add.w	ip, r6, #1
 800afaa:	2100      	movs	r1, #0
 800afac:	45a9      	cmp	r9, r5
 800afae:	f820 4c34 	strh.w	r4, [r0, #-52]
 800afb2:	f820 7c9c 	strh.w	r7, [r0, #-156]
 800afb6:	460c      	mov	r4, r1
 800afb8:	eec7 6a06 	vdiv.f32	s13, s14, s12
 800afbc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800afc0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800afc4:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800afc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800afcc:	ee16 3a90 	vmov	r3, s13
 800afd0:	ee17 2a90 	vmov	r2, s15
 800afd4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800afd8:	f82a 2016 	strh.w	r2, [sl, r6, lsl #1]
 800afdc:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 800b278 <acc_dll_plateau_finder+0x370>
 800afe0:	f820 3c68 	strh.w	r3, [r0, #-104]
 800afe4:	fa1f f68c 	uxth.w	r6, ip
 800afe8:	d1b3      	bne.n	800af52 <acc_dll_plateau_finder+0x4a>
 800afea:	9d05      	ldr	r5, [sp, #20]
 800afec:	f7fb fb60 	bl	80066b0 <acc_rss_integration_log_level>
 800aff0:	2803      	cmp	r0, #3
 800aff2:	f200 817f 	bhi.w	800b2f4 <acc_dll_plateau_finder+0x3ec>
 800aff6:	b33e      	cbz	r6, 800b048 <acc_dll_plateau_finder+0x140>
 800aff8:	f8df 929c 	ldr.w	r9, [pc, #668]	; 800b298 <acc_dll_plateau_finder+0x390>
 800affc:	4c9f      	ldr	r4, [pc, #636]	; (800b27c <acc_dll_plateau_finder+0x374>)
 800affe:	4fa0      	ldr	r7, [pc, #640]	; (800b280 <acc_dll_plateau_finder+0x378>)
 800b000:	f04f 0b00 	mov.w	fp, #0
 800b004:	46a8      	mov	r8, r5
 800b006:	f7fb fb53 	bl	80066b0 <acc_rss_integration_log_level>
 800b00a:	2803      	cmp	r0, #3
 800b00c:	d915      	bls.n	800b03a <acc_dll_plateau_finder+0x132>
 800b00e:	a914      	add	r1, sp, #80	; 0x50
 800b010:	aa21      	add	r2, sp, #132	; 0x84
 800b012:	ab07      	add	r3, sp, #28
 800b014:	f831 001b 	ldrh.w	r0, [r1, fp, lsl #1]
 800b018:	f832 101b 	ldrh.w	r1, [r2, fp, lsl #1]
 800b01c:	f833 201b 	ldrh.w	r2, [r3, fp, lsl #1]
 800b020:	f83a 301b 	ldrh.w	r3, [sl, fp, lsl #1]
 800b024:	e9cd 1002 	strd	r1, r0, [sp, #8]
 800b028:	e9cd 2300 	strd	r2, r3, [sp]
 800b02c:	4639      	mov	r1, r7
 800b02e:	f8d9 5034 	ldr.w	r5, [r9, #52]	; 0x34
 800b032:	465b      	mov	r3, fp
 800b034:	4622      	mov	r2, r4
 800b036:	2004      	movs	r0, #4
 800b038:	47a8      	blx	r5
 800b03a:	f10b 0b01 	add.w	fp, fp, #1
 800b03e:	fa1f f38b 	uxth.w	r3, fp
 800b042:	42b3      	cmp	r3, r6
 800b044:	d3df      	bcc.n	800b006 <acc_dll_plateau_finder+0xfe>
 800b046:	4645      	mov	r5, r8
 800b048:	9b04      	ldr	r3, [sp, #16]
 800b04a:	f8b3 b000 	ldrh.w	fp, [r3]
 800b04e:	f248 73cf 	movw	r3, #34767	; 0x87cf
 800b052:	459b      	cmp	fp, r3
 800b054:	f240 8161 	bls.w	800b31a <acc_dll_plateau_finder+0x412>
 800b058:	f5ab 4300 	sub.w	r3, fp, #32768	; 0x8000
 800b05c:	ee07 3a90 	vmov	s15, r3
 800b060:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800b284 <acc_dll_plateau_finder+0x37c>
 800b064:	ed9f 5a88 	vldr	s10, [pc, #544]	; 800b288 <acc_dll_plateau_finder+0x380>
 800b068:	eddf 6a88 	vldr	s13, [pc, #544]	; 800b28c <acc_dll_plateau_finder+0x384>
 800b06c:	eddf 5a88 	vldr	s11, [pc, #544]	; 800b290 <acc_dll_plateau_finder+0x388>
 800b070:	ed9f 6a88 	vldr	s12, [pc, #544]	; 800b294 <acc_dll_plateau_finder+0x38c>
 800b074:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b078:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b07c:	ee67 7a85 	vmul.f32	s15, s15, s10
 800b080:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b084:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800b088:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b08c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800b090:	ee77 7a86 	vadd.f32	s15, s15, s12
 800b094:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b098:	ee17 3a90 	vmov	r3, s15
 800b09c:	b29c      	uxth	r4, r3
 800b09e:	f7fb fb07 	bl	80066b0 <acc_rss_integration_log_level>
 800b0a2:	2803      	cmp	r0, #3
 800b0a4:	f200 812e 	bhi.w	800b304 <acc_dll_plateau_finder+0x3fc>
 800b0a8:	2e00      	cmp	r6, #0
 800b0aa:	f000 814b 	beq.w	800b344 <acc_dll_plateau_finder+0x43c>
 800b0ae:	f04f 0900 	mov.w	r9, #0
 800b0b2:	46c8      	mov	r8, r9
 800b0b4:	464b      	mov	r3, r9
 800b0b6:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 800b0ba:	4627      	mov	r7, r4
 800b0bc:	e010      	b.n	800b0e0 <acc_dll_plateau_finder+0x1d8>
 800b0be:	f5ab 62fa 	sub.w	r2, fp, #2000	; 0x7d0
 800b0c2:	4294      	cmp	r4, r2
 800b0c4:	f200 8109 	bhi.w	800b2da <acc_dll_plateau_finder+0x3d2>
 800b0c8:	f108 0201 	add.w	r2, r8, #1
 800b0cc:	f825 3018 	strh.w	r3, [r5, r8, lsl #1]
 800b0d0:	fa1f f882 	uxth.w	r8, r2
 800b0d4:	f109 0901 	add.w	r9, r9, #1
 800b0d8:	fa1f f389 	uxth.w	r3, r9
 800b0dc:	429e      	cmp	r6, r3
 800b0de:	d916      	bls.n	800b10e <acc_dll_plateau_finder+0x206>
 800b0e0:	f83a 4b02 	ldrh.w	r4, [sl], #2
 800b0e4:	f241 3287 	movw	r2, #4999	; 0x1387
 800b0e8:	4294      	cmp	r4, r2
 800b0ea:	d8e8      	bhi.n	800b0be <acc_dll_plateau_finder+0x1b6>
 800b0ec:	f7fb fae0 	bl	80066b0 <acc_rss_integration_log_level>
 800b0f0:	2803      	cmp	r0, #3
 800b0f2:	d9ef      	bls.n	800b0d4 <acc_dll_plateau_finder+0x1cc>
 800b0f4:	4a68      	ldr	r2, [pc, #416]	; (800b298 <acc_dll_plateau_finder+0x390>)
 800b0f6:	4962      	ldr	r1, [pc, #392]	; (800b280 <acc_dll_plateau_finder+0x378>)
 800b0f8:	4623      	mov	r3, r4
 800b0fa:	2004      	movs	r0, #4
 800b0fc:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800b0fe:	4a67      	ldr	r2, [pc, #412]	; (800b29c <acc_dll_plateau_finder+0x394>)
 800b100:	f109 0901 	add.w	r9, r9, #1
 800b104:	47a0      	blx	r4
 800b106:	fa1f f389 	uxth.w	r3, r9
 800b10a:	429e      	cmp	r6, r3
 800b10c:	d8e8      	bhi.n	800b0e0 <acc_dll_plateau_finder+0x1d8>
 800b10e:	f1b8 0f01 	cmp.w	r8, #1
 800b112:	463c      	mov	r4, r7
 800b114:	f240 8112 	bls.w	800b33c <acc_dll_plateau_finder+0x434>
 800b118:	f1a8 0a02 	sub.w	sl, r8, #2
 800b11c:	fa0f fe8a 	sxth.w	lr, sl
 800b120:	f10e 0901 	add.w	r9, lr, #1
 800b124:	fa1f fa8a 	uxth.w	sl, sl
 800b128:	eb05 0949 	add.w	r9, r5, r9, lsl #1
 800b12c:	46ac      	mov	ip, r5
 800b12e:	f1be 0f00 	cmp.w	lr, #0
 800b132:	db23      	blt.n	800b17c <acc_dll_plateau_finder+0x274>
 800b134:	4649      	mov	r1, r9
 800b136:	4670      	mov	r0, lr
 800b138:	2500      	movs	r5, #0
 800b13a:	f831 6d02 	ldrh.w	r6, [r1, #-2]!
 800b13e:	ab2e      	add	r3, sp, #184	; 0xb8
 800b140:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 800b144:	884f      	ldrh	r7, [r1, #2]
 800b146:	f833 2c68 	ldrh.w	r2, [r3, #-104]
 800b14a:	ab2e      	add	r3, sp, #184	; 0xb8
 800b14c:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 800b150:	42a2      	cmp	r2, r4
 800b152:	f833 3c68 	ldrh.w	r3, [r3, #-104]
 800b156:	bf8c      	ite	hi
 800b158:	1b12      	subhi	r2, r2, r4
 800b15a:	1aa2      	subls	r2, r4, r2
 800b15c:	42a3      	cmp	r3, r4
 800b15e:	bf8c      	ite	hi
 800b160:	1b1b      	subhi	r3, r3, r4
 800b162:	1ae3      	subls	r3, r4, r3
 800b164:	b292      	uxth	r2, r2
 800b166:	b29b      	uxth	r3, r3
 800b168:	429a      	cmp	r2, r3
 800b16a:	d902      	bls.n	800b172 <acc_dll_plateau_finder+0x26a>
 800b16c:	800f      	strh	r7, [r1, #0]
 800b16e:	804e      	strh	r6, [r1, #2]
 800b170:	2501      	movs	r5, #1
 800b172:	3801      	subs	r0, #1
 800b174:	0403      	lsls	r3, r0, #16
 800b176:	d5e0      	bpl.n	800b13a <acc_dll_plateau_finder+0x232>
 800b178:	2d00      	cmp	r5, #0
 800b17a:	d1d8      	bne.n	800b12e <acc_dll_plateau_finder+0x226>
 800b17c:	f8bc 3000 	ldrh.w	r3, [ip]
 800b180:	aa2e      	add	r2, sp, #184	; 0xb8
 800b182:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800b186:	4665      	mov	r5, ip
 800b188:	1ca8      	adds	r0, r5, #2
 800b18a:	f833 1c68 	ldrh.w	r1, [r3, #-104]
 800b18e:	eb00 004a 	add.w	r0, r0, sl, lsl #1
 800b192:	4662      	mov	r2, ip
 800b194:	f04f 0a01 	mov.w	sl, #1
 800b198:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 800b19c:	ac2e      	add	r4, sp, #184	; 0xb8
 800b19e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800b1a2:	f833 3c68 	ldrh.w	r3, [r3, #-104]
 800b1a6:	428b      	cmp	r3, r1
 800b1a8:	bf8c      	ite	hi
 800b1aa:	1a5b      	subhi	r3, r3, r1
 800b1ac:	1acb      	subls	r3, r1, r3
 800b1ae:	b29b      	uxth	r3, r3
 800b1b0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b1b4:	bf3c      	itt	cc
 800b1b6:	f10a 0a01 	addcc.w	sl, sl, #1
 800b1ba:	fa1f fa8a 	uxthcc.w	sl, sl
 800b1be:	4290      	cmp	r0, r2
 800b1c0:	d1ea      	bne.n	800b198 <acc_dll_plateau_finder+0x290>
 800b1c2:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 800b298 <acc_dll_plateau_finder+0x390>
 800b1c6:	4f36      	ldr	r7, [pc, #216]	; (800b2a0 <acc_dll_plateau_finder+0x398>)
 800b1c8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b1cc:	f1ba 0f00 	cmp.w	sl, #0
 800b1d0:	d031      	beq.n	800b236 <acc_dll_plateau_finder+0x32e>
 800b1d2:	2400      	movs	r4, #0
 800b1d4:	4e2a      	ldr	r6, [pc, #168]	; (800b280 <acc_dll_plateau_finder+0x378>)
 800b1d6:	46a6      	mov	lr, r4
 800b1d8:	4622      	mov	r2, r4
 800b1da:	e004      	b.n	800b1e6 <acc_dll_plateau_finder+0x2de>
 800b1dc:	3401      	adds	r4, #1
 800b1de:	b2a4      	uxth	r4, r4
 800b1e0:	4554      	cmp	r4, sl
 800b1e2:	4622      	mov	r2, r4
 800b1e4:	d224      	bcs.n	800b230 <acc_dll_plateau_finder+0x328>
 800b1e6:	0053      	lsls	r3, r2, #1
 800b1e8:	3302      	adds	r3, #2
 800b1ea:	f835 1012 	ldrh.w	r1, [r5, r2, lsl #1]
 800b1ee:	5ae8      	ldrh	r0, [r5, r3]
 800b1f0:	f10d 0cb8 	add.w	ip, sp, #184	; 0xb8
 800b1f4:	eb0c 0b41 	add.w	fp, ip, r1, lsl #1
 800b1f8:	eb0c 0c40 	add.w	ip, ip, r0, lsl #1
 800b1fc:	f83b bc34 	ldrh.w	fp, [fp, #-52]
 800b200:	f83c cc34 	ldrh.w	ip, [ip, #-52]
 800b204:	45e3      	cmp	fp, ip
 800b206:	d2e9      	bcs.n	800b1dc <acc_dll_plateau_finder+0x2d4>
 800b208:	f825 0012 	strh.w	r0, [r5, r2, lsl #1]
 800b20c:	52e9      	strh	r1, [r5, r3]
 800b20e:	f7fb fa4f 	bl	80066b0 <acc_rss_integration_log_level>
 800b212:	2803      	cmp	r0, #3
 800b214:	d97e      	bls.n	800b314 <acc_dll_plateau_finder+0x40c>
 800b216:	3401      	adds	r4, #1
 800b218:	463a      	mov	r2, r7
 800b21a:	b2a4      	uxth	r4, r4
 800b21c:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
 800b220:	4631      	mov	r1, r6
 800b222:	2004      	movs	r0, #4
 800b224:	4798      	blx	r3
 800b226:	4554      	cmp	r4, sl
 800b228:	f04f 0e01 	mov.w	lr, #1
 800b22c:	4622      	mov	r2, r4
 800b22e:	d3da      	bcc.n	800b1e6 <acc_dll_plateau_finder+0x2de>
 800b230:	f1be 0f00 	cmp.w	lr, #0
 800b234:	d1ca      	bne.n	800b1cc <acc_dll_plateau_finder+0x2c4>
 800b236:	f8df a060 	ldr.w	sl, [pc, #96]	; 800b298 <acc_dll_plateau_finder+0x390>
 800b23a:	f8df 9068 	ldr.w	r9, [pc, #104]	; 800b2a4 <acc_dll_plateau_finder+0x39c>
 800b23e:	4f10      	ldr	r7, [pc, #64]	; (800b280 <acc_dll_plateau_finder+0x378>)
 800b240:	2400      	movs	r4, #0
 800b242:	f7fb fa35 	bl	80066b0 <acc_rss_integration_log_level>
 800b246:	2803      	cmp	r0, #3
 800b248:	d90d      	bls.n	800b266 <acc_dll_plateau_finder+0x35e>
 800b24a:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
 800b24e:	aa2e      	add	r2, sp, #184	; 0xb8
 800b250:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800b254:	4639      	mov	r1, r7
 800b256:	f832 2c68 	ldrh.w	r2, [r2, #-104]
 800b25a:	9200      	str	r2, [sp, #0]
 800b25c:	f8da 6034 	ldr.w	r6, [sl, #52]	; 0x34
 800b260:	464a      	mov	r2, r9
 800b262:	2004      	movs	r0, #4
 800b264:	47b0      	blx	r6
 800b266:	3401      	adds	r4, #1
 800b268:	b2a3      	uxth	r3, r4
 800b26a:	4598      	cmp	r8, r3
 800b26c:	d8e9      	bhi.n	800b242 <acc_dll_plateau_finder+0x33a>
 800b26e:	4640      	mov	r0, r8
 800b270:	b02f      	add	sp, #188	; 0xbc
 800b272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b276:	bf00      	nop
 800b278:	00000000 	.word	0x00000000
 800b27c:	08014a44 	.word	0x08014a44
 800b280:	080149c8 	.word	0x080149c8
 800b284:	3f99999a 	.word	0x3f99999a
 800b288:	37800000 	.word	0x37800000
 800b28c:	3f866666 	.word	0x3f866666
 800b290:	47800000 	.word	0x47800000
 800b294:	47000000 	.word	0x47000000
 800b298:	20000640 	.word	0x20000640
 800b29c:	08014ac0 	.word	0x08014ac0
 800b2a0:	08014b20 	.word	0x08014b20
 800b2a4:	08014b54 	.word	0x08014b54
 800b2a8:	f7fb fa02 	bl	80066b0 <acc_rss_integration_log_level>
 800b2ac:	2803      	cmp	r0, #3
 800b2ae:	d90f      	bls.n	800b2d0 <acc_dll_plateau_finder+0x3c8>
 800b2b0:	9401      	str	r4, [sp, #4]
 800b2b2:	f838 2c02 	ldrh.w	r2, [r8, #-2]
 800b2b6:	4b2d      	ldr	r3, [pc, #180]	; (800b36c <acc_dll_plateau_finder+0x464>)
 800b2b8:	9200      	str	r2, [sp, #0]
 800b2ba:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 800b2bc:	492c      	ldr	r1, [pc, #176]	; (800b370 <acc_dll_plateau_finder+0x468>)
 800b2be:	4a2d      	ldr	r2, [pc, #180]	; (800b374 <acc_dll_plateau_finder+0x46c>)
 800b2c0:	462b      	mov	r3, r5
 800b2c2:	2004      	movs	r0, #4
 800b2c4:	2400      	movs	r4, #0
 800b2c6:	47b8      	blx	r7
 800b2c8:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800b378 <acc_dll_plateau_finder+0x470>
 800b2cc:	4621      	mov	r1, r4
 800b2ce:	e63d      	b.n	800af4c <acc_dll_plateau_finder+0x44>
 800b2d0:	2100      	movs	r1, #0
 800b2d2:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800b378 <acc_dll_plateau_finder+0x470>
 800b2d6:	460c      	mov	r4, r1
 800b2d8:	e638      	b.n	800af4c <acc_dll_plateau_finder+0x44>
 800b2da:	f7fb f9e9 	bl	80066b0 <acc_rss_integration_log_level>
 800b2de:	2803      	cmp	r0, #3
 800b2e0:	f67f aef8 	bls.w	800b0d4 <acc_dll_plateau_finder+0x1cc>
 800b2e4:	4a21      	ldr	r2, [pc, #132]	; (800b36c <acc_dll_plateau_finder+0x464>)
 800b2e6:	4922      	ldr	r1, [pc, #136]	; (800b370 <acc_dll_plateau_finder+0x468>)
 800b2e8:	4623      	mov	r3, r4
 800b2ea:	2004      	movs	r0, #4
 800b2ec:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800b2ee:	4a23      	ldr	r2, [pc, #140]	; (800b37c <acc_dll_plateau_finder+0x474>)
 800b2f0:	47a0      	blx	r4
 800b2f2:	e6ef      	b.n	800b0d4 <acc_dll_plateau_finder+0x1cc>
 800b2f4:	4633      	mov	r3, r6
 800b2f6:	491d      	ldr	r1, [pc, #116]	; (800b36c <acc_dll_plateau_finder+0x464>)
 800b2f8:	4a21      	ldr	r2, [pc, #132]	; (800b380 <acc_dll_plateau_finder+0x478>)
 800b2fa:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 800b2fc:	491c      	ldr	r1, [pc, #112]	; (800b370 <acc_dll_plateau_finder+0x468>)
 800b2fe:	2004      	movs	r0, #4
 800b300:	47a0      	blx	r4
 800b302:	e678      	b.n	800aff6 <acc_dll_plateau_finder+0xee>
 800b304:	4b19      	ldr	r3, [pc, #100]	; (800b36c <acc_dll_plateau_finder+0x464>)
 800b306:	4a1f      	ldr	r2, [pc, #124]	; (800b384 <acc_dll_plateau_finder+0x47c>)
 800b308:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 800b30a:	4919      	ldr	r1, [pc, #100]	; (800b370 <acc_dll_plateau_finder+0x468>)
 800b30c:	4623      	mov	r3, r4
 800b30e:	2004      	movs	r0, #4
 800b310:	47b8      	blx	r7
 800b312:	e6c9      	b.n	800b0a8 <acc_dll_plateau_finder+0x1a0>
 800b314:	f04f 0e01 	mov.w	lr, #1
 800b318:	e760      	b.n	800b1dc <acc_dll_plateau_finder+0x2d4>
 800b31a:	f7fb f9c9 	bl	80066b0 <acc_rss_integration_log_level>
 800b31e:	2803      	cmp	r0, #3
 800b320:	d910      	bls.n	800b344 <acc_dll_plateau_finder+0x43c>
 800b322:	4b12      	ldr	r3, [pc, #72]	; (800b36c <acc_dll_plateau_finder+0x464>)
 800b324:	4a18      	ldr	r2, [pc, #96]	; (800b388 <acc_dll_plateau_finder+0x480>)
 800b326:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800b328:	4911      	ldr	r1, [pc, #68]	; (800b370 <acc_dll_plateau_finder+0x468>)
 800b32a:	465b      	mov	r3, fp
 800b32c:	2004      	movs	r0, #4
 800b32e:	47a0      	blx	r4
 800b330:	f04f 0800 	mov.w	r8, #0
 800b334:	4640      	mov	r0, r8
 800b336:	b02f      	add	sp, #188	; 0xbc
 800b338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b33c:	f1b8 0f00 	cmp.w	r8, #0
 800b340:	f47f af79 	bne.w	800b236 <acc_dll_plateau_finder+0x32e>
 800b344:	f04f 0800 	mov.w	r8, #0
 800b348:	4640      	mov	r0, r8
 800b34a:	b02f      	add	sp, #188	; 0xbc
 800b34c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b350:	f7fb f9ae 	bl	80066b0 <acc_rss_integration_log_level>
 800b354:	2803      	cmp	r0, #3
 800b356:	d801      	bhi.n	800b35c <acc_dll_plateau_finder+0x454>
 800b358:	2600      	movs	r6, #0
 800b35a:	e675      	b.n	800b048 <acc_dll_plateau_finder+0x140>
 800b35c:	2300      	movs	r3, #0
 800b35e:	461e      	mov	r6, r3
 800b360:	e7c9      	b.n	800b2f6 <acc_dll_plateau_finder+0x3ee>
 800b362:	4803      	ldr	r0, [pc, #12]	; (800b370 <acc_dll_plateau_finder+0x468>)
 800b364:	2128      	movs	r1, #40	; 0x28
 800b366:	f7fd fbc7 	bl	8008af8 <acc_assert_fail>
 800b36a:	bf00      	nop
 800b36c:	20000640 	.word	0x20000640
 800b370:	080149c8 	.word	0x080149c8
 800b374:	080149dc 	.word	0x080149dc
 800b378:	00000000 	.word	0x00000000
 800b37c:	08014af0 	.word	0x08014af0
 800b380:	08014a30 	.word	0x08014a30
 800b384:	08014ab0 	.word	0x08014ab0
 800b388:	08014a88 	.word	0x08014a88

0800b38c <acc_cpd_linear_sweep_load_program>:
 800b38c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b390:	ed2d 8b04 	vpush	{d8-d9}
 800b394:	4614      	mov	r4, r2
 800b396:	b08f      	sub	sp, #60	; 0x3c
 800b398:	461a      	mov	r2, r3
 800b39a:	4606      	mov	r6, r0
 800b39c:	460d      	mov	r5, r1
 800b39e:	ee08 0a90 	vmov	s17, r0
 800b3a2:	4601      	mov	r1, r0
 800b3a4:	469b      	mov	fp, r3
 800b3a6:	2016      	movs	r0, #22
 800b3a8:	23bc      	movs	r3, #188	; 0xbc
 800b3aa:	f7fd fca3 	bl	8008cf4 <acc_probes_execute_struct>
 800b3ae:	ab0d      	add	r3, sp, #52	; 0x34
 800b3b0:	4622      	mov	r2, r4
 800b3b2:	9300      	str	r3, [sp, #0]
 800b3b4:	4629      	mov	r1, r5
 800b3b6:	4630      	mov	r0, r6
 800b3b8:	2400      	movs	r4, #0
 800b3ba:	ab0c      	add	r3, sp, #48	; 0x30
 800b3bc:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
 800b3c0:	f7fc ff66 	bl	8008290 <acc_sensor_protocol_r2_prepare_load>
 800b3c4:	900b      	str	r0, [sp, #44]	; 0x2c
 800b3c6:	b928      	cbnz	r0, 800b3d4 <acc_cpd_linear_sweep_load_program+0x48>
 800b3c8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b3ca:	b00f      	add	sp, #60	; 0x3c
 800b3cc:	ecbd 8b04 	vpop	{d8-d9}
 800b3d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3d4:	f7fb f96c 	bl	80066b0 <acc_rss_integration_log_level>
 800b3d8:	2803      	cmp	r0, #3
 800b3da:	ee09 5a10 	vmov	s18, r5
 800b3de:	d905      	bls.n	800b3ec <acc_cpd_linear_sweep_load_program+0x60>
 800b3e0:	4b05      	ldr	r3, [pc, #20]	; (800b3f8 <acc_cpd_linear_sweep_load_program+0x6c>)
 800b3e2:	4a06      	ldr	r2, [pc, #24]	; (800b3fc <acc_cpd_linear_sweep_load_program+0x70>)
 800b3e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3e6:	4906      	ldr	r1, [pc, #24]	; (800b400 <acc_cpd_linear_sweep_load_program+0x74>)
 800b3e8:	2004      	movs	r0, #4
 800b3ea:	4798      	blx	r3
 800b3ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b3ee:	ed9f 8a05 	vldr	s16, [pc, #20]	; 800b404 <acc_cpd_linear_sweep_load_program+0x78>
 800b3f2:	f04f 0a00 	mov.w	sl, #0
 800b3f6:	e07b      	b.n	800b4f0 <acc_cpd_linear_sweep_load_program+0x164>
 800b3f8:	20000640 	.word	0x20000640
 800b3fc:	08014b78 	.word	0x08014b78
 800b400:	08014ba0 	.word	0x08014ba0
 800b404:	3751b717 	.word	0x3751b717
 800b408:	f002 f898 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800b40c:	2223      	movs	r2, #35	; 0x23
 800b40e:	2103      	movs	r1, #3
 800b410:	4603      	mov	r3, r0
 800b412:	e9cd 2100 	strd	r2, r1, [sp]
 800b416:	4620      	mov	r0, r4
 800b418:	4632      	mov	r2, r6
 800b41a:	4629      	mov	r1, r5
 800b41c:	f001 ff3e 	bl	800d29c <acc_confprogram_patch_offset>
 800b420:	f002 f88c 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800b424:	227d      	movs	r2, #125	; 0x7d
 800b426:	2100      	movs	r1, #0
 800b428:	4603      	mov	r3, r0
 800b42a:	e9cd 2100 	strd	r2, r1, [sp]
 800b42e:	4620      	mov	r0, r4
 800b430:	4632      	mov	r2, r6
 800b432:	4629      	mov	r1, r5
 800b434:	f001 ff32 	bl	800d29c <acc_confprogram_patch_offset>
 800b438:	f002 f880 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800b43c:	2281      	movs	r2, #129	; 0x81
 800b43e:	2101      	movs	r1, #1
 800b440:	4603      	mov	r3, r0
 800b442:	e9cd 2100 	strd	r2, r1, [sp]
 800b446:	4620      	mov	r0, r4
 800b448:	4632      	mov	r2, r6
 800b44a:	4629      	mov	r1, r5
 800b44c:	f001 ff26 	bl	800d29c <acc_confprogram_patch_offset>
 800b450:	f002 f874 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800b454:	2102      	movs	r1, #2
 800b456:	4603      	mov	r3, r0
 800b458:	2275      	movs	r2, #117	; 0x75
 800b45a:	9101      	str	r1, [sp, #4]
 800b45c:	4629      	mov	r1, r5
 800b45e:	9200      	str	r2, [sp, #0]
 800b460:	4620      	mov	r0, r4
 800b462:	4632      	mov	r2, r6
 800b464:	f001 ff1a 	bl	800d29c <acc_confprogram_patch_offset>
 800b468:	f002 f868 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800b46c:	f89b 20ac 	ldrb.w	r2, [fp, #172]	; 0xac
 800b470:	9201      	str	r2, [sp, #4]
 800b472:	2252      	movs	r2, #82	; 0x52
 800b474:	4603      	mov	r3, r0
 800b476:	4629      	mov	r1, r5
 800b478:	9200      	str	r2, [sp, #0]
 800b47a:	4620      	mov	r0, r4
 800b47c:	4632      	mov	r2, r6
 800b47e:	f001 ff0d 	bl	800d29c <acc_confprogram_patch_offset>
 800b482:	eddb 7a2c 	vldr	s15, [fp, #176]	; 0xb0
 800b486:	ee67 7a88 	vmul.f32	s15, s15, s16
 800b48a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b48e:	ee17 7a90 	vmov	r7, s15
 800b492:	f002 f853 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800b496:	3f01      	subs	r7, #1
 800b498:	2268      	movs	r2, #104	; 0x68
 800b49a:	b2bf      	uxth	r7, r7
 800b49c:	4603      	mov	r3, r0
 800b49e:	4629      	mov	r1, r5
 800b4a0:	e9cd 2700 	strd	r2, r7, [sp]
 800b4a4:	4620      	mov	r0, r4
 800b4a6:	4632      	mov	r2, r6
 800b4a8:	f001 fef8 	bl	800d29c <acc_confprogram_patch_offset>
 800b4ac:	f002 f846 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800b4b0:	f8db 20b4 	ldr.w	r2, [fp, #180]	; 0xb4
 800b4b4:	9201      	str	r2, [sp, #4]
 800b4b6:	2253      	movs	r2, #83	; 0x53
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	9200      	str	r2, [sp, #0]
 800b4bc:	4629      	mov	r1, r5
 800b4be:	4632      	mov	r2, r6
 800b4c0:	4620      	mov	r0, r4
 800b4c2:	f001 feeb 	bl	800d29c <acc_confprogram_patch_offset>
 800b4c6:	f8db 30b4 	ldr.w	r3, [fp, #180]	; 0xb4
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	f040 8465 	bne.w	800bd9a <acc_cpd_linear_sweep_load_program+0xa0e>
 800b4d0:	ee19 2a10 	vmov	r2, s18
 800b4d4:	464b      	mov	r3, r9
 800b4d6:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 800b4da:	ee18 0a90 	vmov	r0, s17
 800b4de:	f7fc fbe7 	bl	8007cb0 <acc_sensor_r2_load_confmem>
 800b4e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b4e4:	f240 7211 	movw	r2, #1809	; 0x711
 800b4e8:	449a      	add	sl, r3
 800b4ea:	4592      	cmp	sl, r2
 800b4ec:	f200 8464 	bhi.w	800bdb8 <acc_cpd_linear_sweep_load_program+0xa2c>
 800b4f0:	f5ca 62e2 	rsb	r2, sl, #1808	; 0x710
 800b4f4:	3202      	adds	r2, #2
 800b4f6:	429a      	cmp	r2, r3
 800b4f8:	bf28      	it	cs
 800b4fa:	461a      	movcs	r2, r3
 800b4fc:	ea4f 035a 	mov.w	r3, sl, lsr #1
 800b500:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800b502:	9302      	str	r3, [sp, #8]
 800b504:	461d      	mov	r5, r3
 800b506:	4691      	mov	r9, r2
 800b508:	f002 f814 	bl	800d534 <acc_image_a111_r2c_sweep_get>
 800b50c:	ea4f 0259 	mov.w	r2, r9, lsr #1
 800b510:	4621      	mov	r1, r4
 800b512:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 800b516:	f001 ffaf 	bl	800d478 <acc_confprogram_copy>
 800b51a:	f002 f80f 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800b51e:	fa1f f689 	uxth.w	r6, r9
 800b522:	fa1f f58a 	uxth.w	r5, sl
 800b526:	f8db 2000 	ldr.w	r2, [fp]
 800b52a:	9201      	str	r2, [sp, #4]
 800b52c:	2750      	movs	r7, #80	; 0x50
 800b52e:	4603      	mov	r3, r0
 800b530:	4632      	mov	r2, r6
 800b532:	4629      	mov	r1, r5
 800b534:	4620      	mov	r0, r4
 800b536:	9700      	str	r7, [sp, #0]
 800b538:	f001 feb0 	bl	800d29c <acc_confprogram_patch_offset>
 800b53c:	f001 fffe 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800b540:	274e      	movs	r7, #78	; 0x4e
 800b542:	f8db 2004 	ldr.w	r2, [fp, #4]
 800b546:	9201      	str	r2, [sp, #4]
 800b548:	4603      	mov	r3, r0
 800b54a:	4632      	mov	r2, r6
 800b54c:	4629      	mov	r1, r5
 800b54e:	4620      	mov	r0, r4
 800b550:	9700      	str	r7, [sp, #0]
 800b552:	f001 fea3 	bl	800d29c <acc_confprogram_patch_offset>
 800b556:	f001 fff1 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800b55a:	274f      	movs	r7, #79	; 0x4f
 800b55c:	f8db 2008 	ldr.w	r2, [fp, #8]
 800b560:	9201      	str	r2, [sp, #4]
 800b562:	4603      	mov	r3, r0
 800b564:	4632      	mov	r2, r6
 800b566:	4629      	mov	r1, r5
 800b568:	4620      	mov	r0, r4
 800b56a:	9700      	str	r7, [sp, #0]
 800b56c:	f001 fe96 	bl	800d29c <acc_confprogram_patch_offset>
 800b570:	f001 ffe4 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800b574:	274c      	movs	r7, #76	; 0x4c
 800b576:	f8bb 200c 	ldrh.w	r2, [fp, #12]
 800b57a:	9201      	str	r2, [sp, #4]
 800b57c:	4603      	mov	r3, r0
 800b57e:	4632      	mov	r2, r6
 800b580:	4629      	mov	r1, r5
 800b582:	4620      	mov	r0, r4
 800b584:	9700      	str	r7, [sp, #0]
 800b586:	f001 fe89 	bl	800d29c <acc_confprogram_patch_offset>
 800b58a:	f001 ffd7 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800b58e:	2726      	movs	r7, #38	; 0x26
 800b590:	f8db 2010 	ldr.w	r2, [fp, #16]
 800b594:	9201      	str	r2, [sp, #4]
 800b596:	4603      	mov	r3, r0
 800b598:	4632      	mov	r2, r6
 800b59a:	4629      	mov	r1, r5
 800b59c:	4620      	mov	r0, r4
 800b59e:	9700      	str	r7, [sp, #0]
 800b5a0:	f001 fe7c 	bl	800d29c <acc_confprogram_patch_offset>
 800b5a4:	f001 ffca 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800b5a8:	2773      	movs	r7, #115	; 0x73
 800b5aa:	f8db 2014 	ldr.w	r2, [fp, #20]
 800b5ae:	9201      	str	r2, [sp, #4]
 800b5b0:	4603      	mov	r3, r0
 800b5b2:	4632      	mov	r2, r6
 800b5b4:	4629      	mov	r1, r5
 800b5b6:	4620      	mov	r0, r4
 800b5b8:	9700      	str	r7, [sp, #0]
 800b5ba:	f001 fe6f 	bl	800d29c <acc_confprogram_patch_offset>
 800b5be:	f001 ffbd 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800b5c2:	2762      	movs	r7, #98	; 0x62
 800b5c4:	f8db 2018 	ldr.w	r2, [fp, #24]
 800b5c8:	9201      	str	r2, [sp, #4]
 800b5ca:	4603      	mov	r3, r0
 800b5cc:	4632      	mov	r2, r6
 800b5ce:	4629      	mov	r1, r5
 800b5d0:	4620      	mov	r0, r4
 800b5d2:	9700      	str	r7, [sp, #0]
 800b5d4:	f001 fe62 	bl	800d29c <acc_confprogram_patch_offset>
 800b5d8:	f001 ffb0 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800b5dc:	2737      	movs	r7, #55	; 0x37
 800b5de:	f8db 201c 	ldr.w	r2, [fp, #28]
 800b5e2:	9201      	str	r2, [sp, #4]
 800b5e4:	4603      	mov	r3, r0
 800b5e6:	4632      	mov	r2, r6
 800b5e8:	4629      	mov	r1, r5
 800b5ea:	4620      	mov	r0, r4
 800b5ec:	9700      	str	r7, [sp, #0]
 800b5ee:	f001 fe55 	bl	800d29c <acc_confprogram_patch_offset>
 800b5f2:	f001 ffa3 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800b5f6:	2776      	movs	r7, #118	; 0x76
 800b5f8:	f8db 2020 	ldr.w	r2, [fp, #32]
 800b5fc:	9201      	str	r2, [sp, #4]
 800b5fe:	4603      	mov	r3, r0
 800b600:	4632      	mov	r2, r6
 800b602:	4629      	mov	r1, r5
 800b604:	4620      	mov	r0, r4
 800b606:	9700      	str	r7, [sp, #0]
 800b608:	f001 fe48 	bl	800d29c <acc_confprogram_patch_offset>
 800b60c:	f001 ff96 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800b610:	2769      	movs	r7, #105	; 0x69
 800b612:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 800b616:	9201      	str	r2, [sp, #4]
 800b618:	4603      	mov	r3, r0
 800b61a:	4632      	mov	r2, r6
 800b61c:	4629      	mov	r1, r5
 800b61e:	4620      	mov	r0, r4
 800b620:	9700      	str	r7, [sp, #0]
 800b622:	f001 fe3b 	bl	800d29c <acc_confprogram_patch_offset>
 800b626:	f001 ff89 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800b62a:	276a      	movs	r7, #106	; 0x6a
 800b62c:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 800b630:	9201      	str	r2, [sp, #4]
 800b632:	4603      	mov	r3, r0
 800b634:	4632      	mov	r2, r6
 800b636:	4629      	mov	r1, r5
 800b638:	4620      	mov	r0, r4
 800b63a:	9700      	str	r7, [sp, #0]
 800b63c:	f001 fe2e 	bl	800d29c <acc_confprogram_patch_offset>
 800b640:	f001 ff7c 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800b644:	2719      	movs	r7, #25
 800b646:	f8db 2030 	ldr.w	r2, [fp, #48]	; 0x30
 800b64a:	9201      	str	r2, [sp, #4]
 800b64c:	4603      	mov	r3, r0
 800b64e:	4632      	mov	r2, r6
 800b650:	4629      	mov	r1, r5
 800b652:	4620      	mov	r0, r4
 800b654:	9700      	str	r7, [sp, #0]
 800b656:	f001 fe21 	bl	800d29c <acc_confprogram_patch_offset>
 800b65a:	f001 ff6f 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800b65e:	271a      	movs	r7, #26
 800b660:	f8db 2034 	ldr.w	r2, [fp, #52]	; 0x34
 800b664:	9201      	str	r2, [sp, #4]
 800b666:	4603      	mov	r3, r0
 800b668:	4632      	mov	r2, r6
 800b66a:	4629      	mov	r1, r5
 800b66c:	4620      	mov	r0, r4
 800b66e:	9700      	str	r7, [sp, #0]
 800b670:	f001 fe14 	bl	800d29c <acc_confprogram_patch_offset>
 800b674:	f001 ff62 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800b678:	271b      	movs	r7, #27
 800b67a:	f8db 2038 	ldr.w	r2, [fp, #56]	; 0x38
 800b67e:	9201      	str	r2, [sp, #4]
 800b680:	4603      	mov	r3, r0
 800b682:	4632      	mov	r2, r6
 800b684:	4629      	mov	r1, r5
 800b686:	4620      	mov	r0, r4
 800b688:	9700      	str	r7, [sp, #0]
 800b68a:	f001 fe07 	bl	800d29c <acc_confprogram_patch_offset>
 800b68e:	f001 ff55 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800b692:	271c      	movs	r7, #28
 800b694:	f8db 203c 	ldr.w	r2, [fp, #60]	; 0x3c
 800b698:	9201      	str	r2, [sp, #4]
 800b69a:	4603      	mov	r3, r0
 800b69c:	4632      	mov	r2, r6
 800b69e:	4629      	mov	r1, r5
 800b6a0:	4620      	mov	r0, r4
 800b6a2:	9700      	str	r7, [sp, #0]
 800b6a4:	f001 fdfa 	bl	800d29c <acc_confprogram_patch_offset>
 800b6a8:	f001 ff48 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800b6ac:	271d      	movs	r7, #29
 800b6ae:	f8db 2040 	ldr.w	r2, [fp, #64]	; 0x40
 800b6b2:	9201      	str	r2, [sp, #4]
 800b6b4:	4603      	mov	r3, r0
 800b6b6:	4632      	mov	r2, r6
 800b6b8:	4629      	mov	r1, r5
 800b6ba:	4620      	mov	r0, r4
 800b6bc:	9700      	str	r7, [sp, #0]
 800b6be:	f001 fded 	bl	800d29c <acc_confprogram_patch_offset>
 800b6c2:	f001 ff3b 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800b6c6:	271e      	movs	r7, #30
 800b6c8:	f8db 2044 	ldr.w	r2, [fp, #68]	; 0x44
 800b6cc:	9201      	str	r2, [sp, #4]
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	4632      	mov	r2, r6
 800b6d2:	4629      	mov	r1, r5
 800b6d4:	4620      	mov	r0, r4
 800b6d6:	9700      	str	r7, [sp, #0]
 800b6d8:	f001 fde0 	bl	800d29c <acc_confprogram_patch_offset>
 800b6dc:	f001 ff2e 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800b6e0:	2755      	movs	r7, #85	; 0x55
 800b6e2:	f8db 2048 	ldr.w	r2, [fp, #72]	; 0x48
 800b6e6:	9201      	str	r2, [sp, #4]
 800b6e8:	4603      	mov	r3, r0
 800b6ea:	4632      	mov	r2, r6
 800b6ec:	4629      	mov	r1, r5
 800b6ee:	4620      	mov	r0, r4
 800b6f0:	9700      	str	r7, [sp, #0]
 800b6f2:	f001 fdd3 	bl	800d29c <acc_confprogram_patch_offset>
 800b6f6:	f001 ff21 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800b6fa:	2756      	movs	r7, #86	; 0x56
 800b6fc:	f8db 204c 	ldr.w	r2, [fp, #76]	; 0x4c
 800b700:	9201      	str	r2, [sp, #4]
 800b702:	4603      	mov	r3, r0
 800b704:	4632      	mov	r2, r6
 800b706:	4629      	mov	r1, r5
 800b708:	4620      	mov	r0, r4
 800b70a:	9700      	str	r7, [sp, #0]
 800b70c:	f001 fdc6 	bl	800d29c <acc_confprogram_patch_offset>
 800b710:	f001 ff14 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800b714:	2758      	movs	r7, #88	; 0x58
 800b716:	f8db 2050 	ldr.w	r2, [fp, #80]	; 0x50
 800b71a:	9201      	str	r2, [sp, #4]
 800b71c:	4603      	mov	r3, r0
 800b71e:	4632      	mov	r2, r6
 800b720:	4629      	mov	r1, r5
 800b722:	4620      	mov	r0, r4
 800b724:	9700      	str	r7, [sp, #0]
 800b726:	f001 fdb9 	bl	800d29c <acc_confprogram_patch_offset>
 800b72a:	f001 ff07 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800b72e:	276b      	movs	r7, #107	; 0x6b
 800b730:	f8db 2054 	ldr.w	r2, [fp, #84]	; 0x54
 800b734:	9201      	str	r2, [sp, #4]
 800b736:	4603      	mov	r3, r0
 800b738:	4632      	mov	r2, r6
 800b73a:	4629      	mov	r1, r5
 800b73c:	4620      	mov	r0, r4
 800b73e:	9700      	str	r7, [sp, #0]
 800b740:	f001 fdac 	bl	800d29c <acc_confprogram_patch_offset>
 800b744:	f001 fefa 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800b748:	2786      	movs	r7, #134	; 0x86
 800b74a:	f8db 2058 	ldr.w	r2, [fp, #88]	; 0x58
 800b74e:	9201      	str	r2, [sp, #4]
 800b750:	4603      	mov	r3, r0
 800b752:	4632      	mov	r2, r6
 800b754:	4629      	mov	r1, r5
 800b756:	4620      	mov	r0, r4
 800b758:	9700      	str	r7, [sp, #0]
 800b75a:	f001 fd9f 	bl	800d29c <acc_confprogram_patch_offset>
 800b75e:	f001 feed 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800b762:	2764      	movs	r7, #100	; 0x64
 800b764:	f8db 205c 	ldr.w	r2, [fp, #92]	; 0x5c
 800b768:	9201      	str	r2, [sp, #4]
 800b76a:	4603      	mov	r3, r0
 800b76c:	4632      	mov	r2, r6
 800b76e:	4629      	mov	r1, r5
 800b770:	4620      	mov	r0, r4
 800b772:	9700      	str	r7, [sp, #0]
 800b774:	f001 fd92 	bl	800d29c <acc_confprogram_patch_offset>
 800b778:	f001 fee0 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800b77c:	2765      	movs	r7, #101	; 0x65
 800b77e:	f8db 2060 	ldr.w	r2, [fp, #96]	; 0x60
 800b782:	9201      	str	r2, [sp, #4]
 800b784:	4603      	mov	r3, r0
 800b786:	4632      	mov	r2, r6
 800b788:	4629      	mov	r1, r5
 800b78a:	4620      	mov	r0, r4
 800b78c:	9700      	str	r7, [sp, #0]
 800b78e:	f001 fd85 	bl	800d29c <acc_confprogram_patch_offset>
 800b792:	f001 fed3 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800b796:	2740      	movs	r7, #64	; 0x40
 800b798:	f8db 2064 	ldr.w	r2, [fp, #100]	; 0x64
 800b79c:	9201      	str	r2, [sp, #4]
 800b79e:	4603      	mov	r3, r0
 800b7a0:	4632      	mov	r2, r6
 800b7a2:	4629      	mov	r1, r5
 800b7a4:	4620      	mov	r0, r4
 800b7a6:	9700      	str	r7, [sp, #0]
 800b7a8:	f001 fd78 	bl	800d29c <acc_confprogram_patch_offset>
 800b7ac:	f001 fec6 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800b7b0:	2741      	movs	r7, #65	; 0x41
 800b7b2:	f8db 2068 	ldr.w	r2, [fp, #104]	; 0x68
 800b7b6:	9201      	str	r2, [sp, #4]
 800b7b8:	4603      	mov	r3, r0
 800b7ba:	4632      	mov	r2, r6
 800b7bc:	4629      	mov	r1, r5
 800b7be:	4620      	mov	r0, r4
 800b7c0:	9700      	str	r7, [sp, #0]
 800b7c2:	f001 fd6b 	bl	800d29c <acc_confprogram_patch_offset>
 800b7c6:	f001 feb9 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800b7ca:	2772      	movs	r7, #114	; 0x72
 800b7cc:	f8db 206c 	ldr.w	r2, [fp, #108]	; 0x6c
 800b7d0:	9201      	str	r2, [sp, #4]
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	4632      	mov	r2, r6
 800b7d6:	4629      	mov	r1, r5
 800b7d8:	4620      	mov	r0, r4
 800b7da:	9700      	str	r7, [sp, #0]
 800b7dc:	f001 fd5e 	bl	800d29c <acc_confprogram_patch_offset>
 800b7e0:	f001 feac 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800b7e4:	2754      	movs	r7, #84	; 0x54
 800b7e6:	f8db 2070 	ldr.w	r2, [fp, #112]	; 0x70
 800b7ea:	9201      	str	r2, [sp, #4]
 800b7ec:	4603      	mov	r3, r0
 800b7ee:	4632      	mov	r2, r6
 800b7f0:	4629      	mov	r1, r5
 800b7f2:	4620      	mov	r0, r4
 800b7f4:	9700      	str	r7, [sp, #0]
 800b7f6:	f001 fd51 	bl	800d29c <acc_confprogram_patch_offset>
 800b7fa:	f001 fe9f 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800b7fe:	2739      	movs	r7, #57	; 0x39
 800b800:	f8db 2074 	ldr.w	r2, [fp, #116]	; 0x74
 800b804:	9201      	str	r2, [sp, #4]
 800b806:	4603      	mov	r3, r0
 800b808:	4632      	mov	r2, r6
 800b80a:	4629      	mov	r1, r5
 800b80c:	4620      	mov	r0, r4
 800b80e:	9700      	str	r7, [sp, #0]
 800b810:	f001 fd44 	bl	800d29c <acc_confprogram_patch_offset>
 800b814:	f8db 3074 	ldr.w	r3, [fp, #116]	; 0x74
 800b818:	2b00      	cmp	r3, #0
 800b81a:	f040 8239 	bne.w	800bc90 <acc_cpd_linear_sweep_load_program+0x904>
 800b81e:	f001 fe8d 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800b822:	f8db 2078 	ldr.w	r2, [fp, #120]	; 0x78
 800b826:	9201      	str	r2, [sp, #4]
 800b828:	2251      	movs	r2, #81	; 0x51
 800b82a:	4603      	mov	r3, r0
 800b82c:	4629      	mov	r1, r5
 800b82e:	9200      	str	r2, [sp, #0]
 800b830:	4620      	mov	r0, r4
 800b832:	4632      	mov	r2, r6
 800b834:	f001 fd32 	bl	800d29c <acc_confprogram_patch_offset>
 800b838:	f001 fe80 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800b83c:	f8db 207c 	ldr.w	r2, [fp, #124]	; 0x7c
 800b840:	9201      	str	r2, [sp, #4]
 800b842:	2277      	movs	r2, #119	; 0x77
 800b844:	4603      	mov	r3, r0
 800b846:	4629      	mov	r1, r5
 800b848:	9200      	str	r2, [sp, #0]
 800b84a:	4620      	mov	r0, r4
 800b84c:	4632      	mov	r2, r6
 800b84e:	f001 fd25 	bl	800d29c <acc_confprogram_patch_offset>
 800b852:	f001 fe73 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800b856:	f8db 2080 	ldr.w	r2, [fp, #128]	; 0x80
 800b85a:	9201      	str	r2, [sp, #4]
 800b85c:	2244      	movs	r2, #68	; 0x44
 800b85e:	4603      	mov	r3, r0
 800b860:	4629      	mov	r1, r5
 800b862:	9200      	str	r2, [sp, #0]
 800b864:	4620      	mov	r0, r4
 800b866:	4632      	mov	r2, r6
 800b868:	f001 fd18 	bl	800d29c <acc_confprogram_patch_offset>
 800b86c:	f001 fe66 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800b870:	f8db 2084 	ldr.w	r2, [fp, #132]	; 0x84
 800b874:	9201      	str	r2, [sp, #4]
 800b876:	2243      	movs	r2, #67	; 0x43
 800b878:	4603      	mov	r3, r0
 800b87a:	9200      	str	r2, [sp, #0]
 800b87c:	4629      	mov	r1, r5
 800b87e:	4632      	mov	r2, r6
 800b880:	4620      	mov	r0, r4
 800b882:	f001 fd0b 	bl	800d29c <acc_confprogram_patch_offset>
 800b886:	f8db 7088 	ldr.w	r7, [fp, #136]	; 0x88
 800b88a:	b2bb      	uxth	r3, r7
 800b88c:	2b08      	cmp	r3, #8
 800b88e:	f200 81e7 	bhi.w	800bc60 <acc_cpd_linear_sweep_load_program+0x8d4>
 800b892:	4698      	mov	r8, r3
 800b894:	2700      	movs	r7, #0
 800b896:	f001 fe51 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800b89a:	226c      	movs	r2, #108	; 0x6c
 800b89c:	4603      	mov	r3, r0
 800b89e:	e9cd 2800 	strd	r2, r8, [sp]
 800b8a2:	4629      	mov	r1, r5
 800b8a4:	4632      	mov	r2, r6
 800b8a6:	4620      	mov	r0, r4
 800b8a8:	f001 fcf8 	bl	800d29c <acc_confprogram_patch_offset>
 800b8ac:	f001 fe46 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800b8b0:	2259      	movs	r2, #89	; 0x59
 800b8b2:	4603      	mov	r3, r0
 800b8b4:	e9cd 2800 	strd	r2, r8, [sp]
 800b8b8:	4629      	mov	r1, r5
 800b8ba:	4632      	mov	r2, r6
 800b8bc:	4620      	mov	r0, r4
 800b8be:	f001 fced 	bl	800d29c <acc_confprogram_patch_offset>
 800b8c2:	f001 fe3b 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800b8c6:	216e      	movs	r1, #110	; 0x6e
 800b8c8:	f001 fdd2 	bl	800d470 <acc_confprogram_get_default_value>
 800b8cc:	900a      	str	r0, [sp, #40]	; 0x28
 800b8ce:	f001 fe35 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800b8d2:	2170      	movs	r1, #112	; 0x70
 800b8d4:	f001 fdcc 	bl	800d470 <acc_confprogram_get_default_value>
 800b8d8:	9003      	str	r0, [sp, #12]
 800b8da:	f001 fe2f 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800b8de:	216f      	movs	r1, #111	; 0x6f
 800b8e0:	f001 fdc6 	bl	800d470 <acc_confprogram_get_default_value>
 800b8e4:	9004      	str	r0, [sp, #16]
 800b8e6:	f001 fe29 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800b8ea:	215b      	movs	r1, #91	; 0x5b
 800b8ec:	f001 fdc0 	bl	800d470 <acc_confprogram_get_default_value>
 800b8f0:	4680      	mov	r8, r0
 800b8f2:	f001 fe23 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800b8f6:	215d      	movs	r1, #93	; 0x5d
 800b8f8:	f001 fdba 	bl	800d470 <acc_confprogram_get_default_value>
 800b8fc:	9005      	str	r0, [sp, #20]
 800b8fe:	f001 fe1d 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800b902:	215c      	movs	r1, #92	; 0x5c
 800b904:	f001 fdb4 	bl	800d470 <acc_confprogram_get_default_value>
 800b908:	9006      	str	r0, [sp, #24]
 800b90a:	f001 fe17 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800b90e:	214a      	movs	r1, #74	; 0x4a
 800b910:	f001 fdae 	bl	800d470 <acc_confprogram_get_default_value>
 800b914:	9007      	str	r0, [sp, #28]
 800b916:	f001 fe11 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800b91a:	2145      	movs	r1, #69	; 0x45
 800b91c:	f001 fda8 	bl	800d470 <acc_confprogram_get_default_value>
 800b920:	9008      	str	r0, [sp, #32]
 800b922:	f001 fe0b 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800b926:	2122      	movs	r1, #34	; 0x22
 800b928:	f001 fda2 	bl	800d470 <acc_confprogram_get_default_value>
 800b92c:	9009      	str	r0, [sp, #36]	; 0x24
 800b92e:	f001 fe05 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800b932:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b934:	216e      	movs	r1, #110	; 0x6e
 800b936:	433a      	orrs	r2, r7
 800b938:	4603      	mov	r3, r0
 800b93a:	9201      	str	r2, [sp, #4]
 800b93c:	9100      	str	r1, [sp, #0]
 800b93e:	4632      	mov	r2, r6
 800b940:	4629      	mov	r1, r5
 800b942:	4620      	mov	r0, r4
 800b944:	f001 fcaa 	bl	800d29c <acc_confprogram_patch_offset>
 800b948:	f001 fdf8 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800b94c:	9a03      	ldr	r2, [sp, #12]
 800b94e:	2170      	movs	r1, #112	; 0x70
 800b950:	433a      	orrs	r2, r7
 800b952:	4603      	mov	r3, r0
 800b954:	9201      	str	r2, [sp, #4]
 800b956:	9100      	str	r1, [sp, #0]
 800b958:	4632      	mov	r2, r6
 800b95a:	4629      	mov	r1, r5
 800b95c:	4620      	mov	r0, r4
 800b95e:	f001 fc9d 	bl	800d29c <acc_confprogram_patch_offset>
 800b962:	f001 fdeb 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800b966:	9a04      	ldr	r2, [sp, #16]
 800b968:	216f      	movs	r1, #111	; 0x6f
 800b96a:	433a      	orrs	r2, r7
 800b96c:	4603      	mov	r3, r0
 800b96e:	e9cd 1200 	strd	r1, r2, [sp]
 800b972:	4620      	mov	r0, r4
 800b974:	4632      	mov	r2, r6
 800b976:	4629      	mov	r1, r5
 800b978:	f001 fc90 	bl	800d29c <acc_confprogram_patch_offset>
 800b97c:	f001 fdde 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800b980:	ea48 0207 	orr.w	r2, r8, r7
 800b984:	215b      	movs	r1, #91	; 0x5b
 800b986:	4603      	mov	r3, r0
 800b988:	e9cd 1200 	strd	r1, r2, [sp]
 800b98c:	4620      	mov	r0, r4
 800b98e:	4632      	mov	r2, r6
 800b990:	4629      	mov	r1, r5
 800b992:	f001 fc83 	bl	800d29c <acc_confprogram_patch_offset>
 800b996:	f001 fdd1 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800b99a:	9a05      	ldr	r2, [sp, #20]
 800b99c:	215d      	movs	r1, #93	; 0x5d
 800b99e:	433a      	orrs	r2, r7
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	e9cd 1200 	strd	r1, r2, [sp]
 800b9a6:	4620      	mov	r0, r4
 800b9a8:	4632      	mov	r2, r6
 800b9aa:	4629      	mov	r1, r5
 800b9ac:	f001 fc76 	bl	800d29c <acc_confprogram_patch_offset>
 800b9b0:	f001 fdc4 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800b9b4:	9a06      	ldr	r2, [sp, #24]
 800b9b6:	215c      	movs	r1, #92	; 0x5c
 800b9b8:	433a      	orrs	r2, r7
 800b9ba:	4603      	mov	r3, r0
 800b9bc:	e9cd 1200 	strd	r1, r2, [sp]
 800b9c0:	4620      	mov	r0, r4
 800b9c2:	4632      	mov	r2, r6
 800b9c4:	4629      	mov	r1, r5
 800b9c6:	f001 fc69 	bl	800d29c <acc_confprogram_patch_offset>
 800b9ca:	f001 fdb7 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800b9ce:	9a07      	ldr	r2, [sp, #28]
 800b9d0:	214a      	movs	r1, #74	; 0x4a
 800b9d2:	433a      	orrs	r2, r7
 800b9d4:	4603      	mov	r3, r0
 800b9d6:	e9cd 1200 	strd	r1, r2, [sp]
 800b9da:	4620      	mov	r0, r4
 800b9dc:	4632      	mov	r2, r6
 800b9de:	4629      	mov	r1, r5
 800b9e0:	f001 fc5c 	bl	800d29c <acc_confprogram_patch_offset>
 800b9e4:	f001 fdaa 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800b9e8:	9a08      	ldr	r2, [sp, #32]
 800b9ea:	2145      	movs	r1, #69	; 0x45
 800b9ec:	433a      	orrs	r2, r7
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	e9cd 1200 	strd	r1, r2, [sp]
 800b9f4:	4620      	mov	r0, r4
 800b9f6:	4632      	mov	r2, r6
 800b9f8:	4629      	mov	r1, r5
 800b9fa:	f001 fc4f 	bl	800d29c <acc_confprogram_patch_offset>
 800b9fe:	f001 fd9d 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800ba02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba04:	433a      	orrs	r2, r7
 800ba06:	4617      	mov	r7, r2
 800ba08:	2222      	movs	r2, #34	; 0x22
 800ba0a:	4629      	mov	r1, r5
 800ba0c:	4603      	mov	r3, r0
 800ba0e:	e9cd 2700 	strd	r2, r7, [sp]
 800ba12:	4620      	mov	r0, r4
 800ba14:	4632      	mov	r2, r6
 800ba16:	f001 fc41 	bl	800d29c <acc_confprogram_patch_offset>
 800ba1a:	f001 fd8f 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800ba1e:	f8db 2090 	ldr.w	r2, [fp, #144]	; 0x90
 800ba22:	2a05      	cmp	r2, #5
 800ba24:	bf8c      	ite	hi
 800ba26:	2164      	movhi	r1, #100	; 0x64
 800ba28:	2144      	movls	r1, #68	; 0x44
 800ba2a:	2205      	movs	r2, #5
 800ba2c:	4603      	mov	r3, r0
 800ba2e:	e9cd 2100 	strd	r2, r1, [sp]
 800ba32:	4620      	mov	r0, r4
 800ba34:	4632      	mov	r2, r6
 800ba36:	4629      	mov	r1, r5
 800ba38:	f001 fc30 	bl	800d29c <acc_confprogram_patch_offset>
 800ba3c:	f001 fd7e 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800ba40:	f8db 2090 	ldr.w	r2, [fp, #144]	; 0x90
 800ba44:	0152      	lsls	r2, r2, #5
 800ba46:	3a03      	subs	r2, #3
 800ba48:	2124      	movs	r1, #36	; 0x24
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	e9cd 1200 	strd	r1, r2, [sp]
 800ba50:	4620      	mov	r0, r4
 800ba52:	4632      	mov	r2, r6
 800ba54:	4629      	mov	r1, r5
 800ba56:	f001 fc21 	bl	800d29c <acc_confprogram_patch_offset>
 800ba5a:	f001 fd6f 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800ba5e:	f8db 2090 	ldr.w	r2, [fp, #144]	; 0x90
 800ba62:	0152      	lsls	r2, r2, #5
 800ba64:	0852      	lsrs	r2, r2, #1
 800ba66:	3a03      	subs	r2, #3
 800ba68:	2125      	movs	r1, #37	; 0x25
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	e9cd 1200 	strd	r1, r2, [sp]
 800ba70:	4620      	mov	r0, r4
 800ba72:	4632      	mov	r2, r6
 800ba74:	4629      	mov	r1, r5
 800ba76:	f001 fc11 	bl	800d29c <acc_confprogram_patch_offset>
 800ba7a:	f001 fd5f 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800ba7e:	f8db 2094 	ldr.w	r2, [fp, #148]	; 0x94
 800ba82:	9201      	str	r2, [sp, #4]
 800ba84:	2236      	movs	r2, #54	; 0x36
 800ba86:	4603      	mov	r3, r0
 800ba88:	4629      	mov	r1, r5
 800ba8a:	9200      	str	r2, [sp, #0]
 800ba8c:	4620      	mov	r0, r4
 800ba8e:	4632      	mov	r2, r6
 800ba90:	f001 fc04 	bl	800d29c <acc_confprogram_patch_offset>
 800ba94:	f001 fd52 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800ba98:	f8db 2098 	ldr.w	r2, [fp, #152]	; 0x98
 800ba9c:	215e      	movs	r1, #94	; 0x5e
 800ba9e:	320e      	adds	r2, #14
 800baa0:	4603      	mov	r3, r0
 800baa2:	e9cd 1200 	strd	r1, r2, [sp]
 800baa6:	4620      	mov	r0, r4
 800baa8:	4632      	mov	r2, r6
 800baaa:	4629      	mov	r1, r5
 800baac:	f001 fbf6 	bl	800d29c <acc_confprogram_patch_offset>
 800bab0:	f001 fd44 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800bab4:	2120      	movs	r1, #32
 800bab6:	f001 fcdb 	bl	800d470 <acc_confprogram_get_default_value>
 800baba:	f8db 3090 	ldr.w	r3, [fp, #144]	; 0x90
 800babe:	2b05      	cmp	r3, #5
 800bac0:	bf98      	it	ls
 800bac2:	3002      	addls	r0, #2
 800bac4:	fbb0 f7f3 	udiv	r7, r0, r3
 800bac8:	fb03 0717 	mls	r7, r3, r7, r0
 800bacc:	b107      	cbz	r7, 800bad0 <acc_cpd_linear_sweep_load_program+0x744>
 800bace:	1bdf      	subs	r7, r3, r7
 800bad0:	f8db 309c 	ldr.w	r3, [fp, #156]	; 0x9c
 800bad4:	eb07 0803 	add.w	r8, r7, r3
 800bad8:	f001 fd30 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800badc:	221f      	movs	r2, #31
 800bade:	4603      	mov	r3, r0
 800bae0:	e9cd 2800 	strd	r2, r8, [sp]
 800bae4:	4629      	mov	r1, r5
 800bae6:	4632      	mov	r2, r6
 800bae8:	4620      	mov	r0, r4
 800baea:	f001 fbd7 	bl	800d29c <acc_confprogram_patch_offset>
 800baee:	f8db 309c 	ldr.w	r3, [fp, #156]	; 0x9c
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	f040 809a 	bne.w	800bc2c <acc_cpd_linear_sweep_load_program+0x8a0>
 800baf8:	f001 fd20 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800bafc:	213a      	movs	r1, #58	; 0x3a
 800bafe:	f001 fcb7 	bl	800d470 <acc_confprogram_get_default_value>
 800bb02:	f8db 3090 	ldr.w	r3, [fp, #144]	; 0x90
 800bb06:	2b05      	cmp	r3, #5
 800bb08:	bf8c      	ite	hi
 800bb0a:	3007      	addhi	r0, #7
 800bb0c:	3009      	addls	r0, #9
 800bb0e:	fbb0 f7f3 	udiv	r7, r0, r3
 800bb12:	fb03 0717 	mls	r7, r3, r7, r0
 800bb16:	b107      	cbz	r7, 800bb1a <acc_cpd_linear_sweep_load_program+0x78e>
 800bb18:	1bdf      	subs	r7, r3, r7
 800bb1a:	f8db 30a0 	ldr.w	r3, [fp, #160]	; 0xa0
 800bb1e:	eb07 0803 	add.w	r8, r7, r3
 800bb22:	f001 fd0b 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800bb26:	2266      	movs	r2, #102	; 0x66
 800bb28:	4603      	mov	r3, r0
 800bb2a:	e9cd 2800 	strd	r2, r8, [sp]
 800bb2e:	4629      	mov	r1, r5
 800bb30:	4632      	mov	r2, r6
 800bb32:	4620      	mov	r0, r4
 800bb34:	f001 fbb2 	bl	800d29c <acc_confprogram_patch_offset>
 800bb38:	f8db 30a0 	ldr.w	r3, [fp, #160]	; 0xa0
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d15c      	bne.n	800bbfa <acc_cpd_linear_sweep_load_program+0x86e>
 800bb40:	f89b 308d 	ldrb.w	r3, [fp, #141]	; 0x8d
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d141      	bne.n	800bbcc <acc_cpd_linear_sweep_load_program+0x840>
 800bb48:	f8db 70a4 	ldr.w	r7, [fp, #164]	; 0xa4
 800bb4c:	f001 fcf6 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800bb50:	1e79      	subs	r1, r7, #1
 800bb52:	2206      	movs	r2, #6
 800bb54:	4603      	mov	r3, r0
 800bb56:	e9cd 2100 	strd	r2, r1, [sp]
 800bb5a:	4620      	mov	r0, r4
 800bb5c:	4632      	mov	r2, r6
 800bb5e:	4629      	mov	r1, r5
 800bb60:	f001 fb9c 	bl	800d29c <acc_confprogram_patch_offset>
 800bb64:	f001 fcea 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800bb68:	2204      	movs	r2, #4
 800bb6a:	2163      	movs	r1, #99	; 0x63
 800bb6c:	fbb2 f7f7 	udiv	r7, r2, r7
 800bb70:	3f01      	subs	r7, #1
 800bb72:	4603      	mov	r3, r0
 800bb74:	e9cd 1700 	strd	r1, r7, [sp]
 800bb78:	4632      	mov	r2, r6
 800bb7a:	4629      	mov	r1, r5
 800bb7c:	4620      	mov	r0, r4
 800bb7e:	f001 fb8d 	bl	800d29c <acc_confprogram_patch_offset>
 800bb82:	f001 fcdb 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800bb86:	f8db 20a8 	ldr.w	r2, [fp, #168]	; 0xa8
 800bb8a:	9201      	str	r2, [sp, #4]
 800bb8c:	2261      	movs	r2, #97	; 0x61
 800bb8e:	4603      	mov	r3, r0
 800bb90:	4629      	mov	r1, r5
 800bb92:	9200      	str	r2, [sp, #0]
 800bb94:	4620      	mov	r0, r4
 800bb96:	4632      	mov	r2, r6
 800bb98:	f001 fb80 	bl	800d29c <acc_confprogram_patch_offset>
 800bb9c:	f001 fcce 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800bba0:	f89b 20ad 	ldrb.w	r2, [fp, #173]	; 0xad
 800bba4:	9201      	str	r2, [sp, #4]
 800bba6:	2246      	movs	r2, #70	; 0x46
 800bba8:	4603      	mov	r3, r0
 800bbaa:	9200      	str	r2, [sp, #0]
 800bbac:	4629      	mov	r1, r5
 800bbae:	4632      	mov	r2, r6
 800bbb0:	4620      	mov	r0, r4
 800bbb2:	f001 fb73 	bl	800d29c <acc_confprogram_patch_offset>
 800bbb6:	f89b 70ad 	ldrb.w	r7, [fp, #173]	; 0xad
 800bbba:	2f00      	cmp	r7, #0
 800bbbc:	f47f ac24 	bne.w	800b408 <acc_cpd_linear_sweep_load_program+0x7c>
 800bbc0:	f001 fcbc 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800bbc4:	2223      	movs	r2, #35	; 0x23
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	9701      	str	r7, [sp, #4]
 800bbca:	e447      	b.n	800b45c <acc_cpd_linear_sweep_load_program+0xd0>
 800bbcc:	f001 fcb6 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800bbd0:	223b      	movs	r2, #59	; 0x3b
 800bbd2:	2100      	movs	r1, #0
 800bbd4:	e9cd 2100 	strd	r2, r1, [sp]
 800bbd8:	4603      	mov	r3, r0
 800bbda:	4632      	mov	r2, r6
 800bbdc:	4629      	mov	r1, r5
 800bbde:	4620      	mov	r0, r4
 800bbe0:	f001 fb5c 	bl	800d29c <acc_confprogram_patch_offset>
 800bbe4:	f7fa fd64 	bl	80066b0 <acc_rss_integration_log_level>
 800bbe8:	2801      	cmp	r0, #1
 800bbea:	d9ad      	bls.n	800bb48 <acc_cpd_linear_sweep_load_program+0x7bc>
 800bbec:	4b7b      	ldr	r3, [pc, #492]	; (800bddc <acc_cpd_linear_sweep_load_program+0xa50>)
 800bbee:	4a7c      	ldr	r2, [pc, #496]	; (800bde0 <acc_cpd_linear_sweep_load_program+0xa54>)
 800bbf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbf2:	497c      	ldr	r1, [pc, #496]	; (800bde4 <acc_cpd_linear_sweep_load_program+0xa58>)
 800bbf4:	2002      	movs	r0, #2
 800bbf6:	4798      	blx	r3
 800bbf8:	e7a6      	b.n	800bb48 <acc_cpd_linear_sweep_load_program+0x7bc>
 800bbfa:	f7fa fd59 	bl	80066b0 <acc_rss_integration_log_level>
 800bbfe:	2801      	cmp	r0, #1
 800bc00:	d908      	bls.n	800bc14 <acc_cpd_linear_sweep_load_program+0x888>
 800bc02:	4b76      	ldr	r3, [pc, #472]	; (800bddc <acc_cpd_linear_sweep_load_program+0xa50>)
 800bc04:	4a78      	ldr	r2, [pc, #480]	; (800bde8 <acc_cpd_linear_sweep_load_program+0xa5c>)
 800bc06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc08:	9303      	str	r3, [sp, #12]
 800bc0a:	4976      	ldr	r1, [pc, #472]	; (800bde4 <acc_cpd_linear_sweep_load_program+0xa58>)
 800bc0c:	463b      	mov	r3, r7
 800bc0e:	2002      	movs	r0, #2
 800bc10:	9f03      	ldr	r7, [sp, #12]
 800bc12:	47b8      	blx	r7
 800bc14:	f7fa fd4c 	bl	80066b0 <acc_rss_integration_log_level>
 800bc18:	2801      	cmp	r0, #1
 800bc1a:	d991      	bls.n	800bb40 <acc_cpd_linear_sweep_load_program+0x7b4>
 800bc1c:	4b6f      	ldr	r3, [pc, #444]	; (800bddc <acc_cpd_linear_sweep_load_program+0xa50>)
 800bc1e:	4a73      	ldr	r2, [pc, #460]	; (800bdec <acc_cpd_linear_sweep_load_program+0xa60>)
 800bc20:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 800bc22:	4970      	ldr	r1, [pc, #448]	; (800bde4 <acc_cpd_linear_sweep_load_program+0xa58>)
 800bc24:	4643      	mov	r3, r8
 800bc26:	2002      	movs	r0, #2
 800bc28:	47b8      	blx	r7
 800bc2a:	e789      	b.n	800bb40 <acc_cpd_linear_sweep_load_program+0x7b4>
 800bc2c:	f7fa fd40 	bl	80066b0 <acc_rss_integration_log_level>
 800bc30:	2801      	cmp	r0, #1
 800bc32:	d908      	bls.n	800bc46 <acc_cpd_linear_sweep_load_program+0x8ba>
 800bc34:	4b69      	ldr	r3, [pc, #420]	; (800bddc <acc_cpd_linear_sweep_load_program+0xa50>)
 800bc36:	4a6e      	ldr	r2, [pc, #440]	; (800bdf0 <acc_cpd_linear_sweep_load_program+0xa64>)
 800bc38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc3a:	9303      	str	r3, [sp, #12]
 800bc3c:	4969      	ldr	r1, [pc, #420]	; (800bde4 <acc_cpd_linear_sweep_load_program+0xa58>)
 800bc3e:	463b      	mov	r3, r7
 800bc40:	2002      	movs	r0, #2
 800bc42:	9f03      	ldr	r7, [sp, #12]
 800bc44:	47b8      	blx	r7
 800bc46:	f7fa fd33 	bl	80066b0 <acc_rss_integration_log_level>
 800bc4a:	2801      	cmp	r0, #1
 800bc4c:	f67f af54 	bls.w	800baf8 <acc_cpd_linear_sweep_load_program+0x76c>
 800bc50:	4b62      	ldr	r3, [pc, #392]	; (800bddc <acc_cpd_linear_sweep_load_program+0xa50>)
 800bc52:	4a68      	ldr	r2, [pc, #416]	; (800bdf4 <acc_cpd_linear_sweep_load_program+0xa68>)
 800bc54:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 800bc56:	4963      	ldr	r1, [pc, #396]	; (800bde4 <acc_cpd_linear_sweep_load_program+0xa58>)
 800bc58:	4643      	mov	r3, r8
 800bc5a:	2002      	movs	r0, #2
 800bc5c:	47b8      	blx	r7
 800bc5e:	e74b      	b.n	800baf8 <acc_cpd_linear_sweep_load_program+0x76c>
 800bc60:	f001 fc6c 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800bc64:	fa1f f887 	uxth.w	r8, r7
 800bc68:	2267      	movs	r2, #103	; 0x67
 800bc6a:	2102      	movs	r1, #2
 800bc6c:	f1a8 0808 	sub.w	r8, r8, #8
 800bc70:	27ff      	movs	r7, #255	; 0xff
 800bc72:	e9cd 2100 	strd	r2, r1, [sp]
 800bc76:	4603      	mov	r3, r0
 800bc78:	fa07 f708 	lsl.w	r7, r7, r8
 800bc7c:	4632      	mov	r2, r6
 800bc7e:	4629      	mov	r1, r5
 800bc80:	4620      	mov	r0, r4
 800bc82:	f001 fb0b 	bl	800d29c <acc_confprogram_patch_offset>
 800bc86:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 800bc8a:	f04f 0808 	mov.w	r8, #8
 800bc8e:	e602      	b.n	800b896 <acc_cpd_linear_sweep_load_program+0x50a>
 800bc90:	f001 fc54 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800bc94:	2210      	movs	r2, #16
 800bc96:	2101      	movs	r1, #1
 800bc98:	e9cd 2100 	strd	r2, r1, [sp]
 800bc9c:	4603      	mov	r3, r0
 800bc9e:	4632      	mov	r2, r6
 800bca0:	4629      	mov	r1, r5
 800bca2:	4620      	mov	r0, r4
 800bca4:	f001 fafa 	bl	800d29c <acc_confprogram_patch_offset>
 800bca8:	f001 fc48 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800bcac:	f64f 7880 	movw	r8, #65408	; 0xff80
 800bcb0:	2212      	movs	r2, #18
 800bcb2:	4603      	mov	r3, r0
 800bcb4:	4629      	mov	r1, r5
 800bcb6:	e9cd 2800 	strd	r2, r8, [sp]
 800bcba:	4620      	mov	r0, r4
 800bcbc:	4632      	mov	r2, r6
 800bcbe:	f001 faed 	bl	800d29c <acc_confprogram_patch_offset>
 800bcc2:	f001 fc3b 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800bcc6:	2707      	movs	r7, #7
 800bcc8:	2214      	movs	r2, #20
 800bcca:	4603      	mov	r3, r0
 800bccc:	4629      	mov	r1, r5
 800bcce:	e9cd 2700 	strd	r2, r7, [sp]
 800bcd2:	4620      	mov	r0, r4
 800bcd4:	4632      	mov	r2, r6
 800bcd6:	f001 fae1 	bl	800d29c <acc_confprogram_patch_offset>
 800bcda:	f001 fc2f 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800bcde:	2211      	movs	r2, #17
 800bce0:	4603      	mov	r3, r0
 800bce2:	4629      	mov	r1, r5
 800bce4:	e9cd 2800 	strd	r2, r8, [sp]
 800bce8:	4620      	mov	r0, r4
 800bcea:	4632      	mov	r2, r6
 800bcec:	f001 fad6 	bl	800d29c <acc_confprogram_patch_offset>
 800bcf0:	f001 fc24 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800bcf4:	2213      	movs	r2, #19
 800bcf6:	2100      	movs	r1, #0
 800bcf8:	e9cd 2100 	strd	r2, r1, [sp]
 800bcfc:	4603      	mov	r3, r0
 800bcfe:	4632      	mov	r2, r6
 800bd00:	4629      	mov	r1, r5
 800bd02:	4620      	mov	r0, r4
 800bd04:	f001 faca 	bl	800d29c <acc_confprogram_patch_offset>
 800bd08:	f001 fc18 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800bd0c:	2215      	movs	r2, #21
 800bd0e:	f64f 71c0 	movw	r1, #65472	; 0xffc0
 800bd12:	e9cd 2100 	strd	r2, r1, [sp]
 800bd16:	4603      	mov	r3, r0
 800bd18:	4632      	mov	r2, r6
 800bd1a:	4629      	mov	r1, r5
 800bd1c:	4620      	mov	r0, r4
 800bd1e:	f001 fabd 	bl	800d29c <acc_confprogram_patch_offset>
 800bd22:	f001 fc0b 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800bd26:	2216      	movs	r2, #22
 800bd28:	4603      	mov	r3, r0
 800bd2a:	4629      	mov	r1, r5
 800bd2c:	e9cd 2700 	strd	r2, r7, [sp]
 800bd30:	4620      	mov	r0, r4
 800bd32:	4632      	mov	r2, r6
 800bd34:	f001 fab2 	bl	800d29c <acc_confprogram_patch_offset>
 800bd38:	f001 fc00 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800bd3c:	220e      	movs	r2, #14
 800bd3e:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 800bd42:	e9cd 2100 	strd	r2, r1, [sp]
 800bd46:	4603      	mov	r3, r0
 800bd48:	4632      	mov	r2, r6
 800bd4a:	4629      	mov	r1, r5
 800bd4c:	4620      	mov	r0, r4
 800bd4e:	f001 faa5 	bl	800d29c <acc_confprogram_patch_offset>
 800bd52:	f001 fbf3 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800bd56:	220f      	movs	r2, #15
 800bd58:	4603      	mov	r3, r0
 800bd5a:	4629      	mov	r1, r5
 800bd5c:	e9cd 2700 	strd	r2, r7, [sp]
 800bd60:	4620      	mov	r0, r4
 800bd62:	4632      	mov	r2, r6
 800bd64:	f001 fa9a 	bl	800d29c <acc_confprogram_patch_offset>
 800bd68:	f001 fbe8 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800bd6c:	2217      	movs	r2, #23
 800bd6e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800bd72:	e9cd 2100 	strd	r2, r1, [sp]
 800bd76:	4603      	mov	r3, r0
 800bd78:	4632      	mov	r2, r6
 800bd7a:	4629      	mov	r1, r5
 800bd7c:	4620      	mov	r0, r4
 800bd7e:	f001 fa8d 	bl	800d29c <acc_confprogram_patch_offset>
 800bd82:	f001 fbdb 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800bd86:	2218      	movs	r2, #24
 800bd88:	e9cd 2700 	strd	r2, r7, [sp]
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	4632      	mov	r2, r6
 800bd90:	4629      	mov	r1, r5
 800bd92:	4620      	mov	r0, r4
 800bd94:	f001 fa82 	bl	800d29c <acc_confprogram_patch_offset>
 800bd98:	e541      	b.n	800b81e <acc_cpd_linear_sweep_load_program+0x492>
 800bd9a:	f001 fbcf 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800bd9e:	2732      	movs	r7, #50	; 0x32
 800bda0:	f8db 20b8 	ldr.w	r2, [fp, #184]	; 0xb8
 800bda4:	9201      	str	r2, [sp, #4]
 800bda6:	4603      	mov	r3, r0
 800bda8:	4632      	mov	r2, r6
 800bdaa:	4629      	mov	r1, r5
 800bdac:	4620      	mov	r0, r4
 800bdae:	9700      	str	r7, [sp, #0]
 800bdb0:	f001 fa74 	bl	800d29c <acc_confprogram_patch_offset>
 800bdb4:	f7ff bb8c 	b.w	800b4d0 <acc_cpd_linear_sweep_load_program+0x144>
 800bdb8:	f7fa fc7a 	bl	80066b0 <acc_rss_integration_log_level>
 800bdbc:	2803      	cmp	r0, #3
 800bdbe:	f67f ab03 	bls.w	800b3c8 <acc_cpd_linear_sweep_load_program+0x3c>
 800bdc2:	4b06      	ldr	r3, [pc, #24]	; (800bddc <acc_cpd_linear_sweep_load_program+0xa50>)
 800bdc4:	4a0c      	ldr	r2, [pc, #48]	; (800bdf8 <acc_cpd_linear_sweep_load_program+0xa6c>)
 800bdc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdc8:	4906      	ldr	r1, [pc, #24]	; (800bde4 <acc_cpd_linear_sweep_load_program+0xa58>)
 800bdca:	2004      	movs	r0, #4
 800bdcc:	4798      	blx	r3
 800bdce:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800bdd0:	b00f      	add	sp, #60	; 0x3c
 800bdd2:	ecbd 8b04 	vpop	{d8-d9}
 800bdd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdda:	bf00      	nop
 800bddc:	20000640 	.word	0x20000640
 800bde0:	08014c74 	.word	0x08014c74
 800bde4:	08014ba0 	.word	0x08014ba0
 800bde8:	08014c24 	.word	0x08014c24
 800bdec:	08014c4c 	.word	0x08014c4c
 800bdf0:	08014bb4 	.word	0x08014bb4
 800bdf4:	08014bec 	.word	0x08014bec
 800bdf8:	08014c90 	.word	0x08014c90

0800bdfc <acc_cpd_linear_sweep_run_program>:
 800bdfc:	f240 213b 	movw	r1, #571	; 0x23b
 800be00:	f7fc baaa 	b.w	8008358 <acc_sensor_protocol_r2_run_program>

0800be04 <acc_cpd_linear_sweep_update_program>:
 800be04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be08:	784b      	ldrb	r3, [r1, #1]
 800be0a:	684f      	ldr	r7, [r1, #4]
 800be0c:	68ce      	ldr	r6, [r1, #12]
 800be0e:	b086      	sub	sp, #24
 800be10:	460c      	mov	r4, r1
 800be12:	4605      	mov	r5, r0
 800be14:	b943      	cbnz	r3, 800be28 <acc_cpd_linear_sweep_update_program+0x24>
 800be16:	7823      	ldrb	r3, [r4, #0]
 800be18:	b9eb      	cbnz	r3, 800be56 <acc_cpd_linear_sweep_update_program+0x52>
 800be1a:	78a3      	ldrb	r3, [r4, #2]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d12d      	bne.n	800be7c <acc_cpd_linear_sweep_update_program+0x78>
 800be20:	2001      	movs	r0, #1
 800be22:	b006      	add	sp, #24
 800be24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be28:	f8d1 8008 	ldr.w	r8, [r1, #8]
 800be2c:	f001 fb82 	bl	800d534 <acc_image_a111_r2c_sweep_get>
 800be30:	9005      	str	r0, [sp, #20]
 800be32:	f001 fb83 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800be36:	f108 020e 	add.w	r2, r8, #14
 800be3a:	4603      	mov	r3, r0
 800be3c:	9201      	str	r2, [sp, #4]
 800be3e:	4819      	ldr	r0, [pc, #100]	; (800bea4 <acc_cpd_linear_sweep_update_program+0xa0>)
 800be40:	9002      	str	r0, [sp, #8]
 800be42:	225e      	movs	r2, #94	; 0x5e
 800be44:	9200      	str	r2, [sp, #0]
 800be46:	9905      	ldr	r1, [sp, #20]
 800be48:	2200      	movs	r2, #0
 800be4a:	4628      	mov	r0, r5
 800be4c:	f001 fa9a 	bl	800d384 <acc_confprogram_live_patch>
 800be50:	7823      	ldrb	r3, [r4, #0]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d0e1      	beq.n	800be1a <acc_cpd_linear_sweep_update_program+0x16>
 800be56:	f001 fb6d 	bl	800d534 <acc_image_a111_r2c_sweep_get>
 800be5a:	9005      	str	r0, [sp, #20]
 800be5c:	f001 fb6e 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800be60:	2236      	movs	r2, #54	; 0x36
 800be62:	4603      	mov	r3, r0
 800be64:	480f      	ldr	r0, [pc, #60]	; (800bea4 <acc_cpd_linear_sweep_update_program+0xa0>)
 800be66:	9002      	str	r0, [sp, #8]
 800be68:	9200      	str	r2, [sp, #0]
 800be6a:	9905      	ldr	r1, [sp, #20]
 800be6c:	9701      	str	r7, [sp, #4]
 800be6e:	2200      	movs	r2, #0
 800be70:	4628      	mov	r0, r5
 800be72:	f001 fa87 	bl	800d384 <acc_confprogram_live_patch>
 800be76:	78a3      	ldrb	r3, [r4, #2]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d0d1      	beq.n	800be20 <acc_cpd_linear_sweep_update_program+0x1c>
 800be7c:	f001 fb5a 	bl	800d534 <acc_image_a111_r2c_sweep_get>
 800be80:	9005      	str	r0, [sp, #20]
 800be82:	f001 fb5b 	bl	800d53c <acc_image_a111_r2c_sweep_param_table_get>
 800be86:	4c07      	ldr	r4, [pc, #28]	; (800bea4 <acc_cpd_linear_sweep_update_program+0xa0>)
 800be88:	9905      	ldr	r1, [sp, #20]
 800be8a:	9601      	str	r6, [sp, #4]
 800be8c:	2272      	movs	r2, #114	; 0x72
 800be8e:	4603      	mov	r3, r0
 800be90:	9200      	str	r2, [sp, #0]
 800be92:	4628      	mov	r0, r5
 800be94:	9402      	str	r4, [sp, #8]
 800be96:	2200      	movs	r2, #0
 800be98:	f001 fa74 	bl	800d384 <acc_confprogram_live_patch>
 800be9c:	2001      	movs	r0, #1
 800be9e:	b006      	add	sp, #24
 800bea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bea4:	08007c55 	.word	0x08007c55

0800bea8 <acc_cpd_linear_sweep_get_info>:
 800bea8:	f890 30ad 	ldrb.w	r3, [r0, #173]	; 0xad
 800beac:	b16b      	cbz	r3, 800beca <acc_cpd_linear_sweep_get_info+0x22>
 800beae:	b410      	push	{r4}
 800beb0:	2203      	movs	r2, #3
 800beb2:	2401      	movs	r4, #1
 800beb4:	2300      	movs	r3, #0
 800beb6:	2002      	movs	r0, #2
 800beb8:	e9c1 4003 	strd	r4, r0, [r1, #12]
 800bebc:	e9c1 3301 	strd	r3, r3, [r1, #4]
 800bec0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bec4:	600a      	str	r2, [r1, #0]
 800bec6:	614a      	str	r2, [r1, #20]
 800bec8:	4770      	bx	lr
 800beca:	e9c1 3300 	strd	r3, r3, [r1]
 800bece:	e9c1 3302 	strd	r3, r3, [r1, #8]
 800bed2:	e9c1 3304 	strd	r3, r3, [r1, #16]
 800bed6:	4770      	bx	lr

0800bed8 <acc_cpd_linear_sweep_check>:
 800bed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bedc:	461e      	mov	r6, r3
 800bede:	2300      	movs	r3, #0
 800bee0:	7033      	strb	r3, [r6, #0]
 800bee2:	460c      	mov	r4, r1
 800bee4:	f891 10ad 	ldrb.w	r1, [r1, #173]	; 0xad
 800bee8:	b082      	sub	sp, #8
 800beea:	b911      	cbnz	r1, 800bef2 <acc_cpd_linear_sweep_check+0x1a>
 800beec:	b002      	add	sp, #8
 800beee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bef2:	6813      	ldr	r3, [r2, #0]
 800bef4:	005b      	lsls	r3, r3, #1
 800bef6:	f003 031f 	and.w	r3, r3, #31
 800befa:	6013      	str	r3, [r2, #0]
 800befc:	4607      	mov	r7, r0
 800befe:	4615      	mov	r5, r2
 800bf00:	f7fa fbd6 	bl	80066b0 <acc_rss_integration_log_level>
 800bf04:	2803      	cmp	r0, #3
 800bf06:	d907      	bls.n	800bf18 <acc_cpd_linear_sweep_check+0x40>
 800bf08:	4a16      	ldr	r2, [pc, #88]	; (800bf64 <acc_cpd_linear_sweep_check+0x8c>)
 800bf0a:	682b      	ldr	r3, [r5, #0]
 800bf0c:	f8d2 8034 	ldr.w	r8, [r2, #52]	; 0x34
 800bf10:	4915      	ldr	r1, [pc, #84]	; (800bf68 <acc_cpd_linear_sweep_check+0x90>)
 800bf12:	4a16      	ldr	r2, [pc, #88]	; (800bf6c <acc_cpd_linear_sweep_check+0x94>)
 800bf14:	2004      	movs	r0, #4
 800bf16:	47c0      	blx	r8
 800bf18:	f9b4 3026 	ldrsh.w	r3, [r4, #38]	; 0x26
 800bf1c:	f9b4 2024 	ldrsh.w	r2, [r4, #36]	; 0x24
 800bf20:	8c21      	ldrh	r1, [r4, #32]
 800bf22:	4638      	mov	r0, r7
 800bf24:	f000 f952 	bl	800c1cc <acc_cpd_sweep_check_voffset_vslope>
 800bf28:	b1b0      	cbz	r0, 800bf58 <acc_cpd_linear_sweep_check+0x80>
 800bf2a:	6828      	ldr	r0, [r5, #0]
 800bf2c:	f000 f9b4 	bl	800c298 <acc_cpd_sweep_check_count_bad_sweeps>
 800bf30:	2802      	cmp	r0, #2
 800bf32:	4604      	mov	r4, r0
 800bf34:	d9da      	bls.n	800beec <acc_cpd_linear_sweep_check+0x14>
 800bf36:	f7fa fbbb 	bl	80066b0 <acc_rss_integration_log_level>
 800bf3a:	b140      	cbz	r0, 800bf4e <acc_cpd_linear_sweep_check+0x76>
 800bf3c:	4b09      	ldr	r3, [pc, #36]	; (800bf64 <acc_cpd_linear_sweep_check+0x8c>)
 800bf3e:	4a0c      	ldr	r2, [pc, #48]	; (800bf70 <acc_cpd_linear_sweep_check+0x98>)
 800bf40:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 800bf42:	4909      	ldr	r1, [pc, #36]	; (800bf68 <acc_cpd_linear_sweep_check+0x90>)
 800bf44:	2005      	movs	r0, #5
 800bf46:	9000      	str	r0, [sp, #0]
 800bf48:	4623      	mov	r3, r4
 800bf4a:	2001      	movs	r0, #1
 800bf4c:	47a8      	blx	r5
 800bf4e:	2301      	movs	r3, #1
 800bf50:	7033      	strb	r3, [r6, #0]
 800bf52:	b002      	add	sp, #8
 800bf54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf58:	6828      	ldr	r0, [r5, #0]
 800bf5a:	f040 0001 	orr.w	r0, r0, #1
 800bf5e:	6028      	str	r0, [r5, #0]
 800bf60:	e7e4      	b.n	800bf2c <acc_cpd_linear_sweep_check+0x54>
 800bf62:	bf00      	nop
 800bf64:	20000640 	.word	0x20000640
 800bf68:	08014ba0 	.word	0x08014ba0
 800bf6c:	08014cb4 	.word	0x08014cb4
 800bf70:	08014ccc 	.word	0x08014ccc

0800bf74 <acc_cpd_rx_fine_dip_calibration>:
 800bf74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf78:	ed2d 8b02 	vpush	{d8}
 800bf7c:	f8d2 a000 	ldr.w	sl, [r2]
 800bf80:	b087      	sub	sp, #28
 800bf82:	4681      	mov	r9, r0
 800bf84:	ad05      	add	r5, sp, #20
 800bf86:	461e      	mov	r6, r3
 800bf88:	4614      	mov	r4, r2
 800bf8a:	468b      	mov	fp, r1
 800bf8c:	460a      	mov	r2, r1
 800bf8e:	9500      	str	r5, [sp, #0]
 800bf90:	4650      	mov	r0, sl
 800bf92:	2500      	movs	r5, #0
 800bf94:	4649      	mov	r1, r9
 800bf96:	ab04      	add	r3, sp, #16
 800bf98:	e9cd 6503 	strd	r6, r5, [sp, #12]
 800bf9c:	9505      	str	r5, [sp, #20]
 800bf9e:	f7fc f977 	bl	8008290 <acc_sensor_protocol_r2_prepare_load>
 800bfa2:	2800      	cmp	r0, #0
 800bfa4:	f000 80af 	beq.w	800c106 <acc_cpd_rx_fine_dip_calibration+0x192>
 800bfa8:	9b05      	ldr	r3, [sp, #20]
 800bfaa:	ee08 aa10 	vmov	s16, sl
 800bfae:	ee08 ba90 	vmov	s17, fp
 800bfb2:	46cb      	mov	fp, r9
 800bfb4:	f5c5 68d5 	rsb	r8, r5, #1704	; 0x6a8
 800bfb8:	f108 0806 	add.w	r8, r8, #6
 800bfbc:	4598      	cmp	r8, r3
 800bfbe:	bf28      	it	cs
 800bfc0:	4698      	movcs	r8, r3
 800bfc2:	9e04      	ldr	r6, [sp, #16]
 800bfc4:	f001 faae 	bl	800d524 <acc_image_a111_r2c_rx_fine_dip_calibration_get>
 800bfc8:	ea4f 0955 	mov.w	r9, r5, lsr #1
 800bfcc:	ea4f 0258 	mov.w	r2, r8, lsr #1
 800bfd0:	4631      	mov	r1, r6
 800bfd2:	eb00 0089 	add.w	r0, r0, r9, lsl #2
 800bfd6:	f001 fa4f 	bl	800d478 <acc_confprogram_copy>
 800bfda:	f001 faa7 	bl	800d52c <acc_image_a111_r2c_rx_fine_dip_calibration_param_table_get>
 800bfde:	6862      	ldr	r2, [r4, #4]
 800bfe0:	9201      	str	r2, [sp, #4]
 800bfe2:	b2af      	uxth	r7, r5
 800bfe4:	fa1f fa88 	uxth.w	sl, r8
 800bfe8:	221b      	movs	r2, #27
 800bfea:	4603      	mov	r3, r0
 800bfec:	4639      	mov	r1, r7
 800bfee:	9200      	str	r2, [sp, #0]
 800bff0:	4630      	mov	r0, r6
 800bff2:	4652      	mov	r2, sl
 800bff4:	f001 f952 	bl	800d29c <acc_confprogram_patch_offset>
 800bff8:	f001 fa98 	bl	800d52c <acc_image_a111_r2c_rx_fine_dip_calibration_param_table_get>
 800bffc:	68a2      	ldr	r2, [r4, #8]
 800bffe:	9201      	str	r2, [sp, #4]
 800c000:	2219      	movs	r2, #25
 800c002:	4603      	mov	r3, r0
 800c004:	4639      	mov	r1, r7
 800c006:	9200      	str	r2, [sp, #0]
 800c008:	4630      	mov	r0, r6
 800c00a:	4652      	mov	r2, sl
 800c00c:	f001 f946 	bl	800d29c <acc_confprogram_patch_offset>
 800c010:	f001 fa8c 	bl	800d52c <acc_image_a111_r2c_rx_fine_dip_calibration_param_table_get>
 800c014:	68e2      	ldr	r2, [r4, #12]
 800c016:	9201      	str	r2, [sp, #4]
 800c018:	f04f 0c1a 	mov.w	ip, #26
 800c01c:	4603      	mov	r3, r0
 800c01e:	4652      	mov	r2, sl
 800c020:	4639      	mov	r1, r7
 800c022:	f8cd c000 	str.w	ip, [sp]
 800c026:	4630      	mov	r0, r6
 800c028:	f001 f938 	bl	800d29c <acc_confprogram_patch_offset>
 800c02c:	f001 fa7e 	bl	800d52c <acc_image_a111_r2c_rx_fine_dip_calibration_param_table_get>
 800c030:	8a22      	ldrh	r2, [r4, #16]
 800c032:	9201      	str	r2, [sp, #4]
 800c034:	f04f 0c17 	mov.w	ip, #23
 800c038:	4603      	mov	r3, r0
 800c03a:	4652      	mov	r2, sl
 800c03c:	4639      	mov	r1, r7
 800c03e:	f8cd c000 	str.w	ip, [sp]
 800c042:	4630      	mov	r0, r6
 800c044:	f001 f92a 	bl	800d29c <acc_confprogram_patch_offset>
 800c048:	f001 fa70 	bl	800d52c <acc_image_a111_r2c_rx_fine_dip_calibration_param_table_get>
 800c04c:	69e2      	ldr	r2, [r4, #28]
 800c04e:	9201      	str	r2, [sp, #4]
 800c050:	f04f 0c0d 	mov.w	ip, #13
 800c054:	4603      	mov	r3, r0
 800c056:	4652      	mov	r2, sl
 800c058:	4639      	mov	r1, r7
 800c05a:	f8cd c000 	str.w	ip, [sp]
 800c05e:	4630      	mov	r0, r6
 800c060:	f001 f91c 	bl	800d29c <acc_confprogram_patch_offset>
 800c064:	f001 fa62 	bl	800d52c <acc_image_a111_r2c_rx_fine_dip_calibration_param_table_get>
 800c068:	6a22      	ldr	r2, [r4, #32]
 800c06a:	9201      	str	r2, [sp, #4]
 800c06c:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 800c070:	4603      	mov	r3, r0
 800c072:	4652      	mov	r2, sl
 800c074:	4639      	mov	r1, r7
 800c076:	f8cd c000 	str.w	ip, [sp]
 800c07a:	4630      	mov	r0, r6
 800c07c:	f001 f90e 	bl	800d29c <acc_confprogram_patch_offset>
 800c080:	f001 fa54 	bl	800d52c <acc_image_a111_r2c_rx_fine_dip_calibration_param_table_get>
 800c084:	69a2      	ldr	r2, [r4, #24]
 800c086:	9201      	str	r2, [sp, #4]
 800c088:	f04f 0c0f 	mov.w	ip, #15
 800c08c:	4603      	mov	r3, r0
 800c08e:	4652      	mov	r2, sl
 800c090:	4639      	mov	r1, r7
 800c092:	f8cd c000 	str.w	ip, [sp]
 800c096:	4630      	mov	r0, r6
 800c098:	f001 f900 	bl	800d29c <acc_confprogram_patch_offset>
 800c09c:	f001 fa46 	bl	800d52c <acc_image_a111_r2c_rx_fine_dip_calibration_param_table_get>
 800c0a0:	6962      	ldr	r2, [r4, #20]
 800c0a2:	9201      	str	r2, [sp, #4]
 800c0a4:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
 800c0a8:	4603      	mov	r3, r0
 800c0aa:	4652      	mov	r2, sl
 800c0ac:	4639      	mov	r1, r7
 800c0ae:	4630      	mov	r0, r6
 800c0b0:	f8cd c000 	str.w	ip, [sp]
 800c0b4:	f001 f8f2 	bl	800d29c <acc_confprogram_patch_offset>
 800c0b8:	4643      	mov	r3, r8
 800c0ba:	465a      	mov	r2, fp
 800c0bc:	6820      	ldr	r0, [r4, #0]
 800c0be:	fa1f f189 	uxth.w	r1, r9
 800c0c2:	f7fb fdf5 	bl	8007cb0 <acc_sensor_r2_load_confmem>
 800c0c6:	9b05      	ldr	r3, [sp, #20]
 800c0c8:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800c0cc:	441d      	add	r5, r3
 800c0ce:	4295      	cmp	r5, r2
 800c0d0:	f67f af70 	bls.w	800bfb4 <acc_cpd_rx_fine_dip_calibration+0x40>
 800c0d4:	ee18 0a10 	vmov	r0, s16
 800c0d8:	2119      	movs	r1, #25
 800c0da:	f7fc f93d 	bl	8008358 <acc_sensor_protocol_r2_run_program>
 800c0de:	ee18 aa10 	vmov	sl, s16
 800c0e2:	4606      	mov	r6, r0
 800c0e4:	b1d8      	cbz	r0, 800c11e <acc_cpd_rx_fine_dip_calibration+0x1aa>
 800c0e6:	ee18 0a10 	vmov	r0, s16
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	2208      	movs	r2, #8
 800c0ee:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800c0f2:	f7fc fab5 	bl	8008660 <acc_sensor_protocol_r2_wait_for_specific_event>
 800c0f6:	b9e8      	cbnz	r0, 800c134 <acc_cpd_rx_fine_dip_calibration+0x1c0>
 800c0f8:	2600      	movs	r6, #0
 800c0fa:	4630      	mov	r0, r6
 800c0fc:	b007      	add	sp, #28
 800c0fe:	ecbd 8b02 	vpop	{d8}
 800c102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c106:	4b2a      	ldr	r3, [pc, #168]	; (800c1b0 <acc_cpd_rx_fine_dip_calibration+0x23c>)
 800c108:	4a2a      	ldr	r2, [pc, #168]	; (800c1b4 <acc_cpd_rx_fine_dip_calibration+0x240>)
 800c10a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c10c:	492a      	ldr	r1, [pc, #168]	; (800c1b8 <acc_cpd_rx_fine_dip_calibration+0x244>)
 800c10e:	4606      	mov	r6, r0
 800c110:	4798      	blx	r3
 800c112:	4630      	mov	r0, r6
 800c114:	b007      	add	sp, #28
 800c116:	ecbd 8b02 	vpop	{d8}
 800c11a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c11e:	4b24      	ldr	r3, [pc, #144]	; (800c1b0 <acc_cpd_rx_fine_dip_calibration+0x23c>)
 800c120:	4a26      	ldr	r2, [pc, #152]	; (800c1bc <acc_cpd_rx_fine_dip_calibration+0x248>)
 800c122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c124:	4924      	ldr	r1, [pc, #144]	; (800c1b8 <acc_cpd_rx_fine_dip_calibration+0x244>)
 800c126:	4798      	blx	r3
 800c128:	4630      	mov	r0, r6
 800c12a:	b007      	add	sp, #28
 800c12c:	ecbd 8b02 	vpop	{d8}
 800c130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c134:	ee18 0a90 	vmov	r0, s17
 800c138:	2119      	movs	r1, #25
 800c13a:	f7fb fdf1 	bl	8007d20 <acc_sensor_r2_buffer_processed_verify_size>
 800c13e:	4606      	mov	r6, r0
 800c140:	b928      	cbnz	r0, 800c14e <acc_cpd_rx_fine_dip_calibration+0x1da>
 800c142:	4b1b      	ldr	r3, [pc, #108]	; (800c1b0 <acc_cpd_rx_fine_dip_calibration+0x23c>)
 800c144:	4a1e      	ldr	r2, [pc, #120]	; (800c1c0 <acc_cpd_rx_fine_dip_calibration+0x24c>)
 800c146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c148:	491b      	ldr	r1, [pc, #108]	; (800c1b8 <acc_cpd_rx_fine_dip_calibration+0x244>)
 800c14a:	4798      	blx	r3
 800c14c:	e7e1      	b.n	800c112 <acc_cpd_rx_fine_dip_calibration+0x19e>
 800c14e:	4659      	mov	r1, fp
 800c150:	2319      	movs	r3, #25
 800c152:	2200      	movs	r2, #0
 800c154:	ee18 0a10 	vmov	r0, s16
 800c158:	f7fb fdea 	bl	8007d30 <acc_sensor_r2_buffer_processed_read>
 800c15c:	2319      	movs	r3, #25
 800c15e:	4604      	mov	r4, r0
 800c160:	4602      	mov	r2, r0
 800c162:	ee18 1a10 	vmov	r1, s16
 800c166:	200a      	movs	r0, #10
 800c168:	f7fc fdae 	bl	8008cc8 <acc_probes_execute_uint16>
 800c16c:	9b03      	ldr	r3, [sp, #12]
 800c16e:	4620      	mov	r0, r4
 800c170:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800c174:	6804      	ldr	r4, [r0, #0]
 800c176:	6841      	ldr	r1, [r0, #4]
 800c178:	6882      	ldr	r2, [r0, #8]
 800c17a:	68c5      	ldr	r5, [r0, #12]
 800c17c:	60dd      	str	r5, [r3, #12]
 800c17e:	3010      	adds	r0, #16
 800c180:	42b0      	cmp	r0, r6
 800c182:	601c      	str	r4, [r3, #0]
 800c184:	6059      	str	r1, [r3, #4]
 800c186:	609a      	str	r2, [r3, #8]
 800c188:	f103 0310 	add.w	r3, r3, #16
 800c18c:	d1f2      	bne.n	800c174 <acc_cpd_rx_fine_dip_calibration+0x200>
 800c18e:	8802      	ldrh	r2, [r0, #0]
 800c190:	801a      	strh	r2, [r3, #0]
 800c192:	4650      	mov	r0, sl
 800c194:	f7fc f96c 	bl	8008470 <acc_sensor_protocol_r2_ack_event>
 800c198:	4606      	mov	r6, r0
 800c19a:	2800      	cmp	r0, #0
 800c19c:	d0ac      	beq.n	800c0f8 <acc_cpd_rx_fine_dip_calibration+0x184>
 800c19e:	4909      	ldr	r1, [pc, #36]	; (800c1c4 <acc_cpd_rx_fine_dip_calibration+0x250>)
 800c1a0:	4809      	ldr	r0, [pc, #36]	; (800c1c8 <acc_cpd_rx_fine_dip_calibration+0x254>)
 800c1a2:	f001 f98f 	bl	800d4c4 <acc_diagnostic_log_array>
 800c1a6:	9803      	ldr	r0, [sp, #12]
 800c1a8:	2119      	movs	r1, #25
 800c1aa:	f001 f99b 	bl	800d4e4 <acc_diagnostic_log_data_u16>
 800c1ae:	e7b0      	b.n	800c112 <acc_cpd_rx_fine_dip_calibration+0x19e>
 800c1b0:	20000640 	.word	0x20000640
 800c1b4:	08014d08 	.word	0x08014d08
 800c1b8:	08014d30 	.word	0x08014d30
 800c1bc:	08014d4c 	.word	0x08014d4c
 800c1c0:	080143dc 	.word	0x080143dc
 800c1c4:	08014574 	.word	0x08014574
 800c1c8:	08014d80 	.word	0x08014d80

0800c1cc <acc_cpd_sweep_check_voffset_vslope>:
 800c1cc:	8802      	ldrh	r2, [r0, #0]
 800c1ce:	eddf 4a2e 	vldr	s9, [pc, #184]	; 800c288 <acc_cpd_sweep_check_voffset_vslope+0xbc>
 800c1d2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800c28c <acc_cpd_sweep_check_voffset_vslope+0xc0>
 800c1d6:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 800c290 <acc_cpd_sweep_check_voffset_vslope+0xc4>
 800c1da:	ee07 2a90 	vmov	s15, r2
 800c1de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1e2:	b410      	push	{r4}
 800c1e4:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800c1e8:	4c2a      	ldr	r4, [pc, #168]	; (800c294 <acc_cpd_sweep_check_voffset_vslope+0xc8>)
 800c1ea:	8842      	ldrh	r2, [r0, #2]
 800c1ec:	f934 1011 	ldrsh.w	r1, [r4, r1, lsl #1]
 800c1f0:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 800c1f4:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800c1f8:	ee07 1a10 	vmov	s14, r1
 800c1fc:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800c200:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c204:	ee67 7a86 	vmul.f32	s15, s15, s12
 800c208:	b083      	sub	sp, #12
 800c20a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c20e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c212:	edcd 7a01 	vstr	s15, [sp, #4]
 800c216:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 800c21a:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 800c21e:	f2a0 24ee 	subw	r4, r0, #750	; 0x2ee
 800c222:	f5b4 7f06 	cmp.w	r4, #536	; 0x218
 800c226:	d224      	bcs.n	800c272 <acc_cpd_sweep_check_voffset_vslope+0xa6>
 800c228:	f5a0 7043 	sub.w	r0, r0, #780	; 0x30c
 800c22c:	f5b0 7fe6 	cmp.w	r0, #460	; 0x1cc
 800c230:	d924      	bls.n	800c27c <acc_cpd_sweep_check_voffset_vslope+0xb0>
 800c232:	ee07 2a90 	vmov	s15, r2
 800c236:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c23a:	ee07 1a90 	vmov	s15, r1
 800c23e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800c242:	ee67 7a24 	vmul.f32	s15, s14, s9
 800c246:	3364      	adds	r3, #100	; 0x64
 800c248:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800c24c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800c250:	ee67 7a86 	vmul.f32	s15, s15, s12
 800c254:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c258:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c25c:	ee17 2a90 	vmov	r2, s15
 800c260:	b210      	sxth	r0, r2
 800c262:	4298      	cmp	r0, r3
 800c264:	bfcc      	ite	gt
 800c266:	2000      	movgt	r0, #0
 800c268:	2001      	movle	r0, #1
 800c26a:	b003      	add	sp, #12
 800c26c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c270:	4770      	bx	lr
 800c272:	2000      	movs	r0, #0
 800c274:	b003      	add	sp, #12
 800c276:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c27a:	4770      	bx	lr
 800c27c:	2001      	movs	r0, #1
 800c27e:	b003      	add	sp, #12
 800c280:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c284:	4770      	bx	lr
 800c286:	bf00      	nop
 800c288:	37800000 	.word	0x37800000
 800c28c:	3f99999a 	.word	0x3f99999a
 800c290:	447a0000 	.word	0x447a0000
 800c294:	080185dc 	.word	0x080185dc

0800c298 <acc_cpd_sweep_check_count_bad_sweeps>:
 800c298:	b138      	cbz	r0, 800c2aa <acc_cpd_sweep_check_count_bad_sweeps+0x12>
 800c29a:	2200      	movs	r2, #0
 800c29c:	1e43      	subs	r3, r0, #1
 800c29e:	4018      	ands	r0, r3
 800c2a0:	f102 0201 	add.w	r2, r2, #1
 800c2a4:	d1fa      	bne.n	800c29c <acc_cpd_sweep_check_count_bad_sweeps+0x4>
 800c2a6:	4610      	mov	r0, r2
 800c2a8:	4770      	bx	lr
 800c2aa:	4602      	mov	r2, r0
 800c2ac:	4610      	mov	r0, r2
 800c2ae:	4770      	bx	lr

0800c2b0 <acc_radar_engine_check_asic_id>:
 800c2b0:	6800      	ldr	r0, [r0, #0]
 800c2b2:	2100      	movs	r1, #0
 800c2b4:	f7fc bac6 	b.w	8008844 <acc_sensor_protocol_r2_check_asic_id>

0800c2b8 <acc_radar_engine_wait_for_radar_data>:
 800c2b8:	6800      	ldr	r0, [r0, #0]
 800c2ba:	f7fc ba31 	b.w	8008720 <acc_sensor_protocol_r2_wait_for_radar_data>
 800c2be:	bf00      	nop

0800c2c0 <acc_radar_engine_measure>:
 800c2c0:	6800      	ldr	r0, [r0, #0]
 800c2c2:	f7fc b8d5 	b.w	8008470 <acc_sensor_protocol_r2_ack_event>
 800c2c6:	bf00      	nop

0800c2c8 <acc_radar_engine_wait_for_hibernate_ready>:
 800c2c8:	6800      	ldr	r0, [r0, #0]
 800c2ca:	f7fc b9f3 	b.w	80086b4 <acc_sensor_protocol_r2_wait_for_hibernate_ready>
 800c2ce:	bf00      	nop

0800c2d0 <acc_radar_engine_acquire_adc_data>:
 800c2d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2d4:	ed2d 8b02 	vpush	{d8}
 800c2d8:	2600      	movs	r6, #0
 800c2da:	6016      	str	r6, [r2, #0]
 800c2dc:	f8b0 a00c 	ldrh.w	sl, [r0, #12]
 800c2e0:	ed9f 8a45 	vldr	s16, [pc, #276]	; 800c3f8 <acc_radar_engine_acquire_adc_data+0x128>
 800c2e4:	7bc3      	ldrb	r3, [r0, #15]
 800c2e6:	f890 800e 	ldrb.w	r8, [r0, #14]
 800c2ea:	f8d0 b010 	ldr.w	fp, [r0, #16]
 800c2ee:	7316      	strb	r6, [r2, #12]
 800c2f0:	b089      	sub	sp, #36	; 0x24
 800c2f2:	460f      	mov	r7, r1
 800c2f4:	7116      	strb	r6, [r2, #4]
 800c2f6:	f88d 600e 	strb.w	r6, [sp, #14]
 800c2fa:	f88d 600f 	strb.w	r6, [sp, #15]
 800c2fe:	9301      	str	r3, [sp, #4]
 800c300:	ed82 8a02 	vstr	s16, [r2, #8]
 800c304:	f1ba 0f00 	cmp.w	sl, #0
 800c308:	d05b      	beq.n	800c3c2 <acc_radar_engine_acquire_adc_data+0xf2>
 800c30a:	4647      	mov	r7, r8
 800c30c:	4614      	mov	r4, r2
 800c30e:	4605      	mov	r5, r0
 800c310:	4688      	mov	r8, r1
 800c312:	b927      	cbnz	r7, 800c31e <acc_radar_engine_acquire_adc_data+0x4e>
 800c314:	6828      	ldr	r0, [r5, #0]
 800c316:	f7fc f8ab 	bl	8008470 <acc_sensor_protocol_r2_ack_event>
 800c31a:	2800      	cmp	r0, #0
 800c31c:	d05e      	beq.n	800c3dc <acc_radar_engine_acquire_adc_data+0x10c>
 800c31e:	6828      	ldr	r0, [r5, #0]
 800c320:	f10d 020e 	add.w	r2, sp, #14
 800c324:	4659      	mov	r1, fp
 800c326:	f7fc f9fb 	bl	8008720 <acc_sensor_protocol_r2_wait_for_radar_data>
 800c32a:	2800      	cmp	r0, #0
 800c32c:	d056      	beq.n	800c3dc <acc_radar_engine_acquire_adc_data+0x10c>
 800c32e:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800c332:	b903      	cbnz	r3, 800c336 <acc_radar_engine_acquire_adc_data+0x66>
 800c334:	78a3      	ldrb	r3, [r4, #2]
 800c336:	69aa      	ldr	r2, [r5, #24]
 800c338:	70a3      	strb	r3, [r4, #2]
 800c33a:	4641      	mov	r1, r8
 800c33c:	6953      	ldr	r3, [r2, #20]
 800c33e:	4628      	mov	r0, r5
 800c340:	f10d 020f 	add.w	r2, sp, #15
 800c344:	4798      	blx	r3
 800c346:	69aa      	ldr	r2, [r5, #24]
 800c348:	9004      	str	r0, [sp, #16]
 800c34a:	2300      	movs	r3, #0
 800c34c:	f8d2 9018 	ldr.w	r9, [r2, #24]
 800c350:	f88d 3014 	strb.w	r3, [sp, #20]
 800c354:	f88d 301c 	strb.w	r3, [sp, #28]
 800c358:	ed8d 8a06 	vstr	s16, [sp, #24]
 800c35c:	ab05      	add	r3, sp, #20
 800c35e:	aa04      	add	r2, sp, #16
 800c360:	4641      	mov	r1, r8
 800c362:	4628      	mov	r0, r5
 800c364:	47c8      	blx	r9
 800c366:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800c36a:	b903      	cbnz	r3, 800c36e <acc_radar_engine_acquire_adc_data+0x9e>
 800c36c:	7b23      	ldrb	r3, [r4, #12]
 800c36e:	f89d 9014 	ldrb.w	r9, [sp, #20]
 800c372:	7323      	strb	r3, [r4, #12]
 800c374:	f1b9 0f00 	cmp.w	r9, #0
 800c378:	d129      	bne.n	800c3ce <acc_radar_engine_acquire_adc_data+0xfe>
 800c37a:	7923      	ldrb	r3, [r4, #4]
 800c37c:	edd4 0a02 	vldr	s1, [r4, #8]
 800c380:	ed9d 0a06 	vldr	s0, [sp, #24]
 800c384:	7123      	strb	r3, [r4, #4]
 800c386:	f004 fb59 	bl	8010a3c <fmaxf>
 800c38a:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800c38e:	ed84 0a02 	vstr	s0, [r4, #8]
 800c392:	b902      	cbnz	r2, 800c396 <acc_radar_engine_acquire_adc_data+0xc6>
 800c394:	78e2      	ldrb	r2, [r4, #3]
 800c396:	8821      	ldrh	r1, [r4, #0]
 800c398:	9b04      	ldr	r3, [sp, #16]
 800c39a:	70e2      	strb	r2, [r4, #3]
 800c39c:	69aa      	ldr	r2, [r5, #24]
 800c39e:	440b      	add	r3, r1
 800c3a0:	8023      	strh	r3, [r4, #0]
 800c3a2:	4649      	mov	r1, r9
 800c3a4:	69d3      	ldr	r3, [r2, #28]
 800c3a6:	4628      	mov	r0, r5
 800c3a8:	4798      	blx	r3
 800c3aa:	9b01      	ldr	r3, [sp, #4]
 800c3ac:	b11b      	cbz	r3, 800c3b6 <acc_radar_engine_acquire_adc_data+0xe6>
 800c3ae:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c3b2:	42b3      	cmp	r3, r6
 800c3b4:	d018      	beq.n	800c3e8 <acc_radar_engine_acquire_adc_data+0x118>
 800c3b6:	b967      	cbnz	r7, 800c3d2 <acc_radar_engine_acquire_adc_data+0x102>
 800c3b8:	3601      	adds	r6, #1
 800c3ba:	b2b3      	uxth	r3, r6
 800c3bc:	4553      	cmp	r3, sl
 800c3be:	d3a8      	bcc.n	800c312 <acc_radar_engine_acquire_adc_data+0x42>
 800c3c0:	4647      	mov	r7, r8
 800c3c2:	6838      	ldr	r0, [r7, #0]
 800c3c4:	b009      	add	sp, #36	; 0x24
 800c3c6:	ecbd 8b02 	vpop	{d8}
 800c3ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3ce:	464b      	mov	r3, r9
 800c3d0:	e7d4      	b.n	800c37c <acc_radar_engine_acquire_adc_data+0xac>
 800c3d2:	6828      	ldr	r0, [r5, #0]
 800c3d4:	f7fc f84c 	bl	8008470 <acc_sensor_protocol_r2_ack_event>
 800c3d8:	2800      	cmp	r0, #0
 800c3da:	d1ed      	bne.n	800c3b8 <acc_radar_engine_acquire_adc_data+0xe8>
 800c3dc:	2000      	movs	r0, #0
 800c3de:	b009      	add	sp, #36	; 0x24
 800c3e0:	ecbd 8b02 	vpop	{d8}
 800c3e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3e8:	f8d8 0000 	ldr.w	r0, [r8]
 800c3ec:	b009      	add	sp, #36	; 0x24
 800c3ee:	ecbd 8b02 	vpop	{d8}
 800c3f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3f6:	bf00      	nop
 800c3f8:	ff800000 	.word	0xff800000

0800c3fc <acc_sensor_diagnostics_r2_sensor_status>:
 800c3fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c400:	b094      	sub	sp, #80	; 0x50
 800c402:	4604      	mov	r4, r0
 800c404:	f7fa f954 	bl	80066b0 <acc_rss_integration_log_level>
 800c408:	2801      	cmp	r0, #1
 800c40a:	d905      	bls.n	800c418 <acc_sensor_diagnostics_r2_sensor_status+0x1c>
 800c40c:	4b9c      	ldr	r3, [pc, #624]	; (800c680 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800c40e:	4a9d      	ldr	r2, [pc, #628]	; (800c684 <acc_sensor_diagnostics_r2_sensor_status+0x288>)
 800c410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c412:	499d      	ldr	r1, [pc, #628]	; (800c688 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800c414:	2002      	movs	r0, #2
 800c416:	4798      	blx	r3
 800c418:	2201      	movs	r2, #1
 800c41a:	21b2      	movs	r1, #178	; 0xb2
 800c41c:	4620      	mov	r0, r4
 800c41e:	f7fc fcaf 	bl	8008d80 <acc_sensor_reg_write>
 800c422:	2300      	movs	r3, #0
 800c424:	f8df a258 	ldr.w	sl, [pc, #600]	; 800c680 <acc_sensor_diagnostics_r2_sensor_status+0x284>
 800c428:	f8df 9288 	ldr.w	r9, [pc, #648]	; 800c6b4 <acc_sensor_diagnostics_r2_sensor_status+0x2b8>
 800c42c:	4f96      	ldr	r7, [pc, #600]	; (800c688 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800c42e:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 800c432:	2564      	movs	r5, #100	; 0x64
 800c434:	e013      	b.n	800c45e <acc_sensor_diagnostics_r2_sensor_status+0x62>
 800c436:	f7fa f93b 	bl	80066b0 <acc_rss_integration_log_level>
 800c43a:	2801      	cmp	r0, #1
 800c43c:	4623      	mov	r3, r4
 800c43e:	464a      	mov	r2, r9
 800c440:	4639      	mov	r1, r7
 800c442:	f04f 0002 	mov.w	r0, #2
 800c446:	d907      	bls.n	800c458 <acc_sensor_diagnostics_r2_sensor_status+0x5c>
 800c448:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
 800c44c:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800c450:	9600      	str	r6, [sp, #0]
 800c452:	f8da 6034 	ldr.w	r6, [sl, #52]	; 0x34
 800c456:	47b0      	blx	r6
 800c458:	3d01      	subs	r5, #1
 800c45a:	b2ad      	uxth	r5, r5
 800c45c:	b1c5      	cbz	r5, 800c490 <acc_sensor_diagnostics_r2_sensor_status+0x94>
 800c45e:	aa0c      	add	r2, sp, #48	; 0x30
 800c460:	2111      	movs	r1, #17
 800c462:	4620      	mov	r0, r4
 800c464:	f7fc fc76 	bl	8008d54 <acc_sensor_reg_read>
 800c468:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800c46c:	055b      	lsls	r3, r3, #21
 800c46e:	d4e2      	bmi.n	800c436 <acc_sensor_diagnostics_r2_sensor_status+0x3a>
 800c470:	f7fa f91e 	bl	80066b0 <acc_rss_integration_log_level>
 800c474:	2801      	cmp	r0, #1
 800c476:	d90b      	bls.n	800c490 <acc_sensor_diagnostics_r2_sensor_status+0x94>
 800c478:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800c47c:	4980      	ldr	r1, [pc, #512]	; (800c680 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800c47e:	4a83      	ldr	r2, [pc, #524]	; (800c68c <acc_sensor_diagnostics_r2_sensor_status+0x290>)
 800c480:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800c482:	4981      	ldr	r1, [pc, #516]	; (800c688 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800c484:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c488:	9300      	str	r3, [sp, #0]
 800c48a:	2002      	movs	r0, #2
 800c48c:	4623      	mov	r3, r4
 800c48e:	47a8      	blx	r5
 800c490:	2600      	movs	r6, #0
 800c492:	4631      	mov	r1, r6
 800c494:	aa09      	add	r2, sp, #36	; 0x24
 800c496:	4620      	mov	r0, r4
 800c498:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 800c49c:	4d7c      	ldr	r5, [pc, #496]	; (800c690 <acc_sensor_diagnostics_r2_sensor_status+0x294>)
 800c49e:	f7fc fc59 	bl	8008d54 <acc_sensor_reg_read>
 800c4a2:	f10d 0226 	add.w	r2, sp, #38	; 0x26
 800c4a6:	212a      	movs	r1, #42	; 0x2a
 800c4a8:	4620      	mov	r0, r4
 800c4aa:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 800c4ae:	f7fc fc51 	bl	8008d54 <acc_sensor_reg_read>
 800c4b2:	2128      	movs	r1, #40	; 0x28
 800c4b4:	aa0a      	add	r2, sp, #40	; 0x28
 800c4b6:	4620      	mov	r0, r4
 800c4b8:	f8ad 6028 	strh.w	r6, [sp, #40]	; 0x28
 800c4bc:	f105 071e 	add.w	r7, r5, #30
 800c4c0:	f7fc fc48 	bl	8008d54 <acc_sensor_reg_read>
 800c4c4:	ae0c      	add	r6, sp, #48	; 0x30
 800c4c6:	2163      	movs	r1, #99	; 0x63
 800c4c8:	e001      	b.n	800c4ce <acc_sensor_diagnostics_r2_sensor_status+0xd2>
 800c4ca:	f835 1f02 	ldrh.w	r1, [r5, #2]!
 800c4ce:	4632      	mov	r2, r6
 800c4d0:	4620      	mov	r0, r4
 800c4d2:	f7fc fc3f 	bl	8008d54 <acc_sensor_reg_read>
 800c4d6:	42af      	cmp	r7, r5
 800c4d8:	f106 0602 	add.w	r6, r6, #2
 800c4dc:	d1f5      	bne.n	800c4ca <acc_sensor_diagnostics_r2_sensor_status+0xce>
 800c4de:	f7fa f8e7 	bl	80066b0 <acc_rss_integration_log_level>
 800c4e2:	2801      	cmp	r0, #1
 800c4e4:	d91e      	bls.n	800c524 <acc_sensor_diagnostics_r2_sensor_status+0x128>
 800c4e6:	4d66      	ldr	r5, [pc, #408]	; (800c680 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800c4e8:	f8bd 103e 	ldrh.w	r1, [sp, #62]	; 0x3e
 800c4ec:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 800c4f0:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 800c4f2:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 800c4f6:	f8bd 0036 	ldrh.w	r0, [sp, #54]	; 0x36
 800c4fa:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 800c4fe:	9107      	str	r1, [sp, #28]
 800c500:	9206      	str	r2, [sp, #24]
 800c502:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 800c506:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 800c50a:	9305      	str	r3, [sp, #20]
 800c50c:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800c510:	9300      	str	r3, [sp, #0]
 800c512:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800c516:	e9cd 0603 	strd	r0, r6, [sp, #12]
 800c51a:	4a5e      	ldr	r2, [pc, #376]	; (800c694 <acc_sensor_diagnostics_r2_sensor_status+0x298>)
 800c51c:	495a      	ldr	r1, [pc, #360]	; (800c688 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800c51e:	4623      	mov	r3, r4
 800c520:	2002      	movs	r0, #2
 800c522:	47a8      	blx	r5
 800c524:	f7fa f8c4 	bl	80066b0 <acc_rss_integration_log_level>
 800c528:	2801      	cmp	r0, #1
 800c52a:	d91e      	bls.n	800c56a <acc_sensor_diagnostics_r2_sensor_status+0x16e>
 800c52c:	4d54      	ldr	r5, [pc, #336]	; (800c680 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800c52e:	f8bd 104e 	ldrh.w	r1, [sp, #78]	; 0x4e
 800c532:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 800c536:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 800c538:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
 800c53c:	f8bd 0046 	ldrh.w	r0, [sp, #70]	; 0x46
 800c540:	f8bd 6048 	ldrh.w	r6, [sp, #72]	; 0x48
 800c544:	9107      	str	r1, [sp, #28]
 800c546:	9206      	str	r2, [sp, #24]
 800c548:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
 800c54c:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 800c550:	9305      	str	r3, [sp, #20]
 800c552:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800c556:	9300      	str	r3, [sp, #0]
 800c558:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800c55c:	e9cd 0603 	strd	r0, r6, [sp, #12]
 800c560:	4a4d      	ldr	r2, [pc, #308]	; (800c698 <acc_sensor_diagnostics_r2_sensor_status+0x29c>)
 800c562:	4949      	ldr	r1, [pc, #292]	; (800c688 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800c564:	4623      	mov	r3, r4
 800c566:	2002      	movs	r0, #2
 800c568:	47a8      	blx	r5
 800c56a:	aa0c      	add	r2, sp, #48	; 0x30
 800c56c:	2168      	movs	r1, #104	; 0x68
 800c56e:	4620      	mov	r0, r4
 800c570:	f7fc fbf0 	bl	8008d54 <acc_sensor_reg_read>
 800c574:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 800c578:	2167      	movs	r1, #103	; 0x67
 800c57a:	4620      	mov	r0, r4
 800c57c:	f7fc fbea 	bl	8008d54 <acc_sensor_reg_read>
 800c580:	aa0d      	add	r2, sp, #52	; 0x34
 800c582:	2166      	movs	r1, #102	; 0x66
 800c584:	4620      	mov	r0, r4
 800c586:	f7fc fbe5 	bl	8008d54 <acc_sensor_reg_read>
 800c58a:	f10d 0236 	add.w	r2, sp, #54	; 0x36
 800c58e:	2165      	movs	r1, #101	; 0x65
 800c590:	4620      	mov	r0, r4
 800c592:	f7fc fbdf 	bl	8008d54 <acc_sensor_reg_read>
 800c596:	f7fa f88b 	bl	80066b0 <acc_rss_integration_log_level>
 800c59a:	2801      	cmp	r0, #1
 800c59c:	d912      	bls.n	800c5c4 <acc_sensor_diagnostics_r2_sensor_status+0x1c8>
 800c59e:	f8bd 0036 	ldrh.w	r0, [sp, #54]	; 0x36
 800c5a2:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 800c5a6:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 800c5aa:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800c5ae:	4d34      	ldr	r5, [pc, #208]	; (800c680 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800c5b0:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 800c5b2:	e9cd 1002 	strd	r1, r0, [sp, #8]
 800c5b6:	e9cd 3200 	strd	r3, r2, [sp]
 800c5ba:	4933      	ldr	r1, [pc, #204]	; (800c688 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800c5bc:	4a37      	ldr	r2, [pc, #220]	; (800c69c <acc_sensor_diagnostics_r2_sensor_status+0x2a0>)
 800c5be:	4623      	mov	r3, r4
 800c5c0:	2002      	movs	r0, #2
 800c5c2:	47a8      	blx	r5
 800c5c4:	2500      	movs	r5, #0
 800c5c6:	f10d 022a 	add.w	r2, sp, #42	; 0x2a
 800c5ca:	2153      	movs	r1, #83	; 0x53
 800c5cc:	4620      	mov	r0, r4
 800c5ce:	f8ad 502a 	strh.w	r5, [sp, #42]	; 0x2a
 800c5d2:	f7fc fbbf 	bl	8008d54 <acc_sensor_reg_read>
 800c5d6:	aa0c      	add	r2, sp, #48	; 0x30
 800c5d8:	2140      	movs	r1, #64	; 0x40
 800c5da:	4620      	mov	r0, r4
 800c5dc:	f8ad 5030 	strh.w	r5, [sp, #48]	; 0x30
 800c5e0:	f7fc fbb8 	bl	8008d54 <acc_sensor_reg_read>
 800c5e4:	f7fa f864 	bl	80066b0 <acc_rss_integration_log_level>
 800c5e8:	2801      	cmp	r0, #1
 800c5ea:	d909      	bls.n	800c600 <acc_sensor_diagnostics_r2_sensor_status+0x204>
 800c5ec:	4a24      	ldr	r2, [pc, #144]	; (800c680 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800c5ee:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800c5f2:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800c5f4:	4924      	ldr	r1, [pc, #144]	; (800c688 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800c5f6:	9300      	str	r3, [sp, #0]
 800c5f8:	4a29      	ldr	r2, [pc, #164]	; (800c6a0 <acc_sensor_diagnostics_r2_sensor_status+0x2a4>)
 800c5fa:	4623      	mov	r3, r4
 800c5fc:	2002      	movs	r0, #2
 800c5fe:	47a8      	blx	r5
 800c600:	f7fa f856 	bl	80066b0 <acc_rss_integration_log_level>
 800c604:	2801      	cmp	r0, #1
 800c606:	d90e      	bls.n	800c626 <acc_sensor_diagnostics_r2_sensor_status+0x22a>
 800c608:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800c60c:	491c      	ldr	r1, [pc, #112]	; (800c680 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800c60e:	4a25      	ldr	r2, [pc, #148]	; (800c6a4 <acc_sensor_diagnostics_r2_sensor_status+0x2a8>)
 800c610:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800c612:	491d      	ldr	r1, [pc, #116]	; (800c688 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800c614:	f003 0040 	and.w	r0, r3, #64	; 0x40
 800c618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c61c:	e9cd 3000 	strd	r3, r0, [sp]
 800c620:	4623      	mov	r3, r4
 800c622:	2002      	movs	r0, #2
 800c624:	47a8      	blx	r5
 800c626:	f7fa f843 	bl	80066b0 <acc_rss_integration_log_level>
 800c62a:	2801      	cmp	r0, #1
 800c62c:	d90e      	bls.n	800c64c <acc_sensor_diagnostics_r2_sensor_status+0x250>
 800c62e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800c632:	4913      	ldr	r1, [pc, #76]	; (800c680 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800c634:	4a1c      	ldr	r2, [pc, #112]	; (800c6a8 <acc_sensor_diagnostics_r2_sensor_status+0x2ac>)
 800c636:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800c638:	4913      	ldr	r1, [pc, #76]	; (800c688 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800c63a:	f003 0010 	and.w	r0, r3, #16
 800c63e:	f003 0320 	and.w	r3, r3, #32
 800c642:	e9cd 3000 	strd	r3, r0, [sp]
 800c646:	4623      	mov	r3, r4
 800c648:	2002      	movs	r0, #2
 800c64a:	47a8      	blx	r5
 800c64c:	f7fa f830 	bl	80066b0 <acc_rss_integration_log_level>
 800c650:	2801      	cmp	r0, #1
 800c652:	d90e      	bls.n	800c672 <acc_sensor_diagnostics_r2_sensor_status+0x276>
 800c654:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800c658:	4909      	ldr	r1, [pc, #36]	; (800c680 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800c65a:	4a14      	ldr	r2, [pc, #80]	; (800c6ac <acc_sensor_diagnostics_r2_sensor_status+0x2b0>)
 800c65c:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800c65e:	490a      	ldr	r1, [pc, #40]	; (800c688 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800c660:	f003 0004 	and.w	r0, r3, #4
 800c664:	f003 0308 	and.w	r3, r3, #8
 800c668:	e9cd 3000 	strd	r3, r0, [sp]
 800c66c:	4623      	mov	r3, r4
 800c66e:	2002      	movs	r0, #2
 800c670:	47a8      	blx	r5
 800c672:	4d0f      	ldr	r5, [pc, #60]	; (800c6b0 <acc_sensor_diagnostics_r2_sensor_status+0x2b4>)
 800c674:	ae0c      	add	r6, sp, #48	; 0x30
 800c676:	f105 071e 	add.w	r7, r5, #30
 800c67a:	21f0      	movs	r1, #240	; 0xf0
 800c67c:	e01e      	b.n	800c6bc <acc_sensor_diagnostics_r2_sensor_status+0x2c0>
 800c67e:	bf00      	nop
 800c680:	20000640 	.word	0x20000640
 800c684:	08014d90 	.word	0x08014d90
 800c688:	08014dd0 	.word	0x08014dd0
 800c68c:	08014e08 	.word	0x08014e08
 800c690:	08015118 	.word	0x08015118
 800c694:	08014e28 	.word	0x08014e28
 800c698:	08014e70 	.word	0x08014e70
 800c69c:	08014ebc 	.word	0x08014ebc
 800c6a0:	08014ef0 	.word	0x08014ef0
 800c6a4:	08014f10 	.word	0x08014f10
 800c6a8:	08014f3c 	.word	0x08014f3c
 800c6ac:	08014f70 	.word	0x08014f70
 800c6b0:	08015138 	.word	0x08015138
 800c6b4:	08014de8 	.word	0x08014de8
 800c6b8:	f835 1f02 	ldrh.w	r1, [r5, #2]!
 800c6bc:	4632      	mov	r2, r6
 800c6be:	4620      	mov	r0, r4
 800c6c0:	f7fc fb48 	bl	8008d54 <acc_sensor_reg_read>
 800c6c4:	42bd      	cmp	r5, r7
 800c6c6:	f106 0602 	add.w	r6, r6, #2
 800c6ca:	d1f5      	bne.n	800c6b8 <acc_sensor_diagnostics_r2_sensor_status+0x2bc>
 800c6cc:	f7f9 fff0 	bl	80066b0 <acc_rss_integration_log_level>
 800c6d0:	2801      	cmp	r0, #1
 800c6d2:	f240 80b6 	bls.w	800c842 <acc_sensor_diagnostics_r2_sensor_status+0x446>
 800c6d6:	4a5c      	ldr	r2, [pc, #368]	; (800c848 <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 800c6d8:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800c6dc:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800c6de:	495b      	ldr	r1, [pc, #364]	; (800c84c <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 800c6e0:	9300      	str	r3, [sp, #0]
 800c6e2:	4a5b      	ldr	r2, [pc, #364]	; (800c850 <acc_sensor_diagnostics_r2_sensor_status+0x454>)
 800c6e4:	4623      	mov	r3, r4
 800c6e6:	2002      	movs	r0, #2
 800c6e8:	47a8      	blx	r5
 800c6ea:	2501      	movs	r5, #1
 800c6ec:	f7f9 ffe0 	bl	80066b0 <acc_rss_integration_log_level>
 800c6f0:	2801      	cmp	r0, #1
 800c6f2:	d90e      	bls.n	800c712 <acc_sensor_diagnostics_r2_sensor_status+0x316>
 800c6f4:	ab14      	add	r3, sp, #80	; 0x50
 800c6f6:	eb03 0245 	add.w	r2, r3, r5, lsl #1
 800c6fa:	4b53      	ldr	r3, [pc, #332]	; (800c848 <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 800c6fc:	f832 2c20 	ldrh.w	r2, [r2, #-32]
 800c700:	9200      	str	r2, [sp, #0]
 800c702:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800c704:	4a53      	ldr	r2, [pc, #332]	; (800c854 <acc_sensor_diagnostics_r2_sensor_status+0x458>)
 800c706:	4951      	ldr	r1, [pc, #324]	; (800c84c <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 800c708:	3501      	adds	r5, #1
 800c70a:	4623      	mov	r3, r4
 800c70c:	2002      	movs	r0, #2
 800c70e:	b2ed      	uxtb	r5, r5
 800c710:	47b0      	blx	r6
 800c712:	f8df a134 	ldr.w	sl, [pc, #308]	; 800c848 <acc_sensor_diagnostics_r2_sensor_status+0x44c>
 800c716:	f8df 9158 	ldr.w	r9, [pc, #344]	; 800c870 <acc_sensor_diagnostics_r2_sensor_status+0x474>
 800c71a:	f8df 8130 	ldr.w	r8, [pc, #304]	; 800c84c <acc_sensor_diagnostics_r2_sensor_status+0x450>
 800c71e:	2601      	movs	r6, #1
 800c720:	f7f9 ffc6 	bl	80066b0 <acc_rss_integration_log_level>
 800c724:	ab14      	add	r3, sp, #80	; 0x50
 800c726:	eb03 0c45 	add.w	ip, r3, r5, lsl #1
 800c72a:	2801      	cmp	r0, #1
 800c72c:	4667      	mov	r7, ip
 800c72e:	4623      	mov	r3, r4
 800c730:	464a      	mov	r2, r9
 800c732:	4641      	mov	r1, r8
 800c734:	f04f 0002 	mov.w	r0, #2
 800c738:	d909      	bls.n	800c74e <acc_sensor_diagnostics_r2_sensor_status+0x352>
 800c73a:	f837 7c20 	ldrh.w	r7, [r7, #-32]
 800c73e:	f83c cc1e 	ldrh.w	ip, [ip, #-30]
 800c742:	9600      	str	r6, [sp, #0]
 800c744:	e9cd 7c01 	strd	r7, ip, [sp, #4]
 800c748:	f8da 7034 	ldr.w	r7, [sl, #52]	; 0x34
 800c74c:	47b8      	blx	r7
 800c74e:	3601      	adds	r6, #1
 800c750:	3502      	adds	r5, #2
 800c752:	2e08      	cmp	r6, #8
 800c754:	b2ed      	uxtb	r5, r5
 800c756:	d1e3      	bne.n	800c720 <acc_sensor_diagnostics_r2_sensor_status+0x324>
 800c758:	2500      	movs	r5, #0
 800c75a:	aa0b      	add	r2, sp, #44	; 0x2c
 800c75c:	219d      	movs	r1, #157	; 0x9d
 800c75e:	4620      	mov	r0, r4
 800c760:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
 800c764:	f7fc faf6 	bl	8008d54 <acc_sensor_reg_read>
 800c768:	f10d 022e 	add.w	r2, sp, #46	; 0x2e
 800c76c:	2199      	movs	r1, #153	; 0x99
 800c76e:	4620      	mov	r0, r4
 800c770:	f8ad 502e 	strh.w	r5, [sp, #46]	; 0x2e
 800c774:	f7fc faee 	bl	8008d54 <acc_sensor_reg_read>
 800c778:	aa0c      	add	r2, sp, #48	; 0x30
 800c77a:	2196      	movs	r1, #150	; 0x96
 800c77c:	4620      	mov	r0, r4
 800c77e:	f8ad 5030 	strh.w	r5, [sp, #48]	; 0x30
 800c782:	f7fc fae7 	bl	8008d54 <acc_sensor_reg_read>
 800c786:	462a      	mov	r2, r5
 800c788:	21b2      	movs	r1, #178	; 0xb2
 800c78a:	4620      	mov	r0, r4
 800c78c:	f7fc faf8 	bl	8008d80 <acc_sensor_reg_write>
 800c790:	f7f9 ff8e 	bl	80066b0 <acc_rss_integration_log_level>
 800c794:	2801      	cmp	r0, #1
 800c796:	d90f      	bls.n	800c7b8 <acc_sensor_diagnostics_r2_sensor_status+0x3bc>
 800c798:	482b      	ldr	r0, [pc, #172]	; (800c848 <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 800c79a:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 800c79e:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 800c7a2:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 800c7a6:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800c7a8:	9300      	str	r3, [sp, #0]
 800c7aa:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800c7ae:	4623      	mov	r3, r4
 800c7b0:	4a29      	ldr	r2, [pc, #164]	; (800c858 <acc_sensor_diagnostics_r2_sensor_status+0x45c>)
 800c7b2:	4926      	ldr	r1, [pc, #152]	; (800c84c <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 800c7b4:	2002      	movs	r0, #2
 800c7b6:	47a8      	blx	r5
 800c7b8:	f7f9 ff7a 	bl	80066b0 <acc_rss_integration_log_level>
 800c7bc:	2801      	cmp	r0, #1
 800c7be:	d909      	bls.n	800c7d4 <acc_sensor_diagnostics_r2_sensor_status+0x3d8>
 800c7c0:	4a21      	ldr	r2, [pc, #132]	; (800c848 <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 800c7c2:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 800c7c6:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800c7c8:	4920      	ldr	r1, [pc, #128]	; (800c84c <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 800c7ca:	9300      	str	r3, [sp, #0]
 800c7cc:	4a23      	ldr	r2, [pc, #140]	; (800c85c <acc_sensor_diagnostics_r2_sensor_status+0x460>)
 800c7ce:	4623      	mov	r3, r4
 800c7d0:	2002      	movs	r0, #2
 800c7d2:	47a8      	blx	r5
 800c7d4:	f7f9 ff6c 	bl	80066b0 <acc_rss_integration_log_level>
 800c7d8:	2801      	cmp	r0, #1
 800c7da:	d909      	bls.n	800c7f0 <acc_sensor_diagnostics_r2_sensor_status+0x3f4>
 800c7dc:	4a1a      	ldr	r2, [pc, #104]	; (800c848 <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 800c7de:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800c7e2:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800c7e4:	4919      	ldr	r1, [pc, #100]	; (800c84c <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 800c7e6:	9300      	str	r3, [sp, #0]
 800c7e8:	4a1d      	ldr	r2, [pc, #116]	; (800c860 <acc_sensor_diagnostics_r2_sensor_status+0x464>)
 800c7ea:	4623      	mov	r3, r4
 800c7ec:	2002      	movs	r0, #2
 800c7ee:	47a8      	blx	r5
 800c7f0:	f7f9 ff5e 	bl	80066b0 <acc_rss_integration_log_level>
 800c7f4:	2801      	cmp	r0, #1
 800c7f6:	d909      	bls.n	800c80c <acc_sensor_diagnostics_r2_sensor_status+0x410>
 800c7f8:	4a13      	ldr	r2, [pc, #76]	; (800c848 <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 800c7fa:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 800c7fe:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800c800:	4912      	ldr	r1, [pc, #72]	; (800c84c <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 800c802:	9300      	str	r3, [sp, #0]
 800c804:	4a17      	ldr	r2, [pc, #92]	; (800c864 <acc_sensor_diagnostics_r2_sensor_status+0x468>)
 800c806:	4623      	mov	r3, r4
 800c808:	2002      	movs	r0, #2
 800c80a:	47a8      	blx	r5
 800c80c:	f7f9 ff50 	bl	80066b0 <acc_rss_integration_log_level>
 800c810:	2801      	cmp	r0, #1
 800c812:	d909      	bls.n	800c828 <acc_sensor_diagnostics_r2_sensor_status+0x42c>
 800c814:	4a0c      	ldr	r2, [pc, #48]	; (800c848 <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 800c816:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800c81a:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800c81c:	490b      	ldr	r1, [pc, #44]	; (800c84c <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 800c81e:	9300      	str	r3, [sp, #0]
 800c820:	4a11      	ldr	r2, [pc, #68]	; (800c868 <acc_sensor_diagnostics_r2_sensor_status+0x46c>)
 800c822:	4623      	mov	r3, r4
 800c824:	2002      	movs	r0, #2
 800c826:	47a8      	blx	r5
 800c828:	f7f9 ff42 	bl	80066b0 <acc_rss_integration_log_level>
 800c82c:	2801      	cmp	r0, #1
 800c82e:	d905      	bls.n	800c83c <acc_sensor_diagnostics_r2_sensor_status+0x440>
 800c830:	4b05      	ldr	r3, [pc, #20]	; (800c848 <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 800c832:	4a0e      	ldr	r2, [pc, #56]	; (800c86c <acc_sensor_diagnostics_r2_sensor_status+0x470>)
 800c834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c836:	4905      	ldr	r1, [pc, #20]	; (800c84c <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 800c838:	2002      	movs	r0, #2
 800c83a:	4798      	blx	r3
 800c83c:	b014      	add	sp, #80	; 0x50
 800c83e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c842:	2500      	movs	r5, #0
 800c844:	e752      	b.n	800c6ec <acc_sensor_diagnostics_r2_sensor_status+0x2f0>
 800c846:	bf00      	nop
 800c848:	20000640 	.word	0x20000640
 800c84c:	08014dd0 	.word	0x08014dd0
 800c850:	08014fa0 	.word	0x08014fa0
 800c854:	08014fc8 	.word	0x08014fc8
 800c858:	08015010 	.word	0x08015010
 800c85c:	08015064 	.word	0x08015064
 800c860:	08015088 	.word	0x08015088
 800c864:	080150a4 	.word	0x080150a4
 800c868:	080150bc 	.word	0x080150bc
 800c86c:	080150d8 	.word	0x080150d8
 800c870:	08014fe8 	.word	0x08014fe8

0800c874 <acc_alg_basic_saturation_check_u16>:
 800c874:	eddf 6a17 	vldr	s13, [pc, #92]	; 800c8d4 <acc_alg_basic_saturation_check_u16+0x60>
 800c878:	ed9f 6a17 	vldr	s12, [pc, #92]	; 800c8d8 <acc_alg_basic_saturation_check_u16+0x64>
 800c87c:	ee76 5ac0 	vsub.f32	s11, s13, s0
 800c880:	ee80 7a26 	vdiv.f32	s14, s0, s13
 800c884:	0849      	lsrs	r1, r1, #1
 800c886:	eec5 7aa6 	vdiv.f32	s15, s11, s13
 800c88a:	ee27 7a06 	vmul.f32	s14, s14, s12
 800c88e:	ee67 7a86 	vmul.f32	s15, s15, s12
 800c892:	d01c      	beq.n	800c8ce <acc_alg_basic_saturation_check_u16+0x5a>
 800c894:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800c898:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c89c:	ee17 3a10 	vmov	r3, s14
 800c8a0:	b430      	push	{r4, r5}
 800c8a2:	b29d      	uxth	r5, r3
 800c8a4:	ee17 3a90 	vmov	r3, s15
 800c8a8:	b29c      	uxth	r4, r3
 800c8aa:	1e83      	subs	r3, r0, #2
 800c8ac:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 800c8b0:	e003      	b.n	800c8ba <acc_alg_basic_saturation_check_u16+0x46>
 800c8b2:	42aa      	cmp	r2, r5
 800c8b4:	d905      	bls.n	800c8c2 <acc_alg_basic_saturation_check_u16+0x4e>
 800c8b6:	428b      	cmp	r3, r1
 800c8b8:	d006      	beq.n	800c8c8 <acc_alg_basic_saturation_check_u16+0x54>
 800c8ba:	f833 2f02 	ldrh.w	r2, [r3, #2]!
 800c8be:	42a2      	cmp	r2, r4
 800c8c0:	d3f7      	bcc.n	800c8b2 <acc_alg_basic_saturation_check_u16+0x3e>
 800c8c2:	2001      	movs	r0, #1
 800c8c4:	bc30      	pop	{r4, r5}
 800c8c6:	4770      	bx	lr
 800c8c8:	2000      	movs	r0, #0
 800c8ca:	bc30      	pop	{r4, r5}
 800c8cc:	4770      	bx	lr
 800c8ce:	4608      	mov	r0, r1
 800c8d0:	4770      	bx	lr
 800c8d2:	bf00      	nop
 800c8d4:	42c80000 	.word	0x42c80000
 800c8d8:	477fff00 	.word	0x477fff00

0800c8dc <acc_alg_basic_saturation_check_i16>:
 800c8dc:	eddf 6a17 	vldr	s13, [pc, #92]	; 800c93c <acc_alg_basic_saturation_check_i16+0x60>
 800c8e0:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800c940 <acc_alg_basic_saturation_check_i16+0x64>
 800c8e4:	ed9f 6a17 	vldr	s12, [pc, #92]	; 800c944 <acc_alg_basic_saturation_check_i16+0x68>
 800c8e8:	ee36 0ac0 	vsub.f32	s0, s13, s0
 800c8ec:	0849      	lsrs	r1, r1, #1
 800c8ee:	eec0 7a26 	vdiv.f32	s15, s0, s13
 800c8f2:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c8f6:	ee67 7a86 	vmul.f32	s15, s15, s12
 800c8fa:	d01c      	beq.n	800c936 <acc_alg_basic_saturation_check_i16+0x5a>
 800c8fc:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800c900:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c904:	ee17 3a10 	vmov	r3, s14
 800c908:	b430      	push	{r4, r5}
 800c90a:	b21d      	sxth	r5, r3
 800c90c:	ee17 3a90 	vmov	r3, s15
 800c910:	b21c      	sxth	r4, r3
 800c912:	1e83      	subs	r3, r0, #2
 800c914:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 800c918:	e003      	b.n	800c922 <acc_alg_basic_saturation_check_i16+0x46>
 800c91a:	42aa      	cmp	r2, r5
 800c91c:	dd05      	ble.n	800c92a <acc_alg_basic_saturation_check_i16+0x4e>
 800c91e:	428b      	cmp	r3, r1
 800c920:	d006      	beq.n	800c930 <acc_alg_basic_saturation_check_i16+0x54>
 800c922:	f933 2f02 	ldrsh.w	r2, [r3, #2]!
 800c926:	42a2      	cmp	r2, r4
 800c928:	dbf7      	blt.n	800c91a <acc_alg_basic_saturation_check_i16+0x3e>
 800c92a:	2001      	movs	r0, #1
 800c92c:	bc30      	pop	{r4, r5}
 800c92e:	4770      	bx	lr
 800c930:	2000      	movs	r0, #0
 800c932:	bc30      	pop	{r4, r5}
 800c934:	4770      	bx	lr
 800c936:	4608      	mov	r0, r1
 800c938:	4770      	bx	lr
 800c93a:	bf00      	nop
 800c93c:	42c80000 	.word	0x42c80000
 800c940:	c7000000 	.word	0xc7000000
 800c944:	46fffe00 	.word	0x46fffe00

0800c948 <acc_alg_basic_subtract_mean_uint16>:
 800c948:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800c94c:	b570      	push	{r4, r5, r6, lr}
 800c94e:	d13c      	bne.n	800c9ca <acc_alg_basic_subtract_mean_uint16+0x82>
 800c950:	2900      	cmp	r1, #0
 800c952:	d036      	beq.n	800c9c2 <acc_alg_basic_subtract_mean_uint16+0x7a>
 800c954:	eb00 0641 	add.w	r6, r0, r1, lsl #1
 800c958:	4604      	mov	r4, r0
 800c95a:	2500      	movs	r5, #0
 800c95c:	f834 2b02 	ldrh.w	r2, [r4], #2
 800c960:	f5a2 4200 	sub.w	r2, r2, #32768	; 0x8000
 800c964:	42a6      	cmp	r6, r4
 800c966:	4415      	add	r5, r2
 800c968:	d1f8      	bne.n	800c95c <acc_alg_basic_subtract_mean_uint16+0x14>
 800c96a:	2d00      	cmp	r5, #0
 800c96c:	bfac      	ite	ge
 800c96e:	2401      	movge	r4, #1
 800c970:	f04f 34ff 	movlt.w	r4, #4294967295
 800c974:	084a      	lsrs	r2, r1, #1
 800c976:	fb04 5202 	mla	r2, r4, r2, r5
 800c97a:	fb92 f5f1 	sdiv	r5, r2, r1
 800c97e:	b22c      	sxth	r4, r5
 800c980:	2c00      	cmp	r4, #0
 800c982:	dd0e      	ble.n	800c9a2 <acc_alg_basic_subtract_mean_uint16+0x5a>
 800c984:	b2ad      	uxth	r5, r5
 800c986:	f830 2b02 	ldrh.w	r2, [r0], #2
 800c98a:	42aa      	cmp	r2, r5
 800c98c:	bf26      	itte	cs
 800c98e:	1b52      	subcs	r2, r2, r5
 800c990:	b292      	uxthcs	r2, r2
 800c992:	2200      	movcc	r2, #0
 800c994:	4286      	cmp	r6, r0
 800c996:	f820 2c02 	strh.w	r2, [r0, #-2]
 800c99a:	d1f4      	bne.n	800c986 <acc_alg_basic_subtract_mean_uint16+0x3e>
 800c99c:	b103      	cbz	r3, 800c9a0 <acc_alg_basic_subtract_mean_uint16+0x58>
 800c99e:	801c      	strh	r4, [r3, #0]
 800c9a0:	bd70      	pop	{r4, r5, r6, pc}
 800c9a2:	f504 417f 	add.w	r1, r4, #65280	; 0xff00
 800c9a6:	31ff      	adds	r1, #255	; 0xff
 800c9a8:	f830 2b02 	ldrh.w	r2, [r0], #2
 800c9ac:	4291      	cmp	r1, r2
 800c9ae:	bfa6      	itte	ge
 800c9b0:	1b52      	subge	r2, r2, r5
 800c9b2:	b292      	uxthge	r2, r2
 800c9b4:	f64f 72ff 	movwlt	r2, #65535	; 0xffff
 800c9b8:	42b0      	cmp	r0, r6
 800c9ba:	f820 2c02 	strh.w	r2, [r0, #-2]
 800c9be:	d1f3      	bne.n	800c9a8 <acc_alg_basic_subtract_mean_uint16+0x60>
 800c9c0:	e7ec      	b.n	800c99c <acc_alg_basic_subtract_mean_uint16+0x54>
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d0ec      	beq.n	800c9a0 <acc_alg_basic_subtract_mean_uint16+0x58>
 800c9c6:	8019      	strh	r1, [r3, #0]
 800c9c8:	bd70      	pop	{r4, r5, r6, pc}
 800c9ca:	4802      	ldr	r0, [pc, #8]	; (800c9d4 <acc_alg_basic_subtract_mean_uint16+0x8c>)
 800c9cc:	211b      	movs	r1, #27
 800c9ce:	f7fc f893 	bl	8008af8 <acc_assert_fail>
 800c9d2:	bf00      	nop
 800c9d4:	08015158 	.word	0x08015158

0800c9d8 <acc_alg_basic_subtract_section_mean_q12_4>:
 800c9d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9dc:	2a00      	cmp	r2, #0
 800c9de:	bf14      	ite	ne
 800c9e0:	4690      	movne	r8, r2
 800c9e2:	4688      	moveq	r8, r1
 800c9e4:	b1b9      	cbz	r1, 800ca16 <acc_alg_basic_subtract_section_mean_q12_4+0x3e>
 800c9e6:	460f      	mov	r7, r1
 800c9e8:	4681      	mov	r9, r0
 800c9ea:	469a      	mov	sl, r3
 800c9ec:	460d      	mov	r5, r1
 800c9ee:	4646      	mov	r6, r8
 800c9f0:	2400      	movs	r4, #0
 800c9f2:	19a3      	adds	r3, r4, r6
 800c9f4:	42bb      	cmp	r3, r7
 800c9f6:	bfc8      	it	gt
 800c9f8:	462e      	movgt	r6, r5
 800c9fa:	eb09 0044 	add.w	r0, r9, r4, lsl #1
 800c9fe:	4444      	add	r4, r8
 800ca00:	4631      	mov	r1, r6
 800ca02:	2300      	movs	r3, #0
 800ca04:	4652      	mov	r2, sl
 800ca06:	b2a4      	uxth	r4, r4
 800ca08:	f7ff ff9e 	bl	800c948 <acc_alg_basic_subtract_mean_uint16>
 800ca0c:	eba5 0508 	sub.w	r5, r5, r8
 800ca10:	42a7      	cmp	r7, r4
 800ca12:	b2ad      	uxth	r5, r5
 800ca14:	d8ed      	bhi.n	800c9f2 <acc_alg_basic_subtract_section_mean_q12_4+0x1a>
 800ca16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca1a:	bf00      	nop

0800ca1c <acc_alg_basic_exponential_smoothing_q3_12_complex>:
 800ca1c:	b33b      	cbz	r3, 800ca6e <acc_alg_basic_exponential_smoothing_q3_12_complex+0x52>
 800ca1e:	b4f0      	push	{r4, r5, r6, r7}
 800ca20:	f100 0c02 	add.w	ip, r0, #2
 800ca24:	2400      	movs	r4, #0
 800ca26:	1c8f      	adds	r7, r1, #2
 800ca28:	f931 6024 	ldrsh.w	r6, [r1, r4, lsl #2]
 800ca2c:	f930 5024 	ldrsh.w	r5, [r0, r4, lsl #2]
 800ca30:	1bad      	subs	r5, r5, r6
 800ca32:	fb02 f505 	mul.w	r5, r2, r5
 800ca36:	2d00      	cmp	r5, #0
 800ca38:	bfb8      	it	lt
 800ca3a:	f605 75ff 	addwlt	r5, r5, #4095	; 0xfff
 800ca3e:	eb06 3525 	add.w	r5, r6, r5, asr #12
 800ca42:	f821 5024 	strh.w	r5, [r1, r4, lsl #2]
 800ca46:	f93c 5024 	ldrsh.w	r5, [ip, r4, lsl #2]
 800ca4a:	f937 6024 	ldrsh.w	r6, [r7, r4, lsl #2]
 800ca4e:	1bad      	subs	r5, r5, r6
 800ca50:	fb02 f505 	mul.w	r5, r2, r5
 800ca54:	2d00      	cmp	r5, #0
 800ca56:	bfb8      	it	lt
 800ca58:	f605 75ff 	addwlt	r5, r5, #4095	; 0xfff
 800ca5c:	eb06 3525 	add.w	r5, r6, r5, asr #12
 800ca60:	f827 5024 	strh.w	r5, [r7, r4, lsl #2]
 800ca64:	3401      	adds	r4, #1
 800ca66:	42a3      	cmp	r3, r4
 800ca68:	d1de      	bne.n	800ca28 <acc_alg_basic_exponential_smoothing_q3_12_complex+0xc>
 800ca6a:	bcf0      	pop	{r4, r5, r6, r7}
 800ca6c:	4770      	bx	lr
 800ca6e:	4770      	bx	lr

0800ca70 <acc_alg_biquad_q3_12_lowpass_coeffs>:
 800ca70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca74:	eddf 7abd 	vldr	s15, [pc, #756]	; 800cd6c <acc_alg_biquad_q3_12_lowpass_coeffs+0x2fc>
 800ca78:	eeb0 0ac0 	vabs.f32	s0, s0
 800ca7c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800ca80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca84:	ed2d 8b02 	vpush	{d8}
 800ca88:	4680      	mov	r8, r0
 800ca8a:	4689      	mov	r9, r1
 800ca8c:	4616      	mov	r6, r2
 800ca8e:	461f      	mov	r7, r3
 800ca90:	f300 810a 	bgt.w	800cca8 <acc_alg_biquad_q3_12_lowpass_coeffs+0x238>
 800ca94:	eddf 7ab6 	vldr	s15, [pc, #728]	; 800cd70 <acc_alg_biquad_q3_12_lowpass_coeffs+0x300>
 800ca98:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ca9c:	f004 f8e0 	bl	8010c60 <roundf>
 800caa0:	ed9f 7ab4 	vldr	s14, [pc, #720]	; 800cd74 <acc_alg_biquad_q3_12_lowpass_coeffs+0x304>
 800caa4:	eddf 7ab4 	vldr	s15, [pc, #720]	; 800cd78 <acc_alg_biquad_q3_12_lowpass_coeffs+0x308>
 800caa8:	ee20 0a07 	vmul.f32	s0, s0, s14
 800caac:	ee20 0a27 	vmul.f32	s0, s0, s15
 800cab0:	f1b8 0f00 	cmp.w	r8, #0
 800cab4:	d036      	beq.n	800cb24 <acc_alg_biquad_q3_12_lowpass_coeffs+0xb4>
 800cab6:	f000 fdbd 	bl	800d634 <acc_alg_basic_math_restricted_tan_f32>
 800caba:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 800cd7c <acc_alg_biquad_q3_12_lowpass_coeffs+0x30c>
 800cabe:	eddf 7ab0 	vldr	s15, [pc, #704]	; 800cd80 <acc_alg_biquad_q3_12_lowpass_coeffs+0x310>
 800cac2:	ee20 0a07 	vmul.f32	s0, s0, s14
 800cac6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800caca:	ee30 7a27 	vadd.f32	s14, s0, s15
 800cace:	ee60 7a27 	vmul.f32	s15, s0, s15
 800cad2:	ee27 0a00 	vmul.f32	s0, s14, s0
 800cad6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800cada:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 800cade:	eec0 7a07 	vdiv.f32	s15, s0, s14
 800cae2:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800cae6:	eef4 7ac6 	vcmpe.f32	s15, s12
 800caea:	ee37 7a26 	vadd.f32	s14, s14, s13
 800caee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800caf2:	eef1 5ac7 	vsqrt.f32	s11, s14
 800caf6:	ee86 7aa5 	vdiv.f32	s14, s13, s11
 800cafa:	d533      	bpl.n	800cb64 <acc_alg_biquad_q3_12_lowpass_coeffs+0xf4>
 800cafc:	eef4 7ae6 	vcmpe.f32	s15, s13
 800cb00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb04:	f340 80d3 	ble.w	800ccae <acc_alg_biquad_q3_12_lowpass_coeffs+0x23e>
 800cb08:	eddf 7a9e 	vldr	s15, [pc, #632]	; 800cd84 <acc_alg_biquad_q3_12_lowpass_coeffs+0x314>
 800cb0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb10:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800cb14:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cb18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cb1c:	ee17 3a90 	vmov	r3, s15
 800cb20:	005c      	lsls	r4, r3, #1
 800cb22:	e0d0      	b.n	800ccc6 <acc_alg_biquad_q3_12_lowpass_coeffs+0x256>
 800cb24:	f000 fd86 	bl	800d634 <acc_alg_basic_math_restricted_tan_f32>
 800cb28:	eddf 7a95 	vldr	s15, [pc, #596]	; 800cd80 <acc_alg_biquad_q3_12_lowpass_coeffs+0x310>
 800cb2c:	ee30 7a27 	vadd.f32	s14, s0, s15
 800cb30:	ee60 7a27 	vmul.f32	s15, s0, s15
 800cb34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb38:	ee27 0a00 	vmul.f32	s0, s14, s0
 800cb3c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800cb40:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 800cb44:	eec0 7a07 	vdiv.f32	s15, s0, s14
 800cb48:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800cb4c:	eef4 7ac6 	vcmpe.f32	s15, s12
 800cb50:	ee37 7a26 	vadd.f32	s14, s14, s13
 800cb54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb58:	eef1 5ac7 	vsqrt.f32	s11, s14
 800cb5c:	ee86 7aa5 	vdiv.f32	s14, s13, s11
 800cb60:	f100 80a5 	bmi.w	800ccae <acc_alg_biquad_q3_12_lowpass_coeffs+0x23e>
 800cb64:	eddf 6a88 	vldr	s13, [pc, #544]	; 800cd88 <acc_alg_biquad_q3_12_lowpass_coeffs+0x318>
 800cb68:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800cb6c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800cb70:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cb74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cb7c:	ee17 5a90 	vmov	r5, s15
 800cb80:	fb05 f305 	mul.w	r3, r5, r5
 800cb84:	f1c3 6380 	rsb	r3, r3, #67108864	; 0x4000000
 800cb88:	ee07 3a90 	vmov	s15, r3
 800cb8c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800cb90:	eef1 7ac7 	vsqrt.f32	s15, s14
 800cb94:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800cb98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cba0:	ee17 4a90 	vmov	r4, s15
 800cba4:	2c00      	cmp	r4, #0
 800cba6:	f000 80a4 	beq.w	800ccf2 <acc_alg_biquad_q3_12_lowpass_coeffs+0x282>
 800cbaa:	f1b9 0f00 	cmp.w	r9, #0
 800cbae:	d017      	beq.n	800cbe0 <acc_alg_biquad_q3_12_lowpass_coeffs+0x170>
 800cbb0:	b2a3      	uxth	r3, r4
 800cbb2:	f5c3 5180 	rsb	r1, r3, #4096	; 0x1000
 800cbb6:	b208      	sxth	r0, r1
 800cbb8:	b2aa      	uxth	r2, r5
 800cbba:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 800cbbe:	f8a9 0000 	strh.w	r0, [r9]
 800cbc2:	f8a9 0004 	strh.w	r0, [r9, #4]
 800cbc6:	f5c4 50c0 	rsb	r0, r4, #6144	; 0x1800
 800cbca:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800cbce:	0049      	lsls	r1, r1, #1
 800cbd0:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 800cbd4:	f8a9 1002 	strh.w	r1, [r9, #2]
 800cbd8:	f8a9 3006 	strh.w	r3, [r9, #6]
 800cbdc:	f8a9 2008 	strh.w	r2, [r9, #8]
 800cbe0:	2d00      	cmp	r5, #0
 800cbe2:	f000 80a1 	beq.w	800cd28 <acc_alg_biquad_q3_12_lowpass_coeffs+0x2b8>
 800cbe6:	2e00      	cmp	r6, #0
 800cbe8:	f000 80b8 	beq.w	800cd5c <acc_alg_biquad_q3_12_lowpass_coeffs+0x2ec>
 800cbec:	f5c4 5280 	rsb	r2, r4, #4096	; 0x1000
 800cbf0:	fb05 f305 	mul.w	r3, r5, r5
 800cbf4:	fb04 f404 	mul.w	r4, r4, r4
 800cbf8:	ebc5 0242 	rsb	r2, r5, r2, lsl #1
 800cbfc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cc00:	f104 447c 	add.w	r4, r4, #4227858432	; 0xfc000000
 800cc04:	fb02 f202 	mul.w	r2, r2, r2
 800cc08:	eba2 0244 	sub.w	r2, r2, r4, lsl #1
 800cc0c:	ee07 2a90 	vmov	s15, r2
 800cc10:	0064      	lsls	r4, r4, #1
 800cc12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800cc16:	ee07 4a90 	vmov	s15, r4
 800cc1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cc1e:	ee87 8a87 	vdiv.f32	s16, s15, s14
 800cc22:	b356      	cbz	r6, 800cc7a <acc_alg_biquad_q3_12_lowpass_coeffs+0x20a>
 800cc24:	f1b8 0f00 	cmp.w	r8, #0
 800cc28:	f040 8089 	bne.w	800cd3e <acc_alg_biquad_q3_12_lowpass_coeffs+0x2ce>
 800cc2c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800cc30:	ee78 6a27 	vadd.f32	s13, s16, s15
 800cc34:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800cc38:	ee76 7aa6 	vadd.f32	s15, s13, s13
 800cc3c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800cc40:	ee77 7a86 	vadd.f32	s15, s15, s12
 800cc44:	eef1 6ae7 	vsqrt.f32	s13, s15
 800cc48:	f5c5 5500 	rsb	r5, r5, #8192	; 0x2000
 800cc4c:	006d      	lsls	r5, r5, #1
 800cc4e:	eeb1 6ac7 	vsqrt.f32	s12, s14
 800cc52:	ee07 5a90 	vmov	s15, r5
 800cc56:	ee36 7ac8 	vsub.f32	s14, s13, s16
 800cc5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cc5e:	eef1 6ac7 	vsqrt.f32	s13, s14
 800cc62:	ee86 0a27 	vdiv.f32	s0, s12, s15
 800cc66:	ee20 0a26 	vmul.f32	s0, s0, s13
 800cc6a:	f000 fcf3 	bl	800d654 <acc_alg_basic_math_restricted_atan_f32>
 800cc6e:	ed9f 7a42 	vldr	s14, [pc, #264]	; 800cd78 <acc_alg_biquad_q3_12_lowpass_coeffs+0x308>
 800cc72:	eec0 7a07 	vdiv.f32	s15, s0, s14
 800cc76:	edc6 7a00 	vstr	s15, [r6]
 800cc7a:	2f00      	cmp	r7, #0
 800cc7c:	d071      	beq.n	800cd62 <acc_alg_biquad_q3_12_lowpass_coeffs+0x2f2>
 800cc7e:	eddf 7a43 	vldr	s15, [pc, #268]	; 800cd8c <acc_alg_biquad_q3_12_lowpass_coeffs+0x31c>
 800cc82:	eddf 6a43 	vldr	s13, [pc, #268]	; 800cd90 <acc_alg_biquad_q3_12_lowpass_coeffs+0x320>
 800cc86:	ee28 7a27 	vmul.f32	s14, s16, s15
 800cc8a:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800cc8e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cc92:	2001      	movs	r0, #1
 800cc94:	ee28 8a67 	vnmul.f32	s16, s16, s15
 800cc98:	eec8 7a26 	vdiv.f32	s15, s16, s13
 800cc9c:	ecbd 8b02 	vpop	{d8}
 800cca0:	edc7 7a00 	vstr	s15, [r7]
 800cca4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cca8:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 800cd94 <acc_alg_biquad_q3_12_lowpass_coeffs+0x324>
 800ccac:	e700      	b.n	800cab0 <acc_alg_biquad_q3_12_lowpass_coeffs+0x40>
 800ccae:	eddf 7a3a 	vldr	s15, [pc, #232]	; 800cd98 <acc_alg_biquad_q3_12_lowpass_coeffs+0x328>
 800ccb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ccb6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800ccba:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ccbe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ccc2:	ee17 4a90 	vmov	r4, s15
 800ccc6:	fb04 f304 	mul.w	r3, r4, r4
 800ccca:	009b      	lsls	r3, r3, #2
 800cccc:	f1c3 6380 	rsb	r3, r3, #67108864	; 0x4000000
 800ccd0:	ee07 3a90 	vmov	s15, r3
 800ccd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccd8:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800ccdc:	eeb1 7ae7 	vsqrt.f32	s14, s15
 800cce0:	ee77 7a26 	vadd.f32	s15, s14, s13
 800cce4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cce8:	ee17 5a90 	vmov	r5, s15
 800ccec:	2c00      	cmp	r4, #0
 800ccee:	f47f af5c 	bne.w	800cbaa <acc_alg_biquad_q3_12_lowpass_coeffs+0x13a>
 800ccf2:	f1b9 0f00 	cmp.w	r9, #0
 800ccf6:	d00b      	beq.n	800cd10 <acc_alg_biquad_q3_12_lowpass_coeffs+0x2a0>
 800ccf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ccfc:	f8a9 4002 	strh.w	r4, [r9, #2]
 800cd00:	f8a9 4004 	strh.w	r4, [r9, #4]
 800cd04:	f8a9 4006 	strh.w	r4, [r9, #6]
 800cd08:	f8a9 4008 	strh.w	r4, [r9, #8]
 800cd0c:	f8a9 3000 	strh.w	r3, [r9]
 800cd10:	b116      	cbz	r6, 800cd18 <acc_alg_biquad_q3_12_lowpass_coeffs+0x2a8>
 800cd12:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 800cd16:	6033      	str	r3, [r6, #0]
 800cd18:	b167      	cbz	r7, 800cd34 <acc_alg_biquad_q3_12_lowpass_coeffs+0x2c4>
 800cd1a:	ecbd 8b02 	vpop	{d8}
 800cd1e:	2300      	movs	r3, #0
 800cd20:	2000      	movs	r0, #0
 800cd22:	603b      	str	r3, [r7, #0]
 800cd24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd28:	2e00      	cmp	r6, #0
 800cd2a:	d0f5      	beq.n	800cd18 <acc_alg_biquad_q3_12_lowpass_coeffs+0x2a8>
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	6033      	str	r3, [r6, #0]
 800cd30:	2f00      	cmp	r7, #0
 800cd32:	d1f2      	bne.n	800cd1a <acc_alg_biquad_q3_12_lowpass_coeffs+0x2aa>
 800cd34:	ecbd 8b02 	vpop	{d8}
 800cd38:	4638      	mov	r0, r7
 800cd3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd3e:	eddf 6a17 	vldr	s13, [pc, #92]	; 800cd9c <acc_alg_biquad_q3_12_lowpass_coeffs+0x32c>
 800cd42:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800cd80 <acc_alg_biquad_q3_12_lowpass_coeffs+0x310>
 800cd46:	ed9f 6a16 	vldr	s12, [pc, #88]	; 800cda0 <acc_alg_biquad_q3_12_lowpass_coeffs+0x330>
 800cd4a:	ee78 6a26 	vadd.f32	s13, s16, s13
 800cd4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cd52:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800cd56:	ee77 7a86 	vadd.f32	s15, s15, s12
 800cd5a:	e773      	b.n	800cc44 <acc_alg_biquad_q3_12_lowpass_coeffs+0x1d4>
 800cd5c:	2f00      	cmp	r7, #0
 800cd5e:	f47f af45 	bne.w	800cbec <acc_alg_biquad_q3_12_lowpass_coeffs+0x17c>
 800cd62:	ecbd 8b02 	vpop	{d8}
 800cd66:	2001      	movs	r0, #1
 800cd68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd6c:	3effffde 	.word	0x3effffde
 800cd70:	48800000 	.word	0x48800000
 800cd74:	36800000 	.word	0x36800000
 800cd78:	40490fdb 	.word	0x40490fdb
 800cd7c:	3f9f8d77 	.word	0x3f9f8d77
 800cd80:	3fb504f3 	.word	0x3fb504f3
 800cd84:	45000000 	.word	0x45000000
 800cd88:	46000000 	.word	0x46000000
 800cd8c:	4113c6ef 	.word	0x4113c6ef
 800cd90:	42a646e1 	.word	0x42a646e1
 800cd94:	3fc90fdb 	.word	0x3fc90fdb
 800cd98:	45800000 	.word	0x45800000
 800cd9c:	3f15f61a 	.word	0x3f15f61a
 800cda0:	3f95f61a 	.word	0x3f95f61a

0800cda4 <acc_alg_biquad_q3_12_complex_direct_form_1_filtfilt_reduced_edge_transients>:
 800cda4:	b570      	push	{r4, r5, r6, lr}
 800cda6:	2300      	movs	r3, #0
 800cda8:	b082      	sub	sp, #8
 800cdaa:	4615      	mov	r5, r2
 800cdac:	460c      	mov	r4, r1
 800cdae:	4606      	mov	r6, r0
 800cdb0:	f7f3 fa12 	bl	80001d8 <acc_alg_biquad_q3_12_complex_direct_form_1>
 800cdb4:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
 800cdb8:	3b01      	subs	r3, #1
 800cdba:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800cdbe:	f834 3023 	ldrh.w	r3, [r4, r3, lsl #2]
 800cdc2:	8852      	ldrh	r2, [r2, #2]
 800cdc4:	f8ad 2006 	strh.w	r2, [sp, #6]
 800cdc8:	f8ad 3004 	strh.w	r3, [sp, #4]
 800cdcc:	9b01      	ldr	r3, [sp, #4]
 800cdce:	4630      	mov	r0, r6
 800cdd0:	462a      	mov	r2, r5
 800cdd2:	4621      	mov	r1, r4
 800cdd4:	b002      	add	sp, #8
 800cdd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cdda:	f7f3 b9f9 	b.w	80001d0 <acc_alg_biquad_q3_12_complex_direct_form_1_reverse>
 800cdde:	bf00      	nop

0800cde0 <acc_alg_iq_demodulation_q3_12_real>:
 800cde0:	ee20 1a01 	vmul.f32	s2, s0, s2
 800cde4:	ee60 0a20 	vmul.f32	s1, s0, s1
 800cde8:	eefd 7ac1 	vcvt.s32.f32	s15, s2
 800cdec:	eebd 0ae0 	vcvt.s32.f32	s0, s1
 800cdf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cdf4:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800cdf8:	ee31 1a67 	vsub.f32	s2, s2, s15
 800cdfc:	ee30 0ac0 	vsub.f32	s0, s1, s0
 800ce00:	eddf 7a26 	vldr	s15, [pc, #152]	; 800ce9c <acc_alg_iq_demodulation_q3_12_real+0xbc>
 800ce04:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800cea0 <acc_alg_iq_demodulation_q3_12_real+0xc0>
 800ce08:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 800ce0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce10:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ce14:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800ce18:	bfb4      	ite	lt
 800ce1a:	eeb0 6a66 	vmovlt.f32	s12, s13
 800ce1e:	eeb0 6a67 	vmovge.f32	s12, s15
 800ce22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce26:	bfb8      	it	lt
 800ce28:	eef0 7a66 	vmovlt.f32	s15, s13
 800ce2c:	ee31 1a06 	vadd.f32	s2, s2, s12
 800ce30:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ce34:	ee21 1a07 	vmul.f32	s2, s2, s14
 800ce38:	ee20 0a07 	vmul.f32	s0, s0, s14
 800ce3c:	b36a      	cbz	r2, 800ce9a <acc_alg_iq_demodulation_q3_12_real+0xba>
 800ce3e:	eefc 7ac1 	vcvt.u32.f32	s15, s2
 800ce42:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce46:	ee17 9a90 	vmov	r9, s15
 800ce4a:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800ce4e:	1e85      	subs	r5, r0, #2
 800ce50:	ee17 7a90 	vmov	r7, s15
 800ce54:	eb05 0842 	add.w	r8, r5, r2, lsl #1
 800ce58:	1c8e      	adds	r6, r1, #2
 800ce5a:	4648      	mov	r0, r9
 800ce5c:	f935 4f02 	ldrsh.w	r4, [r5, #2]!
 800ce60:	f000 fd04 	bl	800d86c <acc_alg_basic_math_q3_12_cos>
 800ce64:	4603      	mov	r3, r0
 800ce66:	fb04 f303 	mul.w	r3, r4, r3
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	bfb8      	it	lt
 800ce6e:	f603 73ff 	addwlt	r3, r3, #4095	; 0xfff
 800ce72:	131b      	asrs	r3, r3, #12
 800ce74:	4648      	mov	r0, r9
 800ce76:	f826 3c02 	strh.w	r3, [r6, #-2]
 800ce7a:	f000 fce1 	bl	800d840 <acc_alg_basic_math_q3_12_sin>
 800ce7e:	fb04 f000 	mul.w	r0, r4, r0
 800ce82:	2800      	cmp	r0, #0
 800ce84:	bfb8      	it	lt
 800ce86:	f600 70ff 	addwlt	r0, r0, #4095	; 0xfff
 800ce8a:	1300      	asrs	r0, r0, #12
 800ce8c:	45a8      	cmp	r8, r5
 800ce8e:	f826 0b04 	strh.w	r0, [r6], #4
 800ce92:	44b9      	add	r9, r7
 800ce94:	d1e1      	bne.n	800ce5a <acc_alg_iq_demodulation_q3_12_real+0x7a>
 800ce96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce9a:	4770      	bx	lr
 800ce9c:	00000000 	.word	0x00000000
 800cea0:	4f800000 	.word	0x4f800000

0800cea4 <acc_alg_iq_demodulation_q3_12_complex>:
 800cea4:	ee20 1a01 	vmul.f32	s2, s0, s2
 800cea8:	ee60 0a20 	vmul.f32	s1, s0, s1
 800ceac:	eefd 7ac1 	vcvt.s32.f32	s15, s2
 800ceb0:	eebd 0ae0 	vcvt.s32.f32	s0, s1
 800ceb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ceb8:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800cebc:	ee31 1a67 	vsub.f32	s2, s2, s15
 800cec0:	ee30 0ac0 	vsub.f32	s0, s1, s0
 800cec4:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800cf80 <acc_alg_iq_demodulation_q3_12_complex+0xdc>
 800cec8:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800cf84 <acc_alg_iq_demodulation_q3_12_complex+0xe0>
 800cecc:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 800ced0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ced4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ced8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800cedc:	bfb4      	ite	lt
 800cede:	eeb0 6a66 	vmovlt.f32	s12, s13
 800cee2:	eeb0 6a67 	vmovge.f32	s12, s15
 800cee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ceea:	bfb8      	it	lt
 800ceec:	eef0 7a66 	vmovlt.f32	s15, s13
 800cef0:	ee31 1a06 	vadd.f32	s2, s2, s12
 800cef4:	ee30 0a27 	vadd.f32	s0, s0, s15
 800cef8:	ee21 1a07 	vmul.f32	s2, s2, s14
 800cefc:	ee20 0a07 	vmul.f32	s0, s0, s14
 800cf00:	b3e9      	cbz	r1, 800cf7e <acc_alg_iq_demodulation_q3_12_complex+0xda>
 800cf02:	eefc 7ac1 	vcvt.u32.f32	s15, s2
 800cf06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf0a:	ee17 8a90 	vmov	r8, s15
 800cf0e:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800cf12:	4607      	mov	r7, r0
 800cf14:	ee17 5a90 	vmov	r5, s15
 800cf18:	eb00 0681 	add.w	r6, r0, r1, lsl #2
 800cf1c:	4640      	mov	r0, r8
 800cf1e:	f9b7 9000 	ldrsh.w	r9, [r7]
 800cf22:	f9b7 a002 	ldrsh.w	sl, [r7, #2]
 800cf26:	f000 fca1 	bl	800d86c <acc_alg_basic_math_q3_12_cos>
 800cf2a:	4604      	mov	r4, r0
 800cf2c:	4640      	mov	r0, r8
 800cf2e:	f000 fc87 	bl	800d840 <acc_alg_basic_math_q3_12_sin>
 800cf32:	fb09 f204 	mul.w	r2, r9, r4
 800cf36:	fb0a f100 	mul.w	r1, sl, r0
 800cf3a:	2a00      	cmp	r2, #0
 800cf3c:	fb04 f30a 	mul.w	r3, r4, sl
 800cf40:	bfb8      	it	lt
 800cf42:	f602 72ff 	addwlt	r2, r2, #4095	; 0xfff
 800cf46:	2900      	cmp	r1, #0
 800cf48:	fb09 f000 	mul.w	r0, r9, r0
 800cf4c:	bfb8      	it	lt
 800cf4e:	f601 71ff 	addwlt	r1, r1, #4095	; 0xfff
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	bfb8      	it	lt
 800cf56:	f603 73ff 	addwlt	r3, r3, #4095	; 0xfff
 800cf5a:	2800      	cmp	r0, #0
 800cf5c:	bfb8      	it	lt
 800cf5e:	f600 70ff 	addwlt	r0, r0, #4095	; 0xfff
 800cf62:	1312      	asrs	r2, r2, #12
 800cf64:	131b      	asrs	r3, r3, #12
 800cf66:	eba2 3221 	sub.w	r2, r2, r1, asr #12
 800cf6a:	eb03 3320 	add.w	r3, r3, r0, asr #12
 800cf6e:	803a      	strh	r2, [r7, #0]
 800cf70:	807b      	strh	r3, [r7, #2]
 800cf72:	3704      	adds	r7, #4
 800cf74:	42be      	cmp	r6, r7
 800cf76:	44a8      	add	r8, r5
 800cf78:	d1d0      	bne.n	800cf1c <acc_alg_iq_demodulation_q3_12_complex+0x78>
 800cf7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf7e:	4770      	bx	lr
 800cf80:	00000000 	.word	0x00000000
 800cf84:	4f800000 	.word	0x4f800000

0800cf88 <acc_alg_phase_estimation_q3_12>:
 800cf88:	2a01      	cmp	r2, #1
 800cf8a:	b4f0      	push	{r4, r5, r6, r7}
 800cf8c:	d94c      	bls.n	800d028 <acc_alg_phase_estimation_q3_12+0xa0>
 800cf8e:	eb00 0c82 	add.w	ip, r0, r2, lsl #2
 800cf92:	f1ac 0c04 	sub.w	ip, ip, #4
 800cf96:	4603      	mov	r3, r0
 800cf98:	f9b3 7000 	ldrsh.w	r7, [r3]
 800cf9c:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 800cfa0:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 800cfa4:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
 800cfa8:	1bed      	subs	r5, r5, r7
 800cfaa:	fb01 f505 	mul.w	r5, r1, r5
 800cfae:	1ba4      	subs	r4, r4, r6
 800cfb0:	2d00      	cmp	r5, #0
 800cfb2:	fb01 f404 	mul.w	r4, r1, r4
 800cfb6:	bfb8      	it	lt
 800cfb8:	f605 75ff 	addwlt	r5, r5, #4095	; 0xfff
 800cfbc:	2c00      	cmp	r4, #0
 800cfbe:	bfb8      	it	lt
 800cfc0:	f604 74ff 	addwlt	r4, r4, #4095	; 0xfff
 800cfc4:	eb07 3525 	add.w	r5, r7, r5, asr #12
 800cfc8:	eb06 3424 	add.w	r4, r6, r4, asr #12
 800cfcc:	809d      	strh	r5, [r3, #4]
 800cfce:	80dc      	strh	r4, [r3, #6]
 800cfd0:	3304      	adds	r3, #4
 800cfd2:	4563      	cmp	r3, ip
 800cfd4:	d1e0      	bne.n	800cf98 <acc_alg_phase_estimation_q3_12+0x10>
 800cfd6:	1e53      	subs	r3, r2, #1
 800cfd8:	3a02      	subs	r2, #2
 800cfda:	eb00 0483 	add.w	r4, r0, r3, lsl #2
 800cfde:	f930 6023 	ldrsh.w	r6, [r0, r3, lsl #2]
 800cfe2:	f9b4 5002 	ldrsh.w	r5, [r4, #2]
 800cfe6:	1c87      	adds	r7, r0, #2
 800cfe8:	f930 4022 	ldrsh.w	r4, [r0, r2, lsl #2]
 800cfec:	1ba4      	subs	r4, r4, r6
 800cfee:	fb01 f404 	mul.w	r4, r1, r4
 800cff2:	2c00      	cmp	r4, #0
 800cff4:	bfb8      	it	lt
 800cff6:	f604 74ff 	addwlt	r4, r4, #4095	; 0xfff
 800cffa:	eb06 3624 	add.w	r6, r6, r4, asr #12
 800cffe:	b236      	sxth	r6, r6
 800d000:	f820 6022 	strh.w	r6, [r0, r2, lsl #2]
 800d004:	f937 3022 	ldrsh.w	r3, [r7, r2, lsl #2]
 800d008:	1b5b      	subs	r3, r3, r5
 800d00a:	fb01 f303 	mul.w	r3, r1, r3
 800d00e:	2b00      	cmp	r3, #0
 800d010:	bfb8      	it	lt
 800d012:	f603 73ff 	addwlt	r3, r3, #4095	; 0xfff
 800d016:	eb05 3523 	add.w	r5, r5, r3, asr #12
 800d01a:	b22d      	sxth	r5, r5
 800d01c:	f827 5022 	strh.w	r5, [r7, r2, lsl #2]
 800d020:	3a01      	subs	r2, #1
 800d022:	d2e1      	bcs.n	800cfe8 <acc_alg_phase_estimation_q3_12+0x60>
 800d024:	bcf0      	pop	{r4, r5, r6, r7}
 800d026:	4770      	bx	lr
 800d028:	d0fc      	beq.n	800d024 <acc_alg_phase_estimation_q3_12+0x9c>
 800d02a:	f06f 0201 	mvn.w	r2, #1
 800d02e:	f04f 33ff 	mov.w	r3, #4294967295
 800d032:	e7d2      	b.n	800cfda <acc_alg_phase_estimation_q3_12+0x52>

0800d034 <acc_alg_power_bins>:
 800d034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d038:	2900      	cmp	r1, #0
 800d03a:	d03e      	beq.n	800d0ba <acc_alg_power_bins+0x86>
 800d03c:	1e87      	subs	r7, r0, #2
 800d03e:	eb07 0c41 	add.w	ip, r7, r1, lsl #1
 800d042:	463e      	mov	r6, r7
 800d044:	004d      	lsls	r5, r1, #1
 800d046:	2400      	movs	r4, #0
 800d048:	f836 ef02 	ldrh.w	lr, [r6, #2]!
 800d04c:	4566      	cmp	r6, ip
 800d04e:	4474      	add	r4, lr
 800d050:	d1fa      	bne.n	800d048 <acc_alg_power_bins+0x14>
 800d052:	fbb4 f4f1 	udiv	r4, r4, r1
 800d056:	b2a6      	uxth	r6, r4
 800d058:	f837 4f02 	ldrh.w	r4, [r7, #2]!
 800d05c:	42b4      	cmp	r4, r6
 800d05e:	bf8c      	ite	hi
 800d060:	1ba4      	subhi	r4, r4, r6
 800d062:	1b34      	subls	r4, r6, r4
 800d064:	b2a4      	uxth	r4, r4
 800d066:	4567      	cmp	r7, ip
 800d068:	803c      	strh	r4, [r7, #0]
 800d06a:	d1f5      	bne.n	800d058 <acc_alg_power_bins+0x24>
 800d06c:	b31b      	cbz	r3, 800d0b6 <acc_alg_power_bins+0x82>
 800d06e:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800d072:	f04f 0800 	mov.w	r8, #0
 800d076:	e00c      	b.n	800d092 <acc_alg_power_bins+0x5e>
 800d078:	f8a2 8000 	strh.w	r8, [r2]
 800d07c:	3b01      	subs	r3, #1
 800d07e:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800d082:	eba1 0106 	sub.w	r1, r1, r6
 800d086:	f1ae 0e02 	sub.w	lr, lr, #2
 800d08a:	f102 0202 	add.w	r2, r2, #2
 800d08e:	d012      	beq.n	800d0b6 <acc_alg_power_bins+0x82>
 800d090:	004d      	lsls	r5, r1, #1
 800d092:	441d      	add	r5, r3
 800d094:	4575      	cmp	r5, lr
 800d096:	fbb5 f6fe 	udiv	r6, r5, lr
 800d09a:	d3ed      	bcc.n	800d078 <acc_alg_power_bins+0x44>
 800d09c:	2500      	movs	r5, #0
 800d09e:	462c      	mov	r4, r5
 800d0a0:	1e87      	subs	r7, r0, #2
 800d0a2:	f837 cf02 	ldrh.w	ip, [r7, #2]!
 800d0a6:	3401      	adds	r4, #1
 800d0a8:	42a6      	cmp	r6, r4
 800d0aa:	4465      	add	r5, ip
 800d0ac:	d8f9      	bhi.n	800d0a2 <acc_alg_power_bins+0x6e>
 800d0ae:	fbb5 f5f6 	udiv	r5, r5, r6
 800d0b2:	8015      	strh	r5, [r2, #0]
 800d0b4:	e7e2      	b.n	800d07c <acc_alg_power_bins+0x48>
 800d0b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0ba:	4802      	ldr	r0, [pc, #8]	; (800d0c4 <acc_alg_power_bins+0x90>)
 800d0bc:	2124      	movs	r1, #36	; 0x24
 800d0be:	f7fb fd1b 	bl	8008af8 <acc_assert_fail>
 800d0c2:	bf00      	nop
 800d0c4:	08015170 	.word	0x08015170

0800d0c8 <acc_confprogram_modify_bin_sensor>:
 800d0c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0cc:	b082      	sub	sp, #8
 800d0ce:	e9dd 690a 	ldrd	r6, r9, [sp, #40]	; 0x28
 800d0d2:	2501      	movs	r5, #1
 800d0d4:	409d      	lsls	r5, r3
 800d0d6:	42b5      	cmp	r5, r6
 800d0d8:	461c      	mov	r4, r3
 800d0da:	4607      	mov	r7, r0
 800d0dc:	468a      	mov	sl, r1
 800d0de:	4690      	mov	r8, r2
 800d0e0:	d809      	bhi.n	800d0f6 <acc_confprogram_modify_bin_sensor+0x2e>
 800d0e2:	4b10      	ldr	r3, [pc, #64]	; (800d124 <acc_confprogram_modify_bin_sensor+0x5c>)
 800d0e4:	9600      	str	r6, [sp, #0]
 800d0e6:	3d01      	subs	r5, #1
 800d0e8:	9501      	str	r5, [sp, #4]
 800d0ea:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 800d0ec:	4a0e      	ldr	r2, [pc, #56]	; (800d128 <acc_confprogram_modify_bin_sensor+0x60>)
 800d0ee:	490f      	ldr	r1, [pc, #60]	; (800d12c <acc_confprogram_modify_bin_sensor+0x64>)
 800d0f0:	4653      	mov	r3, sl
 800d0f2:	2000      	movs	r0, #0
 800d0f4:	47a8      	blx	r5
 800d0f6:	4651      	mov	r1, sl
 800d0f8:	4638      	mov	r0, r7
 800d0fa:	f7fb fe7f 	bl	8008dfc <acc_sensor_conf_read_instr>
 800d0fe:	f1c4 0420 	rsb	r4, r4, #32
 800d102:	f04f 35ff 	mov.w	r5, #4294967295
 800d106:	40e5      	lsrs	r5, r4
 800d108:	fa05 f408 	lsl.w	r4, r5, r8
 800d10c:	ea20 0204 	bic.w	r2, r0, r4
 800d110:	fa06 f608 	lsl.w	r6, r6, r8
 800d114:	4651      	mov	r1, sl
 800d116:	4638      	mov	r0, r7
 800d118:	4332      	orrs	r2, r6
 800d11a:	464b      	mov	r3, r9
 800d11c:	b002      	add	sp, #8
 800d11e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d122:	4718      	bx	r3
 800d124:	20000640 	.word	0x20000640
 800d128:	08015180 	.word	0x08015180
 800d12c:	080151b8 	.word	0x080151b8

0800d130 <acc_confprogram_modify_bin>:
 800d130:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d134:	b085      	sub	sp, #20
 800d136:	f04f 0c01 	mov.w	ip, #1
 800d13a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800d13c:	fa0c fc03 	lsl.w	ip, ip, r3
 800d140:	45b4      	cmp	ip, r6
 800d142:	461d      	mov	r5, r3
 800d144:	4680      	mov	r8, r0
 800d146:	460c      	mov	r4, r1
 800d148:	4617      	mov	r7, r2
 800d14a:	d80b      	bhi.n	800d164 <acc_confprogram_modify_bin+0x34>
 800d14c:	4b13      	ldr	r3, [pc, #76]	; (800d19c <acc_confprogram_modify_bin+0x6c>)
 800d14e:	9600      	str	r6, [sp, #0]
 800d150:	f10c 32ff 	add.w	r2, ip, #4294967295
 800d154:	9201      	str	r2, [sp, #4]
 800d156:	f8d3 9034 	ldr.w	r9, [r3, #52]	; 0x34
 800d15a:	4a11      	ldr	r2, [pc, #68]	; (800d1a0 <acc_confprogram_modify_bin+0x70>)
 800d15c:	4911      	ldr	r1, [pc, #68]	; (800d1a4 <acc_confprogram_modify_bin+0x74>)
 800d15e:	4623      	mov	r3, r4
 800d160:	2000      	movs	r0, #0
 800d162:	47c8      	blx	r9
 800d164:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 800d168:	4620      	mov	r0, r4
 800d16a:	a902      	add	r1, sp, #8
 800d16c:	2201      	movs	r2, #1
 800d16e:	f7fb ff8d 	bl	800908c <acc_utils_transfer_buffer_to_uint32>
 800d172:	f1c5 0520 	rsb	r5, r5, #32
 800d176:	f04f 33ff 	mov.w	r3, #4294967295
 800d17a:	9902      	ldr	r1, [sp, #8]
 800d17c:	40eb      	lsrs	r3, r5
 800d17e:	40bb      	lsls	r3, r7
 800d180:	fa06 f207 	lsl.w	r2, r6, r7
 800d184:	ea21 0303 	bic.w	r3, r1, r3
 800d188:	4313      	orrs	r3, r2
 800d18a:	4621      	mov	r1, r4
 800d18c:	2201      	movs	r2, #1
 800d18e:	a803      	add	r0, sp, #12
 800d190:	9303      	str	r3, [sp, #12]
 800d192:	f7fb ff6d 	bl	8009070 <acc_utils_uint32_to_transfer_buffer>
 800d196:	b005      	add	sp, #20
 800d198:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d19c:	20000640 	.word	0x20000640
 800d1a0:	080151c4 	.word	0x080151c4
 800d1a4:	080151b8 	.word	0x080151b8

0800d1a8 <acc_confprogram_modify_runif_sensor>:
 800d1a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1ac:	4614      	mov	r4, r2
 800d1ae:	b082      	sub	sp, #8
 800d1b0:	f851 5024 	ldr.w	r5, [r1, r4, lsl #2]
 800d1b4:	f89d 2020 	ldrb.w	r2, [sp, #32]
 800d1b8:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 800d1bc:	f025 050f 	bic.w	r5, r5, #15
 800d1c0:	4606      	mov	r6, r0
 800d1c2:	b1b2      	cbz	r2, 800d1f2 <acc_confprogram_modify_runif_sensor+0x4a>
 800d1c4:	461f      	mov	r7, r3
 800d1c6:	f7f9 fa73 	bl	80066b0 <acc_rss_integration_log_level>
 800d1ca:	2803      	cmp	r0, #3
 800d1cc:	ea45 0507 	orr.w	r5, r5, r7
 800d1d0:	d907      	bls.n	800d1e2 <acc_confprogram_modify_runif_sensor+0x3a>
 800d1d2:	4b0e      	ldr	r3, [pc, #56]	; (800d20c <acc_confprogram_modify_runif_sensor+0x64>)
 800d1d4:	9700      	str	r7, [sp, #0]
 800d1d6:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 800d1d8:	4a0d      	ldr	r2, [pc, #52]	; (800d210 <acc_confprogram_modify_runif_sensor+0x68>)
 800d1da:	490e      	ldr	r1, [pc, #56]	; (800d214 <acc_confprogram_modify_runif_sensor+0x6c>)
 800d1dc:	4623      	mov	r3, r4
 800d1de:	2004      	movs	r0, #4
 800d1e0:	47b8      	blx	r7
 800d1e2:	462a      	mov	r2, r5
 800d1e4:	4621      	mov	r1, r4
 800d1e6:	4630      	mov	r0, r6
 800d1e8:	4643      	mov	r3, r8
 800d1ea:	b002      	add	sp, #8
 800d1ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d1f0:	4718      	bx	r3
 800d1f2:	f7f9 fa5d 	bl	80066b0 <acc_rss_integration_log_level>
 800d1f6:	2803      	cmp	r0, #3
 800d1f8:	d9f3      	bls.n	800d1e2 <acc_confprogram_modify_runif_sensor+0x3a>
 800d1fa:	4b04      	ldr	r3, [pc, #16]	; (800d20c <acc_confprogram_modify_runif_sensor+0x64>)
 800d1fc:	4a06      	ldr	r2, [pc, #24]	; (800d218 <acc_confprogram_modify_runif_sensor+0x70>)
 800d1fe:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 800d200:	4904      	ldr	r1, [pc, #16]	; (800d214 <acc_confprogram_modify_runif_sensor+0x6c>)
 800d202:	4623      	mov	r3, r4
 800d204:	2004      	movs	r0, #4
 800d206:	47b8      	blx	r7
 800d208:	e7eb      	b.n	800d1e2 <acc_confprogram_modify_runif_sensor+0x3a>
 800d20a:	bf00      	nop
 800d20c:	20000640 	.word	0x20000640
 800d210:	080151fc 	.word	0x080151fc
 800d214:	080151b8 	.word	0x080151b8
 800d218:	08015234 	.word	0x08015234

0800d21c <acc_confprogram_modify_runif>:
 800d21c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d220:	eb00 0542 	add.w	r5, r0, r2, lsl #1
 800d224:	b084      	sub	sp, #16
 800d226:	4616      	mov	r6, r2
 800d228:	460f      	mov	r7, r1
 800d22a:	4628      	mov	r0, r5
 800d22c:	2201      	movs	r2, #1
 800d22e:	a902      	add	r1, sp, #8
 800d230:	4698      	mov	r8, r3
 800d232:	f7fb ff2b 	bl	800908c <acc_utils_transfer_buffer_to_uint32>
 800d236:	9c02      	ldr	r4, [sp, #8]
 800d238:	f024 040f 	bic.w	r4, r4, #15
 800d23c:	9403      	str	r4, [sp, #12]
 800d23e:	f1b8 0f00 	cmp.w	r8, #0
 800d242:	d015      	beq.n	800d270 <acc_confprogram_modify_runif+0x54>
 800d244:	433c      	orrs	r4, r7
 800d246:	9403      	str	r4, [sp, #12]
 800d248:	f7f9 fa32 	bl	80066b0 <acc_rss_integration_log_level>
 800d24c:	2803      	cmp	r0, #3
 800d24e:	d907      	bls.n	800d260 <acc_confprogram_modify_runif+0x44>
 800d250:	4a0e      	ldr	r2, [pc, #56]	; (800d28c <acc_confprogram_modify_runif+0x70>)
 800d252:	9700      	str	r7, [sp, #0]
 800d254:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800d256:	490e      	ldr	r1, [pc, #56]	; (800d290 <acc_confprogram_modify_runif+0x74>)
 800d258:	4a0e      	ldr	r2, [pc, #56]	; (800d294 <acc_confprogram_modify_runif+0x78>)
 800d25a:	0873      	lsrs	r3, r6, #1
 800d25c:	2004      	movs	r0, #4
 800d25e:	47a0      	blx	r4
 800d260:	4629      	mov	r1, r5
 800d262:	2201      	movs	r2, #1
 800d264:	a803      	add	r0, sp, #12
 800d266:	f7fb ff03 	bl	8009070 <acc_utils_uint32_to_transfer_buffer>
 800d26a:	b004      	add	sp, #16
 800d26c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d270:	f7f9 fa1e 	bl	80066b0 <acc_rss_integration_log_level>
 800d274:	2803      	cmp	r0, #3
 800d276:	d9f3      	bls.n	800d260 <acc_confprogram_modify_runif+0x44>
 800d278:	4a04      	ldr	r2, [pc, #16]	; (800d28c <acc_confprogram_modify_runif+0x70>)
 800d27a:	9700      	str	r7, [sp, #0]
 800d27c:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800d27e:	4904      	ldr	r1, [pc, #16]	; (800d290 <acc_confprogram_modify_runif+0x74>)
 800d280:	4a05      	ldr	r2, [pc, #20]	; (800d298 <acc_confprogram_modify_runif+0x7c>)
 800d282:	0873      	lsrs	r3, r6, #1
 800d284:	2004      	movs	r0, #4
 800d286:	47a0      	blx	r4
 800d288:	e7ea      	b.n	800d260 <acc_confprogram_modify_runif+0x44>
 800d28a:	bf00      	nop
 800d28c:	20000640 	.word	0x20000640
 800d290:	080151b8 	.word	0x080151b8
 800d294:	080151fc 	.word	0x080151fc
 800d298:	08015264 	.word	0x08015264

0800d29c <acc_confprogram_patch_offset>:
 800d29c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2a0:	b083      	sub	sp, #12
 800d2a2:	4680      	mov	r8, r0
 800d2a4:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 800d2a8:	460d      	mov	r5, r1
 800d2aa:	4617      	mov	r7, r2
 800d2ac:	461e      	mov	r6, r3
 800d2ae:	f7f9 f9ff 	bl	80066b0 <acc_rss_integration_log_level>
 800d2b2:	2803      	cmp	r0, #3
 800d2b4:	d909      	bls.n	800d2ca <acc_confprogram_patch_offset+0x2e>
 800d2b6:	4b2f      	ldr	r3, [pc, #188]	; (800d374 <acc_confprogram_patch_offset+0xd8>)
 800d2b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d2ba:	9200      	str	r2, [sp, #0]
 800d2bc:	f8d3 9034 	ldr.w	r9, [r3, #52]	; 0x34
 800d2c0:	4a2d      	ldr	r2, [pc, #180]	; (800d378 <acc_confprogram_patch_offset+0xdc>)
 800d2c2:	492e      	ldr	r1, [pc, #184]	; (800d37c <acc_confprogram_patch_offset+0xe0>)
 800d2c4:	4623      	mov	r3, r4
 800d2c6:	2004      	movs	r0, #4
 800d2c8:	47c8      	blx	r9
 800d2ca:	eb06 06c4 	add.w	r6, r6, r4, lsl #3
 800d2ce:	8871      	ldrh	r1, [r6, #2]
 800d2d0:	b399      	cbz	r1, 800d33a <acc_confprogram_patch_offset+0x9e>
 800d2d2:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 800d374 <acc_confprogram_patch_offset+0xd8>
 800d2d6:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 800d380 <acc_confprogram_patch_offset+0xe4>
 800d2da:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 800d37c <acc_confprogram_patch_offset+0xe0>
 800d2de:	2400      	movs	r4, #0
 800d2e0:	e00b      	b.n	800d2fa <acc_confprogram_patch_offset+0x5e>
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d039      	beq.n	800d35a <acc_confprogram_patch_offset+0xbe>
 800d2e6:	4649      	mov	r1, r9
 800d2e8:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 800d2ec:	4652      	mov	r2, sl
 800d2ee:	2000      	movs	r0, #0
 800d2f0:	4798      	blx	r3
 800d2f2:	8871      	ldrh	r1, [r6, #2]
 800d2f4:	3401      	adds	r4, #1
 800d2f6:	42a1      	cmp	r1, r4
 800d2f8:	d91f      	bls.n	800d33a <acc_confprogram_patch_offset+0x9e>
 800d2fa:	6873      	ldr	r3, [r6, #4]
 800d2fc:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800d300:	0042      	lsls	r2, r0, #1
 800d302:	b292      	uxth	r2, r2
 800d304:	42aa      	cmp	r2, r5
 800d306:	eb05 0c07 	add.w	ip, r5, r7
 800d30a:	f3c0 7301 	ubfx	r3, r0, #28, #2
 800d30e:	d3f1      	bcc.n	800d2f4 <acc_confprogram_patch_offset+0x58>
 800d310:	4562      	cmp	r2, ip
 800d312:	daef      	bge.n	800d2f4 <acc_confprogram_patch_offset+0x58>
 800d314:	2b01      	cmp	r3, #1
 800d316:	d013      	beq.n	800d340 <acc_confprogram_patch_offset+0xa4>
 800d318:	2b02      	cmp	r3, #2
 800d31a:	d1e2      	bne.n	800d2e2 <acc_confprogram_patch_offset+0x46>
 800d31c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d31e:	1b52      	subs	r2, r2, r5
 800d320:	fab3 f383 	clz	r3, r3
 800d324:	f3c0 4103 	ubfx	r1, r0, #16, #4
 800d328:	b292      	uxth	r2, r2
 800d32a:	095b      	lsrs	r3, r3, #5
 800d32c:	4640      	mov	r0, r8
 800d32e:	f7ff ff75 	bl	800d21c <acc_confprogram_modify_runif>
 800d332:	8871      	ldrh	r1, [r6, #2]
 800d334:	3401      	adds	r4, #1
 800d336:	42a1      	cmp	r1, r4
 800d338:	d8df      	bhi.n	800d2fa <acc_confprogram_patch_offset+0x5e>
 800d33a:	b003      	add	sp, #12
 800d33c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d340:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d342:	1b52      	subs	r2, r2, r5
 800d344:	3b00      	subs	r3, #0
 800d346:	f3c0 4103 	ubfx	r1, r0, #16, #4
 800d34a:	b292      	uxth	r2, r2
 800d34c:	bf18      	it	ne
 800d34e:	2301      	movne	r3, #1
 800d350:	4640      	mov	r0, r8
 800d352:	f7ff ff63 	bl	800d21c <acc_confprogram_modify_runif>
 800d356:	8871      	ldrh	r1, [r6, #2]
 800d358:	e7cc      	b.n	800d2f4 <acc_confprogram_patch_offset+0x58>
 800d35a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d35c:	9300      	str	r3, [sp, #0]
 800d35e:	1b52      	subs	r2, r2, r5
 800d360:	b291      	uxth	r1, r2
 800d362:	f3c0 5344 	ubfx	r3, r0, #21, #5
 800d366:	f3c0 4204 	ubfx	r2, r0, #16, #5
 800d36a:	4640      	mov	r0, r8
 800d36c:	f7ff fee0 	bl	800d130 <acc_confprogram_modify_bin>
 800d370:	8871      	ldrh	r1, [r6, #2]
 800d372:	e7bf      	b.n	800d2f4 <acc_confprogram_patch_offset+0x58>
 800d374:	20000640 	.word	0x20000640
 800d378:	080152c0 	.word	0x080152c0
 800d37c:	080151b8 	.word	0x080151b8
 800d380:	08015298 	.word	0x08015298

0800d384 <acc_confprogram_live_patch>:
 800d384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d388:	b083      	sub	sp, #12
 800d38a:	4606      	mov	r6, r0
 800d38c:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 800d390:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 800d394:	468b      	mov	fp, r1
 800d396:	4617      	mov	r7, r2
 800d398:	461d      	mov	r5, r3
 800d39a:	f7f9 f989 	bl	80066b0 <acc_rss_integration_log_level>
 800d39e:	2803      	cmp	r0, #3
 800d3a0:	d909      	bls.n	800d3b6 <acc_confprogram_live_patch+0x32>
 800d3a2:	4b2f      	ldr	r3, [pc, #188]	; (800d460 <acc_confprogram_live_patch+0xdc>)
 800d3a4:	f8cd a000 	str.w	sl, [sp]
 800d3a8:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 800d3ac:	4a2d      	ldr	r2, [pc, #180]	; (800d464 <acc_confprogram_live_patch+0xe0>)
 800d3ae:	492e      	ldr	r1, [pc, #184]	; (800d468 <acc_confprogram_live_patch+0xe4>)
 800d3b0:	4623      	mov	r3, r4
 800d3b2:	2004      	movs	r0, #4
 800d3b4:	47c0      	blx	r8
 800d3b6:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800d3ba:	886b      	ldrh	r3, [r5, #2]
 800d3bc:	b373      	cbz	r3, 800d41c <acc_confprogram_live_patch+0x98>
 800d3be:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 800d46c <acc_confprogram_live_patch+0xe8>
 800d3c2:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 800d468 <acc_confprogram_live_patch+0xe4>
 800d3c6:	2400      	movs	r4, #0
 800d3c8:	e008      	b.n	800d3dc <acc_confprogram_live_patch+0x58>
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d03a      	beq.n	800d444 <acc_confprogram_live_patch+0xc0>
 800d3ce:	4b24      	ldr	r3, [pc, #144]	; (800d460 <acc_confprogram_live_patch+0xdc>)
 800d3d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3d2:	4798      	blx	r3
 800d3d4:	886b      	ldrh	r3, [r5, #2]
 800d3d6:	3401      	adds	r4, #1
 800d3d8:	42a3      	cmp	r3, r4
 800d3da:	d91f      	bls.n	800d41c <acc_confprogram_live_patch+0x98>
 800d3dc:	686b      	ldr	r3, [r5, #4]
 800d3de:	f853 c024 	ldr.w	ip, [r3, r4, lsl #2]
 800d3e2:	f3cc 7301 	ubfx	r3, ip, #28, #2
 800d3e6:	2b01      	cmp	r3, #1
 800d3e8:	d01b      	beq.n	800d422 <acc_confprogram_live_patch+0x9e>
 800d3ea:	2b02      	cmp	r3, #2
 800d3ec:	464a      	mov	r2, r9
 800d3ee:	4641      	mov	r1, r8
 800d3f0:	f04f 0000 	mov.w	r0, #0
 800d3f4:	d1e9      	bne.n	800d3ca <acc_confprogram_live_patch+0x46>
 800d3f6:	990e      	ldr	r1, [sp, #56]	; 0x38
 800d3f8:	faba f38a 	clz	r3, sl
 800d3fc:	095b      	lsrs	r3, r3, #5
 800d3fe:	eb07 020c 	add.w	r2, r7, ip
 800d402:	e9cd 3100 	strd	r3, r1, [sp]
 800d406:	b292      	uxth	r2, r2
 800d408:	f3cc 4303 	ubfx	r3, ip, #16, #4
 800d40c:	4659      	mov	r1, fp
 800d40e:	4630      	mov	r0, r6
 800d410:	f7ff feca 	bl	800d1a8 <acc_confprogram_modify_runif_sensor>
 800d414:	886b      	ldrh	r3, [r5, #2]
 800d416:	3401      	adds	r4, #1
 800d418:	42a3      	cmp	r3, r4
 800d41a:	d8df      	bhi.n	800d3dc <acc_confprogram_live_patch+0x58>
 800d41c:	b003      	add	sp, #12
 800d41e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d422:	f1ba 0100 	subs.w	r1, sl, #0
 800d426:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d428:	9301      	str	r3, [sp, #4]
 800d42a:	bf18      	it	ne
 800d42c:	2101      	movne	r1, #1
 800d42e:	eb07 020c 	add.w	r2, r7, ip
 800d432:	9100      	str	r1, [sp, #0]
 800d434:	b292      	uxth	r2, r2
 800d436:	f3cc 4303 	ubfx	r3, ip, #16, #4
 800d43a:	4659      	mov	r1, fp
 800d43c:	4630      	mov	r0, r6
 800d43e:	f7ff feb3 	bl	800d1a8 <acc_confprogram_modify_runif_sensor>
 800d442:	e7c7      	b.n	800d3d4 <acc_confprogram_live_patch+0x50>
 800d444:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d446:	eb07 010c 	add.w	r1, r7, ip
 800d44a:	e9cd a300 	strd	sl, r3, [sp]
 800d44e:	b289      	uxth	r1, r1
 800d450:	f3cc 5344 	ubfx	r3, ip, #21, #5
 800d454:	f3cc 4204 	ubfx	r2, ip, #16, #5
 800d458:	4630      	mov	r0, r6
 800d45a:	f7ff fe35 	bl	800d0c8 <acc_confprogram_modify_bin_sensor>
 800d45e:	e7b9      	b.n	800d3d4 <acc_confprogram_live_patch+0x50>
 800d460:	20000640 	.word	0x20000640
 800d464:	080152bc 	.word	0x080152bc
 800d468:	080151b8 	.word	0x080151b8
 800d46c:	080152e0 	.word	0x080152e0

0800d470 <acc_confprogram_get_default_value>:
 800d470:	f830 0031 	ldrh.w	r0, [r0, r1, lsl #3]
 800d474:	4770      	bx	lr
 800d476:	bf00      	nop

0800d478 <acc_confprogram_copy>:
 800d478:	b152      	cbz	r2, 800d490 <acc_confprogram_copy+0x18>
 800d47a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800d47e:	3804      	subs	r0, #4
 800d480:	f850 3f04 	ldr.w	r3, [r0, #4]!
 800d484:	804b      	strh	r3, [r1, #2]
 800d486:	0c1b      	lsrs	r3, r3, #16
 800d488:	800b      	strh	r3, [r1, #0]
 800d48a:	3104      	adds	r1, #4
 800d48c:	4291      	cmp	r1, r2
 800d48e:	d1f7      	bne.n	800d480 <acc_confprogram_copy+0x8>
 800d490:	4770      	bx	lr
 800d492:	bf00      	nop

0800d494 <acc_diagnostic_log_set_scope>:
 800d494:	4b02      	ldr	r3, [pc, #8]	; (800d4a0 <acc_diagnostic_log_set_scope+0xc>)
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	b10b      	cbz	r3, 800d49e <acc_diagnostic_log_set_scope+0xa>
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	4718      	bx	r3
 800d49e:	4770      	bx	lr
 800d4a0:	200004f0 	.word	0x200004f0

0800d4a4 <acc_diagnostic_log_declare_parameter>:
 800d4a4:	4b02      	ldr	r3, [pc, #8]	; (800d4b0 <acc_diagnostic_log_declare_parameter+0xc>)
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	b10b      	cbz	r3, 800d4ae <acc_diagnostic_log_declare_parameter+0xa>
 800d4aa:	685b      	ldr	r3, [r3, #4]
 800d4ac:	4718      	bx	r3
 800d4ae:	4770      	bx	lr
 800d4b0:	200004f0 	.word	0x200004f0

0800d4b4 <acc_diagnostic_log_set_parameter>:
 800d4b4:	4b02      	ldr	r3, [pc, #8]	; (800d4c0 <acc_diagnostic_log_set_parameter+0xc>)
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	b10b      	cbz	r3, 800d4be <acc_diagnostic_log_set_parameter+0xa>
 800d4ba:	689b      	ldr	r3, [r3, #8]
 800d4bc:	4718      	bx	r3
 800d4be:	4770      	bx	lr
 800d4c0:	200004f0 	.word	0x200004f0

0800d4c4 <acc_diagnostic_log_array>:
 800d4c4:	4b02      	ldr	r3, [pc, #8]	; (800d4d0 <acc_diagnostic_log_array+0xc>)
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	b10b      	cbz	r3, 800d4ce <acc_diagnostic_log_array+0xa>
 800d4ca:	68db      	ldr	r3, [r3, #12]
 800d4cc:	4718      	bx	r3
 800d4ce:	4770      	bx	lr
 800d4d0:	200004f0 	.word	0x200004f0

0800d4d4 <acc_diagnostic_log_scalar>:
 800d4d4:	4b02      	ldr	r3, [pc, #8]	; (800d4e0 <acc_diagnostic_log_scalar+0xc>)
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	b10b      	cbz	r3, 800d4de <acc_diagnostic_log_scalar+0xa>
 800d4da:	695b      	ldr	r3, [r3, #20]
 800d4dc:	4718      	bx	r3
 800d4de:	4770      	bx	lr
 800d4e0:	200004f0 	.word	0x200004f0

0800d4e4 <acc_diagnostic_log_data_u16>:
 800d4e4:	4b02      	ldr	r3, [pc, #8]	; (800d4f0 <acc_diagnostic_log_data_u16+0xc>)
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	b10b      	cbz	r3, 800d4ee <acc_diagnostic_log_data_u16+0xa>
 800d4ea:	6a1b      	ldr	r3, [r3, #32]
 800d4ec:	4718      	bx	r3
 800d4ee:	4770      	bx	lr
 800d4f0:	200004f0 	.word	0x200004f0

0800d4f4 <acc_diagnostic_log_data_i16>:
 800d4f4:	4b02      	ldr	r3, [pc, #8]	; (800d500 <acc_diagnostic_log_data_i16+0xc>)
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	b10b      	cbz	r3, 800d4fe <acc_diagnostic_log_data_i16+0xa>
 800d4fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4fc:	4718      	bx	r3
 800d4fe:	4770      	bx	lr
 800d500:	200004f0 	.word	0x200004f0

0800d504 <acc_diagnostic_log_data_u8>:
 800d504:	4b02      	ldr	r3, [pc, #8]	; (800d510 <acc_diagnostic_log_data_u8+0xc>)
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	b10b      	cbz	r3, 800d50e <acc_diagnostic_log_data_u8+0xa>
 800d50a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d50c:	4718      	bx	r3
 800d50e:	4770      	bx	lr
 800d510:	200004f0 	.word	0x200004f0

0800d514 <acc_image_a111_r2c_cbank_and_vana_calibration_get>:
 800d514:	4800      	ldr	r0, [pc, #0]	; (800d518 <acc_image_a111_r2c_cbank_and_vana_calibration_get+0x4>)
 800d516:	4770      	bx	lr
 800d518:	080153c0 	.word	0x080153c0

0800d51c <acc_image_a111_r2c_cbank_and_vana_calibration_param_table_get>:
 800d51c:	4800      	ldr	r0, [pc, #0]	; (800d520 <acc_image_a111_r2c_cbank_and_vana_calibration_param_table_get+0x4>)
 800d51e:	4770      	bx	lr
 800d520:	08015a18 	.word	0x08015a18

0800d524 <acc_image_a111_r2c_rx_fine_dip_calibration_get>:
 800d524:	4800      	ldr	r0, [pc, #0]	; (800d528 <acc_image_a111_r2c_rx_fine_dip_calibration_get+0x4>)
 800d526:	4770      	bx	lr
 800d528:	08015da8 	.word	0x08015da8

0800d52c <acc_image_a111_r2c_rx_fine_dip_calibration_param_table_get>:
 800d52c:	4800      	ldr	r0, [pc, #0]	; (800d530 <acc_image_a111_r2c_rx_fine_dip_calibration_param_table_get+0x4>)
 800d52e:	4770      	bx	lr
 800d530:	08016b04 	.word	0x08016b04

0800d534 <acc_image_a111_r2c_sweep_get>:
 800d534:	4800      	ldr	r0, [pc, #0]	; (800d538 <acc_image_a111_r2c_sweep_get+0x4>)
 800d536:	4770      	bx	lr
 800d538:	08017088 	.word	0x08017088

0800d53c <acc_image_a111_r2c_sweep_param_table_get>:
 800d53c:	4800      	ldr	r0, [pc, #0]	; (800d540 <acc_image_a111_r2c_sweep_param_table_get+0x4>)
 800d53e:	4770      	bx	lr
 800d540:	08017eac 	.word	0x08017eac

0800d544 <quarter_pi_cos_sin_f32>:
 800d544:	eddf 7a26 	vldr	s15, [pc, #152]	; 800d5e0 <quarter_pi_cos_sin_f32+0x9c>
 800d548:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800d54c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d550:	d442      	bmi.n	800d5d8 <quarter_pi_cos_sin_f32+0x94>
 800d552:	b310      	cbz	r0, 800d59a <quarter_pi_cos_sin_f32+0x56>
 800d554:	ee20 0a00 	vmul.f32	s0, s0, s0
 800d558:	eddf 7a22 	vldr	s15, [pc, #136]	; 800d5e4 <quarter_pi_cos_sin_f32+0xa0>
 800d55c:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800d5e8 <quarter_pi_cos_sin_f32+0xa4>
 800d560:	eddf 5a22 	vldr	s11, [pc, #136]	; 800d5ec <quarter_pi_cos_sin_f32+0xa8>
 800d564:	ed9f 6a22 	vldr	s12, [pc, #136]	; 800d5f0 <quarter_pi_cos_sin_f32+0xac>
 800d568:	ee60 7a27 	vmul.f32	s15, s0, s15
 800d56c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800d570:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d574:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d578:	ee60 7a27 	vmul.f32	s15, s0, s15
 800d57c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800d580:	ee60 7a27 	vmul.f32	s15, s0, s15
 800d584:	ee77 7a86 	vadd.f32	s15, s15, s12
 800d588:	ee60 7a27 	vmul.f32	s15, s0, s15
 800d58c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d590:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d594:	ee30 0a07 	vadd.f32	s0, s0, s14
 800d598:	4770      	bx	lr
 800d59a:	ee60 7a00 	vmul.f32	s15, s0, s0
 800d59e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800d5e4 <quarter_pi_cos_sin_f32+0xa0>
 800d5a2:	ed9f 5a14 	vldr	s10, [pc, #80]	; 800d5f4 <quarter_pi_cos_sin_f32+0xb0>
 800d5a6:	eddf 5a14 	vldr	s11, [pc, #80]	; 800d5f8 <quarter_pi_cos_sin_f32+0xb4>
 800d5aa:	ed9f 6a14 	vldr	s12, [pc, #80]	; 800d5fc <quarter_pi_cos_sin_f32+0xb8>
 800d5ae:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d5b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d5b6:	ee37 7a45 	vsub.f32	s14, s14, s10
 800d5ba:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d5be:	ee37 7a25 	vadd.f32	s14, s14, s11
 800d5c2:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d5c6:	ee37 7a46 	vsub.f32	s14, s14, s12
 800d5ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d5ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d5d2:	ee27 0a80 	vmul.f32	s0, s15, s0
 800d5d6:	4770      	bx	lr
 800d5d8:	ed9f 0a09 	vldr	s0, [pc, #36]	; 800d600 <quarter_pi_cos_sin_f32+0xbc>
 800d5dc:	4770      	bx	lr
 800d5de:	bf00      	nop
 800d5e0:	bf490fdb 	.word	0xbf490fdb
 800d5e4:	00000000 	.word	0x00000000
 800d5e8:	37cd1800 	.word	0x37cd1800
 800d5ec:	3ab606a0 	.word	0x3ab606a0
 800d5f0:	3d2aaaa6 	.word	0x3d2aaaa6
 800d5f4:	394c909b 	.word	0x394c909b
 800d5f8:	3c088366 	.word	0x3c088366
 800d5fc:	3e2aaaa2 	.word	0x3e2aaaa2
 800d600:	7fc00000 	.word	0x7fc00000

0800d604 <restricted_cos_sin_f32>:
 800d604:	eddf 7a09 	vldr	s15, [pc, #36]	; 800d62c <restricted_cos_sin_f32+0x28>
 800d608:	eddf 6a09 	vldr	s13, [pc, #36]	; 800d630 <restricted_cos_sin_f32+0x2c>
 800d60c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800d610:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d614:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800d618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d61c:	bf5c      	itt	pl
 800d61e:	f080 0001 	eorpl.w	r0, r0, #1
 800d622:	eeb0 0a67 	vmovpl.f32	s0, s15
 800d626:	f7ff bf8d 	b.w	800d544 <quarter_pi_cos_sin_f32>
 800d62a:	bf00      	nop
 800d62c:	3fc90fdb 	.word	0x3fc90fdb
 800d630:	333bbd2e 	.word	0x333bbd2e

0800d634 <acc_alg_basic_math_restricted_tan_f32>:
 800d634:	b508      	push	{r3, lr}
 800d636:	2000      	movs	r0, #0
 800d638:	eeb0 4a40 	vmov.f32	s8, s0
 800d63c:	f7ff ffe2 	bl	800d604 <restricted_cos_sin_f32>
 800d640:	2001      	movs	r0, #1
 800d642:	eef0 4a40 	vmov.f32	s9, s0
 800d646:	eeb0 0a44 	vmov.f32	s0, s8
 800d64a:	f7ff ffdb 	bl	800d604 <restricted_cos_sin_f32>
 800d64e:	ee84 0a80 	vdiv.f32	s0, s9, s0
 800d652:	bd08      	pop	{r3, pc}

0800d654 <acc_alg_basic_math_restricted_atan_f32>:
 800d654:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800d658:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800d65c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d660:	d434      	bmi.n	800d6cc <acc_alg_basic_math_restricted_atan_f32+0x78>
 800d662:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d666:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800d66a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d66e:	dd1b      	ble.n	800d6a8 <acc_alg_basic_math_restricted_atan_f32+0x54>
 800d670:	ee87 6a80 	vdiv.f32	s12, s15, s0
 800d674:	4b17      	ldr	r3, [pc, #92]	; (800d6d4 <acc_alg_basic_math_restricted_atan_f32+0x80>)
 800d676:	f1a3 0224 	sub.w	r2, r3, #36	; 0x24
 800d67a:	eddf 7a17 	vldr	s15, [pc, #92]	; 800d6d8 <acc_alg_basic_math_restricted_atan_f32+0x84>
 800d67e:	ee66 6a06 	vmul.f32	s13, s12, s12
 800d682:	ed33 7a01 	vldmdb	r3!, {s14}
 800d686:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d68a:	429a      	cmp	r2, r3
 800d68c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d690:	d1f7      	bne.n	800d682 <acc_alg_basic_math_restricted_atan_f32+0x2e>
 800d692:	ee66 7a27 	vmul.f32	s15, s12, s15
 800d696:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800d6dc <acc_alg_basic_math_restricted_atan_f32+0x88>
 800d69a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800d6e0 <acc_alg_basic_math_restricted_atan_f32+0x8c>
 800d69e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d6a2:	ee30 0a47 	vsub.f32	s0, s0, s14
 800d6a6:	4770      	bx	lr
 800d6a8:	4b0a      	ldr	r3, [pc, #40]	; (800d6d4 <acc_alg_basic_math_restricted_atan_f32+0x80>)
 800d6aa:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800d6d8 <acc_alg_basic_math_restricted_atan_f32+0x84>
 800d6ae:	ee60 6a00 	vmul.f32	s13, s0, s0
 800d6b2:	f1a3 0224 	sub.w	r2, r3, #36	; 0x24
 800d6b6:	ed33 7a01 	vldmdb	r3!, {s14}
 800d6ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d6be:	429a      	cmp	r2, r3
 800d6c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d6c4:	d1f7      	bne.n	800d6b6 <acc_alg_basic_math_restricted_atan_f32+0x62>
 800d6c6:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d6ca:	4770      	bx	lr
 800d6cc:	ed9f 0a05 	vldr	s0, [pc, #20]	; 800d6e4 <acc_alg_basic_math_restricted_atan_f32+0x90>
 800d6d0:	4770      	bx	lr
 800d6d2:	bf00      	nop
 800d6d4:	080183d0 	.word	0x080183d0
 800d6d8:	00000000 	.word	0x00000000
 800d6dc:	3fc90fdb 	.word	0x3fc90fdb
 800d6e0:	333bbd2e 	.word	0x333bbd2e
 800d6e4:	7fc00000 	.word	0x7fc00000

0800d6e8 <acc_alg_basic_math_q3_12_complex_mul>:
 800d6e8:	b302      	cbz	r2, 800d72c <acc_alg_basic_math_q3_12_complex_mul+0x44>
 800d6ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	1c87      	adds	r7, r0, #2
 800d6f0:	f101 0c02 	add.w	ip, r1, #2
 800d6f4:	f930 e023 	ldrsh.w	lr, [r0, r3, lsl #2]
 800d6f8:	f831 4023 	ldrh.w	r4, [r1, r3, lsl #2]
 800d6fc:	f937 5023 	ldrsh.w	r5, [r7, r3, lsl #2]
 800d700:	f93c 6023 	ldrsh.w	r6, [ip, r3, lsl #2]
 800d704:	fb14 f40e 	smulbb	r4, r4, lr
 800d708:	fb05 4416 	mls	r4, r5, r6, r4
 800d70c:	1324      	asrs	r4, r4, #12
 800d70e:	f820 4023 	strh.w	r4, [r0, r3, lsl #2]
 800d712:	f831 4023 	ldrh.w	r4, [r1, r3, lsl #2]
 800d716:	fb06 f60e 	mul.w	r6, r6, lr
 800d71a:	fb15 6504 	smlabb	r5, r5, r4, r6
 800d71e:	132d      	asrs	r5, r5, #12
 800d720:	f827 5023 	strh.w	r5, [r7, r3, lsl #2]
 800d724:	3301      	adds	r3, #1
 800d726:	429a      	cmp	r2, r3
 800d728:	d1e4      	bne.n	800d6f4 <acc_alg_basic_math_q3_12_complex_mul+0xc>
 800d72a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d72c:	4770      	bx	lr
 800d72e:	bf00      	nop

0800d730 <acc_alg_basic_math_q3_12_complex_scalar_abs>:
 800d730:	b203      	sxth	r3, r0
 800d732:	1400      	asrs	r0, r0, #16
 800d734:	2b00      	cmp	r3, #0
 800d736:	ea80 72e0 	eor.w	r2, r0, r0, asr #31
 800d73a:	bfb8      	it	lt
 800d73c:	425b      	neglt	r3, r3
 800d73e:	eba2 72e0 	sub.w	r2, r2, r0, asr #31
 800d742:	b218      	sxth	r0, r3
 800d744:	b213      	sxth	r3, r2
 800d746:	4298      	cmp	r0, r3
 800d748:	b082      	sub	sp, #8
 800d74a:	da02      	bge.n	800d752 <acc_alg_basic_math_q3_12_complex_scalar_abs+0x22>
 800d74c:	4602      	mov	r2, r0
 800d74e:	4618      	mov	r0, r3
 800d750:	4613      	mov	r3, r2
 800d752:	f240 62a1 	movw	r2, #1697	; 0x6a1
 800d756:	fb10 f202 	smulbb	r2, r0, r2
 800d75a:	2a00      	cmp	r2, #0
 800d75c:	bfb8      	it	lt
 800d75e:	f602 72ff 	addwlt	r2, r2, #4095	; 0xfff
 800d762:	ebb3 3f22 	cmp.w	r3, r2, asr #12
 800d766:	da0b      	bge.n	800d780 <acc_alg_basic_math_q3_12_complex_scalar_abs+0x50>
 800d768:	f240 3227 	movw	r2, #807	; 0x327
 800d76c:	fb13 f302 	smulbb	r3, r3, r2
 800d770:	f640 72d7 	movw	r2, #4055	; 0xfd7
 800d774:	fb10 3002 	smlabb	r0, r0, r2, r3
 800d778:	f340 300f 	sbfx	r0, r0, #12, #16
 800d77c:	b002      	add	sp, #8
 800d77e:	4770      	bx	lr
 800d780:	f640 02fa 	movw	r2, #2298	; 0x8fa
 800d784:	fb13 f302 	smulbb	r3, r3, r2
 800d788:	f640 5271 	movw	r2, #3441	; 0xd71
 800d78c:	fb10 3002 	smlabb	r0, r0, r2, r3
 800d790:	f340 300f 	sbfx	r0, r0, #12, #16
 800d794:	b002      	add	sp, #8
 800d796:	4770      	bx	lr

0800d798 <acc_alg_basic_math_q3_12_complex_conj_normalize>:
 800d798:	2900      	cmp	r1, #0
 800d79a:	d04f      	beq.n	800d83c <acc_alg_basic_math_q3_12_complex_conj_normalize+0xa4>
 800d79c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7a0:	f240 6ca1 	movw	ip, #1697	; 0x6a1
 800d7a4:	2400      	movs	r4, #0
 800d7a6:	1c87      	adds	r7, r0, #2
 800d7a8:	f640 0afa 	movw	sl, #2298	; 0x8fa
 800d7ac:	f640 5971 	movw	r9, #3441	; 0xd71
 800d7b0:	f240 3827 	movw	r8, #807	; 0x327
 800d7b4:	f640 7ed7 	movw	lr, #4055	; 0xfd7
 800d7b8:	e006      	b.n	800d7c8 <acc_alg_basic_math_q3_12_complex_conj_normalize+0x30>
 800d7ba:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
 800d7be:	f827 3024 	strh.w	r3, [r7, r4, lsl #2]
 800d7c2:	3401      	adds	r4, #1
 800d7c4:	42a1      	cmp	r1, r4
 800d7c6:	d037      	beq.n	800d838 <acc_alg_basic_math_q3_12_complex_conj_normalize+0xa0>
 800d7c8:	f930 6024 	ldrsh.w	r6, [r0, r4, lsl #2]
 800d7cc:	f937 5024 	ldrsh.w	r5, [r7, r4, lsl #2]
 800d7d0:	ea86 73e6 	eor.w	r3, r6, r6, asr #31
 800d7d4:	ea85 72e5 	eor.w	r2, r5, r5, asr #31
 800d7d8:	eba3 73e6 	sub.w	r3, r3, r6, asr #31
 800d7dc:	eba2 72e5 	sub.w	r2, r2, r5, asr #31
 800d7e0:	b21b      	sxth	r3, r3
 800d7e2:	b212      	sxth	r2, r2
 800d7e4:	4293      	cmp	r3, r2
 800d7e6:	da02      	bge.n	800d7ee <acc_alg_basic_math_q3_12_complex_conj_normalize+0x56>
 800d7e8:	469b      	mov	fp, r3
 800d7ea:	4613      	mov	r3, r2
 800d7ec:	465a      	mov	r2, fp
 800d7ee:	fb13 fb0c 	smulbb	fp, r3, ip
 800d7f2:	f1bb 0f00 	cmp.w	fp, #0
 800d7f6:	bfb8      	it	lt
 800d7f8:	f60b 7bff 	addwlt	fp, fp, #4095	; 0xfff
 800d7fc:	ebb2 3f2b 	cmp.w	r2, fp, asr #12
 800d800:	bfb5      	itete	lt
 800d802:	fb12 f208 	smulbblt	r2, r2, r8
 800d806:	fb12 f20a 	smulbbge	r2, r2, sl
 800d80a:	fb13 230e 	smlabblt	r3, r3, lr, r2
 800d80e:	fb13 2309 	smlabbge	r3, r3, r9, r2
 800d812:	f343 330f 	sbfx	r3, r3, #12, #16
 800d816:	2b00      	cmp	r3, #0
 800d818:	d0cf      	beq.n	800d7ba <acc_alg_basic_math_q3_12_complex_conj_normalize+0x22>
 800d81a:	ebc5 5505 	rsb	r5, r5, r5, lsl #20
 800d81e:	032d      	lsls	r5, r5, #12
 800d820:	0336      	lsls	r6, r6, #12
 800d822:	fb95 f5f3 	sdiv	r5, r5, r3
 800d826:	fb96 f3f3 	sdiv	r3, r6, r3
 800d82a:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
 800d82e:	f827 5024 	strh.w	r5, [r7, r4, lsl #2]
 800d832:	3401      	adds	r4, #1
 800d834:	42a1      	cmp	r1, r4
 800d836:	d1c7      	bne.n	800d7c8 <acc_alg_basic_math_q3_12_complex_conj_normalize+0x30>
 800d838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d83c:	4770      	bx	lr
 800d83e:	bf00      	nop

0800d840 <acc_alg_basic_math_q3_12_sin>:
 800d840:	0043      	lsls	r3, r0, #1
 800d842:	bf4c      	ite	mi
 800d844:	43c3      	mvnmi	r3, r0
 800d846:	4603      	movpl	r3, r0
 800d848:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800d84c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800d850:	4a05      	ldr	r2, [pc, #20]	; (800d868 <acc_alg_basic_math_q3_12_sin+0x28>)
 800d852:	0d9b      	lsrs	r3, r3, #22
 800d854:	2800      	cmp	r0, #0
 800d856:	bfbd      	ittte	lt
 800d858:	f832 0013 	ldrhlt.w	r0, [r2, r3, lsl #1]
 800d85c:	4240      	neglt	r0, r0
 800d85e:	b200      	sxthlt	r0, r0
 800d860:	f932 0013 	ldrshge.w	r0, [r2, r3, lsl #1]
 800d864:	4770      	bx	lr
 800d866:	bf00      	nop
 800d868:	080183d0 	.word	0x080183d0

0800d86c <acc_alg_basic_math_q3_12_cos>:
 800d86c:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 800d870:	0043      	lsls	r3, r0, #1
 800d872:	bf54      	ite	pl
 800d874:	43d3      	mvnpl	r3, r2
 800d876:	4613      	movmi	r3, r2
 800d878:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800d87c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800d880:	2a00      	cmp	r2, #0
 800d882:	ea4f 5393 	mov.w	r3, r3, lsr #22
 800d886:	4a04      	ldr	r2, [pc, #16]	; (800d898 <acc_alg_basic_math_q3_12_cos+0x2c>)
 800d888:	bfbd      	ittte	lt
 800d88a:	f832 0013 	ldrhlt.w	r0, [r2, r3, lsl #1]
 800d88e:	4240      	neglt	r0, r0
 800d890:	b200      	sxthlt	r0, r0
 800d892:	f932 0013 	ldrshge.w	r0, [r2, r3, lsl #1]
 800d896:	4770      	bx	lr
 800d898:	080183d0 	.word	0x080183d0

0800d89c <_calloc_r>:
 800d89c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d89e:	fba1 2402 	umull	r2, r4, r1, r2
 800d8a2:	b94c      	cbnz	r4, 800d8b8 <_calloc_r+0x1c>
 800d8a4:	4611      	mov	r1, r2
 800d8a6:	9201      	str	r2, [sp, #4]
 800d8a8:	f000 f83e 	bl	800d928 <_malloc_r>
 800d8ac:	9a01      	ldr	r2, [sp, #4]
 800d8ae:	4605      	mov	r5, r0
 800d8b0:	b930      	cbnz	r0, 800d8c0 <_calloc_r+0x24>
 800d8b2:	4628      	mov	r0, r5
 800d8b4:	b003      	add	sp, #12
 800d8b6:	bd30      	pop	{r4, r5, pc}
 800d8b8:	220c      	movs	r2, #12
 800d8ba:	6002      	str	r2, [r0, #0]
 800d8bc:	2500      	movs	r5, #0
 800d8be:	e7f8      	b.n	800d8b2 <_calloc_r+0x16>
 800d8c0:	4621      	mov	r1, r4
 800d8c2:	f001 f837 	bl	800e934 <memset>
 800d8c6:	e7f4      	b.n	800d8b2 <_calloc_r+0x16>

0800d8c8 <malloc>:
 800d8c8:	4b02      	ldr	r3, [pc, #8]	; (800d8d4 <malloc+0xc>)
 800d8ca:	4601      	mov	r1, r0
 800d8cc:	6818      	ldr	r0, [r3, #0]
 800d8ce:	f000 b82b 	b.w	800d928 <_malloc_r>
 800d8d2:	bf00      	nop
 800d8d4:	200001e4 	.word	0x200001e4

0800d8d8 <free>:
 800d8d8:	4b02      	ldr	r3, [pc, #8]	; (800d8e4 <free+0xc>)
 800d8da:	4601      	mov	r1, r0
 800d8dc:	6818      	ldr	r0, [r3, #0]
 800d8de:	f001 bf41 	b.w	800f764 <_free_r>
 800d8e2:	bf00      	nop
 800d8e4:	200001e4 	.word	0x200001e4

0800d8e8 <sbrk_aligned>:
 800d8e8:	b570      	push	{r4, r5, r6, lr}
 800d8ea:	4e0e      	ldr	r6, [pc, #56]	; (800d924 <sbrk_aligned+0x3c>)
 800d8ec:	460c      	mov	r4, r1
 800d8ee:	6831      	ldr	r1, [r6, #0]
 800d8f0:	4605      	mov	r5, r0
 800d8f2:	b911      	cbnz	r1, 800d8fa <sbrk_aligned+0x12>
 800d8f4:	f001 f85e 	bl	800e9b4 <_sbrk_r>
 800d8f8:	6030      	str	r0, [r6, #0]
 800d8fa:	4621      	mov	r1, r4
 800d8fc:	4628      	mov	r0, r5
 800d8fe:	f001 f859 	bl	800e9b4 <_sbrk_r>
 800d902:	1c43      	adds	r3, r0, #1
 800d904:	d00a      	beq.n	800d91c <sbrk_aligned+0x34>
 800d906:	1cc4      	adds	r4, r0, #3
 800d908:	f024 0403 	bic.w	r4, r4, #3
 800d90c:	42a0      	cmp	r0, r4
 800d90e:	d007      	beq.n	800d920 <sbrk_aligned+0x38>
 800d910:	1a21      	subs	r1, r4, r0
 800d912:	4628      	mov	r0, r5
 800d914:	f001 f84e 	bl	800e9b4 <_sbrk_r>
 800d918:	3001      	adds	r0, #1
 800d91a:	d101      	bne.n	800d920 <sbrk_aligned+0x38>
 800d91c:	f04f 34ff 	mov.w	r4, #4294967295
 800d920:	4620      	mov	r0, r4
 800d922:	bd70      	pop	{r4, r5, r6, pc}
 800d924:	200004f8 	.word	0x200004f8

0800d928 <_malloc_r>:
 800d928:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d92c:	1ccd      	adds	r5, r1, #3
 800d92e:	f025 0503 	bic.w	r5, r5, #3
 800d932:	3508      	adds	r5, #8
 800d934:	2d0c      	cmp	r5, #12
 800d936:	bf38      	it	cc
 800d938:	250c      	movcc	r5, #12
 800d93a:	2d00      	cmp	r5, #0
 800d93c:	4607      	mov	r7, r0
 800d93e:	db01      	blt.n	800d944 <_malloc_r+0x1c>
 800d940:	42a9      	cmp	r1, r5
 800d942:	d905      	bls.n	800d950 <_malloc_r+0x28>
 800d944:	230c      	movs	r3, #12
 800d946:	603b      	str	r3, [r7, #0]
 800d948:	2600      	movs	r6, #0
 800d94a:	4630      	mov	r0, r6
 800d94c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d950:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800da24 <_malloc_r+0xfc>
 800d954:	f000 f868 	bl	800da28 <__malloc_lock>
 800d958:	f8d8 3000 	ldr.w	r3, [r8]
 800d95c:	461c      	mov	r4, r3
 800d95e:	bb5c      	cbnz	r4, 800d9b8 <_malloc_r+0x90>
 800d960:	4629      	mov	r1, r5
 800d962:	4638      	mov	r0, r7
 800d964:	f7ff ffc0 	bl	800d8e8 <sbrk_aligned>
 800d968:	1c43      	adds	r3, r0, #1
 800d96a:	4604      	mov	r4, r0
 800d96c:	d155      	bne.n	800da1a <_malloc_r+0xf2>
 800d96e:	f8d8 4000 	ldr.w	r4, [r8]
 800d972:	4626      	mov	r6, r4
 800d974:	2e00      	cmp	r6, #0
 800d976:	d145      	bne.n	800da04 <_malloc_r+0xdc>
 800d978:	2c00      	cmp	r4, #0
 800d97a:	d048      	beq.n	800da0e <_malloc_r+0xe6>
 800d97c:	6823      	ldr	r3, [r4, #0]
 800d97e:	4631      	mov	r1, r6
 800d980:	4638      	mov	r0, r7
 800d982:	eb04 0903 	add.w	r9, r4, r3
 800d986:	f001 f815 	bl	800e9b4 <_sbrk_r>
 800d98a:	4581      	cmp	r9, r0
 800d98c:	d13f      	bne.n	800da0e <_malloc_r+0xe6>
 800d98e:	6821      	ldr	r1, [r4, #0]
 800d990:	1a6d      	subs	r5, r5, r1
 800d992:	4629      	mov	r1, r5
 800d994:	4638      	mov	r0, r7
 800d996:	f7ff ffa7 	bl	800d8e8 <sbrk_aligned>
 800d99a:	3001      	adds	r0, #1
 800d99c:	d037      	beq.n	800da0e <_malloc_r+0xe6>
 800d99e:	6823      	ldr	r3, [r4, #0]
 800d9a0:	442b      	add	r3, r5
 800d9a2:	6023      	str	r3, [r4, #0]
 800d9a4:	f8d8 3000 	ldr.w	r3, [r8]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d038      	beq.n	800da1e <_malloc_r+0xf6>
 800d9ac:	685a      	ldr	r2, [r3, #4]
 800d9ae:	42a2      	cmp	r2, r4
 800d9b0:	d12b      	bne.n	800da0a <_malloc_r+0xe2>
 800d9b2:	2200      	movs	r2, #0
 800d9b4:	605a      	str	r2, [r3, #4]
 800d9b6:	e00f      	b.n	800d9d8 <_malloc_r+0xb0>
 800d9b8:	6822      	ldr	r2, [r4, #0]
 800d9ba:	1b52      	subs	r2, r2, r5
 800d9bc:	d41f      	bmi.n	800d9fe <_malloc_r+0xd6>
 800d9be:	2a0b      	cmp	r2, #11
 800d9c0:	d917      	bls.n	800d9f2 <_malloc_r+0xca>
 800d9c2:	1961      	adds	r1, r4, r5
 800d9c4:	42a3      	cmp	r3, r4
 800d9c6:	6025      	str	r5, [r4, #0]
 800d9c8:	bf18      	it	ne
 800d9ca:	6059      	strne	r1, [r3, #4]
 800d9cc:	6863      	ldr	r3, [r4, #4]
 800d9ce:	bf08      	it	eq
 800d9d0:	f8c8 1000 	streq.w	r1, [r8]
 800d9d4:	5162      	str	r2, [r4, r5]
 800d9d6:	604b      	str	r3, [r1, #4]
 800d9d8:	4638      	mov	r0, r7
 800d9da:	f104 060b 	add.w	r6, r4, #11
 800d9de:	f000 f829 	bl	800da34 <__malloc_unlock>
 800d9e2:	f026 0607 	bic.w	r6, r6, #7
 800d9e6:	1d23      	adds	r3, r4, #4
 800d9e8:	1af2      	subs	r2, r6, r3
 800d9ea:	d0ae      	beq.n	800d94a <_malloc_r+0x22>
 800d9ec:	1b9b      	subs	r3, r3, r6
 800d9ee:	50a3      	str	r3, [r4, r2]
 800d9f0:	e7ab      	b.n	800d94a <_malloc_r+0x22>
 800d9f2:	42a3      	cmp	r3, r4
 800d9f4:	6862      	ldr	r2, [r4, #4]
 800d9f6:	d1dd      	bne.n	800d9b4 <_malloc_r+0x8c>
 800d9f8:	f8c8 2000 	str.w	r2, [r8]
 800d9fc:	e7ec      	b.n	800d9d8 <_malloc_r+0xb0>
 800d9fe:	4623      	mov	r3, r4
 800da00:	6864      	ldr	r4, [r4, #4]
 800da02:	e7ac      	b.n	800d95e <_malloc_r+0x36>
 800da04:	4634      	mov	r4, r6
 800da06:	6876      	ldr	r6, [r6, #4]
 800da08:	e7b4      	b.n	800d974 <_malloc_r+0x4c>
 800da0a:	4613      	mov	r3, r2
 800da0c:	e7cc      	b.n	800d9a8 <_malloc_r+0x80>
 800da0e:	230c      	movs	r3, #12
 800da10:	603b      	str	r3, [r7, #0]
 800da12:	4638      	mov	r0, r7
 800da14:	f000 f80e 	bl	800da34 <__malloc_unlock>
 800da18:	e797      	b.n	800d94a <_malloc_r+0x22>
 800da1a:	6025      	str	r5, [r4, #0]
 800da1c:	e7dc      	b.n	800d9d8 <_malloc_r+0xb0>
 800da1e:	605b      	str	r3, [r3, #4]
 800da20:	deff      	udf	#255	; 0xff
 800da22:	bf00      	nop
 800da24:	200004f4 	.word	0x200004f4

0800da28 <__malloc_lock>:
 800da28:	4801      	ldr	r0, [pc, #4]	; (800da30 <__malloc_lock+0x8>)
 800da2a:	f001 b80f 	b.w	800ea4c <__retarget_lock_acquire_recursive>
 800da2e:	bf00      	nop
 800da30:	2000063c 	.word	0x2000063c

0800da34 <__malloc_unlock>:
 800da34:	4801      	ldr	r0, [pc, #4]	; (800da3c <__malloc_unlock+0x8>)
 800da36:	f001 b80a 	b.w	800ea4e <__retarget_lock_release_recursive>
 800da3a:	bf00      	nop
 800da3c:	2000063c 	.word	0x2000063c

0800da40 <__cvt>:
 800da40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800da44:	ec55 4b10 	vmov	r4, r5, d0
 800da48:	2d00      	cmp	r5, #0
 800da4a:	460e      	mov	r6, r1
 800da4c:	4619      	mov	r1, r3
 800da4e:	462b      	mov	r3, r5
 800da50:	bfbb      	ittet	lt
 800da52:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800da56:	461d      	movlt	r5, r3
 800da58:	2300      	movge	r3, #0
 800da5a:	232d      	movlt	r3, #45	; 0x2d
 800da5c:	700b      	strb	r3, [r1, #0]
 800da5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800da60:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800da64:	4691      	mov	r9, r2
 800da66:	f023 0820 	bic.w	r8, r3, #32
 800da6a:	bfbc      	itt	lt
 800da6c:	4622      	movlt	r2, r4
 800da6e:	4614      	movlt	r4, r2
 800da70:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800da74:	d005      	beq.n	800da82 <__cvt+0x42>
 800da76:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800da7a:	d100      	bne.n	800da7e <__cvt+0x3e>
 800da7c:	3601      	adds	r6, #1
 800da7e:	2102      	movs	r1, #2
 800da80:	e000      	b.n	800da84 <__cvt+0x44>
 800da82:	2103      	movs	r1, #3
 800da84:	ab03      	add	r3, sp, #12
 800da86:	9301      	str	r3, [sp, #4]
 800da88:	ab02      	add	r3, sp, #8
 800da8a:	9300      	str	r3, [sp, #0]
 800da8c:	ec45 4b10 	vmov	d0, r4, r5
 800da90:	4653      	mov	r3, sl
 800da92:	4632      	mov	r2, r6
 800da94:	f001 f874 	bl	800eb80 <_dtoa_r>
 800da98:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800da9c:	4607      	mov	r7, r0
 800da9e:	d102      	bne.n	800daa6 <__cvt+0x66>
 800daa0:	f019 0f01 	tst.w	r9, #1
 800daa4:	d022      	beq.n	800daec <__cvt+0xac>
 800daa6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800daaa:	eb07 0906 	add.w	r9, r7, r6
 800daae:	d110      	bne.n	800dad2 <__cvt+0x92>
 800dab0:	783b      	ldrb	r3, [r7, #0]
 800dab2:	2b30      	cmp	r3, #48	; 0x30
 800dab4:	d10a      	bne.n	800dacc <__cvt+0x8c>
 800dab6:	2200      	movs	r2, #0
 800dab8:	2300      	movs	r3, #0
 800daba:	4620      	mov	r0, r4
 800dabc:	4629      	mov	r1, r5
 800dabe:	f7f3 f87b 	bl	8000bb8 <__aeabi_dcmpeq>
 800dac2:	b918      	cbnz	r0, 800dacc <__cvt+0x8c>
 800dac4:	f1c6 0601 	rsb	r6, r6, #1
 800dac8:	f8ca 6000 	str.w	r6, [sl]
 800dacc:	f8da 3000 	ldr.w	r3, [sl]
 800dad0:	4499      	add	r9, r3
 800dad2:	2200      	movs	r2, #0
 800dad4:	2300      	movs	r3, #0
 800dad6:	4620      	mov	r0, r4
 800dad8:	4629      	mov	r1, r5
 800dada:	f7f3 f86d 	bl	8000bb8 <__aeabi_dcmpeq>
 800dade:	b108      	cbz	r0, 800dae4 <__cvt+0xa4>
 800dae0:	f8cd 900c 	str.w	r9, [sp, #12]
 800dae4:	2230      	movs	r2, #48	; 0x30
 800dae6:	9b03      	ldr	r3, [sp, #12]
 800dae8:	454b      	cmp	r3, r9
 800daea:	d307      	bcc.n	800dafc <__cvt+0xbc>
 800daec:	9b03      	ldr	r3, [sp, #12]
 800daee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800daf0:	1bdb      	subs	r3, r3, r7
 800daf2:	4638      	mov	r0, r7
 800daf4:	6013      	str	r3, [r2, #0]
 800daf6:	b004      	add	sp, #16
 800daf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dafc:	1c59      	adds	r1, r3, #1
 800dafe:	9103      	str	r1, [sp, #12]
 800db00:	701a      	strb	r2, [r3, #0]
 800db02:	e7f0      	b.n	800dae6 <__cvt+0xa6>

0800db04 <__exponent>:
 800db04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800db06:	4603      	mov	r3, r0
 800db08:	2900      	cmp	r1, #0
 800db0a:	bfb8      	it	lt
 800db0c:	4249      	neglt	r1, r1
 800db0e:	f803 2b02 	strb.w	r2, [r3], #2
 800db12:	bfb4      	ite	lt
 800db14:	222d      	movlt	r2, #45	; 0x2d
 800db16:	222b      	movge	r2, #43	; 0x2b
 800db18:	2909      	cmp	r1, #9
 800db1a:	7042      	strb	r2, [r0, #1]
 800db1c:	dd2a      	ble.n	800db74 <__exponent+0x70>
 800db1e:	f10d 0207 	add.w	r2, sp, #7
 800db22:	4617      	mov	r7, r2
 800db24:	260a      	movs	r6, #10
 800db26:	4694      	mov	ip, r2
 800db28:	fb91 f5f6 	sdiv	r5, r1, r6
 800db2c:	fb06 1415 	mls	r4, r6, r5, r1
 800db30:	3430      	adds	r4, #48	; 0x30
 800db32:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800db36:	460c      	mov	r4, r1
 800db38:	2c63      	cmp	r4, #99	; 0x63
 800db3a:	f102 32ff 	add.w	r2, r2, #4294967295
 800db3e:	4629      	mov	r1, r5
 800db40:	dcf1      	bgt.n	800db26 <__exponent+0x22>
 800db42:	3130      	adds	r1, #48	; 0x30
 800db44:	f1ac 0402 	sub.w	r4, ip, #2
 800db48:	f802 1c01 	strb.w	r1, [r2, #-1]
 800db4c:	1c41      	adds	r1, r0, #1
 800db4e:	4622      	mov	r2, r4
 800db50:	42ba      	cmp	r2, r7
 800db52:	d30a      	bcc.n	800db6a <__exponent+0x66>
 800db54:	f10d 0209 	add.w	r2, sp, #9
 800db58:	eba2 020c 	sub.w	r2, r2, ip
 800db5c:	42bc      	cmp	r4, r7
 800db5e:	bf88      	it	hi
 800db60:	2200      	movhi	r2, #0
 800db62:	4413      	add	r3, r2
 800db64:	1a18      	subs	r0, r3, r0
 800db66:	b003      	add	sp, #12
 800db68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db6a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800db6e:	f801 5f01 	strb.w	r5, [r1, #1]!
 800db72:	e7ed      	b.n	800db50 <__exponent+0x4c>
 800db74:	2330      	movs	r3, #48	; 0x30
 800db76:	3130      	adds	r1, #48	; 0x30
 800db78:	7083      	strb	r3, [r0, #2]
 800db7a:	70c1      	strb	r1, [r0, #3]
 800db7c:	1d03      	adds	r3, r0, #4
 800db7e:	e7f1      	b.n	800db64 <__exponent+0x60>

0800db80 <_printf_float>:
 800db80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db84:	ed2d 8b02 	vpush	{d8}
 800db88:	b08d      	sub	sp, #52	; 0x34
 800db8a:	460c      	mov	r4, r1
 800db8c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800db90:	4616      	mov	r6, r2
 800db92:	461f      	mov	r7, r3
 800db94:	4605      	mov	r5, r0
 800db96:	f000 fed5 	bl	800e944 <_localeconv_r>
 800db9a:	f8d0 a000 	ldr.w	sl, [r0]
 800db9e:	4650      	mov	r0, sl
 800dba0:	f7f2 fbde 	bl	8000360 <strlen>
 800dba4:	2300      	movs	r3, #0
 800dba6:	930a      	str	r3, [sp, #40]	; 0x28
 800dba8:	6823      	ldr	r3, [r4, #0]
 800dbaa:	9305      	str	r3, [sp, #20]
 800dbac:	f8d8 3000 	ldr.w	r3, [r8]
 800dbb0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800dbb4:	3307      	adds	r3, #7
 800dbb6:	f023 0307 	bic.w	r3, r3, #7
 800dbba:	f103 0208 	add.w	r2, r3, #8
 800dbbe:	f8c8 2000 	str.w	r2, [r8]
 800dbc2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dbc6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800dbca:	9307      	str	r3, [sp, #28]
 800dbcc:	f8cd 8018 	str.w	r8, [sp, #24]
 800dbd0:	ee08 0a10 	vmov	s16, r0
 800dbd4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800dbd8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dbdc:	4b9e      	ldr	r3, [pc, #632]	; (800de58 <_printf_float+0x2d8>)
 800dbde:	f04f 32ff 	mov.w	r2, #4294967295
 800dbe2:	f7f3 f81b 	bl	8000c1c <__aeabi_dcmpun>
 800dbe6:	bb88      	cbnz	r0, 800dc4c <_printf_float+0xcc>
 800dbe8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dbec:	4b9a      	ldr	r3, [pc, #616]	; (800de58 <_printf_float+0x2d8>)
 800dbee:	f04f 32ff 	mov.w	r2, #4294967295
 800dbf2:	f7f2 fff5 	bl	8000be0 <__aeabi_dcmple>
 800dbf6:	bb48      	cbnz	r0, 800dc4c <_printf_float+0xcc>
 800dbf8:	2200      	movs	r2, #0
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	4640      	mov	r0, r8
 800dbfe:	4649      	mov	r1, r9
 800dc00:	f7f2 ffe4 	bl	8000bcc <__aeabi_dcmplt>
 800dc04:	b110      	cbz	r0, 800dc0c <_printf_float+0x8c>
 800dc06:	232d      	movs	r3, #45	; 0x2d
 800dc08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dc0c:	4a93      	ldr	r2, [pc, #588]	; (800de5c <_printf_float+0x2dc>)
 800dc0e:	4b94      	ldr	r3, [pc, #592]	; (800de60 <_printf_float+0x2e0>)
 800dc10:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800dc14:	bf94      	ite	ls
 800dc16:	4690      	movls	r8, r2
 800dc18:	4698      	movhi	r8, r3
 800dc1a:	2303      	movs	r3, #3
 800dc1c:	6123      	str	r3, [r4, #16]
 800dc1e:	9b05      	ldr	r3, [sp, #20]
 800dc20:	f023 0304 	bic.w	r3, r3, #4
 800dc24:	6023      	str	r3, [r4, #0]
 800dc26:	f04f 0900 	mov.w	r9, #0
 800dc2a:	9700      	str	r7, [sp, #0]
 800dc2c:	4633      	mov	r3, r6
 800dc2e:	aa0b      	add	r2, sp, #44	; 0x2c
 800dc30:	4621      	mov	r1, r4
 800dc32:	4628      	mov	r0, r5
 800dc34:	f000 f9da 	bl	800dfec <_printf_common>
 800dc38:	3001      	adds	r0, #1
 800dc3a:	f040 8090 	bne.w	800dd5e <_printf_float+0x1de>
 800dc3e:	f04f 30ff 	mov.w	r0, #4294967295
 800dc42:	b00d      	add	sp, #52	; 0x34
 800dc44:	ecbd 8b02 	vpop	{d8}
 800dc48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc4c:	4642      	mov	r2, r8
 800dc4e:	464b      	mov	r3, r9
 800dc50:	4640      	mov	r0, r8
 800dc52:	4649      	mov	r1, r9
 800dc54:	f7f2 ffe2 	bl	8000c1c <__aeabi_dcmpun>
 800dc58:	b140      	cbz	r0, 800dc6c <_printf_float+0xec>
 800dc5a:	464b      	mov	r3, r9
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	bfbc      	itt	lt
 800dc60:	232d      	movlt	r3, #45	; 0x2d
 800dc62:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800dc66:	4a7f      	ldr	r2, [pc, #508]	; (800de64 <_printf_float+0x2e4>)
 800dc68:	4b7f      	ldr	r3, [pc, #508]	; (800de68 <_printf_float+0x2e8>)
 800dc6a:	e7d1      	b.n	800dc10 <_printf_float+0x90>
 800dc6c:	6863      	ldr	r3, [r4, #4]
 800dc6e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800dc72:	9206      	str	r2, [sp, #24]
 800dc74:	1c5a      	adds	r2, r3, #1
 800dc76:	d13f      	bne.n	800dcf8 <_printf_float+0x178>
 800dc78:	2306      	movs	r3, #6
 800dc7a:	6063      	str	r3, [r4, #4]
 800dc7c:	9b05      	ldr	r3, [sp, #20]
 800dc7e:	6861      	ldr	r1, [r4, #4]
 800dc80:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800dc84:	2300      	movs	r3, #0
 800dc86:	9303      	str	r3, [sp, #12]
 800dc88:	ab0a      	add	r3, sp, #40	; 0x28
 800dc8a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800dc8e:	ab09      	add	r3, sp, #36	; 0x24
 800dc90:	ec49 8b10 	vmov	d0, r8, r9
 800dc94:	9300      	str	r3, [sp, #0]
 800dc96:	6022      	str	r2, [r4, #0]
 800dc98:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800dc9c:	4628      	mov	r0, r5
 800dc9e:	f7ff fecf 	bl	800da40 <__cvt>
 800dca2:	9b06      	ldr	r3, [sp, #24]
 800dca4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dca6:	2b47      	cmp	r3, #71	; 0x47
 800dca8:	4680      	mov	r8, r0
 800dcaa:	d108      	bne.n	800dcbe <_printf_float+0x13e>
 800dcac:	1cc8      	adds	r0, r1, #3
 800dcae:	db02      	blt.n	800dcb6 <_printf_float+0x136>
 800dcb0:	6863      	ldr	r3, [r4, #4]
 800dcb2:	4299      	cmp	r1, r3
 800dcb4:	dd41      	ble.n	800dd3a <_printf_float+0x1ba>
 800dcb6:	f1ab 0302 	sub.w	r3, fp, #2
 800dcba:	fa5f fb83 	uxtb.w	fp, r3
 800dcbe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800dcc2:	d820      	bhi.n	800dd06 <_printf_float+0x186>
 800dcc4:	3901      	subs	r1, #1
 800dcc6:	465a      	mov	r2, fp
 800dcc8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800dccc:	9109      	str	r1, [sp, #36]	; 0x24
 800dcce:	f7ff ff19 	bl	800db04 <__exponent>
 800dcd2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dcd4:	1813      	adds	r3, r2, r0
 800dcd6:	2a01      	cmp	r2, #1
 800dcd8:	4681      	mov	r9, r0
 800dcda:	6123      	str	r3, [r4, #16]
 800dcdc:	dc02      	bgt.n	800dce4 <_printf_float+0x164>
 800dcde:	6822      	ldr	r2, [r4, #0]
 800dce0:	07d2      	lsls	r2, r2, #31
 800dce2:	d501      	bpl.n	800dce8 <_printf_float+0x168>
 800dce4:	3301      	adds	r3, #1
 800dce6:	6123      	str	r3, [r4, #16]
 800dce8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d09c      	beq.n	800dc2a <_printf_float+0xaa>
 800dcf0:	232d      	movs	r3, #45	; 0x2d
 800dcf2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dcf6:	e798      	b.n	800dc2a <_printf_float+0xaa>
 800dcf8:	9a06      	ldr	r2, [sp, #24]
 800dcfa:	2a47      	cmp	r2, #71	; 0x47
 800dcfc:	d1be      	bne.n	800dc7c <_printf_float+0xfc>
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d1bc      	bne.n	800dc7c <_printf_float+0xfc>
 800dd02:	2301      	movs	r3, #1
 800dd04:	e7b9      	b.n	800dc7a <_printf_float+0xfa>
 800dd06:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800dd0a:	d118      	bne.n	800dd3e <_printf_float+0x1be>
 800dd0c:	2900      	cmp	r1, #0
 800dd0e:	6863      	ldr	r3, [r4, #4]
 800dd10:	dd0b      	ble.n	800dd2a <_printf_float+0x1aa>
 800dd12:	6121      	str	r1, [r4, #16]
 800dd14:	b913      	cbnz	r3, 800dd1c <_printf_float+0x19c>
 800dd16:	6822      	ldr	r2, [r4, #0]
 800dd18:	07d0      	lsls	r0, r2, #31
 800dd1a:	d502      	bpl.n	800dd22 <_printf_float+0x1a2>
 800dd1c:	3301      	adds	r3, #1
 800dd1e:	440b      	add	r3, r1
 800dd20:	6123      	str	r3, [r4, #16]
 800dd22:	65a1      	str	r1, [r4, #88]	; 0x58
 800dd24:	f04f 0900 	mov.w	r9, #0
 800dd28:	e7de      	b.n	800dce8 <_printf_float+0x168>
 800dd2a:	b913      	cbnz	r3, 800dd32 <_printf_float+0x1b2>
 800dd2c:	6822      	ldr	r2, [r4, #0]
 800dd2e:	07d2      	lsls	r2, r2, #31
 800dd30:	d501      	bpl.n	800dd36 <_printf_float+0x1b6>
 800dd32:	3302      	adds	r3, #2
 800dd34:	e7f4      	b.n	800dd20 <_printf_float+0x1a0>
 800dd36:	2301      	movs	r3, #1
 800dd38:	e7f2      	b.n	800dd20 <_printf_float+0x1a0>
 800dd3a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800dd3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd40:	4299      	cmp	r1, r3
 800dd42:	db05      	blt.n	800dd50 <_printf_float+0x1d0>
 800dd44:	6823      	ldr	r3, [r4, #0]
 800dd46:	6121      	str	r1, [r4, #16]
 800dd48:	07d8      	lsls	r0, r3, #31
 800dd4a:	d5ea      	bpl.n	800dd22 <_printf_float+0x1a2>
 800dd4c:	1c4b      	adds	r3, r1, #1
 800dd4e:	e7e7      	b.n	800dd20 <_printf_float+0x1a0>
 800dd50:	2900      	cmp	r1, #0
 800dd52:	bfd4      	ite	le
 800dd54:	f1c1 0202 	rsble	r2, r1, #2
 800dd58:	2201      	movgt	r2, #1
 800dd5a:	4413      	add	r3, r2
 800dd5c:	e7e0      	b.n	800dd20 <_printf_float+0x1a0>
 800dd5e:	6823      	ldr	r3, [r4, #0]
 800dd60:	055a      	lsls	r2, r3, #21
 800dd62:	d407      	bmi.n	800dd74 <_printf_float+0x1f4>
 800dd64:	6923      	ldr	r3, [r4, #16]
 800dd66:	4642      	mov	r2, r8
 800dd68:	4631      	mov	r1, r6
 800dd6a:	4628      	mov	r0, r5
 800dd6c:	47b8      	blx	r7
 800dd6e:	3001      	adds	r0, #1
 800dd70:	d12c      	bne.n	800ddcc <_printf_float+0x24c>
 800dd72:	e764      	b.n	800dc3e <_printf_float+0xbe>
 800dd74:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800dd78:	f240 80e0 	bls.w	800df3c <_printf_float+0x3bc>
 800dd7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800dd80:	2200      	movs	r2, #0
 800dd82:	2300      	movs	r3, #0
 800dd84:	f7f2 ff18 	bl	8000bb8 <__aeabi_dcmpeq>
 800dd88:	2800      	cmp	r0, #0
 800dd8a:	d034      	beq.n	800ddf6 <_printf_float+0x276>
 800dd8c:	4a37      	ldr	r2, [pc, #220]	; (800de6c <_printf_float+0x2ec>)
 800dd8e:	2301      	movs	r3, #1
 800dd90:	4631      	mov	r1, r6
 800dd92:	4628      	mov	r0, r5
 800dd94:	47b8      	blx	r7
 800dd96:	3001      	adds	r0, #1
 800dd98:	f43f af51 	beq.w	800dc3e <_printf_float+0xbe>
 800dd9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dda0:	429a      	cmp	r2, r3
 800dda2:	db02      	blt.n	800ddaa <_printf_float+0x22a>
 800dda4:	6823      	ldr	r3, [r4, #0]
 800dda6:	07d8      	lsls	r0, r3, #31
 800dda8:	d510      	bpl.n	800ddcc <_printf_float+0x24c>
 800ddaa:	ee18 3a10 	vmov	r3, s16
 800ddae:	4652      	mov	r2, sl
 800ddb0:	4631      	mov	r1, r6
 800ddb2:	4628      	mov	r0, r5
 800ddb4:	47b8      	blx	r7
 800ddb6:	3001      	adds	r0, #1
 800ddb8:	f43f af41 	beq.w	800dc3e <_printf_float+0xbe>
 800ddbc:	f04f 0800 	mov.w	r8, #0
 800ddc0:	f104 091a 	add.w	r9, r4, #26
 800ddc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ddc6:	3b01      	subs	r3, #1
 800ddc8:	4543      	cmp	r3, r8
 800ddca:	dc09      	bgt.n	800dde0 <_printf_float+0x260>
 800ddcc:	6823      	ldr	r3, [r4, #0]
 800ddce:	079b      	lsls	r3, r3, #30
 800ddd0:	f100 8107 	bmi.w	800dfe2 <_printf_float+0x462>
 800ddd4:	68e0      	ldr	r0, [r4, #12]
 800ddd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ddd8:	4298      	cmp	r0, r3
 800ddda:	bfb8      	it	lt
 800dddc:	4618      	movlt	r0, r3
 800ddde:	e730      	b.n	800dc42 <_printf_float+0xc2>
 800dde0:	2301      	movs	r3, #1
 800dde2:	464a      	mov	r2, r9
 800dde4:	4631      	mov	r1, r6
 800dde6:	4628      	mov	r0, r5
 800dde8:	47b8      	blx	r7
 800ddea:	3001      	adds	r0, #1
 800ddec:	f43f af27 	beq.w	800dc3e <_printf_float+0xbe>
 800ddf0:	f108 0801 	add.w	r8, r8, #1
 800ddf4:	e7e6      	b.n	800ddc4 <_printf_float+0x244>
 800ddf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	dc39      	bgt.n	800de70 <_printf_float+0x2f0>
 800ddfc:	4a1b      	ldr	r2, [pc, #108]	; (800de6c <_printf_float+0x2ec>)
 800ddfe:	2301      	movs	r3, #1
 800de00:	4631      	mov	r1, r6
 800de02:	4628      	mov	r0, r5
 800de04:	47b8      	blx	r7
 800de06:	3001      	adds	r0, #1
 800de08:	f43f af19 	beq.w	800dc3e <_printf_float+0xbe>
 800de0c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800de10:	4313      	orrs	r3, r2
 800de12:	d102      	bne.n	800de1a <_printf_float+0x29a>
 800de14:	6823      	ldr	r3, [r4, #0]
 800de16:	07d9      	lsls	r1, r3, #31
 800de18:	d5d8      	bpl.n	800ddcc <_printf_float+0x24c>
 800de1a:	ee18 3a10 	vmov	r3, s16
 800de1e:	4652      	mov	r2, sl
 800de20:	4631      	mov	r1, r6
 800de22:	4628      	mov	r0, r5
 800de24:	47b8      	blx	r7
 800de26:	3001      	adds	r0, #1
 800de28:	f43f af09 	beq.w	800dc3e <_printf_float+0xbe>
 800de2c:	f04f 0900 	mov.w	r9, #0
 800de30:	f104 0a1a 	add.w	sl, r4, #26
 800de34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de36:	425b      	negs	r3, r3
 800de38:	454b      	cmp	r3, r9
 800de3a:	dc01      	bgt.n	800de40 <_printf_float+0x2c0>
 800de3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de3e:	e792      	b.n	800dd66 <_printf_float+0x1e6>
 800de40:	2301      	movs	r3, #1
 800de42:	4652      	mov	r2, sl
 800de44:	4631      	mov	r1, r6
 800de46:	4628      	mov	r0, r5
 800de48:	47b8      	blx	r7
 800de4a:	3001      	adds	r0, #1
 800de4c:	f43f aef7 	beq.w	800dc3e <_printf_float+0xbe>
 800de50:	f109 0901 	add.w	r9, r9, #1
 800de54:	e7ee      	b.n	800de34 <_printf_float+0x2b4>
 800de56:	bf00      	nop
 800de58:	7fefffff 	.word	0x7fefffff
 800de5c:	080185e4 	.word	0x080185e4
 800de60:	080185e8 	.word	0x080185e8
 800de64:	080185ec 	.word	0x080185ec
 800de68:	080185f0 	.word	0x080185f0
 800de6c:	080185f4 	.word	0x080185f4
 800de70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800de72:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800de74:	429a      	cmp	r2, r3
 800de76:	bfa8      	it	ge
 800de78:	461a      	movge	r2, r3
 800de7a:	2a00      	cmp	r2, #0
 800de7c:	4691      	mov	r9, r2
 800de7e:	dc37      	bgt.n	800def0 <_printf_float+0x370>
 800de80:	f04f 0b00 	mov.w	fp, #0
 800de84:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800de88:	f104 021a 	add.w	r2, r4, #26
 800de8c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800de8e:	9305      	str	r3, [sp, #20]
 800de90:	eba3 0309 	sub.w	r3, r3, r9
 800de94:	455b      	cmp	r3, fp
 800de96:	dc33      	bgt.n	800df00 <_printf_float+0x380>
 800de98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800de9c:	429a      	cmp	r2, r3
 800de9e:	db3b      	blt.n	800df18 <_printf_float+0x398>
 800dea0:	6823      	ldr	r3, [r4, #0]
 800dea2:	07da      	lsls	r2, r3, #31
 800dea4:	d438      	bmi.n	800df18 <_printf_float+0x398>
 800dea6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800deaa:	eba2 0903 	sub.w	r9, r2, r3
 800deae:	9b05      	ldr	r3, [sp, #20]
 800deb0:	1ad2      	subs	r2, r2, r3
 800deb2:	4591      	cmp	r9, r2
 800deb4:	bfa8      	it	ge
 800deb6:	4691      	movge	r9, r2
 800deb8:	f1b9 0f00 	cmp.w	r9, #0
 800debc:	dc35      	bgt.n	800df2a <_printf_float+0x3aa>
 800debe:	f04f 0800 	mov.w	r8, #0
 800dec2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dec6:	f104 0a1a 	add.w	sl, r4, #26
 800deca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dece:	1a9b      	subs	r3, r3, r2
 800ded0:	eba3 0309 	sub.w	r3, r3, r9
 800ded4:	4543      	cmp	r3, r8
 800ded6:	f77f af79 	ble.w	800ddcc <_printf_float+0x24c>
 800deda:	2301      	movs	r3, #1
 800dedc:	4652      	mov	r2, sl
 800dede:	4631      	mov	r1, r6
 800dee0:	4628      	mov	r0, r5
 800dee2:	47b8      	blx	r7
 800dee4:	3001      	adds	r0, #1
 800dee6:	f43f aeaa 	beq.w	800dc3e <_printf_float+0xbe>
 800deea:	f108 0801 	add.w	r8, r8, #1
 800deee:	e7ec      	b.n	800deca <_printf_float+0x34a>
 800def0:	4613      	mov	r3, r2
 800def2:	4631      	mov	r1, r6
 800def4:	4642      	mov	r2, r8
 800def6:	4628      	mov	r0, r5
 800def8:	47b8      	blx	r7
 800defa:	3001      	adds	r0, #1
 800defc:	d1c0      	bne.n	800de80 <_printf_float+0x300>
 800defe:	e69e      	b.n	800dc3e <_printf_float+0xbe>
 800df00:	2301      	movs	r3, #1
 800df02:	4631      	mov	r1, r6
 800df04:	4628      	mov	r0, r5
 800df06:	9205      	str	r2, [sp, #20]
 800df08:	47b8      	blx	r7
 800df0a:	3001      	adds	r0, #1
 800df0c:	f43f ae97 	beq.w	800dc3e <_printf_float+0xbe>
 800df10:	9a05      	ldr	r2, [sp, #20]
 800df12:	f10b 0b01 	add.w	fp, fp, #1
 800df16:	e7b9      	b.n	800de8c <_printf_float+0x30c>
 800df18:	ee18 3a10 	vmov	r3, s16
 800df1c:	4652      	mov	r2, sl
 800df1e:	4631      	mov	r1, r6
 800df20:	4628      	mov	r0, r5
 800df22:	47b8      	blx	r7
 800df24:	3001      	adds	r0, #1
 800df26:	d1be      	bne.n	800dea6 <_printf_float+0x326>
 800df28:	e689      	b.n	800dc3e <_printf_float+0xbe>
 800df2a:	9a05      	ldr	r2, [sp, #20]
 800df2c:	464b      	mov	r3, r9
 800df2e:	4442      	add	r2, r8
 800df30:	4631      	mov	r1, r6
 800df32:	4628      	mov	r0, r5
 800df34:	47b8      	blx	r7
 800df36:	3001      	adds	r0, #1
 800df38:	d1c1      	bne.n	800debe <_printf_float+0x33e>
 800df3a:	e680      	b.n	800dc3e <_printf_float+0xbe>
 800df3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800df3e:	2a01      	cmp	r2, #1
 800df40:	dc01      	bgt.n	800df46 <_printf_float+0x3c6>
 800df42:	07db      	lsls	r3, r3, #31
 800df44:	d53a      	bpl.n	800dfbc <_printf_float+0x43c>
 800df46:	2301      	movs	r3, #1
 800df48:	4642      	mov	r2, r8
 800df4a:	4631      	mov	r1, r6
 800df4c:	4628      	mov	r0, r5
 800df4e:	47b8      	blx	r7
 800df50:	3001      	adds	r0, #1
 800df52:	f43f ae74 	beq.w	800dc3e <_printf_float+0xbe>
 800df56:	ee18 3a10 	vmov	r3, s16
 800df5a:	4652      	mov	r2, sl
 800df5c:	4631      	mov	r1, r6
 800df5e:	4628      	mov	r0, r5
 800df60:	47b8      	blx	r7
 800df62:	3001      	adds	r0, #1
 800df64:	f43f ae6b 	beq.w	800dc3e <_printf_float+0xbe>
 800df68:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800df6c:	2200      	movs	r2, #0
 800df6e:	2300      	movs	r3, #0
 800df70:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800df74:	f7f2 fe20 	bl	8000bb8 <__aeabi_dcmpeq>
 800df78:	b9d8      	cbnz	r0, 800dfb2 <_printf_float+0x432>
 800df7a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800df7e:	f108 0201 	add.w	r2, r8, #1
 800df82:	4631      	mov	r1, r6
 800df84:	4628      	mov	r0, r5
 800df86:	47b8      	blx	r7
 800df88:	3001      	adds	r0, #1
 800df8a:	d10e      	bne.n	800dfaa <_printf_float+0x42a>
 800df8c:	e657      	b.n	800dc3e <_printf_float+0xbe>
 800df8e:	2301      	movs	r3, #1
 800df90:	4652      	mov	r2, sl
 800df92:	4631      	mov	r1, r6
 800df94:	4628      	mov	r0, r5
 800df96:	47b8      	blx	r7
 800df98:	3001      	adds	r0, #1
 800df9a:	f43f ae50 	beq.w	800dc3e <_printf_float+0xbe>
 800df9e:	f108 0801 	add.w	r8, r8, #1
 800dfa2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dfa4:	3b01      	subs	r3, #1
 800dfa6:	4543      	cmp	r3, r8
 800dfa8:	dcf1      	bgt.n	800df8e <_printf_float+0x40e>
 800dfaa:	464b      	mov	r3, r9
 800dfac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800dfb0:	e6da      	b.n	800dd68 <_printf_float+0x1e8>
 800dfb2:	f04f 0800 	mov.w	r8, #0
 800dfb6:	f104 0a1a 	add.w	sl, r4, #26
 800dfba:	e7f2      	b.n	800dfa2 <_printf_float+0x422>
 800dfbc:	2301      	movs	r3, #1
 800dfbe:	4642      	mov	r2, r8
 800dfc0:	e7df      	b.n	800df82 <_printf_float+0x402>
 800dfc2:	2301      	movs	r3, #1
 800dfc4:	464a      	mov	r2, r9
 800dfc6:	4631      	mov	r1, r6
 800dfc8:	4628      	mov	r0, r5
 800dfca:	47b8      	blx	r7
 800dfcc:	3001      	adds	r0, #1
 800dfce:	f43f ae36 	beq.w	800dc3e <_printf_float+0xbe>
 800dfd2:	f108 0801 	add.w	r8, r8, #1
 800dfd6:	68e3      	ldr	r3, [r4, #12]
 800dfd8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dfda:	1a5b      	subs	r3, r3, r1
 800dfdc:	4543      	cmp	r3, r8
 800dfde:	dcf0      	bgt.n	800dfc2 <_printf_float+0x442>
 800dfe0:	e6f8      	b.n	800ddd4 <_printf_float+0x254>
 800dfe2:	f04f 0800 	mov.w	r8, #0
 800dfe6:	f104 0919 	add.w	r9, r4, #25
 800dfea:	e7f4      	b.n	800dfd6 <_printf_float+0x456>

0800dfec <_printf_common>:
 800dfec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dff0:	4616      	mov	r6, r2
 800dff2:	4699      	mov	r9, r3
 800dff4:	688a      	ldr	r2, [r1, #8]
 800dff6:	690b      	ldr	r3, [r1, #16]
 800dff8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dffc:	4293      	cmp	r3, r2
 800dffe:	bfb8      	it	lt
 800e000:	4613      	movlt	r3, r2
 800e002:	6033      	str	r3, [r6, #0]
 800e004:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e008:	4607      	mov	r7, r0
 800e00a:	460c      	mov	r4, r1
 800e00c:	b10a      	cbz	r2, 800e012 <_printf_common+0x26>
 800e00e:	3301      	adds	r3, #1
 800e010:	6033      	str	r3, [r6, #0]
 800e012:	6823      	ldr	r3, [r4, #0]
 800e014:	0699      	lsls	r1, r3, #26
 800e016:	bf42      	ittt	mi
 800e018:	6833      	ldrmi	r3, [r6, #0]
 800e01a:	3302      	addmi	r3, #2
 800e01c:	6033      	strmi	r3, [r6, #0]
 800e01e:	6825      	ldr	r5, [r4, #0]
 800e020:	f015 0506 	ands.w	r5, r5, #6
 800e024:	d106      	bne.n	800e034 <_printf_common+0x48>
 800e026:	f104 0a19 	add.w	sl, r4, #25
 800e02a:	68e3      	ldr	r3, [r4, #12]
 800e02c:	6832      	ldr	r2, [r6, #0]
 800e02e:	1a9b      	subs	r3, r3, r2
 800e030:	42ab      	cmp	r3, r5
 800e032:	dc26      	bgt.n	800e082 <_printf_common+0x96>
 800e034:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e038:	1e13      	subs	r3, r2, #0
 800e03a:	6822      	ldr	r2, [r4, #0]
 800e03c:	bf18      	it	ne
 800e03e:	2301      	movne	r3, #1
 800e040:	0692      	lsls	r2, r2, #26
 800e042:	d42b      	bmi.n	800e09c <_printf_common+0xb0>
 800e044:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e048:	4649      	mov	r1, r9
 800e04a:	4638      	mov	r0, r7
 800e04c:	47c0      	blx	r8
 800e04e:	3001      	adds	r0, #1
 800e050:	d01e      	beq.n	800e090 <_printf_common+0xa4>
 800e052:	6823      	ldr	r3, [r4, #0]
 800e054:	6922      	ldr	r2, [r4, #16]
 800e056:	f003 0306 	and.w	r3, r3, #6
 800e05a:	2b04      	cmp	r3, #4
 800e05c:	bf02      	ittt	eq
 800e05e:	68e5      	ldreq	r5, [r4, #12]
 800e060:	6833      	ldreq	r3, [r6, #0]
 800e062:	1aed      	subeq	r5, r5, r3
 800e064:	68a3      	ldr	r3, [r4, #8]
 800e066:	bf0c      	ite	eq
 800e068:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e06c:	2500      	movne	r5, #0
 800e06e:	4293      	cmp	r3, r2
 800e070:	bfc4      	itt	gt
 800e072:	1a9b      	subgt	r3, r3, r2
 800e074:	18ed      	addgt	r5, r5, r3
 800e076:	2600      	movs	r6, #0
 800e078:	341a      	adds	r4, #26
 800e07a:	42b5      	cmp	r5, r6
 800e07c:	d11a      	bne.n	800e0b4 <_printf_common+0xc8>
 800e07e:	2000      	movs	r0, #0
 800e080:	e008      	b.n	800e094 <_printf_common+0xa8>
 800e082:	2301      	movs	r3, #1
 800e084:	4652      	mov	r2, sl
 800e086:	4649      	mov	r1, r9
 800e088:	4638      	mov	r0, r7
 800e08a:	47c0      	blx	r8
 800e08c:	3001      	adds	r0, #1
 800e08e:	d103      	bne.n	800e098 <_printf_common+0xac>
 800e090:	f04f 30ff 	mov.w	r0, #4294967295
 800e094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e098:	3501      	adds	r5, #1
 800e09a:	e7c6      	b.n	800e02a <_printf_common+0x3e>
 800e09c:	18e1      	adds	r1, r4, r3
 800e09e:	1c5a      	adds	r2, r3, #1
 800e0a0:	2030      	movs	r0, #48	; 0x30
 800e0a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e0a6:	4422      	add	r2, r4
 800e0a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e0ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e0b0:	3302      	adds	r3, #2
 800e0b2:	e7c7      	b.n	800e044 <_printf_common+0x58>
 800e0b4:	2301      	movs	r3, #1
 800e0b6:	4622      	mov	r2, r4
 800e0b8:	4649      	mov	r1, r9
 800e0ba:	4638      	mov	r0, r7
 800e0bc:	47c0      	blx	r8
 800e0be:	3001      	adds	r0, #1
 800e0c0:	d0e6      	beq.n	800e090 <_printf_common+0xa4>
 800e0c2:	3601      	adds	r6, #1
 800e0c4:	e7d9      	b.n	800e07a <_printf_common+0x8e>
	...

0800e0c8 <_printf_i>:
 800e0c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e0cc:	7e0f      	ldrb	r7, [r1, #24]
 800e0ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e0d0:	2f78      	cmp	r7, #120	; 0x78
 800e0d2:	4691      	mov	r9, r2
 800e0d4:	4680      	mov	r8, r0
 800e0d6:	460c      	mov	r4, r1
 800e0d8:	469a      	mov	sl, r3
 800e0da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e0de:	d807      	bhi.n	800e0f0 <_printf_i+0x28>
 800e0e0:	2f62      	cmp	r7, #98	; 0x62
 800e0e2:	d80a      	bhi.n	800e0fa <_printf_i+0x32>
 800e0e4:	2f00      	cmp	r7, #0
 800e0e6:	f000 80d4 	beq.w	800e292 <_printf_i+0x1ca>
 800e0ea:	2f58      	cmp	r7, #88	; 0x58
 800e0ec:	f000 80c0 	beq.w	800e270 <_printf_i+0x1a8>
 800e0f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e0f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e0f8:	e03a      	b.n	800e170 <_printf_i+0xa8>
 800e0fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e0fe:	2b15      	cmp	r3, #21
 800e100:	d8f6      	bhi.n	800e0f0 <_printf_i+0x28>
 800e102:	a101      	add	r1, pc, #4	; (adr r1, 800e108 <_printf_i+0x40>)
 800e104:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e108:	0800e161 	.word	0x0800e161
 800e10c:	0800e175 	.word	0x0800e175
 800e110:	0800e0f1 	.word	0x0800e0f1
 800e114:	0800e0f1 	.word	0x0800e0f1
 800e118:	0800e0f1 	.word	0x0800e0f1
 800e11c:	0800e0f1 	.word	0x0800e0f1
 800e120:	0800e175 	.word	0x0800e175
 800e124:	0800e0f1 	.word	0x0800e0f1
 800e128:	0800e0f1 	.word	0x0800e0f1
 800e12c:	0800e0f1 	.word	0x0800e0f1
 800e130:	0800e0f1 	.word	0x0800e0f1
 800e134:	0800e279 	.word	0x0800e279
 800e138:	0800e1a1 	.word	0x0800e1a1
 800e13c:	0800e233 	.word	0x0800e233
 800e140:	0800e0f1 	.word	0x0800e0f1
 800e144:	0800e0f1 	.word	0x0800e0f1
 800e148:	0800e29b 	.word	0x0800e29b
 800e14c:	0800e0f1 	.word	0x0800e0f1
 800e150:	0800e1a1 	.word	0x0800e1a1
 800e154:	0800e0f1 	.word	0x0800e0f1
 800e158:	0800e0f1 	.word	0x0800e0f1
 800e15c:	0800e23b 	.word	0x0800e23b
 800e160:	682b      	ldr	r3, [r5, #0]
 800e162:	1d1a      	adds	r2, r3, #4
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	602a      	str	r2, [r5, #0]
 800e168:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e16c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e170:	2301      	movs	r3, #1
 800e172:	e09f      	b.n	800e2b4 <_printf_i+0x1ec>
 800e174:	6820      	ldr	r0, [r4, #0]
 800e176:	682b      	ldr	r3, [r5, #0]
 800e178:	0607      	lsls	r7, r0, #24
 800e17a:	f103 0104 	add.w	r1, r3, #4
 800e17e:	6029      	str	r1, [r5, #0]
 800e180:	d501      	bpl.n	800e186 <_printf_i+0xbe>
 800e182:	681e      	ldr	r6, [r3, #0]
 800e184:	e003      	b.n	800e18e <_printf_i+0xc6>
 800e186:	0646      	lsls	r6, r0, #25
 800e188:	d5fb      	bpl.n	800e182 <_printf_i+0xba>
 800e18a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800e18e:	2e00      	cmp	r6, #0
 800e190:	da03      	bge.n	800e19a <_printf_i+0xd2>
 800e192:	232d      	movs	r3, #45	; 0x2d
 800e194:	4276      	negs	r6, r6
 800e196:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e19a:	485a      	ldr	r0, [pc, #360]	; (800e304 <_printf_i+0x23c>)
 800e19c:	230a      	movs	r3, #10
 800e19e:	e012      	b.n	800e1c6 <_printf_i+0xfe>
 800e1a0:	682b      	ldr	r3, [r5, #0]
 800e1a2:	6820      	ldr	r0, [r4, #0]
 800e1a4:	1d19      	adds	r1, r3, #4
 800e1a6:	6029      	str	r1, [r5, #0]
 800e1a8:	0605      	lsls	r5, r0, #24
 800e1aa:	d501      	bpl.n	800e1b0 <_printf_i+0xe8>
 800e1ac:	681e      	ldr	r6, [r3, #0]
 800e1ae:	e002      	b.n	800e1b6 <_printf_i+0xee>
 800e1b0:	0641      	lsls	r1, r0, #25
 800e1b2:	d5fb      	bpl.n	800e1ac <_printf_i+0xe4>
 800e1b4:	881e      	ldrh	r6, [r3, #0]
 800e1b6:	4853      	ldr	r0, [pc, #332]	; (800e304 <_printf_i+0x23c>)
 800e1b8:	2f6f      	cmp	r7, #111	; 0x6f
 800e1ba:	bf0c      	ite	eq
 800e1bc:	2308      	moveq	r3, #8
 800e1be:	230a      	movne	r3, #10
 800e1c0:	2100      	movs	r1, #0
 800e1c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e1c6:	6865      	ldr	r5, [r4, #4]
 800e1c8:	60a5      	str	r5, [r4, #8]
 800e1ca:	2d00      	cmp	r5, #0
 800e1cc:	bfa2      	ittt	ge
 800e1ce:	6821      	ldrge	r1, [r4, #0]
 800e1d0:	f021 0104 	bicge.w	r1, r1, #4
 800e1d4:	6021      	strge	r1, [r4, #0]
 800e1d6:	b90e      	cbnz	r6, 800e1dc <_printf_i+0x114>
 800e1d8:	2d00      	cmp	r5, #0
 800e1da:	d04b      	beq.n	800e274 <_printf_i+0x1ac>
 800e1dc:	4615      	mov	r5, r2
 800e1de:	fbb6 f1f3 	udiv	r1, r6, r3
 800e1e2:	fb03 6711 	mls	r7, r3, r1, r6
 800e1e6:	5dc7      	ldrb	r7, [r0, r7]
 800e1e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e1ec:	4637      	mov	r7, r6
 800e1ee:	42bb      	cmp	r3, r7
 800e1f0:	460e      	mov	r6, r1
 800e1f2:	d9f4      	bls.n	800e1de <_printf_i+0x116>
 800e1f4:	2b08      	cmp	r3, #8
 800e1f6:	d10b      	bne.n	800e210 <_printf_i+0x148>
 800e1f8:	6823      	ldr	r3, [r4, #0]
 800e1fa:	07de      	lsls	r6, r3, #31
 800e1fc:	d508      	bpl.n	800e210 <_printf_i+0x148>
 800e1fe:	6923      	ldr	r3, [r4, #16]
 800e200:	6861      	ldr	r1, [r4, #4]
 800e202:	4299      	cmp	r1, r3
 800e204:	bfde      	ittt	le
 800e206:	2330      	movle	r3, #48	; 0x30
 800e208:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e20c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e210:	1b52      	subs	r2, r2, r5
 800e212:	6122      	str	r2, [r4, #16]
 800e214:	f8cd a000 	str.w	sl, [sp]
 800e218:	464b      	mov	r3, r9
 800e21a:	aa03      	add	r2, sp, #12
 800e21c:	4621      	mov	r1, r4
 800e21e:	4640      	mov	r0, r8
 800e220:	f7ff fee4 	bl	800dfec <_printf_common>
 800e224:	3001      	adds	r0, #1
 800e226:	d14a      	bne.n	800e2be <_printf_i+0x1f6>
 800e228:	f04f 30ff 	mov.w	r0, #4294967295
 800e22c:	b004      	add	sp, #16
 800e22e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e232:	6823      	ldr	r3, [r4, #0]
 800e234:	f043 0320 	orr.w	r3, r3, #32
 800e238:	6023      	str	r3, [r4, #0]
 800e23a:	4833      	ldr	r0, [pc, #204]	; (800e308 <_printf_i+0x240>)
 800e23c:	2778      	movs	r7, #120	; 0x78
 800e23e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e242:	6823      	ldr	r3, [r4, #0]
 800e244:	6829      	ldr	r1, [r5, #0]
 800e246:	061f      	lsls	r7, r3, #24
 800e248:	f851 6b04 	ldr.w	r6, [r1], #4
 800e24c:	d402      	bmi.n	800e254 <_printf_i+0x18c>
 800e24e:	065f      	lsls	r7, r3, #25
 800e250:	bf48      	it	mi
 800e252:	b2b6      	uxthmi	r6, r6
 800e254:	07df      	lsls	r7, r3, #31
 800e256:	bf48      	it	mi
 800e258:	f043 0320 	orrmi.w	r3, r3, #32
 800e25c:	6029      	str	r1, [r5, #0]
 800e25e:	bf48      	it	mi
 800e260:	6023      	strmi	r3, [r4, #0]
 800e262:	b91e      	cbnz	r6, 800e26c <_printf_i+0x1a4>
 800e264:	6823      	ldr	r3, [r4, #0]
 800e266:	f023 0320 	bic.w	r3, r3, #32
 800e26a:	6023      	str	r3, [r4, #0]
 800e26c:	2310      	movs	r3, #16
 800e26e:	e7a7      	b.n	800e1c0 <_printf_i+0xf8>
 800e270:	4824      	ldr	r0, [pc, #144]	; (800e304 <_printf_i+0x23c>)
 800e272:	e7e4      	b.n	800e23e <_printf_i+0x176>
 800e274:	4615      	mov	r5, r2
 800e276:	e7bd      	b.n	800e1f4 <_printf_i+0x12c>
 800e278:	682b      	ldr	r3, [r5, #0]
 800e27a:	6826      	ldr	r6, [r4, #0]
 800e27c:	6961      	ldr	r1, [r4, #20]
 800e27e:	1d18      	adds	r0, r3, #4
 800e280:	6028      	str	r0, [r5, #0]
 800e282:	0635      	lsls	r5, r6, #24
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	d501      	bpl.n	800e28c <_printf_i+0x1c4>
 800e288:	6019      	str	r1, [r3, #0]
 800e28a:	e002      	b.n	800e292 <_printf_i+0x1ca>
 800e28c:	0670      	lsls	r0, r6, #25
 800e28e:	d5fb      	bpl.n	800e288 <_printf_i+0x1c0>
 800e290:	8019      	strh	r1, [r3, #0]
 800e292:	2300      	movs	r3, #0
 800e294:	6123      	str	r3, [r4, #16]
 800e296:	4615      	mov	r5, r2
 800e298:	e7bc      	b.n	800e214 <_printf_i+0x14c>
 800e29a:	682b      	ldr	r3, [r5, #0]
 800e29c:	1d1a      	adds	r2, r3, #4
 800e29e:	602a      	str	r2, [r5, #0]
 800e2a0:	681d      	ldr	r5, [r3, #0]
 800e2a2:	6862      	ldr	r2, [r4, #4]
 800e2a4:	2100      	movs	r1, #0
 800e2a6:	4628      	mov	r0, r5
 800e2a8:	f7f2 f80a 	bl	80002c0 <memchr>
 800e2ac:	b108      	cbz	r0, 800e2b2 <_printf_i+0x1ea>
 800e2ae:	1b40      	subs	r0, r0, r5
 800e2b0:	6060      	str	r0, [r4, #4]
 800e2b2:	6863      	ldr	r3, [r4, #4]
 800e2b4:	6123      	str	r3, [r4, #16]
 800e2b6:	2300      	movs	r3, #0
 800e2b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e2bc:	e7aa      	b.n	800e214 <_printf_i+0x14c>
 800e2be:	6923      	ldr	r3, [r4, #16]
 800e2c0:	462a      	mov	r2, r5
 800e2c2:	4649      	mov	r1, r9
 800e2c4:	4640      	mov	r0, r8
 800e2c6:	47d0      	blx	sl
 800e2c8:	3001      	adds	r0, #1
 800e2ca:	d0ad      	beq.n	800e228 <_printf_i+0x160>
 800e2cc:	6823      	ldr	r3, [r4, #0]
 800e2ce:	079b      	lsls	r3, r3, #30
 800e2d0:	d413      	bmi.n	800e2fa <_printf_i+0x232>
 800e2d2:	68e0      	ldr	r0, [r4, #12]
 800e2d4:	9b03      	ldr	r3, [sp, #12]
 800e2d6:	4298      	cmp	r0, r3
 800e2d8:	bfb8      	it	lt
 800e2da:	4618      	movlt	r0, r3
 800e2dc:	e7a6      	b.n	800e22c <_printf_i+0x164>
 800e2de:	2301      	movs	r3, #1
 800e2e0:	4632      	mov	r2, r6
 800e2e2:	4649      	mov	r1, r9
 800e2e4:	4640      	mov	r0, r8
 800e2e6:	47d0      	blx	sl
 800e2e8:	3001      	adds	r0, #1
 800e2ea:	d09d      	beq.n	800e228 <_printf_i+0x160>
 800e2ec:	3501      	adds	r5, #1
 800e2ee:	68e3      	ldr	r3, [r4, #12]
 800e2f0:	9903      	ldr	r1, [sp, #12]
 800e2f2:	1a5b      	subs	r3, r3, r1
 800e2f4:	42ab      	cmp	r3, r5
 800e2f6:	dcf2      	bgt.n	800e2de <_printf_i+0x216>
 800e2f8:	e7eb      	b.n	800e2d2 <_printf_i+0x20a>
 800e2fa:	2500      	movs	r5, #0
 800e2fc:	f104 0619 	add.w	r6, r4, #25
 800e300:	e7f5      	b.n	800e2ee <_printf_i+0x226>
 800e302:	bf00      	nop
 800e304:	080185f6 	.word	0x080185f6
 800e308:	08018607 	.word	0x08018607

0800e30c <__sflush_r>:
 800e30c:	898a      	ldrh	r2, [r1, #12]
 800e30e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e312:	4605      	mov	r5, r0
 800e314:	0710      	lsls	r0, r2, #28
 800e316:	460c      	mov	r4, r1
 800e318:	d458      	bmi.n	800e3cc <__sflush_r+0xc0>
 800e31a:	684b      	ldr	r3, [r1, #4]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	dc05      	bgt.n	800e32c <__sflush_r+0x20>
 800e320:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e322:	2b00      	cmp	r3, #0
 800e324:	dc02      	bgt.n	800e32c <__sflush_r+0x20>
 800e326:	2000      	movs	r0, #0
 800e328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e32c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e32e:	2e00      	cmp	r6, #0
 800e330:	d0f9      	beq.n	800e326 <__sflush_r+0x1a>
 800e332:	2300      	movs	r3, #0
 800e334:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e338:	682f      	ldr	r7, [r5, #0]
 800e33a:	6a21      	ldr	r1, [r4, #32]
 800e33c:	602b      	str	r3, [r5, #0]
 800e33e:	d032      	beq.n	800e3a6 <__sflush_r+0x9a>
 800e340:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e342:	89a3      	ldrh	r3, [r4, #12]
 800e344:	075a      	lsls	r2, r3, #29
 800e346:	d505      	bpl.n	800e354 <__sflush_r+0x48>
 800e348:	6863      	ldr	r3, [r4, #4]
 800e34a:	1ac0      	subs	r0, r0, r3
 800e34c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e34e:	b10b      	cbz	r3, 800e354 <__sflush_r+0x48>
 800e350:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e352:	1ac0      	subs	r0, r0, r3
 800e354:	2300      	movs	r3, #0
 800e356:	4602      	mov	r2, r0
 800e358:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e35a:	6a21      	ldr	r1, [r4, #32]
 800e35c:	4628      	mov	r0, r5
 800e35e:	47b0      	blx	r6
 800e360:	1c43      	adds	r3, r0, #1
 800e362:	89a3      	ldrh	r3, [r4, #12]
 800e364:	d106      	bne.n	800e374 <__sflush_r+0x68>
 800e366:	6829      	ldr	r1, [r5, #0]
 800e368:	291d      	cmp	r1, #29
 800e36a:	d82b      	bhi.n	800e3c4 <__sflush_r+0xb8>
 800e36c:	4a29      	ldr	r2, [pc, #164]	; (800e414 <__sflush_r+0x108>)
 800e36e:	410a      	asrs	r2, r1
 800e370:	07d6      	lsls	r6, r2, #31
 800e372:	d427      	bmi.n	800e3c4 <__sflush_r+0xb8>
 800e374:	2200      	movs	r2, #0
 800e376:	6062      	str	r2, [r4, #4]
 800e378:	04d9      	lsls	r1, r3, #19
 800e37a:	6922      	ldr	r2, [r4, #16]
 800e37c:	6022      	str	r2, [r4, #0]
 800e37e:	d504      	bpl.n	800e38a <__sflush_r+0x7e>
 800e380:	1c42      	adds	r2, r0, #1
 800e382:	d101      	bne.n	800e388 <__sflush_r+0x7c>
 800e384:	682b      	ldr	r3, [r5, #0]
 800e386:	b903      	cbnz	r3, 800e38a <__sflush_r+0x7e>
 800e388:	6560      	str	r0, [r4, #84]	; 0x54
 800e38a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e38c:	602f      	str	r7, [r5, #0]
 800e38e:	2900      	cmp	r1, #0
 800e390:	d0c9      	beq.n	800e326 <__sflush_r+0x1a>
 800e392:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e396:	4299      	cmp	r1, r3
 800e398:	d002      	beq.n	800e3a0 <__sflush_r+0x94>
 800e39a:	4628      	mov	r0, r5
 800e39c:	f001 f9e2 	bl	800f764 <_free_r>
 800e3a0:	2000      	movs	r0, #0
 800e3a2:	6360      	str	r0, [r4, #52]	; 0x34
 800e3a4:	e7c0      	b.n	800e328 <__sflush_r+0x1c>
 800e3a6:	2301      	movs	r3, #1
 800e3a8:	4628      	mov	r0, r5
 800e3aa:	47b0      	blx	r6
 800e3ac:	1c41      	adds	r1, r0, #1
 800e3ae:	d1c8      	bne.n	800e342 <__sflush_r+0x36>
 800e3b0:	682b      	ldr	r3, [r5, #0]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d0c5      	beq.n	800e342 <__sflush_r+0x36>
 800e3b6:	2b1d      	cmp	r3, #29
 800e3b8:	d001      	beq.n	800e3be <__sflush_r+0xb2>
 800e3ba:	2b16      	cmp	r3, #22
 800e3bc:	d101      	bne.n	800e3c2 <__sflush_r+0xb6>
 800e3be:	602f      	str	r7, [r5, #0]
 800e3c0:	e7b1      	b.n	800e326 <__sflush_r+0x1a>
 800e3c2:	89a3      	ldrh	r3, [r4, #12]
 800e3c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e3c8:	81a3      	strh	r3, [r4, #12]
 800e3ca:	e7ad      	b.n	800e328 <__sflush_r+0x1c>
 800e3cc:	690f      	ldr	r7, [r1, #16]
 800e3ce:	2f00      	cmp	r7, #0
 800e3d0:	d0a9      	beq.n	800e326 <__sflush_r+0x1a>
 800e3d2:	0793      	lsls	r3, r2, #30
 800e3d4:	680e      	ldr	r6, [r1, #0]
 800e3d6:	bf08      	it	eq
 800e3d8:	694b      	ldreq	r3, [r1, #20]
 800e3da:	600f      	str	r7, [r1, #0]
 800e3dc:	bf18      	it	ne
 800e3de:	2300      	movne	r3, #0
 800e3e0:	eba6 0807 	sub.w	r8, r6, r7
 800e3e4:	608b      	str	r3, [r1, #8]
 800e3e6:	f1b8 0f00 	cmp.w	r8, #0
 800e3ea:	dd9c      	ble.n	800e326 <__sflush_r+0x1a>
 800e3ec:	6a21      	ldr	r1, [r4, #32]
 800e3ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e3f0:	4643      	mov	r3, r8
 800e3f2:	463a      	mov	r2, r7
 800e3f4:	4628      	mov	r0, r5
 800e3f6:	47b0      	blx	r6
 800e3f8:	2800      	cmp	r0, #0
 800e3fa:	dc06      	bgt.n	800e40a <__sflush_r+0xfe>
 800e3fc:	89a3      	ldrh	r3, [r4, #12]
 800e3fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e402:	81a3      	strh	r3, [r4, #12]
 800e404:	f04f 30ff 	mov.w	r0, #4294967295
 800e408:	e78e      	b.n	800e328 <__sflush_r+0x1c>
 800e40a:	4407      	add	r7, r0
 800e40c:	eba8 0800 	sub.w	r8, r8, r0
 800e410:	e7e9      	b.n	800e3e6 <__sflush_r+0xda>
 800e412:	bf00      	nop
 800e414:	dfbffffe 	.word	0xdfbffffe

0800e418 <_fflush_r>:
 800e418:	b538      	push	{r3, r4, r5, lr}
 800e41a:	690b      	ldr	r3, [r1, #16]
 800e41c:	4605      	mov	r5, r0
 800e41e:	460c      	mov	r4, r1
 800e420:	b913      	cbnz	r3, 800e428 <_fflush_r+0x10>
 800e422:	2500      	movs	r5, #0
 800e424:	4628      	mov	r0, r5
 800e426:	bd38      	pop	{r3, r4, r5, pc}
 800e428:	b118      	cbz	r0, 800e432 <_fflush_r+0x1a>
 800e42a:	6a03      	ldr	r3, [r0, #32]
 800e42c:	b90b      	cbnz	r3, 800e432 <_fflush_r+0x1a>
 800e42e:	f000 f8a9 	bl	800e584 <__sinit>
 800e432:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e436:	2b00      	cmp	r3, #0
 800e438:	d0f3      	beq.n	800e422 <_fflush_r+0xa>
 800e43a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e43c:	07d0      	lsls	r0, r2, #31
 800e43e:	d404      	bmi.n	800e44a <_fflush_r+0x32>
 800e440:	0599      	lsls	r1, r3, #22
 800e442:	d402      	bmi.n	800e44a <_fflush_r+0x32>
 800e444:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e446:	f000 fb01 	bl	800ea4c <__retarget_lock_acquire_recursive>
 800e44a:	4628      	mov	r0, r5
 800e44c:	4621      	mov	r1, r4
 800e44e:	f7ff ff5d 	bl	800e30c <__sflush_r>
 800e452:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e454:	07da      	lsls	r2, r3, #31
 800e456:	4605      	mov	r5, r0
 800e458:	d4e4      	bmi.n	800e424 <_fflush_r+0xc>
 800e45a:	89a3      	ldrh	r3, [r4, #12]
 800e45c:	059b      	lsls	r3, r3, #22
 800e45e:	d4e1      	bmi.n	800e424 <_fflush_r+0xc>
 800e460:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e462:	f000 faf4 	bl	800ea4e <__retarget_lock_release_recursive>
 800e466:	e7dd      	b.n	800e424 <_fflush_r+0xc>

0800e468 <fflush>:
 800e468:	4601      	mov	r1, r0
 800e46a:	b920      	cbnz	r0, 800e476 <fflush+0xe>
 800e46c:	4a04      	ldr	r2, [pc, #16]	; (800e480 <fflush+0x18>)
 800e46e:	4905      	ldr	r1, [pc, #20]	; (800e484 <fflush+0x1c>)
 800e470:	4805      	ldr	r0, [pc, #20]	; (800e488 <fflush+0x20>)
 800e472:	f000 b89f 	b.w	800e5b4 <_fwalk_sglue>
 800e476:	4b05      	ldr	r3, [pc, #20]	; (800e48c <fflush+0x24>)
 800e478:	6818      	ldr	r0, [r3, #0]
 800e47a:	f7ff bfcd 	b.w	800e418 <_fflush_r>
 800e47e:	bf00      	nop
 800e480:	2000018c 	.word	0x2000018c
 800e484:	0800e419 	.word	0x0800e419
 800e488:	20000198 	.word	0x20000198
 800e48c:	200001e4 	.word	0x200001e4

0800e490 <std>:
 800e490:	2300      	movs	r3, #0
 800e492:	b510      	push	{r4, lr}
 800e494:	4604      	mov	r4, r0
 800e496:	e9c0 3300 	strd	r3, r3, [r0]
 800e49a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e49e:	6083      	str	r3, [r0, #8]
 800e4a0:	8181      	strh	r1, [r0, #12]
 800e4a2:	6643      	str	r3, [r0, #100]	; 0x64
 800e4a4:	81c2      	strh	r2, [r0, #14]
 800e4a6:	6183      	str	r3, [r0, #24]
 800e4a8:	4619      	mov	r1, r3
 800e4aa:	2208      	movs	r2, #8
 800e4ac:	305c      	adds	r0, #92	; 0x5c
 800e4ae:	f000 fa41 	bl	800e934 <memset>
 800e4b2:	4b05      	ldr	r3, [pc, #20]	; (800e4c8 <std+0x38>)
 800e4b4:	6263      	str	r3, [r4, #36]	; 0x24
 800e4b6:	4b05      	ldr	r3, [pc, #20]	; (800e4cc <std+0x3c>)
 800e4b8:	62a3      	str	r3, [r4, #40]	; 0x28
 800e4ba:	4b05      	ldr	r3, [pc, #20]	; (800e4d0 <std+0x40>)
 800e4bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e4be:	4b05      	ldr	r3, [pc, #20]	; (800e4d4 <std+0x44>)
 800e4c0:	6224      	str	r4, [r4, #32]
 800e4c2:	6323      	str	r3, [r4, #48]	; 0x30
 800e4c4:	bd10      	pop	{r4, pc}
 800e4c6:	bf00      	nop
 800e4c8:	0800e6dd 	.word	0x0800e6dd
 800e4cc:	0800e6ff 	.word	0x0800e6ff
 800e4d0:	0800e737 	.word	0x0800e737
 800e4d4:	0800e75b 	.word	0x0800e75b

0800e4d8 <stdio_exit_handler>:
 800e4d8:	4a02      	ldr	r2, [pc, #8]	; (800e4e4 <stdio_exit_handler+0xc>)
 800e4da:	4903      	ldr	r1, [pc, #12]	; (800e4e8 <stdio_exit_handler+0x10>)
 800e4dc:	4803      	ldr	r0, [pc, #12]	; (800e4ec <stdio_exit_handler+0x14>)
 800e4de:	f000 b869 	b.w	800e5b4 <_fwalk_sglue>
 800e4e2:	bf00      	nop
 800e4e4:	2000018c 	.word	0x2000018c
 800e4e8:	0800e419 	.word	0x0800e419
 800e4ec:	20000198 	.word	0x20000198

0800e4f0 <cleanup_stdio>:
 800e4f0:	6841      	ldr	r1, [r0, #4]
 800e4f2:	4b0c      	ldr	r3, [pc, #48]	; (800e524 <cleanup_stdio+0x34>)
 800e4f4:	4299      	cmp	r1, r3
 800e4f6:	b510      	push	{r4, lr}
 800e4f8:	4604      	mov	r4, r0
 800e4fa:	d001      	beq.n	800e500 <cleanup_stdio+0x10>
 800e4fc:	f7ff ff8c 	bl	800e418 <_fflush_r>
 800e500:	68a1      	ldr	r1, [r4, #8]
 800e502:	4b09      	ldr	r3, [pc, #36]	; (800e528 <cleanup_stdio+0x38>)
 800e504:	4299      	cmp	r1, r3
 800e506:	d002      	beq.n	800e50e <cleanup_stdio+0x1e>
 800e508:	4620      	mov	r0, r4
 800e50a:	f7ff ff85 	bl	800e418 <_fflush_r>
 800e50e:	68e1      	ldr	r1, [r4, #12]
 800e510:	4b06      	ldr	r3, [pc, #24]	; (800e52c <cleanup_stdio+0x3c>)
 800e512:	4299      	cmp	r1, r3
 800e514:	d004      	beq.n	800e520 <cleanup_stdio+0x30>
 800e516:	4620      	mov	r0, r4
 800e518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e51c:	f7ff bf7c 	b.w	800e418 <_fflush_r>
 800e520:	bd10      	pop	{r4, pc}
 800e522:	bf00      	nop
 800e524:	200004fc 	.word	0x200004fc
 800e528:	20000564 	.word	0x20000564
 800e52c:	200005cc 	.word	0x200005cc

0800e530 <global_stdio_init.part.0>:
 800e530:	b510      	push	{r4, lr}
 800e532:	4b0b      	ldr	r3, [pc, #44]	; (800e560 <global_stdio_init.part.0+0x30>)
 800e534:	4c0b      	ldr	r4, [pc, #44]	; (800e564 <global_stdio_init.part.0+0x34>)
 800e536:	4a0c      	ldr	r2, [pc, #48]	; (800e568 <global_stdio_init.part.0+0x38>)
 800e538:	601a      	str	r2, [r3, #0]
 800e53a:	4620      	mov	r0, r4
 800e53c:	2200      	movs	r2, #0
 800e53e:	2104      	movs	r1, #4
 800e540:	f7ff ffa6 	bl	800e490 <std>
 800e544:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800e548:	2201      	movs	r2, #1
 800e54a:	2109      	movs	r1, #9
 800e54c:	f7ff ffa0 	bl	800e490 <std>
 800e550:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800e554:	2202      	movs	r2, #2
 800e556:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e55a:	2112      	movs	r1, #18
 800e55c:	f7ff bf98 	b.w	800e490 <std>
 800e560:	20000634 	.word	0x20000634
 800e564:	200004fc 	.word	0x200004fc
 800e568:	0800e4d9 	.word	0x0800e4d9

0800e56c <__sfp_lock_acquire>:
 800e56c:	4801      	ldr	r0, [pc, #4]	; (800e574 <__sfp_lock_acquire+0x8>)
 800e56e:	f000 ba6d 	b.w	800ea4c <__retarget_lock_acquire_recursive>
 800e572:	bf00      	nop
 800e574:	2000063d 	.word	0x2000063d

0800e578 <__sfp_lock_release>:
 800e578:	4801      	ldr	r0, [pc, #4]	; (800e580 <__sfp_lock_release+0x8>)
 800e57a:	f000 ba68 	b.w	800ea4e <__retarget_lock_release_recursive>
 800e57e:	bf00      	nop
 800e580:	2000063d 	.word	0x2000063d

0800e584 <__sinit>:
 800e584:	b510      	push	{r4, lr}
 800e586:	4604      	mov	r4, r0
 800e588:	f7ff fff0 	bl	800e56c <__sfp_lock_acquire>
 800e58c:	6a23      	ldr	r3, [r4, #32]
 800e58e:	b11b      	cbz	r3, 800e598 <__sinit+0x14>
 800e590:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e594:	f7ff bff0 	b.w	800e578 <__sfp_lock_release>
 800e598:	4b04      	ldr	r3, [pc, #16]	; (800e5ac <__sinit+0x28>)
 800e59a:	6223      	str	r3, [r4, #32]
 800e59c:	4b04      	ldr	r3, [pc, #16]	; (800e5b0 <__sinit+0x2c>)
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d1f5      	bne.n	800e590 <__sinit+0xc>
 800e5a4:	f7ff ffc4 	bl	800e530 <global_stdio_init.part.0>
 800e5a8:	e7f2      	b.n	800e590 <__sinit+0xc>
 800e5aa:	bf00      	nop
 800e5ac:	0800e4f1 	.word	0x0800e4f1
 800e5b0:	20000634 	.word	0x20000634

0800e5b4 <_fwalk_sglue>:
 800e5b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e5b8:	4607      	mov	r7, r0
 800e5ba:	4688      	mov	r8, r1
 800e5bc:	4614      	mov	r4, r2
 800e5be:	2600      	movs	r6, #0
 800e5c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e5c4:	f1b9 0901 	subs.w	r9, r9, #1
 800e5c8:	d505      	bpl.n	800e5d6 <_fwalk_sglue+0x22>
 800e5ca:	6824      	ldr	r4, [r4, #0]
 800e5cc:	2c00      	cmp	r4, #0
 800e5ce:	d1f7      	bne.n	800e5c0 <_fwalk_sglue+0xc>
 800e5d0:	4630      	mov	r0, r6
 800e5d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e5d6:	89ab      	ldrh	r3, [r5, #12]
 800e5d8:	2b01      	cmp	r3, #1
 800e5da:	d907      	bls.n	800e5ec <_fwalk_sglue+0x38>
 800e5dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e5e0:	3301      	adds	r3, #1
 800e5e2:	d003      	beq.n	800e5ec <_fwalk_sglue+0x38>
 800e5e4:	4629      	mov	r1, r5
 800e5e6:	4638      	mov	r0, r7
 800e5e8:	47c0      	blx	r8
 800e5ea:	4306      	orrs	r6, r0
 800e5ec:	3568      	adds	r5, #104	; 0x68
 800e5ee:	e7e9      	b.n	800e5c4 <_fwalk_sglue+0x10>

0800e5f0 <iprintf>:
 800e5f0:	b40f      	push	{r0, r1, r2, r3}
 800e5f2:	b507      	push	{r0, r1, r2, lr}
 800e5f4:	4906      	ldr	r1, [pc, #24]	; (800e610 <iprintf+0x20>)
 800e5f6:	ab04      	add	r3, sp, #16
 800e5f8:	6808      	ldr	r0, [r1, #0]
 800e5fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800e5fe:	6881      	ldr	r1, [r0, #8]
 800e600:	9301      	str	r3, [sp, #4]
 800e602:	f001 fdf9 	bl	80101f8 <_vfiprintf_r>
 800e606:	b003      	add	sp, #12
 800e608:	f85d eb04 	ldr.w	lr, [sp], #4
 800e60c:	b004      	add	sp, #16
 800e60e:	4770      	bx	lr
 800e610:	200001e4 	.word	0x200001e4

0800e614 <putchar>:
 800e614:	4b02      	ldr	r3, [pc, #8]	; (800e620 <putchar+0xc>)
 800e616:	4601      	mov	r1, r0
 800e618:	6818      	ldr	r0, [r3, #0]
 800e61a:	6882      	ldr	r2, [r0, #8]
 800e61c:	f001 bf68 	b.w	80104f0 <_putc_r>
 800e620:	200001e4 	.word	0x200001e4

0800e624 <_puts_r>:
 800e624:	6a03      	ldr	r3, [r0, #32]
 800e626:	b570      	push	{r4, r5, r6, lr}
 800e628:	6884      	ldr	r4, [r0, #8]
 800e62a:	4605      	mov	r5, r0
 800e62c:	460e      	mov	r6, r1
 800e62e:	b90b      	cbnz	r3, 800e634 <_puts_r+0x10>
 800e630:	f7ff ffa8 	bl	800e584 <__sinit>
 800e634:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e636:	07db      	lsls	r3, r3, #31
 800e638:	d405      	bmi.n	800e646 <_puts_r+0x22>
 800e63a:	89a3      	ldrh	r3, [r4, #12]
 800e63c:	0598      	lsls	r0, r3, #22
 800e63e:	d402      	bmi.n	800e646 <_puts_r+0x22>
 800e640:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e642:	f000 fa03 	bl	800ea4c <__retarget_lock_acquire_recursive>
 800e646:	89a3      	ldrh	r3, [r4, #12]
 800e648:	0719      	lsls	r1, r3, #28
 800e64a:	d513      	bpl.n	800e674 <_puts_r+0x50>
 800e64c:	6923      	ldr	r3, [r4, #16]
 800e64e:	b18b      	cbz	r3, 800e674 <_puts_r+0x50>
 800e650:	3e01      	subs	r6, #1
 800e652:	68a3      	ldr	r3, [r4, #8]
 800e654:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e658:	3b01      	subs	r3, #1
 800e65a:	60a3      	str	r3, [r4, #8]
 800e65c:	b9e9      	cbnz	r1, 800e69a <_puts_r+0x76>
 800e65e:	2b00      	cmp	r3, #0
 800e660:	da2e      	bge.n	800e6c0 <_puts_r+0x9c>
 800e662:	4622      	mov	r2, r4
 800e664:	210a      	movs	r1, #10
 800e666:	4628      	mov	r0, r5
 800e668:	f000 f8b4 	bl	800e7d4 <__swbuf_r>
 800e66c:	3001      	adds	r0, #1
 800e66e:	d007      	beq.n	800e680 <_puts_r+0x5c>
 800e670:	250a      	movs	r5, #10
 800e672:	e007      	b.n	800e684 <_puts_r+0x60>
 800e674:	4621      	mov	r1, r4
 800e676:	4628      	mov	r0, r5
 800e678:	f000 f8ea 	bl	800e850 <__swsetup_r>
 800e67c:	2800      	cmp	r0, #0
 800e67e:	d0e7      	beq.n	800e650 <_puts_r+0x2c>
 800e680:	f04f 35ff 	mov.w	r5, #4294967295
 800e684:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e686:	07da      	lsls	r2, r3, #31
 800e688:	d405      	bmi.n	800e696 <_puts_r+0x72>
 800e68a:	89a3      	ldrh	r3, [r4, #12]
 800e68c:	059b      	lsls	r3, r3, #22
 800e68e:	d402      	bmi.n	800e696 <_puts_r+0x72>
 800e690:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e692:	f000 f9dc 	bl	800ea4e <__retarget_lock_release_recursive>
 800e696:	4628      	mov	r0, r5
 800e698:	bd70      	pop	{r4, r5, r6, pc}
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	da04      	bge.n	800e6a8 <_puts_r+0x84>
 800e69e:	69a2      	ldr	r2, [r4, #24]
 800e6a0:	429a      	cmp	r2, r3
 800e6a2:	dc06      	bgt.n	800e6b2 <_puts_r+0x8e>
 800e6a4:	290a      	cmp	r1, #10
 800e6a6:	d004      	beq.n	800e6b2 <_puts_r+0x8e>
 800e6a8:	6823      	ldr	r3, [r4, #0]
 800e6aa:	1c5a      	adds	r2, r3, #1
 800e6ac:	6022      	str	r2, [r4, #0]
 800e6ae:	7019      	strb	r1, [r3, #0]
 800e6b0:	e7cf      	b.n	800e652 <_puts_r+0x2e>
 800e6b2:	4622      	mov	r2, r4
 800e6b4:	4628      	mov	r0, r5
 800e6b6:	f000 f88d 	bl	800e7d4 <__swbuf_r>
 800e6ba:	3001      	adds	r0, #1
 800e6bc:	d1c9      	bne.n	800e652 <_puts_r+0x2e>
 800e6be:	e7df      	b.n	800e680 <_puts_r+0x5c>
 800e6c0:	6823      	ldr	r3, [r4, #0]
 800e6c2:	250a      	movs	r5, #10
 800e6c4:	1c5a      	adds	r2, r3, #1
 800e6c6:	6022      	str	r2, [r4, #0]
 800e6c8:	701d      	strb	r5, [r3, #0]
 800e6ca:	e7db      	b.n	800e684 <_puts_r+0x60>

0800e6cc <puts>:
 800e6cc:	4b02      	ldr	r3, [pc, #8]	; (800e6d8 <puts+0xc>)
 800e6ce:	4601      	mov	r1, r0
 800e6d0:	6818      	ldr	r0, [r3, #0]
 800e6d2:	f7ff bfa7 	b.w	800e624 <_puts_r>
 800e6d6:	bf00      	nop
 800e6d8:	200001e4 	.word	0x200001e4

0800e6dc <__sread>:
 800e6dc:	b510      	push	{r4, lr}
 800e6de:	460c      	mov	r4, r1
 800e6e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e6e4:	f000 f954 	bl	800e990 <_read_r>
 800e6e8:	2800      	cmp	r0, #0
 800e6ea:	bfab      	itete	ge
 800e6ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e6ee:	89a3      	ldrhlt	r3, [r4, #12]
 800e6f0:	181b      	addge	r3, r3, r0
 800e6f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e6f6:	bfac      	ite	ge
 800e6f8:	6563      	strge	r3, [r4, #84]	; 0x54
 800e6fa:	81a3      	strhlt	r3, [r4, #12]
 800e6fc:	bd10      	pop	{r4, pc}

0800e6fe <__swrite>:
 800e6fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e702:	461f      	mov	r7, r3
 800e704:	898b      	ldrh	r3, [r1, #12]
 800e706:	05db      	lsls	r3, r3, #23
 800e708:	4605      	mov	r5, r0
 800e70a:	460c      	mov	r4, r1
 800e70c:	4616      	mov	r6, r2
 800e70e:	d505      	bpl.n	800e71c <__swrite+0x1e>
 800e710:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e714:	2302      	movs	r3, #2
 800e716:	2200      	movs	r2, #0
 800e718:	f000 f928 	bl	800e96c <_lseek_r>
 800e71c:	89a3      	ldrh	r3, [r4, #12]
 800e71e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e722:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e726:	81a3      	strh	r3, [r4, #12]
 800e728:	4632      	mov	r2, r6
 800e72a:	463b      	mov	r3, r7
 800e72c:	4628      	mov	r0, r5
 800e72e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e732:	f000 b94f 	b.w	800e9d4 <_write_r>

0800e736 <__sseek>:
 800e736:	b510      	push	{r4, lr}
 800e738:	460c      	mov	r4, r1
 800e73a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e73e:	f000 f915 	bl	800e96c <_lseek_r>
 800e742:	1c43      	adds	r3, r0, #1
 800e744:	89a3      	ldrh	r3, [r4, #12]
 800e746:	bf15      	itete	ne
 800e748:	6560      	strne	r0, [r4, #84]	; 0x54
 800e74a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e74e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e752:	81a3      	strheq	r3, [r4, #12]
 800e754:	bf18      	it	ne
 800e756:	81a3      	strhne	r3, [r4, #12]
 800e758:	bd10      	pop	{r4, pc}

0800e75a <__sclose>:
 800e75a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e75e:	f000 b8f5 	b.w	800e94c <_close_r>

0800e762 <_vsniprintf_r>:
 800e762:	b530      	push	{r4, r5, lr}
 800e764:	4614      	mov	r4, r2
 800e766:	2c00      	cmp	r4, #0
 800e768:	b09b      	sub	sp, #108	; 0x6c
 800e76a:	4605      	mov	r5, r0
 800e76c:	461a      	mov	r2, r3
 800e76e:	da05      	bge.n	800e77c <_vsniprintf_r+0x1a>
 800e770:	238b      	movs	r3, #139	; 0x8b
 800e772:	6003      	str	r3, [r0, #0]
 800e774:	f04f 30ff 	mov.w	r0, #4294967295
 800e778:	b01b      	add	sp, #108	; 0x6c
 800e77a:	bd30      	pop	{r4, r5, pc}
 800e77c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800e780:	f8ad 300c 	strh.w	r3, [sp, #12]
 800e784:	bf14      	ite	ne
 800e786:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e78a:	4623      	moveq	r3, r4
 800e78c:	9302      	str	r3, [sp, #8]
 800e78e:	9305      	str	r3, [sp, #20]
 800e790:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e794:	9100      	str	r1, [sp, #0]
 800e796:	9104      	str	r1, [sp, #16]
 800e798:	f8ad 300e 	strh.w	r3, [sp, #14]
 800e79c:	4669      	mov	r1, sp
 800e79e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800e7a0:	f001 fc02 	bl	800ffa8 <_svfiprintf_r>
 800e7a4:	1c43      	adds	r3, r0, #1
 800e7a6:	bfbc      	itt	lt
 800e7a8:	238b      	movlt	r3, #139	; 0x8b
 800e7aa:	602b      	strlt	r3, [r5, #0]
 800e7ac:	2c00      	cmp	r4, #0
 800e7ae:	d0e3      	beq.n	800e778 <_vsniprintf_r+0x16>
 800e7b0:	9b00      	ldr	r3, [sp, #0]
 800e7b2:	2200      	movs	r2, #0
 800e7b4:	701a      	strb	r2, [r3, #0]
 800e7b6:	e7df      	b.n	800e778 <_vsniprintf_r+0x16>

0800e7b8 <vsniprintf>:
 800e7b8:	b507      	push	{r0, r1, r2, lr}
 800e7ba:	9300      	str	r3, [sp, #0]
 800e7bc:	4613      	mov	r3, r2
 800e7be:	460a      	mov	r2, r1
 800e7c0:	4601      	mov	r1, r0
 800e7c2:	4803      	ldr	r0, [pc, #12]	; (800e7d0 <vsniprintf+0x18>)
 800e7c4:	6800      	ldr	r0, [r0, #0]
 800e7c6:	f7ff ffcc 	bl	800e762 <_vsniprintf_r>
 800e7ca:	b003      	add	sp, #12
 800e7cc:	f85d fb04 	ldr.w	pc, [sp], #4
 800e7d0:	200001e4 	.word	0x200001e4

0800e7d4 <__swbuf_r>:
 800e7d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7d6:	460e      	mov	r6, r1
 800e7d8:	4614      	mov	r4, r2
 800e7da:	4605      	mov	r5, r0
 800e7dc:	b118      	cbz	r0, 800e7e6 <__swbuf_r+0x12>
 800e7de:	6a03      	ldr	r3, [r0, #32]
 800e7e0:	b90b      	cbnz	r3, 800e7e6 <__swbuf_r+0x12>
 800e7e2:	f7ff fecf 	bl	800e584 <__sinit>
 800e7e6:	69a3      	ldr	r3, [r4, #24]
 800e7e8:	60a3      	str	r3, [r4, #8]
 800e7ea:	89a3      	ldrh	r3, [r4, #12]
 800e7ec:	071a      	lsls	r2, r3, #28
 800e7ee:	d525      	bpl.n	800e83c <__swbuf_r+0x68>
 800e7f0:	6923      	ldr	r3, [r4, #16]
 800e7f2:	b31b      	cbz	r3, 800e83c <__swbuf_r+0x68>
 800e7f4:	6823      	ldr	r3, [r4, #0]
 800e7f6:	6922      	ldr	r2, [r4, #16]
 800e7f8:	1a98      	subs	r0, r3, r2
 800e7fa:	6963      	ldr	r3, [r4, #20]
 800e7fc:	b2f6      	uxtb	r6, r6
 800e7fe:	4283      	cmp	r3, r0
 800e800:	4637      	mov	r7, r6
 800e802:	dc04      	bgt.n	800e80e <__swbuf_r+0x3a>
 800e804:	4621      	mov	r1, r4
 800e806:	4628      	mov	r0, r5
 800e808:	f7ff fe06 	bl	800e418 <_fflush_r>
 800e80c:	b9e0      	cbnz	r0, 800e848 <__swbuf_r+0x74>
 800e80e:	68a3      	ldr	r3, [r4, #8]
 800e810:	3b01      	subs	r3, #1
 800e812:	60a3      	str	r3, [r4, #8]
 800e814:	6823      	ldr	r3, [r4, #0]
 800e816:	1c5a      	adds	r2, r3, #1
 800e818:	6022      	str	r2, [r4, #0]
 800e81a:	701e      	strb	r6, [r3, #0]
 800e81c:	6962      	ldr	r2, [r4, #20]
 800e81e:	1c43      	adds	r3, r0, #1
 800e820:	429a      	cmp	r2, r3
 800e822:	d004      	beq.n	800e82e <__swbuf_r+0x5a>
 800e824:	89a3      	ldrh	r3, [r4, #12]
 800e826:	07db      	lsls	r3, r3, #31
 800e828:	d506      	bpl.n	800e838 <__swbuf_r+0x64>
 800e82a:	2e0a      	cmp	r6, #10
 800e82c:	d104      	bne.n	800e838 <__swbuf_r+0x64>
 800e82e:	4621      	mov	r1, r4
 800e830:	4628      	mov	r0, r5
 800e832:	f7ff fdf1 	bl	800e418 <_fflush_r>
 800e836:	b938      	cbnz	r0, 800e848 <__swbuf_r+0x74>
 800e838:	4638      	mov	r0, r7
 800e83a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e83c:	4621      	mov	r1, r4
 800e83e:	4628      	mov	r0, r5
 800e840:	f000 f806 	bl	800e850 <__swsetup_r>
 800e844:	2800      	cmp	r0, #0
 800e846:	d0d5      	beq.n	800e7f4 <__swbuf_r+0x20>
 800e848:	f04f 37ff 	mov.w	r7, #4294967295
 800e84c:	e7f4      	b.n	800e838 <__swbuf_r+0x64>
	...

0800e850 <__swsetup_r>:
 800e850:	b538      	push	{r3, r4, r5, lr}
 800e852:	4b2a      	ldr	r3, [pc, #168]	; (800e8fc <__swsetup_r+0xac>)
 800e854:	4605      	mov	r5, r0
 800e856:	6818      	ldr	r0, [r3, #0]
 800e858:	460c      	mov	r4, r1
 800e85a:	b118      	cbz	r0, 800e864 <__swsetup_r+0x14>
 800e85c:	6a03      	ldr	r3, [r0, #32]
 800e85e:	b90b      	cbnz	r3, 800e864 <__swsetup_r+0x14>
 800e860:	f7ff fe90 	bl	800e584 <__sinit>
 800e864:	89a3      	ldrh	r3, [r4, #12]
 800e866:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e86a:	0718      	lsls	r0, r3, #28
 800e86c:	d422      	bmi.n	800e8b4 <__swsetup_r+0x64>
 800e86e:	06d9      	lsls	r1, r3, #27
 800e870:	d407      	bmi.n	800e882 <__swsetup_r+0x32>
 800e872:	2309      	movs	r3, #9
 800e874:	602b      	str	r3, [r5, #0]
 800e876:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e87a:	81a3      	strh	r3, [r4, #12]
 800e87c:	f04f 30ff 	mov.w	r0, #4294967295
 800e880:	e034      	b.n	800e8ec <__swsetup_r+0x9c>
 800e882:	0758      	lsls	r0, r3, #29
 800e884:	d512      	bpl.n	800e8ac <__swsetup_r+0x5c>
 800e886:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e888:	b141      	cbz	r1, 800e89c <__swsetup_r+0x4c>
 800e88a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e88e:	4299      	cmp	r1, r3
 800e890:	d002      	beq.n	800e898 <__swsetup_r+0x48>
 800e892:	4628      	mov	r0, r5
 800e894:	f000 ff66 	bl	800f764 <_free_r>
 800e898:	2300      	movs	r3, #0
 800e89a:	6363      	str	r3, [r4, #52]	; 0x34
 800e89c:	89a3      	ldrh	r3, [r4, #12]
 800e89e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e8a2:	81a3      	strh	r3, [r4, #12]
 800e8a4:	2300      	movs	r3, #0
 800e8a6:	6063      	str	r3, [r4, #4]
 800e8a8:	6923      	ldr	r3, [r4, #16]
 800e8aa:	6023      	str	r3, [r4, #0]
 800e8ac:	89a3      	ldrh	r3, [r4, #12]
 800e8ae:	f043 0308 	orr.w	r3, r3, #8
 800e8b2:	81a3      	strh	r3, [r4, #12]
 800e8b4:	6923      	ldr	r3, [r4, #16]
 800e8b6:	b94b      	cbnz	r3, 800e8cc <__swsetup_r+0x7c>
 800e8b8:	89a3      	ldrh	r3, [r4, #12]
 800e8ba:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e8be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e8c2:	d003      	beq.n	800e8cc <__swsetup_r+0x7c>
 800e8c4:	4621      	mov	r1, r4
 800e8c6:	4628      	mov	r0, r5
 800e8c8:	f001 fdd6 	bl	8010478 <__smakebuf_r>
 800e8cc:	89a0      	ldrh	r0, [r4, #12]
 800e8ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e8d2:	f010 0301 	ands.w	r3, r0, #1
 800e8d6:	d00a      	beq.n	800e8ee <__swsetup_r+0x9e>
 800e8d8:	2300      	movs	r3, #0
 800e8da:	60a3      	str	r3, [r4, #8]
 800e8dc:	6963      	ldr	r3, [r4, #20]
 800e8de:	425b      	negs	r3, r3
 800e8e0:	61a3      	str	r3, [r4, #24]
 800e8e2:	6923      	ldr	r3, [r4, #16]
 800e8e4:	b943      	cbnz	r3, 800e8f8 <__swsetup_r+0xa8>
 800e8e6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e8ea:	d1c4      	bne.n	800e876 <__swsetup_r+0x26>
 800e8ec:	bd38      	pop	{r3, r4, r5, pc}
 800e8ee:	0781      	lsls	r1, r0, #30
 800e8f0:	bf58      	it	pl
 800e8f2:	6963      	ldrpl	r3, [r4, #20]
 800e8f4:	60a3      	str	r3, [r4, #8]
 800e8f6:	e7f4      	b.n	800e8e2 <__swsetup_r+0x92>
 800e8f8:	2000      	movs	r0, #0
 800e8fa:	e7f7      	b.n	800e8ec <__swsetup_r+0x9c>
 800e8fc:	200001e4 	.word	0x200001e4

0800e900 <memmove>:
 800e900:	4288      	cmp	r0, r1
 800e902:	b510      	push	{r4, lr}
 800e904:	eb01 0402 	add.w	r4, r1, r2
 800e908:	d902      	bls.n	800e910 <memmove+0x10>
 800e90a:	4284      	cmp	r4, r0
 800e90c:	4623      	mov	r3, r4
 800e90e:	d807      	bhi.n	800e920 <memmove+0x20>
 800e910:	1e43      	subs	r3, r0, #1
 800e912:	42a1      	cmp	r1, r4
 800e914:	d008      	beq.n	800e928 <memmove+0x28>
 800e916:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e91a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e91e:	e7f8      	b.n	800e912 <memmove+0x12>
 800e920:	4402      	add	r2, r0
 800e922:	4601      	mov	r1, r0
 800e924:	428a      	cmp	r2, r1
 800e926:	d100      	bne.n	800e92a <memmove+0x2a>
 800e928:	bd10      	pop	{r4, pc}
 800e92a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e92e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e932:	e7f7      	b.n	800e924 <memmove+0x24>

0800e934 <memset>:
 800e934:	4402      	add	r2, r0
 800e936:	4603      	mov	r3, r0
 800e938:	4293      	cmp	r3, r2
 800e93a:	d100      	bne.n	800e93e <memset+0xa>
 800e93c:	4770      	bx	lr
 800e93e:	f803 1b01 	strb.w	r1, [r3], #1
 800e942:	e7f9      	b.n	800e938 <memset+0x4>

0800e944 <_localeconv_r>:
 800e944:	4800      	ldr	r0, [pc, #0]	; (800e948 <_localeconv_r+0x4>)
 800e946:	4770      	bx	lr
 800e948:	200002d8 	.word	0x200002d8

0800e94c <_close_r>:
 800e94c:	b538      	push	{r3, r4, r5, lr}
 800e94e:	4d06      	ldr	r5, [pc, #24]	; (800e968 <_close_r+0x1c>)
 800e950:	2300      	movs	r3, #0
 800e952:	4604      	mov	r4, r0
 800e954:	4608      	mov	r0, r1
 800e956:	602b      	str	r3, [r5, #0]
 800e958:	f7f3 fba1 	bl	800209e <_close>
 800e95c:	1c43      	adds	r3, r0, #1
 800e95e:	d102      	bne.n	800e966 <_close_r+0x1a>
 800e960:	682b      	ldr	r3, [r5, #0]
 800e962:	b103      	cbz	r3, 800e966 <_close_r+0x1a>
 800e964:	6023      	str	r3, [r4, #0]
 800e966:	bd38      	pop	{r3, r4, r5, pc}
 800e968:	20000638 	.word	0x20000638

0800e96c <_lseek_r>:
 800e96c:	b538      	push	{r3, r4, r5, lr}
 800e96e:	4d07      	ldr	r5, [pc, #28]	; (800e98c <_lseek_r+0x20>)
 800e970:	4604      	mov	r4, r0
 800e972:	4608      	mov	r0, r1
 800e974:	4611      	mov	r1, r2
 800e976:	2200      	movs	r2, #0
 800e978:	602a      	str	r2, [r5, #0]
 800e97a:	461a      	mov	r2, r3
 800e97c:	f7f3 fbb6 	bl	80020ec <_lseek>
 800e980:	1c43      	adds	r3, r0, #1
 800e982:	d102      	bne.n	800e98a <_lseek_r+0x1e>
 800e984:	682b      	ldr	r3, [r5, #0]
 800e986:	b103      	cbz	r3, 800e98a <_lseek_r+0x1e>
 800e988:	6023      	str	r3, [r4, #0]
 800e98a:	bd38      	pop	{r3, r4, r5, pc}
 800e98c:	20000638 	.word	0x20000638

0800e990 <_read_r>:
 800e990:	b538      	push	{r3, r4, r5, lr}
 800e992:	4d07      	ldr	r5, [pc, #28]	; (800e9b0 <_read_r+0x20>)
 800e994:	4604      	mov	r4, r0
 800e996:	4608      	mov	r0, r1
 800e998:	4611      	mov	r1, r2
 800e99a:	2200      	movs	r2, #0
 800e99c:	602a      	str	r2, [r5, #0]
 800e99e:	461a      	mov	r2, r3
 800e9a0:	f7f3 fb60 	bl	8002064 <_read>
 800e9a4:	1c43      	adds	r3, r0, #1
 800e9a6:	d102      	bne.n	800e9ae <_read_r+0x1e>
 800e9a8:	682b      	ldr	r3, [r5, #0]
 800e9aa:	b103      	cbz	r3, 800e9ae <_read_r+0x1e>
 800e9ac:	6023      	str	r3, [r4, #0]
 800e9ae:	bd38      	pop	{r3, r4, r5, pc}
 800e9b0:	20000638 	.word	0x20000638

0800e9b4 <_sbrk_r>:
 800e9b4:	b538      	push	{r3, r4, r5, lr}
 800e9b6:	4d06      	ldr	r5, [pc, #24]	; (800e9d0 <_sbrk_r+0x1c>)
 800e9b8:	2300      	movs	r3, #0
 800e9ba:	4604      	mov	r4, r0
 800e9bc:	4608      	mov	r0, r1
 800e9be:	602b      	str	r3, [r5, #0]
 800e9c0:	f7f3 fba2 	bl	8002108 <_sbrk>
 800e9c4:	1c43      	adds	r3, r0, #1
 800e9c6:	d102      	bne.n	800e9ce <_sbrk_r+0x1a>
 800e9c8:	682b      	ldr	r3, [r5, #0]
 800e9ca:	b103      	cbz	r3, 800e9ce <_sbrk_r+0x1a>
 800e9cc:	6023      	str	r3, [r4, #0]
 800e9ce:	bd38      	pop	{r3, r4, r5, pc}
 800e9d0:	20000638 	.word	0x20000638

0800e9d4 <_write_r>:
 800e9d4:	b538      	push	{r3, r4, r5, lr}
 800e9d6:	4d07      	ldr	r5, [pc, #28]	; (800e9f4 <_write_r+0x20>)
 800e9d8:	4604      	mov	r4, r0
 800e9da:	4608      	mov	r0, r1
 800e9dc:	4611      	mov	r1, r2
 800e9de:	2200      	movs	r2, #0
 800e9e0:	602a      	str	r2, [r5, #0]
 800e9e2:	461a      	mov	r2, r3
 800e9e4:	f7f2 fd5c 	bl	80014a0 <_write>
 800e9e8:	1c43      	adds	r3, r0, #1
 800e9ea:	d102      	bne.n	800e9f2 <_write_r+0x1e>
 800e9ec:	682b      	ldr	r3, [r5, #0]
 800e9ee:	b103      	cbz	r3, 800e9f2 <_write_r+0x1e>
 800e9f0:	6023      	str	r3, [r4, #0]
 800e9f2:	bd38      	pop	{r3, r4, r5, pc}
 800e9f4:	20000638 	.word	0x20000638

0800e9f8 <__errno>:
 800e9f8:	4b01      	ldr	r3, [pc, #4]	; (800ea00 <__errno+0x8>)
 800e9fa:	6818      	ldr	r0, [r3, #0]
 800e9fc:	4770      	bx	lr
 800e9fe:	bf00      	nop
 800ea00:	200001e4 	.word	0x200001e4

0800ea04 <__libc_init_array>:
 800ea04:	b570      	push	{r4, r5, r6, lr}
 800ea06:	4d0d      	ldr	r5, [pc, #52]	; (800ea3c <__libc_init_array+0x38>)
 800ea08:	4c0d      	ldr	r4, [pc, #52]	; (800ea40 <__libc_init_array+0x3c>)
 800ea0a:	1b64      	subs	r4, r4, r5
 800ea0c:	10a4      	asrs	r4, r4, #2
 800ea0e:	2600      	movs	r6, #0
 800ea10:	42a6      	cmp	r6, r4
 800ea12:	d109      	bne.n	800ea28 <__libc_init_array+0x24>
 800ea14:	4d0b      	ldr	r5, [pc, #44]	; (800ea44 <__libc_init_array+0x40>)
 800ea16:	4c0c      	ldr	r4, [pc, #48]	; (800ea48 <__libc_init_array+0x44>)
 800ea18:	f004 fa2a 	bl	8012e70 <_init>
 800ea1c:	1b64      	subs	r4, r4, r5
 800ea1e:	10a4      	asrs	r4, r4, #2
 800ea20:	2600      	movs	r6, #0
 800ea22:	42a6      	cmp	r6, r4
 800ea24:	d105      	bne.n	800ea32 <__libc_init_array+0x2e>
 800ea26:	bd70      	pop	{r4, r5, r6, pc}
 800ea28:	f855 3b04 	ldr.w	r3, [r5], #4
 800ea2c:	4798      	blx	r3
 800ea2e:	3601      	adds	r6, #1
 800ea30:	e7ee      	b.n	800ea10 <__libc_init_array+0xc>
 800ea32:	f855 3b04 	ldr.w	r3, [r5], #4
 800ea36:	4798      	blx	r3
 800ea38:	3601      	adds	r6, #1
 800ea3a:	e7f2      	b.n	800ea22 <__libc_init_array+0x1e>
 800ea3c:	08018b68 	.word	0x08018b68
 800ea40:	08018b68 	.word	0x08018b68
 800ea44:	08018b68 	.word	0x08018b68
 800ea48:	08018b6c 	.word	0x08018b6c

0800ea4c <__retarget_lock_acquire_recursive>:
 800ea4c:	4770      	bx	lr

0800ea4e <__retarget_lock_release_recursive>:
 800ea4e:	4770      	bx	lr

0800ea50 <memcpy>:
 800ea50:	440a      	add	r2, r1
 800ea52:	4291      	cmp	r1, r2
 800ea54:	f100 33ff 	add.w	r3, r0, #4294967295
 800ea58:	d100      	bne.n	800ea5c <memcpy+0xc>
 800ea5a:	4770      	bx	lr
 800ea5c:	b510      	push	{r4, lr}
 800ea5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ea62:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ea66:	4291      	cmp	r1, r2
 800ea68:	d1f9      	bne.n	800ea5e <memcpy+0xe>
 800ea6a:	bd10      	pop	{r4, pc}

0800ea6c <quorem>:
 800ea6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea70:	6903      	ldr	r3, [r0, #16]
 800ea72:	690c      	ldr	r4, [r1, #16]
 800ea74:	42a3      	cmp	r3, r4
 800ea76:	4607      	mov	r7, r0
 800ea78:	db7e      	blt.n	800eb78 <quorem+0x10c>
 800ea7a:	3c01      	subs	r4, #1
 800ea7c:	f101 0814 	add.w	r8, r1, #20
 800ea80:	f100 0514 	add.w	r5, r0, #20
 800ea84:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ea88:	9301      	str	r3, [sp, #4]
 800ea8a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ea8e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ea92:	3301      	adds	r3, #1
 800ea94:	429a      	cmp	r2, r3
 800ea96:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ea9a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ea9e:	fbb2 f6f3 	udiv	r6, r2, r3
 800eaa2:	d331      	bcc.n	800eb08 <quorem+0x9c>
 800eaa4:	f04f 0e00 	mov.w	lr, #0
 800eaa8:	4640      	mov	r0, r8
 800eaaa:	46ac      	mov	ip, r5
 800eaac:	46f2      	mov	sl, lr
 800eaae:	f850 2b04 	ldr.w	r2, [r0], #4
 800eab2:	b293      	uxth	r3, r2
 800eab4:	fb06 e303 	mla	r3, r6, r3, lr
 800eab8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800eabc:	0c1a      	lsrs	r2, r3, #16
 800eabe:	b29b      	uxth	r3, r3
 800eac0:	ebaa 0303 	sub.w	r3, sl, r3
 800eac4:	f8dc a000 	ldr.w	sl, [ip]
 800eac8:	fa13 f38a 	uxtah	r3, r3, sl
 800eacc:	fb06 220e 	mla	r2, r6, lr, r2
 800ead0:	9300      	str	r3, [sp, #0]
 800ead2:	9b00      	ldr	r3, [sp, #0]
 800ead4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ead8:	b292      	uxth	r2, r2
 800eada:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800eade:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800eae2:	f8bd 3000 	ldrh.w	r3, [sp]
 800eae6:	4581      	cmp	r9, r0
 800eae8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800eaec:	f84c 3b04 	str.w	r3, [ip], #4
 800eaf0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800eaf4:	d2db      	bcs.n	800eaae <quorem+0x42>
 800eaf6:	f855 300b 	ldr.w	r3, [r5, fp]
 800eafa:	b92b      	cbnz	r3, 800eb08 <quorem+0x9c>
 800eafc:	9b01      	ldr	r3, [sp, #4]
 800eafe:	3b04      	subs	r3, #4
 800eb00:	429d      	cmp	r5, r3
 800eb02:	461a      	mov	r2, r3
 800eb04:	d32c      	bcc.n	800eb60 <quorem+0xf4>
 800eb06:	613c      	str	r4, [r7, #16]
 800eb08:	4638      	mov	r0, r7
 800eb0a:	f001 f8f3 	bl	800fcf4 <__mcmp>
 800eb0e:	2800      	cmp	r0, #0
 800eb10:	db22      	blt.n	800eb58 <quorem+0xec>
 800eb12:	3601      	adds	r6, #1
 800eb14:	4629      	mov	r1, r5
 800eb16:	2000      	movs	r0, #0
 800eb18:	f858 2b04 	ldr.w	r2, [r8], #4
 800eb1c:	f8d1 c000 	ldr.w	ip, [r1]
 800eb20:	b293      	uxth	r3, r2
 800eb22:	1ac3      	subs	r3, r0, r3
 800eb24:	0c12      	lsrs	r2, r2, #16
 800eb26:	fa13 f38c 	uxtah	r3, r3, ip
 800eb2a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800eb2e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800eb32:	b29b      	uxth	r3, r3
 800eb34:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800eb38:	45c1      	cmp	r9, r8
 800eb3a:	f841 3b04 	str.w	r3, [r1], #4
 800eb3e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800eb42:	d2e9      	bcs.n	800eb18 <quorem+0xac>
 800eb44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800eb48:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800eb4c:	b922      	cbnz	r2, 800eb58 <quorem+0xec>
 800eb4e:	3b04      	subs	r3, #4
 800eb50:	429d      	cmp	r5, r3
 800eb52:	461a      	mov	r2, r3
 800eb54:	d30a      	bcc.n	800eb6c <quorem+0x100>
 800eb56:	613c      	str	r4, [r7, #16]
 800eb58:	4630      	mov	r0, r6
 800eb5a:	b003      	add	sp, #12
 800eb5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb60:	6812      	ldr	r2, [r2, #0]
 800eb62:	3b04      	subs	r3, #4
 800eb64:	2a00      	cmp	r2, #0
 800eb66:	d1ce      	bne.n	800eb06 <quorem+0x9a>
 800eb68:	3c01      	subs	r4, #1
 800eb6a:	e7c9      	b.n	800eb00 <quorem+0x94>
 800eb6c:	6812      	ldr	r2, [r2, #0]
 800eb6e:	3b04      	subs	r3, #4
 800eb70:	2a00      	cmp	r2, #0
 800eb72:	d1f0      	bne.n	800eb56 <quorem+0xea>
 800eb74:	3c01      	subs	r4, #1
 800eb76:	e7eb      	b.n	800eb50 <quorem+0xe4>
 800eb78:	2000      	movs	r0, #0
 800eb7a:	e7ee      	b.n	800eb5a <quorem+0xee>
 800eb7c:	0000      	movs	r0, r0
	...

0800eb80 <_dtoa_r>:
 800eb80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb84:	ed2d 8b04 	vpush	{d8-d9}
 800eb88:	69c5      	ldr	r5, [r0, #28]
 800eb8a:	b093      	sub	sp, #76	; 0x4c
 800eb8c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800eb90:	ec57 6b10 	vmov	r6, r7, d0
 800eb94:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800eb98:	9107      	str	r1, [sp, #28]
 800eb9a:	4604      	mov	r4, r0
 800eb9c:	920a      	str	r2, [sp, #40]	; 0x28
 800eb9e:	930d      	str	r3, [sp, #52]	; 0x34
 800eba0:	b975      	cbnz	r5, 800ebc0 <_dtoa_r+0x40>
 800eba2:	2010      	movs	r0, #16
 800eba4:	f7fe fe90 	bl	800d8c8 <malloc>
 800eba8:	4602      	mov	r2, r0
 800ebaa:	61e0      	str	r0, [r4, #28]
 800ebac:	b920      	cbnz	r0, 800ebb8 <_dtoa_r+0x38>
 800ebae:	4bae      	ldr	r3, [pc, #696]	; (800ee68 <_dtoa_r+0x2e8>)
 800ebb0:	21ef      	movs	r1, #239	; 0xef
 800ebb2:	48ae      	ldr	r0, [pc, #696]	; (800ee6c <_dtoa_r+0x2ec>)
 800ebb4:	f001 fcf2 	bl	801059c <__assert_func>
 800ebb8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ebbc:	6005      	str	r5, [r0, #0]
 800ebbe:	60c5      	str	r5, [r0, #12]
 800ebc0:	69e3      	ldr	r3, [r4, #28]
 800ebc2:	6819      	ldr	r1, [r3, #0]
 800ebc4:	b151      	cbz	r1, 800ebdc <_dtoa_r+0x5c>
 800ebc6:	685a      	ldr	r2, [r3, #4]
 800ebc8:	604a      	str	r2, [r1, #4]
 800ebca:	2301      	movs	r3, #1
 800ebcc:	4093      	lsls	r3, r2
 800ebce:	608b      	str	r3, [r1, #8]
 800ebd0:	4620      	mov	r0, r4
 800ebd2:	f000 fe53 	bl	800f87c <_Bfree>
 800ebd6:	69e3      	ldr	r3, [r4, #28]
 800ebd8:	2200      	movs	r2, #0
 800ebda:	601a      	str	r2, [r3, #0]
 800ebdc:	1e3b      	subs	r3, r7, #0
 800ebde:	bfbb      	ittet	lt
 800ebe0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ebe4:	9303      	strlt	r3, [sp, #12]
 800ebe6:	2300      	movge	r3, #0
 800ebe8:	2201      	movlt	r2, #1
 800ebea:	bfac      	ite	ge
 800ebec:	f8c8 3000 	strge.w	r3, [r8]
 800ebf0:	f8c8 2000 	strlt.w	r2, [r8]
 800ebf4:	4b9e      	ldr	r3, [pc, #632]	; (800ee70 <_dtoa_r+0x2f0>)
 800ebf6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800ebfa:	ea33 0308 	bics.w	r3, r3, r8
 800ebfe:	d11b      	bne.n	800ec38 <_dtoa_r+0xb8>
 800ec00:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ec02:	f242 730f 	movw	r3, #9999	; 0x270f
 800ec06:	6013      	str	r3, [r2, #0]
 800ec08:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800ec0c:	4333      	orrs	r3, r6
 800ec0e:	f000 8593 	beq.w	800f738 <_dtoa_r+0xbb8>
 800ec12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ec14:	b963      	cbnz	r3, 800ec30 <_dtoa_r+0xb0>
 800ec16:	4b97      	ldr	r3, [pc, #604]	; (800ee74 <_dtoa_r+0x2f4>)
 800ec18:	e027      	b.n	800ec6a <_dtoa_r+0xea>
 800ec1a:	4b97      	ldr	r3, [pc, #604]	; (800ee78 <_dtoa_r+0x2f8>)
 800ec1c:	9300      	str	r3, [sp, #0]
 800ec1e:	3308      	adds	r3, #8
 800ec20:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ec22:	6013      	str	r3, [r2, #0]
 800ec24:	9800      	ldr	r0, [sp, #0]
 800ec26:	b013      	add	sp, #76	; 0x4c
 800ec28:	ecbd 8b04 	vpop	{d8-d9}
 800ec2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec30:	4b90      	ldr	r3, [pc, #576]	; (800ee74 <_dtoa_r+0x2f4>)
 800ec32:	9300      	str	r3, [sp, #0]
 800ec34:	3303      	adds	r3, #3
 800ec36:	e7f3      	b.n	800ec20 <_dtoa_r+0xa0>
 800ec38:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ec3c:	2200      	movs	r2, #0
 800ec3e:	ec51 0b17 	vmov	r0, r1, d7
 800ec42:	eeb0 8a47 	vmov.f32	s16, s14
 800ec46:	eef0 8a67 	vmov.f32	s17, s15
 800ec4a:	2300      	movs	r3, #0
 800ec4c:	f7f1 ffb4 	bl	8000bb8 <__aeabi_dcmpeq>
 800ec50:	4681      	mov	r9, r0
 800ec52:	b160      	cbz	r0, 800ec6e <_dtoa_r+0xee>
 800ec54:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ec56:	2301      	movs	r3, #1
 800ec58:	6013      	str	r3, [r2, #0]
 800ec5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	f000 8568 	beq.w	800f732 <_dtoa_r+0xbb2>
 800ec62:	4b86      	ldr	r3, [pc, #536]	; (800ee7c <_dtoa_r+0x2fc>)
 800ec64:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ec66:	6013      	str	r3, [r2, #0]
 800ec68:	3b01      	subs	r3, #1
 800ec6a:	9300      	str	r3, [sp, #0]
 800ec6c:	e7da      	b.n	800ec24 <_dtoa_r+0xa4>
 800ec6e:	aa10      	add	r2, sp, #64	; 0x40
 800ec70:	a911      	add	r1, sp, #68	; 0x44
 800ec72:	4620      	mov	r0, r4
 800ec74:	eeb0 0a48 	vmov.f32	s0, s16
 800ec78:	eef0 0a68 	vmov.f32	s1, s17
 800ec7c:	f001 f8e0 	bl	800fe40 <__d2b>
 800ec80:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800ec84:	4682      	mov	sl, r0
 800ec86:	2d00      	cmp	r5, #0
 800ec88:	d07f      	beq.n	800ed8a <_dtoa_r+0x20a>
 800ec8a:	ee18 3a90 	vmov	r3, s17
 800ec8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ec92:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800ec96:	ec51 0b18 	vmov	r0, r1, d8
 800ec9a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ec9e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800eca2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800eca6:	4619      	mov	r1, r3
 800eca8:	2200      	movs	r2, #0
 800ecaa:	4b75      	ldr	r3, [pc, #468]	; (800ee80 <_dtoa_r+0x300>)
 800ecac:	f7f1 fb64 	bl	8000378 <__aeabi_dsub>
 800ecb0:	a367      	add	r3, pc, #412	; (adr r3, 800ee50 <_dtoa_r+0x2d0>)
 800ecb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecb6:	f7f1 fd17 	bl	80006e8 <__aeabi_dmul>
 800ecba:	a367      	add	r3, pc, #412	; (adr r3, 800ee58 <_dtoa_r+0x2d8>)
 800ecbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecc0:	f7f1 fb5c 	bl	800037c <__adddf3>
 800ecc4:	4606      	mov	r6, r0
 800ecc6:	4628      	mov	r0, r5
 800ecc8:	460f      	mov	r7, r1
 800ecca:	f7f1 fca3 	bl	8000614 <__aeabi_i2d>
 800ecce:	a364      	add	r3, pc, #400	; (adr r3, 800ee60 <_dtoa_r+0x2e0>)
 800ecd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecd4:	f7f1 fd08 	bl	80006e8 <__aeabi_dmul>
 800ecd8:	4602      	mov	r2, r0
 800ecda:	460b      	mov	r3, r1
 800ecdc:	4630      	mov	r0, r6
 800ecde:	4639      	mov	r1, r7
 800ece0:	f7f1 fb4c 	bl	800037c <__adddf3>
 800ece4:	4606      	mov	r6, r0
 800ece6:	460f      	mov	r7, r1
 800ece8:	f7f1 ffae 	bl	8000c48 <__aeabi_d2iz>
 800ecec:	2200      	movs	r2, #0
 800ecee:	4683      	mov	fp, r0
 800ecf0:	2300      	movs	r3, #0
 800ecf2:	4630      	mov	r0, r6
 800ecf4:	4639      	mov	r1, r7
 800ecf6:	f7f1 ff69 	bl	8000bcc <__aeabi_dcmplt>
 800ecfa:	b148      	cbz	r0, 800ed10 <_dtoa_r+0x190>
 800ecfc:	4658      	mov	r0, fp
 800ecfe:	f7f1 fc89 	bl	8000614 <__aeabi_i2d>
 800ed02:	4632      	mov	r2, r6
 800ed04:	463b      	mov	r3, r7
 800ed06:	f7f1 ff57 	bl	8000bb8 <__aeabi_dcmpeq>
 800ed0a:	b908      	cbnz	r0, 800ed10 <_dtoa_r+0x190>
 800ed0c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ed10:	f1bb 0f16 	cmp.w	fp, #22
 800ed14:	d857      	bhi.n	800edc6 <_dtoa_r+0x246>
 800ed16:	4b5b      	ldr	r3, [pc, #364]	; (800ee84 <_dtoa_r+0x304>)
 800ed18:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ed1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed20:	ec51 0b18 	vmov	r0, r1, d8
 800ed24:	f7f1 ff52 	bl	8000bcc <__aeabi_dcmplt>
 800ed28:	2800      	cmp	r0, #0
 800ed2a:	d04e      	beq.n	800edca <_dtoa_r+0x24a>
 800ed2c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ed30:	2300      	movs	r3, #0
 800ed32:	930c      	str	r3, [sp, #48]	; 0x30
 800ed34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ed36:	1b5b      	subs	r3, r3, r5
 800ed38:	1e5a      	subs	r2, r3, #1
 800ed3a:	bf45      	ittet	mi
 800ed3c:	f1c3 0301 	rsbmi	r3, r3, #1
 800ed40:	9305      	strmi	r3, [sp, #20]
 800ed42:	2300      	movpl	r3, #0
 800ed44:	2300      	movmi	r3, #0
 800ed46:	9206      	str	r2, [sp, #24]
 800ed48:	bf54      	ite	pl
 800ed4a:	9305      	strpl	r3, [sp, #20]
 800ed4c:	9306      	strmi	r3, [sp, #24]
 800ed4e:	f1bb 0f00 	cmp.w	fp, #0
 800ed52:	db3c      	blt.n	800edce <_dtoa_r+0x24e>
 800ed54:	9b06      	ldr	r3, [sp, #24]
 800ed56:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800ed5a:	445b      	add	r3, fp
 800ed5c:	9306      	str	r3, [sp, #24]
 800ed5e:	2300      	movs	r3, #0
 800ed60:	9308      	str	r3, [sp, #32]
 800ed62:	9b07      	ldr	r3, [sp, #28]
 800ed64:	2b09      	cmp	r3, #9
 800ed66:	d868      	bhi.n	800ee3a <_dtoa_r+0x2ba>
 800ed68:	2b05      	cmp	r3, #5
 800ed6a:	bfc4      	itt	gt
 800ed6c:	3b04      	subgt	r3, #4
 800ed6e:	9307      	strgt	r3, [sp, #28]
 800ed70:	9b07      	ldr	r3, [sp, #28]
 800ed72:	f1a3 0302 	sub.w	r3, r3, #2
 800ed76:	bfcc      	ite	gt
 800ed78:	2500      	movgt	r5, #0
 800ed7a:	2501      	movle	r5, #1
 800ed7c:	2b03      	cmp	r3, #3
 800ed7e:	f200 8085 	bhi.w	800ee8c <_dtoa_r+0x30c>
 800ed82:	e8df f003 	tbb	[pc, r3]
 800ed86:	3b2e      	.short	0x3b2e
 800ed88:	5839      	.short	0x5839
 800ed8a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ed8e:	441d      	add	r5, r3
 800ed90:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ed94:	2b20      	cmp	r3, #32
 800ed96:	bfc1      	itttt	gt
 800ed98:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ed9c:	fa08 f803 	lslgt.w	r8, r8, r3
 800eda0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800eda4:	fa26 f303 	lsrgt.w	r3, r6, r3
 800eda8:	bfd6      	itet	le
 800edaa:	f1c3 0320 	rsble	r3, r3, #32
 800edae:	ea48 0003 	orrgt.w	r0, r8, r3
 800edb2:	fa06 f003 	lslle.w	r0, r6, r3
 800edb6:	f7f1 fc1d 	bl	80005f4 <__aeabi_ui2d>
 800edba:	2201      	movs	r2, #1
 800edbc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800edc0:	3d01      	subs	r5, #1
 800edc2:	920e      	str	r2, [sp, #56]	; 0x38
 800edc4:	e76f      	b.n	800eca6 <_dtoa_r+0x126>
 800edc6:	2301      	movs	r3, #1
 800edc8:	e7b3      	b.n	800ed32 <_dtoa_r+0x1b2>
 800edca:	900c      	str	r0, [sp, #48]	; 0x30
 800edcc:	e7b2      	b.n	800ed34 <_dtoa_r+0x1b4>
 800edce:	9b05      	ldr	r3, [sp, #20]
 800edd0:	eba3 030b 	sub.w	r3, r3, fp
 800edd4:	9305      	str	r3, [sp, #20]
 800edd6:	f1cb 0300 	rsb	r3, fp, #0
 800edda:	9308      	str	r3, [sp, #32]
 800eddc:	2300      	movs	r3, #0
 800edde:	930b      	str	r3, [sp, #44]	; 0x2c
 800ede0:	e7bf      	b.n	800ed62 <_dtoa_r+0x1e2>
 800ede2:	2300      	movs	r3, #0
 800ede4:	9309      	str	r3, [sp, #36]	; 0x24
 800ede6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ede8:	2b00      	cmp	r3, #0
 800edea:	dc52      	bgt.n	800ee92 <_dtoa_r+0x312>
 800edec:	2301      	movs	r3, #1
 800edee:	9301      	str	r3, [sp, #4]
 800edf0:	9304      	str	r3, [sp, #16]
 800edf2:	461a      	mov	r2, r3
 800edf4:	920a      	str	r2, [sp, #40]	; 0x28
 800edf6:	e00b      	b.n	800ee10 <_dtoa_r+0x290>
 800edf8:	2301      	movs	r3, #1
 800edfa:	e7f3      	b.n	800ede4 <_dtoa_r+0x264>
 800edfc:	2300      	movs	r3, #0
 800edfe:	9309      	str	r3, [sp, #36]	; 0x24
 800ee00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ee02:	445b      	add	r3, fp
 800ee04:	9301      	str	r3, [sp, #4]
 800ee06:	3301      	adds	r3, #1
 800ee08:	2b01      	cmp	r3, #1
 800ee0a:	9304      	str	r3, [sp, #16]
 800ee0c:	bfb8      	it	lt
 800ee0e:	2301      	movlt	r3, #1
 800ee10:	69e0      	ldr	r0, [r4, #28]
 800ee12:	2100      	movs	r1, #0
 800ee14:	2204      	movs	r2, #4
 800ee16:	f102 0614 	add.w	r6, r2, #20
 800ee1a:	429e      	cmp	r6, r3
 800ee1c:	d93d      	bls.n	800ee9a <_dtoa_r+0x31a>
 800ee1e:	6041      	str	r1, [r0, #4]
 800ee20:	4620      	mov	r0, r4
 800ee22:	f000 fceb 	bl	800f7fc <_Balloc>
 800ee26:	9000      	str	r0, [sp, #0]
 800ee28:	2800      	cmp	r0, #0
 800ee2a:	d139      	bne.n	800eea0 <_dtoa_r+0x320>
 800ee2c:	4b16      	ldr	r3, [pc, #88]	; (800ee88 <_dtoa_r+0x308>)
 800ee2e:	4602      	mov	r2, r0
 800ee30:	f240 11af 	movw	r1, #431	; 0x1af
 800ee34:	e6bd      	b.n	800ebb2 <_dtoa_r+0x32>
 800ee36:	2301      	movs	r3, #1
 800ee38:	e7e1      	b.n	800edfe <_dtoa_r+0x27e>
 800ee3a:	2501      	movs	r5, #1
 800ee3c:	2300      	movs	r3, #0
 800ee3e:	9307      	str	r3, [sp, #28]
 800ee40:	9509      	str	r5, [sp, #36]	; 0x24
 800ee42:	f04f 33ff 	mov.w	r3, #4294967295
 800ee46:	9301      	str	r3, [sp, #4]
 800ee48:	9304      	str	r3, [sp, #16]
 800ee4a:	2200      	movs	r2, #0
 800ee4c:	2312      	movs	r3, #18
 800ee4e:	e7d1      	b.n	800edf4 <_dtoa_r+0x274>
 800ee50:	636f4361 	.word	0x636f4361
 800ee54:	3fd287a7 	.word	0x3fd287a7
 800ee58:	8b60c8b3 	.word	0x8b60c8b3
 800ee5c:	3fc68a28 	.word	0x3fc68a28
 800ee60:	509f79fb 	.word	0x509f79fb
 800ee64:	3fd34413 	.word	0x3fd34413
 800ee68:	08018625 	.word	0x08018625
 800ee6c:	0801863c 	.word	0x0801863c
 800ee70:	7ff00000 	.word	0x7ff00000
 800ee74:	08018621 	.word	0x08018621
 800ee78:	08018618 	.word	0x08018618
 800ee7c:	080185f5 	.word	0x080185f5
 800ee80:	3ff80000 	.word	0x3ff80000
 800ee84:	08018728 	.word	0x08018728
 800ee88:	08018694 	.word	0x08018694
 800ee8c:	2301      	movs	r3, #1
 800ee8e:	9309      	str	r3, [sp, #36]	; 0x24
 800ee90:	e7d7      	b.n	800ee42 <_dtoa_r+0x2c2>
 800ee92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ee94:	9301      	str	r3, [sp, #4]
 800ee96:	9304      	str	r3, [sp, #16]
 800ee98:	e7ba      	b.n	800ee10 <_dtoa_r+0x290>
 800ee9a:	3101      	adds	r1, #1
 800ee9c:	0052      	lsls	r2, r2, #1
 800ee9e:	e7ba      	b.n	800ee16 <_dtoa_r+0x296>
 800eea0:	69e3      	ldr	r3, [r4, #28]
 800eea2:	9a00      	ldr	r2, [sp, #0]
 800eea4:	601a      	str	r2, [r3, #0]
 800eea6:	9b04      	ldr	r3, [sp, #16]
 800eea8:	2b0e      	cmp	r3, #14
 800eeaa:	f200 80a8 	bhi.w	800effe <_dtoa_r+0x47e>
 800eeae:	2d00      	cmp	r5, #0
 800eeb0:	f000 80a5 	beq.w	800effe <_dtoa_r+0x47e>
 800eeb4:	f1bb 0f00 	cmp.w	fp, #0
 800eeb8:	dd38      	ble.n	800ef2c <_dtoa_r+0x3ac>
 800eeba:	4bc0      	ldr	r3, [pc, #768]	; (800f1bc <_dtoa_r+0x63c>)
 800eebc:	f00b 020f 	and.w	r2, fp, #15
 800eec0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800eec4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800eec8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800eecc:	ea4f 182b 	mov.w	r8, fp, asr #4
 800eed0:	d019      	beq.n	800ef06 <_dtoa_r+0x386>
 800eed2:	4bbb      	ldr	r3, [pc, #748]	; (800f1c0 <_dtoa_r+0x640>)
 800eed4:	ec51 0b18 	vmov	r0, r1, d8
 800eed8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800eedc:	f7f1 fd2e 	bl	800093c <__aeabi_ddiv>
 800eee0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eee4:	f008 080f 	and.w	r8, r8, #15
 800eee8:	2503      	movs	r5, #3
 800eeea:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800f1c0 <_dtoa_r+0x640>
 800eeee:	f1b8 0f00 	cmp.w	r8, #0
 800eef2:	d10a      	bne.n	800ef0a <_dtoa_r+0x38a>
 800eef4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eef8:	4632      	mov	r2, r6
 800eefa:	463b      	mov	r3, r7
 800eefc:	f7f1 fd1e 	bl	800093c <__aeabi_ddiv>
 800ef00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ef04:	e02b      	b.n	800ef5e <_dtoa_r+0x3de>
 800ef06:	2502      	movs	r5, #2
 800ef08:	e7ef      	b.n	800eeea <_dtoa_r+0x36a>
 800ef0a:	f018 0f01 	tst.w	r8, #1
 800ef0e:	d008      	beq.n	800ef22 <_dtoa_r+0x3a2>
 800ef10:	4630      	mov	r0, r6
 800ef12:	4639      	mov	r1, r7
 800ef14:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ef18:	f7f1 fbe6 	bl	80006e8 <__aeabi_dmul>
 800ef1c:	3501      	adds	r5, #1
 800ef1e:	4606      	mov	r6, r0
 800ef20:	460f      	mov	r7, r1
 800ef22:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ef26:	f109 0908 	add.w	r9, r9, #8
 800ef2a:	e7e0      	b.n	800eeee <_dtoa_r+0x36e>
 800ef2c:	f000 809f 	beq.w	800f06e <_dtoa_r+0x4ee>
 800ef30:	f1cb 0600 	rsb	r6, fp, #0
 800ef34:	4ba1      	ldr	r3, [pc, #644]	; (800f1bc <_dtoa_r+0x63c>)
 800ef36:	4fa2      	ldr	r7, [pc, #648]	; (800f1c0 <_dtoa_r+0x640>)
 800ef38:	f006 020f 	and.w	r2, r6, #15
 800ef3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ef40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef44:	ec51 0b18 	vmov	r0, r1, d8
 800ef48:	f7f1 fbce 	bl	80006e8 <__aeabi_dmul>
 800ef4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ef50:	1136      	asrs	r6, r6, #4
 800ef52:	2300      	movs	r3, #0
 800ef54:	2502      	movs	r5, #2
 800ef56:	2e00      	cmp	r6, #0
 800ef58:	d17e      	bne.n	800f058 <_dtoa_r+0x4d8>
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d1d0      	bne.n	800ef00 <_dtoa_r+0x380>
 800ef5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ef60:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	f000 8084 	beq.w	800f072 <_dtoa_r+0x4f2>
 800ef6a:	4b96      	ldr	r3, [pc, #600]	; (800f1c4 <_dtoa_r+0x644>)
 800ef6c:	2200      	movs	r2, #0
 800ef6e:	4640      	mov	r0, r8
 800ef70:	4649      	mov	r1, r9
 800ef72:	f7f1 fe2b 	bl	8000bcc <__aeabi_dcmplt>
 800ef76:	2800      	cmp	r0, #0
 800ef78:	d07b      	beq.n	800f072 <_dtoa_r+0x4f2>
 800ef7a:	9b04      	ldr	r3, [sp, #16]
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d078      	beq.n	800f072 <_dtoa_r+0x4f2>
 800ef80:	9b01      	ldr	r3, [sp, #4]
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	dd39      	ble.n	800effa <_dtoa_r+0x47a>
 800ef86:	4b90      	ldr	r3, [pc, #576]	; (800f1c8 <_dtoa_r+0x648>)
 800ef88:	2200      	movs	r2, #0
 800ef8a:	4640      	mov	r0, r8
 800ef8c:	4649      	mov	r1, r9
 800ef8e:	f7f1 fbab 	bl	80006e8 <__aeabi_dmul>
 800ef92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ef96:	9e01      	ldr	r6, [sp, #4]
 800ef98:	f10b 37ff 	add.w	r7, fp, #4294967295
 800ef9c:	3501      	adds	r5, #1
 800ef9e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800efa2:	4628      	mov	r0, r5
 800efa4:	f7f1 fb36 	bl	8000614 <__aeabi_i2d>
 800efa8:	4642      	mov	r2, r8
 800efaa:	464b      	mov	r3, r9
 800efac:	f7f1 fb9c 	bl	80006e8 <__aeabi_dmul>
 800efb0:	4b86      	ldr	r3, [pc, #536]	; (800f1cc <_dtoa_r+0x64c>)
 800efb2:	2200      	movs	r2, #0
 800efb4:	f7f1 f9e2 	bl	800037c <__adddf3>
 800efb8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800efbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800efc0:	9303      	str	r3, [sp, #12]
 800efc2:	2e00      	cmp	r6, #0
 800efc4:	d158      	bne.n	800f078 <_dtoa_r+0x4f8>
 800efc6:	4b82      	ldr	r3, [pc, #520]	; (800f1d0 <_dtoa_r+0x650>)
 800efc8:	2200      	movs	r2, #0
 800efca:	4640      	mov	r0, r8
 800efcc:	4649      	mov	r1, r9
 800efce:	f7f1 f9d3 	bl	8000378 <__aeabi_dsub>
 800efd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800efd6:	4680      	mov	r8, r0
 800efd8:	4689      	mov	r9, r1
 800efda:	f7f1 fe15 	bl	8000c08 <__aeabi_dcmpgt>
 800efde:	2800      	cmp	r0, #0
 800efe0:	f040 8296 	bne.w	800f510 <_dtoa_r+0x990>
 800efe4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800efe8:	4640      	mov	r0, r8
 800efea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800efee:	4649      	mov	r1, r9
 800eff0:	f7f1 fdec 	bl	8000bcc <__aeabi_dcmplt>
 800eff4:	2800      	cmp	r0, #0
 800eff6:	f040 8289 	bne.w	800f50c <_dtoa_r+0x98c>
 800effa:	ed8d 8b02 	vstr	d8, [sp, #8]
 800effe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f000:	2b00      	cmp	r3, #0
 800f002:	f2c0 814e 	blt.w	800f2a2 <_dtoa_r+0x722>
 800f006:	f1bb 0f0e 	cmp.w	fp, #14
 800f00a:	f300 814a 	bgt.w	800f2a2 <_dtoa_r+0x722>
 800f00e:	4b6b      	ldr	r3, [pc, #428]	; (800f1bc <_dtoa_r+0x63c>)
 800f010:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f014:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f018:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	f280 80dc 	bge.w	800f1d8 <_dtoa_r+0x658>
 800f020:	9b04      	ldr	r3, [sp, #16]
 800f022:	2b00      	cmp	r3, #0
 800f024:	f300 80d8 	bgt.w	800f1d8 <_dtoa_r+0x658>
 800f028:	f040 826f 	bne.w	800f50a <_dtoa_r+0x98a>
 800f02c:	4b68      	ldr	r3, [pc, #416]	; (800f1d0 <_dtoa_r+0x650>)
 800f02e:	2200      	movs	r2, #0
 800f030:	4640      	mov	r0, r8
 800f032:	4649      	mov	r1, r9
 800f034:	f7f1 fb58 	bl	80006e8 <__aeabi_dmul>
 800f038:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f03c:	f7f1 fdda 	bl	8000bf4 <__aeabi_dcmpge>
 800f040:	9e04      	ldr	r6, [sp, #16]
 800f042:	4637      	mov	r7, r6
 800f044:	2800      	cmp	r0, #0
 800f046:	f040 8245 	bne.w	800f4d4 <_dtoa_r+0x954>
 800f04a:	9d00      	ldr	r5, [sp, #0]
 800f04c:	2331      	movs	r3, #49	; 0x31
 800f04e:	f805 3b01 	strb.w	r3, [r5], #1
 800f052:	f10b 0b01 	add.w	fp, fp, #1
 800f056:	e241      	b.n	800f4dc <_dtoa_r+0x95c>
 800f058:	07f2      	lsls	r2, r6, #31
 800f05a:	d505      	bpl.n	800f068 <_dtoa_r+0x4e8>
 800f05c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f060:	f7f1 fb42 	bl	80006e8 <__aeabi_dmul>
 800f064:	3501      	adds	r5, #1
 800f066:	2301      	movs	r3, #1
 800f068:	1076      	asrs	r6, r6, #1
 800f06a:	3708      	adds	r7, #8
 800f06c:	e773      	b.n	800ef56 <_dtoa_r+0x3d6>
 800f06e:	2502      	movs	r5, #2
 800f070:	e775      	b.n	800ef5e <_dtoa_r+0x3de>
 800f072:	9e04      	ldr	r6, [sp, #16]
 800f074:	465f      	mov	r7, fp
 800f076:	e792      	b.n	800ef9e <_dtoa_r+0x41e>
 800f078:	9900      	ldr	r1, [sp, #0]
 800f07a:	4b50      	ldr	r3, [pc, #320]	; (800f1bc <_dtoa_r+0x63c>)
 800f07c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f080:	4431      	add	r1, r6
 800f082:	9102      	str	r1, [sp, #8]
 800f084:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f086:	eeb0 9a47 	vmov.f32	s18, s14
 800f08a:	eef0 9a67 	vmov.f32	s19, s15
 800f08e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800f092:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f096:	2900      	cmp	r1, #0
 800f098:	d044      	beq.n	800f124 <_dtoa_r+0x5a4>
 800f09a:	494e      	ldr	r1, [pc, #312]	; (800f1d4 <_dtoa_r+0x654>)
 800f09c:	2000      	movs	r0, #0
 800f09e:	f7f1 fc4d 	bl	800093c <__aeabi_ddiv>
 800f0a2:	ec53 2b19 	vmov	r2, r3, d9
 800f0a6:	f7f1 f967 	bl	8000378 <__aeabi_dsub>
 800f0aa:	9d00      	ldr	r5, [sp, #0]
 800f0ac:	ec41 0b19 	vmov	d9, r0, r1
 800f0b0:	4649      	mov	r1, r9
 800f0b2:	4640      	mov	r0, r8
 800f0b4:	f7f1 fdc8 	bl	8000c48 <__aeabi_d2iz>
 800f0b8:	4606      	mov	r6, r0
 800f0ba:	f7f1 faab 	bl	8000614 <__aeabi_i2d>
 800f0be:	4602      	mov	r2, r0
 800f0c0:	460b      	mov	r3, r1
 800f0c2:	4640      	mov	r0, r8
 800f0c4:	4649      	mov	r1, r9
 800f0c6:	f7f1 f957 	bl	8000378 <__aeabi_dsub>
 800f0ca:	3630      	adds	r6, #48	; 0x30
 800f0cc:	f805 6b01 	strb.w	r6, [r5], #1
 800f0d0:	ec53 2b19 	vmov	r2, r3, d9
 800f0d4:	4680      	mov	r8, r0
 800f0d6:	4689      	mov	r9, r1
 800f0d8:	f7f1 fd78 	bl	8000bcc <__aeabi_dcmplt>
 800f0dc:	2800      	cmp	r0, #0
 800f0de:	d164      	bne.n	800f1aa <_dtoa_r+0x62a>
 800f0e0:	4642      	mov	r2, r8
 800f0e2:	464b      	mov	r3, r9
 800f0e4:	4937      	ldr	r1, [pc, #220]	; (800f1c4 <_dtoa_r+0x644>)
 800f0e6:	2000      	movs	r0, #0
 800f0e8:	f7f1 f946 	bl	8000378 <__aeabi_dsub>
 800f0ec:	ec53 2b19 	vmov	r2, r3, d9
 800f0f0:	f7f1 fd6c 	bl	8000bcc <__aeabi_dcmplt>
 800f0f4:	2800      	cmp	r0, #0
 800f0f6:	f040 80b6 	bne.w	800f266 <_dtoa_r+0x6e6>
 800f0fa:	9b02      	ldr	r3, [sp, #8]
 800f0fc:	429d      	cmp	r5, r3
 800f0fe:	f43f af7c 	beq.w	800effa <_dtoa_r+0x47a>
 800f102:	4b31      	ldr	r3, [pc, #196]	; (800f1c8 <_dtoa_r+0x648>)
 800f104:	ec51 0b19 	vmov	r0, r1, d9
 800f108:	2200      	movs	r2, #0
 800f10a:	f7f1 faed 	bl	80006e8 <__aeabi_dmul>
 800f10e:	4b2e      	ldr	r3, [pc, #184]	; (800f1c8 <_dtoa_r+0x648>)
 800f110:	ec41 0b19 	vmov	d9, r0, r1
 800f114:	2200      	movs	r2, #0
 800f116:	4640      	mov	r0, r8
 800f118:	4649      	mov	r1, r9
 800f11a:	f7f1 fae5 	bl	80006e8 <__aeabi_dmul>
 800f11e:	4680      	mov	r8, r0
 800f120:	4689      	mov	r9, r1
 800f122:	e7c5      	b.n	800f0b0 <_dtoa_r+0x530>
 800f124:	ec51 0b17 	vmov	r0, r1, d7
 800f128:	f7f1 fade 	bl	80006e8 <__aeabi_dmul>
 800f12c:	9b02      	ldr	r3, [sp, #8]
 800f12e:	9d00      	ldr	r5, [sp, #0]
 800f130:	930f      	str	r3, [sp, #60]	; 0x3c
 800f132:	ec41 0b19 	vmov	d9, r0, r1
 800f136:	4649      	mov	r1, r9
 800f138:	4640      	mov	r0, r8
 800f13a:	f7f1 fd85 	bl	8000c48 <__aeabi_d2iz>
 800f13e:	4606      	mov	r6, r0
 800f140:	f7f1 fa68 	bl	8000614 <__aeabi_i2d>
 800f144:	3630      	adds	r6, #48	; 0x30
 800f146:	4602      	mov	r2, r0
 800f148:	460b      	mov	r3, r1
 800f14a:	4640      	mov	r0, r8
 800f14c:	4649      	mov	r1, r9
 800f14e:	f7f1 f913 	bl	8000378 <__aeabi_dsub>
 800f152:	f805 6b01 	strb.w	r6, [r5], #1
 800f156:	9b02      	ldr	r3, [sp, #8]
 800f158:	429d      	cmp	r5, r3
 800f15a:	4680      	mov	r8, r0
 800f15c:	4689      	mov	r9, r1
 800f15e:	f04f 0200 	mov.w	r2, #0
 800f162:	d124      	bne.n	800f1ae <_dtoa_r+0x62e>
 800f164:	4b1b      	ldr	r3, [pc, #108]	; (800f1d4 <_dtoa_r+0x654>)
 800f166:	ec51 0b19 	vmov	r0, r1, d9
 800f16a:	f7f1 f907 	bl	800037c <__adddf3>
 800f16e:	4602      	mov	r2, r0
 800f170:	460b      	mov	r3, r1
 800f172:	4640      	mov	r0, r8
 800f174:	4649      	mov	r1, r9
 800f176:	f7f1 fd47 	bl	8000c08 <__aeabi_dcmpgt>
 800f17a:	2800      	cmp	r0, #0
 800f17c:	d173      	bne.n	800f266 <_dtoa_r+0x6e6>
 800f17e:	ec53 2b19 	vmov	r2, r3, d9
 800f182:	4914      	ldr	r1, [pc, #80]	; (800f1d4 <_dtoa_r+0x654>)
 800f184:	2000      	movs	r0, #0
 800f186:	f7f1 f8f7 	bl	8000378 <__aeabi_dsub>
 800f18a:	4602      	mov	r2, r0
 800f18c:	460b      	mov	r3, r1
 800f18e:	4640      	mov	r0, r8
 800f190:	4649      	mov	r1, r9
 800f192:	f7f1 fd1b 	bl	8000bcc <__aeabi_dcmplt>
 800f196:	2800      	cmp	r0, #0
 800f198:	f43f af2f 	beq.w	800effa <_dtoa_r+0x47a>
 800f19c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800f19e:	1e6b      	subs	r3, r5, #1
 800f1a0:	930f      	str	r3, [sp, #60]	; 0x3c
 800f1a2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f1a6:	2b30      	cmp	r3, #48	; 0x30
 800f1a8:	d0f8      	beq.n	800f19c <_dtoa_r+0x61c>
 800f1aa:	46bb      	mov	fp, r7
 800f1ac:	e04a      	b.n	800f244 <_dtoa_r+0x6c4>
 800f1ae:	4b06      	ldr	r3, [pc, #24]	; (800f1c8 <_dtoa_r+0x648>)
 800f1b0:	f7f1 fa9a 	bl	80006e8 <__aeabi_dmul>
 800f1b4:	4680      	mov	r8, r0
 800f1b6:	4689      	mov	r9, r1
 800f1b8:	e7bd      	b.n	800f136 <_dtoa_r+0x5b6>
 800f1ba:	bf00      	nop
 800f1bc:	08018728 	.word	0x08018728
 800f1c0:	08018700 	.word	0x08018700
 800f1c4:	3ff00000 	.word	0x3ff00000
 800f1c8:	40240000 	.word	0x40240000
 800f1cc:	401c0000 	.word	0x401c0000
 800f1d0:	40140000 	.word	0x40140000
 800f1d4:	3fe00000 	.word	0x3fe00000
 800f1d8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f1dc:	9d00      	ldr	r5, [sp, #0]
 800f1de:	4642      	mov	r2, r8
 800f1e0:	464b      	mov	r3, r9
 800f1e2:	4630      	mov	r0, r6
 800f1e4:	4639      	mov	r1, r7
 800f1e6:	f7f1 fba9 	bl	800093c <__aeabi_ddiv>
 800f1ea:	f7f1 fd2d 	bl	8000c48 <__aeabi_d2iz>
 800f1ee:	9001      	str	r0, [sp, #4]
 800f1f0:	f7f1 fa10 	bl	8000614 <__aeabi_i2d>
 800f1f4:	4642      	mov	r2, r8
 800f1f6:	464b      	mov	r3, r9
 800f1f8:	f7f1 fa76 	bl	80006e8 <__aeabi_dmul>
 800f1fc:	4602      	mov	r2, r0
 800f1fe:	460b      	mov	r3, r1
 800f200:	4630      	mov	r0, r6
 800f202:	4639      	mov	r1, r7
 800f204:	f7f1 f8b8 	bl	8000378 <__aeabi_dsub>
 800f208:	9e01      	ldr	r6, [sp, #4]
 800f20a:	9f04      	ldr	r7, [sp, #16]
 800f20c:	3630      	adds	r6, #48	; 0x30
 800f20e:	f805 6b01 	strb.w	r6, [r5], #1
 800f212:	9e00      	ldr	r6, [sp, #0]
 800f214:	1bae      	subs	r6, r5, r6
 800f216:	42b7      	cmp	r7, r6
 800f218:	4602      	mov	r2, r0
 800f21a:	460b      	mov	r3, r1
 800f21c:	d134      	bne.n	800f288 <_dtoa_r+0x708>
 800f21e:	f7f1 f8ad 	bl	800037c <__adddf3>
 800f222:	4642      	mov	r2, r8
 800f224:	464b      	mov	r3, r9
 800f226:	4606      	mov	r6, r0
 800f228:	460f      	mov	r7, r1
 800f22a:	f7f1 fced 	bl	8000c08 <__aeabi_dcmpgt>
 800f22e:	b9c8      	cbnz	r0, 800f264 <_dtoa_r+0x6e4>
 800f230:	4642      	mov	r2, r8
 800f232:	464b      	mov	r3, r9
 800f234:	4630      	mov	r0, r6
 800f236:	4639      	mov	r1, r7
 800f238:	f7f1 fcbe 	bl	8000bb8 <__aeabi_dcmpeq>
 800f23c:	b110      	cbz	r0, 800f244 <_dtoa_r+0x6c4>
 800f23e:	9b01      	ldr	r3, [sp, #4]
 800f240:	07db      	lsls	r3, r3, #31
 800f242:	d40f      	bmi.n	800f264 <_dtoa_r+0x6e4>
 800f244:	4651      	mov	r1, sl
 800f246:	4620      	mov	r0, r4
 800f248:	f000 fb18 	bl	800f87c <_Bfree>
 800f24c:	2300      	movs	r3, #0
 800f24e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f250:	702b      	strb	r3, [r5, #0]
 800f252:	f10b 0301 	add.w	r3, fp, #1
 800f256:	6013      	str	r3, [r2, #0]
 800f258:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	f43f ace2 	beq.w	800ec24 <_dtoa_r+0xa4>
 800f260:	601d      	str	r5, [r3, #0]
 800f262:	e4df      	b.n	800ec24 <_dtoa_r+0xa4>
 800f264:	465f      	mov	r7, fp
 800f266:	462b      	mov	r3, r5
 800f268:	461d      	mov	r5, r3
 800f26a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f26e:	2a39      	cmp	r2, #57	; 0x39
 800f270:	d106      	bne.n	800f280 <_dtoa_r+0x700>
 800f272:	9a00      	ldr	r2, [sp, #0]
 800f274:	429a      	cmp	r2, r3
 800f276:	d1f7      	bne.n	800f268 <_dtoa_r+0x6e8>
 800f278:	9900      	ldr	r1, [sp, #0]
 800f27a:	2230      	movs	r2, #48	; 0x30
 800f27c:	3701      	adds	r7, #1
 800f27e:	700a      	strb	r2, [r1, #0]
 800f280:	781a      	ldrb	r2, [r3, #0]
 800f282:	3201      	adds	r2, #1
 800f284:	701a      	strb	r2, [r3, #0]
 800f286:	e790      	b.n	800f1aa <_dtoa_r+0x62a>
 800f288:	4ba3      	ldr	r3, [pc, #652]	; (800f518 <_dtoa_r+0x998>)
 800f28a:	2200      	movs	r2, #0
 800f28c:	f7f1 fa2c 	bl	80006e8 <__aeabi_dmul>
 800f290:	2200      	movs	r2, #0
 800f292:	2300      	movs	r3, #0
 800f294:	4606      	mov	r6, r0
 800f296:	460f      	mov	r7, r1
 800f298:	f7f1 fc8e 	bl	8000bb8 <__aeabi_dcmpeq>
 800f29c:	2800      	cmp	r0, #0
 800f29e:	d09e      	beq.n	800f1de <_dtoa_r+0x65e>
 800f2a0:	e7d0      	b.n	800f244 <_dtoa_r+0x6c4>
 800f2a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f2a4:	2a00      	cmp	r2, #0
 800f2a6:	f000 80ca 	beq.w	800f43e <_dtoa_r+0x8be>
 800f2aa:	9a07      	ldr	r2, [sp, #28]
 800f2ac:	2a01      	cmp	r2, #1
 800f2ae:	f300 80ad 	bgt.w	800f40c <_dtoa_r+0x88c>
 800f2b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f2b4:	2a00      	cmp	r2, #0
 800f2b6:	f000 80a5 	beq.w	800f404 <_dtoa_r+0x884>
 800f2ba:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f2be:	9e08      	ldr	r6, [sp, #32]
 800f2c0:	9d05      	ldr	r5, [sp, #20]
 800f2c2:	9a05      	ldr	r2, [sp, #20]
 800f2c4:	441a      	add	r2, r3
 800f2c6:	9205      	str	r2, [sp, #20]
 800f2c8:	9a06      	ldr	r2, [sp, #24]
 800f2ca:	2101      	movs	r1, #1
 800f2cc:	441a      	add	r2, r3
 800f2ce:	4620      	mov	r0, r4
 800f2d0:	9206      	str	r2, [sp, #24]
 800f2d2:	f000 fb89 	bl	800f9e8 <__i2b>
 800f2d6:	4607      	mov	r7, r0
 800f2d8:	b165      	cbz	r5, 800f2f4 <_dtoa_r+0x774>
 800f2da:	9b06      	ldr	r3, [sp, #24]
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	dd09      	ble.n	800f2f4 <_dtoa_r+0x774>
 800f2e0:	42ab      	cmp	r3, r5
 800f2e2:	9a05      	ldr	r2, [sp, #20]
 800f2e4:	bfa8      	it	ge
 800f2e6:	462b      	movge	r3, r5
 800f2e8:	1ad2      	subs	r2, r2, r3
 800f2ea:	9205      	str	r2, [sp, #20]
 800f2ec:	9a06      	ldr	r2, [sp, #24]
 800f2ee:	1aed      	subs	r5, r5, r3
 800f2f0:	1ad3      	subs	r3, r2, r3
 800f2f2:	9306      	str	r3, [sp, #24]
 800f2f4:	9b08      	ldr	r3, [sp, #32]
 800f2f6:	b1f3      	cbz	r3, 800f336 <_dtoa_r+0x7b6>
 800f2f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	f000 80a3 	beq.w	800f446 <_dtoa_r+0x8c6>
 800f300:	2e00      	cmp	r6, #0
 800f302:	dd10      	ble.n	800f326 <_dtoa_r+0x7a6>
 800f304:	4639      	mov	r1, r7
 800f306:	4632      	mov	r2, r6
 800f308:	4620      	mov	r0, r4
 800f30a:	f000 fc2d 	bl	800fb68 <__pow5mult>
 800f30e:	4652      	mov	r2, sl
 800f310:	4601      	mov	r1, r0
 800f312:	4607      	mov	r7, r0
 800f314:	4620      	mov	r0, r4
 800f316:	f000 fb7d 	bl	800fa14 <__multiply>
 800f31a:	4651      	mov	r1, sl
 800f31c:	4680      	mov	r8, r0
 800f31e:	4620      	mov	r0, r4
 800f320:	f000 faac 	bl	800f87c <_Bfree>
 800f324:	46c2      	mov	sl, r8
 800f326:	9b08      	ldr	r3, [sp, #32]
 800f328:	1b9a      	subs	r2, r3, r6
 800f32a:	d004      	beq.n	800f336 <_dtoa_r+0x7b6>
 800f32c:	4651      	mov	r1, sl
 800f32e:	4620      	mov	r0, r4
 800f330:	f000 fc1a 	bl	800fb68 <__pow5mult>
 800f334:	4682      	mov	sl, r0
 800f336:	2101      	movs	r1, #1
 800f338:	4620      	mov	r0, r4
 800f33a:	f000 fb55 	bl	800f9e8 <__i2b>
 800f33e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f340:	2b00      	cmp	r3, #0
 800f342:	4606      	mov	r6, r0
 800f344:	f340 8081 	ble.w	800f44a <_dtoa_r+0x8ca>
 800f348:	461a      	mov	r2, r3
 800f34a:	4601      	mov	r1, r0
 800f34c:	4620      	mov	r0, r4
 800f34e:	f000 fc0b 	bl	800fb68 <__pow5mult>
 800f352:	9b07      	ldr	r3, [sp, #28]
 800f354:	2b01      	cmp	r3, #1
 800f356:	4606      	mov	r6, r0
 800f358:	dd7a      	ble.n	800f450 <_dtoa_r+0x8d0>
 800f35a:	f04f 0800 	mov.w	r8, #0
 800f35e:	6933      	ldr	r3, [r6, #16]
 800f360:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f364:	6918      	ldr	r0, [r3, #16]
 800f366:	f000 faf1 	bl	800f94c <__hi0bits>
 800f36a:	f1c0 0020 	rsb	r0, r0, #32
 800f36e:	9b06      	ldr	r3, [sp, #24]
 800f370:	4418      	add	r0, r3
 800f372:	f010 001f 	ands.w	r0, r0, #31
 800f376:	f000 8094 	beq.w	800f4a2 <_dtoa_r+0x922>
 800f37a:	f1c0 0320 	rsb	r3, r0, #32
 800f37e:	2b04      	cmp	r3, #4
 800f380:	f340 8085 	ble.w	800f48e <_dtoa_r+0x90e>
 800f384:	9b05      	ldr	r3, [sp, #20]
 800f386:	f1c0 001c 	rsb	r0, r0, #28
 800f38a:	4403      	add	r3, r0
 800f38c:	9305      	str	r3, [sp, #20]
 800f38e:	9b06      	ldr	r3, [sp, #24]
 800f390:	4403      	add	r3, r0
 800f392:	4405      	add	r5, r0
 800f394:	9306      	str	r3, [sp, #24]
 800f396:	9b05      	ldr	r3, [sp, #20]
 800f398:	2b00      	cmp	r3, #0
 800f39a:	dd05      	ble.n	800f3a8 <_dtoa_r+0x828>
 800f39c:	4651      	mov	r1, sl
 800f39e:	461a      	mov	r2, r3
 800f3a0:	4620      	mov	r0, r4
 800f3a2:	f000 fc3b 	bl	800fc1c <__lshift>
 800f3a6:	4682      	mov	sl, r0
 800f3a8:	9b06      	ldr	r3, [sp, #24]
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	dd05      	ble.n	800f3ba <_dtoa_r+0x83a>
 800f3ae:	4631      	mov	r1, r6
 800f3b0:	461a      	mov	r2, r3
 800f3b2:	4620      	mov	r0, r4
 800f3b4:	f000 fc32 	bl	800fc1c <__lshift>
 800f3b8:	4606      	mov	r6, r0
 800f3ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d072      	beq.n	800f4a6 <_dtoa_r+0x926>
 800f3c0:	4631      	mov	r1, r6
 800f3c2:	4650      	mov	r0, sl
 800f3c4:	f000 fc96 	bl	800fcf4 <__mcmp>
 800f3c8:	2800      	cmp	r0, #0
 800f3ca:	da6c      	bge.n	800f4a6 <_dtoa_r+0x926>
 800f3cc:	2300      	movs	r3, #0
 800f3ce:	4651      	mov	r1, sl
 800f3d0:	220a      	movs	r2, #10
 800f3d2:	4620      	mov	r0, r4
 800f3d4:	f000 fa74 	bl	800f8c0 <__multadd>
 800f3d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f3da:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f3de:	4682      	mov	sl, r0
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	f000 81b0 	beq.w	800f746 <_dtoa_r+0xbc6>
 800f3e6:	2300      	movs	r3, #0
 800f3e8:	4639      	mov	r1, r7
 800f3ea:	220a      	movs	r2, #10
 800f3ec:	4620      	mov	r0, r4
 800f3ee:	f000 fa67 	bl	800f8c0 <__multadd>
 800f3f2:	9b01      	ldr	r3, [sp, #4]
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	4607      	mov	r7, r0
 800f3f8:	f300 8096 	bgt.w	800f528 <_dtoa_r+0x9a8>
 800f3fc:	9b07      	ldr	r3, [sp, #28]
 800f3fe:	2b02      	cmp	r3, #2
 800f400:	dc59      	bgt.n	800f4b6 <_dtoa_r+0x936>
 800f402:	e091      	b.n	800f528 <_dtoa_r+0x9a8>
 800f404:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f406:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f40a:	e758      	b.n	800f2be <_dtoa_r+0x73e>
 800f40c:	9b04      	ldr	r3, [sp, #16]
 800f40e:	1e5e      	subs	r6, r3, #1
 800f410:	9b08      	ldr	r3, [sp, #32]
 800f412:	42b3      	cmp	r3, r6
 800f414:	bfbf      	itttt	lt
 800f416:	9b08      	ldrlt	r3, [sp, #32]
 800f418:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800f41a:	9608      	strlt	r6, [sp, #32]
 800f41c:	1af3      	sublt	r3, r6, r3
 800f41e:	bfb4      	ite	lt
 800f420:	18d2      	addlt	r2, r2, r3
 800f422:	1b9e      	subge	r6, r3, r6
 800f424:	9b04      	ldr	r3, [sp, #16]
 800f426:	bfbc      	itt	lt
 800f428:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800f42a:	2600      	movlt	r6, #0
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	bfb7      	itett	lt
 800f430:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800f434:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800f438:	1a9d      	sublt	r5, r3, r2
 800f43a:	2300      	movlt	r3, #0
 800f43c:	e741      	b.n	800f2c2 <_dtoa_r+0x742>
 800f43e:	9e08      	ldr	r6, [sp, #32]
 800f440:	9d05      	ldr	r5, [sp, #20]
 800f442:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800f444:	e748      	b.n	800f2d8 <_dtoa_r+0x758>
 800f446:	9a08      	ldr	r2, [sp, #32]
 800f448:	e770      	b.n	800f32c <_dtoa_r+0x7ac>
 800f44a:	9b07      	ldr	r3, [sp, #28]
 800f44c:	2b01      	cmp	r3, #1
 800f44e:	dc19      	bgt.n	800f484 <_dtoa_r+0x904>
 800f450:	9b02      	ldr	r3, [sp, #8]
 800f452:	b9bb      	cbnz	r3, 800f484 <_dtoa_r+0x904>
 800f454:	9b03      	ldr	r3, [sp, #12]
 800f456:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f45a:	b99b      	cbnz	r3, 800f484 <_dtoa_r+0x904>
 800f45c:	9b03      	ldr	r3, [sp, #12]
 800f45e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f462:	0d1b      	lsrs	r3, r3, #20
 800f464:	051b      	lsls	r3, r3, #20
 800f466:	b183      	cbz	r3, 800f48a <_dtoa_r+0x90a>
 800f468:	9b05      	ldr	r3, [sp, #20]
 800f46a:	3301      	adds	r3, #1
 800f46c:	9305      	str	r3, [sp, #20]
 800f46e:	9b06      	ldr	r3, [sp, #24]
 800f470:	3301      	adds	r3, #1
 800f472:	9306      	str	r3, [sp, #24]
 800f474:	f04f 0801 	mov.w	r8, #1
 800f478:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	f47f af6f 	bne.w	800f35e <_dtoa_r+0x7de>
 800f480:	2001      	movs	r0, #1
 800f482:	e774      	b.n	800f36e <_dtoa_r+0x7ee>
 800f484:	f04f 0800 	mov.w	r8, #0
 800f488:	e7f6      	b.n	800f478 <_dtoa_r+0x8f8>
 800f48a:	4698      	mov	r8, r3
 800f48c:	e7f4      	b.n	800f478 <_dtoa_r+0x8f8>
 800f48e:	d082      	beq.n	800f396 <_dtoa_r+0x816>
 800f490:	9a05      	ldr	r2, [sp, #20]
 800f492:	331c      	adds	r3, #28
 800f494:	441a      	add	r2, r3
 800f496:	9205      	str	r2, [sp, #20]
 800f498:	9a06      	ldr	r2, [sp, #24]
 800f49a:	441a      	add	r2, r3
 800f49c:	441d      	add	r5, r3
 800f49e:	9206      	str	r2, [sp, #24]
 800f4a0:	e779      	b.n	800f396 <_dtoa_r+0x816>
 800f4a2:	4603      	mov	r3, r0
 800f4a4:	e7f4      	b.n	800f490 <_dtoa_r+0x910>
 800f4a6:	9b04      	ldr	r3, [sp, #16]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	dc37      	bgt.n	800f51c <_dtoa_r+0x99c>
 800f4ac:	9b07      	ldr	r3, [sp, #28]
 800f4ae:	2b02      	cmp	r3, #2
 800f4b0:	dd34      	ble.n	800f51c <_dtoa_r+0x99c>
 800f4b2:	9b04      	ldr	r3, [sp, #16]
 800f4b4:	9301      	str	r3, [sp, #4]
 800f4b6:	9b01      	ldr	r3, [sp, #4]
 800f4b8:	b963      	cbnz	r3, 800f4d4 <_dtoa_r+0x954>
 800f4ba:	4631      	mov	r1, r6
 800f4bc:	2205      	movs	r2, #5
 800f4be:	4620      	mov	r0, r4
 800f4c0:	f000 f9fe 	bl	800f8c0 <__multadd>
 800f4c4:	4601      	mov	r1, r0
 800f4c6:	4606      	mov	r6, r0
 800f4c8:	4650      	mov	r0, sl
 800f4ca:	f000 fc13 	bl	800fcf4 <__mcmp>
 800f4ce:	2800      	cmp	r0, #0
 800f4d0:	f73f adbb 	bgt.w	800f04a <_dtoa_r+0x4ca>
 800f4d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f4d6:	9d00      	ldr	r5, [sp, #0]
 800f4d8:	ea6f 0b03 	mvn.w	fp, r3
 800f4dc:	f04f 0800 	mov.w	r8, #0
 800f4e0:	4631      	mov	r1, r6
 800f4e2:	4620      	mov	r0, r4
 800f4e4:	f000 f9ca 	bl	800f87c <_Bfree>
 800f4e8:	2f00      	cmp	r7, #0
 800f4ea:	f43f aeab 	beq.w	800f244 <_dtoa_r+0x6c4>
 800f4ee:	f1b8 0f00 	cmp.w	r8, #0
 800f4f2:	d005      	beq.n	800f500 <_dtoa_r+0x980>
 800f4f4:	45b8      	cmp	r8, r7
 800f4f6:	d003      	beq.n	800f500 <_dtoa_r+0x980>
 800f4f8:	4641      	mov	r1, r8
 800f4fa:	4620      	mov	r0, r4
 800f4fc:	f000 f9be 	bl	800f87c <_Bfree>
 800f500:	4639      	mov	r1, r7
 800f502:	4620      	mov	r0, r4
 800f504:	f000 f9ba 	bl	800f87c <_Bfree>
 800f508:	e69c      	b.n	800f244 <_dtoa_r+0x6c4>
 800f50a:	2600      	movs	r6, #0
 800f50c:	4637      	mov	r7, r6
 800f50e:	e7e1      	b.n	800f4d4 <_dtoa_r+0x954>
 800f510:	46bb      	mov	fp, r7
 800f512:	4637      	mov	r7, r6
 800f514:	e599      	b.n	800f04a <_dtoa_r+0x4ca>
 800f516:	bf00      	nop
 800f518:	40240000 	.word	0x40240000
 800f51c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f51e:	2b00      	cmp	r3, #0
 800f520:	f000 80c8 	beq.w	800f6b4 <_dtoa_r+0xb34>
 800f524:	9b04      	ldr	r3, [sp, #16]
 800f526:	9301      	str	r3, [sp, #4]
 800f528:	2d00      	cmp	r5, #0
 800f52a:	dd05      	ble.n	800f538 <_dtoa_r+0x9b8>
 800f52c:	4639      	mov	r1, r7
 800f52e:	462a      	mov	r2, r5
 800f530:	4620      	mov	r0, r4
 800f532:	f000 fb73 	bl	800fc1c <__lshift>
 800f536:	4607      	mov	r7, r0
 800f538:	f1b8 0f00 	cmp.w	r8, #0
 800f53c:	d05b      	beq.n	800f5f6 <_dtoa_r+0xa76>
 800f53e:	6879      	ldr	r1, [r7, #4]
 800f540:	4620      	mov	r0, r4
 800f542:	f000 f95b 	bl	800f7fc <_Balloc>
 800f546:	4605      	mov	r5, r0
 800f548:	b928      	cbnz	r0, 800f556 <_dtoa_r+0x9d6>
 800f54a:	4b83      	ldr	r3, [pc, #524]	; (800f758 <_dtoa_r+0xbd8>)
 800f54c:	4602      	mov	r2, r0
 800f54e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800f552:	f7ff bb2e 	b.w	800ebb2 <_dtoa_r+0x32>
 800f556:	693a      	ldr	r2, [r7, #16]
 800f558:	3202      	adds	r2, #2
 800f55a:	0092      	lsls	r2, r2, #2
 800f55c:	f107 010c 	add.w	r1, r7, #12
 800f560:	300c      	adds	r0, #12
 800f562:	f7ff fa75 	bl	800ea50 <memcpy>
 800f566:	2201      	movs	r2, #1
 800f568:	4629      	mov	r1, r5
 800f56a:	4620      	mov	r0, r4
 800f56c:	f000 fb56 	bl	800fc1c <__lshift>
 800f570:	9b00      	ldr	r3, [sp, #0]
 800f572:	3301      	adds	r3, #1
 800f574:	9304      	str	r3, [sp, #16]
 800f576:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f57a:	4413      	add	r3, r2
 800f57c:	9308      	str	r3, [sp, #32]
 800f57e:	9b02      	ldr	r3, [sp, #8]
 800f580:	f003 0301 	and.w	r3, r3, #1
 800f584:	46b8      	mov	r8, r7
 800f586:	9306      	str	r3, [sp, #24]
 800f588:	4607      	mov	r7, r0
 800f58a:	9b04      	ldr	r3, [sp, #16]
 800f58c:	4631      	mov	r1, r6
 800f58e:	3b01      	subs	r3, #1
 800f590:	4650      	mov	r0, sl
 800f592:	9301      	str	r3, [sp, #4]
 800f594:	f7ff fa6a 	bl	800ea6c <quorem>
 800f598:	4641      	mov	r1, r8
 800f59a:	9002      	str	r0, [sp, #8]
 800f59c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800f5a0:	4650      	mov	r0, sl
 800f5a2:	f000 fba7 	bl	800fcf4 <__mcmp>
 800f5a6:	463a      	mov	r2, r7
 800f5a8:	9005      	str	r0, [sp, #20]
 800f5aa:	4631      	mov	r1, r6
 800f5ac:	4620      	mov	r0, r4
 800f5ae:	f000 fbbd 	bl	800fd2c <__mdiff>
 800f5b2:	68c2      	ldr	r2, [r0, #12]
 800f5b4:	4605      	mov	r5, r0
 800f5b6:	bb02      	cbnz	r2, 800f5fa <_dtoa_r+0xa7a>
 800f5b8:	4601      	mov	r1, r0
 800f5ba:	4650      	mov	r0, sl
 800f5bc:	f000 fb9a 	bl	800fcf4 <__mcmp>
 800f5c0:	4602      	mov	r2, r0
 800f5c2:	4629      	mov	r1, r5
 800f5c4:	4620      	mov	r0, r4
 800f5c6:	9209      	str	r2, [sp, #36]	; 0x24
 800f5c8:	f000 f958 	bl	800f87c <_Bfree>
 800f5cc:	9b07      	ldr	r3, [sp, #28]
 800f5ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f5d0:	9d04      	ldr	r5, [sp, #16]
 800f5d2:	ea43 0102 	orr.w	r1, r3, r2
 800f5d6:	9b06      	ldr	r3, [sp, #24]
 800f5d8:	4319      	orrs	r1, r3
 800f5da:	d110      	bne.n	800f5fe <_dtoa_r+0xa7e>
 800f5dc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f5e0:	d029      	beq.n	800f636 <_dtoa_r+0xab6>
 800f5e2:	9b05      	ldr	r3, [sp, #20]
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	dd02      	ble.n	800f5ee <_dtoa_r+0xa6e>
 800f5e8:	9b02      	ldr	r3, [sp, #8]
 800f5ea:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800f5ee:	9b01      	ldr	r3, [sp, #4]
 800f5f0:	f883 9000 	strb.w	r9, [r3]
 800f5f4:	e774      	b.n	800f4e0 <_dtoa_r+0x960>
 800f5f6:	4638      	mov	r0, r7
 800f5f8:	e7ba      	b.n	800f570 <_dtoa_r+0x9f0>
 800f5fa:	2201      	movs	r2, #1
 800f5fc:	e7e1      	b.n	800f5c2 <_dtoa_r+0xa42>
 800f5fe:	9b05      	ldr	r3, [sp, #20]
 800f600:	2b00      	cmp	r3, #0
 800f602:	db04      	blt.n	800f60e <_dtoa_r+0xa8e>
 800f604:	9907      	ldr	r1, [sp, #28]
 800f606:	430b      	orrs	r3, r1
 800f608:	9906      	ldr	r1, [sp, #24]
 800f60a:	430b      	orrs	r3, r1
 800f60c:	d120      	bne.n	800f650 <_dtoa_r+0xad0>
 800f60e:	2a00      	cmp	r2, #0
 800f610:	dded      	ble.n	800f5ee <_dtoa_r+0xa6e>
 800f612:	4651      	mov	r1, sl
 800f614:	2201      	movs	r2, #1
 800f616:	4620      	mov	r0, r4
 800f618:	f000 fb00 	bl	800fc1c <__lshift>
 800f61c:	4631      	mov	r1, r6
 800f61e:	4682      	mov	sl, r0
 800f620:	f000 fb68 	bl	800fcf4 <__mcmp>
 800f624:	2800      	cmp	r0, #0
 800f626:	dc03      	bgt.n	800f630 <_dtoa_r+0xab0>
 800f628:	d1e1      	bne.n	800f5ee <_dtoa_r+0xa6e>
 800f62a:	f019 0f01 	tst.w	r9, #1
 800f62e:	d0de      	beq.n	800f5ee <_dtoa_r+0xa6e>
 800f630:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f634:	d1d8      	bne.n	800f5e8 <_dtoa_r+0xa68>
 800f636:	9a01      	ldr	r2, [sp, #4]
 800f638:	2339      	movs	r3, #57	; 0x39
 800f63a:	7013      	strb	r3, [r2, #0]
 800f63c:	462b      	mov	r3, r5
 800f63e:	461d      	mov	r5, r3
 800f640:	3b01      	subs	r3, #1
 800f642:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f646:	2a39      	cmp	r2, #57	; 0x39
 800f648:	d06c      	beq.n	800f724 <_dtoa_r+0xba4>
 800f64a:	3201      	adds	r2, #1
 800f64c:	701a      	strb	r2, [r3, #0]
 800f64e:	e747      	b.n	800f4e0 <_dtoa_r+0x960>
 800f650:	2a00      	cmp	r2, #0
 800f652:	dd07      	ble.n	800f664 <_dtoa_r+0xae4>
 800f654:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f658:	d0ed      	beq.n	800f636 <_dtoa_r+0xab6>
 800f65a:	9a01      	ldr	r2, [sp, #4]
 800f65c:	f109 0301 	add.w	r3, r9, #1
 800f660:	7013      	strb	r3, [r2, #0]
 800f662:	e73d      	b.n	800f4e0 <_dtoa_r+0x960>
 800f664:	9b04      	ldr	r3, [sp, #16]
 800f666:	9a08      	ldr	r2, [sp, #32]
 800f668:	f803 9c01 	strb.w	r9, [r3, #-1]
 800f66c:	4293      	cmp	r3, r2
 800f66e:	d043      	beq.n	800f6f8 <_dtoa_r+0xb78>
 800f670:	4651      	mov	r1, sl
 800f672:	2300      	movs	r3, #0
 800f674:	220a      	movs	r2, #10
 800f676:	4620      	mov	r0, r4
 800f678:	f000 f922 	bl	800f8c0 <__multadd>
 800f67c:	45b8      	cmp	r8, r7
 800f67e:	4682      	mov	sl, r0
 800f680:	f04f 0300 	mov.w	r3, #0
 800f684:	f04f 020a 	mov.w	r2, #10
 800f688:	4641      	mov	r1, r8
 800f68a:	4620      	mov	r0, r4
 800f68c:	d107      	bne.n	800f69e <_dtoa_r+0xb1e>
 800f68e:	f000 f917 	bl	800f8c0 <__multadd>
 800f692:	4680      	mov	r8, r0
 800f694:	4607      	mov	r7, r0
 800f696:	9b04      	ldr	r3, [sp, #16]
 800f698:	3301      	adds	r3, #1
 800f69a:	9304      	str	r3, [sp, #16]
 800f69c:	e775      	b.n	800f58a <_dtoa_r+0xa0a>
 800f69e:	f000 f90f 	bl	800f8c0 <__multadd>
 800f6a2:	4639      	mov	r1, r7
 800f6a4:	4680      	mov	r8, r0
 800f6a6:	2300      	movs	r3, #0
 800f6a8:	220a      	movs	r2, #10
 800f6aa:	4620      	mov	r0, r4
 800f6ac:	f000 f908 	bl	800f8c0 <__multadd>
 800f6b0:	4607      	mov	r7, r0
 800f6b2:	e7f0      	b.n	800f696 <_dtoa_r+0xb16>
 800f6b4:	9b04      	ldr	r3, [sp, #16]
 800f6b6:	9301      	str	r3, [sp, #4]
 800f6b8:	9d00      	ldr	r5, [sp, #0]
 800f6ba:	4631      	mov	r1, r6
 800f6bc:	4650      	mov	r0, sl
 800f6be:	f7ff f9d5 	bl	800ea6c <quorem>
 800f6c2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800f6c6:	9b00      	ldr	r3, [sp, #0]
 800f6c8:	f805 9b01 	strb.w	r9, [r5], #1
 800f6cc:	1aea      	subs	r2, r5, r3
 800f6ce:	9b01      	ldr	r3, [sp, #4]
 800f6d0:	4293      	cmp	r3, r2
 800f6d2:	dd07      	ble.n	800f6e4 <_dtoa_r+0xb64>
 800f6d4:	4651      	mov	r1, sl
 800f6d6:	2300      	movs	r3, #0
 800f6d8:	220a      	movs	r2, #10
 800f6da:	4620      	mov	r0, r4
 800f6dc:	f000 f8f0 	bl	800f8c0 <__multadd>
 800f6e0:	4682      	mov	sl, r0
 800f6e2:	e7ea      	b.n	800f6ba <_dtoa_r+0xb3a>
 800f6e4:	9b01      	ldr	r3, [sp, #4]
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	bfc8      	it	gt
 800f6ea:	461d      	movgt	r5, r3
 800f6ec:	9b00      	ldr	r3, [sp, #0]
 800f6ee:	bfd8      	it	le
 800f6f0:	2501      	movle	r5, #1
 800f6f2:	441d      	add	r5, r3
 800f6f4:	f04f 0800 	mov.w	r8, #0
 800f6f8:	4651      	mov	r1, sl
 800f6fa:	2201      	movs	r2, #1
 800f6fc:	4620      	mov	r0, r4
 800f6fe:	f000 fa8d 	bl	800fc1c <__lshift>
 800f702:	4631      	mov	r1, r6
 800f704:	4682      	mov	sl, r0
 800f706:	f000 faf5 	bl	800fcf4 <__mcmp>
 800f70a:	2800      	cmp	r0, #0
 800f70c:	dc96      	bgt.n	800f63c <_dtoa_r+0xabc>
 800f70e:	d102      	bne.n	800f716 <_dtoa_r+0xb96>
 800f710:	f019 0f01 	tst.w	r9, #1
 800f714:	d192      	bne.n	800f63c <_dtoa_r+0xabc>
 800f716:	462b      	mov	r3, r5
 800f718:	461d      	mov	r5, r3
 800f71a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f71e:	2a30      	cmp	r2, #48	; 0x30
 800f720:	d0fa      	beq.n	800f718 <_dtoa_r+0xb98>
 800f722:	e6dd      	b.n	800f4e0 <_dtoa_r+0x960>
 800f724:	9a00      	ldr	r2, [sp, #0]
 800f726:	429a      	cmp	r2, r3
 800f728:	d189      	bne.n	800f63e <_dtoa_r+0xabe>
 800f72a:	f10b 0b01 	add.w	fp, fp, #1
 800f72e:	2331      	movs	r3, #49	; 0x31
 800f730:	e796      	b.n	800f660 <_dtoa_r+0xae0>
 800f732:	4b0a      	ldr	r3, [pc, #40]	; (800f75c <_dtoa_r+0xbdc>)
 800f734:	f7ff ba99 	b.w	800ec6a <_dtoa_r+0xea>
 800f738:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	f47f aa6d 	bne.w	800ec1a <_dtoa_r+0x9a>
 800f740:	4b07      	ldr	r3, [pc, #28]	; (800f760 <_dtoa_r+0xbe0>)
 800f742:	f7ff ba92 	b.w	800ec6a <_dtoa_r+0xea>
 800f746:	9b01      	ldr	r3, [sp, #4]
 800f748:	2b00      	cmp	r3, #0
 800f74a:	dcb5      	bgt.n	800f6b8 <_dtoa_r+0xb38>
 800f74c:	9b07      	ldr	r3, [sp, #28]
 800f74e:	2b02      	cmp	r3, #2
 800f750:	f73f aeb1 	bgt.w	800f4b6 <_dtoa_r+0x936>
 800f754:	e7b0      	b.n	800f6b8 <_dtoa_r+0xb38>
 800f756:	bf00      	nop
 800f758:	08018694 	.word	0x08018694
 800f75c:	080185f4 	.word	0x080185f4
 800f760:	08018618 	.word	0x08018618

0800f764 <_free_r>:
 800f764:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f766:	2900      	cmp	r1, #0
 800f768:	d044      	beq.n	800f7f4 <_free_r+0x90>
 800f76a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f76e:	9001      	str	r0, [sp, #4]
 800f770:	2b00      	cmp	r3, #0
 800f772:	f1a1 0404 	sub.w	r4, r1, #4
 800f776:	bfb8      	it	lt
 800f778:	18e4      	addlt	r4, r4, r3
 800f77a:	f7fe f955 	bl	800da28 <__malloc_lock>
 800f77e:	4a1e      	ldr	r2, [pc, #120]	; (800f7f8 <_free_r+0x94>)
 800f780:	9801      	ldr	r0, [sp, #4]
 800f782:	6813      	ldr	r3, [r2, #0]
 800f784:	b933      	cbnz	r3, 800f794 <_free_r+0x30>
 800f786:	6063      	str	r3, [r4, #4]
 800f788:	6014      	str	r4, [r2, #0]
 800f78a:	b003      	add	sp, #12
 800f78c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f790:	f7fe b950 	b.w	800da34 <__malloc_unlock>
 800f794:	42a3      	cmp	r3, r4
 800f796:	d908      	bls.n	800f7aa <_free_r+0x46>
 800f798:	6825      	ldr	r5, [r4, #0]
 800f79a:	1961      	adds	r1, r4, r5
 800f79c:	428b      	cmp	r3, r1
 800f79e:	bf01      	itttt	eq
 800f7a0:	6819      	ldreq	r1, [r3, #0]
 800f7a2:	685b      	ldreq	r3, [r3, #4]
 800f7a4:	1949      	addeq	r1, r1, r5
 800f7a6:	6021      	streq	r1, [r4, #0]
 800f7a8:	e7ed      	b.n	800f786 <_free_r+0x22>
 800f7aa:	461a      	mov	r2, r3
 800f7ac:	685b      	ldr	r3, [r3, #4]
 800f7ae:	b10b      	cbz	r3, 800f7b4 <_free_r+0x50>
 800f7b0:	42a3      	cmp	r3, r4
 800f7b2:	d9fa      	bls.n	800f7aa <_free_r+0x46>
 800f7b4:	6811      	ldr	r1, [r2, #0]
 800f7b6:	1855      	adds	r5, r2, r1
 800f7b8:	42a5      	cmp	r5, r4
 800f7ba:	d10b      	bne.n	800f7d4 <_free_r+0x70>
 800f7bc:	6824      	ldr	r4, [r4, #0]
 800f7be:	4421      	add	r1, r4
 800f7c0:	1854      	adds	r4, r2, r1
 800f7c2:	42a3      	cmp	r3, r4
 800f7c4:	6011      	str	r1, [r2, #0]
 800f7c6:	d1e0      	bne.n	800f78a <_free_r+0x26>
 800f7c8:	681c      	ldr	r4, [r3, #0]
 800f7ca:	685b      	ldr	r3, [r3, #4]
 800f7cc:	6053      	str	r3, [r2, #4]
 800f7ce:	440c      	add	r4, r1
 800f7d0:	6014      	str	r4, [r2, #0]
 800f7d2:	e7da      	b.n	800f78a <_free_r+0x26>
 800f7d4:	d902      	bls.n	800f7dc <_free_r+0x78>
 800f7d6:	230c      	movs	r3, #12
 800f7d8:	6003      	str	r3, [r0, #0]
 800f7da:	e7d6      	b.n	800f78a <_free_r+0x26>
 800f7dc:	6825      	ldr	r5, [r4, #0]
 800f7de:	1961      	adds	r1, r4, r5
 800f7e0:	428b      	cmp	r3, r1
 800f7e2:	bf04      	itt	eq
 800f7e4:	6819      	ldreq	r1, [r3, #0]
 800f7e6:	685b      	ldreq	r3, [r3, #4]
 800f7e8:	6063      	str	r3, [r4, #4]
 800f7ea:	bf04      	itt	eq
 800f7ec:	1949      	addeq	r1, r1, r5
 800f7ee:	6021      	streq	r1, [r4, #0]
 800f7f0:	6054      	str	r4, [r2, #4]
 800f7f2:	e7ca      	b.n	800f78a <_free_r+0x26>
 800f7f4:	b003      	add	sp, #12
 800f7f6:	bd30      	pop	{r4, r5, pc}
 800f7f8:	200004f4 	.word	0x200004f4

0800f7fc <_Balloc>:
 800f7fc:	b570      	push	{r4, r5, r6, lr}
 800f7fe:	69c6      	ldr	r6, [r0, #28]
 800f800:	4604      	mov	r4, r0
 800f802:	460d      	mov	r5, r1
 800f804:	b976      	cbnz	r6, 800f824 <_Balloc+0x28>
 800f806:	2010      	movs	r0, #16
 800f808:	f7fe f85e 	bl	800d8c8 <malloc>
 800f80c:	4602      	mov	r2, r0
 800f80e:	61e0      	str	r0, [r4, #28]
 800f810:	b920      	cbnz	r0, 800f81c <_Balloc+0x20>
 800f812:	4b18      	ldr	r3, [pc, #96]	; (800f874 <_Balloc+0x78>)
 800f814:	4818      	ldr	r0, [pc, #96]	; (800f878 <_Balloc+0x7c>)
 800f816:	216b      	movs	r1, #107	; 0x6b
 800f818:	f000 fec0 	bl	801059c <__assert_func>
 800f81c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f820:	6006      	str	r6, [r0, #0]
 800f822:	60c6      	str	r6, [r0, #12]
 800f824:	69e6      	ldr	r6, [r4, #28]
 800f826:	68f3      	ldr	r3, [r6, #12]
 800f828:	b183      	cbz	r3, 800f84c <_Balloc+0x50>
 800f82a:	69e3      	ldr	r3, [r4, #28]
 800f82c:	68db      	ldr	r3, [r3, #12]
 800f82e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f832:	b9b8      	cbnz	r0, 800f864 <_Balloc+0x68>
 800f834:	2101      	movs	r1, #1
 800f836:	fa01 f605 	lsl.w	r6, r1, r5
 800f83a:	1d72      	adds	r2, r6, #5
 800f83c:	0092      	lsls	r2, r2, #2
 800f83e:	4620      	mov	r0, r4
 800f840:	f7fe f82c 	bl	800d89c <_calloc_r>
 800f844:	b160      	cbz	r0, 800f860 <_Balloc+0x64>
 800f846:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f84a:	e00e      	b.n	800f86a <_Balloc+0x6e>
 800f84c:	2221      	movs	r2, #33	; 0x21
 800f84e:	2104      	movs	r1, #4
 800f850:	4620      	mov	r0, r4
 800f852:	f7fe f823 	bl	800d89c <_calloc_r>
 800f856:	69e3      	ldr	r3, [r4, #28]
 800f858:	60f0      	str	r0, [r6, #12]
 800f85a:	68db      	ldr	r3, [r3, #12]
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d1e4      	bne.n	800f82a <_Balloc+0x2e>
 800f860:	2000      	movs	r0, #0
 800f862:	bd70      	pop	{r4, r5, r6, pc}
 800f864:	6802      	ldr	r2, [r0, #0]
 800f866:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f86a:	2300      	movs	r3, #0
 800f86c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f870:	e7f7      	b.n	800f862 <_Balloc+0x66>
 800f872:	bf00      	nop
 800f874:	08018625 	.word	0x08018625
 800f878:	080186a5 	.word	0x080186a5

0800f87c <_Bfree>:
 800f87c:	b570      	push	{r4, r5, r6, lr}
 800f87e:	69c6      	ldr	r6, [r0, #28]
 800f880:	4605      	mov	r5, r0
 800f882:	460c      	mov	r4, r1
 800f884:	b976      	cbnz	r6, 800f8a4 <_Bfree+0x28>
 800f886:	2010      	movs	r0, #16
 800f888:	f7fe f81e 	bl	800d8c8 <malloc>
 800f88c:	4602      	mov	r2, r0
 800f88e:	61e8      	str	r0, [r5, #28]
 800f890:	b920      	cbnz	r0, 800f89c <_Bfree+0x20>
 800f892:	4b09      	ldr	r3, [pc, #36]	; (800f8b8 <_Bfree+0x3c>)
 800f894:	4809      	ldr	r0, [pc, #36]	; (800f8bc <_Bfree+0x40>)
 800f896:	218f      	movs	r1, #143	; 0x8f
 800f898:	f000 fe80 	bl	801059c <__assert_func>
 800f89c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f8a0:	6006      	str	r6, [r0, #0]
 800f8a2:	60c6      	str	r6, [r0, #12]
 800f8a4:	b13c      	cbz	r4, 800f8b6 <_Bfree+0x3a>
 800f8a6:	69eb      	ldr	r3, [r5, #28]
 800f8a8:	6862      	ldr	r2, [r4, #4]
 800f8aa:	68db      	ldr	r3, [r3, #12]
 800f8ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f8b0:	6021      	str	r1, [r4, #0]
 800f8b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f8b6:	bd70      	pop	{r4, r5, r6, pc}
 800f8b8:	08018625 	.word	0x08018625
 800f8bc:	080186a5 	.word	0x080186a5

0800f8c0 <__multadd>:
 800f8c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8c4:	690d      	ldr	r5, [r1, #16]
 800f8c6:	4607      	mov	r7, r0
 800f8c8:	460c      	mov	r4, r1
 800f8ca:	461e      	mov	r6, r3
 800f8cc:	f101 0c14 	add.w	ip, r1, #20
 800f8d0:	2000      	movs	r0, #0
 800f8d2:	f8dc 3000 	ldr.w	r3, [ip]
 800f8d6:	b299      	uxth	r1, r3
 800f8d8:	fb02 6101 	mla	r1, r2, r1, r6
 800f8dc:	0c1e      	lsrs	r6, r3, #16
 800f8de:	0c0b      	lsrs	r3, r1, #16
 800f8e0:	fb02 3306 	mla	r3, r2, r6, r3
 800f8e4:	b289      	uxth	r1, r1
 800f8e6:	3001      	adds	r0, #1
 800f8e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f8ec:	4285      	cmp	r5, r0
 800f8ee:	f84c 1b04 	str.w	r1, [ip], #4
 800f8f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f8f6:	dcec      	bgt.n	800f8d2 <__multadd+0x12>
 800f8f8:	b30e      	cbz	r6, 800f93e <__multadd+0x7e>
 800f8fa:	68a3      	ldr	r3, [r4, #8]
 800f8fc:	42ab      	cmp	r3, r5
 800f8fe:	dc19      	bgt.n	800f934 <__multadd+0x74>
 800f900:	6861      	ldr	r1, [r4, #4]
 800f902:	4638      	mov	r0, r7
 800f904:	3101      	adds	r1, #1
 800f906:	f7ff ff79 	bl	800f7fc <_Balloc>
 800f90a:	4680      	mov	r8, r0
 800f90c:	b928      	cbnz	r0, 800f91a <__multadd+0x5a>
 800f90e:	4602      	mov	r2, r0
 800f910:	4b0c      	ldr	r3, [pc, #48]	; (800f944 <__multadd+0x84>)
 800f912:	480d      	ldr	r0, [pc, #52]	; (800f948 <__multadd+0x88>)
 800f914:	21ba      	movs	r1, #186	; 0xba
 800f916:	f000 fe41 	bl	801059c <__assert_func>
 800f91a:	6922      	ldr	r2, [r4, #16]
 800f91c:	3202      	adds	r2, #2
 800f91e:	f104 010c 	add.w	r1, r4, #12
 800f922:	0092      	lsls	r2, r2, #2
 800f924:	300c      	adds	r0, #12
 800f926:	f7ff f893 	bl	800ea50 <memcpy>
 800f92a:	4621      	mov	r1, r4
 800f92c:	4638      	mov	r0, r7
 800f92e:	f7ff ffa5 	bl	800f87c <_Bfree>
 800f932:	4644      	mov	r4, r8
 800f934:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f938:	3501      	adds	r5, #1
 800f93a:	615e      	str	r6, [r3, #20]
 800f93c:	6125      	str	r5, [r4, #16]
 800f93e:	4620      	mov	r0, r4
 800f940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f944:	08018694 	.word	0x08018694
 800f948:	080186a5 	.word	0x080186a5

0800f94c <__hi0bits>:
 800f94c:	0c03      	lsrs	r3, r0, #16
 800f94e:	041b      	lsls	r3, r3, #16
 800f950:	b9d3      	cbnz	r3, 800f988 <__hi0bits+0x3c>
 800f952:	0400      	lsls	r0, r0, #16
 800f954:	2310      	movs	r3, #16
 800f956:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f95a:	bf04      	itt	eq
 800f95c:	0200      	lsleq	r0, r0, #8
 800f95e:	3308      	addeq	r3, #8
 800f960:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f964:	bf04      	itt	eq
 800f966:	0100      	lsleq	r0, r0, #4
 800f968:	3304      	addeq	r3, #4
 800f96a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f96e:	bf04      	itt	eq
 800f970:	0080      	lsleq	r0, r0, #2
 800f972:	3302      	addeq	r3, #2
 800f974:	2800      	cmp	r0, #0
 800f976:	db05      	blt.n	800f984 <__hi0bits+0x38>
 800f978:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f97c:	f103 0301 	add.w	r3, r3, #1
 800f980:	bf08      	it	eq
 800f982:	2320      	moveq	r3, #32
 800f984:	4618      	mov	r0, r3
 800f986:	4770      	bx	lr
 800f988:	2300      	movs	r3, #0
 800f98a:	e7e4      	b.n	800f956 <__hi0bits+0xa>

0800f98c <__lo0bits>:
 800f98c:	6803      	ldr	r3, [r0, #0]
 800f98e:	f013 0207 	ands.w	r2, r3, #7
 800f992:	d00c      	beq.n	800f9ae <__lo0bits+0x22>
 800f994:	07d9      	lsls	r1, r3, #31
 800f996:	d422      	bmi.n	800f9de <__lo0bits+0x52>
 800f998:	079a      	lsls	r2, r3, #30
 800f99a:	bf49      	itett	mi
 800f99c:	085b      	lsrmi	r3, r3, #1
 800f99e:	089b      	lsrpl	r3, r3, #2
 800f9a0:	6003      	strmi	r3, [r0, #0]
 800f9a2:	2201      	movmi	r2, #1
 800f9a4:	bf5c      	itt	pl
 800f9a6:	6003      	strpl	r3, [r0, #0]
 800f9a8:	2202      	movpl	r2, #2
 800f9aa:	4610      	mov	r0, r2
 800f9ac:	4770      	bx	lr
 800f9ae:	b299      	uxth	r1, r3
 800f9b0:	b909      	cbnz	r1, 800f9b6 <__lo0bits+0x2a>
 800f9b2:	0c1b      	lsrs	r3, r3, #16
 800f9b4:	2210      	movs	r2, #16
 800f9b6:	b2d9      	uxtb	r1, r3
 800f9b8:	b909      	cbnz	r1, 800f9be <__lo0bits+0x32>
 800f9ba:	3208      	adds	r2, #8
 800f9bc:	0a1b      	lsrs	r3, r3, #8
 800f9be:	0719      	lsls	r1, r3, #28
 800f9c0:	bf04      	itt	eq
 800f9c2:	091b      	lsreq	r3, r3, #4
 800f9c4:	3204      	addeq	r2, #4
 800f9c6:	0799      	lsls	r1, r3, #30
 800f9c8:	bf04      	itt	eq
 800f9ca:	089b      	lsreq	r3, r3, #2
 800f9cc:	3202      	addeq	r2, #2
 800f9ce:	07d9      	lsls	r1, r3, #31
 800f9d0:	d403      	bmi.n	800f9da <__lo0bits+0x4e>
 800f9d2:	085b      	lsrs	r3, r3, #1
 800f9d4:	f102 0201 	add.w	r2, r2, #1
 800f9d8:	d003      	beq.n	800f9e2 <__lo0bits+0x56>
 800f9da:	6003      	str	r3, [r0, #0]
 800f9dc:	e7e5      	b.n	800f9aa <__lo0bits+0x1e>
 800f9de:	2200      	movs	r2, #0
 800f9e0:	e7e3      	b.n	800f9aa <__lo0bits+0x1e>
 800f9e2:	2220      	movs	r2, #32
 800f9e4:	e7e1      	b.n	800f9aa <__lo0bits+0x1e>
	...

0800f9e8 <__i2b>:
 800f9e8:	b510      	push	{r4, lr}
 800f9ea:	460c      	mov	r4, r1
 800f9ec:	2101      	movs	r1, #1
 800f9ee:	f7ff ff05 	bl	800f7fc <_Balloc>
 800f9f2:	4602      	mov	r2, r0
 800f9f4:	b928      	cbnz	r0, 800fa02 <__i2b+0x1a>
 800f9f6:	4b05      	ldr	r3, [pc, #20]	; (800fa0c <__i2b+0x24>)
 800f9f8:	4805      	ldr	r0, [pc, #20]	; (800fa10 <__i2b+0x28>)
 800f9fa:	f240 1145 	movw	r1, #325	; 0x145
 800f9fe:	f000 fdcd 	bl	801059c <__assert_func>
 800fa02:	2301      	movs	r3, #1
 800fa04:	6144      	str	r4, [r0, #20]
 800fa06:	6103      	str	r3, [r0, #16]
 800fa08:	bd10      	pop	{r4, pc}
 800fa0a:	bf00      	nop
 800fa0c:	08018694 	.word	0x08018694
 800fa10:	080186a5 	.word	0x080186a5

0800fa14 <__multiply>:
 800fa14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa18:	4691      	mov	r9, r2
 800fa1a:	690a      	ldr	r2, [r1, #16]
 800fa1c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fa20:	429a      	cmp	r2, r3
 800fa22:	bfb8      	it	lt
 800fa24:	460b      	movlt	r3, r1
 800fa26:	460c      	mov	r4, r1
 800fa28:	bfbc      	itt	lt
 800fa2a:	464c      	movlt	r4, r9
 800fa2c:	4699      	movlt	r9, r3
 800fa2e:	6927      	ldr	r7, [r4, #16]
 800fa30:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800fa34:	68a3      	ldr	r3, [r4, #8]
 800fa36:	6861      	ldr	r1, [r4, #4]
 800fa38:	eb07 060a 	add.w	r6, r7, sl
 800fa3c:	42b3      	cmp	r3, r6
 800fa3e:	b085      	sub	sp, #20
 800fa40:	bfb8      	it	lt
 800fa42:	3101      	addlt	r1, #1
 800fa44:	f7ff feda 	bl	800f7fc <_Balloc>
 800fa48:	b930      	cbnz	r0, 800fa58 <__multiply+0x44>
 800fa4a:	4602      	mov	r2, r0
 800fa4c:	4b44      	ldr	r3, [pc, #272]	; (800fb60 <__multiply+0x14c>)
 800fa4e:	4845      	ldr	r0, [pc, #276]	; (800fb64 <__multiply+0x150>)
 800fa50:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800fa54:	f000 fda2 	bl	801059c <__assert_func>
 800fa58:	f100 0514 	add.w	r5, r0, #20
 800fa5c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800fa60:	462b      	mov	r3, r5
 800fa62:	2200      	movs	r2, #0
 800fa64:	4543      	cmp	r3, r8
 800fa66:	d321      	bcc.n	800faac <__multiply+0x98>
 800fa68:	f104 0314 	add.w	r3, r4, #20
 800fa6c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800fa70:	f109 0314 	add.w	r3, r9, #20
 800fa74:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800fa78:	9202      	str	r2, [sp, #8]
 800fa7a:	1b3a      	subs	r2, r7, r4
 800fa7c:	3a15      	subs	r2, #21
 800fa7e:	f022 0203 	bic.w	r2, r2, #3
 800fa82:	3204      	adds	r2, #4
 800fa84:	f104 0115 	add.w	r1, r4, #21
 800fa88:	428f      	cmp	r7, r1
 800fa8a:	bf38      	it	cc
 800fa8c:	2204      	movcc	r2, #4
 800fa8e:	9201      	str	r2, [sp, #4]
 800fa90:	9a02      	ldr	r2, [sp, #8]
 800fa92:	9303      	str	r3, [sp, #12]
 800fa94:	429a      	cmp	r2, r3
 800fa96:	d80c      	bhi.n	800fab2 <__multiply+0x9e>
 800fa98:	2e00      	cmp	r6, #0
 800fa9a:	dd03      	ble.n	800faa4 <__multiply+0x90>
 800fa9c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d05b      	beq.n	800fb5c <__multiply+0x148>
 800faa4:	6106      	str	r6, [r0, #16]
 800faa6:	b005      	add	sp, #20
 800faa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800faac:	f843 2b04 	str.w	r2, [r3], #4
 800fab0:	e7d8      	b.n	800fa64 <__multiply+0x50>
 800fab2:	f8b3 a000 	ldrh.w	sl, [r3]
 800fab6:	f1ba 0f00 	cmp.w	sl, #0
 800faba:	d024      	beq.n	800fb06 <__multiply+0xf2>
 800fabc:	f104 0e14 	add.w	lr, r4, #20
 800fac0:	46a9      	mov	r9, r5
 800fac2:	f04f 0c00 	mov.w	ip, #0
 800fac6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800faca:	f8d9 1000 	ldr.w	r1, [r9]
 800face:	fa1f fb82 	uxth.w	fp, r2
 800fad2:	b289      	uxth	r1, r1
 800fad4:	fb0a 110b 	mla	r1, sl, fp, r1
 800fad8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800fadc:	f8d9 2000 	ldr.w	r2, [r9]
 800fae0:	4461      	add	r1, ip
 800fae2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fae6:	fb0a c20b 	mla	r2, sl, fp, ip
 800faea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800faee:	b289      	uxth	r1, r1
 800faf0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800faf4:	4577      	cmp	r7, lr
 800faf6:	f849 1b04 	str.w	r1, [r9], #4
 800fafa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fafe:	d8e2      	bhi.n	800fac6 <__multiply+0xb2>
 800fb00:	9a01      	ldr	r2, [sp, #4]
 800fb02:	f845 c002 	str.w	ip, [r5, r2]
 800fb06:	9a03      	ldr	r2, [sp, #12]
 800fb08:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800fb0c:	3304      	adds	r3, #4
 800fb0e:	f1b9 0f00 	cmp.w	r9, #0
 800fb12:	d021      	beq.n	800fb58 <__multiply+0x144>
 800fb14:	6829      	ldr	r1, [r5, #0]
 800fb16:	f104 0c14 	add.w	ip, r4, #20
 800fb1a:	46ae      	mov	lr, r5
 800fb1c:	f04f 0a00 	mov.w	sl, #0
 800fb20:	f8bc b000 	ldrh.w	fp, [ip]
 800fb24:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800fb28:	fb09 220b 	mla	r2, r9, fp, r2
 800fb2c:	4452      	add	r2, sl
 800fb2e:	b289      	uxth	r1, r1
 800fb30:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800fb34:	f84e 1b04 	str.w	r1, [lr], #4
 800fb38:	f85c 1b04 	ldr.w	r1, [ip], #4
 800fb3c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800fb40:	f8be 1000 	ldrh.w	r1, [lr]
 800fb44:	fb09 110a 	mla	r1, r9, sl, r1
 800fb48:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800fb4c:	4567      	cmp	r7, ip
 800fb4e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800fb52:	d8e5      	bhi.n	800fb20 <__multiply+0x10c>
 800fb54:	9a01      	ldr	r2, [sp, #4]
 800fb56:	50a9      	str	r1, [r5, r2]
 800fb58:	3504      	adds	r5, #4
 800fb5a:	e799      	b.n	800fa90 <__multiply+0x7c>
 800fb5c:	3e01      	subs	r6, #1
 800fb5e:	e79b      	b.n	800fa98 <__multiply+0x84>
 800fb60:	08018694 	.word	0x08018694
 800fb64:	080186a5 	.word	0x080186a5

0800fb68 <__pow5mult>:
 800fb68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb6c:	4615      	mov	r5, r2
 800fb6e:	f012 0203 	ands.w	r2, r2, #3
 800fb72:	4606      	mov	r6, r0
 800fb74:	460f      	mov	r7, r1
 800fb76:	d007      	beq.n	800fb88 <__pow5mult+0x20>
 800fb78:	4c25      	ldr	r4, [pc, #148]	; (800fc10 <__pow5mult+0xa8>)
 800fb7a:	3a01      	subs	r2, #1
 800fb7c:	2300      	movs	r3, #0
 800fb7e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fb82:	f7ff fe9d 	bl	800f8c0 <__multadd>
 800fb86:	4607      	mov	r7, r0
 800fb88:	10ad      	asrs	r5, r5, #2
 800fb8a:	d03d      	beq.n	800fc08 <__pow5mult+0xa0>
 800fb8c:	69f4      	ldr	r4, [r6, #28]
 800fb8e:	b97c      	cbnz	r4, 800fbb0 <__pow5mult+0x48>
 800fb90:	2010      	movs	r0, #16
 800fb92:	f7fd fe99 	bl	800d8c8 <malloc>
 800fb96:	4602      	mov	r2, r0
 800fb98:	61f0      	str	r0, [r6, #28]
 800fb9a:	b928      	cbnz	r0, 800fba8 <__pow5mult+0x40>
 800fb9c:	4b1d      	ldr	r3, [pc, #116]	; (800fc14 <__pow5mult+0xac>)
 800fb9e:	481e      	ldr	r0, [pc, #120]	; (800fc18 <__pow5mult+0xb0>)
 800fba0:	f240 11b3 	movw	r1, #435	; 0x1b3
 800fba4:	f000 fcfa 	bl	801059c <__assert_func>
 800fba8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fbac:	6004      	str	r4, [r0, #0]
 800fbae:	60c4      	str	r4, [r0, #12]
 800fbb0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800fbb4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fbb8:	b94c      	cbnz	r4, 800fbce <__pow5mult+0x66>
 800fbba:	f240 2171 	movw	r1, #625	; 0x271
 800fbbe:	4630      	mov	r0, r6
 800fbc0:	f7ff ff12 	bl	800f9e8 <__i2b>
 800fbc4:	2300      	movs	r3, #0
 800fbc6:	f8c8 0008 	str.w	r0, [r8, #8]
 800fbca:	4604      	mov	r4, r0
 800fbcc:	6003      	str	r3, [r0, #0]
 800fbce:	f04f 0900 	mov.w	r9, #0
 800fbd2:	07eb      	lsls	r3, r5, #31
 800fbd4:	d50a      	bpl.n	800fbec <__pow5mult+0x84>
 800fbd6:	4639      	mov	r1, r7
 800fbd8:	4622      	mov	r2, r4
 800fbda:	4630      	mov	r0, r6
 800fbdc:	f7ff ff1a 	bl	800fa14 <__multiply>
 800fbe0:	4639      	mov	r1, r7
 800fbe2:	4680      	mov	r8, r0
 800fbe4:	4630      	mov	r0, r6
 800fbe6:	f7ff fe49 	bl	800f87c <_Bfree>
 800fbea:	4647      	mov	r7, r8
 800fbec:	106d      	asrs	r5, r5, #1
 800fbee:	d00b      	beq.n	800fc08 <__pow5mult+0xa0>
 800fbf0:	6820      	ldr	r0, [r4, #0]
 800fbf2:	b938      	cbnz	r0, 800fc04 <__pow5mult+0x9c>
 800fbf4:	4622      	mov	r2, r4
 800fbf6:	4621      	mov	r1, r4
 800fbf8:	4630      	mov	r0, r6
 800fbfa:	f7ff ff0b 	bl	800fa14 <__multiply>
 800fbfe:	6020      	str	r0, [r4, #0]
 800fc00:	f8c0 9000 	str.w	r9, [r0]
 800fc04:	4604      	mov	r4, r0
 800fc06:	e7e4      	b.n	800fbd2 <__pow5mult+0x6a>
 800fc08:	4638      	mov	r0, r7
 800fc0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fc0e:	bf00      	nop
 800fc10:	080187f0 	.word	0x080187f0
 800fc14:	08018625 	.word	0x08018625
 800fc18:	080186a5 	.word	0x080186a5

0800fc1c <__lshift>:
 800fc1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc20:	460c      	mov	r4, r1
 800fc22:	6849      	ldr	r1, [r1, #4]
 800fc24:	6923      	ldr	r3, [r4, #16]
 800fc26:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fc2a:	68a3      	ldr	r3, [r4, #8]
 800fc2c:	4607      	mov	r7, r0
 800fc2e:	4691      	mov	r9, r2
 800fc30:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fc34:	f108 0601 	add.w	r6, r8, #1
 800fc38:	42b3      	cmp	r3, r6
 800fc3a:	db0b      	blt.n	800fc54 <__lshift+0x38>
 800fc3c:	4638      	mov	r0, r7
 800fc3e:	f7ff fddd 	bl	800f7fc <_Balloc>
 800fc42:	4605      	mov	r5, r0
 800fc44:	b948      	cbnz	r0, 800fc5a <__lshift+0x3e>
 800fc46:	4602      	mov	r2, r0
 800fc48:	4b28      	ldr	r3, [pc, #160]	; (800fcec <__lshift+0xd0>)
 800fc4a:	4829      	ldr	r0, [pc, #164]	; (800fcf0 <__lshift+0xd4>)
 800fc4c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800fc50:	f000 fca4 	bl	801059c <__assert_func>
 800fc54:	3101      	adds	r1, #1
 800fc56:	005b      	lsls	r3, r3, #1
 800fc58:	e7ee      	b.n	800fc38 <__lshift+0x1c>
 800fc5a:	2300      	movs	r3, #0
 800fc5c:	f100 0114 	add.w	r1, r0, #20
 800fc60:	f100 0210 	add.w	r2, r0, #16
 800fc64:	4618      	mov	r0, r3
 800fc66:	4553      	cmp	r3, sl
 800fc68:	db33      	blt.n	800fcd2 <__lshift+0xb6>
 800fc6a:	6920      	ldr	r0, [r4, #16]
 800fc6c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fc70:	f104 0314 	add.w	r3, r4, #20
 800fc74:	f019 091f 	ands.w	r9, r9, #31
 800fc78:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fc7c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fc80:	d02b      	beq.n	800fcda <__lshift+0xbe>
 800fc82:	f1c9 0e20 	rsb	lr, r9, #32
 800fc86:	468a      	mov	sl, r1
 800fc88:	2200      	movs	r2, #0
 800fc8a:	6818      	ldr	r0, [r3, #0]
 800fc8c:	fa00 f009 	lsl.w	r0, r0, r9
 800fc90:	4310      	orrs	r0, r2
 800fc92:	f84a 0b04 	str.w	r0, [sl], #4
 800fc96:	f853 2b04 	ldr.w	r2, [r3], #4
 800fc9a:	459c      	cmp	ip, r3
 800fc9c:	fa22 f20e 	lsr.w	r2, r2, lr
 800fca0:	d8f3      	bhi.n	800fc8a <__lshift+0x6e>
 800fca2:	ebac 0304 	sub.w	r3, ip, r4
 800fca6:	3b15      	subs	r3, #21
 800fca8:	f023 0303 	bic.w	r3, r3, #3
 800fcac:	3304      	adds	r3, #4
 800fcae:	f104 0015 	add.w	r0, r4, #21
 800fcb2:	4584      	cmp	ip, r0
 800fcb4:	bf38      	it	cc
 800fcb6:	2304      	movcc	r3, #4
 800fcb8:	50ca      	str	r2, [r1, r3]
 800fcba:	b10a      	cbz	r2, 800fcc0 <__lshift+0xa4>
 800fcbc:	f108 0602 	add.w	r6, r8, #2
 800fcc0:	3e01      	subs	r6, #1
 800fcc2:	4638      	mov	r0, r7
 800fcc4:	612e      	str	r6, [r5, #16]
 800fcc6:	4621      	mov	r1, r4
 800fcc8:	f7ff fdd8 	bl	800f87c <_Bfree>
 800fccc:	4628      	mov	r0, r5
 800fcce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fcd2:	f842 0f04 	str.w	r0, [r2, #4]!
 800fcd6:	3301      	adds	r3, #1
 800fcd8:	e7c5      	b.n	800fc66 <__lshift+0x4a>
 800fcda:	3904      	subs	r1, #4
 800fcdc:	f853 2b04 	ldr.w	r2, [r3], #4
 800fce0:	f841 2f04 	str.w	r2, [r1, #4]!
 800fce4:	459c      	cmp	ip, r3
 800fce6:	d8f9      	bhi.n	800fcdc <__lshift+0xc0>
 800fce8:	e7ea      	b.n	800fcc0 <__lshift+0xa4>
 800fcea:	bf00      	nop
 800fcec:	08018694 	.word	0x08018694
 800fcf0:	080186a5 	.word	0x080186a5

0800fcf4 <__mcmp>:
 800fcf4:	b530      	push	{r4, r5, lr}
 800fcf6:	6902      	ldr	r2, [r0, #16]
 800fcf8:	690c      	ldr	r4, [r1, #16]
 800fcfa:	1b12      	subs	r2, r2, r4
 800fcfc:	d10e      	bne.n	800fd1c <__mcmp+0x28>
 800fcfe:	f100 0314 	add.w	r3, r0, #20
 800fd02:	3114      	adds	r1, #20
 800fd04:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800fd08:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800fd0c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800fd10:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800fd14:	42a5      	cmp	r5, r4
 800fd16:	d003      	beq.n	800fd20 <__mcmp+0x2c>
 800fd18:	d305      	bcc.n	800fd26 <__mcmp+0x32>
 800fd1a:	2201      	movs	r2, #1
 800fd1c:	4610      	mov	r0, r2
 800fd1e:	bd30      	pop	{r4, r5, pc}
 800fd20:	4283      	cmp	r3, r0
 800fd22:	d3f3      	bcc.n	800fd0c <__mcmp+0x18>
 800fd24:	e7fa      	b.n	800fd1c <__mcmp+0x28>
 800fd26:	f04f 32ff 	mov.w	r2, #4294967295
 800fd2a:	e7f7      	b.n	800fd1c <__mcmp+0x28>

0800fd2c <__mdiff>:
 800fd2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd30:	460c      	mov	r4, r1
 800fd32:	4606      	mov	r6, r0
 800fd34:	4611      	mov	r1, r2
 800fd36:	4620      	mov	r0, r4
 800fd38:	4690      	mov	r8, r2
 800fd3a:	f7ff ffdb 	bl	800fcf4 <__mcmp>
 800fd3e:	1e05      	subs	r5, r0, #0
 800fd40:	d110      	bne.n	800fd64 <__mdiff+0x38>
 800fd42:	4629      	mov	r1, r5
 800fd44:	4630      	mov	r0, r6
 800fd46:	f7ff fd59 	bl	800f7fc <_Balloc>
 800fd4a:	b930      	cbnz	r0, 800fd5a <__mdiff+0x2e>
 800fd4c:	4b3a      	ldr	r3, [pc, #232]	; (800fe38 <__mdiff+0x10c>)
 800fd4e:	4602      	mov	r2, r0
 800fd50:	f240 2137 	movw	r1, #567	; 0x237
 800fd54:	4839      	ldr	r0, [pc, #228]	; (800fe3c <__mdiff+0x110>)
 800fd56:	f000 fc21 	bl	801059c <__assert_func>
 800fd5a:	2301      	movs	r3, #1
 800fd5c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fd60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd64:	bfa4      	itt	ge
 800fd66:	4643      	movge	r3, r8
 800fd68:	46a0      	movge	r8, r4
 800fd6a:	4630      	mov	r0, r6
 800fd6c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800fd70:	bfa6      	itte	ge
 800fd72:	461c      	movge	r4, r3
 800fd74:	2500      	movge	r5, #0
 800fd76:	2501      	movlt	r5, #1
 800fd78:	f7ff fd40 	bl	800f7fc <_Balloc>
 800fd7c:	b920      	cbnz	r0, 800fd88 <__mdiff+0x5c>
 800fd7e:	4b2e      	ldr	r3, [pc, #184]	; (800fe38 <__mdiff+0x10c>)
 800fd80:	4602      	mov	r2, r0
 800fd82:	f240 2145 	movw	r1, #581	; 0x245
 800fd86:	e7e5      	b.n	800fd54 <__mdiff+0x28>
 800fd88:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800fd8c:	6926      	ldr	r6, [r4, #16]
 800fd8e:	60c5      	str	r5, [r0, #12]
 800fd90:	f104 0914 	add.w	r9, r4, #20
 800fd94:	f108 0514 	add.w	r5, r8, #20
 800fd98:	f100 0e14 	add.w	lr, r0, #20
 800fd9c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800fda0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800fda4:	f108 0210 	add.w	r2, r8, #16
 800fda8:	46f2      	mov	sl, lr
 800fdaa:	2100      	movs	r1, #0
 800fdac:	f859 3b04 	ldr.w	r3, [r9], #4
 800fdb0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fdb4:	fa11 f88b 	uxtah	r8, r1, fp
 800fdb8:	b299      	uxth	r1, r3
 800fdba:	0c1b      	lsrs	r3, r3, #16
 800fdbc:	eba8 0801 	sub.w	r8, r8, r1
 800fdc0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fdc4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800fdc8:	fa1f f888 	uxth.w	r8, r8
 800fdcc:	1419      	asrs	r1, r3, #16
 800fdce:	454e      	cmp	r6, r9
 800fdd0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800fdd4:	f84a 3b04 	str.w	r3, [sl], #4
 800fdd8:	d8e8      	bhi.n	800fdac <__mdiff+0x80>
 800fdda:	1b33      	subs	r3, r6, r4
 800fddc:	3b15      	subs	r3, #21
 800fdde:	f023 0303 	bic.w	r3, r3, #3
 800fde2:	3304      	adds	r3, #4
 800fde4:	3415      	adds	r4, #21
 800fde6:	42a6      	cmp	r6, r4
 800fde8:	bf38      	it	cc
 800fdea:	2304      	movcc	r3, #4
 800fdec:	441d      	add	r5, r3
 800fdee:	4473      	add	r3, lr
 800fdf0:	469e      	mov	lr, r3
 800fdf2:	462e      	mov	r6, r5
 800fdf4:	4566      	cmp	r6, ip
 800fdf6:	d30e      	bcc.n	800fe16 <__mdiff+0xea>
 800fdf8:	f10c 0203 	add.w	r2, ip, #3
 800fdfc:	1b52      	subs	r2, r2, r5
 800fdfe:	f022 0203 	bic.w	r2, r2, #3
 800fe02:	3d03      	subs	r5, #3
 800fe04:	45ac      	cmp	ip, r5
 800fe06:	bf38      	it	cc
 800fe08:	2200      	movcc	r2, #0
 800fe0a:	4413      	add	r3, r2
 800fe0c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800fe10:	b17a      	cbz	r2, 800fe32 <__mdiff+0x106>
 800fe12:	6107      	str	r7, [r0, #16]
 800fe14:	e7a4      	b.n	800fd60 <__mdiff+0x34>
 800fe16:	f856 8b04 	ldr.w	r8, [r6], #4
 800fe1a:	fa11 f288 	uxtah	r2, r1, r8
 800fe1e:	1414      	asrs	r4, r2, #16
 800fe20:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800fe24:	b292      	uxth	r2, r2
 800fe26:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800fe2a:	f84e 2b04 	str.w	r2, [lr], #4
 800fe2e:	1421      	asrs	r1, r4, #16
 800fe30:	e7e0      	b.n	800fdf4 <__mdiff+0xc8>
 800fe32:	3f01      	subs	r7, #1
 800fe34:	e7ea      	b.n	800fe0c <__mdiff+0xe0>
 800fe36:	bf00      	nop
 800fe38:	08018694 	.word	0x08018694
 800fe3c:	080186a5 	.word	0x080186a5

0800fe40 <__d2b>:
 800fe40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fe44:	460f      	mov	r7, r1
 800fe46:	2101      	movs	r1, #1
 800fe48:	ec59 8b10 	vmov	r8, r9, d0
 800fe4c:	4616      	mov	r6, r2
 800fe4e:	f7ff fcd5 	bl	800f7fc <_Balloc>
 800fe52:	4604      	mov	r4, r0
 800fe54:	b930      	cbnz	r0, 800fe64 <__d2b+0x24>
 800fe56:	4602      	mov	r2, r0
 800fe58:	4b24      	ldr	r3, [pc, #144]	; (800feec <__d2b+0xac>)
 800fe5a:	4825      	ldr	r0, [pc, #148]	; (800fef0 <__d2b+0xb0>)
 800fe5c:	f240 310f 	movw	r1, #783	; 0x30f
 800fe60:	f000 fb9c 	bl	801059c <__assert_func>
 800fe64:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800fe68:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fe6c:	bb2d      	cbnz	r5, 800feba <__d2b+0x7a>
 800fe6e:	9301      	str	r3, [sp, #4]
 800fe70:	f1b8 0300 	subs.w	r3, r8, #0
 800fe74:	d026      	beq.n	800fec4 <__d2b+0x84>
 800fe76:	4668      	mov	r0, sp
 800fe78:	9300      	str	r3, [sp, #0]
 800fe7a:	f7ff fd87 	bl	800f98c <__lo0bits>
 800fe7e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800fe82:	b1e8      	cbz	r0, 800fec0 <__d2b+0x80>
 800fe84:	f1c0 0320 	rsb	r3, r0, #32
 800fe88:	fa02 f303 	lsl.w	r3, r2, r3
 800fe8c:	430b      	orrs	r3, r1
 800fe8e:	40c2      	lsrs	r2, r0
 800fe90:	6163      	str	r3, [r4, #20]
 800fe92:	9201      	str	r2, [sp, #4]
 800fe94:	9b01      	ldr	r3, [sp, #4]
 800fe96:	61a3      	str	r3, [r4, #24]
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	bf14      	ite	ne
 800fe9c:	2202      	movne	r2, #2
 800fe9e:	2201      	moveq	r2, #1
 800fea0:	6122      	str	r2, [r4, #16]
 800fea2:	b1bd      	cbz	r5, 800fed4 <__d2b+0x94>
 800fea4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800fea8:	4405      	add	r5, r0
 800feaa:	603d      	str	r5, [r7, #0]
 800feac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800feb0:	6030      	str	r0, [r6, #0]
 800feb2:	4620      	mov	r0, r4
 800feb4:	b003      	add	sp, #12
 800feb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800feba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800febe:	e7d6      	b.n	800fe6e <__d2b+0x2e>
 800fec0:	6161      	str	r1, [r4, #20]
 800fec2:	e7e7      	b.n	800fe94 <__d2b+0x54>
 800fec4:	a801      	add	r0, sp, #4
 800fec6:	f7ff fd61 	bl	800f98c <__lo0bits>
 800feca:	9b01      	ldr	r3, [sp, #4]
 800fecc:	6163      	str	r3, [r4, #20]
 800fece:	3020      	adds	r0, #32
 800fed0:	2201      	movs	r2, #1
 800fed2:	e7e5      	b.n	800fea0 <__d2b+0x60>
 800fed4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fed8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fedc:	6038      	str	r0, [r7, #0]
 800fede:	6918      	ldr	r0, [r3, #16]
 800fee0:	f7ff fd34 	bl	800f94c <__hi0bits>
 800fee4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fee8:	e7e2      	b.n	800feb0 <__d2b+0x70>
 800feea:	bf00      	nop
 800feec:	08018694 	.word	0x08018694
 800fef0:	080186a5 	.word	0x080186a5

0800fef4 <__ssputs_r>:
 800fef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fef8:	688e      	ldr	r6, [r1, #8]
 800fefa:	461f      	mov	r7, r3
 800fefc:	42be      	cmp	r6, r7
 800fefe:	680b      	ldr	r3, [r1, #0]
 800ff00:	4682      	mov	sl, r0
 800ff02:	460c      	mov	r4, r1
 800ff04:	4690      	mov	r8, r2
 800ff06:	d82c      	bhi.n	800ff62 <__ssputs_r+0x6e>
 800ff08:	898a      	ldrh	r2, [r1, #12]
 800ff0a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ff0e:	d026      	beq.n	800ff5e <__ssputs_r+0x6a>
 800ff10:	6965      	ldr	r5, [r4, #20]
 800ff12:	6909      	ldr	r1, [r1, #16]
 800ff14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ff18:	eba3 0901 	sub.w	r9, r3, r1
 800ff1c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ff20:	1c7b      	adds	r3, r7, #1
 800ff22:	444b      	add	r3, r9
 800ff24:	106d      	asrs	r5, r5, #1
 800ff26:	429d      	cmp	r5, r3
 800ff28:	bf38      	it	cc
 800ff2a:	461d      	movcc	r5, r3
 800ff2c:	0553      	lsls	r3, r2, #21
 800ff2e:	d527      	bpl.n	800ff80 <__ssputs_r+0x8c>
 800ff30:	4629      	mov	r1, r5
 800ff32:	f7fd fcf9 	bl	800d928 <_malloc_r>
 800ff36:	4606      	mov	r6, r0
 800ff38:	b360      	cbz	r0, 800ff94 <__ssputs_r+0xa0>
 800ff3a:	6921      	ldr	r1, [r4, #16]
 800ff3c:	464a      	mov	r2, r9
 800ff3e:	f7fe fd87 	bl	800ea50 <memcpy>
 800ff42:	89a3      	ldrh	r3, [r4, #12]
 800ff44:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ff48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ff4c:	81a3      	strh	r3, [r4, #12]
 800ff4e:	6126      	str	r6, [r4, #16]
 800ff50:	6165      	str	r5, [r4, #20]
 800ff52:	444e      	add	r6, r9
 800ff54:	eba5 0509 	sub.w	r5, r5, r9
 800ff58:	6026      	str	r6, [r4, #0]
 800ff5a:	60a5      	str	r5, [r4, #8]
 800ff5c:	463e      	mov	r6, r7
 800ff5e:	42be      	cmp	r6, r7
 800ff60:	d900      	bls.n	800ff64 <__ssputs_r+0x70>
 800ff62:	463e      	mov	r6, r7
 800ff64:	6820      	ldr	r0, [r4, #0]
 800ff66:	4632      	mov	r2, r6
 800ff68:	4641      	mov	r1, r8
 800ff6a:	f7fe fcc9 	bl	800e900 <memmove>
 800ff6e:	68a3      	ldr	r3, [r4, #8]
 800ff70:	1b9b      	subs	r3, r3, r6
 800ff72:	60a3      	str	r3, [r4, #8]
 800ff74:	6823      	ldr	r3, [r4, #0]
 800ff76:	4433      	add	r3, r6
 800ff78:	6023      	str	r3, [r4, #0]
 800ff7a:	2000      	movs	r0, #0
 800ff7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff80:	462a      	mov	r2, r5
 800ff82:	f000 fb3b 	bl	80105fc <_realloc_r>
 800ff86:	4606      	mov	r6, r0
 800ff88:	2800      	cmp	r0, #0
 800ff8a:	d1e0      	bne.n	800ff4e <__ssputs_r+0x5a>
 800ff8c:	6921      	ldr	r1, [r4, #16]
 800ff8e:	4650      	mov	r0, sl
 800ff90:	f7ff fbe8 	bl	800f764 <_free_r>
 800ff94:	230c      	movs	r3, #12
 800ff96:	f8ca 3000 	str.w	r3, [sl]
 800ff9a:	89a3      	ldrh	r3, [r4, #12]
 800ff9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ffa0:	81a3      	strh	r3, [r4, #12]
 800ffa2:	f04f 30ff 	mov.w	r0, #4294967295
 800ffa6:	e7e9      	b.n	800ff7c <__ssputs_r+0x88>

0800ffa8 <_svfiprintf_r>:
 800ffa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffac:	4698      	mov	r8, r3
 800ffae:	898b      	ldrh	r3, [r1, #12]
 800ffb0:	061b      	lsls	r3, r3, #24
 800ffb2:	b09d      	sub	sp, #116	; 0x74
 800ffb4:	4607      	mov	r7, r0
 800ffb6:	460d      	mov	r5, r1
 800ffb8:	4614      	mov	r4, r2
 800ffba:	d50e      	bpl.n	800ffda <_svfiprintf_r+0x32>
 800ffbc:	690b      	ldr	r3, [r1, #16]
 800ffbe:	b963      	cbnz	r3, 800ffda <_svfiprintf_r+0x32>
 800ffc0:	2140      	movs	r1, #64	; 0x40
 800ffc2:	f7fd fcb1 	bl	800d928 <_malloc_r>
 800ffc6:	6028      	str	r0, [r5, #0]
 800ffc8:	6128      	str	r0, [r5, #16]
 800ffca:	b920      	cbnz	r0, 800ffd6 <_svfiprintf_r+0x2e>
 800ffcc:	230c      	movs	r3, #12
 800ffce:	603b      	str	r3, [r7, #0]
 800ffd0:	f04f 30ff 	mov.w	r0, #4294967295
 800ffd4:	e0d0      	b.n	8010178 <_svfiprintf_r+0x1d0>
 800ffd6:	2340      	movs	r3, #64	; 0x40
 800ffd8:	616b      	str	r3, [r5, #20]
 800ffda:	2300      	movs	r3, #0
 800ffdc:	9309      	str	r3, [sp, #36]	; 0x24
 800ffde:	2320      	movs	r3, #32
 800ffe0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ffe4:	f8cd 800c 	str.w	r8, [sp, #12]
 800ffe8:	2330      	movs	r3, #48	; 0x30
 800ffea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8010190 <_svfiprintf_r+0x1e8>
 800ffee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fff2:	f04f 0901 	mov.w	r9, #1
 800fff6:	4623      	mov	r3, r4
 800fff8:	469a      	mov	sl, r3
 800fffa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fffe:	b10a      	cbz	r2, 8010004 <_svfiprintf_r+0x5c>
 8010000:	2a25      	cmp	r2, #37	; 0x25
 8010002:	d1f9      	bne.n	800fff8 <_svfiprintf_r+0x50>
 8010004:	ebba 0b04 	subs.w	fp, sl, r4
 8010008:	d00b      	beq.n	8010022 <_svfiprintf_r+0x7a>
 801000a:	465b      	mov	r3, fp
 801000c:	4622      	mov	r2, r4
 801000e:	4629      	mov	r1, r5
 8010010:	4638      	mov	r0, r7
 8010012:	f7ff ff6f 	bl	800fef4 <__ssputs_r>
 8010016:	3001      	adds	r0, #1
 8010018:	f000 80a9 	beq.w	801016e <_svfiprintf_r+0x1c6>
 801001c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801001e:	445a      	add	r2, fp
 8010020:	9209      	str	r2, [sp, #36]	; 0x24
 8010022:	f89a 3000 	ldrb.w	r3, [sl]
 8010026:	2b00      	cmp	r3, #0
 8010028:	f000 80a1 	beq.w	801016e <_svfiprintf_r+0x1c6>
 801002c:	2300      	movs	r3, #0
 801002e:	f04f 32ff 	mov.w	r2, #4294967295
 8010032:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010036:	f10a 0a01 	add.w	sl, sl, #1
 801003a:	9304      	str	r3, [sp, #16]
 801003c:	9307      	str	r3, [sp, #28]
 801003e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010042:	931a      	str	r3, [sp, #104]	; 0x68
 8010044:	4654      	mov	r4, sl
 8010046:	2205      	movs	r2, #5
 8010048:	f814 1b01 	ldrb.w	r1, [r4], #1
 801004c:	4850      	ldr	r0, [pc, #320]	; (8010190 <_svfiprintf_r+0x1e8>)
 801004e:	f7f0 f937 	bl	80002c0 <memchr>
 8010052:	9a04      	ldr	r2, [sp, #16]
 8010054:	b9d8      	cbnz	r0, 801008e <_svfiprintf_r+0xe6>
 8010056:	06d0      	lsls	r0, r2, #27
 8010058:	bf44      	itt	mi
 801005a:	2320      	movmi	r3, #32
 801005c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010060:	0711      	lsls	r1, r2, #28
 8010062:	bf44      	itt	mi
 8010064:	232b      	movmi	r3, #43	; 0x2b
 8010066:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801006a:	f89a 3000 	ldrb.w	r3, [sl]
 801006e:	2b2a      	cmp	r3, #42	; 0x2a
 8010070:	d015      	beq.n	801009e <_svfiprintf_r+0xf6>
 8010072:	9a07      	ldr	r2, [sp, #28]
 8010074:	4654      	mov	r4, sl
 8010076:	2000      	movs	r0, #0
 8010078:	f04f 0c0a 	mov.w	ip, #10
 801007c:	4621      	mov	r1, r4
 801007e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010082:	3b30      	subs	r3, #48	; 0x30
 8010084:	2b09      	cmp	r3, #9
 8010086:	d94d      	bls.n	8010124 <_svfiprintf_r+0x17c>
 8010088:	b1b0      	cbz	r0, 80100b8 <_svfiprintf_r+0x110>
 801008a:	9207      	str	r2, [sp, #28]
 801008c:	e014      	b.n	80100b8 <_svfiprintf_r+0x110>
 801008e:	eba0 0308 	sub.w	r3, r0, r8
 8010092:	fa09 f303 	lsl.w	r3, r9, r3
 8010096:	4313      	orrs	r3, r2
 8010098:	9304      	str	r3, [sp, #16]
 801009a:	46a2      	mov	sl, r4
 801009c:	e7d2      	b.n	8010044 <_svfiprintf_r+0x9c>
 801009e:	9b03      	ldr	r3, [sp, #12]
 80100a0:	1d19      	adds	r1, r3, #4
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	9103      	str	r1, [sp, #12]
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	bfbb      	ittet	lt
 80100aa:	425b      	neglt	r3, r3
 80100ac:	f042 0202 	orrlt.w	r2, r2, #2
 80100b0:	9307      	strge	r3, [sp, #28]
 80100b2:	9307      	strlt	r3, [sp, #28]
 80100b4:	bfb8      	it	lt
 80100b6:	9204      	strlt	r2, [sp, #16]
 80100b8:	7823      	ldrb	r3, [r4, #0]
 80100ba:	2b2e      	cmp	r3, #46	; 0x2e
 80100bc:	d10c      	bne.n	80100d8 <_svfiprintf_r+0x130>
 80100be:	7863      	ldrb	r3, [r4, #1]
 80100c0:	2b2a      	cmp	r3, #42	; 0x2a
 80100c2:	d134      	bne.n	801012e <_svfiprintf_r+0x186>
 80100c4:	9b03      	ldr	r3, [sp, #12]
 80100c6:	1d1a      	adds	r2, r3, #4
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	9203      	str	r2, [sp, #12]
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	bfb8      	it	lt
 80100d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80100d4:	3402      	adds	r4, #2
 80100d6:	9305      	str	r3, [sp, #20]
 80100d8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80101a0 <_svfiprintf_r+0x1f8>
 80100dc:	7821      	ldrb	r1, [r4, #0]
 80100de:	2203      	movs	r2, #3
 80100e0:	4650      	mov	r0, sl
 80100e2:	f7f0 f8ed 	bl	80002c0 <memchr>
 80100e6:	b138      	cbz	r0, 80100f8 <_svfiprintf_r+0x150>
 80100e8:	9b04      	ldr	r3, [sp, #16]
 80100ea:	eba0 000a 	sub.w	r0, r0, sl
 80100ee:	2240      	movs	r2, #64	; 0x40
 80100f0:	4082      	lsls	r2, r0
 80100f2:	4313      	orrs	r3, r2
 80100f4:	3401      	adds	r4, #1
 80100f6:	9304      	str	r3, [sp, #16]
 80100f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80100fc:	4825      	ldr	r0, [pc, #148]	; (8010194 <_svfiprintf_r+0x1ec>)
 80100fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010102:	2206      	movs	r2, #6
 8010104:	f7f0 f8dc 	bl	80002c0 <memchr>
 8010108:	2800      	cmp	r0, #0
 801010a:	d038      	beq.n	801017e <_svfiprintf_r+0x1d6>
 801010c:	4b22      	ldr	r3, [pc, #136]	; (8010198 <_svfiprintf_r+0x1f0>)
 801010e:	bb1b      	cbnz	r3, 8010158 <_svfiprintf_r+0x1b0>
 8010110:	9b03      	ldr	r3, [sp, #12]
 8010112:	3307      	adds	r3, #7
 8010114:	f023 0307 	bic.w	r3, r3, #7
 8010118:	3308      	adds	r3, #8
 801011a:	9303      	str	r3, [sp, #12]
 801011c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801011e:	4433      	add	r3, r6
 8010120:	9309      	str	r3, [sp, #36]	; 0x24
 8010122:	e768      	b.n	800fff6 <_svfiprintf_r+0x4e>
 8010124:	fb0c 3202 	mla	r2, ip, r2, r3
 8010128:	460c      	mov	r4, r1
 801012a:	2001      	movs	r0, #1
 801012c:	e7a6      	b.n	801007c <_svfiprintf_r+0xd4>
 801012e:	2300      	movs	r3, #0
 8010130:	3401      	adds	r4, #1
 8010132:	9305      	str	r3, [sp, #20]
 8010134:	4619      	mov	r1, r3
 8010136:	f04f 0c0a 	mov.w	ip, #10
 801013a:	4620      	mov	r0, r4
 801013c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010140:	3a30      	subs	r2, #48	; 0x30
 8010142:	2a09      	cmp	r2, #9
 8010144:	d903      	bls.n	801014e <_svfiprintf_r+0x1a6>
 8010146:	2b00      	cmp	r3, #0
 8010148:	d0c6      	beq.n	80100d8 <_svfiprintf_r+0x130>
 801014a:	9105      	str	r1, [sp, #20]
 801014c:	e7c4      	b.n	80100d8 <_svfiprintf_r+0x130>
 801014e:	fb0c 2101 	mla	r1, ip, r1, r2
 8010152:	4604      	mov	r4, r0
 8010154:	2301      	movs	r3, #1
 8010156:	e7f0      	b.n	801013a <_svfiprintf_r+0x192>
 8010158:	ab03      	add	r3, sp, #12
 801015a:	9300      	str	r3, [sp, #0]
 801015c:	462a      	mov	r2, r5
 801015e:	4b0f      	ldr	r3, [pc, #60]	; (801019c <_svfiprintf_r+0x1f4>)
 8010160:	a904      	add	r1, sp, #16
 8010162:	4638      	mov	r0, r7
 8010164:	f7fd fd0c 	bl	800db80 <_printf_float>
 8010168:	1c42      	adds	r2, r0, #1
 801016a:	4606      	mov	r6, r0
 801016c:	d1d6      	bne.n	801011c <_svfiprintf_r+0x174>
 801016e:	89ab      	ldrh	r3, [r5, #12]
 8010170:	065b      	lsls	r3, r3, #25
 8010172:	f53f af2d 	bmi.w	800ffd0 <_svfiprintf_r+0x28>
 8010176:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010178:	b01d      	add	sp, #116	; 0x74
 801017a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801017e:	ab03      	add	r3, sp, #12
 8010180:	9300      	str	r3, [sp, #0]
 8010182:	462a      	mov	r2, r5
 8010184:	4b05      	ldr	r3, [pc, #20]	; (801019c <_svfiprintf_r+0x1f4>)
 8010186:	a904      	add	r1, sp, #16
 8010188:	4638      	mov	r0, r7
 801018a:	f7fd ff9d 	bl	800e0c8 <_printf_i>
 801018e:	e7eb      	b.n	8010168 <_svfiprintf_r+0x1c0>
 8010190:	080187fc 	.word	0x080187fc
 8010194:	08018806 	.word	0x08018806
 8010198:	0800db81 	.word	0x0800db81
 801019c:	0800fef5 	.word	0x0800fef5
 80101a0:	08018802 	.word	0x08018802

080101a4 <__sfputc_r>:
 80101a4:	6893      	ldr	r3, [r2, #8]
 80101a6:	3b01      	subs	r3, #1
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	b410      	push	{r4}
 80101ac:	6093      	str	r3, [r2, #8]
 80101ae:	da08      	bge.n	80101c2 <__sfputc_r+0x1e>
 80101b0:	6994      	ldr	r4, [r2, #24]
 80101b2:	42a3      	cmp	r3, r4
 80101b4:	db01      	blt.n	80101ba <__sfputc_r+0x16>
 80101b6:	290a      	cmp	r1, #10
 80101b8:	d103      	bne.n	80101c2 <__sfputc_r+0x1e>
 80101ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80101be:	f7fe bb09 	b.w	800e7d4 <__swbuf_r>
 80101c2:	6813      	ldr	r3, [r2, #0]
 80101c4:	1c58      	adds	r0, r3, #1
 80101c6:	6010      	str	r0, [r2, #0]
 80101c8:	7019      	strb	r1, [r3, #0]
 80101ca:	4608      	mov	r0, r1
 80101cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80101d0:	4770      	bx	lr

080101d2 <__sfputs_r>:
 80101d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101d4:	4606      	mov	r6, r0
 80101d6:	460f      	mov	r7, r1
 80101d8:	4614      	mov	r4, r2
 80101da:	18d5      	adds	r5, r2, r3
 80101dc:	42ac      	cmp	r4, r5
 80101de:	d101      	bne.n	80101e4 <__sfputs_r+0x12>
 80101e0:	2000      	movs	r0, #0
 80101e2:	e007      	b.n	80101f4 <__sfputs_r+0x22>
 80101e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80101e8:	463a      	mov	r2, r7
 80101ea:	4630      	mov	r0, r6
 80101ec:	f7ff ffda 	bl	80101a4 <__sfputc_r>
 80101f0:	1c43      	adds	r3, r0, #1
 80101f2:	d1f3      	bne.n	80101dc <__sfputs_r+0xa>
 80101f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080101f8 <_vfiprintf_r>:
 80101f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101fc:	460d      	mov	r5, r1
 80101fe:	b09d      	sub	sp, #116	; 0x74
 8010200:	4614      	mov	r4, r2
 8010202:	4698      	mov	r8, r3
 8010204:	4606      	mov	r6, r0
 8010206:	b118      	cbz	r0, 8010210 <_vfiprintf_r+0x18>
 8010208:	6a03      	ldr	r3, [r0, #32]
 801020a:	b90b      	cbnz	r3, 8010210 <_vfiprintf_r+0x18>
 801020c:	f7fe f9ba 	bl	800e584 <__sinit>
 8010210:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010212:	07d9      	lsls	r1, r3, #31
 8010214:	d405      	bmi.n	8010222 <_vfiprintf_r+0x2a>
 8010216:	89ab      	ldrh	r3, [r5, #12]
 8010218:	059a      	lsls	r2, r3, #22
 801021a:	d402      	bmi.n	8010222 <_vfiprintf_r+0x2a>
 801021c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801021e:	f7fe fc15 	bl	800ea4c <__retarget_lock_acquire_recursive>
 8010222:	89ab      	ldrh	r3, [r5, #12]
 8010224:	071b      	lsls	r3, r3, #28
 8010226:	d501      	bpl.n	801022c <_vfiprintf_r+0x34>
 8010228:	692b      	ldr	r3, [r5, #16]
 801022a:	b99b      	cbnz	r3, 8010254 <_vfiprintf_r+0x5c>
 801022c:	4629      	mov	r1, r5
 801022e:	4630      	mov	r0, r6
 8010230:	f7fe fb0e 	bl	800e850 <__swsetup_r>
 8010234:	b170      	cbz	r0, 8010254 <_vfiprintf_r+0x5c>
 8010236:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010238:	07dc      	lsls	r4, r3, #31
 801023a:	d504      	bpl.n	8010246 <_vfiprintf_r+0x4e>
 801023c:	f04f 30ff 	mov.w	r0, #4294967295
 8010240:	b01d      	add	sp, #116	; 0x74
 8010242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010246:	89ab      	ldrh	r3, [r5, #12]
 8010248:	0598      	lsls	r0, r3, #22
 801024a:	d4f7      	bmi.n	801023c <_vfiprintf_r+0x44>
 801024c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801024e:	f7fe fbfe 	bl	800ea4e <__retarget_lock_release_recursive>
 8010252:	e7f3      	b.n	801023c <_vfiprintf_r+0x44>
 8010254:	2300      	movs	r3, #0
 8010256:	9309      	str	r3, [sp, #36]	; 0x24
 8010258:	2320      	movs	r3, #32
 801025a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801025e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010262:	2330      	movs	r3, #48	; 0x30
 8010264:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8010418 <_vfiprintf_r+0x220>
 8010268:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801026c:	f04f 0901 	mov.w	r9, #1
 8010270:	4623      	mov	r3, r4
 8010272:	469a      	mov	sl, r3
 8010274:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010278:	b10a      	cbz	r2, 801027e <_vfiprintf_r+0x86>
 801027a:	2a25      	cmp	r2, #37	; 0x25
 801027c:	d1f9      	bne.n	8010272 <_vfiprintf_r+0x7a>
 801027e:	ebba 0b04 	subs.w	fp, sl, r4
 8010282:	d00b      	beq.n	801029c <_vfiprintf_r+0xa4>
 8010284:	465b      	mov	r3, fp
 8010286:	4622      	mov	r2, r4
 8010288:	4629      	mov	r1, r5
 801028a:	4630      	mov	r0, r6
 801028c:	f7ff ffa1 	bl	80101d2 <__sfputs_r>
 8010290:	3001      	adds	r0, #1
 8010292:	f000 80a9 	beq.w	80103e8 <_vfiprintf_r+0x1f0>
 8010296:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010298:	445a      	add	r2, fp
 801029a:	9209      	str	r2, [sp, #36]	; 0x24
 801029c:	f89a 3000 	ldrb.w	r3, [sl]
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	f000 80a1 	beq.w	80103e8 <_vfiprintf_r+0x1f0>
 80102a6:	2300      	movs	r3, #0
 80102a8:	f04f 32ff 	mov.w	r2, #4294967295
 80102ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80102b0:	f10a 0a01 	add.w	sl, sl, #1
 80102b4:	9304      	str	r3, [sp, #16]
 80102b6:	9307      	str	r3, [sp, #28]
 80102b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80102bc:	931a      	str	r3, [sp, #104]	; 0x68
 80102be:	4654      	mov	r4, sl
 80102c0:	2205      	movs	r2, #5
 80102c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80102c6:	4854      	ldr	r0, [pc, #336]	; (8010418 <_vfiprintf_r+0x220>)
 80102c8:	f7ef fffa 	bl	80002c0 <memchr>
 80102cc:	9a04      	ldr	r2, [sp, #16]
 80102ce:	b9d8      	cbnz	r0, 8010308 <_vfiprintf_r+0x110>
 80102d0:	06d1      	lsls	r1, r2, #27
 80102d2:	bf44      	itt	mi
 80102d4:	2320      	movmi	r3, #32
 80102d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80102da:	0713      	lsls	r3, r2, #28
 80102dc:	bf44      	itt	mi
 80102de:	232b      	movmi	r3, #43	; 0x2b
 80102e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80102e4:	f89a 3000 	ldrb.w	r3, [sl]
 80102e8:	2b2a      	cmp	r3, #42	; 0x2a
 80102ea:	d015      	beq.n	8010318 <_vfiprintf_r+0x120>
 80102ec:	9a07      	ldr	r2, [sp, #28]
 80102ee:	4654      	mov	r4, sl
 80102f0:	2000      	movs	r0, #0
 80102f2:	f04f 0c0a 	mov.w	ip, #10
 80102f6:	4621      	mov	r1, r4
 80102f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80102fc:	3b30      	subs	r3, #48	; 0x30
 80102fe:	2b09      	cmp	r3, #9
 8010300:	d94d      	bls.n	801039e <_vfiprintf_r+0x1a6>
 8010302:	b1b0      	cbz	r0, 8010332 <_vfiprintf_r+0x13a>
 8010304:	9207      	str	r2, [sp, #28]
 8010306:	e014      	b.n	8010332 <_vfiprintf_r+0x13a>
 8010308:	eba0 0308 	sub.w	r3, r0, r8
 801030c:	fa09 f303 	lsl.w	r3, r9, r3
 8010310:	4313      	orrs	r3, r2
 8010312:	9304      	str	r3, [sp, #16]
 8010314:	46a2      	mov	sl, r4
 8010316:	e7d2      	b.n	80102be <_vfiprintf_r+0xc6>
 8010318:	9b03      	ldr	r3, [sp, #12]
 801031a:	1d19      	adds	r1, r3, #4
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	9103      	str	r1, [sp, #12]
 8010320:	2b00      	cmp	r3, #0
 8010322:	bfbb      	ittet	lt
 8010324:	425b      	neglt	r3, r3
 8010326:	f042 0202 	orrlt.w	r2, r2, #2
 801032a:	9307      	strge	r3, [sp, #28]
 801032c:	9307      	strlt	r3, [sp, #28]
 801032e:	bfb8      	it	lt
 8010330:	9204      	strlt	r2, [sp, #16]
 8010332:	7823      	ldrb	r3, [r4, #0]
 8010334:	2b2e      	cmp	r3, #46	; 0x2e
 8010336:	d10c      	bne.n	8010352 <_vfiprintf_r+0x15a>
 8010338:	7863      	ldrb	r3, [r4, #1]
 801033a:	2b2a      	cmp	r3, #42	; 0x2a
 801033c:	d134      	bne.n	80103a8 <_vfiprintf_r+0x1b0>
 801033e:	9b03      	ldr	r3, [sp, #12]
 8010340:	1d1a      	adds	r2, r3, #4
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	9203      	str	r2, [sp, #12]
 8010346:	2b00      	cmp	r3, #0
 8010348:	bfb8      	it	lt
 801034a:	f04f 33ff 	movlt.w	r3, #4294967295
 801034e:	3402      	adds	r4, #2
 8010350:	9305      	str	r3, [sp, #20]
 8010352:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8010428 <_vfiprintf_r+0x230>
 8010356:	7821      	ldrb	r1, [r4, #0]
 8010358:	2203      	movs	r2, #3
 801035a:	4650      	mov	r0, sl
 801035c:	f7ef ffb0 	bl	80002c0 <memchr>
 8010360:	b138      	cbz	r0, 8010372 <_vfiprintf_r+0x17a>
 8010362:	9b04      	ldr	r3, [sp, #16]
 8010364:	eba0 000a 	sub.w	r0, r0, sl
 8010368:	2240      	movs	r2, #64	; 0x40
 801036a:	4082      	lsls	r2, r0
 801036c:	4313      	orrs	r3, r2
 801036e:	3401      	adds	r4, #1
 8010370:	9304      	str	r3, [sp, #16]
 8010372:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010376:	4829      	ldr	r0, [pc, #164]	; (801041c <_vfiprintf_r+0x224>)
 8010378:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801037c:	2206      	movs	r2, #6
 801037e:	f7ef ff9f 	bl	80002c0 <memchr>
 8010382:	2800      	cmp	r0, #0
 8010384:	d03f      	beq.n	8010406 <_vfiprintf_r+0x20e>
 8010386:	4b26      	ldr	r3, [pc, #152]	; (8010420 <_vfiprintf_r+0x228>)
 8010388:	bb1b      	cbnz	r3, 80103d2 <_vfiprintf_r+0x1da>
 801038a:	9b03      	ldr	r3, [sp, #12]
 801038c:	3307      	adds	r3, #7
 801038e:	f023 0307 	bic.w	r3, r3, #7
 8010392:	3308      	adds	r3, #8
 8010394:	9303      	str	r3, [sp, #12]
 8010396:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010398:	443b      	add	r3, r7
 801039a:	9309      	str	r3, [sp, #36]	; 0x24
 801039c:	e768      	b.n	8010270 <_vfiprintf_r+0x78>
 801039e:	fb0c 3202 	mla	r2, ip, r2, r3
 80103a2:	460c      	mov	r4, r1
 80103a4:	2001      	movs	r0, #1
 80103a6:	e7a6      	b.n	80102f6 <_vfiprintf_r+0xfe>
 80103a8:	2300      	movs	r3, #0
 80103aa:	3401      	adds	r4, #1
 80103ac:	9305      	str	r3, [sp, #20]
 80103ae:	4619      	mov	r1, r3
 80103b0:	f04f 0c0a 	mov.w	ip, #10
 80103b4:	4620      	mov	r0, r4
 80103b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80103ba:	3a30      	subs	r2, #48	; 0x30
 80103bc:	2a09      	cmp	r2, #9
 80103be:	d903      	bls.n	80103c8 <_vfiprintf_r+0x1d0>
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d0c6      	beq.n	8010352 <_vfiprintf_r+0x15a>
 80103c4:	9105      	str	r1, [sp, #20]
 80103c6:	e7c4      	b.n	8010352 <_vfiprintf_r+0x15a>
 80103c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80103cc:	4604      	mov	r4, r0
 80103ce:	2301      	movs	r3, #1
 80103d0:	e7f0      	b.n	80103b4 <_vfiprintf_r+0x1bc>
 80103d2:	ab03      	add	r3, sp, #12
 80103d4:	9300      	str	r3, [sp, #0]
 80103d6:	462a      	mov	r2, r5
 80103d8:	4b12      	ldr	r3, [pc, #72]	; (8010424 <_vfiprintf_r+0x22c>)
 80103da:	a904      	add	r1, sp, #16
 80103dc:	4630      	mov	r0, r6
 80103de:	f7fd fbcf 	bl	800db80 <_printf_float>
 80103e2:	4607      	mov	r7, r0
 80103e4:	1c78      	adds	r0, r7, #1
 80103e6:	d1d6      	bne.n	8010396 <_vfiprintf_r+0x19e>
 80103e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80103ea:	07d9      	lsls	r1, r3, #31
 80103ec:	d405      	bmi.n	80103fa <_vfiprintf_r+0x202>
 80103ee:	89ab      	ldrh	r3, [r5, #12]
 80103f0:	059a      	lsls	r2, r3, #22
 80103f2:	d402      	bmi.n	80103fa <_vfiprintf_r+0x202>
 80103f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80103f6:	f7fe fb2a 	bl	800ea4e <__retarget_lock_release_recursive>
 80103fa:	89ab      	ldrh	r3, [r5, #12]
 80103fc:	065b      	lsls	r3, r3, #25
 80103fe:	f53f af1d 	bmi.w	801023c <_vfiprintf_r+0x44>
 8010402:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010404:	e71c      	b.n	8010240 <_vfiprintf_r+0x48>
 8010406:	ab03      	add	r3, sp, #12
 8010408:	9300      	str	r3, [sp, #0]
 801040a:	462a      	mov	r2, r5
 801040c:	4b05      	ldr	r3, [pc, #20]	; (8010424 <_vfiprintf_r+0x22c>)
 801040e:	a904      	add	r1, sp, #16
 8010410:	4630      	mov	r0, r6
 8010412:	f7fd fe59 	bl	800e0c8 <_printf_i>
 8010416:	e7e4      	b.n	80103e2 <_vfiprintf_r+0x1ea>
 8010418:	080187fc 	.word	0x080187fc
 801041c:	08018806 	.word	0x08018806
 8010420:	0800db81 	.word	0x0800db81
 8010424:	080101d3 	.word	0x080101d3
 8010428:	08018802 	.word	0x08018802

0801042c <__swhatbuf_r>:
 801042c:	b570      	push	{r4, r5, r6, lr}
 801042e:	460c      	mov	r4, r1
 8010430:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010434:	2900      	cmp	r1, #0
 8010436:	b096      	sub	sp, #88	; 0x58
 8010438:	4615      	mov	r5, r2
 801043a:	461e      	mov	r6, r3
 801043c:	da0d      	bge.n	801045a <__swhatbuf_r+0x2e>
 801043e:	89a3      	ldrh	r3, [r4, #12]
 8010440:	f013 0f80 	tst.w	r3, #128	; 0x80
 8010444:	f04f 0100 	mov.w	r1, #0
 8010448:	bf0c      	ite	eq
 801044a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801044e:	2340      	movne	r3, #64	; 0x40
 8010450:	2000      	movs	r0, #0
 8010452:	6031      	str	r1, [r6, #0]
 8010454:	602b      	str	r3, [r5, #0]
 8010456:	b016      	add	sp, #88	; 0x58
 8010458:	bd70      	pop	{r4, r5, r6, pc}
 801045a:	466a      	mov	r2, sp
 801045c:	f000 f87c 	bl	8010558 <_fstat_r>
 8010460:	2800      	cmp	r0, #0
 8010462:	dbec      	blt.n	801043e <__swhatbuf_r+0x12>
 8010464:	9901      	ldr	r1, [sp, #4]
 8010466:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801046a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801046e:	4259      	negs	r1, r3
 8010470:	4159      	adcs	r1, r3
 8010472:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010476:	e7eb      	b.n	8010450 <__swhatbuf_r+0x24>

08010478 <__smakebuf_r>:
 8010478:	898b      	ldrh	r3, [r1, #12]
 801047a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801047c:	079d      	lsls	r5, r3, #30
 801047e:	4606      	mov	r6, r0
 8010480:	460c      	mov	r4, r1
 8010482:	d507      	bpl.n	8010494 <__smakebuf_r+0x1c>
 8010484:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010488:	6023      	str	r3, [r4, #0]
 801048a:	6123      	str	r3, [r4, #16]
 801048c:	2301      	movs	r3, #1
 801048e:	6163      	str	r3, [r4, #20]
 8010490:	b002      	add	sp, #8
 8010492:	bd70      	pop	{r4, r5, r6, pc}
 8010494:	ab01      	add	r3, sp, #4
 8010496:	466a      	mov	r2, sp
 8010498:	f7ff ffc8 	bl	801042c <__swhatbuf_r>
 801049c:	9900      	ldr	r1, [sp, #0]
 801049e:	4605      	mov	r5, r0
 80104a0:	4630      	mov	r0, r6
 80104a2:	f7fd fa41 	bl	800d928 <_malloc_r>
 80104a6:	b948      	cbnz	r0, 80104bc <__smakebuf_r+0x44>
 80104a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80104ac:	059a      	lsls	r2, r3, #22
 80104ae:	d4ef      	bmi.n	8010490 <__smakebuf_r+0x18>
 80104b0:	f023 0303 	bic.w	r3, r3, #3
 80104b4:	f043 0302 	orr.w	r3, r3, #2
 80104b8:	81a3      	strh	r3, [r4, #12]
 80104ba:	e7e3      	b.n	8010484 <__smakebuf_r+0xc>
 80104bc:	89a3      	ldrh	r3, [r4, #12]
 80104be:	6020      	str	r0, [r4, #0]
 80104c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80104c4:	81a3      	strh	r3, [r4, #12]
 80104c6:	9b00      	ldr	r3, [sp, #0]
 80104c8:	6163      	str	r3, [r4, #20]
 80104ca:	9b01      	ldr	r3, [sp, #4]
 80104cc:	6120      	str	r0, [r4, #16]
 80104ce:	b15b      	cbz	r3, 80104e8 <__smakebuf_r+0x70>
 80104d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80104d4:	4630      	mov	r0, r6
 80104d6:	f000 f851 	bl	801057c <_isatty_r>
 80104da:	b128      	cbz	r0, 80104e8 <__smakebuf_r+0x70>
 80104dc:	89a3      	ldrh	r3, [r4, #12]
 80104de:	f023 0303 	bic.w	r3, r3, #3
 80104e2:	f043 0301 	orr.w	r3, r3, #1
 80104e6:	81a3      	strh	r3, [r4, #12]
 80104e8:	89a3      	ldrh	r3, [r4, #12]
 80104ea:	431d      	orrs	r5, r3
 80104ec:	81a5      	strh	r5, [r4, #12]
 80104ee:	e7cf      	b.n	8010490 <__smakebuf_r+0x18>

080104f0 <_putc_r>:
 80104f0:	b570      	push	{r4, r5, r6, lr}
 80104f2:	460d      	mov	r5, r1
 80104f4:	4614      	mov	r4, r2
 80104f6:	4606      	mov	r6, r0
 80104f8:	b118      	cbz	r0, 8010502 <_putc_r+0x12>
 80104fa:	6a03      	ldr	r3, [r0, #32]
 80104fc:	b90b      	cbnz	r3, 8010502 <_putc_r+0x12>
 80104fe:	f7fe f841 	bl	800e584 <__sinit>
 8010502:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010504:	07d8      	lsls	r0, r3, #31
 8010506:	d405      	bmi.n	8010514 <_putc_r+0x24>
 8010508:	89a3      	ldrh	r3, [r4, #12]
 801050a:	0599      	lsls	r1, r3, #22
 801050c:	d402      	bmi.n	8010514 <_putc_r+0x24>
 801050e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010510:	f7fe fa9c 	bl	800ea4c <__retarget_lock_acquire_recursive>
 8010514:	68a3      	ldr	r3, [r4, #8]
 8010516:	3b01      	subs	r3, #1
 8010518:	2b00      	cmp	r3, #0
 801051a:	60a3      	str	r3, [r4, #8]
 801051c:	da05      	bge.n	801052a <_putc_r+0x3a>
 801051e:	69a2      	ldr	r2, [r4, #24]
 8010520:	4293      	cmp	r3, r2
 8010522:	db12      	blt.n	801054a <_putc_r+0x5a>
 8010524:	b2eb      	uxtb	r3, r5
 8010526:	2b0a      	cmp	r3, #10
 8010528:	d00f      	beq.n	801054a <_putc_r+0x5a>
 801052a:	6823      	ldr	r3, [r4, #0]
 801052c:	1c5a      	adds	r2, r3, #1
 801052e:	6022      	str	r2, [r4, #0]
 8010530:	701d      	strb	r5, [r3, #0]
 8010532:	b2ed      	uxtb	r5, r5
 8010534:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010536:	07da      	lsls	r2, r3, #31
 8010538:	d405      	bmi.n	8010546 <_putc_r+0x56>
 801053a:	89a3      	ldrh	r3, [r4, #12]
 801053c:	059b      	lsls	r3, r3, #22
 801053e:	d402      	bmi.n	8010546 <_putc_r+0x56>
 8010540:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010542:	f7fe fa84 	bl	800ea4e <__retarget_lock_release_recursive>
 8010546:	4628      	mov	r0, r5
 8010548:	bd70      	pop	{r4, r5, r6, pc}
 801054a:	4629      	mov	r1, r5
 801054c:	4622      	mov	r2, r4
 801054e:	4630      	mov	r0, r6
 8010550:	f7fe f940 	bl	800e7d4 <__swbuf_r>
 8010554:	4605      	mov	r5, r0
 8010556:	e7ed      	b.n	8010534 <_putc_r+0x44>

08010558 <_fstat_r>:
 8010558:	b538      	push	{r3, r4, r5, lr}
 801055a:	4d07      	ldr	r5, [pc, #28]	; (8010578 <_fstat_r+0x20>)
 801055c:	2300      	movs	r3, #0
 801055e:	4604      	mov	r4, r0
 8010560:	4608      	mov	r0, r1
 8010562:	4611      	mov	r1, r2
 8010564:	602b      	str	r3, [r5, #0]
 8010566:	f7f1 fda6 	bl	80020b6 <_fstat>
 801056a:	1c43      	adds	r3, r0, #1
 801056c:	d102      	bne.n	8010574 <_fstat_r+0x1c>
 801056e:	682b      	ldr	r3, [r5, #0]
 8010570:	b103      	cbz	r3, 8010574 <_fstat_r+0x1c>
 8010572:	6023      	str	r3, [r4, #0]
 8010574:	bd38      	pop	{r3, r4, r5, pc}
 8010576:	bf00      	nop
 8010578:	20000638 	.word	0x20000638

0801057c <_isatty_r>:
 801057c:	b538      	push	{r3, r4, r5, lr}
 801057e:	4d06      	ldr	r5, [pc, #24]	; (8010598 <_isatty_r+0x1c>)
 8010580:	2300      	movs	r3, #0
 8010582:	4604      	mov	r4, r0
 8010584:	4608      	mov	r0, r1
 8010586:	602b      	str	r3, [r5, #0]
 8010588:	f7f1 fda5 	bl	80020d6 <_isatty>
 801058c:	1c43      	adds	r3, r0, #1
 801058e:	d102      	bne.n	8010596 <_isatty_r+0x1a>
 8010590:	682b      	ldr	r3, [r5, #0]
 8010592:	b103      	cbz	r3, 8010596 <_isatty_r+0x1a>
 8010594:	6023      	str	r3, [r4, #0]
 8010596:	bd38      	pop	{r3, r4, r5, pc}
 8010598:	20000638 	.word	0x20000638

0801059c <__assert_func>:
 801059c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801059e:	4614      	mov	r4, r2
 80105a0:	461a      	mov	r2, r3
 80105a2:	4b09      	ldr	r3, [pc, #36]	; (80105c8 <__assert_func+0x2c>)
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	4605      	mov	r5, r0
 80105a8:	68d8      	ldr	r0, [r3, #12]
 80105aa:	b14c      	cbz	r4, 80105c0 <__assert_func+0x24>
 80105ac:	4b07      	ldr	r3, [pc, #28]	; (80105cc <__assert_func+0x30>)
 80105ae:	9100      	str	r1, [sp, #0]
 80105b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80105b4:	4906      	ldr	r1, [pc, #24]	; (80105d0 <__assert_func+0x34>)
 80105b6:	462b      	mov	r3, r5
 80105b8:	f000 f85c 	bl	8010674 <fiprintf>
 80105bc:	f000 f86c 	bl	8010698 <abort>
 80105c0:	4b04      	ldr	r3, [pc, #16]	; (80105d4 <__assert_func+0x38>)
 80105c2:	461c      	mov	r4, r3
 80105c4:	e7f3      	b.n	80105ae <__assert_func+0x12>
 80105c6:	bf00      	nop
 80105c8:	200001e4 	.word	0x200001e4
 80105cc:	08018817 	.word	0x08018817
 80105d0:	08018824 	.word	0x08018824
 80105d4:	08018852 	.word	0x08018852

080105d8 <__ascii_mbtowc>:
 80105d8:	b082      	sub	sp, #8
 80105da:	b901      	cbnz	r1, 80105de <__ascii_mbtowc+0x6>
 80105dc:	a901      	add	r1, sp, #4
 80105de:	b142      	cbz	r2, 80105f2 <__ascii_mbtowc+0x1a>
 80105e0:	b14b      	cbz	r3, 80105f6 <__ascii_mbtowc+0x1e>
 80105e2:	7813      	ldrb	r3, [r2, #0]
 80105e4:	600b      	str	r3, [r1, #0]
 80105e6:	7812      	ldrb	r2, [r2, #0]
 80105e8:	1e10      	subs	r0, r2, #0
 80105ea:	bf18      	it	ne
 80105ec:	2001      	movne	r0, #1
 80105ee:	b002      	add	sp, #8
 80105f0:	4770      	bx	lr
 80105f2:	4610      	mov	r0, r2
 80105f4:	e7fb      	b.n	80105ee <__ascii_mbtowc+0x16>
 80105f6:	f06f 0001 	mvn.w	r0, #1
 80105fa:	e7f8      	b.n	80105ee <__ascii_mbtowc+0x16>

080105fc <_realloc_r>:
 80105fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010600:	4680      	mov	r8, r0
 8010602:	4614      	mov	r4, r2
 8010604:	460e      	mov	r6, r1
 8010606:	b921      	cbnz	r1, 8010612 <_realloc_r+0x16>
 8010608:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801060c:	4611      	mov	r1, r2
 801060e:	f7fd b98b 	b.w	800d928 <_malloc_r>
 8010612:	b92a      	cbnz	r2, 8010620 <_realloc_r+0x24>
 8010614:	f7ff f8a6 	bl	800f764 <_free_r>
 8010618:	4625      	mov	r5, r4
 801061a:	4628      	mov	r0, r5
 801061c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010620:	f000 f841 	bl	80106a6 <_malloc_usable_size_r>
 8010624:	4284      	cmp	r4, r0
 8010626:	4607      	mov	r7, r0
 8010628:	d802      	bhi.n	8010630 <_realloc_r+0x34>
 801062a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801062e:	d812      	bhi.n	8010656 <_realloc_r+0x5a>
 8010630:	4621      	mov	r1, r4
 8010632:	4640      	mov	r0, r8
 8010634:	f7fd f978 	bl	800d928 <_malloc_r>
 8010638:	4605      	mov	r5, r0
 801063a:	2800      	cmp	r0, #0
 801063c:	d0ed      	beq.n	801061a <_realloc_r+0x1e>
 801063e:	42bc      	cmp	r4, r7
 8010640:	4622      	mov	r2, r4
 8010642:	4631      	mov	r1, r6
 8010644:	bf28      	it	cs
 8010646:	463a      	movcs	r2, r7
 8010648:	f7fe fa02 	bl	800ea50 <memcpy>
 801064c:	4631      	mov	r1, r6
 801064e:	4640      	mov	r0, r8
 8010650:	f7ff f888 	bl	800f764 <_free_r>
 8010654:	e7e1      	b.n	801061a <_realloc_r+0x1e>
 8010656:	4635      	mov	r5, r6
 8010658:	e7df      	b.n	801061a <_realloc_r+0x1e>

0801065a <__ascii_wctomb>:
 801065a:	b149      	cbz	r1, 8010670 <__ascii_wctomb+0x16>
 801065c:	2aff      	cmp	r2, #255	; 0xff
 801065e:	bf85      	ittet	hi
 8010660:	238a      	movhi	r3, #138	; 0x8a
 8010662:	6003      	strhi	r3, [r0, #0]
 8010664:	700a      	strbls	r2, [r1, #0]
 8010666:	f04f 30ff 	movhi.w	r0, #4294967295
 801066a:	bf98      	it	ls
 801066c:	2001      	movls	r0, #1
 801066e:	4770      	bx	lr
 8010670:	4608      	mov	r0, r1
 8010672:	4770      	bx	lr

08010674 <fiprintf>:
 8010674:	b40e      	push	{r1, r2, r3}
 8010676:	b503      	push	{r0, r1, lr}
 8010678:	4601      	mov	r1, r0
 801067a:	ab03      	add	r3, sp, #12
 801067c:	4805      	ldr	r0, [pc, #20]	; (8010694 <fiprintf+0x20>)
 801067e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010682:	6800      	ldr	r0, [r0, #0]
 8010684:	9301      	str	r3, [sp, #4]
 8010686:	f7ff fdb7 	bl	80101f8 <_vfiprintf_r>
 801068a:	b002      	add	sp, #8
 801068c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010690:	b003      	add	sp, #12
 8010692:	4770      	bx	lr
 8010694:	200001e4 	.word	0x200001e4

08010698 <abort>:
 8010698:	b508      	push	{r3, lr}
 801069a:	2006      	movs	r0, #6
 801069c:	f000 f834 	bl	8010708 <raise>
 80106a0:	2001      	movs	r0, #1
 80106a2:	f7f1 fcd5 	bl	8002050 <_exit>

080106a6 <_malloc_usable_size_r>:
 80106a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80106aa:	1f18      	subs	r0, r3, #4
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	bfbc      	itt	lt
 80106b0:	580b      	ldrlt	r3, [r1, r0]
 80106b2:	18c0      	addlt	r0, r0, r3
 80106b4:	4770      	bx	lr

080106b6 <_raise_r>:
 80106b6:	291f      	cmp	r1, #31
 80106b8:	b538      	push	{r3, r4, r5, lr}
 80106ba:	4604      	mov	r4, r0
 80106bc:	460d      	mov	r5, r1
 80106be:	d904      	bls.n	80106ca <_raise_r+0x14>
 80106c0:	2316      	movs	r3, #22
 80106c2:	6003      	str	r3, [r0, #0]
 80106c4:	f04f 30ff 	mov.w	r0, #4294967295
 80106c8:	bd38      	pop	{r3, r4, r5, pc}
 80106ca:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80106cc:	b112      	cbz	r2, 80106d4 <_raise_r+0x1e>
 80106ce:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80106d2:	b94b      	cbnz	r3, 80106e8 <_raise_r+0x32>
 80106d4:	4620      	mov	r0, r4
 80106d6:	f000 f831 	bl	801073c <_getpid_r>
 80106da:	462a      	mov	r2, r5
 80106dc:	4601      	mov	r1, r0
 80106de:	4620      	mov	r0, r4
 80106e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80106e4:	f000 b818 	b.w	8010718 <_kill_r>
 80106e8:	2b01      	cmp	r3, #1
 80106ea:	d00a      	beq.n	8010702 <_raise_r+0x4c>
 80106ec:	1c59      	adds	r1, r3, #1
 80106ee:	d103      	bne.n	80106f8 <_raise_r+0x42>
 80106f0:	2316      	movs	r3, #22
 80106f2:	6003      	str	r3, [r0, #0]
 80106f4:	2001      	movs	r0, #1
 80106f6:	e7e7      	b.n	80106c8 <_raise_r+0x12>
 80106f8:	2400      	movs	r4, #0
 80106fa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80106fe:	4628      	mov	r0, r5
 8010700:	4798      	blx	r3
 8010702:	2000      	movs	r0, #0
 8010704:	e7e0      	b.n	80106c8 <_raise_r+0x12>
	...

08010708 <raise>:
 8010708:	4b02      	ldr	r3, [pc, #8]	; (8010714 <raise+0xc>)
 801070a:	4601      	mov	r1, r0
 801070c:	6818      	ldr	r0, [r3, #0]
 801070e:	f7ff bfd2 	b.w	80106b6 <_raise_r>
 8010712:	bf00      	nop
 8010714:	200001e4 	.word	0x200001e4

08010718 <_kill_r>:
 8010718:	b538      	push	{r3, r4, r5, lr}
 801071a:	4d07      	ldr	r5, [pc, #28]	; (8010738 <_kill_r+0x20>)
 801071c:	2300      	movs	r3, #0
 801071e:	4604      	mov	r4, r0
 8010720:	4608      	mov	r0, r1
 8010722:	4611      	mov	r1, r2
 8010724:	602b      	str	r3, [r5, #0]
 8010726:	f7f1 fc83 	bl	8002030 <_kill>
 801072a:	1c43      	adds	r3, r0, #1
 801072c:	d102      	bne.n	8010734 <_kill_r+0x1c>
 801072e:	682b      	ldr	r3, [r5, #0]
 8010730:	b103      	cbz	r3, 8010734 <_kill_r+0x1c>
 8010732:	6023      	str	r3, [r4, #0]
 8010734:	bd38      	pop	{r3, r4, r5, pc}
 8010736:	bf00      	nop
 8010738:	20000638 	.word	0x20000638

0801073c <_getpid_r>:
 801073c:	f7f1 bc70 	b.w	8002020 <_getpid>

08010740 <acos>:
 8010740:	b538      	push	{r3, r4, r5, lr}
 8010742:	ed2d 8b02 	vpush	{d8}
 8010746:	ec55 4b10 	vmov	r4, r5, d0
 801074a:	f000 fc35 	bl	8010fb8 <__ieee754_acos>
 801074e:	4622      	mov	r2, r4
 8010750:	462b      	mov	r3, r5
 8010752:	4620      	mov	r0, r4
 8010754:	4629      	mov	r1, r5
 8010756:	eeb0 8a40 	vmov.f32	s16, s0
 801075a:	eef0 8a60 	vmov.f32	s17, s1
 801075e:	f7f0 fa5d 	bl	8000c1c <__aeabi_dcmpun>
 8010762:	b9a8      	cbnz	r0, 8010790 <acos+0x50>
 8010764:	ec45 4b10 	vmov	d0, r4, r5
 8010768:	f000 f8ba 	bl	80108e0 <fabs>
 801076c:	4b0c      	ldr	r3, [pc, #48]	; (80107a0 <acos+0x60>)
 801076e:	ec51 0b10 	vmov	r0, r1, d0
 8010772:	2200      	movs	r2, #0
 8010774:	f7f0 fa48 	bl	8000c08 <__aeabi_dcmpgt>
 8010778:	b150      	cbz	r0, 8010790 <acos+0x50>
 801077a:	f7fe f93d 	bl	800e9f8 <__errno>
 801077e:	ecbd 8b02 	vpop	{d8}
 8010782:	2321      	movs	r3, #33	; 0x21
 8010784:	6003      	str	r3, [r0, #0]
 8010786:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801078a:	4806      	ldr	r0, [pc, #24]	; (80107a4 <acos+0x64>)
 801078c:	f000 b948 	b.w	8010a20 <nan>
 8010790:	eeb0 0a48 	vmov.f32	s0, s16
 8010794:	eef0 0a68 	vmov.f32	s1, s17
 8010798:	ecbd 8b02 	vpop	{d8}
 801079c:	bd38      	pop	{r3, r4, r5, pc}
 801079e:	bf00      	nop
 80107a0:	3ff00000 	.word	0x3ff00000
 80107a4:	08018852 	.word	0x08018852

080107a8 <pow>:
 80107a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107aa:	ed2d 8b02 	vpush	{d8}
 80107ae:	eeb0 8a40 	vmov.f32	s16, s0
 80107b2:	eef0 8a60 	vmov.f32	s17, s1
 80107b6:	ec55 4b11 	vmov	r4, r5, d1
 80107ba:	f000 fe5d 	bl	8011478 <__ieee754_pow>
 80107be:	4622      	mov	r2, r4
 80107c0:	462b      	mov	r3, r5
 80107c2:	4620      	mov	r0, r4
 80107c4:	4629      	mov	r1, r5
 80107c6:	ec57 6b10 	vmov	r6, r7, d0
 80107ca:	f7f0 fa27 	bl	8000c1c <__aeabi_dcmpun>
 80107ce:	2800      	cmp	r0, #0
 80107d0:	d13b      	bne.n	801084a <pow+0xa2>
 80107d2:	ec51 0b18 	vmov	r0, r1, d8
 80107d6:	2200      	movs	r2, #0
 80107d8:	2300      	movs	r3, #0
 80107da:	f7f0 f9ed 	bl	8000bb8 <__aeabi_dcmpeq>
 80107de:	b1b8      	cbz	r0, 8010810 <pow+0x68>
 80107e0:	2200      	movs	r2, #0
 80107e2:	2300      	movs	r3, #0
 80107e4:	4620      	mov	r0, r4
 80107e6:	4629      	mov	r1, r5
 80107e8:	f7f0 f9e6 	bl	8000bb8 <__aeabi_dcmpeq>
 80107ec:	2800      	cmp	r0, #0
 80107ee:	d146      	bne.n	801087e <pow+0xd6>
 80107f0:	ec45 4b10 	vmov	d0, r4, r5
 80107f4:	f000 f906 	bl	8010a04 <finite>
 80107f8:	b338      	cbz	r0, 801084a <pow+0xa2>
 80107fa:	2200      	movs	r2, #0
 80107fc:	2300      	movs	r3, #0
 80107fe:	4620      	mov	r0, r4
 8010800:	4629      	mov	r1, r5
 8010802:	f7f0 f9e3 	bl	8000bcc <__aeabi_dcmplt>
 8010806:	b300      	cbz	r0, 801084a <pow+0xa2>
 8010808:	f7fe f8f6 	bl	800e9f8 <__errno>
 801080c:	2322      	movs	r3, #34	; 0x22
 801080e:	e01b      	b.n	8010848 <pow+0xa0>
 8010810:	ec47 6b10 	vmov	d0, r6, r7
 8010814:	f000 f8f6 	bl	8010a04 <finite>
 8010818:	b9e0      	cbnz	r0, 8010854 <pow+0xac>
 801081a:	eeb0 0a48 	vmov.f32	s0, s16
 801081e:	eef0 0a68 	vmov.f32	s1, s17
 8010822:	f000 f8ef 	bl	8010a04 <finite>
 8010826:	b1a8      	cbz	r0, 8010854 <pow+0xac>
 8010828:	ec45 4b10 	vmov	d0, r4, r5
 801082c:	f000 f8ea 	bl	8010a04 <finite>
 8010830:	b180      	cbz	r0, 8010854 <pow+0xac>
 8010832:	4632      	mov	r2, r6
 8010834:	463b      	mov	r3, r7
 8010836:	4630      	mov	r0, r6
 8010838:	4639      	mov	r1, r7
 801083a:	f7f0 f9ef 	bl	8000c1c <__aeabi_dcmpun>
 801083e:	2800      	cmp	r0, #0
 8010840:	d0e2      	beq.n	8010808 <pow+0x60>
 8010842:	f7fe f8d9 	bl	800e9f8 <__errno>
 8010846:	2321      	movs	r3, #33	; 0x21
 8010848:	6003      	str	r3, [r0, #0]
 801084a:	ecbd 8b02 	vpop	{d8}
 801084e:	ec47 6b10 	vmov	d0, r6, r7
 8010852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010854:	2200      	movs	r2, #0
 8010856:	2300      	movs	r3, #0
 8010858:	4630      	mov	r0, r6
 801085a:	4639      	mov	r1, r7
 801085c:	f7f0 f9ac 	bl	8000bb8 <__aeabi_dcmpeq>
 8010860:	2800      	cmp	r0, #0
 8010862:	d0f2      	beq.n	801084a <pow+0xa2>
 8010864:	eeb0 0a48 	vmov.f32	s0, s16
 8010868:	eef0 0a68 	vmov.f32	s1, s17
 801086c:	f000 f8ca 	bl	8010a04 <finite>
 8010870:	2800      	cmp	r0, #0
 8010872:	d0ea      	beq.n	801084a <pow+0xa2>
 8010874:	ec45 4b10 	vmov	d0, r4, r5
 8010878:	f000 f8c4 	bl	8010a04 <finite>
 801087c:	e7c3      	b.n	8010806 <pow+0x5e>
 801087e:	4f01      	ldr	r7, [pc, #4]	; (8010884 <pow+0xdc>)
 8010880:	2600      	movs	r6, #0
 8010882:	e7e2      	b.n	801084a <pow+0xa2>
 8010884:	3ff00000 	.word	0x3ff00000

08010888 <sqrt>:
 8010888:	b538      	push	{r3, r4, r5, lr}
 801088a:	ed2d 8b02 	vpush	{d8}
 801088e:	ec55 4b10 	vmov	r4, r5, d0
 8010892:	f000 f90b 	bl	8010aac <__ieee754_sqrt>
 8010896:	4622      	mov	r2, r4
 8010898:	462b      	mov	r3, r5
 801089a:	4620      	mov	r0, r4
 801089c:	4629      	mov	r1, r5
 801089e:	eeb0 8a40 	vmov.f32	s16, s0
 80108a2:	eef0 8a60 	vmov.f32	s17, s1
 80108a6:	f7f0 f9b9 	bl	8000c1c <__aeabi_dcmpun>
 80108aa:	b990      	cbnz	r0, 80108d2 <sqrt+0x4a>
 80108ac:	2200      	movs	r2, #0
 80108ae:	2300      	movs	r3, #0
 80108b0:	4620      	mov	r0, r4
 80108b2:	4629      	mov	r1, r5
 80108b4:	f7f0 f98a 	bl	8000bcc <__aeabi_dcmplt>
 80108b8:	b158      	cbz	r0, 80108d2 <sqrt+0x4a>
 80108ba:	f7fe f89d 	bl	800e9f8 <__errno>
 80108be:	2321      	movs	r3, #33	; 0x21
 80108c0:	6003      	str	r3, [r0, #0]
 80108c2:	2200      	movs	r2, #0
 80108c4:	2300      	movs	r3, #0
 80108c6:	4610      	mov	r0, r2
 80108c8:	4619      	mov	r1, r3
 80108ca:	f7f0 f837 	bl	800093c <__aeabi_ddiv>
 80108ce:	ec41 0b18 	vmov	d8, r0, r1
 80108d2:	eeb0 0a48 	vmov.f32	s0, s16
 80108d6:	eef0 0a68 	vmov.f32	s1, s17
 80108da:	ecbd 8b02 	vpop	{d8}
 80108de:	bd38      	pop	{r3, r4, r5, pc}

080108e0 <fabs>:
 80108e0:	ec51 0b10 	vmov	r0, r1, d0
 80108e4:	ee10 2a10 	vmov	r2, s0
 80108e8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80108ec:	ec43 2b10 	vmov	d0, r2, r3
 80108f0:	4770      	bx	lr
 80108f2:	0000      	movs	r0, r0
 80108f4:	0000      	movs	r0, r0
	...

080108f8 <sin>:
 80108f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80108fa:	ec53 2b10 	vmov	r2, r3, d0
 80108fe:	4828      	ldr	r0, [pc, #160]	; (80109a0 <sin+0xa8>)
 8010900:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8010904:	4281      	cmp	r1, r0
 8010906:	dc07      	bgt.n	8010918 <sin+0x20>
 8010908:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8010998 <sin+0xa0>
 801090c:	2000      	movs	r0, #0
 801090e:	b005      	add	sp, #20
 8010910:	f85d eb04 	ldr.w	lr, [sp], #4
 8010914:	f000 ba90 	b.w	8010e38 <__kernel_sin>
 8010918:	4822      	ldr	r0, [pc, #136]	; (80109a4 <sin+0xac>)
 801091a:	4281      	cmp	r1, r0
 801091c:	dd09      	ble.n	8010932 <sin+0x3a>
 801091e:	ee10 0a10 	vmov	r0, s0
 8010922:	4619      	mov	r1, r3
 8010924:	f7ef fd28 	bl	8000378 <__aeabi_dsub>
 8010928:	ec41 0b10 	vmov	d0, r0, r1
 801092c:	b005      	add	sp, #20
 801092e:	f85d fb04 	ldr.w	pc, [sp], #4
 8010932:	4668      	mov	r0, sp
 8010934:	f001 facc 	bl	8011ed0 <__ieee754_rem_pio2>
 8010938:	f000 0003 	and.w	r0, r0, #3
 801093c:	2801      	cmp	r0, #1
 801093e:	d00c      	beq.n	801095a <sin+0x62>
 8010940:	2802      	cmp	r0, #2
 8010942:	d011      	beq.n	8010968 <sin+0x70>
 8010944:	b9f0      	cbnz	r0, 8010984 <sin+0x8c>
 8010946:	ed9d 1b02 	vldr	d1, [sp, #8]
 801094a:	ed9d 0b00 	vldr	d0, [sp]
 801094e:	2001      	movs	r0, #1
 8010950:	f000 fa72 	bl	8010e38 <__kernel_sin>
 8010954:	ec51 0b10 	vmov	r0, r1, d0
 8010958:	e7e6      	b.n	8010928 <sin+0x30>
 801095a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801095e:	ed9d 0b00 	vldr	d0, [sp]
 8010962:	f000 f9a1 	bl	8010ca8 <__kernel_cos>
 8010966:	e7f5      	b.n	8010954 <sin+0x5c>
 8010968:	ed9d 1b02 	vldr	d1, [sp, #8]
 801096c:	ed9d 0b00 	vldr	d0, [sp]
 8010970:	2001      	movs	r0, #1
 8010972:	f000 fa61 	bl	8010e38 <__kernel_sin>
 8010976:	ec53 2b10 	vmov	r2, r3, d0
 801097a:	ee10 0a10 	vmov	r0, s0
 801097e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010982:	e7d1      	b.n	8010928 <sin+0x30>
 8010984:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010988:	ed9d 0b00 	vldr	d0, [sp]
 801098c:	f000 f98c 	bl	8010ca8 <__kernel_cos>
 8010990:	e7f1      	b.n	8010976 <sin+0x7e>
 8010992:	bf00      	nop
 8010994:	f3af 8000 	nop.w
	...
 80109a0:	3fe921fb 	.word	0x3fe921fb
 80109a4:	7fefffff 	.word	0x7fefffff

080109a8 <log10f>:
 80109a8:	b508      	push	{r3, lr}
 80109aa:	ed2d 8b02 	vpush	{d8}
 80109ae:	eeb0 8a40 	vmov.f32	s16, s0
 80109b2:	f001 fc93 	bl	80122dc <__ieee754_log10f>
 80109b6:	eeb4 8a48 	vcmp.f32	s16, s16
 80109ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109be:	d60f      	bvs.n	80109e0 <log10f+0x38>
 80109c0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80109c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109c8:	d80a      	bhi.n	80109e0 <log10f+0x38>
 80109ca:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80109ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109d2:	d108      	bne.n	80109e6 <log10f+0x3e>
 80109d4:	f7fe f810 	bl	800e9f8 <__errno>
 80109d8:	2322      	movs	r3, #34	; 0x22
 80109da:	ed9f 0a08 	vldr	s0, [pc, #32]	; 80109fc <log10f+0x54>
 80109de:	6003      	str	r3, [r0, #0]
 80109e0:	ecbd 8b02 	vpop	{d8}
 80109e4:	bd08      	pop	{r3, pc}
 80109e6:	f7fe f807 	bl	800e9f8 <__errno>
 80109ea:	ecbd 8b02 	vpop	{d8}
 80109ee:	2321      	movs	r3, #33	; 0x21
 80109f0:	6003      	str	r3, [r0, #0]
 80109f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80109f6:	4802      	ldr	r0, [pc, #8]	; (8010a00 <log10f+0x58>)
 80109f8:	f000 b81a 	b.w	8010a30 <nanf>
 80109fc:	ff800000 	.word	0xff800000
 8010a00:	08018852 	.word	0x08018852

08010a04 <finite>:
 8010a04:	b082      	sub	sp, #8
 8010a06:	ed8d 0b00 	vstr	d0, [sp]
 8010a0a:	9801      	ldr	r0, [sp, #4]
 8010a0c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8010a10:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8010a14:	0fc0      	lsrs	r0, r0, #31
 8010a16:	b002      	add	sp, #8
 8010a18:	4770      	bx	lr
 8010a1a:	0000      	movs	r0, r0
 8010a1c:	0000      	movs	r0, r0
	...

08010a20 <nan>:
 8010a20:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010a28 <nan+0x8>
 8010a24:	4770      	bx	lr
 8010a26:	bf00      	nop
 8010a28:	00000000 	.word	0x00000000
 8010a2c:	7ff80000 	.word	0x7ff80000

08010a30 <nanf>:
 8010a30:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8010a38 <nanf+0x8>
 8010a34:	4770      	bx	lr
 8010a36:	bf00      	nop
 8010a38:	7fc00000 	.word	0x7fc00000

08010a3c <fmaxf>:
 8010a3c:	b508      	push	{r3, lr}
 8010a3e:	ed2d 8b02 	vpush	{d8}
 8010a42:	eeb0 8a40 	vmov.f32	s16, s0
 8010a46:	eef0 8a60 	vmov.f32	s17, s1
 8010a4a:	f000 f813 	bl	8010a74 <__fpclassifyf>
 8010a4e:	b148      	cbz	r0, 8010a64 <fmaxf+0x28>
 8010a50:	eeb0 0a68 	vmov.f32	s0, s17
 8010a54:	f000 f80e 	bl	8010a74 <__fpclassifyf>
 8010a58:	b130      	cbz	r0, 8010a68 <fmaxf+0x2c>
 8010a5a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8010a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a62:	dc01      	bgt.n	8010a68 <fmaxf+0x2c>
 8010a64:	eeb0 8a68 	vmov.f32	s16, s17
 8010a68:	eeb0 0a48 	vmov.f32	s0, s16
 8010a6c:	ecbd 8b02 	vpop	{d8}
 8010a70:	bd08      	pop	{r3, pc}
	...

08010a74 <__fpclassifyf>:
 8010a74:	ee10 3a10 	vmov	r3, s0
 8010a78:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 8010a7c:	d00d      	beq.n	8010a9a <__fpclassifyf+0x26>
 8010a7e:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 8010a82:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8010a86:	d30a      	bcc.n	8010a9e <__fpclassifyf+0x2a>
 8010a88:	4b07      	ldr	r3, [pc, #28]	; (8010aa8 <__fpclassifyf+0x34>)
 8010a8a:	1e42      	subs	r2, r0, #1
 8010a8c:	429a      	cmp	r2, r3
 8010a8e:	d908      	bls.n	8010aa2 <__fpclassifyf+0x2e>
 8010a90:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 8010a94:	4258      	negs	r0, r3
 8010a96:	4158      	adcs	r0, r3
 8010a98:	4770      	bx	lr
 8010a9a:	2002      	movs	r0, #2
 8010a9c:	4770      	bx	lr
 8010a9e:	2004      	movs	r0, #4
 8010aa0:	4770      	bx	lr
 8010aa2:	2003      	movs	r0, #3
 8010aa4:	4770      	bx	lr
 8010aa6:	bf00      	nop
 8010aa8:	007ffffe 	.word	0x007ffffe

08010aac <__ieee754_sqrt>:
 8010aac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ab0:	ec55 4b10 	vmov	r4, r5, d0
 8010ab4:	4e67      	ldr	r6, [pc, #412]	; (8010c54 <__ieee754_sqrt+0x1a8>)
 8010ab6:	43ae      	bics	r6, r5
 8010ab8:	ee10 0a10 	vmov	r0, s0
 8010abc:	ee10 2a10 	vmov	r2, s0
 8010ac0:	4629      	mov	r1, r5
 8010ac2:	462b      	mov	r3, r5
 8010ac4:	d10d      	bne.n	8010ae2 <__ieee754_sqrt+0x36>
 8010ac6:	f7ef fe0f 	bl	80006e8 <__aeabi_dmul>
 8010aca:	4602      	mov	r2, r0
 8010acc:	460b      	mov	r3, r1
 8010ace:	4620      	mov	r0, r4
 8010ad0:	4629      	mov	r1, r5
 8010ad2:	f7ef fc53 	bl	800037c <__adddf3>
 8010ad6:	4604      	mov	r4, r0
 8010ad8:	460d      	mov	r5, r1
 8010ada:	ec45 4b10 	vmov	d0, r4, r5
 8010ade:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ae2:	2d00      	cmp	r5, #0
 8010ae4:	dc0b      	bgt.n	8010afe <__ieee754_sqrt+0x52>
 8010ae6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010aea:	4326      	orrs	r6, r4
 8010aec:	d0f5      	beq.n	8010ada <__ieee754_sqrt+0x2e>
 8010aee:	b135      	cbz	r5, 8010afe <__ieee754_sqrt+0x52>
 8010af0:	f7ef fc42 	bl	8000378 <__aeabi_dsub>
 8010af4:	4602      	mov	r2, r0
 8010af6:	460b      	mov	r3, r1
 8010af8:	f7ef ff20 	bl	800093c <__aeabi_ddiv>
 8010afc:	e7eb      	b.n	8010ad6 <__ieee754_sqrt+0x2a>
 8010afe:	1509      	asrs	r1, r1, #20
 8010b00:	f000 808d 	beq.w	8010c1e <__ieee754_sqrt+0x172>
 8010b04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010b08:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8010b0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010b10:	07c9      	lsls	r1, r1, #31
 8010b12:	bf5c      	itt	pl
 8010b14:	005b      	lslpl	r3, r3, #1
 8010b16:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8010b1a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010b1e:	bf58      	it	pl
 8010b20:	0052      	lslpl	r2, r2, #1
 8010b22:	2500      	movs	r5, #0
 8010b24:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8010b28:	1076      	asrs	r6, r6, #1
 8010b2a:	0052      	lsls	r2, r2, #1
 8010b2c:	f04f 0e16 	mov.w	lr, #22
 8010b30:	46ac      	mov	ip, r5
 8010b32:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010b36:	eb0c 0001 	add.w	r0, ip, r1
 8010b3a:	4298      	cmp	r0, r3
 8010b3c:	bfde      	ittt	le
 8010b3e:	1a1b      	suble	r3, r3, r0
 8010b40:	eb00 0c01 	addle.w	ip, r0, r1
 8010b44:	186d      	addle	r5, r5, r1
 8010b46:	005b      	lsls	r3, r3, #1
 8010b48:	f1be 0e01 	subs.w	lr, lr, #1
 8010b4c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8010b50:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8010b54:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8010b58:	d1ed      	bne.n	8010b36 <__ieee754_sqrt+0x8a>
 8010b5a:	4674      	mov	r4, lr
 8010b5c:	2720      	movs	r7, #32
 8010b5e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8010b62:	4563      	cmp	r3, ip
 8010b64:	eb01 000e 	add.w	r0, r1, lr
 8010b68:	dc02      	bgt.n	8010b70 <__ieee754_sqrt+0xc4>
 8010b6a:	d113      	bne.n	8010b94 <__ieee754_sqrt+0xe8>
 8010b6c:	4290      	cmp	r0, r2
 8010b6e:	d811      	bhi.n	8010b94 <__ieee754_sqrt+0xe8>
 8010b70:	2800      	cmp	r0, #0
 8010b72:	eb00 0e01 	add.w	lr, r0, r1
 8010b76:	da57      	bge.n	8010c28 <__ieee754_sqrt+0x17c>
 8010b78:	f1be 0f00 	cmp.w	lr, #0
 8010b7c:	db54      	blt.n	8010c28 <__ieee754_sqrt+0x17c>
 8010b7e:	f10c 0801 	add.w	r8, ip, #1
 8010b82:	eba3 030c 	sub.w	r3, r3, ip
 8010b86:	4290      	cmp	r0, r2
 8010b88:	bf88      	it	hi
 8010b8a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8010b8e:	1a12      	subs	r2, r2, r0
 8010b90:	440c      	add	r4, r1
 8010b92:	46c4      	mov	ip, r8
 8010b94:	005b      	lsls	r3, r3, #1
 8010b96:	3f01      	subs	r7, #1
 8010b98:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8010b9c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8010ba0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8010ba4:	d1dd      	bne.n	8010b62 <__ieee754_sqrt+0xb6>
 8010ba6:	4313      	orrs	r3, r2
 8010ba8:	d01b      	beq.n	8010be2 <__ieee754_sqrt+0x136>
 8010baa:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8010c58 <__ieee754_sqrt+0x1ac>
 8010bae:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8010c5c <__ieee754_sqrt+0x1b0>
 8010bb2:	e9da 0100 	ldrd	r0, r1, [sl]
 8010bb6:	e9db 2300 	ldrd	r2, r3, [fp]
 8010bba:	f7ef fbdd 	bl	8000378 <__aeabi_dsub>
 8010bbe:	e9da 8900 	ldrd	r8, r9, [sl]
 8010bc2:	4602      	mov	r2, r0
 8010bc4:	460b      	mov	r3, r1
 8010bc6:	4640      	mov	r0, r8
 8010bc8:	4649      	mov	r1, r9
 8010bca:	f7f0 f809 	bl	8000be0 <__aeabi_dcmple>
 8010bce:	b140      	cbz	r0, 8010be2 <__ieee754_sqrt+0x136>
 8010bd0:	f1b4 3fff 	cmp.w	r4, #4294967295
 8010bd4:	e9da 0100 	ldrd	r0, r1, [sl]
 8010bd8:	e9db 2300 	ldrd	r2, r3, [fp]
 8010bdc:	d126      	bne.n	8010c2c <__ieee754_sqrt+0x180>
 8010bde:	3501      	adds	r5, #1
 8010be0:	463c      	mov	r4, r7
 8010be2:	106a      	asrs	r2, r5, #1
 8010be4:	0863      	lsrs	r3, r4, #1
 8010be6:	07e9      	lsls	r1, r5, #31
 8010be8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8010bec:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8010bf0:	bf48      	it	mi
 8010bf2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8010bf6:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8010bfa:	461c      	mov	r4, r3
 8010bfc:	e76d      	b.n	8010ada <__ieee754_sqrt+0x2e>
 8010bfe:	0ad3      	lsrs	r3, r2, #11
 8010c00:	3815      	subs	r0, #21
 8010c02:	0552      	lsls	r2, r2, #21
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d0fa      	beq.n	8010bfe <__ieee754_sqrt+0x152>
 8010c08:	02dc      	lsls	r4, r3, #11
 8010c0a:	d50a      	bpl.n	8010c22 <__ieee754_sqrt+0x176>
 8010c0c:	f1c1 0420 	rsb	r4, r1, #32
 8010c10:	fa22 f404 	lsr.w	r4, r2, r4
 8010c14:	1e4d      	subs	r5, r1, #1
 8010c16:	408a      	lsls	r2, r1
 8010c18:	4323      	orrs	r3, r4
 8010c1a:	1b41      	subs	r1, r0, r5
 8010c1c:	e772      	b.n	8010b04 <__ieee754_sqrt+0x58>
 8010c1e:	4608      	mov	r0, r1
 8010c20:	e7f0      	b.n	8010c04 <__ieee754_sqrt+0x158>
 8010c22:	005b      	lsls	r3, r3, #1
 8010c24:	3101      	adds	r1, #1
 8010c26:	e7ef      	b.n	8010c08 <__ieee754_sqrt+0x15c>
 8010c28:	46e0      	mov	r8, ip
 8010c2a:	e7aa      	b.n	8010b82 <__ieee754_sqrt+0xd6>
 8010c2c:	f7ef fba6 	bl	800037c <__adddf3>
 8010c30:	e9da 8900 	ldrd	r8, r9, [sl]
 8010c34:	4602      	mov	r2, r0
 8010c36:	460b      	mov	r3, r1
 8010c38:	4640      	mov	r0, r8
 8010c3a:	4649      	mov	r1, r9
 8010c3c:	f7ef ffc6 	bl	8000bcc <__aeabi_dcmplt>
 8010c40:	b120      	cbz	r0, 8010c4c <__ieee754_sqrt+0x1a0>
 8010c42:	1ca0      	adds	r0, r4, #2
 8010c44:	bf08      	it	eq
 8010c46:	3501      	addeq	r5, #1
 8010c48:	3402      	adds	r4, #2
 8010c4a:	e7ca      	b.n	8010be2 <__ieee754_sqrt+0x136>
 8010c4c:	3401      	adds	r4, #1
 8010c4e:	f024 0401 	bic.w	r4, r4, #1
 8010c52:	e7c6      	b.n	8010be2 <__ieee754_sqrt+0x136>
 8010c54:	7ff00000 	.word	0x7ff00000
 8010c58:	20000358 	.word	0x20000358
 8010c5c:	20000360 	.word	0x20000360

08010c60 <roundf>:
 8010c60:	ee10 0a10 	vmov	r0, s0
 8010c64:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8010c68:	3a7f      	subs	r2, #127	; 0x7f
 8010c6a:	2a16      	cmp	r2, #22
 8010c6c:	dc15      	bgt.n	8010c9a <roundf+0x3a>
 8010c6e:	2a00      	cmp	r2, #0
 8010c70:	da08      	bge.n	8010c84 <roundf+0x24>
 8010c72:	3201      	adds	r2, #1
 8010c74:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8010c78:	d101      	bne.n	8010c7e <roundf+0x1e>
 8010c7a:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8010c7e:	ee00 3a10 	vmov	s0, r3
 8010c82:	4770      	bx	lr
 8010c84:	4907      	ldr	r1, [pc, #28]	; (8010ca4 <roundf+0x44>)
 8010c86:	4111      	asrs	r1, r2
 8010c88:	4208      	tst	r0, r1
 8010c8a:	d0fa      	beq.n	8010c82 <roundf+0x22>
 8010c8c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8010c90:	4113      	asrs	r3, r2
 8010c92:	4403      	add	r3, r0
 8010c94:	ea23 0301 	bic.w	r3, r3, r1
 8010c98:	e7f1      	b.n	8010c7e <roundf+0x1e>
 8010c9a:	2a80      	cmp	r2, #128	; 0x80
 8010c9c:	d1f1      	bne.n	8010c82 <roundf+0x22>
 8010c9e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010ca2:	4770      	bx	lr
 8010ca4:	007fffff 	.word	0x007fffff

08010ca8 <__kernel_cos>:
 8010ca8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cac:	ec57 6b10 	vmov	r6, r7, d0
 8010cb0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8010cb4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8010cb8:	ed8d 1b00 	vstr	d1, [sp]
 8010cbc:	da07      	bge.n	8010cce <__kernel_cos+0x26>
 8010cbe:	ee10 0a10 	vmov	r0, s0
 8010cc2:	4639      	mov	r1, r7
 8010cc4:	f7ef ffc0 	bl	8000c48 <__aeabi_d2iz>
 8010cc8:	2800      	cmp	r0, #0
 8010cca:	f000 8088 	beq.w	8010dde <__kernel_cos+0x136>
 8010cce:	4632      	mov	r2, r6
 8010cd0:	463b      	mov	r3, r7
 8010cd2:	4630      	mov	r0, r6
 8010cd4:	4639      	mov	r1, r7
 8010cd6:	f7ef fd07 	bl	80006e8 <__aeabi_dmul>
 8010cda:	4b51      	ldr	r3, [pc, #324]	; (8010e20 <__kernel_cos+0x178>)
 8010cdc:	2200      	movs	r2, #0
 8010cde:	4604      	mov	r4, r0
 8010ce0:	460d      	mov	r5, r1
 8010ce2:	f7ef fd01 	bl	80006e8 <__aeabi_dmul>
 8010ce6:	a340      	add	r3, pc, #256	; (adr r3, 8010de8 <__kernel_cos+0x140>)
 8010ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cec:	4682      	mov	sl, r0
 8010cee:	468b      	mov	fp, r1
 8010cf0:	4620      	mov	r0, r4
 8010cf2:	4629      	mov	r1, r5
 8010cf4:	f7ef fcf8 	bl	80006e8 <__aeabi_dmul>
 8010cf8:	a33d      	add	r3, pc, #244	; (adr r3, 8010df0 <__kernel_cos+0x148>)
 8010cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cfe:	f7ef fb3d 	bl	800037c <__adddf3>
 8010d02:	4622      	mov	r2, r4
 8010d04:	462b      	mov	r3, r5
 8010d06:	f7ef fcef 	bl	80006e8 <__aeabi_dmul>
 8010d0a:	a33b      	add	r3, pc, #236	; (adr r3, 8010df8 <__kernel_cos+0x150>)
 8010d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d10:	f7ef fb32 	bl	8000378 <__aeabi_dsub>
 8010d14:	4622      	mov	r2, r4
 8010d16:	462b      	mov	r3, r5
 8010d18:	f7ef fce6 	bl	80006e8 <__aeabi_dmul>
 8010d1c:	a338      	add	r3, pc, #224	; (adr r3, 8010e00 <__kernel_cos+0x158>)
 8010d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d22:	f7ef fb2b 	bl	800037c <__adddf3>
 8010d26:	4622      	mov	r2, r4
 8010d28:	462b      	mov	r3, r5
 8010d2a:	f7ef fcdd 	bl	80006e8 <__aeabi_dmul>
 8010d2e:	a336      	add	r3, pc, #216	; (adr r3, 8010e08 <__kernel_cos+0x160>)
 8010d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d34:	f7ef fb20 	bl	8000378 <__aeabi_dsub>
 8010d38:	4622      	mov	r2, r4
 8010d3a:	462b      	mov	r3, r5
 8010d3c:	f7ef fcd4 	bl	80006e8 <__aeabi_dmul>
 8010d40:	a333      	add	r3, pc, #204	; (adr r3, 8010e10 <__kernel_cos+0x168>)
 8010d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d46:	f7ef fb19 	bl	800037c <__adddf3>
 8010d4a:	4622      	mov	r2, r4
 8010d4c:	462b      	mov	r3, r5
 8010d4e:	f7ef fccb 	bl	80006e8 <__aeabi_dmul>
 8010d52:	4622      	mov	r2, r4
 8010d54:	462b      	mov	r3, r5
 8010d56:	f7ef fcc7 	bl	80006e8 <__aeabi_dmul>
 8010d5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010d5e:	4604      	mov	r4, r0
 8010d60:	460d      	mov	r5, r1
 8010d62:	4630      	mov	r0, r6
 8010d64:	4639      	mov	r1, r7
 8010d66:	f7ef fcbf 	bl	80006e8 <__aeabi_dmul>
 8010d6a:	460b      	mov	r3, r1
 8010d6c:	4602      	mov	r2, r0
 8010d6e:	4629      	mov	r1, r5
 8010d70:	4620      	mov	r0, r4
 8010d72:	f7ef fb01 	bl	8000378 <__aeabi_dsub>
 8010d76:	4b2b      	ldr	r3, [pc, #172]	; (8010e24 <__kernel_cos+0x17c>)
 8010d78:	4598      	cmp	r8, r3
 8010d7a:	4606      	mov	r6, r0
 8010d7c:	460f      	mov	r7, r1
 8010d7e:	dc10      	bgt.n	8010da2 <__kernel_cos+0xfa>
 8010d80:	4602      	mov	r2, r0
 8010d82:	460b      	mov	r3, r1
 8010d84:	4650      	mov	r0, sl
 8010d86:	4659      	mov	r1, fp
 8010d88:	f7ef faf6 	bl	8000378 <__aeabi_dsub>
 8010d8c:	460b      	mov	r3, r1
 8010d8e:	4926      	ldr	r1, [pc, #152]	; (8010e28 <__kernel_cos+0x180>)
 8010d90:	4602      	mov	r2, r0
 8010d92:	2000      	movs	r0, #0
 8010d94:	f7ef faf0 	bl	8000378 <__aeabi_dsub>
 8010d98:	ec41 0b10 	vmov	d0, r0, r1
 8010d9c:	b003      	add	sp, #12
 8010d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010da2:	4b22      	ldr	r3, [pc, #136]	; (8010e2c <__kernel_cos+0x184>)
 8010da4:	4920      	ldr	r1, [pc, #128]	; (8010e28 <__kernel_cos+0x180>)
 8010da6:	4598      	cmp	r8, r3
 8010da8:	bfcc      	ite	gt
 8010daa:	4d21      	ldrgt	r5, [pc, #132]	; (8010e30 <__kernel_cos+0x188>)
 8010dac:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8010db0:	2400      	movs	r4, #0
 8010db2:	4622      	mov	r2, r4
 8010db4:	462b      	mov	r3, r5
 8010db6:	2000      	movs	r0, #0
 8010db8:	f7ef fade 	bl	8000378 <__aeabi_dsub>
 8010dbc:	4622      	mov	r2, r4
 8010dbe:	4680      	mov	r8, r0
 8010dc0:	4689      	mov	r9, r1
 8010dc2:	462b      	mov	r3, r5
 8010dc4:	4650      	mov	r0, sl
 8010dc6:	4659      	mov	r1, fp
 8010dc8:	f7ef fad6 	bl	8000378 <__aeabi_dsub>
 8010dcc:	4632      	mov	r2, r6
 8010dce:	463b      	mov	r3, r7
 8010dd0:	f7ef fad2 	bl	8000378 <__aeabi_dsub>
 8010dd4:	4602      	mov	r2, r0
 8010dd6:	460b      	mov	r3, r1
 8010dd8:	4640      	mov	r0, r8
 8010dda:	4649      	mov	r1, r9
 8010ddc:	e7da      	b.n	8010d94 <__kernel_cos+0xec>
 8010dde:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8010e18 <__kernel_cos+0x170>
 8010de2:	e7db      	b.n	8010d9c <__kernel_cos+0xf4>
 8010de4:	f3af 8000 	nop.w
 8010de8:	be8838d4 	.word	0xbe8838d4
 8010dec:	bda8fae9 	.word	0xbda8fae9
 8010df0:	bdb4b1c4 	.word	0xbdb4b1c4
 8010df4:	3e21ee9e 	.word	0x3e21ee9e
 8010df8:	809c52ad 	.word	0x809c52ad
 8010dfc:	3e927e4f 	.word	0x3e927e4f
 8010e00:	19cb1590 	.word	0x19cb1590
 8010e04:	3efa01a0 	.word	0x3efa01a0
 8010e08:	16c15177 	.word	0x16c15177
 8010e0c:	3f56c16c 	.word	0x3f56c16c
 8010e10:	5555554c 	.word	0x5555554c
 8010e14:	3fa55555 	.word	0x3fa55555
 8010e18:	00000000 	.word	0x00000000
 8010e1c:	3ff00000 	.word	0x3ff00000
 8010e20:	3fe00000 	.word	0x3fe00000
 8010e24:	3fd33332 	.word	0x3fd33332
 8010e28:	3ff00000 	.word	0x3ff00000
 8010e2c:	3fe90000 	.word	0x3fe90000
 8010e30:	3fd20000 	.word	0x3fd20000
 8010e34:	00000000 	.word	0x00000000

08010e38 <__kernel_sin>:
 8010e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e3c:	ed2d 8b04 	vpush	{d8-d9}
 8010e40:	eeb0 8a41 	vmov.f32	s16, s2
 8010e44:	eef0 8a61 	vmov.f32	s17, s3
 8010e48:	ec55 4b10 	vmov	r4, r5, d0
 8010e4c:	b083      	sub	sp, #12
 8010e4e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010e52:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8010e56:	9001      	str	r0, [sp, #4]
 8010e58:	da06      	bge.n	8010e68 <__kernel_sin+0x30>
 8010e5a:	ee10 0a10 	vmov	r0, s0
 8010e5e:	4629      	mov	r1, r5
 8010e60:	f7ef fef2 	bl	8000c48 <__aeabi_d2iz>
 8010e64:	2800      	cmp	r0, #0
 8010e66:	d051      	beq.n	8010f0c <__kernel_sin+0xd4>
 8010e68:	4622      	mov	r2, r4
 8010e6a:	462b      	mov	r3, r5
 8010e6c:	4620      	mov	r0, r4
 8010e6e:	4629      	mov	r1, r5
 8010e70:	f7ef fc3a 	bl	80006e8 <__aeabi_dmul>
 8010e74:	4682      	mov	sl, r0
 8010e76:	468b      	mov	fp, r1
 8010e78:	4602      	mov	r2, r0
 8010e7a:	460b      	mov	r3, r1
 8010e7c:	4620      	mov	r0, r4
 8010e7e:	4629      	mov	r1, r5
 8010e80:	f7ef fc32 	bl	80006e8 <__aeabi_dmul>
 8010e84:	a341      	add	r3, pc, #260	; (adr r3, 8010f8c <__kernel_sin+0x154>)
 8010e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e8a:	4680      	mov	r8, r0
 8010e8c:	4689      	mov	r9, r1
 8010e8e:	4650      	mov	r0, sl
 8010e90:	4659      	mov	r1, fp
 8010e92:	f7ef fc29 	bl	80006e8 <__aeabi_dmul>
 8010e96:	a33f      	add	r3, pc, #252	; (adr r3, 8010f94 <__kernel_sin+0x15c>)
 8010e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e9c:	f7ef fa6c 	bl	8000378 <__aeabi_dsub>
 8010ea0:	4652      	mov	r2, sl
 8010ea2:	465b      	mov	r3, fp
 8010ea4:	f7ef fc20 	bl	80006e8 <__aeabi_dmul>
 8010ea8:	a33c      	add	r3, pc, #240	; (adr r3, 8010f9c <__kernel_sin+0x164>)
 8010eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010eae:	f7ef fa65 	bl	800037c <__adddf3>
 8010eb2:	4652      	mov	r2, sl
 8010eb4:	465b      	mov	r3, fp
 8010eb6:	f7ef fc17 	bl	80006e8 <__aeabi_dmul>
 8010eba:	a33a      	add	r3, pc, #232	; (adr r3, 8010fa4 <__kernel_sin+0x16c>)
 8010ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ec0:	f7ef fa5a 	bl	8000378 <__aeabi_dsub>
 8010ec4:	4652      	mov	r2, sl
 8010ec6:	465b      	mov	r3, fp
 8010ec8:	f7ef fc0e 	bl	80006e8 <__aeabi_dmul>
 8010ecc:	a337      	add	r3, pc, #220	; (adr r3, 8010fac <__kernel_sin+0x174>)
 8010ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ed2:	f7ef fa53 	bl	800037c <__adddf3>
 8010ed6:	9b01      	ldr	r3, [sp, #4]
 8010ed8:	4606      	mov	r6, r0
 8010eda:	460f      	mov	r7, r1
 8010edc:	b9eb      	cbnz	r3, 8010f1a <__kernel_sin+0xe2>
 8010ede:	4602      	mov	r2, r0
 8010ee0:	460b      	mov	r3, r1
 8010ee2:	4650      	mov	r0, sl
 8010ee4:	4659      	mov	r1, fp
 8010ee6:	f7ef fbff 	bl	80006e8 <__aeabi_dmul>
 8010eea:	a325      	add	r3, pc, #148	; (adr r3, 8010f80 <__kernel_sin+0x148>)
 8010eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ef0:	f7ef fa42 	bl	8000378 <__aeabi_dsub>
 8010ef4:	4642      	mov	r2, r8
 8010ef6:	464b      	mov	r3, r9
 8010ef8:	f7ef fbf6 	bl	80006e8 <__aeabi_dmul>
 8010efc:	4602      	mov	r2, r0
 8010efe:	460b      	mov	r3, r1
 8010f00:	4620      	mov	r0, r4
 8010f02:	4629      	mov	r1, r5
 8010f04:	f7ef fa3a 	bl	800037c <__adddf3>
 8010f08:	4604      	mov	r4, r0
 8010f0a:	460d      	mov	r5, r1
 8010f0c:	ec45 4b10 	vmov	d0, r4, r5
 8010f10:	b003      	add	sp, #12
 8010f12:	ecbd 8b04 	vpop	{d8-d9}
 8010f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f1a:	4b1b      	ldr	r3, [pc, #108]	; (8010f88 <__kernel_sin+0x150>)
 8010f1c:	ec51 0b18 	vmov	r0, r1, d8
 8010f20:	2200      	movs	r2, #0
 8010f22:	f7ef fbe1 	bl	80006e8 <__aeabi_dmul>
 8010f26:	4632      	mov	r2, r6
 8010f28:	ec41 0b19 	vmov	d9, r0, r1
 8010f2c:	463b      	mov	r3, r7
 8010f2e:	4640      	mov	r0, r8
 8010f30:	4649      	mov	r1, r9
 8010f32:	f7ef fbd9 	bl	80006e8 <__aeabi_dmul>
 8010f36:	4602      	mov	r2, r0
 8010f38:	460b      	mov	r3, r1
 8010f3a:	ec51 0b19 	vmov	r0, r1, d9
 8010f3e:	f7ef fa1b 	bl	8000378 <__aeabi_dsub>
 8010f42:	4652      	mov	r2, sl
 8010f44:	465b      	mov	r3, fp
 8010f46:	f7ef fbcf 	bl	80006e8 <__aeabi_dmul>
 8010f4a:	ec53 2b18 	vmov	r2, r3, d8
 8010f4e:	f7ef fa13 	bl	8000378 <__aeabi_dsub>
 8010f52:	a30b      	add	r3, pc, #44	; (adr r3, 8010f80 <__kernel_sin+0x148>)
 8010f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f58:	4606      	mov	r6, r0
 8010f5a:	460f      	mov	r7, r1
 8010f5c:	4640      	mov	r0, r8
 8010f5e:	4649      	mov	r1, r9
 8010f60:	f7ef fbc2 	bl	80006e8 <__aeabi_dmul>
 8010f64:	4602      	mov	r2, r0
 8010f66:	460b      	mov	r3, r1
 8010f68:	4630      	mov	r0, r6
 8010f6a:	4639      	mov	r1, r7
 8010f6c:	f7ef fa06 	bl	800037c <__adddf3>
 8010f70:	4602      	mov	r2, r0
 8010f72:	460b      	mov	r3, r1
 8010f74:	4620      	mov	r0, r4
 8010f76:	4629      	mov	r1, r5
 8010f78:	f7ef f9fe 	bl	8000378 <__aeabi_dsub>
 8010f7c:	e7c4      	b.n	8010f08 <__kernel_sin+0xd0>
 8010f7e:	bf00      	nop
 8010f80:	55555549 	.word	0x55555549
 8010f84:	3fc55555 	.word	0x3fc55555
 8010f88:	3fe00000 	.word	0x3fe00000
 8010f8c:	5acfd57c 	.word	0x5acfd57c
 8010f90:	3de5d93a 	.word	0x3de5d93a
 8010f94:	8a2b9ceb 	.word	0x8a2b9ceb
 8010f98:	3e5ae5e6 	.word	0x3e5ae5e6
 8010f9c:	57b1fe7d 	.word	0x57b1fe7d
 8010fa0:	3ec71de3 	.word	0x3ec71de3
 8010fa4:	19c161d5 	.word	0x19c161d5
 8010fa8:	3f2a01a0 	.word	0x3f2a01a0
 8010fac:	1110f8a6 	.word	0x1110f8a6
 8010fb0:	3f811111 	.word	0x3f811111
 8010fb4:	00000000 	.word	0x00000000

08010fb8 <__ieee754_acos>:
 8010fb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fbc:	ec55 4b10 	vmov	r4, r5, d0
 8010fc0:	49b7      	ldr	r1, [pc, #732]	; (80112a0 <__ieee754_acos+0x2e8>)
 8010fc2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010fc6:	428b      	cmp	r3, r1
 8010fc8:	dd1b      	ble.n	8011002 <__ieee754_acos+0x4a>
 8010fca:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8010fce:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8010fd2:	4323      	orrs	r3, r4
 8010fd4:	d106      	bne.n	8010fe4 <__ieee754_acos+0x2c>
 8010fd6:	2d00      	cmp	r5, #0
 8010fd8:	f300 8211 	bgt.w	80113fe <__ieee754_acos+0x446>
 8010fdc:	ed9f 0b96 	vldr	d0, [pc, #600]	; 8011238 <__ieee754_acos+0x280>
 8010fe0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fe4:	ee10 2a10 	vmov	r2, s0
 8010fe8:	462b      	mov	r3, r5
 8010fea:	ee10 0a10 	vmov	r0, s0
 8010fee:	4629      	mov	r1, r5
 8010ff0:	f7ef f9c2 	bl	8000378 <__aeabi_dsub>
 8010ff4:	4602      	mov	r2, r0
 8010ff6:	460b      	mov	r3, r1
 8010ff8:	f7ef fca0 	bl	800093c <__aeabi_ddiv>
 8010ffc:	ec41 0b10 	vmov	d0, r0, r1
 8011000:	e7ee      	b.n	8010fe0 <__ieee754_acos+0x28>
 8011002:	49a8      	ldr	r1, [pc, #672]	; (80112a4 <__ieee754_acos+0x2ec>)
 8011004:	428b      	cmp	r3, r1
 8011006:	f300 8087 	bgt.w	8011118 <__ieee754_acos+0x160>
 801100a:	4aa7      	ldr	r2, [pc, #668]	; (80112a8 <__ieee754_acos+0x2f0>)
 801100c:	4293      	cmp	r3, r2
 801100e:	f340 81f9 	ble.w	8011404 <__ieee754_acos+0x44c>
 8011012:	ee10 2a10 	vmov	r2, s0
 8011016:	ee10 0a10 	vmov	r0, s0
 801101a:	462b      	mov	r3, r5
 801101c:	4629      	mov	r1, r5
 801101e:	f7ef fb63 	bl	80006e8 <__aeabi_dmul>
 8011022:	a387      	add	r3, pc, #540	; (adr r3, 8011240 <__ieee754_acos+0x288>)
 8011024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011028:	4606      	mov	r6, r0
 801102a:	460f      	mov	r7, r1
 801102c:	f7ef fb5c 	bl	80006e8 <__aeabi_dmul>
 8011030:	a385      	add	r3, pc, #532	; (adr r3, 8011248 <__ieee754_acos+0x290>)
 8011032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011036:	f7ef f9a1 	bl	800037c <__adddf3>
 801103a:	4632      	mov	r2, r6
 801103c:	463b      	mov	r3, r7
 801103e:	f7ef fb53 	bl	80006e8 <__aeabi_dmul>
 8011042:	a383      	add	r3, pc, #524	; (adr r3, 8011250 <__ieee754_acos+0x298>)
 8011044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011048:	f7ef f996 	bl	8000378 <__aeabi_dsub>
 801104c:	4632      	mov	r2, r6
 801104e:	463b      	mov	r3, r7
 8011050:	f7ef fb4a 	bl	80006e8 <__aeabi_dmul>
 8011054:	a380      	add	r3, pc, #512	; (adr r3, 8011258 <__ieee754_acos+0x2a0>)
 8011056:	e9d3 2300 	ldrd	r2, r3, [r3]
 801105a:	f7ef f98f 	bl	800037c <__adddf3>
 801105e:	4632      	mov	r2, r6
 8011060:	463b      	mov	r3, r7
 8011062:	f7ef fb41 	bl	80006e8 <__aeabi_dmul>
 8011066:	a37e      	add	r3, pc, #504	; (adr r3, 8011260 <__ieee754_acos+0x2a8>)
 8011068:	e9d3 2300 	ldrd	r2, r3, [r3]
 801106c:	f7ef f984 	bl	8000378 <__aeabi_dsub>
 8011070:	4632      	mov	r2, r6
 8011072:	463b      	mov	r3, r7
 8011074:	f7ef fb38 	bl	80006e8 <__aeabi_dmul>
 8011078:	a37b      	add	r3, pc, #492	; (adr r3, 8011268 <__ieee754_acos+0x2b0>)
 801107a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801107e:	f7ef f97d 	bl	800037c <__adddf3>
 8011082:	4632      	mov	r2, r6
 8011084:	463b      	mov	r3, r7
 8011086:	f7ef fb2f 	bl	80006e8 <__aeabi_dmul>
 801108a:	a379      	add	r3, pc, #484	; (adr r3, 8011270 <__ieee754_acos+0x2b8>)
 801108c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011090:	4680      	mov	r8, r0
 8011092:	4689      	mov	r9, r1
 8011094:	4630      	mov	r0, r6
 8011096:	4639      	mov	r1, r7
 8011098:	f7ef fb26 	bl	80006e8 <__aeabi_dmul>
 801109c:	a376      	add	r3, pc, #472	; (adr r3, 8011278 <__ieee754_acos+0x2c0>)
 801109e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110a2:	f7ef f969 	bl	8000378 <__aeabi_dsub>
 80110a6:	4632      	mov	r2, r6
 80110a8:	463b      	mov	r3, r7
 80110aa:	f7ef fb1d 	bl	80006e8 <__aeabi_dmul>
 80110ae:	a374      	add	r3, pc, #464	; (adr r3, 8011280 <__ieee754_acos+0x2c8>)
 80110b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110b4:	f7ef f962 	bl	800037c <__adddf3>
 80110b8:	4632      	mov	r2, r6
 80110ba:	463b      	mov	r3, r7
 80110bc:	f7ef fb14 	bl	80006e8 <__aeabi_dmul>
 80110c0:	a371      	add	r3, pc, #452	; (adr r3, 8011288 <__ieee754_acos+0x2d0>)
 80110c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110c6:	f7ef f957 	bl	8000378 <__aeabi_dsub>
 80110ca:	4632      	mov	r2, r6
 80110cc:	463b      	mov	r3, r7
 80110ce:	f7ef fb0b 	bl	80006e8 <__aeabi_dmul>
 80110d2:	4b76      	ldr	r3, [pc, #472]	; (80112ac <__ieee754_acos+0x2f4>)
 80110d4:	2200      	movs	r2, #0
 80110d6:	f7ef f951 	bl	800037c <__adddf3>
 80110da:	4602      	mov	r2, r0
 80110dc:	460b      	mov	r3, r1
 80110de:	4640      	mov	r0, r8
 80110e0:	4649      	mov	r1, r9
 80110e2:	f7ef fc2b 	bl	800093c <__aeabi_ddiv>
 80110e6:	4622      	mov	r2, r4
 80110e8:	462b      	mov	r3, r5
 80110ea:	f7ef fafd 	bl	80006e8 <__aeabi_dmul>
 80110ee:	4602      	mov	r2, r0
 80110f0:	460b      	mov	r3, r1
 80110f2:	a167      	add	r1, pc, #412	; (adr r1, 8011290 <__ieee754_acos+0x2d8>)
 80110f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80110f8:	f7ef f93e 	bl	8000378 <__aeabi_dsub>
 80110fc:	4602      	mov	r2, r0
 80110fe:	460b      	mov	r3, r1
 8011100:	4620      	mov	r0, r4
 8011102:	4629      	mov	r1, r5
 8011104:	f7ef f938 	bl	8000378 <__aeabi_dsub>
 8011108:	4602      	mov	r2, r0
 801110a:	460b      	mov	r3, r1
 801110c:	a162      	add	r1, pc, #392	; (adr r1, 8011298 <__ieee754_acos+0x2e0>)
 801110e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011112:	f7ef f931 	bl	8000378 <__aeabi_dsub>
 8011116:	e771      	b.n	8010ffc <__ieee754_acos+0x44>
 8011118:	2d00      	cmp	r5, #0
 801111a:	f280 80cb 	bge.w	80112b4 <__ieee754_acos+0x2fc>
 801111e:	ee10 0a10 	vmov	r0, s0
 8011122:	4b62      	ldr	r3, [pc, #392]	; (80112ac <__ieee754_acos+0x2f4>)
 8011124:	2200      	movs	r2, #0
 8011126:	4629      	mov	r1, r5
 8011128:	f7ef f928 	bl	800037c <__adddf3>
 801112c:	4b60      	ldr	r3, [pc, #384]	; (80112b0 <__ieee754_acos+0x2f8>)
 801112e:	2200      	movs	r2, #0
 8011130:	f7ef fada 	bl	80006e8 <__aeabi_dmul>
 8011134:	a342      	add	r3, pc, #264	; (adr r3, 8011240 <__ieee754_acos+0x288>)
 8011136:	e9d3 2300 	ldrd	r2, r3, [r3]
 801113a:	4604      	mov	r4, r0
 801113c:	460d      	mov	r5, r1
 801113e:	f7ef fad3 	bl	80006e8 <__aeabi_dmul>
 8011142:	a341      	add	r3, pc, #260	; (adr r3, 8011248 <__ieee754_acos+0x290>)
 8011144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011148:	f7ef f918 	bl	800037c <__adddf3>
 801114c:	4622      	mov	r2, r4
 801114e:	462b      	mov	r3, r5
 8011150:	f7ef faca 	bl	80006e8 <__aeabi_dmul>
 8011154:	a33e      	add	r3, pc, #248	; (adr r3, 8011250 <__ieee754_acos+0x298>)
 8011156:	e9d3 2300 	ldrd	r2, r3, [r3]
 801115a:	f7ef f90d 	bl	8000378 <__aeabi_dsub>
 801115e:	4622      	mov	r2, r4
 8011160:	462b      	mov	r3, r5
 8011162:	f7ef fac1 	bl	80006e8 <__aeabi_dmul>
 8011166:	a33c      	add	r3, pc, #240	; (adr r3, 8011258 <__ieee754_acos+0x2a0>)
 8011168:	e9d3 2300 	ldrd	r2, r3, [r3]
 801116c:	f7ef f906 	bl	800037c <__adddf3>
 8011170:	4622      	mov	r2, r4
 8011172:	462b      	mov	r3, r5
 8011174:	f7ef fab8 	bl	80006e8 <__aeabi_dmul>
 8011178:	a339      	add	r3, pc, #228	; (adr r3, 8011260 <__ieee754_acos+0x2a8>)
 801117a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801117e:	f7ef f8fb 	bl	8000378 <__aeabi_dsub>
 8011182:	4622      	mov	r2, r4
 8011184:	462b      	mov	r3, r5
 8011186:	f7ef faaf 	bl	80006e8 <__aeabi_dmul>
 801118a:	a337      	add	r3, pc, #220	; (adr r3, 8011268 <__ieee754_acos+0x2b0>)
 801118c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011190:	f7ef f8f4 	bl	800037c <__adddf3>
 8011194:	4622      	mov	r2, r4
 8011196:	462b      	mov	r3, r5
 8011198:	f7ef faa6 	bl	80006e8 <__aeabi_dmul>
 801119c:	ec45 4b10 	vmov	d0, r4, r5
 80111a0:	4680      	mov	r8, r0
 80111a2:	4689      	mov	r9, r1
 80111a4:	f7ff fc82 	bl	8010aac <__ieee754_sqrt>
 80111a8:	a331      	add	r3, pc, #196	; (adr r3, 8011270 <__ieee754_acos+0x2b8>)
 80111aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111ae:	4620      	mov	r0, r4
 80111b0:	4629      	mov	r1, r5
 80111b2:	ec57 6b10 	vmov	r6, r7, d0
 80111b6:	f7ef fa97 	bl	80006e8 <__aeabi_dmul>
 80111ba:	a32f      	add	r3, pc, #188	; (adr r3, 8011278 <__ieee754_acos+0x2c0>)
 80111bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111c0:	f7ef f8da 	bl	8000378 <__aeabi_dsub>
 80111c4:	4622      	mov	r2, r4
 80111c6:	462b      	mov	r3, r5
 80111c8:	f7ef fa8e 	bl	80006e8 <__aeabi_dmul>
 80111cc:	a32c      	add	r3, pc, #176	; (adr r3, 8011280 <__ieee754_acos+0x2c8>)
 80111ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111d2:	f7ef f8d3 	bl	800037c <__adddf3>
 80111d6:	4622      	mov	r2, r4
 80111d8:	462b      	mov	r3, r5
 80111da:	f7ef fa85 	bl	80006e8 <__aeabi_dmul>
 80111de:	a32a      	add	r3, pc, #168	; (adr r3, 8011288 <__ieee754_acos+0x2d0>)
 80111e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111e4:	f7ef f8c8 	bl	8000378 <__aeabi_dsub>
 80111e8:	4622      	mov	r2, r4
 80111ea:	462b      	mov	r3, r5
 80111ec:	f7ef fa7c 	bl	80006e8 <__aeabi_dmul>
 80111f0:	4b2e      	ldr	r3, [pc, #184]	; (80112ac <__ieee754_acos+0x2f4>)
 80111f2:	2200      	movs	r2, #0
 80111f4:	f7ef f8c2 	bl	800037c <__adddf3>
 80111f8:	4602      	mov	r2, r0
 80111fa:	460b      	mov	r3, r1
 80111fc:	4640      	mov	r0, r8
 80111fe:	4649      	mov	r1, r9
 8011200:	f7ef fb9c 	bl	800093c <__aeabi_ddiv>
 8011204:	4632      	mov	r2, r6
 8011206:	463b      	mov	r3, r7
 8011208:	f7ef fa6e 	bl	80006e8 <__aeabi_dmul>
 801120c:	a320      	add	r3, pc, #128	; (adr r3, 8011290 <__ieee754_acos+0x2d8>)
 801120e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011212:	f7ef f8b1 	bl	8000378 <__aeabi_dsub>
 8011216:	4632      	mov	r2, r6
 8011218:	463b      	mov	r3, r7
 801121a:	f7ef f8af 	bl	800037c <__adddf3>
 801121e:	4602      	mov	r2, r0
 8011220:	460b      	mov	r3, r1
 8011222:	f7ef f8ab 	bl	800037c <__adddf3>
 8011226:	4602      	mov	r2, r0
 8011228:	460b      	mov	r3, r1
 801122a:	a103      	add	r1, pc, #12	; (adr r1, 8011238 <__ieee754_acos+0x280>)
 801122c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011230:	e76f      	b.n	8011112 <__ieee754_acos+0x15a>
 8011232:	bf00      	nop
 8011234:	f3af 8000 	nop.w
 8011238:	54442d18 	.word	0x54442d18
 801123c:	400921fb 	.word	0x400921fb
 8011240:	0dfdf709 	.word	0x0dfdf709
 8011244:	3f023de1 	.word	0x3f023de1
 8011248:	7501b288 	.word	0x7501b288
 801124c:	3f49efe0 	.word	0x3f49efe0
 8011250:	b5688f3b 	.word	0xb5688f3b
 8011254:	3fa48228 	.word	0x3fa48228
 8011258:	0e884455 	.word	0x0e884455
 801125c:	3fc9c155 	.word	0x3fc9c155
 8011260:	03eb6f7d 	.word	0x03eb6f7d
 8011264:	3fd4d612 	.word	0x3fd4d612
 8011268:	55555555 	.word	0x55555555
 801126c:	3fc55555 	.word	0x3fc55555
 8011270:	b12e9282 	.word	0xb12e9282
 8011274:	3fb3b8c5 	.word	0x3fb3b8c5
 8011278:	1b8d0159 	.word	0x1b8d0159
 801127c:	3fe6066c 	.word	0x3fe6066c
 8011280:	9c598ac8 	.word	0x9c598ac8
 8011284:	40002ae5 	.word	0x40002ae5
 8011288:	1c8a2d4b 	.word	0x1c8a2d4b
 801128c:	40033a27 	.word	0x40033a27
 8011290:	33145c07 	.word	0x33145c07
 8011294:	3c91a626 	.word	0x3c91a626
 8011298:	54442d18 	.word	0x54442d18
 801129c:	3ff921fb 	.word	0x3ff921fb
 80112a0:	3fefffff 	.word	0x3fefffff
 80112a4:	3fdfffff 	.word	0x3fdfffff
 80112a8:	3c600000 	.word	0x3c600000
 80112ac:	3ff00000 	.word	0x3ff00000
 80112b0:	3fe00000 	.word	0x3fe00000
 80112b4:	ee10 2a10 	vmov	r2, s0
 80112b8:	462b      	mov	r3, r5
 80112ba:	496d      	ldr	r1, [pc, #436]	; (8011470 <__ieee754_acos+0x4b8>)
 80112bc:	2000      	movs	r0, #0
 80112be:	f7ef f85b 	bl	8000378 <__aeabi_dsub>
 80112c2:	4b6c      	ldr	r3, [pc, #432]	; (8011474 <__ieee754_acos+0x4bc>)
 80112c4:	2200      	movs	r2, #0
 80112c6:	f7ef fa0f 	bl	80006e8 <__aeabi_dmul>
 80112ca:	4604      	mov	r4, r0
 80112cc:	460d      	mov	r5, r1
 80112ce:	ec45 4b10 	vmov	d0, r4, r5
 80112d2:	f7ff fbeb 	bl	8010aac <__ieee754_sqrt>
 80112d6:	a34e      	add	r3, pc, #312	; (adr r3, 8011410 <__ieee754_acos+0x458>)
 80112d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112dc:	4620      	mov	r0, r4
 80112de:	4629      	mov	r1, r5
 80112e0:	ec59 8b10 	vmov	r8, r9, d0
 80112e4:	f7ef fa00 	bl	80006e8 <__aeabi_dmul>
 80112e8:	a34b      	add	r3, pc, #300	; (adr r3, 8011418 <__ieee754_acos+0x460>)
 80112ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112ee:	f7ef f845 	bl	800037c <__adddf3>
 80112f2:	4622      	mov	r2, r4
 80112f4:	462b      	mov	r3, r5
 80112f6:	f7ef f9f7 	bl	80006e8 <__aeabi_dmul>
 80112fa:	a349      	add	r3, pc, #292	; (adr r3, 8011420 <__ieee754_acos+0x468>)
 80112fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011300:	f7ef f83a 	bl	8000378 <__aeabi_dsub>
 8011304:	4622      	mov	r2, r4
 8011306:	462b      	mov	r3, r5
 8011308:	f7ef f9ee 	bl	80006e8 <__aeabi_dmul>
 801130c:	a346      	add	r3, pc, #280	; (adr r3, 8011428 <__ieee754_acos+0x470>)
 801130e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011312:	f7ef f833 	bl	800037c <__adddf3>
 8011316:	4622      	mov	r2, r4
 8011318:	462b      	mov	r3, r5
 801131a:	f7ef f9e5 	bl	80006e8 <__aeabi_dmul>
 801131e:	a344      	add	r3, pc, #272	; (adr r3, 8011430 <__ieee754_acos+0x478>)
 8011320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011324:	f7ef f828 	bl	8000378 <__aeabi_dsub>
 8011328:	4622      	mov	r2, r4
 801132a:	462b      	mov	r3, r5
 801132c:	f7ef f9dc 	bl	80006e8 <__aeabi_dmul>
 8011330:	a341      	add	r3, pc, #260	; (adr r3, 8011438 <__ieee754_acos+0x480>)
 8011332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011336:	f7ef f821 	bl	800037c <__adddf3>
 801133a:	4622      	mov	r2, r4
 801133c:	462b      	mov	r3, r5
 801133e:	f7ef f9d3 	bl	80006e8 <__aeabi_dmul>
 8011342:	a33f      	add	r3, pc, #252	; (adr r3, 8011440 <__ieee754_acos+0x488>)
 8011344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011348:	4682      	mov	sl, r0
 801134a:	468b      	mov	fp, r1
 801134c:	4620      	mov	r0, r4
 801134e:	4629      	mov	r1, r5
 8011350:	f7ef f9ca 	bl	80006e8 <__aeabi_dmul>
 8011354:	a33c      	add	r3, pc, #240	; (adr r3, 8011448 <__ieee754_acos+0x490>)
 8011356:	e9d3 2300 	ldrd	r2, r3, [r3]
 801135a:	f7ef f80d 	bl	8000378 <__aeabi_dsub>
 801135e:	4622      	mov	r2, r4
 8011360:	462b      	mov	r3, r5
 8011362:	f7ef f9c1 	bl	80006e8 <__aeabi_dmul>
 8011366:	a33a      	add	r3, pc, #232	; (adr r3, 8011450 <__ieee754_acos+0x498>)
 8011368:	e9d3 2300 	ldrd	r2, r3, [r3]
 801136c:	f7ef f806 	bl	800037c <__adddf3>
 8011370:	4622      	mov	r2, r4
 8011372:	462b      	mov	r3, r5
 8011374:	f7ef f9b8 	bl	80006e8 <__aeabi_dmul>
 8011378:	a337      	add	r3, pc, #220	; (adr r3, 8011458 <__ieee754_acos+0x4a0>)
 801137a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801137e:	f7ee fffb 	bl	8000378 <__aeabi_dsub>
 8011382:	4622      	mov	r2, r4
 8011384:	462b      	mov	r3, r5
 8011386:	f7ef f9af 	bl	80006e8 <__aeabi_dmul>
 801138a:	4b39      	ldr	r3, [pc, #228]	; (8011470 <__ieee754_acos+0x4b8>)
 801138c:	2200      	movs	r2, #0
 801138e:	f7ee fff5 	bl	800037c <__adddf3>
 8011392:	4602      	mov	r2, r0
 8011394:	460b      	mov	r3, r1
 8011396:	4650      	mov	r0, sl
 8011398:	4659      	mov	r1, fp
 801139a:	f7ef facf 	bl	800093c <__aeabi_ddiv>
 801139e:	4642      	mov	r2, r8
 80113a0:	464b      	mov	r3, r9
 80113a2:	f7ef f9a1 	bl	80006e8 <__aeabi_dmul>
 80113a6:	2600      	movs	r6, #0
 80113a8:	4682      	mov	sl, r0
 80113aa:	468b      	mov	fp, r1
 80113ac:	4632      	mov	r2, r6
 80113ae:	464b      	mov	r3, r9
 80113b0:	4630      	mov	r0, r6
 80113b2:	4649      	mov	r1, r9
 80113b4:	f7ef f998 	bl	80006e8 <__aeabi_dmul>
 80113b8:	4602      	mov	r2, r0
 80113ba:	460b      	mov	r3, r1
 80113bc:	4620      	mov	r0, r4
 80113be:	4629      	mov	r1, r5
 80113c0:	f7ee ffda 	bl	8000378 <__aeabi_dsub>
 80113c4:	4632      	mov	r2, r6
 80113c6:	4604      	mov	r4, r0
 80113c8:	460d      	mov	r5, r1
 80113ca:	464b      	mov	r3, r9
 80113cc:	4640      	mov	r0, r8
 80113ce:	4649      	mov	r1, r9
 80113d0:	f7ee ffd4 	bl	800037c <__adddf3>
 80113d4:	4602      	mov	r2, r0
 80113d6:	460b      	mov	r3, r1
 80113d8:	4620      	mov	r0, r4
 80113da:	4629      	mov	r1, r5
 80113dc:	f7ef faae 	bl	800093c <__aeabi_ddiv>
 80113e0:	4602      	mov	r2, r0
 80113e2:	460b      	mov	r3, r1
 80113e4:	4650      	mov	r0, sl
 80113e6:	4659      	mov	r1, fp
 80113e8:	f7ee ffc8 	bl	800037c <__adddf3>
 80113ec:	4632      	mov	r2, r6
 80113ee:	464b      	mov	r3, r9
 80113f0:	f7ee ffc4 	bl	800037c <__adddf3>
 80113f4:	4602      	mov	r2, r0
 80113f6:	460b      	mov	r3, r1
 80113f8:	f7ee ffc0 	bl	800037c <__adddf3>
 80113fc:	e5fe      	b.n	8010ffc <__ieee754_acos+0x44>
 80113fe:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8011460 <__ieee754_acos+0x4a8>
 8011402:	e5ed      	b.n	8010fe0 <__ieee754_acos+0x28>
 8011404:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8011468 <__ieee754_acos+0x4b0>
 8011408:	e5ea      	b.n	8010fe0 <__ieee754_acos+0x28>
 801140a:	bf00      	nop
 801140c:	f3af 8000 	nop.w
 8011410:	0dfdf709 	.word	0x0dfdf709
 8011414:	3f023de1 	.word	0x3f023de1
 8011418:	7501b288 	.word	0x7501b288
 801141c:	3f49efe0 	.word	0x3f49efe0
 8011420:	b5688f3b 	.word	0xb5688f3b
 8011424:	3fa48228 	.word	0x3fa48228
 8011428:	0e884455 	.word	0x0e884455
 801142c:	3fc9c155 	.word	0x3fc9c155
 8011430:	03eb6f7d 	.word	0x03eb6f7d
 8011434:	3fd4d612 	.word	0x3fd4d612
 8011438:	55555555 	.word	0x55555555
 801143c:	3fc55555 	.word	0x3fc55555
 8011440:	b12e9282 	.word	0xb12e9282
 8011444:	3fb3b8c5 	.word	0x3fb3b8c5
 8011448:	1b8d0159 	.word	0x1b8d0159
 801144c:	3fe6066c 	.word	0x3fe6066c
 8011450:	9c598ac8 	.word	0x9c598ac8
 8011454:	40002ae5 	.word	0x40002ae5
 8011458:	1c8a2d4b 	.word	0x1c8a2d4b
 801145c:	40033a27 	.word	0x40033a27
	...
 8011468:	54442d18 	.word	0x54442d18
 801146c:	3ff921fb 	.word	0x3ff921fb
 8011470:	3ff00000 	.word	0x3ff00000
 8011474:	3fe00000 	.word	0x3fe00000

08011478 <__ieee754_pow>:
 8011478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801147c:	ed2d 8b06 	vpush	{d8-d10}
 8011480:	b089      	sub	sp, #36	; 0x24
 8011482:	ed8d 1b00 	vstr	d1, [sp]
 8011486:	e9dd 2900 	ldrd	r2, r9, [sp]
 801148a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801148e:	ea58 0102 	orrs.w	r1, r8, r2
 8011492:	ec57 6b10 	vmov	r6, r7, d0
 8011496:	d115      	bne.n	80114c4 <__ieee754_pow+0x4c>
 8011498:	19b3      	adds	r3, r6, r6
 801149a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801149e:	4152      	adcs	r2, r2
 80114a0:	4299      	cmp	r1, r3
 80114a2:	4b89      	ldr	r3, [pc, #548]	; (80116c8 <__ieee754_pow+0x250>)
 80114a4:	4193      	sbcs	r3, r2
 80114a6:	f080 84d1 	bcs.w	8011e4c <__ieee754_pow+0x9d4>
 80114aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80114ae:	4630      	mov	r0, r6
 80114b0:	4639      	mov	r1, r7
 80114b2:	f7ee ff63 	bl	800037c <__adddf3>
 80114b6:	ec41 0b10 	vmov	d0, r0, r1
 80114ba:	b009      	add	sp, #36	; 0x24
 80114bc:	ecbd 8b06 	vpop	{d8-d10}
 80114c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114c4:	4b81      	ldr	r3, [pc, #516]	; (80116cc <__ieee754_pow+0x254>)
 80114c6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80114ca:	429c      	cmp	r4, r3
 80114cc:	ee10 aa10 	vmov	sl, s0
 80114d0:	463d      	mov	r5, r7
 80114d2:	dc06      	bgt.n	80114e2 <__ieee754_pow+0x6a>
 80114d4:	d101      	bne.n	80114da <__ieee754_pow+0x62>
 80114d6:	2e00      	cmp	r6, #0
 80114d8:	d1e7      	bne.n	80114aa <__ieee754_pow+0x32>
 80114da:	4598      	cmp	r8, r3
 80114dc:	dc01      	bgt.n	80114e2 <__ieee754_pow+0x6a>
 80114de:	d10f      	bne.n	8011500 <__ieee754_pow+0x88>
 80114e0:	b172      	cbz	r2, 8011500 <__ieee754_pow+0x88>
 80114e2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80114e6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80114ea:	ea55 050a 	orrs.w	r5, r5, sl
 80114ee:	d1dc      	bne.n	80114aa <__ieee754_pow+0x32>
 80114f0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80114f4:	18db      	adds	r3, r3, r3
 80114f6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80114fa:	4152      	adcs	r2, r2
 80114fc:	429d      	cmp	r5, r3
 80114fe:	e7d0      	b.n	80114a2 <__ieee754_pow+0x2a>
 8011500:	2d00      	cmp	r5, #0
 8011502:	da3b      	bge.n	801157c <__ieee754_pow+0x104>
 8011504:	4b72      	ldr	r3, [pc, #456]	; (80116d0 <__ieee754_pow+0x258>)
 8011506:	4598      	cmp	r8, r3
 8011508:	dc51      	bgt.n	80115ae <__ieee754_pow+0x136>
 801150a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801150e:	4598      	cmp	r8, r3
 8011510:	f340 84ab 	ble.w	8011e6a <__ieee754_pow+0x9f2>
 8011514:	ea4f 5328 	mov.w	r3, r8, asr #20
 8011518:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801151c:	2b14      	cmp	r3, #20
 801151e:	dd0f      	ble.n	8011540 <__ieee754_pow+0xc8>
 8011520:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8011524:	fa22 f103 	lsr.w	r1, r2, r3
 8011528:	fa01 f303 	lsl.w	r3, r1, r3
 801152c:	4293      	cmp	r3, r2
 801152e:	f040 849c 	bne.w	8011e6a <__ieee754_pow+0x9f2>
 8011532:	f001 0101 	and.w	r1, r1, #1
 8011536:	f1c1 0302 	rsb	r3, r1, #2
 801153a:	9304      	str	r3, [sp, #16]
 801153c:	b182      	cbz	r2, 8011560 <__ieee754_pow+0xe8>
 801153e:	e05f      	b.n	8011600 <__ieee754_pow+0x188>
 8011540:	2a00      	cmp	r2, #0
 8011542:	d15b      	bne.n	80115fc <__ieee754_pow+0x184>
 8011544:	f1c3 0314 	rsb	r3, r3, #20
 8011548:	fa48 f103 	asr.w	r1, r8, r3
 801154c:	fa01 f303 	lsl.w	r3, r1, r3
 8011550:	4543      	cmp	r3, r8
 8011552:	f040 8487 	bne.w	8011e64 <__ieee754_pow+0x9ec>
 8011556:	f001 0101 	and.w	r1, r1, #1
 801155a:	f1c1 0302 	rsb	r3, r1, #2
 801155e:	9304      	str	r3, [sp, #16]
 8011560:	4b5c      	ldr	r3, [pc, #368]	; (80116d4 <__ieee754_pow+0x25c>)
 8011562:	4598      	cmp	r8, r3
 8011564:	d132      	bne.n	80115cc <__ieee754_pow+0x154>
 8011566:	f1b9 0f00 	cmp.w	r9, #0
 801156a:	f280 8477 	bge.w	8011e5c <__ieee754_pow+0x9e4>
 801156e:	4959      	ldr	r1, [pc, #356]	; (80116d4 <__ieee754_pow+0x25c>)
 8011570:	4632      	mov	r2, r6
 8011572:	463b      	mov	r3, r7
 8011574:	2000      	movs	r0, #0
 8011576:	f7ef f9e1 	bl	800093c <__aeabi_ddiv>
 801157a:	e79c      	b.n	80114b6 <__ieee754_pow+0x3e>
 801157c:	2300      	movs	r3, #0
 801157e:	9304      	str	r3, [sp, #16]
 8011580:	2a00      	cmp	r2, #0
 8011582:	d13d      	bne.n	8011600 <__ieee754_pow+0x188>
 8011584:	4b51      	ldr	r3, [pc, #324]	; (80116cc <__ieee754_pow+0x254>)
 8011586:	4598      	cmp	r8, r3
 8011588:	d1ea      	bne.n	8011560 <__ieee754_pow+0xe8>
 801158a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801158e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8011592:	ea53 030a 	orrs.w	r3, r3, sl
 8011596:	f000 8459 	beq.w	8011e4c <__ieee754_pow+0x9d4>
 801159a:	4b4f      	ldr	r3, [pc, #316]	; (80116d8 <__ieee754_pow+0x260>)
 801159c:	429c      	cmp	r4, r3
 801159e:	dd08      	ble.n	80115b2 <__ieee754_pow+0x13a>
 80115a0:	f1b9 0f00 	cmp.w	r9, #0
 80115a4:	f2c0 8456 	blt.w	8011e54 <__ieee754_pow+0x9dc>
 80115a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80115ac:	e783      	b.n	80114b6 <__ieee754_pow+0x3e>
 80115ae:	2302      	movs	r3, #2
 80115b0:	e7e5      	b.n	801157e <__ieee754_pow+0x106>
 80115b2:	f1b9 0f00 	cmp.w	r9, #0
 80115b6:	f04f 0000 	mov.w	r0, #0
 80115ba:	f04f 0100 	mov.w	r1, #0
 80115be:	f6bf af7a 	bge.w	80114b6 <__ieee754_pow+0x3e>
 80115c2:	e9dd 0300 	ldrd	r0, r3, [sp]
 80115c6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80115ca:	e774      	b.n	80114b6 <__ieee754_pow+0x3e>
 80115cc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80115d0:	d106      	bne.n	80115e0 <__ieee754_pow+0x168>
 80115d2:	4632      	mov	r2, r6
 80115d4:	463b      	mov	r3, r7
 80115d6:	4630      	mov	r0, r6
 80115d8:	4639      	mov	r1, r7
 80115da:	f7ef f885 	bl	80006e8 <__aeabi_dmul>
 80115de:	e76a      	b.n	80114b6 <__ieee754_pow+0x3e>
 80115e0:	4b3e      	ldr	r3, [pc, #248]	; (80116dc <__ieee754_pow+0x264>)
 80115e2:	4599      	cmp	r9, r3
 80115e4:	d10c      	bne.n	8011600 <__ieee754_pow+0x188>
 80115e6:	2d00      	cmp	r5, #0
 80115e8:	db0a      	blt.n	8011600 <__ieee754_pow+0x188>
 80115ea:	ec47 6b10 	vmov	d0, r6, r7
 80115ee:	b009      	add	sp, #36	; 0x24
 80115f0:	ecbd 8b06 	vpop	{d8-d10}
 80115f4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115f8:	f7ff ba58 	b.w	8010aac <__ieee754_sqrt>
 80115fc:	2300      	movs	r3, #0
 80115fe:	9304      	str	r3, [sp, #16]
 8011600:	ec47 6b10 	vmov	d0, r6, r7
 8011604:	f7ff f96c 	bl	80108e0 <fabs>
 8011608:	ec51 0b10 	vmov	r0, r1, d0
 801160c:	f1ba 0f00 	cmp.w	sl, #0
 8011610:	d129      	bne.n	8011666 <__ieee754_pow+0x1ee>
 8011612:	b124      	cbz	r4, 801161e <__ieee754_pow+0x1a6>
 8011614:	4b2f      	ldr	r3, [pc, #188]	; (80116d4 <__ieee754_pow+0x25c>)
 8011616:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801161a:	429a      	cmp	r2, r3
 801161c:	d123      	bne.n	8011666 <__ieee754_pow+0x1ee>
 801161e:	f1b9 0f00 	cmp.w	r9, #0
 8011622:	da05      	bge.n	8011630 <__ieee754_pow+0x1b8>
 8011624:	4602      	mov	r2, r0
 8011626:	460b      	mov	r3, r1
 8011628:	2000      	movs	r0, #0
 801162a:	492a      	ldr	r1, [pc, #168]	; (80116d4 <__ieee754_pow+0x25c>)
 801162c:	f7ef f986 	bl	800093c <__aeabi_ddiv>
 8011630:	2d00      	cmp	r5, #0
 8011632:	f6bf af40 	bge.w	80114b6 <__ieee754_pow+0x3e>
 8011636:	9b04      	ldr	r3, [sp, #16]
 8011638:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801163c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011640:	431c      	orrs	r4, r3
 8011642:	d108      	bne.n	8011656 <__ieee754_pow+0x1de>
 8011644:	4602      	mov	r2, r0
 8011646:	460b      	mov	r3, r1
 8011648:	4610      	mov	r0, r2
 801164a:	4619      	mov	r1, r3
 801164c:	f7ee fe94 	bl	8000378 <__aeabi_dsub>
 8011650:	4602      	mov	r2, r0
 8011652:	460b      	mov	r3, r1
 8011654:	e78f      	b.n	8011576 <__ieee754_pow+0xfe>
 8011656:	9b04      	ldr	r3, [sp, #16]
 8011658:	2b01      	cmp	r3, #1
 801165a:	f47f af2c 	bne.w	80114b6 <__ieee754_pow+0x3e>
 801165e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011662:	4619      	mov	r1, r3
 8011664:	e727      	b.n	80114b6 <__ieee754_pow+0x3e>
 8011666:	0feb      	lsrs	r3, r5, #31
 8011668:	3b01      	subs	r3, #1
 801166a:	9306      	str	r3, [sp, #24]
 801166c:	9a06      	ldr	r2, [sp, #24]
 801166e:	9b04      	ldr	r3, [sp, #16]
 8011670:	4313      	orrs	r3, r2
 8011672:	d102      	bne.n	801167a <__ieee754_pow+0x202>
 8011674:	4632      	mov	r2, r6
 8011676:	463b      	mov	r3, r7
 8011678:	e7e6      	b.n	8011648 <__ieee754_pow+0x1d0>
 801167a:	4b19      	ldr	r3, [pc, #100]	; (80116e0 <__ieee754_pow+0x268>)
 801167c:	4598      	cmp	r8, r3
 801167e:	f340 80fb 	ble.w	8011878 <__ieee754_pow+0x400>
 8011682:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8011686:	4598      	cmp	r8, r3
 8011688:	4b13      	ldr	r3, [pc, #76]	; (80116d8 <__ieee754_pow+0x260>)
 801168a:	dd0c      	ble.n	80116a6 <__ieee754_pow+0x22e>
 801168c:	429c      	cmp	r4, r3
 801168e:	dc0f      	bgt.n	80116b0 <__ieee754_pow+0x238>
 8011690:	f1b9 0f00 	cmp.w	r9, #0
 8011694:	da0f      	bge.n	80116b6 <__ieee754_pow+0x23e>
 8011696:	2000      	movs	r0, #0
 8011698:	b009      	add	sp, #36	; 0x24
 801169a:	ecbd 8b06 	vpop	{d8-d10}
 801169e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116a2:	f000 bf1a 	b.w	80124da <__math_oflow>
 80116a6:	429c      	cmp	r4, r3
 80116a8:	dbf2      	blt.n	8011690 <__ieee754_pow+0x218>
 80116aa:	4b0a      	ldr	r3, [pc, #40]	; (80116d4 <__ieee754_pow+0x25c>)
 80116ac:	429c      	cmp	r4, r3
 80116ae:	dd19      	ble.n	80116e4 <__ieee754_pow+0x26c>
 80116b0:	f1b9 0f00 	cmp.w	r9, #0
 80116b4:	dcef      	bgt.n	8011696 <__ieee754_pow+0x21e>
 80116b6:	2000      	movs	r0, #0
 80116b8:	b009      	add	sp, #36	; 0x24
 80116ba:	ecbd 8b06 	vpop	{d8-d10}
 80116be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116c2:	f000 bf01 	b.w	80124c8 <__math_uflow>
 80116c6:	bf00      	nop
 80116c8:	fff00000 	.word	0xfff00000
 80116cc:	7ff00000 	.word	0x7ff00000
 80116d0:	433fffff 	.word	0x433fffff
 80116d4:	3ff00000 	.word	0x3ff00000
 80116d8:	3fefffff 	.word	0x3fefffff
 80116dc:	3fe00000 	.word	0x3fe00000
 80116e0:	41e00000 	.word	0x41e00000
 80116e4:	4b60      	ldr	r3, [pc, #384]	; (8011868 <__ieee754_pow+0x3f0>)
 80116e6:	2200      	movs	r2, #0
 80116e8:	f7ee fe46 	bl	8000378 <__aeabi_dsub>
 80116ec:	a354      	add	r3, pc, #336	; (adr r3, 8011840 <__ieee754_pow+0x3c8>)
 80116ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116f2:	4604      	mov	r4, r0
 80116f4:	460d      	mov	r5, r1
 80116f6:	f7ee fff7 	bl	80006e8 <__aeabi_dmul>
 80116fa:	a353      	add	r3, pc, #332	; (adr r3, 8011848 <__ieee754_pow+0x3d0>)
 80116fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011700:	4606      	mov	r6, r0
 8011702:	460f      	mov	r7, r1
 8011704:	4620      	mov	r0, r4
 8011706:	4629      	mov	r1, r5
 8011708:	f7ee ffee 	bl	80006e8 <__aeabi_dmul>
 801170c:	4b57      	ldr	r3, [pc, #348]	; (801186c <__ieee754_pow+0x3f4>)
 801170e:	4682      	mov	sl, r0
 8011710:	468b      	mov	fp, r1
 8011712:	2200      	movs	r2, #0
 8011714:	4620      	mov	r0, r4
 8011716:	4629      	mov	r1, r5
 8011718:	f7ee ffe6 	bl	80006e8 <__aeabi_dmul>
 801171c:	4602      	mov	r2, r0
 801171e:	460b      	mov	r3, r1
 8011720:	a14b      	add	r1, pc, #300	; (adr r1, 8011850 <__ieee754_pow+0x3d8>)
 8011722:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011726:	f7ee fe27 	bl	8000378 <__aeabi_dsub>
 801172a:	4622      	mov	r2, r4
 801172c:	462b      	mov	r3, r5
 801172e:	f7ee ffdb 	bl	80006e8 <__aeabi_dmul>
 8011732:	4602      	mov	r2, r0
 8011734:	460b      	mov	r3, r1
 8011736:	2000      	movs	r0, #0
 8011738:	494d      	ldr	r1, [pc, #308]	; (8011870 <__ieee754_pow+0x3f8>)
 801173a:	f7ee fe1d 	bl	8000378 <__aeabi_dsub>
 801173e:	4622      	mov	r2, r4
 8011740:	4680      	mov	r8, r0
 8011742:	4689      	mov	r9, r1
 8011744:	462b      	mov	r3, r5
 8011746:	4620      	mov	r0, r4
 8011748:	4629      	mov	r1, r5
 801174a:	f7ee ffcd 	bl	80006e8 <__aeabi_dmul>
 801174e:	4602      	mov	r2, r0
 8011750:	460b      	mov	r3, r1
 8011752:	4640      	mov	r0, r8
 8011754:	4649      	mov	r1, r9
 8011756:	f7ee ffc7 	bl	80006e8 <__aeabi_dmul>
 801175a:	a33f      	add	r3, pc, #252	; (adr r3, 8011858 <__ieee754_pow+0x3e0>)
 801175c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011760:	f7ee ffc2 	bl	80006e8 <__aeabi_dmul>
 8011764:	4602      	mov	r2, r0
 8011766:	460b      	mov	r3, r1
 8011768:	4650      	mov	r0, sl
 801176a:	4659      	mov	r1, fp
 801176c:	f7ee fe04 	bl	8000378 <__aeabi_dsub>
 8011770:	4602      	mov	r2, r0
 8011772:	460b      	mov	r3, r1
 8011774:	4680      	mov	r8, r0
 8011776:	4689      	mov	r9, r1
 8011778:	4630      	mov	r0, r6
 801177a:	4639      	mov	r1, r7
 801177c:	f7ee fdfe 	bl	800037c <__adddf3>
 8011780:	2000      	movs	r0, #0
 8011782:	4632      	mov	r2, r6
 8011784:	463b      	mov	r3, r7
 8011786:	4604      	mov	r4, r0
 8011788:	460d      	mov	r5, r1
 801178a:	f7ee fdf5 	bl	8000378 <__aeabi_dsub>
 801178e:	4602      	mov	r2, r0
 8011790:	460b      	mov	r3, r1
 8011792:	4640      	mov	r0, r8
 8011794:	4649      	mov	r1, r9
 8011796:	f7ee fdef 	bl	8000378 <__aeabi_dsub>
 801179a:	9b04      	ldr	r3, [sp, #16]
 801179c:	9a06      	ldr	r2, [sp, #24]
 801179e:	3b01      	subs	r3, #1
 80117a0:	4313      	orrs	r3, r2
 80117a2:	4682      	mov	sl, r0
 80117a4:	468b      	mov	fp, r1
 80117a6:	f040 81e7 	bne.w	8011b78 <__ieee754_pow+0x700>
 80117aa:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8011860 <__ieee754_pow+0x3e8>
 80117ae:	eeb0 8a47 	vmov.f32	s16, s14
 80117b2:	eef0 8a67 	vmov.f32	s17, s15
 80117b6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80117ba:	2600      	movs	r6, #0
 80117bc:	4632      	mov	r2, r6
 80117be:	463b      	mov	r3, r7
 80117c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80117c4:	f7ee fdd8 	bl	8000378 <__aeabi_dsub>
 80117c8:	4622      	mov	r2, r4
 80117ca:	462b      	mov	r3, r5
 80117cc:	f7ee ff8c 	bl	80006e8 <__aeabi_dmul>
 80117d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80117d4:	4680      	mov	r8, r0
 80117d6:	4689      	mov	r9, r1
 80117d8:	4650      	mov	r0, sl
 80117da:	4659      	mov	r1, fp
 80117dc:	f7ee ff84 	bl	80006e8 <__aeabi_dmul>
 80117e0:	4602      	mov	r2, r0
 80117e2:	460b      	mov	r3, r1
 80117e4:	4640      	mov	r0, r8
 80117e6:	4649      	mov	r1, r9
 80117e8:	f7ee fdc8 	bl	800037c <__adddf3>
 80117ec:	4632      	mov	r2, r6
 80117ee:	463b      	mov	r3, r7
 80117f0:	4680      	mov	r8, r0
 80117f2:	4689      	mov	r9, r1
 80117f4:	4620      	mov	r0, r4
 80117f6:	4629      	mov	r1, r5
 80117f8:	f7ee ff76 	bl	80006e8 <__aeabi_dmul>
 80117fc:	460b      	mov	r3, r1
 80117fe:	4604      	mov	r4, r0
 8011800:	460d      	mov	r5, r1
 8011802:	4602      	mov	r2, r0
 8011804:	4649      	mov	r1, r9
 8011806:	4640      	mov	r0, r8
 8011808:	f7ee fdb8 	bl	800037c <__adddf3>
 801180c:	4b19      	ldr	r3, [pc, #100]	; (8011874 <__ieee754_pow+0x3fc>)
 801180e:	4299      	cmp	r1, r3
 8011810:	ec45 4b19 	vmov	d9, r4, r5
 8011814:	4606      	mov	r6, r0
 8011816:	460f      	mov	r7, r1
 8011818:	468b      	mov	fp, r1
 801181a:	f340 82f0 	ble.w	8011dfe <__ieee754_pow+0x986>
 801181e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8011822:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8011826:	4303      	orrs	r3, r0
 8011828:	f000 81e4 	beq.w	8011bf4 <__ieee754_pow+0x77c>
 801182c:	ec51 0b18 	vmov	r0, r1, d8
 8011830:	2200      	movs	r2, #0
 8011832:	2300      	movs	r3, #0
 8011834:	f7ef f9ca 	bl	8000bcc <__aeabi_dcmplt>
 8011838:	3800      	subs	r0, #0
 801183a:	bf18      	it	ne
 801183c:	2001      	movne	r0, #1
 801183e:	e72b      	b.n	8011698 <__ieee754_pow+0x220>
 8011840:	60000000 	.word	0x60000000
 8011844:	3ff71547 	.word	0x3ff71547
 8011848:	f85ddf44 	.word	0xf85ddf44
 801184c:	3e54ae0b 	.word	0x3e54ae0b
 8011850:	55555555 	.word	0x55555555
 8011854:	3fd55555 	.word	0x3fd55555
 8011858:	652b82fe 	.word	0x652b82fe
 801185c:	3ff71547 	.word	0x3ff71547
 8011860:	00000000 	.word	0x00000000
 8011864:	bff00000 	.word	0xbff00000
 8011868:	3ff00000 	.word	0x3ff00000
 801186c:	3fd00000 	.word	0x3fd00000
 8011870:	3fe00000 	.word	0x3fe00000
 8011874:	408fffff 	.word	0x408fffff
 8011878:	4bd5      	ldr	r3, [pc, #852]	; (8011bd0 <__ieee754_pow+0x758>)
 801187a:	402b      	ands	r3, r5
 801187c:	2200      	movs	r2, #0
 801187e:	b92b      	cbnz	r3, 801188c <__ieee754_pow+0x414>
 8011880:	4bd4      	ldr	r3, [pc, #848]	; (8011bd4 <__ieee754_pow+0x75c>)
 8011882:	f7ee ff31 	bl	80006e8 <__aeabi_dmul>
 8011886:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801188a:	460c      	mov	r4, r1
 801188c:	1523      	asrs	r3, r4, #20
 801188e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011892:	4413      	add	r3, r2
 8011894:	9305      	str	r3, [sp, #20]
 8011896:	4bd0      	ldr	r3, [pc, #832]	; (8011bd8 <__ieee754_pow+0x760>)
 8011898:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801189c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80118a0:	429c      	cmp	r4, r3
 80118a2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80118a6:	dd08      	ble.n	80118ba <__ieee754_pow+0x442>
 80118a8:	4bcc      	ldr	r3, [pc, #816]	; (8011bdc <__ieee754_pow+0x764>)
 80118aa:	429c      	cmp	r4, r3
 80118ac:	f340 8162 	ble.w	8011b74 <__ieee754_pow+0x6fc>
 80118b0:	9b05      	ldr	r3, [sp, #20]
 80118b2:	3301      	adds	r3, #1
 80118b4:	9305      	str	r3, [sp, #20]
 80118b6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80118ba:	2400      	movs	r4, #0
 80118bc:	00e3      	lsls	r3, r4, #3
 80118be:	9307      	str	r3, [sp, #28]
 80118c0:	4bc7      	ldr	r3, [pc, #796]	; (8011be0 <__ieee754_pow+0x768>)
 80118c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80118c6:	ed93 7b00 	vldr	d7, [r3]
 80118ca:	4629      	mov	r1, r5
 80118cc:	ec53 2b17 	vmov	r2, r3, d7
 80118d0:	eeb0 9a47 	vmov.f32	s18, s14
 80118d4:	eef0 9a67 	vmov.f32	s19, s15
 80118d8:	4682      	mov	sl, r0
 80118da:	f7ee fd4d 	bl	8000378 <__aeabi_dsub>
 80118de:	4652      	mov	r2, sl
 80118e0:	4606      	mov	r6, r0
 80118e2:	460f      	mov	r7, r1
 80118e4:	462b      	mov	r3, r5
 80118e6:	ec51 0b19 	vmov	r0, r1, d9
 80118ea:	f7ee fd47 	bl	800037c <__adddf3>
 80118ee:	4602      	mov	r2, r0
 80118f0:	460b      	mov	r3, r1
 80118f2:	2000      	movs	r0, #0
 80118f4:	49bb      	ldr	r1, [pc, #748]	; (8011be4 <__ieee754_pow+0x76c>)
 80118f6:	f7ef f821 	bl	800093c <__aeabi_ddiv>
 80118fa:	ec41 0b1a 	vmov	d10, r0, r1
 80118fe:	4602      	mov	r2, r0
 8011900:	460b      	mov	r3, r1
 8011902:	4630      	mov	r0, r6
 8011904:	4639      	mov	r1, r7
 8011906:	f7ee feef 	bl	80006e8 <__aeabi_dmul>
 801190a:	2300      	movs	r3, #0
 801190c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011910:	9302      	str	r3, [sp, #8]
 8011912:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8011916:	46ab      	mov	fp, r5
 8011918:	106d      	asrs	r5, r5, #1
 801191a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801191e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8011922:	ec41 0b18 	vmov	d8, r0, r1
 8011926:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801192a:	2200      	movs	r2, #0
 801192c:	4640      	mov	r0, r8
 801192e:	4649      	mov	r1, r9
 8011930:	4614      	mov	r4, r2
 8011932:	461d      	mov	r5, r3
 8011934:	f7ee fed8 	bl	80006e8 <__aeabi_dmul>
 8011938:	4602      	mov	r2, r0
 801193a:	460b      	mov	r3, r1
 801193c:	4630      	mov	r0, r6
 801193e:	4639      	mov	r1, r7
 8011940:	f7ee fd1a 	bl	8000378 <__aeabi_dsub>
 8011944:	ec53 2b19 	vmov	r2, r3, d9
 8011948:	4606      	mov	r6, r0
 801194a:	460f      	mov	r7, r1
 801194c:	4620      	mov	r0, r4
 801194e:	4629      	mov	r1, r5
 8011950:	f7ee fd12 	bl	8000378 <__aeabi_dsub>
 8011954:	4602      	mov	r2, r0
 8011956:	460b      	mov	r3, r1
 8011958:	4650      	mov	r0, sl
 801195a:	4659      	mov	r1, fp
 801195c:	f7ee fd0c 	bl	8000378 <__aeabi_dsub>
 8011960:	4642      	mov	r2, r8
 8011962:	464b      	mov	r3, r9
 8011964:	f7ee fec0 	bl	80006e8 <__aeabi_dmul>
 8011968:	4602      	mov	r2, r0
 801196a:	460b      	mov	r3, r1
 801196c:	4630      	mov	r0, r6
 801196e:	4639      	mov	r1, r7
 8011970:	f7ee fd02 	bl	8000378 <__aeabi_dsub>
 8011974:	ec53 2b1a 	vmov	r2, r3, d10
 8011978:	f7ee feb6 	bl	80006e8 <__aeabi_dmul>
 801197c:	ec53 2b18 	vmov	r2, r3, d8
 8011980:	ec41 0b19 	vmov	d9, r0, r1
 8011984:	ec51 0b18 	vmov	r0, r1, d8
 8011988:	f7ee feae 	bl	80006e8 <__aeabi_dmul>
 801198c:	a37c      	add	r3, pc, #496	; (adr r3, 8011b80 <__ieee754_pow+0x708>)
 801198e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011992:	4604      	mov	r4, r0
 8011994:	460d      	mov	r5, r1
 8011996:	f7ee fea7 	bl	80006e8 <__aeabi_dmul>
 801199a:	a37b      	add	r3, pc, #492	; (adr r3, 8011b88 <__ieee754_pow+0x710>)
 801199c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119a0:	f7ee fcec 	bl	800037c <__adddf3>
 80119a4:	4622      	mov	r2, r4
 80119a6:	462b      	mov	r3, r5
 80119a8:	f7ee fe9e 	bl	80006e8 <__aeabi_dmul>
 80119ac:	a378      	add	r3, pc, #480	; (adr r3, 8011b90 <__ieee754_pow+0x718>)
 80119ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119b2:	f7ee fce3 	bl	800037c <__adddf3>
 80119b6:	4622      	mov	r2, r4
 80119b8:	462b      	mov	r3, r5
 80119ba:	f7ee fe95 	bl	80006e8 <__aeabi_dmul>
 80119be:	a376      	add	r3, pc, #472	; (adr r3, 8011b98 <__ieee754_pow+0x720>)
 80119c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119c4:	f7ee fcda 	bl	800037c <__adddf3>
 80119c8:	4622      	mov	r2, r4
 80119ca:	462b      	mov	r3, r5
 80119cc:	f7ee fe8c 	bl	80006e8 <__aeabi_dmul>
 80119d0:	a373      	add	r3, pc, #460	; (adr r3, 8011ba0 <__ieee754_pow+0x728>)
 80119d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119d6:	f7ee fcd1 	bl	800037c <__adddf3>
 80119da:	4622      	mov	r2, r4
 80119dc:	462b      	mov	r3, r5
 80119de:	f7ee fe83 	bl	80006e8 <__aeabi_dmul>
 80119e2:	a371      	add	r3, pc, #452	; (adr r3, 8011ba8 <__ieee754_pow+0x730>)
 80119e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119e8:	f7ee fcc8 	bl	800037c <__adddf3>
 80119ec:	4622      	mov	r2, r4
 80119ee:	4606      	mov	r6, r0
 80119f0:	460f      	mov	r7, r1
 80119f2:	462b      	mov	r3, r5
 80119f4:	4620      	mov	r0, r4
 80119f6:	4629      	mov	r1, r5
 80119f8:	f7ee fe76 	bl	80006e8 <__aeabi_dmul>
 80119fc:	4602      	mov	r2, r0
 80119fe:	460b      	mov	r3, r1
 8011a00:	4630      	mov	r0, r6
 8011a02:	4639      	mov	r1, r7
 8011a04:	f7ee fe70 	bl	80006e8 <__aeabi_dmul>
 8011a08:	4642      	mov	r2, r8
 8011a0a:	4604      	mov	r4, r0
 8011a0c:	460d      	mov	r5, r1
 8011a0e:	464b      	mov	r3, r9
 8011a10:	ec51 0b18 	vmov	r0, r1, d8
 8011a14:	f7ee fcb2 	bl	800037c <__adddf3>
 8011a18:	ec53 2b19 	vmov	r2, r3, d9
 8011a1c:	f7ee fe64 	bl	80006e8 <__aeabi_dmul>
 8011a20:	4622      	mov	r2, r4
 8011a22:	462b      	mov	r3, r5
 8011a24:	f7ee fcaa 	bl	800037c <__adddf3>
 8011a28:	4642      	mov	r2, r8
 8011a2a:	4682      	mov	sl, r0
 8011a2c:	468b      	mov	fp, r1
 8011a2e:	464b      	mov	r3, r9
 8011a30:	4640      	mov	r0, r8
 8011a32:	4649      	mov	r1, r9
 8011a34:	f7ee fe58 	bl	80006e8 <__aeabi_dmul>
 8011a38:	4b6b      	ldr	r3, [pc, #428]	; (8011be8 <__ieee754_pow+0x770>)
 8011a3a:	2200      	movs	r2, #0
 8011a3c:	4606      	mov	r6, r0
 8011a3e:	460f      	mov	r7, r1
 8011a40:	f7ee fc9c 	bl	800037c <__adddf3>
 8011a44:	4652      	mov	r2, sl
 8011a46:	465b      	mov	r3, fp
 8011a48:	f7ee fc98 	bl	800037c <__adddf3>
 8011a4c:	2000      	movs	r0, #0
 8011a4e:	4604      	mov	r4, r0
 8011a50:	460d      	mov	r5, r1
 8011a52:	4602      	mov	r2, r0
 8011a54:	460b      	mov	r3, r1
 8011a56:	4640      	mov	r0, r8
 8011a58:	4649      	mov	r1, r9
 8011a5a:	f7ee fe45 	bl	80006e8 <__aeabi_dmul>
 8011a5e:	4b62      	ldr	r3, [pc, #392]	; (8011be8 <__ieee754_pow+0x770>)
 8011a60:	4680      	mov	r8, r0
 8011a62:	4689      	mov	r9, r1
 8011a64:	2200      	movs	r2, #0
 8011a66:	4620      	mov	r0, r4
 8011a68:	4629      	mov	r1, r5
 8011a6a:	f7ee fc85 	bl	8000378 <__aeabi_dsub>
 8011a6e:	4632      	mov	r2, r6
 8011a70:	463b      	mov	r3, r7
 8011a72:	f7ee fc81 	bl	8000378 <__aeabi_dsub>
 8011a76:	4602      	mov	r2, r0
 8011a78:	460b      	mov	r3, r1
 8011a7a:	4650      	mov	r0, sl
 8011a7c:	4659      	mov	r1, fp
 8011a7e:	f7ee fc7b 	bl	8000378 <__aeabi_dsub>
 8011a82:	ec53 2b18 	vmov	r2, r3, d8
 8011a86:	f7ee fe2f 	bl	80006e8 <__aeabi_dmul>
 8011a8a:	4622      	mov	r2, r4
 8011a8c:	4606      	mov	r6, r0
 8011a8e:	460f      	mov	r7, r1
 8011a90:	462b      	mov	r3, r5
 8011a92:	ec51 0b19 	vmov	r0, r1, d9
 8011a96:	f7ee fe27 	bl	80006e8 <__aeabi_dmul>
 8011a9a:	4602      	mov	r2, r0
 8011a9c:	460b      	mov	r3, r1
 8011a9e:	4630      	mov	r0, r6
 8011aa0:	4639      	mov	r1, r7
 8011aa2:	f7ee fc6b 	bl	800037c <__adddf3>
 8011aa6:	4606      	mov	r6, r0
 8011aa8:	460f      	mov	r7, r1
 8011aaa:	4602      	mov	r2, r0
 8011aac:	460b      	mov	r3, r1
 8011aae:	4640      	mov	r0, r8
 8011ab0:	4649      	mov	r1, r9
 8011ab2:	f7ee fc63 	bl	800037c <__adddf3>
 8011ab6:	a33e      	add	r3, pc, #248	; (adr r3, 8011bb0 <__ieee754_pow+0x738>)
 8011ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011abc:	2000      	movs	r0, #0
 8011abe:	4604      	mov	r4, r0
 8011ac0:	460d      	mov	r5, r1
 8011ac2:	f7ee fe11 	bl	80006e8 <__aeabi_dmul>
 8011ac6:	4642      	mov	r2, r8
 8011ac8:	ec41 0b18 	vmov	d8, r0, r1
 8011acc:	464b      	mov	r3, r9
 8011ace:	4620      	mov	r0, r4
 8011ad0:	4629      	mov	r1, r5
 8011ad2:	f7ee fc51 	bl	8000378 <__aeabi_dsub>
 8011ad6:	4602      	mov	r2, r0
 8011ad8:	460b      	mov	r3, r1
 8011ada:	4630      	mov	r0, r6
 8011adc:	4639      	mov	r1, r7
 8011ade:	f7ee fc4b 	bl	8000378 <__aeabi_dsub>
 8011ae2:	a335      	add	r3, pc, #212	; (adr r3, 8011bb8 <__ieee754_pow+0x740>)
 8011ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ae8:	f7ee fdfe 	bl	80006e8 <__aeabi_dmul>
 8011aec:	a334      	add	r3, pc, #208	; (adr r3, 8011bc0 <__ieee754_pow+0x748>)
 8011aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011af2:	4606      	mov	r6, r0
 8011af4:	460f      	mov	r7, r1
 8011af6:	4620      	mov	r0, r4
 8011af8:	4629      	mov	r1, r5
 8011afa:	f7ee fdf5 	bl	80006e8 <__aeabi_dmul>
 8011afe:	4602      	mov	r2, r0
 8011b00:	460b      	mov	r3, r1
 8011b02:	4630      	mov	r0, r6
 8011b04:	4639      	mov	r1, r7
 8011b06:	f7ee fc39 	bl	800037c <__adddf3>
 8011b0a:	9a07      	ldr	r2, [sp, #28]
 8011b0c:	4b37      	ldr	r3, [pc, #220]	; (8011bec <__ieee754_pow+0x774>)
 8011b0e:	4413      	add	r3, r2
 8011b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b14:	f7ee fc32 	bl	800037c <__adddf3>
 8011b18:	4682      	mov	sl, r0
 8011b1a:	9805      	ldr	r0, [sp, #20]
 8011b1c:	468b      	mov	fp, r1
 8011b1e:	f7ee fd79 	bl	8000614 <__aeabi_i2d>
 8011b22:	9a07      	ldr	r2, [sp, #28]
 8011b24:	4b32      	ldr	r3, [pc, #200]	; (8011bf0 <__ieee754_pow+0x778>)
 8011b26:	4413      	add	r3, r2
 8011b28:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011b2c:	4606      	mov	r6, r0
 8011b2e:	460f      	mov	r7, r1
 8011b30:	4652      	mov	r2, sl
 8011b32:	465b      	mov	r3, fp
 8011b34:	ec51 0b18 	vmov	r0, r1, d8
 8011b38:	f7ee fc20 	bl	800037c <__adddf3>
 8011b3c:	4642      	mov	r2, r8
 8011b3e:	464b      	mov	r3, r9
 8011b40:	f7ee fc1c 	bl	800037c <__adddf3>
 8011b44:	4632      	mov	r2, r6
 8011b46:	463b      	mov	r3, r7
 8011b48:	f7ee fc18 	bl	800037c <__adddf3>
 8011b4c:	2000      	movs	r0, #0
 8011b4e:	4632      	mov	r2, r6
 8011b50:	463b      	mov	r3, r7
 8011b52:	4604      	mov	r4, r0
 8011b54:	460d      	mov	r5, r1
 8011b56:	f7ee fc0f 	bl	8000378 <__aeabi_dsub>
 8011b5a:	4642      	mov	r2, r8
 8011b5c:	464b      	mov	r3, r9
 8011b5e:	f7ee fc0b 	bl	8000378 <__aeabi_dsub>
 8011b62:	ec53 2b18 	vmov	r2, r3, d8
 8011b66:	f7ee fc07 	bl	8000378 <__aeabi_dsub>
 8011b6a:	4602      	mov	r2, r0
 8011b6c:	460b      	mov	r3, r1
 8011b6e:	4650      	mov	r0, sl
 8011b70:	4659      	mov	r1, fp
 8011b72:	e610      	b.n	8011796 <__ieee754_pow+0x31e>
 8011b74:	2401      	movs	r4, #1
 8011b76:	e6a1      	b.n	80118bc <__ieee754_pow+0x444>
 8011b78:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8011bc8 <__ieee754_pow+0x750>
 8011b7c:	e617      	b.n	80117ae <__ieee754_pow+0x336>
 8011b7e:	bf00      	nop
 8011b80:	4a454eef 	.word	0x4a454eef
 8011b84:	3fca7e28 	.word	0x3fca7e28
 8011b88:	93c9db65 	.word	0x93c9db65
 8011b8c:	3fcd864a 	.word	0x3fcd864a
 8011b90:	a91d4101 	.word	0xa91d4101
 8011b94:	3fd17460 	.word	0x3fd17460
 8011b98:	518f264d 	.word	0x518f264d
 8011b9c:	3fd55555 	.word	0x3fd55555
 8011ba0:	db6fabff 	.word	0xdb6fabff
 8011ba4:	3fdb6db6 	.word	0x3fdb6db6
 8011ba8:	33333303 	.word	0x33333303
 8011bac:	3fe33333 	.word	0x3fe33333
 8011bb0:	e0000000 	.word	0xe0000000
 8011bb4:	3feec709 	.word	0x3feec709
 8011bb8:	dc3a03fd 	.word	0xdc3a03fd
 8011bbc:	3feec709 	.word	0x3feec709
 8011bc0:	145b01f5 	.word	0x145b01f5
 8011bc4:	be3e2fe0 	.word	0xbe3e2fe0
 8011bc8:	00000000 	.word	0x00000000
 8011bcc:	3ff00000 	.word	0x3ff00000
 8011bd0:	7ff00000 	.word	0x7ff00000
 8011bd4:	43400000 	.word	0x43400000
 8011bd8:	0003988e 	.word	0x0003988e
 8011bdc:	000bb679 	.word	0x000bb679
 8011be0:	08018958 	.word	0x08018958
 8011be4:	3ff00000 	.word	0x3ff00000
 8011be8:	40080000 	.word	0x40080000
 8011bec:	08018978 	.word	0x08018978
 8011bf0:	08018968 	.word	0x08018968
 8011bf4:	a3b3      	add	r3, pc, #716	; (adr r3, 8011ec4 <__ieee754_pow+0xa4c>)
 8011bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bfa:	4640      	mov	r0, r8
 8011bfc:	4649      	mov	r1, r9
 8011bfe:	f7ee fbbd 	bl	800037c <__adddf3>
 8011c02:	4622      	mov	r2, r4
 8011c04:	ec41 0b1a 	vmov	d10, r0, r1
 8011c08:	462b      	mov	r3, r5
 8011c0a:	4630      	mov	r0, r6
 8011c0c:	4639      	mov	r1, r7
 8011c0e:	f7ee fbb3 	bl	8000378 <__aeabi_dsub>
 8011c12:	4602      	mov	r2, r0
 8011c14:	460b      	mov	r3, r1
 8011c16:	ec51 0b1a 	vmov	r0, r1, d10
 8011c1a:	f7ee fff5 	bl	8000c08 <__aeabi_dcmpgt>
 8011c1e:	2800      	cmp	r0, #0
 8011c20:	f47f ae04 	bne.w	801182c <__ieee754_pow+0x3b4>
 8011c24:	4aa2      	ldr	r2, [pc, #648]	; (8011eb0 <__ieee754_pow+0xa38>)
 8011c26:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011c2a:	4293      	cmp	r3, r2
 8011c2c:	f340 8107 	ble.w	8011e3e <__ieee754_pow+0x9c6>
 8011c30:	151b      	asrs	r3, r3, #20
 8011c32:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8011c36:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8011c3a:	fa4a fa03 	asr.w	sl, sl, r3
 8011c3e:	44da      	add	sl, fp
 8011c40:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8011c44:	489b      	ldr	r0, [pc, #620]	; (8011eb4 <__ieee754_pow+0xa3c>)
 8011c46:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8011c4a:	4108      	asrs	r0, r1
 8011c4c:	ea00 030a 	and.w	r3, r0, sl
 8011c50:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8011c54:	f1c1 0114 	rsb	r1, r1, #20
 8011c58:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8011c5c:	fa4a fa01 	asr.w	sl, sl, r1
 8011c60:	f1bb 0f00 	cmp.w	fp, #0
 8011c64:	f04f 0200 	mov.w	r2, #0
 8011c68:	4620      	mov	r0, r4
 8011c6a:	4629      	mov	r1, r5
 8011c6c:	bfb8      	it	lt
 8011c6e:	f1ca 0a00 	rsblt	sl, sl, #0
 8011c72:	f7ee fb81 	bl	8000378 <__aeabi_dsub>
 8011c76:	ec41 0b19 	vmov	d9, r0, r1
 8011c7a:	4642      	mov	r2, r8
 8011c7c:	464b      	mov	r3, r9
 8011c7e:	ec51 0b19 	vmov	r0, r1, d9
 8011c82:	f7ee fb7b 	bl	800037c <__adddf3>
 8011c86:	a37a      	add	r3, pc, #488	; (adr r3, 8011e70 <__ieee754_pow+0x9f8>)
 8011c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c8c:	2000      	movs	r0, #0
 8011c8e:	4604      	mov	r4, r0
 8011c90:	460d      	mov	r5, r1
 8011c92:	f7ee fd29 	bl	80006e8 <__aeabi_dmul>
 8011c96:	ec53 2b19 	vmov	r2, r3, d9
 8011c9a:	4606      	mov	r6, r0
 8011c9c:	460f      	mov	r7, r1
 8011c9e:	4620      	mov	r0, r4
 8011ca0:	4629      	mov	r1, r5
 8011ca2:	f7ee fb69 	bl	8000378 <__aeabi_dsub>
 8011ca6:	4602      	mov	r2, r0
 8011ca8:	460b      	mov	r3, r1
 8011caa:	4640      	mov	r0, r8
 8011cac:	4649      	mov	r1, r9
 8011cae:	f7ee fb63 	bl	8000378 <__aeabi_dsub>
 8011cb2:	a371      	add	r3, pc, #452	; (adr r3, 8011e78 <__ieee754_pow+0xa00>)
 8011cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cb8:	f7ee fd16 	bl	80006e8 <__aeabi_dmul>
 8011cbc:	a370      	add	r3, pc, #448	; (adr r3, 8011e80 <__ieee754_pow+0xa08>)
 8011cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cc2:	4680      	mov	r8, r0
 8011cc4:	4689      	mov	r9, r1
 8011cc6:	4620      	mov	r0, r4
 8011cc8:	4629      	mov	r1, r5
 8011cca:	f7ee fd0d 	bl	80006e8 <__aeabi_dmul>
 8011cce:	4602      	mov	r2, r0
 8011cd0:	460b      	mov	r3, r1
 8011cd2:	4640      	mov	r0, r8
 8011cd4:	4649      	mov	r1, r9
 8011cd6:	f7ee fb51 	bl	800037c <__adddf3>
 8011cda:	4604      	mov	r4, r0
 8011cdc:	460d      	mov	r5, r1
 8011cde:	4602      	mov	r2, r0
 8011ce0:	460b      	mov	r3, r1
 8011ce2:	4630      	mov	r0, r6
 8011ce4:	4639      	mov	r1, r7
 8011ce6:	f7ee fb49 	bl	800037c <__adddf3>
 8011cea:	4632      	mov	r2, r6
 8011cec:	463b      	mov	r3, r7
 8011cee:	4680      	mov	r8, r0
 8011cf0:	4689      	mov	r9, r1
 8011cf2:	f7ee fb41 	bl	8000378 <__aeabi_dsub>
 8011cf6:	4602      	mov	r2, r0
 8011cf8:	460b      	mov	r3, r1
 8011cfa:	4620      	mov	r0, r4
 8011cfc:	4629      	mov	r1, r5
 8011cfe:	f7ee fb3b 	bl	8000378 <__aeabi_dsub>
 8011d02:	4642      	mov	r2, r8
 8011d04:	4606      	mov	r6, r0
 8011d06:	460f      	mov	r7, r1
 8011d08:	464b      	mov	r3, r9
 8011d0a:	4640      	mov	r0, r8
 8011d0c:	4649      	mov	r1, r9
 8011d0e:	f7ee fceb 	bl	80006e8 <__aeabi_dmul>
 8011d12:	a35d      	add	r3, pc, #372	; (adr r3, 8011e88 <__ieee754_pow+0xa10>)
 8011d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d18:	4604      	mov	r4, r0
 8011d1a:	460d      	mov	r5, r1
 8011d1c:	f7ee fce4 	bl	80006e8 <__aeabi_dmul>
 8011d20:	a35b      	add	r3, pc, #364	; (adr r3, 8011e90 <__ieee754_pow+0xa18>)
 8011d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d26:	f7ee fb27 	bl	8000378 <__aeabi_dsub>
 8011d2a:	4622      	mov	r2, r4
 8011d2c:	462b      	mov	r3, r5
 8011d2e:	f7ee fcdb 	bl	80006e8 <__aeabi_dmul>
 8011d32:	a359      	add	r3, pc, #356	; (adr r3, 8011e98 <__ieee754_pow+0xa20>)
 8011d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d38:	f7ee fb20 	bl	800037c <__adddf3>
 8011d3c:	4622      	mov	r2, r4
 8011d3e:	462b      	mov	r3, r5
 8011d40:	f7ee fcd2 	bl	80006e8 <__aeabi_dmul>
 8011d44:	a356      	add	r3, pc, #344	; (adr r3, 8011ea0 <__ieee754_pow+0xa28>)
 8011d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d4a:	f7ee fb15 	bl	8000378 <__aeabi_dsub>
 8011d4e:	4622      	mov	r2, r4
 8011d50:	462b      	mov	r3, r5
 8011d52:	f7ee fcc9 	bl	80006e8 <__aeabi_dmul>
 8011d56:	a354      	add	r3, pc, #336	; (adr r3, 8011ea8 <__ieee754_pow+0xa30>)
 8011d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d5c:	f7ee fb0e 	bl	800037c <__adddf3>
 8011d60:	4622      	mov	r2, r4
 8011d62:	462b      	mov	r3, r5
 8011d64:	f7ee fcc0 	bl	80006e8 <__aeabi_dmul>
 8011d68:	4602      	mov	r2, r0
 8011d6a:	460b      	mov	r3, r1
 8011d6c:	4640      	mov	r0, r8
 8011d6e:	4649      	mov	r1, r9
 8011d70:	f7ee fb02 	bl	8000378 <__aeabi_dsub>
 8011d74:	4604      	mov	r4, r0
 8011d76:	460d      	mov	r5, r1
 8011d78:	4602      	mov	r2, r0
 8011d7a:	460b      	mov	r3, r1
 8011d7c:	4640      	mov	r0, r8
 8011d7e:	4649      	mov	r1, r9
 8011d80:	f7ee fcb2 	bl	80006e8 <__aeabi_dmul>
 8011d84:	2200      	movs	r2, #0
 8011d86:	ec41 0b19 	vmov	d9, r0, r1
 8011d8a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011d8e:	4620      	mov	r0, r4
 8011d90:	4629      	mov	r1, r5
 8011d92:	f7ee faf1 	bl	8000378 <__aeabi_dsub>
 8011d96:	4602      	mov	r2, r0
 8011d98:	460b      	mov	r3, r1
 8011d9a:	ec51 0b19 	vmov	r0, r1, d9
 8011d9e:	f7ee fdcd 	bl	800093c <__aeabi_ddiv>
 8011da2:	4632      	mov	r2, r6
 8011da4:	4604      	mov	r4, r0
 8011da6:	460d      	mov	r5, r1
 8011da8:	463b      	mov	r3, r7
 8011daa:	4640      	mov	r0, r8
 8011dac:	4649      	mov	r1, r9
 8011dae:	f7ee fc9b 	bl	80006e8 <__aeabi_dmul>
 8011db2:	4632      	mov	r2, r6
 8011db4:	463b      	mov	r3, r7
 8011db6:	f7ee fae1 	bl	800037c <__adddf3>
 8011dba:	4602      	mov	r2, r0
 8011dbc:	460b      	mov	r3, r1
 8011dbe:	4620      	mov	r0, r4
 8011dc0:	4629      	mov	r1, r5
 8011dc2:	f7ee fad9 	bl	8000378 <__aeabi_dsub>
 8011dc6:	4642      	mov	r2, r8
 8011dc8:	464b      	mov	r3, r9
 8011dca:	f7ee fad5 	bl	8000378 <__aeabi_dsub>
 8011dce:	460b      	mov	r3, r1
 8011dd0:	4602      	mov	r2, r0
 8011dd2:	4939      	ldr	r1, [pc, #228]	; (8011eb8 <__ieee754_pow+0xa40>)
 8011dd4:	2000      	movs	r0, #0
 8011dd6:	f7ee facf 	bl	8000378 <__aeabi_dsub>
 8011dda:	ec41 0b10 	vmov	d0, r0, r1
 8011dde:	ee10 3a90 	vmov	r3, s1
 8011de2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8011de6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011dea:	da2b      	bge.n	8011e44 <__ieee754_pow+0x9cc>
 8011dec:	4650      	mov	r0, sl
 8011dee:	f000 facf 	bl	8012390 <scalbn>
 8011df2:	ec51 0b10 	vmov	r0, r1, d0
 8011df6:	ec53 2b18 	vmov	r2, r3, d8
 8011dfa:	f7ff bbee 	b.w	80115da <__ieee754_pow+0x162>
 8011dfe:	4b2f      	ldr	r3, [pc, #188]	; (8011ebc <__ieee754_pow+0xa44>)
 8011e00:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8011e04:	429e      	cmp	r6, r3
 8011e06:	f77f af0d 	ble.w	8011c24 <__ieee754_pow+0x7ac>
 8011e0a:	4b2d      	ldr	r3, [pc, #180]	; (8011ec0 <__ieee754_pow+0xa48>)
 8011e0c:	440b      	add	r3, r1
 8011e0e:	4303      	orrs	r3, r0
 8011e10:	d009      	beq.n	8011e26 <__ieee754_pow+0x9ae>
 8011e12:	ec51 0b18 	vmov	r0, r1, d8
 8011e16:	2200      	movs	r2, #0
 8011e18:	2300      	movs	r3, #0
 8011e1a:	f7ee fed7 	bl	8000bcc <__aeabi_dcmplt>
 8011e1e:	3800      	subs	r0, #0
 8011e20:	bf18      	it	ne
 8011e22:	2001      	movne	r0, #1
 8011e24:	e448      	b.n	80116b8 <__ieee754_pow+0x240>
 8011e26:	4622      	mov	r2, r4
 8011e28:	462b      	mov	r3, r5
 8011e2a:	f7ee faa5 	bl	8000378 <__aeabi_dsub>
 8011e2e:	4642      	mov	r2, r8
 8011e30:	464b      	mov	r3, r9
 8011e32:	f7ee fedf 	bl	8000bf4 <__aeabi_dcmpge>
 8011e36:	2800      	cmp	r0, #0
 8011e38:	f43f aef4 	beq.w	8011c24 <__ieee754_pow+0x7ac>
 8011e3c:	e7e9      	b.n	8011e12 <__ieee754_pow+0x99a>
 8011e3e:	f04f 0a00 	mov.w	sl, #0
 8011e42:	e71a      	b.n	8011c7a <__ieee754_pow+0x802>
 8011e44:	ec51 0b10 	vmov	r0, r1, d0
 8011e48:	4619      	mov	r1, r3
 8011e4a:	e7d4      	b.n	8011df6 <__ieee754_pow+0x97e>
 8011e4c:	491a      	ldr	r1, [pc, #104]	; (8011eb8 <__ieee754_pow+0xa40>)
 8011e4e:	2000      	movs	r0, #0
 8011e50:	f7ff bb31 	b.w	80114b6 <__ieee754_pow+0x3e>
 8011e54:	2000      	movs	r0, #0
 8011e56:	2100      	movs	r1, #0
 8011e58:	f7ff bb2d 	b.w	80114b6 <__ieee754_pow+0x3e>
 8011e5c:	4630      	mov	r0, r6
 8011e5e:	4639      	mov	r1, r7
 8011e60:	f7ff bb29 	b.w	80114b6 <__ieee754_pow+0x3e>
 8011e64:	9204      	str	r2, [sp, #16]
 8011e66:	f7ff bb7b 	b.w	8011560 <__ieee754_pow+0xe8>
 8011e6a:	2300      	movs	r3, #0
 8011e6c:	f7ff bb65 	b.w	801153a <__ieee754_pow+0xc2>
 8011e70:	00000000 	.word	0x00000000
 8011e74:	3fe62e43 	.word	0x3fe62e43
 8011e78:	fefa39ef 	.word	0xfefa39ef
 8011e7c:	3fe62e42 	.word	0x3fe62e42
 8011e80:	0ca86c39 	.word	0x0ca86c39
 8011e84:	be205c61 	.word	0xbe205c61
 8011e88:	72bea4d0 	.word	0x72bea4d0
 8011e8c:	3e663769 	.word	0x3e663769
 8011e90:	c5d26bf1 	.word	0xc5d26bf1
 8011e94:	3ebbbd41 	.word	0x3ebbbd41
 8011e98:	af25de2c 	.word	0xaf25de2c
 8011e9c:	3f11566a 	.word	0x3f11566a
 8011ea0:	16bebd93 	.word	0x16bebd93
 8011ea4:	3f66c16c 	.word	0x3f66c16c
 8011ea8:	5555553e 	.word	0x5555553e
 8011eac:	3fc55555 	.word	0x3fc55555
 8011eb0:	3fe00000 	.word	0x3fe00000
 8011eb4:	fff00000 	.word	0xfff00000
 8011eb8:	3ff00000 	.word	0x3ff00000
 8011ebc:	4090cbff 	.word	0x4090cbff
 8011ec0:	3f6f3400 	.word	0x3f6f3400
 8011ec4:	652b82fe 	.word	0x652b82fe
 8011ec8:	3c971547 	.word	0x3c971547
 8011ecc:	00000000 	.word	0x00000000

08011ed0 <__ieee754_rem_pio2>:
 8011ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ed4:	ed2d 8b02 	vpush	{d8}
 8011ed8:	ec55 4b10 	vmov	r4, r5, d0
 8011edc:	4bca      	ldr	r3, [pc, #808]	; (8012208 <__ieee754_rem_pio2+0x338>)
 8011ede:	b08b      	sub	sp, #44	; 0x2c
 8011ee0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8011ee4:	4598      	cmp	r8, r3
 8011ee6:	4682      	mov	sl, r0
 8011ee8:	9502      	str	r5, [sp, #8]
 8011eea:	dc08      	bgt.n	8011efe <__ieee754_rem_pio2+0x2e>
 8011eec:	2200      	movs	r2, #0
 8011eee:	2300      	movs	r3, #0
 8011ef0:	ed80 0b00 	vstr	d0, [r0]
 8011ef4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8011ef8:	f04f 0b00 	mov.w	fp, #0
 8011efc:	e028      	b.n	8011f50 <__ieee754_rem_pio2+0x80>
 8011efe:	4bc3      	ldr	r3, [pc, #780]	; (801220c <__ieee754_rem_pio2+0x33c>)
 8011f00:	4598      	cmp	r8, r3
 8011f02:	dc78      	bgt.n	8011ff6 <__ieee754_rem_pio2+0x126>
 8011f04:	9b02      	ldr	r3, [sp, #8]
 8011f06:	4ec2      	ldr	r6, [pc, #776]	; (8012210 <__ieee754_rem_pio2+0x340>)
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	ee10 0a10 	vmov	r0, s0
 8011f0e:	a3b0      	add	r3, pc, #704	; (adr r3, 80121d0 <__ieee754_rem_pio2+0x300>)
 8011f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f14:	4629      	mov	r1, r5
 8011f16:	dd39      	ble.n	8011f8c <__ieee754_rem_pio2+0xbc>
 8011f18:	f7ee fa2e 	bl	8000378 <__aeabi_dsub>
 8011f1c:	45b0      	cmp	r8, r6
 8011f1e:	4604      	mov	r4, r0
 8011f20:	460d      	mov	r5, r1
 8011f22:	d01b      	beq.n	8011f5c <__ieee754_rem_pio2+0x8c>
 8011f24:	a3ac      	add	r3, pc, #688	; (adr r3, 80121d8 <__ieee754_rem_pio2+0x308>)
 8011f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f2a:	f7ee fa25 	bl	8000378 <__aeabi_dsub>
 8011f2e:	4602      	mov	r2, r0
 8011f30:	460b      	mov	r3, r1
 8011f32:	e9ca 2300 	strd	r2, r3, [sl]
 8011f36:	4620      	mov	r0, r4
 8011f38:	4629      	mov	r1, r5
 8011f3a:	f7ee fa1d 	bl	8000378 <__aeabi_dsub>
 8011f3e:	a3a6      	add	r3, pc, #664	; (adr r3, 80121d8 <__ieee754_rem_pio2+0x308>)
 8011f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f44:	f7ee fa18 	bl	8000378 <__aeabi_dsub>
 8011f48:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011f4c:	f04f 0b01 	mov.w	fp, #1
 8011f50:	4658      	mov	r0, fp
 8011f52:	b00b      	add	sp, #44	; 0x2c
 8011f54:	ecbd 8b02 	vpop	{d8}
 8011f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f5c:	a3a0      	add	r3, pc, #640	; (adr r3, 80121e0 <__ieee754_rem_pio2+0x310>)
 8011f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f62:	f7ee fa09 	bl	8000378 <__aeabi_dsub>
 8011f66:	a3a0      	add	r3, pc, #640	; (adr r3, 80121e8 <__ieee754_rem_pio2+0x318>)
 8011f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f6c:	4604      	mov	r4, r0
 8011f6e:	460d      	mov	r5, r1
 8011f70:	f7ee fa02 	bl	8000378 <__aeabi_dsub>
 8011f74:	4602      	mov	r2, r0
 8011f76:	460b      	mov	r3, r1
 8011f78:	e9ca 2300 	strd	r2, r3, [sl]
 8011f7c:	4620      	mov	r0, r4
 8011f7e:	4629      	mov	r1, r5
 8011f80:	f7ee f9fa 	bl	8000378 <__aeabi_dsub>
 8011f84:	a398      	add	r3, pc, #608	; (adr r3, 80121e8 <__ieee754_rem_pio2+0x318>)
 8011f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f8a:	e7db      	b.n	8011f44 <__ieee754_rem_pio2+0x74>
 8011f8c:	f7ee f9f6 	bl	800037c <__adddf3>
 8011f90:	45b0      	cmp	r8, r6
 8011f92:	4604      	mov	r4, r0
 8011f94:	460d      	mov	r5, r1
 8011f96:	d016      	beq.n	8011fc6 <__ieee754_rem_pio2+0xf6>
 8011f98:	a38f      	add	r3, pc, #572	; (adr r3, 80121d8 <__ieee754_rem_pio2+0x308>)
 8011f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f9e:	f7ee f9ed 	bl	800037c <__adddf3>
 8011fa2:	4602      	mov	r2, r0
 8011fa4:	460b      	mov	r3, r1
 8011fa6:	e9ca 2300 	strd	r2, r3, [sl]
 8011faa:	4620      	mov	r0, r4
 8011fac:	4629      	mov	r1, r5
 8011fae:	f7ee f9e3 	bl	8000378 <__aeabi_dsub>
 8011fb2:	a389      	add	r3, pc, #548	; (adr r3, 80121d8 <__ieee754_rem_pio2+0x308>)
 8011fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fb8:	f7ee f9e0 	bl	800037c <__adddf3>
 8011fbc:	f04f 3bff 	mov.w	fp, #4294967295
 8011fc0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011fc4:	e7c4      	b.n	8011f50 <__ieee754_rem_pio2+0x80>
 8011fc6:	a386      	add	r3, pc, #536	; (adr r3, 80121e0 <__ieee754_rem_pio2+0x310>)
 8011fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fcc:	f7ee f9d6 	bl	800037c <__adddf3>
 8011fd0:	a385      	add	r3, pc, #532	; (adr r3, 80121e8 <__ieee754_rem_pio2+0x318>)
 8011fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fd6:	4604      	mov	r4, r0
 8011fd8:	460d      	mov	r5, r1
 8011fda:	f7ee f9cf 	bl	800037c <__adddf3>
 8011fde:	4602      	mov	r2, r0
 8011fe0:	460b      	mov	r3, r1
 8011fe2:	e9ca 2300 	strd	r2, r3, [sl]
 8011fe6:	4620      	mov	r0, r4
 8011fe8:	4629      	mov	r1, r5
 8011fea:	f7ee f9c5 	bl	8000378 <__aeabi_dsub>
 8011fee:	a37e      	add	r3, pc, #504	; (adr r3, 80121e8 <__ieee754_rem_pio2+0x318>)
 8011ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ff4:	e7e0      	b.n	8011fb8 <__ieee754_rem_pio2+0xe8>
 8011ff6:	4b87      	ldr	r3, [pc, #540]	; (8012214 <__ieee754_rem_pio2+0x344>)
 8011ff8:	4598      	cmp	r8, r3
 8011ffa:	f300 80d8 	bgt.w	80121ae <__ieee754_rem_pio2+0x2de>
 8011ffe:	f7fe fc6f 	bl	80108e0 <fabs>
 8012002:	ec55 4b10 	vmov	r4, r5, d0
 8012006:	ee10 0a10 	vmov	r0, s0
 801200a:	a379      	add	r3, pc, #484	; (adr r3, 80121f0 <__ieee754_rem_pio2+0x320>)
 801200c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012010:	4629      	mov	r1, r5
 8012012:	f7ee fb69 	bl	80006e8 <__aeabi_dmul>
 8012016:	4b80      	ldr	r3, [pc, #512]	; (8012218 <__ieee754_rem_pio2+0x348>)
 8012018:	2200      	movs	r2, #0
 801201a:	f7ee f9af 	bl	800037c <__adddf3>
 801201e:	f7ee fe13 	bl	8000c48 <__aeabi_d2iz>
 8012022:	4683      	mov	fp, r0
 8012024:	f7ee faf6 	bl	8000614 <__aeabi_i2d>
 8012028:	4602      	mov	r2, r0
 801202a:	460b      	mov	r3, r1
 801202c:	ec43 2b18 	vmov	d8, r2, r3
 8012030:	a367      	add	r3, pc, #412	; (adr r3, 80121d0 <__ieee754_rem_pio2+0x300>)
 8012032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012036:	f7ee fb57 	bl	80006e8 <__aeabi_dmul>
 801203a:	4602      	mov	r2, r0
 801203c:	460b      	mov	r3, r1
 801203e:	4620      	mov	r0, r4
 8012040:	4629      	mov	r1, r5
 8012042:	f7ee f999 	bl	8000378 <__aeabi_dsub>
 8012046:	a364      	add	r3, pc, #400	; (adr r3, 80121d8 <__ieee754_rem_pio2+0x308>)
 8012048:	e9d3 2300 	ldrd	r2, r3, [r3]
 801204c:	4606      	mov	r6, r0
 801204e:	460f      	mov	r7, r1
 8012050:	ec51 0b18 	vmov	r0, r1, d8
 8012054:	f7ee fb48 	bl	80006e8 <__aeabi_dmul>
 8012058:	f1bb 0f1f 	cmp.w	fp, #31
 801205c:	4604      	mov	r4, r0
 801205e:	460d      	mov	r5, r1
 8012060:	dc0d      	bgt.n	801207e <__ieee754_rem_pio2+0x1ae>
 8012062:	4b6e      	ldr	r3, [pc, #440]	; (801221c <__ieee754_rem_pio2+0x34c>)
 8012064:	f10b 32ff 	add.w	r2, fp, #4294967295
 8012068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801206c:	4543      	cmp	r3, r8
 801206e:	d006      	beq.n	801207e <__ieee754_rem_pio2+0x1ae>
 8012070:	4622      	mov	r2, r4
 8012072:	462b      	mov	r3, r5
 8012074:	4630      	mov	r0, r6
 8012076:	4639      	mov	r1, r7
 8012078:	f7ee f97e 	bl	8000378 <__aeabi_dsub>
 801207c:	e00e      	b.n	801209c <__ieee754_rem_pio2+0x1cc>
 801207e:	462b      	mov	r3, r5
 8012080:	4622      	mov	r2, r4
 8012082:	4630      	mov	r0, r6
 8012084:	4639      	mov	r1, r7
 8012086:	f7ee f977 	bl	8000378 <__aeabi_dsub>
 801208a:	ea4f 5328 	mov.w	r3, r8, asr #20
 801208e:	9303      	str	r3, [sp, #12]
 8012090:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012094:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8012098:	2b10      	cmp	r3, #16
 801209a:	dc02      	bgt.n	80120a2 <__ieee754_rem_pio2+0x1d2>
 801209c:	e9ca 0100 	strd	r0, r1, [sl]
 80120a0:	e039      	b.n	8012116 <__ieee754_rem_pio2+0x246>
 80120a2:	a34f      	add	r3, pc, #316	; (adr r3, 80121e0 <__ieee754_rem_pio2+0x310>)
 80120a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120a8:	ec51 0b18 	vmov	r0, r1, d8
 80120ac:	f7ee fb1c 	bl	80006e8 <__aeabi_dmul>
 80120b0:	4604      	mov	r4, r0
 80120b2:	460d      	mov	r5, r1
 80120b4:	4602      	mov	r2, r0
 80120b6:	460b      	mov	r3, r1
 80120b8:	4630      	mov	r0, r6
 80120ba:	4639      	mov	r1, r7
 80120bc:	f7ee f95c 	bl	8000378 <__aeabi_dsub>
 80120c0:	4602      	mov	r2, r0
 80120c2:	460b      	mov	r3, r1
 80120c4:	4680      	mov	r8, r0
 80120c6:	4689      	mov	r9, r1
 80120c8:	4630      	mov	r0, r6
 80120ca:	4639      	mov	r1, r7
 80120cc:	f7ee f954 	bl	8000378 <__aeabi_dsub>
 80120d0:	4622      	mov	r2, r4
 80120d2:	462b      	mov	r3, r5
 80120d4:	f7ee f950 	bl	8000378 <__aeabi_dsub>
 80120d8:	a343      	add	r3, pc, #268	; (adr r3, 80121e8 <__ieee754_rem_pio2+0x318>)
 80120da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120de:	4604      	mov	r4, r0
 80120e0:	460d      	mov	r5, r1
 80120e2:	ec51 0b18 	vmov	r0, r1, d8
 80120e6:	f7ee faff 	bl	80006e8 <__aeabi_dmul>
 80120ea:	4622      	mov	r2, r4
 80120ec:	462b      	mov	r3, r5
 80120ee:	f7ee f943 	bl	8000378 <__aeabi_dsub>
 80120f2:	4602      	mov	r2, r0
 80120f4:	460b      	mov	r3, r1
 80120f6:	4604      	mov	r4, r0
 80120f8:	460d      	mov	r5, r1
 80120fa:	4640      	mov	r0, r8
 80120fc:	4649      	mov	r1, r9
 80120fe:	f7ee f93b 	bl	8000378 <__aeabi_dsub>
 8012102:	9a03      	ldr	r2, [sp, #12]
 8012104:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012108:	1ad3      	subs	r3, r2, r3
 801210a:	2b31      	cmp	r3, #49	; 0x31
 801210c:	dc24      	bgt.n	8012158 <__ieee754_rem_pio2+0x288>
 801210e:	e9ca 0100 	strd	r0, r1, [sl]
 8012112:	4646      	mov	r6, r8
 8012114:	464f      	mov	r7, r9
 8012116:	e9da 8900 	ldrd	r8, r9, [sl]
 801211a:	4630      	mov	r0, r6
 801211c:	4642      	mov	r2, r8
 801211e:	464b      	mov	r3, r9
 8012120:	4639      	mov	r1, r7
 8012122:	f7ee f929 	bl	8000378 <__aeabi_dsub>
 8012126:	462b      	mov	r3, r5
 8012128:	4622      	mov	r2, r4
 801212a:	f7ee f925 	bl	8000378 <__aeabi_dsub>
 801212e:	9b02      	ldr	r3, [sp, #8]
 8012130:	2b00      	cmp	r3, #0
 8012132:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012136:	f6bf af0b 	bge.w	8011f50 <__ieee754_rem_pio2+0x80>
 801213a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801213e:	f8ca 3004 	str.w	r3, [sl, #4]
 8012142:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012146:	f8ca 8000 	str.w	r8, [sl]
 801214a:	f8ca 0008 	str.w	r0, [sl, #8]
 801214e:	f8ca 300c 	str.w	r3, [sl, #12]
 8012152:	f1cb 0b00 	rsb	fp, fp, #0
 8012156:	e6fb      	b.n	8011f50 <__ieee754_rem_pio2+0x80>
 8012158:	a327      	add	r3, pc, #156	; (adr r3, 80121f8 <__ieee754_rem_pio2+0x328>)
 801215a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801215e:	ec51 0b18 	vmov	r0, r1, d8
 8012162:	f7ee fac1 	bl	80006e8 <__aeabi_dmul>
 8012166:	4604      	mov	r4, r0
 8012168:	460d      	mov	r5, r1
 801216a:	4602      	mov	r2, r0
 801216c:	460b      	mov	r3, r1
 801216e:	4640      	mov	r0, r8
 8012170:	4649      	mov	r1, r9
 8012172:	f7ee f901 	bl	8000378 <__aeabi_dsub>
 8012176:	4602      	mov	r2, r0
 8012178:	460b      	mov	r3, r1
 801217a:	4606      	mov	r6, r0
 801217c:	460f      	mov	r7, r1
 801217e:	4640      	mov	r0, r8
 8012180:	4649      	mov	r1, r9
 8012182:	f7ee f8f9 	bl	8000378 <__aeabi_dsub>
 8012186:	4622      	mov	r2, r4
 8012188:	462b      	mov	r3, r5
 801218a:	f7ee f8f5 	bl	8000378 <__aeabi_dsub>
 801218e:	a31c      	add	r3, pc, #112	; (adr r3, 8012200 <__ieee754_rem_pio2+0x330>)
 8012190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012194:	4604      	mov	r4, r0
 8012196:	460d      	mov	r5, r1
 8012198:	ec51 0b18 	vmov	r0, r1, d8
 801219c:	f7ee faa4 	bl	80006e8 <__aeabi_dmul>
 80121a0:	4622      	mov	r2, r4
 80121a2:	462b      	mov	r3, r5
 80121a4:	f7ee f8e8 	bl	8000378 <__aeabi_dsub>
 80121a8:	4604      	mov	r4, r0
 80121aa:	460d      	mov	r5, r1
 80121ac:	e760      	b.n	8012070 <__ieee754_rem_pio2+0x1a0>
 80121ae:	4b1c      	ldr	r3, [pc, #112]	; (8012220 <__ieee754_rem_pio2+0x350>)
 80121b0:	4598      	cmp	r8, r3
 80121b2:	dd37      	ble.n	8012224 <__ieee754_rem_pio2+0x354>
 80121b4:	ee10 2a10 	vmov	r2, s0
 80121b8:	462b      	mov	r3, r5
 80121ba:	4620      	mov	r0, r4
 80121bc:	4629      	mov	r1, r5
 80121be:	f7ee f8db 	bl	8000378 <__aeabi_dsub>
 80121c2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80121c6:	e9ca 0100 	strd	r0, r1, [sl]
 80121ca:	e695      	b.n	8011ef8 <__ieee754_rem_pio2+0x28>
 80121cc:	f3af 8000 	nop.w
 80121d0:	54400000 	.word	0x54400000
 80121d4:	3ff921fb 	.word	0x3ff921fb
 80121d8:	1a626331 	.word	0x1a626331
 80121dc:	3dd0b461 	.word	0x3dd0b461
 80121e0:	1a600000 	.word	0x1a600000
 80121e4:	3dd0b461 	.word	0x3dd0b461
 80121e8:	2e037073 	.word	0x2e037073
 80121ec:	3ba3198a 	.word	0x3ba3198a
 80121f0:	6dc9c883 	.word	0x6dc9c883
 80121f4:	3fe45f30 	.word	0x3fe45f30
 80121f8:	2e000000 	.word	0x2e000000
 80121fc:	3ba3198a 	.word	0x3ba3198a
 8012200:	252049c1 	.word	0x252049c1
 8012204:	397b839a 	.word	0x397b839a
 8012208:	3fe921fb 	.word	0x3fe921fb
 801220c:	4002d97b 	.word	0x4002d97b
 8012210:	3ff921fb 	.word	0x3ff921fb
 8012214:	413921fb 	.word	0x413921fb
 8012218:	3fe00000 	.word	0x3fe00000
 801221c:	08018988 	.word	0x08018988
 8012220:	7fefffff 	.word	0x7fefffff
 8012224:	ea4f 5628 	mov.w	r6, r8, asr #20
 8012228:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 801222c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8012230:	4620      	mov	r0, r4
 8012232:	460d      	mov	r5, r1
 8012234:	f7ee fd08 	bl	8000c48 <__aeabi_d2iz>
 8012238:	f7ee f9ec 	bl	8000614 <__aeabi_i2d>
 801223c:	4602      	mov	r2, r0
 801223e:	460b      	mov	r3, r1
 8012240:	4620      	mov	r0, r4
 8012242:	4629      	mov	r1, r5
 8012244:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012248:	f7ee f896 	bl	8000378 <__aeabi_dsub>
 801224c:	4b21      	ldr	r3, [pc, #132]	; (80122d4 <__ieee754_rem_pio2+0x404>)
 801224e:	2200      	movs	r2, #0
 8012250:	f7ee fa4a 	bl	80006e8 <__aeabi_dmul>
 8012254:	460d      	mov	r5, r1
 8012256:	4604      	mov	r4, r0
 8012258:	f7ee fcf6 	bl	8000c48 <__aeabi_d2iz>
 801225c:	f7ee f9da 	bl	8000614 <__aeabi_i2d>
 8012260:	4602      	mov	r2, r0
 8012262:	460b      	mov	r3, r1
 8012264:	4620      	mov	r0, r4
 8012266:	4629      	mov	r1, r5
 8012268:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801226c:	f7ee f884 	bl	8000378 <__aeabi_dsub>
 8012270:	4b18      	ldr	r3, [pc, #96]	; (80122d4 <__ieee754_rem_pio2+0x404>)
 8012272:	2200      	movs	r2, #0
 8012274:	f7ee fa38 	bl	80006e8 <__aeabi_dmul>
 8012278:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801227c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8012280:	2703      	movs	r7, #3
 8012282:	2400      	movs	r4, #0
 8012284:	2500      	movs	r5, #0
 8012286:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 801228a:	4622      	mov	r2, r4
 801228c:	462b      	mov	r3, r5
 801228e:	46b9      	mov	r9, r7
 8012290:	3f01      	subs	r7, #1
 8012292:	f7ee fc91 	bl	8000bb8 <__aeabi_dcmpeq>
 8012296:	2800      	cmp	r0, #0
 8012298:	d1f5      	bne.n	8012286 <__ieee754_rem_pio2+0x3b6>
 801229a:	4b0f      	ldr	r3, [pc, #60]	; (80122d8 <__ieee754_rem_pio2+0x408>)
 801229c:	9301      	str	r3, [sp, #4]
 801229e:	2302      	movs	r3, #2
 80122a0:	9300      	str	r3, [sp, #0]
 80122a2:	4632      	mov	r2, r6
 80122a4:	464b      	mov	r3, r9
 80122a6:	4651      	mov	r1, sl
 80122a8:	a804      	add	r0, sp, #16
 80122aa:	f000 f921 	bl	80124f0 <__kernel_rem_pio2>
 80122ae:	9b02      	ldr	r3, [sp, #8]
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	4683      	mov	fp, r0
 80122b4:	f6bf ae4c 	bge.w	8011f50 <__ieee754_rem_pio2+0x80>
 80122b8:	e9da 2100 	ldrd	r2, r1, [sl]
 80122bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80122c0:	e9ca 2300 	strd	r2, r3, [sl]
 80122c4:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80122c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80122cc:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80122d0:	e73f      	b.n	8012152 <__ieee754_rem_pio2+0x282>
 80122d2:	bf00      	nop
 80122d4:	41700000 	.word	0x41700000
 80122d8:	08018a08 	.word	0x08018a08

080122dc <__ieee754_log10f>:
 80122dc:	b508      	push	{r3, lr}
 80122de:	ee10 2a10 	vmov	r2, s0
 80122e2:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 80122e6:	ed2d 8b02 	vpush	{d8}
 80122ea:	d108      	bne.n	80122fe <__ieee754_log10f+0x22>
 80122ec:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8012374 <__ieee754_log10f+0x98>
 80122f0:	eddf 7a21 	vldr	s15, [pc, #132]	; 8012378 <__ieee754_log10f+0x9c>
 80122f4:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80122f8:	ecbd 8b02 	vpop	{d8}
 80122fc:	bd08      	pop	{r3, pc}
 80122fe:	2a00      	cmp	r2, #0
 8012300:	da02      	bge.n	8012308 <__ieee754_log10f+0x2c>
 8012302:	ee30 7a40 	vsub.f32	s14, s0, s0
 8012306:	e7f3      	b.n	80122f0 <__ieee754_log10f+0x14>
 8012308:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801230c:	db02      	blt.n	8012314 <__ieee754_log10f+0x38>
 801230e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012312:	e7f1      	b.n	80122f8 <__ieee754_log10f+0x1c>
 8012314:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8012318:	bfbf      	itttt	lt
 801231a:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 801237c <__ieee754_log10f+0xa0>
 801231e:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8012322:	f06f 0118 	mvnlt.w	r1, #24
 8012326:	ee17 2a90 	vmovlt	r2, s15
 801232a:	ea4f 53e2 	mov.w	r3, r2, asr #23
 801232e:	bfa8      	it	ge
 8012330:	2100      	movge	r1, #0
 8012332:	3b7f      	subs	r3, #127	; 0x7f
 8012334:	440b      	add	r3, r1
 8012336:	0fd9      	lsrs	r1, r3, #31
 8012338:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801233c:	ee07 3a90 	vmov	s15, r3
 8012340:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8012344:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 8012348:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 801234c:	ee00 3a10 	vmov	s0, r3
 8012350:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8012354:	f000 fc1a 	bl	8012b8c <__ieee754_logf>
 8012358:	eddf 7a09 	vldr	s15, [pc, #36]	; 8012380 <__ieee754_log10f+0xa4>
 801235c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012360:	eddf 7a08 	vldr	s15, [pc, #32]	; 8012384 <__ieee754_log10f+0xa8>
 8012364:	eea8 0a27 	vfma.f32	s0, s16, s15
 8012368:	eddf 7a07 	vldr	s15, [pc, #28]	; 8012388 <__ieee754_log10f+0xac>
 801236c:	eea8 0a27 	vfma.f32	s0, s16, s15
 8012370:	e7c2      	b.n	80122f8 <__ieee754_log10f+0x1c>
 8012372:	bf00      	nop
 8012374:	cc000000 	.word	0xcc000000
 8012378:	00000000 	.word	0x00000000
 801237c:	4c000000 	.word	0x4c000000
 8012380:	3ede5bd9 	.word	0x3ede5bd9
 8012384:	355427db 	.word	0x355427db
 8012388:	3e9a2080 	.word	0x3e9a2080
 801238c:	00000000 	.word	0x00000000

08012390 <scalbn>:
 8012390:	b570      	push	{r4, r5, r6, lr}
 8012392:	ec55 4b10 	vmov	r4, r5, d0
 8012396:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801239a:	4606      	mov	r6, r0
 801239c:	462b      	mov	r3, r5
 801239e:	b999      	cbnz	r1, 80123c8 <scalbn+0x38>
 80123a0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80123a4:	4323      	orrs	r3, r4
 80123a6:	d03f      	beq.n	8012428 <scalbn+0x98>
 80123a8:	4b35      	ldr	r3, [pc, #212]	; (8012480 <scalbn+0xf0>)
 80123aa:	4629      	mov	r1, r5
 80123ac:	ee10 0a10 	vmov	r0, s0
 80123b0:	2200      	movs	r2, #0
 80123b2:	f7ee f999 	bl	80006e8 <__aeabi_dmul>
 80123b6:	4b33      	ldr	r3, [pc, #204]	; (8012484 <scalbn+0xf4>)
 80123b8:	429e      	cmp	r6, r3
 80123ba:	4604      	mov	r4, r0
 80123bc:	460d      	mov	r5, r1
 80123be:	da10      	bge.n	80123e2 <scalbn+0x52>
 80123c0:	a327      	add	r3, pc, #156	; (adr r3, 8012460 <scalbn+0xd0>)
 80123c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123c6:	e01f      	b.n	8012408 <scalbn+0x78>
 80123c8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80123cc:	4291      	cmp	r1, r2
 80123ce:	d10c      	bne.n	80123ea <scalbn+0x5a>
 80123d0:	ee10 2a10 	vmov	r2, s0
 80123d4:	4620      	mov	r0, r4
 80123d6:	4629      	mov	r1, r5
 80123d8:	f7ed ffd0 	bl	800037c <__adddf3>
 80123dc:	4604      	mov	r4, r0
 80123de:	460d      	mov	r5, r1
 80123e0:	e022      	b.n	8012428 <scalbn+0x98>
 80123e2:	460b      	mov	r3, r1
 80123e4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80123e8:	3936      	subs	r1, #54	; 0x36
 80123ea:	f24c 3250 	movw	r2, #50000	; 0xc350
 80123ee:	4296      	cmp	r6, r2
 80123f0:	dd0d      	ble.n	801240e <scalbn+0x7e>
 80123f2:	2d00      	cmp	r5, #0
 80123f4:	a11c      	add	r1, pc, #112	; (adr r1, 8012468 <scalbn+0xd8>)
 80123f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80123fa:	da02      	bge.n	8012402 <scalbn+0x72>
 80123fc:	a11c      	add	r1, pc, #112	; (adr r1, 8012470 <scalbn+0xe0>)
 80123fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012402:	a319      	add	r3, pc, #100	; (adr r3, 8012468 <scalbn+0xd8>)
 8012404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012408:	f7ee f96e 	bl	80006e8 <__aeabi_dmul>
 801240c:	e7e6      	b.n	80123dc <scalbn+0x4c>
 801240e:	1872      	adds	r2, r6, r1
 8012410:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8012414:	428a      	cmp	r2, r1
 8012416:	dcec      	bgt.n	80123f2 <scalbn+0x62>
 8012418:	2a00      	cmp	r2, #0
 801241a:	dd08      	ble.n	801242e <scalbn+0x9e>
 801241c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012420:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012424:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012428:	ec45 4b10 	vmov	d0, r4, r5
 801242c:	bd70      	pop	{r4, r5, r6, pc}
 801242e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8012432:	da08      	bge.n	8012446 <scalbn+0xb6>
 8012434:	2d00      	cmp	r5, #0
 8012436:	a10a      	add	r1, pc, #40	; (adr r1, 8012460 <scalbn+0xd0>)
 8012438:	e9d1 0100 	ldrd	r0, r1, [r1]
 801243c:	dac0      	bge.n	80123c0 <scalbn+0x30>
 801243e:	a10e      	add	r1, pc, #56	; (adr r1, 8012478 <scalbn+0xe8>)
 8012440:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012444:	e7bc      	b.n	80123c0 <scalbn+0x30>
 8012446:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801244a:	3236      	adds	r2, #54	; 0x36
 801244c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012450:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8012454:	4620      	mov	r0, r4
 8012456:	4b0c      	ldr	r3, [pc, #48]	; (8012488 <scalbn+0xf8>)
 8012458:	2200      	movs	r2, #0
 801245a:	e7d5      	b.n	8012408 <scalbn+0x78>
 801245c:	f3af 8000 	nop.w
 8012460:	c2f8f359 	.word	0xc2f8f359
 8012464:	01a56e1f 	.word	0x01a56e1f
 8012468:	8800759c 	.word	0x8800759c
 801246c:	7e37e43c 	.word	0x7e37e43c
 8012470:	8800759c 	.word	0x8800759c
 8012474:	fe37e43c 	.word	0xfe37e43c
 8012478:	c2f8f359 	.word	0xc2f8f359
 801247c:	81a56e1f 	.word	0x81a56e1f
 8012480:	43500000 	.word	0x43500000
 8012484:	ffff3cb0 	.word	0xffff3cb0
 8012488:	3c900000 	.word	0x3c900000

0801248c <with_errno>:
 801248c:	b570      	push	{r4, r5, r6, lr}
 801248e:	4604      	mov	r4, r0
 8012490:	460d      	mov	r5, r1
 8012492:	4616      	mov	r6, r2
 8012494:	f7fc fab0 	bl	800e9f8 <__errno>
 8012498:	4629      	mov	r1, r5
 801249a:	6006      	str	r6, [r0, #0]
 801249c:	4620      	mov	r0, r4
 801249e:	bd70      	pop	{r4, r5, r6, pc}

080124a0 <xflow>:
 80124a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80124a2:	4614      	mov	r4, r2
 80124a4:	461d      	mov	r5, r3
 80124a6:	b108      	cbz	r0, 80124ac <xflow+0xc>
 80124a8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80124ac:	e9cd 2300 	strd	r2, r3, [sp]
 80124b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80124b4:	4620      	mov	r0, r4
 80124b6:	4629      	mov	r1, r5
 80124b8:	f7ee f916 	bl	80006e8 <__aeabi_dmul>
 80124bc:	2222      	movs	r2, #34	; 0x22
 80124be:	b003      	add	sp, #12
 80124c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80124c4:	f7ff bfe2 	b.w	801248c <with_errno>

080124c8 <__math_uflow>:
 80124c8:	b508      	push	{r3, lr}
 80124ca:	2200      	movs	r2, #0
 80124cc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80124d0:	f7ff ffe6 	bl	80124a0 <xflow>
 80124d4:	ec41 0b10 	vmov	d0, r0, r1
 80124d8:	bd08      	pop	{r3, pc}

080124da <__math_oflow>:
 80124da:	b508      	push	{r3, lr}
 80124dc:	2200      	movs	r2, #0
 80124de:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80124e2:	f7ff ffdd 	bl	80124a0 <xflow>
 80124e6:	ec41 0b10 	vmov	d0, r0, r1
 80124ea:	bd08      	pop	{r3, pc}
 80124ec:	0000      	movs	r0, r0
	...

080124f0 <__kernel_rem_pio2>:
 80124f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124f4:	ed2d 8b02 	vpush	{d8}
 80124f8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80124fc:	f112 0f14 	cmn.w	r2, #20
 8012500:	9306      	str	r3, [sp, #24]
 8012502:	9104      	str	r1, [sp, #16]
 8012504:	4bc2      	ldr	r3, [pc, #776]	; (8012810 <__kernel_rem_pio2+0x320>)
 8012506:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8012508:	9009      	str	r0, [sp, #36]	; 0x24
 801250a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801250e:	9300      	str	r3, [sp, #0]
 8012510:	9b06      	ldr	r3, [sp, #24]
 8012512:	f103 33ff 	add.w	r3, r3, #4294967295
 8012516:	bfa8      	it	ge
 8012518:	1ed4      	subge	r4, r2, #3
 801251a:	9305      	str	r3, [sp, #20]
 801251c:	bfb2      	itee	lt
 801251e:	2400      	movlt	r4, #0
 8012520:	2318      	movge	r3, #24
 8012522:	fb94 f4f3 	sdivge	r4, r4, r3
 8012526:	f06f 0317 	mvn.w	r3, #23
 801252a:	fb04 3303 	mla	r3, r4, r3, r3
 801252e:	eb03 0a02 	add.w	sl, r3, r2
 8012532:	9b00      	ldr	r3, [sp, #0]
 8012534:	9a05      	ldr	r2, [sp, #20]
 8012536:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8012800 <__kernel_rem_pio2+0x310>
 801253a:	eb03 0802 	add.w	r8, r3, r2
 801253e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8012540:	1aa7      	subs	r7, r4, r2
 8012542:	ae20      	add	r6, sp, #128	; 0x80
 8012544:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8012548:	2500      	movs	r5, #0
 801254a:	4545      	cmp	r5, r8
 801254c:	dd13      	ble.n	8012576 <__kernel_rem_pio2+0x86>
 801254e:	9b06      	ldr	r3, [sp, #24]
 8012550:	aa20      	add	r2, sp, #128	; 0x80
 8012552:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8012556:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 801255a:	f04f 0800 	mov.w	r8, #0
 801255e:	9b00      	ldr	r3, [sp, #0]
 8012560:	4598      	cmp	r8, r3
 8012562:	dc31      	bgt.n	80125c8 <__kernel_rem_pio2+0xd8>
 8012564:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8012800 <__kernel_rem_pio2+0x310>
 8012568:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801256c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012570:	462f      	mov	r7, r5
 8012572:	2600      	movs	r6, #0
 8012574:	e01b      	b.n	80125ae <__kernel_rem_pio2+0xbe>
 8012576:	42ef      	cmn	r7, r5
 8012578:	d407      	bmi.n	801258a <__kernel_rem_pio2+0x9a>
 801257a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801257e:	f7ee f849 	bl	8000614 <__aeabi_i2d>
 8012582:	e8e6 0102 	strd	r0, r1, [r6], #8
 8012586:	3501      	adds	r5, #1
 8012588:	e7df      	b.n	801254a <__kernel_rem_pio2+0x5a>
 801258a:	ec51 0b18 	vmov	r0, r1, d8
 801258e:	e7f8      	b.n	8012582 <__kernel_rem_pio2+0x92>
 8012590:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012594:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8012598:	f7ee f8a6 	bl	80006e8 <__aeabi_dmul>
 801259c:	4602      	mov	r2, r0
 801259e:	460b      	mov	r3, r1
 80125a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80125a4:	f7ed feea 	bl	800037c <__adddf3>
 80125a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80125ac:	3601      	adds	r6, #1
 80125ae:	9b05      	ldr	r3, [sp, #20]
 80125b0:	429e      	cmp	r6, r3
 80125b2:	f1a7 0708 	sub.w	r7, r7, #8
 80125b6:	ddeb      	ble.n	8012590 <__kernel_rem_pio2+0xa0>
 80125b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80125bc:	f108 0801 	add.w	r8, r8, #1
 80125c0:	ecab 7b02 	vstmia	fp!, {d7}
 80125c4:	3508      	adds	r5, #8
 80125c6:	e7ca      	b.n	801255e <__kernel_rem_pio2+0x6e>
 80125c8:	9b00      	ldr	r3, [sp, #0]
 80125ca:	aa0c      	add	r2, sp, #48	; 0x30
 80125cc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80125d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80125d2:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80125d4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80125d8:	9c00      	ldr	r4, [sp, #0]
 80125da:	930a      	str	r3, [sp, #40]	; 0x28
 80125dc:	00e3      	lsls	r3, r4, #3
 80125de:	9308      	str	r3, [sp, #32]
 80125e0:	ab98      	add	r3, sp, #608	; 0x260
 80125e2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80125e6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80125ea:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 80125ee:	ab70      	add	r3, sp, #448	; 0x1c0
 80125f0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80125f4:	46c3      	mov	fp, r8
 80125f6:	46a1      	mov	r9, r4
 80125f8:	f1b9 0f00 	cmp.w	r9, #0
 80125fc:	f1a5 0508 	sub.w	r5, r5, #8
 8012600:	dc77      	bgt.n	80126f2 <__kernel_rem_pio2+0x202>
 8012602:	ec47 6b10 	vmov	d0, r6, r7
 8012606:	4650      	mov	r0, sl
 8012608:	f7ff fec2 	bl	8012390 <scalbn>
 801260c:	ec57 6b10 	vmov	r6, r7, d0
 8012610:	2200      	movs	r2, #0
 8012612:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8012616:	ee10 0a10 	vmov	r0, s0
 801261a:	4639      	mov	r1, r7
 801261c:	f7ee f864 	bl	80006e8 <__aeabi_dmul>
 8012620:	ec41 0b10 	vmov	d0, r0, r1
 8012624:	f000 fba4 	bl	8012d70 <floor>
 8012628:	4b7a      	ldr	r3, [pc, #488]	; (8012814 <__kernel_rem_pio2+0x324>)
 801262a:	ec51 0b10 	vmov	r0, r1, d0
 801262e:	2200      	movs	r2, #0
 8012630:	f7ee f85a 	bl	80006e8 <__aeabi_dmul>
 8012634:	4602      	mov	r2, r0
 8012636:	460b      	mov	r3, r1
 8012638:	4630      	mov	r0, r6
 801263a:	4639      	mov	r1, r7
 801263c:	f7ed fe9c 	bl	8000378 <__aeabi_dsub>
 8012640:	460f      	mov	r7, r1
 8012642:	4606      	mov	r6, r0
 8012644:	f7ee fb00 	bl	8000c48 <__aeabi_d2iz>
 8012648:	9002      	str	r0, [sp, #8]
 801264a:	f7ed ffe3 	bl	8000614 <__aeabi_i2d>
 801264e:	4602      	mov	r2, r0
 8012650:	460b      	mov	r3, r1
 8012652:	4630      	mov	r0, r6
 8012654:	4639      	mov	r1, r7
 8012656:	f7ed fe8f 	bl	8000378 <__aeabi_dsub>
 801265a:	f1ba 0f00 	cmp.w	sl, #0
 801265e:	4606      	mov	r6, r0
 8012660:	460f      	mov	r7, r1
 8012662:	dd6d      	ble.n	8012740 <__kernel_rem_pio2+0x250>
 8012664:	1e61      	subs	r1, r4, #1
 8012666:	ab0c      	add	r3, sp, #48	; 0x30
 8012668:	9d02      	ldr	r5, [sp, #8]
 801266a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801266e:	f1ca 0018 	rsb	r0, sl, #24
 8012672:	fa43 f200 	asr.w	r2, r3, r0
 8012676:	4415      	add	r5, r2
 8012678:	4082      	lsls	r2, r0
 801267a:	1a9b      	subs	r3, r3, r2
 801267c:	aa0c      	add	r2, sp, #48	; 0x30
 801267e:	9502      	str	r5, [sp, #8]
 8012680:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8012684:	f1ca 0217 	rsb	r2, sl, #23
 8012688:	fa43 fb02 	asr.w	fp, r3, r2
 801268c:	f1bb 0f00 	cmp.w	fp, #0
 8012690:	dd65      	ble.n	801275e <__kernel_rem_pio2+0x26e>
 8012692:	9b02      	ldr	r3, [sp, #8]
 8012694:	2200      	movs	r2, #0
 8012696:	3301      	adds	r3, #1
 8012698:	9302      	str	r3, [sp, #8]
 801269a:	4615      	mov	r5, r2
 801269c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80126a0:	4294      	cmp	r4, r2
 80126a2:	f300 809f 	bgt.w	80127e4 <__kernel_rem_pio2+0x2f4>
 80126a6:	f1ba 0f00 	cmp.w	sl, #0
 80126aa:	dd07      	ble.n	80126bc <__kernel_rem_pio2+0x1cc>
 80126ac:	f1ba 0f01 	cmp.w	sl, #1
 80126b0:	f000 80c1 	beq.w	8012836 <__kernel_rem_pio2+0x346>
 80126b4:	f1ba 0f02 	cmp.w	sl, #2
 80126b8:	f000 80c7 	beq.w	801284a <__kernel_rem_pio2+0x35a>
 80126bc:	f1bb 0f02 	cmp.w	fp, #2
 80126c0:	d14d      	bne.n	801275e <__kernel_rem_pio2+0x26e>
 80126c2:	4632      	mov	r2, r6
 80126c4:	463b      	mov	r3, r7
 80126c6:	4954      	ldr	r1, [pc, #336]	; (8012818 <__kernel_rem_pio2+0x328>)
 80126c8:	2000      	movs	r0, #0
 80126ca:	f7ed fe55 	bl	8000378 <__aeabi_dsub>
 80126ce:	4606      	mov	r6, r0
 80126d0:	460f      	mov	r7, r1
 80126d2:	2d00      	cmp	r5, #0
 80126d4:	d043      	beq.n	801275e <__kernel_rem_pio2+0x26e>
 80126d6:	4650      	mov	r0, sl
 80126d8:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8012808 <__kernel_rem_pio2+0x318>
 80126dc:	f7ff fe58 	bl	8012390 <scalbn>
 80126e0:	4630      	mov	r0, r6
 80126e2:	4639      	mov	r1, r7
 80126e4:	ec53 2b10 	vmov	r2, r3, d0
 80126e8:	f7ed fe46 	bl	8000378 <__aeabi_dsub>
 80126ec:	4606      	mov	r6, r0
 80126ee:	460f      	mov	r7, r1
 80126f0:	e035      	b.n	801275e <__kernel_rem_pio2+0x26e>
 80126f2:	4b4a      	ldr	r3, [pc, #296]	; (801281c <__kernel_rem_pio2+0x32c>)
 80126f4:	2200      	movs	r2, #0
 80126f6:	4630      	mov	r0, r6
 80126f8:	4639      	mov	r1, r7
 80126fa:	f7ed fff5 	bl	80006e8 <__aeabi_dmul>
 80126fe:	f7ee faa3 	bl	8000c48 <__aeabi_d2iz>
 8012702:	f7ed ff87 	bl	8000614 <__aeabi_i2d>
 8012706:	4602      	mov	r2, r0
 8012708:	460b      	mov	r3, r1
 801270a:	ec43 2b18 	vmov	d8, r2, r3
 801270e:	4b44      	ldr	r3, [pc, #272]	; (8012820 <__kernel_rem_pio2+0x330>)
 8012710:	2200      	movs	r2, #0
 8012712:	f7ed ffe9 	bl	80006e8 <__aeabi_dmul>
 8012716:	4602      	mov	r2, r0
 8012718:	460b      	mov	r3, r1
 801271a:	4630      	mov	r0, r6
 801271c:	4639      	mov	r1, r7
 801271e:	f7ed fe2b 	bl	8000378 <__aeabi_dsub>
 8012722:	f7ee fa91 	bl	8000c48 <__aeabi_d2iz>
 8012726:	e9d5 2300 	ldrd	r2, r3, [r5]
 801272a:	f84b 0b04 	str.w	r0, [fp], #4
 801272e:	ec51 0b18 	vmov	r0, r1, d8
 8012732:	f7ed fe23 	bl	800037c <__adddf3>
 8012736:	f109 39ff 	add.w	r9, r9, #4294967295
 801273a:	4606      	mov	r6, r0
 801273c:	460f      	mov	r7, r1
 801273e:	e75b      	b.n	80125f8 <__kernel_rem_pio2+0x108>
 8012740:	d106      	bne.n	8012750 <__kernel_rem_pio2+0x260>
 8012742:	1e63      	subs	r3, r4, #1
 8012744:	aa0c      	add	r2, sp, #48	; 0x30
 8012746:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801274a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 801274e:	e79d      	b.n	801268c <__kernel_rem_pio2+0x19c>
 8012750:	4b34      	ldr	r3, [pc, #208]	; (8012824 <__kernel_rem_pio2+0x334>)
 8012752:	2200      	movs	r2, #0
 8012754:	f7ee fa4e 	bl	8000bf4 <__aeabi_dcmpge>
 8012758:	2800      	cmp	r0, #0
 801275a:	d140      	bne.n	80127de <__kernel_rem_pio2+0x2ee>
 801275c:	4683      	mov	fp, r0
 801275e:	2200      	movs	r2, #0
 8012760:	2300      	movs	r3, #0
 8012762:	4630      	mov	r0, r6
 8012764:	4639      	mov	r1, r7
 8012766:	f7ee fa27 	bl	8000bb8 <__aeabi_dcmpeq>
 801276a:	2800      	cmp	r0, #0
 801276c:	f000 80c1 	beq.w	80128f2 <__kernel_rem_pio2+0x402>
 8012770:	1e65      	subs	r5, r4, #1
 8012772:	462b      	mov	r3, r5
 8012774:	2200      	movs	r2, #0
 8012776:	9900      	ldr	r1, [sp, #0]
 8012778:	428b      	cmp	r3, r1
 801277a:	da6d      	bge.n	8012858 <__kernel_rem_pio2+0x368>
 801277c:	2a00      	cmp	r2, #0
 801277e:	f000 808a 	beq.w	8012896 <__kernel_rem_pio2+0x3a6>
 8012782:	ab0c      	add	r3, sp, #48	; 0x30
 8012784:	f1aa 0a18 	sub.w	sl, sl, #24
 8012788:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801278c:	2b00      	cmp	r3, #0
 801278e:	f000 80ae 	beq.w	80128ee <__kernel_rem_pio2+0x3fe>
 8012792:	4650      	mov	r0, sl
 8012794:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8012808 <__kernel_rem_pio2+0x318>
 8012798:	f7ff fdfa 	bl	8012390 <scalbn>
 801279c:	1c6b      	adds	r3, r5, #1
 801279e:	00da      	lsls	r2, r3, #3
 80127a0:	9205      	str	r2, [sp, #20]
 80127a2:	ec57 6b10 	vmov	r6, r7, d0
 80127a6:	aa70      	add	r2, sp, #448	; 0x1c0
 80127a8:	f8df 9070 	ldr.w	r9, [pc, #112]	; 801281c <__kernel_rem_pio2+0x32c>
 80127ac:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 80127b0:	462c      	mov	r4, r5
 80127b2:	f04f 0800 	mov.w	r8, #0
 80127b6:	2c00      	cmp	r4, #0
 80127b8:	f280 80d4 	bge.w	8012964 <__kernel_rem_pio2+0x474>
 80127bc:	462c      	mov	r4, r5
 80127be:	2c00      	cmp	r4, #0
 80127c0:	f2c0 8102 	blt.w	80129c8 <__kernel_rem_pio2+0x4d8>
 80127c4:	4b18      	ldr	r3, [pc, #96]	; (8012828 <__kernel_rem_pio2+0x338>)
 80127c6:	461e      	mov	r6, r3
 80127c8:	ab70      	add	r3, sp, #448	; 0x1c0
 80127ca:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 80127ce:	1b2b      	subs	r3, r5, r4
 80127d0:	f04f 0900 	mov.w	r9, #0
 80127d4:	f04f 0a00 	mov.w	sl, #0
 80127d8:	2700      	movs	r7, #0
 80127da:	9306      	str	r3, [sp, #24]
 80127dc:	e0e6      	b.n	80129ac <__kernel_rem_pio2+0x4bc>
 80127de:	f04f 0b02 	mov.w	fp, #2
 80127e2:	e756      	b.n	8012692 <__kernel_rem_pio2+0x1a2>
 80127e4:	f8d8 3000 	ldr.w	r3, [r8]
 80127e8:	bb05      	cbnz	r5, 801282c <__kernel_rem_pio2+0x33c>
 80127ea:	b123      	cbz	r3, 80127f6 <__kernel_rem_pio2+0x306>
 80127ec:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80127f0:	f8c8 3000 	str.w	r3, [r8]
 80127f4:	2301      	movs	r3, #1
 80127f6:	3201      	adds	r2, #1
 80127f8:	f108 0804 	add.w	r8, r8, #4
 80127fc:	461d      	mov	r5, r3
 80127fe:	e74f      	b.n	80126a0 <__kernel_rem_pio2+0x1b0>
	...
 801280c:	3ff00000 	.word	0x3ff00000
 8012810:	08018b50 	.word	0x08018b50
 8012814:	40200000 	.word	0x40200000
 8012818:	3ff00000 	.word	0x3ff00000
 801281c:	3e700000 	.word	0x3e700000
 8012820:	41700000 	.word	0x41700000
 8012824:	3fe00000 	.word	0x3fe00000
 8012828:	08018b10 	.word	0x08018b10
 801282c:	1acb      	subs	r3, r1, r3
 801282e:	f8c8 3000 	str.w	r3, [r8]
 8012832:	462b      	mov	r3, r5
 8012834:	e7df      	b.n	80127f6 <__kernel_rem_pio2+0x306>
 8012836:	1e62      	subs	r2, r4, #1
 8012838:	ab0c      	add	r3, sp, #48	; 0x30
 801283a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801283e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8012842:	a90c      	add	r1, sp, #48	; 0x30
 8012844:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8012848:	e738      	b.n	80126bc <__kernel_rem_pio2+0x1cc>
 801284a:	1e62      	subs	r2, r4, #1
 801284c:	ab0c      	add	r3, sp, #48	; 0x30
 801284e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012852:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8012856:	e7f4      	b.n	8012842 <__kernel_rem_pio2+0x352>
 8012858:	a90c      	add	r1, sp, #48	; 0x30
 801285a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801285e:	3b01      	subs	r3, #1
 8012860:	430a      	orrs	r2, r1
 8012862:	e788      	b.n	8012776 <__kernel_rem_pio2+0x286>
 8012864:	3301      	adds	r3, #1
 8012866:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801286a:	2900      	cmp	r1, #0
 801286c:	d0fa      	beq.n	8012864 <__kernel_rem_pio2+0x374>
 801286e:	9a08      	ldr	r2, [sp, #32]
 8012870:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8012874:	446a      	add	r2, sp
 8012876:	3a98      	subs	r2, #152	; 0x98
 8012878:	9208      	str	r2, [sp, #32]
 801287a:	9a06      	ldr	r2, [sp, #24]
 801287c:	a920      	add	r1, sp, #128	; 0x80
 801287e:	18a2      	adds	r2, r4, r2
 8012880:	18e3      	adds	r3, r4, r3
 8012882:	f104 0801 	add.w	r8, r4, #1
 8012886:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 801288a:	9302      	str	r3, [sp, #8]
 801288c:	9b02      	ldr	r3, [sp, #8]
 801288e:	4543      	cmp	r3, r8
 8012890:	da04      	bge.n	801289c <__kernel_rem_pio2+0x3ac>
 8012892:	461c      	mov	r4, r3
 8012894:	e6a2      	b.n	80125dc <__kernel_rem_pio2+0xec>
 8012896:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012898:	2301      	movs	r3, #1
 801289a:	e7e4      	b.n	8012866 <__kernel_rem_pio2+0x376>
 801289c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801289e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80128a2:	f7ed feb7 	bl	8000614 <__aeabi_i2d>
 80128a6:	e8e5 0102 	strd	r0, r1, [r5], #8
 80128aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80128ac:	46ab      	mov	fp, r5
 80128ae:	461c      	mov	r4, r3
 80128b0:	f04f 0900 	mov.w	r9, #0
 80128b4:	2600      	movs	r6, #0
 80128b6:	2700      	movs	r7, #0
 80128b8:	9b05      	ldr	r3, [sp, #20]
 80128ba:	4599      	cmp	r9, r3
 80128bc:	dd06      	ble.n	80128cc <__kernel_rem_pio2+0x3dc>
 80128be:	9b08      	ldr	r3, [sp, #32]
 80128c0:	e8e3 6702 	strd	r6, r7, [r3], #8
 80128c4:	f108 0801 	add.w	r8, r8, #1
 80128c8:	9308      	str	r3, [sp, #32]
 80128ca:	e7df      	b.n	801288c <__kernel_rem_pio2+0x39c>
 80128cc:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80128d0:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80128d4:	f7ed ff08 	bl	80006e8 <__aeabi_dmul>
 80128d8:	4602      	mov	r2, r0
 80128da:	460b      	mov	r3, r1
 80128dc:	4630      	mov	r0, r6
 80128de:	4639      	mov	r1, r7
 80128e0:	f7ed fd4c 	bl	800037c <__adddf3>
 80128e4:	f109 0901 	add.w	r9, r9, #1
 80128e8:	4606      	mov	r6, r0
 80128ea:	460f      	mov	r7, r1
 80128ec:	e7e4      	b.n	80128b8 <__kernel_rem_pio2+0x3c8>
 80128ee:	3d01      	subs	r5, #1
 80128f0:	e747      	b.n	8012782 <__kernel_rem_pio2+0x292>
 80128f2:	ec47 6b10 	vmov	d0, r6, r7
 80128f6:	f1ca 0000 	rsb	r0, sl, #0
 80128fa:	f7ff fd49 	bl	8012390 <scalbn>
 80128fe:	ec57 6b10 	vmov	r6, r7, d0
 8012902:	4ba0      	ldr	r3, [pc, #640]	; (8012b84 <__kernel_rem_pio2+0x694>)
 8012904:	ee10 0a10 	vmov	r0, s0
 8012908:	2200      	movs	r2, #0
 801290a:	4639      	mov	r1, r7
 801290c:	f7ee f972 	bl	8000bf4 <__aeabi_dcmpge>
 8012910:	b1f8      	cbz	r0, 8012952 <__kernel_rem_pio2+0x462>
 8012912:	4b9d      	ldr	r3, [pc, #628]	; (8012b88 <__kernel_rem_pio2+0x698>)
 8012914:	2200      	movs	r2, #0
 8012916:	4630      	mov	r0, r6
 8012918:	4639      	mov	r1, r7
 801291a:	f7ed fee5 	bl	80006e8 <__aeabi_dmul>
 801291e:	f7ee f993 	bl	8000c48 <__aeabi_d2iz>
 8012922:	4680      	mov	r8, r0
 8012924:	f7ed fe76 	bl	8000614 <__aeabi_i2d>
 8012928:	4b96      	ldr	r3, [pc, #600]	; (8012b84 <__kernel_rem_pio2+0x694>)
 801292a:	2200      	movs	r2, #0
 801292c:	f7ed fedc 	bl	80006e8 <__aeabi_dmul>
 8012930:	460b      	mov	r3, r1
 8012932:	4602      	mov	r2, r0
 8012934:	4639      	mov	r1, r7
 8012936:	4630      	mov	r0, r6
 8012938:	f7ed fd1e 	bl	8000378 <__aeabi_dsub>
 801293c:	f7ee f984 	bl	8000c48 <__aeabi_d2iz>
 8012940:	1c65      	adds	r5, r4, #1
 8012942:	ab0c      	add	r3, sp, #48	; 0x30
 8012944:	f10a 0a18 	add.w	sl, sl, #24
 8012948:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801294c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8012950:	e71f      	b.n	8012792 <__kernel_rem_pio2+0x2a2>
 8012952:	4630      	mov	r0, r6
 8012954:	4639      	mov	r1, r7
 8012956:	f7ee f977 	bl	8000c48 <__aeabi_d2iz>
 801295a:	ab0c      	add	r3, sp, #48	; 0x30
 801295c:	4625      	mov	r5, r4
 801295e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8012962:	e716      	b.n	8012792 <__kernel_rem_pio2+0x2a2>
 8012964:	ab0c      	add	r3, sp, #48	; 0x30
 8012966:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801296a:	f7ed fe53 	bl	8000614 <__aeabi_i2d>
 801296e:	4632      	mov	r2, r6
 8012970:	463b      	mov	r3, r7
 8012972:	f7ed feb9 	bl	80006e8 <__aeabi_dmul>
 8012976:	4642      	mov	r2, r8
 8012978:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 801297c:	464b      	mov	r3, r9
 801297e:	4630      	mov	r0, r6
 8012980:	4639      	mov	r1, r7
 8012982:	f7ed feb1 	bl	80006e8 <__aeabi_dmul>
 8012986:	3c01      	subs	r4, #1
 8012988:	4606      	mov	r6, r0
 801298a:	460f      	mov	r7, r1
 801298c:	e713      	b.n	80127b6 <__kernel_rem_pio2+0x2c6>
 801298e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8012992:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8012996:	f7ed fea7 	bl	80006e8 <__aeabi_dmul>
 801299a:	4602      	mov	r2, r0
 801299c:	460b      	mov	r3, r1
 801299e:	4648      	mov	r0, r9
 80129a0:	4651      	mov	r1, sl
 80129a2:	f7ed fceb 	bl	800037c <__adddf3>
 80129a6:	3701      	adds	r7, #1
 80129a8:	4681      	mov	r9, r0
 80129aa:	468a      	mov	sl, r1
 80129ac:	9b00      	ldr	r3, [sp, #0]
 80129ae:	429f      	cmp	r7, r3
 80129b0:	dc02      	bgt.n	80129b8 <__kernel_rem_pio2+0x4c8>
 80129b2:	9b06      	ldr	r3, [sp, #24]
 80129b4:	429f      	cmp	r7, r3
 80129b6:	ddea      	ble.n	801298e <__kernel_rem_pio2+0x49e>
 80129b8:	9a06      	ldr	r2, [sp, #24]
 80129ba:	ab48      	add	r3, sp, #288	; 0x120
 80129bc:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 80129c0:	e9c6 9a00 	strd	r9, sl, [r6]
 80129c4:	3c01      	subs	r4, #1
 80129c6:	e6fa      	b.n	80127be <__kernel_rem_pio2+0x2ce>
 80129c8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80129ca:	2b02      	cmp	r3, #2
 80129cc:	dc0b      	bgt.n	80129e6 <__kernel_rem_pio2+0x4f6>
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	dc39      	bgt.n	8012a46 <__kernel_rem_pio2+0x556>
 80129d2:	d05d      	beq.n	8012a90 <__kernel_rem_pio2+0x5a0>
 80129d4:	9b02      	ldr	r3, [sp, #8]
 80129d6:	f003 0007 	and.w	r0, r3, #7
 80129da:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80129de:	ecbd 8b02 	vpop	{d8}
 80129e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129e6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80129e8:	2b03      	cmp	r3, #3
 80129ea:	d1f3      	bne.n	80129d4 <__kernel_rem_pio2+0x4e4>
 80129ec:	9b05      	ldr	r3, [sp, #20]
 80129ee:	9500      	str	r5, [sp, #0]
 80129f0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80129f4:	eb0d 0403 	add.w	r4, sp, r3
 80129f8:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 80129fc:	46a2      	mov	sl, r4
 80129fe:	9b00      	ldr	r3, [sp, #0]
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	f1aa 0a08 	sub.w	sl, sl, #8
 8012a06:	dc69      	bgt.n	8012adc <__kernel_rem_pio2+0x5ec>
 8012a08:	46aa      	mov	sl, r5
 8012a0a:	f1ba 0f01 	cmp.w	sl, #1
 8012a0e:	f1a4 0408 	sub.w	r4, r4, #8
 8012a12:	f300 8083 	bgt.w	8012b1c <__kernel_rem_pio2+0x62c>
 8012a16:	9c05      	ldr	r4, [sp, #20]
 8012a18:	ab48      	add	r3, sp, #288	; 0x120
 8012a1a:	441c      	add	r4, r3
 8012a1c:	2000      	movs	r0, #0
 8012a1e:	2100      	movs	r1, #0
 8012a20:	2d01      	cmp	r5, #1
 8012a22:	f300 809a 	bgt.w	8012b5a <__kernel_rem_pio2+0x66a>
 8012a26:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8012a2a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8012a2e:	f1bb 0f00 	cmp.w	fp, #0
 8012a32:	f040 8098 	bne.w	8012b66 <__kernel_rem_pio2+0x676>
 8012a36:	9b04      	ldr	r3, [sp, #16]
 8012a38:	e9c3 7800 	strd	r7, r8, [r3]
 8012a3c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8012a40:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8012a44:	e7c6      	b.n	80129d4 <__kernel_rem_pio2+0x4e4>
 8012a46:	9e05      	ldr	r6, [sp, #20]
 8012a48:	ab48      	add	r3, sp, #288	; 0x120
 8012a4a:	441e      	add	r6, r3
 8012a4c:	462c      	mov	r4, r5
 8012a4e:	2000      	movs	r0, #0
 8012a50:	2100      	movs	r1, #0
 8012a52:	2c00      	cmp	r4, #0
 8012a54:	da33      	bge.n	8012abe <__kernel_rem_pio2+0x5ce>
 8012a56:	f1bb 0f00 	cmp.w	fp, #0
 8012a5a:	d036      	beq.n	8012aca <__kernel_rem_pio2+0x5da>
 8012a5c:	4602      	mov	r2, r0
 8012a5e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012a62:	9c04      	ldr	r4, [sp, #16]
 8012a64:	e9c4 2300 	strd	r2, r3, [r4]
 8012a68:	4602      	mov	r2, r0
 8012a6a:	460b      	mov	r3, r1
 8012a6c:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8012a70:	f7ed fc82 	bl	8000378 <__aeabi_dsub>
 8012a74:	ae4a      	add	r6, sp, #296	; 0x128
 8012a76:	2401      	movs	r4, #1
 8012a78:	42a5      	cmp	r5, r4
 8012a7a:	da29      	bge.n	8012ad0 <__kernel_rem_pio2+0x5e0>
 8012a7c:	f1bb 0f00 	cmp.w	fp, #0
 8012a80:	d002      	beq.n	8012a88 <__kernel_rem_pio2+0x598>
 8012a82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012a86:	4619      	mov	r1, r3
 8012a88:	9b04      	ldr	r3, [sp, #16]
 8012a8a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8012a8e:	e7a1      	b.n	80129d4 <__kernel_rem_pio2+0x4e4>
 8012a90:	9c05      	ldr	r4, [sp, #20]
 8012a92:	ab48      	add	r3, sp, #288	; 0x120
 8012a94:	441c      	add	r4, r3
 8012a96:	2000      	movs	r0, #0
 8012a98:	2100      	movs	r1, #0
 8012a9a:	2d00      	cmp	r5, #0
 8012a9c:	da09      	bge.n	8012ab2 <__kernel_rem_pio2+0x5c2>
 8012a9e:	f1bb 0f00 	cmp.w	fp, #0
 8012aa2:	d002      	beq.n	8012aaa <__kernel_rem_pio2+0x5ba>
 8012aa4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012aa8:	4619      	mov	r1, r3
 8012aaa:	9b04      	ldr	r3, [sp, #16]
 8012aac:	e9c3 0100 	strd	r0, r1, [r3]
 8012ab0:	e790      	b.n	80129d4 <__kernel_rem_pio2+0x4e4>
 8012ab2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012ab6:	f7ed fc61 	bl	800037c <__adddf3>
 8012aba:	3d01      	subs	r5, #1
 8012abc:	e7ed      	b.n	8012a9a <__kernel_rem_pio2+0x5aa>
 8012abe:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8012ac2:	f7ed fc5b 	bl	800037c <__adddf3>
 8012ac6:	3c01      	subs	r4, #1
 8012ac8:	e7c3      	b.n	8012a52 <__kernel_rem_pio2+0x562>
 8012aca:	4602      	mov	r2, r0
 8012acc:	460b      	mov	r3, r1
 8012ace:	e7c8      	b.n	8012a62 <__kernel_rem_pio2+0x572>
 8012ad0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8012ad4:	f7ed fc52 	bl	800037c <__adddf3>
 8012ad8:	3401      	adds	r4, #1
 8012ada:	e7cd      	b.n	8012a78 <__kernel_rem_pio2+0x588>
 8012adc:	e9da 8900 	ldrd	r8, r9, [sl]
 8012ae0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8012ae4:	9b00      	ldr	r3, [sp, #0]
 8012ae6:	3b01      	subs	r3, #1
 8012ae8:	9300      	str	r3, [sp, #0]
 8012aea:	4632      	mov	r2, r6
 8012aec:	463b      	mov	r3, r7
 8012aee:	4640      	mov	r0, r8
 8012af0:	4649      	mov	r1, r9
 8012af2:	f7ed fc43 	bl	800037c <__adddf3>
 8012af6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012afa:	4602      	mov	r2, r0
 8012afc:	460b      	mov	r3, r1
 8012afe:	4640      	mov	r0, r8
 8012b00:	4649      	mov	r1, r9
 8012b02:	f7ed fc39 	bl	8000378 <__aeabi_dsub>
 8012b06:	4632      	mov	r2, r6
 8012b08:	463b      	mov	r3, r7
 8012b0a:	f7ed fc37 	bl	800037c <__adddf3>
 8012b0e:	ed9d 7b06 	vldr	d7, [sp, #24]
 8012b12:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012b16:	ed8a 7b00 	vstr	d7, [sl]
 8012b1a:	e770      	b.n	80129fe <__kernel_rem_pio2+0x50e>
 8012b1c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8012b20:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8012b24:	4640      	mov	r0, r8
 8012b26:	4632      	mov	r2, r6
 8012b28:	463b      	mov	r3, r7
 8012b2a:	4649      	mov	r1, r9
 8012b2c:	f7ed fc26 	bl	800037c <__adddf3>
 8012b30:	e9cd 0100 	strd	r0, r1, [sp]
 8012b34:	4602      	mov	r2, r0
 8012b36:	460b      	mov	r3, r1
 8012b38:	4640      	mov	r0, r8
 8012b3a:	4649      	mov	r1, r9
 8012b3c:	f7ed fc1c 	bl	8000378 <__aeabi_dsub>
 8012b40:	4632      	mov	r2, r6
 8012b42:	463b      	mov	r3, r7
 8012b44:	f7ed fc1a 	bl	800037c <__adddf3>
 8012b48:	ed9d 7b00 	vldr	d7, [sp]
 8012b4c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012b50:	ed84 7b00 	vstr	d7, [r4]
 8012b54:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012b58:	e757      	b.n	8012a0a <__kernel_rem_pio2+0x51a>
 8012b5a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012b5e:	f7ed fc0d 	bl	800037c <__adddf3>
 8012b62:	3d01      	subs	r5, #1
 8012b64:	e75c      	b.n	8012a20 <__kernel_rem_pio2+0x530>
 8012b66:	9b04      	ldr	r3, [sp, #16]
 8012b68:	9a04      	ldr	r2, [sp, #16]
 8012b6a:	601f      	str	r7, [r3, #0]
 8012b6c:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8012b70:	605c      	str	r4, [r3, #4]
 8012b72:	609d      	str	r5, [r3, #8]
 8012b74:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8012b78:	60d3      	str	r3, [r2, #12]
 8012b7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012b7e:	6110      	str	r0, [r2, #16]
 8012b80:	6153      	str	r3, [r2, #20]
 8012b82:	e727      	b.n	80129d4 <__kernel_rem_pio2+0x4e4>
 8012b84:	41700000 	.word	0x41700000
 8012b88:	3e700000 	.word	0x3e700000

08012b8c <__ieee754_logf>:
 8012b8c:	ee10 3a10 	vmov	r3, s0
 8012b90:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8012b94:	d106      	bne.n	8012ba4 <__ieee754_logf+0x18>
 8012b96:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8012d30 <__ieee754_logf+0x1a4>
 8012b9a:	eddf 7a66 	vldr	s15, [pc, #408]	; 8012d34 <__ieee754_logf+0x1a8>
 8012b9e:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8012ba2:	4770      	bx	lr
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	da02      	bge.n	8012bae <__ieee754_logf+0x22>
 8012ba8:	ee30 7a40 	vsub.f32	s14, s0, s0
 8012bac:	e7f5      	b.n	8012b9a <__ieee754_logf+0xe>
 8012bae:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012bb2:	db02      	blt.n	8012bba <__ieee754_logf+0x2e>
 8012bb4:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012bb8:	4770      	bx	lr
 8012bba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8012bbe:	bfb8      	it	lt
 8012bc0:	eddf 7a5d 	vldrlt	s15, [pc, #372]	; 8012d38 <__ieee754_logf+0x1ac>
 8012bc4:	485d      	ldr	r0, [pc, #372]	; (8012d3c <__ieee754_logf+0x1b0>)
 8012bc6:	bfbe      	ittt	lt
 8012bc8:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8012bcc:	f06f 0118 	mvnlt.w	r1, #24
 8012bd0:	ee17 3a90 	vmovlt	r3, s15
 8012bd4:	ea4f 52e3 	mov.w	r2, r3, asr #23
 8012bd8:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8012bdc:	4418      	add	r0, r3
 8012bde:	bfa8      	it	ge
 8012be0:	2100      	movge	r1, #0
 8012be2:	3a7f      	subs	r2, #127	; 0x7f
 8012be4:	440a      	add	r2, r1
 8012be6:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 8012bea:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 8012bee:	4319      	orrs	r1, r3
 8012bf0:	ee00 1a10 	vmov	s0, r1
 8012bf4:	4952      	ldr	r1, [pc, #328]	; (8012d40 <__ieee754_logf+0x1b4>)
 8012bf6:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 8012bfa:	f103 000f 	add.w	r0, r3, #15
 8012bfe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012c02:	4001      	ands	r1, r0
 8012c04:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012c08:	bb89      	cbnz	r1, 8012c6e <__ieee754_logf+0xe2>
 8012c0a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8012c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c12:	d10f      	bne.n	8012c34 <__ieee754_logf+0xa8>
 8012c14:	2a00      	cmp	r2, #0
 8012c16:	f000 8087 	beq.w	8012d28 <__ieee754_logf+0x19c>
 8012c1a:	ee07 2a90 	vmov	s15, r2
 8012c1e:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8012d44 <__ieee754_logf+0x1b8>
 8012c22:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8012d48 <__ieee754_logf+0x1bc>
 8012c26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012c2a:	ee27 0a80 	vmul.f32	s0, s15, s0
 8012c2e:	eea7 0a87 	vfma.f32	s0, s15, s14
 8012c32:	4770      	bx	lr
 8012c34:	eddf 6a45 	vldr	s13, [pc, #276]	; 8012d4c <__ieee754_logf+0x1c0>
 8012c38:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8012c3c:	eee0 7a66 	vfms.f32	s15, s0, s13
 8012c40:	ee20 7a00 	vmul.f32	s14, s0, s0
 8012c44:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012c48:	b912      	cbnz	r2, 8012c50 <__ieee754_logf+0xc4>
 8012c4a:	ee30 0a47 	vsub.f32	s0, s0, s14
 8012c4e:	4770      	bx	lr
 8012c50:	ee07 2a90 	vmov	s15, r2
 8012c54:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8012d44 <__ieee754_logf+0x1b8>
 8012c58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012c5c:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8012c60:	ee37 0a40 	vsub.f32	s0, s14, s0
 8012c64:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8012d48 <__ieee754_logf+0x1bc>
 8012c68:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8012c6c:	4770      	bx	lr
 8012c6e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8012c72:	ee70 7a27 	vadd.f32	s15, s0, s15
 8012c76:	eddf 5a36 	vldr	s11, [pc, #216]	; 8012d50 <__ieee754_logf+0x1c4>
 8012c7a:	eddf 4a36 	vldr	s9, [pc, #216]	; 8012d54 <__ieee754_logf+0x1c8>
 8012c7e:	4936      	ldr	r1, [pc, #216]	; (8012d58 <__ieee754_logf+0x1cc>)
 8012c80:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8012c84:	4419      	add	r1, r3
 8012c86:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 8012c8a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8012c8e:	430b      	orrs	r3, r1
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	ee07 2a90 	vmov	s15, r2
 8012c96:	ee26 5a06 	vmul.f32	s10, s12, s12
 8012c9a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8012c9e:	ee25 7a05 	vmul.f32	s14, s10, s10
 8012ca2:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8012d5c <__ieee754_logf+0x1d0>
 8012ca6:	eee7 7a25 	vfma.f32	s15, s14, s11
 8012caa:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8012d60 <__ieee754_logf+0x1d4>
 8012cae:	eee7 5a87 	vfma.f32	s11, s15, s14
 8012cb2:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8012d64 <__ieee754_logf+0x1d8>
 8012cb6:	eee7 7a24 	vfma.f32	s15, s14, s9
 8012cba:	eddf 4a2b 	vldr	s9, [pc, #172]	; 8012d68 <__ieee754_logf+0x1dc>
 8012cbe:	eee7 4a87 	vfma.f32	s9, s15, s14
 8012cc2:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8012d6c <__ieee754_logf+0x1e0>
 8012cc6:	eee4 7a87 	vfma.f32	s15, s9, s14
 8012cca:	ee67 7a85 	vmul.f32	s15, s15, s10
 8012cce:	eee5 7a87 	vfma.f32	s15, s11, s14
 8012cd2:	dd1a      	ble.n	8012d0a <__ieee754_logf+0x17e>
 8012cd4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8012cd8:	ee20 7a07 	vmul.f32	s14, s0, s14
 8012cdc:	ee27 7a00 	vmul.f32	s14, s14, s0
 8012ce0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012ce4:	ee67 7a86 	vmul.f32	s15, s15, s12
 8012ce8:	b912      	cbnz	r2, 8012cf0 <__ieee754_logf+0x164>
 8012cea:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012cee:	e7ac      	b.n	8012c4a <__ieee754_logf+0xbe>
 8012cf0:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8012d44 <__ieee754_logf+0x1b8>
 8012cf4:	eee6 7a86 	vfma.f32	s15, s13, s12
 8012cf8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012cfc:	ee37 0a40 	vsub.f32	s0, s14, s0
 8012d00:	eddf 7a11 	vldr	s15, [pc, #68]	; 8012d48 <__ieee754_logf+0x1bc>
 8012d04:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8012d08:	4770      	bx	lr
 8012d0a:	ee70 7a67 	vsub.f32	s15, s0, s15
 8012d0e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8012d12:	b912      	cbnz	r2, 8012d1a <__ieee754_logf+0x18e>
 8012d14:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012d18:	4770      	bx	lr
 8012d1a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8012d44 <__ieee754_logf+0x1b8>
 8012d1e:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8012d22:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8012d26:	e7eb      	b.n	8012d00 <__ieee754_logf+0x174>
 8012d28:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8012d34 <__ieee754_logf+0x1a8>
 8012d2c:	4770      	bx	lr
 8012d2e:	bf00      	nop
 8012d30:	cc000000 	.word	0xcc000000
 8012d34:	00000000 	.word	0x00000000
 8012d38:	4c000000 	.word	0x4c000000
 8012d3c:	004afb20 	.word	0x004afb20
 8012d40:	007ffff0 	.word	0x007ffff0
 8012d44:	3717f7d1 	.word	0x3717f7d1
 8012d48:	3f317180 	.word	0x3f317180
 8012d4c:	3eaaaaab 	.word	0x3eaaaaab
 8012d50:	3e1cd04f 	.word	0x3e1cd04f
 8012d54:	3e178897 	.word	0x3e178897
 8012d58:	ffcf5c30 	.word	0xffcf5c30
 8012d5c:	3e638e29 	.word	0x3e638e29
 8012d60:	3ecccccd 	.word	0x3ecccccd
 8012d64:	3e3a3325 	.word	0x3e3a3325
 8012d68:	3e924925 	.word	0x3e924925
 8012d6c:	3f2aaaab 	.word	0x3f2aaaab

08012d70 <floor>:
 8012d70:	ec51 0b10 	vmov	r0, r1, d0
 8012d74:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d7c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8012d80:	2e13      	cmp	r6, #19
 8012d82:	ee10 5a10 	vmov	r5, s0
 8012d86:	ee10 8a10 	vmov	r8, s0
 8012d8a:	460c      	mov	r4, r1
 8012d8c:	dc31      	bgt.n	8012df2 <floor+0x82>
 8012d8e:	2e00      	cmp	r6, #0
 8012d90:	da14      	bge.n	8012dbc <floor+0x4c>
 8012d92:	a333      	add	r3, pc, #204	; (adr r3, 8012e60 <floor+0xf0>)
 8012d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d98:	f7ed faf0 	bl	800037c <__adddf3>
 8012d9c:	2200      	movs	r2, #0
 8012d9e:	2300      	movs	r3, #0
 8012da0:	f7ed ff32 	bl	8000c08 <__aeabi_dcmpgt>
 8012da4:	b138      	cbz	r0, 8012db6 <floor+0x46>
 8012da6:	2c00      	cmp	r4, #0
 8012da8:	da53      	bge.n	8012e52 <floor+0xe2>
 8012daa:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8012dae:	4325      	orrs	r5, r4
 8012db0:	d052      	beq.n	8012e58 <floor+0xe8>
 8012db2:	4c2d      	ldr	r4, [pc, #180]	; (8012e68 <floor+0xf8>)
 8012db4:	2500      	movs	r5, #0
 8012db6:	4621      	mov	r1, r4
 8012db8:	4628      	mov	r0, r5
 8012dba:	e024      	b.n	8012e06 <floor+0x96>
 8012dbc:	4f2b      	ldr	r7, [pc, #172]	; (8012e6c <floor+0xfc>)
 8012dbe:	4137      	asrs	r7, r6
 8012dc0:	ea01 0307 	and.w	r3, r1, r7
 8012dc4:	4303      	orrs	r3, r0
 8012dc6:	d01e      	beq.n	8012e06 <floor+0x96>
 8012dc8:	a325      	add	r3, pc, #148	; (adr r3, 8012e60 <floor+0xf0>)
 8012dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dce:	f7ed fad5 	bl	800037c <__adddf3>
 8012dd2:	2200      	movs	r2, #0
 8012dd4:	2300      	movs	r3, #0
 8012dd6:	f7ed ff17 	bl	8000c08 <__aeabi_dcmpgt>
 8012dda:	2800      	cmp	r0, #0
 8012ddc:	d0eb      	beq.n	8012db6 <floor+0x46>
 8012dde:	2c00      	cmp	r4, #0
 8012de0:	bfbe      	ittt	lt
 8012de2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8012de6:	4133      	asrlt	r3, r6
 8012de8:	18e4      	addlt	r4, r4, r3
 8012dea:	ea24 0407 	bic.w	r4, r4, r7
 8012dee:	2500      	movs	r5, #0
 8012df0:	e7e1      	b.n	8012db6 <floor+0x46>
 8012df2:	2e33      	cmp	r6, #51	; 0x33
 8012df4:	dd0b      	ble.n	8012e0e <floor+0x9e>
 8012df6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8012dfa:	d104      	bne.n	8012e06 <floor+0x96>
 8012dfc:	ee10 2a10 	vmov	r2, s0
 8012e00:	460b      	mov	r3, r1
 8012e02:	f7ed fabb 	bl	800037c <__adddf3>
 8012e06:	ec41 0b10 	vmov	d0, r0, r1
 8012e0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e0e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8012e12:	f04f 37ff 	mov.w	r7, #4294967295
 8012e16:	40df      	lsrs	r7, r3
 8012e18:	4238      	tst	r0, r7
 8012e1a:	d0f4      	beq.n	8012e06 <floor+0x96>
 8012e1c:	a310      	add	r3, pc, #64	; (adr r3, 8012e60 <floor+0xf0>)
 8012e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e22:	f7ed faab 	bl	800037c <__adddf3>
 8012e26:	2200      	movs	r2, #0
 8012e28:	2300      	movs	r3, #0
 8012e2a:	f7ed feed 	bl	8000c08 <__aeabi_dcmpgt>
 8012e2e:	2800      	cmp	r0, #0
 8012e30:	d0c1      	beq.n	8012db6 <floor+0x46>
 8012e32:	2c00      	cmp	r4, #0
 8012e34:	da0a      	bge.n	8012e4c <floor+0xdc>
 8012e36:	2e14      	cmp	r6, #20
 8012e38:	d101      	bne.n	8012e3e <floor+0xce>
 8012e3a:	3401      	adds	r4, #1
 8012e3c:	e006      	b.n	8012e4c <floor+0xdc>
 8012e3e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8012e42:	2301      	movs	r3, #1
 8012e44:	40b3      	lsls	r3, r6
 8012e46:	441d      	add	r5, r3
 8012e48:	45a8      	cmp	r8, r5
 8012e4a:	d8f6      	bhi.n	8012e3a <floor+0xca>
 8012e4c:	ea25 0507 	bic.w	r5, r5, r7
 8012e50:	e7b1      	b.n	8012db6 <floor+0x46>
 8012e52:	2500      	movs	r5, #0
 8012e54:	462c      	mov	r4, r5
 8012e56:	e7ae      	b.n	8012db6 <floor+0x46>
 8012e58:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8012e5c:	e7ab      	b.n	8012db6 <floor+0x46>
 8012e5e:	bf00      	nop
 8012e60:	8800759c 	.word	0x8800759c
 8012e64:	7e37e43c 	.word	0x7e37e43c
 8012e68:	bff00000 	.word	0xbff00000
 8012e6c:	000fffff 	.word	0x000fffff

08012e70 <_init>:
 8012e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e72:	bf00      	nop
 8012e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012e76:	bc08      	pop	{r3}
 8012e78:	469e      	mov	lr, r3
 8012e7a:	4770      	bx	lr

08012e7c <_fini>:
 8012e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e7e:	bf00      	nop
 8012e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012e82:	bc08      	pop	{r3}
 8012e84:	469e      	mov	lr, r3
 8012e86:	4770      	bx	lr
