
NUCLEO-L476RG_A111.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000def8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005858  0800e088  0800e088  0001e088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080138e0  080138e0  000301e8  2**0
                  CONTENTS
  4 .ARM          00000008  080138e0  080138e0  000238e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080138e8  080138e8  000301e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080138e8  080138e8  000238e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080138ec  080138ec  000238ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  080138f0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  200001e8  08013ad8  000301e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004fc  08013ad8  000304fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 12 .comment      0000008f  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY
 13 .debug_info   000617c7  00000000  00000000  000302a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000df9d  00000000  00000000  00091a6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002110  00000000  00000000  0009fa10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000095a  00000000  00000000  000a1b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027da5  00000000  00000000  000a247a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00026d93  00000000  00000000  000ca21f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f854d  00000000  00000000  000f0fb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000079b8  00000000  00000000  001e9500  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  001f0eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000198a5  00000000  00000000  001f0f23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00003a28  00000000  00000000  0020a7c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e070 	.word	0x0800e070

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800e070 	.word	0x0800e070

080001d0 <acc_alg_biquad_q3_12_complex_direct_form_1_reverse>:
 80001d0:	f06f 0c03 	mvn.w	ip, #3
 80001d4:	3904      	subs	r1, #4
 80001d6:	e004      	b.n	80001e2 <head_complex>

080001d8 <acc_alg_biquad_q3_12_complex_direct_form_1>:
 80001d8:	f04f 0c04 	mov.w	ip, #4
 80001dc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80001e0:	4252      	negs	r2, r2

080001e2 <head_complex>:
 80001e2:	0092      	lsls	r2, r2, #2
 80001e4:	d100      	bne.n	80001e8 <init_complex>
 80001e6:	4770      	bx	lr

080001e8 <init_complex>:
 80001e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001ec:	eac3 4603 	pkhbt	r6, r3, r3, lsl #16
 80001f0:	eac3 4723 	pkhtb	r7, r3, r3, asr #16
 80001f4:	f8b0 a000 	ldrh.w	sl, [r0]
 80001f8:	8844      	ldrh	r4, [r0, #2]
 80001fa:	8883      	ldrh	r3, [r0, #4]
 80001fc:	88c5      	ldrh	r5, [r0, #6]
 80001fe:	8900      	ldrh	r0, [r0, #8]
 8000200:	f5c5 4570 	rsb	r5, r5, #61440	; 0xf000
 8000204:	eac3 4e00 	pkhbt	lr, r3, r0, lsl #16
 8000208:	4663      	mov	r3, ip
 800020a:	eac4 4c05 	pkhbt	ip, r4, r5, lsl #16
 800020e:	b234      	sxth	r4, r6
 8000210:	b23d      	sxth	r5, r7
 8000212:	ea4f 3804 	mov.w	r8, r4, lsl #12
 8000216:	ea4f 3905 	mov.w	r9, r5, lsl #12
 800021a:	0034      	movs	r4, r6
 800021c:	003d      	movs	r5, r7

0800021e <loop_complex>:
 800021e:	5888      	ldr	r0, [r1, r2]
 8000220:	fb1a 8800 	smlabb	r8, sl, r0, r8
 8000224:	fb1a 9910 	smlabt	r9, sl, r0, r9
 8000228:	fb2c 8804 	smlad	r8, ip, r4, r8
 800022c:	fb2c 9915 	smladx	r9, ip, r5, r9
 8000230:	fb4e 8806 	smlsd	r8, lr, r6, r8
 8000234:	fb4e 9917 	smlsdx	r9, lr, r7, r9
 8000238:	0026      	movs	r6, r4
 800023a:	002f      	movs	r7, r5
 800023c:	eac0 1408 	pkhbt	r4, r0, r8, lsl #4
 8000240:	eac0 3529 	pkhtb	r5, r0, r9, asr #12
 8000244:	0428      	lsls	r0, r5, #16
 8000246:	eac0 4024 	pkhtb	r0, r0, r4, asr #16
 800024a:	5088      	str	r0, [r1, r2]
 800024c:	18d2      	adds	r2, r2, r3
 800024e:	d1e6      	bne.n	800021e <loop_complex>
 8000250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08000254 <acc_alg_biquad_q3_12_direct_form_1_reverse>:
 8000254:	f06f 0c01 	mvn.w	ip, #1
 8000258:	3902      	subs	r1, #2
 800025a:	e004      	b.n	8000266 <head_real>

0800025c <acc_alg_biquad_q3_12_direct_form_1>:
 800025c:	f05f 0c02 	movs.w	ip, #2
 8000260:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8000264:	4252      	negs	r2, r2

08000266 <head_real>:
 8000266:	0052      	lsls	r2, r2, #1
 8000268:	d100      	bne.n	800026c <init_real>
 800026a:	4770      	bx	lr

0800026c <init_real>:
 800026c:	e92d 44f0 	stmdb	sp!, {r4, r5, r6, r7, sl, lr}
 8000270:	4667      	mov	r7, ip
 8000272:	f8b0 a000 	ldrh.w	sl, [r0]
 8000276:	8844      	ldrh	r4, [r0, #2]
 8000278:	8885      	ldrh	r5, [r0, #4]
 800027a:	88c6      	ldrh	r6, [r0, #6]
 800027c:	8900      	ldrh	r0, [r0, #8]
 800027e:	f5c6 4670 	rsb	r6, r6, #61440	; 0xf000
 8000282:	eac4 4c06 	pkhbt	ip, r4, r6, lsl #16
 8000286:	eac5 4e00 	pkhbt	lr, r5, r0, lsl #16
 800028a:	eac3 4403 	pkhbt	r4, r3, r3, lsl #16
 800028e:	0025      	movs	r5, r4
 8000290:	b21b      	sxth	r3, r3
 8000292:	031e      	lsls	r6, r3, #12

08000294 <loop_real>:
 8000294:	5a88      	ldrh	r0, [r1, r2]
 8000296:	fb1a 6600 	smlabb	r6, sl, r0, r6
 800029a:	fb2c 6604 	smlad	r6, ip, r4, r6
 800029e:	fb4e 6605 	smlsd	r6, lr, r5, r6
 80002a2:	0025      	movs	r5, r4
 80002a4:	eac0 1406 	pkhbt	r4, r0, r6, lsl #4
 80002a8:	1420      	asrs	r0, r4, #16
 80002aa:	5288      	strh	r0, [r1, r2]
 80002ac:	19d2      	adds	r2, r2, r7
 80002ae:	d1f1      	bne.n	8000294 <loop_real>
 80002b0:	e8bd 84f0 	ldmia.w	sp!, {r4, r5, r6, r7, sl, pc}
	...

080002c0 <memchr>:
 80002c0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002c4:	2a10      	cmp	r2, #16
 80002c6:	db2b      	blt.n	8000320 <memchr+0x60>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	d008      	beq.n	80002e0 <memchr+0x20>
 80002ce:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d2:	3a01      	subs	r2, #1
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d02d      	beq.n	8000334 <memchr+0x74>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	b342      	cbz	r2, 8000330 <memchr+0x70>
 80002de:	d1f6      	bne.n	80002ce <memchr+0xe>
 80002e0:	b4f0      	push	{r4, r5, r6, r7}
 80002e2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002e6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ea:	f022 0407 	bic.w	r4, r2, #7
 80002ee:	f07f 0700 	mvns.w	r7, #0
 80002f2:	2300      	movs	r3, #0
 80002f4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002f8:	3c08      	subs	r4, #8
 80002fa:	ea85 0501 	eor.w	r5, r5, r1
 80002fe:	ea86 0601 	eor.w	r6, r6, r1
 8000302:	fa85 f547 	uadd8	r5, r5, r7
 8000306:	faa3 f587 	sel	r5, r3, r7
 800030a:	fa86 f647 	uadd8	r6, r6, r7
 800030e:	faa5 f687 	sel	r6, r5, r7
 8000312:	b98e      	cbnz	r6, 8000338 <memchr+0x78>
 8000314:	d1ee      	bne.n	80002f4 <memchr+0x34>
 8000316:	bcf0      	pop	{r4, r5, r6, r7}
 8000318:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800031c:	f002 0207 	and.w	r2, r2, #7
 8000320:	b132      	cbz	r2, 8000330 <memchr+0x70>
 8000322:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000326:	3a01      	subs	r2, #1
 8000328:	ea83 0301 	eor.w	r3, r3, r1
 800032c:	b113      	cbz	r3, 8000334 <memchr+0x74>
 800032e:	d1f8      	bne.n	8000322 <memchr+0x62>
 8000330:	2000      	movs	r0, #0
 8000332:	4770      	bx	lr
 8000334:	3801      	subs	r0, #1
 8000336:	4770      	bx	lr
 8000338:	2d00      	cmp	r5, #0
 800033a:	bf06      	itte	eq
 800033c:	4635      	moveq	r5, r6
 800033e:	3803      	subeq	r0, #3
 8000340:	3807      	subne	r0, #7
 8000342:	f015 0f01 	tst.w	r5, #1
 8000346:	d107      	bne.n	8000358 <memchr+0x98>
 8000348:	3001      	adds	r0, #1
 800034a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800034e:	bf02      	ittt	eq
 8000350:	3001      	addeq	r0, #1
 8000352:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000356:	3001      	addeq	r0, #1
 8000358:	bcf0      	pop	{r4, r5, r6, r7}
 800035a:	3801      	subs	r0, #1
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop

08000360 <__aeabi_uldivmod>:
 8000360:	b953      	cbnz	r3, 8000378 <__aeabi_uldivmod+0x18>
 8000362:	b94a      	cbnz	r2, 8000378 <__aeabi_uldivmod+0x18>
 8000364:	2900      	cmp	r1, #0
 8000366:	bf08      	it	eq
 8000368:	2800      	cmpeq	r0, #0
 800036a:	bf1c      	itt	ne
 800036c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000370:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000374:	f000 b970 	b.w	8000658 <__aeabi_idiv0>
 8000378:	f1ad 0c08 	sub.w	ip, sp, #8
 800037c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000380:	f000 f806 	bl	8000390 <__udivmoddi4>
 8000384:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000388:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038c:	b004      	add	sp, #16
 800038e:	4770      	bx	lr

08000390 <__udivmoddi4>:
 8000390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000394:	9e08      	ldr	r6, [sp, #32]
 8000396:	460d      	mov	r5, r1
 8000398:	4604      	mov	r4, r0
 800039a:	460f      	mov	r7, r1
 800039c:	2b00      	cmp	r3, #0
 800039e:	d14a      	bne.n	8000436 <__udivmoddi4+0xa6>
 80003a0:	428a      	cmp	r2, r1
 80003a2:	4694      	mov	ip, r2
 80003a4:	d965      	bls.n	8000472 <__udivmoddi4+0xe2>
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	b143      	cbz	r3, 80003be <__udivmoddi4+0x2e>
 80003ac:	fa02 fc03 	lsl.w	ip, r2, r3
 80003b0:	f1c3 0220 	rsb	r2, r3, #32
 80003b4:	409f      	lsls	r7, r3
 80003b6:	fa20 f202 	lsr.w	r2, r0, r2
 80003ba:	4317      	orrs	r7, r2
 80003bc:	409c      	lsls	r4, r3
 80003be:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003c2:	fa1f f58c 	uxth.w	r5, ip
 80003c6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003ca:	0c22      	lsrs	r2, r4, #16
 80003cc:	fb0e 7711 	mls	r7, lr, r1, r7
 80003d0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80003d4:	fb01 f005 	mul.w	r0, r1, r5
 80003d8:	4290      	cmp	r0, r2
 80003da:	d90a      	bls.n	80003f2 <__udivmoddi4+0x62>
 80003dc:	eb1c 0202 	adds.w	r2, ip, r2
 80003e0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80003e4:	f080 811c 	bcs.w	8000620 <__udivmoddi4+0x290>
 80003e8:	4290      	cmp	r0, r2
 80003ea:	f240 8119 	bls.w	8000620 <__udivmoddi4+0x290>
 80003ee:	3902      	subs	r1, #2
 80003f0:	4462      	add	r2, ip
 80003f2:	1a12      	subs	r2, r2, r0
 80003f4:	b2a4      	uxth	r4, r4
 80003f6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003fa:	fb0e 2210 	mls	r2, lr, r0, r2
 80003fe:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000402:	fb00 f505 	mul.w	r5, r0, r5
 8000406:	42a5      	cmp	r5, r4
 8000408:	d90a      	bls.n	8000420 <__udivmoddi4+0x90>
 800040a:	eb1c 0404 	adds.w	r4, ip, r4
 800040e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000412:	f080 8107 	bcs.w	8000624 <__udivmoddi4+0x294>
 8000416:	42a5      	cmp	r5, r4
 8000418:	f240 8104 	bls.w	8000624 <__udivmoddi4+0x294>
 800041c:	4464      	add	r4, ip
 800041e:	3802      	subs	r0, #2
 8000420:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000424:	1b64      	subs	r4, r4, r5
 8000426:	2100      	movs	r1, #0
 8000428:	b11e      	cbz	r6, 8000432 <__udivmoddi4+0xa2>
 800042a:	40dc      	lsrs	r4, r3
 800042c:	2300      	movs	r3, #0
 800042e:	e9c6 4300 	strd	r4, r3, [r6]
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	428b      	cmp	r3, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0xbc>
 800043a:	2e00      	cmp	r6, #0
 800043c:	f000 80ed 	beq.w	800061a <__udivmoddi4+0x28a>
 8000440:	2100      	movs	r1, #0
 8000442:	e9c6 0500 	strd	r0, r5, [r6]
 8000446:	4608      	mov	r0, r1
 8000448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044c:	fab3 f183 	clz	r1, r3
 8000450:	2900      	cmp	r1, #0
 8000452:	d149      	bne.n	80004e8 <__udivmoddi4+0x158>
 8000454:	42ab      	cmp	r3, r5
 8000456:	d302      	bcc.n	800045e <__udivmoddi4+0xce>
 8000458:	4282      	cmp	r2, r0
 800045a:	f200 80f8 	bhi.w	800064e <__udivmoddi4+0x2be>
 800045e:	1a84      	subs	r4, r0, r2
 8000460:	eb65 0203 	sbc.w	r2, r5, r3
 8000464:	2001      	movs	r0, #1
 8000466:	4617      	mov	r7, r2
 8000468:	2e00      	cmp	r6, #0
 800046a:	d0e2      	beq.n	8000432 <__udivmoddi4+0xa2>
 800046c:	e9c6 4700 	strd	r4, r7, [r6]
 8000470:	e7df      	b.n	8000432 <__udivmoddi4+0xa2>
 8000472:	b902      	cbnz	r2, 8000476 <__udivmoddi4+0xe6>
 8000474:	deff      	udf	#255	; 0xff
 8000476:	fab2 f382 	clz	r3, r2
 800047a:	2b00      	cmp	r3, #0
 800047c:	f040 8090 	bne.w	80005a0 <__udivmoddi4+0x210>
 8000480:	1a8a      	subs	r2, r1, r2
 8000482:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000486:	fa1f fe8c 	uxth.w	lr, ip
 800048a:	2101      	movs	r1, #1
 800048c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000490:	fb07 2015 	mls	r0, r7, r5, r2
 8000494:	0c22      	lsrs	r2, r4, #16
 8000496:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800049a:	fb0e f005 	mul.w	r0, lr, r5
 800049e:	4290      	cmp	r0, r2
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x124>
 80004a2:	eb1c 0202 	adds.w	r2, ip, r2
 80004a6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004aa:	d202      	bcs.n	80004b2 <__udivmoddi4+0x122>
 80004ac:	4290      	cmp	r0, r2
 80004ae:	f200 80cb 	bhi.w	8000648 <__udivmoddi4+0x2b8>
 80004b2:	4645      	mov	r5, r8
 80004b4:	1a12      	subs	r2, r2, r0
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004bc:	fb07 2210 	mls	r2, r7, r0, r2
 80004c0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004c4:	fb0e fe00 	mul.w	lr, lr, r0
 80004c8:	45a6      	cmp	lr, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x14e>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x14c>
 80004d6:	45a6      	cmp	lr, r4
 80004d8:	f200 80bb 	bhi.w	8000652 <__udivmoddi4+0x2c2>
 80004dc:	4610      	mov	r0, r2
 80004de:	eba4 040e 	sub.w	r4, r4, lr
 80004e2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80004e6:	e79f      	b.n	8000428 <__udivmoddi4+0x98>
 80004e8:	f1c1 0720 	rsb	r7, r1, #32
 80004ec:	408b      	lsls	r3, r1
 80004ee:	fa22 fc07 	lsr.w	ip, r2, r7
 80004f2:	ea4c 0c03 	orr.w	ip, ip, r3
 80004f6:	fa05 f401 	lsl.w	r4, r5, r1
 80004fa:	fa20 f307 	lsr.w	r3, r0, r7
 80004fe:	40fd      	lsrs	r5, r7
 8000500:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000504:	4323      	orrs	r3, r4
 8000506:	fbb5 f8f9 	udiv	r8, r5, r9
 800050a:	fa1f fe8c 	uxth.w	lr, ip
 800050e:	fb09 5518 	mls	r5, r9, r8, r5
 8000512:	0c1c      	lsrs	r4, r3, #16
 8000514:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000518:	fb08 f50e 	mul.w	r5, r8, lr
 800051c:	42a5      	cmp	r5, r4
 800051e:	fa02 f201 	lsl.w	r2, r2, r1
 8000522:	fa00 f001 	lsl.w	r0, r0, r1
 8000526:	d90b      	bls.n	8000540 <__udivmoddi4+0x1b0>
 8000528:	eb1c 0404 	adds.w	r4, ip, r4
 800052c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000530:	f080 8088 	bcs.w	8000644 <__udivmoddi4+0x2b4>
 8000534:	42a5      	cmp	r5, r4
 8000536:	f240 8085 	bls.w	8000644 <__udivmoddi4+0x2b4>
 800053a:	f1a8 0802 	sub.w	r8, r8, #2
 800053e:	4464      	add	r4, ip
 8000540:	1b64      	subs	r4, r4, r5
 8000542:	b29d      	uxth	r5, r3
 8000544:	fbb4 f3f9 	udiv	r3, r4, r9
 8000548:	fb09 4413 	mls	r4, r9, r3, r4
 800054c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000550:	fb03 fe0e 	mul.w	lr, r3, lr
 8000554:	45a6      	cmp	lr, r4
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x1da>
 8000558:	eb1c 0404 	adds.w	r4, ip, r4
 800055c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000560:	d26c      	bcs.n	800063c <__udivmoddi4+0x2ac>
 8000562:	45a6      	cmp	lr, r4
 8000564:	d96a      	bls.n	800063c <__udivmoddi4+0x2ac>
 8000566:	3b02      	subs	r3, #2
 8000568:	4464      	add	r4, ip
 800056a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800056e:	fba3 9502 	umull	r9, r5, r3, r2
 8000572:	eba4 040e 	sub.w	r4, r4, lr
 8000576:	42ac      	cmp	r4, r5
 8000578:	46c8      	mov	r8, r9
 800057a:	46ae      	mov	lr, r5
 800057c:	d356      	bcc.n	800062c <__udivmoddi4+0x29c>
 800057e:	d053      	beq.n	8000628 <__udivmoddi4+0x298>
 8000580:	b156      	cbz	r6, 8000598 <__udivmoddi4+0x208>
 8000582:	ebb0 0208 	subs.w	r2, r0, r8
 8000586:	eb64 040e 	sbc.w	r4, r4, lr
 800058a:	fa04 f707 	lsl.w	r7, r4, r7
 800058e:	40ca      	lsrs	r2, r1
 8000590:	40cc      	lsrs	r4, r1
 8000592:	4317      	orrs	r7, r2
 8000594:	e9c6 7400 	strd	r7, r4, [r6]
 8000598:	4618      	mov	r0, r3
 800059a:	2100      	movs	r1, #0
 800059c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a0:	f1c3 0120 	rsb	r1, r3, #32
 80005a4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005a8:	fa20 f201 	lsr.w	r2, r0, r1
 80005ac:	fa25 f101 	lsr.w	r1, r5, r1
 80005b0:	409d      	lsls	r5, r3
 80005b2:	432a      	orrs	r2, r5
 80005b4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005b8:	fa1f fe8c 	uxth.w	lr, ip
 80005bc:	fbb1 f0f7 	udiv	r0, r1, r7
 80005c0:	fb07 1510 	mls	r5, r7, r0, r1
 80005c4:	0c11      	lsrs	r1, r2, #16
 80005c6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005ca:	fb00 f50e 	mul.w	r5, r0, lr
 80005ce:	428d      	cmp	r5, r1
 80005d0:	fa04 f403 	lsl.w	r4, r4, r3
 80005d4:	d908      	bls.n	80005e8 <__udivmoddi4+0x258>
 80005d6:	eb1c 0101 	adds.w	r1, ip, r1
 80005da:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80005de:	d22f      	bcs.n	8000640 <__udivmoddi4+0x2b0>
 80005e0:	428d      	cmp	r5, r1
 80005e2:	d92d      	bls.n	8000640 <__udivmoddi4+0x2b0>
 80005e4:	3802      	subs	r0, #2
 80005e6:	4461      	add	r1, ip
 80005e8:	1b49      	subs	r1, r1, r5
 80005ea:	b292      	uxth	r2, r2
 80005ec:	fbb1 f5f7 	udiv	r5, r1, r7
 80005f0:	fb07 1115 	mls	r1, r7, r5, r1
 80005f4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005f8:	fb05 f10e 	mul.w	r1, r5, lr
 80005fc:	4291      	cmp	r1, r2
 80005fe:	d908      	bls.n	8000612 <__udivmoddi4+0x282>
 8000600:	eb1c 0202 	adds.w	r2, ip, r2
 8000604:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000608:	d216      	bcs.n	8000638 <__udivmoddi4+0x2a8>
 800060a:	4291      	cmp	r1, r2
 800060c:	d914      	bls.n	8000638 <__udivmoddi4+0x2a8>
 800060e:	3d02      	subs	r5, #2
 8000610:	4462      	add	r2, ip
 8000612:	1a52      	subs	r2, r2, r1
 8000614:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000618:	e738      	b.n	800048c <__udivmoddi4+0xfc>
 800061a:	4631      	mov	r1, r6
 800061c:	4630      	mov	r0, r6
 800061e:	e708      	b.n	8000432 <__udivmoddi4+0xa2>
 8000620:	4639      	mov	r1, r7
 8000622:	e6e6      	b.n	80003f2 <__udivmoddi4+0x62>
 8000624:	4610      	mov	r0, r2
 8000626:	e6fb      	b.n	8000420 <__udivmoddi4+0x90>
 8000628:	4548      	cmp	r0, r9
 800062a:	d2a9      	bcs.n	8000580 <__udivmoddi4+0x1f0>
 800062c:	ebb9 0802 	subs.w	r8, r9, r2
 8000630:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000634:	3b01      	subs	r3, #1
 8000636:	e7a3      	b.n	8000580 <__udivmoddi4+0x1f0>
 8000638:	4645      	mov	r5, r8
 800063a:	e7ea      	b.n	8000612 <__udivmoddi4+0x282>
 800063c:	462b      	mov	r3, r5
 800063e:	e794      	b.n	800056a <__udivmoddi4+0x1da>
 8000640:	4640      	mov	r0, r8
 8000642:	e7d1      	b.n	80005e8 <__udivmoddi4+0x258>
 8000644:	46d0      	mov	r8, sl
 8000646:	e77b      	b.n	8000540 <__udivmoddi4+0x1b0>
 8000648:	3d02      	subs	r5, #2
 800064a:	4462      	add	r2, ip
 800064c:	e732      	b.n	80004b4 <__udivmoddi4+0x124>
 800064e:	4608      	mov	r0, r1
 8000650:	e70a      	b.n	8000468 <__udivmoddi4+0xd8>
 8000652:	4464      	add	r4, ip
 8000654:	3802      	subs	r0, #2
 8000656:	e742      	b.n	80004de <__udivmoddi4+0x14e>

08000658 <__aeabi_idiv0>:
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop

0800065c <disable_interrupts>:
 */
#define ACC_BOARD_REF_FREQ 26000000


static inline void disable_interrupts(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000660:	b672      	cpsid	i
}
 8000662:	bf00      	nop
	__disable_irq();
}
 8000664:	bf00      	nop
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr

0800066e <enable_interrupts>:


static inline void enable_interrupts(void)
{
 800066e:	b480      	push	{r7}
 8000670:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 8000672:	b662      	cpsie	i
}
 8000674:	bf00      	nop
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8000676:	f3bf 8f6f 	isb	sy
}
 800067a:	bf00      	nop
	__enable_irq();
	__ISB();
}
 800067c:	bf00      	nop
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr
	...

08000688 <acc_hal_integration_sensor_transfer>:
// Implementation of RSS HAL handlers
//----------------------------------------


static void acc_hal_integration_sensor_transfer(acc_sensor_id_t sensor_id, uint8_t *buffer, size_t buffer_size)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b088      	sub	sp, #32
 800068c:	af02      	add	r7, sp, #8
 800068e:	60f8      	str	r0, [r7, #12]
 8000690:	60b9      	str	r1, [r7, #8]
 8000692:	607a      	str	r2, [r7, #4]
	(void)sensor_id;  // Ignore parameter sensor_id

	const uint32_t SPI_TRANSMIT_RECEIVE_TIMEOUT = 5000;
 8000694:	f241 3388 	movw	r3, #5000	; 0x1388
 8000698:	617b      	str	r3, [r7, #20]

	HAL_GPIO_WritePin(A111_CS_N_GPIO_Port, A111_CS_N_Pin, GPIO_PIN_RESET);
 800069a:	2200      	movs	r2, #0
 800069c:	2140      	movs	r1, #64	; 0x40
 800069e:	480b      	ldr	r0, [pc, #44]	; (80006cc <acc_hal_integration_sensor_transfer+0x44>)
 80006a0:	f001 f954 	bl	800194c <HAL_GPIO_WritePin>

		// Enable interrupt again, the ISR will execute directly after this
		enable_interrupts();
	}
#else
	HAL_SPI_TransmitReceive(&A111_SPI_HANDLE, buffer, buffer, buffer_size, SPI_TRANSMIT_RECEIVE_TIMEOUT);
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	b29a      	uxth	r2, r3
 80006a8:	697b      	ldr	r3, [r7, #20]
 80006aa:	9300      	str	r3, [sp, #0]
 80006ac:	4613      	mov	r3, r2
 80006ae:	68ba      	ldr	r2, [r7, #8]
 80006b0:	68b9      	ldr	r1, [r7, #8]
 80006b2:	4807      	ldr	r0, [pc, #28]	; (80006d0 <acc_hal_integration_sensor_transfer+0x48>)
 80006b4:	f002 fd49 	bl	800314a <HAL_SPI_TransmitReceive>
#endif

	HAL_GPIO_WritePin(A111_CS_N_GPIO_Port, A111_CS_N_Pin, GPIO_PIN_SET);
 80006b8:	2201      	movs	r2, #1
 80006ba:	2140      	movs	r1, #64	; 0x40
 80006bc:	4803      	ldr	r0, [pc, #12]	; (80006cc <acc_hal_integration_sensor_transfer+0x44>)
 80006be:	f001 f945 	bl	800194c <HAL_GPIO_WritePin>
}
 80006c2:	bf00      	nop
 80006c4:	3718      	adds	r7, #24
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	48000400 	.word	0x48000400
 80006d0:	20000204 	.word	0x20000204

080006d4 <acc_hal_integration_sensor_power_on>:


static void acc_hal_integration_sensor_power_on(acc_sensor_id_t sensor_id)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
	(void)sensor_id;  // Ignore parameter sensor_id

	HAL_GPIO_WritePin(A111_ENABLE_GPIO_Port, A111_ENABLE_Pin, GPIO_PIN_SET);
 80006dc:	2201      	movs	r2, #1
 80006de:	2120      	movs	r1, #32
 80006e0:	4807      	ldr	r0, [pc, #28]	; (8000700 <acc_hal_integration_sensor_power_on+0x2c>)
 80006e2:	f001 f933 	bl	800194c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A111_CS_N_GPIO_Port, A111_CS_N_Pin, GPIO_PIN_SET);
 80006e6:	2201      	movs	r2, #1
 80006e8:	2140      	movs	r1, #64	; 0x40
 80006ea:	4805      	ldr	r0, [pc, #20]	; (8000700 <acc_hal_integration_sensor_power_on+0x2c>)
 80006ec:	f001 f92e 	bl	800194c <HAL_GPIO_WritePin>

	// Wait 2 ms to make sure that the sensor crystal have time to stabilize
	HAL_Delay(2);
 80006f0:	2002      	movs	r0, #2
 80006f2:	f000 fe33 	bl	800135c <HAL_Delay>
}
 80006f6:	bf00      	nop
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	48000400 	.word	0x48000400

08000704 <acc_hal_integration_sensor_power_off>:


static void acc_hal_integration_sensor_power_off(acc_sensor_id_t sensor_id)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
	(void)sensor_id;  // Ignore parameter sensor_id

	HAL_GPIO_WritePin(A111_CS_N_GPIO_Port, A111_CS_N_Pin, GPIO_PIN_RESET);
 800070c:	2200      	movs	r2, #0
 800070e:	2140      	movs	r1, #64	; 0x40
 8000710:	4807      	ldr	r0, [pc, #28]	; (8000730 <acc_hal_integration_sensor_power_off+0x2c>)
 8000712:	f001 f91b 	bl	800194c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A111_ENABLE_GPIO_Port, A111_ENABLE_Pin, GPIO_PIN_RESET);
 8000716:	2200      	movs	r2, #0
 8000718:	2120      	movs	r1, #32
 800071a:	4805      	ldr	r0, [pc, #20]	; (8000730 <acc_hal_integration_sensor_power_off+0x2c>)
 800071c:	f001 f916 	bl	800194c <HAL_GPIO_WritePin>

	// Wait after power off to leave the sensor in a known state
	// in case the application intends to enable the sensor directly
	HAL_Delay(2);
 8000720:	2002      	movs	r0, #2
 8000722:	f000 fe1b 	bl	800135c <HAL_Delay>
}
 8000726:	bf00      	nop
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	48000400 	.word	0x48000400

08000734 <acc_hal_integration_wait_for_sensor_interrupt>:


static bool acc_hal_integration_wait_for_sensor_interrupt(acc_sensor_id_t sensor_id, uint32_t timeout_ms)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	6039      	str	r1, [r7, #0]
	(void)sensor_id; // Ignore parameter sensor_id

	const uint32_t wait_begin_ms = HAL_GetTick();
 800073e:	f000 fe01 	bl	8001344 <HAL_GetTick>
 8000742:	60f8      	str	r0, [r7, #12]
	while ((HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) != GPIO_PIN_SET) &&
 8000744:	e00d      	b.n	8000762 <acc_hal_integration_wait_for_sensor_interrupt+0x2e>
	       (HAL_GetTick() - wait_begin_ms < timeout_ms))
	{
		// Wait for the GPIO interrupt
		disable_interrupts();
 8000746:	f7ff ff89 	bl	800065c <disable_interrupts>
		// Check again so that IRQ did not occur
		if (HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) != GPIO_PIN_SET)
 800074a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800074e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000752:	f001 f8e3 	bl	800191c <HAL_GPIO_ReadPin>
 8000756:	4603      	mov	r3, r0
 8000758:	2b01      	cmp	r3, #1
 800075a:	d000      	beq.n	800075e <acc_hal_integration_wait_for_sensor_interrupt+0x2a>
		{
			__WFI();
 800075c:	bf30      	wfi
		}

		// Enable interrupts again to allow pending interrupt to be handled
		enable_interrupts();
 800075e:	f7ff ff86 	bl	800066e <enable_interrupts>
	while ((HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) != GPIO_PIN_SET) &&
 8000762:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000766:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800076a:	f001 f8d7 	bl	800191c <HAL_GPIO_ReadPin>
 800076e:	4603      	mov	r3, r0
 8000770:	2b01      	cmp	r3, #1
 8000772:	d007      	beq.n	8000784 <acc_hal_integration_wait_for_sensor_interrupt+0x50>
	       (HAL_GetTick() - wait_begin_ms < timeout_ms))
 8000774:	f000 fde6 	bl	8001344 <HAL_GetTick>
 8000778:	4602      	mov	r2, r0
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	1ad3      	subs	r3, r2, r3
	while ((HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) != GPIO_PIN_SET) &&
 800077e:	683a      	ldr	r2, [r7, #0]
 8000780:	429a      	cmp	r2, r3
 8000782:	d8e0      	bhi.n	8000746 <acc_hal_integration_wait_for_sensor_interrupt+0x12>
	}

	return HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) == GPIO_PIN_SET;
 8000784:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000788:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800078c:	f001 f8c6 	bl	800191c <HAL_GPIO_ReadPin>
 8000790:	4603      	mov	r3, r0
 8000792:	2b01      	cmp	r3, #1
 8000794:	bf0c      	ite	eq
 8000796:	2301      	moveq	r3, #1
 8000798:	2300      	movne	r3, #0
 800079a:	b2db      	uxtb	r3, r3
}
 800079c:	4618      	mov	r0, r3
 800079e:	3710      	adds	r7, #16
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <acc_hal_integration_get_reference_frequency>:


static float acc_hal_integration_get_reference_frequency(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
	return ACC_BOARD_REF_FREQ;
 80007a8:	4b04      	ldr	r3, [pc, #16]	; (80007bc <acc_hal_integration_get_reference_frequency+0x18>)
 80007aa:	ee07 3a90 	vmov	s15, r3
}
 80007ae:	eeb0 0a67 	vmov.f32	s0, s15
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	4bc65d40 	.word	0x4bc65d40

080007c0 <acc_hal_integration_get_implementation>:
	.optimization.transfer16 = NULL,
};


const acc_hal_t *acc_hal_integration_get_implementation(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
	return &hal;
 80007c4:	4b02      	ldr	r3, [pc, #8]	; (80007d0 <acc_hal_integration_get_implementation+0x10>)
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr
 80007d0:	0800e240 	.word	0x0800e240

080007d4 <acc_integration_log>:

#define LOG_FORMAT "%02u:%02u:%02u.%03u (%c) (%s) %s\n"


void acc_integration_log(acc_log_level_t level, const char *module, const char *format, ...)
{
 80007d4:	b40c      	push	{r2, r3}
 80007d6:	b580      	push	{r7, lr}
 80007d8:	b0b4      	sub	sp, #208	; 0xd0
 80007da:	af04      	add	r7, sp, #16
 80007dc:	4603      	mov	r3, r0
 80007de:	6039      	str	r1, [r7, #0]
 80007e0:	71fb      	strb	r3, [r7, #7]
	char    log_buffer[LOG_BUFFER_MAX_SIZE];
	va_list ap;

	va_start(ap, format);
 80007e2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80007e6:	60bb      	str	r3, [r7, #8]

	int ret = vsnprintf(log_buffer, LOG_BUFFER_MAX_SIZE, format, ap);
 80007e8:	f107 000c 	add.w	r0, r7, #12
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80007f2:	2196      	movs	r1, #150	; 0x96
 80007f4:	f00c faec 	bl	800cdd0 <vsniprintf>
 80007f8:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc

	if (ret >= LOG_BUFFER_MAX_SIZE)
 80007fc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000800:	2b95      	cmp	r3, #149	; 0x95
 8000802:	dd0b      	ble.n	800081c <acc_integration_log+0x48>
	{
		log_buffer[LOG_BUFFER_MAX_SIZE - 4] = '.';
 8000804:	232e      	movs	r3, #46	; 0x2e
 8000806:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
		log_buffer[LOG_BUFFER_MAX_SIZE - 3] = '.';
 800080a:	232e      	movs	r3, #46	; 0x2e
 800080c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		log_buffer[LOG_BUFFER_MAX_SIZE - 2] = '.';
 8000810:	232e      	movs	r3, #46	; 0x2e
 8000812:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
		log_buffer[LOG_BUFFER_MAX_SIZE - 1] = 0;
 8000816:	2300      	movs	r3, #0
 8000818:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
	}

	uint32_t time_ms = acc_integration_get_time();
 800081c:	f000 f876 	bl	800090c <acc_integration_get_time>
 8000820:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
	char     level_ch;

	unsigned int timestamp    = time_ms;
 8000824:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000828:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	unsigned int hours        = timestamp / 1000 / 60 / 60;
 800082c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000830:	4a2f      	ldr	r2, [pc, #188]	; (80008f0 <acc_integration_log+0x11c>)
 8000832:	fba2 2303 	umull	r2, r3, r2, r3
 8000836:	0d5b      	lsrs	r3, r3, #21
 8000838:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	unsigned int minutes      = timestamp / 1000 / 60 % 60;
 800083c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000840:	4a2c      	ldr	r2, [pc, #176]	; (80008f4 <acc_integration_log+0x120>)
 8000842:	fba2 2303 	umull	r2, r3, r2, r3
 8000846:	0b9a      	lsrs	r2, r3, #14
 8000848:	4b2b      	ldr	r3, [pc, #172]	; (80008f8 <acc_integration_log+0x124>)
 800084a:	fba3 1302 	umull	r1, r3, r3, r2
 800084e:	0959      	lsrs	r1, r3, #5
 8000850:	460b      	mov	r3, r1
 8000852:	011b      	lsls	r3, r3, #4
 8000854:	1a5b      	subs	r3, r3, r1
 8000856:	009b      	lsls	r3, r3, #2
 8000858:	1ad3      	subs	r3, r2, r3
 800085a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	unsigned int seconds      = timestamp / 1000 % 60;
 800085e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000862:	4a26      	ldr	r2, [pc, #152]	; (80008fc <acc_integration_log+0x128>)
 8000864:	fba2 2303 	umull	r2, r3, r2, r3
 8000868:	099a      	lsrs	r2, r3, #6
 800086a:	4b23      	ldr	r3, [pc, #140]	; (80008f8 <acc_integration_log+0x124>)
 800086c:	fba3 1302 	umull	r1, r3, r3, r2
 8000870:	0959      	lsrs	r1, r3, #5
 8000872:	460b      	mov	r3, r1
 8000874:	011b      	lsls	r3, r3, #4
 8000876:	1a5b      	subs	r3, r3, r1
 8000878:	009b      	lsls	r3, r3, #2
 800087a:	1ad3      	subs	r3, r2, r3
 800087c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	unsigned int milliseconds = timestamp % 1000;
 8000880:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000884:	4a1d      	ldr	r2, [pc, #116]	; (80008fc <acc_integration_log+0x128>)
 8000886:	fba2 1203 	umull	r1, r2, r2, r3
 800088a:	0992      	lsrs	r2, r2, #6
 800088c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000890:	fb01 f202 	mul.w	r2, r1, r2
 8000894:	1a9b      	subs	r3, r3, r2
 8000896:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	level_ch = (level <= ACC_LOG_LEVEL_DEBUG) ? "EWIVD"[level] : '?';
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	2b04      	cmp	r3, #4
 800089e:	d803      	bhi.n	80008a8 <acc_integration_log+0xd4>
 80008a0:	79fb      	ldrb	r3, [r7, #7]
 80008a2:	4a17      	ldr	r2, [pc, #92]	; (8000900 <acc_integration_log+0x12c>)
 80008a4:	5cd3      	ldrb	r3, [r2, r3]
 80008a6:	e000      	b.n	80008aa <acc_integration_log+0xd6>
 80008a8:	233f      	movs	r3, #63	; 0x3f
 80008aa:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

	printf(LOG_FORMAT, hours, minutes, seconds, milliseconds, level_ch, module, log_buffer);
 80008ae:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80008b2:	f107 020c 	add.w	r2, r7, #12
 80008b6:	9203      	str	r2, [sp, #12]
 80008b8:	683a      	ldr	r2, [r7, #0]
 80008ba:	9202      	str	r2, [sp, #8]
 80008bc:	9301      	str	r3, [sp, #4]
 80008be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80008c2:	9300      	str	r3, [sp, #0]
 80008c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80008c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80008cc:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 80008d0:	480c      	ldr	r0, [pc, #48]	; (8000904 <acc_integration_log+0x130>)
 80008d2:	f00c fa8b 	bl	800cdec <iprintf>

	fflush(stdout);
 80008d6:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <acc_integration_log+0x134>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	689b      	ldr	r3, [r3, #8]
 80008dc:	4618      	mov	r0, r3
 80008de:	f00c f97b 	bl	800cbd8 <fflush>

	va_end(ap);
}
 80008e2:	bf00      	nop
 80008e4:	37c0      	adds	r7, #192	; 0xc0
 80008e6:	46bd      	mov	sp, r7
 80008e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80008ec:	b002      	add	sp, #8
 80008ee:	4770      	bx	lr
 80008f0:	95217cb1 	.word	0x95217cb1
 80008f4:	45e7b273 	.word	0x45e7b273
 80008f8:	88888889 	.word	0x88888889
 80008fc:	10624dd3 	.word	0x10624dd3
 8000900:	0800e0ac 	.word	0x0800e0ac
 8000904:	0800e088 	.word	0x0800e088
 8000908:	200001e4 	.word	0x200001e4

0800090c <acc_integration_get_time>:
	HAL_Delay(time_msec);
}


uint32_t acc_integration_get_time(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8000910:	f000 fd18 	bl	8001344 <HAL_GetTick>
 8000914:	4603      	mov	r3, r0
}
 8000916:	4618      	mov	r0, r3
 8000918:	bd80      	pop	{r7, pc}
	...

0800091c <acc_example_service_envelope>:

int acc_example_service_envelope(int argc, char *argv[]);


int acc_example_service_envelope(int argc, char *argv[])
{
 800091c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000920:	b091      	sub	sp, #68	; 0x44
 8000922:	af00      	add	r7, sp, #0
 8000924:	6078      	str	r0, [r7, #4]
 8000926:	6039      	str	r1, [r7, #0]
 8000928:	466b      	mov	r3, sp
 800092a:	461e      	mov	r6, r3
	(void)argc;
	(void)argv;
	printf("Acconeer software version %s\n", acc_version_get());
 800092c:	f004 fa7a 	bl	8004e24 <acc_version_get>
 8000930:	4603      	mov	r3, r0
 8000932:	4619      	mov	r1, r3
 8000934:	487b      	ldr	r0, [pc, #492]	; (8000b24 <acc_example_service_envelope+0x208>)
 8000936:	f00c fa59 	bl	800cdec <iprintf>

	const acc_hal_t *hal = acc_hal_integration_get_implementation();
 800093a:	f7ff ff41 	bl	80007c0 <acc_hal_integration_get_implementation>
 800093e:	6378      	str	r0, [r7, #52]	; 0x34

	if (!acc_rss_activate(hal))
 8000940:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000942:	f003 fd2f 	bl	80043a4 <acc_rss_activate>
 8000946:	4603      	mov	r3, r0
 8000948:	f083 0301 	eor.w	r3, r3, #1
 800094c:	b2db      	uxtb	r3, r3
 800094e:	2b00      	cmp	r3, #0
 8000950:	d004      	beq.n	800095c <acc_example_service_envelope+0x40>
	{
		printf("acc_rss_activate() failed\n");
 8000952:	4875      	ldr	r0, [pc, #468]	; (8000b28 <acc_example_service_envelope+0x20c>)
 8000954:	f00c fab8 	bl	800cec8 <puts>
		return EXIT_FAILURE;
 8000958:	2301      	movs	r3, #1
 800095a:	e0dd      	b.n	8000b18 <acc_example_service_envelope+0x1fc>
	}

	acc_service_configuration_t envelope_configuration = acc_service_envelope_configuration_create();
 800095c:	f004 f87c 	bl	8004a58 <acc_service_envelope_configuration_create>
 8000960:	4603      	mov	r3, r0
 8000962:	623b      	str	r3, [r7, #32]

	if (envelope_configuration == NULL)
 8000964:	6a3b      	ldr	r3, [r7, #32]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d106      	bne.n	8000978 <acc_example_service_envelope+0x5c>
	{
		printf("acc_service_envelope_configuration_create() failed\n");
 800096a:	4870      	ldr	r0, [pc, #448]	; (8000b2c <acc_example_service_envelope+0x210>)
 800096c:	f00c faac 	bl	800cec8 <puts>
		acc_rss_deactivate();
 8000970:	f003 fd56 	bl	8004420 <acc_rss_deactivate>
		return EXIT_FAILURE;
 8000974:	2301      	movs	r3, #1
 8000976:	e0cf      	b.n	8000b18 <acc_example_service_envelope+0x1fc>
	}

	update_configuration(envelope_configuration);
 8000978:	6a3b      	ldr	r3, [r7, #32]
 800097a:	4618      	mov	r0, r3
 800097c:	f000 f8e8 	bl	8000b50 <update_configuration>

	acc_service_handle_t handle = acc_service_create(envelope_configuration);
 8000980:	6a3b      	ldr	r3, [r7, #32]
 8000982:	4618      	mov	r0, r3
 8000984:	f004 f988 	bl	8004c98 <acc_service_create>
 8000988:	4603      	mov	r3, r0
 800098a:	61fb      	str	r3, [r7, #28]

	if (handle == NULL)
 800098c:	69fb      	ldr	r3, [r7, #28]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d10b      	bne.n	80009aa <acc_example_service_envelope+0x8e>
	{
		printf("acc_service_create() failed\n");
 8000992:	4867      	ldr	r0, [pc, #412]	; (8000b30 <acc_example_service_envelope+0x214>)
 8000994:	f00c fa98 	bl	800cec8 <puts>
		acc_service_envelope_configuration_destroy(&envelope_configuration);
 8000998:	f107 0320 	add.w	r3, r7, #32
 800099c:	4618      	mov	r0, r3
 800099e:	f004 f8e9 	bl	8004b74 <acc_service_envelope_configuration_destroy>
		acc_rss_deactivate();
 80009a2:	f003 fd3d 	bl	8004420 <acc_rss_deactivate>
		return EXIT_FAILURE;
 80009a6:	2301      	movs	r3, #1
 80009a8:	e0b6      	b.n	8000b18 <acc_example_service_envelope+0x1fc>
	}

	acc_service_envelope_configuration_destroy(&envelope_configuration);
 80009aa:	f107 0320 	add.w	r3, r7, #32
 80009ae:	4618      	mov	r0, r3
 80009b0:	f004 f8e0 	bl	8004b74 <acc_service_envelope_configuration_destroy>

	acc_service_envelope_metadata_t envelope_metadata = { 0 };
 80009b4:	f107 030c 	add.w	r3, r7, #12
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
 80009c0:	60da      	str	r2, [r3, #12]
	acc_service_envelope_get_metadata(handle, &envelope_metadata);
 80009c2:	69fb      	ldr	r3, [r7, #28]
 80009c4:	f107 020c 	add.w	r2, r7, #12
 80009c8:	4611      	mov	r1, r2
 80009ca:	4618      	mov	r0, r3
 80009cc:	f004 f8e4 	bl	8004b98 <acc_service_envelope_get_metadata>

	printf("Start: %d mm\n", (int)(envelope_metadata.start_m * 1000.0f));
 80009d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80009d4:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8000b34 <acc_example_service_envelope+0x218>
 80009d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009e0:	ee17 1a90 	vmov	r1, s15
 80009e4:	4854      	ldr	r0, [pc, #336]	; (8000b38 <acc_example_service_envelope+0x21c>)
 80009e6:	f00c fa01 	bl	800cdec <iprintf>
	printf("Length: %u mm\n", (unsigned int)(envelope_metadata.length_m * 1000.0f));
 80009ea:	edd7 7a04 	vldr	s15, [r7, #16]
 80009ee:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8000b34 <acc_example_service_envelope+0x218>
 80009f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009fa:	ee17 1a90 	vmov	r1, s15
 80009fe:	484f      	ldr	r0, [pc, #316]	; (8000b3c <acc_example_service_envelope+0x220>)
 8000a00:	f00c f9f4 	bl	800cdec <iprintf>
	printf("Data length: %u\n", (unsigned int)(envelope_metadata.data_length));
 8000a04:	8abb      	ldrh	r3, [r7, #20]
 8000a06:	4619      	mov	r1, r3
 8000a08:	484d      	ldr	r0, [pc, #308]	; (8000b40 <acc_example_service_envelope+0x224>)
 8000a0a:	f00c f9ef 	bl	800cdec <iprintf>

	if (!acc_service_activate(handle))
 8000a0e:	69fb      	ldr	r3, [r7, #28]
 8000a10:	4618      	mov	r0, r3
 8000a12:	f003 fdbd 	bl	8004590 <acc_service_activate>
 8000a16:	4603      	mov	r3, r0
 8000a18:	f083 0301 	eor.w	r3, r3, #1
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d00b      	beq.n	8000a3a <acc_example_service_envelope+0x11e>
	{
		printf("acc_service_activate() failed\n");
 8000a22:	4848      	ldr	r0, [pc, #288]	; (8000b44 <acc_example_service_envelope+0x228>)
 8000a24:	f00c fa50 	bl	800cec8 <puts>
		acc_service_destroy(&handle);
 8000a28:	f107 031c 	add.w	r3, r7, #28
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f004 f9a7 	bl	8004d80 <acc_service_destroy>
		acc_rss_deactivate();
 8000a32:	f003 fcf5 	bl	8004420 <acc_rss_deactivate>
		return EXIT_FAILURE;
 8000a36:	2301      	movs	r3, #1
 8000a38:	e06e      	b.n	8000b18 <acc_example_service_envelope+0x1fc>
	}

	bool                               success    = true;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	const int                          iterations = 5;
 8000a40:	2305      	movs	r3, #5
 8000a42:	633b      	str	r3, [r7, #48]	; 0x30
	uint16_t                           data[envelope_metadata.data_length];
 8000a44:	8ab9      	ldrh	r1, [r7, #20]
 8000a46:	460b      	mov	r3, r1
 8000a48:	3b01      	subs	r3, #1
 8000a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a4c:	b28b      	uxth	r3, r1
 8000a4e:	2200      	movs	r2, #0
 8000a50:	4698      	mov	r8, r3
 8000a52:	4691      	mov	r9, r2
 8000a54:	f04f 0200 	mov.w	r2, #0
 8000a58:	f04f 0300 	mov.w	r3, #0
 8000a5c:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8000a60:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8000a64:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8000a68:	b28b      	uxth	r3, r1
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	461c      	mov	r4, r3
 8000a6e:	4615      	mov	r5, r2
 8000a70:	f04f 0200 	mov.w	r2, #0
 8000a74:	f04f 0300 	mov.w	r3, #0
 8000a78:	012b      	lsls	r3, r5, #4
 8000a7a:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000a7e:	0122      	lsls	r2, r4, #4
 8000a80:	460b      	mov	r3, r1
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	3307      	adds	r3, #7
 8000a86:	08db      	lsrs	r3, r3, #3
 8000a88:	00db      	lsls	r3, r3, #3
 8000a8a:	ebad 0d03 	sub.w	sp, sp, r3
 8000a8e:	466b      	mov	r3, sp
 8000a90:	3301      	adds	r3, #1
 8000a92:	085b      	lsrs	r3, r3, #1
 8000a94:	005b      	lsls	r3, r3, #1
 8000a96:	62bb      	str	r3, [r7, #40]	; 0x28
	acc_service_envelope_result_info_t result_info;

	for (int i = 0; i < iterations; i++)
 8000a98:	2300      	movs	r3, #0
 8000a9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8000a9c:	e01c      	b.n	8000ad8 <acc_example_service_envelope+0x1bc>
	{
		success = acc_service_envelope_get_next(handle, data, envelope_metadata.data_length, &result_info);
 8000a9e:	69f8      	ldr	r0, [r7, #28]
 8000aa0:	8aba      	ldrh	r2, [r7, #20]
 8000aa2:	f107 0308 	add.w	r3, r7, #8
 8000aa6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000aa8:	f004 f898 	bl	8004bdc <acc_service_envelope_get_next>
 8000aac:	4603      	mov	r3, r0
 8000aae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (!success)
 8000ab2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000ab6:	f083 0301 	eor.w	r3, r3, #1
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d003      	beq.n	8000ac8 <acc_example_service_envelope+0x1ac>
		{
			printf("acc_service_envelope_get_next() failed\n");
 8000ac0:	4821      	ldr	r0, [pc, #132]	; (8000b48 <acc_example_service_envelope+0x22c>)
 8000ac2:	f00c fa01 	bl	800cec8 <puts>
			break;
 8000ac6:	e00b      	b.n	8000ae0 <acc_example_service_envelope+0x1c4>
		}

		print_data(data, envelope_metadata.data_length);
 8000ac8:	8abb      	ldrh	r3, [r7, #20]
 8000aca:	4619      	mov	r1, r3
 8000acc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000ace:	f000 f859 	bl	8000b84 <print_data>
	for (int i = 0; i < iterations; i++)
 8000ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	63bb      	str	r3, [r7, #56]	; 0x38
 8000ad8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000adc:	429a      	cmp	r2, r3
 8000ade:	dbde      	blt.n	8000a9e <acc_example_service_envelope+0x182>
	}

	bool deactivated = acc_service_deactivate(handle);
 8000ae0:	69fb      	ldr	r3, [r7, #28]
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f003 fd96 	bl	8004614 <acc_service_deactivate>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	acc_service_destroy(&handle);
 8000aee:	f107 031c 	add.w	r3, r7, #28
 8000af2:	4618      	mov	r0, r3
 8000af4:	f004 f944 	bl	8004d80 <acc_service_destroy>

	acc_rss_deactivate();
 8000af8:	f003 fc92 	bl	8004420 <acc_rss_deactivate>

	if (deactivated && success)
 8000afc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d008      	beq.n	8000b16 <acc_example_service_envelope+0x1fa>
 8000b04:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d004      	beq.n	8000b16 <acc_example_service_envelope+0x1fa>
	{
		printf("Application finished OK\n");
 8000b0c:	480f      	ldr	r0, [pc, #60]	; (8000b4c <acc_example_service_envelope+0x230>)
 8000b0e:	f00c f9db 	bl	800cec8 <puts>
		return EXIT_SUCCESS;
 8000b12:	2300      	movs	r3, #0
 8000b14:	e000      	b.n	8000b18 <acc_example_service_envelope+0x1fc>
	}

	return EXIT_FAILURE;
 8000b16:	2301      	movs	r3, #1
 8000b18:	46b5      	mov	sp, r6
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3744      	adds	r7, #68	; 0x44
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000b24:	0800e0b4 	.word	0x0800e0b4
 8000b28:	0800e0d4 	.word	0x0800e0d4
 8000b2c:	0800e0f0 	.word	0x0800e0f0
 8000b30:	0800e124 	.word	0x0800e124
 8000b34:	447a0000 	.word	0x447a0000
 8000b38:	0800e140 	.word	0x0800e140
 8000b3c:	0800e150 	.word	0x0800e150
 8000b40:	0800e160 	.word	0x0800e160
 8000b44:	0800e174 	.word	0x0800e174
 8000b48:	0800e194 	.word	0x0800e194
 8000b4c:	0800e1bc 	.word	0x0800e1bc

08000b50 <update_configuration>:


void update_configuration(acc_service_configuration_t envelope_configuration)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
	float start_m  = 0.2f;
 8000b58:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <update_configuration+0x30>)
 8000b5a:	60fb      	str	r3, [r7, #12]
	float length_m = 0.5f;
 8000b5c:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8000b60:	60bb      	str	r3, [r7, #8]

	acc_service_requested_start_set(envelope_configuration, start_m);
 8000b62:	ed97 0a03 	vldr	s0, [r7, #12]
 8000b66:	6878      	ldr	r0, [r7, #4]
 8000b68:	f003 fcb0 	bl	80044cc <acc_service_requested_start_set>
	acc_service_requested_length_set(envelope_configuration, length_m);
 8000b6c:	ed97 0a02 	vldr	s0, [r7, #8]
 8000b70:	6878      	ldr	r0, [r7, #4]
 8000b72:	f003 fcb9 	bl	80044e8 <acc_service_requested_length_set>
}
 8000b76:	bf00      	nop
 8000b78:	3710      	adds	r7, #16
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	3e4ccccd 	.word	0x3e4ccccd

08000b84 <print_data>:


void print_data(uint16_t *data, uint16_t data_length)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	460b      	mov	r3, r1
 8000b8e:	807b      	strh	r3, [r7, #2]
	printf("Envelope data:\n");
 8000b90:	4814      	ldr	r0, [pc, #80]	; (8000be4 <print_data+0x60>)
 8000b92:	f00c f999 	bl	800cec8 <puts>
	for (uint16_t i = 0; i < data_length; i++)
 8000b96:	2300      	movs	r3, #0
 8000b98:	81fb      	strh	r3, [r7, #14]
 8000b9a:	e017      	b.n	8000bcc <print_data+0x48>
	{
		if ((i > 0) && ((i % 8) == 0))
 8000b9c:	89fb      	ldrh	r3, [r7, #14]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d008      	beq.n	8000bb4 <print_data+0x30>
 8000ba2:	89fb      	ldrh	r3, [r7, #14]
 8000ba4:	f003 0307 	and.w	r3, r3, #7
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d102      	bne.n	8000bb4 <print_data+0x30>
		{
			printf("\n");
 8000bae:	200a      	movs	r0, #10
 8000bb0:	f00c f92e 	bl	800ce10 <putchar>
		}

		printf("%6u", (unsigned int)(data[i]));
 8000bb4:	89fb      	ldrh	r3, [r7, #14]
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	687a      	ldr	r2, [r7, #4]
 8000bba:	4413      	add	r3, r2
 8000bbc:	881b      	ldrh	r3, [r3, #0]
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4809      	ldr	r0, [pc, #36]	; (8000be8 <print_data+0x64>)
 8000bc2:	f00c f913 	bl	800cdec <iprintf>
	for (uint16_t i = 0; i < data_length; i++)
 8000bc6:	89fb      	ldrh	r3, [r7, #14]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	81fb      	strh	r3, [r7, #14]
 8000bcc:	89fa      	ldrh	r2, [r7, #14]
 8000bce:	887b      	ldrh	r3, [r7, #2]
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	d3e3      	bcc.n	8000b9c <print_data+0x18>
	}

	printf("\n");
 8000bd4:	200a      	movs	r0, #10
 8000bd6:	f00c f91b 	bl	800ce10 <putchar>
}
 8000bda:	bf00      	nop
 8000bdc:	3710      	adds	r7, #16
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	0800e1d4 	.word	0x0800e1d4
 8000be8:	0800e1e4 	.word	0x0800e1e4

08000bec <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	607a      	str	r2, [r7, #4]
	(void)file;
	HAL_UART_Transmit(&huart2, ptr, len, 0xFFFF);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	b29a      	uxth	r2, r3
 8000bfc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c00:	68b9      	ldr	r1, [r7, #8]
 8000c02:	4804      	ldr	r0, [pc, #16]	; (8000c14 <_write+0x28>)
 8000c04:	f002 fe76 	bl	80038f4 <HAL_UART_Transmit>
	return len;
 8000c08:	687b      	ldr	r3, [r7, #4]
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3710      	adds	r7, #16
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	20000268 	.word	0x20000268

08000c18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c1c:	f000 fb22 	bl	8001264 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c20:	f000 f80e 	bl	8000c40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c24:	f000 f8cc 	bl	8000dc0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c28:	f000 f89a 	bl	8000d60 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8000c2c:	f000 f85a 	bl	8000ce4 <MX_SPI3_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_Delay(10);
 8000c30:	200a      	movs	r0, #10
 8000c32:	f000 fb93 	bl	800135c <HAL_Delay>
	  acc_example_service_envelope(0, NULL);
 8000c36:	2100      	movs	r1, #0
 8000c38:	2000      	movs	r0, #0
 8000c3a:	f7ff fe6f 	bl	800091c <acc_example_service_envelope>
	  HAL_Delay(10);
 8000c3e:	e7f7      	b.n	8000c30 <main+0x18>

08000c40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b096      	sub	sp, #88	; 0x58
 8000c44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c46:	f107 0314 	add.w	r3, r7, #20
 8000c4a:	2244      	movs	r2, #68	; 0x44
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f00c f95c 	bl	800cf0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c54:	463b      	mov	r3, r7
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	605a      	str	r2, [r3, #4]
 8000c5c:	609a      	str	r2, [r3, #8]
 8000c5e:	60da      	str	r2, [r3, #12]
 8000c60:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c62:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c66:	f000 febb 	bl	80019e0 <HAL_PWREx_ControlVoltageScaling>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000c70:	f000 f938 	bl	8000ee4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c74:	2302      	movs	r3, #2
 8000c76:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c7c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c7e:	2310      	movs	r3, #16
 8000c80:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c82:	2302      	movs	r3, #2
 8000c84:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c86:	2302      	movs	r3, #2
 8000c88:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000c8e:	230a      	movs	r3, #10
 8000c90:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000c92:	2307      	movs	r3, #7
 8000c94:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c96:	2302      	movs	r3, #2
 8000c98:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c9e:	f107 0314 	add.w	r3, r7, #20
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f000 fef2 	bl	8001a8c <HAL_RCC_OscConfig>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000cae:	f000 f919 	bl	8000ee4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cb2:	230f      	movs	r3, #15
 8000cb4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cb6:	2303      	movs	r3, #3
 8000cb8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000cc6:	463b      	mov	r3, r7
 8000cc8:	2104      	movs	r1, #4
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f001 faba 	bl	8002244 <HAL_RCC_ClockConfig>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000cd6:	f000 f905 	bl	8000ee4 <Error_Handler>
  }
}
 8000cda:	bf00      	nop
 8000cdc:	3758      	adds	r7, #88	; 0x58
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
	...

08000ce4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000ce8:	4b1b      	ldr	r3, [pc, #108]	; (8000d58 <MX_SPI3_Init+0x74>)
 8000cea:	4a1c      	ldr	r2, [pc, #112]	; (8000d5c <MX_SPI3_Init+0x78>)
 8000cec:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000cee:	4b1a      	ldr	r3, [pc, #104]	; (8000d58 <MX_SPI3_Init+0x74>)
 8000cf0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cf4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000cf6:	4b18      	ldr	r3, [pc, #96]	; (8000d58 <MX_SPI3_Init+0x74>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cfc:	4b16      	ldr	r3, [pc, #88]	; (8000d58 <MX_SPI3_Init+0x74>)
 8000cfe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000d02:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d04:	4b14      	ldr	r3, [pc, #80]	; (8000d58 <MX_SPI3_Init+0x74>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d0a:	4b13      	ldr	r3, [pc, #76]	; (8000d58 <MX_SPI3_Init+0x74>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000d10:	4b11      	ldr	r3, [pc, #68]	; (8000d58 <MX_SPI3_Init+0x74>)
 8000d12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d16:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000d18:	4b0f      	ldr	r3, [pc, #60]	; (8000d58 <MX_SPI3_Init+0x74>)
 8000d1a:	2228      	movs	r2, #40	; 0x28
 8000d1c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d1e:	4b0e      	ldr	r3, [pc, #56]	; (8000d58 <MX_SPI3_Init+0x74>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d24:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <MX_SPI3_Init+0x74>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d2a:	4b0b      	ldr	r3, [pc, #44]	; (8000d58 <MX_SPI3_Init+0x74>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000d30:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <MX_SPI3_Init+0x74>)
 8000d32:	2207      	movs	r2, #7
 8000d34:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d36:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <MX_SPI3_Init+0x74>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d3c:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <MX_SPI3_Init+0x74>)
 8000d3e:	2208      	movs	r2, #8
 8000d40:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000d42:	4805      	ldr	r0, [pc, #20]	; (8000d58 <MX_SPI3_Init+0x74>)
 8000d44:	f002 f95e 	bl	8003004 <HAL_SPI_Init>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000d4e:	f000 f8c9 	bl	8000ee4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20000204 	.word	0x20000204
 8000d5c:	40003c00 	.word	0x40003c00

08000d60 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d64:	4b14      	ldr	r3, [pc, #80]	; (8000db8 <MX_USART2_UART_Init+0x58>)
 8000d66:	4a15      	ldr	r2, [pc, #84]	; (8000dbc <MX_USART2_UART_Init+0x5c>)
 8000d68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d6a:	4b13      	ldr	r3, [pc, #76]	; (8000db8 <MX_USART2_UART_Init+0x58>)
 8000d6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d72:	4b11      	ldr	r3, [pc, #68]	; (8000db8 <MX_USART2_UART_Init+0x58>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d78:	4b0f      	ldr	r3, [pc, #60]	; (8000db8 <MX_USART2_UART_Init+0x58>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d7e:	4b0e      	ldr	r3, [pc, #56]	; (8000db8 <MX_USART2_UART_Init+0x58>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d84:	4b0c      	ldr	r3, [pc, #48]	; (8000db8 <MX_USART2_UART_Init+0x58>)
 8000d86:	220c      	movs	r2, #12
 8000d88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d8a:	4b0b      	ldr	r3, [pc, #44]	; (8000db8 <MX_USART2_UART_Init+0x58>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d90:	4b09      	ldr	r3, [pc, #36]	; (8000db8 <MX_USART2_UART_Init+0x58>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d96:	4b08      	ldr	r3, [pc, #32]	; (8000db8 <MX_USART2_UART_Init+0x58>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d9c:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <MX_USART2_UART_Init+0x58>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000da2:	4805      	ldr	r0, [pc, #20]	; (8000db8 <MX_USART2_UART_Init+0x58>)
 8000da4:	f002 fd58 	bl	8003858 <HAL_UART_Init>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000dae:	f000 f899 	bl	8000ee4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000268 	.word	0x20000268
 8000dbc:	40004400 	.word	0x40004400

08000dc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b08a      	sub	sp, #40	; 0x28
 8000dc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc6:	f107 0314 	add.w	r3, r7, #20
 8000dca:	2200      	movs	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	605a      	str	r2, [r3, #4]
 8000dd0:	609a      	str	r2, [r3, #8]
 8000dd2:	60da      	str	r2, [r3, #12]
 8000dd4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dd6:	4b40      	ldr	r3, [pc, #256]	; (8000ed8 <MX_GPIO_Init+0x118>)
 8000dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dda:	4a3f      	ldr	r2, [pc, #252]	; (8000ed8 <MX_GPIO_Init+0x118>)
 8000ddc:	f043 0304 	orr.w	r3, r3, #4
 8000de0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000de2:	4b3d      	ldr	r3, [pc, #244]	; (8000ed8 <MX_GPIO_Init+0x118>)
 8000de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de6:	f003 0304 	and.w	r3, r3, #4
 8000dea:	613b      	str	r3, [r7, #16]
 8000dec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dee:	4b3a      	ldr	r3, [pc, #232]	; (8000ed8 <MX_GPIO_Init+0x118>)
 8000df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df2:	4a39      	ldr	r2, [pc, #228]	; (8000ed8 <MX_GPIO_Init+0x118>)
 8000df4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000df8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dfa:	4b37      	ldr	r3, [pc, #220]	; (8000ed8 <MX_GPIO_Init+0x118>)
 8000dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e06:	4b34      	ldr	r3, [pc, #208]	; (8000ed8 <MX_GPIO_Init+0x118>)
 8000e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e0a:	4a33      	ldr	r2, [pc, #204]	; (8000ed8 <MX_GPIO_Init+0x118>)
 8000e0c:	f043 0301 	orr.w	r3, r3, #1
 8000e10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e12:	4b31      	ldr	r3, [pc, #196]	; (8000ed8 <MX_GPIO_Init+0x118>)
 8000e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e16:	f003 0301 	and.w	r3, r3, #1
 8000e1a:	60bb      	str	r3, [r7, #8]
 8000e1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1e:	4b2e      	ldr	r3, [pc, #184]	; (8000ed8 <MX_GPIO_Init+0x118>)
 8000e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e22:	4a2d      	ldr	r2, [pc, #180]	; (8000ed8 <MX_GPIO_Init+0x118>)
 8000e24:	f043 0302 	orr.w	r3, r3, #2
 8000e28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e2a:	4b2b      	ldr	r3, [pc, #172]	; (8000ed8 <MX_GPIO_Init+0x118>)
 8000e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2e:	f003 0302 	and.w	r3, r3, #2
 8000e32:	607b      	str	r3, [r7, #4]
 8000e34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e36:	2200      	movs	r2, #0
 8000e38:	2120      	movs	r1, #32
 8000e3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e3e:	f000 fd85 	bl	800194c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A111_ENABLE_Pin|A111_CS_N_Pin, GPIO_PIN_RESET);
 8000e42:	2200      	movs	r2, #0
 8000e44:	2160      	movs	r1, #96	; 0x60
 8000e46:	4825      	ldr	r0, [pc, #148]	; (8000edc <MX_GPIO_Init+0x11c>)
 8000e48:	f000 fd80 	bl	800194c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e52:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e5c:	f107 0314 	add.w	r3, r7, #20
 8000e60:	4619      	mov	r1, r3
 8000e62:	481f      	ldr	r0, [pc, #124]	; (8000ee0 <MX_GPIO_Init+0x120>)
 8000e64:	f000 fbb0 	bl	80015c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e68:	2320      	movs	r3, #32
 8000e6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e74:	2300      	movs	r3, #0
 8000e76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e78:	f107 0314 	add.w	r3, r7, #20
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e82:	f000 fba1 	bl	80015c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : A111_SENSOR_INTERRUPT_Pin */
  GPIO_InitStruct.Pin = A111_SENSOR_INTERRUPT_Pin;
 8000e86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e8c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(A111_SENSOR_INTERRUPT_GPIO_Port, &GPIO_InitStruct);
 8000e96:	f107 0314 	add.w	r3, r7, #20
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ea0:	f000 fb92 	bl	80015c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : A111_ENABLE_Pin A111_CS_N_Pin */
  GPIO_InitStruct.Pin = A111_ENABLE_Pin|A111_CS_N_Pin;
 8000ea4:	2360      	movs	r3, #96	; 0x60
 8000ea6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb4:	f107 0314 	add.w	r3, r7, #20
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4808      	ldr	r0, [pc, #32]	; (8000edc <MX_GPIO_Init+0x11c>)
 8000ebc:	f000 fb84 	bl	80015c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	2017      	movs	r0, #23
 8000ec6:	f000 fb48 	bl	800155a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000eca:	2017      	movs	r0, #23
 8000ecc:	f000 fb61 	bl	8001592 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ed0:	bf00      	nop
 8000ed2:	3728      	adds	r7, #40	; 0x28
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40021000 	.word	0x40021000
 8000edc:	48000400 	.word	0x48000400
 8000ee0:	48000800 	.word	0x48000800

08000ee4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee8:	b672      	cpsid	i
}
 8000eea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eec:	e7fe      	b.n	8000eec <Error_Handler+0x8>
	...

08000ef0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ef6:	4b0f      	ldr	r3, [pc, #60]	; (8000f34 <HAL_MspInit+0x44>)
 8000ef8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000efa:	4a0e      	ldr	r2, [pc, #56]	; (8000f34 <HAL_MspInit+0x44>)
 8000efc:	f043 0301 	orr.w	r3, r3, #1
 8000f00:	6613      	str	r3, [r2, #96]	; 0x60
 8000f02:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <HAL_MspInit+0x44>)
 8000f04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	607b      	str	r3, [r7, #4]
 8000f0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f0e:	4b09      	ldr	r3, [pc, #36]	; (8000f34 <HAL_MspInit+0x44>)
 8000f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f12:	4a08      	ldr	r2, [pc, #32]	; (8000f34 <HAL_MspInit+0x44>)
 8000f14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f18:	6593      	str	r3, [r2, #88]	; 0x58
 8000f1a:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <HAL_MspInit+0x44>)
 8000f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f22:	603b      	str	r3, [r7, #0]
 8000f24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f26:	bf00      	nop
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	40021000 	.word	0x40021000

08000f38 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08a      	sub	sp, #40	; 0x28
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f40:	f107 0314 	add.w	r3, r7, #20
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
 8000f4e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a17      	ldr	r2, [pc, #92]	; (8000fb4 <HAL_SPI_MspInit+0x7c>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d128      	bne.n	8000fac <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000f5a:	4b17      	ldr	r3, [pc, #92]	; (8000fb8 <HAL_SPI_MspInit+0x80>)
 8000f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f5e:	4a16      	ldr	r2, [pc, #88]	; (8000fb8 <HAL_SPI_MspInit+0x80>)
 8000f60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f64:	6593      	str	r3, [r2, #88]	; 0x58
 8000f66:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <HAL_SPI_MspInit+0x80>)
 8000f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f6e:	613b      	str	r3, [r7, #16]
 8000f70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f72:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <HAL_SPI_MspInit+0x80>)
 8000f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f76:	4a10      	ldr	r2, [pc, #64]	; (8000fb8 <HAL_SPI_MspInit+0x80>)
 8000f78:	f043 0304 	orr.w	r3, r3, #4
 8000f7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <HAL_SPI_MspInit+0x80>)
 8000f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f82:	f003 0304 	and.w	r3, r3, #4
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = A111_SPI_SCK_Pin|A111_SPI_MISO_Pin|A111_SPI_MOSI_Pin;
 8000f8a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000f8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f90:	2302      	movs	r3, #2
 8000f92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f9c:	2306      	movs	r3, #6
 8000f9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fa0:	f107 0314 	add.w	r3, r7, #20
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4805      	ldr	r0, [pc, #20]	; (8000fbc <HAL_SPI_MspInit+0x84>)
 8000fa8:	f000 fb0e 	bl	80015c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000fac:	bf00      	nop
 8000fae:	3728      	adds	r7, #40	; 0x28
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40003c00 	.word	0x40003c00
 8000fb8:	40021000 	.word	0x40021000
 8000fbc:	48000800 	.word	0x48000800

08000fc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b0ac      	sub	sp, #176	; 0xb0
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	2288      	movs	r2, #136	; 0x88
 8000fde:	2100      	movs	r1, #0
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f00b ff93 	bl	800cf0c <memset>
  if(huart->Instance==USART2)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a21      	ldr	r2, [pc, #132]	; (8001070 <HAL_UART_MspInit+0xb0>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d13b      	bne.n	8001068 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ff8:	f107 0314 	add.w	r3, r7, #20
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f001 fb45 	bl	800268c <HAL_RCCEx_PeriphCLKConfig>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001008:	f7ff ff6c 	bl	8000ee4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800100c:	4b19      	ldr	r3, [pc, #100]	; (8001074 <HAL_UART_MspInit+0xb4>)
 800100e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001010:	4a18      	ldr	r2, [pc, #96]	; (8001074 <HAL_UART_MspInit+0xb4>)
 8001012:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001016:	6593      	str	r3, [r2, #88]	; 0x58
 8001018:	4b16      	ldr	r3, [pc, #88]	; (8001074 <HAL_UART_MspInit+0xb4>)
 800101a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800101c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001020:	613b      	str	r3, [r7, #16]
 8001022:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001024:	4b13      	ldr	r3, [pc, #76]	; (8001074 <HAL_UART_MspInit+0xb4>)
 8001026:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001028:	4a12      	ldr	r2, [pc, #72]	; (8001074 <HAL_UART_MspInit+0xb4>)
 800102a:	f043 0301 	orr.w	r3, r3, #1
 800102e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001030:	4b10      	ldr	r3, [pc, #64]	; (8001074 <HAL_UART_MspInit+0xb4>)
 8001032:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001034:	f003 0301 	and.w	r3, r3, #1
 8001038:	60fb      	str	r3, [r7, #12]
 800103a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800103c:	230c      	movs	r3, #12
 800103e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001042:	2302      	movs	r3, #2
 8001044:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800104e:	2303      	movs	r3, #3
 8001050:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001054:	2307      	movs	r3, #7
 8001056:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800105e:	4619      	mov	r1, r3
 8001060:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001064:	f000 fab0 	bl	80015c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001068:	bf00      	nop
 800106a:	37b0      	adds	r7, #176	; 0xb0
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	40004400 	.word	0x40004400
 8001074:	40021000 	.word	0x40021000

08001078 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800107c:	e7fe      	b.n	800107c <NMI_Handler+0x4>

0800107e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001082:	e7fe      	b.n	8001082 <HardFault_Handler+0x4>

08001084 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001088:	e7fe      	b.n	8001088 <MemManage_Handler+0x4>

0800108a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800108a:	b480      	push	{r7}
 800108c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800108e:	e7fe      	b.n	800108e <BusFault_Handler+0x4>

08001090 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001094:	e7fe      	b.n	8001094 <UsageFault_Handler+0x4>

08001096 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001096:	b480      	push	{r7}
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010a8:	bf00      	nop
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010b2:	b480      	push	{r7}
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010c4:	f000 f92a 	bl	800131c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010c8:	bf00      	nop
 80010ca:	bd80      	pop	{r7, pc}

080010cc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(A111_SENSOR_INTERRUPT_Pin);
 80010d0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80010d4:	f000 fc52 	bl	800197c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80010d8:	bf00      	nop
 80010da:	bd80      	pop	{r7, pc}

080010dc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]
 80010ec:	e00a      	b.n	8001104 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80010ee:	f3af 8000 	nop.w
 80010f2:	4601      	mov	r1, r0
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	1c5a      	adds	r2, r3, #1
 80010f8:	60ba      	str	r2, [r7, #8]
 80010fa:	b2ca      	uxtb	r2, r1
 80010fc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	3301      	adds	r3, #1
 8001102:	617b      	str	r3, [r7, #20]
 8001104:	697a      	ldr	r2, [r7, #20]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	429a      	cmp	r2, r3
 800110a:	dbf0      	blt.n	80010ee <_read+0x12>
  }

  return len;
 800110c:	687b      	ldr	r3, [r7, #4]
}
 800110e:	4618      	mov	r0, r3
 8001110:	3718      	adds	r7, #24
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001116:	b480      	push	{r7}
 8001118:	b083      	sub	sp, #12
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800111e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001122:	4618      	mov	r0, r3
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr

0800112e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800112e:	b480      	push	{r7}
 8001130:	b083      	sub	sp, #12
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
 8001136:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800113e:	605a      	str	r2, [r3, #4]
  return 0;
 8001140:	2300      	movs	r3, #0
}
 8001142:	4618      	mov	r0, r3
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr

0800114e <_isatty>:

int _isatty(int file)
{
 800114e:	b480      	push	{r7}
 8001150:	b083      	sub	sp, #12
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001156:	2301      	movs	r3, #1
}
 8001158:	4618      	mov	r0, r3
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	3714      	adds	r7, #20
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
	...

08001180 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001188:	4a14      	ldr	r2, [pc, #80]	; (80011dc <_sbrk+0x5c>)
 800118a:	4b15      	ldr	r3, [pc, #84]	; (80011e0 <_sbrk+0x60>)
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001194:	4b13      	ldr	r3, [pc, #76]	; (80011e4 <_sbrk+0x64>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d102      	bne.n	80011a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800119c:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <_sbrk+0x64>)
 800119e:	4a12      	ldr	r2, [pc, #72]	; (80011e8 <_sbrk+0x68>)
 80011a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011a2:	4b10      	ldr	r3, [pc, #64]	; (80011e4 <_sbrk+0x64>)
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4413      	add	r3, r2
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d207      	bcs.n	80011c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011b0:	f00b fec4 	bl	800cf3c <__errno>
 80011b4:	4603      	mov	r3, r0
 80011b6:	220c      	movs	r2, #12
 80011b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011be:	e009      	b.n	80011d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011c0:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <_sbrk+0x64>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011c6:	4b07      	ldr	r3, [pc, #28]	; (80011e4 <_sbrk+0x64>)
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4413      	add	r3, r2
 80011ce:	4a05      	ldr	r2, [pc, #20]	; (80011e4 <_sbrk+0x64>)
 80011d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011d2:	68fb      	ldr	r3, [r7, #12]
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3718      	adds	r7, #24
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20018000 	.word	0x20018000
 80011e0:	00000400 	.word	0x00000400
 80011e4:	200002f0 	.word	0x200002f0
 80011e8:	20000500 	.word	0x20000500

080011ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80011f0:	4b06      	ldr	r3, [pc, #24]	; (800120c <SystemInit+0x20>)
 80011f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011f6:	4a05      	ldr	r2, [pc, #20]	; (800120c <SystemInit+0x20>)
 80011f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	e000ed00 	.word	0xe000ed00

08001210 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001210:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001248 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001214:	f7ff ffea 	bl	80011ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001218:	480c      	ldr	r0, [pc, #48]	; (800124c <LoopForever+0x6>)
  ldr r1, =_edata
 800121a:	490d      	ldr	r1, [pc, #52]	; (8001250 <LoopForever+0xa>)
  ldr r2, =_sidata
 800121c:	4a0d      	ldr	r2, [pc, #52]	; (8001254 <LoopForever+0xe>)
  movs r3, #0
 800121e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001220:	e002      	b.n	8001228 <LoopCopyDataInit>

08001222 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001222:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001224:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001226:	3304      	adds	r3, #4

08001228 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001228:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800122a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800122c:	d3f9      	bcc.n	8001222 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800122e:	4a0a      	ldr	r2, [pc, #40]	; (8001258 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001230:	4c0a      	ldr	r4, [pc, #40]	; (800125c <LoopForever+0x16>)
  movs r3, #0
 8001232:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001234:	e001      	b.n	800123a <LoopFillZerobss>

08001236 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001236:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001238:	3204      	adds	r2, #4

0800123a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800123a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800123c:	d3fb      	bcc.n	8001236 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800123e:	f00b fe83 	bl	800cf48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001242:	f7ff fce9 	bl	8000c18 <main>

08001246 <LoopForever>:

LoopForever:
    b LoopForever
 8001246:	e7fe      	b.n	8001246 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001248:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800124c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001250:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001254:	080138f0 	.word	0x080138f0
  ldr r2, =_sbss
 8001258:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 800125c:	200004fc 	.word	0x200004fc

08001260 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001260:	e7fe      	b.n	8001260 <ADC1_2_IRQHandler>
	...

08001264 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800126a:	2300      	movs	r3, #0
 800126c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800126e:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <HAL_Init+0x3c>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a0b      	ldr	r2, [pc, #44]	; (80012a0 <HAL_Init+0x3c>)
 8001274:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001278:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800127a:	2003      	movs	r0, #3
 800127c:	f000 f962 	bl	8001544 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001280:	2000      	movs	r0, #0
 8001282:	f000 f80f 	bl	80012a4 <HAL_InitTick>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d002      	beq.n	8001292 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	71fb      	strb	r3, [r7, #7]
 8001290:	e001      	b.n	8001296 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001292:	f7ff fe2d 	bl	8000ef0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001296:	79fb      	ldrb	r3, [r7, #7]
}
 8001298:	4618      	mov	r0, r3
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40022000 	.word	0x40022000

080012a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012ac:	2300      	movs	r3, #0
 80012ae:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80012b0:	4b17      	ldr	r3, [pc, #92]	; (8001310 <HAL_InitTick+0x6c>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d023      	beq.n	8001300 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80012b8:	4b16      	ldr	r3, [pc, #88]	; (8001314 <HAL_InitTick+0x70>)
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	4b14      	ldr	r3, [pc, #80]	; (8001310 <HAL_InitTick+0x6c>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	4619      	mov	r1, r3
 80012c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ce:	4618      	mov	r0, r3
 80012d0:	f000 f96d 	bl	80015ae <HAL_SYSTICK_Config>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d10f      	bne.n	80012fa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2b0f      	cmp	r3, #15
 80012de:	d809      	bhi.n	80012f4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012e0:	2200      	movs	r2, #0
 80012e2:	6879      	ldr	r1, [r7, #4]
 80012e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012e8:	f000 f937 	bl	800155a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012ec:	4a0a      	ldr	r2, [pc, #40]	; (8001318 <HAL_InitTick+0x74>)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6013      	str	r3, [r2, #0]
 80012f2:	e007      	b.n	8001304 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	73fb      	strb	r3, [r7, #15]
 80012f8:	e004      	b.n	8001304 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	73fb      	strb	r3, [r7, #15]
 80012fe:	e001      	b.n	8001304 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001300:	2301      	movs	r3, #1
 8001302:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001304:	7bfb      	ldrb	r3, [r7, #15]
}
 8001306:	4618      	mov	r0, r3
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	20000008 	.word	0x20000008
 8001314:	20000000 	.word	0x20000000
 8001318:	20000004 	.word	0x20000004

0800131c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001320:	4b06      	ldr	r3, [pc, #24]	; (800133c <HAL_IncTick+0x20>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	461a      	mov	r2, r3
 8001326:	4b06      	ldr	r3, [pc, #24]	; (8001340 <HAL_IncTick+0x24>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4413      	add	r3, r2
 800132c:	4a04      	ldr	r2, [pc, #16]	; (8001340 <HAL_IncTick+0x24>)
 800132e:	6013      	str	r3, [r2, #0]
}
 8001330:	bf00      	nop
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	20000008 	.word	0x20000008
 8001340:	200002f4 	.word	0x200002f4

08001344 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  return uwTick;
 8001348:	4b03      	ldr	r3, [pc, #12]	; (8001358 <HAL_GetTick+0x14>)
 800134a:	681b      	ldr	r3, [r3, #0]
}
 800134c:	4618      	mov	r0, r3
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	200002f4 	.word	0x200002f4

0800135c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001364:	f7ff ffee 	bl	8001344 <HAL_GetTick>
 8001368:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001374:	d005      	beq.n	8001382 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001376:	4b0a      	ldr	r3, [pc, #40]	; (80013a0 <HAL_Delay+0x44>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	461a      	mov	r2, r3
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	4413      	add	r3, r2
 8001380:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001382:	bf00      	nop
 8001384:	f7ff ffde 	bl	8001344 <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	68fa      	ldr	r2, [r7, #12]
 8001390:	429a      	cmp	r2, r3
 8001392:	d8f7      	bhi.n	8001384 <HAL_Delay+0x28>
  {
  }
}
 8001394:	bf00      	nop
 8001396:	bf00      	nop
 8001398:	3710      	adds	r7, #16
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	20000008 	.word	0x20000008

080013a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f003 0307 	and.w	r3, r3, #7
 80013b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013b4:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <__NVIC_SetPriorityGrouping+0x44>)
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ba:	68ba      	ldr	r2, [r7, #8]
 80013bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013c0:	4013      	ands	r3, r2
 80013c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013d6:	4a04      	ldr	r2, [pc, #16]	; (80013e8 <__NVIC_SetPriorityGrouping+0x44>)
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	60d3      	str	r3, [r2, #12]
}
 80013dc:	bf00      	nop
 80013de:	3714      	adds	r7, #20
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr
 80013e8:	e000ed00 	.word	0xe000ed00

080013ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013f0:	4b04      	ldr	r3, [pc, #16]	; (8001404 <__NVIC_GetPriorityGrouping+0x18>)
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	0a1b      	lsrs	r3, r3, #8
 80013f6:	f003 0307 	and.w	r3, r3, #7
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	e000ed00 	.word	0xe000ed00

08001408 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001416:	2b00      	cmp	r3, #0
 8001418:	db0b      	blt.n	8001432 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	f003 021f 	and.w	r2, r3, #31
 8001420:	4907      	ldr	r1, [pc, #28]	; (8001440 <__NVIC_EnableIRQ+0x38>)
 8001422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001426:	095b      	lsrs	r3, r3, #5
 8001428:	2001      	movs	r0, #1
 800142a:	fa00 f202 	lsl.w	r2, r0, r2
 800142e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001432:	bf00      	nop
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	e000e100 	.word	0xe000e100

08001444 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	6039      	str	r1, [r7, #0]
 800144e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001454:	2b00      	cmp	r3, #0
 8001456:	db0a      	blt.n	800146e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	b2da      	uxtb	r2, r3
 800145c:	490c      	ldr	r1, [pc, #48]	; (8001490 <__NVIC_SetPriority+0x4c>)
 800145e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001462:	0112      	lsls	r2, r2, #4
 8001464:	b2d2      	uxtb	r2, r2
 8001466:	440b      	add	r3, r1
 8001468:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800146c:	e00a      	b.n	8001484 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	b2da      	uxtb	r2, r3
 8001472:	4908      	ldr	r1, [pc, #32]	; (8001494 <__NVIC_SetPriority+0x50>)
 8001474:	79fb      	ldrb	r3, [r7, #7]
 8001476:	f003 030f 	and.w	r3, r3, #15
 800147a:	3b04      	subs	r3, #4
 800147c:	0112      	lsls	r2, r2, #4
 800147e:	b2d2      	uxtb	r2, r2
 8001480:	440b      	add	r3, r1
 8001482:	761a      	strb	r2, [r3, #24]
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	e000e100 	.word	0xe000e100
 8001494:	e000ed00 	.word	0xe000ed00

08001498 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001498:	b480      	push	{r7}
 800149a:	b089      	sub	sp, #36	; 0x24
 800149c:	af00      	add	r7, sp, #0
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	60b9      	str	r1, [r7, #8]
 80014a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	f003 0307 	and.w	r3, r3, #7
 80014aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	f1c3 0307 	rsb	r3, r3, #7
 80014b2:	2b04      	cmp	r3, #4
 80014b4:	bf28      	it	cs
 80014b6:	2304      	movcs	r3, #4
 80014b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	3304      	adds	r3, #4
 80014be:	2b06      	cmp	r3, #6
 80014c0:	d902      	bls.n	80014c8 <NVIC_EncodePriority+0x30>
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	3b03      	subs	r3, #3
 80014c6:	e000      	b.n	80014ca <NVIC_EncodePriority+0x32>
 80014c8:	2300      	movs	r3, #0
 80014ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	43da      	mvns	r2, r3
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	401a      	ands	r2, r3
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ea:	43d9      	mvns	r1, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f0:	4313      	orrs	r3, r2
         );
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3724      	adds	r7, #36	; 0x24
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
	...

08001500 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	3b01      	subs	r3, #1
 800150c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001510:	d301      	bcc.n	8001516 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001512:	2301      	movs	r3, #1
 8001514:	e00f      	b.n	8001536 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001516:	4a0a      	ldr	r2, [pc, #40]	; (8001540 <SysTick_Config+0x40>)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	3b01      	subs	r3, #1
 800151c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800151e:	210f      	movs	r1, #15
 8001520:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001524:	f7ff ff8e 	bl	8001444 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001528:	4b05      	ldr	r3, [pc, #20]	; (8001540 <SysTick_Config+0x40>)
 800152a:	2200      	movs	r2, #0
 800152c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800152e:	4b04      	ldr	r3, [pc, #16]	; (8001540 <SysTick_Config+0x40>)
 8001530:	2207      	movs	r2, #7
 8001532:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	e000e010 	.word	0xe000e010

08001544 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f7ff ff29 	bl	80013a4 <__NVIC_SetPriorityGrouping>
}
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b086      	sub	sp, #24
 800155e:	af00      	add	r7, sp, #0
 8001560:	4603      	mov	r3, r0
 8001562:	60b9      	str	r1, [r7, #8]
 8001564:	607a      	str	r2, [r7, #4]
 8001566:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001568:	2300      	movs	r3, #0
 800156a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800156c:	f7ff ff3e 	bl	80013ec <__NVIC_GetPriorityGrouping>
 8001570:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	68b9      	ldr	r1, [r7, #8]
 8001576:	6978      	ldr	r0, [r7, #20]
 8001578:	f7ff ff8e 	bl	8001498 <NVIC_EncodePriority>
 800157c:	4602      	mov	r2, r0
 800157e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001582:	4611      	mov	r1, r2
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff ff5d 	bl	8001444 <__NVIC_SetPriority>
}
 800158a:	bf00      	nop
 800158c:	3718      	adds	r7, #24
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	b082      	sub	sp, #8
 8001596:	af00      	add	r7, sp, #0
 8001598:	4603      	mov	r3, r0
 800159a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800159c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff ff31 	bl	8001408 <__NVIC_EnableIRQ>
}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b082      	sub	sp, #8
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f7ff ffa2 	bl	8001500 <SysTick_Config>
 80015bc:	4603      	mov	r3, r0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
	...

080015c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b087      	sub	sp, #28
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015d2:	2300      	movs	r3, #0
 80015d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015d6:	e17f      	b.n	80018d8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	2101      	movs	r1, #1
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	fa01 f303 	lsl.w	r3, r1, r3
 80015e4:	4013      	ands	r3, r2
 80015e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	f000 8171 	beq.w	80018d2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f003 0303 	and.w	r3, r3, #3
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d005      	beq.n	8001608 <HAL_GPIO_Init+0x40>
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f003 0303 	and.w	r3, r3, #3
 8001604:	2b02      	cmp	r3, #2
 8001606:	d130      	bne.n	800166a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	2203      	movs	r2, #3
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	43db      	mvns	r3, r3
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	4013      	ands	r3, r2
 800161e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	68da      	ldr	r2, [r3, #12]
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	693a      	ldr	r2, [r7, #16]
 800162e:	4313      	orrs	r3, r2
 8001630:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	693a      	ldr	r2, [r7, #16]
 8001636:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800163e:	2201      	movs	r2, #1
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	fa02 f303 	lsl.w	r3, r2, r3
 8001646:	43db      	mvns	r3, r3
 8001648:	693a      	ldr	r2, [r7, #16]
 800164a:	4013      	ands	r3, r2
 800164c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	091b      	lsrs	r3, r3, #4
 8001654:	f003 0201 	and.w	r2, r3, #1
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	fa02 f303 	lsl.w	r3, r2, r3
 800165e:	693a      	ldr	r2, [r7, #16]
 8001660:	4313      	orrs	r3, r2
 8001662:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f003 0303 	and.w	r3, r3, #3
 8001672:	2b03      	cmp	r3, #3
 8001674:	d118      	bne.n	80016a8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800167a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800167c:	2201      	movs	r2, #1
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	43db      	mvns	r3, r3
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	4013      	ands	r3, r2
 800168a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	08db      	lsrs	r3, r3, #3
 8001692:	f003 0201 	and.w	r2, r3, #1
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	693a      	ldr	r2, [r7, #16]
 800169e:	4313      	orrs	r3, r2
 80016a0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	693a      	ldr	r2, [r7, #16]
 80016a6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f003 0303 	and.w	r3, r3, #3
 80016b0:	2b03      	cmp	r3, #3
 80016b2:	d017      	beq.n	80016e4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	2203      	movs	r2, #3
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	43db      	mvns	r3, r3
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	4013      	ands	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	689a      	ldr	r2, [r3, #8]
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	4313      	orrs	r3, r2
 80016dc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f003 0303 	and.w	r3, r3, #3
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d123      	bne.n	8001738 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	08da      	lsrs	r2, r3, #3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	3208      	adds	r2, #8
 80016f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	f003 0307 	and.w	r3, r3, #7
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	220f      	movs	r2, #15
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	43db      	mvns	r3, r3
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	4013      	ands	r3, r2
 8001712:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	691a      	ldr	r2, [r3, #16]
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	f003 0307 	and.w	r3, r3, #7
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	693a      	ldr	r2, [r7, #16]
 8001726:	4313      	orrs	r3, r2
 8001728:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	08da      	lsrs	r2, r3, #3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	3208      	adds	r2, #8
 8001732:	6939      	ldr	r1, [r7, #16]
 8001734:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	2203      	movs	r2, #3
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	43db      	mvns	r3, r3
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	4013      	ands	r3, r2
 800174e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f003 0203 	and.w	r2, r3, #3
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	4313      	orrs	r3, r2
 8001764:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	693a      	ldr	r2, [r7, #16]
 800176a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001774:	2b00      	cmp	r3, #0
 8001776:	f000 80ac 	beq.w	80018d2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800177a:	4b5f      	ldr	r3, [pc, #380]	; (80018f8 <HAL_GPIO_Init+0x330>)
 800177c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800177e:	4a5e      	ldr	r2, [pc, #376]	; (80018f8 <HAL_GPIO_Init+0x330>)
 8001780:	f043 0301 	orr.w	r3, r3, #1
 8001784:	6613      	str	r3, [r2, #96]	; 0x60
 8001786:	4b5c      	ldr	r3, [pc, #368]	; (80018f8 <HAL_GPIO_Init+0x330>)
 8001788:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	60bb      	str	r3, [r7, #8]
 8001790:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001792:	4a5a      	ldr	r2, [pc, #360]	; (80018fc <HAL_GPIO_Init+0x334>)
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	089b      	lsrs	r3, r3, #2
 8001798:	3302      	adds	r3, #2
 800179a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800179e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	f003 0303 	and.w	r3, r3, #3
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	220f      	movs	r2, #15
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	43db      	mvns	r3, r3
 80017b0:	693a      	ldr	r2, [r7, #16]
 80017b2:	4013      	ands	r3, r2
 80017b4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80017bc:	d025      	beq.n	800180a <HAL_GPIO_Init+0x242>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a4f      	ldr	r2, [pc, #316]	; (8001900 <HAL_GPIO_Init+0x338>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d01f      	beq.n	8001806 <HAL_GPIO_Init+0x23e>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a4e      	ldr	r2, [pc, #312]	; (8001904 <HAL_GPIO_Init+0x33c>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d019      	beq.n	8001802 <HAL_GPIO_Init+0x23a>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a4d      	ldr	r2, [pc, #308]	; (8001908 <HAL_GPIO_Init+0x340>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d013      	beq.n	80017fe <HAL_GPIO_Init+0x236>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a4c      	ldr	r2, [pc, #304]	; (800190c <HAL_GPIO_Init+0x344>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d00d      	beq.n	80017fa <HAL_GPIO_Init+0x232>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a4b      	ldr	r2, [pc, #300]	; (8001910 <HAL_GPIO_Init+0x348>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d007      	beq.n	80017f6 <HAL_GPIO_Init+0x22e>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a4a      	ldr	r2, [pc, #296]	; (8001914 <HAL_GPIO_Init+0x34c>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d101      	bne.n	80017f2 <HAL_GPIO_Init+0x22a>
 80017ee:	2306      	movs	r3, #6
 80017f0:	e00c      	b.n	800180c <HAL_GPIO_Init+0x244>
 80017f2:	2307      	movs	r3, #7
 80017f4:	e00a      	b.n	800180c <HAL_GPIO_Init+0x244>
 80017f6:	2305      	movs	r3, #5
 80017f8:	e008      	b.n	800180c <HAL_GPIO_Init+0x244>
 80017fa:	2304      	movs	r3, #4
 80017fc:	e006      	b.n	800180c <HAL_GPIO_Init+0x244>
 80017fe:	2303      	movs	r3, #3
 8001800:	e004      	b.n	800180c <HAL_GPIO_Init+0x244>
 8001802:	2302      	movs	r3, #2
 8001804:	e002      	b.n	800180c <HAL_GPIO_Init+0x244>
 8001806:	2301      	movs	r3, #1
 8001808:	e000      	b.n	800180c <HAL_GPIO_Init+0x244>
 800180a:	2300      	movs	r3, #0
 800180c:	697a      	ldr	r2, [r7, #20]
 800180e:	f002 0203 	and.w	r2, r2, #3
 8001812:	0092      	lsls	r2, r2, #2
 8001814:	4093      	lsls	r3, r2
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	4313      	orrs	r3, r2
 800181a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800181c:	4937      	ldr	r1, [pc, #220]	; (80018fc <HAL_GPIO_Init+0x334>)
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	089b      	lsrs	r3, r3, #2
 8001822:	3302      	adds	r3, #2
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800182a:	4b3b      	ldr	r3, [pc, #236]	; (8001918 <HAL_GPIO_Init+0x350>)
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	43db      	mvns	r3, r3
 8001834:	693a      	ldr	r2, [r7, #16]
 8001836:	4013      	ands	r3, r2
 8001838:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d003      	beq.n	800184e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	4313      	orrs	r3, r2
 800184c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800184e:	4a32      	ldr	r2, [pc, #200]	; (8001918 <HAL_GPIO_Init+0x350>)
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001854:	4b30      	ldr	r3, [pc, #192]	; (8001918 <HAL_GPIO_Init+0x350>)
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	43db      	mvns	r3, r3
 800185e:	693a      	ldr	r2, [r7, #16]
 8001860:	4013      	ands	r3, r2
 8001862:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d003      	beq.n	8001878 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001870:	693a      	ldr	r2, [r7, #16]
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	4313      	orrs	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001878:	4a27      	ldr	r2, [pc, #156]	; (8001918 <HAL_GPIO_Init+0x350>)
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800187e:	4b26      	ldr	r3, [pc, #152]	; (8001918 <HAL_GPIO_Init+0x350>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	43db      	mvns	r3, r3
 8001888:	693a      	ldr	r2, [r7, #16]
 800188a:	4013      	ands	r3, r2
 800188c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d003      	beq.n	80018a2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	4313      	orrs	r3, r2
 80018a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018a2:	4a1d      	ldr	r2, [pc, #116]	; (8001918 <HAL_GPIO_Init+0x350>)
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80018a8:	4b1b      	ldr	r3, [pc, #108]	; (8001918 <HAL_GPIO_Init+0x350>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	43db      	mvns	r3, r3
 80018b2:	693a      	ldr	r2, [r7, #16]
 80018b4:	4013      	ands	r3, r2
 80018b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d003      	beq.n	80018cc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018cc:	4a12      	ldr	r2, [pc, #72]	; (8001918 <HAL_GPIO_Init+0x350>)
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	3301      	adds	r3, #1
 80018d6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	fa22 f303 	lsr.w	r3, r2, r3
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	f47f ae78 	bne.w	80015d8 <HAL_GPIO_Init+0x10>
  }
}
 80018e8:	bf00      	nop
 80018ea:	bf00      	nop
 80018ec:	371c      	adds	r7, #28
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	40021000 	.word	0x40021000
 80018fc:	40010000 	.word	0x40010000
 8001900:	48000400 	.word	0x48000400
 8001904:	48000800 	.word	0x48000800
 8001908:	48000c00 	.word	0x48000c00
 800190c:	48001000 	.word	0x48001000
 8001910:	48001400 	.word	0x48001400
 8001914:	48001800 	.word	0x48001800
 8001918:	40010400 	.word	0x40010400

0800191c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	460b      	mov	r3, r1
 8001926:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	691a      	ldr	r2, [r3, #16]
 800192c:	887b      	ldrh	r3, [r7, #2]
 800192e:	4013      	ands	r3, r2
 8001930:	2b00      	cmp	r3, #0
 8001932:	d002      	beq.n	800193a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001934:	2301      	movs	r3, #1
 8001936:	73fb      	strb	r3, [r7, #15]
 8001938:	e001      	b.n	800193e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800193a:	2300      	movs	r3, #0
 800193c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800193e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001940:	4618      	mov	r0, r3
 8001942:	3714      	adds	r7, #20
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	460b      	mov	r3, r1
 8001956:	807b      	strh	r3, [r7, #2]
 8001958:	4613      	mov	r3, r2
 800195a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800195c:	787b      	ldrb	r3, [r7, #1]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d003      	beq.n	800196a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001962:	887a      	ldrh	r2, [r7, #2]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001968:	e002      	b.n	8001970 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800196a:	887a      	ldrh	r2, [r7, #2]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001970:	bf00      	nop
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001986:	4b08      	ldr	r3, [pc, #32]	; (80019a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001988:	695a      	ldr	r2, [r3, #20]
 800198a:	88fb      	ldrh	r3, [r7, #6]
 800198c:	4013      	ands	r3, r2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d006      	beq.n	80019a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001992:	4a05      	ldr	r2, [pc, #20]	; (80019a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001994:	88fb      	ldrh	r3, [r7, #6]
 8001996:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001998:	88fb      	ldrh	r3, [r7, #6]
 800199a:	4618      	mov	r0, r3
 800199c:	f000 f806 	bl	80019ac <HAL_GPIO_EXTI_Callback>
  }
}
 80019a0:	bf00      	nop
 80019a2:	3708      	adds	r7, #8
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	40010400 	.word	0x40010400

080019ac <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80019b6:	bf00      	nop
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
	...

080019c4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80019c8:	4b04      	ldr	r3, [pc, #16]	; (80019dc <HAL_PWREx_GetVoltageRange+0x18>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	40007000 	.word	0x40007000

080019e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019ee:	d130      	bne.n	8001a52 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80019f0:	4b23      	ldr	r3, [pc, #140]	; (8001a80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019fc:	d038      	beq.n	8001a70 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019fe:	4b20      	ldr	r3, [pc, #128]	; (8001a80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a06:	4a1e      	ldr	r2, [pc, #120]	; (8001a80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a0c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a0e:	4b1d      	ldr	r3, [pc, #116]	; (8001a84 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2232      	movs	r2, #50	; 0x32
 8001a14:	fb02 f303 	mul.w	r3, r2, r3
 8001a18:	4a1b      	ldr	r2, [pc, #108]	; (8001a88 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a1e:	0c9b      	lsrs	r3, r3, #18
 8001a20:	3301      	adds	r3, #1
 8001a22:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a24:	e002      	b.n	8001a2c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a2c:	4b14      	ldr	r3, [pc, #80]	; (8001a80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a2e:	695b      	ldr	r3, [r3, #20]
 8001a30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a38:	d102      	bne.n	8001a40 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d1f2      	bne.n	8001a26 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a40:	4b0f      	ldr	r3, [pc, #60]	; (8001a80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a42:	695b      	ldr	r3, [r3, #20]
 8001a44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a4c:	d110      	bne.n	8001a70 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e00f      	b.n	8001a72 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a52:	4b0b      	ldr	r3, [pc, #44]	; (8001a80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a5e:	d007      	beq.n	8001a70 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a60:	4b07      	ldr	r3, [pc, #28]	; (8001a80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a68:	4a05      	ldr	r2, [pc, #20]	; (8001a80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a6e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3714      	adds	r7, #20
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	40007000 	.word	0x40007000
 8001a84:	20000000 	.word	0x20000000
 8001a88:	431bde83 	.word	0x431bde83

08001a8c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b088      	sub	sp, #32
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d101      	bne.n	8001a9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e3ca      	b.n	8002234 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a9e:	4b97      	ldr	r3, [pc, #604]	; (8001cfc <HAL_RCC_OscConfig+0x270>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f003 030c 	and.w	r3, r3, #12
 8001aa6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001aa8:	4b94      	ldr	r3, [pc, #592]	; (8001cfc <HAL_RCC_OscConfig+0x270>)
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	f003 0303 	and.w	r3, r3, #3
 8001ab0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0310 	and.w	r3, r3, #16
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	f000 80e4 	beq.w	8001c88 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d007      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x4a>
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	2b0c      	cmp	r3, #12
 8001aca:	f040 808b 	bne.w	8001be4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	f040 8087 	bne.w	8001be4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ad6:	4b89      	ldr	r3, [pc, #548]	; (8001cfc <HAL_RCC_OscConfig+0x270>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d005      	beq.n	8001aee <HAL_RCC_OscConfig+0x62>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	699b      	ldr	r3, [r3, #24]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d101      	bne.n	8001aee <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e3a2      	b.n	8002234 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a1a      	ldr	r2, [r3, #32]
 8001af2:	4b82      	ldr	r3, [pc, #520]	; (8001cfc <HAL_RCC_OscConfig+0x270>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0308 	and.w	r3, r3, #8
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d004      	beq.n	8001b08 <HAL_RCC_OscConfig+0x7c>
 8001afe:	4b7f      	ldr	r3, [pc, #508]	; (8001cfc <HAL_RCC_OscConfig+0x270>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b06:	e005      	b.n	8001b14 <HAL_RCC_OscConfig+0x88>
 8001b08:	4b7c      	ldr	r3, [pc, #496]	; (8001cfc <HAL_RCC_OscConfig+0x270>)
 8001b0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b0e:	091b      	lsrs	r3, r3, #4
 8001b10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d223      	bcs.n	8001b60 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a1b      	ldr	r3, [r3, #32]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f000 fd55 	bl	80025cc <RCC_SetFlashLatencyFromMSIRange>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e383      	b.n	8002234 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b2c:	4b73      	ldr	r3, [pc, #460]	; (8001cfc <HAL_RCC_OscConfig+0x270>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a72      	ldr	r2, [pc, #456]	; (8001cfc <HAL_RCC_OscConfig+0x270>)
 8001b32:	f043 0308 	orr.w	r3, r3, #8
 8001b36:	6013      	str	r3, [r2, #0]
 8001b38:	4b70      	ldr	r3, [pc, #448]	; (8001cfc <HAL_RCC_OscConfig+0x270>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a1b      	ldr	r3, [r3, #32]
 8001b44:	496d      	ldr	r1, [pc, #436]	; (8001cfc <HAL_RCC_OscConfig+0x270>)
 8001b46:	4313      	orrs	r3, r2
 8001b48:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b4a:	4b6c      	ldr	r3, [pc, #432]	; (8001cfc <HAL_RCC_OscConfig+0x270>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	69db      	ldr	r3, [r3, #28]
 8001b56:	021b      	lsls	r3, r3, #8
 8001b58:	4968      	ldr	r1, [pc, #416]	; (8001cfc <HAL_RCC_OscConfig+0x270>)
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	604b      	str	r3, [r1, #4]
 8001b5e:	e025      	b.n	8001bac <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b60:	4b66      	ldr	r3, [pc, #408]	; (8001cfc <HAL_RCC_OscConfig+0x270>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a65      	ldr	r2, [pc, #404]	; (8001cfc <HAL_RCC_OscConfig+0x270>)
 8001b66:	f043 0308 	orr.w	r3, r3, #8
 8001b6a:	6013      	str	r3, [r2, #0]
 8001b6c:	4b63      	ldr	r3, [pc, #396]	; (8001cfc <HAL_RCC_OscConfig+0x270>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6a1b      	ldr	r3, [r3, #32]
 8001b78:	4960      	ldr	r1, [pc, #384]	; (8001cfc <HAL_RCC_OscConfig+0x270>)
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b7e:	4b5f      	ldr	r3, [pc, #380]	; (8001cfc <HAL_RCC_OscConfig+0x270>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	69db      	ldr	r3, [r3, #28]
 8001b8a:	021b      	lsls	r3, r3, #8
 8001b8c:	495b      	ldr	r1, [pc, #364]	; (8001cfc <HAL_RCC_OscConfig+0x270>)
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d109      	bne.n	8001bac <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6a1b      	ldr	r3, [r3, #32]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f000 fd15 	bl	80025cc <RCC_SetFlashLatencyFromMSIRange>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e343      	b.n	8002234 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bac:	f000 fc4a 	bl	8002444 <HAL_RCC_GetSysClockFreq>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	4b52      	ldr	r3, [pc, #328]	; (8001cfc <HAL_RCC_OscConfig+0x270>)
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	091b      	lsrs	r3, r3, #4
 8001bb8:	f003 030f 	and.w	r3, r3, #15
 8001bbc:	4950      	ldr	r1, [pc, #320]	; (8001d00 <HAL_RCC_OscConfig+0x274>)
 8001bbe:	5ccb      	ldrb	r3, [r1, r3]
 8001bc0:	f003 031f 	and.w	r3, r3, #31
 8001bc4:	fa22 f303 	lsr.w	r3, r2, r3
 8001bc8:	4a4e      	ldr	r2, [pc, #312]	; (8001d04 <HAL_RCC_OscConfig+0x278>)
 8001bca:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001bcc:	4b4e      	ldr	r3, [pc, #312]	; (8001d08 <HAL_RCC_OscConfig+0x27c>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff fb67 	bl	80012a4 <HAL_InitTick>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001bda:	7bfb      	ldrb	r3, [r7, #15]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d052      	beq.n	8001c86 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001be0:	7bfb      	ldrb	r3, [r7, #15]
 8001be2:	e327      	b.n	8002234 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d032      	beq.n	8001c52 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001bec:	4b43      	ldr	r3, [pc, #268]	; (8001cfc <HAL_RCC_OscConfig+0x270>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a42      	ldr	r2, [pc, #264]	; (8001cfc <HAL_RCC_OscConfig+0x270>)
 8001bf2:	f043 0301 	orr.w	r3, r3, #1
 8001bf6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001bf8:	f7ff fba4 	bl	8001344 <HAL_GetTick>
 8001bfc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bfe:	e008      	b.n	8001c12 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c00:	f7ff fba0 	bl	8001344 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e310      	b.n	8002234 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c12:	4b3a      	ldr	r3, [pc, #232]	; (8001cfc <HAL_RCC_OscConfig+0x270>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d0f0      	beq.n	8001c00 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c1e:	4b37      	ldr	r3, [pc, #220]	; (8001cfc <HAL_RCC_OscConfig+0x270>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a36      	ldr	r2, [pc, #216]	; (8001cfc <HAL_RCC_OscConfig+0x270>)
 8001c24:	f043 0308 	orr.w	r3, r3, #8
 8001c28:	6013      	str	r3, [r2, #0]
 8001c2a:	4b34      	ldr	r3, [pc, #208]	; (8001cfc <HAL_RCC_OscConfig+0x270>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6a1b      	ldr	r3, [r3, #32]
 8001c36:	4931      	ldr	r1, [pc, #196]	; (8001cfc <HAL_RCC_OscConfig+0x270>)
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c3c:	4b2f      	ldr	r3, [pc, #188]	; (8001cfc <HAL_RCC_OscConfig+0x270>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	69db      	ldr	r3, [r3, #28]
 8001c48:	021b      	lsls	r3, r3, #8
 8001c4a:	492c      	ldr	r1, [pc, #176]	; (8001cfc <HAL_RCC_OscConfig+0x270>)
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	604b      	str	r3, [r1, #4]
 8001c50:	e01a      	b.n	8001c88 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c52:	4b2a      	ldr	r3, [pc, #168]	; (8001cfc <HAL_RCC_OscConfig+0x270>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a29      	ldr	r2, [pc, #164]	; (8001cfc <HAL_RCC_OscConfig+0x270>)
 8001c58:	f023 0301 	bic.w	r3, r3, #1
 8001c5c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c5e:	f7ff fb71 	bl	8001344 <HAL_GetTick>
 8001c62:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c64:	e008      	b.n	8001c78 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c66:	f7ff fb6d 	bl	8001344 <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d901      	bls.n	8001c78 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e2dd      	b.n	8002234 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c78:	4b20      	ldr	r3, [pc, #128]	; (8001cfc <HAL_RCC_OscConfig+0x270>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0302 	and.w	r3, r3, #2
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d1f0      	bne.n	8001c66 <HAL_RCC_OscConfig+0x1da>
 8001c84:	e000      	b.n	8001c88 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c86:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0301 	and.w	r3, r3, #1
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d074      	beq.n	8001d7e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	2b08      	cmp	r3, #8
 8001c98:	d005      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x21a>
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	2b0c      	cmp	r3, #12
 8001c9e:	d10e      	bne.n	8001cbe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	2b03      	cmp	r3, #3
 8001ca4:	d10b      	bne.n	8001cbe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ca6:	4b15      	ldr	r3, [pc, #84]	; (8001cfc <HAL_RCC_OscConfig+0x270>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d064      	beq.n	8001d7c <HAL_RCC_OscConfig+0x2f0>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d160      	bne.n	8001d7c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e2ba      	b.n	8002234 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cc6:	d106      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x24a>
 8001cc8:	4b0c      	ldr	r3, [pc, #48]	; (8001cfc <HAL_RCC_OscConfig+0x270>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a0b      	ldr	r2, [pc, #44]	; (8001cfc <HAL_RCC_OscConfig+0x270>)
 8001cce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cd2:	6013      	str	r3, [r2, #0]
 8001cd4:	e026      	b.n	8001d24 <HAL_RCC_OscConfig+0x298>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cde:	d115      	bne.n	8001d0c <HAL_RCC_OscConfig+0x280>
 8001ce0:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <HAL_RCC_OscConfig+0x270>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a05      	ldr	r2, [pc, #20]	; (8001cfc <HAL_RCC_OscConfig+0x270>)
 8001ce6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cea:	6013      	str	r3, [r2, #0]
 8001cec:	4b03      	ldr	r3, [pc, #12]	; (8001cfc <HAL_RCC_OscConfig+0x270>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a02      	ldr	r2, [pc, #8]	; (8001cfc <HAL_RCC_OscConfig+0x270>)
 8001cf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cf6:	6013      	str	r3, [r2, #0]
 8001cf8:	e014      	b.n	8001d24 <HAL_RCC_OscConfig+0x298>
 8001cfa:	bf00      	nop
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	0800e27c 	.word	0x0800e27c
 8001d04:	20000000 	.word	0x20000000
 8001d08:	20000004 	.word	0x20000004
 8001d0c:	4ba0      	ldr	r3, [pc, #640]	; (8001f90 <HAL_RCC_OscConfig+0x504>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a9f      	ldr	r2, [pc, #636]	; (8001f90 <HAL_RCC_OscConfig+0x504>)
 8001d12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d16:	6013      	str	r3, [r2, #0]
 8001d18:	4b9d      	ldr	r3, [pc, #628]	; (8001f90 <HAL_RCC_OscConfig+0x504>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a9c      	ldr	r2, [pc, #624]	; (8001f90 <HAL_RCC_OscConfig+0x504>)
 8001d1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d013      	beq.n	8001d54 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d2c:	f7ff fb0a 	bl	8001344 <HAL_GetTick>
 8001d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d32:	e008      	b.n	8001d46 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d34:	f7ff fb06 	bl	8001344 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b64      	cmp	r3, #100	; 0x64
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e276      	b.n	8002234 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d46:	4b92      	ldr	r3, [pc, #584]	; (8001f90 <HAL_RCC_OscConfig+0x504>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d0f0      	beq.n	8001d34 <HAL_RCC_OscConfig+0x2a8>
 8001d52:	e014      	b.n	8001d7e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d54:	f7ff faf6 	bl	8001344 <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d5c:	f7ff faf2 	bl	8001344 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b64      	cmp	r3, #100	; 0x64
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e262      	b.n	8002234 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d6e:	4b88      	ldr	r3, [pc, #544]	; (8001f90 <HAL_RCC_OscConfig+0x504>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d1f0      	bne.n	8001d5c <HAL_RCC_OscConfig+0x2d0>
 8001d7a:	e000      	b.n	8001d7e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d060      	beq.n	8001e4c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	2b04      	cmp	r3, #4
 8001d8e:	d005      	beq.n	8001d9c <HAL_RCC_OscConfig+0x310>
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	2b0c      	cmp	r3, #12
 8001d94:	d119      	bne.n	8001dca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d116      	bne.n	8001dca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d9c:	4b7c      	ldr	r3, [pc, #496]	; (8001f90 <HAL_RCC_OscConfig+0x504>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d005      	beq.n	8001db4 <HAL_RCC_OscConfig+0x328>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d101      	bne.n	8001db4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e23f      	b.n	8002234 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db4:	4b76      	ldr	r3, [pc, #472]	; (8001f90 <HAL_RCC_OscConfig+0x504>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	691b      	ldr	r3, [r3, #16]
 8001dc0:	061b      	lsls	r3, r3, #24
 8001dc2:	4973      	ldr	r1, [pc, #460]	; (8001f90 <HAL_RCC_OscConfig+0x504>)
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dc8:	e040      	b.n	8001e4c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d023      	beq.n	8001e1a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dd2:	4b6f      	ldr	r3, [pc, #444]	; (8001f90 <HAL_RCC_OscConfig+0x504>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a6e      	ldr	r2, [pc, #440]	; (8001f90 <HAL_RCC_OscConfig+0x504>)
 8001dd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ddc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dde:	f7ff fab1 	bl	8001344 <HAL_GetTick>
 8001de2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001de4:	e008      	b.n	8001df8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001de6:	f7ff faad 	bl	8001344 <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d901      	bls.n	8001df8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e21d      	b.n	8002234 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001df8:	4b65      	ldr	r3, [pc, #404]	; (8001f90 <HAL_RCC_OscConfig+0x504>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d0f0      	beq.n	8001de6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e04:	4b62      	ldr	r3, [pc, #392]	; (8001f90 <HAL_RCC_OscConfig+0x504>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	691b      	ldr	r3, [r3, #16]
 8001e10:	061b      	lsls	r3, r3, #24
 8001e12:	495f      	ldr	r1, [pc, #380]	; (8001f90 <HAL_RCC_OscConfig+0x504>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	604b      	str	r3, [r1, #4]
 8001e18:	e018      	b.n	8001e4c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e1a:	4b5d      	ldr	r3, [pc, #372]	; (8001f90 <HAL_RCC_OscConfig+0x504>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a5c      	ldr	r2, [pc, #368]	; (8001f90 <HAL_RCC_OscConfig+0x504>)
 8001e20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e26:	f7ff fa8d 	bl	8001344 <HAL_GetTick>
 8001e2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e2c:	e008      	b.n	8001e40 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e2e:	f7ff fa89 	bl	8001344 <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d901      	bls.n	8001e40 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e1f9      	b.n	8002234 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e40:	4b53      	ldr	r3, [pc, #332]	; (8001f90 <HAL_RCC_OscConfig+0x504>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d1f0      	bne.n	8001e2e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0308 	and.w	r3, r3, #8
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d03c      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	695b      	ldr	r3, [r3, #20]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d01c      	beq.n	8001e9a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e60:	4b4b      	ldr	r3, [pc, #300]	; (8001f90 <HAL_RCC_OscConfig+0x504>)
 8001e62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e66:	4a4a      	ldr	r2, [pc, #296]	; (8001f90 <HAL_RCC_OscConfig+0x504>)
 8001e68:	f043 0301 	orr.w	r3, r3, #1
 8001e6c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e70:	f7ff fa68 	bl	8001344 <HAL_GetTick>
 8001e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e76:	e008      	b.n	8001e8a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e78:	f7ff fa64 	bl	8001344 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d901      	bls.n	8001e8a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e1d4      	b.n	8002234 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e8a:	4b41      	ldr	r3, [pc, #260]	; (8001f90 <HAL_RCC_OscConfig+0x504>)
 8001e8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e90:	f003 0302 	and.w	r3, r3, #2
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d0ef      	beq.n	8001e78 <HAL_RCC_OscConfig+0x3ec>
 8001e98:	e01b      	b.n	8001ed2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e9a:	4b3d      	ldr	r3, [pc, #244]	; (8001f90 <HAL_RCC_OscConfig+0x504>)
 8001e9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ea0:	4a3b      	ldr	r2, [pc, #236]	; (8001f90 <HAL_RCC_OscConfig+0x504>)
 8001ea2:	f023 0301 	bic.w	r3, r3, #1
 8001ea6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eaa:	f7ff fa4b 	bl	8001344 <HAL_GetTick>
 8001eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001eb0:	e008      	b.n	8001ec4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eb2:	f7ff fa47 	bl	8001344 <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d901      	bls.n	8001ec4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e1b7      	b.n	8002234 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ec4:	4b32      	ldr	r3, [pc, #200]	; (8001f90 <HAL_RCC_OscConfig+0x504>)
 8001ec6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1ef      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0304 	and.w	r3, r3, #4
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	f000 80a6 	beq.w	800202c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ee4:	4b2a      	ldr	r3, [pc, #168]	; (8001f90 <HAL_RCC_OscConfig+0x504>)
 8001ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d10d      	bne.n	8001f0c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ef0:	4b27      	ldr	r3, [pc, #156]	; (8001f90 <HAL_RCC_OscConfig+0x504>)
 8001ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef4:	4a26      	ldr	r2, [pc, #152]	; (8001f90 <HAL_RCC_OscConfig+0x504>)
 8001ef6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001efa:	6593      	str	r3, [r2, #88]	; 0x58
 8001efc:	4b24      	ldr	r3, [pc, #144]	; (8001f90 <HAL_RCC_OscConfig+0x504>)
 8001efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f04:	60bb      	str	r3, [r7, #8]
 8001f06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f0c:	4b21      	ldr	r3, [pc, #132]	; (8001f94 <HAL_RCC_OscConfig+0x508>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d118      	bne.n	8001f4a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f18:	4b1e      	ldr	r3, [pc, #120]	; (8001f94 <HAL_RCC_OscConfig+0x508>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a1d      	ldr	r2, [pc, #116]	; (8001f94 <HAL_RCC_OscConfig+0x508>)
 8001f1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f22:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f24:	f7ff fa0e 	bl	8001344 <HAL_GetTick>
 8001f28:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f2a:	e008      	b.n	8001f3e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f2c:	f7ff fa0a 	bl	8001344 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e17a      	b.n	8002234 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f3e:	4b15      	ldr	r3, [pc, #84]	; (8001f94 <HAL_RCC_OscConfig+0x508>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d0f0      	beq.n	8001f2c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d108      	bne.n	8001f64 <HAL_RCC_OscConfig+0x4d8>
 8001f52:	4b0f      	ldr	r3, [pc, #60]	; (8001f90 <HAL_RCC_OscConfig+0x504>)
 8001f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f58:	4a0d      	ldr	r2, [pc, #52]	; (8001f90 <HAL_RCC_OscConfig+0x504>)
 8001f5a:	f043 0301 	orr.w	r3, r3, #1
 8001f5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f62:	e029      	b.n	8001fb8 <HAL_RCC_OscConfig+0x52c>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	2b05      	cmp	r3, #5
 8001f6a:	d115      	bne.n	8001f98 <HAL_RCC_OscConfig+0x50c>
 8001f6c:	4b08      	ldr	r3, [pc, #32]	; (8001f90 <HAL_RCC_OscConfig+0x504>)
 8001f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f72:	4a07      	ldr	r2, [pc, #28]	; (8001f90 <HAL_RCC_OscConfig+0x504>)
 8001f74:	f043 0304 	orr.w	r3, r3, #4
 8001f78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f7c:	4b04      	ldr	r3, [pc, #16]	; (8001f90 <HAL_RCC_OscConfig+0x504>)
 8001f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f82:	4a03      	ldr	r2, [pc, #12]	; (8001f90 <HAL_RCC_OscConfig+0x504>)
 8001f84:	f043 0301 	orr.w	r3, r3, #1
 8001f88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f8c:	e014      	b.n	8001fb8 <HAL_RCC_OscConfig+0x52c>
 8001f8e:	bf00      	nop
 8001f90:	40021000 	.word	0x40021000
 8001f94:	40007000 	.word	0x40007000
 8001f98:	4b9c      	ldr	r3, [pc, #624]	; (800220c <HAL_RCC_OscConfig+0x780>)
 8001f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f9e:	4a9b      	ldr	r2, [pc, #620]	; (800220c <HAL_RCC_OscConfig+0x780>)
 8001fa0:	f023 0301 	bic.w	r3, r3, #1
 8001fa4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fa8:	4b98      	ldr	r3, [pc, #608]	; (800220c <HAL_RCC_OscConfig+0x780>)
 8001faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fae:	4a97      	ldr	r2, [pc, #604]	; (800220c <HAL_RCC_OscConfig+0x780>)
 8001fb0:	f023 0304 	bic.w	r3, r3, #4
 8001fb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d016      	beq.n	8001fee <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc0:	f7ff f9c0 	bl	8001344 <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fc6:	e00a      	b.n	8001fde <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fc8:	f7ff f9bc 	bl	8001344 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e12a      	b.n	8002234 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fde:	4b8b      	ldr	r3, [pc, #556]	; (800220c <HAL_RCC_OscConfig+0x780>)
 8001fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d0ed      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x53c>
 8001fec:	e015      	b.n	800201a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fee:	f7ff f9a9 	bl	8001344 <HAL_GetTick>
 8001ff2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ff4:	e00a      	b.n	800200c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ff6:	f7ff f9a5 	bl	8001344 <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	f241 3288 	movw	r2, #5000	; 0x1388
 8002004:	4293      	cmp	r3, r2
 8002006:	d901      	bls.n	800200c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e113      	b.n	8002234 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800200c:	4b7f      	ldr	r3, [pc, #508]	; (800220c <HAL_RCC_OscConfig+0x780>)
 800200e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	2b00      	cmp	r3, #0
 8002018:	d1ed      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800201a:	7ffb      	ldrb	r3, [r7, #31]
 800201c:	2b01      	cmp	r3, #1
 800201e:	d105      	bne.n	800202c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002020:	4b7a      	ldr	r3, [pc, #488]	; (800220c <HAL_RCC_OscConfig+0x780>)
 8002022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002024:	4a79      	ldr	r2, [pc, #484]	; (800220c <HAL_RCC_OscConfig+0x780>)
 8002026:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800202a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002030:	2b00      	cmp	r3, #0
 8002032:	f000 80fe 	beq.w	8002232 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800203a:	2b02      	cmp	r3, #2
 800203c:	f040 80d0 	bne.w	80021e0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002040:	4b72      	ldr	r3, [pc, #456]	; (800220c <HAL_RCC_OscConfig+0x780>)
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	f003 0203 	and.w	r2, r3, #3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002050:	429a      	cmp	r2, r3
 8002052:	d130      	bne.n	80020b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205e:	3b01      	subs	r3, #1
 8002060:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002062:	429a      	cmp	r2, r3
 8002064:	d127      	bne.n	80020b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002070:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002072:	429a      	cmp	r2, r3
 8002074:	d11f      	bne.n	80020b6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002080:	2a07      	cmp	r2, #7
 8002082:	bf14      	ite	ne
 8002084:	2201      	movne	r2, #1
 8002086:	2200      	moveq	r2, #0
 8002088:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800208a:	4293      	cmp	r3, r2
 800208c:	d113      	bne.n	80020b6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002098:	085b      	lsrs	r3, r3, #1
 800209a:	3b01      	subs	r3, #1
 800209c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800209e:	429a      	cmp	r2, r3
 80020a0:	d109      	bne.n	80020b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ac:	085b      	lsrs	r3, r3, #1
 80020ae:	3b01      	subs	r3, #1
 80020b0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d06e      	beq.n	8002194 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	2b0c      	cmp	r3, #12
 80020ba:	d069      	beq.n	8002190 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80020bc:	4b53      	ldr	r3, [pc, #332]	; (800220c <HAL_RCC_OscConfig+0x780>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d105      	bne.n	80020d4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80020c8:	4b50      	ldr	r3, [pc, #320]	; (800220c <HAL_RCC_OscConfig+0x780>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e0ad      	b.n	8002234 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80020d8:	4b4c      	ldr	r3, [pc, #304]	; (800220c <HAL_RCC_OscConfig+0x780>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a4b      	ldr	r2, [pc, #300]	; (800220c <HAL_RCC_OscConfig+0x780>)
 80020de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020e2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80020e4:	f7ff f92e 	bl	8001344 <HAL_GetTick>
 80020e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020ea:	e008      	b.n	80020fe <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ec:	f7ff f92a 	bl	8001344 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e09a      	b.n	8002234 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020fe:	4b43      	ldr	r3, [pc, #268]	; (800220c <HAL_RCC_OscConfig+0x780>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d1f0      	bne.n	80020ec <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800210a:	4b40      	ldr	r3, [pc, #256]	; (800220c <HAL_RCC_OscConfig+0x780>)
 800210c:	68da      	ldr	r2, [r3, #12]
 800210e:	4b40      	ldr	r3, [pc, #256]	; (8002210 <HAL_RCC_OscConfig+0x784>)
 8002110:	4013      	ands	r3, r2
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800211a:	3a01      	subs	r2, #1
 800211c:	0112      	lsls	r2, r2, #4
 800211e:	4311      	orrs	r1, r2
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002124:	0212      	lsls	r2, r2, #8
 8002126:	4311      	orrs	r1, r2
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800212c:	0852      	lsrs	r2, r2, #1
 800212e:	3a01      	subs	r2, #1
 8002130:	0552      	lsls	r2, r2, #21
 8002132:	4311      	orrs	r1, r2
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002138:	0852      	lsrs	r2, r2, #1
 800213a:	3a01      	subs	r2, #1
 800213c:	0652      	lsls	r2, r2, #25
 800213e:	4311      	orrs	r1, r2
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002144:	0912      	lsrs	r2, r2, #4
 8002146:	0452      	lsls	r2, r2, #17
 8002148:	430a      	orrs	r2, r1
 800214a:	4930      	ldr	r1, [pc, #192]	; (800220c <HAL_RCC_OscConfig+0x780>)
 800214c:	4313      	orrs	r3, r2
 800214e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002150:	4b2e      	ldr	r3, [pc, #184]	; (800220c <HAL_RCC_OscConfig+0x780>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a2d      	ldr	r2, [pc, #180]	; (800220c <HAL_RCC_OscConfig+0x780>)
 8002156:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800215a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800215c:	4b2b      	ldr	r3, [pc, #172]	; (800220c <HAL_RCC_OscConfig+0x780>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	4a2a      	ldr	r2, [pc, #168]	; (800220c <HAL_RCC_OscConfig+0x780>)
 8002162:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002166:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002168:	f7ff f8ec 	bl	8001344 <HAL_GetTick>
 800216c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800216e:	e008      	b.n	8002182 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002170:	f7ff f8e8 	bl	8001344 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b02      	cmp	r3, #2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e058      	b.n	8002234 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002182:	4b22      	ldr	r3, [pc, #136]	; (800220c <HAL_RCC_OscConfig+0x780>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d0f0      	beq.n	8002170 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800218e:	e050      	b.n	8002232 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e04f      	b.n	8002234 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002194:	4b1d      	ldr	r3, [pc, #116]	; (800220c <HAL_RCC_OscConfig+0x780>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d148      	bne.n	8002232 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80021a0:	4b1a      	ldr	r3, [pc, #104]	; (800220c <HAL_RCC_OscConfig+0x780>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a19      	ldr	r2, [pc, #100]	; (800220c <HAL_RCC_OscConfig+0x780>)
 80021a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021aa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021ac:	4b17      	ldr	r3, [pc, #92]	; (800220c <HAL_RCC_OscConfig+0x780>)
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	4a16      	ldr	r2, [pc, #88]	; (800220c <HAL_RCC_OscConfig+0x780>)
 80021b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021b6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80021b8:	f7ff f8c4 	bl	8001344 <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021be:	e008      	b.n	80021d2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021c0:	f7ff f8c0 	bl	8001344 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e030      	b.n	8002234 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021d2:	4b0e      	ldr	r3, [pc, #56]	; (800220c <HAL_RCC_OscConfig+0x780>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d0f0      	beq.n	80021c0 <HAL_RCC_OscConfig+0x734>
 80021de:	e028      	b.n	8002232 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	2b0c      	cmp	r3, #12
 80021e4:	d023      	beq.n	800222e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021e6:	4b09      	ldr	r3, [pc, #36]	; (800220c <HAL_RCC_OscConfig+0x780>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a08      	ldr	r2, [pc, #32]	; (800220c <HAL_RCC_OscConfig+0x780>)
 80021ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f2:	f7ff f8a7 	bl	8001344 <HAL_GetTick>
 80021f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021f8:	e00c      	b.n	8002214 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021fa:	f7ff f8a3 	bl	8001344 <HAL_GetTick>
 80021fe:	4602      	mov	r2, r0
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	2b02      	cmp	r3, #2
 8002206:	d905      	bls.n	8002214 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e013      	b.n	8002234 <HAL_RCC_OscConfig+0x7a8>
 800220c:	40021000 	.word	0x40021000
 8002210:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002214:	4b09      	ldr	r3, [pc, #36]	; (800223c <HAL_RCC_OscConfig+0x7b0>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d1ec      	bne.n	80021fa <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002220:	4b06      	ldr	r3, [pc, #24]	; (800223c <HAL_RCC_OscConfig+0x7b0>)
 8002222:	68da      	ldr	r2, [r3, #12]
 8002224:	4905      	ldr	r1, [pc, #20]	; (800223c <HAL_RCC_OscConfig+0x7b0>)
 8002226:	4b06      	ldr	r3, [pc, #24]	; (8002240 <HAL_RCC_OscConfig+0x7b4>)
 8002228:	4013      	ands	r3, r2
 800222a:	60cb      	str	r3, [r1, #12]
 800222c:	e001      	b.n	8002232 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e000      	b.n	8002234 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002232:	2300      	movs	r3, #0
}
 8002234:	4618      	mov	r0, r3
 8002236:	3720      	adds	r7, #32
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	40021000 	.word	0x40021000
 8002240:	feeefffc 	.word	0xfeeefffc

08002244 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d101      	bne.n	8002258 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e0e7      	b.n	8002428 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002258:	4b75      	ldr	r3, [pc, #468]	; (8002430 <HAL_RCC_ClockConfig+0x1ec>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0307 	and.w	r3, r3, #7
 8002260:	683a      	ldr	r2, [r7, #0]
 8002262:	429a      	cmp	r2, r3
 8002264:	d910      	bls.n	8002288 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002266:	4b72      	ldr	r3, [pc, #456]	; (8002430 <HAL_RCC_ClockConfig+0x1ec>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f023 0207 	bic.w	r2, r3, #7
 800226e:	4970      	ldr	r1, [pc, #448]	; (8002430 <HAL_RCC_ClockConfig+0x1ec>)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	4313      	orrs	r3, r2
 8002274:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002276:	4b6e      	ldr	r3, [pc, #440]	; (8002430 <HAL_RCC_ClockConfig+0x1ec>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0307 	and.w	r3, r3, #7
 800227e:	683a      	ldr	r2, [r7, #0]
 8002280:	429a      	cmp	r2, r3
 8002282:	d001      	beq.n	8002288 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e0cf      	b.n	8002428 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d010      	beq.n	80022b6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689a      	ldr	r2, [r3, #8]
 8002298:	4b66      	ldr	r3, [pc, #408]	; (8002434 <HAL_RCC_ClockConfig+0x1f0>)
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d908      	bls.n	80022b6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022a4:	4b63      	ldr	r3, [pc, #396]	; (8002434 <HAL_RCC_ClockConfig+0x1f0>)
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	4960      	ldr	r1, [pc, #384]	; (8002434 <HAL_RCC_ClockConfig+0x1f0>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d04c      	beq.n	800235c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	2b03      	cmp	r3, #3
 80022c8:	d107      	bne.n	80022da <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022ca:	4b5a      	ldr	r3, [pc, #360]	; (8002434 <HAL_RCC_ClockConfig+0x1f0>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d121      	bne.n	800231a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e0a6      	b.n	8002428 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d107      	bne.n	80022f2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022e2:	4b54      	ldr	r3, [pc, #336]	; (8002434 <HAL_RCC_ClockConfig+0x1f0>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d115      	bne.n	800231a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e09a      	b.n	8002428 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d107      	bne.n	800230a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022fa:	4b4e      	ldr	r3, [pc, #312]	; (8002434 <HAL_RCC_ClockConfig+0x1f0>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d109      	bne.n	800231a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e08e      	b.n	8002428 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800230a:	4b4a      	ldr	r3, [pc, #296]	; (8002434 <HAL_RCC_ClockConfig+0x1f0>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002312:	2b00      	cmp	r3, #0
 8002314:	d101      	bne.n	800231a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e086      	b.n	8002428 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800231a:	4b46      	ldr	r3, [pc, #280]	; (8002434 <HAL_RCC_ClockConfig+0x1f0>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f023 0203 	bic.w	r2, r3, #3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	4943      	ldr	r1, [pc, #268]	; (8002434 <HAL_RCC_ClockConfig+0x1f0>)
 8002328:	4313      	orrs	r3, r2
 800232a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800232c:	f7ff f80a 	bl	8001344 <HAL_GetTick>
 8002330:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002332:	e00a      	b.n	800234a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002334:	f7ff f806 	bl	8001344 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002342:	4293      	cmp	r3, r2
 8002344:	d901      	bls.n	800234a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e06e      	b.n	8002428 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800234a:	4b3a      	ldr	r3, [pc, #232]	; (8002434 <HAL_RCC_ClockConfig+0x1f0>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f003 020c 	and.w	r2, r3, #12
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	429a      	cmp	r2, r3
 800235a:	d1eb      	bne.n	8002334 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0302 	and.w	r3, r3, #2
 8002364:	2b00      	cmp	r3, #0
 8002366:	d010      	beq.n	800238a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689a      	ldr	r2, [r3, #8]
 800236c:	4b31      	ldr	r3, [pc, #196]	; (8002434 <HAL_RCC_ClockConfig+0x1f0>)
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002374:	429a      	cmp	r2, r3
 8002376:	d208      	bcs.n	800238a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002378:	4b2e      	ldr	r3, [pc, #184]	; (8002434 <HAL_RCC_ClockConfig+0x1f0>)
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	492b      	ldr	r1, [pc, #172]	; (8002434 <HAL_RCC_ClockConfig+0x1f0>)
 8002386:	4313      	orrs	r3, r2
 8002388:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800238a:	4b29      	ldr	r3, [pc, #164]	; (8002430 <HAL_RCC_ClockConfig+0x1ec>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	683a      	ldr	r2, [r7, #0]
 8002394:	429a      	cmp	r2, r3
 8002396:	d210      	bcs.n	80023ba <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002398:	4b25      	ldr	r3, [pc, #148]	; (8002430 <HAL_RCC_ClockConfig+0x1ec>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f023 0207 	bic.w	r2, r3, #7
 80023a0:	4923      	ldr	r1, [pc, #140]	; (8002430 <HAL_RCC_ClockConfig+0x1ec>)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023a8:	4b21      	ldr	r3, [pc, #132]	; (8002430 <HAL_RCC_ClockConfig+0x1ec>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0307 	and.w	r3, r3, #7
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d001      	beq.n	80023ba <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e036      	b.n	8002428 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0304 	and.w	r3, r3, #4
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d008      	beq.n	80023d8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023c6:	4b1b      	ldr	r3, [pc, #108]	; (8002434 <HAL_RCC_ClockConfig+0x1f0>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	4918      	ldr	r1, [pc, #96]	; (8002434 <HAL_RCC_ClockConfig+0x1f0>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0308 	and.w	r3, r3, #8
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d009      	beq.n	80023f8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023e4:	4b13      	ldr	r3, [pc, #76]	; (8002434 <HAL_RCC_ClockConfig+0x1f0>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	691b      	ldr	r3, [r3, #16]
 80023f0:	00db      	lsls	r3, r3, #3
 80023f2:	4910      	ldr	r1, [pc, #64]	; (8002434 <HAL_RCC_ClockConfig+0x1f0>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023f8:	f000 f824 	bl	8002444 <HAL_RCC_GetSysClockFreq>
 80023fc:	4602      	mov	r2, r0
 80023fe:	4b0d      	ldr	r3, [pc, #52]	; (8002434 <HAL_RCC_ClockConfig+0x1f0>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	091b      	lsrs	r3, r3, #4
 8002404:	f003 030f 	and.w	r3, r3, #15
 8002408:	490b      	ldr	r1, [pc, #44]	; (8002438 <HAL_RCC_ClockConfig+0x1f4>)
 800240a:	5ccb      	ldrb	r3, [r1, r3]
 800240c:	f003 031f 	and.w	r3, r3, #31
 8002410:	fa22 f303 	lsr.w	r3, r2, r3
 8002414:	4a09      	ldr	r2, [pc, #36]	; (800243c <HAL_RCC_ClockConfig+0x1f8>)
 8002416:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002418:	4b09      	ldr	r3, [pc, #36]	; (8002440 <HAL_RCC_ClockConfig+0x1fc>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4618      	mov	r0, r3
 800241e:	f7fe ff41 	bl	80012a4 <HAL_InitTick>
 8002422:	4603      	mov	r3, r0
 8002424:	72fb      	strb	r3, [r7, #11]

  return status;
 8002426:	7afb      	ldrb	r3, [r7, #11]
}
 8002428:	4618      	mov	r0, r3
 800242a:	3710      	adds	r7, #16
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	40022000 	.word	0x40022000
 8002434:	40021000 	.word	0x40021000
 8002438:	0800e27c 	.word	0x0800e27c
 800243c:	20000000 	.word	0x20000000
 8002440:	20000004 	.word	0x20000004

08002444 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002444:	b480      	push	{r7}
 8002446:	b089      	sub	sp, #36	; 0x24
 8002448:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800244a:	2300      	movs	r3, #0
 800244c:	61fb      	str	r3, [r7, #28]
 800244e:	2300      	movs	r3, #0
 8002450:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002452:	4b3e      	ldr	r3, [pc, #248]	; (800254c <HAL_RCC_GetSysClockFreq+0x108>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f003 030c 	and.w	r3, r3, #12
 800245a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800245c:	4b3b      	ldr	r3, [pc, #236]	; (800254c <HAL_RCC_GetSysClockFreq+0x108>)
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	f003 0303 	and.w	r3, r3, #3
 8002464:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d005      	beq.n	8002478 <HAL_RCC_GetSysClockFreq+0x34>
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	2b0c      	cmp	r3, #12
 8002470:	d121      	bne.n	80024b6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d11e      	bne.n	80024b6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002478:	4b34      	ldr	r3, [pc, #208]	; (800254c <HAL_RCC_GetSysClockFreq+0x108>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0308 	and.w	r3, r3, #8
 8002480:	2b00      	cmp	r3, #0
 8002482:	d107      	bne.n	8002494 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002484:	4b31      	ldr	r3, [pc, #196]	; (800254c <HAL_RCC_GetSysClockFreq+0x108>)
 8002486:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800248a:	0a1b      	lsrs	r3, r3, #8
 800248c:	f003 030f 	and.w	r3, r3, #15
 8002490:	61fb      	str	r3, [r7, #28]
 8002492:	e005      	b.n	80024a0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002494:	4b2d      	ldr	r3, [pc, #180]	; (800254c <HAL_RCC_GetSysClockFreq+0x108>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	091b      	lsrs	r3, r3, #4
 800249a:	f003 030f 	and.w	r3, r3, #15
 800249e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80024a0:	4a2b      	ldr	r2, [pc, #172]	; (8002550 <HAL_RCC_GetSysClockFreq+0x10c>)
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024a8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d10d      	bne.n	80024cc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024b4:	e00a      	b.n	80024cc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	2b04      	cmp	r3, #4
 80024ba:	d102      	bne.n	80024c2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80024bc:	4b25      	ldr	r3, [pc, #148]	; (8002554 <HAL_RCC_GetSysClockFreq+0x110>)
 80024be:	61bb      	str	r3, [r7, #24]
 80024c0:	e004      	b.n	80024cc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	2b08      	cmp	r3, #8
 80024c6:	d101      	bne.n	80024cc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024c8:	4b23      	ldr	r3, [pc, #140]	; (8002558 <HAL_RCC_GetSysClockFreq+0x114>)
 80024ca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	2b0c      	cmp	r3, #12
 80024d0:	d134      	bne.n	800253c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024d2:	4b1e      	ldr	r3, [pc, #120]	; (800254c <HAL_RCC_GetSysClockFreq+0x108>)
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	f003 0303 	and.w	r3, r3, #3
 80024da:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d003      	beq.n	80024ea <HAL_RCC_GetSysClockFreq+0xa6>
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	2b03      	cmp	r3, #3
 80024e6:	d003      	beq.n	80024f0 <HAL_RCC_GetSysClockFreq+0xac>
 80024e8:	e005      	b.n	80024f6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80024ea:	4b1a      	ldr	r3, [pc, #104]	; (8002554 <HAL_RCC_GetSysClockFreq+0x110>)
 80024ec:	617b      	str	r3, [r7, #20]
      break;
 80024ee:	e005      	b.n	80024fc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80024f0:	4b19      	ldr	r3, [pc, #100]	; (8002558 <HAL_RCC_GetSysClockFreq+0x114>)
 80024f2:	617b      	str	r3, [r7, #20]
      break;
 80024f4:	e002      	b.n	80024fc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	617b      	str	r3, [r7, #20]
      break;
 80024fa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024fc:	4b13      	ldr	r3, [pc, #76]	; (800254c <HAL_RCC_GetSysClockFreq+0x108>)
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	091b      	lsrs	r3, r3, #4
 8002502:	f003 0307 	and.w	r3, r3, #7
 8002506:	3301      	adds	r3, #1
 8002508:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800250a:	4b10      	ldr	r3, [pc, #64]	; (800254c <HAL_RCC_GetSysClockFreq+0x108>)
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	0a1b      	lsrs	r3, r3, #8
 8002510:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002514:	697a      	ldr	r2, [r7, #20]
 8002516:	fb03 f202 	mul.w	r2, r3, r2
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002520:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002522:	4b0a      	ldr	r3, [pc, #40]	; (800254c <HAL_RCC_GetSysClockFreq+0x108>)
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	0e5b      	lsrs	r3, r3, #25
 8002528:	f003 0303 	and.w	r3, r3, #3
 800252c:	3301      	adds	r3, #1
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	fbb2 f3f3 	udiv	r3, r2, r3
 800253a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800253c:	69bb      	ldr	r3, [r7, #24]
}
 800253e:	4618      	mov	r0, r3
 8002540:	3724      	adds	r7, #36	; 0x24
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	40021000 	.word	0x40021000
 8002550:	0800e294 	.word	0x0800e294
 8002554:	00f42400 	.word	0x00f42400
 8002558:	007a1200 	.word	0x007a1200

0800255c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002560:	4b03      	ldr	r3, [pc, #12]	; (8002570 <HAL_RCC_GetHCLKFreq+0x14>)
 8002562:	681b      	ldr	r3, [r3, #0]
}
 8002564:	4618      	mov	r0, r3
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	20000000 	.word	0x20000000

08002574 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002578:	f7ff fff0 	bl	800255c <HAL_RCC_GetHCLKFreq>
 800257c:	4602      	mov	r2, r0
 800257e:	4b06      	ldr	r3, [pc, #24]	; (8002598 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	0a1b      	lsrs	r3, r3, #8
 8002584:	f003 0307 	and.w	r3, r3, #7
 8002588:	4904      	ldr	r1, [pc, #16]	; (800259c <HAL_RCC_GetPCLK1Freq+0x28>)
 800258a:	5ccb      	ldrb	r3, [r1, r3]
 800258c:	f003 031f 	and.w	r3, r3, #31
 8002590:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002594:	4618      	mov	r0, r3
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40021000 	.word	0x40021000
 800259c:	0800e28c 	.word	0x0800e28c

080025a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80025a4:	f7ff ffda 	bl	800255c <HAL_RCC_GetHCLKFreq>
 80025a8:	4602      	mov	r2, r0
 80025aa:	4b06      	ldr	r3, [pc, #24]	; (80025c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	0adb      	lsrs	r3, r3, #11
 80025b0:	f003 0307 	and.w	r3, r3, #7
 80025b4:	4904      	ldr	r1, [pc, #16]	; (80025c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80025b6:	5ccb      	ldrb	r3, [r1, r3]
 80025b8:	f003 031f 	and.w	r3, r3, #31
 80025bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40021000 	.word	0x40021000
 80025c8:	0800e28c 	.word	0x0800e28c

080025cc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80025d4:	2300      	movs	r3, #0
 80025d6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80025d8:	4b2a      	ldr	r3, [pc, #168]	; (8002684 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d003      	beq.n	80025ec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80025e4:	f7ff f9ee 	bl	80019c4 <HAL_PWREx_GetVoltageRange>
 80025e8:	6178      	str	r0, [r7, #20]
 80025ea:	e014      	b.n	8002616 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80025ec:	4b25      	ldr	r3, [pc, #148]	; (8002684 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f0:	4a24      	ldr	r2, [pc, #144]	; (8002684 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025f6:	6593      	str	r3, [r2, #88]	; 0x58
 80025f8:	4b22      	ldr	r3, [pc, #136]	; (8002684 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002600:	60fb      	str	r3, [r7, #12]
 8002602:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002604:	f7ff f9de 	bl	80019c4 <HAL_PWREx_GetVoltageRange>
 8002608:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800260a:	4b1e      	ldr	r3, [pc, #120]	; (8002684 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800260c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800260e:	4a1d      	ldr	r2, [pc, #116]	; (8002684 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002610:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002614:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800261c:	d10b      	bne.n	8002636 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2b80      	cmp	r3, #128	; 0x80
 8002622:	d919      	bls.n	8002658 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2ba0      	cmp	r3, #160	; 0xa0
 8002628:	d902      	bls.n	8002630 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800262a:	2302      	movs	r3, #2
 800262c:	613b      	str	r3, [r7, #16]
 800262e:	e013      	b.n	8002658 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002630:	2301      	movs	r3, #1
 8002632:	613b      	str	r3, [r7, #16]
 8002634:	e010      	b.n	8002658 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2b80      	cmp	r3, #128	; 0x80
 800263a:	d902      	bls.n	8002642 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800263c:	2303      	movs	r3, #3
 800263e:	613b      	str	r3, [r7, #16]
 8002640:	e00a      	b.n	8002658 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2b80      	cmp	r3, #128	; 0x80
 8002646:	d102      	bne.n	800264e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002648:	2302      	movs	r3, #2
 800264a:	613b      	str	r3, [r7, #16]
 800264c:	e004      	b.n	8002658 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2b70      	cmp	r3, #112	; 0x70
 8002652:	d101      	bne.n	8002658 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002654:	2301      	movs	r3, #1
 8002656:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002658:	4b0b      	ldr	r3, [pc, #44]	; (8002688 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f023 0207 	bic.w	r2, r3, #7
 8002660:	4909      	ldr	r1, [pc, #36]	; (8002688 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	4313      	orrs	r3, r2
 8002666:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002668:	4b07      	ldr	r3, [pc, #28]	; (8002688 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0307 	and.w	r3, r3, #7
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	429a      	cmp	r2, r3
 8002674:	d001      	beq.n	800267a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e000      	b.n	800267c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	3718      	adds	r7, #24
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40021000 	.word	0x40021000
 8002688:	40022000 	.word	0x40022000

0800268c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002694:	2300      	movs	r3, #0
 8002696:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002698:	2300      	movs	r3, #0
 800269a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d041      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026ac:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80026b0:	d02a      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80026b2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80026b6:	d824      	bhi.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80026b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80026bc:	d008      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80026be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80026c2:	d81e      	bhi.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d00a      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x52>
 80026c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026cc:	d010      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80026ce:	e018      	b.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80026d0:	4b86      	ldr	r3, [pc, #536]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	4a85      	ldr	r2, [pc, #532]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026da:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026dc:	e015      	b.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	3304      	adds	r3, #4
 80026e2:	2100      	movs	r1, #0
 80026e4:	4618      	mov	r0, r3
 80026e6:	f000 fabb 	bl	8002c60 <RCCEx_PLLSAI1_Config>
 80026ea:	4603      	mov	r3, r0
 80026ec:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026ee:	e00c      	b.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	3320      	adds	r3, #32
 80026f4:	2100      	movs	r1, #0
 80026f6:	4618      	mov	r0, r3
 80026f8:	f000 fba6 	bl	8002e48 <RCCEx_PLLSAI2_Config>
 80026fc:	4603      	mov	r3, r0
 80026fe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002700:	e003      	b.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	74fb      	strb	r3, [r7, #19]
      break;
 8002706:	e000      	b.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002708:	bf00      	nop
    }

    if(ret == HAL_OK)
 800270a:	7cfb      	ldrb	r3, [r7, #19]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d10b      	bne.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002710:	4b76      	ldr	r3, [pc, #472]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002716:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800271e:	4973      	ldr	r1, [pc, #460]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002720:	4313      	orrs	r3, r2
 8002722:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002726:	e001      	b.n	800272c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002728:	7cfb      	ldrb	r3, [r7, #19]
 800272a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d041      	beq.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800273c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002740:	d02a      	beq.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002742:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002746:	d824      	bhi.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002748:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800274c:	d008      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800274e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002752:	d81e      	bhi.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002754:	2b00      	cmp	r3, #0
 8002756:	d00a      	beq.n	800276e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002758:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800275c:	d010      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800275e:	e018      	b.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002760:	4b62      	ldr	r3, [pc, #392]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	4a61      	ldr	r2, [pc, #388]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002766:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800276a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800276c:	e015      	b.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	3304      	adds	r3, #4
 8002772:	2100      	movs	r1, #0
 8002774:	4618      	mov	r0, r3
 8002776:	f000 fa73 	bl	8002c60 <RCCEx_PLLSAI1_Config>
 800277a:	4603      	mov	r3, r0
 800277c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800277e:	e00c      	b.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	3320      	adds	r3, #32
 8002784:	2100      	movs	r1, #0
 8002786:	4618      	mov	r0, r3
 8002788:	f000 fb5e 	bl	8002e48 <RCCEx_PLLSAI2_Config>
 800278c:	4603      	mov	r3, r0
 800278e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002790:	e003      	b.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	74fb      	strb	r3, [r7, #19]
      break;
 8002796:	e000      	b.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002798:	bf00      	nop
    }

    if(ret == HAL_OK)
 800279a:	7cfb      	ldrb	r3, [r7, #19]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d10b      	bne.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80027a0:	4b52      	ldr	r3, [pc, #328]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027ae:	494f      	ldr	r1, [pc, #316]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80027b6:	e001      	b.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027b8:	7cfb      	ldrb	r3, [r7, #19]
 80027ba:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	f000 80a0 	beq.w	800290a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027ca:	2300      	movs	r3, #0
 80027cc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80027ce:	4b47      	ldr	r3, [pc, #284]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d101      	bne.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x152>
 80027da:	2301      	movs	r3, #1
 80027dc:	e000      	b.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80027de:	2300      	movs	r3, #0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d00d      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027e4:	4b41      	ldr	r3, [pc, #260]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e8:	4a40      	ldr	r2, [pc, #256]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ee:	6593      	str	r3, [r2, #88]	; 0x58
 80027f0:	4b3e      	ldr	r3, [pc, #248]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f8:	60bb      	str	r3, [r7, #8]
 80027fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027fc:	2301      	movs	r3, #1
 80027fe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002800:	4b3b      	ldr	r3, [pc, #236]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a3a      	ldr	r2, [pc, #232]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002806:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800280a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800280c:	f7fe fd9a 	bl	8001344 <HAL_GetTick>
 8002810:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002812:	e009      	b.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002814:	f7fe fd96 	bl	8001344 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	2b02      	cmp	r3, #2
 8002820:	d902      	bls.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	74fb      	strb	r3, [r7, #19]
        break;
 8002826:	e005      	b.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002828:	4b31      	ldr	r3, [pc, #196]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002830:	2b00      	cmp	r3, #0
 8002832:	d0ef      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002834:	7cfb      	ldrb	r3, [r7, #19]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d15c      	bne.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800283a:	4b2c      	ldr	r3, [pc, #176]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800283c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002840:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002844:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d01f      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002852:	697a      	ldr	r2, [r7, #20]
 8002854:	429a      	cmp	r2, r3
 8002856:	d019      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002858:	4b24      	ldr	r3, [pc, #144]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800285a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800285e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002862:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002864:	4b21      	ldr	r3, [pc, #132]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800286a:	4a20      	ldr	r2, [pc, #128]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800286c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002870:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002874:	4b1d      	ldr	r3, [pc, #116]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800287a:	4a1c      	ldr	r2, [pc, #112]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800287c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002880:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002884:	4a19      	ldr	r2, [pc, #100]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	2b00      	cmp	r3, #0
 8002894:	d016      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002896:	f7fe fd55 	bl	8001344 <HAL_GetTick>
 800289a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800289c:	e00b      	b.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800289e:	f7fe fd51 	bl	8001344 <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d902      	bls.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	74fb      	strb	r3, [r7, #19]
            break;
 80028b4:	e006      	b.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028b6:	4b0d      	ldr	r3, [pc, #52]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028bc:	f003 0302 	and.w	r3, r3, #2
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d0ec      	beq.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80028c4:	7cfb      	ldrb	r3, [r7, #19]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d10c      	bne.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028ca:	4b08      	ldr	r3, [pc, #32]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028da:	4904      	ldr	r1, [pc, #16]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80028e2:	e009      	b.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80028e4:	7cfb      	ldrb	r3, [r7, #19]
 80028e6:	74bb      	strb	r3, [r7, #18]
 80028e8:	e006      	b.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80028ea:	bf00      	nop
 80028ec:	40021000 	.word	0x40021000
 80028f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028f4:	7cfb      	ldrb	r3, [r7, #19]
 80028f6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028f8:	7c7b      	ldrb	r3, [r7, #17]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d105      	bne.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028fe:	4b9e      	ldr	r3, [pc, #632]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002902:	4a9d      	ldr	r2, [pc, #628]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002904:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002908:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	2b00      	cmp	r3, #0
 8002914:	d00a      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002916:	4b98      	ldr	r3, [pc, #608]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800291c:	f023 0203 	bic.w	r2, r3, #3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002924:	4994      	ldr	r1, [pc, #592]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002926:	4313      	orrs	r3, r2
 8002928:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0302 	and.w	r3, r3, #2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d00a      	beq.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002938:	4b8f      	ldr	r3, [pc, #572]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800293a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800293e:	f023 020c 	bic.w	r2, r3, #12
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002946:	498c      	ldr	r1, [pc, #560]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002948:	4313      	orrs	r3, r2
 800294a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0304 	and.w	r3, r3, #4
 8002956:	2b00      	cmp	r3, #0
 8002958:	d00a      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800295a:	4b87      	ldr	r3, [pc, #540]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800295c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002960:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002968:	4983      	ldr	r1, [pc, #524]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800296a:	4313      	orrs	r3, r2
 800296c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0308 	and.w	r3, r3, #8
 8002978:	2b00      	cmp	r3, #0
 800297a:	d00a      	beq.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800297c:	4b7e      	ldr	r3, [pc, #504]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800297e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002982:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298a:	497b      	ldr	r1, [pc, #492]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800298c:	4313      	orrs	r3, r2
 800298e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0310 	and.w	r3, r3, #16
 800299a:	2b00      	cmp	r3, #0
 800299c:	d00a      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800299e:	4b76      	ldr	r3, [pc, #472]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029ac:	4972      	ldr	r1, [pc, #456]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0320 	and.w	r3, r3, #32
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d00a      	beq.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80029c0:	4b6d      	ldr	r3, [pc, #436]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ce:	496a      	ldr	r1, [pc, #424]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d00a      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029e2:	4b65      	ldr	r3, [pc, #404]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f0:	4961      	ldr	r1, [pc, #388]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d00a      	beq.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a04:	4b5c      	ldr	r3, [pc, #368]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a0a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a12:	4959      	ldr	r1, [pc, #356]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00a      	beq.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a26:	4b54      	ldr	r3, [pc, #336]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a2c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a34:	4950      	ldr	r1, [pc, #320]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d00a      	beq.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a48:	4b4b      	ldr	r3, [pc, #300]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a4e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a56:	4948      	ldr	r1, [pc, #288]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d00a      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a6a:	4b43      	ldr	r3, [pc, #268]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a70:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a78:	493f      	ldr	r1, [pc, #252]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d028      	beq.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a8c:	4b3a      	ldr	r3, [pc, #232]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a92:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a9a:	4937      	ldr	r1, [pc, #220]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002aa6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002aaa:	d106      	bne.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002aac:	4b32      	ldr	r3, [pc, #200]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	4a31      	ldr	r2, [pc, #196]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ab2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ab6:	60d3      	str	r3, [r2, #12]
 8002ab8:	e011      	b.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002abe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ac2:	d10c      	bne.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	3304      	adds	r3, #4
 8002ac8:	2101      	movs	r1, #1
 8002aca:	4618      	mov	r0, r3
 8002acc:	f000 f8c8 	bl	8002c60 <RCCEx_PLLSAI1_Config>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002ad4:	7cfb      	ldrb	r3, [r7, #19]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002ada:	7cfb      	ldrb	r3, [r7, #19]
 8002adc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d028      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002aea:	4b23      	ldr	r3, [pc, #140]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002af0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af8:	491f      	ldr	r1, [pc, #124]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b08:	d106      	bne.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b0a:	4b1b      	ldr	r3, [pc, #108]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	4a1a      	ldr	r2, [pc, #104]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b14:	60d3      	str	r3, [r2, #12]
 8002b16:	e011      	b.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b1c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b20:	d10c      	bne.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	3304      	adds	r3, #4
 8002b26:	2101      	movs	r1, #1
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f000 f899 	bl	8002c60 <RCCEx_PLLSAI1_Config>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b32:	7cfb      	ldrb	r3, [r7, #19]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d001      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002b38:	7cfb      	ldrb	r3, [r7, #19]
 8002b3a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d02b      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b48:	4b0b      	ldr	r3, [pc, #44]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b4e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b56:	4908      	ldr	r1, [pc, #32]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b66:	d109      	bne.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b68:	4b03      	ldr	r3, [pc, #12]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	4a02      	ldr	r2, [pc, #8]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b72:	60d3      	str	r3, [r2, #12]
 8002b74:	e014      	b.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002b76:	bf00      	nop
 8002b78:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b80:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b84:	d10c      	bne.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	3304      	adds	r3, #4
 8002b8a:	2101      	movs	r1, #1
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f000 f867 	bl	8002c60 <RCCEx_PLLSAI1_Config>
 8002b92:	4603      	mov	r3, r0
 8002b94:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b96:	7cfb      	ldrb	r3, [r7, #19]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d001      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002b9c:	7cfb      	ldrb	r3, [r7, #19]
 8002b9e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d02f      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002bac:	4b2b      	ldr	r3, [pc, #172]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bb2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bba:	4928      	ldr	r1, [pc, #160]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bc6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002bca:	d10d      	bne.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	3304      	adds	r3, #4
 8002bd0:	2102      	movs	r1, #2
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f000 f844 	bl	8002c60 <RCCEx_PLLSAI1_Config>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bdc:	7cfb      	ldrb	r3, [r7, #19]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d014      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002be2:	7cfb      	ldrb	r3, [r7, #19]
 8002be4:	74bb      	strb	r3, [r7, #18]
 8002be6:	e011      	b.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bf0:	d10c      	bne.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	3320      	adds	r3, #32
 8002bf6:	2102      	movs	r1, #2
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f000 f925 	bl	8002e48 <RCCEx_PLLSAI2_Config>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c02:	7cfb      	ldrb	r3, [r7, #19]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d001      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002c08:	7cfb      	ldrb	r3, [r7, #19]
 8002c0a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d00a      	beq.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002c18:	4b10      	ldr	r3, [pc, #64]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c1e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c26:	490d      	ldr	r1, [pc, #52]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d00b      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002c3a:	4b08      	ldr	r3, [pc, #32]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c40:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c4a:	4904      	ldr	r1, [pc, #16]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002c52:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3718      	adds	r7, #24
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	40021000 	.word	0x40021000

08002c60 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c6e:	4b75      	ldr	r3, [pc, #468]	; (8002e44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	f003 0303 	and.w	r3, r3, #3
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d018      	beq.n	8002cac <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002c7a:	4b72      	ldr	r3, [pc, #456]	; (8002e44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	f003 0203 	and.w	r2, r3, #3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d10d      	bne.n	8002ca6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
       ||
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d009      	beq.n	8002ca6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002c92:	4b6c      	ldr	r3, [pc, #432]	; (8002e44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	091b      	lsrs	r3, r3, #4
 8002c98:	f003 0307 	and.w	r3, r3, #7
 8002c9c:	1c5a      	adds	r2, r3, #1
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
       ||
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d047      	beq.n	8002d36 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	73fb      	strb	r3, [r7, #15]
 8002caa:	e044      	b.n	8002d36 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2b03      	cmp	r3, #3
 8002cb2:	d018      	beq.n	8002ce6 <RCCEx_PLLSAI1_Config+0x86>
 8002cb4:	2b03      	cmp	r3, #3
 8002cb6:	d825      	bhi.n	8002d04 <RCCEx_PLLSAI1_Config+0xa4>
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d002      	beq.n	8002cc2 <RCCEx_PLLSAI1_Config+0x62>
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d009      	beq.n	8002cd4 <RCCEx_PLLSAI1_Config+0x74>
 8002cc0:	e020      	b.n	8002d04 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002cc2:	4b60      	ldr	r3, [pc, #384]	; (8002e44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0302 	and.w	r3, r3, #2
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d11d      	bne.n	8002d0a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cd2:	e01a      	b.n	8002d0a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002cd4:	4b5b      	ldr	r3, [pc, #364]	; (8002e44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d116      	bne.n	8002d0e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ce4:	e013      	b.n	8002d0e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ce6:	4b57      	ldr	r3, [pc, #348]	; (8002e44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d10f      	bne.n	8002d12 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002cf2:	4b54      	ldr	r3, [pc, #336]	; (8002e44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d109      	bne.n	8002d12 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d02:	e006      	b.n	8002d12 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	73fb      	strb	r3, [r7, #15]
      break;
 8002d08:	e004      	b.n	8002d14 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d0a:	bf00      	nop
 8002d0c:	e002      	b.n	8002d14 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d0e:	bf00      	nop
 8002d10:	e000      	b.n	8002d14 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d12:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d14:	7bfb      	ldrb	r3, [r7, #15]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d10d      	bne.n	8002d36 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d1a:	4b4a      	ldr	r3, [pc, #296]	; (8002e44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6819      	ldr	r1, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	011b      	lsls	r3, r3, #4
 8002d2e:	430b      	orrs	r3, r1
 8002d30:	4944      	ldr	r1, [pc, #272]	; (8002e44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d36:	7bfb      	ldrb	r3, [r7, #15]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d17d      	bne.n	8002e38 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002d3c:	4b41      	ldr	r3, [pc, #260]	; (8002e44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a40      	ldr	r2, [pc, #256]	; (8002e44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d42:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d48:	f7fe fafc 	bl	8001344 <HAL_GetTick>
 8002d4c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d4e:	e009      	b.n	8002d64 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d50:	f7fe faf8 	bl	8001344 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d902      	bls.n	8002d64 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	73fb      	strb	r3, [r7, #15]
        break;
 8002d62:	e005      	b.n	8002d70 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d64:	4b37      	ldr	r3, [pc, #220]	; (8002e44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d1ef      	bne.n	8002d50 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002d70:	7bfb      	ldrb	r3, [r7, #15]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d160      	bne.n	8002e38 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d111      	bne.n	8002da0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d7c:	4b31      	ldr	r3, [pc, #196]	; (8002e44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d7e:	691b      	ldr	r3, [r3, #16]
 8002d80:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002d84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	6892      	ldr	r2, [r2, #8]
 8002d8c:	0211      	lsls	r1, r2, #8
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	68d2      	ldr	r2, [r2, #12]
 8002d92:	0912      	lsrs	r2, r2, #4
 8002d94:	0452      	lsls	r2, r2, #17
 8002d96:	430a      	orrs	r2, r1
 8002d98:	492a      	ldr	r1, [pc, #168]	; (8002e44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	610b      	str	r3, [r1, #16]
 8002d9e:	e027      	b.n	8002df0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d112      	bne.n	8002dcc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002da6:	4b27      	ldr	r3, [pc, #156]	; (8002e44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002dae:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	6892      	ldr	r2, [r2, #8]
 8002db6:	0211      	lsls	r1, r2, #8
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	6912      	ldr	r2, [r2, #16]
 8002dbc:	0852      	lsrs	r2, r2, #1
 8002dbe:	3a01      	subs	r2, #1
 8002dc0:	0552      	lsls	r2, r2, #21
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	491f      	ldr	r1, [pc, #124]	; (8002e44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	610b      	str	r3, [r1, #16]
 8002dca:	e011      	b.n	8002df0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002dcc:	4b1d      	ldr	r3, [pc, #116]	; (8002e44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dce:	691b      	ldr	r3, [r3, #16]
 8002dd0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002dd4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	6892      	ldr	r2, [r2, #8]
 8002ddc:	0211      	lsls	r1, r2, #8
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	6952      	ldr	r2, [r2, #20]
 8002de2:	0852      	lsrs	r2, r2, #1
 8002de4:	3a01      	subs	r2, #1
 8002de6:	0652      	lsls	r2, r2, #25
 8002de8:	430a      	orrs	r2, r1
 8002dea:	4916      	ldr	r1, [pc, #88]	; (8002e44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002df0:	4b14      	ldr	r3, [pc, #80]	; (8002e44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a13      	ldr	r2, [pc, #76]	; (8002e44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002df6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002dfa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dfc:	f7fe faa2 	bl	8001344 <HAL_GetTick>
 8002e00:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e02:	e009      	b.n	8002e18 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e04:	f7fe fa9e 	bl	8001344 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d902      	bls.n	8002e18 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	73fb      	strb	r3, [r7, #15]
          break;
 8002e16:	e005      	b.n	8002e24 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e18:	4b0a      	ldr	r3, [pc, #40]	; (8002e44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d0ef      	beq.n	8002e04 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002e24:	7bfb      	ldrb	r3, [r7, #15]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d106      	bne.n	8002e38 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002e2a:	4b06      	ldr	r3, [pc, #24]	; (8002e44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e2c:	691a      	ldr	r2, [r3, #16]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	4904      	ldr	r1, [pc, #16]	; (8002e44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3710      	adds	r7, #16
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	40021000 	.word	0x40021000

08002e48 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e52:	2300      	movs	r3, #0
 8002e54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e56:	4b6a      	ldr	r3, [pc, #424]	; (8003000 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	f003 0303 	and.w	r3, r3, #3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d018      	beq.n	8002e94 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002e62:	4b67      	ldr	r3, [pc, #412]	; (8003000 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	f003 0203 	and.w	r2, r3, #3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d10d      	bne.n	8002e8e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
       ||
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d009      	beq.n	8002e8e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002e7a:	4b61      	ldr	r3, [pc, #388]	; (8003000 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	091b      	lsrs	r3, r3, #4
 8002e80:	f003 0307 	and.w	r3, r3, #7
 8002e84:	1c5a      	adds	r2, r3, #1
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
       ||
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d047      	beq.n	8002f1e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	73fb      	strb	r3, [r7, #15]
 8002e92:	e044      	b.n	8002f1e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2b03      	cmp	r3, #3
 8002e9a:	d018      	beq.n	8002ece <RCCEx_PLLSAI2_Config+0x86>
 8002e9c:	2b03      	cmp	r3, #3
 8002e9e:	d825      	bhi.n	8002eec <RCCEx_PLLSAI2_Config+0xa4>
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d002      	beq.n	8002eaa <RCCEx_PLLSAI2_Config+0x62>
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d009      	beq.n	8002ebc <RCCEx_PLLSAI2_Config+0x74>
 8002ea8:	e020      	b.n	8002eec <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002eaa:	4b55      	ldr	r3, [pc, #340]	; (8003000 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d11d      	bne.n	8002ef2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002eba:	e01a      	b.n	8002ef2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ebc:	4b50      	ldr	r3, [pc, #320]	; (8003000 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d116      	bne.n	8002ef6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ecc:	e013      	b.n	8002ef6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ece:	4b4c      	ldr	r3, [pc, #304]	; (8003000 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d10f      	bne.n	8002efa <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002eda:	4b49      	ldr	r3, [pc, #292]	; (8003000 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d109      	bne.n	8002efa <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002eea:	e006      	b.n	8002efa <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	73fb      	strb	r3, [r7, #15]
      break;
 8002ef0:	e004      	b.n	8002efc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ef2:	bf00      	nop
 8002ef4:	e002      	b.n	8002efc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ef6:	bf00      	nop
 8002ef8:	e000      	b.n	8002efc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002efa:	bf00      	nop
    }

    if(status == HAL_OK)
 8002efc:	7bfb      	ldrb	r3, [r7, #15]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10d      	bne.n	8002f1e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f02:	4b3f      	ldr	r3, [pc, #252]	; (8003000 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6819      	ldr	r1, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	3b01      	subs	r3, #1
 8002f14:	011b      	lsls	r3, r3, #4
 8002f16:	430b      	orrs	r3, r1
 8002f18:	4939      	ldr	r1, [pc, #228]	; (8003000 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f1e:	7bfb      	ldrb	r3, [r7, #15]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d167      	bne.n	8002ff4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002f24:	4b36      	ldr	r3, [pc, #216]	; (8003000 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a35      	ldr	r2, [pc, #212]	; (8003000 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f30:	f7fe fa08 	bl	8001344 <HAL_GetTick>
 8002f34:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f36:	e009      	b.n	8002f4c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f38:	f7fe fa04 	bl	8001344 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d902      	bls.n	8002f4c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	73fb      	strb	r3, [r7, #15]
        break;
 8002f4a:	e005      	b.n	8002f58 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f4c:	4b2c      	ldr	r3, [pc, #176]	; (8003000 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1ef      	bne.n	8002f38 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002f58:	7bfb      	ldrb	r3, [r7, #15]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d14a      	bne.n	8002ff4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d111      	bne.n	8002f88 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f64:	4b26      	ldr	r3, [pc, #152]	; (8003000 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f66:	695b      	ldr	r3, [r3, #20]
 8002f68:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002f6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	6892      	ldr	r2, [r2, #8]
 8002f74:	0211      	lsls	r1, r2, #8
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	68d2      	ldr	r2, [r2, #12]
 8002f7a:	0912      	lsrs	r2, r2, #4
 8002f7c:	0452      	lsls	r2, r2, #17
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	491f      	ldr	r1, [pc, #124]	; (8003000 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	614b      	str	r3, [r1, #20]
 8002f86:	e011      	b.n	8002fac <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f88:	4b1d      	ldr	r3, [pc, #116]	; (8003000 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f8a:	695b      	ldr	r3, [r3, #20]
 8002f8c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002f90:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	6892      	ldr	r2, [r2, #8]
 8002f98:	0211      	lsls	r1, r2, #8
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	6912      	ldr	r2, [r2, #16]
 8002f9e:	0852      	lsrs	r2, r2, #1
 8002fa0:	3a01      	subs	r2, #1
 8002fa2:	0652      	lsls	r2, r2, #25
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	4916      	ldr	r1, [pc, #88]	; (8003000 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002fac:	4b14      	ldr	r3, [pc, #80]	; (8003000 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a13      	ldr	r2, [pc, #76]	; (8003000 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fb6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fb8:	f7fe f9c4 	bl	8001344 <HAL_GetTick>
 8002fbc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002fbe:	e009      	b.n	8002fd4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002fc0:	f7fe f9c0 	bl	8001344 <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d902      	bls.n	8002fd4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	73fb      	strb	r3, [r7, #15]
          break;
 8002fd2:	e005      	b.n	8002fe0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002fd4:	4b0a      	ldr	r3, [pc, #40]	; (8003000 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d0ef      	beq.n	8002fc0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002fe0:	7bfb      	ldrb	r3, [r7, #15]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d106      	bne.n	8002ff4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002fe6:	4b06      	ldr	r3, [pc, #24]	; (8003000 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fe8:	695a      	ldr	r2, [r3, #20]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	4904      	ldr	r1, [pc, #16]	; (8003000 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3710      	adds	r7, #16
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	40021000 	.word	0x40021000

08003004 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d101      	bne.n	8003016 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e095      	b.n	8003142 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301a:	2b00      	cmp	r3, #0
 800301c:	d108      	bne.n	8003030 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003026:	d009      	beq.n	800303c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	61da      	str	r2, [r3, #28]
 800302e:	e005      	b.n	800303c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b00      	cmp	r3, #0
 800304c:	d106      	bne.n	800305c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f7fd ff6e 	bl	8000f38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2202      	movs	r2, #2
 8003060:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003072:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800307c:	d902      	bls.n	8003084 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800307e:	2300      	movs	r3, #0
 8003080:	60fb      	str	r3, [r7, #12]
 8003082:	e002      	b.n	800308a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003084:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003088:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003092:	d007      	beq.n	80030a4 <HAL_SPI_Init+0xa0>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800309c:	d002      	beq.n	80030a4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80030b4:	431a      	orrs	r2, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	431a      	orrs	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	695b      	ldr	r3, [r3, #20]
 80030c4:	f003 0301 	and.w	r3, r3, #1
 80030c8:	431a      	orrs	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	699b      	ldr	r3, [r3, #24]
 80030ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030d2:	431a      	orrs	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	69db      	ldr	r3, [r3, #28]
 80030d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80030dc:	431a      	orrs	r2, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a1b      	ldr	r3, [r3, #32]
 80030e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030e6:	ea42 0103 	orr.w	r1, r2, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ee:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	430a      	orrs	r2, r1
 80030f8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	699b      	ldr	r3, [r3, #24]
 80030fe:	0c1b      	lsrs	r3, r3, #16
 8003100:	f003 0204 	and.w	r2, r3, #4
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003108:	f003 0310 	and.w	r3, r3, #16
 800310c:	431a      	orrs	r2, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003112:	f003 0308 	and.w	r3, r3, #8
 8003116:	431a      	orrs	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003120:	ea42 0103 	orr.w	r1, r2, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	430a      	orrs	r2, r1
 8003130:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3710      	adds	r7, #16
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800314a:	b580      	push	{r7, lr}
 800314c:	b08a      	sub	sp, #40	; 0x28
 800314e:	af00      	add	r7, sp, #0
 8003150:	60f8      	str	r0, [r7, #12]
 8003152:	60b9      	str	r1, [r7, #8]
 8003154:	607a      	str	r2, [r7, #4]
 8003156:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003158:	2301      	movs	r3, #1
 800315a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800315c:	2300      	movs	r3, #0
 800315e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003168:	2b01      	cmp	r3, #1
 800316a:	d101      	bne.n	8003170 <HAL_SPI_TransmitReceive+0x26>
 800316c:	2302      	movs	r3, #2
 800316e:	e20a      	b.n	8003586 <HAL_SPI_TransmitReceive+0x43c>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003178:	f7fe f8e4 	bl	8001344 <HAL_GetTick>
 800317c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003184:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800318c:	887b      	ldrh	r3, [r7, #2]
 800318e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003190:	887b      	ldrh	r3, [r7, #2]
 8003192:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003194:	7efb      	ldrb	r3, [r7, #27]
 8003196:	2b01      	cmp	r3, #1
 8003198:	d00e      	beq.n	80031b8 <HAL_SPI_TransmitReceive+0x6e>
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031a0:	d106      	bne.n	80031b0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d102      	bne.n	80031b0 <HAL_SPI_TransmitReceive+0x66>
 80031aa:	7efb      	ldrb	r3, [r7, #27]
 80031ac:	2b04      	cmp	r3, #4
 80031ae:	d003      	beq.n	80031b8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80031b0:	2302      	movs	r3, #2
 80031b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80031b6:	e1e0      	b.n	800357a <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d005      	beq.n	80031ca <HAL_SPI_TransmitReceive+0x80>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d002      	beq.n	80031ca <HAL_SPI_TransmitReceive+0x80>
 80031c4:	887b      	ldrh	r3, [r7, #2]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d103      	bne.n	80031d2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80031d0:	e1d3      	b.n	800357a <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	2b04      	cmp	r3, #4
 80031dc:	d003      	beq.n	80031e6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2205      	movs	r2, #5
 80031e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2200      	movs	r2, #0
 80031ea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	887a      	ldrh	r2, [r7, #2]
 80031f6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	887a      	ldrh	r2, [r7, #2]
 80031fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	68ba      	ldr	r2, [r7, #8]
 8003206:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	887a      	ldrh	r2, [r7, #2]
 800320c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	887a      	ldrh	r2, [r7, #2]
 8003212:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2200      	movs	r2, #0
 8003218:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2200      	movs	r2, #0
 800321e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003228:	d802      	bhi.n	8003230 <HAL_SPI_TransmitReceive+0xe6>
 800322a:	8a3b      	ldrh	r3, [r7, #16]
 800322c:	2b01      	cmp	r3, #1
 800322e:	d908      	bls.n	8003242 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	685a      	ldr	r2, [r3, #4]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800323e:	605a      	str	r2, [r3, #4]
 8003240:	e007      	b.n	8003252 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	685a      	ldr	r2, [r3, #4]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003250:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800325c:	2b40      	cmp	r3, #64	; 0x40
 800325e:	d007      	beq.n	8003270 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800326e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003278:	f240 8081 	bls.w	800337e <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d002      	beq.n	800328a <HAL_SPI_TransmitReceive+0x140>
 8003284:	8a7b      	ldrh	r3, [r7, #18]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d16d      	bne.n	8003366 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800328e:	881a      	ldrh	r2, [r3, #0]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800329a:	1c9a      	adds	r2, r3, #2
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	3b01      	subs	r3, #1
 80032a8:	b29a      	uxth	r2, r3
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032ae:	e05a      	b.n	8003366 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d11b      	bne.n	80032f6 <HAL_SPI_TransmitReceive+0x1ac>
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d016      	beq.n	80032f6 <HAL_SPI_TransmitReceive+0x1ac>
 80032c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d113      	bne.n	80032f6 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d2:	881a      	ldrh	r2, [r3, #0]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032de:	1c9a      	adds	r2, r3, #2
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	3b01      	subs	r3, #1
 80032ec:	b29a      	uxth	r2, r3
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80032f2:	2300      	movs	r3, #0
 80032f4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f003 0301 	and.w	r3, r3, #1
 8003300:	2b01      	cmp	r3, #1
 8003302:	d11c      	bne.n	800333e <HAL_SPI_TransmitReceive+0x1f4>
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800330a:	b29b      	uxth	r3, r3
 800330c:	2b00      	cmp	r3, #0
 800330e:	d016      	beq.n	800333e <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68da      	ldr	r2, [r3, #12]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331a:	b292      	uxth	r2, r2
 800331c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003322:	1c9a      	adds	r2, r3, #2
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800332e:	b29b      	uxth	r3, r3
 8003330:	3b01      	subs	r3, #1
 8003332:	b29a      	uxth	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800333a:	2301      	movs	r3, #1
 800333c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800333e:	f7fe f801 	bl	8001344 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800334a:	429a      	cmp	r2, r3
 800334c:	d80b      	bhi.n	8003366 <HAL_SPI_TransmitReceive+0x21c>
 800334e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003350:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003354:	d007      	beq.n	8003366 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8003364:	e109      	b.n	800357a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800336a:	b29b      	uxth	r3, r3
 800336c:	2b00      	cmp	r3, #0
 800336e:	d19f      	bne.n	80032b0 <HAL_SPI_TransmitReceive+0x166>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003376:	b29b      	uxth	r3, r3
 8003378:	2b00      	cmp	r3, #0
 800337a:	d199      	bne.n	80032b0 <HAL_SPI_TransmitReceive+0x166>
 800337c:	e0e3      	b.n	8003546 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d003      	beq.n	800338e <HAL_SPI_TransmitReceive+0x244>
 8003386:	8a7b      	ldrh	r3, [r7, #18]
 8003388:	2b01      	cmp	r3, #1
 800338a:	f040 80cf 	bne.w	800352c <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003392:	b29b      	uxth	r3, r3
 8003394:	2b01      	cmp	r3, #1
 8003396:	d912      	bls.n	80033be <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800339c:	881a      	ldrh	r2, [r3, #0]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a8:	1c9a      	adds	r2, r3, #2
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	3b02      	subs	r3, #2
 80033b6:	b29a      	uxth	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 80033bc:	e0b6      	b.n	800352c <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	330c      	adds	r3, #12
 80033c8:	7812      	ldrb	r2, [r2, #0]
 80033ca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d0:	1c5a      	adds	r2, r3, #1
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033da:	b29b      	uxth	r3, r3
 80033dc:	3b01      	subs	r3, #1
 80033de:	b29a      	uxth	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033e4:	e0a2      	b.n	800352c <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d134      	bne.n	800345e <HAL_SPI_TransmitReceive+0x314>
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d02f      	beq.n	800345e <HAL_SPI_TransmitReceive+0x314>
 80033fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003400:	2b01      	cmp	r3, #1
 8003402:	d12c      	bne.n	800345e <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003408:	b29b      	uxth	r3, r3
 800340a:	2b01      	cmp	r3, #1
 800340c:	d912      	bls.n	8003434 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003412:	881a      	ldrh	r2, [r3, #0]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800341e:	1c9a      	adds	r2, r3, #2
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003428:	b29b      	uxth	r3, r3
 800342a:	3b02      	subs	r3, #2
 800342c:	b29a      	uxth	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003432:	e012      	b.n	800345a <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	330c      	adds	r3, #12
 800343e:	7812      	ldrb	r2, [r2, #0]
 8003440:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003446:	1c5a      	adds	r2, r3, #1
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003450:	b29b      	uxth	r3, r3
 8003452:	3b01      	subs	r3, #1
 8003454:	b29a      	uxth	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800345a:	2300      	movs	r3, #0
 800345c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	f003 0301 	and.w	r3, r3, #1
 8003468:	2b01      	cmp	r3, #1
 800346a:	d148      	bne.n	80034fe <HAL_SPI_TransmitReceive+0x3b4>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003472:	b29b      	uxth	r3, r3
 8003474:	2b00      	cmp	r3, #0
 8003476:	d042      	beq.n	80034fe <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800347e:	b29b      	uxth	r3, r3
 8003480:	2b01      	cmp	r3, #1
 8003482:	d923      	bls.n	80034cc <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68da      	ldr	r2, [r3, #12]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348e:	b292      	uxth	r2, r2
 8003490:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003496:	1c9a      	adds	r2, r3, #2
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	3b02      	subs	r3, #2
 80034a6:	b29a      	uxth	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d81f      	bhi.n	80034fa <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	685a      	ldr	r2, [r3, #4]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80034c8:	605a      	str	r2, [r3, #4]
 80034ca:	e016      	b.n	80034fa <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f103 020c 	add.w	r2, r3, #12
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d8:	7812      	ldrb	r2, [r2, #0]
 80034da:	b2d2      	uxtb	r2, r2
 80034dc:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e2:	1c5a      	adds	r2, r3, #1
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	3b01      	subs	r3, #1
 80034f2:	b29a      	uxth	r2, r3
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80034fa:	2301      	movs	r3, #1
 80034fc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80034fe:	f7fd ff21 	bl	8001344 <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800350a:	429a      	cmp	r2, r3
 800350c:	d803      	bhi.n	8003516 <HAL_SPI_TransmitReceive+0x3cc>
 800350e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003510:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003514:	d102      	bne.n	800351c <HAL_SPI_TransmitReceive+0x3d2>
 8003516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003518:	2b00      	cmp	r3, #0
 800351a:	d107      	bne.n	800352c <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2201      	movs	r2, #1
 8003526:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800352a:	e026      	b.n	800357a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003530:	b29b      	uxth	r3, r3
 8003532:	2b00      	cmp	r3, #0
 8003534:	f47f af57 	bne.w	80033e6 <HAL_SPI_TransmitReceive+0x29c>
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800353e:	b29b      	uxth	r3, r3
 8003540:	2b00      	cmp	r3, #0
 8003542:	f47f af50 	bne.w	80033e6 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003546:	69fa      	ldr	r2, [r7, #28]
 8003548:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f000 f93e 	bl	80037cc <SPI_EndRxTxTransaction>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d005      	beq.n	8003562 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2220      	movs	r2, #32
 8003560:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003566:	2b00      	cmp	r3, #0
 8003568:	d003      	beq.n	8003572 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003570:	e003      	b.n	800357a <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2201      	movs	r2, #1
 8003576:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003582:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003586:	4618      	mov	r0, r3
 8003588:	3728      	adds	r7, #40	; 0x28
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
	...

08003590 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b088      	sub	sp, #32
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	603b      	str	r3, [r7, #0]
 800359c:	4613      	mov	r3, r2
 800359e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80035a0:	f7fd fed0 	bl	8001344 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a8:	1a9b      	subs	r3, r3, r2
 80035aa:	683a      	ldr	r2, [r7, #0]
 80035ac:	4413      	add	r3, r2
 80035ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80035b0:	f7fd fec8 	bl	8001344 <HAL_GetTick>
 80035b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80035b6:	4b39      	ldr	r3, [pc, #228]	; (800369c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	015b      	lsls	r3, r3, #5
 80035bc:	0d1b      	lsrs	r3, r3, #20
 80035be:	69fa      	ldr	r2, [r7, #28]
 80035c0:	fb02 f303 	mul.w	r3, r2, r3
 80035c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80035c6:	e054      	b.n	8003672 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035ce:	d050      	beq.n	8003672 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80035d0:	f7fd feb8 	bl	8001344 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	69fa      	ldr	r2, [r7, #28]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d902      	bls.n	80035e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d13d      	bne.n	8003662 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	685a      	ldr	r2, [r3, #4]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80035f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035fe:	d111      	bne.n	8003624 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003608:	d004      	beq.n	8003614 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003612:	d107      	bne.n	8003624 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003622:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003628:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800362c:	d10f      	bne.n	800364e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800363c:	601a      	str	r2, [r3, #0]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800364c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2201      	movs	r2, #1
 8003652:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e017      	b.n	8003692 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d101      	bne.n	800366c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003668:	2300      	movs	r3, #0
 800366a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	3b01      	subs	r3, #1
 8003670:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	689a      	ldr	r2, [r3, #8]
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	4013      	ands	r3, r2
 800367c:	68ba      	ldr	r2, [r7, #8]
 800367e:	429a      	cmp	r2, r3
 8003680:	bf0c      	ite	eq
 8003682:	2301      	moveq	r3, #1
 8003684:	2300      	movne	r3, #0
 8003686:	b2db      	uxtb	r3, r3
 8003688:	461a      	mov	r2, r3
 800368a:	79fb      	ldrb	r3, [r7, #7]
 800368c:	429a      	cmp	r2, r3
 800368e:	d19b      	bne.n	80035c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	3720      	adds	r7, #32
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	20000000 	.word	0x20000000

080036a0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b08a      	sub	sp, #40	; 0x28
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	607a      	str	r2, [r7, #4]
 80036ac:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80036ae:	2300      	movs	r3, #0
 80036b0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80036b2:	f7fd fe47 	bl	8001344 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ba:	1a9b      	subs	r3, r3, r2
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	4413      	add	r3, r2
 80036c0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80036c2:	f7fd fe3f 	bl	8001344 <HAL_GetTick>
 80036c6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	330c      	adds	r3, #12
 80036ce:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80036d0:	4b3d      	ldr	r3, [pc, #244]	; (80037c8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	4613      	mov	r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	4413      	add	r3, r2
 80036da:	00da      	lsls	r2, r3, #3
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	0d1b      	lsrs	r3, r3, #20
 80036e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036e2:	fb02 f303 	mul.w	r3, r2, r3
 80036e6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80036e8:	e060      	b.n	80037ac <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80036f0:	d107      	bne.n	8003702 <SPI_WaitFifoStateUntilTimeout+0x62>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d104      	bne.n	8003702 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003700:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003708:	d050      	beq.n	80037ac <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800370a:	f7fd fe1b 	bl	8001344 <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	6a3b      	ldr	r3, [r7, #32]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003716:	429a      	cmp	r2, r3
 8003718:	d902      	bls.n	8003720 <SPI_WaitFifoStateUntilTimeout+0x80>
 800371a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371c:	2b00      	cmp	r3, #0
 800371e:	d13d      	bne.n	800379c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	685a      	ldr	r2, [r3, #4]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800372e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003738:	d111      	bne.n	800375e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003742:	d004      	beq.n	800374e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800374c:	d107      	bne.n	800375e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800375c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003762:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003766:	d10f      	bne.n	8003788 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003776:	601a      	str	r2, [r3, #0]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003786:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e010      	b.n	80037be <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d101      	bne.n	80037a6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80037a2:	2300      	movs	r3, #0
 80037a4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	3b01      	subs	r3, #1
 80037aa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	689a      	ldr	r2, [r3, #8]
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	4013      	ands	r3, r2
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d196      	bne.n	80036ea <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3728      	adds	r7, #40	; 0x28
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	20000000 	.word	0x20000000

080037cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b086      	sub	sp, #24
 80037d0:	af02      	add	r7, sp, #8
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	9300      	str	r3, [sp, #0]
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	2200      	movs	r2, #0
 80037e0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80037e4:	68f8      	ldr	r0, [r7, #12]
 80037e6:	f7ff ff5b 	bl	80036a0 <SPI_WaitFifoStateUntilTimeout>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d007      	beq.n	8003800 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037f4:	f043 0220 	orr.w	r2, r3, #32
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e027      	b.n	8003850 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	9300      	str	r3, [sp, #0]
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	2200      	movs	r2, #0
 8003808:	2180      	movs	r1, #128	; 0x80
 800380a:	68f8      	ldr	r0, [r7, #12]
 800380c:	f7ff fec0 	bl	8003590 <SPI_WaitFlagStateUntilTimeout>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d007      	beq.n	8003826 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800381a:	f043 0220 	orr.w	r2, r3, #32
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e014      	b.n	8003850 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	9300      	str	r3, [sp, #0]
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	2200      	movs	r2, #0
 800382e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003832:	68f8      	ldr	r0, [r7, #12]
 8003834:	f7ff ff34 	bl	80036a0 <SPI_WaitFifoStateUntilTimeout>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d007      	beq.n	800384e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003842:	f043 0220 	orr.w	r2, r3, #32
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e000      	b.n	8003850 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	3710      	adds	r7, #16
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d101      	bne.n	800386a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e040      	b.n	80038ec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800386e:	2b00      	cmp	r3, #0
 8003870:	d106      	bne.n	8003880 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f7fd fba0 	bl	8000fc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2224      	movs	r2, #36	; 0x24
 8003884:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f022 0201 	bic.w	r2, r2, #1
 8003894:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389a:	2b00      	cmp	r3, #0
 800389c:	d002      	beq.n	80038a4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 fb6a 	bl	8003f78 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f000 f8af 	bl	8003a08 <UART_SetConfig>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d101      	bne.n	80038b4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e01b      	b.n	80038ec <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	685a      	ldr	r2, [r3, #4]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	689a      	ldr	r2, [r3, #8]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f042 0201 	orr.w	r2, r2, #1
 80038e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f000 fbe9 	bl	80040bc <UART_CheckIdleState>
 80038ea:	4603      	mov	r3, r0
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3708      	adds	r7, #8
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b08a      	sub	sp, #40	; 0x28
 80038f8:	af02      	add	r7, sp, #8
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	60b9      	str	r1, [r7, #8]
 80038fe:	603b      	str	r3, [r7, #0]
 8003900:	4613      	mov	r3, r2
 8003902:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003908:	2b20      	cmp	r3, #32
 800390a:	d178      	bne.n	80039fe <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d002      	beq.n	8003918 <HAL_UART_Transmit+0x24>
 8003912:	88fb      	ldrh	r3, [r7, #6]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d101      	bne.n	800391c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e071      	b.n	8003a00 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2200      	movs	r2, #0
 8003920:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2221      	movs	r2, #33	; 0x21
 8003928:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800392a:	f7fd fd0b 	bl	8001344 <HAL_GetTick>
 800392e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	88fa      	ldrh	r2, [r7, #6]
 8003934:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	88fa      	ldrh	r2, [r7, #6]
 800393c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003948:	d108      	bne.n	800395c <HAL_UART_Transmit+0x68>
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d104      	bne.n	800395c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003952:	2300      	movs	r3, #0
 8003954:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	61bb      	str	r3, [r7, #24]
 800395a:	e003      	b.n	8003964 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003960:	2300      	movs	r3, #0
 8003962:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003964:	e030      	b.n	80039c8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	9300      	str	r3, [sp, #0]
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	2200      	movs	r2, #0
 800396e:	2180      	movs	r1, #128	; 0x80
 8003970:	68f8      	ldr	r0, [r7, #12]
 8003972:	f000 fc4b 	bl	800420c <UART_WaitOnFlagUntilTimeout>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d004      	beq.n	8003986 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2220      	movs	r2, #32
 8003980:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e03c      	b.n	8003a00 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d10b      	bne.n	80039a4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	881a      	ldrh	r2, [r3, #0]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003998:	b292      	uxth	r2, r2
 800399a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	3302      	adds	r3, #2
 80039a0:	61bb      	str	r3, [r7, #24]
 80039a2:	e008      	b.n	80039b6 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	781a      	ldrb	r2, [r3, #0]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	b292      	uxth	r2, r2
 80039ae:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	3301      	adds	r3, #1
 80039b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80039bc:	b29b      	uxth	r3, r3
 80039be:	3b01      	subs	r3, #1
 80039c0:	b29a      	uxth	r2, r3
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d1c8      	bne.n	8003966 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	9300      	str	r3, [sp, #0]
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	2200      	movs	r2, #0
 80039dc:	2140      	movs	r1, #64	; 0x40
 80039de:	68f8      	ldr	r0, [r7, #12]
 80039e0:	f000 fc14 	bl	800420c <UART_WaitOnFlagUntilTimeout>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d004      	beq.n	80039f4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2220      	movs	r2, #32
 80039ee:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e005      	b.n	8003a00 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2220      	movs	r2, #32
 80039f8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80039fa:	2300      	movs	r3, #0
 80039fc:	e000      	b.n	8003a00 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80039fe:	2302      	movs	r3, #2
  }
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3720      	adds	r7, #32
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a0c:	b08a      	sub	sp, #40	; 0x28
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a12:	2300      	movs	r3, #0
 8003a14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	689a      	ldr	r2, [r3, #8]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	431a      	orrs	r2, r3
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	695b      	ldr	r3, [r3, #20]
 8003a26:	431a      	orrs	r2, r3
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	69db      	ldr	r3, [r3, #28]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	4ba4      	ldr	r3, [pc, #656]	; (8003cc8 <UART_SetConfig+0x2c0>)
 8003a38:	4013      	ands	r3, r2
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	6812      	ldr	r2, [r2, #0]
 8003a3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a40:	430b      	orrs	r3, r1
 8003a42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	68da      	ldr	r2, [r3, #12]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	430a      	orrs	r2, r1
 8003a58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a99      	ldr	r2, [pc, #612]	; (8003ccc <UART_SetConfig+0x2c4>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d004      	beq.n	8003a74 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
 8003a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a70:	4313      	orrs	r3, r2
 8003a72:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a84:	430a      	orrs	r2, r1
 8003a86:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a90      	ldr	r2, [pc, #576]	; (8003cd0 <UART_SetConfig+0x2c8>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d126      	bne.n	8003ae0 <UART_SetConfig+0xd8>
 8003a92:	4b90      	ldr	r3, [pc, #576]	; (8003cd4 <UART_SetConfig+0x2cc>)
 8003a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a98:	f003 0303 	and.w	r3, r3, #3
 8003a9c:	2b03      	cmp	r3, #3
 8003a9e:	d81b      	bhi.n	8003ad8 <UART_SetConfig+0xd0>
 8003aa0:	a201      	add	r2, pc, #4	; (adr r2, 8003aa8 <UART_SetConfig+0xa0>)
 8003aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aa6:	bf00      	nop
 8003aa8:	08003ab9 	.word	0x08003ab9
 8003aac:	08003ac9 	.word	0x08003ac9
 8003ab0:	08003ac1 	.word	0x08003ac1
 8003ab4:	08003ad1 	.word	0x08003ad1
 8003ab8:	2301      	movs	r3, #1
 8003aba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003abe:	e116      	b.n	8003cee <UART_SetConfig+0x2e6>
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ac6:	e112      	b.n	8003cee <UART_SetConfig+0x2e6>
 8003ac8:	2304      	movs	r3, #4
 8003aca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ace:	e10e      	b.n	8003cee <UART_SetConfig+0x2e6>
 8003ad0:	2308      	movs	r3, #8
 8003ad2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ad6:	e10a      	b.n	8003cee <UART_SetConfig+0x2e6>
 8003ad8:	2310      	movs	r3, #16
 8003ada:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ade:	e106      	b.n	8003cee <UART_SetConfig+0x2e6>
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a7c      	ldr	r2, [pc, #496]	; (8003cd8 <UART_SetConfig+0x2d0>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d138      	bne.n	8003b5c <UART_SetConfig+0x154>
 8003aea:	4b7a      	ldr	r3, [pc, #488]	; (8003cd4 <UART_SetConfig+0x2cc>)
 8003aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af0:	f003 030c 	and.w	r3, r3, #12
 8003af4:	2b0c      	cmp	r3, #12
 8003af6:	d82d      	bhi.n	8003b54 <UART_SetConfig+0x14c>
 8003af8:	a201      	add	r2, pc, #4	; (adr r2, 8003b00 <UART_SetConfig+0xf8>)
 8003afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003afe:	bf00      	nop
 8003b00:	08003b35 	.word	0x08003b35
 8003b04:	08003b55 	.word	0x08003b55
 8003b08:	08003b55 	.word	0x08003b55
 8003b0c:	08003b55 	.word	0x08003b55
 8003b10:	08003b45 	.word	0x08003b45
 8003b14:	08003b55 	.word	0x08003b55
 8003b18:	08003b55 	.word	0x08003b55
 8003b1c:	08003b55 	.word	0x08003b55
 8003b20:	08003b3d 	.word	0x08003b3d
 8003b24:	08003b55 	.word	0x08003b55
 8003b28:	08003b55 	.word	0x08003b55
 8003b2c:	08003b55 	.word	0x08003b55
 8003b30:	08003b4d 	.word	0x08003b4d
 8003b34:	2300      	movs	r3, #0
 8003b36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b3a:	e0d8      	b.n	8003cee <UART_SetConfig+0x2e6>
 8003b3c:	2302      	movs	r3, #2
 8003b3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b42:	e0d4      	b.n	8003cee <UART_SetConfig+0x2e6>
 8003b44:	2304      	movs	r3, #4
 8003b46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b4a:	e0d0      	b.n	8003cee <UART_SetConfig+0x2e6>
 8003b4c:	2308      	movs	r3, #8
 8003b4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b52:	e0cc      	b.n	8003cee <UART_SetConfig+0x2e6>
 8003b54:	2310      	movs	r3, #16
 8003b56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b5a:	e0c8      	b.n	8003cee <UART_SetConfig+0x2e6>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a5e      	ldr	r2, [pc, #376]	; (8003cdc <UART_SetConfig+0x2d4>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d125      	bne.n	8003bb2 <UART_SetConfig+0x1aa>
 8003b66:	4b5b      	ldr	r3, [pc, #364]	; (8003cd4 <UART_SetConfig+0x2cc>)
 8003b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b6c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003b70:	2b30      	cmp	r3, #48	; 0x30
 8003b72:	d016      	beq.n	8003ba2 <UART_SetConfig+0x19a>
 8003b74:	2b30      	cmp	r3, #48	; 0x30
 8003b76:	d818      	bhi.n	8003baa <UART_SetConfig+0x1a2>
 8003b78:	2b20      	cmp	r3, #32
 8003b7a:	d00a      	beq.n	8003b92 <UART_SetConfig+0x18a>
 8003b7c:	2b20      	cmp	r3, #32
 8003b7e:	d814      	bhi.n	8003baa <UART_SetConfig+0x1a2>
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d002      	beq.n	8003b8a <UART_SetConfig+0x182>
 8003b84:	2b10      	cmp	r3, #16
 8003b86:	d008      	beq.n	8003b9a <UART_SetConfig+0x192>
 8003b88:	e00f      	b.n	8003baa <UART_SetConfig+0x1a2>
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b90:	e0ad      	b.n	8003cee <UART_SetConfig+0x2e6>
 8003b92:	2302      	movs	r3, #2
 8003b94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b98:	e0a9      	b.n	8003cee <UART_SetConfig+0x2e6>
 8003b9a:	2304      	movs	r3, #4
 8003b9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ba0:	e0a5      	b.n	8003cee <UART_SetConfig+0x2e6>
 8003ba2:	2308      	movs	r3, #8
 8003ba4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ba8:	e0a1      	b.n	8003cee <UART_SetConfig+0x2e6>
 8003baa:	2310      	movs	r3, #16
 8003bac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bb0:	e09d      	b.n	8003cee <UART_SetConfig+0x2e6>
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a4a      	ldr	r2, [pc, #296]	; (8003ce0 <UART_SetConfig+0x2d8>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d125      	bne.n	8003c08 <UART_SetConfig+0x200>
 8003bbc:	4b45      	ldr	r3, [pc, #276]	; (8003cd4 <UART_SetConfig+0x2cc>)
 8003bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bc2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003bc6:	2bc0      	cmp	r3, #192	; 0xc0
 8003bc8:	d016      	beq.n	8003bf8 <UART_SetConfig+0x1f0>
 8003bca:	2bc0      	cmp	r3, #192	; 0xc0
 8003bcc:	d818      	bhi.n	8003c00 <UART_SetConfig+0x1f8>
 8003bce:	2b80      	cmp	r3, #128	; 0x80
 8003bd0:	d00a      	beq.n	8003be8 <UART_SetConfig+0x1e0>
 8003bd2:	2b80      	cmp	r3, #128	; 0x80
 8003bd4:	d814      	bhi.n	8003c00 <UART_SetConfig+0x1f8>
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d002      	beq.n	8003be0 <UART_SetConfig+0x1d8>
 8003bda:	2b40      	cmp	r3, #64	; 0x40
 8003bdc:	d008      	beq.n	8003bf0 <UART_SetConfig+0x1e8>
 8003bde:	e00f      	b.n	8003c00 <UART_SetConfig+0x1f8>
 8003be0:	2300      	movs	r3, #0
 8003be2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003be6:	e082      	b.n	8003cee <UART_SetConfig+0x2e6>
 8003be8:	2302      	movs	r3, #2
 8003bea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bee:	e07e      	b.n	8003cee <UART_SetConfig+0x2e6>
 8003bf0:	2304      	movs	r3, #4
 8003bf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bf6:	e07a      	b.n	8003cee <UART_SetConfig+0x2e6>
 8003bf8:	2308      	movs	r3, #8
 8003bfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bfe:	e076      	b.n	8003cee <UART_SetConfig+0x2e6>
 8003c00:	2310      	movs	r3, #16
 8003c02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c06:	e072      	b.n	8003cee <UART_SetConfig+0x2e6>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a35      	ldr	r2, [pc, #212]	; (8003ce4 <UART_SetConfig+0x2dc>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d12a      	bne.n	8003c68 <UART_SetConfig+0x260>
 8003c12:	4b30      	ldr	r3, [pc, #192]	; (8003cd4 <UART_SetConfig+0x2cc>)
 8003c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c20:	d01a      	beq.n	8003c58 <UART_SetConfig+0x250>
 8003c22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c26:	d81b      	bhi.n	8003c60 <UART_SetConfig+0x258>
 8003c28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c2c:	d00c      	beq.n	8003c48 <UART_SetConfig+0x240>
 8003c2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c32:	d815      	bhi.n	8003c60 <UART_SetConfig+0x258>
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d003      	beq.n	8003c40 <UART_SetConfig+0x238>
 8003c38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c3c:	d008      	beq.n	8003c50 <UART_SetConfig+0x248>
 8003c3e:	e00f      	b.n	8003c60 <UART_SetConfig+0x258>
 8003c40:	2300      	movs	r3, #0
 8003c42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c46:	e052      	b.n	8003cee <UART_SetConfig+0x2e6>
 8003c48:	2302      	movs	r3, #2
 8003c4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c4e:	e04e      	b.n	8003cee <UART_SetConfig+0x2e6>
 8003c50:	2304      	movs	r3, #4
 8003c52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c56:	e04a      	b.n	8003cee <UART_SetConfig+0x2e6>
 8003c58:	2308      	movs	r3, #8
 8003c5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c5e:	e046      	b.n	8003cee <UART_SetConfig+0x2e6>
 8003c60:	2310      	movs	r3, #16
 8003c62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c66:	e042      	b.n	8003cee <UART_SetConfig+0x2e6>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a17      	ldr	r2, [pc, #92]	; (8003ccc <UART_SetConfig+0x2c4>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d13a      	bne.n	8003ce8 <UART_SetConfig+0x2e0>
 8003c72:	4b18      	ldr	r3, [pc, #96]	; (8003cd4 <UART_SetConfig+0x2cc>)
 8003c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c78:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003c7c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c80:	d01a      	beq.n	8003cb8 <UART_SetConfig+0x2b0>
 8003c82:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c86:	d81b      	bhi.n	8003cc0 <UART_SetConfig+0x2b8>
 8003c88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c8c:	d00c      	beq.n	8003ca8 <UART_SetConfig+0x2a0>
 8003c8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c92:	d815      	bhi.n	8003cc0 <UART_SetConfig+0x2b8>
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d003      	beq.n	8003ca0 <UART_SetConfig+0x298>
 8003c98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c9c:	d008      	beq.n	8003cb0 <UART_SetConfig+0x2a8>
 8003c9e:	e00f      	b.n	8003cc0 <UART_SetConfig+0x2b8>
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ca6:	e022      	b.n	8003cee <UART_SetConfig+0x2e6>
 8003ca8:	2302      	movs	r3, #2
 8003caa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cae:	e01e      	b.n	8003cee <UART_SetConfig+0x2e6>
 8003cb0:	2304      	movs	r3, #4
 8003cb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cb6:	e01a      	b.n	8003cee <UART_SetConfig+0x2e6>
 8003cb8:	2308      	movs	r3, #8
 8003cba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cbe:	e016      	b.n	8003cee <UART_SetConfig+0x2e6>
 8003cc0:	2310      	movs	r3, #16
 8003cc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cc6:	e012      	b.n	8003cee <UART_SetConfig+0x2e6>
 8003cc8:	efff69f3 	.word	0xefff69f3
 8003ccc:	40008000 	.word	0x40008000
 8003cd0:	40013800 	.word	0x40013800
 8003cd4:	40021000 	.word	0x40021000
 8003cd8:	40004400 	.word	0x40004400
 8003cdc:	40004800 	.word	0x40004800
 8003ce0:	40004c00 	.word	0x40004c00
 8003ce4:	40005000 	.word	0x40005000
 8003ce8:	2310      	movs	r3, #16
 8003cea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a9f      	ldr	r2, [pc, #636]	; (8003f70 <UART_SetConfig+0x568>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d17a      	bne.n	8003dee <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003cf8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003cfc:	2b08      	cmp	r3, #8
 8003cfe:	d824      	bhi.n	8003d4a <UART_SetConfig+0x342>
 8003d00:	a201      	add	r2, pc, #4	; (adr r2, 8003d08 <UART_SetConfig+0x300>)
 8003d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d06:	bf00      	nop
 8003d08:	08003d2d 	.word	0x08003d2d
 8003d0c:	08003d4b 	.word	0x08003d4b
 8003d10:	08003d35 	.word	0x08003d35
 8003d14:	08003d4b 	.word	0x08003d4b
 8003d18:	08003d3b 	.word	0x08003d3b
 8003d1c:	08003d4b 	.word	0x08003d4b
 8003d20:	08003d4b 	.word	0x08003d4b
 8003d24:	08003d4b 	.word	0x08003d4b
 8003d28:	08003d43 	.word	0x08003d43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d2c:	f7fe fc22 	bl	8002574 <HAL_RCC_GetPCLK1Freq>
 8003d30:	61f8      	str	r0, [r7, #28]
        break;
 8003d32:	e010      	b.n	8003d56 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d34:	4b8f      	ldr	r3, [pc, #572]	; (8003f74 <UART_SetConfig+0x56c>)
 8003d36:	61fb      	str	r3, [r7, #28]
        break;
 8003d38:	e00d      	b.n	8003d56 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d3a:	f7fe fb83 	bl	8002444 <HAL_RCC_GetSysClockFreq>
 8003d3e:	61f8      	str	r0, [r7, #28]
        break;
 8003d40:	e009      	b.n	8003d56 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d46:	61fb      	str	r3, [r7, #28]
        break;
 8003d48:	e005      	b.n	8003d56 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003d54:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	f000 80fb 	beq.w	8003f54 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	685a      	ldr	r2, [r3, #4]
 8003d62:	4613      	mov	r3, r2
 8003d64:	005b      	lsls	r3, r3, #1
 8003d66:	4413      	add	r3, r2
 8003d68:	69fa      	ldr	r2, [r7, #28]
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d305      	bcc.n	8003d7a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d74:	69fa      	ldr	r2, [r7, #28]
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d903      	bls.n	8003d82 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003d80:	e0e8      	b.n	8003f54 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	2200      	movs	r2, #0
 8003d86:	461c      	mov	r4, r3
 8003d88:	4615      	mov	r5, r2
 8003d8a:	f04f 0200 	mov.w	r2, #0
 8003d8e:	f04f 0300 	mov.w	r3, #0
 8003d92:	022b      	lsls	r3, r5, #8
 8003d94:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003d98:	0222      	lsls	r2, r4, #8
 8003d9a:	68f9      	ldr	r1, [r7, #12]
 8003d9c:	6849      	ldr	r1, [r1, #4]
 8003d9e:	0849      	lsrs	r1, r1, #1
 8003da0:	2000      	movs	r0, #0
 8003da2:	4688      	mov	r8, r1
 8003da4:	4681      	mov	r9, r0
 8003da6:	eb12 0a08 	adds.w	sl, r2, r8
 8003daa:	eb43 0b09 	adc.w	fp, r3, r9
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	603b      	str	r3, [r7, #0]
 8003db6:	607a      	str	r2, [r7, #4]
 8003db8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003dbc:	4650      	mov	r0, sl
 8003dbe:	4659      	mov	r1, fp
 8003dc0:	f7fc face 	bl	8000360 <__aeabi_uldivmod>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	460b      	mov	r3, r1
 8003dc8:	4613      	mov	r3, r2
 8003dca:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003dcc:	69bb      	ldr	r3, [r7, #24]
 8003dce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dd2:	d308      	bcc.n	8003de6 <UART_SetConfig+0x3de>
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dda:	d204      	bcs.n	8003de6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	69ba      	ldr	r2, [r7, #24]
 8003de2:	60da      	str	r2, [r3, #12]
 8003de4:	e0b6      	b.n	8003f54 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003dec:	e0b2      	b.n	8003f54 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	69db      	ldr	r3, [r3, #28]
 8003df2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003df6:	d15e      	bne.n	8003eb6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003df8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003dfc:	2b08      	cmp	r3, #8
 8003dfe:	d828      	bhi.n	8003e52 <UART_SetConfig+0x44a>
 8003e00:	a201      	add	r2, pc, #4	; (adr r2, 8003e08 <UART_SetConfig+0x400>)
 8003e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e06:	bf00      	nop
 8003e08:	08003e2d 	.word	0x08003e2d
 8003e0c:	08003e35 	.word	0x08003e35
 8003e10:	08003e3d 	.word	0x08003e3d
 8003e14:	08003e53 	.word	0x08003e53
 8003e18:	08003e43 	.word	0x08003e43
 8003e1c:	08003e53 	.word	0x08003e53
 8003e20:	08003e53 	.word	0x08003e53
 8003e24:	08003e53 	.word	0x08003e53
 8003e28:	08003e4b 	.word	0x08003e4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e2c:	f7fe fba2 	bl	8002574 <HAL_RCC_GetPCLK1Freq>
 8003e30:	61f8      	str	r0, [r7, #28]
        break;
 8003e32:	e014      	b.n	8003e5e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e34:	f7fe fbb4 	bl	80025a0 <HAL_RCC_GetPCLK2Freq>
 8003e38:	61f8      	str	r0, [r7, #28]
        break;
 8003e3a:	e010      	b.n	8003e5e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e3c:	4b4d      	ldr	r3, [pc, #308]	; (8003f74 <UART_SetConfig+0x56c>)
 8003e3e:	61fb      	str	r3, [r7, #28]
        break;
 8003e40:	e00d      	b.n	8003e5e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e42:	f7fe faff 	bl	8002444 <HAL_RCC_GetSysClockFreq>
 8003e46:	61f8      	str	r0, [r7, #28]
        break;
 8003e48:	e009      	b.n	8003e5e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e4e:	61fb      	str	r3, [r7, #28]
        break;
 8003e50:	e005      	b.n	8003e5e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003e52:	2300      	movs	r3, #0
 8003e54:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003e5c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d077      	beq.n	8003f54 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	005a      	lsls	r2, r3, #1
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	085b      	lsrs	r3, r3, #1
 8003e6e:	441a      	add	r2, r3
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e78:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	2b0f      	cmp	r3, #15
 8003e7e:	d916      	bls.n	8003eae <UART_SetConfig+0x4a6>
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e86:	d212      	bcs.n	8003eae <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	f023 030f 	bic.w	r3, r3, #15
 8003e90:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	085b      	lsrs	r3, r3, #1
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	f003 0307 	and.w	r3, r3, #7
 8003e9c:	b29a      	uxth	r2, r3
 8003e9e:	8afb      	ldrh	r3, [r7, #22]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	8afa      	ldrh	r2, [r7, #22]
 8003eaa:	60da      	str	r2, [r3, #12]
 8003eac:	e052      	b.n	8003f54 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003eb4:	e04e      	b.n	8003f54 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003eb6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003eba:	2b08      	cmp	r3, #8
 8003ebc:	d827      	bhi.n	8003f0e <UART_SetConfig+0x506>
 8003ebe:	a201      	add	r2, pc, #4	; (adr r2, 8003ec4 <UART_SetConfig+0x4bc>)
 8003ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec4:	08003ee9 	.word	0x08003ee9
 8003ec8:	08003ef1 	.word	0x08003ef1
 8003ecc:	08003ef9 	.word	0x08003ef9
 8003ed0:	08003f0f 	.word	0x08003f0f
 8003ed4:	08003eff 	.word	0x08003eff
 8003ed8:	08003f0f 	.word	0x08003f0f
 8003edc:	08003f0f 	.word	0x08003f0f
 8003ee0:	08003f0f 	.word	0x08003f0f
 8003ee4:	08003f07 	.word	0x08003f07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ee8:	f7fe fb44 	bl	8002574 <HAL_RCC_GetPCLK1Freq>
 8003eec:	61f8      	str	r0, [r7, #28]
        break;
 8003eee:	e014      	b.n	8003f1a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ef0:	f7fe fb56 	bl	80025a0 <HAL_RCC_GetPCLK2Freq>
 8003ef4:	61f8      	str	r0, [r7, #28]
        break;
 8003ef6:	e010      	b.n	8003f1a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ef8:	4b1e      	ldr	r3, [pc, #120]	; (8003f74 <UART_SetConfig+0x56c>)
 8003efa:	61fb      	str	r3, [r7, #28]
        break;
 8003efc:	e00d      	b.n	8003f1a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003efe:	f7fe faa1 	bl	8002444 <HAL_RCC_GetSysClockFreq>
 8003f02:	61f8      	str	r0, [r7, #28]
        break;
 8003f04:	e009      	b.n	8003f1a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f0a:	61fb      	str	r3, [r7, #28]
        break;
 8003f0c:	e005      	b.n	8003f1a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003f18:	bf00      	nop
    }

    if (pclk != 0U)
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d019      	beq.n	8003f54 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	085a      	lsrs	r2, r3, #1
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	441a      	add	r2, r3
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f32:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	2b0f      	cmp	r3, #15
 8003f38:	d909      	bls.n	8003f4e <UART_SetConfig+0x546>
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f40:	d205      	bcs.n	8003f4e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	b29a      	uxth	r2, r3
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	60da      	str	r2, [r3, #12]
 8003f4c:	e002      	b.n	8003f54 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2200      	movs	r2, #0
 8003f58:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003f60:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3728      	adds	r7, #40	; 0x28
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f6e:	bf00      	nop
 8003f70:	40008000 	.word	0x40008000
 8003f74:	00f42400 	.word	0x00f42400

08003f78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f84:	f003 0308 	and.w	r3, r3, #8
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d00a      	beq.n	8003fa2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa6:	f003 0301 	and.w	r3, r3, #1
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00a      	beq.n	8003fc4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	430a      	orrs	r2, r1
 8003fc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc8:	f003 0302 	and.w	r3, r3, #2
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d00a      	beq.n	8003fe6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	430a      	orrs	r2, r1
 8003fe4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fea:	f003 0304 	and.w	r3, r3, #4
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00a      	beq.n	8004008 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	430a      	orrs	r2, r1
 8004006:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400c:	f003 0310 	and.w	r3, r3, #16
 8004010:	2b00      	cmp	r3, #0
 8004012:	d00a      	beq.n	800402a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	430a      	orrs	r2, r1
 8004028:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402e:	f003 0320 	and.w	r3, r3, #32
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00a      	beq.n	800404c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	430a      	orrs	r2, r1
 800404a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004054:	2b00      	cmp	r3, #0
 8004056:	d01a      	beq.n	800408e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	430a      	orrs	r2, r1
 800406c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004072:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004076:	d10a      	bne.n	800408e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	430a      	orrs	r2, r1
 800408c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00a      	beq.n	80040b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	430a      	orrs	r2, r1
 80040ae:	605a      	str	r2, [r3, #4]
  }
}
 80040b0:	bf00      	nop
 80040b2:	370c      	adds	r7, #12
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b098      	sub	sp, #96	; 0x60
 80040c0:	af02      	add	r7, sp, #8
 80040c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80040cc:	f7fd f93a 	bl	8001344 <HAL_GetTick>
 80040d0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0308 	and.w	r3, r3, #8
 80040dc:	2b08      	cmp	r3, #8
 80040de:	d12e      	bne.n	800413e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040e4:	9300      	str	r3, [sp, #0]
 80040e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040e8:	2200      	movs	r2, #0
 80040ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 f88c 	bl	800420c <UART_WaitOnFlagUntilTimeout>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d021      	beq.n	800413e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004102:	e853 3f00 	ldrex	r3, [r3]
 8004106:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800410a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800410e:	653b      	str	r3, [r7, #80]	; 0x50
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	461a      	mov	r2, r3
 8004116:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004118:	647b      	str	r3, [r7, #68]	; 0x44
 800411a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800411e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004120:	e841 2300 	strex	r3, r2, [r1]
 8004124:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004126:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004128:	2b00      	cmp	r3, #0
 800412a:	d1e6      	bne.n	80040fa <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2220      	movs	r2, #32
 8004130:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e062      	b.n	8004204 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0304 	and.w	r3, r3, #4
 8004148:	2b04      	cmp	r3, #4
 800414a:	d149      	bne.n	80041e0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800414c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004150:	9300      	str	r3, [sp, #0]
 8004152:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004154:	2200      	movs	r2, #0
 8004156:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f000 f856 	bl	800420c <UART_WaitOnFlagUntilTimeout>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d03c      	beq.n	80041e0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800416c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416e:	e853 3f00 	ldrex	r3, [r3]
 8004172:	623b      	str	r3, [r7, #32]
   return(result);
 8004174:	6a3b      	ldr	r3, [r7, #32]
 8004176:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800417a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	461a      	mov	r2, r3
 8004182:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004184:	633b      	str	r3, [r7, #48]	; 0x30
 8004186:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004188:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800418a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800418c:	e841 2300 	strex	r3, r2, [r1]
 8004190:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004194:	2b00      	cmp	r3, #0
 8004196:	d1e6      	bne.n	8004166 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	3308      	adds	r3, #8
 800419e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	e853 3f00 	ldrex	r3, [r3]
 80041a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f023 0301 	bic.w	r3, r3, #1
 80041ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	3308      	adds	r3, #8
 80041b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041b8:	61fa      	str	r2, [r7, #28]
 80041ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041bc:	69b9      	ldr	r1, [r7, #24]
 80041be:	69fa      	ldr	r2, [r7, #28]
 80041c0:	e841 2300 	strex	r3, r2, [r1]
 80041c4:	617b      	str	r3, [r7, #20]
   return(result);
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d1e5      	bne.n	8004198 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2220      	movs	r2, #32
 80041d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	e011      	b.n	8004204 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2220      	movs	r2, #32
 80041e4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2220      	movs	r2, #32
 80041ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004202:	2300      	movs	r3, #0
}
 8004204:	4618      	mov	r0, r3
 8004206:	3758      	adds	r7, #88	; 0x58
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	60b9      	str	r1, [r7, #8]
 8004216:	603b      	str	r3, [r7, #0]
 8004218:	4613      	mov	r3, r2
 800421a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800421c:	e049      	b.n	80042b2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004224:	d045      	beq.n	80042b2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004226:	f7fd f88d 	bl	8001344 <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	69ba      	ldr	r2, [r7, #24]
 8004232:	429a      	cmp	r2, r3
 8004234:	d302      	bcc.n	800423c <UART_WaitOnFlagUntilTimeout+0x30>
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d101      	bne.n	8004240 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e048      	b.n	80042d2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0304 	and.w	r3, r3, #4
 800424a:	2b00      	cmp	r3, #0
 800424c:	d031      	beq.n	80042b2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	69db      	ldr	r3, [r3, #28]
 8004254:	f003 0308 	and.w	r3, r3, #8
 8004258:	2b08      	cmp	r3, #8
 800425a:	d110      	bne.n	800427e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2208      	movs	r2, #8
 8004262:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004264:	68f8      	ldr	r0, [r7, #12]
 8004266:	f000 f838 	bl	80042da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2208      	movs	r2, #8
 800426e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e029      	b.n	80042d2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	69db      	ldr	r3, [r3, #28]
 8004284:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004288:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800428c:	d111      	bne.n	80042b2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004296:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004298:	68f8      	ldr	r0, [r7, #12]
 800429a:	f000 f81e 	bl	80042da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2220      	movs	r2, #32
 80042a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e00f      	b.n	80042d2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	69da      	ldr	r2, [r3, #28]
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	4013      	ands	r3, r2
 80042bc:	68ba      	ldr	r2, [r7, #8]
 80042be:	429a      	cmp	r2, r3
 80042c0:	bf0c      	ite	eq
 80042c2:	2301      	moveq	r3, #1
 80042c4:	2300      	movne	r3, #0
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	461a      	mov	r2, r3
 80042ca:	79fb      	ldrb	r3, [r7, #7]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d0a6      	beq.n	800421e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042d0:	2300      	movs	r3, #0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3710      	adds	r7, #16
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}

080042da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042da:	b480      	push	{r7}
 80042dc:	b095      	sub	sp, #84	; 0x54
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042ea:	e853 3f00 	ldrex	r3, [r3]
 80042ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80042f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	461a      	mov	r2, r3
 80042fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004300:	643b      	str	r3, [r7, #64]	; 0x40
 8004302:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004304:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004306:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004308:	e841 2300 	strex	r3, r2, [r1]
 800430c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800430e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004310:	2b00      	cmp	r3, #0
 8004312:	d1e6      	bne.n	80042e2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	3308      	adds	r3, #8
 800431a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800431c:	6a3b      	ldr	r3, [r7, #32]
 800431e:	e853 3f00 	ldrex	r3, [r3]
 8004322:	61fb      	str	r3, [r7, #28]
   return(result);
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	f023 0301 	bic.w	r3, r3, #1
 800432a:	64bb      	str	r3, [r7, #72]	; 0x48
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	3308      	adds	r3, #8
 8004332:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004334:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004336:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004338:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800433a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800433c:	e841 2300 	strex	r3, r2, [r1]
 8004340:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004344:	2b00      	cmp	r3, #0
 8004346:	d1e5      	bne.n	8004314 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800434c:	2b01      	cmp	r3, #1
 800434e:	d118      	bne.n	8004382 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	e853 3f00 	ldrex	r3, [r3]
 800435c:	60bb      	str	r3, [r7, #8]
   return(result);
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	f023 0310 	bic.w	r3, r3, #16
 8004364:	647b      	str	r3, [r7, #68]	; 0x44
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	461a      	mov	r2, r3
 800436c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800436e:	61bb      	str	r3, [r7, #24]
 8004370:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004372:	6979      	ldr	r1, [r7, #20]
 8004374:	69ba      	ldr	r2, [r7, #24]
 8004376:	e841 2300 	strex	r3, r2, [r1]
 800437a:	613b      	str	r3, [r7, #16]
   return(result);
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d1e6      	bne.n	8004350 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2220      	movs	r2, #32
 8004386:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004396:	bf00      	nop
 8004398:	3754      	adds	r7, #84	; 0x54
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
	...

080043a4 <acc_rss_activate>:
 80043a4:	b510      	push	{r4, lr}
 80043a6:	4c18      	ldr	r4, [pc, #96]	; (8004408 <acc_rss_activate+0x64>)
 80043a8:	7823      	ldrb	r3, [r4, #0]
 80043aa:	b9c3      	cbnz	r3, 80043de <acc_rss_activate+0x3a>
 80043ac:	b1a8      	cbz	r0, 80043da <acc_rss_activate+0x36>
 80043ae:	f001 f8c1 	bl	8005534 <acc_rss_integration_register>
 80043b2:	b188      	cbz	r0, 80043d8 <acc_rss_activate+0x34>
 80043b4:	f000 fc62 	bl	8004c7c <acc_service_manager_activate>
 80043b8:	b1e8      	cbz	r0, 80043f6 <acc_rss_activate+0x52>
 80043ba:	f002 fda7 	bl	8006f0c <acc_sensor_manager_activate>
 80043be:	b1d0      	cbz	r0, 80043f6 <acc_rss_activate+0x52>
 80043c0:	2301      	movs	r3, #1
 80043c2:	7023      	strb	r3, [r4, #0]
 80043c4:	f001 f9b4 	bl	8005730 <acc_rss_integration_log_level>
 80043c8:	2801      	cmp	r0, #1
 80043ca:	d905      	bls.n	80043d8 <acc_rss_activate+0x34>
 80043cc:	4b0f      	ldr	r3, [pc, #60]	; (800440c <acc_rss_activate+0x68>)
 80043ce:	4a10      	ldr	r2, [pc, #64]	; (8004410 <acc_rss_activate+0x6c>)
 80043d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043d2:	4910      	ldr	r1, [pc, #64]	; (8004414 <acc_rss_activate+0x70>)
 80043d4:	2002      	movs	r0, #2
 80043d6:	4798      	blx	r3
 80043d8:	7823      	ldrb	r3, [r4, #0]
 80043da:	4618      	mov	r0, r3
 80043dc:	bd10      	pop	{r4, pc}
 80043de:	f001 f9a7 	bl	8005730 <acc_rss_integration_log_level>
 80043e2:	2801      	cmp	r0, #1
 80043e4:	d9f8      	bls.n	80043d8 <acc_rss_activate+0x34>
 80043e6:	4b09      	ldr	r3, [pc, #36]	; (800440c <acc_rss_activate+0x68>)
 80043e8:	4a0b      	ldr	r2, [pc, #44]	; (8004418 <acc_rss_activate+0x74>)
 80043ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ec:	4909      	ldr	r1, [pc, #36]	; (8004414 <acc_rss_activate+0x70>)
 80043ee:	2002      	movs	r0, #2
 80043f0:	4798      	blx	r3
 80043f2:	7823      	ldrb	r3, [r4, #0]
 80043f4:	e7f1      	b.n	80043da <acc_rss_activate+0x36>
 80043f6:	4b05      	ldr	r3, [pc, #20]	; (800440c <acc_rss_activate+0x68>)
 80043f8:	4a08      	ldr	r2, [pc, #32]	; (800441c <acc_rss_activate+0x78>)
 80043fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043fc:	4905      	ldr	r1, [pc, #20]	; (8004414 <acc_rss_activate+0x70>)
 80043fe:	2000      	movs	r0, #0
 8004400:	4798      	blx	r3
 8004402:	7823      	ldrb	r3, [r4, #0]
 8004404:	4618      	mov	r0, r3
 8004406:	bd10      	pop	{r4, pc}
 8004408:	200002f8 	.word	0x200002f8
 800440c:	200004c0 	.word	0x200004c0
 8004410:	0800e2c4 	.word	0x0800e2c4
 8004414:	0800e2e4 	.word	0x0800e2e4
 8004418:	0800e300 	.word	0x0800e300
 800441c:	0800e2e8 	.word	0x0800e2e8

08004420 <acc_rss_deactivate>:
 8004420:	b510      	push	{r4, lr}
 8004422:	4c0b      	ldr	r4, [pc, #44]	; (8004450 <acc_rss_deactivate+0x30>)
 8004424:	7823      	ldrb	r3, [r4, #0]
 8004426:	b903      	cbnz	r3, 800442a <acc_rss_deactivate+0xa>
 8004428:	bd10      	pop	{r4, pc}
 800442a:	f000 fcd5 	bl	8004dd8 <acc_service_manager_deactivate>
 800442e:	f002 fda9 	bl	8006f84 <acc_sensor_manager_deactivate>
 8004432:	f001 f97d 	bl	8005730 <acc_rss_integration_log_level>
 8004436:	2801      	cmp	r0, #1
 8004438:	d905      	bls.n	8004446 <acc_rss_deactivate+0x26>
 800443a:	4b06      	ldr	r3, [pc, #24]	; (8004454 <acc_rss_deactivate+0x34>)
 800443c:	4a06      	ldr	r2, [pc, #24]	; (8004458 <acc_rss_deactivate+0x38>)
 800443e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004440:	4906      	ldr	r1, [pc, #24]	; (800445c <acc_rss_deactivate+0x3c>)
 8004442:	2002      	movs	r0, #2
 8004444:	4798      	blx	r3
 8004446:	f001 f8b5 	bl	80055b4 <acc_rss_integration_unregister>
 800444a:	2300      	movs	r3, #0
 800444c:	7023      	strb	r3, [r4, #0]
 800444e:	bd10      	pop	{r4, pc}
 8004450:	200002f8 	.word	0x200002f8
 8004454:	200004c0 	.word	0x200004c0
 8004458:	0800e328 	.word	0x0800e328
 800445c:	0800e2e4 	.word	0x0800e2e4

08004460 <acc_service_get_base_configuration>:
 8004460:	b510      	push	{r4, lr}
 8004462:	4604      	mov	r4, r0
 8004464:	b108      	cbz	r0, 800446a <acc_service_get_base_configuration+0xa>
 8004466:	6900      	ldr	r0, [r0, #16]
 8004468:	bd10      	pop	{r4, pc}
 800446a:	f001 f961 	bl	8005730 <acc_rss_integration_log_level>
 800446e:	2800      	cmp	r0, #0
 8004470:	d0fa      	beq.n	8004468 <acc_service_get_base_configuration+0x8>
 8004472:	4b04      	ldr	r3, [pc, #16]	; (8004484 <acc_service_get_base_configuration+0x24>)
 8004474:	4a04      	ldr	r2, [pc, #16]	; (8004488 <acc_service_get_base_configuration+0x28>)
 8004476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004478:	4904      	ldr	r1, [pc, #16]	; (800448c <acc_service_get_base_configuration+0x2c>)
 800447a:	2001      	movs	r0, #1
 800447c:	4798      	blx	r3
 800447e:	4620      	mov	r0, r4
 8004480:	bd10      	pop	{r4, pc}
 8004482:	bf00      	nop
 8004484:	200004c0 	.word	0x200004c0
 8004488:	0800e34c 	.word	0x0800e34c
 800448c:	0800e364 	.word	0x0800e364

08004490 <set_maximize_signal_attenuation>:
 8004490:	b570      	push	{r4, r5, r6, lr}
 8004492:	460d      	mov	r5, r1
 8004494:	4606      	mov	r6, r0
 8004496:	f7ff ffe3 	bl	8004460 <acc_service_get_base_configuration>
 800449a:	b158      	cbz	r0, 80044b4 <set_maximize_signal_attenuation+0x24>
 800449c:	4629      	mov	r1, r5
 800449e:	4604      	mov	r4, r0
 80044a0:	f000 ff3c 	bl	800531c <acc_base_configuration_maximize_signal_attenuation_set>
 80044a4:	b93d      	cbnz	r5, 80044b6 <set_maximize_signal_attenuation+0x26>
 80044a6:	68b3      	ldr	r3, [r6, #8]
 80044a8:	b123      	cbz	r3, 80044b4 <set_maximize_signal_attenuation+0x24>
 80044aa:	7971      	ldrb	r1, [r6, #5]
 80044ac:	4630      	mov	r0, r6
 80044ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80044b2:	4718      	bx	r3
 80044b4:	bd70      	pop	{r4, r5, r6, pc}
 80044b6:	4620      	mov	r0, r4
 80044b8:	210f      	movs	r1, #15
 80044ba:	f000 fe21 	bl	8005100 <acc_base_configuration_integrator_set>
 80044be:	4620      	mov	r0, r4
 80044c0:	2101      	movs	r1, #1
 80044c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80044c6:	f000 be43 	b.w	8005150 <acc_base_configuration_integrator_ramp_up_set>
 80044ca:	bf00      	nop

080044cc <acc_service_requested_start_set>:
 80044cc:	b500      	push	{lr}
 80044ce:	b083      	sub	sp, #12
 80044d0:	ed8d 0a01 	vstr	s0, [sp, #4]
 80044d4:	f7ff ffc4 	bl	8004460 <acc_service_get_base_configuration>
 80044d8:	ed9d 0a01 	vldr	s0, [sp, #4]
 80044dc:	b003      	add	sp, #12
 80044de:	f85d eb04 	ldr.w	lr, [sp], #4
 80044e2:	f000 bcd7 	b.w	8004e94 <acc_base_configuration_requested_start_set>
 80044e6:	bf00      	nop

080044e8 <acc_service_requested_length_set>:
 80044e8:	b500      	push	{lr}
 80044ea:	b083      	sub	sp, #12
 80044ec:	ed8d 0a01 	vstr	s0, [sp, #4]
 80044f0:	f7ff ffb6 	bl	8004460 <acc_service_get_base_configuration>
 80044f4:	ed9d 0a01 	vldr	s0, [sp, #4]
 80044f8:	b003      	add	sp, #12
 80044fa:	f85d eb04 	ldr.w	lr, [sp], #4
 80044fe:	f000 bce5 	b.w	8004ecc <acc_base_configuration_requested_length_set>
 8004502:	bf00      	nop

08004504 <acc_service_pipeline_destroy>:
 8004504:	b510      	push	{r4, lr}
 8004506:	4604      	mov	r4, r0
 8004508:	6900      	ldr	r0, [r0, #16]
 800450a:	b118      	cbz	r0, 8004514 <acc_service_pipeline_destroy+0x10>
 800450c:	68c3      	ldr	r3, [r0, #12]
 800450e:	4798      	blx	r3
 8004510:	2300      	movs	r3, #0
 8004512:	6123      	str	r3, [r4, #16]
 8004514:	bd10      	pop	{r4, pc}
 8004516:	bf00      	nop

08004518 <acc_service_send_data>:
 8004518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800451a:	9e06      	ldr	r6, [sp, #24]
 800451c:	6944      	ldr	r4, [r0, #20]
 800451e:	7835      	ldrb	r5, [r6, #0]
 8004520:	461f      	mov	r7, r3
 8004522:	b91d      	cbnz	r5, 800452c <acc_service_send_data+0x14>
 8004524:	7ea5      	ldrb	r5, [r4, #26]
 8004526:	b95d      	cbnz	r5, 8004540 <acc_service_send_data+0x28>
 8004528:	68a3      	ldr	r3, [r4, #8]
 800452a:	6019      	str	r1, [r3, #0]
 800452c:	6920      	ldr	r0, [r4, #16]
 800452e:	7665      	strb	r5, [r4, #25]
 8004530:	b128      	cbz	r0, 800453e <acc_service_send_data+0x26>
 8004532:	6962      	ldr	r2, [r4, #20]
 8004534:	4639      	mov	r1, r7
 8004536:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800453a:	f008 bd2b 	b.w	800cf94 <memcpy>
 800453e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004540:	68e3      	ldr	r3, [r4, #12]
 8004542:	6860      	ldr	r0, [r4, #4]
 8004544:	429a      	cmp	r2, r3
 8004546:	bf28      	it	cs
 8004548:	461a      	movcs	r2, r3
 800454a:	f008 fd23 	bl	800cf94 <memcpy>
 800454e:	7835      	ldrb	r5, [r6, #0]
 8004550:	e7ec      	b.n	800452c <acc_service_send_data+0x14>
 8004552:	bf00      	nop

08004554 <acc_service_set_module_active>:
 8004554:	4b01      	ldr	r3, [pc, #4]	; (800455c <acc_service_set_module_active+0x8>)
 8004556:	7018      	strb	r0, [r3, #0]
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	200002f9 	.word	0x200002f9

08004560 <acc_service_handle_valid>:
 8004560:	b508      	push	{r3, lr}
 8004562:	b118      	cbz	r0, 800456c <acc_service_handle_valid+0xc>
 8004564:	6802      	ldr	r2, [r0, #0]
 8004566:	4b06      	ldr	r3, [pc, #24]	; (8004580 <acc_service_handle_valid+0x20>)
 8004568:	429a      	cmp	r2, r3
 800456a:	d007      	beq.n	800457c <acc_service_handle_valid+0x1c>
 800456c:	4b05      	ldr	r3, [pc, #20]	; (8004584 <acc_service_handle_valid+0x24>)
 800456e:	4a06      	ldr	r2, [pc, #24]	; (8004588 <acc_service_handle_valid+0x28>)
 8004570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004572:	4906      	ldr	r1, [pc, #24]	; (800458c <acc_service_handle_valid+0x2c>)
 8004574:	2000      	movs	r0, #0
 8004576:	4798      	blx	r3
 8004578:	2000      	movs	r0, #0
 800457a:	bd08      	pop	{r3, pc}
 800457c:	2001      	movs	r0, #1
 800457e:	bd08      	pop	{r3, pc}
 8004580:	acc09ee8 	.word	0xacc09ee8
 8004584:	200004c0 	.word	0x200004c0
 8004588:	0800e36c 	.word	0x0800e36c
 800458c:	0800e364 	.word	0x0800e364

08004590 <acc_service_activate>:
 8004590:	b570      	push	{r4, r5, r6, lr}
 8004592:	4604      	mov	r4, r0
 8004594:	f7ff ffe4 	bl	8004560 <acc_service_handle_valid>
 8004598:	b1b0      	cbz	r0, 80045c8 <acc_service_activate+0x38>
 800459a:	4b19      	ldr	r3, [pc, #100]	; (8004600 <acc_service_activate+0x70>)
 800459c:	7818      	ldrb	r0, [r3, #0]
 800459e:	b198      	cbz	r0, 80045c8 <acc_service_activate+0x38>
 80045a0:	7a63      	ldrb	r3, [r4, #9]
 80045a2:	b903      	cbnz	r3, 80045a6 <acc_service_activate+0x16>
 80045a4:	bd70      	pop	{r4, r5, r6, pc}
 80045a6:	6863      	ldr	r3, [r4, #4]
 80045a8:	2b2a      	cmp	r3, #42	; 0x2a
 80045aa:	d80d      	bhi.n	80045c8 <acc_service_activate+0x38>
 80045ac:	4d15      	ldr	r5, [pc, #84]	; (8004604 <acc_service_activate+0x74>)
 80045ae:	f815 2013 	ldrb.w	r2, [r5, r3, lsl #1]
 80045b2:	b94a      	cbnz	r2, 80045c8 <acc_service_activate+0x38>
 80045b4:	eb05 0243 	add.w	r2, r5, r3, lsl #1
 80045b8:	2101      	movs	r1, #1
 80045ba:	7856      	ldrb	r6, [r2, #1]
 80045bc:	f805 1013 	strb.w	r1, [r5, r3, lsl #1]
 80045c0:	b156      	cbz	r6, 80045d8 <acc_service_activate+0x48>
 80045c2:	2200      	movs	r2, #0
 80045c4:	f805 2013 	strb.w	r2, [r5, r3, lsl #1]
 80045c8:	4b0f      	ldr	r3, [pc, #60]	; (8004608 <acc_service_activate+0x78>)
 80045ca:	4a10      	ldr	r2, [pc, #64]	; (800460c <acc_service_activate+0x7c>)
 80045cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ce:	4910      	ldr	r1, [pc, #64]	; (8004610 <acc_service_activate+0x80>)
 80045d0:	2000      	movs	r0, #0
 80045d2:	4798      	blx	r3
 80045d4:	2000      	movs	r0, #0
 80045d6:	bd70      	pop	{r4, r5, r6, pc}
 80045d8:	f104 0018 	add.w	r0, r4, #24
 80045dc:	f002 fe3c 	bl	8007258 <acc_sensor_manager_start_measurement>
 80045e0:	6863      	ldr	r3, [r4, #4]
 80045e2:	b910      	cbnz	r0, 80045ea <acc_service_activate+0x5a>
 80045e4:	2b2a      	cmp	r3, #42	; 0x2a
 80045e6:	d8ef      	bhi.n	80045c8 <acc_service_activate+0x38>
 80045e8:	e7eb      	b.n	80045c2 <acc_service_activate+0x32>
 80045ea:	2b2a      	cmp	r3, #42	; 0x2a
 80045ec:	d805      	bhi.n	80045fa <acc_service_activate+0x6a>
 80045ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80045f2:	7266      	strb	r6, [r4, #9]
 80045f4:	f825 2013 	strh.w	r2, [r5, r3, lsl #1]
 80045f8:	bd70      	pop	{r4, r5, r6, pc}
 80045fa:	7266      	strb	r6, [r4, #9]
 80045fc:	bd70      	pop	{r4, r5, r6, pc}
 80045fe:	bf00      	nop
 8004600:	200002f9 	.word	0x200002f9
 8004604:	200002fc 	.word	0x200002fc
 8004608:	200004c0 	.word	0x200004c0
 800460c:	0800e37c 	.word	0x0800e37c
 8004610:	0800e364 	.word	0x0800e364

08004614 <acc_service_deactivate>:
 8004614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004618:	4605      	mov	r5, r0
 800461a:	f7ff ffa1 	bl	8004560 <acc_service_handle_valid>
 800461e:	b110      	cbz	r0, 8004626 <acc_service_deactivate+0x12>
 8004620:	4b16      	ldr	r3, [pc, #88]	; (800467c <acc_service_deactivate+0x68>)
 8004622:	781c      	ldrb	r4, [r3, #0]
 8004624:	b94c      	cbnz	r4, 800463a <acc_service_deactivate+0x26>
 8004626:	4b16      	ldr	r3, [pc, #88]	; (8004680 <acc_service_deactivate+0x6c>)
 8004628:	4a16      	ldr	r2, [pc, #88]	; (8004684 <acc_service_deactivate+0x70>)
 800462a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800462c:	4916      	ldr	r1, [pc, #88]	; (8004688 <acc_service_deactivate+0x74>)
 800462e:	2000      	movs	r0, #0
 8004630:	4798      	blx	r3
 8004632:	2400      	movs	r4, #0
 8004634:	4620      	mov	r0, r4
 8004636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800463a:	7a6b      	ldrb	r3, [r5, #9]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d1f9      	bne.n	8004634 <acc_service_deactivate+0x20>
 8004640:	686b      	ldr	r3, [r5, #4]
 8004642:	2b2a      	cmp	r3, #42	; 0x2a
 8004644:	d8ef      	bhi.n	8004626 <acc_service_deactivate+0x12>
 8004646:	4e11      	ldr	r6, [pc, #68]	; (800468c <acc_service_deactivate+0x78>)
 8004648:	f816 7013 	ldrb.w	r7, [r6, r3, lsl #1]
 800464c:	2f00      	cmp	r7, #0
 800464e:	d1ea      	bne.n	8004626 <acc_service_deactivate+0x12>
 8004650:	f04f 0801 	mov.w	r8, #1
 8004654:	f105 0018 	add.w	r0, r5, #24
 8004658:	f806 8013 	strb.w	r8, [r6, r3, lsl #1]
 800465c:	f002 fe36 	bl	80072cc <acc_sensor_manager_stop_measurement>
 8004660:	686b      	ldr	r3, [r5, #4]
 8004662:	2b2a      	cmp	r3, #42	; 0x2a
 8004664:	d807      	bhi.n	8004676 <acc_service_deactivate+0x62>
 8004666:	eb06 0243 	add.w	r2, r6, r3, lsl #1
 800466a:	7057      	strb	r7, [r2, #1]
 800466c:	f885 8009 	strb.w	r8, [r5, #9]
 8004670:	f806 7013 	strb.w	r7, [r6, r3, lsl #1]
 8004674:	e7de      	b.n	8004634 <acc_service_deactivate+0x20>
 8004676:	f885 8009 	strb.w	r8, [r5, #9]
 800467a:	e7db      	b.n	8004634 <acc_service_deactivate+0x20>
 800467c:	200002f9 	.word	0x200002f9
 8004680:	200004c0 	.word	0x200004c0
 8004684:	0800e398 	.word	0x0800e398
 8004688:	0800e364 	.word	0x0800e364
 800468c:	200002fc 	.word	0x200002fc

08004690 <acc_service_get_next>:
 8004690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004694:	460c      	mov	r4, r1
 8004696:	b082      	sub	sp, #8
 8004698:	4606      	mov	r6, r0
 800469a:	f7ff ff61 	bl	8004560 <acc_service_handle_valid>
 800469e:	7ea5      	ldrb	r5, [r4, #26]
 80046a0:	b175      	cbz	r5, 80046c0 <acc_service_get_next+0x30>
 80046a2:	6863      	ldr	r3, [r4, #4]
 80046a4:	b10b      	cbz	r3, 80046aa <acc_service_get_next+0x1a>
 80046a6:	68e3      	ldr	r3, [r4, #12]
 80046a8:	b96b      	cbnz	r3, 80046c6 <acc_service_get_next+0x36>
 80046aa:	4b29      	ldr	r3, [pc, #164]	; (8004750 <acc_service_get_next+0xc0>)
 80046ac:	4a29      	ldr	r2, [pc, #164]	; (8004754 <acc_service_get_next+0xc4>)
 80046ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046b0:	4929      	ldr	r1, [pc, #164]	; (8004758 <acc_service_get_next+0xc8>)
 80046b2:	2000      	movs	r0, #0
 80046b4:	4798      	blx	r3
 80046b6:	2500      	movs	r5, #0
 80046b8:	4628      	mov	r0, r5
 80046ba:	b002      	add	sp, #8
 80046bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046c0:	68a3      	ldr	r3, [r4, #8]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d033      	beq.n	800472e <acc_service_get_next+0x9e>
 80046c6:	b920      	cbnz	r0, 80046d2 <acc_service_get_next+0x42>
 80046c8:	2500      	movs	r5, #0
 80046ca:	4628      	mov	r0, r5
 80046cc:	b002      	add	sp, #8
 80046ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046d2:	7a33      	ldrb	r3, [r6, #8]
 80046d4:	7822      	ldrb	r2, [r4, #0]
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d007      	beq.n	80046ea <acc_service_get_next+0x5a>
 80046da:	491d      	ldr	r1, [pc, #116]	; (8004750 <acc_service_get_next+0xc0>)
 80046dc:	9200      	str	r2, [sp, #0]
 80046de:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 80046e0:	4a1e      	ldr	r2, [pc, #120]	; (800475c <acc_service_get_next+0xcc>)
 80046e2:	491d      	ldr	r1, [pc, #116]	; (8004758 <acc_service_get_next+0xc8>)
 80046e4:	2000      	movs	r0, #0
 80046e6:	47a0      	blx	r4
 80046e8:	e7ee      	b.n	80046c8 <acc_service_get_next+0x38>
 80046ea:	7e27      	ldrb	r7, [r4, #24]
 80046ec:	bb4f      	cbnz	r7, 8004742 <acc_service_get_next+0xb2>
 80046ee:	f896 8009 	ldrb.w	r8, [r6, #9]
 80046f2:	f1b8 0f00 	cmp.w	r8, #0
 80046f6:	d00f      	beq.n	8004718 <acc_service_get_next+0x88>
 80046f8:	4b15      	ldr	r3, [pc, #84]	; (8004750 <acc_service_get_next+0xc0>)
 80046fa:	4a19      	ldr	r2, [pc, #100]	; (8004760 <acc_service_get_next+0xd0>)
 80046fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046fe:	4916      	ldr	r1, [pc, #88]	; (8004758 <acc_service_get_next+0xc8>)
 8004700:	2000      	movs	r0, #0
 8004702:	4798      	blx	r3
 8004704:	2500      	movs	r5, #0
 8004706:	2f00      	cmp	r7, #0
 8004708:	d0df      	beq.n	80046ca <acc_service_get_next+0x3a>
 800470a:	4630      	mov	r0, r6
 800470c:	f7ff ff82 	bl	8004614 <acc_service_deactivate>
 8004710:	4628      	mov	r0, r5
 8004712:	b002      	add	sp, #8
 8004714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004718:	6933      	ldr	r3, [r6, #16]
 800471a:	6174      	str	r4, [r6, #20]
 800471c:	e9d3 0200 	ldrd	r0, r2, [r3]
 8004720:	4790      	blx	r2
 8004722:	7e65      	ldrb	r5, [r4, #25]
 8004724:	f8c6 8014 	str.w	r8, [r6, #20]
 8004728:	f085 0501 	eor.w	r5, r5, #1
 800472c:	e7eb      	b.n	8004706 <acc_service_get_next+0x76>
 800472e:	4b08      	ldr	r3, [pc, #32]	; (8004750 <acc_service_get_next+0xc0>)
 8004730:	4a0c      	ldr	r2, [pc, #48]	; (8004764 <acc_service_get_next+0xd4>)
 8004732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004734:	4908      	ldr	r1, [pc, #32]	; (8004758 <acc_service_get_next+0xc8>)
 8004736:	4628      	mov	r0, r5
 8004738:	4798      	blx	r3
 800473a:	4628      	mov	r0, r5
 800473c:	b002      	add	sp, #8
 800473e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004742:	4630      	mov	r0, r6
 8004744:	f7ff ff24 	bl	8004590 <acc_service_activate>
 8004748:	4607      	mov	r7, r0
 800474a:	2800      	cmp	r0, #0
 800474c:	d1cf      	bne.n	80046ee <acc_service_get_next+0x5e>
 800474e:	e7bb      	b.n	80046c8 <acc_service_get_next+0x38>
 8004750:	200004c0 	.word	0x200004c0
 8004754:	0800e3b4 	.word	0x0800e3b4
 8004758:	0800e364 	.word	0x0800e364
 800475c:	0800e3ec 	.word	0x0800e3ec
 8004760:	0800e408 	.word	0x0800e408
 8004764:	0800e3d4 	.word	0x0800e3d4

08004768 <acc_service_configuration_valid>:
 8004768:	b508      	push	{r3, lr}
 800476a:	b118      	cbz	r0, 8004774 <acc_service_configuration_valid+0xc>
 800476c:	4b09      	ldr	r3, [pc, #36]	; (8004794 <acc_service_configuration_valid+0x2c>)
 800476e:	6802      	ldr	r2, [r0, #0]
 8004770:	429a      	cmp	r2, r3
 8004772:	d007      	beq.n	8004784 <acc_service_configuration_valid+0x1c>
 8004774:	4b08      	ldr	r3, [pc, #32]	; (8004798 <acc_service_configuration_valid+0x30>)
 8004776:	4a09      	ldr	r2, [pc, #36]	; (800479c <acc_service_configuration_valid+0x34>)
 8004778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800477a:	4909      	ldr	r1, [pc, #36]	; (80047a0 <acc_service_configuration_valid+0x38>)
 800477c:	2000      	movs	r0, #0
 800477e:	4798      	blx	r3
 8004780:	2000      	movs	r0, #0
 8004782:	bd08      	pop	{r3, pc}
 8004784:	8b03      	ldrh	r3, [r0, #24]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d0f4      	beq.n	8004774 <acc_service_configuration_valid+0xc>
 800478a:	6943      	ldr	r3, [r0, #20]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d0f1      	beq.n	8004774 <acc_service_configuration_valid+0xc>
 8004790:	2001      	movs	r0, #1
 8004792:	bd08      	pop	{r3, pc}
 8004794:	acc09dd7 	.word	0xacc09dd7
 8004798:	200004c0 	.word	0x200004c0
 800479c:	0800e34c 	.word	0x0800e34c
 80047a0:	0800e364 	.word	0x0800e364

080047a4 <acc_service_configuration_check>:
 80047a4:	b510      	push	{r4, lr}
 80047a6:	4604      	mov	r4, r0
 80047a8:	f7ff ffde 	bl	8004768 <acc_service_configuration_valid>
 80047ac:	b118      	cbz	r0, 80047b6 <acc_service_configuration_check+0x12>
 80047ae:	7963      	ldrb	r3, [r4, #5]
 80047b0:	3b01      	subs	r3, #1
 80047b2:	2b04      	cmp	r3, #4
 80047b4:	d800      	bhi.n	80047b8 <acc_service_configuration_check+0x14>
 80047b6:	bd10      	pop	{r4, pc}
 80047b8:	4b03      	ldr	r3, [pc, #12]	; (80047c8 <acc_service_configuration_check+0x24>)
 80047ba:	4a04      	ldr	r2, [pc, #16]	; (80047cc <acc_service_configuration_check+0x28>)
 80047bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047be:	4904      	ldr	r1, [pc, #16]	; (80047d0 <acc_service_configuration_check+0x2c>)
 80047c0:	2000      	movs	r0, #0
 80047c2:	4798      	blx	r3
 80047c4:	2000      	movs	r0, #0
 80047c6:	bd10      	pop	{r4, pc}
 80047c8:	200004c0 	.word	0x200004c0
 80047cc:	0800e420 	.word	0x0800e420
 80047d0:	0800e364 	.word	0x0800e364

080047d4 <acc_service_profile_set>:
 80047d4:	b510      	push	{r4, lr}
 80047d6:	b138      	cbz	r0, 80047e8 <acc_service_profile_set+0x14>
 80047d8:	6882      	ldr	r2, [r0, #8]
 80047da:	4604      	mov	r4, r0
 80047dc:	b122      	cbz	r2, 80047e8 <acc_service_profile_set+0x14>
 80047de:	7141      	strb	r1, [r0, #5]
 80047e0:	4790      	blx	r2
 80047e2:	7b23      	ldrb	r3, [r4, #12]
 80047e4:	b963      	cbnz	r3, 8004800 <acc_service_profile_set+0x2c>
 80047e6:	bd10      	pop	{r4, pc}
 80047e8:	f000 ffa2 	bl	8005730 <acc_rss_integration_log_level>
 80047ec:	2800      	cmp	r0, #0
 80047ee:	d0fa      	beq.n	80047e6 <acc_service_profile_set+0x12>
 80047f0:	4b06      	ldr	r3, [pc, #24]	; (800480c <acc_service_profile_set+0x38>)
 80047f2:	4a07      	ldr	r2, [pc, #28]	; (8004810 <acc_service_profile_set+0x3c>)
 80047f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047f6:	4907      	ldr	r1, [pc, #28]	; (8004814 <acc_service_profile_set+0x40>)
 80047f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047fc:	2001      	movs	r0, #1
 80047fe:	4718      	bx	r3
 8004800:	4620      	mov	r0, r4
 8004802:	2101      	movs	r1, #1
 8004804:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004808:	f7ff be42 	b.w	8004490 <set_maximize_signal_attenuation>
 800480c:	200004c0 	.word	0x200004c0
 8004810:	0800e34c 	.word	0x0800e34c
 8004814:	0800e364 	.word	0x0800e364

08004818 <acc_service_maximize_signal_attenuation_set>:
 8004818:	b110      	cbz	r0, 8004820 <acc_service_maximize_signal_attenuation_set+0x8>
 800481a:	7301      	strb	r1, [r0, #12]
 800481c:	f7ff be38 	b.w	8004490 <set_maximize_signal_attenuation>
 8004820:	b510      	push	{r4, lr}
 8004822:	f000 ff85 	bl	8005730 <acc_rss_integration_log_level>
 8004826:	b138      	cbz	r0, 8004838 <acc_service_maximize_signal_attenuation_set+0x20>
 8004828:	4b04      	ldr	r3, [pc, #16]	; (800483c <acc_service_maximize_signal_attenuation_set+0x24>)
 800482a:	4a05      	ldr	r2, [pc, #20]	; (8004840 <acc_service_maximize_signal_attenuation_set+0x28>)
 800482c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800482e:	4905      	ldr	r1, [pc, #20]	; (8004844 <acc_service_maximize_signal_attenuation_set+0x2c>)
 8004830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004834:	2001      	movs	r0, #1
 8004836:	4718      	bx	r3
 8004838:	bd10      	pop	{r4, pc}
 800483a:	bf00      	nop
 800483c:	200004c0 	.word	0x200004c0
 8004840:	0800e34c 	.word	0x0800e34c
 8004844:	0800e364 	.word	0x0800e364

08004848 <acc_service_initialize_service_configuration>:
 8004848:	b538      	push	{r3, r4, r5, lr}
 800484a:	7101      	strb	r1, [r0, #4]
 800484c:	6102      	str	r2, [r0, #16]
 800484e:	9905      	ldr	r1, [sp, #20]
 8004850:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8004854:	4d07      	ldr	r5, [pc, #28]	; (8004874 <acc_service_initialize_service_configuration+0x2c>)
 8004856:	6143      	str	r3, [r0, #20]
 8004858:	4604      	mov	r4, r0
 800485a:	6005      	str	r5, [r0, #0]
 800485c:	6081      	str	r1, [r0, #8]
 800485e:	8302      	strh	r2, [r0, #24]
 8004860:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8004864:	f7ff ffb6 	bl	80047d4 <acc_service_profile_set>
 8004868:	4620      	mov	r0, r4
 800486a:	2100      	movs	r1, #0
 800486c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004870:	f7ff bfd2 	b.w	8004818 <acc_service_maximize_signal_attenuation_set>
 8004874:	acc09dd7 	.word	0xacc09dd7

08004878 <envelope_send_data>:
 8004878:	b570      	push	{r4, r5, r6, lr}
 800487a:	460b      	mov	r3, r1
 800487c:	b084      	sub	sp, #16
 800487e:	ac02      	add	r4, sp, #8
 8004880:	4601      	mov	r1, r0
 8004882:	4610      	mov	r0, r2
 8004884:	795a      	ldrb	r2, [r3, #5]
 8004886:	9400      	str	r4, [sp, #0]
 8004888:	791e      	ldrb	r6, [r3, #4]
 800488a:	79dd      	ldrb	r5, [r3, #7]
 800488c:	799c      	ldrb	r4, [r3, #6]
 800488e:	f88d 200d 	strb.w	r2, [sp, #13]
 8004892:	f88d 2008 	strb.w	r2, [sp, #8]
 8004896:	691a      	ldr	r2, [r3, #16]
 8004898:	f88d 600e 	strb.w	r6, [sp, #14]
 800489c:	ab03      	add	r3, sp, #12
 800489e:	f88d 500f 	strb.w	r5, [sp, #15]
 80048a2:	f88d 400c 	strb.w	r4, [sp, #12]
 80048a6:	f7ff fe37 	bl	8004518 <acc_service_send_data>
 80048aa:	b004      	add	sp, #16
 80048ac:	bd70      	pop	{r4, r5, r6, pc}
 80048ae:	bf00      	nop

080048b0 <envelope_create_service>:
 80048b0:	b570      	push	{r4, r5, r6, lr}
 80048b2:	b0a4      	sub	sp, #144	; 0x90
 80048b4:	2288      	movs	r2, #136	; 0x88
 80048b6:	4604      	mov	r4, r0
 80048b8:	a802      	add	r0, sp, #8
 80048ba:	460d      	mov	r5, r1
 80048bc:	f008 fb6a 	bl	800cf94 <memcpy>
 80048c0:	a809      	add	r0, sp, #36	; 0x24
 80048c2:	f000 fcc7 	bl	8005254 <acc_base_configuration_downsampling_factor_get>
 80048c6:	ee07 0a90 	vmov	s15, r0
 80048ca:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80048ce:	eddd 7a23 	vldr	s15, [sp, #140]	; 0x8c
 80048d2:	a809      	add	r0, sp, #36	; 0x24
 80048d4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80048d8:	f000 fbb6 	bl	8005048 <acc_base_configuration_demodulation_filter_cutoff_freq_ratio_set>
 80048dc:	a802      	add	r0, sp, #8
 80048de:	f7ff ff61 	bl	80047a4 <acc_service_configuration_check>
 80048e2:	b1c0      	cbz	r0, 8004916 <envelope_create_service+0x66>
 80048e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80048e6:	2b04      	cmp	r3, #4
 80048e8:	d00f      	beq.n	800490a <envelope_create_service+0x5a>
 80048ea:	a809      	add	r0, sp, #36	; 0x24
 80048ec:	f000 fdbc 	bl	8005468 <acc_base_configuration_check>
 80048f0:	b188      	cbz	r0, 8004916 <envelope_create_service+0x66>
 80048f2:	a809      	add	r0, sp, #36	; 0x24
 80048f4:	f000 fcae 	bl	8005254 <acc_base_configuration_downsampling_factor_get>
 80048f8:	1e43      	subs	r3, r0, #1
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d90d      	bls.n	800491c <envelope_create_service+0x6c>
 8004900:	2804      	cmp	r0, #4
 8004902:	d00b      	beq.n	800491c <envelope_create_service+0x6c>
 8004904:	4b1a      	ldr	r3, [pc, #104]	; (8004970 <envelope_create_service+0xc0>)
 8004906:	4a1b      	ldr	r2, [pc, #108]	; (8004974 <envelope_create_service+0xc4>)
 8004908:	e001      	b.n	800490e <envelope_create_service+0x5e>
 800490a:	4b19      	ldr	r3, [pc, #100]	; (8004970 <envelope_create_service+0xc0>)
 800490c:	4a1a      	ldr	r2, [pc, #104]	; (8004978 <envelope_create_service+0xc8>)
 800490e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004910:	491a      	ldr	r1, [pc, #104]	; (800497c <envelope_create_service+0xcc>)
 8004912:	2000      	movs	r0, #0
 8004914:	4798      	blx	r3
 8004916:	2000      	movs	r0, #0
 8004918:	b024      	add	sp, #144	; 0x90
 800491a:	bd70      	pop	{r4, r5, r6, pc}
 800491c:	2200      	movs	r2, #0
 800491e:	4611      	mov	r1, r2
 8004920:	a809      	add	r0, sp, #36	; 0x24
 8004922:	f000 fd05 	bl	8005330 <acc_base_configuration_cca_get>
 8004926:	2100      	movs	r1, #0
 8004928:	4606      	mov	r6, r0
 800492a:	a809      	add	r0, sp, #36	; 0x24
 800492c:	f000 fb52 	bl	8004fd4 <acc_base_configuration_time_domain_low_pass_filter_alpha_get>
 8004930:	b106      	cbz	r6, 8004934 <envelope_create_service+0x84>
 8004932:	b990      	cbnz	r0, 800495a <envelope_create_service+0xaa>
 8004934:	792b      	ldrb	r3, [r5, #4]
 8004936:	7223      	strb	r3, [r4, #8]
 8004938:	4b11      	ldr	r3, [pc, #68]	; (8004980 <envelope_create_service+0xd0>)
 800493a:	9301      	str	r3, [sp, #4]
 800493c:	aa09      	add	r2, sp, #36	; 0x24
 800493e:	4623      	mov	r3, r4
 8004940:	a901      	add	r1, sp, #4
 8004942:	f104 0018 	add.w	r0, r4, #24
 8004946:	f000 ff25 	bl	8005794 <acc_pipeline_envelope_assemble>
 800494a:	4b0e      	ldr	r3, [pc, #56]	; (8004984 <envelope_create_service+0xd4>)
 800494c:	6120      	str	r0, [r4, #16]
 800494e:	3800      	subs	r0, #0
 8004950:	bf18      	it	ne
 8004952:	2001      	movne	r0, #1
 8004954:	60e3      	str	r3, [r4, #12]
 8004956:	b024      	add	sp, #144	; 0x90
 8004958:	bd70      	pop	{r4, r5, r6, pc}
 800495a:	f000 fee9 	bl	8005730 <acc_rss_integration_log_level>
 800495e:	2800      	cmp	r0, #0
 8004960:	d0e8      	beq.n	8004934 <envelope_create_service+0x84>
 8004962:	4b03      	ldr	r3, [pc, #12]	; (8004970 <envelope_create_service+0xc0>)
 8004964:	4a08      	ldr	r2, [pc, #32]	; (8004988 <envelope_create_service+0xd8>)
 8004966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004968:	4904      	ldr	r1, [pc, #16]	; (800497c <envelope_create_service+0xcc>)
 800496a:	2001      	movs	r0, #1
 800496c:	4798      	blx	r3
 800496e:	e7e1      	b.n	8004934 <envelope_create_service+0x84>
 8004970:	200004c0 	.word	0x200004c0
 8004974:	0800e488 	.word	0x0800e488
 8004978:	0800e438 	.word	0x0800e438
 800497c:	0800e474 	.word	0x0800e474
 8004980:	08004879 	.word	0x08004879
 8004984:	08004505 	.word	0x08004505
 8004988:	0800e4a8 	.word	0x0800e4a8

0800498c <get_and_validate_envelope_configuration>:
 800498c:	b510      	push	{r4, lr}
 800498e:	4604      	mov	r4, r0
 8004990:	f7ff feea 	bl	8004768 <acc_service_configuration_valid>
 8004994:	b108      	cbz	r0, 800499a <get_and_validate_envelope_configuration+0xe>
 8004996:	7923      	ldrb	r3, [r4, #4]
 8004998:	b153      	cbz	r3, 80049b0 <get_and_validate_envelope_configuration+0x24>
 800499a:	f000 fec9 	bl	8005730 <acc_rss_integration_log_level>
 800499e:	b130      	cbz	r0, 80049ae <get_and_validate_envelope_configuration+0x22>
 80049a0:	4b04      	ldr	r3, [pc, #16]	; (80049b4 <get_and_validate_envelope_configuration+0x28>)
 80049a2:	4a05      	ldr	r2, [pc, #20]	; (80049b8 <get_and_validate_envelope_configuration+0x2c>)
 80049a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049a6:	4905      	ldr	r1, [pc, #20]	; (80049bc <get_and_validate_envelope_configuration+0x30>)
 80049a8:	2001      	movs	r0, #1
 80049aa:	4798      	blx	r3
 80049ac:	2000      	movs	r0, #0
 80049ae:	bd10      	pop	{r4, pc}
 80049b0:	4620      	mov	r0, r4
 80049b2:	bd10      	pop	{r4, pc}
 80049b4:	200004c0 	.word	0x200004c0
 80049b8:	0800e34c 	.word	0x0800e34c
 80049bc:	0800e474 	.word	0x0800e474

080049c0 <set_configuration_for_profile>:
 80049c0:	b530      	push	{r4, r5, lr}
 80049c2:	b083      	sub	sp, #12
 80049c4:	460c      	mov	r4, r1
 80049c6:	f7ff ffe1 	bl	800498c <get_and_validate_envelope_configuration>
 80049ca:	b1c0      	cbz	r0, 80049fe <set_configuration_for_profile+0x3e>
 80049cc:	1e61      	subs	r1, r4, #1
 80049ce:	4605      	mov	r5, r0
 80049d0:	301c      	adds	r0, #28
 80049d2:	2904      	cmp	r1, #4
 80049d4:	d813      	bhi.n	80049fe <set_configuration_for_profile+0x3e>
 80049d6:	e8df f001 	tbb	[pc, r1]
 80049da:	2514      	.short	0x2514
 80049dc:	3836      	.short	0x3836
 80049de:	03          	.byte	0x03
 80049df:	00          	.byte	0x00
 80049e0:	2110      	movs	r1, #16
 80049e2:	9001      	str	r0, [sp, #4]
 80049e4:	f000 fba0 	bl	8005128 <acc_base_configuration_wg_duration_set>
 80049e8:	9801      	ldr	r0, [sp, #4]
 80049ea:	2106      	movs	r1, #6
 80049ec:	f000 fb88 	bl	8005100 <acc_base_configuration_integrator_set>
 80049f0:	9801      	ldr	r0, [sp, #4]
 80049f2:	2101      	movs	r1, #1
 80049f4:	f000 fbac 	bl	8005150 <acc_base_configuration_integrator_ramp_up_set>
 80049f8:	4b15      	ldr	r3, [pc, #84]	; (8004a50 <set_configuration_for_profile+0x90>)
 80049fa:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
 80049fe:	b003      	add	sp, #12
 8004a00:	bd30      	pop	{r4, r5, pc}
 8004a02:	2100      	movs	r1, #0
 8004a04:	9001      	str	r0, [sp, #4]
 8004a06:	f000 fb8f 	bl	8005128 <acc_base_configuration_wg_duration_set>
 8004a0a:	9801      	ldr	r0, [sp, #4]
 8004a0c:	2100      	movs	r1, #0
 8004a0e:	f000 fb77 	bl	8005100 <acc_base_configuration_integrator_set>
 8004a12:	9801      	ldr	r0, [sp, #4]
 8004a14:	2103      	movs	r1, #3
 8004a16:	f000 fb9b 	bl	8005150 <acc_base_configuration_integrator_ramp_up_set>
 8004a1a:	4b0e      	ldr	r3, [pc, #56]	; (8004a54 <set_configuration_for_profile+0x94>)
 8004a1c:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
 8004a20:	b003      	add	sp, #12
 8004a22:	bd30      	pop	{r4, r5, pc}
 8004a24:	2107      	movs	r1, #7
 8004a26:	9001      	str	r0, [sp, #4]
 8004a28:	f000 fb7e 	bl	8005128 <acc_base_configuration_wg_duration_set>
 8004a2c:	9801      	ldr	r0, [sp, #4]
 8004a2e:	2106      	movs	r1, #6
 8004a30:	f000 fb66 	bl	8005100 <acc_base_configuration_integrator_set>
 8004a34:	9801      	ldr	r0, [sp, #4]
 8004a36:	2109      	movs	r1, #9
 8004a38:	f000 fb8a 	bl	8005150 <acc_base_configuration_integrator_ramp_up_set>
 8004a3c:	4b04      	ldr	r3, [pc, #16]	; (8004a50 <set_configuration_for_profile+0x90>)
 8004a3e:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
 8004a42:	b003      	add	sp, #12
 8004a44:	bd30      	pop	{r4, r5, pc}
 8004a46:	2109      	movs	r1, #9
 8004a48:	e7ed      	b.n	8004a26 <set_configuration_for_profile+0x66>
 8004a4a:	210c      	movs	r1, #12
 8004a4c:	e7c9      	b.n	80049e2 <set_configuration_for_profile+0x22>
 8004a4e:	bf00      	nop
 8004a50:	3b843809 	.word	0x3b843809
 8004a54:	3c8461fa 	.word	0x3c8461fa

08004a58 <acc_service_envelope_configuration_create>:
 8004a58:	b570      	push	{r4, r5, r6, lr}
 8004a5a:	4a3e      	ldr	r2, [pc, #248]	; (8004b54 <acc_service_envelope_configuration_create+0xfc>)
 8004a5c:	b084      	sub	sp, #16
 8004a5e:	236d      	movs	r3, #109	; 0x6d
 8004a60:	2188      	movs	r1, #136	; 0x88
 8004a62:	2001      	movs	r0, #1
 8004a64:	f000 fe34 	bl	80056d0 <acc_rss_integration_mem_calloc_debug>
 8004a68:	4605      	mov	r5, r0
 8004a6a:	2800      	cmp	r0, #0
 8004a6c:	d06f      	beq.n	8004b4e <acc_service_envelope_configuration_create+0xf6>
 8004a6e:	493a      	ldr	r1, [pc, #232]	; (8004b58 <acc_service_envelope_configuration_create+0x100>)
 8004a70:	f100 041c 	add.w	r4, r0, #28
 8004a74:	2602      	movs	r6, #2
 8004a76:	2358      	movs	r3, #88	; 0x58
 8004a78:	4622      	mov	r2, r4
 8004a7a:	e9cd 3100 	strd	r3, r1, [sp]
 8004a7e:	9602      	str	r6, [sp, #8]
 8004a80:	4b36      	ldr	r3, [pc, #216]	; (8004b5c <acc_service_envelope_configuration_create+0x104>)
 8004a82:	2100      	movs	r1, #0
 8004a84:	f7ff fee0 	bl	8004848 <acc_service_initialize_service_configuration>
 8004a88:	ed9f 0a35 	vldr	s0, [pc, #212]	; 8004b60 <acc_service_envelope_configuration_create+0x108>
 8004a8c:	4620      	mov	r0, r4
 8004a8e:	f000 fa01 	bl	8004e94 <acc_base_configuration_requested_start_set>
 8004a92:	ed9f 0a34 	vldr	s0, [pc, #208]	; 8004b64 <acc_service_envelope_configuration_create+0x10c>
 8004a96:	4620      	mov	r0, r4
 8004a98:	f000 fa18 	bl	8004ecc <acc_base_configuration_requested_length_set>
 8004a9c:	4620      	mov	r0, r4
 8004a9e:	2106      	movs	r1, #6
 8004aa0:	f000 fc68 	bl	8005374 <acc_base_configuration_mur_set>
 8004aa4:	4620      	mov	r0, r4
 8004aa6:	210a      	movs	r1, #10
 8004aa8:	f000 fa68 	bl	8004f7c <acc_base_configuration_hw_accelerated_average_samples_set>
 8004aac:	2101      	movs	r1, #1
 8004aae:	4620      	mov	r0, r4
 8004ab0:	f000 f9da 	bl	8004e68 <acc_base_configuration_sensor_set>
 8004ab4:	4620      	mov	r0, r4
 8004ab6:	f000 fa17 	bl	8004ee8 <acc_base_configuration_repetition_mode_on_demand_set>
 8004aba:	4631      	mov	r1, r6
 8004abc:	4620      	mov	r0, r4
 8004abe:	f000 fa23 	bl	8004f08 <acc_base_configuration_power_save_mode_set>
 8004ac2:	4620      	mov	r0, r4
 8004ac4:	2100      	movs	r1, #0
 8004ac6:	f000 fb6b 	bl	80051a0 <acc_base_configuration_use_point_range_set>
 8004aca:	4620      	mov	r0, r4
 8004acc:	2100      	movs	r1, #0
 8004ace:	f000 fb53 	bl	8005178 <acc_base_configuration_sweep_type_debug_set>
 8004ad2:	4620      	mov	r0, r4
 8004ad4:	2100      	movs	r1, #0
 8004ad6:	f000 fa29 	bl	8004f2c <acc_base_configuration_tx_disable_set>
 8004ada:	4620      	mov	r0, r4
 8004adc:	2100      	movs	r1, #0
 8004ade:	f000 fa39 	bl	8004f54 <acc_base_configuration_decrease_tx_emission_set>
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	4611      	mov	r1, r2
 8004ae6:	2340      	movs	r3, #64	; 0x40
 8004ae8:	4620      	mov	r0, r4
 8004aea:	f000 fc33 	bl	8005354 <acc_base_configuration_cca_set>
 8004aee:	4620      	mov	r0, r4
 8004af0:	21ff      	movs	r1, #255	; 0xff
 8004af2:	f000 fb73 	bl	80051dc <acc_base_configuration_staggered_vga_stabilization_time_set>
 8004af6:	4620      	mov	r0, r4
 8004af8:	2100      	movs	r1, #0
 8004afa:	f000 fb65 	bl	80051c8 <acc_base_configuration_use_fast_dll_refresh_routine_set>
 8004afe:	4620      	mov	r0, r4
 8004b00:	2101      	movs	r1, #1
 8004b02:	f000 fbb1 	bl	8005268 <acc_base_configuration_downsampling_factor_set>
 8004b06:	4620      	mov	r0, r4
 8004b08:	210b      	movs	r1, #11
 8004b0a:	f000 fae7 	bl	80050dc <acc_base_configuration_gain_set>
 8004b0e:	2101      	movs	r1, #1
 8004b10:	4620      	mov	r0, r4
 8004b12:	f000 fbbd 	bl	8005290 <acc_base_configuration_noise_level_normalization_set>
 8004b16:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8004b68 <acc_service_envelope_configuration_create+0x110>
 8004b1a:	4620      	mov	r0, r4
 8004b1c:	f000 fa4c 	bl	8004fb8 <acc_base_configuration_phase_compensation_alpha_set>
 8004b20:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8004b6c <acc_service_envelope_configuration_create+0x114>
 8004b24:	4620      	mov	r0, r4
 8004b26:	2101      	movs	r1, #1
 8004b28:	f000 fa60 	bl	8004fec <acc_base_configuration_time_domain_low_pass_filter_alpha_set>
 8004b2c:	4620      	mov	r0, r4
 8004b2e:	2101      	movs	r1, #1
 8004b30:	f000 fa74 	bl	800501c <acc_base_configuration_filter_demodulated_data_set>
 8004b34:	4620      	mov	r0, r4
 8004b36:	2101      	movs	r1, #1
 8004b38:	f000 fbc8 	bl	80052cc <acc_base_configuration_asynchronous_measurement_set>
 8004b3c:	4620      	mov	r0, r4
 8004b3e:	f44f 5196 	mov.w	r1, #4800	; 0x12c0
 8004b42:	f000 fbd7 	bl	80052f4 <acc_base_configuration_min_pipeline_memory_size_set>
 8004b46:	490a      	ldr	r1, [pc, #40]	; (8004b70 <acc_service_envelope_configuration_create+0x118>)
 8004b48:	4620      	mov	r0, r4
 8004b4a:	f000 fa1f 	bl	8004f8c <acc_base_configuration_radar_engine_creation_set>
 8004b4e:	4628      	mov	r0, r5
 8004b50:	b004      	add	sp, #16
 8004b52:	bd70      	pop	{r4, r5, r6, pc}
 8004b54:	0800e474 	.word	0x0800e474
 8004b58:	080049c1 	.word	0x080049c1
 8004b5c:	080048b1 	.word	0x080048b1
 8004b60:	3e4ccccd 	.word	0x3e4ccccd
 8004b64:	3ecccccd 	.word	0x3ecccccd
 8004b68:	3dcccccd 	.word	0x3dcccccd
 8004b6c:	3e99999a 	.word	0x3e99999a
 8004b70:	0800656d 	.word	0x0800656d

08004b74 <acc_service_envelope_configuration_destroy>:
 8004b74:	b130      	cbz	r0, 8004b84 <acc_service_envelope_configuration_destroy+0x10>
 8004b76:	b510      	push	{r4, lr}
 8004b78:	4604      	mov	r4, r0
 8004b7a:	6800      	ldr	r0, [r0, #0]
 8004b7c:	f7ff fdf4 	bl	8004768 <acc_service_configuration_valid>
 8004b80:	b908      	cbnz	r0, 8004b86 <acc_service_envelope_configuration_destroy+0x12>
 8004b82:	bd10      	pop	{r4, pc}
 8004b84:	4770      	bx	lr
 8004b86:	6820      	ldr	r0, [r4, #0]
 8004b88:	f7ff ff00 	bl	800498c <get_and_validate_envelope_configuration>
 8004b8c:	f000 fdbe 	bl	800570c <acc_rss_integration_mem_free>
 8004b90:	2300      	movs	r3, #0
 8004b92:	6023      	str	r3, [r4, #0]
 8004b94:	bd10      	pop	{r4, pc}
 8004b96:	bf00      	nop

08004b98 <acc_service_envelope_get_metadata>:
 8004b98:	b1e0      	cbz	r0, 8004bd4 <acc_service_envelope_get_metadata+0x3c>
 8004b9a:	7a03      	ldrb	r3, [r0, #8]
 8004b9c:	b9d3      	cbnz	r3, 8004bd4 <acc_service_envelope_get_metadata+0x3c>
 8004b9e:	b1c9      	cbz	r1, 8004bd4 <acc_service_envelope_get_metadata+0x3c>
 8004ba0:	6903      	ldr	r3, [r0, #16]
 8004ba2:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8004bd8 <acc_service_envelope_get_metadata+0x40>
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	edd3 7a08 	vldr	s15, [r3, #32]
 8004bac:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004bae:	8d58      	ldrh	r0, [r3, #42]	; 0x2a
 8004bb0:	b430      	push	{r4, r5}
 8004bb2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004bb6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004bba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004bbe:	695d      	ldr	r5, [r3, #20]
 8004bc0:	699c      	ldr	r4, [r3, #24]
 8004bc2:	604c      	str	r4, [r1, #4]
 8004bc4:	1e53      	subs	r3, r2, #1
 8004bc6:	600d      	str	r5, [r1, #0]
 8004bc8:	edc1 7a03 	vstr	s15, [r1, #12]
 8004bcc:	bc30      	pop	{r4, r5}
 8004bce:	814b      	strh	r3, [r1, #10]
 8004bd0:	8108      	strh	r0, [r1, #8]
 8004bd2:	4770      	bx	lr
 8004bd4:	4770      	bx	lr
 8004bd6:	bf00      	nop
 8004bd8:	4d8ef3c2 	.word	0x4d8ef3c2

08004bdc <acc_service_envelope_get_next>:
 8004bdc:	b530      	push	{r4, r5, lr}
 8004bde:	b08b      	sub	sp, #44	; 0x2c
 8004be0:	0052      	lsls	r2, r2, #1
 8004be2:	9101      	str	r1, [sp, #4]
 8004be4:	2400      	movs	r4, #0
 8004be6:	9206      	str	r2, [sp, #24]
 8004be8:	9307      	str	r3, [sp, #28]
 8004bea:	2204      	movs	r2, #4
 8004bec:	2301      	movs	r3, #1
 8004bee:	9104      	str	r1, [sp, #16]
 8004bf0:	ad01      	add	r5, sp, #4
 8004bf2:	a903      	add	r1, sp, #12
 8004bf4:	f88d 400c 	strb.w	r4, [sp, #12]
 8004bf8:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
 8004bfc:	9505      	str	r5, [sp, #20]
 8004bfe:	9208      	str	r2, [sp, #32]
 8004c00:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
 8004c04:	f7ff fd44 	bl	8004690 <acc_service_get_next>
 8004c08:	b00b      	add	sp, #44	; 0x2c
 8004c0a:	bd30      	pop	{r4, r5, pc}

08004c0c <destroy_handle>:
 8004c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c10:	4e15      	ldr	r6, [pc, #84]	; (8004c68 <destroy_handle+0x5c>)
 8004c12:	4605      	mov	r5, r0
 8004c14:	6874      	ldr	r4, [r6, #4]
 8004c16:	f000 fd8b 	bl	8005730 <acc_rss_integration_log_level>
 8004c1a:	2803      	cmp	r0, #3
 8004c1c:	d906      	bls.n	8004c2c <destroy_handle+0x20>
 8004c1e:	4a13      	ldr	r2, [pc, #76]	; (8004c6c <destroy_handle+0x60>)
 8004c20:	686b      	ldr	r3, [r5, #4]
 8004c22:	6b57      	ldr	r7, [r2, #52]	; 0x34
 8004c24:	4912      	ldr	r1, [pc, #72]	; (8004c70 <destroy_handle+0x64>)
 8004c26:	4a13      	ldr	r2, [pc, #76]	; (8004c74 <destroy_handle+0x68>)
 8004c28:	2004      	movs	r0, #4
 8004c2a:	47b8      	blx	r7
 8004c2c:	b144      	cbz	r4, 8004c40 <destroy_handle+0x34>
 8004c2e:	42ac      	cmp	r4, r5
 8004c30:	d102      	bne.n	8004c38 <destroy_handle+0x2c>
 8004c32:	e016      	b.n	8004c62 <destroy_handle+0x56>
 8004c34:	42a5      	cmp	r5, r4
 8004c36:	d00d      	beq.n	8004c54 <destroy_handle+0x48>
 8004c38:	4623      	mov	r3, r4
 8004c3a:	6d64      	ldr	r4, [r4, #84]	; 0x54
 8004c3c:	2c00      	cmp	r4, #0
 8004c3e:	d1f9      	bne.n	8004c34 <destroy_handle+0x28>
 8004c40:	4a0a      	ldr	r2, [pc, #40]	; (8004c6c <destroy_handle+0x60>)
 8004c42:	686b      	ldr	r3, [r5, #4]
 8004c44:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8004c46:	490a      	ldr	r1, [pc, #40]	; (8004c70 <destroy_handle+0x64>)
 8004c48:	4a0b      	ldr	r2, [pc, #44]	; (8004c78 <destroy_handle+0x6c>)
 8004c4a:	46a4      	mov	ip, r4
 8004c4c:	2000      	movs	r0, #0
 8004c4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c52:	4760      	bx	ip
 8004c54:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 8004c56:	655a      	str	r2, [r3, #84]	; 0x54
 8004c58:	4628      	mov	r0, r5
 8004c5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c5e:	f000 bd55 	b.w	800570c <acc_rss_integration_mem_free>
 8004c62:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8004c64:	6073      	str	r3, [r6, #4]
 8004c66:	e7f7      	b.n	8004c58 <destroy_handle+0x4c>
 8004c68:	20000354 	.word	0x20000354
 8004c6c:	200004c0 	.word	0x200004c0
 8004c70:	0800e514 	.word	0x0800e514
 8004c74:	0800e4f0 	.word	0x0800e4f0
 8004c78:	0800e524 	.word	0x0800e524

08004c7c <acc_service_manager_activate>:
 8004c7c:	b510      	push	{r4, lr}
 8004c7e:	4c05      	ldr	r4, [pc, #20]	; (8004c94 <acc_service_manager_activate+0x18>)
 8004c80:	7820      	ldrb	r0, [r4, #0]
 8004c82:	b100      	cbz	r0, 8004c86 <acc_service_manager_activate+0xa>
 8004c84:	bd10      	pop	{r4, pc}
 8004c86:	2001      	movs	r0, #1
 8004c88:	7020      	strb	r0, [r4, #0]
 8004c8a:	f7ff fc63 	bl	8004554 <acc_service_set_module_active>
 8004c8e:	7820      	ldrb	r0, [r4, #0]
 8004c90:	bd10      	pop	{r4, pc}
 8004c92:	bf00      	nop
 8004c94:	20000354 	.word	0x20000354

08004c98 <acc_service_create>:
 8004c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c9c:	4e30      	ldr	r6, [pc, #192]	; (8004d60 <acc_service_create+0xc8>)
 8004c9e:	7834      	ldrb	r4, [r6, #0]
 8004ca0:	2c00      	cmp	r4, #0
 8004ca2:	d041      	beq.n	8004d28 <acc_service_create+0x90>
 8004ca4:	4605      	mov	r5, r0
 8004ca6:	f7ff fd5f 	bl	8004768 <acc_service_configuration_valid>
 8004caa:	b1a0      	cbz	r0, 8004cd6 <acc_service_create+0x3e>
 8004cac:	692b      	ldr	r3, [r5, #16]
 8004cae:	68df      	ldr	r7, [r3, #12]
 8004cb0:	1e7b      	subs	r3, r7, #1
 8004cb2:	2b29      	cmp	r3, #41	; 0x29
 8004cb4:	d84a      	bhi.n	8004d4c <acc_service_create+0xb4>
 8004cb6:	7873      	ldrb	r3, [r6, #1]
 8004cb8:	b98b      	cbnz	r3, 8004cde <acc_service_create+0x46>
 8004cba:	6873      	ldr	r3, [r6, #4]
 8004cbc:	b913      	cbnz	r3, 8004cc4 <acc_service_create+0x2c>
 8004cbe:	e00e      	b.n	8004cde <acc_service_create+0x46>
 8004cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cc2:	b163      	cbz	r3, 8004cde <acc_service_create+0x46>
 8004cc4:	685a      	ldr	r2, [r3, #4]
 8004cc6:	4297      	cmp	r7, r2
 8004cc8:	d1fa      	bne.n	8004cc0 <acc_service_create+0x28>
 8004cca:	4b26      	ldr	r3, [pc, #152]	; (8004d64 <acc_service_create+0xcc>)
 8004ccc:	4a26      	ldr	r2, [pc, #152]	; (8004d68 <acc_service_create+0xd0>)
 8004cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cd0:	4926      	ldr	r1, [pc, #152]	; (8004d6c <acc_service_create+0xd4>)
 8004cd2:	2000      	movs	r0, #0
 8004cd4:	4798      	blx	r3
 8004cd6:	2400      	movs	r4, #0
 8004cd8:	4620      	mov	r0, r4
 8004cda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cde:	8b2c      	ldrh	r4, [r5, #24]
 8004ce0:	f000 fd26 	bl	8005730 <acc_rss_integration_log_level>
 8004ce4:	2803      	cmp	r0, #3
 8004ce6:	d907      	bls.n	8004cf8 <acc_service_create+0x60>
 8004ce8:	4b1e      	ldr	r3, [pc, #120]	; (8004d64 <acc_service_create+0xcc>)
 8004cea:	4a21      	ldr	r2, [pc, #132]	; (8004d70 <acc_service_create+0xd8>)
 8004cec:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 8004cf0:	491e      	ldr	r1, [pc, #120]	; (8004d6c <acc_service_create+0xd4>)
 8004cf2:	463b      	mov	r3, r7
 8004cf4:	2004      	movs	r0, #4
 8004cf6:	47c0      	blx	r8
 8004cf8:	4621      	mov	r1, r4
 8004cfa:	4a1c      	ldr	r2, [pc, #112]	; (8004d6c <acc_service_create+0xd4>)
 8004cfc:	23bd      	movs	r3, #189	; 0xbd
 8004cfe:	2001      	movs	r0, #1
 8004d00:	f000 fce6 	bl	80056d0 <acc_rss_integration_mem_calloc_debug>
 8004d04:	4604      	mov	r4, r0
 8004d06:	2800      	cmp	r0, #0
 8004d08:	d0e5      	beq.n	8004cd6 <acc_service_create+0x3e>
 8004d0a:	6873      	ldr	r3, [r6, #4]
 8004d0c:	4a19      	ldr	r2, [pc, #100]	; (8004d74 <acc_service_create+0xdc>)
 8004d0e:	6047      	str	r7, [r0, #4]
 8004d10:	6002      	str	r2, [r0, #0]
 8004d12:	6543      	str	r3, [r0, #84]	; 0x54
 8004d14:	6070      	str	r0, [r6, #4]
 8004d16:	696b      	ldr	r3, [r5, #20]
 8004d18:	4629      	mov	r1, r5
 8004d1a:	4798      	blx	r3
 8004d1c:	b168      	cbz	r0, 8004d3a <acc_service_create+0xa2>
 8004d1e:	2301      	movs	r3, #1
 8004d20:	7263      	strb	r3, [r4, #9]
 8004d22:	4620      	mov	r0, r4
 8004d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d28:	4b0e      	ldr	r3, [pc, #56]	; (8004d64 <acc_service_create+0xcc>)
 8004d2a:	4a13      	ldr	r2, [pc, #76]	; (8004d78 <acc_service_create+0xe0>)
 8004d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d2e:	490f      	ldr	r1, [pc, #60]	; (8004d6c <acc_service_create+0xd4>)
 8004d30:	4620      	mov	r0, r4
 8004d32:	4798      	blx	r3
 8004d34:	4620      	mov	r0, r4
 8004d36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d3a:	68e3      	ldr	r3, [r4, #12]
 8004d3c:	b10b      	cbz	r3, 8004d42 <acc_service_create+0xaa>
 8004d3e:	4620      	mov	r0, r4
 8004d40:	4798      	blx	r3
 8004d42:	4620      	mov	r0, r4
 8004d44:	f7ff ff62 	bl	8004c0c <destroy_handle>
 8004d48:	2400      	movs	r4, #0
 8004d4a:	e7c5      	b.n	8004cd8 <acc_service_create+0x40>
 8004d4c:	4b05      	ldr	r3, [pc, #20]	; (8004d64 <acc_service_create+0xcc>)
 8004d4e:	4a0b      	ldr	r2, [pc, #44]	; (8004d7c <acc_service_create+0xe4>)
 8004d50:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8004d52:	4906      	ldr	r1, [pc, #24]	; (8004d6c <acc_service_create+0xd4>)
 8004d54:	232a      	movs	r3, #42	; 0x2a
 8004d56:	2000      	movs	r0, #0
 8004d58:	47a0      	blx	r4
 8004d5a:	2400      	movs	r4, #0
 8004d5c:	e7bc      	b.n	8004cd8 <acc_service_create+0x40>
 8004d5e:	bf00      	nop
 8004d60:	20000354 	.word	0x20000354
 8004d64:	200004c0 	.word	0x200004c0
 8004d68:	0800e5b8 	.word	0x0800e5b8
 8004d6c:	0800e514 	.word	0x0800e514
 8004d70:	0800e584 	.word	0x0800e584
 8004d74:	acc09ee8 	.word	0xacc09ee8
 8004d78:	0800e5a4 	.word	0x0800e5a4
 8004d7c:	0800e558 	.word	0x0800e558

08004d80 <acc_service_destroy>:
 8004d80:	4b11      	ldr	r3, [pc, #68]	; (8004dc8 <acc_service_destroy+0x48>)
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	b510      	push	{r4, lr}
 8004d86:	b133      	cbz	r3, 8004d96 <acc_service_destroy+0x16>
 8004d88:	4604      	mov	r4, r0
 8004d8a:	b118      	cbz	r0, 8004d94 <acc_service_destroy+0x14>
 8004d8c:	6800      	ldr	r0, [r0, #0]
 8004d8e:	f7ff fbe7 	bl	8004560 <acc_service_handle_valid>
 8004d92:	b960      	cbnz	r0, 8004dae <acc_service_destroy+0x2e>
 8004d94:	bd10      	pop	{r4, pc}
 8004d96:	f000 fccb 	bl	8005730 <acc_rss_integration_log_level>
 8004d9a:	2800      	cmp	r0, #0
 8004d9c:	d0fa      	beq.n	8004d94 <acc_service_destroy+0x14>
 8004d9e:	4b0b      	ldr	r3, [pc, #44]	; (8004dcc <acc_service_destroy+0x4c>)
 8004da0:	4a0b      	ldr	r2, [pc, #44]	; (8004dd0 <acc_service_destroy+0x50>)
 8004da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004da4:	490b      	ldr	r1, [pc, #44]	; (8004dd4 <acc_service_destroy+0x54>)
 8004da6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004daa:	2001      	movs	r0, #1
 8004dac:	4718      	bx	r3
 8004dae:	6820      	ldr	r0, [r4, #0]
 8004db0:	f7ff fc30 	bl	8004614 <acc_service_deactivate>
 8004db4:	6820      	ldr	r0, [r4, #0]
 8004db6:	68c3      	ldr	r3, [r0, #12]
 8004db8:	b10b      	cbz	r3, 8004dbe <acc_service_destroy+0x3e>
 8004dba:	4798      	blx	r3
 8004dbc:	6820      	ldr	r0, [r4, #0]
 8004dbe:	f7ff ff25 	bl	8004c0c <destroy_handle>
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	6023      	str	r3, [r4, #0]
 8004dc6:	bd10      	pop	{r4, pc}
 8004dc8:	20000354 	.word	0x20000354
 8004dcc:	200004c0 	.word	0x200004c0
 8004dd0:	0800e5a4 	.word	0x0800e5a4
 8004dd4:	0800e514 	.word	0x0800e514

08004dd8 <acc_service_manager_deactivate>:
 8004dd8:	b538      	push	{r3, r4, r5, lr}
 8004dda:	4c0e      	ldr	r4, [pc, #56]	; (8004e14 <acc_service_manager_deactivate+0x3c>)
 8004ddc:	7823      	ldrb	r3, [r4, #0]
 8004dde:	b1bb      	cbz	r3, 8004e10 <acc_service_manager_deactivate+0x38>
 8004de0:	6863      	ldr	r3, [r4, #4]
 8004de2:	b17b      	cbz	r3, 8004e04 <acc_service_manager_deactivate+0x2c>
 8004de4:	1d25      	adds	r5, r4, #4
 8004de6:	4628      	mov	r0, r5
 8004de8:	f7ff ffca 	bl	8004d80 <acc_service_destroy>
 8004dec:	6863      	ldr	r3, [r4, #4]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d1f9      	bne.n	8004de6 <acc_service_manager_deactivate+0xe>
 8004df2:	f000 fc9d 	bl	8005730 <acc_rss_integration_log_level>
 8004df6:	b128      	cbz	r0, 8004e04 <acc_service_manager_deactivate+0x2c>
 8004df8:	4b07      	ldr	r3, [pc, #28]	; (8004e18 <acc_service_manager_deactivate+0x40>)
 8004dfa:	4a08      	ldr	r2, [pc, #32]	; (8004e1c <acc_service_manager_deactivate+0x44>)
 8004dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dfe:	4908      	ldr	r1, [pc, #32]	; (8004e20 <acc_service_manager_deactivate+0x48>)
 8004e00:	2001      	movs	r0, #1
 8004e02:	4798      	blx	r3
 8004e04:	2000      	movs	r0, #0
 8004e06:	7020      	strb	r0, [r4, #0]
 8004e08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e0c:	f7ff bba2 	b.w	8004554 <acc_service_set_module_active>
 8004e10:	bd38      	pop	{r3, r4, r5, pc}
 8004e12:	bf00      	nop
 8004e14:	20000354 	.word	0x20000354
 8004e18:	200004c0 	.word	0x200004c0
 8004e1c:	0800e5e0 	.word	0x0800e5e0
 8004e20:	0800e514 	.word	0x0800e514

08004e24 <acc_version_get>:
 8004e24:	4800      	ldr	r0, [pc, #0]	; (8004e28 <acc_version_get+0x4>)
 8004e26:	4770      	bx	lr
 8004e28:	0800e1e8 	.word	0x0800e1e8

08004e2c <configuration_is_valid>:
 8004e2c:	b108      	cbz	r0, 8004e32 <configuration_is_valid+0x6>
 8004e2e:	2001      	movs	r0, #1
 8004e30:	4770      	bx	lr
 8004e32:	b510      	push	{r4, lr}
 8004e34:	4604      	mov	r4, r0
 8004e36:	f000 fc7b 	bl	8005730 <acc_rss_integration_log_level>
 8004e3a:	b130      	cbz	r0, 8004e4a <configuration_is_valid+0x1e>
 8004e3c:	4b03      	ldr	r3, [pc, #12]	; (8004e4c <configuration_is_valid+0x20>)
 8004e3e:	4a04      	ldr	r2, [pc, #16]	; (8004e50 <configuration_is_valid+0x24>)
 8004e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e42:	4904      	ldr	r1, [pc, #16]	; (8004e54 <configuration_is_valid+0x28>)
 8004e44:	2001      	movs	r0, #1
 8004e46:	4798      	blx	r3
 8004e48:	4620      	mov	r0, r4
 8004e4a:	bd10      	pop	{r4, pc}
 8004e4c:	200004c0 	.word	0x200004c0
 8004e50:	0800e62c 	.word	0x0800e62c
 8004e54:	0800e648 	.word	0x0800e648

08004e58 <acc_base_configuration_sensor_get>:
 8004e58:	b510      	push	{r4, lr}
 8004e5a:	4604      	mov	r4, r0
 8004e5c:	f7ff ffe6 	bl	8004e2c <configuration_is_valid>
 8004e60:	b900      	cbnz	r0, 8004e64 <acc_base_configuration_sensor_get+0xc>
 8004e62:	bd10      	pop	{r4, pc}
 8004e64:	68e0      	ldr	r0, [r4, #12]
 8004e66:	bd10      	pop	{r4, pc}

08004e68 <acc_base_configuration_sensor_set>:
 8004e68:	b538      	push	{r3, r4, r5, lr}
 8004e6a:	460d      	mov	r5, r1
 8004e6c:	4604      	mov	r4, r0
 8004e6e:	f7ff ffdd 	bl	8004e2c <configuration_is_valid>
 8004e72:	b100      	cbz	r0, 8004e76 <acc_base_configuration_sensor_set+0xe>
 8004e74:	60e5      	str	r5, [r4, #12]
 8004e76:	bd38      	pop	{r3, r4, r5, pc}

08004e78 <acc_base_configuration_requested_start_get>:
 8004e78:	b510      	push	{r4, lr}
 8004e7a:	4604      	mov	r4, r0
 8004e7c:	f7ff ffd6 	bl	8004e2c <configuration_is_valid>
 8004e80:	b910      	cbnz	r0, 8004e88 <acc_base_configuration_requested_start_get+0x10>
 8004e82:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8004e90 <acc_base_configuration_requested_start_get+0x18>
 8004e86:	bd10      	pop	{r4, pc}
 8004e88:	ed94 0a09 	vldr	s0, [r4, #36]	; 0x24
 8004e8c:	bd10      	pop	{r4, pc}
 8004e8e:	bf00      	nop
 8004e90:	00000000 	.word	0x00000000

08004e94 <acc_base_configuration_requested_start_set>:
 8004e94:	b510      	push	{r4, lr}
 8004e96:	ed2d 8b02 	vpush	{d8}
 8004e9a:	4604      	mov	r4, r0
 8004e9c:	eeb0 8a40 	vmov.f32	s16, s0
 8004ea0:	f7ff ffc4 	bl	8004e2c <configuration_is_valid>
 8004ea4:	b108      	cbz	r0, 8004eaa <acc_base_configuration_requested_start_set+0x16>
 8004ea6:	ed84 8a09 	vstr	s16, [r4, #36]	; 0x24
 8004eaa:	ecbd 8b02 	vpop	{d8}
 8004eae:	bd10      	pop	{r4, pc}

08004eb0 <acc_base_configuration_requested_length_get>:
 8004eb0:	b510      	push	{r4, lr}
 8004eb2:	4604      	mov	r4, r0
 8004eb4:	f7ff ffba 	bl	8004e2c <configuration_is_valid>
 8004eb8:	b910      	cbnz	r0, 8004ec0 <acc_base_configuration_requested_length_get+0x10>
 8004eba:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8004ec8 <acc_base_configuration_requested_length_get+0x18>
 8004ebe:	bd10      	pop	{r4, pc}
 8004ec0:	ed94 0a0a 	vldr	s0, [r4, #40]	; 0x28
 8004ec4:	bd10      	pop	{r4, pc}
 8004ec6:	bf00      	nop
 8004ec8:	00000000 	.word	0x00000000

08004ecc <acc_base_configuration_requested_length_set>:
 8004ecc:	b510      	push	{r4, lr}
 8004ece:	ed2d 8b02 	vpush	{d8}
 8004ed2:	4604      	mov	r4, r0
 8004ed4:	eeb0 8a40 	vmov.f32	s16, s0
 8004ed8:	f7ff ffa8 	bl	8004e2c <configuration_is_valid>
 8004edc:	b108      	cbz	r0, 8004ee2 <acc_base_configuration_requested_length_set+0x16>
 8004ede:	ed84 8a0a 	vstr	s16, [r4, #40]	; 0x28
 8004ee2:	ecbd 8b02 	vpop	{d8}
 8004ee6:	bd10      	pop	{r4, pc}

08004ee8 <acc_base_configuration_repetition_mode_on_demand_set>:
 8004ee8:	b510      	push	{r4, lr}
 8004eea:	4604      	mov	r4, r0
 8004eec:	f7ff ff9e 	bl	8004e2c <configuration_is_valid>
 8004ef0:	b108      	cbz	r0, 8004ef6 <acc_base_configuration_repetition_mode_on_demand_set+0xe>
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	7123      	strb	r3, [r4, #4]
 8004ef6:	bd10      	pop	{r4, pc}

08004ef8 <acc_base_configuration_power_save_mode_get>:
 8004ef8:	b510      	push	{r4, lr}
 8004efa:	4604      	mov	r4, r0
 8004efc:	f7ff ff96 	bl	8004e2c <configuration_is_valid>
 8004f00:	b900      	cbnz	r0, 8004f04 <acc_base_configuration_power_save_mode_get+0xc>
 8004f02:	bd10      	pop	{r4, pc}
 8004f04:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004f06:	bd10      	pop	{r4, pc}

08004f08 <acc_base_configuration_power_save_mode_set>:
 8004f08:	b538      	push	{r3, r4, r5, lr}
 8004f0a:	460d      	mov	r5, r1
 8004f0c:	4604      	mov	r4, r0
 8004f0e:	f7ff ff8d 	bl	8004e2c <configuration_is_valid>
 8004f12:	b100      	cbz	r0, 8004f16 <acc_base_configuration_power_save_mode_set+0xe>
 8004f14:	63a5      	str	r5, [r4, #56]	; 0x38
 8004f16:	bd38      	pop	{r3, r4, r5, pc}

08004f18 <acc_base_configuration_tx_disable_get>:
 8004f18:	b510      	push	{r4, lr}
 8004f1a:	4604      	mov	r4, r0
 8004f1c:	f7ff ff86 	bl	8004e2c <configuration_is_valid>
 8004f20:	b900      	cbnz	r0, 8004f24 <acc_base_configuration_tx_disable_get+0xc>
 8004f22:	bd10      	pop	{r4, pc}
 8004f24:	f894 0047 	ldrb.w	r0, [r4, #71]	; 0x47
 8004f28:	bd10      	pop	{r4, pc}
 8004f2a:	bf00      	nop

08004f2c <acc_base_configuration_tx_disable_set>:
 8004f2c:	b538      	push	{r3, r4, r5, lr}
 8004f2e:	460d      	mov	r5, r1
 8004f30:	4604      	mov	r4, r0
 8004f32:	f7ff ff7b 	bl	8004e2c <configuration_is_valid>
 8004f36:	b108      	cbz	r0, 8004f3c <acc_base_configuration_tx_disable_set+0x10>
 8004f38:	f884 5047 	strb.w	r5, [r4, #71]	; 0x47
 8004f3c:	bd38      	pop	{r3, r4, r5, pc}
 8004f3e:	bf00      	nop

08004f40 <acc_base_configuration_decrease_tx_emission_get>:
 8004f40:	b510      	push	{r4, lr}
 8004f42:	4604      	mov	r4, r0
 8004f44:	f7ff ff72 	bl	8004e2c <configuration_is_valid>
 8004f48:	b900      	cbnz	r0, 8004f4c <acc_base_configuration_decrease_tx_emission_get+0xc>
 8004f4a:	bd10      	pop	{r4, pc}
 8004f4c:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 8004f50:	bd10      	pop	{r4, pc}
 8004f52:	bf00      	nop

08004f54 <acc_base_configuration_decrease_tx_emission_set>:
 8004f54:	b538      	push	{r3, r4, r5, lr}
 8004f56:	460d      	mov	r5, r1
 8004f58:	4604      	mov	r4, r0
 8004f5a:	f7ff ff67 	bl	8004e2c <configuration_is_valid>
 8004f5e:	b108      	cbz	r0, 8004f64 <acc_base_configuration_decrease_tx_emission_set+0x10>
 8004f60:	f884 5048 	strb.w	r5, [r4, #72]	; 0x48
 8004f64:	bd38      	pop	{r3, r4, r5, pc}
 8004f66:	bf00      	nop

08004f68 <acc_base_configuration_hw_accelerated_average_samples_get>:
 8004f68:	b510      	push	{r4, lr}
 8004f6a:	4604      	mov	r4, r0
 8004f6c:	f7ff ff5e 	bl	8004e2c <configuration_is_valid>
 8004f70:	b900      	cbnz	r0, 8004f74 <acc_base_configuration_hw_accelerated_average_samples_get+0xc>
 8004f72:	bd10      	pop	{r4, pc}
 8004f74:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
 8004f78:	bd10      	pop	{r4, pc}
 8004f7a:	bf00      	nop

08004f7c <acc_base_configuration_hw_accelerated_average_samples_set>:
 8004f7c:	b538      	push	{r3, r4, r5, lr}
 8004f7e:	460d      	mov	r5, r1
 8004f80:	4604      	mov	r4, r0
 8004f82:	f7ff ff53 	bl	8004e2c <configuration_is_valid>
 8004f86:	b100      	cbz	r0, 8004f8a <acc_base_configuration_hw_accelerated_average_samples_set+0xe>
 8004f88:	87a5      	strh	r5, [r4, #60]	; 0x3c
 8004f8a:	bd38      	pop	{r3, r4, r5, pc}

08004f8c <acc_base_configuration_radar_engine_creation_set>:
 8004f8c:	b538      	push	{r3, r4, r5, lr}
 8004f8e:	460d      	mov	r5, r1
 8004f90:	4604      	mov	r4, r0
 8004f92:	f7ff ff4b 	bl	8004e2c <configuration_is_valid>
 8004f96:	b100      	cbz	r0, 8004f9a <acc_base_configuration_radar_engine_creation_set+0xe>
 8004f98:	6025      	str	r5, [r4, #0]
 8004f9a:	bd38      	pop	{r3, r4, r5, pc}

08004f9c <acc_base_configuration_phase_compensation_alpha_get>:
 8004f9c:	b510      	push	{r4, lr}
 8004f9e:	4604      	mov	r4, r0
 8004fa0:	f7ff ff44 	bl	8004e2c <configuration_is_valid>
 8004fa4:	b910      	cbnz	r0, 8004fac <acc_base_configuration_phase_compensation_alpha_get+0x10>
 8004fa6:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8004fb4 <acc_base_configuration_phase_compensation_alpha_get+0x18>
 8004faa:	bd10      	pop	{r4, pc}
 8004fac:	ed94 0a04 	vldr	s0, [r4, #16]
 8004fb0:	bd10      	pop	{r4, pc}
 8004fb2:	bf00      	nop
 8004fb4:	00000000 	.word	0x00000000

08004fb8 <acc_base_configuration_phase_compensation_alpha_set>:
 8004fb8:	b510      	push	{r4, lr}
 8004fba:	ed2d 8b02 	vpush	{d8}
 8004fbe:	4604      	mov	r4, r0
 8004fc0:	eeb0 8a40 	vmov.f32	s16, s0
 8004fc4:	f7ff ff32 	bl	8004e2c <configuration_is_valid>
 8004fc8:	b108      	cbz	r0, 8004fce <acc_base_configuration_phase_compensation_alpha_set+0x16>
 8004fca:	ed84 8a04 	vstr	s16, [r4, #16]
 8004fce:	ecbd 8b02 	vpop	{d8}
 8004fd2:	bd10      	pop	{r4, pc}

08004fd4 <acc_base_configuration_time_domain_low_pass_filter_alpha_get>:
 8004fd4:	b538      	push	{r3, r4, r5, lr}
 8004fd6:	460d      	mov	r5, r1
 8004fd8:	4604      	mov	r4, r0
 8004fda:	f7ff ff27 	bl	8004e2c <configuration_is_valid>
 8004fde:	b900      	cbnz	r0, 8004fe2 <acc_base_configuration_time_domain_low_pass_filter_alpha_get+0xe>
 8004fe0:	bd38      	pop	{r3, r4, r5, pc}
 8004fe2:	b10d      	cbz	r5, 8004fe8 <acc_base_configuration_time_domain_low_pass_filter_alpha_get+0x14>
 8004fe4:	6963      	ldr	r3, [r4, #20]
 8004fe6:	602b      	str	r3, [r5, #0]
 8004fe8:	7e20      	ldrb	r0, [r4, #24]
 8004fea:	bd38      	pop	{r3, r4, r5, pc}

08004fec <acc_base_configuration_time_domain_low_pass_filter_alpha_set>:
 8004fec:	b538      	push	{r3, r4, r5, lr}
 8004fee:	ed2d 8b02 	vpush	{d8}
 8004ff2:	460d      	mov	r5, r1
 8004ff4:	eeb0 8a40 	vmov.f32	s16, s0
 8004ff8:	4604      	mov	r4, r0
 8004ffa:	f7ff ff17 	bl	8004e2c <configuration_is_valid>
 8004ffe:	b110      	cbz	r0, 8005006 <acc_base_configuration_time_domain_low_pass_filter_alpha_set+0x1a>
 8005000:	ed84 8a05 	vstr	s16, [r4, #20]
 8005004:	7625      	strb	r5, [r4, #24]
 8005006:	ecbd 8b02 	vpop	{d8}
 800500a:	bd38      	pop	{r3, r4, r5, pc}

0800500c <acc_base_configuration_filter_demodulated_data_get>:
 800500c:	b510      	push	{r4, lr}
 800500e:	4604      	mov	r4, r0
 8005010:	f7ff ff0c 	bl	8004e2c <configuration_is_valid>
 8005014:	b900      	cbnz	r0, 8005018 <acc_base_configuration_filter_demodulated_data_get+0xc>
 8005016:	bd10      	pop	{r4, pc}
 8005018:	7f20      	ldrb	r0, [r4, #28]
 800501a:	bd10      	pop	{r4, pc}

0800501c <acc_base_configuration_filter_demodulated_data_set>:
 800501c:	b538      	push	{r3, r4, r5, lr}
 800501e:	460d      	mov	r5, r1
 8005020:	4604      	mov	r4, r0
 8005022:	f7ff ff03 	bl	8004e2c <configuration_is_valid>
 8005026:	b100      	cbz	r0, 800502a <acc_base_configuration_filter_demodulated_data_set+0xe>
 8005028:	7725      	strb	r5, [r4, #28]
 800502a:	bd38      	pop	{r3, r4, r5, pc}

0800502c <acc_base_configuration_demodulation_filter_cutoff_freq_ratio_get>:
 800502c:	b510      	push	{r4, lr}
 800502e:	4604      	mov	r4, r0
 8005030:	f7ff fefc 	bl	8004e2c <configuration_is_valid>
 8005034:	b910      	cbnz	r0, 800503c <acc_base_configuration_demodulation_filter_cutoff_freq_ratio_get+0x10>
 8005036:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8005044 <acc_base_configuration_demodulation_filter_cutoff_freq_ratio_get+0x18>
 800503a:	bd10      	pop	{r4, pc}
 800503c:	ed94 0a08 	vldr	s0, [r4, #32]
 8005040:	bd10      	pop	{r4, pc}
 8005042:	bf00      	nop
 8005044:	00000000 	.word	0x00000000

08005048 <acc_base_configuration_demodulation_filter_cutoff_freq_ratio_set>:
 8005048:	b510      	push	{r4, lr}
 800504a:	ed2d 8b02 	vpush	{d8}
 800504e:	4604      	mov	r4, r0
 8005050:	eeb0 8a40 	vmov.f32	s16, s0
 8005054:	f7ff feea 	bl	8004e2c <configuration_is_valid>
 8005058:	b108      	cbz	r0, 800505e <acc_base_configuration_demodulation_filter_cutoff_freq_ratio_set+0x16>
 800505a:	ed84 8a08 	vstr	s16, [r4, #32]
 800505e:	ecbd 8b02 	vpop	{d8}
 8005062:	bd10      	pop	{r4, pc}

08005064 <acc_base_configuration_point_start_get>:
 8005064:	b510      	push	{r4, lr}
 8005066:	4604      	mov	r4, r0
 8005068:	f7ff fee0 	bl	8004e2c <configuration_is_valid>
 800506c:	b900      	cbnz	r0, 8005070 <acc_base_configuration_point_start_get+0xc>
 800506e:	bd10      	pop	{r4, pc}
 8005070:	f9b4 0034 	ldrsh.w	r0, [r4, #52]	; 0x34
 8005074:	bd10      	pop	{r4, pc}
 8005076:	bf00      	nop

08005078 <acc_base_configuration_point_length_get>:
 8005078:	b510      	push	{r4, lr}
 800507a:	4604      	mov	r4, r0
 800507c:	f7ff fed6 	bl	8004e2c <configuration_is_valid>
 8005080:	b900      	cbnz	r0, 8005084 <acc_base_configuration_point_length_get+0xc>
 8005082:	bd10      	pop	{r4, pc}
 8005084:	f9b4 0036 	ldrsh.w	r0, [r4, #54]	; 0x36
 8005088:	bd10      	pop	{r4, pc}
 800508a:	bf00      	nop

0800508c <acc_base_configuration_repetition_mode_get>:
 800508c:	b510      	push	{r4, lr}
 800508e:	4604      	mov	r4, r0
 8005090:	f7ff fecc 	bl	8004e2c <configuration_is_valid>
 8005094:	b900      	cbnz	r0, 8005098 <acc_base_configuration_repetition_mode_get+0xc>
 8005096:	bd10      	pop	{r4, pc}
 8005098:	7920      	ldrb	r0, [r4, #4]
 800509a:	bd10      	pop	{r4, pc}

0800509c <acc_base_configuration_update_rate_get>:
 800509c:	b510      	push	{r4, lr}
 800509e:	4604      	mov	r4, r0
 80050a0:	f7ff fec4 	bl	8004e2c <configuration_is_valid>
 80050a4:	b158      	cbz	r0, 80050be <acc_base_configuration_update_rate_get+0x22>
 80050a6:	7923      	ldrb	r3, [r4, #4]
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d005      	beq.n	80050b8 <acc_base_configuration_update_rate_get+0x1c>
 80050ac:	d802      	bhi.n	80050b4 <acc_base_configuration_update_rate_get+0x18>
 80050ae:	ed9f 0a05 	vldr	s0, [pc, #20]	; 80050c4 <acc_base_configuration_update_rate_get+0x28>
 80050b2:	bd10      	pop	{r4, pc}
 80050b4:	2b03      	cmp	r3, #3
 80050b6:	d102      	bne.n	80050be <acc_base_configuration_update_rate_get+0x22>
 80050b8:	ed94 0a02 	vldr	s0, [r4, #8]
 80050bc:	bd10      	pop	{r4, pc}
 80050be:	ed9f 0a02 	vldr	s0, [pc, #8]	; 80050c8 <acc_base_configuration_update_rate_get+0x2c>
 80050c2:	bd10      	pop	{r4, pc}
 80050c4:	7f800000 	.word	0x7f800000
 80050c8:	7fc00000 	.word	0x7fc00000

080050cc <acc_base_configuration_gain_get>:
 80050cc:	b510      	push	{r4, lr}
 80050ce:	4604      	mov	r4, r0
 80050d0:	f7ff feac 	bl	8004e2c <configuration_is_valid>
 80050d4:	b900      	cbnz	r0, 80050d8 <acc_base_configuration_gain_get+0xc>
 80050d6:	bd10      	pop	{r4, pc}
 80050d8:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
 80050da:	bd10      	pop	{r4, pc}

080050dc <acc_base_configuration_gain_set>:
 80050dc:	b538      	push	{r3, r4, r5, lr}
 80050de:	460d      	mov	r5, r1
 80050e0:	4604      	mov	r4, r0
 80050e2:	f7ff fea3 	bl	8004e2c <configuration_is_valid>
 80050e6:	b100      	cbz	r0, 80050ea <acc_base_configuration_gain_set+0xe>
 80050e8:	87e5      	strh	r5, [r4, #62]	; 0x3e
 80050ea:	bd38      	pop	{r3, r4, r5, pc}

080050ec <acc_base_configuration_integrator_get>:
 80050ec:	b510      	push	{r4, lr}
 80050ee:	4604      	mov	r4, r0
 80050f0:	f7ff fe9c 	bl	8004e2c <configuration_is_valid>
 80050f4:	b900      	cbnz	r0, 80050f8 <acc_base_configuration_integrator_get+0xc>
 80050f6:	bd10      	pop	{r4, pc}
 80050f8:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
 80050fc:	bd10      	pop	{r4, pc}
 80050fe:	bf00      	nop

08005100 <acc_base_configuration_integrator_set>:
 8005100:	b538      	push	{r3, r4, r5, lr}
 8005102:	460d      	mov	r5, r1
 8005104:	4604      	mov	r4, r0
 8005106:	f7ff fe91 	bl	8004e2c <configuration_is_valid>
 800510a:	b108      	cbz	r0, 8005110 <acc_base_configuration_integrator_set+0x10>
 800510c:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
 8005110:	bd38      	pop	{r3, r4, r5, pc}
 8005112:	bf00      	nop

08005114 <acc_base_configuration_wg_duration_get>:
 8005114:	b510      	push	{r4, lr}
 8005116:	4604      	mov	r4, r0
 8005118:	f7ff fe88 	bl	8004e2c <configuration_is_valid>
 800511c:	b900      	cbnz	r0, 8005120 <acc_base_configuration_wg_duration_get+0xc>
 800511e:	bd10      	pop	{r4, pc}
 8005120:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
 8005124:	bd10      	pop	{r4, pc}
 8005126:	bf00      	nop

08005128 <acc_base_configuration_wg_duration_set>:
 8005128:	b538      	push	{r3, r4, r5, lr}
 800512a:	460d      	mov	r5, r1
 800512c:	4604      	mov	r4, r0
 800512e:	f7ff fe7d 	bl	8004e2c <configuration_is_valid>
 8005132:	b108      	cbz	r0, 8005138 <acc_base_configuration_wg_duration_set+0x10>
 8005134:	f8a4 5042 	strh.w	r5, [r4, #66]	; 0x42
 8005138:	bd38      	pop	{r3, r4, r5, pc}
 800513a:	bf00      	nop

0800513c <acc_base_configuration_integrator_ramp_up_get>:
 800513c:	b510      	push	{r4, lr}
 800513e:	4604      	mov	r4, r0
 8005140:	f7ff fe74 	bl	8004e2c <configuration_is_valid>
 8005144:	b900      	cbnz	r0, 8005148 <acc_base_configuration_integrator_ramp_up_get+0xc>
 8005146:	bd10      	pop	{r4, pc}
 8005148:	f8b4 0044 	ldrh.w	r0, [r4, #68]	; 0x44
 800514c:	bd10      	pop	{r4, pc}
 800514e:	bf00      	nop

08005150 <acc_base_configuration_integrator_ramp_up_set>:
 8005150:	b538      	push	{r3, r4, r5, lr}
 8005152:	460d      	mov	r5, r1
 8005154:	4604      	mov	r4, r0
 8005156:	f7ff fe69 	bl	8004e2c <configuration_is_valid>
 800515a:	b108      	cbz	r0, 8005160 <acc_base_configuration_integrator_ramp_up_set+0x10>
 800515c:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
 8005160:	bd38      	pop	{r3, r4, r5, pc}
 8005162:	bf00      	nop

08005164 <acc_base_configuration_sampling_mode_get>:
 8005164:	b510      	push	{r4, lr}
 8005166:	4604      	mov	r4, r0
 8005168:	f7ff fe60 	bl	8004e2c <configuration_is_valid>
 800516c:	b900      	cbnz	r0, 8005170 <acc_base_configuration_sampling_mode_get+0xc>
 800516e:	bd10      	pop	{r4, pc}
 8005170:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
 8005174:	bd10      	pop	{r4, pc}
 8005176:	bf00      	nop

08005178 <acc_base_configuration_sweep_type_debug_set>:
 8005178:	b538      	push	{r3, r4, r5, lr}
 800517a:	460d      	mov	r5, r1
 800517c:	4604      	mov	r4, r0
 800517e:	f7ff fe55 	bl	8004e2c <configuration_is_valid>
 8005182:	b108      	cbz	r0, 8005188 <acc_base_configuration_sweep_type_debug_set+0x10>
 8005184:	f884 5046 	strb.w	r5, [r4, #70]	; 0x46
 8005188:	bd38      	pop	{r3, r4, r5, pc}
 800518a:	bf00      	nop

0800518c <acc_base_configuration_sweep_type_debug_get>:
 800518c:	b510      	push	{r4, lr}
 800518e:	4604      	mov	r4, r0
 8005190:	f7ff fe4c 	bl	8004e2c <configuration_is_valid>
 8005194:	b900      	cbnz	r0, 8005198 <acc_base_configuration_sweep_type_debug_get+0xc>
 8005196:	bd10      	pop	{r4, pc}
 8005198:	f894 0046 	ldrb.w	r0, [r4, #70]	; 0x46
 800519c:	bd10      	pop	{r4, pc}
 800519e:	bf00      	nop

080051a0 <acc_base_configuration_use_point_range_set>:
 80051a0:	b538      	push	{r3, r4, r5, lr}
 80051a2:	460d      	mov	r5, r1
 80051a4:	4604      	mov	r4, r0
 80051a6:	f7ff fe41 	bl	8004e2c <configuration_is_valid>
 80051aa:	b108      	cbz	r0, 80051b0 <acc_base_configuration_use_point_range_set+0x10>
 80051ac:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
 80051b0:	bd38      	pop	{r3, r4, r5, pc}
 80051b2:	bf00      	nop

080051b4 <acc_base_configuration_use_point_range_get>:
 80051b4:	b510      	push	{r4, lr}
 80051b6:	4604      	mov	r4, r0
 80051b8:	f7ff fe38 	bl	8004e2c <configuration_is_valid>
 80051bc:	b900      	cbnz	r0, 80051c0 <acc_base_configuration_use_point_range_get+0xc>
 80051be:	bd10      	pop	{r4, pc}
 80051c0:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 80051c4:	bd10      	pop	{r4, pc}
 80051c6:	bf00      	nop

080051c8 <acc_base_configuration_use_fast_dll_refresh_routine_set>:
 80051c8:	b538      	push	{r3, r4, r5, lr}
 80051ca:	460d      	mov	r5, r1
 80051cc:	4604      	mov	r4, r0
 80051ce:	f7ff fe2d 	bl	8004e2c <configuration_is_valid>
 80051d2:	b108      	cbz	r0, 80051d8 <acc_base_configuration_use_fast_dll_refresh_routine_set+0x10>
 80051d4:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 80051d8:	bd38      	pop	{r3, r4, r5, pc}
 80051da:	bf00      	nop

080051dc <acc_base_configuration_staggered_vga_stabilization_time_set>:
 80051dc:	b538      	push	{r3, r4, r5, lr}
 80051de:	460d      	mov	r5, r1
 80051e0:	4604      	mov	r4, r0
 80051e2:	f7ff fe23 	bl	8004e2c <configuration_is_valid>
 80051e6:	b108      	cbz	r0, 80051ec <acc_base_configuration_staggered_vga_stabilization_time_set+0x10>
 80051e8:	f8a4 5056 	strh.w	r5, [r4, #86]	; 0x56
 80051ec:	bd38      	pop	{r3, r4, r5, pc}
 80051ee:	bf00      	nop

080051f0 <acc_base_configuration_bba_reset_clocksync_perturbation_get>:
 80051f0:	b510      	push	{r4, lr}
 80051f2:	4604      	mov	r4, r0
 80051f4:	f7ff fe1a 	bl	8004e2c <configuration_is_valid>
 80051f8:	b900      	cbnz	r0, 80051fc <acc_base_configuration_bba_reset_clocksync_perturbation_get+0xc>
 80051fa:	bd10      	pop	{r4, pc}
 80051fc:	f894 0063 	ldrb.w	r0, [r4, #99]	; 0x63
 8005200:	bd10      	pop	{r4, pc}
 8005202:	bf00      	nop

08005204 <acc_base_configuration_bba_linear_resync_perturbation_get>:
 8005204:	b510      	push	{r4, lr}
 8005206:	4604      	mov	r4, r0
 8005208:	f7ff fe10 	bl	8004e2c <configuration_is_valid>
 800520c:	b900      	cbnz	r0, 8005210 <acc_base_configuration_bba_linear_resync_perturbation_get+0xc>
 800520e:	bd10      	pop	{r4, pc}
 8005210:	f894 0064 	ldrb.w	r0, [r4, #100]	; 0x64
 8005214:	bd10      	pop	{r4, pc}
 8005216:	bf00      	nop

08005218 <acc_base_configuration_bba_fast_refresh_disable_get>:
 8005218:	b510      	push	{r4, lr}
 800521a:	4604      	mov	r4, r0
 800521c:	f7ff fe06 	bl	8004e2c <configuration_is_valid>
 8005220:	b900      	cbnz	r0, 8005224 <acc_base_configuration_bba_fast_refresh_disable_get+0xc>
 8005222:	bd10      	pop	{r4, pc}
 8005224:	f894 0065 	ldrb.w	r0, [r4, #101]	; 0x65
 8005228:	bd10      	pop	{r4, pc}
 800522a:	bf00      	nop

0800522c <acc_base_configuration_ignore_range_limits_get>:
 800522c:	b510      	push	{r4, lr}
 800522e:	4604      	mov	r4, r0
 8005230:	f7ff fdfc 	bl	8004e2c <configuration_is_valid>
 8005234:	b900      	cbnz	r0, 8005238 <acc_base_configuration_ignore_range_limits_get+0xc>
 8005236:	bd10      	pop	{r4, pc}
 8005238:	f894 0066 	ldrb.w	r0, [r4, #102]	; 0x66
 800523c:	bd10      	pop	{r4, pc}
 800523e:	bf00      	nop

08005240 <acc_base_configuration_sparse_sweeps_per_frame_get>:
 8005240:	b510      	push	{r4, lr}
 8005242:	4604      	mov	r4, r0
 8005244:	f7ff fdf2 	bl	8004e2c <configuration_is_valid>
 8005248:	b900      	cbnz	r0, 800524c <acc_base_configuration_sparse_sweeps_per_frame_get+0xc>
 800524a:	bd10      	pop	{r4, pc}
 800524c:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 8005250:	bd10      	pop	{r4, pc}
 8005252:	bf00      	nop

08005254 <acc_base_configuration_downsampling_factor_get>:
 8005254:	b510      	push	{r4, lr}
 8005256:	4604      	mov	r4, r0
 8005258:	f7ff fde8 	bl	8004e2c <configuration_is_valid>
 800525c:	b900      	cbnz	r0, 8005260 <acc_base_configuration_downsampling_factor_get+0xc>
 800525e:	bd10      	pop	{r4, pc}
 8005260:	f8b4 0060 	ldrh.w	r0, [r4, #96]	; 0x60
 8005264:	bd10      	pop	{r4, pc}
 8005266:	bf00      	nop

08005268 <acc_base_configuration_downsampling_factor_set>:
 8005268:	b538      	push	{r3, r4, r5, lr}
 800526a:	460d      	mov	r5, r1
 800526c:	4604      	mov	r4, r0
 800526e:	f7ff fddd 	bl	8004e2c <configuration_is_valid>
 8005272:	b108      	cbz	r0, 8005278 <acc_base_configuration_downsampling_factor_set+0x10>
 8005274:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
 8005278:	bd38      	pop	{r3, r4, r5, pc}
 800527a:	bf00      	nop

0800527c <acc_base_configuration_noise_level_normalization_get>:
 800527c:	b510      	push	{r4, lr}
 800527e:	4604      	mov	r4, r0
 8005280:	f7ff fdd4 	bl	8004e2c <configuration_is_valid>
 8005284:	b900      	cbnz	r0, 8005288 <acc_base_configuration_noise_level_normalization_get+0xc>
 8005286:	bd10      	pop	{r4, pc}
 8005288:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
 800528c:	bd10      	pop	{r4, pc}
 800528e:	bf00      	nop

08005290 <acc_base_configuration_noise_level_normalization_set>:
 8005290:	b538      	push	{r3, r4, r5, lr}
 8005292:	460d      	mov	r5, r1
 8005294:	4604      	mov	r4, r0
 8005296:	f7ff fdc9 	bl	8004e2c <configuration_is_valid>
 800529a:	b108      	cbz	r0, 80052a0 <acc_base_configuration_noise_level_normalization_set+0x10>
 800529c:	f884 5049 	strb.w	r5, [r4, #73]	; 0x49
 80052a0:	bd38      	pop	{r3, r4, r5, pc}
 80052a2:	bf00      	nop

080052a4 <acc_base_configuration_noise_deviation_override_get>:
 80052a4:	b510      	push	{r4, lr}
 80052a6:	4604      	mov	r4, r0
 80052a8:	f7ff fdc0 	bl	8004e2c <configuration_is_valid>
 80052ac:	b900      	cbnz	r0, 80052b0 <acc_base_configuration_noise_deviation_override_get+0xc>
 80052ae:	bd10      	pop	{r4, pc}
 80052b0:	f8b4 004c 	ldrh.w	r0, [r4, #76]	; 0x4c
 80052b4:	bd10      	pop	{r4, pc}
 80052b6:	bf00      	nop

080052b8 <acc_base_configuration_asynchronous_measurement_get>:
 80052b8:	b510      	push	{r4, lr}
 80052ba:	4604      	mov	r4, r0
 80052bc:	f7ff fdb6 	bl	8004e2c <configuration_is_valid>
 80052c0:	b900      	cbnz	r0, 80052c4 <acc_base_configuration_asynchronous_measurement_get+0xc>
 80052c2:	bd10      	pop	{r4, pc}
 80052c4:	f894 004e 	ldrb.w	r0, [r4, #78]	; 0x4e
 80052c8:	bd10      	pop	{r4, pc}
 80052ca:	bf00      	nop

080052cc <acc_base_configuration_asynchronous_measurement_set>:
 80052cc:	b538      	push	{r3, r4, r5, lr}
 80052ce:	460d      	mov	r5, r1
 80052d0:	4604      	mov	r4, r0
 80052d2:	f7ff fdab 	bl	8004e2c <configuration_is_valid>
 80052d6:	b108      	cbz	r0, 80052dc <acc_base_configuration_asynchronous_measurement_set+0x10>
 80052d8:	f884 504e 	strb.w	r5, [r4, #78]	; 0x4e
 80052dc:	bd38      	pop	{r3, r4, r5, pc}
 80052de:	bf00      	nop

080052e0 <acc_base_configuration_min_pipeline_memory_size_get>:
 80052e0:	b510      	push	{r4, lr}
 80052e2:	4604      	mov	r4, r0
 80052e4:	f7ff fda2 	bl	8004e2c <configuration_is_valid>
 80052e8:	b900      	cbnz	r0, 80052ec <acc_base_configuration_min_pipeline_memory_size_get+0xc>
 80052ea:	bd10      	pop	{r4, pc}
 80052ec:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
 80052f0:	bd10      	pop	{r4, pc}
 80052f2:	bf00      	nop

080052f4 <acc_base_configuration_min_pipeline_memory_size_set>:
 80052f4:	b538      	push	{r3, r4, r5, lr}
 80052f6:	460d      	mov	r5, r1
 80052f8:	4604      	mov	r4, r0
 80052fa:	f7ff fd97 	bl	8004e2c <configuration_is_valid>
 80052fe:	b108      	cbz	r0, 8005304 <acc_base_configuration_min_pipeline_memory_size_set+0x10>
 8005300:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 8005304:	bd38      	pop	{r3, r4, r5, pc}
 8005306:	bf00      	nop

08005308 <acc_base_configuration_maximize_signal_attenuation_get>:
 8005308:	b510      	push	{r4, lr}
 800530a:	4604      	mov	r4, r0
 800530c:	f7ff fd8e 	bl	8004e2c <configuration_is_valid>
 8005310:	b900      	cbnz	r0, 8005314 <acc_base_configuration_maximize_signal_attenuation_get+0xc>
 8005312:	bd10      	pop	{r4, pc}
 8005314:	f894 004a 	ldrb.w	r0, [r4, #74]	; 0x4a
 8005318:	bd10      	pop	{r4, pc}
 800531a:	bf00      	nop

0800531c <acc_base_configuration_maximize_signal_attenuation_set>:
 800531c:	b538      	push	{r3, r4, r5, lr}
 800531e:	460d      	mov	r5, r1
 8005320:	4604      	mov	r4, r0
 8005322:	f7ff fd83 	bl	8004e2c <configuration_is_valid>
 8005326:	b108      	cbz	r0, 800532c <acc_base_configuration_maximize_signal_attenuation_set+0x10>
 8005328:	f884 504a 	strb.w	r5, [r4, #74]	; 0x4a
 800532c:	bd38      	pop	{r3, r4, r5, pc}
 800532e:	bf00      	nop

08005330 <acc_base_configuration_cca_get>:
 8005330:	b570      	push	{r4, r5, r6, lr}
 8005332:	460e      	mov	r6, r1
 8005334:	4615      	mov	r5, r2
 8005336:	4604      	mov	r4, r0
 8005338:	f7ff fd78 	bl	8004e2c <configuration_is_valid>
 800533c:	b148      	cbz	r0, 8005352 <acc_base_configuration_cca_get+0x22>
 800533e:	b116      	cbz	r6, 8005346 <acc_base_configuration_cca_get+0x16>
 8005340:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8005344:	7033      	strb	r3, [r6, #0]
 8005346:	b115      	cbz	r5, 800534e <acc_base_configuration_cca_get+0x1e>
 8005348:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800534c:	802b      	strh	r3, [r5, #0]
 800534e:	f894 004f 	ldrb.w	r0, [r4, #79]	; 0x4f
 8005352:	bd70      	pop	{r4, r5, r6, pc}

08005354 <acc_base_configuration_cca_set>:
 8005354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005356:	460f      	mov	r7, r1
 8005358:	4616      	mov	r6, r2
 800535a:	461d      	mov	r5, r3
 800535c:	4604      	mov	r4, r0
 800535e:	f7ff fd65 	bl	8004e2c <configuration_is_valid>
 8005362:	b128      	cbz	r0, 8005370 <acc_base_configuration_cca_set+0x1c>
 8005364:	f884 704f 	strb.w	r7, [r4, #79]	; 0x4f
 8005368:	f884 6050 	strb.w	r6, [r4, #80]	; 0x50
 800536c:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
 8005370:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005372:	bf00      	nop

08005374 <acc_base_configuration_mur_set>:
 8005374:	b538      	push	{r3, r4, r5, lr}
 8005376:	460d      	mov	r5, r1
 8005378:	4604      	mov	r4, r0
 800537a:	f7ff fd57 	bl	8004e2c <configuration_is_valid>
 800537e:	b108      	cbz	r0, 8005384 <acc_base_configuration_mur_set+0x10>
 8005380:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
 8005384:	bd38      	pop	{r3, r4, r5, pc}
 8005386:	bf00      	nop

08005388 <acc_base_configuration_sampling_mode_to_string>:
 8005388:	b130      	cbz	r0, 8005398 <acc_base_configuration_sampling_mode_to_string+0x10>
 800538a:	4b04      	ldr	r3, [pc, #16]	; (800539c <acc_base_configuration_sampling_mode_to_string+0x14>)
 800538c:	4a04      	ldr	r2, [pc, #16]	; (80053a0 <acc_base_configuration_sampling_mode_to_string+0x18>)
 800538e:	2801      	cmp	r0, #1
 8005390:	bf14      	ite	ne
 8005392:	4618      	movne	r0, r3
 8005394:	4610      	moveq	r0, r2
 8005396:	4770      	bx	lr
 8005398:	4802      	ldr	r0, [pc, #8]	; (80053a4 <acc_base_configuration_sampling_mode_to_string+0x1c>)
 800539a:	4770      	bx	lr
 800539c:	0800fb24 	.word	0x0800fb24
 80053a0:	0800e660 	.word	0x0800e660
 80053a4:	0800e65c 	.word	0x0800e65c

080053a8 <acc_base_configuration_print>:
 80053a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053ac:	b08f      	sub	sp, #60	; 0x3c
 80053ae:	4604      	mov	r4, r0
 80053b0:	f000 f9be 	bl	8005730 <acc_rss_integration_log_level>
 80053b4:	2801      	cmp	r0, #1
 80053b6:	d94a      	bls.n	800544e <acc_base_configuration_print+0xa6>
 80053b8:	4b26      	ldr	r3, [pc, #152]	; (8005454 <acc_base_configuration_print+0xac>)
 80053ba:	4620      	mov	r0, r4
 80053bc:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 80053c0:	f7ff fd4a 	bl	8004e58 <acc_base_configuration_sensor_get>
 80053c4:	4683      	mov	fp, r0
 80053c6:	4620      	mov	r0, r4
 80053c8:	f7ff fdce 	bl	8004f68 <acc_base_configuration_hw_accelerated_average_samples_get>
 80053cc:	4605      	mov	r5, r0
 80053ce:	4620      	mov	r0, r4
 80053d0:	f7ff fe7c 	bl	80050cc <acc_base_configuration_gain_get>
 80053d4:	4606      	mov	r6, r0
 80053d6:	4620      	mov	r0, r4
 80053d8:	f7ff fe88 	bl	80050ec <acc_base_configuration_integrator_get>
 80053dc:	4607      	mov	r7, r0
 80053de:	4620      	mov	r0, r4
 80053e0:	f7ff fe98 	bl	8005114 <acc_base_configuration_wg_duration_get>
 80053e4:	4680      	mov	r8, r0
 80053e6:	4620      	mov	r0, r4
 80053e8:	f7ff fea8 	bl	800513c <acc_base_configuration_integrator_ramp_up_get>
 80053ec:	4681      	mov	r9, r0
 80053ee:	4620      	mov	r0, r4
 80053f0:	f7ff fd82 	bl	8004ef8 <acc_base_configuration_power_save_mode_get>
 80053f4:	2804      	cmp	r0, #4
 80053f6:	bf96      	itet	ls
 80053f8:	4b17      	ldrls	r3, [pc, #92]	; (8005458 <acc_base_configuration_print+0xb0>)
 80053fa:	4918      	ldrhi	r1, [pc, #96]	; (800545c <acc_base_configuration_print+0xb4>)
 80053fc:	f853 1020 	ldrls.w	r1, [r3, r0, lsl #2]
 8005400:	910d      	str	r1, [sp, #52]	; 0x34
 8005402:	4620      	mov	r0, r4
 8005404:	f7ff feae 	bl	8005164 <acc_base_configuration_sampling_mode_get>
 8005408:	f7ff ffbe 	bl	8005388 <acc_base_configuration_sampling_mode_to_string>
 800540c:	4602      	mov	r2, r0
 800540e:	4620      	mov	r0, r4
 8005410:	920c      	str	r2, [sp, #48]	; 0x30
 8005412:	f7ff fd81 	bl	8004f18 <acc_base_configuration_tx_disable_get>
 8005416:	4603      	mov	r3, r0
 8005418:	4620      	mov	r0, r4
 800541a:	930b      	str	r3, [sp, #44]	; 0x2c
 800541c:	f7ff ff10 	bl	8005240 <acc_base_configuration_sparse_sweeps_per_frame_get>
 8005420:	4684      	mov	ip, r0
 8005422:	4620      	mov	r0, r4
 8005424:	4664      	mov	r4, ip
 8005426:	f7ff fd8b 	bl	8004f40 <acc_base_configuration_decrease_tx_emission_get>
 800542a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800542c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800542e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005430:	9206      	str	r2, [sp, #24]
 8005432:	e9cd 9104 	strd	r9, r1, [sp, #16]
 8005436:	9307      	str	r3, [sp, #28]
 8005438:	9009      	str	r0, [sp, #36]	; 0x24
 800543a:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800543e:	e9cd 5600 	strd	r5, r6, [sp]
 8005442:	4a07      	ldr	r2, [pc, #28]	; (8005460 <acc_base_configuration_print+0xb8>)
 8005444:	4907      	ldr	r1, [pc, #28]	; (8005464 <acc_base_configuration_print+0xbc>)
 8005446:	9408      	str	r4, [sp, #32]
 8005448:	465b      	mov	r3, fp
 800544a:	2002      	movs	r0, #2
 800544c:	47d0      	blx	sl
 800544e:	b00f      	add	sp, #60	; 0x3c
 8005450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005454:	200004c0 	.word	0x200004c0
 8005458:	0800e878 	.word	0x0800e878
 800545c:	0800fb24 	.word	0x0800fb24
 8005460:	0800e664 	.word	0x0800e664
 8005464:	0800e648 	.word	0x0800e648

08005468 <acc_base_configuration_check>:
 8005468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800546a:	4605      	mov	r5, r0
 800546c:	f7ff fcde 	bl	8004e2c <configuration_is_valid>
 8005470:	4604      	mov	r4, r0
 8005472:	b318      	cbz	r0, 80054bc <acc_base_configuration_check+0x54>
 8005474:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005476:	2b04      	cmp	r3, #4
 8005478:	d819      	bhi.n	80054ae <acc_base_configuration_check+0x46>
 800547a:	d02d      	beq.n	80054d8 <acc_base_configuration_check+0x70>
 800547c:	8feb      	ldrh	r3, [r5, #62]	; 0x3e
 800547e:	2b16      	cmp	r3, #22
 8005480:	d821      	bhi.n	80054c6 <acc_base_configuration_check+0x5e>
 8005482:	8fab      	ldrh	r3, [r5, #60]	; 0x3c
 8005484:	3b01      	subs	r3, #1
 8005486:	b29b      	uxth	r3, r3
 8005488:	2b3e      	cmp	r3, #62	; 0x3e
 800548a:	d819      	bhi.n	80054c0 <acc_base_configuration_check+0x58>
 800548c:	6bae      	ldr	r6, [r5, #56]	; 0x38
 800548e:	792b      	ldrb	r3, [r5, #4]
 8005490:	b9e6      	cbnz	r6, 80054cc <acc_base_configuration_check+0x64>
 8005492:	2b03      	cmp	r3, #3
 8005494:	d037      	beq.n	8005506 <acc_base_configuration_check+0x9e>
 8005496:	2301      	movs	r3, #1
 8005498:	f885 304e 	strb.w	r3, [r5, #78]	; 0x4e
 800549c:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
 80054a0:	2b06      	cmp	r3, #6
 80054a2:	d00b      	beq.n	80054bc <acc_base_configuration_check+0x54>
 80054a4:	2b09      	cmp	r3, #9
 80054a6:	d009      	beq.n	80054bc <acc_base_configuration_check+0x54>
 80054a8:	4b18      	ldr	r3, [pc, #96]	; (800550c <acc_base_configuration_check+0xa4>)
 80054aa:	4a19      	ldr	r2, [pc, #100]	; (8005510 <acc_base_configuration_check+0xa8>)
 80054ac:	e001      	b.n	80054b2 <acc_base_configuration_check+0x4a>
 80054ae:	4b17      	ldr	r3, [pc, #92]	; (800550c <acc_base_configuration_check+0xa4>)
 80054b0:	4a18      	ldr	r2, [pc, #96]	; (8005514 <acc_base_configuration_check+0xac>)
 80054b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054b4:	4918      	ldr	r1, [pc, #96]	; (8005518 <acc_base_configuration_check+0xb0>)
 80054b6:	2000      	movs	r0, #0
 80054b8:	4798      	blx	r3
 80054ba:	2400      	movs	r4, #0
 80054bc:	4620      	mov	r0, r4
 80054be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054c0:	4b12      	ldr	r3, [pc, #72]	; (800550c <acc_base_configuration_check+0xa4>)
 80054c2:	4a16      	ldr	r2, [pc, #88]	; (800551c <acc_base_configuration_check+0xb4>)
 80054c4:	e7f5      	b.n	80054b2 <acc_base_configuration_check+0x4a>
 80054c6:	4b11      	ldr	r3, [pc, #68]	; (800550c <acc_base_configuration_check+0xa4>)
 80054c8:	4a15      	ldr	r2, [pc, #84]	; (8005520 <acc_base_configuration_check+0xb8>)
 80054ca:	e7f2      	b.n	80054b2 <acc_base_configuration_check+0x4a>
 80054cc:	2b03      	cmp	r3, #3
 80054ce:	d00c      	beq.n	80054ea <acc_base_configuration_check+0x82>
 80054d0:	f036 0304 	bics.w	r3, r6, #4
 80054d4:	d1e2      	bne.n	800549c <acc_base_configuration_check+0x34>
 80054d6:	e7de      	b.n	8005496 <acc_base_configuration_check+0x2e>
 80054d8:	f000 f8a2 	bl	8005620 <acc_rss_integration_is_hibernate_capable>
 80054dc:	b160      	cbz	r0, 80054f8 <acc_base_configuration_check+0x90>
 80054de:	792b      	ldrb	r3, [r5, #4]
 80054e0:	2b03      	cmp	r3, #3
 80054e2:	d1cb      	bne.n	800547c <acc_base_configuration_check+0x14>
 80054e4:	4b09      	ldr	r3, [pc, #36]	; (800550c <acc_base_configuration_check+0xa4>)
 80054e6:	4a0f      	ldr	r2, [pc, #60]	; (8005524 <acc_base_configuration_check+0xbc>)
 80054e8:	e7e3      	b.n	80054b2 <acc_base_configuration_check+0x4a>
 80054ea:	f895 704e 	ldrb.w	r7, [r5, #78]	; 0x4e
 80054ee:	2f00      	cmp	r7, #0
 80054f0:	d1ee      	bne.n	80054d0 <acc_base_configuration_check+0x68>
 80054f2:	4b06      	ldr	r3, [pc, #24]	; (800550c <acc_base_configuration_check+0xa4>)
 80054f4:	4a0c      	ldr	r2, [pc, #48]	; (8005528 <acc_base_configuration_check+0xc0>)
 80054f6:	e7dc      	b.n	80054b2 <acc_base_configuration_check+0x4a>
 80054f8:	4904      	ldr	r1, [pc, #16]	; (800550c <acc_base_configuration_check+0xa4>)
 80054fa:	4a0c      	ldr	r2, [pc, #48]	; (800552c <acc_base_configuration_check+0xc4>)
 80054fc:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 80054fe:	4906      	ldr	r1, [pc, #24]	; (8005518 <acc_base_configuration_check+0xb0>)
 8005500:	4604      	mov	r4, r0
 8005502:	47a8      	blx	r5
 8005504:	e7da      	b.n	80054bc <acc_base_configuration_check+0x54>
 8005506:	4b01      	ldr	r3, [pc, #4]	; (800550c <acc_base_configuration_check+0xa4>)
 8005508:	4a09      	ldr	r2, [pc, #36]	; (8005530 <acc_base_configuration_check+0xc8>)
 800550a:	e7d2      	b.n	80054b2 <acc_base_configuration_check+0x4a>
 800550c:	200004c0 	.word	0x200004c0
 8005510:	0800e83c 	.word	0x0800e83c
 8005514:	0800e69c 	.word	0x0800e69c
 8005518:	0800e648 	.word	0x0800e648
 800551c:	0800e76c 	.word	0x0800e76c
 8005520:	0800e738 	.word	0x0800e738
 8005524:	0800e6f4 	.word	0x0800e6f4
 8005528:	0800e7fc 	.word	0x0800e7fc
 800552c:	0800e6b4 	.word	0x0800e6b4
 8005530:	0800e7c0 	.word	0x0800e7c0

08005534 <acc_rss_integration_register>:
 8005534:	b538      	push	{r3, r4, r5, lr}
 8005536:	6943      	ldr	r3, [r0, #20]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d02b      	beq.n	8005594 <acc_rss_integration_register+0x60>
 800553c:	6983      	ldr	r3, [r0, #24]
 800553e:	b34b      	cbz	r3, 8005594 <acc_rss_integration_register+0x60>
 8005540:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005542:	b323      	cbz	r3, 800558e <acc_rss_integration_register+0x5a>
 8005544:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005546:	b32b      	cbz	r3, 8005594 <acc_rss_integration_register+0x60>
 8005548:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800554a:	b31b      	cbz	r3, 8005594 <acc_rss_integration_register+0x60>
 800554c:	6883      	ldr	r3, [r0, #8]
 800554e:	b30b      	cbz	r3, 8005594 <acc_rss_integration_register+0x60>
 8005550:	68c3      	ldr	r3, [r0, #12]
 8005552:	b1fb      	cbz	r3, 8005594 <acc_rss_integration_register+0x60>
 8005554:	6903      	ldr	r3, [r0, #16]
 8005556:	b1eb      	cbz	r3, 8005594 <acc_rss_integration_register+0x60>
 8005558:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800555a:	b313      	cbz	r3, 80055a2 <acc_rss_integration_register+0x6e>
 800555c:	6802      	ldr	r2, [r0, #0]
 800555e:	2a2a      	cmp	r2, #42	; 0x2a
 8005560:	d81a      	bhi.n	8005598 <acc_rss_integration_register+0x64>
 8005562:	6842      	ldr	r2, [r0, #4]
 8005564:	2a0f      	cmp	r2, #15
 8005566:	d917      	bls.n	8005598 <acc_rss_integration_register+0x64>
 8005568:	69c2      	ldr	r2, [r0, #28]
 800556a:	b10a      	cbz	r2, 8005570 <acc_rss_integration_register+0x3c>
 800556c:	6a02      	ldr	r2, [r0, #32]
 800556e:	b19a      	cbz	r2, 8005598 <acc_rss_integration_register+0x64>
 8005570:	4605      	mov	r5, r0
 8005572:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005574:	4c0c      	ldr	r4, [pc, #48]	; (80055a8 <acc_rss_integration_register+0x74>)
 8005576:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005578:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800557a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800557c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800557e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005580:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005584:	2301      	movs	r3, #1
 8005586:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800558a:	4618      	mov	r0, r3
 800558c:	bd38      	pop	{r3, r4, r5, pc}
 800558e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005590:	2b00      	cmp	r3, #0
 8005592:	d1d7      	bne.n	8005544 <acc_rss_integration_register+0x10>
 8005594:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005596:	b123      	cbz	r3, 80055a2 <acc_rss_integration_register+0x6e>
 8005598:	4a04      	ldr	r2, [pc, #16]	; (80055ac <acc_rss_integration_register+0x78>)
 800559a:	4905      	ldr	r1, [pc, #20]	; (80055b0 <acc_rss_integration_register+0x7c>)
 800559c:	2000      	movs	r0, #0
 800559e:	4798      	blx	r3
 80055a0:	2300      	movs	r3, #0
 80055a2:	4618      	mov	r0, r3
 80055a4:	bd38      	pop	{r3, r4, r5, pc}
 80055a6:	bf00      	nop
 80055a8:	200004c0 	.word	0x200004c0
 80055ac:	0800e88c 	.word	0x0800e88c
 80055b0:	0800e8a0 	.word	0x0800e8a0

080055b4 <acc_rss_integration_unregister>:
 80055b4:	4802      	ldr	r0, [pc, #8]	; (80055c0 <acc_rss_integration_unregister+0xc>)
 80055b6:	223c      	movs	r2, #60	; 0x3c
 80055b8:	2100      	movs	r1, #0
 80055ba:	f007 bca7 	b.w	800cf0c <memset>
 80055be:	bf00      	nop
 80055c0:	200004c0 	.word	0x200004c0

080055c4 <acc_rss_integration_get_sensor_count>:
 80055c4:	4b01      	ldr	r3, [pc, #4]	; (80055cc <acc_rss_integration_get_sensor_count+0x8>)
 80055c6:	6818      	ldr	r0, [r3, #0]
 80055c8:	4770      	bx	lr
 80055ca:	bf00      	nop
 80055cc:	200004c0 	.word	0x200004c0

080055d0 <acc_rss_integration_get_sensor_reference_frequency>:
 80055d0:	4b01      	ldr	r3, [pc, #4]	; (80055d8 <acc_rss_integration_get_sensor_reference_frequency+0x8>)
 80055d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d4:	4718      	bx	r3
 80055d6:	bf00      	nop
 80055d8:	200004c0 	.word	0x200004c0

080055dc <acc_rss_integration_get_max_spi_transfer_size>:
 80055dc:	4b01      	ldr	r3, [pc, #4]	; (80055e4 <acc_rss_integration_get_max_spi_transfer_size+0x8>)
 80055de:	6858      	ldr	r0, [r3, #4]
 80055e0:	4770      	bx	lr
 80055e2:	bf00      	nop
 80055e4:	200004c0 	.word	0x200004c0

080055e8 <acc_rss_integration_sensor_device_power_on>:
 80055e8:	4b01      	ldr	r3, [pc, #4]	; (80055f0 <acc_rss_integration_sensor_device_power_on+0x8>)
 80055ea:	695b      	ldr	r3, [r3, #20]
 80055ec:	4718      	bx	r3
 80055ee:	bf00      	nop
 80055f0:	200004c0 	.word	0x200004c0

080055f4 <acc_rss_integration_sensor_device_power_off>:
 80055f4:	4b01      	ldr	r3, [pc, #4]	; (80055fc <acc_rss_integration_sensor_device_power_off+0x8>)
 80055f6:	699b      	ldr	r3, [r3, #24]
 80055f8:	4718      	bx	r3
 80055fa:	bf00      	nop
 80055fc:	200004c0 	.word	0x200004c0

08005600 <acc_rss_integration_sensor_device_hibernate_enter>:
 8005600:	4b02      	ldr	r3, [pc, #8]	; (800560c <acc_rss_integration_sensor_device_hibernate_enter+0xc>)
 8005602:	69db      	ldr	r3, [r3, #28]
 8005604:	b103      	cbz	r3, 8005608 <acc_rss_integration_sensor_device_hibernate_enter+0x8>
 8005606:	4718      	bx	r3
 8005608:	4770      	bx	lr
 800560a:	bf00      	nop
 800560c:	200004c0 	.word	0x200004c0

08005610 <acc_rss_integration_sensor_device_hibernate_exit>:
 8005610:	4b02      	ldr	r3, [pc, #8]	; (800561c <acc_rss_integration_sensor_device_hibernate_exit+0xc>)
 8005612:	6a1b      	ldr	r3, [r3, #32]
 8005614:	b103      	cbz	r3, 8005618 <acc_rss_integration_sensor_device_hibernate_exit+0x8>
 8005616:	4718      	bx	r3
 8005618:	4770      	bx	lr
 800561a:	bf00      	nop
 800561c:	200004c0 	.word	0x200004c0

08005620 <acc_rss_integration_is_hibernate_capable>:
 8005620:	4b02      	ldr	r3, [pc, #8]	; (800562c <acc_rss_integration_is_hibernate_capable+0xc>)
 8005622:	69d8      	ldr	r0, [r3, #28]
 8005624:	3800      	subs	r0, #0
 8005626:	bf18      	it	ne
 8005628:	2001      	movne	r0, #1
 800562a:	4770      	bx	lr
 800562c:	200004c0 	.word	0x200004c0

08005630 <acc_rss_integration_wait_for_sensor_interrupt>:
 8005630:	4b01      	ldr	r3, [pc, #4]	; (8005638 <acc_rss_integration_wait_for_sensor_interrupt+0x8>)
 8005632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005634:	4718      	bx	r3
 8005636:	bf00      	nop
 8005638:	200004c0 	.word	0x200004c0

0800563c <acc_rss_integration_sensor_device_transfer>:
 800563c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005640:	4f10      	ldr	r7, [pc, #64]	; (8005684 <acc_rss_integration_sensor_device_transfer+0x48>)
 8005642:	f8d7 e038 	ldr.w	lr, [r7, #56]	; 0x38
 8005646:	f1be 0f00 	cmp.w	lr, #0
 800564a:	d003      	beq.n	8005654 <acc_rss_integration_sensor_device_transfer+0x18>
 800564c:	4673      	mov	r3, lr
 800564e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005652:	4718      	bx	r3
 8005654:	460c      	mov	r4, r1
 8005656:	4606      	mov	r6, r0
 8005658:	4611      	mov	r1, r2
 800565a:	4615      	mov	r5, r2
 800565c:	4620      	mov	r0, r4
 800565e:	4698      	mov	r8, r3
 8005660:	f002 fd3a 	bl	80080d8 <acc_utils_swap16_array>
 8005664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005666:	4630      	mov	r0, r6
 8005668:	006a      	lsls	r2, r5, #1
 800566a:	4621      	mov	r1, r4
 800566c:	4798      	blx	r3
 800566e:	f1b8 0f00 	cmp.w	r8, #0
 8005672:	d101      	bne.n	8005678 <acc_rss_integration_sensor_device_transfer+0x3c>
 8005674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005678:	4629      	mov	r1, r5
 800567a:	4620      	mov	r0, r4
 800567c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005680:	f002 bd2a 	b.w	80080d8 <acc_utils_swap16_array>
 8005684:	200004c0 	.word	0x200004c0

08005688 <acc_rss_integration_mem_alloc_debug>:
 8005688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800568c:	4f0c      	ldr	r7, [pc, #48]	; (80056c0 <acc_rss_integration_mem_alloc_debug+0x38>)
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	4688      	mov	r8, r1
 8005692:	4616      	mov	r6, r2
 8005694:	4605      	mov	r5, r0
 8005696:	4798      	blx	r3
 8005698:	4604      	mov	r4, r0
 800569a:	b150      	cbz	r0, 80056b2 <acc_rss_integration_mem_alloc_debug+0x2a>
 800569c:	4b09      	ldr	r3, [pc, #36]	; (80056c4 <acc_rss_integration_mem_alloc_debug+0x3c>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	b123      	cbz	r3, 80056ac <acc_rss_integration_mem_alloc_debug+0x24>
 80056a2:	689f      	ldr	r7, [r3, #8]
 80056a4:	4642      	mov	r2, r8
 80056a6:	4633      	mov	r3, r6
 80056a8:	4629      	mov	r1, r5
 80056aa:	47b8      	blx	r7
 80056ac:	4620      	mov	r0, r4
 80056ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056b4:	4a04      	ldr	r2, [pc, #16]	; (80056c8 <acc_rss_integration_mem_alloc_debug+0x40>)
 80056b6:	4905      	ldr	r1, [pc, #20]	; (80056cc <acc_rss_integration_mem_alloc_debug+0x44>)
 80056b8:	4798      	blx	r3
 80056ba:	4620      	mov	r0, r4
 80056bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056c0:	200004c0 	.word	0x200004c0
 80056c4:	2000035c 	.word	0x2000035c
 80056c8:	0800e8b0 	.word	0x0800e8b0
 80056cc:	0800e8a0 	.word	0x0800e8a0

080056d0 <acc_rss_integration_mem_calloc_debug>:
 80056d0:	b570      	push	{r4, r5, r6, lr}
 80056d2:	b190      	cbz	r0, 80056fa <acc_rss_integration_mem_calloc_debug+0x2a>
 80056d4:	460c      	mov	r4, r1
 80056d6:	4611      	mov	r1, r2
 80056d8:	461a      	mov	r2, r3
 80056da:	fba0 3604 	umull	r3, r6, r0, r4
 80056de:	b97e      	cbnz	r6, 8005700 <acc_rss_integration_mem_calloc_debug+0x30>
 80056e0:	fb04 f500 	mul.w	r5, r4, r0
 80056e4:	4628      	mov	r0, r5
 80056e6:	f7ff ffcf 	bl	8005688 <acc_rss_integration_mem_alloc_debug>
 80056ea:	4604      	mov	r4, r0
 80056ec:	b118      	cbz	r0, 80056f6 <acc_rss_integration_mem_calloc_debug+0x26>
 80056ee:	462a      	mov	r2, r5
 80056f0:	4631      	mov	r1, r6
 80056f2:	f007 fc0b 	bl	800cf0c <memset>
 80056f6:	4620      	mov	r0, r4
 80056f8:	bd70      	pop	{r4, r5, r6, pc}
 80056fa:	4604      	mov	r4, r0
 80056fc:	4620      	mov	r0, r4
 80056fe:	bd70      	pop	{r4, r5, r6, pc}
 8005700:	4801      	ldr	r0, [pc, #4]	; (8005708 <acc_rss_integration_mem_calloc_debug+0x38>)
 8005702:	21dd      	movs	r1, #221	; 0xdd
 8005704:	f002 fa38 	bl	8007b78 <acc_assert_fail>
 8005708:	0800e8a0 	.word	0x0800e8a0

0800570c <acc_rss_integration_mem_free>:
 800570c:	4b06      	ldr	r3, [pc, #24]	; (8005728 <acc_rss_integration_mem_free+0x1c>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	b510      	push	{r4, lr}
 8005712:	4604      	mov	r4, r0
 8005714:	b10b      	cbz	r3, 800571a <acc_rss_integration_mem_free+0xe>
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	4798      	blx	r3
 800571a:	4b04      	ldr	r3, [pc, #16]	; (800572c <acc_rss_integration_mem_free+0x20>)
 800571c:	4620      	mov	r0, r4
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005724:	4718      	bx	r3
 8005726:	bf00      	nop
 8005728:	2000035c 	.word	0x2000035c
 800572c:	200004c0 	.word	0x200004c0

08005730 <acc_rss_integration_log_level>:
 8005730:	4b01      	ldr	r3, [pc, #4]	; (8005738 <acc_rss_integration_log_level+0x8>)
 8005732:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
 8005736:	4770      	bx	lr
 8005738:	200004c0 	.word	0x200004c0

0800573c <inject_data>:
 800573c:	3034      	adds	r0, #52	; 0x34
 800573e:	f003 bacf 	b.w	8008ce0 <acc_element_source_adc_inject_data>
 8005742:	bf00      	nop

08005744 <disassemble>:
 8005744:	b538      	push	{r3, r4, r5, lr}
 8005746:	6805      	ldr	r5, [r0, #0]
 8005748:	4604      	mov	r4, r0
 800574a:	b155      	cbz	r5, 8005762 <disassemble+0x1e>
 800574c:	f105 0034 	add.w	r0, r5, #52	; 0x34
 8005750:	f003 fa76 	bl	8008c40 <acc_element_source_adc_release>
 8005754:	f8d5 03a4 	ldr.w	r0, [r5, #932]	; 0x3a4
 8005758:	f7ff ffd8 	bl	800570c <acc_rss_integration_mem_free>
 800575c:	4628      	mov	r0, r5
 800575e:	f7ff ffd5 	bl	800570c <acc_rss_integration_mem_free>
 8005762:	4620      	mov	r0, r4
 8005764:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005768:	f7ff bfd0 	b.w	800570c <acc_rss_integration_mem_free>

0800576c <produce>:
 800576c:	b510      	push	{r4, lr}
 800576e:	4604      	mov	r4, r0
 8005770:	3034      	adds	r0, #52	; 0x34
 8005772:	f003 fa73 	bl	8008c5c <acc_element_source_adc_produce>
 8005776:	b960      	cbnz	r0, 8005792 <produce+0x26>
 8005778:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 800577c:	f8d4 2348 	ldr.w	r2, [r4, #840]	; 0x348
 8005780:	6118      	str	r0, [r3, #16]
 8005782:	2101      	movs	r1, #1
 8005784:	7198      	strb	r0, [r3, #6]
 8005786:	7159      	strb	r1, [r3, #5]
 8005788:	f504 7051 	add.w	r0, r4, #836	; 0x344
 800578c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005790:	4710      	bx	r2
 8005792:	bd10      	pop	{r4, pc}

08005794 <acc_pipeline_envelope_assemble>:
 8005794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005798:	ed2d 8b08 	vpush	{d8-d11}
 800579c:	460e      	mov	r6, r1
 800579e:	b08b      	sub	sp, #44	; 0x2c
 80057a0:	461c      	mov	r4, r3
 80057a2:	2110      	movs	r1, #16
 80057a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80057a8:	4681      	mov	r9, r0
 80057aa:	4615      	mov	r5, r2
 80057ac:	2001      	movs	r0, #1
 80057ae:	4ae4      	ldr	r2, [pc, #912]	; (8005b40 <acc_pipeline_envelope_assemble+0x3ac>)
 80057b0:	e9cd 6403 	strd	r6, r4, [sp, #12]
 80057b4:	f7ff ff8c 	bl	80056d0 <acc_rss_integration_mem_calloc_debug>
 80057b8:	4ae1      	ldr	r2, [pc, #900]	; (8005b40 <acc_pipeline_envelope_assemble+0x3ac>)
 80057ba:	4606      	mov	r6, r0
 80057bc:	f240 1301 	movw	r3, #257	; 0x101
 80057c0:	f44f 716b 	mov.w	r1, #940	; 0x3ac
 80057c4:	2001      	movs	r0, #1
 80057c6:	f7ff ff83 	bl	80056d0 <acc_rss_integration_mem_calloc_debug>
 80057ca:	4604      	mov	r4, r0
 80057cc:	2e00      	cmp	r6, #0
 80057ce:	f000 8208 	beq.w	8005be2 <acc_pipeline_envelope_assemble+0x44e>
 80057d2:	2800      	cmp	r0, #0
 80057d4:	f000 8205 	beq.w	8005be2 <acc_pipeline_envelope_assemble+0x44e>
 80057d8:	f100 0334 	add.w	r3, r0, #52	; 0x34
 80057dc:	f500 7262 	add.w	r2, r0, #904	; 0x388
 80057e0:	f100 0814 	add.w	r8, r0, #20
 80057e4:	6030      	str	r0, [r6, #0]
 80057e6:	4649      	mov	r1, r9
 80057e8:	4618      	mov	r0, r3
 80057ea:	9200      	str	r2, [sp, #0]
 80057ec:	ee08 3a10 	vmov	s16, r3
 80057f0:	462a      	mov	r2, r5
 80057f2:	4643      	mov	r3, r8
 80057f4:	f003 fa04 	bl	8008c00 <acc_element_source_adc_init_radar_engine>
 80057f8:	4681      	mov	r9, r0
 80057fa:	2800      	cmp	r0, #0
 80057fc:	f000 81aa 	beq.w	8005b54 <acc_pipeline_envelope_assemble+0x3c0>
 8005800:	2100      	movs	r1, #0
 8005802:	4628      	mov	r0, r5
 8005804:	f7ff fbe6 	bl	8004fd4 <acc_base_configuration_time_domain_low_pass_filter_alpha_get>
 8005808:	4683      	mov	fp, r0
 800580a:	2007      	movs	r0, #7
 800580c:	f8b4 9388 	ldrh.w	r9, [r4, #904]	; 0x388
 8005810:	f002 f9ca 	bl	8007ba8 <acc_element_sizeof>
 8005814:	f8b4 a396 	ldrh.w	sl, [r4, #918]	; 0x396
 8005818:	f8b4 3392 	ldrh.w	r3, [r4, #914]	; 0x392
 800581c:	f8b4 2394 	ldrh.w	r2, [r4, #916]	; 0x394
 8005820:	4453      	add	r3, sl
 8005822:	ea4f 0a43 	mov.w	sl, r3, lsl #1
 8005826:	0053      	lsls	r3, r2, #1
 8005828:	459a      	cmp	sl, r3
 800582a:	bf38      	it	cc
 800582c:	469a      	movcc	sl, r3
 800582e:	fb00 f909 	mul.w	r9, r0, r9
 8005832:	45ca      	cmp	sl, r9
 8005834:	4628      	mov	r0, r5
 8005836:	bf38      	it	cc
 8005838:	46ca      	movcc	sl, r9
 800583a:	f7ff fd51 	bl	80052e0 <acc_base_configuration_min_pipeline_memory_size_get>
 800583e:	4582      	cmp	sl, r0
 8005840:	bf38      	it	cc
 8005842:	4682      	movcc	sl, r0
 8005844:	f8c4 a3a8 	str.w	sl, [r4, #936]	; 0x3a8
 8005848:	f1bb 0f00 	cmp.w	fp, #0
 800584c:	d115      	bne.n	800587a <acc_pipeline_envelope_assemble+0xe6>
 800584e:	49bc      	ldr	r1, [pc, #752]	; (8005b40 <acc_pipeline_envelope_assemble+0x3ac>)
 8005850:	f240 1285 	movw	r2, #389	; 0x185
 8005854:	4650      	mov	r0, sl
 8005856:	f7ff ff17 	bl	8005688 <acc_rss_integration_mem_alloc_debug>
 800585a:	4681      	mov	r9, r0
 800585c:	f8c4 03a4 	str.w	r0, [r4, #932]	; 0x3a4
 8005860:	2800      	cmp	r0, #0
 8005862:	f040 8181 	bne.w	8005b68 <acc_pipeline_envelope_assemble+0x3d4>
 8005866:	4630      	mov	r0, r6
 8005868:	f7ff ff6c 	bl	8005744 <disassemble>
 800586c:	2600      	movs	r6, #0
 800586e:	4630      	mov	r0, r6
 8005870:	b00b      	add	sp, #44	; 0x2c
 8005872:	ecbd 8b08 	vpop	{d8-d11}
 8005876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800587a:	2007      	movs	r0, #7
 800587c:	f8b4 9388 	ldrh.w	r9, [r4, #904]	; 0x388
 8005880:	f002 f992 	bl	8007ba8 <acc_element_sizeof>
 8005884:	f10a 030a 	add.w	r3, sl, #10
 8005888:	fb00 3009 	mla	r0, r0, r9, r3
 800588c:	49ac      	ldr	r1, [pc, #688]	; (8005b40 <acc_pipeline_envelope_assemble+0x3ac>)
 800588e:	f240 1285 	movw	r2, #389	; 0x185
 8005892:	f7ff fef9 	bl	8005688 <acc_rss_integration_mem_alloc_debug>
 8005896:	4681      	mov	r9, r0
 8005898:	f8c4 03a4 	str.w	r0, [r4, #932]	; 0x3a4
 800589c:	2800      	cmp	r0, #0
 800589e:	d0e2      	beq.n	8005866 <acc_pipeline_envelope_assemble+0xd2>
 80058a0:	f8b4 138a 	ldrh.w	r1, [r4, #906]	; 0x38a
 80058a4:	9105      	str	r1, [sp, #20]
 80058a6:	2007      	movs	r0, #7
 80058a8:	f002 f97e 	bl	8007ba8 <acc_element_sizeof>
 80058ac:	9905      	ldr	r1, [sp, #20]
 80058ae:	f10a 0204 	add.w	r2, sl, #4
 80058b2:	fb00 9101 	mla	r1, r0, r1, r9
 80058b6:	444a      	add	r2, r9
 80058b8:	f104 0c06 	add.w	ip, r4, #6
 80058bc:	1de0      	adds	r0, r4, #7
 80058be:	f104 0310 	add.w	r3, r4, #16
 80058c2:	e9cd 2106 	strd	r2, r1, [sp, #24]
 80058c6:	f8c4 c05c 	str.w	ip, [r4, #92]	; 0x5c
 80058ca:	f104 020c 	add.w	r2, r4, #12
 80058ce:	f104 0c08 	add.w	ip, r4, #8
 80058d2:	6620      	str	r0, [r4, #96]	; 0x60
 80058d4:	1d20      	adds	r0, r4, #4
 80058d6:	e9c4 2c19 	strd	r2, ip, [r4, #100]	; 0x64
 80058da:	65a3      	str	r3, [r4, #88]	; 0x58
 80058dc:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 80058e0:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 80058e4:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80058e8:	e9c4 9931 	strd	r9, r9, [r4, #196]	; 0xc4
 80058ec:	f8c4 9048 	str.w	r9, [r4, #72]	; 0x48
 80058f0:	6564      	str	r4, [r4, #84]	; 0x54
 80058f2:	f8c4 9084 	str.w	r9, [r4, #132]	; 0x84
 80058f6:	4628      	mov	r0, r5
 80058f8:	4617      	mov	r7, r2
 80058fa:	9305      	str	r3, [sp, #20]
 80058fc:	f7ff fcbe 	bl	800527c <acc_base_configuration_noise_level_normalization_get>
 8005900:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 8005904:	9907      	ldr	r1, [sp, #28]
 8005906:	b118      	cbz	r0, 8005910 <acc_pipeline_envelope_assemble+0x17c>
 8005908:	e9c4 9941 	strd	r9, r9, [r4, #260]	; 0x104
 800590c:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8005910:	e9c4 9951 	strd	r9, r9, [r4, #324]	; 0x144
 8005914:	e9c4 9960 	strd	r9, r9, [r4, #384]	; 0x180
 8005918:	e9c4 9971 	strd	r9, r9, [r4, #452]	; 0x1c4
 800591c:	e9c4 9183 	strd	r9, r1, [r4, #524]	; 0x20c
 8005920:	e9c4 1192 	strd	r1, r1, [r4, #584]	; 0x248
 8005924:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
 8005928:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194
 800592c:	f8c4 71a0 	str.w	r7, [r4, #416]	; 0x1a0
 8005930:	f8c4 31d8 	str.w	r3, [r4, #472]	; 0x1d8
 8005934:	f8c4 3220 	str.w	r3, [r4, #544]	; 0x220
 8005938:	f8c4 325c 	str.w	r3, [r4, #604]	; 0x25c
 800593c:	f1bb 0f00 	cmp.w	fp, #0
 8005940:	d007      	beq.n	8005952 <acc_pipeline_envelope_assemble+0x1be>
 8005942:	e9c4 12a7 	strd	r1, r2, [r4, #668]	; 0x29c
 8005946:	eb09 000a 	add.w	r0, r9, sl
 800594a:	f8c4 02a8 	str.w	r0, [r4, #680]	; 0x2a8
 800594e:	f8c4 32b0 	str.w	r3, [r4, #688]	; 0x2b0
 8005952:	e9c4 29b7 	strd	r2, r9, [r4, #732]	; 0x2dc
 8005956:	e9c4 99c6 	strd	r9, r9, [r4, #792]	; 0x318
 800595a:	f8c4 32f0 	str.w	r3, [r4, #752]	; 0x2f0
 800595e:	f8c4 332c 	str.w	r3, [r4, #812]	; 0x32c
 8005962:	f8c4 9354 	str.w	r9, [r4, #852]	; 0x354
 8005966:	ee18 0a10 	vmov	r0, s16
 800596a:	f8c4 437c 	str.w	r4, [r4, #892]	; 0x37c
 800596e:	f504 7369 	add.w	r3, r4, #932	; 0x3a4
 8005972:	4642      	mov	r2, r8
 8005974:	4629      	mov	r1, r5
 8005976:	f003 f951 	bl	8008c1c <acc_element_source_adc_init>
 800597a:	4681      	mov	r9, r0
 800597c:	2800      	cmp	r0, #0
 800597e:	f000 80e9 	beq.w	8005b54 <acc_pipeline_envelope_assemble+0x3c0>
 8005982:	f104 03b4 	add.w	r3, r4, #180	; 0xb4
 8005986:	f104 0a74 	add.w	sl, r4, #116	; 0x74
 800598a:	461f      	mov	r7, r3
 800598c:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8005b44 <acc_pipeline_envelope_assemble+0x3b0>
 8005990:	2105      	movs	r1, #5
 8005992:	4650      	mov	r0, sl
 8005994:	ee09 3a90 	vmov	s19, r3
 8005998:	f002 f954 	bl	8007c44 <acc_element_saturation_check_init>
 800599c:	4638      	mov	r0, r7
 800599e:	2200      	movs	r2, #0
 80059a0:	2105      	movs	r1, #5
 80059a2:	f002 fc77 	bl	8008294 <acc_element_centering_init>
 80059a6:	4628      	mov	r0, r5
 80059a8:	f7ff fc68 	bl	800527c <acc_base_configuration_noise_level_normalization_get>
 80059ac:	2800      	cmp	r0, #0
 80059ae:	f040 80fa 	bne.w	8005ba6 <acc_pipeline_envelope_assemble+0x412>
 80059b2:	f504 739a 	add.w	r3, r4, #308	; 0x134
 80059b6:	4618      	mov	r0, r3
 80059b8:	ee08 3a90 	vmov	s17, r3
 80059bc:	f504 73b8 	add.w	r3, r4, #368	; 0x170
 80059c0:	461f      	mov	r7, r3
 80059c2:	2207      	movs	r2, #7
 80059c4:	2105      	movs	r1, #5
 80059c6:	ee0a 3a90 	vmov	s21, r3
 80059ca:	f002 fd2f 	bl	800842c <acc_element_converter_init>
 80059ce:	eddf 0a5d 	vldr	s1, [pc, #372]	; 8005b44 <acc_pipeline_envelope_assemble+0x3b0>
 80059d2:	ed94 0a08 	vldr	s0, [r4, #32]
 80059d6:	2107      	movs	r1, #7
 80059d8:	4638      	mov	r0, r7
 80059da:	f002 fee9 	bl	80087b0 <acc_element_iq_mixer_init>
 80059de:	f504 73da 	add.w	r3, r4, #436	; 0x1b4
 80059e2:	f8b4 2390 	ldrh.w	r2, [r4, #912]	; 0x390
 80059e6:	9206      	str	r2, [sp, #24]
 80059e8:	461f      	mov	r7, r3
 80059ea:	4628      	mov	r0, r5
 80059ec:	ee0b 3a10 	vmov	s22, r3
 80059f0:	f8b4 338e 	ldrh.w	r3, [r4, #910]	; 0x38e
 80059f4:	9305      	str	r3, [sp, #20]
 80059f6:	f7ff fad1 	bl	8004f9c <acc_base_configuration_phase_compensation_alpha_get>
 80059fa:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 80059fe:	4638      	mov	r0, r7
 8005a00:	2107      	movs	r1, #7
 8005a02:	f504 77fe 	add.w	r7, r4, #508	; 0x1fc
 8005a06:	f003 f809 	bl	8008a1c <acc_element_phase_compensation_init>
 8005a0a:	f8b4 238c 	ldrh.w	r2, [r4, #908]	; 0x38c
 8005a0e:	2107      	movs	r1, #7
 8005a10:	4638      	mov	r0, r7
 8005a12:	f002 fd7d 	bl	8008510 <acc_element_crop_init>
 8005a16:	4628      	mov	r0, r5
 8005a18:	f7ff faf8 	bl	800500c <acc_base_configuration_filter_demodulated_data_get>
 8005a1c:	f504 7b0e 	add.w	fp, r4, #568	; 0x238
 8005a20:	9005      	str	r0, [sp, #20]
 8005a22:	4628      	mov	r0, r5
 8005a24:	f7ff fb02 	bl	800502c <acc_base_configuration_demodulation_filter_cutoff_freq_ratio_get>
 8005a28:	2107      	movs	r1, #7
 8005a2a:	9a05      	ldr	r2, [sp, #20]
 8005a2c:	4643      	mov	r3, r8
 8005a2e:	4658      	mov	r0, fp
 8005a30:	f002 fdd0 	bl	80085d4 <acc_element_depth_domain_low_pass_filter_init>
 8005a34:	a909      	add	r1, sp, #36	; 0x24
 8005a36:	4628      	mov	r0, r5
 8005a38:	ee09 7a10 	vmov	s18, r7
 8005a3c:	f7ff faca 	bl	8004fd4 <acc_base_configuration_time_domain_low_pass_filter_alpha_get>
 8005a40:	2800      	cmp	r0, #0
 8005a42:	f040 80a8 	bne.w	8005b96 <acc_pipeline_envelope_assemble+0x402>
 8005a46:	f504 7933 	add.w	r9, r4, #716	; 0x2cc
 8005a4a:	2107      	movs	r1, #7
 8005a4c:	4648      	mov	r0, r9
 8005a4e:	f504 7842 	add.w	r8, r4, #776	; 0x308
 8005a52:	f002 fbb9 	bl	80081c8 <acc_element_abs_init>
 8005a56:	f504 7351 	add.w	r3, r4, #836	; 0x344
 8005a5a:	2202      	movs	r2, #2
 8005a5c:	2104      	movs	r1, #4
 8005a5e:	4640      	mov	r0, r8
 8005a60:	461f      	mov	r7, r3
 8005a62:	ee0a 3a10 	vmov	s20, r3
 8005a66:	f002 fce1 	bl	800842c <acc_element_converter_init>
 8005a6a:	9a03      	ldr	r2, [sp, #12]
 8005a6c:	4638      	mov	r0, r7
 8005a6e:	6811      	ldr	r1, [r2, #0]
 8005a70:	f002 f958 	bl	8007d24 <acc_element_sink_callback_init>
 8005a74:	ee18 0a10 	vmov	r0, s16
 8005a78:	4651      	mov	r1, sl
 8005a7a:	f002 f8a1 	bl	8007bc0 <acc_element_connect>
 8005a7e:	4650      	mov	r0, sl
 8005a80:	ee19 1a90 	vmov	r1, s19
 8005a84:	f002 f89c 	bl	8007bc0 <acc_element_connect>
 8005a88:	4628      	mov	r0, r5
 8005a8a:	f7ff fbf7 	bl	800527c <acc_base_configuration_noise_level_normalization_get>
 8005a8e:	2800      	cmp	r0, #0
 8005a90:	d07a      	beq.n	8005b88 <acc_pipeline_envelope_assemble+0x3f4>
 8005a92:	f104 0af4 	add.w	sl, r4, #244	; 0xf4
 8005a96:	ee19 0a90 	vmov	r0, s19
 8005a9a:	4651      	mov	r1, sl
 8005a9c:	f002 f890 	bl	8007bc0 <acc_element_connect>
 8005aa0:	ee18 1a90 	vmov	r1, s17
 8005aa4:	4650      	mov	r0, sl
 8005aa6:	f002 f88b 	bl	8007bc0 <acc_element_connect>
 8005aaa:	ee18 0a90 	vmov	r0, s17
 8005aae:	ee1a 1a90 	vmov	r1, s21
 8005ab2:	f002 f885 	bl	8007bc0 <acc_element_connect>
 8005ab6:	ee1b 1a10 	vmov	r1, s22
 8005aba:	ee1a 0a90 	vmov	r0, s21
 8005abe:	f002 f87f 	bl	8007bc0 <acc_element_connect>
 8005ac2:	ee19 1a10 	vmov	r1, s18
 8005ac6:	ee1b 0a10 	vmov	r0, s22
 8005aca:	f002 f879 	bl	8007bc0 <acc_element_connect>
 8005ace:	ee19 0a10 	vmov	r0, s18
 8005ad2:	4659      	mov	r1, fp
 8005ad4:	f002 f874 	bl	8007bc0 <acc_element_connect>
 8005ad8:	4628      	mov	r0, r5
 8005ada:	2100      	movs	r1, #0
 8005adc:	f7ff fa7a 	bl	8004fd4 <acc_base_configuration_time_domain_low_pass_filter_alpha_get>
 8005ae0:	2800      	cmp	r0, #0
 8005ae2:	d04c      	beq.n	8005b7e <acc_pipeline_envelope_assemble+0x3ea>
 8005ae4:	f504 7523 	add.w	r5, r4, #652	; 0x28c
 8005ae8:	4658      	mov	r0, fp
 8005aea:	4629      	mov	r1, r5
 8005aec:	f002 f868 	bl	8007bc0 <acc_element_connect>
 8005af0:	4649      	mov	r1, r9
 8005af2:	4628      	mov	r0, r5
 8005af4:	f002 f864 	bl	8007bc0 <acc_element_connect>
 8005af8:	4648      	mov	r0, r9
 8005afa:	4641      	mov	r1, r8
 8005afc:	f002 f860 	bl	8007bc0 <acc_element_connect>
 8005b00:	ee1a 1a10 	vmov	r1, s20
 8005b04:	4640      	mov	r0, r8
 8005b06:	f002 f85b 	bl	8007bc0 <acc_element_connect>
 8005b0a:	ee18 0a10 	vmov	r0, s16
 8005b0e:	f003 f8a1 	bl	8008c54 <acc_element_source_adc_validate>
 8005b12:	4605      	mov	r5, r0
 8005b14:	2800      	cmp	r0, #0
 8005b16:	d055      	beq.n	8005bc4 <acc_pipeline_envelope_assemble+0x430>
 8005b18:	ee18 0a10 	vmov	r0, s16
 8005b1c:	f003 f896 	bl	8008c4c <acc_element_source_adc_reset>
 8005b20:	9804      	ldr	r0, [sp, #16]
 8005b22:	4909      	ldr	r1, [pc, #36]	; (8005b48 <acc_pipeline_envelope_assemble+0x3b4>)
 8005b24:	4a09      	ldr	r2, [pc, #36]	; (8005b4c <acc_pipeline_envelope_assemble+0x3b8>)
 8005b26:	4b0a      	ldr	r3, [pc, #40]	; (8005b50 <acc_pipeline_envelope_assemble+0x3bc>)
 8005b28:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 8005b2c:	4630      	mov	r0, r6
 8005b2e:	e9c6 1201 	strd	r1, r2, [r6, #4]
 8005b32:	60f3      	str	r3, [r6, #12]
 8005b34:	b00b      	add	sp, #44	; 0x2c
 8005b36:	ecbd 8b08 	vpop	{d8-d11}
 8005b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b3e:	bf00      	nop
 8005b40:	0800e8c0 	.word	0x0800e8c0
 8005b44:	00000000 	.word	0x00000000
 8005b48:	0800576d 	.word	0x0800576d
 8005b4c:	0800573d 	.word	0x0800573d
 8005b50:	08005745 	.word	0x08005745
 8005b54:	4630      	mov	r0, r6
 8005b56:	f7ff fdf5 	bl	8005744 <disassemble>
 8005b5a:	464e      	mov	r6, r9
 8005b5c:	4630      	mov	r0, r6
 8005b5e:	b00b      	add	sp, #44	; 0x2c
 8005b60:	ecbd 8b08 	vpop	{d8-d11}
 8005b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b68:	f8b4 238a 	ldrh.w	r2, [r4, #906]	; 0x38a
 8005b6c:	9205      	str	r2, [sp, #20]
 8005b6e:	2007      	movs	r0, #7
 8005b70:	f002 f81a 	bl	8007ba8 <acc_element_sizeof>
 8005b74:	9a05      	ldr	r2, [sp, #20]
 8005b76:	fb00 9202 	mla	r2, r0, r2, r9
 8005b7a:	4611      	mov	r1, r2
 8005b7c:	e69c      	b.n	80058b8 <acc_pipeline_envelope_assemble+0x124>
 8005b7e:	4658      	mov	r0, fp
 8005b80:	4649      	mov	r1, r9
 8005b82:	f002 f81d 	bl	8007bc0 <acc_element_connect>
 8005b86:	e7b7      	b.n	8005af8 <acc_pipeline_envelope_assemble+0x364>
 8005b88:	ee19 0a90 	vmov	r0, s19
 8005b8c:	ee18 1a90 	vmov	r1, s17
 8005b90:	f002 f816 	bl	8007bc0 <acc_element_connect>
 8005b94:	e789      	b.n	8005aaa <acc_pipeline_envelope_assemble+0x316>
 8005b96:	ed9d 0a09 	vldr	s0, [sp, #36]	; 0x24
 8005b9a:	2107      	movs	r1, #7
 8005b9c:	f504 7023 	add.w	r0, r4, #652	; 0x28c
 8005ba0:	f003 f806 	bl	8008bb0 <acc_element_time_domain_low_pass_filter_init>
 8005ba4:	e74f      	b.n	8005a46 <acc_pipeline_envelope_assemble+0x2b2>
 8005ba6:	4628      	mov	r0, r5
 8005ba8:	f7ff fbae 	bl	8005308 <acc_base_configuration_maximize_signal_attenuation_get>
 8005bac:	2800      	cmp	r0, #0
 8005bae:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8005bb0:	bf14      	ite	ne
 8005bb2:	231e      	movne	r3, #30
 8005bb4:	f44f 7396 	moveq.w	r3, #300	; 0x12c
 8005bb8:	2105      	movs	r1, #5
 8005bba:	f104 00f4 	add.w	r0, r4, #244	; 0xf4
 8005bbe:	f002 fe83 	bl	80088c8 <acc_element_noise_level_normalization_init>
 8005bc2:	e6f6      	b.n	80059b2 <acc_pipeline_envelope_assemble+0x21e>
 8005bc4:	4b0d      	ldr	r3, [pc, #52]	; (8005bfc <acc_pipeline_envelope_assemble+0x468>)
 8005bc6:	4a0e      	ldr	r2, [pc, #56]	; (8005c00 <acc_pipeline_envelope_assemble+0x46c>)
 8005bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bca:	490e      	ldr	r1, [pc, #56]	; (8005c04 <acc_pipeline_envelope_assemble+0x470>)
 8005bcc:	4798      	blx	r3
 8005bce:	4630      	mov	r0, r6
 8005bd0:	f7ff fdb8 	bl	8005744 <disassemble>
 8005bd4:	462e      	mov	r6, r5
 8005bd6:	4630      	mov	r0, r6
 8005bd8:	b00b      	add	sp, #44	; 0x2c
 8005bda:	ecbd 8b08 	vpop	{d8-d11}
 8005bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005be2:	4630      	mov	r0, r6
 8005be4:	f7ff fd92 	bl	800570c <acc_rss_integration_mem_free>
 8005be8:	4620      	mov	r0, r4
 8005bea:	f7ff fd8f 	bl	800570c <acc_rss_integration_mem_free>
 8005bee:	2600      	movs	r6, #0
 8005bf0:	4630      	mov	r0, r6
 8005bf2:	b00b      	add	sp, #44	; 0x2c
 8005bf4:	ecbd 8b08 	vpop	{d8-d11}
 8005bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bfc:	200004c0 	.word	0x200004c0
 8005c00:	0800e8d4 	.word	0x0800e8d4
 8005c04:	0800e8c0 	.word	0x0800e8c0

08005c08 <destroy>:
 8005c08:	b510      	push	{r4, lr}
 8005c0a:	4604      	mov	r4, r0
 8005c0c:	6940      	ldr	r0, [r0, #20]
 8005c0e:	b118      	cbz	r0, 8005c18 <destroy+0x10>
 8005c10:	f7ff fd7c 	bl	800570c <acc_rss_integration_mem_free>
 8005c14:	2300      	movs	r3, #0
 8005c16:	6163      	str	r3, [r4, #20]
 8005c18:	bd10      	pop	{r4, pc}
 8005c1a:	bf00      	nop

08005c1c <process_data>:
 8005c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c20:	6944      	ldr	r4, [r0, #20]
 8005c22:	f8b4 70ce 	ldrh.w	r7, [r4, #206]	; 0xce
 8005c26:	b917      	cbnz	r7, 8005c2e <process_data+0x12>
 8005c28:	2001      	movs	r0, #1
 8005c2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c2e:	f8b4 c0c8 	ldrh.w	ip, [r4, #200]	; 0xc8
 8005c32:	f8b4 80c4 	ldrh.w	r8, [r4, #196]	; 0xc4
 8005c36:	f8b4 e0cc 	ldrh.w	lr, [r4, #204]	; 0xcc
 8005c3a:	461d      	mov	r5, r3
 8005c3c:	4616      	mov	r6, r2
 8005c3e:	237c      	movs	r3, #124	; 0x7c
 8005c40:	680a      	ldr	r2, [r1, #0]
 8005c42:	fbb3 f3fe 	udiv	r3, r3, lr
 8005c46:	fb03 f30c 	mul.w	r3, r3, ip
 8005c4a:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 8005c4e:	eb02 0803 	add.w	r8, r2, r3
 8005c52:	4642      	mov	r2, r8
 8005c54:	6801      	ldr	r1, [r0, #0]
 8005c56:	463b      	mov	r3, r7
 8005c58:	2001      	movs	r0, #1
 8005c5a:	f002 f875 	bl	8007d48 <acc_probes_execute_uint16>
 8005c5e:	f8b4 10ce 	ldrh.w	r1, [r4, #206]	; 0xce
 8005c62:	4640      	mov	r0, r8
 8005c64:	f001 ff5a 	bl	8007b1c <acc_alg_cca_u16_calculate>
 8005c68:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8005ca4 <process_data+0x88>
 8005c6c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8005c6e:	ed85 0a01 	vstr	s0, [r5, #4]
 8005c72:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8005c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c7a:	bfcc      	ite	gt
 8005c7c:	2201      	movgt	r2, #1
 8005c7e:	2200      	movle	r2, #0
 8005c80:	702a      	strb	r2, [r5, #0]
 8005c82:	b14b      	cbz	r3, 8005c98 <process_data+0x7c>
 8005c84:	2200      	movs	r2, #0
 8005c86:	f8b4 10ce 	ldrh.w	r1, [r4, #206]	; 0xce
 8005c8a:	6833      	ldr	r3, [r6, #0]
 8005c8c:	722a      	strb	r2, [r5, #8]
 8005c8e:	1a5b      	subs	r3, r3, r1
 8005c90:	6033      	str	r3, [r6, #0]
 8005c92:	2001      	movs	r0, #1
 8005c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c98:	f894 20c0 	ldrb.w	r2, [r4, #192]	; 0xc0
 8005c9c:	f082 0201 	eor.w	r2, r2, #1
 8005ca0:	e7f1      	b.n	8005c86 <process_data+0x6a>
 8005ca2:	bf00      	nop
 8005ca4:	42640000 	.word	0x42640000

08005ca8 <transfer_data>:
 8005ca8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005cac:	6944      	ldr	r4, [r0, #20]
 8005cae:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
 8005cb2:	b089      	sub	sp, #36	; 0x24
 8005cb4:	4680      	mov	r8, r0
 8005cb6:	460f      	mov	r7, r1
 8005cb8:	4691      	mov	r9, r2
 8005cba:	b90b      	cbnz	r3, 8005cc0 <transfer_data+0x18>
 8005cbc:	f8a4 30c6 	strh.w	r3, [r4, #198]	; 0xc6
 8005cc0:	f8b4 20ce 	ldrh.w	r2, [r4, #206]	; 0xce
 8005cc4:	f8b4 50c8 	ldrh.w	r5, [r4, #200]	; 0xc8
 8005cc8:	f8b4 30cc 	ldrh.w	r3, [r4, #204]	; 0xcc
 8005ccc:	a902      	add	r1, sp, #8
 8005cce:	4620      	mov	r0, r4
 8005cd0:	267c      	movs	r6, #124	; 0x7c
 8005cd2:	fbb6 f3f3 	udiv	r3, r6, r3
 8005cd6:	fb03 2505 	mla	r5, r3, r5, r2
 8005cda:	f005 f925 	bl	800af28 <acc_cpd_linear_sweep_get_info>
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	9a02      	ldr	r2, [sp, #8]
 8005ce2:	f8b4 10c6 	ldrh.w	r1, [r4, #198]	; 0xc6
 8005ce6:	f8d8 0000 	ldr.w	r0, [r8]
 8005cea:	442a      	add	r2, r5
 8005cec:	4419      	add	r1, r3
 8005cee:	f001 fdd7 	bl	80078a0 <acc_sensor_protocol_r2_transfer_data>
 8005cf2:	f104 02bc 	add.w	r2, r4, #188	; 0xbc
 8005cf6:	ab01      	add	r3, sp, #4
 8005cf8:	4621      	mov	r1, r4
 8005cfa:	4680      	mov	r8, r0
 8005cfc:	f005 f92c 	bl	800af58 <acc_cpd_linear_sweep_check>
 8005d00:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005d04:	3b00      	subs	r3, #0
 8005d06:	bf18      	it	ne
 8005d08:	2301      	movne	r3, #1
 8005d0a:	a902      	add	r1, sp, #8
 8005d0c:	f889 3000 	strb.w	r3, [r9]
 8005d10:	4620      	mov	r0, r4
 8005d12:	f005 f909 	bl	800af28 <acc_cpd_linear_sweep_get_info>
 8005d16:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
 8005d1a:	6838      	ldr	r0, [r7, #0]
 8005d1c:	9902      	ldr	r1, [sp, #8]
 8005d1e:	006a      	lsls	r2, r5, #1
 8005d20:	eb08 0141 	add.w	r1, r8, r1, lsl #1
 8005d24:	4418      	add	r0, r3
 8005d26:	f007 f8d7 	bl	800ced8 <memmove>
 8005d2a:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
 8005d2e:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
 8005d32:	f8b4 10cc 	ldrh.w	r1, [r4, #204]	; 0xcc
 8005d36:	fbb6 f6f1 	udiv	r6, r6, r1
 8005d3a:	fb03 f306 	mul.w	r3, r3, r6
 8005d3e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8005d42:	4628      	mov	r0, r5
 8005d44:	f8a4 30c6 	strh.w	r3, [r4, #198]	; 0xc6
 8005d48:	f8a4 20c4 	strh.w	r2, [r4, #196]	; 0xc4
 8005d4c:	b009      	add	sp, #36	; 0x24
 8005d4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005d52:	bf00      	nop

08005d54 <measure_noise>:
 8005d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d58:	b0b7      	sub	sp, #220	; 0xdc
 8005d5a:	4604      	mov	r4, r0
 8005d5c:	4688      	mov	r8, r1
 8005d5e:	4616      	mov	r6, r2
 8005d60:	f7ff fce6 	bl	8005730 <acc_rss_integration_log_level>
 8005d64:	2803      	cmp	r0, #3
 8005d66:	d905      	bls.n	8005d74 <measure_noise+0x20>
 8005d68:	4b41      	ldr	r3, [pc, #260]	; (8005e70 <measure_noise+0x11c>)
 8005d6a:	4a42      	ldr	r2, [pc, #264]	; (8005e74 <measure_noise+0x120>)
 8005d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d6e:	4942      	ldr	r1, [pc, #264]	; (8005e78 <measure_noise+0x124>)
 8005d70:	2004      	movs	r0, #4
 8005d72:	4798      	blx	r3
 8005d74:	f8d4 9014 	ldr.w	r9, [r4, #20]
 8005d78:	f8d4 a000 	ldr.w	sl, [r4]
 8005d7c:	4649      	mov	r1, r9
 8005d7e:	22bc      	movs	r2, #188	; 0xbc
 8005d80:	a807      	add	r0, sp, #28
 8005d82:	f007 f907 	bl	800cf94 <memcpy>
 8005d86:	9d30      	ldr	r5, [sp, #192]	; 0xc0
 8005d88:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8005d8c:	f8d8 1000 	ldr.w	r1, [r8]
 8005d90:	f8b9 b0cc 	ldrh.w	fp, [r9, #204]	; 0xcc
 8005d94:	00ad      	lsls	r5, r5, #2
 8005d96:	1e6f      	subs	r7, r5, #1
 8005d98:	972c      	str	r7, [sp, #176]	; 0xb0
 8005d9a:	2702      	movs	r7, #2
 8005d9c:	2400      	movs	r4, #0
 8005d9e:	ab07      	add	r3, sp, #28
 8005da0:	972d      	str	r7, [sp, #180]	; 0xb4
 8005da2:	4650      	mov	r0, sl
 8005da4:	2701      	movs	r7, #1
 8005da6:	971d      	str	r7, [sp, #116]	; 0x74
 8005da8:	9422      	str	r4, [sp, #136]	; 0x88
 8005daa:	941c      	str	r4, [sp, #112]	; 0x70
 8005dac:	f88d 40c8 	strb.w	r4, [sp, #200]	; 0xc8
 8005db0:	9434      	str	r4, [sp, #208]	; 0xd0
 8005db2:	f004 fb2b 	bl	800a40c <acc_cpd_linear_sweep_load_program>
 8005db6:	4650      	mov	r0, sl
 8005db8:	f005 f860 	bl	800ae7c <acc_cpd_linear_sweep_run_program>
 8005dbc:	4650      	mov	r0, sl
 8005dbe:	466b      	mov	r3, sp
 8005dc0:	2264      	movs	r2, #100	; 0x64
 8005dc2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8005dc6:	f001 fc21 	bl	800760c <acc_sensor_protocol_r2_wait_for_event>
 8005dca:	4607      	mov	r7, r0
 8005dcc:	b918      	cbnz	r0, 8005dd6 <measure_noise+0x82>
 8005dce:	4638      	mov	r0, r7
 8005dd0:	b037      	add	sp, #220	; 0xdc
 8005dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dd6:	a901      	add	r1, sp, #4
 8005dd8:	4648      	mov	r0, r9
 8005dda:	237c      	movs	r3, #124	; 0x7c
 8005ddc:	f8d8 8000 	ldr.w	r8, [r8]
 8005de0:	fbb3 fbfb 	udiv	fp, r3, fp
 8005de4:	b2ad      	uxth	r5, r5
 8005de6:	f005 f89f 	bl	800af28 <acc_cpd_linear_sweep_get_info>
 8005dea:	9a01      	ldr	r2, [sp, #4]
 8005dec:	fb0b f505 	mul.w	r5, fp, r5
 8005df0:	4641      	mov	r1, r8
 8005df2:	442a      	add	r2, r5
 8005df4:	4650      	mov	r0, sl
 8005df6:	f001 fd53 	bl	80078a0 <acc_sensor_protocol_r2_transfer_data>
 8005dfa:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8005dfe:	4680      	mov	r8, r0
 8005e00:	4650      	mov	r0, sl
 8005e02:	f001 fc9b 	bl	800773c <acc_sensor_protocol_r2_stop>
 8005e06:	4648      	mov	r0, r9
 8005e08:	a901      	add	r1, sp, #4
 8005e0a:	f005 f88d 	bl	800af28 <acc_cpd_linear_sweep_get_info>
 8005e0e:	9801      	ldr	r0, [sp, #4]
 8005e10:	2d0e      	cmp	r5, #14
 8005e12:	eb08 0040 	add.w	r0, r8, r0, lsl #1
 8005e16:	d91c      	bls.n	8005e52 <measure_noise+0xfe>
 8005e18:	006a      	lsls	r2, r5, #1
 8005e1a:	3a02      	subs	r2, #2
 8005e1c:	f100 011a 	add.w	r1, r0, #26
 8005e20:	eb00 0e02 	add.w	lr, r0, r2
 8005e24:	460b      	mov	r3, r1
 8005e26:	f833 cf02 	ldrh.w	ip, [r3, #2]!
 8005e2a:	459e      	cmp	lr, r3
 8005e2c:	4464      	add	r4, ip
 8005e2e:	d1fa      	bne.n	8005e26 <measure_noise+0xd2>
 8005e30:	4410      	add	r0, r2
 8005e32:	2200      	movs	r2, #0
 8005e34:	3d0e      	subs	r5, #14
 8005e36:	fbb4 f4f5 	udiv	r4, r4, r5
 8005e3a:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 8005e3e:	1b1b      	subs	r3, r3, r4
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	bfb8      	it	lt
 8005e44:	425b      	neglt	r3, r3
 8005e46:	4288      	cmp	r0, r1
 8005e48:	441a      	add	r2, r3
 8005e4a:	d1f6      	bne.n	8005e3a <measure_noise+0xe6>
 8005e4c:	fbb2 f4f5 	udiv	r4, r2, r5
 8005e50:	b2a4      	uxth	r4, r4
 8005e52:	8034      	strh	r4, [r6, #0]
 8005e54:	f7ff fc6c 	bl	8005730 <acc_rss_integration_log_level>
 8005e58:	2803      	cmp	r0, #3
 8005e5a:	d9b8      	bls.n	8005dce <measure_noise+0x7a>
 8005e5c:	4b04      	ldr	r3, [pc, #16]	; (8005e70 <measure_noise+0x11c>)
 8005e5e:	4a07      	ldr	r2, [pc, #28]	; (8005e7c <measure_noise+0x128>)
 8005e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e62:	4905      	ldr	r1, [pc, #20]	; (8005e78 <measure_noise+0x124>)
 8005e64:	2004      	movs	r0, #4
 8005e66:	4798      	blx	r3
 8005e68:	4638      	mov	r0, r7
 8005e6a:	b037      	add	sp, #220	; 0xdc
 8005e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e70:	200004c0 	.word	0x200004c0
 8005e74:	0800e8f4 	.word	0x0800e8f4
 8005e78:	0800e918 	.word	0x0800e918
 8005e7c:	0800e92c 	.word	0x0800e92c

08005e80 <calibrate>:
 8005e80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005e84:	b09b      	sub	sp, #108	; 0x6c
 8005e86:	4604      	mov	r4, r0
 8005e88:	460d      	mov	r5, r1
 8005e8a:	4616      	mov	r6, r2
 8005e8c:	461f      	mov	r7, r3
 8005e8e:	f7ff fc4f 	bl	8005730 <acc_rss_integration_log_level>
 8005e92:	2803      	cmp	r0, #3
 8005e94:	d905      	bls.n	8005ea2 <calibrate+0x22>
 8005e96:	4b46      	ldr	r3, [pc, #280]	; (8005fb0 <calibrate+0x130>)
 8005e98:	4a46      	ldr	r2, [pc, #280]	; (8005fb4 <calibrate+0x134>)
 8005e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e9c:	4946      	ldr	r1, [pc, #280]	; (8005fb8 <calibrate+0x138>)
 8005e9e:	2004      	movs	r0, #4
 8005ea0:	4798      	blx	r3
 8005ea2:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8005ea6:	6824      	ldr	r4, [r4, #0]
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	f8c8 30bc 	str.w	r3, [r8, #188]	; 0xbc
 8005eae:	f7ff fb8f 	bl	80055d0 <acc_rss_integration_get_sensor_reference_frequency>
 8005eb2:	a812      	add	r0, sp, #72	; 0x48
 8005eb4:	a902      	add	r1, sp, #8
 8005eb6:	ed8d 0a12 	vstr	s0, [sp, #72]	; 0x48
 8005eba:	f001 fffb 	bl	8007eb4 <acc_cpd_pll_divisors_calculate>
 8005ebe:	b920      	cbnz	r0, 8005eca <calibrate+0x4a>
 8005ec0:	2400      	movs	r4, #0
 8005ec2:	4620      	mov	r0, r4
 8005ec4:	b01b      	add	sp, #108	; 0x6c
 8005ec6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005eca:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8005ece:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8005ed2:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8005ed6:	f8bd c010 	ldrh.w	ip, [sp, #16]
 8005eda:	9207      	str	r2, [sp, #28]
 8005edc:	e9cd 4305 	strd	r4, r3, [sp, #20]
 8005ee0:	9008      	str	r0, [sp, #32]
 8005ee2:	6869      	ldr	r1, [r5, #4]
 8005ee4:	6828      	ldr	r0, [r5, #0]
 8005ee6:	f8ad c024 	strh.w	ip, [sp, #36]	; 0x24
 8005eea:	466b      	mov	r3, sp
 8005eec:	aa05      	add	r2, sp, #20
 8005eee:	f002 ff0d 	bl	8008d0c <acc_cpd_cbank_and_vana_calibration>
 8005ef2:	2800      	cmp	r0, #0
 8005ef4:	d0e4      	beq.n	8005ec0 <calibrate+0x40>
 8005ef6:	f8b8 90ce 	ldrh.w	r9, [r8, #206]	; 0xce
 8005efa:	f898 10d0 	ldrb.w	r1, [r8, #208]	; 0xd0
 8005efe:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8005f02:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
 8005f06:	f1b9 0000 	subs.w	r0, r9, #0
 8005f0a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8005f0e:	920b      	str	r2, [sp, #44]	; 0x2c
 8005f10:	bf18      	it	ne
 8005f12:	2001      	movne	r0, #1
 8005f14:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8005f18:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
 8005f1c:	910c      	str	r1, [sp, #48]	; 0x30
 8005f1e:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8005f22:	9900      	ldr	r1, [sp, #0]
 8005f24:	940a      	str	r4, [sp, #40]	; 0x28
 8005f26:	900d      	str	r0, [sp, #52]	; 0x34
 8005f28:	f89d 4004 	ldrb.w	r4, [sp, #4]
 8005f2c:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8005f30:	910f      	str	r1, [sp, #60]	; 0x3c
 8005f32:	ab12      	add	r3, sp, #72	; 0x48
 8005f34:	e9d5 0100 	ldrd	r0, r1, [r5]
 8005f38:	aa0a      	add	r2, sp, #40	; 0x28
 8005f3a:	9410      	str	r4, [sp, #64]	; 0x40
 8005f3c:	f8ad 9046 	strh.w	r9, [sp, #70]	; 0x46
 8005f40:	f003 f936 	bl	80091b0 <acc_cpd_dll_calibration>
 8005f44:	4604      	mov	r4, r0
 8005f46:	f1b9 0f00 	cmp.w	r9, #0
 8005f4a:	d004      	beq.n	8005f56 <calibrate+0xd6>
 8005f4c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005f4e:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
 8005f52:	607a      	str	r2, [r7, #4]
 8005f54:	703b      	strb	r3, [r7, #0]
 8005f56:	2c00      	cmp	r4, #0
 8005f58:	d0b2      	beq.n	8005ec0 <calibrate+0x40>
 8005f5a:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	; 0x48
 8005f5e:	9b00      	ldr	r3, [sp, #0]
 8005f60:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8005f64:	80b3      	strh	r3, [r6, #4]
 8005f66:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005f68:	80f0      	strh	r0, [r6, #6]
 8005f6a:	8131      	strh	r1, [r6, #8]
 8005f6c:	f8bd 0054 	ldrh.w	r0, [sp, #84]	; 0x54
 8005f70:	f8bd 1056 	ldrh.w	r1, [sp, #86]	; 0x56
 8005f74:	8172      	strh	r2, [r6, #10]
 8005f76:	81b3      	strh	r3, [r6, #12]
 8005f78:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
 8005f7c:	81f0      	strh	r0, [r6, #14]
 8005f7e:	2306      	movs	r3, #6
 8005f80:	8231      	strh	r1, [r6, #16]
 8005f82:	8272      	strh	r2, [r6, #18]
 8005f84:	6033      	str	r3, [r6, #0]
 8005f86:	f7ff fbd3 	bl	8005730 <acc_rss_integration_log_level>
 8005f8a:	2803      	cmp	r0, #3
 8005f8c:	d905      	bls.n	8005f9a <calibrate+0x11a>
 8005f8e:	4b08      	ldr	r3, [pc, #32]	; (8005fb0 <calibrate+0x130>)
 8005f90:	4a0a      	ldr	r2, [pc, #40]	; (8005fbc <calibrate+0x13c>)
 8005f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f94:	4908      	ldr	r1, [pc, #32]	; (8005fb8 <calibrate+0x138>)
 8005f96:	2004      	movs	r0, #4
 8005f98:	4798      	blx	r3
 8005f9a:	f7ff fbc9 	bl	8005730 <acc_rss_integration_log_level>
 8005f9e:	2801      	cmp	r0, #1
 8005fa0:	d98f      	bls.n	8005ec2 <calibrate+0x42>
 8005fa2:	4b03      	ldr	r3, [pc, #12]	; (8005fb0 <calibrate+0x130>)
 8005fa4:	4a06      	ldr	r2, [pc, #24]	; (8005fc0 <calibrate+0x140>)
 8005fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fa8:	4903      	ldr	r1, [pc, #12]	; (8005fb8 <calibrate+0x138>)
 8005faa:	2002      	movs	r0, #2
 8005fac:	4798      	blx	r3
 8005fae:	e788      	b.n	8005ec2 <calibrate+0x42>
 8005fb0:	200004c0 	.word	0x200004c0
 8005fb4:	0800e94c 	.word	0x0800e94c
 8005fb8:	0800e918 	.word	0x0800e918
 8005fbc:	0800e96c 	.word	0x0800e96c
 8005fc0:	0800e988 	.word	0x0800e988

08005fc4 <set_calibration_context>:
 8005fc4:	b570      	push	{r4, r5, r6, lr}
 8005fc6:	680b      	ldr	r3, [r1, #0]
 8005fc8:	2b06      	cmp	r3, #6
 8005fca:	b08c      	sub	sp, #48	; 0x30
 8005fcc:	d00b      	beq.n	8005fe6 <set_calibration_context+0x22>
 8005fce:	4929      	ldr	r1, [pc, #164]	; (8006074 <set_calibration_context+0xb0>)
 8005fd0:	4a29      	ldr	r2, [pc, #164]	; (8006078 <set_calibration_context+0xb4>)
 8005fd2:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 8005fd4:	4929      	ldr	r1, [pc, #164]	; (800607c <set_calibration_context+0xb8>)
 8005fd6:	2006      	movs	r0, #6
 8005fd8:	9000      	str	r0, [sp, #0]
 8005fda:	2000      	movs	r0, #0
 8005fdc:	47a0      	blx	r4
 8005fde:	2600      	movs	r6, #0
 8005fe0:	4630      	mov	r0, r6
 8005fe2:	b00c      	add	sp, #48	; 0x30
 8005fe4:	bd70      	pop	{r4, r5, r6, pc}
 8005fe6:	460d      	mov	r5, r1
 8005fe8:	4604      	mov	r4, r0
 8005fea:	f7ff faf1 	bl	80055d0 <acc_rss_integration_get_sensor_reference_frequency>
 8005fee:	a806      	add	r0, sp, #24
 8005ff0:	a903      	add	r1, sp, #12
 8005ff2:	ed8d 0a06 	vstr	s0, [sp, #24]
 8005ff6:	f001 ff5d 	bl	8007eb4 <acc_cpd_pll_divisors_calculate>
 8005ffa:	4606      	mov	r6, r0
 8005ffc:	2800      	cmp	r0, #0
 8005ffe:	d0ef      	beq.n	8005fe0 <set_calibration_context+0x1c>
 8006000:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8006004:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8006008:	6063      	str	r3, [r4, #4]
 800600a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800600e:	60a2      	str	r2, [r4, #8]
 8006010:	6023      	str	r3, [r4, #0]
 8006012:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8006016:	88ab      	ldrh	r3, [r5, #4]
 8006018:	81a2      	strh	r2, [r4, #12]
 800601a:	88ea      	ldrh	r2, [r5, #6]
 800601c:	6123      	str	r3, [r4, #16]
 800601e:	892b      	ldrh	r3, [r5, #8]
 8006020:	6162      	str	r2, [r4, #20]
 8006022:	896a      	ldrh	r2, [r5, #10]
 8006024:	61a3      	str	r3, [r4, #24]
 8006026:	89ab      	ldrh	r3, [r5, #12]
 8006028:	61e2      	str	r2, [r4, #28]
 800602a:	8a2a      	ldrh	r2, [r5, #16]
 800602c:	6223      	str	r3, [r4, #32]
 800602e:	8a6b      	ldrh	r3, [r5, #18]
 8006030:	89e8      	ldrh	r0, [r5, #14]
 8006032:	84a2      	strh	r2, [r4, #36]	; 0x24
 8006034:	84e3      	strh	r3, [r4, #38]	; 0x26
 8006036:	aa06      	add	r2, sp, #24
 8006038:	217c      	movs	r1, #124	; 0x7c
 800603a:	f002 f821 	bl	8008080 <acc_dll_calculate_area_settings>
 800603e:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 8006042:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 8006046:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800604a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800604e:	62a0      	str	r0, [r4, #40]	; 0x28
 8006050:	62e1      	str	r1, [r4, #44]	; 0x2c
 8006052:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
 8006056:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 800605a:	6322      	str	r2, [r4, #48]	; 0x30
 800605c:	6363      	str	r3, [r4, #52]	; 0x34
 800605e:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8006062:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8006066:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
 800606a:	4630      	mov	r0, r6
 800606c:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
 8006070:	b00c      	add	sp, #48	; 0x30
 8006072:	bd70      	pop	{r4, r5, r6, pc}
 8006074:	200004c0 	.word	0x200004c0
 8006078:	0800e9a8 	.word	0x0800e9a8
 800607c:	0800e918 	.word	0x0800e918

08006080 <get_package_range_coarse_max>:
 8006080:	b530      	push	{r4, r5, lr}
 8006082:	f8b0 50cc 	ldrh.w	r5, [r0, #204]	; 0xcc
 8006086:	b087      	sub	sp, #28
 8006088:	b185      	cbz	r5, 80060ac <get_package_range_coarse_max+0x2c>
 800608a:	4604      	mov	r4, r0
 800608c:	4669      	mov	r1, sp
 800608e:	f004 ff4b 	bl	800af28 <acc_cpd_linear_sweep_get_info>
 8006092:	9b00      	ldr	r3, [sp, #0]
 8006094:	f8b4 00ce 	ldrh.w	r0, [r4, #206]	; 0xce
 8006098:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 800609c:	1a1b      	subs	r3, r3, r0
 800609e:	207c      	movs	r0, #124	; 0x7c
 80060a0:	fbb0 f0f5 	udiv	r0, r0, r5
 80060a4:	fbb3 f0f0 	udiv	r0, r3, r0
 80060a8:	b007      	add	sp, #28
 80060aa:	bd30      	pop	{r4, r5, pc}
 80060ac:	4802      	ldr	r0, [pc, #8]	; (80060b8 <get_package_range_coarse_max+0x38>)
 80060ae:	f44f 71a9 	mov.w	r1, #338	; 0x152
 80060b2:	f001 fd61 	bl	8007b78 <acc_assert_fail>
 80060b6:	bf00      	nop
 80060b8:	0800e918 	.word	0x0800e918

080060bc <initialize>:
 80060bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060c0:	460d      	mov	r5, r1
 80060c2:	f891 1032 	ldrb.w	r1, [r1, #50]	; 0x32
 80060c6:	2906      	cmp	r1, #6
 80060c8:	b08f      	sub	sp, #60	; 0x3c
 80060ca:	4606      	mov	r6, r0
 80060cc:	4690      	mov	r8, r2
 80060ce:	461f      	mov	r7, r3
 80060d0:	d00d      	beq.n	80060ee <initialize+0x32>
 80060d2:	2909      	cmp	r1, #9
 80060d4:	d00b      	beq.n	80060ee <initialize+0x32>
 80060d6:	4ba8      	ldr	r3, [pc, #672]	; (8006378 <initialize+0x2bc>)
 80060d8:	4aa8      	ldr	r2, [pc, #672]	; (800637c <initialize+0x2c0>)
 80060da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060dc:	49a8      	ldr	r1, [pc, #672]	; (8006380 <initialize+0x2c4>)
 80060de:	2000      	movs	r0, #0
 80060e0:	4798      	blx	r3
 80060e2:	f04f 0900 	mov.w	r9, #0
 80060e6:	4648      	mov	r0, r9
 80060e8:	b00f      	add	sp, #60	; 0x3c
 80060ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060ee:	aa06      	add	r2, sp, #24
 80060f0:	f10d 0116 	add.w	r1, sp, #22
 80060f4:	4628      	mov	r0, r5
 80060f6:	6974      	ldr	r4, [r6, #20]
 80060f8:	f7ff f91a 	bl	8005330 <acc_base_configuration_cca_get>
 80060fc:	2800      	cmp	r0, #0
 80060fe:	d03f      	beq.n	8006180 <initialize+0xc4>
 8006100:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8006104:	f89d 0016 	ldrb.w	r0, [sp, #22]
 8006108:	f8a4 30ce 	strh.w	r3, [r4, #206]	; 0xce
 800610c:	f884 00d0 	strb.w	r0, [r4, #208]	; 0xd0
 8006110:	4628      	mov	r0, r5
 8006112:	f7ff f89f 	bl	8005254 <acc_base_configuration_downsampling_factor_get>
 8006116:	2300      	movs	r3, #0
 8006118:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
 800611c:	f8a4 00cc 	strh.w	r0, [r4, #204]	; 0xcc
 8006120:	4628      	mov	r0, r5
 8006122:	f7fe fef9 	bl	8004f18 <acc_base_configuration_tx_disable_get>
 8006126:	f04f 0b01 	mov.w	fp, #1
 800612a:	f884 00c0 	strb.w	r0, [r4, #192]	; 0xc0
 800612e:	f884 b0ad 	strb.w	fp, [r4, #173]	; 0xad
 8006132:	4620      	mov	r0, r4
 8006134:	f7ff ffa4 	bl	8006080 <get_package_range_coarse_max>
 8006138:	4b92      	ldr	r3, [pc, #584]	; (8006384 <initialize+0x2c8>)
 800613a:	b280      	uxth	r0, r0
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	9002      	str	r0, [sp, #8]
 8006140:	237c      	movs	r3, #124	; 0x7c
 8006142:	f106 0a04 	add.w	sl, r6, #4
 8006146:	9201      	str	r2, [sp, #4]
 8006148:	9300      	str	r3, [sp, #0]
 800614a:	4652      	mov	r2, sl
 800614c:	463b      	mov	r3, r7
 800614e:	4641      	mov	r1, r8
 8006150:	4628      	mov	r0, r5
 8006152:	f000 fa95 	bl	8006680 <acc_radar_engine_common_sweep_w_dly_initialize_range>
 8006156:	4681      	mov	r9, r0
 8006158:	2800      	cmp	r0, #0
 800615a:	d0c4      	beq.n	80060e6 <initialize+0x2a>
 800615c:	4628      	mov	r0, r5
 800615e:	f7ff f815 	bl	800518c <acc_base_configuration_sweep_type_debug_get>
 8006162:	b980      	cbnz	r0, 8006186 <initialize+0xca>
 8006164:	e9c4 0b12 	strd	r0, fp, [r4, #72]	; 0x48
 8006168:	2300      	movs	r3, #0
 800616a:	6523      	str	r3, [r4, #80]	; 0x50
 800616c:	4628      	mov	r0, r5
 800616e:	f7fe ff8d 	bl	800508c <acc_base_configuration_repetition_mode_get>
 8006172:	2803      	cmp	r0, #3
 8006174:	f200 80d8 	bhi.w	8006328 <initialize+0x26c>
 8006178:	e8df f000 	tbb	[pc, r0]
 800617c:	0abfd9d1 	.word	0x0abfd9d1
 8006180:	f8a4 00ce 	strh.w	r0, [r4, #206]	; 0xce
 8006184:	e7c2      	b.n	800610c <initialize+0x50>
 8006186:	2300      	movs	r3, #0
 8006188:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
 800618c:	64e3      	str	r3, [r4, #76]	; 0x4c
 800618e:	e7eb      	b.n	8006168 <initialize+0xac>
 8006190:	4628      	mov	r0, r5
 8006192:	f10d 0b20 	add.w	fp, sp, #32
 8006196:	f7fe ff81 	bl	800509c <acc_base_configuration_update_rate_get>
 800619a:	a907      	add	r1, sp, #28
 800619c:	4658      	mov	r0, fp
 800619e:	f000 fa27 	bl	80065f0 <acc_radar_engine_common_frequency_to_main_clk>
 80061a2:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 80061a6:	2301      	movs	r3, #1
 80061a8:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
 80061ac:	e9c4 1217 	strd	r1, r2, [r4, #92]	; 0x5c
 80061b0:	4628      	mov	r0, r5
 80061b2:	f7fe fea1 	bl	8004ef8 <acc_base_configuration_power_save_mode_get>
 80061b6:	2804      	cmp	r0, #4
 80061b8:	d807      	bhi.n	80061ca <initialize+0x10e>
 80061ba:	e8df f000 	tbb	[pc, r0]
 80061be:	0303      	.short	0x0303
 80061c0:	c1c5      	.short	0xc1c5
 80061c2:	03          	.byte	0x03
 80061c3:	00          	.byte	0x00
 80061c4:	2301      	movs	r3, #1
 80061c6:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
 80061ca:	f10d 021a 	add.w	r2, sp, #26
 80061ce:	f10d 0117 	add.w	r1, sp, #23
 80061d2:	4628      	mov	r0, r5
 80061d4:	f7ff f8ac 	bl	8005330 <acc_base_configuration_cca_get>
 80061d8:	2800      	cmp	r0, #0
 80061da:	f000 80ba 	beq.w	8006352 <initialize+0x296>
 80061de:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 80061e2:	2201      	movs	r2, #1
 80061e4:	3b01      	subs	r3, #1
 80061e6:	e9c4 232d 	strd	r2, r3, [r4, #180]	; 0xb4
 80061ea:	4628      	mov	r0, r5
 80061ec:	f7fe fe94 	bl	8004f18 <acc_base_configuration_tx_disable_get>
 80061f0:	2800      	cmp	r0, #0
 80061f2:	f000 80bb 	beq.w	800636c <initialize+0x2b0>
 80061f6:	2000      	movs	r0, #0
 80061f8:	66e0      	str	r0, [r4, #108]	; 0x6c
 80061fa:	4628      	mov	r0, r5
 80061fc:	f7fe fea0 	bl	8004f40 <acc_base_configuration_decrease_tx_emission_get>
 8006200:	f080 0001 	eor.w	r0, r0, #1
 8006204:	2301      	movs	r3, #1
 8006206:	b2c0      	uxtb	r0, r0
 8006208:	e9c4 031c 	strd	r0, r3, [r4, #112]	; 0x70
 800620c:	4628      	mov	r0, r5
 800620e:	f7fe feab 	bl	8004f68 <acc_base_configuration_hw_accelerated_average_samples_get>
 8006212:	3801      	subs	r0, #1
 8006214:	67a0      	str	r0, [r4, #120]	; 0x78
 8006216:	4628      	mov	r0, r5
 8006218:	f7fe ff58 	bl	80050cc <acc_base_configuration_gain_get>
 800621c:	67e0      	str	r0, [r4, #124]	; 0x7c
 800621e:	4628      	mov	r0, r5
 8006220:	f7fe ff64 	bl	80050ec <acc_base_configuration_integrator_get>
 8006224:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
 8006228:	4628      	mov	r0, r5
 800622a:	f7fe ff87 	bl	800513c <acc_base_configuration_integrator_ramp_up_get>
 800622e:	3801      	subs	r0, #1
 8006230:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 8006234:	4628      	mov	r0, r5
 8006236:	f7fe ff6d 	bl	8005114 <acc_base_configuration_wg_duration_get>
 800623a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 800623e:	4628      	mov	r0, r5
 8006240:	f7fe ffea 	bl	8005218 <acc_base_configuration_bba_fast_refresh_disable_get>
 8006244:	f884 008d 	strb.w	r0, [r4, #141]	; 0x8d
 8006248:	4628      	mov	r0, r5
 800624a:	f7ff f803 	bl	8005254 <acc_base_configuration_downsampling_factor_get>
 800624e:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
 8006252:	4628      	mov	r0, r5
 8006254:	f7fe ffcc 	bl	80051f0 <acc_base_configuration_bba_reset_clocksync_perturbation_get>
 8006258:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c
 800625c:	4628      	mov	r0, r5
 800625e:	f7fe ffd1 	bl	8005204 <acc_base_configuration_bba_linear_resync_perturbation_get>
 8006262:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
 8006266:	4628      	mov	r0, r5
 8006268:	f7ff f826 	bl	80052b8 <acc_base_configuration_asynchronous_measurement_get>
 800626c:	88b2      	ldrh	r2, [r6, #4]
 800626e:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8006272:	f080 0001 	eor.w	r0, r0, #1
 8006276:	2301      	movs	r3, #1
 8006278:	f884 00ac 	strb.w	r0, [r4, #172]	; 0xac
 800627c:	f884 30ad 	strb.w	r3, [r4, #173]	; 0xad
 8006280:	4650      	mov	r0, sl
 8006282:	f000 fcc9 	bl	8006c18 <acc_radar_engine_common_sweep_w_dly_stitching_required>
 8006286:	2800      	cmp	r0, #0
 8006288:	d16c      	bne.n	8006364 <initialize+0x2a8>
 800628a:	8970      	ldrh	r0, [r6, #10]
 800628c:	f9b6 3008 	ldrsh.w	r3, [r6, #8]
 8006290:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 8006294:	3801      	subs	r0, #1
 8006296:	88f3      	ldrh	r3, [r6, #6]
 8006298:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 800629c:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
 80062a0:	f7ff f996 	bl	80055d0 <acc_rss_integration_get_sensor_reference_frequency>
 80062a4:	893b      	ldrh	r3, [r7, #8]
 80062a6:	ed84 0a2c 	vstr	s0, [r4, #176]	; 0xb0
 80062aa:	f44f 7261 	mov.w	r2, #900	; 0x384
 80062ae:	f8a8 2014 	strh.w	r2, [r8, #20]
 80062b2:	f8b4 10cc 	ldrh.w	r1, [r4, #204]	; 0xcc
 80062b6:	227c      	movs	r2, #124	; 0x7c
 80062b8:	fbb2 f2f1 	udiv	r2, r2, r1
 80062bc:	fb03 f302 	mul.w	r3, r3, r2
 80062c0:	2200      	movs	r2, #0
 80062c2:	817b      	strh	r3, [r7, #10]
 80062c4:	833a      	strh	r2, [r7, #24]
 80062c6:	4659      	mov	r1, fp
 80062c8:	4620      	mov	r0, r4
 80062ca:	f004 fe2d 	bl	800af28 <acc_cpd_linear_sweep_get_info>
 80062ce:	465a      	mov	r2, fp
 80062d0:	6831      	ldr	r1, [r6, #0]
 80062d2:	2301      	movs	r3, #1
 80062d4:	2013      	movs	r0, #19
 80062d6:	f001 fd37 	bl	8007d48 <acc_probes_execute_uint16>
 80062da:	f000 fcf9 	bl	8006cd0 <acc_sensor_r2_get_max_header_length>
 80062de:	f8b4 20ce 	ldrh.w	r2, [r4, #206]	; 0xce
 80062e2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80062e6:	4413      	add	r3, r2
 80062e8:	4418      	add	r0, r3
 80062ea:	81f8      	strh	r0, [r7, #14]
 80062ec:	f44f 6316 	mov.w	r3, #2400	; 0x960
 80062f0:	4648      	mov	r0, r9
 80062f2:	81bb      	strh	r3, [r7, #12]
 80062f4:	b00f      	add	sp, #60	; 0x3c
 80062f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062fa:	4628      	mov	r0, r5
 80062fc:	f10d 0b20 	add.w	fp, sp, #32
 8006300:	f7fe fecc 	bl	800509c <acc_base_configuration_update_rate_get>
 8006304:	a907      	add	r1, sp, #28
 8006306:	4658      	mov	r0, fp
 8006308:	f000 f972 	bl	80065f0 <acc_radar_engine_common_frequency_to_main_clk>
 800630c:	2301      	movs	r3, #1
 800630e:	9a07      	ldr	r2, [sp, #28]
 8006310:	6563      	str	r3, [r4, #84]	; 0x54
 8006312:	2100      	movs	r1, #0
 8006314:	9b08      	ldr	r3, [sp, #32]
 8006316:	6623      	str	r3, [r4, #96]	; 0x60
 8006318:	e9c4 1216 	strd	r1, r2, [r4, #88]	; 0x58
 800631c:	e748      	b.n	80061b0 <initialize+0xf4>
 800631e:	2300      	movs	r3, #0
 8006320:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
 8006324:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
 8006328:	f10d 0b20 	add.w	fp, sp, #32
 800632c:	e740      	b.n	80061b0 <initialize+0xf4>
 800632e:	2300      	movs	r3, #0
 8006330:	2201      	movs	r2, #1
 8006332:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
 8006336:	6563      	str	r3, [r4, #84]	; 0x54
 8006338:	65a2      	str	r2, [r4, #88]	; 0x58
 800633a:	f10d 0b20 	add.w	fp, sp, #32
 800633e:	e737      	b.n	80061b0 <initialize+0xf4>
 8006340:	2300      	movs	r3, #0
 8006342:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
 8006346:	e740      	b.n	80061ca <initialize+0x10e>
 8006348:	2201      	movs	r2, #1
 800634a:	2300      	movs	r3, #0
 800634c:	e9c4 2319 	strd	r2, r3, [r4, #100]	; 0x64
 8006350:	e73b      	b.n	80061ca <initialize+0x10e>
 8006352:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
 8006356:	4628      	mov	r0, r5
 8006358:	f7fe fdde 	bl	8004f18 <acc_base_configuration_tx_disable_get>
 800635c:	f080 0001 	eor.w	r0, r0, #1
 8006360:	b2c0      	uxtb	r0, r0
 8006362:	e749      	b.n	80061f8 <initialize+0x13c>
 8006364:	6970      	ldr	r0, [r6, #20]
 8006366:	f7ff fe8b 	bl	8006080 <get_package_range_coarse_max>
 800636a:	e78f      	b.n	800628c <initialize+0x1d0>
 800636c:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8006370:	f080 0001 	eor.w	r0, r0, #1
 8006374:	e740      	b.n	80061f8 <initialize+0x13c>
 8006376:	bf00      	nop
 8006378:	200004c0 	.word	0x200004c0
 800637c:	0800e83c 	.word	0x0800e83c
 8006380:	0800e918 	.word	0x0800e918
 8006384:	0800ea98 	.word	0x0800ea98

08006388 <coarse_count_for_next_package>:
 8006388:	b538      	push	{r3, r4, r5, lr}
 800638a:	8983      	ldrh	r3, [r0, #12]
 800638c:	4604      	mov	r4, r0
 800638e:	6940      	ldr	r0, [r0, #20]
 8006390:	3b01      	subs	r3, #1
 8006392:	f8b0 20c2 	ldrh.w	r2, [r0, #194]	; 0xc2
 8006396:	b29b      	uxth	r3, r3
 8006398:	429a      	cmp	r2, r3
 800639a:	d109      	bne.n	80063b0 <coarse_count_for_next_package+0x28>
 800639c:	8965      	ldrh	r5, [r4, #10]
 800639e:	f7ff fe6f 	bl	8006080 <get_package_range_coarse_max>
 80063a2:	fbb5 f3f0 	udiv	r3, r5, r0
 80063a6:	fb03 5010 	mls	r0, r3, r0, r5
 80063aa:	b100      	cbz	r0, 80063ae <coarse_count_for_next_package+0x26>
 80063ac:	bd38      	pop	{r3, r4, r5, pc}
 80063ae:	6960      	ldr	r0, [r4, #20]
 80063b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80063b4:	f7ff be64 	b.w	8006080 <get_package_range_coarse_max>

080063b8 <update_program>:
 80063b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063bc:	6946      	ldr	r6, [r0, #20]
 80063be:	8987      	ldrh	r7, [r0, #12]
 80063c0:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
 80063c2:	f896 20c0 	ldrb.w	r2, [r6, #192]	; 0xc0
 80063c6:	460d      	mov	r5, r1
 80063c8:	fab3 f383 	clz	r3, r3
 80063cc:	2a00      	cmp	r2, #0
 80063ce:	bf18      	it	ne
 80063d0:	4611      	movne	r1, r2
 80063d2:	2f01      	cmp	r7, #1
 80063d4:	ea4f 1353 	mov.w	r3, r3, lsr #5
 80063d8:	bf94      	ite	ls
 80063da:	f04f 0900 	movls.w	r9, #0
 80063de:	f04f 0901 	movhi.w	r9, #1
 80063e2:	2f01      	cmp	r7, #1
 80063e4:	b085      	sub	sp, #20
 80063e6:	4604      	mov	r4, r0
 80063e8:	ea83 0a01 	eor.w	sl, r3, r1
 80063ec:	d933      	bls.n	8006456 <update_program+0x9e>
 80063ee:	f8b6 30c2 	ldrh.w	r3, [r6, #194]	; 0xc2
 80063f2:	f9b0 b008 	ldrsh.w	fp, [r0, #8]
 80063f6:	3301      	adds	r3, #1
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	fbb3 f8f7 	udiv	r8, r3, r7
 80063fe:	fb07 3718 	mls	r7, r7, r8, r3
 8006402:	fa1f f887 	uxth.w	r8, r7
 8006406:	f8a6 80c2 	strh.w	r8, [r6, #194]	; 0xc2
 800640a:	4630      	mov	r0, r6
 800640c:	f7ff fe38 	bl	8006080 <get_package_range_coarse_max>
 8006410:	4607      	mov	r7, r0
 8006412:	4620      	mov	r0, r4
 8006414:	f7ff ffb8 	bl	8006388 <coarse_count_for_next_package>
 8006418:	f896 20c0 	ldrb.w	r2, [r6, #192]	; 0xc0
 800641c:	f8c6 00c8 	str.w	r0, [r6, #200]	; 0xc8
 8006420:	fb07 b708 	mla	r7, r7, r8, fp
 8006424:	3801      	subs	r0, #1
 8006426:	e9cd 0701 	strd	r0, r7, [sp, #4]
 800642a:	f88d 9000 	strb.w	r9, [sp]
 800642e:	f88d 9001 	strb.w	r9, [sp, #1]
 8006432:	f88d a002 	strb.w	sl, [sp, #2]
 8006436:	b15a      	cbz	r2, 8006450 <update_program+0x98>
 8006438:	2500      	movs	r5, #0
 800643a:	6820      	ldr	r0, [r4, #0]
 800643c:	9503      	str	r5, [sp, #12]
 800643e:	4669      	mov	r1, sp
 8006440:	f004 fd20 	bl	800ae84 <acc_cpd_linear_sweep_update_program>
 8006444:	b108      	cbz	r0, 800644a <update_program+0x92>
 8006446:	9b03      	ldr	r3, [sp, #12]
 8006448:	66f3      	str	r3, [r6, #108]	; 0x6c
 800644a:	b005      	add	sp, #20
 800644c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006450:	f085 0501 	eor.w	r5, r5, #1
 8006454:	e7f1      	b.n	800643a <update_program+0x82>
 8006456:	428b      	cmp	r3, r1
 8006458:	d003      	beq.n	8006462 <update_program+0xaa>
 800645a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800645e:	2700      	movs	r7, #0
 8006460:	e7e1      	b.n	8006426 <update_program+0x6e>
 8006462:	2001      	movs	r0, #1
 8006464:	e7f1      	b.n	800644a <update_program+0x92>
 8006466:	bf00      	nop

08006468 <start>:
 8006468:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800646c:	6944      	ldr	r4, [r0, #20]
 800646e:	f8d4 70b4 	ldr.w	r7, [r4, #180]	; 0xb4
 8006472:	f894 80ac 	ldrb.w	r8, [r4, #172]	; 0xac
 8006476:	f8d4 906c 	ldr.w	r9, [r4, #108]	; 0x6c
 800647a:	2300      	movs	r3, #0
 800647c:	b085      	sub	sp, #20
 800647e:	4606      	mov	r6, r0
 8006480:	460d      	mov	r5, r1
 8006482:	f8a4 30c2 	strh.w	r3, [r4, #194]	; 0xc2
 8006486:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 800648a:	b117      	cbz	r7, 8006492 <start+0x2a>
 800648c:	f1b8 0f00 	cmp.w	r8, #0
 8006490:	d11f      	bne.n	80064d2 <start+0x6a>
 8006492:	4630      	mov	r0, r6
 8006494:	f7ff ff78 	bl	8006388 <coarse_count_for_next_package>
 8006498:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
 800649c:	f7ff f948 	bl	8005730 <acc_rss_integration_log_level>
 80064a0:	2803      	cmp	r0, #3
 80064a2:	d905      	bls.n	80064b0 <start+0x48>
 80064a4:	4b2b      	ldr	r3, [pc, #172]	; (8006554 <start+0xec>)
 80064a6:	4a2c      	ldr	r2, [pc, #176]	; (8006558 <start+0xf0>)
 80064a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064aa:	492c      	ldr	r1, [pc, #176]	; (800655c <start+0xf4>)
 80064ac:	2004      	movs	r0, #4
 80064ae:	4798      	blx	r3
 80064b0:	e9d5 1200 	ldrd	r1, r2, [r5]
 80064b4:	6830      	ldr	r0, [r6, #0]
 80064b6:	4623      	mov	r3, r4
 80064b8:	f003 ffa8 	bl	800a40c <acc_cpd_linear_sweep_load_program>
 80064bc:	4605      	mov	r5, r0
 80064be:	b950      	cbnz	r0, 80064d6 <start+0x6e>
 80064c0:	4b24      	ldr	r3, [pc, #144]	; (8006554 <start+0xec>)
 80064c2:	4a27      	ldr	r2, [pc, #156]	; (8006560 <start+0xf8>)
 80064c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064c6:	4925      	ldr	r1, [pc, #148]	; (800655c <start+0xf4>)
 80064c8:	4798      	blx	r3
 80064ca:	4628      	mov	r0, r5
 80064cc:	b005      	add	sp, #20
 80064ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80064d2:	66e3      	str	r3, [r4, #108]	; 0x6c
 80064d4:	e7dd      	b.n	8006492 <start+0x2a>
 80064d6:	6830      	ldr	r0, [r6, #0]
 80064d8:	f004 fcd0 	bl	800ae7c <acc_cpd_linear_sweep_run_program>
 80064dc:	4605      	mov	r5, r0
 80064de:	2800      	cmp	r0, #0
 80064e0:	d032      	beq.n	8006548 <start+0xe0>
 80064e2:	f1b8 0f00 	cmp.w	r8, #0
 80064e6:	d00f      	beq.n	8006508 <start+0xa0>
 80064e8:	6931      	ldr	r1, [r6, #16]
 80064ea:	6830      	ldr	r0, [r6, #0]
 80064ec:	f001 f9ae 	bl	800784c <acc_sensor_protocol_r2_wait_for_sync_start>
 80064f0:	b350      	cbz	r0, 8006548 <start+0xe0>
 80064f2:	f7ff f91d 	bl	8005730 <acc_rss_integration_log_level>
 80064f6:	2801      	cmp	r0, #1
 80064f8:	d905      	bls.n	8006506 <start+0x9e>
 80064fa:	4b16      	ldr	r3, [pc, #88]	; (8006554 <start+0xec>)
 80064fc:	4a19      	ldr	r2, [pc, #100]	; (8006564 <start+0xfc>)
 80064fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006500:	4916      	ldr	r1, [pc, #88]	; (800655c <start+0xf4>)
 8006502:	2002      	movs	r0, #2
 8006504:	4798      	blx	r3
 8006506:	b96f      	cbnz	r7, 8006524 <start+0xbc>
 8006508:	f7ff f912 	bl	8005730 <acc_rss_integration_log_level>
 800650c:	2803      	cmp	r0, #3
 800650e:	d9dc      	bls.n	80064ca <start+0x62>
 8006510:	4b10      	ldr	r3, [pc, #64]	; (8006554 <start+0xec>)
 8006512:	4a15      	ldr	r2, [pc, #84]	; (8006568 <start+0x100>)
 8006514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006516:	4911      	ldr	r1, [pc, #68]	; (800655c <start+0xf4>)
 8006518:	2004      	movs	r0, #4
 800651a:	4798      	blx	r3
 800651c:	4628      	mov	r0, r5
 800651e:	b005      	add	sp, #20
 8006520:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006524:	2300      	movs	r3, #0
 8006526:	2201      	movs	r2, #1
 8006528:	6830      	ldr	r0, [r6, #0]
 800652a:	f8c4 906c 	str.w	r9, [r4, #108]	; 0x6c
 800652e:	4669      	mov	r1, sp
 8006530:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8006534:	f8cd 900c 	str.w	r9, [sp, #12]
 8006538:	f8ad 3000 	strh.w	r3, [sp]
 800653c:	f88d 2002 	strb.w	r2, [sp, #2]
 8006540:	f004 fca0 	bl	800ae84 <acc_cpd_linear_sweep_update_program>
 8006544:	2800      	cmp	r0, #0
 8006546:	d1df      	bne.n	8006508 <start+0xa0>
 8006548:	2500      	movs	r5, #0
 800654a:	4628      	mov	r0, r5
 800654c:	b005      	add	sp, #20
 800654e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006552:	bf00      	nop
 8006554:	200004c0 	.word	0x200004c0
 8006558:	0800e9e8 	.word	0x0800e9e8
 800655c:	0800e918 	.word	0x0800e918
 8006560:	0800ea10 	.word	0x0800ea10
 8006564:	0800ea2c 	.word	0x0800ea2c
 8006568:	0800ea50 	.word	0x0800ea50

0800656c <acc_radar_engine_linear_create>:
 800656c:	b538      	push	{r3, r4, r5, lr}
 800656e:	4a11      	ldr	r2, [pc, #68]	; (80065b4 <acc_radar_engine_linear_create+0x48>)
 8006570:	4604      	mov	r4, r0
 8006572:	460d      	mov	r5, r1
 8006574:	f44f 7393 	mov.w	r3, #294	; 0x126
 8006578:	21d4      	movs	r1, #212	; 0xd4
 800657a:	2001      	movs	r0, #1
 800657c:	f7ff f8a8 	bl	80056d0 <acc_rss_integration_mem_calloc_debug>
 8006580:	6160      	str	r0, [r4, #20]
 8006582:	b1a8      	cbz	r0, 80065b0 <acc_radar_engine_linear_create+0x44>
 8006584:	4628      	mov	r0, r5
 8006586:	f7fe fc67 	bl	8004e58 <acc_base_configuration_sensor_get>
 800658a:	6020      	str	r0, [r4, #0]
 800658c:	4628      	mov	r0, r5
 800658e:	f7fe fe93 	bl	80052b8 <acc_base_configuration_asynchronous_measurement_get>
 8006592:	73a0      	strb	r0, [r4, #14]
 8006594:	4628      	mov	r0, r5
 8006596:	f7fe fcaf 	bl	8004ef8 <acc_base_configuration_power_save_mode_get>
 800659a:	fab0 f080 	clz	r0, r0
 800659e:	0940      	lsrs	r0, r0, #5
 80065a0:	73e0      	strb	r0, [r4, #15]
 80065a2:	4628      	mov	r0, r5
 80065a4:	f000 f80a 	bl	80065bc <acc_radar_engine_common_get_timeout_ms>
 80065a8:	4b03      	ldr	r3, [pc, #12]	; (80065b8 <acc_radar_engine_linear_create+0x4c>)
 80065aa:	6120      	str	r0, [r4, #16]
 80065ac:	61a3      	str	r3, [r4, #24]
 80065ae:	2001      	movs	r0, #1
 80065b0:	bd38      	pop	{r3, r4, r5, pc}
 80065b2:	bf00      	nop
 80065b4:	0800e918 	.word	0x0800e918
 80065b8:	0800ea74 	.word	0x0800ea74

080065bc <acc_radar_engine_common_get_timeout_ms>:
 80065bc:	b510      	push	{r4, lr}
 80065be:	4604      	mov	r4, r0
 80065c0:	f7fe fd64 	bl	800508c <acc_base_configuration_repetition_mode_get>
 80065c4:	2801      	cmp	r0, #1
 80065c6:	d00d      	beq.n	80065e4 <acc_radar_engine_common_get_timeout_ms+0x28>
 80065c8:	4620      	mov	r0, r4
 80065ca:	f7fe fd67 	bl	800509c <acc_base_configuration_update_rate_get>
 80065ce:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80065ec <acc_radar_engine_common_get_timeout_ms+0x30>
 80065d2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80065d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80065da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065de:	ee17 0a90 	vmov	r0, s15
 80065e2:	bd10      	pop	{r4, pc}
 80065e4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80065e8:	bd10      	pop	{r4, pc}
 80065ea:	bf00      	nop
 80065ec:	44fa0000 	.word	0x44fa0000

080065f0 <acc_radar_engine_common_frequency_to_main_clk>:
 80065f0:	b538      	push	{r3, r4, r5, lr}
 80065f2:	ed2d 8b02 	vpush	{d8}
 80065f6:	4604      	mov	r4, r0
 80065f8:	eeb0 8a40 	vmov.f32	s16, s0
 80065fc:	460d      	mov	r5, r1
 80065fe:	f7fe ffe7 	bl	80055d0 <acc_rss_integration_get_sensor_reference_frequency>
 8006602:	eec0 7a08 	vdiv.f32	s15, s0, s16
 8006606:	ecbd 8b02 	vpop	{d8}
 800660a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800660e:	ee17 3a90 	vmov	r3, s15
 8006612:	0c1a      	lsrs	r2, r3, #16
 8006614:	b29b      	uxth	r3, r3
 8006616:	602a      	str	r2, [r5, #0]
 8006618:	6023      	str	r3, [r4, #0]
 800661a:	bd38      	pop	{r3, r4, r5, pc}

0800661c <get_dt>:
 800661c:	b508      	push	{r3, lr}
 800661e:	ed2d 8b02 	vpush	{d8}
 8006622:	ee08 0a10 	vmov	s16, r0
 8006626:	f7fe ffd3 	bl	80055d0 <acc_rss_integration_get_sensor_reference_frequency>
 800662a:	eef0 8a40 	vmov.f32	s17, s0
 800662e:	f001 fd1f 	bl	8008070 <acc_cpd_pll_divisors_ref_divisor>
 8006632:	ee28 0a80 	vmul.f32	s0, s17, s0
 8006636:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800663a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800663e:	eeb8 8a48 	vcvt.f32.u32	s16, s16
 8006642:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8006646:	ecbd 8b02 	vpop	{d8}
 800664a:	bd08      	pop	{r3, pc}

0800664c <points_to_meter>:
 800664c:	b508      	push	{r3, lr}
 800664e:	4603      	mov	r3, r0
 8006650:	ed2d 8b02 	vpush	{d8}
 8006654:	4608      	mov	r0, r1
 8006656:	ee08 3a10 	vmov	s16, r3
 800665a:	f7ff ffdf 	bl	800661c <get_dt>
 800665e:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8006662:	eddf 7a06 	vldr	s15, [pc, #24]	; 800667c <points_to_meter+0x30>
 8006666:	ee28 8a00 	vmul.f32	s16, s16, s0
 800666a:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800666e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8006672:	ee28 0a00 	vmul.f32	s0, s16, s0
 8006676:	ecbd 8b02 	vpop	{d8}
 800667a:	bd08      	pop	{r3, pc}
 800667c:	4d8ef3c2 	.word	0x4d8ef3c2

08006680 <acc_radar_engine_common_sweep_w_dly_initialize_range>:
 8006680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006684:	ed2d 8b04 	vpush	{d8-d9}
 8006688:	b089      	sub	sp, #36	; 0x24
 800668a:	4689      	mov	r9, r1
 800668c:	9e16      	ldr	r6, [sp, #88]	; 0x58
 800668e:	f89d a05c 	ldrb.w	sl, [sp, #92]	; 0x5c
 8006692:	f9bd b05e 	ldrsh.w	fp, [sp, #94]	; 0x5e
 8006696:	9306      	str	r3, [sp, #24]
 8006698:	4617      	mov	r7, r2
 800669a:	4680      	mov	r8, r0
 800669c:	f7fe fd8a 	bl	80051b4 <acc_base_configuration_use_point_range_get>
 80066a0:	2800      	cmp	r0, #0
 80066a2:	d03d      	beq.n	8006720 <acc_radar_engine_common_sweep_w_dly_initialize_range+0xa0>
 80066a4:	4640      	mov	r0, r8
 80066a6:	f7fe fcdd 	bl	8005064 <acc_base_configuration_point_start_get>
 80066aa:	4605      	mov	r5, r0
 80066ac:	4640      	mov	r0, r8
 80066ae:	f7fe fce3 	bl	8005078 <acc_base_configuration_point_length_get>
 80066b2:	182c      	adds	r4, r5, r0
 80066b4:	f1ba 0f00 	cmp.w	sl, #0
 80066b8:	d02f      	beq.n	800671a <acc_radar_engine_common_sweep_w_dly_initialize_range+0x9a>
 80066ba:	f06f 020b 	mvn.w	r2, #11
 80066be:	4593      	cmp	fp, r2
 80066c0:	bfb8      	it	lt
 80066c2:	4693      	movlt	fp, r2
 80066c4:	f898 202e 	ldrb.w	r2, [r8, #46]	; 0x2e
 80066c8:	b31a      	cbz	r2, 8006712 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x92>
 80066ca:	f8b8 3030 	ldrh.w	r3, [r8, #48]	; 0x30
 80066ce:	9307      	str	r3, [sp, #28]
 80066d0:	4640      	mov	r0, r8
 80066d2:	f7fe fdbf 	bl	8005254 <acc_base_configuration_downsampling_factor_get>
 80066d6:	2801      	cmp	r0, #1
 80066d8:	4682      	mov	sl, r0
 80066da:	d90a      	bls.n	80066f2 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x72>
 80066dc:	2802      	cmp	r0, #2
 80066de:	f000 8121 	beq.w	8006924 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2a4>
 80066e2:	1b60      	subs	r0, r4, r5
 80066e4:	fb90 f2fa 	sdiv	r2, r0, sl
 80066e8:	fb0a 0a12 	mls	sl, sl, r2, r0
 80066ec:	f1ba 0f00 	cmp.w	sl, #0
 80066f0:	dc55      	bgt.n	800679e <acc_radar_engine_common_sweep_w_dly_initialize_range+0x11e>
 80066f2:	42ac      	cmp	r4, r5
 80066f4:	da61      	bge.n	80067ba <acc_radar_engine_common_sweep_w_dly_initialize_range+0x13a>
 80066f6:	4b9b      	ldr	r3, [pc, #620]	; (8006964 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2e4>)
 80066f8:	4a9b      	ldr	r2, [pc, #620]	; (8006968 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2e8>)
 80066fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066fc:	499b      	ldr	r1, [pc, #620]	; (800696c <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2ec>)
 80066fe:	2000      	movs	r0, #0
 8006700:	4798      	blx	r3
 8006702:	f04f 0a00 	mov.w	sl, #0
 8006706:	4650      	mov	r0, sl
 8006708:	b009      	add	sp, #36	; 0x24
 800670a:	ecbd 8b04 	vpop	{d8-d9}
 800670e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006712:	f898 3032 	ldrb.w	r3, [r8, #50]	; 0x32
 8006716:	9307      	str	r3, [sp, #28]
 8006718:	e7da      	b.n	80066d0 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x50>
 800671a:	f06f 0b0b 	mvn.w	fp, #11
 800671e:	e7d1      	b.n	80066c4 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x44>
 8006720:	4640      	mov	r0, r8
 8006722:	f7fe fba9 	bl	8004e78 <acc_base_configuration_requested_start_get>
 8006726:	4640      	mov	r0, r8
 8006728:	eeb0 8a40 	vmov.f32	s16, s0
 800672c:	f7fe fbc0 	bl	8004eb0 <acc_base_configuration_requested_length_get>
 8006730:	4630      	mov	r0, r6
 8006732:	ee78 8a00 	vadd.f32	s17, s16, s0
 8006736:	f7ff ff71 	bl	800661c <get_dt>
 800673a:	eddf 9a8d 	vldr	s19, [pc, #564]	; 8006970 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2f0>
 800673e:	ee38 7a08 	vadd.f32	s14, s16, s16
 8006742:	ee20 0a29 	vmul.f32	s0, s0, s19
 8006746:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800674a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800674e:	4630      	mov	r0, r6
 8006750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006754:	eebe 8a00 	vmov.f32	s16, #224	; 0xbf000000 -0.5
 8006758:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 800675c:	bf54      	ite	pl
 800675e:	eeb0 7a49 	vmovpl.f32	s14, s18
 8006762:	eeb0 7a48 	vmovmi.f32	s14, s16
 8006766:	ee77 7a87 	vadd.f32	s15, s15, s14
 800676a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800676e:	ee17 5a90 	vmov	r5, s15
 8006772:	f7ff ff53 	bl	800661c <get_dt>
 8006776:	ee38 7aa8 	vadd.f32	s14, s17, s17
 800677a:	ee20 0a29 	vmul.f32	s0, s0, s19
 800677e:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8006782:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8006786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800678a:	bf58      	it	pl
 800678c:	eeb0 8a49 	vmovpl.f32	s16, s18
 8006790:	ee37 8a88 	vadd.f32	s16, s15, s16
 8006794:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8006798:	ee17 4a90 	vmov	r4, s15
 800679c:	e78a      	b.n	80066b4 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x34>
 800679e:	f7fe ffc7 	bl	8005730 <acc_rss_integration_log_level>
 80067a2:	2801      	cmp	r0, #1
 80067a4:	d905      	bls.n	80067b2 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x132>
 80067a6:	496f      	ldr	r1, [pc, #444]	; (8006964 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2e4>)
 80067a8:	4a72      	ldr	r2, [pc, #456]	; (8006974 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2f4>)
 80067aa:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80067ac:	496f      	ldr	r1, [pc, #444]	; (800696c <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2ec>)
 80067ae:	2002      	movs	r0, #2
 80067b0:	4798      	blx	r3
 80067b2:	eba4 040a 	sub.w	r4, r4, sl
 80067b6:	42ac      	cmp	r4, r5
 80067b8:	db9d      	blt.n	80066f6 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x76>
 80067ba:	4640      	mov	r0, r8
 80067bc:	f7fe fd36 	bl	800522c <acc_base_configuration_ignore_range_limits_get>
 80067c0:	4682      	mov	sl, r0
 80067c2:	b970      	cbnz	r0, 80067e2 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x162>
 80067c4:	fb0b fb06 	mul.w	fp, fp, r6
 80067c8:	45ab      	cmp	fp, r5
 80067ca:	f300 80d9 	bgt.w	8006980 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x300>
 80067ce:	9b07      	ldr	r3, [sp, #28]
 80067d0:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80067d4:	f1ab 0b4b 	sub.w	fp, fp, #75	; 0x4b
 80067d8:	fb06 fb0b 	mul.w	fp, r6, fp
 80067dc:	455c      	cmp	r4, fp
 80067de:	f300 8171 	bgt.w	8006ac4 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x444>
 80067e2:	4640      	mov	r0, r8
 80067e4:	f7fe fd36 	bl	8005254 <acc_base_configuration_downsampling_factor_get>
 80067e8:	f898 202e 	ldrb.w	r2, [r8, #46]	; 0x2e
 80067ec:	4683      	mov	fp, r0
 80067ee:	2a00      	cmp	r2, #0
 80067f0:	f000 80a7 	beq.w	8006942 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2c2>
 80067f4:	f8b8 e030 	ldrh.w	lr, [r8, #48]	; 0x30
 80067f8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80067fa:	fb95 f1fb 	sdiv	r1, r5, fp
 80067fe:	eb04 72d4 	add.w	r2, r4, r4, lsr #31
 8006802:	fb92 f2f6 	sdiv	r2, r2, r6
 8006806:	eba2 72d4 	sub.w	r2, r2, r4, lsr #31
 800680a:	3201      	adds	r2, #1
 800680c:	eb05 70d5 	add.w	r0, r5, r5, lsr #31
 8006810:	fb90 f0f6 	sdiv	r0, r0, r6
 8006814:	eba0 70d5 	sub.w	r0, r0, r5, lsr #31
 8006818:	1a12      	subs	r2, r2, r0
 800681a:	fb0b 5111 	mls	r1, fp, r1, r5
 800681e:	b292      	uxth	r2, r2
 8006820:	4459      	add	r1, fp
 8006822:	fbb2 fcf3 	udiv	ip, r2, r3
 8006826:	80fa      	strh	r2, [r7, #6]
 8006828:	fb03 2a1c 	mls	sl, r3, ip, r2
 800682c:	fb91 f2fb 	sdiv	r2, r1, fp
 8006830:	fb0b 1112 	mls	r1, fp, r2, r1
 8006834:	f8a7 e000 	strh.w	lr, [r7]
 8006838:	80b8      	strh	r0, [r7, #4]
 800683a:	fa1f fc8c 	uxth.w	ip, ip
 800683e:	8079      	strh	r1, [r7, #2]
 8006840:	f1ba 0f00 	cmp.w	sl, #0
 8006844:	d001      	beq.n	800684a <acc_radar_engine_common_sweep_w_dly_initialize_range+0x1ca>
 8006846:	f10c 0c01 	add.w	ip, ip, #1
 800684a:	f8a7 c008 	strh.w	ip, [r7, #8]
 800684e:	4640      	mov	r0, r8
 8006850:	f7fe fb52 	bl	8004ef8 <acc_base_configuration_power_save_mode_get>
 8006854:	4602      	mov	r2, r0
 8006856:	4640      	mov	r0, r8
 8006858:	9207      	str	r2, [sp, #28]
 800685a:	f7fe fc17 	bl	800508c <acc_base_configuration_repetition_mode_get>
 800685e:	9a07      	ldr	r2, [sp, #28]
 8006860:	2a04      	cmp	r2, #4
 8006862:	d001      	beq.n	8006868 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x1e8>
 8006864:	2801      	cmp	r0, #1
 8006866:	d003      	beq.n	8006870 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x1f0>
 8006868:	88fb      	ldrh	r3, [r7, #6]
 800686a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800686c:	4293      	cmp	r3, r2
 800686e:	d876      	bhi.n	800695e <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2de>
 8006870:	4630      	mov	r0, r6
 8006872:	f7ff fed3 	bl	800661c <get_dt>
 8006876:	ee07 ba90 	vmov	s15, fp
 800687a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800687e:	4631      	mov	r1, r6
 8006880:	ee27 0a80 	vmul.f32	s0, s15, s0
 8006884:	4628      	mov	r0, r5
 8006886:	ed89 0a03 	vstr	s0, [r9, #12]
 800688a:	f7ff fedf 	bl	800664c <points_to_meter>
 800688e:	4631      	mov	r1, r6
 8006890:	4620      	mov	r0, r4
 8006892:	ed89 0a00 	vstr	s0, [r9]
 8006896:	f7ff fed9 	bl	800664c <points_to_meter>
 800689a:	fbb6 f2fb 	udiv	r2, r6, fp
 800689e:	fb95 fcf6 	sdiv	ip, r5, r6
 80068a2:	edd9 7a00 	vldr	s15, [r9]
 80068a6:	88fb      	ldrh	r3, [r7, #6]
 80068a8:	8939      	ldrh	r1, [r7, #8]
 80068aa:	9806      	ldr	r0, [sp, #24]
 80068ac:	ed89 0a02 	vstr	s0, [r9, #8]
 80068b0:	1b64      	subs	r4, r4, r5
 80068b2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80068b6:	fbb4 f4fb 	udiv	r4, r4, fp
 80068ba:	3401      	adds	r4, #1
 80068bc:	b2a4      	uxth	r4, r4
 80068be:	f8a9 4016 	strh.w	r4, [r9, #22]
 80068c2:	ed89 0a01 	vstr	s0, [r9, #4]
 80068c6:	f8a9 1018 	strh.w	r1, [r9, #24]
 80068ca:	80c2      	strh	r2, [r0, #6]
 80068cc:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80068ce:	8084      	strh	r4, [r0, #4]
 80068d0:	fb06 551c 	mls	r5, r6, ip, r5
 80068d4:	4435      	add	r5, r6
 80068d6:	429a      	cmp	r2, r3
 80068d8:	fb95 fcf6 	sdiv	ip, r5, r6
 80068dc:	8103      	strh	r3, [r0, #8]
 80068de:	fb06 551c 	mls	r5, r6, ip, r5
 80068e2:	8201      	strh	r1, [r0, #16]
 80068e4:	fb95 f5fb 	sdiv	r5, r5, fp
 80068e8:	fb03 f606 	mul.w	r6, r3, r6
 80068ec:	8045      	strh	r5, [r0, #2]
 80068ee:	fbb6 fbfb 	udiv	fp, r6, fp
 80068f2:	f8a0 b000 	strh.w	fp, [r0]
 80068f6:	d227      	bcs.n	8006948 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2c8>
 80068f8:	b292      	uxth	r2, r2
 80068fa:	8282      	strh	r2, [r0, #20]
 80068fc:	f1ba 0f00 	cmp.w	sl, #0
 8006900:	d006      	beq.n	8006910 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x290>
 8006902:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006904:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006906:	fbb3 f2f2 	udiv	r2, r3, r2
 800690a:	fb01 3312 	mls	r3, r1, r2, r3
 800690e:	b29a      	uxth	r2, r3
 8006910:	9b06      	ldr	r3, [sp, #24]
 8006912:	f04f 0a01 	mov.w	sl, #1
 8006916:	4650      	mov	r0, sl
 8006918:	82da      	strh	r2, [r3, #22]
 800691a:	b009      	add	sp, #36	; 0x24
 800691c:	ecbd 8b04 	vpop	{d8-d9}
 8006920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006924:	07eb      	lsls	r3, r5, #31
 8006926:	f53f aedc 	bmi.w	80066e2 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x62>
 800692a:	f7fe ff01 	bl	8005730 <acc_rss_integration_log_level>
 800692e:	2801      	cmp	r0, #1
 8006930:	d905      	bls.n	800693e <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2be>
 8006932:	490c      	ldr	r1, [pc, #48]	; (8006964 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2e4>)
 8006934:	4a10      	ldr	r2, [pc, #64]	; (8006978 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2f8>)
 8006936:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8006938:	490c      	ldr	r1, [pc, #48]	; (800696c <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2ec>)
 800693a:	4650      	mov	r0, sl
 800693c:	4798      	blx	r3
 800693e:	3501      	adds	r5, #1
 8006940:	e6cf      	b.n	80066e2 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x62>
 8006942:	f898 e032 	ldrb.w	lr, [r8, #50]	; 0x32
 8006946:	e757      	b.n	80067f8 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x178>
 8006948:	9a06      	ldr	r2, [sp, #24]
 800694a:	f04f 0a01 	mov.w	sl, #1
 800694e:	4650      	mov	r0, sl
 8006950:	8293      	strh	r3, [r2, #20]
 8006952:	82d3      	strh	r3, [r2, #22]
 8006954:	b009      	add	sp, #36	; 0x24
 8006956:	ecbd 8b04 	vpop	{d8-d9}
 800695a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800695e:	4b01      	ldr	r3, [pc, #4]	; (8006964 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2e4>)
 8006960:	4a06      	ldr	r2, [pc, #24]	; (800697c <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2fc>)
 8006962:	e6ca      	b.n	80066fa <acc_radar_engine_common_sweep_w_dly_initialize_range+0x7a>
 8006964:	200004c0 	.word	0x200004c0
 8006968:	0800eb2c 	.word	0x0800eb2c
 800696c:	0800ead8 	.word	0x0800ead8
 8006970:	4d8ef3c2 	.word	0x4d8ef3c2
 8006974:	0800eaf8 	.word	0x0800eaf8
 8006978:	0800eaa0 	.word	0x0800eaa0
 800697c:	0800ebdc 	.word	0x0800ebdc
 8006980:	4b9d      	ldr	r3, [pc, #628]	; (8006bf8 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x578>)
 8006982:	4c9e      	ldr	r4, [pc, #632]	; (8006bfc <acc_radar_engine_common_sweep_w_dly_initialize_range+0x57c>)
 8006984:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 8006986:	4631      	mov	r1, r6
 8006988:	4628      	mov	r0, r5
 800698a:	f7ff fe5f 	bl	800664c <points_to_meter>
 800698e:	4b9c      	ldr	r3, [pc, #624]	; (8006c00 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x580>)
 8006990:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006998:	4631      	mov	r1, r6
 800699a:	4628      	mov	r0, r5
 800699c:	bf54      	ite	pl
 800699e:	4698      	movpl	r8, r3
 80069a0:	46a0      	movmi	r8, r4
 80069a2:	f7ff fe53 	bl	800664c <points_to_meter>
 80069a6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80069aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069ae:	eddf 7a95 	vldr	s15, [pc, #596]	; 8006c04 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x584>
 80069b2:	bf48      	it	mi
 80069b4:	eeb1 0a40 	vnegmi.f32	s0, s0
 80069b8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80069bc:	4628      	mov	r0, r5
 80069be:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80069c2:	4631      	mov	r1, r6
 80069c4:	ee17 5a90 	vmov	r5, s15
 80069c8:	f7ff fe40 	bl	800664c <points_to_meter>
 80069cc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80069d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069d4:	eddf 7a8b 	vldr	s15, [pc, #556]	; 8006c04 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x584>
 80069d8:	ed9f 6a8a 	vldr	s12, [pc, #552]	; 8006c04 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x584>
 80069dc:	eddf 6a8a 	vldr	s13, [pc, #552]	; 8006c08 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x588>
 80069e0:	bf48      	it	mi
 80069e2:	eeb1 0a40 	vnegmi.f32	s0, s0
 80069e6:	ee70 7a27 	vadd.f32	s15, s0, s15
 80069ea:	4631      	mov	r1, r6
 80069ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80069f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069f4:	bf4c      	ite	mi
 80069f6:	eeb1 7a67 	vnegmi.f32	s14, s15
 80069fa:	eeb0 7a67 	vmovpl.f32	s14, s15
 80069fe:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006a02:	4658      	mov	r0, fp
 8006a04:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8006a08:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8006a0c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006a10:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006a14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a18:	ee17 4a90 	vmov	r4, s15
 8006a1c:	f7ff fe16 	bl	800664c <points_to_meter>
 8006a20:	4b77      	ldr	r3, [pc, #476]	; (8006c00 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x580>)
 8006a22:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8006bfc <acc_radar_engine_common_sweep_w_dly_initialize_range+0x57c>
 8006a26:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a2e:	4631      	mov	r1, r6
 8006a30:	4658      	mov	r0, fp
 8006a32:	bf54      	ite	pl
 8006a34:	4699      	movpl	r9, r3
 8006a36:	46e1      	movmi	r9, ip
 8006a38:	f7ff fe08 	bl	800664c <points_to_meter>
 8006a3c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006a40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a44:	eddf 7a6f 	vldr	s15, [pc, #444]	; 8006c04 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x584>
 8006a48:	bf48      	it	mi
 8006a4a:	eeb1 0a40 	vnegmi.f32	s0, s0
 8006a4e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006a52:	4631      	mov	r1, r6
 8006a54:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8006a58:	4658      	mov	r0, fp
 8006a5a:	ee17 6a90 	vmov	r6, s15
 8006a5e:	f7ff fdf5 	bl	800664c <points_to_meter>
 8006a62:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a6a:	eddf 7a66 	vldr	s15, [pc, #408]	; 8006c04 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x584>
 8006a6e:	ed9f 6a65 	vldr	s12, [pc, #404]	; 8006c04 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x584>
 8006a72:	eddf 6a65 	vldr	s13, [pc, #404]	; 8006c08 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x588>
 8006a76:	4a65      	ldr	r2, [pc, #404]	; (8006c0c <acc_radar_engine_common_sweep_w_dly_initialize_range+0x58c>)
 8006a78:	9603      	str	r6, [sp, #12]
 8006a7a:	bf48      	it	mi
 8006a7c:	eeb1 0a40 	vnegmi.f32	s0, s0
 8006a80:	ee70 7a27 	vadd.f32	s15, s0, s15
 8006a84:	f8cd 9008 	str.w	r9, [sp, #8]
 8006a88:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a90:	bf4c      	ite	mi
 8006a92:	eeb1 7a67 	vnegmi.f32	s14, s15
 8006a96:	eeb0 7a67 	vmovpl.f32	s14, s15
 8006a9a:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006a9e:	9401      	str	r4, [sp, #4]
 8006aa0:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8006aa4:	9500      	str	r5, [sp, #0]
 8006aa6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8006aaa:	4643      	mov	r3, r8
 8006aac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006ab0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006ab4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ab8:	4955      	ldr	r1, [pc, #340]	; (8006c10 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x590>)
 8006aba:	edcd 7a04 	vstr	s15, [sp, #16]
 8006abe:	2000      	movs	r0, #0
 8006ac0:	47b8      	blx	r7
 8006ac2:	e620      	b.n	8006706 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x86>
 8006ac4:	4b4c      	ldr	r3, [pc, #304]	; (8006bf8 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x578>)
 8006ac6:	4631      	mov	r1, r6
 8006ac8:	4620      	mov	r0, r4
 8006aca:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 8006acc:	f7ff fdbe 	bl	800664c <points_to_meter>
 8006ad0:	4a4a      	ldr	r2, [pc, #296]	; (8006bfc <acc_radar_engine_common_sweep_w_dly_initialize_range+0x57c>)
 8006ad2:	4b4b      	ldr	r3, [pc, #300]	; (8006c00 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x580>)
 8006ad4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006adc:	4631      	mov	r1, r6
 8006ade:	4620      	mov	r0, r4
 8006ae0:	bf4c      	ite	mi
 8006ae2:	4690      	movmi	r8, r2
 8006ae4:	4698      	movpl	r8, r3
 8006ae6:	f7ff fdb1 	bl	800664c <points_to_meter>
 8006aea:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006af2:	eddf 7a44 	vldr	s15, [pc, #272]	; 8006c04 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x584>
 8006af6:	bf48      	it	mi
 8006af8:	eeb1 0a40 	vnegmi.f32	s0, s0
 8006afc:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006b00:	4620      	mov	r0, r4
 8006b02:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8006b06:	4631      	mov	r1, r6
 8006b08:	ee17 5a90 	vmov	r5, s15
 8006b0c:	f7ff fd9e 	bl	800664c <points_to_meter>
 8006b10:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b18:	eddf 7a3a 	vldr	s15, [pc, #232]	; 8006c04 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x584>
 8006b1c:	ed9f 6a39 	vldr	s12, [pc, #228]	; 8006c04 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x584>
 8006b20:	eddf 6a39 	vldr	s13, [pc, #228]	; 8006c08 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x588>
 8006b24:	bf48      	it	mi
 8006b26:	eeb1 0a40 	vnegmi.f32	s0, s0
 8006b2a:	ee70 7a27 	vadd.f32	s15, s0, s15
 8006b2e:	4631      	mov	r1, r6
 8006b30:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b38:	bf4c      	ite	mi
 8006b3a:	eeb1 7a67 	vnegmi.f32	s14, s15
 8006b3e:	eeb0 7a67 	vmovpl.f32	s14, s15
 8006b42:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006b46:	4658      	mov	r0, fp
 8006b48:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8006b4c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8006b50:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006b54:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006b58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b5c:	ee17 4a90 	vmov	r4, s15
 8006b60:	f7ff fd74 	bl	800664c <points_to_meter>
 8006b64:	4a25      	ldr	r2, [pc, #148]	; (8006bfc <acc_radar_engine_common_sweep_w_dly_initialize_range+0x57c>)
 8006b66:	4b26      	ldr	r3, [pc, #152]	; (8006c00 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x580>)
 8006b68:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b70:	4631      	mov	r1, r6
 8006b72:	4658      	mov	r0, fp
 8006b74:	bf4c      	ite	mi
 8006b76:	4691      	movmi	r9, r2
 8006b78:	4699      	movpl	r9, r3
 8006b7a:	f7ff fd67 	bl	800664c <points_to_meter>
 8006b7e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b86:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8006c04 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x584>
 8006b8a:	bf48      	it	mi
 8006b8c:	eeb1 0a40 	vnegmi.f32	s0, s0
 8006b90:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006b94:	4631      	mov	r1, r6
 8006b96:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8006b9a:	4658      	mov	r0, fp
 8006b9c:	ee17 6a90 	vmov	r6, s15
 8006ba0:	f7ff fd54 	bl	800664c <points_to_meter>
 8006ba4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bac:	eddf 7a15 	vldr	s15, [pc, #84]	; 8006c04 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x584>
 8006bb0:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8006c04 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x584>
 8006bb4:	eddf 6a14 	vldr	s13, [pc, #80]	; 8006c08 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x588>
 8006bb8:	4a16      	ldr	r2, [pc, #88]	; (8006c14 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x594>)
 8006bba:	9603      	str	r6, [sp, #12]
 8006bbc:	bf48      	it	mi
 8006bbe:	eeb1 0a40 	vnegmi.f32	s0, s0
 8006bc2:	ee70 7a27 	vadd.f32	s15, s0, s15
 8006bc6:	f8cd 9008 	str.w	r9, [sp, #8]
 8006bca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bd2:	bf4c      	ite	mi
 8006bd4:	eeb1 7a67 	vnegmi.f32	s14, s15
 8006bd8:	eeb0 7a67 	vmovpl.f32	s14, s15
 8006bdc:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006be0:	9401      	str	r4, [sp, #4]
 8006be2:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8006be6:	9500      	str	r5, [sp, #0]
 8006be8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8006bec:	4643      	mov	r3, r8
 8006bee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006bf2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006bf6:	e75d      	b.n	8006ab4 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x434>
 8006bf8:	200004c0 	.word	0x200004c0
 8006bfc:	0800ea9c 	.word	0x0800ea9c
 8006c00:	0800fb24 	.word	0x0800fb24
 8006c04:	350637bd 	.word	0x350637bd
 8006c08:	49742400 	.word	0x49742400
 8006c0c:	0800eb5c 	.word	0x0800eb5c
 8006c10:	0800ead8 	.word	0x0800ead8
 8006c14:	0800eb9c 	.word	0x0800eb9c

08006c18 <acc_radar_engine_common_sweep_w_dly_stitching_required>:
 8006c18:	8900      	ldrh	r0, [r0, #8]
 8006c1a:	2801      	cmp	r0, #1
 8006c1c:	bf94      	ite	ls
 8006c1e:	2000      	movls	r0, #0
 8006c20:	2001      	movhi	r0, #1
 8006c22:	4770      	bx	lr

08006c24 <internal_buffer_processed_read>:
 8006c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c28:	b085      	sub	sp, #20
 8006c2a:	461f      	mov	r7, r3
 8006c2c:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
 8006c30:	9101      	str	r1, [sp, #4]
 8006c32:	4682      	mov	sl, r0
 8006c34:	4689      	mov	r9, r1
 8006c36:	4615      	mov	r5, r2
 8006c38:	f7fe fcd0 	bl	80055dc <acc_rss_integration_get_max_spi_transfer_size>
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8006c42:	9302      	str	r3, [sp, #8]
 8006c44:	2f00      	cmp	r7, #0
 8006c46:	d03d      	beq.n	8006cc4 <internal_buffer_processed_read+0xa0>
 8006c48:	429c      	cmp	r4, r3
 8006c4a:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8006c4e:	bf14      	ite	ne
 8006c50:	f44f 4be0 	movne.w	fp, #28672	; 0x7000
 8006c54:	f44f 4b00 	moveq.w	fp, #32768	; 0x8000
 8006c58:	f1a0 0803 	sub.w	r8, r0, #3
 8006c5c:	9300      	str	r3, [sp, #0]
 8006c5e:	fa0f fb8b 	sxth.w	fp, fp
 8006c62:	e024      	b.n	8006cae <internal_buffer_processed_read+0x8a>
 8006c64:	b2a6      	uxth	r6, r4
 8006c66:	9900      	ldr	r1, [sp, #0]
 8006c68:	f8a9 1004 	strh.w	r1, [r9, #4]
 8006c6c:	1e72      	subs	r2, r6, #1
 8006c6e:	ea4b 0305 	orr.w	r3, fp, r5
 8006c72:	f8a9 2002 	strh.w	r2, [r9, #2]
 8006c76:	f8a9 3000 	strh.w	r3, [r9]
 8006c7a:	4649      	mov	r1, r9
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	4650      	mov	r0, sl
 8006c80:	1ce2      	adds	r2, r4, #3
 8006c82:	f7fe fcdb 	bl	800563c <acc_rss_integration_sensor_device_transfer>
 8006c86:	9802      	ldr	r0, [sp, #8]
 8006c88:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8006c8c:	f8c9 0000 	str.w	r0, [r9]
 8006c90:	f8a9 3004 	strh.w	r3, [r9, #4]
 8006c94:	eb09 0944 	add.w	r9, r9, r4, lsl #1
 8006c98:	442e      	add	r6, r5
 8006c9a:	f8d9 0000 	ldr.w	r0, [r9]
 8006c9e:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 8006ca2:	9002      	str	r0, [sp, #8]
 8006ca4:	1b3f      	subs	r7, r7, r4
 8006ca6:	b2b5      	uxth	r5, r6
 8006ca8:	f8ad 300c 	strh.w	r3, [sp, #12]
 8006cac:	d00a      	beq.n	8006cc4 <internal_buffer_processed_read+0xa0>
 8006cae:	45b8      	cmp	r8, r7
 8006cb0:	4644      	mov	r4, r8
 8006cb2:	bf28      	it	cs
 8006cb4:	463c      	movcs	r4, r7
 8006cb6:	45b8      	cmp	r8, r7
 8006cb8:	d2d4      	bcs.n	8006c64 <internal_buffer_processed_read+0x40>
 8006cba:	e000      	b.n	8006cbe <internal_buffer_processed_read+0x9a>
 8006cbc:	3c01      	subs	r4, #1
 8006cbe:	07e3      	lsls	r3, r4, #31
 8006cc0:	d4fc      	bmi.n	8006cbc <internal_buffer_processed_read+0x98>
 8006cc2:	e7cf      	b.n	8006c64 <internal_buffer_processed_read+0x40>
 8006cc4:	9801      	ldr	r0, [sp, #4]
 8006cc6:	3006      	adds	r0, #6
 8006cc8:	b005      	add	sp, #20
 8006cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cce:	bf00      	nop

08006cd0 <acc_sensor_r2_get_max_header_length>:
 8006cd0:	2003      	movs	r0, #3
 8006cd2:	4770      	bx	lr

08006cd4 <acc_sensor_r2_conf_write_instr>:
 8006cd4:	b510      	push	{r4, lr}
 8006cd6:	b084      	sub	sp, #16
 8006cd8:	f441 43a0 	orr.w	r3, r1, #20480	; 0x5000
 8006cdc:	4604      	mov	r4, r0
 8006cde:	9201      	str	r2, [sp, #4]
 8006ce0:	f10d 010a 	add.w	r1, sp, #10
 8006ce4:	a801      	add	r0, sp, #4
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	f8ad 3008 	strh.w	r3, [sp, #8]
 8006cec:	f001 fa00 	bl	80080f0 <acc_utils_uint32_to_transfer_buffer>
 8006cf0:	4620      	mov	r0, r4
 8006cf2:	a902      	add	r1, sp, #8
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	2203      	movs	r2, #3
 8006cf8:	f7fe fca0 	bl	800563c <acc_rss_integration_sensor_device_transfer>
 8006cfc:	b004      	add	sp, #16
 8006cfe:	bd10      	pop	{r4, pc}

08006d00 <acc_sensor_r2_prepare_load_confmem>:
 8006d00:	0849      	lsrs	r1, r1, #1
 8006d02:	b538      	push	{r3, r4, r5, lr}
 8006d04:	6010      	str	r0, [r2, #0]
 8006d06:	461c      	mov	r4, r3
 8006d08:	6019      	str	r1, [r3, #0]
 8006d0a:	4615      	mov	r5, r2
 8006d0c:	f7fe fc66 	bl	80055dc <acc_rss_integration_get_max_spi_transfer_size>
 8006d10:	6821      	ldr	r1, [r4, #0]
 8006d12:	ebb1 0f50 	cmp.w	r1, r0, lsr #1
 8006d16:	d807      	bhi.n	8006d28 <acc_sensor_r2_prepare_load_confmem+0x28>
 8006d18:	682b      	ldr	r3, [r5, #0]
 8006d1a:	3901      	subs	r1, #1
 8006d1c:	f021 0101 	bic.w	r1, r1, #1
 8006d20:	3302      	adds	r3, #2
 8006d22:	602b      	str	r3, [r5, #0]
 8006d24:	6021      	str	r1, [r4, #0]
 8006d26:	bd38      	pop	{r3, r4, r5, pc}
 8006d28:	f7fe fc58 	bl	80055dc <acc_rss_integration_get_max_spi_transfer_size>
 8006d2c:	0841      	lsrs	r1, r0, #1
 8006d2e:	e7f3      	b.n	8006d18 <acc_sensor_r2_prepare_load_confmem+0x18>

08006d30 <acc_sensor_r2_load_confmem>:
 8006d30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006d34:	b083      	sub	sp, #12
 8006d36:	1c5d      	adds	r5, r3, #1
 8006d38:	4606      	mov	r6, r0
 8006d3a:	460c      	mov	r4, r1
 8006d3c:	4617      	mov	r7, r2
 8006d3e:	f7fe fcf7 	bl	8005730 <acc_rss_integration_log_level>
 8006d42:	2803      	cmp	r0, #3
 8006d44:	ea4f 0845 	mov.w	r8, r5, lsl #1
 8006d48:	d908      	bls.n	8006d5c <acc_sensor_r2_load_confmem+0x2c>
 8006d4a:	4b11      	ldr	r3, [pc, #68]	; (8006d90 <acc_sensor_r2_load_confmem+0x60>)
 8006d4c:	9400      	str	r4, [sp, #0]
 8006d4e:	f8d3 9034 	ldr.w	r9, [r3, #52]	; 0x34
 8006d52:	4a10      	ldr	r2, [pc, #64]	; (8006d94 <acc_sensor_r2_load_confmem+0x64>)
 8006d54:	4910      	ldr	r1, [pc, #64]	; (8006d98 <acc_sensor_r2_load_confmem+0x68>)
 8006d56:	4633      	mov	r3, r6
 8006d58:	2004      	movs	r0, #4
 8006d5a:	47c8      	blx	r9
 8006d5c:	f7fe fc3e 	bl	80055dc <acc_rss_integration_get_max_spi_transfer_size>
 8006d60:	4540      	cmp	r0, r8
 8006d62:	d208      	bcs.n	8006d76 <acc_sensor_r2_load_confmem+0x46>
 8006d64:	4b0a      	ldr	r3, [pc, #40]	; (8006d90 <acc_sensor_r2_load_confmem+0x60>)
 8006d66:	4a0d      	ldr	r2, [pc, #52]	; (8006d9c <acc_sensor_r2_load_confmem+0x6c>)
 8006d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d6a:	490b      	ldr	r1, [pc, #44]	; (8006d98 <acc_sensor_r2_load_confmem+0x68>)
 8006d6c:	2000      	movs	r0, #0
 8006d6e:	b003      	add	sp, #12
 8006d70:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006d74:	4718      	bx	r3
 8006d76:	f444 44a0 	orr.w	r4, r4, #20480	; 0x5000
 8006d7a:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8006d7e:	4639      	mov	r1, r7
 8006d80:	4630      	mov	r0, r6
 8006d82:	2300      	movs	r3, #0
 8006d84:	803c      	strh	r4, [r7, #0]
 8006d86:	b003      	add	sp, #12
 8006d88:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006d8c:	f7fe bc56 	b.w	800563c <acc_rss_integration_sensor_device_transfer>
 8006d90:	200004c0 	.word	0x200004c0
 8006d94:	0800ec18 	.word	0x0800ec18
 8006d98:	0800ec08 	.word	0x0800ec08
 8006d9c:	0800ec40 	.word	0x0800ec40

08006da0 <acc_sensor_r2_buffer_processed_verify_size>:
 8006da0:	3103      	adds	r1, #3
 8006da2:	ebb0 0f41 	cmp.w	r0, r1, lsl #1
 8006da6:	bf2c      	ite	cs
 8006da8:	2001      	movcs	r0, #1
 8006daa:	2000      	movcc	r0, #0
 8006dac:	4770      	bx	lr
 8006dae:	bf00      	nop

08006db0 <acc_sensor_r2_buffer_processed_read>:
 8006db0:	b510      	push	{r4, lr}
 8006db2:	b082      	sub	sp, #8
 8006db4:	2400      	movs	r4, #0
 8006db6:	9400      	str	r4, [sp, #0]
 8006db8:	f7ff ff34 	bl	8006c24 <internal_buffer_processed_read>
 8006dbc:	b002      	add	sp, #8
 8006dbe:	bd10      	pop	{r4, pc}

08006dc0 <acc_sensor_manager_power_on_and_start_sensor>:
 8006dc0:	b570      	push	{r4, r5, r6, lr}
 8006dc2:	6986      	ldr	r6, [r0, #24]
 8006dc4:	4604      	mov	r4, r0
 8006dc6:	4630      	mov	r0, r6
 8006dc8:	f7fe fc0e 	bl	80055e8 <acc_rss_integration_sensor_device_power_on>
 8006dcc:	4b0a      	ldr	r3, [pc, #40]	; (8006df8 <acc_sensor_manager_power_on_and_start_sensor+0x38>)
 8006dce:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006dd0:	6819      	ldr	r1, [r3, #0]
 8006dd2:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 8006dd6:	00db      	lsls	r3, r3, #3
 8006dd8:	3b48      	subs	r3, #72	; 0x48
 8006dda:	4419      	add	r1, r3
 8006ddc:	1d20      	adds	r0, r4, #4
 8006dde:	f000 fe5f 	bl	8007aa0 <acc_sweep_manager_start>
 8006de2:	4605      	mov	r5, r0
 8006de4:	b118      	cbz	r0, 8006dee <acc_sensor_manager_power_on_and_start_sensor+0x2e>
 8006de6:	2301      	movs	r3, #1
 8006de8:	70e3      	strb	r3, [r4, #3]
 8006dea:	4628      	mov	r0, r5
 8006dec:	bd70      	pop	{r4, r5, r6, pc}
 8006dee:	4630      	mov	r0, r6
 8006df0:	f7fe fc00 	bl	80055f4 <acc_rss_integration_sensor_device_power_off>
 8006df4:	4628      	mov	r0, r5
 8006df6:	bd70      	pop	{r4, r5, r6, pc}
 8006df8:	20000368 	.word	0x20000368

08006dfc <calibrate_sensor>:
 8006dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e00:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8006ed0 <calibrate_sensor+0xd4>
 8006e04:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 8006ed4 <calibrate_sensor+0xd8>
 8006e08:	f8d8 3000 	ldr.w	r3, [r8]
 8006e0c:	eb00 04c0 	add.w	r4, r0, r0, lsl #3
 8006e10:	00e4      	lsls	r4, r4, #3
 8006e12:	3c48      	subs	r4, #72	; 0x48
 8006e14:	4423      	add	r3, r4
 8006e16:	f04f 0900 	mov.w	r9, #0
 8006e1a:	b085      	sub	sp, #20
 8006e1c:	460e      	mov	r6, r1
 8006e1e:	f883 9041 	strb.w	r9, [r3, #65]	; 0x41
 8006e22:	f883 9042 	strb.w	r9, [r3, #66]	; 0x42
 8006e26:	f8c3 b044 	str.w	fp, [r3, #68]	; 0x44
 8006e2a:	4607      	mov	r7, r0
 8006e2c:	4692      	mov	sl, r2
 8006e2e:	f7fe fbdb 	bl	80055e8 <acc_rss_integration_sensor_device_power_on>
 8006e32:	4630      	mov	r0, r6
 8006e34:	f000 fe10 	bl	8007a58 <acc_sweep_manager_is_sensor_connected>
 8006e38:	b968      	cbnz	r0, 8006e56 <calibrate_sensor+0x5a>
 8006e3a:	4b21      	ldr	r3, [pc, #132]	; (8006ec0 <calibrate_sensor+0xc4>)
 8006e3c:	4a21      	ldr	r2, [pc, #132]	; (8006ec4 <calibrate_sensor+0xc8>)
 8006e3e:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8006e40:	4921      	ldr	r1, [pc, #132]	; (8006ec8 <calibrate_sensor+0xcc>)
 8006e42:	463b      	mov	r3, r7
 8006e44:	4605      	mov	r5, r0
 8006e46:	47a0      	blx	r4
 8006e48:	4638      	mov	r0, r7
 8006e4a:	f7fe fbd3 	bl	80055f4 <acc_rss_integration_sensor_device_power_off>
 8006e4e:	4628      	mov	r0, r5
 8006e50:	b005      	add	sp, #20
 8006e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e56:	4639      	mov	r1, r7
 8006e58:	200b      	movs	r0, #11
 8006e5a:	f000 ffa3 	bl	8007da4 <acc_probes_execute_primitive_probe>
 8006e5e:	f8d8 2000 	ldr.w	r2, [r8]
 8006e62:	f8cd 9004 	str.w	r9, [sp, #4]
 8006e66:	4651      	mov	r1, sl
 8006e68:	4630      	mov	r0, r6
 8006e6a:	4422      	add	r2, r4
 8006e6c:	ab01      	add	r3, sp, #4
 8006e6e:	f8cd b008 	str.w	fp, [sp, #8]
 8006e72:	f8cd 900c 	str.w	r9, [sp, #12]
 8006e76:	f000 fdf3 	bl	8007a60 <acc_sweep_manager_calibrate>
 8006e7a:	4605      	mov	r5, r0
 8006e7c:	b9c8      	cbnz	r0, 8006eb2 <calibrate_sensor+0xb6>
 8006e7e:	4b10      	ldr	r3, [pc, #64]	; (8006ec0 <calibrate_sensor+0xc4>)
 8006e80:	4a12      	ldr	r2, [pc, #72]	; (8006ecc <calibrate_sensor+0xd0>)
 8006e82:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8006e84:	4910      	ldr	r1, [pc, #64]	; (8006ec8 <calibrate_sensor+0xcc>)
 8006e86:	463b      	mov	r3, r7
 8006e88:	47b0      	blx	r6
 8006e8a:	f8d8 3000 	ldr.w	r3, [r8]
 8006e8e:	441c      	add	r4, r3
 8006e90:	9a02      	ldr	r2, [sp, #8]
 8006e92:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006e96:	6462      	str	r2, [r4, #68]	; 0x44
 8006e98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e9c:	4639      	mov	r1, r7
 8006e9e:	200c      	movs	r0, #12
 8006ea0:	f000 ff80 	bl	8007da4 <acc_probes_execute_primitive_probe>
 8006ea4:	4638      	mov	r0, r7
 8006ea6:	f7fe fba5 	bl	80055f4 <acc_rss_integration_sensor_device_power_off>
 8006eaa:	4628      	mov	r0, r5
 8006eac:	b005      	add	sp, #20
 8006eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eb2:	f8d8 3000 	ldr.w	r3, [r8]
 8006eb6:	441c      	add	r4, r3
 8006eb8:	2301      	movs	r3, #1
 8006eba:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8006ebe:	e7e7      	b.n	8006e90 <calibrate_sensor+0x94>
 8006ec0:	200004c0 	.word	0x200004c0
 8006ec4:	0800ec60 	.word	0x0800ec60
 8006ec8:	0800ec9c 	.word	0x0800ec9c
 8006ecc:	0800ecac 	.word	0x0800ecac
 8006ed0:	20000368 	.word	0x20000368
 8006ed4:	ff800000 	.word	0xff800000

08006ed8 <acc_sensor_manager_hibernate_enter>:
 8006ed8:	b538      	push	{r3, r4, r5, lr}
 8006eda:	4603      	mov	r3, r0
 8006edc:	3004      	adds	r0, #4
 8006ede:	699d      	ldr	r5, [r3, #24]
 8006ee0:	f000 fdf6 	bl	8007ad0 <acc_sweep_manager_wait_for_hibernate_ready>
 8006ee4:	4604      	mov	r4, r0
 8006ee6:	b930      	cbnz	r0, 8006ef6 <acc_sensor_manager_hibernate_enter+0x1e>
 8006ee8:	4b05      	ldr	r3, [pc, #20]	; (8006f00 <acc_sensor_manager_hibernate_enter+0x28>)
 8006eea:	4a06      	ldr	r2, [pc, #24]	; (8006f04 <acc_sensor_manager_hibernate_enter+0x2c>)
 8006eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eee:	4906      	ldr	r1, [pc, #24]	; (8006f08 <acc_sensor_manager_hibernate_enter+0x30>)
 8006ef0:	4798      	blx	r3
 8006ef2:	4620      	mov	r0, r4
 8006ef4:	bd38      	pop	{r3, r4, r5, pc}
 8006ef6:	4628      	mov	r0, r5
 8006ef8:	f7fe fb82 	bl	8005600 <acc_rss_integration_sensor_device_hibernate_enter>
 8006efc:	4620      	mov	r0, r4
 8006efe:	bd38      	pop	{r3, r4, r5, pc}
 8006f00:	200004c0 	.word	0x200004c0
 8006f04:	0800ecd0 	.word	0x0800ecd0
 8006f08:	0800ec9c 	.word	0x0800ec9c

08006f0c <acc_sensor_manager_activate>:
 8006f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f10:	4e18      	ldr	r6, [pc, #96]	; (8006f74 <acc_sensor_manager_activate+0x68>)
 8006f12:	7834      	ldrb	r4, [r6, #0]
 8006f14:	b114      	cbz	r4, 8006f1c <acc_sensor_manager_activate+0x10>
 8006f16:	4620      	mov	r0, r4
 8006f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f1c:	f7fe fb52 	bl	80055c4 <acc_rss_integration_get_sensor_count>
 8006f20:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8006f24:	4914      	ldr	r1, [pc, #80]	; (8006f78 <acc_sensor_manager_activate+0x6c>)
 8006f26:	4f15      	ldr	r7, [pc, #84]	; (8006f7c <acc_sensor_manager_activate+0x70>)
 8006f28:	00c0      	lsls	r0, r0, #3
 8006f2a:	f240 1253 	movw	r2, #339	; 0x153
 8006f2e:	f7fe fbab 	bl	8005688 <acc_rss_integration_mem_alloc_debug>
 8006f32:	6038      	str	r0, [r7, #0]
 8006f34:	2800      	cmp	r0, #0
 8006f36:	d0ee      	beq.n	8006f16 <acc_sensor_manager_activate+0xa>
 8006f38:	f8df 8044 	ldr.w	r8, [pc, #68]	; 8006f80 <acc_sensor_manager_activate+0x74>
 8006f3c:	4625      	mov	r5, r4
 8006f3e:	e00e      	b.n	8006f5e <acc_sensor_manager_activate+0x52>
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f46:	4618      	mov	r0, r3
 8006f48:	2248      	movs	r2, #72	; 0x48
 8006f4a:	2100      	movs	r1, #0
 8006f4c:	f005 ffde 	bl	800cf0c <memset>
 8006f50:	3401      	adds	r4, #1
 8006f52:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 8006f56:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
 8006f5a:	f8c0 8044 	str.w	r8, [r0, #68]	; 0x44
 8006f5e:	f7fe fb31 	bl	80055c4 <acc_rss_integration_get_sensor_count>
 8006f62:	42a0      	cmp	r0, r4
 8006f64:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 8006f68:	d8ea      	bhi.n	8006f40 <acc_sensor_manager_activate+0x34>
 8006f6a:	2401      	movs	r4, #1
 8006f6c:	7034      	strb	r4, [r6, #0]
 8006f6e:	4620      	mov	r0, r4
 8006f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f74:	20000360 	.word	0x20000360
 8006f78:	0800ec9c 	.word	0x0800ec9c
 8006f7c:	20000368 	.word	0x20000368
 8006f80:	ff800000 	.word	0xff800000

08006f84 <acc_sensor_manager_deactivate>:
 8006f84:	b510      	push	{r4, lr}
 8006f86:	4c05      	ldr	r4, [pc, #20]	; (8006f9c <acc_sensor_manager_deactivate+0x18>)
 8006f88:	7823      	ldrb	r3, [r4, #0]
 8006f8a:	b903      	cbnz	r3, 8006f8e <acc_sensor_manager_deactivate+0xa>
 8006f8c:	bd10      	pop	{r4, pc}
 8006f8e:	4b04      	ldr	r3, [pc, #16]	; (8006fa0 <acc_sensor_manager_deactivate+0x1c>)
 8006f90:	6818      	ldr	r0, [r3, #0]
 8006f92:	f7fe fbbb 	bl	800570c <acc_rss_integration_mem_free>
 8006f96:	2300      	movs	r3, #0
 8006f98:	7023      	strb	r3, [r4, #0]
 8006f9a:	bd10      	pop	{r4, pc}
 8006f9c:	20000360 	.word	0x20000360
 8006fa0:	20000368 	.word	0x20000368

08006fa4 <acc_sensor_manager_acquire_adc_data>:
 8006fa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fa8:	7846      	ldrb	r6, [r0, #1]
 8006faa:	461c      	mov	r4, r3
 8006fac:	b13e      	cbz	r6, 8006fbe <acc_sensor_manager_acquire_adc_data+0x1a>
 8006fae:	2300      	movs	r3, #0
 8006fb0:	7023      	strb	r3, [r4, #0]
 8006fb2:	7063      	strb	r3, [r4, #1]
 8006fb4:	70a3      	strb	r3, [r4, #2]
 8006fb6:	70e3      	strb	r3, [r4, #3]
 8006fb8:	4630      	mov	r0, r6
 8006fba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fbe:	f8df c0fc 	ldr.w	ip, [pc, #252]	; 80070bc <acc_sensor_manager_acquire_adc_data+0x118>
 8006fc2:	f8d0 9018 	ldr.w	r9, [r0, #24]
 8006fc6:	f8dc c000 	ldr.w	ip, [ip]
 8006fca:	4605      	mov	r5, r0
 8006fcc:	4688      	mov	r8, r1
 8006fce:	4617      	mov	r7, r2
 8006fd0:	f1bc 0f00 	cmp.w	ip, #0
 8006fd4:	d014      	beq.n	8007000 <acc_sensor_manager_acquire_adc_data+0x5c>
 8006fd6:	f8dc a00c 	ldr.w	sl, [ip, #12]
 8006fda:	f1ba 0f00 	cmp.w	sl, #0
 8006fde:	d00f      	beq.n	8007000 <acc_sensor_manager_acquire_adc_data+0x5c>
 8006fe0:	47d0      	blx	sl
 8006fe2:	2800      	cmp	r0, #0
 8006fe4:	d0e8      	beq.n	8006fb8 <acc_sensor_manager_acquire_adc_data+0x14>
 8006fe6:	786e      	ldrb	r6, [r5, #1]
 8006fe8:	2e00      	cmp	r6, #0
 8006fea:	d1e5      	bne.n	8006fb8 <acc_sensor_manager_acquire_adc_data+0x14>
 8006fec:	463b      	mov	r3, r7
 8006fee:	4642      	mov	r2, r8
 8006ff0:	4649      	mov	r1, r9
 8006ff2:	2601      	movs	r6, #1
 8006ff4:	2002      	movs	r0, #2
 8006ff6:	f000 fea7 	bl	8007d48 <acc_probes_execute_uint16>
 8006ffa:	4630      	mov	r0, r6
 8006ffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007000:	2300      	movs	r3, #0
 8007002:	7023      	strb	r3, [r4, #0]
 8007004:	7063      	strb	r3, [r4, #1]
 8007006:	70a3      	strb	r3, [r4, #2]
 8007008:	70e3      	strb	r3, [r4, #3]
 800700a:	f895 a000 	ldrb.w	sl, [r5]
 800700e:	f1ba 0f02 	cmp.w	sl, #2
 8007012:	d031      	beq.n	8007078 <acc_sensor_manager_acquire_adc_data+0xd4>
 8007014:	f1ba 0f01 	cmp.w	sl, #1
 8007018:	d034      	beq.n	8007084 <acc_sensor_manager_acquire_adc_data+0xe0>
 800701a:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 800701c:	1d28      	adds	r0, r5, #4
 800701e:	f000 fd5f 	bl	8007ae0 <acc_sweep_manager_acquire_adc_data>
 8007022:	6843      	ldr	r3, [r0, #4]
 8007024:	b30b      	cbz	r3, 800706a <acc_sensor_manager_acquire_adc_data+0xc6>
 8007026:	4543      	cmp	r3, r8
 8007028:	d13b      	bne.n	80070a2 <acc_sensor_manager_acquire_adc_data+0xfe>
 800702a:	8843      	ldrh	r3, [r0, #2]
 800702c:	42bb      	cmp	r3, r7
 800702e:	d133      	bne.n	8007098 <acc_sensor_manager_acquire_adc_data+0xf4>
 8007030:	4b1e      	ldr	r3, [pc, #120]	; (80070ac <acc_sensor_manager_acquire_adc_data+0x108>)
 8007032:	68c1      	ldr	r1, [r0, #12]
 8007034:	681a      	ldr	r2, [r3, #0]
 8007036:	7a06      	ldrb	r6, [r0, #8]
 8007038:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 800703c:	00db      	lsls	r3, r3, #3
 800703e:	3b48      	subs	r3, #72	; 0x48
 8007040:	4413      	add	r3, r2
 8007042:	7802      	ldrb	r2, [r0, #0]
 8007044:	7022      	strb	r2, [r4, #0]
 8007046:	7842      	ldrb	r2, [r0, #1]
 8007048:	7062      	strb	r2, [r4, #1]
 800704a:	f1ba 0f02 	cmp.w	sl, #2
 800704e:	7a42      	ldrb	r2, [r0, #9]
 8007050:	70e2      	strb	r2, [r4, #3]
 8007052:	70a6      	strb	r6, [r4, #2]
 8007054:	6459      	str	r1, [r3, #68]	; 0x44
 8007056:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800705a:	d017      	beq.n	800708c <acc_sensor_manager_acquire_adc_data+0xe8>
 800705c:	f1ba 0f01 	cmp.w	sl, #1
 8007060:	d1c1      	bne.n	8006fe6 <acc_sensor_manager_acquire_adc_data+0x42>
 8007062:	4628      	mov	r0, r5
 8007064:	f7ff ff38 	bl	8006ed8 <acc_sensor_manager_hibernate_enter>
 8007068:	e7bd      	b.n	8006fe6 <acc_sensor_manager_acquire_adc_data+0x42>
 800706a:	4911      	ldr	r1, [pc, #68]	; (80070b0 <acc_sensor_manager_acquire_adc_data+0x10c>)
 800706c:	4a11      	ldr	r2, [pc, #68]	; (80070b4 <acc_sensor_manager_acquire_adc_data+0x110>)
 800706e:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 8007070:	4911      	ldr	r1, [pc, #68]	; (80070b8 <acc_sensor_manager_acquire_adc_data+0x114>)
 8007072:	4618      	mov	r0, r3
 8007074:	47a0      	blx	r4
 8007076:	e79f      	b.n	8006fb8 <acc_sensor_manager_acquire_adc_data+0x14>
 8007078:	4628      	mov	r0, r5
 800707a:	f7ff fea1 	bl	8006dc0 <acc_sensor_manager_power_on_and_start_sensor>
 800707e:	2800      	cmp	r0, #0
 8007080:	d1cb      	bne.n	800701a <acc_sensor_manager_acquire_adc_data+0x76>
 8007082:	e799      	b.n	8006fb8 <acc_sensor_manager_acquire_adc_data+0x14>
 8007084:	4648      	mov	r0, r9
 8007086:	f7fe fac3 	bl	8005610 <acc_rss_integration_sensor_device_hibernate_exit>
 800708a:	e7c6      	b.n	800701a <acc_sensor_manager_acquire_adc_data+0x76>
 800708c:	4648      	mov	r0, r9
 800708e:	f7fe fab1 	bl	80055f4 <acc_rss_integration_sensor_device_power_off>
 8007092:	2300      	movs	r3, #0
 8007094:	70eb      	strb	r3, [r5, #3]
 8007096:	e7a6      	b.n	8006fe6 <acc_sensor_manager_acquire_adc_data+0x42>
 8007098:	4807      	ldr	r0, [pc, #28]	; (80070b8 <acc_sensor_manager_acquire_adc_data+0x114>)
 800709a:	f240 11c9 	movw	r1, #457	; 0x1c9
 800709e:	f000 fd6b 	bl	8007b78 <acc_assert_fail>
 80070a2:	4805      	ldr	r0, [pc, #20]	; (80070b8 <acc_sensor_manager_acquire_adc_data+0x114>)
 80070a4:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 80070a8:	f000 fd66 	bl	8007b78 <acc_assert_fail>
 80070ac:	20000368 	.word	0x20000368
 80070b0:	200004c0 	.word	0x200004c0
 80070b4:	0800ecf0 	.word	0x0800ecf0
 80070b8:	0800ec9c 	.word	0x0800ec9c
 80070bc:	20000364 	.word	0x20000364

080070c0 <acc_sensor_manager_prepare_radar_engine>:
 80070c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070c4:	f100 0804 	add.w	r8, r0, #4
 80070c8:	4617      	mov	r7, r2
 80070ca:	4605      	mov	r5, r0
 80070cc:	2234      	movs	r2, #52	; 0x34
 80070ce:	460c      	mov	r4, r1
 80070d0:	4640      	mov	r0, r8
 80070d2:	2100      	movs	r1, #0
 80070d4:	461e      	mov	r6, r3
 80070d6:	f005 ff19 	bl	800cf0c <memset>
 80070da:	4b1e      	ldr	r3, [pc, #120]	; (8007154 <acc_sensor_manager_prepare_radar_engine+0x94>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	463a      	mov	r2, r7
 80070e0:	4640      	mov	r0, r8
 80070e2:	b33b      	cbz	r3, 8007134 <acc_sensor_manager_prepare_radar_engine+0x74>
 80070e4:	f8d3 9000 	ldr.w	r9, [r3]
 80070e8:	f1b9 0f00 	cmp.w	r9, #0
 80070ec:	d022      	beq.n	8007134 <acc_sensor_manager_prepare_radar_engine+0x74>
 80070ee:	4633      	mov	r3, r6
 80070f0:	4621      	mov	r1, r4
 80070f2:	47c8      	blx	r9
 80070f4:	4607      	mov	r7, r0
 80070f6:	4620      	mov	r0, r4
 80070f8:	f7fd fefe 	bl	8004ef8 <acc_base_configuration_power_save_mode_get>
 80070fc:	b320      	cbz	r0, 8007148 <acc_sensor_manager_prepare_radar_engine+0x88>
 80070fe:	2804      	cmp	r0, #4
 8007100:	d025      	beq.n	800714e <acc_sensor_manager_prepare_radar_engine+0x8e>
 8007102:	2300      	movs	r3, #0
 8007104:	702b      	strb	r3, [r5, #0]
 8007106:	4620      	mov	r0, r4
 8007108:	f7fd ffc0 	bl	800508c <acc_base_configuration_repetition_mode_get>
 800710c:	fab0 f280 	clz	r2, r0
 8007110:	0952      	lsrs	r2, r2, #5
 8007112:	706a      	strb	r2, [r5, #1]
 8007114:	4620      	mov	r0, r4
 8007116:	f7fe f8cf 	bl	80052b8 <acc_base_configuration_asynchronous_measurement_get>
 800711a:	70a8      	strb	r0, [r5, #2]
 800711c:	4620      	mov	r0, r4
 800711e:	f7fd fe9b 	bl	8004e58 <acc_base_configuration_sensor_get>
 8007122:	4632      	mov	r2, r6
 8007124:	4601      	mov	r1, r0
 8007126:	231a      	movs	r3, #26
 8007128:	2005      	movs	r0, #5
 800712a:	f000 fe23 	bl	8007d74 <acc_probes_execute_struct>
 800712e:	4638      	mov	r0, r7
 8007130:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007134:	4633      	mov	r3, r6
 8007136:	4621      	mov	r1, r4
 8007138:	f000 fbec 	bl	8007914 <acc_sweep_manager_prepare>
 800713c:	4607      	mov	r7, r0
 800713e:	4620      	mov	r0, r4
 8007140:	f7fd feda 	bl	8004ef8 <acc_base_configuration_power_save_mode_get>
 8007144:	2800      	cmp	r0, #0
 8007146:	d1da      	bne.n	80070fe <acc_sensor_manager_prepare_radar_engine+0x3e>
 8007148:	2302      	movs	r3, #2
 800714a:	702b      	strb	r3, [r5, #0]
 800714c:	e7db      	b.n	8007106 <acc_sensor_manager_prepare_radar_engine+0x46>
 800714e:	2301      	movs	r3, #1
 8007150:	702b      	strb	r3, [r5, #0]
 8007152:	e7d8      	b.n	8007106 <acc_sensor_manager_prepare_radar_engine+0x46>
 8007154:	20000364 	.word	0x20000364

08007158 <acc_sensor_manager_prepare_measurement>:
 8007158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800715c:	4680      	mov	r8, r0
 800715e:	b083      	sub	sp, #12
 8007160:	4608      	mov	r0, r1
 8007162:	460e      	mov	r6, r1
 8007164:	4617      	mov	r7, r2
 8007166:	469a      	mov	sl, r3
 8007168:	f7fd fe76 	bl	8004e58 <acc_base_configuration_sensor_get>
 800716c:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 8007254 <acc_sensor_manager_prepare_measurement+0xfc>
 8007170:	4605      	mov	r5, r0
 8007172:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
 8007176:	4630      	mov	r0, r6
 8007178:	f7fe f894 	bl	80052a4 <acc_base_configuration_noise_deviation_override_get>
 800717c:	00e4      	lsls	r4, r4, #3
 800717e:	f8d9 1000 	ldr.w	r1, [r9]
 8007182:	4b32      	ldr	r3, [pc, #200]	; (800724c <acc_sensor_manager_prepare_measurement+0xf4>)
 8007184:	4a32      	ldr	r2, [pc, #200]	; (8007250 <acc_sensor_manager_prepare_measurement+0xf8>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	3c48      	subs	r4, #72	; 0x48
 800718a:	440c      	add	r4, r1
 800718c:	2100      	movs	r1, #0
 800718e:	4683      	mov	fp, r0
 8007190:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007194:	6462      	str	r2, [r4, #68]	; 0x44
 8007196:	b163      	cbz	r3, 80071b2 <acc_sensor_manager_prepare_measurement+0x5a>
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	b153      	cbz	r3, 80071b2 <acc_sensor_manager_prepare_measurement+0x5a>
 800719c:	4652      	mov	r2, sl
 800719e:	4630      	mov	r0, r6
 80071a0:	4639      	mov	r1, r7
 80071a2:	4798      	blx	r3
 80071a4:	4604      	mov	r4, r0
 80071a6:	2800      	cmp	r0, #0
 80071a8:	d14b      	bne.n	8007242 <acc_sensor_manager_prepare_measurement+0xea>
 80071aa:	4620      	mov	r0, r4
 80071ac:	b003      	add	sp, #12
 80071ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071b2:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80071b6:	f8c8 a038 	str.w	sl, [r8, #56]	; 0x38
 80071ba:	b17b      	cbz	r3, 80071dc <acc_sensor_manager_prepare_measurement+0x84>
 80071bc:	f1bb 0f00 	cmp.w	fp, #0
 80071c0:	d01b      	beq.n	80071fa <acc_sensor_manager_prepare_measurement+0xa2>
 80071c2:	f8a7 b014 	strh.w	fp, [r7, #20]
 80071c6:	463a      	mov	r2, r7
 80071c8:	4629      	mov	r1, r5
 80071ca:	2320      	movs	r3, #32
 80071cc:	200e      	movs	r0, #14
 80071ce:	f000 fdd1 	bl	8007d74 <acc_probes_execute_struct>
 80071d2:	2401      	movs	r4, #1
 80071d4:	4620      	mov	r0, r4
 80071d6:	b003      	add	sp, #12
 80071d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071dc:	f108 0104 	add.w	r1, r8, #4
 80071e0:	4652      	mov	r2, sl
 80071e2:	4628      	mov	r0, r5
 80071e4:	9101      	str	r1, [sp, #4]
 80071e6:	f7ff fe09 	bl	8006dfc <calibrate_sensor>
 80071ea:	9901      	ldr	r1, [sp, #4]
 80071ec:	4604      	mov	r4, r0
 80071ee:	2800      	cmp	r0, #0
 80071f0:	d1e4      	bne.n	80071bc <acc_sensor_manager_prepare_measurement+0x64>
 80071f2:	4608      	mov	r0, r1
 80071f4:	f000 fc28 	bl	8007a48 <acc_sweep_manager_release>
 80071f8:	e7d7      	b.n	80071aa <acc_sensor_manager_prepare_measurement+0x52>
 80071fa:	4630      	mov	r0, r6
 80071fc:	f7fe f83e 	bl	800527c <acc_base_configuration_noise_level_normalization_get>
 8007200:	2800      	cmp	r0, #0
 8007202:	d0e0      	beq.n	80071c6 <acc_sensor_manager_prepare_measurement+0x6e>
 8007204:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8007208:	4630      	mov	r0, r6
 800720a:	f7fe f9ed 	bl	80055e8 <acc_rss_integration_sensor_device_power_on>
 800720e:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 8007212:	f8d9 1000 	ldr.w	r1, [r9]
 8007216:	f8d8 2038 	ldr.w	r2, [r8, #56]	; 0x38
 800721a:	00db      	lsls	r3, r3, #3
 800721c:	3b48      	subs	r3, #72	; 0x48
 800721e:	f108 0804 	add.w	r8, r8, #4
 8007222:	4419      	add	r1, r3
 8007224:	4640      	mov	r0, r8
 8007226:	f107 0314 	add.w	r3, r7, #20
 800722a:	f000 fc23 	bl	8007a74 <acc_sweep_manager_measure_noise>
 800722e:	4604      	mov	r4, r0
 8007230:	4630      	mov	r0, r6
 8007232:	f7fe f9df 	bl	80055f4 <acc_rss_integration_sensor_device_power_off>
 8007236:	2c00      	cmp	r4, #0
 8007238:	d1c5      	bne.n	80071c6 <acc_sensor_manager_prepare_measurement+0x6e>
 800723a:	4640      	mov	r0, r8
 800723c:	f000 fc04 	bl	8007a48 <acc_sweep_manager_release>
 8007240:	e7b3      	b.n	80071aa <acc_sensor_manager_prepare_measurement+0x52>
 8007242:	f1bb 0f00 	cmp.w	fp, #0
 8007246:	d0be      	beq.n	80071c6 <acc_sensor_manager_prepare_measurement+0x6e>
 8007248:	e7bb      	b.n	80071c2 <acc_sensor_manager_prepare_measurement+0x6a>
 800724a:	bf00      	nop
 800724c:	20000364 	.word	0x20000364
 8007250:	ff800000 	.word	0xff800000
 8007254:	20000368 	.word	0x20000368

08007258 <acc_sensor_manager_start_measurement>:
 8007258:	4b1b      	ldr	r3, [pc, #108]	; (80072c8 <acc_sensor_manager_start_measurement+0x70>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	b570      	push	{r4, r5, r6, lr}
 800725e:	4604      	mov	r4, r0
 8007260:	b123      	cbz	r3, 800726c <acc_sensor_manager_start_measurement+0x14>
 8007262:	689b      	ldr	r3, [r3, #8]
 8007264:	b113      	cbz	r3, 800726c <acc_sensor_manager_start_measurement+0x14>
 8007266:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800726a:	4718      	bx	r3
 800726c:	7823      	ldrb	r3, [r4, #0]
 800726e:	2b02      	cmp	r3, #2
 8007270:	d008      	beq.n	8007284 <acc_sensor_manager_start_measurement+0x2c>
 8007272:	4620      	mov	r0, r4
 8007274:	f7ff fda4 	bl	8006dc0 <acc_sensor_manager_power_on_and_start_sensor>
 8007278:	b160      	cbz	r0, 8007294 <acc_sensor_manager_start_measurement+0x3c>
 800727a:	78a3      	ldrb	r3, [r4, #2]
 800727c:	b12b      	cbz	r3, 800728a <acc_sensor_manager_start_measurement+0x32>
 800727e:	7823      	ldrb	r3, [r4, #0]
 8007280:	2b01      	cmp	r3, #1
 8007282:	d010      	beq.n	80072a6 <acc_sensor_manager_start_measurement+0x4e>
 8007284:	2501      	movs	r5, #1
 8007286:	4628      	mov	r0, r5
 8007288:	bd70      	pop	{r4, r5, r6, pc}
 800728a:	1d25      	adds	r5, r4, #4
 800728c:	4628      	mov	r0, r5
 800728e:	f000 fc23 	bl	8007ad8 <acc_sweep_manager_measure>
 8007292:	b910      	cbnz	r0, 800729a <acc_sensor_manager_start_measurement+0x42>
 8007294:	2500      	movs	r5, #0
 8007296:	4628      	mov	r0, r5
 8007298:	bd70      	pop	{r4, r5, r6, pc}
 800729a:	4628      	mov	r0, r5
 800729c:	f000 fc12 	bl	8007ac4 <acc_sweep_manager_wait_for_data>
 80072a0:	2800      	cmp	r0, #0
 80072a2:	d1ec      	bne.n	800727e <acc_sensor_manager_start_measurement+0x26>
 80072a4:	e7f6      	b.n	8007294 <acc_sensor_manager_start_measurement+0x3c>
 80072a6:	1d25      	adds	r5, r4, #4
 80072a8:	4628      	mov	r0, r5
 80072aa:	f000 fc0b 	bl	8007ac4 <acc_sweep_manager_wait_for_data>
 80072ae:	2800      	cmp	r0, #0
 80072b0:	d0f0      	beq.n	8007294 <acc_sensor_manager_start_measurement+0x3c>
 80072b2:	4628      	mov	r0, r5
 80072b4:	f000 fc10 	bl	8007ad8 <acc_sweep_manager_measure>
 80072b8:	4605      	mov	r5, r0
 80072ba:	2800      	cmp	r0, #0
 80072bc:	d0ea      	beq.n	8007294 <acc_sensor_manager_start_measurement+0x3c>
 80072be:	4620      	mov	r0, r4
 80072c0:	f7ff fe0a 	bl	8006ed8 <acc_sensor_manager_hibernate_enter>
 80072c4:	e7df      	b.n	8007286 <acc_sensor_manager_start_measurement+0x2e>
 80072c6:	bf00      	nop
 80072c8:	20000364 	.word	0x20000364

080072cc <acc_sensor_manager_stop_measurement>:
 80072cc:	78c3      	ldrb	r3, [r0, #3]
 80072ce:	b903      	cbnz	r3, 80072d2 <acc_sensor_manager_stop_measurement+0x6>
 80072d0:	4770      	bx	lr
 80072d2:	b510      	push	{r4, lr}
 80072d4:	4604      	mov	r4, r0
 80072d6:	6980      	ldr	r0, [r0, #24]
 80072d8:	f7fe f98c 	bl	80055f4 <acc_rss_integration_sensor_device_power_off>
 80072dc:	2300      	movs	r3, #0
 80072de:	70e3      	strb	r3, [r4, #3]
 80072e0:	bd10      	pop	{r4, pc}
 80072e2:	bf00      	nop

080072e4 <acc_sensor_manager_release_measurement>:
 80072e4:	6983      	ldr	r3, [r0, #24]
 80072e6:	b173      	cbz	r3, 8007306 <acc_sensor_manager_release_measurement+0x22>
 80072e8:	4a07      	ldr	r2, [pc, #28]	; (8007308 <acc_sensor_manager_release_measurement+0x24>)
 80072ea:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 80072ee:	6812      	ldr	r2, [r2, #0]
 80072f0:	00db      	lsls	r3, r3, #3
 80072f2:	3b48      	subs	r3, #72	; 0x48
 80072f4:	4413      	add	r3, r2
 80072f6:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80072fa:	b90a      	cbnz	r2, 8007300 <acc_sensor_manager_release_measurement+0x1c>
 80072fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007300:	3004      	adds	r0, #4
 8007302:	f000 bba1 	b.w	8007a48 <acc_sweep_manager_release>
 8007306:	4770      	bx	lr
 8007308:	20000368 	.word	0x20000368

0800730c <acc_sensor_manager_get_sensor_id>:
 800730c:	6980      	ldr	r0, [r0, #24]
 800730e:	4770      	bx	lr

08007310 <acc_sensor_protocol_r2_prepare_load>:
 8007310:	b570      	push	{r4, r5, r6, lr}
 8007312:	b084      	sub	sp, #16
 8007314:	4604      	mov	r4, r0
 8007316:	4608      	mov	r0, r1
 8007318:	4611      	mov	r1, r2
 800731a:	461a      	mov	r2, r3
 800731c:	9b08      	ldr	r3, [sp, #32]
 800731e:	f7ff fcef 	bl	8006d00 <acc_sensor_r2_prepare_load_confmem>
 8007322:	2300      	movs	r3, #0
 8007324:	4620      	mov	r0, r4
 8007326:	f10d 020e 	add.w	r2, sp, #14
 800732a:	212a      	movs	r1, #42	; 0x2a
 800732c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8007330:	f000 fd50 	bl	8007dd4 <acc_sensor_reg_read>
 8007334:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8007338:	065b      	lsls	r3, r3, #25
 800733a:	d436      	bmi.n	80073aa <acc_sensor_protocol_r2_prepare_load+0x9a>
 800733c:	f10d 020e 	add.w	r2, sp, #14
 8007340:	2500      	movs	r5, #0
 8007342:	2111      	movs	r1, #17
 8007344:	4620      	mov	r0, r4
 8007346:	f8ad 500e 	strh.w	r5, [sp, #14]
 800734a:	f000 fd43 	bl	8007dd4 <acc_sensor_reg_read>
 800734e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8007352:	f413 6680 	ands.w	r6, r3, #1024	; 0x400
 8007356:	d00c      	beq.n	8007372 <acc_sensor_protocol_r2_prepare_load+0x62>
 8007358:	4b1b      	ldr	r3, [pc, #108]	; (80073c8 <acc_sensor_protocol_r2_prepare_load+0xb8>)
 800735a:	4a1c      	ldr	r2, [pc, #112]	; (80073cc <acc_sensor_protocol_r2_prepare_load+0xbc>)
 800735c:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800735e:	491c      	ldr	r1, [pc, #112]	; (80073d0 <acc_sensor_protocol_r2_prepare_load+0xc0>)
 8007360:	4623      	mov	r3, r4
 8007362:	4628      	mov	r0, r5
 8007364:	47b0      	blx	r6
 8007366:	4620      	mov	r0, r4
 8007368:	f004 f888 	bl	800b47c <acc_sensor_diagnostics_r2_sensor_status>
 800736c:	4628      	mov	r0, r5
 800736e:	b004      	add	sp, #16
 8007370:	bd70      	pop	{r4, r5, r6, pc}
 8007372:	2501      	movs	r5, #1
 8007374:	4629      	mov	r1, r5
 8007376:	4620      	mov	r0, r4
 8007378:	9500      	str	r5, [sp, #0]
 800737a:	2380      	movs	r3, #128	; 0x80
 800737c:	2202      	movs	r2, #2
 800737e:	f000 fd4f 	bl	8007e20 <acc_sensor_reg_field_write>
 8007382:	2380      	movs	r3, #128	; 0x80
 8007384:	461a      	mov	r2, r3
 8007386:	4620      	mov	r0, r4
 8007388:	9600      	str	r6, [sp, #0]
 800738a:	2107      	movs	r1, #7
 800738c:	f000 fd48 	bl	8007e20 <acc_sensor_reg_field_write>
 8007390:	462a      	mov	r2, r5
 8007392:	4620      	mov	r0, r4
 8007394:	2105      	movs	r1, #5
 8007396:	f000 fd33 	bl	8007e00 <acc_sensor_reg_write>
 800739a:	4620      	mov	r0, r4
 800739c:	2203      	movs	r2, #3
 800739e:	217a      	movs	r1, #122	; 0x7a
 80073a0:	f000 fd2e 	bl	8007e00 <acc_sensor_reg_write>
 80073a4:	4628      	mov	r0, r5
 80073a6:	b004      	add	sp, #16
 80073a8:	bd70      	pop	{r4, r5, r6, pc}
 80073aa:	f7fe f9c1 	bl	8005730 <acc_rss_integration_log_level>
 80073ae:	b130      	cbz	r0, 80073be <acc_sensor_protocol_r2_prepare_load+0xae>
 80073b0:	4b05      	ldr	r3, [pc, #20]	; (80073c8 <acc_sensor_protocol_r2_prepare_load+0xb8>)
 80073b2:	4a08      	ldr	r2, [pc, #32]	; (80073d4 <acc_sensor_protocol_r2_prepare_load+0xc4>)
 80073b4:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 80073b6:	4906      	ldr	r1, [pc, #24]	; (80073d0 <acc_sensor_protocol_r2_prepare_load+0xc0>)
 80073b8:	4623      	mov	r3, r4
 80073ba:	2001      	movs	r0, #1
 80073bc:	47a8      	blx	r5
 80073be:	4620      	mov	r0, r4
 80073c0:	f004 f85c 	bl	800b47c <acc_sensor_diagnostics_r2_sensor_status>
 80073c4:	e7ba      	b.n	800733c <acc_sensor_protocol_r2_prepare_load+0x2c>
 80073c6:	bf00      	nop
 80073c8:	200004c0 	.word	0x200004c0
 80073cc:	0800ed48 	.word	0x0800ed48
 80073d0:	0800ed34 	.word	0x0800ed34
 80073d4:	0800ed08 	.word	0x0800ed08

080073d8 <acc_sensor_protocol_r2_run_program>:
 80073d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073da:	b085      	sub	sp, #20
 80073dc:	4604      	mov	r4, r0
 80073de:	460e      	mov	r6, r1
 80073e0:	f7fe f9a6 	bl	8005730 <acc_rss_integration_log_level>
 80073e4:	2803      	cmp	r0, #3
 80073e6:	d907      	bls.n	80073f8 <acc_sensor_protocol_r2_run_program+0x20>
 80073e8:	4b1e      	ldr	r3, [pc, #120]	; (8007464 <acc_sensor_protocol_r2_run_program+0x8c>)
 80073ea:	9600      	str	r6, [sp, #0]
 80073ec:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 80073ee:	4a1e      	ldr	r2, [pc, #120]	; (8007468 <acc_sensor_protocol_r2_run_program+0x90>)
 80073f0:	491e      	ldr	r1, [pc, #120]	; (800746c <acc_sensor_protocol_r2_run_program+0x94>)
 80073f2:	4623      	mov	r3, r4
 80073f4:	2004      	movs	r0, #4
 80073f6:	47a8      	blx	r5
 80073f8:	f10d 020e 	add.w	r2, sp, #14
 80073fc:	2700      	movs	r7, #0
 80073fe:	2111      	movs	r1, #17
 8007400:	4620      	mov	r0, r4
 8007402:	f8ad 700e 	strh.w	r7, [sp, #14]
 8007406:	f000 fce5 	bl	8007dd4 <acc_sensor_reg_read>
 800740a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 800740e:	f412 6580 	ands.w	r5, r2, #1024	; 0x400
 8007412:	d11a      	bne.n	800744a <acc_sensor_protocol_r2_run_program+0x72>
 8007414:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007418:	d309      	bcc.n	800742e <acc_sensor_protocol_r2_run_program+0x56>
 800741a:	4b12      	ldr	r3, [pc, #72]	; (8007464 <acc_sensor_protocol_r2_run_program+0x8c>)
 800741c:	4a14      	ldr	r2, [pc, #80]	; (8007470 <acc_sensor_protocol_r2_run_program+0x98>)
 800741e:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8007420:	4912      	ldr	r1, [pc, #72]	; (800746c <acc_sensor_protocol_r2_run_program+0x94>)
 8007422:	4628      	mov	r0, r5
 8007424:	4633      	mov	r3, r6
 8007426:	47a0      	blx	r4
 8007428:	4628      	mov	r0, r5
 800742a:	b005      	add	sp, #20
 800742c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800742e:	462a      	mov	r2, r5
 8007430:	4620      	mov	r0, r4
 8007432:	2110      	movs	r1, #16
 8007434:	f000 fce4 	bl	8007e00 <acc_sensor_reg_write>
 8007438:	4620      	mov	r0, r4
 800743a:	f446 6280 	orr.w	r2, r6, #1024	; 0x400
 800743e:	2110      	movs	r1, #16
 8007440:	f000 fcde 	bl	8007e00 <acc_sensor_reg_write>
 8007444:	2001      	movs	r0, #1
 8007446:	b005      	add	sp, #20
 8007448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800744a:	4b06      	ldr	r3, [pc, #24]	; (8007464 <acc_sensor_protocol_r2_run_program+0x8c>)
 800744c:	4a09      	ldr	r2, [pc, #36]	; (8007474 <acc_sensor_protocol_r2_run_program+0x9c>)
 800744e:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8007450:	4906      	ldr	r1, [pc, #24]	; (800746c <acc_sensor_protocol_r2_run_program+0x94>)
 8007452:	4623      	mov	r3, r4
 8007454:	4638      	mov	r0, r7
 8007456:	47a8      	blx	r5
 8007458:	4620      	mov	r0, r4
 800745a:	f004 f80f 	bl	800b47c <acc_sensor_diagnostics_r2_sensor_status>
 800745e:	4638      	mov	r0, r7
 8007460:	b005      	add	sp, #20
 8007462:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007464:	200004c0 	.word	0x200004c0
 8007468:	0800ed78 	.word	0x0800ed78
 800746c:	0800ed34 	.word	0x0800ed34
 8007470:	0800edcc 	.word	0x0800edcc
 8007474:	0800ed9c 	.word	0x0800ed9c

08007478 <acc_sensor_protocol_r2_terminate_program>:
 8007478:	b530      	push	{r4, r5, lr}
 800747a:	b083      	sub	sp, #12
 800747c:	2300      	movs	r3, #0
 800747e:	f10d 0206 	add.w	r2, sp, #6
 8007482:	2111      	movs	r1, #17
 8007484:	f8ad 3006 	strh.w	r3, [sp, #6]
 8007488:	4605      	mov	r5, r0
 800748a:	f000 fca3 	bl	8007dd4 <acc_sensor_reg_read>
 800748e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8007492:	f413 6480 	ands.w	r4, r3, #1024	; 0x400
 8007496:	d10b      	bne.n	80074b0 <acc_sensor_protocol_r2_terminate_program+0x38>
 8007498:	4b09      	ldr	r3, [pc, #36]	; (80074c0 <acc_sensor_protocol_r2_terminate_program+0x48>)
 800749a:	4a0a      	ldr	r2, [pc, #40]	; (80074c4 <acc_sensor_protocol_r2_terminate_program+0x4c>)
 800749c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800749e:	490a      	ldr	r1, [pc, #40]	; (80074c8 <acc_sensor_protocol_r2_terminate_program+0x50>)
 80074a0:	4620      	mov	r0, r4
 80074a2:	4798      	blx	r3
 80074a4:	4628      	mov	r0, r5
 80074a6:	f003 ffe9 	bl	800b47c <acc_sensor_diagnostics_r2_sensor_status>
 80074aa:	4620      	mov	r0, r4
 80074ac:	b003      	add	sp, #12
 80074ae:	bd30      	pop	{r4, r5, pc}
 80074b0:	4628      	mov	r0, r5
 80074b2:	2201      	movs	r2, #1
 80074b4:	2174      	movs	r1, #116	; 0x74
 80074b6:	f000 fca3 	bl	8007e00 <acc_sensor_reg_write>
 80074ba:	2001      	movs	r0, #1
 80074bc:	b003      	add	sp, #12
 80074be:	bd30      	pop	{r4, r5, pc}
 80074c0:	200004c0 	.word	0x200004c0
 80074c4:	0800ede8 	.word	0x0800ede8
 80074c8:	0800ed34 	.word	0x0800ed34

080074cc <acc_sensor_protocol_r2_is_sensor_running>:
 80074cc:	b500      	push	{lr}
 80074ce:	b083      	sub	sp, #12
 80074d0:	2300      	movs	r3, #0
 80074d2:	f10d 0206 	add.w	r2, sp, #6
 80074d6:	2111      	movs	r1, #17
 80074d8:	f8ad 3006 	strh.w	r3, [sp, #6]
 80074dc:	f000 fc7a 	bl	8007dd4 <acc_sensor_reg_read>
 80074e0:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80074e4:	f3c0 2080 	ubfx	r0, r0, #10, #1
 80074e8:	b003      	add	sp, #12
 80074ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80074ee:	bf00      	nop

080074f0 <acc_sensor_protocol_r2_ack_event>:
 80074f0:	b570      	push	{r4, r5, r6, lr}
 80074f2:	b082      	sub	sp, #8
 80074f4:	2300      	movs	r3, #0
 80074f6:	f10d 0206 	add.w	r2, sp, #6
 80074fa:	2138      	movs	r1, #56	; 0x38
 80074fc:	4605      	mov	r5, r0
 80074fe:	f8ad 3006 	strh.w	r3, [sp, #6]
 8007502:	f000 fc67 	bl	8007dd4 <acc_sensor_reg_read>
 8007506:	f8bd 4006 	ldrh.w	r4, [sp, #6]
 800750a:	b114      	cbz	r4, 8007512 <acc_sensor_protocol_r2_ack_event+0x22>
 800750c:	2001      	movs	r0, #1
 800750e:	b002      	add	sp, #8
 8007510:	bd70      	pop	{r4, r5, r6, pc}
 8007512:	4b06      	ldr	r3, [pc, #24]	; (800752c <acc_sensor_protocol_r2_ack_event+0x3c>)
 8007514:	4a06      	ldr	r2, [pc, #24]	; (8007530 <acc_sensor_protocol_r2_ack_event+0x40>)
 8007516:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8007518:	4906      	ldr	r1, [pc, #24]	; (8007534 <acc_sensor_protocol_r2_ack_event+0x44>)
 800751a:	462b      	mov	r3, r5
 800751c:	4620      	mov	r0, r4
 800751e:	47b0      	blx	r6
 8007520:	4628      	mov	r0, r5
 8007522:	f003 ffab 	bl	800b47c <acc_sensor_diagnostics_r2_sensor_status>
 8007526:	4620      	mov	r0, r4
 8007528:	b002      	add	sp, #8
 800752a:	bd70      	pop	{r4, r5, r6, pc}
 800752c:	200004c0 	.word	0x200004c0
 8007530:	0800ee1c 	.word	0x0800ee1c
 8007534:	0800ed34 	.word	0x0800ed34

08007538 <acc_sensor_protocol_r2_get_event>:
 8007538:	b570      	push	{r4, r5, r6, lr}
 800753a:	460c      	mov	r4, r1
 800753c:	b084      	sub	sp, #16
 800753e:	b301      	cbz	r1, 8007582 <acc_sensor_protocol_r2_get_event+0x4a>
 8007540:	f10d 020e 	add.w	r2, sp, #14
 8007544:	2128      	movs	r1, #40	; 0x28
 8007546:	4605      	mov	r5, r0
 8007548:	f000 fc44 	bl	8007dd4 <acc_sensor_reg_read>
 800754c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8007550:	8062      	strh	r2, [r4, #2]
 8007552:	b2d3      	uxtb	r3, r2
 8007554:	2b01      	cmp	r3, #1
 8007556:	7023      	strb	r3, [r4, #0]
 8007558:	d026      	beq.n	80075a8 <acc_sensor_protocol_r2_get_event+0x70>
 800755a:	d80c      	bhi.n	8007576 <acc_sensor_protocol_r2_get_event+0x3e>
 800755c:	4b22      	ldr	r3, [pc, #136]	; (80075e8 <acc_sensor_protocol_r2_get_event+0xb0>)
 800755e:	4a23      	ldr	r2, [pc, #140]	; (80075ec <acc_sensor_protocol_r2_get_event+0xb4>)
 8007560:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8007562:	4923      	ldr	r1, [pc, #140]	; (80075f0 <acc_sensor_protocol_r2_get_event+0xb8>)
 8007564:	462b      	mov	r3, r5
 8007566:	2000      	movs	r0, #0
 8007568:	47a0      	blx	r4
 800756a:	4628      	mov	r0, r5
 800756c:	f003 ff86 	bl	800b47c <acc_sensor_diagnostics_r2_sensor_status>
 8007570:	2000      	movs	r0, #0
 8007572:	b004      	add	sp, #16
 8007574:	bd70      	pop	{r4, r5, r6, pc}
 8007576:	1e9a      	subs	r2, r3, #2
 8007578:	2a09      	cmp	r2, #9
 800757a:	d80b      	bhi.n	8007594 <acc_sensor_protocol_r2_get_event+0x5c>
 800757c:	2001      	movs	r0, #1
 800757e:	b004      	add	sp, #16
 8007580:	bd70      	pop	{r4, r5, r6, pc}
 8007582:	4b19      	ldr	r3, [pc, #100]	; (80075e8 <acc_sensor_protocol_r2_get_event+0xb0>)
 8007584:	4a1b      	ldr	r2, [pc, #108]	; (80075f4 <acc_sensor_protocol_r2_get_event+0xbc>)
 8007586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007588:	4919      	ldr	r1, [pc, #100]	; (80075f0 <acc_sensor_protocol_r2_get_event+0xb8>)
 800758a:	4620      	mov	r0, r4
 800758c:	4798      	blx	r3
 800758e:	4620      	mov	r0, r4
 8007590:	b004      	add	sp, #16
 8007592:	bd70      	pop	{r4, r5, r6, pc}
 8007594:	4a14      	ldr	r2, [pc, #80]	; (80075e8 <acc_sensor_protocol_r2_get_event+0xb0>)
 8007596:	9500      	str	r5, [sp, #0]
 8007598:	6b56      	ldr	r6, [r2, #52]	; 0x34
 800759a:	4915      	ldr	r1, [pc, #84]	; (80075f0 <acc_sensor_protocol_r2_get_event+0xb8>)
 800759c:	4a16      	ldr	r2, [pc, #88]	; (80075f8 <acc_sensor_protocol_r2_get_event+0xc0>)
 800759e:	2000      	movs	r0, #0
 80075a0:	47b0      	blx	r6
 80075a2:	2300      	movs	r3, #0
 80075a4:	7023      	strb	r3, [r4, #0]
 80075a6:	e7e0      	b.n	800756a <acc_sensor_protocol_r2_get_event+0x32>
 80075a8:	f5b2 5f88 	cmp.w	r2, #4352	; 0x1100
 80075ac:	ea4f 2112 	mov.w	r1, r2, lsr #8
 80075b0:	d203      	bcs.n	80075ba <acc_sensor_protocol_r2_get_event+0x82>
 80075b2:	4a12      	ldr	r2, [pc, #72]	; (80075fc <acc_sensor_protocol_r2_get_event+0xc4>)
 80075b4:	408b      	lsls	r3, r1
 80075b6:	401a      	ands	r2, r3
 80075b8:	b96a      	cbnz	r2, 80075d6 <acc_sensor_protocol_r2_get_event+0x9e>
 80075ba:	4a0b      	ldr	r2, [pc, #44]	; (80075e8 <acc_sensor_protocol_r2_get_event+0xb0>)
 80075bc:	f242 1301 	movw	r3, #8449	; 0x2101
 80075c0:	6b56      	ldr	r6, [r2, #52]	; 0x34
 80075c2:	8063      	strh	r3, [r4, #2]
 80075c4:	2320      	movs	r3, #32
 80075c6:	4a0e      	ldr	r2, [pc, #56]	; (8007600 <acc_sensor_protocol_r2_get_event+0xc8>)
 80075c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075cc:	4a0d      	ldr	r2, [pc, #52]	; (8007604 <acc_sensor_protocol_r2_get_event+0xcc>)
 80075ce:	4908      	ldr	r1, [pc, #32]	; (80075f0 <acc_sensor_protocol_r2_get_event+0xb8>)
 80075d0:	2000      	movs	r0, #0
 80075d2:	47b0      	blx	r6
 80075d4:	e7c9      	b.n	800756a <acc_sensor_protocol_r2_get_event+0x32>
 80075d6:	1e4b      	subs	r3, r1, #1
 80075d8:	4a03      	ldr	r2, [pc, #12]	; (80075e8 <acc_sensor_protocol_r2_get_event+0xb0>)
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	2b20      	cmp	r3, #32
 80075de:	6b56      	ldr	r6, [r2, #52]	; 0x34
 80075e0:	d9f1      	bls.n	80075c6 <acc_sensor_protocol_r2_get_event+0x8e>
 80075e2:	4b09      	ldr	r3, [pc, #36]	; (8007608 <acc_sensor_protocol_r2_get_event+0xd0>)
 80075e4:	e7f2      	b.n	80075cc <acc_sensor_protocol_r2_get_event+0x94>
 80075e6:	bf00      	nop
 80075e8:	200004c0 	.word	0x200004c0
 80075ec:	0800ee74 	.word	0x0800ee74
 80075f0:	0800ed34 	.word	0x0800ed34
 80075f4:	0800ee60 	.word	0x0800ee60
 80075f8:	0800eeb8 	.word	0x0800eeb8
 80075fc:	00010016 	.word	0x00010016
 8007600:	0800f194 	.word	0x0800f194
 8007604:	0800ee98 	.word	0x0800ee98
 8007608:	0800ee50 	.word	0x0800ee50

0800760c <acc_sensor_protocol_r2_wait_for_event>:
 800760c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007610:	b087      	sub	sp, #28
 8007612:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 80076c8 <acc_sensor_protocol_r2_wait_for_event+0xbc>
 8007616:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80076dc <acc_sensor_protocol_r2_wait_for_event+0xd0>
 800761a:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 80076d0 <acc_sensor_protocol_r2_wait_for_event+0xc4>
 800761e:	9303      	str	r3, [sp, #12]
 8007620:	4604      	mov	r4, r0
 8007622:	460e      	mov	r6, r1
 8007624:	4690      	mov	r8, r2
 8007626:	2500      	movs	r5, #0
 8007628:	e018      	b.n	800765c <acc_sensor_protocol_r2_wait_for_event+0x50>
 800762a:	4620      	mov	r0, r4
 800762c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007630:	f000 fbd0 	bl	8007dd4 <acc_sensor_reg_read>
 8007634:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8007638:	065b      	lsls	r3, r3, #25
 800763a:	d434      	bmi.n	80076a6 <acc_sensor_protocol_r2_wait_for_event+0x9a>
 800763c:	f7fe f878 	bl	8005730 <acc_rss_integration_log_level>
 8007640:	4607      	mov	r7, r0
 8007642:	4623      	mov	r3, r4
 8007644:	4652      	mov	r2, sl
 8007646:	4649      	mov	r1, r9
 8007648:	2001      	movs	r0, #1
 800764a:	b117      	cbz	r7, 8007652 <acc_sensor_protocol_r2_wait_for_event+0x46>
 800764c:	f8db 7034 	ldr.w	r7, [fp, #52]	; 0x34
 8007650:	47b8      	blx	r7
 8007652:	4545      	cmp	r5, r8
 8007654:	f105 0301 	add.w	r3, r5, #1
 8007658:	d018      	beq.n	800768c <acc_sensor_protocol_r2_wait_for_event+0x80>
 800765a:	461d      	mov	r5, r3
 800765c:	4631      	mov	r1, r6
 800765e:	4620      	mov	r0, r4
 8007660:	f7fd ffe6 	bl	8005630 <acc_rss_integration_wait_for_sensor_interrupt>
 8007664:	f10d 0216 	add.w	r2, sp, #22
 8007668:	212a      	movs	r1, #42	; 0x2a
 800766a:	2300      	movs	r3, #0
 800766c:	4607      	mov	r7, r0
 800766e:	2800      	cmp	r0, #0
 8007670:	d1db      	bne.n	800762a <acc_sensor_protocol_r2_wait_for_event+0x1e>
 8007672:	4b15      	ldr	r3, [pc, #84]	; (80076c8 <acc_sensor_protocol_r2_wait_for_event+0xbc>)
 8007674:	4a15      	ldr	r2, [pc, #84]	; (80076cc <acc_sensor_protocol_r2_wait_for_event+0xc0>)
 8007676:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8007678:	4915      	ldr	r1, [pc, #84]	; (80076d0 <acc_sensor_protocol_r2_wait_for_event+0xc4>)
 800767a:	4623      	mov	r3, r4
 800767c:	47a8      	blx	r5
 800767e:	4620      	mov	r0, r4
 8007680:	f003 fefc 	bl	800b47c <acc_sensor_diagnostics_r2_sensor_status>
 8007684:	4638      	mov	r0, r7
 8007686:	b007      	add	sp, #28
 8007688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800768c:	4a0e      	ldr	r2, [pc, #56]	; (80076c8 <acc_sensor_protocol_r2_wait_for_event+0xbc>)
 800768e:	9400      	str	r4, [sp, #0]
 8007690:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8007692:	490f      	ldr	r1, [pc, #60]	; (80076d0 <acc_sensor_protocol_r2_wait_for_event+0xc4>)
 8007694:	4a0f      	ldr	r2, [pc, #60]	; (80076d4 <acc_sensor_protocol_r2_wait_for_event+0xc8>)
 8007696:	462b      	mov	r3, r5
 8007698:	2000      	movs	r0, #0
 800769a:	47a0      	blx	r4
 800769c:	2700      	movs	r7, #0
 800769e:	4638      	mov	r0, r7
 80076a0:	b007      	add	sp, #28
 80076a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076a6:	9903      	ldr	r1, [sp, #12]
 80076a8:	4620      	mov	r0, r4
 80076aa:	f7ff ff45 	bl	8007538 <acc_sensor_protocol_r2_get_event>
 80076ae:	4607      	mov	r7, r0
 80076b0:	2800      	cmp	r0, #0
 80076b2:	d1e7      	bne.n	8007684 <acc_sensor_protocol_r2_wait_for_event+0x78>
 80076b4:	4b04      	ldr	r3, [pc, #16]	; (80076c8 <acc_sensor_protocol_r2_wait_for_event+0xbc>)
 80076b6:	4a08      	ldr	r2, [pc, #32]	; (80076d8 <acc_sensor_protocol_r2_wait_for_event+0xcc>)
 80076b8:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 80076ba:	4905      	ldr	r1, [pc, #20]	; (80076d0 <acc_sensor_protocol_r2_wait_for_event+0xc4>)
 80076bc:	4623      	mov	r3, r4
 80076be:	47a8      	blx	r5
 80076c0:	4638      	mov	r0, r7
 80076c2:	b007      	add	sp, #28
 80076c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076c8:	200004c0 	.word	0x200004c0
 80076cc:	0800eee8 	.word	0x0800eee8
 80076d0:	0800ed34 	.word	0x0800ed34
 80076d4:	0800ef34 	.word	0x0800ef34
 80076d8:	0800ef70 	.word	0x0800ef70
 80076dc:	0800ef10 	.word	0x0800ef10

080076e0 <acc_sensor_protocol_r2_wait_for_specific_event>:
 80076e0:	b570      	push	{r4, r5, r6, lr}
 80076e2:	b084      	sub	sp, #16
 80076e4:	4616      	mov	r6, r2
 80076e6:	461c      	mov	r4, r3
 80076e8:	2264      	movs	r2, #100	; 0x64
 80076ea:	ab03      	add	r3, sp, #12
 80076ec:	4605      	mov	r5, r0
 80076ee:	f7ff ff8d 	bl	800760c <acc_sensor_protocol_r2_wait_for_event>
 80076f2:	b168      	cbz	r0, 8007710 <acc_sensor_protocol_r2_wait_for_specific_event+0x30>
 80076f4:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80076f8:	42b3      	cmp	r3, r6
 80076fa:	d00b      	beq.n	8007714 <acc_sensor_protocol_r2_wait_for_specific_event+0x34>
 80076fc:	e9cd 3600 	strd	r3, r6, [sp]
 8007700:	4a08      	ldr	r2, [pc, #32]	; (8007724 <acc_sensor_protocol_r2_wait_for_specific_event+0x44>)
 8007702:	4b09      	ldr	r3, [pc, #36]	; (8007728 <acc_sensor_protocol_r2_wait_for_specific_event+0x48>)
 8007704:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8007706:	4909      	ldr	r1, [pc, #36]	; (800772c <acc_sensor_protocol_r2_wait_for_specific_event+0x4c>)
 8007708:	4a09      	ldr	r2, [pc, #36]	; (8007730 <acc_sensor_protocol_r2_wait_for_specific_event+0x50>)
 800770a:	2000      	movs	r0, #0
 800770c:	47a0      	blx	r4
 800770e:	2000      	movs	r0, #0
 8007710:	b004      	add	sp, #16
 8007712:	bd70      	pop	{r4, r5, r6, pc}
 8007714:	2c00      	cmp	r4, #0
 8007716:	d0fb      	beq.n	8007710 <acc_sensor_protocol_r2_wait_for_specific_event+0x30>
 8007718:	4628      	mov	r0, r5
 800771a:	f7ff fee9 	bl	80074f0 <acc_sensor_protocol_r2_ack_event>
 800771e:	b004      	add	sp, #16
 8007720:	bd70      	pop	{r4, r5, r6, pc}
 8007722:	bf00      	nop
 8007724:	200004c0 	.word	0x200004c0
 8007728:	0800f218 	.word	0x0800f218
 800772c:	0800ed34 	.word	0x0800ed34
 8007730:	0800ef98 	.word	0x0800ef98

08007734 <acc_sensor_protocol_r2_wait_for_hibernate_ready>:
 8007734:	2301      	movs	r3, #1
 8007736:	220b      	movs	r2, #11
 8007738:	f7ff bfd2 	b.w	80076e0 <acc_sensor_protocol_r2_wait_for_specific_event>

0800773c <acc_sensor_protocol_r2_stop>:
 800773c:	b530      	push	{r4, r5, lr}
 800773e:	b083      	sub	sp, #12
 8007740:	460c      	mov	r4, r1
 8007742:	4605      	mov	r5, r0
 8007744:	f7ff fe98 	bl	8007478 <acc_sensor_protocol_r2_terminate_program>
 8007748:	b910      	cbnz	r0, 8007750 <acc_sensor_protocol_r2_stop+0x14>
 800774a:	2000      	movs	r0, #0
 800774c:	b003      	add	sp, #12
 800774e:	bd30      	pop	{r4, r5, pc}
 8007750:	4628      	mov	r0, r5
 8007752:	f7ff fecd 	bl	80074f0 <acc_sensor_protocol_r2_ack_event>
 8007756:	2800      	cmp	r0, #0
 8007758:	d0f7      	beq.n	800774a <acc_sensor_protocol_r2_stop+0xe>
 800775a:	4621      	mov	r1, r4
 800775c:	ab01      	add	r3, sp, #4
 800775e:	2264      	movs	r2, #100	; 0x64
 8007760:	4628      	mov	r0, r5
 8007762:	f7ff ff53 	bl	800760c <acc_sensor_protocol_r2_wait_for_event>
 8007766:	2800      	cmp	r0, #0
 8007768:	d0ef      	beq.n	800774a <acc_sensor_protocol_r2_stop+0xe>
 800776a:	4628      	mov	r0, r5
 800776c:	f7ff fec0 	bl	80074f0 <acc_sensor_protocol_r2_ack_event>
 8007770:	2800      	cmp	r0, #0
 8007772:	d0ea      	beq.n	800774a <acc_sensor_protocol_r2_stop+0xe>
 8007774:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007778:	2b02      	cmp	r3, #2
 800777a:	d0e7      	beq.n	800774c <acc_sensor_protocol_r2_stop+0x10>
 800777c:	4a05      	ldr	r2, [pc, #20]	; (8007794 <acc_sensor_protocol_r2_stop+0x58>)
 800777e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8007782:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8007784:	4904      	ldr	r1, [pc, #16]	; (8007798 <acc_sensor_protocol_r2_stop+0x5c>)
 8007786:	4a05      	ldr	r2, [pc, #20]	; (800779c <acc_sensor_protocol_r2_stop+0x60>)
 8007788:	2000      	movs	r0, #0
 800778a:	47a0      	blx	r4
 800778c:	4628      	mov	r0, r5
 800778e:	f003 fe75 	bl	800b47c <acc_sensor_diagnostics_r2_sensor_status>
 8007792:	e7da      	b.n	800774a <acc_sensor_protocol_r2_stop+0xe>
 8007794:	200004c0 	.word	0x200004c0
 8007798:	0800ed34 	.word	0x0800ed34
 800779c:	0800efc4 	.word	0x0800efc4

080077a0 <acc_sensor_protocol_r2_wait_for_radar_data>:
 80077a0:	b570      	push	{r4, r5, r6, lr}
 80077a2:	b084      	sub	sp, #16
 80077a4:	4616      	mov	r6, r2
 80077a6:	ab03      	add	r3, sp, #12
 80077a8:	2264      	movs	r2, #100	; 0x64
 80077aa:	4605      	mov	r5, r0
 80077ac:	f7ff ff2e 	bl	800760c <acc_sensor_protocol_r2_wait_for_event>
 80077b0:	4604      	mov	r4, r0
 80077b2:	b180      	cbz	r0, 80077d6 <acc_sensor_protocol_r2_wait_for_radar_data+0x36>
 80077b4:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80077b8:	2b06      	cmp	r3, #6
 80077ba:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80077be:	d10d      	bne.n	80077dc <acc_sensor_protocol_r2_wait_for_radar_data+0x3c>
 80077c0:	0519      	lsls	r1, r3, #20
 80077c2:	d50b      	bpl.n	80077dc <acc_sensor_protocol_r2_wait_for_radar_data+0x3c>
 80077c4:	f413 6280 	ands.w	r2, r3, #1024	; 0x400
 80077c8:	d114      	bne.n	80077f4 <acc_sensor_protocol_r2_wait_for_radar_data+0x54>
 80077ca:	b106      	cbz	r6, 80077ce <acc_sensor_protocol_r2_wait_for_radar_data+0x2e>
 80077cc:	7032      	strb	r2, [r6, #0]
 80077ce:	05da      	lsls	r2, r3, #23
 80077d0:	d425      	bmi.n	800781e <acc_sensor_protocol_r2_wait_for_radar_data+0x7e>
 80077d2:	059b      	lsls	r3, r3, #22
 80077d4:	d418      	bmi.n	8007808 <acc_sensor_protocol_r2_wait_for_radar_data+0x68>
 80077d6:	4620      	mov	r0, r4
 80077d8:	b004      	add	sp, #16
 80077da:	bd70      	pop	{r4, r5, r6, pc}
 80077dc:	4a16      	ldr	r2, [pc, #88]	; (8007838 <acc_sensor_protocol_r2_wait_for_radar_data+0x98>)
 80077de:	9300      	str	r3, [sp, #0]
 80077e0:	6b54      	ldr	r4, [r2, #52]	; 0x34
 80077e2:	4916      	ldr	r1, [pc, #88]	; (800783c <acc_sensor_protocol_r2_wait_for_radar_data+0x9c>)
 80077e4:	4a16      	ldr	r2, [pc, #88]	; (8007840 <acc_sensor_protocol_r2_wait_for_radar_data+0xa0>)
 80077e6:	462b      	mov	r3, r5
 80077e8:	2000      	movs	r0, #0
 80077ea:	47a0      	blx	r4
 80077ec:	2400      	movs	r4, #0
 80077ee:	4620      	mov	r0, r4
 80077f0:	b004      	add	sp, #16
 80077f2:	bd70      	pop	{r4, r5, r6, pc}
 80077f4:	4629      	mov	r1, r5
 80077f6:	200f      	movs	r0, #15
 80077f8:	f000 fad4 	bl	8007da4 <acc_probes_execute_primitive_probe>
 80077fc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8007800:	4622      	mov	r2, r4
 8007802:	2e00      	cmp	r6, #0
 8007804:	d1e2      	bne.n	80077cc <acc_sensor_protocol_r2_wait_for_radar_data+0x2c>
 8007806:	e7e2      	b.n	80077ce <acc_sensor_protocol_r2_wait_for_radar_data+0x2e>
 8007808:	f7fd ff92 	bl	8005730 <acc_rss_integration_log_level>
 800780c:	2803      	cmp	r0, #3
 800780e:	d9e2      	bls.n	80077d6 <acc_sensor_protocol_r2_wait_for_radar_data+0x36>
 8007810:	4b09      	ldr	r3, [pc, #36]	; (8007838 <acc_sensor_protocol_r2_wait_for_radar_data+0x98>)
 8007812:	4a0c      	ldr	r2, [pc, #48]	; (8007844 <acc_sensor_protocol_r2_wait_for_radar_data+0xa4>)
 8007814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007816:	4909      	ldr	r1, [pc, #36]	; (800783c <acc_sensor_protocol_r2_wait_for_radar_data+0x9c>)
 8007818:	2004      	movs	r0, #4
 800781a:	4798      	blx	r3
 800781c:	e7db      	b.n	80077d6 <acc_sensor_protocol_r2_wait_for_radar_data+0x36>
 800781e:	f7fd ff87 	bl	8005730 <acc_rss_integration_log_level>
 8007822:	2803      	cmp	r0, #3
 8007824:	d905      	bls.n	8007832 <acc_sensor_protocol_r2_wait_for_radar_data+0x92>
 8007826:	4b04      	ldr	r3, [pc, #16]	; (8007838 <acc_sensor_protocol_r2_wait_for_radar_data+0x98>)
 8007828:	4a07      	ldr	r2, [pc, #28]	; (8007848 <acc_sensor_protocol_r2_wait_for_radar_data+0xa8>)
 800782a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800782c:	4903      	ldr	r1, [pc, #12]	; (800783c <acc_sensor_protocol_r2_wait_for_radar_data+0x9c>)
 800782e:	2004      	movs	r0, #4
 8007830:	4798      	blx	r3
 8007832:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8007836:	e7cc      	b.n	80077d2 <acc_sensor_protocol_r2_wait_for_radar_data+0x32>
 8007838:	200004c0 	.word	0x200004c0
 800783c:	0800ed34 	.word	0x0800ed34
 8007840:	0800efe4 	.word	0x0800efe4
 8007844:	0800f030 	.word	0x0800f030
 8007848:	0800f014 	.word	0x0800f014

0800784c <acc_sensor_protocol_r2_wait_for_sync_start>:
 800784c:	b570      	push	{r4, r5, r6, lr}
 800784e:	b084      	sub	sp, #16
 8007850:	ab03      	add	r3, sp, #12
 8007852:	2264      	movs	r2, #100	; 0x64
 8007854:	4605      	mov	r5, r0
 8007856:	f7ff fed9 	bl	800760c <acc_sensor_protocol_r2_wait_for_event>
 800785a:	4604      	mov	r4, r0
 800785c:	b178      	cbz	r0, 800787e <acc_sensor_protocol_r2_wait_for_sync_start+0x32>
 800785e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8007862:	2b06      	cmp	r3, #6
 8007864:	d008      	beq.n	8007878 <acc_sensor_protocol_r2_wait_for_sync_start+0x2c>
 8007866:	4a0a      	ldr	r2, [pc, #40]	; (8007890 <acc_sensor_protocol_r2_wait_for_sync_start+0x44>)
 8007868:	9300      	str	r3, [sp, #0]
 800786a:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800786c:	4909      	ldr	r1, [pc, #36]	; (8007894 <acc_sensor_protocol_r2_wait_for_sync_start+0x48>)
 800786e:	4a0a      	ldr	r2, [pc, #40]	; (8007898 <acc_sensor_protocol_r2_wait_for_sync_start+0x4c>)
 8007870:	462b      	mov	r3, r5
 8007872:	2000      	movs	r0, #0
 8007874:	47a0      	blx	r4
 8007876:	2400      	movs	r4, #0
 8007878:	4620      	mov	r0, r4
 800787a:	b004      	add	sp, #16
 800787c:	bd70      	pop	{r4, r5, r6, pc}
 800787e:	4b04      	ldr	r3, [pc, #16]	; (8007890 <acc_sensor_protocol_r2_wait_for_sync_start+0x44>)
 8007880:	4a06      	ldr	r2, [pc, #24]	; (800789c <acc_sensor_protocol_r2_wait_for_sync_start+0x50>)
 8007882:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8007884:	4903      	ldr	r1, [pc, #12]	; (8007894 <acc_sensor_protocol_r2_wait_for_sync_start+0x48>)
 8007886:	462b      	mov	r3, r5
 8007888:	47b0      	blx	r6
 800788a:	4620      	mov	r0, r4
 800788c:	b004      	add	sp, #16
 800788e:	bd70      	pop	{r4, r5, r6, pc}
 8007890:	200004c0 	.word	0x200004c0
 8007894:	0800ed34 	.word	0x0800ed34
 8007898:	0800f07c 	.word	0x0800f07c
 800789c:	0800f048 	.word	0x0800f048

080078a0 <acc_sensor_protocol_r2_transfer_data>:
 80078a0:	b530      	push	{r4, r5, lr}
 80078a2:	b083      	sub	sp, #12
 80078a4:	4613      	mov	r3, r2
 80078a6:	9201      	str	r2, [sp, #4]
 80078a8:	2200      	movs	r2, #0
 80078aa:	4605      	mov	r5, r0
 80078ac:	f7ff fa80 	bl	8006db0 <acc_sensor_r2_buffer_processed_read>
 80078b0:	9b01      	ldr	r3, [sp, #4]
 80078b2:	4604      	mov	r4, r0
 80078b4:	4602      	mov	r2, r0
 80078b6:	4629      	mov	r1, r5
 80078b8:	2000      	movs	r0, #0
 80078ba:	f000 fa45 	bl	8007d48 <acc_probes_execute_uint16>
 80078be:	4620      	mov	r0, r4
 80078c0:	b003      	add	sp, #12
 80078c2:	bd30      	pop	{r4, r5, pc}

080078c4 <acc_sensor_protocol_r2_check_asic_id>:
 80078c4:	b530      	push	{r4, r5, lr}
 80078c6:	2400      	movs	r4, #0
 80078c8:	b085      	sub	sp, #20
 80078ca:	f10d 020e 	add.w	r2, sp, #14
 80078ce:	460d      	mov	r5, r1
 80078d0:	4621      	mov	r1, r4
 80078d2:	f8ad 400e 	strh.w	r4, [sp, #14]
 80078d6:	f000 fa7d 	bl	8007dd4 <acc_sensor_reg_read>
 80078da:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 80078de:	f241 1312 	movw	r3, #4370	; 0x1112
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d00a      	beq.n	80078fc <acc_sensor_protocol_r2_check_asic_id+0x38>
 80078e6:	b965      	cbnz	r5, 8007902 <acc_sensor_protocol_r2_check_asic_id+0x3e>
 80078e8:	4907      	ldr	r1, [pc, #28]	; (8007908 <acc_sensor_protocol_r2_check_asic_id+0x44>)
 80078ea:	9200      	str	r2, [sp, #0]
 80078ec:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 80078ee:	4a07      	ldr	r2, [pc, #28]	; (800790c <acc_sensor_protocol_r2_check_asic_id+0x48>)
 80078f0:	4907      	ldr	r1, [pc, #28]	; (8007910 <acc_sensor_protocol_r2_check_asic_id+0x4c>)
 80078f2:	4628      	mov	r0, r5
 80078f4:	47a0      	blx	r4
 80078f6:	4628      	mov	r0, r5
 80078f8:	b005      	add	sp, #20
 80078fa:	bd30      	pop	{r4, r5, pc}
 80078fc:	2001      	movs	r0, #1
 80078fe:	b005      	add	sp, #20
 8007900:	bd30      	pop	{r4, r5, pc}
 8007902:	4620      	mov	r0, r4
 8007904:	b005      	add	sp, #20
 8007906:	bd30      	pop	{r4, r5, pc}
 8007908:	200004c0 	.word	0x200004c0
 800790c:	0800f0b8 	.word	0x0800f0b8
 8007910:	0800ed34 	.word	0x0800ed34

08007914 <acc_sweep_manager_prepare>:
 8007914:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007918:	4680      	mov	r8, r0
 800791a:	b095      	sub	sp, #84	; 0x54
 800791c:	4608      	mov	r0, r1
 800791e:	460c      	mov	r4, r1
 8007920:	4617      	mov	r7, r2
 8007922:	4699      	mov	r9, r3
 8007924:	f7fd fa98 	bl	8004e58 <acc_base_configuration_sensor_get>
 8007928:	4601      	mov	r1, r0
 800792a:	4620      	mov	r0, r4
 800792c:	9101      	str	r1, [sp, #4]
 800792e:	f7fd fbf1 	bl	8005114 <acc_base_configuration_wg_duration_get>
 8007932:	4603      	mov	r3, r0
 8007934:	4620      	mov	r0, r4
 8007936:	f8ad 300c 	strh.w	r3, [sp, #12]
 800793a:	f7fd fbd7 	bl	80050ec <acc_base_configuration_integrator_get>
 800793e:	4603      	mov	r3, r0
 8007940:	4620      	mov	r0, r4
 8007942:	f8ad 300e 	strh.w	r3, [sp, #14]
 8007946:	f7fd fbf9 	bl	800513c <acc_base_configuration_integrator_ramp_up_get>
 800794a:	4603      	mov	r3, r0
 800794c:	4620      	mov	r0, r4
 800794e:	f8ad 3010 	strh.w	r3, [sp, #16]
 8007952:	f7fd faf5 	bl	8004f40 <acc_base_configuration_decrease_tx_emission_get>
 8007956:	4605      	mov	r5, r0
 8007958:	2304      	movs	r3, #4
 800795a:	9901      	ldr	r1, [sp, #4]
 800795c:	f8ad 5012 	strh.w	r5, [sp, #18]
 8007960:	aa03      	add	r2, sp, #12
 8007962:	f108 0514 	add.w	r5, r8, #20
 8007966:	2012      	movs	r0, #18
 8007968:	f000 f9ee 	bl	8007d48 <acc_probes_execute_uint16>
 800796c:	2220      	movs	r2, #32
 800796e:	2100      	movs	r1, #0
 8007970:	4628      	mov	r0, r5
 8007972:	f005 facb 	bl	800cf0c <memset>
 8007976:	6823      	ldr	r3, [r4, #0]
 8007978:	4628      	mov	r0, r5
 800797a:	4621      	mov	r1, r4
 800797c:	4798      	blx	r3
 800797e:	4606      	mov	r6, r0
 8007980:	2800      	cmp	r0, #0
 8007982:	d04e      	beq.n	8007a22 <acc_sweep_manager_prepare+0x10e>
 8007984:	2220      	movs	r2, #32
 8007986:	2100      	movs	r1, #0
 8007988:	a80c      	add	r0, sp, #48	; 0x30
 800798a:	f005 fabf 	bl	800cf0c <memset>
 800798e:	f8d8 002c 	ldr.w	r0, [r8, #44]	; 0x2c
 8007992:	2100      	movs	r1, #0
 8007994:	6806      	ldr	r6, [r0, #0]
 8007996:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 800799a:	e9cd 1105 	strd	r1, r1, [sp, #20]
 800799e:	e9cd 1107 	strd	r1, r1, [sp, #28]
 80079a2:	e9cd 1109 	strd	r1, r1, [sp, #36]	; 0x24
 80079a6:	aa0c      	add	r2, sp, #48	; 0x30
 80079a8:	ab05      	add	r3, sp, #20
 80079aa:	4621      	mov	r1, r4
 80079ac:	4628      	mov	r0, r5
 80079ae:	47b0      	blx	r6
 80079b0:	4606      	mov	r6, r0
 80079b2:	2800      	cmp	r0, #0
 80079b4:	d039      	beq.n	8007a2a <acc_sweep_manager_prepare+0x116>
 80079b6:	b137      	cbz	r7, 80079c6 <acc_sweep_manager_prepare+0xb2>
 80079b8:	ad0c      	add	r5, sp, #48	; 0x30
 80079ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80079bc:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80079be:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80079c2:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 80079c6:	f1b9 0f00 	cmp.w	r9, #0
 80079ca:	d011      	beq.n	80079f0 <acc_sweep_manager_prepare+0xdc>
 80079cc:	ad05      	add	r5, sp, #20
 80079ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80079d0:	f8c9 0000 	str.w	r0, [r9]
 80079d4:	f8c9 1004 	str.w	r1, [r9, #4]
 80079d8:	cd03      	ldmia	r5!, {r0, r1}
 80079da:	882d      	ldrh	r5, [r5, #0]
 80079dc:	f8c9 2008 	str.w	r2, [r9, #8]
 80079e0:	f8c9 300c 	str.w	r3, [r9, #12]
 80079e4:	f8a9 5018 	strh.w	r5, [r9, #24]
 80079e8:	f8c9 0010 	str.w	r0, [r9, #16]
 80079ec:	f8c9 1014 	str.w	r1, [r9, #20]
 80079f0:	4620      	mov	r0, r4
 80079f2:	f7fd fb4b 	bl	800508c <acc_base_configuration_repetition_mode_get>
 80079f6:	2801      	cmp	r0, #1
 80079f8:	d020      	beq.n	8007a3c <acc_sweep_manager_prepare+0x128>
 80079fa:	4620      	mov	r0, r4
 80079fc:	f7fd fb4e 	bl	800509c <acc_base_configuration_update_rate_get>
 8007a00:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8007a44 <acc_sweep_manager_prepare+0x130>
 8007a04:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007a08:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007a0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a10:	ee17 3a90 	vmov	r3, s15
 8007a14:	2200      	movs	r2, #0
 8007a16:	f8c8 3000 	str.w	r3, [r8]
 8007a1a:	f8c8 2008 	str.w	r2, [r8, #8]
 8007a1e:	f8a8 2006 	strh.w	r2, [r8, #6]
 8007a22:	4630      	mov	r0, r6
 8007a24:	b015      	add	sp, #84	; 0x54
 8007a26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a2a:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 8007a2e:	4628      	mov	r0, r5
 8007a30:	6a1b      	ldr	r3, [r3, #32]
 8007a32:	4798      	blx	r3
 8007a34:	4630      	mov	r0, r6
 8007a36:	b015      	add	sp, #84	; 0x54
 8007a38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a3c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8007a40:	e7e8      	b.n	8007a14 <acc_sweep_manager_prepare+0x100>
 8007a42:	bf00      	nop
 8007a44:	44fa0000 	.word	0x44fa0000

08007a48 <acc_sweep_manager_release>:
 8007a48:	b120      	cbz	r0, 8007a54 <acc_sweep_manager_release+0xc>
 8007a4a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8007a4c:	b113      	cbz	r3, 8007a54 <acc_sweep_manager_release+0xc>
 8007a4e:	6a1b      	ldr	r3, [r3, #32]
 8007a50:	3014      	adds	r0, #20
 8007a52:	4718      	bx	r3
 8007a54:	4770      	bx	lr
 8007a56:	bf00      	nop

08007a58 <acc_sweep_manager_is_sensor_connected>:
 8007a58:	3014      	adds	r0, #20
 8007a5a:	f003 bc69 	b.w	800b330 <acc_radar_engine_check_asic_id>
 8007a5e:	bf00      	nop

08007a60 <acc_sweep_manager_calibrate>:
 8007a60:	b410      	push	{r4}
 8007a62:	4604      	mov	r4, r0
 8007a64:	3014      	adds	r0, #20
 8007a66:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 8007a68:	68a4      	ldr	r4, [r4, #8]
 8007a6a:	46a4      	mov	ip, r4
 8007a6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a70:	4760      	bx	ip
 8007a72:	bf00      	nop

08007a74 <acc_sweep_manager_measure_noise>:
 8007a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a78:	4604      	mov	r4, r0
 8007a7a:	e9d0 050a 	ldrd	r0, r5, [r0, #40]	; 0x28
 8007a7e:	686f      	ldr	r7, [r5, #4]
 8007a80:	461e      	mov	r6, r3
 8007a82:	4615      	mov	r5, r2
 8007a84:	47b8      	blx	r7
 8007a86:	b140      	cbz	r0, 8007a9a <acc_sweep_manager_measure_noise+0x26>
 8007a88:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007a8a:	4632      	mov	r2, r6
 8007a8c:	4629      	mov	r1, r5
 8007a8e:	f104 0014 	add.w	r0, r4, #20
 8007a92:	68db      	ldr	r3, [r3, #12]
 8007a94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a98:	4718      	bx	r3
 8007a9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a9e:	bf00      	nop

08007aa0 <acc_sweep_manager_start>:
 8007aa0:	b570      	push	{r4, r5, r6, lr}
 8007aa2:	4604      	mov	r4, r0
 8007aa4:	e9d0 030a 	ldrd	r0, r3, [r0, #40]	; 0x28
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	4615      	mov	r5, r2
 8007aac:	4798      	blx	r3
 8007aae:	b138      	cbz	r0, 8007ac0 <acc_sweep_manager_start+0x20>
 8007ab0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007ab2:	4629      	mov	r1, r5
 8007ab4:	f104 0014 	add.w	r0, r4, #20
 8007ab8:	691b      	ldr	r3, [r3, #16]
 8007aba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007abe:	4718      	bx	r3
 8007ac0:	bd70      	pop	{r4, r5, r6, pc}
 8007ac2:	bf00      	nop

08007ac4 <acc_sweep_manager_wait_for_data>:
 8007ac4:	f850 1b14 	ldr.w	r1, [r0], #20
 8007ac8:	2200      	movs	r2, #0
 8007aca:	f003 bc35 	b.w	800b338 <acc_radar_engine_wait_for_radar_data>
 8007ace:	bf00      	nop

08007ad0 <acc_sweep_manager_wait_for_hibernate_ready>:
 8007ad0:	f850 1b14 	ldr.w	r1, [r0], #20
 8007ad4:	f003 bc38 	b.w	800b348 <acc_radar_engine_wait_for_hibernate_ready>

08007ad8 <acc_sweep_manager_measure>:
 8007ad8:	3014      	adds	r0, #20
 8007ada:	f003 bc31 	b.w	800b340 <acc_radar_engine_measure>
 8007ade:	bf00      	nop

08007ae0 <acc_sweep_manager_acquire_adc_data>:
 8007ae0:	b570      	push	{r4, r5, r6, lr}
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	b084      	sub	sp, #16
 8007ae6:	4604      	mov	r4, r0
 8007ae8:	6043      	str	r3, [r0, #4]
 8007aea:	6083      	str	r3, [r0, #8]
 8007aec:	60c3      	str	r3, [r0, #12]
 8007aee:	6103      	str	r3, [r0, #16]
 8007af0:	466a      	mov	r2, sp
 8007af2:	3014      	adds	r0, #20
 8007af4:	f003 fc2c 	bl	800b350 <acc_radar_engine_acquire_adc_data>
 8007af8:	9b02      	ldr	r3, [sp, #8]
 8007afa:	f8bd 6000 	ldrh.w	r6, [sp]
 8007afe:	f8bd 5002 	ldrh.w	r5, [sp, #2]
 8007b02:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8007b06:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8007b0a:	60a0      	str	r0, [r4, #8]
 8007b0c:	1d20      	adds	r0, r4, #4
 8007b0e:	80e6      	strh	r6, [r4, #6]
 8007b10:	80a5      	strh	r5, [r4, #4]
 8007b12:	7321      	strb	r1, [r4, #12]
 8007b14:	7362      	strb	r2, [r4, #13]
 8007b16:	6123      	str	r3, [r4, #16]
 8007b18:	b004      	add	sp, #16
 8007b1a:	bd70      	pop	{r4, r5, r6, pc}

08007b1c <acc_alg_cca_u16_calculate>:
 8007b1c:	2901      	cmp	r1, #1
 8007b1e:	b538      	push	{r3, r4, r5, lr}
 8007b20:	d925      	bls.n	8007b6e <acc_alg_cca_u16_calculate+0x52>
 8007b22:	1e8d      	subs	r5, r1, #2
 8007b24:	1c83      	adds	r3, r0, #2
 8007b26:	b2ad      	uxth	r5, r5
 8007b28:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8007b2c:	2400      	movs	r4, #0
 8007b2e:	4602      	mov	r2, r0
 8007b30:	3002      	adds	r0, #2
 8007b32:	8853      	ldrh	r3, [r2, #2]
 8007b34:	8812      	ldrh	r2, [r2, #0]
 8007b36:	1a9b      	subs	r3, r3, r2
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	bfb8      	it	lt
 8007b3c:	425b      	neglt	r3, r3
 8007b3e:	4285      	cmp	r5, r0
 8007b40:	441c      	add	r4, r3
 8007b42:	d1f4      	bne.n	8007b2e <acc_alg_cca_u16_calculate+0x12>
 8007b44:	ee07 4a90 	vmov	s15, r4
 8007b48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007b4c:	ee07 1a10 	vmov	s14, r1
 8007b50:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 8007b54:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007b58:	ee30 0a47 	vsub.f32	s0, s0, s14
 8007b5c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8007b60:	f006 f8d0 	bl	800dd04 <log10f>
 8007b64:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8007b68:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007b6c:	bd38      	pop	{r3, r4, r5, pc}
 8007b6e:	eddf 7a01 	vldr	s15, [pc, #4]	; 8007b74 <acc_alg_cca_u16_calculate+0x58>
 8007b72:	e7eb      	b.n	8007b4c <acc_alg_cca_u16_calculate+0x30>
 8007b74:	00000000 	.word	0x00000000

08007b78 <acc_assert_fail>:
 8007b78:	b500      	push	{lr}
 8007b7a:	4b07      	ldr	r3, [pc, #28]	; (8007b98 <acc_assert_fail+0x20>)
 8007b7c:	4a07      	ldr	r2, [pc, #28]	; (8007b9c <acc_assert_fail+0x24>)
 8007b7e:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8007b80:	b083      	sub	sp, #12
 8007b82:	4603      	mov	r3, r0
 8007b84:	9100      	str	r1, [sp, #0]
 8007b86:	2000      	movs	r0, #0
 8007b88:	4905      	ldr	r1, [pc, #20]	; (8007ba0 <acc_assert_fail+0x28>)
 8007b8a:	47a0      	blx	r4
 8007b8c:	4b05      	ldr	r3, [pc, #20]	; (8007ba4 <acc_assert_fail+0x2c>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	b103      	cbz	r3, 8007b94 <acc_assert_fail+0x1c>
 8007b92:	4798      	blx	r3
 8007b94:	e7fe      	b.n	8007b94 <acc_assert_fail+0x1c>
 8007b96:	bf00      	nop
 8007b98:	200004c0 	.word	0x200004c0
 8007b9c:	0800f248 	.word	0x0800f248
 8007ba0:	0800f260 	.word	0x0800f260
 8007ba4:	2000036c 	.word	0x2000036c

08007ba8 <acc_element_sizeof>:
 8007ba8:	3801      	subs	r0, #1
 8007baa:	b2c0      	uxtb	r0, r0
 8007bac:	2807      	cmp	r0, #7
 8007bae:	bf9a      	itte	ls
 8007bb0:	4b02      	ldrls	r3, [pc, #8]	; (8007bbc <acc_element_sizeof+0x14>)
 8007bb2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8007bb6:	2000      	movhi	r0, #0
 8007bb8:	4770      	bx	lr
 8007bba:	bf00      	nop
 8007bbc:	0800f268 	.word	0x0800f268

08007bc0 <acc_element_connect>:
 8007bc0:	6001      	str	r1, [r0, #0]
 8007bc2:	4770      	bx	lr

08007bc4 <event>:
 8007bc4:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8007bc6:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8007bc8:	ed90 0a0e 	vldr	s0, [r0, #56]	; 0x38
 8007bcc:	6811      	ldr	r1, [r2, #0]
 8007bce:	b570      	push	{r4, r5, r6, lr}
 8007bd0:	4604      	mov	r4, r0
 8007bd2:	e9d0 0504 	ldrd	r0, r5, [r0, #16]
 8007bd6:	4798      	blx	r3
 8007bd8:	6823      	ldr	r3, [r4, #0]
 8007bda:	7028      	strb	r0, [r5, #0]
 8007bdc:	685a      	ldr	r2, [r3, #4]
 8007bde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007be2:	4618      	mov	r0, r3
 8007be4:	4710      	bx	r2
 8007be6:	bf00      	nop

08007be8 <reset>:
 8007be8:	6800      	ldr	r0, [r0, #0]
 8007bea:	68c3      	ldr	r3, [r0, #12]
 8007bec:	4718      	bx	r3
 8007bee:	bf00      	nop

08007bf0 <validate>:
 8007bf0:	6983      	ldr	r3, [r0, #24]
 8007bf2:	b510      	push	{r4, lr}
 8007bf4:	4604      	mov	r4, r0
 8007bf6:	b113      	cbz	r3, 8007bfe <validate+0xe>
 8007bf8:	f7fd fd9a 	bl	8005730 <acc_rss_integration_log_level>
 8007bfc:	b978      	cbnz	r0, 8007c1e <validate+0x2e>
 8007bfe:	69e3      	ldr	r3, [r4, #28]
 8007c00:	b143      	cbz	r3, 8007c14 <validate+0x24>
 8007c02:	f7fd fd95 	bl	8005730 <acc_rss_integration_log_level>
 8007c06:	b128      	cbz	r0, 8007c14 <validate+0x24>
 8007c08:	4b08      	ldr	r3, [pc, #32]	; (8007c2c <validate+0x3c>)
 8007c0a:	4a09      	ldr	r2, [pc, #36]	; (8007c30 <validate+0x40>)
 8007c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c0e:	4909      	ldr	r1, [pc, #36]	; (8007c34 <validate+0x44>)
 8007c10:	2001      	movs	r0, #1
 8007c12:	4798      	blx	r3
 8007c14:	6820      	ldr	r0, [r4, #0]
 8007c16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c1a:	6883      	ldr	r3, [r0, #8]
 8007c1c:	4718      	bx	r3
 8007c1e:	4b03      	ldr	r3, [pc, #12]	; (8007c2c <validate+0x3c>)
 8007c20:	4a05      	ldr	r2, [pc, #20]	; (8007c38 <validate+0x48>)
 8007c22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c24:	4903      	ldr	r1, [pc, #12]	; (8007c34 <validate+0x44>)
 8007c26:	2001      	movs	r0, #1
 8007c28:	4798      	blx	r3
 8007c2a:	e7e8      	b.n	8007bfe <validate+0xe>
 8007c2c:	200004c0 	.word	0x200004c0
 8007c30:	0800f2b8 	.word	0x0800f2b8
 8007c34:	0800f29c 	.word	0x0800f29c
 8007c38:	0800f288 	.word	0x0800f288

08007c3c <saturation_check_i16>:
 8007c3c:	f003 be8e 	b.w	800b95c <acc_alg_basic_saturation_check_i16>

08007c40 <saturation_check_u16>:
 8007c40:	f003 be58 	b.w	800b8f4 <acc_alg_basic_saturation_check_u16>

08007c44 <acc_element_saturation_check_init>:
 8007c44:	2903      	cmp	r1, #3
 8007c46:	ed80 0a0e 	vstr	s0, [r0, #56]	; 0x38
 8007c4a:	d00e      	beq.n	8007c6a <acc_element_saturation_check_init+0x26>
 8007c4c:	2905      	cmp	r1, #5
 8007c4e:	d016      	beq.n	8007c7e <acc_element_saturation_check_init+0x3a>
 8007c50:	2902      	cmp	r1, #2
 8007c52:	d014      	beq.n	8007c7e <acc_element_saturation_check_init+0x3a>
 8007c54:	b510      	push	{r4, lr}
 8007c56:	4b0b      	ldr	r3, [pc, #44]	; (8007c84 <acc_element_saturation_check_init+0x40>)
 8007c58:	4a0b      	ldr	r2, [pc, #44]	; (8007c88 <acc_element_saturation_check_init+0x44>)
 8007c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c5c:	490b      	ldr	r1, [pc, #44]	; (8007c8c <acc_element_saturation_check_init+0x48>)
 8007c5e:	2400      	movs	r4, #0
 8007c60:	63c4      	str	r4, [r0, #60]	; 0x3c
 8007c62:	4620      	mov	r0, r4
 8007c64:	4798      	blx	r3
 8007c66:	4620      	mov	r0, r4
 8007c68:	bd10      	pop	{r4, pc}
 8007c6a:	4b09      	ldr	r3, [pc, #36]	; (8007c90 <acc_element_saturation_check_init+0x4c>)
 8007c6c:	63c3      	str	r3, [r0, #60]	; 0x3c
 8007c6e:	4909      	ldr	r1, [pc, #36]	; (8007c94 <acc_element_saturation_check_init+0x50>)
 8007c70:	4a09      	ldr	r2, [pc, #36]	; (8007c98 <acc_element_saturation_check_init+0x54>)
 8007c72:	4b0a      	ldr	r3, [pc, #40]	; (8007c9c <acc_element_saturation_check_init+0x58>)
 8007c74:	60c3      	str	r3, [r0, #12]
 8007c76:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8007c7a:	2001      	movs	r0, #1
 8007c7c:	4770      	bx	lr
 8007c7e:	4b08      	ldr	r3, [pc, #32]	; (8007ca0 <acc_element_saturation_check_init+0x5c>)
 8007c80:	63c3      	str	r3, [r0, #60]	; 0x3c
 8007c82:	e7f4      	b.n	8007c6e <acc_element_saturation_check_init+0x2a>
 8007c84:	200004c0 	.word	0x200004c0
 8007c88:	0800f2c8 	.word	0x0800f2c8
 8007c8c:	0800f29c 	.word	0x0800f29c
 8007c90:	08007c3d 	.word	0x08007c3d
 8007c94:	08007bc5 	.word	0x08007bc5
 8007c98:	08007bf1 	.word	0x08007bf1
 8007c9c:	08007be9 	.word	0x08007be9
 8007ca0:	08007c41 	.word	0x08007c41

08007ca4 <consume>:
 8007ca4:	b510      	push	{r4, lr}
 8007ca6:	4604      	mov	r4, r0
 8007ca8:	e9d0 230f 	ldrd	r2, r3, [r0, #60]	; 0x3c
 8007cac:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8007cae:	6900      	ldr	r0, [r0, #16]
 8007cb0:	4798      	blx	r3
 8007cb2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	611a      	str	r2, [r3, #16]
 8007cb8:	bd10      	pop	{r4, pc}
 8007cba:	bf00      	nop

08007cbc <reset>:
 8007cbc:	4770      	bx	lr
 8007cbe:	bf00      	nop

08007cc0 <validate>:
 8007cc0:	6983      	ldr	r3, [r0, #24]
 8007cc2:	b510      	push	{r4, lr}
 8007cc4:	4604      	mov	r4, r0
 8007cc6:	b113      	cbz	r3, 8007cce <validate+0xe>
 8007cc8:	f7fd fd32 	bl	8005730 <acc_rss_integration_log_level>
 8007ccc:	b9c8      	cbnz	r0, 8007d02 <validate+0x42>
 8007cce:	69e3      	ldr	r3, [r4, #28]
 8007cd0:	b113      	cbz	r3, 8007cd8 <validate+0x18>
 8007cd2:	f7fd fd2d 	bl	8005730 <acc_rss_integration_log_level>
 8007cd6:	b948      	cbnz	r0, 8007cec <validate+0x2c>
 8007cd8:	6963      	ldr	r3, [r4, #20]
 8007cda:	b183      	cbz	r3, 8007cfe <validate+0x3e>
 8007cdc:	4b0c      	ldr	r3, [pc, #48]	; (8007d10 <validate+0x50>)
 8007cde:	4a0d      	ldr	r2, [pc, #52]	; (8007d14 <validate+0x54>)
 8007ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ce2:	490d      	ldr	r1, [pc, #52]	; (8007d18 <validate+0x58>)
 8007ce4:	2000      	movs	r0, #0
 8007ce6:	4798      	blx	r3
 8007ce8:	2000      	movs	r0, #0
 8007cea:	bd10      	pop	{r4, pc}
 8007cec:	4b08      	ldr	r3, [pc, #32]	; (8007d10 <validate+0x50>)
 8007cee:	4a0b      	ldr	r2, [pc, #44]	; (8007d1c <validate+0x5c>)
 8007cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cf2:	4909      	ldr	r1, [pc, #36]	; (8007d18 <validate+0x58>)
 8007cf4:	2001      	movs	r0, #1
 8007cf6:	4798      	blx	r3
 8007cf8:	6963      	ldr	r3, [r4, #20]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d1ee      	bne.n	8007cdc <validate+0x1c>
 8007cfe:	2001      	movs	r0, #1
 8007d00:	bd10      	pop	{r4, pc}
 8007d02:	4b03      	ldr	r3, [pc, #12]	; (8007d10 <validate+0x50>)
 8007d04:	4a06      	ldr	r2, [pc, #24]	; (8007d20 <validate+0x60>)
 8007d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d08:	4903      	ldr	r1, [pc, #12]	; (8007d18 <validate+0x58>)
 8007d0a:	2001      	movs	r0, #1
 8007d0c:	4798      	blx	r3
 8007d0e:	e7de      	b.n	8007cce <validate+0xe>
 8007d10:	200004c0 	.word	0x200004c0
 8007d14:	0800f2f4 	.word	0x0800f2f4
 8007d18:	0800f2dc 	.word	0x0800f2dc
 8007d1c:	0800f2b8 	.word	0x0800f2b8
 8007d20:	0800f288 	.word	0x0800f288

08007d24 <acc_element_sink_callback_init>:
 8007d24:	b410      	push	{r4}
 8007d26:	4a05      	ldr	r2, [pc, #20]	; (8007d3c <acc_element_sink_callback_init+0x18>)
 8007d28:	4c05      	ldr	r4, [pc, #20]	; (8007d40 <acc_element_sink_callback_init+0x1c>)
 8007d2a:	4b06      	ldr	r3, [pc, #24]	; (8007d44 <acc_element_sink_callback_init+0x20>)
 8007d2c:	6401      	str	r1, [r0, #64]	; 0x40
 8007d2e:	e9c0 4201 	strd	r4, r2, [r0, #4]
 8007d32:	60c3      	str	r3, [r0, #12]
 8007d34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d38:	4770      	bx	lr
 8007d3a:	bf00      	nop
 8007d3c:	08007cc1 	.word	0x08007cc1
 8007d40:	08007ca5 	.word	0x08007ca5
 8007d44:	08007cbd 	.word	0x08007cbd

08007d48 <acc_probes_execute_uint16>:
 8007d48:	b530      	push	{r4, r5, lr}
 8007d4a:	4c09      	ldr	r4, [pc, #36]	; (8007d70 <acc_probes_execute_uint16+0x28>)
 8007d4c:	eb04 1400 	add.w	r4, r4, r0, lsl #4
 8007d50:	b085      	sub	sp, #20
 8007d52:	6865      	ldr	r5, [r4, #4]
 8007d54:	f88d 0004 	strb.w	r0, [sp, #4]
 8007d58:	2001      	movs	r0, #1
 8007d5a:	e9cd 1002 	strd	r1, r0, [sp, #8]
 8007d5e:	b12d      	cbz	r5, 8007d6c <acc_probes_execute_uint16+0x24>
 8007d60:	4611      	mov	r1, r2
 8007d62:	461a      	mov	r2, r3
 8007d64:	4082      	lsls	r2, r0
 8007d66:	68e3      	ldr	r3, [r4, #12]
 8007d68:	a801      	add	r0, sp, #4
 8007d6a:	47a8      	blx	r5
 8007d6c:	b005      	add	sp, #20
 8007d6e:	bd30      	pop	{r4, r5, pc}
 8007d70:	2000000c 	.word	0x2000000c

08007d74 <acc_probes_execute_struct>:
 8007d74:	b530      	push	{r4, r5, lr}
 8007d76:	4c0a      	ldr	r4, [pc, #40]	; (8007da0 <acc_probes_execute_struct+0x2c>)
 8007d78:	eb04 1400 	add.w	r4, r4, r0, lsl #4
 8007d7c:	b085      	sub	sp, #20
 8007d7e:	6865      	ldr	r5, [r4, #4]
 8007d80:	f88d 0004 	strb.w	r0, [sp, #4]
 8007d84:	2007      	movs	r0, #7
 8007d86:	e9cd 1002 	strd	r1, r0, [sp, #8]
 8007d8a:	b135      	cbz	r5, 8007d9a <acc_probes_execute_struct+0x26>
 8007d8c:	4611      	mov	r1, r2
 8007d8e:	a801      	add	r0, sp, #4
 8007d90:	461a      	mov	r2, r3
 8007d92:	68e3      	ldr	r3, [r4, #12]
 8007d94:	47a8      	blx	r5
 8007d96:	b005      	add	sp, #20
 8007d98:	bd30      	pop	{r4, r5, pc}
 8007d9a:	2001      	movs	r0, #1
 8007d9c:	b005      	add	sp, #20
 8007d9e:	bd30      	pop	{r4, r5, pc}
 8007da0:	2000000c 	.word	0x2000000c

08007da4 <acc_probes_execute_primitive_probe>:
 8007da4:	b510      	push	{r4, lr}
 8007da6:	4b0a      	ldr	r3, [pc, #40]	; (8007dd0 <acc_probes_execute_primitive_probe+0x2c>)
 8007da8:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8007dac:	b084      	sub	sp, #16
 8007dae:	685c      	ldr	r4, [r3, #4]
 8007db0:	f88d 0004 	strb.w	r0, [sp, #4]
 8007db4:	2200      	movs	r2, #0
 8007db6:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8007dba:	b12c      	cbz	r4, 8007dc8 <acc_probes_execute_primitive_probe+0x24>
 8007dbc:	68db      	ldr	r3, [r3, #12]
 8007dbe:	4611      	mov	r1, r2
 8007dc0:	a801      	add	r0, sp, #4
 8007dc2:	47a0      	blx	r4
 8007dc4:	b004      	add	sp, #16
 8007dc6:	bd10      	pop	{r4, pc}
 8007dc8:	2001      	movs	r0, #1
 8007dca:	b004      	add	sp, #16
 8007dcc:	bd10      	pop	{r4, pc}
 8007dce:	bf00      	nop
 8007dd0:	2000000c 	.word	0x2000000c

08007dd4 <acc_sensor_reg_read>:
 8007dd4:	b530      	push	{r4, r5, lr}
 8007dd6:	b083      	sub	sp, #12
 8007dd8:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
 8007ddc:	4614      	mov	r4, r2
 8007dde:	2500      	movs	r5, #0
 8007de0:	f8ad 1000 	strh.w	r1, [sp]
 8007de4:	2301      	movs	r3, #1
 8007de6:	2203      	movs	r2, #3
 8007de8:	4669      	mov	r1, sp
 8007dea:	f8ad 5002 	strh.w	r5, [sp, #2]
 8007dee:	f8ad 5004 	strh.w	r5, [sp, #4]
 8007df2:	f7fd fc23 	bl	800563c <acc_rss_integration_sensor_device_transfer>
 8007df6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8007dfa:	8023      	strh	r3, [r4, #0]
 8007dfc:	b003      	add	sp, #12
 8007dfe:	bd30      	pop	{r4, r5, pc}

08007e00 <acc_sensor_reg_write>:
 8007e00:	b530      	push	{r4, r5, lr}
 8007e02:	b083      	sub	sp, #12
 8007e04:	f441 5480 	orr.w	r4, r1, #4096	; 0x1000
 8007e08:	4615      	mov	r5, r2
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	2202      	movs	r2, #2
 8007e0e:	a901      	add	r1, sp, #4
 8007e10:	f8ad 4004 	strh.w	r4, [sp, #4]
 8007e14:	f8ad 5006 	strh.w	r5, [sp, #6]
 8007e18:	f7fd fc10 	bl	800563c <acc_rss_integration_sensor_device_transfer>
 8007e1c:	b003      	add	sp, #12
 8007e1e:	bd30      	pop	{r4, r5, pc}

08007e20 <acc_sensor_reg_field_write>:
 8007e20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e24:	b082      	sub	sp, #8
 8007e26:	461d      	mov	r5, r3
 8007e28:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8007e2c:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
 8007e30:	f8ad 3000 	strh.w	r3, [sp]
 8007e34:	2700      	movs	r7, #0
 8007e36:	468a      	mov	sl, r1
 8007e38:	4691      	mov	r9, r2
 8007e3a:	4669      	mov	r1, sp
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	2203      	movs	r2, #3
 8007e40:	4680      	mov	r8, r0
 8007e42:	f8ad 7002 	strh.w	r7, [sp, #2]
 8007e46:	f8ad 7004 	strh.w	r7, [sp, #4]
 8007e4a:	f7fd fbf7 	bl	800563c <acc_rss_integration_sensor_device_transfer>
 8007e4e:	f9bd 6004 	ldrsh.w	r6, [sp, #4]
 8007e52:	fa04 f10a 	lsl.w	r1, r4, sl
 8007e56:	4071      	eors	r1, r6
 8007e58:	ea01 0409 	and.w	r4, r1, r9
 8007e5c:	f445 5580 	orr.w	r5, r5, #4096	; 0x1000
 8007e60:	4640      	mov	r0, r8
 8007e62:	463b      	mov	r3, r7
 8007e64:	4669      	mov	r1, sp
 8007e66:	4074      	eors	r4, r6
 8007e68:	2202      	movs	r2, #2
 8007e6a:	f8ad 5000 	strh.w	r5, [sp]
 8007e6e:	f8ad 4002 	strh.w	r4, [sp, #2]
 8007e72:	f7fd fbe3 	bl	800563c <acc_rss_integration_sensor_device_transfer>
 8007e76:	b002      	add	sp, #8
 8007e78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007e7c <acc_sensor_conf_read_instr>:
 8007e7c:	b530      	push	{r4, r5, lr}
 8007e7e:	b085      	sub	sp, #20
 8007e80:	2401      	movs	r4, #1
 8007e82:	f441 4120 	orr.w	r1, r1, #40960	; 0xa000
 8007e86:	4623      	mov	r3, r4
 8007e88:	2500      	movs	r5, #0
 8007e8a:	f8ad 1004 	strh.w	r1, [sp, #4]
 8007e8e:	2205      	movs	r2, #5
 8007e90:	a901      	add	r1, sp, #4
 8007e92:	f8ad 4006 	strh.w	r4, [sp, #6]
 8007e96:	f8ad 5008 	strh.w	r5, [sp, #8]
 8007e9a:	f8cd 500a 	str.w	r5, [sp, #10]
 8007e9e:	f7fd fbcd 	bl	800563c <acc_rss_integration_sensor_device_transfer>
 8007ea2:	f10d 000a 	add.w	r0, sp, #10
 8007ea6:	4622      	mov	r2, r4
 8007ea8:	4669      	mov	r1, sp
 8007eaa:	f000 f92f 	bl	800810c <acc_utils_transfer_buffer_to_uint32>
 8007eae:	9800      	ldr	r0, [sp, #0]
 8007eb0:	b005      	add	sp, #20
 8007eb2:	bd30      	pop	{r4, r5, pc}

08007eb4 <acc_cpd_pll_divisors_calculate>:
 8007eb4:	edd0 7a00 	vldr	s15, [r0]
 8007eb8:	ed9f 6a61 	vldr	s12, [pc, #388]	; 8008040 <acc_cpd_pll_divisors_calculate+0x18c>
 8007ebc:	eddf 6a61 	vldr	s13, [pc, #388]	; 8008044 <acc_cpd_pll_divisors_calculate+0x190>
 8007ec0:	ee86 7a27 	vdiv.f32	s14, s12, s15
 8007ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ec6:	4606      	mov	r6, r0
 8007ec8:	b083      	sub	sp, #12
 8007eca:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8007ece:	ee37 7a06 	vadd.f32	s14, s14, s12
 8007ed2:	eef4 7ae6 	vcmpe.f32	s15, s13
 8007ed6:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8007eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ede:	ee17 3a10 	vmov	r3, s14
 8007ee2:	b29c      	uxth	r4, r3
 8007ee4:	dc06      	bgt.n	8007ef4 <acc_cpd_pll_divisors_calculate+0x40>
 8007ee6:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8008048 <acc_cpd_pll_divisors_calculate+0x194>
 8007eea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ef2:	d571      	bpl.n	8007fd8 <acc_cpd_pll_divisors_calculate+0x124>
 8007ef4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007efc:	ed9f 7a53 	vldr	s14, [pc, #332]	; 800804c <acc_cpd_pll_divisors_calculate+0x198>
 8007f00:	bf4c      	ite	mi
 8007f02:	4b53      	ldrmi	r3, [pc, #332]	; (8008050 <acc_cpd_pll_divisors_calculate+0x19c>)
 8007f04:	4b53      	ldrpl	r3, [pc, #332]	; (8008054 <acc_cpd_pll_divisors_calculate+0x1a0>)
 8007f06:	ed9f 6a51 	vldr	s12, [pc, #324]	; 800804c <acc_cpd_pll_divisors_calculate+0x198>
 8007f0a:	eddf 6a53 	vldr	s13, [pc, #332]	; 8008058 <acc_cpd_pll_divisors_calculate+0x1a4>
 8007f0e:	4d53      	ldr	r5, [pc, #332]	; (800805c <acc_cpd_pll_divisors_calculate+0x1a8>)
 8007f10:	4953      	ldr	r1, [pc, #332]	; (8008060 <acc_cpd_pll_divisors_calculate+0x1ac>)
 8007f12:	6b6f      	ldr	r7, [r5, #52]	; 0x34
 8007f14:	bf48      	it	mi
 8007f16:	eef1 7a67 	vnegmi.f32	s15, s15
 8007f1a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007f1e:	2000      	movs	r0, #0
 8007f20:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8007f24:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007f28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f2c:	ee17 2a10 	vmov	r2, s14
 8007f30:	bf4c      	ite	mi
 8007f32:	eeb1 7a67 	vnegmi.f32	s14, s15
 8007f36:	eeb0 7a67 	vmovpl.f32	s14, s15
 8007f3a:	ee37 7a06 	vadd.f32	s14, s14, s12
 8007f3e:	9200      	str	r2, [sp, #0]
 8007f40:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8007f44:	4a47      	ldr	r2, [pc, #284]	; (8008064 <acc_cpd_pll_divisors_calculate+0x1b0>)
 8007f46:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8007f4a:	3c10      	subs	r4, #16
 8007f4c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007f50:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007f54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f58:	edcd 7a01 	vstr	s15, [sp, #4]
 8007f5c:	47b8      	blx	r7
 8007f5e:	2cef      	cmp	r4, #239	; 0xef
 8007f60:	d937      	bls.n	8007fd2 <acc_cpd_pll_divisors_calculate+0x11e>
 8007f62:	edd6 7a00 	vldr	s15, [r6]
 8007f66:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800804c <acc_cpd_pll_divisors_calculate+0x198>
 8007f6a:	ed9f 6a38 	vldr	s12, [pc, #224]	; 800804c <acc_cpd_pll_divisors_calculate+0x198>
 8007f6e:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8008058 <acc_cpd_pll_divisors_calculate+0x1a4>
 8007f72:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 8007f74:	493a      	ldr	r1, [pc, #232]	; (8008060 <acc_cpd_pll_divisors_calculate+0x1ac>)
 8007f76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f7e:	bf48      	it	mi
 8007f80:	eef1 7a67 	vnegmi.f32	s15, s15
 8007f84:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007f88:	bf4c      	ite	mi
 8007f8a:	4b31      	ldrmi	r3, [pc, #196]	; (8008050 <acc_cpd_pll_divisors_calculate+0x19c>)
 8007f8c:	4b31      	ldrpl	r3, [pc, #196]	; (8008054 <acc_cpd_pll_divisors_calculate+0x1a0>)
 8007f8e:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8007f92:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f9a:	ee17 2a10 	vmov	r2, s14
 8007f9e:	bf4c      	ite	mi
 8007fa0:	eeb1 7a67 	vnegmi.f32	s14, s15
 8007fa4:	eeb0 7a67 	vmovpl.f32	s14, s15
 8007fa8:	ee37 7a06 	vadd.f32	s14, s14, s12
 8007fac:	9200      	str	r2, [sp, #0]
 8007fae:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8007fb2:	4a2c      	ldr	r2, [pc, #176]	; (8008064 <acc_cpd_pll_divisors_calculate+0x1b0>)
 8007fb4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8007fb8:	2000      	movs	r0, #0
 8007fba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007fbe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007fc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007fc6:	edcd 7a01 	vstr	s15, [sp, #4]
 8007fca:	47a0      	blx	r4
 8007fcc:	2000      	movs	r0, #0
 8007fce:	b003      	add	sp, #12
 8007fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fd2:	2000      	movs	r0, #0
 8007fd4:	b003      	add	sp, #12
 8007fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fd8:	f1a4 0310 	sub.w	r3, r4, #16
 8007fdc:	b29b      	uxth	r3, r3
 8007fde:	2bef      	cmp	r3, #239	; 0xef
 8007fe0:	d901      	bls.n	8007fe6 <acc_cpd_pll_divisors_calculate+0x132>
 8007fe2:	4d1e      	ldr	r5, [pc, #120]	; (800805c <acc_cpd_pll_divisors_calculate+0x1a8>)
 8007fe4:	e7bf      	b.n	8007f66 <acc_cpd_pll_divisors_calculate+0xb2>
 8007fe6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007fea:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8008068 <acc_cpd_pll_divisors_calculate+0x1b4>
 8007fee:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800806c <acc_cpd_pll_divisors_calculate+0x1b8>
 8007ff2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007ff6:	2c3f      	cmp	r4, #63	; 0x3f
 8007ff8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007ffc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008000:	ee17 2a90 	vmov	r2, s15
 8008004:	810a      	strh	r2, [r1, #8]
 8008006:	d912      	bls.n	800802e <acc_cpd_pll_divisors_calculate+0x17a>
 8008008:	2cbf      	cmp	r4, #191	; 0xbf
 800800a:	f04f 0301 	mov.w	r3, #1
 800800e:	bf98      	it	ls
 8008010:	f1a4 0240 	subls.w	r2, r4, #64	; 0x40
 8008014:	804b      	strh	r3, [r1, #2]
 8008016:	bf8c      	ite	hi
 8008018:	08e2      	lsrhi	r2, r4, #3
 800801a:	f3c2 02cf 	ubfxls	r2, r2, #3, #16
 800801e:	f004 0307 	and.w	r3, r4, #7
 8008022:	808a      	strh	r2, [r1, #4]
 8008024:	80cb      	strh	r3, [r1, #6]
 8008026:	2001      	movs	r0, #1
 8008028:	800c      	strh	r4, [r1, #0]
 800802a:	b003      	add	sp, #12
 800802c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800802e:	2200      	movs	r2, #0
 8008030:	2c2f      	cmp	r4, #47	; 0x2f
 8008032:	bf88      	it	hi
 8008034:	4623      	movhi	r3, r4
 8008036:	808b      	strh	r3, [r1, #4]
 8008038:	804a      	strh	r2, [r1, #2]
 800803a:	80ca      	strh	r2, [r1, #6]
 800803c:	e7f3      	b.n	8008026 <acc_cpd_pll_divisors_calculate+0x172>
 800803e:	bf00      	nop
 8008040:	4f1502f9 	.word	0x4f1502f9
 8008044:	4c989680 	.word	0x4c989680
 8008048:	4b989680 	.word	0x4b989680
 800804c:	350637bd 	.word	0x350637bd
 8008050:	0800ea9c 	.word	0x0800ea9c
 8008054:	0800fb24 	.word	0x0800fb24
 8008058:	49742400 	.word	0x49742400
 800805c:	200004c0 	.word	0x200004c0
 8008060:	0800f348 	.word	0x0800f348
 8008064:	0800f31c 	.word	0x0800f31c
 8008068:	b55b38e8 	.word	0xb55b38e8
 800806c:	427c0000 	.word	0x427c0000

08008070 <acc_cpd_pll_divisors_ref_divisor>:
 8008070:	eddf 7a02 	vldr	s15, [pc, #8]	; 800807c <acc_cpd_pll_divisors_ref_divisor+0xc>
 8008074:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8008078:	f005 be20 	b.w	800dcbc <roundf>
 800807c:	4f1502f9 	.word	0x4f1502f9

08008080 <acc_dll_calculate_area_settings>:
 8008080:	0080      	lsls	r0, r0, #2
 8008082:	b280      	uxth	r0, r0
 8008084:	eb00 0351 	add.w	r3, r0, r1, lsr #1
 8008088:	b29b      	uxth	r3, r3
 800808a:	428b      	cmp	r3, r1
 800808c:	8010      	strh	r0, [r2, #0]
 800808e:	8053      	strh	r3, [r2, #2]
 8008090:	d20c      	bcs.n	80080ac <acc_dll_calculate_area_settings+0x2c>
 8008092:	2301      	movs	r3, #1
 8008094:	2100      	movs	r1, #0
 8008096:	2003      	movs	r0, #3
 8008098:	8093      	strh	r3, [r2, #4]
 800809a:	8153      	strh	r3, [r2, #10]
 800809c:	8193      	strh	r3, [r2, #12]
 800809e:	8213      	strh	r3, [r2, #16]
 80080a0:	80d1      	strh	r1, [r2, #6]
 80080a2:	8251      	strh	r1, [r2, #18]
 80080a4:	8291      	strh	r1, [r2, #20]
 80080a6:	8110      	strh	r0, [r2, #8]
 80080a8:	81d0      	strh	r0, [r2, #14]
 80080aa:	4770      	bx	lr
 80080ac:	b430      	push	{r4, r5}
 80080ae:	fbb3 f4f1 	udiv	r4, r3, r1
 80080b2:	2500      	movs	r5, #0
 80080b4:	fb01 3114 	mls	r1, r1, r4, r3
 80080b8:	2401      	movs	r4, #1
 80080ba:	2303      	movs	r3, #3
 80080bc:	8094      	strh	r4, [r2, #4]
 80080be:	80d4      	strh	r4, [r2, #6]
 80080c0:	8154      	strh	r4, [r2, #10]
 80080c2:	8214      	strh	r4, [r2, #16]
 80080c4:	8254      	strh	r4, [r2, #18]
 80080c6:	8195      	strh	r5, [r2, #12]
 80080c8:	81d5      	strh	r5, [r2, #14]
 80080ca:	8295      	strh	r5, [r2, #20]
 80080cc:	8050      	strh	r0, [r2, #2]
 80080ce:	bc30      	pop	{r4, r5}
 80080d0:	8011      	strh	r1, [r2, #0]
 80080d2:	8113      	strh	r3, [r2, #8]
 80080d4:	4770      	bx	lr
 80080d6:	bf00      	nop

080080d8 <acc_utils_swap16_array>:
 80080d8:	b141      	cbz	r1, 80080ec <acc_utils_swap16_array+0x14>
 80080da:	3802      	subs	r0, #2
 80080dc:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 80080e0:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 80080e4:	ba5b      	rev16	r3, r3
 80080e6:	4288      	cmp	r0, r1
 80080e8:	8003      	strh	r3, [r0, #0]
 80080ea:	d1f9      	bne.n	80080e0 <acc_utils_swap16_array+0x8>
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop

080080f0 <acc_utils_uint32_to_transfer_buffer>:
 80080f0:	b152      	cbz	r2, 8008108 <acc_utils_uint32_to_transfer_buffer+0x18>
 80080f2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80080f6:	3804      	subs	r0, #4
 80080f8:	f850 3f04 	ldr.w	r3, [r0, #4]!
 80080fc:	804b      	strh	r3, [r1, #2]
 80080fe:	0c1b      	lsrs	r3, r3, #16
 8008100:	800b      	strh	r3, [r1, #0]
 8008102:	3104      	adds	r1, #4
 8008104:	4291      	cmp	r1, r2
 8008106:	d1f7      	bne.n	80080f8 <acc_utils_uint32_to_transfer_buffer+0x8>
 8008108:	4770      	bx	lr
 800810a:	bf00      	nop

0800810c <acc_utils_transfer_buffer_to_uint32>:
 800810c:	b17a      	cbz	r2, 800812e <acc_utils_transfer_buffer_to_uint32+0x22>
 800810e:	b410      	push	{r4}
 8008110:	3904      	subs	r1, #4
 8008112:	eb00 0482 	add.w	r4, r0, r2, lsl #2
 8008116:	8802      	ldrh	r2, [r0, #0]
 8008118:	8843      	ldrh	r3, [r0, #2]
 800811a:	3004      	adds	r0, #4
 800811c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008120:	4284      	cmp	r4, r0
 8008122:	f841 3f04 	str.w	r3, [r1, #4]!
 8008126:	d1f6      	bne.n	8008116 <acc_utils_transfer_buffer_to_uint32+0xa>
 8008128:	f85d 4b04 	ldr.w	r4, [sp], #4
 800812c:	4770      	bx	lr
 800812e:	4770      	bx	lr

08008130 <event>:
 8008130:	b570      	push	{r4, r5, r6, lr}
 8008132:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008134:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008136:	682a      	ldr	r2, [r5, #0]
 8008138:	4604      	mov	r4, r0
 800813a:	e9d0 0104 	ldrd	r0, r1, [r0, #16]
 800813e:	4798      	blx	r3
 8008140:	6823      	ldr	r3, [r4, #0]
 8008142:	6028      	str	r0, [r5, #0]
 8008144:	685a      	ldr	r2, [r3, #4]
 8008146:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800814a:	4618      	mov	r0, r3
 800814c:	4710      	bx	r2
 800814e:	bf00      	nop

08008150 <reset>:
 8008150:	6800      	ldr	r0, [r0, #0]
 8008152:	68c3      	ldr	r3, [r0, #12]
 8008154:	4718      	bx	r3
 8008156:	bf00      	nop

08008158 <validate>:
 8008158:	6983      	ldr	r3, [r0, #24]
 800815a:	b510      	push	{r4, lr}
 800815c:	4604      	mov	r4, r0
 800815e:	b113      	cbz	r3, 8008166 <validate+0xe>
 8008160:	f7fd fae6 	bl	8005730 <acc_rss_integration_log_level>
 8008164:	b978      	cbnz	r0, 8008186 <validate+0x2e>
 8008166:	69e3      	ldr	r3, [r4, #28]
 8008168:	b143      	cbz	r3, 800817c <validate+0x24>
 800816a:	f7fd fae1 	bl	8005730 <acc_rss_integration_log_level>
 800816e:	b128      	cbz	r0, 800817c <validate+0x24>
 8008170:	4b08      	ldr	r3, [pc, #32]	; (8008194 <validate+0x3c>)
 8008172:	4a09      	ldr	r2, [pc, #36]	; (8008198 <validate+0x40>)
 8008174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008176:	4909      	ldr	r1, [pc, #36]	; (800819c <validate+0x44>)
 8008178:	2001      	movs	r0, #1
 800817a:	4798      	blx	r3
 800817c:	6820      	ldr	r0, [r4, #0]
 800817e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008182:	6883      	ldr	r3, [r0, #8]
 8008184:	4718      	bx	r3
 8008186:	4b03      	ldr	r3, [pc, #12]	; (8008194 <validate+0x3c>)
 8008188:	4a05      	ldr	r2, [pc, #20]	; (80081a0 <validate+0x48>)
 800818a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800818c:	4903      	ldr	r1, [pc, #12]	; (800819c <validate+0x44>)
 800818e:	2001      	movs	r0, #1
 8008190:	4798      	blx	r3
 8008192:	e7e8      	b.n	8008166 <validate+0xe>
 8008194:	200004c0 	.word	0x200004c0
 8008198:	0800f2b8 	.word	0x0800f2b8
 800819c:	0800f35c 	.word	0x0800f35c
 80081a0:	0800f288 	.word	0x0800f288

080081a4 <abs_q3_12_complex>:
 80081a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081a6:	0897      	lsrs	r7, r2, #2
 80081a8:	d00b      	beq.n	80081c2 <abs_q3_12_complex+0x1e>
 80081aa:	4604      	mov	r4, r0
 80081ac:	1e8d      	subs	r5, r1, #2
 80081ae:	eb00 0687 	add.w	r6, r0, r7, lsl #2
 80081b2:	f854 0b04 	ldr.w	r0, [r4], #4
 80081b6:	f004 fafb 	bl	800c7b0 <acc_alg_basic_math_q3_12_complex_scalar_abs>
 80081ba:	42b4      	cmp	r4, r6
 80081bc:	f825 0f02 	strh.w	r0, [r5, #2]!
 80081c0:	d1f7      	bne.n	80081b2 <abs_q3_12_complex+0xe>
 80081c2:	0078      	lsls	r0, r7, #1
 80081c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081c6:	bf00      	nop

080081c8 <acc_element_abs_init>:
 80081c8:	b510      	push	{r4, lr}
 80081ca:	4a0b      	ldr	r2, [pc, #44]	; (80081f8 <acc_element_abs_init+0x30>)
 80081cc:	4c0b      	ldr	r4, [pc, #44]	; (80081fc <acc_element_abs_init+0x34>)
 80081ce:	4b0c      	ldr	r3, [pc, #48]	; (8008200 <acc_element_abs_init+0x38>)
 80081d0:	60c3      	str	r3, [r0, #12]
 80081d2:	2907      	cmp	r1, #7
 80081d4:	e9c0 4201 	strd	r4, r2, [r0, #4]
 80081d8:	d103      	bne.n	80081e2 <acc_element_abs_init+0x1a>
 80081da:	4b0a      	ldr	r3, [pc, #40]	; (8008204 <acc_element_abs_init+0x3c>)
 80081dc:	6383      	str	r3, [r0, #56]	; 0x38
 80081de:	2001      	movs	r0, #1
 80081e0:	bd10      	pop	{r4, pc}
 80081e2:	4b09      	ldr	r3, [pc, #36]	; (8008208 <acc_element_abs_init+0x40>)
 80081e4:	4a09      	ldr	r2, [pc, #36]	; (800820c <acc_element_abs_init+0x44>)
 80081e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081e8:	4909      	ldr	r1, [pc, #36]	; (8008210 <acc_element_abs_init+0x48>)
 80081ea:	2400      	movs	r4, #0
 80081ec:	6384      	str	r4, [r0, #56]	; 0x38
 80081ee:	4620      	mov	r0, r4
 80081f0:	4798      	blx	r3
 80081f2:	4620      	mov	r0, r4
 80081f4:	bd10      	pop	{r4, pc}
 80081f6:	bf00      	nop
 80081f8:	08008159 	.word	0x08008159
 80081fc:	08008131 	.word	0x08008131
 8008200:	08008151 	.word	0x08008151
 8008204:	080081a5 	.word	0x080081a5
 8008208:	200004c0 	.word	0x200004c0
 800820c:	0800f2c8 	.word	0x0800f2c8
 8008210:	0800f35c 	.word	0x0800f35c

08008214 <event>:
 8008214:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8008216:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008218:	6811      	ldr	r1, [r2, #0]
 800821a:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
 800821c:	b510      	push	{r4, lr}
 800821e:	4604      	mov	r4, r0
 8008220:	6900      	ldr	r0, [r0, #16]
 8008222:	4798      	blx	r3
 8008224:	6820      	ldr	r0, [r4, #0]
 8008226:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800822a:	6843      	ldr	r3, [r0, #4]
 800822c:	4718      	bx	r3
 800822e:	bf00      	nop

08008230 <reset>:
 8008230:	6800      	ldr	r0, [r0, #0]
 8008232:	68c3      	ldr	r3, [r0, #12]
 8008234:	4718      	bx	r3
 8008236:	bf00      	nop

08008238 <validate>:
 8008238:	6983      	ldr	r3, [r0, #24]
 800823a:	b510      	push	{r4, lr}
 800823c:	4604      	mov	r4, r0
 800823e:	b113      	cbz	r3, 8008246 <validate+0xe>
 8008240:	f7fd fa76 	bl	8005730 <acc_rss_integration_log_level>
 8008244:	b978      	cbnz	r0, 8008266 <validate+0x2e>
 8008246:	69e3      	ldr	r3, [r4, #28]
 8008248:	b143      	cbz	r3, 800825c <validate+0x24>
 800824a:	f7fd fa71 	bl	8005730 <acc_rss_integration_log_level>
 800824e:	b128      	cbz	r0, 800825c <validate+0x24>
 8008250:	4b08      	ldr	r3, [pc, #32]	; (8008274 <validate+0x3c>)
 8008252:	4a09      	ldr	r2, [pc, #36]	; (8008278 <validate+0x40>)
 8008254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008256:	4909      	ldr	r1, [pc, #36]	; (800827c <validate+0x44>)
 8008258:	2001      	movs	r0, #1
 800825a:	4798      	blx	r3
 800825c:	6820      	ldr	r0, [r4, #0]
 800825e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008262:	6883      	ldr	r3, [r0, #8]
 8008264:	4718      	bx	r3
 8008266:	4b03      	ldr	r3, [pc, #12]	; (8008274 <validate+0x3c>)
 8008268:	4a05      	ldr	r2, [pc, #20]	; (8008280 <validate+0x48>)
 800826a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800826c:	4903      	ldr	r1, [pc, #12]	; (800827c <validate+0x44>)
 800826e:	2001      	movs	r0, #1
 8008270:	4798      	blx	r3
 8008272:	e7e8      	b.n	8008246 <validate+0xe>
 8008274:	200004c0 	.word	0x200004c0
 8008278:	0800f2b8 	.word	0x0800f2b8
 800827c:	0800f368 	.word	0x0800f368
 8008280:	0800f288 	.word	0x0800f288

08008284 <centering_q12_4>:
 8008284:	f3c1 014f 	ubfx	r1, r1, #1, #16
 8008288:	f3c2 024f 	ubfx	r2, r2, #1, #16
 800828c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008290:	f003 bbe2 	b.w	800ba58 <acc_alg_basic_subtract_section_mean_q12_4>

08008294 <acc_element_centering_init>:
 8008294:	b430      	push	{r4, r5}
 8008296:	4b09      	ldr	r3, [pc, #36]	; (80082bc <acc_element_centering_init+0x28>)
 8008298:	60c3      	str	r3, [r0, #12]
 800829a:	2905      	cmp	r1, #5
 800829c:	4d08      	ldr	r5, [pc, #32]	; (80082c0 <acc_element_centering_init+0x2c>)
 800829e:	4c09      	ldr	r4, [pc, #36]	; (80082c4 <acc_element_centering_init+0x30>)
 80082a0:	bf08      	it	eq
 80082a2:	4909      	ldreq	r1, [pc, #36]	; (80082c8 <acc_element_centering_init+0x34>)
 80082a4:	8782      	strh	r2, [r0, #60]	; 0x3c
 80082a6:	bf1a      	itte	ne
 80082a8:	2300      	movne	r3, #0
 80082aa:	4619      	movne	r1, r3
 80082ac:	2301      	moveq	r3, #1
 80082ae:	e9c0 5401 	strd	r5, r4, [r0, #4]
 80082b2:	6381      	str	r1, [r0, #56]	; 0x38
 80082b4:	bc30      	pop	{r4, r5}
 80082b6:	4618      	mov	r0, r3
 80082b8:	4770      	bx	lr
 80082ba:	bf00      	nop
 80082bc:	08008231 	.word	0x08008231
 80082c0:	08008215 	.word	0x08008215
 80082c4:	08008239 	.word	0x08008239
 80082c8:	08008285 	.word	0x08008285

080082cc <convert_q3_12_to_u16>:
 80082cc:	0853      	lsrs	r3, r2, #1
 80082ce:	d010      	beq.n	80082f2 <convert_q3_12_to_u16+0x26>
 80082d0:	b410      	push	{r4}
 80082d2:	eb01 0443 	add.w	r4, r1, r3, lsl #1
 80082d6:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 80082da:	f831 3d02 	ldrh.w	r3, [r1, #-2]!
 80082de:	005b      	lsls	r3, r3, #1
 80082e0:	4281      	cmp	r1, r0
 80082e2:	f824 3d02 	strh.w	r3, [r4, #-2]!
 80082e6:	d1f8      	bne.n	80082da <convert_q3_12_to_u16+0xe>
 80082e8:	f022 0001 	bic.w	r0, r2, #1
 80082ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082f0:	4770      	bx	lr
 80082f2:	f022 0001 	bic.w	r0, r2, #1
 80082f6:	4770      	bx	lr

080082f8 <convert_q3_12_complex_to_f32_complex>:
 80082f8:	0892      	lsrs	r2, r2, #2
 80082fa:	d024      	beq.n	8008346 <convert_q3_12_complex_to_f32_complex+0x4e>
 80082fc:	eddf 6a13 	vldr	s13, [pc, #76]	; 800834c <convert_q3_12_complex_to_f32_complex+0x54>
 8008300:	eddf 5a13 	vldr	s11, [pc, #76]	; 8008350 <convert_q3_12_complex_to_f32_complex+0x58>
 8008304:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8008308:	00d0      	lsls	r0, r2, #3
 800830a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800830e:	f933 cc02 	ldrsh.w	ip, [r3, #-2]
 8008312:	ee07 ca10 	vmov	s14, ip
 8008316:	f933 cd04 	ldrsh.w	ip, [r3, #-4]!
 800831a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800831e:	ee07 ca90 	vmov	s15, ip
 8008322:	ee27 7a26 	vmul.f32	s14, s14, s13
 8008326:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800832a:	ee27 6a25 	vmul.f32	s12, s14, s11
 800832e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008332:	ed02 7a01 	vstr	s14, [r2, #-4]
 8008336:	ee77 7a86 	vadd.f32	s15, s15, s12
 800833a:	3a08      	subs	r2, #8
 800833c:	edc2 7a00 	vstr	s15, [r2]
 8008340:	4291      	cmp	r1, r2
 8008342:	d1e4      	bne.n	800830e <convert_q3_12_complex_to_f32_complex+0x16>
 8008344:	4770      	bx	lr
 8008346:	4610      	mov	r0, r2
 8008348:	4770      	bx	lr
 800834a:	bf00      	nop
 800834c:	39800000 	.word	0x39800000
 8008350:	00000000 	.word	0x00000000

08008354 <convert_q12_4_to_q3_12>:
 8008354:	0853      	lsrs	r3, r2, #1
 8008356:	d012      	beq.n	800837e <convert_q12_4_to_q3_12+0x2a>
 8008358:	b410      	push	{r4}
 800835a:	eb01 0443 	add.w	r4, r1, r3, lsl #1
 800835e:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 8008362:	f931 3d02 	ldrsh.w	r3, [r1, #-2]!
 8008366:	105b      	asrs	r3, r3, #1
 8008368:	f483 4340 	eor.w	r3, r3, #49152	; 0xc000
 800836c:	4281      	cmp	r1, r0
 800836e:	f824 3d02 	strh.w	r3, [r4, #-2]!
 8008372:	d1f6      	bne.n	8008362 <convert_q12_4_to_q3_12+0xe>
 8008374:	f022 0001 	bic.w	r0, r2, #1
 8008378:	f85d 4b04 	ldr.w	r4, [sp], #4
 800837c:	4770      	bx	lr
 800837e:	f022 0001 	bic.w	r0, r2, #1
 8008382:	4770      	bx	lr

08008384 <convert_q12_4_to_q3_12_complex>:
 8008384:	b470      	push	{r4, r5, r6}
 8008386:	4605      	mov	r5, r0
 8008388:	0850      	lsrs	r0, r2, #1
 800838a:	d012      	beq.n	80083b2 <convert_q12_4_to_q3_12_complex+0x2e>
 800838c:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8008390:	eb05 0440 	add.w	r4, r5, r0, lsl #1
 8008394:	2600      	movs	r6, #0
 8008396:	0080      	lsls	r0, r0, #2
 8008398:	f934 3d02 	ldrsh.w	r3, [r4, #-2]!
 800839c:	f821 6c02 	strh.w	r6, [r1, #-2]
 80083a0:	105b      	asrs	r3, r3, #1
 80083a2:	f483 4340 	eor.w	r3, r3, #49152	; 0xc000
 80083a6:	42a5      	cmp	r5, r4
 80083a8:	f821 3c04 	strh.w	r3, [r1, #-4]
 80083ac:	f1a1 0104 	sub.w	r1, r1, #4
 80083b0:	d1f2      	bne.n	8008398 <convert_q12_4_to_q3_12_complex+0x14>
 80083b2:	bc70      	pop	{r4, r5, r6}
 80083b4:	4770      	bx	lr
 80083b6:	bf00      	nop

080083b8 <event>:
 80083b8:	b570      	push	{r4, r5, r6, lr}
 80083ba:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80083bc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80083be:	682a      	ldr	r2, [r5, #0]
 80083c0:	4604      	mov	r4, r0
 80083c2:	e9d0 0104 	ldrd	r0, r1, [r0, #16]
 80083c6:	4798      	blx	r3
 80083c8:	6823      	ldr	r3, [r4, #0]
 80083ca:	6028      	str	r0, [r5, #0]
 80083cc:	685a      	ldr	r2, [r3, #4]
 80083ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80083d2:	4618      	mov	r0, r3
 80083d4:	4710      	bx	r2
 80083d6:	bf00      	nop

080083d8 <reset>:
 80083d8:	6800      	ldr	r0, [r0, #0]
 80083da:	68c3      	ldr	r3, [r0, #12]
 80083dc:	4718      	bx	r3
 80083de:	bf00      	nop

080083e0 <validate>:
 80083e0:	6983      	ldr	r3, [r0, #24]
 80083e2:	b510      	push	{r4, lr}
 80083e4:	4604      	mov	r4, r0
 80083e6:	b113      	cbz	r3, 80083ee <validate+0xe>
 80083e8:	f7fd f9a2 	bl	8005730 <acc_rss_integration_log_level>
 80083ec:	b978      	cbnz	r0, 800840e <validate+0x2e>
 80083ee:	69e3      	ldr	r3, [r4, #28]
 80083f0:	b143      	cbz	r3, 8008404 <validate+0x24>
 80083f2:	f7fd f99d 	bl	8005730 <acc_rss_integration_log_level>
 80083f6:	b128      	cbz	r0, 8008404 <validate+0x24>
 80083f8:	4b08      	ldr	r3, [pc, #32]	; (800841c <validate+0x3c>)
 80083fa:	4a09      	ldr	r2, [pc, #36]	; (8008420 <validate+0x40>)
 80083fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083fe:	4909      	ldr	r1, [pc, #36]	; (8008424 <validate+0x44>)
 8008400:	2001      	movs	r0, #1
 8008402:	4798      	blx	r3
 8008404:	6820      	ldr	r0, [r4, #0]
 8008406:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800840a:	6883      	ldr	r3, [r0, #8]
 800840c:	4718      	bx	r3
 800840e:	4b03      	ldr	r3, [pc, #12]	; (800841c <validate+0x3c>)
 8008410:	4a05      	ldr	r2, [pc, #20]	; (8008428 <validate+0x48>)
 8008412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008414:	4903      	ldr	r1, [pc, #12]	; (8008424 <validate+0x44>)
 8008416:	2001      	movs	r0, #1
 8008418:	4798      	blx	r3
 800841a:	e7e8      	b.n	80083ee <validate+0xe>
 800841c:	200004c0 	.word	0x200004c0
 8008420:	0800f2b8 	.word	0x0800f2b8
 8008424:	0800f37c 	.word	0x0800f37c
 8008428:	0800f288 	.word	0x0800f288

0800842c <acc_element_converter_init>:
 800842c:	3a02      	subs	r2, #2
 800842e:	b510      	push	{r4, lr}
 8008430:	2a05      	cmp	r2, #5
 8008432:	d804      	bhi.n	800843e <acc_element_converter_init+0x12>
 8008434:	e8df f002 	tbb	[pc, r2]
 8008438:	031d0319 	.word	0x031d0319
 800843c:	0d21      	.short	0x0d21
 800843e:	2300      	movs	r3, #0
 8008440:	6383      	str	r3, [r0, #56]	; 0x38
 8008442:	4b10      	ldr	r3, [pc, #64]	; (8008484 <acc_element_converter_init+0x58>)
 8008444:	4a10      	ldr	r2, [pc, #64]	; (8008488 <acc_element_converter_init+0x5c>)
 8008446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008448:	4910      	ldr	r1, [pc, #64]	; (800848c <acc_element_converter_init+0x60>)
 800844a:	2000      	movs	r0, #0
 800844c:	4798      	blx	r3
 800844e:	2000      	movs	r0, #0
 8008450:	bd10      	pop	{r4, pc}
 8008452:	2905      	cmp	r1, #5
 8008454:	d1f3      	bne.n	800843e <acc_element_converter_init+0x12>
 8008456:	4c0e      	ldr	r4, [pc, #56]	; (8008490 <acc_element_converter_init+0x64>)
 8008458:	490e      	ldr	r1, [pc, #56]	; (8008494 <acc_element_converter_init+0x68>)
 800845a:	4a0f      	ldr	r2, [pc, #60]	; (8008498 <acc_element_converter_init+0x6c>)
 800845c:	4b0f      	ldr	r3, [pc, #60]	; (800849c <acc_element_converter_init+0x70>)
 800845e:	6384      	str	r4, [r0, #56]	; 0x38
 8008460:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8008464:	60c3      	str	r3, [r0, #12]
 8008466:	2001      	movs	r0, #1
 8008468:	bd10      	pop	{r4, pc}
 800846a:	2904      	cmp	r1, #4
 800846c:	d1e7      	bne.n	800843e <acc_element_converter_init+0x12>
 800846e:	4c0c      	ldr	r4, [pc, #48]	; (80084a0 <acc_element_converter_init+0x74>)
 8008470:	e7f2      	b.n	8008458 <acc_element_converter_init+0x2c>
 8008472:	2905      	cmp	r1, #5
 8008474:	d1e3      	bne.n	800843e <acc_element_converter_init+0x12>
 8008476:	4c0b      	ldr	r4, [pc, #44]	; (80084a4 <acc_element_converter_init+0x78>)
 8008478:	e7ee      	b.n	8008458 <acc_element_converter_init+0x2c>
 800847a:	2907      	cmp	r1, #7
 800847c:	d1df      	bne.n	800843e <acc_element_converter_init+0x12>
 800847e:	4c0a      	ldr	r4, [pc, #40]	; (80084a8 <acc_element_converter_init+0x7c>)
 8008480:	e7ea      	b.n	8008458 <acc_element_converter_init+0x2c>
 8008482:	bf00      	nop
 8008484:	200004c0 	.word	0x200004c0
 8008488:	0800f390 	.word	0x0800f390
 800848c:	0800f37c 	.word	0x0800f37c
 8008490:	08008385 	.word	0x08008385
 8008494:	080083b9 	.word	0x080083b9
 8008498:	080083e1 	.word	0x080083e1
 800849c:	080083d9 	.word	0x080083d9
 80084a0:	080082cd 	.word	0x080082cd
 80084a4:	08008355 	.word	0x08008355
 80084a8:	080082f9 	.word	0x080082f9

080084ac <event>:
 80084ac:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80084ae:	6803      	ldr	r3, [r0, #0]
 80084b0:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80084b2:	6011      	str	r1, [r2, #0]
 80084b4:	4618      	mov	r0, r3
 80084b6:	685a      	ldr	r2, [r3, #4]
 80084b8:	4710      	bx	r2
 80084ba:	bf00      	nop

080084bc <reset>:
 80084bc:	6800      	ldr	r0, [r0, #0]
 80084be:	68c3      	ldr	r3, [r0, #12]
 80084c0:	4718      	bx	r3
 80084c2:	bf00      	nop

080084c4 <validate>:
 80084c4:	6983      	ldr	r3, [r0, #24]
 80084c6:	b510      	push	{r4, lr}
 80084c8:	4604      	mov	r4, r0
 80084ca:	b113      	cbz	r3, 80084d2 <validate+0xe>
 80084cc:	f7fd f930 	bl	8005730 <acc_rss_integration_log_level>
 80084d0:	b978      	cbnz	r0, 80084f2 <validate+0x2e>
 80084d2:	69e3      	ldr	r3, [r4, #28]
 80084d4:	b143      	cbz	r3, 80084e8 <validate+0x24>
 80084d6:	f7fd f92b 	bl	8005730 <acc_rss_integration_log_level>
 80084da:	b128      	cbz	r0, 80084e8 <validate+0x24>
 80084dc:	4b08      	ldr	r3, [pc, #32]	; (8008500 <validate+0x3c>)
 80084de:	4a09      	ldr	r2, [pc, #36]	; (8008504 <validate+0x40>)
 80084e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084e2:	4909      	ldr	r1, [pc, #36]	; (8008508 <validate+0x44>)
 80084e4:	2001      	movs	r0, #1
 80084e6:	4798      	blx	r3
 80084e8:	6820      	ldr	r0, [r4, #0]
 80084ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084ee:	6883      	ldr	r3, [r0, #8]
 80084f0:	4718      	bx	r3
 80084f2:	4b03      	ldr	r3, [pc, #12]	; (8008500 <validate+0x3c>)
 80084f4:	4a05      	ldr	r2, [pc, #20]	; (800850c <validate+0x48>)
 80084f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084f8:	4903      	ldr	r1, [pc, #12]	; (8008508 <validate+0x44>)
 80084fa:	2001      	movs	r0, #1
 80084fc:	4798      	blx	r3
 80084fe:	e7e8      	b.n	80084d2 <validate+0xe>
 8008500:	200004c0 	.word	0x200004c0
 8008504:	0800f2b8 	.word	0x0800f2b8
 8008508:	0800f3b8 	.word	0x0800f3b8
 800850c:	0800f288 	.word	0x0800f288

08008510 <acc_element_crop_init>:
 8008510:	b538      	push	{r3, r4, r5, lr}
 8008512:	4604      	mov	r4, r0
 8008514:	4608      	mov	r0, r1
 8008516:	4615      	mov	r5, r2
 8008518:	f7ff fb46 	bl	8007ba8 <acc_element_sizeof>
 800851c:	4904      	ldr	r1, [pc, #16]	; (8008530 <acc_element_crop_init+0x20>)
 800851e:	4a05      	ldr	r2, [pc, #20]	; (8008534 <acc_element_crop_init+0x24>)
 8008520:	4b05      	ldr	r3, [pc, #20]	; (8008538 <acc_element_crop_init+0x28>)
 8008522:	60e3      	str	r3, [r4, #12]
 8008524:	fb05 f000 	mul.w	r0, r5, r0
 8008528:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800852c:	63a0      	str	r0, [r4, #56]	; 0x38
 800852e:	bd38      	pop	{r3, r4, r5, pc}
 8008530:	080084ad 	.word	0x080084ad
 8008534:	080084c5 	.word	0x080084c5
 8008538:	080084bd 	.word	0x080084bd

0800853c <filter_no_operation>:
 800853c:	4770      	bx	lr
 800853e:	bf00      	nop

08008540 <event>:
 8008540:	b510      	push	{r4, lr}
 8008542:	4604      	mov	r4, r0
 8008544:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008546:	4798      	blx	r3
 8008548:	6820      	ldr	r0, [r4, #0]
 800854a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800854e:	6843      	ldr	r3, [r0, #4]
 8008550:	4718      	bx	r3
 8008552:	bf00      	nop

08008554 <reset>:
 8008554:	6800      	ldr	r0, [r0, #0]
 8008556:	68c3      	ldr	r3, [r0, #12]
 8008558:	4718      	bx	r3
 800855a:	bf00      	nop

0800855c <filter_q3_12_complex>:
 800855c:	4603      	mov	r3, r0
 800855e:	3040      	adds	r0, #64	; 0x40
 8008560:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008562:	6919      	ldr	r1, [r3, #16]
 8008564:	6812      	ldr	r2, [r2, #0]
 8008566:	0892      	lsrs	r2, r2, #2
 8008568:	f003 bc5c 	b.w	800be24 <acc_alg_biquad_q3_12_complex_direct_form_1_filtfilt_reduced_edge_transients>

0800856c <validate>:
 800856c:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 8008570:	429a      	cmp	r2, r3
 8008572:	b510      	push	{r4, lr}
 8008574:	d007      	beq.n	8008586 <validate+0x1a>
 8008576:	4b12      	ldr	r3, [pc, #72]	; (80085c0 <validate+0x54>)
 8008578:	4a12      	ldr	r2, [pc, #72]	; (80085c4 <validate+0x58>)
 800857a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800857c:	4912      	ldr	r1, [pc, #72]	; (80085c8 <validate+0x5c>)
 800857e:	2000      	movs	r0, #0
 8008580:	4798      	blx	r3
 8008582:	2000      	movs	r0, #0
 8008584:	bd10      	pop	{r4, pc}
 8008586:	6983      	ldr	r3, [r0, #24]
 8008588:	4604      	mov	r4, r0
 800858a:	b113      	cbz	r3, 8008592 <validate+0x26>
 800858c:	f7fd f8d0 	bl	8005730 <acc_rss_integration_log_level>
 8008590:	b978      	cbnz	r0, 80085b2 <validate+0x46>
 8008592:	69e3      	ldr	r3, [r4, #28]
 8008594:	b143      	cbz	r3, 80085a8 <validate+0x3c>
 8008596:	f7fd f8cb 	bl	8005730 <acc_rss_integration_log_level>
 800859a:	b128      	cbz	r0, 80085a8 <validate+0x3c>
 800859c:	4b08      	ldr	r3, [pc, #32]	; (80085c0 <validate+0x54>)
 800859e:	4a0b      	ldr	r2, [pc, #44]	; (80085cc <validate+0x60>)
 80085a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085a2:	4909      	ldr	r1, [pc, #36]	; (80085c8 <validate+0x5c>)
 80085a4:	2001      	movs	r0, #1
 80085a6:	4798      	blx	r3
 80085a8:	6820      	ldr	r0, [r4, #0]
 80085aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085ae:	6883      	ldr	r3, [r0, #8]
 80085b0:	4718      	bx	r3
 80085b2:	4b03      	ldr	r3, [pc, #12]	; (80085c0 <validate+0x54>)
 80085b4:	4a06      	ldr	r2, [pc, #24]	; (80085d0 <validate+0x64>)
 80085b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085b8:	4903      	ldr	r1, [pc, #12]	; (80085c8 <validate+0x5c>)
 80085ba:	2001      	movs	r0, #1
 80085bc:	4798      	blx	r3
 80085be:	e7e8      	b.n	8008592 <validate+0x26>
 80085c0:	200004c0 	.word	0x200004c0
 80085c4:	0800f3c8 	.word	0x0800f3c8
 80085c8:	0800f3f0 	.word	0x0800f3f0
 80085cc:	0800f2b8 	.word	0x0800f2b8
 80085d0:	0800f288 	.word	0x0800f288

080085d4 <acc_element_depth_domain_low_pass_filter_init>:
 80085d4:	b570      	push	{r4, r5, r6, lr}
 80085d6:	4604      	mov	r4, r0
 80085d8:	4823      	ldr	r0, [pc, #140]	; (8008668 <acc_element_depth_domain_low_pass_filter_init+0x94>)
 80085da:	6060      	str	r0, [r4, #4]
 80085dc:	4823      	ldr	r0, [pc, #140]	; (800866c <acc_element_depth_domain_low_pass_filter_init+0x98>)
 80085de:	60a0      	str	r0, [r4, #8]
 80085e0:	4823      	ldr	r0, [pc, #140]	; (8008670 <acc_element_depth_domain_low_pass_filter_init+0x9c>)
 80085e2:	60e0      	str	r0, [r4, #12]
 80085e4:	461e      	mov	r6, r3
 80085e6:	b30a      	cbz	r2, 800862c <acc_element_depth_domain_low_pass_filter_init+0x58>
 80085e8:	eddf 7a22 	vldr	s15, [pc, #136]	; 8008674 <acc_element_depth_domain_low_pass_filter_init+0xa0>
 80085ec:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80085f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085f4:	d513      	bpl.n	800861e <acc_element_depth_domain_low_pass_filter_init+0x4a>
 80085f6:	eeb0 0a67 	vmov.f32	s0, s15
 80085fa:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
 80085fe:	2907      	cmp	r1, #7
 8008600:	d124      	bne.n	800864c <acc_element_depth_domain_low_pass_filter_init+0x78>
 8008602:	4b1d      	ldr	r3, [pc, #116]	; (8008678 <acc_element_depth_domain_low_pass_filter_init+0xa4>)
 8008604:	63a3      	str	r3, [r4, #56]	; 0x38
 8008606:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 800860a:	2300      	movs	r3, #0
 800860c:	f104 0140 	add.w	r1, r4, #64	; 0x40
 8008610:	2001      	movs	r0, #1
 8008612:	f003 fa6d 	bl	800baf0 <acc_alg_biquad_q3_12_lowpass_coeffs>
 8008616:	4605      	mov	r5, r0
 8008618:	b188      	cbz	r0, 800863e <acc_element_depth_domain_low_pass_filter_init+0x6a>
 800861a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800861c:	e00b      	b.n	8008636 <acc_element_depth_domain_low_pass_filter_init+0x62>
 800861e:	eddf 7a17 	vldr	s15, [pc, #92]	; 800867c <acc_element_depth_domain_low_pass_filter_init+0xa8>
 8008622:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8008626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800862a:	dd19      	ble.n	8008660 <acc_element_depth_domain_low_pass_filter_init+0x8c>
 800862c:	4b14      	ldr	r3, [pc, #80]	; (8008680 <acc_element_depth_domain_low_pass_filter_init+0xac>)
 800862e:	63a3      	str	r3, [r4, #56]	; 0x38
 8008630:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8008634:	63e2      	str	r2, [r4, #60]	; 0x3c
 8008636:	2501      	movs	r5, #1
 8008638:	61f2      	str	r2, [r6, #28]
 800863a:	4628      	mov	r0, r5
 800863c:	bd70      	pop	{r4, r5, r6, pc}
 800863e:	4b11      	ldr	r3, [pc, #68]	; (8008684 <acc_element_depth_domain_low_pass_filter_init+0xb0>)
 8008640:	4a11      	ldr	r2, [pc, #68]	; (8008688 <acc_element_depth_domain_low_pass_filter_init+0xb4>)
 8008642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008644:	4911      	ldr	r1, [pc, #68]	; (800868c <acc_element_depth_domain_low_pass_filter_init+0xb8>)
 8008646:	4798      	blx	r3
 8008648:	4628      	mov	r0, r5
 800864a:	bd70      	pop	{r4, r5, r6, pc}
 800864c:	4b0d      	ldr	r3, [pc, #52]	; (8008684 <acc_element_depth_domain_low_pass_filter_init+0xb0>)
 800864e:	4a10      	ldr	r2, [pc, #64]	; (8008690 <acc_element_depth_domain_low_pass_filter_init+0xbc>)
 8008650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008652:	490e      	ldr	r1, [pc, #56]	; (800868c <acc_element_depth_domain_low_pass_filter_init+0xb8>)
 8008654:	2000      	movs	r0, #0
 8008656:	63a0      	str	r0, [r4, #56]	; 0x38
 8008658:	4605      	mov	r5, r0
 800865a:	4798      	blx	r3
 800865c:	4628      	mov	r0, r5
 800865e:	bd70      	pop	{r4, r5, r6, pc}
 8008660:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
 8008664:	e7cb      	b.n	80085fe <acc_element_depth_domain_low_pass_filter_init+0x2a>
 8008666:	bf00      	nop
 8008668:	08008541 	.word	0x08008541
 800866c:	0800856d 	.word	0x0800856d
 8008670:	08008555 	.word	0x08008555
 8008674:	3b843809 	.word	0x3b843809
 8008678:	0800855d 	.word	0x0800855d
 800867c:	3efdca08 	.word	0x3efdca08
 8008680:	0800853d 	.word	0x0800853d
 8008684:	200004c0 	.word	0x200004c0
 8008688:	0800f418 	.word	0x0800f418
 800868c:	0800f3f0 	.word	0x0800f3f0
 8008690:	0800f2c8 	.word	0x0800f2c8

08008694 <event>:
 8008694:	b510      	push	{r4, lr}
 8008696:	4604      	mov	r4, r0
 8008698:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800869a:	4798      	blx	r3
 800869c:	6820      	ldr	r0, [r4, #0]
 800869e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086a2:	6843      	ldr	r3, [r0, #4]
 80086a4:	4718      	bx	r3
 80086a6:	bf00      	nop

080086a8 <reset>:
 80086a8:	6800      	ldr	r0, [r0, #0]
 80086aa:	68c3      	ldr	r3, [r0, #12]
 80086ac:	4718      	bx	r3
 80086ae:	bf00      	nop

080086b0 <iq_mix_q3_12>:
 80086b0:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80086b2:	ed90 1a10 	vldr	s2, [r0, #64]	; 0x40
 80086b6:	edd0 0a0f 	vldr	s1, [r0, #60]	; 0x3c
 80086ba:	b538      	push	{r3, r4, r5, lr}
 80086bc:	6815      	ldr	r5, [r2, #0]
 80086be:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80086c0:	4604      	mov	r4, r0
 80086c2:	086d      	lsrs	r5, r5, #1
 80086c4:	ed93 0a00 	vldr	s0, [r3]
 80086c8:	462a      	mov	r2, r5
 80086ca:	e9d0 0104 	ldrd	r0, r1, [r0, #16]
 80086ce:	f003 fbc7 	bl	800be60 <acc_alg_iq_demodulation_q3_12_real>
 80086d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80086d4:	00ad      	lsls	r5, r5, #2
 80086d6:	601d      	str	r5, [r3, #0]
 80086d8:	bd38      	pop	{r3, r4, r5, pc}
 80086da:	bf00      	nop

080086dc <iq_mix_q3_12_complex>:
 80086dc:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80086de:	ed90 1a10 	vldr	s2, [r0, #64]	; 0x40
 80086e2:	edd0 0a0f 	vldr	s1, [r0, #60]	; 0x3c
 80086e6:	b538      	push	{r3, r4, r5, lr}
 80086e8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80086ea:	6815      	ldr	r5, [r2, #0]
 80086ec:	ed93 0a00 	vldr	s0, [r3]
 80086f0:	4604      	mov	r4, r0
 80086f2:	08a9      	lsrs	r1, r5, #2
 80086f4:	6900      	ldr	r0, [r0, #16]
 80086f6:	f003 fc15 	bl	800bf24 <acc_alg_iq_demodulation_q3_12_complex>
 80086fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80086fc:	f025 0503 	bic.w	r5, r5, #3
 8008700:	601d      	str	r5, [r3, #0]
 8008702:	bd38      	pop	{r3, r4, r5, pc}

08008704 <validate>:
 8008704:	4a21      	ldr	r2, [pc, #132]	; (800878c <validate+0x88>)
 8008706:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008708:	4293      	cmp	r3, r2
 800870a:	b510      	push	{r4, lr}
 800870c:	4604      	mov	r4, r0
 800870e:	d023      	beq.n	8008758 <validate+0x54>
 8008710:	4a1f      	ldr	r2, [pc, #124]	; (8008790 <validate+0x8c>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d007      	beq.n	8008726 <validate+0x22>
 8008716:	4b1f      	ldr	r3, [pc, #124]	; (8008794 <validate+0x90>)
 8008718:	4a1f      	ldr	r2, [pc, #124]	; (8008798 <validate+0x94>)
 800871a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800871c:	491f      	ldr	r1, [pc, #124]	; (800879c <validate+0x98>)
 800871e:	2000      	movs	r0, #0
 8008720:	4798      	blx	r3
 8008722:	2000      	movs	r0, #0
 8008724:	bd10      	pop	{r4, pc}
 8008726:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 800872a:	429a      	cmp	r2, r3
 800872c:	d027      	beq.n	800877e <validate+0x7a>
 800872e:	69a3      	ldr	r3, [r4, #24]
 8008730:	b113      	cbz	r3, 8008738 <validate+0x34>
 8008732:	f7fc fffd 	bl	8005730 <acc_rss_integration_log_level>
 8008736:	b9d8      	cbnz	r0, 8008770 <validate+0x6c>
 8008738:	69e3      	ldr	r3, [r4, #28]
 800873a:	b143      	cbz	r3, 800874e <validate+0x4a>
 800873c:	f7fc fff8 	bl	8005730 <acc_rss_integration_log_level>
 8008740:	b128      	cbz	r0, 800874e <validate+0x4a>
 8008742:	4b14      	ldr	r3, [pc, #80]	; (8008794 <validate+0x90>)
 8008744:	4a16      	ldr	r2, [pc, #88]	; (80087a0 <validate+0x9c>)
 8008746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008748:	4914      	ldr	r1, [pc, #80]	; (800879c <validate+0x98>)
 800874a:	2001      	movs	r0, #1
 800874c:	4798      	blx	r3
 800874e:	6820      	ldr	r0, [r4, #0]
 8008750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008754:	6883      	ldr	r3, [r0, #8]
 8008756:	4718      	bx	r3
 8008758:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 800875c:	429a      	cmp	r2, r3
 800875e:	d0e6      	beq.n	800872e <validate+0x2a>
 8008760:	4b0c      	ldr	r3, [pc, #48]	; (8008794 <validate+0x90>)
 8008762:	4a10      	ldr	r2, [pc, #64]	; (80087a4 <validate+0xa0>)
 8008764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008766:	490d      	ldr	r1, [pc, #52]	; (800879c <validate+0x98>)
 8008768:	2000      	movs	r0, #0
 800876a:	4798      	blx	r3
 800876c:	2000      	movs	r0, #0
 800876e:	bd10      	pop	{r4, pc}
 8008770:	4b08      	ldr	r3, [pc, #32]	; (8008794 <validate+0x90>)
 8008772:	4a0d      	ldr	r2, [pc, #52]	; (80087a8 <validate+0xa4>)
 8008774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008776:	4909      	ldr	r1, [pc, #36]	; (800879c <validate+0x98>)
 8008778:	2001      	movs	r0, #1
 800877a:	4798      	blx	r3
 800877c:	e7dc      	b.n	8008738 <validate+0x34>
 800877e:	4b05      	ldr	r3, [pc, #20]	; (8008794 <validate+0x90>)
 8008780:	4a0a      	ldr	r2, [pc, #40]	; (80087ac <validate+0xa8>)
 8008782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008784:	4905      	ldr	r1, [pc, #20]	; (800879c <validate+0x98>)
 8008786:	2000      	movs	r0, #0
 8008788:	4798      	blx	r3
 800878a:	e7ca      	b.n	8008722 <validate+0x1e>
 800878c:	080086dd 	.word	0x080086dd
 8008790:	080086b1 	.word	0x080086b1
 8008794:	200004c0 	.word	0x200004c0
 8008798:	0800f490 	.word	0x0800f490
 800879c:	0800f444 	.word	0x0800f444
 80087a0:	0800f2b8 	.word	0x0800f2b8
 80087a4:	0800f3c8 	.word	0x0800f3c8
 80087a8:	0800f288 	.word	0x0800f288
 80087ac:	0800f458 	.word	0x0800f458

080087b0 <acc_element_iq_mixer_init>:
 80087b0:	4b10      	ldr	r3, [pc, #64]	; (80087f4 <acc_element_iq_mixer_init+0x44>)
 80087b2:	4a11      	ldr	r2, [pc, #68]	; (80087f8 <acc_element_iq_mixer_init+0x48>)
 80087b4:	6043      	str	r3, [r0, #4]
 80087b6:	4b11      	ldr	r3, [pc, #68]	; (80087fc <acc_element_iq_mixer_init+0x4c>)
 80087b8:	ed80 0a0f 	vstr	s0, [r0, #60]	; 0x3c
 80087bc:	2904      	cmp	r1, #4
 80087be:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80087c2:	edc0 0a10 	vstr	s1, [r0, #64]	; 0x40
 80087c6:	d00c      	beq.n	80087e2 <acc_element_iq_mixer_init+0x32>
 80087c8:	2907      	cmp	r1, #7
 80087ca:	d00e      	beq.n	80087ea <acc_element_iq_mixer_init+0x3a>
 80087cc:	b510      	push	{r4, lr}
 80087ce:	4b0c      	ldr	r3, [pc, #48]	; (8008800 <acc_element_iq_mixer_init+0x50>)
 80087d0:	4a0c      	ldr	r2, [pc, #48]	; (8008804 <acc_element_iq_mixer_init+0x54>)
 80087d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087d4:	490c      	ldr	r1, [pc, #48]	; (8008808 <acc_element_iq_mixer_init+0x58>)
 80087d6:	2400      	movs	r4, #0
 80087d8:	6384      	str	r4, [r0, #56]	; 0x38
 80087da:	4620      	mov	r0, r4
 80087dc:	4798      	blx	r3
 80087de:	4620      	mov	r0, r4
 80087e0:	bd10      	pop	{r4, pc}
 80087e2:	4b0a      	ldr	r3, [pc, #40]	; (800880c <acc_element_iq_mixer_init+0x5c>)
 80087e4:	6383      	str	r3, [r0, #56]	; 0x38
 80087e6:	2001      	movs	r0, #1
 80087e8:	4770      	bx	lr
 80087ea:	4b09      	ldr	r3, [pc, #36]	; (8008810 <acc_element_iq_mixer_init+0x60>)
 80087ec:	6383      	str	r3, [r0, #56]	; 0x38
 80087ee:	2001      	movs	r0, #1
 80087f0:	4770      	bx	lr
 80087f2:	bf00      	nop
 80087f4:	08008695 	.word	0x08008695
 80087f8:	08008705 	.word	0x08008705
 80087fc:	080086a9 	.word	0x080086a9
 8008800:	200004c0 	.word	0x200004c0
 8008804:	0800f2c8 	.word	0x0800f2c8
 8008808:	0800f444 	.word	0x0800f444
 800880c:	080086b1 	.word	0x080086b1
 8008810:	080086dd 	.word	0x080086dd

08008814 <noise_level_normalization_u16>:
 8008814:	0849      	lsrs	r1, r1, #1
 8008816:	d01e      	beq.n	8008856 <noise_level_normalization_u16+0x42>
 8008818:	b470      	push	{r4, r5, r6}
 800881a:	eb00 0441 	add.w	r4, r0, r1, lsl #1
 800881e:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8008822:	2600      	movs	r6, #0
 8008824:	b92a      	cbnz	r2, 8008832 <noise_level_normalization_u16+0x1e>
 8008826:	8005      	strh	r5, [r0, #0]
 8008828:	3002      	adds	r0, #2
 800882a:	42a0      	cmp	r0, r4
 800882c:	d1fa      	bne.n	8008824 <noise_level_normalization_u16+0x10>
 800882e:	bc70      	pop	{r4, r5, r6}
 8008830:	4770      	bx	lr
 8008832:	8801      	ldrh	r1, [r0, #0]
 8008834:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
 8008838:	fb03 f101 	mul.w	r1, r3, r1
 800883c:	fb91 f1f2 	sdiv	r1, r1, r2
 8008840:	f511 4100 	adds.w	r1, r1, #32768	; 0x8000
 8008844:	d405      	bmi.n	8008852 <noise_level_normalization_u16+0x3e>
 8008846:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800884a:	bfa8      	it	ge
 800884c:	4629      	movge	r1, r5
 800884e:	8001      	strh	r1, [r0, #0]
 8008850:	e7ea      	b.n	8008828 <noise_level_normalization_u16+0x14>
 8008852:	8006      	strh	r6, [r0, #0]
 8008854:	e7e8      	b.n	8008828 <noise_level_normalization_u16+0x14>
 8008856:	4770      	bx	lr

08008858 <event>:
 8008858:	b570      	push	{r4, r5, r6, lr}
 800885a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800885c:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 800885e:	6819      	ldr	r1, [r3, #0]
 8008860:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 8008862:	8f43      	ldrh	r3, [r0, #58]	; 0x3a
 8008864:	4604      	mov	r4, r0
 8008866:	6900      	ldr	r0, [r0, #16]
 8008868:	47a8      	blx	r5
 800886a:	6820      	ldr	r0, [r4, #0]
 800886c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008870:	6843      	ldr	r3, [r0, #4]
 8008872:	4718      	bx	r3

08008874 <reset>:
 8008874:	6800      	ldr	r0, [r0, #0]
 8008876:	68c3      	ldr	r3, [r0, #12]
 8008878:	4718      	bx	r3
 800887a:	bf00      	nop

0800887c <validate>:
 800887c:	6983      	ldr	r3, [r0, #24]
 800887e:	b510      	push	{r4, lr}
 8008880:	4604      	mov	r4, r0
 8008882:	b113      	cbz	r3, 800888a <validate+0xe>
 8008884:	f7fc ff54 	bl	8005730 <acc_rss_integration_log_level>
 8008888:	b978      	cbnz	r0, 80088aa <validate+0x2e>
 800888a:	69e3      	ldr	r3, [r4, #28]
 800888c:	b143      	cbz	r3, 80088a0 <validate+0x24>
 800888e:	f7fc ff4f 	bl	8005730 <acc_rss_integration_log_level>
 8008892:	b128      	cbz	r0, 80088a0 <validate+0x24>
 8008894:	4b08      	ldr	r3, [pc, #32]	; (80088b8 <validate+0x3c>)
 8008896:	4a09      	ldr	r2, [pc, #36]	; (80088bc <validate+0x40>)
 8008898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800889a:	4909      	ldr	r1, [pc, #36]	; (80088c0 <validate+0x44>)
 800889c:	2001      	movs	r0, #1
 800889e:	4798      	blx	r3
 80088a0:	6820      	ldr	r0, [r4, #0]
 80088a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088a6:	6883      	ldr	r3, [r0, #8]
 80088a8:	4718      	bx	r3
 80088aa:	4b03      	ldr	r3, [pc, #12]	; (80088b8 <validate+0x3c>)
 80088ac:	4a05      	ldr	r2, [pc, #20]	; (80088c4 <validate+0x48>)
 80088ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088b0:	4903      	ldr	r1, [pc, #12]	; (80088c0 <validate+0x44>)
 80088b2:	2001      	movs	r0, #1
 80088b4:	4798      	blx	r3
 80088b6:	e7e8      	b.n	800888a <validate+0xe>
 80088b8:	200004c0 	.word	0x200004c0
 80088bc:	0800f2b8 	.word	0x0800f2b8
 80088c0:	0800f4a8 	.word	0x0800f4a8
 80088c4:	0800f288 	.word	0x0800f288

080088c8 <acc_element_noise_level_normalization_init>:
 80088c8:	2902      	cmp	r1, #2
 80088ca:	b510      	push	{r4, lr}
 80088cc:	8702      	strh	r2, [r0, #56]	; 0x38
 80088ce:	8743      	strh	r3, [r0, #58]	; 0x3a
 80088d0:	d001      	beq.n	80088d6 <acc_element_noise_level_normalization_init+0xe>
 80088d2:	2905      	cmp	r1, #5
 80088d4:	d109      	bne.n	80088ea <acc_element_noise_level_normalization_init+0x22>
 80088d6:	490a      	ldr	r1, [pc, #40]	; (8008900 <acc_element_noise_level_normalization_init+0x38>)
 80088d8:	4a0a      	ldr	r2, [pc, #40]	; (8008904 <acc_element_noise_level_normalization_init+0x3c>)
 80088da:	4c0b      	ldr	r4, [pc, #44]	; (8008908 <acc_element_noise_level_normalization_init+0x40>)
 80088dc:	4b0b      	ldr	r3, [pc, #44]	; (800890c <acc_element_noise_level_normalization_init+0x44>)
 80088de:	63c4      	str	r4, [r0, #60]	; 0x3c
 80088e0:	e9c0 1201 	strd	r1, r2, [r0, #4]
 80088e4:	60c3      	str	r3, [r0, #12]
 80088e6:	2001      	movs	r0, #1
 80088e8:	bd10      	pop	{r4, pc}
 80088ea:	4b09      	ldr	r3, [pc, #36]	; (8008910 <acc_element_noise_level_normalization_init+0x48>)
 80088ec:	4a09      	ldr	r2, [pc, #36]	; (8008914 <acc_element_noise_level_normalization_init+0x4c>)
 80088ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088f0:	4909      	ldr	r1, [pc, #36]	; (8008918 <acc_element_noise_level_normalization_init+0x50>)
 80088f2:	2400      	movs	r4, #0
 80088f4:	63c4      	str	r4, [r0, #60]	; 0x3c
 80088f6:	4620      	mov	r0, r4
 80088f8:	4798      	blx	r3
 80088fa:	4620      	mov	r0, r4
 80088fc:	bd10      	pop	{r4, pc}
 80088fe:	bf00      	nop
 8008900:	08008859 	.word	0x08008859
 8008904:	0800887d 	.word	0x0800887d
 8008908:	08008815 	.word	0x08008815
 800890c:	08008875 	.word	0x08008875
 8008910:	200004c0 	.word	0x200004c0
 8008914:	0800f2c8 	.word	0x0800f2c8
 8008918:	0800f4a8 	.word	0x0800f4a8

0800891c <event>:
 800891c:	b510      	push	{r4, lr}
 800891e:	4604      	mov	r4, r0
 8008920:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008922:	4798      	blx	r3
 8008924:	6820      	ldr	r0, [r4, #0]
 8008926:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800892a:	6843      	ldr	r3, [r0, #4]
 800892c:	4718      	bx	r3
 800892e:	bf00      	nop

08008930 <reset>:
 8008930:	6800      	ldr	r0, [r0, #0]
 8008932:	68c3      	ldr	r3, [r0, #12]
 8008934:	4718      	bx	r3
 8008936:	bf00      	nop

08008938 <do_phase_compensation_q3_12>:
 8008938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800893c:	2a7c      	cmp	r2, #124	; 0x7c
 800893e:	b0fd      	sub	sp, #500	; 0x1f4
 8008940:	d82a      	bhi.n	8008998 <do_phase_compensation_q3_12+0x60>
 8008942:	4689      	mov	r9, r1
 8008944:	b329      	cbz	r1, 8008992 <do_phase_compensation_q3_12+0x5a>
 8008946:	469a      	mov	sl, r3
 8008948:	ab7c      	add	r3, sp, #496	; 0x1f0
 800894a:	2600      	movs	r6, #0
 800894c:	eb03 0b82 	add.w	fp, r3, r2, lsl #2
 8008950:	4615      	mov	r5, r2
 8008952:	4604      	mov	r4, r0
 8008954:	46b0      	mov	r8, r6
 8008956:	f5ab 7bfa 	sub.w	fp, fp, #500	; 0x1f4
 800895a:	0097      	lsls	r7, r2, #2
 800895c:	4621      	mov	r1, r4
 800895e:	463a      	mov	r2, r7
 8008960:	4668      	mov	r0, sp
 8008962:	f004 fb17 	bl	800cf94 <memcpy>
 8008966:	462a      	mov	r2, r5
 8008968:	4651      	mov	r1, sl
 800896a:	4668      	mov	r0, sp
 800896c:	f8cd 8000 	str.w	r8, [sp]
 8008970:	f8cb 8000 	str.w	r8, [fp]
 8008974:	f003 fb48 	bl	800c008 <acc_alg_phase_estimation_q3_12>
 8008978:	4629      	mov	r1, r5
 800897a:	4668      	mov	r0, sp
 800897c:	f003 ff4c 	bl	800c818 <acc_alg_basic_math_q3_12_complex_conj_normalize>
 8008980:	3601      	adds	r6, #1
 8008982:	4620      	mov	r0, r4
 8008984:	462a      	mov	r2, r5
 8008986:	4669      	mov	r1, sp
 8008988:	f003 feee 	bl	800c768 <acc_alg_basic_math_q3_12_complex_mul>
 800898c:	45b1      	cmp	r9, r6
 800898e:	443c      	add	r4, r7
 8008990:	d1e4      	bne.n	800895c <do_phase_compensation_q3_12+0x24>
 8008992:	b07d      	add	sp, #500	; 0x1f4
 8008994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008998:	4801      	ldr	r0, [pc, #4]	; (80089a0 <do_phase_compensation_q3_12+0x68>)
 800899a:	217d      	movs	r1, #125	; 0x7d
 800899c:	f7ff f8ec 	bl	8007b78 <acc_assert_fail>
 80089a0:	0800f4cc 	.word	0x0800f4cc

080089a4 <phase_compensate_q3_12_complex>:
 80089a4:	e9d0 120f 	ldrd	r1, r2, [r0, #60]	; 0x3c
 80089a8:	f9b0 3044 	ldrsh.w	r3, [r0, #68]	; 0x44
 80089ac:	6900      	ldr	r0, [r0, #16]
 80089ae:	f7ff bfc3 	b.w	8008938 <do_phase_compensation_q3_12>
 80089b2:	bf00      	nop

080089b4 <validate>:
 80089b4:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 80089b8:	429a      	cmp	r2, r3
 80089ba:	b510      	push	{r4, lr}
 80089bc:	d007      	beq.n	80089ce <validate+0x1a>
 80089be:	4b12      	ldr	r3, [pc, #72]	; (8008a08 <validate+0x54>)
 80089c0:	4a12      	ldr	r2, [pc, #72]	; (8008a0c <validate+0x58>)
 80089c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089c4:	4912      	ldr	r1, [pc, #72]	; (8008a10 <validate+0x5c>)
 80089c6:	2000      	movs	r0, #0
 80089c8:	4798      	blx	r3
 80089ca:	2000      	movs	r0, #0
 80089cc:	bd10      	pop	{r4, pc}
 80089ce:	6983      	ldr	r3, [r0, #24]
 80089d0:	4604      	mov	r4, r0
 80089d2:	b113      	cbz	r3, 80089da <validate+0x26>
 80089d4:	f7fc feac 	bl	8005730 <acc_rss_integration_log_level>
 80089d8:	b978      	cbnz	r0, 80089fa <validate+0x46>
 80089da:	69e3      	ldr	r3, [r4, #28]
 80089dc:	b143      	cbz	r3, 80089f0 <validate+0x3c>
 80089de:	f7fc fea7 	bl	8005730 <acc_rss_integration_log_level>
 80089e2:	b128      	cbz	r0, 80089f0 <validate+0x3c>
 80089e4:	4b08      	ldr	r3, [pc, #32]	; (8008a08 <validate+0x54>)
 80089e6:	4a0b      	ldr	r2, [pc, #44]	; (8008a14 <validate+0x60>)
 80089e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089ea:	4909      	ldr	r1, [pc, #36]	; (8008a10 <validate+0x5c>)
 80089ec:	2001      	movs	r0, #1
 80089ee:	4798      	blx	r3
 80089f0:	6820      	ldr	r0, [r4, #0]
 80089f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089f6:	6883      	ldr	r3, [r0, #8]
 80089f8:	4718      	bx	r3
 80089fa:	4b03      	ldr	r3, [pc, #12]	; (8008a08 <validate+0x54>)
 80089fc:	4a06      	ldr	r2, [pc, #24]	; (8008a18 <validate+0x64>)
 80089fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a00:	4903      	ldr	r1, [pc, #12]	; (8008a10 <validate+0x5c>)
 8008a02:	2001      	movs	r0, #1
 8008a04:	4798      	blx	r3
 8008a06:	e7e8      	b.n	80089da <validate+0x26>
 8008a08:	200004c0 	.word	0x200004c0
 8008a0c:	0800f3c8 	.word	0x0800f3c8
 8008a10:	0800f4cc 	.word	0x0800f4cc
 8008a14:	0800f2b8 	.word	0x0800f2b8
 8008a18:	0800f288 	.word	0x0800f288

08008a1c <acc_element_phase_compensation_init>:
 8008a1c:	eddf 6a17 	vldr	s13, [pc, #92]	; 8008a7c <acc_element_phase_compensation_init+0x60>
 8008a20:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a28:	ee20 0a26 	vmul.f32	s0, s0, s13
 8008a2c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8008a30:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8008a34:	bfb8      	it	lt
 8008a36:	eef0 7a47 	vmovlt.f32	s15, s14
 8008a3a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008a3e:	b538      	push	{r3, r4, r5, lr}
 8008a40:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008a44:	6403      	str	r3, [r0, #64]	; 0x40
 8008a46:	4b0e      	ldr	r3, [pc, #56]	; (8008a80 <acc_element_phase_compensation_init+0x64>)
 8008a48:	4d0e      	ldr	r5, [pc, #56]	; (8008a84 <acc_element_phase_compensation_init+0x68>)
 8008a4a:	4c0f      	ldr	r4, [pc, #60]	; (8008a88 <acc_element_phase_compensation_init+0x6c>)
 8008a4c:	60c3      	str	r3, [r0, #12]
 8008a4e:	ee10 3a10 	vmov	r3, s0
 8008a52:	2907      	cmp	r1, #7
 8008a54:	e9c0 5401 	strd	r5, r4, [r0, #4]
 8008a58:	63c2      	str	r2, [r0, #60]	; 0x3c
 8008a5a:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 8008a5e:	d103      	bne.n	8008a68 <acc_element_phase_compensation_init+0x4c>
 8008a60:	4b0a      	ldr	r3, [pc, #40]	; (8008a8c <acc_element_phase_compensation_init+0x70>)
 8008a62:	6383      	str	r3, [r0, #56]	; 0x38
 8008a64:	2001      	movs	r0, #1
 8008a66:	bd38      	pop	{r3, r4, r5, pc}
 8008a68:	4b09      	ldr	r3, [pc, #36]	; (8008a90 <acc_element_phase_compensation_init+0x74>)
 8008a6a:	4a0a      	ldr	r2, [pc, #40]	; (8008a94 <acc_element_phase_compensation_init+0x78>)
 8008a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a6e:	490a      	ldr	r1, [pc, #40]	; (8008a98 <acc_element_phase_compensation_init+0x7c>)
 8008a70:	2400      	movs	r4, #0
 8008a72:	6384      	str	r4, [r0, #56]	; 0x38
 8008a74:	4620      	mov	r0, r4
 8008a76:	4798      	blx	r3
 8008a78:	4620      	mov	r0, r4
 8008a7a:	bd38      	pop	{r3, r4, r5, pc}
 8008a7c:	45800000 	.word	0x45800000
 8008a80:	08008931 	.word	0x08008931
 8008a84:	0800891d 	.word	0x0800891d
 8008a88:	080089b5 	.word	0x080089b5
 8008a8c:	080089a5 	.word	0x080089a5
 8008a90:	200004c0 	.word	0x200004c0
 8008a94:	0800f2c8 	.word	0x0800f2c8
 8008a98:	0800f4cc 	.word	0x0800f4cc

08008a9c <reset>:
 8008a9c:	69c3      	ldr	r3, [r0, #28]
 8008a9e:	6800      	ldr	r0, [r0, #0]
 8008aa0:	2201      	movs	r2, #1
 8008aa2:	701a      	strb	r2, [r3, #0]
 8008aa4:	68c3      	ldr	r3, [r0, #12]
 8008aa6:	4718      	bx	r3

08008aa8 <event>:
 8008aa8:	b570      	push	{r4, r5, r6, lr}
 8008aaa:	69c5      	ldr	r5, [r0, #28]
 8008aac:	462b      	mov	r3, r5
 8008aae:	4604      	mov	r4, r0
 8008ab0:	f813 2b04 	ldrb.w	r2, [r3], #4
 8008ab4:	b962      	cbnz	r2, 8008ad0 <event+0x28>
 8008ab6:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8008ab8:	6b85      	ldr	r5, [r0, #56]	; 0x38
 8008aba:	ed90 0a0f 	vldr	s0, [r0, #60]	; 0x3c
 8008abe:	6812      	ldr	r2, [r2, #0]
 8008ac0:	6900      	ldr	r0, [r0, #16]
 8008ac2:	4619      	mov	r1, r3
 8008ac4:	47a8      	blx	r5
 8008ac6:	6820      	ldr	r0, [r4, #0]
 8008ac8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008acc:	6843      	ldr	r3, [r0, #4]
 8008ace:	4718      	bx	r3
 8008ad0:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8008ad2:	6901      	ldr	r1, [r0, #16]
 8008ad4:	6812      	ldr	r2, [r2, #0]
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f004 fa5c 	bl	800cf94 <memcpy>
 8008adc:	6820      	ldr	r0, [r4, #0]
 8008ade:	2300      	movs	r3, #0
 8008ae0:	702b      	strb	r3, [r5, #0]
 8008ae2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008ae6:	6843      	ldr	r3, [r0, #4]
 8008ae8:	4718      	bx	r3
 8008aea:	bf00      	nop

08008aec <filter_q3_12_complex>:
 8008aec:	b530      	push	{r4, r5, lr}
 8008aee:	ed2d 8b02 	vpush	{d8}
 8008af2:	b083      	sub	sp, #12
 8008af4:	4604      	mov	r4, r0
 8008af6:	2007      	movs	r0, #7
 8008af8:	eeb0 8a40 	vmov.f32	s16, s0
 8008afc:	4615      	mov	r5, r2
 8008afe:	9101      	str	r1, [sp, #4]
 8008b00:	f7ff f852 	bl	8007ba8 <acc_element_sizeof>
 8008b04:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8008b48 <filter_q3_12_complex+0x5c>
 8008b08:	9901      	ldr	r1, [sp, #4]
 8008b0a:	fbb5 f3f0 	udiv	r3, r5, r0
 8008b0e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8008b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b16:	ee28 8a07 	vmul.f32	s16, s16, s14
 8008b1a:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8008b1e:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8008b22:	bfb8      	it	lt
 8008b24:	eeb0 0a67 	vmovlt.f32	s0, s15
 8008b28:	ee38 8a00 	vadd.f32	s16, s16, s0
 8008b2c:	4620      	mov	r0, r4
 8008b2e:	eebd 8ac8 	vcvt.s32.f32	s16, s16
 8008b32:	ee18 2a10 	vmov	r2, s16
 8008b36:	b212      	sxth	r2, r2
 8008b38:	b003      	add	sp, #12
 8008b3a:	ecbd 8b02 	vpop	{d8}
 8008b3e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008b42:	f002 bfab 	b.w	800ba9c <acc_alg_basic_exponential_smoothing_q3_12_complex>
 8008b46:	bf00      	nop
 8008b48:	45800000 	.word	0x45800000

08008b4c <validate>:
 8008b4c:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 8008b50:	429a      	cmp	r2, r3
 8008b52:	b510      	push	{r4, lr}
 8008b54:	d015      	beq.n	8008b82 <validate+0x36>
 8008b56:	6984      	ldr	r4, [r0, #24]
 8008b58:	b13c      	cbz	r4, 8008b6a <validate+0x1e>
 8008b5a:	4b10      	ldr	r3, [pc, #64]	; (8008b9c <validate+0x50>)
 8008b5c:	4a10      	ldr	r2, [pc, #64]	; (8008ba0 <validate+0x54>)
 8008b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b60:	4910      	ldr	r1, [pc, #64]	; (8008ba4 <validate+0x58>)
 8008b62:	2000      	movs	r0, #0
 8008b64:	4798      	blx	r3
 8008b66:	2000      	movs	r0, #0
 8008b68:	bd10      	pop	{r4, pc}
 8008b6a:	69c2      	ldr	r2, [r0, #28]
 8008b6c:	3204      	adds	r2, #4
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d00f      	beq.n	8008b92 <validate+0x46>
 8008b72:	4b0a      	ldr	r3, [pc, #40]	; (8008b9c <validate+0x50>)
 8008b74:	4a0c      	ldr	r2, [pc, #48]	; (8008ba8 <validate+0x5c>)
 8008b76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b78:	490a      	ldr	r1, [pc, #40]	; (8008ba4 <validate+0x58>)
 8008b7a:	4620      	mov	r0, r4
 8008b7c:	4798      	blx	r3
 8008b7e:	2000      	movs	r0, #0
 8008b80:	bd10      	pop	{r4, pc}
 8008b82:	4b06      	ldr	r3, [pc, #24]	; (8008b9c <validate+0x50>)
 8008b84:	4a09      	ldr	r2, [pc, #36]	; (8008bac <validate+0x60>)
 8008b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b88:	4906      	ldr	r1, [pc, #24]	; (8008ba4 <validate+0x58>)
 8008b8a:	2000      	movs	r0, #0
 8008b8c:	4798      	blx	r3
 8008b8e:	2000      	movs	r0, #0
 8008b90:	bd10      	pop	{r4, pc}
 8008b92:	6800      	ldr	r0, [r0, #0]
 8008b94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b98:	6883      	ldr	r3, [r0, #8]
 8008b9a:	4718      	bx	r3
 8008b9c:	200004c0 	.word	0x200004c0
 8008ba0:	0800f538 	.word	0x0800f538
 8008ba4:	0800f514 	.word	0x0800f514
 8008ba8:	0800f558 	.word	0x0800f558
 8008bac:	0800f4e8 	.word	0x0800f4e8

08008bb0 <acc_element_time_domain_low_pass_filter_init>:
 8008bb0:	b510      	push	{r4, lr}
 8008bb2:	4a0c      	ldr	r2, [pc, #48]	; (8008be4 <acc_element_time_domain_low_pass_filter_init+0x34>)
 8008bb4:	4c0c      	ldr	r4, [pc, #48]	; (8008be8 <acc_element_time_domain_low_pass_filter_init+0x38>)
 8008bb6:	4b0d      	ldr	r3, [pc, #52]	; (8008bec <acc_element_time_domain_low_pass_filter_init+0x3c>)
 8008bb8:	60c3      	str	r3, [r0, #12]
 8008bba:	2907      	cmp	r1, #7
 8008bbc:	e9c0 4201 	strd	r4, r2, [r0, #4]
 8008bc0:	ed80 0a0f 	vstr	s0, [r0, #60]	; 0x3c
 8008bc4:	d103      	bne.n	8008bce <acc_element_time_domain_low_pass_filter_init+0x1e>
 8008bc6:	4b0a      	ldr	r3, [pc, #40]	; (8008bf0 <acc_element_time_domain_low_pass_filter_init+0x40>)
 8008bc8:	6383      	str	r3, [r0, #56]	; 0x38
 8008bca:	2001      	movs	r0, #1
 8008bcc:	bd10      	pop	{r4, pc}
 8008bce:	4b09      	ldr	r3, [pc, #36]	; (8008bf4 <acc_element_time_domain_low_pass_filter_init+0x44>)
 8008bd0:	4a09      	ldr	r2, [pc, #36]	; (8008bf8 <acc_element_time_domain_low_pass_filter_init+0x48>)
 8008bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bd4:	4909      	ldr	r1, [pc, #36]	; (8008bfc <acc_element_time_domain_low_pass_filter_init+0x4c>)
 8008bd6:	2400      	movs	r4, #0
 8008bd8:	6384      	str	r4, [r0, #56]	; 0x38
 8008bda:	4620      	mov	r0, r4
 8008bdc:	4798      	blx	r3
 8008bde:	4620      	mov	r0, r4
 8008be0:	bd10      	pop	{r4, pc}
 8008be2:	bf00      	nop
 8008be4:	08008b4d 	.word	0x08008b4d
 8008be8:	08008aa9 	.word	0x08008aa9
 8008bec:	08008a9d 	.word	0x08008a9d
 8008bf0:	08008aed 	.word	0x08008aed
 8008bf4:	200004c0 	.word	0x200004c0
 8008bf8:	0800f2c8 	.word	0x0800f2c8
 8008bfc:	0800f514 	.word	0x0800f514

08008c00 <acc_element_source_adc_init_radar_engine>:
 8008c00:	b538      	push	{r3, r4, r5, lr}
 8008c02:	9d04      	ldr	r5, [sp, #16]
 8008c04:	4604      	mov	r4, r0
 8008c06:	4608      	mov	r0, r1
 8008c08:	63e1      	str	r1, [r4, #60]	; 0x3c
 8008c0a:	4611      	mov	r1, r2
 8008c0c:	461a      	mov	r2, r3
 8008c0e:	462b      	mov	r3, r5
 8008c10:	f7fe fa56 	bl	80070c0 <acc_sensor_manager_prepare_radar_engine>
 8008c14:	896b      	ldrh	r3, [r5, #10]
 8008c16:	8723      	strh	r3, [r4, #56]	; 0x38
 8008c18:	bd38      	pop	{r3, r4, r5, pc}
 8008c1a:	bf00      	nop

08008c1c <acc_element_source_adc_init>:
 8008c1c:	b510      	push	{r4, lr}
 8008c1e:	b084      	sub	sp, #16
 8008c20:	4604      	mov	r4, r0
 8008c22:	4608      	mov	r0, r1
 8008c24:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8008c28:	9101      	str	r1, [sp, #4]
 8008c2a:	f7fc fbbd 	bl	80053a8 <acc_base_configuration_print>
 8008c2e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008c32:	9901      	ldr	r1, [sp, #4]
 8008c34:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8008c36:	b004      	add	sp, #16
 8008c38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c3c:	f7fe ba8c 	b.w	8007158 <acc_sensor_manager_prepare_measurement>

08008c40 <acc_element_source_adc_release>:
 8008c40:	b110      	cbz	r0, 8008c48 <acc_element_source_adc_release+0x8>
 8008c42:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8008c44:	f7fe bb4e 	b.w	80072e4 <acc_sensor_manager_release_measurement>
 8008c48:	4770      	bx	lr
 8008c4a:	bf00      	nop

08008c4c <acc_element_source_adc_reset>:
 8008c4c:	6800      	ldr	r0, [r0, #0]
 8008c4e:	68c3      	ldr	r3, [r0, #12]
 8008c50:	4718      	bx	r3
 8008c52:	bf00      	nop

08008c54 <acc_element_source_adc_validate>:
 8008c54:	6800      	ldr	r0, [r0, #0]
 8008c56:	6883      	ldr	r3, [r0, #8]
 8008c58:	4718      	bx	r3
 8008c5a:	bf00      	nop

08008c5c <acc_element_source_adc_produce>:
 8008c5c:	b530      	push	{r4, r5, lr}
 8008c5e:	4604      	mov	r4, r0
 8008c60:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8008c62:	b083      	sub	sp, #12
 8008c64:	2800      	cmp	r0, #0
 8008c66:	d02f      	beq.n	8008cc8 <acc_element_source_adc_produce+0x6c>
 8008c68:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008c6a:	4a19      	ldr	r2, [pc, #100]	; (8008cd0 <acc_element_source_adc_produce+0x74>)
 8008c6c:	6a25      	ldr	r5, [r4, #32]
 8008c6e:	601a      	str	r2, [r3, #0]
 8008c70:	f7fe fb4c 	bl	800730c <acc_sensor_manager_get_sensor_id>
 8008c74:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 8008c76:	6028      	str	r0, [r5, #0]
 8008c78:	6961      	ldr	r1, [r4, #20]
 8008c7a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8008c7c:	ab01      	add	r3, sp, #4
 8008c7e:	f7fe f991 	bl	8006fa4 <acc_sensor_manager_acquire_adc_data>
 8008c82:	4605      	mov	r5, r0
 8008c84:	b1c0      	cbz	r0, 8008cb8 <acc_element_source_adc_produce+0x5c>
 8008c86:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 8008c8a:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8008c8c:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8008c90:	005b      	lsls	r3, r3, #1
 8008c92:	6003      	str	r3, [r0, #0]
 8008c94:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008c96:	7011      	strb	r1, [r2, #0]
 8008c98:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008c9c:	701a      	strb	r2, [r3, #0]
 8008c9e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008ca2:	b90b      	cbnz	r3, 8008ca8 <acc_element_source_adc_produce+0x4c>
 8008ca4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008ca8:	6820      	ldr	r0, [r4, #0]
 8008caa:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8008cac:	7013      	strb	r3, [r2, #0]
 8008cae:	6843      	ldr	r3, [r0, #4]
 8008cb0:	4798      	blx	r3
 8008cb2:	4628      	mov	r0, r5
 8008cb4:	b003      	add	sp, #12
 8008cb6:	bd30      	pop	{r4, r5, pc}
 8008cb8:	4b06      	ldr	r3, [pc, #24]	; (8008cd4 <acc_element_source_adc_produce+0x78>)
 8008cba:	4a07      	ldr	r2, [pc, #28]	; (8008cd8 <acc_element_source_adc_produce+0x7c>)
 8008cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cbe:	4907      	ldr	r1, [pc, #28]	; (8008cdc <acc_element_source_adc_produce+0x80>)
 8008cc0:	4798      	blx	r3
 8008cc2:	4628      	mov	r0, r5
 8008cc4:	b003      	add	sp, #12
 8008cc6:	bd30      	pop	{r4, r5, pc}
 8008cc8:	4605      	mov	r5, r0
 8008cca:	4628      	mov	r0, r5
 8008ccc:	b003      	add	sp, #12
 8008cce:	bd30      	pop	{r4, r5, pc}
 8008cd0:	51645c3c 	.word	0x51645c3c
 8008cd4:	200004c0 	.word	0x200004c0
 8008cd8:	0800f580 	.word	0x0800f580
 8008cdc:	0800f5a0 	.word	0x0800f5a0

08008ce0 <acc_element_source_adc_inject_data>:
 8008ce0:	b570      	push	{r4, r5, r6, lr}
 8008ce2:	4604      	mov	r4, r0
 8008ce4:	6940      	ldr	r0, [r0, #20]
 8008ce6:	4e08      	ldr	r6, [pc, #32]	; (8008d08 <acc_element_source_adc_inject_data+0x28>)
 8008ce8:	4615      	mov	r5, r2
 8008cea:	f004 f953 	bl	800cf94 <memcpy>
 8008cee:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008cf0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008cf2:	6820      	ldr	r0, [r4, #0]
 8008cf4:	6a22      	ldr	r2, [r4, #32]
 8008cf6:	600d      	str	r5, [r1, #0]
 8008cf8:	2100      	movs	r1, #0
 8008cfa:	601e      	str	r6, [r3, #0]
 8008cfc:	6843      	ldr	r3, [r0, #4]
 8008cfe:	6011      	str	r1, [r2, #0]
 8008d00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008d04:	4718      	bx	r3
 8008d06:	bf00      	nop
 8008d08:	51645c3c 	.word	0x51645c3c

08008d0c <acc_cpd_cbank_and_vana_calibration>:
 8008d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d10:	ed2d 8b02 	vpush	{d8}
 8008d14:	4614      	mov	r4, r2
 8008d16:	b08b      	sub	sp, #44	; 0x2c
 8008d18:	461e      	mov	r6, r3
 8008d1a:	ab09      	add	r3, sp, #36	; 0x24
 8008d1c:	4680      	mov	r8, r0
 8008d1e:	4689      	mov	r9, r1
 8008d20:	460a      	mov	r2, r1
 8008d22:	2500      	movs	r5, #0
 8008d24:	4601      	mov	r1, r0
 8008d26:	6820      	ldr	r0, [r4, #0]
 8008d28:	9300      	str	r3, [sp, #0]
 8008d2a:	ab08      	add	r3, sp, #32
 8008d2c:	e9cd 5508 	strd	r5, r5, [sp, #32]
 8008d30:	9606      	str	r6, [sp, #24]
 8008d32:	f7fe faed 	bl	8007310 <acc_sensor_protocol_r2_prepare_load>
 8008d36:	2800      	cmp	r0, #0
 8008d38:	f000 808b 	beq.w	8008e52 <acc_cpd_cbank_and_vana_calibration+0x146>
 8008d3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d3e:	461e      	mov	r6, r3
 8008d40:	f5c5 734b 	rsb	r3, r5, #812	; 0x32c
 8008d44:	429e      	cmp	r6, r3
 8008d46:	bf28      	it	cs
 8008d48:	461e      	movcs	r6, r3
 8008d4a:	9f08      	ldr	r7, [sp, #32]
 8008d4c:	f003 fc22 	bl	800c594 <acc_image_a111_r2c_cbank_and_vana_calibration_get>
 8008d50:	ea4f 0a55 	mov.w	sl, r5, lsr #1
 8008d54:	0872      	lsrs	r2, r6, #1
 8008d56:	4639      	mov	r1, r7
 8008d58:	eb00 008a 	add.w	r0, r0, sl, lsl #2
 8008d5c:	f003 fbcc 	bl	800c4f8 <acc_confprogram_copy>
 8008d60:	b2b2      	uxth	r2, r6
 8008d62:	9204      	str	r2, [sp, #16]
 8008d64:	f003 fc1a 	bl	800c59c <acc_image_a111_r2c_cbank_and_vana_calibration_param_table_get>
 8008d68:	6862      	ldr	r2, [r4, #4]
 8008d6a:	9201      	str	r2, [sp, #4]
 8008d6c:	2218      	movs	r2, #24
 8008d6e:	b2a9      	uxth	r1, r5
 8008d70:	4603      	mov	r3, r0
 8008d72:	9200      	str	r2, [sp, #0]
 8008d74:	4638      	mov	r0, r7
 8008d76:	9a04      	ldr	r2, [sp, #16]
 8008d78:	9205      	str	r2, [sp, #20]
 8008d7a:	9104      	str	r1, [sp, #16]
 8008d7c:	f003 face 	bl	800c31c <acc_confprogram_patch_offset>
 8008d80:	f003 fc0c 	bl	800c59c <acc_image_a111_r2c_cbank_and_vana_calibration_param_table_get>
 8008d84:	68a2      	ldr	r2, [r4, #8]
 8008d86:	9201      	str	r2, [sp, #4]
 8008d88:	2216      	movs	r2, #22
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	9200      	str	r2, [sp, #0]
 8008d8e:	4638      	mov	r0, r7
 8008d90:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8008d94:	f003 fac2 	bl	800c31c <acc_confprogram_patch_offset>
 8008d98:	f003 fc00 	bl	800c59c <acc_image_a111_r2c_cbank_and_vana_calibration_param_table_get>
 8008d9c:	68e2      	ldr	r2, [r4, #12]
 8008d9e:	9201      	str	r2, [sp, #4]
 8008da0:	2217      	movs	r2, #23
 8008da2:	4603      	mov	r3, r0
 8008da4:	9200      	str	r2, [sp, #0]
 8008da6:	4638      	mov	r0, r7
 8008da8:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8008dac:	f003 fab6 	bl	800c31c <acc_confprogram_patch_offset>
 8008db0:	f003 fbf4 	bl	800c59c <acc_image_a111_r2c_cbank_and_vana_calibration_param_table_get>
 8008db4:	f04f 0c15 	mov.w	ip, #21
 8008db8:	4603      	mov	r3, r0
 8008dba:	8a20      	ldrh	r0, [r4, #16]
 8008dbc:	9001      	str	r0, [sp, #4]
 8008dbe:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8008dc2:	f8cd c000 	str.w	ip, [sp]
 8008dc6:	4638      	mov	r0, r7
 8008dc8:	f003 faa8 	bl	800c31c <acc_confprogram_patch_offset>
 8008dcc:	f003 fbe6 	bl	800c59c <acc_image_a111_r2c_cbank_and_vana_calibration_param_table_get>
 8008dd0:	f04f 0b00 	mov.w	fp, #0
 8008dd4:	f04f 0c10 	mov.w	ip, #16
 8008dd8:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8008ddc:	4603      	mov	r3, r0
 8008dde:	e9cd bc00 	strd	fp, ip, [sp]
 8008de2:	4638      	mov	r0, r7
 8008de4:	f003 fa9a 	bl	800c31c <acc_confprogram_patch_offset>
 8008de8:	4633      	mov	r3, r6
 8008dea:	6820      	ldr	r0, [r4, #0]
 8008dec:	4642      	mov	r2, r8
 8008dee:	fa1f f18a 	uxth.w	r1, sl
 8008df2:	f7fd ff9d 	bl	8006d30 <acc_sensor_r2_load_confmem>
 8008df6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008df8:	4435      	add	r5, r6
 8008dfa:	f5b5 7f4b 	cmp.w	r5, #812	; 0x32c
 8008dfe:	d39f      	bcc.n	8008d40 <acc_cpd_cbank_and_vana_calibration+0x34>
 8008e00:	48ba      	ldr	r0, [pc, #744]	; (80090ec <acc_cpd_cbank_and_vana_calibration+0x3e0>)
 8008e02:	f003 fb87 	bl	800c514 <acc_diagnostic_log_set_scope>
 8008e06:	6821      	ldr	r1, [r4, #0]
 8008e08:	48b9      	ldr	r0, [pc, #740]	; (80090f0 <acc_cpd_cbank_and_vana_calibration+0x3e4>)
 8008e0a:	f003 fba3 	bl	800c554 <acc_diagnostic_log_scalar>
 8008e0e:	48b9      	ldr	r0, [pc, #740]	; (80090f4 <acc_cpd_cbank_and_vana_calibration+0x3e8>)
 8008e10:	2203      	movs	r2, #3
 8008e12:	4659      	mov	r1, fp
 8008e14:	f003 fb86 	bl	800c524 <acc_diagnostic_log_declare_parameter>
 8008e18:	6826      	ldr	r6, [r4, #0]
 8008e1a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008e1e:	4630      	mov	r0, r6
 8008e20:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8008e24:	f7fe fb52 	bl	80074cc <acc_sensor_protocol_r2_is_sensor_running>
 8008e28:	4605      	mov	r5, r0
 8008e2a:	b1f0      	cbz	r0, 8008e6a <acc_cpd_cbank_and_vana_calibration+0x15e>
 8008e2c:	4db2      	ldr	r5, [pc, #712]	; (80090f8 <acc_cpd_cbank_and_vana_calibration+0x3ec>)
 8008e2e:	4ab3      	ldr	r2, [pc, #716]	; (80090fc <acc_cpd_cbank_and_vana_calibration+0x3f0>)
 8008e30:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 8008e32:	49b3      	ldr	r1, [pc, #716]	; (8009100 <acc_cpd_cbank_and_vana_calibration+0x3f4>)
 8008e34:	4633      	mov	r3, r6
 8008e36:	4658      	mov	r0, fp
 8008e38:	47a0      	blx	r4
 8008e3a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8008e3c:	4ab1      	ldr	r2, [pc, #708]	; (8009104 <acc_cpd_cbank_and_vana_calibration+0x3f8>)
 8008e3e:	49b0      	ldr	r1, [pc, #704]	; (8009100 <acc_cpd_cbank_and_vana_calibration+0x3f4>)
 8008e40:	2000      	movs	r0, #0
 8008e42:	4798      	blx	r3
 8008e44:	2600      	movs	r6, #0
 8008e46:	4630      	mov	r0, r6
 8008e48:	b00b      	add	sp, #44	; 0x2c
 8008e4a:	ecbd 8b02 	vpop	{d8}
 8008e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e52:	4ba9      	ldr	r3, [pc, #676]	; (80090f8 <acc_cpd_cbank_and_vana_calibration+0x3ec>)
 8008e54:	4aac      	ldr	r2, [pc, #688]	; (8009108 <acc_cpd_cbank_and_vana_calibration+0x3fc>)
 8008e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e58:	49a9      	ldr	r1, [pc, #676]	; (8009100 <acc_cpd_cbank_and_vana_calibration+0x3f4>)
 8008e5a:	4606      	mov	r6, r0
 8008e5c:	4798      	blx	r3
 8008e5e:	4630      	mov	r0, r6
 8008e60:	b00b      	add	sp, #44	; 0x2c
 8008e62:	ecbd 8b02 	vpop	{d8}
 8008e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e6a:	f003 fb93 	bl	800c594 <acc_image_a111_r2c_cbank_and_vana_calibration_get>
 8008e6e:	9004      	str	r0, [sp, #16]
 8008e70:	f003 fb94 	bl	800c59c <acc_image_a111_r2c_cbank_and_vana_calibration_param_table_get>
 8008e74:	f8df a2b4 	ldr.w	sl, [pc, #692]	; 800912c <acc_cpd_cbank_and_vana_calibration+0x420>
 8008e78:	9904      	ldr	r1, [sp, #16]
 8008e7a:	f8df b278 	ldr.w	fp, [pc, #632]	; 80090f4 <acc_cpd_cbank_and_vana_calibration+0x3e8>
 8008e7e:	2201      	movs	r2, #1
 8008e80:	4603      	mov	r3, r0
 8008e82:	9200      	str	r2, [sp, #0]
 8008e84:	e9cd 5a01 	strd	r5, sl, [sp, #4]
 8008e88:	462a      	mov	r2, r5
 8008e8a:	4630      	mov	r0, r6
 8008e8c:	ee08 8a10 	vmov	s16, r8
 8008e90:	f003 fab8 	bl	800c404 <acc_confprogram_live_patch>
 8008e94:	462f      	mov	r7, r5
 8008e96:	9405      	str	r4, [sp, #20]
 8008e98:	462c      	mov	r4, r5
 8008e9a:	4639      	mov	r1, r7
 8008e9c:	4658      	mov	r0, fp
 8008e9e:	f003 fb49 	bl	800c534 <acc_diagnostic_log_set_parameter>
 8008ea2:	f003 fb77 	bl	800c594 <acc_image_a111_r2c_cbank_and_vana_calibration_get>
 8008ea6:	9004      	str	r0, [sp, #16]
 8008ea8:	f003 fb78 	bl	800c59c <acc_image_a111_r2c_cbank_and_vana_calibration_param_table_get>
 8008eac:	221c      	movs	r2, #28
 8008eae:	9904      	ldr	r1, [sp, #16]
 8008eb0:	9200      	str	r2, [sp, #0]
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	e9cd 7a01 	strd	r7, sl, [sp, #4]
 8008eb8:	4630      	mov	r0, r6
 8008eba:	2200      	movs	r2, #0
 8008ebc:	f003 faa2 	bl	800c404 <acc_confprogram_live_patch>
 8008ec0:	21ef      	movs	r1, #239	; 0xef
 8008ec2:	4630      	mov	r0, r6
 8008ec4:	f7fe fa88 	bl	80073d8 <acc_sensor_protocol_r2_run_program>
 8008ec8:	2800      	cmp	r0, #0
 8008eca:	f000 8131 	beq.w	8009130 <acc_cpd_cbank_and_vana_calibration+0x424>
 8008ece:	2300      	movs	r3, #0
 8008ed0:	2209      	movs	r2, #9
 8008ed2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8008ed6:	4630      	mov	r0, r6
 8008ed8:	f7fe fc02 	bl	80076e0 <acc_sensor_protocol_r2_wait_for_specific_event>
 8008edc:	b938      	cbnz	r0, 8008eee <acc_cpd_cbank_and_vana_calibration+0x1e2>
 8008ede:	4d86      	ldr	r5, [pc, #536]	; (80090f8 <acc_cpd_cbank_and_vana_calibration+0x3ec>)
 8008ee0:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 8008ee2:	4a8a      	ldr	r2, [pc, #552]	; (800910c <acc_cpd_cbank_and_vana_calibration+0x400>)
 8008ee4:	4986      	ldr	r1, [pc, #536]	; (8009100 <acc_cpd_cbank_and_vana_calibration+0x3f4>)
 8008ee6:	463b      	mov	r3, r7
 8008ee8:	2000      	movs	r0, #0
 8008eea:	47a0      	blx	r4
 8008eec:	e7a5      	b.n	8008e3a <acc_cpd_cbank_and_vana_calibration+0x12e>
 8008eee:	2110      	movs	r1, #16
 8008ef0:	4648      	mov	r0, r9
 8008ef2:	f7fd ff55 	bl	8006da0 <acc_sensor_r2_buffer_processed_verify_size>
 8008ef6:	b928      	cbnz	r0, 8008f04 <acc_cpd_cbank_and_vana_calibration+0x1f8>
 8008ef8:	4d7f      	ldr	r5, [pc, #508]	; (80090f8 <acc_cpd_cbank_and_vana_calibration+0x3ec>)
 8008efa:	4a85      	ldr	r2, [pc, #532]	; (8009110 <acc_cpd_cbank_and_vana_calibration+0x404>)
 8008efc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8008efe:	4980      	ldr	r1, [pc, #512]	; (8009100 <acc_cpd_cbank_and_vana_calibration+0x3f4>)
 8008f00:	4798      	blx	r3
 8008f02:	e7ed      	b.n	8008ee0 <acc_cpd_cbank_and_vana_calibration+0x1d4>
 8008f04:	ee18 1a10 	vmov	r1, s16
 8008f08:	2310      	movs	r3, #16
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	4630      	mov	r0, r6
 8008f0e:	f7fd ff4f 	bl	8006db0 <acc_sensor_r2_buffer_processed_read>
 8008f12:	2310      	movs	r3, #16
 8008f14:	4602      	mov	r2, r0
 8008f16:	4680      	mov	r8, r0
 8008f18:	4631      	mov	r1, r6
 8008f1a:	2000      	movs	r0, #0
 8008f1c:	f7fe ff14 	bl	8007d48 <acc_probes_execute_uint16>
 8008f20:	4630      	mov	r0, r6
 8008f22:	f7fe fae5 	bl	80074f0 <acc_sensor_protocol_r2_ack_event>
 8008f26:	2800      	cmp	r0, #0
 8008f28:	d0d9      	beq.n	8008ede <acc_cpd_cbank_and_vana_calibration+0x1d2>
 8008f2a:	2500      	movs	r5, #0
 8008f2c:	462b      	mov	r3, r5
 8008f2e:	4642      	mov	r2, r8
 8008f30:	f108 0c1e 	add.w	ip, r8, #30
 8008f34:	8851      	ldrh	r1, [r2, #2]
 8008f36:	f832 0b02 	ldrh.w	r0, [r2], #2
 8008f3a:	4281      	cmp	r1, r0
 8008f3c:	440b      	add	r3, r1
 8008f3e:	bf34      	ite	cc
 8008f40:	1a41      	subcc	r1, r0, r1
 8008f42:	1a09      	subcs	r1, r1, r0
 8008f44:	428d      	cmp	r5, r1
 8008f46:	bf38      	it	cc
 8008f48:	460d      	movcc	r5, r1
 8008f4a:	4594      	cmp	ip, r2
 8008f4c:	d1f2      	bne.n	8008f34 <acc_cpd_cbank_and_vana_calibration+0x228>
 8008f4e:	4871      	ldr	r0, [pc, #452]	; (8009114 <acc_cpd_cbank_and_vana_calibration+0x408>)
 8008f50:	9304      	str	r3, [sp, #16]
 8008f52:	4659      	mov	r1, fp
 8008f54:	f003 faf6 	bl	800c544 <acc_diagnostic_log_array>
 8008f58:	2110      	movs	r1, #16
 8008f5a:	4640      	mov	r0, r8
 8008f5c:	f003 fb02 	bl	800c564 <acc_diagnostic_log_data_u16>
 8008f60:	f8b8 2000 	ldrh.w	r2, [r8]
 8008f64:	9b04      	ldr	r3, [sp, #16]
 8008f66:	4413      	add	r3, r2
 8008f68:	ea4f 1813 	mov.w	r8, r3, lsr #4
 8008f6c:	f5a8 43f2 	sub.w	r3, r8, #30976	; 0x7900
 8008f70:	3b18      	subs	r3, #24
 8008f72:	b29b      	uxth	r3, r3
 8008f74:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8008f78:	428b      	cmp	r3, r1
 8008f7a:	d83d      	bhi.n	8008ff8 <acc_cpd_cbank_and_vana_calibration+0x2ec>
 8008f7c:	f5b5 7f48 	cmp.w	r5, #800	; 0x320
 8008f80:	d83a      	bhi.n	8008ff8 <acc_cpd_cbank_and_vana_calibration+0x2ec>
 8008f82:	f8cd 8010 	str.w	r8, [sp, #16]
 8008f86:	9c05      	ldr	r4, [sp, #20]
 8008f88:	9507      	str	r5, [sp, #28]
 8008f8a:	f7fc fbd1 	bl	8005730 <acc_rss_integration_log_level>
 8008f8e:	2803      	cmp	r0, #3
 8008f90:	ee18 8a10 	vmov	r8, s16
 8008f94:	9a04      	ldr	r2, [sp, #16]
 8008f96:	9b07      	ldr	r3, [sp, #28]
 8008f98:	d909      	bls.n	8008fae <acc_cpd_cbank_and_vana_calibration+0x2a2>
 8008f9a:	b292      	uxth	r2, r2
 8008f9c:	4d56      	ldr	r5, [pc, #344]	; (80090f8 <acc_cpd_cbank_and_vana_calibration+0x3ec>)
 8008f9e:	9301      	str	r3, [sp, #4]
 8008fa0:	9200      	str	r2, [sp, #0]
 8008fa2:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 8008fa4:	4a5c      	ldr	r2, [pc, #368]	; (8009118 <acc_cpd_cbank_and_vana_calibration+0x40c>)
 8008fa6:	4956      	ldr	r1, [pc, #344]	; (8009100 <acc_cpd_cbank_and_vana_calibration+0x3f4>)
 8008fa8:	4633      	mov	r3, r6
 8008faa:	2004      	movs	r0, #4
 8008fac:	47a8      	blx	r5
 8008fae:	9e06      	ldr	r6, [sp, #24]
 8008fb0:	7137      	strb	r7, [r6, #4]
 8008fb2:	6825      	ldr	r5, [r4, #0]
 8008fb4:	f003 faee 	bl	800c594 <acc_image_a111_r2c_cbank_and_vana_calibration_get>
 8008fb8:	9004      	str	r0, [sp, #16]
 8008fba:	f003 faef 	bl	800c59c <acc_image_a111_r2c_cbank_and_vana_calibration_param_table_get>
 8008fbe:	7936      	ldrb	r6, [r6, #4]
 8008fc0:	9904      	ldr	r1, [sp, #16]
 8008fc2:	f8cd a008 	str.w	sl, [sp, #8]
 8008fc6:	221c      	movs	r2, #28
 8008fc8:	e9cd 2600 	strd	r2, r6, [sp]
 8008fcc:	4603      	mov	r3, r0
 8008fce:	2200      	movs	r2, #0
 8008fd0:	4628      	mov	r0, r5
 8008fd2:	f003 fa17 	bl	800c404 <acc_confprogram_live_patch>
 8008fd6:	6820      	ldr	r0, [r4, #0]
 8008fd8:	2119      	movs	r1, #25
 8008fda:	f7fe f9fd 	bl	80073d8 <acc_sensor_protocol_r2_run_program>
 8008fde:	4606      	mov	r6, r0
 8008fe0:	bb00      	cbnz	r0, 8009024 <acc_cpd_cbank_and_vana_calibration+0x318>
 8008fe2:	4b45      	ldr	r3, [pc, #276]	; (80090f8 <acc_cpd_cbank_and_vana_calibration+0x3ec>)
 8008fe4:	4a4d      	ldr	r2, [pc, #308]	; (800911c <acc_cpd_cbank_and_vana_calibration+0x410>)
 8008fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fe8:	4945      	ldr	r1, [pc, #276]	; (8009100 <acc_cpd_cbank_and_vana_calibration+0x3f4>)
 8008fea:	4798      	blx	r3
 8008fec:	4630      	mov	r0, r6
 8008fee:	b00b      	add	sp, #44	; 0x2c
 8008ff0:	ecbd 8b02 	vpop	{d8}
 8008ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ff8:	f7fc fb9a 	bl	8005730 <acc_rss_integration_log_level>
 8008ffc:	2803      	cmp	r0, #3
 8008ffe:	d90a      	bls.n	8009016 <acc_cpd_cbank_and_vana_calibration+0x30a>
 8009000:	fa1f f288 	uxth.w	r2, r8
 8009004:	e9cd 2500 	strd	r2, r5, [sp]
 8009008:	4b3b      	ldr	r3, [pc, #236]	; (80090f8 <acc_cpd_cbank_and_vana_calibration+0x3ec>)
 800900a:	4a43      	ldr	r2, [pc, #268]	; (8009118 <acc_cpd_cbank_and_vana_calibration+0x40c>)
 800900c:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 800900e:	493c      	ldr	r1, [pc, #240]	; (8009100 <acc_cpd_cbank_and_vana_calibration+0x3f4>)
 8009010:	4633      	mov	r3, r6
 8009012:	2004      	movs	r0, #4
 8009014:	47a8      	blx	r5
 8009016:	b10c      	cbz	r4, 800901c <acc_cpd_cbank_and_vana_calibration+0x310>
 8009018:	4d37      	ldr	r5, [pc, #220]	; (80090f8 <acc_cpd_cbank_and_vana_calibration+0x3ec>)
 800901a:	e70e      	b.n	8008e3a <acc_cpd_cbank_and_vana_calibration+0x12e>
 800901c:	f89d 7025 	ldrb.w	r7, [sp, #37]	; 0x25
 8009020:	2401      	movs	r4, #1
 8009022:	e73a      	b.n	8008e9a <acc_cpd_cbank_and_vana_calibration+0x18e>
 8009024:	4648      	mov	r0, r9
 8009026:	2108      	movs	r1, #8
 8009028:	6826      	ldr	r6, [r4, #0]
 800902a:	f7fd feb9 	bl	8006da0 <acc_sensor_r2_buffer_processed_verify_size>
 800902e:	b958      	cbnz	r0, 8009048 <acc_cpd_cbank_and_vana_calibration+0x33c>
 8009030:	4d31      	ldr	r5, [pc, #196]	; (80090f8 <acc_cpd_cbank_and_vana_calibration+0x3ec>)
 8009032:	4a37      	ldr	r2, [pc, #220]	; (8009110 <acc_cpd_cbank_and_vana_calibration+0x404>)
 8009034:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009036:	4932      	ldr	r1, [pc, #200]	; (8009100 <acc_cpd_cbank_and_vana_calibration+0x3f4>)
 8009038:	4798      	blx	r3
 800903a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800903c:	4a38      	ldr	r2, [pc, #224]	; (8009120 <acc_cpd_cbank_and_vana_calibration+0x414>)
 800903e:	4930      	ldr	r1, [pc, #192]	; (8009100 <acc_cpd_cbank_and_vana_calibration+0x3f4>)
 8009040:	2000      	movs	r0, #0
 8009042:	4798      	blx	r3
 8009044:	2600      	movs	r6, #0
 8009046:	e70a      	b.n	8008e5e <acc_cpd_cbank_and_vana_calibration+0x152>
 8009048:	2300      	movs	r3, #0
 800904a:	2203      	movs	r2, #3
 800904c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8009050:	4630      	mov	r0, r6
 8009052:	f7fe fb45 	bl	80076e0 <acc_sensor_protocol_r2_wait_for_specific_event>
 8009056:	2800      	cmp	r0, #0
 8009058:	d046      	beq.n	80090e8 <acc_cpd_cbank_and_vana_calibration+0x3dc>
 800905a:	2408      	movs	r4, #8
 800905c:	4623      	mov	r3, r4
 800905e:	2200      	movs	r2, #0
 8009060:	4641      	mov	r1, r8
 8009062:	4630      	mov	r0, r6
 8009064:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
 8009068:	f7fd fea2 	bl	8006db0 <acc_sensor_r2_buffer_processed_read>
 800906c:	492d      	ldr	r1, [pc, #180]	; (8009124 <acc_cpd_cbank_and_vana_calibration+0x418>)
 800906e:	4605      	mov	r5, r0
 8009070:	482d      	ldr	r0, [pc, #180]	; (8009128 <acc_cpd_cbank_and_vana_calibration+0x41c>)
 8009072:	f003 fa67 	bl	800c544 <acc_diagnostic_log_array>
 8009076:	4621      	mov	r1, r4
 8009078:	4628      	mov	r0, r5
 800907a:	1eac      	subs	r4, r5, #2
 800907c:	f003 fa72 	bl	800c564 <acc_diagnostic_log_data_u16>
 8009080:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8009084:	4620      	mov	r0, r4
 8009086:	2300      	movs	r3, #0
 8009088:	f830 2f02 	ldrh.w	r2, [r0, #2]!
 800908c:	f5d2 4100 	rsbs	r1, r2, #32768	; 0x8000
 8009090:	bf48      	it	mi
 8009092:	f5a2 4100 	submi.w	r1, r2, #32768	; 0x8000
 8009096:	42b9      	cmp	r1, r7
 8009098:	bfb8      	it	lt
 800909a:	f8ad 3024 	strhlt.w	r3, [sp, #36]	; 0x24
 800909e:	f103 0301 	add.w	r3, r3, #1
 80090a2:	bfb8      	it	lt
 80090a4:	460f      	movlt	r7, r1
 80090a6:	2b08      	cmp	r3, #8
 80090a8:	d1ee      	bne.n	8009088 <acc_cpd_cbank_and_vana_calibration+0x37c>
 80090aa:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 80090ae:	4631      	mov	r1, r6
 80090b0:	aa09      	add	r2, sp, #36	; 0x24
 80090b2:	2301      	movs	r3, #1
 80090b4:	f007 0707 	and.w	r7, r7, #7
 80090b8:	2006      	movs	r0, #6
 80090ba:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 80090be:	f7fe fe43 	bl	8007d48 <acc_probes_execute_uint16>
 80090c2:	4630      	mov	r0, r6
 80090c4:	f7fe fa14 	bl	80074f0 <acc_sensor_protocol_r2_ack_event>
 80090c8:	4606      	mov	r6, r0
 80090ca:	b168      	cbz	r0, 80090e8 <acc_cpd_cbank_and_vana_calibration+0x3dc>
 80090cc:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 80090d0:	2900      	cmp	r1, #0
 80090d2:	d05e      	beq.n	8009192 <acc_cpd_cbank_and_vana_calibration+0x486>
 80090d4:	2300      	movs	r3, #0
 80090d6:	e001      	b.n	80090dc <acc_cpd_cbank_and_vana_calibration+0x3d0>
 80090d8:	428b      	cmp	r3, r1
 80090da:	d030      	beq.n	800913e <acc_cpd_cbank_and_vana_calibration+0x432>
 80090dc:	f934 2f02 	ldrsh.w	r2, [r4, #2]!
 80090e0:	2a00      	cmp	r2, #0
 80090e2:	f103 0301 	add.w	r3, r3, #1
 80090e6:	daf7      	bge.n	80090d8 <acc_cpd_cbank_and_vana_calibration+0x3cc>
 80090e8:	4d03      	ldr	r5, [pc, #12]	; (80090f8 <acc_cpd_cbank_and_vana_calibration+0x3ec>)
 80090ea:	e7a6      	b.n	800903a <acc_cpd_cbank_and_vana_calibration+0x32e>
 80090ec:	0800f5fc 	.word	0x0800f5fc
 80090f0:	0800f618 	.word	0x0800f618
 80090f4:	0800f624 	.word	0x0800f624
 80090f8:	200004c0 	.word	0x200004c0
 80090fc:	0800f630 	.word	0x0800f630
 8009100:	0800f5f8 	.word	0x0800f5f8
 8009104:	0800f6f8 	.word	0x0800f6f8
 8009108:	0800f5b4 	.word	0x0800f5b4
 800910c:	0800f6cc 	.word	0x0800f6cc
 8009110:	0800f6a4 	.word	0x0800f6a4
 8009114:	0800f6bc 	.word	0x0800f6bc
 8009118:	0800f78c 	.word	0x0800f78c
 800911c:	0800f710 	.word	0x0800f710
 8009120:	0800f754 	.word	0x0800f754
 8009124:	0800fb24 	.word	0x0800fb24
 8009128:	0800f744 	.word	0x0800f744
 800912c:	08006cd5 	.word	0x08006cd5
 8009130:	4d19      	ldr	r5, [pc, #100]	; (8009198 <acc_cpd_cbank_and_vana_calibration+0x48c>)
 8009132:	4a1a      	ldr	r2, [pc, #104]	; (800919c <acc_cpd_cbank_and_vana_calibration+0x490>)
 8009134:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 8009136:	491a      	ldr	r1, [pc, #104]	; (80091a0 <acc_cpd_cbank_and_vana_calibration+0x494>)
 8009138:	463b      	mov	r3, r7
 800913a:	47a0      	blx	r4
 800913c:	e67d      	b.n	8008e3a <acc_cpd_cbank_and_vana_calibration+0x12e>
 800913e:	1c4b      	adds	r3, r1, #1
 8009140:	2b07      	cmp	r3, #7
 8009142:	dc0c      	bgt.n	800915e <acc_cpd_cbank_and_vana_calibration+0x452>
 8009144:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8009148:	e001      	b.n	800914e <acc_cpd_cbank_and_vana_calibration+0x442>
 800914a:	2b08      	cmp	r3, #8
 800914c:	d007      	beq.n	800915e <acc_cpd_cbank_and_vana_calibration+0x452>
 800914e:	f835 2b02 	ldrh.w	r2, [r5], #2
 8009152:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8009156:	f103 0301 	add.w	r3, r3, #1
 800915a:	d8f6      	bhi.n	800914a <acc_cpd_cbank_and_vana_calibration+0x43e>
 800915c:	e7c4      	b.n	80090e8 <acc_cpd_cbank_and_vana_calibration+0x3dc>
 800915e:	9b06      	ldr	r3, [sp, #24]
 8009160:	6019      	str	r1, [r3, #0]
 8009162:	f7fc fae5 	bl	8005730 <acc_rss_integration_log_level>
 8009166:	2801      	cmp	r0, #1
 8009168:	d909      	bls.n	800917e <acc_cpd_cbank_and_vana_calibration+0x472>
 800916a:	9906      	ldr	r1, [sp, #24]
 800916c:	4a0a      	ldr	r2, [pc, #40]	; (8009198 <acc_cpd_cbank_and_vana_calibration+0x48c>)
 800916e:	790b      	ldrb	r3, [r1, #4]
 8009170:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8009172:	9300      	str	r3, [sp, #0]
 8009174:	680b      	ldr	r3, [r1, #0]
 8009176:	4a0b      	ldr	r2, [pc, #44]	; (80091a4 <acc_cpd_cbank_and_vana_calibration+0x498>)
 8009178:	4909      	ldr	r1, [pc, #36]	; (80091a0 <acc_cpd_cbank_and_vana_calibration+0x494>)
 800917a:	2002      	movs	r0, #2
 800917c:	47a0      	blx	r4
 800917e:	9c06      	ldr	r4, [sp, #24]
 8009180:	4809      	ldr	r0, [pc, #36]	; (80091a8 <acc_cpd_cbank_and_vana_calibration+0x49c>)
 8009182:	6821      	ldr	r1, [r4, #0]
 8009184:	f003 f9e6 	bl	800c554 <acc_diagnostic_log_scalar>
 8009188:	7921      	ldrb	r1, [r4, #4]
 800918a:	4808      	ldr	r0, [pc, #32]	; (80091ac <acc_cpd_cbank_and_vana_calibration+0x4a0>)
 800918c:	f003 f9e2 	bl	800c554 <acc_diagnostic_log_scalar>
 8009190:	e665      	b.n	8008e5e <acc_cpd_cbank_and_vana_calibration+0x152>
 8009192:	2301      	movs	r3, #1
 8009194:	e7d6      	b.n	8009144 <acc_cpd_cbank_and_vana_calibration+0x438>
 8009196:	bf00      	nop
 8009198:	200004c0 	.word	0x200004c0
 800919c:	0800f664 	.word	0x0800f664
 80091a0:	0800f5f8 	.word	0x0800f5f8
 80091a4:	0800f76c 	.word	0x0800f76c
 80091a8:	0800f780 	.word	0x0800f780
 80091ac:	0800f624 	.word	0x0800f624

080091b0 <acc_cpd_dll_calibration>:
 80091b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091b4:	ed2d 8b0a 	vpush	{d8-d12}
 80091b8:	b0c7      	sub	sp, #284	; 0x11c
 80091ba:	461d      	mov	r5, r3
 80091bc:	9309      	str	r3, [sp, #36]	; 0x24
 80091be:	2400      	movs	r4, #0
 80091c0:	4b63      	ldr	r3, [pc, #396]	; (8009350 <acc_cpd_dll_calibration+0x1a0>)
 80091c2:	61eb      	str	r3, [r5, #28]
 80091c4:	f5b1 7f45 	cmp.w	r1, #788	; 0x314
 80091c8:	ee0b 0a90 	vmov	s23, r0
 80091cc:	4693      	mov	fp, r2
 80091ce:	766c      	strb	r4, [r5, #25]
 80091d0:	f0c0 8479 	bcc.w	8009ac6 <acc_cpd_dll_calibration+0x916>
 80091d4:	f5a1 7316 	sub.w	r3, r1, #600	; 0x258
 80091d8:	f023 0301 	bic.w	r3, r3, #1
 80091dc:	f5a1 7145 	sub.w	r1, r1, #788	; 0x314
 80091e0:	f021 0201 	bic.w	r2, r1, #1
 80091e4:	18c3      	adds	r3, r0, r3
 80091e6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80091ea:	ee0c 1a10 	vmov	s24, r1
 80091ee:	9312      	str	r3, [sp, #72]	; 0x48
 80091f0:	eb00 0a02 	add.w	sl, r0, r2
 80091f4:	f0c0 8085 	bcc.w	8009302 <acc_cpd_dll_calibration+0x152>
 80091f8:	4856      	ldr	r0, [pc, #344]	; (8009354 <acc_cpd_dll_calibration+0x1a4>)
 80091fa:	ed9f 9a57 	vldr	s18, [pc, #348]	; 8009358 <acc_cpd_dll_calibration+0x1a8>
 80091fe:	eddf 8a57 	vldr	s17, [pc, #348]	; 800935c <acc_cpd_dll_calibration+0x1ac>
 8009202:	f003 f987 	bl	800c514 <acc_diagnostic_log_set_scope>
 8009206:	f8db 1000 	ldr.w	r1, [fp]
 800920a:	4855      	ldr	r0, [pc, #340]	; (8009360 <acc_cpd_dll_calibration+0x1b0>)
 800920c:	f003 f9a2 	bl	800c554 <acc_diagnostic_log_scalar>
 8009210:	4854      	ldr	r0, [pc, #336]	; (8009364 <acc_cpd_dll_calibration+0x1b4>)
 8009212:	2202      	movs	r2, #2
 8009214:	2101      	movs	r1, #1
 8009216:	f003 f985 	bl	800c524 <acc_diagnostic_log_declare_parameter>
 800921a:	4853      	ldr	r0, [pc, #332]	; (8009368 <acc_cpd_dll_calibration+0x1b8>)
 800921c:	221f      	movs	r2, #31
 800921e:	2100      	movs	r1, #0
 8009220:	f003 f980 	bl	800c524 <acc_diagnostic_log_declare_parameter>
 8009224:	4851      	ldr	r0, [pc, #324]	; (800936c <acc_cpd_dll_calibration+0x1bc>)
 8009226:	227b      	movs	r2, #123	; 0x7b
 8009228:	2100      	movs	r1, #0
 800922a:	f003 f97b 	bl	800c524 <acc_diagnostic_log_declare_parameter>
 800922e:	2302      	movs	r3, #2
 8009230:	461c      	mov	r4, r3
 8009232:	484f      	ldr	r0, [pc, #316]	; (8009370 <acc_cpd_dll_calibration+0x1c0>)
 8009234:	9319      	str	r3, [sp, #100]	; 0x64
 8009236:	220b      	movs	r2, #11
 8009238:	2100      	movs	r1, #0
 800923a:	f003 f973 	bl	800c524 <acc_diagnostic_log_declare_parameter>
 800923e:	46d1      	mov	r9, sl
 8009240:	940e      	str	r4, [sp, #56]	; 0x38
 8009242:	46da      	mov	sl, fp
 8009244:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009246:	4847      	ldr	r0, [pc, #284]	; (8009364 <acc_cpd_dll_calibration+0x1b4>)
 8009248:	ed9f 8a4a 	vldr	s16, [pc, #296]	; 8009374 <acc_cpd_dll_calibration+0x1c4>
 800924c:	f003 f972 	bl	800c534 <acc_diagnostic_log_set_parameter>
 8009250:	ab20      	add	r3, sp, #128	; 0x80
 8009252:	464c      	mov	r4, r9
 8009254:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8009256:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8009258:	ee1c ba10 	vmov	fp, s24
 800925c:	ee1b 9a90 	vmov	r9, s23
 8009260:	2500      	movs	r5, #0
 8009262:	4698      	mov	r8, r3
 8009264:	e023      	b.n	80092ae <acc_cpd_dll_calibration+0xfe>
 8009266:	f837 3b32 	ldrh.w	r3, [r7], #50
 800926a:	ee07 3a10 	vmov	s14, r3
 800926e:	4b42      	ldr	r3, [pc, #264]	; (8009378 <acc_cpd_dll_calibration+0x1c8>)
 8009270:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8009274:	f833 2016 	ldrh.w	r2, [r3, r6, lsl #1]
 8009278:	4b40      	ldr	r3, [pc, #256]	; (800937c <acc_cpd_dll_calibration+0x1cc>)
 800927a:	ee27 7a09 	vmul.f32	s14, s14, s18
 800927e:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 8009282:	ee37 7a66 	vsub.f32	s14, s14, s13
 8009286:	1ad3      	subs	r3, r2, r3
 8009288:	b21b      	sxth	r3, r3
 800928a:	ee07 3a90 	vmov	s15, r3
 800928e:	ee27 7a28 	vmul.f32	s14, s14, s17
 8009292:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009296:	ee27 7a08 	vmul.f32	s14, s14, s16
 800929a:	2d0c      	cmp	r5, #12
 800929c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80092a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80092a4:	ee17 3a90 	vmov	r3, s15
 80092a8:	f828 3b02 	strh.w	r3, [r8], #2
 80092ac:	d035      	beq.n	800931a <acc_cpd_dll_calibration+0x16a>
 80092ae:	4629      	mov	r1, r5
 80092b0:	482f      	ldr	r0, [pc, #188]	; (8009370 <acc_cpd_dll_calibration+0x1c0>)
 80092b2:	f003 f93f 	bl	800c534 <acc_diagnostic_log_set_parameter>
 80092b6:	e9da 1200 	ldrd	r1, r2, [sl]
 80092ba:	e9da 3002 	ldrd	r3, r0, [sl, #8]
 80092be:	9139      	str	r1, [sp, #228]	; 0xe4
 80092c0:	e9cd 303b 	strd	r3, r0, [sp, #236]	; 0xec
 80092c4:	f8da 1014 	ldr.w	r1, [sl, #20]
 80092c8:	f8da 0018 	ldr.w	r0, [sl, #24]
 80092cc:	f8ba c010 	ldrh.w	ip, [sl, #16]
 80092d0:	923a      	str	r2, [sp, #232]	; 0xe8
 80092d2:	9140      	str	r1, [sp, #256]	; 0x100
 80092d4:	9041      	str	r0, [sp, #260]	; 0x104
 80092d6:	463b      	mov	r3, r7
 80092d8:	aa39      	add	r2, sp, #228	; 0xe4
 80092da:	4659      	mov	r1, fp
 80092dc:	4648      	mov	r0, r9
 80092de:	e9cd 653e 	strd	r6, r5, [sp, #248]	; 0xf8
 80092e2:	f8ad c0f4 	strh.w	ip, [sp, #244]	; 0xf4
 80092e6:	f001 fe85 	bl	800aff4 <acc_cpd_rx_fine_dip_calibration>
 80092ea:	3501      	adds	r5, #1
 80092ec:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80092f0:	2800      	cmp	r0, #0
 80092f2:	d1b8      	bne.n	8009266 <acc_cpd_dll_calibration+0xb6>
 80092f4:	4604      	mov	r4, r0
 80092f6:	4620      	mov	r0, r4
 80092f8:	b047      	add	sp, #284	; 0x11c
 80092fa:	ecbd 8b0a 	vpop	{d8-d12}
 80092fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009302:	f7fc fa15 	bl	8005730 <acc_rss_integration_log_level>
 8009306:	2801      	cmp	r0, #1
 8009308:	f67f af76 	bls.w	80091f8 <acc_cpd_dll_calibration+0x48>
 800930c:	4b1c      	ldr	r3, [pc, #112]	; (8009380 <acc_cpd_dll_calibration+0x1d0>)
 800930e:	4a1d      	ldr	r2, [pc, #116]	; (8009384 <acc_cpd_dll_calibration+0x1d4>)
 8009310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009312:	491d      	ldr	r1, [pc, #116]	; (8009388 <acc_cpd_dll_calibration+0x1d8>)
 8009314:	2002      	movs	r0, #2
 8009316:	4798      	blx	r3
 8009318:	e76e      	b.n	80091f8 <acc_cpd_dll_calibration+0x48>
 800931a:	491c      	ldr	r1, [pc, #112]	; (800938c <acc_cpd_dll_calibration+0x1dc>)
 800931c:	481c      	ldr	r0, [pc, #112]	; (8009390 <acc_cpd_dll_calibration+0x1e0>)
 800931e:	f003 f911 	bl	800c544 <acc_diagnostic_log_array>
 8009322:	4629      	mov	r1, r5
 8009324:	a820      	add	r0, sp, #128	; 0x80
 8009326:	f003 f91d 	bl	800c564 <acc_diagnostic_log_data_u16>
 800932a:	aa1d      	add	r2, sp, #116	; 0x74
 800932c:	a920      	add	r1, sp, #128	; 0x80
 800932e:	4628      	mov	r0, r5
 8009330:	f000 fd66 	bl	8009e00 <acc_dll_dly_coarse_priority_sort>
 8009334:	4915      	ldr	r1, [pc, #84]	; (800938c <acc_cpd_dll_calibration+0x1dc>)
 8009336:	4817      	ldr	r0, [pc, #92]	; (8009394 <acc_cpd_dll_calibration+0x1e4>)
 8009338:	f003 f904 	bl	800c544 <acc_diagnostic_log_array>
 800933c:	4629      	mov	r1, r5
 800933e:	a81d      	add	r0, sp, #116	; 0x74
 8009340:	f003 f920 	bl	800c584 <acc_diagnostic_log_data_u8>
 8009344:	ab1d      	add	r3, sp, #116	; 0x74
 8009346:	930d      	str	r3, [sp, #52]	; 0x34
 8009348:	4653      	mov	r3, sl
 800934a:	4699      	mov	r9, r3
 800934c:	46a2      	mov	sl, r4
 800934e:	e075      	b.n	800943c <acc_cpd_dll_calibration+0x28c>
 8009350:	ff800000 	.word	0xff800000
 8009354:	0800f7fc 	.word	0x0800f7fc
 8009358:	37800000 	.word	0x37800000
 800935c:	3f99999a 	.word	0x3f99999a
 8009360:	0800f618 	.word	0x0800f618
 8009364:	0800f80c 	.word	0x0800f80c
 8009368:	0800f818 	.word	0x0800f818
 800936c:	0800f824 	.word	0x0800f824
 8009370:	0800f830 	.word	0x0800f830
 8009374:	447a0000 	.word	0x447a0000
 8009378:	080138a4 	.word	0x080138a4
 800937c:	0801389c 	.word	0x0801389c
 8009380:	200004c0 	.word	0x200004c0
 8009384:	0800f7d0 	.word	0x0800f7d0
 8009388:	0800f7bc 	.word	0x0800f7bc
 800938c:	0800f83c 	.word	0x0800f83c
 8009390:	0800f854 	.word	0x0800f854
 8009394:	0800f868 	.word	0x0800f868
 8009398:	f5a2 7243 	sub.w	r2, r2, #780	; 0x30c
 800939c:	f5b2 7fe6 	cmp.w	r2, #460	; 0x1cc
 80093a0:	f200 82eb 	bhi.w	800997a <acc_cpd_dll_calibration+0x7ca>
 80093a4:	f9bd 206e 	ldrsh.w	r2, [sp, #110]	; 0x6e
 80093a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80093aa:	1a9b      	subs	r3, r3, r2
 80093ac:	b21b      	sxth	r3, r3
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	bfb8      	it	lt
 80093b2:	425b      	neglt	r3, r3
 80093b4:	b21b      	sxth	r3, r3
 80093b6:	2b64      	cmp	r3, #100	; 0x64
 80093b8:	f300 82df 	bgt.w	800997a <acc_cpd_dll_calibration+0x7ca>
 80093bc:	ee18 3a10 	vmov	r3, s16
 80093c0:	4293      	cmp	r3, r2
 80093c2:	f2c0 82da 	blt.w	800997a <acc_cpd_dll_calibration+0x7ca>
 80093c6:	49d4      	ldr	r1, [pc, #848]	; (8009718 <acc_cpd_dll_calibration+0x568>)
 80093c8:	48d4      	ldr	r0, [pc, #848]	; (800971c <acc_cpd_dll_calibration+0x56c>)
 80093ca:	f003 f8bb 	bl	800c544 <acc_diagnostic_log_array>
 80093ce:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80093d0:	4628      	mov	r0, r5
 80093d2:	4621      	mov	r1, r4
 80093d4:	f003 f8c6 	bl	800c564 <acc_diagnostic_log_data_u16>
 80093d8:	4621      	mov	r1, r4
 80093da:	4628      	mov	r0, r5
 80093dc:	f000 fc76 	bl	8009ccc <acc_dll_check_direct_leakage>
 80093e0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80093e4:	4604      	mov	r4, r0
 80093e6:	4658      	mov	r0, fp
 80093e8:	f7fe f9a8 	bl	800773c <acc_sensor_protocol_r2_stop>
 80093ec:	2c00      	cmp	r4, #0
 80093ee:	f040 840f 	bne.w	8009c10 <acc_cpd_dll_calibration+0xa60>
 80093f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80093f4:	2b01      	cmp	r3, #1
 80093f6:	f04f 0100 	mov.w	r1, #0
 80093fa:	f040 82e5 	bne.w	80099c8 <acc_cpd_dll_calibration+0x818>
 80093fe:	f7fc f997 	bl	8005730 <acc_rss_integration_log_level>
 8009402:	2803      	cmp	r0, #3
 8009404:	d908      	bls.n	8009418 <acc_cpd_dll_calibration+0x268>
 8009406:	4bc6      	ldr	r3, [pc, #792]	; (8009720 <acc_cpd_dll_calibration+0x570>)
 8009408:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800940a:	9200      	str	r2, [sp, #0]
 800940c:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800940e:	4ac5      	ldr	r2, [pc, #788]	; (8009724 <acc_cpd_dll_calibration+0x574>)
 8009410:	49c5      	ldr	r1, [pc, #788]	; (8009728 <acc_cpd_dll_calibration+0x578>)
 8009412:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009414:	2004      	movs	r0, #4
 8009416:	47a0      	blx	r4
 8009418:	f7fc f98a 	bl	8005730 <acc_rss_integration_log_level>
 800941c:	2803      	cmp	r0, #3
 800941e:	d908      	bls.n	8009432 <acc_cpd_dll_calibration+0x282>
 8009420:	4bbf      	ldr	r3, [pc, #764]	; (8009720 <acc_cpd_dll_calibration+0x570>)
 8009422:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009424:	9200      	str	r2, [sp, #0]
 8009426:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8009428:	4ac0      	ldr	r2, [pc, #768]	; (800972c <acc_cpd_dll_calibration+0x57c>)
 800942a:	49bf      	ldr	r1, [pc, #764]	; (8009728 <acc_cpd_dll_calibration+0x578>)
 800942c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800942e:	2004      	movs	r0, #4
 8009430:	47a0      	blx	r4
 8009432:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009434:	aa20      	add	r2, sp, #128	; 0x80
 8009436:	429a      	cmp	r2, r3
 8009438:	f000 8332 	beq.w	8009aa0 <acc_cpd_dll_calibration+0x8f0>
 800943c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800943e:	48bc      	ldr	r0, [pc, #752]	; (8009730 <acc_cpd_dll_calibration+0x580>)
 8009440:	f812 3b01 	ldrb.w	r3, [r2], #1
 8009444:	9311      	str	r3, [sp, #68]	; 0x44
 8009446:	461c      	mov	r4, r3
 8009448:	4619      	mov	r1, r3
 800944a:	920d      	str	r2, [sp, #52]	; 0x34
 800944c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8009450:	f003 f870 	bl	800c534 <acc_diagnostic_log_set_parameter>
 8009454:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8009456:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800945a:	eb06 0544 	add.w	r5, r6, r4, lsl #1
 800945e:	4629      	mov	r1, r5
 8009460:	ab2c      	add	r3, sp, #176	; 0xb0
 8009462:	aa39      	add	r2, sp, #228	; 0xe4
 8009464:	2019      	movs	r0, #25
 8009466:	f000 fd8f 	bl	8009f88 <acc_dll_plateau_finder>
 800946a:	9016      	str	r0, [sp, #88]	; 0x58
 800946c:	2800      	cmp	r0, #0
 800946e:	d0d3      	beq.n	8009418 <acc_cpd_dll_calibration+0x268>
 8009470:	f836 3014 	ldrh.w	r3, [r6, r4, lsl #1]
 8009474:	49af      	ldr	r1, [pc, #700]	; (8009734 <acc_cpd_dll_calibration+0x584>)
 8009476:	eddf 6abc 	vldr	s13, [pc, #752]	; 8009768 <acc_cpd_dll_calibration+0x5b8>
 800947a:	ee07 3a10 	vmov	s14, r3
 800947e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009480:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8009484:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8009488:	49ab      	ldr	r1, [pc, #684]	; (8009738 <acc_cpd_dll_calibration+0x588>)
 800948a:	ee27 7a09 	vmul.f32	s14, s14, s18
 800948e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8009492:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8009496:	1ad3      	subs	r3, r2, r3
 8009498:	ee37 7a46 	vsub.f32	s14, s14, s12
 800949c:	b21b      	sxth	r3, r3
 800949e:	ee07 3a90 	vmov	s15, r3
 80094a2:	ee27 7a28 	vmul.f32	s14, s14, s17
 80094a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80094aa:	ee27 7a26 	vmul.f32	s14, s14, s13
 80094ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80094b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80094b6:	ee17 3a90 	vmov	r3, s15
 80094ba:	b21a      	sxth	r2, r3
 80094bc:	f5a2 7343 	sub.w	r3, r2, #780	; 0x30c
 80094c0:	b29b      	uxth	r3, r3
 80094c2:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 80094c6:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
 80094ca:	f200 82dd 	bhi.w	8009a88 <acc_cpd_dll_calibration+0x8d8>
 80094ce:	f8bd 40e4 	ldrh.w	r4, [sp, #228]	; 0xe4
 80094d2:	4b9a      	ldr	r3, [pc, #616]	; (800973c <acc_cpd_dll_calibration+0x58c>)
 80094d4:	a946      	add	r1, sp, #280	; 0x118
 80094d6:	eb01 0144 	add.w	r1, r1, r4, lsl #1
 80094da:	ee07 2a90 	vmov	s15, r2
 80094de:	f831 6c68 	ldrh.w	r6, [r1, #-104]
 80094e2:	9613      	str	r6, [sp, #76]	; 0x4c
 80094e4:	4632      	mov	r2, r6
 80094e6:	fba3 2302 	umull	r2, r3, r3, r2
 80094ea:	f3c3 0387 	ubfx	r3, r3, #2, #8
 80094ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80094f2:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
 80094f6:	ee07 3a90 	vmov	s15, r3
 80094fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094fe:	ee67 7a89 	vmul.f32	s15, s15, s18
 8009502:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8009506:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800950a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800950e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009512:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009516:	ee17 3a90 	vmov	r3, s15
 800951a:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
 800951e:	f7fc f907 	bl	8005730 <acc_rss_integration_log_level>
 8009522:	2803      	cmp	r0, #3
 8009524:	d907      	bls.n	8009536 <acc_cpd_dll_calibration+0x386>
 8009526:	4a7e      	ldr	r2, [pc, #504]	; (8009720 <acc_cpd_dll_calibration+0x570>)
 8009528:	9600      	str	r6, [sp, #0]
 800952a:	4623      	mov	r3, r4
 800952c:	497e      	ldr	r1, [pc, #504]	; (8009728 <acc_cpd_dll_calibration+0x578>)
 800952e:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8009530:	4a83      	ldr	r2, [pc, #524]	; (8009740 <acc_cpd_dll_calibration+0x590>)
 8009532:	2004      	movs	r0, #4
 8009534:	47a0      	blx	r4
 8009536:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009538:	4882      	ldr	r0, [pc, #520]	; (8009744 <acc_cpd_dll_calibration+0x594>)
 800953a:	f002 fffb 	bl	800c534 <acc_diagnostic_log_set_parameter>
 800953e:	4982      	ldr	r1, [pc, #520]	; (8009748 <acc_cpd_dll_calibration+0x598>)
 8009540:	4882      	ldr	r0, [pc, #520]	; (800974c <acc_cpd_dll_calibration+0x59c>)
 8009542:	f002 ffff 	bl	800c544 <acc_diagnostic_log_array>
 8009546:	2101      	movs	r1, #1
 8009548:	f10d 006a 	add.w	r0, sp, #106	; 0x6a
 800954c:	f003 f812 	bl	800c574 <acc_diagnostic_log_data_i16>
 8009550:	497d      	ldr	r1, [pc, #500]	; (8009748 <acc_cpd_dll_calibration+0x598>)
 8009552:	487f      	ldr	r0, [pc, #508]	; (8009750 <acc_cpd_dll_calibration+0x5a0>)
 8009554:	f002 fff6 	bl	800c544 <acc_diagnostic_log_array>
 8009558:	2101      	movs	r1, #1
 800955a:	a81a      	add	r0, sp, #104	; 0x68
 800955c:	f003 f80a 	bl	800c574 <acc_diagnostic_log_data_i16>
 8009560:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
 8009564:	f2a3 431a 	subw	r3, r3, #1050	; 0x41a
 8009568:	b29b      	uxth	r3, r3
 800956a:	2bc8      	cmp	r3, #200	; 0xc8
 800956c:	f200 8330 	bhi.w	8009bd0 <acc_cpd_dll_calibration+0xa20>
 8009570:	2302      	movs	r3, #2
 8009572:	9315      	str	r3, [sp, #84]	; 0x54
 8009574:	211b      	movs	r1, #27
 8009576:	b28b      	uxth	r3, r1
 8009578:	461c      	mov	r4, r3
 800957a:	4876      	ldr	r0, [pc, #472]	; (8009754 <acc_cpd_dll_calibration+0x5a4>)
 800957c:	9318      	str	r3, [sp, #96]	; 0x60
 800957e:	f002 ffd9 	bl	800c534 <acc_diagnostic_log_set_parameter>
 8009582:	4620      	mov	r0, r4
 8009584:	aa26      	add	r2, sp, #152	; 0x98
 8009586:	217c      	movs	r1, #124	; 0x7c
 8009588:	f7fe fd7a 	bl	8008080 <acc_dll_calculate_area_settings>
 800958c:	f899 301c 	ldrb.w	r3, [r9, #28]
 8009590:	2b00      	cmp	r3, #0
 8009592:	f000 8274 	beq.w	8009a7e <acc_cpd_dll_calibration+0x8ce>
 8009596:	f899 301d 	ldrb.w	r3, [r9, #29]
 800959a:	f083 0301 	eor.w	r3, r3, #1
 800959e:	f8b9 2010 	ldrh.w	r2, [r9, #16]
 80095a2:	f8d9 100c 	ldr.w	r1, [r9, #12]
 80095a6:	f8bd b0ac 	ldrh.w	fp, [sp, #172]	; 0xac
 80095aa:	f8bd c098 	ldrh.w	ip, [sp, #152]	; 0x98
 80095ae:	f8bd 709a 	ldrh.w	r7, [sp, #154]	; 0x9a
 80095b2:	f8bd 609e 	ldrh.w	r6, [sp, #158]	; 0x9e
 80095b6:	f8bd 50a0 	ldrh.w	r5, [sp, #160]	; 0xa0
 80095ba:	e9d9 4001 	ldrd	r4, r0, [r9, #4]
 80095be:	e9d9 8e05 	ldrd	r8, lr, [r9, #20]
 80095c2:	f8aa 200c 	strh.w	r2, [sl, #12]
 80095c6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80095c8:	f8ca 2018 	str.w	r2, [sl, #24]
 80095cc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80095ce:	f8ca 1008 	str.w	r1, [sl, #8]
 80095d2:	f8ca 201c 	str.w	r2, [sl, #28]
 80095d6:	f8bd 10aa 	ldrh.w	r1, [sp, #170]	; 0xaa
 80095da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80095dc:	f8ca 4000 	str.w	r4, [sl]
 80095e0:	e9ca 8e04 	strd	r8, lr, [sl, #16]
 80095e4:	f8bd 40a4 	ldrh.w	r4, [sp, #164]	; 0xa4
 80095e8:	f8ca 0004 	str.w	r0, [sl, #4]
 80095ec:	f04f 0e01 	mov.w	lr, #1
 80095f0:	f8bd 00a6 	ldrh.w	r0, [sp, #166]	; 0xa6
 80095f4:	f8ca 2020 	str.w	r2, [sl, #32]
 80095f8:	2200      	movs	r2, #0
 80095fa:	f8ca c028 	str.w	ip, [sl, #40]	; 0x28
 80095fe:	f8ca 702c 	str.w	r7, [sl, #44]	; 0x2c
 8009602:	f04f 0c06 	mov.w	ip, #6
 8009606:	2703      	movs	r7, #3
 8009608:	f8ca 6030 	str.w	r6, [sl, #48]	; 0x30
 800960c:	f8ca 5034 	str.w	r5, [sl, #52]	; 0x34
 8009610:	f06f 0601 	mvn.w	r6, #1
 8009614:	f8ca 4038 	str.w	r4, [sl, #56]	; 0x38
 8009618:	f8ca 003c 	str.w	r0, [sl, #60]	; 0x3c
 800961c:	240f      	movs	r4, #15
 800961e:	e9ca 1b10 	strd	r1, fp, [sl, #64]	; 0x40
 8009622:	2007      	movs	r0, #7
 8009624:	e9ca 2e12 	strd	r2, lr, [sl, #72]	; 0x48
 8009628:	e9ca e216 	strd	lr, r2, [sl, #88]	; 0x58
 800962c:	e9ca 2214 	strd	r2, r2, [sl, #80]	; 0x50
 8009630:	e9ca 2218 	strd	r2, r2, [sl, #96]	; 0x60
 8009634:	e9ca 2227 	strd	r2, r2, [sl, #156]	; 0x9c
 8009638:	f8ca 2068 	str.w	r2, [sl, #104]	; 0x68
 800963c:	f8ca 2078 	str.w	r2, [sl, #120]	; 0x78
 8009640:	f8ca 2084 	str.w	r2, [sl, #132]	; 0x84
 8009644:	f8aa 208c 	strh.w	r2, [sl, #140]	; 0x8c
 8009648:	2516      	movs	r5, #22
 800964a:	2200      	movs	r2, #0
 800964c:	e9ca c724 	strd	ip, r7, [sl, #144]	; 0x90
 8009650:	e9ca ee1c 	strd	lr, lr, [sl, #112]	; 0x70
 8009654:	e9ca 541f 	strd	r5, r4, [sl, #124]	; 0x7c
 8009658:	f8ca e0a4 	str.w	lr, [sl, #164]	; 0xa4
 800965c:	f8ca 20a8 	str.w	r2, [sl, #168]	; 0xa8
 8009660:	f88a e0ad 	strb.w	lr, [sl, #173]	; 0xad
 8009664:	f8ca 306c 	str.w	r3, [sl, #108]	; 0x6c
 8009668:	f8ca 6098 	str.w	r6, [sl, #152]	; 0x98
 800966c:	f8ca 0088 	str.w	r0, [sl, #136]	; 0x88
 8009670:	f7fb ffae 	bl	80055d0 <acc_rss_integration_get_sensor_reference_frequency>
 8009674:	f8b9 301e 	ldrh.w	r3, [r9, #30]
 8009678:	f899 201c 	ldrb.w	r2, [r9, #28]
 800967c:	ed8a 0a2c 	vstr	s0, [sl, #176]	; 0xb0
 8009680:	3b01      	subs	r3, #1
 8009682:	e9ca 232d 	strd	r2, r3, [sl, #180]	; 0xb4
 8009686:	f9bd 3068 	ldrsh.w	r3, [sp, #104]	; 0x68
 800968a:	930f      	str	r3, [sp, #60]	; 0x3c
 800968c:	f04f 0100 	mov.w	r1, #0
 8009690:	f9bd 306a 	ldrsh.w	r3, [sp, #106]	; 0x6a
 8009694:	f88a 10ac 	strb.w	r1, [sl, #172]	; 0xac
 8009698:	9314      	str	r3, [sp, #80]	; 0x50
 800969a:	a926      	add	r1, sp, #152	; 0x98
 800969c:	f89a 308c 	ldrb.w	r3, [sl, #140]	; 0x8c
 80096a0:	9308      	str	r3, [sp, #32]
 80096a2:	4650      	mov	r0, sl
 80096a4:	f8d9 b000 	ldr.w	fp, [r9]
 80096a8:	f8da 4094 	ldr.w	r4, [sl, #148]	; 0x94
 80096ac:	f8da 60a4 	ldr.w	r6, [sl, #164]	; 0xa4
 80096b0:	f8da 7080 	ldr.w	r7, [sl, #128]	; 0x80
 80096b4:	f001 fc38 	bl	800af28 <acc_cpd_linear_sweep_get_info>
 80096b8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80096ba:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80096bc:	429a      	cmp	r2, r3
 80096be:	f000 81fb 	beq.w	8009ab8 <acc_cpd_dll_calibration+0x908>
 80096c2:	f899 301c 	ldrb.w	r3, [r9, #28]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	f000 81db 	beq.w	8009a82 <acc_cpd_dll_calibration+0x8d2>
 80096cc:	f8b9 301e 	ldrh.w	r3, [r9, #30]
 80096d0:	ee0c 3a90 	vmov	s25, r3
 80096d4:	ee1c 2a10 	vmov	r2, s24
 80096d8:	ee1b 1a90 	vmov	r1, s23
 80096dc:	4653      	mov	r3, sl
 80096de:	4658      	mov	r0, fp
 80096e0:	9d26      	ldr	r5, [sp, #152]	; 0x98
 80096e2:	f000 fe93 	bl	800a40c <acc_cpd_linear_sweep_load_program>
 80096e6:	2800      	cmp	r0, #0
 80096e8:	f000 81b9 	beq.w	8009a5e <acc_cpd_dll_calibration+0x8ae>
 80096ec:	f899 301c 	ldrb.w	r3, [r9, #28]
 80096f0:	930a      	str	r3, [sp, #40]	; 0x28
 80096f2:	b113      	cbz	r3, 80096fa <acc_cpd_dll_calibration+0x54a>
 80096f4:	f899 301d 	ldrb.w	r3, [r9, #29]
 80096f8:	930a      	str	r3, [sp, #40]	; 0x28
 80096fa:	ee07 6a90 	vmov	s15, r6
 80096fe:	eddf 6a16 	vldr	s13, [pc, #88]	; 8009758 <acc_cpd_dll_calibration+0x5a8>
 8009702:	ed9f ba16 	vldr	s22, [pc, #88]	; 800975c <acc_cpd_dll_calibration+0x5ac>
 8009706:	eddf aa16 	vldr	s21, [pc, #88]	; 8009760 <acc_cpd_dll_calibration+0x5b0>
 800970a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800970e:	3401      	adds	r4, #1
 8009710:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009714:	b2a4      	uxth	r4, r4
 8009716:	e029      	b.n	800976c <acc_cpd_dll_calibration+0x5bc>
 8009718:	0800fb64 	.word	0x0800fb64
 800971c:	0800fb94 	.word	0x0800fb94
 8009720:	200004c0 	.word	0x200004c0
 8009724:	0800fac4 	.word	0x0800fac4
 8009728:	0800f7bc 	.word	0x0800f7bc
 800972c:	0800fb28 	.word	0x0800fb28
 8009730:	0800f830 	.word	0x0800f830
 8009734:	080138a4 	.word	0x080138a4
 8009738:	0801389c 	.word	0x0801389c
 800973c:	cccccccd 	.word	0xcccccccd
 8009740:	0800f8a8 	.word	0x0800f8a8
 8009744:	0800f824 	.word	0x0800f824
 8009748:	0800f8c0 	.word	0x0800f8c0
 800974c:	0800f8e4 	.word	0x0800f8e4
 8009750:	0800f8ec 	.word	0x0800f8ec
 8009754:	0800f818 	.word	0x0800f818
 8009758:	42f80000 	.word	0x42f80000
 800975c:	42640000 	.word	0x42640000
 8009760:	42172c98 	.word	0x42172c98
 8009764:	402ca8ad 	.word	0x402ca8ad
 8009768:	447a0000 	.word	0x447a0000
 800976c:	ee1c 2a90 	vmov	r2, s25
 8009770:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009774:	ee17 3a90 	vmov	r3, s15
 8009778:	b29b      	uxth	r3, r3
 800977a:	fb04 f303 	mul.w	r3, r4, r3
 800977e:	441d      	add	r5, r3
 8009780:	18aa      	adds	r2, r5, r2
 8009782:	9317      	str	r3, [sp, #92]	; 0x5c
 8009784:	920b      	str	r2, [sp, #44]	; 0x2c
 8009786:	ea4f 0843 	mov.w	r8, r3, lsl #1
 800978a:	4658      	mov	r0, fp
 800978c:	f001 fb76 	bl	800ae7c <acc_cpd_linear_sweep_run_program>
 8009790:	2800      	cmp	r0, #0
 8009792:	f000 8164 	beq.w	8009a5e <acc_cpd_dll_calibration+0x8ae>
 8009796:	ed1f aa0d 	vldr	s20, [pc, #-52]	; 8009764 <acc_cpd_dll_calibration+0x5b4>
 800979a:	ed5f 9a0d 	vldr	s19, [pc, #-52]	; 8009768 <acc_cpd_dll_calibration+0x5b8>
 800979e:	2600      	movs	r6, #0
 80097a0:	ab1c      	add	r3, sp, #112	; 0x70
 80097a2:	2264      	movs	r2, #100	; 0x64
 80097a4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80097a8:	4658      	mov	r0, fp
 80097aa:	f7fd ff2f 	bl	800760c <acc_sensor_protocol_r2_wait_for_event>
 80097ae:	2800      	cmp	r0, #0
 80097b0:	f000 8155 	beq.w	8009a5e <acc_cpd_dll_calibration+0x8ae>
 80097b4:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
 80097b8:	2b06      	cmp	r3, #6
 80097ba:	f040 8150 	bne.w	8009a5e <acc_cpd_dll_calibration+0x8ae>
 80097be:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80097c2:	ee1c 0a10 	vmov	r0, s24
 80097c6:	f7fd faeb 	bl	8006da0 <acc_sensor_r2_buffer_processed_verify_size>
 80097ca:	2800      	cmp	r0, #0
 80097cc:	f000 813d 	beq.w	8009a4a <acc_cpd_dll_calibration+0x89a>
 80097d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80097d2:	ee1b 1a90 	vmov	r1, s23
 80097d6:	4658      	mov	r0, fp
 80097d8:	f7fe f862 	bl	80078a0 <acc_sensor_protocol_r2_transfer_data>
 80097dc:	4604      	mov	r4, r0
 80097de:	2800      	cmp	r0, #0
 80097e0:	f000 813d 	beq.w	8009a5e <acc_cpd_dll_calibration+0x8ae>
 80097e4:	9d26      	ldr	r5, [sp, #152]	; 0x98
 80097e6:	f899 301c 	ldrb.w	r3, [r9, #28]
 80097ea:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 80097ee:	b1fb      	cbz	r3, 8009830 <acc_cpd_dll_calibration+0x680>
 80097f0:	ee1c 3a90 	vmov	r3, s25
 80097f4:	eb05 0208 	add.w	r2, r5, r8
 80097f8:	4659      	mov	r1, fp
 80097fa:	2001      	movs	r0, #1
 80097fc:	920c      	str	r2, [sp, #48]	; 0x30
 80097fe:	f7fe faa3 	bl	8007d48 <acc_probes_execute_uint16>
 8009802:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009804:	ee1c 1a90 	vmov	r1, s25
 8009808:	4610      	mov	r0, r2
 800980a:	f7fe f987 	bl	8007b1c <acc_alg_cca_u16_calculate>
 800980e:	eeb4 0acb 	vcmpe.f32	s0, s22
 8009812:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009818:	bfcc      	ite	gt
 800981a:	2301      	movgt	r3, #1
 800981c:	2300      	movle	r3, #0
 800981e:	ed82 0a07 	vstr	s0, [r2, #28]
 8009822:	7653      	strb	r3, [r2, #25]
 8009824:	f300 8237 	bgt.w	8009c96 <acc_cpd_dll_calibration+0xae6>
 8009828:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800982a:	2b00      	cmp	r3, #0
 800982c:	f040 80f1 	bne.w	8009a12 <acc_cpd_dll_calibration+0x862>
 8009830:	eeb0 0a6a 	vmov.f32	s0, s21
 8009834:	4641      	mov	r1, r8
 8009836:	4628      	mov	r0, r5
 8009838:	f002 f85c 	bl	800b8f4 <acc_alg_basic_saturation_check_u16>
 800983c:	2800      	cmp	r0, #0
 800983e:	f040 80c6 	bne.w	80099ce <acc_cpd_dll_calibration+0x81e>
 8009842:	2f00      	cmp	r7, #0
 8009844:	f040 814b 	bne.w	8009ade <acc_cpd_dll_calibration+0x92e>
 8009848:	9b08      	ldr	r3, [sp, #32]
 800984a:	2b00      	cmp	r3, #0
 800984c:	f040 81a8 	bne.w	8009ba0 <acc_cpd_dll_calibration+0x9f0>
 8009850:	f7fb ff6e 	bl	8005730 <acc_rss_integration_log_level>
 8009854:	2803      	cmp	r0, #3
 8009856:	d905      	bls.n	8009864 <acc_cpd_dll_calibration+0x6b4>
 8009858:	4bbf      	ldr	r3, [pc, #764]	; (8009b58 <acc_cpd_dll_calibration+0x9a8>)
 800985a:	4ac0      	ldr	r2, [pc, #768]	; (8009b5c <acc_cpd_dll_calibration+0x9ac>)
 800985c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800985e:	49c0      	ldr	r1, [pc, #768]	; (8009b60 <acc_cpd_dll_calibration+0x9b0>)
 8009860:	2004      	movs	r0, #4
 8009862:	4798      	blx	r3
 8009864:	eeb0 0a4a 	vmov.f32	s0, s20
 8009868:	4641      	mov	r1, r8
 800986a:	4628      	mov	r0, r5
 800986c:	f002 f842 	bl	800b8f4 <acc_alg_basic_saturation_check_u16>
 8009870:	2800      	cmp	r0, #0
 8009872:	f040 81a2 	bne.w	8009bba <acc_cpd_dll_calibration+0xa0a>
 8009876:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8009878:	f8da 2020 	ldr.w	r2, [sl, #32]
 800987c:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 8009880:	49b8      	ldr	r1, [pc, #736]	; (8009b64 <acc_cpd_dll_calibration+0x9b4>)
 8009882:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8009884:	ee06 3a90 	vmov	s13, r3
 8009888:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800988a:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 800988e:	615f      	str	r7, [r3, #20]
 8009890:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8009894:	f831 3012 	ldrh.w	r3, [r1, r2, lsl #1]
 8009898:	49b3      	ldr	r1, [pc, #716]	; (8009b68 <acc_cpd_dll_calibration+0x9b8>)
 800989a:	ee66 6a89 	vmul.f32	s13, s13, s18
 800989e:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80098a2:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80098a6:	ee76 6ae5 	vsub.f32	s13, s13, s11
 80098aa:	1a5b      	subs	r3, r3, r1
 80098ac:	b21b      	sxth	r3, r3
 80098ae:	ee07 0a90 	vmov	s15, r0
 80098b2:	ee08 3a10 	vmov	s16, r3
 80098b6:	e9dd 0208 	ldrd	r0, r2, [sp, #32]
 80098ba:	ee66 6aa8 	vmul.f32	s13, s13, s17
 80098be:	eeb8 6ac8 	vcvt.f32.s32	s12, s16
 80098c2:	ee66 6aa9 	vmul.f32	s13, s13, s19
 80098c6:	7610      	strb	r0, [r2, #24]
 80098c8:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80098ca:	49a8      	ldr	r1, [pc, #672]	; (8009b6c <acc_cpd_dll_calibration+0x9bc>)
 80098cc:	f834 3012 	ldrh.w	r3, [r4, r2, lsl #1]
 80098d0:	48a7      	ldr	r0, [pc, #668]	; (8009b70 <acc_cpd_dll_calibration+0x9c0>)
 80098d2:	ee76 6a66 	vsub.f32	s13, s12, s13
 80098d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098da:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 80098de:	ee07 3a10 	vmov	s14, r3
 80098e2:	ee67 7a89 	vmul.f32	s15, s15, s18
 80098e6:	ee16 3a90 	vmov	r3, s13
 80098ea:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80098ee:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80098f2:	b21b      	sxth	r3, r3
 80098f4:	ee06 3a90 	vmov	s13, r3
 80098f8:	ee27 7a09 	vmul.f32	s14, s14, s18
 80098fc:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8009900:	ee37 7a65 	vsub.f32	s14, s14, s11
 8009904:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8009908:	ee67 7aa9 	vmul.f32	s15, s15, s19
 800990c:	ee27 7a28 	vmul.f32	s14, s14, s17
 8009910:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009914:	ee27 7a29 	vmul.f32	s14, s14, s19
 8009918:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800991c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8009920:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
 8009924:	ee17 3a90 	vmov	r3, s15
 8009928:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
 800992c:	ee17 3a10 	vmov	r3, s14
 8009930:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
 8009934:	f002 fe06 	bl	800c544 <acc_diagnostic_log_array>
 8009938:	2101      	movs	r1, #1
 800993a:	a81b      	add	r0, sp, #108	; 0x6c
 800993c:	f002 fe1a 	bl	800c574 <acc_diagnostic_log_data_i16>
 8009940:	498a      	ldr	r1, [pc, #552]	; (8009b6c <acc_cpd_dll_calibration+0x9bc>)
 8009942:	488b      	ldr	r0, [pc, #556]	; (8009b70 <acc_cpd_dll_calibration+0x9c0>)
 8009944:	f002 fdfe 	bl	800c544 <acc_diagnostic_log_array>
 8009948:	2101      	movs	r1, #1
 800994a:	f10d 006e 	add.w	r0, sp, #110	; 0x6e
 800994e:	f002 fe11 	bl	800c574 <acc_diagnostic_log_data_i16>
 8009952:	4986      	ldr	r1, [pc, #536]	; (8009b6c <acc_cpd_dll_calibration+0x9bc>)
 8009954:	4887      	ldr	r0, [pc, #540]	; (8009b74 <acc_cpd_dll_calibration+0x9c4>)
 8009956:	f002 fdf5 	bl	800c544 <acc_diagnostic_log_array>
 800995a:	2101      	movs	r1, #1
 800995c:	a81c      	add	r0, sp, #112	; 0x70
 800995e:	f002 fe09 	bl	800c574 <acc_diagnostic_log_data_i16>
 8009962:	f8bd 206c 	ldrh.w	r2, [sp, #108]	; 0x6c
 8009966:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009968:	1a9b      	subs	r3, r3, r2
 800996a:	b21b      	sxth	r3, r3
 800996c:	2b00      	cmp	r3, #0
 800996e:	bfb8      	it	lt
 8009970:	425b      	neglt	r3, r3
 8009972:	b21b      	sxth	r3, r3
 8009974:	2b64      	cmp	r3, #100	; 0x64
 8009976:	f77f ad0f 	ble.w	8009398 <acc_cpd_dll_calibration+0x1e8>
 800997a:	2e02      	cmp	r6, #2
 800997c:	d00f      	beq.n	800999e <acc_cpd_dll_calibration+0x7ee>
 800997e:	f7fb fed7 	bl	8005730 <acc_rss_integration_log_level>
 8009982:	2803      	cmp	r0, #3
 8009984:	d906      	bls.n	8009994 <acc_cpd_dll_calibration+0x7e4>
 8009986:	4b74      	ldr	r3, [pc, #464]	; (8009b58 <acc_cpd_dll_calibration+0x9a8>)
 8009988:	4a7b      	ldr	r2, [pc, #492]	; (8009b78 <acc_cpd_dll_calibration+0x9c8>)
 800998a:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800998c:	4974      	ldr	r1, [pc, #464]	; (8009b60 <acc_cpd_dll_calibration+0x9b0>)
 800998e:	4633      	mov	r3, r6
 8009990:	2004      	movs	r0, #4
 8009992:	47a0      	blx	r4
 8009994:	4658      	mov	r0, fp
 8009996:	3601      	adds	r6, #1
 8009998:	f7fd fdaa 	bl	80074f0 <acc_sensor_protocol_r2_ack_event>
 800999c:	e700      	b.n	80097a0 <acc_cpd_dll_calibration+0x5f0>
 800999e:	f7fb fec7 	bl	8005730 <acc_rss_integration_log_level>
 80099a2:	2803      	cmp	r0, #3
 80099a4:	d92f      	bls.n	8009a06 <acc_cpd_dll_calibration+0x856>
 80099a6:	4b6c      	ldr	r3, [pc, #432]	; (8009b58 <acc_cpd_dll_calibration+0x9a8>)
 80099a8:	4a74      	ldr	r2, [pc, #464]	; (8009b7c <acc_cpd_dll_calibration+0x9cc>)
 80099aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099ac:	496c      	ldr	r1, [pc, #432]	; (8009b60 <acc_cpd_dll_calibration+0x9b0>)
 80099ae:	2004      	movs	r0, #4
 80099b0:	4798      	blx	r3
 80099b2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80099b6:	4658      	mov	r0, fp
 80099b8:	f7fd fec0 	bl	800773c <acc_sensor_protocol_r2_stop>
 80099bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80099be:	2b01      	cmp	r3, #1
 80099c0:	f04f 0100 	mov.w	r1, #0
 80099c4:	f43f ad1b 	beq.w	80093fe <acc_cpd_dll_calibration+0x24e>
 80099c8:	2301      	movs	r3, #1
 80099ca:	9315      	str	r3, [sp, #84]	; 0x54
 80099cc:	e5d3      	b.n	8009576 <acc_cpd_dll_calibration+0x3c6>
 80099ce:	eeb0 0a4a 	vmov.f32	s0, s20
 80099d2:	4641      	mov	r1, r8
 80099d4:	4628      	mov	r0, r5
 80099d6:	f001 ff8d 	bl	800b8f4 <acc_alg_basic_saturation_check_u16>
 80099da:	2800      	cmp	r0, #0
 80099dc:	f43f af4b 	beq.w	8009876 <acc_cpd_dll_calibration+0x6c6>
 80099e0:	2f0f      	cmp	r7, #15
 80099e2:	f040 80ea 	bne.w	8009bba <acc_cpd_dll_calibration+0xa0a>
 80099e6:	9b08      	ldr	r3, [sp, #32]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	f000 80fd 	beq.w	8009be8 <acc_cpd_dll_calibration+0xa38>
 80099ee:	f7fb fe9f 	bl	8005730 <acc_rss_integration_log_level>
 80099f2:	2803      	cmp	r0, #3
 80099f4:	f67f af3f 	bls.w	8009876 <acc_cpd_dll_calibration+0x6c6>
 80099f8:	4b57      	ldr	r3, [pc, #348]	; (8009b58 <acc_cpd_dll_calibration+0x9a8>)
 80099fa:	4a61      	ldr	r2, [pc, #388]	; (8009b80 <acc_cpd_dll_calibration+0x9d0>)
 80099fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099fe:	4958      	ldr	r1, [pc, #352]	; (8009b60 <acc_cpd_dll_calibration+0x9b0>)
 8009a00:	2004      	movs	r0, #4
 8009a02:	4798      	blx	r3
 8009a04:	e737      	b.n	8009876 <acc_cpd_dll_calibration+0x6c6>
 8009a06:	4658      	mov	r0, fp
 8009a08:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8009a0c:	f7fd fe96 	bl	800773c <acc_sensor_protocol_r2_stop>
 8009a10:	e4ef      	b.n	80093f2 <acc_cpd_dll_calibration+0x242>
 8009a12:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8009a16:	4658      	mov	r0, fp
 8009a18:	f7fd fe90 	bl	800773c <acc_sensor_protocol_r2_stop>
 8009a1c:	4658      	mov	r0, fp
 8009a1e:	f7fd fd55 	bl	80074cc <acc_sensor_protocol_r2_is_sensor_running>
 8009a22:	900a      	str	r0, [sp, #40]	; 0x28
 8009a24:	bb10      	cbnz	r0, 8009a6c <acc_cpd_dll_calibration+0x8bc>
 8009a26:	f002 fdc5 	bl	800c5b4 <acc_image_a111_r2c_sweep_get>
 8009a2a:	900c      	str	r0, [sp, #48]	; 0x30
 8009a2c:	f002 fdc6 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 8009a30:	4a54      	ldr	r2, [pc, #336]	; (8009b84 <acc_cpd_dll_calibration+0x9d4>)
 8009a32:	9202      	str	r2, [sp, #8]
 8009a34:	2401      	movs	r4, #1
 8009a36:	2272      	movs	r2, #114	; 0x72
 8009a38:	e9cd 2400 	strd	r2, r4, [sp]
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009a40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a42:	4658      	mov	r0, fp
 8009a44:	f002 fcde 	bl	800c404 <acc_confprogram_live_patch>
 8009a48:	e69f      	b.n	800978a <acc_cpd_dll_calibration+0x5da>
 8009a4a:	4b43      	ldr	r3, [pc, #268]	; (8009b58 <acc_cpd_dll_calibration+0x9a8>)
 8009a4c:	4944      	ldr	r1, [pc, #272]	; (8009b60 <acc_cpd_dll_calibration+0x9b0>)
 8009a4e:	4a4e      	ldr	r2, [pc, #312]	; (8009b88 <acc_cpd_dll_calibration+0x9d8>)
 8009a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a52:	4798      	blx	r3
 8009a54:	4658      	mov	r0, fp
 8009a56:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8009a5a:	f7fd fe6f 	bl	800773c <acc_sensor_protocol_r2_stop>
 8009a5e:	2400      	movs	r4, #0
 8009a60:	4620      	mov	r0, r4
 8009a62:	b047      	add	sp, #284	; 0x11c
 8009a64:	ecbd 8b0a 	vpop	{d8-d12}
 8009a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a6c:	4b3a      	ldr	r3, [pc, #232]	; (8009b58 <acc_cpd_dll_calibration+0x9a8>)
 8009a6e:	4a47      	ldr	r2, [pc, #284]	; (8009b8c <acc_cpd_dll_calibration+0x9dc>)
 8009a70:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8009a72:	493b      	ldr	r1, [pc, #236]	; (8009b60 <acc_cpd_dll_calibration+0x9b0>)
 8009a74:	46d9      	mov	r9, fp
 8009a76:	464b      	mov	r3, r9
 8009a78:	2000      	movs	r0, #0
 8009a7a:	47a0      	blx	r4
 8009a7c:	e7ef      	b.n	8009a5e <acc_cpd_dll_calibration+0x8ae>
 8009a7e:	2301      	movs	r3, #1
 8009a80:	e58d      	b.n	800959e <acc_cpd_dll_calibration+0x3ee>
 8009a82:	ee0c 3a90 	vmov	s25, r3
 8009a86:	e625      	b.n	80096d4 <acc_cpd_dll_calibration+0x524>
 8009a88:	f7fb fe52 	bl	8005730 <acc_rss_integration_log_level>
 8009a8c:	2803      	cmp	r0, #3
 8009a8e:	f67f acc3 	bls.w	8009418 <acc_cpd_dll_calibration+0x268>
 8009a92:	4b31      	ldr	r3, [pc, #196]	; (8009b58 <acc_cpd_dll_calibration+0x9a8>)
 8009a94:	4a3e      	ldr	r2, [pc, #248]	; (8009b90 <acc_cpd_dll_calibration+0x9e0>)
 8009a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a98:	4931      	ldr	r1, [pc, #196]	; (8009b60 <acc_cpd_dll_calibration+0x9b0>)
 8009a9a:	2004      	movs	r0, #4
 8009a9c:	4798      	blx	r3
 8009a9e:	e4bb      	b.n	8009418 <acc_cpd_dll_calibration+0x268>
 8009aa0:	464b      	mov	r3, r9
 8009aa2:	46d1      	mov	r9, sl
 8009aa4:	469a      	mov	sl, r3
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	930e      	str	r3, [sp, #56]	; 0x38
 8009aaa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009aac:	2b01      	cmp	r3, #1
 8009aae:	d0d6      	beq.n	8009a5e <acc_cpd_dll_calibration+0x8ae>
 8009ab0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009ab2:	9319      	str	r3, [sp, #100]	; 0x64
 8009ab4:	f7ff bbc6 	b.w	8009244 <acc_cpd_dll_calibration+0x94>
 8009ab8:	4b27      	ldr	r3, [pc, #156]	; (8009b58 <acc_cpd_dll_calibration+0x9a8>)
 8009aba:	4a36      	ldr	r2, [pc, #216]	; (8009b94 <acc_cpd_dll_calibration+0x9e4>)
 8009abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009abe:	4928      	ldr	r1, [pc, #160]	; (8009b60 <acc_cpd_dll_calibration+0x9b0>)
 8009ac0:	2000      	movs	r0, #0
 8009ac2:	4798      	blx	r3
 8009ac4:	e7cb      	b.n	8009a5e <acc_cpd_dll_calibration+0x8ae>
 8009ac6:	4b24      	ldr	r3, [pc, #144]	; (8009b58 <acc_cpd_dll_calibration+0x9a8>)
 8009ac8:	4a33      	ldr	r2, [pc, #204]	; (8009b98 <acc_cpd_dll_calibration+0x9e8>)
 8009aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009acc:	4924      	ldr	r1, [pc, #144]	; (8009b60 <acc_cpd_dll_calibration+0x9b0>)
 8009ace:	4620      	mov	r0, r4
 8009ad0:	4798      	blx	r3
 8009ad2:	4620      	mov	r0, r4
 8009ad4:	b047      	add	sp, #284	; 0x11c
 8009ad6:	ecbd 8b0a 	vpop	{d8-d12}
 8009ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ade:	2f08      	cmp	r7, #8
 8009ae0:	bf38      	it	cc
 8009ae2:	2708      	movcc	r7, #8
 8009ae4:	f7fb fe24 	bl	8005730 <acc_rss_integration_log_level>
 8009ae8:	2803      	cmp	r0, #3
 8009aea:	f1a7 0708 	sub.w	r7, r7, #8
 8009aee:	d906      	bls.n	8009afe <acc_cpd_dll_calibration+0x94e>
 8009af0:	4b19      	ldr	r3, [pc, #100]	; (8009b58 <acc_cpd_dll_calibration+0x9a8>)
 8009af2:	4a2a      	ldr	r2, [pc, #168]	; (8009b9c <acc_cpd_dll_calibration+0x9ec>)
 8009af4:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8009af6:	491a      	ldr	r1, [pc, #104]	; (8009b60 <acc_cpd_dll_calibration+0x9b0>)
 8009af8:	463b      	mov	r3, r7
 8009afa:	2004      	movs	r0, #4
 8009afc:	47a0      	blx	r4
 8009afe:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8009b02:	4658      	mov	r0, fp
 8009b04:	f7fd fe1a 	bl	800773c <acc_sensor_protocol_r2_stop>
 8009b08:	4658      	mov	r0, fp
 8009b0a:	f7fd fcdf 	bl	80074cc <acc_sensor_protocol_r2_is_sensor_running>
 8009b0e:	4602      	mov	r2, r0
 8009b10:	2800      	cmp	r0, #0
 8009b12:	d1ab      	bne.n	8009a6c <acc_cpd_dll_calibration+0x8bc>
 8009b14:	9210      	str	r2, [sp, #64]	; 0x40
 8009b16:	f002 fd4d 	bl	800c5b4 <acc_image_a111_r2c_sweep_get>
 8009b1a:	900c      	str	r0, [sp, #48]	; 0x30
 8009b1c:	f002 fd4e 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 8009b20:	4c18      	ldr	r4, [pc, #96]	; (8009b84 <acc_cpd_dll_calibration+0x9d4>)
 8009b22:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009b24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009b26:	2544      	movs	r5, #68	; 0x44
 8009b28:	4603      	mov	r3, r0
 8009b2a:	9500      	str	r5, [sp, #0]
 8009b2c:	4658      	mov	r0, fp
 8009b2e:	e9cd 7401 	strd	r7, r4, [sp, #4]
 8009b32:	f002 fc67 	bl	800c404 <acc_confprogram_live_patch>
 8009b36:	f002 fd3d 	bl	800c5b4 <acc_image_a111_r2c_sweep_get>
 8009b3a:	900c      	str	r0, [sp, #48]	; 0x30
 8009b3c:	f002 fd3e 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 8009b40:	2542      	movs	r5, #66	; 0x42
 8009b42:	9a08      	ldr	r2, [sp, #32]
 8009b44:	9201      	str	r2, [sp, #4]
 8009b46:	4603      	mov	r3, r0
 8009b48:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009b4a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009b4c:	9402      	str	r4, [sp, #8]
 8009b4e:	9500      	str	r5, [sp, #0]
 8009b50:	4658      	mov	r0, fp
 8009b52:	f002 fc57 	bl	800c404 <acc_confprogram_live_patch>
 8009b56:	e618      	b.n	800978a <acc_cpd_dll_calibration+0x5da>
 8009b58:	200004c0 	.word	0x200004c0
 8009b5c:	0800f964 	.word	0x0800f964
 8009b60:	0800f7bc 	.word	0x0800f7bc
 8009b64:	080138a4 	.word	0x080138a4
 8009b68:	0801389c 	.word	0x0801389c
 8009b6c:	0800f8c0 	.word	0x0800f8c0
 8009b70:	0800fa34 	.word	0x0800fa34
 8009b74:	0800fa44 	.word	0x0800fa44
 8009b78:	0800fa54 	.word	0x0800fa54
 8009b7c:	0800fa7c 	.word	0x0800fa7c
 8009b80:	0800f9b8 	.word	0x0800f9b8
 8009b84:	08006cd5 	.word	0x08006cd5
 8009b88:	0800f6a4 	.word	0x0800f6a4
 8009b8c:	0800f630 	.word	0x0800f630
 8009b90:	0800f880 	.word	0x0800f880
 8009b94:	0800f91c 	.word	0x0800f91c
 8009b98:	0800e8b0 	.word	0x0800e8b0
 8009b9c:	0800f984 	.word	0x0800f984
 8009ba0:	f7fb fdc6 	bl	8005730 <acc_rss_integration_log_level>
 8009ba4:	2803      	cmp	r0, #3
 8009ba6:	d92d      	bls.n	8009c04 <acc_cpd_dll_calibration+0xa54>
 8009ba8:	4b3e      	ldr	r3, [pc, #248]	; (8009ca4 <acc_cpd_dll_calibration+0xaf4>)
 8009baa:	4a3f      	ldr	r2, [pc, #252]	; (8009ca8 <acc_cpd_dll_calibration+0xaf8>)
 8009bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bae:	493f      	ldr	r1, [pc, #252]	; (8009cac <acc_cpd_dll_calibration+0xafc>)
 8009bb0:	9708      	str	r7, [sp, #32]
 8009bb2:	2004      	movs	r0, #4
 8009bb4:	4798      	blx	r3
 8009bb6:	270f      	movs	r7, #15
 8009bb8:	e7a1      	b.n	8009afe <acc_cpd_dll_calibration+0x94e>
 8009bba:	3708      	adds	r7, #8
 8009bbc:	2f0f      	cmp	r7, #15
 8009bbe:	bf28      	it	cs
 8009bc0:	270f      	movcs	r7, #15
 8009bc2:	f7fb fdb5 	bl	8005730 <acc_rss_integration_log_level>
 8009bc6:	2803      	cmp	r0, #3
 8009bc8:	d999      	bls.n	8009afe <acc_cpd_dll_calibration+0x94e>
 8009bca:	4b36      	ldr	r3, [pc, #216]	; (8009ca4 <acc_cpd_dll_calibration+0xaf4>)
 8009bcc:	4a38      	ldr	r2, [pc, #224]	; (8009cb0 <acc_cpd_dll_calibration+0xb00>)
 8009bce:	e791      	b.n	8009af4 <acc_cpd_dll_calibration+0x944>
 8009bd0:	f7fb fdae 	bl	8005730 <acc_rss_integration_log_level>
 8009bd4:	2803      	cmp	r0, #3
 8009bd6:	f67f ac1f 	bls.w	8009418 <acc_cpd_dll_calibration+0x268>
 8009bda:	4b32      	ldr	r3, [pc, #200]	; (8009ca4 <acc_cpd_dll_calibration+0xaf4>)
 8009bdc:	4a35      	ldr	r2, [pc, #212]	; (8009cb4 <acc_cpd_dll_calibration+0xb04>)
 8009bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009be0:	4932      	ldr	r1, [pc, #200]	; (8009cac <acc_cpd_dll_calibration+0xafc>)
 8009be2:	2004      	movs	r0, #4
 8009be4:	4798      	blx	r3
 8009be6:	e417      	b.n	8009418 <acc_cpd_dll_calibration+0x268>
 8009be8:	9008      	str	r0, [sp, #32]
 8009bea:	f7fb fda1 	bl	8005730 <acc_rss_integration_log_level>
 8009bee:	2803      	cmp	r0, #3
 8009bf0:	9b08      	ldr	r3, [sp, #32]
 8009bf2:	d90a      	bls.n	8009c0a <acc_cpd_dll_calibration+0xa5a>
 8009bf4:	492b      	ldr	r1, [pc, #172]	; (8009ca4 <acc_cpd_dll_calibration+0xaf4>)
 8009bf6:	4a30      	ldr	r2, [pc, #192]	; (8009cb8 <acc_cpd_dll_calibration+0xb08>)
 8009bf8:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 8009bfa:	492c      	ldr	r1, [pc, #176]	; (8009cac <acc_cpd_dll_calibration+0xafc>)
 8009bfc:	2004      	movs	r0, #4
 8009bfe:	47a0      	blx	r4
 8009c00:	2700      	movs	r7, #0
 8009c02:	e77c      	b.n	8009afe <acc_cpd_dll_calibration+0x94e>
 8009c04:	9708      	str	r7, [sp, #32]
 8009c06:	270f      	movs	r7, #15
 8009c08:	e779      	b.n	8009afe <acc_cpd_dll_calibration+0x94e>
 8009c0a:	9308      	str	r3, [sp, #32]
 8009c0c:	2700      	movs	r7, #0
 8009c0e:	e776      	b.n	8009afe <acc_cpd_dll_calibration+0x94e>
 8009c10:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009c12:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
 8009c16:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8009c18:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
 8009c1c:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8009c1e:	6008      	str	r0, [r1, #0]
 8009c20:	818d      	strh	r5, [r1, #12]
 8009c22:	81ca      	strh	r2, [r1, #14]
 8009c24:	820b      	strh	r3, [r1, #16]
 8009c26:	f7fb fd83 	bl	8005730 <acc_rss_integration_log_level>
 8009c2a:	2803      	cmp	r0, #3
 8009c2c:	d909      	bls.n	8009c42 <acc_cpd_dll_calibration+0xa92>
 8009c2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c30:	4a1c      	ldr	r2, [pc, #112]	; (8009ca4 <acc_cpd_dll_calibration+0xaf4>)
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8009c36:	491d      	ldr	r1, [pc, #116]	; (8009cac <acc_cpd_dll_calibration+0xafc>)
 8009c38:	9300      	str	r3, [sp, #0]
 8009c3a:	4a20      	ldr	r2, [pc, #128]	; (8009cbc <acc_cpd_dll_calibration+0xb0c>)
 8009c3c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009c3e:	2004      	movs	r0, #4
 8009c40:	47a8      	blx	r5
 8009c42:	f7fb fd75 	bl	8005730 <acc_rss_integration_log_level>
 8009c46:	2801      	cmp	r0, #1
 8009c48:	d91e      	bls.n	8009c88 <acc_cpd_dll_calibration+0xad8>
 8009c4a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009c4c:	4a1c      	ldr	r2, [pc, #112]	; (8009cc0 <acc_cpd_dll_calibration+0xb10>)
 8009c4e:	7e39      	ldrb	r1, [r7, #24]
 8009c50:	f8df c074 	ldr.w	ip, [pc, #116]	; 8009cc8 <acc_cpd_dll_calibration+0xb18>
 8009c54:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009c56:	89b8      	ldrh	r0, [r7, #12]
 8009c58:	683e      	ldr	r6, [r7, #0]
 8009c5a:	9300      	str	r3, [sp, #0]
 8009c5c:	2900      	cmp	r1, #0
 8009c5e:	bf14      	ite	ne
 8009c60:	4663      	movne	r3, ip
 8009c62:	4613      	moveq	r3, r2
 8009c64:	4d0f      	ldr	r5, [pc, #60]	; (8009ca4 <acc_cpd_dll_calibration+0xaf4>)
 8009c66:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8009c6a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8009c6e:	9306      	str	r3, [sp, #24]
 8009c70:	697b      	ldr	r3, [r7, #20]
 8009c72:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 8009c74:	9305      	str	r3, [sp, #20]
 8009c76:	e9cd 1203 	strd	r1, r2, [sp, #12]
 8009c7a:	e9cd 6001 	strd	r6, r0, [sp, #4]
 8009c7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c80:	4a10      	ldr	r2, [pc, #64]	; (8009cc4 <acc_cpd_dll_calibration+0xb14>)
 8009c82:	490a      	ldr	r1, [pc, #40]	; (8009cac <acc_cpd_dll_calibration+0xafc>)
 8009c84:	2002      	movs	r0, #2
 8009c86:	47a8      	blx	r5
 8009c88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c8a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009c8c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009c8e:	6059      	str	r1, [r3, #4]
 8009c90:	609a      	str	r2, [r3, #8]
 8009c92:	f7ff bb30 	b.w	80092f6 <acc_cpd_dll_calibration+0x146>
 8009c96:	4658      	mov	r0, fp
 8009c98:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8009c9c:	f7fd fd4e 	bl	800773c <acc_sensor_protocol_r2_stop>
 8009ca0:	e6dd      	b.n	8009a5e <acc_cpd_dll_calibration+0x8ae>
 8009ca2:	bf00      	nop
 8009ca4:	200004c0 	.word	0x200004c0
 8009ca8:	0800f93c 	.word	0x0800f93c
 8009cac:	0800f7bc 	.word	0x0800f7bc
 8009cb0:	0800fa00 	.word	0x0800fa00
 8009cb4:	0800f8f4 	.word	0x0800f8f4
 8009cb8:	0800f9d8 	.word	0x0800f9d8
 8009cbc:	0800fa94 	.word	0x0800fa94
 8009cc0:	0800f7b4 	.word	0x0800f7b4
 8009cc4:	0800faf8 	.word	0x0800faf8
 8009cc8:	0800f7ac 	.word	0x0800f7ac

08009ccc <acc_dll_check_direct_leakage>:
 8009ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cd0:	4b44      	ldr	r3, [pc, #272]	; (8009de4 <acc_dll_check_direct_leakage+0x118>)
 8009cd2:	460d      	mov	r5, r1
 8009cd4:	fba3 3101 	umull	r3, r1, r3, r1
 8009cd8:	ea4f 0991 	mov.w	r9, r1, lsr #2
 8009cdc:	f021 0403 	bic.w	r4, r1, #3
 8009ce0:	b084      	sub	sp, #16
 8009ce2:	464b      	mov	r3, r9
 8009ce4:	eb04 0191 	add.w	r1, r4, r1, lsr #2
 8009ce8:	4602      	mov	r2, r0
 8009cea:	4682      	mov	sl, r0
 8009cec:	f002 f9e2 	bl	800c0b4 <acc_alg_power_bins>
 8009cf0:	2d04      	cmp	r5, #4
 8009cf2:	d924      	bls.n	8009d3e <acc_dll_check_direct_leakage+0x72>
 8009cf4:	f1aa 0602 	sub.w	r6, sl, #2
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	4632      	mov	r2, r6
 8009cfc:	461c      	mov	r4, r3
 8009cfe:	f832 1f02 	ldrh.w	r1, [r2, #2]!
 8009d02:	3301      	adds	r3, #1
 8009d04:	428c      	cmp	r4, r1
 8009d06:	bf38      	it	cc
 8009d08:	460c      	movcc	r4, r1
 8009d0a:	4599      	cmp	r9, r3
 8009d0c:	d8f7      	bhi.n	8009cfe <acc_dll_check_direct_leakage+0x32>
 8009d0e:	4b36      	ldr	r3, [pc, #216]	; (8009de8 <acc_dll_check_direct_leakage+0x11c>)
 8009d10:	2d0e      	cmp	r5, #14
 8009d12:	fba3 3404 	umull	r3, r4, r3, r4
 8009d16:	f3c4 084f 	ubfx	r8, r4, #1, #16
 8009d1a:	d910      	bls.n	8009d3e <acc_dll_check_direct_leakage+0x72>
 8009d1c:	2702      	movs	r7, #2
 8009d1e:	f836 5f02 	ldrh.w	r5, [r6, #2]!
 8009d22:	88b4      	ldrh	r4, [r6, #4]
 8009d24:	42a5      	cmp	r5, r4
 8009d26:	d902      	bls.n	8009d2e <acc_dll_check_direct_leakage+0x62>
 8009d28:	4623      	mov	r3, r4
 8009d2a:	462c      	mov	r4, r5
 8009d2c:	461d      	mov	r5, r3
 8009d2e:	4544      	cmp	r4, r8
 8009d30:	d902      	bls.n	8009d38 <acc_dll_check_direct_leakage+0x6c>
 8009d32:	ebb4 0fc5 	cmp.w	r4, r5, lsl #3
 8009d36:	d834      	bhi.n	8009da2 <acc_dll_check_direct_leakage+0xd6>
 8009d38:	3701      	adds	r7, #1
 8009d3a:	45b9      	cmp	r9, r7
 8009d3c:	d8ef      	bhi.n	8009d1e <acc_dll_check_direct_leakage+0x52>
 8009d3e:	ea4f 0559 	mov.w	r5, r9, lsr #1
 8009d42:	f105 0308 	add.w	r3, r5, #8
 8009d46:	454b      	cmp	r3, r9
 8009d48:	d821      	bhi.n	8009d8e <acc_dll_check_direct_leakage+0xc2>
 8009d4a:	f1aa 0202 	sub.w	r2, sl, #2
 8009d4e:	f10a 000e 	add.w	r0, sl, #14
 8009d52:	2400      	movs	r4, #0
 8009d54:	f832 1f02 	ldrh.w	r1, [r2, #2]!
 8009d58:	4290      	cmp	r0, r2
 8009d5a:	440c      	add	r4, r1
 8009d5c:	d1fa      	bne.n	8009d54 <acc_dll_check_direct_leakage+0x88>
 8009d5e:	1c6a      	adds	r2, r5, #1
 8009d60:	4293      	cmp	r3, r2
 8009d62:	bf34      	ite	cc
 8009d64:	2301      	movcc	r3, #1
 8009d66:	2308      	movcs	r3, #8
 8009d68:	442b      	add	r3, r5
 8009d6a:	eb0a 0343 	add.w	r3, sl, r3, lsl #1
 8009d6e:	eb0a 0a45 	add.w	sl, sl, r5, lsl #1
 8009d72:	2500      	movs	r5, #0
 8009d74:	f83a 2b02 	ldrh.w	r2, [sl], #2
 8009d78:	4553      	cmp	r3, sl
 8009d7a:	4415      	add	r5, r2
 8009d7c:	d1fa      	bne.n	8009d74 <acc_dll_check_direct_leakage+0xa8>
 8009d7e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8009d82:	42ab      	cmp	r3, r5
 8009d84:	d81f      	bhi.n	8009dc6 <acc_dll_check_direct_leakage+0xfa>
 8009d86:	2001      	movs	r0, #1
 8009d88:	b004      	add	sp, #16
 8009d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d8e:	4b17      	ldr	r3, [pc, #92]	; (8009dec <acc_dll_check_direct_leakage+0x120>)
 8009d90:	4a17      	ldr	r2, [pc, #92]	; (8009df0 <acc_dll_check_direct_leakage+0x124>)
 8009d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d94:	4917      	ldr	r1, [pc, #92]	; (8009df4 <acc_dll_check_direct_leakage+0x128>)
 8009d96:	2000      	movs	r0, #0
 8009d98:	4798      	blx	r3
 8009d9a:	2000      	movs	r0, #0
 8009d9c:	b004      	add	sp, #16
 8009d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009da2:	f7fb fcc5 	bl	8005730 <acc_rss_integration_log_level>
 8009da6:	2803      	cmp	r0, #3
 8009da8:	d909      	bls.n	8009dbe <acc_dll_check_direct_leakage+0xf2>
 8009daa:	e9cd 5801 	strd	r5, r8, [sp, #4]
 8009dae:	4a0f      	ldr	r2, [pc, #60]	; (8009dec <acc_dll_check_direct_leakage+0x120>)
 8009db0:	9400      	str	r4, [sp, #0]
 8009db2:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8009db4:	490f      	ldr	r1, [pc, #60]	; (8009df4 <acc_dll_check_direct_leakage+0x128>)
 8009db6:	4a10      	ldr	r2, [pc, #64]	; (8009df8 <acc_dll_check_direct_leakage+0x12c>)
 8009db8:	463b      	mov	r3, r7
 8009dba:	2004      	movs	r0, #4
 8009dbc:	47a0      	blx	r4
 8009dbe:	2000      	movs	r0, #0
 8009dc0:	b004      	add	sp, #16
 8009dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dc6:	f7fb fcb3 	bl	8005730 <acc_rss_integration_log_level>
 8009dca:	2803      	cmp	r0, #3
 8009dcc:	d9f7      	bls.n	8009dbe <acc_dll_check_direct_leakage+0xf2>
 8009dce:	4a07      	ldr	r2, [pc, #28]	; (8009dec <acc_dll_check_direct_leakage+0x120>)
 8009dd0:	9500      	str	r5, [sp, #0]
 8009dd2:	4623      	mov	r3, r4
 8009dd4:	2004      	movs	r0, #4
 8009dd6:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8009dd8:	4906      	ldr	r1, [pc, #24]	; (8009df4 <acc_dll_check_direct_leakage+0x128>)
 8009dda:	4a08      	ldr	r2, [pc, #32]	; (8009dfc <acc_dll_check_direct_leakage+0x130>)
 8009ddc:	47a0      	blx	r4
 8009dde:	2000      	movs	r0, #0
 8009de0:	e7d2      	b.n	8009d88 <acc_dll_check_direct_leakage+0xbc>
 8009de2:	bf00      	nop
 8009de4:	cccccccd 	.word	0xcccccccd
 8009de8:	aaaaaaab 	.word	0xaaaaaaab
 8009dec:	200004c0 	.word	0x200004c0
 8009df0:	0800fc20 	.word	0x0800fc20
 8009df4:	0800fc04 	.word	0x0800fc04
 8009df8:	0800fba8 	.word	0x0800fba8
 8009dfc:	0800fc30 	.word	0x0800fc30

08009e00 <acc_dll_dly_coarse_priority_sort>:
 8009e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e04:	b084      	sub	sp, #16
 8009e06:	2800      	cmp	r0, #0
 8009e08:	f000 80ad 	beq.w	8009f66 <acc_dll_dly_coarse_priority_sort+0x166>
 8009e0c:	280c      	cmp	r0, #12
 8009e0e:	f200 80a6 	bhi.w	8009f5e <acc_dll_dly_coarse_priority_sort+0x15e>
 8009e12:	2400      	movs	r4, #0
 8009e14:	ed9f 4a56 	vldr	s8, [pc, #344]	; 8009f70 <acc_dll_dly_coarse_priority_sort+0x170>
 8009e18:	eddf 4a56 	vldr	s9, [pc, #344]	; 8009f74 <acc_dll_dly_coarse_priority_sort+0x174>
 8009e1c:	ed9f 6a56 	vldr	s12, [pc, #344]	; 8009f78 <acc_dll_dly_coarse_priority_sort+0x178>
 8009e20:	ed9f 5a56 	vldr	s10, [pc, #344]	; 8009f7c <acc_dll_dly_coarse_priority_sort+0x17c>
 8009e24:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009f80 <acc_dll_dly_coarse_priority_sort+0x180>
 8009e28:	4626      	mov	r6, r4
 8009e2a:	f10d 0e04 	add.w	lr, sp, #4
 8009e2e:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 8009e32:	460d      	mov	r5, r1
 8009e34:	1e47      	subs	r7, r0, #1
 8009e36:	f240 5813 	movw	r8, #1299	; 0x513
 8009e3a:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 8009e3e:	2c00      	cmp	r4, #0
 8009e40:	d067      	beq.n	8009f12 <acc_dll_dly_coarse_priority_sort+0x112>
 8009e42:	42bc      	cmp	r4, r7
 8009e44:	d016      	beq.n	8009e74 <acc_dll_dly_coarse_priority_sort+0x74>
 8009e46:	f935 ac02 	ldrsh.w	sl, [r5, #-2]
 8009e4a:	f9b5 3000 	ldrsh.w	r3, [r5]
 8009e4e:	459a      	cmp	sl, r3
 8009e50:	dd18      	ble.n	8009e84 <acc_dll_dly_coarse_priority_sort+0x84>
 8009e52:	f9b5 9002 	ldrsh.w	r9, [r5, #2]
 8009e56:	454b      	cmp	r3, r9
 8009e58:	dd14      	ble.n	8009e84 <acc_dll_dly_coarse_priority_sort+0x84>
 8009e5a:	45c2      	cmp	sl, r8
 8009e5c:	dc12      	bgt.n	8009e84 <acc_dll_dly_coarse_priority_sort+0x84>
 8009e5e:	4543      	cmp	r3, r8
 8009e60:	dc10      	bgt.n	8009e84 <acc_dll_dly_coarse_priority_sort+0x84>
 8009e62:	eba9 090a 	sub.w	r9, r9, sl
 8009e66:	ee07 9a90 	vmov	s15, r9
 8009e6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009e6e:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8009e72:	e05e      	b.n	8009f32 <acc_dll_dly_coarse_priority_sort+0x132>
 8009e74:	f935 9c02 	ldrsh.w	r9, [r5, #-2]
 8009e78:	f9b5 3000 	ldrsh.w	r3, [r5]
 8009e7c:	4599      	cmp	r9, r3
 8009e7e:	dd01      	ble.n	8009e84 <acc_dll_dly_coarse_priority_sort+0x84>
 8009e80:	45c1      	cmp	r9, r8
 8009e82:	dd65      	ble.n	8009f50 <acc_dll_dly_coarse_priority_sort+0x150>
 8009e84:	eef0 6a46 	vmov.f32	s13, s12
 8009e88:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	bfb8      	it	lt
 8009e90:	425b      	neglt	r3, r3
 8009e92:	ee07 3a90 	vmov	s15, r3
 8009e96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009e9a:	3401      	adds	r4, #1
 8009e9c:	ee87 7a85 	vdiv.f32	s14, s15, s10
 8009ea0:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8009ea4:	b2e6      	uxtb	r6, r4
 8009ea6:	42b0      	cmp	r0, r6
 8009ea8:	f105 0502 	add.w	r5, r5, #2
 8009eac:	ee67 7a25 	vmul.f32	s15, s14, s11
 8009eb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009eb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009eb8:	ee17 3a90 	vmov	r3, s15
 8009ebc:	f80e 3b01 	strb.w	r3, [lr], #1
 8009ec0:	d8bd      	bhi.n	8009e3e <acc_dll_dly_coarse_priority_sort+0x3e>
 8009ec2:	3802      	subs	r0, #2
 8009ec4:	f102 0c01 	add.w	ip, r2, #1
 8009ec8:	fa5f fe87 	uxtb.w	lr, r7
 8009ecc:	fa5c f780 	uxtab	r7, ip, r0
 8009ed0:	eba7 0e0e 	sub.w	lr, r7, lr
 8009ed4:	45be      	cmp	lr, r7
 8009ed6:	d019      	beq.n	8009f0c <acc_dll_dly_coarse_priority_sort+0x10c>
 8009ed8:	4613      	mov	r3, r2
 8009eda:	2400      	movs	r4, #0
 8009edc:	7819      	ldrb	r1, [r3, #0]
 8009ede:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8009ee2:	ad04      	add	r5, sp, #16
 8009ee4:	186e      	adds	r6, r5, r1
 8009ee6:	4405      	add	r5, r0
 8009ee8:	f816 6c0c 	ldrb.w	r6, [r6, #-12]
 8009eec:	f815 5c0c 	ldrb.w	r5, [r5, #-12]
 8009ef0:	42ae      	cmp	r6, r5
 8009ef2:	d904      	bls.n	8009efe <acc_dll_dly_coarse_priority_sort+0xfe>
 8009ef4:	3401      	adds	r4, #1
 8009ef6:	b2e4      	uxtb	r4, r4
 8009ef8:	f803 0c01 	strb.w	r0, [r3, #-1]
 8009efc:	7019      	strb	r1, [r3, #0]
 8009efe:	429f      	cmp	r7, r3
 8009f00:	d1ec      	bne.n	8009edc <acc_dll_dly_coarse_priority_sort+0xdc>
 8009f02:	45bc      	cmp	ip, r7
 8009f04:	d002      	beq.n	8009f0c <acc_dll_dly_coarse_priority_sort+0x10c>
 8009f06:	3f01      	subs	r7, #1
 8009f08:	2c00      	cmp	r4, #0
 8009f0a:	d1e3      	bne.n	8009ed4 <acc_dll_dly_coarse_priority_sort+0xd4>
 8009f0c:	b004      	add	sp, #16
 8009f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f12:	f9b1 9000 	ldrsh.w	r9, [r1]
 8009f16:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8009f1a:	4599      	cmp	r9, r3
 8009f1c:	dd13      	ble.n	8009f46 <acc_dll_dly_coarse_priority_sort+0x146>
 8009f1e:	45c1      	cmp	r9, r8
 8009f20:	dc11      	bgt.n	8009f46 <acc_dll_dly_coarse_priority_sort+0x146>
 8009f22:	eba3 0309 	sub.w	r3, r3, r9
 8009f26:	ee07 3a90 	vmov	s15, r3
 8009f2a:	f9b5 3000 	ldrsh.w	r3, [r5]
 8009f2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009f32:	eef4 7ac4 	vcmpe.f32	s15, s8
 8009f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f3a:	bf54      	ite	pl
 8009f3c:	eef0 6a46 	vmovpl.f32	s13, s12
 8009f40:	eef0 6a64 	vmovmi.f32	s13, s9
 8009f44:	e7a0      	b.n	8009e88 <acc_dll_dly_coarse_priority_sort+0x88>
 8009f46:	f9b5 3000 	ldrsh.w	r3, [r5]
 8009f4a:	eef0 6a46 	vmov.f32	s13, s12
 8009f4e:	e79b      	b.n	8009e88 <acc_dll_dly_coarse_priority_sort+0x88>
 8009f50:	eba3 0909 	sub.w	r9, r3, r9
 8009f54:	ee07 9a90 	vmov	s15, r9
 8009f58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009f5c:	e7e9      	b.n	8009f32 <acc_dll_dly_coarse_priority_sort+0x132>
 8009f5e:	4809      	ldr	r0, [pc, #36]	; (8009f84 <acc_dll_dly_coarse_priority_sort+0x184>)
 8009f60:	211f      	movs	r1, #31
 8009f62:	f7fd fe09 	bl	8007b78 <acc_assert_fail>
 8009f66:	4807      	ldr	r0, [pc, #28]	; (8009f84 <acc_dll_dly_coarse_priority_sort+0x184>)
 8009f68:	211a      	movs	r1, #26
 8009f6a:	f7fd fe05 	bl	8007b78 <acc_assert_fail>
 8009f6e:	bf00      	nop
 8009f70:	c2c80000 	.word	0xc2c80000
 8009f74:	00000000 	.word	0x00000000
 8009f78:	42480000 	.word	0x42480000
 8009f7c:	447a0000 	.word	0x447a0000
 8009f80:	42c80000 	.word	0x42c80000
 8009f84:	0800fc70 	.word	0x0800fc70

08009f88 <acc_dll_plateau_finder>:
 8009f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f8c:	b0af      	sub	sp, #188	; 0xbc
 8009f8e:	2819      	cmp	r0, #25
 8009f90:	9104      	str	r1, [sp, #16]
 8009f92:	f200 8226 	bhi.w	800a3e2 <acc_dll_plateau_finder+0x45a>
 8009f96:	2801      	cmp	r0, #1
 8009f98:	4683      	mov	fp, r0
 8009f9a:	4615      	mov	r5, r2
 8009f9c:	469a      	mov	sl, r3
 8009f9e:	f240 8217 	bls.w	800a3d0 <acc_dll_plateau_finder+0x448>
 8009fa2:	f1a0 0902 	sub.w	r9, r0, #2
 8009fa6:	2100      	movs	r1, #0
 8009fa8:	fa1f f989 	uxth.w	r9, r9
 8009fac:	2301      	movs	r3, #1
 8009fae:	ed9f 7ad2 	vldr	s14, [pc, #840]	; 800a2f8 <acc_dll_plateau_finder+0x370>
 8009fb2:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009fb6:	9205      	str	r2, [sp, #20]
 8009fb8:	f109 0902 	add.w	r9, r9, #2
 8009fbc:	460c      	mov	r4, r1
 8009fbe:	460e      	mov	r6, r1
 8009fc0:	461d      	mov	r5, r3
 8009fc2:	e006      	b.n	8009fd2 <acc_dll_plateau_finder+0x4a>
 8009fc4:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8009fc8:	42aa      	cmp	r2, r5
 8009fca:	d019      	beq.n	800a000 <acc_dll_plateau_finder+0x78>
 8009fcc:	3501      	adds	r5, #1
 8009fce:	45a9      	cmp	r9, r5
 8009fd0:	d04b      	beq.n	800a06a <acc_dll_plateau_finder+0xe2>
 8009fd2:	f8b8 2000 	ldrh.w	r2, [r8]
 8009fd6:	f838 0f02 	ldrh.w	r0, [r8, #2]!
 8009fda:	ee07 2a90 	vmov	s15, r2
 8009fde:	4282      	cmp	r2, r0
 8009fe0:	bf34      	ite	cc
 8009fe2:	1a82      	subcc	r2, r0, r2
 8009fe4:	1a12      	subcs	r2, r2, r0
 8009fe6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009fea:	b2af      	uxth	r7, r5
 8009fec:	b292      	uxth	r2, r2
 8009fee:	3401      	adds	r4, #1
 8009ff0:	4439      	add	r1, r7
 8009ff2:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8009ff6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009ffa:	b2a4      	uxth	r4, r4
 8009ffc:	b289      	uxth	r1, r1
 8009ffe:	d9e1      	bls.n	8009fc4 <acc_dll_plateau_finder+0x3c>
 800a000:	2c02      	cmp	r4, #2
 800a002:	f240 8191 	bls.w	800a328 <acc_dll_plateau_finder+0x3a0>
 800a006:	ee07 1a90 	vmov	s15, r1
 800a00a:	eef8 5a67 	vcvt.f32.u32	s11, s15
 800a00e:	ee07 4a90 	vmov	s15, r4
 800a012:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a016:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800a01a:	eec5 7aa6 	vdiv.f32	s15, s11, s13
 800a01e:	ab2e      	add	r3, sp, #184	; 0xb8
 800a020:	eb03 0046 	add.w	r0, r3, r6, lsl #1
 800a024:	3501      	adds	r5, #1
 800a026:	f106 0c01 	add.w	ip, r6, #1
 800a02a:	2100      	movs	r1, #0
 800a02c:	45a9      	cmp	r9, r5
 800a02e:	f820 4c34 	strh.w	r4, [r0, #-52]
 800a032:	f820 7c9c 	strh.w	r7, [r0, #-156]
 800a036:	460c      	mov	r4, r1
 800a038:	eec7 6a06 	vdiv.f32	s13, s14, s12
 800a03c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a040:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a044:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800a048:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a04c:	ee16 3a90 	vmov	r3, s13
 800a050:	ee17 2a90 	vmov	r2, s15
 800a054:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800a058:	f82a 2016 	strh.w	r2, [sl, r6, lsl #1]
 800a05c:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 800a2f8 <acc_dll_plateau_finder+0x370>
 800a060:	f820 3c68 	strh.w	r3, [r0, #-104]
 800a064:	fa1f f68c 	uxth.w	r6, ip
 800a068:	d1b3      	bne.n	8009fd2 <acc_dll_plateau_finder+0x4a>
 800a06a:	9d05      	ldr	r5, [sp, #20]
 800a06c:	f7fb fb60 	bl	8005730 <acc_rss_integration_log_level>
 800a070:	2803      	cmp	r0, #3
 800a072:	f200 817f 	bhi.w	800a374 <acc_dll_plateau_finder+0x3ec>
 800a076:	b33e      	cbz	r6, 800a0c8 <acc_dll_plateau_finder+0x140>
 800a078:	f8df 929c 	ldr.w	r9, [pc, #668]	; 800a318 <acc_dll_plateau_finder+0x390>
 800a07c:	4c9f      	ldr	r4, [pc, #636]	; (800a2fc <acc_dll_plateau_finder+0x374>)
 800a07e:	4fa0      	ldr	r7, [pc, #640]	; (800a300 <acc_dll_plateau_finder+0x378>)
 800a080:	f04f 0b00 	mov.w	fp, #0
 800a084:	46a8      	mov	r8, r5
 800a086:	f7fb fb53 	bl	8005730 <acc_rss_integration_log_level>
 800a08a:	2803      	cmp	r0, #3
 800a08c:	d915      	bls.n	800a0ba <acc_dll_plateau_finder+0x132>
 800a08e:	a914      	add	r1, sp, #80	; 0x50
 800a090:	aa21      	add	r2, sp, #132	; 0x84
 800a092:	ab07      	add	r3, sp, #28
 800a094:	f831 001b 	ldrh.w	r0, [r1, fp, lsl #1]
 800a098:	f832 101b 	ldrh.w	r1, [r2, fp, lsl #1]
 800a09c:	f833 201b 	ldrh.w	r2, [r3, fp, lsl #1]
 800a0a0:	f83a 301b 	ldrh.w	r3, [sl, fp, lsl #1]
 800a0a4:	e9cd 1002 	strd	r1, r0, [sp, #8]
 800a0a8:	e9cd 2300 	strd	r2, r3, [sp]
 800a0ac:	4639      	mov	r1, r7
 800a0ae:	f8d9 5034 	ldr.w	r5, [r9, #52]	; 0x34
 800a0b2:	465b      	mov	r3, fp
 800a0b4:	4622      	mov	r2, r4
 800a0b6:	2004      	movs	r0, #4
 800a0b8:	47a8      	blx	r5
 800a0ba:	f10b 0b01 	add.w	fp, fp, #1
 800a0be:	fa1f f38b 	uxth.w	r3, fp
 800a0c2:	42b3      	cmp	r3, r6
 800a0c4:	d3df      	bcc.n	800a086 <acc_dll_plateau_finder+0xfe>
 800a0c6:	4645      	mov	r5, r8
 800a0c8:	9b04      	ldr	r3, [sp, #16]
 800a0ca:	f8b3 b000 	ldrh.w	fp, [r3]
 800a0ce:	f248 73cf 	movw	r3, #34767	; 0x87cf
 800a0d2:	459b      	cmp	fp, r3
 800a0d4:	f240 8161 	bls.w	800a39a <acc_dll_plateau_finder+0x412>
 800a0d8:	f5ab 4300 	sub.w	r3, fp, #32768	; 0x8000
 800a0dc:	ee07 3a90 	vmov	s15, r3
 800a0e0:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800a304 <acc_dll_plateau_finder+0x37c>
 800a0e4:	ed9f 5a88 	vldr	s10, [pc, #544]	; 800a308 <acc_dll_plateau_finder+0x380>
 800a0e8:	eddf 6a88 	vldr	s13, [pc, #544]	; 800a30c <acc_dll_plateau_finder+0x384>
 800a0ec:	eddf 5a88 	vldr	s11, [pc, #544]	; 800a310 <acc_dll_plateau_finder+0x388>
 800a0f0:	ed9f 6a88 	vldr	s12, [pc, #544]	; 800a314 <acc_dll_plateau_finder+0x38c>
 800a0f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a0f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a0fc:	ee67 7a85 	vmul.f32	s15, s15, s10
 800a100:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a104:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800a108:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a10c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800a110:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a114:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a118:	ee17 3a90 	vmov	r3, s15
 800a11c:	b29c      	uxth	r4, r3
 800a11e:	f7fb fb07 	bl	8005730 <acc_rss_integration_log_level>
 800a122:	2803      	cmp	r0, #3
 800a124:	f200 812e 	bhi.w	800a384 <acc_dll_plateau_finder+0x3fc>
 800a128:	2e00      	cmp	r6, #0
 800a12a:	f000 814b 	beq.w	800a3c4 <acc_dll_plateau_finder+0x43c>
 800a12e:	f04f 0900 	mov.w	r9, #0
 800a132:	46c8      	mov	r8, r9
 800a134:	464b      	mov	r3, r9
 800a136:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 800a13a:	4627      	mov	r7, r4
 800a13c:	e010      	b.n	800a160 <acc_dll_plateau_finder+0x1d8>
 800a13e:	f5ab 62fa 	sub.w	r2, fp, #2000	; 0x7d0
 800a142:	4294      	cmp	r4, r2
 800a144:	f200 8109 	bhi.w	800a35a <acc_dll_plateau_finder+0x3d2>
 800a148:	f108 0201 	add.w	r2, r8, #1
 800a14c:	f825 3018 	strh.w	r3, [r5, r8, lsl #1]
 800a150:	fa1f f882 	uxth.w	r8, r2
 800a154:	f109 0901 	add.w	r9, r9, #1
 800a158:	fa1f f389 	uxth.w	r3, r9
 800a15c:	429e      	cmp	r6, r3
 800a15e:	d916      	bls.n	800a18e <acc_dll_plateau_finder+0x206>
 800a160:	f83a 4b02 	ldrh.w	r4, [sl], #2
 800a164:	f241 3287 	movw	r2, #4999	; 0x1387
 800a168:	4294      	cmp	r4, r2
 800a16a:	d8e8      	bhi.n	800a13e <acc_dll_plateau_finder+0x1b6>
 800a16c:	f7fb fae0 	bl	8005730 <acc_rss_integration_log_level>
 800a170:	2803      	cmp	r0, #3
 800a172:	d9ef      	bls.n	800a154 <acc_dll_plateau_finder+0x1cc>
 800a174:	4a68      	ldr	r2, [pc, #416]	; (800a318 <acc_dll_plateau_finder+0x390>)
 800a176:	4962      	ldr	r1, [pc, #392]	; (800a300 <acc_dll_plateau_finder+0x378>)
 800a178:	4623      	mov	r3, r4
 800a17a:	2004      	movs	r0, #4
 800a17c:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800a17e:	4a67      	ldr	r2, [pc, #412]	; (800a31c <acc_dll_plateau_finder+0x394>)
 800a180:	f109 0901 	add.w	r9, r9, #1
 800a184:	47a0      	blx	r4
 800a186:	fa1f f389 	uxth.w	r3, r9
 800a18a:	429e      	cmp	r6, r3
 800a18c:	d8e8      	bhi.n	800a160 <acc_dll_plateau_finder+0x1d8>
 800a18e:	f1b8 0f01 	cmp.w	r8, #1
 800a192:	463c      	mov	r4, r7
 800a194:	f240 8112 	bls.w	800a3bc <acc_dll_plateau_finder+0x434>
 800a198:	f1a8 0a02 	sub.w	sl, r8, #2
 800a19c:	fa0f fe8a 	sxth.w	lr, sl
 800a1a0:	f10e 0901 	add.w	r9, lr, #1
 800a1a4:	fa1f fa8a 	uxth.w	sl, sl
 800a1a8:	eb05 0949 	add.w	r9, r5, r9, lsl #1
 800a1ac:	46ac      	mov	ip, r5
 800a1ae:	f1be 0f00 	cmp.w	lr, #0
 800a1b2:	db23      	blt.n	800a1fc <acc_dll_plateau_finder+0x274>
 800a1b4:	4649      	mov	r1, r9
 800a1b6:	4670      	mov	r0, lr
 800a1b8:	2500      	movs	r5, #0
 800a1ba:	f831 6d02 	ldrh.w	r6, [r1, #-2]!
 800a1be:	ab2e      	add	r3, sp, #184	; 0xb8
 800a1c0:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 800a1c4:	884f      	ldrh	r7, [r1, #2]
 800a1c6:	f833 2c68 	ldrh.w	r2, [r3, #-104]
 800a1ca:	ab2e      	add	r3, sp, #184	; 0xb8
 800a1cc:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 800a1d0:	42a2      	cmp	r2, r4
 800a1d2:	f833 3c68 	ldrh.w	r3, [r3, #-104]
 800a1d6:	bf8c      	ite	hi
 800a1d8:	1b12      	subhi	r2, r2, r4
 800a1da:	1aa2      	subls	r2, r4, r2
 800a1dc:	42a3      	cmp	r3, r4
 800a1de:	bf8c      	ite	hi
 800a1e0:	1b1b      	subhi	r3, r3, r4
 800a1e2:	1ae3      	subls	r3, r4, r3
 800a1e4:	b292      	uxth	r2, r2
 800a1e6:	b29b      	uxth	r3, r3
 800a1e8:	429a      	cmp	r2, r3
 800a1ea:	d902      	bls.n	800a1f2 <acc_dll_plateau_finder+0x26a>
 800a1ec:	800f      	strh	r7, [r1, #0]
 800a1ee:	804e      	strh	r6, [r1, #2]
 800a1f0:	2501      	movs	r5, #1
 800a1f2:	3801      	subs	r0, #1
 800a1f4:	0403      	lsls	r3, r0, #16
 800a1f6:	d5e0      	bpl.n	800a1ba <acc_dll_plateau_finder+0x232>
 800a1f8:	2d00      	cmp	r5, #0
 800a1fa:	d1d8      	bne.n	800a1ae <acc_dll_plateau_finder+0x226>
 800a1fc:	f8bc 3000 	ldrh.w	r3, [ip]
 800a200:	aa2e      	add	r2, sp, #184	; 0xb8
 800a202:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800a206:	4665      	mov	r5, ip
 800a208:	1ca8      	adds	r0, r5, #2
 800a20a:	f833 1c68 	ldrh.w	r1, [r3, #-104]
 800a20e:	eb00 004a 	add.w	r0, r0, sl, lsl #1
 800a212:	4662      	mov	r2, ip
 800a214:	f04f 0a01 	mov.w	sl, #1
 800a218:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 800a21c:	ac2e      	add	r4, sp, #184	; 0xb8
 800a21e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800a222:	f833 3c68 	ldrh.w	r3, [r3, #-104]
 800a226:	428b      	cmp	r3, r1
 800a228:	bf8c      	ite	hi
 800a22a:	1a5b      	subhi	r3, r3, r1
 800a22c:	1acb      	subls	r3, r1, r3
 800a22e:	b29b      	uxth	r3, r3
 800a230:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a234:	bf3c      	itt	cc
 800a236:	f10a 0a01 	addcc.w	sl, sl, #1
 800a23a:	fa1f fa8a 	uxthcc.w	sl, sl
 800a23e:	4290      	cmp	r0, r2
 800a240:	d1ea      	bne.n	800a218 <acc_dll_plateau_finder+0x290>
 800a242:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 800a318 <acc_dll_plateau_finder+0x390>
 800a246:	4f36      	ldr	r7, [pc, #216]	; (800a320 <acc_dll_plateau_finder+0x398>)
 800a248:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a24c:	f1ba 0f00 	cmp.w	sl, #0
 800a250:	d031      	beq.n	800a2b6 <acc_dll_plateau_finder+0x32e>
 800a252:	2400      	movs	r4, #0
 800a254:	4e2a      	ldr	r6, [pc, #168]	; (800a300 <acc_dll_plateau_finder+0x378>)
 800a256:	46a6      	mov	lr, r4
 800a258:	4622      	mov	r2, r4
 800a25a:	e004      	b.n	800a266 <acc_dll_plateau_finder+0x2de>
 800a25c:	3401      	adds	r4, #1
 800a25e:	b2a4      	uxth	r4, r4
 800a260:	4554      	cmp	r4, sl
 800a262:	4622      	mov	r2, r4
 800a264:	d224      	bcs.n	800a2b0 <acc_dll_plateau_finder+0x328>
 800a266:	0053      	lsls	r3, r2, #1
 800a268:	3302      	adds	r3, #2
 800a26a:	f835 1012 	ldrh.w	r1, [r5, r2, lsl #1]
 800a26e:	5ae8      	ldrh	r0, [r5, r3]
 800a270:	f10d 0cb8 	add.w	ip, sp, #184	; 0xb8
 800a274:	eb0c 0b41 	add.w	fp, ip, r1, lsl #1
 800a278:	eb0c 0c40 	add.w	ip, ip, r0, lsl #1
 800a27c:	f83b bc34 	ldrh.w	fp, [fp, #-52]
 800a280:	f83c cc34 	ldrh.w	ip, [ip, #-52]
 800a284:	45e3      	cmp	fp, ip
 800a286:	d2e9      	bcs.n	800a25c <acc_dll_plateau_finder+0x2d4>
 800a288:	f825 0012 	strh.w	r0, [r5, r2, lsl #1]
 800a28c:	52e9      	strh	r1, [r5, r3]
 800a28e:	f7fb fa4f 	bl	8005730 <acc_rss_integration_log_level>
 800a292:	2803      	cmp	r0, #3
 800a294:	d97e      	bls.n	800a394 <acc_dll_plateau_finder+0x40c>
 800a296:	3401      	adds	r4, #1
 800a298:	463a      	mov	r2, r7
 800a29a:	b2a4      	uxth	r4, r4
 800a29c:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
 800a2a0:	4631      	mov	r1, r6
 800a2a2:	2004      	movs	r0, #4
 800a2a4:	4798      	blx	r3
 800a2a6:	4554      	cmp	r4, sl
 800a2a8:	f04f 0e01 	mov.w	lr, #1
 800a2ac:	4622      	mov	r2, r4
 800a2ae:	d3da      	bcc.n	800a266 <acc_dll_plateau_finder+0x2de>
 800a2b0:	f1be 0f00 	cmp.w	lr, #0
 800a2b4:	d1ca      	bne.n	800a24c <acc_dll_plateau_finder+0x2c4>
 800a2b6:	f8df a060 	ldr.w	sl, [pc, #96]	; 800a318 <acc_dll_plateau_finder+0x390>
 800a2ba:	f8df 9068 	ldr.w	r9, [pc, #104]	; 800a324 <acc_dll_plateau_finder+0x39c>
 800a2be:	4f10      	ldr	r7, [pc, #64]	; (800a300 <acc_dll_plateau_finder+0x378>)
 800a2c0:	2400      	movs	r4, #0
 800a2c2:	f7fb fa35 	bl	8005730 <acc_rss_integration_log_level>
 800a2c6:	2803      	cmp	r0, #3
 800a2c8:	d90d      	bls.n	800a2e6 <acc_dll_plateau_finder+0x35e>
 800a2ca:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
 800a2ce:	aa2e      	add	r2, sp, #184	; 0xb8
 800a2d0:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800a2d4:	4639      	mov	r1, r7
 800a2d6:	f832 2c68 	ldrh.w	r2, [r2, #-104]
 800a2da:	9200      	str	r2, [sp, #0]
 800a2dc:	f8da 6034 	ldr.w	r6, [sl, #52]	; 0x34
 800a2e0:	464a      	mov	r2, r9
 800a2e2:	2004      	movs	r0, #4
 800a2e4:	47b0      	blx	r6
 800a2e6:	3401      	adds	r4, #1
 800a2e8:	b2a3      	uxth	r3, r4
 800a2ea:	4598      	cmp	r8, r3
 800a2ec:	d8e9      	bhi.n	800a2c2 <acc_dll_plateau_finder+0x33a>
 800a2ee:	4640      	mov	r0, r8
 800a2f0:	b02f      	add	sp, #188	; 0xbc
 800a2f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2f6:	bf00      	nop
 800a2f8:	00000000 	.word	0x00000000
 800a2fc:	0800fd0c 	.word	0x0800fd0c
 800a300:	0800fc90 	.word	0x0800fc90
 800a304:	3f99999a 	.word	0x3f99999a
 800a308:	37800000 	.word	0x37800000
 800a30c:	3f866666 	.word	0x3f866666
 800a310:	47800000 	.word	0x47800000
 800a314:	47000000 	.word	0x47000000
 800a318:	200004c0 	.word	0x200004c0
 800a31c:	0800fd88 	.word	0x0800fd88
 800a320:	0800fde8 	.word	0x0800fde8
 800a324:	0800fe1c 	.word	0x0800fe1c
 800a328:	f7fb fa02 	bl	8005730 <acc_rss_integration_log_level>
 800a32c:	2803      	cmp	r0, #3
 800a32e:	d90f      	bls.n	800a350 <acc_dll_plateau_finder+0x3c8>
 800a330:	9401      	str	r4, [sp, #4]
 800a332:	f838 2c02 	ldrh.w	r2, [r8, #-2]
 800a336:	4b2d      	ldr	r3, [pc, #180]	; (800a3ec <acc_dll_plateau_finder+0x464>)
 800a338:	9200      	str	r2, [sp, #0]
 800a33a:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 800a33c:	492c      	ldr	r1, [pc, #176]	; (800a3f0 <acc_dll_plateau_finder+0x468>)
 800a33e:	4a2d      	ldr	r2, [pc, #180]	; (800a3f4 <acc_dll_plateau_finder+0x46c>)
 800a340:	462b      	mov	r3, r5
 800a342:	2004      	movs	r0, #4
 800a344:	2400      	movs	r4, #0
 800a346:	47b8      	blx	r7
 800a348:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800a3f8 <acc_dll_plateau_finder+0x470>
 800a34c:	4621      	mov	r1, r4
 800a34e:	e63d      	b.n	8009fcc <acc_dll_plateau_finder+0x44>
 800a350:	2100      	movs	r1, #0
 800a352:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800a3f8 <acc_dll_plateau_finder+0x470>
 800a356:	460c      	mov	r4, r1
 800a358:	e638      	b.n	8009fcc <acc_dll_plateau_finder+0x44>
 800a35a:	f7fb f9e9 	bl	8005730 <acc_rss_integration_log_level>
 800a35e:	2803      	cmp	r0, #3
 800a360:	f67f aef8 	bls.w	800a154 <acc_dll_plateau_finder+0x1cc>
 800a364:	4a21      	ldr	r2, [pc, #132]	; (800a3ec <acc_dll_plateau_finder+0x464>)
 800a366:	4922      	ldr	r1, [pc, #136]	; (800a3f0 <acc_dll_plateau_finder+0x468>)
 800a368:	4623      	mov	r3, r4
 800a36a:	2004      	movs	r0, #4
 800a36c:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800a36e:	4a23      	ldr	r2, [pc, #140]	; (800a3fc <acc_dll_plateau_finder+0x474>)
 800a370:	47a0      	blx	r4
 800a372:	e6ef      	b.n	800a154 <acc_dll_plateau_finder+0x1cc>
 800a374:	4633      	mov	r3, r6
 800a376:	491d      	ldr	r1, [pc, #116]	; (800a3ec <acc_dll_plateau_finder+0x464>)
 800a378:	4a21      	ldr	r2, [pc, #132]	; (800a400 <acc_dll_plateau_finder+0x478>)
 800a37a:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 800a37c:	491c      	ldr	r1, [pc, #112]	; (800a3f0 <acc_dll_plateau_finder+0x468>)
 800a37e:	2004      	movs	r0, #4
 800a380:	47a0      	blx	r4
 800a382:	e678      	b.n	800a076 <acc_dll_plateau_finder+0xee>
 800a384:	4b19      	ldr	r3, [pc, #100]	; (800a3ec <acc_dll_plateau_finder+0x464>)
 800a386:	4a1f      	ldr	r2, [pc, #124]	; (800a404 <acc_dll_plateau_finder+0x47c>)
 800a388:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 800a38a:	4919      	ldr	r1, [pc, #100]	; (800a3f0 <acc_dll_plateau_finder+0x468>)
 800a38c:	4623      	mov	r3, r4
 800a38e:	2004      	movs	r0, #4
 800a390:	47b8      	blx	r7
 800a392:	e6c9      	b.n	800a128 <acc_dll_plateau_finder+0x1a0>
 800a394:	f04f 0e01 	mov.w	lr, #1
 800a398:	e760      	b.n	800a25c <acc_dll_plateau_finder+0x2d4>
 800a39a:	f7fb f9c9 	bl	8005730 <acc_rss_integration_log_level>
 800a39e:	2803      	cmp	r0, #3
 800a3a0:	d910      	bls.n	800a3c4 <acc_dll_plateau_finder+0x43c>
 800a3a2:	4b12      	ldr	r3, [pc, #72]	; (800a3ec <acc_dll_plateau_finder+0x464>)
 800a3a4:	4a18      	ldr	r2, [pc, #96]	; (800a408 <acc_dll_plateau_finder+0x480>)
 800a3a6:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800a3a8:	4911      	ldr	r1, [pc, #68]	; (800a3f0 <acc_dll_plateau_finder+0x468>)
 800a3aa:	465b      	mov	r3, fp
 800a3ac:	2004      	movs	r0, #4
 800a3ae:	47a0      	blx	r4
 800a3b0:	f04f 0800 	mov.w	r8, #0
 800a3b4:	4640      	mov	r0, r8
 800a3b6:	b02f      	add	sp, #188	; 0xbc
 800a3b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3bc:	f1b8 0f00 	cmp.w	r8, #0
 800a3c0:	f47f af79 	bne.w	800a2b6 <acc_dll_plateau_finder+0x32e>
 800a3c4:	f04f 0800 	mov.w	r8, #0
 800a3c8:	4640      	mov	r0, r8
 800a3ca:	b02f      	add	sp, #188	; 0xbc
 800a3cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3d0:	f7fb f9ae 	bl	8005730 <acc_rss_integration_log_level>
 800a3d4:	2803      	cmp	r0, #3
 800a3d6:	d801      	bhi.n	800a3dc <acc_dll_plateau_finder+0x454>
 800a3d8:	2600      	movs	r6, #0
 800a3da:	e675      	b.n	800a0c8 <acc_dll_plateau_finder+0x140>
 800a3dc:	2300      	movs	r3, #0
 800a3de:	461e      	mov	r6, r3
 800a3e0:	e7c9      	b.n	800a376 <acc_dll_plateau_finder+0x3ee>
 800a3e2:	4803      	ldr	r0, [pc, #12]	; (800a3f0 <acc_dll_plateau_finder+0x468>)
 800a3e4:	2128      	movs	r1, #40	; 0x28
 800a3e6:	f7fd fbc7 	bl	8007b78 <acc_assert_fail>
 800a3ea:	bf00      	nop
 800a3ec:	200004c0 	.word	0x200004c0
 800a3f0:	0800fc90 	.word	0x0800fc90
 800a3f4:	0800fca4 	.word	0x0800fca4
 800a3f8:	00000000 	.word	0x00000000
 800a3fc:	0800fdb8 	.word	0x0800fdb8
 800a400:	0800fcf8 	.word	0x0800fcf8
 800a404:	0800fd78 	.word	0x0800fd78
 800a408:	0800fd50 	.word	0x0800fd50

0800a40c <acc_cpd_linear_sweep_load_program>:
 800a40c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a410:	ed2d 8b04 	vpush	{d8-d9}
 800a414:	4614      	mov	r4, r2
 800a416:	b08f      	sub	sp, #60	; 0x3c
 800a418:	461a      	mov	r2, r3
 800a41a:	4606      	mov	r6, r0
 800a41c:	460d      	mov	r5, r1
 800a41e:	ee08 0a90 	vmov	s17, r0
 800a422:	4601      	mov	r1, r0
 800a424:	469b      	mov	fp, r3
 800a426:	2016      	movs	r0, #22
 800a428:	23bc      	movs	r3, #188	; 0xbc
 800a42a:	f7fd fca3 	bl	8007d74 <acc_probes_execute_struct>
 800a42e:	ab0d      	add	r3, sp, #52	; 0x34
 800a430:	4622      	mov	r2, r4
 800a432:	9300      	str	r3, [sp, #0]
 800a434:	4629      	mov	r1, r5
 800a436:	4630      	mov	r0, r6
 800a438:	2400      	movs	r4, #0
 800a43a:	ab0c      	add	r3, sp, #48	; 0x30
 800a43c:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
 800a440:	f7fc ff66 	bl	8007310 <acc_sensor_protocol_r2_prepare_load>
 800a444:	900b      	str	r0, [sp, #44]	; 0x2c
 800a446:	b928      	cbnz	r0, 800a454 <acc_cpd_linear_sweep_load_program+0x48>
 800a448:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a44a:	b00f      	add	sp, #60	; 0x3c
 800a44c:	ecbd 8b04 	vpop	{d8-d9}
 800a450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a454:	f7fb f96c 	bl	8005730 <acc_rss_integration_log_level>
 800a458:	2803      	cmp	r0, #3
 800a45a:	ee09 5a10 	vmov	s18, r5
 800a45e:	d905      	bls.n	800a46c <acc_cpd_linear_sweep_load_program+0x60>
 800a460:	4b05      	ldr	r3, [pc, #20]	; (800a478 <acc_cpd_linear_sweep_load_program+0x6c>)
 800a462:	4a06      	ldr	r2, [pc, #24]	; (800a47c <acc_cpd_linear_sweep_load_program+0x70>)
 800a464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a466:	4906      	ldr	r1, [pc, #24]	; (800a480 <acc_cpd_linear_sweep_load_program+0x74>)
 800a468:	2004      	movs	r0, #4
 800a46a:	4798      	blx	r3
 800a46c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a46e:	ed9f 8a05 	vldr	s16, [pc, #20]	; 800a484 <acc_cpd_linear_sweep_load_program+0x78>
 800a472:	f04f 0a00 	mov.w	sl, #0
 800a476:	e07b      	b.n	800a570 <acc_cpd_linear_sweep_load_program+0x164>
 800a478:	200004c0 	.word	0x200004c0
 800a47c:	0800fe40 	.word	0x0800fe40
 800a480:	0800fe68 	.word	0x0800fe68
 800a484:	3751b717 	.word	0x3751b717
 800a488:	f002 f898 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800a48c:	2223      	movs	r2, #35	; 0x23
 800a48e:	2103      	movs	r1, #3
 800a490:	4603      	mov	r3, r0
 800a492:	e9cd 2100 	strd	r2, r1, [sp]
 800a496:	4620      	mov	r0, r4
 800a498:	4632      	mov	r2, r6
 800a49a:	4629      	mov	r1, r5
 800a49c:	f001 ff3e 	bl	800c31c <acc_confprogram_patch_offset>
 800a4a0:	f002 f88c 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800a4a4:	227d      	movs	r2, #125	; 0x7d
 800a4a6:	2100      	movs	r1, #0
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	e9cd 2100 	strd	r2, r1, [sp]
 800a4ae:	4620      	mov	r0, r4
 800a4b0:	4632      	mov	r2, r6
 800a4b2:	4629      	mov	r1, r5
 800a4b4:	f001 ff32 	bl	800c31c <acc_confprogram_patch_offset>
 800a4b8:	f002 f880 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800a4bc:	2281      	movs	r2, #129	; 0x81
 800a4be:	2101      	movs	r1, #1
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	e9cd 2100 	strd	r2, r1, [sp]
 800a4c6:	4620      	mov	r0, r4
 800a4c8:	4632      	mov	r2, r6
 800a4ca:	4629      	mov	r1, r5
 800a4cc:	f001 ff26 	bl	800c31c <acc_confprogram_patch_offset>
 800a4d0:	f002 f874 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800a4d4:	2102      	movs	r1, #2
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	2275      	movs	r2, #117	; 0x75
 800a4da:	9101      	str	r1, [sp, #4]
 800a4dc:	4629      	mov	r1, r5
 800a4de:	9200      	str	r2, [sp, #0]
 800a4e0:	4620      	mov	r0, r4
 800a4e2:	4632      	mov	r2, r6
 800a4e4:	f001 ff1a 	bl	800c31c <acc_confprogram_patch_offset>
 800a4e8:	f002 f868 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800a4ec:	f89b 20ac 	ldrb.w	r2, [fp, #172]	; 0xac
 800a4f0:	9201      	str	r2, [sp, #4]
 800a4f2:	2252      	movs	r2, #82	; 0x52
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	4629      	mov	r1, r5
 800a4f8:	9200      	str	r2, [sp, #0]
 800a4fa:	4620      	mov	r0, r4
 800a4fc:	4632      	mov	r2, r6
 800a4fe:	f001 ff0d 	bl	800c31c <acc_confprogram_patch_offset>
 800a502:	eddb 7a2c 	vldr	s15, [fp, #176]	; 0xb0
 800a506:	ee67 7a88 	vmul.f32	s15, s15, s16
 800a50a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a50e:	ee17 7a90 	vmov	r7, s15
 800a512:	f002 f853 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800a516:	3f01      	subs	r7, #1
 800a518:	2268      	movs	r2, #104	; 0x68
 800a51a:	b2bf      	uxth	r7, r7
 800a51c:	4603      	mov	r3, r0
 800a51e:	4629      	mov	r1, r5
 800a520:	e9cd 2700 	strd	r2, r7, [sp]
 800a524:	4620      	mov	r0, r4
 800a526:	4632      	mov	r2, r6
 800a528:	f001 fef8 	bl	800c31c <acc_confprogram_patch_offset>
 800a52c:	f002 f846 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800a530:	f8db 20b4 	ldr.w	r2, [fp, #180]	; 0xb4
 800a534:	9201      	str	r2, [sp, #4]
 800a536:	2253      	movs	r2, #83	; 0x53
 800a538:	4603      	mov	r3, r0
 800a53a:	9200      	str	r2, [sp, #0]
 800a53c:	4629      	mov	r1, r5
 800a53e:	4632      	mov	r2, r6
 800a540:	4620      	mov	r0, r4
 800a542:	f001 feeb 	bl	800c31c <acc_confprogram_patch_offset>
 800a546:	f8db 30b4 	ldr.w	r3, [fp, #180]	; 0xb4
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	f040 8465 	bne.w	800ae1a <acc_cpd_linear_sweep_load_program+0xa0e>
 800a550:	ee19 2a10 	vmov	r2, s18
 800a554:	464b      	mov	r3, r9
 800a556:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 800a55a:	ee18 0a90 	vmov	r0, s17
 800a55e:	f7fc fbe7 	bl	8006d30 <acc_sensor_r2_load_confmem>
 800a562:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a564:	f240 7211 	movw	r2, #1809	; 0x711
 800a568:	449a      	add	sl, r3
 800a56a:	4592      	cmp	sl, r2
 800a56c:	f200 8464 	bhi.w	800ae38 <acc_cpd_linear_sweep_load_program+0xa2c>
 800a570:	f5ca 62e2 	rsb	r2, sl, #1808	; 0x710
 800a574:	3202      	adds	r2, #2
 800a576:	429a      	cmp	r2, r3
 800a578:	bf28      	it	cs
 800a57a:	461a      	movcs	r2, r3
 800a57c:	ea4f 035a 	mov.w	r3, sl, lsr #1
 800a580:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800a582:	9302      	str	r3, [sp, #8]
 800a584:	461d      	mov	r5, r3
 800a586:	4691      	mov	r9, r2
 800a588:	f002 f814 	bl	800c5b4 <acc_image_a111_r2c_sweep_get>
 800a58c:	ea4f 0259 	mov.w	r2, r9, lsr #1
 800a590:	4621      	mov	r1, r4
 800a592:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 800a596:	f001 ffaf 	bl	800c4f8 <acc_confprogram_copy>
 800a59a:	f002 f80f 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800a59e:	fa1f f689 	uxth.w	r6, r9
 800a5a2:	fa1f f58a 	uxth.w	r5, sl
 800a5a6:	f8db 2000 	ldr.w	r2, [fp]
 800a5aa:	9201      	str	r2, [sp, #4]
 800a5ac:	2750      	movs	r7, #80	; 0x50
 800a5ae:	4603      	mov	r3, r0
 800a5b0:	4632      	mov	r2, r6
 800a5b2:	4629      	mov	r1, r5
 800a5b4:	4620      	mov	r0, r4
 800a5b6:	9700      	str	r7, [sp, #0]
 800a5b8:	f001 feb0 	bl	800c31c <acc_confprogram_patch_offset>
 800a5bc:	f001 fffe 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800a5c0:	274e      	movs	r7, #78	; 0x4e
 800a5c2:	f8db 2004 	ldr.w	r2, [fp, #4]
 800a5c6:	9201      	str	r2, [sp, #4]
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	4632      	mov	r2, r6
 800a5cc:	4629      	mov	r1, r5
 800a5ce:	4620      	mov	r0, r4
 800a5d0:	9700      	str	r7, [sp, #0]
 800a5d2:	f001 fea3 	bl	800c31c <acc_confprogram_patch_offset>
 800a5d6:	f001 fff1 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800a5da:	274f      	movs	r7, #79	; 0x4f
 800a5dc:	f8db 2008 	ldr.w	r2, [fp, #8]
 800a5e0:	9201      	str	r2, [sp, #4]
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	4632      	mov	r2, r6
 800a5e6:	4629      	mov	r1, r5
 800a5e8:	4620      	mov	r0, r4
 800a5ea:	9700      	str	r7, [sp, #0]
 800a5ec:	f001 fe96 	bl	800c31c <acc_confprogram_patch_offset>
 800a5f0:	f001 ffe4 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800a5f4:	274c      	movs	r7, #76	; 0x4c
 800a5f6:	f8bb 200c 	ldrh.w	r2, [fp, #12]
 800a5fa:	9201      	str	r2, [sp, #4]
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	4632      	mov	r2, r6
 800a600:	4629      	mov	r1, r5
 800a602:	4620      	mov	r0, r4
 800a604:	9700      	str	r7, [sp, #0]
 800a606:	f001 fe89 	bl	800c31c <acc_confprogram_patch_offset>
 800a60a:	f001 ffd7 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800a60e:	2726      	movs	r7, #38	; 0x26
 800a610:	f8db 2010 	ldr.w	r2, [fp, #16]
 800a614:	9201      	str	r2, [sp, #4]
 800a616:	4603      	mov	r3, r0
 800a618:	4632      	mov	r2, r6
 800a61a:	4629      	mov	r1, r5
 800a61c:	4620      	mov	r0, r4
 800a61e:	9700      	str	r7, [sp, #0]
 800a620:	f001 fe7c 	bl	800c31c <acc_confprogram_patch_offset>
 800a624:	f001 ffca 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800a628:	2773      	movs	r7, #115	; 0x73
 800a62a:	f8db 2014 	ldr.w	r2, [fp, #20]
 800a62e:	9201      	str	r2, [sp, #4]
 800a630:	4603      	mov	r3, r0
 800a632:	4632      	mov	r2, r6
 800a634:	4629      	mov	r1, r5
 800a636:	4620      	mov	r0, r4
 800a638:	9700      	str	r7, [sp, #0]
 800a63a:	f001 fe6f 	bl	800c31c <acc_confprogram_patch_offset>
 800a63e:	f001 ffbd 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800a642:	2762      	movs	r7, #98	; 0x62
 800a644:	f8db 2018 	ldr.w	r2, [fp, #24]
 800a648:	9201      	str	r2, [sp, #4]
 800a64a:	4603      	mov	r3, r0
 800a64c:	4632      	mov	r2, r6
 800a64e:	4629      	mov	r1, r5
 800a650:	4620      	mov	r0, r4
 800a652:	9700      	str	r7, [sp, #0]
 800a654:	f001 fe62 	bl	800c31c <acc_confprogram_patch_offset>
 800a658:	f001 ffb0 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800a65c:	2737      	movs	r7, #55	; 0x37
 800a65e:	f8db 201c 	ldr.w	r2, [fp, #28]
 800a662:	9201      	str	r2, [sp, #4]
 800a664:	4603      	mov	r3, r0
 800a666:	4632      	mov	r2, r6
 800a668:	4629      	mov	r1, r5
 800a66a:	4620      	mov	r0, r4
 800a66c:	9700      	str	r7, [sp, #0]
 800a66e:	f001 fe55 	bl	800c31c <acc_confprogram_patch_offset>
 800a672:	f001 ffa3 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800a676:	2776      	movs	r7, #118	; 0x76
 800a678:	f8db 2020 	ldr.w	r2, [fp, #32]
 800a67c:	9201      	str	r2, [sp, #4]
 800a67e:	4603      	mov	r3, r0
 800a680:	4632      	mov	r2, r6
 800a682:	4629      	mov	r1, r5
 800a684:	4620      	mov	r0, r4
 800a686:	9700      	str	r7, [sp, #0]
 800a688:	f001 fe48 	bl	800c31c <acc_confprogram_patch_offset>
 800a68c:	f001 ff96 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800a690:	2769      	movs	r7, #105	; 0x69
 800a692:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 800a696:	9201      	str	r2, [sp, #4]
 800a698:	4603      	mov	r3, r0
 800a69a:	4632      	mov	r2, r6
 800a69c:	4629      	mov	r1, r5
 800a69e:	4620      	mov	r0, r4
 800a6a0:	9700      	str	r7, [sp, #0]
 800a6a2:	f001 fe3b 	bl	800c31c <acc_confprogram_patch_offset>
 800a6a6:	f001 ff89 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800a6aa:	276a      	movs	r7, #106	; 0x6a
 800a6ac:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 800a6b0:	9201      	str	r2, [sp, #4]
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	4632      	mov	r2, r6
 800a6b6:	4629      	mov	r1, r5
 800a6b8:	4620      	mov	r0, r4
 800a6ba:	9700      	str	r7, [sp, #0]
 800a6bc:	f001 fe2e 	bl	800c31c <acc_confprogram_patch_offset>
 800a6c0:	f001 ff7c 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800a6c4:	2719      	movs	r7, #25
 800a6c6:	f8db 2030 	ldr.w	r2, [fp, #48]	; 0x30
 800a6ca:	9201      	str	r2, [sp, #4]
 800a6cc:	4603      	mov	r3, r0
 800a6ce:	4632      	mov	r2, r6
 800a6d0:	4629      	mov	r1, r5
 800a6d2:	4620      	mov	r0, r4
 800a6d4:	9700      	str	r7, [sp, #0]
 800a6d6:	f001 fe21 	bl	800c31c <acc_confprogram_patch_offset>
 800a6da:	f001 ff6f 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800a6de:	271a      	movs	r7, #26
 800a6e0:	f8db 2034 	ldr.w	r2, [fp, #52]	; 0x34
 800a6e4:	9201      	str	r2, [sp, #4]
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	4632      	mov	r2, r6
 800a6ea:	4629      	mov	r1, r5
 800a6ec:	4620      	mov	r0, r4
 800a6ee:	9700      	str	r7, [sp, #0]
 800a6f0:	f001 fe14 	bl	800c31c <acc_confprogram_patch_offset>
 800a6f4:	f001 ff62 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800a6f8:	271b      	movs	r7, #27
 800a6fa:	f8db 2038 	ldr.w	r2, [fp, #56]	; 0x38
 800a6fe:	9201      	str	r2, [sp, #4]
 800a700:	4603      	mov	r3, r0
 800a702:	4632      	mov	r2, r6
 800a704:	4629      	mov	r1, r5
 800a706:	4620      	mov	r0, r4
 800a708:	9700      	str	r7, [sp, #0]
 800a70a:	f001 fe07 	bl	800c31c <acc_confprogram_patch_offset>
 800a70e:	f001 ff55 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800a712:	271c      	movs	r7, #28
 800a714:	f8db 203c 	ldr.w	r2, [fp, #60]	; 0x3c
 800a718:	9201      	str	r2, [sp, #4]
 800a71a:	4603      	mov	r3, r0
 800a71c:	4632      	mov	r2, r6
 800a71e:	4629      	mov	r1, r5
 800a720:	4620      	mov	r0, r4
 800a722:	9700      	str	r7, [sp, #0]
 800a724:	f001 fdfa 	bl	800c31c <acc_confprogram_patch_offset>
 800a728:	f001 ff48 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800a72c:	271d      	movs	r7, #29
 800a72e:	f8db 2040 	ldr.w	r2, [fp, #64]	; 0x40
 800a732:	9201      	str	r2, [sp, #4]
 800a734:	4603      	mov	r3, r0
 800a736:	4632      	mov	r2, r6
 800a738:	4629      	mov	r1, r5
 800a73a:	4620      	mov	r0, r4
 800a73c:	9700      	str	r7, [sp, #0]
 800a73e:	f001 fded 	bl	800c31c <acc_confprogram_patch_offset>
 800a742:	f001 ff3b 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800a746:	271e      	movs	r7, #30
 800a748:	f8db 2044 	ldr.w	r2, [fp, #68]	; 0x44
 800a74c:	9201      	str	r2, [sp, #4]
 800a74e:	4603      	mov	r3, r0
 800a750:	4632      	mov	r2, r6
 800a752:	4629      	mov	r1, r5
 800a754:	4620      	mov	r0, r4
 800a756:	9700      	str	r7, [sp, #0]
 800a758:	f001 fde0 	bl	800c31c <acc_confprogram_patch_offset>
 800a75c:	f001 ff2e 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800a760:	2755      	movs	r7, #85	; 0x55
 800a762:	f8db 2048 	ldr.w	r2, [fp, #72]	; 0x48
 800a766:	9201      	str	r2, [sp, #4]
 800a768:	4603      	mov	r3, r0
 800a76a:	4632      	mov	r2, r6
 800a76c:	4629      	mov	r1, r5
 800a76e:	4620      	mov	r0, r4
 800a770:	9700      	str	r7, [sp, #0]
 800a772:	f001 fdd3 	bl	800c31c <acc_confprogram_patch_offset>
 800a776:	f001 ff21 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800a77a:	2756      	movs	r7, #86	; 0x56
 800a77c:	f8db 204c 	ldr.w	r2, [fp, #76]	; 0x4c
 800a780:	9201      	str	r2, [sp, #4]
 800a782:	4603      	mov	r3, r0
 800a784:	4632      	mov	r2, r6
 800a786:	4629      	mov	r1, r5
 800a788:	4620      	mov	r0, r4
 800a78a:	9700      	str	r7, [sp, #0]
 800a78c:	f001 fdc6 	bl	800c31c <acc_confprogram_patch_offset>
 800a790:	f001 ff14 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800a794:	2758      	movs	r7, #88	; 0x58
 800a796:	f8db 2050 	ldr.w	r2, [fp, #80]	; 0x50
 800a79a:	9201      	str	r2, [sp, #4]
 800a79c:	4603      	mov	r3, r0
 800a79e:	4632      	mov	r2, r6
 800a7a0:	4629      	mov	r1, r5
 800a7a2:	4620      	mov	r0, r4
 800a7a4:	9700      	str	r7, [sp, #0]
 800a7a6:	f001 fdb9 	bl	800c31c <acc_confprogram_patch_offset>
 800a7aa:	f001 ff07 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800a7ae:	276b      	movs	r7, #107	; 0x6b
 800a7b0:	f8db 2054 	ldr.w	r2, [fp, #84]	; 0x54
 800a7b4:	9201      	str	r2, [sp, #4]
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	4632      	mov	r2, r6
 800a7ba:	4629      	mov	r1, r5
 800a7bc:	4620      	mov	r0, r4
 800a7be:	9700      	str	r7, [sp, #0]
 800a7c0:	f001 fdac 	bl	800c31c <acc_confprogram_patch_offset>
 800a7c4:	f001 fefa 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800a7c8:	2786      	movs	r7, #134	; 0x86
 800a7ca:	f8db 2058 	ldr.w	r2, [fp, #88]	; 0x58
 800a7ce:	9201      	str	r2, [sp, #4]
 800a7d0:	4603      	mov	r3, r0
 800a7d2:	4632      	mov	r2, r6
 800a7d4:	4629      	mov	r1, r5
 800a7d6:	4620      	mov	r0, r4
 800a7d8:	9700      	str	r7, [sp, #0]
 800a7da:	f001 fd9f 	bl	800c31c <acc_confprogram_patch_offset>
 800a7de:	f001 feed 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800a7e2:	2764      	movs	r7, #100	; 0x64
 800a7e4:	f8db 205c 	ldr.w	r2, [fp, #92]	; 0x5c
 800a7e8:	9201      	str	r2, [sp, #4]
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	4632      	mov	r2, r6
 800a7ee:	4629      	mov	r1, r5
 800a7f0:	4620      	mov	r0, r4
 800a7f2:	9700      	str	r7, [sp, #0]
 800a7f4:	f001 fd92 	bl	800c31c <acc_confprogram_patch_offset>
 800a7f8:	f001 fee0 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800a7fc:	2765      	movs	r7, #101	; 0x65
 800a7fe:	f8db 2060 	ldr.w	r2, [fp, #96]	; 0x60
 800a802:	9201      	str	r2, [sp, #4]
 800a804:	4603      	mov	r3, r0
 800a806:	4632      	mov	r2, r6
 800a808:	4629      	mov	r1, r5
 800a80a:	4620      	mov	r0, r4
 800a80c:	9700      	str	r7, [sp, #0]
 800a80e:	f001 fd85 	bl	800c31c <acc_confprogram_patch_offset>
 800a812:	f001 fed3 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800a816:	2740      	movs	r7, #64	; 0x40
 800a818:	f8db 2064 	ldr.w	r2, [fp, #100]	; 0x64
 800a81c:	9201      	str	r2, [sp, #4]
 800a81e:	4603      	mov	r3, r0
 800a820:	4632      	mov	r2, r6
 800a822:	4629      	mov	r1, r5
 800a824:	4620      	mov	r0, r4
 800a826:	9700      	str	r7, [sp, #0]
 800a828:	f001 fd78 	bl	800c31c <acc_confprogram_patch_offset>
 800a82c:	f001 fec6 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800a830:	2741      	movs	r7, #65	; 0x41
 800a832:	f8db 2068 	ldr.w	r2, [fp, #104]	; 0x68
 800a836:	9201      	str	r2, [sp, #4]
 800a838:	4603      	mov	r3, r0
 800a83a:	4632      	mov	r2, r6
 800a83c:	4629      	mov	r1, r5
 800a83e:	4620      	mov	r0, r4
 800a840:	9700      	str	r7, [sp, #0]
 800a842:	f001 fd6b 	bl	800c31c <acc_confprogram_patch_offset>
 800a846:	f001 feb9 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800a84a:	2772      	movs	r7, #114	; 0x72
 800a84c:	f8db 206c 	ldr.w	r2, [fp, #108]	; 0x6c
 800a850:	9201      	str	r2, [sp, #4]
 800a852:	4603      	mov	r3, r0
 800a854:	4632      	mov	r2, r6
 800a856:	4629      	mov	r1, r5
 800a858:	4620      	mov	r0, r4
 800a85a:	9700      	str	r7, [sp, #0]
 800a85c:	f001 fd5e 	bl	800c31c <acc_confprogram_patch_offset>
 800a860:	f001 feac 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800a864:	2754      	movs	r7, #84	; 0x54
 800a866:	f8db 2070 	ldr.w	r2, [fp, #112]	; 0x70
 800a86a:	9201      	str	r2, [sp, #4]
 800a86c:	4603      	mov	r3, r0
 800a86e:	4632      	mov	r2, r6
 800a870:	4629      	mov	r1, r5
 800a872:	4620      	mov	r0, r4
 800a874:	9700      	str	r7, [sp, #0]
 800a876:	f001 fd51 	bl	800c31c <acc_confprogram_patch_offset>
 800a87a:	f001 fe9f 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800a87e:	2739      	movs	r7, #57	; 0x39
 800a880:	f8db 2074 	ldr.w	r2, [fp, #116]	; 0x74
 800a884:	9201      	str	r2, [sp, #4]
 800a886:	4603      	mov	r3, r0
 800a888:	4632      	mov	r2, r6
 800a88a:	4629      	mov	r1, r5
 800a88c:	4620      	mov	r0, r4
 800a88e:	9700      	str	r7, [sp, #0]
 800a890:	f001 fd44 	bl	800c31c <acc_confprogram_patch_offset>
 800a894:	f8db 3074 	ldr.w	r3, [fp, #116]	; 0x74
 800a898:	2b00      	cmp	r3, #0
 800a89a:	f040 8239 	bne.w	800ad10 <acc_cpd_linear_sweep_load_program+0x904>
 800a89e:	f001 fe8d 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800a8a2:	f8db 2078 	ldr.w	r2, [fp, #120]	; 0x78
 800a8a6:	9201      	str	r2, [sp, #4]
 800a8a8:	2251      	movs	r2, #81	; 0x51
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	4629      	mov	r1, r5
 800a8ae:	9200      	str	r2, [sp, #0]
 800a8b0:	4620      	mov	r0, r4
 800a8b2:	4632      	mov	r2, r6
 800a8b4:	f001 fd32 	bl	800c31c <acc_confprogram_patch_offset>
 800a8b8:	f001 fe80 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800a8bc:	f8db 207c 	ldr.w	r2, [fp, #124]	; 0x7c
 800a8c0:	9201      	str	r2, [sp, #4]
 800a8c2:	2277      	movs	r2, #119	; 0x77
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	4629      	mov	r1, r5
 800a8c8:	9200      	str	r2, [sp, #0]
 800a8ca:	4620      	mov	r0, r4
 800a8cc:	4632      	mov	r2, r6
 800a8ce:	f001 fd25 	bl	800c31c <acc_confprogram_patch_offset>
 800a8d2:	f001 fe73 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800a8d6:	f8db 2080 	ldr.w	r2, [fp, #128]	; 0x80
 800a8da:	9201      	str	r2, [sp, #4]
 800a8dc:	2244      	movs	r2, #68	; 0x44
 800a8de:	4603      	mov	r3, r0
 800a8e0:	4629      	mov	r1, r5
 800a8e2:	9200      	str	r2, [sp, #0]
 800a8e4:	4620      	mov	r0, r4
 800a8e6:	4632      	mov	r2, r6
 800a8e8:	f001 fd18 	bl	800c31c <acc_confprogram_patch_offset>
 800a8ec:	f001 fe66 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800a8f0:	f8db 2084 	ldr.w	r2, [fp, #132]	; 0x84
 800a8f4:	9201      	str	r2, [sp, #4]
 800a8f6:	2243      	movs	r2, #67	; 0x43
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	9200      	str	r2, [sp, #0]
 800a8fc:	4629      	mov	r1, r5
 800a8fe:	4632      	mov	r2, r6
 800a900:	4620      	mov	r0, r4
 800a902:	f001 fd0b 	bl	800c31c <acc_confprogram_patch_offset>
 800a906:	f8db 7088 	ldr.w	r7, [fp, #136]	; 0x88
 800a90a:	b2bb      	uxth	r3, r7
 800a90c:	2b08      	cmp	r3, #8
 800a90e:	f200 81e7 	bhi.w	800ace0 <acc_cpd_linear_sweep_load_program+0x8d4>
 800a912:	4698      	mov	r8, r3
 800a914:	2700      	movs	r7, #0
 800a916:	f001 fe51 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800a91a:	226c      	movs	r2, #108	; 0x6c
 800a91c:	4603      	mov	r3, r0
 800a91e:	e9cd 2800 	strd	r2, r8, [sp]
 800a922:	4629      	mov	r1, r5
 800a924:	4632      	mov	r2, r6
 800a926:	4620      	mov	r0, r4
 800a928:	f001 fcf8 	bl	800c31c <acc_confprogram_patch_offset>
 800a92c:	f001 fe46 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800a930:	2259      	movs	r2, #89	; 0x59
 800a932:	4603      	mov	r3, r0
 800a934:	e9cd 2800 	strd	r2, r8, [sp]
 800a938:	4629      	mov	r1, r5
 800a93a:	4632      	mov	r2, r6
 800a93c:	4620      	mov	r0, r4
 800a93e:	f001 fced 	bl	800c31c <acc_confprogram_patch_offset>
 800a942:	f001 fe3b 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800a946:	216e      	movs	r1, #110	; 0x6e
 800a948:	f001 fdd2 	bl	800c4f0 <acc_confprogram_get_default_value>
 800a94c:	900a      	str	r0, [sp, #40]	; 0x28
 800a94e:	f001 fe35 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800a952:	2170      	movs	r1, #112	; 0x70
 800a954:	f001 fdcc 	bl	800c4f0 <acc_confprogram_get_default_value>
 800a958:	9003      	str	r0, [sp, #12]
 800a95a:	f001 fe2f 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800a95e:	216f      	movs	r1, #111	; 0x6f
 800a960:	f001 fdc6 	bl	800c4f0 <acc_confprogram_get_default_value>
 800a964:	9004      	str	r0, [sp, #16]
 800a966:	f001 fe29 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800a96a:	215b      	movs	r1, #91	; 0x5b
 800a96c:	f001 fdc0 	bl	800c4f0 <acc_confprogram_get_default_value>
 800a970:	4680      	mov	r8, r0
 800a972:	f001 fe23 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800a976:	215d      	movs	r1, #93	; 0x5d
 800a978:	f001 fdba 	bl	800c4f0 <acc_confprogram_get_default_value>
 800a97c:	9005      	str	r0, [sp, #20]
 800a97e:	f001 fe1d 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800a982:	215c      	movs	r1, #92	; 0x5c
 800a984:	f001 fdb4 	bl	800c4f0 <acc_confprogram_get_default_value>
 800a988:	9006      	str	r0, [sp, #24]
 800a98a:	f001 fe17 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800a98e:	214a      	movs	r1, #74	; 0x4a
 800a990:	f001 fdae 	bl	800c4f0 <acc_confprogram_get_default_value>
 800a994:	9007      	str	r0, [sp, #28]
 800a996:	f001 fe11 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800a99a:	2145      	movs	r1, #69	; 0x45
 800a99c:	f001 fda8 	bl	800c4f0 <acc_confprogram_get_default_value>
 800a9a0:	9008      	str	r0, [sp, #32]
 800a9a2:	f001 fe0b 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800a9a6:	2122      	movs	r1, #34	; 0x22
 800a9a8:	f001 fda2 	bl	800c4f0 <acc_confprogram_get_default_value>
 800a9ac:	9009      	str	r0, [sp, #36]	; 0x24
 800a9ae:	f001 fe05 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800a9b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a9b4:	216e      	movs	r1, #110	; 0x6e
 800a9b6:	433a      	orrs	r2, r7
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	9201      	str	r2, [sp, #4]
 800a9bc:	9100      	str	r1, [sp, #0]
 800a9be:	4632      	mov	r2, r6
 800a9c0:	4629      	mov	r1, r5
 800a9c2:	4620      	mov	r0, r4
 800a9c4:	f001 fcaa 	bl	800c31c <acc_confprogram_patch_offset>
 800a9c8:	f001 fdf8 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800a9cc:	9a03      	ldr	r2, [sp, #12]
 800a9ce:	2170      	movs	r1, #112	; 0x70
 800a9d0:	433a      	orrs	r2, r7
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	9201      	str	r2, [sp, #4]
 800a9d6:	9100      	str	r1, [sp, #0]
 800a9d8:	4632      	mov	r2, r6
 800a9da:	4629      	mov	r1, r5
 800a9dc:	4620      	mov	r0, r4
 800a9de:	f001 fc9d 	bl	800c31c <acc_confprogram_patch_offset>
 800a9e2:	f001 fdeb 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800a9e6:	9a04      	ldr	r2, [sp, #16]
 800a9e8:	216f      	movs	r1, #111	; 0x6f
 800a9ea:	433a      	orrs	r2, r7
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	e9cd 1200 	strd	r1, r2, [sp]
 800a9f2:	4620      	mov	r0, r4
 800a9f4:	4632      	mov	r2, r6
 800a9f6:	4629      	mov	r1, r5
 800a9f8:	f001 fc90 	bl	800c31c <acc_confprogram_patch_offset>
 800a9fc:	f001 fdde 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800aa00:	ea48 0207 	orr.w	r2, r8, r7
 800aa04:	215b      	movs	r1, #91	; 0x5b
 800aa06:	4603      	mov	r3, r0
 800aa08:	e9cd 1200 	strd	r1, r2, [sp]
 800aa0c:	4620      	mov	r0, r4
 800aa0e:	4632      	mov	r2, r6
 800aa10:	4629      	mov	r1, r5
 800aa12:	f001 fc83 	bl	800c31c <acc_confprogram_patch_offset>
 800aa16:	f001 fdd1 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800aa1a:	9a05      	ldr	r2, [sp, #20]
 800aa1c:	215d      	movs	r1, #93	; 0x5d
 800aa1e:	433a      	orrs	r2, r7
 800aa20:	4603      	mov	r3, r0
 800aa22:	e9cd 1200 	strd	r1, r2, [sp]
 800aa26:	4620      	mov	r0, r4
 800aa28:	4632      	mov	r2, r6
 800aa2a:	4629      	mov	r1, r5
 800aa2c:	f001 fc76 	bl	800c31c <acc_confprogram_patch_offset>
 800aa30:	f001 fdc4 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800aa34:	9a06      	ldr	r2, [sp, #24]
 800aa36:	215c      	movs	r1, #92	; 0x5c
 800aa38:	433a      	orrs	r2, r7
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	e9cd 1200 	strd	r1, r2, [sp]
 800aa40:	4620      	mov	r0, r4
 800aa42:	4632      	mov	r2, r6
 800aa44:	4629      	mov	r1, r5
 800aa46:	f001 fc69 	bl	800c31c <acc_confprogram_patch_offset>
 800aa4a:	f001 fdb7 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800aa4e:	9a07      	ldr	r2, [sp, #28]
 800aa50:	214a      	movs	r1, #74	; 0x4a
 800aa52:	433a      	orrs	r2, r7
 800aa54:	4603      	mov	r3, r0
 800aa56:	e9cd 1200 	strd	r1, r2, [sp]
 800aa5a:	4620      	mov	r0, r4
 800aa5c:	4632      	mov	r2, r6
 800aa5e:	4629      	mov	r1, r5
 800aa60:	f001 fc5c 	bl	800c31c <acc_confprogram_patch_offset>
 800aa64:	f001 fdaa 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800aa68:	9a08      	ldr	r2, [sp, #32]
 800aa6a:	2145      	movs	r1, #69	; 0x45
 800aa6c:	433a      	orrs	r2, r7
 800aa6e:	4603      	mov	r3, r0
 800aa70:	e9cd 1200 	strd	r1, r2, [sp]
 800aa74:	4620      	mov	r0, r4
 800aa76:	4632      	mov	r2, r6
 800aa78:	4629      	mov	r1, r5
 800aa7a:	f001 fc4f 	bl	800c31c <acc_confprogram_patch_offset>
 800aa7e:	f001 fd9d 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800aa82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa84:	433a      	orrs	r2, r7
 800aa86:	4617      	mov	r7, r2
 800aa88:	2222      	movs	r2, #34	; 0x22
 800aa8a:	4629      	mov	r1, r5
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	e9cd 2700 	strd	r2, r7, [sp]
 800aa92:	4620      	mov	r0, r4
 800aa94:	4632      	mov	r2, r6
 800aa96:	f001 fc41 	bl	800c31c <acc_confprogram_patch_offset>
 800aa9a:	f001 fd8f 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800aa9e:	f8db 2090 	ldr.w	r2, [fp, #144]	; 0x90
 800aaa2:	2a05      	cmp	r2, #5
 800aaa4:	bf8c      	ite	hi
 800aaa6:	2164      	movhi	r1, #100	; 0x64
 800aaa8:	2144      	movls	r1, #68	; 0x44
 800aaaa:	2205      	movs	r2, #5
 800aaac:	4603      	mov	r3, r0
 800aaae:	e9cd 2100 	strd	r2, r1, [sp]
 800aab2:	4620      	mov	r0, r4
 800aab4:	4632      	mov	r2, r6
 800aab6:	4629      	mov	r1, r5
 800aab8:	f001 fc30 	bl	800c31c <acc_confprogram_patch_offset>
 800aabc:	f001 fd7e 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800aac0:	f8db 2090 	ldr.w	r2, [fp, #144]	; 0x90
 800aac4:	0152      	lsls	r2, r2, #5
 800aac6:	3a03      	subs	r2, #3
 800aac8:	2124      	movs	r1, #36	; 0x24
 800aaca:	4603      	mov	r3, r0
 800aacc:	e9cd 1200 	strd	r1, r2, [sp]
 800aad0:	4620      	mov	r0, r4
 800aad2:	4632      	mov	r2, r6
 800aad4:	4629      	mov	r1, r5
 800aad6:	f001 fc21 	bl	800c31c <acc_confprogram_patch_offset>
 800aada:	f001 fd6f 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800aade:	f8db 2090 	ldr.w	r2, [fp, #144]	; 0x90
 800aae2:	0152      	lsls	r2, r2, #5
 800aae4:	0852      	lsrs	r2, r2, #1
 800aae6:	3a03      	subs	r2, #3
 800aae8:	2125      	movs	r1, #37	; 0x25
 800aaea:	4603      	mov	r3, r0
 800aaec:	e9cd 1200 	strd	r1, r2, [sp]
 800aaf0:	4620      	mov	r0, r4
 800aaf2:	4632      	mov	r2, r6
 800aaf4:	4629      	mov	r1, r5
 800aaf6:	f001 fc11 	bl	800c31c <acc_confprogram_patch_offset>
 800aafa:	f001 fd5f 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800aafe:	f8db 2094 	ldr.w	r2, [fp, #148]	; 0x94
 800ab02:	9201      	str	r2, [sp, #4]
 800ab04:	2236      	movs	r2, #54	; 0x36
 800ab06:	4603      	mov	r3, r0
 800ab08:	4629      	mov	r1, r5
 800ab0a:	9200      	str	r2, [sp, #0]
 800ab0c:	4620      	mov	r0, r4
 800ab0e:	4632      	mov	r2, r6
 800ab10:	f001 fc04 	bl	800c31c <acc_confprogram_patch_offset>
 800ab14:	f001 fd52 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800ab18:	f8db 2098 	ldr.w	r2, [fp, #152]	; 0x98
 800ab1c:	215e      	movs	r1, #94	; 0x5e
 800ab1e:	320e      	adds	r2, #14
 800ab20:	4603      	mov	r3, r0
 800ab22:	e9cd 1200 	strd	r1, r2, [sp]
 800ab26:	4620      	mov	r0, r4
 800ab28:	4632      	mov	r2, r6
 800ab2a:	4629      	mov	r1, r5
 800ab2c:	f001 fbf6 	bl	800c31c <acc_confprogram_patch_offset>
 800ab30:	f001 fd44 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800ab34:	2120      	movs	r1, #32
 800ab36:	f001 fcdb 	bl	800c4f0 <acc_confprogram_get_default_value>
 800ab3a:	f8db 3090 	ldr.w	r3, [fp, #144]	; 0x90
 800ab3e:	2b05      	cmp	r3, #5
 800ab40:	bf98      	it	ls
 800ab42:	3002      	addls	r0, #2
 800ab44:	fbb0 f7f3 	udiv	r7, r0, r3
 800ab48:	fb03 0717 	mls	r7, r3, r7, r0
 800ab4c:	b107      	cbz	r7, 800ab50 <acc_cpd_linear_sweep_load_program+0x744>
 800ab4e:	1bdf      	subs	r7, r3, r7
 800ab50:	f8db 309c 	ldr.w	r3, [fp, #156]	; 0x9c
 800ab54:	eb07 0803 	add.w	r8, r7, r3
 800ab58:	f001 fd30 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800ab5c:	221f      	movs	r2, #31
 800ab5e:	4603      	mov	r3, r0
 800ab60:	e9cd 2800 	strd	r2, r8, [sp]
 800ab64:	4629      	mov	r1, r5
 800ab66:	4632      	mov	r2, r6
 800ab68:	4620      	mov	r0, r4
 800ab6a:	f001 fbd7 	bl	800c31c <acc_confprogram_patch_offset>
 800ab6e:	f8db 309c 	ldr.w	r3, [fp, #156]	; 0x9c
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	f040 809a 	bne.w	800acac <acc_cpd_linear_sweep_load_program+0x8a0>
 800ab78:	f001 fd20 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800ab7c:	213a      	movs	r1, #58	; 0x3a
 800ab7e:	f001 fcb7 	bl	800c4f0 <acc_confprogram_get_default_value>
 800ab82:	f8db 3090 	ldr.w	r3, [fp, #144]	; 0x90
 800ab86:	2b05      	cmp	r3, #5
 800ab88:	bf8c      	ite	hi
 800ab8a:	3007      	addhi	r0, #7
 800ab8c:	3009      	addls	r0, #9
 800ab8e:	fbb0 f7f3 	udiv	r7, r0, r3
 800ab92:	fb03 0717 	mls	r7, r3, r7, r0
 800ab96:	b107      	cbz	r7, 800ab9a <acc_cpd_linear_sweep_load_program+0x78e>
 800ab98:	1bdf      	subs	r7, r3, r7
 800ab9a:	f8db 30a0 	ldr.w	r3, [fp, #160]	; 0xa0
 800ab9e:	eb07 0803 	add.w	r8, r7, r3
 800aba2:	f001 fd0b 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800aba6:	2266      	movs	r2, #102	; 0x66
 800aba8:	4603      	mov	r3, r0
 800abaa:	e9cd 2800 	strd	r2, r8, [sp]
 800abae:	4629      	mov	r1, r5
 800abb0:	4632      	mov	r2, r6
 800abb2:	4620      	mov	r0, r4
 800abb4:	f001 fbb2 	bl	800c31c <acc_confprogram_patch_offset>
 800abb8:	f8db 30a0 	ldr.w	r3, [fp, #160]	; 0xa0
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d15c      	bne.n	800ac7a <acc_cpd_linear_sweep_load_program+0x86e>
 800abc0:	f89b 308d 	ldrb.w	r3, [fp, #141]	; 0x8d
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d141      	bne.n	800ac4c <acc_cpd_linear_sweep_load_program+0x840>
 800abc8:	f8db 70a4 	ldr.w	r7, [fp, #164]	; 0xa4
 800abcc:	f001 fcf6 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800abd0:	1e79      	subs	r1, r7, #1
 800abd2:	2206      	movs	r2, #6
 800abd4:	4603      	mov	r3, r0
 800abd6:	e9cd 2100 	strd	r2, r1, [sp]
 800abda:	4620      	mov	r0, r4
 800abdc:	4632      	mov	r2, r6
 800abde:	4629      	mov	r1, r5
 800abe0:	f001 fb9c 	bl	800c31c <acc_confprogram_patch_offset>
 800abe4:	f001 fcea 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800abe8:	2204      	movs	r2, #4
 800abea:	2163      	movs	r1, #99	; 0x63
 800abec:	fbb2 f7f7 	udiv	r7, r2, r7
 800abf0:	3f01      	subs	r7, #1
 800abf2:	4603      	mov	r3, r0
 800abf4:	e9cd 1700 	strd	r1, r7, [sp]
 800abf8:	4632      	mov	r2, r6
 800abfa:	4629      	mov	r1, r5
 800abfc:	4620      	mov	r0, r4
 800abfe:	f001 fb8d 	bl	800c31c <acc_confprogram_patch_offset>
 800ac02:	f001 fcdb 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800ac06:	f8db 20a8 	ldr.w	r2, [fp, #168]	; 0xa8
 800ac0a:	9201      	str	r2, [sp, #4]
 800ac0c:	2261      	movs	r2, #97	; 0x61
 800ac0e:	4603      	mov	r3, r0
 800ac10:	4629      	mov	r1, r5
 800ac12:	9200      	str	r2, [sp, #0]
 800ac14:	4620      	mov	r0, r4
 800ac16:	4632      	mov	r2, r6
 800ac18:	f001 fb80 	bl	800c31c <acc_confprogram_patch_offset>
 800ac1c:	f001 fcce 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800ac20:	f89b 20ad 	ldrb.w	r2, [fp, #173]	; 0xad
 800ac24:	9201      	str	r2, [sp, #4]
 800ac26:	2246      	movs	r2, #70	; 0x46
 800ac28:	4603      	mov	r3, r0
 800ac2a:	9200      	str	r2, [sp, #0]
 800ac2c:	4629      	mov	r1, r5
 800ac2e:	4632      	mov	r2, r6
 800ac30:	4620      	mov	r0, r4
 800ac32:	f001 fb73 	bl	800c31c <acc_confprogram_patch_offset>
 800ac36:	f89b 70ad 	ldrb.w	r7, [fp, #173]	; 0xad
 800ac3a:	2f00      	cmp	r7, #0
 800ac3c:	f47f ac24 	bne.w	800a488 <acc_cpd_linear_sweep_load_program+0x7c>
 800ac40:	f001 fcbc 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800ac44:	2223      	movs	r2, #35	; 0x23
 800ac46:	4603      	mov	r3, r0
 800ac48:	9701      	str	r7, [sp, #4]
 800ac4a:	e447      	b.n	800a4dc <acc_cpd_linear_sweep_load_program+0xd0>
 800ac4c:	f001 fcb6 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800ac50:	223b      	movs	r2, #59	; 0x3b
 800ac52:	2100      	movs	r1, #0
 800ac54:	e9cd 2100 	strd	r2, r1, [sp]
 800ac58:	4603      	mov	r3, r0
 800ac5a:	4632      	mov	r2, r6
 800ac5c:	4629      	mov	r1, r5
 800ac5e:	4620      	mov	r0, r4
 800ac60:	f001 fb5c 	bl	800c31c <acc_confprogram_patch_offset>
 800ac64:	f7fa fd64 	bl	8005730 <acc_rss_integration_log_level>
 800ac68:	2801      	cmp	r0, #1
 800ac6a:	d9ad      	bls.n	800abc8 <acc_cpd_linear_sweep_load_program+0x7bc>
 800ac6c:	4b7b      	ldr	r3, [pc, #492]	; (800ae5c <acc_cpd_linear_sweep_load_program+0xa50>)
 800ac6e:	4a7c      	ldr	r2, [pc, #496]	; (800ae60 <acc_cpd_linear_sweep_load_program+0xa54>)
 800ac70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac72:	497c      	ldr	r1, [pc, #496]	; (800ae64 <acc_cpd_linear_sweep_load_program+0xa58>)
 800ac74:	2002      	movs	r0, #2
 800ac76:	4798      	blx	r3
 800ac78:	e7a6      	b.n	800abc8 <acc_cpd_linear_sweep_load_program+0x7bc>
 800ac7a:	f7fa fd59 	bl	8005730 <acc_rss_integration_log_level>
 800ac7e:	2801      	cmp	r0, #1
 800ac80:	d908      	bls.n	800ac94 <acc_cpd_linear_sweep_load_program+0x888>
 800ac82:	4b76      	ldr	r3, [pc, #472]	; (800ae5c <acc_cpd_linear_sweep_load_program+0xa50>)
 800ac84:	4a78      	ldr	r2, [pc, #480]	; (800ae68 <acc_cpd_linear_sweep_load_program+0xa5c>)
 800ac86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac88:	9303      	str	r3, [sp, #12]
 800ac8a:	4976      	ldr	r1, [pc, #472]	; (800ae64 <acc_cpd_linear_sweep_load_program+0xa58>)
 800ac8c:	463b      	mov	r3, r7
 800ac8e:	2002      	movs	r0, #2
 800ac90:	9f03      	ldr	r7, [sp, #12]
 800ac92:	47b8      	blx	r7
 800ac94:	f7fa fd4c 	bl	8005730 <acc_rss_integration_log_level>
 800ac98:	2801      	cmp	r0, #1
 800ac9a:	d991      	bls.n	800abc0 <acc_cpd_linear_sweep_load_program+0x7b4>
 800ac9c:	4b6f      	ldr	r3, [pc, #444]	; (800ae5c <acc_cpd_linear_sweep_load_program+0xa50>)
 800ac9e:	4a73      	ldr	r2, [pc, #460]	; (800ae6c <acc_cpd_linear_sweep_load_program+0xa60>)
 800aca0:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 800aca2:	4970      	ldr	r1, [pc, #448]	; (800ae64 <acc_cpd_linear_sweep_load_program+0xa58>)
 800aca4:	4643      	mov	r3, r8
 800aca6:	2002      	movs	r0, #2
 800aca8:	47b8      	blx	r7
 800acaa:	e789      	b.n	800abc0 <acc_cpd_linear_sweep_load_program+0x7b4>
 800acac:	f7fa fd40 	bl	8005730 <acc_rss_integration_log_level>
 800acb0:	2801      	cmp	r0, #1
 800acb2:	d908      	bls.n	800acc6 <acc_cpd_linear_sweep_load_program+0x8ba>
 800acb4:	4b69      	ldr	r3, [pc, #420]	; (800ae5c <acc_cpd_linear_sweep_load_program+0xa50>)
 800acb6:	4a6e      	ldr	r2, [pc, #440]	; (800ae70 <acc_cpd_linear_sweep_load_program+0xa64>)
 800acb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acba:	9303      	str	r3, [sp, #12]
 800acbc:	4969      	ldr	r1, [pc, #420]	; (800ae64 <acc_cpd_linear_sweep_load_program+0xa58>)
 800acbe:	463b      	mov	r3, r7
 800acc0:	2002      	movs	r0, #2
 800acc2:	9f03      	ldr	r7, [sp, #12]
 800acc4:	47b8      	blx	r7
 800acc6:	f7fa fd33 	bl	8005730 <acc_rss_integration_log_level>
 800acca:	2801      	cmp	r0, #1
 800accc:	f67f af54 	bls.w	800ab78 <acc_cpd_linear_sweep_load_program+0x76c>
 800acd0:	4b62      	ldr	r3, [pc, #392]	; (800ae5c <acc_cpd_linear_sweep_load_program+0xa50>)
 800acd2:	4a68      	ldr	r2, [pc, #416]	; (800ae74 <acc_cpd_linear_sweep_load_program+0xa68>)
 800acd4:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 800acd6:	4963      	ldr	r1, [pc, #396]	; (800ae64 <acc_cpd_linear_sweep_load_program+0xa58>)
 800acd8:	4643      	mov	r3, r8
 800acda:	2002      	movs	r0, #2
 800acdc:	47b8      	blx	r7
 800acde:	e74b      	b.n	800ab78 <acc_cpd_linear_sweep_load_program+0x76c>
 800ace0:	f001 fc6c 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800ace4:	fa1f f887 	uxth.w	r8, r7
 800ace8:	2267      	movs	r2, #103	; 0x67
 800acea:	2102      	movs	r1, #2
 800acec:	f1a8 0808 	sub.w	r8, r8, #8
 800acf0:	27ff      	movs	r7, #255	; 0xff
 800acf2:	e9cd 2100 	strd	r2, r1, [sp]
 800acf6:	4603      	mov	r3, r0
 800acf8:	fa07 f708 	lsl.w	r7, r7, r8
 800acfc:	4632      	mov	r2, r6
 800acfe:	4629      	mov	r1, r5
 800ad00:	4620      	mov	r0, r4
 800ad02:	f001 fb0b 	bl	800c31c <acc_confprogram_patch_offset>
 800ad06:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 800ad0a:	f04f 0808 	mov.w	r8, #8
 800ad0e:	e602      	b.n	800a916 <acc_cpd_linear_sweep_load_program+0x50a>
 800ad10:	f001 fc54 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800ad14:	2210      	movs	r2, #16
 800ad16:	2101      	movs	r1, #1
 800ad18:	e9cd 2100 	strd	r2, r1, [sp]
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	4632      	mov	r2, r6
 800ad20:	4629      	mov	r1, r5
 800ad22:	4620      	mov	r0, r4
 800ad24:	f001 fafa 	bl	800c31c <acc_confprogram_patch_offset>
 800ad28:	f001 fc48 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800ad2c:	f64f 7880 	movw	r8, #65408	; 0xff80
 800ad30:	2212      	movs	r2, #18
 800ad32:	4603      	mov	r3, r0
 800ad34:	4629      	mov	r1, r5
 800ad36:	e9cd 2800 	strd	r2, r8, [sp]
 800ad3a:	4620      	mov	r0, r4
 800ad3c:	4632      	mov	r2, r6
 800ad3e:	f001 faed 	bl	800c31c <acc_confprogram_patch_offset>
 800ad42:	f001 fc3b 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800ad46:	2707      	movs	r7, #7
 800ad48:	2214      	movs	r2, #20
 800ad4a:	4603      	mov	r3, r0
 800ad4c:	4629      	mov	r1, r5
 800ad4e:	e9cd 2700 	strd	r2, r7, [sp]
 800ad52:	4620      	mov	r0, r4
 800ad54:	4632      	mov	r2, r6
 800ad56:	f001 fae1 	bl	800c31c <acc_confprogram_patch_offset>
 800ad5a:	f001 fc2f 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800ad5e:	2211      	movs	r2, #17
 800ad60:	4603      	mov	r3, r0
 800ad62:	4629      	mov	r1, r5
 800ad64:	e9cd 2800 	strd	r2, r8, [sp]
 800ad68:	4620      	mov	r0, r4
 800ad6a:	4632      	mov	r2, r6
 800ad6c:	f001 fad6 	bl	800c31c <acc_confprogram_patch_offset>
 800ad70:	f001 fc24 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800ad74:	2213      	movs	r2, #19
 800ad76:	2100      	movs	r1, #0
 800ad78:	e9cd 2100 	strd	r2, r1, [sp]
 800ad7c:	4603      	mov	r3, r0
 800ad7e:	4632      	mov	r2, r6
 800ad80:	4629      	mov	r1, r5
 800ad82:	4620      	mov	r0, r4
 800ad84:	f001 faca 	bl	800c31c <acc_confprogram_patch_offset>
 800ad88:	f001 fc18 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800ad8c:	2215      	movs	r2, #21
 800ad8e:	f64f 71c0 	movw	r1, #65472	; 0xffc0
 800ad92:	e9cd 2100 	strd	r2, r1, [sp]
 800ad96:	4603      	mov	r3, r0
 800ad98:	4632      	mov	r2, r6
 800ad9a:	4629      	mov	r1, r5
 800ad9c:	4620      	mov	r0, r4
 800ad9e:	f001 fabd 	bl	800c31c <acc_confprogram_patch_offset>
 800ada2:	f001 fc0b 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800ada6:	2216      	movs	r2, #22
 800ada8:	4603      	mov	r3, r0
 800adaa:	4629      	mov	r1, r5
 800adac:	e9cd 2700 	strd	r2, r7, [sp]
 800adb0:	4620      	mov	r0, r4
 800adb2:	4632      	mov	r2, r6
 800adb4:	f001 fab2 	bl	800c31c <acc_confprogram_patch_offset>
 800adb8:	f001 fc00 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800adbc:	220e      	movs	r2, #14
 800adbe:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 800adc2:	e9cd 2100 	strd	r2, r1, [sp]
 800adc6:	4603      	mov	r3, r0
 800adc8:	4632      	mov	r2, r6
 800adca:	4629      	mov	r1, r5
 800adcc:	4620      	mov	r0, r4
 800adce:	f001 faa5 	bl	800c31c <acc_confprogram_patch_offset>
 800add2:	f001 fbf3 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800add6:	220f      	movs	r2, #15
 800add8:	4603      	mov	r3, r0
 800adda:	4629      	mov	r1, r5
 800addc:	e9cd 2700 	strd	r2, r7, [sp]
 800ade0:	4620      	mov	r0, r4
 800ade2:	4632      	mov	r2, r6
 800ade4:	f001 fa9a 	bl	800c31c <acc_confprogram_patch_offset>
 800ade8:	f001 fbe8 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800adec:	2217      	movs	r2, #23
 800adee:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800adf2:	e9cd 2100 	strd	r2, r1, [sp]
 800adf6:	4603      	mov	r3, r0
 800adf8:	4632      	mov	r2, r6
 800adfa:	4629      	mov	r1, r5
 800adfc:	4620      	mov	r0, r4
 800adfe:	f001 fa8d 	bl	800c31c <acc_confprogram_patch_offset>
 800ae02:	f001 fbdb 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800ae06:	2218      	movs	r2, #24
 800ae08:	e9cd 2700 	strd	r2, r7, [sp]
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	4632      	mov	r2, r6
 800ae10:	4629      	mov	r1, r5
 800ae12:	4620      	mov	r0, r4
 800ae14:	f001 fa82 	bl	800c31c <acc_confprogram_patch_offset>
 800ae18:	e541      	b.n	800a89e <acc_cpd_linear_sweep_load_program+0x492>
 800ae1a:	f001 fbcf 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800ae1e:	2732      	movs	r7, #50	; 0x32
 800ae20:	f8db 20b8 	ldr.w	r2, [fp, #184]	; 0xb8
 800ae24:	9201      	str	r2, [sp, #4]
 800ae26:	4603      	mov	r3, r0
 800ae28:	4632      	mov	r2, r6
 800ae2a:	4629      	mov	r1, r5
 800ae2c:	4620      	mov	r0, r4
 800ae2e:	9700      	str	r7, [sp, #0]
 800ae30:	f001 fa74 	bl	800c31c <acc_confprogram_patch_offset>
 800ae34:	f7ff bb8c 	b.w	800a550 <acc_cpd_linear_sweep_load_program+0x144>
 800ae38:	f7fa fc7a 	bl	8005730 <acc_rss_integration_log_level>
 800ae3c:	2803      	cmp	r0, #3
 800ae3e:	f67f ab03 	bls.w	800a448 <acc_cpd_linear_sweep_load_program+0x3c>
 800ae42:	4b06      	ldr	r3, [pc, #24]	; (800ae5c <acc_cpd_linear_sweep_load_program+0xa50>)
 800ae44:	4a0c      	ldr	r2, [pc, #48]	; (800ae78 <acc_cpd_linear_sweep_load_program+0xa6c>)
 800ae46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae48:	4906      	ldr	r1, [pc, #24]	; (800ae64 <acc_cpd_linear_sweep_load_program+0xa58>)
 800ae4a:	2004      	movs	r0, #4
 800ae4c:	4798      	blx	r3
 800ae4e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ae50:	b00f      	add	sp, #60	; 0x3c
 800ae52:	ecbd 8b04 	vpop	{d8-d9}
 800ae56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae5a:	bf00      	nop
 800ae5c:	200004c0 	.word	0x200004c0
 800ae60:	0800ff3c 	.word	0x0800ff3c
 800ae64:	0800fe68 	.word	0x0800fe68
 800ae68:	0800feec 	.word	0x0800feec
 800ae6c:	0800ff14 	.word	0x0800ff14
 800ae70:	0800fe7c 	.word	0x0800fe7c
 800ae74:	0800feb4 	.word	0x0800feb4
 800ae78:	0800ff58 	.word	0x0800ff58

0800ae7c <acc_cpd_linear_sweep_run_program>:
 800ae7c:	f240 213b 	movw	r1, #571	; 0x23b
 800ae80:	f7fc baaa 	b.w	80073d8 <acc_sensor_protocol_r2_run_program>

0800ae84 <acc_cpd_linear_sweep_update_program>:
 800ae84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae88:	784b      	ldrb	r3, [r1, #1]
 800ae8a:	684f      	ldr	r7, [r1, #4]
 800ae8c:	68ce      	ldr	r6, [r1, #12]
 800ae8e:	b086      	sub	sp, #24
 800ae90:	460c      	mov	r4, r1
 800ae92:	4605      	mov	r5, r0
 800ae94:	b943      	cbnz	r3, 800aea8 <acc_cpd_linear_sweep_update_program+0x24>
 800ae96:	7823      	ldrb	r3, [r4, #0]
 800ae98:	b9eb      	cbnz	r3, 800aed6 <acc_cpd_linear_sweep_update_program+0x52>
 800ae9a:	78a3      	ldrb	r3, [r4, #2]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d12d      	bne.n	800aefc <acc_cpd_linear_sweep_update_program+0x78>
 800aea0:	2001      	movs	r0, #1
 800aea2:	b006      	add	sp, #24
 800aea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aea8:	f8d1 8008 	ldr.w	r8, [r1, #8]
 800aeac:	f001 fb82 	bl	800c5b4 <acc_image_a111_r2c_sweep_get>
 800aeb0:	9005      	str	r0, [sp, #20]
 800aeb2:	f001 fb83 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800aeb6:	f108 020e 	add.w	r2, r8, #14
 800aeba:	4603      	mov	r3, r0
 800aebc:	9201      	str	r2, [sp, #4]
 800aebe:	4819      	ldr	r0, [pc, #100]	; (800af24 <acc_cpd_linear_sweep_update_program+0xa0>)
 800aec0:	9002      	str	r0, [sp, #8]
 800aec2:	225e      	movs	r2, #94	; 0x5e
 800aec4:	9200      	str	r2, [sp, #0]
 800aec6:	9905      	ldr	r1, [sp, #20]
 800aec8:	2200      	movs	r2, #0
 800aeca:	4628      	mov	r0, r5
 800aecc:	f001 fa9a 	bl	800c404 <acc_confprogram_live_patch>
 800aed0:	7823      	ldrb	r3, [r4, #0]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d0e1      	beq.n	800ae9a <acc_cpd_linear_sweep_update_program+0x16>
 800aed6:	f001 fb6d 	bl	800c5b4 <acc_image_a111_r2c_sweep_get>
 800aeda:	9005      	str	r0, [sp, #20]
 800aedc:	f001 fb6e 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800aee0:	2236      	movs	r2, #54	; 0x36
 800aee2:	4603      	mov	r3, r0
 800aee4:	480f      	ldr	r0, [pc, #60]	; (800af24 <acc_cpd_linear_sweep_update_program+0xa0>)
 800aee6:	9002      	str	r0, [sp, #8]
 800aee8:	9200      	str	r2, [sp, #0]
 800aeea:	9905      	ldr	r1, [sp, #20]
 800aeec:	9701      	str	r7, [sp, #4]
 800aeee:	2200      	movs	r2, #0
 800aef0:	4628      	mov	r0, r5
 800aef2:	f001 fa87 	bl	800c404 <acc_confprogram_live_patch>
 800aef6:	78a3      	ldrb	r3, [r4, #2]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d0d1      	beq.n	800aea0 <acc_cpd_linear_sweep_update_program+0x1c>
 800aefc:	f001 fb5a 	bl	800c5b4 <acc_image_a111_r2c_sweep_get>
 800af00:	9005      	str	r0, [sp, #20]
 800af02:	f001 fb5b 	bl	800c5bc <acc_image_a111_r2c_sweep_param_table_get>
 800af06:	4c07      	ldr	r4, [pc, #28]	; (800af24 <acc_cpd_linear_sweep_update_program+0xa0>)
 800af08:	9905      	ldr	r1, [sp, #20]
 800af0a:	9601      	str	r6, [sp, #4]
 800af0c:	2272      	movs	r2, #114	; 0x72
 800af0e:	4603      	mov	r3, r0
 800af10:	9200      	str	r2, [sp, #0]
 800af12:	4628      	mov	r0, r5
 800af14:	9402      	str	r4, [sp, #8]
 800af16:	2200      	movs	r2, #0
 800af18:	f001 fa74 	bl	800c404 <acc_confprogram_live_patch>
 800af1c:	2001      	movs	r0, #1
 800af1e:	b006      	add	sp, #24
 800af20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af24:	08006cd5 	.word	0x08006cd5

0800af28 <acc_cpd_linear_sweep_get_info>:
 800af28:	f890 30ad 	ldrb.w	r3, [r0, #173]	; 0xad
 800af2c:	b16b      	cbz	r3, 800af4a <acc_cpd_linear_sweep_get_info+0x22>
 800af2e:	b410      	push	{r4}
 800af30:	2203      	movs	r2, #3
 800af32:	2401      	movs	r4, #1
 800af34:	2300      	movs	r3, #0
 800af36:	2002      	movs	r0, #2
 800af38:	e9c1 4003 	strd	r4, r0, [r1, #12]
 800af3c:	e9c1 3301 	strd	r3, r3, [r1, #4]
 800af40:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af44:	600a      	str	r2, [r1, #0]
 800af46:	614a      	str	r2, [r1, #20]
 800af48:	4770      	bx	lr
 800af4a:	e9c1 3300 	strd	r3, r3, [r1]
 800af4e:	e9c1 3302 	strd	r3, r3, [r1, #8]
 800af52:	e9c1 3304 	strd	r3, r3, [r1, #16]
 800af56:	4770      	bx	lr

0800af58 <acc_cpd_linear_sweep_check>:
 800af58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af5c:	461e      	mov	r6, r3
 800af5e:	2300      	movs	r3, #0
 800af60:	7033      	strb	r3, [r6, #0]
 800af62:	460c      	mov	r4, r1
 800af64:	f891 10ad 	ldrb.w	r1, [r1, #173]	; 0xad
 800af68:	b082      	sub	sp, #8
 800af6a:	b911      	cbnz	r1, 800af72 <acc_cpd_linear_sweep_check+0x1a>
 800af6c:	b002      	add	sp, #8
 800af6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af72:	6813      	ldr	r3, [r2, #0]
 800af74:	005b      	lsls	r3, r3, #1
 800af76:	f003 031f 	and.w	r3, r3, #31
 800af7a:	6013      	str	r3, [r2, #0]
 800af7c:	4607      	mov	r7, r0
 800af7e:	4615      	mov	r5, r2
 800af80:	f7fa fbd6 	bl	8005730 <acc_rss_integration_log_level>
 800af84:	2803      	cmp	r0, #3
 800af86:	d907      	bls.n	800af98 <acc_cpd_linear_sweep_check+0x40>
 800af88:	4a16      	ldr	r2, [pc, #88]	; (800afe4 <acc_cpd_linear_sweep_check+0x8c>)
 800af8a:	682b      	ldr	r3, [r5, #0]
 800af8c:	f8d2 8034 	ldr.w	r8, [r2, #52]	; 0x34
 800af90:	4915      	ldr	r1, [pc, #84]	; (800afe8 <acc_cpd_linear_sweep_check+0x90>)
 800af92:	4a16      	ldr	r2, [pc, #88]	; (800afec <acc_cpd_linear_sweep_check+0x94>)
 800af94:	2004      	movs	r0, #4
 800af96:	47c0      	blx	r8
 800af98:	f9b4 3026 	ldrsh.w	r3, [r4, #38]	; 0x26
 800af9c:	f9b4 2024 	ldrsh.w	r2, [r4, #36]	; 0x24
 800afa0:	8c21      	ldrh	r1, [r4, #32]
 800afa2:	4638      	mov	r0, r7
 800afa4:	f000 f952 	bl	800b24c <acc_cpd_sweep_check_voffset_vslope>
 800afa8:	b1b0      	cbz	r0, 800afd8 <acc_cpd_linear_sweep_check+0x80>
 800afaa:	6828      	ldr	r0, [r5, #0]
 800afac:	f000 f9b4 	bl	800b318 <acc_cpd_sweep_check_count_bad_sweeps>
 800afb0:	2802      	cmp	r0, #2
 800afb2:	4604      	mov	r4, r0
 800afb4:	d9da      	bls.n	800af6c <acc_cpd_linear_sweep_check+0x14>
 800afb6:	f7fa fbbb 	bl	8005730 <acc_rss_integration_log_level>
 800afba:	b140      	cbz	r0, 800afce <acc_cpd_linear_sweep_check+0x76>
 800afbc:	4b09      	ldr	r3, [pc, #36]	; (800afe4 <acc_cpd_linear_sweep_check+0x8c>)
 800afbe:	4a0c      	ldr	r2, [pc, #48]	; (800aff0 <acc_cpd_linear_sweep_check+0x98>)
 800afc0:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 800afc2:	4909      	ldr	r1, [pc, #36]	; (800afe8 <acc_cpd_linear_sweep_check+0x90>)
 800afc4:	2005      	movs	r0, #5
 800afc6:	9000      	str	r0, [sp, #0]
 800afc8:	4623      	mov	r3, r4
 800afca:	2001      	movs	r0, #1
 800afcc:	47a8      	blx	r5
 800afce:	2301      	movs	r3, #1
 800afd0:	7033      	strb	r3, [r6, #0]
 800afd2:	b002      	add	sp, #8
 800afd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afd8:	6828      	ldr	r0, [r5, #0]
 800afda:	f040 0001 	orr.w	r0, r0, #1
 800afde:	6028      	str	r0, [r5, #0]
 800afe0:	e7e4      	b.n	800afac <acc_cpd_linear_sweep_check+0x54>
 800afe2:	bf00      	nop
 800afe4:	200004c0 	.word	0x200004c0
 800afe8:	0800fe68 	.word	0x0800fe68
 800afec:	0800ff7c 	.word	0x0800ff7c
 800aff0:	0800ff94 	.word	0x0800ff94

0800aff4 <acc_cpd_rx_fine_dip_calibration>:
 800aff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aff8:	ed2d 8b02 	vpush	{d8}
 800affc:	f8d2 a000 	ldr.w	sl, [r2]
 800b000:	b087      	sub	sp, #28
 800b002:	4681      	mov	r9, r0
 800b004:	ad05      	add	r5, sp, #20
 800b006:	461e      	mov	r6, r3
 800b008:	4614      	mov	r4, r2
 800b00a:	468b      	mov	fp, r1
 800b00c:	460a      	mov	r2, r1
 800b00e:	9500      	str	r5, [sp, #0]
 800b010:	4650      	mov	r0, sl
 800b012:	2500      	movs	r5, #0
 800b014:	4649      	mov	r1, r9
 800b016:	ab04      	add	r3, sp, #16
 800b018:	e9cd 6503 	strd	r6, r5, [sp, #12]
 800b01c:	9505      	str	r5, [sp, #20]
 800b01e:	f7fc f977 	bl	8007310 <acc_sensor_protocol_r2_prepare_load>
 800b022:	2800      	cmp	r0, #0
 800b024:	f000 80af 	beq.w	800b186 <acc_cpd_rx_fine_dip_calibration+0x192>
 800b028:	9b05      	ldr	r3, [sp, #20]
 800b02a:	ee08 aa10 	vmov	s16, sl
 800b02e:	ee08 ba90 	vmov	s17, fp
 800b032:	46cb      	mov	fp, r9
 800b034:	f5c5 68d5 	rsb	r8, r5, #1704	; 0x6a8
 800b038:	f108 0806 	add.w	r8, r8, #6
 800b03c:	4598      	cmp	r8, r3
 800b03e:	bf28      	it	cs
 800b040:	4698      	movcs	r8, r3
 800b042:	9e04      	ldr	r6, [sp, #16]
 800b044:	f001 faae 	bl	800c5a4 <acc_image_a111_r2c_rx_fine_dip_calibration_get>
 800b048:	ea4f 0955 	mov.w	r9, r5, lsr #1
 800b04c:	ea4f 0258 	mov.w	r2, r8, lsr #1
 800b050:	4631      	mov	r1, r6
 800b052:	eb00 0089 	add.w	r0, r0, r9, lsl #2
 800b056:	f001 fa4f 	bl	800c4f8 <acc_confprogram_copy>
 800b05a:	f001 faa7 	bl	800c5ac <acc_image_a111_r2c_rx_fine_dip_calibration_param_table_get>
 800b05e:	6862      	ldr	r2, [r4, #4]
 800b060:	9201      	str	r2, [sp, #4]
 800b062:	b2af      	uxth	r7, r5
 800b064:	fa1f fa88 	uxth.w	sl, r8
 800b068:	221b      	movs	r2, #27
 800b06a:	4603      	mov	r3, r0
 800b06c:	4639      	mov	r1, r7
 800b06e:	9200      	str	r2, [sp, #0]
 800b070:	4630      	mov	r0, r6
 800b072:	4652      	mov	r2, sl
 800b074:	f001 f952 	bl	800c31c <acc_confprogram_patch_offset>
 800b078:	f001 fa98 	bl	800c5ac <acc_image_a111_r2c_rx_fine_dip_calibration_param_table_get>
 800b07c:	68a2      	ldr	r2, [r4, #8]
 800b07e:	9201      	str	r2, [sp, #4]
 800b080:	2219      	movs	r2, #25
 800b082:	4603      	mov	r3, r0
 800b084:	4639      	mov	r1, r7
 800b086:	9200      	str	r2, [sp, #0]
 800b088:	4630      	mov	r0, r6
 800b08a:	4652      	mov	r2, sl
 800b08c:	f001 f946 	bl	800c31c <acc_confprogram_patch_offset>
 800b090:	f001 fa8c 	bl	800c5ac <acc_image_a111_r2c_rx_fine_dip_calibration_param_table_get>
 800b094:	68e2      	ldr	r2, [r4, #12]
 800b096:	9201      	str	r2, [sp, #4]
 800b098:	f04f 0c1a 	mov.w	ip, #26
 800b09c:	4603      	mov	r3, r0
 800b09e:	4652      	mov	r2, sl
 800b0a0:	4639      	mov	r1, r7
 800b0a2:	f8cd c000 	str.w	ip, [sp]
 800b0a6:	4630      	mov	r0, r6
 800b0a8:	f001 f938 	bl	800c31c <acc_confprogram_patch_offset>
 800b0ac:	f001 fa7e 	bl	800c5ac <acc_image_a111_r2c_rx_fine_dip_calibration_param_table_get>
 800b0b0:	8a22      	ldrh	r2, [r4, #16]
 800b0b2:	9201      	str	r2, [sp, #4]
 800b0b4:	f04f 0c17 	mov.w	ip, #23
 800b0b8:	4603      	mov	r3, r0
 800b0ba:	4652      	mov	r2, sl
 800b0bc:	4639      	mov	r1, r7
 800b0be:	f8cd c000 	str.w	ip, [sp]
 800b0c2:	4630      	mov	r0, r6
 800b0c4:	f001 f92a 	bl	800c31c <acc_confprogram_patch_offset>
 800b0c8:	f001 fa70 	bl	800c5ac <acc_image_a111_r2c_rx_fine_dip_calibration_param_table_get>
 800b0cc:	69e2      	ldr	r2, [r4, #28]
 800b0ce:	9201      	str	r2, [sp, #4]
 800b0d0:	f04f 0c0d 	mov.w	ip, #13
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	4652      	mov	r2, sl
 800b0d8:	4639      	mov	r1, r7
 800b0da:	f8cd c000 	str.w	ip, [sp]
 800b0de:	4630      	mov	r0, r6
 800b0e0:	f001 f91c 	bl	800c31c <acc_confprogram_patch_offset>
 800b0e4:	f001 fa62 	bl	800c5ac <acc_image_a111_r2c_rx_fine_dip_calibration_param_table_get>
 800b0e8:	6a22      	ldr	r2, [r4, #32]
 800b0ea:	9201      	str	r2, [sp, #4]
 800b0ec:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	4652      	mov	r2, sl
 800b0f4:	4639      	mov	r1, r7
 800b0f6:	f8cd c000 	str.w	ip, [sp]
 800b0fa:	4630      	mov	r0, r6
 800b0fc:	f001 f90e 	bl	800c31c <acc_confprogram_patch_offset>
 800b100:	f001 fa54 	bl	800c5ac <acc_image_a111_r2c_rx_fine_dip_calibration_param_table_get>
 800b104:	69a2      	ldr	r2, [r4, #24]
 800b106:	9201      	str	r2, [sp, #4]
 800b108:	f04f 0c0f 	mov.w	ip, #15
 800b10c:	4603      	mov	r3, r0
 800b10e:	4652      	mov	r2, sl
 800b110:	4639      	mov	r1, r7
 800b112:	f8cd c000 	str.w	ip, [sp]
 800b116:	4630      	mov	r0, r6
 800b118:	f001 f900 	bl	800c31c <acc_confprogram_patch_offset>
 800b11c:	f001 fa46 	bl	800c5ac <acc_image_a111_r2c_rx_fine_dip_calibration_param_table_get>
 800b120:	6962      	ldr	r2, [r4, #20]
 800b122:	9201      	str	r2, [sp, #4]
 800b124:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
 800b128:	4603      	mov	r3, r0
 800b12a:	4652      	mov	r2, sl
 800b12c:	4639      	mov	r1, r7
 800b12e:	4630      	mov	r0, r6
 800b130:	f8cd c000 	str.w	ip, [sp]
 800b134:	f001 f8f2 	bl	800c31c <acc_confprogram_patch_offset>
 800b138:	4643      	mov	r3, r8
 800b13a:	465a      	mov	r2, fp
 800b13c:	6820      	ldr	r0, [r4, #0]
 800b13e:	fa1f f189 	uxth.w	r1, r9
 800b142:	f7fb fdf5 	bl	8006d30 <acc_sensor_r2_load_confmem>
 800b146:	9b05      	ldr	r3, [sp, #20]
 800b148:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800b14c:	441d      	add	r5, r3
 800b14e:	4295      	cmp	r5, r2
 800b150:	f67f af70 	bls.w	800b034 <acc_cpd_rx_fine_dip_calibration+0x40>
 800b154:	ee18 0a10 	vmov	r0, s16
 800b158:	2119      	movs	r1, #25
 800b15a:	f7fc f93d 	bl	80073d8 <acc_sensor_protocol_r2_run_program>
 800b15e:	ee18 aa10 	vmov	sl, s16
 800b162:	4606      	mov	r6, r0
 800b164:	b1d8      	cbz	r0, 800b19e <acc_cpd_rx_fine_dip_calibration+0x1aa>
 800b166:	ee18 0a10 	vmov	r0, s16
 800b16a:	2300      	movs	r3, #0
 800b16c:	2208      	movs	r2, #8
 800b16e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800b172:	f7fc fab5 	bl	80076e0 <acc_sensor_protocol_r2_wait_for_specific_event>
 800b176:	b9e8      	cbnz	r0, 800b1b4 <acc_cpd_rx_fine_dip_calibration+0x1c0>
 800b178:	2600      	movs	r6, #0
 800b17a:	4630      	mov	r0, r6
 800b17c:	b007      	add	sp, #28
 800b17e:	ecbd 8b02 	vpop	{d8}
 800b182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b186:	4b2a      	ldr	r3, [pc, #168]	; (800b230 <acc_cpd_rx_fine_dip_calibration+0x23c>)
 800b188:	4a2a      	ldr	r2, [pc, #168]	; (800b234 <acc_cpd_rx_fine_dip_calibration+0x240>)
 800b18a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b18c:	492a      	ldr	r1, [pc, #168]	; (800b238 <acc_cpd_rx_fine_dip_calibration+0x244>)
 800b18e:	4606      	mov	r6, r0
 800b190:	4798      	blx	r3
 800b192:	4630      	mov	r0, r6
 800b194:	b007      	add	sp, #28
 800b196:	ecbd 8b02 	vpop	{d8}
 800b19a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b19e:	4b24      	ldr	r3, [pc, #144]	; (800b230 <acc_cpd_rx_fine_dip_calibration+0x23c>)
 800b1a0:	4a26      	ldr	r2, [pc, #152]	; (800b23c <acc_cpd_rx_fine_dip_calibration+0x248>)
 800b1a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1a4:	4924      	ldr	r1, [pc, #144]	; (800b238 <acc_cpd_rx_fine_dip_calibration+0x244>)
 800b1a6:	4798      	blx	r3
 800b1a8:	4630      	mov	r0, r6
 800b1aa:	b007      	add	sp, #28
 800b1ac:	ecbd 8b02 	vpop	{d8}
 800b1b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1b4:	ee18 0a90 	vmov	r0, s17
 800b1b8:	2119      	movs	r1, #25
 800b1ba:	f7fb fdf1 	bl	8006da0 <acc_sensor_r2_buffer_processed_verify_size>
 800b1be:	4606      	mov	r6, r0
 800b1c0:	b928      	cbnz	r0, 800b1ce <acc_cpd_rx_fine_dip_calibration+0x1da>
 800b1c2:	4b1b      	ldr	r3, [pc, #108]	; (800b230 <acc_cpd_rx_fine_dip_calibration+0x23c>)
 800b1c4:	4a1e      	ldr	r2, [pc, #120]	; (800b240 <acc_cpd_rx_fine_dip_calibration+0x24c>)
 800b1c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1c8:	491b      	ldr	r1, [pc, #108]	; (800b238 <acc_cpd_rx_fine_dip_calibration+0x244>)
 800b1ca:	4798      	blx	r3
 800b1cc:	e7e1      	b.n	800b192 <acc_cpd_rx_fine_dip_calibration+0x19e>
 800b1ce:	4659      	mov	r1, fp
 800b1d0:	2319      	movs	r3, #25
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	ee18 0a10 	vmov	r0, s16
 800b1d8:	f7fb fdea 	bl	8006db0 <acc_sensor_r2_buffer_processed_read>
 800b1dc:	2319      	movs	r3, #25
 800b1de:	4604      	mov	r4, r0
 800b1e0:	4602      	mov	r2, r0
 800b1e2:	ee18 1a10 	vmov	r1, s16
 800b1e6:	200a      	movs	r0, #10
 800b1e8:	f7fc fdae 	bl	8007d48 <acc_probes_execute_uint16>
 800b1ec:	9b03      	ldr	r3, [sp, #12]
 800b1ee:	4620      	mov	r0, r4
 800b1f0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800b1f4:	6804      	ldr	r4, [r0, #0]
 800b1f6:	6841      	ldr	r1, [r0, #4]
 800b1f8:	6882      	ldr	r2, [r0, #8]
 800b1fa:	68c5      	ldr	r5, [r0, #12]
 800b1fc:	60dd      	str	r5, [r3, #12]
 800b1fe:	3010      	adds	r0, #16
 800b200:	42b0      	cmp	r0, r6
 800b202:	601c      	str	r4, [r3, #0]
 800b204:	6059      	str	r1, [r3, #4]
 800b206:	609a      	str	r2, [r3, #8]
 800b208:	f103 0310 	add.w	r3, r3, #16
 800b20c:	d1f2      	bne.n	800b1f4 <acc_cpd_rx_fine_dip_calibration+0x200>
 800b20e:	8802      	ldrh	r2, [r0, #0]
 800b210:	801a      	strh	r2, [r3, #0]
 800b212:	4650      	mov	r0, sl
 800b214:	f7fc f96c 	bl	80074f0 <acc_sensor_protocol_r2_ack_event>
 800b218:	4606      	mov	r6, r0
 800b21a:	2800      	cmp	r0, #0
 800b21c:	d0ac      	beq.n	800b178 <acc_cpd_rx_fine_dip_calibration+0x184>
 800b21e:	4909      	ldr	r1, [pc, #36]	; (800b244 <acc_cpd_rx_fine_dip_calibration+0x250>)
 800b220:	4809      	ldr	r0, [pc, #36]	; (800b248 <acc_cpd_rx_fine_dip_calibration+0x254>)
 800b222:	f001 f98f 	bl	800c544 <acc_diagnostic_log_array>
 800b226:	9803      	ldr	r0, [sp, #12]
 800b228:	2119      	movs	r1, #25
 800b22a:	f001 f99b 	bl	800c564 <acc_diagnostic_log_data_u16>
 800b22e:	e7b0      	b.n	800b192 <acc_cpd_rx_fine_dip_calibration+0x19e>
 800b230:	200004c0 	.word	0x200004c0
 800b234:	0800ffd0 	.word	0x0800ffd0
 800b238:	0800fff8 	.word	0x0800fff8
 800b23c:	08010014 	.word	0x08010014
 800b240:	0800f6a4 	.word	0x0800f6a4
 800b244:	0800f83c 	.word	0x0800f83c
 800b248:	08010048 	.word	0x08010048

0800b24c <acc_cpd_sweep_check_voffset_vslope>:
 800b24c:	8802      	ldrh	r2, [r0, #0]
 800b24e:	eddf 4a2e 	vldr	s9, [pc, #184]	; 800b308 <acc_cpd_sweep_check_voffset_vslope+0xbc>
 800b252:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800b30c <acc_cpd_sweep_check_voffset_vslope+0xc0>
 800b256:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 800b310 <acc_cpd_sweep_check_voffset_vslope+0xc4>
 800b25a:	ee07 2a90 	vmov	s15, r2
 800b25e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b262:	b410      	push	{r4}
 800b264:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800b268:	4c2a      	ldr	r4, [pc, #168]	; (800b314 <acc_cpd_sweep_check_voffset_vslope+0xc8>)
 800b26a:	8842      	ldrh	r2, [r0, #2]
 800b26c:	f934 1011 	ldrsh.w	r1, [r4, r1, lsl #1]
 800b270:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 800b274:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800b278:	ee07 1a10 	vmov	s14, r1
 800b27c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800b280:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b284:	ee67 7a86 	vmul.f32	s15, s15, s12
 800b288:	b083      	sub	sp, #12
 800b28a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b28e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b292:	edcd 7a01 	vstr	s15, [sp, #4]
 800b296:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 800b29a:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 800b29e:	f2a0 24ee 	subw	r4, r0, #750	; 0x2ee
 800b2a2:	f5b4 7f06 	cmp.w	r4, #536	; 0x218
 800b2a6:	d224      	bcs.n	800b2f2 <acc_cpd_sweep_check_voffset_vslope+0xa6>
 800b2a8:	f5a0 7043 	sub.w	r0, r0, #780	; 0x30c
 800b2ac:	f5b0 7fe6 	cmp.w	r0, #460	; 0x1cc
 800b2b0:	d924      	bls.n	800b2fc <acc_cpd_sweep_check_voffset_vslope+0xb0>
 800b2b2:	ee07 2a90 	vmov	s15, r2
 800b2b6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b2ba:	ee07 1a90 	vmov	s15, r1
 800b2be:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800b2c2:	ee67 7a24 	vmul.f32	s15, s14, s9
 800b2c6:	3364      	adds	r3, #100	; 0x64
 800b2c8:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800b2cc:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800b2d0:	ee67 7a86 	vmul.f32	s15, s15, s12
 800b2d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b2dc:	ee17 2a90 	vmov	r2, s15
 800b2e0:	b210      	sxth	r0, r2
 800b2e2:	4298      	cmp	r0, r3
 800b2e4:	bfcc      	ite	gt
 800b2e6:	2000      	movgt	r0, #0
 800b2e8:	2001      	movle	r0, #1
 800b2ea:	b003      	add	sp, #12
 800b2ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b2f0:	4770      	bx	lr
 800b2f2:	2000      	movs	r0, #0
 800b2f4:	b003      	add	sp, #12
 800b2f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b2fa:	4770      	bx	lr
 800b2fc:	2001      	movs	r0, #1
 800b2fe:	b003      	add	sp, #12
 800b300:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b304:	4770      	bx	lr
 800b306:	bf00      	nop
 800b308:	37800000 	.word	0x37800000
 800b30c:	3f99999a 	.word	0x3f99999a
 800b310:	447a0000 	.word	0x447a0000
 800b314:	080138a4 	.word	0x080138a4

0800b318 <acc_cpd_sweep_check_count_bad_sweeps>:
 800b318:	b138      	cbz	r0, 800b32a <acc_cpd_sweep_check_count_bad_sweeps+0x12>
 800b31a:	2200      	movs	r2, #0
 800b31c:	1e43      	subs	r3, r0, #1
 800b31e:	4018      	ands	r0, r3
 800b320:	f102 0201 	add.w	r2, r2, #1
 800b324:	d1fa      	bne.n	800b31c <acc_cpd_sweep_check_count_bad_sweeps+0x4>
 800b326:	4610      	mov	r0, r2
 800b328:	4770      	bx	lr
 800b32a:	4602      	mov	r2, r0
 800b32c:	4610      	mov	r0, r2
 800b32e:	4770      	bx	lr

0800b330 <acc_radar_engine_check_asic_id>:
 800b330:	6800      	ldr	r0, [r0, #0]
 800b332:	2100      	movs	r1, #0
 800b334:	f7fc bac6 	b.w	80078c4 <acc_sensor_protocol_r2_check_asic_id>

0800b338 <acc_radar_engine_wait_for_radar_data>:
 800b338:	6800      	ldr	r0, [r0, #0]
 800b33a:	f7fc ba31 	b.w	80077a0 <acc_sensor_protocol_r2_wait_for_radar_data>
 800b33e:	bf00      	nop

0800b340 <acc_radar_engine_measure>:
 800b340:	6800      	ldr	r0, [r0, #0]
 800b342:	f7fc b8d5 	b.w	80074f0 <acc_sensor_protocol_r2_ack_event>
 800b346:	bf00      	nop

0800b348 <acc_radar_engine_wait_for_hibernate_ready>:
 800b348:	6800      	ldr	r0, [r0, #0]
 800b34a:	f7fc b9f3 	b.w	8007734 <acc_sensor_protocol_r2_wait_for_hibernate_ready>
 800b34e:	bf00      	nop

0800b350 <acc_radar_engine_acquire_adc_data>:
 800b350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b354:	ed2d 8b02 	vpush	{d8}
 800b358:	2600      	movs	r6, #0
 800b35a:	6016      	str	r6, [r2, #0]
 800b35c:	f8b0 a00c 	ldrh.w	sl, [r0, #12]
 800b360:	ed9f 8a45 	vldr	s16, [pc, #276]	; 800b478 <acc_radar_engine_acquire_adc_data+0x128>
 800b364:	7bc3      	ldrb	r3, [r0, #15]
 800b366:	f890 800e 	ldrb.w	r8, [r0, #14]
 800b36a:	f8d0 b010 	ldr.w	fp, [r0, #16]
 800b36e:	7316      	strb	r6, [r2, #12]
 800b370:	b089      	sub	sp, #36	; 0x24
 800b372:	460f      	mov	r7, r1
 800b374:	7116      	strb	r6, [r2, #4]
 800b376:	f88d 600e 	strb.w	r6, [sp, #14]
 800b37a:	f88d 600f 	strb.w	r6, [sp, #15]
 800b37e:	9301      	str	r3, [sp, #4]
 800b380:	ed82 8a02 	vstr	s16, [r2, #8]
 800b384:	f1ba 0f00 	cmp.w	sl, #0
 800b388:	d05b      	beq.n	800b442 <acc_radar_engine_acquire_adc_data+0xf2>
 800b38a:	4647      	mov	r7, r8
 800b38c:	4614      	mov	r4, r2
 800b38e:	4605      	mov	r5, r0
 800b390:	4688      	mov	r8, r1
 800b392:	b927      	cbnz	r7, 800b39e <acc_radar_engine_acquire_adc_data+0x4e>
 800b394:	6828      	ldr	r0, [r5, #0]
 800b396:	f7fc f8ab 	bl	80074f0 <acc_sensor_protocol_r2_ack_event>
 800b39a:	2800      	cmp	r0, #0
 800b39c:	d05e      	beq.n	800b45c <acc_radar_engine_acquire_adc_data+0x10c>
 800b39e:	6828      	ldr	r0, [r5, #0]
 800b3a0:	f10d 020e 	add.w	r2, sp, #14
 800b3a4:	4659      	mov	r1, fp
 800b3a6:	f7fc f9fb 	bl	80077a0 <acc_sensor_protocol_r2_wait_for_radar_data>
 800b3aa:	2800      	cmp	r0, #0
 800b3ac:	d056      	beq.n	800b45c <acc_radar_engine_acquire_adc_data+0x10c>
 800b3ae:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800b3b2:	b903      	cbnz	r3, 800b3b6 <acc_radar_engine_acquire_adc_data+0x66>
 800b3b4:	78a3      	ldrb	r3, [r4, #2]
 800b3b6:	69aa      	ldr	r2, [r5, #24]
 800b3b8:	70a3      	strb	r3, [r4, #2]
 800b3ba:	4641      	mov	r1, r8
 800b3bc:	6953      	ldr	r3, [r2, #20]
 800b3be:	4628      	mov	r0, r5
 800b3c0:	f10d 020f 	add.w	r2, sp, #15
 800b3c4:	4798      	blx	r3
 800b3c6:	69aa      	ldr	r2, [r5, #24]
 800b3c8:	9004      	str	r0, [sp, #16]
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	f8d2 9018 	ldr.w	r9, [r2, #24]
 800b3d0:	f88d 3014 	strb.w	r3, [sp, #20]
 800b3d4:	f88d 301c 	strb.w	r3, [sp, #28]
 800b3d8:	ed8d 8a06 	vstr	s16, [sp, #24]
 800b3dc:	ab05      	add	r3, sp, #20
 800b3de:	aa04      	add	r2, sp, #16
 800b3e0:	4641      	mov	r1, r8
 800b3e2:	4628      	mov	r0, r5
 800b3e4:	47c8      	blx	r9
 800b3e6:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800b3ea:	b903      	cbnz	r3, 800b3ee <acc_radar_engine_acquire_adc_data+0x9e>
 800b3ec:	7b23      	ldrb	r3, [r4, #12]
 800b3ee:	f89d 9014 	ldrb.w	r9, [sp, #20]
 800b3f2:	7323      	strb	r3, [r4, #12]
 800b3f4:	f1b9 0f00 	cmp.w	r9, #0
 800b3f8:	d129      	bne.n	800b44e <acc_radar_engine_acquire_adc_data+0xfe>
 800b3fa:	7923      	ldrb	r3, [r4, #4]
 800b3fc:	edd4 0a02 	vldr	s1, [r4, #8]
 800b400:	ed9d 0a06 	vldr	s0, [sp, #24]
 800b404:	7123      	strb	r3, [r4, #4]
 800b406:	f002 fcb1 	bl	800dd6c <fmaxf>
 800b40a:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800b40e:	ed84 0a02 	vstr	s0, [r4, #8]
 800b412:	b902      	cbnz	r2, 800b416 <acc_radar_engine_acquire_adc_data+0xc6>
 800b414:	78e2      	ldrb	r2, [r4, #3]
 800b416:	8821      	ldrh	r1, [r4, #0]
 800b418:	9b04      	ldr	r3, [sp, #16]
 800b41a:	70e2      	strb	r2, [r4, #3]
 800b41c:	69aa      	ldr	r2, [r5, #24]
 800b41e:	440b      	add	r3, r1
 800b420:	8023      	strh	r3, [r4, #0]
 800b422:	4649      	mov	r1, r9
 800b424:	69d3      	ldr	r3, [r2, #28]
 800b426:	4628      	mov	r0, r5
 800b428:	4798      	blx	r3
 800b42a:	9b01      	ldr	r3, [sp, #4]
 800b42c:	b11b      	cbz	r3, 800b436 <acc_radar_engine_acquire_adc_data+0xe6>
 800b42e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800b432:	42b3      	cmp	r3, r6
 800b434:	d018      	beq.n	800b468 <acc_radar_engine_acquire_adc_data+0x118>
 800b436:	b967      	cbnz	r7, 800b452 <acc_radar_engine_acquire_adc_data+0x102>
 800b438:	3601      	adds	r6, #1
 800b43a:	b2b3      	uxth	r3, r6
 800b43c:	4553      	cmp	r3, sl
 800b43e:	d3a8      	bcc.n	800b392 <acc_radar_engine_acquire_adc_data+0x42>
 800b440:	4647      	mov	r7, r8
 800b442:	6838      	ldr	r0, [r7, #0]
 800b444:	b009      	add	sp, #36	; 0x24
 800b446:	ecbd 8b02 	vpop	{d8}
 800b44a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b44e:	464b      	mov	r3, r9
 800b450:	e7d4      	b.n	800b3fc <acc_radar_engine_acquire_adc_data+0xac>
 800b452:	6828      	ldr	r0, [r5, #0]
 800b454:	f7fc f84c 	bl	80074f0 <acc_sensor_protocol_r2_ack_event>
 800b458:	2800      	cmp	r0, #0
 800b45a:	d1ed      	bne.n	800b438 <acc_radar_engine_acquire_adc_data+0xe8>
 800b45c:	2000      	movs	r0, #0
 800b45e:	b009      	add	sp, #36	; 0x24
 800b460:	ecbd 8b02 	vpop	{d8}
 800b464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b468:	f8d8 0000 	ldr.w	r0, [r8]
 800b46c:	b009      	add	sp, #36	; 0x24
 800b46e:	ecbd 8b02 	vpop	{d8}
 800b472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b476:	bf00      	nop
 800b478:	ff800000 	.word	0xff800000

0800b47c <acc_sensor_diagnostics_r2_sensor_status>:
 800b47c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b480:	b094      	sub	sp, #80	; 0x50
 800b482:	4604      	mov	r4, r0
 800b484:	f7fa f954 	bl	8005730 <acc_rss_integration_log_level>
 800b488:	2801      	cmp	r0, #1
 800b48a:	d905      	bls.n	800b498 <acc_sensor_diagnostics_r2_sensor_status+0x1c>
 800b48c:	4b9c      	ldr	r3, [pc, #624]	; (800b700 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800b48e:	4a9d      	ldr	r2, [pc, #628]	; (800b704 <acc_sensor_diagnostics_r2_sensor_status+0x288>)
 800b490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b492:	499d      	ldr	r1, [pc, #628]	; (800b708 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800b494:	2002      	movs	r0, #2
 800b496:	4798      	blx	r3
 800b498:	2201      	movs	r2, #1
 800b49a:	21b2      	movs	r1, #178	; 0xb2
 800b49c:	4620      	mov	r0, r4
 800b49e:	f7fc fcaf 	bl	8007e00 <acc_sensor_reg_write>
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	f8df a258 	ldr.w	sl, [pc, #600]	; 800b700 <acc_sensor_diagnostics_r2_sensor_status+0x284>
 800b4a8:	f8df 9288 	ldr.w	r9, [pc, #648]	; 800b734 <acc_sensor_diagnostics_r2_sensor_status+0x2b8>
 800b4ac:	4f96      	ldr	r7, [pc, #600]	; (800b708 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800b4ae:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 800b4b2:	2564      	movs	r5, #100	; 0x64
 800b4b4:	e013      	b.n	800b4de <acc_sensor_diagnostics_r2_sensor_status+0x62>
 800b4b6:	f7fa f93b 	bl	8005730 <acc_rss_integration_log_level>
 800b4ba:	2801      	cmp	r0, #1
 800b4bc:	4623      	mov	r3, r4
 800b4be:	464a      	mov	r2, r9
 800b4c0:	4639      	mov	r1, r7
 800b4c2:	f04f 0002 	mov.w	r0, #2
 800b4c6:	d907      	bls.n	800b4d8 <acc_sensor_diagnostics_r2_sensor_status+0x5c>
 800b4c8:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
 800b4cc:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800b4d0:	9600      	str	r6, [sp, #0]
 800b4d2:	f8da 6034 	ldr.w	r6, [sl, #52]	; 0x34
 800b4d6:	47b0      	blx	r6
 800b4d8:	3d01      	subs	r5, #1
 800b4da:	b2ad      	uxth	r5, r5
 800b4dc:	b1c5      	cbz	r5, 800b510 <acc_sensor_diagnostics_r2_sensor_status+0x94>
 800b4de:	aa0c      	add	r2, sp, #48	; 0x30
 800b4e0:	2111      	movs	r1, #17
 800b4e2:	4620      	mov	r0, r4
 800b4e4:	f7fc fc76 	bl	8007dd4 <acc_sensor_reg_read>
 800b4e8:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800b4ec:	055b      	lsls	r3, r3, #21
 800b4ee:	d4e2      	bmi.n	800b4b6 <acc_sensor_diagnostics_r2_sensor_status+0x3a>
 800b4f0:	f7fa f91e 	bl	8005730 <acc_rss_integration_log_level>
 800b4f4:	2801      	cmp	r0, #1
 800b4f6:	d90b      	bls.n	800b510 <acc_sensor_diagnostics_r2_sensor_status+0x94>
 800b4f8:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800b4fc:	4980      	ldr	r1, [pc, #512]	; (800b700 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800b4fe:	4a83      	ldr	r2, [pc, #524]	; (800b70c <acc_sensor_diagnostics_r2_sensor_status+0x290>)
 800b500:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800b502:	4981      	ldr	r1, [pc, #516]	; (800b708 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800b504:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b508:	9300      	str	r3, [sp, #0]
 800b50a:	2002      	movs	r0, #2
 800b50c:	4623      	mov	r3, r4
 800b50e:	47a8      	blx	r5
 800b510:	2600      	movs	r6, #0
 800b512:	4631      	mov	r1, r6
 800b514:	aa09      	add	r2, sp, #36	; 0x24
 800b516:	4620      	mov	r0, r4
 800b518:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 800b51c:	4d7c      	ldr	r5, [pc, #496]	; (800b710 <acc_sensor_diagnostics_r2_sensor_status+0x294>)
 800b51e:	f7fc fc59 	bl	8007dd4 <acc_sensor_reg_read>
 800b522:	f10d 0226 	add.w	r2, sp, #38	; 0x26
 800b526:	212a      	movs	r1, #42	; 0x2a
 800b528:	4620      	mov	r0, r4
 800b52a:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 800b52e:	f7fc fc51 	bl	8007dd4 <acc_sensor_reg_read>
 800b532:	2128      	movs	r1, #40	; 0x28
 800b534:	aa0a      	add	r2, sp, #40	; 0x28
 800b536:	4620      	mov	r0, r4
 800b538:	f8ad 6028 	strh.w	r6, [sp, #40]	; 0x28
 800b53c:	f105 071e 	add.w	r7, r5, #30
 800b540:	f7fc fc48 	bl	8007dd4 <acc_sensor_reg_read>
 800b544:	ae0c      	add	r6, sp, #48	; 0x30
 800b546:	2163      	movs	r1, #99	; 0x63
 800b548:	e001      	b.n	800b54e <acc_sensor_diagnostics_r2_sensor_status+0xd2>
 800b54a:	f835 1f02 	ldrh.w	r1, [r5, #2]!
 800b54e:	4632      	mov	r2, r6
 800b550:	4620      	mov	r0, r4
 800b552:	f7fc fc3f 	bl	8007dd4 <acc_sensor_reg_read>
 800b556:	42af      	cmp	r7, r5
 800b558:	f106 0602 	add.w	r6, r6, #2
 800b55c:	d1f5      	bne.n	800b54a <acc_sensor_diagnostics_r2_sensor_status+0xce>
 800b55e:	f7fa f8e7 	bl	8005730 <acc_rss_integration_log_level>
 800b562:	2801      	cmp	r0, #1
 800b564:	d91e      	bls.n	800b5a4 <acc_sensor_diagnostics_r2_sensor_status+0x128>
 800b566:	4d66      	ldr	r5, [pc, #408]	; (800b700 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800b568:	f8bd 103e 	ldrh.w	r1, [sp, #62]	; 0x3e
 800b56c:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 800b570:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 800b572:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 800b576:	f8bd 0036 	ldrh.w	r0, [sp, #54]	; 0x36
 800b57a:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 800b57e:	9107      	str	r1, [sp, #28]
 800b580:	9206      	str	r2, [sp, #24]
 800b582:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 800b586:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 800b58a:	9305      	str	r3, [sp, #20]
 800b58c:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800b590:	9300      	str	r3, [sp, #0]
 800b592:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800b596:	e9cd 0603 	strd	r0, r6, [sp, #12]
 800b59a:	4a5e      	ldr	r2, [pc, #376]	; (800b714 <acc_sensor_diagnostics_r2_sensor_status+0x298>)
 800b59c:	495a      	ldr	r1, [pc, #360]	; (800b708 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800b59e:	4623      	mov	r3, r4
 800b5a0:	2002      	movs	r0, #2
 800b5a2:	47a8      	blx	r5
 800b5a4:	f7fa f8c4 	bl	8005730 <acc_rss_integration_log_level>
 800b5a8:	2801      	cmp	r0, #1
 800b5aa:	d91e      	bls.n	800b5ea <acc_sensor_diagnostics_r2_sensor_status+0x16e>
 800b5ac:	4d54      	ldr	r5, [pc, #336]	; (800b700 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800b5ae:	f8bd 104e 	ldrh.w	r1, [sp, #78]	; 0x4e
 800b5b2:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 800b5b6:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 800b5b8:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
 800b5bc:	f8bd 0046 	ldrh.w	r0, [sp, #70]	; 0x46
 800b5c0:	f8bd 6048 	ldrh.w	r6, [sp, #72]	; 0x48
 800b5c4:	9107      	str	r1, [sp, #28]
 800b5c6:	9206      	str	r2, [sp, #24]
 800b5c8:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
 800b5cc:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 800b5d0:	9305      	str	r3, [sp, #20]
 800b5d2:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800b5d6:	9300      	str	r3, [sp, #0]
 800b5d8:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800b5dc:	e9cd 0603 	strd	r0, r6, [sp, #12]
 800b5e0:	4a4d      	ldr	r2, [pc, #308]	; (800b718 <acc_sensor_diagnostics_r2_sensor_status+0x29c>)
 800b5e2:	4949      	ldr	r1, [pc, #292]	; (800b708 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800b5e4:	4623      	mov	r3, r4
 800b5e6:	2002      	movs	r0, #2
 800b5e8:	47a8      	blx	r5
 800b5ea:	aa0c      	add	r2, sp, #48	; 0x30
 800b5ec:	2168      	movs	r1, #104	; 0x68
 800b5ee:	4620      	mov	r0, r4
 800b5f0:	f7fc fbf0 	bl	8007dd4 <acc_sensor_reg_read>
 800b5f4:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 800b5f8:	2167      	movs	r1, #103	; 0x67
 800b5fa:	4620      	mov	r0, r4
 800b5fc:	f7fc fbea 	bl	8007dd4 <acc_sensor_reg_read>
 800b600:	aa0d      	add	r2, sp, #52	; 0x34
 800b602:	2166      	movs	r1, #102	; 0x66
 800b604:	4620      	mov	r0, r4
 800b606:	f7fc fbe5 	bl	8007dd4 <acc_sensor_reg_read>
 800b60a:	f10d 0236 	add.w	r2, sp, #54	; 0x36
 800b60e:	2165      	movs	r1, #101	; 0x65
 800b610:	4620      	mov	r0, r4
 800b612:	f7fc fbdf 	bl	8007dd4 <acc_sensor_reg_read>
 800b616:	f7fa f88b 	bl	8005730 <acc_rss_integration_log_level>
 800b61a:	2801      	cmp	r0, #1
 800b61c:	d912      	bls.n	800b644 <acc_sensor_diagnostics_r2_sensor_status+0x1c8>
 800b61e:	f8bd 0036 	ldrh.w	r0, [sp, #54]	; 0x36
 800b622:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 800b626:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 800b62a:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800b62e:	4d34      	ldr	r5, [pc, #208]	; (800b700 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800b630:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 800b632:	e9cd 1002 	strd	r1, r0, [sp, #8]
 800b636:	e9cd 3200 	strd	r3, r2, [sp]
 800b63a:	4933      	ldr	r1, [pc, #204]	; (800b708 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800b63c:	4a37      	ldr	r2, [pc, #220]	; (800b71c <acc_sensor_diagnostics_r2_sensor_status+0x2a0>)
 800b63e:	4623      	mov	r3, r4
 800b640:	2002      	movs	r0, #2
 800b642:	47a8      	blx	r5
 800b644:	2500      	movs	r5, #0
 800b646:	f10d 022a 	add.w	r2, sp, #42	; 0x2a
 800b64a:	2153      	movs	r1, #83	; 0x53
 800b64c:	4620      	mov	r0, r4
 800b64e:	f8ad 502a 	strh.w	r5, [sp, #42]	; 0x2a
 800b652:	f7fc fbbf 	bl	8007dd4 <acc_sensor_reg_read>
 800b656:	aa0c      	add	r2, sp, #48	; 0x30
 800b658:	2140      	movs	r1, #64	; 0x40
 800b65a:	4620      	mov	r0, r4
 800b65c:	f8ad 5030 	strh.w	r5, [sp, #48]	; 0x30
 800b660:	f7fc fbb8 	bl	8007dd4 <acc_sensor_reg_read>
 800b664:	f7fa f864 	bl	8005730 <acc_rss_integration_log_level>
 800b668:	2801      	cmp	r0, #1
 800b66a:	d909      	bls.n	800b680 <acc_sensor_diagnostics_r2_sensor_status+0x204>
 800b66c:	4a24      	ldr	r2, [pc, #144]	; (800b700 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800b66e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800b672:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800b674:	4924      	ldr	r1, [pc, #144]	; (800b708 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800b676:	9300      	str	r3, [sp, #0]
 800b678:	4a29      	ldr	r2, [pc, #164]	; (800b720 <acc_sensor_diagnostics_r2_sensor_status+0x2a4>)
 800b67a:	4623      	mov	r3, r4
 800b67c:	2002      	movs	r0, #2
 800b67e:	47a8      	blx	r5
 800b680:	f7fa f856 	bl	8005730 <acc_rss_integration_log_level>
 800b684:	2801      	cmp	r0, #1
 800b686:	d90e      	bls.n	800b6a6 <acc_sensor_diagnostics_r2_sensor_status+0x22a>
 800b688:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800b68c:	491c      	ldr	r1, [pc, #112]	; (800b700 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800b68e:	4a25      	ldr	r2, [pc, #148]	; (800b724 <acc_sensor_diagnostics_r2_sensor_status+0x2a8>)
 800b690:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800b692:	491d      	ldr	r1, [pc, #116]	; (800b708 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800b694:	f003 0040 	and.w	r0, r3, #64	; 0x40
 800b698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b69c:	e9cd 3000 	strd	r3, r0, [sp]
 800b6a0:	4623      	mov	r3, r4
 800b6a2:	2002      	movs	r0, #2
 800b6a4:	47a8      	blx	r5
 800b6a6:	f7fa f843 	bl	8005730 <acc_rss_integration_log_level>
 800b6aa:	2801      	cmp	r0, #1
 800b6ac:	d90e      	bls.n	800b6cc <acc_sensor_diagnostics_r2_sensor_status+0x250>
 800b6ae:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800b6b2:	4913      	ldr	r1, [pc, #76]	; (800b700 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800b6b4:	4a1c      	ldr	r2, [pc, #112]	; (800b728 <acc_sensor_diagnostics_r2_sensor_status+0x2ac>)
 800b6b6:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800b6b8:	4913      	ldr	r1, [pc, #76]	; (800b708 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800b6ba:	f003 0010 	and.w	r0, r3, #16
 800b6be:	f003 0320 	and.w	r3, r3, #32
 800b6c2:	e9cd 3000 	strd	r3, r0, [sp]
 800b6c6:	4623      	mov	r3, r4
 800b6c8:	2002      	movs	r0, #2
 800b6ca:	47a8      	blx	r5
 800b6cc:	f7fa f830 	bl	8005730 <acc_rss_integration_log_level>
 800b6d0:	2801      	cmp	r0, #1
 800b6d2:	d90e      	bls.n	800b6f2 <acc_sensor_diagnostics_r2_sensor_status+0x276>
 800b6d4:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800b6d8:	4909      	ldr	r1, [pc, #36]	; (800b700 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800b6da:	4a14      	ldr	r2, [pc, #80]	; (800b72c <acc_sensor_diagnostics_r2_sensor_status+0x2b0>)
 800b6dc:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800b6de:	490a      	ldr	r1, [pc, #40]	; (800b708 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800b6e0:	f003 0004 	and.w	r0, r3, #4
 800b6e4:	f003 0308 	and.w	r3, r3, #8
 800b6e8:	e9cd 3000 	strd	r3, r0, [sp]
 800b6ec:	4623      	mov	r3, r4
 800b6ee:	2002      	movs	r0, #2
 800b6f0:	47a8      	blx	r5
 800b6f2:	4d0f      	ldr	r5, [pc, #60]	; (800b730 <acc_sensor_diagnostics_r2_sensor_status+0x2b4>)
 800b6f4:	ae0c      	add	r6, sp, #48	; 0x30
 800b6f6:	f105 071e 	add.w	r7, r5, #30
 800b6fa:	21f0      	movs	r1, #240	; 0xf0
 800b6fc:	e01e      	b.n	800b73c <acc_sensor_diagnostics_r2_sensor_status+0x2c0>
 800b6fe:	bf00      	nop
 800b700:	200004c0 	.word	0x200004c0
 800b704:	08010058 	.word	0x08010058
 800b708:	08010098 	.word	0x08010098
 800b70c:	080100d0 	.word	0x080100d0
 800b710:	080103e0 	.word	0x080103e0
 800b714:	080100f0 	.word	0x080100f0
 800b718:	08010138 	.word	0x08010138
 800b71c:	08010184 	.word	0x08010184
 800b720:	080101b8 	.word	0x080101b8
 800b724:	080101d8 	.word	0x080101d8
 800b728:	08010204 	.word	0x08010204
 800b72c:	08010238 	.word	0x08010238
 800b730:	08010400 	.word	0x08010400
 800b734:	080100b0 	.word	0x080100b0
 800b738:	f835 1f02 	ldrh.w	r1, [r5, #2]!
 800b73c:	4632      	mov	r2, r6
 800b73e:	4620      	mov	r0, r4
 800b740:	f7fc fb48 	bl	8007dd4 <acc_sensor_reg_read>
 800b744:	42bd      	cmp	r5, r7
 800b746:	f106 0602 	add.w	r6, r6, #2
 800b74a:	d1f5      	bne.n	800b738 <acc_sensor_diagnostics_r2_sensor_status+0x2bc>
 800b74c:	f7f9 fff0 	bl	8005730 <acc_rss_integration_log_level>
 800b750:	2801      	cmp	r0, #1
 800b752:	f240 80b6 	bls.w	800b8c2 <acc_sensor_diagnostics_r2_sensor_status+0x446>
 800b756:	4a5c      	ldr	r2, [pc, #368]	; (800b8c8 <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 800b758:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800b75c:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800b75e:	495b      	ldr	r1, [pc, #364]	; (800b8cc <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 800b760:	9300      	str	r3, [sp, #0]
 800b762:	4a5b      	ldr	r2, [pc, #364]	; (800b8d0 <acc_sensor_diagnostics_r2_sensor_status+0x454>)
 800b764:	4623      	mov	r3, r4
 800b766:	2002      	movs	r0, #2
 800b768:	47a8      	blx	r5
 800b76a:	2501      	movs	r5, #1
 800b76c:	f7f9 ffe0 	bl	8005730 <acc_rss_integration_log_level>
 800b770:	2801      	cmp	r0, #1
 800b772:	d90e      	bls.n	800b792 <acc_sensor_diagnostics_r2_sensor_status+0x316>
 800b774:	ab14      	add	r3, sp, #80	; 0x50
 800b776:	eb03 0245 	add.w	r2, r3, r5, lsl #1
 800b77a:	4b53      	ldr	r3, [pc, #332]	; (800b8c8 <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 800b77c:	f832 2c20 	ldrh.w	r2, [r2, #-32]
 800b780:	9200      	str	r2, [sp, #0]
 800b782:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800b784:	4a53      	ldr	r2, [pc, #332]	; (800b8d4 <acc_sensor_diagnostics_r2_sensor_status+0x458>)
 800b786:	4951      	ldr	r1, [pc, #324]	; (800b8cc <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 800b788:	3501      	adds	r5, #1
 800b78a:	4623      	mov	r3, r4
 800b78c:	2002      	movs	r0, #2
 800b78e:	b2ed      	uxtb	r5, r5
 800b790:	47b0      	blx	r6
 800b792:	f8df a134 	ldr.w	sl, [pc, #308]	; 800b8c8 <acc_sensor_diagnostics_r2_sensor_status+0x44c>
 800b796:	f8df 9158 	ldr.w	r9, [pc, #344]	; 800b8f0 <acc_sensor_diagnostics_r2_sensor_status+0x474>
 800b79a:	f8df 8130 	ldr.w	r8, [pc, #304]	; 800b8cc <acc_sensor_diagnostics_r2_sensor_status+0x450>
 800b79e:	2601      	movs	r6, #1
 800b7a0:	f7f9 ffc6 	bl	8005730 <acc_rss_integration_log_level>
 800b7a4:	ab14      	add	r3, sp, #80	; 0x50
 800b7a6:	eb03 0c45 	add.w	ip, r3, r5, lsl #1
 800b7aa:	2801      	cmp	r0, #1
 800b7ac:	4667      	mov	r7, ip
 800b7ae:	4623      	mov	r3, r4
 800b7b0:	464a      	mov	r2, r9
 800b7b2:	4641      	mov	r1, r8
 800b7b4:	f04f 0002 	mov.w	r0, #2
 800b7b8:	d909      	bls.n	800b7ce <acc_sensor_diagnostics_r2_sensor_status+0x352>
 800b7ba:	f837 7c20 	ldrh.w	r7, [r7, #-32]
 800b7be:	f83c cc1e 	ldrh.w	ip, [ip, #-30]
 800b7c2:	9600      	str	r6, [sp, #0]
 800b7c4:	e9cd 7c01 	strd	r7, ip, [sp, #4]
 800b7c8:	f8da 7034 	ldr.w	r7, [sl, #52]	; 0x34
 800b7cc:	47b8      	blx	r7
 800b7ce:	3601      	adds	r6, #1
 800b7d0:	3502      	adds	r5, #2
 800b7d2:	2e08      	cmp	r6, #8
 800b7d4:	b2ed      	uxtb	r5, r5
 800b7d6:	d1e3      	bne.n	800b7a0 <acc_sensor_diagnostics_r2_sensor_status+0x324>
 800b7d8:	2500      	movs	r5, #0
 800b7da:	aa0b      	add	r2, sp, #44	; 0x2c
 800b7dc:	219d      	movs	r1, #157	; 0x9d
 800b7de:	4620      	mov	r0, r4
 800b7e0:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
 800b7e4:	f7fc faf6 	bl	8007dd4 <acc_sensor_reg_read>
 800b7e8:	f10d 022e 	add.w	r2, sp, #46	; 0x2e
 800b7ec:	2199      	movs	r1, #153	; 0x99
 800b7ee:	4620      	mov	r0, r4
 800b7f0:	f8ad 502e 	strh.w	r5, [sp, #46]	; 0x2e
 800b7f4:	f7fc faee 	bl	8007dd4 <acc_sensor_reg_read>
 800b7f8:	aa0c      	add	r2, sp, #48	; 0x30
 800b7fa:	2196      	movs	r1, #150	; 0x96
 800b7fc:	4620      	mov	r0, r4
 800b7fe:	f8ad 5030 	strh.w	r5, [sp, #48]	; 0x30
 800b802:	f7fc fae7 	bl	8007dd4 <acc_sensor_reg_read>
 800b806:	462a      	mov	r2, r5
 800b808:	21b2      	movs	r1, #178	; 0xb2
 800b80a:	4620      	mov	r0, r4
 800b80c:	f7fc faf8 	bl	8007e00 <acc_sensor_reg_write>
 800b810:	f7f9 ff8e 	bl	8005730 <acc_rss_integration_log_level>
 800b814:	2801      	cmp	r0, #1
 800b816:	d90f      	bls.n	800b838 <acc_sensor_diagnostics_r2_sensor_status+0x3bc>
 800b818:	482b      	ldr	r0, [pc, #172]	; (800b8c8 <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 800b81a:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 800b81e:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 800b822:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 800b826:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800b828:	9300      	str	r3, [sp, #0]
 800b82a:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800b82e:	4623      	mov	r3, r4
 800b830:	4a29      	ldr	r2, [pc, #164]	; (800b8d8 <acc_sensor_diagnostics_r2_sensor_status+0x45c>)
 800b832:	4926      	ldr	r1, [pc, #152]	; (800b8cc <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 800b834:	2002      	movs	r0, #2
 800b836:	47a8      	blx	r5
 800b838:	f7f9 ff7a 	bl	8005730 <acc_rss_integration_log_level>
 800b83c:	2801      	cmp	r0, #1
 800b83e:	d909      	bls.n	800b854 <acc_sensor_diagnostics_r2_sensor_status+0x3d8>
 800b840:	4a21      	ldr	r2, [pc, #132]	; (800b8c8 <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 800b842:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 800b846:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800b848:	4920      	ldr	r1, [pc, #128]	; (800b8cc <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 800b84a:	9300      	str	r3, [sp, #0]
 800b84c:	4a23      	ldr	r2, [pc, #140]	; (800b8dc <acc_sensor_diagnostics_r2_sensor_status+0x460>)
 800b84e:	4623      	mov	r3, r4
 800b850:	2002      	movs	r0, #2
 800b852:	47a8      	blx	r5
 800b854:	f7f9 ff6c 	bl	8005730 <acc_rss_integration_log_level>
 800b858:	2801      	cmp	r0, #1
 800b85a:	d909      	bls.n	800b870 <acc_sensor_diagnostics_r2_sensor_status+0x3f4>
 800b85c:	4a1a      	ldr	r2, [pc, #104]	; (800b8c8 <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 800b85e:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800b862:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800b864:	4919      	ldr	r1, [pc, #100]	; (800b8cc <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 800b866:	9300      	str	r3, [sp, #0]
 800b868:	4a1d      	ldr	r2, [pc, #116]	; (800b8e0 <acc_sensor_diagnostics_r2_sensor_status+0x464>)
 800b86a:	4623      	mov	r3, r4
 800b86c:	2002      	movs	r0, #2
 800b86e:	47a8      	blx	r5
 800b870:	f7f9 ff5e 	bl	8005730 <acc_rss_integration_log_level>
 800b874:	2801      	cmp	r0, #1
 800b876:	d909      	bls.n	800b88c <acc_sensor_diagnostics_r2_sensor_status+0x410>
 800b878:	4a13      	ldr	r2, [pc, #76]	; (800b8c8 <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 800b87a:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 800b87e:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800b880:	4912      	ldr	r1, [pc, #72]	; (800b8cc <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 800b882:	9300      	str	r3, [sp, #0]
 800b884:	4a17      	ldr	r2, [pc, #92]	; (800b8e4 <acc_sensor_diagnostics_r2_sensor_status+0x468>)
 800b886:	4623      	mov	r3, r4
 800b888:	2002      	movs	r0, #2
 800b88a:	47a8      	blx	r5
 800b88c:	f7f9 ff50 	bl	8005730 <acc_rss_integration_log_level>
 800b890:	2801      	cmp	r0, #1
 800b892:	d909      	bls.n	800b8a8 <acc_sensor_diagnostics_r2_sensor_status+0x42c>
 800b894:	4a0c      	ldr	r2, [pc, #48]	; (800b8c8 <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 800b896:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800b89a:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800b89c:	490b      	ldr	r1, [pc, #44]	; (800b8cc <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 800b89e:	9300      	str	r3, [sp, #0]
 800b8a0:	4a11      	ldr	r2, [pc, #68]	; (800b8e8 <acc_sensor_diagnostics_r2_sensor_status+0x46c>)
 800b8a2:	4623      	mov	r3, r4
 800b8a4:	2002      	movs	r0, #2
 800b8a6:	47a8      	blx	r5
 800b8a8:	f7f9 ff42 	bl	8005730 <acc_rss_integration_log_level>
 800b8ac:	2801      	cmp	r0, #1
 800b8ae:	d905      	bls.n	800b8bc <acc_sensor_diagnostics_r2_sensor_status+0x440>
 800b8b0:	4b05      	ldr	r3, [pc, #20]	; (800b8c8 <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 800b8b2:	4a0e      	ldr	r2, [pc, #56]	; (800b8ec <acc_sensor_diagnostics_r2_sensor_status+0x470>)
 800b8b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8b6:	4905      	ldr	r1, [pc, #20]	; (800b8cc <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 800b8b8:	2002      	movs	r0, #2
 800b8ba:	4798      	blx	r3
 800b8bc:	b014      	add	sp, #80	; 0x50
 800b8be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8c2:	2500      	movs	r5, #0
 800b8c4:	e752      	b.n	800b76c <acc_sensor_diagnostics_r2_sensor_status+0x2f0>
 800b8c6:	bf00      	nop
 800b8c8:	200004c0 	.word	0x200004c0
 800b8cc:	08010098 	.word	0x08010098
 800b8d0:	08010268 	.word	0x08010268
 800b8d4:	08010290 	.word	0x08010290
 800b8d8:	080102d8 	.word	0x080102d8
 800b8dc:	0801032c 	.word	0x0801032c
 800b8e0:	08010350 	.word	0x08010350
 800b8e4:	0801036c 	.word	0x0801036c
 800b8e8:	08010384 	.word	0x08010384
 800b8ec:	080103a0 	.word	0x080103a0
 800b8f0:	080102b0 	.word	0x080102b0

0800b8f4 <acc_alg_basic_saturation_check_u16>:
 800b8f4:	eddf 6a17 	vldr	s13, [pc, #92]	; 800b954 <acc_alg_basic_saturation_check_u16+0x60>
 800b8f8:	ed9f 6a17 	vldr	s12, [pc, #92]	; 800b958 <acc_alg_basic_saturation_check_u16+0x64>
 800b8fc:	ee76 5ac0 	vsub.f32	s11, s13, s0
 800b900:	ee80 7a26 	vdiv.f32	s14, s0, s13
 800b904:	0849      	lsrs	r1, r1, #1
 800b906:	eec5 7aa6 	vdiv.f32	s15, s11, s13
 800b90a:	ee27 7a06 	vmul.f32	s14, s14, s12
 800b90e:	ee67 7a86 	vmul.f32	s15, s15, s12
 800b912:	d01c      	beq.n	800b94e <acc_alg_basic_saturation_check_u16+0x5a>
 800b914:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800b918:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b91c:	ee17 3a10 	vmov	r3, s14
 800b920:	b430      	push	{r4, r5}
 800b922:	b29d      	uxth	r5, r3
 800b924:	ee17 3a90 	vmov	r3, s15
 800b928:	b29c      	uxth	r4, r3
 800b92a:	1e83      	subs	r3, r0, #2
 800b92c:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 800b930:	e003      	b.n	800b93a <acc_alg_basic_saturation_check_u16+0x46>
 800b932:	42aa      	cmp	r2, r5
 800b934:	d905      	bls.n	800b942 <acc_alg_basic_saturation_check_u16+0x4e>
 800b936:	428b      	cmp	r3, r1
 800b938:	d006      	beq.n	800b948 <acc_alg_basic_saturation_check_u16+0x54>
 800b93a:	f833 2f02 	ldrh.w	r2, [r3, #2]!
 800b93e:	42a2      	cmp	r2, r4
 800b940:	d3f7      	bcc.n	800b932 <acc_alg_basic_saturation_check_u16+0x3e>
 800b942:	2001      	movs	r0, #1
 800b944:	bc30      	pop	{r4, r5}
 800b946:	4770      	bx	lr
 800b948:	2000      	movs	r0, #0
 800b94a:	bc30      	pop	{r4, r5}
 800b94c:	4770      	bx	lr
 800b94e:	4608      	mov	r0, r1
 800b950:	4770      	bx	lr
 800b952:	bf00      	nop
 800b954:	42c80000 	.word	0x42c80000
 800b958:	477fff00 	.word	0x477fff00

0800b95c <acc_alg_basic_saturation_check_i16>:
 800b95c:	eddf 6a17 	vldr	s13, [pc, #92]	; 800b9bc <acc_alg_basic_saturation_check_i16+0x60>
 800b960:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800b9c0 <acc_alg_basic_saturation_check_i16+0x64>
 800b964:	ed9f 6a17 	vldr	s12, [pc, #92]	; 800b9c4 <acc_alg_basic_saturation_check_i16+0x68>
 800b968:	ee36 0ac0 	vsub.f32	s0, s13, s0
 800b96c:	0849      	lsrs	r1, r1, #1
 800b96e:	eec0 7a26 	vdiv.f32	s15, s0, s13
 800b972:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b976:	ee67 7a86 	vmul.f32	s15, s15, s12
 800b97a:	d01c      	beq.n	800b9b6 <acc_alg_basic_saturation_check_i16+0x5a>
 800b97c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800b980:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b984:	ee17 3a10 	vmov	r3, s14
 800b988:	b430      	push	{r4, r5}
 800b98a:	b21d      	sxth	r5, r3
 800b98c:	ee17 3a90 	vmov	r3, s15
 800b990:	b21c      	sxth	r4, r3
 800b992:	1e83      	subs	r3, r0, #2
 800b994:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 800b998:	e003      	b.n	800b9a2 <acc_alg_basic_saturation_check_i16+0x46>
 800b99a:	42aa      	cmp	r2, r5
 800b99c:	dd05      	ble.n	800b9aa <acc_alg_basic_saturation_check_i16+0x4e>
 800b99e:	428b      	cmp	r3, r1
 800b9a0:	d006      	beq.n	800b9b0 <acc_alg_basic_saturation_check_i16+0x54>
 800b9a2:	f933 2f02 	ldrsh.w	r2, [r3, #2]!
 800b9a6:	42a2      	cmp	r2, r4
 800b9a8:	dbf7      	blt.n	800b99a <acc_alg_basic_saturation_check_i16+0x3e>
 800b9aa:	2001      	movs	r0, #1
 800b9ac:	bc30      	pop	{r4, r5}
 800b9ae:	4770      	bx	lr
 800b9b0:	2000      	movs	r0, #0
 800b9b2:	bc30      	pop	{r4, r5}
 800b9b4:	4770      	bx	lr
 800b9b6:	4608      	mov	r0, r1
 800b9b8:	4770      	bx	lr
 800b9ba:	bf00      	nop
 800b9bc:	42c80000 	.word	0x42c80000
 800b9c0:	c7000000 	.word	0xc7000000
 800b9c4:	46fffe00 	.word	0x46fffe00

0800b9c8 <acc_alg_basic_subtract_mean_uint16>:
 800b9c8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800b9cc:	b570      	push	{r4, r5, r6, lr}
 800b9ce:	d13c      	bne.n	800ba4a <acc_alg_basic_subtract_mean_uint16+0x82>
 800b9d0:	2900      	cmp	r1, #0
 800b9d2:	d036      	beq.n	800ba42 <acc_alg_basic_subtract_mean_uint16+0x7a>
 800b9d4:	eb00 0641 	add.w	r6, r0, r1, lsl #1
 800b9d8:	4604      	mov	r4, r0
 800b9da:	2500      	movs	r5, #0
 800b9dc:	f834 2b02 	ldrh.w	r2, [r4], #2
 800b9e0:	f5a2 4200 	sub.w	r2, r2, #32768	; 0x8000
 800b9e4:	42a6      	cmp	r6, r4
 800b9e6:	4415      	add	r5, r2
 800b9e8:	d1f8      	bne.n	800b9dc <acc_alg_basic_subtract_mean_uint16+0x14>
 800b9ea:	2d00      	cmp	r5, #0
 800b9ec:	bfac      	ite	ge
 800b9ee:	2401      	movge	r4, #1
 800b9f0:	f04f 34ff 	movlt.w	r4, #4294967295	; 0xffffffff
 800b9f4:	084a      	lsrs	r2, r1, #1
 800b9f6:	fb04 5202 	mla	r2, r4, r2, r5
 800b9fa:	fb92 f5f1 	sdiv	r5, r2, r1
 800b9fe:	b22c      	sxth	r4, r5
 800ba00:	2c00      	cmp	r4, #0
 800ba02:	dd0e      	ble.n	800ba22 <acc_alg_basic_subtract_mean_uint16+0x5a>
 800ba04:	b2ad      	uxth	r5, r5
 800ba06:	f830 2b02 	ldrh.w	r2, [r0], #2
 800ba0a:	42aa      	cmp	r2, r5
 800ba0c:	bf26      	itte	cs
 800ba0e:	1b52      	subcs	r2, r2, r5
 800ba10:	b292      	uxthcs	r2, r2
 800ba12:	2200      	movcc	r2, #0
 800ba14:	4286      	cmp	r6, r0
 800ba16:	f820 2c02 	strh.w	r2, [r0, #-2]
 800ba1a:	d1f4      	bne.n	800ba06 <acc_alg_basic_subtract_mean_uint16+0x3e>
 800ba1c:	b103      	cbz	r3, 800ba20 <acc_alg_basic_subtract_mean_uint16+0x58>
 800ba1e:	801c      	strh	r4, [r3, #0]
 800ba20:	bd70      	pop	{r4, r5, r6, pc}
 800ba22:	f504 417f 	add.w	r1, r4, #65280	; 0xff00
 800ba26:	31ff      	adds	r1, #255	; 0xff
 800ba28:	f830 2b02 	ldrh.w	r2, [r0], #2
 800ba2c:	4291      	cmp	r1, r2
 800ba2e:	bfa6      	itte	ge
 800ba30:	1b52      	subge	r2, r2, r5
 800ba32:	b292      	uxthge	r2, r2
 800ba34:	f64f 72ff 	movwlt	r2, #65535	; 0xffff
 800ba38:	42b0      	cmp	r0, r6
 800ba3a:	f820 2c02 	strh.w	r2, [r0, #-2]
 800ba3e:	d1f3      	bne.n	800ba28 <acc_alg_basic_subtract_mean_uint16+0x60>
 800ba40:	e7ec      	b.n	800ba1c <acc_alg_basic_subtract_mean_uint16+0x54>
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d0ec      	beq.n	800ba20 <acc_alg_basic_subtract_mean_uint16+0x58>
 800ba46:	8019      	strh	r1, [r3, #0]
 800ba48:	bd70      	pop	{r4, r5, r6, pc}
 800ba4a:	4802      	ldr	r0, [pc, #8]	; (800ba54 <acc_alg_basic_subtract_mean_uint16+0x8c>)
 800ba4c:	211b      	movs	r1, #27
 800ba4e:	f7fc f893 	bl	8007b78 <acc_assert_fail>
 800ba52:	bf00      	nop
 800ba54:	08010420 	.word	0x08010420

0800ba58 <acc_alg_basic_subtract_section_mean_q12_4>:
 800ba58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba5c:	2a00      	cmp	r2, #0
 800ba5e:	bf14      	ite	ne
 800ba60:	4690      	movne	r8, r2
 800ba62:	4688      	moveq	r8, r1
 800ba64:	b1b9      	cbz	r1, 800ba96 <acc_alg_basic_subtract_section_mean_q12_4+0x3e>
 800ba66:	460f      	mov	r7, r1
 800ba68:	4681      	mov	r9, r0
 800ba6a:	469a      	mov	sl, r3
 800ba6c:	460d      	mov	r5, r1
 800ba6e:	4646      	mov	r6, r8
 800ba70:	2400      	movs	r4, #0
 800ba72:	19a3      	adds	r3, r4, r6
 800ba74:	42bb      	cmp	r3, r7
 800ba76:	bfc8      	it	gt
 800ba78:	462e      	movgt	r6, r5
 800ba7a:	eb09 0044 	add.w	r0, r9, r4, lsl #1
 800ba7e:	4444      	add	r4, r8
 800ba80:	4631      	mov	r1, r6
 800ba82:	2300      	movs	r3, #0
 800ba84:	4652      	mov	r2, sl
 800ba86:	b2a4      	uxth	r4, r4
 800ba88:	f7ff ff9e 	bl	800b9c8 <acc_alg_basic_subtract_mean_uint16>
 800ba8c:	eba5 0508 	sub.w	r5, r5, r8
 800ba90:	42a7      	cmp	r7, r4
 800ba92:	b2ad      	uxth	r5, r5
 800ba94:	d8ed      	bhi.n	800ba72 <acc_alg_basic_subtract_section_mean_q12_4+0x1a>
 800ba96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba9a:	bf00      	nop

0800ba9c <acc_alg_basic_exponential_smoothing_q3_12_complex>:
 800ba9c:	b33b      	cbz	r3, 800baee <acc_alg_basic_exponential_smoothing_q3_12_complex+0x52>
 800ba9e:	b4f0      	push	{r4, r5, r6, r7}
 800baa0:	f100 0c02 	add.w	ip, r0, #2
 800baa4:	2400      	movs	r4, #0
 800baa6:	1c8f      	adds	r7, r1, #2
 800baa8:	f931 6024 	ldrsh.w	r6, [r1, r4, lsl #2]
 800baac:	f930 5024 	ldrsh.w	r5, [r0, r4, lsl #2]
 800bab0:	1bad      	subs	r5, r5, r6
 800bab2:	fb02 f505 	mul.w	r5, r2, r5
 800bab6:	2d00      	cmp	r5, #0
 800bab8:	bfb8      	it	lt
 800baba:	f605 75ff 	addwlt	r5, r5, #4095	; 0xfff
 800babe:	eb06 3525 	add.w	r5, r6, r5, asr #12
 800bac2:	f821 5024 	strh.w	r5, [r1, r4, lsl #2]
 800bac6:	f93c 5024 	ldrsh.w	r5, [ip, r4, lsl #2]
 800baca:	f937 6024 	ldrsh.w	r6, [r7, r4, lsl #2]
 800bace:	1bad      	subs	r5, r5, r6
 800bad0:	fb02 f505 	mul.w	r5, r2, r5
 800bad4:	2d00      	cmp	r5, #0
 800bad6:	bfb8      	it	lt
 800bad8:	f605 75ff 	addwlt	r5, r5, #4095	; 0xfff
 800badc:	eb06 3525 	add.w	r5, r6, r5, asr #12
 800bae0:	f827 5024 	strh.w	r5, [r7, r4, lsl #2]
 800bae4:	3401      	adds	r4, #1
 800bae6:	42a3      	cmp	r3, r4
 800bae8:	d1de      	bne.n	800baa8 <acc_alg_basic_exponential_smoothing_q3_12_complex+0xc>
 800baea:	bcf0      	pop	{r4, r5, r6, r7}
 800baec:	4770      	bx	lr
 800baee:	4770      	bx	lr

0800baf0 <acc_alg_biquad_q3_12_lowpass_coeffs>:
 800baf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800baf4:	eddf 7abd 	vldr	s15, [pc, #756]	; 800bdec <acc_alg_biquad_q3_12_lowpass_coeffs+0x2fc>
 800baf8:	eeb0 0ac0 	vabs.f32	s0, s0
 800bafc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800bb00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb04:	ed2d 8b02 	vpush	{d8}
 800bb08:	4680      	mov	r8, r0
 800bb0a:	4689      	mov	r9, r1
 800bb0c:	4616      	mov	r6, r2
 800bb0e:	461f      	mov	r7, r3
 800bb10:	f300 810a 	bgt.w	800bd28 <acc_alg_biquad_q3_12_lowpass_coeffs+0x238>
 800bb14:	eddf 7ab6 	vldr	s15, [pc, #728]	; 800bdf0 <acc_alg_biquad_q3_12_lowpass_coeffs+0x300>
 800bb18:	ee20 0a27 	vmul.f32	s0, s0, s15
 800bb1c:	f002 f8ce 	bl	800dcbc <roundf>
 800bb20:	ed9f 7ab4 	vldr	s14, [pc, #720]	; 800bdf4 <acc_alg_biquad_q3_12_lowpass_coeffs+0x304>
 800bb24:	eddf 7ab4 	vldr	s15, [pc, #720]	; 800bdf8 <acc_alg_biquad_q3_12_lowpass_coeffs+0x308>
 800bb28:	ee20 0a07 	vmul.f32	s0, s0, s14
 800bb2c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800bb30:	f1b8 0f00 	cmp.w	r8, #0
 800bb34:	d036      	beq.n	800bba4 <acc_alg_biquad_q3_12_lowpass_coeffs+0xb4>
 800bb36:	f000 fdbd 	bl	800c6b4 <acc_alg_basic_math_restricted_tan_f32>
 800bb3a:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 800bdfc <acc_alg_biquad_q3_12_lowpass_coeffs+0x30c>
 800bb3e:	eddf 7ab0 	vldr	s15, [pc, #704]	; 800be00 <acc_alg_biquad_q3_12_lowpass_coeffs+0x310>
 800bb42:	ee20 0a07 	vmul.f32	s0, s0, s14
 800bb46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb4a:	ee30 7a27 	vadd.f32	s14, s0, s15
 800bb4e:	ee60 7a27 	vmul.f32	s15, s0, s15
 800bb52:	ee27 0a00 	vmul.f32	s0, s14, s0
 800bb56:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800bb5a:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 800bb5e:	eec0 7a07 	vdiv.f32	s15, s0, s14
 800bb62:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800bb66:	eef4 7ac6 	vcmpe.f32	s15, s12
 800bb6a:	ee37 7a26 	vadd.f32	s14, s14, s13
 800bb6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb72:	eef1 5ac7 	vsqrt.f32	s11, s14
 800bb76:	ee86 7aa5 	vdiv.f32	s14, s13, s11
 800bb7a:	d533      	bpl.n	800bbe4 <acc_alg_biquad_q3_12_lowpass_coeffs+0xf4>
 800bb7c:	eef4 7ae6 	vcmpe.f32	s15, s13
 800bb80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb84:	f340 80d3 	ble.w	800bd2e <acc_alg_biquad_q3_12_lowpass_coeffs+0x23e>
 800bb88:	eddf 7a9e 	vldr	s15, [pc, #632]	; 800be04 <acc_alg_biquad_q3_12_lowpass_coeffs+0x314>
 800bb8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb90:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800bb94:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bb98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bb9c:	ee17 3a90 	vmov	r3, s15
 800bba0:	005c      	lsls	r4, r3, #1
 800bba2:	e0d0      	b.n	800bd46 <acc_alg_biquad_q3_12_lowpass_coeffs+0x256>
 800bba4:	f000 fd86 	bl	800c6b4 <acc_alg_basic_math_restricted_tan_f32>
 800bba8:	eddf 7a95 	vldr	s15, [pc, #596]	; 800be00 <acc_alg_biquad_q3_12_lowpass_coeffs+0x310>
 800bbac:	ee30 7a27 	vadd.f32	s14, s0, s15
 800bbb0:	ee60 7a27 	vmul.f32	s15, s0, s15
 800bbb4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bbb8:	ee27 0a00 	vmul.f32	s0, s14, s0
 800bbbc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800bbc0:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 800bbc4:	eec0 7a07 	vdiv.f32	s15, s0, s14
 800bbc8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800bbcc:	eef4 7ac6 	vcmpe.f32	s15, s12
 800bbd0:	ee37 7a26 	vadd.f32	s14, s14, s13
 800bbd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbd8:	eef1 5ac7 	vsqrt.f32	s11, s14
 800bbdc:	ee86 7aa5 	vdiv.f32	s14, s13, s11
 800bbe0:	f100 80a5 	bmi.w	800bd2e <acc_alg_biquad_q3_12_lowpass_coeffs+0x23e>
 800bbe4:	eddf 6a88 	vldr	s13, [pc, #544]	; 800be08 <acc_alg_biquad_q3_12_lowpass_coeffs+0x318>
 800bbe8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bbec:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800bbf0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bbf4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbf8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bbfc:	ee17 5a90 	vmov	r5, s15
 800bc00:	fb05 f305 	mul.w	r3, r5, r5
 800bc04:	f1c3 6380 	rsb	r3, r3, #67108864	; 0x4000000
 800bc08:	ee07 3a90 	vmov	s15, r3
 800bc0c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800bc10:	eef1 7ac7 	vsqrt.f32	s15, s14
 800bc14:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bc18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bc20:	ee17 4a90 	vmov	r4, s15
 800bc24:	2c00      	cmp	r4, #0
 800bc26:	f000 80a4 	beq.w	800bd72 <acc_alg_biquad_q3_12_lowpass_coeffs+0x282>
 800bc2a:	f1b9 0f00 	cmp.w	r9, #0
 800bc2e:	d017      	beq.n	800bc60 <acc_alg_biquad_q3_12_lowpass_coeffs+0x170>
 800bc30:	b2a3      	uxth	r3, r4
 800bc32:	f5c3 5180 	rsb	r1, r3, #4096	; 0x1000
 800bc36:	b208      	sxth	r0, r1
 800bc38:	b2aa      	uxth	r2, r5
 800bc3a:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 800bc3e:	f8a9 0000 	strh.w	r0, [r9]
 800bc42:	f8a9 0004 	strh.w	r0, [r9, #4]
 800bc46:	f5c4 50c0 	rsb	r0, r4, #6144	; 0x1800
 800bc4a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800bc4e:	0049      	lsls	r1, r1, #1
 800bc50:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 800bc54:	f8a9 1002 	strh.w	r1, [r9, #2]
 800bc58:	f8a9 3006 	strh.w	r3, [r9, #6]
 800bc5c:	f8a9 2008 	strh.w	r2, [r9, #8]
 800bc60:	2d00      	cmp	r5, #0
 800bc62:	f000 80a1 	beq.w	800bda8 <acc_alg_biquad_q3_12_lowpass_coeffs+0x2b8>
 800bc66:	2e00      	cmp	r6, #0
 800bc68:	f000 80b8 	beq.w	800bddc <acc_alg_biquad_q3_12_lowpass_coeffs+0x2ec>
 800bc6c:	f5c4 5280 	rsb	r2, r4, #4096	; 0x1000
 800bc70:	fb05 f305 	mul.w	r3, r5, r5
 800bc74:	fb04 f404 	mul.w	r4, r4, r4
 800bc78:	ebc5 0242 	rsb	r2, r5, r2, lsl #1
 800bc7c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bc80:	f104 447c 	add.w	r4, r4, #4227858432	; 0xfc000000
 800bc84:	fb02 f202 	mul.w	r2, r2, r2
 800bc88:	eba2 0244 	sub.w	r2, r2, r4, lsl #1
 800bc8c:	ee07 2a90 	vmov	s15, r2
 800bc90:	0064      	lsls	r4, r4, #1
 800bc92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bc96:	ee07 4a90 	vmov	s15, r4
 800bc9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bc9e:	ee87 8a87 	vdiv.f32	s16, s15, s14
 800bca2:	b356      	cbz	r6, 800bcfa <acc_alg_biquad_q3_12_lowpass_coeffs+0x20a>
 800bca4:	f1b8 0f00 	cmp.w	r8, #0
 800bca8:	f040 8089 	bne.w	800bdbe <acc_alg_biquad_q3_12_lowpass_coeffs+0x2ce>
 800bcac:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800bcb0:	ee78 6a27 	vadd.f32	s13, s16, s15
 800bcb4:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800bcb8:	ee76 7aa6 	vadd.f32	s15, s13, s13
 800bcbc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bcc0:	ee77 7a86 	vadd.f32	s15, s15, s12
 800bcc4:	eef1 6ae7 	vsqrt.f32	s13, s15
 800bcc8:	f5c5 5500 	rsb	r5, r5, #8192	; 0x2000
 800bccc:	006d      	lsls	r5, r5, #1
 800bcce:	eeb1 6ac7 	vsqrt.f32	s12, s14
 800bcd2:	ee07 5a90 	vmov	s15, r5
 800bcd6:	ee36 7ac8 	vsub.f32	s14, s13, s16
 800bcda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bcde:	eef1 6ac7 	vsqrt.f32	s13, s14
 800bce2:	ee86 0a27 	vdiv.f32	s0, s12, s15
 800bce6:	ee20 0a26 	vmul.f32	s0, s0, s13
 800bcea:	f000 fcf3 	bl	800c6d4 <acc_alg_basic_math_restricted_atan_f32>
 800bcee:	ed9f 7a42 	vldr	s14, [pc, #264]	; 800bdf8 <acc_alg_biquad_q3_12_lowpass_coeffs+0x308>
 800bcf2:	eec0 7a07 	vdiv.f32	s15, s0, s14
 800bcf6:	edc6 7a00 	vstr	s15, [r6]
 800bcfa:	2f00      	cmp	r7, #0
 800bcfc:	d071      	beq.n	800bde2 <acc_alg_biquad_q3_12_lowpass_coeffs+0x2f2>
 800bcfe:	eddf 7a43 	vldr	s15, [pc, #268]	; 800be0c <acc_alg_biquad_q3_12_lowpass_coeffs+0x31c>
 800bd02:	eddf 6a43 	vldr	s13, [pc, #268]	; 800be10 <acc_alg_biquad_q3_12_lowpass_coeffs+0x320>
 800bd06:	ee28 7a27 	vmul.f32	s14, s16, s15
 800bd0a:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800bd0e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bd12:	2001      	movs	r0, #1
 800bd14:	ee28 8a67 	vnmul.f32	s16, s16, s15
 800bd18:	eec8 7a26 	vdiv.f32	s15, s16, s13
 800bd1c:	ecbd 8b02 	vpop	{d8}
 800bd20:	edc7 7a00 	vstr	s15, [r7]
 800bd24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd28:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 800be14 <acc_alg_biquad_q3_12_lowpass_coeffs+0x324>
 800bd2c:	e700      	b.n	800bb30 <acc_alg_biquad_q3_12_lowpass_coeffs+0x40>
 800bd2e:	eddf 7a3a 	vldr	s15, [pc, #232]	; 800be18 <acc_alg_biquad_q3_12_lowpass_coeffs+0x328>
 800bd32:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd36:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800bd3a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bd3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bd42:	ee17 4a90 	vmov	r4, s15
 800bd46:	fb04 f304 	mul.w	r3, r4, r4
 800bd4a:	009b      	lsls	r3, r3, #2
 800bd4c:	f1c3 6380 	rsb	r3, r3, #67108864	; 0x4000000
 800bd50:	ee07 3a90 	vmov	s15, r3
 800bd54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd58:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800bd5c:	eeb1 7ae7 	vsqrt.f32	s14, s15
 800bd60:	ee77 7a26 	vadd.f32	s15, s14, s13
 800bd64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bd68:	ee17 5a90 	vmov	r5, s15
 800bd6c:	2c00      	cmp	r4, #0
 800bd6e:	f47f af5c 	bne.w	800bc2a <acc_alg_biquad_q3_12_lowpass_coeffs+0x13a>
 800bd72:	f1b9 0f00 	cmp.w	r9, #0
 800bd76:	d00b      	beq.n	800bd90 <acc_alg_biquad_q3_12_lowpass_coeffs+0x2a0>
 800bd78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bd7c:	f8a9 4002 	strh.w	r4, [r9, #2]
 800bd80:	f8a9 4004 	strh.w	r4, [r9, #4]
 800bd84:	f8a9 4006 	strh.w	r4, [r9, #6]
 800bd88:	f8a9 4008 	strh.w	r4, [r9, #8]
 800bd8c:	f8a9 3000 	strh.w	r3, [r9]
 800bd90:	b116      	cbz	r6, 800bd98 <acc_alg_biquad_q3_12_lowpass_coeffs+0x2a8>
 800bd92:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 800bd96:	6033      	str	r3, [r6, #0]
 800bd98:	b167      	cbz	r7, 800bdb4 <acc_alg_biquad_q3_12_lowpass_coeffs+0x2c4>
 800bd9a:	ecbd 8b02 	vpop	{d8}
 800bd9e:	2300      	movs	r3, #0
 800bda0:	2000      	movs	r0, #0
 800bda2:	603b      	str	r3, [r7, #0]
 800bda4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bda8:	2e00      	cmp	r6, #0
 800bdaa:	d0f5      	beq.n	800bd98 <acc_alg_biquad_q3_12_lowpass_coeffs+0x2a8>
 800bdac:	2300      	movs	r3, #0
 800bdae:	6033      	str	r3, [r6, #0]
 800bdb0:	2f00      	cmp	r7, #0
 800bdb2:	d1f2      	bne.n	800bd9a <acc_alg_biquad_q3_12_lowpass_coeffs+0x2aa>
 800bdb4:	ecbd 8b02 	vpop	{d8}
 800bdb8:	4638      	mov	r0, r7
 800bdba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bdbe:	eddf 6a17 	vldr	s13, [pc, #92]	; 800be1c <acc_alg_biquad_q3_12_lowpass_coeffs+0x32c>
 800bdc2:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800be00 <acc_alg_biquad_q3_12_lowpass_coeffs+0x310>
 800bdc6:	ed9f 6a16 	vldr	s12, [pc, #88]	; 800be20 <acc_alg_biquad_q3_12_lowpass_coeffs+0x330>
 800bdca:	ee78 6a26 	vadd.f32	s13, s16, s13
 800bdce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bdd2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bdd6:	ee77 7a86 	vadd.f32	s15, s15, s12
 800bdda:	e773      	b.n	800bcc4 <acc_alg_biquad_q3_12_lowpass_coeffs+0x1d4>
 800bddc:	2f00      	cmp	r7, #0
 800bdde:	f47f af45 	bne.w	800bc6c <acc_alg_biquad_q3_12_lowpass_coeffs+0x17c>
 800bde2:	ecbd 8b02 	vpop	{d8}
 800bde6:	2001      	movs	r0, #1
 800bde8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bdec:	3effffde 	.word	0x3effffde
 800bdf0:	48800000 	.word	0x48800000
 800bdf4:	36800000 	.word	0x36800000
 800bdf8:	40490fdb 	.word	0x40490fdb
 800bdfc:	3f9f8d77 	.word	0x3f9f8d77
 800be00:	3fb504f3 	.word	0x3fb504f3
 800be04:	45000000 	.word	0x45000000
 800be08:	46000000 	.word	0x46000000
 800be0c:	4113c6ef 	.word	0x4113c6ef
 800be10:	42a646e1 	.word	0x42a646e1
 800be14:	3fc90fdb 	.word	0x3fc90fdb
 800be18:	45800000 	.word	0x45800000
 800be1c:	3f15f61a 	.word	0x3f15f61a
 800be20:	3f95f61a 	.word	0x3f95f61a

0800be24 <acc_alg_biquad_q3_12_complex_direct_form_1_filtfilt_reduced_edge_transients>:
 800be24:	b570      	push	{r4, r5, r6, lr}
 800be26:	2300      	movs	r3, #0
 800be28:	b082      	sub	sp, #8
 800be2a:	4615      	mov	r5, r2
 800be2c:	460c      	mov	r4, r1
 800be2e:	4606      	mov	r6, r0
 800be30:	f7f4 f9d2 	bl	80001d8 <acc_alg_biquad_q3_12_complex_direct_form_1>
 800be34:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
 800be38:	3b01      	subs	r3, #1
 800be3a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800be3e:	f834 3023 	ldrh.w	r3, [r4, r3, lsl #2]
 800be42:	8852      	ldrh	r2, [r2, #2]
 800be44:	f8ad 2006 	strh.w	r2, [sp, #6]
 800be48:	f8ad 3004 	strh.w	r3, [sp, #4]
 800be4c:	9b01      	ldr	r3, [sp, #4]
 800be4e:	4630      	mov	r0, r6
 800be50:	462a      	mov	r2, r5
 800be52:	4621      	mov	r1, r4
 800be54:	b002      	add	sp, #8
 800be56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800be5a:	f7f4 b9b9 	b.w	80001d0 <acc_alg_biquad_q3_12_complex_direct_form_1_reverse>
 800be5e:	bf00      	nop

0800be60 <acc_alg_iq_demodulation_q3_12_real>:
 800be60:	ee20 1a01 	vmul.f32	s2, s0, s2
 800be64:	ee60 0a20 	vmul.f32	s1, s0, s1
 800be68:	eefd 7ac1 	vcvt.s32.f32	s15, s2
 800be6c:	eebd 0ae0 	vcvt.s32.f32	s0, s1
 800be70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800be74:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800be78:	ee31 1a67 	vsub.f32	s2, s2, s15
 800be7c:	ee30 0ac0 	vsub.f32	s0, s1, s0
 800be80:	eddf 7a26 	vldr	s15, [pc, #152]	; 800bf1c <acc_alg_iq_demodulation_q3_12_real+0xbc>
 800be84:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800bf20 <acc_alg_iq_demodulation_q3_12_real+0xc0>
 800be88:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 800be8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800be94:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800be98:	bfb4      	ite	lt
 800be9a:	eeb0 6a66 	vmovlt.f32	s12, s13
 800be9e:	eeb0 6a67 	vmovge.f32	s12, s15
 800bea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bea6:	bfb8      	it	lt
 800bea8:	eef0 7a66 	vmovlt.f32	s15, s13
 800beac:	ee31 1a06 	vadd.f32	s2, s2, s12
 800beb0:	ee30 0a27 	vadd.f32	s0, s0, s15
 800beb4:	ee21 1a07 	vmul.f32	s2, s2, s14
 800beb8:	ee20 0a07 	vmul.f32	s0, s0, s14
 800bebc:	b36a      	cbz	r2, 800bf1a <acc_alg_iq_demodulation_q3_12_real+0xba>
 800bebe:	eefc 7ac1 	vcvt.u32.f32	s15, s2
 800bec2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bec6:	ee17 9a90 	vmov	r9, s15
 800beca:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800bece:	1e85      	subs	r5, r0, #2
 800bed0:	ee17 7a90 	vmov	r7, s15
 800bed4:	eb05 0842 	add.w	r8, r5, r2, lsl #1
 800bed8:	1c8e      	adds	r6, r1, #2
 800beda:	4648      	mov	r0, r9
 800bedc:	f935 4f02 	ldrsh.w	r4, [r5, #2]!
 800bee0:	f000 fd04 	bl	800c8ec <acc_alg_basic_math_q3_12_cos>
 800bee4:	4603      	mov	r3, r0
 800bee6:	fb04 f303 	mul.w	r3, r4, r3
 800beea:	2b00      	cmp	r3, #0
 800beec:	bfb8      	it	lt
 800beee:	f603 73ff 	addwlt	r3, r3, #4095	; 0xfff
 800bef2:	131b      	asrs	r3, r3, #12
 800bef4:	4648      	mov	r0, r9
 800bef6:	f826 3c02 	strh.w	r3, [r6, #-2]
 800befa:	f000 fce1 	bl	800c8c0 <acc_alg_basic_math_q3_12_sin>
 800befe:	fb04 f000 	mul.w	r0, r4, r0
 800bf02:	2800      	cmp	r0, #0
 800bf04:	bfb8      	it	lt
 800bf06:	f600 70ff 	addwlt	r0, r0, #4095	; 0xfff
 800bf0a:	1300      	asrs	r0, r0, #12
 800bf0c:	45a8      	cmp	r8, r5
 800bf0e:	f826 0b04 	strh.w	r0, [r6], #4
 800bf12:	44b9      	add	r9, r7
 800bf14:	d1e1      	bne.n	800beda <acc_alg_iq_demodulation_q3_12_real+0x7a>
 800bf16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf1a:	4770      	bx	lr
 800bf1c:	00000000 	.word	0x00000000
 800bf20:	4f800000 	.word	0x4f800000

0800bf24 <acc_alg_iq_demodulation_q3_12_complex>:
 800bf24:	ee20 1a01 	vmul.f32	s2, s0, s2
 800bf28:	ee60 0a20 	vmul.f32	s1, s0, s1
 800bf2c:	eefd 7ac1 	vcvt.s32.f32	s15, s2
 800bf30:	eebd 0ae0 	vcvt.s32.f32	s0, s1
 800bf34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bf38:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800bf3c:	ee31 1a67 	vsub.f32	s2, s2, s15
 800bf40:	ee30 0ac0 	vsub.f32	s0, s1, s0
 800bf44:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800c000 <acc_alg_iq_demodulation_q3_12_complex+0xdc>
 800bf48:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800c004 <acc_alg_iq_demodulation_q3_12_complex+0xe0>
 800bf4c:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 800bf50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf58:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800bf5c:	bfb4      	ite	lt
 800bf5e:	eeb0 6a66 	vmovlt.f32	s12, s13
 800bf62:	eeb0 6a67 	vmovge.f32	s12, s15
 800bf66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf6a:	bfb8      	it	lt
 800bf6c:	eef0 7a66 	vmovlt.f32	s15, s13
 800bf70:	ee31 1a06 	vadd.f32	s2, s2, s12
 800bf74:	ee30 0a27 	vadd.f32	s0, s0, s15
 800bf78:	ee21 1a07 	vmul.f32	s2, s2, s14
 800bf7c:	ee20 0a07 	vmul.f32	s0, s0, s14
 800bf80:	b3e9      	cbz	r1, 800bffe <acc_alg_iq_demodulation_q3_12_complex+0xda>
 800bf82:	eefc 7ac1 	vcvt.u32.f32	s15, s2
 800bf86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf8a:	ee17 8a90 	vmov	r8, s15
 800bf8e:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800bf92:	4607      	mov	r7, r0
 800bf94:	ee17 5a90 	vmov	r5, s15
 800bf98:	eb00 0681 	add.w	r6, r0, r1, lsl #2
 800bf9c:	4640      	mov	r0, r8
 800bf9e:	f9b7 9000 	ldrsh.w	r9, [r7]
 800bfa2:	f9b7 a002 	ldrsh.w	sl, [r7, #2]
 800bfa6:	f000 fca1 	bl	800c8ec <acc_alg_basic_math_q3_12_cos>
 800bfaa:	4604      	mov	r4, r0
 800bfac:	4640      	mov	r0, r8
 800bfae:	f000 fc87 	bl	800c8c0 <acc_alg_basic_math_q3_12_sin>
 800bfb2:	fb09 f204 	mul.w	r2, r9, r4
 800bfb6:	fb0a f100 	mul.w	r1, sl, r0
 800bfba:	2a00      	cmp	r2, #0
 800bfbc:	fb04 f30a 	mul.w	r3, r4, sl
 800bfc0:	bfb8      	it	lt
 800bfc2:	f602 72ff 	addwlt	r2, r2, #4095	; 0xfff
 800bfc6:	2900      	cmp	r1, #0
 800bfc8:	fb09 f000 	mul.w	r0, r9, r0
 800bfcc:	bfb8      	it	lt
 800bfce:	f601 71ff 	addwlt	r1, r1, #4095	; 0xfff
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	bfb8      	it	lt
 800bfd6:	f603 73ff 	addwlt	r3, r3, #4095	; 0xfff
 800bfda:	2800      	cmp	r0, #0
 800bfdc:	bfb8      	it	lt
 800bfde:	f600 70ff 	addwlt	r0, r0, #4095	; 0xfff
 800bfe2:	1312      	asrs	r2, r2, #12
 800bfe4:	131b      	asrs	r3, r3, #12
 800bfe6:	eba2 3221 	sub.w	r2, r2, r1, asr #12
 800bfea:	eb03 3320 	add.w	r3, r3, r0, asr #12
 800bfee:	803a      	strh	r2, [r7, #0]
 800bff0:	807b      	strh	r3, [r7, #2]
 800bff2:	3704      	adds	r7, #4
 800bff4:	42be      	cmp	r6, r7
 800bff6:	44a8      	add	r8, r5
 800bff8:	d1d0      	bne.n	800bf9c <acc_alg_iq_demodulation_q3_12_complex+0x78>
 800bffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bffe:	4770      	bx	lr
 800c000:	00000000 	.word	0x00000000
 800c004:	4f800000 	.word	0x4f800000

0800c008 <acc_alg_phase_estimation_q3_12>:
 800c008:	2a01      	cmp	r2, #1
 800c00a:	b4f0      	push	{r4, r5, r6, r7}
 800c00c:	d94c      	bls.n	800c0a8 <acc_alg_phase_estimation_q3_12+0xa0>
 800c00e:	eb00 0c82 	add.w	ip, r0, r2, lsl #2
 800c012:	f1ac 0c04 	sub.w	ip, ip, #4
 800c016:	4603      	mov	r3, r0
 800c018:	f9b3 7000 	ldrsh.w	r7, [r3]
 800c01c:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 800c020:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 800c024:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
 800c028:	1bed      	subs	r5, r5, r7
 800c02a:	fb01 f505 	mul.w	r5, r1, r5
 800c02e:	1ba4      	subs	r4, r4, r6
 800c030:	2d00      	cmp	r5, #0
 800c032:	fb01 f404 	mul.w	r4, r1, r4
 800c036:	bfb8      	it	lt
 800c038:	f605 75ff 	addwlt	r5, r5, #4095	; 0xfff
 800c03c:	2c00      	cmp	r4, #0
 800c03e:	bfb8      	it	lt
 800c040:	f604 74ff 	addwlt	r4, r4, #4095	; 0xfff
 800c044:	eb07 3525 	add.w	r5, r7, r5, asr #12
 800c048:	eb06 3424 	add.w	r4, r6, r4, asr #12
 800c04c:	809d      	strh	r5, [r3, #4]
 800c04e:	80dc      	strh	r4, [r3, #6]
 800c050:	3304      	adds	r3, #4
 800c052:	4563      	cmp	r3, ip
 800c054:	d1e0      	bne.n	800c018 <acc_alg_phase_estimation_q3_12+0x10>
 800c056:	1e53      	subs	r3, r2, #1
 800c058:	3a02      	subs	r2, #2
 800c05a:	eb00 0483 	add.w	r4, r0, r3, lsl #2
 800c05e:	f930 6023 	ldrsh.w	r6, [r0, r3, lsl #2]
 800c062:	f9b4 5002 	ldrsh.w	r5, [r4, #2]
 800c066:	1c87      	adds	r7, r0, #2
 800c068:	f930 4022 	ldrsh.w	r4, [r0, r2, lsl #2]
 800c06c:	1ba4      	subs	r4, r4, r6
 800c06e:	fb01 f404 	mul.w	r4, r1, r4
 800c072:	2c00      	cmp	r4, #0
 800c074:	bfb8      	it	lt
 800c076:	f604 74ff 	addwlt	r4, r4, #4095	; 0xfff
 800c07a:	eb06 3624 	add.w	r6, r6, r4, asr #12
 800c07e:	b236      	sxth	r6, r6
 800c080:	f820 6022 	strh.w	r6, [r0, r2, lsl #2]
 800c084:	f937 3022 	ldrsh.w	r3, [r7, r2, lsl #2]
 800c088:	1b5b      	subs	r3, r3, r5
 800c08a:	fb01 f303 	mul.w	r3, r1, r3
 800c08e:	2b00      	cmp	r3, #0
 800c090:	bfb8      	it	lt
 800c092:	f603 73ff 	addwlt	r3, r3, #4095	; 0xfff
 800c096:	eb05 3523 	add.w	r5, r5, r3, asr #12
 800c09a:	b22d      	sxth	r5, r5
 800c09c:	f827 5022 	strh.w	r5, [r7, r2, lsl #2]
 800c0a0:	3a01      	subs	r2, #1
 800c0a2:	d2e1      	bcs.n	800c068 <acc_alg_phase_estimation_q3_12+0x60>
 800c0a4:	bcf0      	pop	{r4, r5, r6, r7}
 800c0a6:	4770      	bx	lr
 800c0a8:	d0fc      	beq.n	800c0a4 <acc_alg_phase_estimation_q3_12+0x9c>
 800c0aa:	f06f 0201 	mvn.w	r2, #1
 800c0ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c0b2:	e7d2      	b.n	800c05a <acc_alg_phase_estimation_q3_12+0x52>

0800c0b4 <acc_alg_power_bins>:
 800c0b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0b8:	2900      	cmp	r1, #0
 800c0ba:	d03e      	beq.n	800c13a <acc_alg_power_bins+0x86>
 800c0bc:	1e87      	subs	r7, r0, #2
 800c0be:	eb07 0c41 	add.w	ip, r7, r1, lsl #1
 800c0c2:	463e      	mov	r6, r7
 800c0c4:	004d      	lsls	r5, r1, #1
 800c0c6:	2400      	movs	r4, #0
 800c0c8:	f836 ef02 	ldrh.w	lr, [r6, #2]!
 800c0cc:	4566      	cmp	r6, ip
 800c0ce:	4474      	add	r4, lr
 800c0d0:	d1fa      	bne.n	800c0c8 <acc_alg_power_bins+0x14>
 800c0d2:	fbb4 f4f1 	udiv	r4, r4, r1
 800c0d6:	b2a6      	uxth	r6, r4
 800c0d8:	f837 4f02 	ldrh.w	r4, [r7, #2]!
 800c0dc:	42b4      	cmp	r4, r6
 800c0de:	bf8c      	ite	hi
 800c0e0:	1ba4      	subhi	r4, r4, r6
 800c0e2:	1b34      	subls	r4, r6, r4
 800c0e4:	b2a4      	uxth	r4, r4
 800c0e6:	4567      	cmp	r7, ip
 800c0e8:	803c      	strh	r4, [r7, #0]
 800c0ea:	d1f5      	bne.n	800c0d8 <acc_alg_power_bins+0x24>
 800c0ec:	b31b      	cbz	r3, 800c136 <acc_alg_power_bins+0x82>
 800c0ee:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800c0f2:	f04f 0800 	mov.w	r8, #0
 800c0f6:	e00c      	b.n	800c112 <acc_alg_power_bins+0x5e>
 800c0f8:	f8a2 8000 	strh.w	r8, [r2]
 800c0fc:	3b01      	subs	r3, #1
 800c0fe:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800c102:	eba1 0106 	sub.w	r1, r1, r6
 800c106:	f1ae 0e02 	sub.w	lr, lr, #2
 800c10a:	f102 0202 	add.w	r2, r2, #2
 800c10e:	d012      	beq.n	800c136 <acc_alg_power_bins+0x82>
 800c110:	004d      	lsls	r5, r1, #1
 800c112:	441d      	add	r5, r3
 800c114:	4575      	cmp	r5, lr
 800c116:	fbb5 f6fe 	udiv	r6, r5, lr
 800c11a:	d3ed      	bcc.n	800c0f8 <acc_alg_power_bins+0x44>
 800c11c:	2500      	movs	r5, #0
 800c11e:	462c      	mov	r4, r5
 800c120:	1e87      	subs	r7, r0, #2
 800c122:	f837 cf02 	ldrh.w	ip, [r7, #2]!
 800c126:	3401      	adds	r4, #1
 800c128:	42a6      	cmp	r6, r4
 800c12a:	4465      	add	r5, ip
 800c12c:	d8f9      	bhi.n	800c122 <acc_alg_power_bins+0x6e>
 800c12e:	fbb5 f5f6 	udiv	r5, r5, r6
 800c132:	8015      	strh	r5, [r2, #0]
 800c134:	e7e2      	b.n	800c0fc <acc_alg_power_bins+0x48>
 800c136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c13a:	4802      	ldr	r0, [pc, #8]	; (800c144 <acc_alg_power_bins+0x90>)
 800c13c:	2124      	movs	r1, #36	; 0x24
 800c13e:	f7fb fd1b 	bl	8007b78 <acc_assert_fail>
 800c142:	bf00      	nop
 800c144:	08010438 	.word	0x08010438

0800c148 <acc_confprogram_modify_bin_sensor>:
 800c148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c14c:	b082      	sub	sp, #8
 800c14e:	e9dd 690a 	ldrd	r6, r9, [sp, #40]	; 0x28
 800c152:	2501      	movs	r5, #1
 800c154:	409d      	lsls	r5, r3
 800c156:	42b5      	cmp	r5, r6
 800c158:	461c      	mov	r4, r3
 800c15a:	4607      	mov	r7, r0
 800c15c:	468a      	mov	sl, r1
 800c15e:	4690      	mov	r8, r2
 800c160:	d809      	bhi.n	800c176 <acc_confprogram_modify_bin_sensor+0x2e>
 800c162:	4b10      	ldr	r3, [pc, #64]	; (800c1a4 <acc_confprogram_modify_bin_sensor+0x5c>)
 800c164:	9600      	str	r6, [sp, #0]
 800c166:	3d01      	subs	r5, #1
 800c168:	9501      	str	r5, [sp, #4]
 800c16a:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 800c16c:	4a0e      	ldr	r2, [pc, #56]	; (800c1a8 <acc_confprogram_modify_bin_sensor+0x60>)
 800c16e:	490f      	ldr	r1, [pc, #60]	; (800c1ac <acc_confprogram_modify_bin_sensor+0x64>)
 800c170:	4653      	mov	r3, sl
 800c172:	2000      	movs	r0, #0
 800c174:	47a8      	blx	r5
 800c176:	4651      	mov	r1, sl
 800c178:	4638      	mov	r0, r7
 800c17a:	f7fb fe7f 	bl	8007e7c <acc_sensor_conf_read_instr>
 800c17e:	f1c4 0420 	rsb	r4, r4, #32
 800c182:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800c186:	40e5      	lsrs	r5, r4
 800c188:	fa05 f408 	lsl.w	r4, r5, r8
 800c18c:	ea20 0204 	bic.w	r2, r0, r4
 800c190:	fa06 f608 	lsl.w	r6, r6, r8
 800c194:	4651      	mov	r1, sl
 800c196:	4638      	mov	r0, r7
 800c198:	4332      	orrs	r2, r6
 800c19a:	464b      	mov	r3, r9
 800c19c:	b002      	add	sp, #8
 800c19e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1a2:	4718      	bx	r3
 800c1a4:	200004c0 	.word	0x200004c0
 800c1a8:	08010448 	.word	0x08010448
 800c1ac:	08010480 	.word	0x08010480

0800c1b0 <acc_confprogram_modify_bin>:
 800c1b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c1b4:	b085      	sub	sp, #20
 800c1b6:	f04f 0c01 	mov.w	ip, #1
 800c1ba:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c1bc:	fa0c fc03 	lsl.w	ip, ip, r3
 800c1c0:	45b4      	cmp	ip, r6
 800c1c2:	461d      	mov	r5, r3
 800c1c4:	4680      	mov	r8, r0
 800c1c6:	460c      	mov	r4, r1
 800c1c8:	4617      	mov	r7, r2
 800c1ca:	d80b      	bhi.n	800c1e4 <acc_confprogram_modify_bin+0x34>
 800c1cc:	4b13      	ldr	r3, [pc, #76]	; (800c21c <acc_confprogram_modify_bin+0x6c>)
 800c1ce:	9600      	str	r6, [sp, #0]
 800c1d0:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 800c1d4:	9201      	str	r2, [sp, #4]
 800c1d6:	f8d3 9034 	ldr.w	r9, [r3, #52]	; 0x34
 800c1da:	4a11      	ldr	r2, [pc, #68]	; (800c220 <acc_confprogram_modify_bin+0x70>)
 800c1dc:	4911      	ldr	r1, [pc, #68]	; (800c224 <acc_confprogram_modify_bin+0x74>)
 800c1de:	4623      	mov	r3, r4
 800c1e0:	2000      	movs	r0, #0
 800c1e2:	47c8      	blx	r9
 800c1e4:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 800c1e8:	4620      	mov	r0, r4
 800c1ea:	a902      	add	r1, sp, #8
 800c1ec:	2201      	movs	r2, #1
 800c1ee:	f7fb ff8d 	bl	800810c <acc_utils_transfer_buffer_to_uint32>
 800c1f2:	f1c5 0520 	rsb	r5, r5, #32
 800c1f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c1fa:	9902      	ldr	r1, [sp, #8]
 800c1fc:	40eb      	lsrs	r3, r5
 800c1fe:	40bb      	lsls	r3, r7
 800c200:	fa06 f207 	lsl.w	r2, r6, r7
 800c204:	ea21 0303 	bic.w	r3, r1, r3
 800c208:	4313      	orrs	r3, r2
 800c20a:	4621      	mov	r1, r4
 800c20c:	2201      	movs	r2, #1
 800c20e:	a803      	add	r0, sp, #12
 800c210:	9303      	str	r3, [sp, #12]
 800c212:	f7fb ff6d 	bl	80080f0 <acc_utils_uint32_to_transfer_buffer>
 800c216:	b005      	add	sp, #20
 800c218:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c21c:	200004c0 	.word	0x200004c0
 800c220:	0801048c 	.word	0x0801048c
 800c224:	08010480 	.word	0x08010480

0800c228 <acc_confprogram_modify_runif_sensor>:
 800c228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c22c:	4614      	mov	r4, r2
 800c22e:	b082      	sub	sp, #8
 800c230:	f851 5024 	ldr.w	r5, [r1, r4, lsl #2]
 800c234:	f89d 2020 	ldrb.w	r2, [sp, #32]
 800c238:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 800c23c:	f025 050f 	bic.w	r5, r5, #15
 800c240:	4606      	mov	r6, r0
 800c242:	b1b2      	cbz	r2, 800c272 <acc_confprogram_modify_runif_sensor+0x4a>
 800c244:	461f      	mov	r7, r3
 800c246:	f7f9 fa73 	bl	8005730 <acc_rss_integration_log_level>
 800c24a:	2803      	cmp	r0, #3
 800c24c:	ea45 0507 	orr.w	r5, r5, r7
 800c250:	d907      	bls.n	800c262 <acc_confprogram_modify_runif_sensor+0x3a>
 800c252:	4b0e      	ldr	r3, [pc, #56]	; (800c28c <acc_confprogram_modify_runif_sensor+0x64>)
 800c254:	9700      	str	r7, [sp, #0]
 800c256:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 800c258:	4a0d      	ldr	r2, [pc, #52]	; (800c290 <acc_confprogram_modify_runif_sensor+0x68>)
 800c25a:	490e      	ldr	r1, [pc, #56]	; (800c294 <acc_confprogram_modify_runif_sensor+0x6c>)
 800c25c:	4623      	mov	r3, r4
 800c25e:	2004      	movs	r0, #4
 800c260:	47b8      	blx	r7
 800c262:	462a      	mov	r2, r5
 800c264:	4621      	mov	r1, r4
 800c266:	4630      	mov	r0, r6
 800c268:	4643      	mov	r3, r8
 800c26a:	b002      	add	sp, #8
 800c26c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c270:	4718      	bx	r3
 800c272:	f7f9 fa5d 	bl	8005730 <acc_rss_integration_log_level>
 800c276:	2803      	cmp	r0, #3
 800c278:	d9f3      	bls.n	800c262 <acc_confprogram_modify_runif_sensor+0x3a>
 800c27a:	4b04      	ldr	r3, [pc, #16]	; (800c28c <acc_confprogram_modify_runif_sensor+0x64>)
 800c27c:	4a06      	ldr	r2, [pc, #24]	; (800c298 <acc_confprogram_modify_runif_sensor+0x70>)
 800c27e:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 800c280:	4904      	ldr	r1, [pc, #16]	; (800c294 <acc_confprogram_modify_runif_sensor+0x6c>)
 800c282:	4623      	mov	r3, r4
 800c284:	2004      	movs	r0, #4
 800c286:	47b8      	blx	r7
 800c288:	e7eb      	b.n	800c262 <acc_confprogram_modify_runif_sensor+0x3a>
 800c28a:	bf00      	nop
 800c28c:	200004c0 	.word	0x200004c0
 800c290:	080104c4 	.word	0x080104c4
 800c294:	08010480 	.word	0x08010480
 800c298:	080104fc 	.word	0x080104fc

0800c29c <acc_confprogram_modify_runif>:
 800c29c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2a0:	eb00 0542 	add.w	r5, r0, r2, lsl #1
 800c2a4:	b084      	sub	sp, #16
 800c2a6:	4616      	mov	r6, r2
 800c2a8:	460f      	mov	r7, r1
 800c2aa:	4628      	mov	r0, r5
 800c2ac:	2201      	movs	r2, #1
 800c2ae:	a902      	add	r1, sp, #8
 800c2b0:	4698      	mov	r8, r3
 800c2b2:	f7fb ff2b 	bl	800810c <acc_utils_transfer_buffer_to_uint32>
 800c2b6:	9c02      	ldr	r4, [sp, #8]
 800c2b8:	f024 040f 	bic.w	r4, r4, #15
 800c2bc:	9403      	str	r4, [sp, #12]
 800c2be:	f1b8 0f00 	cmp.w	r8, #0
 800c2c2:	d015      	beq.n	800c2f0 <acc_confprogram_modify_runif+0x54>
 800c2c4:	433c      	orrs	r4, r7
 800c2c6:	9403      	str	r4, [sp, #12]
 800c2c8:	f7f9 fa32 	bl	8005730 <acc_rss_integration_log_level>
 800c2cc:	2803      	cmp	r0, #3
 800c2ce:	d907      	bls.n	800c2e0 <acc_confprogram_modify_runif+0x44>
 800c2d0:	4a0e      	ldr	r2, [pc, #56]	; (800c30c <acc_confprogram_modify_runif+0x70>)
 800c2d2:	9700      	str	r7, [sp, #0]
 800c2d4:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800c2d6:	490e      	ldr	r1, [pc, #56]	; (800c310 <acc_confprogram_modify_runif+0x74>)
 800c2d8:	4a0e      	ldr	r2, [pc, #56]	; (800c314 <acc_confprogram_modify_runif+0x78>)
 800c2da:	0873      	lsrs	r3, r6, #1
 800c2dc:	2004      	movs	r0, #4
 800c2de:	47a0      	blx	r4
 800c2e0:	4629      	mov	r1, r5
 800c2e2:	2201      	movs	r2, #1
 800c2e4:	a803      	add	r0, sp, #12
 800c2e6:	f7fb ff03 	bl	80080f0 <acc_utils_uint32_to_transfer_buffer>
 800c2ea:	b004      	add	sp, #16
 800c2ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2f0:	f7f9 fa1e 	bl	8005730 <acc_rss_integration_log_level>
 800c2f4:	2803      	cmp	r0, #3
 800c2f6:	d9f3      	bls.n	800c2e0 <acc_confprogram_modify_runif+0x44>
 800c2f8:	4a04      	ldr	r2, [pc, #16]	; (800c30c <acc_confprogram_modify_runif+0x70>)
 800c2fa:	9700      	str	r7, [sp, #0]
 800c2fc:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800c2fe:	4904      	ldr	r1, [pc, #16]	; (800c310 <acc_confprogram_modify_runif+0x74>)
 800c300:	4a05      	ldr	r2, [pc, #20]	; (800c318 <acc_confprogram_modify_runif+0x7c>)
 800c302:	0873      	lsrs	r3, r6, #1
 800c304:	2004      	movs	r0, #4
 800c306:	47a0      	blx	r4
 800c308:	e7ea      	b.n	800c2e0 <acc_confprogram_modify_runif+0x44>
 800c30a:	bf00      	nop
 800c30c:	200004c0 	.word	0x200004c0
 800c310:	08010480 	.word	0x08010480
 800c314:	080104c4 	.word	0x080104c4
 800c318:	0801052c 	.word	0x0801052c

0800c31c <acc_confprogram_patch_offset>:
 800c31c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c320:	b083      	sub	sp, #12
 800c322:	4680      	mov	r8, r0
 800c324:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 800c328:	460d      	mov	r5, r1
 800c32a:	4617      	mov	r7, r2
 800c32c:	461e      	mov	r6, r3
 800c32e:	f7f9 f9ff 	bl	8005730 <acc_rss_integration_log_level>
 800c332:	2803      	cmp	r0, #3
 800c334:	d909      	bls.n	800c34a <acc_confprogram_patch_offset+0x2e>
 800c336:	4b2f      	ldr	r3, [pc, #188]	; (800c3f4 <acc_confprogram_patch_offset+0xd8>)
 800c338:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c33a:	9200      	str	r2, [sp, #0]
 800c33c:	f8d3 9034 	ldr.w	r9, [r3, #52]	; 0x34
 800c340:	4a2d      	ldr	r2, [pc, #180]	; (800c3f8 <acc_confprogram_patch_offset+0xdc>)
 800c342:	492e      	ldr	r1, [pc, #184]	; (800c3fc <acc_confprogram_patch_offset+0xe0>)
 800c344:	4623      	mov	r3, r4
 800c346:	2004      	movs	r0, #4
 800c348:	47c8      	blx	r9
 800c34a:	eb06 06c4 	add.w	r6, r6, r4, lsl #3
 800c34e:	8871      	ldrh	r1, [r6, #2]
 800c350:	b399      	cbz	r1, 800c3ba <acc_confprogram_patch_offset+0x9e>
 800c352:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 800c3f4 <acc_confprogram_patch_offset+0xd8>
 800c356:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 800c400 <acc_confprogram_patch_offset+0xe4>
 800c35a:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 800c3fc <acc_confprogram_patch_offset+0xe0>
 800c35e:	2400      	movs	r4, #0
 800c360:	e00b      	b.n	800c37a <acc_confprogram_patch_offset+0x5e>
 800c362:	2b00      	cmp	r3, #0
 800c364:	d039      	beq.n	800c3da <acc_confprogram_patch_offset+0xbe>
 800c366:	4649      	mov	r1, r9
 800c368:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 800c36c:	4652      	mov	r2, sl
 800c36e:	2000      	movs	r0, #0
 800c370:	4798      	blx	r3
 800c372:	8871      	ldrh	r1, [r6, #2]
 800c374:	3401      	adds	r4, #1
 800c376:	42a1      	cmp	r1, r4
 800c378:	d91f      	bls.n	800c3ba <acc_confprogram_patch_offset+0x9e>
 800c37a:	6873      	ldr	r3, [r6, #4]
 800c37c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800c380:	0042      	lsls	r2, r0, #1
 800c382:	b292      	uxth	r2, r2
 800c384:	42aa      	cmp	r2, r5
 800c386:	eb05 0c07 	add.w	ip, r5, r7
 800c38a:	f3c0 7301 	ubfx	r3, r0, #28, #2
 800c38e:	d3f1      	bcc.n	800c374 <acc_confprogram_patch_offset+0x58>
 800c390:	4562      	cmp	r2, ip
 800c392:	daef      	bge.n	800c374 <acc_confprogram_patch_offset+0x58>
 800c394:	2b01      	cmp	r3, #1
 800c396:	d013      	beq.n	800c3c0 <acc_confprogram_patch_offset+0xa4>
 800c398:	2b02      	cmp	r3, #2
 800c39a:	d1e2      	bne.n	800c362 <acc_confprogram_patch_offset+0x46>
 800c39c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c39e:	1b52      	subs	r2, r2, r5
 800c3a0:	fab3 f383 	clz	r3, r3
 800c3a4:	f3c0 4103 	ubfx	r1, r0, #16, #4
 800c3a8:	b292      	uxth	r2, r2
 800c3aa:	095b      	lsrs	r3, r3, #5
 800c3ac:	4640      	mov	r0, r8
 800c3ae:	f7ff ff75 	bl	800c29c <acc_confprogram_modify_runif>
 800c3b2:	8871      	ldrh	r1, [r6, #2]
 800c3b4:	3401      	adds	r4, #1
 800c3b6:	42a1      	cmp	r1, r4
 800c3b8:	d8df      	bhi.n	800c37a <acc_confprogram_patch_offset+0x5e>
 800c3ba:	b003      	add	sp, #12
 800c3bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c3c2:	1b52      	subs	r2, r2, r5
 800c3c4:	3b00      	subs	r3, #0
 800c3c6:	f3c0 4103 	ubfx	r1, r0, #16, #4
 800c3ca:	b292      	uxth	r2, r2
 800c3cc:	bf18      	it	ne
 800c3ce:	2301      	movne	r3, #1
 800c3d0:	4640      	mov	r0, r8
 800c3d2:	f7ff ff63 	bl	800c29c <acc_confprogram_modify_runif>
 800c3d6:	8871      	ldrh	r1, [r6, #2]
 800c3d8:	e7cc      	b.n	800c374 <acc_confprogram_patch_offset+0x58>
 800c3da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c3dc:	9300      	str	r3, [sp, #0]
 800c3de:	1b52      	subs	r2, r2, r5
 800c3e0:	b291      	uxth	r1, r2
 800c3e2:	f3c0 5344 	ubfx	r3, r0, #21, #5
 800c3e6:	f3c0 4204 	ubfx	r2, r0, #16, #5
 800c3ea:	4640      	mov	r0, r8
 800c3ec:	f7ff fee0 	bl	800c1b0 <acc_confprogram_modify_bin>
 800c3f0:	8871      	ldrh	r1, [r6, #2]
 800c3f2:	e7bf      	b.n	800c374 <acc_confprogram_patch_offset+0x58>
 800c3f4:	200004c0 	.word	0x200004c0
 800c3f8:	08010588 	.word	0x08010588
 800c3fc:	08010480 	.word	0x08010480
 800c400:	08010560 	.word	0x08010560

0800c404 <acc_confprogram_live_patch>:
 800c404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c408:	b083      	sub	sp, #12
 800c40a:	4606      	mov	r6, r0
 800c40c:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 800c410:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 800c414:	468b      	mov	fp, r1
 800c416:	4617      	mov	r7, r2
 800c418:	461d      	mov	r5, r3
 800c41a:	f7f9 f989 	bl	8005730 <acc_rss_integration_log_level>
 800c41e:	2803      	cmp	r0, #3
 800c420:	d909      	bls.n	800c436 <acc_confprogram_live_patch+0x32>
 800c422:	4b2f      	ldr	r3, [pc, #188]	; (800c4e0 <acc_confprogram_live_patch+0xdc>)
 800c424:	f8cd a000 	str.w	sl, [sp]
 800c428:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 800c42c:	4a2d      	ldr	r2, [pc, #180]	; (800c4e4 <acc_confprogram_live_patch+0xe0>)
 800c42e:	492e      	ldr	r1, [pc, #184]	; (800c4e8 <acc_confprogram_live_patch+0xe4>)
 800c430:	4623      	mov	r3, r4
 800c432:	2004      	movs	r0, #4
 800c434:	47c0      	blx	r8
 800c436:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800c43a:	886b      	ldrh	r3, [r5, #2]
 800c43c:	b373      	cbz	r3, 800c49c <acc_confprogram_live_patch+0x98>
 800c43e:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 800c4ec <acc_confprogram_live_patch+0xe8>
 800c442:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 800c4e8 <acc_confprogram_live_patch+0xe4>
 800c446:	2400      	movs	r4, #0
 800c448:	e008      	b.n	800c45c <acc_confprogram_live_patch+0x58>
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d03a      	beq.n	800c4c4 <acc_confprogram_live_patch+0xc0>
 800c44e:	4b24      	ldr	r3, [pc, #144]	; (800c4e0 <acc_confprogram_live_patch+0xdc>)
 800c450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c452:	4798      	blx	r3
 800c454:	886b      	ldrh	r3, [r5, #2]
 800c456:	3401      	adds	r4, #1
 800c458:	42a3      	cmp	r3, r4
 800c45a:	d91f      	bls.n	800c49c <acc_confprogram_live_patch+0x98>
 800c45c:	686b      	ldr	r3, [r5, #4]
 800c45e:	f853 c024 	ldr.w	ip, [r3, r4, lsl #2]
 800c462:	f3cc 7301 	ubfx	r3, ip, #28, #2
 800c466:	2b01      	cmp	r3, #1
 800c468:	d01b      	beq.n	800c4a2 <acc_confprogram_live_patch+0x9e>
 800c46a:	2b02      	cmp	r3, #2
 800c46c:	464a      	mov	r2, r9
 800c46e:	4641      	mov	r1, r8
 800c470:	f04f 0000 	mov.w	r0, #0
 800c474:	d1e9      	bne.n	800c44a <acc_confprogram_live_patch+0x46>
 800c476:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c478:	faba f38a 	clz	r3, sl
 800c47c:	095b      	lsrs	r3, r3, #5
 800c47e:	eb07 020c 	add.w	r2, r7, ip
 800c482:	e9cd 3100 	strd	r3, r1, [sp]
 800c486:	b292      	uxth	r2, r2
 800c488:	f3cc 4303 	ubfx	r3, ip, #16, #4
 800c48c:	4659      	mov	r1, fp
 800c48e:	4630      	mov	r0, r6
 800c490:	f7ff feca 	bl	800c228 <acc_confprogram_modify_runif_sensor>
 800c494:	886b      	ldrh	r3, [r5, #2]
 800c496:	3401      	adds	r4, #1
 800c498:	42a3      	cmp	r3, r4
 800c49a:	d8df      	bhi.n	800c45c <acc_confprogram_live_patch+0x58>
 800c49c:	b003      	add	sp, #12
 800c49e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4a2:	f1ba 0100 	subs.w	r1, sl, #0
 800c4a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c4a8:	9301      	str	r3, [sp, #4]
 800c4aa:	bf18      	it	ne
 800c4ac:	2101      	movne	r1, #1
 800c4ae:	eb07 020c 	add.w	r2, r7, ip
 800c4b2:	9100      	str	r1, [sp, #0]
 800c4b4:	b292      	uxth	r2, r2
 800c4b6:	f3cc 4303 	ubfx	r3, ip, #16, #4
 800c4ba:	4659      	mov	r1, fp
 800c4bc:	4630      	mov	r0, r6
 800c4be:	f7ff feb3 	bl	800c228 <acc_confprogram_modify_runif_sensor>
 800c4c2:	e7c7      	b.n	800c454 <acc_confprogram_live_patch+0x50>
 800c4c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c4c6:	eb07 010c 	add.w	r1, r7, ip
 800c4ca:	e9cd a300 	strd	sl, r3, [sp]
 800c4ce:	b289      	uxth	r1, r1
 800c4d0:	f3cc 5344 	ubfx	r3, ip, #21, #5
 800c4d4:	f3cc 4204 	ubfx	r2, ip, #16, #5
 800c4d8:	4630      	mov	r0, r6
 800c4da:	f7ff fe35 	bl	800c148 <acc_confprogram_modify_bin_sensor>
 800c4de:	e7b9      	b.n	800c454 <acc_confprogram_live_patch+0x50>
 800c4e0:	200004c0 	.word	0x200004c0
 800c4e4:	08010584 	.word	0x08010584
 800c4e8:	08010480 	.word	0x08010480
 800c4ec:	080105a8 	.word	0x080105a8

0800c4f0 <acc_confprogram_get_default_value>:
 800c4f0:	f830 0031 	ldrh.w	r0, [r0, r1, lsl #3]
 800c4f4:	4770      	bx	lr
 800c4f6:	bf00      	nop

0800c4f8 <acc_confprogram_copy>:
 800c4f8:	b152      	cbz	r2, 800c510 <acc_confprogram_copy+0x18>
 800c4fa:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800c4fe:	3804      	subs	r0, #4
 800c500:	f850 3f04 	ldr.w	r3, [r0, #4]!
 800c504:	804b      	strh	r3, [r1, #2]
 800c506:	0c1b      	lsrs	r3, r3, #16
 800c508:	800b      	strh	r3, [r1, #0]
 800c50a:	3104      	adds	r1, #4
 800c50c:	4291      	cmp	r1, r2
 800c50e:	d1f7      	bne.n	800c500 <acc_confprogram_copy+0x8>
 800c510:	4770      	bx	lr
 800c512:	bf00      	nop

0800c514 <acc_diagnostic_log_set_scope>:
 800c514:	4b02      	ldr	r3, [pc, #8]	; (800c520 <acc_diagnostic_log_set_scope+0xc>)
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	b10b      	cbz	r3, 800c51e <acc_diagnostic_log_set_scope+0xa>
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	4718      	bx	r3
 800c51e:	4770      	bx	lr
 800c520:	20000370 	.word	0x20000370

0800c524 <acc_diagnostic_log_declare_parameter>:
 800c524:	4b02      	ldr	r3, [pc, #8]	; (800c530 <acc_diagnostic_log_declare_parameter+0xc>)
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	b10b      	cbz	r3, 800c52e <acc_diagnostic_log_declare_parameter+0xa>
 800c52a:	685b      	ldr	r3, [r3, #4]
 800c52c:	4718      	bx	r3
 800c52e:	4770      	bx	lr
 800c530:	20000370 	.word	0x20000370

0800c534 <acc_diagnostic_log_set_parameter>:
 800c534:	4b02      	ldr	r3, [pc, #8]	; (800c540 <acc_diagnostic_log_set_parameter+0xc>)
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	b10b      	cbz	r3, 800c53e <acc_diagnostic_log_set_parameter+0xa>
 800c53a:	689b      	ldr	r3, [r3, #8]
 800c53c:	4718      	bx	r3
 800c53e:	4770      	bx	lr
 800c540:	20000370 	.word	0x20000370

0800c544 <acc_diagnostic_log_array>:
 800c544:	4b02      	ldr	r3, [pc, #8]	; (800c550 <acc_diagnostic_log_array+0xc>)
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	b10b      	cbz	r3, 800c54e <acc_diagnostic_log_array+0xa>
 800c54a:	68db      	ldr	r3, [r3, #12]
 800c54c:	4718      	bx	r3
 800c54e:	4770      	bx	lr
 800c550:	20000370 	.word	0x20000370

0800c554 <acc_diagnostic_log_scalar>:
 800c554:	4b02      	ldr	r3, [pc, #8]	; (800c560 <acc_diagnostic_log_scalar+0xc>)
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	b10b      	cbz	r3, 800c55e <acc_diagnostic_log_scalar+0xa>
 800c55a:	695b      	ldr	r3, [r3, #20]
 800c55c:	4718      	bx	r3
 800c55e:	4770      	bx	lr
 800c560:	20000370 	.word	0x20000370

0800c564 <acc_diagnostic_log_data_u16>:
 800c564:	4b02      	ldr	r3, [pc, #8]	; (800c570 <acc_diagnostic_log_data_u16+0xc>)
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	b10b      	cbz	r3, 800c56e <acc_diagnostic_log_data_u16+0xa>
 800c56a:	6a1b      	ldr	r3, [r3, #32]
 800c56c:	4718      	bx	r3
 800c56e:	4770      	bx	lr
 800c570:	20000370 	.word	0x20000370

0800c574 <acc_diagnostic_log_data_i16>:
 800c574:	4b02      	ldr	r3, [pc, #8]	; (800c580 <acc_diagnostic_log_data_i16+0xc>)
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	b10b      	cbz	r3, 800c57e <acc_diagnostic_log_data_i16+0xa>
 800c57a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c57c:	4718      	bx	r3
 800c57e:	4770      	bx	lr
 800c580:	20000370 	.word	0x20000370

0800c584 <acc_diagnostic_log_data_u8>:
 800c584:	4b02      	ldr	r3, [pc, #8]	; (800c590 <acc_diagnostic_log_data_u8+0xc>)
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	b10b      	cbz	r3, 800c58e <acc_diagnostic_log_data_u8+0xa>
 800c58a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c58c:	4718      	bx	r3
 800c58e:	4770      	bx	lr
 800c590:	20000370 	.word	0x20000370

0800c594 <acc_image_a111_r2c_cbank_and_vana_calibration_get>:
 800c594:	4800      	ldr	r0, [pc, #0]	; (800c598 <acc_image_a111_r2c_cbank_and_vana_calibration_get+0x4>)
 800c596:	4770      	bx	lr
 800c598:	08010688 	.word	0x08010688

0800c59c <acc_image_a111_r2c_cbank_and_vana_calibration_param_table_get>:
 800c59c:	4800      	ldr	r0, [pc, #0]	; (800c5a0 <acc_image_a111_r2c_cbank_and_vana_calibration_param_table_get+0x4>)
 800c59e:	4770      	bx	lr
 800c5a0:	08010ce0 	.word	0x08010ce0

0800c5a4 <acc_image_a111_r2c_rx_fine_dip_calibration_get>:
 800c5a4:	4800      	ldr	r0, [pc, #0]	; (800c5a8 <acc_image_a111_r2c_rx_fine_dip_calibration_get+0x4>)
 800c5a6:	4770      	bx	lr
 800c5a8:	08011070 	.word	0x08011070

0800c5ac <acc_image_a111_r2c_rx_fine_dip_calibration_param_table_get>:
 800c5ac:	4800      	ldr	r0, [pc, #0]	; (800c5b0 <acc_image_a111_r2c_rx_fine_dip_calibration_param_table_get+0x4>)
 800c5ae:	4770      	bx	lr
 800c5b0:	08011dcc 	.word	0x08011dcc

0800c5b4 <acc_image_a111_r2c_sweep_get>:
 800c5b4:	4800      	ldr	r0, [pc, #0]	; (800c5b8 <acc_image_a111_r2c_sweep_get+0x4>)
 800c5b6:	4770      	bx	lr
 800c5b8:	08012350 	.word	0x08012350

0800c5bc <acc_image_a111_r2c_sweep_param_table_get>:
 800c5bc:	4800      	ldr	r0, [pc, #0]	; (800c5c0 <acc_image_a111_r2c_sweep_param_table_get+0x4>)
 800c5be:	4770      	bx	lr
 800c5c0:	08013174 	.word	0x08013174

0800c5c4 <quarter_pi_cos_sin_f32>:
 800c5c4:	eddf 7a26 	vldr	s15, [pc, #152]	; 800c660 <quarter_pi_cos_sin_f32+0x9c>
 800c5c8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800c5cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5d0:	d442      	bmi.n	800c658 <quarter_pi_cos_sin_f32+0x94>
 800c5d2:	b310      	cbz	r0, 800c61a <quarter_pi_cos_sin_f32+0x56>
 800c5d4:	ee20 0a00 	vmul.f32	s0, s0, s0
 800c5d8:	eddf 7a22 	vldr	s15, [pc, #136]	; 800c664 <quarter_pi_cos_sin_f32+0xa0>
 800c5dc:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800c668 <quarter_pi_cos_sin_f32+0xa4>
 800c5e0:	eddf 5a22 	vldr	s11, [pc, #136]	; 800c66c <quarter_pi_cos_sin_f32+0xa8>
 800c5e4:	ed9f 6a22 	vldr	s12, [pc, #136]	; 800c670 <quarter_pi_cos_sin_f32+0xac>
 800c5e8:	ee60 7a27 	vmul.f32	s15, s0, s15
 800c5ec:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800c5f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c5f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c5f8:	ee60 7a27 	vmul.f32	s15, s0, s15
 800c5fc:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800c600:	ee60 7a27 	vmul.f32	s15, s0, s15
 800c604:	ee77 7a86 	vadd.f32	s15, s15, s12
 800c608:	ee60 7a27 	vmul.f32	s15, s0, s15
 800c60c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c610:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c614:	ee30 0a07 	vadd.f32	s0, s0, s14
 800c618:	4770      	bx	lr
 800c61a:	ee60 7a00 	vmul.f32	s15, s0, s0
 800c61e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800c664 <quarter_pi_cos_sin_f32+0xa0>
 800c622:	ed9f 5a14 	vldr	s10, [pc, #80]	; 800c674 <quarter_pi_cos_sin_f32+0xb0>
 800c626:	eddf 5a14 	vldr	s11, [pc, #80]	; 800c678 <quarter_pi_cos_sin_f32+0xb4>
 800c62a:	ed9f 6a14 	vldr	s12, [pc, #80]	; 800c67c <quarter_pi_cos_sin_f32+0xb8>
 800c62e:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c632:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c636:	ee37 7a45 	vsub.f32	s14, s14, s10
 800c63a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c63e:	ee37 7a25 	vadd.f32	s14, s14, s11
 800c642:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c646:	ee37 7a46 	vsub.f32	s14, s14, s12
 800c64a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c64e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c652:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c656:	4770      	bx	lr
 800c658:	ed9f 0a09 	vldr	s0, [pc, #36]	; 800c680 <quarter_pi_cos_sin_f32+0xbc>
 800c65c:	4770      	bx	lr
 800c65e:	bf00      	nop
 800c660:	bf490fdb 	.word	0xbf490fdb
 800c664:	00000000 	.word	0x00000000
 800c668:	37cd1800 	.word	0x37cd1800
 800c66c:	3ab606a0 	.word	0x3ab606a0
 800c670:	3d2aaaa6 	.word	0x3d2aaaa6
 800c674:	394c909b 	.word	0x394c909b
 800c678:	3c088366 	.word	0x3c088366
 800c67c:	3e2aaaa2 	.word	0x3e2aaaa2
 800c680:	7fc00000 	.word	0x7fc00000

0800c684 <restricted_cos_sin_f32>:
 800c684:	eddf 7a09 	vldr	s15, [pc, #36]	; 800c6ac <restricted_cos_sin_f32+0x28>
 800c688:	eddf 6a09 	vldr	s13, [pc, #36]	; 800c6b0 <restricted_cos_sin_f32+0x2c>
 800c68c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800c690:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c694:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800c698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c69c:	bf5c      	itt	pl
 800c69e:	f080 0001 	eorpl.w	r0, r0, #1
 800c6a2:	eeb0 0a67 	vmovpl.f32	s0, s15
 800c6a6:	f7ff bf8d 	b.w	800c5c4 <quarter_pi_cos_sin_f32>
 800c6aa:	bf00      	nop
 800c6ac:	3fc90fdb 	.word	0x3fc90fdb
 800c6b0:	333bbd2e 	.word	0x333bbd2e

0800c6b4 <acc_alg_basic_math_restricted_tan_f32>:
 800c6b4:	b508      	push	{r3, lr}
 800c6b6:	2000      	movs	r0, #0
 800c6b8:	eeb0 4a40 	vmov.f32	s8, s0
 800c6bc:	f7ff ffe2 	bl	800c684 <restricted_cos_sin_f32>
 800c6c0:	2001      	movs	r0, #1
 800c6c2:	eef0 4a40 	vmov.f32	s9, s0
 800c6c6:	eeb0 0a44 	vmov.f32	s0, s8
 800c6ca:	f7ff ffdb 	bl	800c684 <restricted_cos_sin_f32>
 800c6ce:	ee84 0a80 	vdiv.f32	s0, s9, s0
 800c6d2:	bd08      	pop	{r3, pc}

0800c6d4 <acc_alg_basic_math_restricted_atan_f32>:
 800c6d4:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800c6d8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800c6dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6e0:	d434      	bmi.n	800c74c <acc_alg_basic_math_restricted_atan_f32+0x78>
 800c6e2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c6e6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800c6ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6ee:	dd1b      	ble.n	800c728 <acc_alg_basic_math_restricted_atan_f32+0x54>
 800c6f0:	ee87 6a80 	vdiv.f32	s12, s15, s0
 800c6f4:	4b17      	ldr	r3, [pc, #92]	; (800c754 <acc_alg_basic_math_restricted_atan_f32+0x80>)
 800c6f6:	f1a3 0224 	sub.w	r2, r3, #36	; 0x24
 800c6fa:	eddf 7a17 	vldr	s15, [pc, #92]	; 800c758 <acc_alg_basic_math_restricted_atan_f32+0x84>
 800c6fe:	ee66 6a06 	vmul.f32	s13, s12, s12
 800c702:	ed33 7a01 	vldmdb	r3!, {s14}
 800c706:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c70a:	429a      	cmp	r2, r3
 800c70c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c710:	d1f7      	bne.n	800c702 <acc_alg_basic_math_restricted_atan_f32+0x2e>
 800c712:	ee66 7a27 	vmul.f32	s15, s12, s15
 800c716:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800c75c <acc_alg_basic_math_restricted_atan_f32+0x88>
 800c71a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800c760 <acc_alg_basic_math_restricted_atan_f32+0x8c>
 800c71e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c722:	ee30 0a47 	vsub.f32	s0, s0, s14
 800c726:	4770      	bx	lr
 800c728:	4b0a      	ldr	r3, [pc, #40]	; (800c754 <acc_alg_basic_math_restricted_atan_f32+0x80>)
 800c72a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800c758 <acc_alg_basic_math_restricted_atan_f32+0x84>
 800c72e:	ee60 6a00 	vmul.f32	s13, s0, s0
 800c732:	f1a3 0224 	sub.w	r2, r3, #36	; 0x24
 800c736:	ed33 7a01 	vldmdb	r3!, {s14}
 800c73a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c73e:	429a      	cmp	r2, r3
 800c740:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c744:	d1f7      	bne.n	800c736 <acc_alg_basic_math_restricted_atan_f32+0x62>
 800c746:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c74a:	4770      	bx	lr
 800c74c:	ed9f 0a05 	vldr	s0, [pc, #20]	; 800c764 <acc_alg_basic_math_restricted_atan_f32+0x90>
 800c750:	4770      	bx	lr
 800c752:	bf00      	nop
 800c754:	08013698 	.word	0x08013698
 800c758:	00000000 	.word	0x00000000
 800c75c:	3fc90fdb 	.word	0x3fc90fdb
 800c760:	333bbd2e 	.word	0x333bbd2e
 800c764:	7fc00000 	.word	0x7fc00000

0800c768 <acc_alg_basic_math_q3_12_complex_mul>:
 800c768:	b302      	cbz	r2, 800c7ac <acc_alg_basic_math_q3_12_complex_mul+0x44>
 800c76a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c76c:	2300      	movs	r3, #0
 800c76e:	1c87      	adds	r7, r0, #2
 800c770:	f101 0c02 	add.w	ip, r1, #2
 800c774:	f930 e023 	ldrsh.w	lr, [r0, r3, lsl #2]
 800c778:	f831 4023 	ldrh.w	r4, [r1, r3, lsl #2]
 800c77c:	f937 5023 	ldrsh.w	r5, [r7, r3, lsl #2]
 800c780:	f93c 6023 	ldrsh.w	r6, [ip, r3, lsl #2]
 800c784:	fb14 f40e 	smulbb	r4, r4, lr
 800c788:	fb05 4416 	mls	r4, r5, r6, r4
 800c78c:	1324      	asrs	r4, r4, #12
 800c78e:	f820 4023 	strh.w	r4, [r0, r3, lsl #2]
 800c792:	f831 4023 	ldrh.w	r4, [r1, r3, lsl #2]
 800c796:	fb06 f60e 	mul.w	r6, r6, lr
 800c79a:	fb15 6504 	smlabb	r5, r5, r4, r6
 800c79e:	132d      	asrs	r5, r5, #12
 800c7a0:	f827 5023 	strh.w	r5, [r7, r3, lsl #2]
 800c7a4:	3301      	adds	r3, #1
 800c7a6:	429a      	cmp	r2, r3
 800c7a8:	d1e4      	bne.n	800c774 <acc_alg_basic_math_q3_12_complex_mul+0xc>
 800c7aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c7ac:	4770      	bx	lr
 800c7ae:	bf00      	nop

0800c7b0 <acc_alg_basic_math_q3_12_complex_scalar_abs>:
 800c7b0:	b203      	sxth	r3, r0
 800c7b2:	1400      	asrs	r0, r0, #16
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	ea80 72e0 	eor.w	r2, r0, r0, asr #31
 800c7ba:	bfb8      	it	lt
 800c7bc:	425b      	neglt	r3, r3
 800c7be:	eba2 72e0 	sub.w	r2, r2, r0, asr #31
 800c7c2:	b218      	sxth	r0, r3
 800c7c4:	b213      	sxth	r3, r2
 800c7c6:	4298      	cmp	r0, r3
 800c7c8:	b082      	sub	sp, #8
 800c7ca:	da02      	bge.n	800c7d2 <acc_alg_basic_math_q3_12_complex_scalar_abs+0x22>
 800c7cc:	4602      	mov	r2, r0
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	4613      	mov	r3, r2
 800c7d2:	f240 62a1 	movw	r2, #1697	; 0x6a1
 800c7d6:	fb10 f202 	smulbb	r2, r0, r2
 800c7da:	2a00      	cmp	r2, #0
 800c7dc:	bfb8      	it	lt
 800c7de:	f602 72ff 	addwlt	r2, r2, #4095	; 0xfff
 800c7e2:	ebb3 3f22 	cmp.w	r3, r2, asr #12
 800c7e6:	da0b      	bge.n	800c800 <acc_alg_basic_math_q3_12_complex_scalar_abs+0x50>
 800c7e8:	f240 3227 	movw	r2, #807	; 0x327
 800c7ec:	fb13 f302 	smulbb	r3, r3, r2
 800c7f0:	f640 72d7 	movw	r2, #4055	; 0xfd7
 800c7f4:	fb10 3002 	smlabb	r0, r0, r2, r3
 800c7f8:	f340 300f 	sbfx	r0, r0, #12, #16
 800c7fc:	b002      	add	sp, #8
 800c7fe:	4770      	bx	lr
 800c800:	f640 02fa 	movw	r2, #2298	; 0x8fa
 800c804:	fb13 f302 	smulbb	r3, r3, r2
 800c808:	f640 5271 	movw	r2, #3441	; 0xd71
 800c80c:	fb10 3002 	smlabb	r0, r0, r2, r3
 800c810:	f340 300f 	sbfx	r0, r0, #12, #16
 800c814:	b002      	add	sp, #8
 800c816:	4770      	bx	lr

0800c818 <acc_alg_basic_math_q3_12_complex_conj_normalize>:
 800c818:	2900      	cmp	r1, #0
 800c81a:	d04f      	beq.n	800c8bc <acc_alg_basic_math_q3_12_complex_conj_normalize+0xa4>
 800c81c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c820:	f240 6ca1 	movw	ip, #1697	; 0x6a1
 800c824:	2400      	movs	r4, #0
 800c826:	1c87      	adds	r7, r0, #2
 800c828:	f640 0afa 	movw	sl, #2298	; 0x8fa
 800c82c:	f640 5971 	movw	r9, #3441	; 0xd71
 800c830:	f240 3827 	movw	r8, #807	; 0x327
 800c834:	f640 7ed7 	movw	lr, #4055	; 0xfd7
 800c838:	e006      	b.n	800c848 <acc_alg_basic_math_q3_12_complex_conj_normalize+0x30>
 800c83a:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
 800c83e:	f827 3024 	strh.w	r3, [r7, r4, lsl #2]
 800c842:	3401      	adds	r4, #1
 800c844:	42a1      	cmp	r1, r4
 800c846:	d037      	beq.n	800c8b8 <acc_alg_basic_math_q3_12_complex_conj_normalize+0xa0>
 800c848:	f930 6024 	ldrsh.w	r6, [r0, r4, lsl #2]
 800c84c:	f937 5024 	ldrsh.w	r5, [r7, r4, lsl #2]
 800c850:	ea86 73e6 	eor.w	r3, r6, r6, asr #31
 800c854:	ea85 72e5 	eor.w	r2, r5, r5, asr #31
 800c858:	eba3 73e6 	sub.w	r3, r3, r6, asr #31
 800c85c:	eba2 72e5 	sub.w	r2, r2, r5, asr #31
 800c860:	b21b      	sxth	r3, r3
 800c862:	b212      	sxth	r2, r2
 800c864:	4293      	cmp	r3, r2
 800c866:	da02      	bge.n	800c86e <acc_alg_basic_math_q3_12_complex_conj_normalize+0x56>
 800c868:	469b      	mov	fp, r3
 800c86a:	4613      	mov	r3, r2
 800c86c:	465a      	mov	r2, fp
 800c86e:	fb13 fb0c 	smulbb	fp, r3, ip
 800c872:	f1bb 0f00 	cmp.w	fp, #0
 800c876:	bfb8      	it	lt
 800c878:	f60b 7bff 	addwlt	fp, fp, #4095	; 0xfff
 800c87c:	ebb2 3f2b 	cmp.w	r2, fp, asr #12
 800c880:	bfb5      	itete	lt
 800c882:	fb12 f208 	smulbblt	r2, r2, r8
 800c886:	fb12 f20a 	smulbbge	r2, r2, sl
 800c88a:	fb13 230e 	smlabblt	r3, r3, lr, r2
 800c88e:	fb13 2309 	smlabbge	r3, r3, r9, r2
 800c892:	f343 330f 	sbfx	r3, r3, #12, #16
 800c896:	2b00      	cmp	r3, #0
 800c898:	d0cf      	beq.n	800c83a <acc_alg_basic_math_q3_12_complex_conj_normalize+0x22>
 800c89a:	ebc5 5505 	rsb	r5, r5, r5, lsl #20
 800c89e:	032d      	lsls	r5, r5, #12
 800c8a0:	0336      	lsls	r6, r6, #12
 800c8a2:	fb95 f5f3 	sdiv	r5, r5, r3
 800c8a6:	fb96 f3f3 	sdiv	r3, r6, r3
 800c8aa:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
 800c8ae:	f827 5024 	strh.w	r5, [r7, r4, lsl #2]
 800c8b2:	3401      	adds	r4, #1
 800c8b4:	42a1      	cmp	r1, r4
 800c8b6:	d1c7      	bne.n	800c848 <acc_alg_basic_math_q3_12_complex_conj_normalize+0x30>
 800c8b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8bc:	4770      	bx	lr
 800c8be:	bf00      	nop

0800c8c0 <acc_alg_basic_math_q3_12_sin>:
 800c8c0:	0043      	lsls	r3, r0, #1
 800c8c2:	bf4c      	ite	mi
 800c8c4:	43c3      	mvnmi	r3, r0
 800c8c6:	4603      	movpl	r3, r0
 800c8c8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800c8cc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c8d0:	4a05      	ldr	r2, [pc, #20]	; (800c8e8 <acc_alg_basic_math_q3_12_sin+0x28>)
 800c8d2:	0d9b      	lsrs	r3, r3, #22
 800c8d4:	2800      	cmp	r0, #0
 800c8d6:	bfbd      	ittte	lt
 800c8d8:	f832 0013 	ldrhlt.w	r0, [r2, r3, lsl #1]
 800c8dc:	4240      	neglt	r0, r0
 800c8de:	b200      	sxthlt	r0, r0
 800c8e0:	f932 0013 	ldrshge.w	r0, [r2, r3, lsl #1]
 800c8e4:	4770      	bx	lr
 800c8e6:	bf00      	nop
 800c8e8:	08013698 	.word	0x08013698

0800c8ec <acc_alg_basic_math_q3_12_cos>:
 800c8ec:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 800c8f0:	0043      	lsls	r3, r0, #1
 800c8f2:	bf54      	ite	pl
 800c8f4:	43d3      	mvnpl	r3, r2
 800c8f6:	4613      	movmi	r3, r2
 800c8f8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800c8fc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c900:	2a00      	cmp	r2, #0
 800c902:	ea4f 5393 	mov.w	r3, r3, lsr #22
 800c906:	4a04      	ldr	r2, [pc, #16]	; (800c918 <acc_alg_basic_math_q3_12_cos+0x2c>)
 800c908:	bfbd      	ittte	lt
 800c90a:	f832 0013 	ldrhlt.w	r0, [r2, r3, lsl #1]
 800c90e:	4240      	neglt	r0, r0
 800c910:	b200      	sxthlt	r0, r0
 800c912:	f932 0013 	ldrshge.w	r0, [r2, r3, lsl #1]
 800c916:	4770      	bx	lr
 800c918:	08013698 	.word	0x08013698

0800c91c <malloc>:
 800c91c:	4b02      	ldr	r3, [pc, #8]	; (800c928 <malloc+0xc>)
 800c91e:	4601      	mov	r1, r0
 800c920:	6818      	ldr	r0, [r3, #0]
 800c922:	f000 b82b 	b.w	800c97c <_malloc_r>
 800c926:	bf00      	nop
 800c928:	200001e4 	.word	0x200001e4

0800c92c <free>:
 800c92c:	4b02      	ldr	r3, [pc, #8]	; (800c938 <free+0xc>)
 800c92e:	4601      	mov	r1, r0
 800c930:	6818      	ldr	r0, [r3, #0]
 800c932:	f000 bb3d 	b.w	800cfb0 <_free_r>
 800c936:	bf00      	nop
 800c938:	200001e4 	.word	0x200001e4

0800c93c <sbrk_aligned>:
 800c93c:	b570      	push	{r4, r5, r6, lr}
 800c93e:	4e0e      	ldr	r6, [pc, #56]	; (800c978 <sbrk_aligned+0x3c>)
 800c940:	460c      	mov	r4, r1
 800c942:	6831      	ldr	r1, [r6, #0]
 800c944:	4605      	mov	r5, r0
 800c946:	b911      	cbnz	r1, 800c94e <sbrk_aligned+0x12>
 800c948:	f000 fae8 	bl	800cf1c <_sbrk_r>
 800c94c:	6030      	str	r0, [r6, #0]
 800c94e:	4621      	mov	r1, r4
 800c950:	4628      	mov	r0, r5
 800c952:	f000 fae3 	bl	800cf1c <_sbrk_r>
 800c956:	1c43      	adds	r3, r0, #1
 800c958:	d00a      	beq.n	800c970 <sbrk_aligned+0x34>
 800c95a:	1cc4      	adds	r4, r0, #3
 800c95c:	f024 0403 	bic.w	r4, r4, #3
 800c960:	42a0      	cmp	r0, r4
 800c962:	d007      	beq.n	800c974 <sbrk_aligned+0x38>
 800c964:	1a21      	subs	r1, r4, r0
 800c966:	4628      	mov	r0, r5
 800c968:	f000 fad8 	bl	800cf1c <_sbrk_r>
 800c96c:	3001      	adds	r0, #1
 800c96e:	d101      	bne.n	800c974 <sbrk_aligned+0x38>
 800c970:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c974:	4620      	mov	r0, r4
 800c976:	bd70      	pop	{r4, r5, r6, pc}
 800c978:	20000378 	.word	0x20000378

0800c97c <_malloc_r>:
 800c97c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c980:	1ccd      	adds	r5, r1, #3
 800c982:	f025 0503 	bic.w	r5, r5, #3
 800c986:	3508      	adds	r5, #8
 800c988:	2d0c      	cmp	r5, #12
 800c98a:	bf38      	it	cc
 800c98c:	250c      	movcc	r5, #12
 800c98e:	2d00      	cmp	r5, #0
 800c990:	4607      	mov	r7, r0
 800c992:	db01      	blt.n	800c998 <_malloc_r+0x1c>
 800c994:	42a9      	cmp	r1, r5
 800c996:	d905      	bls.n	800c9a4 <_malloc_r+0x28>
 800c998:	230c      	movs	r3, #12
 800c99a:	603b      	str	r3, [r7, #0]
 800c99c:	2600      	movs	r6, #0
 800c99e:	4630      	mov	r0, r6
 800c9a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9a4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ca78 <_malloc_r+0xfc>
 800c9a8:	f000 f92a 	bl	800cc00 <__malloc_lock>
 800c9ac:	f8d8 3000 	ldr.w	r3, [r8]
 800c9b0:	461c      	mov	r4, r3
 800c9b2:	bb5c      	cbnz	r4, 800ca0c <_malloc_r+0x90>
 800c9b4:	4629      	mov	r1, r5
 800c9b6:	4638      	mov	r0, r7
 800c9b8:	f7ff ffc0 	bl	800c93c <sbrk_aligned>
 800c9bc:	1c43      	adds	r3, r0, #1
 800c9be:	4604      	mov	r4, r0
 800c9c0:	d155      	bne.n	800ca6e <_malloc_r+0xf2>
 800c9c2:	f8d8 4000 	ldr.w	r4, [r8]
 800c9c6:	4626      	mov	r6, r4
 800c9c8:	2e00      	cmp	r6, #0
 800c9ca:	d145      	bne.n	800ca58 <_malloc_r+0xdc>
 800c9cc:	2c00      	cmp	r4, #0
 800c9ce:	d048      	beq.n	800ca62 <_malloc_r+0xe6>
 800c9d0:	6823      	ldr	r3, [r4, #0]
 800c9d2:	4631      	mov	r1, r6
 800c9d4:	4638      	mov	r0, r7
 800c9d6:	eb04 0903 	add.w	r9, r4, r3
 800c9da:	f000 fa9f 	bl	800cf1c <_sbrk_r>
 800c9de:	4581      	cmp	r9, r0
 800c9e0:	d13f      	bne.n	800ca62 <_malloc_r+0xe6>
 800c9e2:	6821      	ldr	r1, [r4, #0]
 800c9e4:	1a6d      	subs	r5, r5, r1
 800c9e6:	4629      	mov	r1, r5
 800c9e8:	4638      	mov	r0, r7
 800c9ea:	f7ff ffa7 	bl	800c93c <sbrk_aligned>
 800c9ee:	3001      	adds	r0, #1
 800c9f0:	d037      	beq.n	800ca62 <_malloc_r+0xe6>
 800c9f2:	6823      	ldr	r3, [r4, #0]
 800c9f4:	442b      	add	r3, r5
 800c9f6:	6023      	str	r3, [r4, #0]
 800c9f8:	f8d8 3000 	ldr.w	r3, [r8]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d038      	beq.n	800ca72 <_malloc_r+0xf6>
 800ca00:	685a      	ldr	r2, [r3, #4]
 800ca02:	42a2      	cmp	r2, r4
 800ca04:	d12b      	bne.n	800ca5e <_malloc_r+0xe2>
 800ca06:	2200      	movs	r2, #0
 800ca08:	605a      	str	r2, [r3, #4]
 800ca0a:	e00f      	b.n	800ca2c <_malloc_r+0xb0>
 800ca0c:	6822      	ldr	r2, [r4, #0]
 800ca0e:	1b52      	subs	r2, r2, r5
 800ca10:	d41f      	bmi.n	800ca52 <_malloc_r+0xd6>
 800ca12:	2a0b      	cmp	r2, #11
 800ca14:	d917      	bls.n	800ca46 <_malloc_r+0xca>
 800ca16:	1961      	adds	r1, r4, r5
 800ca18:	42a3      	cmp	r3, r4
 800ca1a:	6025      	str	r5, [r4, #0]
 800ca1c:	bf18      	it	ne
 800ca1e:	6059      	strne	r1, [r3, #4]
 800ca20:	6863      	ldr	r3, [r4, #4]
 800ca22:	bf08      	it	eq
 800ca24:	f8c8 1000 	streq.w	r1, [r8]
 800ca28:	5162      	str	r2, [r4, r5]
 800ca2a:	604b      	str	r3, [r1, #4]
 800ca2c:	4638      	mov	r0, r7
 800ca2e:	f104 060b 	add.w	r6, r4, #11
 800ca32:	f000 f8eb 	bl	800cc0c <__malloc_unlock>
 800ca36:	f026 0607 	bic.w	r6, r6, #7
 800ca3a:	1d23      	adds	r3, r4, #4
 800ca3c:	1af2      	subs	r2, r6, r3
 800ca3e:	d0ae      	beq.n	800c99e <_malloc_r+0x22>
 800ca40:	1b9b      	subs	r3, r3, r6
 800ca42:	50a3      	str	r3, [r4, r2]
 800ca44:	e7ab      	b.n	800c99e <_malloc_r+0x22>
 800ca46:	42a3      	cmp	r3, r4
 800ca48:	6862      	ldr	r2, [r4, #4]
 800ca4a:	d1dd      	bne.n	800ca08 <_malloc_r+0x8c>
 800ca4c:	f8c8 2000 	str.w	r2, [r8]
 800ca50:	e7ec      	b.n	800ca2c <_malloc_r+0xb0>
 800ca52:	4623      	mov	r3, r4
 800ca54:	6864      	ldr	r4, [r4, #4]
 800ca56:	e7ac      	b.n	800c9b2 <_malloc_r+0x36>
 800ca58:	4634      	mov	r4, r6
 800ca5a:	6876      	ldr	r6, [r6, #4]
 800ca5c:	e7b4      	b.n	800c9c8 <_malloc_r+0x4c>
 800ca5e:	4613      	mov	r3, r2
 800ca60:	e7cc      	b.n	800c9fc <_malloc_r+0x80>
 800ca62:	230c      	movs	r3, #12
 800ca64:	603b      	str	r3, [r7, #0]
 800ca66:	4638      	mov	r0, r7
 800ca68:	f000 f8d0 	bl	800cc0c <__malloc_unlock>
 800ca6c:	e797      	b.n	800c99e <_malloc_r+0x22>
 800ca6e:	6025      	str	r5, [r4, #0]
 800ca70:	e7dc      	b.n	800ca2c <_malloc_r+0xb0>
 800ca72:	605b      	str	r3, [r3, #4]
 800ca74:	deff      	udf	#255	; 0xff
 800ca76:	bf00      	nop
 800ca78:	20000374 	.word	0x20000374

0800ca7c <__sflush_r>:
 800ca7c:	898a      	ldrh	r2, [r1, #12]
 800ca7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca82:	4605      	mov	r5, r0
 800ca84:	0710      	lsls	r0, r2, #28
 800ca86:	460c      	mov	r4, r1
 800ca88:	d458      	bmi.n	800cb3c <__sflush_r+0xc0>
 800ca8a:	684b      	ldr	r3, [r1, #4]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	dc05      	bgt.n	800ca9c <__sflush_r+0x20>
 800ca90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	dc02      	bgt.n	800ca9c <__sflush_r+0x20>
 800ca96:	2000      	movs	r0, #0
 800ca98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ca9e:	2e00      	cmp	r6, #0
 800caa0:	d0f9      	beq.n	800ca96 <__sflush_r+0x1a>
 800caa2:	2300      	movs	r3, #0
 800caa4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800caa8:	682f      	ldr	r7, [r5, #0]
 800caaa:	6a21      	ldr	r1, [r4, #32]
 800caac:	602b      	str	r3, [r5, #0]
 800caae:	d032      	beq.n	800cb16 <__sflush_r+0x9a>
 800cab0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cab2:	89a3      	ldrh	r3, [r4, #12]
 800cab4:	075a      	lsls	r2, r3, #29
 800cab6:	d505      	bpl.n	800cac4 <__sflush_r+0x48>
 800cab8:	6863      	ldr	r3, [r4, #4]
 800caba:	1ac0      	subs	r0, r0, r3
 800cabc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cabe:	b10b      	cbz	r3, 800cac4 <__sflush_r+0x48>
 800cac0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cac2:	1ac0      	subs	r0, r0, r3
 800cac4:	2300      	movs	r3, #0
 800cac6:	4602      	mov	r2, r0
 800cac8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800caca:	6a21      	ldr	r1, [r4, #32]
 800cacc:	4628      	mov	r0, r5
 800cace:	47b0      	blx	r6
 800cad0:	1c43      	adds	r3, r0, #1
 800cad2:	89a3      	ldrh	r3, [r4, #12]
 800cad4:	d106      	bne.n	800cae4 <__sflush_r+0x68>
 800cad6:	6829      	ldr	r1, [r5, #0]
 800cad8:	291d      	cmp	r1, #29
 800cada:	d82b      	bhi.n	800cb34 <__sflush_r+0xb8>
 800cadc:	4a29      	ldr	r2, [pc, #164]	; (800cb84 <__sflush_r+0x108>)
 800cade:	410a      	asrs	r2, r1
 800cae0:	07d6      	lsls	r6, r2, #31
 800cae2:	d427      	bmi.n	800cb34 <__sflush_r+0xb8>
 800cae4:	2200      	movs	r2, #0
 800cae6:	6062      	str	r2, [r4, #4]
 800cae8:	04d9      	lsls	r1, r3, #19
 800caea:	6922      	ldr	r2, [r4, #16]
 800caec:	6022      	str	r2, [r4, #0]
 800caee:	d504      	bpl.n	800cafa <__sflush_r+0x7e>
 800caf0:	1c42      	adds	r2, r0, #1
 800caf2:	d101      	bne.n	800caf8 <__sflush_r+0x7c>
 800caf4:	682b      	ldr	r3, [r5, #0]
 800caf6:	b903      	cbnz	r3, 800cafa <__sflush_r+0x7e>
 800caf8:	6560      	str	r0, [r4, #84]	; 0x54
 800cafa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cafc:	602f      	str	r7, [r5, #0]
 800cafe:	2900      	cmp	r1, #0
 800cb00:	d0c9      	beq.n	800ca96 <__sflush_r+0x1a>
 800cb02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb06:	4299      	cmp	r1, r3
 800cb08:	d002      	beq.n	800cb10 <__sflush_r+0x94>
 800cb0a:	4628      	mov	r0, r5
 800cb0c:	f000 fa50 	bl	800cfb0 <_free_r>
 800cb10:	2000      	movs	r0, #0
 800cb12:	6360      	str	r0, [r4, #52]	; 0x34
 800cb14:	e7c0      	b.n	800ca98 <__sflush_r+0x1c>
 800cb16:	2301      	movs	r3, #1
 800cb18:	4628      	mov	r0, r5
 800cb1a:	47b0      	blx	r6
 800cb1c:	1c41      	adds	r1, r0, #1
 800cb1e:	d1c8      	bne.n	800cab2 <__sflush_r+0x36>
 800cb20:	682b      	ldr	r3, [r5, #0]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d0c5      	beq.n	800cab2 <__sflush_r+0x36>
 800cb26:	2b1d      	cmp	r3, #29
 800cb28:	d001      	beq.n	800cb2e <__sflush_r+0xb2>
 800cb2a:	2b16      	cmp	r3, #22
 800cb2c:	d101      	bne.n	800cb32 <__sflush_r+0xb6>
 800cb2e:	602f      	str	r7, [r5, #0]
 800cb30:	e7b1      	b.n	800ca96 <__sflush_r+0x1a>
 800cb32:	89a3      	ldrh	r3, [r4, #12]
 800cb34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb38:	81a3      	strh	r3, [r4, #12]
 800cb3a:	e7ad      	b.n	800ca98 <__sflush_r+0x1c>
 800cb3c:	690f      	ldr	r7, [r1, #16]
 800cb3e:	2f00      	cmp	r7, #0
 800cb40:	d0a9      	beq.n	800ca96 <__sflush_r+0x1a>
 800cb42:	0793      	lsls	r3, r2, #30
 800cb44:	680e      	ldr	r6, [r1, #0]
 800cb46:	bf08      	it	eq
 800cb48:	694b      	ldreq	r3, [r1, #20]
 800cb4a:	600f      	str	r7, [r1, #0]
 800cb4c:	bf18      	it	ne
 800cb4e:	2300      	movne	r3, #0
 800cb50:	eba6 0807 	sub.w	r8, r6, r7
 800cb54:	608b      	str	r3, [r1, #8]
 800cb56:	f1b8 0f00 	cmp.w	r8, #0
 800cb5a:	dd9c      	ble.n	800ca96 <__sflush_r+0x1a>
 800cb5c:	6a21      	ldr	r1, [r4, #32]
 800cb5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cb60:	4643      	mov	r3, r8
 800cb62:	463a      	mov	r2, r7
 800cb64:	4628      	mov	r0, r5
 800cb66:	47b0      	blx	r6
 800cb68:	2800      	cmp	r0, #0
 800cb6a:	dc06      	bgt.n	800cb7a <__sflush_r+0xfe>
 800cb6c:	89a3      	ldrh	r3, [r4, #12]
 800cb6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb72:	81a3      	strh	r3, [r4, #12]
 800cb74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cb78:	e78e      	b.n	800ca98 <__sflush_r+0x1c>
 800cb7a:	4407      	add	r7, r0
 800cb7c:	eba8 0800 	sub.w	r8, r8, r0
 800cb80:	e7e9      	b.n	800cb56 <__sflush_r+0xda>
 800cb82:	bf00      	nop
 800cb84:	dfbffffe 	.word	0xdfbffffe

0800cb88 <_fflush_r>:
 800cb88:	b538      	push	{r3, r4, r5, lr}
 800cb8a:	690b      	ldr	r3, [r1, #16]
 800cb8c:	4605      	mov	r5, r0
 800cb8e:	460c      	mov	r4, r1
 800cb90:	b913      	cbnz	r3, 800cb98 <_fflush_r+0x10>
 800cb92:	2500      	movs	r5, #0
 800cb94:	4628      	mov	r0, r5
 800cb96:	bd38      	pop	{r3, r4, r5, pc}
 800cb98:	b118      	cbz	r0, 800cba2 <_fflush_r+0x1a>
 800cb9a:	6a03      	ldr	r3, [r0, #32]
 800cb9c:	b90b      	cbnz	r3, 800cba2 <_fflush_r+0x1a>
 800cb9e:	f000 f8b5 	bl	800cd0c <__sinit>
 800cba2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d0f3      	beq.n	800cb92 <_fflush_r+0xa>
 800cbaa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cbac:	07d0      	lsls	r0, r2, #31
 800cbae:	d404      	bmi.n	800cbba <_fflush_r+0x32>
 800cbb0:	0599      	lsls	r1, r3, #22
 800cbb2:	d402      	bmi.n	800cbba <_fflush_r+0x32>
 800cbb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cbb6:	f000 f9eb 	bl	800cf90 <__retarget_lock_acquire_recursive>
 800cbba:	4628      	mov	r0, r5
 800cbbc:	4621      	mov	r1, r4
 800cbbe:	f7ff ff5d 	bl	800ca7c <__sflush_r>
 800cbc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cbc4:	07da      	lsls	r2, r3, #31
 800cbc6:	4605      	mov	r5, r0
 800cbc8:	d4e4      	bmi.n	800cb94 <_fflush_r+0xc>
 800cbca:	89a3      	ldrh	r3, [r4, #12]
 800cbcc:	059b      	lsls	r3, r3, #22
 800cbce:	d4e1      	bmi.n	800cb94 <_fflush_r+0xc>
 800cbd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cbd2:	f000 f9de 	bl	800cf92 <__retarget_lock_release_recursive>
 800cbd6:	e7dd      	b.n	800cb94 <_fflush_r+0xc>

0800cbd8 <fflush>:
 800cbd8:	4601      	mov	r1, r0
 800cbda:	b920      	cbnz	r0, 800cbe6 <fflush+0xe>
 800cbdc:	4a04      	ldr	r2, [pc, #16]	; (800cbf0 <fflush+0x18>)
 800cbde:	4905      	ldr	r1, [pc, #20]	; (800cbf4 <fflush+0x1c>)
 800cbe0:	4805      	ldr	r0, [pc, #20]	; (800cbf8 <fflush+0x20>)
 800cbe2:	f000 b8ab 	b.w	800cd3c <_fwalk_sglue>
 800cbe6:	4b05      	ldr	r3, [pc, #20]	; (800cbfc <fflush+0x24>)
 800cbe8:	6818      	ldr	r0, [r3, #0]
 800cbea:	f7ff bfcd 	b.w	800cb88 <_fflush_r>
 800cbee:	bf00      	nop
 800cbf0:	2000018c 	.word	0x2000018c
 800cbf4:	0800cb89 	.word	0x0800cb89
 800cbf8:	20000198 	.word	0x20000198
 800cbfc:	200001e4 	.word	0x200001e4

0800cc00 <__malloc_lock>:
 800cc00:	4801      	ldr	r0, [pc, #4]	; (800cc08 <__malloc_lock+0x8>)
 800cc02:	f000 b9c5 	b.w	800cf90 <__retarget_lock_acquire_recursive>
 800cc06:	bf00      	nop
 800cc08:	200004b8 	.word	0x200004b8

0800cc0c <__malloc_unlock>:
 800cc0c:	4801      	ldr	r0, [pc, #4]	; (800cc14 <__malloc_unlock+0x8>)
 800cc0e:	f000 b9c0 	b.w	800cf92 <__retarget_lock_release_recursive>
 800cc12:	bf00      	nop
 800cc14:	200004b8 	.word	0x200004b8

0800cc18 <std>:
 800cc18:	2300      	movs	r3, #0
 800cc1a:	b510      	push	{r4, lr}
 800cc1c:	4604      	mov	r4, r0
 800cc1e:	e9c0 3300 	strd	r3, r3, [r0]
 800cc22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cc26:	6083      	str	r3, [r0, #8]
 800cc28:	8181      	strh	r1, [r0, #12]
 800cc2a:	6643      	str	r3, [r0, #100]	; 0x64
 800cc2c:	81c2      	strh	r2, [r0, #14]
 800cc2e:	6183      	str	r3, [r0, #24]
 800cc30:	4619      	mov	r1, r3
 800cc32:	2208      	movs	r2, #8
 800cc34:	305c      	adds	r0, #92	; 0x5c
 800cc36:	f000 f969 	bl	800cf0c <memset>
 800cc3a:	4b05      	ldr	r3, [pc, #20]	; (800cc50 <std+0x38>)
 800cc3c:	6263      	str	r3, [r4, #36]	; 0x24
 800cc3e:	4b05      	ldr	r3, [pc, #20]	; (800cc54 <std+0x3c>)
 800cc40:	62a3      	str	r3, [r4, #40]	; 0x28
 800cc42:	4b05      	ldr	r3, [pc, #20]	; (800cc58 <std+0x40>)
 800cc44:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cc46:	4b05      	ldr	r3, [pc, #20]	; (800cc5c <std+0x44>)
 800cc48:	6224      	str	r4, [r4, #32]
 800cc4a:	6323      	str	r3, [r4, #48]	; 0x30
 800cc4c:	bd10      	pop	{r4, pc}
 800cc4e:	bf00      	nop
 800cc50:	0800d8a1 	.word	0x0800d8a1
 800cc54:	0800d8c3 	.word	0x0800d8c3
 800cc58:	0800d8fb 	.word	0x0800d8fb
 800cc5c:	0800d91f 	.word	0x0800d91f

0800cc60 <stdio_exit_handler>:
 800cc60:	4a02      	ldr	r2, [pc, #8]	; (800cc6c <stdio_exit_handler+0xc>)
 800cc62:	4903      	ldr	r1, [pc, #12]	; (800cc70 <stdio_exit_handler+0x10>)
 800cc64:	4803      	ldr	r0, [pc, #12]	; (800cc74 <stdio_exit_handler+0x14>)
 800cc66:	f000 b869 	b.w	800cd3c <_fwalk_sglue>
 800cc6a:	bf00      	nop
 800cc6c:	2000018c 	.word	0x2000018c
 800cc70:	0800cb89 	.word	0x0800cb89
 800cc74:	20000198 	.word	0x20000198

0800cc78 <cleanup_stdio>:
 800cc78:	6841      	ldr	r1, [r0, #4]
 800cc7a:	4b0c      	ldr	r3, [pc, #48]	; (800ccac <cleanup_stdio+0x34>)
 800cc7c:	4299      	cmp	r1, r3
 800cc7e:	b510      	push	{r4, lr}
 800cc80:	4604      	mov	r4, r0
 800cc82:	d001      	beq.n	800cc88 <cleanup_stdio+0x10>
 800cc84:	f7ff ff80 	bl	800cb88 <_fflush_r>
 800cc88:	68a1      	ldr	r1, [r4, #8]
 800cc8a:	4b09      	ldr	r3, [pc, #36]	; (800ccb0 <cleanup_stdio+0x38>)
 800cc8c:	4299      	cmp	r1, r3
 800cc8e:	d002      	beq.n	800cc96 <cleanup_stdio+0x1e>
 800cc90:	4620      	mov	r0, r4
 800cc92:	f7ff ff79 	bl	800cb88 <_fflush_r>
 800cc96:	68e1      	ldr	r1, [r4, #12]
 800cc98:	4b06      	ldr	r3, [pc, #24]	; (800ccb4 <cleanup_stdio+0x3c>)
 800cc9a:	4299      	cmp	r1, r3
 800cc9c:	d004      	beq.n	800cca8 <cleanup_stdio+0x30>
 800cc9e:	4620      	mov	r0, r4
 800cca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cca4:	f7ff bf70 	b.w	800cb88 <_fflush_r>
 800cca8:	bd10      	pop	{r4, pc}
 800ccaa:	bf00      	nop
 800ccac:	2000037c 	.word	0x2000037c
 800ccb0:	200003e4 	.word	0x200003e4
 800ccb4:	2000044c 	.word	0x2000044c

0800ccb8 <global_stdio_init.part.0>:
 800ccb8:	b510      	push	{r4, lr}
 800ccba:	4b0b      	ldr	r3, [pc, #44]	; (800cce8 <global_stdio_init.part.0+0x30>)
 800ccbc:	4c0b      	ldr	r4, [pc, #44]	; (800ccec <global_stdio_init.part.0+0x34>)
 800ccbe:	4a0c      	ldr	r2, [pc, #48]	; (800ccf0 <global_stdio_init.part.0+0x38>)
 800ccc0:	601a      	str	r2, [r3, #0]
 800ccc2:	4620      	mov	r0, r4
 800ccc4:	2200      	movs	r2, #0
 800ccc6:	2104      	movs	r1, #4
 800ccc8:	f7ff ffa6 	bl	800cc18 <std>
 800cccc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800ccd0:	2201      	movs	r2, #1
 800ccd2:	2109      	movs	r1, #9
 800ccd4:	f7ff ffa0 	bl	800cc18 <std>
 800ccd8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800ccdc:	2202      	movs	r2, #2
 800ccde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cce2:	2112      	movs	r1, #18
 800cce4:	f7ff bf98 	b.w	800cc18 <std>
 800cce8:	200004b4 	.word	0x200004b4
 800ccec:	2000037c 	.word	0x2000037c
 800ccf0:	0800cc61 	.word	0x0800cc61

0800ccf4 <__sfp_lock_acquire>:
 800ccf4:	4801      	ldr	r0, [pc, #4]	; (800ccfc <__sfp_lock_acquire+0x8>)
 800ccf6:	f000 b94b 	b.w	800cf90 <__retarget_lock_acquire_recursive>
 800ccfa:	bf00      	nop
 800ccfc:	200004b9 	.word	0x200004b9

0800cd00 <__sfp_lock_release>:
 800cd00:	4801      	ldr	r0, [pc, #4]	; (800cd08 <__sfp_lock_release+0x8>)
 800cd02:	f000 b946 	b.w	800cf92 <__retarget_lock_release_recursive>
 800cd06:	bf00      	nop
 800cd08:	200004b9 	.word	0x200004b9

0800cd0c <__sinit>:
 800cd0c:	b510      	push	{r4, lr}
 800cd0e:	4604      	mov	r4, r0
 800cd10:	f7ff fff0 	bl	800ccf4 <__sfp_lock_acquire>
 800cd14:	6a23      	ldr	r3, [r4, #32]
 800cd16:	b11b      	cbz	r3, 800cd20 <__sinit+0x14>
 800cd18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd1c:	f7ff bff0 	b.w	800cd00 <__sfp_lock_release>
 800cd20:	4b04      	ldr	r3, [pc, #16]	; (800cd34 <__sinit+0x28>)
 800cd22:	6223      	str	r3, [r4, #32]
 800cd24:	4b04      	ldr	r3, [pc, #16]	; (800cd38 <__sinit+0x2c>)
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d1f5      	bne.n	800cd18 <__sinit+0xc>
 800cd2c:	f7ff ffc4 	bl	800ccb8 <global_stdio_init.part.0>
 800cd30:	e7f2      	b.n	800cd18 <__sinit+0xc>
 800cd32:	bf00      	nop
 800cd34:	0800cc79 	.word	0x0800cc79
 800cd38:	200004b4 	.word	0x200004b4

0800cd3c <_fwalk_sglue>:
 800cd3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd40:	4607      	mov	r7, r0
 800cd42:	4688      	mov	r8, r1
 800cd44:	4614      	mov	r4, r2
 800cd46:	2600      	movs	r6, #0
 800cd48:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cd4c:	f1b9 0901 	subs.w	r9, r9, #1
 800cd50:	d505      	bpl.n	800cd5e <_fwalk_sglue+0x22>
 800cd52:	6824      	ldr	r4, [r4, #0]
 800cd54:	2c00      	cmp	r4, #0
 800cd56:	d1f7      	bne.n	800cd48 <_fwalk_sglue+0xc>
 800cd58:	4630      	mov	r0, r6
 800cd5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd5e:	89ab      	ldrh	r3, [r5, #12]
 800cd60:	2b01      	cmp	r3, #1
 800cd62:	d907      	bls.n	800cd74 <_fwalk_sglue+0x38>
 800cd64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cd68:	3301      	adds	r3, #1
 800cd6a:	d003      	beq.n	800cd74 <_fwalk_sglue+0x38>
 800cd6c:	4629      	mov	r1, r5
 800cd6e:	4638      	mov	r0, r7
 800cd70:	47c0      	blx	r8
 800cd72:	4306      	orrs	r6, r0
 800cd74:	3568      	adds	r5, #104	; 0x68
 800cd76:	e7e9      	b.n	800cd4c <_fwalk_sglue+0x10>

0800cd78 <_vsniprintf_r>:
 800cd78:	b530      	push	{r4, r5, lr}
 800cd7a:	4614      	mov	r4, r2
 800cd7c:	2c00      	cmp	r4, #0
 800cd7e:	b09b      	sub	sp, #108	; 0x6c
 800cd80:	4605      	mov	r5, r0
 800cd82:	461a      	mov	r2, r3
 800cd84:	da05      	bge.n	800cd92 <_vsniprintf_r+0x1a>
 800cd86:	238b      	movs	r3, #139	; 0x8b
 800cd88:	6003      	str	r3, [r0, #0]
 800cd8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cd8e:	b01b      	add	sp, #108	; 0x6c
 800cd90:	bd30      	pop	{r4, r5, pc}
 800cd92:	f44f 7302 	mov.w	r3, #520	; 0x208
 800cd96:	f8ad 300c 	strh.w	r3, [sp, #12]
 800cd9a:	bf14      	ite	ne
 800cd9c:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800cda0:	4623      	moveq	r3, r4
 800cda2:	9302      	str	r3, [sp, #8]
 800cda4:	9305      	str	r3, [sp, #20]
 800cda6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cdaa:	9100      	str	r1, [sp, #0]
 800cdac:	9104      	str	r1, [sp, #16]
 800cdae:	f8ad 300e 	strh.w	r3, [sp, #14]
 800cdb2:	4669      	mov	r1, sp
 800cdb4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800cdb6:	f000 f9a1 	bl	800d0fc <_svfiprintf_r>
 800cdba:	1c43      	adds	r3, r0, #1
 800cdbc:	bfbc      	itt	lt
 800cdbe:	238b      	movlt	r3, #139	; 0x8b
 800cdc0:	602b      	strlt	r3, [r5, #0]
 800cdc2:	2c00      	cmp	r4, #0
 800cdc4:	d0e3      	beq.n	800cd8e <_vsniprintf_r+0x16>
 800cdc6:	9b00      	ldr	r3, [sp, #0]
 800cdc8:	2200      	movs	r2, #0
 800cdca:	701a      	strb	r2, [r3, #0]
 800cdcc:	e7df      	b.n	800cd8e <_vsniprintf_r+0x16>
	...

0800cdd0 <vsniprintf>:
 800cdd0:	b507      	push	{r0, r1, r2, lr}
 800cdd2:	9300      	str	r3, [sp, #0]
 800cdd4:	4613      	mov	r3, r2
 800cdd6:	460a      	mov	r2, r1
 800cdd8:	4601      	mov	r1, r0
 800cdda:	4803      	ldr	r0, [pc, #12]	; (800cde8 <vsniprintf+0x18>)
 800cddc:	6800      	ldr	r0, [r0, #0]
 800cdde:	f7ff ffcb 	bl	800cd78 <_vsniprintf_r>
 800cde2:	b003      	add	sp, #12
 800cde4:	f85d fb04 	ldr.w	pc, [sp], #4
 800cde8:	200001e4 	.word	0x200001e4

0800cdec <iprintf>:
 800cdec:	b40f      	push	{r0, r1, r2, r3}
 800cdee:	b507      	push	{r0, r1, r2, lr}
 800cdf0:	4906      	ldr	r1, [pc, #24]	; (800ce0c <iprintf+0x20>)
 800cdf2:	ab04      	add	r3, sp, #16
 800cdf4:	6808      	ldr	r0, [r1, #0]
 800cdf6:	f853 2b04 	ldr.w	r2, [r3], #4
 800cdfa:	6881      	ldr	r1, [r0, #8]
 800cdfc:	9301      	str	r3, [sp, #4]
 800cdfe:	f000 faa5 	bl	800d34c <_vfiprintf_r>
 800ce02:	b003      	add	sp, #12
 800ce04:	f85d eb04 	ldr.w	lr, [sp], #4
 800ce08:	b004      	add	sp, #16
 800ce0a:	4770      	bx	lr
 800ce0c:	200001e4 	.word	0x200001e4

0800ce10 <putchar>:
 800ce10:	4b02      	ldr	r3, [pc, #8]	; (800ce1c <putchar+0xc>)
 800ce12:	4601      	mov	r1, r0
 800ce14:	6818      	ldr	r0, [r3, #0]
 800ce16:	6882      	ldr	r2, [r0, #8]
 800ce18:	f000 beac 	b.w	800db74 <_putc_r>
 800ce1c:	200001e4 	.word	0x200001e4

0800ce20 <_puts_r>:
 800ce20:	6a03      	ldr	r3, [r0, #32]
 800ce22:	b570      	push	{r4, r5, r6, lr}
 800ce24:	6884      	ldr	r4, [r0, #8]
 800ce26:	4605      	mov	r5, r0
 800ce28:	460e      	mov	r6, r1
 800ce2a:	b90b      	cbnz	r3, 800ce30 <_puts_r+0x10>
 800ce2c:	f7ff ff6e 	bl	800cd0c <__sinit>
 800ce30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ce32:	07db      	lsls	r3, r3, #31
 800ce34:	d405      	bmi.n	800ce42 <_puts_r+0x22>
 800ce36:	89a3      	ldrh	r3, [r4, #12]
 800ce38:	0598      	lsls	r0, r3, #22
 800ce3a:	d402      	bmi.n	800ce42 <_puts_r+0x22>
 800ce3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ce3e:	f000 f8a7 	bl	800cf90 <__retarget_lock_acquire_recursive>
 800ce42:	89a3      	ldrh	r3, [r4, #12]
 800ce44:	0719      	lsls	r1, r3, #28
 800ce46:	d513      	bpl.n	800ce70 <_puts_r+0x50>
 800ce48:	6923      	ldr	r3, [r4, #16]
 800ce4a:	b18b      	cbz	r3, 800ce70 <_puts_r+0x50>
 800ce4c:	3e01      	subs	r6, #1
 800ce4e:	68a3      	ldr	r3, [r4, #8]
 800ce50:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ce54:	3b01      	subs	r3, #1
 800ce56:	60a3      	str	r3, [r4, #8]
 800ce58:	b9e9      	cbnz	r1, 800ce96 <_puts_r+0x76>
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	da2e      	bge.n	800cebc <_puts_r+0x9c>
 800ce5e:	4622      	mov	r2, r4
 800ce60:	210a      	movs	r1, #10
 800ce62:	4628      	mov	r0, r5
 800ce64:	f000 fd8e 	bl	800d984 <__swbuf_r>
 800ce68:	3001      	adds	r0, #1
 800ce6a:	d007      	beq.n	800ce7c <_puts_r+0x5c>
 800ce6c:	250a      	movs	r5, #10
 800ce6e:	e007      	b.n	800ce80 <_puts_r+0x60>
 800ce70:	4621      	mov	r1, r4
 800ce72:	4628      	mov	r0, r5
 800ce74:	f000 fdc4 	bl	800da00 <__swsetup_r>
 800ce78:	2800      	cmp	r0, #0
 800ce7a:	d0e7      	beq.n	800ce4c <_puts_r+0x2c>
 800ce7c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800ce80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ce82:	07da      	lsls	r2, r3, #31
 800ce84:	d405      	bmi.n	800ce92 <_puts_r+0x72>
 800ce86:	89a3      	ldrh	r3, [r4, #12]
 800ce88:	059b      	lsls	r3, r3, #22
 800ce8a:	d402      	bmi.n	800ce92 <_puts_r+0x72>
 800ce8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ce8e:	f000 f880 	bl	800cf92 <__retarget_lock_release_recursive>
 800ce92:	4628      	mov	r0, r5
 800ce94:	bd70      	pop	{r4, r5, r6, pc}
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	da04      	bge.n	800cea4 <_puts_r+0x84>
 800ce9a:	69a2      	ldr	r2, [r4, #24]
 800ce9c:	429a      	cmp	r2, r3
 800ce9e:	dc06      	bgt.n	800ceae <_puts_r+0x8e>
 800cea0:	290a      	cmp	r1, #10
 800cea2:	d004      	beq.n	800ceae <_puts_r+0x8e>
 800cea4:	6823      	ldr	r3, [r4, #0]
 800cea6:	1c5a      	adds	r2, r3, #1
 800cea8:	6022      	str	r2, [r4, #0]
 800ceaa:	7019      	strb	r1, [r3, #0]
 800ceac:	e7cf      	b.n	800ce4e <_puts_r+0x2e>
 800ceae:	4622      	mov	r2, r4
 800ceb0:	4628      	mov	r0, r5
 800ceb2:	f000 fd67 	bl	800d984 <__swbuf_r>
 800ceb6:	3001      	adds	r0, #1
 800ceb8:	d1c9      	bne.n	800ce4e <_puts_r+0x2e>
 800ceba:	e7df      	b.n	800ce7c <_puts_r+0x5c>
 800cebc:	6823      	ldr	r3, [r4, #0]
 800cebe:	250a      	movs	r5, #10
 800cec0:	1c5a      	adds	r2, r3, #1
 800cec2:	6022      	str	r2, [r4, #0]
 800cec4:	701d      	strb	r5, [r3, #0]
 800cec6:	e7db      	b.n	800ce80 <_puts_r+0x60>

0800cec8 <puts>:
 800cec8:	4b02      	ldr	r3, [pc, #8]	; (800ced4 <puts+0xc>)
 800ceca:	4601      	mov	r1, r0
 800cecc:	6818      	ldr	r0, [r3, #0]
 800cece:	f7ff bfa7 	b.w	800ce20 <_puts_r>
 800ced2:	bf00      	nop
 800ced4:	200001e4 	.word	0x200001e4

0800ced8 <memmove>:
 800ced8:	4288      	cmp	r0, r1
 800ceda:	b510      	push	{r4, lr}
 800cedc:	eb01 0402 	add.w	r4, r1, r2
 800cee0:	d902      	bls.n	800cee8 <memmove+0x10>
 800cee2:	4284      	cmp	r4, r0
 800cee4:	4623      	mov	r3, r4
 800cee6:	d807      	bhi.n	800cef8 <memmove+0x20>
 800cee8:	1e43      	subs	r3, r0, #1
 800ceea:	42a1      	cmp	r1, r4
 800ceec:	d008      	beq.n	800cf00 <memmove+0x28>
 800ceee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cef2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cef6:	e7f8      	b.n	800ceea <memmove+0x12>
 800cef8:	4402      	add	r2, r0
 800cefa:	4601      	mov	r1, r0
 800cefc:	428a      	cmp	r2, r1
 800cefe:	d100      	bne.n	800cf02 <memmove+0x2a>
 800cf00:	bd10      	pop	{r4, pc}
 800cf02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cf06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cf0a:	e7f7      	b.n	800cefc <memmove+0x24>

0800cf0c <memset>:
 800cf0c:	4402      	add	r2, r0
 800cf0e:	4603      	mov	r3, r0
 800cf10:	4293      	cmp	r3, r2
 800cf12:	d100      	bne.n	800cf16 <memset+0xa>
 800cf14:	4770      	bx	lr
 800cf16:	f803 1b01 	strb.w	r1, [r3], #1
 800cf1a:	e7f9      	b.n	800cf10 <memset+0x4>

0800cf1c <_sbrk_r>:
 800cf1c:	b538      	push	{r3, r4, r5, lr}
 800cf1e:	4d06      	ldr	r5, [pc, #24]	; (800cf38 <_sbrk_r+0x1c>)
 800cf20:	2300      	movs	r3, #0
 800cf22:	4604      	mov	r4, r0
 800cf24:	4608      	mov	r0, r1
 800cf26:	602b      	str	r3, [r5, #0]
 800cf28:	f7f4 f92a 	bl	8001180 <_sbrk>
 800cf2c:	1c43      	adds	r3, r0, #1
 800cf2e:	d102      	bne.n	800cf36 <_sbrk_r+0x1a>
 800cf30:	682b      	ldr	r3, [r5, #0]
 800cf32:	b103      	cbz	r3, 800cf36 <_sbrk_r+0x1a>
 800cf34:	6023      	str	r3, [r4, #0]
 800cf36:	bd38      	pop	{r3, r4, r5, pc}
 800cf38:	200004bc 	.word	0x200004bc

0800cf3c <__errno>:
 800cf3c:	4b01      	ldr	r3, [pc, #4]	; (800cf44 <__errno+0x8>)
 800cf3e:	6818      	ldr	r0, [r3, #0]
 800cf40:	4770      	bx	lr
 800cf42:	bf00      	nop
 800cf44:	200001e4 	.word	0x200001e4

0800cf48 <__libc_init_array>:
 800cf48:	b570      	push	{r4, r5, r6, lr}
 800cf4a:	4d0d      	ldr	r5, [pc, #52]	; (800cf80 <__libc_init_array+0x38>)
 800cf4c:	4c0d      	ldr	r4, [pc, #52]	; (800cf84 <__libc_init_array+0x3c>)
 800cf4e:	1b64      	subs	r4, r4, r5
 800cf50:	10a4      	asrs	r4, r4, #2
 800cf52:	2600      	movs	r6, #0
 800cf54:	42a6      	cmp	r6, r4
 800cf56:	d109      	bne.n	800cf6c <__libc_init_array+0x24>
 800cf58:	4d0b      	ldr	r5, [pc, #44]	; (800cf88 <__libc_init_array+0x40>)
 800cf5a:	4c0c      	ldr	r4, [pc, #48]	; (800cf8c <__libc_init_array+0x44>)
 800cf5c:	f001 f888 	bl	800e070 <_init>
 800cf60:	1b64      	subs	r4, r4, r5
 800cf62:	10a4      	asrs	r4, r4, #2
 800cf64:	2600      	movs	r6, #0
 800cf66:	42a6      	cmp	r6, r4
 800cf68:	d105      	bne.n	800cf76 <__libc_init_array+0x2e>
 800cf6a:	bd70      	pop	{r4, r5, r6, pc}
 800cf6c:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf70:	4798      	blx	r3
 800cf72:	3601      	adds	r6, #1
 800cf74:	e7ee      	b.n	800cf54 <__libc_init_array+0xc>
 800cf76:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf7a:	4798      	blx	r3
 800cf7c:	3601      	adds	r6, #1
 800cf7e:	e7f2      	b.n	800cf66 <__libc_init_array+0x1e>
 800cf80:	080138e8 	.word	0x080138e8
 800cf84:	080138e8 	.word	0x080138e8
 800cf88:	080138e8 	.word	0x080138e8
 800cf8c:	080138ec 	.word	0x080138ec

0800cf90 <__retarget_lock_acquire_recursive>:
 800cf90:	4770      	bx	lr

0800cf92 <__retarget_lock_release_recursive>:
 800cf92:	4770      	bx	lr

0800cf94 <memcpy>:
 800cf94:	440a      	add	r2, r1
 800cf96:	4291      	cmp	r1, r2
 800cf98:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800cf9c:	d100      	bne.n	800cfa0 <memcpy+0xc>
 800cf9e:	4770      	bx	lr
 800cfa0:	b510      	push	{r4, lr}
 800cfa2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cfa6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cfaa:	4291      	cmp	r1, r2
 800cfac:	d1f9      	bne.n	800cfa2 <memcpy+0xe>
 800cfae:	bd10      	pop	{r4, pc}

0800cfb0 <_free_r>:
 800cfb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cfb2:	2900      	cmp	r1, #0
 800cfb4:	d044      	beq.n	800d040 <_free_r+0x90>
 800cfb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cfba:	9001      	str	r0, [sp, #4]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	f1a1 0404 	sub.w	r4, r1, #4
 800cfc2:	bfb8      	it	lt
 800cfc4:	18e4      	addlt	r4, r4, r3
 800cfc6:	f7ff fe1b 	bl	800cc00 <__malloc_lock>
 800cfca:	4a1e      	ldr	r2, [pc, #120]	; (800d044 <_free_r+0x94>)
 800cfcc:	9801      	ldr	r0, [sp, #4]
 800cfce:	6813      	ldr	r3, [r2, #0]
 800cfd0:	b933      	cbnz	r3, 800cfe0 <_free_r+0x30>
 800cfd2:	6063      	str	r3, [r4, #4]
 800cfd4:	6014      	str	r4, [r2, #0]
 800cfd6:	b003      	add	sp, #12
 800cfd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cfdc:	f7ff be16 	b.w	800cc0c <__malloc_unlock>
 800cfe0:	42a3      	cmp	r3, r4
 800cfe2:	d908      	bls.n	800cff6 <_free_r+0x46>
 800cfe4:	6825      	ldr	r5, [r4, #0]
 800cfe6:	1961      	adds	r1, r4, r5
 800cfe8:	428b      	cmp	r3, r1
 800cfea:	bf01      	itttt	eq
 800cfec:	6819      	ldreq	r1, [r3, #0]
 800cfee:	685b      	ldreq	r3, [r3, #4]
 800cff0:	1949      	addeq	r1, r1, r5
 800cff2:	6021      	streq	r1, [r4, #0]
 800cff4:	e7ed      	b.n	800cfd2 <_free_r+0x22>
 800cff6:	461a      	mov	r2, r3
 800cff8:	685b      	ldr	r3, [r3, #4]
 800cffa:	b10b      	cbz	r3, 800d000 <_free_r+0x50>
 800cffc:	42a3      	cmp	r3, r4
 800cffe:	d9fa      	bls.n	800cff6 <_free_r+0x46>
 800d000:	6811      	ldr	r1, [r2, #0]
 800d002:	1855      	adds	r5, r2, r1
 800d004:	42a5      	cmp	r5, r4
 800d006:	d10b      	bne.n	800d020 <_free_r+0x70>
 800d008:	6824      	ldr	r4, [r4, #0]
 800d00a:	4421      	add	r1, r4
 800d00c:	1854      	adds	r4, r2, r1
 800d00e:	42a3      	cmp	r3, r4
 800d010:	6011      	str	r1, [r2, #0]
 800d012:	d1e0      	bne.n	800cfd6 <_free_r+0x26>
 800d014:	681c      	ldr	r4, [r3, #0]
 800d016:	685b      	ldr	r3, [r3, #4]
 800d018:	6053      	str	r3, [r2, #4]
 800d01a:	440c      	add	r4, r1
 800d01c:	6014      	str	r4, [r2, #0]
 800d01e:	e7da      	b.n	800cfd6 <_free_r+0x26>
 800d020:	d902      	bls.n	800d028 <_free_r+0x78>
 800d022:	230c      	movs	r3, #12
 800d024:	6003      	str	r3, [r0, #0]
 800d026:	e7d6      	b.n	800cfd6 <_free_r+0x26>
 800d028:	6825      	ldr	r5, [r4, #0]
 800d02a:	1961      	adds	r1, r4, r5
 800d02c:	428b      	cmp	r3, r1
 800d02e:	bf04      	itt	eq
 800d030:	6819      	ldreq	r1, [r3, #0]
 800d032:	685b      	ldreq	r3, [r3, #4]
 800d034:	6063      	str	r3, [r4, #4]
 800d036:	bf04      	itt	eq
 800d038:	1949      	addeq	r1, r1, r5
 800d03a:	6021      	streq	r1, [r4, #0]
 800d03c:	6054      	str	r4, [r2, #4]
 800d03e:	e7ca      	b.n	800cfd6 <_free_r+0x26>
 800d040:	b003      	add	sp, #12
 800d042:	bd30      	pop	{r4, r5, pc}
 800d044:	20000374 	.word	0x20000374

0800d048 <__ssputs_r>:
 800d048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d04c:	688e      	ldr	r6, [r1, #8]
 800d04e:	461f      	mov	r7, r3
 800d050:	42be      	cmp	r6, r7
 800d052:	680b      	ldr	r3, [r1, #0]
 800d054:	4682      	mov	sl, r0
 800d056:	460c      	mov	r4, r1
 800d058:	4690      	mov	r8, r2
 800d05a:	d82c      	bhi.n	800d0b6 <__ssputs_r+0x6e>
 800d05c:	898a      	ldrh	r2, [r1, #12]
 800d05e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d062:	d026      	beq.n	800d0b2 <__ssputs_r+0x6a>
 800d064:	6965      	ldr	r5, [r4, #20]
 800d066:	6909      	ldr	r1, [r1, #16]
 800d068:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d06c:	eba3 0901 	sub.w	r9, r3, r1
 800d070:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d074:	1c7b      	adds	r3, r7, #1
 800d076:	444b      	add	r3, r9
 800d078:	106d      	asrs	r5, r5, #1
 800d07a:	429d      	cmp	r5, r3
 800d07c:	bf38      	it	cc
 800d07e:	461d      	movcc	r5, r3
 800d080:	0553      	lsls	r3, r2, #21
 800d082:	d527      	bpl.n	800d0d4 <__ssputs_r+0x8c>
 800d084:	4629      	mov	r1, r5
 800d086:	f7ff fc79 	bl	800c97c <_malloc_r>
 800d08a:	4606      	mov	r6, r0
 800d08c:	b360      	cbz	r0, 800d0e8 <__ssputs_r+0xa0>
 800d08e:	6921      	ldr	r1, [r4, #16]
 800d090:	464a      	mov	r2, r9
 800d092:	f7ff ff7f 	bl	800cf94 <memcpy>
 800d096:	89a3      	ldrh	r3, [r4, #12]
 800d098:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d09c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d0a0:	81a3      	strh	r3, [r4, #12]
 800d0a2:	6126      	str	r6, [r4, #16]
 800d0a4:	6165      	str	r5, [r4, #20]
 800d0a6:	444e      	add	r6, r9
 800d0a8:	eba5 0509 	sub.w	r5, r5, r9
 800d0ac:	6026      	str	r6, [r4, #0]
 800d0ae:	60a5      	str	r5, [r4, #8]
 800d0b0:	463e      	mov	r6, r7
 800d0b2:	42be      	cmp	r6, r7
 800d0b4:	d900      	bls.n	800d0b8 <__ssputs_r+0x70>
 800d0b6:	463e      	mov	r6, r7
 800d0b8:	6820      	ldr	r0, [r4, #0]
 800d0ba:	4632      	mov	r2, r6
 800d0bc:	4641      	mov	r1, r8
 800d0be:	f7ff ff0b 	bl	800ced8 <memmove>
 800d0c2:	68a3      	ldr	r3, [r4, #8]
 800d0c4:	1b9b      	subs	r3, r3, r6
 800d0c6:	60a3      	str	r3, [r4, #8]
 800d0c8:	6823      	ldr	r3, [r4, #0]
 800d0ca:	4433      	add	r3, r6
 800d0cc:	6023      	str	r3, [r4, #0]
 800d0ce:	2000      	movs	r0, #0
 800d0d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0d4:	462a      	mov	r2, r5
 800d0d6:	f000 fc26 	bl	800d926 <_realloc_r>
 800d0da:	4606      	mov	r6, r0
 800d0dc:	2800      	cmp	r0, #0
 800d0de:	d1e0      	bne.n	800d0a2 <__ssputs_r+0x5a>
 800d0e0:	6921      	ldr	r1, [r4, #16]
 800d0e2:	4650      	mov	r0, sl
 800d0e4:	f7ff ff64 	bl	800cfb0 <_free_r>
 800d0e8:	230c      	movs	r3, #12
 800d0ea:	f8ca 3000 	str.w	r3, [sl]
 800d0ee:	89a3      	ldrh	r3, [r4, #12]
 800d0f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d0f4:	81a3      	strh	r3, [r4, #12]
 800d0f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d0fa:	e7e9      	b.n	800d0d0 <__ssputs_r+0x88>

0800d0fc <_svfiprintf_r>:
 800d0fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d100:	4698      	mov	r8, r3
 800d102:	898b      	ldrh	r3, [r1, #12]
 800d104:	061b      	lsls	r3, r3, #24
 800d106:	b09d      	sub	sp, #116	; 0x74
 800d108:	4607      	mov	r7, r0
 800d10a:	460d      	mov	r5, r1
 800d10c:	4614      	mov	r4, r2
 800d10e:	d50e      	bpl.n	800d12e <_svfiprintf_r+0x32>
 800d110:	690b      	ldr	r3, [r1, #16]
 800d112:	b963      	cbnz	r3, 800d12e <_svfiprintf_r+0x32>
 800d114:	2140      	movs	r1, #64	; 0x40
 800d116:	f7ff fc31 	bl	800c97c <_malloc_r>
 800d11a:	6028      	str	r0, [r5, #0]
 800d11c:	6128      	str	r0, [r5, #16]
 800d11e:	b920      	cbnz	r0, 800d12a <_svfiprintf_r+0x2e>
 800d120:	230c      	movs	r3, #12
 800d122:	603b      	str	r3, [r7, #0]
 800d124:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d128:	e0d0      	b.n	800d2cc <_svfiprintf_r+0x1d0>
 800d12a:	2340      	movs	r3, #64	; 0x40
 800d12c:	616b      	str	r3, [r5, #20]
 800d12e:	2300      	movs	r3, #0
 800d130:	9309      	str	r3, [sp, #36]	; 0x24
 800d132:	2320      	movs	r3, #32
 800d134:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d138:	f8cd 800c 	str.w	r8, [sp, #12]
 800d13c:	2330      	movs	r3, #48	; 0x30
 800d13e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d2e4 <_svfiprintf_r+0x1e8>
 800d142:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d146:	f04f 0901 	mov.w	r9, #1
 800d14a:	4623      	mov	r3, r4
 800d14c:	469a      	mov	sl, r3
 800d14e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d152:	b10a      	cbz	r2, 800d158 <_svfiprintf_r+0x5c>
 800d154:	2a25      	cmp	r2, #37	; 0x25
 800d156:	d1f9      	bne.n	800d14c <_svfiprintf_r+0x50>
 800d158:	ebba 0b04 	subs.w	fp, sl, r4
 800d15c:	d00b      	beq.n	800d176 <_svfiprintf_r+0x7a>
 800d15e:	465b      	mov	r3, fp
 800d160:	4622      	mov	r2, r4
 800d162:	4629      	mov	r1, r5
 800d164:	4638      	mov	r0, r7
 800d166:	f7ff ff6f 	bl	800d048 <__ssputs_r>
 800d16a:	3001      	adds	r0, #1
 800d16c:	f000 80a9 	beq.w	800d2c2 <_svfiprintf_r+0x1c6>
 800d170:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d172:	445a      	add	r2, fp
 800d174:	9209      	str	r2, [sp, #36]	; 0x24
 800d176:	f89a 3000 	ldrb.w	r3, [sl]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	f000 80a1 	beq.w	800d2c2 <_svfiprintf_r+0x1c6>
 800d180:	2300      	movs	r3, #0
 800d182:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d186:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d18a:	f10a 0a01 	add.w	sl, sl, #1
 800d18e:	9304      	str	r3, [sp, #16]
 800d190:	9307      	str	r3, [sp, #28]
 800d192:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d196:	931a      	str	r3, [sp, #104]	; 0x68
 800d198:	4654      	mov	r4, sl
 800d19a:	2205      	movs	r2, #5
 800d19c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1a0:	4850      	ldr	r0, [pc, #320]	; (800d2e4 <_svfiprintf_r+0x1e8>)
 800d1a2:	f7f3 f88d 	bl	80002c0 <memchr>
 800d1a6:	9a04      	ldr	r2, [sp, #16]
 800d1a8:	b9d8      	cbnz	r0, 800d1e2 <_svfiprintf_r+0xe6>
 800d1aa:	06d0      	lsls	r0, r2, #27
 800d1ac:	bf44      	itt	mi
 800d1ae:	2320      	movmi	r3, #32
 800d1b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d1b4:	0711      	lsls	r1, r2, #28
 800d1b6:	bf44      	itt	mi
 800d1b8:	232b      	movmi	r3, #43	; 0x2b
 800d1ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d1be:	f89a 3000 	ldrb.w	r3, [sl]
 800d1c2:	2b2a      	cmp	r3, #42	; 0x2a
 800d1c4:	d015      	beq.n	800d1f2 <_svfiprintf_r+0xf6>
 800d1c6:	9a07      	ldr	r2, [sp, #28]
 800d1c8:	4654      	mov	r4, sl
 800d1ca:	2000      	movs	r0, #0
 800d1cc:	f04f 0c0a 	mov.w	ip, #10
 800d1d0:	4621      	mov	r1, r4
 800d1d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d1d6:	3b30      	subs	r3, #48	; 0x30
 800d1d8:	2b09      	cmp	r3, #9
 800d1da:	d94d      	bls.n	800d278 <_svfiprintf_r+0x17c>
 800d1dc:	b1b0      	cbz	r0, 800d20c <_svfiprintf_r+0x110>
 800d1de:	9207      	str	r2, [sp, #28]
 800d1e0:	e014      	b.n	800d20c <_svfiprintf_r+0x110>
 800d1e2:	eba0 0308 	sub.w	r3, r0, r8
 800d1e6:	fa09 f303 	lsl.w	r3, r9, r3
 800d1ea:	4313      	orrs	r3, r2
 800d1ec:	9304      	str	r3, [sp, #16]
 800d1ee:	46a2      	mov	sl, r4
 800d1f0:	e7d2      	b.n	800d198 <_svfiprintf_r+0x9c>
 800d1f2:	9b03      	ldr	r3, [sp, #12]
 800d1f4:	1d19      	adds	r1, r3, #4
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	9103      	str	r1, [sp, #12]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	bfbb      	ittet	lt
 800d1fe:	425b      	neglt	r3, r3
 800d200:	f042 0202 	orrlt.w	r2, r2, #2
 800d204:	9307      	strge	r3, [sp, #28]
 800d206:	9307      	strlt	r3, [sp, #28]
 800d208:	bfb8      	it	lt
 800d20a:	9204      	strlt	r2, [sp, #16]
 800d20c:	7823      	ldrb	r3, [r4, #0]
 800d20e:	2b2e      	cmp	r3, #46	; 0x2e
 800d210:	d10c      	bne.n	800d22c <_svfiprintf_r+0x130>
 800d212:	7863      	ldrb	r3, [r4, #1]
 800d214:	2b2a      	cmp	r3, #42	; 0x2a
 800d216:	d134      	bne.n	800d282 <_svfiprintf_r+0x186>
 800d218:	9b03      	ldr	r3, [sp, #12]
 800d21a:	1d1a      	adds	r2, r3, #4
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	9203      	str	r2, [sp, #12]
 800d220:	2b00      	cmp	r3, #0
 800d222:	bfb8      	it	lt
 800d224:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d228:	3402      	adds	r4, #2
 800d22a:	9305      	str	r3, [sp, #20]
 800d22c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800d2f4 <_svfiprintf_r+0x1f8>
 800d230:	7821      	ldrb	r1, [r4, #0]
 800d232:	2203      	movs	r2, #3
 800d234:	4650      	mov	r0, sl
 800d236:	f7f3 f843 	bl	80002c0 <memchr>
 800d23a:	b138      	cbz	r0, 800d24c <_svfiprintf_r+0x150>
 800d23c:	9b04      	ldr	r3, [sp, #16]
 800d23e:	eba0 000a 	sub.w	r0, r0, sl
 800d242:	2240      	movs	r2, #64	; 0x40
 800d244:	4082      	lsls	r2, r0
 800d246:	4313      	orrs	r3, r2
 800d248:	3401      	adds	r4, #1
 800d24a:	9304      	str	r3, [sp, #16]
 800d24c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d250:	4825      	ldr	r0, [pc, #148]	; (800d2e8 <_svfiprintf_r+0x1ec>)
 800d252:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d256:	2206      	movs	r2, #6
 800d258:	f7f3 f832 	bl	80002c0 <memchr>
 800d25c:	2800      	cmp	r0, #0
 800d25e:	d038      	beq.n	800d2d2 <_svfiprintf_r+0x1d6>
 800d260:	4b22      	ldr	r3, [pc, #136]	; (800d2ec <_svfiprintf_r+0x1f0>)
 800d262:	bb1b      	cbnz	r3, 800d2ac <_svfiprintf_r+0x1b0>
 800d264:	9b03      	ldr	r3, [sp, #12]
 800d266:	3307      	adds	r3, #7
 800d268:	f023 0307 	bic.w	r3, r3, #7
 800d26c:	3308      	adds	r3, #8
 800d26e:	9303      	str	r3, [sp, #12]
 800d270:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d272:	4433      	add	r3, r6
 800d274:	9309      	str	r3, [sp, #36]	; 0x24
 800d276:	e768      	b.n	800d14a <_svfiprintf_r+0x4e>
 800d278:	fb0c 3202 	mla	r2, ip, r2, r3
 800d27c:	460c      	mov	r4, r1
 800d27e:	2001      	movs	r0, #1
 800d280:	e7a6      	b.n	800d1d0 <_svfiprintf_r+0xd4>
 800d282:	2300      	movs	r3, #0
 800d284:	3401      	adds	r4, #1
 800d286:	9305      	str	r3, [sp, #20]
 800d288:	4619      	mov	r1, r3
 800d28a:	f04f 0c0a 	mov.w	ip, #10
 800d28e:	4620      	mov	r0, r4
 800d290:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d294:	3a30      	subs	r2, #48	; 0x30
 800d296:	2a09      	cmp	r2, #9
 800d298:	d903      	bls.n	800d2a2 <_svfiprintf_r+0x1a6>
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d0c6      	beq.n	800d22c <_svfiprintf_r+0x130>
 800d29e:	9105      	str	r1, [sp, #20]
 800d2a0:	e7c4      	b.n	800d22c <_svfiprintf_r+0x130>
 800d2a2:	fb0c 2101 	mla	r1, ip, r1, r2
 800d2a6:	4604      	mov	r4, r0
 800d2a8:	2301      	movs	r3, #1
 800d2aa:	e7f0      	b.n	800d28e <_svfiprintf_r+0x192>
 800d2ac:	ab03      	add	r3, sp, #12
 800d2ae:	9300      	str	r3, [sp, #0]
 800d2b0:	462a      	mov	r2, r5
 800d2b2:	4b0f      	ldr	r3, [pc, #60]	; (800d2f0 <_svfiprintf_r+0x1f4>)
 800d2b4:	a904      	add	r1, sp, #16
 800d2b6:	4638      	mov	r0, r7
 800d2b8:	f3af 8000 	nop.w
 800d2bc:	1c42      	adds	r2, r0, #1
 800d2be:	4606      	mov	r6, r0
 800d2c0:	d1d6      	bne.n	800d270 <_svfiprintf_r+0x174>
 800d2c2:	89ab      	ldrh	r3, [r5, #12]
 800d2c4:	065b      	lsls	r3, r3, #25
 800d2c6:	f53f af2d 	bmi.w	800d124 <_svfiprintf_r+0x28>
 800d2ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d2cc:	b01d      	add	sp, #116	; 0x74
 800d2ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2d2:	ab03      	add	r3, sp, #12
 800d2d4:	9300      	str	r3, [sp, #0]
 800d2d6:	462a      	mov	r2, r5
 800d2d8:	4b05      	ldr	r3, [pc, #20]	; (800d2f0 <_svfiprintf_r+0x1f4>)
 800d2da:	a904      	add	r1, sp, #16
 800d2dc:	4638      	mov	r0, r7
 800d2de:	f000 f9bd 	bl	800d65c <_printf_i>
 800d2e2:	e7eb      	b.n	800d2bc <_svfiprintf_r+0x1c0>
 800d2e4:	080138ac 	.word	0x080138ac
 800d2e8:	080138b6 	.word	0x080138b6
 800d2ec:	00000000 	.word	0x00000000
 800d2f0:	0800d049 	.word	0x0800d049
 800d2f4:	080138b2 	.word	0x080138b2

0800d2f8 <__sfputc_r>:
 800d2f8:	6893      	ldr	r3, [r2, #8]
 800d2fa:	3b01      	subs	r3, #1
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	b410      	push	{r4}
 800d300:	6093      	str	r3, [r2, #8]
 800d302:	da08      	bge.n	800d316 <__sfputc_r+0x1e>
 800d304:	6994      	ldr	r4, [r2, #24]
 800d306:	42a3      	cmp	r3, r4
 800d308:	db01      	blt.n	800d30e <__sfputc_r+0x16>
 800d30a:	290a      	cmp	r1, #10
 800d30c:	d103      	bne.n	800d316 <__sfputc_r+0x1e>
 800d30e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d312:	f000 bb37 	b.w	800d984 <__swbuf_r>
 800d316:	6813      	ldr	r3, [r2, #0]
 800d318:	1c58      	adds	r0, r3, #1
 800d31a:	6010      	str	r0, [r2, #0]
 800d31c:	7019      	strb	r1, [r3, #0]
 800d31e:	4608      	mov	r0, r1
 800d320:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d324:	4770      	bx	lr

0800d326 <__sfputs_r>:
 800d326:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d328:	4606      	mov	r6, r0
 800d32a:	460f      	mov	r7, r1
 800d32c:	4614      	mov	r4, r2
 800d32e:	18d5      	adds	r5, r2, r3
 800d330:	42ac      	cmp	r4, r5
 800d332:	d101      	bne.n	800d338 <__sfputs_r+0x12>
 800d334:	2000      	movs	r0, #0
 800d336:	e007      	b.n	800d348 <__sfputs_r+0x22>
 800d338:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d33c:	463a      	mov	r2, r7
 800d33e:	4630      	mov	r0, r6
 800d340:	f7ff ffda 	bl	800d2f8 <__sfputc_r>
 800d344:	1c43      	adds	r3, r0, #1
 800d346:	d1f3      	bne.n	800d330 <__sfputs_r+0xa>
 800d348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d34c <_vfiprintf_r>:
 800d34c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d350:	460d      	mov	r5, r1
 800d352:	b09d      	sub	sp, #116	; 0x74
 800d354:	4614      	mov	r4, r2
 800d356:	4698      	mov	r8, r3
 800d358:	4606      	mov	r6, r0
 800d35a:	b118      	cbz	r0, 800d364 <_vfiprintf_r+0x18>
 800d35c:	6a03      	ldr	r3, [r0, #32]
 800d35e:	b90b      	cbnz	r3, 800d364 <_vfiprintf_r+0x18>
 800d360:	f7ff fcd4 	bl	800cd0c <__sinit>
 800d364:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d366:	07d9      	lsls	r1, r3, #31
 800d368:	d405      	bmi.n	800d376 <_vfiprintf_r+0x2a>
 800d36a:	89ab      	ldrh	r3, [r5, #12]
 800d36c:	059a      	lsls	r2, r3, #22
 800d36e:	d402      	bmi.n	800d376 <_vfiprintf_r+0x2a>
 800d370:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d372:	f7ff fe0d 	bl	800cf90 <__retarget_lock_acquire_recursive>
 800d376:	89ab      	ldrh	r3, [r5, #12]
 800d378:	071b      	lsls	r3, r3, #28
 800d37a:	d501      	bpl.n	800d380 <_vfiprintf_r+0x34>
 800d37c:	692b      	ldr	r3, [r5, #16]
 800d37e:	b99b      	cbnz	r3, 800d3a8 <_vfiprintf_r+0x5c>
 800d380:	4629      	mov	r1, r5
 800d382:	4630      	mov	r0, r6
 800d384:	f000 fb3c 	bl	800da00 <__swsetup_r>
 800d388:	b170      	cbz	r0, 800d3a8 <_vfiprintf_r+0x5c>
 800d38a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d38c:	07dc      	lsls	r4, r3, #31
 800d38e:	d504      	bpl.n	800d39a <_vfiprintf_r+0x4e>
 800d390:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d394:	b01d      	add	sp, #116	; 0x74
 800d396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d39a:	89ab      	ldrh	r3, [r5, #12]
 800d39c:	0598      	lsls	r0, r3, #22
 800d39e:	d4f7      	bmi.n	800d390 <_vfiprintf_r+0x44>
 800d3a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d3a2:	f7ff fdf6 	bl	800cf92 <__retarget_lock_release_recursive>
 800d3a6:	e7f3      	b.n	800d390 <_vfiprintf_r+0x44>
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	9309      	str	r3, [sp, #36]	; 0x24
 800d3ac:	2320      	movs	r3, #32
 800d3ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d3b2:	f8cd 800c 	str.w	r8, [sp, #12]
 800d3b6:	2330      	movs	r3, #48	; 0x30
 800d3b8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d56c <_vfiprintf_r+0x220>
 800d3bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d3c0:	f04f 0901 	mov.w	r9, #1
 800d3c4:	4623      	mov	r3, r4
 800d3c6:	469a      	mov	sl, r3
 800d3c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d3cc:	b10a      	cbz	r2, 800d3d2 <_vfiprintf_r+0x86>
 800d3ce:	2a25      	cmp	r2, #37	; 0x25
 800d3d0:	d1f9      	bne.n	800d3c6 <_vfiprintf_r+0x7a>
 800d3d2:	ebba 0b04 	subs.w	fp, sl, r4
 800d3d6:	d00b      	beq.n	800d3f0 <_vfiprintf_r+0xa4>
 800d3d8:	465b      	mov	r3, fp
 800d3da:	4622      	mov	r2, r4
 800d3dc:	4629      	mov	r1, r5
 800d3de:	4630      	mov	r0, r6
 800d3e0:	f7ff ffa1 	bl	800d326 <__sfputs_r>
 800d3e4:	3001      	adds	r0, #1
 800d3e6:	f000 80a9 	beq.w	800d53c <_vfiprintf_r+0x1f0>
 800d3ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d3ec:	445a      	add	r2, fp
 800d3ee:	9209      	str	r2, [sp, #36]	; 0x24
 800d3f0:	f89a 3000 	ldrb.w	r3, [sl]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	f000 80a1 	beq.w	800d53c <_vfiprintf_r+0x1f0>
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d400:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d404:	f10a 0a01 	add.w	sl, sl, #1
 800d408:	9304      	str	r3, [sp, #16]
 800d40a:	9307      	str	r3, [sp, #28]
 800d40c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d410:	931a      	str	r3, [sp, #104]	; 0x68
 800d412:	4654      	mov	r4, sl
 800d414:	2205      	movs	r2, #5
 800d416:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d41a:	4854      	ldr	r0, [pc, #336]	; (800d56c <_vfiprintf_r+0x220>)
 800d41c:	f7f2 ff50 	bl	80002c0 <memchr>
 800d420:	9a04      	ldr	r2, [sp, #16]
 800d422:	b9d8      	cbnz	r0, 800d45c <_vfiprintf_r+0x110>
 800d424:	06d1      	lsls	r1, r2, #27
 800d426:	bf44      	itt	mi
 800d428:	2320      	movmi	r3, #32
 800d42a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d42e:	0713      	lsls	r3, r2, #28
 800d430:	bf44      	itt	mi
 800d432:	232b      	movmi	r3, #43	; 0x2b
 800d434:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d438:	f89a 3000 	ldrb.w	r3, [sl]
 800d43c:	2b2a      	cmp	r3, #42	; 0x2a
 800d43e:	d015      	beq.n	800d46c <_vfiprintf_r+0x120>
 800d440:	9a07      	ldr	r2, [sp, #28]
 800d442:	4654      	mov	r4, sl
 800d444:	2000      	movs	r0, #0
 800d446:	f04f 0c0a 	mov.w	ip, #10
 800d44a:	4621      	mov	r1, r4
 800d44c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d450:	3b30      	subs	r3, #48	; 0x30
 800d452:	2b09      	cmp	r3, #9
 800d454:	d94d      	bls.n	800d4f2 <_vfiprintf_r+0x1a6>
 800d456:	b1b0      	cbz	r0, 800d486 <_vfiprintf_r+0x13a>
 800d458:	9207      	str	r2, [sp, #28]
 800d45a:	e014      	b.n	800d486 <_vfiprintf_r+0x13a>
 800d45c:	eba0 0308 	sub.w	r3, r0, r8
 800d460:	fa09 f303 	lsl.w	r3, r9, r3
 800d464:	4313      	orrs	r3, r2
 800d466:	9304      	str	r3, [sp, #16]
 800d468:	46a2      	mov	sl, r4
 800d46a:	e7d2      	b.n	800d412 <_vfiprintf_r+0xc6>
 800d46c:	9b03      	ldr	r3, [sp, #12]
 800d46e:	1d19      	adds	r1, r3, #4
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	9103      	str	r1, [sp, #12]
 800d474:	2b00      	cmp	r3, #0
 800d476:	bfbb      	ittet	lt
 800d478:	425b      	neglt	r3, r3
 800d47a:	f042 0202 	orrlt.w	r2, r2, #2
 800d47e:	9307      	strge	r3, [sp, #28]
 800d480:	9307      	strlt	r3, [sp, #28]
 800d482:	bfb8      	it	lt
 800d484:	9204      	strlt	r2, [sp, #16]
 800d486:	7823      	ldrb	r3, [r4, #0]
 800d488:	2b2e      	cmp	r3, #46	; 0x2e
 800d48a:	d10c      	bne.n	800d4a6 <_vfiprintf_r+0x15a>
 800d48c:	7863      	ldrb	r3, [r4, #1]
 800d48e:	2b2a      	cmp	r3, #42	; 0x2a
 800d490:	d134      	bne.n	800d4fc <_vfiprintf_r+0x1b0>
 800d492:	9b03      	ldr	r3, [sp, #12]
 800d494:	1d1a      	adds	r2, r3, #4
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	9203      	str	r2, [sp, #12]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	bfb8      	it	lt
 800d49e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d4a2:	3402      	adds	r4, #2
 800d4a4:	9305      	str	r3, [sp, #20]
 800d4a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d57c <_vfiprintf_r+0x230>
 800d4aa:	7821      	ldrb	r1, [r4, #0]
 800d4ac:	2203      	movs	r2, #3
 800d4ae:	4650      	mov	r0, sl
 800d4b0:	f7f2 ff06 	bl	80002c0 <memchr>
 800d4b4:	b138      	cbz	r0, 800d4c6 <_vfiprintf_r+0x17a>
 800d4b6:	9b04      	ldr	r3, [sp, #16]
 800d4b8:	eba0 000a 	sub.w	r0, r0, sl
 800d4bc:	2240      	movs	r2, #64	; 0x40
 800d4be:	4082      	lsls	r2, r0
 800d4c0:	4313      	orrs	r3, r2
 800d4c2:	3401      	adds	r4, #1
 800d4c4:	9304      	str	r3, [sp, #16]
 800d4c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4ca:	4829      	ldr	r0, [pc, #164]	; (800d570 <_vfiprintf_r+0x224>)
 800d4cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d4d0:	2206      	movs	r2, #6
 800d4d2:	f7f2 fef5 	bl	80002c0 <memchr>
 800d4d6:	2800      	cmp	r0, #0
 800d4d8:	d03f      	beq.n	800d55a <_vfiprintf_r+0x20e>
 800d4da:	4b26      	ldr	r3, [pc, #152]	; (800d574 <_vfiprintf_r+0x228>)
 800d4dc:	bb1b      	cbnz	r3, 800d526 <_vfiprintf_r+0x1da>
 800d4de:	9b03      	ldr	r3, [sp, #12]
 800d4e0:	3307      	adds	r3, #7
 800d4e2:	f023 0307 	bic.w	r3, r3, #7
 800d4e6:	3308      	adds	r3, #8
 800d4e8:	9303      	str	r3, [sp, #12]
 800d4ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4ec:	443b      	add	r3, r7
 800d4ee:	9309      	str	r3, [sp, #36]	; 0x24
 800d4f0:	e768      	b.n	800d3c4 <_vfiprintf_r+0x78>
 800d4f2:	fb0c 3202 	mla	r2, ip, r2, r3
 800d4f6:	460c      	mov	r4, r1
 800d4f8:	2001      	movs	r0, #1
 800d4fa:	e7a6      	b.n	800d44a <_vfiprintf_r+0xfe>
 800d4fc:	2300      	movs	r3, #0
 800d4fe:	3401      	adds	r4, #1
 800d500:	9305      	str	r3, [sp, #20]
 800d502:	4619      	mov	r1, r3
 800d504:	f04f 0c0a 	mov.w	ip, #10
 800d508:	4620      	mov	r0, r4
 800d50a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d50e:	3a30      	subs	r2, #48	; 0x30
 800d510:	2a09      	cmp	r2, #9
 800d512:	d903      	bls.n	800d51c <_vfiprintf_r+0x1d0>
 800d514:	2b00      	cmp	r3, #0
 800d516:	d0c6      	beq.n	800d4a6 <_vfiprintf_r+0x15a>
 800d518:	9105      	str	r1, [sp, #20]
 800d51a:	e7c4      	b.n	800d4a6 <_vfiprintf_r+0x15a>
 800d51c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d520:	4604      	mov	r4, r0
 800d522:	2301      	movs	r3, #1
 800d524:	e7f0      	b.n	800d508 <_vfiprintf_r+0x1bc>
 800d526:	ab03      	add	r3, sp, #12
 800d528:	9300      	str	r3, [sp, #0]
 800d52a:	462a      	mov	r2, r5
 800d52c:	4b12      	ldr	r3, [pc, #72]	; (800d578 <_vfiprintf_r+0x22c>)
 800d52e:	a904      	add	r1, sp, #16
 800d530:	4630      	mov	r0, r6
 800d532:	f3af 8000 	nop.w
 800d536:	4607      	mov	r7, r0
 800d538:	1c78      	adds	r0, r7, #1
 800d53a:	d1d6      	bne.n	800d4ea <_vfiprintf_r+0x19e>
 800d53c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d53e:	07d9      	lsls	r1, r3, #31
 800d540:	d405      	bmi.n	800d54e <_vfiprintf_r+0x202>
 800d542:	89ab      	ldrh	r3, [r5, #12]
 800d544:	059a      	lsls	r2, r3, #22
 800d546:	d402      	bmi.n	800d54e <_vfiprintf_r+0x202>
 800d548:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d54a:	f7ff fd22 	bl	800cf92 <__retarget_lock_release_recursive>
 800d54e:	89ab      	ldrh	r3, [r5, #12]
 800d550:	065b      	lsls	r3, r3, #25
 800d552:	f53f af1d 	bmi.w	800d390 <_vfiprintf_r+0x44>
 800d556:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d558:	e71c      	b.n	800d394 <_vfiprintf_r+0x48>
 800d55a:	ab03      	add	r3, sp, #12
 800d55c:	9300      	str	r3, [sp, #0]
 800d55e:	462a      	mov	r2, r5
 800d560:	4b05      	ldr	r3, [pc, #20]	; (800d578 <_vfiprintf_r+0x22c>)
 800d562:	a904      	add	r1, sp, #16
 800d564:	4630      	mov	r0, r6
 800d566:	f000 f879 	bl	800d65c <_printf_i>
 800d56a:	e7e4      	b.n	800d536 <_vfiprintf_r+0x1ea>
 800d56c:	080138ac 	.word	0x080138ac
 800d570:	080138b6 	.word	0x080138b6
 800d574:	00000000 	.word	0x00000000
 800d578:	0800d327 	.word	0x0800d327
 800d57c:	080138b2 	.word	0x080138b2

0800d580 <_printf_common>:
 800d580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d584:	4616      	mov	r6, r2
 800d586:	4699      	mov	r9, r3
 800d588:	688a      	ldr	r2, [r1, #8]
 800d58a:	690b      	ldr	r3, [r1, #16]
 800d58c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d590:	4293      	cmp	r3, r2
 800d592:	bfb8      	it	lt
 800d594:	4613      	movlt	r3, r2
 800d596:	6033      	str	r3, [r6, #0]
 800d598:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d59c:	4607      	mov	r7, r0
 800d59e:	460c      	mov	r4, r1
 800d5a0:	b10a      	cbz	r2, 800d5a6 <_printf_common+0x26>
 800d5a2:	3301      	adds	r3, #1
 800d5a4:	6033      	str	r3, [r6, #0]
 800d5a6:	6823      	ldr	r3, [r4, #0]
 800d5a8:	0699      	lsls	r1, r3, #26
 800d5aa:	bf42      	ittt	mi
 800d5ac:	6833      	ldrmi	r3, [r6, #0]
 800d5ae:	3302      	addmi	r3, #2
 800d5b0:	6033      	strmi	r3, [r6, #0]
 800d5b2:	6825      	ldr	r5, [r4, #0]
 800d5b4:	f015 0506 	ands.w	r5, r5, #6
 800d5b8:	d106      	bne.n	800d5c8 <_printf_common+0x48>
 800d5ba:	f104 0a19 	add.w	sl, r4, #25
 800d5be:	68e3      	ldr	r3, [r4, #12]
 800d5c0:	6832      	ldr	r2, [r6, #0]
 800d5c2:	1a9b      	subs	r3, r3, r2
 800d5c4:	42ab      	cmp	r3, r5
 800d5c6:	dc26      	bgt.n	800d616 <_printf_common+0x96>
 800d5c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d5cc:	1e13      	subs	r3, r2, #0
 800d5ce:	6822      	ldr	r2, [r4, #0]
 800d5d0:	bf18      	it	ne
 800d5d2:	2301      	movne	r3, #1
 800d5d4:	0692      	lsls	r2, r2, #26
 800d5d6:	d42b      	bmi.n	800d630 <_printf_common+0xb0>
 800d5d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d5dc:	4649      	mov	r1, r9
 800d5de:	4638      	mov	r0, r7
 800d5e0:	47c0      	blx	r8
 800d5e2:	3001      	adds	r0, #1
 800d5e4:	d01e      	beq.n	800d624 <_printf_common+0xa4>
 800d5e6:	6823      	ldr	r3, [r4, #0]
 800d5e8:	6922      	ldr	r2, [r4, #16]
 800d5ea:	f003 0306 	and.w	r3, r3, #6
 800d5ee:	2b04      	cmp	r3, #4
 800d5f0:	bf02      	ittt	eq
 800d5f2:	68e5      	ldreq	r5, [r4, #12]
 800d5f4:	6833      	ldreq	r3, [r6, #0]
 800d5f6:	1aed      	subeq	r5, r5, r3
 800d5f8:	68a3      	ldr	r3, [r4, #8]
 800d5fa:	bf0c      	ite	eq
 800d5fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d600:	2500      	movne	r5, #0
 800d602:	4293      	cmp	r3, r2
 800d604:	bfc4      	itt	gt
 800d606:	1a9b      	subgt	r3, r3, r2
 800d608:	18ed      	addgt	r5, r5, r3
 800d60a:	2600      	movs	r6, #0
 800d60c:	341a      	adds	r4, #26
 800d60e:	42b5      	cmp	r5, r6
 800d610:	d11a      	bne.n	800d648 <_printf_common+0xc8>
 800d612:	2000      	movs	r0, #0
 800d614:	e008      	b.n	800d628 <_printf_common+0xa8>
 800d616:	2301      	movs	r3, #1
 800d618:	4652      	mov	r2, sl
 800d61a:	4649      	mov	r1, r9
 800d61c:	4638      	mov	r0, r7
 800d61e:	47c0      	blx	r8
 800d620:	3001      	adds	r0, #1
 800d622:	d103      	bne.n	800d62c <_printf_common+0xac>
 800d624:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d628:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d62c:	3501      	adds	r5, #1
 800d62e:	e7c6      	b.n	800d5be <_printf_common+0x3e>
 800d630:	18e1      	adds	r1, r4, r3
 800d632:	1c5a      	adds	r2, r3, #1
 800d634:	2030      	movs	r0, #48	; 0x30
 800d636:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d63a:	4422      	add	r2, r4
 800d63c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d640:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d644:	3302      	adds	r3, #2
 800d646:	e7c7      	b.n	800d5d8 <_printf_common+0x58>
 800d648:	2301      	movs	r3, #1
 800d64a:	4622      	mov	r2, r4
 800d64c:	4649      	mov	r1, r9
 800d64e:	4638      	mov	r0, r7
 800d650:	47c0      	blx	r8
 800d652:	3001      	adds	r0, #1
 800d654:	d0e6      	beq.n	800d624 <_printf_common+0xa4>
 800d656:	3601      	adds	r6, #1
 800d658:	e7d9      	b.n	800d60e <_printf_common+0x8e>
	...

0800d65c <_printf_i>:
 800d65c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d660:	7e0f      	ldrb	r7, [r1, #24]
 800d662:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d664:	2f78      	cmp	r7, #120	; 0x78
 800d666:	4691      	mov	r9, r2
 800d668:	4680      	mov	r8, r0
 800d66a:	460c      	mov	r4, r1
 800d66c:	469a      	mov	sl, r3
 800d66e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d672:	d807      	bhi.n	800d684 <_printf_i+0x28>
 800d674:	2f62      	cmp	r7, #98	; 0x62
 800d676:	d80a      	bhi.n	800d68e <_printf_i+0x32>
 800d678:	2f00      	cmp	r7, #0
 800d67a:	f000 80d4 	beq.w	800d826 <_printf_i+0x1ca>
 800d67e:	2f58      	cmp	r7, #88	; 0x58
 800d680:	f000 80c0 	beq.w	800d804 <_printf_i+0x1a8>
 800d684:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d688:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d68c:	e03a      	b.n	800d704 <_printf_i+0xa8>
 800d68e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d692:	2b15      	cmp	r3, #21
 800d694:	d8f6      	bhi.n	800d684 <_printf_i+0x28>
 800d696:	a101      	add	r1, pc, #4	; (adr r1, 800d69c <_printf_i+0x40>)
 800d698:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d69c:	0800d6f5 	.word	0x0800d6f5
 800d6a0:	0800d709 	.word	0x0800d709
 800d6a4:	0800d685 	.word	0x0800d685
 800d6a8:	0800d685 	.word	0x0800d685
 800d6ac:	0800d685 	.word	0x0800d685
 800d6b0:	0800d685 	.word	0x0800d685
 800d6b4:	0800d709 	.word	0x0800d709
 800d6b8:	0800d685 	.word	0x0800d685
 800d6bc:	0800d685 	.word	0x0800d685
 800d6c0:	0800d685 	.word	0x0800d685
 800d6c4:	0800d685 	.word	0x0800d685
 800d6c8:	0800d80d 	.word	0x0800d80d
 800d6cc:	0800d735 	.word	0x0800d735
 800d6d0:	0800d7c7 	.word	0x0800d7c7
 800d6d4:	0800d685 	.word	0x0800d685
 800d6d8:	0800d685 	.word	0x0800d685
 800d6dc:	0800d82f 	.word	0x0800d82f
 800d6e0:	0800d685 	.word	0x0800d685
 800d6e4:	0800d735 	.word	0x0800d735
 800d6e8:	0800d685 	.word	0x0800d685
 800d6ec:	0800d685 	.word	0x0800d685
 800d6f0:	0800d7cf 	.word	0x0800d7cf
 800d6f4:	682b      	ldr	r3, [r5, #0]
 800d6f6:	1d1a      	adds	r2, r3, #4
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	602a      	str	r2, [r5, #0]
 800d6fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d700:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d704:	2301      	movs	r3, #1
 800d706:	e09f      	b.n	800d848 <_printf_i+0x1ec>
 800d708:	6820      	ldr	r0, [r4, #0]
 800d70a:	682b      	ldr	r3, [r5, #0]
 800d70c:	0607      	lsls	r7, r0, #24
 800d70e:	f103 0104 	add.w	r1, r3, #4
 800d712:	6029      	str	r1, [r5, #0]
 800d714:	d501      	bpl.n	800d71a <_printf_i+0xbe>
 800d716:	681e      	ldr	r6, [r3, #0]
 800d718:	e003      	b.n	800d722 <_printf_i+0xc6>
 800d71a:	0646      	lsls	r6, r0, #25
 800d71c:	d5fb      	bpl.n	800d716 <_printf_i+0xba>
 800d71e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d722:	2e00      	cmp	r6, #0
 800d724:	da03      	bge.n	800d72e <_printf_i+0xd2>
 800d726:	232d      	movs	r3, #45	; 0x2d
 800d728:	4276      	negs	r6, r6
 800d72a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d72e:	485a      	ldr	r0, [pc, #360]	; (800d898 <_printf_i+0x23c>)
 800d730:	230a      	movs	r3, #10
 800d732:	e012      	b.n	800d75a <_printf_i+0xfe>
 800d734:	682b      	ldr	r3, [r5, #0]
 800d736:	6820      	ldr	r0, [r4, #0]
 800d738:	1d19      	adds	r1, r3, #4
 800d73a:	6029      	str	r1, [r5, #0]
 800d73c:	0605      	lsls	r5, r0, #24
 800d73e:	d501      	bpl.n	800d744 <_printf_i+0xe8>
 800d740:	681e      	ldr	r6, [r3, #0]
 800d742:	e002      	b.n	800d74a <_printf_i+0xee>
 800d744:	0641      	lsls	r1, r0, #25
 800d746:	d5fb      	bpl.n	800d740 <_printf_i+0xe4>
 800d748:	881e      	ldrh	r6, [r3, #0]
 800d74a:	4853      	ldr	r0, [pc, #332]	; (800d898 <_printf_i+0x23c>)
 800d74c:	2f6f      	cmp	r7, #111	; 0x6f
 800d74e:	bf0c      	ite	eq
 800d750:	2308      	moveq	r3, #8
 800d752:	230a      	movne	r3, #10
 800d754:	2100      	movs	r1, #0
 800d756:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d75a:	6865      	ldr	r5, [r4, #4]
 800d75c:	60a5      	str	r5, [r4, #8]
 800d75e:	2d00      	cmp	r5, #0
 800d760:	bfa2      	ittt	ge
 800d762:	6821      	ldrge	r1, [r4, #0]
 800d764:	f021 0104 	bicge.w	r1, r1, #4
 800d768:	6021      	strge	r1, [r4, #0]
 800d76a:	b90e      	cbnz	r6, 800d770 <_printf_i+0x114>
 800d76c:	2d00      	cmp	r5, #0
 800d76e:	d04b      	beq.n	800d808 <_printf_i+0x1ac>
 800d770:	4615      	mov	r5, r2
 800d772:	fbb6 f1f3 	udiv	r1, r6, r3
 800d776:	fb03 6711 	mls	r7, r3, r1, r6
 800d77a:	5dc7      	ldrb	r7, [r0, r7]
 800d77c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d780:	4637      	mov	r7, r6
 800d782:	42bb      	cmp	r3, r7
 800d784:	460e      	mov	r6, r1
 800d786:	d9f4      	bls.n	800d772 <_printf_i+0x116>
 800d788:	2b08      	cmp	r3, #8
 800d78a:	d10b      	bne.n	800d7a4 <_printf_i+0x148>
 800d78c:	6823      	ldr	r3, [r4, #0]
 800d78e:	07de      	lsls	r6, r3, #31
 800d790:	d508      	bpl.n	800d7a4 <_printf_i+0x148>
 800d792:	6923      	ldr	r3, [r4, #16]
 800d794:	6861      	ldr	r1, [r4, #4]
 800d796:	4299      	cmp	r1, r3
 800d798:	bfde      	ittt	le
 800d79a:	2330      	movle	r3, #48	; 0x30
 800d79c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d7a0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d7a4:	1b52      	subs	r2, r2, r5
 800d7a6:	6122      	str	r2, [r4, #16]
 800d7a8:	f8cd a000 	str.w	sl, [sp]
 800d7ac:	464b      	mov	r3, r9
 800d7ae:	aa03      	add	r2, sp, #12
 800d7b0:	4621      	mov	r1, r4
 800d7b2:	4640      	mov	r0, r8
 800d7b4:	f7ff fee4 	bl	800d580 <_printf_common>
 800d7b8:	3001      	adds	r0, #1
 800d7ba:	d14a      	bne.n	800d852 <_printf_i+0x1f6>
 800d7bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d7c0:	b004      	add	sp, #16
 800d7c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7c6:	6823      	ldr	r3, [r4, #0]
 800d7c8:	f043 0320 	orr.w	r3, r3, #32
 800d7cc:	6023      	str	r3, [r4, #0]
 800d7ce:	4833      	ldr	r0, [pc, #204]	; (800d89c <_printf_i+0x240>)
 800d7d0:	2778      	movs	r7, #120	; 0x78
 800d7d2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d7d6:	6823      	ldr	r3, [r4, #0]
 800d7d8:	6829      	ldr	r1, [r5, #0]
 800d7da:	061f      	lsls	r7, r3, #24
 800d7dc:	f851 6b04 	ldr.w	r6, [r1], #4
 800d7e0:	d402      	bmi.n	800d7e8 <_printf_i+0x18c>
 800d7e2:	065f      	lsls	r7, r3, #25
 800d7e4:	bf48      	it	mi
 800d7e6:	b2b6      	uxthmi	r6, r6
 800d7e8:	07df      	lsls	r7, r3, #31
 800d7ea:	bf48      	it	mi
 800d7ec:	f043 0320 	orrmi.w	r3, r3, #32
 800d7f0:	6029      	str	r1, [r5, #0]
 800d7f2:	bf48      	it	mi
 800d7f4:	6023      	strmi	r3, [r4, #0]
 800d7f6:	b91e      	cbnz	r6, 800d800 <_printf_i+0x1a4>
 800d7f8:	6823      	ldr	r3, [r4, #0]
 800d7fa:	f023 0320 	bic.w	r3, r3, #32
 800d7fe:	6023      	str	r3, [r4, #0]
 800d800:	2310      	movs	r3, #16
 800d802:	e7a7      	b.n	800d754 <_printf_i+0xf8>
 800d804:	4824      	ldr	r0, [pc, #144]	; (800d898 <_printf_i+0x23c>)
 800d806:	e7e4      	b.n	800d7d2 <_printf_i+0x176>
 800d808:	4615      	mov	r5, r2
 800d80a:	e7bd      	b.n	800d788 <_printf_i+0x12c>
 800d80c:	682b      	ldr	r3, [r5, #0]
 800d80e:	6826      	ldr	r6, [r4, #0]
 800d810:	6961      	ldr	r1, [r4, #20]
 800d812:	1d18      	adds	r0, r3, #4
 800d814:	6028      	str	r0, [r5, #0]
 800d816:	0635      	lsls	r5, r6, #24
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	d501      	bpl.n	800d820 <_printf_i+0x1c4>
 800d81c:	6019      	str	r1, [r3, #0]
 800d81e:	e002      	b.n	800d826 <_printf_i+0x1ca>
 800d820:	0670      	lsls	r0, r6, #25
 800d822:	d5fb      	bpl.n	800d81c <_printf_i+0x1c0>
 800d824:	8019      	strh	r1, [r3, #0]
 800d826:	2300      	movs	r3, #0
 800d828:	6123      	str	r3, [r4, #16]
 800d82a:	4615      	mov	r5, r2
 800d82c:	e7bc      	b.n	800d7a8 <_printf_i+0x14c>
 800d82e:	682b      	ldr	r3, [r5, #0]
 800d830:	1d1a      	adds	r2, r3, #4
 800d832:	602a      	str	r2, [r5, #0]
 800d834:	681d      	ldr	r5, [r3, #0]
 800d836:	6862      	ldr	r2, [r4, #4]
 800d838:	2100      	movs	r1, #0
 800d83a:	4628      	mov	r0, r5
 800d83c:	f7f2 fd40 	bl	80002c0 <memchr>
 800d840:	b108      	cbz	r0, 800d846 <_printf_i+0x1ea>
 800d842:	1b40      	subs	r0, r0, r5
 800d844:	6060      	str	r0, [r4, #4]
 800d846:	6863      	ldr	r3, [r4, #4]
 800d848:	6123      	str	r3, [r4, #16]
 800d84a:	2300      	movs	r3, #0
 800d84c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d850:	e7aa      	b.n	800d7a8 <_printf_i+0x14c>
 800d852:	6923      	ldr	r3, [r4, #16]
 800d854:	462a      	mov	r2, r5
 800d856:	4649      	mov	r1, r9
 800d858:	4640      	mov	r0, r8
 800d85a:	47d0      	blx	sl
 800d85c:	3001      	adds	r0, #1
 800d85e:	d0ad      	beq.n	800d7bc <_printf_i+0x160>
 800d860:	6823      	ldr	r3, [r4, #0]
 800d862:	079b      	lsls	r3, r3, #30
 800d864:	d413      	bmi.n	800d88e <_printf_i+0x232>
 800d866:	68e0      	ldr	r0, [r4, #12]
 800d868:	9b03      	ldr	r3, [sp, #12]
 800d86a:	4298      	cmp	r0, r3
 800d86c:	bfb8      	it	lt
 800d86e:	4618      	movlt	r0, r3
 800d870:	e7a6      	b.n	800d7c0 <_printf_i+0x164>
 800d872:	2301      	movs	r3, #1
 800d874:	4632      	mov	r2, r6
 800d876:	4649      	mov	r1, r9
 800d878:	4640      	mov	r0, r8
 800d87a:	47d0      	blx	sl
 800d87c:	3001      	adds	r0, #1
 800d87e:	d09d      	beq.n	800d7bc <_printf_i+0x160>
 800d880:	3501      	adds	r5, #1
 800d882:	68e3      	ldr	r3, [r4, #12]
 800d884:	9903      	ldr	r1, [sp, #12]
 800d886:	1a5b      	subs	r3, r3, r1
 800d888:	42ab      	cmp	r3, r5
 800d88a:	dcf2      	bgt.n	800d872 <_printf_i+0x216>
 800d88c:	e7eb      	b.n	800d866 <_printf_i+0x20a>
 800d88e:	2500      	movs	r5, #0
 800d890:	f104 0619 	add.w	r6, r4, #25
 800d894:	e7f5      	b.n	800d882 <_printf_i+0x226>
 800d896:	bf00      	nop
 800d898:	080138bd 	.word	0x080138bd
 800d89c:	080138ce 	.word	0x080138ce

0800d8a0 <__sread>:
 800d8a0:	b510      	push	{r4, lr}
 800d8a2:	460c      	mov	r4, r1
 800d8a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8a8:	f000 f9dc 	bl	800dc64 <_read_r>
 800d8ac:	2800      	cmp	r0, #0
 800d8ae:	bfab      	itete	ge
 800d8b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d8b2:	89a3      	ldrhlt	r3, [r4, #12]
 800d8b4:	181b      	addge	r3, r3, r0
 800d8b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d8ba:	bfac      	ite	ge
 800d8bc:	6563      	strge	r3, [r4, #84]	; 0x54
 800d8be:	81a3      	strhlt	r3, [r4, #12]
 800d8c0:	bd10      	pop	{r4, pc}

0800d8c2 <__swrite>:
 800d8c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8c6:	461f      	mov	r7, r3
 800d8c8:	898b      	ldrh	r3, [r1, #12]
 800d8ca:	05db      	lsls	r3, r3, #23
 800d8cc:	4605      	mov	r5, r0
 800d8ce:	460c      	mov	r4, r1
 800d8d0:	4616      	mov	r6, r2
 800d8d2:	d505      	bpl.n	800d8e0 <__swrite+0x1e>
 800d8d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8d8:	2302      	movs	r3, #2
 800d8da:	2200      	movs	r2, #0
 800d8dc:	f000 f9b0 	bl	800dc40 <_lseek_r>
 800d8e0:	89a3      	ldrh	r3, [r4, #12]
 800d8e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d8e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d8ea:	81a3      	strh	r3, [r4, #12]
 800d8ec:	4632      	mov	r2, r6
 800d8ee:	463b      	mov	r3, r7
 800d8f0:	4628      	mov	r0, r5
 800d8f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d8f6:	f000 b9c7 	b.w	800dc88 <_write_r>

0800d8fa <__sseek>:
 800d8fa:	b510      	push	{r4, lr}
 800d8fc:	460c      	mov	r4, r1
 800d8fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d902:	f000 f99d 	bl	800dc40 <_lseek_r>
 800d906:	1c43      	adds	r3, r0, #1
 800d908:	89a3      	ldrh	r3, [r4, #12]
 800d90a:	bf15      	itete	ne
 800d90c:	6560      	strne	r0, [r4, #84]	; 0x54
 800d90e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d912:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d916:	81a3      	strheq	r3, [r4, #12]
 800d918:	bf18      	it	ne
 800d91a:	81a3      	strhne	r3, [r4, #12]
 800d91c:	bd10      	pop	{r4, pc}

0800d91e <__sclose>:
 800d91e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d922:	f000 b95b 	b.w	800dbdc <_close_r>

0800d926 <_realloc_r>:
 800d926:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d92a:	4680      	mov	r8, r0
 800d92c:	4614      	mov	r4, r2
 800d92e:	460e      	mov	r6, r1
 800d930:	b921      	cbnz	r1, 800d93c <_realloc_r+0x16>
 800d932:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d936:	4611      	mov	r1, r2
 800d938:	f7ff b820 	b.w	800c97c <_malloc_r>
 800d93c:	b92a      	cbnz	r2, 800d94a <_realloc_r+0x24>
 800d93e:	f7ff fb37 	bl	800cfb0 <_free_r>
 800d942:	4625      	mov	r5, r4
 800d944:	4628      	mov	r0, r5
 800d946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d94a:	f000 f9af 	bl	800dcac <_malloc_usable_size_r>
 800d94e:	4284      	cmp	r4, r0
 800d950:	4607      	mov	r7, r0
 800d952:	d802      	bhi.n	800d95a <_realloc_r+0x34>
 800d954:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d958:	d812      	bhi.n	800d980 <_realloc_r+0x5a>
 800d95a:	4621      	mov	r1, r4
 800d95c:	4640      	mov	r0, r8
 800d95e:	f7ff f80d 	bl	800c97c <_malloc_r>
 800d962:	4605      	mov	r5, r0
 800d964:	2800      	cmp	r0, #0
 800d966:	d0ed      	beq.n	800d944 <_realloc_r+0x1e>
 800d968:	42bc      	cmp	r4, r7
 800d96a:	4622      	mov	r2, r4
 800d96c:	4631      	mov	r1, r6
 800d96e:	bf28      	it	cs
 800d970:	463a      	movcs	r2, r7
 800d972:	f7ff fb0f 	bl	800cf94 <memcpy>
 800d976:	4631      	mov	r1, r6
 800d978:	4640      	mov	r0, r8
 800d97a:	f7ff fb19 	bl	800cfb0 <_free_r>
 800d97e:	e7e1      	b.n	800d944 <_realloc_r+0x1e>
 800d980:	4635      	mov	r5, r6
 800d982:	e7df      	b.n	800d944 <_realloc_r+0x1e>

0800d984 <__swbuf_r>:
 800d984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d986:	460e      	mov	r6, r1
 800d988:	4614      	mov	r4, r2
 800d98a:	4605      	mov	r5, r0
 800d98c:	b118      	cbz	r0, 800d996 <__swbuf_r+0x12>
 800d98e:	6a03      	ldr	r3, [r0, #32]
 800d990:	b90b      	cbnz	r3, 800d996 <__swbuf_r+0x12>
 800d992:	f7ff f9bb 	bl	800cd0c <__sinit>
 800d996:	69a3      	ldr	r3, [r4, #24]
 800d998:	60a3      	str	r3, [r4, #8]
 800d99a:	89a3      	ldrh	r3, [r4, #12]
 800d99c:	071a      	lsls	r2, r3, #28
 800d99e:	d525      	bpl.n	800d9ec <__swbuf_r+0x68>
 800d9a0:	6923      	ldr	r3, [r4, #16]
 800d9a2:	b31b      	cbz	r3, 800d9ec <__swbuf_r+0x68>
 800d9a4:	6823      	ldr	r3, [r4, #0]
 800d9a6:	6922      	ldr	r2, [r4, #16]
 800d9a8:	1a98      	subs	r0, r3, r2
 800d9aa:	6963      	ldr	r3, [r4, #20]
 800d9ac:	b2f6      	uxtb	r6, r6
 800d9ae:	4283      	cmp	r3, r0
 800d9b0:	4637      	mov	r7, r6
 800d9b2:	dc04      	bgt.n	800d9be <__swbuf_r+0x3a>
 800d9b4:	4621      	mov	r1, r4
 800d9b6:	4628      	mov	r0, r5
 800d9b8:	f7ff f8e6 	bl	800cb88 <_fflush_r>
 800d9bc:	b9e0      	cbnz	r0, 800d9f8 <__swbuf_r+0x74>
 800d9be:	68a3      	ldr	r3, [r4, #8]
 800d9c0:	3b01      	subs	r3, #1
 800d9c2:	60a3      	str	r3, [r4, #8]
 800d9c4:	6823      	ldr	r3, [r4, #0]
 800d9c6:	1c5a      	adds	r2, r3, #1
 800d9c8:	6022      	str	r2, [r4, #0]
 800d9ca:	701e      	strb	r6, [r3, #0]
 800d9cc:	6962      	ldr	r2, [r4, #20]
 800d9ce:	1c43      	adds	r3, r0, #1
 800d9d0:	429a      	cmp	r2, r3
 800d9d2:	d004      	beq.n	800d9de <__swbuf_r+0x5a>
 800d9d4:	89a3      	ldrh	r3, [r4, #12]
 800d9d6:	07db      	lsls	r3, r3, #31
 800d9d8:	d506      	bpl.n	800d9e8 <__swbuf_r+0x64>
 800d9da:	2e0a      	cmp	r6, #10
 800d9dc:	d104      	bne.n	800d9e8 <__swbuf_r+0x64>
 800d9de:	4621      	mov	r1, r4
 800d9e0:	4628      	mov	r0, r5
 800d9e2:	f7ff f8d1 	bl	800cb88 <_fflush_r>
 800d9e6:	b938      	cbnz	r0, 800d9f8 <__swbuf_r+0x74>
 800d9e8:	4638      	mov	r0, r7
 800d9ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d9ec:	4621      	mov	r1, r4
 800d9ee:	4628      	mov	r0, r5
 800d9f0:	f000 f806 	bl	800da00 <__swsetup_r>
 800d9f4:	2800      	cmp	r0, #0
 800d9f6:	d0d5      	beq.n	800d9a4 <__swbuf_r+0x20>
 800d9f8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800d9fc:	e7f4      	b.n	800d9e8 <__swbuf_r+0x64>
	...

0800da00 <__swsetup_r>:
 800da00:	b538      	push	{r3, r4, r5, lr}
 800da02:	4b2a      	ldr	r3, [pc, #168]	; (800daac <__swsetup_r+0xac>)
 800da04:	4605      	mov	r5, r0
 800da06:	6818      	ldr	r0, [r3, #0]
 800da08:	460c      	mov	r4, r1
 800da0a:	b118      	cbz	r0, 800da14 <__swsetup_r+0x14>
 800da0c:	6a03      	ldr	r3, [r0, #32]
 800da0e:	b90b      	cbnz	r3, 800da14 <__swsetup_r+0x14>
 800da10:	f7ff f97c 	bl	800cd0c <__sinit>
 800da14:	89a3      	ldrh	r3, [r4, #12]
 800da16:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800da1a:	0718      	lsls	r0, r3, #28
 800da1c:	d422      	bmi.n	800da64 <__swsetup_r+0x64>
 800da1e:	06d9      	lsls	r1, r3, #27
 800da20:	d407      	bmi.n	800da32 <__swsetup_r+0x32>
 800da22:	2309      	movs	r3, #9
 800da24:	602b      	str	r3, [r5, #0]
 800da26:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800da2a:	81a3      	strh	r3, [r4, #12]
 800da2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800da30:	e034      	b.n	800da9c <__swsetup_r+0x9c>
 800da32:	0758      	lsls	r0, r3, #29
 800da34:	d512      	bpl.n	800da5c <__swsetup_r+0x5c>
 800da36:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800da38:	b141      	cbz	r1, 800da4c <__swsetup_r+0x4c>
 800da3a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800da3e:	4299      	cmp	r1, r3
 800da40:	d002      	beq.n	800da48 <__swsetup_r+0x48>
 800da42:	4628      	mov	r0, r5
 800da44:	f7ff fab4 	bl	800cfb0 <_free_r>
 800da48:	2300      	movs	r3, #0
 800da4a:	6363      	str	r3, [r4, #52]	; 0x34
 800da4c:	89a3      	ldrh	r3, [r4, #12]
 800da4e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800da52:	81a3      	strh	r3, [r4, #12]
 800da54:	2300      	movs	r3, #0
 800da56:	6063      	str	r3, [r4, #4]
 800da58:	6923      	ldr	r3, [r4, #16]
 800da5a:	6023      	str	r3, [r4, #0]
 800da5c:	89a3      	ldrh	r3, [r4, #12]
 800da5e:	f043 0308 	orr.w	r3, r3, #8
 800da62:	81a3      	strh	r3, [r4, #12]
 800da64:	6923      	ldr	r3, [r4, #16]
 800da66:	b94b      	cbnz	r3, 800da7c <__swsetup_r+0x7c>
 800da68:	89a3      	ldrh	r3, [r4, #12]
 800da6a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800da6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800da72:	d003      	beq.n	800da7c <__swsetup_r+0x7c>
 800da74:	4621      	mov	r1, r4
 800da76:	4628      	mov	r0, r5
 800da78:	f000 f840 	bl	800dafc <__smakebuf_r>
 800da7c:	89a0      	ldrh	r0, [r4, #12]
 800da7e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800da82:	f010 0301 	ands.w	r3, r0, #1
 800da86:	d00a      	beq.n	800da9e <__swsetup_r+0x9e>
 800da88:	2300      	movs	r3, #0
 800da8a:	60a3      	str	r3, [r4, #8]
 800da8c:	6963      	ldr	r3, [r4, #20]
 800da8e:	425b      	negs	r3, r3
 800da90:	61a3      	str	r3, [r4, #24]
 800da92:	6923      	ldr	r3, [r4, #16]
 800da94:	b943      	cbnz	r3, 800daa8 <__swsetup_r+0xa8>
 800da96:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800da9a:	d1c4      	bne.n	800da26 <__swsetup_r+0x26>
 800da9c:	bd38      	pop	{r3, r4, r5, pc}
 800da9e:	0781      	lsls	r1, r0, #30
 800daa0:	bf58      	it	pl
 800daa2:	6963      	ldrpl	r3, [r4, #20]
 800daa4:	60a3      	str	r3, [r4, #8]
 800daa6:	e7f4      	b.n	800da92 <__swsetup_r+0x92>
 800daa8:	2000      	movs	r0, #0
 800daaa:	e7f7      	b.n	800da9c <__swsetup_r+0x9c>
 800daac:	200001e4 	.word	0x200001e4

0800dab0 <__swhatbuf_r>:
 800dab0:	b570      	push	{r4, r5, r6, lr}
 800dab2:	460c      	mov	r4, r1
 800dab4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dab8:	2900      	cmp	r1, #0
 800daba:	b096      	sub	sp, #88	; 0x58
 800dabc:	4615      	mov	r5, r2
 800dabe:	461e      	mov	r6, r3
 800dac0:	da0d      	bge.n	800dade <__swhatbuf_r+0x2e>
 800dac2:	89a3      	ldrh	r3, [r4, #12]
 800dac4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800dac8:	f04f 0100 	mov.w	r1, #0
 800dacc:	bf0c      	ite	eq
 800dace:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800dad2:	2340      	movne	r3, #64	; 0x40
 800dad4:	2000      	movs	r0, #0
 800dad6:	6031      	str	r1, [r6, #0]
 800dad8:	602b      	str	r3, [r5, #0]
 800dada:	b016      	add	sp, #88	; 0x58
 800dadc:	bd70      	pop	{r4, r5, r6, pc}
 800dade:	466a      	mov	r2, sp
 800dae0:	f000 f88c 	bl	800dbfc <_fstat_r>
 800dae4:	2800      	cmp	r0, #0
 800dae6:	dbec      	blt.n	800dac2 <__swhatbuf_r+0x12>
 800dae8:	9901      	ldr	r1, [sp, #4]
 800daea:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800daee:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800daf2:	4259      	negs	r1, r3
 800daf4:	4159      	adcs	r1, r3
 800daf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dafa:	e7eb      	b.n	800dad4 <__swhatbuf_r+0x24>

0800dafc <__smakebuf_r>:
 800dafc:	898b      	ldrh	r3, [r1, #12]
 800dafe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800db00:	079d      	lsls	r5, r3, #30
 800db02:	4606      	mov	r6, r0
 800db04:	460c      	mov	r4, r1
 800db06:	d507      	bpl.n	800db18 <__smakebuf_r+0x1c>
 800db08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800db0c:	6023      	str	r3, [r4, #0]
 800db0e:	6123      	str	r3, [r4, #16]
 800db10:	2301      	movs	r3, #1
 800db12:	6163      	str	r3, [r4, #20]
 800db14:	b002      	add	sp, #8
 800db16:	bd70      	pop	{r4, r5, r6, pc}
 800db18:	ab01      	add	r3, sp, #4
 800db1a:	466a      	mov	r2, sp
 800db1c:	f7ff ffc8 	bl	800dab0 <__swhatbuf_r>
 800db20:	9900      	ldr	r1, [sp, #0]
 800db22:	4605      	mov	r5, r0
 800db24:	4630      	mov	r0, r6
 800db26:	f7fe ff29 	bl	800c97c <_malloc_r>
 800db2a:	b948      	cbnz	r0, 800db40 <__smakebuf_r+0x44>
 800db2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db30:	059a      	lsls	r2, r3, #22
 800db32:	d4ef      	bmi.n	800db14 <__smakebuf_r+0x18>
 800db34:	f023 0303 	bic.w	r3, r3, #3
 800db38:	f043 0302 	orr.w	r3, r3, #2
 800db3c:	81a3      	strh	r3, [r4, #12]
 800db3e:	e7e3      	b.n	800db08 <__smakebuf_r+0xc>
 800db40:	89a3      	ldrh	r3, [r4, #12]
 800db42:	6020      	str	r0, [r4, #0]
 800db44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db48:	81a3      	strh	r3, [r4, #12]
 800db4a:	9b00      	ldr	r3, [sp, #0]
 800db4c:	6163      	str	r3, [r4, #20]
 800db4e:	9b01      	ldr	r3, [sp, #4]
 800db50:	6120      	str	r0, [r4, #16]
 800db52:	b15b      	cbz	r3, 800db6c <__smakebuf_r+0x70>
 800db54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800db58:	4630      	mov	r0, r6
 800db5a:	f000 f861 	bl	800dc20 <_isatty_r>
 800db5e:	b128      	cbz	r0, 800db6c <__smakebuf_r+0x70>
 800db60:	89a3      	ldrh	r3, [r4, #12]
 800db62:	f023 0303 	bic.w	r3, r3, #3
 800db66:	f043 0301 	orr.w	r3, r3, #1
 800db6a:	81a3      	strh	r3, [r4, #12]
 800db6c:	89a3      	ldrh	r3, [r4, #12]
 800db6e:	431d      	orrs	r5, r3
 800db70:	81a5      	strh	r5, [r4, #12]
 800db72:	e7cf      	b.n	800db14 <__smakebuf_r+0x18>

0800db74 <_putc_r>:
 800db74:	b570      	push	{r4, r5, r6, lr}
 800db76:	460d      	mov	r5, r1
 800db78:	4614      	mov	r4, r2
 800db7a:	4606      	mov	r6, r0
 800db7c:	b118      	cbz	r0, 800db86 <_putc_r+0x12>
 800db7e:	6a03      	ldr	r3, [r0, #32]
 800db80:	b90b      	cbnz	r3, 800db86 <_putc_r+0x12>
 800db82:	f7ff f8c3 	bl	800cd0c <__sinit>
 800db86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800db88:	07d8      	lsls	r0, r3, #31
 800db8a:	d405      	bmi.n	800db98 <_putc_r+0x24>
 800db8c:	89a3      	ldrh	r3, [r4, #12]
 800db8e:	0599      	lsls	r1, r3, #22
 800db90:	d402      	bmi.n	800db98 <_putc_r+0x24>
 800db92:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800db94:	f7ff f9fc 	bl	800cf90 <__retarget_lock_acquire_recursive>
 800db98:	68a3      	ldr	r3, [r4, #8]
 800db9a:	3b01      	subs	r3, #1
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	60a3      	str	r3, [r4, #8]
 800dba0:	da05      	bge.n	800dbae <_putc_r+0x3a>
 800dba2:	69a2      	ldr	r2, [r4, #24]
 800dba4:	4293      	cmp	r3, r2
 800dba6:	db12      	blt.n	800dbce <_putc_r+0x5a>
 800dba8:	b2eb      	uxtb	r3, r5
 800dbaa:	2b0a      	cmp	r3, #10
 800dbac:	d00f      	beq.n	800dbce <_putc_r+0x5a>
 800dbae:	6823      	ldr	r3, [r4, #0]
 800dbb0:	1c5a      	adds	r2, r3, #1
 800dbb2:	6022      	str	r2, [r4, #0]
 800dbb4:	701d      	strb	r5, [r3, #0]
 800dbb6:	b2ed      	uxtb	r5, r5
 800dbb8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dbba:	07da      	lsls	r2, r3, #31
 800dbbc:	d405      	bmi.n	800dbca <_putc_r+0x56>
 800dbbe:	89a3      	ldrh	r3, [r4, #12]
 800dbc0:	059b      	lsls	r3, r3, #22
 800dbc2:	d402      	bmi.n	800dbca <_putc_r+0x56>
 800dbc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dbc6:	f7ff f9e4 	bl	800cf92 <__retarget_lock_release_recursive>
 800dbca:	4628      	mov	r0, r5
 800dbcc:	bd70      	pop	{r4, r5, r6, pc}
 800dbce:	4629      	mov	r1, r5
 800dbd0:	4622      	mov	r2, r4
 800dbd2:	4630      	mov	r0, r6
 800dbd4:	f7ff fed6 	bl	800d984 <__swbuf_r>
 800dbd8:	4605      	mov	r5, r0
 800dbda:	e7ed      	b.n	800dbb8 <_putc_r+0x44>

0800dbdc <_close_r>:
 800dbdc:	b538      	push	{r3, r4, r5, lr}
 800dbde:	4d06      	ldr	r5, [pc, #24]	; (800dbf8 <_close_r+0x1c>)
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	4604      	mov	r4, r0
 800dbe4:	4608      	mov	r0, r1
 800dbe6:	602b      	str	r3, [r5, #0]
 800dbe8:	f7f3 fa95 	bl	8001116 <_close>
 800dbec:	1c43      	adds	r3, r0, #1
 800dbee:	d102      	bne.n	800dbf6 <_close_r+0x1a>
 800dbf0:	682b      	ldr	r3, [r5, #0]
 800dbf2:	b103      	cbz	r3, 800dbf6 <_close_r+0x1a>
 800dbf4:	6023      	str	r3, [r4, #0]
 800dbf6:	bd38      	pop	{r3, r4, r5, pc}
 800dbf8:	200004bc 	.word	0x200004bc

0800dbfc <_fstat_r>:
 800dbfc:	b538      	push	{r3, r4, r5, lr}
 800dbfe:	4d07      	ldr	r5, [pc, #28]	; (800dc1c <_fstat_r+0x20>)
 800dc00:	2300      	movs	r3, #0
 800dc02:	4604      	mov	r4, r0
 800dc04:	4608      	mov	r0, r1
 800dc06:	4611      	mov	r1, r2
 800dc08:	602b      	str	r3, [r5, #0]
 800dc0a:	f7f3 fa90 	bl	800112e <_fstat>
 800dc0e:	1c43      	adds	r3, r0, #1
 800dc10:	d102      	bne.n	800dc18 <_fstat_r+0x1c>
 800dc12:	682b      	ldr	r3, [r5, #0]
 800dc14:	b103      	cbz	r3, 800dc18 <_fstat_r+0x1c>
 800dc16:	6023      	str	r3, [r4, #0]
 800dc18:	bd38      	pop	{r3, r4, r5, pc}
 800dc1a:	bf00      	nop
 800dc1c:	200004bc 	.word	0x200004bc

0800dc20 <_isatty_r>:
 800dc20:	b538      	push	{r3, r4, r5, lr}
 800dc22:	4d06      	ldr	r5, [pc, #24]	; (800dc3c <_isatty_r+0x1c>)
 800dc24:	2300      	movs	r3, #0
 800dc26:	4604      	mov	r4, r0
 800dc28:	4608      	mov	r0, r1
 800dc2a:	602b      	str	r3, [r5, #0]
 800dc2c:	f7f3 fa8f 	bl	800114e <_isatty>
 800dc30:	1c43      	adds	r3, r0, #1
 800dc32:	d102      	bne.n	800dc3a <_isatty_r+0x1a>
 800dc34:	682b      	ldr	r3, [r5, #0]
 800dc36:	b103      	cbz	r3, 800dc3a <_isatty_r+0x1a>
 800dc38:	6023      	str	r3, [r4, #0]
 800dc3a:	bd38      	pop	{r3, r4, r5, pc}
 800dc3c:	200004bc 	.word	0x200004bc

0800dc40 <_lseek_r>:
 800dc40:	b538      	push	{r3, r4, r5, lr}
 800dc42:	4d07      	ldr	r5, [pc, #28]	; (800dc60 <_lseek_r+0x20>)
 800dc44:	4604      	mov	r4, r0
 800dc46:	4608      	mov	r0, r1
 800dc48:	4611      	mov	r1, r2
 800dc4a:	2200      	movs	r2, #0
 800dc4c:	602a      	str	r2, [r5, #0]
 800dc4e:	461a      	mov	r2, r3
 800dc50:	f7f3 fa88 	bl	8001164 <_lseek>
 800dc54:	1c43      	adds	r3, r0, #1
 800dc56:	d102      	bne.n	800dc5e <_lseek_r+0x1e>
 800dc58:	682b      	ldr	r3, [r5, #0]
 800dc5a:	b103      	cbz	r3, 800dc5e <_lseek_r+0x1e>
 800dc5c:	6023      	str	r3, [r4, #0]
 800dc5e:	bd38      	pop	{r3, r4, r5, pc}
 800dc60:	200004bc 	.word	0x200004bc

0800dc64 <_read_r>:
 800dc64:	b538      	push	{r3, r4, r5, lr}
 800dc66:	4d07      	ldr	r5, [pc, #28]	; (800dc84 <_read_r+0x20>)
 800dc68:	4604      	mov	r4, r0
 800dc6a:	4608      	mov	r0, r1
 800dc6c:	4611      	mov	r1, r2
 800dc6e:	2200      	movs	r2, #0
 800dc70:	602a      	str	r2, [r5, #0]
 800dc72:	461a      	mov	r2, r3
 800dc74:	f7f3 fa32 	bl	80010dc <_read>
 800dc78:	1c43      	adds	r3, r0, #1
 800dc7a:	d102      	bne.n	800dc82 <_read_r+0x1e>
 800dc7c:	682b      	ldr	r3, [r5, #0]
 800dc7e:	b103      	cbz	r3, 800dc82 <_read_r+0x1e>
 800dc80:	6023      	str	r3, [r4, #0]
 800dc82:	bd38      	pop	{r3, r4, r5, pc}
 800dc84:	200004bc 	.word	0x200004bc

0800dc88 <_write_r>:
 800dc88:	b538      	push	{r3, r4, r5, lr}
 800dc8a:	4d07      	ldr	r5, [pc, #28]	; (800dca8 <_write_r+0x20>)
 800dc8c:	4604      	mov	r4, r0
 800dc8e:	4608      	mov	r0, r1
 800dc90:	4611      	mov	r1, r2
 800dc92:	2200      	movs	r2, #0
 800dc94:	602a      	str	r2, [r5, #0]
 800dc96:	461a      	mov	r2, r3
 800dc98:	f7f2 ffa8 	bl	8000bec <_write>
 800dc9c:	1c43      	adds	r3, r0, #1
 800dc9e:	d102      	bne.n	800dca6 <_write_r+0x1e>
 800dca0:	682b      	ldr	r3, [r5, #0]
 800dca2:	b103      	cbz	r3, 800dca6 <_write_r+0x1e>
 800dca4:	6023      	str	r3, [r4, #0]
 800dca6:	bd38      	pop	{r3, r4, r5, pc}
 800dca8:	200004bc 	.word	0x200004bc

0800dcac <_malloc_usable_size_r>:
 800dcac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dcb0:	1f18      	subs	r0, r3, #4
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	bfbc      	itt	lt
 800dcb6:	580b      	ldrlt	r3, [r1, r0]
 800dcb8:	18c0      	addlt	r0, r0, r3
 800dcba:	4770      	bx	lr

0800dcbc <roundf>:
 800dcbc:	ee10 0a10 	vmov	r0, s0
 800dcc0:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800dcc4:	3a7f      	subs	r2, #127	; 0x7f
 800dcc6:	2a16      	cmp	r2, #22
 800dcc8:	dc15      	bgt.n	800dcf6 <roundf+0x3a>
 800dcca:	2a00      	cmp	r2, #0
 800dccc:	da08      	bge.n	800dce0 <roundf+0x24>
 800dcce:	3201      	adds	r2, #1
 800dcd0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800dcd4:	d101      	bne.n	800dcda <roundf+0x1e>
 800dcd6:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800dcda:	ee00 3a10 	vmov	s0, r3
 800dcde:	4770      	bx	lr
 800dce0:	4907      	ldr	r1, [pc, #28]	; (800dd00 <roundf+0x44>)
 800dce2:	4111      	asrs	r1, r2
 800dce4:	4208      	tst	r0, r1
 800dce6:	d0fa      	beq.n	800dcde <roundf+0x22>
 800dce8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800dcec:	4113      	asrs	r3, r2
 800dcee:	4403      	add	r3, r0
 800dcf0:	ea23 0301 	bic.w	r3, r3, r1
 800dcf4:	e7f1      	b.n	800dcda <roundf+0x1e>
 800dcf6:	2a80      	cmp	r2, #128	; 0x80
 800dcf8:	d1f1      	bne.n	800dcde <roundf+0x22>
 800dcfa:	ee30 0a00 	vadd.f32	s0, s0, s0
 800dcfe:	4770      	bx	lr
 800dd00:	007fffff 	.word	0x007fffff

0800dd04 <log10f>:
 800dd04:	b508      	push	{r3, lr}
 800dd06:	ed2d 8b02 	vpush	{d8}
 800dd0a:	eeb0 8a40 	vmov.f32	s16, s0
 800dd0e:	f000 f865 	bl	800dddc <__ieee754_log10f>
 800dd12:	eeb4 8a48 	vcmp.f32	s16, s16
 800dd16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd1a:	d60f      	bvs.n	800dd3c <log10f+0x38>
 800dd1c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800dd20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd24:	d80a      	bhi.n	800dd3c <log10f+0x38>
 800dd26:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800dd2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd2e:	d108      	bne.n	800dd42 <log10f+0x3e>
 800dd30:	f7ff f904 	bl	800cf3c <__errno>
 800dd34:	2322      	movs	r3, #34	; 0x22
 800dd36:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800dd58 <log10f+0x54>
 800dd3a:	6003      	str	r3, [r0, #0]
 800dd3c:	ecbd 8b02 	vpop	{d8}
 800dd40:	bd08      	pop	{r3, pc}
 800dd42:	f7ff f8fb 	bl	800cf3c <__errno>
 800dd46:	ecbd 8b02 	vpop	{d8}
 800dd4a:	2321      	movs	r3, #33	; 0x21
 800dd4c:	6003      	str	r3, [r0, #0]
 800dd4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800dd52:	4802      	ldr	r0, [pc, #8]	; (800dd5c <log10f+0x58>)
 800dd54:	f000 b804 	b.w	800dd60 <nanf>
 800dd58:	ff800000 	.word	0xff800000
 800dd5c:	080138b1 	.word	0x080138b1

0800dd60 <nanf>:
 800dd60:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800dd68 <nanf+0x8>
 800dd64:	4770      	bx	lr
 800dd66:	bf00      	nop
 800dd68:	7fc00000 	.word	0x7fc00000

0800dd6c <fmaxf>:
 800dd6c:	b508      	push	{r3, lr}
 800dd6e:	ed2d 8b02 	vpush	{d8}
 800dd72:	eeb0 8a40 	vmov.f32	s16, s0
 800dd76:	eef0 8a60 	vmov.f32	s17, s1
 800dd7a:	f000 f813 	bl	800dda4 <__fpclassifyf>
 800dd7e:	b148      	cbz	r0, 800dd94 <fmaxf+0x28>
 800dd80:	eeb0 0a68 	vmov.f32	s0, s17
 800dd84:	f000 f80e 	bl	800dda4 <__fpclassifyf>
 800dd88:	b130      	cbz	r0, 800dd98 <fmaxf+0x2c>
 800dd8a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800dd8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd92:	dc01      	bgt.n	800dd98 <fmaxf+0x2c>
 800dd94:	eeb0 8a68 	vmov.f32	s16, s17
 800dd98:	eeb0 0a48 	vmov.f32	s0, s16
 800dd9c:	ecbd 8b02 	vpop	{d8}
 800dda0:	bd08      	pop	{r3, pc}
	...

0800dda4 <__fpclassifyf>:
 800dda4:	ee10 3a10 	vmov	r3, s0
 800dda8:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 800ddac:	d00d      	beq.n	800ddca <__fpclassifyf+0x26>
 800ddae:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 800ddb2:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800ddb6:	d30a      	bcc.n	800ddce <__fpclassifyf+0x2a>
 800ddb8:	4b07      	ldr	r3, [pc, #28]	; (800ddd8 <__fpclassifyf+0x34>)
 800ddba:	1e42      	subs	r2, r0, #1
 800ddbc:	429a      	cmp	r2, r3
 800ddbe:	d908      	bls.n	800ddd2 <__fpclassifyf+0x2e>
 800ddc0:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 800ddc4:	4258      	negs	r0, r3
 800ddc6:	4158      	adcs	r0, r3
 800ddc8:	4770      	bx	lr
 800ddca:	2002      	movs	r0, #2
 800ddcc:	4770      	bx	lr
 800ddce:	2004      	movs	r0, #4
 800ddd0:	4770      	bx	lr
 800ddd2:	2003      	movs	r0, #3
 800ddd4:	4770      	bx	lr
 800ddd6:	bf00      	nop
 800ddd8:	007ffffe 	.word	0x007ffffe

0800dddc <__ieee754_log10f>:
 800dddc:	b508      	push	{r3, lr}
 800ddde:	ee10 2a10 	vmov	r2, s0
 800dde2:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800dde6:	ed2d 8b02 	vpush	{d8}
 800ddea:	d108      	bne.n	800ddfe <__ieee754_log10f+0x22>
 800ddec:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800de74 <__ieee754_log10f+0x98>
 800ddf0:	eddf 7a21 	vldr	s15, [pc, #132]	; 800de78 <__ieee754_log10f+0x9c>
 800ddf4:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800ddf8:	ecbd 8b02 	vpop	{d8}
 800ddfc:	bd08      	pop	{r3, pc}
 800ddfe:	2a00      	cmp	r2, #0
 800de00:	da02      	bge.n	800de08 <__ieee754_log10f+0x2c>
 800de02:	ee30 7a40 	vsub.f32	s14, s0, s0
 800de06:	e7f3      	b.n	800ddf0 <__ieee754_log10f+0x14>
 800de08:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800de0c:	db02      	blt.n	800de14 <__ieee754_log10f+0x38>
 800de0e:	ee30 0a00 	vadd.f32	s0, s0, s0
 800de12:	e7f1      	b.n	800ddf8 <__ieee754_log10f+0x1c>
 800de14:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800de18:	bfbf      	itttt	lt
 800de1a:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 800de7c <__ieee754_log10f+0xa0>
 800de1e:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800de22:	f06f 0118 	mvnlt.w	r1, #24
 800de26:	ee17 2a90 	vmovlt	r2, s15
 800de2a:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800de2e:	bfa8      	it	ge
 800de30:	2100      	movge	r1, #0
 800de32:	3b7f      	subs	r3, #127	; 0x7f
 800de34:	440b      	add	r3, r1
 800de36:	0fd9      	lsrs	r1, r3, #31
 800de38:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800de3c:	ee07 3a90 	vmov	s15, r3
 800de40:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800de44:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 800de48:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800de4c:	ee00 3a10 	vmov	s0, r3
 800de50:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800de54:	f000 f81a 	bl	800de8c <__ieee754_logf>
 800de58:	eddf 7a09 	vldr	s15, [pc, #36]	; 800de80 <__ieee754_log10f+0xa4>
 800de5c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800de60:	eddf 7a08 	vldr	s15, [pc, #32]	; 800de84 <__ieee754_log10f+0xa8>
 800de64:	eea8 0a27 	vfma.f32	s0, s16, s15
 800de68:	eddf 7a07 	vldr	s15, [pc, #28]	; 800de88 <__ieee754_log10f+0xac>
 800de6c:	eea8 0a27 	vfma.f32	s0, s16, s15
 800de70:	e7c2      	b.n	800ddf8 <__ieee754_log10f+0x1c>
 800de72:	bf00      	nop
 800de74:	cc000000 	.word	0xcc000000
 800de78:	00000000 	.word	0x00000000
 800de7c:	4c000000 	.word	0x4c000000
 800de80:	3ede5bd9 	.word	0x3ede5bd9
 800de84:	355427db 	.word	0x355427db
 800de88:	3e9a2080 	.word	0x3e9a2080

0800de8c <__ieee754_logf>:
 800de8c:	ee10 3a10 	vmov	r3, s0
 800de90:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800de94:	d106      	bne.n	800dea4 <__ieee754_logf+0x18>
 800de96:	ed9f 7a66 	vldr	s14, [pc, #408]	; 800e030 <__ieee754_logf+0x1a4>
 800de9a:	eddf 7a66 	vldr	s15, [pc, #408]	; 800e034 <__ieee754_logf+0x1a8>
 800de9e:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800dea2:	4770      	bx	lr
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	da02      	bge.n	800deae <__ieee754_logf+0x22>
 800dea8:	ee30 7a40 	vsub.f32	s14, s0, s0
 800deac:	e7f5      	b.n	800de9a <__ieee754_logf+0xe>
 800deae:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800deb2:	db02      	blt.n	800deba <__ieee754_logf+0x2e>
 800deb4:	ee30 0a00 	vadd.f32	s0, s0, s0
 800deb8:	4770      	bx	lr
 800deba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800debe:	bfb8      	it	lt
 800dec0:	eddf 7a5d 	vldrlt	s15, [pc, #372]	; 800e038 <__ieee754_logf+0x1ac>
 800dec4:	485d      	ldr	r0, [pc, #372]	; (800e03c <__ieee754_logf+0x1b0>)
 800dec6:	bfbe      	ittt	lt
 800dec8:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800decc:	f06f 0118 	mvnlt.w	r1, #24
 800ded0:	ee17 3a90 	vmovlt	r3, s15
 800ded4:	ea4f 52e3 	mov.w	r2, r3, asr #23
 800ded8:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800dedc:	4418      	add	r0, r3
 800dede:	bfa8      	it	ge
 800dee0:	2100      	movge	r1, #0
 800dee2:	3a7f      	subs	r2, #127	; 0x7f
 800dee4:	440a      	add	r2, r1
 800dee6:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 800deea:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 800deee:	4319      	orrs	r1, r3
 800def0:	ee00 1a10 	vmov	s0, r1
 800def4:	4952      	ldr	r1, [pc, #328]	; (800e040 <__ieee754_logf+0x1b4>)
 800def6:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 800defa:	f103 000f 	add.w	r0, r3, #15
 800defe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800df02:	4001      	ands	r1, r0
 800df04:	ee30 0a67 	vsub.f32	s0, s0, s15
 800df08:	bb89      	cbnz	r1, 800df6e <__ieee754_logf+0xe2>
 800df0a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800df0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df12:	d10f      	bne.n	800df34 <__ieee754_logf+0xa8>
 800df14:	2a00      	cmp	r2, #0
 800df16:	f000 8087 	beq.w	800e028 <__ieee754_logf+0x19c>
 800df1a:	ee07 2a90 	vmov	s15, r2
 800df1e:	ed9f 0a49 	vldr	s0, [pc, #292]	; 800e044 <__ieee754_logf+0x1b8>
 800df22:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800e048 <__ieee754_logf+0x1bc>
 800df26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800df2a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800df2e:	eea7 0a87 	vfma.f32	s0, s15, s14
 800df32:	4770      	bx	lr
 800df34:	eddf 6a45 	vldr	s13, [pc, #276]	; 800e04c <__ieee754_logf+0x1c0>
 800df38:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800df3c:	eee0 7a66 	vfms.f32	s15, s0, s13
 800df40:	ee20 7a00 	vmul.f32	s14, s0, s0
 800df44:	ee27 7a27 	vmul.f32	s14, s14, s15
 800df48:	b912      	cbnz	r2, 800df50 <__ieee754_logf+0xc4>
 800df4a:	ee30 0a47 	vsub.f32	s0, s0, s14
 800df4e:	4770      	bx	lr
 800df50:	ee07 2a90 	vmov	s15, r2
 800df54:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800e044 <__ieee754_logf+0x1b8>
 800df58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800df5c:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800df60:	ee37 0a40 	vsub.f32	s0, s14, s0
 800df64:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800e048 <__ieee754_logf+0x1bc>
 800df68:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800df6c:	4770      	bx	lr
 800df6e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800df72:	ee70 7a27 	vadd.f32	s15, s0, s15
 800df76:	eddf 5a36 	vldr	s11, [pc, #216]	; 800e050 <__ieee754_logf+0x1c4>
 800df7a:	eddf 4a36 	vldr	s9, [pc, #216]	; 800e054 <__ieee754_logf+0x1c8>
 800df7e:	4936      	ldr	r1, [pc, #216]	; (800e058 <__ieee754_logf+0x1cc>)
 800df80:	ee80 6a27 	vdiv.f32	s12, s0, s15
 800df84:	4419      	add	r1, r3
 800df86:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 800df8a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800df8e:	430b      	orrs	r3, r1
 800df90:	2b00      	cmp	r3, #0
 800df92:	ee07 2a90 	vmov	s15, r2
 800df96:	ee26 5a06 	vmul.f32	s10, s12, s12
 800df9a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800df9e:	ee25 7a05 	vmul.f32	s14, s10, s10
 800dfa2:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800e05c <__ieee754_logf+0x1d0>
 800dfa6:	eee7 7a25 	vfma.f32	s15, s14, s11
 800dfaa:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800e060 <__ieee754_logf+0x1d4>
 800dfae:	eee7 5a87 	vfma.f32	s11, s15, s14
 800dfb2:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800e064 <__ieee754_logf+0x1d8>
 800dfb6:	eee7 7a24 	vfma.f32	s15, s14, s9
 800dfba:	eddf 4a2b 	vldr	s9, [pc, #172]	; 800e068 <__ieee754_logf+0x1dc>
 800dfbe:	eee7 4a87 	vfma.f32	s9, s15, s14
 800dfc2:	eddf 7a2a 	vldr	s15, [pc, #168]	; 800e06c <__ieee754_logf+0x1e0>
 800dfc6:	eee4 7a87 	vfma.f32	s15, s9, s14
 800dfca:	ee67 7a85 	vmul.f32	s15, s15, s10
 800dfce:	eee5 7a87 	vfma.f32	s15, s11, s14
 800dfd2:	dd1a      	ble.n	800e00a <__ieee754_logf+0x17e>
 800dfd4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800dfd8:	ee20 7a07 	vmul.f32	s14, s0, s14
 800dfdc:	ee27 7a00 	vmul.f32	s14, s14, s0
 800dfe0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dfe4:	ee67 7a86 	vmul.f32	s15, s15, s12
 800dfe8:	b912      	cbnz	r2, 800dff0 <__ieee754_logf+0x164>
 800dfea:	ee37 7a67 	vsub.f32	s14, s14, s15
 800dfee:	e7ac      	b.n	800df4a <__ieee754_logf+0xbe>
 800dff0:	ed9f 6a14 	vldr	s12, [pc, #80]	; 800e044 <__ieee754_logf+0x1b8>
 800dff4:	eee6 7a86 	vfma.f32	s15, s13, s12
 800dff8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800dffc:	ee37 0a40 	vsub.f32	s0, s14, s0
 800e000:	eddf 7a11 	vldr	s15, [pc, #68]	; 800e048 <__ieee754_logf+0x1bc>
 800e004:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800e008:	4770      	bx	lr
 800e00a:	ee70 7a67 	vsub.f32	s15, s0, s15
 800e00e:	ee67 7a86 	vmul.f32	s15, s15, s12
 800e012:	b912      	cbnz	r2, 800e01a <__ieee754_logf+0x18e>
 800e014:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e018:	4770      	bx	lr
 800e01a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800e044 <__ieee754_logf+0x1b8>
 800e01e:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800e022:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800e026:	e7eb      	b.n	800e000 <__ieee754_logf+0x174>
 800e028:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800e034 <__ieee754_logf+0x1a8>
 800e02c:	4770      	bx	lr
 800e02e:	bf00      	nop
 800e030:	cc000000 	.word	0xcc000000
 800e034:	00000000 	.word	0x00000000
 800e038:	4c000000 	.word	0x4c000000
 800e03c:	004afb20 	.word	0x004afb20
 800e040:	007ffff0 	.word	0x007ffff0
 800e044:	3717f7d1 	.word	0x3717f7d1
 800e048:	3f317180 	.word	0x3f317180
 800e04c:	3eaaaaab 	.word	0x3eaaaaab
 800e050:	3e1cd04f 	.word	0x3e1cd04f
 800e054:	3e178897 	.word	0x3e178897
 800e058:	ffcf5c30 	.word	0xffcf5c30
 800e05c:	3e638e29 	.word	0x3e638e29
 800e060:	3ecccccd 	.word	0x3ecccccd
 800e064:	3e3a3325 	.word	0x3e3a3325
 800e068:	3e924925 	.word	0x3e924925
 800e06c:	3f2aaaab 	.word	0x3f2aaaab

0800e070 <_init>:
 800e070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e072:	bf00      	nop
 800e074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e076:	bc08      	pop	{r3}
 800e078:	469e      	mov	lr, r3
 800e07a:	4770      	bx	lr

0800e07c <_fini>:
 800e07c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e07e:	bf00      	nop
 800e080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e082:	bc08      	pop	{r3}
 800e084:	469e      	mov	lr, r3
 800e086:	4770      	bx	lr
