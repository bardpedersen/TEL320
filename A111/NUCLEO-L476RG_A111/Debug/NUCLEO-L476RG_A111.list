
NUCLEO-L476RG_A111.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dfd8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000576c  0800e168  0800e168  0001e168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080138d4  080138d4  000301e8  2**0
                  CONTENTS
  4 .ARM          00000008  080138d4  080138d4  000238d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080138dc  080138dc  000301e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080138dc  080138dc  000238dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080138e0  080138e0  000238e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  080138e4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  200001e8  08013acc  000301e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004fc  08013acc  000304fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 12 .comment      0000008f  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY
 13 .debug_info   00061874  00000000  00000000  000302a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000def9  00000000  00000000  00091b1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000020f0  00000000  00000000  0009fa18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000096d  00000000  00000000  000a1b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027eb5  00000000  00000000  000a2475  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00026ecd  00000000  00000000  000ca32a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f8558  00000000  00000000  000f11f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000079b0  00000000  00000000  001e9750  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  001f1100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000198a5  00000000  00000000  001f116b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00003a10  00000000  00000000  0020aa10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e150 	.word	0x0800e150

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800e150 	.word	0x0800e150

080001d0 <acc_alg_biquad_q3_12_complex_direct_form_1_reverse>:
 80001d0:	f06f 0c03 	mvn.w	ip, #3
 80001d4:	3904      	subs	r1, #4
 80001d6:	e004      	b.n	80001e2 <head_complex>

080001d8 <acc_alg_biquad_q3_12_complex_direct_form_1>:
 80001d8:	f04f 0c04 	mov.w	ip, #4
 80001dc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80001e0:	4252      	negs	r2, r2

080001e2 <head_complex>:
 80001e2:	0092      	lsls	r2, r2, #2
 80001e4:	d100      	bne.n	80001e8 <init_complex>
 80001e6:	4770      	bx	lr

080001e8 <init_complex>:
 80001e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001ec:	eac3 4603 	pkhbt	r6, r3, r3, lsl #16
 80001f0:	eac3 4723 	pkhtb	r7, r3, r3, asr #16
 80001f4:	f8b0 a000 	ldrh.w	sl, [r0]
 80001f8:	8844      	ldrh	r4, [r0, #2]
 80001fa:	8883      	ldrh	r3, [r0, #4]
 80001fc:	88c5      	ldrh	r5, [r0, #6]
 80001fe:	8900      	ldrh	r0, [r0, #8]
 8000200:	f5c5 4570 	rsb	r5, r5, #61440	; 0xf000
 8000204:	eac3 4e00 	pkhbt	lr, r3, r0, lsl #16
 8000208:	4663      	mov	r3, ip
 800020a:	eac4 4c05 	pkhbt	ip, r4, r5, lsl #16
 800020e:	b234      	sxth	r4, r6
 8000210:	b23d      	sxth	r5, r7
 8000212:	ea4f 3804 	mov.w	r8, r4, lsl #12
 8000216:	ea4f 3905 	mov.w	r9, r5, lsl #12
 800021a:	0034      	movs	r4, r6
 800021c:	003d      	movs	r5, r7

0800021e <loop_complex>:
 800021e:	5888      	ldr	r0, [r1, r2]
 8000220:	fb1a 8800 	smlabb	r8, sl, r0, r8
 8000224:	fb1a 9910 	smlabt	r9, sl, r0, r9
 8000228:	fb2c 8804 	smlad	r8, ip, r4, r8
 800022c:	fb2c 9915 	smladx	r9, ip, r5, r9
 8000230:	fb4e 8806 	smlsd	r8, lr, r6, r8
 8000234:	fb4e 9917 	smlsdx	r9, lr, r7, r9
 8000238:	0026      	movs	r6, r4
 800023a:	002f      	movs	r7, r5
 800023c:	eac0 1408 	pkhbt	r4, r0, r8, lsl #4
 8000240:	eac0 3529 	pkhtb	r5, r0, r9, asr #12
 8000244:	0428      	lsls	r0, r5, #16
 8000246:	eac0 4024 	pkhtb	r0, r0, r4, asr #16
 800024a:	5088      	str	r0, [r1, r2]
 800024c:	18d2      	adds	r2, r2, r3
 800024e:	d1e6      	bne.n	800021e <loop_complex>
 8000250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08000254 <acc_alg_biquad_q3_12_direct_form_1_reverse>:
 8000254:	f06f 0c01 	mvn.w	ip, #1
 8000258:	3902      	subs	r1, #2
 800025a:	e004      	b.n	8000266 <head_real>

0800025c <acc_alg_biquad_q3_12_direct_form_1>:
 800025c:	f05f 0c02 	movs.w	ip, #2
 8000260:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8000264:	4252      	negs	r2, r2

08000266 <head_real>:
 8000266:	0052      	lsls	r2, r2, #1
 8000268:	d100      	bne.n	800026c <init_real>
 800026a:	4770      	bx	lr

0800026c <init_real>:
 800026c:	e92d 44f0 	stmdb	sp!, {r4, r5, r6, r7, sl, lr}
 8000270:	4667      	mov	r7, ip
 8000272:	f8b0 a000 	ldrh.w	sl, [r0]
 8000276:	8844      	ldrh	r4, [r0, #2]
 8000278:	8885      	ldrh	r5, [r0, #4]
 800027a:	88c6      	ldrh	r6, [r0, #6]
 800027c:	8900      	ldrh	r0, [r0, #8]
 800027e:	f5c6 4670 	rsb	r6, r6, #61440	; 0xf000
 8000282:	eac4 4c06 	pkhbt	ip, r4, r6, lsl #16
 8000286:	eac5 4e00 	pkhbt	lr, r5, r0, lsl #16
 800028a:	eac3 4403 	pkhbt	r4, r3, r3, lsl #16
 800028e:	0025      	movs	r5, r4
 8000290:	b21b      	sxth	r3, r3
 8000292:	031e      	lsls	r6, r3, #12

08000294 <loop_real>:
 8000294:	5a88      	ldrh	r0, [r1, r2]
 8000296:	fb1a 6600 	smlabb	r6, sl, r0, r6
 800029a:	fb2c 6604 	smlad	r6, ip, r4, r6
 800029e:	fb4e 6605 	smlsd	r6, lr, r5, r6
 80002a2:	0025      	movs	r5, r4
 80002a4:	eac0 1406 	pkhbt	r4, r0, r6, lsl #4
 80002a8:	1420      	asrs	r0, r4, #16
 80002aa:	5288      	strh	r0, [r1, r2]
 80002ac:	19d2      	adds	r2, r2, r7
 80002ae:	d1f1      	bne.n	8000294 <loop_real>
 80002b0:	e8bd 84f0 	ldmia.w	sp!, {r4, r5, r6, r7, sl, pc}
	...

080002c0 <memchr>:
 80002c0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002c4:	2a10      	cmp	r2, #16
 80002c6:	db2b      	blt.n	8000320 <memchr+0x60>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	d008      	beq.n	80002e0 <memchr+0x20>
 80002ce:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d2:	3a01      	subs	r2, #1
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d02d      	beq.n	8000334 <memchr+0x74>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	b342      	cbz	r2, 8000330 <memchr+0x70>
 80002de:	d1f6      	bne.n	80002ce <memchr+0xe>
 80002e0:	b4f0      	push	{r4, r5, r6, r7}
 80002e2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002e6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ea:	f022 0407 	bic.w	r4, r2, #7
 80002ee:	f07f 0700 	mvns.w	r7, #0
 80002f2:	2300      	movs	r3, #0
 80002f4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002f8:	3c08      	subs	r4, #8
 80002fa:	ea85 0501 	eor.w	r5, r5, r1
 80002fe:	ea86 0601 	eor.w	r6, r6, r1
 8000302:	fa85 f547 	uadd8	r5, r5, r7
 8000306:	faa3 f587 	sel	r5, r3, r7
 800030a:	fa86 f647 	uadd8	r6, r6, r7
 800030e:	faa5 f687 	sel	r6, r5, r7
 8000312:	b98e      	cbnz	r6, 8000338 <memchr+0x78>
 8000314:	d1ee      	bne.n	80002f4 <memchr+0x34>
 8000316:	bcf0      	pop	{r4, r5, r6, r7}
 8000318:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800031c:	f002 0207 	and.w	r2, r2, #7
 8000320:	b132      	cbz	r2, 8000330 <memchr+0x70>
 8000322:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000326:	3a01      	subs	r2, #1
 8000328:	ea83 0301 	eor.w	r3, r3, r1
 800032c:	b113      	cbz	r3, 8000334 <memchr+0x74>
 800032e:	d1f8      	bne.n	8000322 <memchr+0x62>
 8000330:	2000      	movs	r0, #0
 8000332:	4770      	bx	lr
 8000334:	3801      	subs	r0, #1
 8000336:	4770      	bx	lr
 8000338:	2d00      	cmp	r5, #0
 800033a:	bf06      	itte	eq
 800033c:	4635      	moveq	r5, r6
 800033e:	3803      	subeq	r0, #3
 8000340:	3807      	subne	r0, #7
 8000342:	f015 0f01 	tst.w	r5, #1
 8000346:	d107      	bne.n	8000358 <memchr+0x98>
 8000348:	3001      	adds	r0, #1
 800034a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800034e:	bf02      	ittt	eq
 8000350:	3001      	addeq	r0, #1
 8000352:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000356:	3001      	addeq	r0, #1
 8000358:	bcf0      	pop	{r4, r5, r6, r7}
 800035a:	3801      	subs	r0, #1
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop

08000360 <__aeabi_uldivmod>:
 8000360:	b953      	cbnz	r3, 8000378 <__aeabi_uldivmod+0x18>
 8000362:	b94a      	cbnz	r2, 8000378 <__aeabi_uldivmod+0x18>
 8000364:	2900      	cmp	r1, #0
 8000366:	bf08      	it	eq
 8000368:	2800      	cmpeq	r0, #0
 800036a:	bf1c      	itt	ne
 800036c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000370:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000374:	f000 b970 	b.w	8000658 <__aeabi_idiv0>
 8000378:	f1ad 0c08 	sub.w	ip, sp, #8
 800037c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000380:	f000 f806 	bl	8000390 <__udivmoddi4>
 8000384:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000388:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038c:	b004      	add	sp, #16
 800038e:	4770      	bx	lr

08000390 <__udivmoddi4>:
 8000390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000394:	9e08      	ldr	r6, [sp, #32]
 8000396:	460d      	mov	r5, r1
 8000398:	4604      	mov	r4, r0
 800039a:	460f      	mov	r7, r1
 800039c:	2b00      	cmp	r3, #0
 800039e:	d14a      	bne.n	8000436 <__udivmoddi4+0xa6>
 80003a0:	428a      	cmp	r2, r1
 80003a2:	4694      	mov	ip, r2
 80003a4:	d965      	bls.n	8000472 <__udivmoddi4+0xe2>
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	b143      	cbz	r3, 80003be <__udivmoddi4+0x2e>
 80003ac:	fa02 fc03 	lsl.w	ip, r2, r3
 80003b0:	f1c3 0220 	rsb	r2, r3, #32
 80003b4:	409f      	lsls	r7, r3
 80003b6:	fa20 f202 	lsr.w	r2, r0, r2
 80003ba:	4317      	orrs	r7, r2
 80003bc:	409c      	lsls	r4, r3
 80003be:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003c2:	fa1f f58c 	uxth.w	r5, ip
 80003c6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003ca:	0c22      	lsrs	r2, r4, #16
 80003cc:	fb0e 7711 	mls	r7, lr, r1, r7
 80003d0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80003d4:	fb01 f005 	mul.w	r0, r1, r5
 80003d8:	4290      	cmp	r0, r2
 80003da:	d90a      	bls.n	80003f2 <__udivmoddi4+0x62>
 80003dc:	eb1c 0202 	adds.w	r2, ip, r2
 80003e0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80003e4:	f080 811c 	bcs.w	8000620 <__udivmoddi4+0x290>
 80003e8:	4290      	cmp	r0, r2
 80003ea:	f240 8119 	bls.w	8000620 <__udivmoddi4+0x290>
 80003ee:	3902      	subs	r1, #2
 80003f0:	4462      	add	r2, ip
 80003f2:	1a12      	subs	r2, r2, r0
 80003f4:	b2a4      	uxth	r4, r4
 80003f6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003fa:	fb0e 2210 	mls	r2, lr, r0, r2
 80003fe:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000402:	fb00 f505 	mul.w	r5, r0, r5
 8000406:	42a5      	cmp	r5, r4
 8000408:	d90a      	bls.n	8000420 <__udivmoddi4+0x90>
 800040a:	eb1c 0404 	adds.w	r4, ip, r4
 800040e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000412:	f080 8107 	bcs.w	8000624 <__udivmoddi4+0x294>
 8000416:	42a5      	cmp	r5, r4
 8000418:	f240 8104 	bls.w	8000624 <__udivmoddi4+0x294>
 800041c:	4464      	add	r4, ip
 800041e:	3802      	subs	r0, #2
 8000420:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000424:	1b64      	subs	r4, r4, r5
 8000426:	2100      	movs	r1, #0
 8000428:	b11e      	cbz	r6, 8000432 <__udivmoddi4+0xa2>
 800042a:	40dc      	lsrs	r4, r3
 800042c:	2300      	movs	r3, #0
 800042e:	e9c6 4300 	strd	r4, r3, [r6]
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	428b      	cmp	r3, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0xbc>
 800043a:	2e00      	cmp	r6, #0
 800043c:	f000 80ed 	beq.w	800061a <__udivmoddi4+0x28a>
 8000440:	2100      	movs	r1, #0
 8000442:	e9c6 0500 	strd	r0, r5, [r6]
 8000446:	4608      	mov	r0, r1
 8000448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044c:	fab3 f183 	clz	r1, r3
 8000450:	2900      	cmp	r1, #0
 8000452:	d149      	bne.n	80004e8 <__udivmoddi4+0x158>
 8000454:	42ab      	cmp	r3, r5
 8000456:	d302      	bcc.n	800045e <__udivmoddi4+0xce>
 8000458:	4282      	cmp	r2, r0
 800045a:	f200 80f8 	bhi.w	800064e <__udivmoddi4+0x2be>
 800045e:	1a84      	subs	r4, r0, r2
 8000460:	eb65 0203 	sbc.w	r2, r5, r3
 8000464:	2001      	movs	r0, #1
 8000466:	4617      	mov	r7, r2
 8000468:	2e00      	cmp	r6, #0
 800046a:	d0e2      	beq.n	8000432 <__udivmoddi4+0xa2>
 800046c:	e9c6 4700 	strd	r4, r7, [r6]
 8000470:	e7df      	b.n	8000432 <__udivmoddi4+0xa2>
 8000472:	b902      	cbnz	r2, 8000476 <__udivmoddi4+0xe6>
 8000474:	deff      	udf	#255	; 0xff
 8000476:	fab2 f382 	clz	r3, r2
 800047a:	2b00      	cmp	r3, #0
 800047c:	f040 8090 	bne.w	80005a0 <__udivmoddi4+0x210>
 8000480:	1a8a      	subs	r2, r1, r2
 8000482:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000486:	fa1f fe8c 	uxth.w	lr, ip
 800048a:	2101      	movs	r1, #1
 800048c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000490:	fb07 2015 	mls	r0, r7, r5, r2
 8000494:	0c22      	lsrs	r2, r4, #16
 8000496:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800049a:	fb0e f005 	mul.w	r0, lr, r5
 800049e:	4290      	cmp	r0, r2
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x124>
 80004a2:	eb1c 0202 	adds.w	r2, ip, r2
 80004a6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004aa:	d202      	bcs.n	80004b2 <__udivmoddi4+0x122>
 80004ac:	4290      	cmp	r0, r2
 80004ae:	f200 80cb 	bhi.w	8000648 <__udivmoddi4+0x2b8>
 80004b2:	4645      	mov	r5, r8
 80004b4:	1a12      	subs	r2, r2, r0
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004bc:	fb07 2210 	mls	r2, r7, r0, r2
 80004c0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004c4:	fb0e fe00 	mul.w	lr, lr, r0
 80004c8:	45a6      	cmp	lr, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x14e>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x14c>
 80004d6:	45a6      	cmp	lr, r4
 80004d8:	f200 80bb 	bhi.w	8000652 <__udivmoddi4+0x2c2>
 80004dc:	4610      	mov	r0, r2
 80004de:	eba4 040e 	sub.w	r4, r4, lr
 80004e2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80004e6:	e79f      	b.n	8000428 <__udivmoddi4+0x98>
 80004e8:	f1c1 0720 	rsb	r7, r1, #32
 80004ec:	408b      	lsls	r3, r1
 80004ee:	fa22 fc07 	lsr.w	ip, r2, r7
 80004f2:	ea4c 0c03 	orr.w	ip, ip, r3
 80004f6:	fa05 f401 	lsl.w	r4, r5, r1
 80004fa:	fa20 f307 	lsr.w	r3, r0, r7
 80004fe:	40fd      	lsrs	r5, r7
 8000500:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000504:	4323      	orrs	r3, r4
 8000506:	fbb5 f8f9 	udiv	r8, r5, r9
 800050a:	fa1f fe8c 	uxth.w	lr, ip
 800050e:	fb09 5518 	mls	r5, r9, r8, r5
 8000512:	0c1c      	lsrs	r4, r3, #16
 8000514:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000518:	fb08 f50e 	mul.w	r5, r8, lr
 800051c:	42a5      	cmp	r5, r4
 800051e:	fa02 f201 	lsl.w	r2, r2, r1
 8000522:	fa00 f001 	lsl.w	r0, r0, r1
 8000526:	d90b      	bls.n	8000540 <__udivmoddi4+0x1b0>
 8000528:	eb1c 0404 	adds.w	r4, ip, r4
 800052c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000530:	f080 8088 	bcs.w	8000644 <__udivmoddi4+0x2b4>
 8000534:	42a5      	cmp	r5, r4
 8000536:	f240 8085 	bls.w	8000644 <__udivmoddi4+0x2b4>
 800053a:	f1a8 0802 	sub.w	r8, r8, #2
 800053e:	4464      	add	r4, ip
 8000540:	1b64      	subs	r4, r4, r5
 8000542:	b29d      	uxth	r5, r3
 8000544:	fbb4 f3f9 	udiv	r3, r4, r9
 8000548:	fb09 4413 	mls	r4, r9, r3, r4
 800054c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000550:	fb03 fe0e 	mul.w	lr, r3, lr
 8000554:	45a6      	cmp	lr, r4
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x1da>
 8000558:	eb1c 0404 	adds.w	r4, ip, r4
 800055c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000560:	d26c      	bcs.n	800063c <__udivmoddi4+0x2ac>
 8000562:	45a6      	cmp	lr, r4
 8000564:	d96a      	bls.n	800063c <__udivmoddi4+0x2ac>
 8000566:	3b02      	subs	r3, #2
 8000568:	4464      	add	r4, ip
 800056a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800056e:	fba3 9502 	umull	r9, r5, r3, r2
 8000572:	eba4 040e 	sub.w	r4, r4, lr
 8000576:	42ac      	cmp	r4, r5
 8000578:	46c8      	mov	r8, r9
 800057a:	46ae      	mov	lr, r5
 800057c:	d356      	bcc.n	800062c <__udivmoddi4+0x29c>
 800057e:	d053      	beq.n	8000628 <__udivmoddi4+0x298>
 8000580:	b156      	cbz	r6, 8000598 <__udivmoddi4+0x208>
 8000582:	ebb0 0208 	subs.w	r2, r0, r8
 8000586:	eb64 040e 	sbc.w	r4, r4, lr
 800058a:	fa04 f707 	lsl.w	r7, r4, r7
 800058e:	40ca      	lsrs	r2, r1
 8000590:	40cc      	lsrs	r4, r1
 8000592:	4317      	orrs	r7, r2
 8000594:	e9c6 7400 	strd	r7, r4, [r6]
 8000598:	4618      	mov	r0, r3
 800059a:	2100      	movs	r1, #0
 800059c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a0:	f1c3 0120 	rsb	r1, r3, #32
 80005a4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005a8:	fa20 f201 	lsr.w	r2, r0, r1
 80005ac:	fa25 f101 	lsr.w	r1, r5, r1
 80005b0:	409d      	lsls	r5, r3
 80005b2:	432a      	orrs	r2, r5
 80005b4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005b8:	fa1f fe8c 	uxth.w	lr, ip
 80005bc:	fbb1 f0f7 	udiv	r0, r1, r7
 80005c0:	fb07 1510 	mls	r5, r7, r0, r1
 80005c4:	0c11      	lsrs	r1, r2, #16
 80005c6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005ca:	fb00 f50e 	mul.w	r5, r0, lr
 80005ce:	428d      	cmp	r5, r1
 80005d0:	fa04 f403 	lsl.w	r4, r4, r3
 80005d4:	d908      	bls.n	80005e8 <__udivmoddi4+0x258>
 80005d6:	eb1c 0101 	adds.w	r1, ip, r1
 80005da:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80005de:	d22f      	bcs.n	8000640 <__udivmoddi4+0x2b0>
 80005e0:	428d      	cmp	r5, r1
 80005e2:	d92d      	bls.n	8000640 <__udivmoddi4+0x2b0>
 80005e4:	3802      	subs	r0, #2
 80005e6:	4461      	add	r1, ip
 80005e8:	1b49      	subs	r1, r1, r5
 80005ea:	b292      	uxth	r2, r2
 80005ec:	fbb1 f5f7 	udiv	r5, r1, r7
 80005f0:	fb07 1115 	mls	r1, r7, r5, r1
 80005f4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005f8:	fb05 f10e 	mul.w	r1, r5, lr
 80005fc:	4291      	cmp	r1, r2
 80005fe:	d908      	bls.n	8000612 <__udivmoddi4+0x282>
 8000600:	eb1c 0202 	adds.w	r2, ip, r2
 8000604:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000608:	d216      	bcs.n	8000638 <__udivmoddi4+0x2a8>
 800060a:	4291      	cmp	r1, r2
 800060c:	d914      	bls.n	8000638 <__udivmoddi4+0x2a8>
 800060e:	3d02      	subs	r5, #2
 8000610:	4462      	add	r2, ip
 8000612:	1a52      	subs	r2, r2, r1
 8000614:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000618:	e738      	b.n	800048c <__udivmoddi4+0xfc>
 800061a:	4631      	mov	r1, r6
 800061c:	4630      	mov	r0, r6
 800061e:	e708      	b.n	8000432 <__udivmoddi4+0xa2>
 8000620:	4639      	mov	r1, r7
 8000622:	e6e6      	b.n	80003f2 <__udivmoddi4+0x62>
 8000624:	4610      	mov	r0, r2
 8000626:	e6fb      	b.n	8000420 <__udivmoddi4+0x90>
 8000628:	4548      	cmp	r0, r9
 800062a:	d2a9      	bcs.n	8000580 <__udivmoddi4+0x1f0>
 800062c:	ebb9 0802 	subs.w	r8, r9, r2
 8000630:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000634:	3b01      	subs	r3, #1
 8000636:	e7a3      	b.n	8000580 <__udivmoddi4+0x1f0>
 8000638:	4645      	mov	r5, r8
 800063a:	e7ea      	b.n	8000612 <__udivmoddi4+0x282>
 800063c:	462b      	mov	r3, r5
 800063e:	e794      	b.n	800056a <__udivmoddi4+0x1da>
 8000640:	4640      	mov	r0, r8
 8000642:	e7d1      	b.n	80005e8 <__udivmoddi4+0x258>
 8000644:	46d0      	mov	r8, sl
 8000646:	e77b      	b.n	8000540 <__udivmoddi4+0x1b0>
 8000648:	3d02      	subs	r5, #2
 800064a:	4462      	add	r2, ip
 800064c:	e732      	b.n	80004b4 <__udivmoddi4+0x124>
 800064e:	4608      	mov	r0, r1
 8000650:	e70a      	b.n	8000468 <__udivmoddi4+0xd8>
 8000652:	4464      	add	r4, ip
 8000654:	3802      	subs	r0, #2
 8000656:	e742      	b.n	80004de <__udivmoddi4+0x14e>

08000658 <__aeabi_idiv0>:
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop

0800065c <disable_interrupts>:
 */
#define ACC_BOARD_REF_FREQ 26000000


static inline void disable_interrupts(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000660:	b672      	cpsid	i
}
 8000662:	bf00      	nop
	__disable_irq();
}
 8000664:	bf00      	nop
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr

0800066e <enable_interrupts>:


static inline void enable_interrupts(void)
{
 800066e:	b480      	push	{r7}
 8000670:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 8000672:	b662      	cpsie	i
}
 8000674:	bf00      	nop
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8000676:	f3bf 8f6f 	isb	sy
}
 800067a:	bf00      	nop
	__enable_irq();
	__ISB();
}
 800067c:	bf00      	nop
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr
	...

08000688 <acc_hal_integration_sensor_transfer>:
// Implementation of RSS HAL handlers
//----------------------------------------


static void acc_hal_integration_sensor_transfer(acc_sensor_id_t sensor_id, uint8_t *buffer, size_t buffer_size)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b088      	sub	sp, #32
 800068c:	af02      	add	r7, sp, #8
 800068e:	60f8      	str	r0, [r7, #12]
 8000690:	60b9      	str	r1, [r7, #8]
 8000692:	607a      	str	r2, [r7, #4]
	(void)sensor_id;  // Ignore parameter sensor_id

	const uint32_t SPI_TRANSMIT_RECEIVE_TIMEOUT = 5000;
 8000694:	f241 3388 	movw	r3, #5000	; 0x1388
 8000698:	617b      	str	r3, [r7, #20]

	HAL_GPIO_WritePin(A111_CS_N_GPIO_Port, A111_CS_N_Pin, GPIO_PIN_RESET);
 800069a:	2200      	movs	r2, #0
 800069c:	2140      	movs	r1, #64	; 0x40
 800069e:	480b      	ldr	r0, [pc, #44]	; (80006cc <acc_hal_integration_sensor_transfer+0x44>)
 80006a0:	f001 f9c8 	bl	8001a34 <HAL_GPIO_WritePin>

		// Enable interrupt again, the ISR will execute directly after this
		enable_interrupts();
	}
#else
	HAL_SPI_TransmitReceive(&A111_SPI_HANDLE, buffer, buffer, buffer_size, SPI_TRANSMIT_RECEIVE_TIMEOUT);
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	b29a      	uxth	r2, r3
 80006a8:	697b      	ldr	r3, [r7, #20]
 80006aa:	9300      	str	r3, [sp, #0]
 80006ac:	4613      	mov	r3, r2
 80006ae:	68ba      	ldr	r2, [r7, #8]
 80006b0:	68b9      	ldr	r1, [r7, #8]
 80006b2:	4807      	ldr	r0, [pc, #28]	; (80006d0 <acc_hal_integration_sensor_transfer+0x48>)
 80006b4:	f002 fdbd 	bl	8003232 <HAL_SPI_TransmitReceive>
#endif

	HAL_GPIO_WritePin(A111_CS_N_GPIO_Port, A111_CS_N_Pin, GPIO_PIN_SET);
 80006b8:	2201      	movs	r2, #1
 80006ba:	2140      	movs	r1, #64	; 0x40
 80006bc:	4803      	ldr	r0, [pc, #12]	; (80006cc <acc_hal_integration_sensor_transfer+0x44>)
 80006be:	f001 f9b9 	bl	8001a34 <HAL_GPIO_WritePin>
}
 80006c2:	bf00      	nop
 80006c4:	3718      	adds	r7, #24
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	48000400 	.word	0x48000400
 80006d0:	20000204 	.word	0x20000204

080006d4 <acc_hal_integration_sensor_power_on>:


static void acc_hal_integration_sensor_power_on(acc_sensor_id_t sensor_id)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
	(void)sensor_id;  // Ignore parameter sensor_id

	HAL_GPIO_WritePin(A111_ENABLE_GPIO_Port, A111_ENABLE_Pin, GPIO_PIN_SET);
 80006dc:	2201      	movs	r2, #1
 80006de:	2120      	movs	r1, #32
 80006e0:	4807      	ldr	r0, [pc, #28]	; (8000700 <acc_hal_integration_sensor_power_on+0x2c>)
 80006e2:	f001 f9a7 	bl	8001a34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A111_CS_N_GPIO_Port, A111_CS_N_Pin, GPIO_PIN_SET);
 80006e6:	2201      	movs	r2, #1
 80006e8:	2140      	movs	r1, #64	; 0x40
 80006ea:	4805      	ldr	r0, [pc, #20]	; (8000700 <acc_hal_integration_sensor_power_on+0x2c>)
 80006ec:	f001 f9a2 	bl	8001a34 <HAL_GPIO_WritePin>

	// Wait 2 ms to make sure that the sensor crystal have time to stabilize
	HAL_Delay(2);
 80006f0:	2002      	movs	r0, #2
 80006f2:	f000 fea7 	bl	8001444 <HAL_Delay>
}
 80006f6:	bf00      	nop
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	48000400 	.word	0x48000400

08000704 <acc_hal_integration_sensor_power_off>:


static void acc_hal_integration_sensor_power_off(acc_sensor_id_t sensor_id)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
	(void)sensor_id;  // Ignore parameter sensor_id

	HAL_GPIO_WritePin(A111_CS_N_GPIO_Port, A111_CS_N_Pin, GPIO_PIN_RESET);
 800070c:	2200      	movs	r2, #0
 800070e:	2140      	movs	r1, #64	; 0x40
 8000710:	4807      	ldr	r0, [pc, #28]	; (8000730 <acc_hal_integration_sensor_power_off+0x2c>)
 8000712:	f001 f98f 	bl	8001a34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A111_ENABLE_GPIO_Port, A111_ENABLE_Pin, GPIO_PIN_RESET);
 8000716:	2200      	movs	r2, #0
 8000718:	2120      	movs	r1, #32
 800071a:	4805      	ldr	r0, [pc, #20]	; (8000730 <acc_hal_integration_sensor_power_off+0x2c>)
 800071c:	f001 f98a 	bl	8001a34 <HAL_GPIO_WritePin>

	// Wait after power off to leave the sensor in a known state
	// in case the application intends to enable the sensor directly
	HAL_Delay(2);
 8000720:	2002      	movs	r0, #2
 8000722:	f000 fe8f 	bl	8001444 <HAL_Delay>
}
 8000726:	bf00      	nop
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	48000400 	.word	0x48000400

08000734 <acc_hal_integration_wait_for_sensor_interrupt>:


static bool acc_hal_integration_wait_for_sensor_interrupt(acc_sensor_id_t sensor_id, uint32_t timeout_ms)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	6039      	str	r1, [r7, #0]
	(void)sensor_id; // Ignore parameter sensor_id

	const uint32_t wait_begin_ms = HAL_GetTick();
 800073e:	f000 fe75 	bl	800142c <HAL_GetTick>
 8000742:	60f8      	str	r0, [r7, #12]
	while ((HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) != GPIO_PIN_SET) &&
 8000744:	e00d      	b.n	8000762 <acc_hal_integration_wait_for_sensor_interrupt+0x2e>
	       (HAL_GetTick() - wait_begin_ms < timeout_ms))
	{
		// Wait for the GPIO interrupt
		disable_interrupts();
 8000746:	f7ff ff89 	bl	800065c <disable_interrupts>
		// Check again so that IRQ did not occur
		if (HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) != GPIO_PIN_SET)
 800074a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800074e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000752:	f001 f957 	bl	8001a04 <HAL_GPIO_ReadPin>
 8000756:	4603      	mov	r3, r0
 8000758:	2b01      	cmp	r3, #1
 800075a:	d000      	beq.n	800075e <acc_hal_integration_wait_for_sensor_interrupt+0x2a>
		{
			__WFI();
 800075c:	bf30      	wfi
		}

		// Enable interrupts again to allow pending interrupt to be handled
		enable_interrupts();
 800075e:	f7ff ff86 	bl	800066e <enable_interrupts>
	while ((HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) != GPIO_PIN_SET) &&
 8000762:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000766:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800076a:	f001 f94b 	bl	8001a04 <HAL_GPIO_ReadPin>
 800076e:	4603      	mov	r3, r0
 8000770:	2b01      	cmp	r3, #1
 8000772:	d007      	beq.n	8000784 <acc_hal_integration_wait_for_sensor_interrupt+0x50>
	       (HAL_GetTick() - wait_begin_ms < timeout_ms))
 8000774:	f000 fe5a 	bl	800142c <HAL_GetTick>
 8000778:	4602      	mov	r2, r0
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	1ad3      	subs	r3, r2, r3
	while ((HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) != GPIO_PIN_SET) &&
 800077e:	683a      	ldr	r2, [r7, #0]
 8000780:	429a      	cmp	r2, r3
 8000782:	d8e0      	bhi.n	8000746 <acc_hal_integration_wait_for_sensor_interrupt+0x12>
	}

	return HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) == GPIO_PIN_SET;
 8000784:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000788:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800078c:	f001 f93a 	bl	8001a04 <HAL_GPIO_ReadPin>
 8000790:	4603      	mov	r3, r0
 8000792:	2b01      	cmp	r3, #1
 8000794:	bf0c      	ite	eq
 8000796:	2301      	moveq	r3, #1
 8000798:	2300      	movne	r3, #0
 800079a:	b2db      	uxtb	r3, r3
}
 800079c:	4618      	mov	r0, r3
 800079e:	3710      	adds	r7, #16
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <acc_hal_integration_get_reference_frequency>:


static float acc_hal_integration_get_reference_frequency(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
	return ACC_BOARD_REF_FREQ;
 80007a8:	4b04      	ldr	r3, [pc, #16]	; (80007bc <acc_hal_integration_get_reference_frequency+0x18>)
 80007aa:	ee07 3a90 	vmov	s15, r3
}
 80007ae:	eeb0 0a67 	vmov.f32	s0, s15
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	4bc65d40 	.word	0x4bc65d40

080007c0 <acc_hal_integration_get_implementation>:
	.optimization.transfer16 = NULL,
};


const acc_hal_t *acc_hal_integration_get_implementation(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
	return &hal;
 80007c4:	4b02      	ldr	r3, [pc, #8]	; (80007d0 <acc_hal_integration_get_implementation+0x10>)
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr
 80007d0:	0800e234 	.word	0x0800e234

080007d4 <acc_integration_log>:

#define LOG_FORMAT "%02u:%02u:%02u.%03u (%c) (%s) %s\n"


void acc_integration_log(acc_log_level_t level, const char *module, const char *format, ...)
{
 80007d4:	b40c      	push	{r2, r3}
 80007d6:	b580      	push	{r7, lr}
 80007d8:	b0b4      	sub	sp, #208	; 0xd0
 80007da:	af04      	add	r7, sp, #16
 80007dc:	4603      	mov	r3, r0
 80007de:	6039      	str	r1, [r7, #0]
 80007e0:	71fb      	strb	r3, [r7, #7]
	char    log_buffer[LOG_BUFFER_MAX_SIZE];
	va_list ap;

	va_start(ap, format);
 80007e2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80007e6:	60bb      	str	r3, [r7, #8]

	int ret = vsnprintf(log_buffer, LOG_BUFFER_MAX_SIZE, format, ap);
 80007e8:	f107 000c 	add.w	r0, r7, #12
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80007f2:	2196      	movs	r1, #150	; 0x96
 80007f4:	f00c fb5c 	bl	800ceb0 <vsniprintf>
 80007f8:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc

	if (ret >= LOG_BUFFER_MAX_SIZE)
 80007fc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000800:	2b95      	cmp	r3, #149	; 0x95
 8000802:	dd0b      	ble.n	800081c <acc_integration_log+0x48>
	{
		log_buffer[LOG_BUFFER_MAX_SIZE - 4] = '.';
 8000804:	232e      	movs	r3, #46	; 0x2e
 8000806:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
		log_buffer[LOG_BUFFER_MAX_SIZE - 3] = '.';
 800080a:	232e      	movs	r3, #46	; 0x2e
 800080c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		log_buffer[LOG_BUFFER_MAX_SIZE - 2] = '.';
 8000810:	232e      	movs	r3, #46	; 0x2e
 8000812:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
		log_buffer[LOG_BUFFER_MAX_SIZE - 1] = 0;
 8000816:	2300      	movs	r3, #0
 8000818:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
	}

	uint32_t time_ms = acc_integration_get_time();
 800081c:	f000 f876 	bl	800090c <acc_integration_get_time>
 8000820:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
	char     level_ch;

	unsigned int timestamp    = time_ms;
 8000824:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000828:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	unsigned int hours        = timestamp / 1000 / 60 / 60;
 800082c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000830:	4a2f      	ldr	r2, [pc, #188]	; (80008f0 <acc_integration_log+0x11c>)
 8000832:	fba2 2303 	umull	r2, r3, r2, r3
 8000836:	0d5b      	lsrs	r3, r3, #21
 8000838:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	unsigned int minutes      = timestamp / 1000 / 60 % 60;
 800083c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000840:	4a2c      	ldr	r2, [pc, #176]	; (80008f4 <acc_integration_log+0x120>)
 8000842:	fba2 2303 	umull	r2, r3, r2, r3
 8000846:	0b9a      	lsrs	r2, r3, #14
 8000848:	4b2b      	ldr	r3, [pc, #172]	; (80008f8 <acc_integration_log+0x124>)
 800084a:	fba3 1302 	umull	r1, r3, r3, r2
 800084e:	0959      	lsrs	r1, r3, #5
 8000850:	460b      	mov	r3, r1
 8000852:	011b      	lsls	r3, r3, #4
 8000854:	1a5b      	subs	r3, r3, r1
 8000856:	009b      	lsls	r3, r3, #2
 8000858:	1ad3      	subs	r3, r2, r3
 800085a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	unsigned int seconds      = timestamp / 1000 % 60;
 800085e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000862:	4a26      	ldr	r2, [pc, #152]	; (80008fc <acc_integration_log+0x128>)
 8000864:	fba2 2303 	umull	r2, r3, r2, r3
 8000868:	099a      	lsrs	r2, r3, #6
 800086a:	4b23      	ldr	r3, [pc, #140]	; (80008f8 <acc_integration_log+0x124>)
 800086c:	fba3 1302 	umull	r1, r3, r3, r2
 8000870:	0959      	lsrs	r1, r3, #5
 8000872:	460b      	mov	r3, r1
 8000874:	011b      	lsls	r3, r3, #4
 8000876:	1a5b      	subs	r3, r3, r1
 8000878:	009b      	lsls	r3, r3, #2
 800087a:	1ad3      	subs	r3, r2, r3
 800087c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	unsigned int milliseconds = timestamp % 1000;
 8000880:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000884:	4a1d      	ldr	r2, [pc, #116]	; (80008fc <acc_integration_log+0x128>)
 8000886:	fba2 1203 	umull	r1, r2, r2, r3
 800088a:	0992      	lsrs	r2, r2, #6
 800088c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000890:	fb01 f202 	mul.w	r2, r1, r2
 8000894:	1a9b      	subs	r3, r3, r2
 8000896:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	level_ch = (level <= ACC_LOG_LEVEL_DEBUG) ? "EWIVD"[level] : '?';
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	2b04      	cmp	r3, #4
 800089e:	d803      	bhi.n	80008a8 <acc_integration_log+0xd4>
 80008a0:	79fb      	ldrb	r3, [r7, #7]
 80008a2:	4a17      	ldr	r2, [pc, #92]	; (8000900 <acc_integration_log+0x12c>)
 80008a4:	5cd3      	ldrb	r3, [r2, r3]
 80008a6:	e000      	b.n	80008aa <acc_integration_log+0xd6>
 80008a8:	233f      	movs	r3, #63	; 0x3f
 80008aa:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

	printf(LOG_FORMAT, hours, minutes, seconds, milliseconds, level_ch, module, log_buffer);
 80008ae:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80008b2:	f107 020c 	add.w	r2, r7, #12
 80008b6:	9203      	str	r2, [sp, #12]
 80008b8:	683a      	ldr	r2, [r7, #0]
 80008ba:	9202      	str	r2, [sp, #8]
 80008bc:	9301      	str	r3, [sp, #4]
 80008be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80008c2:	9300      	str	r3, [sp, #0]
 80008c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80008c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80008cc:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 80008d0:	480c      	ldr	r0, [pc, #48]	; (8000904 <acc_integration_log+0x130>)
 80008d2:	f00c fafb 	bl	800cecc <iprintf>

	fflush(stdout);
 80008d6:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <acc_integration_log+0x134>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	689b      	ldr	r3, [r3, #8]
 80008dc:	4618      	mov	r0, r3
 80008de:	f00c f9eb 	bl	800ccb8 <fflush>

	va_end(ap);
}
 80008e2:	bf00      	nop
 80008e4:	37c0      	adds	r7, #192	; 0xc0
 80008e6:	46bd      	mov	sp, r7
 80008e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80008ec:	b002      	add	sp, #8
 80008ee:	4770      	bx	lr
 80008f0:	95217cb1 	.word	0x95217cb1
 80008f4:	45e7b273 	.word	0x45e7b273
 80008f8:	88888889 	.word	0x88888889
 80008fc:	10624dd3 	.word	0x10624dd3
 8000900:	0800e18c 	.word	0x0800e18c
 8000904:	0800e168 	.word	0x0800e168
 8000908:	200001e4 	.word	0x200001e4

0800090c <acc_integration_get_time>:
	HAL_Delay(time_msec);
}


uint32_t acc_integration_get_time(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8000910:	f000 fd8c 	bl	800142c <HAL_GetTick>
 8000914:	4603      	mov	r3, r0
}
 8000916:	4618      	mov	r0, r3
 8000918:	bd80      	pop	{r7, pc}
	...

0800091c <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	60f8      	str	r0, [r7, #12]
 8000924:	60b9      	str	r1, [r7, #8]
 8000926:	607a      	str	r2, [r7, #4]
	(void)file;
	HAL_UART_Transmit(&huart2, ptr, len, 0xFFFF);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	b29a      	uxth	r2, r3
 800092c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000930:	68b9      	ldr	r1, [r7, #8]
 8000932:	4804      	ldr	r0, [pc, #16]	; (8000944 <_write+0x28>)
 8000934:	f003 f852 	bl	80039dc <HAL_UART_Transmit>
	return len;
 8000938:	687b      	ldr	r3, [r7, #4]
}
 800093a:	4618      	mov	r0, r3
 800093c:	3710      	adds	r7, #16
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	20000268 	.word	0x20000268

08000948 <update_configuration.1>:
{
  /* USER CODE BEGIN 1 */


	void update_configuration(acc_service_configuration_t envelope_configuration)
	{
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
 8000950:	f8c7 c000 	str.w	ip, [r7]
		float start_m  = 0.2f;
 8000954:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <update_configuration.1+0x3c>)
 8000956:	60fb      	str	r3, [r7, #12]
		float length_m = 0.5f;
 8000958:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 800095c:	60bb      	str	r3, [r7, #8]

		acc_service_profile_set(envelope_configuration, ACC_SERVICE_PROFILE_3);
 800095e:	2103      	movs	r1, #3
 8000960:	6878      	ldr	r0, [r7, #4]
 8000962:	f003 ffab 	bl	80048bc <acc_service_profile_set>
		acc_service_requested_start_set(envelope_configuration, start_m);
 8000966:	ed97 0a03 	vldr	s0, [r7, #12]
 800096a:	6878      	ldr	r0, [r7, #4]
 800096c:	f003 fe22 	bl	80045b4 <acc_service_requested_start_set>
		acc_service_requested_length_set(envelope_configuration, length_m);
 8000970:	ed97 0a02 	vldr	s0, [r7, #8]
 8000974:	6878      	ldr	r0, [r7, #4]
 8000976:	f003 fe2b 	bl	80045d0 <acc_service_requested_length_set>
	}
 800097a:	bf00      	nop
 800097c:	3710      	adds	r7, #16
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	3e4ccccd 	.word	0x3e4ccccd

08000988 <main>:
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
int main(void)
 800098e:	f107 0310 	add.w	r3, r7, #16
 8000992:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000994:	f000 fcda 	bl	800134c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000998:	f000 f93a 	bl	8000c10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800099c:	f000 f9f8 	bl	8000d90 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80009a0:	f000 f9c6 	bl	8000d30 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 80009a4:	f000 f986 	bl	8000cb4 <MX_SPI3_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_Delay(5000);
 80009a8:	f241 3088 	movw	r0, #5000	; 0x1388
 80009ac:	f000 fd4a 	bl	8001444 <HAL_Delay>
	  acc_example_service_envelope(0, NULL);
 80009b0:	1d3b      	adds	r3, r7, #4
 80009b2:	469c      	mov	ip, r3
 80009b4:	2100      	movs	r1, #0
 80009b6:	2000      	movs	r0, #0
 80009b8:	f000 f826 	bl	8000a08 <acc_example_service_envelope.0>
	  HAL_Delay(5000);
 80009bc:	e7f4      	b.n	80009a8 <main+0x20>
	...

080009c0 <print_data.2>:
	{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b086      	sub	sp, #24
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	60f8      	str	r0, [r7, #12]
 80009c8:	460b      	mov	r3, r1
 80009ca:	817b      	strh	r3, [r7, #10]
 80009cc:	f8c7 c004 	str.w	ip, [r7, #4]
		for (uint16_t i = 0; i < data_length; i++)
 80009d0:	2300      	movs	r3, #0
 80009d2:	82fb      	strh	r3, [r7, #22]
 80009d4:	e00b      	b.n	80009ee <print_data.2+0x2e>
			printf("%6u", (unsigned int)(data[i]));
 80009d6:	8afb      	ldrh	r3, [r7, #22]
 80009d8:	005b      	lsls	r3, r3, #1
 80009da:	68fa      	ldr	r2, [r7, #12]
 80009dc:	4413      	add	r3, r2
 80009de:	881b      	ldrh	r3, [r3, #0]
 80009e0:	4619      	mov	r1, r3
 80009e2:	4808      	ldr	r0, [pc, #32]	; (8000a04 <print_data.2+0x44>)
 80009e4:	f00c fa72 	bl	800cecc <iprintf>
		for (uint16_t i = 0; i < data_length; i++)
 80009e8:	8afb      	ldrh	r3, [r7, #22]
 80009ea:	3301      	adds	r3, #1
 80009ec:	82fb      	strh	r3, [r7, #22]
 80009ee:	8afa      	ldrh	r2, [r7, #22]
 80009f0:	897b      	ldrh	r3, [r7, #10]
 80009f2:	429a      	cmp	r2, r3
 80009f4:	d3ef      	bcc.n	80009d6 <print_data.2+0x16>
		printf("\n");
 80009f6:	200a      	movs	r0, #10
 80009f8:	f00c fa7a 	bl	800cef0 <putchar>
	}
 80009fc:	bf00      	nop
 80009fe:	3718      	adds	r7, #24
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	0800e194 	.word	0x0800e194

08000a08 <acc_example_service_envelope.0>:
	{
 8000a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a0c:	b094      	sub	sp, #80	; 0x50
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	60f8      	str	r0, [r7, #12]
 8000a12:	60b9      	str	r1, [r7, #8]
 8000a14:	4666      	mov	r6, ip
 8000a16:	f8c7 c004 	str.w	ip, [r7, #4]
 8000a1a:	466b      	mov	r3, sp
 8000a1c:	469a      	mov	sl, r3
		const acc_hal_t *hal = acc_hal_integration_get_implementation();
 8000a1e:	f7ff fecf 	bl	80007c0 <acc_hal_integration_get_implementation>
 8000a22:	6478      	str	r0, [r7, #68]	; 0x44
		if (!acc_rss_activate(hal))
 8000a24:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000a26:	f003 fd31 	bl	800448c <acc_rss_activate>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	f083 0301 	eor.w	r3, r3, #1
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d004      	beq.n	8000a40 <acc_example_service_envelope.0+0x38>
			printf("acc_rss_activate() failed\n");
 8000a36:	4870      	ldr	r0, [pc, #448]	; (8000bf8 <acc_example_service_envelope.0+0x1f0>)
 8000a38:	f00c fab6 	bl	800cfa8 <puts>
			return EXIT_FAILURE;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	e0d4      	b.n	8000bea <acc_example_service_envelope.0+0x1e2>
		acc_service_configuration_t envelope_configuration = acc_service_envelope_configuration_create();
 8000a40:	f004 f87e 	bl	8004b40 <acc_service_envelope_configuration_create>
 8000a44:	4603      	mov	r3, r0
 8000a46:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (envelope_configuration == NULL)
 8000a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d106      	bne.n	8000a5c <acc_example_service_envelope.0+0x54>
			printf("acc_service_envelope_configuration_create() failed\n");
 8000a4e:	486b      	ldr	r0, [pc, #428]	; (8000bfc <acc_example_service_envelope.0+0x1f4>)
 8000a50:	f00c faaa 	bl	800cfa8 <puts>
			acc_rss_deactivate();
 8000a54:	f003 fd58 	bl	8004508 <acc_rss_deactivate>
			return EXIT_FAILURE;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	e0c6      	b.n	8000bea <acc_example_service_envelope.0+0x1e2>
		update_configuration(envelope_configuration);
 8000a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a5e:	46b4      	mov	ip, r6
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff ff71 	bl	8000948 <update_configuration.1>
		acc_service_handle_t handle = acc_service_create(envelope_configuration);
 8000a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f004 f989 	bl	8004d80 <acc_service_create>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	62bb      	str	r3, [r7, #40]	; 0x28
		if (handle == NULL)
 8000a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d10b      	bne.n	8000a90 <acc_example_service_envelope.0+0x88>
			printf("acc_service_create() failed\n");
 8000a78:	4861      	ldr	r0, [pc, #388]	; (8000c00 <acc_example_service_envelope.0+0x1f8>)
 8000a7a:	f00c fa95 	bl	800cfa8 <puts>
			acc_service_envelope_configuration_destroy(&envelope_configuration);
 8000a7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a82:	4618      	mov	r0, r3
 8000a84:	f004 f8ea 	bl	8004c5c <acc_service_envelope_configuration_destroy>
			acc_rss_deactivate();
 8000a88:	f003 fd3e 	bl	8004508 <acc_rss_deactivate>
			return EXIT_FAILURE;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	e0ac      	b.n	8000bea <acc_example_service_envelope.0+0x1e2>
		acc_service_envelope_configuration_destroy(&envelope_configuration);
 8000a90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a94:	4618      	mov	r0, r3
 8000a96:	f004 f8e1 	bl	8004c5c <acc_service_envelope_configuration_destroy>
		acc_service_envelope_metadata_t envelope_metadata = { 0 };
 8000a9a:	f107 0318 	add.w	r3, r7, #24
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	605a      	str	r2, [r3, #4]
 8000aa4:	609a      	str	r2, [r3, #8]
 8000aa6:	60da      	str	r2, [r3, #12]
		acc_service_envelope_get_metadata(handle, &envelope_metadata);
 8000aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aaa:	f107 0218 	add.w	r2, r7, #24
 8000aae:	4611      	mov	r1, r2
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f004 f8e5 	bl	8004c80 <acc_service_envelope_get_metadata>
		if (!acc_service_activate(handle))
 8000ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f003 fddd 	bl	8004678 <acc_service_activate>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	f083 0301 	eor.w	r3, r3, #1
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d00b      	beq.n	8000ae2 <acc_example_service_envelope.0+0xda>
			printf("acc_service_activate() failed\n");
 8000aca:	484e      	ldr	r0, [pc, #312]	; (8000c04 <acc_example_service_envelope.0+0x1fc>)
 8000acc:	f00c fa6c 	bl	800cfa8 <puts>
			acc_service_destroy(&handle);
 8000ad0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f004 f9c7 	bl	8004e68 <acc_service_destroy>
			acc_rss_deactivate();
 8000ada:	f003 fd15 	bl	8004508 <acc_rss_deactivate>
			return EXIT_FAILURE;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	e083      	b.n	8000bea <acc_example_service_envelope.0+0x1e2>
		bool                               success    = true;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		const int                          iterations = 5;
 8000ae8:	2305      	movs	r3, #5
 8000aea:	643b      	str	r3, [r7, #64]	; 0x40
		uint16_t                           data[envelope_metadata.data_length];
 8000aec:	8c39      	ldrh	r1, [r7, #32]
 8000aee:	460b      	mov	r3, r1
 8000af0:	3b01      	subs	r3, #1
 8000af2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000af4:	b28b      	uxth	r3, r1
 8000af6:	2200      	movs	r2, #0
 8000af8:	4698      	mov	r8, r3
 8000afa:	4691      	mov	r9, r2
 8000afc:	f04f 0200 	mov.w	r2, #0
 8000b00:	f04f 0300 	mov.w	r3, #0
 8000b04:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8000b08:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8000b0c:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8000b10:	b28b      	uxth	r3, r1
 8000b12:	2200      	movs	r2, #0
 8000b14:	461c      	mov	r4, r3
 8000b16:	4615      	mov	r5, r2
 8000b18:	f04f 0200 	mov.w	r2, #0
 8000b1c:	f04f 0300 	mov.w	r3, #0
 8000b20:	012b      	lsls	r3, r5, #4
 8000b22:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000b26:	0122      	lsls	r2, r4, #4
 8000b28:	460b      	mov	r3, r1
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	3307      	adds	r3, #7
 8000b2e:	08db      	lsrs	r3, r3, #3
 8000b30:	00db      	lsls	r3, r3, #3
 8000b32:	ebad 0d03 	sub.w	sp, sp, r3
 8000b36:	466b      	mov	r3, sp
 8000b38:	3301      	adds	r3, #1
 8000b3a:	085b      	lsrs	r3, r3, #1
 8000b3c:	005b      	lsls	r3, r3, #1
 8000b3e:	63bb      	str	r3, [r7, #56]	; 0x38
		for (int i = 0; i < iterations; i++)
 8000b40:	2300      	movs	r3, #0
 8000b42:	64bb      	str	r3, [r7, #72]	; 0x48
 8000b44:	e032      	b.n	8000bac <acc_example_service_envelope.0+0x1a4>
			success = acc_service_envelope_get_next(handle, data, envelope_metadata.data_length, &result_info);
 8000b46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000b48:	8c3a      	ldrh	r2, [r7, #32]
 8000b4a:	f107 0314 	add.w	r3, r7, #20
 8000b4e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000b50:	f004 f8b8 	bl	8004cc4 <acc_service_envelope_get_next>
 8000b54:	4603      	mov	r3, r0
 8000b56:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			if (!success)
 8000b5a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000b5e:	f083 0301 	eor.w	r3, r3, #1
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d126      	bne.n	8000bb6 <acc_example_service_envelope.0+0x1ae>
			int* peaks = mutliple_peak_detection(data, envelope_metadata.data_length);
 8000b68:	8c3b      	ldrh	r3, [r7, #32]
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000b6e:	f000 f9a6 	bl	8000ebe <mutliple_peak_detection>
 8000b72:	6378      	str	r0, [r7, #52]	; 0x34
			print_data(data, envelope_metadata.data_length);
 8000b74:	8c3b      	ldrh	r3, [r7, #32]
 8000b76:	46b4      	mov	ip, r6
 8000b78:	4619      	mov	r1, r3
 8000b7a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000b7c:	f7ff ff20 	bl	80009c0 <print_data.2>
			printf("Peaks ");
 8000b80:	4821      	ldr	r0, [pc, #132]	; (8000c08 <acc_example_service_envelope.0+0x200>)
 8000b82:	f00c f9a3 	bl	800cecc <iprintf>
			printf("%6u ", (unsigned int)(peaks[0]));
 8000b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	481f      	ldr	r0, [pc, #124]	; (8000c0c <acc_example_service_envelope.0+0x204>)
 8000b8e:	f00c f99d 	bl	800cecc <iprintf>
			printf("%6u ", (unsigned int)(peaks[1]));
 8000b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b94:	3304      	adds	r3, #4
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4619      	mov	r1, r3
 8000b9a:	481c      	ldr	r0, [pc, #112]	; (8000c0c <acc_example_service_envelope.0+0x204>)
 8000b9c:	f00c f996 	bl	800cecc <iprintf>
			printf("\n");
 8000ba0:	200a      	movs	r0, #10
 8000ba2:	f00c f9a5 	bl	800cef0 <putchar>
		for (int i = 0; i < iterations; i++)
 8000ba6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ba8:	3301      	adds	r3, #1
 8000baa:	64bb      	str	r3, [r7, #72]	; 0x48
 8000bac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000bae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	dbc8      	blt.n	8000b46 <acc_example_service_envelope.0+0x13e>
 8000bb4:	e000      	b.n	8000bb8 <acc_example_service_envelope.0+0x1b0>
				break;
 8000bb6:	bf00      	nop
		bool deactivated = acc_service_deactivate(handle);
 8000bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f003 fd9e 	bl	80046fc <acc_service_deactivate>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		acc_service_destroy(&handle);
 8000bc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f004 f94c 	bl	8004e68 <acc_service_destroy>
		acc_rss_deactivate();
 8000bd0:	f003 fc9a 	bl	8004508 <acc_rss_deactivate>
		if (deactivated && success)
 8000bd4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d005      	beq.n	8000be8 <acc_example_service_envelope.0+0x1e0>
 8000bdc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <acc_example_service_envelope.0+0x1e0>
			return EXIT_SUCCESS;
 8000be4:	2300      	movs	r3, #0
 8000be6:	e000      	b.n	8000bea <acc_example_service_envelope.0+0x1e2>
		return EXIT_FAILURE;
 8000be8:	2301      	movs	r3, #1
 8000bea:	46d5      	mov	sp, sl
	}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3750      	adds	r7, #80	; 0x50
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf6:	bf00      	nop
 8000bf8:	0800e198 	.word	0x0800e198
 8000bfc:	0800e1b4 	.word	0x0800e1b4
 8000c00:	0800e1e8 	.word	0x0800e1e8
 8000c04:	0800e204 	.word	0x0800e204
 8000c08:	0800e224 	.word	0x0800e224
 8000c0c:	0800e22c 	.word	0x0800e22c

08000c10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b096      	sub	sp, #88	; 0x58
 8000c14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c16:	f107 0314 	add.w	r3, r7, #20
 8000c1a:	2244      	movs	r2, #68	; 0x44
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f00c f9e4 	bl	800cfec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c24:	463b      	mov	r3, r7
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	605a      	str	r2, [r3, #4]
 8000c2c:	609a      	str	r2, [r3, #8]
 8000c2e:	60da      	str	r2, [r3, #12]
 8000c30:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c32:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c36:	f000 ff47 	bl	8001ac8 <HAL_PWREx_ControlVoltageScaling>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000c40:	f000 f938 	bl	8000eb4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c44:	2302      	movs	r3, #2
 8000c46:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c4c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c4e:	2310      	movs	r3, #16
 8000c50:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c52:	2302      	movs	r3, #2
 8000c54:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c56:	2302      	movs	r3, #2
 8000c58:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000c5e:	230a      	movs	r3, #10
 8000c60:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000c62:	2307      	movs	r3, #7
 8000c64:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c66:	2302      	movs	r3, #2
 8000c68:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c6e:	f107 0314 	add.w	r3, r7, #20
 8000c72:	4618      	mov	r0, r3
 8000c74:	f000 ff7e 	bl	8001b74 <HAL_RCC_OscConfig>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000c7e:	f000 f919 	bl	8000eb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c82:	230f      	movs	r3, #15
 8000c84:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c86:	2303      	movs	r3, #3
 8000c88:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c92:	2300      	movs	r3, #0
 8000c94:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c96:	463b      	mov	r3, r7
 8000c98:	2104      	movs	r1, #4
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f001 fb46 	bl	800232c <HAL_RCC_ClockConfig>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000ca6:	f000 f905 	bl	8000eb4 <Error_Handler>
  }
}
 8000caa:	bf00      	nop
 8000cac:	3758      	adds	r7, #88	; 0x58
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
	...

08000cb4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000cb8:	4b1b      	ldr	r3, [pc, #108]	; (8000d28 <MX_SPI3_Init+0x74>)
 8000cba:	4a1c      	ldr	r2, [pc, #112]	; (8000d2c <MX_SPI3_Init+0x78>)
 8000cbc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000cbe:	4b1a      	ldr	r3, [pc, #104]	; (8000d28 <MX_SPI3_Init+0x74>)
 8000cc0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cc4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000cc6:	4b18      	ldr	r3, [pc, #96]	; (8000d28 <MX_SPI3_Init+0x74>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ccc:	4b16      	ldr	r3, [pc, #88]	; (8000d28 <MX_SPI3_Init+0x74>)
 8000cce:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000cd2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cd4:	4b14      	ldr	r3, [pc, #80]	; (8000d28 <MX_SPI3_Init+0x74>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cda:	4b13      	ldr	r3, [pc, #76]	; (8000d28 <MX_SPI3_Init+0x74>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000ce0:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <MX_SPI3_Init+0x74>)
 8000ce2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ce6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000ce8:	4b0f      	ldr	r3, [pc, #60]	; (8000d28 <MX_SPI3_Init+0x74>)
 8000cea:	2228      	movs	r2, #40	; 0x28
 8000cec:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cee:	4b0e      	ldr	r3, [pc, #56]	; (8000d28 <MX_SPI3_Init+0x74>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cf4:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <MX_SPI3_Init+0x74>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cfa:	4b0b      	ldr	r3, [pc, #44]	; (8000d28 <MX_SPI3_Init+0x74>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000d00:	4b09      	ldr	r3, [pc, #36]	; (8000d28 <MX_SPI3_Init+0x74>)
 8000d02:	2207      	movs	r2, #7
 8000d04:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d06:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <MX_SPI3_Init+0x74>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d0c:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <MX_SPI3_Init+0x74>)
 8000d0e:	2208      	movs	r2, #8
 8000d10:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000d12:	4805      	ldr	r0, [pc, #20]	; (8000d28 <MX_SPI3_Init+0x74>)
 8000d14:	f002 f9ea 	bl	80030ec <HAL_SPI_Init>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000d1e:	f000 f8c9 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000d22:	bf00      	nop
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	20000204 	.word	0x20000204
 8000d2c:	40003c00 	.word	0x40003c00

08000d30 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d34:	4b14      	ldr	r3, [pc, #80]	; (8000d88 <MX_USART2_UART_Init+0x58>)
 8000d36:	4a15      	ldr	r2, [pc, #84]	; (8000d8c <MX_USART2_UART_Init+0x5c>)
 8000d38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d3a:	4b13      	ldr	r3, [pc, #76]	; (8000d88 <MX_USART2_UART_Init+0x58>)
 8000d3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d42:	4b11      	ldr	r3, [pc, #68]	; (8000d88 <MX_USART2_UART_Init+0x58>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d48:	4b0f      	ldr	r3, [pc, #60]	; (8000d88 <MX_USART2_UART_Init+0x58>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d4e:	4b0e      	ldr	r3, [pc, #56]	; (8000d88 <MX_USART2_UART_Init+0x58>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d54:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <MX_USART2_UART_Init+0x58>)
 8000d56:	220c      	movs	r2, #12
 8000d58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d5a:	4b0b      	ldr	r3, [pc, #44]	; (8000d88 <MX_USART2_UART_Init+0x58>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d60:	4b09      	ldr	r3, [pc, #36]	; (8000d88 <MX_USART2_UART_Init+0x58>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d66:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <MX_USART2_UART_Init+0x58>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d6c:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <MX_USART2_UART_Init+0x58>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d72:	4805      	ldr	r0, [pc, #20]	; (8000d88 <MX_USART2_UART_Init+0x58>)
 8000d74:	f002 fde4 	bl	8003940 <HAL_UART_Init>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d7e:	f000 f899 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20000268 	.word	0x20000268
 8000d8c:	40004400 	.word	0x40004400

08000d90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b08a      	sub	sp, #40	; 0x28
 8000d94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d96:	f107 0314 	add.w	r3, r7, #20
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	605a      	str	r2, [r3, #4]
 8000da0:	609a      	str	r2, [r3, #8]
 8000da2:	60da      	str	r2, [r3, #12]
 8000da4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000da6:	4b40      	ldr	r3, [pc, #256]	; (8000ea8 <MX_GPIO_Init+0x118>)
 8000da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000daa:	4a3f      	ldr	r2, [pc, #252]	; (8000ea8 <MX_GPIO_Init+0x118>)
 8000dac:	f043 0304 	orr.w	r3, r3, #4
 8000db0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000db2:	4b3d      	ldr	r3, [pc, #244]	; (8000ea8 <MX_GPIO_Init+0x118>)
 8000db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db6:	f003 0304 	and.w	r3, r3, #4
 8000dba:	613b      	str	r3, [r7, #16]
 8000dbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dbe:	4b3a      	ldr	r3, [pc, #232]	; (8000ea8 <MX_GPIO_Init+0x118>)
 8000dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc2:	4a39      	ldr	r2, [pc, #228]	; (8000ea8 <MX_GPIO_Init+0x118>)
 8000dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dca:	4b37      	ldr	r3, [pc, #220]	; (8000ea8 <MX_GPIO_Init+0x118>)
 8000dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd6:	4b34      	ldr	r3, [pc, #208]	; (8000ea8 <MX_GPIO_Init+0x118>)
 8000dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dda:	4a33      	ldr	r2, [pc, #204]	; (8000ea8 <MX_GPIO_Init+0x118>)
 8000ddc:	f043 0301 	orr.w	r3, r3, #1
 8000de0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000de2:	4b31      	ldr	r3, [pc, #196]	; (8000ea8 <MX_GPIO_Init+0x118>)
 8000de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	60bb      	str	r3, [r7, #8]
 8000dec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dee:	4b2e      	ldr	r3, [pc, #184]	; (8000ea8 <MX_GPIO_Init+0x118>)
 8000df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df2:	4a2d      	ldr	r2, [pc, #180]	; (8000ea8 <MX_GPIO_Init+0x118>)
 8000df4:	f043 0302 	orr.w	r3, r3, #2
 8000df8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dfa:	4b2b      	ldr	r3, [pc, #172]	; (8000ea8 <MX_GPIO_Init+0x118>)
 8000dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfe:	f003 0302 	and.w	r3, r3, #2
 8000e02:	607b      	str	r3, [r7, #4]
 8000e04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e06:	2200      	movs	r2, #0
 8000e08:	2120      	movs	r1, #32
 8000e0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e0e:	f000 fe11 	bl	8001a34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A111_ENABLE_Pin|A111_CS_N_Pin, GPIO_PIN_RESET);
 8000e12:	2200      	movs	r2, #0
 8000e14:	2160      	movs	r1, #96	; 0x60
 8000e16:	4825      	ldr	r0, [pc, #148]	; (8000eac <MX_GPIO_Init+0x11c>)
 8000e18:	f000 fe0c 	bl	8001a34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e22:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e2c:	f107 0314 	add.w	r3, r7, #20
 8000e30:	4619      	mov	r1, r3
 8000e32:	481f      	ldr	r0, [pc, #124]	; (8000eb0 <MX_GPIO_Init+0x120>)
 8000e34:	f000 fc3c 	bl	80016b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e38:	2320      	movs	r3, #32
 8000e3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e44:	2300      	movs	r3, #0
 8000e46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e48:	f107 0314 	add.w	r3, r7, #20
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e52:	f000 fc2d 	bl	80016b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : A111_SENSOR_INTERRUPT_Pin */
  GPIO_InitStruct.Pin = A111_SENSOR_INTERRUPT_Pin;
 8000e56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e5c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(A111_SENSOR_INTERRUPT_GPIO_Port, &GPIO_InitStruct);
 8000e66:	f107 0314 	add.w	r3, r7, #20
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e70:	f000 fc1e 	bl	80016b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : A111_ENABLE_Pin A111_CS_N_Pin */
  GPIO_InitStruct.Pin = A111_ENABLE_Pin|A111_CS_N_Pin;
 8000e74:	2360      	movs	r3, #96	; 0x60
 8000e76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e80:	2300      	movs	r3, #0
 8000e82:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e84:	f107 0314 	add.w	r3, r7, #20
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4808      	ldr	r0, [pc, #32]	; (8000eac <MX_GPIO_Init+0x11c>)
 8000e8c:	f000 fc10 	bl	80016b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000e90:	2200      	movs	r2, #0
 8000e92:	2100      	movs	r1, #0
 8000e94:	2017      	movs	r0, #23
 8000e96:	f000 fbd4 	bl	8001642 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000e9a:	2017      	movs	r0, #23
 8000e9c:	f000 fbed 	bl	800167a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ea0:	bf00      	nop
 8000ea2:	3728      	adds	r7, #40	; 0x28
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	40021000 	.word	0x40021000
 8000eac:	48000400 	.word	0x48000400
 8000eb0:	48000800 	.word	0x48000800

08000eb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000eb8:	b672      	cpsid	i
}
 8000eba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ebc:	e7fe      	b.n	8000ebc <Error_Handler+0x8>

08000ebe <mutliple_peak_detection>:

struct Tuple{
	int index;
	uint16_t value;
};
int* mutliple_peak_detection(uint16_t *data, uint16_t data_length){
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b08c      	sub	sp, #48	; 0x30
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	807b      	strh	r3, [r7, #2]

	uint16_t sum = 0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	85fb      	strh	r3, [r7, #46]	; 0x2e
	for (int i = 0; i < data_length; i++){
 8000ece:	2300      	movs	r3, #0
 8000ed0:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ed2:	e00a      	b.n	8000eea <mutliple_peak_detection+0x2c>
		sum = sum + data[i];
 8000ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	687a      	ldr	r2, [r7, #4]
 8000eda:	4413      	add	r3, r2
 8000edc:	881a      	ldrh	r2, [r3, #0]
 8000ede:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000ee0:	4413      	add	r3, r2
 8000ee2:	85fb      	strh	r3, [r7, #46]	; 0x2e
	for (int i = 0; i < data_length; i++){
 8000ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	62bb      	str	r3, [r7, #40]	; 0x28
 8000eea:	887b      	ldrh	r3, [r7, #2]
 8000eec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	dbf0      	blt.n	8000ed4 <mutliple_peak_detection+0x16>

	}
	uint16_t baseline = sum/data_length;
 8000ef2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000ef4:	887b      	ldrh	r3, [r7, #2]
 8000ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000efa:	847b      	strh	r3, [r7, #34]	; 0x22
	struct Tuple peaks[] = {
 8000efc:	f107 030c 	add.w	r3, r7, #12
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
						   {0,0},
						   {0,0}
	};

	for (int i = 0;i<data_length-5;i++){
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	627b      	str	r3, [r7, #36]	; 0x24
 8000f0e:	e04d      	b.n	8000fac <mutliple_peak_detection+0xee>
		if (data[i] > data[i-1] && data[i] > data[i+5]){
 8000f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	687a      	ldr	r2, [r7, #4]
 8000f16:	4413      	add	r3, r2
 8000f18:	881a      	ldrh	r2, [r3, #0]
 8000f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f1c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8000f20:	3b01      	subs	r3, #1
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	6879      	ldr	r1, [r7, #4]
 8000f26:	440b      	add	r3, r1
 8000f28:	881b      	ldrh	r3, [r3, #0]
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	d93b      	bls.n	8000fa6 <mutliple_peak_detection+0xe8>
 8000f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	4413      	add	r3, r2
 8000f36:	881a      	ldrh	r2, [r3, #0]
 8000f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f3a:	3305      	adds	r3, #5
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	6879      	ldr	r1, [r7, #4]
 8000f40:	440b      	add	r3, r1
 8000f42:	881b      	ldrh	r3, [r3, #0]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d92e      	bls.n	8000fa6 <mutliple_peak_detection+0xe8>
			if (data[i] > peaks[0].value){
 8000f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	4413      	add	r3, r2
 8000f50:	881a      	ldrh	r2, [r3, #0]
 8000f52:	8a3b      	ldrh	r3, [r7, #16]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d911      	bls.n	8000f7c <mutliple_peak_detection+0xbe>
				if (i - peaks[0].index > 10){
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	2b0a      	cmp	r3, #10
 8000f60:	dd03      	ble.n	8000f6a <mutliple_peak_detection+0xac>
					peaks[1].index = peaks[0].index;
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	617b      	str	r3, [r7, #20]
					peaks[1].value = peaks[0].value;
 8000f66:	8a3b      	ldrh	r3, [r7, #16]
 8000f68:	833b      	strh	r3, [r7, #24]
				}
				peaks[0].index = i;
 8000f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6c:	60fb      	str	r3, [r7, #12]
				peaks[0].value = data[i];
 8000f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	687a      	ldr	r2, [r7, #4]
 8000f74:	4413      	add	r3, r2
 8000f76:	881b      	ldrh	r3, [r3, #0]
 8000f78:	823b      	strh	r3, [r7, #16]
 8000f7a:	e014      	b.n	8000fa6 <mutliple_peak_detection+0xe8>
			}

			else if (data[i] > peaks[1].value && i - peaks[0].index > 10){
 8000f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	687a      	ldr	r2, [r7, #4]
 8000f82:	4413      	add	r3, r2
 8000f84:	881a      	ldrh	r2, [r3, #0]
 8000f86:	8b3b      	ldrh	r3, [r7, #24]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d90c      	bls.n	8000fa6 <mutliple_peak_detection+0xe8>
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	2b0a      	cmp	r3, #10
 8000f94:	dd07      	ble.n	8000fa6 <mutliple_peak_detection+0xe8>
				peaks[1].index = i;
 8000f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f98:	617b      	str	r3, [r7, #20]
				peaks[1].value = data[i];
 8000f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	687a      	ldr	r2, [r7, #4]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	881b      	ldrh	r3, [r3, #0]
 8000fa4:	833b      	strh	r3, [r7, #24]
	for (int i = 0;i<data_length-5;i++){
 8000fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa8:	3301      	adds	r3, #1
 8000faa:	627b      	str	r3, [r7, #36]	; 0x24
 8000fac:	887b      	ldrh	r3, [r7, #2]
 8000fae:	3b05      	subs	r3, #5
 8000fb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fb2:	429a      	cmp	r2, r3
 8000fb4:	dbac      	blt.n	8000f10 <mutliple_peak_detection+0x52>
			}
		}
	}
	int* peakIndexes = (int*)malloc(2 * sizeof(int));
 8000fb6:	2008      	movs	r0, #8
 8000fb8:	f00b fd20 	bl	800c9fc <malloc>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	61fb      	str	r3, [r7, #28]

	peakIndexes[0] = peaks[0].index;
 8000fc0:	68fa      	ldr	r2, [r7, #12]
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	601a      	str	r2, [r3, #0]
	peakIndexes[1] = peaks[1].index;
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	3304      	adds	r3, #4
 8000fca:	697a      	ldr	r2, [r7, #20]
 8000fcc:	601a      	str	r2, [r3, #0]

	return peakIndexes;
 8000fce:	69fb      	ldr	r3, [r7, #28]



}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3730      	adds	r7, #48	; 0x30
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fde:	4b0f      	ldr	r3, [pc, #60]	; (800101c <HAL_MspInit+0x44>)
 8000fe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fe2:	4a0e      	ldr	r2, [pc, #56]	; (800101c <HAL_MspInit+0x44>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	6613      	str	r3, [r2, #96]	; 0x60
 8000fea:	4b0c      	ldr	r3, [pc, #48]	; (800101c <HAL_MspInit+0x44>)
 8000fec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ff6:	4b09      	ldr	r3, [pc, #36]	; (800101c <HAL_MspInit+0x44>)
 8000ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ffa:	4a08      	ldr	r2, [pc, #32]	; (800101c <HAL_MspInit+0x44>)
 8000ffc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001000:	6593      	str	r3, [r2, #88]	; 0x58
 8001002:	4b06      	ldr	r3, [pc, #24]	; (800101c <HAL_MspInit+0x44>)
 8001004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800100a:	603b      	str	r3, [r7, #0]
 800100c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800100e:	bf00      	nop
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	40021000 	.word	0x40021000

08001020 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08a      	sub	sp, #40	; 0x28
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001028:	f107 0314 	add.w	r3, r7, #20
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a17      	ldr	r2, [pc, #92]	; (800109c <HAL_SPI_MspInit+0x7c>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d128      	bne.n	8001094 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001042:	4b17      	ldr	r3, [pc, #92]	; (80010a0 <HAL_SPI_MspInit+0x80>)
 8001044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001046:	4a16      	ldr	r2, [pc, #88]	; (80010a0 <HAL_SPI_MspInit+0x80>)
 8001048:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800104c:	6593      	str	r3, [r2, #88]	; 0x58
 800104e:	4b14      	ldr	r3, [pc, #80]	; (80010a0 <HAL_SPI_MspInit+0x80>)
 8001050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001052:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001056:	613b      	str	r3, [r7, #16]
 8001058:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800105a:	4b11      	ldr	r3, [pc, #68]	; (80010a0 <HAL_SPI_MspInit+0x80>)
 800105c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105e:	4a10      	ldr	r2, [pc, #64]	; (80010a0 <HAL_SPI_MspInit+0x80>)
 8001060:	f043 0304 	orr.w	r3, r3, #4
 8001064:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001066:	4b0e      	ldr	r3, [pc, #56]	; (80010a0 <HAL_SPI_MspInit+0x80>)
 8001068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800106a:	f003 0304 	and.w	r3, r3, #4
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = A111_SPI_SCK_Pin|A111_SPI_MISO_Pin|A111_SPI_MOSI_Pin;
 8001072:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001076:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001078:	2302      	movs	r3, #2
 800107a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001080:	2303      	movs	r3, #3
 8001082:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001084:	2306      	movs	r3, #6
 8001086:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001088:	f107 0314 	add.w	r3, r7, #20
 800108c:	4619      	mov	r1, r3
 800108e:	4805      	ldr	r0, [pc, #20]	; (80010a4 <HAL_SPI_MspInit+0x84>)
 8001090:	f000 fb0e 	bl	80016b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001094:	bf00      	nop
 8001096:	3728      	adds	r7, #40	; 0x28
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40003c00 	.word	0x40003c00
 80010a0:	40021000 	.word	0x40021000
 80010a4:	48000800 	.word	0x48000800

080010a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b0ac      	sub	sp, #176	; 0xb0
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010c0:	f107 0314 	add.w	r3, r7, #20
 80010c4:	2288      	movs	r2, #136	; 0x88
 80010c6:	2100      	movs	r1, #0
 80010c8:	4618      	mov	r0, r3
 80010ca:	f00b ff8f 	bl	800cfec <memset>
  if(huart->Instance==USART2)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a21      	ldr	r2, [pc, #132]	; (8001158 <HAL_UART_MspInit+0xb0>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d13b      	bne.n	8001150 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80010d8:	2302      	movs	r3, #2
 80010da:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80010dc:	2300      	movs	r3, #0
 80010de:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010e0:	f107 0314 	add.w	r3, r7, #20
 80010e4:	4618      	mov	r0, r3
 80010e6:	f001 fb45 	bl	8002774 <HAL_RCCEx_PeriphCLKConfig>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80010f0:	f7ff fee0 	bl	8000eb4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010f4:	4b19      	ldr	r3, [pc, #100]	; (800115c <HAL_UART_MspInit+0xb4>)
 80010f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010f8:	4a18      	ldr	r2, [pc, #96]	; (800115c <HAL_UART_MspInit+0xb4>)
 80010fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010fe:	6593      	str	r3, [r2, #88]	; 0x58
 8001100:	4b16      	ldr	r3, [pc, #88]	; (800115c <HAL_UART_MspInit+0xb4>)
 8001102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001108:	613b      	str	r3, [r7, #16]
 800110a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800110c:	4b13      	ldr	r3, [pc, #76]	; (800115c <HAL_UART_MspInit+0xb4>)
 800110e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001110:	4a12      	ldr	r2, [pc, #72]	; (800115c <HAL_UART_MspInit+0xb4>)
 8001112:	f043 0301 	orr.w	r3, r3, #1
 8001116:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001118:	4b10      	ldr	r3, [pc, #64]	; (800115c <HAL_UART_MspInit+0xb4>)
 800111a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111c:	f003 0301 	and.w	r3, r3, #1
 8001120:	60fb      	str	r3, [r7, #12]
 8001122:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001124:	230c      	movs	r3, #12
 8001126:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112a:	2302      	movs	r3, #2
 800112c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001136:	2303      	movs	r3, #3
 8001138:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800113c:	2307      	movs	r3, #7
 800113e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001142:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001146:	4619      	mov	r1, r3
 8001148:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800114c:	f000 fab0 	bl	80016b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001150:	bf00      	nop
 8001152:	37b0      	adds	r7, #176	; 0xb0
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	40004400 	.word	0x40004400
 800115c:	40021000 	.word	0x40021000

08001160 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001164:	e7fe      	b.n	8001164 <NMI_Handler+0x4>

08001166 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001166:	b480      	push	{r7}
 8001168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800116a:	e7fe      	b.n	800116a <HardFault_Handler+0x4>

0800116c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001170:	e7fe      	b.n	8001170 <MemManage_Handler+0x4>

08001172 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001172:	b480      	push	{r7}
 8001174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001176:	e7fe      	b.n	8001176 <BusFault_Handler+0x4>

08001178 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800117c:	e7fe      	b.n	800117c <UsageFault_Handler+0x4>

0800117e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800117e:	b480      	push	{r7}
 8001180:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001182:	bf00      	nop
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr

0800119a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800119a:	b480      	push	{r7}
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011ac:	f000 f92a 	bl	8001404 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011b0:	bf00      	nop
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(A111_SENSOR_INTERRUPT_Pin);
 80011b8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80011bc:	f000 fc52 	bl	8001a64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80011c0:	bf00      	nop
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011d0:	2300      	movs	r3, #0
 80011d2:	617b      	str	r3, [r7, #20]
 80011d4:	e00a      	b.n	80011ec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011d6:	f3af 8000 	nop.w
 80011da:	4601      	mov	r1, r0
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	1c5a      	adds	r2, r3, #1
 80011e0:	60ba      	str	r2, [r7, #8]
 80011e2:	b2ca      	uxtb	r2, r1
 80011e4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	3301      	adds	r3, #1
 80011ea:	617b      	str	r3, [r7, #20]
 80011ec:	697a      	ldr	r2, [r7, #20]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	dbf0      	blt.n	80011d6 <_read+0x12>
  }

  return len;
 80011f4:	687b      	ldr	r3, [r7, #4]
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3718      	adds	r7, #24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <_close>:
  }
  return len;
}

int _close(int file)
{
 80011fe:	b480      	push	{r7}
 8001200:	b083      	sub	sp, #12
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001206:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800120a:	4618      	mov	r0, r3
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr

08001216 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001216:	b480      	push	{r7}
 8001218:	b083      	sub	sp, #12
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
 800121e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001226:	605a      	str	r2, [r3, #4]
  return 0;
 8001228:	2300      	movs	r3, #0
}
 800122a:	4618      	mov	r0, r3
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr

08001236 <_isatty>:

int _isatty(int file)
{
 8001236:	b480      	push	{r7}
 8001238:	b083      	sub	sp, #12
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800123e:	2301      	movs	r3, #1
}
 8001240:	4618      	mov	r0, r3
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800124c:	b480      	push	{r7}
 800124e:	b085      	sub	sp, #20
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	3714      	adds	r7, #20
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
	...

08001268 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001270:	4a14      	ldr	r2, [pc, #80]	; (80012c4 <_sbrk+0x5c>)
 8001272:	4b15      	ldr	r3, [pc, #84]	; (80012c8 <_sbrk+0x60>)
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800127c:	4b13      	ldr	r3, [pc, #76]	; (80012cc <_sbrk+0x64>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d102      	bne.n	800128a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001284:	4b11      	ldr	r3, [pc, #68]	; (80012cc <_sbrk+0x64>)
 8001286:	4a12      	ldr	r2, [pc, #72]	; (80012d0 <_sbrk+0x68>)
 8001288:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800128a:	4b10      	ldr	r3, [pc, #64]	; (80012cc <_sbrk+0x64>)
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4413      	add	r3, r2
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	429a      	cmp	r2, r3
 8001296:	d207      	bcs.n	80012a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001298:	f00b fec0 	bl	800d01c <__errno>
 800129c:	4603      	mov	r3, r0
 800129e:	220c      	movs	r2, #12
 80012a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012a6:	e009      	b.n	80012bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012a8:	4b08      	ldr	r3, [pc, #32]	; (80012cc <_sbrk+0x64>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012ae:	4b07      	ldr	r3, [pc, #28]	; (80012cc <_sbrk+0x64>)
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4413      	add	r3, r2
 80012b6:	4a05      	ldr	r2, [pc, #20]	; (80012cc <_sbrk+0x64>)
 80012b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012ba:	68fb      	ldr	r3, [r7, #12]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3718      	adds	r7, #24
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20018000 	.word	0x20018000
 80012c8:	00000400 	.word	0x00000400
 80012cc:	200002f0 	.word	0x200002f0
 80012d0:	20000500 	.word	0x20000500

080012d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80012d8:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <SystemInit+0x20>)
 80012da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012de:	4a05      	ldr	r2, [pc, #20]	; (80012f4 <SystemInit+0x20>)
 80012e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	e000ed00 	.word	0xe000ed00

080012f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80012f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001330 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012fc:	f7ff ffea 	bl	80012d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001300:	480c      	ldr	r0, [pc, #48]	; (8001334 <LoopForever+0x6>)
  ldr r1, =_edata
 8001302:	490d      	ldr	r1, [pc, #52]	; (8001338 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001304:	4a0d      	ldr	r2, [pc, #52]	; (800133c <LoopForever+0xe>)
  movs r3, #0
 8001306:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001308:	e002      	b.n	8001310 <LoopCopyDataInit>

0800130a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800130a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800130c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800130e:	3304      	adds	r3, #4

08001310 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001310:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001312:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001314:	d3f9      	bcc.n	800130a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001316:	4a0a      	ldr	r2, [pc, #40]	; (8001340 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001318:	4c0a      	ldr	r4, [pc, #40]	; (8001344 <LoopForever+0x16>)
  movs r3, #0
 800131a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800131c:	e001      	b.n	8001322 <LoopFillZerobss>

0800131e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800131e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001320:	3204      	adds	r2, #4

08001322 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001322:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001324:	d3fb      	bcc.n	800131e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001326:	f00b fe7f 	bl	800d028 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800132a:	f7ff fb2d 	bl	8000988 <main>

0800132e <LoopForever>:

LoopForever:
    b LoopForever
 800132e:	e7fe      	b.n	800132e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001330:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001334:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001338:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 800133c:	080138e4 	.word	0x080138e4
  ldr r2, =_sbss
 8001340:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001344:	200004fc 	.word	0x200004fc

08001348 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001348:	e7fe      	b.n	8001348 <ADC1_2_IRQHandler>
	...

0800134c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001352:	2300      	movs	r3, #0
 8001354:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001356:	4b0c      	ldr	r3, [pc, #48]	; (8001388 <HAL_Init+0x3c>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a0b      	ldr	r2, [pc, #44]	; (8001388 <HAL_Init+0x3c>)
 800135c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001360:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001362:	2003      	movs	r0, #3
 8001364:	f000 f962 	bl	800162c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001368:	2000      	movs	r0, #0
 800136a:	f000 f80f 	bl	800138c <HAL_InitTick>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d002      	beq.n	800137a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	71fb      	strb	r3, [r7, #7]
 8001378:	e001      	b.n	800137e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800137a:	f7ff fe2d 	bl	8000fd8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800137e:	79fb      	ldrb	r3, [r7, #7]
}
 8001380:	4618      	mov	r0, r3
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	40022000 	.word	0x40022000

0800138c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001394:	2300      	movs	r3, #0
 8001396:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001398:	4b17      	ldr	r3, [pc, #92]	; (80013f8 <HAL_InitTick+0x6c>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d023      	beq.n	80013e8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80013a0:	4b16      	ldr	r3, [pc, #88]	; (80013fc <HAL_InitTick+0x70>)
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	4b14      	ldr	r3, [pc, #80]	; (80013f8 <HAL_InitTick+0x6c>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	4619      	mov	r1, r3
 80013aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80013b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013b6:	4618      	mov	r0, r3
 80013b8:	f000 f96d 	bl	8001696 <HAL_SYSTICK_Config>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d10f      	bne.n	80013e2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2b0f      	cmp	r3, #15
 80013c6:	d809      	bhi.n	80013dc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013c8:	2200      	movs	r2, #0
 80013ca:	6879      	ldr	r1, [r7, #4]
 80013cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013d0:	f000 f937 	bl	8001642 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013d4:	4a0a      	ldr	r2, [pc, #40]	; (8001400 <HAL_InitTick+0x74>)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6013      	str	r3, [r2, #0]
 80013da:	e007      	b.n	80013ec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	73fb      	strb	r3, [r7, #15]
 80013e0:	e004      	b.n	80013ec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	73fb      	strb	r3, [r7, #15]
 80013e6:	e001      	b.n	80013ec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80013ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000008 	.word	0x20000008
 80013fc:	20000000 	.word	0x20000000
 8001400:	20000004 	.word	0x20000004

08001404 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001408:	4b06      	ldr	r3, [pc, #24]	; (8001424 <HAL_IncTick+0x20>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	461a      	mov	r2, r3
 800140e:	4b06      	ldr	r3, [pc, #24]	; (8001428 <HAL_IncTick+0x24>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4413      	add	r3, r2
 8001414:	4a04      	ldr	r2, [pc, #16]	; (8001428 <HAL_IncTick+0x24>)
 8001416:	6013      	str	r3, [r2, #0]
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	20000008 	.word	0x20000008
 8001428:	200002f4 	.word	0x200002f4

0800142c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  return uwTick;
 8001430:	4b03      	ldr	r3, [pc, #12]	; (8001440 <HAL_GetTick+0x14>)
 8001432:	681b      	ldr	r3, [r3, #0]
}
 8001434:	4618      	mov	r0, r3
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	200002f4 	.word	0x200002f4

08001444 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800144c:	f7ff ffee 	bl	800142c <HAL_GetTick>
 8001450:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800145c:	d005      	beq.n	800146a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800145e:	4b0a      	ldr	r3, [pc, #40]	; (8001488 <HAL_Delay+0x44>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	461a      	mov	r2, r3
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	4413      	add	r3, r2
 8001468:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800146a:	bf00      	nop
 800146c:	f7ff ffde 	bl	800142c <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	68fa      	ldr	r2, [r7, #12]
 8001478:	429a      	cmp	r2, r3
 800147a:	d8f7      	bhi.n	800146c <HAL_Delay+0x28>
  {
  }
}
 800147c:	bf00      	nop
 800147e:	bf00      	nop
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20000008 	.word	0x20000008

0800148c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800148c:	b480      	push	{r7}
 800148e:	b085      	sub	sp, #20
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f003 0307 	and.w	r3, r3, #7
 800149a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800149c:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <__NVIC_SetPriorityGrouping+0x44>)
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014a2:	68ba      	ldr	r2, [r7, #8]
 80014a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014a8:	4013      	ands	r3, r2
 80014aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014be:	4a04      	ldr	r2, [pc, #16]	; (80014d0 <__NVIC_SetPriorityGrouping+0x44>)
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	60d3      	str	r3, [r2, #12]
}
 80014c4:	bf00      	nop
 80014c6:	3714      	adds	r7, #20
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	e000ed00 	.word	0xe000ed00

080014d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014d8:	4b04      	ldr	r3, [pc, #16]	; (80014ec <__NVIC_GetPriorityGrouping+0x18>)
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	0a1b      	lsrs	r3, r3, #8
 80014de:	f003 0307 	and.w	r3, r3, #7
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	e000ed00 	.word	0xe000ed00

080014f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	db0b      	blt.n	800151a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001502:	79fb      	ldrb	r3, [r7, #7]
 8001504:	f003 021f 	and.w	r2, r3, #31
 8001508:	4907      	ldr	r1, [pc, #28]	; (8001528 <__NVIC_EnableIRQ+0x38>)
 800150a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150e:	095b      	lsrs	r3, r3, #5
 8001510:	2001      	movs	r0, #1
 8001512:	fa00 f202 	lsl.w	r2, r0, r2
 8001516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800151a:	bf00      	nop
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	e000e100 	.word	0xe000e100

0800152c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	4603      	mov	r3, r0
 8001534:	6039      	str	r1, [r7, #0]
 8001536:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153c:	2b00      	cmp	r3, #0
 800153e:	db0a      	blt.n	8001556 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	b2da      	uxtb	r2, r3
 8001544:	490c      	ldr	r1, [pc, #48]	; (8001578 <__NVIC_SetPriority+0x4c>)
 8001546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154a:	0112      	lsls	r2, r2, #4
 800154c:	b2d2      	uxtb	r2, r2
 800154e:	440b      	add	r3, r1
 8001550:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001554:	e00a      	b.n	800156c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	b2da      	uxtb	r2, r3
 800155a:	4908      	ldr	r1, [pc, #32]	; (800157c <__NVIC_SetPriority+0x50>)
 800155c:	79fb      	ldrb	r3, [r7, #7]
 800155e:	f003 030f 	and.w	r3, r3, #15
 8001562:	3b04      	subs	r3, #4
 8001564:	0112      	lsls	r2, r2, #4
 8001566:	b2d2      	uxtb	r2, r2
 8001568:	440b      	add	r3, r1
 800156a:	761a      	strb	r2, [r3, #24]
}
 800156c:	bf00      	nop
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	e000e100 	.word	0xe000e100
 800157c:	e000ed00 	.word	0xe000ed00

08001580 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001580:	b480      	push	{r7}
 8001582:	b089      	sub	sp, #36	; 0x24
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f003 0307 	and.w	r3, r3, #7
 8001592:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	f1c3 0307 	rsb	r3, r3, #7
 800159a:	2b04      	cmp	r3, #4
 800159c:	bf28      	it	cs
 800159e:	2304      	movcs	r3, #4
 80015a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	3304      	adds	r3, #4
 80015a6:	2b06      	cmp	r3, #6
 80015a8:	d902      	bls.n	80015b0 <NVIC_EncodePriority+0x30>
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	3b03      	subs	r3, #3
 80015ae:	e000      	b.n	80015b2 <NVIC_EncodePriority+0x32>
 80015b0:	2300      	movs	r3, #0
 80015b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	fa02 f303 	lsl.w	r3, r2, r3
 80015be:	43da      	mvns	r2, r3
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	401a      	ands	r2, r3
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	fa01 f303 	lsl.w	r3, r1, r3
 80015d2:	43d9      	mvns	r1, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d8:	4313      	orrs	r3, r2
         );
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3724      	adds	r7, #36	; 0x24
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
	...

080015e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	3b01      	subs	r3, #1
 80015f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015f8:	d301      	bcc.n	80015fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015fa:	2301      	movs	r3, #1
 80015fc:	e00f      	b.n	800161e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015fe:	4a0a      	ldr	r2, [pc, #40]	; (8001628 <SysTick_Config+0x40>)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	3b01      	subs	r3, #1
 8001604:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001606:	210f      	movs	r1, #15
 8001608:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800160c:	f7ff ff8e 	bl	800152c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001610:	4b05      	ldr	r3, [pc, #20]	; (8001628 <SysTick_Config+0x40>)
 8001612:	2200      	movs	r2, #0
 8001614:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001616:	4b04      	ldr	r3, [pc, #16]	; (8001628 <SysTick_Config+0x40>)
 8001618:	2207      	movs	r2, #7
 800161a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	e000e010 	.word	0xe000e010

0800162c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f7ff ff29 	bl	800148c <__NVIC_SetPriorityGrouping>
}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001642:	b580      	push	{r7, lr}
 8001644:	b086      	sub	sp, #24
 8001646:	af00      	add	r7, sp, #0
 8001648:	4603      	mov	r3, r0
 800164a:	60b9      	str	r1, [r7, #8]
 800164c:	607a      	str	r2, [r7, #4]
 800164e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001650:	2300      	movs	r3, #0
 8001652:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001654:	f7ff ff3e 	bl	80014d4 <__NVIC_GetPriorityGrouping>
 8001658:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	68b9      	ldr	r1, [r7, #8]
 800165e:	6978      	ldr	r0, [r7, #20]
 8001660:	f7ff ff8e 	bl	8001580 <NVIC_EncodePriority>
 8001664:	4602      	mov	r2, r0
 8001666:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800166a:	4611      	mov	r1, r2
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff ff5d 	bl	800152c <__NVIC_SetPriority>
}
 8001672:	bf00      	nop
 8001674:	3718      	adds	r7, #24
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800167a:	b580      	push	{r7, lr}
 800167c:	b082      	sub	sp, #8
 800167e:	af00      	add	r7, sp, #0
 8001680:	4603      	mov	r3, r0
 8001682:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff ff31 	bl	80014f0 <__NVIC_EnableIRQ>
}
 800168e:	bf00      	nop
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	b082      	sub	sp, #8
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f7ff ffa2 	bl	80015e8 <SysTick_Config>
 80016a4:	4603      	mov	r3, r0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
	...

080016b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b087      	sub	sp, #28
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016ba:	2300      	movs	r3, #0
 80016bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016be:	e17f      	b.n	80019c0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	2101      	movs	r1, #1
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	fa01 f303 	lsl.w	r3, r1, r3
 80016cc:	4013      	ands	r3, r2
 80016ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	f000 8171 	beq.w	80019ba <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f003 0303 	and.w	r3, r3, #3
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d005      	beq.n	80016f0 <HAL_GPIO_Init+0x40>
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f003 0303 	and.w	r3, r3, #3
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d130      	bne.n	8001752 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	2203      	movs	r2, #3
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	43db      	mvns	r3, r3
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	4013      	ands	r3, r2
 8001706:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	68da      	ldr	r2, [r3, #12]
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	4313      	orrs	r3, r2
 8001718:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	693a      	ldr	r2, [r7, #16]
 800171e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001726:	2201      	movs	r2, #1
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	43db      	mvns	r3, r3
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	4013      	ands	r3, r2
 8001734:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	091b      	lsrs	r3, r3, #4
 800173c:	f003 0201 	and.w	r2, r3, #1
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	4313      	orrs	r3, r2
 800174a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f003 0303 	and.w	r3, r3, #3
 800175a:	2b03      	cmp	r3, #3
 800175c:	d118      	bne.n	8001790 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001762:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001764:	2201      	movs	r2, #1
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	43db      	mvns	r3, r3
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	4013      	ands	r3, r2
 8001772:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	08db      	lsrs	r3, r3, #3
 800177a:	f003 0201 	and.w	r2, r3, #1
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	4313      	orrs	r3, r2
 8001788:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	693a      	ldr	r2, [r7, #16]
 800178e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f003 0303 	and.w	r3, r3, #3
 8001798:	2b03      	cmp	r3, #3
 800179a:	d017      	beq.n	80017cc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	2203      	movs	r2, #3
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	43db      	mvns	r3, r3
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	4013      	ands	r3, r2
 80017b2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	689a      	ldr	r2, [r3, #8]
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	693a      	ldr	r2, [r7, #16]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f003 0303 	and.w	r3, r3, #3
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d123      	bne.n	8001820 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	08da      	lsrs	r2, r3, #3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	3208      	adds	r2, #8
 80017e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	f003 0307 	and.w	r3, r3, #7
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	220f      	movs	r2, #15
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	43db      	mvns	r3, r3
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	4013      	ands	r3, r2
 80017fa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	691a      	ldr	r2, [r3, #16]
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	f003 0307 	and.w	r3, r3, #7
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	4313      	orrs	r3, r2
 8001810:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	08da      	lsrs	r2, r3, #3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	3208      	adds	r2, #8
 800181a:	6939      	ldr	r1, [r7, #16]
 800181c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	2203      	movs	r2, #3
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	43db      	mvns	r3, r3
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	4013      	ands	r3, r2
 8001836:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f003 0203 	and.w	r2, r3, #3
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	4313      	orrs	r3, r2
 800184c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	693a      	ldr	r2, [r7, #16]
 8001852:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800185c:	2b00      	cmp	r3, #0
 800185e:	f000 80ac 	beq.w	80019ba <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001862:	4b5f      	ldr	r3, [pc, #380]	; (80019e0 <HAL_GPIO_Init+0x330>)
 8001864:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001866:	4a5e      	ldr	r2, [pc, #376]	; (80019e0 <HAL_GPIO_Init+0x330>)
 8001868:	f043 0301 	orr.w	r3, r3, #1
 800186c:	6613      	str	r3, [r2, #96]	; 0x60
 800186e:	4b5c      	ldr	r3, [pc, #368]	; (80019e0 <HAL_GPIO_Init+0x330>)
 8001870:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	60bb      	str	r3, [r7, #8]
 8001878:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800187a:	4a5a      	ldr	r2, [pc, #360]	; (80019e4 <HAL_GPIO_Init+0x334>)
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	089b      	lsrs	r3, r3, #2
 8001880:	3302      	adds	r3, #2
 8001882:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001886:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	f003 0303 	and.w	r3, r3, #3
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	220f      	movs	r2, #15
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	43db      	mvns	r3, r3
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	4013      	ands	r3, r2
 800189c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80018a4:	d025      	beq.n	80018f2 <HAL_GPIO_Init+0x242>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a4f      	ldr	r2, [pc, #316]	; (80019e8 <HAL_GPIO_Init+0x338>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d01f      	beq.n	80018ee <HAL_GPIO_Init+0x23e>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a4e      	ldr	r2, [pc, #312]	; (80019ec <HAL_GPIO_Init+0x33c>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d019      	beq.n	80018ea <HAL_GPIO_Init+0x23a>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a4d      	ldr	r2, [pc, #308]	; (80019f0 <HAL_GPIO_Init+0x340>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d013      	beq.n	80018e6 <HAL_GPIO_Init+0x236>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a4c      	ldr	r2, [pc, #304]	; (80019f4 <HAL_GPIO_Init+0x344>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d00d      	beq.n	80018e2 <HAL_GPIO_Init+0x232>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4a4b      	ldr	r2, [pc, #300]	; (80019f8 <HAL_GPIO_Init+0x348>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d007      	beq.n	80018de <HAL_GPIO_Init+0x22e>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4a4a      	ldr	r2, [pc, #296]	; (80019fc <HAL_GPIO_Init+0x34c>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d101      	bne.n	80018da <HAL_GPIO_Init+0x22a>
 80018d6:	2306      	movs	r3, #6
 80018d8:	e00c      	b.n	80018f4 <HAL_GPIO_Init+0x244>
 80018da:	2307      	movs	r3, #7
 80018dc:	e00a      	b.n	80018f4 <HAL_GPIO_Init+0x244>
 80018de:	2305      	movs	r3, #5
 80018e0:	e008      	b.n	80018f4 <HAL_GPIO_Init+0x244>
 80018e2:	2304      	movs	r3, #4
 80018e4:	e006      	b.n	80018f4 <HAL_GPIO_Init+0x244>
 80018e6:	2303      	movs	r3, #3
 80018e8:	e004      	b.n	80018f4 <HAL_GPIO_Init+0x244>
 80018ea:	2302      	movs	r3, #2
 80018ec:	e002      	b.n	80018f4 <HAL_GPIO_Init+0x244>
 80018ee:	2301      	movs	r3, #1
 80018f0:	e000      	b.n	80018f4 <HAL_GPIO_Init+0x244>
 80018f2:	2300      	movs	r3, #0
 80018f4:	697a      	ldr	r2, [r7, #20]
 80018f6:	f002 0203 	and.w	r2, r2, #3
 80018fa:	0092      	lsls	r2, r2, #2
 80018fc:	4093      	lsls	r3, r2
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	4313      	orrs	r3, r2
 8001902:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001904:	4937      	ldr	r1, [pc, #220]	; (80019e4 <HAL_GPIO_Init+0x334>)
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	089b      	lsrs	r3, r3, #2
 800190a:	3302      	adds	r3, #2
 800190c:	693a      	ldr	r2, [r7, #16]
 800190e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001912:	4b3b      	ldr	r3, [pc, #236]	; (8001a00 <HAL_GPIO_Init+0x350>)
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	43db      	mvns	r3, r3
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	4013      	ands	r3, r2
 8001920:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d003      	beq.n	8001936 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	4313      	orrs	r3, r2
 8001934:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001936:	4a32      	ldr	r2, [pc, #200]	; (8001a00 <HAL_GPIO_Init+0x350>)
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800193c:	4b30      	ldr	r3, [pc, #192]	; (8001a00 <HAL_GPIO_Init+0x350>)
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	43db      	mvns	r3, r3
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	4013      	ands	r3, r2
 800194a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d003      	beq.n	8001960 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001958:	693a      	ldr	r2, [r7, #16]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	4313      	orrs	r3, r2
 800195e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001960:	4a27      	ldr	r2, [pc, #156]	; (8001a00 <HAL_GPIO_Init+0x350>)
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001966:	4b26      	ldr	r3, [pc, #152]	; (8001a00 <HAL_GPIO_Init+0x350>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	43db      	mvns	r3, r3
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	4013      	ands	r3, r2
 8001974:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d003      	beq.n	800198a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	4313      	orrs	r3, r2
 8001988:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800198a:	4a1d      	ldr	r2, [pc, #116]	; (8001a00 <HAL_GPIO_Init+0x350>)
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001990:	4b1b      	ldr	r3, [pc, #108]	; (8001a00 <HAL_GPIO_Init+0x350>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	43db      	mvns	r3, r3
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	4013      	ands	r3, r2
 800199e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d003      	beq.n	80019b4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80019b4:	4a12      	ldr	r2, [pc, #72]	; (8001a00 <HAL_GPIO_Init+0x350>)
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	3301      	adds	r3, #1
 80019be:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	fa22 f303 	lsr.w	r3, r2, r3
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	f47f ae78 	bne.w	80016c0 <HAL_GPIO_Init+0x10>
  }
}
 80019d0:	bf00      	nop
 80019d2:	bf00      	nop
 80019d4:	371c      	adds	r7, #28
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	40021000 	.word	0x40021000
 80019e4:	40010000 	.word	0x40010000
 80019e8:	48000400 	.word	0x48000400
 80019ec:	48000800 	.word	0x48000800
 80019f0:	48000c00 	.word	0x48000c00
 80019f4:	48001000 	.word	0x48001000
 80019f8:	48001400 	.word	0x48001400
 80019fc:	48001800 	.word	0x48001800
 8001a00:	40010400 	.word	0x40010400

08001a04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	691a      	ldr	r2, [r3, #16]
 8001a14:	887b      	ldrh	r3, [r7, #2]
 8001a16:	4013      	ands	r3, r2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d002      	beq.n	8001a22 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	73fb      	strb	r3, [r7, #15]
 8001a20:	e001      	b.n	8001a26 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a22:	2300      	movs	r3, #0
 8001a24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3714      	adds	r7, #20
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	807b      	strh	r3, [r7, #2]
 8001a40:	4613      	mov	r3, r2
 8001a42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a44:	787b      	ldrb	r3, [r7, #1]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d003      	beq.n	8001a52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a4a:	887a      	ldrh	r2, [r7, #2]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a50:	e002      	b.n	8001a58 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a52:	887a      	ldrh	r2, [r7, #2]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a58:	bf00      	nop
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a6e:	4b08      	ldr	r3, [pc, #32]	; (8001a90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a70:	695a      	ldr	r2, [r3, #20]
 8001a72:	88fb      	ldrh	r3, [r7, #6]
 8001a74:	4013      	ands	r3, r2
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d006      	beq.n	8001a88 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a7a:	4a05      	ldr	r2, [pc, #20]	; (8001a90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a7c:	88fb      	ldrh	r3, [r7, #6]
 8001a7e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a80:	88fb      	ldrh	r3, [r7, #6]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f000 f806 	bl	8001a94 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a88:	bf00      	nop
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	40010400 	.word	0x40010400

08001a94 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001a9e:	bf00      	nop
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
	...

08001aac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001ab0:	4b04      	ldr	r3, [pc, #16]	; (8001ac4 <HAL_PWREx_GetVoltageRange+0x18>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	40007000 	.word	0x40007000

08001ac8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ad6:	d130      	bne.n	8001b3a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ad8:	4b23      	ldr	r3, [pc, #140]	; (8001b68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ae0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ae4:	d038      	beq.n	8001b58 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ae6:	4b20      	ldr	r3, [pc, #128]	; (8001b68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001aee:	4a1e      	ldr	r2, [pc, #120]	; (8001b68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001af0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001af4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001af6:	4b1d      	ldr	r3, [pc, #116]	; (8001b6c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2232      	movs	r2, #50	; 0x32
 8001afc:	fb02 f303 	mul.w	r3, r2, r3
 8001b00:	4a1b      	ldr	r2, [pc, #108]	; (8001b70 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001b02:	fba2 2303 	umull	r2, r3, r2, r3
 8001b06:	0c9b      	lsrs	r3, r3, #18
 8001b08:	3301      	adds	r3, #1
 8001b0a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b0c:	e002      	b.n	8001b14 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	3b01      	subs	r3, #1
 8001b12:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b14:	4b14      	ldr	r3, [pc, #80]	; (8001b68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b16:	695b      	ldr	r3, [r3, #20]
 8001b18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b20:	d102      	bne.n	8001b28 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d1f2      	bne.n	8001b0e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b28:	4b0f      	ldr	r3, [pc, #60]	; (8001b68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b2a:	695b      	ldr	r3, [r3, #20]
 8001b2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b34:	d110      	bne.n	8001b58 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e00f      	b.n	8001b5a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b3a:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b46:	d007      	beq.n	8001b58 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b48:	4b07      	ldr	r3, [pc, #28]	; (8001b68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b50:	4a05      	ldr	r2, [pc, #20]	; (8001b68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b56:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3714      	adds	r7, #20
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	40007000 	.word	0x40007000
 8001b6c:	20000000 	.word	0x20000000
 8001b70:	431bde83 	.word	0x431bde83

08001b74 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b088      	sub	sp, #32
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d101      	bne.n	8001b86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e3ca      	b.n	800231c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b86:	4b97      	ldr	r3, [pc, #604]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	f003 030c 	and.w	r3, r3, #12
 8001b8e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b90:	4b94      	ldr	r3, [pc, #592]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	f003 0303 	and.w	r3, r3, #3
 8001b98:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0310 	and.w	r3, r3, #16
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f000 80e4 	beq.w	8001d70 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d007      	beq.n	8001bbe <HAL_RCC_OscConfig+0x4a>
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	2b0c      	cmp	r3, #12
 8001bb2:	f040 808b 	bne.w	8001ccc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	f040 8087 	bne.w	8001ccc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001bbe:	4b89      	ldr	r3, [pc, #548]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d005      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x62>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	699b      	ldr	r3, [r3, #24]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d101      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e3a2      	b.n	800231c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6a1a      	ldr	r2, [r3, #32]
 8001bda:	4b82      	ldr	r3, [pc, #520]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0308 	and.w	r3, r3, #8
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d004      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x7c>
 8001be6:	4b7f      	ldr	r3, [pc, #508]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bee:	e005      	b.n	8001bfc <HAL_RCC_OscConfig+0x88>
 8001bf0:	4b7c      	ldr	r3, [pc, #496]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001bf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bf6:	091b      	lsrs	r3, r3, #4
 8001bf8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d223      	bcs.n	8001c48 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a1b      	ldr	r3, [r3, #32]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f000 fd55 	bl	80026b4 <RCC_SetFlashLatencyFromMSIRange>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e383      	b.n	800231c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c14:	4b73      	ldr	r3, [pc, #460]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a72      	ldr	r2, [pc, #456]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001c1a:	f043 0308 	orr.w	r3, r3, #8
 8001c1e:	6013      	str	r3, [r2, #0]
 8001c20:	4b70      	ldr	r3, [pc, #448]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a1b      	ldr	r3, [r3, #32]
 8001c2c:	496d      	ldr	r1, [pc, #436]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c32:	4b6c      	ldr	r3, [pc, #432]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	69db      	ldr	r3, [r3, #28]
 8001c3e:	021b      	lsls	r3, r3, #8
 8001c40:	4968      	ldr	r1, [pc, #416]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	604b      	str	r3, [r1, #4]
 8001c46:	e025      	b.n	8001c94 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c48:	4b66      	ldr	r3, [pc, #408]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a65      	ldr	r2, [pc, #404]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001c4e:	f043 0308 	orr.w	r3, r3, #8
 8001c52:	6013      	str	r3, [r2, #0]
 8001c54:	4b63      	ldr	r3, [pc, #396]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6a1b      	ldr	r3, [r3, #32]
 8001c60:	4960      	ldr	r1, [pc, #384]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c66:	4b5f      	ldr	r3, [pc, #380]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	69db      	ldr	r3, [r3, #28]
 8001c72:	021b      	lsls	r3, r3, #8
 8001c74:	495b      	ldr	r1, [pc, #364]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001c76:	4313      	orrs	r3, r2
 8001c78:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d109      	bne.n	8001c94 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a1b      	ldr	r3, [r3, #32]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f000 fd15 	bl	80026b4 <RCC_SetFlashLatencyFromMSIRange>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e343      	b.n	800231c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c94:	f000 fc4a 	bl	800252c <HAL_RCC_GetSysClockFreq>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	4b52      	ldr	r3, [pc, #328]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	091b      	lsrs	r3, r3, #4
 8001ca0:	f003 030f 	and.w	r3, r3, #15
 8001ca4:	4950      	ldr	r1, [pc, #320]	; (8001de8 <HAL_RCC_OscConfig+0x274>)
 8001ca6:	5ccb      	ldrb	r3, [r1, r3]
 8001ca8:	f003 031f 	and.w	r3, r3, #31
 8001cac:	fa22 f303 	lsr.w	r3, r2, r3
 8001cb0:	4a4e      	ldr	r2, [pc, #312]	; (8001dec <HAL_RCC_OscConfig+0x278>)
 8001cb2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001cb4:	4b4e      	ldr	r3, [pc, #312]	; (8001df0 <HAL_RCC_OscConfig+0x27c>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff fb67 	bl	800138c <HAL_InitTick>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001cc2:	7bfb      	ldrb	r3, [r7, #15]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d052      	beq.n	8001d6e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001cc8:	7bfb      	ldrb	r3, [r7, #15]
 8001cca:	e327      	b.n	800231c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d032      	beq.n	8001d3a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001cd4:	4b43      	ldr	r3, [pc, #268]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a42      	ldr	r2, [pc, #264]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001cda:	f043 0301 	orr.w	r3, r3, #1
 8001cde:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ce0:	f7ff fba4 	bl	800142c <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ce6:	e008      	b.n	8001cfa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ce8:	f7ff fba0 	bl	800142c <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e310      	b.n	800231c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cfa:	4b3a      	ldr	r3, [pc, #232]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d0f0      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d06:	4b37      	ldr	r3, [pc, #220]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a36      	ldr	r2, [pc, #216]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001d0c:	f043 0308 	orr.w	r3, r3, #8
 8001d10:	6013      	str	r3, [r2, #0]
 8001d12:	4b34      	ldr	r3, [pc, #208]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a1b      	ldr	r3, [r3, #32]
 8001d1e:	4931      	ldr	r1, [pc, #196]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001d20:	4313      	orrs	r3, r2
 8001d22:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d24:	4b2f      	ldr	r3, [pc, #188]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	69db      	ldr	r3, [r3, #28]
 8001d30:	021b      	lsls	r3, r3, #8
 8001d32:	492c      	ldr	r1, [pc, #176]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001d34:	4313      	orrs	r3, r2
 8001d36:	604b      	str	r3, [r1, #4]
 8001d38:	e01a      	b.n	8001d70 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d3a:	4b2a      	ldr	r3, [pc, #168]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a29      	ldr	r2, [pc, #164]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001d40:	f023 0301 	bic.w	r3, r3, #1
 8001d44:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d46:	f7ff fb71 	bl	800142c <HAL_GetTick>
 8001d4a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d4c:	e008      	b.n	8001d60 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d4e:	f7ff fb6d 	bl	800142c <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d901      	bls.n	8001d60 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e2dd      	b.n	800231c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d60:	4b20      	ldr	r3, [pc, #128]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0302 	and.w	r3, r3, #2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d1f0      	bne.n	8001d4e <HAL_RCC_OscConfig+0x1da>
 8001d6c:	e000      	b.n	8001d70 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d6e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0301 	and.w	r3, r3, #1
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d074      	beq.n	8001e66 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	2b08      	cmp	r3, #8
 8001d80:	d005      	beq.n	8001d8e <HAL_RCC_OscConfig+0x21a>
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	2b0c      	cmp	r3, #12
 8001d86:	d10e      	bne.n	8001da6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	2b03      	cmp	r3, #3
 8001d8c:	d10b      	bne.n	8001da6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d8e:	4b15      	ldr	r3, [pc, #84]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d064      	beq.n	8001e64 <HAL_RCC_OscConfig+0x2f0>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d160      	bne.n	8001e64 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e2ba      	b.n	800231c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dae:	d106      	bne.n	8001dbe <HAL_RCC_OscConfig+0x24a>
 8001db0:	4b0c      	ldr	r3, [pc, #48]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a0b      	ldr	r2, [pc, #44]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001db6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dba:	6013      	str	r3, [r2, #0]
 8001dbc:	e026      	b.n	8001e0c <HAL_RCC_OscConfig+0x298>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dc6:	d115      	bne.n	8001df4 <HAL_RCC_OscConfig+0x280>
 8001dc8:	4b06      	ldr	r3, [pc, #24]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a05      	ldr	r2, [pc, #20]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001dce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dd2:	6013      	str	r3, [r2, #0]
 8001dd4:	4b03      	ldr	r3, [pc, #12]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a02      	ldr	r2, [pc, #8]	; (8001de4 <HAL_RCC_OscConfig+0x270>)
 8001dda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dde:	6013      	str	r3, [r2, #0]
 8001de0:	e014      	b.n	8001e0c <HAL_RCC_OscConfig+0x298>
 8001de2:	bf00      	nop
 8001de4:	40021000 	.word	0x40021000
 8001de8:	0800e270 	.word	0x0800e270
 8001dec:	20000000 	.word	0x20000000
 8001df0:	20000004 	.word	0x20000004
 8001df4:	4ba0      	ldr	r3, [pc, #640]	; (8002078 <HAL_RCC_OscConfig+0x504>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a9f      	ldr	r2, [pc, #636]	; (8002078 <HAL_RCC_OscConfig+0x504>)
 8001dfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dfe:	6013      	str	r3, [r2, #0]
 8001e00:	4b9d      	ldr	r3, [pc, #628]	; (8002078 <HAL_RCC_OscConfig+0x504>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a9c      	ldr	r2, [pc, #624]	; (8002078 <HAL_RCC_OscConfig+0x504>)
 8001e06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d013      	beq.n	8001e3c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e14:	f7ff fb0a 	bl	800142c <HAL_GetTick>
 8001e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e1a:	e008      	b.n	8001e2e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e1c:	f7ff fb06 	bl	800142c <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b64      	cmp	r3, #100	; 0x64
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e276      	b.n	800231c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e2e:	4b92      	ldr	r3, [pc, #584]	; (8002078 <HAL_RCC_OscConfig+0x504>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d0f0      	beq.n	8001e1c <HAL_RCC_OscConfig+0x2a8>
 8001e3a:	e014      	b.n	8001e66 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e3c:	f7ff faf6 	bl	800142c <HAL_GetTick>
 8001e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e44:	f7ff faf2 	bl	800142c <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b64      	cmp	r3, #100	; 0x64
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e262      	b.n	800231c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e56:	4b88      	ldr	r3, [pc, #544]	; (8002078 <HAL_RCC_OscConfig+0x504>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d1f0      	bne.n	8001e44 <HAL_RCC_OscConfig+0x2d0>
 8001e62:	e000      	b.n	8001e66 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d060      	beq.n	8001f34 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	2b04      	cmp	r3, #4
 8001e76:	d005      	beq.n	8001e84 <HAL_RCC_OscConfig+0x310>
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	2b0c      	cmp	r3, #12
 8001e7c:	d119      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d116      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e84:	4b7c      	ldr	r3, [pc, #496]	; (8002078 <HAL_RCC_OscConfig+0x504>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d005      	beq.n	8001e9c <HAL_RCC_OscConfig+0x328>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d101      	bne.n	8001e9c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e23f      	b.n	800231c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e9c:	4b76      	ldr	r3, [pc, #472]	; (8002078 <HAL_RCC_OscConfig+0x504>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	691b      	ldr	r3, [r3, #16]
 8001ea8:	061b      	lsls	r3, r3, #24
 8001eaa:	4973      	ldr	r1, [pc, #460]	; (8002078 <HAL_RCC_OscConfig+0x504>)
 8001eac:	4313      	orrs	r3, r2
 8001eae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001eb0:	e040      	b.n	8001f34 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d023      	beq.n	8001f02 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001eba:	4b6f      	ldr	r3, [pc, #444]	; (8002078 <HAL_RCC_OscConfig+0x504>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a6e      	ldr	r2, [pc, #440]	; (8002078 <HAL_RCC_OscConfig+0x504>)
 8001ec0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ec4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec6:	f7ff fab1 	bl	800142c <HAL_GetTick>
 8001eca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ecc:	e008      	b.n	8001ee0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ece:	f7ff faad 	bl	800142c <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d901      	bls.n	8001ee0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e21d      	b.n	800231c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ee0:	4b65      	ldr	r3, [pc, #404]	; (8002078 <HAL_RCC_OscConfig+0x504>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d0f0      	beq.n	8001ece <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eec:	4b62      	ldr	r3, [pc, #392]	; (8002078 <HAL_RCC_OscConfig+0x504>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	691b      	ldr	r3, [r3, #16]
 8001ef8:	061b      	lsls	r3, r3, #24
 8001efa:	495f      	ldr	r1, [pc, #380]	; (8002078 <HAL_RCC_OscConfig+0x504>)
 8001efc:	4313      	orrs	r3, r2
 8001efe:	604b      	str	r3, [r1, #4]
 8001f00:	e018      	b.n	8001f34 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f02:	4b5d      	ldr	r3, [pc, #372]	; (8002078 <HAL_RCC_OscConfig+0x504>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a5c      	ldr	r2, [pc, #368]	; (8002078 <HAL_RCC_OscConfig+0x504>)
 8001f08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f0e:	f7ff fa8d 	bl	800142c <HAL_GetTick>
 8001f12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f14:	e008      	b.n	8001f28 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f16:	f7ff fa89 	bl	800142c <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d901      	bls.n	8001f28 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e1f9      	b.n	800231c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f28:	4b53      	ldr	r3, [pc, #332]	; (8002078 <HAL_RCC_OscConfig+0x504>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d1f0      	bne.n	8001f16 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0308 	and.w	r3, r3, #8
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d03c      	beq.n	8001fba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	695b      	ldr	r3, [r3, #20]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d01c      	beq.n	8001f82 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f48:	4b4b      	ldr	r3, [pc, #300]	; (8002078 <HAL_RCC_OscConfig+0x504>)
 8001f4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f4e:	4a4a      	ldr	r2, [pc, #296]	; (8002078 <HAL_RCC_OscConfig+0x504>)
 8001f50:	f043 0301 	orr.w	r3, r3, #1
 8001f54:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f58:	f7ff fa68 	bl	800142c <HAL_GetTick>
 8001f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f5e:	e008      	b.n	8001f72 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f60:	f7ff fa64 	bl	800142c <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e1d4      	b.n	800231c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f72:	4b41      	ldr	r3, [pc, #260]	; (8002078 <HAL_RCC_OscConfig+0x504>)
 8001f74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d0ef      	beq.n	8001f60 <HAL_RCC_OscConfig+0x3ec>
 8001f80:	e01b      	b.n	8001fba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f82:	4b3d      	ldr	r3, [pc, #244]	; (8002078 <HAL_RCC_OscConfig+0x504>)
 8001f84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f88:	4a3b      	ldr	r2, [pc, #236]	; (8002078 <HAL_RCC_OscConfig+0x504>)
 8001f8a:	f023 0301 	bic.w	r3, r3, #1
 8001f8e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f92:	f7ff fa4b 	bl	800142c <HAL_GetTick>
 8001f96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f98:	e008      	b.n	8001fac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f9a:	f7ff fa47 	bl	800142c <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d901      	bls.n	8001fac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e1b7      	b.n	800231c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fac:	4b32      	ldr	r3, [pc, #200]	; (8002078 <HAL_RCC_OscConfig+0x504>)
 8001fae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1ef      	bne.n	8001f9a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0304 	and.w	r3, r3, #4
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	f000 80a6 	beq.w	8002114 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001fcc:	4b2a      	ldr	r3, [pc, #168]	; (8002078 <HAL_RCC_OscConfig+0x504>)
 8001fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d10d      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fd8:	4b27      	ldr	r3, [pc, #156]	; (8002078 <HAL_RCC_OscConfig+0x504>)
 8001fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fdc:	4a26      	ldr	r2, [pc, #152]	; (8002078 <HAL_RCC_OscConfig+0x504>)
 8001fde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fe2:	6593      	str	r3, [r2, #88]	; 0x58
 8001fe4:	4b24      	ldr	r3, [pc, #144]	; (8002078 <HAL_RCC_OscConfig+0x504>)
 8001fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fec:	60bb      	str	r3, [r7, #8]
 8001fee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ff4:	4b21      	ldr	r3, [pc, #132]	; (800207c <HAL_RCC_OscConfig+0x508>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d118      	bne.n	8002032 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002000:	4b1e      	ldr	r3, [pc, #120]	; (800207c <HAL_RCC_OscConfig+0x508>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a1d      	ldr	r2, [pc, #116]	; (800207c <HAL_RCC_OscConfig+0x508>)
 8002006:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800200a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800200c:	f7ff fa0e 	bl	800142c <HAL_GetTick>
 8002010:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002012:	e008      	b.n	8002026 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002014:	f7ff fa0a 	bl	800142c <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b02      	cmp	r3, #2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e17a      	b.n	800231c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002026:	4b15      	ldr	r3, [pc, #84]	; (800207c <HAL_RCC_OscConfig+0x508>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800202e:	2b00      	cmp	r3, #0
 8002030:	d0f0      	beq.n	8002014 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d108      	bne.n	800204c <HAL_RCC_OscConfig+0x4d8>
 800203a:	4b0f      	ldr	r3, [pc, #60]	; (8002078 <HAL_RCC_OscConfig+0x504>)
 800203c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002040:	4a0d      	ldr	r2, [pc, #52]	; (8002078 <HAL_RCC_OscConfig+0x504>)
 8002042:	f043 0301 	orr.w	r3, r3, #1
 8002046:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800204a:	e029      	b.n	80020a0 <HAL_RCC_OscConfig+0x52c>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	2b05      	cmp	r3, #5
 8002052:	d115      	bne.n	8002080 <HAL_RCC_OscConfig+0x50c>
 8002054:	4b08      	ldr	r3, [pc, #32]	; (8002078 <HAL_RCC_OscConfig+0x504>)
 8002056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800205a:	4a07      	ldr	r2, [pc, #28]	; (8002078 <HAL_RCC_OscConfig+0x504>)
 800205c:	f043 0304 	orr.w	r3, r3, #4
 8002060:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002064:	4b04      	ldr	r3, [pc, #16]	; (8002078 <HAL_RCC_OscConfig+0x504>)
 8002066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800206a:	4a03      	ldr	r2, [pc, #12]	; (8002078 <HAL_RCC_OscConfig+0x504>)
 800206c:	f043 0301 	orr.w	r3, r3, #1
 8002070:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002074:	e014      	b.n	80020a0 <HAL_RCC_OscConfig+0x52c>
 8002076:	bf00      	nop
 8002078:	40021000 	.word	0x40021000
 800207c:	40007000 	.word	0x40007000
 8002080:	4b9c      	ldr	r3, [pc, #624]	; (80022f4 <HAL_RCC_OscConfig+0x780>)
 8002082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002086:	4a9b      	ldr	r2, [pc, #620]	; (80022f4 <HAL_RCC_OscConfig+0x780>)
 8002088:	f023 0301 	bic.w	r3, r3, #1
 800208c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002090:	4b98      	ldr	r3, [pc, #608]	; (80022f4 <HAL_RCC_OscConfig+0x780>)
 8002092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002096:	4a97      	ldr	r2, [pc, #604]	; (80022f4 <HAL_RCC_OscConfig+0x780>)
 8002098:	f023 0304 	bic.w	r3, r3, #4
 800209c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d016      	beq.n	80020d6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020a8:	f7ff f9c0 	bl	800142c <HAL_GetTick>
 80020ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020ae:	e00a      	b.n	80020c6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020b0:	f7ff f9bc 	bl	800142c <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80020be:	4293      	cmp	r3, r2
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e12a      	b.n	800231c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020c6:	4b8b      	ldr	r3, [pc, #556]	; (80022f4 <HAL_RCC_OscConfig+0x780>)
 80020c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020cc:	f003 0302 	and.w	r3, r3, #2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d0ed      	beq.n	80020b0 <HAL_RCC_OscConfig+0x53c>
 80020d4:	e015      	b.n	8002102 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020d6:	f7ff f9a9 	bl	800142c <HAL_GetTick>
 80020da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020dc:	e00a      	b.n	80020f4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020de:	f7ff f9a5 	bl	800142c <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d901      	bls.n	80020f4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e113      	b.n	800231c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020f4:	4b7f      	ldr	r3, [pc, #508]	; (80022f4 <HAL_RCC_OscConfig+0x780>)
 80020f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d1ed      	bne.n	80020de <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002102:	7ffb      	ldrb	r3, [r7, #31]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d105      	bne.n	8002114 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002108:	4b7a      	ldr	r3, [pc, #488]	; (80022f4 <HAL_RCC_OscConfig+0x780>)
 800210a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800210c:	4a79      	ldr	r2, [pc, #484]	; (80022f4 <HAL_RCC_OscConfig+0x780>)
 800210e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002112:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002118:	2b00      	cmp	r3, #0
 800211a:	f000 80fe 	beq.w	800231a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002122:	2b02      	cmp	r3, #2
 8002124:	f040 80d0 	bne.w	80022c8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002128:	4b72      	ldr	r3, [pc, #456]	; (80022f4 <HAL_RCC_OscConfig+0x780>)
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	f003 0203 	and.w	r2, r3, #3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002138:	429a      	cmp	r2, r3
 800213a:	d130      	bne.n	800219e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002146:	3b01      	subs	r3, #1
 8002148:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800214a:	429a      	cmp	r2, r3
 800214c:	d127      	bne.n	800219e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002158:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800215a:	429a      	cmp	r2, r3
 800215c:	d11f      	bne.n	800219e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002168:	2a07      	cmp	r2, #7
 800216a:	bf14      	ite	ne
 800216c:	2201      	movne	r2, #1
 800216e:	2200      	moveq	r2, #0
 8002170:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002172:	4293      	cmp	r3, r2
 8002174:	d113      	bne.n	800219e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002180:	085b      	lsrs	r3, r3, #1
 8002182:	3b01      	subs	r3, #1
 8002184:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002186:	429a      	cmp	r2, r3
 8002188:	d109      	bne.n	800219e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002194:	085b      	lsrs	r3, r3, #1
 8002196:	3b01      	subs	r3, #1
 8002198:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800219a:	429a      	cmp	r2, r3
 800219c:	d06e      	beq.n	800227c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	2b0c      	cmp	r3, #12
 80021a2:	d069      	beq.n	8002278 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80021a4:	4b53      	ldr	r3, [pc, #332]	; (80022f4 <HAL_RCC_OscConfig+0x780>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d105      	bne.n	80021bc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80021b0:	4b50      	ldr	r3, [pc, #320]	; (80022f4 <HAL_RCC_OscConfig+0x780>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e0ad      	b.n	800231c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80021c0:	4b4c      	ldr	r3, [pc, #304]	; (80022f4 <HAL_RCC_OscConfig+0x780>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a4b      	ldr	r2, [pc, #300]	; (80022f4 <HAL_RCC_OscConfig+0x780>)
 80021c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021ca:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021cc:	f7ff f92e 	bl	800142c <HAL_GetTick>
 80021d0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021d2:	e008      	b.n	80021e6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021d4:	f7ff f92a 	bl	800142c <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e09a      	b.n	800231c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021e6:	4b43      	ldr	r3, [pc, #268]	; (80022f4 <HAL_RCC_OscConfig+0x780>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d1f0      	bne.n	80021d4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021f2:	4b40      	ldr	r3, [pc, #256]	; (80022f4 <HAL_RCC_OscConfig+0x780>)
 80021f4:	68da      	ldr	r2, [r3, #12]
 80021f6:	4b40      	ldr	r3, [pc, #256]	; (80022f8 <HAL_RCC_OscConfig+0x784>)
 80021f8:	4013      	ands	r3, r2
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002202:	3a01      	subs	r2, #1
 8002204:	0112      	lsls	r2, r2, #4
 8002206:	4311      	orrs	r1, r2
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800220c:	0212      	lsls	r2, r2, #8
 800220e:	4311      	orrs	r1, r2
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002214:	0852      	lsrs	r2, r2, #1
 8002216:	3a01      	subs	r2, #1
 8002218:	0552      	lsls	r2, r2, #21
 800221a:	4311      	orrs	r1, r2
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002220:	0852      	lsrs	r2, r2, #1
 8002222:	3a01      	subs	r2, #1
 8002224:	0652      	lsls	r2, r2, #25
 8002226:	4311      	orrs	r1, r2
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800222c:	0912      	lsrs	r2, r2, #4
 800222e:	0452      	lsls	r2, r2, #17
 8002230:	430a      	orrs	r2, r1
 8002232:	4930      	ldr	r1, [pc, #192]	; (80022f4 <HAL_RCC_OscConfig+0x780>)
 8002234:	4313      	orrs	r3, r2
 8002236:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002238:	4b2e      	ldr	r3, [pc, #184]	; (80022f4 <HAL_RCC_OscConfig+0x780>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a2d      	ldr	r2, [pc, #180]	; (80022f4 <HAL_RCC_OscConfig+0x780>)
 800223e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002242:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002244:	4b2b      	ldr	r3, [pc, #172]	; (80022f4 <HAL_RCC_OscConfig+0x780>)
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	4a2a      	ldr	r2, [pc, #168]	; (80022f4 <HAL_RCC_OscConfig+0x780>)
 800224a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800224e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002250:	f7ff f8ec 	bl	800142c <HAL_GetTick>
 8002254:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002256:	e008      	b.n	800226a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002258:	f7ff f8e8 	bl	800142c <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	2b02      	cmp	r3, #2
 8002264:	d901      	bls.n	800226a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e058      	b.n	800231c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800226a:	4b22      	ldr	r3, [pc, #136]	; (80022f4 <HAL_RCC_OscConfig+0x780>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d0f0      	beq.n	8002258 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002276:	e050      	b.n	800231a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e04f      	b.n	800231c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800227c:	4b1d      	ldr	r3, [pc, #116]	; (80022f4 <HAL_RCC_OscConfig+0x780>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d148      	bne.n	800231a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002288:	4b1a      	ldr	r3, [pc, #104]	; (80022f4 <HAL_RCC_OscConfig+0x780>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a19      	ldr	r2, [pc, #100]	; (80022f4 <HAL_RCC_OscConfig+0x780>)
 800228e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002292:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002294:	4b17      	ldr	r3, [pc, #92]	; (80022f4 <HAL_RCC_OscConfig+0x780>)
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	4a16      	ldr	r2, [pc, #88]	; (80022f4 <HAL_RCC_OscConfig+0x780>)
 800229a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800229e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80022a0:	f7ff f8c4 	bl	800142c <HAL_GetTick>
 80022a4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022a6:	e008      	b.n	80022ba <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022a8:	f7ff f8c0 	bl	800142c <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e030      	b.n	800231c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022ba:	4b0e      	ldr	r3, [pc, #56]	; (80022f4 <HAL_RCC_OscConfig+0x780>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d0f0      	beq.n	80022a8 <HAL_RCC_OscConfig+0x734>
 80022c6:	e028      	b.n	800231a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	2b0c      	cmp	r3, #12
 80022cc:	d023      	beq.n	8002316 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ce:	4b09      	ldr	r3, [pc, #36]	; (80022f4 <HAL_RCC_OscConfig+0x780>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a08      	ldr	r2, [pc, #32]	; (80022f4 <HAL_RCC_OscConfig+0x780>)
 80022d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022da:	f7ff f8a7 	bl	800142c <HAL_GetTick>
 80022de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022e0:	e00c      	b.n	80022fc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022e2:	f7ff f8a3 	bl	800142c <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d905      	bls.n	80022fc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e013      	b.n	800231c <HAL_RCC_OscConfig+0x7a8>
 80022f4:	40021000 	.word	0x40021000
 80022f8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022fc:	4b09      	ldr	r3, [pc, #36]	; (8002324 <HAL_RCC_OscConfig+0x7b0>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d1ec      	bne.n	80022e2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002308:	4b06      	ldr	r3, [pc, #24]	; (8002324 <HAL_RCC_OscConfig+0x7b0>)
 800230a:	68da      	ldr	r2, [r3, #12]
 800230c:	4905      	ldr	r1, [pc, #20]	; (8002324 <HAL_RCC_OscConfig+0x7b0>)
 800230e:	4b06      	ldr	r3, [pc, #24]	; (8002328 <HAL_RCC_OscConfig+0x7b4>)
 8002310:	4013      	ands	r3, r2
 8002312:	60cb      	str	r3, [r1, #12]
 8002314:	e001      	b.n	800231a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e000      	b.n	800231c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800231a:	2300      	movs	r3, #0
}
 800231c:	4618      	mov	r0, r3
 800231e:	3720      	adds	r7, #32
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	40021000 	.word	0x40021000
 8002328:	feeefffc 	.word	0xfeeefffc

0800232c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d101      	bne.n	8002340 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e0e7      	b.n	8002510 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002340:	4b75      	ldr	r3, [pc, #468]	; (8002518 <HAL_RCC_ClockConfig+0x1ec>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0307 	and.w	r3, r3, #7
 8002348:	683a      	ldr	r2, [r7, #0]
 800234a:	429a      	cmp	r2, r3
 800234c:	d910      	bls.n	8002370 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800234e:	4b72      	ldr	r3, [pc, #456]	; (8002518 <HAL_RCC_ClockConfig+0x1ec>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f023 0207 	bic.w	r2, r3, #7
 8002356:	4970      	ldr	r1, [pc, #448]	; (8002518 <HAL_RCC_ClockConfig+0x1ec>)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	4313      	orrs	r3, r2
 800235c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800235e:	4b6e      	ldr	r3, [pc, #440]	; (8002518 <HAL_RCC_ClockConfig+0x1ec>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	683a      	ldr	r2, [r7, #0]
 8002368:	429a      	cmp	r2, r3
 800236a:	d001      	beq.n	8002370 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e0cf      	b.n	8002510 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d010      	beq.n	800239e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689a      	ldr	r2, [r3, #8]
 8002380:	4b66      	ldr	r3, [pc, #408]	; (800251c <HAL_RCC_ClockConfig+0x1f0>)
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002388:	429a      	cmp	r2, r3
 800238a:	d908      	bls.n	800239e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800238c:	4b63      	ldr	r3, [pc, #396]	; (800251c <HAL_RCC_ClockConfig+0x1f0>)
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	4960      	ldr	r1, [pc, #384]	; (800251c <HAL_RCC_ClockConfig+0x1f0>)
 800239a:	4313      	orrs	r3, r2
 800239c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d04c      	beq.n	8002444 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	2b03      	cmp	r3, #3
 80023b0:	d107      	bne.n	80023c2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023b2:	4b5a      	ldr	r3, [pc, #360]	; (800251c <HAL_RCC_ClockConfig+0x1f0>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d121      	bne.n	8002402 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e0a6      	b.n	8002510 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d107      	bne.n	80023da <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023ca:	4b54      	ldr	r3, [pc, #336]	; (800251c <HAL_RCC_ClockConfig+0x1f0>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d115      	bne.n	8002402 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e09a      	b.n	8002510 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d107      	bne.n	80023f2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023e2:	4b4e      	ldr	r3, [pc, #312]	; (800251c <HAL_RCC_ClockConfig+0x1f0>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d109      	bne.n	8002402 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e08e      	b.n	8002510 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023f2:	4b4a      	ldr	r3, [pc, #296]	; (800251c <HAL_RCC_ClockConfig+0x1f0>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d101      	bne.n	8002402 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e086      	b.n	8002510 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002402:	4b46      	ldr	r3, [pc, #280]	; (800251c <HAL_RCC_ClockConfig+0x1f0>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f023 0203 	bic.w	r2, r3, #3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	4943      	ldr	r1, [pc, #268]	; (800251c <HAL_RCC_ClockConfig+0x1f0>)
 8002410:	4313      	orrs	r3, r2
 8002412:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002414:	f7ff f80a 	bl	800142c <HAL_GetTick>
 8002418:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800241a:	e00a      	b.n	8002432 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800241c:	f7ff f806 	bl	800142c <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	f241 3288 	movw	r2, #5000	; 0x1388
 800242a:	4293      	cmp	r3, r2
 800242c:	d901      	bls.n	8002432 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e06e      	b.n	8002510 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002432:	4b3a      	ldr	r3, [pc, #232]	; (800251c <HAL_RCC_ClockConfig+0x1f0>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f003 020c 	and.w	r2, r3, #12
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	429a      	cmp	r2, r3
 8002442:	d1eb      	bne.n	800241c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0302 	and.w	r3, r3, #2
 800244c:	2b00      	cmp	r3, #0
 800244e:	d010      	beq.n	8002472 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689a      	ldr	r2, [r3, #8]
 8002454:	4b31      	ldr	r3, [pc, #196]	; (800251c <HAL_RCC_ClockConfig+0x1f0>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800245c:	429a      	cmp	r2, r3
 800245e:	d208      	bcs.n	8002472 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002460:	4b2e      	ldr	r3, [pc, #184]	; (800251c <HAL_RCC_ClockConfig+0x1f0>)
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	492b      	ldr	r1, [pc, #172]	; (800251c <HAL_RCC_ClockConfig+0x1f0>)
 800246e:	4313      	orrs	r3, r2
 8002470:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002472:	4b29      	ldr	r3, [pc, #164]	; (8002518 <HAL_RCC_ClockConfig+0x1ec>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0307 	and.w	r3, r3, #7
 800247a:	683a      	ldr	r2, [r7, #0]
 800247c:	429a      	cmp	r2, r3
 800247e:	d210      	bcs.n	80024a2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002480:	4b25      	ldr	r3, [pc, #148]	; (8002518 <HAL_RCC_ClockConfig+0x1ec>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f023 0207 	bic.w	r2, r3, #7
 8002488:	4923      	ldr	r1, [pc, #140]	; (8002518 <HAL_RCC_ClockConfig+0x1ec>)
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	4313      	orrs	r3, r2
 800248e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002490:	4b21      	ldr	r3, [pc, #132]	; (8002518 <HAL_RCC_ClockConfig+0x1ec>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0307 	and.w	r3, r3, #7
 8002498:	683a      	ldr	r2, [r7, #0]
 800249a:	429a      	cmp	r2, r3
 800249c:	d001      	beq.n	80024a2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e036      	b.n	8002510 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0304 	and.w	r3, r3, #4
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d008      	beq.n	80024c0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024ae:	4b1b      	ldr	r3, [pc, #108]	; (800251c <HAL_RCC_ClockConfig+0x1f0>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	4918      	ldr	r1, [pc, #96]	; (800251c <HAL_RCC_ClockConfig+0x1f0>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0308 	and.w	r3, r3, #8
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d009      	beq.n	80024e0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024cc:	4b13      	ldr	r3, [pc, #76]	; (800251c <HAL_RCC_ClockConfig+0x1f0>)
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	691b      	ldr	r3, [r3, #16]
 80024d8:	00db      	lsls	r3, r3, #3
 80024da:	4910      	ldr	r1, [pc, #64]	; (800251c <HAL_RCC_ClockConfig+0x1f0>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024e0:	f000 f824 	bl	800252c <HAL_RCC_GetSysClockFreq>
 80024e4:	4602      	mov	r2, r0
 80024e6:	4b0d      	ldr	r3, [pc, #52]	; (800251c <HAL_RCC_ClockConfig+0x1f0>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	091b      	lsrs	r3, r3, #4
 80024ec:	f003 030f 	and.w	r3, r3, #15
 80024f0:	490b      	ldr	r1, [pc, #44]	; (8002520 <HAL_RCC_ClockConfig+0x1f4>)
 80024f2:	5ccb      	ldrb	r3, [r1, r3]
 80024f4:	f003 031f 	and.w	r3, r3, #31
 80024f8:	fa22 f303 	lsr.w	r3, r2, r3
 80024fc:	4a09      	ldr	r2, [pc, #36]	; (8002524 <HAL_RCC_ClockConfig+0x1f8>)
 80024fe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002500:	4b09      	ldr	r3, [pc, #36]	; (8002528 <HAL_RCC_ClockConfig+0x1fc>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4618      	mov	r0, r3
 8002506:	f7fe ff41 	bl	800138c <HAL_InitTick>
 800250a:	4603      	mov	r3, r0
 800250c:	72fb      	strb	r3, [r7, #11]

  return status;
 800250e:	7afb      	ldrb	r3, [r7, #11]
}
 8002510:	4618      	mov	r0, r3
 8002512:	3710      	adds	r7, #16
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	40022000 	.word	0x40022000
 800251c:	40021000 	.word	0x40021000
 8002520:	0800e270 	.word	0x0800e270
 8002524:	20000000 	.word	0x20000000
 8002528:	20000004 	.word	0x20000004

0800252c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800252c:	b480      	push	{r7}
 800252e:	b089      	sub	sp, #36	; 0x24
 8002530:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002532:	2300      	movs	r3, #0
 8002534:	61fb      	str	r3, [r7, #28]
 8002536:	2300      	movs	r3, #0
 8002538:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800253a:	4b3e      	ldr	r3, [pc, #248]	; (8002634 <HAL_RCC_GetSysClockFreq+0x108>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f003 030c 	and.w	r3, r3, #12
 8002542:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002544:	4b3b      	ldr	r3, [pc, #236]	; (8002634 <HAL_RCC_GetSysClockFreq+0x108>)
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	f003 0303 	and.w	r3, r3, #3
 800254c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d005      	beq.n	8002560 <HAL_RCC_GetSysClockFreq+0x34>
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	2b0c      	cmp	r3, #12
 8002558:	d121      	bne.n	800259e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2b01      	cmp	r3, #1
 800255e:	d11e      	bne.n	800259e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002560:	4b34      	ldr	r3, [pc, #208]	; (8002634 <HAL_RCC_GetSysClockFreq+0x108>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0308 	and.w	r3, r3, #8
 8002568:	2b00      	cmp	r3, #0
 800256a:	d107      	bne.n	800257c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800256c:	4b31      	ldr	r3, [pc, #196]	; (8002634 <HAL_RCC_GetSysClockFreq+0x108>)
 800256e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002572:	0a1b      	lsrs	r3, r3, #8
 8002574:	f003 030f 	and.w	r3, r3, #15
 8002578:	61fb      	str	r3, [r7, #28]
 800257a:	e005      	b.n	8002588 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800257c:	4b2d      	ldr	r3, [pc, #180]	; (8002634 <HAL_RCC_GetSysClockFreq+0x108>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	091b      	lsrs	r3, r3, #4
 8002582:	f003 030f 	and.w	r3, r3, #15
 8002586:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002588:	4a2b      	ldr	r2, [pc, #172]	; (8002638 <HAL_RCC_GetSysClockFreq+0x10c>)
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002590:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d10d      	bne.n	80025b4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800259c:	e00a      	b.n	80025b4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	2b04      	cmp	r3, #4
 80025a2:	d102      	bne.n	80025aa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80025a4:	4b25      	ldr	r3, [pc, #148]	; (800263c <HAL_RCC_GetSysClockFreq+0x110>)
 80025a6:	61bb      	str	r3, [r7, #24]
 80025a8:	e004      	b.n	80025b4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	2b08      	cmp	r3, #8
 80025ae:	d101      	bne.n	80025b4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80025b0:	4b23      	ldr	r3, [pc, #140]	; (8002640 <HAL_RCC_GetSysClockFreq+0x114>)
 80025b2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	2b0c      	cmp	r3, #12
 80025b8:	d134      	bne.n	8002624 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025ba:	4b1e      	ldr	r3, [pc, #120]	; (8002634 <HAL_RCC_GetSysClockFreq+0x108>)
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	f003 0303 	and.w	r3, r3, #3
 80025c2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d003      	beq.n	80025d2 <HAL_RCC_GetSysClockFreq+0xa6>
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	2b03      	cmp	r3, #3
 80025ce:	d003      	beq.n	80025d8 <HAL_RCC_GetSysClockFreq+0xac>
 80025d0:	e005      	b.n	80025de <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80025d2:	4b1a      	ldr	r3, [pc, #104]	; (800263c <HAL_RCC_GetSysClockFreq+0x110>)
 80025d4:	617b      	str	r3, [r7, #20]
      break;
 80025d6:	e005      	b.n	80025e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80025d8:	4b19      	ldr	r3, [pc, #100]	; (8002640 <HAL_RCC_GetSysClockFreq+0x114>)
 80025da:	617b      	str	r3, [r7, #20]
      break;
 80025dc:	e002      	b.n	80025e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	617b      	str	r3, [r7, #20]
      break;
 80025e2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025e4:	4b13      	ldr	r3, [pc, #76]	; (8002634 <HAL_RCC_GetSysClockFreq+0x108>)
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	091b      	lsrs	r3, r3, #4
 80025ea:	f003 0307 	and.w	r3, r3, #7
 80025ee:	3301      	adds	r3, #1
 80025f0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80025f2:	4b10      	ldr	r3, [pc, #64]	; (8002634 <HAL_RCC_GetSysClockFreq+0x108>)
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	0a1b      	lsrs	r3, r3, #8
 80025f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025fc:	697a      	ldr	r2, [r7, #20]
 80025fe:	fb03 f202 	mul.w	r2, r3, r2
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	fbb2 f3f3 	udiv	r3, r2, r3
 8002608:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800260a:	4b0a      	ldr	r3, [pc, #40]	; (8002634 <HAL_RCC_GetSysClockFreq+0x108>)
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	0e5b      	lsrs	r3, r3, #25
 8002610:	f003 0303 	and.w	r3, r3, #3
 8002614:	3301      	adds	r3, #1
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800261a:	697a      	ldr	r2, [r7, #20]
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002622:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002624:	69bb      	ldr	r3, [r7, #24]
}
 8002626:	4618      	mov	r0, r3
 8002628:	3724      	adds	r7, #36	; 0x24
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	40021000 	.word	0x40021000
 8002638:	0800e288 	.word	0x0800e288
 800263c:	00f42400 	.word	0x00f42400
 8002640:	007a1200 	.word	0x007a1200

08002644 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002648:	4b03      	ldr	r3, [pc, #12]	; (8002658 <HAL_RCC_GetHCLKFreq+0x14>)
 800264a:	681b      	ldr	r3, [r3, #0]
}
 800264c:	4618      	mov	r0, r3
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	20000000 	.word	0x20000000

0800265c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002660:	f7ff fff0 	bl	8002644 <HAL_RCC_GetHCLKFreq>
 8002664:	4602      	mov	r2, r0
 8002666:	4b06      	ldr	r3, [pc, #24]	; (8002680 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	0a1b      	lsrs	r3, r3, #8
 800266c:	f003 0307 	and.w	r3, r3, #7
 8002670:	4904      	ldr	r1, [pc, #16]	; (8002684 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002672:	5ccb      	ldrb	r3, [r1, r3]
 8002674:	f003 031f 	and.w	r3, r3, #31
 8002678:	fa22 f303 	lsr.w	r3, r2, r3
}
 800267c:	4618      	mov	r0, r3
 800267e:	bd80      	pop	{r7, pc}
 8002680:	40021000 	.word	0x40021000
 8002684:	0800e280 	.word	0x0800e280

08002688 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800268c:	f7ff ffda 	bl	8002644 <HAL_RCC_GetHCLKFreq>
 8002690:	4602      	mov	r2, r0
 8002692:	4b06      	ldr	r3, [pc, #24]	; (80026ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	0adb      	lsrs	r3, r3, #11
 8002698:	f003 0307 	and.w	r3, r3, #7
 800269c:	4904      	ldr	r1, [pc, #16]	; (80026b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800269e:	5ccb      	ldrb	r3, [r1, r3]
 80026a0:	f003 031f 	and.w	r3, r3, #31
 80026a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	40021000 	.word	0x40021000
 80026b0:	0800e280 	.word	0x0800e280

080026b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b086      	sub	sp, #24
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80026bc:	2300      	movs	r3, #0
 80026be:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80026c0:	4b2a      	ldr	r3, [pc, #168]	; (800276c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d003      	beq.n	80026d4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80026cc:	f7ff f9ee 	bl	8001aac <HAL_PWREx_GetVoltageRange>
 80026d0:	6178      	str	r0, [r7, #20]
 80026d2:	e014      	b.n	80026fe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80026d4:	4b25      	ldr	r3, [pc, #148]	; (800276c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d8:	4a24      	ldr	r2, [pc, #144]	; (800276c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026de:	6593      	str	r3, [r2, #88]	; 0x58
 80026e0:	4b22      	ldr	r3, [pc, #136]	; (800276c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e8:	60fb      	str	r3, [r7, #12]
 80026ea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80026ec:	f7ff f9de 	bl	8001aac <HAL_PWREx_GetVoltageRange>
 80026f0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80026f2:	4b1e      	ldr	r3, [pc, #120]	; (800276c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f6:	4a1d      	ldr	r2, [pc, #116]	; (800276c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026fc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002704:	d10b      	bne.n	800271e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2b80      	cmp	r3, #128	; 0x80
 800270a:	d919      	bls.n	8002740 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2ba0      	cmp	r3, #160	; 0xa0
 8002710:	d902      	bls.n	8002718 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002712:	2302      	movs	r3, #2
 8002714:	613b      	str	r3, [r7, #16]
 8002716:	e013      	b.n	8002740 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002718:	2301      	movs	r3, #1
 800271a:	613b      	str	r3, [r7, #16]
 800271c:	e010      	b.n	8002740 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2b80      	cmp	r3, #128	; 0x80
 8002722:	d902      	bls.n	800272a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002724:	2303      	movs	r3, #3
 8002726:	613b      	str	r3, [r7, #16]
 8002728:	e00a      	b.n	8002740 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2b80      	cmp	r3, #128	; 0x80
 800272e:	d102      	bne.n	8002736 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002730:	2302      	movs	r3, #2
 8002732:	613b      	str	r3, [r7, #16]
 8002734:	e004      	b.n	8002740 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2b70      	cmp	r3, #112	; 0x70
 800273a:	d101      	bne.n	8002740 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800273c:	2301      	movs	r3, #1
 800273e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002740:	4b0b      	ldr	r3, [pc, #44]	; (8002770 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f023 0207 	bic.w	r2, r3, #7
 8002748:	4909      	ldr	r1, [pc, #36]	; (8002770 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	4313      	orrs	r3, r2
 800274e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002750:	4b07      	ldr	r3, [pc, #28]	; (8002770 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0307 	and.w	r3, r3, #7
 8002758:	693a      	ldr	r2, [r7, #16]
 800275a:	429a      	cmp	r2, r3
 800275c:	d001      	beq.n	8002762 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e000      	b.n	8002764 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002762:	2300      	movs	r3, #0
}
 8002764:	4618      	mov	r0, r3
 8002766:	3718      	adds	r7, #24
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	40021000 	.word	0x40021000
 8002770:	40022000 	.word	0x40022000

08002774 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b086      	sub	sp, #24
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800277c:	2300      	movs	r3, #0
 800277e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002780:	2300      	movs	r3, #0
 8002782:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800278c:	2b00      	cmp	r3, #0
 800278e:	d041      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002794:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002798:	d02a      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800279a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800279e:	d824      	bhi.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x76>
 80027a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80027a4:	d008      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80027a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80027aa:	d81e      	bhi.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x76>
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d00a      	beq.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80027b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027b4:	d010      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80027b6:	e018      	b.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80027b8:	4b86      	ldr	r3, [pc, #536]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	4a85      	ldr	r2, [pc, #532]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027c2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80027c4:	e015      	b.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	3304      	adds	r3, #4
 80027ca:	2100      	movs	r1, #0
 80027cc:	4618      	mov	r0, r3
 80027ce:	f000 fabb 	bl	8002d48 <RCCEx_PLLSAI1_Config>
 80027d2:	4603      	mov	r3, r0
 80027d4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80027d6:	e00c      	b.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	3320      	adds	r3, #32
 80027dc:	2100      	movs	r1, #0
 80027de:	4618      	mov	r0, r3
 80027e0:	f000 fba6 	bl	8002f30 <RCCEx_PLLSAI2_Config>
 80027e4:	4603      	mov	r3, r0
 80027e6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80027e8:	e003      	b.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	74fb      	strb	r3, [r7, #19]
      break;
 80027ee:	e000      	b.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80027f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027f2:	7cfb      	ldrb	r3, [r7, #19]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d10b      	bne.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027f8:	4b76      	ldr	r3, [pc, #472]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002806:	4973      	ldr	r1, [pc, #460]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002808:	4313      	orrs	r3, r2
 800280a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800280e:	e001      	b.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002810:	7cfb      	ldrb	r3, [r7, #19]
 8002812:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d041      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002824:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002828:	d02a      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800282a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800282e:	d824      	bhi.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002830:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002834:	d008      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002836:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800283a:	d81e      	bhi.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800283c:	2b00      	cmp	r3, #0
 800283e:	d00a      	beq.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002840:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002844:	d010      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002846:	e018      	b.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002848:	4b62      	ldr	r3, [pc, #392]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	4a61      	ldr	r2, [pc, #388]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800284e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002852:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002854:	e015      	b.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	3304      	adds	r3, #4
 800285a:	2100      	movs	r1, #0
 800285c:	4618      	mov	r0, r3
 800285e:	f000 fa73 	bl	8002d48 <RCCEx_PLLSAI1_Config>
 8002862:	4603      	mov	r3, r0
 8002864:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002866:	e00c      	b.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	3320      	adds	r3, #32
 800286c:	2100      	movs	r1, #0
 800286e:	4618      	mov	r0, r3
 8002870:	f000 fb5e 	bl	8002f30 <RCCEx_PLLSAI2_Config>
 8002874:	4603      	mov	r3, r0
 8002876:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002878:	e003      	b.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	74fb      	strb	r3, [r7, #19]
      break;
 800287e:	e000      	b.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002880:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002882:	7cfb      	ldrb	r3, [r7, #19]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d10b      	bne.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002888:	4b52      	ldr	r3, [pc, #328]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800288a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800288e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002896:	494f      	ldr	r1, [pc, #316]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002898:	4313      	orrs	r3, r2
 800289a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800289e:	e001      	b.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028a0:	7cfb      	ldrb	r3, [r7, #19]
 80028a2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	f000 80a0 	beq.w	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028b2:	2300      	movs	r3, #0
 80028b4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80028b6:	4b47      	ldr	r3, [pc, #284]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80028c2:	2301      	movs	r3, #1
 80028c4:	e000      	b.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80028c6:	2300      	movs	r3, #0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d00d      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028cc:	4b41      	ldr	r3, [pc, #260]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d0:	4a40      	ldr	r2, [pc, #256]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028d6:	6593      	str	r3, [r2, #88]	; 0x58
 80028d8:	4b3e      	ldr	r3, [pc, #248]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028e0:	60bb      	str	r3, [r7, #8]
 80028e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028e4:	2301      	movs	r3, #1
 80028e6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028e8:	4b3b      	ldr	r3, [pc, #236]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a3a      	ldr	r2, [pc, #232]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80028ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028f4:	f7fe fd9a 	bl	800142c <HAL_GetTick>
 80028f8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80028fa:	e009      	b.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028fc:	f7fe fd96 	bl	800142c <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b02      	cmp	r3, #2
 8002908:	d902      	bls.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	74fb      	strb	r3, [r7, #19]
        break;
 800290e:	e005      	b.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002910:	4b31      	ldr	r3, [pc, #196]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002918:	2b00      	cmp	r3, #0
 800291a:	d0ef      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800291c:	7cfb      	ldrb	r3, [r7, #19]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d15c      	bne.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002922:	4b2c      	ldr	r3, [pc, #176]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002928:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800292c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d01f      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800293a:	697a      	ldr	r2, [r7, #20]
 800293c:	429a      	cmp	r2, r3
 800293e:	d019      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002940:	4b24      	ldr	r3, [pc, #144]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002946:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800294a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800294c:	4b21      	ldr	r3, [pc, #132]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800294e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002952:	4a20      	ldr	r2, [pc, #128]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002954:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002958:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800295c:	4b1d      	ldr	r3, [pc, #116]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800295e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002962:	4a1c      	ldr	r2, [pc, #112]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002964:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002968:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800296c:	4a19      	ldr	r2, [pc, #100]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	2b00      	cmp	r3, #0
 800297c:	d016      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800297e:	f7fe fd55 	bl	800142c <HAL_GetTick>
 8002982:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002984:	e00b      	b.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002986:	f7fe fd51 	bl	800142c <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	f241 3288 	movw	r2, #5000	; 0x1388
 8002994:	4293      	cmp	r3, r2
 8002996:	d902      	bls.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	74fb      	strb	r3, [r7, #19]
            break;
 800299c:	e006      	b.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800299e:	4b0d      	ldr	r3, [pc, #52]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a4:	f003 0302 	and.w	r3, r3, #2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d0ec      	beq.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80029ac:	7cfb      	ldrb	r3, [r7, #19]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d10c      	bne.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029b2:	4b08      	ldr	r3, [pc, #32]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029c2:	4904      	ldr	r1, [pc, #16]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80029ca:	e009      	b.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80029cc:	7cfb      	ldrb	r3, [r7, #19]
 80029ce:	74bb      	strb	r3, [r7, #18]
 80029d0:	e006      	b.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80029d2:	bf00      	nop
 80029d4:	40021000 	.word	0x40021000
 80029d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029dc:	7cfb      	ldrb	r3, [r7, #19]
 80029de:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029e0:	7c7b      	ldrb	r3, [r7, #17]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d105      	bne.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029e6:	4b9e      	ldr	r3, [pc, #632]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ea:	4a9d      	ldr	r2, [pc, #628]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029f0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d00a      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029fe:	4b98      	ldr	r3, [pc, #608]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a04:	f023 0203 	bic.w	r2, r3, #3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a0c:	4994      	ldr	r1, [pc, #592]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0302 	and.w	r3, r3, #2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d00a      	beq.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a20:	4b8f      	ldr	r3, [pc, #572]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a26:	f023 020c 	bic.w	r2, r3, #12
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a2e:	498c      	ldr	r1, [pc, #560]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0304 	and.w	r3, r3, #4
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00a      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a42:	4b87      	ldr	r3, [pc, #540]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a48:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a50:	4983      	ldr	r1, [pc, #524]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0308 	and.w	r3, r3, #8
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d00a      	beq.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a64:	4b7e      	ldr	r3, [pc, #504]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a6a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a72:	497b      	ldr	r1, [pc, #492]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0310 	and.w	r3, r3, #16
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d00a      	beq.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a86:	4b76      	ldr	r3, [pc, #472]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a94:	4972      	ldr	r1, [pc, #456]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0320 	and.w	r3, r3, #32
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d00a      	beq.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002aa8:	4b6d      	ldr	r3, [pc, #436]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ab6:	496a      	ldr	r1, [pc, #424]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00a      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002aca:	4b65      	ldr	r3, [pc, #404]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ad0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad8:	4961      	ldr	r1, [pc, #388]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d00a      	beq.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002aec:	4b5c      	ldr	r3, [pc, #368]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002af2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002afa:	4959      	ldr	r1, [pc, #356]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00a      	beq.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b0e:	4b54      	ldr	r3, [pc, #336]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b14:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b1c:	4950      	ldr	r1, [pc, #320]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d00a      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b30:	4b4b      	ldr	r3, [pc, #300]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b36:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b3e:	4948      	ldr	r1, [pc, #288]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d00a      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b52:	4b43      	ldr	r3, [pc, #268]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b60:	493f      	ldr	r1, [pc, #252]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d028      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b74:	4b3a      	ldr	r3, [pc, #232]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b7a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b82:	4937      	ldr	r1, [pc, #220]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b84:	4313      	orrs	r3, r2
 8002b86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b92:	d106      	bne.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b94:	4b32      	ldr	r3, [pc, #200]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	4a31      	ldr	r2, [pc, #196]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b9e:	60d3      	str	r3, [r2, #12]
 8002ba0:	e011      	b.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ba6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002baa:	d10c      	bne.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	3304      	adds	r3, #4
 8002bb0:	2101      	movs	r1, #1
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f000 f8c8 	bl	8002d48 <RCCEx_PLLSAI1_Config>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002bbc:	7cfb      	ldrb	r3, [r7, #19]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002bc2:	7cfb      	ldrb	r3, [r7, #19]
 8002bc4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d028      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002bd2:	4b23      	ldr	r3, [pc, #140]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be0:	491f      	ldr	r1, [pc, #124]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bf0:	d106      	bne.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bf2:	4b1b      	ldr	r3, [pc, #108]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	4a1a      	ldr	r2, [pc, #104]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bf8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bfc:	60d3      	str	r3, [r2, #12]
 8002bfe:	e011      	b.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c04:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c08:	d10c      	bne.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	3304      	adds	r3, #4
 8002c0e:	2101      	movs	r1, #1
 8002c10:	4618      	mov	r0, r3
 8002c12:	f000 f899 	bl	8002d48 <RCCEx_PLLSAI1_Config>
 8002c16:	4603      	mov	r3, r0
 8002c18:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c1a:	7cfb      	ldrb	r3, [r7, #19]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d001      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002c20:	7cfb      	ldrb	r3, [r7, #19]
 8002c22:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d02b      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c30:	4b0b      	ldr	r3, [pc, #44]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c36:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c3e:	4908      	ldr	r1, [pc, #32]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c4e:	d109      	bne.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c50:	4b03      	ldr	r3, [pc, #12]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	4a02      	ldr	r2, [pc, #8]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c5a:	60d3      	str	r3, [r2, #12]
 8002c5c:	e014      	b.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002c5e:	bf00      	nop
 8002c60:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c68:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c6c:	d10c      	bne.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	3304      	adds	r3, #4
 8002c72:	2101      	movs	r1, #1
 8002c74:	4618      	mov	r0, r3
 8002c76:	f000 f867 	bl	8002d48 <RCCEx_PLLSAI1_Config>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c7e:	7cfb      	ldrb	r3, [r7, #19]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d001      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002c84:	7cfb      	ldrb	r3, [r7, #19]
 8002c86:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d02f      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c94:	4b2b      	ldr	r3, [pc, #172]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c9a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ca2:	4928      	ldr	r1, [pc, #160]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cb2:	d10d      	bne.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	3304      	adds	r3, #4
 8002cb8:	2102      	movs	r1, #2
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f000 f844 	bl	8002d48 <RCCEx_PLLSAI1_Config>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cc4:	7cfb      	ldrb	r3, [r7, #19]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d014      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002cca:	7cfb      	ldrb	r3, [r7, #19]
 8002ccc:	74bb      	strb	r3, [r7, #18]
 8002cce:	e011      	b.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cd8:	d10c      	bne.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	3320      	adds	r3, #32
 8002cde:	2102      	movs	r1, #2
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f000 f925 	bl	8002f30 <RCCEx_PLLSAI2_Config>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cea:	7cfb      	ldrb	r3, [r7, #19]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d001      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002cf0:	7cfb      	ldrb	r3, [r7, #19]
 8002cf2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d00a      	beq.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002d00:	4b10      	ldr	r3, [pc, #64]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d06:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d0e:	490d      	ldr	r1, [pc, #52]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00b      	beq.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002d22:	4b08      	ldr	r3, [pc, #32]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d28:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d32:	4904      	ldr	r1, [pc, #16]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002d3a:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3718      	adds	r7, #24
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	40021000 	.word	0x40021000

08002d48 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d52:	2300      	movs	r3, #0
 8002d54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d56:	4b75      	ldr	r3, [pc, #468]	; (8002f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	f003 0303 	and.w	r3, r3, #3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d018      	beq.n	8002d94 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002d62:	4b72      	ldr	r3, [pc, #456]	; (8002f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	f003 0203 	and.w	r2, r3, #3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d10d      	bne.n	8002d8e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
       ||
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d009      	beq.n	8002d8e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002d7a:	4b6c      	ldr	r3, [pc, #432]	; (8002f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	091b      	lsrs	r3, r3, #4
 8002d80:	f003 0307 	and.w	r3, r3, #7
 8002d84:	1c5a      	adds	r2, r3, #1
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
       ||
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d047      	beq.n	8002e1e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	73fb      	strb	r3, [r7, #15]
 8002d92:	e044      	b.n	8002e1e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2b03      	cmp	r3, #3
 8002d9a:	d018      	beq.n	8002dce <RCCEx_PLLSAI1_Config+0x86>
 8002d9c:	2b03      	cmp	r3, #3
 8002d9e:	d825      	bhi.n	8002dec <RCCEx_PLLSAI1_Config+0xa4>
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d002      	beq.n	8002daa <RCCEx_PLLSAI1_Config+0x62>
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d009      	beq.n	8002dbc <RCCEx_PLLSAI1_Config+0x74>
 8002da8:	e020      	b.n	8002dec <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002daa:	4b60      	ldr	r3, [pc, #384]	; (8002f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d11d      	bne.n	8002df2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dba:	e01a      	b.n	8002df2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002dbc:	4b5b      	ldr	r3, [pc, #364]	; (8002f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d116      	bne.n	8002df6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dcc:	e013      	b.n	8002df6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002dce:	4b57      	ldr	r3, [pc, #348]	; (8002f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d10f      	bne.n	8002dfa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002dda:	4b54      	ldr	r3, [pc, #336]	; (8002f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d109      	bne.n	8002dfa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002dea:	e006      	b.n	8002dfa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	73fb      	strb	r3, [r7, #15]
      break;
 8002df0:	e004      	b.n	8002dfc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002df2:	bf00      	nop
 8002df4:	e002      	b.n	8002dfc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002df6:	bf00      	nop
 8002df8:	e000      	b.n	8002dfc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002dfa:	bf00      	nop
    }

    if(status == HAL_OK)
 8002dfc:	7bfb      	ldrb	r3, [r7, #15]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d10d      	bne.n	8002e1e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e02:	4b4a      	ldr	r3, [pc, #296]	; (8002f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6819      	ldr	r1, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	3b01      	subs	r3, #1
 8002e14:	011b      	lsls	r3, r3, #4
 8002e16:	430b      	orrs	r3, r1
 8002e18:	4944      	ldr	r1, [pc, #272]	; (8002f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e1e:	7bfb      	ldrb	r3, [r7, #15]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d17d      	bne.n	8002f20 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002e24:	4b41      	ldr	r3, [pc, #260]	; (8002f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a40      	ldr	r2, [pc, #256]	; (8002f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e2a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e30:	f7fe fafc 	bl	800142c <HAL_GetTick>
 8002e34:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e36:	e009      	b.n	8002e4c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e38:	f7fe faf8 	bl	800142c <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d902      	bls.n	8002e4c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	73fb      	strb	r3, [r7, #15]
        break;
 8002e4a:	e005      	b.n	8002e58 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e4c:	4b37      	ldr	r3, [pc, #220]	; (8002f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d1ef      	bne.n	8002e38 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002e58:	7bfb      	ldrb	r3, [r7, #15]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d160      	bne.n	8002f20 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d111      	bne.n	8002e88 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e64:	4b31      	ldr	r3, [pc, #196]	; (8002f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002e6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	6892      	ldr	r2, [r2, #8]
 8002e74:	0211      	lsls	r1, r2, #8
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	68d2      	ldr	r2, [r2, #12]
 8002e7a:	0912      	lsrs	r2, r2, #4
 8002e7c:	0452      	lsls	r2, r2, #17
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	492a      	ldr	r1, [pc, #168]	; (8002f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	610b      	str	r3, [r1, #16]
 8002e86:	e027      	b.n	8002ed8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d112      	bne.n	8002eb4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e8e:	4b27      	ldr	r3, [pc, #156]	; (8002f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002e96:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	6892      	ldr	r2, [r2, #8]
 8002e9e:	0211      	lsls	r1, r2, #8
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	6912      	ldr	r2, [r2, #16]
 8002ea4:	0852      	lsrs	r2, r2, #1
 8002ea6:	3a01      	subs	r2, #1
 8002ea8:	0552      	lsls	r2, r2, #21
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	491f      	ldr	r1, [pc, #124]	; (8002f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	610b      	str	r3, [r1, #16]
 8002eb2:	e011      	b.n	8002ed8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002eb4:	4b1d      	ldr	r3, [pc, #116]	; (8002f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eb6:	691b      	ldr	r3, [r3, #16]
 8002eb8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002ebc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	6892      	ldr	r2, [r2, #8]
 8002ec4:	0211      	lsls	r1, r2, #8
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	6952      	ldr	r2, [r2, #20]
 8002eca:	0852      	lsrs	r2, r2, #1
 8002ecc:	3a01      	subs	r2, #1
 8002ece:	0652      	lsls	r2, r2, #25
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	4916      	ldr	r1, [pc, #88]	; (8002f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002ed8:	4b14      	ldr	r3, [pc, #80]	; (8002f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a13      	ldr	r2, [pc, #76]	; (8002f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ede:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ee2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee4:	f7fe faa2 	bl	800142c <HAL_GetTick>
 8002ee8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002eea:	e009      	b.n	8002f00 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002eec:	f7fe fa9e 	bl	800142c <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d902      	bls.n	8002f00 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	73fb      	strb	r3, [r7, #15]
          break;
 8002efe:	e005      	b.n	8002f0c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f00:	4b0a      	ldr	r3, [pc, #40]	; (8002f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d0ef      	beq.n	8002eec <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002f0c:	7bfb      	ldrb	r3, [r7, #15]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d106      	bne.n	8002f20 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002f12:	4b06      	ldr	r3, [pc, #24]	; (8002f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f14:	691a      	ldr	r2, [r3, #16]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	4904      	ldr	r1, [pc, #16]	; (8002f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3710      	adds	r7, #16
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	40021000 	.word	0x40021000

08002f30 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f3e:	4b6a      	ldr	r3, [pc, #424]	; (80030e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	f003 0303 	and.w	r3, r3, #3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d018      	beq.n	8002f7c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002f4a:	4b67      	ldr	r3, [pc, #412]	; (80030e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	f003 0203 	and.w	r2, r3, #3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d10d      	bne.n	8002f76 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
       ||
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d009      	beq.n	8002f76 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002f62:	4b61      	ldr	r3, [pc, #388]	; (80030e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	091b      	lsrs	r3, r3, #4
 8002f68:	f003 0307 	and.w	r3, r3, #7
 8002f6c:	1c5a      	adds	r2, r3, #1
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
       ||
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d047      	beq.n	8003006 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	73fb      	strb	r3, [r7, #15]
 8002f7a:	e044      	b.n	8003006 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2b03      	cmp	r3, #3
 8002f82:	d018      	beq.n	8002fb6 <RCCEx_PLLSAI2_Config+0x86>
 8002f84:	2b03      	cmp	r3, #3
 8002f86:	d825      	bhi.n	8002fd4 <RCCEx_PLLSAI2_Config+0xa4>
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d002      	beq.n	8002f92 <RCCEx_PLLSAI2_Config+0x62>
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d009      	beq.n	8002fa4 <RCCEx_PLLSAI2_Config+0x74>
 8002f90:	e020      	b.n	8002fd4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f92:	4b55      	ldr	r3, [pc, #340]	; (80030e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0302 	and.w	r3, r3, #2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d11d      	bne.n	8002fda <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fa2:	e01a      	b.n	8002fda <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002fa4:	4b50      	ldr	r3, [pc, #320]	; (80030e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d116      	bne.n	8002fde <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fb4:	e013      	b.n	8002fde <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002fb6:	4b4c      	ldr	r3, [pc, #304]	; (80030e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d10f      	bne.n	8002fe2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002fc2:	4b49      	ldr	r3, [pc, #292]	; (80030e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d109      	bne.n	8002fe2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002fd2:	e006      	b.n	8002fe2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	73fb      	strb	r3, [r7, #15]
      break;
 8002fd8:	e004      	b.n	8002fe4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002fda:	bf00      	nop
 8002fdc:	e002      	b.n	8002fe4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002fde:	bf00      	nop
 8002fe0:	e000      	b.n	8002fe4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002fe2:	bf00      	nop
    }

    if(status == HAL_OK)
 8002fe4:	7bfb      	ldrb	r3, [r7, #15]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d10d      	bne.n	8003006 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002fea:	4b3f      	ldr	r3, [pc, #252]	; (80030e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6819      	ldr	r1, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	011b      	lsls	r3, r3, #4
 8002ffe:	430b      	orrs	r3, r1
 8003000:	4939      	ldr	r1, [pc, #228]	; (80030e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003002:	4313      	orrs	r3, r2
 8003004:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003006:	7bfb      	ldrb	r3, [r7, #15]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d167      	bne.n	80030dc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800300c:	4b36      	ldr	r3, [pc, #216]	; (80030e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a35      	ldr	r2, [pc, #212]	; (80030e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003012:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003016:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003018:	f7fe fa08 	bl	800142c <HAL_GetTick>
 800301c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800301e:	e009      	b.n	8003034 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003020:	f7fe fa04 	bl	800142c <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b02      	cmp	r3, #2
 800302c:	d902      	bls.n	8003034 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	73fb      	strb	r3, [r7, #15]
        break;
 8003032:	e005      	b.n	8003040 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003034:	4b2c      	ldr	r3, [pc, #176]	; (80030e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d1ef      	bne.n	8003020 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003040:	7bfb      	ldrb	r3, [r7, #15]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d14a      	bne.n	80030dc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d111      	bne.n	8003070 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800304c:	4b26      	ldr	r3, [pc, #152]	; (80030e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800304e:	695b      	ldr	r3, [r3, #20]
 8003050:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003054:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	6892      	ldr	r2, [r2, #8]
 800305c:	0211      	lsls	r1, r2, #8
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	68d2      	ldr	r2, [r2, #12]
 8003062:	0912      	lsrs	r2, r2, #4
 8003064:	0452      	lsls	r2, r2, #17
 8003066:	430a      	orrs	r2, r1
 8003068:	491f      	ldr	r1, [pc, #124]	; (80030e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800306a:	4313      	orrs	r3, r2
 800306c:	614b      	str	r3, [r1, #20]
 800306e:	e011      	b.n	8003094 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003070:	4b1d      	ldr	r3, [pc, #116]	; (80030e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003072:	695b      	ldr	r3, [r3, #20]
 8003074:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003078:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	6892      	ldr	r2, [r2, #8]
 8003080:	0211      	lsls	r1, r2, #8
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	6912      	ldr	r2, [r2, #16]
 8003086:	0852      	lsrs	r2, r2, #1
 8003088:	3a01      	subs	r2, #1
 800308a:	0652      	lsls	r2, r2, #25
 800308c:	430a      	orrs	r2, r1
 800308e:	4916      	ldr	r1, [pc, #88]	; (80030e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003090:	4313      	orrs	r3, r2
 8003092:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003094:	4b14      	ldr	r3, [pc, #80]	; (80030e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a13      	ldr	r2, [pc, #76]	; (80030e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800309a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800309e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030a0:	f7fe f9c4 	bl	800142c <HAL_GetTick>
 80030a4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80030a6:	e009      	b.n	80030bc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80030a8:	f7fe f9c0 	bl	800142c <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d902      	bls.n	80030bc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	73fb      	strb	r3, [r7, #15]
          break;
 80030ba:	e005      	b.n	80030c8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80030bc:	4b0a      	ldr	r3, [pc, #40]	; (80030e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d0ef      	beq.n	80030a8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80030c8:	7bfb      	ldrb	r3, [r7, #15]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d106      	bne.n	80030dc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80030ce:	4b06      	ldr	r3, [pc, #24]	; (80030e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030d0:	695a      	ldr	r2, [r3, #20]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	4904      	ldr	r1, [pc, #16]	; (80030e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80030dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3710      	adds	r7, #16
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	40021000 	.word	0x40021000

080030ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d101      	bne.n	80030fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e095      	b.n	800322a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003102:	2b00      	cmp	r3, #0
 8003104:	d108      	bne.n	8003118 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800310e:	d009      	beq.n	8003124 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	61da      	str	r2, [r3, #28]
 8003116:	e005      	b.n	8003124 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003130:	b2db      	uxtb	r3, r3
 8003132:	2b00      	cmp	r3, #0
 8003134:	d106      	bne.n	8003144 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f7fd ff6e 	bl	8001020 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2202      	movs	r2, #2
 8003148:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800315a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003164:	d902      	bls.n	800316c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003166:	2300      	movs	r3, #0
 8003168:	60fb      	str	r3, [r7, #12]
 800316a:	e002      	b.n	8003172 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800316c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003170:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800317a:	d007      	beq.n	800318c <HAL_SPI_Init+0xa0>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003184:	d002      	beq.n	800318c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800319c:	431a      	orrs	r2, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	431a      	orrs	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	695b      	ldr	r3, [r3, #20]
 80031ac:	f003 0301 	and.w	r3, r3, #1
 80031b0:	431a      	orrs	r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031ba:	431a      	orrs	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	69db      	ldr	r3, [r3, #28]
 80031c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031c4:	431a      	orrs	r2, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a1b      	ldr	r3, [r3, #32]
 80031ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ce:	ea42 0103 	orr.w	r1, r2, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	430a      	orrs	r2, r1
 80031e0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	0c1b      	lsrs	r3, r3, #16
 80031e8:	f003 0204 	and.w	r2, r3, #4
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f0:	f003 0310 	and.w	r3, r3, #16
 80031f4:	431a      	orrs	r2, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031fa:	f003 0308 	and.w	r3, r3, #8
 80031fe:	431a      	orrs	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003208:	ea42 0103 	orr.w	r1, r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	430a      	orrs	r2, r1
 8003218:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3710      	adds	r7, #16
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003232:	b580      	push	{r7, lr}
 8003234:	b08a      	sub	sp, #40	; 0x28
 8003236:	af00      	add	r7, sp, #0
 8003238:	60f8      	str	r0, [r7, #12]
 800323a:	60b9      	str	r1, [r7, #8]
 800323c:	607a      	str	r2, [r7, #4]
 800323e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003240:	2301      	movs	r3, #1
 8003242:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003244:	2300      	movs	r3, #0
 8003246:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003250:	2b01      	cmp	r3, #1
 8003252:	d101      	bne.n	8003258 <HAL_SPI_TransmitReceive+0x26>
 8003254:	2302      	movs	r3, #2
 8003256:	e20a      	b.n	800366e <HAL_SPI_TransmitReceive+0x43c>
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003260:	f7fe f8e4 	bl	800142c <HAL_GetTick>
 8003264:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800326c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003274:	887b      	ldrh	r3, [r7, #2]
 8003276:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003278:	887b      	ldrh	r3, [r7, #2]
 800327a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800327c:	7efb      	ldrb	r3, [r7, #27]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d00e      	beq.n	80032a0 <HAL_SPI_TransmitReceive+0x6e>
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003288:	d106      	bne.n	8003298 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d102      	bne.n	8003298 <HAL_SPI_TransmitReceive+0x66>
 8003292:	7efb      	ldrb	r3, [r7, #27]
 8003294:	2b04      	cmp	r3, #4
 8003296:	d003      	beq.n	80032a0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003298:	2302      	movs	r3, #2
 800329a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800329e:	e1e0      	b.n	8003662 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d005      	beq.n	80032b2 <HAL_SPI_TransmitReceive+0x80>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d002      	beq.n	80032b2 <HAL_SPI_TransmitReceive+0x80>
 80032ac:	887b      	ldrh	r3, [r7, #2]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d103      	bne.n	80032ba <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80032b8:	e1d3      	b.n	8003662 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b04      	cmp	r3, #4
 80032c4:	d003      	beq.n	80032ce <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2205      	movs	r2, #5
 80032ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	887a      	ldrh	r2, [r7, #2]
 80032de:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	887a      	ldrh	r2, [r7, #2]
 80032e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	68ba      	ldr	r2, [r7, #8]
 80032ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	887a      	ldrh	r2, [r7, #2]
 80032f4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	887a      	ldrh	r2, [r7, #2]
 80032fa:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2200      	movs	r2, #0
 8003306:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003310:	d802      	bhi.n	8003318 <HAL_SPI_TransmitReceive+0xe6>
 8003312:	8a3b      	ldrh	r3, [r7, #16]
 8003314:	2b01      	cmp	r3, #1
 8003316:	d908      	bls.n	800332a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	685a      	ldr	r2, [r3, #4]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003326:	605a      	str	r2, [r3, #4]
 8003328:	e007      	b.n	800333a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	685a      	ldr	r2, [r3, #4]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003338:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003344:	2b40      	cmp	r3, #64	; 0x40
 8003346:	d007      	beq.n	8003358 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003356:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003360:	f240 8081 	bls.w	8003466 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d002      	beq.n	8003372 <HAL_SPI_TransmitReceive+0x140>
 800336c:	8a7b      	ldrh	r3, [r7, #18]
 800336e:	2b01      	cmp	r3, #1
 8003370:	d16d      	bne.n	800344e <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003376:	881a      	ldrh	r2, [r3, #0]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003382:	1c9a      	adds	r2, r3, #2
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800338c:	b29b      	uxth	r3, r3
 800338e:	3b01      	subs	r3, #1
 8003390:	b29a      	uxth	r2, r3
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003396:	e05a      	b.n	800344e <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d11b      	bne.n	80033de <HAL_SPI_TransmitReceive+0x1ac>
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d016      	beq.n	80033de <HAL_SPI_TransmitReceive+0x1ac>
 80033b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d113      	bne.n	80033de <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ba:	881a      	ldrh	r2, [r3, #0]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c6:	1c9a      	adds	r2, r3, #2
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	3b01      	subs	r3, #1
 80033d4:	b29a      	uxth	r2, r3
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80033da:	2300      	movs	r3, #0
 80033dc:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	f003 0301 	and.w	r3, r3, #1
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d11c      	bne.n	8003426 <HAL_SPI_TransmitReceive+0x1f4>
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d016      	beq.n	8003426 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68da      	ldr	r2, [r3, #12]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003402:	b292      	uxth	r2, r2
 8003404:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340a:	1c9a      	adds	r2, r3, #2
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003416:	b29b      	uxth	r3, r3
 8003418:	3b01      	subs	r3, #1
 800341a:	b29a      	uxth	r2, r3
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003422:	2301      	movs	r3, #1
 8003424:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003426:	f7fe f801 	bl	800142c <HAL_GetTick>
 800342a:	4602      	mov	r2, r0
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003432:	429a      	cmp	r2, r3
 8003434:	d80b      	bhi.n	800344e <HAL_SPI_TransmitReceive+0x21c>
 8003436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003438:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800343c:	d007      	beq.n	800344e <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800344c:	e109      	b.n	8003662 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003452:	b29b      	uxth	r3, r3
 8003454:	2b00      	cmp	r3, #0
 8003456:	d19f      	bne.n	8003398 <HAL_SPI_TransmitReceive+0x166>
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800345e:	b29b      	uxth	r3, r3
 8003460:	2b00      	cmp	r3, #0
 8003462:	d199      	bne.n	8003398 <HAL_SPI_TransmitReceive+0x166>
 8003464:	e0e3      	b.n	800362e <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d003      	beq.n	8003476 <HAL_SPI_TransmitReceive+0x244>
 800346e:	8a7b      	ldrh	r3, [r7, #18]
 8003470:	2b01      	cmp	r3, #1
 8003472:	f040 80cf 	bne.w	8003614 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800347a:	b29b      	uxth	r3, r3
 800347c:	2b01      	cmp	r3, #1
 800347e:	d912      	bls.n	80034a6 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003484:	881a      	ldrh	r2, [r3, #0]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003490:	1c9a      	adds	r2, r3, #2
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800349a:	b29b      	uxth	r3, r3
 800349c:	3b02      	subs	r3, #2
 800349e:	b29a      	uxth	r2, r3
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80034a4:	e0b6      	b.n	8003614 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	330c      	adds	r3, #12
 80034b0:	7812      	ldrb	r2, [r2, #0]
 80034b2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b8:	1c5a      	adds	r2, r3, #1
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	3b01      	subs	r3, #1
 80034c6:	b29a      	uxth	r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034cc:	e0a2      	b.n	8003614 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f003 0302 	and.w	r3, r3, #2
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d134      	bne.n	8003546 <HAL_SPI_TransmitReceive+0x314>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d02f      	beq.n	8003546 <HAL_SPI_TransmitReceive+0x314>
 80034e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d12c      	bne.n	8003546 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d912      	bls.n	800351c <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034fa:	881a      	ldrh	r2, [r3, #0]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003506:	1c9a      	adds	r2, r3, #2
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003510:	b29b      	uxth	r3, r3
 8003512:	3b02      	subs	r3, #2
 8003514:	b29a      	uxth	r2, r3
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	87da      	strh	r2, [r3, #62]	; 0x3e
 800351a:	e012      	b.n	8003542 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	330c      	adds	r3, #12
 8003526:	7812      	ldrb	r2, [r2, #0]
 8003528:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800352e:	1c5a      	adds	r2, r3, #1
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003538:	b29b      	uxth	r3, r3
 800353a:	3b01      	subs	r3, #1
 800353c:	b29a      	uxth	r2, r3
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003542:	2300      	movs	r3, #0
 8003544:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f003 0301 	and.w	r3, r3, #1
 8003550:	2b01      	cmp	r3, #1
 8003552:	d148      	bne.n	80035e6 <HAL_SPI_TransmitReceive+0x3b4>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800355a:	b29b      	uxth	r3, r3
 800355c:	2b00      	cmp	r3, #0
 800355e:	d042      	beq.n	80035e6 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003566:	b29b      	uxth	r3, r3
 8003568:	2b01      	cmp	r3, #1
 800356a:	d923      	bls.n	80035b4 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68da      	ldr	r2, [r3, #12]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003576:	b292      	uxth	r2, r2
 8003578:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357e:	1c9a      	adds	r2, r3, #2
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800358a:	b29b      	uxth	r3, r3
 800358c:	3b02      	subs	r3, #2
 800358e:	b29a      	uxth	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800359c:	b29b      	uxth	r3, r3
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d81f      	bhi.n	80035e2 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	685a      	ldr	r2, [r3, #4]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80035b0:	605a      	str	r2, [r3, #4]
 80035b2:	e016      	b.n	80035e2 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f103 020c 	add.w	r2, r3, #12
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c0:	7812      	ldrb	r2, [r2, #0]
 80035c2:	b2d2      	uxtb	r2, r2
 80035c4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ca:	1c5a      	adds	r2, r3, #1
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	3b01      	subs	r3, #1
 80035da:	b29a      	uxth	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80035e2:	2301      	movs	r3, #1
 80035e4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80035e6:	f7fd ff21 	bl	800142c <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d803      	bhi.n	80035fe <HAL_SPI_TransmitReceive+0x3cc>
 80035f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035fc:	d102      	bne.n	8003604 <HAL_SPI_TransmitReceive+0x3d2>
 80035fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003600:	2b00      	cmp	r3, #0
 8003602:	d107      	bne.n	8003614 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2201      	movs	r2, #1
 800360e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8003612:	e026      	b.n	8003662 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003618:	b29b      	uxth	r3, r3
 800361a:	2b00      	cmp	r3, #0
 800361c:	f47f af57 	bne.w	80034ce <HAL_SPI_TransmitReceive+0x29c>
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003626:	b29b      	uxth	r3, r3
 8003628:	2b00      	cmp	r3, #0
 800362a:	f47f af50 	bne.w	80034ce <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800362e:	69fa      	ldr	r2, [r7, #28]
 8003630:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003632:	68f8      	ldr	r0, [r7, #12]
 8003634:	f000 f93e 	bl	80038b4 <SPI_EndRxTxTransaction>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d005      	beq.n	800364a <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2220      	movs	r2, #32
 8003648:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800364e:	2b00      	cmp	r3, #0
 8003650:	d003      	beq.n	800365a <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003658:	e003      	b.n	8003662 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2201      	movs	r2, #1
 800365e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2200      	movs	r2, #0
 8003666:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800366a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800366e:	4618      	mov	r0, r3
 8003670:	3728      	adds	r7, #40	; 0x28
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
	...

08003678 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b088      	sub	sp, #32
 800367c:	af00      	add	r7, sp, #0
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	603b      	str	r3, [r7, #0]
 8003684:	4613      	mov	r3, r2
 8003686:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003688:	f7fd fed0 	bl	800142c <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003690:	1a9b      	subs	r3, r3, r2
 8003692:	683a      	ldr	r2, [r7, #0]
 8003694:	4413      	add	r3, r2
 8003696:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003698:	f7fd fec8 	bl	800142c <HAL_GetTick>
 800369c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800369e:	4b39      	ldr	r3, [pc, #228]	; (8003784 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	015b      	lsls	r3, r3, #5
 80036a4:	0d1b      	lsrs	r3, r3, #20
 80036a6:	69fa      	ldr	r2, [r7, #28]
 80036a8:	fb02 f303 	mul.w	r3, r2, r3
 80036ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036ae:	e054      	b.n	800375a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036b6:	d050      	beq.n	800375a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80036b8:	f7fd feb8 	bl	800142c <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	69fa      	ldr	r2, [r7, #28]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d902      	bls.n	80036ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d13d      	bne.n	800374a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	685a      	ldr	r2, [r3, #4]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80036dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036e6:	d111      	bne.n	800370c <SPI_WaitFlagStateUntilTimeout+0x94>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036f0:	d004      	beq.n	80036fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036fa:	d107      	bne.n	800370c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800370a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003710:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003714:	d10f      	bne.n	8003736 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003724:	601a      	str	r2, [r3, #0]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003734:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2201      	movs	r2, #1
 800373a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e017      	b.n	800377a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d101      	bne.n	8003754 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003750:	2300      	movs	r3, #0
 8003752:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	3b01      	subs	r3, #1
 8003758:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	689a      	ldr	r2, [r3, #8]
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	4013      	ands	r3, r2
 8003764:	68ba      	ldr	r2, [r7, #8]
 8003766:	429a      	cmp	r2, r3
 8003768:	bf0c      	ite	eq
 800376a:	2301      	moveq	r3, #1
 800376c:	2300      	movne	r3, #0
 800376e:	b2db      	uxtb	r3, r3
 8003770:	461a      	mov	r2, r3
 8003772:	79fb      	ldrb	r3, [r7, #7]
 8003774:	429a      	cmp	r2, r3
 8003776:	d19b      	bne.n	80036b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3720      	adds	r7, #32
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	20000000 	.word	0x20000000

08003788 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b08a      	sub	sp, #40	; 0x28
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	607a      	str	r2, [r7, #4]
 8003794:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003796:	2300      	movs	r3, #0
 8003798:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800379a:	f7fd fe47 	bl	800142c <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a2:	1a9b      	subs	r3, r3, r2
 80037a4:	683a      	ldr	r2, [r7, #0]
 80037a6:	4413      	add	r3, r2
 80037a8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80037aa:	f7fd fe3f 	bl	800142c <HAL_GetTick>
 80037ae:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	330c      	adds	r3, #12
 80037b6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80037b8:	4b3d      	ldr	r3, [pc, #244]	; (80038b0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	4613      	mov	r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	4413      	add	r3, r2
 80037c2:	00da      	lsls	r2, r3, #3
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	0d1b      	lsrs	r3, r3, #20
 80037c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037ca:	fb02 f303 	mul.w	r3, r2, r3
 80037ce:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80037d0:	e060      	b.n	8003894 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80037d8:	d107      	bne.n	80037ea <SPI_WaitFifoStateUntilTimeout+0x62>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d104      	bne.n	80037ea <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80037e8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037f0:	d050      	beq.n	8003894 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80037f2:	f7fd fe1b 	bl	800142c <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	6a3b      	ldr	r3, [r7, #32]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037fe:	429a      	cmp	r2, r3
 8003800:	d902      	bls.n	8003808 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003804:	2b00      	cmp	r3, #0
 8003806:	d13d      	bne.n	8003884 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	685a      	ldr	r2, [r3, #4]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003816:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003820:	d111      	bne.n	8003846 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800382a:	d004      	beq.n	8003836 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003834:	d107      	bne.n	8003846 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003844:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800384a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800384e:	d10f      	bne.n	8003870 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800385e:	601a      	str	r2, [r3, #0]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800386e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e010      	b.n	80038a6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d101      	bne.n	800388e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800388a:	2300      	movs	r3, #0
 800388c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	3b01      	subs	r3, #1
 8003892:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	689a      	ldr	r2, [r3, #8]
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	4013      	ands	r3, r2
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d196      	bne.n	80037d2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3728      	adds	r7, #40	; 0x28
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	20000000 	.word	0x20000000

080038b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b086      	sub	sp, #24
 80038b8:	af02      	add	r7, sp, #8
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	9300      	str	r3, [sp, #0]
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80038cc:	68f8      	ldr	r0, [r7, #12]
 80038ce:	f7ff ff5b 	bl	8003788 <SPI_WaitFifoStateUntilTimeout>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d007      	beq.n	80038e8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038dc:	f043 0220 	orr.w	r2, r3, #32
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e027      	b.n	8003938 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	9300      	str	r3, [sp, #0]
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	2200      	movs	r2, #0
 80038f0:	2180      	movs	r1, #128	; 0x80
 80038f2:	68f8      	ldr	r0, [r7, #12]
 80038f4:	f7ff fec0 	bl	8003678 <SPI_WaitFlagStateUntilTimeout>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d007      	beq.n	800390e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003902:	f043 0220 	orr.w	r2, r3, #32
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e014      	b.n	8003938 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	9300      	str	r3, [sp, #0]
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	2200      	movs	r2, #0
 8003916:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800391a:	68f8      	ldr	r0, [r7, #12]
 800391c:	f7ff ff34 	bl	8003788 <SPI_WaitFifoStateUntilTimeout>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d007      	beq.n	8003936 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800392a:	f043 0220 	orr.w	r2, r3, #32
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e000      	b.n	8003938 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	3710      	adds	r7, #16
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e040      	b.n	80039d4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003956:	2b00      	cmp	r3, #0
 8003958:	d106      	bne.n	8003968 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f7fd fba0 	bl	80010a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2224      	movs	r2, #36	; 0x24
 800396c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f022 0201 	bic.w	r2, r2, #1
 800397c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003982:	2b00      	cmp	r3, #0
 8003984:	d002      	beq.n	800398c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f000 fb6a 	bl	8004060 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f000 f8af 	bl	8003af0 <UART_SetConfig>
 8003992:	4603      	mov	r3, r0
 8003994:	2b01      	cmp	r3, #1
 8003996:	d101      	bne.n	800399c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e01b      	b.n	80039d4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	685a      	ldr	r2, [r3, #4]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	689a      	ldr	r2, [r3, #8]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f042 0201 	orr.w	r2, r2, #1
 80039ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f000 fbe9 	bl	80041a4 <UART_CheckIdleState>
 80039d2:	4603      	mov	r3, r0
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3708      	adds	r7, #8
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b08a      	sub	sp, #40	; 0x28
 80039e0:	af02      	add	r7, sp, #8
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	603b      	str	r3, [r7, #0]
 80039e8:	4613      	mov	r3, r2
 80039ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039f0:	2b20      	cmp	r3, #32
 80039f2:	d178      	bne.n	8003ae6 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d002      	beq.n	8003a00 <HAL_UART_Transmit+0x24>
 80039fa:	88fb      	ldrh	r3, [r7, #6]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d101      	bne.n	8003a04 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e071      	b.n	8003ae8 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2221      	movs	r2, #33	; 0x21
 8003a10:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a12:	f7fd fd0b 	bl	800142c <HAL_GetTick>
 8003a16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	88fa      	ldrh	r2, [r7, #6]
 8003a1c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	88fa      	ldrh	r2, [r7, #6]
 8003a24:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a30:	d108      	bne.n	8003a44 <HAL_UART_Transmit+0x68>
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d104      	bne.n	8003a44 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	61bb      	str	r3, [r7, #24]
 8003a42:	e003      	b.n	8003a4c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a4c:	e030      	b.n	8003ab0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	9300      	str	r3, [sp, #0]
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	2200      	movs	r2, #0
 8003a56:	2180      	movs	r1, #128	; 0x80
 8003a58:	68f8      	ldr	r0, [r7, #12]
 8003a5a:	f000 fc4b 	bl	80042f4 <UART_WaitOnFlagUntilTimeout>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d004      	beq.n	8003a6e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2220      	movs	r2, #32
 8003a68:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e03c      	b.n	8003ae8 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d10b      	bne.n	8003a8c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	881a      	ldrh	r2, [r3, #0]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a80:	b292      	uxth	r2, r2
 8003a82:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	3302      	adds	r3, #2
 8003a88:	61bb      	str	r3, [r7, #24]
 8003a8a:	e008      	b.n	8003a9e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	781a      	ldrb	r2, [r3, #0]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	b292      	uxth	r2, r2
 8003a96:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	b29a      	uxth	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d1c8      	bne.n	8003a4e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	9300      	str	r3, [sp, #0]
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	2140      	movs	r1, #64	; 0x40
 8003ac6:	68f8      	ldr	r0, [r7, #12]
 8003ac8:	f000 fc14 	bl	80042f4 <UART_WaitOnFlagUntilTimeout>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d004      	beq.n	8003adc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2220      	movs	r2, #32
 8003ad6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003ad8:	2303      	movs	r3, #3
 8003ada:	e005      	b.n	8003ae8 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2220      	movs	r2, #32
 8003ae0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	e000      	b.n	8003ae8 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003ae6:	2302      	movs	r3, #2
  }
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3720      	adds	r7, #32
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003af0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003af4:	b08a      	sub	sp, #40	; 0x28
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003afa:	2300      	movs	r3, #0
 8003afc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	689a      	ldr	r2, [r3, #8]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	431a      	orrs	r2, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	431a      	orrs	r2, r3
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	69db      	ldr	r3, [r3, #28]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	4ba4      	ldr	r3, [pc, #656]	; (8003db0 <UART_SetConfig+0x2c0>)
 8003b20:	4013      	ands	r3, r2
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	6812      	ldr	r2, [r2, #0]
 8003b26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b28:	430b      	orrs	r3, r1
 8003b2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	68da      	ldr	r2, [r3, #12]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a99      	ldr	r2, [pc, #612]	; (8003db4 <UART_SetConfig+0x2c4>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d004      	beq.n	8003b5c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6a1b      	ldr	r3, [r3, #32]
 8003b56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a90      	ldr	r2, [pc, #576]	; (8003db8 <UART_SetConfig+0x2c8>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d126      	bne.n	8003bc8 <UART_SetConfig+0xd8>
 8003b7a:	4b90      	ldr	r3, [pc, #576]	; (8003dbc <UART_SetConfig+0x2cc>)
 8003b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b80:	f003 0303 	and.w	r3, r3, #3
 8003b84:	2b03      	cmp	r3, #3
 8003b86:	d81b      	bhi.n	8003bc0 <UART_SetConfig+0xd0>
 8003b88:	a201      	add	r2, pc, #4	; (adr r2, 8003b90 <UART_SetConfig+0xa0>)
 8003b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b8e:	bf00      	nop
 8003b90:	08003ba1 	.word	0x08003ba1
 8003b94:	08003bb1 	.word	0x08003bb1
 8003b98:	08003ba9 	.word	0x08003ba9
 8003b9c:	08003bb9 	.word	0x08003bb9
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ba6:	e116      	b.n	8003dd6 <UART_SetConfig+0x2e6>
 8003ba8:	2302      	movs	r3, #2
 8003baa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bae:	e112      	b.n	8003dd6 <UART_SetConfig+0x2e6>
 8003bb0:	2304      	movs	r3, #4
 8003bb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bb6:	e10e      	b.n	8003dd6 <UART_SetConfig+0x2e6>
 8003bb8:	2308      	movs	r3, #8
 8003bba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bbe:	e10a      	b.n	8003dd6 <UART_SetConfig+0x2e6>
 8003bc0:	2310      	movs	r3, #16
 8003bc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bc6:	e106      	b.n	8003dd6 <UART_SetConfig+0x2e6>
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a7c      	ldr	r2, [pc, #496]	; (8003dc0 <UART_SetConfig+0x2d0>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d138      	bne.n	8003c44 <UART_SetConfig+0x154>
 8003bd2:	4b7a      	ldr	r3, [pc, #488]	; (8003dbc <UART_SetConfig+0x2cc>)
 8003bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd8:	f003 030c 	and.w	r3, r3, #12
 8003bdc:	2b0c      	cmp	r3, #12
 8003bde:	d82d      	bhi.n	8003c3c <UART_SetConfig+0x14c>
 8003be0:	a201      	add	r2, pc, #4	; (adr r2, 8003be8 <UART_SetConfig+0xf8>)
 8003be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003be6:	bf00      	nop
 8003be8:	08003c1d 	.word	0x08003c1d
 8003bec:	08003c3d 	.word	0x08003c3d
 8003bf0:	08003c3d 	.word	0x08003c3d
 8003bf4:	08003c3d 	.word	0x08003c3d
 8003bf8:	08003c2d 	.word	0x08003c2d
 8003bfc:	08003c3d 	.word	0x08003c3d
 8003c00:	08003c3d 	.word	0x08003c3d
 8003c04:	08003c3d 	.word	0x08003c3d
 8003c08:	08003c25 	.word	0x08003c25
 8003c0c:	08003c3d 	.word	0x08003c3d
 8003c10:	08003c3d 	.word	0x08003c3d
 8003c14:	08003c3d 	.word	0x08003c3d
 8003c18:	08003c35 	.word	0x08003c35
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c22:	e0d8      	b.n	8003dd6 <UART_SetConfig+0x2e6>
 8003c24:	2302      	movs	r3, #2
 8003c26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c2a:	e0d4      	b.n	8003dd6 <UART_SetConfig+0x2e6>
 8003c2c:	2304      	movs	r3, #4
 8003c2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c32:	e0d0      	b.n	8003dd6 <UART_SetConfig+0x2e6>
 8003c34:	2308      	movs	r3, #8
 8003c36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c3a:	e0cc      	b.n	8003dd6 <UART_SetConfig+0x2e6>
 8003c3c:	2310      	movs	r3, #16
 8003c3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c42:	e0c8      	b.n	8003dd6 <UART_SetConfig+0x2e6>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a5e      	ldr	r2, [pc, #376]	; (8003dc4 <UART_SetConfig+0x2d4>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d125      	bne.n	8003c9a <UART_SetConfig+0x1aa>
 8003c4e:	4b5b      	ldr	r3, [pc, #364]	; (8003dbc <UART_SetConfig+0x2cc>)
 8003c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c54:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003c58:	2b30      	cmp	r3, #48	; 0x30
 8003c5a:	d016      	beq.n	8003c8a <UART_SetConfig+0x19a>
 8003c5c:	2b30      	cmp	r3, #48	; 0x30
 8003c5e:	d818      	bhi.n	8003c92 <UART_SetConfig+0x1a2>
 8003c60:	2b20      	cmp	r3, #32
 8003c62:	d00a      	beq.n	8003c7a <UART_SetConfig+0x18a>
 8003c64:	2b20      	cmp	r3, #32
 8003c66:	d814      	bhi.n	8003c92 <UART_SetConfig+0x1a2>
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d002      	beq.n	8003c72 <UART_SetConfig+0x182>
 8003c6c:	2b10      	cmp	r3, #16
 8003c6e:	d008      	beq.n	8003c82 <UART_SetConfig+0x192>
 8003c70:	e00f      	b.n	8003c92 <UART_SetConfig+0x1a2>
 8003c72:	2300      	movs	r3, #0
 8003c74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c78:	e0ad      	b.n	8003dd6 <UART_SetConfig+0x2e6>
 8003c7a:	2302      	movs	r3, #2
 8003c7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c80:	e0a9      	b.n	8003dd6 <UART_SetConfig+0x2e6>
 8003c82:	2304      	movs	r3, #4
 8003c84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c88:	e0a5      	b.n	8003dd6 <UART_SetConfig+0x2e6>
 8003c8a:	2308      	movs	r3, #8
 8003c8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c90:	e0a1      	b.n	8003dd6 <UART_SetConfig+0x2e6>
 8003c92:	2310      	movs	r3, #16
 8003c94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c98:	e09d      	b.n	8003dd6 <UART_SetConfig+0x2e6>
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a4a      	ldr	r2, [pc, #296]	; (8003dc8 <UART_SetConfig+0x2d8>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d125      	bne.n	8003cf0 <UART_SetConfig+0x200>
 8003ca4:	4b45      	ldr	r3, [pc, #276]	; (8003dbc <UART_SetConfig+0x2cc>)
 8003ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003caa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003cae:	2bc0      	cmp	r3, #192	; 0xc0
 8003cb0:	d016      	beq.n	8003ce0 <UART_SetConfig+0x1f0>
 8003cb2:	2bc0      	cmp	r3, #192	; 0xc0
 8003cb4:	d818      	bhi.n	8003ce8 <UART_SetConfig+0x1f8>
 8003cb6:	2b80      	cmp	r3, #128	; 0x80
 8003cb8:	d00a      	beq.n	8003cd0 <UART_SetConfig+0x1e0>
 8003cba:	2b80      	cmp	r3, #128	; 0x80
 8003cbc:	d814      	bhi.n	8003ce8 <UART_SetConfig+0x1f8>
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d002      	beq.n	8003cc8 <UART_SetConfig+0x1d8>
 8003cc2:	2b40      	cmp	r3, #64	; 0x40
 8003cc4:	d008      	beq.n	8003cd8 <UART_SetConfig+0x1e8>
 8003cc6:	e00f      	b.n	8003ce8 <UART_SetConfig+0x1f8>
 8003cc8:	2300      	movs	r3, #0
 8003cca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cce:	e082      	b.n	8003dd6 <UART_SetConfig+0x2e6>
 8003cd0:	2302      	movs	r3, #2
 8003cd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cd6:	e07e      	b.n	8003dd6 <UART_SetConfig+0x2e6>
 8003cd8:	2304      	movs	r3, #4
 8003cda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cde:	e07a      	b.n	8003dd6 <UART_SetConfig+0x2e6>
 8003ce0:	2308      	movs	r3, #8
 8003ce2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ce6:	e076      	b.n	8003dd6 <UART_SetConfig+0x2e6>
 8003ce8:	2310      	movs	r3, #16
 8003cea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cee:	e072      	b.n	8003dd6 <UART_SetConfig+0x2e6>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a35      	ldr	r2, [pc, #212]	; (8003dcc <UART_SetConfig+0x2dc>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d12a      	bne.n	8003d50 <UART_SetConfig+0x260>
 8003cfa:	4b30      	ldr	r3, [pc, #192]	; (8003dbc <UART_SetConfig+0x2cc>)
 8003cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d08:	d01a      	beq.n	8003d40 <UART_SetConfig+0x250>
 8003d0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d0e:	d81b      	bhi.n	8003d48 <UART_SetConfig+0x258>
 8003d10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d14:	d00c      	beq.n	8003d30 <UART_SetConfig+0x240>
 8003d16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d1a:	d815      	bhi.n	8003d48 <UART_SetConfig+0x258>
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d003      	beq.n	8003d28 <UART_SetConfig+0x238>
 8003d20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d24:	d008      	beq.n	8003d38 <UART_SetConfig+0x248>
 8003d26:	e00f      	b.n	8003d48 <UART_SetConfig+0x258>
 8003d28:	2300      	movs	r3, #0
 8003d2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d2e:	e052      	b.n	8003dd6 <UART_SetConfig+0x2e6>
 8003d30:	2302      	movs	r3, #2
 8003d32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d36:	e04e      	b.n	8003dd6 <UART_SetConfig+0x2e6>
 8003d38:	2304      	movs	r3, #4
 8003d3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d3e:	e04a      	b.n	8003dd6 <UART_SetConfig+0x2e6>
 8003d40:	2308      	movs	r3, #8
 8003d42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d46:	e046      	b.n	8003dd6 <UART_SetConfig+0x2e6>
 8003d48:	2310      	movs	r3, #16
 8003d4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d4e:	e042      	b.n	8003dd6 <UART_SetConfig+0x2e6>
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a17      	ldr	r2, [pc, #92]	; (8003db4 <UART_SetConfig+0x2c4>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d13a      	bne.n	8003dd0 <UART_SetConfig+0x2e0>
 8003d5a:	4b18      	ldr	r3, [pc, #96]	; (8003dbc <UART_SetConfig+0x2cc>)
 8003d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d60:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003d64:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d68:	d01a      	beq.n	8003da0 <UART_SetConfig+0x2b0>
 8003d6a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d6e:	d81b      	bhi.n	8003da8 <UART_SetConfig+0x2b8>
 8003d70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d74:	d00c      	beq.n	8003d90 <UART_SetConfig+0x2a0>
 8003d76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d7a:	d815      	bhi.n	8003da8 <UART_SetConfig+0x2b8>
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d003      	beq.n	8003d88 <UART_SetConfig+0x298>
 8003d80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d84:	d008      	beq.n	8003d98 <UART_SetConfig+0x2a8>
 8003d86:	e00f      	b.n	8003da8 <UART_SetConfig+0x2b8>
 8003d88:	2300      	movs	r3, #0
 8003d8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d8e:	e022      	b.n	8003dd6 <UART_SetConfig+0x2e6>
 8003d90:	2302      	movs	r3, #2
 8003d92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d96:	e01e      	b.n	8003dd6 <UART_SetConfig+0x2e6>
 8003d98:	2304      	movs	r3, #4
 8003d9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d9e:	e01a      	b.n	8003dd6 <UART_SetConfig+0x2e6>
 8003da0:	2308      	movs	r3, #8
 8003da2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003da6:	e016      	b.n	8003dd6 <UART_SetConfig+0x2e6>
 8003da8:	2310      	movs	r3, #16
 8003daa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dae:	e012      	b.n	8003dd6 <UART_SetConfig+0x2e6>
 8003db0:	efff69f3 	.word	0xefff69f3
 8003db4:	40008000 	.word	0x40008000
 8003db8:	40013800 	.word	0x40013800
 8003dbc:	40021000 	.word	0x40021000
 8003dc0:	40004400 	.word	0x40004400
 8003dc4:	40004800 	.word	0x40004800
 8003dc8:	40004c00 	.word	0x40004c00
 8003dcc:	40005000 	.word	0x40005000
 8003dd0:	2310      	movs	r3, #16
 8003dd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a9f      	ldr	r2, [pc, #636]	; (8004058 <UART_SetConfig+0x568>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d17a      	bne.n	8003ed6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003de0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003de4:	2b08      	cmp	r3, #8
 8003de6:	d824      	bhi.n	8003e32 <UART_SetConfig+0x342>
 8003de8:	a201      	add	r2, pc, #4	; (adr r2, 8003df0 <UART_SetConfig+0x300>)
 8003dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dee:	bf00      	nop
 8003df0:	08003e15 	.word	0x08003e15
 8003df4:	08003e33 	.word	0x08003e33
 8003df8:	08003e1d 	.word	0x08003e1d
 8003dfc:	08003e33 	.word	0x08003e33
 8003e00:	08003e23 	.word	0x08003e23
 8003e04:	08003e33 	.word	0x08003e33
 8003e08:	08003e33 	.word	0x08003e33
 8003e0c:	08003e33 	.word	0x08003e33
 8003e10:	08003e2b 	.word	0x08003e2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e14:	f7fe fc22 	bl	800265c <HAL_RCC_GetPCLK1Freq>
 8003e18:	61f8      	str	r0, [r7, #28]
        break;
 8003e1a:	e010      	b.n	8003e3e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e1c:	4b8f      	ldr	r3, [pc, #572]	; (800405c <UART_SetConfig+0x56c>)
 8003e1e:	61fb      	str	r3, [r7, #28]
        break;
 8003e20:	e00d      	b.n	8003e3e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e22:	f7fe fb83 	bl	800252c <HAL_RCC_GetSysClockFreq>
 8003e26:	61f8      	str	r0, [r7, #28]
        break;
 8003e28:	e009      	b.n	8003e3e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e2e:	61fb      	str	r3, [r7, #28]
        break;
 8003e30:	e005      	b.n	8003e3e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003e32:	2300      	movs	r3, #0
 8003e34:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003e3c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	f000 80fb 	beq.w	800403c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	685a      	ldr	r2, [r3, #4]
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	005b      	lsls	r3, r3, #1
 8003e4e:	4413      	add	r3, r2
 8003e50:	69fa      	ldr	r2, [r7, #28]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d305      	bcc.n	8003e62 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e5c:	69fa      	ldr	r2, [r7, #28]
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d903      	bls.n	8003e6a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003e68:	e0e8      	b.n	800403c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	461c      	mov	r4, r3
 8003e70:	4615      	mov	r5, r2
 8003e72:	f04f 0200 	mov.w	r2, #0
 8003e76:	f04f 0300 	mov.w	r3, #0
 8003e7a:	022b      	lsls	r3, r5, #8
 8003e7c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003e80:	0222      	lsls	r2, r4, #8
 8003e82:	68f9      	ldr	r1, [r7, #12]
 8003e84:	6849      	ldr	r1, [r1, #4]
 8003e86:	0849      	lsrs	r1, r1, #1
 8003e88:	2000      	movs	r0, #0
 8003e8a:	4688      	mov	r8, r1
 8003e8c:	4681      	mov	r9, r0
 8003e8e:	eb12 0a08 	adds.w	sl, r2, r8
 8003e92:	eb43 0b09 	adc.w	fp, r3, r9
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	603b      	str	r3, [r7, #0]
 8003e9e:	607a      	str	r2, [r7, #4]
 8003ea0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ea4:	4650      	mov	r0, sl
 8003ea6:	4659      	mov	r1, fp
 8003ea8:	f7fc fa5a 	bl	8000360 <__aeabi_uldivmod>
 8003eac:	4602      	mov	r2, r0
 8003eae:	460b      	mov	r3, r1
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003eba:	d308      	bcc.n	8003ece <UART_SetConfig+0x3de>
 8003ebc:	69bb      	ldr	r3, [r7, #24]
 8003ebe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ec2:	d204      	bcs.n	8003ece <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	69ba      	ldr	r2, [r7, #24]
 8003eca:	60da      	str	r2, [r3, #12]
 8003ecc:	e0b6      	b.n	800403c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003ed4:	e0b2      	b.n	800403c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	69db      	ldr	r3, [r3, #28]
 8003eda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ede:	d15e      	bne.n	8003f9e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003ee0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ee4:	2b08      	cmp	r3, #8
 8003ee6:	d828      	bhi.n	8003f3a <UART_SetConfig+0x44a>
 8003ee8:	a201      	add	r2, pc, #4	; (adr r2, 8003ef0 <UART_SetConfig+0x400>)
 8003eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eee:	bf00      	nop
 8003ef0:	08003f15 	.word	0x08003f15
 8003ef4:	08003f1d 	.word	0x08003f1d
 8003ef8:	08003f25 	.word	0x08003f25
 8003efc:	08003f3b 	.word	0x08003f3b
 8003f00:	08003f2b 	.word	0x08003f2b
 8003f04:	08003f3b 	.word	0x08003f3b
 8003f08:	08003f3b 	.word	0x08003f3b
 8003f0c:	08003f3b 	.word	0x08003f3b
 8003f10:	08003f33 	.word	0x08003f33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f14:	f7fe fba2 	bl	800265c <HAL_RCC_GetPCLK1Freq>
 8003f18:	61f8      	str	r0, [r7, #28]
        break;
 8003f1a:	e014      	b.n	8003f46 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f1c:	f7fe fbb4 	bl	8002688 <HAL_RCC_GetPCLK2Freq>
 8003f20:	61f8      	str	r0, [r7, #28]
        break;
 8003f22:	e010      	b.n	8003f46 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f24:	4b4d      	ldr	r3, [pc, #308]	; (800405c <UART_SetConfig+0x56c>)
 8003f26:	61fb      	str	r3, [r7, #28]
        break;
 8003f28:	e00d      	b.n	8003f46 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f2a:	f7fe faff 	bl	800252c <HAL_RCC_GetSysClockFreq>
 8003f2e:	61f8      	str	r0, [r7, #28]
        break;
 8003f30:	e009      	b.n	8003f46 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f36:	61fb      	str	r3, [r7, #28]
        break;
 8003f38:	e005      	b.n	8003f46 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003f44:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d077      	beq.n	800403c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	005a      	lsls	r2, r3, #1
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	085b      	lsrs	r3, r3, #1
 8003f56:	441a      	add	r2, r3
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f60:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	2b0f      	cmp	r3, #15
 8003f66:	d916      	bls.n	8003f96 <UART_SetConfig+0x4a6>
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f6e:	d212      	bcs.n	8003f96 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	f023 030f 	bic.w	r3, r3, #15
 8003f78:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	085b      	lsrs	r3, r3, #1
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	f003 0307 	and.w	r3, r3, #7
 8003f84:	b29a      	uxth	r2, r3
 8003f86:	8afb      	ldrh	r3, [r7, #22]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	8afa      	ldrh	r2, [r7, #22]
 8003f92:	60da      	str	r2, [r3, #12]
 8003f94:	e052      	b.n	800403c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003f9c:	e04e      	b.n	800403c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f9e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003fa2:	2b08      	cmp	r3, #8
 8003fa4:	d827      	bhi.n	8003ff6 <UART_SetConfig+0x506>
 8003fa6:	a201      	add	r2, pc, #4	; (adr r2, 8003fac <UART_SetConfig+0x4bc>)
 8003fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fac:	08003fd1 	.word	0x08003fd1
 8003fb0:	08003fd9 	.word	0x08003fd9
 8003fb4:	08003fe1 	.word	0x08003fe1
 8003fb8:	08003ff7 	.word	0x08003ff7
 8003fbc:	08003fe7 	.word	0x08003fe7
 8003fc0:	08003ff7 	.word	0x08003ff7
 8003fc4:	08003ff7 	.word	0x08003ff7
 8003fc8:	08003ff7 	.word	0x08003ff7
 8003fcc:	08003fef 	.word	0x08003fef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fd0:	f7fe fb44 	bl	800265c <HAL_RCC_GetPCLK1Freq>
 8003fd4:	61f8      	str	r0, [r7, #28]
        break;
 8003fd6:	e014      	b.n	8004002 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fd8:	f7fe fb56 	bl	8002688 <HAL_RCC_GetPCLK2Freq>
 8003fdc:	61f8      	str	r0, [r7, #28]
        break;
 8003fde:	e010      	b.n	8004002 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fe0:	4b1e      	ldr	r3, [pc, #120]	; (800405c <UART_SetConfig+0x56c>)
 8003fe2:	61fb      	str	r3, [r7, #28]
        break;
 8003fe4:	e00d      	b.n	8004002 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fe6:	f7fe faa1 	bl	800252c <HAL_RCC_GetSysClockFreq>
 8003fea:	61f8      	str	r0, [r7, #28]
        break;
 8003fec:	e009      	b.n	8004002 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ff2:	61fb      	str	r3, [r7, #28]
        break;
 8003ff4:	e005      	b.n	8004002 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004000:	bf00      	nop
    }

    if (pclk != 0U)
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d019      	beq.n	800403c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	085a      	lsrs	r2, r3, #1
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	441a      	add	r2, r3
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	fbb2 f3f3 	udiv	r3, r2, r3
 800401a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	2b0f      	cmp	r3, #15
 8004020:	d909      	bls.n	8004036 <UART_SetConfig+0x546>
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004028:	d205      	bcs.n	8004036 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	b29a      	uxth	r2, r3
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	60da      	str	r2, [r3, #12]
 8004034:	e002      	b.n	800403c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2200      	movs	r2, #0
 8004040:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2200      	movs	r2, #0
 8004046:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004048:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800404c:	4618      	mov	r0, r3
 800404e:	3728      	adds	r7, #40	; 0x28
 8004050:	46bd      	mov	sp, r7
 8004052:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004056:	bf00      	nop
 8004058:	40008000 	.word	0x40008000
 800405c:	00f42400 	.word	0x00f42400

08004060 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406c:	f003 0308 	and.w	r3, r3, #8
 8004070:	2b00      	cmp	r3, #0
 8004072:	d00a      	beq.n	800408a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	430a      	orrs	r2, r1
 8004088:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00a      	beq.n	80040ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	430a      	orrs	r2, r1
 80040aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b0:	f003 0302 	and.w	r3, r3, #2
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d00a      	beq.n	80040ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	430a      	orrs	r2, r1
 80040cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d2:	f003 0304 	and.w	r3, r3, #4
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00a      	beq.n	80040f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	430a      	orrs	r2, r1
 80040ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f4:	f003 0310 	and.w	r3, r3, #16
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d00a      	beq.n	8004112 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	430a      	orrs	r2, r1
 8004110:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004116:	f003 0320 	and.w	r3, r3, #32
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00a      	beq.n	8004134 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	430a      	orrs	r2, r1
 8004132:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800413c:	2b00      	cmp	r3, #0
 800413e:	d01a      	beq.n	8004176 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	430a      	orrs	r2, r1
 8004154:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800415e:	d10a      	bne.n	8004176 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	430a      	orrs	r2, r1
 8004174:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00a      	beq.n	8004198 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	430a      	orrs	r2, r1
 8004196:	605a      	str	r2, [r3, #4]
  }
}
 8004198:	bf00      	nop
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b098      	sub	sp, #96	; 0x60
 80041a8:	af02      	add	r7, sp, #8
 80041aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80041b4:	f7fd f93a 	bl	800142c <HAL_GetTick>
 80041b8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0308 	and.w	r3, r3, #8
 80041c4:	2b08      	cmp	r3, #8
 80041c6:	d12e      	bne.n	8004226 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80041cc:	9300      	str	r3, [sp, #0]
 80041ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041d0:	2200      	movs	r2, #0
 80041d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 f88c 	bl	80042f4 <UART_WaitOnFlagUntilTimeout>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d021      	beq.n	8004226 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ea:	e853 3f00 	ldrex	r3, [r3]
 80041ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80041f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041f6:	653b      	str	r3, [r7, #80]	; 0x50
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	461a      	mov	r2, r3
 80041fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004200:	647b      	str	r3, [r7, #68]	; 0x44
 8004202:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004204:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004206:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004208:	e841 2300 	strex	r3, r2, [r1]
 800420c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800420e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004210:	2b00      	cmp	r3, #0
 8004212:	d1e6      	bne.n	80041e2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2220      	movs	r2, #32
 8004218:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e062      	b.n	80042ec <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0304 	and.w	r3, r3, #4
 8004230:	2b04      	cmp	r3, #4
 8004232:	d149      	bne.n	80042c8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004234:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004238:	9300      	str	r3, [sp, #0]
 800423a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800423c:	2200      	movs	r2, #0
 800423e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f000 f856 	bl	80042f4 <UART_WaitOnFlagUntilTimeout>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d03c      	beq.n	80042c8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004256:	e853 3f00 	ldrex	r3, [r3]
 800425a:	623b      	str	r3, [r7, #32]
   return(result);
 800425c:	6a3b      	ldr	r3, [r7, #32]
 800425e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004262:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	461a      	mov	r2, r3
 800426a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800426c:	633b      	str	r3, [r7, #48]	; 0x30
 800426e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004270:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004272:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004274:	e841 2300 	strex	r3, r2, [r1]
 8004278:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800427a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800427c:	2b00      	cmp	r3, #0
 800427e:	d1e6      	bne.n	800424e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	3308      	adds	r3, #8
 8004286:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	e853 3f00 	ldrex	r3, [r3]
 800428e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f023 0301 	bic.w	r3, r3, #1
 8004296:	64bb      	str	r3, [r7, #72]	; 0x48
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	3308      	adds	r3, #8
 800429e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042a0:	61fa      	str	r2, [r7, #28]
 80042a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a4:	69b9      	ldr	r1, [r7, #24]
 80042a6:	69fa      	ldr	r2, [r7, #28]
 80042a8:	e841 2300 	strex	r3, r2, [r1]
 80042ac:	617b      	str	r3, [r7, #20]
   return(result);
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d1e5      	bne.n	8004280 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2220      	movs	r2, #32
 80042b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e011      	b.n	80042ec <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2220      	movs	r2, #32
 80042cc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2220      	movs	r2, #32
 80042d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80042ea:	2300      	movs	r3, #0
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3758      	adds	r7, #88	; 0x58
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	603b      	str	r3, [r7, #0]
 8004300:	4613      	mov	r3, r2
 8004302:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004304:	e049      	b.n	800439a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800430c:	d045      	beq.n	800439a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800430e:	f7fd f88d 	bl	800142c <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	69ba      	ldr	r2, [r7, #24]
 800431a:	429a      	cmp	r2, r3
 800431c:	d302      	bcc.n	8004324 <UART_WaitOnFlagUntilTimeout+0x30>
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d101      	bne.n	8004328 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e048      	b.n	80043ba <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0304 	and.w	r3, r3, #4
 8004332:	2b00      	cmp	r3, #0
 8004334:	d031      	beq.n	800439a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	69db      	ldr	r3, [r3, #28]
 800433c:	f003 0308 	and.w	r3, r3, #8
 8004340:	2b08      	cmp	r3, #8
 8004342:	d110      	bne.n	8004366 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2208      	movs	r2, #8
 800434a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800434c:	68f8      	ldr	r0, [r7, #12]
 800434e:	f000 f838 	bl	80043c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2208      	movs	r2, #8
 8004356:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e029      	b.n	80043ba <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	69db      	ldr	r3, [r3, #28]
 800436c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004370:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004374:	d111      	bne.n	800439a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800437e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004380:	68f8      	ldr	r0, [r7, #12]
 8004382:	f000 f81e 	bl	80043c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2220      	movs	r2, #32
 800438a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2200      	movs	r2, #0
 8004392:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e00f      	b.n	80043ba <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	69da      	ldr	r2, [r3, #28]
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	4013      	ands	r3, r2
 80043a4:	68ba      	ldr	r2, [r7, #8]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	bf0c      	ite	eq
 80043aa:	2301      	moveq	r3, #1
 80043ac:	2300      	movne	r3, #0
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	461a      	mov	r2, r3
 80043b2:	79fb      	ldrb	r3, [r7, #7]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d0a6      	beq.n	8004306 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3710      	adds	r7, #16
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}

080043c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043c2:	b480      	push	{r7}
 80043c4:	b095      	sub	sp, #84	; 0x54
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043d2:	e853 3f00 	ldrex	r3, [r3]
 80043d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80043d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80043de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	461a      	mov	r2, r3
 80043e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043e8:	643b      	str	r3, [r7, #64]	; 0x40
 80043ea:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80043ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80043f0:	e841 2300 	strex	r3, r2, [r1]
 80043f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80043f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d1e6      	bne.n	80043ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	3308      	adds	r3, #8
 8004402:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004404:	6a3b      	ldr	r3, [r7, #32]
 8004406:	e853 3f00 	ldrex	r3, [r3]
 800440a:	61fb      	str	r3, [r7, #28]
   return(result);
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	f023 0301 	bic.w	r3, r3, #1
 8004412:	64bb      	str	r3, [r7, #72]	; 0x48
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	3308      	adds	r3, #8
 800441a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800441c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800441e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004420:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004422:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004424:	e841 2300 	strex	r3, r2, [r1]
 8004428:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800442a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442c:	2b00      	cmp	r3, #0
 800442e:	d1e5      	bne.n	80043fc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004434:	2b01      	cmp	r3, #1
 8004436:	d118      	bne.n	800446a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	e853 3f00 	ldrex	r3, [r3]
 8004444:	60bb      	str	r3, [r7, #8]
   return(result);
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	f023 0310 	bic.w	r3, r3, #16
 800444c:	647b      	str	r3, [r7, #68]	; 0x44
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	461a      	mov	r2, r3
 8004454:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004456:	61bb      	str	r3, [r7, #24]
 8004458:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800445a:	6979      	ldr	r1, [r7, #20]
 800445c:	69ba      	ldr	r2, [r7, #24]
 800445e:	e841 2300 	strex	r3, r2, [r1]
 8004462:	613b      	str	r3, [r7, #16]
   return(result);
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d1e6      	bne.n	8004438 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2220      	movs	r2, #32
 800446e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800447e:	bf00      	nop
 8004480:	3754      	adds	r7, #84	; 0x54
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
	...

0800448c <acc_rss_activate>:
 800448c:	b510      	push	{r4, lr}
 800448e:	4c18      	ldr	r4, [pc, #96]	; (80044f0 <acc_rss_activate+0x64>)
 8004490:	7823      	ldrb	r3, [r4, #0]
 8004492:	b9c3      	cbnz	r3, 80044c6 <acc_rss_activate+0x3a>
 8004494:	b1a8      	cbz	r0, 80044c2 <acc_rss_activate+0x36>
 8004496:	f001 f8bd 	bl	8005614 <acc_rss_integration_register>
 800449a:	b188      	cbz	r0, 80044c0 <acc_rss_activate+0x34>
 800449c:	f000 fc62 	bl	8004d64 <acc_service_manager_activate>
 80044a0:	b1e8      	cbz	r0, 80044de <acc_rss_activate+0x52>
 80044a2:	f002 fda3 	bl	8006fec <acc_sensor_manager_activate>
 80044a6:	b1d0      	cbz	r0, 80044de <acc_rss_activate+0x52>
 80044a8:	2301      	movs	r3, #1
 80044aa:	7023      	strb	r3, [r4, #0]
 80044ac:	f001 f9b0 	bl	8005810 <acc_rss_integration_log_level>
 80044b0:	2801      	cmp	r0, #1
 80044b2:	d905      	bls.n	80044c0 <acc_rss_activate+0x34>
 80044b4:	4b0f      	ldr	r3, [pc, #60]	; (80044f4 <acc_rss_activate+0x68>)
 80044b6:	4a10      	ldr	r2, [pc, #64]	; (80044f8 <acc_rss_activate+0x6c>)
 80044b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ba:	4910      	ldr	r1, [pc, #64]	; (80044fc <acc_rss_activate+0x70>)
 80044bc:	2002      	movs	r0, #2
 80044be:	4798      	blx	r3
 80044c0:	7823      	ldrb	r3, [r4, #0]
 80044c2:	4618      	mov	r0, r3
 80044c4:	bd10      	pop	{r4, pc}
 80044c6:	f001 f9a3 	bl	8005810 <acc_rss_integration_log_level>
 80044ca:	2801      	cmp	r0, #1
 80044cc:	d9f8      	bls.n	80044c0 <acc_rss_activate+0x34>
 80044ce:	4b09      	ldr	r3, [pc, #36]	; (80044f4 <acc_rss_activate+0x68>)
 80044d0:	4a0b      	ldr	r2, [pc, #44]	; (8004500 <acc_rss_activate+0x74>)
 80044d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044d4:	4909      	ldr	r1, [pc, #36]	; (80044fc <acc_rss_activate+0x70>)
 80044d6:	2002      	movs	r0, #2
 80044d8:	4798      	blx	r3
 80044da:	7823      	ldrb	r3, [r4, #0]
 80044dc:	e7f1      	b.n	80044c2 <acc_rss_activate+0x36>
 80044de:	4b05      	ldr	r3, [pc, #20]	; (80044f4 <acc_rss_activate+0x68>)
 80044e0:	4a08      	ldr	r2, [pc, #32]	; (8004504 <acc_rss_activate+0x78>)
 80044e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044e4:	4905      	ldr	r1, [pc, #20]	; (80044fc <acc_rss_activate+0x70>)
 80044e6:	2000      	movs	r0, #0
 80044e8:	4798      	blx	r3
 80044ea:	7823      	ldrb	r3, [r4, #0]
 80044ec:	4618      	mov	r0, r3
 80044ee:	bd10      	pop	{r4, pc}
 80044f0:	200002f8 	.word	0x200002f8
 80044f4:	200004c0 	.word	0x200004c0
 80044f8:	0800e2b8 	.word	0x0800e2b8
 80044fc:	0800e2d8 	.word	0x0800e2d8
 8004500:	0800e2f4 	.word	0x0800e2f4
 8004504:	0800e2dc 	.word	0x0800e2dc

08004508 <acc_rss_deactivate>:
 8004508:	b510      	push	{r4, lr}
 800450a:	4c0b      	ldr	r4, [pc, #44]	; (8004538 <acc_rss_deactivate+0x30>)
 800450c:	7823      	ldrb	r3, [r4, #0]
 800450e:	b903      	cbnz	r3, 8004512 <acc_rss_deactivate+0xa>
 8004510:	bd10      	pop	{r4, pc}
 8004512:	f000 fcd5 	bl	8004ec0 <acc_service_manager_deactivate>
 8004516:	f002 fda5 	bl	8007064 <acc_sensor_manager_deactivate>
 800451a:	f001 f979 	bl	8005810 <acc_rss_integration_log_level>
 800451e:	2801      	cmp	r0, #1
 8004520:	d905      	bls.n	800452e <acc_rss_deactivate+0x26>
 8004522:	4b06      	ldr	r3, [pc, #24]	; (800453c <acc_rss_deactivate+0x34>)
 8004524:	4a06      	ldr	r2, [pc, #24]	; (8004540 <acc_rss_deactivate+0x38>)
 8004526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004528:	4906      	ldr	r1, [pc, #24]	; (8004544 <acc_rss_deactivate+0x3c>)
 800452a:	2002      	movs	r0, #2
 800452c:	4798      	blx	r3
 800452e:	f001 f8b1 	bl	8005694 <acc_rss_integration_unregister>
 8004532:	2300      	movs	r3, #0
 8004534:	7023      	strb	r3, [r4, #0]
 8004536:	bd10      	pop	{r4, pc}
 8004538:	200002f8 	.word	0x200002f8
 800453c:	200004c0 	.word	0x200004c0
 8004540:	0800e31c 	.word	0x0800e31c
 8004544:	0800e2d8 	.word	0x0800e2d8

08004548 <acc_service_get_base_configuration>:
 8004548:	b510      	push	{r4, lr}
 800454a:	4604      	mov	r4, r0
 800454c:	b108      	cbz	r0, 8004552 <acc_service_get_base_configuration+0xa>
 800454e:	6900      	ldr	r0, [r0, #16]
 8004550:	bd10      	pop	{r4, pc}
 8004552:	f001 f95d 	bl	8005810 <acc_rss_integration_log_level>
 8004556:	2800      	cmp	r0, #0
 8004558:	d0fa      	beq.n	8004550 <acc_service_get_base_configuration+0x8>
 800455a:	4b04      	ldr	r3, [pc, #16]	; (800456c <acc_service_get_base_configuration+0x24>)
 800455c:	4a04      	ldr	r2, [pc, #16]	; (8004570 <acc_service_get_base_configuration+0x28>)
 800455e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004560:	4904      	ldr	r1, [pc, #16]	; (8004574 <acc_service_get_base_configuration+0x2c>)
 8004562:	2001      	movs	r0, #1
 8004564:	4798      	blx	r3
 8004566:	4620      	mov	r0, r4
 8004568:	bd10      	pop	{r4, pc}
 800456a:	bf00      	nop
 800456c:	200004c0 	.word	0x200004c0
 8004570:	0800e340 	.word	0x0800e340
 8004574:	0800e358 	.word	0x0800e358

08004578 <set_maximize_signal_attenuation>:
 8004578:	b570      	push	{r4, r5, r6, lr}
 800457a:	460d      	mov	r5, r1
 800457c:	4606      	mov	r6, r0
 800457e:	f7ff ffe3 	bl	8004548 <acc_service_get_base_configuration>
 8004582:	b158      	cbz	r0, 800459c <set_maximize_signal_attenuation+0x24>
 8004584:	4629      	mov	r1, r5
 8004586:	4604      	mov	r4, r0
 8004588:	f000 ff38 	bl	80053fc <acc_base_configuration_maximize_signal_attenuation_set>
 800458c:	b93d      	cbnz	r5, 800459e <set_maximize_signal_attenuation+0x26>
 800458e:	68b3      	ldr	r3, [r6, #8]
 8004590:	b123      	cbz	r3, 800459c <set_maximize_signal_attenuation+0x24>
 8004592:	7971      	ldrb	r1, [r6, #5]
 8004594:	4630      	mov	r0, r6
 8004596:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800459a:	4718      	bx	r3
 800459c:	bd70      	pop	{r4, r5, r6, pc}
 800459e:	4620      	mov	r0, r4
 80045a0:	210f      	movs	r1, #15
 80045a2:	f000 fe1d 	bl	80051e0 <acc_base_configuration_integrator_set>
 80045a6:	4620      	mov	r0, r4
 80045a8:	2101      	movs	r1, #1
 80045aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80045ae:	f000 be3f 	b.w	8005230 <acc_base_configuration_integrator_ramp_up_set>
 80045b2:	bf00      	nop

080045b4 <acc_service_requested_start_set>:
 80045b4:	b500      	push	{lr}
 80045b6:	b083      	sub	sp, #12
 80045b8:	ed8d 0a01 	vstr	s0, [sp, #4]
 80045bc:	f7ff ffc4 	bl	8004548 <acc_service_get_base_configuration>
 80045c0:	ed9d 0a01 	vldr	s0, [sp, #4]
 80045c4:	b003      	add	sp, #12
 80045c6:	f85d eb04 	ldr.w	lr, [sp], #4
 80045ca:	f000 bcd3 	b.w	8004f74 <acc_base_configuration_requested_start_set>
 80045ce:	bf00      	nop

080045d0 <acc_service_requested_length_set>:
 80045d0:	b500      	push	{lr}
 80045d2:	b083      	sub	sp, #12
 80045d4:	ed8d 0a01 	vstr	s0, [sp, #4]
 80045d8:	f7ff ffb6 	bl	8004548 <acc_service_get_base_configuration>
 80045dc:	ed9d 0a01 	vldr	s0, [sp, #4]
 80045e0:	b003      	add	sp, #12
 80045e2:	f85d eb04 	ldr.w	lr, [sp], #4
 80045e6:	f000 bce1 	b.w	8004fac <acc_base_configuration_requested_length_set>
 80045ea:	bf00      	nop

080045ec <acc_service_pipeline_destroy>:
 80045ec:	b510      	push	{r4, lr}
 80045ee:	4604      	mov	r4, r0
 80045f0:	6900      	ldr	r0, [r0, #16]
 80045f2:	b118      	cbz	r0, 80045fc <acc_service_pipeline_destroy+0x10>
 80045f4:	68c3      	ldr	r3, [r0, #12]
 80045f6:	4798      	blx	r3
 80045f8:	2300      	movs	r3, #0
 80045fa:	6123      	str	r3, [r4, #16]
 80045fc:	bd10      	pop	{r4, pc}
 80045fe:	bf00      	nop

08004600 <acc_service_send_data>:
 8004600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004602:	9e06      	ldr	r6, [sp, #24]
 8004604:	6944      	ldr	r4, [r0, #20]
 8004606:	7835      	ldrb	r5, [r6, #0]
 8004608:	461f      	mov	r7, r3
 800460a:	b91d      	cbnz	r5, 8004614 <acc_service_send_data+0x14>
 800460c:	7ea5      	ldrb	r5, [r4, #26]
 800460e:	b95d      	cbnz	r5, 8004628 <acc_service_send_data+0x28>
 8004610:	68a3      	ldr	r3, [r4, #8]
 8004612:	6019      	str	r1, [r3, #0]
 8004614:	6920      	ldr	r0, [r4, #16]
 8004616:	7665      	strb	r5, [r4, #25]
 8004618:	b128      	cbz	r0, 8004626 <acc_service_send_data+0x26>
 800461a:	6962      	ldr	r2, [r4, #20]
 800461c:	4639      	mov	r1, r7
 800461e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004622:	f008 bd27 	b.w	800d074 <memcpy>
 8004626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004628:	68e3      	ldr	r3, [r4, #12]
 800462a:	6860      	ldr	r0, [r4, #4]
 800462c:	429a      	cmp	r2, r3
 800462e:	bf28      	it	cs
 8004630:	461a      	movcs	r2, r3
 8004632:	f008 fd1f 	bl	800d074 <memcpy>
 8004636:	7835      	ldrb	r5, [r6, #0]
 8004638:	e7ec      	b.n	8004614 <acc_service_send_data+0x14>
 800463a:	bf00      	nop

0800463c <acc_service_set_module_active>:
 800463c:	4b01      	ldr	r3, [pc, #4]	; (8004644 <acc_service_set_module_active+0x8>)
 800463e:	7018      	strb	r0, [r3, #0]
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop
 8004644:	200002f9 	.word	0x200002f9

08004648 <acc_service_handle_valid>:
 8004648:	b508      	push	{r3, lr}
 800464a:	b118      	cbz	r0, 8004654 <acc_service_handle_valid+0xc>
 800464c:	6802      	ldr	r2, [r0, #0]
 800464e:	4b06      	ldr	r3, [pc, #24]	; (8004668 <acc_service_handle_valid+0x20>)
 8004650:	429a      	cmp	r2, r3
 8004652:	d007      	beq.n	8004664 <acc_service_handle_valid+0x1c>
 8004654:	4b05      	ldr	r3, [pc, #20]	; (800466c <acc_service_handle_valid+0x24>)
 8004656:	4a06      	ldr	r2, [pc, #24]	; (8004670 <acc_service_handle_valid+0x28>)
 8004658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800465a:	4906      	ldr	r1, [pc, #24]	; (8004674 <acc_service_handle_valid+0x2c>)
 800465c:	2000      	movs	r0, #0
 800465e:	4798      	blx	r3
 8004660:	2000      	movs	r0, #0
 8004662:	bd08      	pop	{r3, pc}
 8004664:	2001      	movs	r0, #1
 8004666:	bd08      	pop	{r3, pc}
 8004668:	acc09ee8 	.word	0xacc09ee8
 800466c:	200004c0 	.word	0x200004c0
 8004670:	0800e360 	.word	0x0800e360
 8004674:	0800e358 	.word	0x0800e358

08004678 <acc_service_activate>:
 8004678:	b570      	push	{r4, r5, r6, lr}
 800467a:	4604      	mov	r4, r0
 800467c:	f7ff ffe4 	bl	8004648 <acc_service_handle_valid>
 8004680:	b1b0      	cbz	r0, 80046b0 <acc_service_activate+0x38>
 8004682:	4b19      	ldr	r3, [pc, #100]	; (80046e8 <acc_service_activate+0x70>)
 8004684:	7818      	ldrb	r0, [r3, #0]
 8004686:	b198      	cbz	r0, 80046b0 <acc_service_activate+0x38>
 8004688:	7a63      	ldrb	r3, [r4, #9]
 800468a:	b903      	cbnz	r3, 800468e <acc_service_activate+0x16>
 800468c:	bd70      	pop	{r4, r5, r6, pc}
 800468e:	6863      	ldr	r3, [r4, #4]
 8004690:	2b2a      	cmp	r3, #42	; 0x2a
 8004692:	d80d      	bhi.n	80046b0 <acc_service_activate+0x38>
 8004694:	4d15      	ldr	r5, [pc, #84]	; (80046ec <acc_service_activate+0x74>)
 8004696:	f815 2013 	ldrb.w	r2, [r5, r3, lsl #1]
 800469a:	b94a      	cbnz	r2, 80046b0 <acc_service_activate+0x38>
 800469c:	eb05 0243 	add.w	r2, r5, r3, lsl #1
 80046a0:	2101      	movs	r1, #1
 80046a2:	7856      	ldrb	r6, [r2, #1]
 80046a4:	f805 1013 	strb.w	r1, [r5, r3, lsl #1]
 80046a8:	b156      	cbz	r6, 80046c0 <acc_service_activate+0x48>
 80046aa:	2200      	movs	r2, #0
 80046ac:	f805 2013 	strb.w	r2, [r5, r3, lsl #1]
 80046b0:	4b0f      	ldr	r3, [pc, #60]	; (80046f0 <acc_service_activate+0x78>)
 80046b2:	4a10      	ldr	r2, [pc, #64]	; (80046f4 <acc_service_activate+0x7c>)
 80046b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046b6:	4910      	ldr	r1, [pc, #64]	; (80046f8 <acc_service_activate+0x80>)
 80046b8:	2000      	movs	r0, #0
 80046ba:	4798      	blx	r3
 80046bc:	2000      	movs	r0, #0
 80046be:	bd70      	pop	{r4, r5, r6, pc}
 80046c0:	f104 0018 	add.w	r0, r4, #24
 80046c4:	f002 fe38 	bl	8007338 <acc_sensor_manager_start_measurement>
 80046c8:	6863      	ldr	r3, [r4, #4]
 80046ca:	b910      	cbnz	r0, 80046d2 <acc_service_activate+0x5a>
 80046cc:	2b2a      	cmp	r3, #42	; 0x2a
 80046ce:	d8ef      	bhi.n	80046b0 <acc_service_activate+0x38>
 80046d0:	e7eb      	b.n	80046aa <acc_service_activate+0x32>
 80046d2:	2b2a      	cmp	r3, #42	; 0x2a
 80046d4:	d805      	bhi.n	80046e2 <acc_service_activate+0x6a>
 80046d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80046da:	7266      	strb	r6, [r4, #9]
 80046dc:	f825 2013 	strh.w	r2, [r5, r3, lsl #1]
 80046e0:	bd70      	pop	{r4, r5, r6, pc}
 80046e2:	7266      	strb	r6, [r4, #9]
 80046e4:	bd70      	pop	{r4, r5, r6, pc}
 80046e6:	bf00      	nop
 80046e8:	200002f9 	.word	0x200002f9
 80046ec:	200002fc 	.word	0x200002fc
 80046f0:	200004c0 	.word	0x200004c0
 80046f4:	0800e370 	.word	0x0800e370
 80046f8:	0800e358 	.word	0x0800e358

080046fc <acc_service_deactivate>:
 80046fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004700:	4605      	mov	r5, r0
 8004702:	f7ff ffa1 	bl	8004648 <acc_service_handle_valid>
 8004706:	b110      	cbz	r0, 800470e <acc_service_deactivate+0x12>
 8004708:	4b16      	ldr	r3, [pc, #88]	; (8004764 <acc_service_deactivate+0x68>)
 800470a:	781c      	ldrb	r4, [r3, #0]
 800470c:	b94c      	cbnz	r4, 8004722 <acc_service_deactivate+0x26>
 800470e:	4b16      	ldr	r3, [pc, #88]	; (8004768 <acc_service_deactivate+0x6c>)
 8004710:	4a16      	ldr	r2, [pc, #88]	; (800476c <acc_service_deactivate+0x70>)
 8004712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004714:	4916      	ldr	r1, [pc, #88]	; (8004770 <acc_service_deactivate+0x74>)
 8004716:	2000      	movs	r0, #0
 8004718:	4798      	blx	r3
 800471a:	2400      	movs	r4, #0
 800471c:	4620      	mov	r0, r4
 800471e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004722:	7a6b      	ldrb	r3, [r5, #9]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d1f9      	bne.n	800471c <acc_service_deactivate+0x20>
 8004728:	686b      	ldr	r3, [r5, #4]
 800472a:	2b2a      	cmp	r3, #42	; 0x2a
 800472c:	d8ef      	bhi.n	800470e <acc_service_deactivate+0x12>
 800472e:	4e11      	ldr	r6, [pc, #68]	; (8004774 <acc_service_deactivate+0x78>)
 8004730:	f816 7013 	ldrb.w	r7, [r6, r3, lsl #1]
 8004734:	2f00      	cmp	r7, #0
 8004736:	d1ea      	bne.n	800470e <acc_service_deactivate+0x12>
 8004738:	f04f 0801 	mov.w	r8, #1
 800473c:	f105 0018 	add.w	r0, r5, #24
 8004740:	f806 8013 	strb.w	r8, [r6, r3, lsl #1]
 8004744:	f002 fe32 	bl	80073ac <acc_sensor_manager_stop_measurement>
 8004748:	686b      	ldr	r3, [r5, #4]
 800474a:	2b2a      	cmp	r3, #42	; 0x2a
 800474c:	d807      	bhi.n	800475e <acc_service_deactivate+0x62>
 800474e:	eb06 0243 	add.w	r2, r6, r3, lsl #1
 8004752:	7057      	strb	r7, [r2, #1]
 8004754:	f885 8009 	strb.w	r8, [r5, #9]
 8004758:	f806 7013 	strb.w	r7, [r6, r3, lsl #1]
 800475c:	e7de      	b.n	800471c <acc_service_deactivate+0x20>
 800475e:	f885 8009 	strb.w	r8, [r5, #9]
 8004762:	e7db      	b.n	800471c <acc_service_deactivate+0x20>
 8004764:	200002f9 	.word	0x200002f9
 8004768:	200004c0 	.word	0x200004c0
 800476c:	0800e38c 	.word	0x0800e38c
 8004770:	0800e358 	.word	0x0800e358
 8004774:	200002fc 	.word	0x200002fc

08004778 <acc_service_get_next>:
 8004778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800477c:	460c      	mov	r4, r1
 800477e:	b082      	sub	sp, #8
 8004780:	4606      	mov	r6, r0
 8004782:	f7ff ff61 	bl	8004648 <acc_service_handle_valid>
 8004786:	7ea5      	ldrb	r5, [r4, #26]
 8004788:	b175      	cbz	r5, 80047a8 <acc_service_get_next+0x30>
 800478a:	6863      	ldr	r3, [r4, #4]
 800478c:	b10b      	cbz	r3, 8004792 <acc_service_get_next+0x1a>
 800478e:	68e3      	ldr	r3, [r4, #12]
 8004790:	b96b      	cbnz	r3, 80047ae <acc_service_get_next+0x36>
 8004792:	4b29      	ldr	r3, [pc, #164]	; (8004838 <acc_service_get_next+0xc0>)
 8004794:	4a29      	ldr	r2, [pc, #164]	; (800483c <acc_service_get_next+0xc4>)
 8004796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004798:	4929      	ldr	r1, [pc, #164]	; (8004840 <acc_service_get_next+0xc8>)
 800479a:	2000      	movs	r0, #0
 800479c:	4798      	blx	r3
 800479e:	2500      	movs	r5, #0
 80047a0:	4628      	mov	r0, r5
 80047a2:	b002      	add	sp, #8
 80047a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047a8:	68a3      	ldr	r3, [r4, #8]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d033      	beq.n	8004816 <acc_service_get_next+0x9e>
 80047ae:	b920      	cbnz	r0, 80047ba <acc_service_get_next+0x42>
 80047b0:	2500      	movs	r5, #0
 80047b2:	4628      	mov	r0, r5
 80047b4:	b002      	add	sp, #8
 80047b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047ba:	7a33      	ldrb	r3, [r6, #8]
 80047bc:	7822      	ldrb	r2, [r4, #0]
 80047be:	4293      	cmp	r3, r2
 80047c0:	d007      	beq.n	80047d2 <acc_service_get_next+0x5a>
 80047c2:	491d      	ldr	r1, [pc, #116]	; (8004838 <acc_service_get_next+0xc0>)
 80047c4:	9200      	str	r2, [sp, #0]
 80047c6:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 80047c8:	4a1e      	ldr	r2, [pc, #120]	; (8004844 <acc_service_get_next+0xcc>)
 80047ca:	491d      	ldr	r1, [pc, #116]	; (8004840 <acc_service_get_next+0xc8>)
 80047cc:	2000      	movs	r0, #0
 80047ce:	47a0      	blx	r4
 80047d0:	e7ee      	b.n	80047b0 <acc_service_get_next+0x38>
 80047d2:	7e27      	ldrb	r7, [r4, #24]
 80047d4:	bb4f      	cbnz	r7, 800482a <acc_service_get_next+0xb2>
 80047d6:	f896 8009 	ldrb.w	r8, [r6, #9]
 80047da:	f1b8 0f00 	cmp.w	r8, #0
 80047de:	d00f      	beq.n	8004800 <acc_service_get_next+0x88>
 80047e0:	4b15      	ldr	r3, [pc, #84]	; (8004838 <acc_service_get_next+0xc0>)
 80047e2:	4a19      	ldr	r2, [pc, #100]	; (8004848 <acc_service_get_next+0xd0>)
 80047e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047e6:	4916      	ldr	r1, [pc, #88]	; (8004840 <acc_service_get_next+0xc8>)
 80047e8:	2000      	movs	r0, #0
 80047ea:	4798      	blx	r3
 80047ec:	2500      	movs	r5, #0
 80047ee:	2f00      	cmp	r7, #0
 80047f0:	d0df      	beq.n	80047b2 <acc_service_get_next+0x3a>
 80047f2:	4630      	mov	r0, r6
 80047f4:	f7ff ff82 	bl	80046fc <acc_service_deactivate>
 80047f8:	4628      	mov	r0, r5
 80047fa:	b002      	add	sp, #8
 80047fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004800:	6933      	ldr	r3, [r6, #16]
 8004802:	6174      	str	r4, [r6, #20]
 8004804:	e9d3 0200 	ldrd	r0, r2, [r3]
 8004808:	4790      	blx	r2
 800480a:	7e65      	ldrb	r5, [r4, #25]
 800480c:	f8c6 8014 	str.w	r8, [r6, #20]
 8004810:	f085 0501 	eor.w	r5, r5, #1
 8004814:	e7eb      	b.n	80047ee <acc_service_get_next+0x76>
 8004816:	4b08      	ldr	r3, [pc, #32]	; (8004838 <acc_service_get_next+0xc0>)
 8004818:	4a0c      	ldr	r2, [pc, #48]	; (800484c <acc_service_get_next+0xd4>)
 800481a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800481c:	4908      	ldr	r1, [pc, #32]	; (8004840 <acc_service_get_next+0xc8>)
 800481e:	4628      	mov	r0, r5
 8004820:	4798      	blx	r3
 8004822:	4628      	mov	r0, r5
 8004824:	b002      	add	sp, #8
 8004826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800482a:	4630      	mov	r0, r6
 800482c:	f7ff ff24 	bl	8004678 <acc_service_activate>
 8004830:	4607      	mov	r7, r0
 8004832:	2800      	cmp	r0, #0
 8004834:	d1cf      	bne.n	80047d6 <acc_service_get_next+0x5e>
 8004836:	e7bb      	b.n	80047b0 <acc_service_get_next+0x38>
 8004838:	200004c0 	.word	0x200004c0
 800483c:	0800e3a8 	.word	0x0800e3a8
 8004840:	0800e358 	.word	0x0800e358
 8004844:	0800e3e0 	.word	0x0800e3e0
 8004848:	0800e3fc 	.word	0x0800e3fc
 800484c:	0800e3c8 	.word	0x0800e3c8

08004850 <acc_service_configuration_valid>:
 8004850:	b508      	push	{r3, lr}
 8004852:	b118      	cbz	r0, 800485c <acc_service_configuration_valid+0xc>
 8004854:	4b09      	ldr	r3, [pc, #36]	; (800487c <acc_service_configuration_valid+0x2c>)
 8004856:	6802      	ldr	r2, [r0, #0]
 8004858:	429a      	cmp	r2, r3
 800485a:	d007      	beq.n	800486c <acc_service_configuration_valid+0x1c>
 800485c:	4b08      	ldr	r3, [pc, #32]	; (8004880 <acc_service_configuration_valid+0x30>)
 800485e:	4a09      	ldr	r2, [pc, #36]	; (8004884 <acc_service_configuration_valid+0x34>)
 8004860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004862:	4909      	ldr	r1, [pc, #36]	; (8004888 <acc_service_configuration_valid+0x38>)
 8004864:	2000      	movs	r0, #0
 8004866:	4798      	blx	r3
 8004868:	2000      	movs	r0, #0
 800486a:	bd08      	pop	{r3, pc}
 800486c:	8b03      	ldrh	r3, [r0, #24]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d0f4      	beq.n	800485c <acc_service_configuration_valid+0xc>
 8004872:	6943      	ldr	r3, [r0, #20]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d0f1      	beq.n	800485c <acc_service_configuration_valid+0xc>
 8004878:	2001      	movs	r0, #1
 800487a:	bd08      	pop	{r3, pc}
 800487c:	acc09dd7 	.word	0xacc09dd7
 8004880:	200004c0 	.word	0x200004c0
 8004884:	0800e340 	.word	0x0800e340
 8004888:	0800e358 	.word	0x0800e358

0800488c <acc_service_configuration_check>:
 800488c:	b510      	push	{r4, lr}
 800488e:	4604      	mov	r4, r0
 8004890:	f7ff ffde 	bl	8004850 <acc_service_configuration_valid>
 8004894:	b118      	cbz	r0, 800489e <acc_service_configuration_check+0x12>
 8004896:	7963      	ldrb	r3, [r4, #5]
 8004898:	3b01      	subs	r3, #1
 800489a:	2b04      	cmp	r3, #4
 800489c:	d800      	bhi.n	80048a0 <acc_service_configuration_check+0x14>
 800489e:	bd10      	pop	{r4, pc}
 80048a0:	4b03      	ldr	r3, [pc, #12]	; (80048b0 <acc_service_configuration_check+0x24>)
 80048a2:	4a04      	ldr	r2, [pc, #16]	; (80048b4 <acc_service_configuration_check+0x28>)
 80048a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048a6:	4904      	ldr	r1, [pc, #16]	; (80048b8 <acc_service_configuration_check+0x2c>)
 80048a8:	2000      	movs	r0, #0
 80048aa:	4798      	blx	r3
 80048ac:	2000      	movs	r0, #0
 80048ae:	bd10      	pop	{r4, pc}
 80048b0:	200004c0 	.word	0x200004c0
 80048b4:	0800e414 	.word	0x0800e414
 80048b8:	0800e358 	.word	0x0800e358

080048bc <acc_service_profile_set>:
 80048bc:	b510      	push	{r4, lr}
 80048be:	b138      	cbz	r0, 80048d0 <acc_service_profile_set+0x14>
 80048c0:	6882      	ldr	r2, [r0, #8]
 80048c2:	4604      	mov	r4, r0
 80048c4:	b122      	cbz	r2, 80048d0 <acc_service_profile_set+0x14>
 80048c6:	7141      	strb	r1, [r0, #5]
 80048c8:	4790      	blx	r2
 80048ca:	7b23      	ldrb	r3, [r4, #12]
 80048cc:	b963      	cbnz	r3, 80048e8 <acc_service_profile_set+0x2c>
 80048ce:	bd10      	pop	{r4, pc}
 80048d0:	f000 ff9e 	bl	8005810 <acc_rss_integration_log_level>
 80048d4:	2800      	cmp	r0, #0
 80048d6:	d0fa      	beq.n	80048ce <acc_service_profile_set+0x12>
 80048d8:	4b06      	ldr	r3, [pc, #24]	; (80048f4 <acc_service_profile_set+0x38>)
 80048da:	4a07      	ldr	r2, [pc, #28]	; (80048f8 <acc_service_profile_set+0x3c>)
 80048dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048de:	4907      	ldr	r1, [pc, #28]	; (80048fc <acc_service_profile_set+0x40>)
 80048e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048e4:	2001      	movs	r0, #1
 80048e6:	4718      	bx	r3
 80048e8:	4620      	mov	r0, r4
 80048ea:	2101      	movs	r1, #1
 80048ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048f0:	f7ff be42 	b.w	8004578 <set_maximize_signal_attenuation>
 80048f4:	200004c0 	.word	0x200004c0
 80048f8:	0800e340 	.word	0x0800e340
 80048fc:	0800e358 	.word	0x0800e358

08004900 <acc_service_maximize_signal_attenuation_set>:
 8004900:	b110      	cbz	r0, 8004908 <acc_service_maximize_signal_attenuation_set+0x8>
 8004902:	7301      	strb	r1, [r0, #12]
 8004904:	f7ff be38 	b.w	8004578 <set_maximize_signal_attenuation>
 8004908:	b510      	push	{r4, lr}
 800490a:	f000 ff81 	bl	8005810 <acc_rss_integration_log_level>
 800490e:	b138      	cbz	r0, 8004920 <acc_service_maximize_signal_attenuation_set+0x20>
 8004910:	4b04      	ldr	r3, [pc, #16]	; (8004924 <acc_service_maximize_signal_attenuation_set+0x24>)
 8004912:	4a05      	ldr	r2, [pc, #20]	; (8004928 <acc_service_maximize_signal_attenuation_set+0x28>)
 8004914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004916:	4905      	ldr	r1, [pc, #20]	; (800492c <acc_service_maximize_signal_attenuation_set+0x2c>)
 8004918:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800491c:	2001      	movs	r0, #1
 800491e:	4718      	bx	r3
 8004920:	bd10      	pop	{r4, pc}
 8004922:	bf00      	nop
 8004924:	200004c0 	.word	0x200004c0
 8004928:	0800e340 	.word	0x0800e340
 800492c:	0800e358 	.word	0x0800e358

08004930 <acc_service_initialize_service_configuration>:
 8004930:	b538      	push	{r3, r4, r5, lr}
 8004932:	7101      	strb	r1, [r0, #4]
 8004934:	6102      	str	r2, [r0, #16]
 8004936:	9905      	ldr	r1, [sp, #20]
 8004938:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 800493c:	4d07      	ldr	r5, [pc, #28]	; (800495c <acc_service_initialize_service_configuration+0x2c>)
 800493e:	6143      	str	r3, [r0, #20]
 8004940:	4604      	mov	r4, r0
 8004942:	6005      	str	r5, [r0, #0]
 8004944:	6081      	str	r1, [r0, #8]
 8004946:	8302      	strh	r2, [r0, #24]
 8004948:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800494c:	f7ff ffb6 	bl	80048bc <acc_service_profile_set>
 8004950:	4620      	mov	r0, r4
 8004952:	2100      	movs	r1, #0
 8004954:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004958:	f7ff bfd2 	b.w	8004900 <acc_service_maximize_signal_attenuation_set>
 800495c:	acc09dd7 	.word	0xacc09dd7

08004960 <envelope_send_data>:
 8004960:	b570      	push	{r4, r5, r6, lr}
 8004962:	460b      	mov	r3, r1
 8004964:	b084      	sub	sp, #16
 8004966:	ac02      	add	r4, sp, #8
 8004968:	4601      	mov	r1, r0
 800496a:	4610      	mov	r0, r2
 800496c:	795a      	ldrb	r2, [r3, #5]
 800496e:	9400      	str	r4, [sp, #0]
 8004970:	791e      	ldrb	r6, [r3, #4]
 8004972:	79dd      	ldrb	r5, [r3, #7]
 8004974:	799c      	ldrb	r4, [r3, #6]
 8004976:	f88d 200d 	strb.w	r2, [sp, #13]
 800497a:	f88d 2008 	strb.w	r2, [sp, #8]
 800497e:	691a      	ldr	r2, [r3, #16]
 8004980:	f88d 600e 	strb.w	r6, [sp, #14]
 8004984:	ab03      	add	r3, sp, #12
 8004986:	f88d 500f 	strb.w	r5, [sp, #15]
 800498a:	f88d 400c 	strb.w	r4, [sp, #12]
 800498e:	f7ff fe37 	bl	8004600 <acc_service_send_data>
 8004992:	b004      	add	sp, #16
 8004994:	bd70      	pop	{r4, r5, r6, pc}
 8004996:	bf00      	nop

08004998 <envelope_create_service>:
 8004998:	b570      	push	{r4, r5, r6, lr}
 800499a:	b0a4      	sub	sp, #144	; 0x90
 800499c:	2288      	movs	r2, #136	; 0x88
 800499e:	4604      	mov	r4, r0
 80049a0:	a802      	add	r0, sp, #8
 80049a2:	460d      	mov	r5, r1
 80049a4:	f008 fb66 	bl	800d074 <memcpy>
 80049a8:	a809      	add	r0, sp, #36	; 0x24
 80049aa:	f000 fcc3 	bl	8005334 <acc_base_configuration_downsampling_factor_get>
 80049ae:	ee07 0a90 	vmov	s15, r0
 80049b2:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80049b6:	eddd 7a23 	vldr	s15, [sp, #140]	; 0x8c
 80049ba:	a809      	add	r0, sp, #36	; 0x24
 80049bc:	ee20 0a27 	vmul.f32	s0, s0, s15
 80049c0:	f000 fbb2 	bl	8005128 <acc_base_configuration_demodulation_filter_cutoff_freq_ratio_set>
 80049c4:	a802      	add	r0, sp, #8
 80049c6:	f7ff ff61 	bl	800488c <acc_service_configuration_check>
 80049ca:	b1c0      	cbz	r0, 80049fe <envelope_create_service+0x66>
 80049cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80049ce:	2b04      	cmp	r3, #4
 80049d0:	d00f      	beq.n	80049f2 <envelope_create_service+0x5a>
 80049d2:	a809      	add	r0, sp, #36	; 0x24
 80049d4:	f000 fdb8 	bl	8005548 <acc_base_configuration_check>
 80049d8:	b188      	cbz	r0, 80049fe <envelope_create_service+0x66>
 80049da:	a809      	add	r0, sp, #36	; 0x24
 80049dc:	f000 fcaa 	bl	8005334 <acc_base_configuration_downsampling_factor_get>
 80049e0:	1e43      	subs	r3, r0, #1
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d90d      	bls.n	8004a04 <envelope_create_service+0x6c>
 80049e8:	2804      	cmp	r0, #4
 80049ea:	d00b      	beq.n	8004a04 <envelope_create_service+0x6c>
 80049ec:	4b1a      	ldr	r3, [pc, #104]	; (8004a58 <envelope_create_service+0xc0>)
 80049ee:	4a1b      	ldr	r2, [pc, #108]	; (8004a5c <envelope_create_service+0xc4>)
 80049f0:	e001      	b.n	80049f6 <envelope_create_service+0x5e>
 80049f2:	4b19      	ldr	r3, [pc, #100]	; (8004a58 <envelope_create_service+0xc0>)
 80049f4:	4a1a      	ldr	r2, [pc, #104]	; (8004a60 <envelope_create_service+0xc8>)
 80049f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049f8:	491a      	ldr	r1, [pc, #104]	; (8004a64 <envelope_create_service+0xcc>)
 80049fa:	2000      	movs	r0, #0
 80049fc:	4798      	blx	r3
 80049fe:	2000      	movs	r0, #0
 8004a00:	b024      	add	sp, #144	; 0x90
 8004a02:	bd70      	pop	{r4, r5, r6, pc}
 8004a04:	2200      	movs	r2, #0
 8004a06:	4611      	mov	r1, r2
 8004a08:	a809      	add	r0, sp, #36	; 0x24
 8004a0a:	f000 fd01 	bl	8005410 <acc_base_configuration_cca_get>
 8004a0e:	2100      	movs	r1, #0
 8004a10:	4606      	mov	r6, r0
 8004a12:	a809      	add	r0, sp, #36	; 0x24
 8004a14:	f000 fb4e 	bl	80050b4 <acc_base_configuration_time_domain_low_pass_filter_alpha_get>
 8004a18:	b106      	cbz	r6, 8004a1c <envelope_create_service+0x84>
 8004a1a:	b990      	cbnz	r0, 8004a42 <envelope_create_service+0xaa>
 8004a1c:	792b      	ldrb	r3, [r5, #4]
 8004a1e:	7223      	strb	r3, [r4, #8]
 8004a20:	4b11      	ldr	r3, [pc, #68]	; (8004a68 <envelope_create_service+0xd0>)
 8004a22:	9301      	str	r3, [sp, #4]
 8004a24:	aa09      	add	r2, sp, #36	; 0x24
 8004a26:	4623      	mov	r3, r4
 8004a28:	a901      	add	r1, sp, #4
 8004a2a:	f104 0018 	add.w	r0, r4, #24
 8004a2e:	f000 ff21 	bl	8005874 <acc_pipeline_envelope_assemble>
 8004a32:	4b0e      	ldr	r3, [pc, #56]	; (8004a6c <envelope_create_service+0xd4>)
 8004a34:	6120      	str	r0, [r4, #16]
 8004a36:	3800      	subs	r0, #0
 8004a38:	bf18      	it	ne
 8004a3a:	2001      	movne	r0, #1
 8004a3c:	60e3      	str	r3, [r4, #12]
 8004a3e:	b024      	add	sp, #144	; 0x90
 8004a40:	bd70      	pop	{r4, r5, r6, pc}
 8004a42:	f000 fee5 	bl	8005810 <acc_rss_integration_log_level>
 8004a46:	2800      	cmp	r0, #0
 8004a48:	d0e8      	beq.n	8004a1c <envelope_create_service+0x84>
 8004a4a:	4b03      	ldr	r3, [pc, #12]	; (8004a58 <envelope_create_service+0xc0>)
 8004a4c:	4a08      	ldr	r2, [pc, #32]	; (8004a70 <envelope_create_service+0xd8>)
 8004a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a50:	4904      	ldr	r1, [pc, #16]	; (8004a64 <envelope_create_service+0xcc>)
 8004a52:	2001      	movs	r0, #1
 8004a54:	4798      	blx	r3
 8004a56:	e7e1      	b.n	8004a1c <envelope_create_service+0x84>
 8004a58:	200004c0 	.word	0x200004c0
 8004a5c:	0800e47c 	.word	0x0800e47c
 8004a60:	0800e42c 	.word	0x0800e42c
 8004a64:	0800e468 	.word	0x0800e468
 8004a68:	08004961 	.word	0x08004961
 8004a6c:	080045ed 	.word	0x080045ed
 8004a70:	0800e49c 	.word	0x0800e49c

08004a74 <get_and_validate_envelope_configuration>:
 8004a74:	b510      	push	{r4, lr}
 8004a76:	4604      	mov	r4, r0
 8004a78:	f7ff feea 	bl	8004850 <acc_service_configuration_valid>
 8004a7c:	b108      	cbz	r0, 8004a82 <get_and_validate_envelope_configuration+0xe>
 8004a7e:	7923      	ldrb	r3, [r4, #4]
 8004a80:	b153      	cbz	r3, 8004a98 <get_and_validate_envelope_configuration+0x24>
 8004a82:	f000 fec5 	bl	8005810 <acc_rss_integration_log_level>
 8004a86:	b130      	cbz	r0, 8004a96 <get_and_validate_envelope_configuration+0x22>
 8004a88:	4b04      	ldr	r3, [pc, #16]	; (8004a9c <get_and_validate_envelope_configuration+0x28>)
 8004a8a:	4a05      	ldr	r2, [pc, #20]	; (8004aa0 <get_and_validate_envelope_configuration+0x2c>)
 8004a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a8e:	4905      	ldr	r1, [pc, #20]	; (8004aa4 <get_and_validate_envelope_configuration+0x30>)
 8004a90:	2001      	movs	r0, #1
 8004a92:	4798      	blx	r3
 8004a94:	2000      	movs	r0, #0
 8004a96:	bd10      	pop	{r4, pc}
 8004a98:	4620      	mov	r0, r4
 8004a9a:	bd10      	pop	{r4, pc}
 8004a9c:	200004c0 	.word	0x200004c0
 8004aa0:	0800e340 	.word	0x0800e340
 8004aa4:	0800e468 	.word	0x0800e468

08004aa8 <set_configuration_for_profile>:
 8004aa8:	b530      	push	{r4, r5, lr}
 8004aaa:	b083      	sub	sp, #12
 8004aac:	460c      	mov	r4, r1
 8004aae:	f7ff ffe1 	bl	8004a74 <get_and_validate_envelope_configuration>
 8004ab2:	b1c0      	cbz	r0, 8004ae6 <set_configuration_for_profile+0x3e>
 8004ab4:	1e61      	subs	r1, r4, #1
 8004ab6:	4605      	mov	r5, r0
 8004ab8:	301c      	adds	r0, #28
 8004aba:	2904      	cmp	r1, #4
 8004abc:	d813      	bhi.n	8004ae6 <set_configuration_for_profile+0x3e>
 8004abe:	e8df f001 	tbb	[pc, r1]
 8004ac2:	2514      	.short	0x2514
 8004ac4:	3836      	.short	0x3836
 8004ac6:	03          	.byte	0x03
 8004ac7:	00          	.byte	0x00
 8004ac8:	2110      	movs	r1, #16
 8004aca:	9001      	str	r0, [sp, #4]
 8004acc:	f000 fb9c 	bl	8005208 <acc_base_configuration_wg_duration_set>
 8004ad0:	9801      	ldr	r0, [sp, #4]
 8004ad2:	2106      	movs	r1, #6
 8004ad4:	f000 fb84 	bl	80051e0 <acc_base_configuration_integrator_set>
 8004ad8:	9801      	ldr	r0, [sp, #4]
 8004ada:	2101      	movs	r1, #1
 8004adc:	f000 fba8 	bl	8005230 <acc_base_configuration_integrator_ramp_up_set>
 8004ae0:	4b15      	ldr	r3, [pc, #84]	; (8004b38 <set_configuration_for_profile+0x90>)
 8004ae2:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
 8004ae6:	b003      	add	sp, #12
 8004ae8:	bd30      	pop	{r4, r5, pc}
 8004aea:	2100      	movs	r1, #0
 8004aec:	9001      	str	r0, [sp, #4]
 8004aee:	f000 fb8b 	bl	8005208 <acc_base_configuration_wg_duration_set>
 8004af2:	9801      	ldr	r0, [sp, #4]
 8004af4:	2100      	movs	r1, #0
 8004af6:	f000 fb73 	bl	80051e0 <acc_base_configuration_integrator_set>
 8004afa:	9801      	ldr	r0, [sp, #4]
 8004afc:	2103      	movs	r1, #3
 8004afe:	f000 fb97 	bl	8005230 <acc_base_configuration_integrator_ramp_up_set>
 8004b02:	4b0e      	ldr	r3, [pc, #56]	; (8004b3c <set_configuration_for_profile+0x94>)
 8004b04:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
 8004b08:	b003      	add	sp, #12
 8004b0a:	bd30      	pop	{r4, r5, pc}
 8004b0c:	2107      	movs	r1, #7
 8004b0e:	9001      	str	r0, [sp, #4]
 8004b10:	f000 fb7a 	bl	8005208 <acc_base_configuration_wg_duration_set>
 8004b14:	9801      	ldr	r0, [sp, #4]
 8004b16:	2106      	movs	r1, #6
 8004b18:	f000 fb62 	bl	80051e0 <acc_base_configuration_integrator_set>
 8004b1c:	9801      	ldr	r0, [sp, #4]
 8004b1e:	2109      	movs	r1, #9
 8004b20:	f000 fb86 	bl	8005230 <acc_base_configuration_integrator_ramp_up_set>
 8004b24:	4b04      	ldr	r3, [pc, #16]	; (8004b38 <set_configuration_for_profile+0x90>)
 8004b26:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
 8004b2a:	b003      	add	sp, #12
 8004b2c:	bd30      	pop	{r4, r5, pc}
 8004b2e:	2109      	movs	r1, #9
 8004b30:	e7ed      	b.n	8004b0e <set_configuration_for_profile+0x66>
 8004b32:	210c      	movs	r1, #12
 8004b34:	e7c9      	b.n	8004aca <set_configuration_for_profile+0x22>
 8004b36:	bf00      	nop
 8004b38:	3b843809 	.word	0x3b843809
 8004b3c:	3c8461fa 	.word	0x3c8461fa

08004b40 <acc_service_envelope_configuration_create>:
 8004b40:	b570      	push	{r4, r5, r6, lr}
 8004b42:	4a3e      	ldr	r2, [pc, #248]	; (8004c3c <acc_service_envelope_configuration_create+0xfc>)
 8004b44:	b084      	sub	sp, #16
 8004b46:	236d      	movs	r3, #109	; 0x6d
 8004b48:	2188      	movs	r1, #136	; 0x88
 8004b4a:	2001      	movs	r0, #1
 8004b4c:	f000 fe30 	bl	80057b0 <acc_rss_integration_mem_calloc_debug>
 8004b50:	4605      	mov	r5, r0
 8004b52:	2800      	cmp	r0, #0
 8004b54:	d06f      	beq.n	8004c36 <acc_service_envelope_configuration_create+0xf6>
 8004b56:	493a      	ldr	r1, [pc, #232]	; (8004c40 <acc_service_envelope_configuration_create+0x100>)
 8004b58:	f100 041c 	add.w	r4, r0, #28
 8004b5c:	2602      	movs	r6, #2
 8004b5e:	2358      	movs	r3, #88	; 0x58
 8004b60:	4622      	mov	r2, r4
 8004b62:	e9cd 3100 	strd	r3, r1, [sp]
 8004b66:	9602      	str	r6, [sp, #8]
 8004b68:	4b36      	ldr	r3, [pc, #216]	; (8004c44 <acc_service_envelope_configuration_create+0x104>)
 8004b6a:	2100      	movs	r1, #0
 8004b6c:	f7ff fee0 	bl	8004930 <acc_service_initialize_service_configuration>
 8004b70:	ed9f 0a35 	vldr	s0, [pc, #212]	; 8004c48 <acc_service_envelope_configuration_create+0x108>
 8004b74:	4620      	mov	r0, r4
 8004b76:	f000 f9fd 	bl	8004f74 <acc_base_configuration_requested_start_set>
 8004b7a:	ed9f 0a34 	vldr	s0, [pc, #208]	; 8004c4c <acc_service_envelope_configuration_create+0x10c>
 8004b7e:	4620      	mov	r0, r4
 8004b80:	f000 fa14 	bl	8004fac <acc_base_configuration_requested_length_set>
 8004b84:	4620      	mov	r0, r4
 8004b86:	2106      	movs	r1, #6
 8004b88:	f000 fc64 	bl	8005454 <acc_base_configuration_mur_set>
 8004b8c:	4620      	mov	r0, r4
 8004b8e:	210a      	movs	r1, #10
 8004b90:	f000 fa64 	bl	800505c <acc_base_configuration_hw_accelerated_average_samples_set>
 8004b94:	2101      	movs	r1, #1
 8004b96:	4620      	mov	r0, r4
 8004b98:	f000 f9d6 	bl	8004f48 <acc_base_configuration_sensor_set>
 8004b9c:	4620      	mov	r0, r4
 8004b9e:	f000 fa13 	bl	8004fc8 <acc_base_configuration_repetition_mode_on_demand_set>
 8004ba2:	4631      	mov	r1, r6
 8004ba4:	4620      	mov	r0, r4
 8004ba6:	f000 fa1f 	bl	8004fe8 <acc_base_configuration_power_save_mode_set>
 8004baa:	4620      	mov	r0, r4
 8004bac:	2100      	movs	r1, #0
 8004bae:	f000 fb67 	bl	8005280 <acc_base_configuration_use_point_range_set>
 8004bb2:	4620      	mov	r0, r4
 8004bb4:	2100      	movs	r1, #0
 8004bb6:	f000 fb4f 	bl	8005258 <acc_base_configuration_sweep_type_debug_set>
 8004bba:	4620      	mov	r0, r4
 8004bbc:	2100      	movs	r1, #0
 8004bbe:	f000 fa25 	bl	800500c <acc_base_configuration_tx_disable_set>
 8004bc2:	4620      	mov	r0, r4
 8004bc4:	2100      	movs	r1, #0
 8004bc6:	f000 fa35 	bl	8005034 <acc_base_configuration_decrease_tx_emission_set>
 8004bca:	2200      	movs	r2, #0
 8004bcc:	4611      	mov	r1, r2
 8004bce:	2340      	movs	r3, #64	; 0x40
 8004bd0:	4620      	mov	r0, r4
 8004bd2:	f000 fc2f 	bl	8005434 <acc_base_configuration_cca_set>
 8004bd6:	4620      	mov	r0, r4
 8004bd8:	21ff      	movs	r1, #255	; 0xff
 8004bda:	f000 fb6f 	bl	80052bc <acc_base_configuration_staggered_vga_stabilization_time_set>
 8004bde:	4620      	mov	r0, r4
 8004be0:	2100      	movs	r1, #0
 8004be2:	f000 fb61 	bl	80052a8 <acc_base_configuration_use_fast_dll_refresh_routine_set>
 8004be6:	4620      	mov	r0, r4
 8004be8:	2101      	movs	r1, #1
 8004bea:	f000 fbad 	bl	8005348 <acc_base_configuration_downsampling_factor_set>
 8004bee:	4620      	mov	r0, r4
 8004bf0:	210b      	movs	r1, #11
 8004bf2:	f000 fae3 	bl	80051bc <acc_base_configuration_gain_set>
 8004bf6:	2101      	movs	r1, #1
 8004bf8:	4620      	mov	r0, r4
 8004bfa:	f000 fbb9 	bl	8005370 <acc_base_configuration_noise_level_normalization_set>
 8004bfe:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8004c50 <acc_service_envelope_configuration_create+0x110>
 8004c02:	4620      	mov	r0, r4
 8004c04:	f000 fa48 	bl	8005098 <acc_base_configuration_phase_compensation_alpha_set>
 8004c08:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8004c54 <acc_service_envelope_configuration_create+0x114>
 8004c0c:	4620      	mov	r0, r4
 8004c0e:	2101      	movs	r1, #1
 8004c10:	f000 fa5c 	bl	80050cc <acc_base_configuration_time_domain_low_pass_filter_alpha_set>
 8004c14:	4620      	mov	r0, r4
 8004c16:	2101      	movs	r1, #1
 8004c18:	f000 fa70 	bl	80050fc <acc_base_configuration_filter_demodulated_data_set>
 8004c1c:	4620      	mov	r0, r4
 8004c1e:	2101      	movs	r1, #1
 8004c20:	f000 fbc4 	bl	80053ac <acc_base_configuration_asynchronous_measurement_set>
 8004c24:	4620      	mov	r0, r4
 8004c26:	f44f 5196 	mov.w	r1, #4800	; 0x12c0
 8004c2a:	f000 fbd3 	bl	80053d4 <acc_base_configuration_min_pipeline_memory_size_set>
 8004c2e:	490a      	ldr	r1, [pc, #40]	; (8004c58 <acc_service_envelope_configuration_create+0x118>)
 8004c30:	4620      	mov	r0, r4
 8004c32:	f000 fa1b 	bl	800506c <acc_base_configuration_radar_engine_creation_set>
 8004c36:	4628      	mov	r0, r5
 8004c38:	b004      	add	sp, #16
 8004c3a:	bd70      	pop	{r4, r5, r6, pc}
 8004c3c:	0800e468 	.word	0x0800e468
 8004c40:	08004aa9 	.word	0x08004aa9
 8004c44:	08004999 	.word	0x08004999
 8004c48:	3e4ccccd 	.word	0x3e4ccccd
 8004c4c:	3ecccccd 	.word	0x3ecccccd
 8004c50:	3dcccccd 	.word	0x3dcccccd
 8004c54:	3e99999a 	.word	0x3e99999a
 8004c58:	0800664d 	.word	0x0800664d

08004c5c <acc_service_envelope_configuration_destroy>:
 8004c5c:	b130      	cbz	r0, 8004c6c <acc_service_envelope_configuration_destroy+0x10>
 8004c5e:	b510      	push	{r4, lr}
 8004c60:	4604      	mov	r4, r0
 8004c62:	6800      	ldr	r0, [r0, #0]
 8004c64:	f7ff fdf4 	bl	8004850 <acc_service_configuration_valid>
 8004c68:	b908      	cbnz	r0, 8004c6e <acc_service_envelope_configuration_destroy+0x12>
 8004c6a:	bd10      	pop	{r4, pc}
 8004c6c:	4770      	bx	lr
 8004c6e:	6820      	ldr	r0, [r4, #0]
 8004c70:	f7ff ff00 	bl	8004a74 <get_and_validate_envelope_configuration>
 8004c74:	f000 fdba 	bl	80057ec <acc_rss_integration_mem_free>
 8004c78:	2300      	movs	r3, #0
 8004c7a:	6023      	str	r3, [r4, #0]
 8004c7c:	bd10      	pop	{r4, pc}
 8004c7e:	bf00      	nop

08004c80 <acc_service_envelope_get_metadata>:
 8004c80:	b1e0      	cbz	r0, 8004cbc <acc_service_envelope_get_metadata+0x3c>
 8004c82:	7a03      	ldrb	r3, [r0, #8]
 8004c84:	b9d3      	cbnz	r3, 8004cbc <acc_service_envelope_get_metadata+0x3c>
 8004c86:	b1c9      	cbz	r1, 8004cbc <acc_service_envelope_get_metadata+0x3c>
 8004c88:	6903      	ldr	r3, [r0, #16]
 8004c8a:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8004cc0 <acc_service_envelope_get_metadata+0x40>
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	edd3 7a08 	vldr	s15, [r3, #32]
 8004c94:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004c96:	8d58      	ldrh	r0, [r3, #42]	; 0x2a
 8004c98:	b430      	push	{r4, r5}
 8004c9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c9e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004ca2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ca6:	695d      	ldr	r5, [r3, #20]
 8004ca8:	699c      	ldr	r4, [r3, #24]
 8004caa:	604c      	str	r4, [r1, #4]
 8004cac:	1e53      	subs	r3, r2, #1
 8004cae:	600d      	str	r5, [r1, #0]
 8004cb0:	edc1 7a03 	vstr	s15, [r1, #12]
 8004cb4:	bc30      	pop	{r4, r5}
 8004cb6:	814b      	strh	r3, [r1, #10]
 8004cb8:	8108      	strh	r0, [r1, #8]
 8004cba:	4770      	bx	lr
 8004cbc:	4770      	bx	lr
 8004cbe:	bf00      	nop
 8004cc0:	4d8ef3c2 	.word	0x4d8ef3c2

08004cc4 <acc_service_envelope_get_next>:
 8004cc4:	b530      	push	{r4, r5, lr}
 8004cc6:	b08b      	sub	sp, #44	; 0x2c
 8004cc8:	0052      	lsls	r2, r2, #1
 8004cca:	9101      	str	r1, [sp, #4]
 8004ccc:	2400      	movs	r4, #0
 8004cce:	9206      	str	r2, [sp, #24]
 8004cd0:	9307      	str	r3, [sp, #28]
 8004cd2:	2204      	movs	r2, #4
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	9104      	str	r1, [sp, #16]
 8004cd8:	ad01      	add	r5, sp, #4
 8004cda:	a903      	add	r1, sp, #12
 8004cdc:	f88d 400c 	strb.w	r4, [sp, #12]
 8004ce0:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
 8004ce4:	9505      	str	r5, [sp, #20]
 8004ce6:	9208      	str	r2, [sp, #32]
 8004ce8:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
 8004cec:	f7ff fd44 	bl	8004778 <acc_service_get_next>
 8004cf0:	b00b      	add	sp, #44	; 0x2c
 8004cf2:	bd30      	pop	{r4, r5, pc}

08004cf4 <destroy_handle>:
 8004cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cf8:	4e15      	ldr	r6, [pc, #84]	; (8004d50 <destroy_handle+0x5c>)
 8004cfa:	4605      	mov	r5, r0
 8004cfc:	6874      	ldr	r4, [r6, #4]
 8004cfe:	f000 fd87 	bl	8005810 <acc_rss_integration_log_level>
 8004d02:	2803      	cmp	r0, #3
 8004d04:	d906      	bls.n	8004d14 <destroy_handle+0x20>
 8004d06:	4a13      	ldr	r2, [pc, #76]	; (8004d54 <destroy_handle+0x60>)
 8004d08:	686b      	ldr	r3, [r5, #4]
 8004d0a:	6b57      	ldr	r7, [r2, #52]	; 0x34
 8004d0c:	4912      	ldr	r1, [pc, #72]	; (8004d58 <destroy_handle+0x64>)
 8004d0e:	4a13      	ldr	r2, [pc, #76]	; (8004d5c <destroy_handle+0x68>)
 8004d10:	2004      	movs	r0, #4
 8004d12:	47b8      	blx	r7
 8004d14:	b144      	cbz	r4, 8004d28 <destroy_handle+0x34>
 8004d16:	42ac      	cmp	r4, r5
 8004d18:	d102      	bne.n	8004d20 <destroy_handle+0x2c>
 8004d1a:	e016      	b.n	8004d4a <destroy_handle+0x56>
 8004d1c:	42a5      	cmp	r5, r4
 8004d1e:	d00d      	beq.n	8004d3c <destroy_handle+0x48>
 8004d20:	4623      	mov	r3, r4
 8004d22:	6d64      	ldr	r4, [r4, #84]	; 0x54
 8004d24:	2c00      	cmp	r4, #0
 8004d26:	d1f9      	bne.n	8004d1c <destroy_handle+0x28>
 8004d28:	4a0a      	ldr	r2, [pc, #40]	; (8004d54 <destroy_handle+0x60>)
 8004d2a:	686b      	ldr	r3, [r5, #4]
 8004d2c:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8004d2e:	490a      	ldr	r1, [pc, #40]	; (8004d58 <destroy_handle+0x64>)
 8004d30:	4a0b      	ldr	r2, [pc, #44]	; (8004d60 <destroy_handle+0x6c>)
 8004d32:	46a4      	mov	ip, r4
 8004d34:	2000      	movs	r0, #0
 8004d36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d3a:	4760      	bx	ip
 8004d3c:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 8004d3e:	655a      	str	r2, [r3, #84]	; 0x54
 8004d40:	4628      	mov	r0, r5
 8004d42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d46:	f000 bd51 	b.w	80057ec <acc_rss_integration_mem_free>
 8004d4a:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8004d4c:	6073      	str	r3, [r6, #4]
 8004d4e:	e7f7      	b.n	8004d40 <destroy_handle+0x4c>
 8004d50:	20000354 	.word	0x20000354
 8004d54:	200004c0 	.word	0x200004c0
 8004d58:	0800e508 	.word	0x0800e508
 8004d5c:	0800e4e4 	.word	0x0800e4e4
 8004d60:	0800e518 	.word	0x0800e518

08004d64 <acc_service_manager_activate>:
 8004d64:	b510      	push	{r4, lr}
 8004d66:	4c05      	ldr	r4, [pc, #20]	; (8004d7c <acc_service_manager_activate+0x18>)
 8004d68:	7820      	ldrb	r0, [r4, #0]
 8004d6a:	b100      	cbz	r0, 8004d6e <acc_service_manager_activate+0xa>
 8004d6c:	bd10      	pop	{r4, pc}
 8004d6e:	2001      	movs	r0, #1
 8004d70:	7020      	strb	r0, [r4, #0]
 8004d72:	f7ff fc63 	bl	800463c <acc_service_set_module_active>
 8004d76:	7820      	ldrb	r0, [r4, #0]
 8004d78:	bd10      	pop	{r4, pc}
 8004d7a:	bf00      	nop
 8004d7c:	20000354 	.word	0x20000354

08004d80 <acc_service_create>:
 8004d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d84:	4e30      	ldr	r6, [pc, #192]	; (8004e48 <acc_service_create+0xc8>)
 8004d86:	7834      	ldrb	r4, [r6, #0]
 8004d88:	2c00      	cmp	r4, #0
 8004d8a:	d041      	beq.n	8004e10 <acc_service_create+0x90>
 8004d8c:	4605      	mov	r5, r0
 8004d8e:	f7ff fd5f 	bl	8004850 <acc_service_configuration_valid>
 8004d92:	b1a0      	cbz	r0, 8004dbe <acc_service_create+0x3e>
 8004d94:	692b      	ldr	r3, [r5, #16]
 8004d96:	68df      	ldr	r7, [r3, #12]
 8004d98:	1e7b      	subs	r3, r7, #1
 8004d9a:	2b29      	cmp	r3, #41	; 0x29
 8004d9c:	d84a      	bhi.n	8004e34 <acc_service_create+0xb4>
 8004d9e:	7873      	ldrb	r3, [r6, #1]
 8004da0:	b98b      	cbnz	r3, 8004dc6 <acc_service_create+0x46>
 8004da2:	6873      	ldr	r3, [r6, #4]
 8004da4:	b913      	cbnz	r3, 8004dac <acc_service_create+0x2c>
 8004da6:	e00e      	b.n	8004dc6 <acc_service_create+0x46>
 8004da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004daa:	b163      	cbz	r3, 8004dc6 <acc_service_create+0x46>
 8004dac:	685a      	ldr	r2, [r3, #4]
 8004dae:	4297      	cmp	r7, r2
 8004db0:	d1fa      	bne.n	8004da8 <acc_service_create+0x28>
 8004db2:	4b26      	ldr	r3, [pc, #152]	; (8004e4c <acc_service_create+0xcc>)
 8004db4:	4a26      	ldr	r2, [pc, #152]	; (8004e50 <acc_service_create+0xd0>)
 8004db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004db8:	4926      	ldr	r1, [pc, #152]	; (8004e54 <acc_service_create+0xd4>)
 8004dba:	2000      	movs	r0, #0
 8004dbc:	4798      	blx	r3
 8004dbe:	2400      	movs	r4, #0
 8004dc0:	4620      	mov	r0, r4
 8004dc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004dc6:	8b2c      	ldrh	r4, [r5, #24]
 8004dc8:	f000 fd22 	bl	8005810 <acc_rss_integration_log_level>
 8004dcc:	2803      	cmp	r0, #3
 8004dce:	d907      	bls.n	8004de0 <acc_service_create+0x60>
 8004dd0:	4b1e      	ldr	r3, [pc, #120]	; (8004e4c <acc_service_create+0xcc>)
 8004dd2:	4a21      	ldr	r2, [pc, #132]	; (8004e58 <acc_service_create+0xd8>)
 8004dd4:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 8004dd8:	491e      	ldr	r1, [pc, #120]	; (8004e54 <acc_service_create+0xd4>)
 8004dda:	463b      	mov	r3, r7
 8004ddc:	2004      	movs	r0, #4
 8004dde:	47c0      	blx	r8
 8004de0:	4621      	mov	r1, r4
 8004de2:	4a1c      	ldr	r2, [pc, #112]	; (8004e54 <acc_service_create+0xd4>)
 8004de4:	23bd      	movs	r3, #189	; 0xbd
 8004de6:	2001      	movs	r0, #1
 8004de8:	f000 fce2 	bl	80057b0 <acc_rss_integration_mem_calloc_debug>
 8004dec:	4604      	mov	r4, r0
 8004dee:	2800      	cmp	r0, #0
 8004df0:	d0e5      	beq.n	8004dbe <acc_service_create+0x3e>
 8004df2:	6873      	ldr	r3, [r6, #4]
 8004df4:	4a19      	ldr	r2, [pc, #100]	; (8004e5c <acc_service_create+0xdc>)
 8004df6:	6047      	str	r7, [r0, #4]
 8004df8:	6002      	str	r2, [r0, #0]
 8004dfa:	6543      	str	r3, [r0, #84]	; 0x54
 8004dfc:	6070      	str	r0, [r6, #4]
 8004dfe:	696b      	ldr	r3, [r5, #20]
 8004e00:	4629      	mov	r1, r5
 8004e02:	4798      	blx	r3
 8004e04:	b168      	cbz	r0, 8004e22 <acc_service_create+0xa2>
 8004e06:	2301      	movs	r3, #1
 8004e08:	7263      	strb	r3, [r4, #9]
 8004e0a:	4620      	mov	r0, r4
 8004e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e10:	4b0e      	ldr	r3, [pc, #56]	; (8004e4c <acc_service_create+0xcc>)
 8004e12:	4a13      	ldr	r2, [pc, #76]	; (8004e60 <acc_service_create+0xe0>)
 8004e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e16:	490f      	ldr	r1, [pc, #60]	; (8004e54 <acc_service_create+0xd4>)
 8004e18:	4620      	mov	r0, r4
 8004e1a:	4798      	blx	r3
 8004e1c:	4620      	mov	r0, r4
 8004e1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e22:	68e3      	ldr	r3, [r4, #12]
 8004e24:	b10b      	cbz	r3, 8004e2a <acc_service_create+0xaa>
 8004e26:	4620      	mov	r0, r4
 8004e28:	4798      	blx	r3
 8004e2a:	4620      	mov	r0, r4
 8004e2c:	f7ff ff62 	bl	8004cf4 <destroy_handle>
 8004e30:	2400      	movs	r4, #0
 8004e32:	e7c5      	b.n	8004dc0 <acc_service_create+0x40>
 8004e34:	4b05      	ldr	r3, [pc, #20]	; (8004e4c <acc_service_create+0xcc>)
 8004e36:	4a0b      	ldr	r2, [pc, #44]	; (8004e64 <acc_service_create+0xe4>)
 8004e38:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8004e3a:	4906      	ldr	r1, [pc, #24]	; (8004e54 <acc_service_create+0xd4>)
 8004e3c:	232a      	movs	r3, #42	; 0x2a
 8004e3e:	2000      	movs	r0, #0
 8004e40:	47a0      	blx	r4
 8004e42:	2400      	movs	r4, #0
 8004e44:	e7bc      	b.n	8004dc0 <acc_service_create+0x40>
 8004e46:	bf00      	nop
 8004e48:	20000354 	.word	0x20000354
 8004e4c:	200004c0 	.word	0x200004c0
 8004e50:	0800e5ac 	.word	0x0800e5ac
 8004e54:	0800e508 	.word	0x0800e508
 8004e58:	0800e578 	.word	0x0800e578
 8004e5c:	acc09ee8 	.word	0xacc09ee8
 8004e60:	0800e598 	.word	0x0800e598
 8004e64:	0800e54c 	.word	0x0800e54c

08004e68 <acc_service_destroy>:
 8004e68:	4b11      	ldr	r3, [pc, #68]	; (8004eb0 <acc_service_destroy+0x48>)
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	b510      	push	{r4, lr}
 8004e6e:	b133      	cbz	r3, 8004e7e <acc_service_destroy+0x16>
 8004e70:	4604      	mov	r4, r0
 8004e72:	b118      	cbz	r0, 8004e7c <acc_service_destroy+0x14>
 8004e74:	6800      	ldr	r0, [r0, #0]
 8004e76:	f7ff fbe7 	bl	8004648 <acc_service_handle_valid>
 8004e7a:	b960      	cbnz	r0, 8004e96 <acc_service_destroy+0x2e>
 8004e7c:	bd10      	pop	{r4, pc}
 8004e7e:	f000 fcc7 	bl	8005810 <acc_rss_integration_log_level>
 8004e82:	2800      	cmp	r0, #0
 8004e84:	d0fa      	beq.n	8004e7c <acc_service_destroy+0x14>
 8004e86:	4b0b      	ldr	r3, [pc, #44]	; (8004eb4 <acc_service_destroy+0x4c>)
 8004e88:	4a0b      	ldr	r2, [pc, #44]	; (8004eb8 <acc_service_destroy+0x50>)
 8004e8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e8c:	490b      	ldr	r1, [pc, #44]	; (8004ebc <acc_service_destroy+0x54>)
 8004e8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e92:	2001      	movs	r0, #1
 8004e94:	4718      	bx	r3
 8004e96:	6820      	ldr	r0, [r4, #0]
 8004e98:	f7ff fc30 	bl	80046fc <acc_service_deactivate>
 8004e9c:	6820      	ldr	r0, [r4, #0]
 8004e9e:	68c3      	ldr	r3, [r0, #12]
 8004ea0:	b10b      	cbz	r3, 8004ea6 <acc_service_destroy+0x3e>
 8004ea2:	4798      	blx	r3
 8004ea4:	6820      	ldr	r0, [r4, #0]
 8004ea6:	f7ff ff25 	bl	8004cf4 <destroy_handle>
 8004eaa:	2300      	movs	r3, #0
 8004eac:	6023      	str	r3, [r4, #0]
 8004eae:	bd10      	pop	{r4, pc}
 8004eb0:	20000354 	.word	0x20000354
 8004eb4:	200004c0 	.word	0x200004c0
 8004eb8:	0800e598 	.word	0x0800e598
 8004ebc:	0800e508 	.word	0x0800e508

08004ec0 <acc_service_manager_deactivate>:
 8004ec0:	b538      	push	{r3, r4, r5, lr}
 8004ec2:	4c0e      	ldr	r4, [pc, #56]	; (8004efc <acc_service_manager_deactivate+0x3c>)
 8004ec4:	7823      	ldrb	r3, [r4, #0]
 8004ec6:	b1bb      	cbz	r3, 8004ef8 <acc_service_manager_deactivate+0x38>
 8004ec8:	6863      	ldr	r3, [r4, #4]
 8004eca:	b17b      	cbz	r3, 8004eec <acc_service_manager_deactivate+0x2c>
 8004ecc:	1d25      	adds	r5, r4, #4
 8004ece:	4628      	mov	r0, r5
 8004ed0:	f7ff ffca 	bl	8004e68 <acc_service_destroy>
 8004ed4:	6863      	ldr	r3, [r4, #4]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d1f9      	bne.n	8004ece <acc_service_manager_deactivate+0xe>
 8004eda:	f000 fc99 	bl	8005810 <acc_rss_integration_log_level>
 8004ede:	b128      	cbz	r0, 8004eec <acc_service_manager_deactivate+0x2c>
 8004ee0:	4b07      	ldr	r3, [pc, #28]	; (8004f00 <acc_service_manager_deactivate+0x40>)
 8004ee2:	4a08      	ldr	r2, [pc, #32]	; (8004f04 <acc_service_manager_deactivate+0x44>)
 8004ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ee6:	4908      	ldr	r1, [pc, #32]	; (8004f08 <acc_service_manager_deactivate+0x48>)
 8004ee8:	2001      	movs	r0, #1
 8004eea:	4798      	blx	r3
 8004eec:	2000      	movs	r0, #0
 8004eee:	7020      	strb	r0, [r4, #0]
 8004ef0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ef4:	f7ff bba2 	b.w	800463c <acc_service_set_module_active>
 8004ef8:	bd38      	pop	{r3, r4, r5, pc}
 8004efa:	bf00      	nop
 8004efc:	20000354 	.word	0x20000354
 8004f00:	200004c0 	.word	0x200004c0
 8004f04:	0800e5d4 	.word	0x0800e5d4
 8004f08:	0800e508 	.word	0x0800e508

08004f0c <configuration_is_valid>:
 8004f0c:	b108      	cbz	r0, 8004f12 <configuration_is_valid+0x6>
 8004f0e:	2001      	movs	r0, #1
 8004f10:	4770      	bx	lr
 8004f12:	b510      	push	{r4, lr}
 8004f14:	4604      	mov	r4, r0
 8004f16:	f000 fc7b 	bl	8005810 <acc_rss_integration_log_level>
 8004f1a:	b130      	cbz	r0, 8004f2a <configuration_is_valid+0x1e>
 8004f1c:	4b03      	ldr	r3, [pc, #12]	; (8004f2c <configuration_is_valid+0x20>)
 8004f1e:	4a04      	ldr	r2, [pc, #16]	; (8004f30 <configuration_is_valid+0x24>)
 8004f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f22:	4904      	ldr	r1, [pc, #16]	; (8004f34 <configuration_is_valid+0x28>)
 8004f24:	2001      	movs	r0, #1
 8004f26:	4798      	blx	r3
 8004f28:	4620      	mov	r0, r4
 8004f2a:	bd10      	pop	{r4, pc}
 8004f2c:	200004c0 	.word	0x200004c0
 8004f30:	0800e620 	.word	0x0800e620
 8004f34:	0800e63c 	.word	0x0800e63c

08004f38 <acc_base_configuration_sensor_get>:
 8004f38:	b510      	push	{r4, lr}
 8004f3a:	4604      	mov	r4, r0
 8004f3c:	f7ff ffe6 	bl	8004f0c <configuration_is_valid>
 8004f40:	b900      	cbnz	r0, 8004f44 <acc_base_configuration_sensor_get+0xc>
 8004f42:	bd10      	pop	{r4, pc}
 8004f44:	68e0      	ldr	r0, [r4, #12]
 8004f46:	bd10      	pop	{r4, pc}

08004f48 <acc_base_configuration_sensor_set>:
 8004f48:	b538      	push	{r3, r4, r5, lr}
 8004f4a:	460d      	mov	r5, r1
 8004f4c:	4604      	mov	r4, r0
 8004f4e:	f7ff ffdd 	bl	8004f0c <configuration_is_valid>
 8004f52:	b100      	cbz	r0, 8004f56 <acc_base_configuration_sensor_set+0xe>
 8004f54:	60e5      	str	r5, [r4, #12]
 8004f56:	bd38      	pop	{r3, r4, r5, pc}

08004f58 <acc_base_configuration_requested_start_get>:
 8004f58:	b510      	push	{r4, lr}
 8004f5a:	4604      	mov	r4, r0
 8004f5c:	f7ff ffd6 	bl	8004f0c <configuration_is_valid>
 8004f60:	b910      	cbnz	r0, 8004f68 <acc_base_configuration_requested_start_get+0x10>
 8004f62:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8004f70 <acc_base_configuration_requested_start_get+0x18>
 8004f66:	bd10      	pop	{r4, pc}
 8004f68:	ed94 0a09 	vldr	s0, [r4, #36]	; 0x24
 8004f6c:	bd10      	pop	{r4, pc}
 8004f6e:	bf00      	nop
 8004f70:	00000000 	.word	0x00000000

08004f74 <acc_base_configuration_requested_start_set>:
 8004f74:	b510      	push	{r4, lr}
 8004f76:	ed2d 8b02 	vpush	{d8}
 8004f7a:	4604      	mov	r4, r0
 8004f7c:	eeb0 8a40 	vmov.f32	s16, s0
 8004f80:	f7ff ffc4 	bl	8004f0c <configuration_is_valid>
 8004f84:	b108      	cbz	r0, 8004f8a <acc_base_configuration_requested_start_set+0x16>
 8004f86:	ed84 8a09 	vstr	s16, [r4, #36]	; 0x24
 8004f8a:	ecbd 8b02 	vpop	{d8}
 8004f8e:	bd10      	pop	{r4, pc}

08004f90 <acc_base_configuration_requested_length_get>:
 8004f90:	b510      	push	{r4, lr}
 8004f92:	4604      	mov	r4, r0
 8004f94:	f7ff ffba 	bl	8004f0c <configuration_is_valid>
 8004f98:	b910      	cbnz	r0, 8004fa0 <acc_base_configuration_requested_length_get+0x10>
 8004f9a:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8004fa8 <acc_base_configuration_requested_length_get+0x18>
 8004f9e:	bd10      	pop	{r4, pc}
 8004fa0:	ed94 0a0a 	vldr	s0, [r4, #40]	; 0x28
 8004fa4:	bd10      	pop	{r4, pc}
 8004fa6:	bf00      	nop
 8004fa8:	00000000 	.word	0x00000000

08004fac <acc_base_configuration_requested_length_set>:
 8004fac:	b510      	push	{r4, lr}
 8004fae:	ed2d 8b02 	vpush	{d8}
 8004fb2:	4604      	mov	r4, r0
 8004fb4:	eeb0 8a40 	vmov.f32	s16, s0
 8004fb8:	f7ff ffa8 	bl	8004f0c <configuration_is_valid>
 8004fbc:	b108      	cbz	r0, 8004fc2 <acc_base_configuration_requested_length_set+0x16>
 8004fbe:	ed84 8a0a 	vstr	s16, [r4, #40]	; 0x28
 8004fc2:	ecbd 8b02 	vpop	{d8}
 8004fc6:	bd10      	pop	{r4, pc}

08004fc8 <acc_base_configuration_repetition_mode_on_demand_set>:
 8004fc8:	b510      	push	{r4, lr}
 8004fca:	4604      	mov	r4, r0
 8004fcc:	f7ff ff9e 	bl	8004f0c <configuration_is_valid>
 8004fd0:	b108      	cbz	r0, 8004fd6 <acc_base_configuration_repetition_mode_on_demand_set+0xe>
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	7123      	strb	r3, [r4, #4]
 8004fd6:	bd10      	pop	{r4, pc}

08004fd8 <acc_base_configuration_power_save_mode_get>:
 8004fd8:	b510      	push	{r4, lr}
 8004fda:	4604      	mov	r4, r0
 8004fdc:	f7ff ff96 	bl	8004f0c <configuration_is_valid>
 8004fe0:	b900      	cbnz	r0, 8004fe4 <acc_base_configuration_power_save_mode_get+0xc>
 8004fe2:	bd10      	pop	{r4, pc}
 8004fe4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004fe6:	bd10      	pop	{r4, pc}

08004fe8 <acc_base_configuration_power_save_mode_set>:
 8004fe8:	b538      	push	{r3, r4, r5, lr}
 8004fea:	460d      	mov	r5, r1
 8004fec:	4604      	mov	r4, r0
 8004fee:	f7ff ff8d 	bl	8004f0c <configuration_is_valid>
 8004ff2:	b100      	cbz	r0, 8004ff6 <acc_base_configuration_power_save_mode_set+0xe>
 8004ff4:	63a5      	str	r5, [r4, #56]	; 0x38
 8004ff6:	bd38      	pop	{r3, r4, r5, pc}

08004ff8 <acc_base_configuration_tx_disable_get>:
 8004ff8:	b510      	push	{r4, lr}
 8004ffa:	4604      	mov	r4, r0
 8004ffc:	f7ff ff86 	bl	8004f0c <configuration_is_valid>
 8005000:	b900      	cbnz	r0, 8005004 <acc_base_configuration_tx_disable_get+0xc>
 8005002:	bd10      	pop	{r4, pc}
 8005004:	f894 0047 	ldrb.w	r0, [r4, #71]	; 0x47
 8005008:	bd10      	pop	{r4, pc}
 800500a:	bf00      	nop

0800500c <acc_base_configuration_tx_disable_set>:
 800500c:	b538      	push	{r3, r4, r5, lr}
 800500e:	460d      	mov	r5, r1
 8005010:	4604      	mov	r4, r0
 8005012:	f7ff ff7b 	bl	8004f0c <configuration_is_valid>
 8005016:	b108      	cbz	r0, 800501c <acc_base_configuration_tx_disable_set+0x10>
 8005018:	f884 5047 	strb.w	r5, [r4, #71]	; 0x47
 800501c:	bd38      	pop	{r3, r4, r5, pc}
 800501e:	bf00      	nop

08005020 <acc_base_configuration_decrease_tx_emission_get>:
 8005020:	b510      	push	{r4, lr}
 8005022:	4604      	mov	r4, r0
 8005024:	f7ff ff72 	bl	8004f0c <configuration_is_valid>
 8005028:	b900      	cbnz	r0, 800502c <acc_base_configuration_decrease_tx_emission_get+0xc>
 800502a:	bd10      	pop	{r4, pc}
 800502c:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 8005030:	bd10      	pop	{r4, pc}
 8005032:	bf00      	nop

08005034 <acc_base_configuration_decrease_tx_emission_set>:
 8005034:	b538      	push	{r3, r4, r5, lr}
 8005036:	460d      	mov	r5, r1
 8005038:	4604      	mov	r4, r0
 800503a:	f7ff ff67 	bl	8004f0c <configuration_is_valid>
 800503e:	b108      	cbz	r0, 8005044 <acc_base_configuration_decrease_tx_emission_set+0x10>
 8005040:	f884 5048 	strb.w	r5, [r4, #72]	; 0x48
 8005044:	bd38      	pop	{r3, r4, r5, pc}
 8005046:	bf00      	nop

08005048 <acc_base_configuration_hw_accelerated_average_samples_get>:
 8005048:	b510      	push	{r4, lr}
 800504a:	4604      	mov	r4, r0
 800504c:	f7ff ff5e 	bl	8004f0c <configuration_is_valid>
 8005050:	b900      	cbnz	r0, 8005054 <acc_base_configuration_hw_accelerated_average_samples_get+0xc>
 8005052:	bd10      	pop	{r4, pc}
 8005054:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
 8005058:	bd10      	pop	{r4, pc}
 800505a:	bf00      	nop

0800505c <acc_base_configuration_hw_accelerated_average_samples_set>:
 800505c:	b538      	push	{r3, r4, r5, lr}
 800505e:	460d      	mov	r5, r1
 8005060:	4604      	mov	r4, r0
 8005062:	f7ff ff53 	bl	8004f0c <configuration_is_valid>
 8005066:	b100      	cbz	r0, 800506a <acc_base_configuration_hw_accelerated_average_samples_set+0xe>
 8005068:	87a5      	strh	r5, [r4, #60]	; 0x3c
 800506a:	bd38      	pop	{r3, r4, r5, pc}

0800506c <acc_base_configuration_radar_engine_creation_set>:
 800506c:	b538      	push	{r3, r4, r5, lr}
 800506e:	460d      	mov	r5, r1
 8005070:	4604      	mov	r4, r0
 8005072:	f7ff ff4b 	bl	8004f0c <configuration_is_valid>
 8005076:	b100      	cbz	r0, 800507a <acc_base_configuration_radar_engine_creation_set+0xe>
 8005078:	6025      	str	r5, [r4, #0]
 800507a:	bd38      	pop	{r3, r4, r5, pc}

0800507c <acc_base_configuration_phase_compensation_alpha_get>:
 800507c:	b510      	push	{r4, lr}
 800507e:	4604      	mov	r4, r0
 8005080:	f7ff ff44 	bl	8004f0c <configuration_is_valid>
 8005084:	b910      	cbnz	r0, 800508c <acc_base_configuration_phase_compensation_alpha_get+0x10>
 8005086:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8005094 <acc_base_configuration_phase_compensation_alpha_get+0x18>
 800508a:	bd10      	pop	{r4, pc}
 800508c:	ed94 0a04 	vldr	s0, [r4, #16]
 8005090:	bd10      	pop	{r4, pc}
 8005092:	bf00      	nop
 8005094:	00000000 	.word	0x00000000

08005098 <acc_base_configuration_phase_compensation_alpha_set>:
 8005098:	b510      	push	{r4, lr}
 800509a:	ed2d 8b02 	vpush	{d8}
 800509e:	4604      	mov	r4, r0
 80050a0:	eeb0 8a40 	vmov.f32	s16, s0
 80050a4:	f7ff ff32 	bl	8004f0c <configuration_is_valid>
 80050a8:	b108      	cbz	r0, 80050ae <acc_base_configuration_phase_compensation_alpha_set+0x16>
 80050aa:	ed84 8a04 	vstr	s16, [r4, #16]
 80050ae:	ecbd 8b02 	vpop	{d8}
 80050b2:	bd10      	pop	{r4, pc}

080050b4 <acc_base_configuration_time_domain_low_pass_filter_alpha_get>:
 80050b4:	b538      	push	{r3, r4, r5, lr}
 80050b6:	460d      	mov	r5, r1
 80050b8:	4604      	mov	r4, r0
 80050ba:	f7ff ff27 	bl	8004f0c <configuration_is_valid>
 80050be:	b900      	cbnz	r0, 80050c2 <acc_base_configuration_time_domain_low_pass_filter_alpha_get+0xe>
 80050c0:	bd38      	pop	{r3, r4, r5, pc}
 80050c2:	b10d      	cbz	r5, 80050c8 <acc_base_configuration_time_domain_low_pass_filter_alpha_get+0x14>
 80050c4:	6963      	ldr	r3, [r4, #20]
 80050c6:	602b      	str	r3, [r5, #0]
 80050c8:	7e20      	ldrb	r0, [r4, #24]
 80050ca:	bd38      	pop	{r3, r4, r5, pc}

080050cc <acc_base_configuration_time_domain_low_pass_filter_alpha_set>:
 80050cc:	b538      	push	{r3, r4, r5, lr}
 80050ce:	ed2d 8b02 	vpush	{d8}
 80050d2:	460d      	mov	r5, r1
 80050d4:	eeb0 8a40 	vmov.f32	s16, s0
 80050d8:	4604      	mov	r4, r0
 80050da:	f7ff ff17 	bl	8004f0c <configuration_is_valid>
 80050de:	b110      	cbz	r0, 80050e6 <acc_base_configuration_time_domain_low_pass_filter_alpha_set+0x1a>
 80050e0:	ed84 8a05 	vstr	s16, [r4, #20]
 80050e4:	7625      	strb	r5, [r4, #24]
 80050e6:	ecbd 8b02 	vpop	{d8}
 80050ea:	bd38      	pop	{r3, r4, r5, pc}

080050ec <acc_base_configuration_filter_demodulated_data_get>:
 80050ec:	b510      	push	{r4, lr}
 80050ee:	4604      	mov	r4, r0
 80050f0:	f7ff ff0c 	bl	8004f0c <configuration_is_valid>
 80050f4:	b900      	cbnz	r0, 80050f8 <acc_base_configuration_filter_demodulated_data_get+0xc>
 80050f6:	bd10      	pop	{r4, pc}
 80050f8:	7f20      	ldrb	r0, [r4, #28]
 80050fa:	bd10      	pop	{r4, pc}

080050fc <acc_base_configuration_filter_demodulated_data_set>:
 80050fc:	b538      	push	{r3, r4, r5, lr}
 80050fe:	460d      	mov	r5, r1
 8005100:	4604      	mov	r4, r0
 8005102:	f7ff ff03 	bl	8004f0c <configuration_is_valid>
 8005106:	b100      	cbz	r0, 800510a <acc_base_configuration_filter_demodulated_data_set+0xe>
 8005108:	7725      	strb	r5, [r4, #28]
 800510a:	bd38      	pop	{r3, r4, r5, pc}

0800510c <acc_base_configuration_demodulation_filter_cutoff_freq_ratio_get>:
 800510c:	b510      	push	{r4, lr}
 800510e:	4604      	mov	r4, r0
 8005110:	f7ff fefc 	bl	8004f0c <configuration_is_valid>
 8005114:	b910      	cbnz	r0, 800511c <acc_base_configuration_demodulation_filter_cutoff_freq_ratio_get+0x10>
 8005116:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8005124 <acc_base_configuration_demodulation_filter_cutoff_freq_ratio_get+0x18>
 800511a:	bd10      	pop	{r4, pc}
 800511c:	ed94 0a08 	vldr	s0, [r4, #32]
 8005120:	bd10      	pop	{r4, pc}
 8005122:	bf00      	nop
 8005124:	00000000 	.word	0x00000000

08005128 <acc_base_configuration_demodulation_filter_cutoff_freq_ratio_set>:
 8005128:	b510      	push	{r4, lr}
 800512a:	ed2d 8b02 	vpush	{d8}
 800512e:	4604      	mov	r4, r0
 8005130:	eeb0 8a40 	vmov.f32	s16, s0
 8005134:	f7ff feea 	bl	8004f0c <configuration_is_valid>
 8005138:	b108      	cbz	r0, 800513e <acc_base_configuration_demodulation_filter_cutoff_freq_ratio_set+0x16>
 800513a:	ed84 8a08 	vstr	s16, [r4, #32]
 800513e:	ecbd 8b02 	vpop	{d8}
 8005142:	bd10      	pop	{r4, pc}

08005144 <acc_base_configuration_point_start_get>:
 8005144:	b510      	push	{r4, lr}
 8005146:	4604      	mov	r4, r0
 8005148:	f7ff fee0 	bl	8004f0c <configuration_is_valid>
 800514c:	b900      	cbnz	r0, 8005150 <acc_base_configuration_point_start_get+0xc>
 800514e:	bd10      	pop	{r4, pc}
 8005150:	f9b4 0034 	ldrsh.w	r0, [r4, #52]	; 0x34
 8005154:	bd10      	pop	{r4, pc}
 8005156:	bf00      	nop

08005158 <acc_base_configuration_point_length_get>:
 8005158:	b510      	push	{r4, lr}
 800515a:	4604      	mov	r4, r0
 800515c:	f7ff fed6 	bl	8004f0c <configuration_is_valid>
 8005160:	b900      	cbnz	r0, 8005164 <acc_base_configuration_point_length_get+0xc>
 8005162:	bd10      	pop	{r4, pc}
 8005164:	f9b4 0036 	ldrsh.w	r0, [r4, #54]	; 0x36
 8005168:	bd10      	pop	{r4, pc}
 800516a:	bf00      	nop

0800516c <acc_base_configuration_repetition_mode_get>:
 800516c:	b510      	push	{r4, lr}
 800516e:	4604      	mov	r4, r0
 8005170:	f7ff fecc 	bl	8004f0c <configuration_is_valid>
 8005174:	b900      	cbnz	r0, 8005178 <acc_base_configuration_repetition_mode_get+0xc>
 8005176:	bd10      	pop	{r4, pc}
 8005178:	7920      	ldrb	r0, [r4, #4]
 800517a:	bd10      	pop	{r4, pc}

0800517c <acc_base_configuration_update_rate_get>:
 800517c:	b510      	push	{r4, lr}
 800517e:	4604      	mov	r4, r0
 8005180:	f7ff fec4 	bl	8004f0c <configuration_is_valid>
 8005184:	b158      	cbz	r0, 800519e <acc_base_configuration_update_rate_get+0x22>
 8005186:	7923      	ldrb	r3, [r4, #4]
 8005188:	2b02      	cmp	r3, #2
 800518a:	d005      	beq.n	8005198 <acc_base_configuration_update_rate_get+0x1c>
 800518c:	d802      	bhi.n	8005194 <acc_base_configuration_update_rate_get+0x18>
 800518e:	ed9f 0a05 	vldr	s0, [pc, #20]	; 80051a4 <acc_base_configuration_update_rate_get+0x28>
 8005192:	bd10      	pop	{r4, pc}
 8005194:	2b03      	cmp	r3, #3
 8005196:	d102      	bne.n	800519e <acc_base_configuration_update_rate_get+0x22>
 8005198:	ed94 0a02 	vldr	s0, [r4, #8]
 800519c:	bd10      	pop	{r4, pc}
 800519e:	ed9f 0a02 	vldr	s0, [pc, #8]	; 80051a8 <acc_base_configuration_update_rate_get+0x2c>
 80051a2:	bd10      	pop	{r4, pc}
 80051a4:	7f800000 	.word	0x7f800000
 80051a8:	7fc00000 	.word	0x7fc00000

080051ac <acc_base_configuration_gain_get>:
 80051ac:	b510      	push	{r4, lr}
 80051ae:	4604      	mov	r4, r0
 80051b0:	f7ff feac 	bl	8004f0c <configuration_is_valid>
 80051b4:	b900      	cbnz	r0, 80051b8 <acc_base_configuration_gain_get+0xc>
 80051b6:	bd10      	pop	{r4, pc}
 80051b8:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
 80051ba:	bd10      	pop	{r4, pc}

080051bc <acc_base_configuration_gain_set>:
 80051bc:	b538      	push	{r3, r4, r5, lr}
 80051be:	460d      	mov	r5, r1
 80051c0:	4604      	mov	r4, r0
 80051c2:	f7ff fea3 	bl	8004f0c <configuration_is_valid>
 80051c6:	b100      	cbz	r0, 80051ca <acc_base_configuration_gain_set+0xe>
 80051c8:	87e5      	strh	r5, [r4, #62]	; 0x3e
 80051ca:	bd38      	pop	{r3, r4, r5, pc}

080051cc <acc_base_configuration_integrator_get>:
 80051cc:	b510      	push	{r4, lr}
 80051ce:	4604      	mov	r4, r0
 80051d0:	f7ff fe9c 	bl	8004f0c <configuration_is_valid>
 80051d4:	b900      	cbnz	r0, 80051d8 <acc_base_configuration_integrator_get+0xc>
 80051d6:	bd10      	pop	{r4, pc}
 80051d8:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
 80051dc:	bd10      	pop	{r4, pc}
 80051de:	bf00      	nop

080051e0 <acc_base_configuration_integrator_set>:
 80051e0:	b538      	push	{r3, r4, r5, lr}
 80051e2:	460d      	mov	r5, r1
 80051e4:	4604      	mov	r4, r0
 80051e6:	f7ff fe91 	bl	8004f0c <configuration_is_valid>
 80051ea:	b108      	cbz	r0, 80051f0 <acc_base_configuration_integrator_set+0x10>
 80051ec:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
 80051f0:	bd38      	pop	{r3, r4, r5, pc}
 80051f2:	bf00      	nop

080051f4 <acc_base_configuration_wg_duration_get>:
 80051f4:	b510      	push	{r4, lr}
 80051f6:	4604      	mov	r4, r0
 80051f8:	f7ff fe88 	bl	8004f0c <configuration_is_valid>
 80051fc:	b900      	cbnz	r0, 8005200 <acc_base_configuration_wg_duration_get+0xc>
 80051fe:	bd10      	pop	{r4, pc}
 8005200:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
 8005204:	bd10      	pop	{r4, pc}
 8005206:	bf00      	nop

08005208 <acc_base_configuration_wg_duration_set>:
 8005208:	b538      	push	{r3, r4, r5, lr}
 800520a:	460d      	mov	r5, r1
 800520c:	4604      	mov	r4, r0
 800520e:	f7ff fe7d 	bl	8004f0c <configuration_is_valid>
 8005212:	b108      	cbz	r0, 8005218 <acc_base_configuration_wg_duration_set+0x10>
 8005214:	f8a4 5042 	strh.w	r5, [r4, #66]	; 0x42
 8005218:	bd38      	pop	{r3, r4, r5, pc}
 800521a:	bf00      	nop

0800521c <acc_base_configuration_integrator_ramp_up_get>:
 800521c:	b510      	push	{r4, lr}
 800521e:	4604      	mov	r4, r0
 8005220:	f7ff fe74 	bl	8004f0c <configuration_is_valid>
 8005224:	b900      	cbnz	r0, 8005228 <acc_base_configuration_integrator_ramp_up_get+0xc>
 8005226:	bd10      	pop	{r4, pc}
 8005228:	f8b4 0044 	ldrh.w	r0, [r4, #68]	; 0x44
 800522c:	bd10      	pop	{r4, pc}
 800522e:	bf00      	nop

08005230 <acc_base_configuration_integrator_ramp_up_set>:
 8005230:	b538      	push	{r3, r4, r5, lr}
 8005232:	460d      	mov	r5, r1
 8005234:	4604      	mov	r4, r0
 8005236:	f7ff fe69 	bl	8004f0c <configuration_is_valid>
 800523a:	b108      	cbz	r0, 8005240 <acc_base_configuration_integrator_ramp_up_set+0x10>
 800523c:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
 8005240:	bd38      	pop	{r3, r4, r5, pc}
 8005242:	bf00      	nop

08005244 <acc_base_configuration_sampling_mode_get>:
 8005244:	b510      	push	{r4, lr}
 8005246:	4604      	mov	r4, r0
 8005248:	f7ff fe60 	bl	8004f0c <configuration_is_valid>
 800524c:	b900      	cbnz	r0, 8005250 <acc_base_configuration_sampling_mode_get+0xc>
 800524e:	bd10      	pop	{r4, pc}
 8005250:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
 8005254:	bd10      	pop	{r4, pc}
 8005256:	bf00      	nop

08005258 <acc_base_configuration_sweep_type_debug_set>:
 8005258:	b538      	push	{r3, r4, r5, lr}
 800525a:	460d      	mov	r5, r1
 800525c:	4604      	mov	r4, r0
 800525e:	f7ff fe55 	bl	8004f0c <configuration_is_valid>
 8005262:	b108      	cbz	r0, 8005268 <acc_base_configuration_sweep_type_debug_set+0x10>
 8005264:	f884 5046 	strb.w	r5, [r4, #70]	; 0x46
 8005268:	bd38      	pop	{r3, r4, r5, pc}
 800526a:	bf00      	nop

0800526c <acc_base_configuration_sweep_type_debug_get>:
 800526c:	b510      	push	{r4, lr}
 800526e:	4604      	mov	r4, r0
 8005270:	f7ff fe4c 	bl	8004f0c <configuration_is_valid>
 8005274:	b900      	cbnz	r0, 8005278 <acc_base_configuration_sweep_type_debug_get+0xc>
 8005276:	bd10      	pop	{r4, pc}
 8005278:	f894 0046 	ldrb.w	r0, [r4, #70]	; 0x46
 800527c:	bd10      	pop	{r4, pc}
 800527e:	bf00      	nop

08005280 <acc_base_configuration_use_point_range_set>:
 8005280:	b538      	push	{r3, r4, r5, lr}
 8005282:	460d      	mov	r5, r1
 8005284:	4604      	mov	r4, r0
 8005286:	f7ff fe41 	bl	8004f0c <configuration_is_valid>
 800528a:	b108      	cbz	r0, 8005290 <acc_base_configuration_use_point_range_set+0x10>
 800528c:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
 8005290:	bd38      	pop	{r3, r4, r5, pc}
 8005292:	bf00      	nop

08005294 <acc_base_configuration_use_point_range_get>:
 8005294:	b510      	push	{r4, lr}
 8005296:	4604      	mov	r4, r0
 8005298:	f7ff fe38 	bl	8004f0c <configuration_is_valid>
 800529c:	b900      	cbnz	r0, 80052a0 <acc_base_configuration_use_point_range_get+0xc>
 800529e:	bd10      	pop	{r4, pc}
 80052a0:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 80052a4:	bd10      	pop	{r4, pc}
 80052a6:	bf00      	nop

080052a8 <acc_base_configuration_use_fast_dll_refresh_routine_set>:
 80052a8:	b538      	push	{r3, r4, r5, lr}
 80052aa:	460d      	mov	r5, r1
 80052ac:	4604      	mov	r4, r0
 80052ae:	f7ff fe2d 	bl	8004f0c <configuration_is_valid>
 80052b2:	b108      	cbz	r0, 80052b8 <acc_base_configuration_use_fast_dll_refresh_routine_set+0x10>
 80052b4:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 80052b8:	bd38      	pop	{r3, r4, r5, pc}
 80052ba:	bf00      	nop

080052bc <acc_base_configuration_staggered_vga_stabilization_time_set>:
 80052bc:	b538      	push	{r3, r4, r5, lr}
 80052be:	460d      	mov	r5, r1
 80052c0:	4604      	mov	r4, r0
 80052c2:	f7ff fe23 	bl	8004f0c <configuration_is_valid>
 80052c6:	b108      	cbz	r0, 80052cc <acc_base_configuration_staggered_vga_stabilization_time_set+0x10>
 80052c8:	f8a4 5056 	strh.w	r5, [r4, #86]	; 0x56
 80052cc:	bd38      	pop	{r3, r4, r5, pc}
 80052ce:	bf00      	nop

080052d0 <acc_base_configuration_bba_reset_clocksync_perturbation_get>:
 80052d0:	b510      	push	{r4, lr}
 80052d2:	4604      	mov	r4, r0
 80052d4:	f7ff fe1a 	bl	8004f0c <configuration_is_valid>
 80052d8:	b900      	cbnz	r0, 80052dc <acc_base_configuration_bba_reset_clocksync_perturbation_get+0xc>
 80052da:	bd10      	pop	{r4, pc}
 80052dc:	f894 0063 	ldrb.w	r0, [r4, #99]	; 0x63
 80052e0:	bd10      	pop	{r4, pc}
 80052e2:	bf00      	nop

080052e4 <acc_base_configuration_bba_linear_resync_perturbation_get>:
 80052e4:	b510      	push	{r4, lr}
 80052e6:	4604      	mov	r4, r0
 80052e8:	f7ff fe10 	bl	8004f0c <configuration_is_valid>
 80052ec:	b900      	cbnz	r0, 80052f0 <acc_base_configuration_bba_linear_resync_perturbation_get+0xc>
 80052ee:	bd10      	pop	{r4, pc}
 80052f0:	f894 0064 	ldrb.w	r0, [r4, #100]	; 0x64
 80052f4:	bd10      	pop	{r4, pc}
 80052f6:	bf00      	nop

080052f8 <acc_base_configuration_bba_fast_refresh_disable_get>:
 80052f8:	b510      	push	{r4, lr}
 80052fa:	4604      	mov	r4, r0
 80052fc:	f7ff fe06 	bl	8004f0c <configuration_is_valid>
 8005300:	b900      	cbnz	r0, 8005304 <acc_base_configuration_bba_fast_refresh_disable_get+0xc>
 8005302:	bd10      	pop	{r4, pc}
 8005304:	f894 0065 	ldrb.w	r0, [r4, #101]	; 0x65
 8005308:	bd10      	pop	{r4, pc}
 800530a:	bf00      	nop

0800530c <acc_base_configuration_ignore_range_limits_get>:
 800530c:	b510      	push	{r4, lr}
 800530e:	4604      	mov	r4, r0
 8005310:	f7ff fdfc 	bl	8004f0c <configuration_is_valid>
 8005314:	b900      	cbnz	r0, 8005318 <acc_base_configuration_ignore_range_limits_get+0xc>
 8005316:	bd10      	pop	{r4, pc}
 8005318:	f894 0066 	ldrb.w	r0, [r4, #102]	; 0x66
 800531c:	bd10      	pop	{r4, pc}
 800531e:	bf00      	nop

08005320 <acc_base_configuration_sparse_sweeps_per_frame_get>:
 8005320:	b510      	push	{r4, lr}
 8005322:	4604      	mov	r4, r0
 8005324:	f7ff fdf2 	bl	8004f0c <configuration_is_valid>
 8005328:	b900      	cbnz	r0, 800532c <acc_base_configuration_sparse_sweeps_per_frame_get+0xc>
 800532a:	bd10      	pop	{r4, pc}
 800532c:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 8005330:	bd10      	pop	{r4, pc}
 8005332:	bf00      	nop

08005334 <acc_base_configuration_downsampling_factor_get>:
 8005334:	b510      	push	{r4, lr}
 8005336:	4604      	mov	r4, r0
 8005338:	f7ff fde8 	bl	8004f0c <configuration_is_valid>
 800533c:	b900      	cbnz	r0, 8005340 <acc_base_configuration_downsampling_factor_get+0xc>
 800533e:	bd10      	pop	{r4, pc}
 8005340:	f8b4 0060 	ldrh.w	r0, [r4, #96]	; 0x60
 8005344:	bd10      	pop	{r4, pc}
 8005346:	bf00      	nop

08005348 <acc_base_configuration_downsampling_factor_set>:
 8005348:	b538      	push	{r3, r4, r5, lr}
 800534a:	460d      	mov	r5, r1
 800534c:	4604      	mov	r4, r0
 800534e:	f7ff fddd 	bl	8004f0c <configuration_is_valid>
 8005352:	b108      	cbz	r0, 8005358 <acc_base_configuration_downsampling_factor_set+0x10>
 8005354:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
 8005358:	bd38      	pop	{r3, r4, r5, pc}
 800535a:	bf00      	nop

0800535c <acc_base_configuration_noise_level_normalization_get>:
 800535c:	b510      	push	{r4, lr}
 800535e:	4604      	mov	r4, r0
 8005360:	f7ff fdd4 	bl	8004f0c <configuration_is_valid>
 8005364:	b900      	cbnz	r0, 8005368 <acc_base_configuration_noise_level_normalization_get+0xc>
 8005366:	bd10      	pop	{r4, pc}
 8005368:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
 800536c:	bd10      	pop	{r4, pc}
 800536e:	bf00      	nop

08005370 <acc_base_configuration_noise_level_normalization_set>:
 8005370:	b538      	push	{r3, r4, r5, lr}
 8005372:	460d      	mov	r5, r1
 8005374:	4604      	mov	r4, r0
 8005376:	f7ff fdc9 	bl	8004f0c <configuration_is_valid>
 800537a:	b108      	cbz	r0, 8005380 <acc_base_configuration_noise_level_normalization_set+0x10>
 800537c:	f884 5049 	strb.w	r5, [r4, #73]	; 0x49
 8005380:	bd38      	pop	{r3, r4, r5, pc}
 8005382:	bf00      	nop

08005384 <acc_base_configuration_noise_deviation_override_get>:
 8005384:	b510      	push	{r4, lr}
 8005386:	4604      	mov	r4, r0
 8005388:	f7ff fdc0 	bl	8004f0c <configuration_is_valid>
 800538c:	b900      	cbnz	r0, 8005390 <acc_base_configuration_noise_deviation_override_get+0xc>
 800538e:	bd10      	pop	{r4, pc}
 8005390:	f8b4 004c 	ldrh.w	r0, [r4, #76]	; 0x4c
 8005394:	bd10      	pop	{r4, pc}
 8005396:	bf00      	nop

08005398 <acc_base_configuration_asynchronous_measurement_get>:
 8005398:	b510      	push	{r4, lr}
 800539a:	4604      	mov	r4, r0
 800539c:	f7ff fdb6 	bl	8004f0c <configuration_is_valid>
 80053a0:	b900      	cbnz	r0, 80053a4 <acc_base_configuration_asynchronous_measurement_get+0xc>
 80053a2:	bd10      	pop	{r4, pc}
 80053a4:	f894 004e 	ldrb.w	r0, [r4, #78]	; 0x4e
 80053a8:	bd10      	pop	{r4, pc}
 80053aa:	bf00      	nop

080053ac <acc_base_configuration_asynchronous_measurement_set>:
 80053ac:	b538      	push	{r3, r4, r5, lr}
 80053ae:	460d      	mov	r5, r1
 80053b0:	4604      	mov	r4, r0
 80053b2:	f7ff fdab 	bl	8004f0c <configuration_is_valid>
 80053b6:	b108      	cbz	r0, 80053bc <acc_base_configuration_asynchronous_measurement_set+0x10>
 80053b8:	f884 504e 	strb.w	r5, [r4, #78]	; 0x4e
 80053bc:	bd38      	pop	{r3, r4, r5, pc}
 80053be:	bf00      	nop

080053c0 <acc_base_configuration_min_pipeline_memory_size_get>:
 80053c0:	b510      	push	{r4, lr}
 80053c2:	4604      	mov	r4, r0
 80053c4:	f7ff fda2 	bl	8004f0c <configuration_is_valid>
 80053c8:	b900      	cbnz	r0, 80053cc <acc_base_configuration_min_pipeline_memory_size_get+0xc>
 80053ca:	bd10      	pop	{r4, pc}
 80053cc:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
 80053d0:	bd10      	pop	{r4, pc}
 80053d2:	bf00      	nop

080053d4 <acc_base_configuration_min_pipeline_memory_size_set>:
 80053d4:	b538      	push	{r3, r4, r5, lr}
 80053d6:	460d      	mov	r5, r1
 80053d8:	4604      	mov	r4, r0
 80053da:	f7ff fd97 	bl	8004f0c <configuration_is_valid>
 80053de:	b108      	cbz	r0, 80053e4 <acc_base_configuration_min_pipeline_memory_size_set+0x10>
 80053e0:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 80053e4:	bd38      	pop	{r3, r4, r5, pc}
 80053e6:	bf00      	nop

080053e8 <acc_base_configuration_maximize_signal_attenuation_get>:
 80053e8:	b510      	push	{r4, lr}
 80053ea:	4604      	mov	r4, r0
 80053ec:	f7ff fd8e 	bl	8004f0c <configuration_is_valid>
 80053f0:	b900      	cbnz	r0, 80053f4 <acc_base_configuration_maximize_signal_attenuation_get+0xc>
 80053f2:	bd10      	pop	{r4, pc}
 80053f4:	f894 004a 	ldrb.w	r0, [r4, #74]	; 0x4a
 80053f8:	bd10      	pop	{r4, pc}
 80053fa:	bf00      	nop

080053fc <acc_base_configuration_maximize_signal_attenuation_set>:
 80053fc:	b538      	push	{r3, r4, r5, lr}
 80053fe:	460d      	mov	r5, r1
 8005400:	4604      	mov	r4, r0
 8005402:	f7ff fd83 	bl	8004f0c <configuration_is_valid>
 8005406:	b108      	cbz	r0, 800540c <acc_base_configuration_maximize_signal_attenuation_set+0x10>
 8005408:	f884 504a 	strb.w	r5, [r4, #74]	; 0x4a
 800540c:	bd38      	pop	{r3, r4, r5, pc}
 800540e:	bf00      	nop

08005410 <acc_base_configuration_cca_get>:
 8005410:	b570      	push	{r4, r5, r6, lr}
 8005412:	460e      	mov	r6, r1
 8005414:	4615      	mov	r5, r2
 8005416:	4604      	mov	r4, r0
 8005418:	f7ff fd78 	bl	8004f0c <configuration_is_valid>
 800541c:	b148      	cbz	r0, 8005432 <acc_base_configuration_cca_get+0x22>
 800541e:	b116      	cbz	r6, 8005426 <acc_base_configuration_cca_get+0x16>
 8005420:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8005424:	7033      	strb	r3, [r6, #0]
 8005426:	b115      	cbz	r5, 800542e <acc_base_configuration_cca_get+0x1e>
 8005428:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800542c:	802b      	strh	r3, [r5, #0]
 800542e:	f894 004f 	ldrb.w	r0, [r4, #79]	; 0x4f
 8005432:	bd70      	pop	{r4, r5, r6, pc}

08005434 <acc_base_configuration_cca_set>:
 8005434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005436:	460f      	mov	r7, r1
 8005438:	4616      	mov	r6, r2
 800543a:	461d      	mov	r5, r3
 800543c:	4604      	mov	r4, r0
 800543e:	f7ff fd65 	bl	8004f0c <configuration_is_valid>
 8005442:	b128      	cbz	r0, 8005450 <acc_base_configuration_cca_set+0x1c>
 8005444:	f884 704f 	strb.w	r7, [r4, #79]	; 0x4f
 8005448:	f884 6050 	strb.w	r6, [r4, #80]	; 0x50
 800544c:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
 8005450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005452:	bf00      	nop

08005454 <acc_base_configuration_mur_set>:
 8005454:	b538      	push	{r3, r4, r5, lr}
 8005456:	460d      	mov	r5, r1
 8005458:	4604      	mov	r4, r0
 800545a:	f7ff fd57 	bl	8004f0c <configuration_is_valid>
 800545e:	b108      	cbz	r0, 8005464 <acc_base_configuration_mur_set+0x10>
 8005460:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
 8005464:	bd38      	pop	{r3, r4, r5, pc}
 8005466:	bf00      	nop

08005468 <acc_base_configuration_sampling_mode_to_string>:
 8005468:	b130      	cbz	r0, 8005478 <acc_base_configuration_sampling_mode_to_string+0x10>
 800546a:	4b04      	ldr	r3, [pc, #16]	; (800547c <acc_base_configuration_sampling_mode_to_string+0x14>)
 800546c:	4a04      	ldr	r2, [pc, #16]	; (8005480 <acc_base_configuration_sampling_mode_to_string+0x18>)
 800546e:	2801      	cmp	r0, #1
 8005470:	bf14      	ite	ne
 8005472:	4618      	movne	r0, r3
 8005474:	4610      	moveq	r0, r2
 8005476:	4770      	bx	lr
 8005478:	4802      	ldr	r0, [pc, #8]	; (8005484 <acc_base_configuration_sampling_mode_to_string+0x1c>)
 800547a:	4770      	bx	lr
 800547c:	0800fb18 	.word	0x0800fb18
 8005480:	0800e654 	.word	0x0800e654
 8005484:	0800e650 	.word	0x0800e650

08005488 <acc_base_configuration_print>:
 8005488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800548c:	b08f      	sub	sp, #60	; 0x3c
 800548e:	4604      	mov	r4, r0
 8005490:	f000 f9be 	bl	8005810 <acc_rss_integration_log_level>
 8005494:	2801      	cmp	r0, #1
 8005496:	d94a      	bls.n	800552e <acc_base_configuration_print+0xa6>
 8005498:	4b26      	ldr	r3, [pc, #152]	; (8005534 <acc_base_configuration_print+0xac>)
 800549a:	4620      	mov	r0, r4
 800549c:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 80054a0:	f7ff fd4a 	bl	8004f38 <acc_base_configuration_sensor_get>
 80054a4:	4683      	mov	fp, r0
 80054a6:	4620      	mov	r0, r4
 80054a8:	f7ff fdce 	bl	8005048 <acc_base_configuration_hw_accelerated_average_samples_get>
 80054ac:	4605      	mov	r5, r0
 80054ae:	4620      	mov	r0, r4
 80054b0:	f7ff fe7c 	bl	80051ac <acc_base_configuration_gain_get>
 80054b4:	4606      	mov	r6, r0
 80054b6:	4620      	mov	r0, r4
 80054b8:	f7ff fe88 	bl	80051cc <acc_base_configuration_integrator_get>
 80054bc:	4607      	mov	r7, r0
 80054be:	4620      	mov	r0, r4
 80054c0:	f7ff fe98 	bl	80051f4 <acc_base_configuration_wg_duration_get>
 80054c4:	4680      	mov	r8, r0
 80054c6:	4620      	mov	r0, r4
 80054c8:	f7ff fea8 	bl	800521c <acc_base_configuration_integrator_ramp_up_get>
 80054cc:	4681      	mov	r9, r0
 80054ce:	4620      	mov	r0, r4
 80054d0:	f7ff fd82 	bl	8004fd8 <acc_base_configuration_power_save_mode_get>
 80054d4:	2804      	cmp	r0, #4
 80054d6:	bf96      	itet	ls
 80054d8:	4b17      	ldrls	r3, [pc, #92]	; (8005538 <acc_base_configuration_print+0xb0>)
 80054da:	4918      	ldrhi	r1, [pc, #96]	; (800553c <acc_base_configuration_print+0xb4>)
 80054dc:	f853 1020 	ldrls.w	r1, [r3, r0, lsl #2]
 80054e0:	910d      	str	r1, [sp, #52]	; 0x34
 80054e2:	4620      	mov	r0, r4
 80054e4:	f7ff feae 	bl	8005244 <acc_base_configuration_sampling_mode_get>
 80054e8:	f7ff ffbe 	bl	8005468 <acc_base_configuration_sampling_mode_to_string>
 80054ec:	4602      	mov	r2, r0
 80054ee:	4620      	mov	r0, r4
 80054f0:	920c      	str	r2, [sp, #48]	; 0x30
 80054f2:	f7ff fd81 	bl	8004ff8 <acc_base_configuration_tx_disable_get>
 80054f6:	4603      	mov	r3, r0
 80054f8:	4620      	mov	r0, r4
 80054fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80054fc:	f7ff ff10 	bl	8005320 <acc_base_configuration_sparse_sweeps_per_frame_get>
 8005500:	4684      	mov	ip, r0
 8005502:	4620      	mov	r0, r4
 8005504:	4664      	mov	r4, ip
 8005506:	f7ff fd8b 	bl	8005020 <acc_base_configuration_decrease_tx_emission_get>
 800550a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800550c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800550e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005510:	9206      	str	r2, [sp, #24]
 8005512:	e9cd 9104 	strd	r9, r1, [sp, #16]
 8005516:	9307      	str	r3, [sp, #28]
 8005518:	9009      	str	r0, [sp, #36]	; 0x24
 800551a:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800551e:	e9cd 5600 	strd	r5, r6, [sp]
 8005522:	4a07      	ldr	r2, [pc, #28]	; (8005540 <acc_base_configuration_print+0xb8>)
 8005524:	4907      	ldr	r1, [pc, #28]	; (8005544 <acc_base_configuration_print+0xbc>)
 8005526:	9408      	str	r4, [sp, #32]
 8005528:	465b      	mov	r3, fp
 800552a:	2002      	movs	r0, #2
 800552c:	47d0      	blx	sl
 800552e:	b00f      	add	sp, #60	; 0x3c
 8005530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005534:	200004c0 	.word	0x200004c0
 8005538:	0800e86c 	.word	0x0800e86c
 800553c:	0800fb18 	.word	0x0800fb18
 8005540:	0800e658 	.word	0x0800e658
 8005544:	0800e63c 	.word	0x0800e63c

08005548 <acc_base_configuration_check>:
 8005548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800554a:	4605      	mov	r5, r0
 800554c:	f7ff fcde 	bl	8004f0c <configuration_is_valid>
 8005550:	4604      	mov	r4, r0
 8005552:	b318      	cbz	r0, 800559c <acc_base_configuration_check+0x54>
 8005554:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005556:	2b04      	cmp	r3, #4
 8005558:	d819      	bhi.n	800558e <acc_base_configuration_check+0x46>
 800555a:	d02d      	beq.n	80055b8 <acc_base_configuration_check+0x70>
 800555c:	8feb      	ldrh	r3, [r5, #62]	; 0x3e
 800555e:	2b16      	cmp	r3, #22
 8005560:	d821      	bhi.n	80055a6 <acc_base_configuration_check+0x5e>
 8005562:	8fab      	ldrh	r3, [r5, #60]	; 0x3c
 8005564:	3b01      	subs	r3, #1
 8005566:	b29b      	uxth	r3, r3
 8005568:	2b3e      	cmp	r3, #62	; 0x3e
 800556a:	d819      	bhi.n	80055a0 <acc_base_configuration_check+0x58>
 800556c:	6bae      	ldr	r6, [r5, #56]	; 0x38
 800556e:	792b      	ldrb	r3, [r5, #4]
 8005570:	b9e6      	cbnz	r6, 80055ac <acc_base_configuration_check+0x64>
 8005572:	2b03      	cmp	r3, #3
 8005574:	d037      	beq.n	80055e6 <acc_base_configuration_check+0x9e>
 8005576:	2301      	movs	r3, #1
 8005578:	f885 304e 	strb.w	r3, [r5, #78]	; 0x4e
 800557c:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
 8005580:	2b06      	cmp	r3, #6
 8005582:	d00b      	beq.n	800559c <acc_base_configuration_check+0x54>
 8005584:	2b09      	cmp	r3, #9
 8005586:	d009      	beq.n	800559c <acc_base_configuration_check+0x54>
 8005588:	4b18      	ldr	r3, [pc, #96]	; (80055ec <acc_base_configuration_check+0xa4>)
 800558a:	4a19      	ldr	r2, [pc, #100]	; (80055f0 <acc_base_configuration_check+0xa8>)
 800558c:	e001      	b.n	8005592 <acc_base_configuration_check+0x4a>
 800558e:	4b17      	ldr	r3, [pc, #92]	; (80055ec <acc_base_configuration_check+0xa4>)
 8005590:	4a18      	ldr	r2, [pc, #96]	; (80055f4 <acc_base_configuration_check+0xac>)
 8005592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005594:	4918      	ldr	r1, [pc, #96]	; (80055f8 <acc_base_configuration_check+0xb0>)
 8005596:	2000      	movs	r0, #0
 8005598:	4798      	blx	r3
 800559a:	2400      	movs	r4, #0
 800559c:	4620      	mov	r0, r4
 800559e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055a0:	4b12      	ldr	r3, [pc, #72]	; (80055ec <acc_base_configuration_check+0xa4>)
 80055a2:	4a16      	ldr	r2, [pc, #88]	; (80055fc <acc_base_configuration_check+0xb4>)
 80055a4:	e7f5      	b.n	8005592 <acc_base_configuration_check+0x4a>
 80055a6:	4b11      	ldr	r3, [pc, #68]	; (80055ec <acc_base_configuration_check+0xa4>)
 80055a8:	4a15      	ldr	r2, [pc, #84]	; (8005600 <acc_base_configuration_check+0xb8>)
 80055aa:	e7f2      	b.n	8005592 <acc_base_configuration_check+0x4a>
 80055ac:	2b03      	cmp	r3, #3
 80055ae:	d00c      	beq.n	80055ca <acc_base_configuration_check+0x82>
 80055b0:	f036 0304 	bics.w	r3, r6, #4
 80055b4:	d1e2      	bne.n	800557c <acc_base_configuration_check+0x34>
 80055b6:	e7de      	b.n	8005576 <acc_base_configuration_check+0x2e>
 80055b8:	f000 f8a2 	bl	8005700 <acc_rss_integration_is_hibernate_capable>
 80055bc:	b160      	cbz	r0, 80055d8 <acc_base_configuration_check+0x90>
 80055be:	792b      	ldrb	r3, [r5, #4]
 80055c0:	2b03      	cmp	r3, #3
 80055c2:	d1cb      	bne.n	800555c <acc_base_configuration_check+0x14>
 80055c4:	4b09      	ldr	r3, [pc, #36]	; (80055ec <acc_base_configuration_check+0xa4>)
 80055c6:	4a0f      	ldr	r2, [pc, #60]	; (8005604 <acc_base_configuration_check+0xbc>)
 80055c8:	e7e3      	b.n	8005592 <acc_base_configuration_check+0x4a>
 80055ca:	f895 704e 	ldrb.w	r7, [r5, #78]	; 0x4e
 80055ce:	2f00      	cmp	r7, #0
 80055d0:	d1ee      	bne.n	80055b0 <acc_base_configuration_check+0x68>
 80055d2:	4b06      	ldr	r3, [pc, #24]	; (80055ec <acc_base_configuration_check+0xa4>)
 80055d4:	4a0c      	ldr	r2, [pc, #48]	; (8005608 <acc_base_configuration_check+0xc0>)
 80055d6:	e7dc      	b.n	8005592 <acc_base_configuration_check+0x4a>
 80055d8:	4904      	ldr	r1, [pc, #16]	; (80055ec <acc_base_configuration_check+0xa4>)
 80055da:	4a0c      	ldr	r2, [pc, #48]	; (800560c <acc_base_configuration_check+0xc4>)
 80055dc:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 80055de:	4906      	ldr	r1, [pc, #24]	; (80055f8 <acc_base_configuration_check+0xb0>)
 80055e0:	4604      	mov	r4, r0
 80055e2:	47a8      	blx	r5
 80055e4:	e7da      	b.n	800559c <acc_base_configuration_check+0x54>
 80055e6:	4b01      	ldr	r3, [pc, #4]	; (80055ec <acc_base_configuration_check+0xa4>)
 80055e8:	4a09      	ldr	r2, [pc, #36]	; (8005610 <acc_base_configuration_check+0xc8>)
 80055ea:	e7d2      	b.n	8005592 <acc_base_configuration_check+0x4a>
 80055ec:	200004c0 	.word	0x200004c0
 80055f0:	0800e830 	.word	0x0800e830
 80055f4:	0800e690 	.word	0x0800e690
 80055f8:	0800e63c 	.word	0x0800e63c
 80055fc:	0800e760 	.word	0x0800e760
 8005600:	0800e72c 	.word	0x0800e72c
 8005604:	0800e6e8 	.word	0x0800e6e8
 8005608:	0800e7f0 	.word	0x0800e7f0
 800560c:	0800e6a8 	.word	0x0800e6a8
 8005610:	0800e7b4 	.word	0x0800e7b4

08005614 <acc_rss_integration_register>:
 8005614:	b538      	push	{r3, r4, r5, lr}
 8005616:	6943      	ldr	r3, [r0, #20]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d02b      	beq.n	8005674 <acc_rss_integration_register+0x60>
 800561c:	6983      	ldr	r3, [r0, #24]
 800561e:	b34b      	cbz	r3, 8005674 <acc_rss_integration_register+0x60>
 8005620:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005622:	b323      	cbz	r3, 800566e <acc_rss_integration_register+0x5a>
 8005624:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005626:	b32b      	cbz	r3, 8005674 <acc_rss_integration_register+0x60>
 8005628:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800562a:	b31b      	cbz	r3, 8005674 <acc_rss_integration_register+0x60>
 800562c:	6883      	ldr	r3, [r0, #8]
 800562e:	b30b      	cbz	r3, 8005674 <acc_rss_integration_register+0x60>
 8005630:	68c3      	ldr	r3, [r0, #12]
 8005632:	b1fb      	cbz	r3, 8005674 <acc_rss_integration_register+0x60>
 8005634:	6903      	ldr	r3, [r0, #16]
 8005636:	b1eb      	cbz	r3, 8005674 <acc_rss_integration_register+0x60>
 8005638:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800563a:	b313      	cbz	r3, 8005682 <acc_rss_integration_register+0x6e>
 800563c:	6802      	ldr	r2, [r0, #0]
 800563e:	2a2a      	cmp	r2, #42	; 0x2a
 8005640:	d81a      	bhi.n	8005678 <acc_rss_integration_register+0x64>
 8005642:	6842      	ldr	r2, [r0, #4]
 8005644:	2a0f      	cmp	r2, #15
 8005646:	d917      	bls.n	8005678 <acc_rss_integration_register+0x64>
 8005648:	69c2      	ldr	r2, [r0, #28]
 800564a:	b10a      	cbz	r2, 8005650 <acc_rss_integration_register+0x3c>
 800564c:	6a02      	ldr	r2, [r0, #32]
 800564e:	b19a      	cbz	r2, 8005678 <acc_rss_integration_register+0x64>
 8005650:	4605      	mov	r5, r0
 8005652:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005654:	4c0c      	ldr	r4, [pc, #48]	; (8005688 <acc_rss_integration_register+0x74>)
 8005656:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005658:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800565a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800565c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800565e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005660:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005664:	2301      	movs	r3, #1
 8005666:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800566a:	4618      	mov	r0, r3
 800566c:	bd38      	pop	{r3, r4, r5, pc}
 800566e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005670:	2b00      	cmp	r3, #0
 8005672:	d1d7      	bne.n	8005624 <acc_rss_integration_register+0x10>
 8005674:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005676:	b123      	cbz	r3, 8005682 <acc_rss_integration_register+0x6e>
 8005678:	4a04      	ldr	r2, [pc, #16]	; (800568c <acc_rss_integration_register+0x78>)
 800567a:	4905      	ldr	r1, [pc, #20]	; (8005690 <acc_rss_integration_register+0x7c>)
 800567c:	2000      	movs	r0, #0
 800567e:	4798      	blx	r3
 8005680:	2300      	movs	r3, #0
 8005682:	4618      	mov	r0, r3
 8005684:	bd38      	pop	{r3, r4, r5, pc}
 8005686:	bf00      	nop
 8005688:	200004c0 	.word	0x200004c0
 800568c:	0800e880 	.word	0x0800e880
 8005690:	0800e894 	.word	0x0800e894

08005694 <acc_rss_integration_unregister>:
 8005694:	4802      	ldr	r0, [pc, #8]	; (80056a0 <acc_rss_integration_unregister+0xc>)
 8005696:	223c      	movs	r2, #60	; 0x3c
 8005698:	2100      	movs	r1, #0
 800569a:	f007 bca7 	b.w	800cfec <memset>
 800569e:	bf00      	nop
 80056a0:	200004c0 	.word	0x200004c0

080056a4 <acc_rss_integration_get_sensor_count>:
 80056a4:	4b01      	ldr	r3, [pc, #4]	; (80056ac <acc_rss_integration_get_sensor_count+0x8>)
 80056a6:	6818      	ldr	r0, [r3, #0]
 80056a8:	4770      	bx	lr
 80056aa:	bf00      	nop
 80056ac:	200004c0 	.word	0x200004c0

080056b0 <acc_rss_integration_get_sensor_reference_frequency>:
 80056b0:	4b01      	ldr	r3, [pc, #4]	; (80056b8 <acc_rss_integration_get_sensor_reference_frequency+0x8>)
 80056b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b4:	4718      	bx	r3
 80056b6:	bf00      	nop
 80056b8:	200004c0 	.word	0x200004c0

080056bc <acc_rss_integration_get_max_spi_transfer_size>:
 80056bc:	4b01      	ldr	r3, [pc, #4]	; (80056c4 <acc_rss_integration_get_max_spi_transfer_size+0x8>)
 80056be:	6858      	ldr	r0, [r3, #4]
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop
 80056c4:	200004c0 	.word	0x200004c0

080056c8 <acc_rss_integration_sensor_device_power_on>:
 80056c8:	4b01      	ldr	r3, [pc, #4]	; (80056d0 <acc_rss_integration_sensor_device_power_on+0x8>)
 80056ca:	695b      	ldr	r3, [r3, #20]
 80056cc:	4718      	bx	r3
 80056ce:	bf00      	nop
 80056d0:	200004c0 	.word	0x200004c0

080056d4 <acc_rss_integration_sensor_device_power_off>:
 80056d4:	4b01      	ldr	r3, [pc, #4]	; (80056dc <acc_rss_integration_sensor_device_power_off+0x8>)
 80056d6:	699b      	ldr	r3, [r3, #24]
 80056d8:	4718      	bx	r3
 80056da:	bf00      	nop
 80056dc:	200004c0 	.word	0x200004c0

080056e0 <acc_rss_integration_sensor_device_hibernate_enter>:
 80056e0:	4b02      	ldr	r3, [pc, #8]	; (80056ec <acc_rss_integration_sensor_device_hibernate_enter+0xc>)
 80056e2:	69db      	ldr	r3, [r3, #28]
 80056e4:	b103      	cbz	r3, 80056e8 <acc_rss_integration_sensor_device_hibernate_enter+0x8>
 80056e6:	4718      	bx	r3
 80056e8:	4770      	bx	lr
 80056ea:	bf00      	nop
 80056ec:	200004c0 	.word	0x200004c0

080056f0 <acc_rss_integration_sensor_device_hibernate_exit>:
 80056f0:	4b02      	ldr	r3, [pc, #8]	; (80056fc <acc_rss_integration_sensor_device_hibernate_exit+0xc>)
 80056f2:	6a1b      	ldr	r3, [r3, #32]
 80056f4:	b103      	cbz	r3, 80056f8 <acc_rss_integration_sensor_device_hibernate_exit+0x8>
 80056f6:	4718      	bx	r3
 80056f8:	4770      	bx	lr
 80056fa:	bf00      	nop
 80056fc:	200004c0 	.word	0x200004c0

08005700 <acc_rss_integration_is_hibernate_capable>:
 8005700:	4b02      	ldr	r3, [pc, #8]	; (800570c <acc_rss_integration_is_hibernate_capable+0xc>)
 8005702:	69d8      	ldr	r0, [r3, #28]
 8005704:	3800      	subs	r0, #0
 8005706:	bf18      	it	ne
 8005708:	2001      	movne	r0, #1
 800570a:	4770      	bx	lr
 800570c:	200004c0 	.word	0x200004c0

08005710 <acc_rss_integration_wait_for_sensor_interrupt>:
 8005710:	4b01      	ldr	r3, [pc, #4]	; (8005718 <acc_rss_integration_wait_for_sensor_interrupt+0x8>)
 8005712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005714:	4718      	bx	r3
 8005716:	bf00      	nop
 8005718:	200004c0 	.word	0x200004c0

0800571c <acc_rss_integration_sensor_device_transfer>:
 800571c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005720:	4f10      	ldr	r7, [pc, #64]	; (8005764 <acc_rss_integration_sensor_device_transfer+0x48>)
 8005722:	f8d7 e038 	ldr.w	lr, [r7, #56]	; 0x38
 8005726:	f1be 0f00 	cmp.w	lr, #0
 800572a:	d003      	beq.n	8005734 <acc_rss_integration_sensor_device_transfer+0x18>
 800572c:	4673      	mov	r3, lr
 800572e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005732:	4718      	bx	r3
 8005734:	460c      	mov	r4, r1
 8005736:	4606      	mov	r6, r0
 8005738:	4611      	mov	r1, r2
 800573a:	4615      	mov	r5, r2
 800573c:	4620      	mov	r0, r4
 800573e:	4698      	mov	r8, r3
 8005740:	f002 fd3a 	bl	80081b8 <acc_utils_swap16_array>
 8005744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005746:	4630      	mov	r0, r6
 8005748:	006a      	lsls	r2, r5, #1
 800574a:	4621      	mov	r1, r4
 800574c:	4798      	blx	r3
 800574e:	f1b8 0f00 	cmp.w	r8, #0
 8005752:	d101      	bne.n	8005758 <acc_rss_integration_sensor_device_transfer+0x3c>
 8005754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005758:	4629      	mov	r1, r5
 800575a:	4620      	mov	r0, r4
 800575c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005760:	f002 bd2a 	b.w	80081b8 <acc_utils_swap16_array>
 8005764:	200004c0 	.word	0x200004c0

08005768 <acc_rss_integration_mem_alloc_debug>:
 8005768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800576c:	4f0c      	ldr	r7, [pc, #48]	; (80057a0 <acc_rss_integration_mem_alloc_debug+0x38>)
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	4688      	mov	r8, r1
 8005772:	4616      	mov	r6, r2
 8005774:	4605      	mov	r5, r0
 8005776:	4798      	blx	r3
 8005778:	4604      	mov	r4, r0
 800577a:	b150      	cbz	r0, 8005792 <acc_rss_integration_mem_alloc_debug+0x2a>
 800577c:	4b09      	ldr	r3, [pc, #36]	; (80057a4 <acc_rss_integration_mem_alloc_debug+0x3c>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	b123      	cbz	r3, 800578c <acc_rss_integration_mem_alloc_debug+0x24>
 8005782:	689f      	ldr	r7, [r3, #8]
 8005784:	4642      	mov	r2, r8
 8005786:	4633      	mov	r3, r6
 8005788:	4629      	mov	r1, r5
 800578a:	47b8      	blx	r7
 800578c:	4620      	mov	r0, r4
 800578e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005794:	4a04      	ldr	r2, [pc, #16]	; (80057a8 <acc_rss_integration_mem_alloc_debug+0x40>)
 8005796:	4905      	ldr	r1, [pc, #20]	; (80057ac <acc_rss_integration_mem_alloc_debug+0x44>)
 8005798:	4798      	blx	r3
 800579a:	4620      	mov	r0, r4
 800579c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057a0:	200004c0 	.word	0x200004c0
 80057a4:	2000035c 	.word	0x2000035c
 80057a8:	0800e8a4 	.word	0x0800e8a4
 80057ac:	0800e894 	.word	0x0800e894

080057b0 <acc_rss_integration_mem_calloc_debug>:
 80057b0:	b570      	push	{r4, r5, r6, lr}
 80057b2:	b190      	cbz	r0, 80057da <acc_rss_integration_mem_calloc_debug+0x2a>
 80057b4:	460c      	mov	r4, r1
 80057b6:	4611      	mov	r1, r2
 80057b8:	461a      	mov	r2, r3
 80057ba:	fba0 3604 	umull	r3, r6, r0, r4
 80057be:	b97e      	cbnz	r6, 80057e0 <acc_rss_integration_mem_calloc_debug+0x30>
 80057c0:	fb04 f500 	mul.w	r5, r4, r0
 80057c4:	4628      	mov	r0, r5
 80057c6:	f7ff ffcf 	bl	8005768 <acc_rss_integration_mem_alloc_debug>
 80057ca:	4604      	mov	r4, r0
 80057cc:	b118      	cbz	r0, 80057d6 <acc_rss_integration_mem_calloc_debug+0x26>
 80057ce:	462a      	mov	r2, r5
 80057d0:	4631      	mov	r1, r6
 80057d2:	f007 fc0b 	bl	800cfec <memset>
 80057d6:	4620      	mov	r0, r4
 80057d8:	bd70      	pop	{r4, r5, r6, pc}
 80057da:	4604      	mov	r4, r0
 80057dc:	4620      	mov	r0, r4
 80057de:	bd70      	pop	{r4, r5, r6, pc}
 80057e0:	4801      	ldr	r0, [pc, #4]	; (80057e8 <acc_rss_integration_mem_calloc_debug+0x38>)
 80057e2:	21dd      	movs	r1, #221	; 0xdd
 80057e4:	f002 fa38 	bl	8007c58 <acc_assert_fail>
 80057e8:	0800e894 	.word	0x0800e894

080057ec <acc_rss_integration_mem_free>:
 80057ec:	4b06      	ldr	r3, [pc, #24]	; (8005808 <acc_rss_integration_mem_free+0x1c>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	b510      	push	{r4, lr}
 80057f2:	4604      	mov	r4, r0
 80057f4:	b10b      	cbz	r3, 80057fa <acc_rss_integration_mem_free+0xe>
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	4798      	blx	r3
 80057fa:	4b04      	ldr	r3, [pc, #16]	; (800580c <acc_rss_integration_mem_free+0x20>)
 80057fc:	4620      	mov	r0, r4
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005804:	4718      	bx	r3
 8005806:	bf00      	nop
 8005808:	2000035c 	.word	0x2000035c
 800580c:	200004c0 	.word	0x200004c0

08005810 <acc_rss_integration_log_level>:
 8005810:	4b01      	ldr	r3, [pc, #4]	; (8005818 <acc_rss_integration_log_level+0x8>)
 8005812:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
 8005816:	4770      	bx	lr
 8005818:	200004c0 	.word	0x200004c0

0800581c <inject_data>:
 800581c:	3034      	adds	r0, #52	; 0x34
 800581e:	f003 bacf 	b.w	8008dc0 <acc_element_source_adc_inject_data>
 8005822:	bf00      	nop

08005824 <disassemble>:
 8005824:	b538      	push	{r3, r4, r5, lr}
 8005826:	6805      	ldr	r5, [r0, #0]
 8005828:	4604      	mov	r4, r0
 800582a:	b155      	cbz	r5, 8005842 <disassemble+0x1e>
 800582c:	f105 0034 	add.w	r0, r5, #52	; 0x34
 8005830:	f003 fa76 	bl	8008d20 <acc_element_source_adc_release>
 8005834:	f8d5 03a4 	ldr.w	r0, [r5, #932]	; 0x3a4
 8005838:	f7ff ffd8 	bl	80057ec <acc_rss_integration_mem_free>
 800583c:	4628      	mov	r0, r5
 800583e:	f7ff ffd5 	bl	80057ec <acc_rss_integration_mem_free>
 8005842:	4620      	mov	r0, r4
 8005844:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005848:	f7ff bfd0 	b.w	80057ec <acc_rss_integration_mem_free>

0800584c <produce>:
 800584c:	b510      	push	{r4, lr}
 800584e:	4604      	mov	r4, r0
 8005850:	3034      	adds	r0, #52	; 0x34
 8005852:	f003 fa73 	bl	8008d3c <acc_element_source_adc_produce>
 8005856:	b960      	cbnz	r0, 8005872 <produce+0x26>
 8005858:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 800585c:	f8d4 2348 	ldr.w	r2, [r4, #840]	; 0x348
 8005860:	6118      	str	r0, [r3, #16]
 8005862:	2101      	movs	r1, #1
 8005864:	7198      	strb	r0, [r3, #6]
 8005866:	7159      	strb	r1, [r3, #5]
 8005868:	f504 7051 	add.w	r0, r4, #836	; 0x344
 800586c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005870:	4710      	bx	r2
 8005872:	bd10      	pop	{r4, pc}

08005874 <acc_pipeline_envelope_assemble>:
 8005874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005878:	ed2d 8b08 	vpush	{d8-d11}
 800587c:	460e      	mov	r6, r1
 800587e:	b08b      	sub	sp, #44	; 0x2c
 8005880:	461c      	mov	r4, r3
 8005882:	2110      	movs	r1, #16
 8005884:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005888:	4681      	mov	r9, r0
 800588a:	4615      	mov	r5, r2
 800588c:	2001      	movs	r0, #1
 800588e:	4ae4      	ldr	r2, [pc, #912]	; (8005c20 <acc_pipeline_envelope_assemble+0x3ac>)
 8005890:	e9cd 6403 	strd	r6, r4, [sp, #12]
 8005894:	f7ff ff8c 	bl	80057b0 <acc_rss_integration_mem_calloc_debug>
 8005898:	4ae1      	ldr	r2, [pc, #900]	; (8005c20 <acc_pipeline_envelope_assemble+0x3ac>)
 800589a:	4606      	mov	r6, r0
 800589c:	f240 1301 	movw	r3, #257	; 0x101
 80058a0:	f44f 716b 	mov.w	r1, #940	; 0x3ac
 80058a4:	2001      	movs	r0, #1
 80058a6:	f7ff ff83 	bl	80057b0 <acc_rss_integration_mem_calloc_debug>
 80058aa:	4604      	mov	r4, r0
 80058ac:	2e00      	cmp	r6, #0
 80058ae:	f000 8208 	beq.w	8005cc2 <acc_pipeline_envelope_assemble+0x44e>
 80058b2:	2800      	cmp	r0, #0
 80058b4:	f000 8205 	beq.w	8005cc2 <acc_pipeline_envelope_assemble+0x44e>
 80058b8:	f100 0334 	add.w	r3, r0, #52	; 0x34
 80058bc:	f500 7262 	add.w	r2, r0, #904	; 0x388
 80058c0:	f100 0814 	add.w	r8, r0, #20
 80058c4:	6030      	str	r0, [r6, #0]
 80058c6:	4649      	mov	r1, r9
 80058c8:	4618      	mov	r0, r3
 80058ca:	9200      	str	r2, [sp, #0]
 80058cc:	ee08 3a10 	vmov	s16, r3
 80058d0:	462a      	mov	r2, r5
 80058d2:	4643      	mov	r3, r8
 80058d4:	f003 fa04 	bl	8008ce0 <acc_element_source_adc_init_radar_engine>
 80058d8:	4681      	mov	r9, r0
 80058da:	2800      	cmp	r0, #0
 80058dc:	f000 81aa 	beq.w	8005c34 <acc_pipeline_envelope_assemble+0x3c0>
 80058e0:	2100      	movs	r1, #0
 80058e2:	4628      	mov	r0, r5
 80058e4:	f7ff fbe6 	bl	80050b4 <acc_base_configuration_time_domain_low_pass_filter_alpha_get>
 80058e8:	4683      	mov	fp, r0
 80058ea:	2007      	movs	r0, #7
 80058ec:	f8b4 9388 	ldrh.w	r9, [r4, #904]	; 0x388
 80058f0:	f002 f9ca 	bl	8007c88 <acc_element_sizeof>
 80058f4:	f8b4 a396 	ldrh.w	sl, [r4, #918]	; 0x396
 80058f8:	f8b4 3392 	ldrh.w	r3, [r4, #914]	; 0x392
 80058fc:	f8b4 2394 	ldrh.w	r2, [r4, #916]	; 0x394
 8005900:	4453      	add	r3, sl
 8005902:	ea4f 0a43 	mov.w	sl, r3, lsl #1
 8005906:	0053      	lsls	r3, r2, #1
 8005908:	459a      	cmp	sl, r3
 800590a:	bf38      	it	cc
 800590c:	469a      	movcc	sl, r3
 800590e:	fb00 f909 	mul.w	r9, r0, r9
 8005912:	45ca      	cmp	sl, r9
 8005914:	4628      	mov	r0, r5
 8005916:	bf38      	it	cc
 8005918:	46ca      	movcc	sl, r9
 800591a:	f7ff fd51 	bl	80053c0 <acc_base_configuration_min_pipeline_memory_size_get>
 800591e:	4582      	cmp	sl, r0
 8005920:	bf38      	it	cc
 8005922:	4682      	movcc	sl, r0
 8005924:	f8c4 a3a8 	str.w	sl, [r4, #936]	; 0x3a8
 8005928:	f1bb 0f00 	cmp.w	fp, #0
 800592c:	d115      	bne.n	800595a <acc_pipeline_envelope_assemble+0xe6>
 800592e:	49bc      	ldr	r1, [pc, #752]	; (8005c20 <acc_pipeline_envelope_assemble+0x3ac>)
 8005930:	f240 1285 	movw	r2, #389	; 0x185
 8005934:	4650      	mov	r0, sl
 8005936:	f7ff ff17 	bl	8005768 <acc_rss_integration_mem_alloc_debug>
 800593a:	4681      	mov	r9, r0
 800593c:	f8c4 03a4 	str.w	r0, [r4, #932]	; 0x3a4
 8005940:	2800      	cmp	r0, #0
 8005942:	f040 8181 	bne.w	8005c48 <acc_pipeline_envelope_assemble+0x3d4>
 8005946:	4630      	mov	r0, r6
 8005948:	f7ff ff6c 	bl	8005824 <disassemble>
 800594c:	2600      	movs	r6, #0
 800594e:	4630      	mov	r0, r6
 8005950:	b00b      	add	sp, #44	; 0x2c
 8005952:	ecbd 8b08 	vpop	{d8-d11}
 8005956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800595a:	2007      	movs	r0, #7
 800595c:	f8b4 9388 	ldrh.w	r9, [r4, #904]	; 0x388
 8005960:	f002 f992 	bl	8007c88 <acc_element_sizeof>
 8005964:	f10a 030a 	add.w	r3, sl, #10
 8005968:	fb00 3009 	mla	r0, r0, r9, r3
 800596c:	49ac      	ldr	r1, [pc, #688]	; (8005c20 <acc_pipeline_envelope_assemble+0x3ac>)
 800596e:	f240 1285 	movw	r2, #389	; 0x185
 8005972:	f7ff fef9 	bl	8005768 <acc_rss_integration_mem_alloc_debug>
 8005976:	4681      	mov	r9, r0
 8005978:	f8c4 03a4 	str.w	r0, [r4, #932]	; 0x3a4
 800597c:	2800      	cmp	r0, #0
 800597e:	d0e2      	beq.n	8005946 <acc_pipeline_envelope_assemble+0xd2>
 8005980:	f8b4 138a 	ldrh.w	r1, [r4, #906]	; 0x38a
 8005984:	9105      	str	r1, [sp, #20]
 8005986:	2007      	movs	r0, #7
 8005988:	f002 f97e 	bl	8007c88 <acc_element_sizeof>
 800598c:	9905      	ldr	r1, [sp, #20]
 800598e:	f10a 0204 	add.w	r2, sl, #4
 8005992:	fb00 9101 	mla	r1, r0, r1, r9
 8005996:	444a      	add	r2, r9
 8005998:	f104 0c06 	add.w	ip, r4, #6
 800599c:	1de0      	adds	r0, r4, #7
 800599e:	f104 0310 	add.w	r3, r4, #16
 80059a2:	e9cd 2106 	strd	r2, r1, [sp, #24]
 80059a6:	f8c4 c05c 	str.w	ip, [r4, #92]	; 0x5c
 80059aa:	f104 020c 	add.w	r2, r4, #12
 80059ae:	f104 0c08 	add.w	ip, r4, #8
 80059b2:	6620      	str	r0, [r4, #96]	; 0x60
 80059b4:	1d20      	adds	r0, r4, #4
 80059b6:	e9c4 2c19 	strd	r2, ip, [r4, #100]	; 0x64
 80059ba:	65a3      	str	r3, [r4, #88]	; 0x58
 80059bc:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 80059c0:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 80059c4:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80059c8:	e9c4 9931 	strd	r9, r9, [r4, #196]	; 0xc4
 80059cc:	f8c4 9048 	str.w	r9, [r4, #72]	; 0x48
 80059d0:	6564      	str	r4, [r4, #84]	; 0x54
 80059d2:	f8c4 9084 	str.w	r9, [r4, #132]	; 0x84
 80059d6:	4628      	mov	r0, r5
 80059d8:	4617      	mov	r7, r2
 80059da:	9305      	str	r3, [sp, #20]
 80059dc:	f7ff fcbe 	bl	800535c <acc_base_configuration_noise_level_normalization_get>
 80059e0:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 80059e4:	9907      	ldr	r1, [sp, #28]
 80059e6:	b118      	cbz	r0, 80059f0 <acc_pipeline_envelope_assemble+0x17c>
 80059e8:	e9c4 9941 	strd	r9, r9, [r4, #260]	; 0x104
 80059ec:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 80059f0:	e9c4 9951 	strd	r9, r9, [r4, #324]	; 0x144
 80059f4:	e9c4 9960 	strd	r9, r9, [r4, #384]	; 0x180
 80059f8:	e9c4 9971 	strd	r9, r9, [r4, #452]	; 0x1c4
 80059fc:	e9c4 9183 	strd	r9, r1, [r4, #524]	; 0x20c
 8005a00:	e9c4 1192 	strd	r1, r1, [r4, #584]	; 0x248
 8005a04:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
 8005a08:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194
 8005a0c:	f8c4 71a0 	str.w	r7, [r4, #416]	; 0x1a0
 8005a10:	f8c4 31d8 	str.w	r3, [r4, #472]	; 0x1d8
 8005a14:	f8c4 3220 	str.w	r3, [r4, #544]	; 0x220
 8005a18:	f8c4 325c 	str.w	r3, [r4, #604]	; 0x25c
 8005a1c:	f1bb 0f00 	cmp.w	fp, #0
 8005a20:	d007      	beq.n	8005a32 <acc_pipeline_envelope_assemble+0x1be>
 8005a22:	e9c4 12a7 	strd	r1, r2, [r4, #668]	; 0x29c
 8005a26:	eb09 000a 	add.w	r0, r9, sl
 8005a2a:	f8c4 02a8 	str.w	r0, [r4, #680]	; 0x2a8
 8005a2e:	f8c4 32b0 	str.w	r3, [r4, #688]	; 0x2b0
 8005a32:	e9c4 29b7 	strd	r2, r9, [r4, #732]	; 0x2dc
 8005a36:	e9c4 99c6 	strd	r9, r9, [r4, #792]	; 0x318
 8005a3a:	f8c4 32f0 	str.w	r3, [r4, #752]	; 0x2f0
 8005a3e:	f8c4 332c 	str.w	r3, [r4, #812]	; 0x32c
 8005a42:	f8c4 9354 	str.w	r9, [r4, #852]	; 0x354
 8005a46:	ee18 0a10 	vmov	r0, s16
 8005a4a:	f8c4 437c 	str.w	r4, [r4, #892]	; 0x37c
 8005a4e:	f504 7369 	add.w	r3, r4, #932	; 0x3a4
 8005a52:	4642      	mov	r2, r8
 8005a54:	4629      	mov	r1, r5
 8005a56:	f003 f951 	bl	8008cfc <acc_element_source_adc_init>
 8005a5a:	4681      	mov	r9, r0
 8005a5c:	2800      	cmp	r0, #0
 8005a5e:	f000 80e9 	beq.w	8005c34 <acc_pipeline_envelope_assemble+0x3c0>
 8005a62:	f104 03b4 	add.w	r3, r4, #180	; 0xb4
 8005a66:	f104 0a74 	add.w	sl, r4, #116	; 0x74
 8005a6a:	461f      	mov	r7, r3
 8005a6c:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8005c24 <acc_pipeline_envelope_assemble+0x3b0>
 8005a70:	2105      	movs	r1, #5
 8005a72:	4650      	mov	r0, sl
 8005a74:	ee09 3a90 	vmov	s19, r3
 8005a78:	f002 f954 	bl	8007d24 <acc_element_saturation_check_init>
 8005a7c:	4638      	mov	r0, r7
 8005a7e:	2200      	movs	r2, #0
 8005a80:	2105      	movs	r1, #5
 8005a82:	f002 fc77 	bl	8008374 <acc_element_centering_init>
 8005a86:	4628      	mov	r0, r5
 8005a88:	f7ff fc68 	bl	800535c <acc_base_configuration_noise_level_normalization_get>
 8005a8c:	2800      	cmp	r0, #0
 8005a8e:	f040 80fa 	bne.w	8005c86 <acc_pipeline_envelope_assemble+0x412>
 8005a92:	f504 739a 	add.w	r3, r4, #308	; 0x134
 8005a96:	4618      	mov	r0, r3
 8005a98:	ee08 3a90 	vmov	s17, r3
 8005a9c:	f504 73b8 	add.w	r3, r4, #368	; 0x170
 8005aa0:	461f      	mov	r7, r3
 8005aa2:	2207      	movs	r2, #7
 8005aa4:	2105      	movs	r1, #5
 8005aa6:	ee0a 3a90 	vmov	s21, r3
 8005aaa:	f002 fd2f 	bl	800850c <acc_element_converter_init>
 8005aae:	eddf 0a5d 	vldr	s1, [pc, #372]	; 8005c24 <acc_pipeline_envelope_assemble+0x3b0>
 8005ab2:	ed94 0a08 	vldr	s0, [r4, #32]
 8005ab6:	2107      	movs	r1, #7
 8005ab8:	4638      	mov	r0, r7
 8005aba:	f002 fee9 	bl	8008890 <acc_element_iq_mixer_init>
 8005abe:	f504 73da 	add.w	r3, r4, #436	; 0x1b4
 8005ac2:	f8b4 2390 	ldrh.w	r2, [r4, #912]	; 0x390
 8005ac6:	9206      	str	r2, [sp, #24]
 8005ac8:	461f      	mov	r7, r3
 8005aca:	4628      	mov	r0, r5
 8005acc:	ee0b 3a10 	vmov	s22, r3
 8005ad0:	f8b4 338e 	ldrh.w	r3, [r4, #910]	; 0x38e
 8005ad4:	9305      	str	r3, [sp, #20]
 8005ad6:	f7ff fad1 	bl	800507c <acc_base_configuration_phase_compensation_alpha_get>
 8005ada:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 8005ade:	4638      	mov	r0, r7
 8005ae0:	2107      	movs	r1, #7
 8005ae2:	f504 77fe 	add.w	r7, r4, #508	; 0x1fc
 8005ae6:	f003 f809 	bl	8008afc <acc_element_phase_compensation_init>
 8005aea:	f8b4 238c 	ldrh.w	r2, [r4, #908]	; 0x38c
 8005aee:	2107      	movs	r1, #7
 8005af0:	4638      	mov	r0, r7
 8005af2:	f002 fd7d 	bl	80085f0 <acc_element_crop_init>
 8005af6:	4628      	mov	r0, r5
 8005af8:	f7ff faf8 	bl	80050ec <acc_base_configuration_filter_demodulated_data_get>
 8005afc:	f504 7b0e 	add.w	fp, r4, #568	; 0x238
 8005b00:	9005      	str	r0, [sp, #20]
 8005b02:	4628      	mov	r0, r5
 8005b04:	f7ff fb02 	bl	800510c <acc_base_configuration_demodulation_filter_cutoff_freq_ratio_get>
 8005b08:	2107      	movs	r1, #7
 8005b0a:	9a05      	ldr	r2, [sp, #20]
 8005b0c:	4643      	mov	r3, r8
 8005b0e:	4658      	mov	r0, fp
 8005b10:	f002 fdd0 	bl	80086b4 <acc_element_depth_domain_low_pass_filter_init>
 8005b14:	a909      	add	r1, sp, #36	; 0x24
 8005b16:	4628      	mov	r0, r5
 8005b18:	ee09 7a10 	vmov	s18, r7
 8005b1c:	f7ff faca 	bl	80050b4 <acc_base_configuration_time_domain_low_pass_filter_alpha_get>
 8005b20:	2800      	cmp	r0, #0
 8005b22:	f040 80a8 	bne.w	8005c76 <acc_pipeline_envelope_assemble+0x402>
 8005b26:	f504 7933 	add.w	r9, r4, #716	; 0x2cc
 8005b2a:	2107      	movs	r1, #7
 8005b2c:	4648      	mov	r0, r9
 8005b2e:	f504 7842 	add.w	r8, r4, #776	; 0x308
 8005b32:	f002 fbb9 	bl	80082a8 <acc_element_abs_init>
 8005b36:	f504 7351 	add.w	r3, r4, #836	; 0x344
 8005b3a:	2202      	movs	r2, #2
 8005b3c:	2104      	movs	r1, #4
 8005b3e:	4640      	mov	r0, r8
 8005b40:	461f      	mov	r7, r3
 8005b42:	ee0a 3a10 	vmov	s20, r3
 8005b46:	f002 fce1 	bl	800850c <acc_element_converter_init>
 8005b4a:	9a03      	ldr	r2, [sp, #12]
 8005b4c:	4638      	mov	r0, r7
 8005b4e:	6811      	ldr	r1, [r2, #0]
 8005b50:	f002 f958 	bl	8007e04 <acc_element_sink_callback_init>
 8005b54:	ee18 0a10 	vmov	r0, s16
 8005b58:	4651      	mov	r1, sl
 8005b5a:	f002 f8a1 	bl	8007ca0 <acc_element_connect>
 8005b5e:	4650      	mov	r0, sl
 8005b60:	ee19 1a90 	vmov	r1, s19
 8005b64:	f002 f89c 	bl	8007ca0 <acc_element_connect>
 8005b68:	4628      	mov	r0, r5
 8005b6a:	f7ff fbf7 	bl	800535c <acc_base_configuration_noise_level_normalization_get>
 8005b6e:	2800      	cmp	r0, #0
 8005b70:	d07a      	beq.n	8005c68 <acc_pipeline_envelope_assemble+0x3f4>
 8005b72:	f104 0af4 	add.w	sl, r4, #244	; 0xf4
 8005b76:	ee19 0a90 	vmov	r0, s19
 8005b7a:	4651      	mov	r1, sl
 8005b7c:	f002 f890 	bl	8007ca0 <acc_element_connect>
 8005b80:	ee18 1a90 	vmov	r1, s17
 8005b84:	4650      	mov	r0, sl
 8005b86:	f002 f88b 	bl	8007ca0 <acc_element_connect>
 8005b8a:	ee18 0a90 	vmov	r0, s17
 8005b8e:	ee1a 1a90 	vmov	r1, s21
 8005b92:	f002 f885 	bl	8007ca0 <acc_element_connect>
 8005b96:	ee1b 1a10 	vmov	r1, s22
 8005b9a:	ee1a 0a90 	vmov	r0, s21
 8005b9e:	f002 f87f 	bl	8007ca0 <acc_element_connect>
 8005ba2:	ee19 1a10 	vmov	r1, s18
 8005ba6:	ee1b 0a10 	vmov	r0, s22
 8005baa:	f002 f879 	bl	8007ca0 <acc_element_connect>
 8005bae:	ee19 0a10 	vmov	r0, s18
 8005bb2:	4659      	mov	r1, fp
 8005bb4:	f002 f874 	bl	8007ca0 <acc_element_connect>
 8005bb8:	4628      	mov	r0, r5
 8005bba:	2100      	movs	r1, #0
 8005bbc:	f7ff fa7a 	bl	80050b4 <acc_base_configuration_time_domain_low_pass_filter_alpha_get>
 8005bc0:	2800      	cmp	r0, #0
 8005bc2:	d04c      	beq.n	8005c5e <acc_pipeline_envelope_assemble+0x3ea>
 8005bc4:	f504 7523 	add.w	r5, r4, #652	; 0x28c
 8005bc8:	4658      	mov	r0, fp
 8005bca:	4629      	mov	r1, r5
 8005bcc:	f002 f868 	bl	8007ca0 <acc_element_connect>
 8005bd0:	4649      	mov	r1, r9
 8005bd2:	4628      	mov	r0, r5
 8005bd4:	f002 f864 	bl	8007ca0 <acc_element_connect>
 8005bd8:	4648      	mov	r0, r9
 8005bda:	4641      	mov	r1, r8
 8005bdc:	f002 f860 	bl	8007ca0 <acc_element_connect>
 8005be0:	ee1a 1a10 	vmov	r1, s20
 8005be4:	4640      	mov	r0, r8
 8005be6:	f002 f85b 	bl	8007ca0 <acc_element_connect>
 8005bea:	ee18 0a10 	vmov	r0, s16
 8005bee:	f003 f8a1 	bl	8008d34 <acc_element_source_adc_validate>
 8005bf2:	4605      	mov	r5, r0
 8005bf4:	2800      	cmp	r0, #0
 8005bf6:	d055      	beq.n	8005ca4 <acc_pipeline_envelope_assemble+0x430>
 8005bf8:	ee18 0a10 	vmov	r0, s16
 8005bfc:	f003 f896 	bl	8008d2c <acc_element_source_adc_reset>
 8005c00:	9804      	ldr	r0, [sp, #16]
 8005c02:	4909      	ldr	r1, [pc, #36]	; (8005c28 <acc_pipeline_envelope_assemble+0x3b4>)
 8005c04:	4a09      	ldr	r2, [pc, #36]	; (8005c2c <acc_pipeline_envelope_assemble+0x3b8>)
 8005c06:	4b0a      	ldr	r3, [pc, #40]	; (8005c30 <acc_pipeline_envelope_assemble+0x3bc>)
 8005c08:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 8005c0c:	4630      	mov	r0, r6
 8005c0e:	e9c6 1201 	strd	r1, r2, [r6, #4]
 8005c12:	60f3      	str	r3, [r6, #12]
 8005c14:	b00b      	add	sp, #44	; 0x2c
 8005c16:	ecbd 8b08 	vpop	{d8-d11}
 8005c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c1e:	bf00      	nop
 8005c20:	0800e8b4 	.word	0x0800e8b4
 8005c24:	00000000 	.word	0x00000000
 8005c28:	0800584d 	.word	0x0800584d
 8005c2c:	0800581d 	.word	0x0800581d
 8005c30:	08005825 	.word	0x08005825
 8005c34:	4630      	mov	r0, r6
 8005c36:	f7ff fdf5 	bl	8005824 <disassemble>
 8005c3a:	464e      	mov	r6, r9
 8005c3c:	4630      	mov	r0, r6
 8005c3e:	b00b      	add	sp, #44	; 0x2c
 8005c40:	ecbd 8b08 	vpop	{d8-d11}
 8005c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c48:	f8b4 238a 	ldrh.w	r2, [r4, #906]	; 0x38a
 8005c4c:	9205      	str	r2, [sp, #20]
 8005c4e:	2007      	movs	r0, #7
 8005c50:	f002 f81a 	bl	8007c88 <acc_element_sizeof>
 8005c54:	9a05      	ldr	r2, [sp, #20]
 8005c56:	fb00 9202 	mla	r2, r0, r2, r9
 8005c5a:	4611      	mov	r1, r2
 8005c5c:	e69c      	b.n	8005998 <acc_pipeline_envelope_assemble+0x124>
 8005c5e:	4658      	mov	r0, fp
 8005c60:	4649      	mov	r1, r9
 8005c62:	f002 f81d 	bl	8007ca0 <acc_element_connect>
 8005c66:	e7b7      	b.n	8005bd8 <acc_pipeline_envelope_assemble+0x364>
 8005c68:	ee19 0a90 	vmov	r0, s19
 8005c6c:	ee18 1a90 	vmov	r1, s17
 8005c70:	f002 f816 	bl	8007ca0 <acc_element_connect>
 8005c74:	e789      	b.n	8005b8a <acc_pipeline_envelope_assemble+0x316>
 8005c76:	ed9d 0a09 	vldr	s0, [sp, #36]	; 0x24
 8005c7a:	2107      	movs	r1, #7
 8005c7c:	f504 7023 	add.w	r0, r4, #652	; 0x28c
 8005c80:	f003 f806 	bl	8008c90 <acc_element_time_domain_low_pass_filter_init>
 8005c84:	e74f      	b.n	8005b26 <acc_pipeline_envelope_assemble+0x2b2>
 8005c86:	4628      	mov	r0, r5
 8005c88:	f7ff fbae 	bl	80053e8 <acc_base_configuration_maximize_signal_attenuation_get>
 8005c8c:	2800      	cmp	r0, #0
 8005c8e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8005c90:	bf14      	ite	ne
 8005c92:	231e      	movne	r3, #30
 8005c94:	f44f 7396 	moveq.w	r3, #300	; 0x12c
 8005c98:	2105      	movs	r1, #5
 8005c9a:	f104 00f4 	add.w	r0, r4, #244	; 0xf4
 8005c9e:	f002 fe83 	bl	80089a8 <acc_element_noise_level_normalization_init>
 8005ca2:	e6f6      	b.n	8005a92 <acc_pipeline_envelope_assemble+0x21e>
 8005ca4:	4b0d      	ldr	r3, [pc, #52]	; (8005cdc <acc_pipeline_envelope_assemble+0x468>)
 8005ca6:	4a0e      	ldr	r2, [pc, #56]	; (8005ce0 <acc_pipeline_envelope_assemble+0x46c>)
 8005ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005caa:	490e      	ldr	r1, [pc, #56]	; (8005ce4 <acc_pipeline_envelope_assemble+0x470>)
 8005cac:	4798      	blx	r3
 8005cae:	4630      	mov	r0, r6
 8005cb0:	f7ff fdb8 	bl	8005824 <disassemble>
 8005cb4:	462e      	mov	r6, r5
 8005cb6:	4630      	mov	r0, r6
 8005cb8:	b00b      	add	sp, #44	; 0x2c
 8005cba:	ecbd 8b08 	vpop	{d8-d11}
 8005cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cc2:	4630      	mov	r0, r6
 8005cc4:	f7ff fd92 	bl	80057ec <acc_rss_integration_mem_free>
 8005cc8:	4620      	mov	r0, r4
 8005cca:	f7ff fd8f 	bl	80057ec <acc_rss_integration_mem_free>
 8005cce:	2600      	movs	r6, #0
 8005cd0:	4630      	mov	r0, r6
 8005cd2:	b00b      	add	sp, #44	; 0x2c
 8005cd4:	ecbd 8b08 	vpop	{d8-d11}
 8005cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cdc:	200004c0 	.word	0x200004c0
 8005ce0:	0800e8c8 	.word	0x0800e8c8
 8005ce4:	0800e8b4 	.word	0x0800e8b4

08005ce8 <destroy>:
 8005ce8:	b510      	push	{r4, lr}
 8005cea:	4604      	mov	r4, r0
 8005cec:	6940      	ldr	r0, [r0, #20]
 8005cee:	b118      	cbz	r0, 8005cf8 <destroy+0x10>
 8005cf0:	f7ff fd7c 	bl	80057ec <acc_rss_integration_mem_free>
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	6163      	str	r3, [r4, #20]
 8005cf8:	bd10      	pop	{r4, pc}
 8005cfa:	bf00      	nop

08005cfc <process_data>:
 8005cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d00:	6944      	ldr	r4, [r0, #20]
 8005d02:	f8b4 70ce 	ldrh.w	r7, [r4, #206]	; 0xce
 8005d06:	b917      	cbnz	r7, 8005d0e <process_data+0x12>
 8005d08:	2001      	movs	r0, #1
 8005d0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d0e:	f8b4 c0c8 	ldrh.w	ip, [r4, #200]	; 0xc8
 8005d12:	f8b4 80c4 	ldrh.w	r8, [r4, #196]	; 0xc4
 8005d16:	f8b4 e0cc 	ldrh.w	lr, [r4, #204]	; 0xcc
 8005d1a:	461d      	mov	r5, r3
 8005d1c:	4616      	mov	r6, r2
 8005d1e:	237c      	movs	r3, #124	; 0x7c
 8005d20:	680a      	ldr	r2, [r1, #0]
 8005d22:	fbb3 f3fe 	udiv	r3, r3, lr
 8005d26:	fb03 f30c 	mul.w	r3, r3, ip
 8005d2a:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 8005d2e:	eb02 0803 	add.w	r8, r2, r3
 8005d32:	4642      	mov	r2, r8
 8005d34:	6801      	ldr	r1, [r0, #0]
 8005d36:	463b      	mov	r3, r7
 8005d38:	2001      	movs	r0, #1
 8005d3a:	f002 f875 	bl	8007e28 <acc_probes_execute_uint16>
 8005d3e:	f8b4 10ce 	ldrh.w	r1, [r4, #206]	; 0xce
 8005d42:	4640      	mov	r0, r8
 8005d44:	f001 ff5a 	bl	8007bfc <acc_alg_cca_u16_calculate>
 8005d48:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8005d84 <process_data+0x88>
 8005d4c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8005d4e:	ed85 0a01 	vstr	s0, [r5, #4]
 8005d52:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8005d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d5a:	bfcc      	ite	gt
 8005d5c:	2201      	movgt	r2, #1
 8005d5e:	2200      	movle	r2, #0
 8005d60:	702a      	strb	r2, [r5, #0]
 8005d62:	b14b      	cbz	r3, 8005d78 <process_data+0x7c>
 8005d64:	2200      	movs	r2, #0
 8005d66:	f8b4 10ce 	ldrh.w	r1, [r4, #206]	; 0xce
 8005d6a:	6833      	ldr	r3, [r6, #0]
 8005d6c:	722a      	strb	r2, [r5, #8]
 8005d6e:	1a5b      	subs	r3, r3, r1
 8005d70:	6033      	str	r3, [r6, #0]
 8005d72:	2001      	movs	r0, #1
 8005d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d78:	f894 20c0 	ldrb.w	r2, [r4, #192]	; 0xc0
 8005d7c:	f082 0201 	eor.w	r2, r2, #1
 8005d80:	e7f1      	b.n	8005d66 <process_data+0x6a>
 8005d82:	bf00      	nop
 8005d84:	42640000 	.word	0x42640000

08005d88 <transfer_data>:
 8005d88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005d8c:	6944      	ldr	r4, [r0, #20]
 8005d8e:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
 8005d92:	b089      	sub	sp, #36	; 0x24
 8005d94:	4680      	mov	r8, r0
 8005d96:	460f      	mov	r7, r1
 8005d98:	4691      	mov	r9, r2
 8005d9a:	b90b      	cbnz	r3, 8005da0 <transfer_data+0x18>
 8005d9c:	f8a4 30c6 	strh.w	r3, [r4, #198]	; 0xc6
 8005da0:	f8b4 20ce 	ldrh.w	r2, [r4, #206]	; 0xce
 8005da4:	f8b4 50c8 	ldrh.w	r5, [r4, #200]	; 0xc8
 8005da8:	f8b4 30cc 	ldrh.w	r3, [r4, #204]	; 0xcc
 8005dac:	a902      	add	r1, sp, #8
 8005dae:	4620      	mov	r0, r4
 8005db0:	267c      	movs	r6, #124	; 0x7c
 8005db2:	fbb6 f3f3 	udiv	r3, r6, r3
 8005db6:	fb03 2505 	mla	r5, r3, r5, r2
 8005dba:	f005 f925 	bl	800b008 <acc_cpd_linear_sweep_get_info>
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	9a02      	ldr	r2, [sp, #8]
 8005dc2:	f8b4 10c6 	ldrh.w	r1, [r4, #198]	; 0xc6
 8005dc6:	f8d8 0000 	ldr.w	r0, [r8]
 8005dca:	442a      	add	r2, r5
 8005dcc:	4419      	add	r1, r3
 8005dce:	f001 fdd7 	bl	8007980 <acc_sensor_protocol_r2_transfer_data>
 8005dd2:	f104 02bc 	add.w	r2, r4, #188	; 0xbc
 8005dd6:	ab01      	add	r3, sp, #4
 8005dd8:	4621      	mov	r1, r4
 8005dda:	4680      	mov	r8, r0
 8005ddc:	f005 f92c 	bl	800b038 <acc_cpd_linear_sweep_check>
 8005de0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005de4:	3b00      	subs	r3, #0
 8005de6:	bf18      	it	ne
 8005de8:	2301      	movne	r3, #1
 8005dea:	a902      	add	r1, sp, #8
 8005dec:	f889 3000 	strb.w	r3, [r9]
 8005df0:	4620      	mov	r0, r4
 8005df2:	f005 f909 	bl	800b008 <acc_cpd_linear_sweep_get_info>
 8005df6:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
 8005dfa:	6838      	ldr	r0, [r7, #0]
 8005dfc:	9902      	ldr	r1, [sp, #8]
 8005dfe:	006a      	lsls	r2, r5, #1
 8005e00:	eb08 0141 	add.w	r1, r8, r1, lsl #1
 8005e04:	4418      	add	r0, r3
 8005e06:	f007 f8d7 	bl	800cfb8 <memmove>
 8005e0a:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
 8005e0e:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
 8005e12:	f8b4 10cc 	ldrh.w	r1, [r4, #204]	; 0xcc
 8005e16:	fbb6 f6f1 	udiv	r6, r6, r1
 8005e1a:	fb03 f306 	mul.w	r3, r3, r6
 8005e1e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8005e22:	4628      	mov	r0, r5
 8005e24:	f8a4 30c6 	strh.w	r3, [r4, #198]	; 0xc6
 8005e28:	f8a4 20c4 	strh.w	r2, [r4, #196]	; 0xc4
 8005e2c:	b009      	add	sp, #36	; 0x24
 8005e2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005e32:	bf00      	nop

08005e34 <measure_noise>:
 8005e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e38:	b0b7      	sub	sp, #220	; 0xdc
 8005e3a:	4604      	mov	r4, r0
 8005e3c:	4688      	mov	r8, r1
 8005e3e:	4616      	mov	r6, r2
 8005e40:	f7ff fce6 	bl	8005810 <acc_rss_integration_log_level>
 8005e44:	2803      	cmp	r0, #3
 8005e46:	d905      	bls.n	8005e54 <measure_noise+0x20>
 8005e48:	4b41      	ldr	r3, [pc, #260]	; (8005f50 <measure_noise+0x11c>)
 8005e4a:	4a42      	ldr	r2, [pc, #264]	; (8005f54 <measure_noise+0x120>)
 8005e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e4e:	4942      	ldr	r1, [pc, #264]	; (8005f58 <measure_noise+0x124>)
 8005e50:	2004      	movs	r0, #4
 8005e52:	4798      	blx	r3
 8005e54:	f8d4 9014 	ldr.w	r9, [r4, #20]
 8005e58:	f8d4 a000 	ldr.w	sl, [r4]
 8005e5c:	4649      	mov	r1, r9
 8005e5e:	22bc      	movs	r2, #188	; 0xbc
 8005e60:	a807      	add	r0, sp, #28
 8005e62:	f007 f907 	bl	800d074 <memcpy>
 8005e66:	9d30      	ldr	r5, [sp, #192]	; 0xc0
 8005e68:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8005e6c:	f8d8 1000 	ldr.w	r1, [r8]
 8005e70:	f8b9 b0cc 	ldrh.w	fp, [r9, #204]	; 0xcc
 8005e74:	00ad      	lsls	r5, r5, #2
 8005e76:	1e6f      	subs	r7, r5, #1
 8005e78:	972c      	str	r7, [sp, #176]	; 0xb0
 8005e7a:	2702      	movs	r7, #2
 8005e7c:	2400      	movs	r4, #0
 8005e7e:	ab07      	add	r3, sp, #28
 8005e80:	972d      	str	r7, [sp, #180]	; 0xb4
 8005e82:	4650      	mov	r0, sl
 8005e84:	2701      	movs	r7, #1
 8005e86:	971d      	str	r7, [sp, #116]	; 0x74
 8005e88:	9422      	str	r4, [sp, #136]	; 0x88
 8005e8a:	941c      	str	r4, [sp, #112]	; 0x70
 8005e8c:	f88d 40c8 	strb.w	r4, [sp, #200]	; 0xc8
 8005e90:	9434      	str	r4, [sp, #208]	; 0xd0
 8005e92:	f004 fb2b 	bl	800a4ec <acc_cpd_linear_sweep_load_program>
 8005e96:	4650      	mov	r0, sl
 8005e98:	f005 f860 	bl	800af5c <acc_cpd_linear_sweep_run_program>
 8005e9c:	4650      	mov	r0, sl
 8005e9e:	466b      	mov	r3, sp
 8005ea0:	2264      	movs	r2, #100	; 0x64
 8005ea2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8005ea6:	f001 fc21 	bl	80076ec <acc_sensor_protocol_r2_wait_for_event>
 8005eaa:	4607      	mov	r7, r0
 8005eac:	b918      	cbnz	r0, 8005eb6 <measure_noise+0x82>
 8005eae:	4638      	mov	r0, r7
 8005eb0:	b037      	add	sp, #220	; 0xdc
 8005eb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eb6:	a901      	add	r1, sp, #4
 8005eb8:	4648      	mov	r0, r9
 8005eba:	237c      	movs	r3, #124	; 0x7c
 8005ebc:	f8d8 8000 	ldr.w	r8, [r8]
 8005ec0:	fbb3 fbfb 	udiv	fp, r3, fp
 8005ec4:	b2ad      	uxth	r5, r5
 8005ec6:	f005 f89f 	bl	800b008 <acc_cpd_linear_sweep_get_info>
 8005eca:	9a01      	ldr	r2, [sp, #4]
 8005ecc:	fb0b f505 	mul.w	r5, fp, r5
 8005ed0:	4641      	mov	r1, r8
 8005ed2:	442a      	add	r2, r5
 8005ed4:	4650      	mov	r0, sl
 8005ed6:	f001 fd53 	bl	8007980 <acc_sensor_protocol_r2_transfer_data>
 8005eda:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8005ede:	4680      	mov	r8, r0
 8005ee0:	4650      	mov	r0, sl
 8005ee2:	f001 fc9b 	bl	800781c <acc_sensor_protocol_r2_stop>
 8005ee6:	4648      	mov	r0, r9
 8005ee8:	a901      	add	r1, sp, #4
 8005eea:	f005 f88d 	bl	800b008 <acc_cpd_linear_sweep_get_info>
 8005eee:	9801      	ldr	r0, [sp, #4]
 8005ef0:	2d0e      	cmp	r5, #14
 8005ef2:	eb08 0040 	add.w	r0, r8, r0, lsl #1
 8005ef6:	d91c      	bls.n	8005f32 <measure_noise+0xfe>
 8005ef8:	006a      	lsls	r2, r5, #1
 8005efa:	3a02      	subs	r2, #2
 8005efc:	f100 011a 	add.w	r1, r0, #26
 8005f00:	eb00 0e02 	add.w	lr, r0, r2
 8005f04:	460b      	mov	r3, r1
 8005f06:	f833 cf02 	ldrh.w	ip, [r3, #2]!
 8005f0a:	459e      	cmp	lr, r3
 8005f0c:	4464      	add	r4, ip
 8005f0e:	d1fa      	bne.n	8005f06 <measure_noise+0xd2>
 8005f10:	4410      	add	r0, r2
 8005f12:	2200      	movs	r2, #0
 8005f14:	3d0e      	subs	r5, #14
 8005f16:	fbb4 f4f5 	udiv	r4, r4, r5
 8005f1a:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 8005f1e:	1b1b      	subs	r3, r3, r4
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	bfb8      	it	lt
 8005f24:	425b      	neglt	r3, r3
 8005f26:	4288      	cmp	r0, r1
 8005f28:	441a      	add	r2, r3
 8005f2a:	d1f6      	bne.n	8005f1a <measure_noise+0xe6>
 8005f2c:	fbb2 f4f5 	udiv	r4, r2, r5
 8005f30:	b2a4      	uxth	r4, r4
 8005f32:	8034      	strh	r4, [r6, #0]
 8005f34:	f7ff fc6c 	bl	8005810 <acc_rss_integration_log_level>
 8005f38:	2803      	cmp	r0, #3
 8005f3a:	d9b8      	bls.n	8005eae <measure_noise+0x7a>
 8005f3c:	4b04      	ldr	r3, [pc, #16]	; (8005f50 <measure_noise+0x11c>)
 8005f3e:	4a07      	ldr	r2, [pc, #28]	; (8005f5c <measure_noise+0x128>)
 8005f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f42:	4905      	ldr	r1, [pc, #20]	; (8005f58 <measure_noise+0x124>)
 8005f44:	2004      	movs	r0, #4
 8005f46:	4798      	blx	r3
 8005f48:	4638      	mov	r0, r7
 8005f4a:	b037      	add	sp, #220	; 0xdc
 8005f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f50:	200004c0 	.word	0x200004c0
 8005f54:	0800e8e8 	.word	0x0800e8e8
 8005f58:	0800e90c 	.word	0x0800e90c
 8005f5c:	0800e920 	.word	0x0800e920

08005f60 <calibrate>:
 8005f60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005f64:	b09b      	sub	sp, #108	; 0x6c
 8005f66:	4604      	mov	r4, r0
 8005f68:	460d      	mov	r5, r1
 8005f6a:	4616      	mov	r6, r2
 8005f6c:	461f      	mov	r7, r3
 8005f6e:	f7ff fc4f 	bl	8005810 <acc_rss_integration_log_level>
 8005f72:	2803      	cmp	r0, #3
 8005f74:	d905      	bls.n	8005f82 <calibrate+0x22>
 8005f76:	4b46      	ldr	r3, [pc, #280]	; (8006090 <calibrate+0x130>)
 8005f78:	4a46      	ldr	r2, [pc, #280]	; (8006094 <calibrate+0x134>)
 8005f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f7c:	4946      	ldr	r1, [pc, #280]	; (8006098 <calibrate+0x138>)
 8005f7e:	2004      	movs	r0, #4
 8005f80:	4798      	blx	r3
 8005f82:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8005f86:	6824      	ldr	r4, [r4, #0]
 8005f88:	2300      	movs	r3, #0
 8005f8a:	f8c8 30bc 	str.w	r3, [r8, #188]	; 0xbc
 8005f8e:	f7ff fb8f 	bl	80056b0 <acc_rss_integration_get_sensor_reference_frequency>
 8005f92:	a812      	add	r0, sp, #72	; 0x48
 8005f94:	a902      	add	r1, sp, #8
 8005f96:	ed8d 0a12 	vstr	s0, [sp, #72]	; 0x48
 8005f9a:	f001 fffb 	bl	8007f94 <acc_cpd_pll_divisors_calculate>
 8005f9e:	b920      	cbnz	r0, 8005faa <calibrate+0x4a>
 8005fa0:	2400      	movs	r4, #0
 8005fa2:	4620      	mov	r0, r4
 8005fa4:	b01b      	add	sp, #108	; 0x6c
 8005fa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005faa:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8005fae:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8005fb2:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8005fb6:	f8bd c010 	ldrh.w	ip, [sp, #16]
 8005fba:	9207      	str	r2, [sp, #28]
 8005fbc:	e9cd 4305 	strd	r4, r3, [sp, #20]
 8005fc0:	9008      	str	r0, [sp, #32]
 8005fc2:	6869      	ldr	r1, [r5, #4]
 8005fc4:	6828      	ldr	r0, [r5, #0]
 8005fc6:	f8ad c024 	strh.w	ip, [sp, #36]	; 0x24
 8005fca:	466b      	mov	r3, sp
 8005fcc:	aa05      	add	r2, sp, #20
 8005fce:	f002 ff0d 	bl	8008dec <acc_cpd_cbank_and_vana_calibration>
 8005fd2:	2800      	cmp	r0, #0
 8005fd4:	d0e4      	beq.n	8005fa0 <calibrate+0x40>
 8005fd6:	f8b8 90ce 	ldrh.w	r9, [r8, #206]	; 0xce
 8005fda:	f898 10d0 	ldrb.w	r1, [r8, #208]	; 0xd0
 8005fde:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8005fe2:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
 8005fe6:	f1b9 0000 	subs.w	r0, r9, #0
 8005fea:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8005fee:	920b      	str	r2, [sp, #44]	; 0x2c
 8005ff0:	bf18      	it	ne
 8005ff2:	2001      	movne	r0, #1
 8005ff4:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8005ff8:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
 8005ffc:	910c      	str	r1, [sp, #48]	; 0x30
 8005ffe:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8006002:	9900      	ldr	r1, [sp, #0]
 8006004:	940a      	str	r4, [sp, #40]	; 0x28
 8006006:	900d      	str	r0, [sp, #52]	; 0x34
 8006008:	f89d 4004 	ldrb.w	r4, [sp, #4]
 800600c:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8006010:	910f      	str	r1, [sp, #60]	; 0x3c
 8006012:	ab12      	add	r3, sp, #72	; 0x48
 8006014:	e9d5 0100 	ldrd	r0, r1, [r5]
 8006018:	aa0a      	add	r2, sp, #40	; 0x28
 800601a:	9410      	str	r4, [sp, #64]	; 0x40
 800601c:	f8ad 9046 	strh.w	r9, [sp, #70]	; 0x46
 8006020:	f003 f936 	bl	8009290 <acc_cpd_dll_calibration>
 8006024:	4604      	mov	r4, r0
 8006026:	f1b9 0f00 	cmp.w	r9, #0
 800602a:	d004      	beq.n	8006036 <calibrate+0xd6>
 800602c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800602e:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
 8006032:	607a      	str	r2, [r7, #4]
 8006034:	703b      	strb	r3, [r7, #0]
 8006036:	2c00      	cmp	r4, #0
 8006038:	d0b2      	beq.n	8005fa0 <calibrate+0x40>
 800603a:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	; 0x48
 800603e:	9b00      	ldr	r3, [sp, #0]
 8006040:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8006044:	80b3      	strh	r3, [r6, #4]
 8006046:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006048:	80f0      	strh	r0, [r6, #6]
 800604a:	8131      	strh	r1, [r6, #8]
 800604c:	f8bd 0054 	ldrh.w	r0, [sp, #84]	; 0x54
 8006050:	f8bd 1056 	ldrh.w	r1, [sp, #86]	; 0x56
 8006054:	8172      	strh	r2, [r6, #10]
 8006056:	81b3      	strh	r3, [r6, #12]
 8006058:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
 800605c:	81f0      	strh	r0, [r6, #14]
 800605e:	2306      	movs	r3, #6
 8006060:	8231      	strh	r1, [r6, #16]
 8006062:	8272      	strh	r2, [r6, #18]
 8006064:	6033      	str	r3, [r6, #0]
 8006066:	f7ff fbd3 	bl	8005810 <acc_rss_integration_log_level>
 800606a:	2803      	cmp	r0, #3
 800606c:	d905      	bls.n	800607a <calibrate+0x11a>
 800606e:	4b08      	ldr	r3, [pc, #32]	; (8006090 <calibrate+0x130>)
 8006070:	4a0a      	ldr	r2, [pc, #40]	; (800609c <calibrate+0x13c>)
 8006072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006074:	4908      	ldr	r1, [pc, #32]	; (8006098 <calibrate+0x138>)
 8006076:	2004      	movs	r0, #4
 8006078:	4798      	blx	r3
 800607a:	f7ff fbc9 	bl	8005810 <acc_rss_integration_log_level>
 800607e:	2801      	cmp	r0, #1
 8006080:	d98f      	bls.n	8005fa2 <calibrate+0x42>
 8006082:	4b03      	ldr	r3, [pc, #12]	; (8006090 <calibrate+0x130>)
 8006084:	4a06      	ldr	r2, [pc, #24]	; (80060a0 <calibrate+0x140>)
 8006086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006088:	4903      	ldr	r1, [pc, #12]	; (8006098 <calibrate+0x138>)
 800608a:	2002      	movs	r0, #2
 800608c:	4798      	blx	r3
 800608e:	e788      	b.n	8005fa2 <calibrate+0x42>
 8006090:	200004c0 	.word	0x200004c0
 8006094:	0800e940 	.word	0x0800e940
 8006098:	0800e90c 	.word	0x0800e90c
 800609c:	0800e960 	.word	0x0800e960
 80060a0:	0800e97c 	.word	0x0800e97c

080060a4 <set_calibration_context>:
 80060a4:	b570      	push	{r4, r5, r6, lr}
 80060a6:	680b      	ldr	r3, [r1, #0]
 80060a8:	2b06      	cmp	r3, #6
 80060aa:	b08c      	sub	sp, #48	; 0x30
 80060ac:	d00b      	beq.n	80060c6 <set_calibration_context+0x22>
 80060ae:	4929      	ldr	r1, [pc, #164]	; (8006154 <set_calibration_context+0xb0>)
 80060b0:	4a29      	ldr	r2, [pc, #164]	; (8006158 <set_calibration_context+0xb4>)
 80060b2:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 80060b4:	4929      	ldr	r1, [pc, #164]	; (800615c <set_calibration_context+0xb8>)
 80060b6:	2006      	movs	r0, #6
 80060b8:	9000      	str	r0, [sp, #0]
 80060ba:	2000      	movs	r0, #0
 80060bc:	47a0      	blx	r4
 80060be:	2600      	movs	r6, #0
 80060c0:	4630      	mov	r0, r6
 80060c2:	b00c      	add	sp, #48	; 0x30
 80060c4:	bd70      	pop	{r4, r5, r6, pc}
 80060c6:	460d      	mov	r5, r1
 80060c8:	4604      	mov	r4, r0
 80060ca:	f7ff faf1 	bl	80056b0 <acc_rss_integration_get_sensor_reference_frequency>
 80060ce:	a806      	add	r0, sp, #24
 80060d0:	a903      	add	r1, sp, #12
 80060d2:	ed8d 0a06 	vstr	s0, [sp, #24]
 80060d6:	f001 ff5d 	bl	8007f94 <acc_cpd_pll_divisors_calculate>
 80060da:	4606      	mov	r6, r0
 80060dc:	2800      	cmp	r0, #0
 80060de:	d0ef      	beq.n	80060c0 <set_calibration_context+0x1c>
 80060e0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80060e4:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80060e8:	6063      	str	r3, [r4, #4]
 80060ea:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80060ee:	60a2      	str	r2, [r4, #8]
 80060f0:	6023      	str	r3, [r4, #0]
 80060f2:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80060f6:	88ab      	ldrh	r3, [r5, #4]
 80060f8:	81a2      	strh	r2, [r4, #12]
 80060fa:	88ea      	ldrh	r2, [r5, #6]
 80060fc:	6123      	str	r3, [r4, #16]
 80060fe:	892b      	ldrh	r3, [r5, #8]
 8006100:	6162      	str	r2, [r4, #20]
 8006102:	896a      	ldrh	r2, [r5, #10]
 8006104:	61a3      	str	r3, [r4, #24]
 8006106:	89ab      	ldrh	r3, [r5, #12]
 8006108:	61e2      	str	r2, [r4, #28]
 800610a:	8a2a      	ldrh	r2, [r5, #16]
 800610c:	6223      	str	r3, [r4, #32]
 800610e:	8a6b      	ldrh	r3, [r5, #18]
 8006110:	89e8      	ldrh	r0, [r5, #14]
 8006112:	84a2      	strh	r2, [r4, #36]	; 0x24
 8006114:	84e3      	strh	r3, [r4, #38]	; 0x26
 8006116:	aa06      	add	r2, sp, #24
 8006118:	217c      	movs	r1, #124	; 0x7c
 800611a:	f002 f821 	bl	8008160 <acc_dll_calculate_area_settings>
 800611e:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 8006122:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 8006126:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800612a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800612e:	62a0      	str	r0, [r4, #40]	; 0x28
 8006130:	62e1      	str	r1, [r4, #44]	; 0x2c
 8006132:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
 8006136:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 800613a:	6322      	str	r2, [r4, #48]	; 0x30
 800613c:	6363      	str	r3, [r4, #52]	; 0x34
 800613e:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8006142:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8006146:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
 800614a:	4630      	mov	r0, r6
 800614c:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
 8006150:	b00c      	add	sp, #48	; 0x30
 8006152:	bd70      	pop	{r4, r5, r6, pc}
 8006154:	200004c0 	.word	0x200004c0
 8006158:	0800e99c 	.word	0x0800e99c
 800615c:	0800e90c 	.word	0x0800e90c

08006160 <get_package_range_coarse_max>:
 8006160:	b530      	push	{r4, r5, lr}
 8006162:	f8b0 50cc 	ldrh.w	r5, [r0, #204]	; 0xcc
 8006166:	b087      	sub	sp, #28
 8006168:	b185      	cbz	r5, 800618c <get_package_range_coarse_max+0x2c>
 800616a:	4604      	mov	r4, r0
 800616c:	4669      	mov	r1, sp
 800616e:	f004 ff4b 	bl	800b008 <acc_cpd_linear_sweep_get_info>
 8006172:	9b00      	ldr	r3, [sp, #0]
 8006174:	f8b4 00ce 	ldrh.w	r0, [r4, #206]	; 0xce
 8006178:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 800617c:	1a1b      	subs	r3, r3, r0
 800617e:	207c      	movs	r0, #124	; 0x7c
 8006180:	fbb0 f0f5 	udiv	r0, r0, r5
 8006184:	fbb3 f0f0 	udiv	r0, r3, r0
 8006188:	b007      	add	sp, #28
 800618a:	bd30      	pop	{r4, r5, pc}
 800618c:	4802      	ldr	r0, [pc, #8]	; (8006198 <get_package_range_coarse_max+0x38>)
 800618e:	f44f 71a9 	mov.w	r1, #338	; 0x152
 8006192:	f001 fd61 	bl	8007c58 <acc_assert_fail>
 8006196:	bf00      	nop
 8006198:	0800e90c 	.word	0x0800e90c

0800619c <initialize>:
 800619c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061a0:	460d      	mov	r5, r1
 80061a2:	f891 1032 	ldrb.w	r1, [r1, #50]	; 0x32
 80061a6:	2906      	cmp	r1, #6
 80061a8:	b08f      	sub	sp, #60	; 0x3c
 80061aa:	4606      	mov	r6, r0
 80061ac:	4690      	mov	r8, r2
 80061ae:	461f      	mov	r7, r3
 80061b0:	d00d      	beq.n	80061ce <initialize+0x32>
 80061b2:	2909      	cmp	r1, #9
 80061b4:	d00b      	beq.n	80061ce <initialize+0x32>
 80061b6:	4ba8      	ldr	r3, [pc, #672]	; (8006458 <initialize+0x2bc>)
 80061b8:	4aa8      	ldr	r2, [pc, #672]	; (800645c <initialize+0x2c0>)
 80061ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061bc:	49a8      	ldr	r1, [pc, #672]	; (8006460 <initialize+0x2c4>)
 80061be:	2000      	movs	r0, #0
 80061c0:	4798      	blx	r3
 80061c2:	f04f 0900 	mov.w	r9, #0
 80061c6:	4648      	mov	r0, r9
 80061c8:	b00f      	add	sp, #60	; 0x3c
 80061ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061ce:	aa06      	add	r2, sp, #24
 80061d0:	f10d 0116 	add.w	r1, sp, #22
 80061d4:	4628      	mov	r0, r5
 80061d6:	6974      	ldr	r4, [r6, #20]
 80061d8:	f7ff f91a 	bl	8005410 <acc_base_configuration_cca_get>
 80061dc:	2800      	cmp	r0, #0
 80061de:	d03f      	beq.n	8006260 <initialize+0xc4>
 80061e0:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 80061e4:	f89d 0016 	ldrb.w	r0, [sp, #22]
 80061e8:	f8a4 30ce 	strh.w	r3, [r4, #206]	; 0xce
 80061ec:	f884 00d0 	strb.w	r0, [r4, #208]	; 0xd0
 80061f0:	4628      	mov	r0, r5
 80061f2:	f7ff f89f 	bl	8005334 <acc_base_configuration_downsampling_factor_get>
 80061f6:	2300      	movs	r3, #0
 80061f8:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
 80061fc:	f8a4 00cc 	strh.w	r0, [r4, #204]	; 0xcc
 8006200:	4628      	mov	r0, r5
 8006202:	f7fe fef9 	bl	8004ff8 <acc_base_configuration_tx_disable_get>
 8006206:	f04f 0b01 	mov.w	fp, #1
 800620a:	f884 00c0 	strb.w	r0, [r4, #192]	; 0xc0
 800620e:	f884 b0ad 	strb.w	fp, [r4, #173]	; 0xad
 8006212:	4620      	mov	r0, r4
 8006214:	f7ff ffa4 	bl	8006160 <get_package_range_coarse_max>
 8006218:	4b92      	ldr	r3, [pc, #584]	; (8006464 <initialize+0x2c8>)
 800621a:	b280      	uxth	r0, r0
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	9002      	str	r0, [sp, #8]
 8006220:	237c      	movs	r3, #124	; 0x7c
 8006222:	f106 0a04 	add.w	sl, r6, #4
 8006226:	9201      	str	r2, [sp, #4]
 8006228:	9300      	str	r3, [sp, #0]
 800622a:	4652      	mov	r2, sl
 800622c:	463b      	mov	r3, r7
 800622e:	4641      	mov	r1, r8
 8006230:	4628      	mov	r0, r5
 8006232:	f000 fa95 	bl	8006760 <acc_radar_engine_common_sweep_w_dly_initialize_range>
 8006236:	4681      	mov	r9, r0
 8006238:	2800      	cmp	r0, #0
 800623a:	d0c4      	beq.n	80061c6 <initialize+0x2a>
 800623c:	4628      	mov	r0, r5
 800623e:	f7ff f815 	bl	800526c <acc_base_configuration_sweep_type_debug_get>
 8006242:	b980      	cbnz	r0, 8006266 <initialize+0xca>
 8006244:	e9c4 0b12 	strd	r0, fp, [r4, #72]	; 0x48
 8006248:	2300      	movs	r3, #0
 800624a:	6523      	str	r3, [r4, #80]	; 0x50
 800624c:	4628      	mov	r0, r5
 800624e:	f7fe ff8d 	bl	800516c <acc_base_configuration_repetition_mode_get>
 8006252:	2803      	cmp	r0, #3
 8006254:	f200 80d8 	bhi.w	8006408 <initialize+0x26c>
 8006258:	e8df f000 	tbb	[pc, r0]
 800625c:	0abfd9d1 	.word	0x0abfd9d1
 8006260:	f8a4 00ce 	strh.w	r0, [r4, #206]	; 0xce
 8006264:	e7c2      	b.n	80061ec <initialize+0x50>
 8006266:	2300      	movs	r3, #0
 8006268:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
 800626c:	64e3      	str	r3, [r4, #76]	; 0x4c
 800626e:	e7eb      	b.n	8006248 <initialize+0xac>
 8006270:	4628      	mov	r0, r5
 8006272:	f10d 0b20 	add.w	fp, sp, #32
 8006276:	f7fe ff81 	bl	800517c <acc_base_configuration_update_rate_get>
 800627a:	a907      	add	r1, sp, #28
 800627c:	4658      	mov	r0, fp
 800627e:	f000 fa27 	bl	80066d0 <acc_radar_engine_common_frequency_to_main_clk>
 8006282:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8006286:	2301      	movs	r3, #1
 8006288:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
 800628c:	e9c4 1217 	strd	r1, r2, [r4, #92]	; 0x5c
 8006290:	4628      	mov	r0, r5
 8006292:	f7fe fea1 	bl	8004fd8 <acc_base_configuration_power_save_mode_get>
 8006296:	2804      	cmp	r0, #4
 8006298:	d807      	bhi.n	80062aa <initialize+0x10e>
 800629a:	e8df f000 	tbb	[pc, r0]
 800629e:	0303      	.short	0x0303
 80062a0:	c1c5      	.short	0xc1c5
 80062a2:	03          	.byte	0x03
 80062a3:	00          	.byte	0x00
 80062a4:	2301      	movs	r3, #1
 80062a6:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
 80062aa:	f10d 021a 	add.w	r2, sp, #26
 80062ae:	f10d 0117 	add.w	r1, sp, #23
 80062b2:	4628      	mov	r0, r5
 80062b4:	f7ff f8ac 	bl	8005410 <acc_base_configuration_cca_get>
 80062b8:	2800      	cmp	r0, #0
 80062ba:	f000 80ba 	beq.w	8006432 <initialize+0x296>
 80062be:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 80062c2:	2201      	movs	r2, #1
 80062c4:	3b01      	subs	r3, #1
 80062c6:	e9c4 232d 	strd	r2, r3, [r4, #180]	; 0xb4
 80062ca:	4628      	mov	r0, r5
 80062cc:	f7fe fe94 	bl	8004ff8 <acc_base_configuration_tx_disable_get>
 80062d0:	2800      	cmp	r0, #0
 80062d2:	f000 80bb 	beq.w	800644c <initialize+0x2b0>
 80062d6:	2000      	movs	r0, #0
 80062d8:	66e0      	str	r0, [r4, #108]	; 0x6c
 80062da:	4628      	mov	r0, r5
 80062dc:	f7fe fea0 	bl	8005020 <acc_base_configuration_decrease_tx_emission_get>
 80062e0:	f080 0001 	eor.w	r0, r0, #1
 80062e4:	2301      	movs	r3, #1
 80062e6:	b2c0      	uxtb	r0, r0
 80062e8:	e9c4 031c 	strd	r0, r3, [r4, #112]	; 0x70
 80062ec:	4628      	mov	r0, r5
 80062ee:	f7fe feab 	bl	8005048 <acc_base_configuration_hw_accelerated_average_samples_get>
 80062f2:	3801      	subs	r0, #1
 80062f4:	67a0      	str	r0, [r4, #120]	; 0x78
 80062f6:	4628      	mov	r0, r5
 80062f8:	f7fe ff58 	bl	80051ac <acc_base_configuration_gain_get>
 80062fc:	67e0      	str	r0, [r4, #124]	; 0x7c
 80062fe:	4628      	mov	r0, r5
 8006300:	f7fe ff64 	bl	80051cc <acc_base_configuration_integrator_get>
 8006304:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
 8006308:	4628      	mov	r0, r5
 800630a:	f7fe ff87 	bl	800521c <acc_base_configuration_integrator_ramp_up_get>
 800630e:	3801      	subs	r0, #1
 8006310:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 8006314:	4628      	mov	r0, r5
 8006316:	f7fe ff6d 	bl	80051f4 <acc_base_configuration_wg_duration_get>
 800631a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 800631e:	4628      	mov	r0, r5
 8006320:	f7fe ffea 	bl	80052f8 <acc_base_configuration_bba_fast_refresh_disable_get>
 8006324:	f884 008d 	strb.w	r0, [r4, #141]	; 0x8d
 8006328:	4628      	mov	r0, r5
 800632a:	f7ff f803 	bl	8005334 <acc_base_configuration_downsampling_factor_get>
 800632e:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
 8006332:	4628      	mov	r0, r5
 8006334:	f7fe ffcc 	bl	80052d0 <acc_base_configuration_bba_reset_clocksync_perturbation_get>
 8006338:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c
 800633c:	4628      	mov	r0, r5
 800633e:	f7fe ffd1 	bl	80052e4 <acc_base_configuration_bba_linear_resync_perturbation_get>
 8006342:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
 8006346:	4628      	mov	r0, r5
 8006348:	f7ff f826 	bl	8005398 <acc_base_configuration_asynchronous_measurement_get>
 800634c:	88b2      	ldrh	r2, [r6, #4]
 800634e:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8006352:	f080 0001 	eor.w	r0, r0, #1
 8006356:	2301      	movs	r3, #1
 8006358:	f884 00ac 	strb.w	r0, [r4, #172]	; 0xac
 800635c:	f884 30ad 	strb.w	r3, [r4, #173]	; 0xad
 8006360:	4650      	mov	r0, sl
 8006362:	f000 fcc9 	bl	8006cf8 <acc_radar_engine_common_sweep_w_dly_stitching_required>
 8006366:	2800      	cmp	r0, #0
 8006368:	d16c      	bne.n	8006444 <initialize+0x2a8>
 800636a:	8970      	ldrh	r0, [r6, #10]
 800636c:	f9b6 3008 	ldrsh.w	r3, [r6, #8]
 8006370:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 8006374:	3801      	subs	r0, #1
 8006376:	88f3      	ldrh	r3, [r6, #6]
 8006378:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 800637c:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
 8006380:	f7ff f996 	bl	80056b0 <acc_rss_integration_get_sensor_reference_frequency>
 8006384:	893b      	ldrh	r3, [r7, #8]
 8006386:	ed84 0a2c 	vstr	s0, [r4, #176]	; 0xb0
 800638a:	f44f 7261 	mov.w	r2, #900	; 0x384
 800638e:	f8a8 2014 	strh.w	r2, [r8, #20]
 8006392:	f8b4 10cc 	ldrh.w	r1, [r4, #204]	; 0xcc
 8006396:	227c      	movs	r2, #124	; 0x7c
 8006398:	fbb2 f2f1 	udiv	r2, r2, r1
 800639c:	fb03 f302 	mul.w	r3, r3, r2
 80063a0:	2200      	movs	r2, #0
 80063a2:	817b      	strh	r3, [r7, #10]
 80063a4:	833a      	strh	r2, [r7, #24]
 80063a6:	4659      	mov	r1, fp
 80063a8:	4620      	mov	r0, r4
 80063aa:	f004 fe2d 	bl	800b008 <acc_cpd_linear_sweep_get_info>
 80063ae:	465a      	mov	r2, fp
 80063b0:	6831      	ldr	r1, [r6, #0]
 80063b2:	2301      	movs	r3, #1
 80063b4:	2013      	movs	r0, #19
 80063b6:	f001 fd37 	bl	8007e28 <acc_probes_execute_uint16>
 80063ba:	f000 fcf9 	bl	8006db0 <acc_sensor_r2_get_max_header_length>
 80063be:	f8b4 20ce 	ldrh.w	r2, [r4, #206]	; 0xce
 80063c2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80063c6:	4413      	add	r3, r2
 80063c8:	4418      	add	r0, r3
 80063ca:	81f8      	strh	r0, [r7, #14]
 80063cc:	f44f 6316 	mov.w	r3, #2400	; 0x960
 80063d0:	4648      	mov	r0, r9
 80063d2:	81bb      	strh	r3, [r7, #12]
 80063d4:	b00f      	add	sp, #60	; 0x3c
 80063d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063da:	4628      	mov	r0, r5
 80063dc:	f10d 0b20 	add.w	fp, sp, #32
 80063e0:	f7fe fecc 	bl	800517c <acc_base_configuration_update_rate_get>
 80063e4:	a907      	add	r1, sp, #28
 80063e6:	4658      	mov	r0, fp
 80063e8:	f000 f972 	bl	80066d0 <acc_radar_engine_common_frequency_to_main_clk>
 80063ec:	2301      	movs	r3, #1
 80063ee:	9a07      	ldr	r2, [sp, #28]
 80063f0:	6563      	str	r3, [r4, #84]	; 0x54
 80063f2:	2100      	movs	r1, #0
 80063f4:	9b08      	ldr	r3, [sp, #32]
 80063f6:	6623      	str	r3, [r4, #96]	; 0x60
 80063f8:	e9c4 1216 	strd	r1, r2, [r4, #88]	; 0x58
 80063fc:	e748      	b.n	8006290 <initialize+0xf4>
 80063fe:	2300      	movs	r3, #0
 8006400:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
 8006404:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
 8006408:	f10d 0b20 	add.w	fp, sp, #32
 800640c:	e740      	b.n	8006290 <initialize+0xf4>
 800640e:	2300      	movs	r3, #0
 8006410:	2201      	movs	r2, #1
 8006412:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
 8006416:	6563      	str	r3, [r4, #84]	; 0x54
 8006418:	65a2      	str	r2, [r4, #88]	; 0x58
 800641a:	f10d 0b20 	add.w	fp, sp, #32
 800641e:	e737      	b.n	8006290 <initialize+0xf4>
 8006420:	2300      	movs	r3, #0
 8006422:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
 8006426:	e740      	b.n	80062aa <initialize+0x10e>
 8006428:	2201      	movs	r2, #1
 800642a:	2300      	movs	r3, #0
 800642c:	e9c4 2319 	strd	r2, r3, [r4, #100]	; 0x64
 8006430:	e73b      	b.n	80062aa <initialize+0x10e>
 8006432:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
 8006436:	4628      	mov	r0, r5
 8006438:	f7fe fdde 	bl	8004ff8 <acc_base_configuration_tx_disable_get>
 800643c:	f080 0001 	eor.w	r0, r0, #1
 8006440:	b2c0      	uxtb	r0, r0
 8006442:	e749      	b.n	80062d8 <initialize+0x13c>
 8006444:	6970      	ldr	r0, [r6, #20]
 8006446:	f7ff fe8b 	bl	8006160 <get_package_range_coarse_max>
 800644a:	e78f      	b.n	800636c <initialize+0x1d0>
 800644c:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8006450:	f080 0001 	eor.w	r0, r0, #1
 8006454:	e740      	b.n	80062d8 <initialize+0x13c>
 8006456:	bf00      	nop
 8006458:	200004c0 	.word	0x200004c0
 800645c:	0800e830 	.word	0x0800e830
 8006460:	0800e90c 	.word	0x0800e90c
 8006464:	0800ea8c 	.word	0x0800ea8c

08006468 <coarse_count_for_next_package>:
 8006468:	b538      	push	{r3, r4, r5, lr}
 800646a:	8983      	ldrh	r3, [r0, #12]
 800646c:	4604      	mov	r4, r0
 800646e:	6940      	ldr	r0, [r0, #20]
 8006470:	3b01      	subs	r3, #1
 8006472:	f8b0 20c2 	ldrh.w	r2, [r0, #194]	; 0xc2
 8006476:	b29b      	uxth	r3, r3
 8006478:	429a      	cmp	r2, r3
 800647a:	d109      	bne.n	8006490 <coarse_count_for_next_package+0x28>
 800647c:	8965      	ldrh	r5, [r4, #10]
 800647e:	f7ff fe6f 	bl	8006160 <get_package_range_coarse_max>
 8006482:	fbb5 f3f0 	udiv	r3, r5, r0
 8006486:	fb03 5010 	mls	r0, r3, r0, r5
 800648a:	b100      	cbz	r0, 800648e <coarse_count_for_next_package+0x26>
 800648c:	bd38      	pop	{r3, r4, r5, pc}
 800648e:	6960      	ldr	r0, [r4, #20]
 8006490:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006494:	f7ff be64 	b.w	8006160 <get_package_range_coarse_max>

08006498 <update_program>:
 8006498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800649c:	6946      	ldr	r6, [r0, #20]
 800649e:	8987      	ldrh	r7, [r0, #12]
 80064a0:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
 80064a2:	f896 20c0 	ldrb.w	r2, [r6, #192]	; 0xc0
 80064a6:	460d      	mov	r5, r1
 80064a8:	fab3 f383 	clz	r3, r3
 80064ac:	2a00      	cmp	r2, #0
 80064ae:	bf18      	it	ne
 80064b0:	4611      	movne	r1, r2
 80064b2:	2f01      	cmp	r7, #1
 80064b4:	ea4f 1353 	mov.w	r3, r3, lsr #5
 80064b8:	bf94      	ite	ls
 80064ba:	f04f 0900 	movls.w	r9, #0
 80064be:	f04f 0901 	movhi.w	r9, #1
 80064c2:	2f01      	cmp	r7, #1
 80064c4:	b085      	sub	sp, #20
 80064c6:	4604      	mov	r4, r0
 80064c8:	ea83 0a01 	eor.w	sl, r3, r1
 80064cc:	d933      	bls.n	8006536 <update_program+0x9e>
 80064ce:	f8b6 30c2 	ldrh.w	r3, [r6, #194]	; 0xc2
 80064d2:	f9b0 b008 	ldrsh.w	fp, [r0, #8]
 80064d6:	3301      	adds	r3, #1
 80064d8:	b29b      	uxth	r3, r3
 80064da:	fbb3 f8f7 	udiv	r8, r3, r7
 80064de:	fb07 3718 	mls	r7, r7, r8, r3
 80064e2:	fa1f f887 	uxth.w	r8, r7
 80064e6:	f8a6 80c2 	strh.w	r8, [r6, #194]	; 0xc2
 80064ea:	4630      	mov	r0, r6
 80064ec:	f7ff fe38 	bl	8006160 <get_package_range_coarse_max>
 80064f0:	4607      	mov	r7, r0
 80064f2:	4620      	mov	r0, r4
 80064f4:	f7ff ffb8 	bl	8006468 <coarse_count_for_next_package>
 80064f8:	f896 20c0 	ldrb.w	r2, [r6, #192]	; 0xc0
 80064fc:	f8c6 00c8 	str.w	r0, [r6, #200]	; 0xc8
 8006500:	fb07 b708 	mla	r7, r7, r8, fp
 8006504:	3801      	subs	r0, #1
 8006506:	e9cd 0701 	strd	r0, r7, [sp, #4]
 800650a:	f88d 9000 	strb.w	r9, [sp]
 800650e:	f88d 9001 	strb.w	r9, [sp, #1]
 8006512:	f88d a002 	strb.w	sl, [sp, #2]
 8006516:	b15a      	cbz	r2, 8006530 <update_program+0x98>
 8006518:	2500      	movs	r5, #0
 800651a:	6820      	ldr	r0, [r4, #0]
 800651c:	9503      	str	r5, [sp, #12]
 800651e:	4669      	mov	r1, sp
 8006520:	f004 fd20 	bl	800af64 <acc_cpd_linear_sweep_update_program>
 8006524:	b108      	cbz	r0, 800652a <update_program+0x92>
 8006526:	9b03      	ldr	r3, [sp, #12]
 8006528:	66f3      	str	r3, [r6, #108]	; 0x6c
 800652a:	b005      	add	sp, #20
 800652c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006530:	f085 0501 	eor.w	r5, r5, #1
 8006534:	e7f1      	b.n	800651a <update_program+0x82>
 8006536:	428b      	cmp	r3, r1
 8006538:	d003      	beq.n	8006542 <update_program+0xaa>
 800653a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800653e:	2700      	movs	r7, #0
 8006540:	e7e1      	b.n	8006506 <update_program+0x6e>
 8006542:	2001      	movs	r0, #1
 8006544:	e7f1      	b.n	800652a <update_program+0x92>
 8006546:	bf00      	nop

08006548 <start>:
 8006548:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800654c:	6944      	ldr	r4, [r0, #20]
 800654e:	f8d4 70b4 	ldr.w	r7, [r4, #180]	; 0xb4
 8006552:	f894 80ac 	ldrb.w	r8, [r4, #172]	; 0xac
 8006556:	f8d4 906c 	ldr.w	r9, [r4, #108]	; 0x6c
 800655a:	2300      	movs	r3, #0
 800655c:	b085      	sub	sp, #20
 800655e:	4606      	mov	r6, r0
 8006560:	460d      	mov	r5, r1
 8006562:	f8a4 30c2 	strh.w	r3, [r4, #194]	; 0xc2
 8006566:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 800656a:	b117      	cbz	r7, 8006572 <start+0x2a>
 800656c:	f1b8 0f00 	cmp.w	r8, #0
 8006570:	d11f      	bne.n	80065b2 <start+0x6a>
 8006572:	4630      	mov	r0, r6
 8006574:	f7ff ff78 	bl	8006468 <coarse_count_for_next_package>
 8006578:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
 800657c:	f7ff f948 	bl	8005810 <acc_rss_integration_log_level>
 8006580:	2803      	cmp	r0, #3
 8006582:	d905      	bls.n	8006590 <start+0x48>
 8006584:	4b2b      	ldr	r3, [pc, #172]	; (8006634 <start+0xec>)
 8006586:	4a2c      	ldr	r2, [pc, #176]	; (8006638 <start+0xf0>)
 8006588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800658a:	492c      	ldr	r1, [pc, #176]	; (800663c <start+0xf4>)
 800658c:	2004      	movs	r0, #4
 800658e:	4798      	blx	r3
 8006590:	e9d5 1200 	ldrd	r1, r2, [r5]
 8006594:	6830      	ldr	r0, [r6, #0]
 8006596:	4623      	mov	r3, r4
 8006598:	f003 ffa8 	bl	800a4ec <acc_cpd_linear_sweep_load_program>
 800659c:	4605      	mov	r5, r0
 800659e:	b950      	cbnz	r0, 80065b6 <start+0x6e>
 80065a0:	4b24      	ldr	r3, [pc, #144]	; (8006634 <start+0xec>)
 80065a2:	4a27      	ldr	r2, [pc, #156]	; (8006640 <start+0xf8>)
 80065a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065a6:	4925      	ldr	r1, [pc, #148]	; (800663c <start+0xf4>)
 80065a8:	4798      	blx	r3
 80065aa:	4628      	mov	r0, r5
 80065ac:	b005      	add	sp, #20
 80065ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80065b2:	66e3      	str	r3, [r4, #108]	; 0x6c
 80065b4:	e7dd      	b.n	8006572 <start+0x2a>
 80065b6:	6830      	ldr	r0, [r6, #0]
 80065b8:	f004 fcd0 	bl	800af5c <acc_cpd_linear_sweep_run_program>
 80065bc:	4605      	mov	r5, r0
 80065be:	2800      	cmp	r0, #0
 80065c0:	d032      	beq.n	8006628 <start+0xe0>
 80065c2:	f1b8 0f00 	cmp.w	r8, #0
 80065c6:	d00f      	beq.n	80065e8 <start+0xa0>
 80065c8:	6931      	ldr	r1, [r6, #16]
 80065ca:	6830      	ldr	r0, [r6, #0]
 80065cc:	f001 f9ae 	bl	800792c <acc_sensor_protocol_r2_wait_for_sync_start>
 80065d0:	b350      	cbz	r0, 8006628 <start+0xe0>
 80065d2:	f7ff f91d 	bl	8005810 <acc_rss_integration_log_level>
 80065d6:	2801      	cmp	r0, #1
 80065d8:	d905      	bls.n	80065e6 <start+0x9e>
 80065da:	4b16      	ldr	r3, [pc, #88]	; (8006634 <start+0xec>)
 80065dc:	4a19      	ldr	r2, [pc, #100]	; (8006644 <start+0xfc>)
 80065de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065e0:	4916      	ldr	r1, [pc, #88]	; (800663c <start+0xf4>)
 80065e2:	2002      	movs	r0, #2
 80065e4:	4798      	blx	r3
 80065e6:	b96f      	cbnz	r7, 8006604 <start+0xbc>
 80065e8:	f7ff f912 	bl	8005810 <acc_rss_integration_log_level>
 80065ec:	2803      	cmp	r0, #3
 80065ee:	d9dc      	bls.n	80065aa <start+0x62>
 80065f0:	4b10      	ldr	r3, [pc, #64]	; (8006634 <start+0xec>)
 80065f2:	4a15      	ldr	r2, [pc, #84]	; (8006648 <start+0x100>)
 80065f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065f6:	4911      	ldr	r1, [pc, #68]	; (800663c <start+0xf4>)
 80065f8:	2004      	movs	r0, #4
 80065fa:	4798      	blx	r3
 80065fc:	4628      	mov	r0, r5
 80065fe:	b005      	add	sp, #20
 8006600:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006604:	2300      	movs	r3, #0
 8006606:	2201      	movs	r2, #1
 8006608:	6830      	ldr	r0, [r6, #0]
 800660a:	f8c4 906c 	str.w	r9, [r4, #108]	; 0x6c
 800660e:	4669      	mov	r1, sp
 8006610:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8006614:	f8cd 900c 	str.w	r9, [sp, #12]
 8006618:	f8ad 3000 	strh.w	r3, [sp]
 800661c:	f88d 2002 	strb.w	r2, [sp, #2]
 8006620:	f004 fca0 	bl	800af64 <acc_cpd_linear_sweep_update_program>
 8006624:	2800      	cmp	r0, #0
 8006626:	d1df      	bne.n	80065e8 <start+0xa0>
 8006628:	2500      	movs	r5, #0
 800662a:	4628      	mov	r0, r5
 800662c:	b005      	add	sp, #20
 800662e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006632:	bf00      	nop
 8006634:	200004c0 	.word	0x200004c0
 8006638:	0800e9dc 	.word	0x0800e9dc
 800663c:	0800e90c 	.word	0x0800e90c
 8006640:	0800ea04 	.word	0x0800ea04
 8006644:	0800ea20 	.word	0x0800ea20
 8006648:	0800ea44 	.word	0x0800ea44

0800664c <acc_radar_engine_linear_create>:
 800664c:	b538      	push	{r3, r4, r5, lr}
 800664e:	4a11      	ldr	r2, [pc, #68]	; (8006694 <acc_radar_engine_linear_create+0x48>)
 8006650:	4604      	mov	r4, r0
 8006652:	460d      	mov	r5, r1
 8006654:	f44f 7393 	mov.w	r3, #294	; 0x126
 8006658:	21d4      	movs	r1, #212	; 0xd4
 800665a:	2001      	movs	r0, #1
 800665c:	f7ff f8a8 	bl	80057b0 <acc_rss_integration_mem_calloc_debug>
 8006660:	6160      	str	r0, [r4, #20]
 8006662:	b1a8      	cbz	r0, 8006690 <acc_radar_engine_linear_create+0x44>
 8006664:	4628      	mov	r0, r5
 8006666:	f7fe fc67 	bl	8004f38 <acc_base_configuration_sensor_get>
 800666a:	6020      	str	r0, [r4, #0]
 800666c:	4628      	mov	r0, r5
 800666e:	f7fe fe93 	bl	8005398 <acc_base_configuration_asynchronous_measurement_get>
 8006672:	73a0      	strb	r0, [r4, #14]
 8006674:	4628      	mov	r0, r5
 8006676:	f7fe fcaf 	bl	8004fd8 <acc_base_configuration_power_save_mode_get>
 800667a:	fab0 f080 	clz	r0, r0
 800667e:	0940      	lsrs	r0, r0, #5
 8006680:	73e0      	strb	r0, [r4, #15]
 8006682:	4628      	mov	r0, r5
 8006684:	f000 f80a 	bl	800669c <acc_radar_engine_common_get_timeout_ms>
 8006688:	4b03      	ldr	r3, [pc, #12]	; (8006698 <acc_radar_engine_linear_create+0x4c>)
 800668a:	6120      	str	r0, [r4, #16]
 800668c:	61a3      	str	r3, [r4, #24]
 800668e:	2001      	movs	r0, #1
 8006690:	bd38      	pop	{r3, r4, r5, pc}
 8006692:	bf00      	nop
 8006694:	0800e90c 	.word	0x0800e90c
 8006698:	0800ea68 	.word	0x0800ea68

0800669c <acc_radar_engine_common_get_timeout_ms>:
 800669c:	b510      	push	{r4, lr}
 800669e:	4604      	mov	r4, r0
 80066a0:	f7fe fd64 	bl	800516c <acc_base_configuration_repetition_mode_get>
 80066a4:	2801      	cmp	r0, #1
 80066a6:	d00d      	beq.n	80066c4 <acc_radar_engine_common_get_timeout_ms+0x28>
 80066a8:	4620      	mov	r0, r4
 80066aa:	f7fe fd67 	bl	800517c <acc_base_configuration_update_rate_get>
 80066ae:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80066cc <acc_radar_engine_common_get_timeout_ms+0x30>
 80066b2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80066b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80066ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066be:	ee17 0a90 	vmov	r0, s15
 80066c2:	bd10      	pop	{r4, pc}
 80066c4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80066c8:	bd10      	pop	{r4, pc}
 80066ca:	bf00      	nop
 80066cc:	44fa0000 	.word	0x44fa0000

080066d0 <acc_radar_engine_common_frequency_to_main_clk>:
 80066d0:	b538      	push	{r3, r4, r5, lr}
 80066d2:	ed2d 8b02 	vpush	{d8}
 80066d6:	4604      	mov	r4, r0
 80066d8:	eeb0 8a40 	vmov.f32	s16, s0
 80066dc:	460d      	mov	r5, r1
 80066de:	f7fe ffe7 	bl	80056b0 <acc_rss_integration_get_sensor_reference_frequency>
 80066e2:	eec0 7a08 	vdiv.f32	s15, s0, s16
 80066e6:	ecbd 8b02 	vpop	{d8}
 80066ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066ee:	ee17 3a90 	vmov	r3, s15
 80066f2:	0c1a      	lsrs	r2, r3, #16
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	602a      	str	r2, [r5, #0]
 80066f8:	6023      	str	r3, [r4, #0]
 80066fa:	bd38      	pop	{r3, r4, r5, pc}

080066fc <get_dt>:
 80066fc:	b508      	push	{r3, lr}
 80066fe:	ed2d 8b02 	vpush	{d8}
 8006702:	ee08 0a10 	vmov	s16, r0
 8006706:	f7fe ffd3 	bl	80056b0 <acc_rss_integration_get_sensor_reference_frequency>
 800670a:	eef0 8a40 	vmov.f32	s17, s0
 800670e:	f001 fd1f 	bl	8008150 <acc_cpd_pll_divisors_ref_divisor>
 8006712:	ee28 0a80 	vmul.f32	s0, s17, s0
 8006716:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800671a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800671e:	eeb8 8a48 	vcvt.f32.u32	s16, s16
 8006722:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8006726:	ecbd 8b02 	vpop	{d8}
 800672a:	bd08      	pop	{r3, pc}

0800672c <points_to_meter>:
 800672c:	b508      	push	{r3, lr}
 800672e:	4603      	mov	r3, r0
 8006730:	ed2d 8b02 	vpush	{d8}
 8006734:	4608      	mov	r0, r1
 8006736:	ee08 3a10 	vmov	s16, r3
 800673a:	f7ff ffdf 	bl	80066fc <get_dt>
 800673e:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8006742:	eddf 7a06 	vldr	s15, [pc, #24]	; 800675c <points_to_meter+0x30>
 8006746:	ee28 8a00 	vmul.f32	s16, s16, s0
 800674a:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800674e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8006752:	ee28 0a00 	vmul.f32	s0, s16, s0
 8006756:	ecbd 8b02 	vpop	{d8}
 800675a:	bd08      	pop	{r3, pc}
 800675c:	4d8ef3c2 	.word	0x4d8ef3c2

08006760 <acc_radar_engine_common_sweep_w_dly_initialize_range>:
 8006760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006764:	ed2d 8b04 	vpush	{d8-d9}
 8006768:	b089      	sub	sp, #36	; 0x24
 800676a:	4689      	mov	r9, r1
 800676c:	9e16      	ldr	r6, [sp, #88]	; 0x58
 800676e:	f89d a05c 	ldrb.w	sl, [sp, #92]	; 0x5c
 8006772:	f9bd b05e 	ldrsh.w	fp, [sp, #94]	; 0x5e
 8006776:	9306      	str	r3, [sp, #24]
 8006778:	4617      	mov	r7, r2
 800677a:	4680      	mov	r8, r0
 800677c:	f7fe fd8a 	bl	8005294 <acc_base_configuration_use_point_range_get>
 8006780:	2800      	cmp	r0, #0
 8006782:	d03d      	beq.n	8006800 <acc_radar_engine_common_sweep_w_dly_initialize_range+0xa0>
 8006784:	4640      	mov	r0, r8
 8006786:	f7fe fcdd 	bl	8005144 <acc_base_configuration_point_start_get>
 800678a:	4605      	mov	r5, r0
 800678c:	4640      	mov	r0, r8
 800678e:	f7fe fce3 	bl	8005158 <acc_base_configuration_point_length_get>
 8006792:	182c      	adds	r4, r5, r0
 8006794:	f1ba 0f00 	cmp.w	sl, #0
 8006798:	d02f      	beq.n	80067fa <acc_radar_engine_common_sweep_w_dly_initialize_range+0x9a>
 800679a:	f06f 020b 	mvn.w	r2, #11
 800679e:	4593      	cmp	fp, r2
 80067a0:	bfb8      	it	lt
 80067a2:	4693      	movlt	fp, r2
 80067a4:	f898 202e 	ldrb.w	r2, [r8, #46]	; 0x2e
 80067a8:	b31a      	cbz	r2, 80067f2 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x92>
 80067aa:	f8b8 3030 	ldrh.w	r3, [r8, #48]	; 0x30
 80067ae:	9307      	str	r3, [sp, #28]
 80067b0:	4640      	mov	r0, r8
 80067b2:	f7fe fdbf 	bl	8005334 <acc_base_configuration_downsampling_factor_get>
 80067b6:	2801      	cmp	r0, #1
 80067b8:	4682      	mov	sl, r0
 80067ba:	d90a      	bls.n	80067d2 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x72>
 80067bc:	2802      	cmp	r0, #2
 80067be:	f000 8121 	beq.w	8006a04 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2a4>
 80067c2:	1b60      	subs	r0, r4, r5
 80067c4:	fb90 f2fa 	sdiv	r2, r0, sl
 80067c8:	fb0a 0a12 	mls	sl, sl, r2, r0
 80067cc:	f1ba 0f00 	cmp.w	sl, #0
 80067d0:	dc55      	bgt.n	800687e <acc_radar_engine_common_sweep_w_dly_initialize_range+0x11e>
 80067d2:	42ac      	cmp	r4, r5
 80067d4:	da61      	bge.n	800689a <acc_radar_engine_common_sweep_w_dly_initialize_range+0x13a>
 80067d6:	4b9b      	ldr	r3, [pc, #620]	; (8006a44 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2e4>)
 80067d8:	4a9b      	ldr	r2, [pc, #620]	; (8006a48 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2e8>)
 80067da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067dc:	499b      	ldr	r1, [pc, #620]	; (8006a4c <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2ec>)
 80067de:	2000      	movs	r0, #0
 80067e0:	4798      	blx	r3
 80067e2:	f04f 0a00 	mov.w	sl, #0
 80067e6:	4650      	mov	r0, sl
 80067e8:	b009      	add	sp, #36	; 0x24
 80067ea:	ecbd 8b04 	vpop	{d8-d9}
 80067ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067f2:	f898 3032 	ldrb.w	r3, [r8, #50]	; 0x32
 80067f6:	9307      	str	r3, [sp, #28]
 80067f8:	e7da      	b.n	80067b0 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x50>
 80067fa:	f06f 0b0b 	mvn.w	fp, #11
 80067fe:	e7d1      	b.n	80067a4 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x44>
 8006800:	4640      	mov	r0, r8
 8006802:	f7fe fba9 	bl	8004f58 <acc_base_configuration_requested_start_get>
 8006806:	4640      	mov	r0, r8
 8006808:	eeb0 8a40 	vmov.f32	s16, s0
 800680c:	f7fe fbc0 	bl	8004f90 <acc_base_configuration_requested_length_get>
 8006810:	4630      	mov	r0, r6
 8006812:	ee78 8a00 	vadd.f32	s17, s16, s0
 8006816:	f7ff ff71 	bl	80066fc <get_dt>
 800681a:	eddf 9a8d 	vldr	s19, [pc, #564]	; 8006a50 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2f0>
 800681e:	ee38 7a08 	vadd.f32	s14, s16, s16
 8006822:	ee20 0a29 	vmul.f32	s0, s0, s19
 8006826:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800682a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800682e:	4630      	mov	r0, r6
 8006830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006834:	eebe 8a00 	vmov.f32	s16, #224	; 0xbf000000 -0.5
 8006838:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 800683c:	bf54      	ite	pl
 800683e:	eeb0 7a49 	vmovpl.f32	s14, s18
 8006842:	eeb0 7a48 	vmovmi.f32	s14, s16
 8006846:	ee77 7a87 	vadd.f32	s15, s15, s14
 800684a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800684e:	ee17 5a90 	vmov	r5, s15
 8006852:	f7ff ff53 	bl	80066fc <get_dt>
 8006856:	ee38 7aa8 	vadd.f32	s14, s17, s17
 800685a:	ee20 0a29 	vmul.f32	s0, s0, s19
 800685e:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8006862:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8006866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800686a:	bf58      	it	pl
 800686c:	eeb0 8a49 	vmovpl.f32	s16, s18
 8006870:	ee37 8a88 	vadd.f32	s16, s15, s16
 8006874:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8006878:	ee17 4a90 	vmov	r4, s15
 800687c:	e78a      	b.n	8006794 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x34>
 800687e:	f7fe ffc7 	bl	8005810 <acc_rss_integration_log_level>
 8006882:	2801      	cmp	r0, #1
 8006884:	d905      	bls.n	8006892 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x132>
 8006886:	496f      	ldr	r1, [pc, #444]	; (8006a44 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2e4>)
 8006888:	4a72      	ldr	r2, [pc, #456]	; (8006a54 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2f4>)
 800688a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800688c:	496f      	ldr	r1, [pc, #444]	; (8006a4c <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2ec>)
 800688e:	2002      	movs	r0, #2
 8006890:	4798      	blx	r3
 8006892:	eba4 040a 	sub.w	r4, r4, sl
 8006896:	42ac      	cmp	r4, r5
 8006898:	db9d      	blt.n	80067d6 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x76>
 800689a:	4640      	mov	r0, r8
 800689c:	f7fe fd36 	bl	800530c <acc_base_configuration_ignore_range_limits_get>
 80068a0:	4682      	mov	sl, r0
 80068a2:	b970      	cbnz	r0, 80068c2 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x162>
 80068a4:	fb0b fb06 	mul.w	fp, fp, r6
 80068a8:	45ab      	cmp	fp, r5
 80068aa:	f300 80d9 	bgt.w	8006a60 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x300>
 80068ae:	9b07      	ldr	r3, [sp, #28]
 80068b0:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80068b4:	f1ab 0b4b 	sub.w	fp, fp, #75	; 0x4b
 80068b8:	fb06 fb0b 	mul.w	fp, r6, fp
 80068bc:	455c      	cmp	r4, fp
 80068be:	f300 8171 	bgt.w	8006ba4 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x444>
 80068c2:	4640      	mov	r0, r8
 80068c4:	f7fe fd36 	bl	8005334 <acc_base_configuration_downsampling_factor_get>
 80068c8:	f898 202e 	ldrb.w	r2, [r8, #46]	; 0x2e
 80068cc:	4683      	mov	fp, r0
 80068ce:	2a00      	cmp	r2, #0
 80068d0:	f000 80a7 	beq.w	8006a22 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2c2>
 80068d4:	f8b8 e030 	ldrh.w	lr, [r8, #48]	; 0x30
 80068d8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80068da:	fb95 f1fb 	sdiv	r1, r5, fp
 80068de:	eb04 72d4 	add.w	r2, r4, r4, lsr #31
 80068e2:	fb92 f2f6 	sdiv	r2, r2, r6
 80068e6:	eba2 72d4 	sub.w	r2, r2, r4, lsr #31
 80068ea:	3201      	adds	r2, #1
 80068ec:	eb05 70d5 	add.w	r0, r5, r5, lsr #31
 80068f0:	fb90 f0f6 	sdiv	r0, r0, r6
 80068f4:	eba0 70d5 	sub.w	r0, r0, r5, lsr #31
 80068f8:	1a12      	subs	r2, r2, r0
 80068fa:	fb0b 5111 	mls	r1, fp, r1, r5
 80068fe:	b292      	uxth	r2, r2
 8006900:	4459      	add	r1, fp
 8006902:	fbb2 fcf3 	udiv	ip, r2, r3
 8006906:	80fa      	strh	r2, [r7, #6]
 8006908:	fb03 2a1c 	mls	sl, r3, ip, r2
 800690c:	fb91 f2fb 	sdiv	r2, r1, fp
 8006910:	fb0b 1112 	mls	r1, fp, r2, r1
 8006914:	f8a7 e000 	strh.w	lr, [r7]
 8006918:	80b8      	strh	r0, [r7, #4]
 800691a:	fa1f fc8c 	uxth.w	ip, ip
 800691e:	8079      	strh	r1, [r7, #2]
 8006920:	f1ba 0f00 	cmp.w	sl, #0
 8006924:	d001      	beq.n	800692a <acc_radar_engine_common_sweep_w_dly_initialize_range+0x1ca>
 8006926:	f10c 0c01 	add.w	ip, ip, #1
 800692a:	f8a7 c008 	strh.w	ip, [r7, #8]
 800692e:	4640      	mov	r0, r8
 8006930:	f7fe fb52 	bl	8004fd8 <acc_base_configuration_power_save_mode_get>
 8006934:	4602      	mov	r2, r0
 8006936:	4640      	mov	r0, r8
 8006938:	9207      	str	r2, [sp, #28]
 800693a:	f7fe fc17 	bl	800516c <acc_base_configuration_repetition_mode_get>
 800693e:	9a07      	ldr	r2, [sp, #28]
 8006940:	2a04      	cmp	r2, #4
 8006942:	d001      	beq.n	8006948 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x1e8>
 8006944:	2801      	cmp	r0, #1
 8006946:	d003      	beq.n	8006950 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x1f0>
 8006948:	88fb      	ldrh	r3, [r7, #6]
 800694a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800694c:	4293      	cmp	r3, r2
 800694e:	d876      	bhi.n	8006a3e <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2de>
 8006950:	4630      	mov	r0, r6
 8006952:	f7ff fed3 	bl	80066fc <get_dt>
 8006956:	ee07 ba90 	vmov	s15, fp
 800695a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800695e:	4631      	mov	r1, r6
 8006960:	ee27 0a80 	vmul.f32	s0, s15, s0
 8006964:	4628      	mov	r0, r5
 8006966:	ed89 0a03 	vstr	s0, [r9, #12]
 800696a:	f7ff fedf 	bl	800672c <points_to_meter>
 800696e:	4631      	mov	r1, r6
 8006970:	4620      	mov	r0, r4
 8006972:	ed89 0a00 	vstr	s0, [r9]
 8006976:	f7ff fed9 	bl	800672c <points_to_meter>
 800697a:	fbb6 f2fb 	udiv	r2, r6, fp
 800697e:	fb95 fcf6 	sdiv	ip, r5, r6
 8006982:	edd9 7a00 	vldr	s15, [r9]
 8006986:	88fb      	ldrh	r3, [r7, #6]
 8006988:	8939      	ldrh	r1, [r7, #8]
 800698a:	9806      	ldr	r0, [sp, #24]
 800698c:	ed89 0a02 	vstr	s0, [r9, #8]
 8006990:	1b64      	subs	r4, r4, r5
 8006992:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006996:	fbb4 f4fb 	udiv	r4, r4, fp
 800699a:	3401      	adds	r4, #1
 800699c:	b2a4      	uxth	r4, r4
 800699e:	f8a9 4016 	strh.w	r4, [r9, #22]
 80069a2:	ed89 0a01 	vstr	s0, [r9, #4]
 80069a6:	f8a9 1018 	strh.w	r1, [r9, #24]
 80069aa:	80c2      	strh	r2, [r0, #6]
 80069ac:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80069ae:	8084      	strh	r4, [r0, #4]
 80069b0:	fb06 551c 	mls	r5, r6, ip, r5
 80069b4:	4435      	add	r5, r6
 80069b6:	429a      	cmp	r2, r3
 80069b8:	fb95 fcf6 	sdiv	ip, r5, r6
 80069bc:	8103      	strh	r3, [r0, #8]
 80069be:	fb06 551c 	mls	r5, r6, ip, r5
 80069c2:	8201      	strh	r1, [r0, #16]
 80069c4:	fb95 f5fb 	sdiv	r5, r5, fp
 80069c8:	fb03 f606 	mul.w	r6, r3, r6
 80069cc:	8045      	strh	r5, [r0, #2]
 80069ce:	fbb6 fbfb 	udiv	fp, r6, fp
 80069d2:	f8a0 b000 	strh.w	fp, [r0]
 80069d6:	d227      	bcs.n	8006a28 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2c8>
 80069d8:	b292      	uxth	r2, r2
 80069da:	8282      	strh	r2, [r0, #20]
 80069dc:	f1ba 0f00 	cmp.w	sl, #0
 80069e0:	d006      	beq.n	80069f0 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x290>
 80069e2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80069e4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80069e6:	fbb3 f2f2 	udiv	r2, r3, r2
 80069ea:	fb01 3312 	mls	r3, r1, r2, r3
 80069ee:	b29a      	uxth	r2, r3
 80069f0:	9b06      	ldr	r3, [sp, #24]
 80069f2:	f04f 0a01 	mov.w	sl, #1
 80069f6:	4650      	mov	r0, sl
 80069f8:	82da      	strh	r2, [r3, #22]
 80069fa:	b009      	add	sp, #36	; 0x24
 80069fc:	ecbd 8b04 	vpop	{d8-d9}
 8006a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a04:	07eb      	lsls	r3, r5, #31
 8006a06:	f53f aedc 	bmi.w	80067c2 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x62>
 8006a0a:	f7fe ff01 	bl	8005810 <acc_rss_integration_log_level>
 8006a0e:	2801      	cmp	r0, #1
 8006a10:	d905      	bls.n	8006a1e <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2be>
 8006a12:	490c      	ldr	r1, [pc, #48]	; (8006a44 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2e4>)
 8006a14:	4a10      	ldr	r2, [pc, #64]	; (8006a58 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2f8>)
 8006a16:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8006a18:	490c      	ldr	r1, [pc, #48]	; (8006a4c <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2ec>)
 8006a1a:	4650      	mov	r0, sl
 8006a1c:	4798      	blx	r3
 8006a1e:	3501      	adds	r5, #1
 8006a20:	e6cf      	b.n	80067c2 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x62>
 8006a22:	f898 e032 	ldrb.w	lr, [r8, #50]	; 0x32
 8006a26:	e757      	b.n	80068d8 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x178>
 8006a28:	9a06      	ldr	r2, [sp, #24]
 8006a2a:	f04f 0a01 	mov.w	sl, #1
 8006a2e:	4650      	mov	r0, sl
 8006a30:	8293      	strh	r3, [r2, #20]
 8006a32:	82d3      	strh	r3, [r2, #22]
 8006a34:	b009      	add	sp, #36	; 0x24
 8006a36:	ecbd 8b04 	vpop	{d8-d9}
 8006a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a3e:	4b01      	ldr	r3, [pc, #4]	; (8006a44 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2e4>)
 8006a40:	4a06      	ldr	r2, [pc, #24]	; (8006a5c <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2fc>)
 8006a42:	e6ca      	b.n	80067da <acc_radar_engine_common_sweep_w_dly_initialize_range+0x7a>
 8006a44:	200004c0 	.word	0x200004c0
 8006a48:	0800eb20 	.word	0x0800eb20
 8006a4c:	0800eacc 	.word	0x0800eacc
 8006a50:	4d8ef3c2 	.word	0x4d8ef3c2
 8006a54:	0800eaec 	.word	0x0800eaec
 8006a58:	0800ea94 	.word	0x0800ea94
 8006a5c:	0800ebd0 	.word	0x0800ebd0
 8006a60:	4b9d      	ldr	r3, [pc, #628]	; (8006cd8 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x578>)
 8006a62:	4c9e      	ldr	r4, [pc, #632]	; (8006cdc <acc_radar_engine_common_sweep_w_dly_initialize_range+0x57c>)
 8006a64:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 8006a66:	4631      	mov	r1, r6
 8006a68:	4628      	mov	r0, r5
 8006a6a:	f7ff fe5f 	bl	800672c <points_to_meter>
 8006a6e:	4b9c      	ldr	r3, [pc, #624]	; (8006ce0 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x580>)
 8006a70:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a78:	4631      	mov	r1, r6
 8006a7a:	4628      	mov	r0, r5
 8006a7c:	bf54      	ite	pl
 8006a7e:	4698      	movpl	r8, r3
 8006a80:	46a0      	movmi	r8, r4
 8006a82:	f7ff fe53 	bl	800672c <points_to_meter>
 8006a86:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a8e:	eddf 7a95 	vldr	s15, [pc, #596]	; 8006ce4 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x584>
 8006a92:	bf48      	it	mi
 8006a94:	eeb1 0a40 	vnegmi.f32	s0, s0
 8006a98:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006a9c:	4628      	mov	r0, r5
 8006a9e:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8006aa2:	4631      	mov	r1, r6
 8006aa4:	ee17 5a90 	vmov	r5, s15
 8006aa8:	f7ff fe40 	bl	800672c <points_to_meter>
 8006aac:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ab4:	eddf 7a8b 	vldr	s15, [pc, #556]	; 8006ce4 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x584>
 8006ab8:	ed9f 6a8a 	vldr	s12, [pc, #552]	; 8006ce4 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x584>
 8006abc:	eddf 6a8a 	vldr	s13, [pc, #552]	; 8006ce8 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x588>
 8006ac0:	bf48      	it	mi
 8006ac2:	eeb1 0a40 	vnegmi.f32	s0, s0
 8006ac6:	ee70 7a27 	vadd.f32	s15, s0, s15
 8006aca:	4631      	mov	r1, r6
 8006acc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ad4:	bf4c      	ite	mi
 8006ad6:	eeb1 7a67 	vnegmi.f32	s14, s15
 8006ada:	eeb0 7a67 	vmovpl.f32	s14, s15
 8006ade:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006ae2:	4658      	mov	r0, fp
 8006ae4:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8006ae8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8006aec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006af0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006af4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006af8:	ee17 4a90 	vmov	r4, s15
 8006afc:	f7ff fe16 	bl	800672c <points_to_meter>
 8006b00:	4b77      	ldr	r3, [pc, #476]	; (8006ce0 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x580>)
 8006b02:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8006cdc <acc_radar_engine_common_sweep_w_dly_initialize_range+0x57c>
 8006b06:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b0e:	4631      	mov	r1, r6
 8006b10:	4658      	mov	r0, fp
 8006b12:	bf54      	ite	pl
 8006b14:	4699      	movpl	r9, r3
 8006b16:	46e1      	movmi	r9, ip
 8006b18:	f7ff fe08 	bl	800672c <points_to_meter>
 8006b1c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b24:	eddf 7a6f 	vldr	s15, [pc, #444]	; 8006ce4 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x584>
 8006b28:	bf48      	it	mi
 8006b2a:	eeb1 0a40 	vnegmi.f32	s0, s0
 8006b2e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006b32:	4631      	mov	r1, r6
 8006b34:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8006b38:	4658      	mov	r0, fp
 8006b3a:	ee17 6a90 	vmov	r6, s15
 8006b3e:	f7ff fdf5 	bl	800672c <points_to_meter>
 8006b42:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b4a:	eddf 7a66 	vldr	s15, [pc, #408]	; 8006ce4 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x584>
 8006b4e:	ed9f 6a65 	vldr	s12, [pc, #404]	; 8006ce4 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x584>
 8006b52:	eddf 6a65 	vldr	s13, [pc, #404]	; 8006ce8 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x588>
 8006b56:	4a65      	ldr	r2, [pc, #404]	; (8006cec <acc_radar_engine_common_sweep_w_dly_initialize_range+0x58c>)
 8006b58:	9603      	str	r6, [sp, #12]
 8006b5a:	bf48      	it	mi
 8006b5c:	eeb1 0a40 	vnegmi.f32	s0, s0
 8006b60:	ee70 7a27 	vadd.f32	s15, s0, s15
 8006b64:	f8cd 9008 	str.w	r9, [sp, #8]
 8006b68:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b70:	bf4c      	ite	mi
 8006b72:	eeb1 7a67 	vnegmi.f32	s14, s15
 8006b76:	eeb0 7a67 	vmovpl.f32	s14, s15
 8006b7a:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006b7e:	9401      	str	r4, [sp, #4]
 8006b80:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8006b84:	9500      	str	r5, [sp, #0]
 8006b86:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8006b8a:	4643      	mov	r3, r8
 8006b8c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006b90:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006b94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b98:	4955      	ldr	r1, [pc, #340]	; (8006cf0 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x590>)
 8006b9a:	edcd 7a04 	vstr	s15, [sp, #16]
 8006b9e:	2000      	movs	r0, #0
 8006ba0:	47b8      	blx	r7
 8006ba2:	e620      	b.n	80067e6 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x86>
 8006ba4:	4b4c      	ldr	r3, [pc, #304]	; (8006cd8 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x578>)
 8006ba6:	4631      	mov	r1, r6
 8006ba8:	4620      	mov	r0, r4
 8006baa:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 8006bac:	f7ff fdbe 	bl	800672c <points_to_meter>
 8006bb0:	4a4a      	ldr	r2, [pc, #296]	; (8006cdc <acc_radar_engine_common_sweep_w_dly_initialize_range+0x57c>)
 8006bb2:	4b4b      	ldr	r3, [pc, #300]	; (8006ce0 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x580>)
 8006bb4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bbc:	4631      	mov	r1, r6
 8006bbe:	4620      	mov	r0, r4
 8006bc0:	bf4c      	ite	mi
 8006bc2:	4690      	movmi	r8, r2
 8006bc4:	4698      	movpl	r8, r3
 8006bc6:	f7ff fdb1 	bl	800672c <points_to_meter>
 8006bca:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bd2:	eddf 7a44 	vldr	s15, [pc, #272]	; 8006ce4 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x584>
 8006bd6:	bf48      	it	mi
 8006bd8:	eeb1 0a40 	vnegmi.f32	s0, s0
 8006bdc:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006be0:	4620      	mov	r0, r4
 8006be2:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8006be6:	4631      	mov	r1, r6
 8006be8:	ee17 5a90 	vmov	r5, s15
 8006bec:	f7ff fd9e 	bl	800672c <points_to_meter>
 8006bf0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bf8:	eddf 7a3a 	vldr	s15, [pc, #232]	; 8006ce4 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x584>
 8006bfc:	ed9f 6a39 	vldr	s12, [pc, #228]	; 8006ce4 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x584>
 8006c00:	eddf 6a39 	vldr	s13, [pc, #228]	; 8006ce8 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x588>
 8006c04:	bf48      	it	mi
 8006c06:	eeb1 0a40 	vnegmi.f32	s0, s0
 8006c0a:	ee70 7a27 	vadd.f32	s15, s0, s15
 8006c0e:	4631      	mov	r1, r6
 8006c10:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c18:	bf4c      	ite	mi
 8006c1a:	eeb1 7a67 	vnegmi.f32	s14, s15
 8006c1e:	eeb0 7a67 	vmovpl.f32	s14, s15
 8006c22:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006c26:	4658      	mov	r0, fp
 8006c28:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8006c2c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8006c30:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006c34:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006c38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c3c:	ee17 4a90 	vmov	r4, s15
 8006c40:	f7ff fd74 	bl	800672c <points_to_meter>
 8006c44:	4a25      	ldr	r2, [pc, #148]	; (8006cdc <acc_radar_engine_common_sweep_w_dly_initialize_range+0x57c>)
 8006c46:	4b26      	ldr	r3, [pc, #152]	; (8006ce0 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x580>)
 8006c48:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c50:	4631      	mov	r1, r6
 8006c52:	4658      	mov	r0, fp
 8006c54:	bf4c      	ite	mi
 8006c56:	4691      	movmi	r9, r2
 8006c58:	4699      	movpl	r9, r3
 8006c5a:	f7ff fd67 	bl	800672c <points_to_meter>
 8006c5e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006c62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c66:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8006ce4 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x584>
 8006c6a:	bf48      	it	mi
 8006c6c:	eeb1 0a40 	vnegmi.f32	s0, s0
 8006c70:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006c74:	4631      	mov	r1, r6
 8006c76:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8006c7a:	4658      	mov	r0, fp
 8006c7c:	ee17 6a90 	vmov	r6, s15
 8006c80:	f7ff fd54 	bl	800672c <points_to_meter>
 8006c84:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c8c:	eddf 7a15 	vldr	s15, [pc, #84]	; 8006ce4 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x584>
 8006c90:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8006ce4 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x584>
 8006c94:	eddf 6a14 	vldr	s13, [pc, #80]	; 8006ce8 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x588>
 8006c98:	4a16      	ldr	r2, [pc, #88]	; (8006cf4 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x594>)
 8006c9a:	9603      	str	r6, [sp, #12]
 8006c9c:	bf48      	it	mi
 8006c9e:	eeb1 0a40 	vnegmi.f32	s0, s0
 8006ca2:	ee70 7a27 	vadd.f32	s15, s0, s15
 8006ca6:	f8cd 9008 	str.w	r9, [sp, #8]
 8006caa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cb2:	bf4c      	ite	mi
 8006cb4:	eeb1 7a67 	vnegmi.f32	s14, s15
 8006cb8:	eeb0 7a67 	vmovpl.f32	s14, s15
 8006cbc:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006cc0:	9401      	str	r4, [sp, #4]
 8006cc2:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8006cc6:	9500      	str	r5, [sp, #0]
 8006cc8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8006ccc:	4643      	mov	r3, r8
 8006cce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006cd2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006cd6:	e75d      	b.n	8006b94 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x434>
 8006cd8:	200004c0 	.word	0x200004c0
 8006cdc:	0800ea90 	.word	0x0800ea90
 8006ce0:	0800fb18 	.word	0x0800fb18
 8006ce4:	350637bd 	.word	0x350637bd
 8006ce8:	49742400 	.word	0x49742400
 8006cec:	0800eb50 	.word	0x0800eb50
 8006cf0:	0800eacc 	.word	0x0800eacc
 8006cf4:	0800eb90 	.word	0x0800eb90

08006cf8 <acc_radar_engine_common_sweep_w_dly_stitching_required>:
 8006cf8:	8900      	ldrh	r0, [r0, #8]
 8006cfa:	2801      	cmp	r0, #1
 8006cfc:	bf94      	ite	ls
 8006cfe:	2000      	movls	r0, #0
 8006d00:	2001      	movhi	r0, #1
 8006d02:	4770      	bx	lr

08006d04 <internal_buffer_processed_read>:
 8006d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d08:	b085      	sub	sp, #20
 8006d0a:	461f      	mov	r7, r3
 8006d0c:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
 8006d10:	9101      	str	r1, [sp, #4]
 8006d12:	4682      	mov	sl, r0
 8006d14:	4689      	mov	r9, r1
 8006d16:	4615      	mov	r5, r2
 8006d18:	f7fe fcd0 	bl	80056bc <acc_rss_integration_get_max_spi_transfer_size>
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8006d22:	9302      	str	r3, [sp, #8]
 8006d24:	2f00      	cmp	r7, #0
 8006d26:	d03d      	beq.n	8006da4 <internal_buffer_processed_read+0xa0>
 8006d28:	429c      	cmp	r4, r3
 8006d2a:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8006d2e:	bf14      	ite	ne
 8006d30:	f44f 4be0 	movne.w	fp, #28672	; 0x7000
 8006d34:	f44f 4b00 	moveq.w	fp, #32768	; 0x8000
 8006d38:	f1a0 0803 	sub.w	r8, r0, #3
 8006d3c:	9300      	str	r3, [sp, #0]
 8006d3e:	fa0f fb8b 	sxth.w	fp, fp
 8006d42:	e024      	b.n	8006d8e <internal_buffer_processed_read+0x8a>
 8006d44:	b2a6      	uxth	r6, r4
 8006d46:	9900      	ldr	r1, [sp, #0]
 8006d48:	f8a9 1004 	strh.w	r1, [r9, #4]
 8006d4c:	1e72      	subs	r2, r6, #1
 8006d4e:	ea4b 0305 	orr.w	r3, fp, r5
 8006d52:	f8a9 2002 	strh.w	r2, [r9, #2]
 8006d56:	f8a9 3000 	strh.w	r3, [r9]
 8006d5a:	4649      	mov	r1, r9
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	4650      	mov	r0, sl
 8006d60:	1ce2      	adds	r2, r4, #3
 8006d62:	f7fe fcdb 	bl	800571c <acc_rss_integration_sensor_device_transfer>
 8006d66:	9802      	ldr	r0, [sp, #8]
 8006d68:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8006d6c:	f8c9 0000 	str.w	r0, [r9]
 8006d70:	f8a9 3004 	strh.w	r3, [r9, #4]
 8006d74:	eb09 0944 	add.w	r9, r9, r4, lsl #1
 8006d78:	442e      	add	r6, r5
 8006d7a:	f8d9 0000 	ldr.w	r0, [r9]
 8006d7e:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 8006d82:	9002      	str	r0, [sp, #8]
 8006d84:	1b3f      	subs	r7, r7, r4
 8006d86:	b2b5      	uxth	r5, r6
 8006d88:	f8ad 300c 	strh.w	r3, [sp, #12]
 8006d8c:	d00a      	beq.n	8006da4 <internal_buffer_processed_read+0xa0>
 8006d8e:	45b8      	cmp	r8, r7
 8006d90:	4644      	mov	r4, r8
 8006d92:	bf28      	it	cs
 8006d94:	463c      	movcs	r4, r7
 8006d96:	45b8      	cmp	r8, r7
 8006d98:	d2d4      	bcs.n	8006d44 <internal_buffer_processed_read+0x40>
 8006d9a:	e000      	b.n	8006d9e <internal_buffer_processed_read+0x9a>
 8006d9c:	3c01      	subs	r4, #1
 8006d9e:	07e3      	lsls	r3, r4, #31
 8006da0:	d4fc      	bmi.n	8006d9c <internal_buffer_processed_read+0x98>
 8006da2:	e7cf      	b.n	8006d44 <internal_buffer_processed_read+0x40>
 8006da4:	9801      	ldr	r0, [sp, #4]
 8006da6:	3006      	adds	r0, #6
 8006da8:	b005      	add	sp, #20
 8006daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dae:	bf00      	nop

08006db0 <acc_sensor_r2_get_max_header_length>:
 8006db0:	2003      	movs	r0, #3
 8006db2:	4770      	bx	lr

08006db4 <acc_sensor_r2_conf_write_instr>:
 8006db4:	b510      	push	{r4, lr}
 8006db6:	b084      	sub	sp, #16
 8006db8:	f441 43a0 	orr.w	r3, r1, #20480	; 0x5000
 8006dbc:	4604      	mov	r4, r0
 8006dbe:	9201      	str	r2, [sp, #4]
 8006dc0:	f10d 010a 	add.w	r1, sp, #10
 8006dc4:	a801      	add	r0, sp, #4
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	f8ad 3008 	strh.w	r3, [sp, #8]
 8006dcc:	f001 fa00 	bl	80081d0 <acc_utils_uint32_to_transfer_buffer>
 8006dd0:	4620      	mov	r0, r4
 8006dd2:	a902      	add	r1, sp, #8
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	2203      	movs	r2, #3
 8006dd8:	f7fe fca0 	bl	800571c <acc_rss_integration_sensor_device_transfer>
 8006ddc:	b004      	add	sp, #16
 8006dde:	bd10      	pop	{r4, pc}

08006de0 <acc_sensor_r2_prepare_load_confmem>:
 8006de0:	0849      	lsrs	r1, r1, #1
 8006de2:	b538      	push	{r3, r4, r5, lr}
 8006de4:	6010      	str	r0, [r2, #0]
 8006de6:	461c      	mov	r4, r3
 8006de8:	6019      	str	r1, [r3, #0]
 8006dea:	4615      	mov	r5, r2
 8006dec:	f7fe fc66 	bl	80056bc <acc_rss_integration_get_max_spi_transfer_size>
 8006df0:	6821      	ldr	r1, [r4, #0]
 8006df2:	ebb1 0f50 	cmp.w	r1, r0, lsr #1
 8006df6:	d807      	bhi.n	8006e08 <acc_sensor_r2_prepare_load_confmem+0x28>
 8006df8:	682b      	ldr	r3, [r5, #0]
 8006dfa:	3901      	subs	r1, #1
 8006dfc:	f021 0101 	bic.w	r1, r1, #1
 8006e00:	3302      	adds	r3, #2
 8006e02:	602b      	str	r3, [r5, #0]
 8006e04:	6021      	str	r1, [r4, #0]
 8006e06:	bd38      	pop	{r3, r4, r5, pc}
 8006e08:	f7fe fc58 	bl	80056bc <acc_rss_integration_get_max_spi_transfer_size>
 8006e0c:	0841      	lsrs	r1, r0, #1
 8006e0e:	e7f3      	b.n	8006df8 <acc_sensor_r2_prepare_load_confmem+0x18>

08006e10 <acc_sensor_r2_load_confmem>:
 8006e10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006e14:	b083      	sub	sp, #12
 8006e16:	1c5d      	adds	r5, r3, #1
 8006e18:	4606      	mov	r6, r0
 8006e1a:	460c      	mov	r4, r1
 8006e1c:	4617      	mov	r7, r2
 8006e1e:	f7fe fcf7 	bl	8005810 <acc_rss_integration_log_level>
 8006e22:	2803      	cmp	r0, #3
 8006e24:	ea4f 0845 	mov.w	r8, r5, lsl #1
 8006e28:	d908      	bls.n	8006e3c <acc_sensor_r2_load_confmem+0x2c>
 8006e2a:	4b11      	ldr	r3, [pc, #68]	; (8006e70 <acc_sensor_r2_load_confmem+0x60>)
 8006e2c:	9400      	str	r4, [sp, #0]
 8006e2e:	f8d3 9034 	ldr.w	r9, [r3, #52]	; 0x34
 8006e32:	4a10      	ldr	r2, [pc, #64]	; (8006e74 <acc_sensor_r2_load_confmem+0x64>)
 8006e34:	4910      	ldr	r1, [pc, #64]	; (8006e78 <acc_sensor_r2_load_confmem+0x68>)
 8006e36:	4633      	mov	r3, r6
 8006e38:	2004      	movs	r0, #4
 8006e3a:	47c8      	blx	r9
 8006e3c:	f7fe fc3e 	bl	80056bc <acc_rss_integration_get_max_spi_transfer_size>
 8006e40:	4540      	cmp	r0, r8
 8006e42:	d208      	bcs.n	8006e56 <acc_sensor_r2_load_confmem+0x46>
 8006e44:	4b0a      	ldr	r3, [pc, #40]	; (8006e70 <acc_sensor_r2_load_confmem+0x60>)
 8006e46:	4a0d      	ldr	r2, [pc, #52]	; (8006e7c <acc_sensor_r2_load_confmem+0x6c>)
 8006e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e4a:	490b      	ldr	r1, [pc, #44]	; (8006e78 <acc_sensor_r2_load_confmem+0x68>)
 8006e4c:	2000      	movs	r0, #0
 8006e4e:	b003      	add	sp, #12
 8006e50:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006e54:	4718      	bx	r3
 8006e56:	f444 44a0 	orr.w	r4, r4, #20480	; 0x5000
 8006e5a:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8006e5e:	4639      	mov	r1, r7
 8006e60:	4630      	mov	r0, r6
 8006e62:	2300      	movs	r3, #0
 8006e64:	803c      	strh	r4, [r7, #0]
 8006e66:	b003      	add	sp, #12
 8006e68:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006e6c:	f7fe bc56 	b.w	800571c <acc_rss_integration_sensor_device_transfer>
 8006e70:	200004c0 	.word	0x200004c0
 8006e74:	0800ec0c 	.word	0x0800ec0c
 8006e78:	0800ebfc 	.word	0x0800ebfc
 8006e7c:	0800ec34 	.word	0x0800ec34

08006e80 <acc_sensor_r2_buffer_processed_verify_size>:
 8006e80:	3103      	adds	r1, #3
 8006e82:	ebb0 0f41 	cmp.w	r0, r1, lsl #1
 8006e86:	bf2c      	ite	cs
 8006e88:	2001      	movcs	r0, #1
 8006e8a:	2000      	movcc	r0, #0
 8006e8c:	4770      	bx	lr
 8006e8e:	bf00      	nop

08006e90 <acc_sensor_r2_buffer_processed_read>:
 8006e90:	b510      	push	{r4, lr}
 8006e92:	b082      	sub	sp, #8
 8006e94:	2400      	movs	r4, #0
 8006e96:	9400      	str	r4, [sp, #0]
 8006e98:	f7ff ff34 	bl	8006d04 <internal_buffer_processed_read>
 8006e9c:	b002      	add	sp, #8
 8006e9e:	bd10      	pop	{r4, pc}

08006ea0 <acc_sensor_manager_power_on_and_start_sensor>:
 8006ea0:	b570      	push	{r4, r5, r6, lr}
 8006ea2:	6986      	ldr	r6, [r0, #24]
 8006ea4:	4604      	mov	r4, r0
 8006ea6:	4630      	mov	r0, r6
 8006ea8:	f7fe fc0e 	bl	80056c8 <acc_rss_integration_sensor_device_power_on>
 8006eac:	4b0a      	ldr	r3, [pc, #40]	; (8006ed8 <acc_sensor_manager_power_on_and_start_sensor+0x38>)
 8006eae:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006eb0:	6819      	ldr	r1, [r3, #0]
 8006eb2:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 8006eb6:	00db      	lsls	r3, r3, #3
 8006eb8:	3b48      	subs	r3, #72	; 0x48
 8006eba:	4419      	add	r1, r3
 8006ebc:	1d20      	adds	r0, r4, #4
 8006ebe:	f000 fe5f 	bl	8007b80 <acc_sweep_manager_start>
 8006ec2:	4605      	mov	r5, r0
 8006ec4:	b118      	cbz	r0, 8006ece <acc_sensor_manager_power_on_and_start_sensor+0x2e>
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	70e3      	strb	r3, [r4, #3]
 8006eca:	4628      	mov	r0, r5
 8006ecc:	bd70      	pop	{r4, r5, r6, pc}
 8006ece:	4630      	mov	r0, r6
 8006ed0:	f7fe fc00 	bl	80056d4 <acc_rss_integration_sensor_device_power_off>
 8006ed4:	4628      	mov	r0, r5
 8006ed6:	bd70      	pop	{r4, r5, r6, pc}
 8006ed8:	20000368 	.word	0x20000368

08006edc <calibrate_sensor>:
 8006edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ee0:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8006fb0 <calibrate_sensor+0xd4>
 8006ee4:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 8006fb4 <calibrate_sensor+0xd8>
 8006ee8:	f8d8 3000 	ldr.w	r3, [r8]
 8006eec:	eb00 04c0 	add.w	r4, r0, r0, lsl #3
 8006ef0:	00e4      	lsls	r4, r4, #3
 8006ef2:	3c48      	subs	r4, #72	; 0x48
 8006ef4:	4423      	add	r3, r4
 8006ef6:	f04f 0900 	mov.w	r9, #0
 8006efa:	b085      	sub	sp, #20
 8006efc:	460e      	mov	r6, r1
 8006efe:	f883 9041 	strb.w	r9, [r3, #65]	; 0x41
 8006f02:	f883 9042 	strb.w	r9, [r3, #66]	; 0x42
 8006f06:	f8c3 b044 	str.w	fp, [r3, #68]	; 0x44
 8006f0a:	4607      	mov	r7, r0
 8006f0c:	4692      	mov	sl, r2
 8006f0e:	f7fe fbdb 	bl	80056c8 <acc_rss_integration_sensor_device_power_on>
 8006f12:	4630      	mov	r0, r6
 8006f14:	f000 fe10 	bl	8007b38 <acc_sweep_manager_is_sensor_connected>
 8006f18:	b968      	cbnz	r0, 8006f36 <calibrate_sensor+0x5a>
 8006f1a:	4b21      	ldr	r3, [pc, #132]	; (8006fa0 <calibrate_sensor+0xc4>)
 8006f1c:	4a21      	ldr	r2, [pc, #132]	; (8006fa4 <calibrate_sensor+0xc8>)
 8006f1e:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8006f20:	4921      	ldr	r1, [pc, #132]	; (8006fa8 <calibrate_sensor+0xcc>)
 8006f22:	463b      	mov	r3, r7
 8006f24:	4605      	mov	r5, r0
 8006f26:	47a0      	blx	r4
 8006f28:	4638      	mov	r0, r7
 8006f2a:	f7fe fbd3 	bl	80056d4 <acc_rss_integration_sensor_device_power_off>
 8006f2e:	4628      	mov	r0, r5
 8006f30:	b005      	add	sp, #20
 8006f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f36:	4639      	mov	r1, r7
 8006f38:	200b      	movs	r0, #11
 8006f3a:	f000 ffa3 	bl	8007e84 <acc_probes_execute_primitive_probe>
 8006f3e:	f8d8 2000 	ldr.w	r2, [r8]
 8006f42:	f8cd 9004 	str.w	r9, [sp, #4]
 8006f46:	4651      	mov	r1, sl
 8006f48:	4630      	mov	r0, r6
 8006f4a:	4422      	add	r2, r4
 8006f4c:	ab01      	add	r3, sp, #4
 8006f4e:	f8cd b008 	str.w	fp, [sp, #8]
 8006f52:	f8cd 900c 	str.w	r9, [sp, #12]
 8006f56:	f000 fdf3 	bl	8007b40 <acc_sweep_manager_calibrate>
 8006f5a:	4605      	mov	r5, r0
 8006f5c:	b9c8      	cbnz	r0, 8006f92 <calibrate_sensor+0xb6>
 8006f5e:	4b10      	ldr	r3, [pc, #64]	; (8006fa0 <calibrate_sensor+0xc4>)
 8006f60:	4a12      	ldr	r2, [pc, #72]	; (8006fac <calibrate_sensor+0xd0>)
 8006f62:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8006f64:	4910      	ldr	r1, [pc, #64]	; (8006fa8 <calibrate_sensor+0xcc>)
 8006f66:	463b      	mov	r3, r7
 8006f68:	47b0      	blx	r6
 8006f6a:	f8d8 3000 	ldr.w	r3, [r8]
 8006f6e:	441c      	add	r4, r3
 8006f70:	9a02      	ldr	r2, [sp, #8]
 8006f72:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006f76:	6462      	str	r2, [r4, #68]	; 0x44
 8006f78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f7c:	4639      	mov	r1, r7
 8006f7e:	200c      	movs	r0, #12
 8006f80:	f000 ff80 	bl	8007e84 <acc_probes_execute_primitive_probe>
 8006f84:	4638      	mov	r0, r7
 8006f86:	f7fe fba5 	bl	80056d4 <acc_rss_integration_sensor_device_power_off>
 8006f8a:	4628      	mov	r0, r5
 8006f8c:	b005      	add	sp, #20
 8006f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f92:	f8d8 3000 	ldr.w	r3, [r8]
 8006f96:	441c      	add	r4, r3
 8006f98:	2301      	movs	r3, #1
 8006f9a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8006f9e:	e7e7      	b.n	8006f70 <calibrate_sensor+0x94>
 8006fa0:	200004c0 	.word	0x200004c0
 8006fa4:	0800ec54 	.word	0x0800ec54
 8006fa8:	0800ec90 	.word	0x0800ec90
 8006fac:	0800eca0 	.word	0x0800eca0
 8006fb0:	20000368 	.word	0x20000368
 8006fb4:	ff800000 	.word	0xff800000

08006fb8 <acc_sensor_manager_hibernate_enter>:
 8006fb8:	b538      	push	{r3, r4, r5, lr}
 8006fba:	4603      	mov	r3, r0
 8006fbc:	3004      	adds	r0, #4
 8006fbe:	699d      	ldr	r5, [r3, #24]
 8006fc0:	f000 fdf6 	bl	8007bb0 <acc_sweep_manager_wait_for_hibernate_ready>
 8006fc4:	4604      	mov	r4, r0
 8006fc6:	b930      	cbnz	r0, 8006fd6 <acc_sensor_manager_hibernate_enter+0x1e>
 8006fc8:	4b05      	ldr	r3, [pc, #20]	; (8006fe0 <acc_sensor_manager_hibernate_enter+0x28>)
 8006fca:	4a06      	ldr	r2, [pc, #24]	; (8006fe4 <acc_sensor_manager_hibernate_enter+0x2c>)
 8006fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fce:	4906      	ldr	r1, [pc, #24]	; (8006fe8 <acc_sensor_manager_hibernate_enter+0x30>)
 8006fd0:	4798      	blx	r3
 8006fd2:	4620      	mov	r0, r4
 8006fd4:	bd38      	pop	{r3, r4, r5, pc}
 8006fd6:	4628      	mov	r0, r5
 8006fd8:	f7fe fb82 	bl	80056e0 <acc_rss_integration_sensor_device_hibernate_enter>
 8006fdc:	4620      	mov	r0, r4
 8006fde:	bd38      	pop	{r3, r4, r5, pc}
 8006fe0:	200004c0 	.word	0x200004c0
 8006fe4:	0800ecc4 	.word	0x0800ecc4
 8006fe8:	0800ec90 	.word	0x0800ec90

08006fec <acc_sensor_manager_activate>:
 8006fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ff0:	4e18      	ldr	r6, [pc, #96]	; (8007054 <acc_sensor_manager_activate+0x68>)
 8006ff2:	7834      	ldrb	r4, [r6, #0]
 8006ff4:	b114      	cbz	r4, 8006ffc <acc_sensor_manager_activate+0x10>
 8006ff6:	4620      	mov	r0, r4
 8006ff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ffc:	f7fe fb52 	bl	80056a4 <acc_rss_integration_get_sensor_count>
 8007000:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8007004:	4914      	ldr	r1, [pc, #80]	; (8007058 <acc_sensor_manager_activate+0x6c>)
 8007006:	4f15      	ldr	r7, [pc, #84]	; (800705c <acc_sensor_manager_activate+0x70>)
 8007008:	00c0      	lsls	r0, r0, #3
 800700a:	f240 1253 	movw	r2, #339	; 0x153
 800700e:	f7fe fbab 	bl	8005768 <acc_rss_integration_mem_alloc_debug>
 8007012:	6038      	str	r0, [r7, #0]
 8007014:	2800      	cmp	r0, #0
 8007016:	d0ee      	beq.n	8006ff6 <acc_sensor_manager_activate+0xa>
 8007018:	f8df 8044 	ldr.w	r8, [pc, #68]	; 8007060 <acc_sensor_manager_activate+0x74>
 800701c:	4625      	mov	r5, r4
 800701e:	e00e      	b.n	800703e <acc_sensor_manager_activate+0x52>
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007026:	4618      	mov	r0, r3
 8007028:	2248      	movs	r2, #72	; 0x48
 800702a:	2100      	movs	r1, #0
 800702c:	f005 ffde 	bl	800cfec <memset>
 8007030:	3401      	adds	r4, #1
 8007032:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 8007036:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
 800703a:	f8c0 8044 	str.w	r8, [r0, #68]	; 0x44
 800703e:	f7fe fb31 	bl	80056a4 <acc_rss_integration_get_sensor_count>
 8007042:	42a0      	cmp	r0, r4
 8007044:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 8007048:	d8ea      	bhi.n	8007020 <acc_sensor_manager_activate+0x34>
 800704a:	2401      	movs	r4, #1
 800704c:	7034      	strb	r4, [r6, #0]
 800704e:	4620      	mov	r0, r4
 8007050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007054:	20000360 	.word	0x20000360
 8007058:	0800ec90 	.word	0x0800ec90
 800705c:	20000368 	.word	0x20000368
 8007060:	ff800000 	.word	0xff800000

08007064 <acc_sensor_manager_deactivate>:
 8007064:	b510      	push	{r4, lr}
 8007066:	4c05      	ldr	r4, [pc, #20]	; (800707c <acc_sensor_manager_deactivate+0x18>)
 8007068:	7823      	ldrb	r3, [r4, #0]
 800706a:	b903      	cbnz	r3, 800706e <acc_sensor_manager_deactivate+0xa>
 800706c:	bd10      	pop	{r4, pc}
 800706e:	4b04      	ldr	r3, [pc, #16]	; (8007080 <acc_sensor_manager_deactivate+0x1c>)
 8007070:	6818      	ldr	r0, [r3, #0]
 8007072:	f7fe fbbb 	bl	80057ec <acc_rss_integration_mem_free>
 8007076:	2300      	movs	r3, #0
 8007078:	7023      	strb	r3, [r4, #0]
 800707a:	bd10      	pop	{r4, pc}
 800707c:	20000360 	.word	0x20000360
 8007080:	20000368 	.word	0x20000368

08007084 <acc_sensor_manager_acquire_adc_data>:
 8007084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007088:	7846      	ldrb	r6, [r0, #1]
 800708a:	461c      	mov	r4, r3
 800708c:	b13e      	cbz	r6, 800709e <acc_sensor_manager_acquire_adc_data+0x1a>
 800708e:	2300      	movs	r3, #0
 8007090:	7023      	strb	r3, [r4, #0]
 8007092:	7063      	strb	r3, [r4, #1]
 8007094:	70a3      	strb	r3, [r4, #2]
 8007096:	70e3      	strb	r3, [r4, #3]
 8007098:	4630      	mov	r0, r6
 800709a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800709e:	f8df c0fc 	ldr.w	ip, [pc, #252]	; 800719c <acc_sensor_manager_acquire_adc_data+0x118>
 80070a2:	f8d0 9018 	ldr.w	r9, [r0, #24]
 80070a6:	f8dc c000 	ldr.w	ip, [ip]
 80070aa:	4605      	mov	r5, r0
 80070ac:	4688      	mov	r8, r1
 80070ae:	4617      	mov	r7, r2
 80070b0:	f1bc 0f00 	cmp.w	ip, #0
 80070b4:	d014      	beq.n	80070e0 <acc_sensor_manager_acquire_adc_data+0x5c>
 80070b6:	f8dc a00c 	ldr.w	sl, [ip, #12]
 80070ba:	f1ba 0f00 	cmp.w	sl, #0
 80070be:	d00f      	beq.n	80070e0 <acc_sensor_manager_acquire_adc_data+0x5c>
 80070c0:	47d0      	blx	sl
 80070c2:	2800      	cmp	r0, #0
 80070c4:	d0e8      	beq.n	8007098 <acc_sensor_manager_acquire_adc_data+0x14>
 80070c6:	786e      	ldrb	r6, [r5, #1]
 80070c8:	2e00      	cmp	r6, #0
 80070ca:	d1e5      	bne.n	8007098 <acc_sensor_manager_acquire_adc_data+0x14>
 80070cc:	463b      	mov	r3, r7
 80070ce:	4642      	mov	r2, r8
 80070d0:	4649      	mov	r1, r9
 80070d2:	2601      	movs	r6, #1
 80070d4:	2002      	movs	r0, #2
 80070d6:	f000 fea7 	bl	8007e28 <acc_probes_execute_uint16>
 80070da:	4630      	mov	r0, r6
 80070dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070e0:	2300      	movs	r3, #0
 80070e2:	7023      	strb	r3, [r4, #0]
 80070e4:	7063      	strb	r3, [r4, #1]
 80070e6:	70a3      	strb	r3, [r4, #2]
 80070e8:	70e3      	strb	r3, [r4, #3]
 80070ea:	f895 a000 	ldrb.w	sl, [r5]
 80070ee:	f1ba 0f02 	cmp.w	sl, #2
 80070f2:	d031      	beq.n	8007158 <acc_sensor_manager_acquire_adc_data+0xd4>
 80070f4:	f1ba 0f01 	cmp.w	sl, #1
 80070f8:	d034      	beq.n	8007164 <acc_sensor_manager_acquire_adc_data+0xe0>
 80070fa:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 80070fc:	1d28      	adds	r0, r5, #4
 80070fe:	f000 fd5f 	bl	8007bc0 <acc_sweep_manager_acquire_adc_data>
 8007102:	6843      	ldr	r3, [r0, #4]
 8007104:	b30b      	cbz	r3, 800714a <acc_sensor_manager_acquire_adc_data+0xc6>
 8007106:	4543      	cmp	r3, r8
 8007108:	d13b      	bne.n	8007182 <acc_sensor_manager_acquire_adc_data+0xfe>
 800710a:	8843      	ldrh	r3, [r0, #2]
 800710c:	42bb      	cmp	r3, r7
 800710e:	d133      	bne.n	8007178 <acc_sensor_manager_acquire_adc_data+0xf4>
 8007110:	4b1e      	ldr	r3, [pc, #120]	; (800718c <acc_sensor_manager_acquire_adc_data+0x108>)
 8007112:	68c1      	ldr	r1, [r0, #12]
 8007114:	681a      	ldr	r2, [r3, #0]
 8007116:	7a06      	ldrb	r6, [r0, #8]
 8007118:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 800711c:	00db      	lsls	r3, r3, #3
 800711e:	3b48      	subs	r3, #72	; 0x48
 8007120:	4413      	add	r3, r2
 8007122:	7802      	ldrb	r2, [r0, #0]
 8007124:	7022      	strb	r2, [r4, #0]
 8007126:	7842      	ldrb	r2, [r0, #1]
 8007128:	7062      	strb	r2, [r4, #1]
 800712a:	f1ba 0f02 	cmp.w	sl, #2
 800712e:	7a42      	ldrb	r2, [r0, #9]
 8007130:	70e2      	strb	r2, [r4, #3]
 8007132:	70a6      	strb	r6, [r4, #2]
 8007134:	6459      	str	r1, [r3, #68]	; 0x44
 8007136:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800713a:	d017      	beq.n	800716c <acc_sensor_manager_acquire_adc_data+0xe8>
 800713c:	f1ba 0f01 	cmp.w	sl, #1
 8007140:	d1c1      	bne.n	80070c6 <acc_sensor_manager_acquire_adc_data+0x42>
 8007142:	4628      	mov	r0, r5
 8007144:	f7ff ff38 	bl	8006fb8 <acc_sensor_manager_hibernate_enter>
 8007148:	e7bd      	b.n	80070c6 <acc_sensor_manager_acquire_adc_data+0x42>
 800714a:	4911      	ldr	r1, [pc, #68]	; (8007190 <acc_sensor_manager_acquire_adc_data+0x10c>)
 800714c:	4a11      	ldr	r2, [pc, #68]	; (8007194 <acc_sensor_manager_acquire_adc_data+0x110>)
 800714e:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 8007150:	4911      	ldr	r1, [pc, #68]	; (8007198 <acc_sensor_manager_acquire_adc_data+0x114>)
 8007152:	4618      	mov	r0, r3
 8007154:	47a0      	blx	r4
 8007156:	e79f      	b.n	8007098 <acc_sensor_manager_acquire_adc_data+0x14>
 8007158:	4628      	mov	r0, r5
 800715a:	f7ff fea1 	bl	8006ea0 <acc_sensor_manager_power_on_and_start_sensor>
 800715e:	2800      	cmp	r0, #0
 8007160:	d1cb      	bne.n	80070fa <acc_sensor_manager_acquire_adc_data+0x76>
 8007162:	e799      	b.n	8007098 <acc_sensor_manager_acquire_adc_data+0x14>
 8007164:	4648      	mov	r0, r9
 8007166:	f7fe fac3 	bl	80056f0 <acc_rss_integration_sensor_device_hibernate_exit>
 800716a:	e7c6      	b.n	80070fa <acc_sensor_manager_acquire_adc_data+0x76>
 800716c:	4648      	mov	r0, r9
 800716e:	f7fe fab1 	bl	80056d4 <acc_rss_integration_sensor_device_power_off>
 8007172:	2300      	movs	r3, #0
 8007174:	70eb      	strb	r3, [r5, #3]
 8007176:	e7a6      	b.n	80070c6 <acc_sensor_manager_acquire_adc_data+0x42>
 8007178:	4807      	ldr	r0, [pc, #28]	; (8007198 <acc_sensor_manager_acquire_adc_data+0x114>)
 800717a:	f240 11c9 	movw	r1, #457	; 0x1c9
 800717e:	f000 fd6b 	bl	8007c58 <acc_assert_fail>
 8007182:	4805      	ldr	r0, [pc, #20]	; (8007198 <acc_sensor_manager_acquire_adc_data+0x114>)
 8007184:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 8007188:	f000 fd66 	bl	8007c58 <acc_assert_fail>
 800718c:	20000368 	.word	0x20000368
 8007190:	200004c0 	.word	0x200004c0
 8007194:	0800ece4 	.word	0x0800ece4
 8007198:	0800ec90 	.word	0x0800ec90
 800719c:	20000364 	.word	0x20000364

080071a0 <acc_sensor_manager_prepare_radar_engine>:
 80071a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071a4:	f100 0804 	add.w	r8, r0, #4
 80071a8:	4617      	mov	r7, r2
 80071aa:	4605      	mov	r5, r0
 80071ac:	2234      	movs	r2, #52	; 0x34
 80071ae:	460c      	mov	r4, r1
 80071b0:	4640      	mov	r0, r8
 80071b2:	2100      	movs	r1, #0
 80071b4:	461e      	mov	r6, r3
 80071b6:	f005 ff19 	bl	800cfec <memset>
 80071ba:	4b1e      	ldr	r3, [pc, #120]	; (8007234 <acc_sensor_manager_prepare_radar_engine+0x94>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	463a      	mov	r2, r7
 80071c0:	4640      	mov	r0, r8
 80071c2:	b33b      	cbz	r3, 8007214 <acc_sensor_manager_prepare_radar_engine+0x74>
 80071c4:	f8d3 9000 	ldr.w	r9, [r3]
 80071c8:	f1b9 0f00 	cmp.w	r9, #0
 80071cc:	d022      	beq.n	8007214 <acc_sensor_manager_prepare_radar_engine+0x74>
 80071ce:	4633      	mov	r3, r6
 80071d0:	4621      	mov	r1, r4
 80071d2:	47c8      	blx	r9
 80071d4:	4607      	mov	r7, r0
 80071d6:	4620      	mov	r0, r4
 80071d8:	f7fd fefe 	bl	8004fd8 <acc_base_configuration_power_save_mode_get>
 80071dc:	b320      	cbz	r0, 8007228 <acc_sensor_manager_prepare_radar_engine+0x88>
 80071de:	2804      	cmp	r0, #4
 80071e0:	d025      	beq.n	800722e <acc_sensor_manager_prepare_radar_engine+0x8e>
 80071e2:	2300      	movs	r3, #0
 80071e4:	702b      	strb	r3, [r5, #0]
 80071e6:	4620      	mov	r0, r4
 80071e8:	f7fd ffc0 	bl	800516c <acc_base_configuration_repetition_mode_get>
 80071ec:	fab0 f280 	clz	r2, r0
 80071f0:	0952      	lsrs	r2, r2, #5
 80071f2:	706a      	strb	r2, [r5, #1]
 80071f4:	4620      	mov	r0, r4
 80071f6:	f7fe f8cf 	bl	8005398 <acc_base_configuration_asynchronous_measurement_get>
 80071fa:	70a8      	strb	r0, [r5, #2]
 80071fc:	4620      	mov	r0, r4
 80071fe:	f7fd fe9b 	bl	8004f38 <acc_base_configuration_sensor_get>
 8007202:	4632      	mov	r2, r6
 8007204:	4601      	mov	r1, r0
 8007206:	231a      	movs	r3, #26
 8007208:	2005      	movs	r0, #5
 800720a:	f000 fe23 	bl	8007e54 <acc_probes_execute_struct>
 800720e:	4638      	mov	r0, r7
 8007210:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007214:	4633      	mov	r3, r6
 8007216:	4621      	mov	r1, r4
 8007218:	f000 fbec 	bl	80079f4 <acc_sweep_manager_prepare>
 800721c:	4607      	mov	r7, r0
 800721e:	4620      	mov	r0, r4
 8007220:	f7fd feda 	bl	8004fd8 <acc_base_configuration_power_save_mode_get>
 8007224:	2800      	cmp	r0, #0
 8007226:	d1da      	bne.n	80071de <acc_sensor_manager_prepare_radar_engine+0x3e>
 8007228:	2302      	movs	r3, #2
 800722a:	702b      	strb	r3, [r5, #0]
 800722c:	e7db      	b.n	80071e6 <acc_sensor_manager_prepare_radar_engine+0x46>
 800722e:	2301      	movs	r3, #1
 8007230:	702b      	strb	r3, [r5, #0]
 8007232:	e7d8      	b.n	80071e6 <acc_sensor_manager_prepare_radar_engine+0x46>
 8007234:	20000364 	.word	0x20000364

08007238 <acc_sensor_manager_prepare_measurement>:
 8007238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800723c:	4680      	mov	r8, r0
 800723e:	b083      	sub	sp, #12
 8007240:	4608      	mov	r0, r1
 8007242:	460e      	mov	r6, r1
 8007244:	4617      	mov	r7, r2
 8007246:	469a      	mov	sl, r3
 8007248:	f7fd fe76 	bl	8004f38 <acc_base_configuration_sensor_get>
 800724c:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 8007334 <acc_sensor_manager_prepare_measurement+0xfc>
 8007250:	4605      	mov	r5, r0
 8007252:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
 8007256:	4630      	mov	r0, r6
 8007258:	f7fe f894 	bl	8005384 <acc_base_configuration_noise_deviation_override_get>
 800725c:	00e4      	lsls	r4, r4, #3
 800725e:	f8d9 1000 	ldr.w	r1, [r9]
 8007262:	4b32      	ldr	r3, [pc, #200]	; (800732c <acc_sensor_manager_prepare_measurement+0xf4>)
 8007264:	4a32      	ldr	r2, [pc, #200]	; (8007330 <acc_sensor_manager_prepare_measurement+0xf8>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	3c48      	subs	r4, #72	; 0x48
 800726a:	440c      	add	r4, r1
 800726c:	2100      	movs	r1, #0
 800726e:	4683      	mov	fp, r0
 8007270:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007274:	6462      	str	r2, [r4, #68]	; 0x44
 8007276:	b163      	cbz	r3, 8007292 <acc_sensor_manager_prepare_measurement+0x5a>
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	b153      	cbz	r3, 8007292 <acc_sensor_manager_prepare_measurement+0x5a>
 800727c:	4652      	mov	r2, sl
 800727e:	4630      	mov	r0, r6
 8007280:	4639      	mov	r1, r7
 8007282:	4798      	blx	r3
 8007284:	4604      	mov	r4, r0
 8007286:	2800      	cmp	r0, #0
 8007288:	d14b      	bne.n	8007322 <acc_sensor_manager_prepare_measurement+0xea>
 800728a:	4620      	mov	r0, r4
 800728c:	b003      	add	sp, #12
 800728e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007292:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8007296:	f8c8 a038 	str.w	sl, [r8, #56]	; 0x38
 800729a:	b17b      	cbz	r3, 80072bc <acc_sensor_manager_prepare_measurement+0x84>
 800729c:	f1bb 0f00 	cmp.w	fp, #0
 80072a0:	d01b      	beq.n	80072da <acc_sensor_manager_prepare_measurement+0xa2>
 80072a2:	f8a7 b014 	strh.w	fp, [r7, #20]
 80072a6:	463a      	mov	r2, r7
 80072a8:	4629      	mov	r1, r5
 80072aa:	2320      	movs	r3, #32
 80072ac:	200e      	movs	r0, #14
 80072ae:	f000 fdd1 	bl	8007e54 <acc_probes_execute_struct>
 80072b2:	2401      	movs	r4, #1
 80072b4:	4620      	mov	r0, r4
 80072b6:	b003      	add	sp, #12
 80072b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072bc:	f108 0104 	add.w	r1, r8, #4
 80072c0:	4652      	mov	r2, sl
 80072c2:	4628      	mov	r0, r5
 80072c4:	9101      	str	r1, [sp, #4]
 80072c6:	f7ff fe09 	bl	8006edc <calibrate_sensor>
 80072ca:	9901      	ldr	r1, [sp, #4]
 80072cc:	4604      	mov	r4, r0
 80072ce:	2800      	cmp	r0, #0
 80072d0:	d1e4      	bne.n	800729c <acc_sensor_manager_prepare_measurement+0x64>
 80072d2:	4608      	mov	r0, r1
 80072d4:	f000 fc28 	bl	8007b28 <acc_sweep_manager_release>
 80072d8:	e7d7      	b.n	800728a <acc_sensor_manager_prepare_measurement+0x52>
 80072da:	4630      	mov	r0, r6
 80072dc:	f7fe f83e 	bl	800535c <acc_base_configuration_noise_level_normalization_get>
 80072e0:	2800      	cmp	r0, #0
 80072e2:	d0e0      	beq.n	80072a6 <acc_sensor_manager_prepare_measurement+0x6e>
 80072e4:	f8d8 6018 	ldr.w	r6, [r8, #24]
 80072e8:	4630      	mov	r0, r6
 80072ea:	f7fe f9ed 	bl	80056c8 <acc_rss_integration_sensor_device_power_on>
 80072ee:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 80072f2:	f8d9 1000 	ldr.w	r1, [r9]
 80072f6:	f8d8 2038 	ldr.w	r2, [r8, #56]	; 0x38
 80072fa:	00db      	lsls	r3, r3, #3
 80072fc:	3b48      	subs	r3, #72	; 0x48
 80072fe:	f108 0804 	add.w	r8, r8, #4
 8007302:	4419      	add	r1, r3
 8007304:	4640      	mov	r0, r8
 8007306:	f107 0314 	add.w	r3, r7, #20
 800730a:	f000 fc23 	bl	8007b54 <acc_sweep_manager_measure_noise>
 800730e:	4604      	mov	r4, r0
 8007310:	4630      	mov	r0, r6
 8007312:	f7fe f9df 	bl	80056d4 <acc_rss_integration_sensor_device_power_off>
 8007316:	2c00      	cmp	r4, #0
 8007318:	d1c5      	bne.n	80072a6 <acc_sensor_manager_prepare_measurement+0x6e>
 800731a:	4640      	mov	r0, r8
 800731c:	f000 fc04 	bl	8007b28 <acc_sweep_manager_release>
 8007320:	e7b3      	b.n	800728a <acc_sensor_manager_prepare_measurement+0x52>
 8007322:	f1bb 0f00 	cmp.w	fp, #0
 8007326:	d0be      	beq.n	80072a6 <acc_sensor_manager_prepare_measurement+0x6e>
 8007328:	e7bb      	b.n	80072a2 <acc_sensor_manager_prepare_measurement+0x6a>
 800732a:	bf00      	nop
 800732c:	20000364 	.word	0x20000364
 8007330:	ff800000 	.word	0xff800000
 8007334:	20000368 	.word	0x20000368

08007338 <acc_sensor_manager_start_measurement>:
 8007338:	4b1b      	ldr	r3, [pc, #108]	; (80073a8 <acc_sensor_manager_start_measurement+0x70>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	b570      	push	{r4, r5, r6, lr}
 800733e:	4604      	mov	r4, r0
 8007340:	b123      	cbz	r3, 800734c <acc_sensor_manager_start_measurement+0x14>
 8007342:	689b      	ldr	r3, [r3, #8]
 8007344:	b113      	cbz	r3, 800734c <acc_sensor_manager_start_measurement+0x14>
 8007346:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800734a:	4718      	bx	r3
 800734c:	7823      	ldrb	r3, [r4, #0]
 800734e:	2b02      	cmp	r3, #2
 8007350:	d008      	beq.n	8007364 <acc_sensor_manager_start_measurement+0x2c>
 8007352:	4620      	mov	r0, r4
 8007354:	f7ff fda4 	bl	8006ea0 <acc_sensor_manager_power_on_and_start_sensor>
 8007358:	b160      	cbz	r0, 8007374 <acc_sensor_manager_start_measurement+0x3c>
 800735a:	78a3      	ldrb	r3, [r4, #2]
 800735c:	b12b      	cbz	r3, 800736a <acc_sensor_manager_start_measurement+0x32>
 800735e:	7823      	ldrb	r3, [r4, #0]
 8007360:	2b01      	cmp	r3, #1
 8007362:	d010      	beq.n	8007386 <acc_sensor_manager_start_measurement+0x4e>
 8007364:	2501      	movs	r5, #1
 8007366:	4628      	mov	r0, r5
 8007368:	bd70      	pop	{r4, r5, r6, pc}
 800736a:	1d25      	adds	r5, r4, #4
 800736c:	4628      	mov	r0, r5
 800736e:	f000 fc23 	bl	8007bb8 <acc_sweep_manager_measure>
 8007372:	b910      	cbnz	r0, 800737a <acc_sensor_manager_start_measurement+0x42>
 8007374:	2500      	movs	r5, #0
 8007376:	4628      	mov	r0, r5
 8007378:	bd70      	pop	{r4, r5, r6, pc}
 800737a:	4628      	mov	r0, r5
 800737c:	f000 fc12 	bl	8007ba4 <acc_sweep_manager_wait_for_data>
 8007380:	2800      	cmp	r0, #0
 8007382:	d1ec      	bne.n	800735e <acc_sensor_manager_start_measurement+0x26>
 8007384:	e7f6      	b.n	8007374 <acc_sensor_manager_start_measurement+0x3c>
 8007386:	1d25      	adds	r5, r4, #4
 8007388:	4628      	mov	r0, r5
 800738a:	f000 fc0b 	bl	8007ba4 <acc_sweep_manager_wait_for_data>
 800738e:	2800      	cmp	r0, #0
 8007390:	d0f0      	beq.n	8007374 <acc_sensor_manager_start_measurement+0x3c>
 8007392:	4628      	mov	r0, r5
 8007394:	f000 fc10 	bl	8007bb8 <acc_sweep_manager_measure>
 8007398:	4605      	mov	r5, r0
 800739a:	2800      	cmp	r0, #0
 800739c:	d0ea      	beq.n	8007374 <acc_sensor_manager_start_measurement+0x3c>
 800739e:	4620      	mov	r0, r4
 80073a0:	f7ff fe0a 	bl	8006fb8 <acc_sensor_manager_hibernate_enter>
 80073a4:	e7df      	b.n	8007366 <acc_sensor_manager_start_measurement+0x2e>
 80073a6:	bf00      	nop
 80073a8:	20000364 	.word	0x20000364

080073ac <acc_sensor_manager_stop_measurement>:
 80073ac:	78c3      	ldrb	r3, [r0, #3]
 80073ae:	b903      	cbnz	r3, 80073b2 <acc_sensor_manager_stop_measurement+0x6>
 80073b0:	4770      	bx	lr
 80073b2:	b510      	push	{r4, lr}
 80073b4:	4604      	mov	r4, r0
 80073b6:	6980      	ldr	r0, [r0, #24]
 80073b8:	f7fe f98c 	bl	80056d4 <acc_rss_integration_sensor_device_power_off>
 80073bc:	2300      	movs	r3, #0
 80073be:	70e3      	strb	r3, [r4, #3]
 80073c0:	bd10      	pop	{r4, pc}
 80073c2:	bf00      	nop

080073c4 <acc_sensor_manager_release_measurement>:
 80073c4:	6983      	ldr	r3, [r0, #24]
 80073c6:	b173      	cbz	r3, 80073e6 <acc_sensor_manager_release_measurement+0x22>
 80073c8:	4a07      	ldr	r2, [pc, #28]	; (80073e8 <acc_sensor_manager_release_measurement+0x24>)
 80073ca:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 80073ce:	6812      	ldr	r2, [r2, #0]
 80073d0:	00db      	lsls	r3, r3, #3
 80073d2:	3b48      	subs	r3, #72	; 0x48
 80073d4:	4413      	add	r3, r2
 80073d6:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80073da:	b90a      	cbnz	r2, 80073e0 <acc_sensor_manager_release_measurement+0x1c>
 80073dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80073e0:	3004      	adds	r0, #4
 80073e2:	f000 bba1 	b.w	8007b28 <acc_sweep_manager_release>
 80073e6:	4770      	bx	lr
 80073e8:	20000368 	.word	0x20000368

080073ec <acc_sensor_manager_get_sensor_id>:
 80073ec:	6980      	ldr	r0, [r0, #24]
 80073ee:	4770      	bx	lr

080073f0 <acc_sensor_protocol_r2_prepare_load>:
 80073f0:	b570      	push	{r4, r5, r6, lr}
 80073f2:	b084      	sub	sp, #16
 80073f4:	4604      	mov	r4, r0
 80073f6:	4608      	mov	r0, r1
 80073f8:	4611      	mov	r1, r2
 80073fa:	461a      	mov	r2, r3
 80073fc:	9b08      	ldr	r3, [sp, #32]
 80073fe:	f7ff fcef 	bl	8006de0 <acc_sensor_r2_prepare_load_confmem>
 8007402:	2300      	movs	r3, #0
 8007404:	4620      	mov	r0, r4
 8007406:	f10d 020e 	add.w	r2, sp, #14
 800740a:	212a      	movs	r1, #42	; 0x2a
 800740c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8007410:	f000 fd50 	bl	8007eb4 <acc_sensor_reg_read>
 8007414:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8007418:	065b      	lsls	r3, r3, #25
 800741a:	d436      	bmi.n	800748a <acc_sensor_protocol_r2_prepare_load+0x9a>
 800741c:	f10d 020e 	add.w	r2, sp, #14
 8007420:	2500      	movs	r5, #0
 8007422:	2111      	movs	r1, #17
 8007424:	4620      	mov	r0, r4
 8007426:	f8ad 500e 	strh.w	r5, [sp, #14]
 800742a:	f000 fd43 	bl	8007eb4 <acc_sensor_reg_read>
 800742e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8007432:	f413 6680 	ands.w	r6, r3, #1024	; 0x400
 8007436:	d00c      	beq.n	8007452 <acc_sensor_protocol_r2_prepare_load+0x62>
 8007438:	4b1b      	ldr	r3, [pc, #108]	; (80074a8 <acc_sensor_protocol_r2_prepare_load+0xb8>)
 800743a:	4a1c      	ldr	r2, [pc, #112]	; (80074ac <acc_sensor_protocol_r2_prepare_load+0xbc>)
 800743c:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800743e:	491c      	ldr	r1, [pc, #112]	; (80074b0 <acc_sensor_protocol_r2_prepare_load+0xc0>)
 8007440:	4623      	mov	r3, r4
 8007442:	4628      	mov	r0, r5
 8007444:	47b0      	blx	r6
 8007446:	4620      	mov	r0, r4
 8007448:	f004 f888 	bl	800b55c <acc_sensor_diagnostics_r2_sensor_status>
 800744c:	4628      	mov	r0, r5
 800744e:	b004      	add	sp, #16
 8007450:	bd70      	pop	{r4, r5, r6, pc}
 8007452:	2501      	movs	r5, #1
 8007454:	4629      	mov	r1, r5
 8007456:	4620      	mov	r0, r4
 8007458:	9500      	str	r5, [sp, #0]
 800745a:	2380      	movs	r3, #128	; 0x80
 800745c:	2202      	movs	r2, #2
 800745e:	f000 fd4f 	bl	8007f00 <acc_sensor_reg_field_write>
 8007462:	2380      	movs	r3, #128	; 0x80
 8007464:	461a      	mov	r2, r3
 8007466:	4620      	mov	r0, r4
 8007468:	9600      	str	r6, [sp, #0]
 800746a:	2107      	movs	r1, #7
 800746c:	f000 fd48 	bl	8007f00 <acc_sensor_reg_field_write>
 8007470:	462a      	mov	r2, r5
 8007472:	4620      	mov	r0, r4
 8007474:	2105      	movs	r1, #5
 8007476:	f000 fd33 	bl	8007ee0 <acc_sensor_reg_write>
 800747a:	4620      	mov	r0, r4
 800747c:	2203      	movs	r2, #3
 800747e:	217a      	movs	r1, #122	; 0x7a
 8007480:	f000 fd2e 	bl	8007ee0 <acc_sensor_reg_write>
 8007484:	4628      	mov	r0, r5
 8007486:	b004      	add	sp, #16
 8007488:	bd70      	pop	{r4, r5, r6, pc}
 800748a:	f7fe f9c1 	bl	8005810 <acc_rss_integration_log_level>
 800748e:	b130      	cbz	r0, 800749e <acc_sensor_protocol_r2_prepare_load+0xae>
 8007490:	4b05      	ldr	r3, [pc, #20]	; (80074a8 <acc_sensor_protocol_r2_prepare_load+0xb8>)
 8007492:	4a08      	ldr	r2, [pc, #32]	; (80074b4 <acc_sensor_protocol_r2_prepare_load+0xc4>)
 8007494:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8007496:	4906      	ldr	r1, [pc, #24]	; (80074b0 <acc_sensor_protocol_r2_prepare_load+0xc0>)
 8007498:	4623      	mov	r3, r4
 800749a:	2001      	movs	r0, #1
 800749c:	47a8      	blx	r5
 800749e:	4620      	mov	r0, r4
 80074a0:	f004 f85c 	bl	800b55c <acc_sensor_diagnostics_r2_sensor_status>
 80074a4:	e7ba      	b.n	800741c <acc_sensor_protocol_r2_prepare_load+0x2c>
 80074a6:	bf00      	nop
 80074a8:	200004c0 	.word	0x200004c0
 80074ac:	0800ed3c 	.word	0x0800ed3c
 80074b0:	0800ed28 	.word	0x0800ed28
 80074b4:	0800ecfc 	.word	0x0800ecfc

080074b8 <acc_sensor_protocol_r2_run_program>:
 80074b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074ba:	b085      	sub	sp, #20
 80074bc:	4604      	mov	r4, r0
 80074be:	460e      	mov	r6, r1
 80074c0:	f7fe f9a6 	bl	8005810 <acc_rss_integration_log_level>
 80074c4:	2803      	cmp	r0, #3
 80074c6:	d907      	bls.n	80074d8 <acc_sensor_protocol_r2_run_program+0x20>
 80074c8:	4b1e      	ldr	r3, [pc, #120]	; (8007544 <acc_sensor_protocol_r2_run_program+0x8c>)
 80074ca:	9600      	str	r6, [sp, #0]
 80074cc:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 80074ce:	4a1e      	ldr	r2, [pc, #120]	; (8007548 <acc_sensor_protocol_r2_run_program+0x90>)
 80074d0:	491e      	ldr	r1, [pc, #120]	; (800754c <acc_sensor_protocol_r2_run_program+0x94>)
 80074d2:	4623      	mov	r3, r4
 80074d4:	2004      	movs	r0, #4
 80074d6:	47a8      	blx	r5
 80074d8:	f10d 020e 	add.w	r2, sp, #14
 80074dc:	2700      	movs	r7, #0
 80074de:	2111      	movs	r1, #17
 80074e0:	4620      	mov	r0, r4
 80074e2:	f8ad 700e 	strh.w	r7, [sp, #14]
 80074e6:	f000 fce5 	bl	8007eb4 <acc_sensor_reg_read>
 80074ea:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 80074ee:	f412 6580 	ands.w	r5, r2, #1024	; 0x400
 80074f2:	d11a      	bne.n	800752a <acc_sensor_protocol_r2_run_program+0x72>
 80074f4:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80074f8:	d309      	bcc.n	800750e <acc_sensor_protocol_r2_run_program+0x56>
 80074fa:	4b12      	ldr	r3, [pc, #72]	; (8007544 <acc_sensor_protocol_r2_run_program+0x8c>)
 80074fc:	4a14      	ldr	r2, [pc, #80]	; (8007550 <acc_sensor_protocol_r2_run_program+0x98>)
 80074fe:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8007500:	4912      	ldr	r1, [pc, #72]	; (800754c <acc_sensor_protocol_r2_run_program+0x94>)
 8007502:	4628      	mov	r0, r5
 8007504:	4633      	mov	r3, r6
 8007506:	47a0      	blx	r4
 8007508:	4628      	mov	r0, r5
 800750a:	b005      	add	sp, #20
 800750c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800750e:	462a      	mov	r2, r5
 8007510:	4620      	mov	r0, r4
 8007512:	2110      	movs	r1, #16
 8007514:	f000 fce4 	bl	8007ee0 <acc_sensor_reg_write>
 8007518:	4620      	mov	r0, r4
 800751a:	f446 6280 	orr.w	r2, r6, #1024	; 0x400
 800751e:	2110      	movs	r1, #16
 8007520:	f000 fcde 	bl	8007ee0 <acc_sensor_reg_write>
 8007524:	2001      	movs	r0, #1
 8007526:	b005      	add	sp, #20
 8007528:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800752a:	4b06      	ldr	r3, [pc, #24]	; (8007544 <acc_sensor_protocol_r2_run_program+0x8c>)
 800752c:	4a09      	ldr	r2, [pc, #36]	; (8007554 <acc_sensor_protocol_r2_run_program+0x9c>)
 800752e:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8007530:	4906      	ldr	r1, [pc, #24]	; (800754c <acc_sensor_protocol_r2_run_program+0x94>)
 8007532:	4623      	mov	r3, r4
 8007534:	4638      	mov	r0, r7
 8007536:	47a8      	blx	r5
 8007538:	4620      	mov	r0, r4
 800753a:	f004 f80f 	bl	800b55c <acc_sensor_diagnostics_r2_sensor_status>
 800753e:	4638      	mov	r0, r7
 8007540:	b005      	add	sp, #20
 8007542:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007544:	200004c0 	.word	0x200004c0
 8007548:	0800ed6c 	.word	0x0800ed6c
 800754c:	0800ed28 	.word	0x0800ed28
 8007550:	0800edc0 	.word	0x0800edc0
 8007554:	0800ed90 	.word	0x0800ed90

08007558 <acc_sensor_protocol_r2_terminate_program>:
 8007558:	b530      	push	{r4, r5, lr}
 800755a:	b083      	sub	sp, #12
 800755c:	2300      	movs	r3, #0
 800755e:	f10d 0206 	add.w	r2, sp, #6
 8007562:	2111      	movs	r1, #17
 8007564:	f8ad 3006 	strh.w	r3, [sp, #6]
 8007568:	4605      	mov	r5, r0
 800756a:	f000 fca3 	bl	8007eb4 <acc_sensor_reg_read>
 800756e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8007572:	f413 6480 	ands.w	r4, r3, #1024	; 0x400
 8007576:	d10b      	bne.n	8007590 <acc_sensor_protocol_r2_terminate_program+0x38>
 8007578:	4b09      	ldr	r3, [pc, #36]	; (80075a0 <acc_sensor_protocol_r2_terminate_program+0x48>)
 800757a:	4a0a      	ldr	r2, [pc, #40]	; (80075a4 <acc_sensor_protocol_r2_terminate_program+0x4c>)
 800757c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800757e:	490a      	ldr	r1, [pc, #40]	; (80075a8 <acc_sensor_protocol_r2_terminate_program+0x50>)
 8007580:	4620      	mov	r0, r4
 8007582:	4798      	blx	r3
 8007584:	4628      	mov	r0, r5
 8007586:	f003 ffe9 	bl	800b55c <acc_sensor_diagnostics_r2_sensor_status>
 800758a:	4620      	mov	r0, r4
 800758c:	b003      	add	sp, #12
 800758e:	bd30      	pop	{r4, r5, pc}
 8007590:	4628      	mov	r0, r5
 8007592:	2201      	movs	r2, #1
 8007594:	2174      	movs	r1, #116	; 0x74
 8007596:	f000 fca3 	bl	8007ee0 <acc_sensor_reg_write>
 800759a:	2001      	movs	r0, #1
 800759c:	b003      	add	sp, #12
 800759e:	bd30      	pop	{r4, r5, pc}
 80075a0:	200004c0 	.word	0x200004c0
 80075a4:	0800eddc 	.word	0x0800eddc
 80075a8:	0800ed28 	.word	0x0800ed28

080075ac <acc_sensor_protocol_r2_is_sensor_running>:
 80075ac:	b500      	push	{lr}
 80075ae:	b083      	sub	sp, #12
 80075b0:	2300      	movs	r3, #0
 80075b2:	f10d 0206 	add.w	r2, sp, #6
 80075b6:	2111      	movs	r1, #17
 80075b8:	f8ad 3006 	strh.w	r3, [sp, #6]
 80075bc:	f000 fc7a 	bl	8007eb4 <acc_sensor_reg_read>
 80075c0:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80075c4:	f3c0 2080 	ubfx	r0, r0, #10, #1
 80075c8:	b003      	add	sp, #12
 80075ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80075ce:	bf00      	nop

080075d0 <acc_sensor_protocol_r2_ack_event>:
 80075d0:	b570      	push	{r4, r5, r6, lr}
 80075d2:	b082      	sub	sp, #8
 80075d4:	2300      	movs	r3, #0
 80075d6:	f10d 0206 	add.w	r2, sp, #6
 80075da:	2138      	movs	r1, #56	; 0x38
 80075dc:	4605      	mov	r5, r0
 80075de:	f8ad 3006 	strh.w	r3, [sp, #6]
 80075e2:	f000 fc67 	bl	8007eb4 <acc_sensor_reg_read>
 80075e6:	f8bd 4006 	ldrh.w	r4, [sp, #6]
 80075ea:	b114      	cbz	r4, 80075f2 <acc_sensor_protocol_r2_ack_event+0x22>
 80075ec:	2001      	movs	r0, #1
 80075ee:	b002      	add	sp, #8
 80075f0:	bd70      	pop	{r4, r5, r6, pc}
 80075f2:	4b06      	ldr	r3, [pc, #24]	; (800760c <acc_sensor_protocol_r2_ack_event+0x3c>)
 80075f4:	4a06      	ldr	r2, [pc, #24]	; (8007610 <acc_sensor_protocol_r2_ack_event+0x40>)
 80075f6:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 80075f8:	4906      	ldr	r1, [pc, #24]	; (8007614 <acc_sensor_protocol_r2_ack_event+0x44>)
 80075fa:	462b      	mov	r3, r5
 80075fc:	4620      	mov	r0, r4
 80075fe:	47b0      	blx	r6
 8007600:	4628      	mov	r0, r5
 8007602:	f003 ffab 	bl	800b55c <acc_sensor_diagnostics_r2_sensor_status>
 8007606:	4620      	mov	r0, r4
 8007608:	b002      	add	sp, #8
 800760a:	bd70      	pop	{r4, r5, r6, pc}
 800760c:	200004c0 	.word	0x200004c0
 8007610:	0800ee10 	.word	0x0800ee10
 8007614:	0800ed28 	.word	0x0800ed28

08007618 <acc_sensor_protocol_r2_get_event>:
 8007618:	b570      	push	{r4, r5, r6, lr}
 800761a:	460c      	mov	r4, r1
 800761c:	b084      	sub	sp, #16
 800761e:	b301      	cbz	r1, 8007662 <acc_sensor_protocol_r2_get_event+0x4a>
 8007620:	f10d 020e 	add.w	r2, sp, #14
 8007624:	2128      	movs	r1, #40	; 0x28
 8007626:	4605      	mov	r5, r0
 8007628:	f000 fc44 	bl	8007eb4 <acc_sensor_reg_read>
 800762c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8007630:	8062      	strh	r2, [r4, #2]
 8007632:	b2d3      	uxtb	r3, r2
 8007634:	2b01      	cmp	r3, #1
 8007636:	7023      	strb	r3, [r4, #0]
 8007638:	d026      	beq.n	8007688 <acc_sensor_protocol_r2_get_event+0x70>
 800763a:	d80c      	bhi.n	8007656 <acc_sensor_protocol_r2_get_event+0x3e>
 800763c:	4b22      	ldr	r3, [pc, #136]	; (80076c8 <acc_sensor_protocol_r2_get_event+0xb0>)
 800763e:	4a23      	ldr	r2, [pc, #140]	; (80076cc <acc_sensor_protocol_r2_get_event+0xb4>)
 8007640:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8007642:	4923      	ldr	r1, [pc, #140]	; (80076d0 <acc_sensor_protocol_r2_get_event+0xb8>)
 8007644:	462b      	mov	r3, r5
 8007646:	2000      	movs	r0, #0
 8007648:	47a0      	blx	r4
 800764a:	4628      	mov	r0, r5
 800764c:	f003 ff86 	bl	800b55c <acc_sensor_diagnostics_r2_sensor_status>
 8007650:	2000      	movs	r0, #0
 8007652:	b004      	add	sp, #16
 8007654:	bd70      	pop	{r4, r5, r6, pc}
 8007656:	1e9a      	subs	r2, r3, #2
 8007658:	2a09      	cmp	r2, #9
 800765a:	d80b      	bhi.n	8007674 <acc_sensor_protocol_r2_get_event+0x5c>
 800765c:	2001      	movs	r0, #1
 800765e:	b004      	add	sp, #16
 8007660:	bd70      	pop	{r4, r5, r6, pc}
 8007662:	4b19      	ldr	r3, [pc, #100]	; (80076c8 <acc_sensor_protocol_r2_get_event+0xb0>)
 8007664:	4a1b      	ldr	r2, [pc, #108]	; (80076d4 <acc_sensor_protocol_r2_get_event+0xbc>)
 8007666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007668:	4919      	ldr	r1, [pc, #100]	; (80076d0 <acc_sensor_protocol_r2_get_event+0xb8>)
 800766a:	4620      	mov	r0, r4
 800766c:	4798      	blx	r3
 800766e:	4620      	mov	r0, r4
 8007670:	b004      	add	sp, #16
 8007672:	bd70      	pop	{r4, r5, r6, pc}
 8007674:	4a14      	ldr	r2, [pc, #80]	; (80076c8 <acc_sensor_protocol_r2_get_event+0xb0>)
 8007676:	9500      	str	r5, [sp, #0]
 8007678:	6b56      	ldr	r6, [r2, #52]	; 0x34
 800767a:	4915      	ldr	r1, [pc, #84]	; (80076d0 <acc_sensor_protocol_r2_get_event+0xb8>)
 800767c:	4a16      	ldr	r2, [pc, #88]	; (80076d8 <acc_sensor_protocol_r2_get_event+0xc0>)
 800767e:	2000      	movs	r0, #0
 8007680:	47b0      	blx	r6
 8007682:	2300      	movs	r3, #0
 8007684:	7023      	strb	r3, [r4, #0]
 8007686:	e7e0      	b.n	800764a <acc_sensor_protocol_r2_get_event+0x32>
 8007688:	f5b2 5f88 	cmp.w	r2, #4352	; 0x1100
 800768c:	ea4f 2112 	mov.w	r1, r2, lsr #8
 8007690:	d203      	bcs.n	800769a <acc_sensor_protocol_r2_get_event+0x82>
 8007692:	4a12      	ldr	r2, [pc, #72]	; (80076dc <acc_sensor_protocol_r2_get_event+0xc4>)
 8007694:	408b      	lsls	r3, r1
 8007696:	401a      	ands	r2, r3
 8007698:	b96a      	cbnz	r2, 80076b6 <acc_sensor_protocol_r2_get_event+0x9e>
 800769a:	4a0b      	ldr	r2, [pc, #44]	; (80076c8 <acc_sensor_protocol_r2_get_event+0xb0>)
 800769c:	f242 1301 	movw	r3, #8449	; 0x2101
 80076a0:	6b56      	ldr	r6, [r2, #52]	; 0x34
 80076a2:	8063      	strh	r3, [r4, #2]
 80076a4:	2320      	movs	r3, #32
 80076a6:	4a0e      	ldr	r2, [pc, #56]	; (80076e0 <acc_sensor_protocol_r2_get_event+0xc8>)
 80076a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076ac:	4a0d      	ldr	r2, [pc, #52]	; (80076e4 <acc_sensor_protocol_r2_get_event+0xcc>)
 80076ae:	4908      	ldr	r1, [pc, #32]	; (80076d0 <acc_sensor_protocol_r2_get_event+0xb8>)
 80076b0:	2000      	movs	r0, #0
 80076b2:	47b0      	blx	r6
 80076b4:	e7c9      	b.n	800764a <acc_sensor_protocol_r2_get_event+0x32>
 80076b6:	1e4b      	subs	r3, r1, #1
 80076b8:	4a03      	ldr	r2, [pc, #12]	; (80076c8 <acc_sensor_protocol_r2_get_event+0xb0>)
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	2b20      	cmp	r3, #32
 80076be:	6b56      	ldr	r6, [r2, #52]	; 0x34
 80076c0:	d9f1      	bls.n	80076a6 <acc_sensor_protocol_r2_get_event+0x8e>
 80076c2:	4b09      	ldr	r3, [pc, #36]	; (80076e8 <acc_sensor_protocol_r2_get_event+0xd0>)
 80076c4:	e7f2      	b.n	80076ac <acc_sensor_protocol_r2_get_event+0x94>
 80076c6:	bf00      	nop
 80076c8:	200004c0 	.word	0x200004c0
 80076cc:	0800ee68 	.word	0x0800ee68
 80076d0:	0800ed28 	.word	0x0800ed28
 80076d4:	0800ee54 	.word	0x0800ee54
 80076d8:	0800eeac 	.word	0x0800eeac
 80076dc:	00010016 	.word	0x00010016
 80076e0:	0800f188 	.word	0x0800f188
 80076e4:	0800ee8c 	.word	0x0800ee8c
 80076e8:	0800ee44 	.word	0x0800ee44

080076ec <acc_sensor_protocol_r2_wait_for_event>:
 80076ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076f0:	b087      	sub	sp, #28
 80076f2:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 80077a8 <acc_sensor_protocol_r2_wait_for_event+0xbc>
 80076f6:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80077bc <acc_sensor_protocol_r2_wait_for_event+0xd0>
 80076fa:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 80077b0 <acc_sensor_protocol_r2_wait_for_event+0xc4>
 80076fe:	9303      	str	r3, [sp, #12]
 8007700:	4604      	mov	r4, r0
 8007702:	460e      	mov	r6, r1
 8007704:	4690      	mov	r8, r2
 8007706:	2500      	movs	r5, #0
 8007708:	e018      	b.n	800773c <acc_sensor_protocol_r2_wait_for_event+0x50>
 800770a:	4620      	mov	r0, r4
 800770c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007710:	f000 fbd0 	bl	8007eb4 <acc_sensor_reg_read>
 8007714:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8007718:	065b      	lsls	r3, r3, #25
 800771a:	d434      	bmi.n	8007786 <acc_sensor_protocol_r2_wait_for_event+0x9a>
 800771c:	f7fe f878 	bl	8005810 <acc_rss_integration_log_level>
 8007720:	4607      	mov	r7, r0
 8007722:	4623      	mov	r3, r4
 8007724:	4652      	mov	r2, sl
 8007726:	4649      	mov	r1, r9
 8007728:	2001      	movs	r0, #1
 800772a:	b117      	cbz	r7, 8007732 <acc_sensor_protocol_r2_wait_for_event+0x46>
 800772c:	f8db 7034 	ldr.w	r7, [fp, #52]	; 0x34
 8007730:	47b8      	blx	r7
 8007732:	4545      	cmp	r5, r8
 8007734:	f105 0301 	add.w	r3, r5, #1
 8007738:	d018      	beq.n	800776c <acc_sensor_protocol_r2_wait_for_event+0x80>
 800773a:	461d      	mov	r5, r3
 800773c:	4631      	mov	r1, r6
 800773e:	4620      	mov	r0, r4
 8007740:	f7fd ffe6 	bl	8005710 <acc_rss_integration_wait_for_sensor_interrupt>
 8007744:	f10d 0216 	add.w	r2, sp, #22
 8007748:	212a      	movs	r1, #42	; 0x2a
 800774a:	2300      	movs	r3, #0
 800774c:	4607      	mov	r7, r0
 800774e:	2800      	cmp	r0, #0
 8007750:	d1db      	bne.n	800770a <acc_sensor_protocol_r2_wait_for_event+0x1e>
 8007752:	4b15      	ldr	r3, [pc, #84]	; (80077a8 <acc_sensor_protocol_r2_wait_for_event+0xbc>)
 8007754:	4a15      	ldr	r2, [pc, #84]	; (80077ac <acc_sensor_protocol_r2_wait_for_event+0xc0>)
 8007756:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8007758:	4915      	ldr	r1, [pc, #84]	; (80077b0 <acc_sensor_protocol_r2_wait_for_event+0xc4>)
 800775a:	4623      	mov	r3, r4
 800775c:	47a8      	blx	r5
 800775e:	4620      	mov	r0, r4
 8007760:	f003 fefc 	bl	800b55c <acc_sensor_diagnostics_r2_sensor_status>
 8007764:	4638      	mov	r0, r7
 8007766:	b007      	add	sp, #28
 8007768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800776c:	4a0e      	ldr	r2, [pc, #56]	; (80077a8 <acc_sensor_protocol_r2_wait_for_event+0xbc>)
 800776e:	9400      	str	r4, [sp, #0]
 8007770:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8007772:	490f      	ldr	r1, [pc, #60]	; (80077b0 <acc_sensor_protocol_r2_wait_for_event+0xc4>)
 8007774:	4a0f      	ldr	r2, [pc, #60]	; (80077b4 <acc_sensor_protocol_r2_wait_for_event+0xc8>)
 8007776:	462b      	mov	r3, r5
 8007778:	2000      	movs	r0, #0
 800777a:	47a0      	blx	r4
 800777c:	2700      	movs	r7, #0
 800777e:	4638      	mov	r0, r7
 8007780:	b007      	add	sp, #28
 8007782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007786:	9903      	ldr	r1, [sp, #12]
 8007788:	4620      	mov	r0, r4
 800778a:	f7ff ff45 	bl	8007618 <acc_sensor_protocol_r2_get_event>
 800778e:	4607      	mov	r7, r0
 8007790:	2800      	cmp	r0, #0
 8007792:	d1e7      	bne.n	8007764 <acc_sensor_protocol_r2_wait_for_event+0x78>
 8007794:	4b04      	ldr	r3, [pc, #16]	; (80077a8 <acc_sensor_protocol_r2_wait_for_event+0xbc>)
 8007796:	4a08      	ldr	r2, [pc, #32]	; (80077b8 <acc_sensor_protocol_r2_wait_for_event+0xcc>)
 8007798:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 800779a:	4905      	ldr	r1, [pc, #20]	; (80077b0 <acc_sensor_protocol_r2_wait_for_event+0xc4>)
 800779c:	4623      	mov	r3, r4
 800779e:	47a8      	blx	r5
 80077a0:	4638      	mov	r0, r7
 80077a2:	b007      	add	sp, #28
 80077a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077a8:	200004c0 	.word	0x200004c0
 80077ac:	0800eedc 	.word	0x0800eedc
 80077b0:	0800ed28 	.word	0x0800ed28
 80077b4:	0800ef28 	.word	0x0800ef28
 80077b8:	0800ef64 	.word	0x0800ef64
 80077bc:	0800ef04 	.word	0x0800ef04

080077c0 <acc_sensor_protocol_r2_wait_for_specific_event>:
 80077c0:	b570      	push	{r4, r5, r6, lr}
 80077c2:	b084      	sub	sp, #16
 80077c4:	4616      	mov	r6, r2
 80077c6:	461c      	mov	r4, r3
 80077c8:	2264      	movs	r2, #100	; 0x64
 80077ca:	ab03      	add	r3, sp, #12
 80077cc:	4605      	mov	r5, r0
 80077ce:	f7ff ff8d 	bl	80076ec <acc_sensor_protocol_r2_wait_for_event>
 80077d2:	b168      	cbz	r0, 80077f0 <acc_sensor_protocol_r2_wait_for_specific_event+0x30>
 80077d4:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80077d8:	42b3      	cmp	r3, r6
 80077da:	d00b      	beq.n	80077f4 <acc_sensor_protocol_r2_wait_for_specific_event+0x34>
 80077dc:	e9cd 3600 	strd	r3, r6, [sp]
 80077e0:	4a08      	ldr	r2, [pc, #32]	; (8007804 <acc_sensor_protocol_r2_wait_for_specific_event+0x44>)
 80077e2:	4b09      	ldr	r3, [pc, #36]	; (8007808 <acc_sensor_protocol_r2_wait_for_specific_event+0x48>)
 80077e4:	6b54      	ldr	r4, [r2, #52]	; 0x34
 80077e6:	4909      	ldr	r1, [pc, #36]	; (800780c <acc_sensor_protocol_r2_wait_for_specific_event+0x4c>)
 80077e8:	4a09      	ldr	r2, [pc, #36]	; (8007810 <acc_sensor_protocol_r2_wait_for_specific_event+0x50>)
 80077ea:	2000      	movs	r0, #0
 80077ec:	47a0      	blx	r4
 80077ee:	2000      	movs	r0, #0
 80077f0:	b004      	add	sp, #16
 80077f2:	bd70      	pop	{r4, r5, r6, pc}
 80077f4:	2c00      	cmp	r4, #0
 80077f6:	d0fb      	beq.n	80077f0 <acc_sensor_protocol_r2_wait_for_specific_event+0x30>
 80077f8:	4628      	mov	r0, r5
 80077fa:	f7ff fee9 	bl	80075d0 <acc_sensor_protocol_r2_ack_event>
 80077fe:	b004      	add	sp, #16
 8007800:	bd70      	pop	{r4, r5, r6, pc}
 8007802:	bf00      	nop
 8007804:	200004c0 	.word	0x200004c0
 8007808:	0800f20c 	.word	0x0800f20c
 800780c:	0800ed28 	.word	0x0800ed28
 8007810:	0800ef8c 	.word	0x0800ef8c

08007814 <acc_sensor_protocol_r2_wait_for_hibernate_ready>:
 8007814:	2301      	movs	r3, #1
 8007816:	220b      	movs	r2, #11
 8007818:	f7ff bfd2 	b.w	80077c0 <acc_sensor_protocol_r2_wait_for_specific_event>

0800781c <acc_sensor_protocol_r2_stop>:
 800781c:	b530      	push	{r4, r5, lr}
 800781e:	b083      	sub	sp, #12
 8007820:	460c      	mov	r4, r1
 8007822:	4605      	mov	r5, r0
 8007824:	f7ff fe98 	bl	8007558 <acc_sensor_protocol_r2_terminate_program>
 8007828:	b910      	cbnz	r0, 8007830 <acc_sensor_protocol_r2_stop+0x14>
 800782a:	2000      	movs	r0, #0
 800782c:	b003      	add	sp, #12
 800782e:	bd30      	pop	{r4, r5, pc}
 8007830:	4628      	mov	r0, r5
 8007832:	f7ff fecd 	bl	80075d0 <acc_sensor_protocol_r2_ack_event>
 8007836:	2800      	cmp	r0, #0
 8007838:	d0f7      	beq.n	800782a <acc_sensor_protocol_r2_stop+0xe>
 800783a:	4621      	mov	r1, r4
 800783c:	ab01      	add	r3, sp, #4
 800783e:	2264      	movs	r2, #100	; 0x64
 8007840:	4628      	mov	r0, r5
 8007842:	f7ff ff53 	bl	80076ec <acc_sensor_protocol_r2_wait_for_event>
 8007846:	2800      	cmp	r0, #0
 8007848:	d0ef      	beq.n	800782a <acc_sensor_protocol_r2_stop+0xe>
 800784a:	4628      	mov	r0, r5
 800784c:	f7ff fec0 	bl	80075d0 <acc_sensor_protocol_r2_ack_event>
 8007850:	2800      	cmp	r0, #0
 8007852:	d0ea      	beq.n	800782a <acc_sensor_protocol_r2_stop+0xe>
 8007854:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007858:	2b02      	cmp	r3, #2
 800785a:	d0e7      	beq.n	800782c <acc_sensor_protocol_r2_stop+0x10>
 800785c:	4a05      	ldr	r2, [pc, #20]	; (8007874 <acc_sensor_protocol_r2_stop+0x58>)
 800785e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8007862:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8007864:	4904      	ldr	r1, [pc, #16]	; (8007878 <acc_sensor_protocol_r2_stop+0x5c>)
 8007866:	4a05      	ldr	r2, [pc, #20]	; (800787c <acc_sensor_protocol_r2_stop+0x60>)
 8007868:	2000      	movs	r0, #0
 800786a:	47a0      	blx	r4
 800786c:	4628      	mov	r0, r5
 800786e:	f003 fe75 	bl	800b55c <acc_sensor_diagnostics_r2_sensor_status>
 8007872:	e7da      	b.n	800782a <acc_sensor_protocol_r2_stop+0xe>
 8007874:	200004c0 	.word	0x200004c0
 8007878:	0800ed28 	.word	0x0800ed28
 800787c:	0800efb8 	.word	0x0800efb8

08007880 <acc_sensor_protocol_r2_wait_for_radar_data>:
 8007880:	b570      	push	{r4, r5, r6, lr}
 8007882:	b084      	sub	sp, #16
 8007884:	4616      	mov	r6, r2
 8007886:	ab03      	add	r3, sp, #12
 8007888:	2264      	movs	r2, #100	; 0x64
 800788a:	4605      	mov	r5, r0
 800788c:	f7ff ff2e 	bl	80076ec <acc_sensor_protocol_r2_wait_for_event>
 8007890:	4604      	mov	r4, r0
 8007892:	b180      	cbz	r0, 80078b6 <acc_sensor_protocol_r2_wait_for_radar_data+0x36>
 8007894:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8007898:	2b06      	cmp	r3, #6
 800789a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800789e:	d10d      	bne.n	80078bc <acc_sensor_protocol_r2_wait_for_radar_data+0x3c>
 80078a0:	0519      	lsls	r1, r3, #20
 80078a2:	d50b      	bpl.n	80078bc <acc_sensor_protocol_r2_wait_for_radar_data+0x3c>
 80078a4:	f413 6280 	ands.w	r2, r3, #1024	; 0x400
 80078a8:	d114      	bne.n	80078d4 <acc_sensor_protocol_r2_wait_for_radar_data+0x54>
 80078aa:	b106      	cbz	r6, 80078ae <acc_sensor_protocol_r2_wait_for_radar_data+0x2e>
 80078ac:	7032      	strb	r2, [r6, #0]
 80078ae:	05da      	lsls	r2, r3, #23
 80078b0:	d425      	bmi.n	80078fe <acc_sensor_protocol_r2_wait_for_radar_data+0x7e>
 80078b2:	059b      	lsls	r3, r3, #22
 80078b4:	d418      	bmi.n	80078e8 <acc_sensor_protocol_r2_wait_for_radar_data+0x68>
 80078b6:	4620      	mov	r0, r4
 80078b8:	b004      	add	sp, #16
 80078ba:	bd70      	pop	{r4, r5, r6, pc}
 80078bc:	4a16      	ldr	r2, [pc, #88]	; (8007918 <acc_sensor_protocol_r2_wait_for_radar_data+0x98>)
 80078be:	9300      	str	r3, [sp, #0]
 80078c0:	6b54      	ldr	r4, [r2, #52]	; 0x34
 80078c2:	4916      	ldr	r1, [pc, #88]	; (800791c <acc_sensor_protocol_r2_wait_for_radar_data+0x9c>)
 80078c4:	4a16      	ldr	r2, [pc, #88]	; (8007920 <acc_sensor_protocol_r2_wait_for_radar_data+0xa0>)
 80078c6:	462b      	mov	r3, r5
 80078c8:	2000      	movs	r0, #0
 80078ca:	47a0      	blx	r4
 80078cc:	2400      	movs	r4, #0
 80078ce:	4620      	mov	r0, r4
 80078d0:	b004      	add	sp, #16
 80078d2:	bd70      	pop	{r4, r5, r6, pc}
 80078d4:	4629      	mov	r1, r5
 80078d6:	200f      	movs	r0, #15
 80078d8:	f000 fad4 	bl	8007e84 <acc_probes_execute_primitive_probe>
 80078dc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80078e0:	4622      	mov	r2, r4
 80078e2:	2e00      	cmp	r6, #0
 80078e4:	d1e2      	bne.n	80078ac <acc_sensor_protocol_r2_wait_for_radar_data+0x2c>
 80078e6:	e7e2      	b.n	80078ae <acc_sensor_protocol_r2_wait_for_radar_data+0x2e>
 80078e8:	f7fd ff92 	bl	8005810 <acc_rss_integration_log_level>
 80078ec:	2803      	cmp	r0, #3
 80078ee:	d9e2      	bls.n	80078b6 <acc_sensor_protocol_r2_wait_for_radar_data+0x36>
 80078f0:	4b09      	ldr	r3, [pc, #36]	; (8007918 <acc_sensor_protocol_r2_wait_for_radar_data+0x98>)
 80078f2:	4a0c      	ldr	r2, [pc, #48]	; (8007924 <acc_sensor_protocol_r2_wait_for_radar_data+0xa4>)
 80078f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078f6:	4909      	ldr	r1, [pc, #36]	; (800791c <acc_sensor_protocol_r2_wait_for_radar_data+0x9c>)
 80078f8:	2004      	movs	r0, #4
 80078fa:	4798      	blx	r3
 80078fc:	e7db      	b.n	80078b6 <acc_sensor_protocol_r2_wait_for_radar_data+0x36>
 80078fe:	f7fd ff87 	bl	8005810 <acc_rss_integration_log_level>
 8007902:	2803      	cmp	r0, #3
 8007904:	d905      	bls.n	8007912 <acc_sensor_protocol_r2_wait_for_radar_data+0x92>
 8007906:	4b04      	ldr	r3, [pc, #16]	; (8007918 <acc_sensor_protocol_r2_wait_for_radar_data+0x98>)
 8007908:	4a07      	ldr	r2, [pc, #28]	; (8007928 <acc_sensor_protocol_r2_wait_for_radar_data+0xa8>)
 800790a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800790c:	4903      	ldr	r1, [pc, #12]	; (800791c <acc_sensor_protocol_r2_wait_for_radar_data+0x9c>)
 800790e:	2004      	movs	r0, #4
 8007910:	4798      	blx	r3
 8007912:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8007916:	e7cc      	b.n	80078b2 <acc_sensor_protocol_r2_wait_for_radar_data+0x32>
 8007918:	200004c0 	.word	0x200004c0
 800791c:	0800ed28 	.word	0x0800ed28
 8007920:	0800efd8 	.word	0x0800efd8
 8007924:	0800f024 	.word	0x0800f024
 8007928:	0800f008 	.word	0x0800f008

0800792c <acc_sensor_protocol_r2_wait_for_sync_start>:
 800792c:	b570      	push	{r4, r5, r6, lr}
 800792e:	b084      	sub	sp, #16
 8007930:	ab03      	add	r3, sp, #12
 8007932:	2264      	movs	r2, #100	; 0x64
 8007934:	4605      	mov	r5, r0
 8007936:	f7ff fed9 	bl	80076ec <acc_sensor_protocol_r2_wait_for_event>
 800793a:	4604      	mov	r4, r0
 800793c:	b178      	cbz	r0, 800795e <acc_sensor_protocol_r2_wait_for_sync_start+0x32>
 800793e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8007942:	2b06      	cmp	r3, #6
 8007944:	d008      	beq.n	8007958 <acc_sensor_protocol_r2_wait_for_sync_start+0x2c>
 8007946:	4a0a      	ldr	r2, [pc, #40]	; (8007970 <acc_sensor_protocol_r2_wait_for_sync_start+0x44>)
 8007948:	9300      	str	r3, [sp, #0]
 800794a:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800794c:	4909      	ldr	r1, [pc, #36]	; (8007974 <acc_sensor_protocol_r2_wait_for_sync_start+0x48>)
 800794e:	4a0a      	ldr	r2, [pc, #40]	; (8007978 <acc_sensor_protocol_r2_wait_for_sync_start+0x4c>)
 8007950:	462b      	mov	r3, r5
 8007952:	2000      	movs	r0, #0
 8007954:	47a0      	blx	r4
 8007956:	2400      	movs	r4, #0
 8007958:	4620      	mov	r0, r4
 800795a:	b004      	add	sp, #16
 800795c:	bd70      	pop	{r4, r5, r6, pc}
 800795e:	4b04      	ldr	r3, [pc, #16]	; (8007970 <acc_sensor_protocol_r2_wait_for_sync_start+0x44>)
 8007960:	4a06      	ldr	r2, [pc, #24]	; (800797c <acc_sensor_protocol_r2_wait_for_sync_start+0x50>)
 8007962:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8007964:	4903      	ldr	r1, [pc, #12]	; (8007974 <acc_sensor_protocol_r2_wait_for_sync_start+0x48>)
 8007966:	462b      	mov	r3, r5
 8007968:	47b0      	blx	r6
 800796a:	4620      	mov	r0, r4
 800796c:	b004      	add	sp, #16
 800796e:	bd70      	pop	{r4, r5, r6, pc}
 8007970:	200004c0 	.word	0x200004c0
 8007974:	0800ed28 	.word	0x0800ed28
 8007978:	0800f070 	.word	0x0800f070
 800797c:	0800f03c 	.word	0x0800f03c

08007980 <acc_sensor_protocol_r2_transfer_data>:
 8007980:	b530      	push	{r4, r5, lr}
 8007982:	b083      	sub	sp, #12
 8007984:	4613      	mov	r3, r2
 8007986:	9201      	str	r2, [sp, #4]
 8007988:	2200      	movs	r2, #0
 800798a:	4605      	mov	r5, r0
 800798c:	f7ff fa80 	bl	8006e90 <acc_sensor_r2_buffer_processed_read>
 8007990:	9b01      	ldr	r3, [sp, #4]
 8007992:	4604      	mov	r4, r0
 8007994:	4602      	mov	r2, r0
 8007996:	4629      	mov	r1, r5
 8007998:	2000      	movs	r0, #0
 800799a:	f000 fa45 	bl	8007e28 <acc_probes_execute_uint16>
 800799e:	4620      	mov	r0, r4
 80079a0:	b003      	add	sp, #12
 80079a2:	bd30      	pop	{r4, r5, pc}

080079a4 <acc_sensor_protocol_r2_check_asic_id>:
 80079a4:	b530      	push	{r4, r5, lr}
 80079a6:	2400      	movs	r4, #0
 80079a8:	b085      	sub	sp, #20
 80079aa:	f10d 020e 	add.w	r2, sp, #14
 80079ae:	460d      	mov	r5, r1
 80079b0:	4621      	mov	r1, r4
 80079b2:	f8ad 400e 	strh.w	r4, [sp, #14]
 80079b6:	f000 fa7d 	bl	8007eb4 <acc_sensor_reg_read>
 80079ba:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 80079be:	f241 1312 	movw	r3, #4370	; 0x1112
 80079c2:	429a      	cmp	r2, r3
 80079c4:	d00a      	beq.n	80079dc <acc_sensor_protocol_r2_check_asic_id+0x38>
 80079c6:	b965      	cbnz	r5, 80079e2 <acc_sensor_protocol_r2_check_asic_id+0x3e>
 80079c8:	4907      	ldr	r1, [pc, #28]	; (80079e8 <acc_sensor_protocol_r2_check_asic_id+0x44>)
 80079ca:	9200      	str	r2, [sp, #0]
 80079cc:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 80079ce:	4a07      	ldr	r2, [pc, #28]	; (80079ec <acc_sensor_protocol_r2_check_asic_id+0x48>)
 80079d0:	4907      	ldr	r1, [pc, #28]	; (80079f0 <acc_sensor_protocol_r2_check_asic_id+0x4c>)
 80079d2:	4628      	mov	r0, r5
 80079d4:	47a0      	blx	r4
 80079d6:	4628      	mov	r0, r5
 80079d8:	b005      	add	sp, #20
 80079da:	bd30      	pop	{r4, r5, pc}
 80079dc:	2001      	movs	r0, #1
 80079de:	b005      	add	sp, #20
 80079e0:	bd30      	pop	{r4, r5, pc}
 80079e2:	4620      	mov	r0, r4
 80079e4:	b005      	add	sp, #20
 80079e6:	bd30      	pop	{r4, r5, pc}
 80079e8:	200004c0 	.word	0x200004c0
 80079ec:	0800f0ac 	.word	0x0800f0ac
 80079f0:	0800ed28 	.word	0x0800ed28

080079f4 <acc_sweep_manager_prepare>:
 80079f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80079f8:	4680      	mov	r8, r0
 80079fa:	b095      	sub	sp, #84	; 0x54
 80079fc:	4608      	mov	r0, r1
 80079fe:	460c      	mov	r4, r1
 8007a00:	4617      	mov	r7, r2
 8007a02:	4699      	mov	r9, r3
 8007a04:	f7fd fa98 	bl	8004f38 <acc_base_configuration_sensor_get>
 8007a08:	4601      	mov	r1, r0
 8007a0a:	4620      	mov	r0, r4
 8007a0c:	9101      	str	r1, [sp, #4]
 8007a0e:	f7fd fbf1 	bl	80051f4 <acc_base_configuration_wg_duration_get>
 8007a12:	4603      	mov	r3, r0
 8007a14:	4620      	mov	r0, r4
 8007a16:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007a1a:	f7fd fbd7 	bl	80051cc <acc_base_configuration_integrator_get>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	4620      	mov	r0, r4
 8007a22:	f8ad 300e 	strh.w	r3, [sp, #14]
 8007a26:	f7fd fbf9 	bl	800521c <acc_base_configuration_integrator_ramp_up_get>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	4620      	mov	r0, r4
 8007a2e:	f8ad 3010 	strh.w	r3, [sp, #16]
 8007a32:	f7fd faf5 	bl	8005020 <acc_base_configuration_decrease_tx_emission_get>
 8007a36:	4605      	mov	r5, r0
 8007a38:	2304      	movs	r3, #4
 8007a3a:	9901      	ldr	r1, [sp, #4]
 8007a3c:	f8ad 5012 	strh.w	r5, [sp, #18]
 8007a40:	aa03      	add	r2, sp, #12
 8007a42:	f108 0514 	add.w	r5, r8, #20
 8007a46:	2012      	movs	r0, #18
 8007a48:	f000 f9ee 	bl	8007e28 <acc_probes_execute_uint16>
 8007a4c:	2220      	movs	r2, #32
 8007a4e:	2100      	movs	r1, #0
 8007a50:	4628      	mov	r0, r5
 8007a52:	f005 facb 	bl	800cfec <memset>
 8007a56:	6823      	ldr	r3, [r4, #0]
 8007a58:	4628      	mov	r0, r5
 8007a5a:	4621      	mov	r1, r4
 8007a5c:	4798      	blx	r3
 8007a5e:	4606      	mov	r6, r0
 8007a60:	2800      	cmp	r0, #0
 8007a62:	d04e      	beq.n	8007b02 <acc_sweep_manager_prepare+0x10e>
 8007a64:	2220      	movs	r2, #32
 8007a66:	2100      	movs	r1, #0
 8007a68:	a80c      	add	r0, sp, #48	; 0x30
 8007a6a:	f005 fabf 	bl	800cfec <memset>
 8007a6e:	f8d8 002c 	ldr.w	r0, [r8, #44]	; 0x2c
 8007a72:	2100      	movs	r1, #0
 8007a74:	6806      	ldr	r6, [r0, #0]
 8007a76:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 8007a7a:	e9cd 1105 	strd	r1, r1, [sp, #20]
 8007a7e:	e9cd 1107 	strd	r1, r1, [sp, #28]
 8007a82:	e9cd 1109 	strd	r1, r1, [sp, #36]	; 0x24
 8007a86:	aa0c      	add	r2, sp, #48	; 0x30
 8007a88:	ab05      	add	r3, sp, #20
 8007a8a:	4621      	mov	r1, r4
 8007a8c:	4628      	mov	r0, r5
 8007a8e:	47b0      	blx	r6
 8007a90:	4606      	mov	r6, r0
 8007a92:	2800      	cmp	r0, #0
 8007a94:	d039      	beq.n	8007b0a <acc_sweep_manager_prepare+0x116>
 8007a96:	b137      	cbz	r7, 8007aa6 <acc_sweep_manager_prepare+0xb2>
 8007a98:	ad0c      	add	r5, sp, #48	; 0x30
 8007a9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007a9c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8007a9e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007aa2:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8007aa6:	f1b9 0f00 	cmp.w	r9, #0
 8007aaa:	d011      	beq.n	8007ad0 <acc_sweep_manager_prepare+0xdc>
 8007aac:	ad05      	add	r5, sp, #20
 8007aae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007ab0:	f8c9 0000 	str.w	r0, [r9]
 8007ab4:	f8c9 1004 	str.w	r1, [r9, #4]
 8007ab8:	cd03      	ldmia	r5!, {r0, r1}
 8007aba:	882d      	ldrh	r5, [r5, #0]
 8007abc:	f8c9 2008 	str.w	r2, [r9, #8]
 8007ac0:	f8c9 300c 	str.w	r3, [r9, #12]
 8007ac4:	f8a9 5018 	strh.w	r5, [r9, #24]
 8007ac8:	f8c9 0010 	str.w	r0, [r9, #16]
 8007acc:	f8c9 1014 	str.w	r1, [r9, #20]
 8007ad0:	4620      	mov	r0, r4
 8007ad2:	f7fd fb4b 	bl	800516c <acc_base_configuration_repetition_mode_get>
 8007ad6:	2801      	cmp	r0, #1
 8007ad8:	d020      	beq.n	8007b1c <acc_sweep_manager_prepare+0x128>
 8007ada:	4620      	mov	r0, r4
 8007adc:	f7fd fb4e 	bl	800517c <acc_base_configuration_update_rate_get>
 8007ae0:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8007b24 <acc_sweep_manager_prepare+0x130>
 8007ae4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007ae8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007aec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007af0:	ee17 3a90 	vmov	r3, s15
 8007af4:	2200      	movs	r2, #0
 8007af6:	f8c8 3000 	str.w	r3, [r8]
 8007afa:	f8c8 2008 	str.w	r2, [r8, #8]
 8007afe:	f8a8 2006 	strh.w	r2, [r8, #6]
 8007b02:	4630      	mov	r0, r6
 8007b04:	b015      	add	sp, #84	; 0x54
 8007b06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007b0a:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 8007b0e:	4628      	mov	r0, r5
 8007b10:	6a1b      	ldr	r3, [r3, #32]
 8007b12:	4798      	blx	r3
 8007b14:	4630      	mov	r0, r6
 8007b16:	b015      	add	sp, #84	; 0x54
 8007b18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007b1c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8007b20:	e7e8      	b.n	8007af4 <acc_sweep_manager_prepare+0x100>
 8007b22:	bf00      	nop
 8007b24:	44fa0000 	.word	0x44fa0000

08007b28 <acc_sweep_manager_release>:
 8007b28:	b120      	cbz	r0, 8007b34 <acc_sweep_manager_release+0xc>
 8007b2a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8007b2c:	b113      	cbz	r3, 8007b34 <acc_sweep_manager_release+0xc>
 8007b2e:	6a1b      	ldr	r3, [r3, #32]
 8007b30:	3014      	adds	r0, #20
 8007b32:	4718      	bx	r3
 8007b34:	4770      	bx	lr
 8007b36:	bf00      	nop

08007b38 <acc_sweep_manager_is_sensor_connected>:
 8007b38:	3014      	adds	r0, #20
 8007b3a:	f003 bc69 	b.w	800b410 <acc_radar_engine_check_asic_id>
 8007b3e:	bf00      	nop

08007b40 <acc_sweep_manager_calibrate>:
 8007b40:	b410      	push	{r4}
 8007b42:	4604      	mov	r4, r0
 8007b44:	3014      	adds	r0, #20
 8007b46:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 8007b48:	68a4      	ldr	r4, [r4, #8]
 8007b4a:	46a4      	mov	ip, r4
 8007b4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b50:	4760      	bx	ip
 8007b52:	bf00      	nop

08007b54 <acc_sweep_manager_measure_noise>:
 8007b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b58:	4604      	mov	r4, r0
 8007b5a:	e9d0 050a 	ldrd	r0, r5, [r0, #40]	; 0x28
 8007b5e:	686f      	ldr	r7, [r5, #4]
 8007b60:	461e      	mov	r6, r3
 8007b62:	4615      	mov	r5, r2
 8007b64:	47b8      	blx	r7
 8007b66:	b140      	cbz	r0, 8007b7a <acc_sweep_manager_measure_noise+0x26>
 8007b68:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007b6a:	4632      	mov	r2, r6
 8007b6c:	4629      	mov	r1, r5
 8007b6e:	f104 0014 	add.w	r0, r4, #20
 8007b72:	68db      	ldr	r3, [r3, #12]
 8007b74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b78:	4718      	bx	r3
 8007b7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b7e:	bf00      	nop

08007b80 <acc_sweep_manager_start>:
 8007b80:	b570      	push	{r4, r5, r6, lr}
 8007b82:	4604      	mov	r4, r0
 8007b84:	e9d0 030a 	ldrd	r0, r3, [r0, #40]	; 0x28
 8007b88:	685b      	ldr	r3, [r3, #4]
 8007b8a:	4615      	mov	r5, r2
 8007b8c:	4798      	blx	r3
 8007b8e:	b138      	cbz	r0, 8007ba0 <acc_sweep_manager_start+0x20>
 8007b90:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007b92:	4629      	mov	r1, r5
 8007b94:	f104 0014 	add.w	r0, r4, #20
 8007b98:	691b      	ldr	r3, [r3, #16]
 8007b9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007b9e:	4718      	bx	r3
 8007ba0:	bd70      	pop	{r4, r5, r6, pc}
 8007ba2:	bf00      	nop

08007ba4 <acc_sweep_manager_wait_for_data>:
 8007ba4:	f850 1b14 	ldr.w	r1, [r0], #20
 8007ba8:	2200      	movs	r2, #0
 8007baa:	f003 bc35 	b.w	800b418 <acc_radar_engine_wait_for_radar_data>
 8007bae:	bf00      	nop

08007bb0 <acc_sweep_manager_wait_for_hibernate_ready>:
 8007bb0:	f850 1b14 	ldr.w	r1, [r0], #20
 8007bb4:	f003 bc38 	b.w	800b428 <acc_radar_engine_wait_for_hibernate_ready>

08007bb8 <acc_sweep_manager_measure>:
 8007bb8:	3014      	adds	r0, #20
 8007bba:	f003 bc31 	b.w	800b420 <acc_radar_engine_measure>
 8007bbe:	bf00      	nop

08007bc0 <acc_sweep_manager_acquire_adc_data>:
 8007bc0:	b570      	push	{r4, r5, r6, lr}
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	b084      	sub	sp, #16
 8007bc6:	4604      	mov	r4, r0
 8007bc8:	6043      	str	r3, [r0, #4]
 8007bca:	6083      	str	r3, [r0, #8]
 8007bcc:	60c3      	str	r3, [r0, #12]
 8007bce:	6103      	str	r3, [r0, #16]
 8007bd0:	466a      	mov	r2, sp
 8007bd2:	3014      	adds	r0, #20
 8007bd4:	f003 fc2c 	bl	800b430 <acc_radar_engine_acquire_adc_data>
 8007bd8:	9b02      	ldr	r3, [sp, #8]
 8007bda:	f8bd 6000 	ldrh.w	r6, [sp]
 8007bde:	f8bd 5002 	ldrh.w	r5, [sp, #2]
 8007be2:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8007be6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8007bea:	60a0      	str	r0, [r4, #8]
 8007bec:	1d20      	adds	r0, r4, #4
 8007bee:	80e6      	strh	r6, [r4, #6]
 8007bf0:	80a5      	strh	r5, [r4, #4]
 8007bf2:	7321      	strb	r1, [r4, #12]
 8007bf4:	7362      	strb	r2, [r4, #13]
 8007bf6:	6123      	str	r3, [r4, #16]
 8007bf8:	b004      	add	sp, #16
 8007bfa:	bd70      	pop	{r4, r5, r6, pc}

08007bfc <acc_alg_cca_u16_calculate>:
 8007bfc:	2901      	cmp	r1, #1
 8007bfe:	b538      	push	{r3, r4, r5, lr}
 8007c00:	d925      	bls.n	8007c4e <acc_alg_cca_u16_calculate+0x52>
 8007c02:	1e8d      	subs	r5, r1, #2
 8007c04:	1c83      	adds	r3, r0, #2
 8007c06:	b2ad      	uxth	r5, r5
 8007c08:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8007c0c:	2400      	movs	r4, #0
 8007c0e:	4602      	mov	r2, r0
 8007c10:	3002      	adds	r0, #2
 8007c12:	8853      	ldrh	r3, [r2, #2]
 8007c14:	8812      	ldrh	r2, [r2, #0]
 8007c16:	1a9b      	subs	r3, r3, r2
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	bfb8      	it	lt
 8007c1c:	425b      	neglt	r3, r3
 8007c1e:	4285      	cmp	r5, r0
 8007c20:	441c      	add	r4, r3
 8007c22:	d1f4      	bne.n	8007c0e <acc_alg_cca_u16_calculate+0x12>
 8007c24:	ee07 4a90 	vmov	s15, r4
 8007c28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007c2c:	ee07 1a10 	vmov	s14, r1
 8007c30:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 8007c34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c38:	ee30 0a47 	vsub.f32	s0, s0, s14
 8007c3c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8007c40:	f006 f8d0 	bl	800dde4 <log10f>
 8007c44:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8007c48:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007c4c:	bd38      	pop	{r3, r4, r5, pc}
 8007c4e:	eddf 7a01 	vldr	s15, [pc, #4]	; 8007c54 <acc_alg_cca_u16_calculate+0x58>
 8007c52:	e7eb      	b.n	8007c2c <acc_alg_cca_u16_calculate+0x30>
 8007c54:	00000000 	.word	0x00000000

08007c58 <acc_assert_fail>:
 8007c58:	b500      	push	{lr}
 8007c5a:	4b07      	ldr	r3, [pc, #28]	; (8007c78 <acc_assert_fail+0x20>)
 8007c5c:	4a07      	ldr	r2, [pc, #28]	; (8007c7c <acc_assert_fail+0x24>)
 8007c5e:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8007c60:	b083      	sub	sp, #12
 8007c62:	4603      	mov	r3, r0
 8007c64:	9100      	str	r1, [sp, #0]
 8007c66:	2000      	movs	r0, #0
 8007c68:	4905      	ldr	r1, [pc, #20]	; (8007c80 <acc_assert_fail+0x28>)
 8007c6a:	47a0      	blx	r4
 8007c6c:	4b05      	ldr	r3, [pc, #20]	; (8007c84 <acc_assert_fail+0x2c>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	b103      	cbz	r3, 8007c74 <acc_assert_fail+0x1c>
 8007c72:	4798      	blx	r3
 8007c74:	e7fe      	b.n	8007c74 <acc_assert_fail+0x1c>
 8007c76:	bf00      	nop
 8007c78:	200004c0 	.word	0x200004c0
 8007c7c:	0800f23c 	.word	0x0800f23c
 8007c80:	0800f254 	.word	0x0800f254
 8007c84:	2000036c 	.word	0x2000036c

08007c88 <acc_element_sizeof>:
 8007c88:	3801      	subs	r0, #1
 8007c8a:	b2c0      	uxtb	r0, r0
 8007c8c:	2807      	cmp	r0, #7
 8007c8e:	bf9a      	itte	ls
 8007c90:	4b02      	ldrls	r3, [pc, #8]	; (8007c9c <acc_element_sizeof+0x14>)
 8007c92:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8007c96:	2000      	movhi	r0, #0
 8007c98:	4770      	bx	lr
 8007c9a:	bf00      	nop
 8007c9c:	0800f25c 	.word	0x0800f25c

08007ca0 <acc_element_connect>:
 8007ca0:	6001      	str	r1, [r0, #0]
 8007ca2:	4770      	bx	lr

08007ca4 <event>:
 8007ca4:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8007ca6:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8007ca8:	ed90 0a0e 	vldr	s0, [r0, #56]	; 0x38
 8007cac:	6811      	ldr	r1, [r2, #0]
 8007cae:	b570      	push	{r4, r5, r6, lr}
 8007cb0:	4604      	mov	r4, r0
 8007cb2:	e9d0 0504 	ldrd	r0, r5, [r0, #16]
 8007cb6:	4798      	blx	r3
 8007cb8:	6823      	ldr	r3, [r4, #0]
 8007cba:	7028      	strb	r0, [r5, #0]
 8007cbc:	685a      	ldr	r2, [r3, #4]
 8007cbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	4710      	bx	r2
 8007cc6:	bf00      	nop

08007cc8 <reset>:
 8007cc8:	6800      	ldr	r0, [r0, #0]
 8007cca:	68c3      	ldr	r3, [r0, #12]
 8007ccc:	4718      	bx	r3
 8007cce:	bf00      	nop

08007cd0 <validate>:
 8007cd0:	6983      	ldr	r3, [r0, #24]
 8007cd2:	b510      	push	{r4, lr}
 8007cd4:	4604      	mov	r4, r0
 8007cd6:	b113      	cbz	r3, 8007cde <validate+0xe>
 8007cd8:	f7fd fd9a 	bl	8005810 <acc_rss_integration_log_level>
 8007cdc:	b978      	cbnz	r0, 8007cfe <validate+0x2e>
 8007cde:	69e3      	ldr	r3, [r4, #28]
 8007ce0:	b143      	cbz	r3, 8007cf4 <validate+0x24>
 8007ce2:	f7fd fd95 	bl	8005810 <acc_rss_integration_log_level>
 8007ce6:	b128      	cbz	r0, 8007cf4 <validate+0x24>
 8007ce8:	4b08      	ldr	r3, [pc, #32]	; (8007d0c <validate+0x3c>)
 8007cea:	4a09      	ldr	r2, [pc, #36]	; (8007d10 <validate+0x40>)
 8007cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cee:	4909      	ldr	r1, [pc, #36]	; (8007d14 <validate+0x44>)
 8007cf0:	2001      	movs	r0, #1
 8007cf2:	4798      	blx	r3
 8007cf4:	6820      	ldr	r0, [r4, #0]
 8007cf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cfa:	6883      	ldr	r3, [r0, #8]
 8007cfc:	4718      	bx	r3
 8007cfe:	4b03      	ldr	r3, [pc, #12]	; (8007d0c <validate+0x3c>)
 8007d00:	4a05      	ldr	r2, [pc, #20]	; (8007d18 <validate+0x48>)
 8007d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d04:	4903      	ldr	r1, [pc, #12]	; (8007d14 <validate+0x44>)
 8007d06:	2001      	movs	r0, #1
 8007d08:	4798      	blx	r3
 8007d0a:	e7e8      	b.n	8007cde <validate+0xe>
 8007d0c:	200004c0 	.word	0x200004c0
 8007d10:	0800f2ac 	.word	0x0800f2ac
 8007d14:	0800f290 	.word	0x0800f290
 8007d18:	0800f27c 	.word	0x0800f27c

08007d1c <saturation_check_i16>:
 8007d1c:	f003 be8e 	b.w	800ba3c <acc_alg_basic_saturation_check_i16>

08007d20 <saturation_check_u16>:
 8007d20:	f003 be58 	b.w	800b9d4 <acc_alg_basic_saturation_check_u16>

08007d24 <acc_element_saturation_check_init>:
 8007d24:	2903      	cmp	r1, #3
 8007d26:	ed80 0a0e 	vstr	s0, [r0, #56]	; 0x38
 8007d2a:	d00e      	beq.n	8007d4a <acc_element_saturation_check_init+0x26>
 8007d2c:	2905      	cmp	r1, #5
 8007d2e:	d016      	beq.n	8007d5e <acc_element_saturation_check_init+0x3a>
 8007d30:	2902      	cmp	r1, #2
 8007d32:	d014      	beq.n	8007d5e <acc_element_saturation_check_init+0x3a>
 8007d34:	b510      	push	{r4, lr}
 8007d36:	4b0b      	ldr	r3, [pc, #44]	; (8007d64 <acc_element_saturation_check_init+0x40>)
 8007d38:	4a0b      	ldr	r2, [pc, #44]	; (8007d68 <acc_element_saturation_check_init+0x44>)
 8007d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d3c:	490b      	ldr	r1, [pc, #44]	; (8007d6c <acc_element_saturation_check_init+0x48>)
 8007d3e:	2400      	movs	r4, #0
 8007d40:	63c4      	str	r4, [r0, #60]	; 0x3c
 8007d42:	4620      	mov	r0, r4
 8007d44:	4798      	blx	r3
 8007d46:	4620      	mov	r0, r4
 8007d48:	bd10      	pop	{r4, pc}
 8007d4a:	4b09      	ldr	r3, [pc, #36]	; (8007d70 <acc_element_saturation_check_init+0x4c>)
 8007d4c:	63c3      	str	r3, [r0, #60]	; 0x3c
 8007d4e:	4909      	ldr	r1, [pc, #36]	; (8007d74 <acc_element_saturation_check_init+0x50>)
 8007d50:	4a09      	ldr	r2, [pc, #36]	; (8007d78 <acc_element_saturation_check_init+0x54>)
 8007d52:	4b0a      	ldr	r3, [pc, #40]	; (8007d7c <acc_element_saturation_check_init+0x58>)
 8007d54:	60c3      	str	r3, [r0, #12]
 8007d56:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8007d5a:	2001      	movs	r0, #1
 8007d5c:	4770      	bx	lr
 8007d5e:	4b08      	ldr	r3, [pc, #32]	; (8007d80 <acc_element_saturation_check_init+0x5c>)
 8007d60:	63c3      	str	r3, [r0, #60]	; 0x3c
 8007d62:	e7f4      	b.n	8007d4e <acc_element_saturation_check_init+0x2a>
 8007d64:	200004c0 	.word	0x200004c0
 8007d68:	0800f2bc 	.word	0x0800f2bc
 8007d6c:	0800f290 	.word	0x0800f290
 8007d70:	08007d1d 	.word	0x08007d1d
 8007d74:	08007ca5 	.word	0x08007ca5
 8007d78:	08007cd1 	.word	0x08007cd1
 8007d7c:	08007cc9 	.word	0x08007cc9
 8007d80:	08007d21 	.word	0x08007d21

08007d84 <consume>:
 8007d84:	b510      	push	{r4, lr}
 8007d86:	4604      	mov	r4, r0
 8007d88:	e9d0 230f 	ldrd	r2, r3, [r0, #60]	; 0x3c
 8007d8c:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8007d8e:	6900      	ldr	r0, [r0, #16]
 8007d90:	4798      	blx	r3
 8007d92:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007d94:	2200      	movs	r2, #0
 8007d96:	611a      	str	r2, [r3, #16]
 8007d98:	bd10      	pop	{r4, pc}
 8007d9a:	bf00      	nop

08007d9c <reset>:
 8007d9c:	4770      	bx	lr
 8007d9e:	bf00      	nop

08007da0 <validate>:
 8007da0:	6983      	ldr	r3, [r0, #24]
 8007da2:	b510      	push	{r4, lr}
 8007da4:	4604      	mov	r4, r0
 8007da6:	b113      	cbz	r3, 8007dae <validate+0xe>
 8007da8:	f7fd fd32 	bl	8005810 <acc_rss_integration_log_level>
 8007dac:	b9c8      	cbnz	r0, 8007de2 <validate+0x42>
 8007dae:	69e3      	ldr	r3, [r4, #28]
 8007db0:	b113      	cbz	r3, 8007db8 <validate+0x18>
 8007db2:	f7fd fd2d 	bl	8005810 <acc_rss_integration_log_level>
 8007db6:	b948      	cbnz	r0, 8007dcc <validate+0x2c>
 8007db8:	6963      	ldr	r3, [r4, #20]
 8007dba:	b183      	cbz	r3, 8007dde <validate+0x3e>
 8007dbc:	4b0c      	ldr	r3, [pc, #48]	; (8007df0 <validate+0x50>)
 8007dbe:	4a0d      	ldr	r2, [pc, #52]	; (8007df4 <validate+0x54>)
 8007dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dc2:	490d      	ldr	r1, [pc, #52]	; (8007df8 <validate+0x58>)
 8007dc4:	2000      	movs	r0, #0
 8007dc6:	4798      	blx	r3
 8007dc8:	2000      	movs	r0, #0
 8007dca:	bd10      	pop	{r4, pc}
 8007dcc:	4b08      	ldr	r3, [pc, #32]	; (8007df0 <validate+0x50>)
 8007dce:	4a0b      	ldr	r2, [pc, #44]	; (8007dfc <validate+0x5c>)
 8007dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dd2:	4909      	ldr	r1, [pc, #36]	; (8007df8 <validate+0x58>)
 8007dd4:	2001      	movs	r0, #1
 8007dd6:	4798      	blx	r3
 8007dd8:	6963      	ldr	r3, [r4, #20]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d1ee      	bne.n	8007dbc <validate+0x1c>
 8007dde:	2001      	movs	r0, #1
 8007de0:	bd10      	pop	{r4, pc}
 8007de2:	4b03      	ldr	r3, [pc, #12]	; (8007df0 <validate+0x50>)
 8007de4:	4a06      	ldr	r2, [pc, #24]	; (8007e00 <validate+0x60>)
 8007de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007de8:	4903      	ldr	r1, [pc, #12]	; (8007df8 <validate+0x58>)
 8007dea:	2001      	movs	r0, #1
 8007dec:	4798      	blx	r3
 8007dee:	e7de      	b.n	8007dae <validate+0xe>
 8007df0:	200004c0 	.word	0x200004c0
 8007df4:	0800f2e8 	.word	0x0800f2e8
 8007df8:	0800f2d0 	.word	0x0800f2d0
 8007dfc:	0800f2ac 	.word	0x0800f2ac
 8007e00:	0800f27c 	.word	0x0800f27c

08007e04 <acc_element_sink_callback_init>:
 8007e04:	b410      	push	{r4}
 8007e06:	4a05      	ldr	r2, [pc, #20]	; (8007e1c <acc_element_sink_callback_init+0x18>)
 8007e08:	4c05      	ldr	r4, [pc, #20]	; (8007e20 <acc_element_sink_callback_init+0x1c>)
 8007e0a:	4b06      	ldr	r3, [pc, #24]	; (8007e24 <acc_element_sink_callback_init+0x20>)
 8007e0c:	6401      	str	r1, [r0, #64]	; 0x40
 8007e0e:	e9c0 4201 	strd	r4, r2, [r0, #4]
 8007e12:	60c3      	str	r3, [r0, #12]
 8007e14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e18:	4770      	bx	lr
 8007e1a:	bf00      	nop
 8007e1c:	08007da1 	.word	0x08007da1
 8007e20:	08007d85 	.word	0x08007d85
 8007e24:	08007d9d 	.word	0x08007d9d

08007e28 <acc_probes_execute_uint16>:
 8007e28:	b530      	push	{r4, r5, lr}
 8007e2a:	4c09      	ldr	r4, [pc, #36]	; (8007e50 <acc_probes_execute_uint16+0x28>)
 8007e2c:	eb04 1400 	add.w	r4, r4, r0, lsl #4
 8007e30:	b085      	sub	sp, #20
 8007e32:	6865      	ldr	r5, [r4, #4]
 8007e34:	f88d 0004 	strb.w	r0, [sp, #4]
 8007e38:	2001      	movs	r0, #1
 8007e3a:	e9cd 1002 	strd	r1, r0, [sp, #8]
 8007e3e:	b12d      	cbz	r5, 8007e4c <acc_probes_execute_uint16+0x24>
 8007e40:	4611      	mov	r1, r2
 8007e42:	461a      	mov	r2, r3
 8007e44:	4082      	lsls	r2, r0
 8007e46:	68e3      	ldr	r3, [r4, #12]
 8007e48:	a801      	add	r0, sp, #4
 8007e4a:	47a8      	blx	r5
 8007e4c:	b005      	add	sp, #20
 8007e4e:	bd30      	pop	{r4, r5, pc}
 8007e50:	2000000c 	.word	0x2000000c

08007e54 <acc_probes_execute_struct>:
 8007e54:	b530      	push	{r4, r5, lr}
 8007e56:	4c0a      	ldr	r4, [pc, #40]	; (8007e80 <acc_probes_execute_struct+0x2c>)
 8007e58:	eb04 1400 	add.w	r4, r4, r0, lsl #4
 8007e5c:	b085      	sub	sp, #20
 8007e5e:	6865      	ldr	r5, [r4, #4]
 8007e60:	f88d 0004 	strb.w	r0, [sp, #4]
 8007e64:	2007      	movs	r0, #7
 8007e66:	e9cd 1002 	strd	r1, r0, [sp, #8]
 8007e6a:	b135      	cbz	r5, 8007e7a <acc_probes_execute_struct+0x26>
 8007e6c:	4611      	mov	r1, r2
 8007e6e:	a801      	add	r0, sp, #4
 8007e70:	461a      	mov	r2, r3
 8007e72:	68e3      	ldr	r3, [r4, #12]
 8007e74:	47a8      	blx	r5
 8007e76:	b005      	add	sp, #20
 8007e78:	bd30      	pop	{r4, r5, pc}
 8007e7a:	2001      	movs	r0, #1
 8007e7c:	b005      	add	sp, #20
 8007e7e:	bd30      	pop	{r4, r5, pc}
 8007e80:	2000000c 	.word	0x2000000c

08007e84 <acc_probes_execute_primitive_probe>:
 8007e84:	b510      	push	{r4, lr}
 8007e86:	4b0a      	ldr	r3, [pc, #40]	; (8007eb0 <acc_probes_execute_primitive_probe+0x2c>)
 8007e88:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8007e8c:	b084      	sub	sp, #16
 8007e8e:	685c      	ldr	r4, [r3, #4]
 8007e90:	f88d 0004 	strb.w	r0, [sp, #4]
 8007e94:	2200      	movs	r2, #0
 8007e96:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8007e9a:	b12c      	cbz	r4, 8007ea8 <acc_probes_execute_primitive_probe+0x24>
 8007e9c:	68db      	ldr	r3, [r3, #12]
 8007e9e:	4611      	mov	r1, r2
 8007ea0:	a801      	add	r0, sp, #4
 8007ea2:	47a0      	blx	r4
 8007ea4:	b004      	add	sp, #16
 8007ea6:	bd10      	pop	{r4, pc}
 8007ea8:	2001      	movs	r0, #1
 8007eaa:	b004      	add	sp, #16
 8007eac:	bd10      	pop	{r4, pc}
 8007eae:	bf00      	nop
 8007eb0:	2000000c 	.word	0x2000000c

08007eb4 <acc_sensor_reg_read>:
 8007eb4:	b530      	push	{r4, r5, lr}
 8007eb6:	b083      	sub	sp, #12
 8007eb8:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
 8007ebc:	4614      	mov	r4, r2
 8007ebe:	2500      	movs	r5, #0
 8007ec0:	f8ad 1000 	strh.w	r1, [sp]
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	2203      	movs	r2, #3
 8007ec8:	4669      	mov	r1, sp
 8007eca:	f8ad 5002 	strh.w	r5, [sp, #2]
 8007ece:	f8ad 5004 	strh.w	r5, [sp, #4]
 8007ed2:	f7fd fc23 	bl	800571c <acc_rss_integration_sensor_device_transfer>
 8007ed6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8007eda:	8023      	strh	r3, [r4, #0]
 8007edc:	b003      	add	sp, #12
 8007ede:	bd30      	pop	{r4, r5, pc}

08007ee0 <acc_sensor_reg_write>:
 8007ee0:	b530      	push	{r4, r5, lr}
 8007ee2:	b083      	sub	sp, #12
 8007ee4:	f441 5480 	orr.w	r4, r1, #4096	; 0x1000
 8007ee8:	4615      	mov	r5, r2
 8007eea:	2300      	movs	r3, #0
 8007eec:	2202      	movs	r2, #2
 8007eee:	a901      	add	r1, sp, #4
 8007ef0:	f8ad 4004 	strh.w	r4, [sp, #4]
 8007ef4:	f8ad 5006 	strh.w	r5, [sp, #6]
 8007ef8:	f7fd fc10 	bl	800571c <acc_rss_integration_sensor_device_transfer>
 8007efc:	b003      	add	sp, #12
 8007efe:	bd30      	pop	{r4, r5, pc}

08007f00 <acc_sensor_reg_field_write>:
 8007f00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f04:	b082      	sub	sp, #8
 8007f06:	461d      	mov	r5, r3
 8007f08:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8007f0c:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
 8007f10:	f8ad 3000 	strh.w	r3, [sp]
 8007f14:	2700      	movs	r7, #0
 8007f16:	468a      	mov	sl, r1
 8007f18:	4691      	mov	r9, r2
 8007f1a:	4669      	mov	r1, sp
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	2203      	movs	r2, #3
 8007f20:	4680      	mov	r8, r0
 8007f22:	f8ad 7002 	strh.w	r7, [sp, #2]
 8007f26:	f8ad 7004 	strh.w	r7, [sp, #4]
 8007f2a:	f7fd fbf7 	bl	800571c <acc_rss_integration_sensor_device_transfer>
 8007f2e:	f9bd 6004 	ldrsh.w	r6, [sp, #4]
 8007f32:	fa04 f10a 	lsl.w	r1, r4, sl
 8007f36:	4071      	eors	r1, r6
 8007f38:	ea01 0409 	and.w	r4, r1, r9
 8007f3c:	f445 5580 	orr.w	r5, r5, #4096	; 0x1000
 8007f40:	4640      	mov	r0, r8
 8007f42:	463b      	mov	r3, r7
 8007f44:	4669      	mov	r1, sp
 8007f46:	4074      	eors	r4, r6
 8007f48:	2202      	movs	r2, #2
 8007f4a:	f8ad 5000 	strh.w	r5, [sp]
 8007f4e:	f8ad 4002 	strh.w	r4, [sp, #2]
 8007f52:	f7fd fbe3 	bl	800571c <acc_rss_integration_sensor_device_transfer>
 8007f56:	b002      	add	sp, #8
 8007f58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007f5c <acc_sensor_conf_read_instr>:
 8007f5c:	b530      	push	{r4, r5, lr}
 8007f5e:	b085      	sub	sp, #20
 8007f60:	2401      	movs	r4, #1
 8007f62:	f441 4120 	orr.w	r1, r1, #40960	; 0xa000
 8007f66:	4623      	mov	r3, r4
 8007f68:	2500      	movs	r5, #0
 8007f6a:	f8ad 1004 	strh.w	r1, [sp, #4]
 8007f6e:	2205      	movs	r2, #5
 8007f70:	a901      	add	r1, sp, #4
 8007f72:	f8ad 4006 	strh.w	r4, [sp, #6]
 8007f76:	f8ad 5008 	strh.w	r5, [sp, #8]
 8007f7a:	f8cd 500a 	str.w	r5, [sp, #10]
 8007f7e:	f7fd fbcd 	bl	800571c <acc_rss_integration_sensor_device_transfer>
 8007f82:	f10d 000a 	add.w	r0, sp, #10
 8007f86:	4622      	mov	r2, r4
 8007f88:	4669      	mov	r1, sp
 8007f8a:	f000 f92f 	bl	80081ec <acc_utils_transfer_buffer_to_uint32>
 8007f8e:	9800      	ldr	r0, [sp, #0]
 8007f90:	b005      	add	sp, #20
 8007f92:	bd30      	pop	{r4, r5, pc}

08007f94 <acc_cpd_pll_divisors_calculate>:
 8007f94:	edd0 7a00 	vldr	s15, [r0]
 8007f98:	ed9f 6a61 	vldr	s12, [pc, #388]	; 8008120 <acc_cpd_pll_divisors_calculate+0x18c>
 8007f9c:	eddf 6a61 	vldr	s13, [pc, #388]	; 8008124 <acc_cpd_pll_divisors_calculate+0x190>
 8007fa0:	ee86 7a27 	vdiv.f32	s14, s12, s15
 8007fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fa6:	4606      	mov	r6, r0
 8007fa8:	b083      	sub	sp, #12
 8007faa:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8007fae:	ee37 7a06 	vadd.f32	s14, s14, s12
 8007fb2:	eef4 7ae6 	vcmpe.f32	s15, s13
 8007fb6:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8007fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fbe:	ee17 3a10 	vmov	r3, s14
 8007fc2:	b29c      	uxth	r4, r3
 8007fc4:	dc06      	bgt.n	8007fd4 <acc_cpd_pll_divisors_calculate+0x40>
 8007fc6:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8008128 <acc_cpd_pll_divisors_calculate+0x194>
 8007fca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fd2:	d571      	bpl.n	80080b8 <acc_cpd_pll_divisors_calculate+0x124>
 8007fd4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fdc:	ed9f 7a53 	vldr	s14, [pc, #332]	; 800812c <acc_cpd_pll_divisors_calculate+0x198>
 8007fe0:	bf4c      	ite	mi
 8007fe2:	4b53      	ldrmi	r3, [pc, #332]	; (8008130 <acc_cpd_pll_divisors_calculate+0x19c>)
 8007fe4:	4b53      	ldrpl	r3, [pc, #332]	; (8008134 <acc_cpd_pll_divisors_calculate+0x1a0>)
 8007fe6:	ed9f 6a51 	vldr	s12, [pc, #324]	; 800812c <acc_cpd_pll_divisors_calculate+0x198>
 8007fea:	eddf 6a53 	vldr	s13, [pc, #332]	; 8008138 <acc_cpd_pll_divisors_calculate+0x1a4>
 8007fee:	4d53      	ldr	r5, [pc, #332]	; (800813c <acc_cpd_pll_divisors_calculate+0x1a8>)
 8007ff0:	4953      	ldr	r1, [pc, #332]	; (8008140 <acc_cpd_pll_divisors_calculate+0x1ac>)
 8007ff2:	6b6f      	ldr	r7, [r5, #52]	; 0x34
 8007ff4:	bf48      	it	mi
 8007ff6:	eef1 7a67 	vnegmi.f32	s15, s15
 8007ffa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007ffe:	2000      	movs	r0, #0
 8008000:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8008004:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800800c:	ee17 2a10 	vmov	r2, s14
 8008010:	bf4c      	ite	mi
 8008012:	eeb1 7a67 	vnegmi.f32	s14, s15
 8008016:	eeb0 7a67 	vmovpl.f32	s14, s15
 800801a:	ee37 7a06 	vadd.f32	s14, s14, s12
 800801e:	9200      	str	r2, [sp, #0]
 8008020:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8008024:	4a47      	ldr	r2, [pc, #284]	; (8008144 <acc_cpd_pll_divisors_calculate+0x1b0>)
 8008026:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800802a:	3c10      	subs	r4, #16
 800802c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008030:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008034:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008038:	edcd 7a01 	vstr	s15, [sp, #4]
 800803c:	47b8      	blx	r7
 800803e:	2cef      	cmp	r4, #239	; 0xef
 8008040:	d937      	bls.n	80080b2 <acc_cpd_pll_divisors_calculate+0x11e>
 8008042:	edd6 7a00 	vldr	s15, [r6]
 8008046:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800812c <acc_cpd_pll_divisors_calculate+0x198>
 800804a:	ed9f 6a38 	vldr	s12, [pc, #224]	; 800812c <acc_cpd_pll_divisors_calculate+0x198>
 800804e:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8008138 <acc_cpd_pll_divisors_calculate+0x1a4>
 8008052:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 8008054:	493a      	ldr	r1, [pc, #232]	; (8008140 <acc_cpd_pll_divisors_calculate+0x1ac>)
 8008056:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800805a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800805e:	bf48      	it	mi
 8008060:	eef1 7a67 	vnegmi.f32	s15, s15
 8008064:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008068:	bf4c      	ite	mi
 800806a:	4b31      	ldrmi	r3, [pc, #196]	; (8008130 <acc_cpd_pll_divisors_calculate+0x19c>)
 800806c:	4b31      	ldrpl	r3, [pc, #196]	; (8008134 <acc_cpd_pll_divisors_calculate+0x1a0>)
 800806e:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8008072:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800807a:	ee17 2a10 	vmov	r2, s14
 800807e:	bf4c      	ite	mi
 8008080:	eeb1 7a67 	vnegmi.f32	s14, s15
 8008084:	eeb0 7a67 	vmovpl.f32	s14, s15
 8008088:	ee37 7a06 	vadd.f32	s14, s14, s12
 800808c:	9200      	str	r2, [sp, #0]
 800808e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8008092:	4a2c      	ldr	r2, [pc, #176]	; (8008144 <acc_cpd_pll_divisors_calculate+0x1b0>)
 8008094:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8008098:	2000      	movs	r0, #0
 800809a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800809e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80080a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080a6:	edcd 7a01 	vstr	s15, [sp, #4]
 80080aa:	47a0      	blx	r4
 80080ac:	2000      	movs	r0, #0
 80080ae:	b003      	add	sp, #12
 80080b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080b2:	2000      	movs	r0, #0
 80080b4:	b003      	add	sp, #12
 80080b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080b8:	f1a4 0310 	sub.w	r3, r4, #16
 80080bc:	b29b      	uxth	r3, r3
 80080be:	2bef      	cmp	r3, #239	; 0xef
 80080c0:	d901      	bls.n	80080c6 <acc_cpd_pll_divisors_calculate+0x132>
 80080c2:	4d1e      	ldr	r5, [pc, #120]	; (800813c <acc_cpd_pll_divisors_calculate+0x1a8>)
 80080c4:	e7bf      	b.n	8008046 <acc_cpd_pll_divisors_calculate+0xb2>
 80080c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80080ca:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8008148 <acc_cpd_pll_divisors_calculate+0x1b4>
 80080ce:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800814c <acc_cpd_pll_divisors_calculate+0x1b8>
 80080d2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80080d6:	2c3f      	cmp	r4, #63	; 0x3f
 80080d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80080dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080e0:	ee17 2a90 	vmov	r2, s15
 80080e4:	810a      	strh	r2, [r1, #8]
 80080e6:	d912      	bls.n	800810e <acc_cpd_pll_divisors_calculate+0x17a>
 80080e8:	2cbf      	cmp	r4, #191	; 0xbf
 80080ea:	f04f 0301 	mov.w	r3, #1
 80080ee:	bf98      	it	ls
 80080f0:	f1a4 0240 	subls.w	r2, r4, #64	; 0x40
 80080f4:	804b      	strh	r3, [r1, #2]
 80080f6:	bf8c      	ite	hi
 80080f8:	08e2      	lsrhi	r2, r4, #3
 80080fa:	f3c2 02cf 	ubfxls	r2, r2, #3, #16
 80080fe:	f004 0307 	and.w	r3, r4, #7
 8008102:	808a      	strh	r2, [r1, #4]
 8008104:	80cb      	strh	r3, [r1, #6]
 8008106:	2001      	movs	r0, #1
 8008108:	800c      	strh	r4, [r1, #0]
 800810a:	b003      	add	sp, #12
 800810c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800810e:	2200      	movs	r2, #0
 8008110:	2c2f      	cmp	r4, #47	; 0x2f
 8008112:	bf88      	it	hi
 8008114:	4623      	movhi	r3, r4
 8008116:	808b      	strh	r3, [r1, #4]
 8008118:	804a      	strh	r2, [r1, #2]
 800811a:	80ca      	strh	r2, [r1, #6]
 800811c:	e7f3      	b.n	8008106 <acc_cpd_pll_divisors_calculate+0x172>
 800811e:	bf00      	nop
 8008120:	4f1502f9 	.word	0x4f1502f9
 8008124:	4c989680 	.word	0x4c989680
 8008128:	4b989680 	.word	0x4b989680
 800812c:	350637bd 	.word	0x350637bd
 8008130:	0800ea90 	.word	0x0800ea90
 8008134:	0800fb18 	.word	0x0800fb18
 8008138:	49742400 	.word	0x49742400
 800813c:	200004c0 	.word	0x200004c0
 8008140:	0800f33c 	.word	0x0800f33c
 8008144:	0800f310 	.word	0x0800f310
 8008148:	b55b38e8 	.word	0xb55b38e8
 800814c:	427c0000 	.word	0x427c0000

08008150 <acc_cpd_pll_divisors_ref_divisor>:
 8008150:	eddf 7a02 	vldr	s15, [pc, #8]	; 800815c <acc_cpd_pll_divisors_ref_divisor+0xc>
 8008154:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8008158:	f005 be20 	b.w	800dd9c <roundf>
 800815c:	4f1502f9 	.word	0x4f1502f9

08008160 <acc_dll_calculate_area_settings>:
 8008160:	0080      	lsls	r0, r0, #2
 8008162:	b280      	uxth	r0, r0
 8008164:	eb00 0351 	add.w	r3, r0, r1, lsr #1
 8008168:	b29b      	uxth	r3, r3
 800816a:	428b      	cmp	r3, r1
 800816c:	8010      	strh	r0, [r2, #0]
 800816e:	8053      	strh	r3, [r2, #2]
 8008170:	d20c      	bcs.n	800818c <acc_dll_calculate_area_settings+0x2c>
 8008172:	2301      	movs	r3, #1
 8008174:	2100      	movs	r1, #0
 8008176:	2003      	movs	r0, #3
 8008178:	8093      	strh	r3, [r2, #4]
 800817a:	8153      	strh	r3, [r2, #10]
 800817c:	8193      	strh	r3, [r2, #12]
 800817e:	8213      	strh	r3, [r2, #16]
 8008180:	80d1      	strh	r1, [r2, #6]
 8008182:	8251      	strh	r1, [r2, #18]
 8008184:	8291      	strh	r1, [r2, #20]
 8008186:	8110      	strh	r0, [r2, #8]
 8008188:	81d0      	strh	r0, [r2, #14]
 800818a:	4770      	bx	lr
 800818c:	b430      	push	{r4, r5}
 800818e:	fbb3 f4f1 	udiv	r4, r3, r1
 8008192:	2500      	movs	r5, #0
 8008194:	fb01 3114 	mls	r1, r1, r4, r3
 8008198:	2401      	movs	r4, #1
 800819a:	2303      	movs	r3, #3
 800819c:	8094      	strh	r4, [r2, #4]
 800819e:	80d4      	strh	r4, [r2, #6]
 80081a0:	8154      	strh	r4, [r2, #10]
 80081a2:	8214      	strh	r4, [r2, #16]
 80081a4:	8254      	strh	r4, [r2, #18]
 80081a6:	8195      	strh	r5, [r2, #12]
 80081a8:	81d5      	strh	r5, [r2, #14]
 80081aa:	8295      	strh	r5, [r2, #20]
 80081ac:	8050      	strh	r0, [r2, #2]
 80081ae:	bc30      	pop	{r4, r5}
 80081b0:	8011      	strh	r1, [r2, #0]
 80081b2:	8113      	strh	r3, [r2, #8]
 80081b4:	4770      	bx	lr
 80081b6:	bf00      	nop

080081b8 <acc_utils_swap16_array>:
 80081b8:	b141      	cbz	r1, 80081cc <acc_utils_swap16_array+0x14>
 80081ba:	3802      	subs	r0, #2
 80081bc:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 80081c0:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 80081c4:	ba5b      	rev16	r3, r3
 80081c6:	4288      	cmp	r0, r1
 80081c8:	8003      	strh	r3, [r0, #0]
 80081ca:	d1f9      	bne.n	80081c0 <acc_utils_swap16_array+0x8>
 80081cc:	4770      	bx	lr
 80081ce:	bf00      	nop

080081d0 <acc_utils_uint32_to_transfer_buffer>:
 80081d0:	b152      	cbz	r2, 80081e8 <acc_utils_uint32_to_transfer_buffer+0x18>
 80081d2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80081d6:	3804      	subs	r0, #4
 80081d8:	f850 3f04 	ldr.w	r3, [r0, #4]!
 80081dc:	804b      	strh	r3, [r1, #2]
 80081de:	0c1b      	lsrs	r3, r3, #16
 80081e0:	800b      	strh	r3, [r1, #0]
 80081e2:	3104      	adds	r1, #4
 80081e4:	4291      	cmp	r1, r2
 80081e6:	d1f7      	bne.n	80081d8 <acc_utils_uint32_to_transfer_buffer+0x8>
 80081e8:	4770      	bx	lr
 80081ea:	bf00      	nop

080081ec <acc_utils_transfer_buffer_to_uint32>:
 80081ec:	b17a      	cbz	r2, 800820e <acc_utils_transfer_buffer_to_uint32+0x22>
 80081ee:	b410      	push	{r4}
 80081f0:	3904      	subs	r1, #4
 80081f2:	eb00 0482 	add.w	r4, r0, r2, lsl #2
 80081f6:	8802      	ldrh	r2, [r0, #0]
 80081f8:	8843      	ldrh	r3, [r0, #2]
 80081fa:	3004      	adds	r0, #4
 80081fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008200:	4284      	cmp	r4, r0
 8008202:	f841 3f04 	str.w	r3, [r1, #4]!
 8008206:	d1f6      	bne.n	80081f6 <acc_utils_transfer_buffer_to_uint32+0xa>
 8008208:	f85d 4b04 	ldr.w	r4, [sp], #4
 800820c:	4770      	bx	lr
 800820e:	4770      	bx	lr

08008210 <event>:
 8008210:	b570      	push	{r4, r5, r6, lr}
 8008212:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008214:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008216:	682a      	ldr	r2, [r5, #0]
 8008218:	4604      	mov	r4, r0
 800821a:	e9d0 0104 	ldrd	r0, r1, [r0, #16]
 800821e:	4798      	blx	r3
 8008220:	6823      	ldr	r3, [r4, #0]
 8008222:	6028      	str	r0, [r5, #0]
 8008224:	685a      	ldr	r2, [r3, #4]
 8008226:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800822a:	4618      	mov	r0, r3
 800822c:	4710      	bx	r2
 800822e:	bf00      	nop

08008230 <reset>:
 8008230:	6800      	ldr	r0, [r0, #0]
 8008232:	68c3      	ldr	r3, [r0, #12]
 8008234:	4718      	bx	r3
 8008236:	bf00      	nop

08008238 <validate>:
 8008238:	6983      	ldr	r3, [r0, #24]
 800823a:	b510      	push	{r4, lr}
 800823c:	4604      	mov	r4, r0
 800823e:	b113      	cbz	r3, 8008246 <validate+0xe>
 8008240:	f7fd fae6 	bl	8005810 <acc_rss_integration_log_level>
 8008244:	b978      	cbnz	r0, 8008266 <validate+0x2e>
 8008246:	69e3      	ldr	r3, [r4, #28]
 8008248:	b143      	cbz	r3, 800825c <validate+0x24>
 800824a:	f7fd fae1 	bl	8005810 <acc_rss_integration_log_level>
 800824e:	b128      	cbz	r0, 800825c <validate+0x24>
 8008250:	4b08      	ldr	r3, [pc, #32]	; (8008274 <validate+0x3c>)
 8008252:	4a09      	ldr	r2, [pc, #36]	; (8008278 <validate+0x40>)
 8008254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008256:	4909      	ldr	r1, [pc, #36]	; (800827c <validate+0x44>)
 8008258:	2001      	movs	r0, #1
 800825a:	4798      	blx	r3
 800825c:	6820      	ldr	r0, [r4, #0]
 800825e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008262:	6883      	ldr	r3, [r0, #8]
 8008264:	4718      	bx	r3
 8008266:	4b03      	ldr	r3, [pc, #12]	; (8008274 <validate+0x3c>)
 8008268:	4a05      	ldr	r2, [pc, #20]	; (8008280 <validate+0x48>)
 800826a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800826c:	4903      	ldr	r1, [pc, #12]	; (800827c <validate+0x44>)
 800826e:	2001      	movs	r0, #1
 8008270:	4798      	blx	r3
 8008272:	e7e8      	b.n	8008246 <validate+0xe>
 8008274:	200004c0 	.word	0x200004c0
 8008278:	0800f2ac 	.word	0x0800f2ac
 800827c:	0800f350 	.word	0x0800f350
 8008280:	0800f27c 	.word	0x0800f27c

08008284 <abs_q3_12_complex>:
 8008284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008286:	0897      	lsrs	r7, r2, #2
 8008288:	d00b      	beq.n	80082a2 <abs_q3_12_complex+0x1e>
 800828a:	4604      	mov	r4, r0
 800828c:	1e8d      	subs	r5, r1, #2
 800828e:	eb00 0687 	add.w	r6, r0, r7, lsl #2
 8008292:	f854 0b04 	ldr.w	r0, [r4], #4
 8008296:	f004 fafb 	bl	800c890 <acc_alg_basic_math_q3_12_complex_scalar_abs>
 800829a:	42b4      	cmp	r4, r6
 800829c:	f825 0f02 	strh.w	r0, [r5, #2]!
 80082a0:	d1f7      	bne.n	8008292 <abs_q3_12_complex+0xe>
 80082a2:	0078      	lsls	r0, r7, #1
 80082a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082a6:	bf00      	nop

080082a8 <acc_element_abs_init>:
 80082a8:	b510      	push	{r4, lr}
 80082aa:	4a0b      	ldr	r2, [pc, #44]	; (80082d8 <acc_element_abs_init+0x30>)
 80082ac:	4c0b      	ldr	r4, [pc, #44]	; (80082dc <acc_element_abs_init+0x34>)
 80082ae:	4b0c      	ldr	r3, [pc, #48]	; (80082e0 <acc_element_abs_init+0x38>)
 80082b0:	60c3      	str	r3, [r0, #12]
 80082b2:	2907      	cmp	r1, #7
 80082b4:	e9c0 4201 	strd	r4, r2, [r0, #4]
 80082b8:	d103      	bne.n	80082c2 <acc_element_abs_init+0x1a>
 80082ba:	4b0a      	ldr	r3, [pc, #40]	; (80082e4 <acc_element_abs_init+0x3c>)
 80082bc:	6383      	str	r3, [r0, #56]	; 0x38
 80082be:	2001      	movs	r0, #1
 80082c0:	bd10      	pop	{r4, pc}
 80082c2:	4b09      	ldr	r3, [pc, #36]	; (80082e8 <acc_element_abs_init+0x40>)
 80082c4:	4a09      	ldr	r2, [pc, #36]	; (80082ec <acc_element_abs_init+0x44>)
 80082c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082c8:	4909      	ldr	r1, [pc, #36]	; (80082f0 <acc_element_abs_init+0x48>)
 80082ca:	2400      	movs	r4, #0
 80082cc:	6384      	str	r4, [r0, #56]	; 0x38
 80082ce:	4620      	mov	r0, r4
 80082d0:	4798      	blx	r3
 80082d2:	4620      	mov	r0, r4
 80082d4:	bd10      	pop	{r4, pc}
 80082d6:	bf00      	nop
 80082d8:	08008239 	.word	0x08008239
 80082dc:	08008211 	.word	0x08008211
 80082e0:	08008231 	.word	0x08008231
 80082e4:	08008285 	.word	0x08008285
 80082e8:	200004c0 	.word	0x200004c0
 80082ec:	0800f2bc 	.word	0x0800f2bc
 80082f0:	0800f350 	.word	0x0800f350

080082f4 <event>:
 80082f4:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80082f6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80082f8:	6811      	ldr	r1, [r2, #0]
 80082fa:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
 80082fc:	b510      	push	{r4, lr}
 80082fe:	4604      	mov	r4, r0
 8008300:	6900      	ldr	r0, [r0, #16]
 8008302:	4798      	blx	r3
 8008304:	6820      	ldr	r0, [r4, #0]
 8008306:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800830a:	6843      	ldr	r3, [r0, #4]
 800830c:	4718      	bx	r3
 800830e:	bf00      	nop

08008310 <reset>:
 8008310:	6800      	ldr	r0, [r0, #0]
 8008312:	68c3      	ldr	r3, [r0, #12]
 8008314:	4718      	bx	r3
 8008316:	bf00      	nop

08008318 <validate>:
 8008318:	6983      	ldr	r3, [r0, #24]
 800831a:	b510      	push	{r4, lr}
 800831c:	4604      	mov	r4, r0
 800831e:	b113      	cbz	r3, 8008326 <validate+0xe>
 8008320:	f7fd fa76 	bl	8005810 <acc_rss_integration_log_level>
 8008324:	b978      	cbnz	r0, 8008346 <validate+0x2e>
 8008326:	69e3      	ldr	r3, [r4, #28]
 8008328:	b143      	cbz	r3, 800833c <validate+0x24>
 800832a:	f7fd fa71 	bl	8005810 <acc_rss_integration_log_level>
 800832e:	b128      	cbz	r0, 800833c <validate+0x24>
 8008330:	4b08      	ldr	r3, [pc, #32]	; (8008354 <validate+0x3c>)
 8008332:	4a09      	ldr	r2, [pc, #36]	; (8008358 <validate+0x40>)
 8008334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008336:	4909      	ldr	r1, [pc, #36]	; (800835c <validate+0x44>)
 8008338:	2001      	movs	r0, #1
 800833a:	4798      	blx	r3
 800833c:	6820      	ldr	r0, [r4, #0]
 800833e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008342:	6883      	ldr	r3, [r0, #8]
 8008344:	4718      	bx	r3
 8008346:	4b03      	ldr	r3, [pc, #12]	; (8008354 <validate+0x3c>)
 8008348:	4a05      	ldr	r2, [pc, #20]	; (8008360 <validate+0x48>)
 800834a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800834c:	4903      	ldr	r1, [pc, #12]	; (800835c <validate+0x44>)
 800834e:	2001      	movs	r0, #1
 8008350:	4798      	blx	r3
 8008352:	e7e8      	b.n	8008326 <validate+0xe>
 8008354:	200004c0 	.word	0x200004c0
 8008358:	0800f2ac 	.word	0x0800f2ac
 800835c:	0800f35c 	.word	0x0800f35c
 8008360:	0800f27c 	.word	0x0800f27c

08008364 <centering_q12_4>:
 8008364:	f3c1 014f 	ubfx	r1, r1, #1, #16
 8008368:	f3c2 024f 	ubfx	r2, r2, #1, #16
 800836c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008370:	f003 bbe2 	b.w	800bb38 <acc_alg_basic_subtract_section_mean_q12_4>

08008374 <acc_element_centering_init>:
 8008374:	b430      	push	{r4, r5}
 8008376:	4b09      	ldr	r3, [pc, #36]	; (800839c <acc_element_centering_init+0x28>)
 8008378:	60c3      	str	r3, [r0, #12]
 800837a:	2905      	cmp	r1, #5
 800837c:	4d08      	ldr	r5, [pc, #32]	; (80083a0 <acc_element_centering_init+0x2c>)
 800837e:	4c09      	ldr	r4, [pc, #36]	; (80083a4 <acc_element_centering_init+0x30>)
 8008380:	bf08      	it	eq
 8008382:	4909      	ldreq	r1, [pc, #36]	; (80083a8 <acc_element_centering_init+0x34>)
 8008384:	8782      	strh	r2, [r0, #60]	; 0x3c
 8008386:	bf1a      	itte	ne
 8008388:	2300      	movne	r3, #0
 800838a:	4619      	movne	r1, r3
 800838c:	2301      	moveq	r3, #1
 800838e:	e9c0 5401 	strd	r5, r4, [r0, #4]
 8008392:	6381      	str	r1, [r0, #56]	; 0x38
 8008394:	bc30      	pop	{r4, r5}
 8008396:	4618      	mov	r0, r3
 8008398:	4770      	bx	lr
 800839a:	bf00      	nop
 800839c:	08008311 	.word	0x08008311
 80083a0:	080082f5 	.word	0x080082f5
 80083a4:	08008319 	.word	0x08008319
 80083a8:	08008365 	.word	0x08008365

080083ac <convert_q3_12_to_u16>:
 80083ac:	0853      	lsrs	r3, r2, #1
 80083ae:	d010      	beq.n	80083d2 <convert_q3_12_to_u16+0x26>
 80083b0:	b410      	push	{r4}
 80083b2:	eb01 0443 	add.w	r4, r1, r3, lsl #1
 80083b6:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 80083ba:	f831 3d02 	ldrh.w	r3, [r1, #-2]!
 80083be:	005b      	lsls	r3, r3, #1
 80083c0:	4281      	cmp	r1, r0
 80083c2:	f824 3d02 	strh.w	r3, [r4, #-2]!
 80083c6:	d1f8      	bne.n	80083ba <convert_q3_12_to_u16+0xe>
 80083c8:	f022 0001 	bic.w	r0, r2, #1
 80083cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083d0:	4770      	bx	lr
 80083d2:	f022 0001 	bic.w	r0, r2, #1
 80083d6:	4770      	bx	lr

080083d8 <convert_q3_12_complex_to_f32_complex>:
 80083d8:	0892      	lsrs	r2, r2, #2
 80083da:	d024      	beq.n	8008426 <convert_q3_12_complex_to_f32_complex+0x4e>
 80083dc:	eddf 6a13 	vldr	s13, [pc, #76]	; 800842c <convert_q3_12_complex_to_f32_complex+0x54>
 80083e0:	eddf 5a13 	vldr	s11, [pc, #76]	; 8008430 <convert_q3_12_complex_to_f32_complex+0x58>
 80083e4:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 80083e8:	00d0      	lsls	r0, r2, #3
 80083ea:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80083ee:	f933 cc02 	ldrsh.w	ip, [r3, #-2]
 80083f2:	ee07 ca10 	vmov	s14, ip
 80083f6:	f933 cd04 	ldrsh.w	ip, [r3, #-4]!
 80083fa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80083fe:	ee07 ca90 	vmov	s15, ip
 8008402:	ee27 7a26 	vmul.f32	s14, s14, s13
 8008406:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800840a:	ee27 6a25 	vmul.f32	s12, s14, s11
 800840e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008412:	ed02 7a01 	vstr	s14, [r2, #-4]
 8008416:	ee77 7a86 	vadd.f32	s15, s15, s12
 800841a:	3a08      	subs	r2, #8
 800841c:	edc2 7a00 	vstr	s15, [r2]
 8008420:	4291      	cmp	r1, r2
 8008422:	d1e4      	bne.n	80083ee <convert_q3_12_complex_to_f32_complex+0x16>
 8008424:	4770      	bx	lr
 8008426:	4610      	mov	r0, r2
 8008428:	4770      	bx	lr
 800842a:	bf00      	nop
 800842c:	39800000 	.word	0x39800000
 8008430:	00000000 	.word	0x00000000

08008434 <convert_q12_4_to_q3_12>:
 8008434:	0853      	lsrs	r3, r2, #1
 8008436:	d012      	beq.n	800845e <convert_q12_4_to_q3_12+0x2a>
 8008438:	b410      	push	{r4}
 800843a:	eb01 0443 	add.w	r4, r1, r3, lsl #1
 800843e:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 8008442:	f931 3d02 	ldrsh.w	r3, [r1, #-2]!
 8008446:	105b      	asrs	r3, r3, #1
 8008448:	f483 4340 	eor.w	r3, r3, #49152	; 0xc000
 800844c:	4281      	cmp	r1, r0
 800844e:	f824 3d02 	strh.w	r3, [r4, #-2]!
 8008452:	d1f6      	bne.n	8008442 <convert_q12_4_to_q3_12+0xe>
 8008454:	f022 0001 	bic.w	r0, r2, #1
 8008458:	f85d 4b04 	ldr.w	r4, [sp], #4
 800845c:	4770      	bx	lr
 800845e:	f022 0001 	bic.w	r0, r2, #1
 8008462:	4770      	bx	lr

08008464 <convert_q12_4_to_q3_12_complex>:
 8008464:	b470      	push	{r4, r5, r6}
 8008466:	4605      	mov	r5, r0
 8008468:	0850      	lsrs	r0, r2, #1
 800846a:	d012      	beq.n	8008492 <convert_q12_4_to_q3_12_complex+0x2e>
 800846c:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8008470:	eb05 0440 	add.w	r4, r5, r0, lsl #1
 8008474:	2600      	movs	r6, #0
 8008476:	0080      	lsls	r0, r0, #2
 8008478:	f934 3d02 	ldrsh.w	r3, [r4, #-2]!
 800847c:	f821 6c02 	strh.w	r6, [r1, #-2]
 8008480:	105b      	asrs	r3, r3, #1
 8008482:	f483 4340 	eor.w	r3, r3, #49152	; 0xc000
 8008486:	42a5      	cmp	r5, r4
 8008488:	f821 3c04 	strh.w	r3, [r1, #-4]
 800848c:	f1a1 0104 	sub.w	r1, r1, #4
 8008490:	d1f2      	bne.n	8008478 <convert_q12_4_to_q3_12_complex+0x14>
 8008492:	bc70      	pop	{r4, r5, r6}
 8008494:	4770      	bx	lr
 8008496:	bf00      	nop

08008498 <event>:
 8008498:	b570      	push	{r4, r5, r6, lr}
 800849a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800849c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800849e:	682a      	ldr	r2, [r5, #0]
 80084a0:	4604      	mov	r4, r0
 80084a2:	e9d0 0104 	ldrd	r0, r1, [r0, #16]
 80084a6:	4798      	blx	r3
 80084a8:	6823      	ldr	r3, [r4, #0]
 80084aa:	6028      	str	r0, [r5, #0]
 80084ac:	685a      	ldr	r2, [r3, #4]
 80084ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80084b2:	4618      	mov	r0, r3
 80084b4:	4710      	bx	r2
 80084b6:	bf00      	nop

080084b8 <reset>:
 80084b8:	6800      	ldr	r0, [r0, #0]
 80084ba:	68c3      	ldr	r3, [r0, #12]
 80084bc:	4718      	bx	r3
 80084be:	bf00      	nop

080084c0 <validate>:
 80084c0:	6983      	ldr	r3, [r0, #24]
 80084c2:	b510      	push	{r4, lr}
 80084c4:	4604      	mov	r4, r0
 80084c6:	b113      	cbz	r3, 80084ce <validate+0xe>
 80084c8:	f7fd f9a2 	bl	8005810 <acc_rss_integration_log_level>
 80084cc:	b978      	cbnz	r0, 80084ee <validate+0x2e>
 80084ce:	69e3      	ldr	r3, [r4, #28]
 80084d0:	b143      	cbz	r3, 80084e4 <validate+0x24>
 80084d2:	f7fd f99d 	bl	8005810 <acc_rss_integration_log_level>
 80084d6:	b128      	cbz	r0, 80084e4 <validate+0x24>
 80084d8:	4b08      	ldr	r3, [pc, #32]	; (80084fc <validate+0x3c>)
 80084da:	4a09      	ldr	r2, [pc, #36]	; (8008500 <validate+0x40>)
 80084dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084de:	4909      	ldr	r1, [pc, #36]	; (8008504 <validate+0x44>)
 80084e0:	2001      	movs	r0, #1
 80084e2:	4798      	blx	r3
 80084e4:	6820      	ldr	r0, [r4, #0]
 80084e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084ea:	6883      	ldr	r3, [r0, #8]
 80084ec:	4718      	bx	r3
 80084ee:	4b03      	ldr	r3, [pc, #12]	; (80084fc <validate+0x3c>)
 80084f0:	4a05      	ldr	r2, [pc, #20]	; (8008508 <validate+0x48>)
 80084f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084f4:	4903      	ldr	r1, [pc, #12]	; (8008504 <validate+0x44>)
 80084f6:	2001      	movs	r0, #1
 80084f8:	4798      	blx	r3
 80084fa:	e7e8      	b.n	80084ce <validate+0xe>
 80084fc:	200004c0 	.word	0x200004c0
 8008500:	0800f2ac 	.word	0x0800f2ac
 8008504:	0800f370 	.word	0x0800f370
 8008508:	0800f27c 	.word	0x0800f27c

0800850c <acc_element_converter_init>:
 800850c:	3a02      	subs	r2, #2
 800850e:	b510      	push	{r4, lr}
 8008510:	2a05      	cmp	r2, #5
 8008512:	d804      	bhi.n	800851e <acc_element_converter_init+0x12>
 8008514:	e8df f002 	tbb	[pc, r2]
 8008518:	031d0319 	.word	0x031d0319
 800851c:	0d21      	.short	0x0d21
 800851e:	2300      	movs	r3, #0
 8008520:	6383      	str	r3, [r0, #56]	; 0x38
 8008522:	4b10      	ldr	r3, [pc, #64]	; (8008564 <acc_element_converter_init+0x58>)
 8008524:	4a10      	ldr	r2, [pc, #64]	; (8008568 <acc_element_converter_init+0x5c>)
 8008526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008528:	4910      	ldr	r1, [pc, #64]	; (800856c <acc_element_converter_init+0x60>)
 800852a:	2000      	movs	r0, #0
 800852c:	4798      	blx	r3
 800852e:	2000      	movs	r0, #0
 8008530:	bd10      	pop	{r4, pc}
 8008532:	2905      	cmp	r1, #5
 8008534:	d1f3      	bne.n	800851e <acc_element_converter_init+0x12>
 8008536:	4c0e      	ldr	r4, [pc, #56]	; (8008570 <acc_element_converter_init+0x64>)
 8008538:	490e      	ldr	r1, [pc, #56]	; (8008574 <acc_element_converter_init+0x68>)
 800853a:	4a0f      	ldr	r2, [pc, #60]	; (8008578 <acc_element_converter_init+0x6c>)
 800853c:	4b0f      	ldr	r3, [pc, #60]	; (800857c <acc_element_converter_init+0x70>)
 800853e:	6384      	str	r4, [r0, #56]	; 0x38
 8008540:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8008544:	60c3      	str	r3, [r0, #12]
 8008546:	2001      	movs	r0, #1
 8008548:	bd10      	pop	{r4, pc}
 800854a:	2904      	cmp	r1, #4
 800854c:	d1e7      	bne.n	800851e <acc_element_converter_init+0x12>
 800854e:	4c0c      	ldr	r4, [pc, #48]	; (8008580 <acc_element_converter_init+0x74>)
 8008550:	e7f2      	b.n	8008538 <acc_element_converter_init+0x2c>
 8008552:	2905      	cmp	r1, #5
 8008554:	d1e3      	bne.n	800851e <acc_element_converter_init+0x12>
 8008556:	4c0b      	ldr	r4, [pc, #44]	; (8008584 <acc_element_converter_init+0x78>)
 8008558:	e7ee      	b.n	8008538 <acc_element_converter_init+0x2c>
 800855a:	2907      	cmp	r1, #7
 800855c:	d1df      	bne.n	800851e <acc_element_converter_init+0x12>
 800855e:	4c0a      	ldr	r4, [pc, #40]	; (8008588 <acc_element_converter_init+0x7c>)
 8008560:	e7ea      	b.n	8008538 <acc_element_converter_init+0x2c>
 8008562:	bf00      	nop
 8008564:	200004c0 	.word	0x200004c0
 8008568:	0800f384 	.word	0x0800f384
 800856c:	0800f370 	.word	0x0800f370
 8008570:	08008465 	.word	0x08008465
 8008574:	08008499 	.word	0x08008499
 8008578:	080084c1 	.word	0x080084c1
 800857c:	080084b9 	.word	0x080084b9
 8008580:	080083ad 	.word	0x080083ad
 8008584:	08008435 	.word	0x08008435
 8008588:	080083d9 	.word	0x080083d9

0800858c <event>:
 800858c:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800858e:	6803      	ldr	r3, [r0, #0]
 8008590:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8008592:	6011      	str	r1, [r2, #0]
 8008594:	4618      	mov	r0, r3
 8008596:	685a      	ldr	r2, [r3, #4]
 8008598:	4710      	bx	r2
 800859a:	bf00      	nop

0800859c <reset>:
 800859c:	6800      	ldr	r0, [r0, #0]
 800859e:	68c3      	ldr	r3, [r0, #12]
 80085a0:	4718      	bx	r3
 80085a2:	bf00      	nop

080085a4 <validate>:
 80085a4:	6983      	ldr	r3, [r0, #24]
 80085a6:	b510      	push	{r4, lr}
 80085a8:	4604      	mov	r4, r0
 80085aa:	b113      	cbz	r3, 80085b2 <validate+0xe>
 80085ac:	f7fd f930 	bl	8005810 <acc_rss_integration_log_level>
 80085b0:	b978      	cbnz	r0, 80085d2 <validate+0x2e>
 80085b2:	69e3      	ldr	r3, [r4, #28]
 80085b4:	b143      	cbz	r3, 80085c8 <validate+0x24>
 80085b6:	f7fd f92b 	bl	8005810 <acc_rss_integration_log_level>
 80085ba:	b128      	cbz	r0, 80085c8 <validate+0x24>
 80085bc:	4b08      	ldr	r3, [pc, #32]	; (80085e0 <validate+0x3c>)
 80085be:	4a09      	ldr	r2, [pc, #36]	; (80085e4 <validate+0x40>)
 80085c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085c2:	4909      	ldr	r1, [pc, #36]	; (80085e8 <validate+0x44>)
 80085c4:	2001      	movs	r0, #1
 80085c6:	4798      	blx	r3
 80085c8:	6820      	ldr	r0, [r4, #0]
 80085ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085ce:	6883      	ldr	r3, [r0, #8]
 80085d0:	4718      	bx	r3
 80085d2:	4b03      	ldr	r3, [pc, #12]	; (80085e0 <validate+0x3c>)
 80085d4:	4a05      	ldr	r2, [pc, #20]	; (80085ec <validate+0x48>)
 80085d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085d8:	4903      	ldr	r1, [pc, #12]	; (80085e8 <validate+0x44>)
 80085da:	2001      	movs	r0, #1
 80085dc:	4798      	blx	r3
 80085de:	e7e8      	b.n	80085b2 <validate+0xe>
 80085e0:	200004c0 	.word	0x200004c0
 80085e4:	0800f2ac 	.word	0x0800f2ac
 80085e8:	0800f3ac 	.word	0x0800f3ac
 80085ec:	0800f27c 	.word	0x0800f27c

080085f0 <acc_element_crop_init>:
 80085f0:	b538      	push	{r3, r4, r5, lr}
 80085f2:	4604      	mov	r4, r0
 80085f4:	4608      	mov	r0, r1
 80085f6:	4615      	mov	r5, r2
 80085f8:	f7ff fb46 	bl	8007c88 <acc_element_sizeof>
 80085fc:	4904      	ldr	r1, [pc, #16]	; (8008610 <acc_element_crop_init+0x20>)
 80085fe:	4a05      	ldr	r2, [pc, #20]	; (8008614 <acc_element_crop_init+0x24>)
 8008600:	4b05      	ldr	r3, [pc, #20]	; (8008618 <acc_element_crop_init+0x28>)
 8008602:	60e3      	str	r3, [r4, #12]
 8008604:	fb05 f000 	mul.w	r0, r5, r0
 8008608:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800860c:	63a0      	str	r0, [r4, #56]	; 0x38
 800860e:	bd38      	pop	{r3, r4, r5, pc}
 8008610:	0800858d 	.word	0x0800858d
 8008614:	080085a5 	.word	0x080085a5
 8008618:	0800859d 	.word	0x0800859d

0800861c <filter_no_operation>:
 800861c:	4770      	bx	lr
 800861e:	bf00      	nop

08008620 <event>:
 8008620:	b510      	push	{r4, lr}
 8008622:	4604      	mov	r4, r0
 8008624:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008626:	4798      	blx	r3
 8008628:	6820      	ldr	r0, [r4, #0]
 800862a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800862e:	6843      	ldr	r3, [r0, #4]
 8008630:	4718      	bx	r3
 8008632:	bf00      	nop

08008634 <reset>:
 8008634:	6800      	ldr	r0, [r0, #0]
 8008636:	68c3      	ldr	r3, [r0, #12]
 8008638:	4718      	bx	r3
 800863a:	bf00      	nop

0800863c <filter_q3_12_complex>:
 800863c:	4603      	mov	r3, r0
 800863e:	3040      	adds	r0, #64	; 0x40
 8008640:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008642:	6919      	ldr	r1, [r3, #16]
 8008644:	6812      	ldr	r2, [r2, #0]
 8008646:	0892      	lsrs	r2, r2, #2
 8008648:	f003 bc5c 	b.w	800bf04 <acc_alg_biquad_q3_12_complex_direct_form_1_filtfilt_reduced_edge_transients>

0800864c <validate>:
 800864c:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 8008650:	429a      	cmp	r2, r3
 8008652:	b510      	push	{r4, lr}
 8008654:	d007      	beq.n	8008666 <validate+0x1a>
 8008656:	4b12      	ldr	r3, [pc, #72]	; (80086a0 <validate+0x54>)
 8008658:	4a12      	ldr	r2, [pc, #72]	; (80086a4 <validate+0x58>)
 800865a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800865c:	4912      	ldr	r1, [pc, #72]	; (80086a8 <validate+0x5c>)
 800865e:	2000      	movs	r0, #0
 8008660:	4798      	blx	r3
 8008662:	2000      	movs	r0, #0
 8008664:	bd10      	pop	{r4, pc}
 8008666:	6983      	ldr	r3, [r0, #24]
 8008668:	4604      	mov	r4, r0
 800866a:	b113      	cbz	r3, 8008672 <validate+0x26>
 800866c:	f7fd f8d0 	bl	8005810 <acc_rss_integration_log_level>
 8008670:	b978      	cbnz	r0, 8008692 <validate+0x46>
 8008672:	69e3      	ldr	r3, [r4, #28]
 8008674:	b143      	cbz	r3, 8008688 <validate+0x3c>
 8008676:	f7fd f8cb 	bl	8005810 <acc_rss_integration_log_level>
 800867a:	b128      	cbz	r0, 8008688 <validate+0x3c>
 800867c:	4b08      	ldr	r3, [pc, #32]	; (80086a0 <validate+0x54>)
 800867e:	4a0b      	ldr	r2, [pc, #44]	; (80086ac <validate+0x60>)
 8008680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008682:	4909      	ldr	r1, [pc, #36]	; (80086a8 <validate+0x5c>)
 8008684:	2001      	movs	r0, #1
 8008686:	4798      	blx	r3
 8008688:	6820      	ldr	r0, [r4, #0]
 800868a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800868e:	6883      	ldr	r3, [r0, #8]
 8008690:	4718      	bx	r3
 8008692:	4b03      	ldr	r3, [pc, #12]	; (80086a0 <validate+0x54>)
 8008694:	4a06      	ldr	r2, [pc, #24]	; (80086b0 <validate+0x64>)
 8008696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008698:	4903      	ldr	r1, [pc, #12]	; (80086a8 <validate+0x5c>)
 800869a:	2001      	movs	r0, #1
 800869c:	4798      	blx	r3
 800869e:	e7e8      	b.n	8008672 <validate+0x26>
 80086a0:	200004c0 	.word	0x200004c0
 80086a4:	0800f3bc 	.word	0x0800f3bc
 80086a8:	0800f3e4 	.word	0x0800f3e4
 80086ac:	0800f2ac 	.word	0x0800f2ac
 80086b0:	0800f27c 	.word	0x0800f27c

080086b4 <acc_element_depth_domain_low_pass_filter_init>:
 80086b4:	b570      	push	{r4, r5, r6, lr}
 80086b6:	4604      	mov	r4, r0
 80086b8:	4823      	ldr	r0, [pc, #140]	; (8008748 <acc_element_depth_domain_low_pass_filter_init+0x94>)
 80086ba:	6060      	str	r0, [r4, #4]
 80086bc:	4823      	ldr	r0, [pc, #140]	; (800874c <acc_element_depth_domain_low_pass_filter_init+0x98>)
 80086be:	60a0      	str	r0, [r4, #8]
 80086c0:	4823      	ldr	r0, [pc, #140]	; (8008750 <acc_element_depth_domain_low_pass_filter_init+0x9c>)
 80086c2:	60e0      	str	r0, [r4, #12]
 80086c4:	461e      	mov	r6, r3
 80086c6:	b30a      	cbz	r2, 800870c <acc_element_depth_domain_low_pass_filter_init+0x58>
 80086c8:	eddf 7a22 	vldr	s15, [pc, #136]	; 8008754 <acc_element_depth_domain_low_pass_filter_init+0xa0>
 80086cc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80086d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086d4:	d513      	bpl.n	80086fe <acc_element_depth_domain_low_pass_filter_init+0x4a>
 80086d6:	eeb0 0a67 	vmov.f32	s0, s15
 80086da:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
 80086de:	2907      	cmp	r1, #7
 80086e0:	d124      	bne.n	800872c <acc_element_depth_domain_low_pass_filter_init+0x78>
 80086e2:	4b1d      	ldr	r3, [pc, #116]	; (8008758 <acc_element_depth_domain_low_pass_filter_init+0xa4>)
 80086e4:	63a3      	str	r3, [r4, #56]	; 0x38
 80086e6:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 80086ea:	2300      	movs	r3, #0
 80086ec:	f104 0140 	add.w	r1, r4, #64	; 0x40
 80086f0:	2001      	movs	r0, #1
 80086f2:	f003 fa6d 	bl	800bbd0 <acc_alg_biquad_q3_12_lowpass_coeffs>
 80086f6:	4605      	mov	r5, r0
 80086f8:	b188      	cbz	r0, 800871e <acc_element_depth_domain_low_pass_filter_init+0x6a>
 80086fa:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80086fc:	e00b      	b.n	8008716 <acc_element_depth_domain_low_pass_filter_init+0x62>
 80086fe:	eddf 7a17 	vldr	s15, [pc, #92]	; 800875c <acc_element_depth_domain_low_pass_filter_init+0xa8>
 8008702:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8008706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800870a:	dd19      	ble.n	8008740 <acc_element_depth_domain_low_pass_filter_init+0x8c>
 800870c:	4b14      	ldr	r3, [pc, #80]	; (8008760 <acc_element_depth_domain_low_pass_filter_init+0xac>)
 800870e:	63a3      	str	r3, [r4, #56]	; 0x38
 8008710:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8008714:	63e2      	str	r2, [r4, #60]	; 0x3c
 8008716:	2501      	movs	r5, #1
 8008718:	61f2      	str	r2, [r6, #28]
 800871a:	4628      	mov	r0, r5
 800871c:	bd70      	pop	{r4, r5, r6, pc}
 800871e:	4b11      	ldr	r3, [pc, #68]	; (8008764 <acc_element_depth_domain_low_pass_filter_init+0xb0>)
 8008720:	4a11      	ldr	r2, [pc, #68]	; (8008768 <acc_element_depth_domain_low_pass_filter_init+0xb4>)
 8008722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008724:	4911      	ldr	r1, [pc, #68]	; (800876c <acc_element_depth_domain_low_pass_filter_init+0xb8>)
 8008726:	4798      	blx	r3
 8008728:	4628      	mov	r0, r5
 800872a:	bd70      	pop	{r4, r5, r6, pc}
 800872c:	4b0d      	ldr	r3, [pc, #52]	; (8008764 <acc_element_depth_domain_low_pass_filter_init+0xb0>)
 800872e:	4a10      	ldr	r2, [pc, #64]	; (8008770 <acc_element_depth_domain_low_pass_filter_init+0xbc>)
 8008730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008732:	490e      	ldr	r1, [pc, #56]	; (800876c <acc_element_depth_domain_low_pass_filter_init+0xb8>)
 8008734:	2000      	movs	r0, #0
 8008736:	63a0      	str	r0, [r4, #56]	; 0x38
 8008738:	4605      	mov	r5, r0
 800873a:	4798      	blx	r3
 800873c:	4628      	mov	r0, r5
 800873e:	bd70      	pop	{r4, r5, r6, pc}
 8008740:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
 8008744:	e7cb      	b.n	80086de <acc_element_depth_domain_low_pass_filter_init+0x2a>
 8008746:	bf00      	nop
 8008748:	08008621 	.word	0x08008621
 800874c:	0800864d 	.word	0x0800864d
 8008750:	08008635 	.word	0x08008635
 8008754:	3b843809 	.word	0x3b843809
 8008758:	0800863d 	.word	0x0800863d
 800875c:	3efdca08 	.word	0x3efdca08
 8008760:	0800861d 	.word	0x0800861d
 8008764:	200004c0 	.word	0x200004c0
 8008768:	0800f40c 	.word	0x0800f40c
 800876c:	0800f3e4 	.word	0x0800f3e4
 8008770:	0800f2bc 	.word	0x0800f2bc

08008774 <event>:
 8008774:	b510      	push	{r4, lr}
 8008776:	4604      	mov	r4, r0
 8008778:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800877a:	4798      	blx	r3
 800877c:	6820      	ldr	r0, [r4, #0]
 800877e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008782:	6843      	ldr	r3, [r0, #4]
 8008784:	4718      	bx	r3
 8008786:	bf00      	nop

08008788 <reset>:
 8008788:	6800      	ldr	r0, [r0, #0]
 800878a:	68c3      	ldr	r3, [r0, #12]
 800878c:	4718      	bx	r3
 800878e:	bf00      	nop

08008790 <iq_mix_q3_12>:
 8008790:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8008792:	ed90 1a10 	vldr	s2, [r0, #64]	; 0x40
 8008796:	edd0 0a0f 	vldr	s1, [r0, #60]	; 0x3c
 800879a:	b538      	push	{r3, r4, r5, lr}
 800879c:	6815      	ldr	r5, [r2, #0]
 800879e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80087a0:	4604      	mov	r4, r0
 80087a2:	086d      	lsrs	r5, r5, #1
 80087a4:	ed93 0a00 	vldr	s0, [r3]
 80087a8:	462a      	mov	r2, r5
 80087aa:	e9d0 0104 	ldrd	r0, r1, [r0, #16]
 80087ae:	f003 fbc7 	bl	800bf40 <acc_alg_iq_demodulation_q3_12_real>
 80087b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80087b4:	00ad      	lsls	r5, r5, #2
 80087b6:	601d      	str	r5, [r3, #0]
 80087b8:	bd38      	pop	{r3, r4, r5, pc}
 80087ba:	bf00      	nop

080087bc <iq_mix_q3_12_complex>:
 80087bc:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80087be:	ed90 1a10 	vldr	s2, [r0, #64]	; 0x40
 80087c2:	edd0 0a0f 	vldr	s1, [r0, #60]	; 0x3c
 80087c6:	b538      	push	{r3, r4, r5, lr}
 80087c8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80087ca:	6815      	ldr	r5, [r2, #0]
 80087cc:	ed93 0a00 	vldr	s0, [r3]
 80087d0:	4604      	mov	r4, r0
 80087d2:	08a9      	lsrs	r1, r5, #2
 80087d4:	6900      	ldr	r0, [r0, #16]
 80087d6:	f003 fc15 	bl	800c004 <acc_alg_iq_demodulation_q3_12_complex>
 80087da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80087dc:	f025 0503 	bic.w	r5, r5, #3
 80087e0:	601d      	str	r5, [r3, #0]
 80087e2:	bd38      	pop	{r3, r4, r5, pc}

080087e4 <validate>:
 80087e4:	4a21      	ldr	r2, [pc, #132]	; (800886c <validate+0x88>)
 80087e6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80087e8:	4293      	cmp	r3, r2
 80087ea:	b510      	push	{r4, lr}
 80087ec:	4604      	mov	r4, r0
 80087ee:	d023      	beq.n	8008838 <validate+0x54>
 80087f0:	4a1f      	ldr	r2, [pc, #124]	; (8008870 <validate+0x8c>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d007      	beq.n	8008806 <validate+0x22>
 80087f6:	4b1f      	ldr	r3, [pc, #124]	; (8008874 <validate+0x90>)
 80087f8:	4a1f      	ldr	r2, [pc, #124]	; (8008878 <validate+0x94>)
 80087fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087fc:	491f      	ldr	r1, [pc, #124]	; (800887c <validate+0x98>)
 80087fe:	2000      	movs	r0, #0
 8008800:	4798      	blx	r3
 8008802:	2000      	movs	r0, #0
 8008804:	bd10      	pop	{r4, pc}
 8008806:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 800880a:	429a      	cmp	r2, r3
 800880c:	d027      	beq.n	800885e <validate+0x7a>
 800880e:	69a3      	ldr	r3, [r4, #24]
 8008810:	b113      	cbz	r3, 8008818 <validate+0x34>
 8008812:	f7fc fffd 	bl	8005810 <acc_rss_integration_log_level>
 8008816:	b9d8      	cbnz	r0, 8008850 <validate+0x6c>
 8008818:	69e3      	ldr	r3, [r4, #28]
 800881a:	b143      	cbz	r3, 800882e <validate+0x4a>
 800881c:	f7fc fff8 	bl	8005810 <acc_rss_integration_log_level>
 8008820:	b128      	cbz	r0, 800882e <validate+0x4a>
 8008822:	4b14      	ldr	r3, [pc, #80]	; (8008874 <validate+0x90>)
 8008824:	4a16      	ldr	r2, [pc, #88]	; (8008880 <validate+0x9c>)
 8008826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008828:	4914      	ldr	r1, [pc, #80]	; (800887c <validate+0x98>)
 800882a:	2001      	movs	r0, #1
 800882c:	4798      	blx	r3
 800882e:	6820      	ldr	r0, [r4, #0]
 8008830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008834:	6883      	ldr	r3, [r0, #8]
 8008836:	4718      	bx	r3
 8008838:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 800883c:	429a      	cmp	r2, r3
 800883e:	d0e6      	beq.n	800880e <validate+0x2a>
 8008840:	4b0c      	ldr	r3, [pc, #48]	; (8008874 <validate+0x90>)
 8008842:	4a10      	ldr	r2, [pc, #64]	; (8008884 <validate+0xa0>)
 8008844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008846:	490d      	ldr	r1, [pc, #52]	; (800887c <validate+0x98>)
 8008848:	2000      	movs	r0, #0
 800884a:	4798      	blx	r3
 800884c:	2000      	movs	r0, #0
 800884e:	bd10      	pop	{r4, pc}
 8008850:	4b08      	ldr	r3, [pc, #32]	; (8008874 <validate+0x90>)
 8008852:	4a0d      	ldr	r2, [pc, #52]	; (8008888 <validate+0xa4>)
 8008854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008856:	4909      	ldr	r1, [pc, #36]	; (800887c <validate+0x98>)
 8008858:	2001      	movs	r0, #1
 800885a:	4798      	blx	r3
 800885c:	e7dc      	b.n	8008818 <validate+0x34>
 800885e:	4b05      	ldr	r3, [pc, #20]	; (8008874 <validate+0x90>)
 8008860:	4a0a      	ldr	r2, [pc, #40]	; (800888c <validate+0xa8>)
 8008862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008864:	4905      	ldr	r1, [pc, #20]	; (800887c <validate+0x98>)
 8008866:	2000      	movs	r0, #0
 8008868:	4798      	blx	r3
 800886a:	e7ca      	b.n	8008802 <validate+0x1e>
 800886c:	080087bd 	.word	0x080087bd
 8008870:	08008791 	.word	0x08008791
 8008874:	200004c0 	.word	0x200004c0
 8008878:	0800f484 	.word	0x0800f484
 800887c:	0800f438 	.word	0x0800f438
 8008880:	0800f2ac 	.word	0x0800f2ac
 8008884:	0800f3bc 	.word	0x0800f3bc
 8008888:	0800f27c 	.word	0x0800f27c
 800888c:	0800f44c 	.word	0x0800f44c

08008890 <acc_element_iq_mixer_init>:
 8008890:	4b10      	ldr	r3, [pc, #64]	; (80088d4 <acc_element_iq_mixer_init+0x44>)
 8008892:	4a11      	ldr	r2, [pc, #68]	; (80088d8 <acc_element_iq_mixer_init+0x48>)
 8008894:	6043      	str	r3, [r0, #4]
 8008896:	4b11      	ldr	r3, [pc, #68]	; (80088dc <acc_element_iq_mixer_init+0x4c>)
 8008898:	ed80 0a0f 	vstr	s0, [r0, #60]	; 0x3c
 800889c:	2904      	cmp	r1, #4
 800889e:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80088a2:	edc0 0a10 	vstr	s1, [r0, #64]	; 0x40
 80088a6:	d00c      	beq.n	80088c2 <acc_element_iq_mixer_init+0x32>
 80088a8:	2907      	cmp	r1, #7
 80088aa:	d00e      	beq.n	80088ca <acc_element_iq_mixer_init+0x3a>
 80088ac:	b510      	push	{r4, lr}
 80088ae:	4b0c      	ldr	r3, [pc, #48]	; (80088e0 <acc_element_iq_mixer_init+0x50>)
 80088b0:	4a0c      	ldr	r2, [pc, #48]	; (80088e4 <acc_element_iq_mixer_init+0x54>)
 80088b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088b4:	490c      	ldr	r1, [pc, #48]	; (80088e8 <acc_element_iq_mixer_init+0x58>)
 80088b6:	2400      	movs	r4, #0
 80088b8:	6384      	str	r4, [r0, #56]	; 0x38
 80088ba:	4620      	mov	r0, r4
 80088bc:	4798      	blx	r3
 80088be:	4620      	mov	r0, r4
 80088c0:	bd10      	pop	{r4, pc}
 80088c2:	4b0a      	ldr	r3, [pc, #40]	; (80088ec <acc_element_iq_mixer_init+0x5c>)
 80088c4:	6383      	str	r3, [r0, #56]	; 0x38
 80088c6:	2001      	movs	r0, #1
 80088c8:	4770      	bx	lr
 80088ca:	4b09      	ldr	r3, [pc, #36]	; (80088f0 <acc_element_iq_mixer_init+0x60>)
 80088cc:	6383      	str	r3, [r0, #56]	; 0x38
 80088ce:	2001      	movs	r0, #1
 80088d0:	4770      	bx	lr
 80088d2:	bf00      	nop
 80088d4:	08008775 	.word	0x08008775
 80088d8:	080087e5 	.word	0x080087e5
 80088dc:	08008789 	.word	0x08008789
 80088e0:	200004c0 	.word	0x200004c0
 80088e4:	0800f2bc 	.word	0x0800f2bc
 80088e8:	0800f438 	.word	0x0800f438
 80088ec:	08008791 	.word	0x08008791
 80088f0:	080087bd 	.word	0x080087bd

080088f4 <noise_level_normalization_u16>:
 80088f4:	0849      	lsrs	r1, r1, #1
 80088f6:	d01e      	beq.n	8008936 <noise_level_normalization_u16+0x42>
 80088f8:	b470      	push	{r4, r5, r6}
 80088fa:	eb00 0441 	add.w	r4, r0, r1, lsl #1
 80088fe:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8008902:	2600      	movs	r6, #0
 8008904:	b92a      	cbnz	r2, 8008912 <noise_level_normalization_u16+0x1e>
 8008906:	8005      	strh	r5, [r0, #0]
 8008908:	3002      	adds	r0, #2
 800890a:	42a0      	cmp	r0, r4
 800890c:	d1fa      	bne.n	8008904 <noise_level_normalization_u16+0x10>
 800890e:	bc70      	pop	{r4, r5, r6}
 8008910:	4770      	bx	lr
 8008912:	8801      	ldrh	r1, [r0, #0]
 8008914:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
 8008918:	fb03 f101 	mul.w	r1, r3, r1
 800891c:	fb91 f1f2 	sdiv	r1, r1, r2
 8008920:	f511 4100 	adds.w	r1, r1, #32768	; 0x8000
 8008924:	d405      	bmi.n	8008932 <noise_level_normalization_u16+0x3e>
 8008926:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800892a:	bfa8      	it	ge
 800892c:	4629      	movge	r1, r5
 800892e:	8001      	strh	r1, [r0, #0]
 8008930:	e7ea      	b.n	8008908 <noise_level_normalization_u16+0x14>
 8008932:	8006      	strh	r6, [r0, #0]
 8008934:	e7e8      	b.n	8008908 <noise_level_normalization_u16+0x14>
 8008936:	4770      	bx	lr

08008938 <event>:
 8008938:	b570      	push	{r4, r5, r6, lr}
 800893a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800893c:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 800893e:	6819      	ldr	r1, [r3, #0]
 8008940:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 8008942:	8f43      	ldrh	r3, [r0, #58]	; 0x3a
 8008944:	4604      	mov	r4, r0
 8008946:	6900      	ldr	r0, [r0, #16]
 8008948:	47a8      	blx	r5
 800894a:	6820      	ldr	r0, [r4, #0]
 800894c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008950:	6843      	ldr	r3, [r0, #4]
 8008952:	4718      	bx	r3

08008954 <reset>:
 8008954:	6800      	ldr	r0, [r0, #0]
 8008956:	68c3      	ldr	r3, [r0, #12]
 8008958:	4718      	bx	r3
 800895a:	bf00      	nop

0800895c <validate>:
 800895c:	6983      	ldr	r3, [r0, #24]
 800895e:	b510      	push	{r4, lr}
 8008960:	4604      	mov	r4, r0
 8008962:	b113      	cbz	r3, 800896a <validate+0xe>
 8008964:	f7fc ff54 	bl	8005810 <acc_rss_integration_log_level>
 8008968:	b978      	cbnz	r0, 800898a <validate+0x2e>
 800896a:	69e3      	ldr	r3, [r4, #28]
 800896c:	b143      	cbz	r3, 8008980 <validate+0x24>
 800896e:	f7fc ff4f 	bl	8005810 <acc_rss_integration_log_level>
 8008972:	b128      	cbz	r0, 8008980 <validate+0x24>
 8008974:	4b08      	ldr	r3, [pc, #32]	; (8008998 <validate+0x3c>)
 8008976:	4a09      	ldr	r2, [pc, #36]	; (800899c <validate+0x40>)
 8008978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800897a:	4909      	ldr	r1, [pc, #36]	; (80089a0 <validate+0x44>)
 800897c:	2001      	movs	r0, #1
 800897e:	4798      	blx	r3
 8008980:	6820      	ldr	r0, [r4, #0]
 8008982:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008986:	6883      	ldr	r3, [r0, #8]
 8008988:	4718      	bx	r3
 800898a:	4b03      	ldr	r3, [pc, #12]	; (8008998 <validate+0x3c>)
 800898c:	4a05      	ldr	r2, [pc, #20]	; (80089a4 <validate+0x48>)
 800898e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008990:	4903      	ldr	r1, [pc, #12]	; (80089a0 <validate+0x44>)
 8008992:	2001      	movs	r0, #1
 8008994:	4798      	blx	r3
 8008996:	e7e8      	b.n	800896a <validate+0xe>
 8008998:	200004c0 	.word	0x200004c0
 800899c:	0800f2ac 	.word	0x0800f2ac
 80089a0:	0800f49c 	.word	0x0800f49c
 80089a4:	0800f27c 	.word	0x0800f27c

080089a8 <acc_element_noise_level_normalization_init>:
 80089a8:	2902      	cmp	r1, #2
 80089aa:	b510      	push	{r4, lr}
 80089ac:	8702      	strh	r2, [r0, #56]	; 0x38
 80089ae:	8743      	strh	r3, [r0, #58]	; 0x3a
 80089b0:	d001      	beq.n	80089b6 <acc_element_noise_level_normalization_init+0xe>
 80089b2:	2905      	cmp	r1, #5
 80089b4:	d109      	bne.n	80089ca <acc_element_noise_level_normalization_init+0x22>
 80089b6:	490a      	ldr	r1, [pc, #40]	; (80089e0 <acc_element_noise_level_normalization_init+0x38>)
 80089b8:	4a0a      	ldr	r2, [pc, #40]	; (80089e4 <acc_element_noise_level_normalization_init+0x3c>)
 80089ba:	4c0b      	ldr	r4, [pc, #44]	; (80089e8 <acc_element_noise_level_normalization_init+0x40>)
 80089bc:	4b0b      	ldr	r3, [pc, #44]	; (80089ec <acc_element_noise_level_normalization_init+0x44>)
 80089be:	63c4      	str	r4, [r0, #60]	; 0x3c
 80089c0:	e9c0 1201 	strd	r1, r2, [r0, #4]
 80089c4:	60c3      	str	r3, [r0, #12]
 80089c6:	2001      	movs	r0, #1
 80089c8:	bd10      	pop	{r4, pc}
 80089ca:	4b09      	ldr	r3, [pc, #36]	; (80089f0 <acc_element_noise_level_normalization_init+0x48>)
 80089cc:	4a09      	ldr	r2, [pc, #36]	; (80089f4 <acc_element_noise_level_normalization_init+0x4c>)
 80089ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089d0:	4909      	ldr	r1, [pc, #36]	; (80089f8 <acc_element_noise_level_normalization_init+0x50>)
 80089d2:	2400      	movs	r4, #0
 80089d4:	63c4      	str	r4, [r0, #60]	; 0x3c
 80089d6:	4620      	mov	r0, r4
 80089d8:	4798      	blx	r3
 80089da:	4620      	mov	r0, r4
 80089dc:	bd10      	pop	{r4, pc}
 80089de:	bf00      	nop
 80089e0:	08008939 	.word	0x08008939
 80089e4:	0800895d 	.word	0x0800895d
 80089e8:	080088f5 	.word	0x080088f5
 80089ec:	08008955 	.word	0x08008955
 80089f0:	200004c0 	.word	0x200004c0
 80089f4:	0800f2bc 	.word	0x0800f2bc
 80089f8:	0800f49c 	.word	0x0800f49c

080089fc <event>:
 80089fc:	b510      	push	{r4, lr}
 80089fe:	4604      	mov	r4, r0
 8008a00:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008a02:	4798      	blx	r3
 8008a04:	6820      	ldr	r0, [r4, #0]
 8008a06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a0a:	6843      	ldr	r3, [r0, #4]
 8008a0c:	4718      	bx	r3
 8008a0e:	bf00      	nop

08008a10 <reset>:
 8008a10:	6800      	ldr	r0, [r0, #0]
 8008a12:	68c3      	ldr	r3, [r0, #12]
 8008a14:	4718      	bx	r3
 8008a16:	bf00      	nop

08008a18 <do_phase_compensation_q3_12>:
 8008a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a1c:	2a7c      	cmp	r2, #124	; 0x7c
 8008a1e:	b0fd      	sub	sp, #500	; 0x1f4
 8008a20:	d82a      	bhi.n	8008a78 <do_phase_compensation_q3_12+0x60>
 8008a22:	4689      	mov	r9, r1
 8008a24:	b329      	cbz	r1, 8008a72 <do_phase_compensation_q3_12+0x5a>
 8008a26:	469a      	mov	sl, r3
 8008a28:	ab7c      	add	r3, sp, #496	; 0x1f0
 8008a2a:	2600      	movs	r6, #0
 8008a2c:	eb03 0b82 	add.w	fp, r3, r2, lsl #2
 8008a30:	4615      	mov	r5, r2
 8008a32:	4604      	mov	r4, r0
 8008a34:	46b0      	mov	r8, r6
 8008a36:	f5ab 7bfa 	sub.w	fp, fp, #500	; 0x1f4
 8008a3a:	0097      	lsls	r7, r2, #2
 8008a3c:	4621      	mov	r1, r4
 8008a3e:	463a      	mov	r2, r7
 8008a40:	4668      	mov	r0, sp
 8008a42:	f004 fb17 	bl	800d074 <memcpy>
 8008a46:	462a      	mov	r2, r5
 8008a48:	4651      	mov	r1, sl
 8008a4a:	4668      	mov	r0, sp
 8008a4c:	f8cd 8000 	str.w	r8, [sp]
 8008a50:	f8cb 8000 	str.w	r8, [fp]
 8008a54:	f003 fb48 	bl	800c0e8 <acc_alg_phase_estimation_q3_12>
 8008a58:	4629      	mov	r1, r5
 8008a5a:	4668      	mov	r0, sp
 8008a5c:	f003 ff4c 	bl	800c8f8 <acc_alg_basic_math_q3_12_complex_conj_normalize>
 8008a60:	3601      	adds	r6, #1
 8008a62:	4620      	mov	r0, r4
 8008a64:	462a      	mov	r2, r5
 8008a66:	4669      	mov	r1, sp
 8008a68:	f003 feee 	bl	800c848 <acc_alg_basic_math_q3_12_complex_mul>
 8008a6c:	45b1      	cmp	r9, r6
 8008a6e:	443c      	add	r4, r7
 8008a70:	d1e4      	bne.n	8008a3c <do_phase_compensation_q3_12+0x24>
 8008a72:	b07d      	add	sp, #500	; 0x1f4
 8008a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a78:	4801      	ldr	r0, [pc, #4]	; (8008a80 <do_phase_compensation_q3_12+0x68>)
 8008a7a:	217d      	movs	r1, #125	; 0x7d
 8008a7c:	f7ff f8ec 	bl	8007c58 <acc_assert_fail>
 8008a80:	0800f4c0 	.word	0x0800f4c0

08008a84 <phase_compensate_q3_12_complex>:
 8008a84:	e9d0 120f 	ldrd	r1, r2, [r0, #60]	; 0x3c
 8008a88:	f9b0 3044 	ldrsh.w	r3, [r0, #68]	; 0x44
 8008a8c:	6900      	ldr	r0, [r0, #16]
 8008a8e:	f7ff bfc3 	b.w	8008a18 <do_phase_compensation_q3_12>
 8008a92:	bf00      	nop

08008a94 <validate>:
 8008a94:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 8008a98:	429a      	cmp	r2, r3
 8008a9a:	b510      	push	{r4, lr}
 8008a9c:	d007      	beq.n	8008aae <validate+0x1a>
 8008a9e:	4b12      	ldr	r3, [pc, #72]	; (8008ae8 <validate+0x54>)
 8008aa0:	4a12      	ldr	r2, [pc, #72]	; (8008aec <validate+0x58>)
 8008aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008aa4:	4912      	ldr	r1, [pc, #72]	; (8008af0 <validate+0x5c>)
 8008aa6:	2000      	movs	r0, #0
 8008aa8:	4798      	blx	r3
 8008aaa:	2000      	movs	r0, #0
 8008aac:	bd10      	pop	{r4, pc}
 8008aae:	6983      	ldr	r3, [r0, #24]
 8008ab0:	4604      	mov	r4, r0
 8008ab2:	b113      	cbz	r3, 8008aba <validate+0x26>
 8008ab4:	f7fc feac 	bl	8005810 <acc_rss_integration_log_level>
 8008ab8:	b978      	cbnz	r0, 8008ada <validate+0x46>
 8008aba:	69e3      	ldr	r3, [r4, #28]
 8008abc:	b143      	cbz	r3, 8008ad0 <validate+0x3c>
 8008abe:	f7fc fea7 	bl	8005810 <acc_rss_integration_log_level>
 8008ac2:	b128      	cbz	r0, 8008ad0 <validate+0x3c>
 8008ac4:	4b08      	ldr	r3, [pc, #32]	; (8008ae8 <validate+0x54>)
 8008ac6:	4a0b      	ldr	r2, [pc, #44]	; (8008af4 <validate+0x60>)
 8008ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008aca:	4909      	ldr	r1, [pc, #36]	; (8008af0 <validate+0x5c>)
 8008acc:	2001      	movs	r0, #1
 8008ace:	4798      	blx	r3
 8008ad0:	6820      	ldr	r0, [r4, #0]
 8008ad2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ad6:	6883      	ldr	r3, [r0, #8]
 8008ad8:	4718      	bx	r3
 8008ada:	4b03      	ldr	r3, [pc, #12]	; (8008ae8 <validate+0x54>)
 8008adc:	4a06      	ldr	r2, [pc, #24]	; (8008af8 <validate+0x64>)
 8008ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ae0:	4903      	ldr	r1, [pc, #12]	; (8008af0 <validate+0x5c>)
 8008ae2:	2001      	movs	r0, #1
 8008ae4:	4798      	blx	r3
 8008ae6:	e7e8      	b.n	8008aba <validate+0x26>
 8008ae8:	200004c0 	.word	0x200004c0
 8008aec:	0800f3bc 	.word	0x0800f3bc
 8008af0:	0800f4c0 	.word	0x0800f4c0
 8008af4:	0800f2ac 	.word	0x0800f2ac
 8008af8:	0800f27c 	.word	0x0800f27c

08008afc <acc_element_phase_compensation_init>:
 8008afc:	eddf 6a17 	vldr	s13, [pc, #92]	; 8008b5c <acc_element_phase_compensation_init+0x60>
 8008b00:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008b04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b08:	ee20 0a26 	vmul.f32	s0, s0, s13
 8008b0c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8008b10:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8008b14:	bfb8      	it	lt
 8008b16:	eef0 7a47 	vmovlt.f32	s15, s14
 8008b1a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008b1e:	b538      	push	{r3, r4, r5, lr}
 8008b20:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008b24:	6403      	str	r3, [r0, #64]	; 0x40
 8008b26:	4b0e      	ldr	r3, [pc, #56]	; (8008b60 <acc_element_phase_compensation_init+0x64>)
 8008b28:	4d0e      	ldr	r5, [pc, #56]	; (8008b64 <acc_element_phase_compensation_init+0x68>)
 8008b2a:	4c0f      	ldr	r4, [pc, #60]	; (8008b68 <acc_element_phase_compensation_init+0x6c>)
 8008b2c:	60c3      	str	r3, [r0, #12]
 8008b2e:	ee10 3a10 	vmov	r3, s0
 8008b32:	2907      	cmp	r1, #7
 8008b34:	e9c0 5401 	strd	r5, r4, [r0, #4]
 8008b38:	63c2      	str	r2, [r0, #60]	; 0x3c
 8008b3a:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 8008b3e:	d103      	bne.n	8008b48 <acc_element_phase_compensation_init+0x4c>
 8008b40:	4b0a      	ldr	r3, [pc, #40]	; (8008b6c <acc_element_phase_compensation_init+0x70>)
 8008b42:	6383      	str	r3, [r0, #56]	; 0x38
 8008b44:	2001      	movs	r0, #1
 8008b46:	bd38      	pop	{r3, r4, r5, pc}
 8008b48:	4b09      	ldr	r3, [pc, #36]	; (8008b70 <acc_element_phase_compensation_init+0x74>)
 8008b4a:	4a0a      	ldr	r2, [pc, #40]	; (8008b74 <acc_element_phase_compensation_init+0x78>)
 8008b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b4e:	490a      	ldr	r1, [pc, #40]	; (8008b78 <acc_element_phase_compensation_init+0x7c>)
 8008b50:	2400      	movs	r4, #0
 8008b52:	6384      	str	r4, [r0, #56]	; 0x38
 8008b54:	4620      	mov	r0, r4
 8008b56:	4798      	blx	r3
 8008b58:	4620      	mov	r0, r4
 8008b5a:	bd38      	pop	{r3, r4, r5, pc}
 8008b5c:	45800000 	.word	0x45800000
 8008b60:	08008a11 	.word	0x08008a11
 8008b64:	080089fd 	.word	0x080089fd
 8008b68:	08008a95 	.word	0x08008a95
 8008b6c:	08008a85 	.word	0x08008a85
 8008b70:	200004c0 	.word	0x200004c0
 8008b74:	0800f2bc 	.word	0x0800f2bc
 8008b78:	0800f4c0 	.word	0x0800f4c0

08008b7c <reset>:
 8008b7c:	69c3      	ldr	r3, [r0, #28]
 8008b7e:	6800      	ldr	r0, [r0, #0]
 8008b80:	2201      	movs	r2, #1
 8008b82:	701a      	strb	r2, [r3, #0]
 8008b84:	68c3      	ldr	r3, [r0, #12]
 8008b86:	4718      	bx	r3

08008b88 <event>:
 8008b88:	b570      	push	{r4, r5, r6, lr}
 8008b8a:	69c5      	ldr	r5, [r0, #28]
 8008b8c:	462b      	mov	r3, r5
 8008b8e:	4604      	mov	r4, r0
 8008b90:	f813 2b04 	ldrb.w	r2, [r3], #4
 8008b94:	b962      	cbnz	r2, 8008bb0 <event+0x28>
 8008b96:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8008b98:	6b85      	ldr	r5, [r0, #56]	; 0x38
 8008b9a:	ed90 0a0f 	vldr	s0, [r0, #60]	; 0x3c
 8008b9e:	6812      	ldr	r2, [r2, #0]
 8008ba0:	6900      	ldr	r0, [r0, #16]
 8008ba2:	4619      	mov	r1, r3
 8008ba4:	47a8      	blx	r5
 8008ba6:	6820      	ldr	r0, [r4, #0]
 8008ba8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008bac:	6843      	ldr	r3, [r0, #4]
 8008bae:	4718      	bx	r3
 8008bb0:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8008bb2:	6901      	ldr	r1, [r0, #16]
 8008bb4:	6812      	ldr	r2, [r2, #0]
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f004 fa5c 	bl	800d074 <memcpy>
 8008bbc:	6820      	ldr	r0, [r4, #0]
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	702b      	strb	r3, [r5, #0]
 8008bc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008bc6:	6843      	ldr	r3, [r0, #4]
 8008bc8:	4718      	bx	r3
 8008bca:	bf00      	nop

08008bcc <filter_q3_12_complex>:
 8008bcc:	b530      	push	{r4, r5, lr}
 8008bce:	ed2d 8b02 	vpush	{d8}
 8008bd2:	b083      	sub	sp, #12
 8008bd4:	4604      	mov	r4, r0
 8008bd6:	2007      	movs	r0, #7
 8008bd8:	eeb0 8a40 	vmov.f32	s16, s0
 8008bdc:	4615      	mov	r5, r2
 8008bde:	9101      	str	r1, [sp, #4]
 8008be0:	f7ff f852 	bl	8007c88 <acc_element_sizeof>
 8008be4:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8008c28 <filter_q3_12_complex+0x5c>
 8008be8:	9901      	ldr	r1, [sp, #4]
 8008bea:	fbb5 f3f0 	udiv	r3, r5, r0
 8008bee:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8008bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bf6:	ee28 8a07 	vmul.f32	s16, s16, s14
 8008bfa:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8008bfe:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8008c02:	bfb8      	it	lt
 8008c04:	eeb0 0a67 	vmovlt.f32	s0, s15
 8008c08:	ee38 8a00 	vadd.f32	s16, s16, s0
 8008c0c:	4620      	mov	r0, r4
 8008c0e:	eebd 8ac8 	vcvt.s32.f32	s16, s16
 8008c12:	ee18 2a10 	vmov	r2, s16
 8008c16:	b212      	sxth	r2, r2
 8008c18:	b003      	add	sp, #12
 8008c1a:	ecbd 8b02 	vpop	{d8}
 8008c1e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008c22:	f002 bfab 	b.w	800bb7c <acc_alg_basic_exponential_smoothing_q3_12_complex>
 8008c26:	bf00      	nop
 8008c28:	45800000 	.word	0x45800000

08008c2c <validate>:
 8008c2c:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 8008c30:	429a      	cmp	r2, r3
 8008c32:	b510      	push	{r4, lr}
 8008c34:	d015      	beq.n	8008c62 <validate+0x36>
 8008c36:	6984      	ldr	r4, [r0, #24]
 8008c38:	b13c      	cbz	r4, 8008c4a <validate+0x1e>
 8008c3a:	4b10      	ldr	r3, [pc, #64]	; (8008c7c <validate+0x50>)
 8008c3c:	4a10      	ldr	r2, [pc, #64]	; (8008c80 <validate+0x54>)
 8008c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c40:	4910      	ldr	r1, [pc, #64]	; (8008c84 <validate+0x58>)
 8008c42:	2000      	movs	r0, #0
 8008c44:	4798      	blx	r3
 8008c46:	2000      	movs	r0, #0
 8008c48:	bd10      	pop	{r4, pc}
 8008c4a:	69c2      	ldr	r2, [r0, #28]
 8008c4c:	3204      	adds	r2, #4
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d00f      	beq.n	8008c72 <validate+0x46>
 8008c52:	4b0a      	ldr	r3, [pc, #40]	; (8008c7c <validate+0x50>)
 8008c54:	4a0c      	ldr	r2, [pc, #48]	; (8008c88 <validate+0x5c>)
 8008c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c58:	490a      	ldr	r1, [pc, #40]	; (8008c84 <validate+0x58>)
 8008c5a:	4620      	mov	r0, r4
 8008c5c:	4798      	blx	r3
 8008c5e:	2000      	movs	r0, #0
 8008c60:	bd10      	pop	{r4, pc}
 8008c62:	4b06      	ldr	r3, [pc, #24]	; (8008c7c <validate+0x50>)
 8008c64:	4a09      	ldr	r2, [pc, #36]	; (8008c8c <validate+0x60>)
 8008c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c68:	4906      	ldr	r1, [pc, #24]	; (8008c84 <validate+0x58>)
 8008c6a:	2000      	movs	r0, #0
 8008c6c:	4798      	blx	r3
 8008c6e:	2000      	movs	r0, #0
 8008c70:	bd10      	pop	{r4, pc}
 8008c72:	6800      	ldr	r0, [r0, #0]
 8008c74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c78:	6883      	ldr	r3, [r0, #8]
 8008c7a:	4718      	bx	r3
 8008c7c:	200004c0 	.word	0x200004c0
 8008c80:	0800f52c 	.word	0x0800f52c
 8008c84:	0800f508 	.word	0x0800f508
 8008c88:	0800f54c 	.word	0x0800f54c
 8008c8c:	0800f4dc 	.word	0x0800f4dc

08008c90 <acc_element_time_domain_low_pass_filter_init>:
 8008c90:	b510      	push	{r4, lr}
 8008c92:	4a0c      	ldr	r2, [pc, #48]	; (8008cc4 <acc_element_time_domain_low_pass_filter_init+0x34>)
 8008c94:	4c0c      	ldr	r4, [pc, #48]	; (8008cc8 <acc_element_time_domain_low_pass_filter_init+0x38>)
 8008c96:	4b0d      	ldr	r3, [pc, #52]	; (8008ccc <acc_element_time_domain_low_pass_filter_init+0x3c>)
 8008c98:	60c3      	str	r3, [r0, #12]
 8008c9a:	2907      	cmp	r1, #7
 8008c9c:	e9c0 4201 	strd	r4, r2, [r0, #4]
 8008ca0:	ed80 0a0f 	vstr	s0, [r0, #60]	; 0x3c
 8008ca4:	d103      	bne.n	8008cae <acc_element_time_domain_low_pass_filter_init+0x1e>
 8008ca6:	4b0a      	ldr	r3, [pc, #40]	; (8008cd0 <acc_element_time_domain_low_pass_filter_init+0x40>)
 8008ca8:	6383      	str	r3, [r0, #56]	; 0x38
 8008caa:	2001      	movs	r0, #1
 8008cac:	bd10      	pop	{r4, pc}
 8008cae:	4b09      	ldr	r3, [pc, #36]	; (8008cd4 <acc_element_time_domain_low_pass_filter_init+0x44>)
 8008cb0:	4a09      	ldr	r2, [pc, #36]	; (8008cd8 <acc_element_time_domain_low_pass_filter_init+0x48>)
 8008cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cb4:	4909      	ldr	r1, [pc, #36]	; (8008cdc <acc_element_time_domain_low_pass_filter_init+0x4c>)
 8008cb6:	2400      	movs	r4, #0
 8008cb8:	6384      	str	r4, [r0, #56]	; 0x38
 8008cba:	4620      	mov	r0, r4
 8008cbc:	4798      	blx	r3
 8008cbe:	4620      	mov	r0, r4
 8008cc0:	bd10      	pop	{r4, pc}
 8008cc2:	bf00      	nop
 8008cc4:	08008c2d 	.word	0x08008c2d
 8008cc8:	08008b89 	.word	0x08008b89
 8008ccc:	08008b7d 	.word	0x08008b7d
 8008cd0:	08008bcd 	.word	0x08008bcd
 8008cd4:	200004c0 	.word	0x200004c0
 8008cd8:	0800f2bc 	.word	0x0800f2bc
 8008cdc:	0800f508 	.word	0x0800f508

08008ce0 <acc_element_source_adc_init_radar_engine>:
 8008ce0:	b538      	push	{r3, r4, r5, lr}
 8008ce2:	9d04      	ldr	r5, [sp, #16]
 8008ce4:	4604      	mov	r4, r0
 8008ce6:	4608      	mov	r0, r1
 8008ce8:	63e1      	str	r1, [r4, #60]	; 0x3c
 8008cea:	4611      	mov	r1, r2
 8008cec:	461a      	mov	r2, r3
 8008cee:	462b      	mov	r3, r5
 8008cf0:	f7fe fa56 	bl	80071a0 <acc_sensor_manager_prepare_radar_engine>
 8008cf4:	896b      	ldrh	r3, [r5, #10]
 8008cf6:	8723      	strh	r3, [r4, #56]	; 0x38
 8008cf8:	bd38      	pop	{r3, r4, r5, pc}
 8008cfa:	bf00      	nop

08008cfc <acc_element_source_adc_init>:
 8008cfc:	b510      	push	{r4, lr}
 8008cfe:	b084      	sub	sp, #16
 8008d00:	4604      	mov	r4, r0
 8008d02:	4608      	mov	r0, r1
 8008d04:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8008d08:	9101      	str	r1, [sp, #4]
 8008d0a:	f7fc fbbd 	bl	8005488 <acc_base_configuration_print>
 8008d0e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008d12:	9901      	ldr	r1, [sp, #4]
 8008d14:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8008d16:	b004      	add	sp, #16
 8008d18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d1c:	f7fe ba8c 	b.w	8007238 <acc_sensor_manager_prepare_measurement>

08008d20 <acc_element_source_adc_release>:
 8008d20:	b110      	cbz	r0, 8008d28 <acc_element_source_adc_release+0x8>
 8008d22:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8008d24:	f7fe bb4e 	b.w	80073c4 <acc_sensor_manager_release_measurement>
 8008d28:	4770      	bx	lr
 8008d2a:	bf00      	nop

08008d2c <acc_element_source_adc_reset>:
 8008d2c:	6800      	ldr	r0, [r0, #0]
 8008d2e:	68c3      	ldr	r3, [r0, #12]
 8008d30:	4718      	bx	r3
 8008d32:	bf00      	nop

08008d34 <acc_element_source_adc_validate>:
 8008d34:	6800      	ldr	r0, [r0, #0]
 8008d36:	6883      	ldr	r3, [r0, #8]
 8008d38:	4718      	bx	r3
 8008d3a:	bf00      	nop

08008d3c <acc_element_source_adc_produce>:
 8008d3c:	b530      	push	{r4, r5, lr}
 8008d3e:	4604      	mov	r4, r0
 8008d40:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8008d42:	b083      	sub	sp, #12
 8008d44:	2800      	cmp	r0, #0
 8008d46:	d02f      	beq.n	8008da8 <acc_element_source_adc_produce+0x6c>
 8008d48:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008d4a:	4a19      	ldr	r2, [pc, #100]	; (8008db0 <acc_element_source_adc_produce+0x74>)
 8008d4c:	6a25      	ldr	r5, [r4, #32]
 8008d4e:	601a      	str	r2, [r3, #0]
 8008d50:	f7fe fb4c 	bl	80073ec <acc_sensor_manager_get_sensor_id>
 8008d54:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 8008d56:	6028      	str	r0, [r5, #0]
 8008d58:	6961      	ldr	r1, [r4, #20]
 8008d5a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8008d5c:	ab01      	add	r3, sp, #4
 8008d5e:	f7fe f991 	bl	8007084 <acc_sensor_manager_acquire_adc_data>
 8008d62:	4605      	mov	r5, r0
 8008d64:	b1c0      	cbz	r0, 8008d98 <acc_element_source_adc_produce+0x5c>
 8008d66:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 8008d6a:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8008d6c:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8008d70:	005b      	lsls	r3, r3, #1
 8008d72:	6003      	str	r3, [r0, #0]
 8008d74:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008d76:	7011      	strb	r1, [r2, #0]
 8008d78:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008d7c:	701a      	strb	r2, [r3, #0]
 8008d7e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008d82:	b90b      	cbnz	r3, 8008d88 <acc_element_source_adc_produce+0x4c>
 8008d84:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008d88:	6820      	ldr	r0, [r4, #0]
 8008d8a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8008d8c:	7013      	strb	r3, [r2, #0]
 8008d8e:	6843      	ldr	r3, [r0, #4]
 8008d90:	4798      	blx	r3
 8008d92:	4628      	mov	r0, r5
 8008d94:	b003      	add	sp, #12
 8008d96:	bd30      	pop	{r4, r5, pc}
 8008d98:	4b06      	ldr	r3, [pc, #24]	; (8008db4 <acc_element_source_adc_produce+0x78>)
 8008d9a:	4a07      	ldr	r2, [pc, #28]	; (8008db8 <acc_element_source_adc_produce+0x7c>)
 8008d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d9e:	4907      	ldr	r1, [pc, #28]	; (8008dbc <acc_element_source_adc_produce+0x80>)
 8008da0:	4798      	blx	r3
 8008da2:	4628      	mov	r0, r5
 8008da4:	b003      	add	sp, #12
 8008da6:	bd30      	pop	{r4, r5, pc}
 8008da8:	4605      	mov	r5, r0
 8008daa:	4628      	mov	r0, r5
 8008dac:	b003      	add	sp, #12
 8008dae:	bd30      	pop	{r4, r5, pc}
 8008db0:	51645c3c 	.word	0x51645c3c
 8008db4:	200004c0 	.word	0x200004c0
 8008db8:	0800f574 	.word	0x0800f574
 8008dbc:	0800f594 	.word	0x0800f594

08008dc0 <acc_element_source_adc_inject_data>:
 8008dc0:	b570      	push	{r4, r5, r6, lr}
 8008dc2:	4604      	mov	r4, r0
 8008dc4:	6940      	ldr	r0, [r0, #20]
 8008dc6:	4e08      	ldr	r6, [pc, #32]	; (8008de8 <acc_element_source_adc_inject_data+0x28>)
 8008dc8:	4615      	mov	r5, r2
 8008dca:	f004 f953 	bl	800d074 <memcpy>
 8008dce:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008dd0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008dd2:	6820      	ldr	r0, [r4, #0]
 8008dd4:	6a22      	ldr	r2, [r4, #32]
 8008dd6:	600d      	str	r5, [r1, #0]
 8008dd8:	2100      	movs	r1, #0
 8008dda:	601e      	str	r6, [r3, #0]
 8008ddc:	6843      	ldr	r3, [r0, #4]
 8008dde:	6011      	str	r1, [r2, #0]
 8008de0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008de4:	4718      	bx	r3
 8008de6:	bf00      	nop
 8008de8:	51645c3c 	.word	0x51645c3c

08008dec <acc_cpd_cbank_and_vana_calibration>:
 8008dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008df0:	ed2d 8b02 	vpush	{d8}
 8008df4:	4614      	mov	r4, r2
 8008df6:	b08b      	sub	sp, #44	; 0x2c
 8008df8:	461e      	mov	r6, r3
 8008dfa:	ab09      	add	r3, sp, #36	; 0x24
 8008dfc:	4680      	mov	r8, r0
 8008dfe:	4689      	mov	r9, r1
 8008e00:	460a      	mov	r2, r1
 8008e02:	2500      	movs	r5, #0
 8008e04:	4601      	mov	r1, r0
 8008e06:	6820      	ldr	r0, [r4, #0]
 8008e08:	9300      	str	r3, [sp, #0]
 8008e0a:	ab08      	add	r3, sp, #32
 8008e0c:	e9cd 5508 	strd	r5, r5, [sp, #32]
 8008e10:	9606      	str	r6, [sp, #24]
 8008e12:	f7fe faed 	bl	80073f0 <acc_sensor_protocol_r2_prepare_load>
 8008e16:	2800      	cmp	r0, #0
 8008e18:	f000 808b 	beq.w	8008f32 <acc_cpd_cbank_and_vana_calibration+0x146>
 8008e1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e1e:	461e      	mov	r6, r3
 8008e20:	f5c5 734b 	rsb	r3, r5, #812	; 0x32c
 8008e24:	429e      	cmp	r6, r3
 8008e26:	bf28      	it	cs
 8008e28:	461e      	movcs	r6, r3
 8008e2a:	9f08      	ldr	r7, [sp, #32]
 8008e2c:	f003 fc22 	bl	800c674 <acc_image_a111_r2c_cbank_and_vana_calibration_get>
 8008e30:	ea4f 0a55 	mov.w	sl, r5, lsr #1
 8008e34:	0872      	lsrs	r2, r6, #1
 8008e36:	4639      	mov	r1, r7
 8008e38:	eb00 008a 	add.w	r0, r0, sl, lsl #2
 8008e3c:	f003 fbcc 	bl	800c5d8 <acc_confprogram_copy>
 8008e40:	b2b2      	uxth	r2, r6
 8008e42:	9204      	str	r2, [sp, #16]
 8008e44:	f003 fc1a 	bl	800c67c <acc_image_a111_r2c_cbank_and_vana_calibration_param_table_get>
 8008e48:	6862      	ldr	r2, [r4, #4]
 8008e4a:	9201      	str	r2, [sp, #4]
 8008e4c:	2218      	movs	r2, #24
 8008e4e:	b2a9      	uxth	r1, r5
 8008e50:	4603      	mov	r3, r0
 8008e52:	9200      	str	r2, [sp, #0]
 8008e54:	4638      	mov	r0, r7
 8008e56:	9a04      	ldr	r2, [sp, #16]
 8008e58:	9205      	str	r2, [sp, #20]
 8008e5a:	9104      	str	r1, [sp, #16]
 8008e5c:	f003 face 	bl	800c3fc <acc_confprogram_patch_offset>
 8008e60:	f003 fc0c 	bl	800c67c <acc_image_a111_r2c_cbank_and_vana_calibration_param_table_get>
 8008e64:	68a2      	ldr	r2, [r4, #8]
 8008e66:	9201      	str	r2, [sp, #4]
 8008e68:	2216      	movs	r2, #22
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	9200      	str	r2, [sp, #0]
 8008e6e:	4638      	mov	r0, r7
 8008e70:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8008e74:	f003 fac2 	bl	800c3fc <acc_confprogram_patch_offset>
 8008e78:	f003 fc00 	bl	800c67c <acc_image_a111_r2c_cbank_and_vana_calibration_param_table_get>
 8008e7c:	68e2      	ldr	r2, [r4, #12]
 8008e7e:	9201      	str	r2, [sp, #4]
 8008e80:	2217      	movs	r2, #23
 8008e82:	4603      	mov	r3, r0
 8008e84:	9200      	str	r2, [sp, #0]
 8008e86:	4638      	mov	r0, r7
 8008e88:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8008e8c:	f003 fab6 	bl	800c3fc <acc_confprogram_patch_offset>
 8008e90:	f003 fbf4 	bl	800c67c <acc_image_a111_r2c_cbank_and_vana_calibration_param_table_get>
 8008e94:	f04f 0c15 	mov.w	ip, #21
 8008e98:	4603      	mov	r3, r0
 8008e9a:	8a20      	ldrh	r0, [r4, #16]
 8008e9c:	9001      	str	r0, [sp, #4]
 8008e9e:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8008ea2:	f8cd c000 	str.w	ip, [sp]
 8008ea6:	4638      	mov	r0, r7
 8008ea8:	f003 faa8 	bl	800c3fc <acc_confprogram_patch_offset>
 8008eac:	f003 fbe6 	bl	800c67c <acc_image_a111_r2c_cbank_and_vana_calibration_param_table_get>
 8008eb0:	f04f 0b00 	mov.w	fp, #0
 8008eb4:	f04f 0c10 	mov.w	ip, #16
 8008eb8:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	e9cd bc00 	strd	fp, ip, [sp]
 8008ec2:	4638      	mov	r0, r7
 8008ec4:	f003 fa9a 	bl	800c3fc <acc_confprogram_patch_offset>
 8008ec8:	4633      	mov	r3, r6
 8008eca:	6820      	ldr	r0, [r4, #0]
 8008ecc:	4642      	mov	r2, r8
 8008ece:	fa1f f18a 	uxth.w	r1, sl
 8008ed2:	f7fd ff9d 	bl	8006e10 <acc_sensor_r2_load_confmem>
 8008ed6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008ed8:	4435      	add	r5, r6
 8008eda:	f5b5 7f4b 	cmp.w	r5, #812	; 0x32c
 8008ede:	d39f      	bcc.n	8008e20 <acc_cpd_cbank_and_vana_calibration+0x34>
 8008ee0:	48ba      	ldr	r0, [pc, #744]	; (80091cc <acc_cpd_cbank_and_vana_calibration+0x3e0>)
 8008ee2:	f003 fb87 	bl	800c5f4 <acc_diagnostic_log_set_scope>
 8008ee6:	6821      	ldr	r1, [r4, #0]
 8008ee8:	48b9      	ldr	r0, [pc, #740]	; (80091d0 <acc_cpd_cbank_and_vana_calibration+0x3e4>)
 8008eea:	f003 fba3 	bl	800c634 <acc_diagnostic_log_scalar>
 8008eee:	48b9      	ldr	r0, [pc, #740]	; (80091d4 <acc_cpd_cbank_and_vana_calibration+0x3e8>)
 8008ef0:	2203      	movs	r2, #3
 8008ef2:	4659      	mov	r1, fp
 8008ef4:	f003 fb86 	bl	800c604 <acc_diagnostic_log_declare_parameter>
 8008ef8:	6826      	ldr	r6, [r4, #0]
 8008efa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008efe:	4630      	mov	r0, r6
 8008f00:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8008f04:	f7fe fb52 	bl	80075ac <acc_sensor_protocol_r2_is_sensor_running>
 8008f08:	4605      	mov	r5, r0
 8008f0a:	b1f0      	cbz	r0, 8008f4a <acc_cpd_cbank_and_vana_calibration+0x15e>
 8008f0c:	4db2      	ldr	r5, [pc, #712]	; (80091d8 <acc_cpd_cbank_and_vana_calibration+0x3ec>)
 8008f0e:	4ab3      	ldr	r2, [pc, #716]	; (80091dc <acc_cpd_cbank_and_vana_calibration+0x3f0>)
 8008f10:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 8008f12:	49b3      	ldr	r1, [pc, #716]	; (80091e0 <acc_cpd_cbank_and_vana_calibration+0x3f4>)
 8008f14:	4633      	mov	r3, r6
 8008f16:	4658      	mov	r0, fp
 8008f18:	47a0      	blx	r4
 8008f1a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8008f1c:	4ab1      	ldr	r2, [pc, #708]	; (80091e4 <acc_cpd_cbank_and_vana_calibration+0x3f8>)
 8008f1e:	49b0      	ldr	r1, [pc, #704]	; (80091e0 <acc_cpd_cbank_and_vana_calibration+0x3f4>)
 8008f20:	2000      	movs	r0, #0
 8008f22:	4798      	blx	r3
 8008f24:	2600      	movs	r6, #0
 8008f26:	4630      	mov	r0, r6
 8008f28:	b00b      	add	sp, #44	; 0x2c
 8008f2a:	ecbd 8b02 	vpop	{d8}
 8008f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f32:	4ba9      	ldr	r3, [pc, #676]	; (80091d8 <acc_cpd_cbank_and_vana_calibration+0x3ec>)
 8008f34:	4aac      	ldr	r2, [pc, #688]	; (80091e8 <acc_cpd_cbank_and_vana_calibration+0x3fc>)
 8008f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f38:	49a9      	ldr	r1, [pc, #676]	; (80091e0 <acc_cpd_cbank_and_vana_calibration+0x3f4>)
 8008f3a:	4606      	mov	r6, r0
 8008f3c:	4798      	blx	r3
 8008f3e:	4630      	mov	r0, r6
 8008f40:	b00b      	add	sp, #44	; 0x2c
 8008f42:	ecbd 8b02 	vpop	{d8}
 8008f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f4a:	f003 fb93 	bl	800c674 <acc_image_a111_r2c_cbank_and_vana_calibration_get>
 8008f4e:	9004      	str	r0, [sp, #16]
 8008f50:	f003 fb94 	bl	800c67c <acc_image_a111_r2c_cbank_and_vana_calibration_param_table_get>
 8008f54:	f8df a2b4 	ldr.w	sl, [pc, #692]	; 800920c <acc_cpd_cbank_and_vana_calibration+0x420>
 8008f58:	9904      	ldr	r1, [sp, #16]
 8008f5a:	f8df b278 	ldr.w	fp, [pc, #632]	; 80091d4 <acc_cpd_cbank_and_vana_calibration+0x3e8>
 8008f5e:	2201      	movs	r2, #1
 8008f60:	4603      	mov	r3, r0
 8008f62:	9200      	str	r2, [sp, #0]
 8008f64:	e9cd 5a01 	strd	r5, sl, [sp, #4]
 8008f68:	462a      	mov	r2, r5
 8008f6a:	4630      	mov	r0, r6
 8008f6c:	ee08 8a10 	vmov	s16, r8
 8008f70:	f003 fab8 	bl	800c4e4 <acc_confprogram_live_patch>
 8008f74:	462f      	mov	r7, r5
 8008f76:	9405      	str	r4, [sp, #20]
 8008f78:	462c      	mov	r4, r5
 8008f7a:	4639      	mov	r1, r7
 8008f7c:	4658      	mov	r0, fp
 8008f7e:	f003 fb49 	bl	800c614 <acc_diagnostic_log_set_parameter>
 8008f82:	f003 fb77 	bl	800c674 <acc_image_a111_r2c_cbank_and_vana_calibration_get>
 8008f86:	9004      	str	r0, [sp, #16]
 8008f88:	f003 fb78 	bl	800c67c <acc_image_a111_r2c_cbank_and_vana_calibration_param_table_get>
 8008f8c:	221c      	movs	r2, #28
 8008f8e:	9904      	ldr	r1, [sp, #16]
 8008f90:	9200      	str	r2, [sp, #0]
 8008f92:	4603      	mov	r3, r0
 8008f94:	e9cd 7a01 	strd	r7, sl, [sp, #4]
 8008f98:	4630      	mov	r0, r6
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	f003 faa2 	bl	800c4e4 <acc_confprogram_live_patch>
 8008fa0:	21ef      	movs	r1, #239	; 0xef
 8008fa2:	4630      	mov	r0, r6
 8008fa4:	f7fe fa88 	bl	80074b8 <acc_sensor_protocol_r2_run_program>
 8008fa8:	2800      	cmp	r0, #0
 8008faa:	f000 8131 	beq.w	8009210 <acc_cpd_cbank_and_vana_calibration+0x424>
 8008fae:	2300      	movs	r3, #0
 8008fb0:	2209      	movs	r2, #9
 8008fb2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8008fb6:	4630      	mov	r0, r6
 8008fb8:	f7fe fc02 	bl	80077c0 <acc_sensor_protocol_r2_wait_for_specific_event>
 8008fbc:	b938      	cbnz	r0, 8008fce <acc_cpd_cbank_and_vana_calibration+0x1e2>
 8008fbe:	4d86      	ldr	r5, [pc, #536]	; (80091d8 <acc_cpd_cbank_and_vana_calibration+0x3ec>)
 8008fc0:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 8008fc2:	4a8a      	ldr	r2, [pc, #552]	; (80091ec <acc_cpd_cbank_and_vana_calibration+0x400>)
 8008fc4:	4986      	ldr	r1, [pc, #536]	; (80091e0 <acc_cpd_cbank_and_vana_calibration+0x3f4>)
 8008fc6:	463b      	mov	r3, r7
 8008fc8:	2000      	movs	r0, #0
 8008fca:	47a0      	blx	r4
 8008fcc:	e7a5      	b.n	8008f1a <acc_cpd_cbank_and_vana_calibration+0x12e>
 8008fce:	2110      	movs	r1, #16
 8008fd0:	4648      	mov	r0, r9
 8008fd2:	f7fd ff55 	bl	8006e80 <acc_sensor_r2_buffer_processed_verify_size>
 8008fd6:	b928      	cbnz	r0, 8008fe4 <acc_cpd_cbank_and_vana_calibration+0x1f8>
 8008fd8:	4d7f      	ldr	r5, [pc, #508]	; (80091d8 <acc_cpd_cbank_and_vana_calibration+0x3ec>)
 8008fda:	4a85      	ldr	r2, [pc, #532]	; (80091f0 <acc_cpd_cbank_and_vana_calibration+0x404>)
 8008fdc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8008fde:	4980      	ldr	r1, [pc, #512]	; (80091e0 <acc_cpd_cbank_and_vana_calibration+0x3f4>)
 8008fe0:	4798      	blx	r3
 8008fe2:	e7ed      	b.n	8008fc0 <acc_cpd_cbank_and_vana_calibration+0x1d4>
 8008fe4:	ee18 1a10 	vmov	r1, s16
 8008fe8:	2310      	movs	r3, #16
 8008fea:	2200      	movs	r2, #0
 8008fec:	4630      	mov	r0, r6
 8008fee:	f7fd ff4f 	bl	8006e90 <acc_sensor_r2_buffer_processed_read>
 8008ff2:	2310      	movs	r3, #16
 8008ff4:	4602      	mov	r2, r0
 8008ff6:	4680      	mov	r8, r0
 8008ff8:	4631      	mov	r1, r6
 8008ffa:	2000      	movs	r0, #0
 8008ffc:	f7fe ff14 	bl	8007e28 <acc_probes_execute_uint16>
 8009000:	4630      	mov	r0, r6
 8009002:	f7fe fae5 	bl	80075d0 <acc_sensor_protocol_r2_ack_event>
 8009006:	2800      	cmp	r0, #0
 8009008:	d0d9      	beq.n	8008fbe <acc_cpd_cbank_and_vana_calibration+0x1d2>
 800900a:	2500      	movs	r5, #0
 800900c:	462b      	mov	r3, r5
 800900e:	4642      	mov	r2, r8
 8009010:	f108 0c1e 	add.w	ip, r8, #30
 8009014:	8851      	ldrh	r1, [r2, #2]
 8009016:	f832 0b02 	ldrh.w	r0, [r2], #2
 800901a:	4281      	cmp	r1, r0
 800901c:	440b      	add	r3, r1
 800901e:	bf34      	ite	cc
 8009020:	1a41      	subcc	r1, r0, r1
 8009022:	1a09      	subcs	r1, r1, r0
 8009024:	428d      	cmp	r5, r1
 8009026:	bf38      	it	cc
 8009028:	460d      	movcc	r5, r1
 800902a:	4594      	cmp	ip, r2
 800902c:	d1f2      	bne.n	8009014 <acc_cpd_cbank_and_vana_calibration+0x228>
 800902e:	4871      	ldr	r0, [pc, #452]	; (80091f4 <acc_cpd_cbank_and_vana_calibration+0x408>)
 8009030:	9304      	str	r3, [sp, #16]
 8009032:	4659      	mov	r1, fp
 8009034:	f003 faf6 	bl	800c624 <acc_diagnostic_log_array>
 8009038:	2110      	movs	r1, #16
 800903a:	4640      	mov	r0, r8
 800903c:	f003 fb02 	bl	800c644 <acc_diagnostic_log_data_u16>
 8009040:	f8b8 2000 	ldrh.w	r2, [r8]
 8009044:	9b04      	ldr	r3, [sp, #16]
 8009046:	4413      	add	r3, r2
 8009048:	ea4f 1813 	mov.w	r8, r3, lsr #4
 800904c:	f5a8 43f2 	sub.w	r3, r8, #30976	; 0x7900
 8009050:	3b18      	subs	r3, #24
 8009052:	b29b      	uxth	r3, r3
 8009054:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8009058:	428b      	cmp	r3, r1
 800905a:	d83d      	bhi.n	80090d8 <acc_cpd_cbank_and_vana_calibration+0x2ec>
 800905c:	f5b5 7f48 	cmp.w	r5, #800	; 0x320
 8009060:	d83a      	bhi.n	80090d8 <acc_cpd_cbank_and_vana_calibration+0x2ec>
 8009062:	f8cd 8010 	str.w	r8, [sp, #16]
 8009066:	9c05      	ldr	r4, [sp, #20]
 8009068:	9507      	str	r5, [sp, #28]
 800906a:	f7fc fbd1 	bl	8005810 <acc_rss_integration_log_level>
 800906e:	2803      	cmp	r0, #3
 8009070:	ee18 8a10 	vmov	r8, s16
 8009074:	9a04      	ldr	r2, [sp, #16]
 8009076:	9b07      	ldr	r3, [sp, #28]
 8009078:	d909      	bls.n	800908e <acc_cpd_cbank_and_vana_calibration+0x2a2>
 800907a:	b292      	uxth	r2, r2
 800907c:	4d56      	ldr	r5, [pc, #344]	; (80091d8 <acc_cpd_cbank_and_vana_calibration+0x3ec>)
 800907e:	9301      	str	r3, [sp, #4]
 8009080:	9200      	str	r2, [sp, #0]
 8009082:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 8009084:	4a5c      	ldr	r2, [pc, #368]	; (80091f8 <acc_cpd_cbank_and_vana_calibration+0x40c>)
 8009086:	4956      	ldr	r1, [pc, #344]	; (80091e0 <acc_cpd_cbank_and_vana_calibration+0x3f4>)
 8009088:	4633      	mov	r3, r6
 800908a:	2004      	movs	r0, #4
 800908c:	47a8      	blx	r5
 800908e:	9e06      	ldr	r6, [sp, #24]
 8009090:	7137      	strb	r7, [r6, #4]
 8009092:	6825      	ldr	r5, [r4, #0]
 8009094:	f003 faee 	bl	800c674 <acc_image_a111_r2c_cbank_and_vana_calibration_get>
 8009098:	9004      	str	r0, [sp, #16]
 800909a:	f003 faef 	bl	800c67c <acc_image_a111_r2c_cbank_and_vana_calibration_param_table_get>
 800909e:	7936      	ldrb	r6, [r6, #4]
 80090a0:	9904      	ldr	r1, [sp, #16]
 80090a2:	f8cd a008 	str.w	sl, [sp, #8]
 80090a6:	221c      	movs	r2, #28
 80090a8:	e9cd 2600 	strd	r2, r6, [sp]
 80090ac:	4603      	mov	r3, r0
 80090ae:	2200      	movs	r2, #0
 80090b0:	4628      	mov	r0, r5
 80090b2:	f003 fa17 	bl	800c4e4 <acc_confprogram_live_patch>
 80090b6:	6820      	ldr	r0, [r4, #0]
 80090b8:	2119      	movs	r1, #25
 80090ba:	f7fe f9fd 	bl	80074b8 <acc_sensor_protocol_r2_run_program>
 80090be:	4606      	mov	r6, r0
 80090c0:	bb00      	cbnz	r0, 8009104 <acc_cpd_cbank_and_vana_calibration+0x318>
 80090c2:	4b45      	ldr	r3, [pc, #276]	; (80091d8 <acc_cpd_cbank_and_vana_calibration+0x3ec>)
 80090c4:	4a4d      	ldr	r2, [pc, #308]	; (80091fc <acc_cpd_cbank_and_vana_calibration+0x410>)
 80090c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090c8:	4945      	ldr	r1, [pc, #276]	; (80091e0 <acc_cpd_cbank_and_vana_calibration+0x3f4>)
 80090ca:	4798      	blx	r3
 80090cc:	4630      	mov	r0, r6
 80090ce:	b00b      	add	sp, #44	; 0x2c
 80090d0:	ecbd 8b02 	vpop	{d8}
 80090d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090d8:	f7fc fb9a 	bl	8005810 <acc_rss_integration_log_level>
 80090dc:	2803      	cmp	r0, #3
 80090de:	d90a      	bls.n	80090f6 <acc_cpd_cbank_and_vana_calibration+0x30a>
 80090e0:	fa1f f288 	uxth.w	r2, r8
 80090e4:	e9cd 2500 	strd	r2, r5, [sp]
 80090e8:	4b3b      	ldr	r3, [pc, #236]	; (80091d8 <acc_cpd_cbank_and_vana_calibration+0x3ec>)
 80090ea:	4a43      	ldr	r2, [pc, #268]	; (80091f8 <acc_cpd_cbank_and_vana_calibration+0x40c>)
 80090ec:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 80090ee:	493c      	ldr	r1, [pc, #240]	; (80091e0 <acc_cpd_cbank_and_vana_calibration+0x3f4>)
 80090f0:	4633      	mov	r3, r6
 80090f2:	2004      	movs	r0, #4
 80090f4:	47a8      	blx	r5
 80090f6:	b10c      	cbz	r4, 80090fc <acc_cpd_cbank_and_vana_calibration+0x310>
 80090f8:	4d37      	ldr	r5, [pc, #220]	; (80091d8 <acc_cpd_cbank_and_vana_calibration+0x3ec>)
 80090fa:	e70e      	b.n	8008f1a <acc_cpd_cbank_and_vana_calibration+0x12e>
 80090fc:	f89d 7025 	ldrb.w	r7, [sp, #37]	; 0x25
 8009100:	2401      	movs	r4, #1
 8009102:	e73a      	b.n	8008f7a <acc_cpd_cbank_and_vana_calibration+0x18e>
 8009104:	4648      	mov	r0, r9
 8009106:	2108      	movs	r1, #8
 8009108:	6826      	ldr	r6, [r4, #0]
 800910a:	f7fd feb9 	bl	8006e80 <acc_sensor_r2_buffer_processed_verify_size>
 800910e:	b958      	cbnz	r0, 8009128 <acc_cpd_cbank_and_vana_calibration+0x33c>
 8009110:	4d31      	ldr	r5, [pc, #196]	; (80091d8 <acc_cpd_cbank_and_vana_calibration+0x3ec>)
 8009112:	4a37      	ldr	r2, [pc, #220]	; (80091f0 <acc_cpd_cbank_and_vana_calibration+0x404>)
 8009114:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009116:	4932      	ldr	r1, [pc, #200]	; (80091e0 <acc_cpd_cbank_and_vana_calibration+0x3f4>)
 8009118:	4798      	blx	r3
 800911a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800911c:	4a38      	ldr	r2, [pc, #224]	; (8009200 <acc_cpd_cbank_and_vana_calibration+0x414>)
 800911e:	4930      	ldr	r1, [pc, #192]	; (80091e0 <acc_cpd_cbank_and_vana_calibration+0x3f4>)
 8009120:	2000      	movs	r0, #0
 8009122:	4798      	blx	r3
 8009124:	2600      	movs	r6, #0
 8009126:	e70a      	b.n	8008f3e <acc_cpd_cbank_and_vana_calibration+0x152>
 8009128:	2300      	movs	r3, #0
 800912a:	2203      	movs	r2, #3
 800912c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8009130:	4630      	mov	r0, r6
 8009132:	f7fe fb45 	bl	80077c0 <acc_sensor_protocol_r2_wait_for_specific_event>
 8009136:	2800      	cmp	r0, #0
 8009138:	d046      	beq.n	80091c8 <acc_cpd_cbank_and_vana_calibration+0x3dc>
 800913a:	2408      	movs	r4, #8
 800913c:	4623      	mov	r3, r4
 800913e:	2200      	movs	r2, #0
 8009140:	4641      	mov	r1, r8
 8009142:	4630      	mov	r0, r6
 8009144:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
 8009148:	f7fd fea2 	bl	8006e90 <acc_sensor_r2_buffer_processed_read>
 800914c:	492d      	ldr	r1, [pc, #180]	; (8009204 <acc_cpd_cbank_and_vana_calibration+0x418>)
 800914e:	4605      	mov	r5, r0
 8009150:	482d      	ldr	r0, [pc, #180]	; (8009208 <acc_cpd_cbank_and_vana_calibration+0x41c>)
 8009152:	f003 fa67 	bl	800c624 <acc_diagnostic_log_array>
 8009156:	4621      	mov	r1, r4
 8009158:	4628      	mov	r0, r5
 800915a:	1eac      	subs	r4, r5, #2
 800915c:	f003 fa72 	bl	800c644 <acc_diagnostic_log_data_u16>
 8009160:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8009164:	4620      	mov	r0, r4
 8009166:	2300      	movs	r3, #0
 8009168:	f830 2f02 	ldrh.w	r2, [r0, #2]!
 800916c:	f5d2 4100 	rsbs	r1, r2, #32768	; 0x8000
 8009170:	bf48      	it	mi
 8009172:	f5a2 4100 	submi.w	r1, r2, #32768	; 0x8000
 8009176:	42b9      	cmp	r1, r7
 8009178:	bfb8      	it	lt
 800917a:	f8ad 3024 	strhlt.w	r3, [sp, #36]	; 0x24
 800917e:	f103 0301 	add.w	r3, r3, #1
 8009182:	bfb8      	it	lt
 8009184:	460f      	movlt	r7, r1
 8009186:	2b08      	cmp	r3, #8
 8009188:	d1ee      	bne.n	8009168 <acc_cpd_cbank_and_vana_calibration+0x37c>
 800918a:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 800918e:	4631      	mov	r1, r6
 8009190:	aa09      	add	r2, sp, #36	; 0x24
 8009192:	2301      	movs	r3, #1
 8009194:	f007 0707 	and.w	r7, r7, #7
 8009198:	2006      	movs	r0, #6
 800919a:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 800919e:	f7fe fe43 	bl	8007e28 <acc_probes_execute_uint16>
 80091a2:	4630      	mov	r0, r6
 80091a4:	f7fe fa14 	bl	80075d0 <acc_sensor_protocol_r2_ack_event>
 80091a8:	4606      	mov	r6, r0
 80091aa:	b168      	cbz	r0, 80091c8 <acc_cpd_cbank_and_vana_calibration+0x3dc>
 80091ac:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 80091b0:	2900      	cmp	r1, #0
 80091b2:	d05e      	beq.n	8009272 <acc_cpd_cbank_and_vana_calibration+0x486>
 80091b4:	2300      	movs	r3, #0
 80091b6:	e001      	b.n	80091bc <acc_cpd_cbank_and_vana_calibration+0x3d0>
 80091b8:	428b      	cmp	r3, r1
 80091ba:	d030      	beq.n	800921e <acc_cpd_cbank_and_vana_calibration+0x432>
 80091bc:	f934 2f02 	ldrsh.w	r2, [r4, #2]!
 80091c0:	2a00      	cmp	r2, #0
 80091c2:	f103 0301 	add.w	r3, r3, #1
 80091c6:	daf7      	bge.n	80091b8 <acc_cpd_cbank_and_vana_calibration+0x3cc>
 80091c8:	4d03      	ldr	r5, [pc, #12]	; (80091d8 <acc_cpd_cbank_and_vana_calibration+0x3ec>)
 80091ca:	e7a6      	b.n	800911a <acc_cpd_cbank_and_vana_calibration+0x32e>
 80091cc:	0800f5f0 	.word	0x0800f5f0
 80091d0:	0800f60c 	.word	0x0800f60c
 80091d4:	0800f618 	.word	0x0800f618
 80091d8:	200004c0 	.word	0x200004c0
 80091dc:	0800f624 	.word	0x0800f624
 80091e0:	0800f5ec 	.word	0x0800f5ec
 80091e4:	0800f6ec 	.word	0x0800f6ec
 80091e8:	0800f5a8 	.word	0x0800f5a8
 80091ec:	0800f6c0 	.word	0x0800f6c0
 80091f0:	0800f698 	.word	0x0800f698
 80091f4:	0800f6b0 	.word	0x0800f6b0
 80091f8:	0800f780 	.word	0x0800f780
 80091fc:	0800f704 	.word	0x0800f704
 8009200:	0800f748 	.word	0x0800f748
 8009204:	0800fb18 	.word	0x0800fb18
 8009208:	0800f738 	.word	0x0800f738
 800920c:	08006db5 	.word	0x08006db5
 8009210:	4d19      	ldr	r5, [pc, #100]	; (8009278 <acc_cpd_cbank_and_vana_calibration+0x48c>)
 8009212:	4a1a      	ldr	r2, [pc, #104]	; (800927c <acc_cpd_cbank_and_vana_calibration+0x490>)
 8009214:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 8009216:	491a      	ldr	r1, [pc, #104]	; (8009280 <acc_cpd_cbank_and_vana_calibration+0x494>)
 8009218:	463b      	mov	r3, r7
 800921a:	47a0      	blx	r4
 800921c:	e67d      	b.n	8008f1a <acc_cpd_cbank_and_vana_calibration+0x12e>
 800921e:	1c4b      	adds	r3, r1, #1
 8009220:	2b07      	cmp	r3, #7
 8009222:	dc0c      	bgt.n	800923e <acc_cpd_cbank_and_vana_calibration+0x452>
 8009224:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8009228:	e001      	b.n	800922e <acc_cpd_cbank_and_vana_calibration+0x442>
 800922a:	2b08      	cmp	r3, #8
 800922c:	d007      	beq.n	800923e <acc_cpd_cbank_and_vana_calibration+0x452>
 800922e:	f835 2b02 	ldrh.w	r2, [r5], #2
 8009232:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8009236:	f103 0301 	add.w	r3, r3, #1
 800923a:	d8f6      	bhi.n	800922a <acc_cpd_cbank_and_vana_calibration+0x43e>
 800923c:	e7c4      	b.n	80091c8 <acc_cpd_cbank_and_vana_calibration+0x3dc>
 800923e:	9b06      	ldr	r3, [sp, #24]
 8009240:	6019      	str	r1, [r3, #0]
 8009242:	f7fc fae5 	bl	8005810 <acc_rss_integration_log_level>
 8009246:	2801      	cmp	r0, #1
 8009248:	d909      	bls.n	800925e <acc_cpd_cbank_and_vana_calibration+0x472>
 800924a:	9906      	ldr	r1, [sp, #24]
 800924c:	4a0a      	ldr	r2, [pc, #40]	; (8009278 <acc_cpd_cbank_and_vana_calibration+0x48c>)
 800924e:	790b      	ldrb	r3, [r1, #4]
 8009250:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8009252:	9300      	str	r3, [sp, #0]
 8009254:	680b      	ldr	r3, [r1, #0]
 8009256:	4a0b      	ldr	r2, [pc, #44]	; (8009284 <acc_cpd_cbank_and_vana_calibration+0x498>)
 8009258:	4909      	ldr	r1, [pc, #36]	; (8009280 <acc_cpd_cbank_and_vana_calibration+0x494>)
 800925a:	2002      	movs	r0, #2
 800925c:	47a0      	blx	r4
 800925e:	9c06      	ldr	r4, [sp, #24]
 8009260:	4809      	ldr	r0, [pc, #36]	; (8009288 <acc_cpd_cbank_and_vana_calibration+0x49c>)
 8009262:	6821      	ldr	r1, [r4, #0]
 8009264:	f003 f9e6 	bl	800c634 <acc_diagnostic_log_scalar>
 8009268:	7921      	ldrb	r1, [r4, #4]
 800926a:	4808      	ldr	r0, [pc, #32]	; (800928c <acc_cpd_cbank_and_vana_calibration+0x4a0>)
 800926c:	f003 f9e2 	bl	800c634 <acc_diagnostic_log_scalar>
 8009270:	e665      	b.n	8008f3e <acc_cpd_cbank_and_vana_calibration+0x152>
 8009272:	2301      	movs	r3, #1
 8009274:	e7d6      	b.n	8009224 <acc_cpd_cbank_and_vana_calibration+0x438>
 8009276:	bf00      	nop
 8009278:	200004c0 	.word	0x200004c0
 800927c:	0800f658 	.word	0x0800f658
 8009280:	0800f5ec 	.word	0x0800f5ec
 8009284:	0800f760 	.word	0x0800f760
 8009288:	0800f774 	.word	0x0800f774
 800928c:	0800f618 	.word	0x0800f618

08009290 <acc_cpd_dll_calibration>:
 8009290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009294:	ed2d 8b0a 	vpush	{d8-d12}
 8009298:	b0c7      	sub	sp, #284	; 0x11c
 800929a:	461d      	mov	r5, r3
 800929c:	9309      	str	r3, [sp, #36]	; 0x24
 800929e:	2400      	movs	r4, #0
 80092a0:	4b63      	ldr	r3, [pc, #396]	; (8009430 <acc_cpd_dll_calibration+0x1a0>)
 80092a2:	61eb      	str	r3, [r5, #28]
 80092a4:	f5b1 7f45 	cmp.w	r1, #788	; 0x314
 80092a8:	ee0b 0a90 	vmov	s23, r0
 80092ac:	4693      	mov	fp, r2
 80092ae:	766c      	strb	r4, [r5, #25]
 80092b0:	f0c0 8479 	bcc.w	8009ba6 <acc_cpd_dll_calibration+0x916>
 80092b4:	f5a1 7316 	sub.w	r3, r1, #600	; 0x258
 80092b8:	f023 0301 	bic.w	r3, r3, #1
 80092bc:	f5a1 7145 	sub.w	r1, r1, #788	; 0x314
 80092c0:	f021 0201 	bic.w	r2, r1, #1
 80092c4:	18c3      	adds	r3, r0, r3
 80092c6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80092ca:	ee0c 1a10 	vmov	s24, r1
 80092ce:	9312      	str	r3, [sp, #72]	; 0x48
 80092d0:	eb00 0a02 	add.w	sl, r0, r2
 80092d4:	f0c0 8085 	bcc.w	80093e2 <acc_cpd_dll_calibration+0x152>
 80092d8:	4856      	ldr	r0, [pc, #344]	; (8009434 <acc_cpd_dll_calibration+0x1a4>)
 80092da:	ed9f 9a57 	vldr	s18, [pc, #348]	; 8009438 <acc_cpd_dll_calibration+0x1a8>
 80092de:	eddf 8a57 	vldr	s17, [pc, #348]	; 800943c <acc_cpd_dll_calibration+0x1ac>
 80092e2:	f003 f987 	bl	800c5f4 <acc_diagnostic_log_set_scope>
 80092e6:	f8db 1000 	ldr.w	r1, [fp]
 80092ea:	4855      	ldr	r0, [pc, #340]	; (8009440 <acc_cpd_dll_calibration+0x1b0>)
 80092ec:	f003 f9a2 	bl	800c634 <acc_diagnostic_log_scalar>
 80092f0:	4854      	ldr	r0, [pc, #336]	; (8009444 <acc_cpd_dll_calibration+0x1b4>)
 80092f2:	2202      	movs	r2, #2
 80092f4:	2101      	movs	r1, #1
 80092f6:	f003 f985 	bl	800c604 <acc_diagnostic_log_declare_parameter>
 80092fa:	4853      	ldr	r0, [pc, #332]	; (8009448 <acc_cpd_dll_calibration+0x1b8>)
 80092fc:	221f      	movs	r2, #31
 80092fe:	2100      	movs	r1, #0
 8009300:	f003 f980 	bl	800c604 <acc_diagnostic_log_declare_parameter>
 8009304:	4851      	ldr	r0, [pc, #324]	; (800944c <acc_cpd_dll_calibration+0x1bc>)
 8009306:	227b      	movs	r2, #123	; 0x7b
 8009308:	2100      	movs	r1, #0
 800930a:	f003 f97b 	bl	800c604 <acc_diagnostic_log_declare_parameter>
 800930e:	2302      	movs	r3, #2
 8009310:	461c      	mov	r4, r3
 8009312:	484f      	ldr	r0, [pc, #316]	; (8009450 <acc_cpd_dll_calibration+0x1c0>)
 8009314:	9319      	str	r3, [sp, #100]	; 0x64
 8009316:	220b      	movs	r2, #11
 8009318:	2100      	movs	r1, #0
 800931a:	f003 f973 	bl	800c604 <acc_diagnostic_log_declare_parameter>
 800931e:	46d1      	mov	r9, sl
 8009320:	940e      	str	r4, [sp, #56]	; 0x38
 8009322:	46da      	mov	sl, fp
 8009324:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009326:	4847      	ldr	r0, [pc, #284]	; (8009444 <acc_cpd_dll_calibration+0x1b4>)
 8009328:	ed9f 8a4a 	vldr	s16, [pc, #296]	; 8009454 <acc_cpd_dll_calibration+0x1c4>
 800932c:	f003 f972 	bl	800c614 <acc_diagnostic_log_set_parameter>
 8009330:	ab20      	add	r3, sp, #128	; 0x80
 8009332:	464c      	mov	r4, r9
 8009334:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8009336:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8009338:	ee1c ba10 	vmov	fp, s24
 800933c:	ee1b 9a90 	vmov	r9, s23
 8009340:	2500      	movs	r5, #0
 8009342:	4698      	mov	r8, r3
 8009344:	e023      	b.n	800938e <acc_cpd_dll_calibration+0xfe>
 8009346:	f837 3b32 	ldrh.w	r3, [r7], #50
 800934a:	ee07 3a10 	vmov	s14, r3
 800934e:	4b42      	ldr	r3, [pc, #264]	; (8009458 <acc_cpd_dll_calibration+0x1c8>)
 8009350:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8009354:	f833 2016 	ldrh.w	r2, [r3, r6, lsl #1]
 8009358:	4b40      	ldr	r3, [pc, #256]	; (800945c <acc_cpd_dll_calibration+0x1cc>)
 800935a:	ee27 7a09 	vmul.f32	s14, s14, s18
 800935e:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 8009362:	ee37 7a66 	vsub.f32	s14, s14, s13
 8009366:	1ad3      	subs	r3, r2, r3
 8009368:	b21b      	sxth	r3, r3
 800936a:	ee07 3a90 	vmov	s15, r3
 800936e:	ee27 7a28 	vmul.f32	s14, s14, s17
 8009372:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009376:	ee27 7a08 	vmul.f32	s14, s14, s16
 800937a:	2d0c      	cmp	r5, #12
 800937c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009380:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009384:	ee17 3a90 	vmov	r3, s15
 8009388:	f828 3b02 	strh.w	r3, [r8], #2
 800938c:	d035      	beq.n	80093fa <acc_cpd_dll_calibration+0x16a>
 800938e:	4629      	mov	r1, r5
 8009390:	482f      	ldr	r0, [pc, #188]	; (8009450 <acc_cpd_dll_calibration+0x1c0>)
 8009392:	f003 f93f 	bl	800c614 <acc_diagnostic_log_set_parameter>
 8009396:	e9da 1200 	ldrd	r1, r2, [sl]
 800939a:	e9da 3002 	ldrd	r3, r0, [sl, #8]
 800939e:	9139      	str	r1, [sp, #228]	; 0xe4
 80093a0:	e9cd 303b 	strd	r3, r0, [sp, #236]	; 0xec
 80093a4:	f8da 1014 	ldr.w	r1, [sl, #20]
 80093a8:	f8da 0018 	ldr.w	r0, [sl, #24]
 80093ac:	f8ba c010 	ldrh.w	ip, [sl, #16]
 80093b0:	923a      	str	r2, [sp, #232]	; 0xe8
 80093b2:	9140      	str	r1, [sp, #256]	; 0x100
 80093b4:	9041      	str	r0, [sp, #260]	; 0x104
 80093b6:	463b      	mov	r3, r7
 80093b8:	aa39      	add	r2, sp, #228	; 0xe4
 80093ba:	4659      	mov	r1, fp
 80093bc:	4648      	mov	r0, r9
 80093be:	e9cd 653e 	strd	r6, r5, [sp, #248]	; 0xf8
 80093c2:	f8ad c0f4 	strh.w	ip, [sp, #244]	; 0xf4
 80093c6:	f001 fe85 	bl	800b0d4 <acc_cpd_rx_fine_dip_calibration>
 80093ca:	3501      	adds	r5, #1
 80093cc:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80093d0:	2800      	cmp	r0, #0
 80093d2:	d1b8      	bne.n	8009346 <acc_cpd_dll_calibration+0xb6>
 80093d4:	4604      	mov	r4, r0
 80093d6:	4620      	mov	r0, r4
 80093d8:	b047      	add	sp, #284	; 0x11c
 80093da:	ecbd 8b0a 	vpop	{d8-d12}
 80093de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093e2:	f7fc fa15 	bl	8005810 <acc_rss_integration_log_level>
 80093e6:	2801      	cmp	r0, #1
 80093e8:	f67f af76 	bls.w	80092d8 <acc_cpd_dll_calibration+0x48>
 80093ec:	4b1c      	ldr	r3, [pc, #112]	; (8009460 <acc_cpd_dll_calibration+0x1d0>)
 80093ee:	4a1d      	ldr	r2, [pc, #116]	; (8009464 <acc_cpd_dll_calibration+0x1d4>)
 80093f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093f2:	491d      	ldr	r1, [pc, #116]	; (8009468 <acc_cpd_dll_calibration+0x1d8>)
 80093f4:	2002      	movs	r0, #2
 80093f6:	4798      	blx	r3
 80093f8:	e76e      	b.n	80092d8 <acc_cpd_dll_calibration+0x48>
 80093fa:	491c      	ldr	r1, [pc, #112]	; (800946c <acc_cpd_dll_calibration+0x1dc>)
 80093fc:	481c      	ldr	r0, [pc, #112]	; (8009470 <acc_cpd_dll_calibration+0x1e0>)
 80093fe:	f003 f911 	bl	800c624 <acc_diagnostic_log_array>
 8009402:	4629      	mov	r1, r5
 8009404:	a820      	add	r0, sp, #128	; 0x80
 8009406:	f003 f91d 	bl	800c644 <acc_diagnostic_log_data_u16>
 800940a:	aa1d      	add	r2, sp, #116	; 0x74
 800940c:	a920      	add	r1, sp, #128	; 0x80
 800940e:	4628      	mov	r0, r5
 8009410:	f000 fd66 	bl	8009ee0 <acc_dll_dly_coarse_priority_sort>
 8009414:	4915      	ldr	r1, [pc, #84]	; (800946c <acc_cpd_dll_calibration+0x1dc>)
 8009416:	4817      	ldr	r0, [pc, #92]	; (8009474 <acc_cpd_dll_calibration+0x1e4>)
 8009418:	f003 f904 	bl	800c624 <acc_diagnostic_log_array>
 800941c:	4629      	mov	r1, r5
 800941e:	a81d      	add	r0, sp, #116	; 0x74
 8009420:	f003 f920 	bl	800c664 <acc_diagnostic_log_data_u8>
 8009424:	ab1d      	add	r3, sp, #116	; 0x74
 8009426:	930d      	str	r3, [sp, #52]	; 0x34
 8009428:	4653      	mov	r3, sl
 800942a:	4699      	mov	r9, r3
 800942c:	46a2      	mov	sl, r4
 800942e:	e075      	b.n	800951c <acc_cpd_dll_calibration+0x28c>
 8009430:	ff800000 	.word	0xff800000
 8009434:	0800f7f0 	.word	0x0800f7f0
 8009438:	37800000 	.word	0x37800000
 800943c:	3f99999a 	.word	0x3f99999a
 8009440:	0800f60c 	.word	0x0800f60c
 8009444:	0800f800 	.word	0x0800f800
 8009448:	0800f80c 	.word	0x0800f80c
 800944c:	0800f818 	.word	0x0800f818
 8009450:	0800f824 	.word	0x0800f824
 8009454:	447a0000 	.word	0x447a0000
 8009458:	08013898 	.word	0x08013898
 800945c:	08013890 	.word	0x08013890
 8009460:	200004c0 	.word	0x200004c0
 8009464:	0800f7c4 	.word	0x0800f7c4
 8009468:	0800f7b0 	.word	0x0800f7b0
 800946c:	0800f830 	.word	0x0800f830
 8009470:	0800f848 	.word	0x0800f848
 8009474:	0800f85c 	.word	0x0800f85c
 8009478:	f5a2 7243 	sub.w	r2, r2, #780	; 0x30c
 800947c:	f5b2 7fe6 	cmp.w	r2, #460	; 0x1cc
 8009480:	f200 82eb 	bhi.w	8009a5a <acc_cpd_dll_calibration+0x7ca>
 8009484:	f9bd 206e 	ldrsh.w	r2, [sp, #110]	; 0x6e
 8009488:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800948a:	1a9b      	subs	r3, r3, r2
 800948c:	b21b      	sxth	r3, r3
 800948e:	2b00      	cmp	r3, #0
 8009490:	bfb8      	it	lt
 8009492:	425b      	neglt	r3, r3
 8009494:	b21b      	sxth	r3, r3
 8009496:	2b64      	cmp	r3, #100	; 0x64
 8009498:	f300 82df 	bgt.w	8009a5a <acc_cpd_dll_calibration+0x7ca>
 800949c:	ee18 3a10 	vmov	r3, s16
 80094a0:	4293      	cmp	r3, r2
 80094a2:	f2c0 82da 	blt.w	8009a5a <acc_cpd_dll_calibration+0x7ca>
 80094a6:	49d4      	ldr	r1, [pc, #848]	; (80097f8 <acc_cpd_dll_calibration+0x568>)
 80094a8:	48d4      	ldr	r0, [pc, #848]	; (80097fc <acc_cpd_dll_calibration+0x56c>)
 80094aa:	f003 f8bb 	bl	800c624 <acc_diagnostic_log_array>
 80094ae:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80094b0:	4628      	mov	r0, r5
 80094b2:	4621      	mov	r1, r4
 80094b4:	f003 f8c6 	bl	800c644 <acc_diagnostic_log_data_u16>
 80094b8:	4621      	mov	r1, r4
 80094ba:	4628      	mov	r0, r5
 80094bc:	f000 fc76 	bl	8009dac <acc_dll_check_direct_leakage>
 80094c0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80094c4:	4604      	mov	r4, r0
 80094c6:	4658      	mov	r0, fp
 80094c8:	f7fe f9a8 	bl	800781c <acc_sensor_protocol_r2_stop>
 80094cc:	2c00      	cmp	r4, #0
 80094ce:	f040 840f 	bne.w	8009cf0 <acc_cpd_dll_calibration+0xa60>
 80094d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80094d4:	2b01      	cmp	r3, #1
 80094d6:	f04f 0100 	mov.w	r1, #0
 80094da:	f040 82e5 	bne.w	8009aa8 <acc_cpd_dll_calibration+0x818>
 80094de:	f7fc f997 	bl	8005810 <acc_rss_integration_log_level>
 80094e2:	2803      	cmp	r0, #3
 80094e4:	d908      	bls.n	80094f8 <acc_cpd_dll_calibration+0x268>
 80094e6:	4bc6      	ldr	r3, [pc, #792]	; (8009800 <acc_cpd_dll_calibration+0x570>)
 80094e8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80094ea:	9200      	str	r2, [sp, #0]
 80094ec:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 80094ee:	4ac5      	ldr	r2, [pc, #788]	; (8009804 <acc_cpd_dll_calibration+0x574>)
 80094f0:	49c5      	ldr	r1, [pc, #788]	; (8009808 <acc_cpd_dll_calibration+0x578>)
 80094f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80094f4:	2004      	movs	r0, #4
 80094f6:	47a0      	blx	r4
 80094f8:	f7fc f98a 	bl	8005810 <acc_rss_integration_log_level>
 80094fc:	2803      	cmp	r0, #3
 80094fe:	d908      	bls.n	8009512 <acc_cpd_dll_calibration+0x282>
 8009500:	4bbf      	ldr	r3, [pc, #764]	; (8009800 <acc_cpd_dll_calibration+0x570>)
 8009502:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009504:	9200      	str	r2, [sp, #0]
 8009506:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8009508:	4ac0      	ldr	r2, [pc, #768]	; (800980c <acc_cpd_dll_calibration+0x57c>)
 800950a:	49bf      	ldr	r1, [pc, #764]	; (8009808 <acc_cpd_dll_calibration+0x578>)
 800950c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800950e:	2004      	movs	r0, #4
 8009510:	47a0      	blx	r4
 8009512:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009514:	aa20      	add	r2, sp, #128	; 0x80
 8009516:	429a      	cmp	r2, r3
 8009518:	f000 8332 	beq.w	8009b80 <acc_cpd_dll_calibration+0x8f0>
 800951c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800951e:	48bc      	ldr	r0, [pc, #752]	; (8009810 <acc_cpd_dll_calibration+0x580>)
 8009520:	f812 3b01 	ldrb.w	r3, [r2], #1
 8009524:	9311      	str	r3, [sp, #68]	; 0x44
 8009526:	461c      	mov	r4, r3
 8009528:	4619      	mov	r1, r3
 800952a:	920d      	str	r2, [sp, #52]	; 0x34
 800952c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8009530:	f003 f870 	bl	800c614 <acc_diagnostic_log_set_parameter>
 8009534:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8009536:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800953a:	eb06 0544 	add.w	r5, r6, r4, lsl #1
 800953e:	4629      	mov	r1, r5
 8009540:	ab2c      	add	r3, sp, #176	; 0xb0
 8009542:	aa39      	add	r2, sp, #228	; 0xe4
 8009544:	2019      	movs	r0, #25
 8009546:	f000 fd8f 	bl	800a068 <acc_dll_plateau_finder>
 800954a:	9016      	str	r0, [sp, #88]	; 0x58
 800954c:	2800      	cmp	r0, #0
 800954e:	d0d3      	beq.n	80094f8 <acc_cpd_dll_calibration+0x268>
 8009550:	f836 3014 	ldrh.w	r3, [r6, r4, lsl #1]
 8009554:	49af      	ldr	r1, [pc, #700]	; (8009814 <acc_cpd_dll_calibration+0x584>)
 8009556:	eddf 6abc 	vldr	s13, [pc, #752]	; 8009848 <acc_cpd_dll_calibration+0x5b8>
 800955a:	ee07 3a10 	vmov	s14, r3
 800955e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009560:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8009564:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8009568:	49ab      	ldr	r1, [pc, #684]	; (8009818 <acc_cpd_dll_calibration+0x588>)
 800956a:	ee27 7a09 	vmul.f32	s14, s14, s18
 800956e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8009572:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8009576:	1ad3      	subs	r3, r2, r3
 8009578:	ee37 7a46 	vsub.f32	s14, s14, s12
 800957c:	b21b      	sxth	r3, r3
 800957e:	ee07 3a90 	vmov	s15, r3
 8009582:	ee27 7a28 	vmul.f32	s14, s14, s17
 8009586:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800958a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800958e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009592:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009596:	ee17 3a90 	vmov	r3, s15
 800959a:	b21a      	sxth	r2, r3
 800959c:	f5a2 7343 	sub.w	r3, r2, #780	; 0x30c
 80095a0:	b29b      	uxth	r3, r3
 80095a2:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 80095a6:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
 80095aa:	f200 82dd 	bhi.w	8009b68 <acc_cpd_dll_calibration+0x8d8>
 80095ae:	f8bd 40e4 	ldrh.w	r4, [sp, #228]	; 0xe4
 80095b2:	4b9a      	ldr	r3, [pc, #616]	; (800981c <acc_cpd_dll_calibration+0x58c>)
 80095b4:	a946      	add	r1, sp, #280	; 0x118
 80095b6:	eb01 0144 	add.w	r1, r1, r4, lsl #1
 80095ba:	ee07 2a90 	vmov	s15, r2
 80095be:	f831 6c68 	ldrh.w	r6, [r1, #-104]
 80095c2:	9613      	str	r6, [sp, #76]	; 0x4c
 80095c4:	4632      	mov	r2, r6
 80095c6:	fba3 2302 	umull	r2, r3, r3, r2
 80095ca:	f3c3 0387 	ubfx	r3, r3, #2, #8
 80095ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80095d2:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
 80095d6:	ee07 3a90 	vmov	s15, r3
 80095da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095de:	ee67 7a89 	vmul.f32	s15, s15, s18
 80095e2:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80095e6:	ee67 7aa8 	vmul.f32	s15, s15, s17
 80095ea:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80095ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80095f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80095f6:	ee17 3a90 	vmov	r3, s15
 80095fa:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
 80095fe:	f7fc f907 	bl	8005810 <acc_rss_integration_log_level>
 8009602:	2803      	cmp	r0, #3
 8009604:	d907      	bls.n	8009616 <acc_cpd_dll_calibration+0x386>
 8009606:	4a7e      	ldr	r2, [pc, #504]	; (8009800 <acc_cpd_dll_calibration+0x570>)
 8009608:	9600      	str	r6, [sp, #0]
 800960a:	4623      	mov	r3, r4
 800960c:	497e      	ldr	r1, [pc, #504]	; (8009808 <acc_cpd_dll_calibration+0x578>)
 800960e:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8009610:	4a83      	ldr	r2, [pc, #524]	; (8009820 <acc_cpd_dll_calibration+0x590>)
 8009612:	2004      	movs	r0, #4
 8009614:	47a0      	blx	r4
 8009616:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009618:	4882      	ldr	r0, [pc, #520]	; (8009824 <acc_cpd_dll_calibration+0x594>)
 800961a:	f002 fffb 	bl	800c614 <acc_diagnostic_log_set_parameter>
 800961e:	4982      	ldr	r1, [pc, #520]	; (8009828 <acc_cpd_dll_calibration+0x598>)
 8009620:	4882      	ldr	r0, [pc, #520]	; (800982c <acc_cpd_dll_calibration+0x59c>)
 8009622:	f002 ffff 	bl	800c624 <acc_diagnostic_log_array>
 8009626:	2101      	movs	r1, #1
 8009628:	f10d 006a 	add.w	r0, sp, #106	; 0x6a
 800962c:	f003 f812 	bl	800c654 <acc_diagnostic_log_data_i16>
 8009630:	497d      	ldr	r1, [pc, #500]	; (8009828 <acc_cpd_dll_calibration+0x598>)
 8009632:	487f      	ldr	r0, [pc, #508]	; (8009830 <acc_cpd_dll_calibration+0x5a0>)
 8009634:	f002 fff6 	bl	800c624 <acc_diagnostic_log_array>
 8009638:	2101      	movs	r1, #1
 800963a:	a81a      	add	r0, sp, #104	; 0x68
 800963c:	f003 f80a 	bl	800c654 <acc_diagnostic_log_data_i16>
 8009640:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
 8009644:	f2a3 431a 	subw	r3, r3, #1050	; 0x41a
 8009648:	b29b      	uxth	r3, r3
 800964a:	2bc8      	cmp	r3, #200	; 0xc8
 800964c:	f200 8330 	bhi.w	8009cb0 <acc_cpd_dll_calibration+0xa20>
 8009650:	2302      	movs	r3, #2
 8009652:	9315      	str	r3, [sp, #84]	; 0x54
 8009654:	211b      	movs	r1, #27
 8009656:	b28b      	uxth	r3, r1
 8009658:	461c      	mov	r4, r3
 800965a:	4876      	ldr	r0, [pc, #472]	; (8009834 <acc_cpd_dll_calibration+0x5a4>)
 800965c:	9318      	str	r3, [sp, #96]	; 0x60
 800965e:	f002 ffd9 	bl	800c614 <acc_diagnostic_log_set_parameter>
 8009662:	4620      	mov	r0, r4
 8009664:	aa26      	add	r2, sp, #152	; 0x98
 8009666:	217c      	movs	r1, #124	; 0x7c
 8009668:	f7fe fd7a 	bl	8008160 <acc_dll_calculate_area_settings>
 800966c:	f899 301c 	ldrb.w	r3, [r9, #28]
 8009670:	2b00      	cmp	r3, #0
 8009672:	f000 8274 	beq.w	8009b5e <acc_cpd_dll_calibration+0x8ce>
 8009676:	f899 301d 	ldrb.w	r3, [r9, #29]
 800967a:	f083 0301 	eor.w	r3, r3, #1
 800967e:	f8b9 2010 	ldrh.w	r2, [r9, #16]
 8009682:	f8d9 100c 	ldr.w	r1, [r9, #12]
 8009686:	f8bd b0ac 	ldrh.w	fp, [sp, #172]	; 0xac
 800968a:	f8bd c098 	ldrh.w	ip, [sp, #152]	; 0x98
 800968e:	f8bd 709a 	ldrh.w	r7, [sp, #154]	; 0x9a
 8009692:	f8bd 609e 	ldrh.w	r6, [sp, #158]	; 0x9e
 8009696:	f8bd 50a0 	ldrh.w	r5, [sp, #160]	; 0xa0
 800969a:	e9d9 4001 	ldrd	r4, r0, [r9, #4]
 800969e:	e9d9 8e05 	ldrd	r8, lr, [r9, #20]
 80096a2:	f8aa 200c 	strh.w	r2, [sl, #12]
 80096a6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80096a8:	f8ca 2018 	str.w	r2, [sl, #24]
 80096ac:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80096ae:	f8ca 1008 	str.w	r1, [sl, #8]
 80096b2:	f8ca 201c 	str.w	r2, [sl, #28]
 80096b6:	f8bd 10aa 	ldrh.w	r1, [sp, #170]	; 0xaa
 80096ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80096bc:	f8ca 4000 	str.w	r4, [sl]
 80096c0:	e9ca 8e04 	strd	r8, lr, [sl, #16]
 80096c4:	f8bd 40a4 	ldrh.w	r4, [sp, #164]	; 0xa4
 80096c8:	f8ca 0004 	str.w	r0, [sl, #4]
 80096cc:	f04f 0e01 	mov.w	lr, #1
 80096d0:	f8bd 00a6 	ldrh.w	r0, [sp, #166]	; 0xa6
 80096d4:	f8ca 2020 	str.w	r2, [sl, #32]
 80096d8:	2200      	movs	r2, #0
 80096da:	f8ca c028 	str.w	ip, [sl, #40]	; 0x28
 80096de:	f8ca 702c 	str.w	r7, [sl, #44]	; 0x2c
 80096e2:	f04f 0c06 	mov.w	ip, #6
 80096e6:	2703      	movs	r7, #3
 80096e8:	f8ca 6030 	str.w	r6, [sl, #48]	; 0x30
 80096ec:	f8ca 5034 	str.w	r5, [sl, #52]	; 0x34
 80096f0:	f06f 0601 	mvn.w	r6, #1
 80096f4:	f8ca 4038 	str.w	r4, [sl, #56]	; 0x38
 80096f8:	f8ca 003c 	str.w	r0, [sl, #60]	; 0x3c
 80096fc:	240f      	movs	r4, #15
 80096fe:	e9ca 1b10 	strd	r1, fp, [sl, #64]	; 0x40
 8009702:	2007      	movs	r0, #7
 8009704:	e9ca 2e12 	strd	r2, lr, [sl, #72]	; 0x48
 8009708:	e9ca e216 	strd	lr, r2, [sl, #88]	; 0x58
 800970c:	e9ca 2214 	strd	r2, r2, [sl, #80]	; 0x50
 8009710:	e9ca 2218 	strd	r2, r2, [sl, #96]	; 0x60
 8009714:	e9ca 2227 	strd	r2, r2, [sl, #156]	; 0x9c
 8009718:	f8ca 2068 	str.w	r2, [sl, #104]	; 0x68
 800971c:	f8ca 2078 	str.w	r2, [sl, #120]	; 0x78
 8009720:	f8ca 2084 	str.w	r2, [sl, #132]	; 0x84
 8009724:	f8aa 208c 	strh.w	r2, [sl, #140]	; 0x8c
 8009728:	2516      	movs	r5, #22
 800972a:	2200      	movs	r2, #0
 800972c:	e9ca c724 	strd	ip, r7, [sl, #144]	; 0x90
 8009730:	e9ca ee1c 	strd	lr, lr, [sl, #112]	; 0x70
 8009734:	e9ca 541f 	strd	r5, r4, [sl, #124]	; 0x7c
 8009738:	f8ca e0a4 	str.w	lr, [sl, #164]	; 0xa4
 800973c:	f8ca 20a8 	str.w	r2, [sl, #168]	; 0xa8
 8009740:	f88a e0ad 	strb.w	lr, [sl, #173]	; 0xad
 8009744:	f8ca 306c 	str.w	r3, [sl, #108]	; 0x6c
 8009748:	f8ca 6098 	str.w	r6, [sl, #152]	; 0x98
 800974c:	f8ca 0088 	str.w	r0, [sl, #136]	; 0x88
 8009750:	f7fb ffae 	bl	80056b0 <acc_rss_integration_get_sensor_reference_frequency>
 8009754:	f8b9 301e 	ldrh.w	r3, [r9, #30]
 8009758:	f899 201c 	ldrb.w	r2, [r9, #28]
 800975c:	ed8a 0a2c 	vstr	s0, [sl, #176]	; 0xb0
 8009760:	3b01      	subs	r3, #1
 8009762:	e9ca 232d 	strd	r2, r3, [sl, #180]	; 0xb4
 8009766:	f9bd 3068 	ldrsh.w	r3, [sp, #104]	; 0x68
 800976a:	930f      	str	r3, [sp, #60]	; 0x3c
 800976c:	f04f 0100 	mov.w	r1, #0
 8009770:	f9bd 306a 	ldrsh.w	r3, [sp, #106]	; 0x6a
 8009774:	f88a 10ac 	strb.w	r1, [sl, #172]	; 0xac
 8009778:	9314      	str	r3, [sp, #80]	; 0x50
 800977a:	a926      	add	r1, sp, #152	; 0x98
 800977c:	f89a 308c 	ldrb.w	r3, [sl, #140]	; 0x8c
 8009780:	9308      	str	r3, [sp, #32]
 8009782:	4650      	mov	r0, sl
 8009784:	f8d9 b000 	ldr.w	fp, [r9]
 8009788:	f8da 4094 	ldr.w	r4, [sl, #148]	; 0x94
 800978c:	f8da 60a4 	ldr.w	r6, [sl, #164]	; 0xa4
 8009790:	f8da 7080 	ldr.w	r7, [sl, #128]	; 0x80
 8009794:	f001 fc38 	bl	800b008 <acc_cpd_linear_sweep_get_info>
 8009798:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800979a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800979c:	429a      	cmp	r2, r3
 800979e:	f000 81fb 	beq.w	8009b98 <acc_cpd_dll_calibration+0x908>
 80097a2:	f899 301c 	ldrb.w	r3, [r9, #28]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	f000 81db 	beq.w	8009b62 <acc_cpd_dll_calibration+0x8d2>
 80097ac:	f8b9 301e 	ldrh.w	r3, [r9, #30]
 80097b0:	ee0c 3a90 	vmov	s25, r3
 80097b4:	ee1c 2a10 	vmov	r2, s24
 80097b8:	ee1b 1a90 	vmov	r1, s23
 80097bc:	4653      	mov	r3, sl
 80097be:	4658      	mov	r0, fp
 80097c0:	9d26      	ldr	r5, [sp, #152]	; 0x98
 80097c2:	f000 fe93 	bl	800a4ec <acc_cpd_linear_sweep_load_program>
 80097c6:	2800      	cmp	r0, #0
 80097c8:	f000 81b9 	beq.w	8009b3e <acc_cpd_dll_calibration+0x8ae>
 80097cc:	f899 301c 	ldrb.w	r3, [r9, #28]
 80097d0:	930a      	str	r3, [sp, #40]	; 0x28
 80097d2:	b113      	cbz	r3, 80097da <acc_cpd_dll_calibration+0x54a>
 80097d4:	f899 301d 	ldrb.w	r3, [r9, #29]
 80097d8:	930a      	str	r3, [sp, #40]	; 0x28
 80097da:	ee07 6a90 	vmov	s15, r6
 80097de:	eddf 6a16 	vldr	s13, [pc, #88]	; 8009838 <acc_cpd_dll_calibration+0x5a8>
 80097e2:	ed9f ba16 	vldr	s22, [pc, #88]	; 800983c <acc_cpd_dll_calibration+0x5ac>
 80097e6:	eddf aa16 	vldr	s21, [pc, #88]	; 8009840 <acc_cpd_dll_calibration+0x5b0>
 80097ea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80097ee:	3401      	adds	r4, #1
 80097f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097f4:	b2a4      	uxth	r4, r4
 80097f6:	e029      	b.n	800984c <acc_cpd_dll_calibration+0x5bc>
 80097f8:	0800fb58 	.word	0x0800fb58
 80097fc:	0800fb88 	.word	0x0800fb88
 8009800:	200004c0 	.word	0x200004c0
 8009804:	0800fab8 	.word	0x0800fab8
 8009808:	0800f7b0 	.word	0x0800f7b0
 800980c:	0800fb1c 	.word	0x0800fb1c
 8009810:	0800f824 	.word	0x0800f824
 8009814:	08013898 	.word	0x08013898
 8009818:	08013890 	.word	0x08013890
 800981c:	cccccccd 	.word	0xcccccccd
 8009820:	0800f89c 	.word	0x0800f89c
 8009824:	0800f818 	.word	0x0800f818
 8009828:	0800f8b4 	.word	0x0800f8b4
 800982c:	0800f8d8 	.word	0x0800f8d8
 8009830:	0800f8e0 	.word	0x0800f8e0
 8009834:	0800f80c 	.word	0x0800f80c
 8009838:	42f80000 	.word	0x42f80000
 800983c:	42640000 	.word	0x42640000
 8009840:	42172c98 	.word	0x42172c98
 8009844:	402ca8ad 	.word	0x402ca8ad
 8009848:	447a0000 	.word	0x447a0000
 800984c:	ee1c 2a90 	vmov	r2, s25
 8009850:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009854:	ee17 3a90 	vmov	r3, s15
 8009858:	b29b      	uxth	r3, r3
 800985a:	fb04 f303 	mul.w	r3, r4, r3
 800985e:	441d      	add	r5, r3
 8009860:	18aa      	adds	r2, r5, r2
 8009862:	9317      	str	r3, [sp, #92]	; 0x5c
 8009864:	920b      	str	r2, [sp, #44]	; 0x2c
 8009866:	ea4f 0843 	mov.w	r8, r3, lsl #1
 800986a:	4658      	mov	r0, fp
 800986c:	f001 fb76 	bl	800af5c <acc_cpd_linear_sweep_run_program>
 8009870:	2800      	cmp	r0, #0
 8009872:	f000 8164 	beq.w	8009b3e <acc_cpd_dll_calibration+0x8ae>
 8009876:	ed1f aa0d 	vldr	s20, [pc, #-52]	; 8009844 <acc_cpd_dll_calibration+0x5b4>
 800987a:	ed5f 9a0d 	vldr	s19, [pc, #-52]	; 8009848 <acc_cpd_dll_calibration+0x5b8>
 800987e:	2600      	movs	r6, #0
 8009880:	ab1c      	add	r3, sp, #112	; 0x70
 8009882:	2264      	movs	r2, #100	; 0x64
 8009884:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8009888:	4658      	mov	r0, fp
 800988a:	f7fd ff2f 	bl	80076ec <acc_sensor_protocol_r2_wait_for_event>
 800988e:	2800      	cmp	r0, #0
 8009890:	f000 8155 	beq.w	8009b3e <acc_cpd_dll_calibration+0x8ae>
 8009894:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
 8009898:	2b06      	cmp	r3, #6
 800989a:	f040 8150 	bne.w	8009b3e <acc_cpd_dll_calibration+0x8ae>
 800989e:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80098a2:	ee1c 0a10 	vmov	r0, s24
 80098a6:	f7fd faeb 	bl	8006e80 <acc_sensor_r2_buffer_processed_verify_size>
 80098aa:	2800      	cmp	r0, #0
 80098ac:	f000 813d 	beq.w	8009b2a <acc_cpd_dll_calibration+0x89a>
 80098b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80098b2:	ee1b 1a90 	vmov	r1, s23
 80098b6:	4658      	mov	r0, fp
 80098b8:	f7fe f862 	bl	8007980 <acc_sensor_protocol_r2_transfer_data>
 80098bc:	4604      	mov	r4, r0
 80098be:	2800      	cmp	r0, #0
 80098c0:	f000 813d 	beq.w	8009b3e <acc_cpd_dll_calibration+0x8ae>
 80098c4:	9d26      	ldr	r5, [sp, #152]	; 0x98
 80098c6:	f899 301c 	ldrb.w	r3, [r9, #28]
 80098ca:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 80098ce:	b1fb      	cbz	r3, 8009910 <acc_cpd_dll_calibration+0x680>
 80098d0:	ee1c 3a90 	vmov	r3, s25
 80098d4:	eb05 0208 	add.w	r2, r5, r8
 80098d8:	4659      	mov	r1, fp
 80098da:	2001      	movs	r0, #1
 80098dc:	920c      	str	r2, [sp, #48]	; 0x30
 80098de:	f7fe faa3 	bl	8007e28 <acc_probes_execute_uint16>
 80098e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80098e4:	ee1c 1a90 	vmov	r1, s25
 80098e8:	4610      	mov	r0, r2
 80098ea:	f7fe f987 	bl	8007bfc <acc_alg_cca_u16_calculate>
 80098ee:	eeb4 0acb 	vcmpe.f32	s0, s22
 80098f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80098f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098f8:	bfcc      	ite	gt
 80098fa:	2301      	movgt	r3, #1
 80098fc:	2300      	movle	r3, #0
 80098fe:	ed82 0a07 	vstr	s0, [r2, #28]
 8009902:	7653      	strb	r3, [r2, #25]
 8009904:	f300 8237 	bgt.w	8009d76 <acc_cpd_dll_calibration+0xae6>
 8009908:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800990a:	2b00      	cmp	r3, #0
 800990c:	f040 80f1 	bne.w	8009af2 <acc_cpd_dll_calibration+0x862>
 8009910:	eeb0 0a6a 	vmov.f32	s0, s21
 8009914:	4641      	mov	r1, r8
 8009916:	4628      	mov	r0, r5
 8009918:	f002 f85c 	bl	800b9d4 <acc_alg_basic_saturation_check_u16>
 800991c:	2800      	cmp	r0, #0
 800991e:	f040 80c6 	bne.w	8009aae <acc_cpd_dll_calibration+0x81e>
 8009922:	2f00      	cmp	r7, #0
 8009924:	f040 814b 	bne.w	8009bbe <acc_cpd_dll_calibration+0x92e>
 8009928:	9b08      	ldr	r3, [sp, #32]
 800992a:	2b00      	cmp	r3, #0
 800992c:	f040 81a8 	bne.w	8009c80 <acc_cpd_dll_calibration+0x9f0>
 8009930:	f7fb ff6e 	bl	8005810 <acc_rss_integration_log_level>
 8009934:	2803      	cmp	r0, #3
 8009936:	d905      	bls.n	8009944 <acc_cpd_dll_calibration+0x6b4>
 8009938:	4bbf      	ldr	r3, [pc, #764]	; (8009c38 <acc_cpd_dll_calibration+0x9a8>)
 800993a:	4ac0      	ldr	r2, [pc, #768]	; (8009c3c <acc_cpd_dll_calibration+0x9ac>)
 800993c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800993e:	49c0      	ldr	r1, [pc, #768]	; (8009c40 <acc_cpd_dll_calibration+0x9b0>)
 8009940:	2004      	movs	r0, #4
 8009942:	4798      	blx	r3
 8009944:	eeb0 0a4a 	vmov.f32	s0, s20
 8009948:	4641      	mov	r1, r8
 800994a:	4628      	mov	r0, r5
 800994c:	f002 f842 	bl	800b9d4 <acc_alg_basic_saturation_check_u16>
 8009950:	2800      	cmp	r0, #0
 8009952:	f040 81a2 	bne.w	8009c9a <acc_cpd_dll_calibration+0xa0a>
 8009956:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8009958:	f8da 2020 	ldr.w	r2, [sl, #32]
 800995c:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 8009960:	49b8      	ldr	r1, [pc, #736]	; (8009c44 <acc_cpd_dll_calibration+0x9b4>)
 8009962:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8009964:	ee06 3a90 	vmov	s13, r3
 8009968:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800996a:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 800996e:	615f      	str	r7, [r3, #20]
 8009970:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8009974:	f831 3012 	ldrh.w	r3, [r1, r2, lsl #1]
 8009978:	49b3      	ldr	r1, [pc, #716]	; (8009c48 <acc_cpd_dll_calibration+0x9b8>)
 800997a:	ee66 6a89 	vmul.f32	s13, s13, s18
 800997e:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8009982:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8009986:	ee76 6ae5 	vsub.f32	s13, s13, s11
 800998a:	1a5b      	subs	r3, r3, r1
 800998c:	b21b      	sxth	r3, r3
 800998e:	ee07 0a90 	vmov	s15, r0
 8009992:	ee08 3a10 	vmov	s16, r3
 8009996:	e9dd 0208 	ldrd	r0, r2, [sp, #32]
 800999a:	ee66 6aa8 	vmul.f32	s13, s13, s17
 800999e:	eeb8 6ac8 	vcvt.f32.s32	s12, s16
 80099a2:	ee66 6aa9 	vmul.f32	s13, s13, s19
 80099a6:	7610      	strb	r0, [r2, #24]
 80099a8:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80099aa:	49a8      	ldr	r1, [pc, #672]	; (8009c4c <acc_cpd_dll_calibration+0x9bc>)
 80099ac:	f834 3012 	ldrh.w	r3, [r4, r2, lsl #1]
 80099b0:	48a7      	ldr	r0, [pc, #668]	; (8009c50 <acc_cpd_dll_calibration+0x9c0>)
 80099b2:	ee76 6a66 	vsub.f32	s13, s12, s13
 80099b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099ba:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 80099be:	ee07 3a10 	vmov	s14, r3
 80099c2:	ee67 7a89 	vmul.f32	s15, s15, s18
 80099c6:	ee16 3a90 	vmov	r3, s13
 80099ca:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80099ce:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80099d2:	b21b      	sxth	r3, r3
 80099d4:	ee06 3a90 	vmov	s13, r3
 80099d8:	ee27 7a09 	vmul.f32	s14, s14, s18
 80099dc:	ee67 7aa8 	vmul.f32	s15, s15, s17
 80099e0:	ee37 7a65 	vsub.f32	s14, s14, s11
 80099e4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80099e8:	ee67 7aa9 	vmul.f32	s15, s15, s19
 80099ec:	ee27 7a28 	vmul.f32	s14, s14, s17
 80099f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099f4:	ee27 7a29 	vmul.f32	s14, s14, s19
 80099f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80099fc:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8009a00:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
 8009a04:	ee17 3a90 	vmov	r3, s15
 8009a08:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
 8009a0c:	ee17 3a10 	vmov	r3, s14
 8009a10:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
 8009a14:	f002 fe06 	bl	800c624 <acc_diagnostic_log_array>
 8009a18:	2101      	movs	r1, #1
 8009a1a:	a81b      	add	r0, sp, #108	; 0x6c
 8009a1c:	f002 fe1a 	bl	800c654 <acc_diagnostic_log_data_i16>
 8009a20:	498a      	ldr	r1, [pc, #552]	; (8009c4c <acc_cpd_dll_calibration+0x9bc>)
 8009a22:	488b      	ldr	r0, [pc, #556]	; (8009c50 <acc_cpd_dll_calibration+0x9c0>)
 8009a24:	f002 fdfe 	bl	800c624 <acc_diagnostic_log_array>
 8009a28:	2101      	movs	r1, #1
 8009a2a:	f10d 006e 	add.w	r0, sp, #110	; 0x6e
 8009a2e:	f002 fe11 	bl	800c654 <acc_diagnostic_log_data_i16>
 8009a32:	4986      	ldr	r1, [pc, #536]	; (8009c4c <acc_cpd_dll_calibration+0x9bc>)
 8009a34:	4887      	ldr	r0, [pc, #540]	; (8009c54 <acc_cpd_dll_calibration+0x9c4>)
 8009a36:	f002 fdf5 	bl	800c624 <acc_diagnostic_log_array>
 8009a3a:	2101      	movs	r1, #1
 8009a3c:	a81c      	add	r0, sp, #112	; 0x70
 8009a3e:	f002 fe09 	bl	800c654 <acc_diagnostic_log_data_i16>
 8009a42:	f8bd 206c 	ldrh.w	r2, [sp, #108]	; 0x6c
 8009a46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009a48:	1a9b      	subs	r3, r3, r2
 8009a4a:	b21b      	sxth	r3, r3
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	bfb8      	it	lt
 8009a50:	425b      	neglt	r3, r3
 8009a52:	b21b      	sxth	r3, r3
 8009a54:	2b64      	cmp	r3, #100	; 0x64
 8009a56:	f77f ad0f 	ble.w	8009478 <acc_cpd_dll_calibration+0x1e8>
 8009a5a:	2e02      	cmp	r6, #2
 8009a5c:	d00f      	beq.n	8009a7e <acc_cpd_dll_calibration+0x7ee>
 8009a5e:	f7fb fed7 	bl	8005810 <acc_rss_integration_log_level>
 8009a62:	2803      	cmp	r0, #3
 8009a64:	d906      	bls.n	8009a74 <acc_cpd_dll_calibration+0x7e4>
 8009a66:	4b74      	ldr	r3, [pc, #464]	; (8009c38 <acc_cpd_dll_calibration+0x9a8>)
 8009a68:	4a7b      	ldr	r2, [pc, #492]	; (8009c58 <acc_cpd_dll_calibration+0x9c8>)
 8009a6a:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8009a6c:	4974      	ldr	r1, [pc, #464]	; (8009c40 <acc_cpd_dll_calibration+0x9b0>)
 8009a6e:	4633      	mov	r3, r6
 8009a70:	2004      	movs	r0, #4
 8009a72:	47a0      	blx	r4
 8009a74:	4658      	mov	r0, fp
 8009a76:	3601      	adds	r6, #1
 8009a78:	f7fd fdaa 	bl	80075d0 <acc_sensor_protocol_r2_ack_event>
 8009a7c:	e700      	b.n	8009880 <acc_cpd_dll_calibration+0x5f0>
 8009a7e:	f7fb fec7 	bl	8005810 <acc_rss_integration_log_level>
 8009a82:	2803      	cmp	r0, #3
 8009a84:	d92f      	bls.n	8009ae6 <acc_cpd_dll_calibration+0x856>
 8009a86:	4b6c      	ldr	r3, [pc, #432]	; (8009c38 <acc_cpd_dll_calibration+0x9a8>)
 8009a88:	4a74      	ldr	r2, [pc, #464]	; (8009c5c <acc_cpd_dll_calibration+0x9cc>)
 8009a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a8c:	496c      	ldr	r1, [pc, #432]	; (8009c40 <acc_cpd_dll_calibration+0x9b0>)
 8009a8e:	2004      	movs	r0, #4
 8009a90:	4798      	blx	r3
 8009a92:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8009a96:	4658      	mov	r0, fp
 8009a98:	f7fd fec0 	bl	800781c <acc_sensor_protocol_r2_stop>
 8009a9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009a9e:	2b01      	cmp	r3, #1
 8009aa0:	f04f 0100 	mov.w	r1, #0
 8009aa4:	f43f ad1b 	beq.w	80094de <acc_cpd_dll_calibration+0x24e>
 8009aa8:	2301      	movs	r3, #1
 8009aaa:	9315      	str	r3, [sp, #84]	; 0x54
 8009aac:	e5d3      	b.n	8009656 <acc_cpd_dll_calibration+0x3c6>
 8009aae:	eeb0 0a4a 	vmov.f32	s0, s20
 8009ab2:	4641      	mov	r1, r8
 8009ab4:	4628      	mov	r0, r5
 8009ab6:	f001 ff8d 	bl	800b9d4 <acc_alg_basic_saturation_check_u16>
 8009aba:	2800      	cmp	r0, #0
 8009abc:	f43f af4b 	beq.w	8009956 <acc_cpd_dll_calibration+0x6c6>
 8009ac0:	2f0f      	cmp	r7, #15
 8009ac2:	f040 80ea 	bne.w	8009c9a <acc_cpd_dll_calibration+0xa0a>
 8009ac6:	9b08      	ldr	r3, [sp, #32]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	f000 80fd 	beq.w	8009cc8 <acc_cpd_dll_calibration+0xa38>
 8009ace:	f7fb fe9f 	bl	8005810 <acc_rss_integration_log_level>
 8009ad2:	2803      	cmp	r0, #3
 8009ad4:	f67f af3f 	bls.w	8009956 <acc_cpd_dll_calibration+0x6c6>
 8009ad8:	4b57      	ldr	r3, [pc, #348]	; (8009c38 <acc_cpd_dll_calibration+0x9a8>)
 8009ada:	4a61      	ldr	r2, [pc, #388]	; (8009c60 <acc_cpd_dll_calibration+0x9d0>)
 8009adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ade:	4958      	ldr	r1, [pc, #352]	; (8009c40 <acc_cpd_dll_calibration+0x9b0>)
 8009ae0:	2004      	movs	r0, #4
 8009ae2:	4798      	blx	r3
 8009ae4:	e737      	b.n	8009956 <acc_cpd_dll_calibration+0x6c6>
 8009ae6:	4658      	mov	r0, fp
 8009ae8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8009aec:	f7fd fe96 	bl	800781c <acc_sensor_protocol_r2_stop>
 8009af0:	e4ef      	b.n	80094d2 <acc_cpd_dll_calibration+0x242>
 8009af2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8009af6:	4658      	mov	r0, fp
 8009af8:	f7fd fe90 	bl	800781c <acc_sensor_protocol_r2_stop>
 8009afc:	4658      	mov	r0, fp
 8009afe:	f7fd fd55 	bl	80075ac <acc_sensor_protocol_r2_is_sensor_running>
 8009b02:	900a      	str	r0, [sp, #40]	; 0x28
 8009b04:	bb10      	cbnz	r0, 8009b4c <acc_cpd_dll_calibration+0x8bc>
 8009b06:	f002 fdc5 	bl	800c694 <acc_image_a111_r2c_sweep_get>
 8009b0a:	900c      	str	r0, [sp, #48]	; 0x30
 8009b0c:	f002 fdc6 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 8009b10:	4a54      	ldr	r2, [pc, #336]	; (8009c64 <acc_cpd_dll_calibration+0x9d4>)
 8009b12:	9202      	str	r2, [sp, #8]
 8009b14:	2401      	movs	r4, #1
 8009b16:	2272      	movs	r2, #114	; 0x72
 8009b18:	e9cd 2400 	strd	r2, r4, [sp]
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009b20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b22:	4658      	mov	r0, fp
 8009b24:	f002 fcde 	bl	800c4e4 <acc_confprogram_live_patch>
 8009b28:	e69f      	b.n	800986a <acc_cpd_dll_calibration+0x5da>
 8009b2a:	4b43      	ldr	r3, [pc, #268]	; (8009c38 <acc_cpd_dll_calibration+0x9a8>)
 8009b2c:	4944      	ldr	r1, [pc, #272]	; (8009c40 <acc_cpd_dll_calibration+0x9b0>)
 8009b2e:	4a4e      	ldr	r2, [pc, #312]	; (8009c68 <acc_cpd_dll_calibration+0x9d8>)
 8009b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b32:	4798      	blx	r3
 8009b34:	4658      	mov	r0, fp
 8009b36:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8009b3a:	f7fd fe6f 	bl	800781c <acc_sensor_protocol_r2_stop>
 8009b3e:	2400      	movs	r4, #0
 8009b40:	4620      	mov	r0, r4
 8009b42:	b047      	add	sp, #284	; 0x11c
 8009b44:	ecbd 8b0a 	vpop	{d8-d12}
 8009b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b4c:	4b3a      	ldr	r3, [pc, #232]	; (8009c38 <acc_cpd_dll_calibration+0x9a8>)
 8009b4e:	4a47      	ldr	r2, [pc, #284]	; (8009c6c <acc_cpd_dll_calibration+0x9dc>)
 8009b50:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8009b52:	493b      	ldr	r1, [pc, #236]	; (8009c40 <acc_cpd_dll_calibration+0x9b0>)
 8009b54:	46d9      	mov	r9, fp
 8009b56:	464b      	mov	r3, r9
 8009b58:	2000      	movs	r0, #0
 8009b5a:	47a0      	blx	r4
 8009b5c:	e7ef      	b.n	8009b3e <acc_cpd_dll_calibration+0x8ae>
 8009b5e:	2301      	movs	r3, #1
 8009b60:	e58d      	b.n	800967e <acc_cpd_dll_calibration+0x3ee>
 8009b62:	ee0c 3a90 	vmov	s25, r3
 8009b66:	e625      	b.n	80097b4 <acc_cpd_dll_calibration+0x524>
 8009b68:	f7fb fe52 	bl	8005810 <acc_rss_integration_log_level>
 8009b6c:	2803      	cmp	r0, #3
 8009b6e:	f67f acc3 	bls.w	80094f8 <acc_cpd_dll_calibration+0x268>
 8009b72:	4b31      	ldr	r3, [pc, #196]	; (8009c38 <acc_cpd_dll_calibration+0x9a8>)
 8009b74:	4a3e      	ldr	r2, [pc, #248]	; (8009c70 <acc_cpd_dll_calibration+0x9e0>)
 8009b76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b78:	4931      	ldr	r1, [pc, #196]	; (8009c40 <acc_cpd_dll_calibration+0x9b0>)
 8009b7a:	2004      	movs	r0, #4
 8009b7c:	4798      	blx	r3
 8009b7e:	e4bb      	b.n	80094f8 <acc_cpd_dll_calibration+0x268>
 8009b80:	464b      	mov	r3, r9
 8009b82:	46d1      	mov	r9, sl
 8009b84:	469a      	mov	sl, r3
 8009b86:	2301      	movs	r3, #1
 8009b88:	930e      	str	r3, [sp, #56]	; 0x38
 8009b8a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009b8c:	2b01      	cmp	r3, #1
 8009b8e:	d0d6      	beq.n	8009b3e <acc_cpd_dll_calibration+0x8ae>
 8009b90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b92:	9319      	str	r3, [sp, #100]	; 0x64
 8009b94:	f7ff bbc6 	b.w	8009324 <acc_cpd_dll_calibration+0x94>
 8009b98:	4b27      	ldr	r3, [pc, #156]	; (8009c38 <acc_cpd_dll_calibration+0x9a8>)
 8009b9a:	4a36      	ldr	r2, [pc, #216]	; (8009c74 <acc_cpd_dll_calibration+0x9e4>)
 8009b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b9e:	4928      	ldr	r1, [pc, #160]	; (8009c40 <acc_cpd_dll_calibration+0x9b0>)
 8009ba0:	2000      	movs	r0, #0
 8009ba2:	4798      	blx	r3
 8009ba4:	e7cb      	b.n	8009b3e <acc_cpd_dll_calibration+0x8ae>
 8009ba6:	4b24      	ldr	r3, [pc, #144]	; (8009c38 <acc_cpd_dll_calibration+0x9a8>)
 8009ba8:	4a33      	ldr	r2, [pc, #204]	; (8009c78 <acc_cpd_dll_calibration+0x9e8>)
 8009baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bac:	4924      	ldr	r1, [pc, #144]	; (8009c40 <acc_cpd_dll_calibration+0x9b0>)
 8009bae:	4620      	mov	r0, r4
 8009bb0:	4798      	blx	r3
 8009bb2:	4620      	mov	r0, r4
 8009bb4:	b047      	add	sp, #284	; 0x11c
 8009bb6:	ecbd 8b0a 	vpop	{d8-d12}
 8009bba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bbe:	2f08      	cmp	r7, #8
 8009bc0:	bf38      	it	cc
 8009bc2:	2708      	movcc	r7, #8
 8009bc4:	f7fb fe24 	bl	8005810 <acc_rss_integration_log_level>
 8009bc8:	2803      	cmp	r0, #3
 8009bca:	f1a7 0708 	sub.w	r7, r7, #8
 8009bce:	d906      	bls.n	8009bde <acc_cpd_dll_calibration+0x94e>
 8009bd0:	4b19      	ldr	r3, [pc, #100]	; (8009c38 <acc_cpd_dll_calibration+0x9a8>)
 8009bd2:	4a2a      	ldr	r2, [pc, #168]	; (8009c7c <acc_cpd_dll_calibration+0x9ec>)
 8009bd4:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8009bd6:	491a      	ldr	r1, [pc, #104]	; (8009c40 <acc_cpd_dll_calibration+0x9b0>)
 8009bd8:	463b      	mov	r3, r7
 8009bda:	2004      	movs	r0, #4
 8009bdc:	47a0      	blx	r4
 8009bde:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8009be2:	4658      	mov	r0, fp
 8009be4:	f7fd fe1a 	bl	800781c <acc_sensor_protocol_r2_stop>
 8009be8:	4658      	mov	r0, fp
 8009bea:	f7fd fcdf 	bl	80075ac <acc_sensor_protocol_r2_is_sensor_running>
 8009bee:	4602      	mov	r2, r0
 8009bf0:	2800      	cmp	r0, #0
 8009bf2:	d1ab      	bne.n	8009b4c <acc_cpd_dll_calibration+0x8bc>
 8009bf4:	9210      	str	r2, [sp, #64]	; 0x40
 8009bf6:	f002 fd4d 	bl	800c694 <acc_image_a111_r2c_sweep_get>
 8009bfa:	900c      	str	r0, [sp, #48]	; 0x30
 8009bfc:	f002 fd4e 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 8009c00:	4c18      	ldr	r4, [pc, #96]	; (8009c64 <acc_cpd_dll_calibration+0x9d4>)
 8009c02:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009c04:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009c06:	2544      	movs	r5, #68	; 0x44
 8009c08:	4603      	mov	r3, r0
 8009c0a:	9500      	str	r5, [sp, #0]
 8009c0c:	4658      	mov	r0, fp
 8009c0e:	e9cd 7401 	strd	r7, r4, [sp, #4]
 8009c12:	f002 fc67 	bl	800c4e4 <acc_confprogram_live_patch>
 8009c16:	f002 fd3d 	bl	800c694 <acc_image_a111_r2c_sweep_get>
 8009c1a:	900c      	str	r0, [sp, #48]	; 0x30
 8009c1c:	f002 fd3e 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 8009c20:	2542      	movs	r5, #66	; 0x42
 8009c22:	9a08      	ldr	r2, [sp, #32]
 8009c24:	9201      	str	r2, [sp, #4]
 8009c26:	4603      	mov	r3, r0
 8009c28:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009c2a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009c2c:	9402      	str	r4, [sp, #8]
 8009c2e:	9500      	str	r5, [sp, #0]
 8009c30:	4658      	mov	r0, fp
 8009c32:	f002 fc57 	bl	800c4e4 <acc_confprogram_live_patch>
 8009c36:	e618      	b.n	800986a <acc_cpd_dll_calibration+0x5da>
 8009c38:	200004c0 	.word	0x200004c0
 8009c3c:	0800f958 	.word	0x0800f958
 8009c40:	0800f7b0 	.word	0x0800f7b0
 8009c44:	08013898 	.word	0x08013898
 8009c48:	08013890 	.word	0x08013890
 8009c4c:	0800f8b4 	.word	0x0800f8b4
 8009c50:	0800fa28 	.word	0x0800fa28
 8009c54:	0800fa38 	.word	0x0800fa38
 8009c58:	0800fa48 	.word	0x0800fa48
 8009c5c:	0800fa70 	.word	0x0800fa70
 8009c60:	0800f9ac 	.word	0x0800f9ac
 8009c64:	08006db5 	.word	0x08006db5
 8009c68:	0800f698 	.word	0x0800f698
 8009c6c:	0800f624 	.word	0x0800f624
 8009c70:	0800f874 	.word	0x0800f874
 8009c74:	0800f910 	.word	0x0800f910
 8009c78:	0800e8a4 	.word	0x0800e8a4
 8009c7c:	0800f978 	.word	0x0800f978
 8009c80:	f7fb fdc6 	bl	8005810 <acc_rss_integration_log_level>
 8009c84:	2803      	cmp	r0, #3
 8009c86:	d92d      	bls.n	8009ce4 <acc_cpd_dll_calibration+0xa54>
 8009c88:	4b3e      	ldr	r3, [pc, #248]	; (8009d84 <acc_cpd_dll_calibration+0xaf4>)
 8009c8a:	4a3f      	ldr	r2, [pc, #252]	; (8009d88 <acc_cpd_dll_calibration+0xaf8>)
 8009c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c8e:	493f      	ldr	r1, [pc, #252]	; (8009d8c <acc_cpd_dll_calibration+0xafc>)
 8009c90:	9708      	str	r7, [sp, #32]
 8009c92:	2004      	movs	r0, #4
 8009c94:	4798      	blx	r3
 8009c96:	270f      	movs	r7, #15
 8009c98:	e7a1      	b.n	8009bde <acc_cpd_dll_calibration+0x94e>
 8009c9a:	3708      	adds	r7, #8
 8009c9c:	2f0f      	cmp	r7, #15
 8009c9e:	bf28      	it	cs
 8009ca0:	270f      	movcs	r7, #15
 8009ca2:	f7fb fdb5 	bl	8005810 <acc_rss_integration_log_level>
 8009ca6:	2803      	cmp	r0, #3
 8009ca8:	d999      	bls.n	8009bde <acc_cpd_dll_calibration+0x94e>
 8009caa:	4b36      	ldr	r3, [pc, #216]	; (8009d84 <acc_cpd_dll_calibration+0xaf4>)
 8009cac:	4a38      	ldr	r2, [pc, #224]	; (8009d90 <acc_cpd_dll_calibration+0xb00>)
 8009cae:	e791      	b.n	8009bd4 <acc_cpd_dll_calibration+0x944>
 8009cb0:	f7fb fdae 	bl	8005810 <acc_rss_integration_log_level>
 8009cb4:	2803      	cmp	r0, #3
 8009cb6:	f67f ac1f 	bls.w	80094f8 <acc_cpd_dll_calibration+0x268>
 8009cba:	4b32      	ldr	r3, [pc, #200]	; (8009d84 <acc_cpd_dll_calibration+0xaf4>)
 8009cbc:	4a35      	ldr	r2, [pc, #212]	; (8009d94 <acc_cpd_dll_calibration+0xb04>)
 8009cbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cc0:	4932      	ldr	r1, [pc, #200]	; (8009d8c <acc_cpd_dll_calibration+0xafc>)
 8009cc2:	2004      	movs	r0, #4
 8009cc4:	4798      	blx	r3
 8009cc6:	e417      	b.n	80094f8 <acc_cpd_dll_calibration+0x268>
 8009cc8:	9008      	str	r0, [sp, #32]
 8009cca:	f7fb fda1 	bl	8005810 <acc_rss_integration_log_level>
 8009cce:	2803      	cmp	r0, #3
 8009cd0:	9b08      	ldr	r3, [sp, #32]
 8009cd2:	d90a      	bls.n	8009cea <acc_cpd_dll_calibration+0xa5a>
 8009cd4:	492b      	ldr	r1, [pc, #172]	; (8009d84 <acc_cpd_dll_calibration+0xaf4>)
 8009cd6:	4a30      	ldr	r2, [pc, #192]	; (8009d98 <acc_cpd_dll_calibration+0xb08>)
 8009cd8:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 8009cda:	492c      	ldr	r1, [pc, #176]	; (8009d8c <acc_cpd_dll_calibration+0xafc>)
 8009cdc:	2004      	movs	r0, #4
 8009cde:	47a0      	blx	r4
 8009ce0:	2700      	movs	r7, #0
 8009ce2:	e77c      	b.n	8009bde <acc_cpd_dll_calibration+0x94e>
 8009ce4:	9708      	str	r7, [sp, #32]
 8009ce6:	270f      	movs	r7, #15
 8009ce8:	e779      	b.n	8009bde <acc_cpd_dll_calibration+0x94e>
 8009cea:	9308      	str	r3, [sp, #32]
 8009cec:	2700      	movs	r7, #0
 8009cee:	e776      	b.n	8009bde <acc_cpd_dll_calibration+0x94e>
 8009cf0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009cf2:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
 8009cf6:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8009cf8:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
 8009cfc:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8009cfe:	6008      	str	r0, [r1, #0]
 8009d00:	818d      	strh	r5, [r1, #12]
 8009d02:	81ca      	strh	r2, [r1, #14]
 8009d04:	820b      	strh	r3, [r1, #16]
 8009d06:	f7fb fd83 	bl	8005810 <acc_rss_integration_log_level>
 8009d0a:	2803      	cmp	r0, #3
 8009d0c:	d909      	bls.n	8009d22 <acc_cpd_dll_calibration+0xa92>
 8009d0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d10:	4a1c      	ldr	r2, [pc, #112]	; (8009d84 <acc_cpd_dll_calibration+0xaf4>)
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8009d16:	491d      	ldr	r1, [pc, #116]	; (8009d8c <acc_cpd_dll_calibration+0xafc>)
 8009d18:	9300      	str	r3, [sp, #0]
 8009d1a:	4a20      	ldr	r2, [pc, #128]	; (8009d9c <acc_cpd_dll_calibration+0xb0c>)
 8009d1c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009d1e:	2004      	movs	r0, #4
 8009d20:	47a8      	blx	r5
 8009d22:	f7fb fd75 	bl	8005810 <acc_rss_integration_log_level>
 8009d26:	2801      	cmp	r0, #1
 8009d28:	d91e      	bls.n	8009d68 <acc_cpd_dll_calibration+0xad8>
 8009d2a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009d2c:	4a1c      	ldr	r2, [pc, #112]	; (8009da0 <acc_cpd_dll_calibration+0xb10>)
 8009d2e:	7e39      	ldrb	r1, [r7, #24]
 8009d30:	f8df c074 	ldr.w	ip, [pc, #116]	; 8009da8 <acc_cpd_dll_calibration+0xb18>
 8009d34:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009d36:	89b8      	ldrh	r0, [r7, #12]
 8009d38:	683e      	ldr	r6, [r7, #0]
 8009d3a:	9300      	str	r3, [sp, #0]
 8009d3c:	2900      	cmp	r1, #0
 8009d3e:	bf14      	ite	ne
 8009d40:	4663      	movne	r3, ip
 8009d42:	4613      	moveq	r3, r2
 8009d44:	4d0f      	ldr	r5, [pc, #60]	; (8009d84 <acc_cpd_dll_calibration+0xaf4>)
 8009d46:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8009d4a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8009d4e:	9306      	str	r3, [sp, #24]
 8009d50:	697b      	ldr	r3, [r7, #20]
 8009d52:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 8009d54:	9305      	str	r3, [sp, #20]
 8009d56:	e9cd 1203 	strd	r1, r2, [sp, #12]
 8009d5a:	e9cd 6001 	strd	r6, r0, [sp, #4]
 8009d5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d60:	4a10      	ldr	r2, [pc, #64]	; (8009da4 <acc_cpd_dll_calibration+0xb14>)
 8009d62:	490a      	ldr	r1, [pc, #40]	; (8009d8c <acc_cpd_dll_calibration+0xafc>)
 8009d64:	2002      	movs	r0, #2
 8009d66:	47a8      	blx	r5
 8009d68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d6a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009d6c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009d6e:	6059      	str	r1, [r3, #4]
 8009d70:	609a      	str	r2, [r3, #8]
 8009d72:	f7ff bb30 	b.w	80093d6 <acc_cpd_dll_calibration+0x146>
 8009d76:	4658      	mov	r0, fp
 8009d78:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8009d7c:	f7fd fd4e 	bl	800781c <acc_sensor_protocol_r2_stop>
 8009d80:	e6dd      	b.n	8009b3e <acc_cpd_dll_calibration+0x8ae>
 8009d82:	bf00      	nop
 8009d84:	200004c0 	.word	0x200004c0
 8009d88:	0800f930 	.word	0x0800f930
 8009d8c:	0800f7b0 	.word	0x0800f7b0
 8009d90:	0800f9f4 	.word	0x0800f9f4
 8009d94:	0800f8e8 	.word	0x0800f8e8
 8009d98:	0800f9cc 	.word	0x0800f9cc
 8009d9c:	0800fa88 	.word	0x0800fa88
 8009da0:	0800f7a8 	.word	0x0800f7a8
 8009da4:	0800faec 	.word	0x0800faec
 8009da8:	0800f7a0 	.word	0x0800f7a0

08009dac <acc_dll_check_direct_leakage>:
 8009dac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009db0:	4b44      	ldr	r3, [pc, #272]	; (8009ec4 <acc_dll_check_direct_leakage+0x118>)
 8009db2:	460d      	mov	r5, r1
 8009db4:	fba3 3101 	umull	r3, r1, r3, r1
 8009db8:	ea4f 0991 	mov.w	r9, r1, lsr #2
 8009dbc:	f021 0403 	bic.w	r4, r1, #3
 8009dc0:	b084      	sub	sp, #16
 8009dc2:	464b      	mov	r3, r9
 8009dc4:	eb04 0191 	add.w	r1, r4, r1, lsr #2
 8009dc8:	4602      	mov	r2, r0
 8009dca:	4682      	mov	sl, r0
 8009dcc:	f002 f9e2 	bl	800c194 <acc_alg_power_bins>
 8009dd0:	2d04      	cmp	r5, #4
 8009dd2:	d924      	bls.n	8009e1e <acc_dll_check_direct_leakage+0x72>
 8009dd4:	f1aa 0602 	sub.w	r6, sl, #2
 8009dd8:	2300      	movs	r3, #0
 8009dda:	4632      	mov	r2, r6
 8009ddc:	461c      	mov	r4, r3
 8009dde:	f832 1f02 	ldrh.w	r1, [r2, #2]!
 8009de2:	3301      	adds	r3, #1
 8009de4:	428c      	cmp	r4, r1
 8009de6:	bf38      	it	cc
 8009de8:	460c      	movcc	r4, r1
 8009dea:	4599      	cmp	r9, r3
 8009dec:	d8f7      	bhi.n	8009dde <acc_dll_check_direct_leakage+0x32>
 8009dee:	4b36      	ldr	r3, [pc, #216]	; (8009ec8 <acc_dll_check_direct_leakage+0x11c>)
 8009df0:	2d0e      	cmp	r5, #14
 8009df2:	fba3 3404 	umull	r3, r4, r3, r4
 8009df6:	f3c4 084f 	ubfx	r8, r4, #1, #16
 8009dfa:	d910      	bls.n	8009e1e <acc_dll_check_direct_leakage+0x72>
 8009dfc:	2702      	movs	r7, #2
 8009dfe:	f836 5f02 	ldrh.w	r5, [r6, #2]!
 8009e02:	88b4      	ldrh	r4, [r6, #4]
 8009e04:	42a5      	cmp	r5, r4
 8009e06:	d902      	bls.n	8009e0e <acc_dll_check_direct_leakage+0x62>
 8009e08:	4623      	mov	r3, r4
 8009e0a:	462c      	mov	r4, r5
 8009e0c:	461d      	mov	r5, r3
 8009e0e:	4544      	cmp	r4, r8
 8009e10:	d902      	bls.n	8009e18 <acc_dll_check_direct_leakage+0x6c>
 8009e12:	ebb4 0fc5 	cmp.w	r4, r5, lsl #3
 8009e16:	d834      	bhi.n	8009e82 <acc_dll_check_direct_leakage+0xd6>
 8009e18:	3701      	adds	r7, #1
 8009e1a:	45b9      	cmp	r9, r7
 8009e1c:	d8ef      	bhi.n	8009dfe <acc_dll_check_direct_leakage+0x52>
 8009e1e:	ea4f 0559 	mov.w	r5, r9, lsr #1
 8009e22:	f105 0308 	add.w	r3, r5, #8
 8009e26:	454b      	cmp	r3, r9
 8009e28:	d821      	bhi.n	8009e6e <acc_dll_check_direct_leakage+0xc2>
 8009e2a:	f1aa 0202 	sub.w	r2, sl, #2
 8009e2e:	f10a 000e 	add.w	r0, sl, #14
 8009e32:	2400      	movs	r4, #0
 8009e34:	f832 1f02 	ldrh.w	r1, [r2, #2]!
 8009e38:	4290      	cmp	r0, r2
 8009e3a:	440c      	add	r4, r1
 8009e3c:	d1fa      	bne.n	8009e34 <acc_dll_check_direct_leakage+0x88>
 8009e3e:	1c6a      	adds	r2, r5, #1
 8009e40:	4293      	cmp	r3, r2
 8009e42:	bf34      	ite	cc
 8009e44:	2301      	movcc	r3, #1
 8009e46:	2308      	movcs	r3, #8
 8009e48:	442b      	add	r3, r5
 8009e4a:	eb0a 0343 	add.w	r3, sl, r3, lsl #1
 8009e4e:	eb0a 0a45 	add.w	sl, sl, r5, lsl #1
 8009e52:	2500      	movs	r5, #0
 8009e54:	f83a 2b02 	ldrh.w	r2, [sl], #2
 8009e58:	4553      	cmp	r3, sl
 8009e5a:	4415      	add	r5, r2
 8009e5c:	d1fa      	bne.n	8009e54 <acc_dll_check_direct_leakage+0xa8>
 8009e5e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8009e62:	42ab      	cmp	r3, r5
 8009e64:	d81f      	bhi.n	8009ea6 <acc_dll_check_direct_leakage+0xfa>
 8009e66:	2001      	movs	r0, #1
 8009e68:	b004      	add	sp, #16
 8009e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e6e:	4b17      	ldr	r3, [pc, #92]	; (8009ecc <acc_dll_check_direct_leakage+0x120>)
 8009e70:	4a17      	ldr	r2, [pc, #92]	; (8009ed0 <acc_dll_check_direct_leakage+0x124>)
 8009e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e74:	4917      	ldr	r1, [pc, #92]	; (8009ed4 <acc_dll_check_direct_leakage+0x128>)
 8009e76:	2000      	movs	r0, #0
 8009e78:	4798      	blx	r3
 8009e7a:	2000      	movs	r0, #0
 8009e7c:	b004      	add	sp, #16
 8009e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e82:	f7fb fcc5 	bl	8005810 <acc_rss_integration_log_level>
 8009e86:	2803      	cmp	r0, #3
 8009e88:	d909      	bls.n	8009e9e <acc_dll_check_direct_leakage+0xf2>
 8009e8a:	e9cd 5801 	strd	r5, r8, [sp, #4]
 8009e8e:	4a0f      	ldr	r2, [pc, #60]	; (8009ecc <acc_dll_check_direct_leakage+0x120>)
 8009e90:	9400      	str	r4, [sp, #0]
 8009e92:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8009e94:	490f      	ldr	r1, [pc, #60]	; (8009ed4 <acc_dll_check_direct_leakage+0x128>)
 8009e96:	4a10      	ldr	r2, [pc, #64]	; (8009ed8 <acc_dll_check_direct_leakage+0x12c>)
 8009e98:	463b      	mov	r3, r7
 8009e9a:	2004      	movs	r0, #4
 8009e9c:	47a0      	blx	r4
 8009e9e:	2000      	movs	r0, #0
 8009ea0:	b004      	add	sp, #16
 8009ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ea6:	f7fb fcb3 	bl	8005810 <acc_rss_integration_log_level>
 8009eaa:	2803      	cmp	r0, #3
 8009eac:	d9f7      	bls.n	8009e9e <acc_dll_check_direct_leakage+0xf2>
 8009eae:	4a07      	ldr	r2, [pc, #28]	; (8009ecc <acc_dll_check_direct_leakage+0x120>)
 8009eb0:	9500      	str	r5, [sp, #0]
 8009eb2:	4623      	mov	r3, r4
 8009eb4:	2004      	movs	r0, #4
 8009eb6:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8009eb8:	4906      	ldr	r1, [pc, #24]	; (8009ed4 <acc_dll_check_direct_leakage+0x128>)
 8009eba:	4a08      	ldr	r2, [pc, #32]	; (8009edc <acc_dll_check_direct_leakage+0x130>)
 8009ebc:	47a0      	blx	r4
 8009ebe:	2000      	movs	r0, #0
 8009ec0:	e7d2      	b.n	8009e68 <acc_dll_check_direct_leakage+0xbc>
 8009ec2:	bf00      	nop
 8009ec4:	cccccccd 	.word	0xcccccccd
 8009ec8:	aaaaaaab 	.word	0xaaaaaaab
 8009ecc:	200004c0 	.word	0x200004c0
 8009ed0:	0800fc14 	.word	0x0800fc14
 8009ed4:	0800fbf8 	.word	0x0800fbf8
 8009ed8:	0800fb9c 	.word	0x0800fb9c
 8009edc:	0800fc24 	.word	0x0800fc24

08009ee0 <acc_dll_dly_coarse_priority_sort>:
 8009ee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ee4:	b084      	sub	sp, #16
 8009ee6:	2800      	cmp	r0, #0
 8009ee8:	f000 80ad 	beq.w	800a046 <acc_dll_dly_coarse_priority_sort+0x166>
 8009eec:	280c      	cmp	r0, #12
 8009eee:	f200 80a6 	bhi.w	800a03e <acc_dll_dly_coarse_priority_sort+0x15e>
 8009ef2:	2400      	movs	r4, #0
 8009ef4:	ed9f 4a56 	vldr	s8, [pc, #344]	; 800a050 <acc_dll_dly_coarse_priority_sort+0x170>
 8009ef8:	eddf 4a56 	vldr	s9, [pc, #344]	; 800a054 <acc_dll_dly_coarse_priority_sort+0x174>
 8009efc:	ed9f 6a56 	vldr	s12, [pc, #344]	; 800a058 <acc_dll_dly_coarse_priority_sort+0x178>
 8009f00:	ed9f 5a56 	vldr	s10, [pc, #344]	; 800a05c <acc_dll_dly_coarse_priority_sort+0x17c>
 8009f04:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a060 <acc_dll_dly_coarse_priority_sort+0x180>
 8009f08:	4626      	mov	r6, r4
 8009f0a:	f10d 0e04 	add.w	lr, sp, #4
 8009f0e:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 8009f12:	460d      	mov	r5, r1
 8009f14:	1e47      	subs	r7, r0, #1
 8009f16:	f240 5813 	movw	r8, #1299	; 0x513
 8009f1a:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 8009f1e:	2c00      	cmp	r4, #0
 8009f20:	d067      	beq.n	8009ff2 <acc_dll_dly_coarse_priority_sort+0x112>
 8009f22:	42bc      	cmp	r4, r7
 8009f24:	d016      	beq.n	8009f54 <acc_dll_dly_coarse_priority_sort+0x74>
 8009f26:	f935 ac02 	ldrsh.w	sl, [r5, #-2]
 8009f2a:	f9b5 3000 	ldrsh.w	r3, [r5]
 8009f2e:	459a      	cmp	sl, r3
 8009f30:	dd18      	ble.n	8009f64 <acc_dll_dly_coarse_priority_sort+0x84>
 8009f32:	f9b5 9002 	ldrsh.w	r9, [r5, #2]
 8009f36:	454b      	cmp	r3, r9
 8009f38:	dd14      	ble.n	8009f64 <acc_dll_dly_coarse_priority_sort+0x84>
 8009f3a:	45c2      	cmp	sl, r8
 8009f3c:	dc12      	bgt.n	8009f64 <acc_dll_dly_coarse_priority_sort+0x84>
 8009f3e:	4543      	cmp	r3, r8
 8009f40:	dc10      	bgt.n	8009f64 <acc_dll_dly_coarse_priority_sort+0x84>
 8009f42:	eba9 090a 	sub.w	r9, r9, sl
 8009f46:	ee07 9a90 	vmov	s15, r9
 8009f4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009f4e:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8009f52:	e05e      	b.n	800a012 <acc_dll_dly_coarse_priority_sort+0x132>
 8009f54:	f935 9c02 	ldrsh.w	r9, [r5, #-2]
 8009f58:	f9b5 3000 	ldrsh.w	r3, [r5]
 8009f5c:	4599      	cmp	r9, r3
 8009f5e:	dd01      	ble.n	8009f64 <acc_dll_dly_coarse_priority_sort+0x84>
 8009f60:	45c1      	cmp	r9, r8
 8009f62:	dd65      	ble.n	800a030 <acc_dll_dly_coarse_priority_sort+0x150>
 8009f64:	eef0 6a46 	vmov.f32	s13, s12
 8009f68:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	bfb8      	it	lt
 8009f70:	425b      	neglt	r3, r3
 8009f72:	ee07 3a90 	vmov	s15, r3
 8009f76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009f7a:	3401      	adds	r4, #1
 8009f7c:	ee87 7a85 	vdiv.f32	s14, s15, s10
 8009f80:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8009f84:	b2e6      	uxtb	r6, r4
 8009f86:	42b0      	cmp	r0, r6
 8009f88:	f105 0502 	add.w	r5, r5, #2
 8009f8c:	ee67 7a25 	vmul.f32	s15, s14, s11
 8009f90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f98:	ee17 3a90 	vmov	r3, s15
 8009f9c:	f80e 3b01 	strb.w	r3, [lr], #1
 8009fa0:	d8bd      	bhi.n	8009f1e <acc_dll_dly_coarse_priority_sort+0x3e>
 8009fa2:	3802      	subs	r0, #2
 8009fa4:	f102 0c01 	add.w	ip, r2, #1
 8009fa8:	fa5f fe87 	uxtb.w	lr, r7
 8009fac:	fa5c f780 	uxtab	r7, ip, r0
 8009fb0:	eba7 0e0e 	sub.w	lr, r7, lr
 8009fb4:	45be      	cmp	lr, r7
 8009fb6:	d019      	beq.n	8009fec <acc_dll_dly_coarse_priority_sort+0x10c>
 8009fb8:	4613      	mov	r3, r2
 8009fba:	2400      	movs	r4, #0
 8009fbc:	7819      	ldrb	r1, [r3, #0]
 8009fbe:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8009fc2:	ad04      	add	r5, sp, #16
 8009fc4:	186e      	adds	r6, r5, r1
 8009fc6:	4405      	add	r5, r0
 8009fc8:	f816 6c0c 	ldrb.w	r6, [r6, #-12]
 8009fcc:	f815 5c0c 	ldrb.w	r5, [r5, #-12]
 8009fd0:	42ae      	cmp	r6, r5
 8009fd2:	d904      	bls.n	8009fde <acc_dll_dly_coarse_priority_sort+0xfe>
 8009fd4:	3401      	adds	r4, #1
 8009fd6:	b2e4      	uxtb	r4, r4
 8009fd8:	f803 0c01 	strb.w	r0, [r3, #-1]
 8009fdc:	7019      	strb	r1, [r3, #0]
 8009fde:	429f      	cmp	r7, r3
 8009fe0:	d1ec      	bne.n	8009fbc <acc_dll_dly_coarse_priority_sort+0xdc>
 8009fe2:	45bc      	cmp	ip, r7
 8009fe4:	d002      	beq.n	8009fec <acc_dll_dly_coarse_priority_sort+0x10c>
 8009fe6:	3f01      	subs	r7, #1
 8009fe8:	2c00      	cmp	r4, #0
 8009fea:	d1e3      	bne.n	8009fb4 <acc_dll_dly_coarse_priority_sort+0xd4>
 8009fec:	b004      	add	sp, #16
 8009fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ff2:	f9b1 9000 	ldrsh.w	r9, [r1]
 8009ff6:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8009ffa:	4599      	cmp	r9, r3
 8009ffc:	dd13      	ble.n	800a026 <acc_dll_dly_coarse_priority_sort+0x146>
 8009ffe:	45c1      	cmp	r9, r8
 800a000:	dc11      	bgt.n	800a026 <acc_dll_dly_coarse_priority_sort+0x146>
 800a002:	eba3 0309 	sub.w	r3, r3, r9
 800a006:	ee07 3a90 	vmov	s15, r3
 800a00a:	f9b5 3000 	ldrsh.w	r3, [r5]
 800a00e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a012:	eef4 7ac4 	vcmpe.f32	s15, s8
 800a016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a01a:	bf54      	ite	pl
 800a01c:	eef0 6a46 	vmovpl.f32	s13, s12
 800a020:	eef0 6a64 	vmovmi.f32	s13, s9
 800a024:	e7a0      	b.n	8009f68 <acc_dll_dly_coarse_priority_sort+0x88>
 800a026:	f9b5 3000 	ldrsh.w	r3, [r5]
 800a02a:	eef0 6a46 	vmov.f32	s13, s12
 800a02e:	e79b      	b.n	8009f68 <acc_dll_dly_coarse_priority_sort+0x88>
 800a030:	eba3 0909 	sub.w	r9, r3, r9
 800a034:	ee07 9a90 	vmov	s15, r9
 800a038:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a03c:	e7e9      	b.n	800a012 <acc_dll_dly_coarse_priority_sort+0x132>
 800a03e:	4809      	ldr	r0, [pc, #36]	; (800a064 <acc_dll_dly_coarse_priority_sort+0x184>)
 800a040:	211f      	movs	r1, #31
 800a042:	f7fd fe09 	bl	8007c58 <acc_assert_fail>
 800a046:	4807      	ldr	r0, [pc, #28]	; (800a064 <acc_dll_dly_coarse_priority_sort+0x184>)
 800a048:	211a      	movs	r1, #26
 800a04a:	f7fd fe05 	bl	8007c58 <acc_assert_fail>
 800a04e:	bf00      	nop
 800a050:	c2c80000 	.word	0xc2c80000
 800a054:	00000000 	.word	0x00000000
 800a058:	42480000 	.word	0x42480000
 800a05c:	447a0000 	.word	0x447a0000
 800a060:	42c80000 	.word	0x42c80000
 800a064:	0800fc64 	.word	0x0800fc64

0800a068 <acc_dll_plateau_finder>:
 800a068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a06c:	b0af      	sub	sp, #188	; 0xbc
 800a06e:	2819      	cmp	r0, #25
 800a070:	9104      	str	r1, [sp, #16]
 800a072:	f200 8226 	bhi.w	800a4c2 <acc_dll_plateau_finder+0x45a>
 800a076:	2801      	cmp	r0, #1
 800a078:	4683      	mov	fp, r0
 800a07a:	4615      	mov	r5, r2
 800a07c:	469a      	mov	sl, r3
 800a07e:	f240 8217 	bls.w	800a4b0 <acc_dll_plateau_finder+0x448>
 800a082:	f1a0 0902 	sub.w	r9, r0, #2
 800a086:	2100      	movs	r1, #0
 800a088:	fa1f f989 	uxth.w	r9, r9
 800a08c:	2301      	movs	r3, #1
 800a08e:	ed9f 7ad2 	vldr	s14, [pc, #840]	; 800a3d8 <acc_dll_plateau_finder+0x370>
 800a092:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a096:	9205      	str	r2, [sp, #20]
 800a098:	f109 0902 	add.w	r9, r9, #2
 800a09c:	460c      	mov	r4, r1
 800a09e:	460e      	mov	r6, r1
 800a0a0:	461d      	mov	r5, r3
 800a0a2:	e006      	b.n	800a0b2 <acc_dll_plateau_finder+0x4a>
 800a0a4:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800a0a8:	42aa      	cmp	r2, r5
 800a0aa:	d019      	beq.n	800a0e0 <acc_dll_plateau_finder+0x78>
 800a0ac:	3501      	adds	r5, #1
 800a0ae:	45a9      	cmp	r9, r5
 800a0b0:	d04b      	beq.n	800a14a <acc_dll_plateau_finder+0xe2>
 800a0b2:	f8b8 2000 	ldrh.w	r2, [r8]
 800a0b6:	f838 0f02 	ldrh.w	r0, [r8, #2]!
 800a0ba:	ee07 2a90 	vmov	s15, r2
 800a0be:	4282      	cmp	r2, r0
 800a0c0:	bf34      	ite	cc
 800a0c2:	1a82      	subcc	r2, r0, r2
 800a0c4:	1a12      	subcs	r2, r2, r0
 800a0c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a0ca:	b2af      	uxth	r7, r5
 800a0cc:	b292      	uxth	r2, r2
 800a0ce:	3401      	adds	r4, #1
 800a0d0:	4439      	add	r1, r7
 800a0d2:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 800a0d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a0da:	b2a4      	uxth	r4, r4
 800a0dc:	b289      	uxth	r1, r1
 800a0de:	d9e1      	bls.n	800a0a4 <acc_dll_plateau_finder+0x3c>
 800a0e0:	2c02      	cmp	r4, #2
 800a0e2:	f240 8191 	bls.w	800a408 <acc_dll_plateau_finder+0x3a0>
 800a0e6:	ee07 1a90 	vmov	s15, r1
 800a0ea:	eef8 5a67 	vcvt.f32.u32	s11, s15
 800a0ee:	ee07 4a90 	vmov	s15, r4
 800a0f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0f6:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800a0fa:	eec5 7aa6 	vdiv.f32	s15, s11, s13
 800a0fe:	ab2e      	add	r3, sp, #184	; 0xb8
 800a100:	eb03 0046 	add.w	r0, r3, r6, lsl #1
 800a104:	3501      	adds	r5, #1
 800a106:	f106 0c01 	add.w	ip, r6, #1
 800a10a:	2100      	movs	r1, #0
 800a10c:	45a9      	cmp	r9, r5
 800a10e:	f820 4c34 	strh.w	r4, [r0, #-52]
 800a112:	f820 7c9c 	strh.w	r7, [r0, #-156]
 800a116:	460c      	mov	r4, r1
 800a118:	eec7 6a06 	vdiv.f32	s13, s14, s12
 800a11c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a120:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a124:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800a128:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a12c:	ee16 3a90 	vmov	r3, s13
 800a130:	ee17 2a90 	vmov	r2, s15
 800a134:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800a138:	f82a 2016 	strh.w	r2, [sl, r6, lsl #1]
 800a13c:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 800a3d8 <acc_dll_plateau_finder+0x370>
 800a140:	f820 3c68 	strh.w	r3, [r0, #-104]
 800a144:	fa1f f68c 	uxth.w	r6, ip
 800a148:	d1b3      	bne.n	800a0b2 <acc_dll_plateau_finder+0x4a>
 800a14a:	9d05      	ldr	r5, [sp, #20]
 800a14c:	f7fb fb60 	bl	8005810 <acc_rss_integration_log_level>
 800a150:	2803      	cmp	r0, #3
 800a152:	f200 817f 	bhi.w	800a454 <acc_dll_plateau_finder+0x3ec>
 800a156:	b33e      	cbz	r6, 800a1a8 <acc_dll_plateau_finder+0x140>
 800a158:	f8df 929c 	ldr.w	r9, [pc, #668]	; 800a3f8 <acc_dll_plateau_finder+0x390>
 800a15c:	4c9f      	ldr	r4, [pc, #636]	; (800a3dc <acc_dll_plateau_finder+0x374>)
 800a15e:	4fa0      	ldr	r7, [pc, #640]	; (800a3e0 <acc_dll_plateau_finder+0x378>)
 800a160:	f04f 0b00 	mov.w	fp, #0
 800a164:	46a8      	mov	r8, r5
 800a166:	f7fb fb53 	bl	8005810 <acc_rss_integration_log_level>
 800a16a:	2803      	cmp	r0, #3
 800a16c:	d915      	bls.n	800a19a <acc_dll_plateau_finder+0x132>
 800a16e:	a914      	add	r1, sp, #80	; 0x50
 800a170:	aa21      	add	r2, sp, #132	; 0x84
 800a172:	ab07      	add	r3, sp, #28
 800a174:	f831 001b 	ldrh.w	r0, [r1, fp, lsl #1]
 800a178:	f832 101b 	ldrh.w	r1, [r2, fp, lsl #1]
 800a17c:	f833 201b 	ldrh.w	r2, [r3, fp, lsl #1]
 800a180:	f83a 301b 	ldrh.w	r3, [sl, fp, lsl #1]
 800a184:	e9cd 1002 	strd	r1, r0, [sp, #8]
 800a188:	e9cd 2300 	strd	r2, r3, [sp]
 800a18c:	4639      	mov	r1, r7
 800a18e:	f8d9 5034 	ldr.w	r5, [r9, #52]	; 0x34
 800a192:	465b      	mov	r3, fp
 800a194:	4622      	mov	r2, r4
 800a196:	2004      	movs	r0, #4
 800a198:	47a8      	blx	r5
 800a19a:	f10b 0b01 	add.w	fp, fp, #1
 800a19e:	fa1f f38b 	uxth.w	r3, fp
 800a1a2:	42b3      	cmp	r3, r6
 800a1a4:	d3df      	bcc.n	800a166 <acc_dll_plateau_finder+0xfe>
 800a1a6:	4645      	mov	r5, r8
 800a1a8:	9b04      	ldr	r3, [sp, #16]
 800a1aa:	f8b3 b000 	ldrh.w	fp, [r3]
 800a1ae:	f248 73cf 	movw	r3, #34767	; 0x87cf
 800a1b2:	459b      	cmp	fp, r3
 800a1b4:	f240 8161 	bls.w	800a47a <acc_dll_plateau_finder+0x412>
 800a1b8:	f5ab 4300 	sub.w	r3, fp, #32768	; 0x8000
 800a1bc:	ee07 3a90 	vmov	s15, r3
 800a1c0:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800a3e4 <acc_dll_plateau_finder+0x37c>
 800a1c4:	ed9f 5a88 	vldr	s10, [pc, #544]	; 800a3e8 <acc_dll_plateau_finder+0x380>
 800a1c8:	eddf 6a88 	vldr	s13, [pc, #544]	; 800a3ec <acc_dll_plateau_finder+0x384>
 800a1cc:	eddf 5a88 	vldr	s11, [pc, #544]	; 800a3f0 <acc_dll_plateau_finder+0x388>
 800a1d0:	ed9f 6a88 	vldr	s12, [pc, #544]	; 800a3f4 <acc_dll_plateau_finder+0x38c>
 800a1d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a1d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a1dc:	ee67 7a85 	vmul.f32	s15, s15, s10
 800a1e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a1e4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800a1e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a1ec:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800a1f0:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a1f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a1f8:	ee17 3a90 	vmov	r3, s15
 800a1fc:	b29c      	uxth	r4, r3
 800a1fe:	f7fb fb07 	bl	8005810 <acc_rss_integration_log_level>
 800a202:	2803      	cmp	r0, #3
 800a204:	f200 812e 	bhi.w	800a464 <acc_dll_plateau_finder+0x3fc>
 800a208:	2e00      	cmp	r6, #0
 800a20a:	f000 814b 	beq.w	800a4a4 <acc_dll_plateau_finder+0x43c>
 800a20e:	f04f 0900 	mov.w	r9, #0
 800a212:	46c8      	mov	r8, r9
 800a214:	464b      	mov	r3, r9
 800a216:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 800a21a:	4627      	mov	r7, r4
 800a21c:	e010      	b.n	800a240 <acc_dll_plateau_finder+0x1d8>
 800a21e:	f5ab 62fa 	sub.w	r2, fp, #2000	; 0x7d0
 800a222:	4294      	cmp	r4, r2
 800a224:	f200 8109 	bhi.w	800a43a <acc_dll_plateau_finder+0x3d2>
 800a228:	f108 0201 	add.w	r2, r8, #1
 800a22c:	f825 3018 	strh.w	r3, [r5, r8, lsl #1]
 800a230:	fa1f f882 	uxth.w	r8, r2
 800a234:	f109 0901 	add.w	r9, r9, #1
 800a238:	fa1f f389 	uxth.w	r3, r9
 800a23c:	429e      	cmp	r6, r3
 800a23e:	d916      	bls.n	800a26e <acc_dll_plateau_finder+0x206>
 800a240:	f83a 4b02 	ldrh.w	r4, [sl], #2
 800a244:	f241 3287 	movw	r2, #4999	; 0x1387
 800a248:	4294      	cmp	r4, r2
 800a24a:	d8e8      	bhi.n	800a21e <acc_dll_plateau_finder+0x1b6>
 800a24c:	f7fb fae0 	bl	8005810 <acc_rss_integration_log_level>
 800a250:	2803      	cmp	r0, #3
 800a252:	d9ef      	bls.n	800a234 <acc_dll_plateau_finder+0x1cc>
 800a254:	4a68      	ldr	r2, [pc, #416]	; (800a3f8 <acc_dll_plateau_finder+0x390>)
 800a256:	4962      	ldr	r1, [pc, #392]	; (800a3e0 <acc_dll_plateau_finder+0x378>)
 800a258:	4623      	mov	r3, r4
 800a25a:	2004      	movs	r0, #4
 800a25c:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800a25e:	4a67      	ldr	r2, [pc, #412]	; (800a3fc <acc_dll_plateau_finder+0x394>)
 800a260:	f109 0901 	add.w	r9, r9, #1
 800a264:	47a0      	blx	r4
 800a266:	fa1f f389 	uxth.w	r3, r9
 800a26a:	429e      	cmp	r6, r3
 800a26c:	d8e8      	bhi.n	800a240 <acc_dll_plateau_finder+0x1d8>
 800a26e:	f1b8 0f01 	cmp.w	r8, #1
 800a272:	463c      	mov	r4, r7
 800a274:	f240 8112 	bls.w	800a49c <acc_dll_plateau_finder+0x434>
 800a278:	f1a8 0a02 	sub.w	sl, r8, #2
 800a27c:	fa0f fe8a 	sxth.w	lr, sl
 800a280:	f10e 0901 	add.w	r9, lr, #1
 800a284:	fa1f fa8a 	uxth.w	sl, sl
 800a288:	eb05 0949 	add.w	r9, r5, r9, lsl #1
 800a28c:	46ac      	mov	ip, r5
 800a28e:	f1be 0f00 	cmp.w	lr, #0
 800a292:	db23      	blt.n	800a2dc <acc_dll_plateau_finder+0x274>
 800a294:	4649      	mov	r1, r9
 800a296:	4670      	mov	r0, lr
 800a298:	2500      	movs	r5, #0
 800a29a:	f831 6d02 	ldrh.w	r6, [r1, #-2]!
 800a29e:	ab2e      	add	r3, sp, #184	; 0xb8
 800a2a0:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 800a2a4:	884f      	ldrh	r7, [r1, #2]
 800a2a6:	f833 2c68 	ldrh.w	r2, [r3, #-104]
 800a2aa:	ab2e      	add	r3, sp, #184	; 0xb8
 800a2ac:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 800a2b0:	42a2      	cmp	r2, r4
 800a2b2:	f833 3c68 	ldrh.w	r3, [r3, #-104]
 800a2b6:	bf8c      	ite	hi
 800a2b8:	1b12      	subhi	r2, r2, r4
 800a2ba:	1aa2      	subls	r2, r4, r2
 800a2bc:	42a3      	cmp	r3, r4
 800a2be:	bf8c      	ite	hi
 800a2c0:	1b1b      	subhi	r3, r3, r4
 800a2c2:	1ae3      	subls	r3, r4, r3
 800a2c4:	b292      	uxth	r2, r2
 800a2c6:	b29b      	uxth	r3, r3
 800a2c8:	429a      	cmp	r2, r3
 800a2ca:	d902      	bls.n	800a2d2 <acc_dll_plateau_finder+0x26a>
 800a2cc:	800f      	strh	r7, [r1, #0]
 800a2ce:	804e      	strh	r6, [r1, #2]
 800a2d0:	2501      	movs	r5, #1
 800a2d2:	3801      	subs	r0, #1
 800a2d4:	0403      	lsls	r3, r0, #16
 800a2d6:	d5e0      	bpl.n	800a29a <acc_dll_plateau_finder+0x232>
 800a2d8:	2d00      	cmp	r5, #0
 800a2da:	d1d8      	bne.n	800a28e <acc_dll_plateau_finder+0x226>
 800a2dc:	f8bc 3000 	ldrh.w	r3, [ip]
 800a2e0:	aa2e      	add	r2, sp, #184	; 0xb8
 800a2e2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800a2e6:	4665      	mov	r5, ip
 800a2e8:	1ca8      	adds	r0, r5, #2
 800a2ea:	f833 1c68 	ldrh.w	r1, [r3, #-104]
 800a2ee:	eb00 004a 	add.w	r0, r0, sl, lsl #1
 800a2f2:	4662      	mov	r2, ip
 800a2f4:	f04f 0a01 	mov.w	sl, #1
 800a2f8:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 800a2fc:	ac2e      	add	r4, sp, #184	; 0xb8
 800a2fe:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800a302:	f833 3c68 	ldrh.w	r3, [r3, #-104]
 800a306:	428b      	cmp	r3, r1
 800a308:	bf8c      	ite	hi
 800a30a:	1a5b      	subhi	r3, r3, r1
 800a30c:	1acb      	subls	r3, r1, r3
 800a30e:	b29b      	uxth	r3, r3
 800a310:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a314:	bf3c      	itt	cc
 800a316:	f10a 0a01 	addcc.w	sl, sl, #1
 800a31a:	fa1f fa8a 	uxthcc.w	sl, sl
 800a31e:	4290      	cmp	r0, r2
 800a320:	d1ea      	bne.n	800a2f8 <acc_dll_plateau_finder+0x290>
 800a322:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 800a3f8 <acc_dll_plateau_finder+0x390>
 800a326:	4f36      	ldr	r7, [pc, #216]	; (800a400 <acc_dll_plateau_finder+0x398>)
 800a328:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a32c:	f1ba 0f00 	cmp.w	sl, #0
 800a330:	d031      	beq.n	800a396 <acc_dll_plateau_finder+0x32e>
 800a332:	2400      	movs	r4, #0
 800a334:	4e2a      	ldr	r6, [pc, #168]	; (800a3e0 <acc_dll_plateau_finder+0x378>)
 800a336:	46a6      	mov	lr, r4
 800a338:	4622      	mov	r2, r4
 800a33a:	e004      	b.n	800a346 <acc_dll_plateau_finder+0x2de>
 800a33c:	3401      	adds	r4, #1
 800a33e:	b2a4      	uxth	r4, r4
 800a340:	4554      	cmp	r4, sl
 800a342:	4622      	mov	r2, r4
 800a344:	d224      	bcs.n	800a390 <acc_dll_plateau_finder+0x328>
 800a346:	0053      	lsls	r3, r2, #1
 800a348:	3302      	adds	r3, #2
 800a34a:	f835 1012 	ldrh.w	r1, [r5, r2, lsl #1]
 800a34e:	5ae8      	ldrh	r0, [r5, r3]
 800a350:	f10d 0cb8 	add.w	ip, sp, #184	; 0xb8
 800a354:	eb0c 0b41 	add.w	fp, ip, r1, lsl #1
 800a358:	eb0c 0c40 	add.w	ip, ip, r0, lsl #1
 800a35c:	f83b bc34 	ldrh.w	fp, [fp, #-52]
 800a360:	f83c cc34 	ldrh.w	ip, [ip, #-52]
 800a364:	45e3      	cmp	fp, ip
 800a366:	d2e9      	bcs.n	800a33c <acc_dll_plateau_finder+0x2d4>
 800a368:	f825 0012 	strh.w	r0, [r5, r2, lsl #1]
 800a36c:	52e9      	strh	r1, [r5, r3]
 800a36e:	f7fb fa4f 	bl	8005810 <acc_rss_integration_log_level>
 800a372:	2803      	cmp	r0, #3
 800a374:	d97e      	bls.n	800a474 <acc_dll_plateau_finder+0x40c>
 800a376:	3401      	adds	r4, #1
 800a378:	463a      	mov	r2, r7
 800a37a:	b2a4      	uxth	r4, r4
 800a37c:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
 800a380:	4631      	mov	r1, r6
 800a382:	2004      	movs	r0, #4
 800a384:	4798      	blx	r3
 800a386:	4554      	cmp	r4, sl
 800a388:	f04f 0e01 	mov.w	lr, #1
 800a38c:	4622      	mov	r2, r4
 800a38e:	d3da      	bcc.n	800a346 <acc_dll_plateau_finder+0x2de>
 800a390:	f1be 0f00 	cmp.w	lr, #0
 800a394:	d1ca      	bne.n	800a32c <acc_dll_plateau_finder+0x2c4>
 800a396:	f8df a060 	ldr.w	sl, [pc, #96]	; 800a3f8 <acc_dll_plateau_finder+0x390>
 800a39a:	f8df 9068 	ldr.w	r9, [pc, #104]	; 800a404 <acc_dll_plateau_finder+0x39c>
 800a39e:	4f10      	ldr	r7, [pc, #64]	; (800a3e0 <acc_dll_plateau_finder+0x378>)
 800a3a0:	2400      	movs	r4, #0
 800a3a2:	f7fb fa35 	bl	8005810 <acc_rss_integration_log_level>
 800a3a6:	2803      	cmp	r0, #3
 800a3a8:	d90d      	bls.n	800a3c6 <acc_dll_plateau_finder+0x35e>
 800a3aa:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
 800a3ae:	aa2e      	add	r2, sp, #184	; 0xb8
 800a3b0:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800a3b4:	4639      	mov	r1, r7
 800a3b6:	f832 2c68 	ldrh.w	r2, [r2, #-104]
 800a3ba:	9200      	str	r2, [sp, #0]
 800a3bc:	f8da 6034 	ldr.w	r6, [sl, #52]	; 0x34
 800a3c0:	464a      	mov	r2, r9
 800a3c2:	2004      	movs	r0, #4
 800a3c4:	47b0      	blx	r6
 800a3c6:	3401      	adds	r4, #1
 800a3c8:	b2a3      	uxth	r3, r4
 800a3ca:	4598      	cmp	r8, r3
 800a3cc:	d8e9      	bhi.n	800a3a2 <acc_dll_plateau_finder+0x33a>
 800a3ce:	4640      	mov	r0, r8
 800a3d0:	b02f      	add	sp, #188	; 0xbc
 800a3d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3d6:	bf00      	nop
 800a3d8:	00000000 	.word	0x00000000
 800a3dc:	0800fd00 	.word	0x0800fd00
 800a3e0:	0800fc84 	.word	0x0800fc84
 800a3e4:	3f99999a 	.word	0x3f99999a
 800a3e8:	37800000 	.word	0x37800000
 800a3ec:	3f866666 	.word	0x3f866666
 800a3f0:	47800000 	.word	0x47800000
 800a3f4:	47000000 	.word	0x47000000
 800a3f8:	200004c0 	.word	0x200004c0
 800a3fc:	0800fd7c 	.word	0x0800fd7c
 800a400:	0800fddc 	.word	0x0800fddc
 800a404:	0800fe10 	.word	0x0800fe10
 800a408:	f7fb fa02 	bl	8005810 <acc_rss_integration_log_level>
 800a40c:	2803      	cmp	r0, #3
 800a40e:	d90f      	bls.n	800a430 <acc_dll_plateau_finder+0x3c8>
 800a410:	9401      	str	r4, [sp, #4]
 800a412:	f838 2c02 	ldrh.w	r2, [r8, #-2]
 800a416:	4b2d      	ldr	r3, [pc, #180]	; (800a4cc <acc_dll_plateau_finder+0x464>)
 800a418:	9200      	str	r2, [sp, #0]
 800a41a:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 800a41c:	492c      	ldr	r1, [pc, #176]	; (800a4d0 <acc_dll_plateau_finder+0x468>)
 800a41e:	4a2d      	ldr	r2, [pc, #180]	; (800a4d4 <acc_dll_plateau_finder+0x46c>)
 800a420:	462b      	mov	r3, r5
 800a422:	2004      	movs	r0, #4
 800a424:	2400      	movs	r4, #0
 800a426:	47b8      	blx	r7
 800a428:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800a4d8 <acc_dll_plateau_finder+0x470>
 800a42c:	4621      	mov	r1, r4
 800a42e:	e63d      	b.n	800a0ac <acc_dll_plateau_finder+0x44>
 800a430:	2100      	movs	r1, #0
 800a432:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800a4d8 <acc_dll_plateau_finder+0x470>
 800a436:	460c      	mov	r4, r1
 800a438:	e638      	b.n	800a0ac <acc_dll_plateau_finder+0x44>
 800a43a:	f7fb f9e9 	bl	8005810 <acc_rss_integration_log_level>
 800a43e:	2803      	cmp	r0, #3
 800a440:	f67f aef8 	bls.w	800a234 <acc_dll_plateau_finder+0x1cc>
 800a444:	4a21      	ldr	r2, [pc, #132]	; (800a4cc <acc_dll_plateau_finder+0x464>)
 800a446:	4922      	ldr	r1, [pc, #136]	; (800a4d0 <acc_dll_plateau_finder+0x468>)
 800a448:	4623      	mov	r3, r4
 800a44a:	2004      	movs	r0, #4
 800a44c:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800a44e:	4a23      	ldr	r2, [pc, #140]	; (800a4dc <acc_dll_plateau_finder+0x474>)
 800a450:	47a0      	blx	r4
 800a452:	e6ef      	b.n	800a234 <acc_dll_plateau_finder+0x1cc>
 800a454:	4633      	mov	r3, r6
 800a456:	491d      	ldr	r1, [pc, #116]	; (800a4cc <acc_dll_plateau_finder+0x464>)
 800a458:	4a21      	ldr	r2, [pc, #132]	; (800a4e0 <acc_dll_plateau_finder+0x478>)
 800a45a:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 800a45c:	491c      	ldr	r1, [pc, #112]	; (800a4d0 <acc_dll_plateau_finder+0x468>)
 800a45e:	2004      	movs	r0, #4
 800a460:	47a0      	blx	r4
 800a462:	e678      	b.n	800a156 <acc_dll_plateau_finder+0xee>
 800a464:	4b19      	ldr	r3, [pc, #100]	; (800a4cc <acc_dll_plateau_finder+0x464>)
 800a466:	4a1f      	ldr	r2, [pc, #124]	; (800a4e4 <acc_dll_plateau_finder+0x47c>)
 800a468:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 800a46a:	4919      	ldr	r1, [pc, #100]	; (800a4d0 <acc_dll_plateau_finder+0x468>)
 800a46c:	4623      	mov	r3, r4
 800a46e:	2004      	movs	r0, #4
 800a470:	47b8      	blx	r7
 800a472:	e6c9      	b.n	800a208 <acc_dll_plateau_finder+0x1a0>
 800a474:	f04f 0e01 	mov.w	lr, #1
 800a478:	e760      	b.n	800a33c <acc_dll_plateau_finder+0x2d4>
 800a47a:	f7fb f9c9 	bl	8005810 <acc_rss_integration_log_level>
 800a47e:	2803      	cmp	r0, #3
 800a480:	d910      	bls.n	800a4a4 <acc_dll_plateau_finder+0x43c>
 800a482:	4b12      	ldr	r3, [pc, #72]	; (800a4cc <acc_dll_plateau_finder+0x464>)
 800a484:	4a18      	ldr	r2, [pc, #96]	; (800a4e8 <acc_dll_plateau_finder+0x480>)
 800a486:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800a488:	4911      	ldr	r1, [pc, #68]	; (800a4d0 <acc_dll_plateau_finder+0x468>)
 800a48a:	465b      	mov	r3, fp
 800a48c:	2004      	movs	r0, #4
 800a48e:	47a0      	blx	r4
 800a490:	f04f 0800 	mov.w	r8, #0
 800a494:	4640      	mov	r0, r8
 800a496:	b02f      	add	sp, #188	; 0xbc
 800a498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a49c:	f1b8 0f00 	cmp.w	r8, #0
 800a4a0:	f47f af79 	bne.w	800a396 <acc_dll_plateau_finder+0x32e>
 800a4a4:	f04f 0800 	mov.w	r8, #0
 800a4a8:	4640      	mov	r0, r8
 800a4aa:	b02f      	add	sp, #188	; 0xbc
 800a4ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4b0:	f7fb f9ae 	bl	8005810 <acc_rss_integration_log_level>
 800a4b4:	2803      	cmp	r0, #3
 800a4b6:	d801      	bhi.n	800a4bc <acc_dll_plateau_finder+0x454>
 800a4b8:	2600      	movs	r6, #0
 800a4ba:	e675      	b.n	800a1a8 <acc_dll_plateau_finder+0x140>
 800a4bc:	2300      	movs	r3, #0
 800a4be:	461e      	mov	r6, r3
 800a4c0:	e7c9      	b.n	800a456 <acc_dll_plateau_finder+0x3ee>
 800a4c2:	4803      	ldr	r0, [pc, #12]	; (800a4d0 <acc_dll_plateau_finder+0x468>)
 800a4c4:	2128      	movs	r1, #40	; 0x28
 800a4c6:	f7fd fbc7 	bl	8007c58 <acc_assert_fail>
 800a4ca:	bf00      	nop
 800a4cc:	200004c0 	.word	0x200004c0
 800a4d0:	0800fc84 	.word	0x0800fc84
 800a4d4:	0800fc98 	.word	0x0800fc98
 800a4d8:	00000000 	.word	0x00000000
 800a4dc:	0800fdac 	.word	0x0800fdac
 800a4e0:	0800fcec 	.word	0x0800fcec
 800a4e4:	0800fd6c 	.word	0x0800fd6c
 800a4e8:	0800fd44 	.word	0x0800fd44

0800a4ec <acc_cpd_linear_sweep_load_program>:
 800a4ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4f0:	ed2d 8b04 	vpush	{d8-d9}
 800a4f4:	4614      	mov	r4, r2
 800a4f6:	b08f      	sub	sp, #60	; 0x3c
 800a4f8:	461a      	mov	r2, r3
 800a4fa:	4606      	mov	r6, r0
 800a4fc:	460d      	mov	r5, r1
 800a4fe:	ee08 0a90 	vmov	s17, r0
 800a502:	4601      	mov	r1, r0
 800a504:	469b      	mov	fp, r3
 800a506:	2016      	movs	r0, #22
 800a508:	23bc      	movs	r3, #188	; 0xbc
 800a50a:	f7fd fca3 	bl	8007e54 <acc_probes_execute_struct>
 800a50e:	ab0d      	add	r3, sp, #52	; 0x34
 800a510:	4622      	mov	r2, r4
 800a512:	9300      	str	r3, [sp, #0]
 800a514:	4629      	mov	r1, r5
 800a516:	4630      	mov	r0, r6
 800a518:	2400      	movs	r4, #0
 800a51a:	ab0c      	add	r3, sp, #48	; 0x30
 800a51c:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
 800a520:	f7fc ff66 	bl	80073f0 <acc_sensor_protocol_r2_prepare_load>
 800a524:	900b      	str	r0, [sp, #44]	; 0x2c
 800a526:	b928      	cbnz	r0, 800a534 <acc_cpd_linear_sweep_load_program+0x48>
 800a528:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a52a:	b00f      	add	sp, #60	; 0x3c
 800a52c:	ecbd 8b04 	vpop	{d8-d9}
 800a530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a534:	f7fb f96c 	bl	8005810 <acc_rss_integration_log_level>
 800a538:	2803      	cmp	r0, #3
 800a53a:	ee09 5a10 	vmov	s18, r5
 800a53e:	d905      	bls.n	800a54c <acc_cpd_linear_sweep_load_program+0x60>
 800a540:	4b05      	ldr	r3, [pc, #20]	; (800a558 <acc_cpd_linear_sweep_load_program+0x6c>)
 800a542:	4a06      	ldr	r2, [pc, #24]	; (800a55c <acc_cpd_linear_sweep_load_program+0x70>)
 800a544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a546:	4906      	ldr	r1, [pc, #24]	; (800a560 <acc_cpd_linear_sweep_load_program+0x74>)
 800a548:	2004      	movs	r0, #4
 800a54a:	4798      	blx	r3
 800a54c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a54e:	ed9f 8a05 	vldr	s16, [pc, #20]	; 800a564 <acc_cpd_linear_sweep_load_program+0x78>
 800a552:	f04f 0a00 	mov.w	sl, #0
 800a556:	e07b      	b.n	800a650 <acc_cpd_linear_sweep_load_program+0x164>
 800a558:	200004c0 	.word	0x200004c0
 800a55c:	0800fe34 	.word	0x0800fe34
 800a560:	0800fe5c 	.word	0x0800fe5c
 800a564:	3751b717 	.word	0x3751b717
 800a568:	f002 f898 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800a56c:	2223      	movs	r2, #35	; 0x23
 800a56e:	2103      	movs	r1, #3
 800a570:	4603      	mov	r3, r0
 800a572:	e9cd 2100 	strd	r2, r1, [sp]
 800a576:	4620      	mov	r0, r4
 800a578:	4632      	mov	r2, r6
 800a57a:	4629      	mov	r1, r5
 800a57c:	f001 ff3e 	bl	800c3fc <acc_confprogram_patch_offset>
 800a580:	f002 f88c 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800a584:	227d      	movs	r2, #125	; 0x7d
 800a586:	2100      	movs	r1, #0
 800a588:	4603      	mov	r3, r0
 800a58a:	e9cd 2100 	strd	r2, r1, [sp]
 800a58e:	4620      	mov	r0, r4
 800a590:	4632      	mov	r2, r6
 800a592:	4629      	mov	r1, r5
 800a594:	f001 ff32 	bl	800c3fc <acc_confprogram_patch_offset>
 800a598:	f002 f880 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800a59c:	2281      	movs	r2, #129	; 0x81
 800a59e:	2101      	movs	r1, #1
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	e9cd 2100 	strd	r2, r1, [sp]
 800a5a6:	4620      	mov	r0, r4
 800a5a8:	4632      	mov	r2, r6
 800a5aa:	4629      	mov	r1, r5
 800a5ac:	f001 ff26 	bl	800c3fc <acc_confprogram_patch_offset>
 800a5b0:	f002 f874 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800a5b4:	2102      	movs	r1, #2
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	2275      	movs	r2, #117	; 0x75
 800a5ba:	9101      	str	r1, [sp, #4]
 800a5bc:	4629      	mov	r1, r5
 800a5be:	9200      	str	r2, [sp, #0]
 800a5c0:	4620      	mov	r0, r4
 800a5c2:	4632      	mov	r2, r6
 800a5c4:	f001 ff1a 	bl	800c3fc <acc_confprogram_patch_offset>
 800a5c8:	f002 f868 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800a5cc:	f89b 20ac 	ldrb.w	r2, [fp, #172]	; 0xac
 800a5d0:	9201      	str	r2, [sp, #4]
 800a5d2:	2252      	movs	r2, #82	; 0x52
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	4629      	mov	r1, r5
 800a5d8:	9200      	str	r2, [sp, #0]
 800a5da:	4620      	mov	r0, r4
 800a5dc:	4632      	mov	r2, r6
 800a5de:	f001 ff0d 	bl	800c3fc <acc_confprogram_patch_offset>
 800a5e2:	eddb 7a2c 	vldr	s15, [fp, #176]	; 0xb0
 800a5e6:	ee67 7a88 	vmul.f32	s15, s15, s16
 800a5ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a5ee:	ee17 7a90 	vmov	r7, s15
 800a5f2:	f002 f853 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800a5f6:	3f01      	subs	r7, #1
 800a5f8:	2268      	movs	r2, #104	; 0x68
 800a5fa:	b2bf      	uxth	r7, r7
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	4629      	mov	r1, r5
 800a600:	e9cd 2700 	strd	r2, r7, [sp]
 800a604:	4620      	mov	r0, r4
 800a606:	4632      	mov	r2, r6
 800a608:	f001 fef8 	bl	800c3fc <acc_confprogram_patch_offset>
 800a60c:	f002 f846 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800a610:	f8db 20b4 	ldr.w	r2, [fp, #180]	; 0xb4
 800a614:	9201      	str	r2, [sp, #4]
 800a616:	2253      	movs	r2, #83	; 0x53
 800a618:	4603      	mov	r3, r0
 800a61a:	9200      	str	r2, [sp, #0]
 800a61c:	4629      	mov	r1, r5
 800a61e:	4632      	mov	r2, r6
 800a620:	4620      	mov	r0, r4
 800a622:	f001 feeb 	bl	800c3fc <acc_confprogram_patch_offset>
 800a626:	f8db 30b4 	ldr.w	r3, [fp, #180]	; 0xb4
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	f040 8465 	bne.w	800aefa <acc_cpd_linear_sweep_load_program+0xa0e>
 800a630:	ee19 2a10 	vmov	r2, s18
 800a634:	464b      	mov	r3, r9
 800a636:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 800a63a:	ee18 0a90 	vmov	r0, s17
 800a63e:	f7fc fbe7 	bl	8006e10 <acc_sensor_r2_load_confmem>
 800a642:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a644:	f240 7211 	movw	r2, #1809	; 0x711
 800a648:	449a      	add	sl, r3
 800a64a:	4592      	cmp	sl, r2
 800a64c:	f200 8464 	bhi.w	800af18 <acc_cpd_linear_sweep_load_program+0xa2c>
 800a650:	f5ca 62e2 	rsb	r2, sl, #1808	; 0x710
 800a654:	3202      	adds	r2, #2
 800a656:	429a      	cmp	r2, r3
 800a658:	bf28      	it	cs
 800a65a:	461a      	movcs	r2, r3
 800a65c:	ea4f 035a 	mov.w	r3, sl, lsr #1
 800a660:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800a662:	9302      	str	r3, [sp, #8]
 800a664:	461d      	mov	r5, r3
 800a666:	4691      	mov	r9, r2
 800a668:	f002 f814 	bl	800c694 <acc_image_a111_r2c_sweep_get>
 800a66c:	ea4f 0259 	mov.w	r2, r9, lsr #1
 800a670:	4621      	mov	r1, r4
 800a672:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 800a676:	f001 ffaf 	bl	800c5d8 <acc_confprogram_copy>
 800a67a:	f002 f80f 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800a67e:	fa1f f689 	uxth.w	r6, r9
 800a682:	fa1f f58a 	uxth.w	r5, sl
 800a686:	f8db 2000 	ldr.w	r2, [fp]
 800a68a:	9201      	str	r2, [sp, #4]
 800a68c:	2750      	movs	r7, #80	; 0x50
 800a68e:	4603      	mov	r3, r0
 800a690:	4632      	mov	r2, r6
 800a692:	4629      	mov	r1, r5
 800a694:	4620      	mov	r0, r4
 800a696:	9700      	str	r7, [sp, #0]
 800a698:	f001 feb0 	bl	800c3fc <acc_confprogram_patch_offset>
 800a69c:	f001 fffe 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800a6a0:	274e      	movs	r7, #78	; 0x4e
 800a6a2:	f8db 2004 	ldr.w	r2, [fp, #4]
 800a6a6:	9201      	str	r2, [sp, #4]
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	4632      	mov	r2, r6
 800a6ac:	4629      	mov	r1, r5
 800a6ae:	4620      	mov	r0, r4
 800a6b0:	9700      	str	r7, [sp, #0]
 800a6b2:	f001 fea3 	bl	800c3fc <acc_confprogram_patch_offset>
 800a6b6:	f001 fff1 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800a6ba:	274f      	movs	r7, #79	; 0x4f
 800a6bc:	f8db 2008 	ldr.w	r2, [fp, #8]
 800a6c0:	9201      	str	r2, [sp, #4]
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	4632      	mov	r2, r6
 800a6c6:	4629      	mov	r1, r5
 800a6c8:	4620      	mov	r0, r4
 800a6ca:	9700      	str	r7, [sp, #0]
 800a6cc:	f001 fe96 	bl	800c3fc <acc_confprogram_patch_offset>
 800a6d0:	f001 ffe4 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800a6d4:	274c      	movs	r7, #76	; 0x4c
 800a6d6:	f8bb 200c 	ldrh.w	r2, [fp, #12]
 800a6da:	9201      	str	r2, [sp, #4]
 800a6dc:	4603      	mov	r3, r0
 800a6de:	4632      	mov	r2, r6
 800a6e0:	4629      	mov	r1, r5
 800a6e2:	4620      	mov	r0, r4
 800a6e4:	9700      	str	r7, [sp, #0]
 800a6e6:	f001 fe89 	bl	800c3fc <acc_confprogram_patch_offset>
 800a6ea:	f001 ffd7 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800a6ee:	2726      	movs	r7, #38	; 0x26
 800a6f0:	f8db 2010 	ldr.w	r2, [fp, #16]
 800a6f4:	9201      	str	r2, [sp, #4]
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	4632      	mov	r2, r6
 800a6fa:	4629      	mov	r1, r5
 800a6fc:	4620      	mov	r0, r4
 800a6fe:	9700      	str	r7, [sp, #0]
 800a700:	f001 fe7c 	bl	800c3fc <acc_confprogram_patch_offset>
 800a704:	f001 ffca 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800a708:	2773      	movs	r7, #115	; 0x73
 800a70a:	f8db 2014 	ldr.w	r2, [fp, #20]
 800a70e:	9201      	str	r2, [sp, #4]
 800a710:	4603      	mov	r3, r0
 800a712:	4632      	mov	r2, r6
 800a714:	4629      	mov	r1, r5
 800a716:	4620      	mov	r0, r4
 800a718:	9700      	str	r7, [sp, #0]
 800a71a:	f001 fe6f 	bl	800c3fc <acc_confprogram_patch_offset>
 800a71e:	f001 ffbd 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800a722:	2762      	movs	r7, #98	; 0x62
 800a724:	f8db 2018 	ldr.w	r2, [fp, #24]
 800a728:	9201      	str	r2, [sp, #4]
 800a72a:	4603      	mov	r3, r0
 800a72c:	4632      	mov	r2, r6
 800a72e:	4629      	mov	r1, r5
 800a730:	4620      	mov	r0, r4
 800a732:	9700      	str	r7, [sp, #0]
 800a734:	f001 fe62 	bl	800c3fc <acc_confprogram_patch_offset>
 800a738:	f001 ffb0 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800a73c:	2737      	movs	r7, #55	; 0x37
 800a73e:	f8db 201c 	ldr.w	r2, [fp, #28]
 800a742:	9201      	str	r2, [sp, #4]
 800a744:	4603      	mov	r3, r0
 800a746:	4632      	mov	r2, r6
 800a748:	4629      	mov	r1, r5
 800a74a:	4620      	mov	r0, r4
 800a74c:	9700      	str	r7, [sp, #0]
 800a74e:	f001 fe55 	bl	800c3fc <acc_confprogram_patch_offset>
 800a752:	f001 ffa3 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800a756:	2776      	movs	r7, #118	; 0x76
 800a758:	f8db 2020 	ldr.w	r2, [fp, #32]
 800a75c:	9201      	str	r2, [sp, #4]
 800a75e:	4603      	mov	r3, r0
 800a760:	4632      	mov	r2, r6
 800a762:	4629      	mov	r1, r5
 800a764:	4620      	mov	r0, r4
 800a766:	9700      	str	r7, [sp, #0]
 800a768:	f001 fe48 	bl	800c3fc <acc_confprogram_patch_offset>
 800a76c:	f001 ff96 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800a770:	2769      	movs	r7, #105	; 0x69
 800a772:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 800a776:	9201      	str	r2, [sp, #4]
 800a778:	4603      	mov	r3, r0
 800a77a:	4632      	mov	r2, r6
 800a77c:	4629      	mov	r1, r5
 800a77e:	4620      	mov	r0, r4
 800a780:	9700      	str	r7, [sp, #0]
 800a782:	f001 fe3b 	bl	800c3fc <acc_confprogram_patch_offset>
 800a786:	f001 ff89 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800a78a:	276a      	movs	r7, #106	; 0x6a
 800a78c:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 800a790:	9201      	str	r2, [sp, #4]
 800a792:	4603      	mov	r3, r0
 800a794:	4632      	mov	r2, r6
 800a796:	4629      	mov	r1, r5
 800a798:	4620      	mov	r0, r4
 800a79a:	9700      	str	r7, [sp, #0]
 800a79c:	f001 fe2e 	bl	800c3fc <acc_confprogram_patch_offset>
 800a7a0:	f001 ff7c 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800a7a4:	2719      	movs	r7, #25
 800a7a6:	f8db 2030 	ldr.w	r2, [fp, #48]	; 0x30
 800a7aa:	9201      	str	r2, [sp, #4]
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	4632      	mov	r2, r6
 800a7b0:	4629      	mov	r1, r5
 800a7b2:	4620      	mov	r0, r4
 800a7b4:	9700      	str	r7, [sp, #0]
 800a7b6:	f001 fe21 	bl	800c3fc <acc_confprogram_patch_offset>
 800a7ba:	f001 ff6f 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800a7be:	271a      	movs	r7, #26
 800a7c0:	f8db 2034 	ldr.w	r2, [fp, #52]	; 0x34
 800a7c4:	9201      	str	r2, [sp, #4]
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	4632      	mov	r2, r6
 800a7ca:	4629      	mov	r1, r5
 800a7cc:	4620      	mov	r0, r4
 800a7ce:	9700      	str	r7, [sp, #0]
 800a7d0:	f001 fe14 	bl	800c3fc <acc_confprogram_patch_offset>
 800a7d4:	f001 ff62 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800a7d8:	271b      	movs	r7, #27
 800a7da:	f8db 2038 	ldr.w	r2, [fp, #56]	; 0x38
 800a7de:	9201      	str	r2, [sp, #4]
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	4632      	mov	r2, r6
 800a7e4:	4629      	mov	r1, r5
 800a7e6:	4620      	mov	r0, r4
 800a7e8:	9700      	str	r7, [sp, #0]
 800a7ea:	f001 fe07 	bl	800c3fc <acc_confprogram_patch_offset>
 800a7ee:	f001 ff55 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800a7f2:	271c      	movs	r7, #28
 800a7f4:	f8db 203c 	ldr.w	r2, [fp, #60]	; 0x3c
 800a7f8:	9201      	str	r2, [sp, #4]
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	4632      	mov	r2, r6
 800a7fe:	4629      	mov	r1, r5
 800a800:	4620      	mov	r0, r4
 800a802:	9700      	str	r7, [sp, #0]
 800a804:	f001 fdfa 	bl	800c3fc <acc_confprogram_patch_offset>
 800a808:	f001 ff48 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800a80c:	271d      	movs	r7, #29
 800a80e:	f8db 2040 	ldr.w	r2, [fp, #64]	; 0x40
 800a812:	9201      	str	r2, [sp, #4]
 800a814:	4603      	mov	r3, r0
 800a816:	4632      	mov	r2, r6
 800a818:	4629      	mov	r1, r5
 800a81a:	4620      	mov	r0, r4
 800a81c:	9700      	str	r7, [sp, #0]
 800a81e:	f001 fded 	bl	800c3fc <acc_confprogram_patch_offset>
 800a822:	f001 ff3b 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800a826:	271e      	movs	r7, #30
 800a828:	f8db 2044 	ldr.w	r2, [fp, #68]	; 0x44
 800a82c:	9201      	str	r2, [sp, #4]
 800a82e:	4603      	mov	r3, r0
 800a830:	4632      	mov	r2, r6
 800a832:	4629      	mov	r1, r5
 800a834:	4620      	mov	r0, r4
 800a836:	9700      	str	r7, [sp, #0]
 800a838:	f001 fde0 	bl	800c3fc <acc_confprogram_patch_offset>
 800a83c:	f001 ff2e 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800a840:	2755      	movs	r7, #85	; 0x55
 800a842:	f8db 2048 	ldr.w	r2, [fp, #72]	; 0x48
 800a846:	9201      	str	r2, [sp, #4]
 800a848:	4603      	mov	r3, r0
 800a84a:	4632      	mov	r2, r6
 800a84c:	4629      	mov	r1, r5
 800a84e:	4620      	mov	r0, r4
 800a850:	9700      	str	r7, [sp, #0]
 800a852:	f001 fdd3 	bl	800c3fc <acc_confprogram_patch_offset>
 800a856:	f001 ff21 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800a85a:	2756      	movs	r7, #86	; 0x56
 800a85c:	f8db 204c 	ldr.w	r2, [fp, #76]	; 0x4c
 800a860:	9201      	str	r2, [sp, #4]
 800a862:	4603      	mov	r3, r0
 800a864:	4632      	mov	r2, r6
 800a866:	4629      	mov	r1, r5
 800a868:	4620      	mov	r0, r4
 800a86a:	9700      	str	r7, [sp, #0]
 800a86c:	f001 fdc6 	bl	800c3fc <acc_confprogram_patch_offset>
 800a870:	f001 ff14 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800a874:	2758      	movs	r7, #88	; 0x58
 800a876:	f8db 2050 	ldr.w	r2, [fp, #80]	; 0x50
 800a87a:	9201      	str	r2, [sp, #4]
 800a87c:	4603      	mov	r3, r0
 800a87e:	4632      	mov	r2, r6
 800a880:	4629      	mov	r1, r5
 800a882:	4620      	mov	r0, r4
 800a884:	9700      	str	r7, [sp, #0]
 800a886:	f001 fdb9 	bl	800c3fc <acc_confprogram_patch_offset>
 800a88a:	f001 ff07 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800a88e:	276b      	movs	r7, #107	; 0x6b
 800a890:	f8db 2054 	ldr.w	r2, [fp, #84]	; 0x54
 800a894:	9201      	str	r2, [sp, #4]
 800a896:	4603      	mov	r3, r0
 800a898:	4632      	mov	r2, r6
 800a89a:	4629      	mov	r1, r5
 800a89c:	4620      	mov	r0, r4
 800a89e:	9700      	str	r7, [sp, #0]
 800a8a0:	f001 fdac 	bl	800c3fc <acc_confprogram_patch_offset>
 800a8a4:	f001 fefa 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800a8a8:	2786      	movs	r7, #134	; 0x86
 800a8aa:	f8db 2058 	ldr.w	r2, [fp, #88]	; 0x58
 800a8ae:	9201      	str	r2, [sp, #4]
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	4632      	mov	r2, r6
 800a8b4:	4629      	mov	r1, r5
 800a8b6:	4620      	mov	r0, r4
 800a8b8:	9700      	str	r7, [sp, #0]
 800a8ba:	f001 fd9f 	bl	800c3fc <acc_confprogram_patch_offset>
 800a8be:	f001 feed 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800a8c2:	2764      	movs	r7, #100	; 0x64
 800a8c4:	f8db 205c 	ldr.w	r2, [fp, #92]	; 0x5c
 800a8c8:	9201      	str	r2, [sp, #4]
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	4632      	mov	r2, r6
 800a8ce:	4629      	mov	r1, r5
 800a8d0:	4620      	mov	r0, r4
 800a8d2:	9700      	str	r7, [sp, #0]
 800a8d4:	f001 fd92 	bl	800c3fc <acc_confprogram_patch_offset>
 800a8d8:	f001 fee0 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800a8dc:	2765      	movs	r7, #101	; 0x65
 800a8de:	f8db 2060 	ldr.w	r2, [fp, #96]	; 0x60
 800a8e2:	9201      	str	r2, [sp, #4]
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	4632      	mov	r2, r6
 800a8e8:	4629      	mov	r1, r5
 800a8ea:	4620      	mov	r0, r4
 800a8ec:	9700      	str	r7, [sp, #0]
 800a8ee:	f001 fd85 	bl	800c3fc <acc_confprogram_patch_offset>
 800a8f2:	f001 fed3 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800a8f6:	2740      	movs	r7, #64	; 0x40
 800a8f8:	f8db 2064 	ldr.w	r2, [fp, #100]	; 0x64
 800a8fc:	9201      	str	r2, [sp, #4]
 800a8fe:	4603      	mov	r3, r0
 800a900:	4632      	mov	r2, r6
 800a902:	4629      	mov	r1, r5
 800a904:	4620      	mov	r0, r4
 800a906:	9700      	str	r7, [sp, #0]
 800a908:	f001 fd78 	bl	800c3fc <acc_confprogram_patch_offset>
 800a90c:	f001 fec6 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800a910:	2741      	movs	r7, #65	; 0x41
 800a912:	f8db 2068 	ldr.w	r2, [fp, #104]	; 0x68
 800a916:	9201      	str	r2, [sp, #4]
 800a918:	4603      	mov	r3, r0
 800a91a:	4632      	mov	r2, r6
 800a91c:	4629      	mov	r1, r5
 800a91e:	4620      	mov	r0, r4
 800a920:	9700      	str	r7, [sp, #0]
 800a922:	f001 fd6b 	bl	800c3fc <acc_confprogram_patch_offset>
 800a926:	f001 feb9 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800a92a:	2772      	movs	r7, #114	; 0x72
 800a92c:	f8db 206c 	ldr.w	r2, [fp, #108]	; 0x6c
 800a930:	9201      	str	r2, [sp, #4]
 800a932:	4603      	mov	r3, r0
 800a934:	4632      	mov	r2, r6
 800a936:	4629      	mov	r1, r5
 800a938:	4620      	mov	r0, r4
 800a93a:	9700      	str	r7, [sp, #0]
 800a93c:	f001 fd5e 	bl	800c3fc <acc_confprogram_patch_offset>
 800a940:	f001 feac 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800a944:	2754      	movs	r7, #84	; 0x54
 800a946:	f8db 2070 	ldr.w	r2, [fp, #112]	; 0x70
 800a94a:	9201      	str	r2, [sp, #4]
 800a94c:	4603      	mov	r3, r0
 800a94e:	4632      	mov	r2, r6
 800a950:	4629      	mov	r1, r5
 800a952:	4620      	mov	r0, r4
 800a954:	9700      	str	r7, [sp, #0]
 800a956:	f001 fd51 	bl	800c3fc <acc_confprogram_patch_offset>
 800a95a:	f001 fe9f 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800a95e:	2739      	movs	r7, #57	; 0x39
 800a960:	f8db 2074 	ldr.w	r2, [fp, #116]	; 0x74
 800a964:	9201      	str	r2, [sp, #4]
 800a966:	4603      	mov	r3, r0
 800a968:	4632      	mov	r2, r6
 800a96a:	4629      	mov	r1, r5
 800a96c:	4620      	mov	r0, r4
 800a96e:	9700      	str	r7, [sp, #0]
 800a970:	f001 fd44 	bl	800c3fc <acc_confprogram_patch_offset>
 800a974:	f8db 3074 	ldr.w	r3, [fp, #116]	; 0x74
 800a978:	2b00      	cmp	r3, #0
 800a97a:	f040 8239 	bne.w	800adf0 <acc_cpd_linear_sweep_load_program+0x904>
 800a97e:	f001 fe8d 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800a982:	f8db 2078 	ldr.w	r2, [fp, #120]	; 0x78
 800a986:	9201      	str	r2, [sp, #4]
 800a988:	2251      	movs	r2, #81	; 0x51
 800a98a:	4603      	mov	r3, r0
 800a98c:	4629      	mov	r1, r5
 800a98e:	9200      	str	r2, [sp, #0]
 800a990:	4620      	mov	r0, r4
 800a992:	4632      	mov	r2, r6
 800a994:	f001 fd32 	bl	800c3fc <acc_confprogram_patch_offset>
 800a998:	f001 fe80 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800a99c:	f8db 207c 	ldr.w	r2, [fp, #124]	; 0x7c
 800a9a0:	9201      	str	r2, [sp, #4]
 800a9a2:	2277      	movs	r2, #119	; 0x77
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	4629      	mov	r1, r5
 800a9a8:	9200      	str	r2, [sp, #0]
 800a9aa:	4620      	mov	r0, r4
 800a9ac:	4632      	mov	r2, r6
 800a9ae:	f001 fd25 	bl	800c3fc <acc_confprogram_patch_offset>
 800a9b2:	f001 fe73 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800a9b6:	f8db 2080 	ldr.w	r2, [fp, #128]	; 0x80
 800a9ba:	9201      	str	r2, [sp, #4]
 800a9bc:	2244      	movs	r2, #68	; 0x44
 800a9be:	4603      	mov	r3, r0
 800a9c0:	4629      	mov	r1, r5
 800a9c2:	9200      	str	r2, [sp, #0]
 800a9c4:	4620      	mov	r0, r4
 800a9c6:	4632      	mov	r2, r6
 800a9c8:	f001 fd18 	bl	800c3fc <acc_confprogram_patch_offset>
 800a9cc:	f001 fe66 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800a9d0:	f8db 2084 	ldr.w	r2, [fp, #132]	; 0x84
 800a9d4:	9201      	str	r2, [sp, #4]
 800a9d6:	2243      	movs	r2, #67	; 0x43
 800a9d8:	4603      	mov	r3, r0
 800a9da:	9200      	str	r2, [sp, #0]
 800a9dc:	4629      	mov	r1, r5
 800a9de:	4632      	mov	r2, r6
 800a9e0:	4620      	mov	r0, r4
 800a9e2:	f001 fd0b 	bl	800c3fc <acc_confprogram_patch_offset>
 800a9e6:	f8db 7088 	ldr.w	r7, [fp, #136]	; 0x88
 800a9ea:	b2bb      	uxth	r3, r7
 800a9ec:	2b08      	cmp	r3, #8
 800a9ee:	f200 81e7 	bhi.w	800adc0 <acc_cpd_linear_sweep_load_program+0x8d4>
 800a9f2:	4698      	mov	r8, r3
 800a9f4:	2700      	movs	r7, #0
 800a9f6:	f001 fe51 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800a9fa:	226c      	movs	r2, #108	; 0x6c
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	e9cd 2800 	strd	r2, r8, [sp]
 800aa02:	4629      	mov	r1, r5
 800aa04:	4632      	mov	r2, r6
 800aa06:	4620      	mov	r0, r4
 800aa08:	f001 fcf8 	bl	800c3fc <acc_confprogram_patch_offset>
 800aa0c:	f001 fe46 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800aa10:	2259      	movs	r2, #89	; 0x59
 800aa12:	4603      	mov	r3, r0
 800aa14:	e9cd 2800 	strd	r2, r8, [sp]
 800aa18:	4629      	mov	r1, r5
 800aa1a:	4632      	mov	r2, r6
 800aa1c:	4620      	mov	r0, r4
 800aa1e:	f001 fced 	bl	800c3fc <acc_confprogram_patch_offset>
 800aa22:	f001 fe3b 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800aa26:	216e      	movs	r1, #110	; 0x6e
 800aa28:	f001 fdd2 	bl	800c5d0 <acc_confprogram_get_default_value>
 800aa2c:	900a      	str	r0, [sp, #40]	; 0x28
 800aa2e:	f001 fe35 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800aa32:	2170      	movs	r1, #112	; 0x70
 800aa34:	f001 fdcc 	bl	800c5d0 <acc_confprogram_get_default_value>
 800aa38:	9003      	str	r0, [sp, #12]
 800aa3a:	f001 fe2f 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800aa3e:	216f      	movs	r1, #111	; 0x6f
 800aa40:	f001 fdc6 	bl	800c5d0 <acc_confprogram_get_default_value>
 800aa44:	9004      	str	r0, [sp, #16]
 800aa46:	f001 fe29 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800aa4a:	215b      	movs	r1, #91	; 0x5b
 800aa4c:	f001 fdc0 	bl	800c5d0 <acc_confprogram_get_default_value>
 800aa50:	4680      	mov	r8, r0
 800aa52:	f001 fe23 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800aa56:	215d      	movs	r1, #93	; 0x5d
 800aa58:	f001 fdba 	bl	800c5d0 <acc_confprogram_get_default_value>
 800aa5c:	9005      	str	r0, [sp, #20]
 800aa5e:	f001 fe1d 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800aa62:	215c      	movs	r1, #92	; 0x5c
 800aa64:	f001 fdb4 	bl	800c5d0 <acc_confprogram_get_default_value>
 800aa68:	9006      	str	r0, [sp, #24]
 800aa6a:	f001 fe17 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800aa6e:	214a      	movs	r1, #74	; 0x4a
 800aa70:	f001 fdae 	bl	800c5d0 <acc_confprogram_get_default_value>
 800aa74:	9007      	str	r0, [sp, #28]
 800aa76:	f001 fe11 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800aa7a:	2145      	movs	r1, #69	; 0x45
 800aa7c:	f001 fda8 	bl	800c5d0 <acc_confprogram_get_default_value>
 800aa80:	9008      	str	r0, [sp, #32]
 800aa82:	f001 fe0b 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800aa86:	2122      	movs	r1, #34	; 0x22
 800aa88:	f001 fda2 	bl	800c5d0 <acc_confprogram_get_default_value>
 800aa8c:	9009      	str	r0, [sp, #36]	; 0x24
 800aa8e:	f001 fe05 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800aa92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aa94:	216e      	movs	r1, #110	; 0x6e
 800aa96:	433a      	orrs	r2, r7
 800aa98:	4603      	mov	r3, r0
 800aa9a:	9201      	str	r2, [sp, #4]
 800aa9c:	9100      	str	r1, [sp, #0]
 800aa9e:	4632      	mov	r2, r6
 800aaa0:	4629      	mov	r1, r5
 800aaa2:	4620      	mov	r0, r4
 800aaa4:	f001 fcaa 	bl	800c3fc <acc_confprogram_patch_offset>
 800aaa8:	f001 fdf8 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800aaac:	9a03      	ldr	r2, [sp, #12]
 800aaae:	2170      	movs	r1, #112	; 0x70
 800aab0:	433a      	orrs	r2, r7
 800aab2:	4603      	mov	r3, r0
 800aab4:	9201      	str	r2, [sp, #4]
 800aab6:	9100      	str	r1, [sp, #0]
 800aab8:	4632      	mov	r2, r6
 800aaba:	4629      	mov	r1, r5
 800aabc:	4620      	mov	r0, r4
 800aabe:	f001 fc9d 	bl	800c3fc <acc_confprogram_patch_offset>
 800aac2:	f001 fdeb 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800aac6:	9a04      	ldr	r2, [sp, #16]
 800aac8:	216f      	movs	r1, #111	; 0x6f
 800aaca:	433a      	orrs	r2, r7
 800aacc:	4603      	mov	r3, r0
 800aace:	e9cd 1200 	strd	r1, r2, [sp]
 800aad2:	4620      	mov	r0, r4
 800aad4:	4632      	mov	r2, r6
 800aad6:	4629      	mov	r1, r5
 800aad8:	f001 fc90 	bl	800c3fc <acc_confprogram_patch_offset>
 800aadc:	f001 fdde 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800aae0:	ea48 0207 	orr.w	r2, r8, r7
 800aae4:	215b      	movs	r1, #91	; 0x5b
 800aae6:	4603      	mov	r3, r0
 800aae8:	e9cd 1200 	strd	r1, r2, [sp]
 800aaec:	4620      	mov	r0, r4
 800aaee:	4632      	mov	r2, r6
 800aaf0:	4629      	mov	r1, r5
 800aaf2:	f001 fc83 	bl	800c3fc <acc_confprogram_patch_offset>
 800aaf6:	f001 fdd1 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800aafa:	9a05      	ldr	r2, [sp, #20]
 800aafc:	215d      	movs	r1, #93	; 0x5d
 800aafe:	433a      	orrs	r2, r7
 800ab00:	4603      	mov	r3, r0
 800ab02:	e9cd 1200 	strd	r1, r2, [sp]
 800ab06:	4620      	mov	r0, r4
 800ab08:	4632      	mov	r2, r6
 800ab0a:	4629      	mov	r1, r5
 800ab0c:	f001 fc76 	bl	800c3fc <acc_confprogram_patch_offset>
 800ab10:	f001 fdc4 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800ab14:	9a06      	ldr	r2, [sp, #24]
 800ab16:	215c      	movs	r1, #92	; 0x5c
 800ab18:	433a      	orrs	r2, r7
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	e9cd 1200 	strd	r1, r2, [sp]
 800ab20:	4620      	mov	r0, r4
 800ab22:	4632      	mov	r2, r6
 800ab24:	4629      	mov	r1, r5
 800ab26:	f001 fc69 	bl	800c3fc <acc_confprogram_patch_offset>
 800ab2a:	f001 fdb7 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800ab2e:	9a07      	ldr	r2, [sp, #28]
 800ab30:	214a      	movs	r1, #74	; 0x4a
 800ab32:	433a      	orrs	r2, r7
 800ab34:	4603      	mov	r3, r0
 800ab36:	e9cd 1200 	strd	r1, r2, [sp]
 800ab3a:	4620      	mov	r0, r4
 800ab3c:	4632      	mov	r2, r6
 800ab3e:	4629      	mov	r1, r5
 800ab40:	f001 fc5c 	bl	800c3fc <acc_confprogram_patch_offset>
 800ab44:	f001 fdaa 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800ab48:	9a08      	ldr	r2, [sp, #32]
 800ab4a:	2145      	movs	r1, #69	; 0x45
 800ab4c:	433a      	orrs	r2, r7
 800ab4e:	4603      	mov	r3, r0
 800ab50:	e9cd 1200 	strd	r1, r2, [sp]
 800ab54:	4620      	mov	r0, r4
 800ab56:	4632      	mov	r2, r6
 800ab58:	4629      	mov	r1, r5
 800ab5a:	f001 fc4f 	bl	800c3fc <acc_confprogram_patch_offset>
 800ab5e:	f001 fd9d 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800ab62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab64:	433a      	orrs	r2, r7
 800ab66:	4617      	mov	r7, r2
 800ab68:	2222      	movs	r2, #34	; 0x22
 800ab6a:	4629      	mov	r1, r5
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	e9cd 2700 	strd	r2, r7, [sp]
 800ab72:	4620      	mov	r0, r4
 800ab74:	4632      	mov	r2, r6
 800ab76:	f001 fc41 	bl	800c3fc <acc_confprogram_patch_offset>
 800ab7a:	f001 fd8f 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800ab7e:	f8db 2090 	ldr.w	r2, [fp, #144]	; 0x90
 800ab82:	2a05      	cmp	r2, #5
 800ab84:	bf8c      	ite	hi
 800ab86:	2164      	movhi	r1, #100	; 0x64
 800ab88:	2144      	movls	r1, #68	; 0x44
 800ab8a:	2205      	movs	r2, #5
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	e9cd 2100 	strd	r2, r1, [sp]
 800ab92:	4620      	mov	r0, r4
 800ab94:	4632      	mov	r2, r6
 800ab96:	4629      	mov	r1, r5
 800ab98:	f001 fc30 	bl	800c3fc <acc_confprogram_patch_offset>
 800ab9c:	f001 fd7e 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800aba0:	f8db 2090 	ldr.w	r2, [fp, #144]	; 0x90
 800aba4:	0152      	lsls	r2, r2, #5
 800aba6:	3a03      	subs	r2, #3
 800aba8:	2124      	movs	r1, #36	; 0x24
 800abaa:	4603      	mov	r3, r0
 800abac:	e9cd 1200 	strd	r1, r2, [sp]
 800abb0:	4620      	mov	r0, r4
 800abb2:	4632      	mov	r2, r6
 800abb4:	4629      	mov	r1, r5
 800abb6:	f001 fc21 	bl	800c3fc <acc_confprogram_patch_offset>
 800abba:	f001 fd6f 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800abbe:	f8db 2090 	ldr.w	r2, [fp, #144]	; 0x90
 800abc2:	0152      	lsls	r2, r2, #5
 800abc4:	0852      	lsrs	r2, r2, #1
 800abc6:	3a03      	subs	r2, #3
 800abc8:	2125      	movs	r1, #37	; 0x25
 800abca:	4603      	mov	r3, r0
 800abcc:	e9cd 1200 	strd	r1, r2, [sp]
 800abd0:	4620      	mov	r0, r4
 800abd2:	4632      	mov	r2, r6
 800abd4:	4629      	mov	r1, r5
 800abd6:	f001 fc11 	bl	800c3fc <acc_confprogram_patch_offset>
 800abda:	f001 fd5f 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800abde:	f8db 2094 	ldr.w	r2, [fp, #148]	; 0x94
 800abe2:	9201      	str	r2, [sp, #4]
 800abe4:	2236      	movs	r2, #54	; 0x36
 800abe6:	4603      	mov	r3, r0
 800abe8:	4629      	mov	r1, r5
 800abea:	9200      	str	r2, [sp, #0]
 800abec:	4620      	mov	r0, r4
 800abee:	4632      	mov	r2, r6
 800abf0:	f001 fc04 	bl	800c3fc <acc_confprogram_patch_offset>
 800abf4:	f001 fd52 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800abf8:	f8db 2098 	ldr.w	r2, [fp, #152]	; 0x98
 800abfc:	215e      	movs	r1, #94	; 0x5e
 800abfe:	320e      	adds	r2, #14
 800ac00:	4603      	mov	r3, r0
 800ac02:	e9cd 1200 	strd	r1, r2, [sp]
 800ac06:	4620      	mov	r0, r4
 800ac08:	4632      	mov	r2, r6
 800ac0a:	4629      	mov	r1, r5
 800ac0c:	f001 fbf6 	bl	800c3fc <acc_confprogram_patch_offset>
 800ac10:	f001 fd44 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800ac14:	2120      	movs	r1, #32
 800ac16:	f001 fcdb 	bl	800c5d0 <acc_confprogram_get_default_value>
 800ac1a:	f8db 3090 	ldr.w	r3, [fp, #144]	; 0x90
 800ac1e:	2b05      	cmp	r3, #5
 800ac20:	bf98      	it	ls
 800ac22:	3002      	addls	r0, #2
 800ac24:	fbb0 f7f3 	udiv	r7, r0, r3
 800ac28:	fb03 0717 	mls	r7, r3, r7, r0
 800ac2c:	b107      	cbz	r7, 800ac30 <acc_cpd_linear_sweep_load_program+0x744>
 800ac2e:	1bdf      	subs	r7, r3, r7
 800ac30:	f8db 309c 	ldr.w	r3, [fp, #156]	; 0x9c
 800ac34:	eb07 0803 	add.w	r8, r7, r3
 800ac38:	f001 fd30 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800ac3c:	221f      	movs	r2, #31
 800ac3e:	4603      	mov	r3, r0
 800ac40:	e9cd 2800 	strd	r2, r8, [sp]
 800ac44:	4629      	mov	r1, r5
 800ac46:	4632      	mov	r2, r6
 800ac48:	4620      	mov	r0, r4
 800ac4a:	f001 fbd7 	bl	800c3fc <acc_confprogram_patch_offset>
 800ac4e:	f8db 309c 	ldr.w	r3, [fp, #156]	; 0x9c
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	f040 809a 	bne.w	800ad8c <acc_cpd_linear_sweep_load_program+0x8a0>
 800ac58:	f001 fd20 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800ac5c:	213a      	movs	r1, #58	; 0x3a
 800ac5e:	f001 fcb7 	bl	800c5d0 <acc_confprogram_get_default_value>
 800ac62:	f8db 3090 	ldr.w	r3, [fp, #144]	; 0x90
 800ac66:	2b05      	cmp	r3, #5
 800ac68:	bf8c      	ite	hi
 800ac6a:	3007      	addhi	r0, #7
 800ac6c:	3009      	addls	r0, #9
 800ac6e:	fbb0 f7f3 	udiv	r7, r0, r3
 800ac72:	fb03 0717 	mls	r7, r3, r7, r0
 800ac76:	b107      	cbz	r7, 800ac7a <acc_cpd_linear_sweep_load_program+0x78e>
 800ac78:	1bdf      	subs	r7, r3, r7
 800ac7a:	f8db 30a0 	ldr.w	r3, [fp, #160]	; 0xa0
 800ac7e:	eb07 0803 	add.w	r8, r7, r3
 800ac82:	f001 fd0b 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800ac86:	2266      	movs	r2, #102	; 0x66
 800ac88:	4603      	mov	r3, r0
 800ac8a:	e9cd 2800 	strd	r2, r8, [sp]
 800ac8e:	4629      	mov	r1, r5
 800ac90:	4632      	mov	r2, r6
 800ac92:	4620      	mov	r0, r4
 800ac94:	f001 fbb2 	bl	800c3fc <acc_confprogram_patch_offset>
 800ac98:	f8db 30a0 	ldr.w	r3, [fp, #160]	; 0xa0
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d15c      	bne.n	800ad5a <acc_cpd_linear_sweep_load_program+0x86e>
 800aca0:	f89b 308d 	ldrb.w	r3, [fp, #141]	; 0x8d
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d141      	bne.n	800ad2c <acc_cpd_linear_sweep_load_program+0x840>
 800aca8:	f8db 70a4 	ldr.w	r7, [fp, #164]	; 0xa4
 800acac:	f001 fcf6 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800acb0:	1e79      	subs	r1, r7, #1
 800acb2:	2206      	movs	r2, #6
 800acb4:	4603      	mov	r3, r0
 800acb6:	e9cd 2100 	strd	r2, r1, [sp]
 800acba:	4620      	mov	r0, r4
 800acbc:	4632      	mov	r2, r6
 800acbe:	4629      	mov	r1, r5
 800acc0:	f001 fb9c 	bl	800c3fc <acc_confprogram_patch_offset>
 800acc4:	f001 fcea 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800acc8:	2204      	movs	r2, #4
 800acca:	2163      	movs	r1, #99	; 0x63
 800accc:	fbb2 f7f7 	udiv	r7, r2, r7
 800acd0:	3f01      	subs	r7, #1
 800acd2:	4603      	mov	r3, r0
 800acd4:	e9cd 1700 	strd	r1, r7, [sp]
 800acd8:	4632      	mov	r2, r6
 800acda:	4629      	mov	r1, r5
 800acdc:	4620      	mov	r0, r4
 800acde:	f001 fb8d 	bl	800c3fc <acc_confprogram_patch_offset>
 800ace2:	f001 fcdb 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800ace6:	f8db 20a8 	ldr.w	r2, [fp, #168]	; 0xa8
 800acea:	9201      	str	r2, [sp, #4]
 800acec:	2261      	movs	r2, #97	; 0x61
 800acee:	4603      	mov	r3, r0
 800acf0:	4629      	mov	r1, r5
 800acf2:	9200      	str	r2, [sp, #0]
 800acf4:	4620      	mov	r0, r4
 800acf6:	4632      	mov	r2, r6
 800acf8:	f001 fb80 	bl	800c3fc <acc_confprogram_patch_offset>
 800acfc:	f001 fcce 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800ad00:	f89b 20ad 	ldrb.w	r2, [fp, #173]	; 0xad
 800ad04:	9201      	str	r2, [sp, #4]
 800ad06:	2246      	movs	r2, #70	; 0x46
 800ad08:	4603      	mov	r3, r0
 800ad0a:	9200      	str	r2, [sp, #0]
 800ad0c:	4629      	mov	r1, r5
 800ad0e:	4632      	mov	r2, r6
 800ad10:	4620      	mov	r0, r4
 800ad12:	f001 fb73 	bl	800c3fc <acc_confprogram_patch_offset>
 800ad16:	f89b 70ad 	ldrb.w	r7, [fp, #173]	; 0xad
 800ad1a:	2f00      	cmp	r7, #0
 800ad1c:	f47f ac24 	bne.w	800a568 <acc_cpd_linear_sweep_load_program+0x7c>
 800ad20:	f001 fcbc 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800ad24:	2223      	movs	r2, #35	; 0x23
 800ad26:	4603      	mov	r3, r0
 800ad28:	9701      	str	r7, [sp, #4]
 800ad2a:	e447      	b.n	800a5bc <acc_cpd_linear_sweep_load_program+0xd0>
 800ad2c:	f001 fcb6 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800ad30:	223b      	movs	r2, #59	; 0x3b
 800ad32:	2100      	movs	r1, #0
 800ad34:	e9cd 2100 	strd	r2, r1, [sp]
 800ad38:	4603      	mov	r3, r0
 800ad3a:	4632      	mov	r2, r6
 800ad3c:	4629      	mov	r1, r5
 800ad3e:	4620      	mov	r0, r4
 800ad40:	f001 fb5c 	bl	800c3fc <acc_confprogram_patch_offset>
 800ad44:	f7fa fd64 	bl	8005810 <acc_rss_integration_log_level>
 800ad48:	2801      	cmp	r0, #1
 800ad4a:	d9ad      	bls.n	800aca8 <acc_cpd_linear_sweep_load_program+0x7bc>
 800ad4c:	4b7b      	ldr	r3, [pc, #492]	; (800af3c <acc_cpd_linear_sweep_load_program+0xa50>)
 800ad4e:	4a7c      	ldr	r2, [pc, #496]	; (800af40 <acc_cpd_linear_sweep_load_program+0xa54>)
 800ad50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad52:	497c      	ldr	r1, [pc, #496]	; (800af44 <acc_cpd_linear_sweep_load_program+0xa58>)
 800ad54:	2002      	movs	r0, #2
 800ad56:	4798      	blx	r3
 800ad58:	e7a6      	b.n	800aca8 <acc_cpd_linear_sweep_load_program+0x7bc>
 800ad5a:	f7fa fd59 	bl	8005810 <acc_rss_integration_log_level>
 800ad5e:	2801      	cmp	r0, #1
 800ad60:	d908      	bls.n	800ad74 <acc_cpd_linear_sweep_load_program+0x888>
 800ad62:	4b76      	ldr	r3, [pc, #472]	; (800af3c <acc_cpd_linear_sweep_load_program+0xa50>)
 800ad64:	4a78      	ldr	r2, [pc, #480]	; (800af48 <acc_cpd_linear_sweep_load_program+0xa5c>)
 800ad66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad68:	9303      	str	r3, [sp, #12]
 800ad6a:	4976      	ldr	r1, [pc, #472]	; (800af44 <acc_cpd_linear_sweep_load_program+0xa58>)
 800ad6c:	463b      	mov	r3, r7
 800ad6e:	2002      	movs	r0, #2
 800ad70:	9f03      	ldr	r7, [sp, #12]
 800ad72:	47b8      	blx	r7
 800ad74:	f7fa fd4c 	bl	8005810 <acc_rss_integration_log_level>
 800ad78:	2801      	cmp	r0, #1
 800ad7a:	d991      	bls.n	800aca0 <acc_cpd_linear_sweep_load_program+0x7b4>
 800ad7c:	4b6f      	ldr	r3, [pc, #444]	; (800af3c <acc_cpd_linear_sweep_load_program+0xa50>)
 800ad7e:	4a73      	ldr	r2, [pc, #460]	; (800af4c <acc_cpd_linear_sweep_load_program+0xa60>)
 800ad80:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 800ad82:	4970      	ldr	r1, [pc, #448]	; (800af44 <acc_cpd_linear_sweep_load_program+0xa58>)
 800ad84:	4643      	mov	r3, r8
 800ad86:	2002      	movs	r0, #2
 800ad88:	47b8      	blx	r7
 800ad8a:	e789      	b.n	800aca0 <acc_cpd_linear_sweep_load_program+0x7b4>
 800ad8c:	f7fa fd40 	bl	8005810 <acc_rss_integration_log_level>
 800ad90:	2801      	cmp	r0, #1
 800ad92:	d908      	bls.n	800ada6 <acc_cpd_linear_sweep_load_program+0x8ba>
 800ad94:	4b69      	ldr	r3, [pc, #420]	; (800af3c <acc_cpd_linear_sweep_load_program+0xa50>)
 800ad96:	4a6e      	ldr	r2, [pc, #440]	; (800af50 <acc_cpd_linear_sweep_load_program+0xa64>)
 800ad98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad9a:	9303      	str	r3, [sp, #12]
 800ad9c:	4969      	ldr	r1, [pc, #420]	; (800af44 <acc_cpd_linear_sweep_load_program+0xa58>)
 800ad9e:	463b      	mov	r3, r7
 800ada0:	2002      	movs	r0, #2
 800ada2:	9f03      	ldr	r7, [sp, #12]
 800ada4:	47b8      	blx	r7
 800ada6:	f7fa fd33 	bl	8005810 <acc_rss_integration_log_level>
 800adaa:	2801      	cmp	r0, #1
 800adac:	f67f af54 	bls.w	800ac58 <acc_cpd_linear_sweep_load_program+0x76c>
 800adb0:	4b62      	ldr	r3, [pc, #392]	; (800af3c <acc_cpd_linear_sweep_load_program+0xa50>)
 800adb2:	4a68      	ldr	r2, [pc, #416]	; (800af54 <acc_cpd_linear_sweep_load_program+0xa68>)
 800adb4:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 800adb6:	4963      	ldr	r1, [pc, #396]	; (800af44 <acc_cpd_linear_sweep_load_program+0xa58>)
 800adb8:	4643      	mov	r3, r8
 800adba:	2002      	movs	r0, #2
 800adbc:	47b8      	blx	r7
 800adbe:	e74b      	b.n	800ac58 <acc_cpd_linear_sweep_load_program+0x76c>
 800adc0:	f001 fc6c 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800adc4:	fa1f f887 	uxth.w	r8, r7
 800adc8:	2267      	movs	r2, #103	; 0x67
 800adca:	2102      	movs	r1, #2
 800adcc:	f1a8 0808 	sub.w	r8, r8, #8
 800add0:	27ff      	movs	r7, #255	; 0xff
 800add2:	e9cd 2100 	strd	r2, r1, [sp]
 800add6:	4603      	mov	r3, r0
 800add8:	fa07 f708 	lsl.w	r7, r7, r8
 800addc:	4632      	mov	r2, r6
 800adde:	4629      	mov	r1, r5
 800ade0:	4620      	mov	r0, r4
 800ade2:	f001 fb0b 	bl	800c3fc <acc_confprogram_patch_offset>
 800ade6:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 800adea:	f04f 0808 	mov.w	r8, #8
 800adee:	e602      	b.n	800a9f6 <acc_cpd_linear_sweep_load_program+0x50a>
 800adf0:	f001 fc54 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800adf4:	2210      	movs	r2, #16
 800adf6:	2101      	movs	r1, #1
 800adf8:	e9cd 2100 	strd	r2, r1, [sp]
 800adfc:	4603      	mov	r3, r0
 800adfe:	4632      	mov	r2, r6
 800ae00:	4629      	mov	r1, r5
 800ae02:	4620      	mov	r0, r4
 800ae04:	f001 fafa 	bl	800c3fc <acc_confprogram_patch_offset>
 800ae08:	f001 fc48 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800ae0c:	f64f 7880 	movw	r8, #65408	; 0xff80
 800ae10:	2212      	movs	r2, #18
 800ae12:	4603      	mov	r3, r0
 800ae14:	4629      	mov	r1, r5
 800ae16:	e9cd 2800 	strd	r2, r8, [sp]
 800ae1a:	4620      	mov	r0, r4
 800ae1c:	4632      	mov	r2, r6
 800ae1e:	f001 faed 	bl	800c3fc <acc_confprogram_patch_offset>
 800ae22:	f001 fc3b 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800ae26:	2707      	movs	r7, #7
 800ae28:	2214      	movs	r2, #20
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	4629      	mov	r1, r5
 800ae2e:	e9cd 2700 	strd	r2, r7, [sp]
 800ae32:	4620      	mov	r0, r4
 800ae34:	4632      	mov	r2, r6
 800ae36:	f001 fae1 	bl	800c3fc <acc_confprogram_patch_offset>
 800ae3a:	f001 fc2f 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800ae3e:	2211      	movs	r2, #17
 800ae40:	4603      	mov	r3, r0
 800ae42:	4629      	mov	r1, r5
 800ae44:	e9cd 2800 	strd	r2, r8, [sp]
 800ae48:	4620      	mov	r0, r4
 800ae4a:	4632      	mov	r2, r6
 800ae4c:	f001 fad6 	bl	800c3fc <acc_confprogram_patch_offset>
 800ae50:	f001 fc24 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800ae54:	2213      	movs	r2, #19
 800ae56:	2100      	movs	r1, #0
 800ae58:	e9cd 2100 	strd	r2, r1, [sp]
 800ae5c:	4603      	mov	r3, r0
 800ae5e:	4632      	mov	r2, r6
 800ae60:	4629      	mov	r1, r5
 800ae62:	4620      	mov	r0, r4
 800ae64:	f001 faca 	bl	800c3fc <acc_confprogram_patch_offset>
 800ae68:	f001 fc18 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800ae6c:	2215      	movs	r2, #21
 800ae6e:	f64f 71c0 	movw	r1, #65472	; 0xffc0
 800ae72:	e9cd 2100 	strd	r2, r1, [sp]
 800ae76:	4603      	mov	r3, r0
 800ae78:	4632      	mov	r2, r6
 800ae7a:	4629      	mov	r1, r5
 800ae7c:	4620      	mov	r0, r4
 800ae7e:	f001 fabd 	bl	800c3fc <acc_confprogram_patch_offset>
 800ae82:	f001 fc0b 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800ae86:	2216      	movs	r2, #22
 800ae88:	4603      	mov	r3, r0
 800ae8a:	4629      	mov	r1, r5
 800ae8c:	e9cd 2700 	strd	r2, r7, [sp]
 800ae90:	4620      	mov	r0, r4
 800ae92:	4632      	mov	r2, r6
 800ae94:	f001 fab2 	bl	800c3fc <acc_confprogram_patch_offset>
 800ae98:	f001 fc00 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800ae9c:	220e      	movs	r2, #14
 800ae9e:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 800aea2:	e9cd 2100 	strd	r2, r1, [sp]
 800aea6:	4603      	mov	r3, r0
 800aea8:	4632      	mov	r2, r6
 800aeaa:	4629      	mov	r1, r5
 800aeac:	4620      	mov	r0, r4
 800aeae:	f001 faa5 	bl	800c3fc <acc_confprogram_patch_offset>
 800aeb2:	f001 fbf3 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800aeb6:	220f      	movs	r2, #15
 800aeb8:	4603      	mov	r3, r0
 800aeba:	4629      	mov	r1, r5
 800aebc:	e9cd 2700 	strd	r2, r7, [sp]
 800aec0:	4620      	mov	r0, r4
 800aec2:	4632      	mov	r2, r6
 800aec4:	f001 fa9a 	bl	800c3fc <acc_confprogram_patch_offset>
 800aec8:	f001 fbe8 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800aecc:	2217      	movs	r2, #23
 800aece:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800aed2:	e9cd 2100 	strd	r2, r1, [sp]
 800aed6:	4603      	mov	r3, r0
 800aed8:	4632      	mov	r2, r6
 800aeda:	4629      	mov	r1, r5
 800aedc:	4620      	mov	r0, r4
 800aede:	f001 fa8d 	bl	800c3fc <acc_confprogram_patch_offset>
 800aee2:	f001 fbdb 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800aee6:	2218      	movs	r2, #24
 800aee8:	e9cd 2700 	strd	r2, r7, [sp]
 800aeec:	4603      	mov	r3, r0
 800aeee:	4632      	mov	r2, r6
 800aef0:	4629      	mov	r1, r5
 800aef2:	4620      	mov	r0, r4
 800aef4:	f001 fa82 	bl	800c3fc <acc_confprogram_patch_offset>
 800aef8:	e541      	b.n	800a97e <acc_cpd_linear_sweep_load_program+0x492>
 800aefa:	f001 fbcf 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800aefe:	2732      	movs	r7, #50	; 0x32
 800af00:	f8db 20b8 	ldr.w	r2, [fp, #184]	; 0xb8
 800af04:	9201      	str	r2, [sp, #4]
 800af06:	4603      	mov	r3, r0
 800af08:	4632      	mov	r2, r6
 800af0a:	4629      	mov	r1, r5
 800af0c:	4620      	mov	r0, r4
 800af0e:	9700      	str	r7, [sp, #0]
 800af10:	f001 fa74 	bl	800c3fc <acc_confprogram_patch_offset>
 800af14:	f7ff bb8c 	b.w	800a630 <acc_cpd_linear_sweep_load_program+0x144>
 800af18:	f7fa fc7a 	bl	8005810 <acc_rss_integration_log_level>
 800af1c:	2803      	cmp	r0, #3
 800af1e:	f67f ab03 	bls.w	800a528 <acc_cpd_linear_sweep_load_program+0x3c>
 800af22:	4b06      	ldr	r3, [pc, #24]	; (800af3c <acc_cpd_linear_sweep_load_program+0xa50>)
 800af24:	4a0c      	ldr	r2, [pc, #48]	; (800af58 <acc_cpd_linear_sweep_load_program+0xa6c>)
 800af26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af28:	4906      	ldr	r1, [pc, #24]	; (800af44 <acc_cpd_linear_sweep_load_program+0xa58>)
 800af2a:	2004      	movs	r0, #4
 800af2c:	4798      	blx	r3
 800af2e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800af30:	b00f      	add	sp, #60	; 0x3c
 800af32:	ecbd 8b04 	vpop	{d8-d9}
 800af36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af3a:	bf00      	nop
 800af3c:	200004c0 	.word	0x200004c0
 800af40:	0800ff30 	.word	0x0800ff30
 800af44:	0800fe5c 	.word	0x0800fe5c
 800af48:	0800fee0 	.word	0x0800fee0
 800af4c:	0800ff08 	.word	0x0800ff08
 800af50:	0800fe70 	.word	0x0800fe70
 800af54:	0800fea8 	.word	0x0800fea8
 800af58:	0800ff4c 	.word	0x0800ff4c

0800af5c <acc_cpd_linear_sweep_run_program>:
 800af5c:	f240 213b 	movw	r1, #571	; 0x23b
 800af60:	f7fc baaa 	b.w	80074b8 <acc_sensor_protocol_r2_run_program>

0800af64 <acc_cpd_linear_sweep_update_program>:
 800af64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af68:	784b      	ldrb	r3, [r1, #1]
 800af6a:	684f      	ldr	r7, [r1, #4]
 800af6c:	68ce      	ldr	r6, [r1, #12]
 800af6e:	b086      	sub	sp, #24
 800af70:	460c      	mov	r4, r1
 800af72:	4605      	mov	r5, r0
 800af74:	b943      	cbnz	r3, 800af88 <acc_cpd_linear_sweep_update_program+0x24>
 800af76:	7823      	ldrb	r3, [r4, #0]
 800af78:	b9eb      	cbnz	r3, 800afb6 <acc_cpd_linear_sweep_update_program+0x52>
 800af7a:	78a3      	ldrb	r3, [r4, #2]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d12d      	bne.n	800afdc <acc_cpd_linear_sweep_update_program+0x78>
 800af80:	2001      	movs	r0, #1
 800af82:	b006      	add	sp, #24
 800af84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af88:	f8d1 8008 	ldr.w	r8, [r1, #8]
 800af8c:	f001 fb82 	bl	800c694 <acc_image_a111_r2c_sweep_get>
 800af90:	9005      	str	r0, [sp, #20]
 800af92:	f001 fb83 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800af96:	f108 020e 	add.w	r2, r8, #14
 800af9a:	4603      	mov	r3, r0
 800af9c:	9201      	str	r2, [sp, #4]
 800af9e:	4819      	ldr	r0, [pc, #100]	; (800b004 <acc_cpd_linear_sweep_update_program+0xa0>)
 800afa0:	9002      	str	r0, [sp, #8]
 800afa2:	225e      	movs	r2, #94	; 0x5e
 800afa4:	9200      	str	r2, [sp, #0]
 800afa6:	9905      	ldr	r1, [sp, #20]
 800afa8:	2200      	movs	r2, #0
 800afaa:	4628      	mov	r0, r5
 800afac:	f001 fa9a 	bl	800c4e4 <acc_confprogram_live_patch>
 800afb0:	7823      	ldrb	r3, [r4, #0]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d0e1      	beq.n	800af7a <acc_cpd_linear_sweep_update_program+0x16>
 800afb6:	f001 fb6d 	bl	800c694 <acc_image_a111_r2c_sweep_get>
 800afba:	9005      	str	r0, [sp, #20]
 800afbc:	f001 fb6e 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800afc0:	2236      	movs	r2, #54	; 0x36
 800afc2:	4603      	mov	r3, r0
 800afc4:	480f      	ldr	r0, [pc, #60]	; (800b004 <acc_cpd_linear_sweep_update_program+0xa0>)
 800afc6:	9002      	str	r0, [sp, #8]
 800afc8:	9200      	str	r2, [sp, #0]
 800afca:	9905      	ldr	r1, [sp, #20]
 800afcc:	9701      	str	r7, [sp, #4]
 800afce:	2200      	movs	r2, #0
 800afd0:	4628      	mov	r0, r5
 800afd2:	f001 fa87 	bl	800c4e4 <acc_confprogram_live_patch>
 800afd6:	78a3      	ldrb	r3, [r4, #2]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d0d1      	beq.n	800af80 <acc_cpd_linear_sweep_update_program+0x1c>
 800afdc:	f001 fb5a 	bl	800c694 <acc_image_a111_r2c_sweep_get>
 800afe0:	9005      	str	r0, [sp, #20]
 800afe2:	f001 fb5b 	bl	800c69c <acc_image_a111_r2c_sweep_param_table_get>
 800afe6:	4c07      	ldr	r4, [pc, #28]	; (800b004 <acc_cpd_linear_sweep_update_program+0xa0>)
 800afe8:	9905      	ldr	r1, [sp, #20]
 800afea:	9601      	str	r6, [sp, #4]
 800afec:	2272      	movs	r2, #114	; 0x72
 800afee:	4603      	mov	r3, r0
 800aff0:	9200      	str	r2, [sp, #0]
 800aff2:	4628      	mov	r0, r5
 800aff4:	9402      	str	r4, [sp, #8]
 800aff6:	2200      	movs	r2, #0
 800aff8:	f001 fa74 	bl	800c4e4 <acc_confprogram_live_patch>
 800affc:	2001      	movs	r0, #1
 800affe:	b006      	add	sp, #24
 800b000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b004:	08006db5 	.word	0x08006db5

0800b008 <acc_cpd_linear_sweep_get_info>:
 800b008:	f890 30ad 	ldrb.w	r3, [r0, #173]	; 0xad
 800b00c:	b16b      	cbz	r3, 800b02a <acc_cpd_linear_sweep_get_info+0x22>
 800b00e:	b410      	push	{r4}
 800b010:	2203      	movs	r2, #3
 800b012:	2401      	movs	r4, #1
 800b014:	2300      	movs	r3, #0
 800b016:	2002      	movs	r0, #2
 800b018:	e9c1 4003 	strd	r4, r0, [r1, #12]
 800b01c:	e9c1 3301 	strd	r3, r3, [r1, #4]
 800b020:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b024:	600a      	str	r2, [r1, #0]
 800b026:	614a      	str	r2, [r1, #20]
 800b028:	4770      	bx	lr
 800b02a:	e9c1 3300 	strd	r3, r3, [r1]
 800b02e:	e9c1 3302 	strd	r3, r3, [r1, #8]
 800b032:	e9c1 3304 	strd	r3, r3, [r1, #16]
 800b036:	4770      	bx	lr

0800b038 <acc_cpd_linear_sweep_check>:
 800b038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b03c:	461e      	mov	r6, r3
 800b03e:	2300      	movs	r3, #0
 800b040:	7033      	strb	r3, [r6, #0]
 800b042:	460c      	mov	r4, r1
 800b044:	f891 10ad 	ldrb.w	r1, [r1, #173]	; 0xad
 800b048:	b082      	sub	sp, #8
 800b04a:	b911      	cbnz	r1, 800b052 <acc_cpd_linear_sweep_check+0x1a>
 800b04c:	b002      	add	sp, #8
 800b04e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b052:	6813      	ldr	r3, [r2, #0]
 800b054:	005b      	lsls	r3, r3, #1
 800b056:	f003 031f 	and.w	r3, r3, #31
 800b05a:	6013      	str	r3, [r2, #0]
 800b05c:	4607      	mov	r7, r0
 800b05e:	4615      	mov	r5, r2
 800b060:	f7fa fbd6 	bl	8005810 <acc_rss_integration_log_level>
 800b064:	2803      	cmp	r0, #3
 800b066:	d907      	bls.n	800b078 <acc_cpd_linear_sweep_check+0x40>
 800b068:	4a16      	ldr	r2, [pc, #88]	; (800b0c4 <acc_cpd_linear_sweep_check+0x8c>)
 800b06a:	682b      	ldr	r3, [r5, #0]
 800b06c:	f8d2 8034 	ldr.w	r8, [r2, #52]	; 0x34
 800b070:	4915      	ldr	r1, [pc, #84]	; (800b0c8 <acc_cpd_linear_sweep_check+0x90>)
 800b072:	4a16      	ldr	r2, [pc, #88]	; (800b0cc <acc_cpd_linear_sweep_check+0x94>)
 800b074:	2004      	movs	r0, #4
 800b076:	47c0      	blx	r8
 800b078:	f9b4 3026 	ldrsh.w	r3, [r4, #38]	; 0x26
 800b07c:	f9b4 2024 	ldrsh.w	r2, [r4, #36]	; 0x24
 800b080:	8c21      	ldrh	r1, [r4, #32]
 800b082:	4638      	mov	r0, r7
 800b084:	f000 f952 	bl	800b32c <acc_cpd_sweep_check_voffset_vslope>
 800b088:	b1b0      	cbz	r0, 800b0b8 <acc_cpd_linear_sweep_check+0x80>
 800b08a:	6828      	ldr	r0, [r5, #0]
 800b08c:	f000 f9b4 	bl	800b3f8 <acc_cpd_sweep_check_count_bad_sweeps>
 800b090:	2802      	cmp	r0, #2
 800b092:	4604      	mov	r4, r0
 800b094:	d9da      	bls.n	800b04c <acc_cpd_linear_sweep_check+0x14>
 800b096:	f7fa fbbb 	bl	8005810 <acc_rss_integration_log_level>
 800b09a:	b140      	cbz	r0, 800b0ae <acc_cpd_linear_sweep_check+0x76>
 800b09c:	4b09      	ldr	r3, [pc, #36]	; (800b0c4 <acc_cpd_linear_sweep_check+0x8c>)
 800b09e:	4a0c      	ldr	r2, [pc, #48]	; (800b0d0 <acc_cpd_linear_sweep_check+0x98>)
 800b0a0:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 800b0a2:	4909      	ldr	r1, [pc, #36]	; (800b0c8 <acc_cpd_linear_sweep_check+0x90>)
 800b0a4:	2005      	movs	r0, #5
 800b0a6:	9000      	str	r0, [sp, #0]
 800b0a8:	4623      	mov	r3, r4
 800b0aa:	2001      	movs	r0, #1
 800b0ac:	47a8      	blx	r5
 800b0ae:	2301      	movs	r3, #1
 800b0b0:	7033      	strb	r3, [r6, #0]
 800b0b2:	b002      	add	sp, #8
 800b0b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0b8:	6828      	ldr	r0, [r5, #0]
 800b0ba:	f040 0001 	orr.w	r0, r0, #1
 800b0be:	6028      	str	r0, [r5, #0]
 800b0c0:	e7e4      	b.n	800b08c <acc_cpd_linear_sweep_check+0x54>
 800b0c2:	bf00      	nop
 800b0c4:	200004c0 	.word	0x200004c0
 800b0c8:	0800fe5c 	.word	0x0800fe5c
 800b0cc:	0800ff70 	.word	0x0800ff70
 800b0d0:	0800ff88 	.word	0x0800ff88

0800b0d4 <acc_cpd_rx_fine_dip_calibration>:
 800b0d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0d8:	ed2d 8b02 	vpush	{d8}
 800b0dc:	f8d2 a000 	ldr.w	sl, [r2]
 800b0e0:	b087      	sub	sp, #28
 800b0e2:	4681      	mov	r9, r0
 800b0e4:	ad05      	add	r5, sp, #20
 800b0e6:	461e      	mov	r6, r3
 800b0e8:	4614      	mov	r4, r2
 800b0ea:	468b      	mov	fp, r1
 800b0ec:	460a      	mov	r2, r1
 800b0ee:	9500      	str	r5, [sp, #0]
 800b0f0:	4650      	mov	r0, sl
 800b0f2:	2500      	movs	r5, #0
 800b0f4:	4649      	mov	r1, r9
 800b0f6:	ab04      	add	r3, sp, #16
 800b0f8:	e9cd 6503 	strd	r6, r5, [sp, #12]
 800b0fc:	9505      	str	r5, [sp, #20]
 800b0fe:	f7fc f977 	bl	80073f0 <acc_sensor_protocol_r2_prepare_load>
 800b102:	2800      	cmp	r0, #0
 800b104:	f000 80af 	beq.w	800b266 <acc_cpd_rx_fine_dip_calibration+0x192>
 800b108:	9b05      	ldr	r3, [sp, #20]
 800b10a:	ee08 aa10 	vmov	s16, sl
 800b10e:	ee08 ba90 	vmov	s17, fp
 800b112:	46cb      	mov	fp, r9
 800b114:	f5c5 68d5 	rsb	r8, r5, #1704	; 0x6a8
 800b118:	f108 0806 	add.w	r8, r8, #6
 800b11c:	4598      	cmp	r8, r3
 800b11e:	bf28      	it	cs
 800b120:	4698      	movcs	r8, r3
 800b122:	9e04      	ldr	r6, [sp, #16]
 800b124:	f001 faae 	bl	800c684 <acc_image_a111_r2c_rx_fine_dip_calibration_get>
 800b128:	ea4f 0955 	mov.w	r9, r5, lsr #1
 800b12c:	ea4f 0258 	mov.w	r2, r8, lsr #1
 800b130:	4631      	mov	r1, r6
 800b132:	eb00 0089 	add.w	r0, r0, r9, lsl #2
 800b136:	f001 fa4f 	bl	800c5d8 <acc_confprogram_copy>
 800b13a:	f001 faa7 	bl	800c68c <acc_image_a111_r2c_rx_fine_dip_calibration_param_table_get>
 800b13e:	6862      	ldr	r2, [r4, #4]
 800b140:	9201      	str	r2, [sp, #4]
 800b142:	b2af      	uxth	r7, r5
 800b144:	fa1f fa88 	uxth.w	sl, r8
 800b148:	221b      	movs	r2, #27
 800b14a:	4603      	mov	r3, r0
 800b14c:	4639      	mov	r1, r7
 800b14e:	9200      	str	r2, [sp, #0]
 800b150:	4630      	mov	r0, r6
 800b152:	4652      	mov	r2, sl
 800b154:	f001 f952 	bl	800c3fc <acc_confprogram_patch_offset>
 800b158:	f001 fa98 	bl	800c68c <acc_image_a111_r2c_rx_fine_dip_calibration_param_table_get>
 800b15c:	68a2      	ldr	r2, [r4, #8]
 800b15e:	9201      	str	r2, [sp, #4]
 800b160:	2219      	movs	r2, #25
 800b162:	4603      	mov	r3, r0
 800b164:	4639      	mov	r1, r7
 800b166:	9200      	str	r2, [sp, #0]
 800b168:	4630      	mov	r0, r6
 800b16a:	4652      	mov	r2, sl
 800b16c:	f001 f946 	bl	800c3fc <acc_confprogram_patch_offset>
 800b170:	f001 fa8c 	bl	800c68c <acc_image_a111_r2c_rx_fine_dip_calibration_param_table_get>
 800b174:	68e2      	ldr	r2, [r4, #12]
 800b176:	9201      	str	r2, [sp, #4]
 800b178:	f04f 0c1a 	mov.w	ip, #26
 800b17c:	4603      	mov	r3, r0
 800b17e:	4652      	mov	r2, sl
 800b180:	4639      	mov	r1, r7
 800b182:	f8cd c000 	str.w	ip, [sp]
 800b186:	4630      	mov	r0, r6
 800b188:	f001 f938 	bl	800c3fc <acc_confprogram_patch_offset>
 800b18c:	f001 fa7e 	bl	800c68c <acc_image_a111_r2c_rx_fine_dip_calibration_param_table_get>
 800b190:	8a22      	ldrh	r2, [r4, #16]
 800b192:	9201      	str	r2, [sp, #4]
 800b194:	f04f 0c17 	mov.w	ip, #23
 800b198:	4603      	mov	r3, r0
 800b19a:	4652      	mov	r2, sl
 800b19c:	4639      	mov	r1, r7
 800b19e:	f8cd c000 	str.w	ip, [sp]
 800b1a2:	4630      	mov	r0, r6
 800b1a4:	f001 f92a 	bl	800c3fc <acc_confprogram_patch_offset>
 800b1a8:	f001 fa70 	bl	800c68c <acc_image_a111_r2c_rx_fine_dip_calibration_param_table_get>
 800b1ac:	69e2      	ldr	r2, [r4, #28]
 800b1ae:	9201      	str	r2, [sp, #4]
 800b1b0:	f04f 0c0d 	mov.w	ip, #13
 800b1b4:	4603      	mov	r3, r0
 800b1b6:	4652      	mov	r2, sl
 800b1b8:	4639      	mov	r1, r7
 800b1ba:	f8cd c000 	str.w	ip, [sp]
 800b1be:	4630      	mov	r0, r6
 800b1c0:	f001 f91c 	bl	800c3fc <acc_confprogram_patch_offset>
 800b1c4:	f001 fa62 	bl	800c68c <acc_image_a111_r2c_rx_fine_dip_calibration_param_table_get>
 800b1c8:	6a22      	ldr	r2, [r4, #32]
 800b1ca:	9201      	str	r2, [sp, #4]
 800b1cc:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 800b1d0:	4603      	mov	r3, r0
 800b1d2:	4652      	mov	r2, sl
 800b1d4:	4639      	mov	r1, r7
 800b1d6:	f8cd c000 	str.w	ip, [sp]
 800b1da:	4630      	mov	r0, r6
 800b1dc:	f001 f90e 	bl	800c3fc <acc_confprogram_patch_offset>
 800b1e0:	f001 fa54 	bl	800c68c <acc_image_a111_r2c_rx_fine_dip_calibration_param_table_get>
 800b1e4:	69a2      	ldr	r2, [r4, #24]
 800b1e6:	9201      	str	r2, [sp, #4]
 800b1e8:	f04f 0c0f 	mov.w	ip, #15
 800b1ec:	4603      	mov	r3, r0
 800b1ee:	4652      	mov	r2, sl
 800b1f0:	4639      	mov	r1, r7
 800b1f2:	f8cd c000 	str.w	ip, [sp]
 800b1f6:	4630      	mov	r0, r6
 800b1f8:	f001 f900 	bl	800c3fc <acc_confprogram_patch_offset>
 800b1fc:	f001 fa46 	bl	800c68c <acc_image_a111_r2c_rx_fine_dip_calibration_param_table_get>
 800b200:	6962      	ldr	r2, [r4, #20]
 800b202:	9201      	str	r2, [sp, #4]
 800b204:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
 800b208:	4603      	mov	r3, r0
 800b20a:	4652      	mov	r2, sl
 800b20c:	4639      	mov	r1, r7
 800b20e:	4630      	mov	r0, r6
 800b210:	f8cd c000 	str.w	ip, [sp]
 800b214:	f001 f8f2 	bl	800c3fc <acc_confprogram_patch_offset>
 800b218:	4643      	mov	r3, r8
 800b21a:	465a      	mov	r2, fp
 800b21c:	6820      	ldr	r0, [r4, #0]
 800b21e:	fa1f f189 	uxth.w	r1, r9
 800b222:	f7fb fdf5 	bl	8006e10 <acc_sensor_r2_load_confmem>
 800b226:	9b05      	ldr	r3, [sp, #20]
 800b228:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800b22c:	441d      	add	r5, r3
 800b22e:	4295      	cmp	r5, r2
 800b230:	f67f af70 	bls.w	800b114 <acc_cpd_rx_fine_dip_calibration+0x40>
 800b234:	ee18 0a10 	vmov	r0, s16
 800b238:	2119      	movs	r1, #25
 800b23a:	f7fc f93d 	bl	80074b8 <acc_sensor_protocol_r2_run_program>
 800b23e:	ee18 aa10 	vmov	sl, s16
 800b242:	4606      	mov	r6, r0
 800b244:	b1d8      	cbz	r0, 800b27e <acc_cpd_rx_fine_dip_calibration+0x1aa>
 800b246:	ee18 0a10 	vmov	r0, s16
 800b24a:	2300      	movs	r3, #0
 800b24c:	2208      	movs	r2, #8
 800b24e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800b252:	f7fc fab5 	bl	80077c0 <acc_sensor_protocol_r2_wait_for_specific_event>
 800b256:	b9e8      	cbnz	r0, 800b294 <acc_cpd_rx_fine_dip_calibration+0x1c0>
 800b258:	2600      	movs	r6, #0
 800b25a:	4630      	mov	r0, r6
 800b25c:	b007      	add	sp, #28
 800b25e:	ecbd 8b02 	vpop	{d8}
 800b262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b266:	4b2a      	ldr	r3, [pc, #168]	; (800b310 <acc_cpd_rx_fine_dip_calibration+0x23c>)
 800b268:	4a2a      	ldr	r2, [pc, #168]	; (800b314 <acc_cpd_rx_fine_dip_calibration+0x240>)
 800b26a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b26c:	492a      	ldr	r1, [pc, #168]	; (800b318 <acc_cpd_rx_fine_dip_calibration+0x244>)
 800b26e:	4606      	mov	r6, r0
 800b270:	4798      	blx	r3
 800b272:	4630      	mov	r0, r6
 800b274:	b007      	add	sp, #28
 800b276:	ecbd 8b02 	vpop	{d8}
 800b27a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b27e:	4b24      	ldr	r3, [pc, #144]	; (800b310 <acc_cpd_rx_fine_dip_calibration+0x23c>)
 800b280:	4a26      	ldr	r2, [pc, #152]	; (800b31c <acc_cpd_rx_fine_dip_calibration+0x248>)
 800b282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b284:	4924      	ldr	r1, [pc, #144]	; (800b318 <acc_cpd_rx_fine_dip_calibration+0x244>)
 800b286:	4798      	blx	r3
 800b288:	4630      	mov	r0, r6
 800b28a:	b007      	add	sp, #28
 800b28c:	ecbd 8b02 	vpop	{d8}
 800b290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b294:	ee18 0a90 	vmov	r0, s17
 800b298:	2119      	movs	r1, #25
 800b29a:	f7fb fdf1 	bl	8006e80 <acc_sensor_r2_buffer_processed_verify_size>
 800b29e:	4606      	mov	r6, r0
 800b2a0:	b928      	cbnz	r0, 800b2ae <acc_cpd_rx_fine_dip_calibration+0x1da>
 800b2a2:	4b1b      	ldr	r3, [pc, #108]	; (800b310 <acc_cpd_rx_fine_dip_calibration+0x23c>)
 800b2a4:	4a1e      	ldr	r2, [pc, #120]	; (800b320 <acc_cpd_rx_fine_dip_calibration+0x24c>)
 800b2a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2a8:	491b      	ldr	r1, [pc, #108]	; (800b318 <acc_cpd_rx_fine_dip_calibration+0x244>)
 800b2aa:	4798      	blx	r3
 800b2ac:	e7e1      	b.n	800b272 <acc_cpd_rx_fine_dip_calibration+0x19e>
 800b2ae:	4659      	mov	r1, fp
 800b2b0:	2319      	movs	r3, #25
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	ee18 0a10 	vmov	r0, s16
 800b2b8:	f7fb fdea 	bl	8006e90 <acc_sensor_r2_buffer_processed_read>
 800b2bc:	2319      	movs	r3, #25
 800b2be:	4604      	mov	r4, r0
 800b2c0:	4602      	mov	r2, r0
 800b2c2:	ee18 1a10 	vmov	r1, s16
 800b2c6:	200a      	movs	r0, #10
 800b2c8:	f7fc fdae 	bl	8007e28 <acc_probes_execute_uint16>
 800b2cc:	9b03      	ldr	r3, [sp, #12]
 800b2ce:	4620      	mov	r0, r4
 800b2d0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800b2d4:	6804      	ldr	r4, [r0, #0]
 800b2d6:	6841      	ldr	r1, [r0, #4]
 800b2d8:	6882      	ldr	r2, [r0, #8]
 800b2da:	68c5      	ldr	r5, [r0, #12]
 800b2dc:	60dd      	str	r5, [r3, #12]
 800b2de:	3010      	adds	r0, #16
 800b2e0:	42b0      	cmp	r0, r6
 800b2e2:	601c      	str	r4, [r3, #0]
 800b2e4:	6059      	str	r1, [r3, #4]
 800b2e6:	609a      	str	r2, [r3, #8]
 800b2e8:	f103 0310 	add.w	r3, r3, #16
 800b2ec:	d1f2      	bne.n	800b2d4 <acc_cpd_rx_fine_dip_calibration+0x200>
 800b2ee:	8802      	ldrh	r2, [r0, #0]
 800b2f0:	801a      	strh	r2, [r3, #0]
 800b2f2:	4650      	mov	r0, sl
 800b2f4:	f7fc f96c 	bl	80075d0 <acc_sensor_protocol_r2_ack_event>
 800b2f8:	4606      	mov	r6, r0
 800b2fa:	2800      	cmp	r0, #0
 800b2fc:	d0ac      	beq.n	800b258 <acc_cpd_rx_fine_dip_calibration+0x184>
 800b2fe:	4909      	ldr	r1, [pc, #36]	; (800b324 <acc_cpd_rx_fine_dip_calibration+0x250>)
 800b300:	4809      	ldr	r0, [pc, #36]	; (800b328 <acc_cpd_rx_fine_dip_calibration+0x254>)
 800b302:	f001 f98f 	bl	800c624 <acc_diagnostic_log_array>
 800b306:	9803      	ldr	r0, [sp, #12]
 800b308:	2119      	movs	r1, #25
 800b30a:	f001 f99b 	bl	800c644 <acc_diagnostic_log_data_u16>
 800b30e:	e7b0      	b.n	800b272 <acc_cpd_rx_fine_dip_calibration+0x19e>
 800b310:	200004c0 	.word	0x200004c0
 800b314:	0800ffc4 	.word	0x0800ffc4
 800b318:	0800ffec 	.word	0x0800ffec
 800b31c:	08010008 	.word	0x08010008
 800b320:	0800f698 	.word	0x0800f698
 800b324:	0800f830 	.word	0x0800f830
 800b328:	0801003c 	.word	0x0801003c

0800b32c <acc_cpd_sweep_check_voffset_vslope>:
 800b32c:	8802      	ldrh	r2, [r0, #0]
 800b32e:	eddf 4a2e 	vldr	s9, [pc, #184]	; 800b3e8 <acc_cpd_sweep_check_voffset_vslope+0xbc>
 800b332:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800b3ec <acc_cpd_sweep_check_voffset_vslope+0xc0>
 800b336:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 800b3f0 <acc_cpd_sweep_check_voffset_vslope+0xc4>
 800b33a:	ee07 2a90 	vmov	s15, r2
 800b33e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b342:	b410      	push	{r4}
 800b344:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800b348:	4c2a      	ldr	r4, [pc, #168]	; (800b3f4 <acc_cpd_sweep_check_voffset_vslope+0xc8>)
 800b34a:	8842      	ldrh	r2, [r0, #2]
 800b34c:	f934 1011 	ldrsh.w	r1, [r4, r1, lsl #1]
 800b350:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 800b354:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800b358:	ee07 1a10 	vmov	s14, r1
 800b35c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800b360:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b364:	ee67 7a86 	vmul.f32	s15, s15, s12
 800b368:	b083      	sub	sp, #12
 800b36a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b36e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b372:	edcd 7a01 	vstr	s15, [sp, #4]
 800b376:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 800b37a:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 800b37e:	f2a0 24ee 	subw	r4, r0, #750	; 0x2ee
 800b382:	f5b4 7f06 	cmp.w	r4, #536	; 0x218
 800b386:	d224      	bcs.n	800b3d2 <acc_cpd_sweep_check_voffset_vslope+0xa6>
 800b388:	f5a0 7043 	sub.w	r0, r0, #780	; 0x30c
 800b38c:	f5b0 7fe6 	cmp.w	r0, #460	; 0x1cc
 800b390:	d924      	bls.n	800b3dc <acc_cpd_sweep_check_voffset_vslope+0xb0>
 800b392:	ee07 2a90 	vmov	s15, r2
 800b396:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b39a:	ee07 1a90 	vmov	s15, r1
 800b39e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800b3a2:	ee67 7a24 	vmul.f32	s15, s14, s9
 800b3a6:	3364      	adds	r3, #100	; 0x64
 800b3a8:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800b3ac:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800b3b0:	ee67 7a86 	vmul.f32	s15, s15, s12
 800b3b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b3bc:	ee17 2a90 	vmov	r2, s15
 800b3c0:	b210      	sxth	r0, r2
 800b3c2:	4298      	cmp	r0, r3
 800b3c4:	bfcc      	ite	gt
 800b3c6:	2000      	movgt	r0, #0
 800b3c8:	2001      	movle	r0, #1
 800b3ca:	b003      	add	sp, #12
 800b3cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3d0:	4770      	bx	lr
 800b3d2:	2000      	movs	r0, #0
 800b3d4:	b003      	add	sp, #12
 800b3d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3da:	4770      	bx	lr
 800b3dc:	2001      	movs	r0, #1
 800b3de:	b003      	add	sp, #12
 800b3e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3e4:	4770      	bx	lr
 800b3e6:	bf00      	nop
 800b3e8:	37800000 	.word	0x37800000
 800b3ec:	3f99999a 	.word	0x3f99999a
 800b3f0:	447a0000 	.word	0x447a0000
 800b3f4:	08013898 	.word	0x08013898

0800b3f8 <acc_cpd_sweep_check_count_bad_sweeps>:
 800b3f8:	b138      	cbz	r0, 800b40a <acc_cpd_sweep_check_count_bad_sweeps+0x12>
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	1e43      	subs	r3, r0, #1
 800b3fe:	4018      	ands	r0, r3
 800b400:	f102 0201 	add.w	r2, r2, #1
 800b404:	d1fa      	bne.n	800b3fc <acc_cpd_sweep_check_count_bad_sweeps+0x4>
 800b406:	4610      	mov	r0, r2
 800b408:	4770      	bx	lr
 800b40a:	4602      	mov	r2, r0
 800b40c:	4610      	mov	r0, r2
 800b40e:	4770      	bx	lr

0800b410 <acc_radar_engine_check_asic_id>:
 800b410:	6800      	ldr	r0, [r0, #0]
 800b412:	2100      	movs	r1, #0
 800b414:	f7fc bac6 	b.w	80079a4 <acc_sensor_protocol_r2_check_asic_id>

0800b418 <acc_radar_engine_wait_for_radar_data>:
 800b418:	6800      	ldr	r0, [r0, #0]
 800b41a:	f7fc ba31 	b.w	8007880 <acc_sensor_protocol_r2_wait_for_radar_data>
 800b41e:	bf00      	nop

0800b420 <acc_radar_engine_measure>:
 800b420:	6800      	ldr	r0, [r0, #0]
 800b422:	f7fc b8d5 	b.w	80075d0 <acc_sensor_protocol_r2_ack_event>
 800b426:	bf00      	nop

0800b428 <acc_radar_engine_wait_for_hibernate_ready>:
 800b428:	6800      	ldr	r0, [r0, #0]
 800b42a:	f7fc b9f3 	b.w	8007814 <acc_sensor_protocol_r2_wait_for_hibernate_ready>
 800b42e:	bf00      	nop

0800b430 <acc_radar_engine_acquire_adc_data>:
 800b430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b434:	ed2d 8b02 	vpush	{d8}
 800b438:	2600      	movs	r6, #0
 800b43a:	6016      	str	r6, [r2, #0]
 800b43c:	f8b0 a00c 	ldrh.w	sl, [r0, #12]
 800b440:	ed9f 8a45 	vldr	s16, [pc, #276]	; 800b558 <acc_radar_engine_acquire_adc_data+0x128>
 800b444:	7bc3      	ldrb	r3, [r0, #15]
 800b446:	f890 800e 	ldrb.w	r8, [r0, #14]
 800b44a:	f8d0 b010 	ldr.w	fp, [r0, #16]
 800b44e:	7316      	strb	r6, [r2, #12]
 800b450:	b089      	sub	sp, #36	; 0x24
 800b452:	460f      	mov	r7, r1
 800b454:	7116      	strb	r6, [r2, #4]
 800b456:	f88d 600e 	strb.w	r6, [sp, #14]
 800b45a:	f88d 600f 	strb.w	r6, [sp, #15]
 800b45e:	9301      	str	r3, [sp, #4]
 800b460:	ed82 8a02 	vstr	s16, [r2, #8]
 800b464:	f1ba 0f00 	cmp.w	sl, #0
 800b468:	d05b      	beq.n	800b522 <acc_radar_engine_acquire_adc_data+0xf2>
 800b46a:	4647      	mov	r7, r8
 800b46c:	4614      	mov	r4, r2
 800b46e:	4605      	mov	r5, r0
 800b470:	4688      	mov	r8, r1
 800b472:	b927      	cbnz	r7, 800b47e <acc_radar_engine_acquire_adc_data+0x4e>
 800b474:	6828      	ldr	r0, [r5, #0]
 800b476:	f7fc f8ab 	bl	80075d0 <acc_sensor_protocol_r2_ack_event>
 800b47a:	2800      	cmp	r0, #0
 800b47c:	d05e      	beq.n	800b53c <acc_radar_engine_acquire_adc_data+0x10c>
 800b47e:	6828      	ldr	r0, [r5, #0]
 800b480:	f10d 020e 	add.w	r2, sp, #14
 800b484:	4659      	mov	r1, fp
 800b486:	f7fc f9fb 	bl	8007880 <acc_sensor_protocol_r2_wait_for_radar_data>
 800b48a:	2800      	cmp	r0, #0
 800b48c:	d056      	beq.n	800b53c <acc_radar_engine_acquire_adc_data+0x10c>
 800b48e:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800b492:	b903      	cbnz	r3, 800b496 <acc_radar_engine_acquire_adc_data+0x66>
 800b494:	78a3      	ldrb	r3, [r4, #2]
 800b496:	69aa      	ldr	r2, [r5, #24]
 800b498:	70a3      	strb	r3, [r4, #2]
 800b49a:	4641      	mov	r1, r8
 800b49c:	6953      	ldr	r3, [r2, #20]
 800b49e:	4628      	mov	r0, r5
 800b4a0:	f10d 020f 	add.w	r2, sp, #15
 800b4a4:	4798      	blx	r3
 800b4a6:	69aa      	ldr	r2, [r5, #24]
 800b4a8:	9004      	str	r0, [sp, #16]
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	f8d2 9018 	ldr.w	r9, [r2, #24]
 800b4b0:	f88d 3014 	strb.w	r3, [sp, #20]
 800b4b4:	f88d 301c 	strb.w	r3, [sp, #28]
 800b4b8:	ed8d 8a06 	vstr	s16, [sp, #24]
 800b4bc:	ab05      	add	r3, sp, #20
 800b4be:	aa04      	add	r2, sp, #16
 800b4c0:	4641      	mov	r1, r8
 800b4c2:	4628      	mov	r0, r5
 800b4c4:	47c8      	blx	r9
 800b4c6:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800b4ca:	b903      	cbnz	r3, 800b4ce <acc_radar_engine_acquire_adc_data+0x9e>
 800b4cc:	7b23      	ldrb	r3, [r4, #12]
 800b4ce:	f89d 9014 	ldrb.w	r9, [sp, #20]
 800b4d2:	7323      	strb	r3, [r4, #12]
 800b4d4:	f1b9 0f00 	cmp.w	r9, #0
 800b4d8:	d129      	bne.n	800b52e <acc_radar_engine_acquire_adc_data+0xfe>
 800b4da:	7923      	ldrb	r3, [r4, #4]
 800b4dc:	edd4 0a02 	vldr	s1, [r4, #8]
 800b4e0:	ed9d 0a06 	vldr	s0, [sp, #24]
 800b4e4:	7123      	strb	r3, [r4, #4]
 800b4e6:	f002 fcb1 	bl	800de4c <fmaxf>
 800b4ea:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800b4ee:	ed84 0a02 	vstr	s0, [r4, #8]
 800b4f2:	b902      	cbnz	r2, 800b4f6 <acc_radar_engine_acquire_adc_data+0xc6>
 800b4f4:	78e2      	ldrb	r2, [r4, #3]
 800b4f6:	8821      	ldrh	r1, [r4, #0]
 800b4f8:	9b04      	ldr	r3, [sp, #16]
 800b4fa:	70e2      	strb	r2, [r4, #3]
 800b4fc:	69aa      	ldr	r2, [r5, #24]
 800b4fe:	440b      	add	r3, r1
 800b500:	8023      	strh	r3, [r4, #0]
 800b502:	4649      	mov	r1, r9
 800b504:	69d3      	ldr	r3, [r2, #28]
 800b506:	4628      	mov	r0, r5
 800b508:	4798      	blx	r3
 800b50a:	9b01      	ldr	r3, [sp, #4]
 800b50c:	b11b      	cbz	r3, 800b516 <acc_radar_engine_acquire_adc_data+0xe6>
 800b50e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800b512:	42b3      	cmp	r3, r6
 800b514:	d018      	beq.n	800b548 <acc_radar_engine_acquire_adc_data+0x118>
 800b516:	b967      	cbnz	r7, 800b532 <acc_radar_engine_acquire_adc_data+0x102>
 800b518:	3601      	adds	r6, #1
 800b51a:	b2b3      	uxth	r3, r6
 800b51c:	4553      	cmp	r3, sl
 800b51e:	d3a8      	bcc.n	800b472 <acc_radar_engine_acquire_adc_data+0x42>
 800b520:	4647      	mov	r7, r8
 800b522:	6838      	ldr	r0, [r7, #0]
 800b524:	b009      	add	sp, #36	; 0x24
 800b526:	ecbd 8b02 	vpop	{d8}
 800b52a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b52e:	464b      	mov	r3, r9
 800b530:	e7d4      	b.n	800b4dc <acc_radar_engine_acquire_adc_data+0xac>
 800b532:	6828      	ldr	r0, [r5, #0]
 800b534:	f7fc f84c 	bl	80075d0 <acc_sensor_protocol_r2_ack_event>
 800b538:	2800      	cmp	r0, #0
 800b53a:	d1ed      	bne.n	800b518 <acc_radar_engine_acquire_adc_data+0xe8>
 800b53c:	2000      	movs	r0, #0
 800b53e:	b009      	add	sp, #36	; 0x24
 800b540:	ecbd 8b02 	vpop	{d8}
 800b544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b548:	f8d8 0000 	ldr.w	r0, [r8]
 800b54c:	b009      	add	sp, #36	; 0x24
 800b54e:	ecbd 8b02 	vpop	{d8}
 800b552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b556:	bf00      	nop
 800b558:	ff800000 	.word	0xff800000

0800b55c <acc_sensor_diagnostics_r2_sensor_status>:
 800b55c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b560:	b094      	sub	sp, #80	; 0x50
 800b562:	4604      	mov	r4, r0
 800b564:	f7fa f954 	bl	8005810 <acc_rss_integration_log_level>
 800b568:	2801      	cmp	r0, #1
 800b56a:	d905      	bls.n	800b578 <acc_sensor_diagnostics_r2_sensor_status+0x1c>
 800b56c:	4b9c      	ldr	r3, [pc, #624]	; (800b7e0 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800b56e:	4a9d      	ldr	r2, [pc, #628]	; (800b7e4 <acc_sensor_diagnostics_r2_sensor_status+0x288>)
 800b570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b572:	499d      	ldr	r1, [pc, #628]	; (800b7e8 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800b574:	2002      	movs	r0, #2
 800b576:	4798      	blx	r3
 800b578:	2201      	movs	r2, #1
 800b57a:	21b2      	movs	r1, #178	; 0xb2
 800b57c:	4620      	mov	r0, r4
 800b57e:	f7fc fcaf 	bl	8007ee0 <acc_sensor_reg_write>
 800b582:	2300      	movs	r3, #0
 800b584:	f8df a258 	ldr.w	sl, [pc, #600]	; 800b7e0 <acc_sensor_diagnostics_r2_sensor_status+0x284>
 800b588:	f8df 9288 	ldr.w	r9, [pc, #648]	; 800b814 <acc_sensor_diagnostics_r2_sensor_status+0x2b8>
 800b58c:	4f96      	ldr	r7, [pc, #600]	; (800b7e8 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800b58e:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 800b592:	2564      	movs	r5, #100	; 0x64
 800b594:	e013      	b.n	800b5be <acc_sensor_diagnostics_r2_sensor_status+0x62>
 800b596:	f7fa f93b 	bl	8005810 <acc_rss_integration_log_level>
 800b59a:	2801      	cmp	r0, #1
 800b59c:	4623      	mov	r3, r4
 800b59e:	464a      	mov	r2, r9
 800b5a0:	4639      	mov	r1, r7
 800b5a2:	f04f 0002 	mov.w	r0, #2
 800b5a6:	d907      	bls.n	800b5b8 <acc_sensor_diagnostics_r2_sensor_status+0x5c>
 800b5a8:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
 800b5ac:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800b5b0:	9600      	str	r6, [sp, #0]
 800b5b2:	f8da 6034 	ldr.w	r6, [sl, #52]	; 0x34
 800b5b6:	47b0      	blx	r6
 800b5b8:	3d01      	subs	r5, #1
 800b5ba:	b2ad      	uxth	r5, r5
 800b5bc:	b1c5      	cbz	r5, 800b5f0 <acc_sensor_diagnostics_r2_sensor_status+0x94>
 800b5be:	aa0c      	add	r2, sp, #48	; 0x30
 800b5c0:	2111      	movs	r1, #17
 800b5c2:	4620      	mov	r0, r4
 800b5c4:	f7fc fc76 	bl	8007eb4 <acc_sensor_reg_read>
 800b5c8:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800b5cc:	055b      	lsls	r3, r3, #21
 800b5ce:	d4e2      	bmi.n	800b596 <acc_sensor_diagnostics_r2_sensor_status+0x3a>
 800b5d0:	f7fa f91e 	bl	8005810 <acc_rss_integration_log_level>
 800b5d4:	2801      	cmp	r0, #1
 800b5d6:	d90b      	bls.n	800b5f0 <acc_sensor_diagnostics_r2_sensor_status+0x94>
 800b5d8:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800b5dc:	4980      	ldr	r1, [pc, #512]	; (800b7e0 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800b5de:	4a83      	ldr	r2, [pc, #524]	; (800b7ec <acc_sensor_diagnostics_r2_sensor_status+0x290>)
 800b5e0:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800b5e2:	4981      	ldr	r1, [pc, #516]	; (800b7e8 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800b5e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b5e8:	9300      	str	r3, [sp, #0]
 800b5ea:	2002      	movs	r0, #2
 800b5ec:	4623      	mov	r3, r4
 800b5ee:	47a8      	blx	r5
 800b5f0:	2600      	movs	r6, #0
 800b5f2:	4631      	mov	r1, r6
 800b5f4:	aa09      	add	r2, sp, #36	; 0x24
 800b5f6:	4620      	mov	r0, r4
 800b5f8:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 800b5fc:	4d7c      	ldr	r5, [pc, #496]	; (800b7f0 <acc_sensor_diagnostics_r2_sensor_status+0x294>)
 800b5fe:	f7fc fc59 	bl	8007eb4 <acc_sensor_reg_read>
 800b602:	f10d 0226 	add.w	r2, sp, #38	; 0x26
 800b606:	212a      	movs	r1, #42	; 0x2a
 800b608:	4620      	mov	r0, r4
 800b60a:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 800b60e:	f7fc fc51 	bl	8007eb4 <acc_sensor_reg_read>
 800b612:	2128      	movs	r1, #40	; 0x28
 800b614:	aa0a      	add	r2, sp, #40	; 0x28
 800b616:	4620      	mov	r0, r4
 800b618:	f8ad 6028 	strh.w	r6, [sp, #40]	; 0x28
 800b61c:	f105 071e 	add.w	r7, r5, #30
 800b620:	f7fc fc48 	bl	8007eb4 <acc_sensor_reg_read>
 800b624:	ae0c      	add	r6, sp, #48	; 0x30
 800b626:	2163      	movs	r1, #99	; 0x63
 800b628:	e001      	b.n	800b62e <acc_sensor_diagnostics_r2_sensor_status+0xd2>
 800b62a:	f835 1f02 	ldrh.w	r1, [r5, #2]!
 800b62e:	4632      	mov	r2, r6
 800b630:	4620      	mov	r0, r4
 800b632:	f7fc fc3f 	bl	8007eb4 <acc_sensor_reg_read>
 800b636:	42af      	cmp	r7, r5
 800b638:	f106 0602 	add.w	r6, r6, #2
 800b63c:	d1f5      	bne.n	800b62a <acc_sensor_diagnostics_r2_sensor_status+0xce>
 800b63e:	f7fa f8e7 	bl	8005810 <acc_rss_integration_log_level>
 800b642:	2801      	cmp	r0, #1
 800b644:	d91e      	bls.n	800b684 <acc_sensor_diagnostics_r2_sensor_status+0x128>
 800b646:	4d66      	ldr	r5, [pc, #408]	; (800b7e0 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800b648:	f8bd 103e 	ldrh.w	r1, [sp, #62]	; 0x3e
 800b64c:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 800b650:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 800b652:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 800b656:	f8bd 0036 	ldrh.w	r0, [sp, #54]	; 0x36
 800b65a:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 800b65e:	9107      	str	r1, [sp, #28]
 800b660:	9206      	str	r2, [sp, #24]
 800b662:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 800b666:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 800b66a:	9305      	str	r3, [sp, #20]
 800b66c:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800b670:	9300      	str	r3, [sp, #0]
 800b672:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800b676:	e9cd 0603 	strd	r0, r6, [sp, #12]
 800b67a:	4a5e      	ldr	r2, [pc, #376]	; (800b7f4 <acc_sensor_diagnostics_r2_sensor_status+0x298>)
 800b67c:	495a      	ldr	r1, [pc, #360]	; (800b7e8 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800b67e:	4623      	mov	r3, r4
 800b680:	2002      	movs	r0, #2
 800b682:	47a8      	blx	r5
 800b684:	f7fa f8c4 	bl	8005810 <acc_rss_integration_log_level>
 800b688:	2801      	cmp	r0, #1
 800b68a:	d91e      	bls.n	800b6ca <acc_sensor_diagnostics_r2_sensor_status+0x16e>
 800b68c:	4d54      	ldr	r5, [pc, #336]	; (800b7e0 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800b68e:	f8bd 104e 	ldrh.w	r1, [sp, #78]	; 0x4e
 800b692:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 800b696:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 800b698:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
 800b69c:	f8bd 0046 	ldrh.w	r0, [sp, #70]	; 0x46
 800b6a0:	f8bd 6048 	ldrh.w	r6, [sp, #72]	; 0x48
 800b6a4:	9107      	str	r1, [sp, #28]
 800b6a6:	9206      	str	r2, [sp, #24]
 800b6a8:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
 800b6ac:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 800b6b0:	9305      	str	r3, [sp, #20]
 800b6b2:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800b6b6:	9300      	str	r3, [sp, #0]
 800b6b8:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800b6bc:	e9cd 0603 	strd	r0, r6, [sp, #12]
 800b6c0:	4a4d      	ldr	r2, [pc, #308]	; (800b7f8 <acc_sensor_diagnostics_r2_sensor_status+0x29c>)
 800b6c2:	4949      	ldr	r1, [pc, #292]	; (800b7e8 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800b6c4:	4623      	mov	r3, r4
 800b6c6:	2002      	movs	r0, #2
 800b6c8:	47a8      	blx	r5
 800b6ca:	aa0c      	add	r2, sp, #48	; 0x30
 800b6cc:	2168      	movs	r1, #104	; 0x68
 800b6ce:	4620      	mov	r0, r4
 800b6d0:	f7fc fbf0 	bl	8007eb4 <acc_sensor_reg_read>
 800b6d4:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 800b6d8:	2167      	movs	r1, #103	; 0x67
 800b6da:	4620      	mov	r0, r4
 800b6dc:	f7fc fbea 	bl	8007eb4 <acc_sensor_reg_read>
 800b6e0:	aa0d      	add	r2, sp, #52	; 0x34
 800b6e2:	2166      	movs	r1, #102	; 0x66
 800b6e4:	4620      	mov	r0, r4
 800b6e6:	f7fc fbe5 	bl	8007eb4 <acc_sensor_reg_read>
 800b6ea:	f10d 0236 	add.w	r2, sp, #54	; 0x36
 800b6ee:	2165      	movs	r1, #101	; 0x65
 800b6f0:	4620      	mov	r0, r4
 800b6f2:	f7fc fbdf 	bl	8007eb4 <acc_sensor_reg_read>
 800b6f6:	f7fa f88b 	bl	8005810 <acc_rss_integration_log_level>
 800b6fa:	2801      	cmp	r0, #1
 800b6fc:	d912      	bls.n	800b724 <acc_sensor_diagnostics_r2_sensor_status+0x1c8>
 800b6fe:	f8bd 0036 	ldrh.w	r0, [sp, #54]	; 0x36
 800b702:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 800b706:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 800b70a:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800b70e:	4d34      	ldr	r5, [pc, #208]	; (800b7e0 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800b710:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 800b712:	e9cd 1002 	strd	r1, r0, [sp, #8]
 800b716:	e9cd 3200 	strd	r3, r2, [sp]
 800b71a:	4933      	ldr	r1, [pc, #204]	; (800b7e8 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800b71c:	4a37      	ldr	r2, [pc, #220]	; (800b7fc <acc_sensor_diagnostics_r2_sensor_status+0x2a0>)
 800b71e:	4623      	mov	r3, r4
 800b720:	2002      	movs	r0, #2
 800b722:	47a8      	blx	r5
 800b724:	2500      	movs	r5, #0
 800b726:	f10d 022a 	add.w	r2, sp, #42	; 0x2a
 800b72a:	2153      	movs	r1, #83	; 0x53
 800b72c:	4620      	mov	r0, r4
 800b72e:	f8ad 502a 	strh.w	r5, [sp, #42]	; 0x2a
 800b732:	f7fc fbbf 	bl	8007eb4 <acc_sensor_reg_read>
 800b736:	aa0c      	add	r2, sp, #48	; 0x30
 800b738:	2140      	movs	r1, #64	; 0x40
 800b73a:	4620      	mov	r0, r4
 800b73c:	f8ad 5030 	strh.w	r5, [sp, #48]	; 0x30
 800b740:	f7fc fbb8 	bl	8007eb4 <acc_sensor_reg_read>
 800b744:	f7fa f864 	bl	8005810 <acc_rss_integration_log_level>
 800b748:	2801      	cmp	r0, #1
 800b74a:	d909      	bls.n	800b760 <acc_sensor_diagnostics_r2_sensor_status+0x204>
 800b74c:	4a24      	ldr	r2, [pc, #144]	; (800b7e0 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800b74e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800b752:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800b754:	4924      	ldr	r1, [pc, #144]	; (800b7e8 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800b756:	9300      	str	r3, [sp, #0]
 800b758:	4a29      	ldr	r2, [pc, #164]	; (800b800 <acc_sensor_diagnostics_r2_sensor_status+0x2a4>)
 800b75a:	4623      	mov	r3, r4
 800b75c:	2002      	movs	r0, #2
 800b75e:	47a8      	blx	r5
 800b760:	f7fa f856 	bl	8005810 <acc_rss_integration_log_level>
 800b764:	2801      	cmp	r0, #1
 800b766:	d90e      	bls.n	800b786 <acc_sensor_diagnostics_r2_sensor_status+0x22a>
 800b768:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800b76c:	491c      	ldr	r1, [pc, #112]	; (800b7e0 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800b76e:	4a25      	ldr	r2, [pc, #148]	; (800b804 <acc_sensor_diagnostics_r2_sensor_status+0x2a8>)
 800b770:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800b772:	491d      	ldr	r1, [pc, #116]	; (800b7e8 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800b774:	f003 0040 	and.w	r0, r3, #64	; 0x40
 800b778:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b77c:	e9cd 3000 	strd	r3, r0, [sp]
 800b780:	4623      	mov	r3, r4
 800b782:	2002      	movs	r0, #2
 800b784:	47a8      	blx	r5
 800b786:	f7fa f843 	bl	8005810 <acc_rss_integration_log_level>
 800b78a:	2801      	cmp	r0, #1
 800b78c:	d90e      	bls.n	800b7ac <acc_sensor_diagnostics_r2_sensor_status+0x250>
 800b78e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800b792:	4913      	ldr	r1, [pc, #76]	; (800b7e0 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800b794:	4a1c      	ldr	r2, [pc, #112]	; (800b808 <acc_sensor_diagnostics_r2_sensor_status+0x2ac>)
 800b796:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800b798:	4913      	ldr	r1, [pc, #76]	; (800b7e8 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800b79a:	f003 0010 	and.w	r0, r3, #16
 800b79e:	f003 0320 	and.w	r3, r3, #32
 800b7a2:	e9cd 3000 	strd	r3, r0, [sp]
 800b7a6:	4623      	mov	r3, r4
 800b7a8:	2002      	movs	r0, #2
 800b7aa:	47a8      	blx	r5
 800b7ac:	f7fa f830 	bl	8005810 <acc_rss_integration_log_level>
 800b7b0:	2801      	cmp	r0, #1
 800b7b2:	d90e      	bls.n	800b7d2 <acc_sensor_diagnostics_r2_sensor_status+0x276>
 800b7b4:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800b7b8:	4909      	ldr	r1, [pc, #36]	; (800b7e0 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800b7ba:	4a14      	ldr	r2, [pc, #80]	; (800b80c <acc_sensor_diagnostics_r2_sensor_status+0x2b0>)
 800b7bc:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800b7be:	490a      	ldr	r1, [pc, #40]	; (800b7e8 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800b7c0:	f003 0004 	and.w	r0, r3, #4
 800b7c4:	f003 0308 	and.w	r3, r3, #8
 800b7c8:	e9cd 3000 	strd	r3, r0, [sp]
 800b7cc:	4623      	mov	r3, r4
 800b7ce:	2002      	movs	r0, #2
 800b7d0:	47a8      	blx	r5
 800b7d2:	4d0f      	ldr	r5, [pc, #60]	; (800b810 <acc_sensor_diagnostics_r2_sensor_status+0x2b4>)
 800b7d4:	ae0c      	add	r6, sp, #48	; 0x30
 800b7d6:	f105 071e 	add.w	r7, r5, #30
 800b7da:	21f0      	movs	r1, #240	; 0xf0
 800b7dc:	e01e      	b.n	800b81c <acc_sensor_diagnostics_r2_sensor_status+0x2c0>
 800b7de:	bf00      	nop
 800b7e0:	200004c0 	.word	0x200004c0
 800b7e4:	0801004c 	.word	0x0801004c
 800b7e8:	0801008c 	.word	0x0801008c
 800b7ec:	080100c4 	.word	0x080100c4
 800b7f0:	080103d4 	.word	0x080103d4
 800b7f4:	080100e4 	.word	0x080100e4
 800b7f8:	0801012c 	.word	0x0801012c
 800b7fc:	08010178 	.word	0x08010178
 800b800:	080101ac 	.word	0x080101ac
 800b804:	080101cc 	.word	0x080101cc
 800b808:	080101f8 	.word	0x080101f8
 800b80c:	0801022c 	.word	0x0801022c
 800b810:	080103f4 	.word	0x080103f4
 800b814:	080100a4 	.word	0x080100a4
 800b818:	f835 1f02 	ldrh.w	r1, [r5, #2]!
 800b81c:	4632      	mov	r2, r6
 800b81e:	4620      	mov	r0, r4
 800b820:	f7fc fb48 	bl	8007eb4 <acc_sensor_reg_read>
 800b824:	42bd      	cmp	r5, r7
 800b826:	f106 0602 	add.w	r6, r6, #2
 800b82a:	d1f5      	bne.n	800b818 <acc_sensor_diagnostics_r2_sensor_status+0x2bc>
 800b82c:	f7f9 fff0 	bl	8005810 <acc_rss_integration_log_level>
 800b830:	2801      	cmp	r0, #1
 800b832:	f240 80b6 	bls.w	800b9a2 <acc_sensor_diagnostics_r2_sensor_status+0x446>
 800b836:	4a5c      	ldr	r2, [pc, #368]	; (800b9a8 <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 800b838:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800b83c:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800b83e:	495b      	ldr	r1, [pc, #364]	; (800b9ac <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 800b840:	9300      	str	r3, [sp, #0]
 800b842:	4a5b      	ldr	r2, [pc, #364]	; (800b9b0 <acc_sensor_diagnostics_r2_sensor_status+0x454>)
 800b844:	4623      	mov	r3, r4
 800b846:	2002      	movs	r0, #2
 800b848:	47a8      	blx	r5
 800b84a:	2501      	movs	r5, #1
 800b84c:	f7f9 ffe0 	bl	8005810 <acc_rss_integration_log_level>
 800b850:	2801      	cmp	r0, #1
 800b852:	d90e      	bls.n	800b872 <acc_sensor_diagnostics_r2_sensor_status+0x316>
 800b854:	ab14      	add	r3, sp, #80	; 0x50
 800b856:	eb03 0245 	add.w	r2, r3, r5, lsl #1
 800b85a:	4b53      	ldr	r3, [pc, #332]	; (800b9a8 <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 800b85c:	f832 2c20 	ldrh.w	r2, [r2, #-32]
 800b860:	9200      	str	r2, [sp, #0]
 800b862:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800b864:	4a53      	ldr	r2, [pc, #332]	; (800b9b4 <acc_sensor_diagnostics_r2_sensor_status+0x458>)
 800b866:	4951      	ldr	r1, [pc, #324]	; (800b9ac <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 800b868:	3501      	adds	r5, #1
 800b86a:	4623      	mov	r3, r4
 800b86c:	2002      	movs	r0, #2
 800b86e:	b2ed      	uxtb	r5, r5
 800b870:	47b0      	blx	r6
 800b872:	f8df a134 	ldr.w	sl, [pc, #308]	; 800b9a8 <acc_sensor_diagnostics_r2_sensor_status+0x44c>
 800b876:	f8df 9158 	ldr.w	r9, [pc, #344]	; 800b9d0 <acc_sensor_diagnostics_r2_sensor_status+0x474>
 800b87a:	f8df 8130 	ldr.w	r8, [pc, #304]	; 800b9ac <acc_sensor_diagnostics_r2_sensor_status+0x450>
 800b87e:	2601      	movs	r6, #1
 800b880:	f7f9 ffc6 	bl	8005810 <acc_rss_integration_log_level>
 800b884:	ab14      	add	r3, sp, #80	; 0x50
 800b886:	eb03 0c45 	add.w	ip, r3, r5, lsl #1
 800b88a:	2801      	cmp	r0, #1
 800b88c:	4667      	mov	r7, ip
 800b88e:	4623      	mov	r3, r4
 800b890:	464a      	mov	r2, r9
 800b892:	4641      	mov	r1, r8
 800b894:	f04f 0002 	mov.w	r0, #2
 800b898:	d909      	bls.n	800b8ae <acc_sensor_diagnostics_r2_sensor_status+0x352>
 800b89a:	f837 7c20 	ldrh.w	r7, [r7, #-32]
 800b89e:	f83c cc1e 	ldrh.w	ip, [ip, #-30]
 800b8a2:	9600      	str	r6, [sp, #0]
 800b8a4:	e9cd 7c01 	strd	r7, ip, [sp, #4]
 800b8a8:	f8da 7034 	ldr.w	r7, [sl, #52]	; 0x34
 800b8ac:	47b8      	blx	r7
 800b8ae:	3601      	adds	r6, #1
 800b8b0:	3502      	adds	r5, #2
 800b8b2:	2e08      	cmp	r6, #8
 800b8b4:	b2ed      	uxtb	r5, r5
 800b8b6:	d1e3      	bne.n	800b880 <acc_sensor_diagnostics_r2_sensor_status+0x324>
 800b8b8:	2500      	movs	r5, #0
 800b8ba:	aa0b      	add	r2, sp, #44	; 0x2c
 800b8bc:	219d      	movs	r1, #157	; 0x9d
 800b8be:	4620      	mov	r0, r4
 800b8c0:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
 800b8c4:	f7fc faf6 	bl	8007eb4 <acc_sensor_reg_read>
 800b8c8:	f10d 022e 	add.w	r2, sp, #46	; 0x2e
 800b8cc:	2199      	movs	r1, #153	; 0x99
 800b8ce:	4620      	mov	r0, r4
 800b8d0:	f8ad 502e 	strh.w	r5, [sp, #46]	; 0x2e
 800b8d4:	f7fc faee 	bl	8007eb4 <acc_sensor_reg_read>
 800b8d8:	aa0c      	add	r2, sp, #48	; 0x30
 800b8da:	2196      	movs	r1, #150	; 0x96
 800b8dc:	4620      	mov	r0, r4
 800b8de:	f8ad 5030 	strh.w	r5, [sp, #48]	; 0x30
 800b8e2:	f7fc fae7 	bl	8007eb4 <acc_sensor_reg_read>
 800b8e6:	462a      	mov	r2, r5
 800b8e8:	21b2      	movs	r1, #178	; 0xb2
 800b8ea:	4620      	mov	r0, r4
 800b8ec:	f7fc faf8 	bl	8007ee0 <acc_sensor_reg_write>
 800b8f0:	f7f9 ff8e 	bl	8005810 <acc_rss_integration_log_level>
 800b8f4:	2801      	cmp	r0, #1
 800b8f6:	d90f      	bls.n	800b918 <acc_sensor_diagnostics_r2_sensor_status+0x3bc>
 800b8f8:	482b      	ldr	r0, [pc, #172]	; (800b9a8 <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 800b8fa:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 800b8fe:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 800b902:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 800b906:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800b908:	9300      	str	r3, [sp, #0]
 800b90a:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800b90e:	4623      	mov	r3, r4
 800b910:	4a29      	ldr	r2, [pc, #164]	; (800b9b8 <acc_sensor_diagnostics_r2_sensor_status+0x45c>)
 800b912:	4926      	ldr	r1, [pc, #152]	; (800b9ac <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 800b914:	2002      	movs	r0, #2
 800b916:	47a8      	blx	r5
 800b918:	f7f9 ff7a 	bl	8005810 <acc_rss_integration_log_level>
 800b91c:	2801      	cmp	r0, #1
 800b91e:	d909      	bls.n	800b934 <acc_sensor_diagnostics_r2_sensor_status+0x3d8>
 800b920:	4a21      	ldr	r2, [pc, #132]	; (800b9a8 <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 800b922:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 800b926:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800b928:	4920      	ldr	r1, [pc, #128]	; (800b9ac <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 800b92a:	9300      	str	r3, [sp, #0]
 800b92c:	4a23      	ldr	r2, [pc, #140]	; (800b9bc <acc_sensor_diagnostics_r2_sensor_status+0x460>)
 800b92e:	4623      	mov	r3, r4
 800b930:	2002      	movs	r0, #2
 800b932:	47a8      	blx	r5
 800b934:	f7f9 ff6c 	bl	8005810 <acc_rss_integration_log_level>
 800b938:	2801      	cmp	r0, #1
 800b93a:	d909      	bls.n	800b950 <acc_sensor_diagnostics_r2_sensor_status+0x3f4>
 800b93c:	4a1a      	ldr	r2, [pc, #104]	; (800b9a8 <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 800b93e:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800b942:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800b944:	4919      	ldr	r1, [pc, #100]	; (800b9ac <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 800b946:	9300      	str	r3, [sp, #0]
 800b948:	4a1d      	ldr	r2, [pc, #116]	; (800b9c0 <acc_sensor_diagnostics_r2_sensor_status+0x464>)
 800b94a:	4623      	mov	r3, r4
 800b94c:	2002      	movs	r0, #2
 800b94e:	47a8      	blx	r5
 800b950:	f7f9 ff5e 	bl	8005810 <acc_rss_integration_log_level>
 800b954:	2801      	cmp	r0, #1
 800b956:	d909      	bls.n	800b96c <acc_sensor_diagnostics_r2_sensor_status+0x410>
 800b958:	4a13      	ldr	r2, [pc, #76]	; (800b9a8 <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 800b95a:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 800b95e:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800b960:	4912      	ldr	r1, [pc, #72]	; (800b9ac <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 800b962:	9300      	str	r3, [sp, #0]
 800b964:	4a17      	ldr	r2, [pc, #92]	; (800b9c4 <acc_sensor_diagnostics_r2_sensor_status+0x468>)
 800b966:	4623      	mov	r3, r4
 800b968:	2002      	movs	r0, #2
 800b96a:	47a8      	blx	r5
 800b96c:	f7f9 ff50 	bl	8005810 <acc_rss_integration_log_level>
 800b970:	2801      	cmp	r0, #1
 800b972:	d909      	bls.n	800b988 <acc_sensor_diagnostics_r2_sensor_status+0x42c>
 800b974:	4a0c      	ldr	r2, [pc, #48]	; (800b9a8 <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 800b976:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800b97a:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800b97c:	490b      	ldr	r1, [pc, #44]	; (800b9ac <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 800b97e:	9300      	str	r3, [sp, #0]
 800b980:	4a11      	ldr	r2, [pc, #68]	; (800b9c8 <acc_sensor_diagnostics_r2_sensor_status+0x46c>)
 800b982:	4623      	mov	r3, r4
 800b984:	2002      	movs	r0, #2
 800b986:	47a8      	blx	r5
 800b988:	f7f9 ff42 	bl	8005810 <acc_rss_integration_log_level>
 800b98c:	2801      	cmp	r0, #1
 800b98e:	d905      	bls.n	800b99c <acc_sensor_diagnostics_r2_sensor_status+0x440>
 800b990:	4b05      	ldr	r3, [pc, #20]	; (800b9a8 <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 800b992:	4a0e      	ldr	r2, [pc, #56]	; (800b9cc <acc_sensor_diagnostics_r2_sensor_status+0x470>)
 800b994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b996:	4905      	ldr	r1, [pc, #20]	; (800b9ac <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 800b998:	2002      	movs	r0, #2
 800b99a:	4798      	blx	r3
 800b99c:	b014      	add	sp, #80	; 0x50
 800b99e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9a2:	2500      	movs	r5, #0
 800b9a4:	e752      	b.n	800b84c <acc_sensor_diagnostics_r2_sensor_status+0x2f0>
 800b9a6:	bf00      	nop
 800b9a8:	200004c0 	.word	0x200004c0
 800b9ac:	0801008c 	.word	0x0801008c
 800b9b0:	0801025c 	.word	0x0801025c
 800b9b4:	08010284 	.word	0x08010284
 800b9b8:	080102cc 	.word	0x080102cc
 800b9bc:	08010320 	.word	0x08010320
 800b9c0:	08010344 	.word	0x08010344
 800b9c4:	08010360 	.word	0x08010360
 800b9c8:	08010378 	.word	0x08010378
 800b9cc:	08010394 	.word	0x08010394
 800b9d0:	080102a4 	.word	0x080102a4

0800b9d4 <acc_alg_basic_saturation_check_u16>:
 800b9d4:	eddf 6a17 	vldr	s13, [pc, #92]	; 800ba34 <acc_alg_basic_saturation_check_u16+0x60>
 800b9d8:	ed9f 6a17 	vldr	s12, [pc, #92]	; 800ba38 <acc_alg_basic_saturation_check_u16+0x64>
 800b9dc:	ee76 5ac0 	vsub.f32	s11, s13, s0
 800b9e0:	ee80 7a26 	vdiv.f32	s14, s0, s13
 800b9e4:	0849      	lsrs	r1, r1, #1
 800b9e6:	eec5 7aa6 	vdiv.f32	s15, s11, s13
 800b9ea:	ee27 7a06 	vmul.f32	s14, s14, s12
 800b9ee:	ee67 7a86 	vmul.f32	s15, s15, s12
 800b9f2:	d01c      	beq.n	800ba2e <acc_alg_basic_saturation_check_u16+0x5a>
 800b9f4:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800b9f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b9fc:	ee17 3a10 	vmov	r3, s14
 800ba00:	b430      	push	{r4, r5}
 800ba02:	b29d      	uxth	r5, r3
 800ba04:	ee17 3a90 	vmov	r3, s15
 800ba08:	b29c      	uxth	r4, r3
 800ba0a:	1e83      	subs	r3, r0, #2
 800ba0c:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 800ba10:	e003      	b.n	800ba1a <acc_alg_basic_saturation_check_u16+0x46>
 800ba12:	42aa      	cmp	r2, r5
 800ba14:	d905      	bls.n	800ba22 <acc_alg_basic_saturation_check_u16+0x4e>
 800ba16:	428b      	cmp	r3, r1
 800ba18:	d006      	beq.n	800ba28 <acc_alg_basic_saturation_check_u16+0x54>
 800ba1a:	f833 2f02 	ldrh.w	r2, [r3, #2]!
 800ba1e:	42a2      	cmp	r2, r4
 800ba20:	d3f7      	bcc.n	800ba12 <acc_alg_basic_saturation_check_u16+0x3e>
 800ba22:	2001      	movs	r0, #1
 800ba24:	bc30      	pop	{r4, r5}
 800ba26:	4770      	bx	lr
 800ba28:	2000      	movs	r0, #0
 800ba2a:	bc30      	pop	{r4, r5}
 800ba2c:	4770      	bx	lr
 800ba2e:	4608      	mov	r0, r1
 800ba30:	4770      	bx	lr
 800ba32:	bf00      	nop
 800ba34:	42c80000 	.word	0x42c80000
 800ba38:	477fff00 	.word	0x477fff00

0800ba3c <acc_alg_basic_saturation_check_i16>:
 800ba3c:	eddf 6a17 	vldr	s13, [pc, #92]	; 800ba9c <acc_alg_basic_saturation_check_i16+0x60>
 800ba40:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800baa0 <acc_alg_basic_saturation_check_i16+0x64>
 800ba44:	ed9f 6a17 	vldr	s12, [pc, #92]	; 800baa4 <acc_alg_basic_saturation_check_i16+0x68>
 800ba48:	ee36 0ac0 	vsub.f32	s0, s13, s0
 800ba4c:	0849      	lsrs	r1, r1, #1
 800ba4e:	eec0 7a26 	vdiv.f32	s15, s0, s13
 800ba52:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ba56:	ee67 7a86 	vmul.f32	s15, s15, s12
 800ba5a:	d01c      	beq.n	800ba96 <acc_alg_basic_saturation_check_i16+0x5a>
 800ba5c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800ba60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ba64:	ee17 3a10 	vmov	r3, s14
 800ba68:	b430      	push	{r4, r5}
 800ba6a:	b21d      	sxth	r5, r3
 800ba6c:	ee17 3a90 	vmov	r3, s15
 800ba70:	b21c      	sxth	r4, r3
 800ba72:	1e83      	subs	r3, r0, #2
 800ba74:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 800ba78:	e003      	b.n	800ba82 <acc_alg_basic_saturation_check_i16+0x46>
 800ba7a:	42aa      	cmp	r2, r5
 800ba7c:	dd05      	ble.n	800ba8a <acc_alg_basic_saturation_check_i16+0x4e>
 800ba7e:	428b      	cmp	r3, r1
 800ba80:	d006      	beq.n	800ba90 <acc_alg_basic_saturation_check_i16+0x54>
 800ba82:	f933 2f02 	ldrsh.w	r2, [r3, #2]!
 800ba86:	42a2      	cmp	r2, r4
 800ba88:	dbf7      	blt.n	800ba7a <acc_alg_basic_saturation_check_i16+0x3e>
 800ba8a:	2001      	movs	r0, #1
 800ba8c:	bc30      	pop	{r4, r5}
 800ba8e:	4770      	bx	lr
 800ba90:	2000      	movs	r0, #0
 800ba92:	bc30      	pop	{r4, r5}
 800ba94:	4770      	bx	lr
 800ba96:	4608      	mov	r0, r1
 800ba98:	4770      	bx	lr
 800ba9a:	bf00      	nop
 800ba9c:	42c80000 	.word	0x42c80000
 800baa0:	c7000000 	.word	0xc7000000
 800baa4:	46fffe00 	.word	0x46fffe00

0800baa8 <acc_alg_basic_subtract_mean_uint16>:
 800baa8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800baac:	b570      	push	{r4, r5, r6, lr}
 800baae:	d13c      	bne.n	800bb2a <acc_alg_basic_subtract_mean_uint16+0x82>
 800bab0:	2900      	cmp	r1, #0
 800bab2:	d036      	beq.n	800bb22 <acc_alg_basic_subtract_mean_uint16+0x7a>
 800bab4:	eb00 0641 	add.w	r6, r0, r1, lsl #1
 800bab8:	4604      	mov	r4, r0
 800baba:	2500      	movs	r5, #0
 800babc:	f834 2b02 	ldrh.w	r2, [r4], #2
 800bac0:	f5a2 4200 	sub.w	r2, r2, #32768	; 0x8000
 800bac4:	42a6      	cmp	r6, r4
 800bac6:	4415      	add	r5, r2
 800bac8:	d1f8      	bne.n	800babc <acc_alg_basic_subtract_mean_uint16+0x14>
 800baca:	2d00      	cmp	r5, #0
 800bacc:	bfac      	ite	ge
 800bace:	2401      	movge	r4, #1
 800bad0:	f04f 34ff 	movlt.w	r4, #4294967295	; 0xffffffff
 800bad4:	084a      	lsrs	r2, r1, #1
 800bad6:	fb04 5202 	mla	r2, r4, r2, r5
 800bada:	fb92 f5f1 	sdiv	r5, r2, r1
 800bade:	b22c      	sxth	r4, r5
 800bae0:	2c00      	cmp	r4, #0
 800bae2:	dd0e      	ble.n	800bb02 <acc_alg_basic_subtract_mean_uint16+0x5a>
 800bae4:	b2ad      	uxth	r5, r5
 800bae6:	f830 2b02 	ldrh.w	r2, [r0], #2
 800baea:	42aa      	cmp	r2, r5
 800baec:	bf26      	itte	cs
 800baee:	1b52      	subcs	r2, r2, r5
 800baf0:	b292      	uxthcs	r2, r2
 800baf2:	2200      	movcc	r2, #0
 800baf4:	4286      	cmp	r6, r0
 800baf6:	f820 2c02 	strh.w	r2, [r0, #-2]
 800bafa:	d1f4      	bne.n	800bae6 <acc_alg_basic_subtract_mean_uint16+0x3e>
 800bafc:	b103      	cbz	r3, 800bb00 <acc_alg_basic_subtract_mean_uint16+0x58>
 800bafe:	801c      	strh	r4, [r3, #0]
 800bb00:	bd70      	pop	{r4, r5, r6, pc}
 800bb02:	f504 417f 	add.w	r1, r4, #65280	; 0xff00
 800bb06:	31ff      	adds	r1, #255	; 0xff
 800bb08:	f830 2b02 	ldrh.w	r2, [r0], #2
 800bb0c:	4291      	cmp	r1, r2
 800bb0e:	bfa6      	itte	ge
 800bb10:	1b52      	subge	r2, r2, r5
 800bb12:	b292      	uxthge	r2, r2
 800bb14:	f64f 72ff 	movwlt	r2, #65535	; 0xffff
 800bb18:	42b0      	cmp	r0, r6
 800bb1a:	f820 2c02 	strh.w	r2, [r0, #-2]
 800bb1e:	d1f3      	bne.n	800bb08 <acc_alg_basic_subtract_mean_uint16+0x60>
 800bb20:	e7ec      	b.n	800bafc <acc_alg_basic_subtract_mean_uint16+0x54>
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d0ec      	beq.n	800bb00 <acc_alg_basic_subtract_mean_uint16+0x58>
 800bb26:	8019      	strh	r1, [r3, #0]
 800bb28:	bd70      	pop	{r4, r5, r6, pc}
 800bb2a:	4802      	ldr	r0, [pc, #8]	; (800bb34 <acc_alg_basic_subtract_mean_uint16+0x8c>)
 800bb2c:	211b      	movs	r1, #27
 800bb2e:	f7fc f893 	bl	8007c58 <acc_assert_fail>
 800bb32:	bf00      	nop
 800bb34:	08010414 	.word	0x08010414

0800bb38 <acc_alg_basic_subtract_section_mean_q12_4>:
 800bb38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb3c:	2a00      	cmp	r2, #0
 800bb3e:	bf14      	ite	ne
 800bb40:	4690      	movne	r8, r2
 800bb42:	4688      	moveq	r8, r1
 800bb44:	b1b9      	cbz	r1, 800bb76 <acc_alg_basic_subtract_section_mean_q12_4+0x3e>
 800bb46:	460f      	mov	r7, r1
 800bb48:	4681      	mov	r9, r0
 800bb4a:	469a      	mov	sl, r3
 800bb4c:	460d      	mov	r5, r1
 800bb4e:	4646      	mov	r6, r8
 800bb50:	2400      	movs	r4, #0
 800bb52:	19a3      	adds	r3, r4, r6
 800bb54:	42bb      	cmp	r3, r7
 800bb56:	bfc8      	it	gt
 800bb58:	462e      	movgt	r6, r5
 800bb5a:	eb09 0044 	add.w	r0, r9, r4, lsl #1
 800bb5e:	4444      	add	r4, r8
 800bb60:	4631      	mov	r1, r6
 800bb62:	2300      	movs	r3, #0
 800bb64:	4652      	mov	r2, sl
 800bb66:	b2a4      	uxth	r4, r4
 800bb68:	f7ff ff9e 	bl	800baa8 <acc_alg_basic_subtract_mean_uint16>
 800bb6c:	eba5 0508 	sub.w	r5, r5, r8
 800bb70:	42a7      	cmp	r7, r4
 800bb72:	b2ad      	uxth	r5, r5
 800bb74:	d8ed      	bhi.n	800bb52 <acc_alg_basic_subtract_section_mean_q12_4+0x1a>
 800bb76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb7a:	bf00      	nop

0800bb7c <acc_alg_basic_exponential_smoothing_q3_12_complex>:
 800bb7c:	b33b      	cbz	r3, 800bbce <acc_alg_basic_exponential_smoothing_q3_12_complex+0x52>
 800bb7e:	b4f0      	push	{r4, r5, r6, r7}
 800bb80:	f100 0c02 	add.w	ip, r0, #2
 800bb84:	2400      	movs	r4, #0
 800bb86:	1c8f      	adds	r7, r1, #2
 800bb88:	f931 6024 	ldrsh.w	r6, [r1, r4, lsl #2]
 800bb8c:	f930 5024 	ldrsh.w	r5, [r0, r4, lsl #2]
 800bb90:	1bad      	subs	r5, r5, r6
 800bb92:	fb02 f505 	mul.w	r5, r2, r5
 800bb96:	2d00      	cmp	r5, #0
 800bb98:	bfb8      	it	lt
 800bb9a:	f605 75ff 	addwlt	r5, r5, #4095	; 0xfff
 800bb9e:	eb06 3525 	add.w	r5, r6, r5, asr #12
 800bba2:	f821 5024 	strh.w	r5, [r1, r4, lsl #2]
 800bba6:	f93c 5024 	ldrsh.w	r5, [ip, r4, lsl #2]
 800bbaa:	f937 6024 	ldrsh.w	r6, [r7, r4, lsl #2]
 800bbae:	1bad      	subs	r5, r5, r6
 800bbb0:	fb02 f505 	mul.w	r5, r2, r5
 800bbb4:	2d00      	cmp	r5, #0
 800bbb6:	bfb8      	it	lt
 800bbb8:	f605 75ff 	addwlt	r5, r5, #4095	; 0xfff
 800bbbc:	eb06 3525 	add.w	r5, r6, r5, asr #12
 800bbc0:	f827 5024 	strh.w	r5, [r7, r4, lsl #2]
 800bbc4:	3401      	adds	r4, #1
 800bbc6:	42a3      	cmp	r3, r4
 800bbc8:	d1de      	bne.n	800bb88 <acc_alg_basic_exponential_smoothing_q3_12_complex+0xc>
 800bbca:	bcf0      	pop	{r4, r5, r6, r7}
 800bbcc:	4770      	bx	lr
 800bbce:	4770      	bx	lr

0800bbd0 <acc_alg_biquad_q3_12_lowpass_coeffs>:
 800bbd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbd4:	eddf 7abd 	vldr	s15, [pc, #756]	; 800becc <acc_alg_biquad_q3_12_lowpass_coeffs+0x2fc>
 800bbd8:	eeb0 0ac0 	vabs.f32	s0, s0
 800bbdc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800bbe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbe4:	ed2d 8b02 	vpush	{d8}
 800bbe8:	4680      	mov	r8, r0
 800bbea:	4689      	mov	r9, r1
 800bbec:	4616      	mov	r6, r2
 800bbee:	461f      	mov	r7, r3
 800bbf0:	f300 810a 	bgt.w	800be08 <acc_alg_biquad_q3_12_lowpass_coeffs+0x238>
 800bbf4:	eddf 7ab6 	vldr	s15, [pc, #728]	; 800bed0 <acc_alg_biquad_q3_12_lowpass_coeffs+0x300>
 800bbf8:	ee20 0a27 	vmul.f32	s0, s0, s15
 800bbfc:	f002 f8ce 	bl	800dd9c <roundf>
 800bc00:	ed9f 7ab4 	vldr	s14, [pc, #720]	; 800bed4 <acc_alg_biquad_q3_12_lowpass_coeffs+0x304>
 800bc04:	eddf 7ab4 	vldr	s15, [pc, #720]	; 800bed8 <acc_alg_biquad_q3_12_lowpass_coeffs+0x308>
 800bc08:	ee20 0a07 	vmul.f32	s0, s0, s14
 800bc0c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800bc10:	f1b8 0f00 	cmp.w	r8, #0
 800bc14:	d036      	beq.n	800bc84 <acc_alg_biquad_q3_12_lowpass_coeffs+0xb4>
 800bc16:	f000 fdbd 	bl	800c794 <acc_alg_basic_math_restricted_tan_f32>
 800bc1a:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 800bedc <acc_alg_biquad_q3_12_lowpass_coeffs+0x30c>
 800bc1e:	eddf 7ab0 	vldr	s15, [pc, #704]	; 800bee0 <acc_alg_biquad_q3_12_lowpass_coeffs+0x310>
 800bc22:	ee20 0a07 	vmul.f32	s0, s0, s14
 800bc26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc2a:	ee30 7a27 	vadd.f32	s14, s0, s15
 800bc2e:	ee60 7a27 	vmul.f32	s15, s0, s15
 800bc32:	ee27 0a00 	vmul.f32	s0, s14, s0
 800bc36:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800bc3a:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 800bc3e:	eec0 7a07 	vdiv.f32	s15, s0, s14
 800bc42:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800bc46:	eef4 7ac6 	vcmpe.f32	s15, s12
 800bc4a:	ee37 7a26 	vadd.f32	s14, s14, s13
 800bc4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc52:	eef1 5ac7 	vsqrt.f32	s11, s14
 800bc56:	ee86 7aa5 	vdiv.f32	s14, s13, s11
 800bc5a:	d533      	bpl.n	800bcc4 <acc_alg_biquad_q3_12_lowpass_coeffs+0xf4>
 800bc5c:	eef4 7ae6 	vcmpe.f32	s15, s13
 800bc60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc64:	f340 80d3 	ble.w	800be0e <acc_alg_biquad_q3_12_lowpass_coeffs+0x23e>
 800bc68:	eddf 7a9e 	vldr	s15, [pc, #632]	; 800bee4 <acc_alg_biquad_q3_12_lowpass_coeffs+0x314>
 800bc6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc70:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800bc74:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bc78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bc7c:	ee17 3a90 	vmov	r3, s15
 800bc80:	005c      	lsls	r4, r3, #1
 800bc82:	e0d0      	b.n	800be26 <acc_alg_biquad_q3_12_lowpass_coeffs+0x256>
 800bc84:	f000 fd86 	bl	800c794 <acc_alg_basic_math_restricted_tan_f32>
 800bc88:	eddf 7a95 	vldr	s15, [pc, #596]	; 800bee0 <acc_alg_biquad_q3_12_lowpass_coeffs+0x310>
 800bc8c:	ee30 7a27 	vadd.f32	s14, s0, s15
 800bc90:	ee60 7a27 	vmul.f32	s15, s0, s15
 800bc94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc98:	ee27 0a00 	vmul.f32	s0, s14, s0
 800bc9c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800bca0:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 800bca4:	eec0 7a07 	vdiv.f32	s15, s0, s14
 800bca8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800bcac:	eef4 7ac6 	vcmpe.f32	s15, s12
 800bcb0:	ee37 7a26 	vadd.f32	s14, s14, s13
 800bcb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcb8:	eef1 5ac7 	vsqrt.f32	s11, s14
 800bcbc:	ee86 7aa5 	vdiv.f32	s14, s13, s11
 800bcc0:	f100 80a5 	bmi.w	800be0e <acc_alg_biquad_q3_12_lowpass_coeffs+0x23e>
 800bcc4:	eddf 6a88 	vldr	s13, [pc, #544]	; 800bee8 <acc_alg_biquad_q3_12_lowpass_coeffs+0x318>
 800bcc8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bccc:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800bcd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bcd4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bcd8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bcdc:	ee17 5a90 	vmov	r5, s15
 800bce0:	fb05 f305 	mul.w	r3, r5, r5
 800bce4:	f1c3 6380 	rsb	r3, r3, #67108864	; 0x4000000
 800bce8:	ee07 3a90 	vmov	s15, r3
 800bcec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800bcf0:	eef1 7ac7 	vsqrt.f32	s15, s14
 800bcf4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bcf8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bcfc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bd00:	ee17 4a90 	vmov	r4, s15
 800bd04:	2c00      	cmp	r4, #0
 800bd06:	f000 80a4 	beq.w	800be52 <acc_alg_biquad_q3_12_lowpass_coeffs+0x282>
 800bd0a:	f1b9 0f00 	cmp.w	r9, #0
 800bd0e:	d017      	beq.n	800bd40 <acc_alg_biquad_q3_12_lowpass_coeffs+0x170>
 800bd10:	b2a3      	uxth	r3, r4
 800bd12:	f5c3 5180 	rsb	r1, r3, #4096	; 0x1000
 800bd16:	b208      	sxth	r0, r1
 800bd18:	b2aa      	uxth	r2, r5
 800bd1a:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 800bd1e:	f8a9 0000 	strh.w	r0, [r9]
 800bd22:	f8a9 0004 	strh.w	r0, [r9, #4]
 800bd26:	f5c4 50c0 	rsb	r0, r4, #6144	; 0x1800
 800bd2a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800bd2e:	0049      	lsls	r1, r1, #1
 800bd30:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 800bd34:	f8a9 1002 	strh.w	r1, [r9, #2]
 800bd38:	f8a9 3006 	strh.w	r3, [r9, #6]
 800bd3c:	f8a9 2008 	strh.w	r2, [r9, #8]
 800bd40:	2d00      	cmp	r5, #0
 800bd42:	f000 80a1 	beq.w	800be88 <acc_alg_biquad_q3_12_lowpass_coeffs+0x2b8>
 800bd46:	2e00      	cmp	r6, #0
 800bd48:	f000 80b8 	beq.w	800bebc <acc_alg_biquad_q3_12_lowpass_coeffs+0x2ec>
 800bd4c:	f5c4 5280 	rsb	r2, r4, #4096	; 0x1000
 800bd50:	fb05 f305 	mul.w	r3, r5, r5
 800bd54:	fb04 f404 	mul.w	r4, r4, r4
 800bd58:	ebc5 0242 	rsb	r2, r5, r2, lsl #1
 800bd5c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bd60:	f104 447c 	add.w	r4, r4, #4227858432	; 0xfc000000
 800bd64:	fb02 f202 	mul.w	r2, r2, r2
 800bd68:	eba2 0244 	sub.w	r2, r2, r4, lsl #1
 800bd6c:	ee07 2a90 	vmov	s15, r2
 800bd70:	0064      	lsls	r4, r4, #1
 800bd72:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bd76:	ee07 4a90 	vmov	s15, r4
 800bd7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bd7e:	ee87 8a87 	vdiv.f32	s16, s15, s14
 800bd82:	b356      	cbz	r6, 800bdda <acc_alg_biquad_q3_12_lowpass_coeffs+0x20a>
 800bd84:	f1b8 0f00 	cmp.w	r8, #0
 800bd88:	f040 8089 	bne.w	800be9e <acc_alg_biquad_q3_12_lowpass_coeffs+0x2ce>
 800bd8c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800bd90:	ee78 6a27 	vadd.f32	s13, s16, s15
 800bd94:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800bd98:	ee76 7aa6 	vadd.f32	s15, s13, s13
 800bd9c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bda0:	ee77 7a86 	vadd.f32	s15, s15, s12
 800bda4:	eef1 6ae7 	vsqrt.f32	s13, s15
 800bda8:	f5c5 5500 	rsb	r5, r5, #8192	; 0x2000
 800bdac:	006d      	lsls	r5, r5, #1
 800bdae:	eeb1 6ac7 	vsqrt.f32	s12, s14
 800bdb2:	ee07 5a90 	vmov	s15, r5
 800bdb6:	ee36 7ac8 	vsub.f32	s14, s13, s16
 800bdba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bdbe:	eef1 6ac7 	vsqrt.f32	s13, s14
 800bdc2:	ee86 0a27 	vdiv.f32	s0, s12, s15
 800bdc6:	ee20 0a26 	vmul.f32	s0, s0, s13
 800bdca:	f000 fcf3 	bl	800c7b4 <acc_alg_basic_math_restricted_atan_f32>
 800bdce:	ed9f 7a42 	vldr	s14, [pc, #264]	; 800bed8 <acc_alg_biquad_q3_12_lowpass_coeffs+0x308>
 800bdd2:	eec0 7a07 	vdiv.f32	s15, s0, s14
 800bdd6:	edc6 7a00 	vstr	s15, [r6]
 800bdda:	2f00      	cmp	r7, #0
 800bddc:	d071      	beq.n	800bec2 <acc_alg_biquad_q3_12_lowpass_coeffs+0x2f2>
 800bdde:	eddf 7a43 	vldr	s15, [pc, #268]	; 800beec <acc_alg_biquad_q3_12_lowpass_coeffs+0x31c>
 800bde2:	eddf 6a43 	vldr	s13, [pc, #268]	; 800bef0 <acc_alg_biquad_q3_12_lowpass_coeffs+0x320>
 800bde6:	ee28 7a27 	vmul.f32	s14, s16, s15
 800bdea:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800bdee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bdf2:	2001      	movs	r0, #1
 800bdf4:	ee28 8a67 	vnmul.f32	s16, s16, s15
 800bdf8:	eec8 7a26 	vdiv.f32	s15, s16, s13
 800bdfc:	ecbd 8b02 	vpop	{d8}
 800be00:	edc7 7a00 	vstr	s15, [r7]
 800be04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be08:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 800bef4 <acc_alg_biquad_q3_12_lowpass_coeffs+0x324>
 800be0c:	e700      	b.n	800bc10 <acc_alg_biquad_q3_12_lowpass_coeffs+0x40>
 800be0e:	eddf 7a3a 	vldr	s15, [pc, #232]	; 800bef8 <acc_alg_biquad_q3_12_lowpass_coeffs+0x328>
 800be12:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be16:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800be1a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800be1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800be22:	ee17 4a90 	vmov	r4, s15
 800be26:	fb04 f304 	mul.w	r3, r4, r4
 800be2a:	009b      	lsls	r3, r3, #2
 800be2c:	f1c3 6380 	rsb	r3, r3, #67108864	; 0x4000000
 800be30:	ee07 3a90 	vmov	s15, r3
 800be34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be38:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800be3c:	eeb1 7ae7 	vsqrt.f32	s14, s15
 800be40:	ee77 7a26 	vadd.f32	s15, s14, s13
 800be44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800be48:	ee17 5a90 	vmov	r5, s15
 800be4c:	2c00      	cmp	r4, #0
 800be4e:	f47f af5c 	bne.w	800bd0a <acc_alg_biquad_q3_12_lowpass_coeffs+0x13a>
 800be52:	f1b9 0f00 	cmp.w	r9, #0
 800be56:	d00b      	beq.n	800be70 <acc_alg_biquad_q3_12_lowpass_coeffs+0x2a0>
 800be58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800be5c:	f8a9 4002 	strh.w	r4, [r9, #2]
 800be60:	f8a9 4004 	strh.w	r4, [r9, #4]
 800be64:	f8a9 4006 	strh.w	r4, [r9, #6]
 800be68:	f8a9 4008 	strh.w	r4, [r9, #8]
 800be6c:	f8a9 3000 	strh.w	r3, [r9]
 800be70:	b116      	cbz	r6, 800be78 <acc_alg_biquad_q3_12_lowpass_coeffs+0x2a8>
 800be72:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 800be76:	6033      	str	r3, [r6, #0]
 800be78:	b167      	cbz	r7, 800be94 <acc_alg_biquad_q3_12_lowpass_coeffs+0x2c4>
 800be7a:	ecbd 8b02 	vpop	{d8}
 800be7e:	2300      	movs	r3, #0
 800be80:	2000      	movs	r0, #0
 800be82:	603b      	str	r3, [r7, #0]
 800be84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be88:	2e00      	cmp	r6, #0
 800be8a:	d0f5      	beq.n	800be78 <acc_alg_biquad_q3_12_lowpass_coeffs+0x2a8>
 800be8c:	2300      	movs	r3, #0
 800be8e:	6033      	str	r3, [r6, #0]
 800be90:	2f00      	cmp	r7, #0
 800be92:	d1f2      	bne.n	800be7a <acc_alg_biquad_q3_12_lowpass_coeffs+0x2aa>
 800be94:	ecbd 8b02 	vpop	{d8}
 800be98:	4638      	mov	r0, r7
 800be9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be9e:	eddf 6a17 	vldr	s13, [pc, #92]	; 800befc <acc_alg_biquad_q3_12_lowpass_coeffs+0x32c>
 800bea2:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800bee0 <acc_alg_biquad_q3_12_lowpass_coeffs+0x310>
 800bea6:	ed9f 6a16 	vldr	s12, [pc, #88]	; 800bf00 <acc_alg_biquad_q3_12_lowpass_coeffs+0x330>
 800beaa:	ee78 6a26 	vadd.f32	s13, s16, s13
 800beae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800beb2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800beb6:	ee77 7a86 	vadd.f32	s15, s15, s12
 800beba:	e773      	b.n	800bda4 <acc_alg_biquad_q3_12_lowpass_coeffs+0x1d4>
 800bebc:	2f00      	cmp	r7, #0
 800bebe:	f47f af45 	bne.w	800bd4c <acc_alg_biquad_q3_12_lowpass_coeffs+0x17c>
 800bec2:	ecbd 8b02 	vpop	{d8}
 800bec6:	2001      	movs	r0, #1
 800bec8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800becc:	3effffde 	.word	0x3effffde
 800bed0:	48800000 	.word	0x48800000
 800bed4:	36800000 	.word	0x36800000
 800bed8:	40490fdb 	.word	0x40490fdb
 800bedc:	3f9f8d77 	.word	0x3f9f8d77
 800bee0:	3fb504f3 	.word	0x3fb504f3
 800bee4:	45000000 	.word	0x45000000
 800bee8:	46000000 	.word	0x46000000
 800beec:	4113c6ef 	.word	0x4113c6ef
 800bef0:	42a646e1 	.word	0x42a646e1
 800bef4:	3fc90fdb 	.word	0x3fc90fdb
 800bef8:	45800000 	.word	0x45800000
 800befc:	3f15f61a 	.word	0x3f15f61a
 800bf00:	3f95f61a 	.word	0x3f95f61a

0800bf04 <acc_alg_biquad_q3_12_complex_direct_form_1_filtfilt_reduced_edge_transients>:
 800bf04:	b570      	push	{r4, r5, r6, lr}
 800bf06:	2300      	movs	r3, #0
 800bf08:	b082      	sub	sp, #8
 800bf0a:	4615      	mov	r5, r2
 800bf0c:	460c      	mov	r4, r1
 800bf0e:	4606      	mov	r6, r0
 800bf10:	f7f4 f962 	bl	80001d8 <acc_alg_biquad_q3_12_complex_direct_form_1>
 800bf14:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
 800bf18:	3b01      	subs	r3, #1
 800bf1a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800bf1e:	f834 3023 	ldrh.w	r3, [r4, r3, lsl #2]
 800bf22:	8852      	ldrh	r2, [r2, #2]
 800bf24:	f8ad 2006 	strh.w	r2, [sp, #6]
 800bf28:	f8ad 3004 	strh.w	r3, [sp, #4]
 800bf2c:	9b01      	ldr	r3, [sp, #4]
 800bf2e:	4630      	mov	r0, r6
 800bf30:	462a      	mov	r2, r5
 800bf32:	4621      	mov	r1, r4
 800bf34:	b002      	add	sp, #8
 800bf36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bf3a:	f7f4 b949 	b.w	80001d0 <acc_alg_biquad_q3_12_complex_direct_form_1_reverse>
 800bf3e:	bf00      	nop

0800bf40 <acc_alg_iq_demodulation_q3_12_real>:
 800bf40:	ee20 1a01 	vmul.f32	s2, s0, s2
 800bf44:	ee60 0a20 	vmul.f32	s1, s0, s1
 800bf48:	eefd 7ac1 	vcvt.s32.f32	s15, s2
 800bf4c:	eebd 0ae0 	vcvt.s32.f32	s0, s1
 800bf50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bf54:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800bf58:	ee31 1a67 	vsub.f32	s2, s2, s15
 800bf5c:	ee30 0ac0 	vsub.f32	s0, s1, s0
 800bf60:	eddf 7a26 	vldr	s15, [pc, #152]	; 800bffc <acc_alg_iq_demodulation_q3_12_real+0xbc>
 800bf64:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800c000 <acc_alg_iq_demodulation_q3_12_real+0xc0>
 800bf68:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 800bf6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf74:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800bf78:	bfb4      	ite	lt
 800bf7a:	eeb0 6a66 	vmovlt.f32	s12, s13
 800bf7e:	eeb0 6a67 	vmovge.f32	s12, s15
 800bf82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf86:	bfb8      	it	lt
 800bf88:	eef0 7a66 	vmovlt.f32	s15, s13
 800bf8c:	ee31 1a06 	vadd.f32	s2, s2, s12
 800bf90:	ee30 0a27 	vadd.f32	s0, s0, s15
 800bf94:	ee21 1a07 	vmul.f32	s2, s2, s14
 800bf98:	ee20 0a07 	vmul.f32	s0, s0, s14
 800bf9c:	b36a      	cbz	r2, 800bffa <acc_alg_iq_demodulation_q3_12_real+0xba>
 800bf9e:	eefc 7ac1 	vcvt.u32.f32	s15, s2
 800bfa2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfa6:	ee17 9a90 	vmov	r9, s15
 800bfaa:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800bfae:	1e85      	subs	r5, r0, #2
 800bfb0:	ee17 7a90 	vmov	r7, s15
 800bfb4:	eb05 0842 	add.w	r8, r5, r2, lsl #1
 800bfb8:	1c8e      	adds	r6, r1, #2
 800bfba:	4648      	mov	r0, r9
 800bfbc:	f935 4f02 	ldrsh.w	r4, [r5, #2]!
 800bfc0:	f000 fd04 	bl	800c9cc <acc_alg_basic_math_q3_12_cos>
 800bfc4:	4603      	mov	r3, r0
 800bfc6:	fb04 f303 	mul.w	r3, r4, r3
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	bfb8      	it	lt
 800bfce:	f603 73ff 	addwlt	r3, r3, #4095	; 0xfff
 800bfd2:	131b      	asrs	r3, r3, #12
 800bfd4:	4648      	mov	r0, r9
 800bfd6:	f826 3c02 	strh.w	r3, [r6, #-2]
 800bfda:	f000 fce1 	bl	800c9a0 <acc_alg_basic_math_q3_12_sin>
 800bfde:	fb04 f000 	mul.w	r0, r4, r0
 800bfe2:	2800      	cmp	r0, #0
 800bfe4:	bfb8      	it	lt
 800bfe6:	f600 70ff 	addwlt	r0, r0, #4095	; 0xfff
 800bfea:	1300      	asrs	r0, r0, #12
 800bfec:	45a8      	cmp	r8, r5
 800bfee:	f826 0b04 	strh.w	r0, [r6], #4
 800bff2:	44b9      	add	r9, r7
 800bff4:	d1e1      	bne.n	800bfba <acc_alg_iq_demodulation_q3_12_real+0x7a>
 800bff6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bffa:	4770      	bx	lr
 800bffc:	00000000 	.word	0x00000000
 800c000:	4f800000 	.word	0x4f800000

0800c004 <acc_alg_iq_demodulation_q3_12_complex>:
 800c004:	ee20 1a01 	vmul.f32	s2, s0, s2
 800c008:	ee60 0a20 	vmul.f32	s1, s0, s1
 800c00c:	eefd 7ac1 	vcvt.s32.f32	s15, s2
 800c010:	eebd 0ae0 	vcvt.s32.f32	s0, s1
 800c014:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c018:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800c01c:	ee31 1a67 	vsub.f32	s2, s2, s15
 800c020:	ee30 0ac0 	vsub.f32	s0, s1, s0
 800c024:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800c0e0 <acc_alg_iq_demodulation_q3_12_complex+0xdc>
 800c028:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800c0e4 <acc_alg_iq_demodulation_q3_12_complex+0xe0>
 800c02c:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 800c030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c034:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c038:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800c03c:	bfb4      	ite	lt
 800c03e:	eeb0 6a66 	vmovlt.f32	s12, s13
 800c042:	eeb0 6a67 	vmovge.f32	s12, s15
 800c046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c04a:	bfb8      	it	lt
 800c04c:	eef0 7a66 	vmovlt.f32	s15, s13
 800c050:	ee31 1a06 	vadd.f32	s2, s2, s12
 800c054:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c058:	ee21 1a07 	vmul.f32	s2, s2, s14
 800c05c:	ee20 0a07 	vmul.f32	s0, s0, s14
 800c060:	b3e9      	cbz	r1, 800c0de <acc_alg_iq_demodulation_q3_12_complex+0xda>
 800c062:	eefc 7ac1 	vcvt.u32.f32	s15, s2
 800c066:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c06a:	ee17 8a90 	vmov	r8, s15
 800c06e:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800c072:	4607      	mov	r7, r0
 800c074:	ee17 5a90 	vmov	r5, s15
 800c078:	eb00 0681 	add.w	r6, r0, r1, lsl #2
 800c07c:	4640      	mov	r0, r8
 800c07e:	f9b7 9000 	ldrsh.w	r9, [r7]
 800c082:	f9b7 a002 	ldrsh.w	sl, [r7, #2]
 800c086:	f000 fca1 	bl	800c9cc <acc_alg_basic_math_q3_12_cos>
 800c08a:	4604      	mov	r4, r0
 800c08c:	4640      	mov	r0, r8
 800c08e:	f000 fc87 	bl	800c9a0 <acc_alg_basic_math_q3_12_sin>
 800c092:	fb09 f204 	mul.w	r2, r9, r4
 800c096:	fb0a f100 	mul.w	r1, sl, r0
 800c09a:	2a00      	cmp	r2, #0
 800c09c:	fb04 f30a 	mul.w	r3, r4, sl
 800c0a0:	bfb8      	it	lt
 800c0a2:	f602 72ff 	addwlt	r2, r2, #4095	; 0xfff
 800c0a6:	2900      	cmp	r1, #0
 800c0a8:	fb09 f000 	mul.w	r0, r9, r0
 800c0ac:	bfb8      	it	lt
 800c0ae:	f601 71ff 	addwlt	r1, r1, #4095	; 0xfff
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	bfb8      	it	lt
 800c0b6:	f603 73ff 	addwlt	r3, r3, #4095	; 0xfff
 800c0ba:	2800      	cmp	r0, #0
 800c0bc:	bfb8      	it	lt
 800c0be:	f600 70ff 	addwlt	r0, r0, #4095	; 0xfff
 800c0c2:	1312      	asrs	r2, r2, #12
 800c0c4:	131b      	asrs	r3, r3, #12
 800c0c6:	eba2 3221 	sub.w	r2, r2, r1, asr #12
 800c0ca:	eb03 3320 	add.w	r3, r3, r0, asr #12
 800c0ce:	803a      	strh	r2, [r7, #0]
 800c0d0:	807b      	strh	r3, [r7, #2]
 800c0d2:	3704      	adds	r7, #4
 800c0d4:	42be      	cmp	r6, r7
 800c0d6:	44a8      	add	r8, r5
 800c0d8:	d1d0      	bne.n	800c07c <acc_alg_iq_demodulation_q3_12_complex+0x78>
 800c0da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0de:	4770      	bx	lr
 800c0e0:	00000000 	.word	0x00000000
 800c0e4:	4f800000 	.word	0x4f800000

0800c0e8 <acc_alg_phase_estimation_q3_12>:
 800c0e8:	2a01      	cmp	r2, #1
 800c0ea:	b4f0      	push	{r4, r5, r6, r7}
 800c0ec:	d94c      	bls.n	800c188 <acc_alg_phase_estimation_q3_12+0xa0>
 800c0ee:	eb00 0c82 	add.w	ip, r0, r2, lsl #2
 800c0f2:	f1ac 0c04 	sub.w	ip, ip, #4
 800c0f6:	4603      	mov	r3, r0
 800c0f8:	f9b3 7000 	ldrsh.w	r7, [r3]
 800c0fc:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 800c100:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 800c104:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
 800c108:	1bed      	subs	r5, r5, r7
 800c10a:	fb01 f505 	mul.w	r5, r1, r5
 800c10e:	1ba4      	subs	r4, r4, r6
 800c110:	2d00      	cmp	r5, #0
 800c112:	fb01 f404 	mul.w	r4, r1, r4
 800c116:	bfb8      	it	lt
 800c118:	f605 75ff 	addwlt	r5, r5, #4095	; 0xfff
 800c11c:	2c00      	cmp	r4, #0
 800c11e:	bfb8      	it	lt
 800c120:	f604 74ff 	addwlt	r4, r4, #4095	; 0xfff
 800c124:	eb07 3525 	add.w	r5, r7, r5, asr #12
 800c128:	eb06 3424 	add.w	r4, r6, r4, asr #12
 800c12c:	809d      	strh	r5, [r3, #4]
 800c12e:	80dc      	strh	r4, [r3, #6]
 800c130:	3304      	adds	r3, #4
 800c132:	4563      	cmp	r3, ip
 800c134:	d1e0      	bne.n	800c0f8 <acc_alg_phase_estimation_q3_12+0x10>
 800c136:	1e53      	subs	r3, r2, #1
 800c138:	3a02      	subs	r2, #2
 800c13a:	eb00 0483 	add.w	r4, r0, r3, lsl #2
 800c13e:	f930 6023 	ldrsh.w	r6, [r0, r3, lsl #2]
 800c142:	f9b4 5002 	ldrsh.w	r5, [r4, #2]
 800c146:	1c87      	adds	r7, r0, #2
 800c148:	f930 4022 	ldrsh.w	r4, [r0, r2, lsl #2]
 800c14c:	1ba4      	subs	r4, r4, r6
 800c14e:	fb01 f404 	mul.w	r4, r1, r4
 800c152:	2c00      	cmp	r4, #0
 800c154:	bfb8      	it	lt
 800c156:	f604 74ff 	addwlt	r4, r4, #4095	; 0xfff
 800c15a:	eb06 3624 	add.w	r6, r6, r4, asr #12
 800c15e:	b236      	sxth	r6, r6
 800c160:	f820 6022 	strh.w	r6, [r0, r2, lsl #2]
 800c164:	f937 3022 	ldrsh.w	r3, [r7, r2, lsl #2]
 800c168:	1b5b      	subs	r3, r3, r5
 800c16a:	fb01 f303 	mul.w	r3, r1, r3
 800c16e:	2b00      	cmp	r3, #0
 800c170:	bfb8      	it	lt
 800c172:	f603 73ff 	addwlt	r3, r3, #4095	; 0xfff
 800c176:	eb05 3523 	add.w	r5, r5, r3, asr #12
 800c17a:	b22d      	sxth	r5, r5
 800c17c:	f827 5022 	strh.w	r5, [r7, r2, lsl #2]
 800c180:	3a01      	subs	r2, #1
 800c182:	d2e1      	bcs.n	800c148 <acc_alg_phase_estimation_q3_12+0x60>
 800c184:	bcf0      	pop	{r4, r5, r6, r7}
 800c186:	4770      	bx	lr
 800c188:	d0fc      	beq.n	800c184 <acc_alg_phase_estimation_q3_12+0x9c>
 800c18a:	f06f 0201 	mvn.w	r2, #1
 800c18e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c192:	e7d2      	b.n	800c13a <acc_alg_phase_estimation_q3_12+0x52>

0800c194 <acc_alg_power_bins>:
 800c194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c198:	2900      	cmp	r1, #0
 800c19a:	d03e      	beq.n	800c21a <acc_alg_power_bins+0x86>
 800c19c:	1e87      	subs	r7, r0, #2
 800c19e:	eb07 0c41 	add.w	ip, r7, r1, lsl #1
 800c1a2:	463e      	mov	r6, r7
 800c1a4:	004d      	lsls	r5, r1, #1
 800c1a6:	2400      	movs	r4, #0
 800c1a8:	f836 ef02 	ldrh.w	lr, [r6, #2]!
 800c1ac:	4566      	cmp	r6, ip
 800c1ae:	4474      	add	r4, lr
 800c1b0:	d1fa      	bne.n	800c1a8 <acc_alg_power_bins+0x14>
 800c1b2:	fbb4 f4f1 	udiv	r4, r4, r1
 800c1b6:	b2a6      	uxth	r6, r4
 800c1b8:	f837 4f02 	ldrh.w	r4, [r7, #2]!
 800c1bc:	42b4      	cmp	r4, r6
 800c1be:	bf8c      	ite	hi
 800c1c0:	1ba4      	subhi	r4, r4, r6
 800c1c2:	1b34      	subls	r4, r6, r4
 800c1c4:	b2a4      	uxth	r4, r4
 800c1c6:	4567      	cmp	r7, ip
 800c1c8:	803c      	strh	r4, [r7, #0]
 800c1ca:	d1f5      	bne.n	800c1b8 <acc_alg_power_bins+0x24>
 800c1cc:	b31b      	cbz	r3, 800c216 <acc_alg_power_bins+0x82>
 800c1ce:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800c1d2:	f04f 0800 	mov.w	r8, #0
 800c1d6:	e00c      	b.n	800c1f2 <acc_alg_power_bins+0x5e>
 800c1d8:	f8a2 8000 	strh.w	r8, [r2]
 800c1dc:	3b01      	subs	r3, #1
 800c1de:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800c1e2:	eba1 0106 	sub.w	r1, r1, r6
 800c1e6:	f1ae 0e02 	sub.w	lr, lr, #2
 800c1ea:	f102 0202 	add.w	r2, r2, #2
 800c1ee:	d012      	beq.n	800c216 <acc_alg_power_bins+0x82>
 800c1f0:	004d      	lsls	r5, r1, #1
 800c1f2:	441d      	add	r5, r3
 800c1f4:	4575      	cmp	r5, lr
 800c1f6:	fbb5 f6fe 	udiv	r6, r5, lr
 800c1fa:	d3ed      	bcc.n	800c1d8 <acc_alg_power_bins+0x44>
 800c1fc:	2500      	movs	r5, #0
 800c1fe:	462c      	mov	r4, r5
 800c200:	1e87      	subs	r7, r0, #2
 800c202:	f837 cf02 	ldrh.w	ip, [r7, #2]!
 800c206:	3401      	adds	r4, #1
 800c208:	42a6      	cmp	r6, r4
 800c20a:	4465      	add	r5, ip
 800c20c:	d8f9      	bhi.n	800c202 <acc_alg_power_bins+0x6e>
 800c20e:	fbb5 f5f6 	udiv	r5, r5, r6
 800c212:	8015      	strh	r5, [r2, #0]
 800c214:	e7e2      	b.n	800c1dc <acc_alg_power_bins+0x48>
 800c216:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c21a:	4802      	ldr	r0, [pc, #8]	; (800c224 <acc_alg_power_bins+0x90>)
 800c21c:	2124      	movs	r1, #36	; 0x24
 800c21e:	f7fb fd1b 	bl	8007c58 <acc_assert_fail>
 800c222:	bf00      	nop
 800c224:	0801042c 	.word	0x0801042c

0800c228 <acc_confprogram_modify_bin_sensor>:
 800c228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c22c:	b082      	sub	sp, #8
 800c22e:	e9dd 690a 	ldrd	r6, r9, [sp, #40]	; 0x28
 800c232:	2501      	movs	r5, #1
 800c234:	409d      	lsls	r5, r3
 800c236:	42b5      	cmp	r5, r6
 800c238:	461c      	mov	r4, r3
 800c23a:	4607      	mov	r7, r0
 800c23c:	468a      	mov	sl, r1
 800c23e:	4690      	mov	r8, r2
 800c240:	d809      	bhi.n	800c256 <acc_confprogram_modify_bin_sensor+0x2e>
 800c242:	4b10      	ldr	r3, [pc, #64]	; (800c284 <acc_confprogram_modify_bin_sensor+0x5c>)
 800c244:	9600      	str	r6, [sp, #0]
 800c246:	3d01      	subs	r5, #1
 800c248:	9501      	str	r5, [sp, #4]
 800c24a:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 800c24c:	4a0e      	ldr	r2, [pc, #56]	; (800c288 <acc_confprogram_modify_bin_sensor+0x60>)
 800c24e:	490f      	ldr	r1, [pc, #60]	; (800c28c <acc_confprogram_modify_bin_sensor+0x64>)
 800c250:	4653      	mov	r3, sl
 800c252:	2000      	movs	r0, #0
 800c254:	47a8      	blx	r5
 800c256:	4651      	mov	r1, sl
 800c258:	4638      	mov	r0, r7
 800c25a:	f7fb fe7f 	bl	8007f5c <acc_sensor_conf_read_instr>
 800c25e:	f1c4 0420 	rsb	r4, r4, #32
 800c262:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800c266:	40e5      	lsrs	r5, r4
 800c268:	fa05 f408 	lsl.w	r4, r5, r8
 800c26c:	ea20 0204 	bic.w	r2, r0, r4
 800c270:	fa06 f608 	lsl.w	r6, r6, r8
 800c274:	4651      	mov	r1, sl
 800c276:	4638      	mov	r0, r7
 800c278:	4332      	orrs	r2, r6
 800c27a:	464b      	mov	r3, r9
 800c27c:	b002      	add	sp, #8
 800c27e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c282:	4718      	bx	r3
 800c284:	200004c0 	.word	0x200004c0
 800c288:	0801043c 	.word	0x0801043c
 800c28c:	08010474 	.word	0x08010474

0800c290 <acc_confprogram_modify_bin>:
 800c290:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c294:	b085      	sub	sp, #20
 800c296:	f04f 0c01 	mov.w	ip, #1
 800c29a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c29c:	fa0c fc03 	lsl.w	ip, ip, r3
 800c2a0:	45b4      	cmp	ip, r6
 800c2a2:	461d      	mov	r5, r3
 800c2a4:	4680      	mov	r8, r0
 800c2a6:	460c      	mov	r4, r1
 800c2a8:	4617      	mov	r7, r2
 800c2aa:	d80b      	bhi.n	800c2c4 <acc_confprogram_modify_bin+0x34>
 800c2ac:	4b13      	ldr	r3, [pc, #76]	; (800c2fc <acc_confprogram_modify_bin+0x6c>)
 800c2ae:	9600      	str	r6, [sp, #0]
 800c2b0:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 800c2b4:	9201      	str	r2, [sp, #4]
 800c2b6:	f8d3 9034 	ldr.w	r9, [r3, #52]	; 0x34
 800c2ba:	4a11      	ldr	r2, [pc, #68]	; (800c300 <acc_confprogram_modify_bin+0x70>)
 800c2bc:	4911      	ldr	r1, [pc, #68]	; (800c304 <acc_confprogram_modify_bin+0x74>)
 800c2be:	4623      	mov	r3, r4
 800c2c0:	2000      	movs	r0, #0
 800c2c2:	47c8      	blx	r9
 800c2c4:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 800c2c8:	4620      	mov	r0, r4
 800c2ca:	a902      	add	r1, sp, #8
 800c2cc:	2201      	movs	r2, #1
 800c2ce:	f7fb ff8d 	bl	80081ec <acc_utils_transfer_buffer_to_uint32>
 800c2d2:	f1c5 0520 	rsb	r5, r5, #32
 800c2d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c2da:	9902      	ldr	r1, [sp, #8]
 800c2dc:	40eb      	lsrs	r3, r5
 800c2de:	40bb      	lsls	r3, r7
 800c2e0:	fa06 f207 	lsl.w	r2, r6, r7
 800c2e4:	ea21 0303 	bic.w	r3, r1, r3
 800c2e8:	4313      	orrs	r3, r2
 800c2ea:	4621      	mov	r1, r4
 800c2ec:	2201      	movs	r2, #1
 800c2ee:	a803      	add	r0, sp, #12
 800c2f0:	9303      	str	r3, [sp, #12]
 800c2f2:	f7fb ff6d 	bl	80081d0 <acc_utils_uint32_to_transfer_buffer>
 800c2f6:	b005      	add	sp, #20
 800c2f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c2fc:	200004c0 	.word	0x200004c0
 800c300:	08010480 	.word	0x08010480
 800c304:	08010474 	.word	0x08010474

0800c308 <acc_confprogram_modify_runif_sensor>:
 800c308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c30c:	4614      	mov	r4, r2
 800c30e:	b082      	sub	sp, #8
 800c310:	f851 5024 	ldr.w	r5, [r1, r4, lsl #2]
 800c314:	f89d 2020 	ldrb.w	r2, [sp, #32]
 800c318:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 800c31c:	f025 050f 	bic.w	r5, r5, #15
 800c320:	4606      	mov	r6, r0
 800c322:	b1b2      	cbz	r2, 800c352 <acc_confprogram_modify_runif_sensor+0x4a>
 800c324:	461f      	mov	r7, r3
 800c326:	f7f9 fa73 	bl	8005810 <acc_rss_integration_log_level>
 800c32a:	2803      	cmp	r0, #3
 800c32c:	ea45 0507 	orr.w	r5, r5, r7
 800c330:	d907      	bls.n	800c342 <acc_confprogram_modify_runif_sensor+0x3a>
 800c332:	4b0e      	ldr	r3, [pc, #56]	; (800c36c <acc_confprogram_modify_runif_sensor+0x64>)
 800c334:	9700      	str	r7, [sp, #0]
 800c336:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 800c338:	4a0d      	ldr	r2, [pc, #52]	; (800c370 <acc_confprogram_modify_runif_sensor+0x68>)
 800c33a:	490e      	ldr	r1, [pc, #56]	; (800c374 <acc_confprogram_modify_runif_sensor+0x6c>)
 800c33c:	4623      	mov	r3, r4
 800c33e:	2004      	movs	r0, #4
 800c340:	47b8      	blx	r7
 800c342:	462a      	mov	r2, r5
 800c344:	4621      	mov	r1, r4
 800c346:	4630      	mov	r0, r6
 800c348:	4643      	mov	r3, r8
 800c34a:	b002      	add	sp, #8
 800c34c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c350:	4718      	bx	r3
 800c352:	f7f9 fa5d 	bl	8005810 <acc_rss_integration_log_level>
 800c356:	2803      	cmp	r0, #3
 800c358:	d9f3      	bls.n	800c342 <acc_confprogram_modify_runif_sensor+0x3a>
 800c35a:	4b04      	ldr	r3, [pc, #16]	; (800c36c <acc_confprogram_modify_runif_sensor+0x64>)
 800c35c:	4a06      	ldr	r2, [pc, #24]	; (800c378 <acc_confprogram_modify_runif_sensor+0x70>)
 800c35e:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 800c360:	4904      	ldr	r1, [pc, #16]	; (800c374 <acc_confprogram_modify_runif_sensor+0x6c>)
 800c362:	4623      	mov	r3, r4
 800c364:	2004      	movs	r0, #4
 800c366:	47b8      	blx	r7
 800c368:	e7eb      	b.n	800c342 <acc_confprogram_modify_runif_sensor+0x3a>
 800c36a:	bf00      	nop
 800c36c:	200004c0 	.word	0x200004c0
 800c370:	080104b8 	.word	0x080104b8
 800c374:	08010474 	.word	0x08010474
 800c378:	080104f0 	.word	0x080104f0

0800c37c <acc_confprogram_modify_runif>:
 800c37c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c380:	eb00 0542 	add.w	r5, r0, r2, lsl #1
 800c384:	b084      	sub	sp, #16
 800c386:	4616      	mov	r6, r2
 800c388:	460f      	mov	r7, r1
 800c38a:	4628      	mov	r0, r5
 800c38c:	2201      	movs	r2, #1
 800c38e:	a902      	add	r1, sp, #8
 800c390:	4698      	mov	r8, r3
 800c392:	f7fb ff2b 	bl	80081ec <acc_utils_transfer_buffer_to_uint32>
 800c396:	9c02      	ldr	r4, [sp, #8]
 800c398:	f024 040f 	bic.w	r4, r4, #15
 800c39c:	9403      	str	r4, [sp, #12]
 800c39e:	f1b8 0f00 	cmp.w	r8, #0
 800c3a2:	d015      	beq.n	800c3d0 <acc_confprogram_modify_runif+0x54>
 800c3a4:	433c      	orrs	r4, r7
 800c3a6:	9403      	str	r4, [sp, #12]
 800c3a8:	f7f9 fa32 	bl	8005810 <acc_rss_integration_log_level>
 800c3ac:	2803      	cmp	r0, #3
 800c3ae:	d907      	bls.n	800c3c0 <acc_confprogram_modify_runif+0x44>
 800c3b0:	4a0e      	ldr	r2, [pc, #56]	; (800c3ec <acc_confprogram_modify_runif+0x70>)
 800c3b2:	9700      	str	r7, [sp, #0]
 800c3b4:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800c3b6:	490e      	ldr	r1, [pc, #56]	; (800c3f0 <acc_confprogram_modify_runif+0x74>)
 800c3b8:	4a0e      	ldr	r2, [pc, #56]	; (800c3f4 <acc_confprogram_modify_runif+0x78>)
 800c3ba:	0873      	lsrs	r3, r6, #1
 800c3bc:	2004      	movs	r0, #4
 800c3be:	47a0      	blx	r4
 800c3c0:	4629      	mov	r1, r5
 800c3c2:	2201      	movs	r2, #1
 800c3c4:	a803      	add	r0, sp, #12
 800c3c6:	f7fb ff03 	bl	80081d0 <acc_utils_uint32_to_transfer_buffer>
 800c3ca:	b004      	add	sp, #16
 800c3cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3d0:	f7f9 fa1e 	bl	8005810 <acc_rss_integration_log_level>
 800c3d4:	2803      	cmp	r0, #3
 800c3d6:	d9f3      	bls.n	800c3c0 <acc_confprogram_modify_runif+0x44>
 800c3d8:	4a04      	ldr	r2, [pc, #16]	; (800c3ec <acc_confprogram_modify_runif+0x70>)
 800c3da:	9700      	str	r7, [sp, #0]
 800c3dc:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800c3de:	4904      	ldr	r1, [pc, #16]	; (800c3f0 <acc_confprogram_modify_runif+0x74>)
 800c3e0:	4a05      	ldr	r2, [pc, #20]	; (800c3f8 <acc_confprogram_modify_runif+0x7c>)
 800c3e2:	0873      	lsrs	r3, r6, #1
 800c3e4:	2004      	movs	r0, #4
 800c3e6:	47a0      	blx	r4
 800c3e8:	e7ea      	b.n	800c3c0 <acc_confprogram_modify_runif+0x44>
 800c3ea:	bf00      	nop
 800c3ec:	200004c0 	.word	0x200004c0
 800c3f0:	08010474 	.word	0x08010474
 800c3f4:	080104b8 	.word	0x080104b8
 800c3f8:	08010520 	.word	0x08010520

0800c3fc <acc_confprogram_patch_offset>:
 800c3fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c400:	b083      	sub	sp, #12
 800c402:	4680      	mov	r8, r0
 800c404:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 800c408:	460d      	mov	r5, r1
 800c40a:	4617      	mov	r7, r2
 800c40c:	461e      	mov	r6, r3
 800c40e:	f7f9 f9ff 	bl	8005810 <acc_rss_integration_log_level>
 800c412:	2803      	cmp	r0, #3
 800c414:	d909      	bls.n	800c42a <acc_confprogram_patch_offset+0x2e>
 800c416:	4b2f      	ldr	r3, [pc, #188]	; (800c4d4 <acc_confprogram_patch_offset+0xd8>)
 800c418:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c41a:	9200      	str	r2, [sp, #0]
 800c41c:	f8d3 9034 	ldr.w	r9, [r3, #52]	; 0x34
 800c420:	4a2d      	ldr	r2, [pc, #180]	; (800c4d8 <acc_confprogram_patch_offset+0xdc>)
 800c422:	492e      	ldr	r1, [pc, #184]	; (800c4dc <acc_confprogram_patch_offset+0xe0>)
 800c424:	4623      	mov	r3, r4
 800c426:	2004      	movs	r0, #4
 800c428:	47c8      	blx	r9
 800c42a:	eb06 06c4 	add.w	r6, r6, r4, lsl #3
 800c42e:	8871      	ldrh	r1, [r6, #2]
 800c430:	b399      	cbz	r1, 800c49a <acc_confprogram_patch_offset+0x9e>
 800c432:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 800c4d4 <acc_confprogram_patch_offset+0xd8>
 800c436:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 800c4e0 <acc_confprogram_patch_offset+0xe4>
 800c43a:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 800c4dc <acc_confprogram_patch_offset+0xe0>
 800c43e:	2400      	movs	r4, #0
 800c440:	e00b      	b.n	800c45a <acc_confprogram_patch_offset+0x5e>
 800c442:	2b00      	cmp	r3, #0
 800c444:	d039      	beq.n	800c4ba <acc_confprogram_patch_offset+0xbe>
 800c446:	4649      	mov	r1, r9
 800c448:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 800c44c:	4652      	mov	r2, sl
 800c44e:	2000      	movs	r0, #0
 800c450:	4798      	blx	r3
 800c452:	8871      	ldrh	r1, [r6, #2]
 800c454:	3401      	adds	r4, #1
 800c456:	42a1      	cmp	r1, r4
 800c458:	d91f      	bls.n	800c49a <acc_confprogram_patch_offset+0x9e>
 800c45a:	6873      	ldr	r3, [r6, #4]
 800c45c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800c460:	0042      	lsls	r2, r0, #1
 800c462:	b292      	uxth	r2, r2
 800c464:	42aa      	cmp	r2, r5
 800c466:	eb05 0c07 	add.w	ip, r5, r7
 800c46a:	f3c0 7301 	ubfx	r3, r0, #28, #2
 800c46e:	d3f1      	bcc.n	800c454 <acc_confprogram_patch_offset+0x58>
 800c470:	4562      	cmp	r2, ip
 800c472:	daef      	bge.n	800c454 <acc_confprogram_patch_offset+0x58>
 800c474:	2b01      	cmp	r3, #1
 800c476:	d013      	beq.n	800c4a0 <acc_confprogram_patch_offset+0xa4>
 800c478:	2b02      	cmp	r3, #2
 800c47a:	d1e2      	bne.n	800c442 <acc_confprogram_patch_offset+0x46>
 800c47c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c47e:	1b52      	subs	r2, r2, r5
 800c480:	fab3 f383 	clz	r3, r3
 800c484:	f3c0 4103 	ubfx	r1, r0, #16, #4
 800c488:	b292      	uxth	r2, r2
 800c48a:	095b      	lsrs	r3, r3, #5
 800c48c:	4640      	mov	r0, r8
 800c48e:	f7ff ff75 	bl	800c37c <acc_confprogram_modify_runif>
 800c492:	8871      	ldrh	r1, [r6, #2]
 800c494:	3401      	adds	r4, #1
 800c496:	42a1      	cmp	r1, r4
 800c498:	d8df      	bhi.n	800c45a <acc_confprogram_patch_offset+0x5e>
 800c49a:	b003      	add	sp, #12
 800c49c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c4a2:	1b52      	subs	r2, r2, r5
 800c4a4:	3b00      	subs	r3, #0
 800c4a6:	f3c0 4103 	ubfx	r1, r0, #16, #4
 800c4aa:	b292      	uxth	r2, r2
 800c4ac:	bf18      	it	ne
 800c4ae:	2301      	movne	r3, #1
 800c4b0:	4640      	mov	r0, r8
 800c4b2:	f7ff ff63 	bl	800c37c <acc_confprogram_modify_runif>
 800c4b6:	8871      	ldrh	r1, [r6, #2]
 800c4b8:	e7cc      	b.n	800c454 <acc_confprogram_patch_offset+0x58>
 800c4ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c4bc:	9300      	str	r3, [sp, #0]
 800c4be:	1b52      	subs	r2, r2, r5
 800c4c0:	b291      	uxth	r1, r2
 800c4c2:	f3c0 5344 	ubfx	r3, r0, #21, #5
 800c4c6:	f3c0 4204 	ubfx	r2, r0, #16, #5
 800c4ca:	4640      	mov	r0, r8
 800c4cc:	f7ff fee0 	bl	800c290 <acc_confprogram_modify_bin>
 800c4d0:	8871      	ldrh	r1, [r6, #2]
 800c4d2:	e7bf      	b.n	800c454 <acc_confprogram_patch_offset+0x58>
 800c4d4:	200004c0 	.word	0x200004c0
 800c4d8:	0801057c 	.word	0x0801057c
 800c4dc:	08010474 	.word	0x08010474
 800c4e0:	08010554 	.word	0x08010554

0800c4e4 <acc_confprogram_live_patch>:
 800c4e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4e8:	b083      	sub	sp, #12
 800c4ea:	4606      	mov	r6, r0
 800c4ec:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 800c4f0:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 800c4f4:	468b      	mov	fp, r1
 800c4f6:	4617      	mov	r7, r2
 800c4f8:	461d      	mov	r5, r3
 800c4fa:	f7f9 f989 	bl	8005810 <acc_rss_integration_log_level>
 800c4fe:	2803      	cmp	r0, #3
 800c500:	d909      	bls.n	800c516 <acc_confprogram_live_patch+0x32>
 800c502:	4b2f      	ldr	r3, [pc, #188]	; (800c5c0 <acc_confprogram_live_patch+0xdc>)
 800c504:	f8cd a000 	str.w	sl, [sp]
 800c508:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 800c50c:	4a2d      	ldr	r2, [pc, #180]	; (800c5c4 <acc_confprogram_live_patch+0xe0>)
 800c50e:	492e      	ldr	r1, [pc, #184]	; (800c5c8 <acc_confprogram_live_patch+0xe4>)
 800c510:	4623      	mov	r3, r4
 800c512:	2004      	movs	r0, #4
 800c514:	47c0      	blx	r8
 800c516:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800c51a:	886b      	ldrh	r3, [r5, #2]
 800c51c:	b373      	cbz	r3, 800c57c <acc_confprogram_live_patch+0x98>
 800c51e:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 800c5cc <acc_confprogram_live_patch+0xe8>
 800c522:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 800c5c8 <acc_confprogram_live_patch+0xe4>
 800c526:	2400      	movs	r4, #0
 800c528:	e008      	b.n	800c53c <acc_confprogram_live_patch+0x58>
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d03a      	beq.n	800c5a4 <acc_confprogram_live_patch+0xc0>
 800c52e:	4b24      	ldr	r3, [pc, #144]	; (800c5c0 <acc_confprogram_live_patch+0xdc>)
 800c530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c532:	4798      	blx	r3
 800c534:	886b      	ldrh	r3, [r5, #2]
 800c536:	3401      	adds	r4, #1
 800c538:	42a3      	cmp	r3, r4
 800c53a:	d91f      	bls.n	800c57c <acc_confprogram_live_patch+0x98>
 800c53c:	686b      	ldr	r3, [r5, #4]
 800c53e:	f853 c024 	ldr.w	ip, [r3, r4, lsl #2]
 800c542:	f3cc 7301 	ubfx	r3, ip, #28, #2
 800c546:	2b01      	cmp	r3, #1
 800c548:	d01b      	beq.n	800c582 <acc_confprogram_live_patch+0x9e>
 800c54a:	2b02      	cmp	r3, #2
 800c54c:	464a      	mov	r2, r9
 800c54e:	4641      	mov	r1, r8
 800c550:	f04f 0000 	mov.w	r0, #0
 800c554:	d1e9      	bne.n	800c52a <acc_confprogram_live_patch+0x46>
 800c556:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c558:	faba f38a 	clz	r3, sl
 800c55c:	095b      	lsrs	r3, r3, #5
 800c55e:	eb07 020c 	add.w	r2, r7, ip
 800c562:	e9cd 3100 	strd	r3, r1, [sp]
 800c566:	b292      	uxth	r2, r2
 800c568:	f3cc 4303 	ubfx	r3, ip, #16, #4
 800c56c:	4659      	mov	r1, fp
 800c56e:	4630      	mov	r0, r6
 800c570:	f7ff feca 	bl	800c308 <acc_confprogram_modify_runif_sensor>
 800c574:	886b      	ldrh	r3, [r5, #2]
 800c576:	3401      	adds	r4, #1
 800c578:	42a3      	cmp	r3, r4
 800c57a:	d8df      	bhi.n	800c53c <acc_confprogram_live_patch+0x58>
 800c57c:	b003      	add	sp, #12
 800c57e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c582:	f1ba 0100 	subs.w	r1, sl, #0
 800c586:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c588:	9301      	str	r3, [sp, #4]
 800c58a:	bf18      	it	ne
 800c58c:	2101      	movne	r1, #1
 800c58e:	eb07 020c 	add.w	r2, r7, ip
 800c592:	9100      	str	r1, [sp, #0]
 800c594:	b292      	uxth	r2, r2
 800c596:	f3cc 4303 	ubfx	r3, ip, #16, #4
 800c59a:	4659      	mov	r1, fp
 800c59c:	4630      	mov	r0, r6
 800c59e:	f7ff feb3 	bl	800c308 <acc_confprogram_modify_runif_sensor>
 800c5a2:	e7c7      	b.n	800c534 <acc_confprogram_live_patch+0x50>
 800c5a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c5a6:	eb07 010c 	add.w	r1, r7, ip
 800c5aa:	e9cd a300 	strd	sl, r3, [sp]
 800c5ae:	b289      	uxth	r1, r1
 800c5b0:	f3cc 5344 	ubfx	r3, ip, #21, #5
 800c5b4:	f3cc 4204 	ubfx	r2, ip, #16, #5
 800c5b8:	4630      	mov	r0, r6
 800c5ba:	f7ff fe35 	bl	800c228 <acc_confprogram_modify_bin_sensor>
 800c5be:	e7b9      	b.n	800c534 <acc_confprogram_live_patch+0x50>
 800c5c0:	200004c0 	.word	0x200004c0
 800c5c4:	08010578 	.word	0x08010578
 800c5c8:	08010474 	.word	0x08010474
 800c5cc:	0801059c 	.word	0x0801059c

0800c5d0 <acc_confprogram_get_default_value>:
 800c5d0:	f830 0031 	ldrh.w	r0, [r0, r1, lsl #3]
 800c5d4:	4770      	bx	lr
 800c5d6:	bf00      	nop

0800c5d8 <acc_confprogram_copy>:
 800c5d8:	b152      	cbz	r2, 800c5f0 <acc_confprogram_copy+0x18>
 800c5da:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800c5de:	3804      	subs	r0, #4
 800c5e0:	f850 3f04 	ldr.w	r3, [r0, #4]!
 800c5e4:	804b      	strh	r3, [r1, #2]
 800c5e6:	0c1b      	lsrs	r3, r3, #16
 800c5e8:	800b      	strh	r3, [r1, #0]
 800c5ea:	3104      	adds	r1, #4
 800c5ec:	4291      	cmp	r1, r2
 800c5ee:	d1f7      	bne.n	800c5e0 <acc_confprogram_copy+0x8>
 800c5f0:	4770      	bx	lr
 800c5f2:	bf00      	nop

0800c5f4 <acc_diagnostic_log_set_scope>:
 800c5f4:	4b02      	ldr	r3, [pc, #8]	; (800c600 <acc_diagnostic_log_set_scope+0xc>)
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	b10b      	cbz	r3, 800c5fe <acc_diagnostic_log_set_scope+0xa>
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	4718      	bx	r3
 800c5fe:	4770      	bx	lr
 800c600:	20000370 	.word	0x20000370

0800c604 <acc_diagnostic_log_declare_parameter>:
 800c604:	4b02      	ldr	r3, [pc, #8]	; (800c610 <acc_diagnostic_log_declare_parameter+0xc>)
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	b10b      	cbz	r3, 800c60e <acc_diagnostic_log_declare_parameter+0xa>
 800c60a:	685b      	ldr	r3, [r3, #4]
 800c60c:	4718      	bx	r3
 800c60e:	4770      	bx	lr
 800c610:	20000370 	.word	0x20000370

0800c614 <acc_diagnostic_log_set_parameter>:
 800c614:	4b02      	ldr	r3, [pc, #8]	; (800c620 <acc_diagnostic_log_set_parameter+0xc>)
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	b10b      	cbz	r3, 800c61e <acc_diagnostic_log_set_parameter+0xa>
 800c61a:	689b      	ldr	r3, [r3, #8]
 800c61c:	4718      	bx	r3
 800c61e:	4770      	bx	lr
 800c620:	20000370 	.word	0x20000370

0800c624 <acc_diagnostic_log_array>:
 800c624:	4b02      	ldr	r3, [pc, #8]	; (800c630 <acc_diagnostic_log_array+0xc>)
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	b10b      	cbz	r3, 800c62e <acc_diagnostic_log_array+0xa>
 800c62a:	68db      	ldr	r3, [r3, #12]
 800c62c:	4718      	bx	r3
 800c62e:	4770      	bx	lr
 800c630:	20000370 	.word	0x20000370

0800c634 <acc_diagnostic_log_scalar>:
 800c634:	4b02      	ldr	r3, [pc, #8]	; (800c640 <acc_diagnostic_log_scalar+0xc>)
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	b10b      	cbz	r3, 800c63e <acc_diagnostic_log_scalar+0xa>
 800c63a:	695b      	ldr	r3, [r3, #20]
 800c63c:	4718      	bx	r3
 800c63e:	4770      	bx	lr
 800c640:	20000370 	.word	0x20000370

0800c644 <acc_diagnostic_log_data_u16>:
 800c644:	4b02      	ldr	r3, [pc, #8]	; (800c650 <acc_diagnostic_log_data_u16+0xc>)
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	b10b      	cbz	r3, 800c64e <acc_diagnostic_log_data_u16+0xa>
 800c64a:	6a1b      	ldr	r3, [r3, #32]
 800c64c:	4718      	bx	r3
 800c64e:	4770      	bx	lr
 800c650:	20000370 	.word	0x20000370

0800c654 <acc_diagnostic_log_data_i16>:
 800c654:	4b02      	ldr	r3, [pc, #8]	; (800c660 <acc_diagnostic_log_data_i16+0xc>)
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	b10b      	cbz	r3, 800c65e <acc_diagnostic_log_data_i16+0xa>
 800c65a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c65c:	4718      	bx	r3
 800c65e:	4770      	bx	lr
 800c660:	20000370 	.word	0x20000370

0800c664 <acc_diagnostic_log_data_u8>:
 800c664:	4b02      	ldr	r3, [pc, #8]	; (800c670 <acc_diagnostic_log_data_u8+0xc>)
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	b10b      	cbz	r3, 800c66e <acc_diagnostic_log_data_u8+0xa>
 800c66a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c66c:	4718      	bx	r3
 800c66e:	4770      	bx	lr
 800c670:	20000370 	.word	0x20000370

0800c674 <acc_image_a111_r2c_cbank_and_vana_calibration_get>:
 800c674:	4800      	ldr	r0, [pc, #0]	; (800c678 <acc_image_a111_r2c_cbank_and_vana_calibration_get+0x4>)
 800c676:	4770      	bx	lr
 800c678:	0801067c 	.word	0x0801067c

0800c67c <acc_image_a111_r2c_cbank_and_vana_calibration_param_table_get>:
 800c67c:	4800      	ldr	r0, [pc, #0]	; (800c680 <acc_image_a111_r2c_cbank_and_vana_calibration_param_table_get+0x4>)
 800c67e:	4770      	bx	lr
 800c680:	08010cd4 	.word	0x08010cd4

0800c684 <acc_image_a111_r2c_rx_fine_dip_calibration_get>:
 800c684:	4800      	ldr	r0, [pc, #0]	; (800c688 <acc_image_a111_r2c_rx_fine_dip_calibration_get+0x4>)
 800c686:	4770      	bx	lr
 800c688:	08011064 	.word	0x08011064

0800c68c <acc_image_a111_r2c_rx_fine_dip_calibration_param_table_get>:
 800c68c:	4800      	ldr	r0, [pc, #0]	; (800c690 <acc_image_a111_r2c_rx_fine_dip_calibration_param_table_get+0x4>)
 800c68e:	4770      	bx	lr
 800c690:	08011dc0 	.word	0x08011dc0

0800c694 <acc_image_a111_r2c_sweep_get>:
 800c694:	4800      	ldr	r0, [pc, #0]	; (800c698 <acc_image_a111_r2c_sweep_get+0x4>)
 800c696:	4770      	bx	lr
 800c698:	08012344 	.word	0x08012344

0800c69c <acc_image_a111_r2c_sweep_param_table_get>:
 800c69c:	4800      	ldr	r0, [pc, #0]	; (800c6a0 <acc_image_a111_r2c_sweep_param_table_get+0x4>)
 800c69e:	4770      	bx	lr
 800c6a0:	08013168 	.word	0x08013168

0800c6a4 <quarter_pi_cos_sin_f32>:
 800c6a4:	eddf 7a26 	vldr	s15, [pc, #152]	; 800c740 <quarter_pi_cos_sin_f32+0x9c>
 800c6a8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800c6ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6b0:	d442      	bmi.n	800c738 <quarter_pi_cos_sin_f32+0x94>
 800c6b2:	b310      	cbz	r0, 800c6fa <quarter_pi_cos_sin_f32+0x56>
 800c6b4:	ee20 0a00 	vmul.f32	s0, s0, s0
 800c6b8:	eddf 7a22 	vldr	s15, [pc, #136]	; 800c744 <quarter_pi_cos_sin_f32+0xa0>
 800c6bc:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800c748 <quarter_pi_cos_sin_f32+0xa4>
 800c6c0:	eddf 5a22 	vldr	s11, [pc, #136]	; 800c74c <quarter_pi_cos_sin_f32+0xa8>
 800c6c4:	ed9f 6a22 	vldr	s12, [pc, #136]	; 800c750 <quarter_pi_cos_sin_f32+0xac>
 800c6c8:	ee60 7a27 	vmul.f32	s15, s0, s15
 800c6cc:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800c6d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c6d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c6d8:	ee60 7a27 	vmul.f32	s15, s0, s15
 800c6dc:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800c6e0:	ee60 7a27 	vmul.f32	s15, s0, s15
 800c6e4:	ee77 7a86 	vadd.f32	s15, s15, s12
 800c6e8:	ee60 7a27 	vmul.f32	s15, s0, s15
 800c6ec:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c6f0:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c6f4:	ee30 0a07 	vadd.f32	s0, s0, s14
 800c6f8:	4770      	bx	lr
 800c6fa:	ee60 7a00 	vmul.f32	s15, s0, s0
 800c6fe:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800c744 <quarter_pi_cos_sin_f32+0xa0>
 800c702:	ed9f 5a14 	vldr	s10, [pc, #80]	; 800c754 <quarter_pi_cos_sin_f32+0xb0>
 800c706:	eddf 5a14 	vldr	s11, [pc, #80]	; 800c758 <quarter_pi_cos_sin_f32+0xb4>
 800c70a:	ed9f 6a14 	vldr	s12, [pc, #80]	; 800c75c <quarter_pi_cos_sin_f32+0xb8>
 800c70e:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c712:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c716:	ee37 7a45 	vsub.f32	s14, s14, s10
 800c71a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c71e:	ee37 7a25 	vadd.f32	s14, s14, s11
 800c722:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c726:	ee37 7a46 	vsub.f32	s14, s14, s12
 800c72a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c72e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c732:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c736:	4770      	bx	lr
 800c738:	ed9f 0a09 	vldr	s0, [pc, #36]	; 800c760 <quarter_pi_cos_sin_f32+0xbc>
 800c73c:	4770      	bx	lr
 800c73e:	bf00      	nop
 800c740:	bf490fdb 	.word	0xbf490fdb
 800c744:	00000000 	.word	0x00000000
 800c748:	37cd1800 	.word	0x37cd1800
 800c74c:	3ab606a0 	.word	0x3ab606a0
 800c750:	3d2aaaa6 	.word	0x3d2aaaa6
 800c754:	394c909b 	.word	0x394c909b
 800c758:	3c088366 	.word	0x3c088366
 800c75c:	3e2aaaa2 	.word	0x3e2aaaa2
 800c760:	7fc00000 	.word	0x7fc00000

0800c764 <restricted_cos_sin_f32>:
 800c764:	eddf 7a09 	vldr	s15, [pc, #36]	; 800c78c <restricted_cos_sin_f32+0x28>
 800c768:	eddf 6a09 	vldr	s13, [pc, #36]	; 800c790 <restricted_cos_sin_f32+0x2c>
 800c76c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800c770:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c774:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800c778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c77c:	bf5c      	itt	pl
 800c77e:	f080 0001 	eorpl.w	r0, r0, #1
 800c782:	eeb0 0a67 	vmovpl.f32	s0, s15
 800c786:	f7ff bf8d 	b.w	800c6a4 <quarter_pi_cos_sin_f32>
 800c78a:	bf00      	nop
 800c78c:	3fc90fdb 	.word	0x3fc90fdb
 800c790:	333bbd2e 	.word	0x333bbd2e

0800c794 <acc_alg_basic_math_restricted_tan_f32>:
 800c794:	b508      	push	{r3, lr}
 800c796:	2000      	movs	r0, #0
 800c798:	eeb0 4a40 	vmov.f32	s8, s0
 800c79c:	f7ff ffe2 	bl	800c764 <restricted_cos_sin_f32>
 800c7a0:	2001      	movs	r0, #1
 800c7a2:	eef0 4a40 	vmov.f32	s9, s0
 800c7a6:	eeb0 0a44 	vmov.f32	s0, s8
 800c7aa:	f7ff ffdb 	bl	800c764 <restricted_cos_sin_f32>
 800c7ae:	ee84 0a80 	vdiv.f32	s0, s9, s0
 800c7b2:	bd08      	pop	{r3, pc}

0800c7b4 <acc_alg_basic_math_restricted_atan_f32>:
 800c7b4:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800c7b8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800c7bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7c0:	d434      	bmi.n	800c82c <acc_alg_basic_math_restricted_atan_f32+0x78>
 800c7c2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c7c6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800c7ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7ce:	dd1b      	ble.n	800c808 <acc_alg_basic_math_restricted_atan_f32+0x54>
 800c7d0:	ee87 6a80 	vdiv.f32	s12, s15, s0
 800c7d4:	4b17      	ldr	r3, [pc, #92]	; (800c834 <acc_alg_basic_math_restricted_atan_f32+0x80>)
 800c7d6:	f1a3 0224 	sub.w	r2, r3, #36	; 0x24
 800c7da:	eddf 7a17 	vldr	s15, [pc, #92]	; 800c838 <acc_alg_basic_math_restricted_atan_f32+0x84>
 800c7de:	ee66 6a06 	vmul.f32	s13, s12, s12
 800c7e2:	ed33 7a01 	vldmdb	r3!, {s14}
 800c7e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c7ea:	429a      	cmp	r2, r3
 800c7ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c7f0:	d1f7      	bne.n	800c7e2 <acc_alg_basic_math_restricted_atan_f32+0x2e>
 800c7f2:	ee66 7a27 	vmul.f32	s15, s12, s15
 800c7f6:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800c83c <acc_alg_basic_math_restricted_atan_f32+0x88>
 800c7fa:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800c840 <acc_alg_basic_math_restricted_atan_f32+0x8c>
 800c7fe:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c802:	ee30 0a47 	vsub.f32	s0, s0, s14
 800c806:	4770      	bx	lr
 800c808:	4b0a      	ldr	r3, [pc, #40]	; (800c834 <acc_alg_basic_math_restricted_atan_f32+0x80>)
 800c80a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800c838 <acc_alg_basic_math_restricted_atan_f32+0x84>
 800c80e:	ee60 6a00 	vmul.f32	s13, s0, s0
 800c812:	f1a3 0224 	sub.w	r2, r3, #36	; 0x24
 800c816:	ed33 7a01 	vldmdb	r3!, {s14}
 800c81a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c81e:	429a      	cmp	r2, r3
 800c820:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c824:	d1f7      	bne.n	800c816 <acc_alg_basic_math_restricted_atan_f32+0x62>
 800c826:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c82a:	4770      	bx	lr
 800c82c:	ed9f 0a05 	vldr	s0, [pc, #20]	; 800c844 <acc_alg_basic_math_restricted_atan_f32+0x90>
 800c830:	4770      	bx	lr
 800c832:	bf00      	nop
 800c834:	0801368c 	.word	0x0801368c
 800c838:	00000000 	.word	0x00000000
 800c83c:	3fc90fdb 	.word	0x3fc90fdb
 800c840:	333bbd2e 	.word	0x333bbd2e
 800c844:	7fc00000 	.word	0x7fc00000

0800c848 <acc_alg_basic_math_q3_12_complex_mul>:
 800c848:	b302      	cbz	r2, 800c88c <acc_alg_basic_math_q3_12_complex_mul+0x44>
 800c84a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c84c:	2300      	movs	r3, #0
 800c84e:	1c87      	adds	r7, r0, #2
 800c850:	f101 0c02 	add.w	ip, r1, #2
 800c854:	f930 e023 	ldrsh.w	lr, [r0, r3, lsl #2]
 800c858:	f831 4023 	ldrh.w	r4, [r1, r3, lsl #2]
 800c85c:	f937 5023 	ldrsh.w	r5, [r7, r3, lsl #2]
 800c860:	f93c 6023 	ldrsh.w	r6, [ip, r3, lsl #2]
 800c864:	fb14 f40e 	smulbb	r4, r4, lr
 800c868:	fb05 4416 	mls	r4, r5, r6, r4
 800c86c:	1324      	asrs	r4, r4, #12
 800c86e:	f820 4023 	strh.w	r4, [r0, r3, lsl #2]
 800c872:	f831 4023 	ldrh.w	r4, [r1, r3, lsl #2]
 800c876:	fb06 f60e 	mul.w	r6, r6, lr
 800c87a:	fb15 6504 	smlabb	r5, r5, r4, r6
 800c87e:	132d      	asrs	r5, r5, #12
 800c880:	f827 5023 	strh.w	r5, [r7, r3, lsl #2]
 800c884:	3301      	adds	r3, #1
 800c886:	429a      	cmp	r2, r3
 800c888:	d1e4      	bne.n	800c854 <acc_alg_basic_math_q3_12_complex_mul+0xc>
 800c88a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c88c:	4770      	bx	lr
 800c88e:	bf00      	nop

0800c890 <acc_alg_basic_math_q3_12_complex_scalar_abs>:
 800c890:	b203      	sxth	r3, r0
 800c892:	1400      	asrs	r0, r0, #16
 800c894:	2b00      	cmp	r3, #0
 800c896:	ea80 72e0 	eor.w	r2, r0, r0, asr #31
 800c89a:	bfb8      	it	lt
 800c89c:	425b      	neglt	r3, r3
 800c89e:	eba2 72e0 	sub.w	r2, r2, r0, asr #31
 800c8a2:	b218      	sxth	r0, r3
 800c8a4:	b213      	sxth	r3, r2
 800c8a6:	4298      	cmp	r0, r3
 800c8a8:	b082      	sub	sp, #8
 800c8aa:	da02      	bge.n	800c8b2 <acc_alg_basic_math_q3_12_complex_scalar_abs+0x22>
 800c8ac:	4602      	mov	r2, r0
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	4613      	mov	r3, r2
 800c8b2:	f240 62a1 	movw	r2, #1697	; 0x6a1
 800c8b6:	fb10 f202 	smulbb	r2, r0, r2
 800c8ba:	2a00      	cmp	r2, #0
 800c8bc:	bfb8      	it	lt
 800c8be:	f602 72ff 	addwlt	r2, r2, #4095	; 0xfff
 800c8c2:	ebb3 3f22 	cmp.w	r3, r2, asr #12
 800c8c6:	da0b      	bge.n	800c8e0 <acc_alg_basic_math_q3_12_complex_scalar_abs+0x50>
 800c8c8:	f240 3227 	movw	r2, #807	; 0x327
 800c8cc:	fb13 f302 	smulbb	r3, r3, r2
 800c8d0:	f640 72d7 	movw	r2, #4055	; 0xfd7
 800c8d4:	fb10 3002 	smlabb	r0, r0, r2, r3
 800c8d8:	f340 300f 	sbfx	r0, r0, #12, #16
 800c8dc:	b002      	add	sp, #8
 800c8de:	4770      	bx	lr
 800c8e0:	f640 02fa 	movw	r2, #2298	; 0x8fa
 800c8e4:	fb13 f302 	smulbb	r3, r3, r2
 800c8e8:	f640 5271 	movw	r2, #3441	; 0xd71
 800c8ec:	fb10 3002 	smlabb	r0, r0, r2, r3
 800c8f0:	f340 300f 	sbfx	r0, r0, #12, #16
 800c8f4:	b002      	add	sp, #8
 800c8f6:	4770      	bx	lr

0800c8f8 <acc_alg_basic_math_q3_12_complex_conj_normalize>:
 800c8f8:	2900      	cmp	r1, #0
 800c8fa:	d04f      	beq.n	800c99c <acc_alg_basic_math_q3_12_complex_conj_normalize+0xa4>
 800c8fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c900:	f240 6ca1 	movw	ip, #1697	; 0x6a1
 800c904:	2400      	movs	r4, #0
 800c906:	1c87      	adds	r7, r0, #2
 800c908:	f640 0afa 	movw	sl, #2298	; 0x8fa
 800c90c:	f640 5971 	movw	r9, #3441	; 0xd71
 800c910:	f240 3827 	movw	r8, #807	; 0x327
 800c914:	f640 7ed7 	movw	lr, #4055	; 0xfd7
 800c918:	e006      	b.n	800c928 <acc_alg_basic_math_q3_12_complex_conj_normalize+0x30>
 800c91a:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
 800c91e:	f827 3024 	strh.w	r3, [r7, r4, lsl #2]
 800c922:	3401      	adds	r4, #1
 800c924:	42a1      	cmp	r1, r4
 800c926:	d037      	beq.n	800c998 <acc_alg_basic_math_q3_12_complex_conj_normalize+0xa0>
 800c928:	f930 6024 	ldrsh.w	r6, [r0, r4, lsl #2]
 800c92c:	f937 5024 	ldrsh.w	r5, [r7, r4, lsl #2]
 800c930:	ea86 73e6 	eor.w	r3, r6, r6, asr #31
 800c934:	ea85 72e5 	eor.w	r2, r5, r5, asr #31
 800c938:	eba3 73e6 	sub.w	r3, r3, r6, asr #31
 800c93c:	eba2 72e5 	sub.w	r2, r2, r5, asr #31
 800c940:	b21b      	sxth	r3, r3
 800c942:	b212      	sxth	r2, r2
 800c944:	4293      	cmp	r3, r2
 800c946:	da02      	bge.n	800c94e <acc_alg_basic_math_q3_12_complex_conj_normalize+0x56>
 800c948:	469b      	mov	fp, r3
 800c94a:	4613      	mov	r3, r2
 800c94c:	465a      	mov	r2, fp
 800c94e:	fb13 fb0c 	smulbb	fp, r3, ip
 800c952:	f1bb 0f00 	cmp.w	fp, #0
 800c956:	bfb8      	it	lt
 800c958:	f60b 7bff 	addwlt	fp, fp, #4095	; 0xfff
 800c95c:	ebb2 3f2b 	cmp.w	r2, fp, asr #12
 800c960:	bfb5      	itete	lt
 800c962:	fb12 f208 	smulbblt	r2, r2, r8
 800c966:	fb12 f20a 	smulbbge	r2, r2, sl
 800c96a:	fb13 230e 	smlabblt	r3, r3, lr, r2
 800c96e:	fb13 2309 	smlabbge	r3, r3, r9, r2
 800c972:	f343 330f 	sbfx	r3, r3, #12, #16
 800c976:	2b00      	cmp	r3, #0
 800c978:	d0cf      	beq.n	800c91a <acc_alg_basic_math_q3_12_complex_conj_normalize+0x22>
 800c97a:	ebc5 5505 	rsb	r5, r5, r5, lsl #20
 800c97e:	032d      	lsls	r5, r5, #12
 800c980:	0336      	lsls	r6, r6, #12
 800c982:	fb95 f5f3 	sdiv	r5, r5, r3
 800c986:	fb96 f3f3 	sdiv	r3, r6, r3
 800c98a:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
 800c98e:	f827 5024 	strh.w	r5, [r7, r4, lsl #2]
 800c992:	3401      	adds	r4, #1
 800c994:	42a1      	cmp	r1, r4
 800c996:	d1c7      	bne.n	800c928 <acc_alg_basic_math_q3_12_complex_conj_normalize+0x30>
 800c998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c99c:	4770      	bx	lr
 800c99e:	bf00      	nop

0800c9a0 <acc_alg_basic_math_q3_12_sin>:
 800c9a0:	0043      	lsls	r3, r0, #1
 800c9a2:	bf4c      	ite	mi
 800c9a4:	43c3      	mvnmi	r3, r0
 800c9a6:	4603      	movpl	r3, r0
 800c9a8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800c9ac:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c9b0:	4a05      	ldr	r2, [pc, #20]	; (800c9c8 <acc_alg_basic_math_q3_12_sin+0x28>)
 800c9b2:	0d9b      	lsrs	r3, r3, #22
 800c9b4:	2800      	cmp	r0, #0
 800c9b6:	bfbd      	ittte	lt
 800c9b8:	f832 0013 	ldrhlt.w	r0, [r2, r3, lsl #1]
 800c9bc:	4240      	neglt	r0, r0
 800c9be:	b200      	sxthlt	r0, r0
 800c9c0:	f932 0013 	ldrshge.w	r0, [r2, r3, lsl #1]
 800c9c4:	4770      	bx	lr
 800c9c6:	bf00      	nop
 800c9c8:	0801368c 	.word	0x0801368c

0800c9cc <acc_alg_basic_math_q3_12_cos>:
 800c9cc:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 800c9d0:	0043      	lsls	r3, r0, #1
 800c9d2:	bf54      	ite	pl
 800c9d4:	43d3      	mvnpl	r3, r2
 800c9d6:	4613      	movmi	r3, r2
 800c9d8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800c9dc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c9e0:	2a00      	cmp	r2, #0
 800c9e2:	ea4f 5393 	mov.w	r3, r3, lsr #22
 800c9e6:	4a04      	ldr	r2, [pc, #16]	; (800c9f8 <acc_alg_basic_math_q3_12_cos+0x2c>)
 800c9e8:	bfbd      	ittte	lt
 800c9ea:	f832 0013 	ldrhlt.w	r0, [r2, r3, lsl #1]
 800c9ee:	4240      	neglt	r0, r0
 800c9f0:	b200      	sxthlt	r0, r0
 800c9f2:	f932 0013 	ldrshge.w	r0, [r2, r3, lsl #1]
 800c9f6:	4770      	bx	lr
 800c9f8:	0801368c 	.word	0x0801368c

0800c9fc <malloc>:
 800c9fc:	4b02      	ldr	r3, [pc, #8]	; (800ca08 <malloc+0xc>)
 800c9fe:	4601      	mov	r1, r0
 800ca00:	6818      	ldr	r0, [r3, #0]
 800ca02:	f000 b82b 	b.w	800ca5c <_malloc_r>
 800ca06:	bf00      	nop
 800ca08:	200001e4 	.word	0x200001e4

0800ca0c <free>:
 800ca0c:	4b02      	ldr	r3, [pc, #8]	; (800ca18 <free+0xc>)
 800ca0e:	4601      	mov	r1, r0
 800ca10:	6818      	ldr	r0, [r3, #0]
 800ca12:	f000 bb3d 	b.w	800d090 <_free_r>
 800ca16:	bf00      	nop
 800ca18:	200001e4 	.word	0x200001e4

0800ca1c <sbrk_aligned>:
 800ca1c:	b570      	push	{r4, r5, r6, lr}
 800ca1e:	4e0e      	ldr	r6, [pc, #56]	; (800ca58 <sbrk_aligned+0x3c>)
 800ca20:	460c      	mov	r4, r1
 800ca22:	6831      	ldr	r1, [r6, #0]
 800ca24:	4605      	mov	r5, r0
 800ca26:	b911      	cbnz	r1, 800ca2e <sbrk_aligned+0x12>
 800ca28:	f000 fae8 	bl	800cffc <_sbrk_r>
 800ca2c:	6030      	str	r0, [r6, #0]
 800ca2e:	4621      	mov	r1, r4
 800ca30:	4628      	mov	r0, r5
 800ca32:	f000 fae3 	bl	800cffc <_sbrk_r>
 800ca36:	1c43      	adds	r3, r0, #1
 800ca38:	d00a      	beq.n	800ca50 <sbrk_aligned+0x34>
 800ca3a:	1cc4      	adds	r4, r0, #3
 800ca3c:	f024 0403 	bic.w	r4, r4, #3
 800ca40:	42a0      	cmp	r0, r4
 800ca42:	d007      	beq.n	800ca54 <sbrk_aligned+0x38>
 800ca44:	1a21      	subs	r1, r4, r0
 800ca46:	4628      	mov	r0, r5
 800ca48:	f000 fad8 	bl	800cffc <_sbrk_r>
 800ca4c:	3001      	adds	r0, #1
 800ca4e:	d101      	bne.n	800ca54 <sbrk_aligned+0x38>
 800ca50:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800ca54:	4620      	mov	r0, r4
 800ca56:	bd70      	pop	{r4, r5, r6, pc}
 800ca58:	20000378 	.word	0x20000378

0800ca5c <_malloc_r>:
 800ca5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca60:	1ccd      	adds	r5, r1, #3
 800ca62:	f025 0503 	bic.w	r5, r5, #3
 800ca66:	3508      	adds	r5, #8
 800ca68:	2d0c      	cmp	r5, #12
 800ca6a:	bf38      	it	cc
 800ca6c:	250c      	movcc	r5, #12
 800ca6e:	2d00      	cmp	r5, #0
 800ca70:	4607      	mov	r7, r0
 800ca72:	db01      	blt.n	800ca78 <_malloc_r+0x1c>
 800ca74:	42a9      	cmp	r1, r5
 800ca76:	d905      	bls.n	800ca84 <_malloc_r+0x28>
 800ca78:	230c      	movs	r3, #12
 800ca7a:	603b      	str	r3, [r7, #0]
 800ca7c:	2600      	movs	r6, #0
 800ca7e:	4630      	mov	r0, r6
 800ca80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca84:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800cb58 <_malloc_r+0xfc>
 800ca88:	f000 f92a 	bl	800cce0 <__malloc_lock>
 800ca8c:	f8d8 3000 	ldr.w	r3, [r8]
 800ca90:	461c      	mov	r4, r3
 800ca92:	bb5c      	cbnz	r4, 800caec <_malloc_r+0x90>
 800ca94:	4629      	mov	r1, r5
 800ca96:	4638      	mov	r0, r7
 800ca98:	f7ff ffc0 	bl	800ca1c <sbrk_aligned>
 800ca9c:	1c43      	adds	r3, r0, #1
 800ca9e:	4604      	mov	r4, r0
 800caa0:	d155      	bne.n	800cb4e <_malloc_r+0xf2>
 800caa2:	f8d8 4000 	ldr.w	r4, [r8]
 800caa6:	4626      	mov	r6, r4
 800caa8:	2e00      	cmp	r6, #0
 800caaa:	d145      	bne.n	800cb38 <_malloc_r+0xdc>
 800caac:	2c00      	cmp	r4, #0
 800caae:	d048      	beq.n	800cb42 <_malloc_r+0xe6>
 800cab0:	6823      	ldr	r3, [r4, #0]
 800cab2:	4631      	mov	r1, r6
 800cab4:	4638      	mov	r0, r7
 800cab6:	eb04 0903 	add.w	r9, r4, r3
 800caba:	f000 fa9f 	bl	800cffc <_sbrk_r>
 800cabe:	4581      	cmp	r9, r0
 800cac0:	d13f      	bne.n	800cb42 <_malloc_r+0xe6>
 800cac2:	6821      	ldr	r1, [r4, #0]
 800cac4:	1a6d      	subs	r5, r5, r1
 800cac6:	4629      	mov	r1, r5
 800cac8:	4638      	mov	r0, r7
 800caca:	f7ff ffa7 	bl	800ca1c <sbrk_aligned>
 800cace:	3001      	adds	r0, #1
 800cad0:	d037      	beq.n	800cb42 <_malloc_r+0xe6>
 800cad2:	6823      	ldr	r3, [r4, #0]
 800cad4:	442b      	add	r3, r5
 800cad6:	6023      	str	r3, [r4, #0]
 800cad8:	f8d8 3000 	ldr.w	r3, [r8]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d038      	beq.n	800cb52 <_malloc_r+0xf6>
 800cae0:	685a      	ldr	r2, [r3, #4]
 800cae2:	42a2      	cmp	r2, r4
 800cae4:	d12b      	bne.n	800cb3e <_malloc_r+0xe2>
 800cae6:	2200      	movs	r2, #0
 800cae8:	605a      	str	r2, [r3, #4]
 800caea:	e00f      	b.n	800cb0c <_malloc_r+0xb0>
 800caec:	6822      	ldr	r2, [r4, #0]
 800caee:	1b52      	subs	r2, r2, r5
 800caf0:	d41f      	bmi.n	800cb32 <_malloc_r+0xd6>
 800caf2:	2a0b      	cmp	r2, #11
 800caf4:	d917      	bls.n	800cb26 <_malloc_r+0xca>
 800caf6:	1961      	adds	r1, r4, r5
 800caf8:	42a3      	cmp	r3, r4
 800cafa:	6025      	str	r5, [r4, #0]
 800cafc:	bf18      	it	ne
 800cafe:	6059      	strne	r1, [r3, #4]
 800cb00:	6863      	ldr	r3, [r4, #4]
 800cb02:	bf08      	it	eq
 800cb04:	f8c8 1000 	streq.w	r1, [r8]
 800cb08:	5162      	str	r2, [r4, r5]
 800cb0a:	604b      	str	r3, [r1, #4]
 800cb0c:	4638      	mov	r0, r7
 800cb0e:	f104 060b 	add.w	r6, r4, #11
 800cb12:	f000 f8eb 	bl	800ccec <__malloc_unlock>
 800cb16:	f026 0607 	bic.w	r6, r6, #7
 800cb1a:	1d23      	adds	r3, r4, #4
 800cb1c:	1af2      	subs	r2, r6, r3
 800cb1e:	d0ae      	beq.n	800ca7e <_malloc_r+0x22>
 800cb20:	1b9b      	subs	r3, r3, r6
 800cb22:	50a3      	str	r3, [r4, r2]
 800cb24:	e7ab      	b.n	800ca7e <_malloc_r+0x22>
 800cb26:	42a3      	cmp	r3, r4
 800cb28:	6862      	ldr	r2, [r4, #4]
 800cb2a:	d1dd      	bne.n	800cae8 <_malloc_r+0x8c>
 800cb2c:	f8c8 2000 	str.w	r2, [r8]
 800cb30:	e7ec      	b.n	800cb0c <_malloc_r+0xb0>
 800cb32:	4623      	mov	r3, r4
 800cb34:	6864      	ldr	r4, [r4, #4]
 800cb36:	e7ac      	b.n	800ca92 <_malloc_r+0x36>
 800cb38:	4634      	mov	r4, r6
 800cb3a:	6876      	ldr	r6, [r6, #4]
 800cb3c:	e7b4      	b.n	800caa8 <_malloc_r+0x4c>
 800cb3e:	4613      	mov	r3, r2
 800cb40:	e7cc      	b.n	800cadc <_malloc_r+0x80>
 800cb42:	230c      	movs	r3, #12
 800cb44:	603b      	str	r3, [r7, #0]
 800cb46:	4638      	mov	r0, r7
 800cb48:	f000 f8d0 	bl	800ccec <__malloc_unlock>
 800cb4c:	e797      	b.n	800ca7e <_malloc_r+0x22>
 800cb4e:	6025      	str	r5, [r4, #0]
 800cb50:	e7dc      	b.n	800cb0c <_malloc_r+0xb0>
 800cb52:	605b      	str	r3, [r3, #4]
 800cb54:	deff      	udf	#255	; 0xff
 800cb56:	bf00      	nop
 800cb58:	20000374 	.word	0x20000374

0800cb5c <__sflush_r>:
 800cb5c:	898a      	ldrh	r2, [r1, #12]
 800cb5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb62:	4605      	mov	r5, r0
 800cb64:	0710      	lsls	r0, r2, #28
 800cb66:	460c      	mov	r4, r1
 800cb68:	d458      	bmi.n	800cc1c <__sflush_r+0xc0>
 800cb6a:	684b      	ldr	r3, [r1, #4]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	dc05      	bgt.n	800cb7c <__sflush_r+0x20>
 800cb70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	dc02      	bgt.n	800cb7c <__sflush_r+0x20>
 800cb76:	2000      	movs	r0, #0
 800cb78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cb7e:	2e00      	cmp	r6, #0
 800cb80:	d0f9      	beq.n	800cb76 <__sflush_r+0x1a>
 800cb82:	2300      	movs	r3, #0
 800cb84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cb88:	682f      	ldr	r7, [r5, #0]
 800cb8a:	6a21      	ldr	r1, [r4, #32]
 800cb8c:	602b      	str	r3, [r5, #0]
 800cb8e:	d032      	beq.n	800cbf6 <__sflush_r+0x9a>
 800cb90:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cb92:	89a3      	ldrh	r3, [r4, #12]
 800cb94:	075a      	lsls	r2, r3, #29
 800cb96:	d505      	bpl.n	800cba4 <__sflush_r+0x48>
 800cb98:	6863      	ldr	r3, [r4, #4]
 800cb9a:	1ac0      	subs	r0, r0, r3
 800cb9c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cb9e:	b10b      	cbz	r3, 800cba4 <__sflush_r+0x48>
 800cba0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cba2:	1ac0      	subs	r0, r0, r3
 800cba4:	2300      	movs	r3, #0
 800cba6:	4602      	mov	r2, r0
 800cba8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cbaa:	6a21      	ldr	r1, [r4, #32]
 800cbac:	4628      	mov	r0, r5
 800cbae:	47b0      	blx	r6
 800cbb0:	1c43      	adds	r3, r0, #1
 800cbb2:	89a3      	ldrh	r3, [r4, #12]
 800cbb4:	d106      	bne.n	800cbc4 <__sflush_r+0x68>
 800cbb6:	6829      	ldr	r1, [r5, #0]
 800cbb8:	291d      	cmp	r1, #29
 800cbba:	d82b      	bhi.n	800cc14 <__sflush_r+0xb8>
 800cbbc:	4a29      	ldr	r2, [pc, #164]	; (800cc64 <__sflush_r+0x108>)
 800cbbe:	410a      	asrs	r2, r1
 800cbc0:	07d6      	lsls	r6, r2, #31
 800cbc2:	d427      	bmi.n	800cc14 <__sflush_r+0xb8>
 800cbc4:	2200      	movs	r2, #0
 800cbc6:	6062      	str	r2, [r4, #4]
 800cbc8:	04d9      	lsls	r1, r3, #19
 800cbca:	6922      	ldr	r2, [r4, #16]
 800cbcc:	6022      	str	r2, [r4, #0]
 800cbce:	d504      	bpl.n	800cbda <__sflush_r+0x7e>
 800cbd0:	1c42      	adds	r2, r0, #1
 800cbd2:	d101      	bne.n	800cbd8 <__sflush_r+0x7c>
 800cbd4:	682b      	ldr	r3, [r5, #0]
 800cbd6:	b903      	cbnz	r3, 800cbda <__sflush_r+0x7e>
 800cbd8:	6560      	str	r0, [r4, #84]	; 0x54
 800cbda:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cbdc:	602f      	str	r7, [r5, #0]
 800cbde:	2900      	cmp	r1, #0
 800cbe0:	d0c9      	beq.n	800cb76 <__sflush_r+0x1a>
 800cbe2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cbe6:	4299      	cmp	r1, r3
 800cbe8:	d002      	beq.n	800cbf0 <__sflush_r+0x94>
 800cbea:	4628      	mov	r0, r5
 800cbec:	f000 fa50 	bl	800d090 <_free_r>
 800cbf0:	2000      	movs	r0, #0
 800cbf2:	6360      	str	r0, [r4, #52]	; 0x34
 800cbf4:	e7c0      	b.n	800cb78 <__sflush_r+0x1c>
 800cbf6:	2301      	movs	r3, #1
 800cbf8:	4628      	mov	r0, r5
 800cbfa:	47b0      	blx	r6
 800cbfc:	1c41      	adds	r1, r0, #1
 800cbfe:	d1c8      	bne.n	800cb92 <__sflush_r+0x36>
 800cc00:	682b      	ldr	r3, [r5, #0]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d0c5      	beq.n	800cb92 <__sflush_r+0x36>
 800cc06:	2b1d      	cmp	r3, #29
 800cc08:	d001      	beq.n	800cc0e <__sflush_r+0xb2>
 800cc0a:	2b16      	cmp	r3, #22
 800cc0c:	d101      	bne.n	800cc12 <__sflush_r+0xb6>
 800cc0e:	602f      	str	r7, [r5, #0]
 800cc10:	e7b1      	b.n	800cb76 <__sflush_r+0x1a>
 800cc12:	89a3      	ldrh	r3, [r4, #12]
 800cc14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc18:	81a3      	strh	r3, [r4, #12]
 800cc1a:	e7ad      	b.n	800cb78 <__sflush_r+0x1c>
 800cc1c:	690f      	ldr	r7, [r1, #16]
 800cc1e:	2f00      	cmp	r7, #0
 800cc20:	d0a9      	beq.n	800cb76 <__sflush_r+0x1a>
 800cc22:	0793      	lsls	r3, r2, #30
 800cc24:	680e      	ldr	r6, [r1, #0]
 800cc26:	bf08      	it	eq
 800cc28:	694b      	ldreq	r3, [r1, #20]
 800cc2a:	600f      	str	r7, [r1, #0]
 800cc2c:	bf18      	it	ne
 800cc2e:	2300      	movne	r3, #0
 800cc30:	eba6 0807 	sub.w	r8, r6, r7
 800cc34:	608b      	str	r3, [r1, #8]
 800cc36:	f1b8 0f00 	cmp.w	r8, #0
 800cc3a:	dd9c      	ble.n	800cb76 <__sflush_r+0x1a>
 800cc3c:	6a21      	ldr	r1, [r4, #32]
 800cc3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cc40:	4643      	mov	r3, r8
 800cc42:	463a      	mov	r2, r7
 800cc44:	4628      	mov	r0, r5
 800cc46:	47b0      	blx	r6
 800cc48:	2800      	cmp	r0, #0
 800cc4a:	dc06      	bgt.n	800cc5a <__sflush_r+0xfe>
 800cc4c:	89a3      	ldrh	r3, [r4, #12]
 800cc4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc52:	81a3      	strh	r3, [r4, #12]
 800cc54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cc58:	e78e      	b.n	800cb78 <__sflush_r+0x1c>
 800cc5a:	4407      	add	r7, r0
 800cc5c:	eba8 0800 	sub.w	r8, r8, r0
 800cc60:	e7e9      	b.n	800cc36 <__sflush_r+0xda>
 800cc62:	bf00      	nop
 800cc64:	dfbffffe 	.word	0xdfbffffe

0800cc68 <_fflush_r>:
 800cc68:	b538      	push	{r3, r4, r5, lr}
 800cc6a:	690b      	ldr	r3, [r1, #16]
 800cc6c:	4605      	mov	r5, r0
 800cc6e:	460c      	mov	r4, r1
 800cc70:	b913      	cbnz	r3, 800cc78 <_fflush_r+0x10>
 800cc72:	2500      	movs	r5, #0
 800cc74:	4628      	mov	r0, r5
 800cc76:	bd38      	pop	{r3, r4, r5, pc}
 800cc78:	b118      	cbz	r0, 800cc82 <_fflush_r+0x1a>
 800cc7a:	6a03      	ldr	r3, [r0, #32]
 800cc7c:	b90b      	cbnz	r3, 800cc82 <_fflush_r+0x1a>
 800cc7e:	f000 f8b5 	bl	800cdec <__sinit>
 800cc82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d0f3      	beq.n	800cc72 <_fflush_r+0xa>
 800cc8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cc8c:	07d0      	lsls	r0, r2, #31
 800cc8e:	d404      	bmi.n	800cc9a <_fflush_r+0x32>
 800cc90:	0599      	lsls	r1, r3, #22
 800cc92:	d402      	bmi.n	800cc9a <_fflush_r+0x32>
 800cc94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc96:	f000 f9eb 	bl	800d070 <__retarget_lock_acquire_recursive>
 800cc9a:	4628      	mov	r0, r5
 800cc9c:	4621      	mov	r1, r4
 800cc9e:	f7ff ff5d 	bl	800cb5c <__sflush_r>
 800cca2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cca4:	07da      	lsls	r2, r3, #31
 800cca6:	4605      	mov	r5, r0
 800cca8:	d4e4      	bmi.n	800cc74 <_fflush_r+0xc>
 800ccaa:	89a3      	ldrh	r3, [r4, #12]
 800ccac:	059b      	lsls	r3, r3, #22
 800ccae:	d4e1      	bmi.n	800cc74 <_fflush_r+0xc>
 800ccb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ccb2:	f000 f9de 	bl	800d072 <__retarget_lock_release_recursive>
 800ccb6:	e7dd      	b.n	800cc74 <_fflush_r+0xc>

0800ccb8 <fflush>:
 800ccb8:	4601      	mov	r1, r0
 800ccba:	b920      	cbnz	r0, 800ccc6 <fflush+0xe>
 800ccbc:	4a04      	ldr	r2, [pc, #16]	; (800ccd0 <fflush+0x18>)
 800ccbe:	4905      	ldr	r1, [pc, #20]	; (800ccd4 <fflush+0x1c>)
 800ccc0:	4805      	ldr	r0, [pc, #20]	; (800ccd8 <fflush+0x20>)
 800ccc2:	f000 b8ab 	b.w	800ce1c <_fwalk_sglue>
 800ccc6:	4b05      	ldr	r3, [pc, #20]	; (800ccdc <fflush+0x24>)
 800ccc8:	6818      	ldr	r0, [r3, #0]
 800ccca:	f7ff bfcd 	b.w	800cc68 <_fflush_r>
 800ccce:	bf00      	nop
 800ccd0:	2000018c 	.word	0x2000018c
 800ccd4:	0800cc69 	.word	0x0800cc69
 800ccd8:	20000198 	.word	0x20000198
 800ccdc:	200001e4 	.word	0x200001e4

0800cce0 <__malloc_lock>:
 800cce0:	4801      	ldr	r0, [pc, #4]	; (800cce8 <__malloc_lock+0x8>)
 800cce2:	f000 b9c5 	b.w	800d070 <__retarget_lock_acquire_recursive>
 800cce6:	bf00      	nop
 800cce8:	200004b8 	.word	0x200004b8

0800ccec <__malloc_unlock>:
 800ccec:	4801      	ldr	r0, [pc, #4]	; (800ccf4 <__malloc_unlock+0x8>)
 800ccee:	f000 b9c0 	b.w	800d072 <__retarget_lock_release_recursive>
 800ccf2:	bf00      	nop
 800ccf4:	200004b8 	.word	0x200004b8

0800ccf8 <std>:
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	b510      	push	{r4, lr}
 800ccfc:	4604      	mov	r4, r0
 800ccfe:	e9c0 3300 	strd	r3, r3, [r0]
 800cd02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cd06:	6083      	str	r3, [r0, #8]
 800cd08:	8181      	strh	r1, [r0, #12]
 800cd0a:	6643      	str	r3, [r0, #100]	; 0x64
 800cd0c:	81c2      	strh	r2, [r0, #14]
 800cd0e:	6183      	str	r3, [r0, #24]
 800cd10:	4619      	mov	r1, r3
 800cd12:	2208      	movs	r2, #8
 800cd14:	305c      	adds	r0, #92	; 0x5c
 800cd16:	f000 f969 	bl	800cfec <memset>
 800cd1a:	4b05      	ldr	r3, [pc, #20]	; (800cd30 <std+0x38>)
 800cd1c:	6263      	str	r3, [r4, #36]	; 0x24
 800cd1e:	4b05      	ldr	r3, [pc, #20]	; (800cd34 <std+0x3c>)
 800cd20:	62a3      	str	r3, [r4, #40]	; 0x28
 800cd22:	4b05      	ldr	r3, [pc, #20]	; (800cd38 <std+0x40>)
 800cd24:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cd26:	4b05      	ldr	r3, [pc, #20]	; (800cd3c <std+0x44>)
 800cd28:	6224      	str	r4, [r4, #32]
 800cd2a:	6323      	str	r3, [r4, #48]	; 0x30
 800cd2c:	bd10      	pop	{r4, pc}
 800cd2e:	bf00      	nop
 800cd30:	0800d981 	.word	0x0800d981
 800cd34:	0800d9a3 	.word	0x0800d9a3
 800cd38:	0800d9db 	.word	0x0800d9db
 800cd3c:	0800d9ff 	.word	0x0800d9ff

0800cd40 <stdio_exit_handler>:
 800cd40:	4a02      	ldr	r2, [pc, #8]	; (800cd4c <stdio_exit_handler+0xc>)
 800cd42:	4903      	ldr	r1, [pc, #12]	; (800cd50 <stdio_exit_handler+0x10>)
 800cd44:	4803      	ldr	r0, [pc, #12]	; (800cd54 <stdio_exit_handler+0x14>)
 800cd46:	f000 b869 	b.w	800ce1c <_fwalk_sglue>
 800cd4a:	bf00      	nop
 800cd4c:	2000018c 	.word	0x2000018c
 800cd50:	0800cc69 	.word	0x0800cc69
 800cd54:	20000198 	.word	0x20000198

0800cd58 <cleanup_stdio>:
 800cd58:	6841      	ldr	r1, [r0, #4]
 800cd5a:	4b0c      	ldr	r3, [pc, #48]	; (800cd8c <cleanup_stdio+0x34>)
 800cd5c:	4299      	cmp	r1, r3
 800cd5e:	b510      	push	{r4, lr}
 800cd60:	4604      	mov	r4, r0
 800cd62:	d001      	beq.n	800cd68 <cleanup_stdio+0x10>
 800cd64:	f7ff ff80 	bl	800cc68 <_fflush_r>
 800cd68:	68a1      	ldr	r1, [r4, #8]
 800cd6a:	4b09      	ldr	r3, [pc, #36]	; (800cd90 <cleanup_stdio+0x38>)
 800cd6c:	4299      	cmp	r1, r3
 800cd6e:	d002      	beq.n	800cd76 <cleanup_stdio+0x1e>
 800cd70:	4620      	mov	r0, r4
 800cd72:	f7ff ff79 	bl	800cc68 <_fflush_r>
 800cd76:	68e1      	ldr	r1, [r4, #12]
 800cd78:	4b06      	ldr	r3, [pc, #24]	; (800cd94 <cleanup_stdio+0x3c>)
 800cd7a:	4299      	cmp	r1, r3
 800cd7c:	d004      	beq.n	800cd88 <cleanup_stdio+0x30>
 800cd7e:	4620      	mov	r0, r4
 800cd80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd84:	f7ff bf70 	b.w	800cc68 <_fflush_r>
 800cd88:	bd10      	pop	{r4, pc}
 800cd8a:	bf00      	nop
 800cd8c:	2000037c 	.word	0x2000037c
 800cd90:	200003e4 	.word	0x200003e4
 800cd94:	2000044c 	.word	0x2000044c

0800cd98 <global_stdio_init.part.0>:
 800cd98:	b510      	push	{r4, lr}
 800cd9a:	4b0b      	ldr	r3, [pc, #44]	; (800cdc8 <global_stdio_init.part.0+0x30>)
 800cd9c:	4c0b      	ldr	r4, [pc, #44]	; (800cdcc <global_stdio_init.part.0+0x34>)
 800cd9e:	4a0c      	ldr	r2, [pc, #48]	; (800cdd0 <global_stdio_init.part.0+0x38>)
 800cda0:	601a      	str	r2, [r3, #0]
 800cda2:	4620      	mov	r0, r4
 800cda4:	2200      	movs	r2, #0
 800cda6:	2104      	movs	r1, #4
 800cda8:	f7ff ffa6 	bl	800ccf8 <std>
 800cdac:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800cdb0:	2201      	movs	r2, #1
 800cdb2:	2109      	movs	r1, #9
 800cdb4:	f7ff ffa0 	bl	800ccf8 <std>
 800cdb8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800cdbc:	2202      	movs	r2, #2
 800cdbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cdc2:	2112      	movs	r1, #18
 800cdc4:	f7ff bf98 	b.w	800ccf8 <std>
 800cdc8:	200004b4 	.word	0x200004b4
 800cdcc:	2000037c 	.word	0x2000037c
 800cdd0:	0800cd41 	.word	0x0800cd41

0800cdd4 <__sfp_lock_acquire>:
 800cdd4:	4801      	ldr	r0, [pc, #4]	; (800cddc <__sfp_lock_acquire+0x8>)
 800cdd6:	f000 b94b 	b.w	800d070 <__retarget_lock_acquire_recursive>
 800cdda:	bf00      	nop
 800cddc:	200004b9 	.word	0x200004b9

0800cde0 <__sfp_lock_release>:
 800cde0:	4801      	ldr	r0, [pc, #4]	; (800cde8 <__sfp_lock_release+0x8>)
 800cde2:	f000 b946 	b.w	800d072 <__retarget_lock_release_recursive>
 800cde6:	bf00      	nop
 800cde8:	200004b9 	.word	0x200004b9

0800cdec <__sinit>:
 800cdec:	b510      	push	{r4, lr}
 800cdee:	4604      	mov	r4, r0
 800cdf0:	f7ff fff0 	bl	800cdd4 <__sfp_lock_acquire>
 800cdf4:	6a23      	ldr	r3, [r4, #32]
 800cdf6:	b11b      	cbz	r3, 800ce00 <__sinit+0x14>
 800cdf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cdfc:	f7ff bff0 	b.w	800cde0 <__sfp_lock_release>
 800ce00:	4b04      	ldr	r3, [pc, #16]	; (800ce14 <__sinit+0x28>)
 800ce02:	6223      	str	r3, [r4, #32]
 800ce04:	4b04      	ldr	r3, [pc, #16]	; (800ce18 <__sinit+0x2c>)
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d1f5      	bne.n	800cdf8 <__sinit+0xc>
 800ce0c:	f7ff ffc4 	bl	800cd98 <global_stdio_init.part.0>
 800ce10:	e7f2      	b.n	800cdf8 <__sinit+0xc>
 800ce12:	bf00      	nop
 800ce14:	0800cd59 	.word	0x0800cd59
 800ce18:	200004b4 	.word	0x200004b4

0800ce1c <_fwalk_sglue>:
 800ce1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce20:	4607      	mov	r7, r0
 800ce22:	4688      	mov	r8, r1
 800ce24:	4614      	mov	r4, r2
 800ce26:	2600      	movs	r6, #0
 800ce28:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ce2c:	f1b9 0901 	subs.w	r9, r9, #1
 800ce30:	d505      	bpl.n	800ce3e <_fwalk_sglue+0x22>
 800ce32:	6824      	ldr	r4, [r4, #0]
 800ce34:	2c00      	cmp	r4, #0
 800ce36:	d1f7      	bne.n	800ce28 <_fwalk_sglue+0xc>
 800ce38:	4630      	mov	r0, r6
 800ce3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce3e:	89ab      	ldrh	r3, [r5, #12]
 800ce40:	2b01      	cmp	r3, #1
 800ce42:	d907      	bls.n	800ce54 <_fwalk_sglue+0x38>
 800ce44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ce48:	3301      	adds	r3, #1
 800ce4a:	d003      	beq.n	800ce54 <_fwalk_sglue+0x38>
 800ce4c:	4629      	mov	r1, r5
 800ce4e:	4638      	mov	r0, r7
 800ce50:	47c0      	blx	r8
 800ce52:	4306      	orrs	r6, r0
 800ce54:	3568      	adds	r5, #104	; 0x68
 800ce56:	e7e9      	b.n	800ce2c <_fwalk_sglue+0x10>

0800ce58 <_vsniprintf_r>:
 800ce58:	b530      	push	{r4, r5, lr}
 800ce5a:	4614      	mov	r4, r2
 800ce5c:	2c00      	cmp	r4, #0
 800ce5e:	b09b      	sub	sp, #108	; 0x6c
 800ce60:	4605      	mov	r5, r0
 800ce62:	461a      	mov	r2, r3
 800ce64:	da05      	bge.n	800ce72 <_vsniprintf_r+0x1a>
 800ce66:	238b      	movs	r3, #139	; 0x8b
 800ce68:	6003      	str	r3, [r0, #0]
 800ce6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ce6e:	b01b      	add	sp, #108	; 0x6c
 800ce70:	bd30      	pop	{r4, r5, pc}
 800ce72:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ce76:	f8ad 300c 	strh.w	r3, [sp, #12]
 800ce7a:	bf14      	ite	ne
 800ce7c:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800ce80:	4623      	moveq	r3, r4
 800ce82:	9302      	str	r3, [sp, #8]
 800ce84:	9305      	str	r3, [sp, #20]
 800ce86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ce8a:	9100      	str	r1, [sp, #0]
 800ce8c:	9104      	str	r1, [sp, #16]
 800ce8e:	f8ad 300e 	strh.w	r3, [sp, #14]
 800ce92:	4669      	mov	r1, sp
 800ce94:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ce96:	f000 f9a1 	bl	800d1dc <_svfiprintf_r>
 800ce9a:	1c43      	adds	r3, r0, #1
 800ce9c:	bfbc      	itt	lt
 800ce9e:	238b      	movlt	r3, #139	; 0x8b
 800cea0:	602b      	strlt	r3, [r5, #0]
 800cea2:	2c00      	cmp	r4, #0
 800cea4:	d0e3      	beq.n	800ce6e <_vsniprintf_r+0x16>
 800cea6:	9b00      	ldr	r3, [sp, #0]
 800cea8:	2200      	movs	r2, #0
 800ceaa:	701a      	strb	r2, [r3, #0]
 800ceac:	e7df      	b.n	800ce6e <_vsniprintf_r+0x16>
	...

0800ceb0 <vsniprintf>:
 800ceb0:	b507      	push	{r0, r1, r2, lr}
 800ceb2:	9300      	str	r3, [sp, #0]
 800ceb4:	4613      	mov	r3, r2
 800ceb6:	460a      	mov	r2, r1
 800ceb8:	4601      	mov	r1, r0
 800ceba:	4803      	ldr	r0, [pc, #12]	; (800cec8 <vsniprintf+0x18>)
 800cebc:	6800      	ldr	r0, [r0, #0]
 800cebe:	f7ff ffcb 	bl	800ce58 <_vsniprintf_r>
 800cec2:	b003      	add	sp, #12
 800cec4:	f85d fb04 	ldr.w	pc, [sp], #4
 800cec8:	200001e4 	.word	0x200001e4

0800cecc <iprintf>:
 800cecc:	b40f      	push	{r0, r1, r2, r3}
 800cece:	b507      	push	{r0, r1, r2, lr}
 800ced0:	4906      	ldr	r1, [pc, #24]	; (800ceec <iprintf+0x20>)
 800ced2:	ab04      	add	r3, sp, #16
 800ced4:	6808      	ldr	r0, [r1, #0]
 800ced6:	f853 2b04 	ldr.w	r2, [r3], #4
 800ceda:	6881      	ldr	r1, [r0, #8]
 800cedc:	9301      	str	r3, [sp, #4]
 800cede:	f000 faa5 	bl	800d42c <_vfiprintf_r>
 800cee2:	b003      	add	sp, #12
 800cee4:	f85d eb04 	ldr.w	lr, [sp], #4
 800cee8:	b004      	add	sp, #16
 800ceea:	4770      	bx	lr
 800ceec:	200001e4 	.word	0x200001e4

0800cef0 <putchar>:
 800cef0:	4b02      	ldr	r3, [pc, #8]	; (800cefc <putchar+0xc>)
 800cef2:	4601      	mov	r1, r0
 800cef4:	6818      	ldr	r0, [r3, #0]
 800cef6:	6882      	ldr	r2, [r0, #8]
 800cef8:	f000 beac 	b.w	800dc54 <_putc_r>
 800cefc:	200001e4 	.word	0x200001e4

0800cf00 <_puts_r>:
 800cf00:	6a03      	ldr	r3, [r0, #32]
 800cf02:	b570      	push	{r4, r5, r6, lr}
 800cf04:	6884      	ldr	r4, [r0, #8]
 800cf06:	4605      	mov	r5, r0
 800cf08:	460e      	mov	r6, r1
 800cf0a:	b90b      	cbnz	r3, 800cf10 <_puts_r+0x10>
 800cf0c:	f7ff ff6e 	bl	800cdec <__sinit>
 800cf10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cf12:	07db      	lsls	r3, r3, #31
 800cf14:	d405      	bmi.n	800cf22 <_puts_r+0x22>
 800cf16:	89a3      	ldrh	r3, [r4, #12]
 800cf18:	0598      	lsls	r0, r3, #22
 800cf1a:	d402      	bmi.n	800cf22 <_puts_r+0x22>
 800cf1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf1e:	f000 f8a7 	bl	800d070 <__retarget_lock_acquire_recursive>
 800cf22:	89a3      	ldrh	r3, [r4, #12]
 800cf24:	0719      	lsls	r1, r3, #28
 800cf26:	d513      	bpl.n	800cf50 <_puts_r+0x50>
 800cf28:	6923      	ldr	r3, [r4, #16]
 800cf2a:	b18b      	cbz	r3, 800cf50 <_puts_r+0x50>
 800cf2c:	3e01      	subs	r6, #1
 800cf2e:	68a3      	ldr	r3, [r4, #8]
 800cf30:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800cf34:	3b01      	subs	r3, #1
 800cf36:	60a3      	str	r3, [r4, #8]
 800cf38:	b9e9      	cbnz	r1, 800cf76 <_puts_r+0x76>
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	da2e      	bge.n	800cf9c <_puts_r+0x9c>
 800cf3e:	4622      	mov	r2, r4
 800cf40:	210a      	movs	r1, #10
 800cf42:	4628      	mov	r0, r5
 800cf44:	f000 fd8e 	bl	800da64 <__swbuf_r>
 800cf48:	3001      	adds	r0, #1
 800cf4a:	d007      	beq.n	800cf5c <_puts_r+0x5c>
 800cf4c:	250a      	movs	r5, #10
 800cf4e:	e007      	b.n	800cf60 <_puts_r+0x60>
 800cf50:	4621      	mov	r1, r4
 800cf52:	4628      	mov	r0, r5
 800cf54:	f000 fdc4 	bl	800dae0 <__swsetup_r>
 800cf58:	2800      	cmp	r0, #0
 800cf5a:	d0e7      	beq.n	800cf2c <_puts_r+0x2c>
 800cf5c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800cf60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cf62:	07da      	lsls	r2, r3, #31
 800cf64:	d405      	bmi.n	800cf72 <_puts_r+0x72>
 800cf66:	89a3      	ldrh	r3, [r4, #12]
 800cf68:	059b      	lsls	r3, r3, #22
 800cf6a:	d402      	bmi.n	800cf72 <_puts_r+0x72>
 800cf6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf6e:	f000 f880 	bl	800d072 <__retarget_lock_release_recursive>
 800cf72:	4628      	mov	r0, r5
 800cf74:	bd70      	pop	{r4, r5, r6, pc}
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	da04      	bge.n	800cf84 <_puts_r+0x84>
 800cf7a:	69a2      	ldr	r2, [r4, #24]
 800cf7c:	429a      	cmp	r2, r3
 800cf7e:	dc06      	bgt.n	800cf8e <_puts_r+0x8e>
 800cf80:	290a      	cmp	r1, #10
 800cf82:	d004      	beq.n	800cf8e <_puts_r+0x8e>
 800cf84:	6823      	ldr	r3, [r4, #0]
 800cf86:	1c5a      	adds	r2, r3, #1
 800cf88:	6022      	str	r2, [r4, #0]
 800cf8a:	7019      	strb	r1, [r3, #0]
 800cf8c:	e7cf      	b.n	800cf2e <_puts_r+0x2e>
 800cf8e:	4622      	mov	r2, r4
 800cf90:	4628      	mov	r0, r5
 800cf92:	f000 fd67 	bl	800da64 <__swbuf_r>
 800cf96:	3001      	adds	r0, #1
 800cf98:	d1c9      	bne.n	800cf2e <_puts_r+0x2e>
 800cf9a:	e7df      	b.n	800cf5c <_puts_r+0x5c>
 800cf9c:	6823      	ldr	r3, [r4, #0]
 800cf9e:	250a      	movs	r5, #10
 800cfa0:	1c5a      	adds	r2, r3, #1
 800cfa2:	6022      	str	r2, [r4, #0]
 800cfa4:	701d      	strb	r5, [r3, #0]
 800cfa6:	e7db      	b.n	800cf60 <_puts_r+0x60>

0800cfa8 <puts>:
 800cfa8:	4b02      	ldr	r3, [pc, #8]	; (800cfb4 <puts+0xc>)
 800cfaa:	4601      	mov	r1, r0
 800cfac:	6818      	ldr	r0, [r3, #0]
 800cfae:	f7ff bfa7 	b.w	800cf00 <_puts_r>
 800cfb2:	bf00      	nop
 800cfb4:	200001e4 	.word	0x200001e4

0800cfb8 <memmove>:
 800cfb8:	4288      	cmp	r0, r1
 800cfba:	b510      	push	{r4, lr}
 800cfbc:	eb01 0402 	add.w	r4, r1, r2
 800cfc0:	d902      	bls.n	800cfc8 <memmove+0x10>
 800cfc2:	4284      	cmp	r4, r0
 800cfc4:	4623      	mov	r3, r4
 800cfc6:	d807      	bhi.n	800cfd8 <memmove+0x20>
 800cfc8:	1e43      	subs	r3, r0, #1
 800cfca:	42a1      	cmp	r1, r4
 800cfcc:	d008      	beq.n	800cfe0 <memmove+0x28>
 800cfce:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cfd2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cfd6:	e7f8      	b.n	800cfca <memmove+0x12>
 800cfd8:	4402      	add	r2, r0
 800cfda:	4601      	mov	r1, r0
 800cfdc:	428a      	cmp	r2, r1
 800cfde:	d100      	bne.n	800cfe2 <memmove+0x2a>
 800cfe0:	bd10      	pop	{r4, pc}
 800cfe2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cfe6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cfea:	e7f7      	b.n	800cfdc <memmove+0x24>

0800cfec <memset>:
 800cfec:	4402      	add	r2, r0
 800cfee:	4603      	mov	r3, r0
 800cff0:	4293      	cmp	r3, r2
 800cff2:	d100      	bne.n	800cff6 <memset+0xa>
 800cff4:	4770      	bx	lr
 800cff6:	f803 1b01 	strb.w	r1, [r3], #1
 800cffa:	e7f9      	b.n	800cff0 <memset+0x4>

0800cffc <_sbrk_r>:
 800cffc:	b538      	push	{r3, r4, r5, lr}
 800cffe:	4d06      	ldr	r5, [pc, #24]	; (800d018 <_sbrk_r+0x1c>)
 800d000:	2300      	movs	r3, #0
 800d002:	4604      	mov	r4, r0
 800d004:	4608      	mov	r0, r1
 800d006:	602b      	str	r3, [r5, #0]
 800d008:	f7f4 f92e 	bl	8001268 <_sbrk>
 800d00c:	1c43      	adds	r3, r0, #1
 800d00e:	d102      	bne.n	800d016 <_sbrk_r+0x1a>
 800d010:	682b      	ldr	r3, [r5, #0]
 800d012:	b103      	cbz	r3, 800d016 <_sbrk_r+0x1a>
 800d014:	6023      	str	r3, [r4, #0]
 800d016:	bd38      	pop	{r3, r4, r5, pc}
 800d018:	200004bc 	.word	0x200004bc

0800d01c <__errno>:
 800d01c:	4b01      	ldr	r3, [pc, #4]	; (800d024 <__errno+0x8>)
 800d01e:	6818      	ldr	r0, [r3, #0]
 800d020:	4770      	bx	lr
 800d022:	bf00      	nop
 800d024:	200001e4 	.word	0x200001e4

0800d028 <__libc_init_array>:
 800d028:	b570      	push	{r4, r5, r6, lr}
 800d02a:	4d0d      	ldr	r5, [pc, #52]	; (800d060 <__libc_init_array+0x38>)
 800d02c:	4c0d      	ldr	r4, [pc, #52]	; (800d064 <__libc_init_array+0x3c>)
 800d02e:	1b64      	subs	r4, r4, r5
 800d030:	10a4      	asrs	r4, r4, #2
 800d032:	2600      	movs	r6, #0
 800d034:	42a6      	cmp	r6, r4
 800d036:	d109      	bne.n	800d04c <__libc_init_array+0x24>
 800d038:	4d0b      	ldr	r5, [pc, #44]	; (800d068 <__libc_init_array+0x40>)
 800d03a:	4c0c      	ldr	r4, [pc, #48]	; (800d06c <__libc_init_array+0x44>)
 800d03c:	f001 f888 	bl	800e150 <_init>
 800d040:	1b64      	subs	r4, r4, r5
 800d042:	10a4      	asrs	r4, r4, #2
 800d044:	2600      	movs	r6, #0
 800d046:	42a6      	cmp	r6, r4
 800d048:	d105      	bne.n	800d056 <__libc_init_array+0x2e>
 800d04a:	bd70      	pop	{r4, r5, r6, pc}
 800d04c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d050:	4798      	blx	r3
 800d052:	3601      	adds	r6, #1
 800d054:	e7ee      	b.n	800d034 <__libc_init_array+0xc>
 800d056:	f855 3b04 	ldr.w	r3, [r5], #4
 800d05a:	4798      	blx	r3
 800d05c:	3601      	adds	r6, #1
 800d05e:	e7f2      	b.n	800d046 <__libc_init_array+0x1e>
 800d060:	080138dc 	.word	0x080138dc
 800d064:	080138dc 	.word	0x080138dc
 800d068:	080138dc 	.word	0x080138dc
 800d06c:	080138e0 	.word	0x080138e0

0800d070 <__retarget_lock_acquire_recursive>:
 800d070:	4770      	bx	lr

0800d072 <__retarget_lock_release_recursive>:
 800d072:	4770      	bx	lr

0800d074 <memcpy>:
 800d074:	440a      	add	r2, r1
 800d076:	4291      	cmp	r1, r2
 800d078:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d07c:	d100      	bne.n	800d080 <memcpy+0xc>
 800d07e:	4770      	bx	lr
 800d080:	b510      	push	{r4, lr}
 800d082:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d086:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d08a:	4291      	cmp	r1, r2
 800d08c:	d1f9      	bne.n	800d082 <memcpy+0xe>
 800d08e:	bd10      	pop	{r4, pc}

0800d090 <_free_r>:
 800d090:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d092:	2900      	cmp	r1, #0
 800d094:	d044      	beq.n	800d120 <_free_r+0x90>
 800d096:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d09a:	9001      	str	r0, [sp, #4]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	f1a1 0404 	sub.w	r4, r1, #4
 800d0a2:	bfb8      	it	lt
 800d0a4:	18e4      	addlt	r4, r4, r3
 800d0a6:	f7ff fe1b 	bl	800cce0 <__malloc_lock>
 800d0aa:	4a1e      	ldr	r2, [pc, #120]	; (800d124 <_free_r+0x94>)
 800d0ac:	9801      	ldr	r0, [sp, #4]
 800d0ae:	6813      	ldr	r3, [r2, #0]
 800d0b0:	b933      	cbnz	r3, 800d0c0 <_free_r+0x30>
 800d0b2:	6063      	str	r3, [r4, #4]
 800d0b4:	6014      	str	r4, [r2, #0]
 800d0b6:	b003      	add	sp, #12
 800d0b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d0bc:	f7ff be16 	b.w	800ccec <__malloc_unlock>
 800d0c0:	42a3      	cmp	r3, r4
 800d0c2:	d908      	bls.n	800d0d6 <_free_r+0x46>
 800d0c4:	6825      	ldr	r5, [r4, #0]
 800d0c6:	1961      	adds	r1, r4, r5
 800d0c8:	428b      	cmp	r3, r1
 800d0ca:	bf01      	itttt	eq
 800d0cc:	6819      	ldreq	r1, [r3, #0]
 800d0ce:	685b      	ldreq	r3, [r3, #4]
 800d0d0:	1949      	addeq	r1, r1, r5
 800d0d2:	6021      	streq	r1, [r4, #0]
 800d0d4:	e7ed      	b.n	800d0b2 <_free_r+0x22>
 800d0d6:	461a      	mov	r2, r3
 800d0d8:	685b      	ldr	r3, [r3, #4]
 800d0da:	b10b      	cbz	r3, 800d0e0 <_free_r+0x50>
 800d0dc:	42a3      	cmp	r3, r4
 800d0de:	d9fa      	bls.n	800d0d6 <_free_r+0x46>
 800d0e0:	6811      	ldr	r1, [r2, #0]
 800d0e2:	1855      	adds	r5, r2, r1
 800d0e4:	42a5      	cmp	r5, r4
 800d0e6:	d10b      	bne.n	800d100 <_free_r+0x70>
 800d0e8:	6824      	ldr	r4, [r4, #0]
 800d0ea:	4421      	add	r1, r4
 800d0ec:	1854      	adds	r4, r2, r1
 800d0ee:	42a3      	cmp	r3, r4
 800d0f0:	6011      	str	r1, [r2, #0]
 800d0f2:	d1e0      	bne.n	800d0b6 <_free_r+0x26>
 800d0f4:	681c      	ldr	r4, [r3, #0]
 800d0f6:	685b      	ldr	r3, [r3, #4]
 800d0f8:	6053      	str	r3, [r2, #4]
 800d0fa:	440c      	add	r4, r1
 800d0fc:	6014      	str	r4, [r2, #0]
 800d0fe:	e7da      	b.n	800d0b6 <_free_r+0x26>
 800d100:	d902      	bls.n	800d108 <_free_r+0x78>
 800d102:	230c      	movs	r3, #12
 800d104:	6003      	str	r3, [r0, #0]
 800d106:	e7d6      	b.n	800d0b6 <_free_r+0x26>
 800d108:	6825      	ldr	r5, [r4, #0]
 800d10a:	1961      	adds	r1, r4, r5
 800d10c:	428b      	cmp	r3, r1
 800d10e:	bf04      	itt	eq
 800d110:	6819      	ldreq	r1, [r3, #0]
 800d112:	685b      	ldreq	r3, [r3, #4]
 800d114:	6063      	str	r3, [r4, #4]
 800d116:	bf04      	itt	eq
 800d118:	1949      	addeq	r1, r1, r5
 800d11a:	6021      	streq	r1, [r4, #0]
 800d11c:	6054      	str	r4, [r2, #4]
 800d11e:	e7ca      	b.n	800d0b6 <_free_r+0x26>
 800d120:	b003      	add	sp, #12
 800d122:	bd30      	pop	{r4, r5, pc}
 800d124:	20000374 	.word	0x20000374

0800d128 <__ssputs_r>:
 800d128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d12c:	688e      	ldr	r6, [r1, #8]
 800d12e:	461f      	mov	r7, r3
 800d130:	42be      	cmp	r6, r7
 800d132:	680b      	ldr	r3, [r1, #0]
 800d134:	4682      	mov	sl, r0
 800d136:	460c      	mov	r4, r1
 800d138:	4690      	mov	r8, r2
 800d13a:	d82c      	bhi.n	800d196 <__ssputs_r+0x6e>
 800d13c:	898a      	ldrh	r2, [r1, #12]
 800d13e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d142:	d026      	beq.n	800d192 <__ssputs_r+0x6a>
 800d144:	6965      	ldr	r5, [r4, #20]
 800d146:	6909      	ldr	r1, [r1, #16]
 800d148:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d14c:	eba3 0901 	sub.w	r9, r3, r1
 800d150:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d154:	1c7b      	adds	r3, r7, #1
 800d156:	444b      	add	r3, r9
 800d158:	106d      	asrs	r5, r5, #1
 800d15a:	429d      	cmp	r5, r3
 800d15c:	bf38      	it	cc
 800d15e:	461d      	movcc	r5, r3
 800d160:	0553      	lsls	r3, r2, #21
 800d162:	d527      	bpl.n	800d1b4 <__ssputs_r+0x8c>
 800d164:	4629      	mov	r1, r5
 800d166:	f7ff fc79 	bl	800ca5c <_malloc_r>
 800d16a:	4606      	mov	r6, r0
 800d16c:	b360      	cbz	r0, 800d1c8 <__ssputs_r+0xa0>
 800d16e:	6921      	ldr	r1, [r4, #16]
 800d170:	464a      	mov	r2, r9
 800d172:	f7ff ff7f 	bl	800d074 <memcpy>
 800d176:	89a3      	ldrh	r3, [r4, #12]
 800d178:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d17c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d180:	81a3      	strh	r3, [r4, #12]
 800d182:	6126      	str	r6, [r4, #16]
 800d184:	6165      	str	r5, [r4, #20]
 800d186:	444e      	add	r6, r9
 800d188:	eba5 0509 	sub.w	r5, r5, r9
 800d18c:	6026      	str	r6, [r4, #0]
 800d18e:	60a5      	str	r5, [r4, #8]
 800d190:	463e      	mov	r6, r7
 800d192:	42be      	cmp	r6, r7
 800d194:	d900      	bls.n	800d198 <__ssputs_r+0x70>
 800d196:	463e      	mov	r6, r7
 800d198:	6820      	ldr	r0, [r4, #0]
 800d19a:	4632      	mov	r2, r6
 800d19c:	4641      	mov	r1, r8
 800d19e:	f7ff ff0b 	bl	800cfb8 <memmove>
 800d1a2:	68a3      	ldr	r3, [r4, #8]
 800d1a4:	1b9b      	subs	r3, r3, r6
 800d1a6:	60a3      	str	r3, [r4, #8]
 800d1a8:	6823      	ldr	r3, [r4, #0]
 800d1aa:	4433      	add	r3, r6
 800d1ac:	6023      	str	r3, [r4, #0]
 800d1ae:	2000      	movs	r0, #0
 800d1b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1b4:	462a      	mov	r2, r5
 800d1b6:	f000 fc26 	bl	800da06 <_realloc_r>
 800d1ba:	4606      	mov	r6, r0
 800d1bc:	2800      	cmp	r0, #0
 800d1be:	d1e0      	bne.n	800d182 <__ssputs_r+0x5a>
 800d1c0:	6921      	ldr	r1, [r4, #16]
 800d1c2:	4650      	mov	r0, sl
 800d1c4:	f7ff ff64 	bl	800d090 <_free_r>
 800d1c8:	230c      	movs	r3, #12
 800d1ca:	f8ca 3000 	str.w	r3, [sl]
 800d1ce:	89a3      	ldrh	r3, [r4, #12]
 800d1d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d1d4:	81a3      	strh	r3, [r4, #12]
 800d1d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d1da:	e7e9      	b.n	800d1b0 <__ssputs_r+0x88>

0800d1dc <_svfiprintf_r>:
 800d1dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1e0:	4698      	mov	r8, r3
 800d1e2:	898b      	ldrh	r3, [r1, #12]
 800d1e4:	061b      	lsls	r3, r3, #24
 800d1e6:	b09d      	sub	sp, #116	; 0x74
 800d1e8:	4607      	mov	r7, r0
 800d1ea:	460d      	mov	r5, r1
 800d1ec:	4614      	mov	r4, r2
 800d1ee:	d50e      	bpl.n	800d20e <_svfiprintf_r+0x32>
 800d1f0:	690b      	ldr	r3, [r1, #16]
 800d1f2:	b963      	cbnz	r3, 800d20e <_svfiprintf_r+0x32>
 800d1f4:	2140      	movs	r1, #64	; 0x40
 800d1f6:	f7ff fc31 	bl	800ca5c <_malloc_r>
 800d1fa:	6028      	str	r0, [r5, #0]
 800d1fc:	6128      	str	r0, [r5, #16]
 800d1fe:	b920      	cbnz	r0, 800d20a <_svfiprintf_r+0x2e>
 800d200:	230c      	movs	r3, #12
 800d202:	603b      	str	r3, [r7, #0]
 800d204:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d208:	e0d0      	b.n	800d3ac <_svfiprintf_r+0x1d0>
 800d20a:	2340      	movs	r3, #64	; 0x40
 800d20c:	616b      	str	r3, [r5, #20]
 800d20e:	2300      	movs	r3, #0
 800d210:	9309      	str	r3, [sp, #36]	; 0x24
 800d212:	2320      	movs	r3, #32
 800d214:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d218:	f8cd 800c 	str.w	r8, [sp, #12]
 800d21c:	2330      	movs	r3, #48	; 0x30
 800d21e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d3c4 <_svfiprintf_r+0x1e8>
 800d222:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d226:	f04f 0901 	mov.w	r9, #1
 800d22a:	4623      	mov	r3, r4
 800d22c:	469a      	mov	sl, r3
 800d22e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d232:	b10a      	cbz	r2, 800d238 <_svfiprintf_r+0x5c>
 800d234:	2a25      	cmp	r2, #37	; 0x25
 800d236:	d1f9      	bne.n	800d22c <_svfiprintf_r+0x50>
 800d238:	ebba 0b04 	subs.w	fp, sl, r4
 800d23c:	d00b      	beq.n	800d256 <_svfiprintf_r+0x7a>
 800d23e:	465b      	mov	r3, fp
 800d240:	4622      	mov	r2, r4
 800d242:	4629      	mov	r1, r5
 800d244:	4638      	mov	r0, r7
 800d246:	f7ff ff6f 	bl	800d128 <__ssputs_r>
 800d24a:	3001      	adds	r0, #1
 800d24c:	f000 80a9 	beq.w	800d3a2 <_svfiprintf_r+0x1c6>
 800d250:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d252:	445a      	add	r2, fp
 800d254:	9209      	str	r2, [sp, #36]	; 0x24
 800d256:	f89a 3000 	ldrb.w	r3, [sl]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	f000 80a1 	beq.w	800d3a2 <_svfiprintf_r+0x1c6>
 800d260:	2300      	movs	r3, #0
 800d262:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d266:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d26a:	f10a 0a01 	add.w	sl, sl, #1
 800d26e:	9304      	str	r3, [sp, #16]
 800d270:	9307      	str	r3, [sp, #28]
 800d272:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d276:	931a      	str	r3, [sp, #104]	; 0x68
 800d278:	4654      	mov	r4, sl
 800d27a:	2205      	movs	r2, #5
 800d27c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d280:	4850      	ldr	r0, [pc, #320]	; (800d3c4 <_svfiprintf_r+0x1e8>)
 800d282:	f7f3 f81d 	bl	80002c0 <memchr>
 800d286:	9a04      	ldr	r2, [sp, #16]
 800d288:	b9d8      	cbnz	r0, 800d2c2 <_svfiprintf_r+0xe6>
 800d28a:	06d0      	lsls	r0, r2, #27
 800d28c:	bf44      	itt	mi
 800d28e:	2320      	movmi	r3, #32
 800d290:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d294:	0711      	lsls	r1, r2, #28
 800d296:	bf44      	itt	mi
 800d298:	232b      	movmi	r3, #43	; 0x2b
 800d29a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d29e:	f89a 3000 	ldrb.w	r3, [sl]
 800d2a2:	2b2a      	cmp	r3, #42	; 0x2a
 800d2a4:	d015      	beq.n	800d2d2 <_svfiprintf_r+0xf6>
 800d2a6:	9a07      	ldr	r2, [sp, #28]
 800d2a8:	4654      	mov	r4, sl
 800d2aa:	2000      	movs	r0, #0
 800d2ac:	f04f 0c0a 	mov.w	ip, #10
 800d2b0:	4621      	mov	r1, r4
 800d2b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d2b6:	3b30      	subs	r3, #48	; 0x30
 800d2b8:	2b09      	cmp	r3, #9
 800d2ba:	d94d      	bls.n	800d358 <_svfiprintf_r+0x17c>
 800d2bc:	b1b0      	cbz	r0, 800d2ec <_svfiprintf_r+0x110>
 800d2be:	9207      	str	r2, [sp, #28]
 800d2c0:	e014      	b.n	800d2ec <_svfiprintf_r+0x110>
 800d2c2:	eba0 0308 	sub.w	r3, r0, r8
 800d2c6:	fa09 f303 	lsl.w	r3, r9, r3
 800d2ca:	4313      	orrs	r3, r2
 800d2cc:	9304      	str	r3, [sp, #16]
 800d2ce:	46a2      	mov	sl, r4
 800d2d0:	e7d2      	b.n	800d278 <_svfiprintf_r+0x9c>
 800d2d2:	9b03      	ldr	r3, [sp, #12]
 800d2d4:	1d19      	adds	r1, r3, #4
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	9103      	str	r1, [sp, #12]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	bfbb      	ittet	lt
 800d2de:	425b      	neglt	r3, r3
 800d2e0:	f042 0202 	orrlt.w	r2, r2, #2
 800d2e4:	9307      	strge	r3, [sp, #28]
 800d2e6:	9307      	strlt	r3, [sp, #28]
 800d2e8:	bfb8      	it	lt
 800d2ea:	9204      	strlt	r2, [sp, #16]
 800d2ec:	7823      	ldrb	r3, [r4, #0]
 800d2ee:	2b2e      	cmp	r3, #46	; 0x2e
 800d2f0:	d10c      	bne.n	800d30c <_svfiprintf_r+0x130>
 800d2f2:	7863      	ldrb	r3, [r4, #1]
 800d2f4:	2b2a      	cmp	r3, #42	; 0x2a
 800d2f6:	d134      	bne.n	800d362 <_svfiprintf_r+0x186>
 800d2f8:	9b03      	ldr	r3, [sp, #12]
 800d2fa:	1d1a      	adds	r2, r3, #4
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	9203      	str	r2, [sp, #12]
 800d300:	2b00      	cmp	r3, #0
 800d302:	bfb8      	it	lt
 800d304:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d308:	3402      	adds	r4, #2
 800d30a:	9305      	str	r3, [sp, #20]
 800d30c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800d3d4 <_svfiprintf_r+0x1f8>
 800d310:	7821      	ldrb	r1, [r4, #0]
 800d312:	2203      	movs	r2, #3
 800d314:	4650      	mov	r0, sl
 800d316:	f7f2 ffd3 	bl	80002c0 <memchr>
 800d31a:	b138      	cbz	r0, 800d32c <_svfiprintf_r+0x150>
 800d31c:	9b04      	ldr	r3, [sp, #16]
 800d31e:	eba0 000a 	sub.w	r0, r0, sl
 800d322:	2240      	movs	r2, #64	; 0x40
 800d324:	4082      	lsls	r2, r0
 800d326:	4313      	orrs	r3, r2
 800d328:	3401      	adds	r4, #1
 800d32a:	9304      	str	r3, [sp, #16]
 800d32c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d330:	4825      	ldr	r0, [pc, #148]	; (800d3c8 <_svfiprintf_r+0x1ec>)
 800d332:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d336:	2206      	movs	r2, #6
 800d338:	f7f2 ffc2 	bl	80002c0 <memchr>
 800d33c:	2800      	cmp	r0, #0
 800d33e:	d038      	beq.n	800d3b2 <_svfiprintf_r+0x1d6>
 800d340:	4b22      	ldr	r3, [pc, #136]	; (800d3cc <_svfiprintf_r+0x1f0>)
 800d342:	bb1b      	cbnz	r3, 800d38c <_svfiprintf_r+0x1b0>
 800d344:	9b03      	ldr	r3, [sp, #12]
 800d346:	3307      	adds	r3, #7
 800d348:	f023 0307 	bic.w	r3, r3, #7
 800d34c:	3308      	adds	r3, #8
 800d34e:	9303      	str	r3, [sp, #12]
 800d350:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d352:	4433      	add	r3, r6
 800d354:	9309      	str	r3, [sp, #36]	; 0x24
 800d356:	e768      	b.n	800d22a <_svfiprintf_r+0x4e>
 800d358:	fb0c 3202 	mla	r2, ip, r2, r3
 800d35c:	460c      	mov	r4, r1
 800d35e:	2001      	movs	r0, #1
 800d360:	e7a6      	b.n	800d2b0 <_svfiprintf_r+0xd4>
 800d362:	2300      	movs	r3, #0
 800d364:	3401      	adds	r4, #1
 800d366:	9305      	str	r3, [sp, #20]
 800d368:	4619      	mov	r1, r3
 800d36a:	f04f 0c0a 	mov.w	ip, #10
 800d36e:	4620      	mov	r0, r4
 800d370:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d374:	3a30      	subs	r2, #48	; 0x30
 800d376:	2a09      	cmp	r2, #9
 800d378:	d903      	bls.n	800d382 <_svfiprintf_r+0x1a6>
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d0c6      	beq.n	800d30c <_svfiprintf_r+0x130>
 800d37e:	9105      	str	r1, [sp, #20]
 800d380:	e7c4      	b.n	800d30c <_svfiprintf_r+0x130>
 800d382:	fb0c 2101 	mla	r1, ip, r1, r2
 800d386:	4604      	mov	r4, r0
 800d388:	2301      	movs	r3, #1
 800d38a:	e7f0      	b.n	800d36e <_svfiprintf_r+0x192>
 800d38c:	ab03      	add	r3, sp, #12
 800d38e:	9300      	str	r3, [sp, #0]
 800d390:	462a      	mov	r2, r5
 800d392:	4b0f      	ldr	r3, [pc, #60]	; (800d3d0 <_svfiprintf_r+0x1f4>)
 800d394:	a904      	add	r1, sp, #16
 800d396:	4638      	mov	r0, r7
 800d398:	f3af 8000 	nop.w
 800d39c:	1c42      	adds	r2, r0, #1
 800d39e:	4606      	mov	r6, r0
 800d3a0:	d1d6      	bne.n	800d350 <_svfiprintf_r+0x174>
 800d3a2:	89ab      	ldrh	r3, [r5, #12]
 800d3a4:	065b      	lsls	r3, r3, #25
 800d3a6:	f53f af2d 	bmi.w	800d204 <_svfiprintf_r+0x28>
 800d3aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d3ac:	b01d      	add	sp, #116	; 0x74
 800d3ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3b2:	ab03      	add	r3, sp, #12
 800d3b4:	9300      	str	r3, [sp, #0]
 800d3b6:	462a      	mov	r2, r5
 800d3b8:	4b05      	ldr	r3, [pc, #20]	; (800d3d0 <_svfiprintf_r+0x1f4>)
 800d3ba:	a904      	add	r1, sp, #16
 800d3bc:	4638      	mov	r0, r7
 800d3be:	f000 f9bd 	bl	800d73c <_printf_i>
 800d3c2:	e7eb      	b.n	800d39c <_svfiprintf_r+0x1c0>
 800d3c4:	080138a0 	.word	0x080138a0
 800d3c8:	080138aa 	.word	0x080138aa
 800d3cc:	00000000 	.word	0x00000000
 800d3d0:	0800d129 	.word	0x0800d129
 800d3d4:	080138a6 	.word	0x080138a6

0800d3d8 <__sfputc_r>:
 800d3d8:	6893      	ldr	r3, [r2, #8]
 800d3da:	3b01      	subs	r3, #1
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	b410      	push	{r4}
 800d3e0:	6093      	str	r3, [r2, #8]
 800d3e2:	da08      	bge.n	800d3f6 <__sfputc_r+0x1e>
 800d3e4:	6994      	ldr	r4, [r2, #24]
 800d3e6:	42a3      	cmp	r3, r4
 800d3e8:	db01      	blt.n	800d3ee <__sfputc_r+0x16>
 800d3ea:	290a      	cmp	r1, #10
 800d3ec:	d103      	bne.n	800d3f6 <__sfputc_r+0x1e>
 800d3ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d3f2:	f000 bb37 	b.w	800da64 <__swbuf_r>
 800d3f6:	6813      	ldr	r3, [r2, #0]
 800d3f8:	1c58      	adds	r0, r3, #1
 800d3fa:	6010      	str	r0, [r2, #0]
 800d3fc:	7019      	strb	r1, [r3, #0]
 800d3fe:	4608      	mov	r0, r1
 800d400:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d404:	4770      	bx	lr

0800d406 <__sfputs_r>:
 800d406:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d408:	4606      	mov	r6, r0
 800d40a:	460f      	mov	r7, r1
 800d40c:	4614      	mov	r4, r2
 800d40e:	18d5      	adds	r5, r2, r3
 800d410:	42ac      	cmp	r4, r5
 800d412:	d101      	bne.n	800d418 <__sfputs_r+0x12>
 800d414:	2000      	movs	r0, #0
 800d416:	e007      	b.n	800d428 <__sfputs_r+0x22>
 800d418:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d41c:	463a      	mov	r2, r7
 800d41e:	4630      	mov	r0, r6
 800d420:	f7ff ffda 	bl	800d3d8 <__sfputc_r>
 800d424:	1c43      	adds	r3, r0, #1
 800d426:	d1f3      	bne.n	800d410 <__sfputs_r+0xa>
 800d428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d42c <_vfiprintf_r>:
 800d42c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d430:	460d      	mov	r5, r1
 800d432:	b09d      	sub	sp, #116	; 0x74
 800d434:	4614      	mov	r4, r2
 800d436:	4698      	mov	r8, r3
 800d438:	4606      	mov	r6, r0
 800d43a:	b118      	cbz	r0, 800d444 <_vfiprintf_r+0x18>
 800d43c:	6a03      	ldr	r3, [r0, #32]
 800d43e:	b90b      	cbnz	r3, 800d444 <_vfiprintf_r+0x18>
 800d440:	f7ff fcd4 	bl	800cdec <__sinit>
 800d444:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d446:	07d9      	lsls	r1, r3, #31
 800d448:	d405      	bmi.n	800d456 <_vfiprintf_r+0x2a>
 800d44a:	89ab      	ldrh	r3, [r5, #12]
 800d44c:	059a      	lsls	r2, r3, #22
 800d44e:	d402      	bmi.n	800d456 <_vfiprintf_r+0x2a>
 800d450:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d452:	f7ff fe0d 	bl	800d070 <__retarget_lock_acquire_recursive>
 800d456:	89ab      	ldrh	r3, [r5, #12]
 800d458:	071b      	lsls	r3, r3, #28
 800d45a:	d501      	bpl.n	800d460 <_vfiprintf_r+0x34>
 800d45c:	692b      	ldr	r3, [r5, #16]
 800d45e:	b99b      	cbnz	r3, 800d488 <_vfiprintf_r+0x5c>
 800d460:	4629      	mov	r1, r5
 800d462:	4630      	mov	r0, r6
 800d464:	f000 fb3c 	bl	800dae0 <__swsetup_r>
 800d468:	b170      	cbz	r0, 800d488 <_vfiprintf_r+0x5c>
 800d46a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d46c:	07dc      	lsls	r4, r3, #31
 800d46e:	d504      	bpl.n	800d47a <_vfiprintf_r+0x4e>
 800d470:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d474:	b01d      	add	sp, #116	; 0x74
 800d476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d47a:	89ab      	ldrh	r3, [r5, #12]
 800d47c:	0598      	lsls	r0, r3, #22
 800d47e:	d4f7      	bmi.n	800d470 <_vfiprintf_r+0x44>
 800d480:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d482:	f7ff fdf6 	bl	800d072 <__retarget_lock_release_recursive>
 800d486:	e7f3      	b.n	800d470 <_vfiprintf_r+0x44>
 800d488:	2300      	movs	r3, #0
 800d48a:	9309      	str	r3, [sp, #36]	; 0x24
 800d48c:	2320      	movs	r3, #32
 800d48e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d492:	f8cd 800c 	str.w	r8, [sp, #12]
 800d496:	2330      	movs	r3, #48	; 0x30
 800d498:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d64c <_vfiprintf_r+0x220>
 800d49c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d4a0:	f04f 0901 	mov.w	r9, #1
 800d4a4:	4623      	mov	r3, r4
 800d4a6:	469a      	mov	sl, r3
 800d4a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d4ac:	b10a      	cbz	r2, 800d4b2 <_vfiprintf_r+0x86>
 800d4ae:	2a25      	cmp	r2, #37	; 0x25
 800d4b0:	d1f9      	bne.n	800d4a6 <_vfiprintf_r+0x7a>
 800d4b2:	ebba 0b04 	subs.w	fp, sl, r4
 800d4b6:	d00b      	beq.n	800d4d0 <_vfiprintf_r+0xa4>
 800d4b8:	465b      	mov	r3, fp
 800d4ba:	4622      	mov	r2, r4
 800d4bc:	4629      	mov	r1, r5
 800d4be:	4630      	mov	r0, r6
 800d4c0:	f7ff ffa1 	bl	800d406 <__sfputs_r>
 800d4c4:	3001      	adds	r0, #1
 800d4c6:	f000 80a9 	beq.w	800d61c <_vfiprintf_r+0x1f0>
 800d4ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d4cc:	445a      	add	r2, fp
 800d4ce:	9209      	str	r2, [sp, #36]	; 0x24
 800d4d0:	f89a 3000 	ldrb.w	r3, [sl]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	f000 80a1 	beq.w	800d61c <_vfiprintf_r+0x1f0>
 800d4da:	2300      	movs	r3, #0
 800d4dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d4e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d4e4:	f10a 0a01 	add.w	sl, sl, #1
 800d4e8:	9304      	str	r3, [sp, #16]
 800d4ea:	9307      	str	r3, [sp, #28]
 800d4ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d4f0:	931a      	str	r3, [sp, #104]	; 0x68
 800d4f2:	4654      	mov	r4, sl
 800d4f4:	2205      	movs	r2, #5
 800d4f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4fa:	4854      	ldr	r0, [pc, #336]	; (800d64c <_vfiprintf_r+0x220>)
 800d4fc:	f7f2 fee0 	bl	80002c0 <memchr>
 800d500:	9a04      	ldr	r2, [sp, #16]
 800d502:	b9d8      	cbnz	r0, 800d53c <_vfiprintf_r+0x110>
 800d504:	06d1      	lsls	r1, r2, #27
 800d506:	bf44      	itt	mi
 800d508:	2320      	movmi	r3, #32
 800d50a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d50e:	0713      	lsls	r3, r2, #28
 800d510:	bf44      	itt	mi
 800d512:	232b      	movmi	r3, #43	; 0x2b
 800d514:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d518:	f89a 3000 	ldrb.w	r3, [sl]
 800d51c:	2b2a      	cmp	r3, #42	; 0x2a
 800d51e:	d015      	beq.n	800d54c <_vfiprintf_r+0x120>
 800d520:	9a07      	ldr	r2, [sp, #28]
 800d522:	4654      	mov	r4, sl
 800d524:	2000      	movs	r0, #0
 800d526:	f04f 0c0a 	mov.w	ip, #10
 800d52a:	4621      	mov	r1, r4
 800d52c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d530:	3b30      	subs	r3, #48	; 0x30
 800d532:	2b09      	cmp	r3, #9
 800d534:	d94d      	bls.n	800d5d2 <_vfiprintf_r+0x1a6>
 800d536:	b1b0      	cbz	r0, 800d566 <_vfiprintf_r+0x13a>
 800d538:	9207      	str	r2, [sp, #28]
 800d53a:	e014      	b.n	800d566 <_vfiprintf_r+0x13a>
 800d53c:	eba0 0308 	sub.w	r3, r0, r8
 800d540:	fa09 f303 	lsl.w	r3, r9, r3
 800d544:	4313      	orrs	r3, r2
 800d546:	9304      	str	r3, [sp, #16]
 800d548:	46a2      	mov	sl, r4
 800d54a:	e7d2      	b.n	800d4f2 <_vfiprintf_r+0xc6>
 800d54c:	9b03      	ldr	r3, [sp, #12]
 800d54e:	1d19      	adds	r1, r3, #4
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	9103      	str	r1, [sp, #12]
 800d554:	2b00      	cmp	r3, #0
 800d556:	bfbb      	ittet	lt
 800d558:	425b      	neglt	r3, r3
 800d55a:	f042 0202 	orrlt.w	r2, r2, #2
 800d55e:	9307      	strge	r3, [sp, #28]
 800d560:	9307      	strlt	r3, [sp, #28]
 800d562:	bfb8      	it	lt
 800d564:	9204      	strlt	r2, [sp, #16]
 800d566:	7823      	ldrb	r3, [r4, #0]
 800d568:	2b2e      	cmp	r3, #46	; 0x2e
 800d56a:	d10c      	bne.n	800d586 <_vfiprintf_r+0x15a>
 800d56c:	7863      	ldrb	r3, [r4, #1]
 800d56e:	2b2a      	cmp	r3, #42	; 0x2a
 800d570:	d134      	bne.n	800d5dc <_vfiprintf_r+0x1b0>
 800d572:	9b03      	ldr	r3, [sp, #12]
 800d574:	1d1a      	adds	r2, r3, #4
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	9203      	str	r2, [sp, #12]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	bfb8      	it	lt
 800d57e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d582:	3402      	adds	r4, #2
 800d584:	9305      	str	r3, [sp, #20]
 800d586:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d65c <_vfiprintf_r+0x230>
 800d58a:	7821      	ldrb	r1, [r4, #0]
 800d58c:	2203      	movs	r2, #3
 800d58e:	4650      	mov	r0, sl
 800d590:	f7f2 fe96 	bl	80002c0 <memchr>
 800d594:	b138      	cbz	r0, 800d5a6 <_vfiprintf_r+0x17a>
 800d596:	9b04      	ldr	r3, [sp, #16]
 800d598:	eba0 000a 	sub.w	r0, r0, sl
 800d59c:	2240      	movs	r2, #64	; 0x40
 800d59e:	4082      	lsls	r2, r0
 800d5a0:	4313      	orrs	r3, r2
 800d5a2:	3401      	adds	r4, #1
 800d5a4:	9304      	str	r3, [sp, #16]
 800d5a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5aa:	4829      	ldr	r0, [pc, #164]	; (800d650 <_vfiprintf_r+0x224>)
 800d5ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d5b0:	2206      	movs	r2, #6
 800d5b2:	f7f2 fe85 	bl	80002c0 <memchr>
 800d5b6:	2800      	cmp	r0, #0
 800d5b8:	d03f      	beq.n	800d63a <_vfiprintf_r+0x20e>
 800d5ba:	4b26      	ldr	r3, [pc, #152]	; (800d654 <_vfiprintf_r+0x228>)
 800d5bc:	bb1b      	cbnz	r3, 800d606 <_vfiprintf_r+0x1da>
 800d5be:	9b03      	ldr	r3, [sp, #12]
 800d5c0:	3307      	adds	r3, #7
 800d5c2:	f023 0307 	bic.w	r3, r3, #7
 800d5c6:	3308      	adds	r3, #8
 800d5c8:	9303      	str	r3, [sp, #12]
 800d5ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5cc:	443b      	add	r3, r7
 800d5ce:	9309      	str	r3, [sp, #36]	; 0x24
 800d5d0:	e768      	b.n	800d4a4 <_vfiprintf_r+0x78>
 800d5d2:	fb0c 3202 	mla	r2, ip, r2, r3
 800d5d6:	460c      	mov	r4, r1
 800d5d8:	2001      	movs	r0, #1
 800d5da:	e7a6      	b.n	800d52a <_vfiprintf_r+0xfe>
 800d5dc:	2300      	movs	r3, #0
 800d5de:	3401      	adds	r4, #1
 800d5e0:	9305      	str	r3, [sp, #20]
 800d5e2:	4619      	mov	r1, r3
 800d5e4:	f04f 0c0a 	mov.w	ip, #10
 800d5e8:	4620      	mov	r0, r4
 800d5ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d5ee:	3a30      	subs	r2, #48	; 0x30
 800d5f0:	2a09      	cmp	r2, #9
 800d5f2:	d903      	bls.n	800d5fc <_vfiprintf_r+0x1d0>
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d0c6      	beq.n	800d586 <_vfiprintf_r+0x15a>
 800d5f8:	9105      	str	r1, [sp, #20]
 800d5fa:	e7c4      	b.n	800d586 <_vfiprintf_r+0x15a>
 800d5fc:	fb0c 2101 	mla	r1, ip, r1, r2
 800d600:	4604      	mov	r4, r0
 800d602:	2301      	movs	r3, #1
 800d604:	e7f0      	b.n	800d5e8 <_vfiprintf_r+0x1bc>
 800d606:	ab03      	add	r3, sp, #12
 800d608:	9300      	str	r3, [sp, #0]
 800d60a:	462a      	mov	r2, r5
 800d60c:	4b12      	ldr	r3, [pc, #72]	; (800d658 <_vfiprintf_r+0x22c>)
 800d60e:	a904      	add	r1, sp, #16
 800d610:	4630      	mov	r0, r6
 800d612:	f3af 8000 	nop.w
 800d616:	4607      	mov	r7, r0
 800d618:	1c78      	adds	r0, r7, #1
 800d61a:	d1d6      	bne.n	800d5ca <_vfiprintf_r+0x19e>
 800d61c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d61e:	07d9      	lsls	r1, r3, #31
 800d620:	d405      	bmi.n	800d62e <_vfiprintf_r+0x202>
 800d622:	89ab      	ldrh	r3, [r5, #12]
 800d624:	059a      	lsls	r2, r3, #22
 800d626:	d402      	bmi.n	800d62e <_vfiprintf_r+0x202>
 800d628:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d62a:	f7ff fd22 	bl	800d072 <__retarget_lock_release_recursive>
 800d62e:	89ab      	ldrh	r3, [r5, #12]
 800d630:	065b      	lsls	r3, r3, #25
 800d632:	f53f af1d 	bmi.w	800d470 <_vfiprintf_r+0x44>
 800d636:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d638:	e71c      	b.n	800d474 <_vfiprintf_r+0x48>
 800d63a:	ab03      	add	r3, sp, #12
 800d63c:	9300      	str	r3, [sp, #0]
 800d63e:	462a      	mov	r2, r5
 800d640:	4b05      	ldr	r3, [pc, #20]	; (800d658 <_vfiprintf_r+0x22c>)
 800d642:	a904      	add	r1, sp, #16
 800d644:	4630      	mov	r0, r6
 800d646:	f000 f879 	bl	800d73c <_printf_i>
 800d64a:	e7e4      	b.n	800d616 <_vfiprintf_r+0x1ea>
 800d64c:	080138a0 	.word	0x080138a0
 800d650:	080138aa 	.word	0x080138aa
 800d654:	00000000 	.word	0x00000000
 800d658:	0800d407 	.word	0x0800d407
 800d65c:	080138a6 	.word	0x080138a6

0800d660 <_printf_common>:
 800d660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d664:	4616      	mov	r6, r2
 800d666:	4699      	mov	r9, r3
 800d668:	688a      	ldr	r2, [r1, #8]
 800d66a:	690b      	ldr	r3, [r1, #16]
 800d66c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d670:	4293      	cmp	r3, r2
 800d672:	bfb8      	it	lt
 800d674:	4613      	movlt	r3, r2
 800d676:	6033      	str	r3, [r6, #0]
 800d678:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d67c:	4607      	mov	r7, r0
 800d67e:	460c      	mov	r4, r1
 800d680:	b10a      	cbz	r2, 800d686 <_printf_common+0x26>
 800d682:	3301      	adds	r3, #1
 800d684:	6033      	str	r3, [r6, #0]
 800d686:	6823      	ldr	r3, [r4, #0]
 800d688:	0699      	lsls	r1, r3, #26
 800d68a:	bf42      	ittt	mi
 800d68c:	6833      	ldrmi	r3, [r6, #0]
 800d68e:	3302      	addmi	r3, #2
 800d690:	6033      	strmi	r3, [r6, #0]
 800d692:	6825      	ldr	r5, [r4, #0]
 800d694:	f015 0506 	ands.w	r5, r5, #6
 800d698:	d106      	bne.n	800d6a8 <_printf_common+0x48>
 800d69a:	f104 0a19 	add.w	sl, r4, #25
 800d69e:	68e3      	ldr	r3, [r4, #12]
 800d6a0:	6832      	ldr	r2, [r6, #0]
 800d6a2:	1a9b      	subs	r3, r3, r2
 800d6a4:	42ab      	cmp	r3, r5
 800d6a6:	dc26      	bgt.n	800d6f6 <_printf_common+0x96>
 800d6a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d6ac:	1e13      	subs	r3, r2, #0
 800d6ae:	6822      	ldr	r2, [r4, #0]
 800d6b0:	bf18      	it	ne
 800d6b2:	2301      	movne	r3, #1
 800d6b4:	0692      	lsls	r2, r2, #26
 800d6b6:	d42b      	bmi.n	800d710 <_printf_common+0xb0>
 800d6b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d6bc:	4649      	mov	r1, r9
 800d6be:	4638      	mov	r0, r7
 800d6c0:	47c0      	blx	r8
 800d6c2:	3001      	adds	r0, #1
 800d6c4:	d01e      	beq.n	800d704 <_printf_common+0xa4>
 800d6c6:	6823      	ldr	r3, [r4, #0]
 800d6c8:	6922      	ldr	r2, [r4, #16]
 800d6ca:	f003 0306 	and.w	r3, r3, #6
 800d6ce:	2b04      	cmp	r3, #4
 800d6d0:	bf02      	ittt	eq
 800d6d2:	68e5      	ldreq	r5, [r4, #12]
 800d6d4:	6833      	ldreq	r3, [r6, #0]
 800d6d6:	1aed      	subeq	r5, r5, r3
 800d6d8:	68a3      	ldr	r3, [r4, #8]
 800d6da:	bf0c      	ite	eq
 800d6dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d6e0:	2500      	movne	r5, #0
 800d6e2:	4293      	cmp	r3, r2
 800d6e4:	bfc4      	itt	gt
 800d6e6:	1a9b      	subgt	r3, r3, r2
 800d6e8:	18ed      	addgt	r5, r5, r3
 800d6ea:	2600      	movs	r6, #0
 800d6ec:	341a      	adds	r4, #26
 800d6ee:	42b5      	cmp	r5, r6
 800d6f0:	d11a      	bne.n	800d728 <_printf_common+0xc8>
 800d6f2:	2000      	movs	r0, #0
 800d6f4:	e008      	b.n	800d708 <_printf_common+0xa8>
 800d6f6:	2301      	movs	r3, #1
 800d6f8:	4652      	mov	r2, sl
 800d6fa:	4649      	mov	r1, r9
 800d6fc:	4638      	mov	r0, r7
 800d6fe:	47c0      	blx	r8
 800d700:	3001      	adds	r0, #1
 800d702:	d103      	bne.n	800d70c <_printf_common+0xac>
 800d704:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d70c:	3501      	adds	r5, #1
 800d70e:	e7c6      	b.n	800d69e <_printf_common+0x3e>
 800d710:	18e1      	adds	r1, r4, r3
 800d712:	1c5a      	adds	r2, r3, #1
 800d714:	2030      	movs	r0, #48	; 0x30
 800d716:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d71a:	4422      	add	r2, r4
 800d71c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d720:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d724:	3302      	adds	r3, #2
 800d726:	e7c7      	b.n	800d6b8 <_printf_common+0x58>
 800d728:	2301      	movs	r3, #1
 800d72a:	4622      	mov	r2, r4
 800d72c:	4649      	mov	r1, r9
 800d72e:	4638      	mov	r0, r7
 800d730:	47c0      	blx	r8
 800d732:	3001      	adds	r0, #1
 800d734:	d0e6      	beq.n	800d704 <_printf_common+0xa4>
 800d736:	3601      	adds	r6, #1
 800d738:	e7d9      	b.n	800d6ee <_printf_common+0x8e>
	...

0800d73c <_printf_i>:
 800d73c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d740:	7e0f      	ldrb	r7, [r1, #24]
 800d742:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d744:	2f78      	cmp	r7, #120	; 0x78
 800d746:	4691      	mov	r9, r2
 800d748:	4680      	mov	r8, r0
 800d74a:	460c      	mov	r4, r1
 800d74c:	469a      	mov	sl, r3
 800d74e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d752:	d807      	bhi.n	800d764 <_printf_i+0x28>
 800d754:	2f62      	cmp	r7, #98	; 0x62
 800d756:	d80a      	bhi.n	800d76e <_printf_i+0x32>
 800d758:	2f00      	cmp	r7, #0
 800d75a:	f000 80d4 	beq.w	800d906 <_printf_i+0x1ca>
 800d75e:	2f58      	cmp	r7, #88	; 0x58
 800d760:	f000 80c0 	beq.w	800d8e4 <_printf_i+0x1a8>
 800d764:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d768:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d76c:	e03a      	b.n	800d7e4 <_printf_i+0xa8>
 800d76e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d772:	2b15      	cmp	r3, #21
 800d774:	d8f6      	bhi.n	800d764 <_printf_i+0x28>
 800d776:	a101      	add	r1, pc, #4	; (adr r1, 800d77c <_printf_i+0x40>)
 800d778:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d77c:	0800d7d5 	.word	0x0800d7d5
 800d780:	0800d7e9 	.word	0x0800d7e9
 800d784:	0800d765 	.word	0x0800d765
 800d788:	0800d765 	.word	0x0800d765
 800d78c:	0800d765 	.word	0x0800d765
 800d790:	0800d765 	.word	0x0800d765
 800d794:	0800d7e9 	.word	0x0800d7e9
 800d798:	0800d765 	.word	0x0800d765
 800d79c:	0800d765 	.word	0x0800d765
 800d7a0:	0800d765 	.word	0x0800d765
 800d7a4:	0800d765 	.word	0x0800d765
 800d7a8:	0800d8ed 	.word	0x0800d8ed
 800d7ac:	0800d815 	.word	0x0800d815
 800d7b0:	0800d8a7 	.word	0x0800d8a7
 800d7b4:	0800d765 	.word	0x0800d765
 800d7b8:	0800d765 	.word	0x0800d765
 800d7bc:	0800d90f 	.word	0x0800d90f
 800d7c0:	0800d765 	.word	0x0800d765
 800d7c4:	0800d815 	.word	0x0800d815
 800d7c8:	0800d765 	.word	0x0800d765
 800d7cc:	0800d765 	.word	0x0800d765
 800d7d0:	0800d8af 	.word	0x0800d8af
 800d7d4:	682b      	ldr	r3, [r5, #0]
 800d7d6:	1d1a      	adds	r2, r3, #4
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	602a      	str	r2, [r5, #0]
 800d7dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d7e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d7e4:	2301      	movs	r3, #1
 800d7e6:	e09f      	b.n	800d928 <_printf_i+0x1ec>
 800d7e8:	6820      	ldr	r0, [r4, #0]
 800d7ea:	682b      	ldr	r3, [r5, #0]
 800d7ec:	0607      	lsls	r7, r0, #24
 800d7ee:	f103 0104 	add.w	r1, r3, #4
 800d7f2:	6029      	str	r1, [r5, #0]
 800d7f4:	d501      	bpl.n	800d7fa <_printf_i+0xbe>
 800d7f6:	681e      	ldr	r6, [r3, #0]
 800d7f8:	e003      	b.n	800d802 <_printf_i+0xc6>
 800d7fa:	0646      	lsls	r6, r0, #25
 800d7fc:	d5fb      	bpl.n	800d7f6 <_printf_i+0xba>
 800d7fe:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d802:	2e00      	cmp	r6, #0
 800d804:	da03      	bge.n	800d80e <_printf_i+0xd2>
 800d806:	232d      	movs	r3, #45	; 0x2d
 800d808:	4276      	negs	r6, r6
 800d80a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d80e:	485a      	ldr	r0, [pc, #360]	; (800d978 <_printf_i+0x23c>)
 800d810:	230a      	movs	r3, #10
 800d812:	e012      	b.n	800d83a <_printf_i+0xfe>
 800d814:	682b      	ldr	r3, [r5, #0]
 800d816:	6820      	ldr	r0, [r4, #0]
 800d818:	1d19      	adds	r1, r3, #4
 800d81a:	6029      	str	r1, [r5, #0]
 800d81c:	0605      	lsls	r5, r0, #24
 800d81e:	d501      	bpl.n	800d824 <_printf_i+0xe8>
 800d820:	681e      	ldr	r6, [r3, #0]
 800d822:	e002      	b.n	800d82a <_printf_i+0xee>
 800d824:	0641      	lsls	r1, r0, #25
 800d826:	d5fb      	bpl.n	800d820 <_printf_i+0xe4>
 800d828:	881e      	ldrh	r6, [r3, #0]
 800d82a:	4853      	ldr	r0, [pc, #332]	; (800d978 <_printf_i+0x23c>)
 800d82c:	2f6f      	cmp	r7, #111	; 0x6f
 800d82e:	bf0c      	ite	eq
 800d830:	2308      	moveq	r3, #8
 800d832:	230a      	movne	r3, #10
 800d834:	2100      	movs	r1, #0
 800d836:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d83a:	6865      	ldr	r5, [r4, #4]
 800d83c:	60a5      	str	r5, [r4, #8]
 800d83e:	2d00      	cmp	r5, #0
 800d840:	bfa2      	ittt	ge
 800d842:	6821      	ldrge	r1, [r4, #0]
 800d844:	f021 0104 	bicge.w	r1, r1, #4
 800d848:	6021      	strge	r1, [r4, #0]
 800d84a:	b90e      	cbnz	r6, 800d850 <_printf_i+0x114>
 800d84c:	2d00      	cmp	r5, #0
 800d84e:	d04b      	beq.n	800d8e8 <_printf_i+0x1ac>
 800d850:	4615      	mov	r5, r2
 800d852:	fbb6 f1f3 	udiv	r1, r6, r3
 800d856:	fb03 6711 	mls	r7, r3, r1, r6
 800d85a:	5dc7      	ldrb	r7, [r0, r7]
 800d85c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d860:	4637      	mov	r7, r6
 800d862:	42bb      	cmp	r3, r7
 800d864:	460e      	mov	r6, r1
 800d866:	d9f4      	bls.n	800d852 <_printf_i+0x116>
 800d868:	2b08      	cmp	r3, #8
 800d86a:	d10b      	bne.n	800d884 <_printf_i+0x148>
 800d86c:	6823      	ldr	r3, [r4, #0]
 800d86e:	07de      	lsls	r6, r3, #31
 800d870:	d508      	bpl.n	800d884 <_printf_i+0x148>
 800d872:	6923      	ldr	r3, [r4, #16]
 800d874:	6861      	ldr	r1, [r4, #4]
 800d876:	4299      	cmp	r1, r3
 800d878:	bfde      	ittt	le
 800d87a:	2330      	movle	r3, #48	; 0x30
 800d87c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d880:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d884:	1b52      	subs	r2, r2, r5
 800d886:	6122      	str	r2, [r4, #16]
 800d888:	f8cd a000 	str.w	sl, [sp]
 800d88c:	464b      	mov	r3, r9
 800d88e:	aa03      	add	r2, sp, #12
 800d890:	4621      	mov	r1, r4
 800d892:	4640      	mov	r0, r8
 800d894:	f7ff fee4 	bl	800d660 <_printf_common>
 800d898:	3001      	adds	r0, #1
 800d89a:	d14a      	bne.n	800d932 <_printf_i+0x1f6>
 800d89c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d8a0:	b004      	add	sp, #16
 800d8a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8a6:	6823      	ldr	r3, [r4, #0]
 800d8a8:	f043 0320 	orr.w	r3, r3, #32
 800d8ac:	6023      	str	r3, [r4, #0]
 800d8ae:	4833      	ldr	r0, [pc, #204]	; (800d97c <_printf_i+0x240>)
 800d8b0:	2778      	movs	r7, #120	; 0x78
 800d8b2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d8b6:	6823      	ldr	r3, [r4, #0]
 800d8b8:	6829      	ldr	r1, [r5, #0]
 800d8ba:	061f      	lsls	r7, r3, #24
 800d8bc:	f851 6b04 	ldr.w	r6, [r1], #4
 800d8c0:	d402      	bmi.n	800d8c8 <_printf_i+0x18c>
 800d8c2:	065f      	lsls	r7, r3, #25
 800d8c4:	bf48      	it	mi
 800d8c6:	b2b6      	uxthmi	r6, r6
 800d8c8:	07df      	lsls	r7, r3, #31
 800d8ca:	bf48      	it	mi
 800d8cc:	f043 0320 	orrmi.w	r3, r3, #32
 800d8d0:	6029      	str	r1, [r5, #0]
 800d8d2:	bf48      	it	mi
 800d8d4:	6023      	strmi	r3, [r4, #0]
 800d8d6:	b91e      	cbnz	r6, 800d8e0 <_printf_i+0x1a4>
 800d8d8:	6823      	ldr	r3, [r4, #0]
 800d8da:	f023 0320 	bic.w	r3, r3, #32
 800d8de:	6023      	str	r3, [r4, #0]
 800d8e0:	2310      	movs	r3, #16
 800d8e2:	e7a7      	b.n	800d834 <_printf_i+0xf8>
 800d8e4:	4824      	ldr	r0, [pc, #144]	; (800d978 <_printf_i+0x23c>)
 800d8e6:	e7e4      	b.n	800d8b2 <_printf_i+0x176>
 800d8e8:	4615      	mov	r5, r2
 800d8ea:	e7bd      	b.n	800d868 <_printf_i+0x12c>
 800d8ec:	682b      	ldr	r3, [r5, #0]
 800d8ee:	6826      	ldr	r6, [r4, #0]
 800d8f0:	6961      	ldr	r1, [r4, #20]
 800d8f2:	1d18      	adds	r0, r3, #4
 800d8f4:	6028      	str	r0, [r5, #0]
 800d8f6:	0635      	lsls	r5, r6, #24
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	d501      	bpl.n	800d900 <_printf_i+0x1c4>
 800d8fc:	6019      	str	r1, [r3, #0]
 800d8fe:	e002      	b.n	800d906 <_printf_i+0x1ca>
 800d900:	0670      	lsls	r0, r6, #25
 800d902:	d5fb      	bpl.n	800d8fc <_printf_i+0x1c0>
 800d904:	8019      	strh	r1, [r3, #0]
 800d906:	2300      	movs	r3, #0
 800d908:	6123      	str	r3, [r4, #16]
 800d90a:	4615      	mov	r5, r2
 800d90c:	e7bc      	b.n	800d888 <_printf_i+0x14c>
 800d90e:	682b      	ldr	r3, [r5, #0]
 800d910:	1d1a      	adds	r2, r3, #4
 800d912:	602a      	str	r2, [r5, #0]
 800d914:	681d      	ldr	r5, [r3, #0]
 800d916:	6862      	ldr	r2, [r4, #4]
 800d918:	2100      	movs	r1, #0
 800d91a:	4628      	mov	r0, r5
 800d91c:	f7f2 fcd0 	bl	80002c0 <memchr>
 800d920:	b108      	cbz	r0, 800d926 <_printf_i+0x1ea>
 800d922:	1b40      	subs	r0, r0, r5
 800d924:	6060      	str	r0, [r4, #4]
 800d926:	6863      	ldr	r3, [r4, #4]
 800d928:	6123      	str	r3, [r4, #16]
 800d92a:	2300      	movs	r3, #0
 800d92c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d930:	e7aa      	b.n	800d888 <_printf_i+0x14c>
 800d932:	6923      	ldr	r3, [r4, #16]
 800d934:	462a      	mov	r2, r5
 800d936:	4649      	mov	r1, r9
 800d938:	4640      	mov	r0, r8
 800d93a:	47d0      	blx	sl
 800d93c:	3001      	adds	r0, #1
 800d93e:	d0ad      	beq.n	800d89c <_printf_i+0x160>
 800d940:	6823      	ldr	r3, [r4, #0]
 800d942:	079b      	lsls	r3, r3, #30
 800d944:	d413      	bmi.n	800d96e <_printf_i+0x232>
 800d946:	68e0      	ldr	r0, [r4, #12]
 800d948:	9b03      	ldr	r3, [sp, #12]
 800d94a:	4298      	cmp	r0, r3
 800d94c:	bfb8      	it	lt
 800d94e:	4618      	movlt	r0, r3
 800d950:	e7a6      	b.n	800d8a0 <_printf_i+0x164>
 800d952:	2301      	movs	r3, #1
 800d954:	4632      	mov	r2, r6
 800d956:	4649      	mov	r1, r9
 800d958:	4640      	mov	r0, r8
 800d95a:	47d0      	blx	sl
 800d95c:	3001      	adds	r0, #1
 800d95e:	d09d      	beq.n	800d89c <_printf_i+0x160>
 800d960:	3501      	adds	r5, #1
 800d962:	68e3      	ldr	r3, [r4, #12]
 800d964:	9903      	ldr	r1, [sp, #12]
 800d966:	1a5b      	subs	r3, r3, r1
 800d968:	42ab      	cmp	r3, r5
 800d96a:	dcf2      	bgt.n	800d952 <_printf_i+0x216>
 800d96c:	e7eb      	b.n	800d946 <_printf_i+0x20a>
 800d96e:	2500      	movs	r5, #0
 800d970:	f104 0619 	add.w	r6, r4, #25
 800d974:	e7f5      	b.n	800d962 <_printf_i+0x226>
 800d976:	bf00      	nop
 800d978:	080138b1 	.word	0x080138b1
 800d97c:	080138c2 	.word	0x080138c2

0800d980 <__sread>:
 800d980:	b510      	push	{r4, lr}
 800d982:	460c      	mov	r4, r1
 800d984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d988:	f000 f9dc 	bl	800dd44 <_read_r>
 800d98c:	2800      	cmp	r0, #0
 800d98e:	bfab      	itete	ge
 800d990:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d992:	89a3      	ldrhlt	r3, [r4, #12]
 800d994:	181b      	addge	r3, r3, r0
 800d996:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d99a:	bfac      	ite	ge
 800d99c:	6563      	strge	r3, [r4, #84]	; 0x54
 800d99e:	81a3      	strhlt	r3, [r4, #12]
 800d9a0:	bd10      	pop	{r4, pc}

0800d9a2 <__swrite>:
 800d9a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9a6:	461f      	mov	r7, r3
 800d9a8:	898b      	ldrh	r3, [r1, #12]
 800d9aa:	05db      	lsls	r3, r3, #23
 800d9ac:	4605      	mov	r5, r0
 800d9ae:	460c      	mov	r4, r1
 800d9b0:	4616      	mov	r6, r2
 800d9b2:	d505      	bpl.n	800d9c0 <__swrite+0x1e>
 800d9b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9b8:	2302      	movs	r3, #2
 800d9ba:	2200      	movs	r2, #0
 800d9bc:	f000 f9b0 	bl	800dd20 <_lseek_r>
 800d9c0:	89a3      	ldrh	r3, [r4, #12]
 800d9c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d9c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d9ca:	81a3      	strh	r3, [r4, #12]
 800d9cc:	4632      	mov	r2, r6
 800d9ce:	463b      	mov	r3, r7
 800d9d0:	4628      	mov	r0, r5
 800d9d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d9d6:	f000 b9c7 	b.w	800dd68 <_write_r>

0800d9da <__sseek>:
 800d9da:	b510      	push	{r4, lr}
 800d9dc:	460c      	mov	r4, r1
 800d9de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9e2:	f000 f99d 	bl	800dd20 <_lseek_r>
 800d9e6:	1c43      	adds	r3, r0, #1
 800d9e8:	89a3      	ldrh	r3, [r4, #12]
 800d9ea:	bf15      	itete	ne
 800d9ec:	6560      	strne	r0, [r4, #84]	; 0x54
 800d9ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d9f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d9f6:	81a3      	strheq	r3, [r4, #12]
 800d9f8:	bf18      	it	ne
 800d9fa:	81a3      	strhne	r3, [r4, #12]
 800d9fc:	bd10      	pop	{r4, pc}

0800d9fe <__sclose>:
 800d9fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da02:	f000 b95b 	b.w	800dcbc <_close_r>

0800da06 <_realloc_r>:
 800da06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da0a:	4680      	mov	r8, r0
 800da0c:	4614      	mov	r4, r2
 800da0e:	460e      	mov	r6, r1
 800da10:	b921      	cbnz	r1, 800da1c <_realloc_r+0x16>
 800da12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da16:	4611      	mov	r1, r2
 800da18:	f7ff b820 	b.w	800ca5c <_malloc_r>
 800da1c:	b92a      	cbnz	r2, 800da2a <_realloc_r+0x24>
 800da1e:	f7ff fb37 	bl	800d090 <_free_r>
 800da22:	4625      	mov	r5, r4
 800da24:	4628      	mov	r0, r5
 800da26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da2a:	f000 f9af 	bl	800dd8c <_malloc_usable_size_r>
 800da2e:	4284      	cmp	r4, r0
 800da30:	4607      	mov	r7, r0
 800da32:	d802      	bhi.n	800da3a <_realloc_r+0x34>
 800da34:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800da38:	d812      	bhi.n	800da60 <_realloc_r+0x5a>
 800da3a:	4621      	mov	r1, r4
 800da3c:	4640      	mov	r0, r8
 800da3e:	f7ff f80d 	bl	800ca5c <_malloc_r>
 800da42:	4605      	mov	r5, r0
 800da44:	2800      	cmp	r0, #0
 800da46:	d0ed      	beq.n	800da24 <_realloc_r+0x1e>
 800da48:	42bc      	cmp	r4, r7
 800da4a:	4622      	mov	r2, r4
 800da4c:	4631      	mov	r1, r6
 800da4e:	bf28      	it	cs
 800da50:	463a      	movcs	r2, r7
 800da52:	f7ff fb0f 	bl	800d074 <memcpy>
 800da56:	4631      	mov	r1, r6
 800da58:	4640      	mov	r0, r8
 800da5a:	f7ff fb19 	bl	800d090 <_free_r>
 800da5e:	e7e1      	b.n	800da24 <_realloc_r+0x1e>
 800da60:	4635      	mov	r5, r6
 800da62:	e7df      	b.n	800da24 <_realloc_r+0x1e>

0800da64 <__swbuf_r>:
 800da64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da66:	460e      	mov	r6, r1
 800da68:	4614      	mov	r4, r2
 800da6a:	4605      	mov	r5, r0
 800da6c:	b118      	cbz	r0, 800da76 <__swbuf_r+0x12>
 800da6e:	6a03      	ldr	r3, [r0, #32]
 800da70:	b90b      	cbnz	r3, 800da76 <__swbuf_r+0x12>
 800da72:	f7ff f9bb 	bl	800cdec <__sinit>
 800da76:	69a3      	ldr	r3, [r4, #24]
 800da78:	60a3      	str	r3, [r4, #8]
 800da7a:	89a3      	ldrh	r3, [r4, #12]
 800da7c:	071a      	lsls	r2, r3, #28
 800da7e:	d525      	bpl.n	800dacc <__swbuf_r+0x68>
 800da80:	6923      	ldr	r3, [r4, #16]
 800da82:	b31b      	cbz	r3, 800dacc <__swbuf_r+0x68>
 800da84:	6823      	ldr	r3, [r4, #0]
 800da86:	6922      	ldr	r2, [r4, #16]
 800da88:	1a98      	subs	r0, r3, r2
 800da8a:	6963      	ldr	r3, [r4, #20]
 800da8c:	b2f6      	uxtb	r6, r6
 800da8e:	4283      	cmp	r3, r0
 800da90:	4637      	mov	r7, r6
 800da92:	dc04      	bgt.n	800da9e <__swbuf_r+0x3a>
 800da94:	4621      	mov	r1, r4
 800da96:	4628      	mov	r0, r5
 800da98:	f7ff f8e6 	bl	800cc68 <_fflush_r>
 800da9c:	b9e0      	cbnz	r0, 800dad8 <__swbuf_r+0x74>
 800da9e:	68a3      	ldr	r3, [r4, #8]
 800daa0:	3b01      	subs	r3, #1
 800daa2:	60a3      	str	r3, [r4, #8]
 800daa4:	6823      	ldr	r3, [r4, #0]
 800daa6:	1c5a      	adds	r2, r3, #1
 800daa8:	6022      	str	r2, [r4, #0]
 800daaa:	701e      	strb	r6, [r3, #0]
 800daac:	6962      	ldr	r2, [r4, #20]
 800daae:	1c43      	adds	r3, r0, #1
 800dab0:	429a      	cmp	r2, r3
 800dab2:	d004      	beq.n	800dabe <__swbuf_r+0x5a>
 800dab4:	89a3      	ldrh	r3, [r4, #12]
 800dab6:	07db      	lsls	r3, r3, #31
 800dab8:	d506      	bpl.n	800dac8 <__swbuf_r+0x64>
 800daba:	2e0a      	cmp	r6, #10
 800dabc:	d104      	bne.n	800dac8 <__swbuf_r+0x64>
 800dabe:	4621      	mov	r1, r4
 800dac0:	4628      	mov	r0, r5
 800dac2:	f7ff f8d1 	bl	800cc68 <_fflush_r>
 800dac6:	b938      	cbnz	r0, 800dad8 <__swbuf_r+0x74>
 800dac8:	4638      	mov	r0, r7
 800daca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dacc:	4621      	mov	r1, r4
 800dace:	4628      	mov	r0, r5
 800dad0:	f000 f806 	bl	800dae0 <__swsetup_r>
 800dad4:	2800      	cmp	r0, #0
 800dad6:	d0d5      	beq.n	800da84 <__swbuf_r+0x20>
 800dad8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800dadc:	e7f4      	b.n	800dac8 <__swbuf_r+0x64>
	...

0800dae0 <__swsetup_r>:
 800dae0:	b538      	push	{r3, r4, r5, lr}
 800dae2:	4b2a      	ldr	r3, [pc, #168]	; (800db8c <__swsetup_r+0xac>)
 800dae4:	4605      	mov	r5, r0
 800dae6:	6818      	ldr	r0, [r3, #0]
 800dae8:	460c      	mov	r4, r1
 800daea:	b118      	cbz	r0, 800daf4 <__swsetup_r+0x14>
 800daec:	6a03      	ldr	r3, [r0, #32]
 800daee:	b90b      	cbnz	r3, 800daf4 <__swsetup_r+0x14>
 800daf0:	f7ff f97c 	bl	800cdec <__sinit>
 800daf4:	89a3      	ldrh	r3, [r4, #12]
 800daf6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dafa:	0718      	lsls	r0, r3, #28
 800dafc:	d422      	bmi.n	800db44 <__swsetup_r+0x64>
 800dafe:	06d9      	lsls	r1, r3, #27
 800db00:	d407      	bmi.n	800db12 <__swsetup_r+0x32>
 800db02:	2309      	movs	r3, #9
 800db04:	602b      	str	r3, [r5, #0]
 800db06:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800db0a:	81a3      	strh	r3, [r4, #12]
 800db0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800db10:	e034      	b.n	800db7c <__swsetup_r+0x9c>
 800db12:	0758      	lsls	r0, r3, #29
 800db14:	d512      	bpl.n	800db3c <__swsetup_r+0x5c>
 800db16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800db18:	b141      	cbz	r1, 800db2c <__swsetup_r+0x4c>
 800db1a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800db1e:	4299      	cmp	r1, r3
 800db20:	d002      	beq.n	800db28 <__swsetup_r+0x48>
 800db22:	4628      	mov	r0, r5
 800db24:	f7ff fab4 	bl	800d090 <_free_r>
 800db28:	2300      	movs	r3, #0
 800db2a:	6363      	str	r3, [r4, #52]	; 0x34
 800db2c:	89a3      	ldrh	r3, [r4, #12]
 800db2e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800db32:	81a3      	strh	r3, [r4, #12]
 800db34:	2300      	movs	r3, #0
 800db36:	6063      	str	r3, [r4, #4]
 800db38:	6923      	ldr	r3, [r4, #16]
 800db3a:	6023      	str	r3, [r4, #0]
 800db3c:	89a3      	ldrh	r3, [r4, #12]
 800db3e:	f043 0308 	orr.w	r3, r3, #8
 800db42:	81a3      	strh	r3, [r4, #12]
 800db44:	6923      	ldr	r3, [r4, #16]
 800db46:	b94b      	cbnz	r3, 800db5c <__swsetup_r+0x7c>
 800db48:	89a3      	ldrh	r3, [r4, #12]
 800db4a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800db4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800db52:	d003      	beq.n	800db5c <__swsetup_r+0x7c>
 800db54:	4621      	mov	r1, r4
 800db56:	4628      	mov	r0, r5
 800db58:	f000 f840 	bl	800dbdc <__smakebuf_r>
 800db5c:	89a0      	ldrh	r0, [r4, #12]
 800db5e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800db62:	f010 0301 	ands.w	r3, r0, #1
 800db66:	d00a      	beq.n	800db7e <__swsetup_r+0x9e>
 800db68:	2300      	movs	r3, #0
 800db6a:	60a3      	str	r3, [r4, #8]
 800db6c:	6963      	ldr	r3, [r4, #20]
 800db6e:	425b      	negs	r3, r3
 800db70:	61a3      	str	r3, [r4, #24]
 800db72:	6923      	ldr	r3, [r4, #16]
 800db74:	b943      	cbnz	r3, 800db88 <__swsetup_r+0xa8>
 800db76:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800db7a:	d1c4      	bne.n	800db06 <__swsetup_r+0x26>
 800db7c:	bd38      	pop	{r3, r4, r5, pc}
 800db7e:	0781      	lsls	r1, r0, #30
 800db80:	bf58      	it	pl
 800db82:	6963      	ldrpl	r3, [r4, #20]
 800db84:	60a3      	str	r3, [r4, #8]
 800db86:	e7f4      	b.n	800db72 <__swsetup_r+0x92>
 800db88:	2000      	movs	r0, #0
 800db8a:	e7f7      	b.n	800db7c <__swsetup_r+0x9c>
 800db8c:	200001e4 	.word	0x200001e4

0800db90 <__swhatbuf_r>:
 800db90:	b570      	push	{r4, r5, r6, lr}
 800db92:	460c      	mov	r4, r1
 800db94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db98:	2900      	cmp	r1, #0
 800db9a:	b096      	sub	sp, #88	; 0x58
 800db9c:	4615      	mov	r5, r2
 800db9e:	461e      	mov	r6, r3
 800dba0:	da0d      	bge.n	800dbbe <__swhatbuf_r+0x2e>
 800dba2:	89a3      	ldrh	r3, [r4, #12]
 800dba4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800dba8:	f04f 0100 	mov.w	r1, #0
 800dbac:	bf0c      	ite	eq
 800dbae:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800dbb2:	2340      	movne	r3, #64	; 0x40
 800dbb4:	2000      	movs	r0, #0
 800dbb6:	6031      	str	r1, [r6, #0]
 800dbb8:	602b      	str	r3, [r5, #0]
 800dbba:	b016      	add	sp, #88	; 0x58
 800dbbc:	bd70      	pop	{r4, r5, r6, pc}
 800dbbe:	466a      	mov	r2, sp
 800dbc0:	f000 f88c 	bl	800dcdc <_fstat_r>
 800dbc4:	2800      	cmp	r0, #0
 800dbc6:	dbec      	blt.n	800dba2 <__swhatbuf_r+0x12>
 800dbc8:	9901      	ldr	r1, [sp, #4]
 800dbca:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800dbce:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800dbd2:	4259      	negs	r1, r3
 800dbd4:	4159      	adcs	r1, r3
 800dbd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dbda:	e7eb      	b.n	800dbb4 <__swhatbuf_r+0x24>

0800dbdc <__smakebuf_r>:
 800dbdc:	898b      	ldrh	r3, [r1, #12]
 800dbde:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dbe0:	079d      	lsls	r5, r3, #30
 800dbe2:	4606      	mov	r6, r0
 800dbe4:	460c      	mov	r4, r1
 800dbe6:	d507      	bpl.n	800dbf8 <__smakebuf_r+0x1c>
 800dbe8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dbec:	6023      	str	r3, [r4, #0]
 800dbee:	6123      	str	r3, [r4, #16]
 800dbf0:	2301      	movs	r3, #1
 800dbf2:	6163      	str	r3, [r4, #20]
 800dbf4:	b002      	add	sp, #8
 800dbf6:	bd70      	pop	{r4, r5, r6, pc}
 800dbf8:	ab01      	add	r3, sp, #4
 800dbfa:	466a      	mov	r2, sp
 800dbfc:	f7ff ffc8 	bl	800db90 <__swhatbuf_r>
 800dc00:	9900      	ldr	r1, [sp, #0]
 800dc02:	4605      	mov	r5, r0
 800dc04:	4630      	mov	r0, r6
 800dc06:	f7fe ff29 	bl	800ca5c <_malloc_r>
 800dc0a:	b948      	cbnz	r0, 800dc20 <__smakebuf_r+0x44>
 800dc0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc10:	059a      	lsls	r2, r3, #22
 800dc12:	d4ef      	bmi.n	800dbf4 <__smakebuf_r+0x18>
 800dc14:	f023 0303 	bic.w	r3, r3, #3
 800dc18:	f043 0302 	orr.w	r3, r3, #2
 800dc1c:	81a3      	strh	r3, [r4, #12]
 800dc1e:	e7e3      	b.n	800dbe8 <__smakebuf_r+0xc>
 800dc20:	89a3      	ldrh	r3, [r4, #12]
 800dc22:	6020      	str	r0, [r4, #0]
 800dc24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc28:	81a3      	strh	r3, [r4, #12]
 800dc2a:	9b00      	ldr	r3, [sp, #0]
 800dc2c:	6163      	str	r3, [r4, #20]
 800dc2e:	9b01      	ldr	r3, [sp, #4]
 800dc30:	6120      	str	r0, [r4, #16]
 800dc32:	b15b      	cbz	r3, 800dc4c <__smakebuf_r+0x70>
 800dc34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dc38:	4630      	mov	r0, r6
 800dc3a:	f000 f861 	bl	800dd00 <_isatty_r>
 800dc3e:	b128      	cbz	r0, 800dc4c <__smakebuf_r+0x70>
 800dc40:	89a3      	ldrh	r3, [r4, #12]
 800dc42:	f023 0303 	bic.w	r3, r3, #3
 800dc46:	f043 0301 	orr.w	r3, r3, #1
 800dc4a:	81a3      	strh	r3, [r4, #12]
 800dc4c:	89a3      	ldrh	r3, [r4, #12]
 800dc4e:	431d      	orrs	r5, r3
 800dc50:	81a5      	strh	r5, [r4, #12]
 800dc52:	e7cf      	b.n	800dbf4 <__smakebuf_r+0x18>

0800dc54 <_putc_r>:
 800dc54:	b570      	push	{r4, r5, r6, lr}
 800dc56:	460d      	mov	r5, r1
 800dc58:	4614      	mov	r4, r2
 800dc5a:	4606      	mov	r6, r0
 800dc5c:	b118      	cbz	r0, 800dc66 <_putc_r+0x12>
 800dc5e:	6a03      	ldr	r3, [r0, #32]
 800dc60:	b90b      	cbnz	r3, 800dc66 <_putc_r+0x12>
 800dc62:	f7ff f8c3 	bl	800cdec <__sinit>
 800dc66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dc68:	07d8      	lsls	r0, r3, #31
 800dc6a:	d405      	bmi.n	800dc78 <_putc_r+0x24>
 800dc6c:	89a3      	ldrh	r3, [r4, #12]
 800dc6e:	0599      	lsls	r1, r3, #22
 800dc70:	d402      	bmi.n	800dc78 <_putc_r+0x24>
 800dc72:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dc74:	f7ff f9fc 	bl	800d070 <__retarget_lock_acquire_recursive>
 800dc78:	68a3      	ldr	r3, [r4, #8]
 800dc7a:	3b01      	subs	r3, #1
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	60a3      	str	r3, [r4, #8]
 800dc80:	da05      	bge.n	800dc8e <_putc_r+0x3a>
 800dc82:	69a2      	ldr	r2, [r4, #24]
 800dc84:	4293      	cmp	r3, r2
 800dc86:	db12      	blt.n	800dcae <_putc_r+0x5a>
 800dc88:	b2eb      	uxtb	r3, r5
 800dc8a:	2b0a      	cmp	r3, #10
 800dc8c:	d00f      	beq.n	800dcae <_putc_r+0x5a>
 800dc8e:	6823      	ldr	r3, [r4, #0]
 800dc90:	1c5a      	adds	r2, r3, #1
 800dc92:	6022      	str	r2, [r4, #0]
 800dc94:	701d      	strb	r5, [r3, #0]
 800dc96:	b2ed      	uxtb	r5, r5
 800dc98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dc9a:	07da      	lsls	r2, r3, #31
 800dc9c:	d405      	bmi.n	800dcaa <_putc_r+0x56>
 800dc9e:	89a3      	ldrh	r3, [r4, #12]
 800dca0:	059b      	lsls	r3, r3, #22
 800dca2:	d402      	bmi.n	800dcaa <_putc_r+0x56>
 800dca4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dca6:	f7ff f9e4 	bl	800d072 <__retarget_lock_release_recursive>
 800dcaa:	4628      	mov	r0, r5
 800dcac:	bd70      	pop	{r4, r5, r6, pc}
 800dcae:	4629      	mov	r1, r5
 800dcb0:	4622      	mov	r2, r4
 800dcb2:	4630      	mov	r0, r6
 800dcb4:	f7ff fed6 	bl	800da64 <__swbuf_r>
 800dcb8:	4605      	mov	r5, r0
 800dcba:	e7ed      	b.n	800dc98 <_putc_r+0x44>

0800dcbc <_close_r>:
 800dcbc:	b538      	push	{r3, r4, r5, lr}
 800dcbe:	4d06      	ldr	r5, [pc, #24]	; (800dcd8 <_close_r+0x1c>)
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	4604      	mov	r4, r0
 800dcc4:	4608      	mov	r0, r1
 800dcc6:	602b      	str	r3, [r5, #0]
 800dcc8:	f7f3 fa99 	bl	80011fe <_close>
 800dccc:	1c43      	adds	r3, r0, #1
 800dcce:	d102      	bne.n	800dcd6 <_close_r+0x1a>
 800dcd0:	682b      	ldr	r3, [r5, #0]
 800dcd2:	b103      	cbz	r3, 800dcd6 <_close_r+0x1a>
 800dcd4:	6023      	str	r3, [r4, #0]
 800dcd6:	bd38      	pop	{r3, r4, r5, pc}
 800dcd8:	200004bc 	.word	0x200004bc

0800dcdc <_fstat_r>:
 800dcdc:	b538      	push	{r3, r4, r5, lr}
 800dcde:	4d07      	ldr	r5, [pc, #28]	; (800dcfc <_fstat_r+0x20>)
 800dce0:	2300      	movs	r3, #0
 800dce2:	4604      	mov	r4, r0
 800dce4:	4608      	mov	r0, r1
 800dce6:	4611      	mov	r1, r2
 800dce8:	602b      	str	r3, [r5, #0]
 800dcea:	f7f3 fa94 	bl	8001216 <_fstat>
 800dcee:	1c43      	adds	r3, r0, #1
 800dcf0:	d102      	bne.n	800dcf8 <_fstat_r+0x1c>
 800dcf2:	682b      	ldr	r3, [r5, #0]
 800dcf4:	b103      	cbz	r3, 800dcf8 <_fstat_r+0x1c>
 800dcf6:	6023      	str	r3, [r4, #0]
 800dcf8:	bd38      	pop	{r3, r4, r5, pc}
 800dcfa:	bf00      	nop
 800dcfc:	200004bc 	.word	0x200004bc

0800dd00 <_isatty_r>:
 800dd00:	b538      	push	{r3, r4, r5, lr}
 800dd02:	4d06      	ldr	r5, [pc, #24]	; (800dd1c <_isatty_r+0x1c>)
 800dd04:	2300      	movs	r3, #0
 800dd06:	4604      	mov	r4, r0
 800dd08:	4608      	mov	r0, r1
 800dd0a:	602b      	str	r3, [r5, #0]
 800dd0c:	f7f3 fa93 	bl	8001236 <_isatty>
 800dd10:	1c43      	adds	r3, r0, #1
 800dd12:	d102      	bne.n	800dd1a <_isatty_r+0x1a>
 800dd14:	682b      	ldr	r3, [r5, #0]
 800dd16:	b103      	cbz	r3, 800dd1a <_isatty_r+0x1a>
 800dd18:	6023      	str	r3, [r4, #0]
 800dd1a:	bd38      	pop	{r3, r4, r5, pc}
 800dd1c:	200004bc 	.word	0x200004bc

0800dd20 <_lseek_r>:
 800dd20:	b538      	push	{r3, r4, r5, lr}
 800dd22:	4d07      	ldr	r5, [pc, #28]	; (800dd40 <_lseek_r+0x20>)
 800dd24:	4604      	mov	r4, r0
 800dd26:	4608      	mov	r0, r1
 800dd28:	4611      	mov	r1, r2
 800dd2a:	2200      	movs	r2, #0
 800dd2c:	602a      	str	r2, [r5, #0]
 800dd2e:	461a      	mov	r2, r3
 800dd30:	f7f3 fa8c 	bl	800124c <_lseek>
 800dd34:	1c43      	adds	r3, r0, #1
 800dd36:	d102      	bne.n	800dd3e <_lseek_r+0x1e>
 800dd38:	682b      	ldr	r3, [r5, #0]
 800dd3a:	b103      	cbz	r3, 800dd3e <_lseek_r+0x1e>
 800dd3c:	6023      	str	r3, [r4, #0]
 800dd3e:	bd38      	pop	{r3, r4, r5, pc}
 800dd40:	200004bc 	.word	0x200004bc

0800dd44 <_read_r>:
 800dd44:	b538      	push	{r3, r4, r5, lr}
 800dd46:	4d07      	ldr	r5, [pc, #28]	; (800dd64 <_read_r+0x20>)
 800dd48:	4604      	mov	r4, r0
 800dd4a:	4608      	mov	r0, r1
 800dd4c:	4611      	mov	r1, r2
 800dd4e:	2200      	movs	r2, #0
 800dd50:	602a      	str	r2, [r5, #0]
 800dd52:	461a      	mov	r2, r3
 800dd54:	f7f3 fa36 	bl	80011c4 <_read>
 800dd58:	1c43      	adds	r3, r0, #1
 800dd5a:	d102      	bne.n	800dd62 <_read_r+0x1e>
 800dd5c:	682b      	ldr	r3, [r5, #0]
 800dd5e:	b103      	cbz	r3, 800dd62 <_read_r+0x1e>
 800dd60:	6023      	str	r3, [r4, #0]
 800dd62:	bd38      	pop	{r3, r4, r5, pc}
 800dd64:	200004bc 	.word	0x200004bc

0800dd68 <_write_r>:
 800dd68:	b538      	push	{r3, r4, r5, lr}
 800dd6a:	4d07      	ldr	r5, [pc, #28]	; (800dd88 <_write_r+0x20>)
 800dd6c:	4604      	mov	r4, r0
 800dd6e:	4608      	mov	r0, r1
 800dd70:	4611      	mov	r1, r2
 800dd72:	2200      	movs	r2, #0
 800dd74:	602a      	str	r2, [r5, #0]
 800dd76:	461a      	mov	r2, r3
 800dd78:	f7f2 fdd0 	bl	800091c <_write>
 800dd7c:	1c43      	adds	r3, r0, #1
 800dd7e:	d102      	bne.n	800dd86 <_write_r+0x1e>
 800dd80:	682b      	ldr	r3, [r5, #0]
 800dd82:	b103      	cbz	r3, 800dd86 <_write_r+0x1e>
 800dd84:	6023      	str	r3, [r4, #0]
 800dd86:	bd38      	pop	{r3, r4, r5, pc}
 800dd88:	200004bc 	.word	0x200004bc

0800dd8c <_malloc_usable_size_r>:
 800dd8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd90:	1f18      	subs	r0, r3, #4
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	bfbc      	itt	lt
 800dd96:	580b      	ldrlt	r3, [r1, r0]
 800dd98:	18c0      	addlt	r0, r0, r3
 800dd9a:	4770      	bx	lr

0800dd9c <roundf>:
 800dd9c:	ee10 0a10 	vmov	r0, s0
 800dda0:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800dda4:	3a7f      	subs	r2, #127	; 0x7f
 800dda6:	2a16      	cmp	r2, #22
 800dda8:	dc15      	bgt.n	800ddd6 <roundf+0x3a>
 800ddaa:	2a00      	cmp	r2, #0
 800ddac:	da08      	bge.n	800ddc0 <roundf+0x24>
 800ddae:	3201      	adds	r2, #1
 800ddb0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800ddb4:	d101      	bne.n	800ddba <roundf+0x1e>
 800ddb6:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800ddba:	ee00 3a10 	vmov	s0, r3
 800ddbe:	4770      	bx	lr
 800ddc0:	4907      	ldr	r1, [pc, #28]	; (800dde0 <roundf+0x44>)
 800ddc2:	4111      	asrs	r1, r2
 800ddc4:	4208      	tst	r0, r1
 800ddc6:	d0fa      	beq.n	800ddbe <roundf+0x22>
 800ddc8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ddcc:	4113      	asrs	r3, r2
 800ddce:	4403      	add	r3, r0
 800ddd0:	ea23 0301 	bic.w	r3, r3, r1
 800ddd4:	e7f1      	b.n	800ddba <roundf+0x1e>
 800ddd6:	2a80      	cmp	r2, #128	; 0x80
 800ddd8:	d1f1      	bne.n	800ddbe <roundf+0x22>
 800ddda:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ddde:	4770      	bx	lr
 800dde0:	007fffff 	.word	0x007fffff

0800dde4 <log10f>:
 800dde4:	b508      	push	{r3, lr}
 800dde6:	ed2d 8b02 	vpush	{d8}
 800ddea:	eeb0 8a40 	vmov.f32	s16, s0
 800ddee:	f000 f865 	bl	800debc <__ieee754_log10f>
 800ddf2:	eeb4 8a48 	vcmp.f32	s16, s16
 800ddf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddfa:	d60f      	bvs.n	800de1c <log10f+0x38>
 800ddfc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800de00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de04:	d80a      	bhi.n	800de1c <log10f+0x38>
 800de06:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800de0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de0e:	d108      	bne.n	800de22 <log10f+0x3e>
 800de10:	f7ff f904 	bl	800d01c <__errno>
 800de14:	2322      	movs	r3, #34	; 0x22
 800de16:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800de38 <log10f+0x54>
 800de1a:	6003      	str	r3, [r0, #0]
 800de1c:	ecbd 8b02 	vpop	{d8}
 800de20:	bd08      	pop	{r3, pc}
 800de22:	f7ff f8fb 	bl	800d01c <__errno>
 800de26:	ecbd 8b02 	vpop	{d8}
 800de2a:	2321      	movs	r3, #33	; 0x21
 800de2c:	6003      	str	r3, [r0, #0]
 800de2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800de32:	4802      	ldr	r0, [pc, #8]	; (800de3c <log10f+0x58>)
 800de34:	f000 b804 	b.w	800de40 <nanf>
 800de38:	ff800000 	.word	0xff800000
 800de3c:	080138a5 	.word	0x080138a5

0800de40 <nanf>:
 800de40:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800de48 <nanf+0x8>
 800de44:	4770      	bx	lr
 800de46:	bf00      	nop
 800de48:	7fc00000 	.word	0x7fc00000

0800de4c <fmaxf>:
 800de4c:	b508      	push	{r3, lr}
 800de4e:	ed2d 8b02 	vpush	{d8}
 800de52:	eeb0 8a40 	vmov.f32	s16, s0
 800de56:	eef0 8a60 	vmov.f32	s17, s1
 800de5a:	f000 f813 	bl	800de84 <__fpclassifyf>
 800de5e:	b148      	cbz	r0, 800de74 <fmaxf+0x28>
 800de60:	eeb0 0a68 	vmov.f32	s0, s17
 800de64:	f000 f80e 	bl	800de84 <__fpclassifyf>
 800de68:	b130      	cbz	r0, 800de78 <fmaxf+0x2c>
 800de6a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800de6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de72:	dc01      	bgt.n	800de78 <fmaxf+0x2c>
 800de74:	eeb0 8a68 	vmov.f32	s16, s17
 800de78:	eeb0 0a48 	vmov.f32	s0, s16
 800de7c:	ecbd 8b02 	vpop	{d8}
 800de80:	bd08      	pop	{r3, pc}
	...

0800de84 <__fpclassifyf>:
 800de84:	ee10 3a10 	vmov	r3, s0
 800de88:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 800de8c:	d00d      	beq.n	800deaa <__fpclassifyf+0x26>
 800de8e:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 800de92:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800de96:	d30a      	bcc.n	800deae <__fpclassifyf+0x2a>
 800de98:	4b07      	ldr	r3, [pc, #28]	; (800deb8 <__fpclassifyf+0x34>)
 800de9a:	1e42      	subs	r2, r0, #1
 800de9c:	429a      	cmp	r2, r3
 800de9e:	d908      	bls.n	800deb2 <__fpclassifyf+0x2e>
 800dea0:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 800dea4:	4258      	negs	r0, r3
 800dea6:	4158      	adcs	r0, r3
 800dea8:	4770      	bx	lr
 800deaa:	2002      	movs	r0, #2
 800deac:	4770      	bx	lr
 800deae:	2004      	movs	r0, #4
 800deb0:	4770      	bx	lr
 800deb2:	2003      	movs	r0, #3
 800deb4:	4770      	bx	lr
 800deb6:	bf00      	nop
 800deb8:	007ffffe 	.word	0x007ffffe

0800debc <__ieee754_log10f>:
 800debc:	b508      	push	{r3, lr}
 800debe:	ee10 2a10 	vmov	r2, s0
 800dec2:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800dec6:	ed2d 8b02 	vpush	{d8}
 800deca:	d108      	bne.n	800dede <__ieee754_log10f+0x22>
 800decc:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800df54 <__ieee754_log10f+0x98>
 800ded0:	eddf 7a21 	vldr	s15, [pc, #132]	; 800df58 <__ieee754_log10f+0x9c>
 800ded4:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800ded8:	ecbd 8b02 	vpop	{d8}
 800dedc:	bd08      	pop	{r3, pc}
 800dede:	2a00      	cmp	r2, #0
 800dee0:	da02      	bge.n	800dee8 <__ieee754_log10f+0x2c>
 800dee2:	ee30 7a40 	vsub.f32	s14, s0, s0
 800dee6:	e7f3      	b.n	800ded0 <__ieee754_log10f+0x14>
 800dee8:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800deec:	db02      	blt.n	800def4 <__ieee754_log10f+0x38>
 800deee:	ee30 0a00 	vadd.f32	s0, s0, s0
 800def2:	e7f1      	b.n	800ded8 <__ieee754_log10f+0x1c>
 800def4:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800def8:	bfbf      	itttt	lt
 800defa:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 800df5c <__ieee754_log10f+0xa0>
 800defe:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800df02:	f06f 0118 	mvnlt.w	r1, #24
 800df06:	ee17 2a90 	vmovlt	r2, s15
 800df0a:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800df0e:	bfa8      	it	ge
 800df10:	2100      	movge	r1, #0
 800df12:	3b7f      	subs	r3, #127	; 0x7f
 800df14:	440b      	add	r3, r1
 800df16:	0fd9      	lsrs	r1, r3, #31
 800df18:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800df1c:	ee07 3a90 	vmov	s15, r3
 800df20:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800df24:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 800df28:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800df2c:	ee00 3a10 	vmov	s0, r3
 800df30:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800df34:	f000 f81a 	bl	800df6c <__ieee754_logf>
 800df38:	eddf 7a09 	vldr	s15, [pc, #36]	; 800df60 <__ieee754_log10f+0xa4>
 800df3c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800df40:	eddf 7a08 	vldr	s15, [pc, #32]	; 800df64 <__ieee754_log10f+0xa8>
 800df44:	eea8 0a27 	vfma.f32	s0, s16, s15
 800df48:	eddf 7a07 	vldr	s15, [pc, #28]	; 800df68 <__ieee754_log10f+0xac>
 800df4c:	eea8 0a27 	vfma.f32	s0, s16, s15
 800df50:	e7c2      	b.n	800ded8 <__ieee754_log10f+0x1c>
 800df52:	bf00      	nop
 800df54:	cc000000 	.word	0xcc000000
 800df58:	00000000 	.word	0x00000000
 800df5c:	4c000000 	.word	0x4c000000
 800df60:	3ede5bd9 	.word	0x3ede5bd9
 800df64:	355427db 	.word	0x355427db
 800df68:	3e9a2080 	.word	0x3e9a2080

0800df6c <__ieee754_logf>:
 800df6c:	ee10 3a10 	vmov	r3, s0
 800df70:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800df74:	d106      	bne.n	800df84 <__ieee754_logf+0x18>
 800df76:	ed9f 7a66 	vldr	s14, [pc, #408]	; 800e110 <__ieee754_logf+0x1a4>
 800df7a:	eddf 7a66 	vldr	s15, [pc, #408]	; 800e114 <__ieee754_logf+0x1a8>
 800df7e:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800df82:	4770      	bx	lr
 800df84:	2b00      	cmp	r3, #0
 800df86:	da02      	bge.n	800df8e <__ieee754_logf+0x22>
 800df88:	ee30 7a40 	vsub.f32	s14, s0, s0
 800df8c:	e7f5      	b.n	800df7a <__ieee754_logf+0xe>
 800df8e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800df92:	db02      	blt.n	800df9a <__ieee754_logf+0x2e>
 800df94:	ee30 0a00 	vadd.f32	s0, s0, s0
 800df98:	4770      	bx	lr
 800df9a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800df9e:	bfb8      	it	lt
 800dfa0:	eddf 7a5d 	vldrlt	s15, [pc, #372]	; 800e118 <__ieee754_logf+0x1ac>
 800dfa4:	485d      	ldr	r0, [pc, #372]	; (800e11c <__ieee754_logf+0x1b0>)
 800dfa6:	bfbe      	ittt	lt
 800dfa8:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800dfac:	f06f 0118 	mvnlt.w	r1, #24
 800dfb0:	ee17 3a90 	vmovlt	r3, s15
 800dfb4:	ea4f 52e3 	mov.w	r2, r3, asr #23
 800dfb8:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800dfbc:	4418      	add	r0, r3
 800dfbe:	bfa8      	it	ge
 800dfc0:	2100      	movge	r1, #0
 800dfc2:	3a7f      	subs	r2, #127	; 0x7f
 800dfc4:	440a      	add	r2, r1
 800dfc6:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 800dfca:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 800dfce:	4319      	orrs	r1, r3
 800dfd0:	ee00 1a10 	vmov	s0, r1
 800dfd4:	4952      	ldr	r1, [pc, #328]	; (800e120 <__ieee754_logf+0x1b4>)
 800dfd6:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 800dfda:	f103 000f 	add.w	r0, r3, #15
 800dfde:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800dfe2:	4001      	ands	r1, r0
 800dfe4:	ee30 0a67 	vsub.f32	s0, s0, s15
 800dfe8:	bb89      	cbnz	r1, 800e04e <__ieee754_logf+0xe2>
 800dfea:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800dfee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dff2:	d10f      	bne.n	800e014 <__ieee754_logf+0xa8>
 800dff4:	2a00      	cmp	r2, #0
 800dff6:	f000 8087 	beq.w	800e108 <__ieee754_logf+0x19c>
 800dffa:	ee07 2a90 	vmov	s15, r2
 800dffe:	ed9f 0a49 	vldr	s0, [pc, #292]	; 800e124 <__ieee754_logf+0x1b8>
 800e002:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800e128 <__ieee754_logf+0x1bc>
 800e006:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e00a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800e00e:	eea7 0a87 	vfma.f32	s0, s15, s14
 800e012:	4770      	bx	lr
 800e014:	eddf 6a45 	vldr	s13, [pc, #276]	; 800e12c <__ieee754_logf+0x1c0>
 800e018:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e01c:	eee0 7a66 	vfms.f32	s15, s0, s13
 800e020:	ee20 7a00 	vmul.f32	s14, s0, s0
 800e024:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e028:	b912      	cbnz	r2, 800e030 <__ieee754_logf+0xc4>
 800e02a:	ee30 0a47 	vsub.f32	s0, s0, s14
 800e02e:	4770      	bx	lr
 800e030:	ee07 2a90 	vmov	s15, r2
 800e034:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800e124 <__ieee754_logf+0x1b8>
 800e038:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e03c:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800e040:	ee37 0a40 	vsub.f32	s0, s14, s0
 800e044:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800e128 <__ieee754_logf+0x1bc>
 800e048:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800e04c:	4770      	bx	lr
 800e04e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800e052:	ee70 7a27 	vadd.f32	s15, s0, s15
 800e056:	eddf 5a36 	vldr	s11, [pc, #216]	; 800e130 <__ieee754_logf+0x1c4>
 800e05a:	eddf 4a36 	vldr	s9, [pc, #216]	; 800e134 <__ieee754_logf+0x1c8>
 800e05e:	4936      	ldr	r1, [pc, #216]	; (800e138 <__ieee754_logf+0x1cc>)
 800e060:	ee80 6a27 	vdiv.f32	s12, s0, s15
 800e064:	4419      	add	r1, r3
 800e066:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 800e06a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800e06e:	430b      	orrs	r3, r1
 800e070:	2b00      	cmp	r3, #0
 800e072:	ee07 2a90 	vmov	s15, r2
 800e076:	ee26 5a06 	vmul.f32	s10, s12, s12
 800e07a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e07e:	ee25 7a05 	vmul.f32	s14, s10, s10
 800e082:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800e13c <__ieee754_logf+0x1d0>
 800e086:	eee7 7a25 	vfma.f32	s15, s14, s11
 800e08a:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800e140 <__ieee754_logf+0x1d4>
 800e08e:	eee7 5a87 	vfma.f32	s11, s15, s14
 800e092:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800e144 <__ieee754_logf+0x1d8>
 800e096:	eee7 7a24 	vfma.f32	s15, s14, s9
 800e09a:	eddf 4a2b 	vldr	s9, [pc, #172]	; 800e148 <__ieee754_logf+0x1dc>
 800e09e:	eee7 4a87 	vfma.f32	s9, s15, s14
 800e0a2:	eddf 7a2a 	vldr	s15, [pc, #168]	; 800e14c <__ieee754_logf+0x1e0>
 800e0a6:	eee4 7a87 	vfma.f32	s15, s9, s14
 800e0aa:	ee67 7a85 	vmul.f32	s15, s15, s10
 800e0ae:	eee5 7a87 	vfma.f32	s15, s11, s14
 800e0b2:	dd1a      	ble.n	800e0ea <__ieee754_logf+0x17e>
 800e0b4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800e0b8:	ee20 7a07 	vmul.f32	s14, s0, s14
 800e0bc:	ee27 7a00 	vmul.f32	s14, s14, s0
 800e0c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e0c4:	ee67 7a86 	vmul.f32	s15, s15, s12
 800e0c8:	b912      	cbnz	r2, 800e0d0 <__ieee754_logf+0x164>
 800e0ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e0ce:	e7ac      	b.n	800e02a <__ieee754_logf+0xbe>
 800e0d0:	ed9f 6a14 	vldr	s12, [pc, #80]	; 800e124 <__ieee754_logf+0x1b8>
 800e0d4:	eee6 7a86 	vfma.f32	s15, s13, s12
 800e0d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e0dc:	ee37 0a40 	vsub.f32	s0, s14, s0
 800e0e0:	eddf 7a11 	vldr	s15, [pc, #68]	; 800e128 <__ieee754_logf+0x1bc>
 800e0e4:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800e0e8:	4770      	bx	lr
 800e0ea:	ee70 7a67 	vsub.f32	s15, s0, s15
 800e0ee:	ee67 7a86 	vmul.f32	s15, s15, s12
 800e0f2:	b912      	cbnz	r2, 800e0fa <__ieee754_logf+0x18e>
 800e0f4:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e0f8:	4770      	bx	lr
 800e0fa:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800e124 <__ieee754_logf+0x1b8>
 800e0fe:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800e102:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800e106:	e7eb      	b.n	800e0e0 <__ieee754_logf+0x174>
 800e108:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800e114 <__ieee754_logf+0x1a8>
 800e10c:	4770      	bx	lr
 800e10e:	bf00      	nop
 800e110:	cc000000 	.word	0xcc000000
 800e114:	00000000 	.word	0x00000000
 800e118:	4c000000 	.word	0x4c000000
 800e11c:	004afb20 	.word	0x004afb20
 800e120:	007ffff0 	.word	0x007ffff0
 800e124:	3717f7d1 	.word	0x3717f7d1
 800e128:	3f317180 	.word	0x3f317180
 800e12c:	3eaaaaab 	.word	0x3eaaaaab
 800e130:	3e1cd04f 	.word	0x3e1cd04f
 800e134:	3e178897 	.word	0x3e178897
 800e138:	ffcf5c30 	.word	0xffcf5c30
 800e13c:	3e638e29 	.word	0x3e638e29
 800e140:	3ecccccd 	.word	0x3ecccccd
 800e144:	3e3a3325 	.word	0x3e3a3325
 800e148:	3e924925 	.word	0x3e924925
 800e14c:	3f2aaaab 	.word	0x3f2aaaab

0800e150 <_init>:
 800e150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e152:	bf00      	nop
 800e154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e156:	bc08      	pop	{r3}
 800e158:	469e      	mov	lr, r3
 800e15a:	4770      	bx	lr

0800e15c <_fini>:
 800e15c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e15e:	bf00      	nop
 800e160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e162:	bc08      	pop	{r3}
 800e164:	469e      	mov	lr, r3
 800e166:	4770      	bx	lr
