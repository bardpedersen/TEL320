
NUCLEO-L476RG_A111.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001100c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005978  080111a0  080111a0  000211a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016b18  08016b18  000301f8  2**0
                  CONTENTS
  4 .ARM          00000008  08016b18  08016b18  00026b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016b20  08016b20  000301f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016b20  08016b20  00026b20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016b24  08016b24  00026b24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  08016b28  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  200001f8  08016d20  000301f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000050c  08016d20  0003050c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f8  2**0
                  CONTENTS, READONLY
 12 .comment      0000008f  00000000  00000000  00030228  2**0
                  CONTENTS, READONLY
 13 .debug_info   00061add  00000000  00000000  000302b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000dfc3  00000000  00000000  00091d94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002110  00000000  00000000  0009fd58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000984  00000000  00000000  000a1e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028186  00000000  00000000  000a27ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000274ec  00000000  00000000  000ca972  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f8dee  00000000  00000000  000f1e5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000813c  00000000  00000000  001eac4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  001f2d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000198a5  00000000  00000000  001f2df3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00003a10  00000000  00000000  0020c698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011184 	.word	0x08011184

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	08011184 	.word	0x08011184

080001d0 <acc_alg_biquad_q3_12_complex_direct_form_1_reverse>:
 80001d0:	f06f 0c03 	mvn.w	ip, #3
 80001d4:	3904      	subs	r1, #4
 80001d6:	e004      	b.n	80001e2 <head_complex>

080001d8 <acc_alg_biquad_q3_12_complex_direct_form_1>:
 80001d8:	f04f 0c04 	mov.w	ip, #4
 80001dc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80001e0:	4252      	negs	r2, r2

080001e2 <head_complex>:
 80001e2:	0092      	lsls	r2, r2, #2
 80001e4:	d100      	bne.n	80001e8 <init_complex>
 80001e6:	4770      	bx	lr

080001e8 <init_complex>:
 80001e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001ec:	eac3 4603 	pkhbt	r6, r3, r3, lsl #16
 80001f0:	eac3 4723 	pkhtb	r7, r3, r3, asr #16
 80001f4:	f8b0 a000 	ldrh.w	sl, [r0]
 80001f8:	8844      	ldrh	r4, [r0, #2]
 80001fa:	8883      	ldrh	r3, [r0, #4]
 80001fc:	88c5      	ldrh	r5, [r0, #6]
 80001fe:	8900      	ldrh	r0, [r0, #8]
 8000200:	f5c5 4570 	rsb	r5, r5, #61440	; 0xf000
 8000204:	eac3 4e00 	pkhbt	lr, r3, r0, lsl #16
 8000208:	4663      	mov	r3, ip
 800020a:	eac4 4c05 	pkhbt	ip, r4, r5, lsl #16
 800020e:	b234      	sxth	r4, r6
 8000210:	b23d      	sxth	r5, r7
 8000212:	ea4f 3804 	mov.w	r8, r4, lsl #12
 8000216:	ea4f 3905 	mov.w	r9, r5, lsl #12
 800021a:	0034      	movs	r4, r6
 800021c:	003d      	movs	r5, r7

0800021e <loop_complex>:
 800021e:	5888      	ldr	r0, [r1, r2]
 8000220:	fb1a 8800 	smlabb	r8, sl, r0, r8
 8000224:	fb1a 9910 	smlabt	r9, sl, r0, r9
 8000228:	fb2c 8804 	smlad	r8, ip, r4, r8
 800022c:	fb2c 9915 	smladx	r9, ip, r5, r9
 8000230:	fb4e 8806 	smlsd	r8, lr, r6, r8
 8000234:	fb4e 9917 	smlsdx	r9, lr, r7, r9
 8000238:	0026      	movs	r6, r4
 800023a:	002f      	movs	r7, r5
 800023c:	eac0 1408 	pkhbt	r4, r0, r8, lsl #4
 8000240:	eac0 3529 	pkhtb	r5, r0, r9, asr #12
 8000244:	0428      	lsls	r0, r5, #16
 8000246:	eac0 4024 	pkhtb	r0, r0, r4, asr #16
 800024a:	5088      	str	r0, [r1, r2]
 800024c:	18d2      	adds	r2, r2, r3
 800024e:	d1e6      	bne.n	800021e <loop_complex>
 8000250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08000254 <acc_alg_biquad_q3_12_direct_form_1_reverse>:
 8000254:	f06f 0c01 	mvn.w	ip, #1
 8000258:	3902      	subs	r1, #2
 800025a:	e004      	b.n	8000266 <head_real>

0800025c <acc_alg_biquad_q3_12_direct_form_1>:
 800025c:	f05f 0c02 	movs.w	ip, #2
 8000260:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8000264:	4252      	negs	r2, r2

08000266 <head_real>:
 8000266:	0052      	lsls	r2, r2, #1
 8000268:	d100      	bne.n	800026c <init_real>
 800026a:	4770      	bx	lr

0800026c <init_real>:
 800026c:	e92d 44f0 	stmdb	sp!, {r4, r5, r6, r7, sl, lr}
 8000270:	4667      	mov	r7, ip
 8000272:	f8b0 a000 	ldrh.w	sl, [r0]
 8000276:	8844      	ldrh	r4, [r0, #2]
 8000278:	8885      	ldrh	r5, [r0, #4]
 800027a:	88c6      	ldrh	r6, [r0, #6]
 800027c:	8900      	ldrh	r0, [r0, #8]
 800027e:	f5c6 4670 	rsb	r6, r6, #61440	; 0xf000
 8000282:	eac4 4c06 	pkhbt	ip, r4, r6, lsl #16
 8000286:	eac5 4e00 	pkhbt	lr, r5, r0, lsl #16
 800028a:	eac3 4403 	pkhbt	r4, r3, r3, lsl #16
 800028e:	0025      	movs	r5, r4
 8000290:	b21b      	sxth	r3, r3
 8000292:	031e      	lsls	r6, r3, #12

08000294 <loop_real>:
 8000294:	5a88      	ldrh	r0, [r1, r2]
 8000296:	fb1a 6600 	smlabb	r6, sl, r0, r6
 800029a:	fb2c 6604 	smlad	r6, ip, r4, r6
 800029e:	fb4e 6605 	smlsd	r6, lr, r5, r6
 80002a2:	0025      	movs	r5, r4
 80002a4:	eac0 1406 	pkhbt	r4, r0, r6, lsl #4
 80002a8:	1420      	asrs	r0, r4, #16
 80002aa:	5288      	strh	r0, [r1, r2]
 80002ac:	19d2      	adds	r2, r2, r7
 80002ae:	d1f1      	bne.n	8000294 <loop_real>
 80002b0:	e8bd 84f0 	ldmia.w	sp!, {r4, r5, r6, r7, sl, pc}
	...

080002c0 <memchr>:
 80002c0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002c4:	2a10      	cmp	r2, #16
 80002c6:	db2b      	blt.n	8000320 <memchr+0x60>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	d008      	beq.n	80002e0 <memchr+0x20>
 80002ce:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d2:	3a01      	subs	r2, #1
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d02d      	beq.n	8000334 <memchr+0x74>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	b342      	cbz	r2, 8000330 <memchr+0x70>
 80002de:	d1f6      	bne.n	80002ce <memchr+0xe>
 80002e0:	b4f0      	push	{r4, r5, r6, r7}
 80002e2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002e6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ea:	f022 0407 	bic.w	r4, r2, #7
 80002ee:	f07f 0700 	mvns.w	r7, #0
 80002f2:	2300      	movs	r3, #0
 80002f4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002f8:	3c08      	subs	r4, #8
 80002fa:	ea85 0501 	eor.w	r5, r5, r1
 80002fe:	ea86 0601 	eor.w	r6, r6, r1
 8000302:	fa85 f547 	uadd8	r5, r5, r7
 8000306:	faa3 f587 	sel	r5, r3, r7
 800030a:	fa86 f647 	uadd8	r6, r6, r7
 800030e:	faa5 f687 	sel	r6, r5, r7
 8000312:	b98e      	cbnz	r6, 8000338 <memchr+0x78>
 8000314:	d1ee      	bne.n	80002f4 <memchr+0x34>
 8000316:	bcf0      	pop	{r4, r5, r6, r7}
 8000318:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800031c:	f002 0207 	and.w	r2, r2, #7
 8000320:	b132      	cbz	r2, 8000330 <memchr+0x70>
 8000322:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000326:	3a01      	subs	r2, #1
 8000328:	ea83 0301 	eor.w	r3, r3, r1
 800032c:	b113      	cbz	r3, 8000334 <memchr+0x74>
 800032e:	d1f8      	bne.n	8000322 <memchr+0x62>
 8000330:	2000      	movs	r0, #0
 8000332:	4770      	bx	lr
 8000334:	3801      	subs	r0, #1
 8000336:	4770      	bx	lr
 8000338:	2d00      	cmp	r5, #0
 800033a:	bf06      	itte	eq
 800033c:	4635      	moveq	r5, r6
 800033e:	3803      	subeq	r0, #3
 8000340:	3807      	subne	r0, #7
 8000342:	f015 0f01 	tst.w	r5, #1
 8000346:	d107      	bne.n	8000358 <memchr+0x98>
 8000348:	3001      	adds	r0, #1
 800034a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800034e:	bf02      	ittt	eq
 8000350:	3001      	addeq	r0, #1
 8000352:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000356:	3001      	addeq	r0, #1
 8000358:	bcf0      	pop	{r4, r5, r6, r7}
 800035a:	3801      	subs	r0, #1
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop

08000360 <__aeabi_drsub>:
 8000360:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000364:	e002      	b.n	800036c <__adddf3>
 8000366:	bf00      	nop

08000368 <__aeabi_dsub>:
 8000368:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800036c <__adddf3>:
 800036c:	b530      	push	{r4, r5, lr}
 800036e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000372:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	bf1f      	itttt	ne
 8000382:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000386:	ea55 0c02 	orrsne.w	ip, r5, r2
 800038a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800038e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000392:	f000 80e2 	beq.w	800055a <__adddf3+0x1ee>
 8000396:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800039a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800039e:	bfb8      	it	lt
 80003a0:	426d      	neglt	r5, r5
 80003a2:	dd0c      	ble.n	80003be <__adddf3+0x52>
 80003a4:	442c      	add	r4, r5
 80003a6:	ea80 0202 	eor.w	r2, r0, r2
 80003aa:	ea81 0303 	eor.w	r3, r1, r3
 80003ae:	ea82 0000 	eor.w	r0, r2, r0
 80003b2:	ea83 0101 	eor.w	r1, r3, r1
 80003b6:	ea80 0202 	eor.w	r2, r0, r2
 80003ba:	ea81 0303 	eor.w	r3, r1, r3
 80003be:	2d36      	cmp	r5, #54	; 0x36
 80003c0:	bf88      	it	hi
 80003c2:	bd30      	pophi	{r4, r5, pc}
 80003c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003d4:	d002      	beq.n	80003dc <__adddf3+0x70>
 80003d6:	4240      	negs	r0, r0
 80003d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003e8:	d002      	beq.n	80003f0 <__adddf3+0x84>
 80003ea:	4252      	negs	r2, r2
 80003ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003f0:	ea94 0f05 	teq	r4, r5
 80003f4:	f000 80a7 	beq.w	8000546 <__adddf3+0x1da>
 80003f8:	f1a4 0401 	sub.w	r4, r4, #1
 80003fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000400:	db0d      	blt.n	800041e <__adddf3+0xb2>
 8000402:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000406:	fa22 f205 	lsr.w	r2, r2, r5
 800040a:	1880      	adds	r0, r0, r2
 800040c:	f141 0100 	adc.w	r1, r1, #0
 8000410:	fa03 f20e 	lsl.w	r2, r3, lr
 8000414:	1880      	adds	r0, r0, r2
 8000416:	fa43 f305 	asr.w	r3, r3, r5
 800041a:	4159      	adcs	r1, r3
 800041c:	e00e      	b.n	800043c <__adddf3+0xd0>
 800041e:	f1a5 0520 	sub.w	r5, r5, #32
 8000422:	f10e 0e20 	add.w	lr, lr, #32
 8000426:	2a01      	cmp	r2, #1
 8000428:	fa03 fc0e 	lsl.w	ip, r3, lr
 800042c:	bf28      	it	cs
 800042e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000432:	fa43 f305 	asr.w	r3, r3, r5
 8000436:	18c0      	adds	r0, r0, r3
 8000438:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800043c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000440:	d507      	bpl.n	8000452 <__adddf3+0xe6>
 8000442:	f04f 0e00 	mov.w	lr, #0
 8000446:	f1dc 0c00 	rsbs	ip, ip, #0
 800044a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800044e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000452:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000456:	d31b      	bcc.n	8000490 <__adddf3+0x124>
 8000458:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800045c:	d30c      	bcc.n	8000478 <__adddf3+0x10c>
 800045e:	0849      	lsrs	r1, r1, #1
 8000460:	ea5f 0030 	movs.w	r0, r0, rrx
 8000464:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000468:	f104 0401 	add.w	r4, r4, #1
 800046c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000470:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000474:	f080 809a 	bcs.w	80005ac <__adddf3+0x240>
 8000478:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800047c:	bf08      	it	eq
 800047e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000482:	f150 0000 	adcs.w	r0, r0, #0
 8000486:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800048a:	ea41 0105 	orr.w	r1, r1, r5
 800048e:	bd30      	pop	{r4, r5, pc}
 8000490:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000494:	4140      	adcs	r0, r0
 8000496:	eb41 0101 	adc.w	r1, r1, r1
 800049a:	3c01      	subs	r4, #1
 800049c:	bf28      	it	cs
 800049e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004a2:	d2e9      	bcs.n	8000478 <__adddf3+0x10c>
 80004a4:	f091 0f00 	teq	r1, #0
 80004a8:	bf04      	itt	eq
 80004aa:	4601      	moveq	r1, r0
 80004ac:	2000      	moveq	r0, #0
 80004ae:	fab1 f381 	clz	r3, r1
 80004b2:	bf08      	it	eq
 80004b4:	3320      	addeq	r3, #32
 80004b6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ba:	f1b3 0220 	subs.w	r2, r3, #32
 80004be:	da0c      	bge.n	80004da <__adddf3+0x16e>
 80004c0:	320c      	adds	r2, #12
 80004c2:	dd08      	ble.n	80004d6 <__adddf3+0x16a>
 80004c4:	f102 0c14 	add.w	ip, r2, #20
 80004c8:	f1c2 020c 	rsb	r2, r2, #12
 80004cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80004d0:	fa21 f102 	lsr.w	r1, r1, r2
 80004d4:	e00c      	b.n	80004f0 <__adddf3+0x184>
 80004d6:	f102 0214 	add.w	r2, r2, #20
 80004da:	bfd8      	it	le
 80004dc:	f1c2 0c20 	rsble	ip, r2, #32
 80004e0:	fa01 f102 	lsl.w	r1, r1, r2
 80004e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004e8:	bfdc      	itt	le
 80004ea:	ea41 010c 	orrle.w	r1, r1, ip
 80004ee:	4090      	lslle	r0, r2
 80004f0:	1ae4      	subs	r4, r4, r3
 80004f2:	bfa2      	ittt	ge
 80004f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004f8:	4329      	orrge	r1, r5
 80004fa:	bd30      	popge	{r4, r5, pc}
 80004fc:	ea6f 0404 	mvn.w	r4, r4
 8000500:	3c1f      	subs	r4, #31
 8000502:	da1c      	bge.n	800053e <__adddf3+0x1d2>
 8000504:	340c      	adds	r4, #12
 8000506:	dc0e      	bgt.n	8000526 <__adddf3+0x1ba>
 8000508:	f104 0414 	add.w	r4, r4, #20
 800050c:	f1c4 0220 	rsb	r2, r4, #32
 8000510:	fa20 f004 	lsr.w	r0, r0, r4
 8000514:	fa01 f302 	lsl.w	r3, r1, r2
 8000518:	ea40 0003 	orr.w	r0, r0, r3
 800051c:	fa21 f304 	lsr.w	r3, r1, r4
 8000520:	ea45 0103 	orr.w	r1, r5, r3
 8000524:	bd30      	pop	{r4, r5, pc}
 8000526:	f1c4 040c 	rsb	r4, r4, #12
 800052a:	f1c4 0220 	rsb	r2, r4, #32
 800052e:	fa20 f002 	lsr.w	r0, r0, r2
 8000532:	fa01 f304 	lsl.w	r3, r1, r4
 8000536:	ea40 0003 	orr.w	r0, r0, r3
 800053a:	4629      	mov	r1, r5
 800053c:	bd30      	pop	{r4, r5, pc}
 800053e:	fa21 f004 	lsr.w	r0, r1, r4
 8000542:	4629      	mov	r1, r5
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f094 0f00 	teq	r4, #0
 800054a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800054e:	bf06      	itte	eq
 8000550:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000554:	3401      	addeq	r4, #1
 8000556:	3d01      	subne	r5, #1
 8000558:	e74e      	b.n	80003f8 <__adddf3+0x8c>
 800055a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800055e:	bf18      	it	ne
 8000560:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000564:	d029      	beq.n	80005ba <__adddf3+0x24e>
 8000566:	ea94 0f05 	teq	r4, r5
 800056a:	bf08      	it	eq
 800056c:	ea90 0f02 	teqeq	r0, r2
 8000570:	d005      	beq.n	800057e <__adddf3+0x212>
 8000572:	ea54 0c00 	orrs.w	ip, r4, r0
 8000576:	bf04      	itt	eq
 8000578:	4619      	moveq	r1, r3
 800057a:	4610      	moveq	r0, r2
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	ea91 0f03 	teq	r1, r3
 8000582:	bf1e      	ittt	ne
 8000584:	2100      	movne	r1, #0
 8000586:	2000      	movne	r0, #0
 8000588:	bd30      	popne	{r4, r5, pc}
 800058a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800058e:	d105      	bne.n	800059c <__adddf3+0x230>
 8000590:	0040      	lsls	r0, r0, #1
 8000592:	4149      	adcs	r1, r1
 8000594:	bf28      	it	cs
 8000596:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800059a:	bd30      	pop	{r4, r5, pc}
 800059c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005a0:	bf3c      	itt	cc
 80005a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005a6:	bd30      	popcc	{r4, r5, pc}
 80005a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005b4:	f04f 0000 	mov.w	r0, #0
 80005b8:	bd30      	pop	{r4, r5, pc}
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf1a      	itte	ne
 80005c0:	4619      	movne	r1, r3
 80005c2:	4610      	movne	r0, r2
 80005c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005c8:	bf1c      	itt	ne
 80005ca:	460b      	movne	r3, r1
 80005cc:	4602      	movne	r2, r0
 80005ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005d2:	bf06      	itte	eq
 80005d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005d8:	ea91 0f03 	teqeq	r1, r3
 80005dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	bf00      	nop

080005e4 <__aeabi_ui2d>:
 80005e4:	f090 0f00 	teq	r0, #0
 80005e8:	bf04      	itt	eq
 80005ea:	2100      	moveq	r1, #0
 80005ec:	4770      	bxeq	lr
 80005ee:	b530      	push	{r4, r5, lr}
 80005f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f8:	f04f 0500 	mov.w	r5, #0
 80005fc:	f04f 0100 	mov.w	r1, #0
 8000600:	e750      	b.n	80004a4 <__adddf3+0x138>
 8000602:	bf00      	nop

08000604 <__aeabi_i2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000618:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800061c:	bf48      	it	mi
 800061e:	4240      	negmi	r0, r0
 8000620:	f04f 0100 	mov.w	r1, #0
 8000624:	e73e      	b.n	80004a4 <__adddf3+0x138>
 8000626:	bf00      	nop

08000628 <__aeabi_f2d>:
 8000628:	0042      	lsls	r2, r0, #1
 800062a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800062e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000632:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000636:	bf1f      	itttt	ne
 8000638:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800063c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000640:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000644:	4770      	bxne	lr
 8000646:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800064a:	bf08      	it	eq
 800064c:	4770      	bxeq	lr
 800064e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000652:	bf04      	itt	eq
 8000654:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000658:	4770      	bxeq	lr
 800065a:	b530      	push	{r4, r5, lr}
 800065c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000660:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000664:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000668:	e71c      	b.n	80004a4 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_ul2d>:
 800066c:	ea50 0201 	orrs.w	r2, r0, r1
 8000670:	bf08      	it	eq
 8000672:	4770      	bxeq	lr
 8000674:	b530      	push	{r4, r5, lr}
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	e00a      	b.n	8000692 <__aeabi_l2d+0x16>

0800067c <__aeabi_l2d>:
 800067c:	ea50 0201 	orrs.w	r2, r0, r1
 8000680:	bf08      	it	eq
 8000682:	4770      	bxeq	lr
 8000684:	b530      	push	{r4, r5, lr}
 8000686:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800068a:	d502      	bpl.n	8000692 <__aeabi_l2d+0x16>
 800068c:	4240      	negs	r0, r0
 800068e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000692:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000696:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800069a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800069e:	f43f aed8 	beq.w	8000452 <__adddf3+0xe6>
 80006a2:	f04f 0203 	mov.w	r2, #3
 80006a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006aa:	bf18      	it	ne
 80006ac:	3203      	addne	r2, #3
 80006ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006b2:	bf18      	it	ne
 80006b4:	3203      	addne	r2, #3
 80006b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ba:	f1c2 0320 	rsb	r3, r2, #32
 80006be:	fa00 fc03 	lsl.w	ip, r0, r3
 80006c2:	fa20 f002 	lsr.w	r0, r0, r2
 80006c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ca:	ea40 000e 	orr.w	r0, r0, lr
 80006ce:	fa21 f102 	lsr.w	r1, r1, r2
 80006d2:	4414      	add	r4, r2
 80006d4:	e6bd      	b.n	8000452 <__adddf3+0xe6>
 80006d6:	bf00      	nop

080006d8 <__aeabi_dmul>:
 80006d8:	b570      	push	{r4, r5, r6, lr}
 80006da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006e6:	bf1d      	ittte	ne
 80006e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006ec:	ea94 0f0c 	teqne	r4, ip
 80006f0:	ea95 0f0c 	teqne	r5, ip
 80006f4:	f000 f8de 	bleq	80008b4 <__aeabi_dmul+0x1dc>
 80006f8:	442c      	add	r4, r5
 80006fa:	ea81 0603 	eor.w	r6, r1, r3
 80006fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000702:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000706:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800070a:	bf18      	it	ne
 800070c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000710:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000714:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000718:	d038      	beq.n	800078c <__aeabi_dmul+0xb4>
 800071a:	fba0 ce02 	umull	ip, lr, r0, r2
 800071e:	f04f 0500 	mov.w	r5, #0
 8000722:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000726:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800072a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800072e:	f04f 0600 	mov.w	r6, #0
 8000732:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000736:	f09c 0f00 	teq	ip, #0
 800073a:	bf18      	it	ne
 800073c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000740:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000744:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000748:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800074c:	d204      	bcs.n	8000758 <__aeabi_dmul+0x80>
 800074e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000752:	416d      	adcs	r5, r5
 8000754:	eb46 0606 	adc.w	r6, r6, r6
 8000758:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800075c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000760:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000764:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000768:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800076c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000770:	bf88      	it	hi
 8000772:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000776:	d81e      	bhi.n	80007b6 <__aeabi_dmul+0xde>
 8000778:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800077c:	bf08      	it	eq
 800077e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000782:	f150 0000 	adcs.w	r0, r0, #0
 8000786:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000790:	ea46 0101 	orr.w	r1, r6, r1
 8000794:	ea40 0002 	orr.w	r0, r0, r2
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007a0:	bfc2      	ittt	gt
 80007a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007aa:	bd70      	popgt	{r4, r5, r6, pc}
 80007ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007b0:	f04f 0e00 	mov.w	lr, #0
 80007b4:	3c01      	subs	r4, #1
 80007b6:	f300 80ab 	bgt.w	8000910 <__aeabi_dmul+0x238>
 80007ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007be:	bfde      	ittt	le
 80007c0:	2000      	movle	r0, #0
 80007c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007c6:	bd70      	pople	{r4, r5, r6, pc}
 80007c8:	f1c4 0400 	rsb	r4, r4, #0
 80007cc:	3c20      	subs	r4, #32
 80007ce:	da35      	bge.n	800083c <__aeabi_dmul+0x164>
 80007d0:	340c      	adds	r4, #12
 80007d2:	dc1b      	bgt.n	800080c <__aeabi_dmul+0x134>
 80007d4:	f104 0414 	add.w	r4, r4, #20
 80007d8:	f1c4 0520 	rsb	r5, r4, #32
 80007dc:	fa00 f305 	lsl.w	r3, r0, r5
 80007e0:	fa20 f004 	lsr.w	r0, r0, r4
 80007e4:	fa01 f205 	lsl.w	r2, r1, r5
 80007e8:	ea40 0002 	orr.w	r0, r0, r2
 80007ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80007f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007f8:	fa21 f604 	lsr.w	r6, r1, r4
 80007fc:	eb42 0106 	adc.w	r1, r2, r6
 8000800:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000804:	bf08      	it	eq
 8000806:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800080a:	bd70      	pop	{r4, r5, r6, pc}
 800080c:	f1c4 040c 	rsb	r4, r4, #12
 8000810:	f1c4 0520 	rsb	r5, r4, #32
 8000814:	fa00 f304 	lsl.w	r3, r0, r4
 8000818:	fa20 f005 	lsr.w	r0, r0, r5
 800081c:	fa01 f204 	lsl.w	r2, r1, r4
 8000820:	ea40 0002 	orr.w	r0, r0, r2
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800082c:	f141 0100 	adc.w	r1, r1, #0
 8000830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000834:	bf08      	it	eq
 8000836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800083a:	bd70      	pop	{r4, r5, r6, pc}
 800083c:	f1c4 0520 	rsb	r5, r4, #32
 8000840:	fa00 f205 	lsl.w	r2, r0, r5
 8000844:	ea4e 0e02 	orr.w	lr, lr, r2
 8000848:	fa20 f304 	lsr.w	r3, r0, r4
 800084c:	fa01 f205 	lsl.w	r2, r1, r5
 8000850:	ea43 0302 	orr.w	r3, r3, r2
 8000854:	fa21 f004 	lsr.w	r0, r1, r4
 8000858:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800085c:	fa21 f204 	lsr.w	r2, r1, r4
 8000860:	ea20 0002 	bic.w	r0, r0, r2
 8000864:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000868:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800086c:	bf08      	it	eq
 800086e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000872:	bd70      	pop	{r4, r5, r6, pc}
 8000874:	f094 0f00 	teq	r4, #0
 8000878:	d10f      	bne.n	800089a <__aeabi_dmul+0x1c2>
 800087a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800087e:	0040      	lsls	r0, r0, #1
 8000880:	eb41 0101 	adc.w	r1, r1, r1
 8000884:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000888:	bf08      	it	eq
 800088a:	3c01      	subeq	r4, #1
 800088c:	d0f7      	beq.n	800087e <__aeabi_dmul+0x1a6>
 800088e:	ea41 0106 	orr.w	r1, r1, r6
 8000892:	f095 0f00 	teq	r5, #0
 8000896:	bf18      	it	ne
 8000898:	4770      	bxne	lr
 800089a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800089e:	0052      	lsls	r2, r2, #1
 80008a0:	eb43 0303 	adc.w	r3, r3, r3
 80008a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008a8:	bf08      	it	eq
 80008aa:	3d01      	subeq	r5, #1
 80008ac:	d0f7      	beq.n	800089e <__aeabi_dmul+0x1c6>
 80008ae:	ea43 0306 	orr.w	r3, r3, r6
 80008b2:	4770      	bx	lr
 80008b4:	ea94 0f0c 	teq	r4, ip
 80008b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008bc:	bf18      	it	ne
 80008be:	ea95 0f0c 	teqne	r5, ip
 80008c2:	d00c      	beq.n	80008de <__aeabi_dmul+0x206>
 80008c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c8:	bf18      	it	ne
 80008ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ce:	d1d1      	bne.n	8000874 <__aeabi_dmul+0x19c>
 80008d0:	ea81 0103 	eor.w	r1, r1, r3
 80008d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008d8:	f04f 0000 	mov.w	r0, #0
 80008dc:	bd70      	pop	{r4, r5, r6, pc}
 80008de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e2:	bf06      	itte	eq
 80008e4:	4610      	moveq	r0, r2
 80008e6:	4619      	moveq	r1, r3
 80008e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ec:	d019      	beq.n	8000922 <__aeabi_dmul+0x24a>
 80008ee:	ea94 0f0c 	teq	r4, ip
 80008f2:	d102      	bne.n	80008fa <__aeabi_dmul+0x222>
 80008f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008f8:	d113      	bne.n	8000922 <__aeabi_dmul+0x24a>
 80008fa:	ea95 0f0c 	teq	r5, ip
 80008fe:	d105      	bne.n	800090c <__aeabi_dmul+0x234>
 8000900:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000904:	bf1c      	itt	ne
 8000906:	4610      	movne	r0, r2
 8000908:	4619      	movne	r1, r3
 800090a:	d10a      	bne.n	8000922 <__aeabi_dmul+0x24a>
 800090c:	ea81 0103 	eor.w	r1, r1, r3
 8000910:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000914:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000918:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	bd70      	pop	{r4, r5, r6, pc}
 8000922:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000926:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800092a:	bd70      	pop	{r4, r5, r6, pc}

0800092c <__aeabi_ddiv>:
 800092c:	b570      	push	{r4, r5, r6, lr}
 800092e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000932:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000936:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800093a:	bf1d      	ittte	ne
 800093c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000940:	ea94 0f0c 	teqne	r4, ip
 8000944:	ea95 0f0c 	teqne	r5, ip
 8000948:	f000 f8a7 	bleq	8000a9a <__aeabi_ddiv+0x16e>
 800094c:	eba4 0405 	sub.w	r4, r4, r5
 8000950:	ea81 0e03 	eor.w	lr, r1, r3
 8000954:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000958:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800095c:	f000 8088 	beq.w	8000a70 <__aeabi_ddiv+0x144>
 8000960:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000964:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000968:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800096c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000970:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000974:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000978:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800097c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000980:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000984:	429d      	cmp	r5, r3
 8000986:	bf08      	it	eq
 8000988:	4296      	cmpeq	r6, r2
 800098a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800098e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000992:	d202      	bcs.n	800099a <__aeabi_ddiv+0x6e>
 8000994:	085b      	lsrs	r3, r3, #1
 8000996:	ea4f 0232 	mov.w	r2, r2, rrx
 800099a:	1ab6      	subs	r6, r6, r2
 800099c:	eb65 0503 	sbc.w	r5, r5, r3
 80009a0:	085b      	lsrs	r3, r3, #1
 80009a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80009b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009b6:	bf22      	ittt	cs
 80009b8:	1ab6      	subcs	r6, r6, r2
 80009ba:	4675      	movcs	r5, lr
 80009bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ce:	bf22      	ittt	cs
 80009d0:	1ab6      	subcs	r6, r6, r2
 80009d2:	4675      	movcs	r5, lr
 80009d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009d8:	085b      	lsrs	r3, r3, #1
 80009da:	ea4f 0232 	mov.w	r2, r2, rrx
 80009de:	ebb6 0e02 	subs.w	lr, r6, r2
 80009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009e6:	bf22      	ittt	cs
 80009e8:	1ab6      	subcs	r6, r6, r2
 80009ea:	4675      	movcs	r5, lr
 80009ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009f0:	085b      	lsrs	r3, r3, #1
 80009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009fe:	bf22      	ittt	cs
 8000a00:	1ab6      	subcs	r6, r6, r2
 8000a02:	4675      	movcs	r5, lr
 8000a04:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a08:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a0c:	d018      	beq.n	8000a40 <__aeabi_ddiv+0x114>
 8000a0e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a12:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a16:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a1a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a1e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a22:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a26:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a2a:	d1c0      	bne.n	80009ae <__aeabi_ddiv+0x82>
 8000a2c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a30:	d10b      	bne.n	8000a4a <__aeabi_ddiv+0x11e>
 8000a32:	ea41 0100 	orr.w	r1, r1, r0
 8000a36:	f04f 0000 	mov.w	r0, #0
 8000a3a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a3e:	e7b6      	b.n	80009ae <__aeabi_ddiv+0x82>
 8000a40:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a44:	bf04      	itt	eq
 8000a46:	4301      	orreq	r1, r0
 8000a48:	2000      	moveq	r0, #0
 8000a4a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a4e:	bf88      	it	hi
 8000a50:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a54:	f63f aeaf 	bhi.w	80007b6 <__aeabi_dmul+0xde>
 8000a58:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a5c:	bf04      	itt	eq
 8000a5e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a62:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a66:	f150 0000 	adcs.w	r0, r0, #0
 8000a6a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a6e:	bd70      	pop	{r4, r5, r6, pc}
 8000a70:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a74:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a78:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a7c:	bfc2      	ittt	gt
 8000a7e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a82:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a86:	bd70      	popgt	{r4, r5, r6, pc}
 8000a88:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a8c:	f04f 0e00 	mov.w	lr, #0
 8000a90:	3c01      	subs	r4, #1
 8000a92:	e690      	b.n	80007b6 <__aeabi_dmul+0xde>
 8000a94:	ea45 0e06 	orr.w	lr, r5, r6
 8000a98:	e68d      	b.n	80007b6 <__aeabi_dmul+0xde>
 8000a9a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a9e:	ea94 0f0c 	teq	r4, ip
 8000aa2:	bf08      	it	eq
 8000aa4:	ea95 0f0c 	teqeq	r5, ip
 8000aa8:	f43f af3b 	beq.w	8000922 <__aeabi_dmul+0x24a>
 8000aac:	ea94 0f0c 	teq	r4, ip
 8000ab0:	d10a      	bne.n	8000ac8 <__aeabi_ddiv+0x19c>
 8000ab2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ab6:	f47f af34 	bne.w	8000922 <__aeabi_dmul+0x24a>
 8000aba:	ea95 0f0c 	teq	r5, ip
 8000abe:	f47f af25 	bne.w	800090c <__aeabi_dmul+0x234>
 8000ac2:	4610      	mov	r0, r2
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	e72c      	b.n	8000922 <__aeabi_dmul+0x24a>
 8000ac8:	ea95 0f0c 	teq	r5, ip
 8000acc:	d106      	bne.n	8000adc <__aeabi_ddiv+0x1b0>
 8000ace:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ad2:	f43f aefd 	beq.w	80008d0 <__aeabi_dmul+0x1f8>
 8000ad6:	4610      	mov	r0, r2
 8000ad8:	4619      	mov	r1, r3
 8000ada:	e722      	b.n	8000922 <__aeabi_dmul+0x24a>
 8000adc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ae0:	bf18      	it	ne
 8000ae2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ae6:	f47f aec5 	bne.w	8000874 <__aeabi_dmul+0x19c>
 8000aea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000aee:	f47f af0d 	bne.w	800090c <__aeabi_dmul+0x234>
 8000af2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000af6:	f47f aeeb 	bne.w	80008d0 <__aeabi_dmul+0x1f8>
 8000afa:	e712      	b.n	8000922 <__aeabi_dmul+0x24a>

08000afc <__gedf2>:
 8000afc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000b00:	e006      	b.n	8000b10 <__cmpdf2+0x4>
 8000b02:	bf00      	nop

08000b04 <__ledf2>:
 8000b04:	f04f 0c01 	mov.w	ip, #1
 8000b08:	e002      	b.n	8000b10 <__cmpdf2+0x4>
 8000b0a:	bf00      	nop

08000b0c <__cmpdf2>:
 8000b0c:	f04f 0c01 	mov.w	ip, #1
 8000b10:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b14:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b20:	bf18      	it	ne
 8000b22:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b26:	d01b      	beq.n	8000b60 <__cmpdf2+0x54>
 8000b28:	b001      	add	sp, #4
 8000b2a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b2e:	bf0c      	ite	eq
 8000b30:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b34:	ea91 0f03 	teqne	r1, r3
 8000b38:	bf02      	ittt	eq
 8000b3a:	ea90 0f02 	teqeq	r0, r2
 8000b3e:	2000      	moveq	r0, #0
 8000b40:	4770      	bxeq	lr
 8000b42:	f110 0f00 	cmn.w	r0, #0
 8000b46:	ea91 0f03 	teq	r1, r3
 8000b4a:	bf58      	it	pl
 8000b4c:	4299      	cmppl	r1, r3
 8000b4e:	bf08      	it	eq
 8000b50:	4290      	cmpeq	r0, r2
 8000b52:	bf2c      	ite	cs
 8000b54:	17d8      	asrcs	r0, r3, #31
 8000b56:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b5a:	f040 0001 	orr.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b68:	d102      	bne.n	8000b70 <__cmpdf2+0x64>
 8000b6a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6e:	d107      	bne.n	8000b80 <__cmpdf2+0x74>
 8000b70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b78:	d1d6      	bne.n	8000b28 <__cmpdf2+0x1c>
 8000b7a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7e:	d0d3      	beq.n	8000b28 <__cmpdf2+0x1c>
 8000b80:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop

08000b88 <__aeabi_cdrcmple>:
 8000b88:	4684      	mov	ip, r0
 8000b8a:	4610      	mov	r0, r2
 8000b8c:	4662      	mov	r2, ip
 8000b8e:	468c      	mov	ip, r1
 8000b90:	4619      	mov	r1, r3
 8000b92:	4663      	mov	r3, ip
 8000b94:	e000      	b.n	8000b98 <__aeabi_cdcmpeq>
 8000b96:	bf00      	nop

08000b98 <__aeabi_cdcmpeq>:
 8000b98:	b501      	push	{r0, lr}
 8000b9a:	f7ff ffb7 	bl	8000b0c <__cmpdf2>
 8000b9e:	2800      	cmp	r0, #0
 8000ba0:	bf48      	it	mi
 8000ba2:	f110 0f00 	cmnmi.w	r0, #0
 8000ba6:	bd01      	pop	{r0, pc}

08000ba8 <__aeabi_dcmpeq>:
 8000ba8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bac:	f7ff fff4 	bl	8000b98 <__aeabi_cdcmpeq>
 8000bb0:	bf0c      	ite	eq
 8000bb2:	2001      	moveq	r0, #1
 8000bb4:	2000      	movne	r0, #0
 8000bb6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bba:	bf00      	nop

08000bbc <__aeabi_dcmplt>:
 8000bbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc0:	f7ff ffea 	bl	8000b98 <__aeabi_cdcmpeq>
 8000bc4:	bf34      	ite	cc
 8000bc6:	2001      	movcc	r0, #1
 8000bc8:	2000      	movcs	r0, #0
 8000bca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bce:	bf00      	nop

08000bd0 <__aeabi_dcmple>:
 8000bd0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bd4:	f7ff ffe0 	bl	8000b98 <__aeabi_cdcmpeq>
 8000bd8:	bf94      	ite	ls
 8000bda:	2001      	movls	r0, #1
 8000bdc:	2000      	movhi	r0, #0
 8000bde:	f85d fb08 	ldr.w	pc, [sp], #8
 8000be2:	bf00      	nop

08000be4 <__aeabi_dcmpge>:
 8000be4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be8:	f7ff ffce 	bl	8000b88 <__aeabi_cdrcmple>
 8000bec:	bf94      	ite	ls
 8000bee:	2001      	movls	r0, #1
 8000bf0:	2000      	movhi	r0, #0
 8000bf2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_dcmpgt>:
 8000bf8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bfc:	f7ff ffc4 	bl	8000b88 <__aeabi_cdrcmple>
 8000c00:	bf34      	ite	cc
 8000c02:	2001      	movcc	r0, #1
 8000c04:	2000      	movcs	r0, #0
 8000c06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c0a:	bf00      	nop

08000c0c <__aeabi_dcmpun>:
 8000c0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c14:	d102      	bne.n	8000c1c <__aeabi_dcmpun+0x10>
 8000c16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c1a:	d10a      	bne.n	8000c32 <__aeabi_dcmpun+0x26>
 8000c1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c24:	d102      	bne.n	8000c2c <__aeabi_dcmpun+0x20>
 8000c26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_dcmpun+0x26>
 8000c2c:	f04f 0000 	mov.w	r0, #0
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0001 	mov.w	r0, #1
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2iz>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c40:	d215      	bcs.n	8000c6e <__aeabi_d2iz+0x36>
 8000c42:	d511      	bpl.n	8000c68 <__aeabi_d2iz+0x30>
 8000c44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c4c:	d912      	bls.n	8000c74 <__aeabi_d2iz+0x3c>
 8000c4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c62:	bf18      	it	ne
 8000c64:	4240      	negne	r0, r0
 8000c66:	4770      	bx	lr
 8000c68:	f04f 0000 	mov.w	r0, #0
 8000c6c:	4770      	bx	lr
 8000c6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c72:	d105      	bne.n	8000c80 <__aeabi_d2iz+0x48>
 8000c74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	bf08      	it	eq
 8000c7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c7e:	4770      	bx	lr
 8000c80:	f04f 0000 	mov.w	r0, #0
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b970 	b.w	8000f80 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	460d      	mov	r5, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	460f      	mov	r7, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4694      	mov	ip, r2
 8000ccc:	d965      	bls.n	8000d9a <__udivmoddi4+0xe2>
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	b143      	cbz	r3, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cd8:	f1c3 0220 	rsb	r2, r3, #32
 8000cdc:	409f      	lsls	r7, r3
 8000cde:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce2:	4317      	orrs	r7, r2
 8000ce4:	409c      	lsls	r4, r3
 8000ce6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cea:	fa1f f58c 	uxth.w	r5, ip
 8000cee:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cf2:	0c22      	lsrs	r2, r4, #16
 8000cf4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cf8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cfc:	fb01 f005 	mul.w	r0, r1, r5
 8000d00:	4290      	cmp	r0, r2
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d04:	eb1c 0202 	adds.w	r2, ip, r2
 8000d08:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d0c:	f080 811c 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d10:	4290      	cmp	r0, r2
 8000d12:	f240 8119 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d16:	3902      	subs	r1, #2
 8000d18:	4462      	add	r2, ip
 8000d1a:	1a12      	subs	r2, r2, r0
 8000d1c:	b2a4      	uxth	r4, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2a:	fb00 f505 	mul.w	r5, r0, r5
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	d90a      	bls.n	8000d48 <__udivmoddi4+0x90>
 8000d32:	eb1c 0404 	adds.w	r4, ip, r4
 8000d36:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d3a:	f080 8107 	bcs.w	8000f4c <__udivmoddi4+0x294>
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	f240 8104 	bls.w	8000f4c <__udivmoddi4+0x294>
 8000d44:	4464      	add	r4, ip
 8000d46:	3802      	subs	r0, #2
 8000d48:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4c:	1b64      	subs	r4, r4, r5
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11e      	cbz	r6, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40dc      	lsrs	r4, r3
 8000d54:	2300      	movs	r3, #0
 8000d56:	e9c6 4300 	strd	r4, r3, [r6]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0xbc>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80ed 	beq.w	8000f42 <__udivmoddi4+0x28a>
 8000d68:	2100      	movs	r1, #0
 8000d6a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d74:	fab3 f183 	clz	r1, r3
 8000d78:	2900      	cmp	r1, #0
 8000d7a:	d149      	bne.n	8000e10 <__udivmoddi4+0x158>
 8000d7c:	42ab      	cmp	r3, r5
 8000d7e:	d302      	bcc.n	8000d86 <__udivmoddi4+0xce>
 8000d80:	4282      	cmp	r2, r0
 8000d82:	f200 80f8 	bhi.w	8000f76 <__udivmoddi4+0x2be>
 8000d86:	1a84      	subs	r4, r0, r2
 8000d88:	eb65 0203 	sbc.w	r2, r5, r3
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	4617      	mov	r7, r2
 8000d90:	2e00      	cmp	r6, #0
 8000d92:	d0e2      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	e9c6 4700 	strd	r4, r7, [r6]
 8000d98:	e7df      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d9a:	b902      	cbnz	r2, 8000d9e <__udivmoddi4+0xe6>
 8000d9c:	deff      	udf	#255	; 0xff
 8000d9e:	fab2 f382 	clz	r3, r2
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f040 8090 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000da8:	1a8a      	subs	r2, r1, r2
 8000daa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dae:	fa1f fe8c 	uxth.w	lr, ip
 8000db2:	2101      	movs	r1, #1
 8000db4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000db8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dbc:	0c22      	lsrs	r2, r4, #16
 8000dbe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dc2:	fb0e f005 	mul.w	r0, lr, r5
 8000dc6:	4290      	cmp	r0, r2
 8000dc8:	d908      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dca:	eb1c 0202 	adds.w	r2, ip, r2
 8000dce:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4290      	cmp	r0, r2
 8000dd6:	f200 80cb 	bhi.w	8000f70 <__udivmoddi4+0x2b8>
 8000dda:	4645      	mov	r5, r8
 8000ddc:	1a12      	subs	r2, r2, r0
 8000dde:	b2a4      	uxth	r4, r4
 8000de0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000de4:	fb07 2210 	mls	r2, r7, r0, r2
 8000de8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dec:	fb0e fe00 	mul.w	lr, lr, r0
 8000df0:	45a6      	cmp	lr, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x14e>
 8000df4:	eb1c 0404 	adds.w	r4, ip, r4
 8000df8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dfc:	d202      	bcs.n	8000e04 <__udivmoddi4+0x14c>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	f200 80bb 	bhi.w	8000f7a <__udivmoddi4+0x2c2>
 8000e04:	4610      	mov	r0, r2
 8000e06:	eba4 040e 	sub.w	r4, r4, lr
 8000e0a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e0e:	e79f      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e10:	f1c1 0720 	rsb	r7, r1, #32
 8000e14:	408b      	lsls	r3, r1
 8000e16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e1e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e22:	fa20 f307 	lsr.w	r3, r0, r7
 8000e26:	40fd      	lsrs	r5, r7
 8000e28:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e2c:	4323      	orrs	r3, r4
 8000e2e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	fb09 5518 	mls	r5, r9, r8, r5
 8000e3a:	0c1c      	lsrs	r4, r3, #16
 8000e3c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e40:	fb08 f50e 	mul.w	r5, r8, lr
 8000e44:	42a5      	cmp	r5, r4
 8000e46:	fa02 f201 	lsl.w	r2, r2, r1
 8000e4a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e58:	f080 8088 	bcs.w	8000f6c <__udivmoddi4+0x2b4>
 8000e5c:	42a5      	cmp	r5, r4
 8000e5e:	f240 8085 	bls.w	8000f6c <__udivmoddi4+0x2b4>
 8000e62:	f1a8 0802 	sub.w	r8, r8, #2
 8000e66:	4464      	add	r4, ip
 8000e68:	1b64      	subs	r4, r4, r5
 8000e6a:	b29d      	uxth	r5, r3
 8000e6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e70:	fb09 4413 	mls	r4, r9, r3, r4
 8000e74:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e78:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e88:	d26c      	bcs.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	d96a      	bls.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8e:	3b02      	subs	r3, #2
 8000e90:	4464      	add	r4, ip
 8000e92:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e96:	fba3 9502 	umull	r9, r5, r3, r2
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	42ac      	cmp	r4, r5
 8000ea0:	46c8      	mov	r8, r9
 8000ea2:	46ae      	mov	lr, r5
 8000ea4:	d356      	bcc.n	8000f54 <__udivmoddi4+0x29c>
 8000ea6:	d053      	beq.n	8000f50 <__udivmoddi4+0x298>
 8000ea8:	b156      	cbz	r6, 8000ec0 <__udivmoddi4+0x208>
 8000eaa:	ebb0 0208 	subs.w	r2, r0, r8
 8000eae:	eb64 040e 	sbc.w	r4, r4, lr
 8000eb2:	fa04 f707 	lsl.w	r7, r4, r7
 8000eb6:	40ca      	lsrs	r2, r1
 8000eb8:	40cc      	lsrs	r4, r1
 8000eba:	4317      	orrs	r7, r2
 8000ebc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec8:	f1c3 0120 	rsb	r1, r3, #32
 8000ecc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ed0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ed4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ed8:	409d      	lsls	r5, r3
 8000eda:	432a      	orrs	r2, r5
 8000edc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee0:	fa1f fe8c 	uxth.w	lr, ip
 8000ee4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ee8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eec:	0c11      	lsrs	r1, r2, #16
 8000eee:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ef2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ef6:	428d      	cmp	r5, r1
 8000ef8:	fa04 f403 	lsl.w	r4, r4, r3
 8000efc:	d908      	bls.n	8000f10 <__udivmoddi4+0x258>
 8000efe:	eb1c 0101 	adds.w	r1, ip, r1
 8000f02:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f06:	d22f      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f08:	428d      	cmp	r5, r1
 8000f0a:	d92d      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	4461      	add	r1, ip
 8000f10:	1b49      	subs	r1, r1, r5
 8000f12:	b292      	uxth	r2, r2
 8000f14:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f18:	fb07 1115 	mls	r1, r7, r5, r1
 8000f1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f20:	fb05 f10e 	mul.w	r1, r5, lr
 8000f24:	4291      	cmp	r1, r2
 8000f26:	d908      	bls.n	8000f3a <__udivmoddi4+0x282>
 8000f28:	eb1c 0202 	adds.w	r2, ip, r2
 8000f2c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f30:	d216      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000f32:	4291      	cmp	r1, r2
 8000f34:	d914      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000f36:	3d02      	subs	r5, #2
 8000f38:	4462      	add	r2, ip
 8000f3a:	1a52      	subs	r2, r2, r1
 8000f3c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f40:	e738      	b.n	8000db4 <__udivmoddi4+0xfc>
 8000f42:	4631      	mov	r1, r6
 8000f44:	4630      	mov	r0, r6
 8000f46:	e708      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000f48:	4639      	mov	r1, r7
 8000f4a:	e6e6      	b.n	8000d1a <__udivmoddi4+0x62>
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	e6fb      	b.n	8000d48 <__udivmoddi4+0x90>
 8000f50:	4548      	cmp	r0, r9
 8000f52:	d2a9      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f54:	ebb9 0802 	subs.w	r8, r9, r2
 8000f58:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	e7a3      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f60:	4645      	mov	r5, r8
 8000f62:	e7ea      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f64:	462b      	mov	r3, r5
 8000f66:	e794      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f68:	4640      	mov	r0, r8
 8000f6a:	e7d1      	b.n	8000f10 <__udivmoddi4+0x258>
 8000f6c:	46d0      	mov	r8, sl
 8000f6e:	e77b      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f70:	3d02      	subs	r5, #2
 8000f72:	4462      	add	r2, ip
 8000f74:	e732      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f76:	4608      	mov	r0, r1
 8000f78:	e70a      	b.n	8000d90 <__udivmoddi4+0xd8>
 8000f7a:	4464      	add	r4, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e742      	b.n	8000e06 <__udivmoddi4+0x14e>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <disable_interrupts>:
 */
#define ACC_BOARD_REF_FREQ 26000000


static inline void disable_interrupts(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f88:	b672      	cpsid	i
}
 8000f8a:	bf00      	nop
	__disable_irq();
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr

08000f96 <enable_interrupts>:


static inline void enable_interrupts(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 8000f9a:	b662      	cpsie	i
}
 8000f9c:	bf00      	nop
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8000f9e:	f3bf 8f6f 	isb	sy
}
 8000fa2:	bf00      	nop
	__enable_irq();
	__ISB();
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
	...

08000fb0 <acc_hal_integration_sensor_transfer>:
// Implementation of RSS HAL handlers
//----------------------------------------


static void acc_hal_integration_sensor_transfer(acc_sensor_id_t sensor_id, uint8_t *buffer, size_t buffer_size)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b088      	sub	sp, #32
 8000fb4:	af02      	add	r7, sp, #8
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	607a      	str	r2, [r7, #4]
	(void)sensor_id;  // Ignore parameter sensor_id

	const uint32_t SPI_TRANSMIT_RECEIVE_TIMEOUT = 5000;
 8000fbc:	f241 3388 	movw	r3, #5000	; 0x1388
 8000fc0:	617b      	str	r3, [r7, #20]

	HAL_GPIO_WritePin(A111_CS_N_GPIO_Port, A111_CS_N_Pin, GPIO_PIN_RESET);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2140      	movs	r1, #64	; 0x40
 8000fc6:	480b      	ldr	r0, [pc, #44]	; (8000ff4 <acc_hal_integration_sensor_transfer+0x44>)
 8000fc8:	f001 fb8e 	bl	80026e8 <HAL_GPIO_WritePin>

		// Enable interrupt again, the ISR will execute directly after this
		enable_interrupts();
	}
#else
	HAL_SPI_TransmitReceive(&A111_SPI_HANDLE, buffer, buffer, buffer_size, SPI_TRANSMIT_RECEIVE_TIMEOUT);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	b29a      	uxth	r2, r3
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	9300      	str	r3, [sp, #0]
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	68ba      	ldr	r2, [r7, #8]
 8000fd8:	68b9      	ldr	r1, [r7, #8]
 8000fda:	4807      	ldr	r0, [pc, #28]	; (8000ff8 <acc_hal_integration_sensor_transfer+0x48>)
 8000fdc:	f002 ff83 	bl	8003ee6 <HAL_SPI_TransmitReceive>
#endif

	HAL_GPIO_WritePin(A111_CS_N_GPIO_Port, A111_CS_N_Pin, GPIO_PIN_SET);
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	2140      	movs	r1, #64	; 0x40
 8000fe4:	4803      	ldr	r0, [pc, #12]	; (8000ff4 <acc_hal_integration_sensor_transfer+0x44>)
 8000fe6:	f001 fb7f 	bl	80026e8 <HAL_GPIO_WritePin>
}
 8000fea:	bf00      	nop
 8000fec:	3718      	adds	r7, #24
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	48000400 	.word	0x48000400
 8000ff8:	20000214 	.word	0x20000214

08000ffc <acc_hal_integration_sensor_power_on>:


static void acc_hal_integration_sensor_power_on(acc_sensor_id_t sensor_id)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
	(void)sensor_id;  // Ignore parameter sensor_id

	HAL_GPIO_WritePin(A111_ENABLE_GPIO_Port, A111_ENABLE_Pin, GPIO_PIN_SET);
 8001004:	2201      	movs	r2, #1
 8001006:	2120      	movs	r1, #32
 8001008:	4807      	ldr	r0, [pc, #28]	; (8001028 <acc_hal_integration_sensor_power_on+0x2c>)
 800100a:	f001 fb6d 	bl	80026e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A111_CS_N_GPIO_Port, A111_CS_N_Pin, GPIO_PIN_SET);
 800100e:	2201      	movs	r2, #1
 8001010:	2140      	movs	r1, #64	; 0x40
 8001012:	4805      	ldr	r0, [pc, #20]	; (8001028 <acc_hal_integration_sensor_power_on+0x2c>)
 8001014:	f001 fb68 	bl	80026e8 <HAL_GPIO_WritePin>

	// Wait 2 ms to make sure that the sensor crystal have time to stabilize
	HAL_Delay(2);
 8001018:	2002      	movs	r0, #2
 800101a:	f001 f86d 	bl	80020f8 <HAL_Delay>
}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	48000400 	.word	0x48000400

0800102c <acc_hal_integration_sensor_power_off>:


static void acc_hal_integration_sensor_power_off(acc_sensor_id_t sensor_id)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
	(void)sensor_id;  // Ignore parameter sensor_id

	HAL_GPIO_WritePin(A111_CS_N_GPIO_Port, A111_CS_N_Pin, GPIO_PIN_RESET);
 8001034:	2200      	movs	r2, #0
 8001036:	2140      	movs	r1, #64	; 0x40
 8001038:	4807      	ldr	r0, [pc, #28]	; (8001058 <acc_hal_integration_sensor_power_off+0x2c>)
 800103a:	f001 fb55 	bl	80026e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A111_ENABLE_GPIO_Port, A111_ENABLE_Pin, GPIO_PIN_RESET);
 800103e:	2200      	movs	r2, #0
 8001040:	2120      	movs	r1, #32
 8001042:	4805      	ldr	r0, [pc, #20]	; (8001058 <acc_hal_integration_sensor_power_off+0x2c>)
 8001044:	f001 fb50 	bl	80026e8 <HAL_GPIO_WritePin>

	// Wait after power off to leave the sensor in a known state
	// in case the application intends to enable the sensor directly
	HAL_Delay(2);
 8001048:	2002      	movs	r0, #2
 800104a:	f001 f855 	bl	80020f8 <HAL_Delay>
}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	48000400 	.word	0x48000400

0800105c <acc_hal_integration_wait_for_sensor_interrupt>:


static bool acc_hal_integration_wait_for_sensor_interrupt(acc_sensor_id_t sensor_id, uint32_t timeout_ms)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	6039      	str	r1, [r7, #0]
	(void)sensor_id; // Ignore parameter sensor_id

	const uint32_t wait_begin_ms = HAL_GetTick();
 8001066:	f001 f83b 	bl	80020e0 <HAL_GetTick>
 800106a:	60f8      	str	r0, [r7, #12]
	while ((HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) != GPIO_PIN_SET) &&
 800106c:	e00d      	b.n	800108a <acc_hal_integration_wait_for_sensor_interrupt+0x2e>
	       (HAL_GetTick() - wait_begin_ms < timeout_ms))
	{
		// Wait for the GPIO interrupt
		disable_interrupts();
 800106e:	f7ff ff89 	bl	8000f84 <disable_interrupts>
		// Check again so that IRQ did not occur
		if (HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) != GPIO_PIN_SET)
 8001072:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001076:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800107a:	f001 fb1d 	bl	80026b8 <HAL_GPIO_ReadPin>
 800107e:	4603      	mov	r3, r0
 8001080:	2b01      	cmp	r3, #1
 8001082:	d000      	beq.n	8001086 <acc_hal_integration_wait_for_sensor_interrupt+0x2a>
		{
			__WFI();
 8001084:	bf30      	wfi
		}

		// Enable interrupts again to allow pending interrupt to be handled
		enable_interrupts();
 8001086:	f7ff ff86 	bl	8000f96 <enable_interrupts>
	while ((HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) != GPIO_PIN_SET) &&
 800108a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800108e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001092:	f001 fb11 	bl	80026b8 <HAL_GPIO_ReadPin>
 8001096:	4603      	mov	r3, r0
 8001098:	2b01      	cmp	r3, #1
 800109a:	d007      	beq.n	80010ac <acc_hal_integration_wait_for_sensor_interrupt+0x50>
	       (HAL_GetTick() - wait_begin_ms < timeout_ms))
 800109c:	f001 f820 	bl	80020e0 <HAL_GetTick>
 80010a0:	4602      	mov	r2, r0
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	1ad3      	subs	r3, r2, r3
	while ((HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) != GPIO_PIN_SET) &&
 80010a6:	683a      	ldr	r2, [r7, #0]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d8e0      	bhi.n	800106e <acc_hal_integration_wait_for_sensor_interrupt+0x12>
	}

	return HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) == GPIO_PIN_SET;
 80010ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010b4:	f001 fb00 	bl	80026b8 <HAL_GPIO_ReadPin>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	bf0c      	ite	eq
 80010be:	2301      	moveq	r3, #1
 80010c0:	2300      	movne	r3, #0
 80010c2:	b2db      	uxtb	r3, r3
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <acc_hal_integration_get_reference_frequency>:


static float acc_hal_integration_get_reference_frequency(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
	return ACC_BOARD_REF_FREQ;
 80010d0:	4b04      	ldr	r3, [pc, #16]	; (80010e4 <acc_hal_integration_get_reference_frequency+0x18>)
 80010d2:	ee07 3a90 	vmov	s15, r3
}
 80010d6:	eeb0 0a67 	vmov.f32	s0, s15
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	4bc65d40 	.word	0x4bc65d40

080010e8 <acc_hal_integration_get_implementation>:
	.optimization.transfer16 = NULL,
};


const acc_hal_t *acc_hal_integration_get_implementation(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
	return &hal;
 80010ec:	4b02      	ldr	r3, [pc, #8]	; (80010f8 <acc_hal_integration_get_implementation+0x10>)
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	0801126c 	.word	0x0801126c

080010fc <acc_integration_log>:

#define LOG_FORMAT "%02u:%02u:%02u.%03u (%c) (%s) %s\n"


void acc_integration_log(acc_log_level_t level, const char *module, const char *format, ...)
{
 80010fc:	b40c      	push	{r2, r3}
 80010fe:	b580      	push	{r7, lr}
 8001100:	b0b4      	sub	sp, #208	; 0xd0
 8001102:	af04      	add	r7, sp, #16
 8001104:	4603      	mov	r3, r0
 8001106:	6039      	str	r1, [r7, #0]
 8001108:	71fb      	strb	r3, [r7, #7]
	char    log_buffer[LOG_BUFFER_MAX_SIZE];
	va_list ap;

	va_start(ap, format);
 800110a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800110e:	60bb      	str	r3, [r7, #8]

	int ret = vsnprintf(log_buffer, LOG_BUFFER_MAX_SIZE, format, ap);
 8001110:	f107 000c 	add.w	r0, r7, #12
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800111a:	2196      	movs	r1, #150	; 0x96
 800111c:	f00c fd22 	bl	800db64 <vsniprintf>
 8001120:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc

	if (ret >= LOG_BUFFER_MAX_SIZE)
 8001124:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001128:	2b95      	cmp	r3, #149	; 0x95
 800112a:	dd0b      	ble.n	8001144 <acc_integration_log+0x48>
	{
		log_buffer[LOG_BUFFER_MAX_SIZE - 4] = '.';
 800112c:	232e      	movs	r3, #46	; 0x2e
 800112e:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
		log_buffer[LOG_BUFFER_MAX_SIZE - 3] = '.';
 8001132:	232e      	movs	r3, #46	; 0x2e
 8001134:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		log_buffer[LOG_BUFFER_MAX_SIZE - 2] = '.';
 8001138:	232e      	movs	r3, #46	; 0x2e
 800113a:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
		log_buffer[LOG_BUFFER_MAX_SIZE - 1] = 0;
 800113e:	2300      	movs	r3, #0
 8001140:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
	}

	uint32_t time_ms = acc_integration_get_time();
 8001144:	f000 f876 	bl	8001234 <acc_integration_get_time>
 8001148:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
	char     level_ch;

	unsigned int timestamp    = time_ms;
 800114c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001150:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	unsigned int hours        = timestamp / 1000 / 60 / 60;
 8001154:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001158:	4a2f      	ldr	r2, [pc, #188]	; (8001218 <acc_integration_log+0x11c>)
 800115a:	fba2 2303 	umull	r2, r3, r2, r3
 800115e:	0d5b      	lsrs	r3, r3, #21
 8001160:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	unsigned int minutes      = timestamp / 1000 / 60 % 60;
 8001164:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001168:	4a2c      	ldr	r2, [pc, #176]	; (800121c <acc_integration_log+0x120>)
 800116a:	fba2 2303 	umull	r2, r3, r2, r3
 800116e:	0b9a      	lsrs	r2, r3, #14
 8001170:	4b2b      	ldr	r3, [pc, #172]	; (8001220 <acc_integration_log+0x124>)
 8001172:	fba3 1302 	umull	r1, r3, r3, r2
 8001176:	0959      	lsrs	r1, r3, #5
 8001178:	460b      	mov	r3, r1
 800117a:	011b      	lsls	r3, r3, #4
 800117c:	1a5b      	subs	r3, r3, r1
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	unsigned int seconds      = timestamp / 1000 % 60;
 8001186:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800118a:	4a26      	ldr	r2, [pc, #152]	; (8001224 <acc_integration_log+0x128>)
 800118c:	fba2 2303 	umull	r2, r3, r2, r3
 8001190:	099a      	lsrs	r2, r3, #6
 8001192:	4b23      	ldr	r3, [pc, #140]	; (8001220 <acc_integration_log+0x124>)
 8001194:	fba3 1302 	umull	r1, r3, r3, r2
 8001198:	0959      	lsrs	r1, r3, #5
 800119a:	460b      	mov	r3, r1
 800119c:	011b      	lsls	r3, r3, #4
 800119e:	1a5b      	subs	r3, r3, r1
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	unsigned int milliseconds = timestamp % 1000;
 80011a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80011ac:	4a1d      	ldr	r2, [pc, #116]	; (8001224 <acc_integration_log+0x128>)
 80011ae:	fba2 1203 	umull	r1, r2, r2, r3
 80011b2:	0992      	lsrs	r2, r2, #6
 80011b4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80011b8:	fb01 f202 	mul.w	r2, r1, r2
 80011bc:	1a9b      	subs	r3, r3, r2
 80011be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	level_ch = (level <= ACC_LOG_LEVEL_DEBUG) ? "EWIVD"[level] : '?';
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	2b04      	cmp	r3, #4
 80011c6:	d803      	bhi.n	80011d0 <acc_integration_log+0xd4>
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	4a17      	ldr	r2, [pc, #92]	; (8001228 <acc_integration_log+0x12c>)
 80011cc:	5cd3      	ldrb	r3, [r2, r3]
 80011ce:	e000      	b.n	80011d2 <acc_integration_log+0xd6>
 80011d0:	233f      	movs	r3, #63	; 0x3f
 80011d2:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

	printf(LOG_FORMAT, hours, minutes, seconds, milliseconds, level_ch, module, log_buffer);
 80011d6:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80011da:	f107 020c 	add.w	r2, r7, #12
 80011de:	9203      	str	r2, [sp, #12]
 80011e0:	683a      	ldr	r2, [r7, #0]
 80011e2:	9202      	str	r2, [sp, #8]
 80011e4:	9301      	str	r3, [sp, #4]
 80011e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80011f0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80011f4:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 80011f8:	480c      	ldr	r0, [pc, #48]	; (800122c <acc_integration_log+0x130>)
 80011fa:	f00c fcc1 	bl	800db80 <iprintf>

	fflush(stdout);
 80011fe:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <acc_integration_log+0x134>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	4618      	mov	r0, r3
 8001206:	f00c fbb1 	bl	800d96c <fflush>

	va_end(ap);
}
 800120a:	bf00      	nop
 800120c:	37c0      	adds	r7, #192	; 0xc0
 800120e:	46bd      	mov	sp, r7
 8001210:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001214:	b002      	add	sp, #8
 8001216:	4770      	bx	lr
 8001218:	95217cb1 	.word	0x95217cb1
 800121c:	45e7b273 	.word	0x45e7b273
 8001220:	88888889 	.word	0x88888889
 8001224:	10624dd3 	.word	0x10624dd3
 8001228:	080111c4 	.word	0x080111c4
 800122c:	080111a0 	.word	0x080111a0
 8001230:	200001e4 	.word	0x200001e4

08001234 <acc_integration_get_time>:
	HAL_Delay(time_msec);
}


uint32_t acc_integration_get_time(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8001238:	f000 ff52 	bl	80020e0 <HAL_GetTick>
 800123c:	4603      	mov	r3, r0
}
 800123e:	4618      	mov	r0, r3
 8001240:	bd80      	pop	{r7, pc}
 8001242:	0000      	movs	r0, r0
 8001244:	0000      	movs	r0, r0
	...

08001248 <water_flow>:

#include <stdio.h>
#include <math.h>
#include "estimated_water_speed.h"

double water_flow(double higth, double radius, double K, double S, double n, int number_peaks) {
 8001248:	b5b0      	push	{r4, r5, r7, lr}
 800124a:	b094      	sub	sp, #80	; 0x50
 800124c:	af00      	add	r7, sp, #0
 800124e:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 8001252:	ed87 1b08 	vstr	d1, [r7, #32]
 8001256:	ed87 2b06 	vstr	d2, [r7, #24]
 800125a:	ed87 3b04 	vstr	d3, [r7, #16]
 800125e:	ed87 4b02 	vstr	d4, [r7, #8]
 8001262:	6078      	str	r0, [r7, #4]
    double theta, R, A, Q;

    if (higth == 2 * radius || number_peaks == 1) { // Full pipe
 8001264:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001268:	4602      	mov	r2, r0
 800126a:	460b      	mov	r3, r1
 800126c:	f7ff f87e 	bl	800036c <__adddf3>
 8001270:	4602      	mov	r2, r0
 8001272:	460b      	mov	r3, r1
 8001274:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001278:	f7ff fc96 	bl	8000ba8 <__aeabi_dcmpeq>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d102      	bne.n	8001288 <water_flow+0x40>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d11d      	bne.n	80012c4 <water_flow+0x7c>
        R = radius / 2; // Hydraulic radius
 8001288:	f04f 0200 	mov.w	r2, #0
 800128c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001290:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001294:	f7ff fb4a 	bl	800092c <__aeabi_ddiv>
 8001298:	4602      	mov	r2, r0
 800129a:	460b      	mov	r3, r1
 800129c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
        A = M_PI * pow(radius, 2); // Area of the pipe
 80012a0:	ed9f 1b65 	vldr	d1, [pc, #404]	; 8001438 <water_flow+0x1f0>
 80012a4:	ed97 0b08 	vldr	d0, [r7, #32]
 80012a8:	f00d feb8 	bl	800f01c <pow>
 80012ac:	ec51 0b10 	vmov	r0, r1, d0
 80012b0:	a365      	add	r3, pc, #404	; (adr r3, 8001448 <water_flow+0x200>)
 80012b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b6:	f7ff fa0f 	bl	80006d8 <__aeabi_dmul>
 80012ba:	4602      	mov	r2, r0
 80012bc:	460b      	mov	r3, r1
 80012be:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 80012c2:	e07d      	b.n	80013c0 <water_flow+0x178>
    } 
    else {
        theta = 2 * acos((radius - higth) / radius);
 80012c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80012c8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80012cc:	f7ff f84c 	bl	8000368 <__aeabi_dsub>
 80012d0:	4602      	mov	r2, r0
 80012d2:	460b      	mov	r3, r1
 80012d4:	4610      	mov	r0, r2
 80012d6:	4619      	mov	r1, r3
 80012d8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80012dc:	f7ff fb26 	bl	800092c <__aeabi_ddiv>
 80012e0:	4602      	mov	r2, r0
 80012e2:	460b      	mov	r3, r1
 80012e4:	ec43 2b17 	vmov	d7, r2, r3
 80012e8:	eeb0 0a47 	vmov.f32	s0, s14
 80012ec:	eef0 0a67 	vmov.f32	s1, s15
 80012f0:	f00d fbd2 	bl	800ea98 <acos>
 80012f4:	ec51 0b10 	vmov	r0, r1, d0
 80012f8:	4602      	mov	r2, r0
 80012fa:	460b      	mov	r3, r1
 80012fc:	f7ff f836 	bl	800036c <__adddf3>
 8001300:	4602      	mov	r2, r0
 8001302:	460b      	mov	r3, r1
 8001304:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
        R = (pow(radius, 2) * ((theta - sin(theta)) / 2)) / (radius * theta); // Hydraulic radius
 8001308:	ed9f 1b4b 	vldr	d1, [pc, #300]	; 8001438 <water_flow+0x1f0>
 800130c:	ed97 0b08 	vldr	d0, [r7, #32]
 8001310:	f00d fe84 	bl	800f01c <pow>
 8001314:	ec55 4b10 	vmov	r4, r5, d0
 8001318:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 800131c:	f00d ff38 	bl	800f190 <sin>
 8001320:	ec53 2b10 	vmov	r2, r3, d0
 8001324:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001328:	f7ff f81e 	bl	8000368 <__aeabi_dsub>
 800132c:	4602      	mov	r2, r0
 800132e:	460b      	mov	r3, r1
 8001330:	4610      	mov	r0, r2
 8001332:	4619      	mov	r1, r3
 8001334:	f04f 0200 	mov.w	r2, #0
 8001338:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800133c:	f7ff faf6 	bl	800092c <__aeabi_ddiv>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	4620      	mov	r0, r4
 8001346:	4629      	mov	r1, r5
 8001348:	f7ff f9c6 	bl	80006d8 <__aeabi_dmul>
 800134c:	4602      	mov	r2, r0
 800134e:	460b      	mov	r3, r1
 8001350:	4614      	mov	r4, r2
 8001352:	461d      	mov	r5, r3
 8001354:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001358:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800135c:	f7ff f9bc 	bl	80006d8 <__aeabi_dmul>
 8001360:	4602      	mov	r2, r0
 8001362:	460b      	mov	r3, r1
 8001364:	4620      	mov	r0, r4
 8001366:	4629      	mov	r1, r5
 8001368:	f7ff fae0 	bl	800092c <__aeabi_ddiv>
 800136c:	4602      	mov	r2, r0
 800136e:	460b      	mov	r3, r1
 8001370:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
        A = pow(radius, 2) * ((theta - sin(theta)) / 2);
 8001374:	ed9f 1b30 	vldr	d1, [pc, #192]	; 8001438 <water_flow+0x1f0>
 8001378:	ed97 0b08 	vldr	d0, [r7, #32]
 800137c:	f00d fe4e 	bl	800f01c <pow>
 8001380:	ec55 4b10 	vmov	r4, r5, d0
 8001384:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8001388:	f00d ff02 	bl	800f190 <sin>
 800138c:	ec53 2b10 	vmov	r2, r3, d0
 8001390:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001394:	f7fe ffe8 	bl	8000368 <__aeabi_dsub>
 8001398:	4602      	mov	r2, r0
 800139a:	460b      	mov	r3, r1
 800139c:	4610      	mov	r0, r2
 800139e:	4619      	mov	r1, r3
 80013a0:	f04f 0200 	mov.w	r2, #0
 80013a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013a8:	f7ff fac0 	bl	800092c <__aeabi_ddiv>
 80013ac:	4602      	mov	r2, r0
 80013ae:	460b      	mov	r3, r1
 80013b0:	4620      	mov	r0, r4
 80013b2:	4629      	mov	r1, r5
 80013b4:	f7ff f990 	bl	80006d8 <__aeabi_dmul>
 80013b8:	4602      	mov	r2, r0
 80013ba:	460b      	mov	r3, r1
 80013bc:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }

    Q = (K * A * pow(R, 2.0/3.0) * sqrt(S)) / n; // Flow rate in m^3/s
 80013c0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80013c4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80013c8:	f7ff f986 	bl	80006d8 <__aeabi_dmul>
 80013cc:	4602      	mov	r2, r0
 80013ce:	460b      	mov	r3, r1
 80013d0:	4614      	mov	r4, r2
 80013d2:	461d      	mov	r5, r3
 80013d4:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8001440 <water_flow+0x1f8>
 80013d8:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 80013dc:	f00d fe1e 	bl	800f01c <pow>
 80013e0:	ec53 2b10 	vmov	r2, r3, d0
 80013e4:	4620      	mov	r0, r4
 80013e6:	4629      	mov	r1, r5
 80013e8:	f7ff f976 	bl	80006d8 <__aeabi_dmul>
 80013ec:	4602      	mov	r2, r0
 80013ee:	460b      	mov	r3, r1
 80013f0:	4614      	mov	r4, r2
 80013f2:	461d      	mov	r5, r3
 80013f4:	ed97 0b04 	vldr	d0, [r7, #16]
 80013f8:	f00d fe80 	bl	800f0fc <sqrt>
 80013fc:	ec53 2b10 	vmov	r2, r3, d0
 8001400:	4620      	mov	r0, r4
 8001402:	4629      	mov	r1, r5
 8001404:	f7ff f968 	bl	80006d8 <__aeabi_dmul>
 8001408:	4602      	mov	r2, r0
 800140a:	460b      	mov	r3, r1
 800140c:	4610      	mov	r0, r2
 800140e:	4619      	mov	r1, r3
 8001410:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001414:	f7ff fa8a 	bl	800092c <__aeabi_ddiv>
 8001418:	4602      	mov	r2, r0
 800141a:	460b      	mov	r3, r1
 800141c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    return Q;
 8001420:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001424:	ec43 2b17 	vmov	d7, r2, r3
}
 8001428:	eeb0 0a47 	vmov.f32	s0, s14
 800142c:	eef0 0a67 	vmov.f32	s1, s15
 8001430:	3750      	adds	r7, #80	; 0x50
 8001432:	46bd      	mov	sp, r7
 8001434:	bdb0      	pop	{r4, r5, r7, pc}
 8001436:	bf00      	nop
 8001438:	00000000 	.word	0x00000000
 800143c:	40000000 	.word	0x40000000
 8001440:	55555555 	.word	0x55555555
 8001444:	3fe55555 	.word	0x3fe55555
 8001448:	54442d18 	.word	0x54442d18
 800144c:	400921fb 	.word	0x400921fb

08001450 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	60b9      	str	r1, [r7, #8]
 800145a:	607a      	str	r2, [r7, #4]
	(void)file;
	HAL_UART_Transmit(&huart2, ptr, len, 0xFFFF);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	b29a      	uxth	r2, r3
 8001460:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001464:	68b9      	ldr	r1, [r7, #8]
 8001466:	4804      	ldr	r0, [pc, #16]	; (8001478 <_write+0x28>)
 8001468:	f003 f912 	bl	8004690 <HAL_UART_Transmit>
	return len;
 800146c:	687b      	ldr	r3, [r7, #4]
}
 800146e:	4618      	mov	r0, r3
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20000278 	.word	0x20000278

0800147c <update_configuration.1>:
{
  /* USER CODE BEGIN 1 */


	void update_configuration(acc_service_configuration_t envelope_configuration, float start_m, float length_m)
	{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	ed87 0a02 	vstr	s0, [r7, #8]
 8001488:	edc7 0a01 	vstr	s1, [r7, #4]
 800148c:	f8c7 c000 	str.w	ip, [r7]

		acc_service_profile_set(envelope_configuration, ACC_SERVICE_PROFILE_4);
 8001490:	2104      	movs	r1, #4
 8001492:	68f8      	ldr	r0, [r7, #12]
 8001494:	f004 f86c 	bl	8005570 <acc_service_profile_set>
		acc_service_requested_start_set(envelope_configuration, start_m);
 8001498:	ed97 0a02 	vldr	s0, [r7, #8]
 800149c:	68f8      	ldr	r0, [r7, #12]
 800149e:	f003 fee3 	bl	8005268 <acc_service_requested_start_set>
		acc_service_requested_length_set(envelope_configuration, length_m);
 80014a2:	ed97 0a01 	vldr	s0, [r7, #4]
 80014a6:	68f8      	ldr	r0, [r7, #12]
 80014a8:	f003 feec 	bl	8005284 <acc_service_requested_length_set>
	}
 80014ac:	bf00      	nop
 80014ae:	3710      	adds	r7, #16
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <main>:
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
int main(void)
 80014ba:	f107 0310 	add.w	r3, r7, #16
 80014be:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014c0:	f000 fd9e 	bl	8002000 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014c4:	f000 f9fe 	bl	80018c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014c8:	f000 fabc 	bl	8001a44 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80014cc:	f000 fa8a 	bl	80019e4 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 80014d0:	f000 fa4a 	bl	8001968 <MX_SPI3_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_Delay(5000);
 80014d4:	f241 3088 	movw	r0, #5000	; 0x1388
 80014d8:	f000 fe0e 	bl	80020f8 <HAL_Delay>
	  acc_example_service_envelope(0, NULL);
 80014dc:	1d3b      	adds	r3, r7, #4
 80014de:	469c      	mov	ip, r3
 80014e0:	2100      	movs	r1, #0
 80014e2:	2000      	movs	r0, #0
 80014e4:	f000 f828 	bl	8001538 <acc_example_service_envelope.0>
	  HAL_Delay(5000);
 80014e8:	e7f4      	b.n	80014d4 <main+0x20>
	...

080014ec <print_data.2>:
	{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	460b      	mov	r3, r1
 80014f6:	817b      	strh	r3, [r7, #10]
 80014f8:	f8c7 c004 	str.w	ip, [r7, #4]
		for (uint16_t i = 0; i < data_length; i++)
 80014fc:	2300      	movs	r3, #0
 80014fe:	82fb      	strh	r3, [r7, #22]
 8001500:	e00b      	b.n	800151a <print_data.2+0x2e>
			printf("%6u", (unsigned int)(data[i]));
 8001502:	8afb      	ldrh	r3, [r7, #22]
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	68fa      	ldr	r2, [r7, #12]
 8001508:	4413      	add	r3, r2
 800150a:	881b      	ldrh	r3, [r3, #0]
 800150c:	4619      	mov	r1, r3
 800150e:	4808      	ldr	r0, [pc, #32]	; (8001530 <print_data.2+0x44>)
 8001510:	f00c fb36 	bl	800db80 <iprintf>
		for (uint16_t i = 0; i < data_length; i++)
 8001514:	8afb      	ldrh	r3, [r7, #22]
 8001516:	3301      	adds	r3, #1
 8001518:	82fb      	strh	r3, [r7, #22]
 800151a:	8afa      	ldrh	r2, [r7, #22]
 800151c:	897b      	ldrh	r3, [r7, #10]
 800151e:	429a      	cmp	r2, r3
 8001520:	d3ef      	bcc.n	8001502 <print_data.2+0x16>
		printf("\n");
 8001522:	200a      	movs	r0, #10
 8001524:	f00c fb3e 	bl	800dba4 <putchar>
	}
 8001528:	bf00      	nop
 800152a:	3718      	adds	r7, #24
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	080111cc 	.word	0x080111cc
 8001534:	00000000 	.word	0x00000000

08001538 <acc_example_service_envelope.0>:
	{
 8001538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800153c:	b0ac      	sub	sp, #176	; 0xb0
 800153e:	af00      	add	r7, sp, #0
 8001540:	60f8      	str	r0, [r7, #12]
 8001542:	60b9      	str	r1, [r7, #8]
 8001544:	4666      	mov	r6, ip
 8001546:	f8c7 c004 	str.w	ip, [r7, #4]
 800154a:	466b      	mov	r3, sp
 800154c:	469a      	mov	sl, r3
		float start_m  = 0.2f;
 800154e:	4bc4      	ldr	r3, [pc, #784]	; (8001860 <acc_example_service_envelope.0+0x328>)
 8001550:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		float length_m = 0.5f;
 8001554:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8001558:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		const acc_hal_t *hal = acc_hal_integration_get_implementation();
 800155c:	f7ff fdc4 	bl	80010e8 <acc_hal_integration_get_implementation>
 8001560:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
		if (!acc_rss_activate(hal))
 8001564:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8001568:	f003 fdea 	bl	8005140 <acc_rss_activate>
 800156c:	4603      	mov	r3, r0
 800156e:	f083 0301 	eor.w	r3, r3, #1
 8001572:	b2db      	uxtb	r3, r3
 8001574:	2b00      	cmp	r3, #0
 8001576:	d004      	beq.n	8001582 <acc_example_service_envelope.0+0x4a>
			printf("acc_rss_activate() failed\n");
 8001578:	48ba      	ldr	r0, [pc, #744]	; (8001864 <acc_example_service_envelope.0+0x32c>)
 800157a:	f00c fb6f 	bl	800dc5c <puts>
			return EXIT_FAILURE;
 800157e:	2301      	movs	r3, #1
 8001580:	e19a      	b.n	80018b8 <acc_example_service_envelope.0+0x380>
		acc_service_configuration_t envelope_configuration = acc_service_envelope_configuration_create();
 8001582:	f004 f937 	bl	80057f4 <acc_service_envelope_configuration_create>
 8001586:	4603      	mov	r3, r0
 8001588:	62bb      	str	r3, [r7, #40]	; 0x28
		if (envelope_configuration == NULL)
 800158a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800158c:	2b00      	cmp	r3, #0
 800158e:	d106      	bne.n	800159e <acc_example_service_envelope.0+0x66>
			printf("acc_service_envelope_configuration_create() failed\n");
 8001590:	48b5      	ldr	r0, [pc, #724]	; (8001868 <acc_example_service_envelope.0+0x330>)
 8001592:	f00c fb63 	bl	800dc5c <puts>
			acc_rss_deactivate();
 8001596:	f003 fe11 	bl	80051bc <acc_rss_deactivate>
			return EXIT_FAILURE;
 800159a:	2301      	movs	r3, #1
 800159c:	e18c      	b.n	80018b8 <acc_example_service_envelope.0+0x380>
		update_configuration(envelope_configuration, start_m, length_m);
 800159e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015a0:	46b4      	mov	ip, r6
 80015a2:	edd7 0a28 	vldr	s1, [r7, #160]	; 0xa0
 80015a6:	ed97 0a29 	vldr	s0, [r7, #164]	; 0xa4
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7ff ff66 	bl	800147c <update_configuration.1>
		acc_service_handle_t handle = acc_service_create(envelope_configuration);
 80015b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015b2:	4618      	mov	r0, r3
 80015b4:	f004 fa3e 	bl	8005a34 <acc_service_create>
 80015b8:	4603      	mov	r3, r0
 80015ba:	627b      	str	r3, [r7, #36]	; 0x24
		if (handle == NULL)
 80015bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d10b      	bne.n	80015da <acc_example_service_envelope.0+0xa2>
			printf("acc_service_create() failed\n");
 80015c2:	48aa      	ldr	r0, [pc, #680]	; (800186c <acc_example_service_envelope.0+0x334>)
 80015c4:	f00c fb4a 	bl	800dc5c <puts>
			acc_service_envelope_configuration_destroy(&envelope_configuration);
 80015c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015cc:	4618      	mov	r0, r3
 80015ce:	f004 f99f 	bl	8005910 <acc_service_envelope_configuration_destroy>
			acc_rss_deactivate();
 80015d2:	f003 fdf3 	bl	80051bc <acc_rss_deactivate>
			return EXIT_FAILURE;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e16e      	b.n	80018b8 <acc_example_service_envelope.0+0x380>
		acc_service_envelope_configuration_destroy(&envelope_configuration);
 80015da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015de:	4618      	mov	r0, r3
 80015e0:	f004 f996 	bl	8005910 <acc_service_envelope_configuration_destroy>
		acc_service_envelope_metadata_t envelope_metadata = { 0 };
 80015e4:	f107 0314 	add.w	r3, r7, #20
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]
		acc_service_envelope_get_metadata(handle, &envelope_metadata);
 80015f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f4:	f107 0214 	add.w	r2, r7, #20
 80015f8:	4611      	mov	r1, r2
 80015fa:	4618      	mov	r0, r3
 80015fc:	f004 f99a 	bl	8005934 <acc_service_envelope_get_metadata>
		if (!acc_service_activate(handle))
 8001600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001602:	4618      	mov	r0, r3
 8001604:	f003 fe92 	bl	800532c <acc_service_activate>
 8001608:	4603      	mov	r3, r0
 800160a:	f083 0301 	eor.w	r3, r3, #1
 800160e:	b2db      	uxtb	r3, r3
 8001610:	2b00      	cmp	r3, #0
 8001612:	d00b      	beq.n	800162c <acc_example_service_envelope.0+0xf4>
			printf("acc_service_activate() failed\n");
 8001614:	4896      	ldr	r0, [pc, #600]	; (8001870 <acc_example_service_envelope.0+0x338>)
 8001616:	f00c fb21 	bl	800dc5c <puts>
			acc_service_destroy(&handle);
 800161a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800161e:	4618      	mov	r0, r3
 8001620:	f004 fa7c 	bl	8005b1c <acc_service_destroy>
			acc_rss_deactivate();
 8001624:	f003 fdca 	bl	80051bc <acc_rss_deactivate>
			return EXIT_FAILURE;
 8001628:	2301      	movs	r3, #1
 800162a:	e145      	b.n	80018b8 <acc_example_service_envelope.0+0x380>
		bool                               success    = true;
 800162c:	2301      	movs	r3, #1
 800162e:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
		const int                          iterations = 5;
 8001632:	2305      	movs	r3, #5
 8001634:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		uint16_t                           data[envelope_metadata.data_length];
 8001638:	8bb9      	ldrh	r1, [r7, #28]
 800163a:	460b      	mov	r3, r1
 800163c:	3b01      	subs	r3, #1
 800163e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001642:	b28b      	uxth	r3, r1
 8001644:	2200      	movs	r2, #0
 8001646:	4698      	mov	r8, r3
 8001648:	4691      	mov	r9, r2
 800164a:	f04f 0200 	mov.w	r2, #0
 800164e:	f04f 0300 	mov.w	r3, #0
 8001652:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8001656:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 800165a:	ea4f 1208 	mov.w	r2, r8, lsl #4
 800165e:	b28b      	uxth	r3, r1
 8001660:	2200      	movs	r2, #0
 8001662:	461c      	mov	r4, r3
 8001664:	4615      	mov	r5, r2
 8001666:	f04f 0200 	mov.w	r2, #0
 800166a:	f04f 0300 	mov.w	r3, #0
 800166e:	012b      	lsls	r3, r5, #4
 8001670:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001674:	0122      	lsls	r2, r4, #4
 8001676:	460b      	mov	r3, r1
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	3307      	adds	r3, #7
 800167c:	08db      	lsrs	r3, r3, #3
 800167e:	00db      	lsls	r3, r3, #3
 8001680:	ebad 0d03 	sub.w	sp, sp, r3
 8001684:	466b      	mov	r3, sp
 8001686:	3301      	adds	r3, #1
 8001688:	085b      	lsrs	r3, r3, #1
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		for (int i = 0; i < iterations; i++)
 8001690:	2300      	movs	r3, #0
 8001692:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001696:	e0cf      	b.n	8001838 <acc_example_service_envelope.0+0x300>
			success = acc_service_envelope_get_next(handle, data, envelope_metadata.data_length, &result_info);
 8001698:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800169a:	8bba      	ldrh	r2, [r7, #28]
 800169c:	f107 0310 	add.w	r3, r7, #16
 80016a0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80016a4:	f004 f968 	bl	8005978 <acc_service_envelope_get_next>
 80016a8:	4603      	mov	r3, r0
 80016aa:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
			if (!success)
 80016ae:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80016b2:	f083 0301 	eor.w	r3, r3, #1
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	f040 80e3 	bne.w	8001884 <acc_example_service_envelope.0+0x34c>
			int* peaks = mutliple_peak_detection(data, envelope_metadata.data_length);
 80016be:	8bbb      	ldrh	r3, [r7, #28]
 80016c0:	4619      	mov	r1, r3
 80016c2:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80016c6:	f000 fa54 	bl	8001b72 <mutliple_peak_detection>
 80016ca:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
			print_data(data, envelope_metadata.data_length);
 80016ce:	8bbb      	ldrh	r3, [r7, #28]
 80016d0:	46b4      	mov	ip, r6
 80016d2:	4619      	mov	r1, r3
 80016d4:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80016d8:	f7ff ff08 	bl	80014ec <print_data.2>
			printf("Peaks ");
 80016dc:	4865      	ldr	r0, [pc, #404]	; (8001874 <acc_example_service_envelope.0+0x33c>)
 80016de:	f00c fa4f 	bl	800db80 <iprintf>
			printf("%6u ", (unsigned int)(peaks[0]));
 80016e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4619      	mov	r1, r3
 80016ea:	4863      	ldr	r0, [pc, #396]	; (8001878 <acc_example_service_envelope.0+0x340>)
 80016ec:	f00c fa48 	bl	800db80 <iprintf>
			printf("%6u ", (unsigned int)(peaks[1]));
 80016f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80016f4:	3304      	adds	r3, #4
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4619      	mov	r1, r3
 80016fa:	485f      	ldr	r0, [pc, #380]	; (8001878 <acc_example_service_envelope.0+0x340>)
 80016fc:	f00c fa40 	bl	800db80 <iprintf>
			printf("\n");
 8001700:	200a      	movs	r0, #10
 8001702:	f00c fa4f 	bl	800dba4 <putchar>
		    double oldMin = 0;
 8001706:	f04f 0200 	mov.w	r2, #0
 800170a:	f04f 0300 	mov.w	r3, #0
 800170e:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
		    double oldMax = envelope_metadata.data_length;
 8001712:	8bbb      	ldrh	r3, [r7, #28]
 8001714:	4618      	mov	r0, r3
 8001716:	f7fe ff65 	bl	80005e4 <__aeabi_ui2d>
 800171a:	4602      	mov	r2, r0
 800171c:	460b      	mov	r3, r1
 800171e:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		    double newMin = start_m;
 8001722:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8001726:	f7fe ff7f 	bl	8000628 <__aeabi_f2d>
 800172a:	4602      	mov	r2, r0
 800172c:	460b      	mov	r3, r1
 800172e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
		    double newMax = start_m + length_m;
 8001732:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8001736:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800173a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800173e:	ee17 0a90 	vmov	r0, s15
 8001742:	f7fe ff71 	bl	8000628 <__aeabi_f2d>
 8001746:	4602      	mov	r2, r0
 8001748:	460b      	mov	r3, r1
 800174a:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
		    double radius = 10; // m
 800174e:	f04f 0200 	mov.w	r2, #0
 8001752:	4b4a      	ldr	r3, [pc, #296]	; (800187c <acc_example_service_envelope.0+0x344>)
 8001754:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
		    double value = radius - (peaks[1] - peaks[0]);
 8001758:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800175c:	3304      	adds	r3, #4
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	4618      	mov	r0, r3
 800176a:	f7fe ff4b 	bl	8000604 <__aeabi_i2d>
 800176e:	4602      	mov	r2, r0
 8001770:	460b      	mov	r3, r1
 8001772:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001776:	f7fe fdf7 	bl	8000368 <__aeabi_dsub>
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
		    double higth = (((value - oldMin) / (oldMax - oldMin)) * (newMax - newMin) + newMin);
 8001782:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8001786:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800178a:	f7fe fded 	bl	8000368 <__aeabi_dsub>
 800178e:	4602      	mov	r2, r0
 8001790:	460b      	mov	r3, r1
 8001792:	4614      	mov	r4, r2
 8001794:	461d      	mov	r5, r3
 8001796:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800179a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800179e:	f7fe fde3 	bl	8000368 <__aeabi_dsub>
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	4620      	mov	r0, r4
 80017a8:	4629      	mov	r1, r5
 80017aa:	f7ff f8bf 	bl	800092c <__aeabi_ddiv>
 80017ae:	4602      	mov	r2, r0
 80017b0:	460b      	mov	r3, r1
 80017b2:	4614      	mov	r4, r2
 80017b4:	461d      	mov	r5, r3
 80017b6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80017ba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80017be:	f7fe fdd3 	bl	8000368 <__aeabi_dsub>
 80017c2:	4602      	mov	r2, r0
 80017c4:	460b      	mov	r3, r1
 80017c6:	4620      	mov	r0, r4
 80017c8:	4629      	mov	r1, r5
 80017ca:	f7fe ff85 	bl	80006d8 <__aeabi_dmul>
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
 80017d2:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80017d6:	f7fe fdc9 	bl	800036c <__adddf3>
 80017da:	4602      	mov	r2, r0
 80017dc:	460b      	mov	r3, r1
 80017de:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		    double K = 1.49; // Constant
 80017e2:	a319      	add	r3, pc, #100	; (adr r3, 8001848 <acc_example_service_envelope.0+0x310>)
 80017e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		    double S = 0.001; // Slope of the pipe, assumption.
 80017ec:	a318      	add	r3, pc, #96	; (adr r3, 8001850 <acc_example_service_envelope.0+0x318>)
 80017ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
		    double n = 0.20; // Roughness coefficient, assumption.
 80017f6:	a318      	add	r3, pc, #96	; (adr r3, 8001858 <acc_example_service_envelope.0+0x320>)
 80017f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
		    double Q = water_flow(higth, radius, K, S, n, 1);
 8001800:	2001      	movs	r0, #1
 8001802:	ed97 4b0e 	vldr	d4, [r7, #56]	; 0x38
 8001806:	ed97 3b10 	vldr	d3, [r7, #64]	; 0x40
 800180a:	ed97 2b12 	vldr	d2, [r7, #72]	; 0x48
 800180e:	ed97 1b18 	vldr	d1, [r7, #96]	; 0x60
 8001812:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 8001816:	f7ff fd17 	bl	8001248 <water_flow>
 800181a:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
			printf("Peaks ");
 800181e:	4815      	ldr	r0, [pc, #84]	; (8001874 <acc_example_service_envelope.0+0x33c>)
 8001820:	f00c f9ae 	bl	800db80 <iprintf>
		    printf("%6u", Q);
 8001824:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001828:	4815      	ldr	r0, [pc, #84]	; (8001880 <acc_example_service_envelope.0+0x348>)
 800182a:	f00c f9a9 	bl	800db80 <iprintf>
		for (int i = 0; i < iterations; i++)
 800182e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001832:	3301      	adds	r3, #1
 8001834:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001838:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800183c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001840:	429a      	cmp	r2, r3
 8001842:	f6ff af29 	blt.w	8001698 <acc_example_service_envelope.0+0x160>
 8001846:	e01e      	b.n	8001886 <acc_example_service_envelope.0+0x34e>
 8001848:	3d70a3d7 	.word	0x3d70a3d7
 800184c:	3ff7d70a 	.word	0x3ff7d70a
 8001850:	d2f1a9fc 	.word	0xd2f1a9fc
 8001854:	3f50624d 	.word	0x3f50624d
 8001858:	9999999a 	.word	0x9999999a
 800185c:	3fc99999 	.word	0x3fc99999
 8001860:	3e4ccccd 	.word	0x3e4ccccd
 8001864:	080111d0 	.word	0x080111d0
 8001868:	080111ec 	.word	0x080111ec
 800186c:	08011220 	.word	0x08011220
 8001870:	0801123c 	.word	0x0801123c
 8001874:	0801125c 	.word	0x0801125c
 8001878:	08011264 	.word	0x08011264
 800187c:	40240000 	.word	0x40240000
 8001880:	080111cc 	.word	0x080111cc
				break;
 8001884:	bf00      	nop
		bool deactivated = acc_service_deactivate(handle);
 8001886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001888:	4618      	mov	r0, r3
 800188a:	f003 fd91 	bl	80053b0 <acc_service_deactivate>
 800188e:	4603      	mov	r3, r0
 8001890:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		acc_service_destroy(&handle);
 8001894:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001898:	4618      	mov	r0, r3
 800189a:	f004 f93f 	bl	8005b1c <acc_service_destroy>
		acc_rss_deactivate();
 800189e:	f003 fc8d 	bl	80051bc <acc_rss_deactivate>
		if (deactivated && success)
 80018a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d005      	beq.n	80018b6 <acc_example_service_envelope.0+0x37e>
 80018aa:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <acc_example_service_envelope.0+0x37e>
			return EXIT_SUCCESS;
 80018b2:	2300      	movs	r3, #0
 80018b4:	e000      	b.n	80018b8 <acc_example_service_envelope.0+0x380>
		return EXIT_FAILURE;
 80018b6:	2301      	movs	r3, #1
 80018b8:	46d5      	mov	sp, sl
	}
 80018ba:	4618      	mov	r0, r3
 80018bc:	37b0      	adds	r7, #176	; 0xb0
 80018be:	46bd      	mov	sp, r7
 80018c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080018c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b096      	sub	sp, #88	; 0x58
 80018c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018ca:	f107 0314 	add.w	r3, r7, #20
 80018ce:	2244      	movs	r2, #68	; 0x44
 80018d0:	2100      	movs	r1, #0
 80018d2:	4618      	mov	r0, r3
 80018d4:	f00c f9e4 	bl	800dca0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018d8:	463b      	mov	r3, r7
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	605a      	str	r2, [r3, #4]
 80018e0:	609a      	str	r2, [r3, #8]
 80018e2:	60da      	str	r2, [r3, #12]
 80018e4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80018e6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80018ea:	f000 ff47 	bl	800277c <HAL_PWREx_ControlVoltageScaling>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80018f4:	f000 f938 	bl	8001b68 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018f8:	2302      	movs	r3, #2
 80018fa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001900:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001902:	2310      	movs	r3, #16
 8001904:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001906:	2302      	movs	r3, #2
 8001908:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800190a:	2302      	movs	r3, #2
 800190c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800190e:	2301      	movs	r3, #1
 8001910:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001912:	230a      	movs	r3, #10
 8001914:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001916:	2307      	movs	r3, #7
 8001918:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800191a:	2302      	movs	r3, #2
 800191c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800191e:	2302      	movs	r3, #2
 8001920:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001922:	f107 0314 	add.w	r3, r7, #20
 8001926:	4618      	mov	r0, r3
 8001928:	f000 ff7e 	bl	8002828 <HAL_RCC_OscConfig>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001932:	f000 f919 	bl	8001b68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001936:	230f      	movs	r3, #15
 8001938:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800193a:	2303      	movs	r3, #3
 800193c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800193e:	2300      	movs	r3, #0
 8001940:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001942:	2300      	movs	r3, #0
 8001944:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001946:	2300      	movs	r3, #0
 8001948:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800194a:	463b      	mov	r3, r7
 800194c:	2104      	movs	r1, #4
 800194e:	4618      	mov	r0, r3
 8001950:	f001 fb46 	bl	8002fe0 <HAL_RCC_ClockConfig>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800195a:	f000 f905 	bl	8001b68 <Error_Handler>
  }
}
 800195e:	bf00      	nop
 8001960:	3758      	adds	r7, #88	; 0x58
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
	...

08001968 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800196c:	4b1b      	ldr	r3, [pc, #108]	; (80019dc <MX_SPI3_Init+0x74>)
 800196e:	4a1c      	ldr	r2, [pc, #112]	; (80019e0 <MX_SPI3_Init+0x78>)
 8001970:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001972:	4b1a      	ldr	r3, [pc, #104]	; (80019dc <MX_SPI3_Init+0x74>)
 8001974:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001978:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800197a:	4b18      	ldr	r3, [pc, #96]	; (80019dc <MX_SPI3_Init+0x74>)
 800197c:	2200      	movs	r2, #0
 800197e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001980:	4b16      	ldr	r3, [pc, #88]	; (80019dc <MX_SPI3_Init+0x74>)
 8001982:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001986:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001988:	4b14      	ldr	r3, [pc, #80]	; (80019dc <MX_SPI3_Init+0x74>)
 800198a:	2200      	movs	r2, #0
 800198c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800198e:	4b13      	ldr	r3, [pc, #76]	; (80019dc <MX_SPI3_Init+0x74>)
 8001990:	2200      	movs	r2, #0
 8001992:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001994:	4b11      	ldr	r3, [pc, #68]	; (80019dc <MX_SPI3_Init+0x74>)
 8001996:	f44f 7200 	mov.w	r2, #512	; 0x200
 800199a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800199c:	4b0f      	ldr	r3, [pc, #60]	; (80019dc <MX_SPI3_Init+0x74>)
 800199e:	2228      	movs	r2, #40	; 0x28
 80019a0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019a2:	4b0e      	ldr	r3, [pc, #56]	; (80019dc <MX_SPI3_Init+0x74>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80019a8:	4b0c      	ldr	r3, [pc, #48]	; (80019dc <MX_SPI3_Init+0x74>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019ae:	4b0b      	ldr	r3, [pc, #44]	; (80019dc <MX_SPI3_Init+0x74>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80019b4:	4b09      	ldr	r3, [pc, #36]	; (80019dc <MX_SPI3_Init+0x74>)
 80019b6:	2207      	movs	r2, #7
 80019b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80019ba:	4b08      	ldr	r3, [pc, #32]	; (80019dc <MX_SPI3_Init+0x74>)
 80019bc:	2200      	movs	r2, #0
 80019be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80019c0:	4b06      	ldr	r3, [pc, #24]	; (80019dc <MX_SPI3_Init+0x74>)
 80019c2:	2208      	movs	r2, #8
 80019c4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80019c6:	4805      	ldr	r0, [pc, #20]	; (80019dc <MX_SPI3_Init+0x74>)
 80019c8:	f002 f9ea 	bl	8003da0 <HAL_SPI_Init>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80019d2:	f000 f8c9 	bl	8001b68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	20000214 	.word	0x20000214
 80019e0:	40003c00 	.word	0x40003c00

080019e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019e8:	4b14      	ldr	r3, [pc, #80]	; (8001a3c <MX_USART2_UART_Init+0x58>)
 80019ea:	4a15      	ldr	r2, [pc, #84]	; (8001a40 <MX_USART2_UART_Init+0x5c>)
 80019ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80019ee:	4b13      	ldr	r3, [pc, #76]	; (8001a3c <MX_USART2_UART_Init+0x58>)
 80019f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019f6:	4b11      	ldr	r3, [pc, #68]	; (8001a3c <MX_USART2_UART_Init+0x58>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019fc:	4b0f      	ldr	r3, [pc, #60]	; (8001a3c <MX_USART2_UART_Init+0x58>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a02:	4b0e      	ldr	r3, [pc, #56]	; (8001a3c <MX_USART2_UART_Init+0x58>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a08:	4b0c      	ldr	r3, [pc, #48]	; (8001a3c <MX_USART2_UART_Init+0x58>)
 8001a0a:	220c      	movs	r2, #12
 8001a0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a0e:	4b0b      	ldr	r3, [pc, #44]	; (8001a3c <MX_USART2_UART_Init+0x58>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a14:	4b09      	ldr	r3, [pc, #36]	; (8001a3c <MX_USART2_UART_Init+0x58>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a1a:	4b08      	ldr	r3, [pc, #32]	; (8001a3c <MX_USART2_UART_Init+0x58>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a20:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <MX_USART2_UART_Init+0x58>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a26:	4805      	ldr	r0, [pc, #20]	; (8001a3c <MX_USART2_UART_Init+0x58>)
 8001a28:	f002 fde4 	bl	80045f4 <HAL_UART_Init>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001a32:	f000 f899 	bl	8001b68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a36:	bf00      	nop
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000278 	.word	0x20000278
 8001a40:	40004400 	.word	0x40004400

08001a44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b08a      	sub	sp, #40	; 0x28
 8001a48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a4a:	f107 0314 	add.w	r3, r7, #20
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	605a      	str	r2, [r3, #4]
 8001a54:	609a      	str	r2, [r3, #8]
 8001a56:	60da      	str	r2, [r3, #12]
 8001a58:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a5a:	4b40      	ldr	r3, [pc, #256]	; (8001b5c <MX_GPIO_Init+0x118>)
 8001a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a5e:	4a3f      	ldr	r2, [pc, #252]	; (8001b5c <MX_GPIO_Init+0x118>)
 8001a60:	f043 0304 	orr.w	r3, r3, #4
 8001a64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a66:	4b3d      	ldr	r3, [pc, #244]	; (8001b5c <MX_GPIO_Init+0x118>)
 8001a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a6a:	f003 0304 	and.w	r3, r3, #4
 8001a6e:	613b      	str	r3, [r7, #16]
 8001a70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a72:	4b3a      	ldr	r3, [pc, #232]	; (8001b5c <MX_GPIO_Init+0x118>)
 8001a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a76:	4a39      	ldr	r2, [pc, #228]	; (8001b5c <MX_GPIO_Init+0x118>)
 8001a78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a7e:	4b37      	ldr	r3, [pc, #220]	; (8001b5c <MX_GPIO_Init+0x118>)
 8001a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a8a:	4b34      	ldr	r3, [pc, #208]	; (8001b5c <MX_GPIO_Init+0x118>)
 8001a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a8e:	4a33      	ldr	r2, [pc, #204]	; (8001b5c <MX_GPIO_Init+0x118>)
 8001a90:	f043 0301 	orr.w	r3, r3, #1
 8001a94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a96:	4b31      	ldr	r3, [pc, #196]	; (8001b5c <MX_GPIO_Init+0x118>)
 8001a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	60bb      	str	r3, [r7, #8]
 8001aa0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa2:	4b2e      	ldr	r3, [pc, #184]	; (8001b5c <MX_GPIO_Init+0x118>)
 8001aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa6:	4a2d      	ldr	r2, [pc, #180]	; (8001b5c <MX_GPIO_Init+0x118>)
 8001aa8:	f043 0302 	orr.w	r3, r3, #2
 8001aac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aae:	4b2b      	ldr	r3, [pc, #172]	; (8001b5c <MX_GPIO_Init+0x118>)
 8001ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	607b      	str	r3, [r7, #4]
 8001ab8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001aba:	2200      	movs	r2, #0
 8001abc:	2120      	movs	r1, #32
 8001abe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ac2:	f000 fe11 	bl	80026e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A111_ENABLE_Pin|A111_CS_N_Pin, GPIO_PIN_RESET);
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2160      	movs	r1, #96	; 0x60
 8001aca:	4825      	ldr	r0, [pc, #148]	; (8001b60 <MX_GPIO_Init+0x11c>)
 8001acc:	f000 fe0c 	bl	80026e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001ad0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ad4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ad6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001ada:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001adc:	2300      	movs	r3, #0
 8001ade:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001ae0:	f107 0314 	add.w	r3, r7, #20
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	481f      	ldr	r0, [pc, #124]	; (8001b64 <MX_GPIO_Init+0x120>)
 8001ae8:	f000 fc3c 	bl	8002364 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001aec:	2320      	movs	r3, #32
 8001aee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001af0:	2301      	movs	r3, #1
 8001af2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af4:	2300      	movs	r3, #0
 8001af6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af8:	2300      	movs	r3, #0
 8001afa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001afc:	f107 0314 	add.w	r3, r7, #20
 8001b00:	4619      	mov	r1, r3
 8001b02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b06:	f000 fc2d 	bl	8002364 <HAL_GPIO_Init>

  /*Configure GPIO pin : A111_SENSOR_INTERRUPT_Pin */
  GPIO_InitStruct.Pin = A111_SENSOR_INTERRUPT_Pin;
 8001b0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b10:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b16:	2300      	movs	r3, #0
 8001b18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(A111_SENSOR_INTERRUPT_GPIO_Port, &GPIO_InitStruct);
 8001b1a:	f107 0314 	add.w	r3, r7, #20
 8001b1e:	4619      	mov	r1, r3
 8001b20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b24:	f000 fc1e 	bl	8002364 <HAL_GPIO_Init>

  /*Configure GPIO pins : A111_ENABLE_Pin A111_CS_N_Pin */
  GPIO_InitStruct.Pin = A111_ENABLE_Pin|A111_CS_N_Pin;
 8001b28:	2360      	movs	r3, #96	; 0x60
 8001b2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b30:	2300      	movs	r3, #0
 8001b32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b34:	2300      	movs	r3, #0
 8001b36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b38:	f107 0314 	add.w	r3, r7, #20
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4808      	ldr	r0, [pc, #32]	; (8001b60 <MX_GPIO_Init+0x11c>)
 8001b40:	f000 fc10 	bl	8002364 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001b44:	2200      	movs	r2, #0
 8001b46:	2100      	movs	r1, #0
 8001b48:	2017      	movs	r0, #23
 8001b4a:	f000 fbd4 	bl	80022f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001b4e:	2017      	movs	r0, #23
 8001b50:	f000 fbed 	bl	800232e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b54:	bf00      	nop
 8001b56:	3728      	adds	r7, #40	; 0x28
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	48000400 	.word	0x48000400
 8001b64:	48000800 	.word	0x48000800

08001b68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001b6c:	b672      	cpsid	i
}
 8001b6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b70:	e7fe      	b.n	8001b70 <Error_Handler+0x8>

08001b72 <mutliple_peak_detection>:

struct Tuple{
	int index;
	uint16_t value;
};
int* mutliple_peak_detection(uint16_t *data, uint16_t data_length){
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b08c      	sub	sp, #48	; 0x30
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	807b      	strh	r3, [r7, #2]

	uint16_t sum = 0;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	85fb      	strh	r3, [r7, #46]	; 0x2e
	for (int i = 0; i < data_length; i++){
 8001b82:	2300      	movs	r3, #0
 8001b84:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b86:	e00a      	b.n	8001b9e <mutliple_peak_detection+0x2c>
		sum = sum + data[i];
 8001b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	4413      	add	r3, r2
 8001b90:	881a      	ldrh	r2, [r3, #0]
 8001b92:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001b94:	4413      	add	r3, r2
 8001b96:	85fb      	strh	r3, [r7, #46]	; 0x2e
	for (int i = 0; i < data_length; i++){
 8001b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b9e:	887b      	ldrh	r3, [r7, #2]
 8001ba0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	dbf0      	blt.n	8001b88 <mutliple_peak_detection+0x16>

	}
	uint16_t baseline = sum/data_length;
 8001ba6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001ba8:	887b      	ldrh	r3, [r7, #2]
 8001baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bae:	847b      	strh	r3, [r7, #34]	; 0x22
	struct Tuple peaks[] = {
 8001bb0:	f107 030c 	add.w	r3, r7, #12
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	605a      	str	r2, [r3, #4]
 8001bba:	609a      	str	r2, [r3, #8]
 8001bbc:	60da      	str	r2, [r3, #12]
						   {0,0},
						   {0,0}
	};

	for (int i = 0;i<data_length-5;i++){
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	627b      	str	r3, [r7, #36]	; 0x24
 8001bc2:	e04d      	b.n	8001c60 <mutliple_peak_detection+0xee>
		if (data[i] > data[i-1] && data[i] > data[i+5]){
 8001bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	4413      	add	r3, r2
 8001bcc:	881a      	ldrh	r2, [r3, #0]
 8001bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8001bd4:	3b01      	subs	r3, #1
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	6879      	ldr	r1, [r7, #4]
 8001bda:	440b      	add	r3, r1
 8001bdc:	881b      	ldrh	r3, [r3, #0]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d93b      	bls.n	8001c5a <mutliple_peak_detection+0xe8>
 8001be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	4413      	add	r3, r2
 8001bea:	881a      	ldrh	r2, [r3, #0]
 8001bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bee:	3305      	adds	r3, #5
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	6879      	ldr	r1, [r7, #4]
 8001bf4:	440b      	add	r3, r1
 8001bf6:	881b      	ldrh	r3, [r3, #0]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d92e      	bls.n	8001c5a <mutliple_peak_detection+0xe8>
			if (data[i] > peaks[0].value){
 8001bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	4413      	add	r3, r2
 8001c04:	881a      	ldrh	r2, [r3, #0]
 8001c06:	8a3b      	ldrh	r3, [r7, #16]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d911      	bls.n	8001c30 <mutliple_peak_detection+0xbe>
				if (i - peaks[0].index > 10){
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b0a      	cmp	r3, #10
 8001c14:	dd03      	ble.n	8001c1e <mutliple_peak_detection+0xac>
					peaks[1].index = peaks[0].index;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	617b      	str	r3, [r7, #20]
					peaks[1].value = peaks[0].value;
 8001c1a:	8a3b      	ldrh	r3, [r7, #16]
 8001c1c:	833b      	strh	r3, [r7, #24]
				}
				peaks[0].index = i;
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c20:	60fb      	str	r3, [r7, #12]
				peaks[0].value = data[i];
 8001c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	4413      	add	r3, r2
 8001c2a:	881b      	ldrh	r3, [r3, #0]
 8001c2c:	823b      	strh	r3, [r7, #16]
 8001c2e:	e014      	b.n	8001c5a <mutliple_peak_detection+0xe8>
			}

			else if (data[i] > peaks[1].value && i - peaks[0].index > 10){
 8001c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	4413      	add	r3, r2
 8001c38:	881a      	ldrh	r2, [r3, #0]
 8001c3a:	8b3b      	ldrh	r3, [r7, #24]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d90c      	bls.n	8001c5a <mutliple_peak_detection+0xe8>
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b0a      	cmp	r3, #10
 8001c48:	dd07      	ble.n	8001c5a <mutliple_peak_detection+0xe8>
				peaks[1].index = i;
 8001c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4c:	617b      	str	r3, [r7, #20]
				peaks[1].value = data[i];
 8001c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	4413      	add	r3, r2
 8001c56:	881b      	ldrh	r3, [r3, #0]
 8001c58:	833b      	strh	r3, [r7, #24]
	for (int i = 0;i<data_length-5;i++){
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c60:	887b      	ldrh	r3, [r7, #2]
 8001c62:	3b05      	subs	r3, #5
 8001c64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c66:	429a      	cmp	r2, r3
 8001c68:	dbac      	blt.n	8001bc4 <mutliple_peak_detection+0x52>
			}
		}
	}
	int* peakIndexes = (int*)malloc(2 * sizeof(int));
 8001c6a:	2008      	movs	r0, #8
 8001c6c:	f00b fd20 	bl	800d6b0 <malloc>
 8001c70:	4603      	mov	r3, r0
 8001c72:	61fb      	str	r3, [r7, #28]

	peakIndexes[0] = peaks[0].index;
 8001c74:	68fa      	ldr	r2, [r7, #12]
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	601a      	str	r2, [r3, #0]
	peakIndexes[1] = peaks[1].index;
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	3304      	adds	r3, #4
 8001c7e:	697a      	ldr	r2, [r7, #20]
 8001c80:	601a      	str	r2, [r3, #0]

	return peakIndexes;
 8001c82:	69fb      	ldr	r3, [r7, #28]



}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3730      	adds	r7, #48	; 0x30
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c92:	4b0f      	ldr	r3, [pc, #60]	; (8001cd0 <HAL_MspInit+0x44>)
 8001c94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c96:	4a0e      	ldr	r2, [pc, #56]	; (8001cd0 <HAL_MspInit+0x44>)
 8001c98:	f043 0301 	orr.w	r3, r3, #1
 8001c9c:	6613      	str	r3, [r2, #96]	; 0x60
 8001c9e:	4b0c      	ldr	r3, [pc, #48]	; (8001cd0 <HAL_MspInit+0x44>)
 8001ca0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ca2:	f003 0301 	and.w	r3, r3, #1
 8001ca6:	607b      	str	r3, [r7, #4]
 8001ca8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001caa:	4b09      	ldr	r3, [pc, #36]	; (8001cd0 <HAL_MspInit+0x44>)
 8001cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cae:	4a08      	ldr	r2, [pc, #32]	; (8001cd0 <HAL_MspInit+0x44>)
 8001cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cb4:	6593      	str	r3, [r2, #88]	; 0x58
 8001cb6:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <HAL_MspInit+0x44>)
 8001cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cbe:	603b      	str	r3, [r7, #0]
 8001cc0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	40021000 	.word	0x40021000

08001cd4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b08a      	sub	sp, #40	; 0x28
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cdc:	f107 0314 	add.w	r3, r7, #20
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	605a      	str	r2, [r3, #4]
 8001ce6:	609a      	str	r2, [r3, #8]
 8001ce8:	60da      	str	r2, [r3, #12]
 8001cea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a17      	ldr	r2, [pc, #92]	; (8001d50 <HAL_SPI_MspInit+0x7c>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d128      	bne.n	8001d48 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001cf6:	4b17      	ldr	r3, [pc, #92]	; (8001d54 <HAL_SPI_MspInit+0x80>)
 8001cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cfa:	4a16      	ldr	r2, [pc, #88]	; (8001d54 <HAL_SPI_MspInit+0x80>)
 8001cfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d00:	6593      	str	r3, [r2, #88]	; 0x58
 8001d02:	4b14      	ldr	r3, [pc, #80]	; (8001d54 <HAL_SPI_MspInit+0x80>)
 8001d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d0a:	613b      	str	r3, [r7, #16]
 8001d0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d0e:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <HAL_SPI_MspInit+0x80>)
 8001d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d12:	4a10      	ldr	r2, [pc, #64]	; (8001d54 <HAL_SPI_MspInit+0x80>)
 8001d14:	f043 0304 	orr.w	r3, r3, #4
 8001d18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d1a:	4b0e      	ldr	r3, [pc, #56]	; (8001d54 <HAL_SPI_MspInit+0x80>)
 8001d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d1e:	f003 0304 	and.w	r3, r3, #4
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = A111_SPI_SCK_Pin|A111_SPI_MISO_Pin|A111_SPI_MOSI_Pin;
 8001d26:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001d2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d30:	2300      	movs	r3, #0
 8001d32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d34:	2303      	movs	r3, #3
 8001d36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d38:	2306      	movs	r3, #6
 8001d3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d3c:	f107 0314 	add.w	r3, r7, #20
 8001d40:	4619      	mov	r1, r3
 8001d42:	4805      	ldr	r0, [pc, #20]	; (8001d58 <HAL_SPI_MspInit+0x84>)
 8001d44:	f000 fb0e 	bl	8002364 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001d48:	bf00      	nop
 8001d4a:	3728      	adds	r7, #40	; 0x28
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40003c00 	.word	0x40003c00
 8001d54:	40021000 	.word	0x40021000
 8001d58:	48000800 	.word	0x48000800

08001d5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b0ac      	sub	sp, #176	; 0xb0
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d64:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	605a      	str	r2, [r3, #4]
 8001d6e:	609a      	str	r2, [r3, #8]
 8001d70:	60da      	str	r2, [r3, #12]
 8001d72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d74:	f107 0314 	add.w	r3, r7, #20
 8001d78:	2288      	movs	r2, #136	; 0x88
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f00b ff8f 	bl	800dca0 <memset>
  if(huart->Instance==USART2)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a21      	ldr	r2, [pc, #132]	; (8001e0c <HAL_UART_MspInit+0xb0>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d13b      	bne.n	8001e04 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001d90:	2300      	movs	r3, #0
 8001d92:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d94:	f107 0314 	add.w	r3, r7, #20
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f001 fb45 	bl	8003428 <HAL_RCCEx_PeriphCLKConfig>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001da4:	f7ff fee0 	bl	8001b68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001da8:	4b19      	ldr	r3, [pc, #100]	; (8001e10 <HAL_UART_MspInit+0xb4>)
 8001daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dac:	4a18      	ldr	r2, [pc, #96]	; (8001e10 <HAL_UART_MspInit+0xb4>)
 8001dae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001db2:	6593      	str	r3, [r2, #88]	; 0x58
 8001db4:	4b16      	ldr	r3, [pc, #88]	; (8001e10 <HAL_UART_MspInit+0xb4>)
 8001db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dbc:	613b      	str	r3, [r7, #16]
 8001dbe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc0:	4b13      	ldr	r3, [pc, #76]	; (8001e10 <HAL_UART_MspInit+0xb4>)
 8001dc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc4:	4a12      	ldr	r2, [pc, #72]	; (8001e10 <HAL_UART_MspInit+0xb4>)
 8001dc6:	f043 0301 	orr.w	r3, r3, #1
 8001dca:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dcc:	4b10      	ldr	r3, [pc, #64]	; (8001e10 <HAL_UART_MspInit+0xb4>)
 8001dce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd0:	f003 0301 	and.w	r3, r3, #1
 8001dd4:	60fb      	str	r3, [r7, #12]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001dd8:	230c      	movs	r3, #12
 8001dda:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dde:	2302      	movs	r3, #2
 8001de0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de4:	2300      	movs	r3, #0
 8001de6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dea:	2303      	movs	r3, #3
 8001dec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001df0:	2307      	movs	r3, #7
 8001df2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e00:	f000 fab0 	bl	8002364 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e04:	bf00      	nop
 8001e06:	37b0      	adds	r7, #176	; 0xb0
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40004400 	.word	0x40004400
 8001e10:	40021000 	.word	0x40021000

08001e14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e18:	e7fe      	b.n	8001e18 <NMI_Handler+0x4>

08001e1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e1e:	e7fe      	b.n	8001e1e <HardFault_Handler+0x4>

08001e20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e24:	e7fe      	b.n	8001e24 <MemManage_Handler+0x4>

08001e26 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e26:	b480      	push	{r7}
 8001e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e2a:	e7fe      	b.n	8001e2a <BusFault_Handler+0x4>

08001e2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e30:	e7fe      	b.n	8001e30 <UsageFault_Handler+0x4>

08001e32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e32:	b480      	push	{r7}
 8001e34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e36:	bf00      	nop
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e44:	bf00      	nop
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr

08001e4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e52:	bf00      	nop
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e60:	f000 f92a 	bl	80020b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e64:	bf00      	nop
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(A111_SENSOR_INTERRUPT_Pin);
 8001e6c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001e70:	f000 fc52 	bl	8002718 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001e74:	bf00      	nop
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e84:	2300      	movs	r3, #0
 8001e86:	617b      	str	r3, [r7, #20]
 8001e88:	e00a      	b.n	8001ea0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e8a:	f3af 8000 	nop.w
 8001e8e:	4601      	mov	r1, r0
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	1c5a      	adds	r2, r3, #1
 8001e94:	60ba      	str	r2, [r7, #8]
 8001e96:	b2ca      	uxtb	r2, r1
 8001e98:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	617b      	str	r3, [r7, #20]
 8001ea0:	697a      	ldr	r2, [r7, #20]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	dbf0      	blt.n	8001e8a <_read+0x12>
  }

  return len;
 8001ea8:	687b      	ldr	r3, [r7, #4]
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3718      	adds	r7, #24
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	b083      	sub	sp, #12
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001eba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr

08001eca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	b083      	sub	sp, #12
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
 8001ed2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001eda:	605a      	str	r2, [r3, #4]
  return 0;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr

08001eea <_isatty>:

int _isatty(int file)
{
 8001eea:	b480      	push	{r7}
 8001eec:	b083      	sub	sp, #12
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ef2:	2301      	movs	r3, #1
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3714      	adds	r7, #20
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
	...

08001f1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f24:	4a14      	ldr	r2, [pc, #80]	; (8001f78 <_sbrk+0x5c>)
 8001f26:	4b15      	ldr	r3, [pc, #84]	; (8001f7c <_sbrk+0x60>)
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f30:	4b13      	ldr	r3, [pc, #76]	; (8001f80 <_sbrk+0x64>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d102      	bne.n	8001f3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f38:	4b11      	ldr	r3, [pc, #68]	; (8001f80 <_sbrk+0x64>)
 8001f3a:	4a12      	ldr	r2, [pc, #72]	; (8001f84 <_sbrk+0x68>)
 8001f3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f3e:	4b10      	ldr	r3, [pc, #64]	; (8001f80 <_sbrk+0x64>)
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4413      	add	r3, r2
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d207      	bcs.n	8001f5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f4c:	f00b fec0 	bl	800dcd0 <__errno>
 8001f50:	4603      	mov	r3, r0
 8001f52:	220c      	movs	r2, #12
 8001f54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f5a:	e009      	b.n	8001f70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f5c:	4b08      	ldr	r3, [pc, #32]	; (8001f80 <_sbrk+0x64>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f62:	4b07      	ldr	r3, [pc, #28]	; (8001f80 <_sbrk+0x64>)
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4413      	add	r3, r2
 8001f6a:	4a05      	ldr	r2, [pc, #20]	; (8001f80 <_sbrk+0x64>)
 8001f6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3718      	adds	r7, #24
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	20018000 	.word	0x20018000
 8001f7c:	00000400 	.word	0x00000400
 8001f80:	20000300 	.word	0x20000300
 8001f84:	20000510 	.word	0x20000510

08001f88 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001f8c:	4b06      	ldr	r3, [pc, #24]	; (8001fa8 <SystemInit+0x20>)
 8001f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f92:	4a05      	ldr	r2, [pc, #20]	; (8001fa8 <SystemInit+0x20>)
 8001f94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001f9c:	bf00      	nop
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	e000ed00 	.word	0xe000ed00

08001fac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001fac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fe4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001fb0:	f7ff ffea 	bl	8001f88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fb4:	480c      	ldr	r0, [pc, #48]	; (8001fe8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001fb6:	490d      	ldr	r1, [pc, #52]	; (8001fec <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fb8:	4a0d      	ldr	r2, [pc, #52]	; (8001ff0 <LoopForever+0xe>)
  movs r3, #0
 8001fba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fbc:	e002      	b.n	8001fc4 <LoopCopyDataInit>

08001fbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fc2:	3304      	adds	r3, #4

08001fc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fc8:	d3f9      	bcc.n	8001fbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fca:	4a0a      	ldr	r2, [pc, #40]	; (8001ff4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fcc:	4c0a      	ldr	r4, [pc, #40]	; (8001ff8 <LoopForever+0x16>)
  movs r3, #0
 8001fce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fd0:	e001      	b.n	8001fd6 <LoopFillZerobss>

08001fd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fd4:	3204      	adds	r2, #4

08001fd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fd8:	d3fb      	bcc.n	8001fd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fda:	f00b fe7f 	bl	800dcdc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001fde:	f7ff fa69 	bl	80014b4 <main>

08001fe2 <LoopForever>:

LoopForever:
    b LoopForever
 8001fe2:	e7fe      	b.n	8001fe2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001fe4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001fe8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fec:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8001ff0:	08016b28 	.word	0x08016b28
  ldr r2, =_sbss
 8001ff4:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8001ff8:	2000050c 	.word	0x2000050c

08001ffc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ffc:	e7fe      	b.n	8001ffc <ADC1_2_IRQHandler>
	...

08002000 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002006:	2300      	movs	r3, #0
 8002008:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800200a:	4b0c      	ldr	r3, [pc, #48]	; (800203c <HAL_Init+0x3c>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a0b      	ldr	r2, [pc, #44]	; (800203c <HAL_Init+0x3c>)
 8002010:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002014:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002016:	2003      	movs	r0, #3
 8002018:	f000 f962 	bl	80022e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800201c:	2000      	movs	r0, #0
 800201e:	f000 f80f 	bl	8002040 <HAL_InitTick>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d002      	beq.n	800202e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	71fb      	strb	r3, [r7, #7]
 800202c:	e001      	b.n	8002032 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800202e:	f7ff fe2d 	bl	8001c8c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002032:	79fb      	ldrb	r3, [r7, #7]
}
 8002034:	4618      	mov	r0, r3
 8002036:	3708      	adds	r7, #8
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	40022000 	.word	0x40022000

08002040 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002048:	2300      	movs	r3, #0
 800204a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800204c:	4b17      	ldr	r3, [pc, #92]	; (80020ac <HAL_InitTick+0x6c>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d023      	beq.n	800209c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002054:	4b16      	ldr	r3, [pc, #88]	; (80020b0 <HAL_InitTick+0x70>)
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	4b14      	ldr	r3, [pc, #80]	; (80020ac <HAL_InitTick+0x6c>)
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	4619      	mov	r1, r3
 800205e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002062:	fbb3 f3f1 	udiv	r3, r3, r1
 8002066:	fbb2 f3f3 	udiv	r3, r2, r3
 800206a:	4618      	mov	r0, r3
 800206c:	f000 f96d 	bl	800234a <HAL_SYSTICK_Config>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d10f      	bne.n	8002096 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2b0f      	cmp	r3, #15
 800207a:	d809      	bhi.n	8002090 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800207c:	2200      	movs	r2, #0
 800207e:	6879      	ldr	r1, [r7, #4]
 8002080:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002084:	f000 f937 	bl	80022f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002088:	4a0a      	ldr	r2, [pc, #40]	; (80020b4 <HAL_InitTick+0x74>)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6013      	str	r3, [r2, #0]
 800208e:	e007      	b.n	80020a0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	73fb      	strb	r3, [r7, #15]
 8002094:	e004      	b.n	80020a0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	73fb      	strb	r3, [r7, #15]
 800209a:	e001      	b.n	80020a0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80020a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	20000008 	.word	0x20000008
 80020b0:	20000000 	.word	0x20000000
 80020b4:	20000004 	.word	0x20000004

080020b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020bc:	4b06      	ldr	r3, [pc, #24]	; (80020d8 <HAL_IncTick+0x20>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	461a      	mov	r2, r3
 80020c2:	4b06      	ldr	r3, [pc, #24]	; (80020dc <HAL_IncTick+0x24>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4413      	add	r3, r2
 80020c8:	4a04      	ldr	r2, [pc, #16]	; (80020dc <HAL_IncTick+0x24>)
 80020ca:	6013      	str	r3, [r2, #0]
}
 80020cc:	bf00      	nop
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	20000008 	.word	0x20000008
 80020dc:	20000304 	.word	0x20000304

080020e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  return uwTick;
 80020e4:	4b03      	ldr	r3, [pc, #12]	; (80020f4 <HAL_GetTick+0x14>)
 80020e6:	681b      	ldr	r3, [r3, #0]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	20000304 	.word	0x20000304

080020f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002100:	f7ff ffee 	bl	80020e0 <HAL_GetTick>
 8002104:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002110:	d005      	beq.n	800211e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002112:	4b0a      	ldr	r3, [pc, #40]	; (800213c <HAL_Delay+0x44>)
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	461a      	mov	r2, r3
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	4413      	add	r3, r2
 800211c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800211e:	bf00      	nop
 8002120:	f7ff ffde 	bl	80020e0 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	68fa      	ldr	r2, [r7, #12]
 800212c:	429a      	cmp	r2, r3
 800212e:	d8f7      	bhi.n	8002120 <HAL_Delay+0x28>
  {
  }
}
 8002130:	bf00      	nop
 8002132:	bf00      	nop
 8002134:	3710      	adds	r7, #16
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	20000008 	.word	0x20000008

08002140 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002140:	b480      	push	{r7}
 8002142:	b085      	sub	sp, #20
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f003 0307 	and.w	r3, r3, #7
 800214e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002150:	4b0c      	ldr	r3, [pc, #48]	; (8002184 <__NVIC_SetPriorityGrouping+0x44>)
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002156:	68ba      	ldr	r2, [r7, #8]
 8002158:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800215c:	4013      	ands	r3, r2
 800215e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002168:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800216c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002170:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002172:	4a04      	ldr	r2, [pc, #16]	; (8002184 <__NVIC_SetPriorityGrouping+0x44>)
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	60d3      	str	r3, [r2, #12]
}
 8002178:	bf00      	nop
 800217a:	3714      	adds	r7, #20
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	e000ed00 	.word	0xe000ed00

08002188 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800218c:	4b04      	ldr	r3, [pc, #16]	; (80021a0 <__NVIC_GetPriorityGrouping+0x18>)
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	0a1b      	lsrs	r3, r3, #8
 8002192:	f003 0307 	and.w	r3, r3, #7
}
 8002196:	4618      	mov	r0, r3
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr
 80021a0:	e000ed00 	.word	0xe000ed00

080021a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	4603      	mov	r3, r0
 80021ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	db0b      	blt.n	80021ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021b6:	79fb      	ldrb	r3, [r7, #7]
 80021b8:	f003 021f 	and.w	r2, r3, #31
 80021bc:	4907      	ldr	r1, [pc, #28]	; (80021dc <__NVIC_EnableIRQ+0x38>)
 80021be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c2:	095b      	lsrs	r3, r3, #5
 80021c4:	2001      	movs	r0, #1
 80021c6:	fa00 f202 	lsl.w	r2, r0, r2
 80021ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021ce:	bf00      	nop
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	e000e100 	.word	0xe000e100

080021e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	4603      	mov	r3, r0
 80021e8:	6039      	str	r1, [r7, #0]
 80021ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	db0a      	blt.n	800220a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	b2da      	uxtb	r2, r3
 80021f8:	490c      	ldr	r1, [pc, #48]	; (800222c <__NVIC_SetPriority+0x4c>)
 80021fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fe:	0112      	lsls	r2, r2, #4
 8002200:	b2d2      	uxtb	r2, r2
 8002202:	440b      	add	r3, r1
 8002204:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002208:	e00a      	b.n	8002220 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	b2da      	uxtb	r2, r3
 800220e:	4908      	ldr	r1, [pc, #32]	; (8002230 <__NVIC_SetPriority+0x50>)
 8002210:	79fb      	ldrb	r3, [r7, #7]
 8002212:	f003 030f 	and.w	r3, r3, #15
 8002216:	3b04      	subs	r3, #4
 8002218:	0112      	lsls	r2, r2, #4
 800221a:	b2d2      	uxtb	r2, r2
 800221c:	440b      	add	r3, r1
 800221e:	761a      	strb	r2, [r3, #24]
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr
 800222c:	e000e100 	.word	0xe000e100
 8002230:	e000ed00 	.word	0xe000ed00

08002234 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002234:	b480      	push	{r7}
 8002236:	b089      	sub	sp, #36	; 0x24
 8002238:	af00      	add	r7, sp, #0
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f003 0307 	and.w	r3, r3, #7
 8002246:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	f1c3 0307 	rsb	r3, r3, #7
 800224e:	2b04      	cmp	r3, #4
 8002250:	bf28      	it	cs
 8002252:	2304      	movcs	r3, #4
 8002254:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	3304      	adds	r3, #4
 800225a:	2b06      	cmp	r3, #6
 800225c:	d902      	bls.n	8002264 <NVIC_EncodePriority+0x30>
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	3b03      	subs	r3, #3
 8002262:	e000      	b.n	8002266 <NVIC_EncodePriority+0x32>
 8002264:	2300      	movs	r3, #0
 8002266:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002268:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	fa02 f303 	lsl.w	r3, r2, r3
 8002272:	43da      	mvns	r2, r3
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	401a      	ands	r2, r3
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800227c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	fa01 f303 	lsl.w	r3, r1, r3
 8002286:	43d9      	mvns	r1, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800228c:	4313      	orrs	r3, r2
         );
}
 800228e:	4618      	mov	r0, r3
 8002290:	3724      	adds	r7, #36	; 0x24
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
	...

0800229c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	3b01      	subs	r3, #1
 80022a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022ac:	d301      	bcc.n	80022b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022ae:	2301      	movs	r3, #1
 80022b0:	e00f      	b.n	80022d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022b2:	4a0a      	ldr	r2, [pc, #40]	; (80022dc <SysTick_Config+0x40>)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	3b01      	subs	r3, #1
 80022b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022ba:	210f      	movs	r1, #15
 80022bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022c0:	f7ff ff8e 	bl	80021e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022c4:	4b05      	ldr	r3, [pc, #20]	; (80022dc <SysTick_Config+0x40>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022ca:	4b04      	ldr	r3, [pc, #16]	; (80022dc <SysTick_Config+0x40>)
 80022cc:	2207      	movs	r2, #7
 80022ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	e000e010 	.word	0xe000e010

080022e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f7ff ff29 	bl	8002140 <__NVIC_SetPriorityGrouping>
}
 80022ee:	bf00      	nop
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b086      	sub	sp, #24
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	4603      	mov	r3, r0
 80022fe:	60b9      	str	r1, [r7, #8]
 8002300:	607a      	str	r2, [r7, #4]
 8002302:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002304:	2300      	movs	r3, #0
 8002306:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002308:	f7ff ff3e 	bl	8002188 <__NVIC_GetPriorityGrouping>
 800230c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	68b9      	ldr	r1, [r7, #8]
 8002312:	6978      	ldr	r0, [r7, #20]
 8002314:	f7ff ff8e 	bl	8002234 <NVIC_EncodePriority>
 8002318:	4602      	mov	r2, r0
 800231a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800231e:	4611      	mov	r1, r2
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff ff5d 	bl	80021e0 <__NVIC_SetPriority>
}
 8002326:	bf00      	nop
 8002328:	3718      	adds	r7, #24
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	b082      	sub	sp, #8
 8002332:	af00      	add	r7, sp, #0
 8002334:	4603      	mov	r3, r0
 8002336:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff ff31 	bl	80021a4 <__NVIC_EnableIRQ>
}
 8002342:	bf00      	nop
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	b082      	sub	sp, #8
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f7ff ffa2 	bl	800229c <SysTick_Config>
 8002358:	4603      	mov	r3, r0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
	...

08002364 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002364:	b480      	push	{r7}
 8002366:	b087      	sub	sp, #28
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800236e:	2300      	movs	r3, #0
 8002370:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002372:	e17f      	b.n	8002674 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	2101      	movs	r1, #1
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	fa01 f303 	lsl.w	r3, r1, r3
 8002380:	4013      	ands	r3, r2
 8002382:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2b00      	cmp	r3, #0
 8002388:	f000 8171 	beq.w	800266e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f003 0303 	and.w	r3, r3, #3
 8002394:	2b01      	cmp	r3, #1
 8002396:	d005      	beq.n	80023a4 <HAL_GPIO_Init+0x40>
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f003 0303 	and.w	r3, r3, #3
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d130      	bne.n	8002406 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	2203      	movs	r2, #3
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	43db      	mvns	r3, r3
 80023b6:	693a      	ldr	r2, [r7, #16]
 80023b8:	4013      	ands	r3, r2
 80023ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	68da      	ldr	r2, [r3, #12]
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023da:	2201      	movs	r2, #1
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	43db      	mvns	r3, r3
 80023e4:	693a      	ldr	r2, [r7, #16]
 80023e6:	4013      	ands	r3, r2
 80023e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	091b      	lsrs	r3, r3, #4
 80023f0:	f003 0201 	and.w	r2, r3, #1
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	fa02 f303 	lsl.w	r3, r2, r3
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f003 0303 	and.w	r3, r3, #3
 800240e:	2b03      	cmp	r3, #3
 8002410:	d118      	bne.n	8002444 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002416:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002418:	2201      	movs	r2, #1
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	fa02 f303 	lsl.w	r3, r2, r3
 8002420:	43db      	mvns	r3, r3
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	4013      	ands	r3, r2
 8002426:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	08db      	lsrs	r3, r3, #3
 800242e:	f003 0201 	and.w	r2, r3, #1
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	693a      	ldr	r2, [r7, #16]
 800243a:	4313      	orrs	r3, r2
 800243c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f003 0303 	and.w	r3, r3, #3
 800244c:	2b03      	cmp	r3, #3
 800244e:	d017      	beq.n	8002480 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	2203      	movs	r2, #3
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	43db      	mvns	r3, r3
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	4013      	ands	r3, r2
 8002466:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	689a      	ldr	r2, [r3, #8]
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	693a      	ldr	r2, [r7, #16]
 8002476:	4313      	orrs	r3, r2
 8002478:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	693a      	ldr	r2, [r7, #16]
 800247e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f003 0303 	and.w	r3, r3, #3
 8002488:	2b02      	cmp	r3, #2
 800248a:	d123      	bne.n	80024d4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	08da      	lsrs	r2, r3, #3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	3208      	adds	r2, #8
 8002494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002498:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	f003 0307 	and.w	r3, r3, #7
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	220f      	movs	r2, #15
 80024a4:	fa02 f303 	lsl.w	r3, r2, r3
 80024a8:	43db      	mvns	r3, r3
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	4013      	ands	r3, r2
 80024ae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	691a      	ldr	r2, [r3, #16]
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	f003 0307 	and.w	r3, r3, #7
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	08da      	lsrs	r2, r3, #3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	3208      	adds	r2, #8
 80024ce:	6939      	ldr	r1, [r7, #16]
 80024d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	2203      	movs	r2, #3
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	43db      	mvns	r3, r3
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	4013      	ands	r3, r2
 80024ea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f003 0203 	and.w	r2, r3, #3
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	005b      	lsls	r3, r3, #1
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	693a      	ldr	r2, [r7, #16]
 80024fe:	4313      	orrs	r3, r2
 8002500:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	693a      	ldr	r2, [r7, #16]
 8002506:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002510:	2b00      	cmp	r3, #0
 8002512:	f000 80ac 	beq.w	800266e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002516:	4b5f      	ldr	r3, [pc, #380]	; (8002694 <HAL_GPIO_Init+0x330>)
 8002518:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800251a:	4a5e      	ldr	r2, [pc, #376]	; (8002694 <HAL_GPIO_Init+0x330>)
 800251c:	f043 0301 	orr.w	r3, r3, #1
 8002520:	6613      	str	r3, [r2, #96]	; 0x60
 8002522:	4b5c      	ldr	r3, [pc, #368]	; (8002694 <HAL_GPIO_Init+0x330>)
 8002524:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	60bb      	str	r3, [r7, #8]
 800252c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800252e:	4a5a      	ldr	r2, [pc, #360]	; (8002698 <HAL_GPIO_Init+0x334>)
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	089b      	lsrs	r3, r3, #2
 8002534:	3302      	adds	r3, #2
 8002536:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800253a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	f003 0303 	and.w	r3, r3, #3
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	220f      	movs	r2, #15
 8002546:	fa02 f303 	lsl.w	r3, r2, r3
 800254a:	43db      	mvns	r3, r3
 800254c:	693a      	ldr	r2, [r7, #16]
 800254e:	4013      	ands	r3, r2
 8002550:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002558:	d025      	beq.n	80025a6 <HAL_GPIO_Init+0x242>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a4f      	ldr	r2, [pc, #316]	; (800269c <HAL_GPIO_Init+0x338>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d01f      	beq.n	80025a2 <HAL_GPIO_Init+0x23e>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a4e      	ldr	r2, [pc, #312]	; (80026a0 <HAL_GPIO_Init+0x33c>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d019      	beq.n	800259e <HAL_GPIO_Init+0x23a>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a4d      	ldr	r2, [pc, #308]	; (80026a4 <HAL_GPIO_Init+0x340>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d013      	beq.n	800259a <HAL_GPIO_Init+0x236>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a4c      	ldr	r2, [pc, #304]	; (80026a8 <HAL_GPIO_Init+0x344>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d00d      	beq.n	8002596 <HAL_GPIO_Init+0x232>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a4b      	ldr	r2, [pc, #300]	; (80026ac <HAL_GPIO_Init+0x348>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d007      	beq.n	8002592 <HAL_GPIO_Init+0x22e>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a4a      	ldr	r2, [pc, #296]	; (80026b0 <HAL_GPIO_Init+0x34c>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d101      	bne.n	800258e <HAL_GPIO_Init+0x22a>
 800258a:	2306      	movs	r3, #6
 800258c:	e00c      	b.n	80025a8 <HAL_GPIO_Init+0x244>
 800258e:	2307      	movs	r3, #7
 8002590:	e00a      	b.n	80025a8 <HAL_GPIO_Init+0x244>
 8002592:	2305      	movs	r3, #5
 8002594:	e008      	b.n	80025a8 <HAL_GPIO_Init+0x244>
 8002596:	2304      	movs	r3, #4
 8002598:	e006      	b.n	80025a8 <HAL_GPIO_Init+0x244>
 800259a:	2303      	movs	r3, #3
 800259c:	e004      	b.n	80025a8 <HAL_GPIO_Init+0x244>
 800259e:	2302      	movs	r3, #2
 80025a0:	e002      	b.n	80025a8 <HAL_GPIO_Init+0x244>
 80025a2:	2301      	movs	r3, #1
 80025a4:	e000      	b.n	80025a8 <HAL_GPIO_Init+0x244>
 80025a6:	2300      	movs	r3, #0
 80025a8:	697a      	ldr	r2, [r7, #20]
 80025aa:	f002 0203 	and.w	r2, r2, #3
 80025ae:	0092      	lsls	r2, r2, #2
 80025b0:	4093      	lsls	r3, r2
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80025b8:	4937      	ldr	r1, [pc, #220]	; (8002698 <HAL_GPIO_Init+0x334>)
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	089b      	lsrs	r3, r3, #2
 80025be:	3302      	adds	r3, #2
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80025c6:	4b3b      	ldr	r3, [pc, #236]	; (80026b4 <HAL_GPIO_Init+0x350>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	43db      	mvns	r3, r3
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	4013      	ands	r3, r2
 80025d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80025ea:	4a32      	ldr	r2, [pc, #200]	; (80026b4 <HAL_GPIO_Init+0x350>)
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80025f0:	4b30      	ldr	r3, [pc, #192]	; (80026b4 <HAL_GPIO_Init+0x350>)
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	43db      	mvns	r3, r3
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	4013      	ands	r3, r2
 80025fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d003      	beq.n	8002614 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	4313      	orrs	r3, r2
 8002612:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002614:	4a27      	ldr	r2, [pc, #156]	; (80026b4 <HAL_GPIO_Init+0x350>)
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800261a:	4b26      	ldr	r3, [pc, #152]	; (80026b4 <HAL_GPIO_Init+0x350>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	43db      	mvns	r3, r3
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	4013      	ands	r3, r2
 8002628:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d003      	beq.n	800263e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	4313      	orrs	r3, r2
 800263c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800263e:	4a1d      	ldr	r2, [pc, #116]	; (80026b4 <HAL_GPIO_Init+0x350>)
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002644:	4b1b      	ldr	r3, [pc, #108]	; (80026b4 <HAL_GPIO_Init+0x350>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	43db      	mvns	r3, r3
 800264e:	693a      	ldr	r2, [r7, #16]
 8002650:	4013      	ands	r3, r2
 8002652:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d003      	beq.n	8002668 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002660:	693a      	ldr	r2, [r7, #16]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	4313      	orrs	r3, r2
 8002666:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002668:	4a12      	ldr	r2, [pc, #72]	; (80026b4 <HAL_GPIO_Init+0x350>)
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	3301      	adds	r3, #1
 8002672:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	fa22 f303 	lsr.w	r3, r2, r3
 800267e:	2b00      	cmp	r3, #0
 8002680:	f47f ae78 	bne.w	8002374 <HAL_GPIO_Init+0x10>
  }
}
 8002684:	bf00      	nop
 8002686:	bf00      	nop
 8002688:	371c      	adds	r7, #28
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	40021000 	.word	0x40021000
 8002698:	40010000 	.word	0x40010000
 800269c:	48000400 	.word	0x48000400
 80026a0:	48000800 	.word	0x48000800
 80026a4:	48000c00 	.word	0x48000c00
 80026a8:	48001000 	.word	0x48001000
 80026ac:	48001400 	.word	0x48001400
 80026b0:	48001800 	.word	0x48001800
 80026b4:	40010400 	.word	0x40010400

080026b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	460b      	mov	r3, r1
 80026c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	691a      	ldr	r2, [r3, #16]
 80026c8:	887b      	ldrh	r3, [r7, #2]
 80026ca:	4013      	ands	r3, r2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d002      	beq.n	80026d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80026d0:	2301      	movs	r3, #1
 80026d2:	73fb      	strb	r3, [r7, #15]
 80026d4:	e001      	b.n	80026da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80026d6:	2300      	movs	r3, #0
 80026d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80026da:	7bfb      	ldrb	r3, [r7, #15]
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3714      	adds	r7, #20
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	460b      	mov	r3, r1
 80026f2:	807b      	strh	r3, [r7, #2]
 80026f4:	4613      	mov	r3, r2
 80026f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026f8:	787b      	ldrb	r3, [r7, #1]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d003      	beq.n	8002706 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80026fe:	887a      	ldrh	r2, [r7, #2]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002704:	e002      	b.n	800270c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002706:	887a      	ldrh	r2, [r7, #2]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800270c:	bf00      	nop
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	4603      	mov	r3, r0
 8002720:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002722:	4b08      	ldr	r3, [pc, #32]	; (8002744 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002724:	695a      	ldr	r2, [r3, #20]
 8002726:	88fb      	ldrh	r3, [r7, #6]
 8002728:	4013      	ands	r3, r2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d006      	beq.n	800273c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800272e:	4a05      	ldr	r2, [pc, #20]	; (8002744 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002730:	88fb      	ldrh	r3, [r7, #6]
 8002732:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002734:	88fb      	ldrh	r3, [r7, #6]
 8002736:	4618      	mov	r0, r3
 8002738:	f000 f806 	bl	8002748 <HAL_GPIO_EXTI_Callback>
  }
}
 800273c:	bf00      	nop
 800273e:	3708      	adds	r7, #8
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	40010400 	.word	0x40010400

08002748 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	4603      	mov	r3, r0
 8002750:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002752:	bf00      	nop
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
	...

08002760 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002764:	4b04      	ldr	r3, [pc, #16]	; (8002778 <HAL_PWREx_GetVoltageRange+0x18>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800276c:	4618      	mov	r0, r3
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	40007000 	.word	0x40007000

0800277c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800277c:	b480      	push	{r7}
 800277e:	b085      	sub	sp, #20
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800278a:	d130      	bne.n	80027ee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800278c:	4b23      	ldr	r3, [pc, #140]	; (800281c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002794:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002798:	d038      	beq.n	800280c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800279a:	4b20      	ldr	r3, [pc, #128]	; (800281c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80027a2:	4a1e      	ldr	r2, [pc, #120]	; (800281c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027a8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80027aa:	4b1d      	ldr	r3, [pc, #116]	; (8002820 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2232      	movs	r2, #50	; 0x32
 80027b0:	fb02 f303 	mul.w	r3, r2, r3
 80027b4:	4a1b      	ldr	r2, [pc, #108]	; (8002824 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80027b6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ba:	0c9b      	lsrs	r3, r3, #18
 80027bc:	3301      	adds	r3, #1
 80027be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027c0:	e002      	b.n	80027c8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	3b01      	subs	r3, #1
 80027c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027c8:	4b14      	ldr	r3, [pc, #80]	; (800281c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027ca:	695b      	ldr	r3, [r3, #20]
 80027cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027d4:	d102      	bne.n	80027dc <HAL_PWREx_ControlVoltageScaling+0x60>
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d1f2      	bne.n	80027c2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80027dc:	4b0f      	ldr	r3, [pc, #60]	; (800281c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027de:	695b      	ldr	r3, [r3, #20]
 80027e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027e8:	d110      	bne.n	800280c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e00f      	b.n	800280e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80027ee:	4b0b      	ldr	r3, [pc, #44]	; (800281c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80027f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027fa:	d007      	beq.n	800280c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80027fc:	4b07      	ldr	r3, [pc, #28]	; (800281c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002804:	4a05      	ldr	r2, [pc, #20]	; (800281c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002806:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800280a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3714      	adds	r7, #20
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	40007000 	.word	0x40007000
 8002820:	20000000 	.word	0x20000000
 8002824:	431bde83 	.word	0x431bde83

08002828 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b088      	sub	sp, #32
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d101      	bne.n	800283a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e3ca      	b.n	8002fd0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800283a:	4b97      	ldr	r3, [pc, #604]	; (8002a98 <HAL_RCC_OscConfig+0x270>)
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f003 030c 	and.w	r3, r3, #12
 8002842:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002844:	4b94      	ldr	r3, [pc, #592]	; (8002a98 <HAL_RCC_OscConfig+0x270>)
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	f003 0303 	and.w	r3, r3, #3
 800284c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0310 	and.w	r3, r3, #16
 8002856:	2b00      	cmp	r3, #0
 8002858:	f000 80e4 	beq.w	8002a24 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d007      	beq.n	8002872 <HAL_RCC_OscConfig+0x4a>
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	2b0c      	cmp	r3, #12
 8002866:	f040 808b 	bne.w	8002980 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	2b01      	cmp	r3, #1
 800286e:	f040 8087 	bne.w	8002980 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002872:	4b89      	ldr	r3, [pc, #548]	; (8002a98 <HAL_RCC_OscConfig+0x270>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d005      	beq.n	800288a <HAL_RCC_OscConfig+0x62>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d101      	bne.n	800288a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e3a2      	b.n	8002fd0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a1a      	ldr	r2, [r3, #32]
 800288e:	4b82      	ldr	r3, [pc, #520]	; (8002a98 <HAL_RCC_OscConfig+0x270>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0308 	and.w	r3, r3, #8
 8002896:	2b00      	cmp	r3, #0
 8002898:	d004      	beq.n	80028a4 <HAL_RCC_OscConfig+0x7c>
 800289a:	4b7f      	ldr	r3, [pc, #508]	; (8002a98 <HAL_RCC_OscConfig+0x270>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028a2:	e005      	b.n	80028b0 <HAL_RCC_OscConfig+0x88>
 80028a4:	4b7c      	ldr	r3, [pc, #496]	; (8002a98 <HAL_RCC_OscConfig+0x270>)
 80028a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028aa:	091b      	lsrs	r3, r3, #4
 80028ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d223      	bcs.n	80028fc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a1b      	ldr	r3, [r3, #32]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f000 fd55 	bl	8003368 <RCC_SetFlashLatencyFromMSIRange>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d001      	beq.n	80028c8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e383      	b.n	8002fd0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028c8:	4b73      	ldr	r3, [pc, #460]	; (8002a98 <HAL_RCC_OscConfig+0x270>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a72      	ldr	r2, [pc, #456]	; (8002a98 <HAL_RCC_OscConfig+0x270>)
 80028ce:	f043 0308 	orr.w	r3, r3, #8
 80028d2:	6013      	str	r3, [r2, #0]
 80028d4:	4b70      	ldr	r3, [pc, #448]	; (8002a98 <HAL_RCC_OscConfig+0x270>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a1b      	ldr	r3, [r3, #32]
 80028e0:	496d      	ldr	r1, [pc, #436]	; (8002a98 <HAL_RCC_OscConfig+0x270>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028e6:	4b6c      	ldr	r3, [pc, #432]	; (8002a98 <HAL_RCC_OscConfig+0x270>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	69db      	ldr	r3, [r3, #28]
 80028f2:	021b      	lsls	r3, r3, #8
 80028f4:	4968      	ldr	r1, [pc, #416]	; (8002a98 <HAL_RCC_OscConfig+0x270>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	604b      	str	r3, [r1, #4]
 80028fa:	e025      	b.n	8002948 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028fc:	4b66      	ldr	r3, [pc, #408]	; (8002a98 <HAL_RCC_OscConfig+0x270>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a65      	ldr	r2, [pc, #404]	; (8002a98 <HAL_RCC_OscConfig+0x270>)
 8002902:	f043 0308 	orr.w	r3, r3, #8
 8002906:	6013      	str	r3, [r2, #0]
 8002908:	4b63      	ldr	r3, [pc, #396]	; (8002a98 <HAL_RCC_OscConfig+0x270>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a1b      	ldr	r3, [r3, #32]
 8002914:	4960      	ldr	r1, [pc, #384]	; (8002a98 <HAL_RCC_OscConfig+0x270>)
 8002916:	4313      	orrs	r3, r2
 8002918:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800291a:	4b5f      	ldr	r3, [pc, #380]	; (8002a98 <HAL_RCC_OscConfig+0x270>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	69db      	ldr	r3, [r3, #28]
 8002926:	021b      	lsls	r3, r3, #8
 8002928:	495b      	ldr	r1, [pc, #364]	; (8002a98 <HAL_RCC_OscConfig+0x270>)
 800292a:	4313      	orrs	r3, r2
 800292c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d109      	bne.n	8002948 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a1b      	ldr	r3, [r3, #32]
 8002938:	4618      	mov	r0, r3
 800293a:	f000 fd15 	bl	8003368 <RCC_SetFlashLatencyFromMSIRange>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d001      	beq.n	8002948 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e343      	b.n	8002fd0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002948:	f000 fc4a 	bl	80031e0 <HAL_RCC_GetSysClockFreq>
 800294c:	4602      	mov	r2, r0
 800294e:	4b52      	ldr	r3, [pc, #328]	; (8002a98 <HAL_RCC_OscConfig+0x270>)
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	091b      	lsrs	r3, r3, #4
 8002954:	f003 030f 	and.w	r3, r3, #15
 8002958:	4950      	ldr	r1, [pc, #320]	; (8002a9c <HAL_RCC_OscConfig+0x274>)
 800295a:	5ccb      	ldrb	r3, [r1, r3]
 800295c:	f003 031f 	and.w	r3, r3, #31
 8002960:	fa22 f303 	lsr.w	r3, r2, r3
 8002964:	4a4e      	ldr	r2, [pc, #312]	; (8002aa0 <HAL_RCC_OscConfig+0x278>)
 8002966:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002968:	4b4e      	ldr	r3, [pc, #312]	; (8002aa4 <HAL_RCC_OscConfig+0x27c>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4618      	mov	r0, r3
 800296e:	f7ff fb67 	bl	8002040 <HAL_InitTick>
 8002972:	4603      	mov	r3, r0
 8002974:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002976:	7bfb      	ldrb	r3, [r7, #15]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d052      	beq.n	8002a22 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800297c:	7bfb      	ldrb	r3, [r7, #15]
 800297e:	e327      	b.n	8002fd0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	699b      	ldr	r3, [r3, #24]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d032      	beq.n	80029ee <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002988:	4b43      	ldr	r3, [pc, #268]	; (8002a98 <HAL_RCC_OscConfig+0x270>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a42      	ldr	r2, [pc, #264]	; (8002a98 <HAL_RCC_OscConfig+0x270>)
 800298e:	f043 0301 	orr.w	r3, r3, #1
 8002992:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002994:	f7ff fba4 	bl	80020e0 <HAL_GetTick>
 8002998:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800299a:	e008      	b.n	80029ae <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800299c:	f7ff fba0 	bl	80020e0 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e310      	b.n	8002fd0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029ae:	4b3a      	ldr	r3, [pc, #232]	; (8002a98 <HAL_RCC_OscConfig+0x270>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d0f0      	beq.n	800299c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029ba:	4b37      	ldr	r3, [pc, #220]	; (8002a98 <HAL_RCC_OscConfig+0x270>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a36      	ldr	r2, [pc, #216]	; (8002a98 <HAL_RCC_OscConfig+0x270>)
 80029c0:	f043 0308 	orr.w	r3, r3, #8
 80029c4:	6013      	str	r3, [r2, #0]
 80029c6:	4b34      	ldr	r3, [pc, #208]	; (8002a98 <HAL_RCC_OscConfig+0x270>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a1b      	ldr	r3, [r3, #32]
 80029d2:	4931      	ldr	r1, [pc, #196]	; (8002a98 <HAL_RCC_OscConfig+0x270>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029d8:	4b2f      	ldr	r3, [pc, #188]	; (8002a98 <HAL_RCC_OscConfig+0x270>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	69db      	ldr	r3, [r3, #28]
 80029e4:	021b      	lsls	r3, r3, #8
 80029e6:	492c      	ldr	r1, [pc, #176]	; (8002a98 <HAL_RCC_OscConfig+0x270>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	604b      	str	r3, [r1, #4]
 80029ec:	e01a      	b.n	8002a24 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80029ee:	4b2a      	ldr	r3, [pc, #168]	; (8002a98 <HAL_RCC_OscConfig+0x270>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a29      	ldr	r2, [pc, #164]	; (8002a98 <HAL_RCC_OscConfig+0x270>)
 80029f4:	f023 0301 	bic.w	r3, r3, #1
 80029f8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80029fa:	f7ff fb71 	bl	80020e0 <HAL_GetTick>
 80029fe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a00:	e008      	b.n	8002a14 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a02:	f7ff fb6d 	bl	80020e0 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d901      	bls.n	8002a14 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e2dd      	b.n	8002fd0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a14:	4b20      	ldr	r3, [pc, #128]	; (8002a98 <HAL_RCC_OscConfig+0x270>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0302 	and.w	r3, r3, #2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d1f0      	bne.n	8002a02 <HAL_RCC_OscConfig+0x1da>
 8002a20:	e000      	b.n	8002a24 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a22:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d074      	beq.n	8002b1a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	2b08      	cmp	r3, #8
 8002a34:	d005      	beq.n	8002a42 <HAL_RCC_OscConfig+0x21a>
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	2b0c      	cmp	r3, #12
 8002a3a:	d10e      	bne.n	8002a5a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	2b03      	cmp	r3, #3
 8002a40:	d10b      	bne.n	8002a5a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a42:	4b15      	ldr	r3, [pc, #84]	; (8002a98 <HAL_RCC_OscConfig+0x270>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d064      	beq.n	8002b18 <HAL_RCC_OscConfig+0x2f0>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d160      	bne.n	8002b18 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e2ba      	b.n	8002fd0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a62:	d106      	bne.n	8002a72 <HAL_RCC_OscConfig+0x24a>
 8002a64:	4b0c      	ldr	r3, [pc, #48]	; (8002a98 <HAL_RCC_OscConfig+0x270>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a0b      	ldr	r2, [pc, #44]	; (8002a98 <HAL_RCC_OscConfig+0x270>)
 8002a6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a6e:	6013      	str	r3, [r2, #0]
 8002a70:	e026      	b.n	8002ac0 <HAL_RCC_OscConfig+0x298>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a7a:	d115      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x280>
 8002a7c:	4b06      	ldr	r3, [pc, #24]	; (8002a98 <HAL_RCC_OscConfig+0x270>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a05      	ldr	r2, [pc, #20]	; (8002a98 <HAL_RCC_OscConfig+0x270>)
 8002a82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a86:	6013      	str	r3, [r2, #0]
 8002a88:	4b03      	ldr	r3, [pc, #12]	; (8002a98 <HAL_RCC_OscConfig+0x270>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a02      	ldr	r2, [pc, #8]	; (8002a98 <HAL_RCC_OscConfig+0x270>)
 8002a8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a92:	6013      	str	r3, [r2, #0]
 8002a94:	e014      	b.n	8002ac0 <HAL_RCC_OscConfig+0x298>
 8002a96:	bf00      	nop
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	080112a8 	.word	0x080112a8
 8002aa0:	20000000 	.word	0x20000000
 8002aa4:	20000004 	.word	0x20000004
 8002aa8:	4ba0      	ldr	r3, [pc, #640]	; (8002d2c <HAL_RCC_OscConfig+0x504>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a9f      	ldr	r2, [pc, #636]	; (8002d2c <HAL_RCC_OscConfig+0x504>)
 8002aae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ab2:	6013      	str	r3, [r2, #0]
 8002ab4:	4b9d      	ldr	r3, [pc, #628]	; (8002d2c <HAL_RCC_OscConfig+0x504>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a9c      	ldr	r2, [pc, #624]	; (8002d2c <HAL_RCC_OscConfig+0x504>)
 8002aba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002abe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d013      	beq.n	8002af0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac8:	f7ff fb0a 	bl	80020e0 <HAL_GetTick>
 8002acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ace:	e008      	b.n	8002ae2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ad0:	f7ff fb06 	bl	80020e0 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b64      	cmp	r3, #100	; 0x64
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e276      	b.n	8002fd0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ae2:	4b92      	ldr	r3, [pc, #584]	; (8002d2c <HAL_RCC_OscConfig+0x504>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d0f0      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x2a8>
 8002aee:	e014      	b.n	8002b1a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af0:	f7ff faf6 	bl	80020e0 <HAL_GetTick>
 8002af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002af6:	e008      	b.n	8002b0a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002af8:	f7ff faf2 	bl	80020e0 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b64      	cmp	r3, #100	; 0x64
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e262      	b.n	8002fd0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b0a:	4b88      	ldr	r3, [pc, #544]	; (8002d2c <HAL_RCC_OscConfig+0x504>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1f0      	bne.n	8002af8 <HAL_RCC_OscConfig+0x2d0>
 8002b16:	e000      	b.n	8002b1a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d060      	beq.n	8002be8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	2b04      	cmp	r3, #4
 8002b2a:	d005      	beq.n	8002b38 <HAL_RCC_OscConfig+0x310>
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	2b0c      	cmp	r3, #12
 8002b30:	d119      	bne.n	8002b66 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d116      	bne.n	8002b66 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b38:	4b7c      	ldr	r3, [pc, #496]	; (8002d2c <HAL_RCC_OscConfig+0x504>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d005      	beq.n	8002b50 <HAL_RCC_OscConfig+0x328>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d101      	bne.n	8002b50 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e23f      	b.n	8002fd0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b50:	4b76      	ldr	r3, [pc, #472]	; (8002d2c <HAL_RCC_OscConfig+0x504>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	061b      	lsls	r3, r3, #24
 8002b5e:	4973      	ldr	r1, [pc, #460]	; (8002d2c <HAL_RCC_OscConfig+0x504>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b64:	e040      	b.n	8002be8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d023      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b6e:	4b6f      	ldr	r3, [pc, #444]	; (8002d2c <HAL_RCC_OscConfig+0x504>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a6e      	ldr	r2, [pc, #440]	; (8002d2c <HAL_RCC_OscConfig+0x504>)
 8002b74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b7a:	f7ff fab1 	bl	80020e0 <HAL_GetTick>
 8002b7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b80:	e008      	b.n	8002b94 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b82:	f7ff faad 	bl	80020e0 <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d901      	bls.n	8002b94 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e21d      	b.n	8002fd0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b94:	4b65      	ldr	r3, [pc, #404]	; (8002d2c <HAL_RCC_OscConfig+0x504>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d0f0      	beq.n	8002b82 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ba0:	4b62      	ldr	r3, [pc, #392]	; (8002d2c <HAL_RCC_OscConfig+0x504>)
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	061b      	lsls	r3, r3, #24
 8002bae:	495f      	ldr	r1, [pc, #380]	; (8002d2c <HAL_RCC_OscConfig+0x504>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	604b      	str	r3, [r1, #4]
 8002bb4:	e018      	b.n	8002be8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bb6:	4b5d      	ldr	r3, [pc, #372]	; (8002d2c <HAL_RCC_OscConfig+0x504>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a5c      	ldr	r2, [pc, #368]	; (8002d2c <HAL_RCC_OscConfig+0x504>)
 8002bbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc2:	f7ff fa8d 	bl	80020e0 <HAL_GetTick>
 8002bc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002bc8:	e008      	b.n	8002bdc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bca:	f7ff fa89 	bl	80020e0 <HAL_GetTick>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d901      	bls.n	8002bdc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e1f9      	b.n	8002fd0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002bdc:	4b53      	ldr	r3, [pc, #332]	; (8002d2c <HAL_RCC_OscConfig+0x504>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d1f0      	bne.n	8002bca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0308 	and.w	r3, r3, #8
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d03c      	beq.n	8002c6e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	695b      	ldr	r3, [r3, #20]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d01c      	beq.n	8002c36 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bfc:	4b4b      	ldr	r3, [pc, #300]	; (8002d2c <HAL_RCC_OscConfig+0x504>)
 8002bfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c02:	4a4a      	ldr	r2, [pc, #296]	; (8002d2c <HAL_RCC_OscConfig+0x504>)
 8002c04:	f043 0301 	orr.w	r3, r3, #1
 8002c08:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c0c:	f7ff fa68 	bl	80020e0 <HAL_GetTick>
 8002c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c12:	e008      	b.n	8002c26 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c14:	f7ff fa64 	bl	80020e0 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e1d4      	b.n	8002fd0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c26:	4b41      	ldr	r3, [pc, #260]	; (8002d2c <HAL_RCC_OscConfig+0x504>)
 8002c28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c2c:	f003 0302 	and.w	r3, r3, #2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d0ef      	beq.n	8002c14 <HAL_RCC_OscConfig+0x3ec>
 8002c34:	e01b      	b.n	8002c6e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c36:	4b3d      	ldr	r3, [pc, #244]	; (8002d2c <HAL_RCC_OscConfig+0x504>)
 8002c38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c3c:	4a3b      	ldr	r2, [pc, #236]	; (8002d2c <HAL_RCC_OscConfig+0x504>)
 8002c3e:	f023 0301 	bic.w	r3, r3, #1
 8002c42:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c46:	f7ff fa4b 	bl	80020e0 <HAL_GetTick>
 8002c4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c4c:	e008      	b.n	8002c60 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c4e:	f7ff fa47 	bl	80020e0 <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d901      	bls.n	8002c60 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e1b7      	b.n	8002fd0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c60:	4b32      	ldr	r3, [pc, #200]	; (8002d2c <HAL_RCC_OscConfig+0x504>)
 8002c62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1ef      	bne.n	8002c4e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0304 	and.w	r3, r3, #4
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	f000 80a6 	beq.w	8002dc8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002c80:	4b2a      	ldr	r3, [pc, #168]	; (8002d2c <HAL_RCC_OscConfig+0x504>)
 8002c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d10d      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c8c:	4b27      	ldr	r3, [pc, #156]	; (8002d2c <HAL_RCC_OscConfig+0x504>)
 8002c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c90:	4a26      	ldr	r2, [pc, #152]	; (8002d2c <HAL_RCC_OscConfig+0x504>)
 8002c92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c96:	6593      	str	r3, [r2, #88]	; 0x58
 8002c98:	4b24      	ldr	r3, [pc, #144]	; (8002d2c <HAL_RCC_OscConfig+0x504>)
 8002c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ca0:	60bb      	str	r3, [r7, #8]
 8002ca2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ca8:	4b21      	ldr	r3, [pc, #132]	; (8002d30 <HAL_RCC_OscConfig+0x508>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d118      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002cb4:	4b1e      	ldr	r3, [pc, #120]	; (8002d30 <HAL_RCC_OscConfig+0x508>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a1d      	ldr	r2, [pc, #116]	; (8002d30 <HAL_RCC_OscConfig+0x508>)
 8002cba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cbe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cc0:	f7ff fa0e 	bl	80020e0 <HAL_GetTick>
 8002cc4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cc6:	e008      	b.n	8002cda <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cc8:	f7ff fa0a 	bl	80020e0 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e17a      	b.n	8002fd0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cda:	4b15      	ldr	r3, [pc, #84]	; (8002d30 <HAL_RCC_OscConfig+0x508>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d0f0      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d108      	bne.n	8002d00 <HAL_RCC_OscConfig+0x4d8>
 8002cee:	4b0f      	ldr	r3, [pc, #60]	; (8002d2c <HAL_RCC_OscConfig+0x504>)
 8002cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cf4:	4a0d      	ldr	r2, [pc, #52]	; (8002d2c <HAL_RCC_OscConfig+0x504>)
 8002cf6:	f043 0301 	orr.w	r3, r3, #1
 8002cfa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cfe:	e029      	b.n	8002d54 <HAL_RCC_OscConfig+0x52c>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	2b05      	cmp	r3, #5
 8002d06:	d115      	bne.n	8002d34 <HAL_RCC_OscConfig+0x50c>
 8002d08:	4b08      	ldr	r3, [pc, #32]	; (8002d2c <HAL_RCC_OscConfig+0x504>)
 8002d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d0e:	4a07      	ldr	r2, [pc, #28]	; (8002d2c <HAL_RCC_OscConfig+0x504>)
 8002d10:	f043 0304 	orr.w	r3, r3, #4
 8002d14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d18:	4b04      	ldr	r3, [pc, #16]	; (8002d2c <HAL_RCC_OscConfig+0x504>)
 8002d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d1e:	4a03      	ldr	r2, [pc, #12]	; (8002d2c <HAL_RCC_OscConfig+0x504>)
 8002d20:	f043 0301 	orr.w	r3, r3, #1
 8002d24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d28:	e014      	b.n	8002d54 <HAL_RCC_OscConfig+0x52c>
 8002d2a:	bf00      	nop
 8002d2c:	40021000 	.word	0x40021000
 8002d30:	40007000 	.word	0x40007000
 8002d34:	4b9c      	ldr	r3, [pc, #624]	; (8002fa8 <HAL_RCC_OscConfig+0x780>)
 8002d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d3a:	4a9b      	ldr	r2, [pc, #620]	; (8002fa8 <HAL_RCC_OscConfig+0x780>)
 8002d3c:	f023 0301 	bic.w	r3, r3, #1
 8002d40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d44:	4b98      	ldr	r3, [pc, #608]	; (8002fa8 <HAL_RCC_OscConfig+0x780>)
 8002d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d4a:	4a97      	ldr	r2, [pc, #604]	; (8002fa8 <HAL_RCC_OscConfig+0x780>)
 8002d4c:	f023 0304 	bic.w	r3, r3, #4
 8002d50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d016      	beq.n	8002d8a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d5c:	f7ff f9c0 	bl	80020e0 <HAL_GetTick>
 8002d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d62:	e00a      	b.n	8002d7a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d64:	f7ff f9bc 	bl	80020e0 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e12a      	b.n	8002fd0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d7a:	4b8b      	ldr	r3, [pc, #556]	; (8002fa8 <HAL_RCC_OscConfig+0x780>)
 8002d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d80:	f003 0302 	and.w	r3, r3, #2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d0ed      	beq.n	8002d64 <HAL_RCC_OscConfig+0x53c>
 8002d88:	e015      	b.n	8002db6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d8a:	f7ff f9a9 	bl	80020e0 <HAL_GetTick>
 8002d8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d90:	e00a      	b.n	8002da8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d92:	f7ff f9a5 	bl	80020e0 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d901      	bls.n	8002da8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e113      	b.n	8002fd0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002da8:	4b7f      	ldr	r3, [pc, #508]	; (8002fa8 <HAL_RCC_OscConfig+0x780>)
 8002daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d1ed      	bne.n	8002d92 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002db6:	7ffb      	ldrb	r3, [r7, #31]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d105      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dbc:	4b7a      	ldr	r3, [pc, #488]	; (8002fa8 <HAL_RCC_OscConfig+0x780>)
 8002dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dc0:	4a79      	ldr	r2, [pc, #484]	; (8002fa8 <HAL_RCC_OscConfig+0x780>)
 8002dc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dc6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	f000 80fe 	beq.w	8002fce <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	f040 80d0 	bne.w	8002f7c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002ddc:	4b72      	ldr	r3, [pc, #456]	; (8002fa8 <HAL_RCC_OscConfig+0x780>)
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	f003 0203 	and.w	r2, r3, #3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d130      	bne.n	8002e52 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d127      	bne.n	8002e52 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e0c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d11f      	bne.n	8002e52 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e1c:	2a07      	cmp	r2, #7
 8002e1e:	bf14      	ite	ne
 8002e20:	2201      	movne	r2, #1
 8002e22:	2200      	moveq	r2, #0
 8002e24:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d113      	bne.n	8002e52 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e34:	085b      	lsrs	r3, r3, #1
 8002e36:	3b01      	subs	r3, #1
 8002e38:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d109      	bne.n	8002e52 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e48:	085b      	lsrs	r3, r3, #1
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d06e      	beq.n	8002f30 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	2b0c      	cmp	r3, #12
 8002e56:	d069      	beq.n	8002f2c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002e58:	4b53      	ldr	r3, [pc, #332]	; (8002fa8 <HAL_RCC_OscConfig+0x780>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d105      	bne.n	8002e70 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002e64:	4b50      	ldr	r3, [pc, #320]	; (8002fa8 <HAL_RCC_OscConfig+0x780>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e0ad      	b.n	8002fd0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002e74:	4b4c      	ldr	r3, [pc, #304]	; (8002fa8 <HAL_RCC_OscConfig+0x780>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a4b      	ldr	r2, [pc, #300]	; (8002fa8 <HAL_RCC_OscConfig+0x780>)
 8002e7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e7e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e80:	f7ff f92e 	bl	80020e0 <HAL_GetTick>
 8002e84:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e86:	e008      	b.n	8002e9a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e88:	f7ff f92a 	bl	80020e0 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e09a      	b.n	8002fd0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e9a:	4b43      	ldr	r3, [pc, #268]	; (8002fa8 <HAL_RCC_OscConfig+0x780>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d1f0      	bne.n	8002e88 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ea6:	4b40      	ldr	r3, [pc, #256]	; (8002fa8 <HAL_RCC_OscConfig+0x780>)
 8002ea8:	68da      	ldr	r2, [r3, #12]
 8002eaa:	4b40      	ldr	r3, [pc, #256]	; (8002fac <HAL_RCC_OscConfig+0x784>)
 8002eac:	4013      	ands	r3, r2
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002eb6:	3a01      	subs	r2, #1
 8002eb8:	0112      	lsls	r2, r2, #4
 8002eba:	4311      	orrs	r1, r2
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ec0:	0212      	lsls	r2, r2, #8
 8002ec2:	4311      	orrs	r1, r2
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002ec8:	0852      	lsrs	r2, r2, #1
 8002eca:	3a01      	subs	r2, #1
 8002ecc:	0552      	lsls	r2, r2, #21
 8002ece:	4311      	orrs	r1, r2
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002ed4:	0852      	lsrs	r2, r2, #1
 8002ed6:	3a01      	subs	r2, #1
 8002ed8:	0652      	lsls	r2, r2, #25
 8002eda:	4311      	orrs	r1, r2
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ee0:	0912      	lsrs	r2, r2, #4
 8002ee2:	0452      	lsls	r2, r2, #17
 8002ee4:	430a      	orrs	r2, r1
 8002ee6:	4930      	ldr	r1, [pc, #192]	; (8002fa8 <HAL_RCC_OscConfig+0x780>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002eec:	4b2e      	ldr	r3, [pc, #184]	; (8002fa8 <HAL_RCC_OscConfig+0x780>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a2d      	ldr	r2, [pc, #180]	; (8002fa8 <HAL_RCC_OscConfig+0x780>)
 8002ef2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ef6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ef8:	4b2b      	ldr	r3, [pc, #172]	; (8002fa8 <HAL_RCC_OscConfig+0x780>)
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	4a2a      	ldr	r2, [pc, #168]	; (8002fa8 <HAL_RCC_OscConfig+0x780>)
 8002efe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f02:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f04:	f7ff f8ec 	bl	80020e0 <HAL_GetTick>
 8002f08:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f0a:	e008      	b.n	8002f1e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f0c:	f7ff f8e8 	bl	80020e0 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e058      	b.n	8002fd0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f1e:	4b22      	ldr	r3, [pc, #136]	; (8002fa8 <HAL_RCC_OscConfig+0x780>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d0f0      	beq.n	8002f0c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f2a:	e050      	b.n	8002fce <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e04f      	b.n	8002fd0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f30:	4b1d      	ldr	r3, [pc, #116]	; (8002fa8 <HAL_RCC_OscConfig+0x780>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d148      	bne.n	8002fce <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002f3c:	4b1a      	ldr	r3, [pc, #104]	; (8002fa8 <HAL_RCC_OscConfig+0x780>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a19      	ldr	r2, [pc, #100]	; (8002fa8 <HAL_RCC_OscConfig+0x780>)
 8002f42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f46:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f48:	4b17      	ldr	r3, [pc, #92]	; (8002fa8 <HAL_RCC_OscConfig+0x780>)
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	4a16      	ldr	r2, [pc, #88]	; (8002fa8 <HAL_RCC_OscConfig+0x780>)
 8002f4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f52:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f54:	f7ff f8c4 	bl	80020e0 <HAL_GetTick>
 8002f58:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f5a:	e008      	b.n	8002f6e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f5c:	f7ff f8c0 	bl	80020e0 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e030      	b.n	8002fd0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f6e:	4b0e      	ldr	r3, [pc, #56]	; (8002fa8 <HAL_RCC_OscConfig+0x780>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d0f0      	beq.n	8002f5c <HAL_RCC_OscConfig+0x734>
 8002f7a:	e028      	b.n	8002fce <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	2b0c      	cmp	r3, #12
 8002f80:	d023      	beq.n	8002fca <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f82:	4b09      	ldr	r3, [pc, #36]	; (8002fa8 <HAL_RCC_OscConfig+0x780>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a08      	ldr	r2, [pc, #32]	; (8002fa8 <HAL_RCC_OscConfig+0x780>)
 8002f88:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f8e:	f7ff f8a7 	bl	80020e0 <HAL_GetTick>
 8002f92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f94:	e00c      	b.n	8002fb0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f96:	f7ff f8a3 	bl	80020e0 <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d905      	bls.n	8002fb0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e013      	b.n	8002fd0 <HAL_RCC_OscConfig+0x7a8>
 8002fa8:	40021000 	.word	0x40021000
 8002fac:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fb0:	4b09      	ldr	r3, [pc, #36]	; (8002fd8 <HAL_RCC_OscConfig+0x7b0>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d1ec      	bne.n	8002f96 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002fbc:	4b06      	ldr	r3, [pc, #24]	; (8002fd8 <HAL_RCC_OscConfig+0x7b0>)
 8002fbe:	68da      	ldr	r2, [r3, #12]
 8002fc0:	4905      	ldr	r1, [pc, #20]	; (8002fd8 <HAL_RCC_OscConfig+0x7b0>)
 8002fc2:	4b06      	ldr	r3, [pc, #24]	; (8002fdc <HAL_RCC_OscConfig+0x7b4>)
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	60cb      	str	r3, [r1, #12]
 8002fc8:	e001      	b.n	8002fce <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e000      	b.n	8002fd0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3720      	adds	r7, #32
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	40021000 	.word	0x40021000
 8002fdc:	feeefffc 	.word	0xfeeefffc

08002fe0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d101      	bne.n	8002ff4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e0e7      	b.n	80031c4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ff4:	4b75      	ldr	r3, [pc, #468]	; (80031cc <HAL_RCC_ClockConfig+0x1ec>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0307 	and.w	r3, r3, #7
 8002ffc:	683a      	ldr	r2, [r7, #0]
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d910      	bls.n	8003024 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003002:	4b72      	ldr	r3, [pc, #456]	; (80031cc <HAL_RCC_ClockConfig+0x1ec>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f023 0207 	bic.w	r2, r3, #7
 800300a:	4970      	ldr	r1, [pc, #448]	; (80031cc <HAL_RCC_ClockConfig+0x1ec>)
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	4313      	orrs	r3, r2
 8003010:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003012:	4b6e      	ldr	r3, [pc, #440]	; (80031cc <HAL_RCC_ClockConfig+0x1ec>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0307 	and.w	r3, r3, #7
 800301a:	683a      	ldr	r2, [r7, #0]
 800301c:	429a      	cmp	r2, r3
 800301e:	d001      	beq.n	8003024 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e0cf      	b.n	80031c4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0302 	and.w	r3, r3, #2
 800302c:	2b00      	cmp	r3, #0
 800302e:	d010      	beq.n	8003052 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689a      	ldr	r2, [r3, #8]
 8003034:	4b66      	ldr	r3, [pc, #408]	; (80031d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800303c:	429a      	cmp	r2, r3
 800303e:	d908      	bls.n	8003052 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003040:	4b63      	ldr	r3, [pc, #396]	; (80031d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	4960      	ldr	r1, [pc, #384]	; (80031d0 <HAL_RCC_ClockConfig+0x1f0>)
 800304e:	4313      	orrs	r3, r2
 8003050:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	2b00      	cmp	r3, #0
 800305c:	d04c      	beq.n	80030f8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	2b03      	cmp	r3, #3
 8003064:	d107      	bne.n	8003076 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003066:	4b5a      	ldr	r3, [pc, #360]	; (80031d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d121      	bne.n	80030b6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e0a6      	b.n	80031c4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	2b02      	cmp	r3, #2
 800307c:	d107      	bne.n	800308e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800307e:	4b54      	ldr	r3, [pc, #336]	; (80031d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d115      	bne.n	80030b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e09a      	b.n	80031c4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d107      	bne.n	80030a6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003096:	4b4e      	ldr	r3, [pc, #312]	; (80031d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d109      	bne.n	80030b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e08e      	b.n	80031c4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030a6:	4b4a      	ldr	r3, [pc, #296]	; (80031d0 <HAL_RCC_ClockConfig+0x1f0>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d101      	bne.n	80030b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e086      	b.n	80031c4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80030b6:	4b46      	ldr	r3, [pc, #280]	; (80031d0 <HAL_RCC_ClockConfig+0x1f0>)
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f023 0203 	bic.w	r2, r3, #3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	4943      	ldr	r1, [pc, #268]	; (80031d0 <HAL_RCC_ClockConfig+0x1f0>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030c8:	f7ff f80a 	bl	80020e0 <HAL_GetTick>
 80030cc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ce:	e00a      	b.n	80030e6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030d0:	f7ff f806 	bl	80020e0 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	f241 3288 	movw	r2, #5000	; 0x1388
 80030de:	4293      	cmp	r3, r2
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e06e      	b.n	80031c4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030e6:	4b3a      	ldr	r3, [pc, #232]	; (80031d0 <HAL_RCC_ClockConfig+0x1f0>)
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f003 020c 	and.w	r2, r3, #12
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d1eb      	bne.n	80030d0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0302 	and.w	r3, r3, #2
 8003100:	2b00      	cmp	r3, #0
 8003102:	d010      	beq.n	8003126 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689a      	ldr	r2, [r3, #8]
 8003108:	4b31      	ldr	r3, [pc, #196]	; (80031d0 <HAL_RCC_ClockConfig+0x1f0>)
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003110:	429a      	cmp	r2, r3
 8003112:	d208      	bcs.n	8003126 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003114:	4b2e      	ldr	r3, [pc, #184]	; (80031d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	492b      	ldr	r1, [pc, #172]	; (80031d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003122:	4313      	orrs	r3, r2
 8003124:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003126:	4b29      	ldr	r3, [pc, #164]	; (80031cc <HAL_RCC_ClockConfig+0x1ec>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0307 	and.w	r3, r3, #7
 800312e:	683a      	ldr	r2, [r7, #0]
 8003130:	429a      	cmp	r2, r3
 8003132:	d210      	bcs.n	8003156 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003134:	4b25      	ldr	r3, [pc, #148]	; (80031cc <HAL_RCC_ClockConfig+0x1ec>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f023 0207 	bic.w	r2, r3, #7
 800313c:	4923      	ldr	r1, [pc, #140]	; (80031cc <HAL_RCC_ClockConfig+0x1ec>)
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	4313      	orrs	r3, r2
 8003142:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003144:	4b21      	ldr	r3, [pc, #132]	; (80031cc <HAL_RCC_ClockConfig+0x1ec>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0307 	and.w	r3, r3, #7
 800314c:	683a      	ldr	r2, [r7, #0]
 800314e:	429a      	cmp	r2, r3
 8003150:	d001      	beq.n	8003156 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e036      	b.n	80031c4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0304 	and.w	r3, r3, #4
 800315e:	2b00      	cmp	r3, #0
 8003160:	d008      	beq.n	8003174 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003162:	4b1b      	ldr	r3, [pc, #108]	; (80031d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	4918      	ldr	r1, [pc, #96]	; (80031d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003170:	4313      	orrs	r3, r2
 8003172:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0308 	and.w	r3, r3, #8
 800317c:	2b00      	cmp	r3, #0
 800317e:	d009      	beq.n	8003194 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003180:	4b13      	ldr	r3, [pc, #76]	; (80031d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	00db      	lsls	r3, r3, #3
 800318e:	4910      	ldr	r1, [pc, #64]	; (80031d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003190:	4313      	orrs	r3, r2
 8003192:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003194:	f000 f824 	bl	80031e0 <HAL_RCC_GetSysClockFreq>
 8003198:	4602      	mov	r2, r0
 800319a:	4b0d      	ldr	r3, [pc, #52]	; (80031d0 <HAL_RCC_ClockConfig+0x1f0>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	091b      	lsrs	r3, r3, #4
 80031a0:	f003 030f 	and.w	r3, r3, #15
 80031a4:	490b      	ldr	r1, [pc, #44]	; (80031d4 <HAL_RCC_ClockConfig+0x1f4>)
 80031a6:	5ccb      	ldrb	r3, [r1, r3]
 80031a8:	f003 031f 	and.w	r3, r3, #31
 80031ac:	fa22 f303 	lsr.w	r3, r2, r3
 80031b0:	4a09      	ldr	r2, [pc, #36]	; (80031d8 <HAL_RCC_ClockConfig+0x1f8>)
 80031b2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80031b4:	4b09      	ldr	r3, [pc, #36]	; (80031dc <HAL_RCC_ClockConfig+0x1fc>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7fe ff41 	bl	8002040 <HAL_InitTick>
 80031be:	4603      	mov	r3, r0
 80031c0:	72fb      	strb	r3, [r7, #11]

  return status;
 80031c2:	7afb      	ldrb	r3, [r7, #11]
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3710      	adds	r7, #16
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	40022000 	.word	0x40022000
 80031d0:	40021000 	.word	0x40021000
 80031d4:	080112a8 	.word	0x080112a8
 80031d8:	20000000 	.word	0x20000000
 80031dc:	20000004 	.word	0x20000004

080031e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b089      	sub	sp, #36	; 0x24
 80031e4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80031e6:	2300      	movs	r3, #0
 80031e8:	61fb      	str	r3, [r7, #28]
 80031ea:	2300      	movs	r3, #0
 80031ec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031ee:	4b3e      	ldr	r3, [pc, #248]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f003 030c 	and.w	r3, r3, #12
 80031f6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031f8:	4b3b      	ldr	r3, [pc, #236]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	f003 0303 	and.w	r3, r3, #3
 8003200:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d005      	beq.n	8003214 <HAL_RCC_GetSysClockFreq+0x34>
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	2b0c      	cmp	r3, #12
 800320c:	d121      	bne.n	8003252 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2b01      	cmp	r3, #1
 8003212:	d11e      	bne.n	8003252 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003214:	4b34      	ldr	r3, [pc, #208]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0308 	and.w	r3, r3, #8
 800321c:	2b00      	cmp	r3, #0
 800321e:	d107      	bne.n	8003230 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003220:	4b31      	ldr	r3, [pc, #196]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003222:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003226:	0a1b      	lsrs	r3, r3, #8
 8003228:	f003 030f 	and.w	r3, r3, #15
 800322c:	61fb      	str	r3, [r7, #28]
 800322e:	e005      	b.n	800323c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003230:	4b2d      	ldr	r3, [pc, #180]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	091b      	lsrs	r3, r3, #4
 8003236:	f003 030f 	and.w	r3, r3, #15
 800323a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800323c:	4a2b      	ldr	r2, [pc, #172]	; (80032ec <HAL_RCC_GetSysClockFreq+0x10c>)
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003244:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d10d      	bne.n	8003268 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003250:	e00a      	b.n	8003268 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	2b04      	cmp	r3, #4
 8003256:	d102      	bne.n	800325e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003258:	4b25      	ldr	r3, [pc, #148]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x110>)
 800325a:	61bb      	str	r3, [r7, #24]
 800325c:	e004      	b.n	8003268 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	2b08      	cmp	r3, #8
 8003262:	d101      	bne.n	8003268 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003264:	4b23      	ldr	r3, [pc, #140]	; (80032f4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003266:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	2b0c      	cmp	r3, #12
 800326c:	d134      	bne.n	80032d8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800326e:	4b1e      	ldr	r3, [pc, #120]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	f003 0303 	and.w	r3, r3, #3
 8003276:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	2b02      	cmp	r3, #2
 800327c:	d003      	beq.n	8003286 <HAL_RCC_GetSysClockFreq+0xa6>
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	2b03      	cmp	r3, #3
 8003282:	d003      	beq.n	800328c <HAL_RCC_GetSysClockFreq+0xac>
 8003284:	e005      	b.n	8003292 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003286:	4b1a      	ldr	r3, [pc, #104]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003288:	617b      	str	r3, [r7, #20]
      break;
 800328a:	e005      	b.n	8003298 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800328c:	4b19      	ldr	r3, [pc, #100]	; (80032f4 <HAL_RCC_GetSysClockFreq+0x114>)
 800328e:	617b      	str	r3, [r7, #20]
      break;
 8003290:	e002      	b.n	8003298 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	617b      	str	r3, [r7, #20]
      break;
 8003296:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003298:	4b13      	ldr	r3, [pc, #76]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	091b      	lsrs	r3, r3, #4
 800329e:	f003 0307 	and.w	r3, r3, #7
 80032a2:	3301      	adds	r3, #1
 80032a4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80032a6:	4b10      	ldr	r3, [pc, #64]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	0a1b      	lsrs	r3, r3, #8
 80032ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032b0:	697a      	ldr	r2, [r7, #20]
 80032b2:	fb03 f202 	mul.w	r2, r3, r2
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032bc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80032be:	4b0a      	ldr	r3, [pc, #40]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	0e5b      	lsrs	r3, r3, #25
 80032c4:	f003 0303 	and.w	r3, r3, #3
 80032c8:	3301      	adds	r3, #1
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80032ce:	697a      	ldr	r2, [r7, #20]
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80032d8:	69bb      	ldr	r3, [r7, #24]
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3724      	adds	r7, #36	; 0x24
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	40021000 	.word	0x40021000
 80032ec:	080112c0 	.word	0x080112c0
 80032f0:	00f42400 	.word	0x00f42400
 80032f4:	007a1200 	.word	0x007a1200

080032f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032f8:	b480      	push	{r7}
 80032fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032fc:	4b03      	ldr	r3, [pc, #12]	; (800330c <HAL_RCC_GetHCLKFreq+0x14>)
 80032fe:	681b      	ldr	r3, [r3, #0]
}
 8003300:	4618      	mov	r0, r3
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	20000000 	.word	0x20000000

08003310 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003314:	f7ff fff0 	bl	80032f8 <HAL_RCC_GetHCLKFreq>
 8003318:	4602      	mov	r2, r0
 800331a:	4b06      	ldr	r3, [pc, #24]	; (8003334 <HAL_RCC_GetPCLK1Freq+0x24>)
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	0a1b      	lsrs	r3, r3, #8
 8003320:	f003 0307 	and.w	r3, r3, #7
 8003324:	4904      	ldr	r1, [pc, #16]	; (8003338 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003326:	5ccb      	ldrb	r3, [r1, r3]
 8003328:	f003 031f 	and.w	r3, r3, #31
 800332c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003330:	4618      	mov	r0, r3
 8003332:	bd80      	pop	{r7, pc}
 8003334:	40021000 	.word	0x40021000
 8003338:	080112b8 	.word	0x080112b8

0800333c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003340:	f7ff ffda 	bl	80032f8 <HAL_RCC_GetHCLKFreq>
 8003344:	4602      	mov	r2, r0
 8003346:	4b06      	ldr	r3, [pc, #24]	; (8003360 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	0adb      	lsrs	r3, r3, #11
 800334c:	f003 0307 	and.w	r3, r3, #7
 8003350:	4904      	ldr	r1, [pc, #16]	; (8003364 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003352:	5ccb      	ldrb	r3, [r1, r3]
 8003354:	f003 031f 	and.w	r3, r3, #31
 8003358:	fa22 f303 	lsr.w	r3, r2, r3
}
 800335c:	4618      	mov	r0, r3
 800335e:	bd80      	pop	{r7, pc}
 8003360:	40021000 	.word	0x40021000
 8003364:	080112b8 	.word	0x080112b8

08003368 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b086      	sub	sp, #24
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003370:	2300      	movs	r3, #0
 8003372:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003374:	4b2a      	ldr	r3, [pc, #168]	; (8003420 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003378:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d003      	beq.n	8003388 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003380:	f7ff f9ee 	bl	8002760 <HAL_PWREx_GetVoltageRange>
 8003384:	6178      	str	r0, [r7, #20]
 8003386:	e014      	b.n	80033b2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003388:	4b25      	ldr	r3, [pc, #148]	; (8003420 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800338a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800338c:	4a24      	ldr	r2, [pc, #144]	; (8003420 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800338e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003392:	6593      	str	r3, [r2, #88]	; 0x58
 8003394:	4b22      	ldr	r3, [pc, #136]	; (8003420 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003398:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800339c:	60fb      	str	r3, [r7, #12]
 800339e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80033a0:	f7ff f9de 	bl	8002760 <HAL_PWREx_GetVoltageRange>
 80033a4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80033a6:	4b1e      	ldr	r3, [pc, #120]	; (8003420 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033aa:	4a1d      	ldr	r2, [pc, #116]	; (8003420 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033b0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033b8:	d10b      	bne.n	80033d2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2b80      	cmp	r3, #128	; 0x80
 80033be:	d919      	bls.n	80033f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2ba0      	cmp	r3, #160	; 0xa0
 80033c4:	d902      	bls.n	80033cc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80033c6:	2302      	movs	r3, #2
 80033c8:	613b      	str	r3, [r7, #16]
 80033ca:	e013      	b.n	80033f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80033cc:	2301      	movs	r3, #1
 80033ce:	613b      	str	r3, [r7, #16]
 80033d0:	e010      	b.n	80033f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2b80      	cmp	r3, #128	; 0x80
 80033d6:	d902      	bls.n	80033de <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80033d8:	2303      	movs	r3, #3
 80033da:	613b      	str	r3, [r7, #16]
 80033dc:	e00a      	b.n	80033f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2b80      	cmp	r3, #128	; 0x80
 80033e2:	d102      	bne.n	80033ea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80033e4:	2302      	movs	r3, #2
 80033e6:	613b      	str	r3, [r7, #16]
 80033e8:	e004      	b.n	80033f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2b70      	cmp	r3, #112	; 0x70
 80033ee:	d101      	bne.n	80033f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80033f0:	2301      	movs	r3, #1
 80033f2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80033f4:	4b0b      	ldr	r3, [pc, #44]	; (8003424 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f023 0207 	bic.w	r2, r3, #7
 80033fc:	4909      	ldr	r1, [pc, #36]	; (8003424 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	4313      	orrs	r3, r2
 8003402:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003404:	4b07      	ldr	r3, [pc, #28]	; (8003424 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0307 	and.w	r3, r3, #7
 800340c:	693a      	ldr	r2, [r7, #16]
 800340e:	429a      	cmp	r2, r3
 8003410:	d001      	beq.n	8003416 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e000      	b.n	8003418 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	3718      	adds	r7, #24
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	40021000 	.word	0x40021000
 8003424:	40022000 	.word	0x40022000

08003428 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003430:	2300      	movs	r3, #0
 8003432:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003434:	2300      	movs	r3, #0
 8003436:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003440:	2b00      	cmp	r3, #0
 8003442:	d041      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003448:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800344c:	d02a      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800344e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003452:	d824      	bhi.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003454:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003458:	d008      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800345a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800345e:	d81e      	bhi.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003460:	2b00      	cmp	r3, #0
 8003462:	d00a      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003464:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003468:	d010      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800346a:	e018      	b.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800346c:	4b86      	ldr	r3, [pc, #536]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	4a85      	ldr	r2, [pc, #532]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003472:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003476:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003478:	e015      	b.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	3304      	adds	r3, #4
 800347e:	2100      	movs	r1, #0
 8003480:	4618      	mov	r0, r3
 8003482:	f000 fabb 	bl	80039fc <RCCEx_PLLSAI1_Config>
 8003486:	4603      	mov	r3, r0
 8003488:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800348a:	e00c      	b.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	3320      	adds	r3, #32
 8003490:	2100      	movs	r1, #0
 8003492:	4618      	mov	r0, r3
 8003494:	f000 fba6 	bl	8003be4 <RCCEx_PLLSAI2_Config>
 8003498:	4603      	mov	r3, r0
 800349a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800349c:	e003      	b.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	74fb      	strb	r3, [r7, #19]
      break;
 80034a2:	e000      	b.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80034a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034a6:	7cfb      	ldrb	r3, [r7, #19]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d10b      	bne.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034ac:	4b76      	ldr	r3, [pc, #472]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034ba:	4973      	ldr	r1, [pc, #460]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034bc:	4313      	orrs	r3, r2
 80034be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80034c2:	e001      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034c4:	7cfb      	ldrb	r3, [r7, #19]
 80034c6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d041      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034d8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80034dc:	d02a      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80034de:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80034e2:	d824      	bhi.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80034e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80034e8:	d008      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80034ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80034ee:	d81e      	bhi.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d00a      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80034f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034f8:	d010      	beq.n	800351c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80034fa:	e018      	b.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80034fc:	4b62      	ldr	r3, [pc, #392]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	4a61      	ldr	r2, [pc, #388]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003502:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003506:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003508:	e015      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	3304      	adds	r3, #4
 800350e:	2100      	movs	r1, #0
 8003510:	4618      	mov	r0, r3
 8003512:	f000 fa73 	bl	80039fc <RCCEx_PLLSAI1_Config>
 8003516:	4603      	mov	r3, r0
 8003518:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800351a:	e00c      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	3320      	adds	r3, #32
 8003520:	2100      	movs	r1, #0
 8003522:	4618      	mov	r0, r3
 8003524:	f000 fb5e 	bl	8003be4 <RCCEx_PLLSAI2_Config>
 8003528:	4603      	mov	r3, r0
 800352a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800352c:	e003      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	74fb      	strb	r3, [r7, #19]
      break;
 8003532:	e000      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003534:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003536:	7cfb      	ldrb	r3, [r7, #19]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d10b      	bne.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800353c:	4b52      	ldr	r3, [pc, #328]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800353e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003542:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800354a:	494f      	ldr	r1, [pc, #316]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800354c:	4313      	orrs	r3, r2
 800354e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003552:	e001      	b.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003554:	7cfb      	ldrb	r3, [r7, #19]
 8003556:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003560:	2b00      	cmp	r3, #0
 8003562:	f000 80a0 	beq.w	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003566:	2300      	movs	r3, #0
 8003568:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800356a:	4b47      	ldr	r3, [pc, #284]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800356c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800356e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d101      	bne.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003576:	2301      	movs	r3, #1
 8003578:	e000      	b.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800357a:	2300      	movs	r3, #0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00d      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003580:	4b41      	ldr	r3, [pc, #260]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003584:	4a40      	ldr	r2, [pc, #256]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003586:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800358a:	6593      	str	r3, [r2, #88]	; 0x58
 800358c:	4b3e      	ldr	r3, [pc, #248]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800358e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003594:	60bb      	str	r3, [r7, #8]
 8003596:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003598:	2301      	movs	r3, #1
 800359a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800359c:	4b3b      	ldr	r3, [pc, #236]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a3a      	ldr	r2, [pc, #232]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80035a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80035a8:	f7fe fd9a 	bl	80020e0 <HAL_GetTick>
 80035ac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80035ae:	e009      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035b0:	f7fe fd96 	bl	80020e0 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d902      	bls.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	74fb      	strb	r3, [r7, #19]
        break;
 80035c2:	e005      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80035c4:	4b31      	ldr	r3, [pc, #196]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d0ef      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80035d0:	7cfb      	ldrb	r3, [r7, #19]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d15c      	bne.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80035d6:	4b2c      	ldr	r3, [pc, #176]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035e0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d01f      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035ee:	697a      	ldr	r2, [r7, #20]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d019      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80035f4:	4b24      	ldr	r3, [pc, #144]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035fe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003600:	4b21      	ldr	r3, [pc, #132]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003606:	4a20      	ldr	r2, [pc, #128]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003608:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800360c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003610:	4b1d      	ldr	r3, [pc, #116]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003616:	4a1c      	ldr	r2, [pc, #112]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003618:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800361c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003620:	4a19      	ldr	r2, [pc, #100]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	2b00      	cmp	r3, #0
 8003630:	d016      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003632:	f7fe fd55 	bl	80020e0 <HAL_GetTick>
 8003636:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003638:	e00b      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800363a:	f7fe fd51 	bl	80020e0 <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	f241 3288 	movw	r2, #5000	; 0x1388
 8003648:	4293      	cmp	r3, r2
 800364a:	d902      	bls.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	74fb      	strb	r3, [r7, #19]
            break;
 8003650:	e006      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003652:	4b0d      	ldr	r3, [pc, #52]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003658:	f003 0302 	and.w	r3, r3, #2
 800365c:	2b00      	cmp	r3, #0
 800365e:	d0ec      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003660:	7cfb      	ldrb	r3, [r7, #19]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d10c      	bne.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003666:	4b08      	ldr	r3, [pc, #32]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800366c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003676:	4904      	ldr	r1, [pc, #16]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003678:	4313      	orrs	r3, r2
 800367a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800367e:	e009      	b.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003680:	7cfb      	ldrb	r3, [r7, #19]
 8003682:	74bb      	strb	r3, [r7, #18]
 8003684:	e006      	b.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003686:	bf00      	nop
 8003688:	40021000 	.word	0x40021000
 800368c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003690:	7cfb      	ldrb	r3, [r7, #19]
 8003692:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003694:	7c7b      	ldrb	r3, [r7, #17]
 8003696:	2b01      	cmp	r3, #1
 8003698:	d105      	bne.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800369a:	4b9e      	ldr	r3, [pc, #632]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800369c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800369e:	4a9d      	ldr	r2, [pc, #628]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036a4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d00a      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036b2:	4b98      	ldr	r3, [pc, #608]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b8:	f023 0203 	bic.w	r2, r3, #3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c0:	4994      	ldr	r1, [pc, #592]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d00a      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80036d4:	4b8f      	ldr	r3, [pc, #572]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036da:	f023 020c 	bic.w	r2, r3, #12
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036e2:	498c      	ldr	r1, [pc, #560]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036e4:	4313      	orrs	r3, r2
 80036e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0304 	and.w	r3, r3, #4
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00a      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80036f6:	4b87      	ldr	r3, [pc, #540]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036fc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003704:	4983      	ldr	r1, [pc, #524]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003706:	4313      	orrs	r3, r2
 8003708:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0308 	and.w	r3, r3, #8
 8003714:	2b00      	cmp	r3, #0
 8003716:	d00a      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003718:	4b7e      	ldr	r3, [pc, #504]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800371a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800371e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003726:	497b      	ldr	r1, [pc, #492]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003728:	4313      	orrs	r3, r2
 800372a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0310 	and.w	r3, r3, #16
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00a      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800373a:	4b76      	ldr	r3, [pc, #472]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800373c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003740:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003748:	4972      	ldr	r1, [pc, #456]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800374a:	4313      	orrs	r3, r2
 800374c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0320 	and.w	r3, r3, #32
 8003758:	2b00      	cmp	r3, #0
 800375a:	d00a      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800375c:	4b6d      	ldr	r3, [pc, #436]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800375e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003762:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800376a:	496a      	ldr	r1, [pc, #424]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800376c:	4313      	orrs	r3, r2
 800376e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800377a:	2b00      	cmp	r3, #0
 800377c:	d00a      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800377e:	4b65      	ldr	r3, [pc, #404]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003780:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003784:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800378c:	4961      	ldr	r1, [pc, #388]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800378e:	4313      	orrs	r3, r2
 8003790:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800379c:	2b00      	cmp	r3, #0
 800379e:	d00a      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80037a0:	4b5c      	ldr	r3, [pc, #368]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037ae:	4959      	ldr	r1, [pc, #356]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d00a      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037c2:	4b54      	ldr	r3, [pc, #336]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037c8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037d0:	4950      	ldr	r1, [pc, #320]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d00a      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80037e4:	4b4b      	ldr	r3, [pc, #300]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f2:	4948      	ldr	r1, [pc, #288]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003802:	2b00      	cmp	r3, #0
 8003804:	d00a      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003806:	4b43      	ldr	r3, [pc, #268]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800380c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003814:	493f      	ldr	r1, [pc, #252]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003816:	4313      	orrs	r3, r2
 8003818:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d028      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003828:	4b3a      	ldr	r3, [pc, #232]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800382a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800382e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003836:	4937      	ldr	r1, [pc, #220]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003838:	4313      	orrs	r3, r2
 800383a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003842:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003846:	d106      	bne.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003848:	4b32      	ldr	r3, [pc, #200]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	4a31      	ldr	r2, [pc, #196]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800384e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003852:	60d3      	str	r3, [r2, #12]
 8003854:	e011      	b.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800385a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800385e:	d10c      	bne.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	3304      	adds	r3, #4
 8003864:	2101      	movs	r1, #1
 8003866:	4618      	mov	r0, r3
 8003868:	f000 f8c8 	bl	80039fc <RCCEx_PLLSAI1_Config>
 800386c:	4603      	mov	r3, r0
 800386e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003870:	7cfb      	ldrb	r3, [r7, #19]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d001      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003876:	7cfb      	ldrb	r3, [r7, #19]
 8003878:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d028      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003886:	4b23      	ldr	r3, [pc, #140]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003888:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800388c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003894:	491f      	ldr	r1, [pc, #124]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003896:	4313      	orrs	r3, r2
 8003898:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038a4:	d106      	bne.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038a6:	4b1b      	ldr	r3, [pc, #108]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	4a1a      	ldr	r2, [pc, #104]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038b0:	60d3      	str	r3, [r2, #12]
 80038b2:	e011      	b.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038bc:	d10c      	bne.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	3304      	adds	r3, #4
 80038c2:	2101      	movs	r1, #1
 80038c4:	4618      	mov	r0, r3
 80038c6:	f000 f899 	bl	80039fc <RCCEx_PLLSAI1_Config>
 80038ca:	4603      	mov	r3, r0
 80038cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038ce:	7cfb      	ldrb	r3, [r7, #19]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d001      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80038d4:	7cfb      	ldrb	r3, [r7, #19]
 80038d6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d02b      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80038e4:	4b0b      	ldr	r3, [pc, #44]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038f2:	4908      	ldr	r1, [pc, #32]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003902:	d109      	bne.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003904:	4b03      	ldr	r3, [pc, #12]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	4a02      	ldr	r2, [pc, #8]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800390a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800390e:	60d3      	str	r3, [r2, #12]
 8003910:	e014      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003912:	bf00      	nop
 8003914:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800391c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003920:	d10c      	bne.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	3304      	adds	r3, #4
 8003926:	2101      	movs	r1, #1
 8003928:	4618      	mov	r0, r3
 800392a:	f000 f867 	bl	80039fc <RCCEx_PLLSAI1_Config>
 800392e:	4603      	mov	r3, r0
 8003930:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003932:	7cfb      	ldrb	r3, [r7, #19]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d001      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003938:	7cfb      	ldrb	r3, [r7, #19]
 800393a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d02f      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003948:	4b2b      	ldr	r3, [pc, #172]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800394a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800394e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003956:	4928      	ldr	r1, [pc, #160]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003958:	4313      	orrs	r3, r2
 800395a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003962:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003966:	d10d      	bne.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	3304      	adds	r3, #4
 800396c:	2102      	movs	r1, #2
 800396e:	4618      	mov	r0, r3
 8003970:	f000 f844 	bl	80039fc <RCCEx_PLLSAI1_Config>
 8003974:	4603      	mov	r3, r0
 8003976:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003978:	7cfb      	ldrb	r3, [r7, #19]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d014      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800397e:	7cfb      	ldrb	r3, [r7, #19]
 8003980:	74bb      	strb	r3, [r7, #18]
 8003982:	e011      	b.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003988:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800398c:	d10c      	bne.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	3320      	adds	r3, #32
 8003992:	2102      	movs	r1, #2
 8003994:	4618      	mov	r0, r3
 8003996:	f000 f925 	bl	8003be4 <RCCEx_PLLSAI2_Config>
 800399a:	4603      	mov	r3, r0
 800399c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800399e:	7cfb      	ldrb	r3, [r7, #19]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d001      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80039a4:	7cfb      	ldrb	r3, [r7, #19]
 80039a6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d00a      	beq.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80039b4:	4b10      	ldr	r3, [pc, #64]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80039b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ba:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039c2:	490d      	ldr	r1, [pc, #52]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00b      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80039d6:	4b08      	ldr	r3, [pc, #32]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80039d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039e6:	4904      	ldr	r1, [pc, #16]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80039e8:	4313      	orrs	r3, r2
 80039ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80039ee:	7cbb      	ldrb	r3, [r7, #18]
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3718      	adds	r7, #24
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	40021000 	.word	0x40021000

080039fc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a06:	2300      	movs	r3, #0
 8003a08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a0a:	4b75      	ldr	r3, [pc, #468]	; (8003be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	f003 0303 	and.w	r3, r3, #3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d018      	beq.n	8003a48 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003a16:	4b72      	ldr	r3, [pc, #456]	; (8003be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	f003 0203 	and.w	r2, r3, #3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d10d      	bne.n	8003a42 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
       ||
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d009      	beq.n	8003a42 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003a2e:	4b6c      	ldr	r3, [pc, #432]	; (8003be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	091b      	lsrs	r3, r3, #4
 8003a34:	f003 0307 	and.w	r3, r3, #7
 8003a38:	1c5a      	adds	r2, r3, #1
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
       ||
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d047      	beq.n	8003ad2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	73fb      	strb	r3, [r7, #15]
 8003a46:	e044      	b.n	8003ad2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2b03      	cmp	r3, #3
 8003a4e:	d018      	beq.n	8003a82 <RCCEx_PLLSAI1_Config+0x86>
 8003a50:	2b03      	cmp	r3, #3
 8003a52:	d825      	bhi.n	8003aa0 <RCCEx_PLLSAI1_Config+0xa4>
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d002      	beq.n	8003a5e <RCCEx_PLLSAI1_Config+0x62>
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d009      	beq.n	8003a70 <RCCEx_PLLSAI1_Config+0x74>
 8003a5c:	e020      	b.n	8003aa0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a5e:	4b60      	ldr	r3, [pc, #384]	; (8003be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d11d      	bne.n	8003aa6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a6e:	e01a      	b.n	8003aa6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a70:	4b5b      	ldr	r3, [pc, #364]	; (8003be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d116      	bne.n	8003aaa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a80:	e013      	b.n	8003aaa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a82:	4b57      	ldr	r3, [pc, #348]	; (8003be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d10f      	bne.n	8003aae <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a8e:	4b54      	ldr	r3, [pc, #336]	; (8003be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d109      	bne.n	8003aae <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a9e:	e006      	b.n	8003aae <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	73fb      	strb	r3, [r7, #15]
      break;
 8003aa4:	e004      	b.n	8003ab0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003aa6:	bf00      	nop
 8003aa8:	e002      	b.n	8003ab0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003aaa:	bf00      	nop
 8003aac:	e000      	b.n	8003ab0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003aae:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ab0:	7bfb      	ldrb	r3, [r7, #15]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d10d      	bne.n	8003ad2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003ab6:	4b4a      	ldr	r3, [pc, #296]	; (8003be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6819      	ldr	r1, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	3b01      	subs	r3, #1
 8003ac8:	011b      	lsls	r3, r3, #4
 8003aca:	430b      	orrs	r3, r1
 8003acc:	4944      	ldr	r1, [pc, #272]	; (8003be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003ad2:	7bfb      	ldrb	r3, [r7, #15]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d17d      	bne.n	8003bd4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003ad8:	4b41      	ldr	r3, [pc, #260]	; (8003be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a40      	ldr	r2, [pc, #256]	; (8003be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ade:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003ae2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ae4:	f7fe fafc 	bl	80020e0 <HAL_GetTick>
 8003ae8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003aea:	e009      	b.n	8003b00 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003aec:	f7fe faf8 	bl	80020e0 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d902      	bls.n	8003b00 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	73fb      	strb	r3, [r7, #15]
        break;
 8003afe:	e005      	b.n	8003b0c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b00:	4b37      	ldr	r3, [pc, #220]	; (8003be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1ef      	bne.n	8003aec <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003b0c:	7bfb      	ldrb	r3, [r7, #15]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d160      	bne.n	8003bd4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d111      	bne.n	8003b3c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b18:	4b31      	ldr	r3, [pc, #196]	; (8003be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003b20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	6892      	ldr	r2, [r2, #8]
 8003b28:	0211      	lsls	r1, r2, #8
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	68d2      	ldr	r2, [r2, #12]
 8003b2e:	0912      	lsrs	r2, r2, #4
 8003b30:	0452      	lsls	r2, r2, #17
 8003b32:	430a      	orrs	r2, r1
 8003b34:	492a      	ldr	r1, [pc, #168]	; (8003be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	610b      	str	r3, [r1, #16]
 8003b3a:	e027      	b.n	8003b8c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d112      	bne.n	8003b68 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b42:	4b27      	ldr	r3, [pc, #156]	; (8003be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003b4a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	6892      	ldr	r2, [r2, #8]
 8003b52:	0211      	lsls	r1, r2, #8
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	6912      	ldr	r2, [r2, #16]
 8003b58:	0852      	lsrs	r2, r2, #1
 8003b5a:	3a01      	subs	r2, #1
 8003b5c:	0552      	lsls	r2, r2, #21
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	491f      	ldr	r1, [pc, #124]	; (8003be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	610b      	str	r3, [r1, #16]
 8003b66:	e011      	b.n	8003b8c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b68:	4b1d      	ldr	r3, [pc, #116]	; (8003be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b6a:	691b      	ldr	r3, [r3, #16]
 8003b6c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003b70:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	6892      	ldr	r2, [r2, #8]
 8003b78:	0211      	lsls	r1, r2, #8
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	6952      	ldr	r2, [r2, #20]
 8003b7e:	0852      	lsrs	r2, r2, #1
 8003b80:	3a01      	subs	r2, #1
 8003b82:	0652      	lsls	r2, r2, #25
 8003b84:	430a      	orrs	r2, r1
 8003b86:	4916      	ldr	r1, [pc, #88]	; (8003be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003b8c:	4b14      	ldr	r3, [pc, #80]	; (8003be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a13      	ldr	r2, [pc, #76]	; (8003be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b92:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b96:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b98:	f7fe faa2 	bl	80020e0 <HAL_GetTick>
 8003b9c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b9e:	e009      	b.n	8003bb4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ba0:	f7fe fa9e 	bl	80020e0 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d902      	bls.n	8003bb4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	73fb      	strb	r3, [r7, #15]
          break;
 8003bb2:	e005      	b.n	8003bc0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003bb4:	4b0a      	ldr	r3, [pc, #40]	; (8003be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d0ef      	beq.n	8003ba0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003bc0:	7bfb      	ldrb	r3, [r7, #15]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d106      	bne.n	8003bd4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003bc6:	4b06      	ldr	r3, [pc, #24]	; (8003be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bc8:	691a      	ldr	r2, [r3, #16]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	699b      	ldr	r3, [r3, #24]
 8003bce:	4904      	ldr	r1, [pc, #16]	; (8003be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3710      	adds	r7, #16
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	40021000 	.word	0x40021000

08003be4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003bf2:	4b6a      	ldr	r3, [pc, #424]	; (8003d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	f003 0303 	and.w	r3, r3, #3
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d018      	beq.n	8003c30 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003bfe:	4b67      	ldr	r3, [pc, #412]	; (8003d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	f003 0203 	and.w	r2, r3, #3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d10d      	bne.n	8003c2a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
       ||
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d009      	beq.n	8003c2a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003c16:	4b61      	ldr	r3, [pc, #388]	; (8003d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	091b      	lsrs	r3, r3, #4
 8003c1c:	f003 0307 	and.w	r3, r3, #7
 8003c20:	1c5a      	adds	r2, r3, #1
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
       ||
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d047      	beq.n	8003cba <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	73fb      	strb	r3, [r7, #15]
 8003c2e:	e044      	b.n	8003cba <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2b03      	cmp	r3, #3
 8003c36:	d018      	beq.n	8003c6a <RCCEx_PLLSAI2_Config+0x86>
 8003c38:	2b03      	cmp	r3, #3
 8003c3a:	d825      	bhi.n	8003c88 <RCCEx_PLLSAI2_Config+0xa4>
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d002      	beq.n	8003c46 <RCCEx_PLLSAI2_Config+0x62>
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d009      	beq.n	8003c58 <RCCEx_PLLSAI2_Config+0x74>
 8003c44:	e020      	b.n	8003c88 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003c46:	4b55      	ldr	r3, [pc, #340]	; (8003d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0302 	and.w	r3, r3, #2
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d11d      	bne.n	8003c8e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c56:	e01a      	b.n	8003c8e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c58:	4b50      	ldr	r3, [pc, #320]	; (8003d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d116      	bne.n	8003c92 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c68:	e013      	b.n	8003c92 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c6a:	4b4c      	ldr	r3, [pc, #304]	; (8003d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d10f      	bne.n	8003c96 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c76:	4b49      	ldr	r3, [pc, #292]	; (8003d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d109      	bne.n	8003c96 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c86:	e006      	b.n	8003c96 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	73fb      	strb	r3, [r7, #15]
      break;
 8003c8c:	e004      	b.n	8003c98 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003c8e:	bf00      	nop
 8003c90:	e002      	b.n	8003c98 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003c92:	bf00      	nop
 8003c94:	e000      	b.n	8003c98 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003c96:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c98:	7bfb      	ldrb	r3, [r7, #15]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d10d      	bne.n	8003cba <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003c9e:	4b3f      	ldr	r3, [pc, #252]	; (8003d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6819      	ldr	r1, [r3, #0]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	3b01      	subs	r3, #1
 8003cb0:	011b      	lsls	r3, r3, #4
 8003cb2:	430b      	orrs	r3, r1
 8003cb4:	4939      	ldr	r1, [pc, #228]	; (8003d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003cba:	7bfb      	ldrb	r3, [r7, #15]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d167      	bne.n	8003d90 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003cc0:	4b36      	ldr	r3, [pc, #216]	; (8003d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a35      	ldr	r2, [pc, #212]	; (8003d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ccc:	f7fe fa08 	bl	80020e0 <HAL_GetTick>
 8003cd0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003cd2:	e009      	b.n	8003ce8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003cd4:	f7fe fa04 	bl	80020e0 <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d902      	bls.n	8003ce8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	73fb      	strb	r3, [r7, #15]
        break;
 8003ce6:	e005      	b.n	8003cf4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003ce8:	4b2c      	ldr	r3, [pc, #176]	; (8003d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d1ef      	bne.n	8003cd4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003cf4:	7bfb      	ldrb	r3, [r7, #15]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d14a      	bne.n	8003d90 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d111      	bne.n	8003d24 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003d00:	4b26      	ldr	r3, [pc, #152]	; (8003d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d02:	695b      	ldr	r3, [r3, #20]
 8003d04:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003d08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	6892      	ldr	r2, [r2, #8]
 8003d10:	0211      	lsls	r1, r2, #8
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	68d2      	ldr	r2, [r2, #12]
 8003d16:	0912      	lsrs	r2, r2, #4
 8003d18:	0452      	lsls	r2, r2, #17
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	491f      	ldr	r1, [pc, #124]	; (8003d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	614b      	str	r3, [r1, #20]
 8003d22:	e011      	b.n	8003d48 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003d24:	4b1d      	ldr	r3, [pc, #116]	; (8003d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d26:	695b      	ldr	r3, [r3, #20]
 8003d28:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003d2c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	6892      	ldr	r2, [r2, #8]
 8003d34:	0211      	lsls	r1, r2, #8
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	6912      	ldr	r2, [r2, #16]
 8003d3a:	0852      	lsrs	r2, r2, #1
 8003d3c:	3a01      	subs	r2, #1
 8003d3e:	0652      	lsls	r2, r2, #25
 8003d40:	430a      	orrs	r2, r1
 8003d42:	4916      	ldr	r1, [pc, #88]	; (8003d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003d48:	4b14      	ldr	r3, [pc, #80]	; (8003d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a13      	ldr	r2, [pc, #76]	; (8003d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d52:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d54:	f7fe f9c4 	bl	80020e0 <HAL_GetTick>
 8003d58:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003d5a:	e009      	b.n	8003d70 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003d5c:	f7fe f9c0 	bl	80020e0 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d902      	bls.n	8003d70 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	73fb      	strb	r3, [r7, #15]
          break;
 8003d6e:	e005      	b.n	8003d7c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003d70:	4b0a      	ldr	r3, [pc, #40]	; (8003d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d0ef      	beq.n	8003d5c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003d7c:	7bfb      	ldrb	r3, [r7, #15]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d106      	bne.n	8003d90 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003d82:	4b06      	ldr	r3, [pc, #24]	; (8003d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d84:	695a      	ldr	r2, [r3, #20]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	4904      	ldr	r1, [pc, #16]	; (8003d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3710      	adds	r7, #16
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	40021000 	.word	0x40021000

08003da0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d101      	bne.n	8003db2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e095      	b.n	8003ede <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d108      	bne.n	8003dcc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dc2:	d009      	beq.n	8003dd8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	61da      	str	r2, [r3, #28]
 8003dca:	e005      	b.n	8003dd8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d106      	bne.n	8003df8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f7fd ff6e 	bl	8001cd4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2202      	movs	r2, #2
 8003dfc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e0e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e18:	d902      	bls.n	8003e20 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	60fb      	str	r3, [r7, #12]
 8003e1e:	e002      	b.n	8003e26 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003e20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e24:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003e2e:	d007      	beq.n	8003e40 <HAL_SPI_Init+0xa0>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e38:	d002      	beq.n	8003e40 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003e50:	431a      	orrs	r2, r3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	f003 0302 	and.w	r3, r3, #2
 8003e5a:	431a      	orrs	r2, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	695b      	ldr	r3, [r3, #20]
 8003e60:	f003 0301 	and.w	r3, r3, #1
 8003e64:	431a      	orrs	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	699b      	ldr	r3, [r3, #24]
 8003e6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e6e:	431a      	orrs	r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	69db      	ldr	r3, [r3, #28]
 8003e74:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e78:	431a      	orrs	r2, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a1b      	ldr	r3, [r3, #32]
 8003e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e82:	ea42 0103 	orr.w	r1, r2, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e8a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	430a      	orrs	r2, r1
 8003e94:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	699b      	ldr	r3, [r3, #24]
 8003e9a:	0c1b      	lsrs	r3, r3, #16
 8003e9c:	f003 0204 	and.w	r2, r3, #4
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea4:	f003 0310 	and.w	r3, r3, #16
 8003ea8:	431a      	orrs	r2, r3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eae:	f003 0308 	and.w	r3, r3, #8
 8003eb2:	431a      	orrs	r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003ebc:	ea42 0103 	orr.w	r1, r2, r3
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3710      	adds	r7, #16
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}

08003ee6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003ee6:	b580      	push	{r7, lr}
 8003ee8:	b08a      	sub	sp, #40	; 0x28
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	60f8      	str	r0, [r7, #12]
 8003eee:	60b9      	str	r1, [r7, #8]
 8003ef0:	607a      	str	r2, [r7, #4]
 8003ef2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d101      	bne.n	8003f0c <HAL_SPI_TransmitReceive+0x26>
 8003f08:	2302      	movs	r3, #2
 8003f0a:	e20a      	b.n	8004322 <HAL_SPI_TransmitReceive+0x43c>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f14:	f7fe f8e4 	bl	80020e0 <HAL_GetTick>
 8003f18:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003f20:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003f28:	887b      	ldrh	r3, [r7, #2]
 8003f2a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003f2c:	887b      	ldrh	r3, [r7, #2]
 8003f2e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003f30:	7efb      	ldrb	r3, [r7, #27]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d00e      	beq.n	8003f54 <HAL_SPI_TransmitReceive+0x6e>
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f3c:	d106      	bne.n	8003f4c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d102      	bne.n	8003f4c <HAL_SPI_TransmitReceive+0x66>
 8003f46:	7efb      	ldrb	r3, [r7, #27]
 8003f48:	2b04      	cmp	r3, #4
 8003f4a:	d003      	beq.n	8003f54 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003f52:	e1e0      	b.n	8004316 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d005      	beq.n	8003f66 <HAL_SPI_TransmitReceive+0x80>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d002      	beq.n	8003f66 <HAL_SPI_TransmitReceive+0x80>
 8003f60:	887b      	ldrh	r3, [r7, #2]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d103      	bne.n	8003f6e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003f6c:	e1d3      	b.n	8004316 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	2b04      	cmp	r3, #4
 8003f78:	d003      	beq.n	8003f82 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2205      	movs	r2, #5
 8003f7e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2200      	movs	r2, #0
 8003f86:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	887a      	ldrh	r2, [r7, #2]
 8003f92:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	887a      	ldrh	r2, [r7, #2]
 8003f9a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	68ba      	ldr	r2, [r7, #8]
 8003fa2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	887a      	ldrh	r2, [r7, #2]
 8003fa8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	887a      	ldrh	r2, [r7, #2]
 8003fae:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003fc4:	d802      	bhi.n	8003fcc <HAL_SPI_TransmitReceive+0xe6>
 8003fc6:	8a3b      	ldrh	r3, [r7, #16]
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d908      	bls.n	8003fde <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	685a      	ldr	r2, [r3, #4]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003fda:	605a      	str	r2, [r3, #4]
 8003fdc:	e007      	b.n	8003fee <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	685a      	ldr	r2, [r3, #4]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003fec:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ff8:	2b40      	cmp	r3, #64	; 0x40
 8003ffa:	d007      	beq.n	800400c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800400a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004014:	f240 8081 	bls.w	800411a <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d002      	beq.n	8004026 <HAL_SPI_TransmitReceive+0x140>
 8004020:	8a7b      	ldrh	r3, [r7, #18]
 8004022:	2b01      	cmp	r3, #1
 8004024:	d16d      	bne.n	8004102 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800402a:	881a      	ldrh	r2, [r3, #0]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004036:	1c9a      	adds	r2, r3, #2
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004040:	b29b      	uxth	r3, r3
 8004042:	3b01      	subs	r3, #1
 8004044:	b29a      	uxth	r2, r3
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800404a:	e05a      	b.n	8004102 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f003 0302 	and.w	r3, r3, #2
 8004056:	2b02      	cmp	r3, #2
 8004058:	d11b      	bne.n	8004092 <HAL_SPI_TransmitReceive+0x1ac>
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800405e:	b29b      	uxth	r3, r3
 8004060:	2b00      	cmp	r3, #0
 8004062:	d016      	beq.n	8004092 <HAL_SPI_TransmitReceive+0x1ac>
 8004064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004066:	2b01      	cmp	r3, #1
 8004068:	d113      	bne.n	8004092 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800406e:	881a      	ldrh	r2, [r3, #0]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407a:	1c9a      	adds	r2, r3, #2
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004084:	b29b      	uxth	r3, r3
 8004086:	3b01      	subs	r3, #1
 8004088:	b29a      	uxth	r2, r3
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800408e:	2300      	movs	r3, #0
 8004090:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	f003 0301 	and.w	r3, r3, #1
 800409c:	2b01      	cmp	r3, #1
 800409e:	d11c      	bne.n	80040da <HAL_SPI_TransmitReceive+0x1f4>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d016      	beq.n	80040da <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68da      	ldr	r2, [r3, #12]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b6:	b292      	uxth	r2, r2
 80040b8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040be:	1c9a      	adds	r2, r3, #2
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	3b01      	subs	r3, #1
 80040ce:	b29a      	uxth	r2, r3
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80040d6:	2301      	movs	r3, #1
 80040d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80040da:	f7fe f801 	bl	80020e0 <HAL_GetTick>
 80040de:	4602      	mov	r2, r0
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d80b      	bhi.n	8004102 <HAL_SPI_TransmitReceive+0x21c>
 80040ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040f0:	d007      	beq.n	8004102 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8004100:	e109      	b.n	8004316 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004106:	b29b      	uxth	r3, r3
 8004108:	2b00      	cmp	r3, #0
 800410a:	d19f      	bne.n	800404c <HAL_SPI_TransmitReceive+0x166>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004112:	b29b      	uxth	r3, r3
 8004114:	2b00      	cmp	r3, #0
 8004116:	d199      	bne.n	800404c <HAL_SPI_TransmitReceive+0x166>
 8004118:	e0e3      	b.n	80042e2 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d003      	beq.n	800412a <HAL_SPI_TransmitReceive+0x244>
 8004122:	8a7b      	ldrh	r3, [r7, #18]
 8004124:	2b01      	cmp	r3, #1
 8004126:	f040 80cf 	bne.w	80042c8 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800412e:	b29b      	uxth	r3, r3
 8004130:	2b01      	cmp	r3, #1
 8004132:	d912      	bls.n	800415a <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004138:	881a      	ldrh	r2, [r3, #0]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004144:	1c9a      	adds	r2, r3, #2
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800414e:	b29b      	uxth	r3, r3
 8004150:	3b02      	subs	r3, #2
 8004152:	b29a      	uxth	r2, r3
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004158:	e0b6      	b.n	80042c8 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	330c      	adds	r3, #12
 8004164:	7812      	ldrb	r2, [r2, #0]
 8004166:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800416c:	1c5a      	adds	r2, r3, #1
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004176:	b29b      	uxth	r3, r3
 8004178:	3b01      	subs	r3, #1
 800417a:	b29a      	uxth	r2, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004180:	e0a2      	b.n	80042c8 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f003 0302 	and.w	r3, r3, #2
 800418c:	2b02      	cmp	r3, #2
 800418e:	d134      	bne.n	80041fa <HAL_SPI_TransmitReceive+0x314>
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004194:	b29b      	uxth	r3, r3
 8004196:	2b00      	cmp	r3, #0
 8004198:	d02f      	beq.n	80041fa <HAL_SPI_TransmitReceive+0x314>
 800419a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419c:	2b01      	cmp	r3, #1
 800419e:	d12c      	bne.n	80041fa <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d912      	bls.n	80041d0 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ae:	881a      	ldrh	r2, [r3, #0]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ba:	1c9a      	adds	r2, r3, #2
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	3b02      	subs	r3, #2
 80041c8:	b29a      	uxth	r2, r3
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80041ce:	e012      	b.n	80041f6 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	330c      	adds	r3, #12
 80041da:	7812      	ldrb	r2, [r2, #0]
 80041dc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e2:	1c5a      	adds	r2, r3, #1
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	3b01      	subs	r3, #1
 80041f0:	b29a      	uxth	r2, r3
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80041f6:	2300      	movs	r3, #0
 80041f8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f003 0301 	and.w	r3, r3, #1
 8004204:	2b01      	cmp	r3, #1
 8004206:	d148      	bne.n	800429a <HAL_SPI_TransmitReceive+0x3b4>
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800420e:	b29b      	uxth	r3, r3
 8004210:	2b00      	cmp	r3, #0
 8004212:	d042      	beq.n	800429a <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800421a:	b29b      	uxth	r3, r3
 800421c:	2b01      	cmp	r3, #1
 800421e:	d923      	bls.n	8004268 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	68da      	ldr	r2, [r3, #12]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422a:	b292      	uxth	r2, r2
 800422c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004232:	1c9a      	adds	r2, r3, #2
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800423e:	b29b      	uxth	r3, r3
 8004240:	3b02      	subs	r3, #2
 8004242:	b29a      	uxth	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004250:	b29b      	uxth	r3, r3
 8004252:	2b01      	cmp	r3, #1
 8004254:	d81f      	bhi.n	8004296 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	685a      	ldr	r2, [r3, #4]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004264:	605a      	str	r2, [r3, #4]
 8004266:	e016      	b.n	8004296 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f103 020c 	add.w	r2, r3, #12
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004274:	7812      	ldrb	r2, [r2, #0]
 8004276:	b2d2      	uxtb	r2, r2
 8004278:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427e:	1c5a      	adds	r2, r3, #1
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800428a:	b29b      	uxth	r3, r3
 800428c:	3b01      	subs	r3, #1
 800428e:	b29a      	uxth	r2, r3
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004296:	2301      	movs	r3, #1
 8004298:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800429a:	f7fd ff21 	bl	80020e0 <HAL_GetTick>
 800429e:	4602      	mov	r2, r0
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d803      	bhi.n	80042b2 <HAL_SPI_TransmitReceive+0x3cc>
 80042aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042b0:	d102      	bne.n	80042b8 <HAL_SPI_TransmitReceive+0x3d2>
 80042b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d107      	bne.n	80042c8 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2201      	movs	r2, #1
 80042c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80042c6:	e026      	b.n	8004316 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	f47f af57 	bne.w	8004182 <HAL_SPI_TransmitReceive+0x29c>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042da:	b29b      	uxth	r3, r3
 80042dc:	2b00      	cmp	r3, #0
 80042de:	f47f af50 	bne.w	8004182 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80042e2:	69fa      	ldr	r2, [r7, #28]
 80042e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80042e6:	68f8      	ldr	r0, [r7, #12]
 80042e8:	f000 f93e 	bl	8004568 <SPI_EndRxTxTransaction>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d005      	beq.n	80042fe <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2220      	movs	r2, #32
 80042fc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004302:	2b00      	cmp	r3, #0
 8004304:	d003      	beq.n	800430e <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800430c:	e003      	b.n	8004316 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2201      	movs	r2, #1
 8004312:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800431e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004322:	4618      	mov	r0, r3
 8004324:	3728      	adds	r7, #40	; 0x28
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
	...

0800432c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b088      	sub	sp, #32
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	603b      	str	r3, [r7, #0]
 8004338:	4613      	mov	r3, r2
 800433a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800433c:	f7fd fed0 	bl	80020e0 <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004344:	1a9b      	subs	r3, r3, r2
 8004346:	683a      	ldr	r2, [r7, #0]
 8004348:	4413      	add	r3, r2
 800434a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800434c:	f7fd fec8 	bl	80020e0 <HAL_GetTick>
 8004350:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004352:	4b39      	ldr	r3, [pc, #228]	; (8004438 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	015b      	lsls	r3, r3, #5
 8004358:	0d1b      	lsrs	r3, r3, #20
 800435a:	69fa      	ldr	r2, [r7, #28]
 800435c:	fb02 f303 	mul.w	r3, r2, r3
 8004360:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004362:	e054      	b.n	800440e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800436a:	d050      	beq.n	800440e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800436c:	f7fd feb8 	bl	80020e0 <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	69bb      	ldr	r3, [r7, #24]
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	69fa      	ldr	r2, [r7, #28]
 8004378:	429a      	cmp	r2, r3
 800437a:	d902      	bls.n	8004382 <SPI_WaitFlagStateUntilTimeout+0x56>
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d13d      	bne.n	80043fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	685a      	ldr	r2, [r3, #4]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004390:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800439a:	d111      	bne.n	80043c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043a4:	d004      	beq.n	80043b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043ae:	d107      	bne.n	80043c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043c8:	d10f      	bne.n	80043ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043d8:	601a      	str	r2, [r3, #0]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2201      	movs	r2, #1
 80043ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e017      	b.n	800442e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d101      	bne.n	8004408 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004404:	2300      	movs	r3, #0
 8004406:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	3b01      	subs	r3, #1
 800440c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	689a      	ldr	r2, [r3, #8]
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	4013      	ands	r3, r2
 8004418:	68ba      	ldr	r2, [r7, #8]
 800441a:	429a      	cmp	r2, r3
 800441c:	bf0c      	ite	eq
 800441e:	2301      	moveq	r3, #1
 8004420:	2300      	movne	r3, #0
 8004422:	b2db      	uxtb	r3, r3
 8004424:	461a      	mov	r2, r3
 8004426:	79fb      	ldrb	r3, [r7, #7]
 8004428:	429a      	cmp	r2, r3
 800442a:	d19b      	bne.n	8004364 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800442c:	2300      	movs	r3, #0
}
 800442e:	4618      	mov	r0, r3
 8004430:	3720      	adds	r7, #32
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	20000000 	.word	0x20000000

0800443c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b08a      	sub	sp, #40	; 0x28
 8004440:	af00      	add	r7, sp, #0
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	60b9      	str	r1, [r7, #8]
 8004446:	607a      	str	r2, [r7, #4]
 8004448:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800444a:	2300      	movs	r3, #0
 800444c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800444e:	f7fd fe47 	bl	80020e0 <HAL_GetTick>
 8004452:	4602      	mov	r2, r0
 8004454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004456:	1a9b      	subs	r3, r3, r2
 8004458:	683a      	ldr	r2, [r7, #0]
 800445a:	4413      	add	r3, r2
 800445c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800445e:	f7fd fe3f 	bl	80020e0 <HAL_GetTick>
 8004462:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	330c      	adds	r3, #12
 800446a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800446c:	4b3d      	ldr	r3, [pc, #244]	; (8004564 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	4613      	mov	r3, r2
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	4413      	add	r3, r2
 8004476:	00da      	lsls	r2, r3, #3
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	0d1b      	lsrs	r3, r3, #20
 800447c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800447e:	fb02 f303 	mul.w	r3, r2, r3
 8004482:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004484:	e060      	b.n	8004548 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800448c:	d107      	bne.n	800449e <SPI_WaitFifoStateUntilTimeout+0x62>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d104      	bne.n	800449e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	b2db      	uxtb	r3, r3
 800449a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800449c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044a4:	d050      	beq.n	8004548 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80044a6:	f7fd fe1b 	bl	80020e0 <HAL_GetTick>
 80044aa:	4602      	mov	r2, r0
 80044ac:	6a3b      	ldr	r3, [r7, #32]
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d902      	bls.n	80044bc <SPI_WaitFifoStateUntilTimeout+0x80>
 80044b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d13d      	bne.n	8004538 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	685a      	ldr	r2, [r3, #4]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80044ca:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044d4:	d111      	bne.n	80044fa <SPI_WaitFifoStateUntilTimeout+0xbe>
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044de:	d004      	beq.n	80044ea <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044e8:	d107      	bne.n	80044fa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044f8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004502:	d10f      	bne.n	8004524 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004512:	601a      	str	r2, [r3, #0]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004522:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004534:	2303      	movs	r3, #3
 8004536:	e010      	b.n	800455a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d101      	bne.n	8004542 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800453e:	2300      	movs	r3, #0
 8004540:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004542:	69bb      	ldr	r3, [r7, #24]
 8004544:	3b01      	subs	r3, #1
 8004546:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	689a      	ldr	r2, [r3, #8]
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	4013      	ands	r3, r2
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	429a      	cmp	r2, r3
 8004556:	d196      	bne.n	8004486 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3728      	adds	r7, #40	; 0x28
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	20000000 	.word	0x20000000

08004568 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b086      	sub	sp, #24
 800456c:	af02      	add	r7, sp, #8
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	9300      	str	r3, [sp, #0]
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	2200      	movs	r2, #0
 800457c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004580:	68f8      	ldr	r0, [r7, #12]
 8004582:	f7ff ff5b 	bl	800443c <SPI_WaitFifoStateUntilTimeout>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d007      	beq.n	800459c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004590:	f043 0220 	orr.w	r2, r3, #32
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	e027      	b.n	80045ec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	9300      	str	r3, [sp, #0]
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	2200      	movs	r2, #0
 80045a4:	2180      	movs	r1, #128	; 0x80
 80045a6:	68f8      	ldr	r0, [r7, #12]
 80045a8:	f7ff fec0 	bl	800432c <SPI_WaitFlagStateUntilTimeout>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d007      	beq.n	80045c2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045b6:	f043 0220 	orr.w	r2, r3, #32
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e014      	b.n	80045ec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	9300      	str	r3, [sp, #0]
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80045ce:	68f8      	ldr	r0, [r7, #12]
 80045d0:	f7ff ff34 	bl	800443c <SPI_WaitFifoStateUntilTimeout>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d007      	beq.n	80045ea <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045de:	f043 0220 	orr.w	r2, r3, #32
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e000      	b.n	80045ec <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80045ea:	2300      	movs	r3, #0
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3710      	adds	r7, #16
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d101      	bne.n	8004606 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e040      	b.n	8004688 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800460a:	2b00      	cmp	r3, #0
 800460c:	d106      	bne.n	800461c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f7fd fba0 	bl	8001d5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2224      	movs	r2, #36	; 0x24
 8004620:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f022 0201 	bic.w	r2, r2, #1
 8004630:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004636:	2b00      	cmp	r3, #0
 8004638:	d002      	beq.n	8004640 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 fb6a 	bl	8004d14 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f000 f8af 	bl	80047a4 <UART_SetConfig>
 8004646:	4603      	mov	r3, r0
 8004648:	2b01      	cmp	r3, #1
 800464a:	d101      	bne.n	8004650 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e01b      	b.n	8004688 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	685a      	ldr	r2, [r3, #4]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800465e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	689a      	ldr	r2, [r3, #8]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800466e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f042 0201 	orr.w	r2, r2, #1
 800467e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f000 fbe9 	bl	8004e58 <UART_CheckIdleState>
 8004686:	4603      	mov	r3, r0
}
 8004688:	4618      	mov	r0, r3
 800468a:	3708      	adds	r7, #8
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b08a      	sub	sp, #40	; 0x28
 8004694:	af02      	add	r7, sp, #8
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	603b      	str	r3, [r7, #0]
 800469c:	4613      	mov	r3, r2
 800469e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046a4:	2b20      	cmp	r3, #32
 80046a6:	d178      	bne.n	800479a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d002      	beq.n	80046b4 <HAL_UART_Transmit+0x24>
 80046ae:	88fb      	ldrh	r3, [r7, #6]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d101      	bne.n	80046b8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e071      	b.n	800479c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2221      	movs	r2, #33	; 0x21
 80046c4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046c6:	f7fd fd0b 	bl	80020e0 <HAL_GetTick>
 80046ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	88fa      	ldrh	r2, [r7, #6]
 80046d0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	88fa      	ldrh	r2, [r7, #6]
 80046d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046e4:	d108      	bne.n	80046f8 <HAL_UART_Transmit+0x68>
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d104      	bne.n	80046f8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80046ee:	2300      	movs	r3, #0
 80046f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	61bb      	str	r3, [r7, #24]
 80046f6:	e003      	b.n	8004700 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046fc:	2300      	movs	r3, #0
 80046fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004700:	e030      	b.n	8004764 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	9300      	str	r3, [sp, #0]
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	2200      	movs	r2, #0
 800470a:	2180      	movs	r1, #128	; 0x80
 800470c:	68f8      	ldr	r0, [r7, #12]
 800470e:	f000 fc4b 	bl	8004fa8 <UART_WaitOnFlagUntilTimeout>
 8004712:	4603      	mov	r3, r0
 8004714:	2b00      	cmp	r3, #0
 8004716:	d004      	beq.n	8004722 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2220      	movs	r2, #32
 800471c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e03c      	b.n	800479c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d10b      	bne.n	8004740 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004728:	69bb      	ldr	r3, [r7, #24]
 800472a:	881a      	ldrh	r2, [r3, #0]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004734:	b292      	uxth	r2, r2
 8004736:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	3302      	adds	r3, #2
 800473c:	61bb      	str	r3, [r7, #24]
 800473e:	e008      	b.n	8004752 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004740:	69fb      	ldr	r3, [r7, #28]
 8004742:	781a      	ldrb	r2, [r3, #0]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	b292      	uxth	r2, r2
 800474a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	3301      	adds	r3, #1
 8004750:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004758:	b29b      	uxth	r3, r3
 800475a:	3b01      	subs	r3, #1
 800475c:	b29a      	uxth	r2, r3
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800476a:	b29b      	uxth	r3, r3
 800476c:	2b00      	cmp	r3, #0
 800476e:	d1c8      	bne.n	8004702 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	9300      	str	r3, [sp, #0]
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	2200      	movs	r2, #0
 8004778:	2140      	movs	r1, #64	; 0x40
 800477a:	68f8      	ldr	r0, [r7, #12]
 800477c:	f000 fc14 	bl	8004fa8 <UART_WaitOnFlagUntilTimeout>
 8004780:	4603      	mov	r3, r0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d004      	beq.n	8004790 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2220      	movs	r2, #32
 800478a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800478c:	2303      	movs	r3, #3
 800478e:	e005      	b.n	800479c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2220      	movs	r2, #32
 8004794:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004796:	2300      	movs	r3, #0
 8004798:	e000      	b.n	800479c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800479a:	2302      	movs	r3, #2
  }
}
 800479c:	4618      	mov	r0, r3
 800479e:	3720      	adds	r7, #32
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}

080047a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047a8:	b08a      	sub	sp, #40	; 0x28
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80047ae:	2300      	movs	r3, #0
 80047b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	689a      	ldr	r2, [r3, #8]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	691b      	ldr	r3, [r3, #16]
 80047bc:	431a      	orrs	r2, r3
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	431a      	orrs	r2, r3
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	69db      	ldr	r3, [r3, #28]
 80047c8:	4313      	orrs	r3, r2
 80047ca:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	4ba4      	ldr	r3, [pc, #656]	; (8004a64 <UART_SetConfig+0x2c0>)
 80047d4:	4013      	ands	r3, r2
 80047d6:	68fa      	ldr	r2, [r7, #12]
 80047d8:	6812      	ldr	r2, [r2, #0]
 80047da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80047dc:	430b      	orrs	r3, r1
 80047de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	68da      	ldr	r2, [r3, #12]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	430a      	orrs	r2, r1
 80047f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	699b      	ldr	r3, [r3, #24]
 80047fa:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a99      	ldr	r2, [pc, #612]	; (8004a68 <UART_SetConfig+0x2c4>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d004      	beq.n	8004810 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6a1b      	ldr	r3, [r3, #32]
 800480a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800480c:	4313      	orrs	r3, r2
 800480e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004820:	430a      	orrs	r2, r1
 8004822:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a90      	ldr	r2, [pc, #576]	; (8004a6c <UART_SetConfig+0x2c8>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d126      	bne.n	800487c <UART_SetConfig+0xd8>
 800482e:	4b90      	ldr	r3, [pc, #576]	; (8004a70 <UART_SetConfig+0x2cc>)
 8004830:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004834:	f003 0303 	and.w	r3, r3, #3
 8004838:	2b03      	cmp	r3, #3
 800483a:	d81b      	bhi.n	8004874 <UART_SetConfig+0xd0>
 800483c:	a201      	add	r2, pc, #4	; (adr r2, 8004844 <UART_SetConfig+0xa0>)
 800483e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004842:	bf00      	nop
 8004844:	08004855 	.word	0x08004855
 8004848:	08004865 	.word	0x08004865
 800484c:	0800485d 	.word	0x0800485d
 8004850:	0800486d 	.word	0x0800486d
 8004854:	2301      	movs	r3, #1
 8004856:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800485a:	e116      	b.n	8004a8a <UART_SetConfig+0x2e6>
 800485c:	2302      	movs	r3, #2
 800485e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004862:	e112      	b.n	8004a8a <UART_SetConfig+0x2e6>
 8004864:	2304      	movs	r3, #4
 8004866:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800486a:	e10e      	b.n	8004a8a <UART_SetConfig+0x2e6>
 800486c:	2308      	movs	r3, #8
 800486e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004872:	e10a      	b.n	8004a8a <UART_SetConfig+0x2e6>
 8004874:	2310      	movs	r3, #16
 8004876:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800487a:	e106      	b.n	8004a8a <UART_SetConfig+0x2e6>
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a7c      	ldr	r2, [pc, #496]	; (8004a74 <UART_SetConfig+0x2d0>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d138      	bne.n	80048f8 <UART_SetConfig+0x154>
 8004886:	4b7a      	ldr	r3, [pc, #488]	; (8004a70 <UART_SetConfig+0x2cc>)
 8004888:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800488c:	f003 030c 	and.w	r3, r3, #12
 8004890:	2b0c      	cmp	r3, #12
 8004892:	d82d      	bhi.n	80048f0 <UART_SetConfig+0x14c>
 8004894:	a201      	add	r2, pc, #4	; (adr r2, 800489c <UART_SetConfig+0xf8>)
 8004896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800489a:	bf00      	nop
 800489c:	080048d1 	.word	0x080048d1
 80048a0:	080048f1 	.word	0x080048f1
 80048a4:	080048f1 	.word	0x080048f1
 80048a8:	080048f1 	.word	0x080048f1
 80048ac:	080048e1 	.word	0x080048e1
 80048b0:	080048f1 	.word	0x080048f1
 80048b4:	080048f1 	.word	0x080048f1
 80048b8:	080048f1 	.word	0x080048f1
 80048bc:	080048d9 	.word	0x080048d9
 80048c0:	080048f1 	.word	0x080048f1
 80048c4:	080048f1 	.word	0x080048f1
 80048c8:	080048f1 	.word	0x080048f1
 80048cc:	080048e9 	.word	0x080048e9
 80048d0:	2300      	movs	r3, #0
 80048d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048d6:	e0d8      	b.n	8004a8a <UART_SetConfig+0x2e6>
 80048d8:	2302      	movs	r3, #2
 80048da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048de:	e0d4      	b.n	8004a8a <UART_SetConfig+0x2e6>
 80048e0:	2304      	movs	r3, #4
 80048e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048e6:	e0d0      	b.n	8004a8a <UART_SetConfig+0x2e6>
 80048e8:	2308      	movs	r3, #8
 80048ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048ee:	e0cc      	b.n	8004a8a <UART_SetConfig+0x2e6>
 80048f0:	2310      	movs	r3, #16
 80048f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048f6:	e0c8      	b.n	8004a8a <UART_SetConfig+0x2e6>
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a5e      	ldr	r2, [pc, #376]	; (8004a78 <UART_SetConfig+0x2d4>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d125      	bne.n	800494e <UART_SetConfig+0x1aa>
 8004902:	4b5b      	ldr	r3, [pc, #364]	; (8004a70 <UART_SetConfig+0x2cc>)
 8004904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004908:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800490c:	2b30      	cmp	r3, #48	; 0x30
 800490e:	d016      	beq.n	800493e <UART_SetConfig+0x19a>
 8004910:	2b30      	cmp	r3, #48	; 0x30
 8004912:	d818      	bhi.n	8004946 <UART_SetConfig+0x1a2>
 8004914:	2b20      	cmp	r3, #32
 8004916:	d00a      	beq.n	800492e <UART_SetConfig+0x18a>
 8004918:	2b20      	cmp	r3, #32
 800491a:	d814      	bhi.n	8004946 <UART_SetConfig+0x1a2>
 800491c:	2b00      	cmp	r3, #0
 800491e:	d002      	beq.n	8004926 <UART_SetConfig+0x182>
 8004920:	2b10      	cmp	r3, #16
 8004922:	d008      	beq.n	8004936 <UART_SetConfig+0x192>
 8004924:	e00f      	b.n	8004946 <UART_SetConfig+0x1a2>
 8004926:	2300      	movs	r3, #0
 8004928:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800492c:	e0ad      	b.n	8004a8a <UART_SetConfig+0x2e6>
 800492e:	2302      	movs	r3, #2
 8004930:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004934:	e0a9      	b.n	8004a8a <UART_SetConfig+0x2e6>
 8004936:	2304      	movs	r3, #4
 8004938:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800493c:	e0a5      	b.n	8004a8a <UART_SetConfig+0x2e6>
 800493e:	2308      	movs	r3, #8
 8004940:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004944:	e0a1      	b.n	8004a8a <UART_SetConfig+0x2e6>
 8004946:	2310      	movs	r3, #16
 8004948:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800494c:	e09d      	b.n	8004a8a <UART_SetConfig+0x2e6>
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a4a      	ldr	r2, [pc, #296]	; (8004a7c <UART_SetConfig+0x2d8>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d125      	bne.n	80049a4 <UART_SetConfig+0x200>
 8004958:	4b45      	ldr	r3, [pc, #276]	; (8004a70 <UART_SetConfig+0x2cc>)
 800495a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800495e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004962:	2bc0      	cmp	r3, #192	; 0xc0
 8004964:	d016      	beq.n	8004994 <UART_SetConfig+0x1f0>
 8004966:	2bc0      	cmp	r3, #192	; 0xc0
 8004968:	d818      	bhi.n	800499c <UART_SetConfig+0x1f8>
 800496a:	2b80      	cmp	r3, #128	; 0x80
 800496c:	d00a      	beq.n	8004984 <UART_SetConfig+0x1e0>
 800496e:	2b80      	cmp	r3, #128	; 0x80
 8004970:	d814      	bhi.n	800499c <UART_SetConfig+0x1f8>
 8004972:	2b00      	cmp	r3, #0
 8004974:	d002      	beq.n	800497c <UART_SetConfig+0x1d8>
 8004976:	2b40      	cmp	r3, #64	; 0x40
 8004978:	d008      	beq.n	800498c <UART_SetConfig+0x1e8>
 800497a:	e00f      	b.n	800499c <UART_SetConfig+0x1f8>
 800497c:	2300      	movs	r3, #0
 800497e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004982:	e082      	b.n	8004a8a <UART_SetConfig+0x2e6>
 8004984:	2302      	movs	r3, #2
 8004986:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800498a:	e07e      	b.n	8004a8a <UART_SetConfig+0x2e6>
 800498c:	2304      	movs	r3, #4
 800498e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004992:	e07a      	b.n	8004a8a <UART_SetConfig+0x2e6>
 8004994:	2308      	movs	r3, #8
 8004996:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800499a:	e076      	b.n	8004a8a <UART_SetConfig+0x2e6>
 800499c:	2310      	movs	r3, #16
 800499e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049a2:	e072      	b.n	8004a8a <UART_SetConfig+0x2e6>
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a35      	ldr	r2, [pc, #212]	; (8004a80 <UART_SetConfig+0x2dc>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d12a      	bne.n	8004a04 <UART_SetConfig+0x260>
 80049ae:	4b30      	ldr	r3, [pc, #192]	; (8004a70 <UART_SetConfig+0x2cc>)
 80049b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049bc:	d01a      	beq.n	80049f4 <UART_SetConfig+0x250>
 80049be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049c2:	d81b      	bhi.n	80049fc <UART_SetConfig+0x258>
 80049c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049c8:	d00c      	beq.n	80049e4 <UART_SetConfig+0x240>
 80049ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049ce:	d815      	bhi.n	80049fc <UART_SetConfig+0x258>
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d003      	beq.n	80049dc <UART_SetConfig+0x238>
 80049d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049d8:	d008      	beq.n	80049ec <UART_SetConfig+0x248>
 80049da:	e00f      	b.n	80049fc <UART_SetConfig+0x258>
 80049dc:	2300      	movs	r3, #0
 80049de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049e2:	e052      	b.n	8004a8a <UART_SetConfig+0x2e6>
 80049e4:	2302      	movs	r3, #2
 80049e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049ea:	e04e      	b.n	8004a8a <UART_SetConfig+0x2e6>
 80049ec:	2304      	movs	r3, #4
 80049ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049f2:	e04a      	b.n	8004a8a <UART_SetConfig+0x2e6>
 80049f4:	2308      	movs	r3, #8
 80049f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049fa:	e046      	b.n	8004a8a <UART_SetConfig+0x2e6>
 80049fc:	2310      	movs	r3, #16
 80049fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a02:	e042      	b.n	8004a8a <UART_SetConfig+0x2e6>
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a17      	ldr	r2, [pc, #92]	; (8004a68 <UART_SetConfig+0x2c4>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d13a      	bne.n	8004a84 <UART_SetConfig+0x2e0>
 8004a0e:	4b18      	ldr	r3, [pc, #96]	; (8004a70 <UART_SetConfig+0x2cc>)
 8004a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a14:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004a18:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a1c:	d01a      	beq.n	8004a54 <UART_SetConfig+0x2b0>
 8004a1e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a22:	d81b      	bhi.n	8004a5c <UART_SetConfig+0x2b8>
 8004a24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a28:	d00c      	beq.n	8004a44 <UART_SetConfig+0x2a0>
 8004a2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a2e:	d815      	bhi.n	8004a5c <UART_SetConfig+0x2b8>
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d003      	beq.n	8004a3c <UART_SetConfig+0x298>
 8004a34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a38:	d008      	beq.n	8004a4c <UART_SetConfig+0x2a8>
 8004a3a:	e00f      	b.n	8004a5c <UART_SetConfig+0x2b8>
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a42:	e022      	b.n	8004a8a <UART_SetConfig+0x2e6>
 8004a44:	2302      	movs	r3, #2
 8004a46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a4a:	e01e      	b.n	8004a8a <UART_SetConfig+0x2e6>
 8004a4c:	2304      	movs	r3, #4
 8004a4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a52:	e01a      	b.n	8004a8a <UART_SetConfig+0x2e6>
 8004a54:	2308      	movs	r3, #8
 8004a56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a5a:	e016      	b.n	8004a8a <UART_SetConfig+0x2e6>
 8004a5c:	2310      	movs	r3, #16
 8004a5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a62:	e012      	b.n	8004a8a <UART_SetConfig+0x2e6>
 8004a64:	efff69f3 	.word	0xefff69f3
 8004a68:	40008000 	.word	0x40008000
 8004a6c:	40013800 	.word	0x40013800
 8004a70:	40021000 	.word	0x40021000
 8004a74:	40004400 	.word	0x40004400
 8004a78:	40004800 	.word	0x40004800
 8004a7c:	40004c00 	.word	0x40004c00
 8004a80:	40005000 	.word	0x40005000
 8004a84:	2310      	movs	r3, #16
 8004a86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a9f      	ldr	r2, [pc, #636]	; (8004d0c <UART_SetConfig+0x568>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d17a      	bne.n	8004b8a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004a94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a98:	2b08      	cmp	r3, #8
 8004a9a:	d824      	bhi.n	8004ae6 <UART_SetConfig+0x342>
 8004a9c:	a201      	add	r2, pc, #4	; (adr r2, 8004aa4 <UART_SetConfig+0x300>)
 8004a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aa2:	bf00      	nop
 8004aa4:	08004ac9 	.word	0x08004ac9
 8004aa8:	08004ae7 	.word	0x08004ae7
 8004aac:	08004ad1 	.word	0x08004ad1
 8004ab0:	08004ae7 	.word	0x08004ae7
 8004ab4:	08004ad7 	.word	0x08004ad7
 8004ab8:	08004ae7 	.word	0x08004ae7
 8004abc:	08004ae7 	.word	0x08004ae7
 8004ac0:	08004ae7 	.word	0x08004ae7
 8004ac4:	08004adf 	.word	0x08004adf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ac8:	f7fe fc22 	bl	8003310 <HAL_RCC_GetPCLK1Freq>
 8004acc:	61f8      	str	r0, [r7, #28]
        break;
 8004ace:	e010      	b.n	8004af2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ad0:	4b8f      	ldr	r3, [pc, #572]	; (8004d10 <UART_SetConfig+0x56c>)
 8004ad2:	61fb      	str	r3, [r7, #28]
        break;
 8004ad4:	e00d      	b.n	8004af2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ad6:	f7fe fb83 	bl	80031e0 <HAL_RCC_GetSysClockFreq>
 8004ada:	61f8      	str	r0, [r7, #28]
        break;
 8004adc:	e009      	b.n	8004af2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ade:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ae2:	61fb      	str	r3, [r7, #28]
        break;
 8004ae4:	e005      	b.n	8004af2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004af0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	f000 80fb 	beq.w	8004cf0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	685a      	ldr	r2, [r3, #4]
 8004afe:	4613      	mov	r3, r2
 8004b00:	005b      	lsls	r3, r3, #1
 8004b02:	4413      	add	r3, r2
 8004b04:	69fa      	ldr	r2, [r7, #28]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d305      	bcc.n	8004b16 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004b10:	69fa      	ldr	r2, [r7, #28]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d903      	bls.n	8004b1e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004b1c:	e0e8      	b.n	8004cf0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	2200      	movs	r2, #0
 8004b22:	461c      	mov	r4, r3
 8004b24:	4615      	mov	r5, r2
 8004b26:	f04f 0200 	mov.w	r2, #0
 8004b2a:	f04f 0300 	mov.w	r3, #0
 8004b2e:	022b      	lsls	r3, r5, #8
 8004b30:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004b34:	0222      	lsls	r2, r4, #8
 8004b36:	68f9      	ldr	r1, [r7, #12]
 8004b38:	6849      	ldr	r1, [r1, #4]
 8004b3a:	0849      	lsrs	r1, r1, #1
 8004b3c:	2000      	movs	r0, #0
 8004b3e:	4688      	mov	r8, r1
 8004b40:	4681      	mov	r9, r0
 8004b42:	eb12 0a08 	adds.w	sl, r2, r8
 8004b46:	eb43 0b09 	adc.w	fp, r3, r9
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	603b      	str	r3, [r7, #0]
 8004b52:	607a      	str	r2, [r7, #4]
 8004b54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b58:	4650      	mov	r0, sl
 8004b5a:	4659      	mov	r1, fp
 8004b5c:	f7fc f894 	bl	8000c88 <__aeabi_uldivmod>
 8004b60:	4602      	mov	r2, r0
 8004b62:	460b      	mov	r3, r1
 8004b64:	4613      	mov	r3, r2
 8004b66:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b68:	69bb      	ldr	r3, [r7, #24]
 8004b6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b6e:	d308      	bcc.n	8004b82 <UART_SetConfig+0x3de>
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b76:	d204      	bcs.n	8004b82 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	69ba      	ldr	r2, [r7, #24]
 8004b7e:	60da      	str	r2, [r3, #12]
 8004b80:	e0b6      	b.n	8004cf0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004b88:	e0b2      	b.n	8004cf0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	69db      	ldr	r3, [r3, #28]
 8004b8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b92:	d15e      	bne.n	8004c52 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004b94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b98:	2b08      	cmp	r3, #8
 8004b9a:	d828      	bhi.n	8004bee <UART_SetConfig+0x44a>
 8004b9c:	a201      	add	r2, pc, #4	; (adr r2, 8004ba4 <UART_SetConfig+0x400>)
 8004b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba2:	bf00      	nop
 8004ba4:	08004bc9 	.word	0x08004bc9
 8004ba8:	08004bd1 	.word	0x08004bd1
 8004bac:	08004bd9 	.word	0x08004bd9
 8004bb0:	08004bef 	.word	0x08004bef
 8004bb4:	08004bdf 	.word	0x08004bdf
 8004bb8:	08004bef 	.word	0x08004bef
 8004bbc:	08004bef 	.word	0x08004bef
 8004bc0:	08004bef 	.word	0x08004bef
 8004bc4:	08004be7 	.word	0x08004be7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bc8:	f7fe fba2 	bl	8003310 <HAL_RCC_GetPCLK1Freq>
 8004bcc:	61f8      	str	r0, [r7, #28]
        break;
 8004bce:	e014      	b.n	8004bfa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bd0:	f7fe fbb4 	bl	800333c <HAL_RCC_GetPCLK2Freq>
 8004bd4:	61f8      	str	r0, [r7, #28]
        break;
 8004bd6:	e010      	b.n	8004bfa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bd8:	4b4d      	ldr	r3, [pc, #308]	; (8004d10 <UART_SetConfig+0x56c>)
 8004bda:	61fb      	str	r3, [r7, #28]
        break;
 8004bdc:	e00d      	b.n	8004bfa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bde:	f7fe faff 	bl	80031e0 <HAL_RCC_GetSysClockFreq>
 8004be2:	61f8      	str	r0, [r7, #28]
        break;
 8004be4:	e009      	b.n	8004bfa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004be6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bea:	61fb      	str	r3, [r7, #28]
        break;
 8004bec:	e005      	b.n	8004bfa <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004bf8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d077      	beq.n	8004cf0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	005a      	lsls	r2, r3, #1
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	085b      	lsrs	r3, r3, #1
 8004c0a:	441a      	add	r2, r3
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c14:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	2b0f      	cmp	r3, #15
 8004c1a:	d916      	bls.n	8004c4a <UART_SetConfig+0x4a6>
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c22:	d212      	bcs.n	8004c4a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c24:	69bb      	ldr	r3, [r7, #24]
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	f023 030f 	bic.w	r3, r3, #15
 8004c2c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	085b      	lsrs	r3, r3, #1
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	f003 0307 	and.w	r3, r3, #7
 8004c38:	b29a      	uxth	r2, r3
 8004c3a:	8afb      	ldrh	r3, [r7, #22]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	8afa      	ldrh	r2, [r7, #22]
 8004c46:	60da      	str	r2, [r3, #12]
 8004c48:	e052      	b.n	8004cf0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004c50:	e04e      	b.n	8004cf0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c52:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c56:	2b08      	cmp	r3, #8
 8004c58:	d827      	bhi.n	8004caa <UART_SetConfig+0x506>
 8004c5a:	a201      	add	r2, pc, #4	; (adr r2, 8004c60 <UART_SetConfig+0x4bc>)
 8004c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c60:	08004c85 	.word	0x08004c85
 8004c64:	08004c8d 	.word	0x08004c8d
 8004c68:	08004c95 	.word	0x08004c95
 8004c6c:	08004cab 	.word	0x08004cab
 8004c70:	08004c9b 	.word	0x08004c9b
 8004c74:	08004cab 	.word	0x08004cab
 8004c78:	08004cab 	.word	0x08004cab
 8004c7c:	08004cab 	.word	0x08004cab
 8004c80:	08004ca3 	.word	0x08004ca3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c84:	f7fe fb44 	bl	8003310 <HAL_RCC_GetPCLK1Freq>
 8004c88:	61f8      	str	r0, [r7, #28]
        break;
 8004c8a:	e014      	b.n	8004cb6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c8c:	f7fe fb56 	bl	800333c <HAL_RCC_GetPCLK2Freq>
 8004c90:	61f8      	str	r0, [r7, #28]
        break;
 8004c92:	e010      	b.n	8004cb6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c94:	4b1e      	ldr	r3, [pc, #120]	; (8004d10 <UART_SetConfig+0x56c>)
 8004c96:	61fb      	str	r3, [r7, #28]
        break;
 8004c98:	e00d      	b.n	8004cb6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c9a:	f7fe faa1 	bl	80031e0 <HAL_RCC_GetSysClockFreq>
 8004c9e:	61f8      	str	r0, [r7, #28]
        break;
 8004ca0:	e009      	b.n	8004cb6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ca2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ca6:	61fb      	str	r3, [r7, #28]
        break;
 8004ca8:	e005      	b.n	8004cb6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004caa:	2300      	movs	r3, #0
 8004cac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004cb4:	bf00      	nop
    }

    if (pclk != 0U)
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d019      	beq.n	8004cf0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	085a      	lsrs	r2, r3, #1
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	441a      	add	r2, r3
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cce:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	2b0f      	cmp	r3, #15
 8004cd4:	d909      	bls.n	8004cea <UART_SetConfig+0x546>
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cdc:	d205      	bcs.n	8004cea <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	b29a      	uxth	r2, r3
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	60da      	str	r2, [r3, #12]
 8004ce8:	e002      	b.n	8004cf0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004cfc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3728      	adds	r7, #40	; 0x28
 8004d04:	46bd      	mov	sp, r7
 8004d06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d0a:	bf00      	nop
 8004d0c:	40008000 	.word	0x40008000
 8004d10:	00f42400 	.word	0x00f42400

08004d14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d20:	f003 0308 	and.w	r3, r3, #8
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d00a      	beq.n	8004d3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	430a      	orrs	r2, r1
 8004d3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d42:	f003 0301 	and.w	r3, r3, #1
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d00a      	beq.n	8004d60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	430a      	orrs	r2, r1
 8004d5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d64:	f003 0302 	and.w	r3, r3, #2
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d00a      	beq.n	8004d82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	430a      	orrs	r2, r1
 8004d80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d86:	f003 0304 	and.w	r3, r3, #4
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00a      	beq.n	8004da4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	430a      	orrs	r2, r1
 8004da2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da8:	f003 0310 	and.w	r3, r3, #16
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d00a      	beq.n	8004dc6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dca:	f003 0320 	and.w	r3, r3, #32
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d00a      	beq.n	8004de8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	430a      	orrs	r2, r1
 8004de6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d01a      	beq.n	8004e2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	430a      	orrs	r2, r1
 8004e08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e12:	d10a      	bne.n	8004e2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	430a      	orrs	r2, r1
 8004e28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d00a      	beq.n	8004e4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	430a      	orrs	r2, r1
 8004e4a:	605a      	str	r2, [r3, #4]
  }
}
 8004e4c:	bf00      	nop
 8004e4e:	370c      	adds	r7, #12
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b098      	sub	sp, #96	; 0x60
 8004e5c:	af02      	add	r7, sp, #8
 8004e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e68:	f7fd f93a 	bl	80020e0 <HAL_GetTick>
 8004e6c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0308 	and.w	r3, r3, #8
 8004e78:	2b08      	cmp	r3, #8
 8004e7a:	d12e      	bne.n	8004eda <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e80:	9300      	str	r3, [sp, #0]
 8004e82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e84:	2200      	movs	r2, #0
 8004e86:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f000 f88c 	bl	8004fa8 <UART_WaitOnFlagUntilTimeout>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d021      	beq.n	8004eda <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e9e:	e853 3f00 	ldrex	r3, [r3]
 8004ea2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ea6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004eaa:	653b      	str	r3, [r7, #80]	; 0x50
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004eb4:	647b      	str	r3, [r7, #68]	; 0x44
 8004eb6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004eba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ebc:	e841 2300 	strex	r3, r2, [r1]
 8004ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004ec2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d1e6      	bne.n	8004e96 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2220      	movs	r2, #32
 8004ecc:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e062      	b.n	8004fa0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 0304 	and.w	r3, r3, #4
 8004ee4:	2b04      	cmp	r3, #4
 8004ee6:	d149      	bne.n	8004f7c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ee8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004eec:	9300      	str	r3, [sp, #0]
 8004eee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 f856 	bl	8004fa8 <UART_WaitOnFlagUntilTimeout>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d03c      	beq.n	8004f7c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0a:	e853 3f00 	ldrex	r3, [r3]
 8004f0e:	623b      	str	r3, [r7, #32]
   return(result);
 8004f10:	6a3b      	ldr	r3, [r7, #32]
 8004f12:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f20:	633b      	str	r3, [r7, #48]	; 0x30
 8004f22:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f24:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f28:	e841 2300 	strex	r3, r2, [r1]
 8004f2c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d1e6      	bne.n	8004f02 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	3308      	adds	r3, #8
 8004f3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	e853 3f00 	ldrex	r3, [r3]
 8004f42:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f023 0301 	bic.w	r3, r3, #1
 8004f4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	3308      	adds	r3, #8
 8004f52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f54:	61fa      	str	r2, [r7, #28]
 8004f56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f58:	69b9      	ldr	r1, [r7, #24]
 8004f5a:	69fa      	ldr	r2, [r7, #28]
 8004f5c:	e841 2300 	strex	r3, r2, [r1]
 8004f60:	617b      	str	r3, [r7, #20]
   return(result);
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d1e5      	bne.n	8004f34 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2220      	movs	r2, #32
 8004f6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f78:	2303      	movs	r3, #3
 8004f7a:	e011      	b.n	8004fa0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2220      	movs	r2, #32
 8004f80:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2220      	movs	r2, #32
 8004f86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3758      	adds	r7, #88	; 0x58
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b084      	sub	sp, #16
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	60b9      	str	r1, [r7, #8]
 8004fb2:	603b      	str	r3, [r7, #0]
 8004fb4:	4613      	mov	r3, r2
 8004fb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fb8:	e049      	b.n	800504e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fba:	69bb      	ldr	r3, [r7, #24]
 8004fbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fc0:	d045      	beq.n	800504e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fc2:	f7fd f88d 	bl	80020e0 <HAL_GetTick>
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	1ad3      	subs	r3, r2, r3
 8004fcc:	69ba      	ldr	r2, [r7, #24]
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d302      	bcc.n	8004fd8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004fd2:	69bb      	ldr	r3, [r7, #24]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d101      	bne.n	8004fdc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004fd8:	2303      	movs	r3, #3
 8004fda:	e048      	b.n	800506e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 0304 	and.w	r3, r3, #4
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d031      	beq.n	800504e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	69db      	ldr	r3, [r3, #28]
 8004ff0:	f003 0308 	and.w	r3, r3, #8
 8004ff4:	2b08      	cmp	r3, #8
 8004ff6:	d110      	bne.n	800501a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2208      	movs	r2, #8
 8004ffe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005000:	68f8      	ldr	r0, [r7, #12]
 8005002:	f000 f838 	bl	8005076 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2208      	movs	r2, #8
 800500a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2200      	movs	r2, #0
 8005012:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e029      	b.n	800506e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	69db      	ldr	r3, [r3, #28]
 8005020:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005024:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005028:	d111      	bne.n	800504e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005032:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005034:	68f8      	ldr	r0, [r7, #12]
 8005036:	f000 f81e 	bl	8005076 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2220      	movs	r2, #32
 800503e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2200      	movs	r2, #0
 8005046:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e00f      	b.n	800506e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	69da      	ldr	r2, [r3, #28]
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	4013      	ands	r3, r2
 8005058:	68ba      	ldr	r2, [r7, #8]
 800505a:	429a      	cmp	r2, r3
 800505c:	bf0c      	ite	eq
 800505e:	2301      	moveq	r3, #1
 8005060:	2300      	movne	r3, #0
 8005062:	b2db      	uxtb	r3, r3
 8005064:	461a      	mov	r2, r3
 8005066:	79fb      	ldrb	r3, [r7, #7]
 8005068:	429a      	cmp	r2, r3
 800506a:	d0a6      	beq.n	8004fba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800506c:	2300      	movs	r3, #0
}
 800506e:	4618      	mov	r0, r3
 8005070:	3710      	adds	r7, #16
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}

08005076 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005076:	b480      	push	{r7}
 8005078:	b095      	sub	sp, #84	; 0x54
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005086:	e853 3f00 	ldrex	r3, [r3]
 800508a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800508c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800508e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005092:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	461a      	mov	r2, r3
 800509a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800509c:	643b      	str	r3, [r7, #64]	; 0x40
 800509e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80050a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80050a4:	e841 2300 	strex	r3, r2, [r1]
 80050a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80050aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d1e6      	bne.n	800507e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	3308      	adds	r3, #8
 80050b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b8:	6a3b      	ldr	r3, [r7, #32]
 80050ba:	e853 3f00 	ldrex	r3, [r3]
 80050be:	61fb      	str	r3, [r7, #28]
   return(result);
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	f023 0301 	bic.w	r3, r3, #1
 80050c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	3308      	adds	r3, #8
 80050ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80050d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80050d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050d8:	e841 2300 	strex	r3, r2, [r1]
 80050dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80050de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d1e5      	bne.n	80050b0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d118      	bne.n	800511e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	e853 3f00 	ldrex	r3, [r3]
 80050f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	f023 0310 	bic.w	r3, r3, #16
 8005100:	647b      	str	r3, [r7, #68]	; 0x44
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	461a      	mov	r2, r3
 8005108:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800510a:	61bb      	str	r3, [r7, #24]
 800510c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800510e:	6979      	ldr	r1, [r7, #20]
 8005110:	69ba      	ldr	r2, [r7, #24]
 8005112:	e841 2300 	strex	r3, r2, [r1]
 8005116:	613b      	str	r3, [r7, #16]
   return(result);
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d1e6      	bne.n	80050ec <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2220      	movs	r2, #32
 8005122:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005132:	bf00      	nop
 8005134:	3754      	adds	r7, #84	; 0x54
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr
	...

08005140 <acc_rss_activate>:
 8005140:	b510      	push	{r4, lr}
 8005142:	4c18      	ldr	r4, [pc, #96]	; (80051a4 <acc_rss_activate+0x64>)
 8005144:	7823      	ldrb	r3, [r4, #0]
 8005146:	b9c3      	cbnz	r3, 800517a <acc_rss_activate+0x3a>
 8005148:	b1a8      	cbz	r0, 8005176 <acc_rss_activate+0x36>
 800514a:	f001 f8bd 	bl	80062c8 <acc_rss_integration_register>
 800514e:	b188      	cbz	r0, 8005174 <acc_rss_activate+0x34>
 8005150:	f000 fc62 	bl	8005a18 <acc_service_manager_activate>
 8005154:	b1e8      	cbz	r0, 8005192 <acc_rss_activate+0x52>
 8005156:	f002 fda3 	bl	8007ca0 <acc_sensor_manager_activate>
 800515a:	b1d0      	cbz	r0, 8005192 <acc_rss_activate+0x52>
 800515c:	2301      	movs	r3, #1
 800515e:	7023      	strb	r3, [r4, #0]
 8005160:	f001 f9b0 	bl	80064c4 <acc_rss_integration_log_level>
 8005164:	2801      	cmp	r0, #1
 8005166:	d905      	bls.n	8005174 <acc_rss_activate+0x34>
 8005168:	4b0f      	ldr	r3, [pc, #60]	; (80051a8 <acc_rss_activate+0x68>)
 800516a:	4a10      	ldr	r2, [pc, #64]	; (80051ac <acc_rss_activate+0x6c>)
 800516c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800516e:	4910      	ldr	r1, [pc, #64]	; (80051b0 <acc_rss_activate+0x70>)
 8005170:	2002      	movs	r0, #2
 8005172:	4798      	blx	r3
 8005174:	7823      	ldrb	r3, [r4, #0]
 8005176:	4618      	mov	r0, r3
 8005178:	bd10      	pop	{r4, pc}
 800517a:	f001 f9a3 	bl	80064c4 <acc_rss_integration_log_level>
 800517e:	2801      	cmp	r0, #1
 8005180:	d9f8      	bls.n	8005174 <acc_rss_activate+0x34>
 8005182:	4b09      	ldr	r3, [pc, #36]	; (80051a8 <acc_rss_activate+0x68>)
 8005184:	4a0b      	ldr	r2, [pc, #44]	; (80051b4 <acc_rss_activate+0x74>)
 8005186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005188:	4909      	ldr	r1, [pc, #36]	; (80051b0 <acc_rss_activate+0x70>)
 800518a:	2002      	movs	r0, #2
 800518c:	4798      	blx	r3
 800518e:	7823      	ldrb	r3, [r4, #0]
 8005190:	e7f1      	b.n	8005176 <acc_rss_activate+0x36>
 8005192:	4b05      	ldr	r3, [pc, #20]	; (80051a8 <acc_rss_activate+0x68>)
 8005194:	4a08      	ldr	r2, [pc, #32]	; (80051b8 <acc_rss_activate+0x78>)
 8005196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005198:	4905      	ldr	r1, [pc, #20]	; (80051b0 <acc_rss_activate+0x70>)
 800519a:	2000      	movs	r0, #0
 800519c:	4798      	blx	r3
 800519e:	7823      	ldrb	r3, [r4, #0]
 80051a0:	4618      	mov	r0, r3
 80051a2:	bd10      	pop	{r4, pc}
 80051a4:	20000308 	.word	0x20000308
 80051a8:	200004d0 	.word	0x200004d0
 80051ac:	080112f0 	.word	0x080112f0
 80051b0:	08011310 	.word	0x08011310
 80051b4:	0801132c 	.word	0x0801132c
 80051b8:	08011314 	.word	0x08011314

080051bc <acc_rss_deactivate>:
 80051bc:	b510      	push	{r4, lr}
 80051be:	4c0b      	ldr	r4, [pc, #44]	; (80051ec <acc_rss_deactivate+0x30>)
 80051c0:	7823      	ldrb	r3, [r4, #0]
 80051c2:	b903      	cbnz	r3, 80051c6 <acc_rss_deactivate+0xa>
 80051c4:	bd10      	pop	{r4, pc}
 80051c6:	f000 fcd5 	bl	8005b74 <acc_service_manager_deactivate>
 80051ca:	f002 fda5 	bl	8007d18 <acc_sensor_manager_deactivate>
 80051ce:	f001 f979 	bl	80064c4 <acc_rss_integration_log_level>
 80051d2:	2801      	cmp	r0, #1
 80051d4:	d905      	bls.n	80051e2 <acc_rss_deactivate+0x26>
 80051d6:	4b06      	ldr	r3, [pc, #24]	; (80051f0 <acc_rss_deactivate+0x34>)
 80051d8:	4a06      	ldr	r2, [pc, #24]	; (80051f4 <acc_rss_deactivate+0x38>)
 80051da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051dc:	4906      	ldr	r1, [pc, #24]	; (80051f8 <acc_rss_deactivate+0x3c>)
 80051de:	2002      	movs	r0, #2
 80051e0:	4798      	blx	r3
 80051e2:	f001 f8b1 	bl	8006348 <acc_rss_integration_unregister>
 80051e6:	2300      	movs	r3, #0
 80051e8:	7023      	strb	r3, [r4, #0]
 80051ea:	bd10      	pop	{r4, pc}
 80051ec:	20000308 	.word	0x20000308
 80051f0:	200004d0 	.word	0x200004d0
 80051f4:	08011354 	.word	0x08011354
 80051f8:	08011310 	.word	0x08011310

080051fc <acc_service_get_base_configuration>:
 80051fc:	b510      	push	{r4, lr}
 80051fe:	4604      	mov	r4, r0
 8005200:	b108      	cbz	r0, 8005206 <acc_service_get_base_configuration+0xa>
 8005202:	6900      	ldr	r0, [r0, #16]
 8005204:	bd10      	pop	{r4, pc}
 8005206:	f001 f95d 	bl	80064c4 <acc_rss_integration_log_level>
 800520a:	2800      	cmp	r0, #0
 800520c:	d0fa      	beq.n	8005204 <acc_service_get_base_configuration+0x8>
 800520e:	4b04      	ldr	r3, [pc, #16]	; (8005220 <acc_service_get_base_configuration+0x24>)
 8005210:	4a04      	ldr	r2, [pc, #16]	; (8005224 <acc_service_get_base_configuration+0x28>)
 8005212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005214:	4904      	ldr	r1, [pc, #16]	; (8005228 <acc_service_get_base_configuration+0x2c>)
 8005216:	2001      	movs	r0, #1
 8005218:	4798      	blx	r3
 800521a:	4620      	mov	r0, r4
 800521c:	bd10      	pop	{r4, pc}
 800521e:	bf00      	nop
 8005220:	200004d0 	.word	0x200004d0
 8005224:	08011378 	.word	0x08011378
 8005228:	08011390 	.word	0x08011390

0800522c <set_maximize_signal_attenuation>:
 800522c:	b570      	push	{r4, r5, r6, lr}
 800522e:	460d      	mov	r5, r1
 8005230:	4606      	mov	r6, r0
 8005232:	f7ff ffe3 	bl	80051fc <acc_service_get_base_configuration>
 8005236:	b158      	cbz	r0, 8005250 <set_maximize_signal_attenuation+0x24>
 8005238:	4629      	mov	r1, r5
 800523a:	4604      	mov	r4, r0
 800523c:	f000 ff38 	bl	80060b0 <acc_base_configuration_maximize_signal_attenuation_set>
 8005240:	b93d      	cbnz	r5, 8005252 <set_maximize_signal_attenuation+0x26>
 8005242:	68b3      	ldr	r3, [r6, #8]
 8005244:	b123      	cbz	r3, 8005250 <set_maximize_signal_attenuation+0x24>
 8005246:	7971      	ldrb	r1, [r6, #5]
 8005248:	4630      	mov	r0, r6
 800524a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800524e:	4718      	bx	r3
 8005250:	bd70      	pop	{r4, r5, r6, pc}
 8005252:	4620      	mov	r0, r4
 8005254:	210f      	movs	r1, #15
 8005256:	f000 fe1d 	bl	8005e94 <acc_base_configuration_integrator_set>
 800525a:	4620      	mov	r0, r4
 800525c:	2101      	movs	r1, #1
 800525e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005262:	f000 be3f 	b.w	8005ee4 <acc_base_configuration_integrator_ramp_up_set>
 8005266:	bf00      	nop

08005268 <acc_service_requested_start_set>:
 8005268:	b500      	push	{lr}
 800526a:	b083      	sub	sp, #12
 800526c:	ed8d 0a01 	vstr	s0, [sp, #4]
 8005270:	f7ff ffc4 	bl	80051fc <acc_service_get_base_configuration>
 8005274:	ed9d 0a01 	vldr	s0, [sp, #4]
 8005278:	b003      	add	sp, #12
 800527a:	f85d eb04 	ldr.w	lr, [sp], #4
 800527e:	f000 bcd3 	b.w	8005c28 <acc_base_configuration_requested_start_set>
 8005282:	bf00      	nop

08005284 <acc_service_requested_length_set>:
 8005284:	b500      	push	{lr}
 8005286:	b083      	sub	sp, #12
 8005288:	ed8d 0a01 	vstr	s0, [sp, #4]
 800528c:	f7ff ffb6 	bl	80051fc <acc_service_get_base_configuration>
 8005290:	ed9d 0a01 	vldr	s0, [sp, #4]
 8005294:	b003      	add	sp, #12
 8005296:	f85d eb04 	ldr.w	lr, [sp], #4
 800529a:	f000 bce1 	b.w	8005c60 <acc_base_configuration_requested_length_set>
 800529e:	bf00      	nop

080052a0 <acc_service_pipeline_destroy>:
 80052a0:	b510      	push	{r4, lr}
 80052a2:	4604      	mov	r4, r0
 80052a4:	6900      	ldr	r0, [r0, #16]
 80052a6:	b118      	cbz	r0, 80052b0 <acc_service_pipeline_destroy+0x10>
 80052a8:	68c3      	ldr	r3, [r0, #12]
 80052aa:	4798      	blx	r3
 80052ac:	2300      	movs	r3, #0
 80052ae:	6123      	str	r3, [r4, #16]
 80052b0:	bd10      	pop	{r4, pc}
 80052b2:	bf00      	nop

080052b4 <acc_service_send_data>:
 80052b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052b6:	9e06      	ldr	r6, [sp, #24]
 80052b8:	6944      	ldr	r4, [r0, #20]
 80052ba:	7835      	ldrb	r5, [r6, #0]
 80052bc:	461f      	mov	r7, r3
 80052be:	b91d      	cbnz	r5, 80052c8 <acc_service_send_data+0x14>
 80052c0:	7ea5      	ldrb	r5, [r4, #26]
 80052c2:	b95d      	cbnz	r5, 80052dc <acc_service_send_data+0x28>
 80052c4:	68a3      	ldr	r3, [r4, #8]
 80052c6:	6019      	str	r1, [r3, #0]
 80052c8:	6920      	ldr	r0, [r4, #16]
 80052ca:	7665      	strb	r5, [r4, #25]
 80052cc:	b128      	cbz	r0, 80052da <acc_service_send_data+0x26>
 80052ce:	6962      	ldr	r2, [r4, #20]
 80052d0:	4639      	mov	r1, r7
 80052d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80052d6:	f008 bd27 	b.w	800dd28 <memcpy>
 80052da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052dc:	68e3      	ldr	r3, [r4, #12]
 80052de:	6860      	ldr	r0, [r4, #4]
 80052e0:	429a      	cmp	r2, r3
 80052e2:	bf28      	it	cs
 80052e4:	461a      	movcs	r2, r3
 80052e6:	f008 fd1f 	bl	800dd28 <memcpy>
 80052ea:	7835      	ldrb	r5, [r6, #0]
 80052ec:	e7ec      	b.n	80052c8 <acc_service_send_data+0x14>
 80052ee:	bf00      	nop

080052f0 <acc_service_set_module_active>:
 80052f0:	4b01      	ldr	r3, [pc, #4]	; (80052f8 <acc_service_set_module_active+0x8>)
 80052f2:	7018      	strb	r0, [r3, #0]
 80052f4:	4770      	bx	lr
 80052f6:	bf00      	nop
 80052f8:	20000309 	.word	0x20000309

080052fc <acc_service_handle_valid>:
 80052fc:	b508      	push	{r3, lr}
 80052fe:	b118      	cbz	r0, 8005308 <acc_service_handle_valid+0xc>
 8005300:	6802      	ldr	r2, [r0, #0]
 8005302:	4b06      	ldr	r3, [pc, #24]	; (800531c <acc_service_handle_valid+0x20>)
 8005304:	429a      	cmp	r2, r3
 8005306:	d007      	beq.n	8005318 <acc_service_handle_valid+0x1c>
 8005308:	4b05      	ldr	r3, [pc, #20]	; (8005320 <acc_service_handle_valid+0x24>)
 800530a:	4a06      	ldr	r2, [pc, #24]	; (8005324 <acc_service_handle_valid+0x28>)
 800530c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800530e:	4906      	ldr	r1, [pc, #24]	; (8005328 <acc_service_handle_valid+0x2c>)
 8005310:	2000      	movs	r0, #0
 8005312:	4798      	blx	r3
 8005314:	2000      	movs	r0, #0
 8005316:	bd08      	pop	{r3, pc}
 8005318:	2001      	movs	r0, #1
 800531a:	bd08      	pop	{r3, pc}
 800531c:	acc09ee8 	.word	0xacc09ee8
 8005320:	200004d0 	.word	0x200004d0
 8005324:	08011398 	.word	0x08011398
 8005328:	08011390 	.word	0x08011390

0800532c <acc_service_activate>:
 800532c:	b570      	push	{r4, r5, r6, lr}
 800532e:	4604      	mov	r4, r0
 8005330:	f7ff ffe4 	bl	80052fc <acc_service_handle_valid>
 8005334:	b1b0      	cbz	r0, 8005364 <acc_service_activate+0x38>
 8005336:	4b19      	ldr	r3, [pc, #100]	; (800539c <acc_service_activate+0x70>)
 8005338:	7818      	ldrb	r0, [r3, #0]
 800533a:	b198      	cbz	r0, 8005364 <acc_service_activate+0x38>
 800533c:	7a63      	ldrb	r3, [r4, #9]
 800533e:	b903      	cbnz	r3, 8005342 <acc_service_activate+0x16>
 8005340:	bd70      	pop	{r4, r5, r6, pc}
 8005342:	6863      	ldr	r3, [r4, #4]
 8005344:	2b2a      	cmp	r3, #42	; 0x2a
 8005346:	d80d      	bhi.n	8005364 <acc_service_activate+0x38>
 8005348:	4d15      	ldr	r5, [pc, #84]	; (80053a0 <acc_service_activate+0x74>)
 800534a:	f815 2013 	ldrb.w	r2, [r5, r3, lsl #1]
 800534e:	b94a      	cbnz	r2, 8005364 <acc_service_activate+0x38>
 8005350:	eb05 0243 	add.w	r2, r5, r3, lsl #1
 8005354:	2101      	movs	r1, #1
 8005356:	7856      	ldrb	r6, [r2, #1]
 8005358:	f805 1013 	strb.w	r1, [r5, r3, lsl #1]
 800535c:	b156      	cbz	r6, 8005374 <acc_service_activate+0x48>
 800535e:	2200      	movs	r2, #0
 8005360:	f805 2013 	strb.w	r2, [r5, r3, lsl #1]
 8005364:	4b0f      	ldr	r3, [pc, #60]	; (80053a4 <acc_service_activate+0x78>)
 8005366:	4a10      	ldr	r2, [pc, #64]	; (80053a8 <acc_service_activate+0x7c>)
 8005368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800536a:	4910      	ldr	r1, [pc, #64]	; (80053ac <acc_service_activate+0x80>)
 800536c:	2000      	movs	r0, #0
 800536e:	4798      	blx	r3
 8005370:	2000      	movs	r0, #0
 8005372:	bd70      	pop	{r4, r5, r6, pc}
 8005374:	f104 0018 	add.w	r0, r4, #24
 8005378:	f002 fe38 	bl	8007fec <acc_sensor_manager_start_measurement>
 800537c:	6863      	ldr	r3, [r4, #4]
 800537e:	b910      	cbnz	r0, 8005386 <acc_service_activate+0x5a>
 8005380:	2b2a      	cmp	r3, #42	; 0x2a
 8005382:	d8ef      	bhi.n	8005364 <acc_service_activate+0x38>
 8005384:	e7eb      	b.n	800535e <acc_service_activate+0x32>
 8005386:	2b2a      	cmp	r3, #42	; 0x2a
 8005388:	d805      	bhi.n	8005396 <acc_service_activate+0x6a>
 800538a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800538e:	7266      	strb	r6, [r4, #9]
 8005390:	f825 2013 	strh.w	r2, [r5, r3, lsl #1]
 8005394:	bd70      	pop	{r4, r5, r6, pc}
 8005396:	7266      	strb	r6, [r4, #9]
 8005398:	bd70      	pop	{r4, r5, r6, pc}
 800539a:	bf00      	nop
 800539c:	20000309 	.word	0x20000309
 80053a0:	2000030c 	.word	0x2000030c
 80053a4:	200004d0 	.word	0x200004d0
 80053a8:	080113a8 	.word	0x080113a8
 80053ac:	08011390 	.word	0x08011390

080053b0 <acc_service_deactivate>:
 80053b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053b4:	4605      	mov	r5, r0
 80053b6:	f7ff ffa1 	bl	80052fc <acc_service_handle_valid>
 80053ba:	b110      	cbz	r0, 80053c2 <acc_service_deactivate+0x12>
 80053bc:	4b16      	ldr	r3, [pc, #88]	; (8005418 <acc_service_deactivate+0x68>)
 80053be:	781c      	ldrb	r4, [r3, #0]
 80053c0:	b94c      	cbnz	r4, 80053d6 <acc_service_deactivate+0x26>
 80053c2:	4b16      	ldr	r3, [pc, #88]	; (800541c <acc_service_deactivate+0x6c>)
 80053c4:	4a16      	ldr	r2, [pc, #88]	; (8005420 <acc_service_deactivate+0x70>)
 80053c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053c8:	4916      	ldr	r1, [pc, #88]	; (8005424 <acc_service_deactivate+0x74>)
 80053ca:	2000      	movs	r0, #0
 80053cc:	4798      	blx	r3
 80053ce:	2400      	movs	r4, #0
 80053d0:	4620      	mov	r0, r4
 80053d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053d6:	7a6b      	ldrb	r3, [r5, #9]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d1f9      	bne.n	80053d0 <acc_service_deactivate+0x20>
 80053dc:	686b      	ldr	r3, [r5, #4]
 80053de:	2b2a      	cmp	r3, #42	; 0x2a
 80053e0:	d8ef      	bhi.n	80053c2 <acc_service_deactivate+0x12>
 80053e2:	4e11      	ldr	r6, [pc, #68]	; (8005428 <acc_service_deactivate+0x78>)
 80053e4:	f816 7013 	ldrb.w	r7, [r6, r3, lsl #1]
 80053e8:	2f00      	cmp	r7, #0
 80053ea:	d1ea      	bne.n	80053c2 <acc_service_deactivate+0x12>
 80053ec:	f04f 0801 	mov.w	r8, #1
 80053f0:	f105 0018 	add.w	r0, r5, #24
 80053f4:	f806 8013 	strb.w	r8, [r6, r3, lsl #1]
 80053f8:	f002 fe32 	bl	8008060 <acc_sensor_manager_stop_measurement>
 80053fc:	686b      	ldr	r3, [r5, #4]
 80053fe:	2b2a      	cmp	r3, #42	; 0x2a
 8005400:	d807      	bhi.n	8005412 <acc_service_deactivate+0x62>
 8005402:	eb06 0243 	add.w	r2, r6, r3, lsl #1
 8005406:	7057      	strb	r7, [r2, #1]
 8005408:	f885 8009 	strb.w	r8, [r5, #9]
 800540c:	f806 7013 	strb.w	r7, [r6, r3, lsl #1]
 8005410:	e7de      	b.n	80053d0 <acc_service_deactivate+0x20>
 8005412:	f885 8009 	strb.w	r8, [r5, #9]
 8005416:	e7db      	b.n	80053d0 <acc_service_deactivate+0x20>
 8005418:	20000309 	.word	0x20000309
 800541c:	200004d0 	.word	0x200004d0
 8005420:	080113c4 	.word	0x080113c4
 8005424:	08011390 	.word	0x08011390
 8005428:	2000030c 	.word	0x2000030c

0800542c <acc_service_get_next>:
 800542c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005430:	460c      	mov	r4, r1
 8005432:	b082      	sub	sp, #8
 8005434:	4606      	mov	r6, r0
 8005436:	f7ff ff61 	bl	80052fc <acc_service_handle_valid>
 800543a:	7ea5      	ldrb	r5, [r4, #26]
 800543c:	b175      	cbz	r5, 800545c <acc_service_get_next+0x30>
 800543e:	6863      	ldr	r3, [r4, #4]
 8005440:	b10b      	cbz	r3, 8005446 <acc_service_get_next+0x1a>
 8005442:	68e3      	ldr	r3, [r4, #12]
 8005444:	b96b      	cbnz	r3, 8005462 <acc_service_get_next+0x36>
 8005446:	4b29      	ldr	r3, [pc, #164]	; (80054ec <acc_service_get_next+0xc0>)
 8005448:	4a29      	ldr	r2, [pc, #164]	; (80054f0 <acc_service_get_next+0xc4>)
 800544a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800544c:	4929      	ldr	r1, [pc, #164]	; (80054f4 <acc_service_get_next+0xc8>)
 800544e:	2000      	movs	r0, #0
 8005450:	4798      	blx	r3
 8005452:	2500      	movs	r5, #0
 8005454:	4628      	mov	r0, r5
 8005456:	b002      	add	sp, #8
 8005458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800545c:	68a3      	ldr	r3, [r4, #8]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d033      	beq.n	80054ca <acc_service_get_next+0x9e>
 8005462:	b920      	cbnz	r0, 800546e <acc_service_get_next+0x42>
 8005464:	2500      	movs	r5, #0
 8005466:	4628      	mov	r0, r5
 8005468:	b002      	add	sp, #8
 800546a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800546e:	7a33      	ldrb	r3, [r6, #8]
 8005470:	7822      	ldrb	r2, [r4, #0]
 8005472:	4293      	cmp	r3, r2
 8005474:	d007      	beq.n	8005486 <acc_service_get_next+0x5a>
 8005476:	491d      	ldr	r1, [pc, #116]	; (80054ec <acc_service_get_next+0xc0>)
 8005478:	9200      	str	r2, [sp, #0]
 800547a:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 800547c:	4a1e      	ldr	r2, [pc, #120]	; (80054f8 <acc_service_get_next+0xcc>)
 800547e:	491d      	ldr	r1, [pc, #116]	; (80054f4 <acc_service_get_next+0xc8>)
 8005480:	2000      	movs	r0, #0
 8005482:	47a0      	blx	r4
 8005484:	e7ee      	b.n	8005464 <acc_service_get_next+0x38>
 8005486:	7e27      	ldrb	r7, [r4, #24]
 8005488:	bb4f      	cbnz	r7, 80054de <acc_service_get_next+0xb2>
 800548a:	f896 8009 	ldrb.w	r8, [r6, #9]
 800548e:	f1b8 0f00 	cmp.w	r8, #0
 8005492:	d00f      	beq.n	80054b4 <acc_service_get_next+0x88>
 8005494:	4b15      	ldr	r3, [pc, #84]	; (80054ec <acc_service_get_next+0xc0>)
 8005496:	4a19      	ldr	r2, [pc, #100]	; (80054fc <acc_service_get_next+0xd0>)
 8005498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800549a:	4916      	ldr	r1, [pc, #88]	; (80054f4 <acc_service_get_next+0xc8>)
 800549c:	2000      	movs	r0, #0
 800549e:	4798      	blx	r3
 80054a0:	2500      	movs	r5, #0
 80054a2:	2f00      	cmp	r7, #0
 80054a4:	d0df      	beq.n	8005466 <acc_service_get_next+0x3a>
 80054a6:	4630      	mov	r0, r6
 80054a8:	f7ff ff82 	bl	80053b0 <acc_service_deactivate>
 80054ac:	4628      	mov	r0, r5
 80054ae:	b002      	add	sp, #8
 80054b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054b4:	6933      	ldr	r3, [r6, #16]
 80054b6:	6174      	str	r4, [r6, #20]
 80054b8:	e9d3 0200 	ldrd	r0, r2, [r3]
 80054bc:	4790      	blx	r2
 80054be:	7e65      	ldrb	r5, [r4, #25]
 80054c0:	f8c6 8014 	str.w	r8, [r6, #20]
 80054c4:	f085 0501 	eor.w	r5, r5, #1
 80054c8:	e7eb      	b.n	80054a2 <acc_service_get_next+0x76>
 80054ca:	4b08      	ldr	r3, [pc, #32]	; (80054ec <acc_service_get_next+0xc0>)
 80054cc:	4a0c      	ldr	r2, [pc, #48]	; (8005500 <acc_service_get_next+0xd4>)
 80054ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054d0:	4908      	ldr	r1, [pc, #32]	; (80054f4 <acc_service_get_next+0xc8>)
 80054d2:	4628      	mov	r0, r5
 80054d4:	4798      	blx	r3
 80054d6:	4628      	mov	r0, r5
 80054d8:	b002      	add	sp, #8
 80054da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054de:	4630      	mov	r0, r6
 80054e0:	f7ff ff24 	bl	800532c <acc_service_activate>
 80054e4:	4607      	mov	r7, r0
 80054e6:	2800      	cmp	r0, #0
 80054e8:	d1cf      	bne.n	800548a <acc_service_get_next+0x5e>
 80054ea:	e7bb      	b.n	8005464 <acc_service_get_next+0x38>
 80054ec:	200004d0 	.word	0x200004d0
 80054f0:	080113e0 	.word	0x080113e0
 80054f4:	08011390 	.word	0x08011390
 80054f8:	08011418 	.word	0x08011418
 80054fc:	08011434 	.word	0x08011434
 8005500:	08011400 	.word	0x08011400

08005504 <acc_service_configuration_valid>:
 8005504:	b508      	push	{r3, lr}
 8005506:	b118      	cbz	r0, 8005510 <acc_service_configuration_valid+0xc>
 8005508:	4b09      	ldr	r3, [pc, #36]	; (8005530 <acc_service_configuration_valid+0x2c>)
 800550a:	6802      	ldr	r2, [r0, #0]
 800550c:	429a      	cmp	r2, r3
 800550e:	d007      	beq.n	8005520 <acc_service_configuration_valid+0x1c>
 8005510:	4b08      	ldr	r3, [pc, #32]	; (8005534 <acc_service_configuration_valid+0x30>)
 8005512:	4a09      	ldr	r2, [pc, #36]	; (8005538 <acc_service_configuration_valid+0x34>)
 8005514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005516:	4909      	ldr	r1, [pc, #36]	; (800553c <acc_service_configuration_valid+0x38>)
 8005518:	2000      	movs	r0, #0
 800551a:	4798      	blx	r3
 800551c:	2000      	movs	r0, #0
 800551e:	bd08      	pop	{r3, pc}
 8005520:	8b03      	ldrh	r3, [r0, #24]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d0f4      	beq.n	8005510 <acc_service_configuration_valid+0xc>
 8005526:	6943      	ldr	r3, [r0, #20]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d0f1      	beq.n	8005510 <acc_service_configuration_valid+0xc>
 800552c:	2001      	movs	r0, #1
 800552e:	bd08      	pop	{r3, pc}
 8005530:	acc09dd7 	.word	0xacc09dd7
 8005534:	200004d0 	.word	0x200004d0
 8005538:	08011378 	.word	0x08011378
 800553c:	08011390 	.word	0x08011390

08005540 <acc_service_configuration_check>:
 8005540:	b510      	push	{r4, lr}
 8005542:	4604      	mov	r4, r0
 8005544:	f7ff ffde 	bl	8005504 <acc_service_configuration_valid>
 8005548:	b118      	cbz	r0, 8005552 <acc_service_configuration_check+0x12>
 800554a:	7963      	ldrb	r3, [r4, #5]
 800554c:	3b01      	subs	r3, #1
 800554e:	2b04      	cmp	r3, #4
 8005550:	d800      	bhi.n	8005554 <acc_service_configuration_check+0x14>
 8005552:	bd10      	pop	{r4, pc}
 8005554:	4b03      	ldr	r3, [pc, #12]	; (8005564 <acc_service_configuration_check+0x24>)
 8005556:	4a04      	ldr	r2, [pc, #16]	; (8005568 <acc_service_configuration_check+0x28>)
 8005558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800555a:	4904      	ldr	r1, [pc, #16]	; (800556c <acc_service_configuration_check+0x2c>)
 800555c:	2000      	movs	r0, #0
 800555e:	4798      	blx	r3
 8005560:	2000      	movs	r0, #0
 8005562:	bd10      	pop	{r4, pc}
 8005564:	200004d0 	.word	0x200004d0
 8005568:	0801144c 	.word	0x0801144c
 800556c:	08011390 	.word	0x08011390

08005570 <acc_service_profile_set>:
 8005570:	b510      	push	{r4, lr}
 8005572:	b138      	cbz	r0, 8005584 <acc_service_profile_set+0x14>
 8005574:	6882      	ldr	r2, [r0, #8]
 8005576:	4604      	mov	r4, r0
 8005578:	b122      	cbz	r2, 8005584 <acc_service_profile_set+0x14>
 800557a:	7141      	strb	r1, [r0, #5]
 800557c:	4790      	blx	r2
 800557e:	7b23      	ldrb	r3, [r4, #12]
 8005580:	b963      	cbnz	r3, 800559c <acc_service_profile_set+0x2c>
 8005582:	bd10      	pop	{r4, pc}
 8005584:	f000 ff9e 	bl	80064c4 <acc_rss_integration_log_level>
 8005588:	2800      	cmp	r0, #0
 800558a:	d0fa      	beq.n	8005582 <acc_service_profile_set+0x12>
 800558c:	4b06      	ldr	r3, [pc, #24]	; (80055a8 <acc_service_profile_set+0x38>)
 800558e:	4a07      	ldr	r2, [pc, #28]	; (80055ac <acc_service_profile_set+0x3c>)
 8005590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005592:	4907      	ldr	r1, [pc, #28]	; (80055b0 <acc_service_profile_set+0x40>)
 8005594:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005598:	2001      	movs	r0, #1
 800559a:	4718      	bx	r3
 800559c:	4620      	mov	r0, r4
 800559e:	2101      	movs	r1, #1
 80055a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055a4:	f7ff be42 	b.w	800522c <set_maximize_signal_attenuation>
 80055a8:	200004d0 	.word	0x200004d0
 80055ac:	08011378 	.word	0x08011378
 80055b0:	08011390 	.word	0x08011390

080055b4 <acc_service_maximize_signal_attenuation_set>:
 80055b4:	b110      	cbz	r0, 80055bc <acc_service_maximize_signal_attenuation_set+0x8>
 80055b6:	7301      	strb	r1, [r0, #12]
 80055b8:	f7ff be38 	b.w	800522c <set_maximize_signal_attenuation>
 80055bc:	b510      	push	{r4, lr}
 80055be:	f000 ff81 	bl	80064c4 <acc_rss_integration_log_level>
 80055c2:	b138      	cbz	r0, 80055d4 <acc_service_maximize_signal_attenuation_set+0x20>
 80055c4:	4b04      	ldr	r3, [pc, #16]	; (80055d8 <acc_service_maximize_signal_attenuation_set+0x24>)
 80055c6:	4a05      	ldr	r2, [pc, #20]	; (80055dc <acc_service_maximize_signal_attenuation_set+0x28>)
 80055c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ca:	4905      	ldr	r1, [pc, #20]	; (80055e0 <acc_service_maximize_signal_attenuation_set+0x2c>)
 80055cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055d0:	2001      	movs	r0, #1
 80055d2:	4718      	bx	r3
 80055d4:	bd10      	pop	{r4, pc}
 80055d6:	bf00      	nop
 80055d8:	200004d0 	.word	0x200004d0
 80055dc:	08011378 	.word	0x08011378
 80055e0:	08011390 	.word	0x08011390

080055e4 <acc_service_initialize_service_configuration>:
 80055e4:	b538      	push	{r3, r4, r5, lr}
 80055e6:	7101      	strb	r1, [r0, #4]
 80055e8:	6102      	str	r2, [r0, #16]
 80055ea:	9905      	ldr	r1, [sp, #20]
 80055ec:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80055f0:	4d07      	ldr	r5, [pc, #28]	; (8005610 <acc_service_initialize_service_configuration+0x2c>)
 80055f2:	6143      	str	r3, [r0, #20]
 80055f4:	4604      	mov	r4, r0
 80055f6:	6005      	str	r5, [r0, #0]
 80055f8:	6081      	str	r1, [r0, #8]
 80055fa:	8302      	strh	r2, [r0, #24]
 80055fc:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8005600:	f7ff ffb6 	bl	8005570 <acc_service_profile_set>
 8005604:	4620      	mov	r0, r4
 8005606:	2100      	movs	r1, #0
 8005608:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800560c:	f7ff bfd2 	b.w	80055b4 <acc_service_maximize_signal_attenuation_set>
 8005610:	acc09dd7 	.word	0xacc09dd7

08005614 <envelope_send_data>:
 8005614:	b570      	push	{r4, r5, r6, lr}
 8005616:	460b      	mov	r3, r1
 8005618:	b084      	sub	sp, #16
 800561a:	ac02      	add	r4, sp, #8
 800561c:	4601      	mov	r1, r0
 800561e:	4610      	mov	r0, r2
 8005620:	795a      	ldrb	r2, [r3, #5]
 8005622:	9400      	str	r4, [sp, #0]
 8005624:	791e      	ldrb	r6, [r3, #4]
 8005626:	79dd      	ldrb	r5, [r3, #7]
 8005628:	799c      	ldrb	r4, [r3, #6]
 800562a:	f88d 200d 	strb.w	r2, [sp, #13]
 800562e:	f88d 2008 	strb.w	r2, [sp, #8]
 8005632:	691a      	ldr	r2, [r3, #16]
 8005634:	f88d 600e 	strb.w	r6, [sp, #14]
 8005638:	ab03      	add	r3, sp, #12
 800563a:	f88d 500f 	strb.w	r5, [sp, #15]
 800563e:	f88d 400c 	strb.w	r4, [sp, #12]
 8005642:	f7ff fe37 	bl	80052b4 <acc_service_send_data>
 8005646:	b004      	add	sp, #16
 8005648:	bd70      	pop	{r4, r5, r6, pc}
 800564a:	bf00      	nop

0800564c <envelope_create_service>:
 800564c:	b570      	push	{r4, r5, r6, lr}
 800564e:	b0a4      	sub	sp, #144	; 0x90
 8005650:	2288      	movs	r2, #136	; 0x88
 8005652:	4604      	mov	r4, r0
 8005654:	a802      	add	r0, sp, #8
 8005656:	460d      	mov	r5, r1
 8005658:	f008 fb66 	bl	800dd28 <memcpy>
 800565c:	a809      	add	r0, sp, #36	; 0x24
 800565e:	f000 fcc3 	bl	8005fe8 <acc_base_configuration_downsampling_factor_get>
 8005662:	ee07 0a90 	vmov	s15, r0
 8005666:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800566a:	eddd 7a23 	vldr	s15, [sp, #140]	; 0x8c
 800566e:	a809      	add	r0, sp, #36	; 0x24
 8005670:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005674:	f000 fbb2 	bl	8005ddc <acc_base_configuration_demodulation_filter_cutoff_freq_ratio_set>
 8005678:	a802      	add	r0, sp, #8
 800567a:	f7ff ff61 	bl	8005540 <acc_service_configuration_check>
 800567e:	b1c0      	cbz	r0, 80056b2 <envelope_create_service+0x66>
 8005680:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005682:	2b04      	cmp	r3, #4
 8005684:	d00f      	beq.n	80056a6 <envelope_create_service+0x5a>
 8005686:	a809      	add	r0, sp, #36	; 0x24
 8005688:	f000 fdb8 	bl	80061fc <acc_base_configuration_check>
 800568c:	b188      	cbz	r0, 80056b2 <envelope_create_service+0x66>
 800568e:	a809      	add	r0, sp, #36	; 0x24
 8005690:	f000 fcaa 	bl	8005fe8 <acc_base_configuration_downsampling_factor_get>
 8005694:	1e43      	subs	r3, r0, #1
 8005696:	b29b      	uxth	r3, r3
 8005698:	2b01      	cmp	r3, #1
 800569a:	d90d      	bls.n	80056b8 <envelope_create_service+0x6c>
 800569c:	2804      	cmp	r0, #4
 800569e:	d00b      	beq.n	80056b8 <envelope_create_service+0x6c>
 80056a0:	4b1a      	ldr	r3, [pc, #104]	; (800570c <envelope_create_service+0xc0>)
 80056a2:	4a1b      	ldr	r2, [pc, #108]	; (8005710 <envelope_create_service+0xc4>)
 80056a4:	e001      	b.n	80056aa <envelope_create_service+0x5e>
 80056a6:	4b19      	ldr	r3, [pc, #100]	; (800570c <envelope_create_service+0xc0>)
 80056a8:	4a1a      	ldr	r2, [pc, #104]	; (8005714 <envelope_create_service+0xc8>)
 80056aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056ac:	491a      	ldr	r1, [pc, #104]	; (8005718 <envelope_create_service+0xcc>)
 80056ae:	2000      	movs	r0, #0
 80056b0:	4798      	blx	r3
 80056b2:	2000      	movs	r0, #0
 80056b4:	b024      	add	sp, #144	; 0x90
 80056b6:	bd70      	pop	{r4, r5, r6, pc}
 80056b8:	2200      	movs	r2, #0
 80056ba:	4611      	mov	r1, r2
 80056bc:	a809      	add	r0, sp, #36	; 0x24
 80056be:	f000 fd01 	bl	80060c4 <acc_base_configuration_cca_get>
 80056c2:	2100      	movs	r1, #0
 80056c4:	4606      	mov	r6, r0
 80056c6:	a809      	add	r0, sp, #36	; 0x24
 80056c8:	f000 fb4e 	bl	8005d68 <acc_base_configuration_time_domain_low_pass_filter_alpha_get>
 80056cc:	b106      	cbz	r6, 80056d0 <envelope_create_service+0x84>
 80056ce:	b990      	cbnz	r0, 80056f6 <envelope_create_service+0xaa>
 80056d0:	792b      	ldrb	r3, [r5, #4]
 80056d2:	7223      	strb	r3, [r4, #8]
 80056d4:	4b11      	ldr	r3, [pc, #68]	; (800571c <envelope_create_service+0xd0>)
 80056d6:	9301      	str	r3, [sp, #4]
 80056d8:	aa09      	add	r2, sp, #36	; 0x24
 80056da:	4623      	mov	r3, r4
 80056dc:	a901      	add	r1, sp, #4
 80056de:	f104 0018 	add.w	r0, r4, #24
 80056e2:	f000 ff21 	bl	8006528 <acc_pipeline_envelope_assemble>
 80056e6:	4b0e      	ldr	r3, [pc, #56]	; (8005720 <envelope_create_service+0xd4>)
 80056e8:	6120      	str	r0, [r4, #16]
 80056ea:	3800      	subs	r0, #0
 80056ec:	bf18      	it	ne
 80056ee:	2001      	movne	r0, #1
 80056f0:	60e3      	str	r3, [r4, #12]
 80056f2:	b024      	add	sp, #144	; 0x90
 80056f4:	bd70      	pop	{r4, r5, r6, pc}
 80056f6:	f000 fee5 	bl	80064c4 <acc_rss_integration_log_level>
 80056fa:	2800      	cmp	r0, #0
 80056fc:	d0e8      	beq.n	80056d0 <envelope_create_service+0x84>
 80056fe:	4b03      	ldr	r3, [pc, #12]	; (800570c <envelope_create_service+0xc0>)
 8005700:	4a08      	ldr	r2, [pc, #32]	; (8005724 <envelope_create_service+0xd8>)
 8005702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005704:	4904      	ldr	r1, [pc, #16]	; (8005718 <envelope_create_service+0xcc>)
 8005706:	2001      	movs	r0, #1
 8005708:	4798      	blx	r3
 800570a:	e7e1      	b.n	80056d0 <envelope_create_service+0x84>
 800570c:	200004d0 	.word	0x200004d0
 8005710:	080114b4 	.word	0x080114b4
 8005714:	08011464 	.word	0x08011464
 8005718:	080114a0 	.word	0x080114a0
 800571c:	08005615 	.word	0x08005615
 8005720:	080052a1 	.word	0x080052a1
 8005724:	080114d4 	.word	0x080114d4

08005728 <get_and_validate_envelope_configuration>:
 8005728:	b510      	push	{r4, lr}
 800572a:	4604      	mov	r4, r0
 800572c:	f7ff feea 	bl	8005504 <acc_service_configuration_valid>
 8005730:	b108      	cbz	r0, 8005736 <get_and_validate_envelope_configuration+0xe>
 8005732:	7923      	ldrb	r3, [r4, #4]
 8005734:	b153      	cbz	r3, 800574c <get_and_validate_envelope_configuration+0x24>
 8005736:	f000 fec5 	bl	80064c4 <acc_rss_integration_log_level>
 800573a:	b130      	cbz	r0, 800574a <get_and_validate_envelope_configuration+0x22>
 800573c:	4b04      	ldr	r3, [pc, #16]	; (8005750 <get_and_validate_envelope_configuration+0x28>)
 800573e:	4a05      	ldr	r2, [pc, #20]	; (8005754 <get_and_validate_envelope_configuration+0x2c>)
 8005740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005742:	4905      	ldr	r1, [pc, #20]	; (8005758 <get_and_validate_envelope_configuration+0x30>)
 8005744:	2001      	movs	r0, #1
 8005746:	4798      	blx	r3
 8005748:	2000      	movs	r0, #0
 800574a:	bd10      	pop	{r4, pc}
 800574c:	4620      	mov	r0, r4
 800574e:	bd10      	pop	{r4, pc}
 8005750:	200004d0 	.word	0x200004d0
 8005754:	08011378 	.word	0x08011378
 8005758:	080114a0 	.word	0x080114a0

0800575c <set_configuration_for_profile>:
 800575c:	b530      	push	{r4, r5, lr}
 800575e:	b083      	sub	sp, #12
 8005760:	460c      	mov	r4, r1
 8005762:	f7ff ffe1 	bl	8005728 <get_and_validate_envelope_configuration>
 8005766:	b1c0      	cbz	r0, 800579a <set_configuration_for_profile+0x3e>
 8005768:	1e61      	subs	r1, r4, #1
 800576a:	4605      	mov	r5, r0
 800576c:	301c      	adds	r0, #28
 800576e:	2904      	cmp	r1, #4
 8005770:	d813      	bhi.n	800579a <set_configuration_for_profile+0x3e>
 8005772:	e8df f001 	tbb	[pc, r1]
 8005776:	2514      	.short	0x2514
 8005778:	3836      	.short	0x3836
 800577a:	03          	.byte	0x03
 800577b:	00          	.byte	0x00
 800577c:	2110      	movs	r1, #16
 800577e:	9001      	str	r0, [sp, #4]
 8005780:	f000 fb9c 	bl	8005ebc <acc_base_configuration_wg_duration_set>
 8005784:	9801      	ldr	r0, [sp, #4]
 8005786:	2106      	movs	r1, #6
 8005788:	f000 fb84 	bl	8005e94 <acc_base_configuration_integrator_set>
 800578c:	9801      	ldr	r0, [sp, #4]
 800578e:	2101      	movs	r1, #1
 8005790:	f000 fba8 	bl	8005ee4 <acc_base_configuration_integrator_ramp_up_set>
 8005794:	4b15      	ldr	r3, [pc, #84]	; (80057ec <set_configuration_for_profile+0x90>)
 8005796:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
 800579a:	b003      	add	sp, #12
 800579c:	bd30      	pop	{r4, r5, pc}
 800579e:	2100      	movs	r1, #0
 80057a0:	9001      	str	r0, [sp, #4]
 80057a2:	f000 fb8b 	bl	8005ebc <acc_base_configuration_wg_duration_set>
 80057a6:	9801      	ldr	r0, [sp, #4]
 80057a8:	2100      	movs	r1, #0
 80057aa:	f000 fb73 	bl	8005e94 <acc_base_configuration_integrator_set>
 80057ae:	9801      	ldr	r0, [sp, #4]
 80057b0:	2103      	movs	r1, #3
 80057b2:	f000 fb97 	bl	8005ee4 <acc_base_configuration_integrator_ramp_up_set>
 80057b6:	4b0e      	ldr	r3, [pc, #56]	; (80057f0 <set_configuration_for_profile+0x94>)
 80057b8:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
 80057bc:	b003      	add	sp, #12
 80057be:	bd30      	pop	{r4, r5, pc}
 80057c0:	2107      	movs	r1, #7
 80057c2:	9001      	str	r0, [sp, #4]
 80057c4:	f000 fb7a 	bl	8005ebc <acc_base_configuration_wg_duration_set>
 80057c8:	9801      	ldr	r0, [sp, #4]
 80057ca:	2106      	movs	r1, #6
 80057cc:	f000 fb62 	bl	8005e94 <acc_base_configuration_integrator_set>
 80057d0:	9801      	ldr	r0, [sp, #4]
 80057d2:	2109      	movs	r1, #9
 80057d4:	f000 fb86 	bl	8005ee4 <acc_base_configuration_integrator_ramp_up_set>
 80057d8:	4b04      	ldr	r3, [pc, #16]	; (80057ec <set_configuration_for_profile+0x90>)
 80057da:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
 80057de:	b003      	add	sp, #12
 80057e0:	bd30      	pop	{r4, r5, pc}
 80057e2:	2109      	movs	r1, #9
 80057e4:	e7ed      	b.n	80057c2 <set_configuration_for_profile+0x66>
 80057e6:	210c      	movs	r1, #12
 80057e8:	e7c9      	b.n	800577e <set_configuration_for_profile+0x22>
 80057ea:	bf00      	nop
 80057ec:	3b843809 	.word	0x3b843809
 80057f0:	3c8461fa 	.word	0x3c8461fa

080057f4 <acc_service_envelope_configuration_create>:
 80057f4:	b570      	push	{r4, r5, r6, lr}
 80057f6:	4a3e      	ldr	r2, [pc, #248]	; (80058f0 <acc_service_envelope_configuration_create+0xfc>)
 80057f8:	b084      	sub	sp, #16
 80057fa:	236d      	movs	r3, #109	; 0x6d
 80057fc:	2188      	movs	r1, #136	; 0x88
 80057fe:	2001      	movs	r0, #1
 8005800:	f000 fe30 	bl	8006464 <acc_rss_integration_mem_calloc_debug>
 8005804:	4605      	mov	r5, r0
 8005806:	2800      	cmp	r0, #0
 8005808:	d06f      	beq.n	80058ea <acc_service_envelope_configuration_create+0xf6>
 800580a:	493a      	ldr	r1, [pc, #232]	; (80058f4 <acc_service_envelope_configuration_create+0x100>)
 800580c:	f100 041c 	add.w	r4, r0, #28
 8005810:	2602      	movs	r6, #2
 8005812:	2358      	movs	r3, #88	; 0x58
 8005814:	4622      	mov	r2, r4
 8005816:	e9cd 3100 	strd	r3, r1, [sp]
 800581a:	9602      	str	r6, [sp, #8]
 800581c:	4b36      	ldr	r3, [pc, #216]	; (80058f8 <acc_service_envelope_configuration_create+0x104>)
 800581e:	2100      	movs	r1, #0
 8005820:	f7ff fee0 	bl	80055e4 <acc_service_initialize_service_configuration>
 8005824:	ed9f 0a35 	vldr	s0, [pc, #212]	; 80058fc <acc_service_envelope_configuration_create+0x108>
 8005828:	4620      	mov	r0, r4
 800582a:	f000 f9fd 	bl	8005c28 <acc_base_configuration_requested_start_set>
 800582e:	ed9f 0a34 	vldr	s0, [pc, #208]	; 8005900 <acc_service_envelope_configuration_create+0x10c>
 8005832:	4620      	mov	r0, r4
 8005834:	f000 fa14 	bl	8005c60 <acc_base_configuration_requested_length_set>
 8005838:	4620      	mov	r0, r4
 800583a:	2106      	movs	r1, #6
 800583c:	f000 fc64 	bl	8006108 <acc_base_configuration_mur_set>
 8005840:	4620      	mov	r0, r4
 8005842:	210a      	movs	r1, #10
 8005844:	f000 fa64 	bl	8005d10 <acc_base_configuration_hw_accelerated_average_samples_set>
 8005848:	2101      	movs	r1, #1
 800584a:	4620      	mov	r0, r4
 800584c:	f000 f9d6 	bl	8005bfc <acc_base_configuration_sensor_set>
 8005850:	4620      	mov	r0, r4
 8005852:	f000 fa13 	bl	8005c7c <acc_base_configuration_repetition_mode_on_demand_set>
 8005856:	4631      	mov	r1, r6
 8005858:	4620      	mov	r0, r4
 800585a:	f000 fa1f 	bl	8005c9c <acc_base_configuration_power_save_mode_set>
 800585e:	4620      	mov	r0, r4
 8005860:	2100      	movs	r1, #0
 8005862:	f000 fb67 	bl	8005f34 <acc_base_configuration_use_point_range_set>
 8005866:	4620      	mov	r0, r4
 8005868:	2100      	movs	r1, #0
 800586a:	f000 fb4f 	bl	8005f0c <acc_base_configuration_sweep_type_debug_set>
 800586e:	4620      	mov	r0, r4
 8005870:	2100      	movs	r1, #0
 8005872:	f000 fa25 	bl	8005cc0 <acc_base_configuration_tx_disable_set>
 8005876:	4620      	mov	r0, r4
 8005878:	2100      	movs	r1, #0
 800587a:	f000 fa35 	bl	8005ce8 <acc_base_configuration_decrease_tx_emission_set>
 800587e:	2200      	movs	r2, #0
 8005880:	4611      	mov	r1, r2
 8005882:	2340      	movs	r3, #64	; 0x40
 8005884:	4620      	mov	r0, r4
 8005886:	f000 fc2f 	bl	80060e8 <acc_base_configuration_cca_set>
 800588a:	4620      	mov	r0, r4
 800588c:	21ff      	movs	r1, #255	; 0xff
 800588e:	f000 fb6f 	bl	8005f70 <acc_base_configuration_staggered_vga_stabilization_time_set>
 8005892:	4620      	mov	r0, r4
 8005894:	2100      	movs	r1, #0
 8005896:	f000 fb61 	bl	8005f5c <acc_base_configuration_use_fast_dll_refresh_routine_set>
 800589a:	4620      	mov	r0, r4
 800589c:	2101      	movs	r1, #1
 800589e:	f000 fbad 	bl	8005ffc <acc_base_configuration_downsampling_factor_set>
 80058a2:	4620      	mov	r0, r4
 80058a4:	210b      	movs	r1, #11
 80058a6:	f000 fae3 	bl	8005e70 <acc_base_configuration_gain_set>
 80058aa:	2101      	movs	r1, #1
 80058ac:	4620      	mov	r0, r4
 80058ae:	f000 fbb9 	bl	8006024 <acc_base_configuration_noise_level_normalization_set>
 80058b2:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8005904 <acc_service_envelope_configuration_create+0x110>
 80058b6:	4620      	mov	r0, r4
 80058b8:	f000 fa48 	bl	8005d4c <acc_base_configuration_phase_compensation_alpha_set>
 80058bc:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8005908 <acc_service_envelope_configuration_create+0x114>
 80058c0:	4620      	mov	r0, r4
 80058c2:	2101      	movs	r1, #1
 80058c4:	f000 fa5c 	bl	8005d80 <acc_base_configuration_time_domain_low_pass_filter_alpha_set>
 80058c8:	4620      	mov	r0, r4
 80058ca:	2101      	movs	r1, #1
 80058cc:	f000 fa70 	bl	8005db0 <acc_base_configuration_filter_demodulated_data_set>
 80058d0:	4620      	mov	r0, r4
 80058d2:	2101      	movs	r1, #1
 80058d4:	f000 fbc4 	bl	8006060 <acc_base_configuration_asynchronous_measurement_set>
 80058d8:	4620      	mov	r0, r4
 80058da:	f44f 5196 	mov.w	r1, #4800	; 0x12c0
 80058de:	f000 fbd3 	bl	8006088 <acc_base_configuration_min_pipeline_memory_size_set>
 80058e2:	490a      	ldr	r1, [pc, #40]	; (800590c <acc_service_envelope_configuration_create+0x118>)
 80058e4:	4620      	mov	r0, r4
 80058e6:	f000 fa1b 	bl	8005d20 <acc_base_configuration_radar_engine_creation_set>
 80058ea:	4628      	mov	r0, r5
 80058ec:	b004      	add	sp, #16
 80058ee:	bd70      	pop	{r4, r5, r6, pc}
 80058f0:	080114a0 	.word	0x080114a0
 80058f4:	0800575d 	.word	0x0800575d
 80058f8:	0800564d 	.word	0x0800564d
 80058fc:	3e4ccccd 	.word	0x3e4ccccd
 8005900:	3ecccccd 	.word	0x3ecccccd
 8005904:	3dcccccd 	.word	0x3dcccccd
 8005908:	3e99999a 	.word	0x3e99999a
 800590c:	08007301 	.word	0x08007301

08005910 <acc_service_envelope_configuration_destroy>:
 8005910:	b130      	cbz	r0, 8005920 <acc_service_envelope_configuration_destroy+0x10>
 8005912:	b510      	push	{r4, lr}
 8005914:	4604      	mov	r4, r0
 8005916:	6800      	ldr	r0, [r0, #0]
 8005918:	f7ff fdf4 	bl	8005504 <acc_service_configuration_valid>
 800591c:	b908      	cbnz	r0, 8005922 <acc_service_envelope_configuration_destroy+0x12>
 800591e:	bd10      	pop	{r4, pc}
 8005920:	4770      	bx	lr
 8005922:	6820      	ldr	r0, [r4, #0]
 8005924:	f7ff ff00 	bl	8005728 <get_and_validate_envelope_configuration>
 8005928:	f000 fdba 	bl	80064a0 <acc_rss_integration_mem_free>
 800592c:	2300      	movs	r3, #0
 800592e:	6023      	str	r3, [r4, #0]
 8005930:	bd10      	pop	{r4, pc}
 8005932:	bf00      	nop

08005934 <acc_service_envelope_get_metadata>:
 8005934:	b1e0      	cbz	r0, 8005970 <acc_service_envelope_get_metadata+0x3c>
 8005936:	7a03      	ldrb	r3, [r0, #8]
 8005938:	b9d3      	cbnz	r3, 8005970 <acc_service_envelope_get_metadata+0x3c>
 800593a:	b1c9      	cbz	r1, 8005970 <acc_service_envelope_get_metadata+0x3c>
 800593c:	6903      	ldr	r3, [r0, #16]
 800593e:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8005974 <acc_service_envelope_get_metadata+0x40>
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	edd3 7a08 	vldr	s15, [r3, #32]
 8005948:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800594a:	8d58      	ldrh	r0, [r3, #42]	; 0x2a
 800594c:	b430      	push	{r4, r5}
 800594e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005952:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005956:	ee67 7a87 	vmul.f32	s15, s15, s14
 800595a:	695d      	ldr	r5, [r3, #20]
 800595c:	699c      	ldr	r4, [r3, #24]
 800595e:	604c      	str	r4, [r1, #4]
 8005960:	1e53      	subs	r3, r2, #1
 8005962:	600d      	str	r5, [r1, #0]
 8005964:	edc1 7a03 	vstr	s15, [r1, #12]
 8005968:	bc30      	pop	{r4, r5}
 800596a:	814b      	strh	r3, [r1, #10]
 800596c:	8108      	strh	r0, [r1, #8]
 800596e:	4770      	bx	lr
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop
 8005974:	4d8ef3c2 	.word	0x4d8ef3c2

08005978 <acc_service_envelope_get_next>:
 8005978:	b530      	push	{r4, r5, lr}
 800597a:	b08b      	sub	sp, #44	; 0x2c
 800597c:	0052      	lsls	r2, r2, #1
 800597e:	9101      	str	r1, [sp, #4]
 8005980:	2400      	movs	r4, #0
 8005982:	9206      	str	r2, [sp, #24]
 8005984:	9307      	str	r3, [sp, #28]
 8005986:	2204      	movs	r2, #4
 8005988:	2301      	movs	r3, #1
 800598a:	9104      	str	r1, [sp, #16]
 800598c:	ad01      	add	r5, sp, #4
 800598e:	a903      	add	r1, sp, #12
 8005990:	f88d 400c 	strb.w	r4, [sp, #12]
 8005994:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
 8005998:	9505      	str	r5, [sp, #20]
 800599a:	9208      	str	r2, [sp, #32]
 800599c:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
 80059a0:	f7ff fd44 	bl	800542c <acc_service_get_next>
 80059a4:	b00b      	add	sp, #44	; 0x2c
 80059a6:	bd30      	pop	{r4, r5, pc}

080059a8 <destroy_handle>:
 80059a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059ac:	4e15      	ldr	r6, [pc, #84]	; (8005a04 <destroy_handle+0x5c>)
 80059ae:	4605      	mov	r5, r0
 80059b0:	6874      	ldr	r4, [r6, #4]
 80059b2:	f000 fd87 	bl	80064c4 <acc_rss_integration_log_level>
 80059b6:	2803      	cmp	r0, #3
 80059b8:	d906      	bls.n	80059c8 <destroy_handle+0x20>
 80059ba:	4a13      	ldr	r2, [pc, #76]	; (8005a08 <destroy_handle+0x60>)
 80059bc:	686b      	ldr	r3, [r5, #4]
 80059be:	6b57      	ldr	r7, [r2, #52]	; 0x34
 80059c0:	4912      	ldr	r1, [pc, #72]	; (8005a0c <destroy_handle+0x64>)
 80059c2:	4a13      	ldr	r2, [pc, #76]	; (8005a10 <destroy_handle+0x68>)
 80059c4:	2004      	movs	r0, #4
 80059c6:	47b8      	blx	r7
 80059c8:	b144      	cbz	r4, 80059dc <destroy_handle+0x34>
 80059ca:	42ac      	cmp	r4, r5
 80059cc:	d102      	bne.n	80059d4 <destroy_handle+0x2c>
 80059ce:	e016      	b.n	80059fe <destroy_handle+0x56>
 80059d0:	42a5      	cmp	r5, r4
 80059d2:	d00d      	beq.n	80059f0 <destroy_handle+0x48>
 80059d4:	4623      	mov	r3, r4
 80059d6:	6d64      	ldr	r4, [r4, #84]	; 0x54
 80059d8:	2c00      	cmp	r4, #0
 80059da:	d1f9      	bne.n	80059d0 <destroy_handle+0x28>
 80059dc:	4a0a      	ldr	r2, [pc, #40]	; (8005a08 <destroy_handle+0x60>)
 80059de:	686b      	ldr	r3, [r5, #4]
 80059e0:	6b54      	ldr	r4, [r2, #52]	; 0x34
 80059e2:	490a      	ldr	r1, [pc, #40]	; (8005a0c <destroy_handle+0x64>)
 80059e4:	4a0b      	ldr	r2, [pc, #44]	; (8005a14 <destroy_handle+0x6c>)
 80059e6:	46a4      	mov	ip, r4
 80059e8:	2000      	movs	r0, #0
 80059ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80059ee:	4760      	bx	ip
 80059f0:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 80059f2:	655a      	str	r2, [r3, #84]	; 0x54
 80059f4:	4628      	mov	r0, r5
 80059f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80059fa:	f000 bd51 	b.w	80064a0 <acc_rss_integration_mem_free>
 80059fe:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8005a00:	6073      	str	r3, [r6, #4]
 8005a02:	e7f7      	b.n	80059f4 <destroy_handle+0x4c>
 8005a04:	20000364 	.word	0x20000364
 8005a08:	200004d0 	.word	0x200004d0
 8005a0c:	08011540 	.word	0x08011540
 8005a10:	0801151c 	.word	0x0801151c
 8005a14:	08011550 	.word	0x08011550

08005a18 <acc_service_manager_activate>:
 8005a18:	b510      	push	{r4, lr}
 8005a1a:	4c05      	ldr	r4, [pc, #20]	; (8005a30 <acc_service_manager_activate+0x18>)
 8005a1c:	7820      	ldrb	r0, [r4, #0]
 8005a1e:	b100      	cbz	r0, 8005a22 <acc_service_manager_activate+0xa>
 8005a20:	bd10      	pop	{r4, pc}
 8005a22:	2001      	movs	r0, #1
 8005a24:	7020      	strb	r0, [r4, #0]
 8005a26:	f7ff fc63 	bl	80052f0 <acc_service_set_module_active>
 8005a2a:	7820      	ldrb	r0, [r4, #0]
 8005a2c:	bd10      	pop	{r4, pc}
 8005a2e:	bf00      	nop
 8005a30:	20000364 	.word	0x20000364

08005a34 <acc_service_create>:
 8005a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a38:	4e30      	ldr	r6, [pc, #192]	; (8005afc <acc_service_create+0xc8>)
 8005a3a:	7834      	ldrb	r4, [r6, #0]
 8005a3c:	2c00      	cmp	r4, #0
 8005a3e:	d041      	beq.n	8005ac4 <acc_service_create+0x90>
 8005a40:	4605      	mov	r5, r0
 8005a42:	f7ff fd5f 	bl	8005504 <acc_service_configuration_valid>
 8005a46:	b1a0      	cbz	r0, 8005a72 <acc_service_create+0x3e>
 8005a48:	692b      	ldr	r3, [r5, #16]
 8005a4a:	68df      	ldr	r7, [r3, #12]
 8005a4c:	1e7b      	subs	r3, r7, #1
 8005a4e:	2b29      	cmp	r3, #41	; 0x29
 8005a50:	d84a      	bhi.n	8005ae8 <acc_service_create+0xb4>
 8005a52:	7873      	ldrb	r3, [r6, #1]
 8005a54:	b98b      	cbnz	r3, 8005a7a <acc_service_create+0x46>
 8005a56:	6873      	ldr	r3, [r6, #4]
 8005a58:	b913      	cbnz	r3, 8005a60 <acc_service_create+0x2c>
 8005a5a:	e00e      	b.n	8005a7a <acc_service_create+0x46>
 8005a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a5e:	b163      	cbz	r3, 8005a7a <acc_service_create+0x46>
 8005a60:	685a      	ldr	r2, [r3, #4]
 8005a62:	4297      	cmp	r7, r2
 8005a64:	d1fa      	bne.n	8005a5c <acc_service_create+0x28>
 8005a66:	4b26      	ldr	r3, [pc, #152]	; (8005b00 <acc_service_create+0xcc>)
 8005a68:	4a26      	ldr	r2, [pc, #152]	; (8005b04 <acc_service_create+0xd0>)
 8005a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a6c:	4926      	ldr	r1, [pc, #152]	; (8005b08 <acc_service_create+0xd4>)
 8005a6e:	2000      	movs	r0, #0
 8005a70:	4798      	blx	r3
 8005a72:	2400      	movs	r4, #0
 8005a74:	4620      	mov	r0, r4
 8005a76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a7a:	8b2c      	ldrh	r4, [r5, #24]
 8005a7c:	f000 fd22 	bl	80064c4 <acc_rss_integration_log_level>
 8005a80:	2803      	cmp	r0, #3
 8005a82:	d907      	bls.n	8005a94 <acc_service_create+0x60>
 8005a84:	4b1e      	ldr	r3, [pc, #120]	; (8005b00 <acc_service_create+0xcc>)
 8005a86:	4a21      	ldr	r2, [pc, #132]	; (8005b0c <acc_service_create+0xd8>)
 8005a88:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 8005a8c:	491e      	ldr	r1, [pc, #120]	; (8005b08 <acc_service_create+0xd4>)
 8005a8e:	463b      	mov	r3, r7
 8005a90:	2004      	movs	r0, #4
 8005a92:	47c0      	blx	r8
 8005a94:	4621      	mov	r1, r4
 8005a96:	4a1c      	ldr	r2, [pc, #112]	; (8005b08 <acc_service_create+0xd4>)
 8005a98:	23bd      	movs	r3, #189	; 0xbd
 8005a9a:	2001      	movs	r0, #1
 8005a9c:	f000 fce2 	bl	8006464 <acc_rss_integration_mem_calloc_debug>
 8005aa0:	4604      	mov	r4, r0
 8005aa2:	2800      	cmp	r0, #0
 8005aa4:	d0e5      	beq.n	8005a72 <acc_service_create+0x3e>
 8005aa6:	6873      	ldr	r3, [r6, #4]
 8005aa8:	4a19      	ldr	r2, [pc, #100]	; (8005b10 <acc_service_create+0xdc>)
 8005aaa:	6047      	str	r7, [r0, #4]
 8005aac:	6002      	str	r2, [r0, #0]
 8005aae:	6543      	str	r3, [r0, #84]	; 0x54
 8005ab0:	6070      	str	r0, [r6, #4]
 8005ab2:	696b      	ldr	r3, [r5, #20]
 8005ab4:	4629      	mov	r1, r5
 8005ab6:	4798      	blx	r3
 8005ab8:	b168      	cbz	r0, 8005ad6 <acc_service_create+0xa2>
 8005aba:	2301      	movs	r3, #1
 8005abc:	7263      	strb	r3, [r4, #9]
 8005abe:	4620      	mov	r0, r4
 8005ac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ac4:	4b0e      	ldr	r3, [pc, #56]	; (8005b00 <acc_service_create+0xcc>)
 8005ac6:	4a13      	ldr	r2, [pc, #76]	; (8005b14 <acc_service_create+0xe0>)
 8005ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aca:	490f      	ldr	r1, [pc, #60]	; (8005b08 <acc_service_create+0xd4>)
 8005acc:	4620      	mov	r0, r4
 8005ace:	4798      	blx	r3
 8005ad0:	4620      	mov	r0, r4
 8005ad2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ad6:	68e3      	ldr	r3, [r4, #12]
 8005ad8:	b10b      	cbz	r3, 8005ade <acc_service_create+0xaa>
 8005ada:	4620      	mov	r0, r4
 8005adc:	4798      	blx	r3
 8005ade:	4620      	mov	r0, r4
 8005ae0:	f7ff ff62 	bl	80059a8 <destroy_handle>
 8005ae4:	2400      	movs	r4, #0
 8005ae6:	e7c5      	b.n	8005a74 <acc_service_create+0x40>
 8005ae8:	4b05      	ldr	r3, [pc, #20]	; (8005b00 <acc_service_create+0xcc>)
 8005aea:	4a0b      	ldr	r2, [pc, #44]	; (8005b18 <acc_service_create+0xe4>)
 8005aec:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8005aee:	4906      	ldr	r1, [pc, #24]	; (8005b08 <acc_service_create+0xd4>)
 8005af0:	232a      	movs	r3, #42	; 0x2a
 8005af2:	2000      	movs	r0, #0
 8005af4:	47a0      	blx	r4
 8005af6:	2400      	movs	r4, #0
 8005af8:	e7bc      	b.n	8005a74 <acc_service_create+0x40>
 8005afa:	bf00      	nop
 8005afc:	20000364 	.word	0x20000364
 8005b00:	200004d0 	.word	0x200004d0
 8005b04:	080115e4 	.word	0x080115e4
 8005b08:	08011540 	.word	0x08011540
 8005b0c:	080115b0 	.word	0x080115b0
 8005b10:	acc09ee8 	.word	0xacc09ee8
 8005b14:	080115d0 	.word	0x080115d0
 8005b18:	08011584 	.word	0x08011584

08005b1c <acc_service_destroy>:
 8005b1c:	4b11      	ldr	r3, [pc, #68]	; (8005b64 <acc_service_destroy+0x48>)
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	b510      	push	{r4, lr}
 8005b22:	b133      	cbz	r3, 8005b32 <acc_service_destroy+0x16>
 8005b24:	4604      	mov	r4, r0
 8005b26:	b118      	cbz	r0, 8005b30 <acc_service_destroy+0x14>
 8005b28:	6800      	ldr	r0, [r0, #0]
 8005b2a:	f7ff fbe7 	bl	80052fc <acc_service_handle_valid>
 8005b2e:	b960      	cbnz	r0, 8005b4a <acc_service_destroy+0x2e>
 8005b30:	bd10      	pop	{r4, pc}
 8005b32:	f000 fcc7 	bl	80064c4 <acc_rss_integration_log_level>
 8005b36:	2800      	cmp	r0, #0
 8005b38:	d0fa      	beq.n	8005b30 <acc_service_destroy+0x14>
 8005b3a:	4b0b      	ldr	r3, [pc, #44]	; (8005b68 <acc_service_destroy+0x4c>)
 8005b3c:	4a0b      	ldr	r2, [pc, #44]	; (8005b6c <acc_service_destroy+0x50>)
 8005b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b40:	490b      	ldr	r1, [pc, #44]	; (8005b70 <acc_service_destroy+0x54>)
 8005b42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b46:	2001      	movs	r0, #1
 8005b48:	4718      	bx	r3
 8005b4a:	6820      	ldr	r0, [r4, #0]
 8005b4c:	f7ff fc30 	bl	80053b0 <acc_service_deactivate>
 8005b50:	6820      	ldr	r0, [r4, #0]
 8005b52:	68c3      	ldr	r3, [r0, #12]
 8005b54:	b10b      	cbz	r3, 8005b5a <acc_service_destroy+0x3e>
 8005b56:	4798      	blx	r3
 8005b58:	6820      	ldr	r0, [r4, #0]
 8005b5a:	f7ff ff25 	bl	80059a8 <destroy_handle>
 8005b5e:	2300      	movs	r3, #0
 8005b60:	6023      	str	r3, [r4, #0]
 8005b62:	bd10      	pop	{r4, pc}
 8005b64:	20000364 	.word	0x20000364
 8005b68:	200004d0 	.word	0x200004d0
 8005b6c:	080115d0 	.word	0x080115d0
 8005b70:	08011540 	.word	0x08011540

08005b74 <acc_service_manager_deactivate>:
 8005b74:	b538      	push	{r3, r4, r5, lr}
 8005b76:	4c0e      	ldr	r4, [pc, #56]	; (8005bb0 <acc_service_manager_deactivate+0x3c>)
 8005b78:	7823      	ldrb	r3, [r4, #0]
 8005b7a:	b1bb      	cbz	r3, 8005bac <acc_service_manager_deactivate+0x38>
 8005b7c:	6863      	ldr	r3, [r4, #4]
 8005b7e:	b17b      	cbz	r3, 8005ba0 <acc_service_manager_deactivate+0x2c>
 8005b80:	1d25      	adds	r5, r4, #4
 8005b82:	4628      	mov	r0, r5
 8005b84:	f7ff ffca 	bl	8005b1c <acc_service_destroy>
 8005b88:	6863      	ldr	r3, [r4, #4]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d1f9      	bne.n	8005b82 <acc_service_manager_deactivate+0xe>
 8005b8e:	f000 fc99 	bl	80064c4 <acc_rss_integration_log_level>
 8005b92:	b128      	cbz	r0, 8005ba0 <acc_service_manager_deactivate+0x2c>
 8005b94:	4b07      	ldr	r3, [pc, #28]	; (8005bb4 <acc_service_manager_deactivate+0x40>)
 8005b96:	4a08      	ldr	r2, [pc, #32]	; (8005bb8 <acc_service_manager_deactivate+0x44>)
 8005b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b9a:	4908      	ldr	r1, [pc, #32]	; (8005bbc <acc_service_manager_deactivate+0x48>)
 8005b9c:	2001      	movs	r0, #1
 8005b9e:	4798      	blx	r3
 8005ba0:	2000      	movs	r0, #0
 8005ba2:	7020      	strb	r0, [r4, #0]
 8005ba4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ba8:	f7ff bba2 	b.w	80052f0 <acc_service_set_module_active>
 8005bac:	bd38      	pop	{r3, r4, r5, pc}
 8005bae:	bf00      	nop
 8005bb0:	20000364 	.word	0x20000364
 8005bb4:	200004d0 	.word	0x200004d0
 8005bb8:	0801160c 	.word	0x0801160c
 8005bbc:	08011540 	.word	0x08011540

08005bc0 <configuration_is_valid>:
 8005bc0:	b108      	cbz	r0, 8005bc6 <configuration_is_valid+0x6>
 8005bc2:	2001      	movs	r0, #1
 8005bc4:	4770      	bx	lr
 8005bc6:	b510      	push	{r4, lr}
 8005bc8:	4604      	mov	r4, r0
 8005bca:	f000 fc7b 	bl	80064c4 <acc_rss_integration_log_level>
 8005bce:	b130      	cbz	r0, 8005bde <configuration_is_valid+0x1e>
 8005bd0:	4b03      	ldr	r3, [pc, #12]	; (8005be0 <configuration_is_valid+0x20>)
 8005bd2:	4a04      	ldr	r2, [pc, #16]	; (8005be4 <configuration_is_valid+0x24>)
 8005bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bd6:	4904      	ldr	r1, [pc, #16]	; (8005be8 <configuration_is_valid+0x28>)
 8005bd8:	2001      	movs	r0, #1
 8005bda:	4798      	blx	r3
 8005bdc:	4620      	mov	r0, r4
 8005bde:	bd10      	pop	{r4, pc}
 8005be0:	200004d0 	.word	0x200004d0
 8005be4:	08011658 	.word	0x08011658
 8005be8:	08011674 	.word	0x08011674

08005bec <acc_base_configuration_sensor_get>:
 8005bec:	b510      	push	{r4, lr}
 8005bee:	4604      	mov	r4, r0
 8005bf0:	f7ff ffe6 	bl	8005bc0 <configuration_is_valid>
 8005bf4:	b900      	cbnz	r0, 8005bf8 <acc_base_configuration_sensor_get+0xc>
 8005bf6:	bd10      	pop	{r4, pc}
 8005bf8:	68e0      	ldr	r0, [r4, #12]
 8005bfa:	bd10      	pop	{r4, pc}

08005bfc <acc_base_configuration_sensor_set>:
 8005bfc:	b538      	push	{r3, r4, r5, lr}
 8005bfe:	460d      	mov	r5, r1
 8005c00:	4604      	mov	r4, r0
 8005c02:	f7ff ffdd 	bl	8005bc0 <configuration_is_valid>
 8005c06:	b100      	cbz	r0, 8005c0a <acc_base_configuration_sensor_set+0xe>
 8005c08:	60e5      	str	r5, [r4, #12]
 8005c0a:	bd38      	pop	{r3, r4, r5, pc}

08005c0c <acc_base_configuration_requested_start_get>:
 8005c0c:	b510      	push	{r4, lr}
 8005c0e:	4604      	mov	r4, r0
 8005c10:	f7ff ffd6 	bl	8005bc0 <configuration_is_valid>
 8005c14:	b910      	cbnz	r0, 8005c1c <acc_base_configuration_requested_start_get+0x10>
 8005c16:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8005c24 <acc_base_configuration_requested_start_get+0x18>
 8005c1a:	bd10      	pop	{r4, pc}
 8005c1c:	ed94 0a09 	vldr	s0, [r4, #36]	; 0x24
 8005c20:	bd10      	pop	{r4, pc}
 8005c22:	bf00      	nop
 8005c24:	00000000 	.word	0x00000000

08005c28 <acc_base_configuration_requested_start_set>:
 8005c28:	b510      	push	{r4, lr}
 8005c2a:	ed2d 8b02 	vpush	{d8}
 8005c2e:	4604      	mov	r4, r0
 8005c30:	eeb0 8a40 	vmov.f32	s16, s0
 8005c34:	f7ff ffc4 	bl	8005bc0 <configuration_is_valid>
 8005c38:	b108      	cbz	r0, 8005c3e <acc_base_configuration_requested_start_set+0x16>
 8005c3a:	ed84 8a09 	vstr	s16, [r4, #36]	; 0x24
 8005c3e:	ecbd 8b02 	vpop	{d8}
 8005c42:	bd10      	pop	{r4, pc}

08005c44 <acc_base_configuration_requested_length_get>:
 8005c44:	b510      	push	{r4, lr}
 8005c46:	4604      	mov	r4, r0
 8005c48:	f7ff ffba 	bl	8005bc0 <configuration_is_valid>
 8005c4c:	b910      	cbnz	r0, 8005c54 <acc_base_configuration_requested_length_get+0x10>
 8005c4e:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8005c5c <acc_base_configuration_requested_length_get+0x18>
 8005c52:	bd10      	pop	{r4, pc}
 8005c54:	ed94 0a0a 	vldr	s0, [r4, #40]	; 0x28
 8005c58:	bd10      	pop	{r4, pc}
 8005c5a:	bf00      	nop
 8005c5c:	00000000 	.word	0x00000000

08005c60 <acc_base_configuration_requested_length_set>:
 8005c60:	b510      	push	{r4, lr}
 8005c62:	ed2d 8b02 	vpush	{d8}
 8005c66:	4604      	mov	r4, r0
 8005c68:	eeb0 8a40 	vmov.f32	s16, s0
 8005c6c:	f7ff ffa8 	bl	8005bc0 <configuration_is_valid>
 8005c70:	b108      	cbz	r0, 8005c76 <acc_base_configuration_requested_length_set+0x16>
 8005c72:	ed84 8a0a 	vstr	s16, [r4, #40]	; 0x28
 8005c76:	ecbd 8b02 	vpop	{d8}
 8005c7a:	bd10      	pop	{r4, pc}

08005c7c <acc_base_configuration_repetition_mode_on_demand_set>:
 8005c7c:	b510      	push	{r4, lr}
 8005c7e:	4604      	mov	r4, r0
 8005c80:	f7ff ff9e 	bl	8005bc0 <configuration_is_valid>
 8005c84:	b108      	cbz	r0, 8005c8a <acc_base_configuration_repetition_mode_on_demand_set+0xe>
 8005c86:	2301      	movs	r3, #1
 8005c88:	7123      	strb	r3, [r4, #4]
 8005c8a:	bd10      	pop	{r4, pc}

08005c8c <acc_base_configuration_power_save_mode_get>:
 8005c8c:	b510      	push	{r4, lr}
 8005c8e:	4604      	mov	r4, r0
 8005c90:	f7ff ff96 	bl	8005bc0 <configuration_is_valid>
 8005c94:	b900      	cbnz	r0, 8005c98 <acc_base_configuration_power_save_mode_get+0xc>
 8005c96:	bd10      	pop	{r4, pc}
 8005c98:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005c9a:	bd10      	pop	{r4, pc}

08005c9c <acc_base_configuration_power_save_mode_set>:
 8005c9c:	b538      	push	{r3, r4, r5, lr}
 8005c9e:	460d      	mov	r5, r1
 8005ca0:	4604      	mov	r4, r0
 8005ca2:	f7ff ff8d 	bl	8005bc0 <configuration_is_valid>
 8005ca6:	b100      	cbz	r0, 8005caa <acc_base_configuration_power_save_mode_set+0xe>
 8005ca8:	63a5      	str	r5, [r4, #56]	; 0x38
 8005caa:	bd38      	pop	{r3, r4, r5, pc}

08005cac <acc_base_configuration_tx_disable_get>:
 8005cac:	b510      	push	{r4, lr}
 8005cae:	4604      	mov	r4, r0
 8005cb0:	f7ff ff86 	bl	8005bc0 <configuration_is_valid>
 8005cb4:	b900      	cbnz	r0, 8005cb8 <acc_base_configuration_tx_disable_get+0xc>
 8005cb6:	bd10      	pop	{r4, pc}
 8005cb8:	f894 0047 	ldrb.w	r0, [r4, #71]	; 0x47
 8005cbc:	bd10      	pop	{r4, pc}
 8005cbe:	bf00      	nop

08005cc0 <acc_base_configuration_tx_disable_set>:
 8005cc0:	b538      	push	{r3, r4, r5, lr}
 8005cc2:	460d      	mov	r5, r1
 8005cc4:	4604      	mov	r4, r0
 8005cc6:	f7ff ff7b 	bl	8005bc0 <configuration_is_valid>
 8005cca:	b108      	cbz	r0, 8005cd0 <acc_base_configuration_tx_disable_set+0x10>
 8005ccc:	f884 5047 	strb.w	r5, [r4, #71]	; 0x47
 8005cd0:	bd38      	pop	{r3, r4, r5, pc}
 8005cd2:	bf00      	nop

08005cd4 <acc_base_configuration_decrease_tx_emission_get>:
 8005cd4:	b510      	push	{r4, lr}
 8005cd6:	4604      	mov	r4, r0
 8005cd8:	f7ff ff72 	bl	8005bc0 <configuration_is_valid>
 8005cdc:	b900      	cbnz	r0, 8005ce0 <acc_base_configuration_decrease_tx_emission_get+0xc>
 8005cde:	bd10      	pop	{r4, pc}
 8005ce0:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 8005ce4:	bd10      	pop	{r4, pc}
 8005ce6:	bf00      	nop

08005ce8 <acc_base_configuration_decrease_tx_emission_set>:
 8005ce8:	b538      	push	{r3, r4, r5, lr}
 8005cea:	460d      	mov	r5, r1
 8005cec:	4604      	mov	r4, r0
 8005cee:	f7ff ff67 	bl	8005bc0 <configuration_is_valid>
 8005cf2:	b108      	cbz	r0, 8005cf8 <acc_base_configuration_decrease_tx_emission_set+0x10>
 8005cf4:	f884 5048 	strb.w	r5, [r4, #72]	; 0x48
 8005cf8:	bd38      	pop	{r3, r4, r5, pc}
 8005cfa:	bf00      	nop

08005cfc <acc_base_configuration_hw_accelerated_average_samples_get>:
 8005cfc:	b510      	push	{r4, lr}
 8005cfe:	4604      	mov	r4, r0
 8005d00:	f7ff ff5e 	bl	8005bc0 <configuration_is_valid>
 8005d04:	b900      	cbnz	r0, 8005d08 <acc_base_configuration_hw_accelerated_average_samples_get+0xc>
 8005d06:	bd10      	pop	{r4, pc}
 8005d08:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
 8005d0c:	bd10      	pop	{r4, pc}
 8005d0e:	bf00      	nop

08005d10 <acc_base_configuration_hw_accelerated_average_samples_set>:
 8005d10:	b538      	push	{r3, r4, r5, lr}
 8005d12:	460d      	mov	r5, r1
 8005d14:	4604      	mov	r4, r0
 8005d16:	f7ff ff53 	bl	8005bc0 <configuration_is_valid>
 8005d1a:	b100      	cbz	r0, 8005d1e <acc_base_configuration_hw_accelerated_average_samples_set+0xe>
 8005d1c:	87a5      	strh	r5, [r4, #60]	; 0x3c
 8005d1e:	bd38      	pop	{r3, r4, r5, pc}

08005d20 <acc_base_configuration_radar_engine_creation_set>:
 8005d20:	b538      	push	{r3, r4, r5, lr}
 8005d22:	460d      	mov	r5, r1
 8005d24:	4604      	mov	r4, r0
 8005d26:	f7ff ff4b 	bl	8005bc0 <configuration_is_valid>
 8005d2a:	b100      	cbz	r0, 8005d2e <acc_base_configuration_radar_engine_creation_set+0xe>
 8005d2c:	6025      	str	r5, [r4, #0]
 8005d2e:	bd38      	pop	{r3, r4, r5, pc}

08005d30 <acc_base_configuration_phase_compensation_alpha_get>:
 8005d30:	b510      	push	{r4, lr}
 8005d32:	4604      	mov	r4, r0
 8005d34:	f7ff ff44 	bl	8005bc0 <configuration_is_valid>
 8005d38:	b910      	cbnz	r0, 8005d40 <acc_base_configuration_phase_compensation_alpha_get+0x10>
 8005d3a:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8005d48 <acc_base_configuration_phase_compensation_alpha_get+0x18>
 8005d3e:	bd10      	pop	{r4, pc}
 8005d40:	ed94 0a04 	vldr	s0, [r4, #16]
 8005d44:	bd10      	pop	{r4, pc}
 8005d46:	bf00      	nop
 8005d48:	00000000 	.word	0x00000000

08005d4c <acc_base_configuration_phase_compensation_alpha_set>:
 8005d4c:	b510      	push	{r4, lr}
 8005d4e:	ed2d 8b02 	vpush	{d8}
 8005d52:	4604      	mov	r4, r0
 8005d54:	eeb0 8a40 	vmov.f32	s16, s0
 8005d58:	f7ff ff32 	bl	8005bc0 <configuration_is_valid>
 8005d5c:	b108      	cbz	r0, 8005d62 <acc_base_configuration_phase_compensation_alpha_set+0x16>
 8005d5e:	ed84 8a04 	vstr	s16, [r4, #16]
 8005d62:	ecbd 8b02 	vpop	{d8}
 8005d66:	bd10      	pop	{r4, pc}

08005d68 <acc_base_configuration_time_domain_low_pass_filter_alpha_get>:
 8005d68:	b538      	push	{r3, r4, r5, lr}
 8005d6a:	460d      	mov	r5, r1
 8005d6c:	4604      	mov	r4, r0
 8005d6e:	f7ff ff27 	bl	8005bc0 <configuration_is_valid>
 8005d72:	b900      	cbnz	r0, 8005d76 <acc_base_configuration_time_domain_low_pass_filter_alpha_get+0xe>
 8005d74:	bd38      	pop	{r3, r4, r5, pc}
 8005d76:	b10d      	cbz	r5, 8005d7c <acc_base_configuration_time_domain_low_pass_filter_alpha_get+0x14>
 8005d78:	6963      	ldr	r3, [r4, #20]
 8005d7a:	602b      	str	r3, [r5, #0]
 8005d7c:	7e20      	ldrb	r0, [r4, #24]
 8005d7e:	bd38      	pop	{r3, r4, r5, pc}

08005d80 <acc_base_configuration_time_domain_low_pass_filter_alpha_set>:
 8005d80:	b538      	push	{r3, r4, r5, lr}
 8005d82:	ed2d 8b02 	vpush	{d8}
 8005d86:	460d      	mov	r5, r1
 8005d88:	eeb0 8a40 	vmov.f32	s16, s0
 8005d8c:	4604      	mov	r4, r0
 8005d8e:	f7ff ff17 	bl	8005bc0 <configuration_is_valid>
 8005d92:	b110      	cbz	r0, 8005d9a <acc_base_configuration_time_domain_low_pass_filter_alpha_set+0x1a>
 8005d94:	ed84 8a05 	vstr	s16, [r4, #20]
 8005d98:	7625      	strb	r5, [r4, #24]
 8005d9a:	ecbd 8b02 	vpop	{d8}
 8005d9e:	bd38      	pop	{r3, r4, r5, pc}

08005da0 <acc_base_configuration_filter_demodulated_data_get>:
 8005da0:	b510      	push	{r4, lr}
 8005da2:	4604      	mov	r4, r0
 8005da4:	f7ff ff0c 	bl	8005bc0 <configuration_is_valid>
 8005da8:	b900      	cbnz	r0, 8005dac <acc_base_configuration_filter_demodulated_data_get+0xc>
 8005daa:	bd10      	pop	{r4, pc}
 8005dac:	7f20      	ldrb	r0, [r4, #28]
 8005dae:	bd10      	pop	{r4, pc}

08005db0 <acc_base_configuration_filter_demodulated_data_set>:
 8005db0:	b538      	push	{r3, r4, r5, lr}
 8005db2:	460d      	mov	r5, r1
 8005db4:	4604      	mov	r4, r0
 8005db6:	f7ff ff03 	bl	8005bc0 <configuration_is_valid>
 8005dba:	b100      	cbz	r0, 8005dbe <acc_base_configuration_filter_demodulated_data_set+0xe>
 8005dbc:	7725      	strb	r5, [r4, #28]
 8005dbe:	bd38      	pop	{r3, r4, r5, pc}

08005dc0 <acc_base_configuration_demodulation_filter_cutoff_freq_ratio_get>:
 8005dc0:	b510      	push	{r4, lr}
 8005dc2:	4604      	mov	r4, r0
 8005dc4:	f7ff fefc 	bl	8005bc0 <configuration_is_valid>
 8005dc8:	b910      	cbnz	r0, 8005dd0 <acc_base_configuration_demodulation_filter_cutoff_freq_ratio_get+0x10>
 8005dca:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8005dd8 <acc_base_configuration_demodulation_filter_cutoff_freq_ratio_get+0x18>
 8005dce:	bd10      	pop	{r4, pc}
 8005dd0:	ed94 0a08 	vldr	s0, [r4, #32]
 8005dd4:	bd10      	pop	{r4, pc}
 8005dd6:	bf00      	nop
 8005dd8:	00000000 	.word	0x00000000

08005ddc <acc_base_configuration_demodulation_filter_cutoff_freq_ratio_set>:
 8005ddc:	b510      	push	{r4, lr}
 8005dde:	ed2d 8b02 	vpush	{d8}
 8005de2:	4604      	mov	r4, r0
 8005de4:	eeb0 8a40 	vmov.f32	s16, s0
 8005de8:	f7ff feea 	bl	8005bc0 <configuration_is_valid>
 8005dec:	b108      	cbz	r0, 8005df2 <acc_base_configuration_demodulation_filter_cutoff_freq_ratio_set+0x16>
 8005dee:	ed84 8a08 	vstr	s16, [r4, #32]
 8005df2:	ecbd 8b02 	vpop	{d8}
 8005df6:	bd10      	pop	{r4, pc}

08005df8 <acc_base_configuration_point_start_get>:
 8005df8:	b510      	push	{r4, lr}
 8005dfa:	4604      	mov	r4, r0
 8005dfc:	f7ff fee0 	bl	8005bc0 <configuration_is_valid>
 8005e00:	b900      	cbnz	r0, 8005e04 <acc_base_configuration_point_start_get+0xc>
 8005e02:	bd10      	pop	{r4, pc}
 8005e04:	f9b4 0034 	ldrsh.w	r0, [r4, #52]	; 0x34
 8005e08:	bd10      	pop	{r4, pc}
 8005e0a:	bf00      	nop

08005e0c <acc_base_configuration_point_length_get>:
 8005e0c:	b510      	push	{r4, lr}
 8005e0e:	4604      	mov	r4, r0
 8005e10:	f7ff fed6 	bl	8005bc0 <configuration_is_valid>
 8005e14:	b900      	cbnz	r0, 8005e18 <acc_base_configuration_point_length_get+0xc>
 8005e16:	bd10      	pop	{r4, pc}
 8005e18:	f9b4 0036 	ldrsh.w	r0, [r4, #54]	; 0x36
 8005e1c:	bd10      	pop	{r4, pc}
 8005e1e:	bf00      	nop

08005e20 <acc_base_configuration_repetition_mode_get>:
 8005e20:	b510      	push	{r4, lr}
 8005e22:	4604      	mov	r4, r0
 8005e24:	f7ff fecc 	bl	8005bc0 <configuration_is_valid>
 8005e28:	b900      	cbnz	r0, 8005e2c <acc_base_configuration_repetition_mode_get+0xc>
 8005e2a:	bd10      	pop	{r4, pc}
 8005e2c:	7920      	ldrb	r0, [r4, #4]
 8005e2e:	bd10      	pop	{r4, pc}

08005e30 <acc_base_configuration_update_rate_get>:
 8005e30:	b510      	push	{r4, lr}
 8005e32:	4604      	mov	r4, r0
 8005e34:	f7ff fec4 	bl	8005bc0 <configuration_is_valid>
 8005e38:	b158      	cbz	r0, 8005e52 <acc_base_configuration_update_rate_get+0x22>
 8005e3a:	7923      	ldrb	r3, [r4, #4]
 8005e3c:	2b02      	cmp	r3, #2
 8005e3e:	d005      	beq.n	8005e4c <acc_base_configuration_update_rate_get+0x1c>
 8005e40:	d802      	bhi.n	8005e48 <acc_base_configuration_update_rate_get+0x18>
 8005e42:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8005e58 <acc_base_configuration_update_rate_get+0x28>
 8005e46:	bd10      	pop	{r4, pc}
 8005e48:	2b03      	cmp	r3, #3
 8005e4a:	d102      	bne.n	8005e52 <acc_base_configuration_update_rate_get+0x22>
 8005e4c:	ed94 0a02 	vldr	s0, [r4, #8]
 8005e50:	bd10      	pop	{r4, pc}
 8005e52:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8005e5c <acc_base_configuration_update_rate_get+0x2c>
 8005e56:	bd10      	pop	{r4, pc}
 8005e58:	7f800000 	.word	0x7f800000
 8005e5c:	7fc00000 	.word	0x7fc00000

08005e60 <acc_base_configuration_gain_get>:
 8005e60:	b510      	push	{r4, lr}
 8005e62:	4604      	mov	r4, r0
 8005e64:	f7ff feac 	bl	8005bc0 <configuration_is_valid>
 8005e68:	b900      	cbnz	r0, 8005e6c <acc_base_configuration_gain_get+0xc>
 8005e6a:	bd10      	pop	{r4, pc}
 8005e6c:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
 8005e6e:	bd10      	pop	{r4, pc}

08005e70 <acc_base_configuration_gain_set>:
 8005e70:	b538      	push	{r3, r4, r5, lr}
 8005e72:	460d      	mov	r5, r1
 8005e74:	4604      	mov	r4, r0
 8005e76:	f7ff fea3 	bl	8005bc0 <configuration_is_valid>
 8005e7a:	b100      	cbz	r0, 8005e7e <acc_base_configuration_gain_set+0xe>
 8005e7c:	87e5      	strh	r5, [r4, #62]	; 0x3e
 8005e7e:	bd38      	pop	{r3, r4, r5, pc}

08005e80 <acc_base_configuration_integrator_get>:
 8005e80:	b510      	push	{r4, lr}
 8005e82:	4604      	mov	r4, r0
 8005e84:	f7ff fe9c 	bl	8005bc0 <configuration_is_valid>
 8005e88:	b900      	cbnz	r0, 8005e8c <acc_base_configuration_integrator_get+0xc>
 8005e8a:	bd10      	pop	{r4, pc}
 8005e8c:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
 8005e90:	bd10      	pop	{r4, pc}
 8005e92:	bf00      	nop

08005e94 <acc_base_configuration_integrator_set>:
 8005e94:	b538      	push	{r3, r4, r5, lr}
 8005e96:	460d      	mov	r5, r1
 8005e98:	4604      	mov	r4, r0
 8005e9a:	f7ff fe91 	bl	8005bc0 <configuration_is_valid>
 8005e9e:	b108      	cbz	r0, 8005ea4 <acc_base_configuration_integrator_set+0x10>
 8005ea0:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
 8005ea4:	bd38      	pop	{r3, r4, r5, pc}
 8005ea6:	bf00      	nop

08005ea8 <acc_base_configuration_wg_duration_get>:
 8005ea8:	b510      	push	{r4, lr}
 8005eaa:	4604      	mov	r4, r0
 8005eac:	f7ff fe88 	bl	8005bc0 <configuration_is_valid>
 8005eb0:	b900      	cbnz	r0, 8005eb4 <acc_base_configuration_wg_duration_get+0xc>
 8005eb2:	bd10      	pop	{r4, pc}
 8005eb4:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
 8005eb8:	bd10      	pop	{r4, pc}
 8005eba:	bf00      	nop

08005ebc <acc_base_configuration_wg_duration_set>:
 8005ebc:	b538      	push	{r3, r4, r5, lr}
 8005ebe:	460d      	mov	r5, r1
 8005ec0:	4604      	mov	r4, r0
 8005ec2:	f7ff fe7d 	bl	8005bc0 <configuration_is_valid>
 8005ec6:	b108      	cbz	r0, 8005ecc <acc_base_configuration_wg_duration_set+0x10>
 8005ec8:	f8a4 5042 	strh.w	r5, [r4, #66]	; 0x42
 8005ecc:	bd38      	pop	{r3, r4, r5, pc}
 8005ece:	bf00      	nop

08005ed0 <acc_base_configuration_integrator_ramp_up_get>:
 8005ed0:	b510      	push	{r4, lr}
 8005ed2:	4604      	mov	r4, r0
 8005ed4:	f7ff fe74 	bl	8005bc0 <configuration_is_valid>
 8005ed8:	b900      	cbnz	r0, 8005edc <acc_base_configuration_integrator_ramp_up_get+0xc>
 8005eda:	bd10      	pop	{r4, pc}
 8005edc:	f8b4 0044 	ldrh.w	r0, [r4, #68]	; 0x44
 8005ee0:	bd10      	pop	{r4, pc}
 8005ee2:	bf00      	nop

08005ee4 <acc_base_configuration_integrator_ramp_up_set>:
 8005ee4:	b538      	push	{r3, r4, r5, lr}
 8005ee6:	460d      	mov	r5, r1
 8005ee8:	4604      	mov	r4, r0
 8005eea:	f7ff fe69 	bl	8005bc0 <configuration_is_valid>
 8005eee:	b108      	cbz	r0, 8005ef4 <acc_base_configuration_integrator_ramp_up_set+0x10>
 8005ef0:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
 8005ef4:	bd38      	pop	{r3, r4, r5, pc}
 8005ef6:	bf00      	nop

08005ef8 <acc_base_configuration_sampling_mode_get>:
 8005ef8:	b510      	push	{r4, lr}
 8005efa:	4604      	mov	r4, r0
 8005efc:	f7ff fe60 	bl	8005bc0 <configuration_is_valid>
 8005f00:	b900      	cbnz	r0, 8005f04 <acc_base_configuration_sampling_mode_get+0xc>
 8005f02:	bd10      	pop	{r4, pc}
 8005f04:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
 8005f08:	bd10      	pop	{r4, pc}
 8005f0a:	bf00      	nop

08005f0c <acc_base_configuration_sweep_type_debug_set>:
 8005f0c:	b538      	push	{r3, r4, r5, lr}
 8005f0e:	460d      	mov	r5, r1
 8005f10:	4604      	mov	r4, r0
 8005f12:	f7ff fe55 	bl	8005bc0 <configuration_is_valid>
 8005f16:	b108      	cbz	r0, 8005f1c <acc_base_configuration_sweep_type_debug_set+0x10>
 8005f18:	f884 5046 	strb.w	r5, [r4, #70]	; 0x46
 8005f1c:	bd38      	pop	{r3, r4, r5, pc}
 8005f1e:	bf00      	nop

08005f20 <acc_base_configuration_sweep_type_debug_get>:
 8005f20:	b510      	push	{r4, lr}
 8005f22:	4604      	mov	r4, r0
 8005f24:	f7ff fe4c 	bl	8005bc0 <configuration_is_valid>
 8005f28:	b900      	cbnz	r0, 8005f2c <acc_base_configuration_sweep_type_debug_get+0xc>
 8005f2a:	bd10      	pop	{r4, pc}
 8005f2c:	f894 0046 	ldrb.w	r0, [r4, #70]	; 0x46
 8005f30:	bd10      	pop	{r4, pc}
 8005f32:	bf00      	nop

08005f34 <acc_base_configuration_use_point_range_set>:
 8005f34:	b538      	push	{r3, r4, r5, lr}
 8005f36:	460d      	mov	r5, r1
 8005f38:	4604      	mov	r4, r0
 8005f3a:	f7ff fe41 	bl	8005bc0 <configuration_is_valid>
 8005f3e:	b108      	cbz	r0, 8005f44 <acc_base_configuration_use_point_range_set+0x10>
 8005f40:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
 8005f44:	bd38      	pop	{r3, r4, r5, pc}
 8005f46:	bf00      	nop

08005f48 <acc_base_configuration_use_point_range_get>:
 8005f48:	b510      	push	{r4, lr}
 8005f4a:	4604      	mov	r4, r0
 8005f4c:	f7ff fe38 	bl	8005bc0 <configuration_is_valid>
 8005f50:	b900      	cbnz	r0, 8005f54 <acc_base_configuration_use_point_range_get+0xc>
 8005f52:	bd10      	pop	{r4, pc}
 8005f54:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8005f58:	bd10      	pop	{r4, pc}
 8005f5a:	bf00      	nop

08005f5c <acc_base_configuration_use_fast_dll_refresh_routine_set>:
 8005f5c:	b538      	push	{r3, r4, r5, lr}
 8005f5e:	460d      	mov	r5, r1
 8005f60:	4604      	mov	r4, r0
 8005f62:	f7ff fe2d 	bl	8005bc0 <configuration_is_valid>
 8005f66:	b108      	cbz	r0, 8005f6c <acc_base_configuration_use_fast_dll_refresh_routine_set+0x10>
 8005f68:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 8005f6c:	bd38      	pop	{r3, r4, r5, pc}
 8005f6e:	bf00      	nop

08005f70 <acc_base_configuration_staggered_vga_stabilization_time_set>:
 8005f70:	b538      	push	{r3, r4, r5, lr}
 8005f72:	460d      	mov	r5, r1
 8005f74:	4604      	mov	r4, r0
 8005f76:	f7ff fe23 	bl	8005bc0 <configuration_is_valid>
 8005f7a:	b108      	cbz	r0, 8005f80 <acc_base_configuration_staggered_vga_stabilization_time_set+0x10>
 8005f7c:	f8a4 5056 	strh.w	r5, [r4, #86]	; 0x56
 8005f80:	bd38      	pop	{r3, r4, r5, pc}
 8005f82:	bf00      	nop

08005f84 <acc_base_configuration_bba_reset_clocksync_perturbation_get>:
 8005f84:	b510      	push	{r4, lr}
 8005f86:	4604      	mov	r4, r0
 8005f88:	f7ff fe1a 	bl	8005bc0 <configuration_is_valid>
 8005f8c:	b900      	cbnz	r0, 8005f90 <acc_base_configuration_bba_reset_clocksync_perturbation_get+0xc>
 8005f8e:	bd10      	pop	{r4, pc}
 8005f90:	f894 0063 	ldrb.w	r0, [r4, #99]	; 0x63
 8005f94:	bd10      	pop	{r4, pc}
 8005f96:	bf00      	nop

08005f98 <acc_base_configuration_bba_linear_resync_perturbation_get>:
 8005f98:	b510      	push	{r4, lr}
 8005f9a:	4604      	mov	r4, r0
 8005f9c:	f7ff fe10 	bl	8005bc0 <configuration_is_valid>
 8005fa0:	b900      	cbnz	r0, 8005fa4 <acc_base_configuration_bba_linear_resync_perturbation_get+0xc>
 8005fa2:	bd10      	pop	{r4, pc}
 8005fa4:	f894 0064 	ldrb.w	r0, [r4, #100]	; 0x64
 8005fa8:	bd10      	pop	{r4, pc}
 8005faa:	bf00      	nop

08005fac <acc_base_configuration_bba_fast_refresh_disable_get>:
 8005fac:	b510      	push	{r4, lr}
 8005fae:	4604      	mov	r4, r0
 8005fb0:	f7ff fe06 	bl	8005bc0 <configuration_is_valid>
 8005fb4:	b900      	cbnz	r0, 8005fb8 <acc_base_configuration_bba_fast_refresh_disable_get+0xc>
 8005fb6:	bd10      	pop	{r4, pc}
 8005fb8:	f894 0065 	ldrb.w	r0, [r4, #101]	; 0x65
 8005fbc:	bd10      	pop	{r4, pc}
 8005fbe:	bf00      	nop

08005fc0 <acc_base_configuration_ignore_range_limits_get>:
 8005fc0:	b510      	push	{r4, lr}
 8005fc2:	4604      	mov	r4, r0
 8005fc4:	f7ff fdfc 	bl	8005bc0 <configuration_is_valid>
 8005fc8:	b900      	cbnz	r0, 8005fcc <acc_base_configuration_ignore_range_limits_get+0xc>
 8005fca:	bd10      	pop	{r4, pc}
 8005fcc:	f894 0066 	ldrb.w	r0, [r4, #102]	; 0x66
 8005fd0:	bd10      	pop	{r4, pc}
 8005fd2:	bf00      	nop

08005fd4 <acc_base_configuration_sparse_sweeps_per_frame_get>:
 8005fd4:	b510      	push	{r4, lr}
 8005fd6:	4604      	mov	r4, r0
 8005fd8:	f7ff fdf2 	bl	8005bc0 <configuration_is_valid>
 8005fdc:	b900      	cbnz	r0, 8005fe0 <acc_base_configuration_sparse_sweeps_per_frame_get+0xc>
 8005fde:	bd10      	pop	{r4, pc}
 8005fe0:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 8005fe4:	bd10      	pop	{r4, pc}
 8005fe6:	bf00      	nop

08005fe8 <acc_base_configuration_downsampling_factor_get>:
 8005fe8:	b510      	push	{r4, lr}
 8005fea:	4604      	mov	r4, r0
 8005fec:	f7ff fde8 	bl	8005bc0 <configuration_is_valid>
 8005ff0:	b900      	cbnz	r0, 8005ff4 <acc_base_configuration_downsampling_factor_get+0xc>
 8005ff2:	bd10      	pop	{r4, pc}
 8005ff4:	f8b4 0060 	ldrh.w	r0, [r4, #96]	; 0x60
 8005ff8:	bd10      	pop	{r4, pc}
 8005ffa:	bf00      	nop

08005ffc <acc_base_configuration_downsampling_factor_set>:
 8005ffc:	b538      	push	{r3, r4, r5, lr}
 8005ffe:	460d      	mov	r5, r1
 8006000:	4604      	mov	r4, r0
 8006002:	f7ff fddd 	bl	8005bc0 <configuration_is_valid>
 8006006:	b108      	cbz	r0, 800600c <acc_base_configuration_downsampling_factor_set+0x10>
 8006008:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
 800600c:	bd38      	pop	{r3, r4, r5, pc}
 800600e:	bf00      	nop

08006010 <acc_base_configuration_noise_level_normalization_get>:
 8006010:	b510      	push	{r4, lr}
 8006012:	4604      	mov	r4, r0
 8006014:	f7ff fdd4 	bl	8005bc0 <configuration_is_valid>
 8006018:	b900      	cbnz	r0, 800601c <acc_base_configuration_noise_level_normalization_get+0xc>
 800601a:	bd10      	pop	{r4, pc}
 800601c:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
 8006020:	bd10      	pop	{r4, pc}
 8006022:	bf00      	nop

08006024 <acc_base_configuration_noise_level_normalization_set>:
 8006024:	b538      	push	{r3, r4, r5, lr}
 8006026:	460d      	mov	r5, r1
 8006028:	4604      	mov	r4, r0
 800602a:	f7ff fdc9 	bl	8005bc0 <configuration_is_valid>
 800602e:	b108      	cbz	r0, 8006034 <acc_base_configuration_noise_level_normalization_set+0x10>
 8006030:	f884 5049 	strb.w	r5, [r4, #73]	; 0x49
 8006034:	bd38      	pop	{r3, r4, r5, pc}
 8006036:	bf00      	nop

08006038 <acc_base_configuration_noise_deviation_override_get>:
 8006038:	b510      	push	{r4, lr}
 800603a:	4604      	mov	r4, r0
 800603c:	f7ff fdc0 	bl	8005bc0 <configuration_is_valid>
 8006040:	b900      	cbnz	r0, 8006044 <acc_base_configuration_noise_deviation_override_get+0xc>
 8006042:	bd10      	pop	{r4, pc}
 8006044:	f8b4 004c 	ldrh.w	r0, [r4, #76]	; 0x4c
 8006048:	bd10      	pop	{r4, pc}
 800604a:	bf00      	nop

0800604c <acc_base_configuration_asynchronous_measurement_get>:
 800604c:	b510      	push	{r4, lr}
 800604e:	4604      	mov	r4, r0
 8006050:	f7ff fdb6 	bl	8005bc0 <configuration_is_valid>
 8006054:	b900      	cbnz	r0, 8006058 <acc_base_configuration_asynchronous_measurement_get+0xc>
 8006056:	bd10      	pop	{r4, pc}
 8006058:	f894 004e 	ldrb.w	r0, [r4, #78]	; 0x4e
 800605c:	bd10      	pop	{r4, pc}
 800605e:	bf00      	nop

08006060 <acc_base_configuration_asynchronous_measurement_set>:
 8006060:	b538      	push	{r3, r4, r5, lr}
 8006062:	460d      	mov	r5, r1
 8006064:	4604      	mov	r4, r0
 8006066:	f7ff fdab 	bl	8005bc0 <configuration_is_valid>
 800606a:	b108      	cbz	r0, 8006070 <acc_base_configuration_asynchronous_measurement_set+0x10>
 800606c:	f884 504e 	strb.w	r5, [r4, #78]	; 0x4e
 8006070:	bd38      	pop	{r3, r4, r5, pc}
 8006072:	bf00      	nop

08006074 <acc_base_configuration_min_pipeline_memory_size_get>:
 8006074:	b510      	push	{r4, lr}
 8006076:	4604      	mov	r4, r0
 8006078:	f7ff fda2 	bl	8005bc0 <configuration_is_valid>
 800607c:	b900      	cbnz	r0, 8006080 <acc_base_configuration_min_pipeline_memory_size_get+0xc>
 800607e:	bd10      	pop	{r4, pc}
 8006080:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
 8006084:	bd10      	pop	{r4, pc}
 8006086:	bf00      	nop

08006088 <acc_base_configuration_min_pipeline_memory_size_set>:
 8006088:	b538      	push	{r3, r4, r5, lr}
 800608a:	460d      	mov	r5, r1
 800608c:	4604      	mov	r4, r0
 800608e:	f7ff fd97 	bl	8005bc0 <configuration_is_valid>
 8006092:	b108      	cbz	r0, 8006098 <acc_base_configuration_min_pipeline_memory_size_set+0x10>
 8006094:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 8006098:	bd38      	pop	{r3, r4, r5, pc}
 800609a:	bf00      	nop

0800609c <acc_base_configuration_maximize_signal_attenuation_get>:
 800609c:	b510      	push	{r4, lr}
 800609e:	4604      	mov	r4, r0
 80060a0:	f7ff fd8e 	bl	8005bc0 <configuration_is_valid>
 80060a4:	b900      	cbnz	r0, 80060a8 <acc_base_configuration_maximize_signal_attenuation_get+0xc>
 80060a6:	bd10      	pop	{r4, pc}
 80060a8:	f894 004a 	ldrb.w	r0, [r4, #74]	; 0x4a
 80060ac:	bd10      	pop	{r4, pc}
 80060ae:	bf00      	nop

080060b0 <acc_base_configuration_maximize_signal_attenuation_set>:
 80060b0:	b538      	push	{r3, r4, r5, lr}
 80060b2:	460d      	mov	r5, r1
 80060b4:	4604      	mov	r4, r0
 80060b6:	f7ff fd83 	bl	8005bc0 <configuration_is_valid>
 80060ba:	b108      	cbz	r0, 80060c0 <acc_base_configuration_maximize_signal_attenuation_set+0x10>
 80060bc:	f884 504a 	strb.w	r5, [r4, #74]	; 0x4a
 80060c0:	bd38      	pop	{r3, r4, r5, pc}
 80060c2:	bf00      	nop

080060c4 <acc_base_configuration_cca_get>:
 80060c4:	b570      	push	{r4, r5, r6, lr}
 80060c6:	460e      	mov	r6, r1
 80060c8:	4615      	mov	r5, r2
 80060ca:	4604      	mov	r4, r0
 80060cc:	f7ff fd78 	bl	8005bc0 <configuration_is_valid>
 80060d0:	b148      	cbz	r0, 80060e6 <acc_base_configuration_cca_get+0x22>
 80060d2:	b116      	cbz	r6, 80060da <acc_base_configuration_cca_get+0x16>
 80060d4:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 80060d8:	7033      	strb	r3, [r6, #0]
 80060da:	b115      	cbz	r5, 80060e2 <acc_base_configuration_cca_get+0x1e>
 80060dc:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 80060e0:	802b      	strh	r3, [r5, #0]
 80060e2:	f894 004f 	ldrb.w	r0, [r4, #79]	; 0x4f
 80060e6:	bd70      	pop	{r4, r5, r6, pc}

080060e8 <acc_base_configuration_cca_set>:
 80060e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ea:	460f      	mov	r7, r1
 80060ec:	4616      	mov	r6, r2
 80060ee:	461d      	mov	r5, r3
 80060f0:	4604      	mov	r4, r0
 80060f2:	f7ff fd65 	bl	8005bc0 <configuration_is_valid>
 80060f6:	b128      	cbz	r0, 8006104 <acc_base_configuration_cca_set+0x1c>
 80060f8:	f884 704f 	strb.w	r7, [r4, #79]	; 0x4f
 80060fc:	f884 6050 	strb.w	r6, [r4, #80]	; 0x50
 8006100:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
 8006104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006106:	bf00      	nop

08006108 <acc_base_configuration_mur_set>:
 8006108:	b538      	push	{r3, r4, r5, lr}
 800610a:	460d      	mov	r5, r1
 800610c:	4604      	mov	r4, r0
 800610e:	f7ff fd57 	bl	8005bc0 <configuration_is_valid>
 8006112:	b108      	cbz	r0, 8006118 <acc_base_configuration_mur_set+0x10>
 8006114:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
 8006118:	bd38      	pop	{r3, r4, r5, pc}
 800611a:	bf00      	nop

0800611c <acc_base_configuration_sampling_mode_to_string>:
 800611c:	b130      	cbz	r0, 800612c <acc_base_configuration_sampling_mode_to_string+0x10>
 800611e:	4b04      	ldr	r3, [pc, #16]	; (8006130 <acc_base_configuration_sampling_mode_to_string+0x14>)
 8006120:	4a04      	ldr	r2, [pc, #16]	; (8006134 <acc_base_configuration_sampling_mode_to_string+0x18>)
 8006122:	2801      	cmp	r0, #1
 8006124:	bf14      	ite	ne
 8006126:	4618      	movne	r0, r3
 8006128:	4610      	moveq	r0, r2
 800612a:	4770      	bx	lr
 800612c:	4802      	ldr	r0, [pc, #8]	; (8006138 <acc_base_configuration_sampling_mode_to_string+0x1c>)
 800612e:	4770      	bx	lr
 8006130:	08012b50 	.word	0x08012b50
 8006134:	0801168c 	.word	0x0801168c
 8006138:	08011688 	.word	0x08011688

0800613c <acc_base_configuration_print>:
 800613c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006140:	b08f      	sub	sp, #60	; 0x3c
 8006142:	4604      	mov	r4, r0
 8006144:	f000 f9be 	bl	80064c4 <acc_rss_integration_log_level>
 8006148:	2801      	cmp	r0, #1
 800614a:	d94a      	bls.n	80061e2 <acc_base_configuration_print+0xa6>
 800614c:	4b26      	ldr	r3, [pc, #152]	; (80061e8 <acc_base_configuration_print+0xac>)
 800614e:	4620      	mov	r0, r4
 8006150:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 8006154:	f7ff fd4a 	bl	8005bec <acc_base_configuration_sensor_get>
 8006158:	4683      	mov	fp, r0
 800615a:	4620      	mov	r0, r4
 800615c:	f7ff fdce 	bl	8005cfc <acc_base_configuration_hw_accelerated_average_samples_get>
 8006160:	4605      	mov	r5, r0
 8006162:	4620      	mov	r0, r4
 8006164:	f7ff fe7c 	bl	8005e60 <acc_base_configuration_gain_get>
 8006168:	4606      	mov	r6, r0
 800616a:	4620      	mov	r0, r4
 800616c:	f7ff fe88 	bl	8005e80 <acc_base_configuration_integrator_get>
 8006170:	4607      	mov	r7, r0
 8006172:	4620      	mov	r0, r4
 8006174:	f7ff fe98 	bl	8005ea8 <acc_base_configuration_wg_duration_get>
 8006178:	4680      	mov	r8, r0
 800617a:	4620      	mov	r0, r4
 800617c:	f7ff fea8 	bl	8005ed0 <acc_base_configuration_integrator_ramp_up_get>
 8006180:	4681      	mov	r9, r0
 8006182:	4620      	mov	r0, r4
 8006184:	f7ff fd82 	bl	8005c8c <acc_base_configuration_power_save_mode_get>
 8006188:	2804      	cmp	r0, #4
 800618a:	bf96      	itet	ls
 800618c:	4b17      	ldrls	r3, [pc, #92]	; (80061ec <acc_base_configuration_print+0xb0>)
 800618e:	4918      	ldrhi	r1, [pc, #96]	; (80061f0 <acc_base_configuration_print+0xb4>)
 8006190:	f853 1020 	ldrls.w	r1, [r3, r0, lsl #2]
 8006194:	910d      	str	r1, [sp, #52]	; 0x34
 8006196:	4620      	mov	r0, r4
 8006198:	f7ff feae 	bl	8005ef8 <acc_base_configuration_sampling_mode_get>
 800619c:	f7ff ffbe 	bl	800611c <acc_base_configuration_sampling_mode_to_string>
 80061a0:	4602      	mov	r2, r0
 80061a2:	4620      	mov	r0, r4
 80061a4:	920c      	str	r2, [sp, #48]	; 0x30
 80061a6:	f7ff fd81 	bl	8005cac <acc_base_configuration_tx_disable_get>
 80061aa:	4603      	mov	r3, r0
 80061ac:	4620      	mov	r0, r4
 80061ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80061b0:	f7ff ff10 	bl	8005fd4 <acc_base_configuration_sparse_sweeps_per_frame_get>
 80061b4:	4684      	mov	ip, r0
 80061b6:	4620      	mov	r0, r4
 80061b8:	4664      	mov	r4, ip
 80061ba:	f7ff fd8b 	bl	8005cd4 <acc_base_configuration_decrease_tx_emission_get>
 80061be:	990d      	ldr	r1, [sp, #52]	; 0x34
 80061c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80061c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061c4:	9206      	str	r2, [sp, #24]
 80061c6:	e9cd 9104 	strd	r9, r1, [sp, #16]
 80061ca:	9307      	str	r3, [sp, #28]
 80061cc:	9009      	str	r0, [sp, #36]	; 0x24
 80061ce:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80061d2:	e9cd 5600 	strd	r5, r6, [sp]
 80061d6:	4a07      	ldr	r2, [pc, #28]	; (80061f4 <acc_base_configuration_print+0xb8>)
 80061d8:	4907      	ldr	r1, [pc, #28]	; (80061f8 <acc_base_configuration_print+0xbc>)
 80061da:	9408      	str	r4, [sp, #32]
 80061dc:	465b      	mov	r3, fp
 80061de:	2002      	movs	r0, #2
 80061e0:	47d0      	blx	sl
 80061e2:	b00f      	add	sp, #60	; 0x3c
 80061e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061e8:	200004d0 	.word	0x200004d0
 80061ec:	080118a4 	.word	0x080118a4
 80061f0:	08012b50 	.word	0x08012b50
 80061f4:	08011690 	.word	0x08011690
 80061f8:	08011674 	.word	0x08011674

080061fc <acc_base_configuration_check>:
 80061fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061fe:	4605      	mov	r5, r0
 8006200:	f7ff fcde 	bl	8005bc0 <configuration_is_valid>
 8006204:	4604      	mov	r4, r0
 8006206:	b318      	cbz	r0, 8006250 <acc_base_configuration_check+0x54>
 8006208:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800620a:	2b04      	cmp	r3, #4
 800620c:	d819      	bhi.n	8006242 <acc_base_configuration_check+0x46>
 800620e:	d02d      	beq.n	800626c <acc_base_configuration_check+0x70>
 8006210:	8feb      	ldrh	r3, [r5, #62]	; 0x3e
 8006212:	2b16      	cmp	r3, #22
 8006214:	d821      	bhi.n	800625a <acc_base_configuration_check+0x5e>
 8006216:	8fab      	ldrh	r3, [r5, #60]	; 0x3c
 8006218:	3b01      	subs	r3, #1
 800621a:	b29b      	uxth	r3, r3
 800621c:	2b3e      	cmp	r3, #62	; 0x3e
 800621e:	d819      	bhi.n	8006254 <acc_base_configuration_check+0x58>
 8006220:	6bae      	ldr	r6, [r5, #56]	; 0x38
 8006222:	792b      	ldrb	r3, [r5, #4]
 8006224:	b9e6      	cbnz	r6, 8006260 <acc_base_configuration_check+0x64>
 8006226:	2b03      	cmp	r3, #3
 8006228:	d037      	beq.n	800629a <acc_base_configuration_check+0x9e>
 800622a:	2301      	movs	r3, #1
 800622c:	f885 304e 	strb.w	r3, [r5, #78]	; 0x4e
 8006230:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
 8006234:	2b06      	cmp	r3, #6
 8006236:	d00b      	beq.n	8006250 <acc_base_configuration_check+0x54>
 8006238:	2b09      	cmp	r3, #9
 800623a:	d009      	beq.n	8006250 <acc_base_configuration_check+0x54>
 800623c:	4b18      	ldr	r3, [pc, #96]	; (80062a0 <acc_base_configuration_check+0xa4>)
 800623e:	4a19      	ldr	r2, [pc, #100]	; (80062a4 <acc_base_configuration_check+0xa8>)
 8006240:	e001      	b.n	8006246 <acc_base_configuration_check+0x4a>
 8006242:	4b17      	ldr	r3, [pc, #92]	; (80062a0 <acc_base_configuration_check+0xa4>)
 8006244:	4a18      	ldr	r2, [pc, #96]	; (80062a8 <acc_base_configuration_check+0xac>)
 8006246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006248:	4918      	ldr	r1, [pc, #96]	; (80062ac <acc_base_configuration_check+0xb0>)
 800624a:	2000      	movs	r0, #0
 800624c:	4798      	blx	r3
 800624e:	2400      	movs	r4, #0
 8006250:	4620      	mov	r0, r4
 8006252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006254:	4b12      	ldr	r3, [pc, #72]	; (80062a0 <acc_base_configuration_check+0xa4>)
 8006256:	4a16      	ldr	r2, [pc, #88]	; (80062b0 <acc_base_configuration_check+0xb4>)
 8006258:	e7f5      	b.n	8006246 <acc_base_configuration_check+0x4a>
 800625a:	4b11      	ldr	r3, [pc, #68]	; (80062a0 <acc_base_configuration_check+0xa4>)
 800625c:	4a15      	ldr	r2, [pc, #84]	; (80062b4 <acc_base_configuration_check+0xb8>)
 800625e:	e7f2      	b.n	8006246 <acc_base_configuration_check+0x4a>
 8006260:	2b03      	cmp	r3, #3
 8006262:	d00c      	beq.n	800627e <acc_base_configuration_check+0x82>
 8006264:	f036 0304 	bics.w	r3, r6, #4
 8006268:	d1e2      	bne.n	8006230 <acc_base_configuration_check+0x34>
 800626a:	e7de      	b.n	800622a <acc_base_configuration_check+0x2e>
 800626c:	f000 f8a2 	bl	80063b4 <acc_rss_integration_is_hibernate_capable>
 8006270:	b160      	cbz	r0, 800628c <acc_base_configuration_check+0x90>
 8006272:	792b      	ldrb	r3, [r5, #4]
 8006274:	2b03      	cmp	r3, #3
 8006276:	d1cb      	bne.n	8006210 <acc_base_configuration_check+0x14>
 8006278:	4b09      	ldr	r3, [pc, #36]	; (80062a0 <acc_base_configuration_check+0xa4>)
 800627a:	4a0f      	ldr	r2, [pc, #60]	; (80062b8 <acc_base_configuration_check+0xbc>)
 800627c:	e7e3      	b.n	8006246 <acc_base_configuration_check+0x4a>
 800627e:	f895 704e 	ldrb.w	r7, [r5, #78]	; 0x4e
 8006282:	2f00      	cmp	r7, #0
 8006284:	d1ee      	bne.n	8006264 <acc_base_configuration_check+0x68>
 8006286:	4b06      	ldr	r3, [pc, #24]	; (80062a0 <acc_base_configuration_check+0xa4>)
 8006288:	4a0c      	ldr	r2, [pc, #48]	; (80062bc <acc_base_configuration_check+0xc0>)
 800628a:	e7dc      	b.n	8006246 <acc_base_configuration_check+0x4a>
 800628c:	4904      	ldr	r1, [pc, #16]	; (80062a0 <acc_base_configuration_check+0xa4>)
 800628e:	4a0c      	ldr	r2, [pc, #48]	; (80062c0 <acc_base_configuration_check+0xc4>)
 8006290:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 8006292:	4906      	ldr	r1, [pc, #24]	; (80062ac <acc_base_configuration_check+0xb0>)
 8006294:	4604      	mov	r4, r0
 8006296:	47a8      	blx	r5
 8006298:	e7da      	b.n	8006250 <acc_base_configuration_check+0x54>
 800629a:	4b01      	ldr	r3, [pc, #4]	; (80062a0 <acc_base_configuration_check+0xa4>)
 800629c:	4a09      	ldr	r2, [pc, #36]	; (80062c4 <acc_base_configuration_check+0xc8>)
 800629e:	e7d2      	b.n	8006246 <acc_base_configuration_check+0x4a>
 80062a0:	200004d0 	.word	0x200004d0
 80062a4:	08011868 	.word	0x08011868
 80062a8:	080116c8 	.word	0x080116c8
 80062ac:	08011674 	.word	0x08011674
 80062b0:	08011798 	.word	0x08011798
 80062b4:	08011764 	.word	0x08011764
 80062b8:	08011720 	.word	0x08011720
 80062bc:	08011828 	.word	0x08011828
 80062c0:	080116e0 	.word	0x080116e0
 80062c4:	080117ec 	.word	0x080117ec

080062c8 <acc_rss_integration_register>:
 80062c8:	b538      	push	{r3, r4, r5, lr}
 80062ca:	6943      	ldr	r3, [r0, #20]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d02b      	beq.n	8006328 <acc_rss_integration_register+0x60>
 80062d0:	6983      	ldr	r3, [r0, #24]
 80062d2:	b34b      	cbz	r3, 8006328 <acc_rss_integration_register+0x60>
 80062d4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80062d6:	b323      	cbz	r3, 8006322 <acc_rss_integration_register+0x5a>
 80062d8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80062da:	b32b      	cbz	r3, 8006328 <acc_rss_integration_register+0x60>
 80062dc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80062de:	b31b      	cbz	r3, 8006328 <acc_rss_integration_register+0x60>
 80062e0:	6883      	ldr	r3, [r0, #8]
 80062e2:	b30b      	cbz	r3, 8006328 <acc_rss_integration_register+0x60>
 80062e4:	68c3      	ldr	r3, [r0, #12]
 80062e6:	b1fb      	cbz	r3, 8006328 <acc_rss_integration_register+0x60>
 80062e8:	6903      	ldr	r3, [r0, #16]
 80062ea:	b1eb      	cbz	r3, 8006328 <acc_rss_integration_register+0x60>
 80062ec:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80062ee:	b313      	cbz	r3, 8006336 <acc_rss_integration_register+0x6e>
 80062f0:	6802      	ldr	r2, [r0, #0]
 80062f2:	2a2a      	cmp	r2, #42	; 0x2a
 80062f4:	d81a      	bhi.n	800632c <acc_rss_integration_register+0x64>
 80062f6:	6842      	ldr	r2, [r0, #4]
 80062f8:	2a0f      	cmp	r2, #15
 80062fa:	d917      	bls.n	800632c <acc_rss_integration_register+0x64>
 80062fc:	69c2      	ldr	r2, [r0, #28]
 80062fe:	b10a      	cbz	r2, 8006304 <acc_rss_integration_register+0x3c>
 8006300:	6a02      	ldr	r2, [r0, #32]
 8006302:	b19a      	cbz	r2, 800632c <acc_rss_integration_register+0x64>
 8006304:	4605      	mov	r5, r0
 8006306:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006308:	4c0c      	ldr	r4, [pc, #48]	; (800633c <acc_rss_integration_register+0x74>)
 800630a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800630c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800630e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006310:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006312:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006314:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006318:	2301      	movs	r3, #1
 800631a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800631e:	4618      	mov	r0, r3
 8006320:	bd38      	pop	{r3, r4, r5, pc}
 8006322:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006324:	2b00      	cmp	r3, #0
 8006326:	d1d7      	bne.n	80062d8 <acc_rss_integration_register+0x10>
 8006328:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800632a:	b123      	cbz	r3, 8006336 <acc_rss_integration_register+0x6e>
 800632c:	4a04      	ldr	r2, [pc, #16]	; (8006340 <acc_rss_integration_register+0x78>)
 800632e:	4905      	ldr	r1, [pc, #20]	; (8006344 <acc_rss_integration_register+0x7c>)
 8006330:	2000      	movs	r0, #0
 8006332:	4798      	blx	r3
 8006334:	2300      	movs	r3, #0
 8006336:	4618      	mov	r0, r3
 8006338:	bd38      	pop	{r3, r4, r5, pc}
 800633a:	bf00      	nop
 800633c:	200004d0 	.word	0x200004d0
 8006340:	080118b8 	.word	0x080118b8
 8006344:	080118cc 	.word	0x080118cc

08006348 <acc_rss_integration_unregister>:
 8006348:	4802      	ldr	r0, [pc, #8]	; (8006354 <acc_rss_integration_unregister+0xc>)
 800634a:	223c      	movs	r2, #60	; 0x3c
 800634c:	2100      	movs	r1, #0
 800634e:	f007 bca7 	b.w	800dca0 <memset>
 8006352:	bf00      	nop
 8006354:	200004d0 	.word	0x200004d0

08006358 <acc_rss_integration_get_sensor_count>:
 8006358:	4b01      	ldr	r3, [pc, #4]	; (8006360 <acc_rss_integration_get_sensor_count+0x8>)
 800635a:	6818      	ldr	r0, [r3, #0]
 800635c:	4770      	bx	lr
 800635e:	bf00      	nop
 8006360:	200004d0 	.word	0x200004d0

08006364 <acc_rss_integration_get_sensor_reference_frequency>:
 8006364:	4b01      	ldr	r3, [pc, #4]	; (800636c <acc_rss_integration_get_sensor_reference_frequency+0x8>)
 8006366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006368:	4718      	bx	r3
 800636a:	bf00      	nop
 800636c:	200004d0 	.word	0x200004d0

08006370 <acc_rss_integration_get_max_spi_transfer_size>:
 8006370:	4b01      	ldr	r3, [pc, #4]	; (8006378 <acc_rss_integration_get_max_spi_transfer_size+0x8>)
 8006372:	6858      	ldr	r0, [r3, #4]
 8006374:	4770      	bx	lr
 8006376:	bf00      	nop
 8006378:	200004d0 	.word	0x200004d0

0800637c <acc_rss_integration_sensor_device_power_on>:
 800637c:	4b01      	ldr	r3, [pc, #4]	; (8006384 <acc_rss_integration_sensor_device_power_on+0x8>)
 800637e:	695b      	ldr	r3, [r3, #20]
 8006380:	4718      	bx	r3
 8006382:	bf00      	nop
 8006384:	200004d0 	.word	0x200004d0

08006388 <acc_rss_integration_sensor_device_power_off>:
 8006388:	4b01      	ldr	r3, [pc, #4]	; (8006390 <acc_rss_integration_sensor_device_power_off+0x8>)
 800638a:	699b      	ldr	r3, [r3, #24]
 800638c:	4718      	bx	r3
 800638e:	bf00      	nop
 8006390:	200004d0 	.word	0x200004d0

08006394 <acc_rss_integration_sensor_device_hibernate_enter>:
 8006394:	4b02      	ldr	r3, [pc, #8]	; (80063a0 <acc_rss_integration_sensor_device_hibernate_enter+0xc>)
 8006396:	69db      	ldr	r3, [r3, #28]
 8006398:	b103      	cbz	r3, 800639c <acc_rss_integration_sensor_device_hibernate_enter+0x8>
 800639a:	4718      	bx	r3
 800639c:	4770      	bx	lr
 800639e:	bf00      	nop
 80063a0:	200004d0 	.word	0x200004d0

080063a4 <acc_rss_integration_sensor_device_hibernate_exit>:
 80063a4:	4b02      	ldr	r3, [pc, #8]	; (80063b0 <acc_rss_integration_sensor_device_hibernate_exit+0xc>)
 80063a6:	6a1b      	ldr	r3, [r3, #32]
 80063a8:	b103      	cbz	r3, 80063ac <acc_rss_integration_sensor_device_hibernate_exit+0x8>
 80063aa:	4718      	bx	r3
 80063ac:	4770      	bx	lr
 80063ae:	bf00      	nop
 80063b0:	200004d0 	.word	0x200004d0

080063b4 <acc_rss_integration_is_hibernate_capable>:
 80063b4:	4b02      	ldr	r3, [pc, #8]	; (80063c0 <acc_rss_integration_is_hibernate_capable+0xc>)
 80063b6:	69d8      	ldr	r0, [r3, #28]
 80063b8:	3800      	subs	r0, #0
 80063ba:	bf18      	it	ne
 80063bc:	2001      	movne	r0, #1
 80063be:	4770      	bx	lr
 80063c0:	200004d0 	.word	0x200004d0

080063c4 <acc_rss_integration_wait_for_sensor_interrupt>:
 80063c4:	4b01      	ldr	r3, [pc, #4]	; (80063cc <acc_rss_integration_wait_for_sensor_interrupt+0x8>)
 80063c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c8:	4718      	bx	r3
 80063ca:	bf00      	nop
 80063cc:	200004d0 	.word	0x200004d0

080063d0 <acc_rss_integration_sensor_device_transfer>:
 80063d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063d4:	4f10      	ldr	r7, [pc, #64]	; (8006418 <acc_rss_integration_sensor_device_transfer+0x48>)
 80063d6:	f8d7 e038 	ldr.w	lr, [r7, #56]	; 0x38
 80063da:	f1be 0f00 	cmp.w	lr, #0
 80063de:	d003      	beq.n	80063e8 <acc_rss_integration_sensor_device_transfer+0x18>
 80063e0:	4673      	mov	r3, lr
 80063e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063e6:	4718      	bx	r3
 80063e8:	460c      	mov	r4, r1
 80063ea:	4606      	mov	r6, r0
 80063ec:	4611      	mov	r1, r2
 80063ee:	4615      	mov	r5, r2
 80063f0:	4620      	mov	r0, r4
 80063f2:	4698      	mov	r8, r3
 80063f4:	f002 fd3a 	bl	8008e6c <acc_utils_swap16_array>
 80063f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063fa:	4630      	mov	r0, r6
 80063fc:	006a      	lsls	r2, r5, #1
 80063fe:	4621      	mov	r1, r4
 8006400:	4798      	blx	r3
 8006402:	f1b8 0f00 	cmp.w	r8, #0
 8006406:	d101      	bne.n	800640c <acc_rss_integration_sensor_device_transfer+0x3c>
 8006408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800640c:	4629      	mov	r1, r5
 800640e:	4620      	mov	r0, r4
 8006410:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006414:	f002 bd2a 	b.w	8008e6c <acc_utils_swap16_array>
 8006418:	200004d0 	.word	0x200004d0

0800641c <acc_rss_integration_mem_alloc_debug>:
 800641c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006420:	4f0c      	ldr	r7, [pc, #48]	; (8006454 <acc_rss_integration_mem_alloc_debug+0x38>)
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	4688      	mov	r8, r1
 8006426:	4616      	mov	r6, r2
 8006428:	4605      	mov	r5, r0
 800642a:	4798      	blx	r3
 800642c:	4604      	mov	r4, r0
 800642e:	b150      	cbz	r0, 8006446 <acc_rss_integration_mem_alloc_debug+0x2a>
 8006430:	4b09      	ldr	r3, [pc, #36]	; (8006458 <acc_rss_integration_mem_alloc_debug+0x3c>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	b123      	cbz	r3, 8006440 <acc_rss_integration_mem_alloc_debug+0x24>
 8006436:	689f      	ldr	r7, [r3, #8]
 8006438:	4642      	mov	r2, r8
 800643a:	4633      	mov	r3, r6
 800643c:	4629      	mov	r1, r5
 800643e:	47b8      	blx	r7
 8006440:	4620      	mov	r0, r4
 8006442:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006448:	4a04      	ldr	r2, [pc, #16]	; (800645c <acc_rss_integration_mem_alloc_debug+0x40>)
 800644a:	4905      	ldr	r1, [pc, #20]	; (8006460 <acc_rss_integration_mem_alloc_debug+0x44>)
 800644c:	4798      	blx	r3
 800644e:	4620      	mov	r0, r4
 8006450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006454:	200004d0 	.word	0x200004d0
 8006458:	2000036c 	.word	0x2000036c
 800645c:	080118dc 	.word	0x080118dc
 8006460:	080118cc 	.word	0x080118cc

08006464 <acc_rss_integration_mem_calloc_debug>:
 8006464:	b570      	push	{r4, r5, r6, lr}
 8006466:	b190      	cbz	r0, 800648e <acc_rss_integration_mem_calloc_debug+0x2a>
 8006468:	460c      	mov	r4, r1
 800646a:	4611      	mov	r1, r2
 800646c:	461a      	mov	r2, r3
 800646e:	fba0 3604 	umull	r3, r6, r0, r4
 8006472:	b97e      	cbnz	r6, 8006494 <acc_rss_integration_mem_calloc_debug+0x30>
 8006474:	fb04 f500 	mul.w	r5, r4, r0
 8006478:	4628      	mov	r0, r5
 800647a:	f7ff ffcf 	bl	800641c <acc_rss_integration_mem_alloc_debug>
 800647e:	4604      	mov	r4, r0
 8006480:	b118      	cbz	r0, 800648a <acc_rss_integration_mem_calloc_debug+0x26>
 8006482:	462a      	mov	r2, r5
 8006484:	4631      	mov	r1, r6
 8006486:	f007 fc0b 	bl	800dca0 <memset>
 800648a:	4620      	mov	r0, r4
 800648c:	bd70      	pop	{r4, r5, r6, pc}
 800648e:	4604      	mov	r4, r0
 8006490:	4620      	mov	r0, r4
 8006492:	bd70      	pop	{r4, r5, r6, pc}
 8006494:	4801      	ldr	r0, [pc, #4]	; (800649c <acc_rss_integration_mem_calloc_debug+0x38>)
 8006496:	21dd      	movs	r1, #221	; 0xdd
 8006498:	f002 fa38 	bl	800890c <acc_assert_fail>
 800649c:	080118cc 	.word	0x080118cc

080064a0 <acc_rss_integration_mem_free>:
 80064a0:	4b06      	ldr	r3, [pc, #24]	; (80064bc <acc_rss_integration_mem_free+0x1c>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	b510      	push	{r4, lr}
 80064a6:	4604      	mov	r4, r0
 80064a8:	b10b      	cbz	r3, 80064ae <acc_rss_integration_mem_free+0xe>
 80064aa:	68db      	ldr	r3, [r3, #12]
 80064ac:	4798      	blx	r3
 80064ae:	4b04      	ldr	r3, [pc, #16]	; (80064c0 <acc_rss_integration_mem_free+0x20>)
 80064b0:	4620      	mov	r0, r4
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064b8:	4718      	bx	r3
 80064ba:	bf00      	nop
 80064bc:	2000036c 	.word	0x2000036c
 80064c0:	200004d0 	.word	0x200004d0

080064c4 <acc_rss_integration_log_level>:
 80064c4:	4b01      	ldr	r3, [pc, #4]	; (80064cc <acc_rss_integration_log_level+0x8>)
 80064c6:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
 80064ca:	4770      	bx	lr
 80064cc:	200004d0 	.word	0x200004d0

080064d0 <inject_data>:
 80064d0:	3034      	adds	r0, #52	; 0x34
 80064d2:	f003 bacf 	b.w	8009a74 <acc_element_source_adc_inject_data>
 80064d6:	bf00      	nop

080064d8 <disassemble>:
 80064d8:	b538      	push	{r3, r4, r5, lr}
 80064da:	6805      	ldr	r5, [r0, #0]
 80064dc:	4604      	mov	r4, r0
 80064de:	b155      	cbz	r5, 80064f6 <disassemble+0x1e>
 80064e0:	f105 0034 	add.w	r0, r5, #52	; 0x34
 80064e4:	f003 fa76 	bl	80099d4 <acc_element_source_adc_release>
 80064e8:	f8d5 03a4 	ldr.w	r0, [r5, #932]	; 0x3a4
 80064ec:	f7ff ffd8 	bl	80064a0 <acc_rss_integration_mem_free>
 80064f0:	4628      	mov	r0, r5
 80064f2:	f7ff ffd5 	bl	80064a0 <acc_rss_integration_mem_free>
 80064f6:	4620      	mov	r0, r4
 80064f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80064fc:	f7ff bfd0 	b.w	80064a0 <acc_rss_integration_mem_free>

08006500 <produce>:
 8006500:	b510      	push	{r4, lr}
 8006502:	4604      	mov	r4, r0
 8006504:	3034      	adds	r0, #52	; 0x34
 8006506:	f003 fa73 	bl	80099f0 <acc_element_source_adc_produce>
 800650a:	b960      	cbnz	r0, 8006526 <produce+0x26>
 800650c:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 8006510:	f8d4 2348 	ldr.w	r2, [r4, #840]	; 0x348
 8006514:	6118      	str	r0, [r3, #16]
 8006516:	2101      	movs	r1, #1
 8006518:	7198      	strb	r0, [r3, #6]
 800651a:	7159      	strb	r1, [r3, #5]
 800651c:	f504 7051 	add.w	r0, r4, #836	; 0x344
 8006520:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006524:	4710      	bx	r2
 8006526:	bd10      	pop	{r4, pc}

08006528 <acc_pipeline_envelope_assemble>:
 8006528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800652c:	ed2d 8b08 	vpush	{d8-d11}
 8006530:	460e      	mov	r6, r1
 8006532:	b08b      	sub	sp, #44	; 0x2c
 8006534:	461c      	mov	r4, r3
 8006536:	2110      	movs	r1, #16
 8006538:	f44f 7380 	mov.w	r3, #256	; 0x100
 800653c:	4681      	mov	r9, r0
 800653e:	4615      	mov	r5, r2
 8006540:	2001      	movs	r0, #1
 8006542:	4ae4      	ldr	r2, [pc, #912]	; (80068d4 <acc_pipeline_envelope_assemble+0x3ac>)
 8006544:	e9cd 6403 	strd	r6, r4, [sp, #12]
 8006548:	f7ff ff8c 	bl	8006464 <acc_rss_integration_mem_calloc_debug>
 800654c:	4ae1      	ldr	r2, [pc, #900]	; (80068d4 <acc_pipeline_envelope_assemble+0x3ac>)
 800654e:	4606      	mov	r6, r0
 8006550:	f240 1301 	movw	r3, #257	; 0x101
 8006554:	f44f 716b 	mov.w	r1, #940	; 0x3ac
 8006558:	2001      	movs	r0, #1
 800655a:	f7ff ff83 	bl	8006464 <acc_rss_integration_mem_calloc_debug>
 800655e:	4604      	mov	r4, r0
 8006560:	2e00      	cmp	r6, #0
 8006562:	f000 8208 	beq.w	8006976 <acc_pipeline_envelope_assemble+0x44e>
 8006566:	2800      	cmp	r0, #0
 8006568:	f000 8205 	beq.w	8006976 <acc_pipeline_envelope_assemble+0x44e>
 800656c:	f100 0334 	add.w	r3, r0, #52	; 0x34
 8006570:	f500 7262 	add.w	r2, r0, #904	; 0x388
 8006574:	f100 0814 	add.w	r8, r0, #20
 8006578:	6030      	str	r0, [r6, #0]
 800657a:	4649      	mov	r1, r9
 800657c:	4618      	mov	r0, r3
 800657e:	9200      	str	r2, [sp, #0]
 8006580:	ee08 3a10 	vmov	s16, r3
 8006584:	462a      	mov	r2, r5
 8006586:	4643      	mov	r3, r8
 8006588:	f003 fa04 	bl	8009994 <acc_element_source_adc_init_radar_engine>
 800658c:	4681      	mov	r9, r0
 800658e:	2800      	cmp	r0, #0
 8006590:	f000 81aa 	beq.w	80068e8 <acc_pipeline_envelope_assemble+0x3c0>
 8006594:	2100      	movs	r1, #0
 8006596:	4628      	mov	r0, r5
 8006598:	f7ff fbe6 	bl	8005d68 <acc_base_configuration_time_domain_low_pass_filter_alpha_get>
 800659c:	4683      	mov	fp, r0
 800659e:	2007      	movs	r0, #7
 80065a0:	f8b4 9388 	ldrh.w	r9, [r4, #904]	; 0x388
 80065a4:	f002 f9ca 	bl	800893c <acc_element_sizeof>
 80065a8:	f8b4 a396 	ldrh.w	sl, [r4, #918]	; 0x396
 80065ac:	f8b4 3392 	ldrh.w	r3, [r4, #914]	; 0x392
 80065b0:	f8b4 2394 	ldrh.w	r2, [r4, #916]	; 0x394
 80065b4:	4453      	add	r3, sl
 80065b6:	ea4f 0a43 	mov.w	sl, r3, lsl #1
 80065ba:	0053      	lsls	r3, r2, #1
 80065bc:	459a      	cmp	sl, r3
 80065be:	bf38      	it	cc
 80065c0:	469a      	movcc	sl, r3
 80065c2:	fb00 f909 	mul.w	r9, r0, r9
 80065c6:	45ca      	cmp	sl, r9
 80065c8:	4628      	mov	r0, r5
 80065ca:	bf38      	it	cc
 80065cc:	46ca      	movcc	sl, r9
 80065ce:	f7ff fd51 	bl	8006074 <acc_base_configuration_min_pipeline_memory_size_get>
 80065d2:	4582      	cmp	sl, r0
 80065d4:	bf38      	it	cc
 80065d6:	4682      	movcc	sl, r0
 80065d8:	f8c4 a3a8 	str.w	sl, [r4, #936]	; 0x3a8
 80065dc:	f1bb 0f00 	cmp.w	fp, #0
 80065e0:	d115      	bne.n	800660e <acc_pipeline_envelope_assemble+0xe6>
 80065e2:	49bc      	ldr	r1, [pc, #752]	; (80068d4 <acc_pipeline_envelope_assemble+0x3ac>)
 80065e4:	f240 1285 	movw	r2, #389	; 0x185
 80065e8:	4650      	mov	r0, sl
 80065ea:	f7ff ff17 	bl	800641c <acc_rss_integration_mem_alloc_debug>
 80065ee:	4681      	mov	r9, r0
 80065f0:	f8c4 03a4 	str.w	r0, [r4, #932]	; 0x3a4
 80065f4:	2800      	cmp	r0, #0
 80065f6:	f040 8181 	bne.w	80068fc <acc_pipeline_envelope_assemble+0x3d4>
 80065fa:	4630      	mov	r0, r6
 80065fc:	f7ff ff6c 	bl	80064d8 <disassemble>
 8006600:	2600      	movs	r6, #0
 8006602:	4630      	mov	r0, r6
 8006604:	b00b      	add	sp, #44	; 0x2c
 8006606:	ecbd 8b08 	vpop	{d8-d11}
 800660a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800660e:	2007      	movs	r0, #7
 8006610:	f8b4 9388 	ldrh.w	r9, [r4, #904]	; 0x388
 8006614:	f002 f992 	bl	800893c <acc_element_sizeof>
 8006618:	f10a 030a 	add.w	r3, sl, #10
 800661c:	fb00 3009 	mla	r0, r0, r9, r3
 8006620:	49ac      	ldr	r1, [pc, #688]	; (80068d4 <acc_pipeline_envelope_assemble+0x3ac>)
 8006622:	f240 1285 	movw	r2, #389	; 0x185
 8006626:	f7ff fef9 	bl	800641c <acc_rss_integration_mem_alloc_debug>
 800662a:	4681      	mov	r9, r0
 800662c:	f8c4 03a4 	str.w	r0, [r4, #932]	; 0x3a4
 8006630:	2800      	cmp	r0, #0
 8006632:	d0e2      	beq.n	80065fa <acc_pipeline_envelope_assemble+0xd2>
 8006634:	f8b4 138a 	ldrh.w	r1, [r4, #906]	; 0x38a
 8006638:	9105      	str	r1, [sp, #20]
 800663a:	2007      	movs	r0, #7
 800663c:	f002 f97e 	bl	800893c <acc_element_sizeof>
 8006640:	9905      	ldr	r1, [sp, #20]
 8006642:	f10a 0204 	add.w	r2, sl, #4
 8006646:	fb00 9101 	mla	r1, r0, r1, r9
 800664a:	444a      	add	r2, r9
 800664c:	f104 0c06 	add.w	ip, r4, #6
 8006650:	1de0      	adds	r0, r4, #7
 8006652:	f104 0310 	add.w	r3, r4, #16
 8006656:	e9cd 2106 	strd	r2, r1, [sp, #24]
 800665a:	f8c4 c05c 	str.w	ip, [r4, #92]	; 0x5c
 800665e:	f104 020c 	add.w	r2, r4, #12
 8006662:	f104 0c08 	add.w	ip, r4, #8
 8006666:	6620      	str	r0, [r4, #96]	; 0x60
 8006668:	1d20      	adds	r0, r4, #4
 800666a:	e9c4 2c19 	strd	r2, ip, [r4, #100]	; 0x64
 800666e:	65a3      	str	r3, [r4, #88]	; 0x58
 8006670:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 8006674:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 8006678:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 800667c:	e9c4 9931 	strd	r9, r9, [r4, #196]	; 0xc4
 8006680:	f8c4 9048 	str.w	r9, [r4, #72]	; 0x48
 8006684:	6564      	str	r4, [r4, #84]	; 0x54
 8006686:	f8c4 9084 	str.w	r9, [r4, #132]	; 0x84
 800668a:	4628      	mov	r0, r5
 800668c:	4617      	mov	r7, r2
 800668e:	9305      	str	r3, [sp, #20]
 8006690:	f7ff fcbe 	bl	8006010 <acc_base_configuration_noise_level_normalization_get>
 8006694:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 8006698:	9907      	ldr	r1, [sp, #28]
 800669a:	b118      	cbz	r0, 80066a4 <acc_pipeline_envelope_assemble+0x17c>
 800669c:	e9c4 9941 	strd	r9, r9, [r4, #260]	; 0x104
 80066a0:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 80066a4:	e9c4 9951 	strd	r9, r9, [r4, #324]	; 0x144
 80066a8:	e9c4 9960 	strd	r9, r9, [r4, #384]	; 0x180
 80066ac:	e9c4 9971 	strd	r9, r9, [r4, #452]	; 0x1c4
 80066b0:	e9c4 9183 	strd	r9, r1, [r4, #524]	; 0x20c
 80066b4:	e9c4 1192 	strd	r1, r1, [r4, #584]	; 0x248
 80066b8:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
 80066bc:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194
 80066c0:	f8c4 71a0 	str.w	r7, [r4, #416]	; 0x1a0
 80066c4:	f8c4 31d8 	str.w	r3, [r4, #472]	; 0x1d8
 80066c8:	f8c4 3220 	str.w	r3, [r4, #544]	; 0x220
 80066cc:	f8c4 325c 	str.w	r3, [r4, #604]	; 0x25c
 80066d0:	f1bb 0f00 	cmp.w	fp, #0
 80066d4:	d007      	beq.n	80066e6 <acc_pipeline_envelope_assemble+0x1be>
 80066d6:	e9c4 12a7 	strd	r1, r2, [r4, #668]	; 0x29c
 80066da:	eb09 000a 	add.w	r0, r9, sl
 80066de:	f8c4 02a8 	str.w	r0, [r4, #680]	; 0x2a8
 80066e2:	f8c4 32b0 	str.w	r3, [r4, #688]	; 0x2b0
 80066e6:	e9c4 29b7 	strd	r2, r9, [r4, #732]	; 0x2dc
 80066ea:	e9c4 99c6 	strd	r9, r9, [r4, #792]	; 0x318
 80066ee:	f8c4 32f0 	str.w	r3, [r4, #752]	; 0x2f0
 80066f2:	f8c4 332c 	str.w	r3, [r4, #812]	; 0x32c
 80066f6:	f8c4 9354 	str.w	r9, [r4, #852]	; 0x354
 80066fa:	ee18 0a10 	vmov	r0, s16
 80066fe:	f8c4 437c 	str.w	r4, [r4, #892]	; 0x37c
 8006702:	f504 7369 	add.w	r3, r4, #932	; 0x3a4
 8006706:	4642      	mov	r2, r8
 8006708:	4629      	mov	r1, r5
 800670a:	f003 f951 	bl	80099b0 <acc_element_source_adc_init>
 800670e:	4681      	mov	r9, r0
 8006710:	2800      	cmp	r0, #0
 8006712:	f000 80e9 	beq.w	80068e8 <acc_pipeline_envelope_assemble+0x3c0>
 8006716:	f104 03b4 	add.w	r3, r4, #180	; 0xb4
 800671a:	f104 0a74 	add.w	sl, r4, #116	; 0x74
 800671e:	461f      	mov	r7, r3
 8006720:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 80068d8 <acc_pipeline_envelope_assemble+0x3b0>
 8006724:	2105      	movs	r1, #5
 8006726:	4650      	mov	r0, sl
 8006728:	ee09 3a90 	vmov	s19, r3
 800672c:	f002 f954 	bl	80089d8 <acc_element_saturation_check_init>
 8006730:	4638      	mov	r0, r7
 8006732:	2200      	movs	r2, #0
 8006734:	2105      	movs	r1, #5
 8006736:	f002 fc77 	bl	8009028 <acc_element_centering_init>
 800673a:	4628      	mov	r0, r5
 800673c:	f7ff fc68 	bl	8006010 <acc_base_configuration_noise_level_normalization_get>
 8006740:	2800      	cmp	r0, #0
 8006742:	f040 80fa 	bne.w	800693a <acc_pipeline_envelope_assemble+0x412>
 8006746:	f504 739a 	add.w	r3, r4, #308	; 0x134
 800674a:	4618      	mov	r0, r3
 800674c:	ee08 3a90 	vmov	s17, r3
 8006750:	f504 73b8 	add.w	r3, r4, #368	; 0x170
 8006754:	461f      	mov	r7, r3
 8006756:	2207      	movs	r2, #7
 8006758:	2105      	movs	r1, #5
 800675a:	ee0a 3a90 	vmov	s21, r3
 800675e:	f002 fd2f 	bl	80091c0 <acc_element_converter_init>
 8006762:	eddf 0a5d 	vldr	s1, [pc, #372]	; 80068d8 <acc_pipeline_envelope_assemble+0x3b0>
 8006766:	ed94 0a08 	vldr	s0, [r4, #32]
 800676a:	2107      	movs	r1, #7
 800676c:	4638      	mov	r0, r7
 800676e:	f002 fee9 	bl	8009544 <acc_element_iq_mixer_init>
 8006772:	f504 73da 	add.w	r3, r4, #436	; 0x1b4
 8006776:	f8b4 2390 	ldrh.w	r2, [r4, #912]	; 0x390
 800677a:	9206      	str	r2, [sp, #24]
 800677c:	461f      	mov	r7, r3
 800677e:	4628      	mov	r0, r5
 8006780:	ee0b 3a10 	vmov	s22, r3
 8006784:	f8b4 338e 	ldrh.w	r3, [r4, #910]	; 0x38e
 8006788:	9305      	str	r3, [sp, #20]
 800678a:	f7ff fad1 	bl	8005d30 <acc_base_configuration_phase_compensation_alpha_get>
 800678e:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 8006792:	4638      	mov	r0, r7
 8006794:	2107      	movs	r1, #7
 8006796:	f504 77fe 	add.w	r7, r4, #508	; 0x1fc
 800679a:	f003 f809 	bl	80097b0 <acc_element_phase_compensation_init>
 800679e:	f8b4 238c 	ldrh.w	r2, [r4, #908]	; 0x38c
 80067a2:	2107      	movs	r1, #7
 80067a4:	4638      	mov	r0, r7
 80067a6:	f002 fd7d 	bl	80092a4 <acc_element_crop_init>
 80067aa:	4628      	mov	r0, r5
 80067ac:	f7ff faf8 	bl	8005da0 <acc_base_configuration_filter_demodulated_data_get>
 80067b0:	f504 7b0e 	add.w	fp, r4, #568	; 0x238
 80067b4:	9005      	str	r0, [sp, #20]
 80067b6:	4628      	mov	r0, r5
 80067b8:	f7ff fb02 	bl	8005dc0 <acc_base_configuration_demodulation_filter_cutoff_freq_ratio_get>
 80067bc:	2107      	movs	r1, #7
 80067be:	9a05      	ldr	r2, [sp, #20]
 80067c0:	4643      	mov	r3, r8
 80067c2:	4658      	mov	r0, fp
 80067c4:	f002 fdd0 	bl	8009368 <acc_element_depth_domain_low_pass_filter_init>
 80067c8:	a909      	add	r1, sp, #36	; 0x24
 80067ca:	4628      	mov	r0, r5
 80067cc:	ee09 7a10 	vmov	s18, r7
 80067d0:	f7ff faca 	bl	8005d68 <acc_base_configuration_time_domain_low_pass_filter_alpha_get>
 80067d4:	2800      	cmp	r0, #0
 80067d6:	f040 80a8 	bne.w	800692a <acc_pipeline_envelope_assemble+0x402>
 80067da:	f504 7933 	add.w	r9, r4, #716	; 0x2cc
 80067de:	2107      	movs	r1, #7
 80067e0:	4648      	mov	r0, r9
 80067e2:	f504 7842 	add.w	r8, r4, #776	; 0x308
 80067e6:	f002 fbb9 	bl	8008f5c <acc_element_abs_init>
 80067ea:	f504 7351 	add.w	r3, r4, #836	; 0x344
 80067ee:	2202      	movs	r2, #2
 80067f0:	2104 