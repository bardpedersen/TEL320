
NUCLEO-L476RG_A111.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012cc0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005cd0  08012e50  08012e50  00022e50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018b20  08018b20  00030368  2**0
                  CONTENTS
  4 .ARM          00000008  08018b20  08018b20  00028b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018b28  08018b28  00030368  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018b28  08018b28  00028b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018b2c  08018b2c  00028b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000368  20000000  08018b30  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  20000368  08018e98  00030368  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000067c  08018e98  0003067c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030368  2**0
                  CONTENTS, READONLY
 12 .comment      0000008f  00000000  00000000  00030398  2**0
                  CONTENTS, READONLY
 13 .debug_info   00061b2e  00000000  00000000  00030427  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000dfd2  00000000  00000000  00091f55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002110  00000000  00000000  0009ff28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000984  00000000  00000000  000a2038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000281ee  00000000  00000000  000a29bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00027cd4  00000000  00000000  000cabaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f8dfc  00000000  00000000  000f287e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000087f0  00000000  00000000  001eb67c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001f3e6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000198a5  00000000  00000000  001f3ecf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00003a10  00000000  00000000  0020d774  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000368 	.word	0x20000368
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08012e38 	.word	0x08012e38

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000036c 	.word	0x2000036c
 80001cc:	08012e38 	.word	0x08012e38

080001d0 <acc_alg_biquad_q3_12_complex_direct_form_1_reverse>:
 80001d0:	f06f 0c03 	mvn.w	ip, #3
 80001d4:	3904      	subs	r1, #4
 80001d6:	e004      	b.n	80001e2 <head_complex>

080001d8 <acc_alg_biquad_q3_12_complex_direct_form_1>:
 80001d8:	f04f 0c04 	mov.w	ip, #4
 80001dc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80001e0:	4252      	negs	r2, r2

080001e2 <head_complex>:
 80001e2:	0092      	lsls	r2, r2, #2
 80001e4:	d100      	bne.n	80001e8 <init_complex>
 80001e6:	4770      	bx	lr

080001e8 <init_complex>:
 80001e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001ec:	eac3 4603 	pkhbt	r6, r3, r3, lsl #16
 80001f0:	eac3 4723 	pkhtb	r7, r3, r3, asr #16
 80001f4:	f8b0 a000 	ldrh.w	sl, [r0]
 80001f8:	8844      	ldrh	r4, [r0, #2]
 80001fa:	8883      	ldrh	r3, [r0, #4]
 80001fc:	88c5      	ldrh	r5, [r0, #6]
 80001fe:	8900      	ldrh	r0, [r0, #8]
 8000200:	f5c5 4570 	rsb	r5, r5, #61440	; 0xf000
 8000204:	eac3 4e00 	pkhbt	lr, r3, r0, lsl #16
 8000208:	4663      	mov	r3, ip
 800020a:	eac4 4c05 	pkhbt	ip, r4, r5, lsl #16
 800020e:	b234      	sxth	r4, r6
 8000210:	b23d      	sxth	r5, r7
 8000212:	ea4f 3804 	mov.w	r8, r4, lsl #12
 8000216:	ea4f 3905 	mov.w	r9, r5, lsl #12
 800021a:	0034      	movs	r4, r6
 800021c:	003d      	movs	r5, r7

0800021e <loop_complex>:
 800021e:	5888      	ldr	r0, [r1, r2]
 8000220:	fb1a 8800 	smlabb	r8, sl, r0, r8
 8000224:	fb1a 9910 	smlabt	r9, sl, r0, r9
 8000228:	fb2c 8804 	smlad	r8, ip, r4, r8
 800022c:	fb2c 9915 	smladx	r9, ip, r5, r9
 8000230:	fb4e 8806 	smlsd	r8, lr, r6, r8
 8000234:	fb4e 9917 	smlsdx	r9, lr, r7, r9
 8000238:	0026      	movs	r6, r4
 800023a:	002f      	movs	r7, r5
 800023c:	eac0 1408 	pkhbt	r4, r0, r8, lsl #4
 8000240:	eac0 3529 	pkhtb	r5, r0, r9, asr #12
 8000244:	0428      	lsls	r0, r5, #16
 8000246:	eac0 4024 	pkhtb	r0, r0, r4, asr #16
 800024a:	5088      	str	r0, [r1, r2]
 800024c:	18d2      	adds	r2, r2, r3
 800024e:	d1e6      	bne.n	800021e <loop_complex>
 8000250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08000254 <acc_alg_biquad_q3_12_direct_form_1_reverse>:
 8000254:	f06f 0c01 	mvn.w	ip, #1
 8000258:	3902      	subs	r1, #2
 800025a:	e004      	b.n	8000266 <head_real>

0800025c <acc_alg_biquad_q3_12_direct_form_1>:
 800025c:	f05f 0c02 	movs.w	ip, #2
 8000260:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8000264:	4252      	negs	r2, r2

08000266 <head_real>:
 8000266:	0052      	lsls	r2, r2, #1
 8000268:	d100      	bne.n	800026c <init_real>
 800026a:	4770      	bx	lr

0800026c <init_real>:
 800026c:	e92d 44f0 	stmdb	sp!, {r4, r5, r6, r7, sl, lr}
 8000270:	4667      	mov	r7, ip
 8000272:	f8b0 a000 	ldrh.w	sl, [r0]
 8000276:	8844      	ldrh	r4, [r0, #2]
 8000278:	8885      	ldrh	r5, [r0, #4]
 800027a:	88c6      	ldrh	r6, [r0, #6]
 800027c:	8900      	ldrh	r0, [r0, #8]
 800027e:	f5c6 4670 	rsb	r6, r6, #61440	; 0xf000
 8000282:	eac4 4c06 	pkhbt	ip, r4, r6, lsl #16
 8000286:	eac5 4e00 	pkhbt	lr, r5, r0, lsl #16
 800028a:	eac3 4403 	pkhbt	r4, r3, r3, lsl #16
 800028e:	0025      	movs	r5, r4
 8000290:	b21b      	sxth	r3, r3
 8000292:	031e      	lsls	r6, r3, #12

08000294 <loop_real>:
 8000294:	5a88      	ldrh	r0, [r1, r2]
 8000296:	fb1a 6600 	smlabb	r6, sl, r0, r6
 800029a:	fb2c 6604 	smlad	r6, ip, r4, r6
 800029e:	fb4e 6605 	smlsd	r6, lr, r5, r6
 80002a2:	0025      	movs	r5, r4
 80002a4:	eac0 1406 	pkhbt	r4, r0, r6, lsl #4
 80002a8:	1420      	asrs	r0, r4, #16
 80002aa:	5288      	strh	r0, [r1, r2]
 80002ac:	19d2      	adds	r2, r2, r7
 80002ae:	d1f1      	bne.n	8000294 <loop_real>
 80002b0:	e8bd 84f0 	ldmia.w	sp!, {r4, r5, r6, r7, sl, pc}
	...

080002c0 <memchr>:
 80002c0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002c4:	2a10      	cmp	r2, #16
 80002c6:	db2b      	blt.n	8000320 <memchr+0x60>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	d008      	beq.n	80002e0 <memchr+0x20>
 80002ce:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d2:	3a01      	subs	r2, #1
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d02d      	beq.n	8000334 <memchr+0x74>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	b342      	cbz	r2, 8000330 <memchr+0x70>
 80002de:	d1f6      	bne.n	80002ce <memchr+0xe>
 80002e0:	b4f0      	push	{r4, r5, r6, r7}
 80002e2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002e6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ea:	f022 0407 	bic.w	r4, r2, #7
 80002ee:	f07f 0700 	mvns.w	r7, #0
 80002f2:	2300      	movs	r3, #0
 80002f4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002f8:	3c08      	subs	r4, #8
 80002fa:	ea85 0501 	eor.w	r5, r5, r1
 80002fe:	ea86 0601 	eor.w	r6, r6, r1
 8000302:	fa85 f547 	uadd8	r5, r5, r7
 8000306:	faa3 f587 	sel	r5, r3, r7
 800030a:	fa86 f647 	uadd8	r6, r6, r7
 800030e:	faa5 f687 	sel	r6, r5, r7
 8000312:	b98e      	cbnz	r6, 8000338 <memchr+0x78>
 8000314:	d1ee      	bne.n	80002f4 <memchr+0x34>
 8000316:	bcf0      	pop	{r4, r5, r6, r7}
 8000318:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800031c:	f002 0207 	and.w	r2, r2, #7
 8000320:	b132      	cbz	r2, 8000330 <memchr+0x70>
 8000322:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000326:	3a01      	subs	r2, #1
 8000328:	ea83 0301 	eor.w	r3, r3, r1
 800032c:	b113      	cbz	r3, 8000334 <memchr+0x74>
 800032e:	d1f8      	bne.n	8000322 <memchr+0x62>
 8000330:	2000      	movs	r0, #0
 8000332:	4770      	bx	lr
 8000334:	3801      	subs	r0, #1
 8000336:	4770      	bx	lr
 8000338:	2d00      	cmp	r5, #0
 800033a:	bf06      	itte	eq
 800033c:	4635      	moveq	r5, r6
 800033e:	3803      	subeq	r0, #3
 8000340:	3807      	subne	r0, #7
 8000342:	f015 0f01 	tst.w	r5, #1
 8000346:	d107      	bne.n	8000358 <memchr+0x98>
 8000348:	3001      	adds	r0, #1
 800034a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800034e:	bf02      	ittt	eq
 8000350:	3001      	addeq	r0, #1
 8000352:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000356:	3001      	addeq	r0, #1
 8000358:	bcf0      	pop	{r4, r5, r6, r7}
 800035a:	3801      	subs	r0, #1
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop

08000360 <strlen>:
 8000360:	4603      	mov	r3, r0
 8000362:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000366:	2a00      	cmp	r2, #0
 8000368:	d1fb      	bne.n	8000362 <strlen+0x2>
 800036a:	1a18      	subs	r0, r3, r0
 800036c:	3801      	subs	r0, #1
 800036e:	4770      	bx	lr

08000370 <__aeabi_drsub>:
 8000370:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000374:	e002      	b.n	800037c <__adddf3>
 8000376:	bf00      	nop

08000378 <__aeabi_dsub>:
 8000378:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800037c <__adddf3>:
 800037c:	b530      	push	{r4, r5, lr}
 800037e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000382:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	bf1f      	itttt	ne
 8000392:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000396:	ea55 0c02 	orrsne.w	ip, r5, r2
 800039a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800039e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003a2:	f000 80e2 	beq.w	800056a <__adddf3+0x1ee>
 80003a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ae:	bfb8      	it	lt
 80003b0:	426d      	neglt	r5, r5
 80003b2:	dd0c      	ble.n	80003ce <__adddf3+0x52>
 80003b4:	442c      	add	r4, r5
 80003b6:	ea80 0202 	eor.w	r2, r0, r2
 80003ba:	ea81 0303 	eor.w	r3, r1, r3
 80003be:	ea82 0000 	eor.w	r0, r2, r0
 80003c2:	ea83 0101 	eor.w	r1, r3, r1
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	2d36      	cmp	r5, #54	; 0x36
 80003d0:	bf88      	it	hi
 80003d2:	bd30      	pophi	{r4, r5, pc}
 80003d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003e4:	d002      	beq.n	80003ec <__adddf3+0x70>
 80003e6:	4240      	negs	r0, r0
 80003e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003f8:	d002      	beq.n	8000400 <__adddf3+0x84>
 80003fa:	4252      	negs	r2, r2
 80003fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000400:	ea94 0f05 	teq	r4, r5
 8000404:	f000 80a7 	beq.w	8000556 <__adddf3+0x1da>
 8000408:	f1a4 0401 	sub.w	r4, r4, #1
 800040c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000410:	db0d      	blt.n	800042e <__adddf3+0xb2>
 8000412:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000416:	fa22 f205 	lsr.w	r2, r2, r5
 800041a:	1880      	adds	r0, r0, r2
 800041c:	f141 0100 	adc.w	r1, r1, #0
 8000420:	fa03 f20e 	lsl.w	r2, r3, lr
 8000424:	1880      	adds	r0, r0, r2
 8000426:	fa43 f305 	asr.w	r3, r3, r5
 800042a:	4159      	adcs	r1, r3
 800042c:	e00e      	b.n	800044c <__adddf3+0xd0>
 800042e:	f1a5 0520 	sub.w	r5, r5, #32
 8000432:	f10e 0e20 	add.w	lr, lr, #32
 8000436:	2a01      	cmp	r2, #1
 8000438:	fa03 fc0e 	lsl.w	ip, r3, lr
 800043c:	bf28      	it	cs
 800043e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000442:	fa43 f305 	asr.w	r3, r3, r5
 8000446:	18c0      	adds	r0, r0, r3
 8000448:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	d507      	bpl.n	8000462 <__adddf3+0xe6>
 8000452:	f04f 0e00 	mov.w	lr, #0
 8000456:	f1dc 0c00 	rsbs	ip, ip, #0
 800045a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800045e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000462:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000466:	d31b      	bcc.n	80004a0 <__adddf3+0x124>
 8000468:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800046c:	d30c      	bcc.n	8000488 <__adddf3+0x10c>
 800046e:	0849      	lsrs	r1, r1, #1
 8000470:	ea5f 0030 	movs.w	r0, r0, rrx
 8000474:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000478:	f104 0401 	add.w	r4, r4, #1
 800047c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000480:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000484:	f080 809a 	bcs.w	80005bc <__adddf3+0x240>
 8000488:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800048c:	bf08      	it	eq
 800048e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000492:	f150 0000 	adcs.w	r0, r0, #0
 8000496:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800049a:	ea41 0105 	orr.w	r1, r1, r5
 800049e:	bd30      	pop	{r4, r5, pc}
 80004a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004a4:	4140      	adcs	r0, r0
 80004a6:	eb41 0101 	adc.w	r1, r1, r1
 80004aa:	3c01      	subs	r4, #1
 80004ac:	bf28      	it	cs
 80004ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004b2:	d2e9      	bcs.n	8000488 <__adddf3+0x10c>
 80004b4:	f091 0f00 	teq	r1, #0
 80004b8:	bf04      	itt	eq
 80004ba:	4601      	moveq	r1, r0
 80004bc:	2000      	moveq	r0, #0
 80004be:	fab1 f381 	clz	r3, r1
 80004c2:	bf08      	it	eq
 80004c4:	3320      	addeq	r3, #32
 80004c6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ca:	f1b3 0220 	subs.w	r2, r3, #32
 80004ce:	da0c      	bge.n	80004ea <__adddf3+0x16e>
 80004d0:	320c      	adds	r2, #12
 80004d2:	dd08      	ble.n	80004e6 <__adddf3+0x16a>
 80004d4:	f102 0c14 	add.w	ip, r2, #20
 80004d8:	f1c2 020c 	rsb	r2, r2, #12
 80004dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80004e0:	fa21 f102 	lsr.w	r1, r1, r2
 80004e4:	e00c      	b.n	8000500 <__adddf3+0x184>
 80004e6:	f102 0214 	add.w	r2, r2, #20
 80004ea:	bfd8      	it	le
 80004ec:	f1c2 0c20 	rsble	ip, r2, #32
 80004f0:	fa01 f102 	lsl.w	r1, r1, r2
 80004f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004f8:	bfdc      	itt	le
 80004fa:	ea41 010c 	orrle.w	r1, r1, ip
 80004fe:	4090      	lslle	r0, r2
 8000500:	1ae4      	subs	r4, r4, r3
 8000502:	bfa2      	ittt	ge
 8000504:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000508:	4329      	orrge	r1, r5
 800050a:	bd30      	popge	{r4, r5, pc}
 800050c:	ea6f 0404 	mvn.w	r4, r4
 8000510:	3c1f      	subs	r4, #31
 8000512:	da1c      	bge.n	800054e <__adddf3+0x1d2>
 8000514:	340c      	adds	r4, #12
 8000516:	dc0e      	bgt.n	8000536 <__adddf3+0x1ba>
 8000518:	f104 0414 	add.w	r4, r4, #20
 800051c:	f1c4 0220 	rsb	r2, r4, #32
 8000520:	fa20 f004 	lsr.w	r0, r0, r4
 8000524:	fa01 f302 	lsl.w	r3, r1, r2
 8000528:	ea40 0003 	orr.w	r0, r0, r3
 800052c:	fa21 f304 	lsr.w	r3, r1, r4
 8000530:	ea45 0103 	orr.w	r1, r5, r3
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	f1c4 040c 	rsb	r4, r4, #12
 800053a:	f1c4 0220 	rsb	r2, r4, #32
 800053e:	fa20 f002 	lsr.w	r0, r0, r2
 8000542:	fa01 f304 	lsl.w	r3, r1, r4
 8000546:	ea40 0003 	orr.w	r0, r0, r3
 800054a:	4629      	mov	r1, r5
 800054c:	bd30      	pop	{r4, r5, pc}
 800054e:	fa21 f004 	lsr.w	r0, r1, r4
 8000552:	4629      	mov	r1, r5
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f094 0f00 	teq	r4, #0
 800055a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800055e:	bf06      	itte	eq
 8000560:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000564:	3401      	addeq	r4, #1
 8000566:	3d01      	subne	r5, #1
 8000568:	e74e      	b.n	8000408 <__adddf3+0x8c>
 800056a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800056e:	bf18      	it	ne
 8000570:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000574:	d029      	beq.n	80005ca <__adddf3+0x24e>
 8000576:	ea94 0f05 	teq	r4, r5
 800057a:	bf08      	it	eq
 800057c:	ea90 0f02 	teqeq	r0, r2
 8000580:	d005      	beq.n	800058e <__adddf3+0x212>
 8000582:	ea54 0c00 	orrs.w	ip, r4, r0
 8000586:	bf04      	itt	eq
 8000588:	4619      	moveq	r1, r3
 800058a:	4610      	moveq	r0, r2
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	ea91 0f03 	teq	r1, r3
 8000592:	bf1e      	ittt	ne
 8000594:	2100      	movne	r1, #0
 8000596:	2000      	movne	r0, #0
 8000598:	bd30      	popne	{r4, r5, pc}
 800059a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800059e:	d105      	bne.n	80005ac <__adddf3+0x230>
 80005a0:	0040      	lsls	r0, r0, #1
 80005a2:	4149      	adcs	r1, r1
 80005a4:	bf28      	it	cs
 80005a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005aa:	bd30      	pop	{r4, r5, pc}
 80005ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005b0:	bf3c      	itt	cc
 80005b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005b6:	bd30      	popcc	{r4, r5, pc}
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005c4:	f04f 0000 	mov.w	r0, #0
 80005c8:	bd30      	pop	{r4, r5, pc}
 80005ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ce:	bf1a      	itte	ne
 80005d0:	4619      	movne	r1, r3
 80005d2:	4610      	movne	r0, r2
 80005d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005d8:	bf1c      	itt	ne
 80005da:	460b      	movne	r3, r1
 80005dc:	4602      	movne	r2, r0
 80005de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005e2:	bf06      	itte	eq
 80005e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005e8:	ea91 0f03 	teqeq	r1, r3
 80005ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	bf00      	nop

080005f4 <__aeabi_ui2d>:
 80005f4:	f090 0f00 	teq	r0, #0
 80005f8:	bf04      	itt	eq
 80005fa:	2100      	moveq	r1, #0
 80005fc:	4770      	bxeq	lr
 80005fe:	b530      	push	{r4, r5, lr}
 8000600:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000604:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000608:	f04f 0500 	mov.w	r5, #0
 800060c:	f04f 0100 	mov.w	r1, #0
 8000610:	e750      	b.n	80004b4 <__adddf3+0x138>
 8000612:	bf00      	nop

08000614 <__aeabi_i2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800062c:	bf48      	it	mi
 800062e:	4240      	negmi	r0, r0
 8000630:	f04f 0100 	mov.w	r1, #0
 8000634:	e73e      	b.n	80004b4 <__adddf3+0x138>
 8000636:	bf00      	nop

08000638 <__aeabi_f2d>:
 8000638:	0042      	lsls	r2, r0, #1
 800063a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800063e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000642:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000646:	bf1f      	itttt	ne
 8000648:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800064c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000650:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000654:	4770      	bxne	lr
 8000656:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800065a:	bf08      	it	eq
 800065c:	4770      	bxeq	lr
 800065e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000662:	bf04      	itt	eq
 8000664:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000668:	4770      	bxeq	lr
 800066a:	b530      	push	{r4, r5, lr}
 800066c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000670:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000674:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000678:	e71c      	b.n	80004b4 <__adddf3+0x138>
 800067a:	bf00      	nop

0800067c <__aeabi_ul2d>:
 800067c:	ea50 0201 	orrs.w	r2, r0, r1
 8000680:	bf08      	it	eq
 8000682:	4770      	bxeq	lr
 8000684:	b530      	push	{r4, r5, lr}
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	e00a      	b.n	80006a2 <__aeabi_l2d+0x16>

0800068c <__aeabi_l2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800069a:	d502      	bpl.n	80006a2 <__aeabi_l2d+0x16>
 800069c:	4240      	negs	r0, r0
 800069e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ae:	f43f aed8 	beq.w	8000462 <__adddf3+0xe6>
 80006b2:	f04f 0203 	mov.w	r2, #3
 80006b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ba:	bf18      	it	ne
 80006bc:	3203      	addne	r2, #3
 80006be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006c2:	bf18      	it	ne
 80006c4:	3203      	addne	r2, #3
 80006c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ca:	f1c2 0320 	rsb	r3, r2, #32
 80006ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006da:	ea40 000e 	orr.w	r0, r0, lr
 80006de:	fa21 f102 	lsr.w	r1, r1, r2
 80006e2:	4414      	add	r4, r2
 80006e4:	e6bd      	b.n	8000462 <__adddf3+0xe6>
 80006e6:	bf00      	nop

080006e8 <__aeabi_dmul>:
 80006e8:	b570      	push	{r4, r5, r6, lr}
 80006ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006f6:	bf1d      	ittte	ne
 80006f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006fc:	ea94 0f0c 	teqne	r4, ip
 8000700:	ea95 0f0c 	teqne	r5, ip
 8000704:	f000 f8de 	bleq	80008c4 <__aeabi_dmul+0x1dc>
 8000708:	442c      	add	r4, r5
 800070a:	ea81 0603 	eor.w	r6, r1, r3
 800070e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000712:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000716:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800071a:	bf18      	it	ne
 800071c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000720:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000724:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000728:	d038      	beq.n	800079c <__aeabi_dmul+0xb4>
 800072a:	fba0 ce02 	umull	ip, lr, r0, r2
 800072e:	f04f 0500 	mov.w	r5, #0
 8000732:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000736:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800073a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800073e:	f04f 0600 	mov.w	r6, #0
 8000742:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000746:	f09c 0f00 	teq	ip, #0
 800074a:	bf18      	it	ne
 800074c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000750:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000754:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000758:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800075c:	d204      	bcs.n	8000768 <__aeabi_dmul+0x80>
 800075e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000762:	416d      	adcs	r5, r5
 8000764:	eb46 0606 	adc.w	r6, r6, r6
 8000768:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800076c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000770:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000774:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000778:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800077c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000780:	bf88      	it	hi
 8000782:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000786:	d81e      	bhi.n	80007c6 <__aeabi_dmul+0xde>
 8000788:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800078c:	bf08      	it	eq
 800078e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000792:	f150 0000 	adcs.w	r0, r0, #0
 8000796:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007a0:	ea46 0101 	orr.w	r1, r6, r1
 80007a4:	ea40 0002 	orr.w	r0, r0, r2
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007b0:	bfc2      	ittt	gt
 80007b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ba:	bd70      	popgt	{r4, r5, r6, pc}
 80007bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007c0:	f04f 0e00 	mov.w	lr, #0
 80007c4:	3c01      	subs	r4, #1
 80007c6:	f300 80ab 	bgt.w	8000920 <__aeabi_dmul+0x238>
 80007ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007ce:	bfde      	ittt	le
 80007d0:	2000      	movle	r0, #0
 80007d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007d6:	bd70      	pople	{r4, r5, r6, pc}
 80007d8:	f1c4 0400 	rsb	r4, r4, #0
 80007dc:	3c20      	subs	r4, #32
 80007de:	da35      	bge.n	800084c <__aeabi_dmul+0x164>
 80007e0:	340c      	adds	r4, #12
 80007e2:	dc1b      	bgt.n	800081c <__aeabi_dmul+0x134>
 80007e4:	f104 0414 	add.w	r4, r4, #20
 80007e8:	f1c4 0520 	rsb	r5, r4, #32
 80007ec:	fa00 f305 	lsl.w	r3, r0, r5
 80007f0:	fa20 f004 	lsr.w	r0, r0, r4
 80007f4:	fa01 f205 	lsl.w	r2, r1, r5
 80007f8:	ea40 0002 	orr.w	r0, r0, r2
 80007fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000800:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000804:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000808:	fa21 f604 	lsr.w	r6, r1, r4
 800080c:	eb42 0106 	adc.w	r1, r2, r6
 8000810:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000814:	bf08      	it	eq
 8000816:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800081a:	bd70      	pop	{r4, r5, r6, pc}
 800081c:	f1c4 040c 	rsb	r4, r4, #12
 8000820:	f1c4 0520 	rsb	r5, r4, #32
 8000824:	fa00 f304 	lsl.w	r3, r0, r4
 8000828:	fa20 f005 	lsr.w	r0, r0, r5
 800082c:	fa01 f204 	lsl.w	r2, r1, r4
 8000830:	ea40 0002 	orr.w	r0, r0, r2
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800083c:	f141 0100 	adc.w	r1, r1, #0
 8000840:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000844:	bf08      	it	eq
 8000846:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800084a:	bd70      	pop	{r4, r5, r6, pc}
 800084c:	f1c4 0520 	rsb	r5, r4, #32
 8000850:	fa00 f205 	lsl.w	r2, r0, r5
 8000854:	ea4e 0e02 	orr.w	lr, lr, r2
 8000858:	fa20 f304 	lsr.w	r3, r0, r4
 800085c:	fa01 f205 	lsl.w	r2, r1, r5
 8000860:	ea43 0302 	orr.w	r3, r3, r2
 8000864:	fa21 f004 	lsr.w	r0, r1, r4
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	fa21 f204 	lsr.w	r2, r1, r4
 8000870:	ea20 0002 	bic.w	r0, r0, r2
 8000874:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000878:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800087c:	bf08      	it	eq
 800087e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f094 0f00 	teq	r4, #0
 8000888:	d10f      	bne.n	80008aa <__aeabi_dmul+0x1c2>
 800088a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800088e:	0040      	lsls	r0, r0, #1
 8000890:	eb41 0101 	adc.w	r1, r1, r1
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	bf08      	it	eq
 800089a:	3c01      	subeq	r4, #1
 800089c:	d0f7      	beq.n	800088e <__aeabi_dmul+0x1a6>
 800089e:	ea41 0106 	orr.w	r1, r1, r6
 80008a2:	f095 0f00 	teq	r5, #0
 80008a6:	bf18      	it	ne
 80008a8:	4770      	bxne	lr
 80008aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008ae:	0052      	lsls	r2, r2, #1
 80008b0:	eb43 0303 	adc.w	r3, r3, r3
 80008b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008b8:	bf08      	it	eq
 80008ba:	3d01      	subeq	r5, #1
 80008bc:	d0f7      	beq.n	80008ae <__aeabi_dmul+0x1c6>
 80008be:	ea43 0306 	orr.w	r3, r3, r6
 80008c2:	4770      	bx	lr
 80008c4:	ea94 0f0c 	teq	r4, ip
 80008c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008cc:	bf18      	it	ne
 80008ce:	ea95 0f0c 	teqne	r5, ip
 80008d2:	d00c      	beq.n	80008ee <__aeabi_dmul+0x206>
 80008d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d8:	bf18      	it	ne
 80008da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008de:	d1d1      	bne.n	8000884 <__aeabi_dmul+0x19c>
 80008e0:	ea81 0103 	eor.w	r1, r1, r3
 80008e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008e8:	f04f 0000 	mov.w	r0, #0
 80008ec:	bd70      	pop	{r4, r5, r6, pc}
 80008ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f2:	bf06      	itte	eq
 80008f4:	4610      	moveq	r0, r2
 80008f6:	4619      	moveq	r1, r3
 80008f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fc:	d019      	beq.n	8000932 <__aeabi_dmul+0x24a>
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	d102      	bne.n	800090a <__aeabi_dmul+0x222>
 8000904:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000908:	d113      	bne.n	8000932 <__aeabi_dmul+0x24a>
 800090a:	ea95 0f0c 	teq	r5, ip
 800090e:	d105      	bne.n	800091c <__aeabi_dmul+0x234>
 8000910:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000914:	bf1c      	itt	ne
 8000916:	4610      	movne	r0, r2
 8000918:	4619      	movne	r1, r3
 800091a:	d10a      	bne.n	8000932 <__aeabi_dmul+0x24a>
 800091c:	ea81 0103 	eor.w	r1, r1, r3
 8000920:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000924:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000928:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800092c:	f04f 0000 	mov.w	r0, #0
 8000930:	bd70      	pop	{r4, r5, r6, pc}
 8000932:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000936:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800093a:	bd70      	pop	{r4, r5, r6, pc}

0800093c <__aeabi_ddiv>:
 800093c:	b570      	push	{r4, r5, r6, lr}
 800093e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000942:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000946:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800094a:	bf1d      	ittte	ne
 800094c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000950:	ea94 0f0c 	teqne	r4, ip
 8000954:	ea95 0f0c 	teqne	r5, ip
 8000958:	f000 f8a7 	bleq	8000aaa <__aeabi_ddiv+0x16e>
 800095c:	eba4 0405 	sub.w	r4, r4, r5
 8000960:	ea81 0e03 	eor.w	lr, r1, r3
 8000964:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000968:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800096c:	f000 8088 	beq.w	8000a80 <__aeabi_ddiv+0x144>
 8000970:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000974:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000978:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800097c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000980:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000984:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000988:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800098c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000990:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000994:	429d      	cmp	r5, r3
 8000996:	bf08      	it	eq
 8000998:	4296      	cmpeq	r6, r2
 800099a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800099e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009a2:	d202      	bcs.n	80009aa <__aeabi_ddiv+0x6e>
 80009a4:	085b      	lsrs	r3, r3, #1
 80009a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009aa:	1ab6      	subs	r6, r6, r2
 80009ac:	eb65 0503 	sbc.w	r5, r5, r3
 80009b0:	085b      	lsrs	r3, r3, #1
 80009b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009be:	ebb6 0e02 	subs.w	lr, r6, r2
 80009c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009c6:	bf22      	ittt	cs
 80009c8:	1ab6      	subcs	r6, r6, r2
 80009ca:	4675      	movcs	r5, lr
 80009cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80009d0:	085b      	lsrs	r3, r3, #1
 80009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009de:	bf22      	ittt	cs
 80009e0:	1ab6      	subcs	r6, r6, r2
 80009e2:	4675      	movcs	r5, lr
 80009e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009e8:	085b      	lsrs	r3, r3, #1
 80009ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80009f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009f6:	bf22      	ittt	cs
 80009f8:	1ab6      	subcs	r6, r6, r2
 80009fa:	4675      	movcs	r5, lr
 80009fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a00:	085b      	lsrs	r3, r3, #1
 8000a02:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a06:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a0a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a0e:	bf22      	ittt	cs
 8000a10:	1ab6      	subcs	r6, r6, r2
 8000a12:	4675      	movcs	r5, lr
 8000a14:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a18:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a1c:	d018      	beq.n	8000a50 <__aeabi_ddiv+0x114>
 8000a1e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a22:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a26:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a2a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a2e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a32:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a36:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a3a:	d1c0      	bne.n	80009be <__aeabi_ddiv+0x82>
 8000a3c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a40:	d10b      	bne.n	8000a5a <__aeabi_ddiv+0x11e>
 8000a42:	ea41 0100 	orr.w	r1, r1, r0
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a4e:	e7b6      	b.n	80009be <__aeabi_ddiv+0x82>
 8000a50:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a54:	bf04      	itt	eq
 8000a56:	4301      	orreq	r1, r0
 8000a58:	2000      	moveq	r0, #0
 8000a5a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a5e:	bf88      	it	hi
 8000a60:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a64:	f63f aeaf 	bhi.w	80007c6 <__aeabi_dmul+0xde>
 8000a68:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a6c:	bf04      	itt	eq
 8000a6e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a72:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a76:	f150 0000 	adcs.w	r0, r0, #0
 8000a7a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a7e:	bd70      	pop	{r4, r5, r6, pc}
 8000a80:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a84:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a88:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a8c:	bfc2      	ittt	gt
 8000a8e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a92:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a96:	bd70      	popgt	{r4, r5, r6, pc}
 8000a98:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a9c:	f04f 0e00 	mov.w	lr, #0
 8000aa0:	3c01      	subs	r4, #1
 8000aa2:	e690      	b.n	80007c6 <__aeabi_dmul+0xde>
 8000aa4:	ea45 0e06 	orr.w	lr, r5, r6
 8000aa8:	e68d      	b.n	80007c6 <__aeabi_dmul+0xde>
 8000aaa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000aae:	ea94 0f0c 	teq	r4, ip
 8000ab2:	bf08      	it	eq
 8000ab4:	ea95 0f0c 	teqeq	r5, ip
 8000ab8:	f43f af3b 	beq.w	8000932 <__aeabi_dmul+0x24a>
 8000abc:	ea94 0f0c 	teq	r4, ip
 8000ac0:	d10a      	bne.n	8000ad8 <__aeabi_ddiv+0x19c>
 8000ac2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ac6:	f47f af34 	bne.w	8000932 <__aeabi_dmul+0x24a>
 8000aca:	ea95 0f0c 	teq	r5, ip
 8000ace:	f47f af25 	bne.w	800091c <__aeabi_dmul+0x234>
 8000ad2:	4610      	mov	r0, r2
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	e72c      	b.n	8000932 <__aeabi_dmul+0x24a>
 8000ad8:	ea95 0f0c 	teq	r5, ip
 8000adc:	d106      	bne.n	8000aec <__aeabi_ddiv+0x1b0>
 8000ade:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ae2:	f43f aefd 	beq.w	80008e0 <__aeabi_dmul+0x1f8>
 8000ae6:	4610      	mov	r0, r2
 8000ae8:	4619      	mov	r1, r3
 8000aea:	e722      	b.n	8000932 <__aeabi_dmul+0x24a>
 8000aec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000af0:	bf18      	it	ne
 8000af2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000af6:	f47f aec5 	bne.w	8000884 <__aeabi_dmul+0x19c>
 8000afa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000afe:	f47f af0d 	bne.w	800091c <__aeabi_dmul+0x234>
 8000b02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b06:	f47f aeeb 	bne.w	80008e0 <__aeabi_dmul+0x1f8>
 8000b0a:	e712      	b.n	8000932 <__aeabi_dmul+0x24a>

08000b0c <__gedf2>:
 8000b0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b10:	e006      	b.n	8000b20 <__cmpdf2+0x4>
 8000b12:	bf00      	nop

08000b14 <__ledf2>:
 8000b14:	f04f 0c01 	mov.w	ip, #1
 8000b18:	e002      	b.n	8000b20 <__cmpdf2+0x4>
 8000b1a:	bf00      	nop

08000b1c <__cmpdf2>:
 8000b1c:	f04f 0c01 	mov.w	ip, #1
 8000b20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	bf18      	it	ne
 8000b32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b36:	d01b      	beq.n	8000b70 <__cmpdf2+0x54>
 8000b38:	b001      	add	sp, #4
 8000b3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b3e:	bf0c      	ite	eq
 8000b40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b44:	ea91 0f03 	teqne	r1, r3
 8000b48:	bf02      	ittt	eq
 8000b4a:	ea90 0f02 	teqeq	r0, r2
 8000b4e:	2000      	moveq	r0, #0
 8000b50:	4770      	bxeq	lr
 8000b52:	f110 0f00 	cmn.w	r0, #0
 8000b56:	ea91 0f03 	teq	r1, r3
 8000b5a:	bf58      	it	pl
 8000b5c:	4299      	cmppl	r1, r3
 8000b5e:	bf08      	it	eq
 8000b60:	4290      	cmpeq	r0, r2
 8000b62:	bf2c      	ite	cs
 8000b64:	17d8      	asrcs	r0, r3, #31
 8000b66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b6a:	f040 0001 	orr.w	r0, r0, #1
 8000b6e:	4770      	bx	lr
 8000b70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b78:	d102      	bne.n	8000b80 <__cmpdf2+0x64>
 8000b7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7e:	d107      	bne.n	8000b90 <__cmpdf2+0x74>
 8000b80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b88:	d1d6      	bne.n	8000b38 <__cmpdf2+0x1c>
 8000b8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8e:	d0d3      	beq.n	8000b38 <__cmpdf2+0x1c>
 8000b90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_cdrcmple>:
 8000b98:	4684      	mov	ip, r0
 8000b9a:	4610      	mov	r0, r2
 8000b9c:	4662      	mov	r2, ip
 8000b9e:	468c      	mov	ip, r1
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4663      	mov	r3, ip
 8000ba4:	e000      	b.n	8000ba8 <__aeabi_cdcmpeq>
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_cdcmpeq>:
 8000ba8:	b501      	push	{r0, lr}
 8000baa:	f7ff ffb7 	bl	8000b1c <__cmpdf2>
 8000bae:	2800      	cmp	r0, #0
 8000bb0:	bf48      	it	mi
 8000bb2:	f110 0f00 	cmnmi.w	r0, #0
 8000bb6:	bd01      	pop	{r0, pc}

08000bb8 <__aeabi_dcmpeq>:
 8000bb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bbc:	f7ff fff4 	bl	8000ba8 <__aeabi_cdcmpeq>
 8000bc0:	bf0c      	ite	eq
 8000bc2:	2001      	moveq	r0, #1
 8000bc4:	2000      	movne	r0, #0
 8000bc6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bca:	bf00      	nop

08000bcc <__aeabi_dcmplt>:
 8000bcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bd0:	f7ff ffea 	bl	8000ba8 <__aeabi_cdcmpeq>
 8000bd4:	bf34      	ite	cc
 8000bd6:	2001      	movcc	r0, #1
 8000bd8:	2000      	movcs	r0, #0
 8000bda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bde:	bf00      	nop

08000be0 <__aeabi_dcmple>:
 8000be0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be4:	f7ff ffe0 	bl	8000ba8 <__aeabi_cdcmpeq>
 8000be8:	bf94      	ite	ls
 8000bea:	2001      	movls	r0, #1
 8000bec:	2000      	movhi	r0, #0
 8000bee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_dcmpge>:
 8000bf4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf8:	f7ff ffce 	bl	8000b98 <__aeabi_cdrcmple>
 8000bfc:	bf94      	ite	ls
 8000bfe:	2001      	movls	r0, #1
 8000c00:	2000      	movhi	r0, #0
 8000c02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c06:	bf00      	nop

08000c08 <__aeabi_dcmpgt>:
 8000c08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c0c:	f7ff ffc4 	bl	8000b98 <__aeabi_cdrcmple>
 8000c10:	bf34      	ite	cc
 8000c12:	2001      	movcc	r0, #1
 8000c14:	2000      	movcs	r0, #0
 8000c16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c1a:	bf00      	nop

08000c1c <__aeabi_dcmpun>:
 8000c1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c24:	d102      	bne.n	8000c2c <__aeabi_dcmpun+0x10>
 8000c26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c2a:	d10a      	bne.n	8000c42 <__aeabi_dcmpun+0x26>
 8000c2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c34:	d102      	bne.n	8000c3c <__aeabi_dcmpun+0x20>
 8000c36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_dcmpun+0x26>
 8000c3c:	f04f 0000 	mov.w	r0, #0
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0001 	mov.w	r0, #1
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2iz>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c50:	d215      	bcs.n	8000c7e <__aeabi_d2iz+0x36>
 8000c52:	d511      	bpl.n	8000c78 <__aeabi_d2iz+0x30>
 8000c54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c5c:	d912      	bls.n	8000c84 <__aeabi_d2iz+0x3c>
 8000c5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c72:	bf18      	it	ne
 8000c74:	4240      	negne	r0, r0
 8000c76:	4770      	bx	lr
 8000c78:	f04f 0000 	mov.w	r0, #0
 8000c7c:	4770      	bx	lr
 8000c7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c82:	d105      	bne.n	8000c90 <__aeabi_d2iz+0x48>
 8000c84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c88:	bf08      	it	eq
 8000c8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c8e:	4770      	bx	lr
 8000c90:	f04f 0000 	mov.w	r0, #0
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2uiz>:
 8000c98:	004a      	lsls	r2, r1, #1
 8000c9a:	d211      	bcs.n	8000cc0 <__aeabi_d2uiz+0x28>
 8000c9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ca0:	d211      	bcs.n	8000cc6 <__aeabi_d2uiz+0x2e>
 8000ca2:	d50d      	bpl.n	8000cc0 <__aeabi_d2uiz+0x28>
 8000ca4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ca8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000cac:	d40e      	bmi.n	8000ccc <__aeabi_d2uiz+0x34>
 8000cae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000cb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000cba:	fa23 f002 	lsr.w	r0, r3, r2
 8000cbe:	4770      	bx	lr
 8000cc0:	f04f 0000 	mov.w	r0, #0
 8000cc4:	4770      	bx	lr
 8000cc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cca:	d102      	bne.n	8000cd2 <__aeabi_d2uiz+0x3a>
 8000ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd0:	4770      	bx	lr
 8000cd2:	f04f 0000 	mov.w	r0, #0
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b970 	b.w	8000fd0 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f806 	bl	8000d08 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9e08      	ldr	r6, [sp, #32]
 8000d0e:	460d      	mov	r5, r1
 8000d10:	4604      	mov	r4, r0
 8000d12:	460f      	mov	r7, r1
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d14a      	bne.n	8000dae <__udivmoddi4+0xa6>
 8000d18:	428a      	cmp	r2, r1
 8000d1a:	4694      	mov	ip, r2
 8000d1c:	d965      	bls.n	8000dea <__udivmoddi4+0xe2>
 8000d1e:	fab2 f382 	clz	r3, r2
 8000d22:	b143      	cbz	r3, 8000d36 <__udivmoddi4+0x2e>
 8000d24:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d28:	f1c3 0220 	rsb	r2, r3, #32
 8000d2c:	409f      	lsls	r7, r3
 8000d2e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d32:	4317      	orrs	r7, r2
 8000d34:	409c      	lsls	r4, r3
 8000d36:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d3a:	fa1f f58c 	uxth.w	r5, ip
 8000d3e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d42:	0c22      	lsrs	r2, r4, #16
 8000d44:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d48:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d4c:	fb01 f005 	mul.w	r0, r1, r5
 8000d50:	4290      	cmp	r0, r2
 8000d52:	d90a      	bls.n	8000d6a <__udivmoddi4+0x62>
 8000d54:	eb1c 0202 	adds.w	r2, ip, r2
 8000d58:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d5c:	f080 811c 	bcs.w	8000f98 <__udivmoddi4+0x290>
 8000d60:	4290      	cmp	r0, r2
 8000d62:	f240 8119 	bls.w	8000f98 <__udivmoddi4+0x290>
 8000d66:	3902      	subs	r1, #2
 8000d68:	4462      	add	r2, ip
 8000d6a:	1a12      	subs	r2, r2, r0
 8000d6c:	b2a4      	uxth	r4, r4
 8000d6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d76:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d7a:	fb00 f505 	mul.w	r5, r0, r5
 8000d7e:	42a5      	cmp	r5, r4
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x90>
 8000d82:	eb1c 0404 	adds.w	r4, ip, r4
 8000d86:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d8a:	f080 8107 	bcs.w	8000f9c <__udivmoddi4+0x294>
 8000d8e:	42a5      	cmp	r5, r4
 8000d90:	f240 8104 	bls.w	8000f9c <__udivmoddi4+0x294>
 8000d94:	4464      	add	r4, ip
 8000d96:	3802      	subs	r0, #2
 8000d98:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d9c:	1b64      	subs	r4, r4, r5
 8000d9e:	2100      	movs	r1, #0
 8000da0:	b11e      	cbz	r6, 8000daa <__udivmoddi4+0xa2>
 8000da2:	40dc      	lsrs	r4, r3
 8000da4:	2300      	movs	r3, #0
 8000da6:	e9c6 4300 	strd	r4, r3, [r6]
 8000daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0xbc>
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	f000 80ed 	beq.w	8000f92 <__udivmoddi4+0x28a>
 8000db8:	2100      	movs	r1, #0
 8000dba:	e9c6 0500 	strd	r0, r5, [r6]
 8000dbe:	4608      	mov	r0, r1
 8000dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc4:	fab3 f183 	clz	r1, r3
 8000dc8:	2900      	cmp	r1, #0
 8000dca:	d149      	bne.n	8000e60 <__udivmoddi4+0x158>
 8000dcc:	42ab      	cmp	r3, r5
 8000dce:	d302      	bcc.n	8000dd6 <__udivmoddi4+0xce>
 8000dd0:	4282      	cmp	r2, r0
 8000dd2:	f200 80f8 	bhi.w	8000fc6 <__udivmoddi4+0x2be>
 8000dd6:	1a84      	subs	r4, r0, r2
 8000dd8:	eb65 0203 	sbc.w	r2, r5, r3
 8000ddc:	2001      	movs	r0, #1
 8000dde:	4617      	mov	r7, r2
 8000de0:	2e00      	cmp	r6, #0
 8000de2:	d0e2      	beq.n	8000daa <__udivmoddi4+0xa2>
 8000de4:	e9c6 4700 	strd	r4, r7, [r6]
 8000de8:	e7df      	b.n	8000daa <__udivmoddi4+0xa2>
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xe6>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f382 	clz	r3, r2
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	f040 8090 	bne.w	8000f18 <__udivmoddi4+0x210>
 8000df8:	1a8a      	subs	r2, r1, r2
 8000dfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dfe:	fa1f fe8c 	uxth.w	lr, ip
 8000e02:	2101      	movs	r1, #1
 8000e04:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e08:	fb07 2015 	mls	r0, r7, r5, r2
 8000e0c:	0c22      	lsrs	r2, r4, #16
 8000e0e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e12:	fb0e f005 	mul.w	r0, lr, r5
 8000e16:	4290      	cmp	r0, r2
 8000e18:	d908      	bls.n	8000e2c <__udivmoddi4+0x124>
 8000e1a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e1e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e22:	d202      	bcs.n	8000e2a <__udivmoddi4+0x122>
 8000e24:	4290      	cmp	r0, r2
 8000e26:	f200 80cb 	bhi.w	8000fc0 <__udivmoddi4+0x2b8>
 8000e2a:	4645      	mov	r5, r8
 8000e2c:	1a12      	subs	r2, r2, r0
 8000e2e:	b2a4      	uxth	r4, r4
 8000e30:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e34:	fb07 2210 	mls	r2, r7, r0, r2
 8000e38:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e3c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e40:	45a6      	cmp	lr, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x14e>
 8000e44:	eb1c 0404 	adds.w	r4, ip, r4
 8000e48:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e4c:	d202      	bcs.n	8000e54 <__udivmoddi4+0x14c>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	f200 80bb 	bhi.w	8000fca <__udivmoddi4+0x2c2>
 8000e54:	4610      	mov	r0, r2
 8000e56:	eba4 040e 	sub.w	r4, r4, lr
 8000e5a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e5e:	e79f      	b.n	8000da0 <__udivmoddi4+0x98>
 8000e60:	f1c1 0720 	rsb	r7, r1, #32
 8000e64:	408b      	lsls	r3, r1
 8000e66:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e6e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e72:	fa20 f307 	lsr.w	r3, r0, r7
 8000e76:	40fd      	lsrs	r5, r7
 8000e78:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e7c:	4323      	orrs	r3, r4
 8000e7e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e82:	fa1f fe8c 	uxth.w	lr, ip
 8000e86:	fb09 5518 	mls	r5, r9, r8, r5
 8000e8a:	0c1c      	lsrs	r4, r3, #16
 8000e8c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e90:	fb08 f50e 	mul.w	r5, r8, lr
 8000e94:	42a5      	cmp	r5, r4
 8000e96:	fa02 f201 	lsl.w	r2, r2, r1
 8000e9a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e9e:	d90b      	bls.n	8000eb8 <__udivmoddi4+0x1b0>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ea8:	f080 8088 	bcs.w	8000fbc <__udivmoddi4+0x2b4>
 8000eac:	42a5      	cmp	r5, r4
 8000eae:	f240 8085 	bls.w	8000fbc <__udivmoddi4+0x2b4>
 8000eb2:	f1a8 0802 	sub.w	r8, r8, #2
 8000eb6:	4464      	add	r4, ip
 8000eb8:	1b64      	subs	r4, r4, r5
 8000eba:	b29d      	uxth	r5, r3
 8000ebc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ec0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ec4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ec8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ecc:	45a6      	cmp	lr, r4
 8000ece:	d908      	bls.n	8000ee2 <__udivmoddi4+0x1da>
 8000ed0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ed8:	d26c      	bcs.n	8000fb4 <__udivmoddi4+0x2ac>
 8000eda:	45a6      	cmp	lr, r4
 8000edc:	d96a      	bls.n	8000fb4 <__udivmoddi4+0x2ac>
 8000ede:	3b02      	subs	r3, #2
 8000ee0:	4464      	add	r4, ip
 8000ee2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ee6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eea:	eba4 040e 	sub.w	r4, r4, lr
 8000eee:	42ac      	cmp	r4, r5
 8000ef0:	46c8      	mov	r8, r9
 8000ef2:	46ae      	mov	lr, r5
 8000ef4:	d356      	bcc.n	8000fa4 <__udivmoddi4+0x29c>
 8000ef6:	d053      	beq.n	8000fa0 <__udivmoddi4+0x298>
 8000ef8:	b156      	cbz	r6, 8000f10 <__udivmoddi4+0x208>
 8000efa:	ebb0 0208 	subs.w	r2, r0, r8
 8000efe:	eb64 040e 	sbc.w	r4, r4, lr
 8000f02:	fa04 f707 	lsl.w	r7, r4, r7
 8000f06:	40ca      	lsrs	r2, r1
 8000f08:	40cc      	lsrs	r4, r1
 8000f0a:	4317      	orrs	r7, r2
 8000f0c:	e9c6 7400 	strd	r7, r4, [r6]
 8000f10:	4618      	mov	r0, r3
 8000f12:	2100      	movs	r1, #0
 8000f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f18:	f1c3 0120 	rsb	r1, r3, #32
 8000f1c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f20:	fa20 f201 	lsr.w	r2, r0, r1
 8000f24:	fa25 f101 	lsr.w	r1, r5, r1
 8000f28:	409d      	lsls	r5, r3
 8000f2a:	432a      	orrs	r2, r5
 8000f2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f30:	fa1f fe8c 	uxth.w	lr, ip
 8000f34:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f38:	fb07 1510 	mls	r5, r7, r0, r1
 8000f3c:	0c11      	lsrs	r1, r2, #16
 8000f3e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f42:	fb00 f50e 	mul.w	r5, r0, lr
 8000f46:	428d      	cmp	r5, r1
 8000f48:	fa04 f403 	lsl.w	r4, r4, r3
 8000f4c:	d908      	bls.n	8000f60 <__udivmoddi4+0x258>
 8000f4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f52:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f56:	d22f      	bcs.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f58:	428d      	cmp	r5, r1
 8000f5a:	d92d      	bls.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	4461      	add	r1, ip
 8000f60:	1b49      	subs	r1, r1, r5
 8000f62:	b292      	uxth	r2, r2
 8000f64:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f68:	fb07 1115 	mls	r1, r7, r5, r1
 8000f6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f70:	fb05 f10e 	mul.w	r1, r5, lr
 8000f74:	4291      	cmp	r1, r2
 8000f76:	d908      	bls.n	8000f8a <__udivmoddi4+0x282>
 8000f78:	eb1c 0202 	adds.w	r2, ip, r2
 8000f7c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f80:	d216      	bcs.n	8000fb0 <__udivmoddi4+0x2a8>
 8000f82:	4291      	cmp	r1, r2
 8000f84:	d914      	bls.n	8000fb0 <__udivmoddi4+0x2a8>
 8000f86:	3d02      	subs	r5, #2
 8000f88:	4462      	add	r2, ip
 8000f8a:	1a52      	subs	r2, r2, r1
 8000f8c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f90:	e738      	b.n	8000e04 <__udivmoddi4+0xfc>
 8000f92:	4631      	mov	r1, r6
 8000f94:	4630      	mov	r0, r6
 8000f96:	e708      	b.n	8000daa <__udivmoddi4+0xa2>
 8000f98:	4639      	mov	r1, r7
 8000f9a:	e6e6      	b.n	8000d6a <__udivmoddi4+0x62>
 8000f9c:	4610      	mov	r0, r2
 8000f9e:	e6fb      	b.n	8000d98 <__udivmoddi4+0x90>
 8000fa0:	4548      	cmp	r0, r9
 8000fa2:	d2a9      	bcs.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fa4:	ebb9 0802 	subs.w	r8, r9, r2
 8000fa8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fac:	3b01      	subs	r3, #1
 8000fae:	e7a3      	b.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fb0:	4645      	mov	r5, r8
 8000fb2:	e7ea      	b.n	8000f8a <__udivmoddi4+0x282>
 8000fb4:	462b      	mov	r3, r5
 8000fb6:	e794      	b.n	8000ee2 <__udivmoddi4+0x1da>
 8000fb8:	4640      	mov	r0, r8
 8000fba:	e7d1      	b.n	8000f60 <__udivmoddi4+0x258>
 8000fbc:	46d0      	mov	r8, sl
 8000fbe:	e77b      	b.n	8000eb8 <__udivmoddi4+0x1b0>
 8000fc0:	3d02      	subs	r5, #2
 8000fc2:	4462      	add	r2, ip
 8000fc4:	e732      	b.n	8000e2c <__udivmoddi4+0x124>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e70a      	b.n	8000de0 <__udivmoddi4+0xd8>
 8000fca:	4464      	add	r4, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e742      	b.n	8000e56 <__udivmoddi4+0x14e>

08000fd0 <__aeabi_idiv0>:
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop

08000fd4 <disable_interrupts>:
 */
#define ACC_BOARD_REF_FREQ 26000000


static inline void disable_interrupts(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fd8:	b672      	cpsid	i
}
 8000fda:	bf00      	nop
	__disable_irq();
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr

08000fe6 <enable_interrupts>:


static inline void enable_interrupts(void)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 8000fea:	b662      	cpsie	i
}
 8000fec:	bf00      	nop
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8000fee:	f3bf 8f6f 	isb	sy
}
 8000ff2:	bf00      	nop
	__enable_irq();
	__ISB();
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
	...

08001000 <acc_hal_integration_sensor_transfer>:
// Implementation of RSS HAL handlers
//----------------------------------------


static void acc_hal_integration_sensor_transfer(acc_sensor_id_t sensor_id, uint8_t *buffer, size_t buffer_size)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b088      	sub	sp, #32
 8001004:	af02      	add	r7, sp, #8
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	607a      	str	r2, [r7, #4]
	(void)sensor_id;  // Ignore parameter sensor_id

	const uint32_t SPI_TRANSMIT_RECEIVE_TIMEOUT = 5000;
 800100c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001010:	617b      	str	r3, [r7, #20]

	HAL_GPIO_WritePin(A111_CS_N_GPIO_Port, A111_CS_N_Pin, GPIO_PIN_RESET);
 8001012:	2200      	movs	r2, #0
 8001014:	2140      	movs	r1, #64	; 0x40
 8001016:	480b      	ldr	r0, [pc, #44]	; (8001044 <acc_hal_integration_sensor_transfer+0x44>)
 8001018:	f001 fc42 	bl	80028a0 <HAL_GPIO_WritePin>

		// Enable interrupt again, the ISR will execute directly after this
		enable_interrupts();
	}
#else
	HAL_SPI_TransmitReceive(&A111_SPI_HANDLE, buffer, buffer, buffer_size, SPI_TRANSMIT_RECEIVE_TIMEOUT);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	b29a      	uxth	r2, r3
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	9300      	str	r3, [sp, #0]
 8001024:	4613      	mov	r3, r2
 8001026:	68ba      	ldr	r2, [r7, #8]
 8001028:	68b9      	ldr	r1, [r7, #8]
 800102a:	4807      	ldr	r0, [pc, #28]	; (8001048 <acc_hal_integration_sensor_transfer+0x48>)
 800102c:	f003 f837 	bl	800409e <HAL_SPI_TransmitReceive>
#endif

	HAL_GPIO_WritePin(A111_CS_N_GPIO_Port, A111_CS_N_Pin, GPIO_PIN_SET);
 8001030:	2201      	movs	r2, #1
 8001032:	2140      	movs	r1, #64	; 0x40
 8001034:	4803      	ldr	r0, [pc, #12]	; (8001044 <acc_hal_integration_sensor_transfer+0x44>)
 8001036:	f001 fc33 	bl	80028a0 <HAL_GPIO_WritePin>
}
 800103a:	bf00      	nop
 800103c:	3718      	adds	r7, #24
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	48000400 	.word	0x48000400
 8001048:	20000384 	.word	0x20000384

0800104c <acc_hal_integration_sensor_power_on>:


static void acc_hal_integration_sensor_power_on(acc_sensor_id_t sensor_id)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
	(void)sensor_id;  // Ignore parameter sensor_id

	HAL_GPIO_WritePin(A111_ENABLE_GPIO_Port, A111_ENABLE_Pin, GPIO_PIN_SET);
 8001054:	2201      	movs	r2, #1
 8001056:	2120      	movs	r1, #32
 8001058:	4807      	ldr	r0, [pc, #28]	; (8001078 <acc_hal_integration_sensor_power_on+0x2c>)
 800105a:	f001 fc21 	bl	80028a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A111_CS_N_GPIO_Port, A111_CS_N_Pin, GPIO_PIN_SET);
 800105e:	2201      	movs	r2, #1
 8001060:	2140      	movs	r1, #64	; 0x40
 8001062:	4805      	ldr	r0, [pc, #20]	; (8001078 <acc_hal_integration_sensor_power_on+0x2c>)
 8001064:	f001 fc1c 	bl	80028a0 <HAL_GPIO_WritePin>

	// Wait 2 ms to make sure that the sensor crystal have time to stabilize
	HAL_Delay(2);
 8001068:	2002      	movs	r0, #2
 800106a:	f001 f921 	bl	80022b0 <HAL_Delay>
}
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	48000400 	.word	0x48000400

0800107c <acc_hal_integration_sensor_power_off>:


static void acc_hal_integration_sensor_power_off(acc_sensor_id_t sensor_id)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
	(void)sensor_id;  // Ignore parameter sensor_id

	HAL_GPIO_WritePin(A111_CS_N_GPIO_Port, A111_CS_N_Pin, GPIO_PIN_RESET);
 8001084:	2200      	movs	r2, #0
 8001086:	2140      	movs	r1, #64	; 0x40
 8001088:	4807      	ldr	r0, [pc, #28]	; (80010a8 <acc_hal_integration_sensor_power_off+0x2c>)
 800108a:	f001 fc09 	bl	80028a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A111_ENABLE_GPIO_Port, A111_ENABLE_Pin, GPIO_PIN_RESET);
 800108e:	2200      	movs	r2, #0
 8001090:	2120      	movs	r1, #32
 8001092:	4805      	ldr	r0, [pc, #20]	; (80010a8 <acc_hal_integration_sensor_power_off+0x2c>)
 8001094:	f001 fc04 	bl	80028a0 <HAL_GPIO_WritePin>

	// Wait after power off to leave the sensor in a known state
	// in case the application intends to enable the sensor directly
	HAL_Delay(2);
 8001098:	2002      	movs	r0, #2
 800109a:	f001 f909 	bl	80022b0 <HAL_Delay>
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	48000400 	.word	0x48000400

080010ac <acc_hal_integration_wait_for_sensor_interrupt>:


static bool acc_hal_integration_wait_for_sensor_interrupt(acc_sensor_id_t sensor_id, uint32_t timeout_ms)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
	(void)sensor_id; // Ignore parameter sensor_id

	const uint32_t wait_begin_ms = HAL_GetTick();
 80010b6:	f001 f8ef 	bl	8002298 <HAL_GetTick>
 80010ba:	60f8      	str	r0, [r7, #12]
	while ((HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) != GPIO_PIN_SET) &&
 80010bc:	e00d      	b.n	80010da <acc_hal_integration_wait_for_sensor_interrupt+0x2e>
	       (HAL_GetTick() - wait_begin_ms < timeout_ms))
	{
		// Wait for the GPIO interrupt
		disable_interrupts();
 80010be:	f7ff ff89 	bl	8000fd4 <disable_interrupts>
		// Check again so that IRQ did not occur
		if (HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) != GPIO_PIN_SET)
 80010c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ca:	f001 fbd1 	bl	8002870 <HAL_GPIO_ReadPin>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d000      	beq.n	80010d6 <acc_hal_integration_wait_for_sensor_interrupt+0x2a>
		{
			__WFI();
 80010d4:	bf30      	wfi
		}

		// Enable interrupts again to allow pending interrupt to be handled
		enable_interrupts();
 80010d6:	f7ff ff86 	bl	8000fe6 <enable_interrupts>
	while ((HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) != GPIO_PIN_SET) &&
 80010da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e2:	f001 fbc5 	bl	8002870 <HAL_GPIO_ReadPin>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d007      	beq.n	80010fc <acc_hal_integration_wait_for_sensor_interrupt+0x50>
	       (HAL_GetTick() - wait_begin_ms < timeout_ms))
 80010ec:	f001 f8d4 	bl	8002298 <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	1ad3      	subs	r3, r2, r3
	while ((HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) != GPIO_PIN_SET) &&
 80010f6:	683a      	ldr	r2, [r7, #0]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d8e0      	bhi.n	80010be <acc_hal_integration_wait_for_sensor_interrupt+0x12>
	}

	return HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) == GPIO_PIN_SET;
 80010fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001100:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001104:	f001 fbb4 	bl	8002870 <HAL_GPIO_ReadPin>
 8001108:	4603      	mov	r3, r0
 800110a:	2b01      	cmp	r3, #1
 800110c:	bf0c      	ite	eq
 800110e:	2301      	moveq	r3, #1
 8001110:	2300      	movne	r3, #0
 8001112:	b2db      	uxtb	r3, r3
}
 8001114:	4618      	mov	r0, r3
 8001116:	3710      	adds	r7, #16
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <acc_hal_integration_get_reference_frequency>:


static float acc_hal_integration_get_reference_frequency(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
	return ACC_BOARD_REF_FREQ;
 8001120:	4b04      	ldr	r3, [pc, #16]	; (8001134 <acc_hal_integration_get_reference_frequency+0x18>)
 8001122:	ee07 3a90 	vmov	s15, r3
}
 8001126:	eeb0 0a67 	vmov.f32	s0, s15
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	4bc65d40 	.word	0x4bc65d40

08001138 <acc_hal_integration_get_implementation>:
	.optimization.transfer16 = NULL,
};


const acc_hal_t *acc_hal_integration_get_implementation(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
	return &hal;
 800113c:	4b02      	ldr	r3, [pc, #8]	; (8001148 <acc_hal_integration_get_implementation+0x10>)
}
 800113e:	4618      	mov	r0, r3
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	08012f34 	.word	0x08012f34

0800114c <acc_integration_log>:

#define LOG_FORMAT "%02u:%02u:%02u.%03u (%c) (%s) %s\n"


void acc_integration_log(acc_log_level_t level, const char *module, const char *format, ...)
{
 800114c:	b40c      	push	{r2, r3}
 800114e:	b580      	push	{r7, lr}
 8001150:	b0b4      	sub	sp, #208	; 0xd0
 8001152:	af04      	add	r7, sp, #16
 8001154:	4603      	mov	r3, r0
 8001156:	6039      	str	r1, [r7, #0]
 8001158:	71fb      	strb	r3, [r7, #7]
	char    log_buffer[LOG_BUFFER_MAX_SIZE];
	va_list ap;

	va_start(ap, format);
 800115a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800115e:	60bb      	str	r3, [r7, #8]

	int ret = vsnprintf(log_buffer, LOG_BUFFER_MAX_SIZE, format, ap);
 8001160:	f107 000c 	add.w	r0, r7, #12
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800116a:	2196      	movs	r1, #150	; 0x96
 800116c:	f00d fb0a 	bl	800e784 <vsniprintf>
 8001170:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc

	if (ret >= LOG_BUFFER_MAX_SIZE)
 8001174:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001178:	2b95      	cmp	r3, #149	; 0x95
 800117a:	dd0b      	ble.n	8001194 <acc_integration_log+0x48>
	{
		log_buffer[LOG_BUFFER_MAX_SIZE - 4] = '.';
 800117c:	232e      	movs	r3, #46	; 0x2e
 800117e:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
		log_buffer[LOG_BUFFER_MAX_SIZE - 3] = '.';
 8001182:	232e      	movs	r3, #46	; 0x2e
 8001184:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		log_buffer[LOG_BUFFER_MAX_SIZE - 2] = '.';
 8001188:	232e      	movs	r3, #46	; 0x2e
 800118a:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
		log_buffer[LOG_BUFFER_MAX_SIZE - 1] = 0;
 800118e:	2300      	movs	r3, #0
 8001190:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
	}

	uint32_t time_ms = acc_integration_get_time();
 8001194:	f000 f876 	bl	8001284 <acc_integration_get_time>
 8001198:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
	char     level_ch;

	unsigned int timestamp    = time_ms;
 800119c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80011a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	unsigned int hours        = timestamp / 1000 / 60 / 60;
 80011a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80011a8:	4a2f      	ldr	r2, [pc, #188]	; (8001268 <acc_integration_log+0x11c>)
 80011aa:	fba2 2303 	umull	r2, r3, r2, r3
 80011ae:	0d5b      	lsrs	r3, r3, #21
 80011b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	unsigned int minutes      = timestamp / 1000 / 60 % 60;
 80011b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80011b8:	4a2c      	ldr	r2, [pc, #176]	; (800126c <acc_integration_log+0x120>)
 80011ba:	fba2 2303 	umull	r2, r3, r2, r3
 80011be:	0b9a      	lsrs	r2, r3, #14
 80011c0:	4b2b      	ldr	r3, [pc, #172]	; (8001270 <acc_integration_log+0x124>)
 80011c2:	fba3 1302 	umull	r1, r3, r3, r2
 80011c6:	0959      	lsrs	r1, r3, #5
 80011c8:	460b      	mov	r3, r1
 80011ca:	011b      	lsls	r3, r3, #4
 80011cc:	1a5b      	subs	r3, r3, r1
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	unsigned int seconds      = timestamp / 1000 % 60;
 80011d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80011da:	4a26      	ldr	r2, [pc, #152]	; (8001274 <acc_integration_log+0x128>)
 80011dc:	fba2 2303 	umull	r2, r3, r2, r3
 80011e0:	099a      	lsrs	r2, r3, #6
 80011e2:	4b23      	ldr	r3, [pc, #140]	; (8001270 <acc_integration_log+0x124>)
 80011e4:	fba3 1302 	umull	r1, r3, r3, r2
 80011e8:	0959      	lsrs	r1, r3, #5
 80011ea:	460b      	mov	r3, r1
 80011ec:	011b      	lsls	r3, r3, #4
 80011ee:	1a5b      	subs	r3, r3, r1
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	1ad3      	subs	r3, r2, r3
 80011f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	unsigned int milliseconds = timestamp % 1000;
 80011f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80011fc:	4a1d      	ldr	r2, [pc, #116]	; (8001274 <acc_integration_log+0x128>)
 80011fe:	fba2 1203 	umull	r1, r2, r2, r3
 8001202:	0992      	lsrs	r2, r2, #6
 8001204:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001208:	fb01 f202 	mul.w	r2, r1, r2
 800120c:	1a9b      	subs	r3, r3, r2
 800120e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	level_ch = (level <= ACC_LOG_LEVEL_DEBUG) ? "EWIVD"[level] : '?';
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	2b04      	cmp	r3, #4
 8001216:	d803      	bhi.n	8001220 <acc_integration_log+0xd4>
 8001218:	79fb      	ldrb	r3, [r7, #7]
 800121a:	4a17      	ldr	r2, [pc, #92]	; (8001278 <acc_integration_log+0x12c>)
 800121c:	5cd3      	ldrb	r3, [r2, r3]
 800121e:	e000      	b.n	8001222 <acc_integration_log+0xd6>
 8001220:	233f      	movs	r3, #63	; 0x3f
 8001222:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

	printf(LOG_FORMAT, hours, minutes, seconds, milliseconds, level_ch, module, log_buffer);
 8001226:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800122a:	f107 020c 	add.w	r2, r7, #12
 800122e:	9203      	str	r2, [sp, #12]
 8001230:	683a      	ldr	r2, [r7, #0]
 8001232:	9202      	str	r2, [sp, #8]
 8001234:	9301      	str	r3, [sp, #4]
 8001236:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800123a:	9300      	str	r3, [sp, #0]
 800123c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001240:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001244:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8001248:	480c      	ldr	r0, [pc, #48]	; (800127c <acc_integration_log+0x130>)
 800124a:	f00d f9b7 	bl	800e5bc <iprintf>

	fflush(stdout);
 800124e:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <acc_integration_log+0x134>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	4618      	mov	r0, r3
 8001256:	f00d f8ed 	bl	800e434 <fflush>

	va_end(ap);
}
 800125a:	bf00      	nop
 800125c:	37c0      	adds	r7, #192	; 0xc0
 800125e:	46bd      	mov	sp, r7
 8001260:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001264:	b002      	add	sp, #8
 8001266:	4770      	bx	lr
 8001268:	95217cb1 	.word	0x95217cb1
 800126c:	45e7b273 	.word	0x45e7b273
 8001270:	88888889 	.word	0x88888889
 8001274:	10624dd3 	.word	0x10624dd3
 8001278:	08012e74 	.word	0x08012e74
 800127c:	08012e50 	.word	0x08012e50
 8001280:	200001e4 	.word	0x200001e4

08001284 <acc_integration_get_time>:
	HAL_Delay(time_msec);
}


uint32_t acc_integration_get_time(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8001288:	f001 f806 	bl	8002298 <HAL_GetTick>
 800128c:	4603      	mov	r3, r0
}
 800128e:	4618      	mov	r0, r3
 8001290:	bd80      	pop	{r7, pc}
 8001292:	0000      	movs	r0, r0
 8001294:	0000      	movs	r0, r0
	...

08001298 <water_flow>:
#include <stdlib.h>
#include <stdbool.h>
#include <math.h>
#include "estimated_water_speed.h"

uint16_t water_flow(double higth, double radius, double K, double S, double n, uint16_t number_peaks) {
 8001298:	b5b0      	push	{r4, r5, r7, lr}
 800129a:	b094      	sub	sp, #80	; 0x50
 800129c:	af00      	add	r7, sp, #0
 800129e:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 80012a2:	ed87 1b08 	vstr	d1, [r7, #32]
 80012a6:	ed87 2b06 	vstr	d2, [r7, #24]
 80012aa:	ed87 3b04 	vstr	d3, [r7, #16]
 80012ae:	ed87 4b02 	vstr	d4, [r7, #8]
 80012b2:	4603      	mov	r3, r0
 80012b4:	80fb      	strh	r3, [r7, #6]
	double theta, R, A, Q;

    if (higth == 2 * radius || number_peaks == 1) { // Full pipe
 80012b6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80012ba:	4602      	mov	r2, r0
 80012bc:	460b      	mov	r3, r1
 80012be:	f7ff f85d 	bl	800037c <__adddf3>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80012ca:	f7ff fc75 	bl	8000bb8 <__aeabi_dcmpeq>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d102      	bne.n	80012da <water_flow+0x42>
 80012d4:	88fb      	ldrh	r3, [r7, #6]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d11d      	bne.n	8001316 <water_flow+0x7e>
        R = radius / 2; // Hydraulic radius
 80012da:	f04f 0200 	mov.w	r2, #0
 80012de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012e2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80012e6:	f7ff fb29 	bl	800093c <__aeabi_ddiv>
 80012ea:	4602      	mov	r2, r0
 80012ec:	460b      	mov	r3, r1
 80012ee:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
        A = M_PI * pow(radius, 2); // Area of the pipe
 80012f2:	ed9f 1b65 	vldr	d1, [pc, #404]	; 8001488 <water_flow+0x1f0>
 80012f6:	ed97 0b08 	vldr	d0, [r7, #32]
 80012fa:	f00f fa39 	bl	8010770 <pow>
 80012fe:	ec51 0b10 	vmov	r0, r1, d0
 8001302:	a365      	add	r3, pc, #404	; (adr r3, 8001498 <water_flow+0x200>)
 8001304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001308:	f7ff f9ee 	bl	80006e8 <__aeabi_dmul>
 800130c:	4602      	mov	r2, r0
 800130e:	460b      	mov	r3, r1
 8001310:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8001314:	e07d      	b.n	8001412 <water_flow+0x17a>
    } 
    else {
        theta = 2 * acos((radius - higth) / radius);
 8001316:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800131a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800131e:	f7ff f82b 	bl	8000378 <__aeabi_dsub>
 8001322:	4602      	mov	r2, r0
 8001324:	460b      	mov	r3, r1
 8001326:	4610      	mov	r0, r2
 8001328:	4619      	mov	r1, r3
 800132a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800132e:	f7ff fb05 	bl	800093c <__aeabi_ddiv>
 8001332:	4602      	mov	r2, r0
 8001334:	460b      	mov	r3, r1
 8001336:	ec43 2b17 	vmov	d7, r2, r3
 800133a:	eeb0 0a47 	vmov.f32	s0, s14
 800133e:	eef0 0a67 	vmov.f32	s1, s15
 8001342:	f00f f9e1 	bl	8010708 <acos>
 8001346:	ec51 0b10 	vmov	r0, r1, d0
 800134a:	4602      	mov	r2, r0
 800134c:	460b      	mov	r3, r1
 800134e:	f7ff f815 	bl	800037c <__adddf3>
 8001352:	4602      	mov	r2, r0
 8001354:	460b      	mov	r3, r1
 8001356:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
        R = (pow(radius, 2) * ((theta - sin(theta)) / 2)) / (radius * theta); // Hydraulic radius
 800135a:	ed9f 1b4b 	vldr	d1, [pc, #300]	; 8001488 <water_flow+0x1f0>
 800135e:	ed97 0b08 	vldr	d0, [r7, #32]
 8001362:	f00f fa05 	bl	8010770 <pow>
 8001366:	ec55 4b10 	vmov	r4, r5, d0
 800136a:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 800136e:	f00f faa7 	bl	80108c0 <sin>
 8001372:	ec53 2b10 	vmov	r2, r3, d0
 8001376:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800137a:	f7fe fffd 	bl	8000378 <__aeabi_dsub>
 800137e:	4602      	mov	r2, r0
 8001380:	460b      	mov	r3, r1
 8001382:	4610      	mov	r0, r2
 8001384:	4619      	mov	r1, r3
 8001386:	f04f 0200 	mov.w	r2, #0
 800138a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800138e:	f7ff fad5 	bl	800093c <__aeabi_ddiv>
 8001392:	4602      	mov	r2, r0
 8001394:	460b      	mov	r3, r1
 8001396:	4620      	mov	r0, r4
 8001398:	4629      	mov	r1, r5
 800139a:	f7ff f9a5 	bl	80006e8 <__aeabi_dmul>
 800139e:	4602      	mov	r2, r0
 80013a0:	460b      	mov	r3, r1
 80013a2:	4614      	mov	r4, r2
 80013a4:	461d      	mov	r5, r3
 80013a6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80013aa:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80013ae:	f7ff f99b 	bl	80006e8 <__aeabi_dmul>
 80013b2:	4602      	mov	r2, r0
 80013b4:	460b      	mov	r3, r1
 80013b6:	4620      	mov	r0, r4
 80013b8:	4629      	mov	r1, r5
 80013ba:	f7ff fabf 	bl	800093c <__aeabi_ddiv>
 80013be:	4602      	mov	r2, r0
 80013c0:	460b      	mov	r3, r1
 80013c2:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
        A = pow(radius, 2) * ((theta - sin(theta)) / 2);
 80013c6:	ed9f 1b30 	vldr	d1, [pc, #192]	; 8001488 <water_flow+0x1f0>
 80013ca:	ed97 0b08 	vldr	d0, [r7, #32]
 80013ce:	f00f f9cf 	bl	8010770 <pow>
 80013d2:	ec55 4b10 	vmov	r4, r5, d0
 80013d6:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 80013da:	f00f fa71 	bl	80108c0 <sin>
 80013de:	ec53 2b10 	vmov	r2, r3, d0
 80013e2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80013e6:	f7fe ffc7 	bl	8000378 <__aeabi_dsub>
 80013ea:	4602      	mov	r2, r0
 80013ec:	460b      	mov	r3, r1
 80013ee:	4610      	mov	r0, r2
 80013f0:	4619      	mov	r1, r3
 80013f2:	f04f 0200 	mov.w	r2, #0
 80013f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013fa:	f7ff fa9f 	bl	800093c <__aeabi_ddiv>
 80013fe:	4602      	mov	r2, r0
 8001400:	460b      	mov	r3, r1
 8001402:	4620      	mov	r0, r4
 8001404:	4629      	mov	r1, r5
 8001406:	f7ff f96f 	bl	80006e8 <__aeabi_dmul>
 800140a:	4602      	mov	r2, r0
 800140c:	460b      	mov	r3, r1
 800140e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }

    Q = (K * A * pow(R, 2.0/3.0) * sqrt(S)) / n; // Flow rate in m^3/s
 8001412:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001416:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800141a:	f7ff f965 	bl	80006e8 <__aeabi_dmul>
 800141e:	4602      	mov	r2, r0
 8001420:	460b      	mov	r3, r1
 8001422:	4614      	mov	r4, r2
 8001424:	461d      	mov	r5, r3
 8001426:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8001490 <water_flow+0x1f8>
 800142a:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 800142e:	f00f f99f 	bl	8010770 <pow>
 8001432:	ec53 2b10 	vmov	r2, r3, d0
 8001436:	4620      	mov	r0, r4
 8001438:	4629      	mov	r1, r5
 800143a:	f7ff f955 	bl	80006e8 <__aeabi_dmul>
 800143e:	4602      	mov	r2, r0
 8001440:	460b      	mov	r3, r1
 8001442:	4614      	mov	r4, r2
 8001444:	461d      	mov	r5, r3
 8001446:	ed97 0b04 	vldr	d0, [r7, #16]
 800144a:	f00f fa01 	bl	8010850 <sqrt>
 800144e:	ec53 2b10 	vmov	r2, r3, d0
 8001452:	4620      	mov	r0, r4
 8001454:	4629      	mov	r1, r5
 8001456:	f7ff f947 	bl	80006e8 <__aeabi_dmul>
 800145a:	4602      	mov	r2, r0
 800145c:	460b      	mov	r3, r1
 800145e:	4610      	mov	r0, r2
 8001460:	4619      	mov	r1, r3
 8001462:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001466:	f7ff fa69 	bl	800093c <__aeabi_ddiv>
 800146a:	4602      	mov	r2, r0
 800146c:	460b      	mov	r3, r1
 800146e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    return Q;
 8001472:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001476:	f7ff fc0f 	bl	8000c98 <__aeabi_d2uiz>
 800147a:	4603      	mov	r3, r0
 800147c:	b29b      	uxth	r3, r3
}
 800147e:	4618      	mov	r0, r3
 8001480:	3750      	adds	r7, #80	; 0x50
 8001482:	46bd      	mov	sp, r7
 8001484:	bdb0      	pop	{r4, r5, r7, pc}
 8001486:	bf00      	nop
 8001488:	00000000 	.word	0x00000000
 800148c:	40000000 	.word	0x40000000
 8001490:	55555555 	.word	0x55555555
 8001494:	3fe55555 	.word	0x3fe55555
 8001498:	54442d18 	.word	0x54442d18
 800149c:	400921fb 	.word	0x400921fb

080014a0 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	60b9      	str	r1, [r7, #8]
 80014aa:	607a      	str	r2, [r7, #4]
	(void)file;
	HAL_UART_Transmit(&huart2, ptr, len, 0xFFFF);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	b29a      	uxth	r2, r3
 80014b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014b4:	68b9      	ldr	r1, [r7, #8]
 80014b6:	4804      	ldr	r0, [pc, #16]	; (80014c8 <_write+0x28>)
 80014b8:	f003 f9c6 	bl	8004848 <HAL_UART_Transmit>
	return len;
 80014bc:	687b      	ldr	r3, [r7, #4]
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3710      	adds	r7, #16
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	200003e8 	.word	0x200003e8

080014cc <update_configuration.1>:
{
  /* USER CODE BEGIN 1 */


	void update_configuration(acc_service_configuration_t envelope_configuration, float start_m, float length_m)
	{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	ed87 0a02 	vstr	s0, [r7, #8]
 80014d8:	edc7 0a01 	vstr	s1, [r7, #4]
 80014dc:	f8c7 c000 	str.w	ip, [r7]

		acc_service_profile_set(envelope_configuration, ACC_SERVICE_PROFILE_1);
 80014e0:	2101      	movs	r1, #1
 80014e2:	68f8      	ldr	r0, [r7, #12]
 80014e4:	f004 f920 	bl	8005728 <acc_service_profile_set>
		acc_service_requested_start_set(envelope_configuration, start_m);
 80014e8:	ed97 0a02 	vldr	s0, [r7, #8]
 80014ec:	68f8      	ldr	r0, [r7, #12]
 80014ee:	f003 ff97 	bl	8005420 <acc_service_requested_start_set>
		acc_service_requested_length_set(envelope_configuration, length_m);
 80014f2:	ed97 0a01 	vldr	s0, [r7, #4]
 80014f6:	68f8      	ldr	r0, [r7, #12]
 80014f8:	f003 ffa0 	bl	800543c <acc_service_requested_length_set>
	}
 80014fc:	bf00      	nop
 80014fe:	3710      	adds	r7, #16
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <main>:
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
int main(void)
 800150a:	f107 0310 	add.w	r3, r7, #16
 800150e:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001510:	f000 fe52 	bl	80021b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001514:	f000 fa88 	bl	8001a28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001518:	f000 fb46 	bl	8001ba8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800151c:	f000 fb14 	bl	8001b48 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8001520:	f000 fad4 	bl	8001acc <MX_SPI3_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_Delay(5000);
 8001524:	f241 3088 	movw	r0, #5000	; 0x1388
 8001528:	f000 fec2 	bl	80022b0 <HAL_Delay>
	  acc_example_service_envelope(0, NULL);
 800152c:	1d3b      	adds	r3, r7, #4
 800152e:	469c      	mov	ip, r3
 8001530:	2100      	movs	r1, #0
 8001532:	2000      	movs	r0, #0
 8001534:	f000 f828 	bl	8001588 <acc_example_service_envelope.0>
	  HAL_Delay(5000);
 8001538:	e7f4      	b.n	8001524 <main+0x20>
	...

0800153c <print_data.2>:
	{
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0
 8001542:	60f8      	str	r0, [r7, #12]
 8001544:	460b      	mov	r3, r1
 8001546:	817b      	strh	r3, [r7, #10]
 8001548:	f8c7 c004 	str.w	ip, [r7, #4]
		for (uint16_t i = 0; i < data_length; i++)
 800154c:	2300      	movs	r3, #0
 800154e:	82fb      	strh	r3, [r7, #22]
 8001550:	e00b      	b.n	800156a <print_data.2+0x2e>
			printf("%6u", (unsigned int)(data[i]));
 8001552:	8afb      	ldrh	r3, [r7, #22]
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	68fa      	ldr	r2, [r7, #12]
 8001558:	4413      	add	r3, r2
 800155a:	881b      	ldrh	r3, [r3, #0]
 800155c:	4619      	mov	r1, r3
 800155e:	4808      	ldr	r0, [pc, #32]	; (8001580 <print_data.2+0x44>)
 8001560:	f00d f82c 	bl	800e5bc <iprintf>
		for (uint16_t i = 0; i < data_length; i++)
 8001564:	8afb      	ldrh	r3, [r7, #22]
 8001566:	3301      	adds	r3, #1
 8001568:	82fb      	strh	r3, [r7, #22]
 800156a:	8afa      	ldrh	r2, [r7, #22]
 800156c:	897b      	ldrh	r3, [r7, #10]
 800156e:	429a      	cmp	r2, r3
 8001570:	d3ef      	bcc.n	8001552 <print_data.2+0x16>
		printf("\n");
 8001572:	200a      	movs	r0, #10
 8001574:	f00d f834 	bl	800e5e0 <putchar>
	}
 8001578:	bf00      	nop
 800157a:	3718      	adds	r7, #24
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	08012e7c 	.word	0x08012e7c
 8001584:	00000000 	.word	0x00000000

08001588 <acc_example_service_envelope.0>:
	{
 8001588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800158c:	b0ae      	sub	sp, #184	; 0xb8
 800158e:	af00      	add	r7, sp, #0
 8001590:	60f8      	str	r0, [r7, #12]
 8001592:	60b9      	str	r1, [r7, #8]
 8001594:	4666      	mov	r6, ip
 8001596:	f8c7 c004 	str.w	ip, [r7, #4]
 800159a:	466b      	mov	r3, sp
 800159c:	469a      	mov	sl, r3
		float start_m  = 0.2f;
 800159e:	4b52      	ldr	r3, [pc, #328]	; (80016e8 <acc_example_service_envelope.0+0x160>)
 80015a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		float length_m = 0.5f;
 80015a4:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80015a8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		const acc_hal_t *hal = acc_hal_integration_get_implementation();
 80015ac:	f7ff fdc4 	bl	8001138 <acc_hal_integration_get_implementation>
 80015b0:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
		if (!acc_rss_activate(hal))
 80015b4:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80015b8:	f003 fe9e 	bl	80052f8 <acc_rss_activate>
 80015bc:	4603      	mov	r3, r0
 80015be:	f083 0301 	eor.w	r3, r3, #1
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d004      	beq.n	80015d2 <acc_example_service_envelope.0+0x4a>
			printf("acc_rss_activate() failed\n");
 80015c8:	4848      	ldr	r0, [pc, #288]	; (80016ec <acc_example_service_envelope.0+0x164>)
 80015ca:	f00d f865 	bl	800e698 <puts>
			return EXIT_FAILURE;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e205      	b.n	80019de <acc_example_service_envelope.0+0x456>
		acc_service_configuration_t envelope_configuration = acc_service_envelope_configuration_create();
 80015d2:	f004 f9eb 	bl	80059ac <acc_service_envelope_configuration_create>
 80015d6:	4603      	mov	r3, r0
 80015d8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (envelope_configuration == NULL)
 80015da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d106      	bne.n	80015ee <acc_example_service_envelope.0+0x66>
			printf("acc_service_envelope_configuration_create() failed\n");
 80015e0:	4843      	ldr	r0, [pc, #268]	; (80016f0 <acc_example_service_envelope.0+0x168>)
 80015e2:	f00d f859 	bl	800e698 <puts>
			acc_rss_deactivate();
 80015e6:	f003 fec5 	bl	8005374 <acc_rss_deactivate>
			return EXIT_FAILURE;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e1f7      	b.n	80019de <acc_example_service_envelope.0+0x456>
		update_configuration(envelope_configuration, start_m, length_m);
 80015ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015f0:	46b4      	mov	ip, r6
 80015f2:	edd7 0a25 	vldr	s1, [r7, #148]	; 0x94
 80015f6:	ed97 0a26 	vldr	s0, [r7, #152]	; 0x98
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7ff ff66 	bl	80014cc <update_configuration.1>
		acc_service_handle_t handle = acc_service_create(envelope_configuration);
 8001600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001602:	4618      	mov	r0, r3
 8001604:	f004 faf2 	bl	8005bec <acc_service_create>
 8001608:	4603      	mov	r3, r0
 800160a:	627b      	str	r3, [r7, #36]	; 0x24
		if (handle == NULL)
 800160c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160e:	2b00      	cmp	r3, #0
 8001610:	d10b      	bne.n	800162a <acc_example_service_envelope.0+0xa2>
			printf("acc_service_create() failed\n");
 8001612:	4838      	ldr	r0, [pc, #224]	; (80016f4 <acc_example_service_envelope.0+0x16c>)
 8001614:	f00d f840 	bl	800e698 <puts>
			acc_service_envelope_configuration_destroy(&envelope_configuration);
 8001618:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800161c:	4618      	mov	r0, r3
 800161e:	f004 fa53 	bl	8005ac8 <acc_service_envelope_configuration_destroy>
			acc_rss_deactivate();
 8001622:	f003 fea7 	bl	8005374 <acc_rss_deactivate>
			return EXIT_FAILURE;
 8001626:	2301      	movs	r3, #1
 8001628:	e1d9      	b.n	80019de <acc_example_service_envelope.0+0x456>
		acc_service_envelope_configuration_destroy(&envelope_configuration);
 800162a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800162e:	4618      	mov	r0, r3
 8001630:	f004 fa4a 	bl	8005ac8 <acc_service_envelope_configuration_destroy>
		acc_service_envelope_metadata_t envelope_metadata = { 0 };
 8001634:	f107 0314 	add.w	r3, r7, #20
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	609a      	str	r2, [r3, #8]
 8001640:	60da      	str	r2, [r3, #12]
		acc_service_envelope_get_metadata(handle, &envelope_metadata);
 8001642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001644:	f107 0214 	add.w	r2, r7, #20
 8001648:	4611      	mov	r1, r2
 800164a:	4618      	mov	r0, r3
 800164c:	f004 fa4e 	bl	8005aec <acc_service_envelope_get_metadata>
		if (!acc_service_activate(handle))
 8001650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001652:	4618      	mov	r0, r3
 8001654:	f003 ff46 	bl	80054e4 <acc_service_activate>
 8001658:	4603      	mov	r3, r0
 800165a:	f083 0301 	eor.w	r3, r3, #1
 800165e:	b2db      	uxtb	r3, r3
 8001660:	2b00      	cmp	r3, #0
 8001662:	d00b      	beq.n	800167c <acc_example_service_envelope.0+0xf4>
			printf("acc_service_activate() failed\n");
 8001664:	4824      	ldr	r0, [pc, #144]	; (80016f8 <acc_example_service_envelope.0+0x170>)
 8001666:	f00d f817 	bl	800e698 <puts>
			acc_service_destroy(&handle);
 800166a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800166e:	4618      	mov	r0, r3
 8001670:	f004 fb30 	bl	8005cd4 <acc_service_destroy>
			acc_rss_deactivate();
 8001674:	f003 fe7e 	bl	8005374 <acc_rss_deactivate>
			return EXIT_FAILURE;
 8001678:	2301      	movs	r3, #1
 800167a:	e1b0      	b.n	80019de <acc_example_service_envelope.0+0x456>
		bool                               success    = true;
 800167c:	2301      	movs	r3, #1
 800167e:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
		const int                          iterations = 5;
 8001682:	2305      	movs	r3, #5
 8001684:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		uint16_t                           data[envelope_metadata.data_length];
 8001688:	8bb9      	ldrh	r1, [r7, #28]
 800168a:	460b      	mov	r3, r1
 800168c:	3b01      	subs	r3, #1
 800168e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001692:	b28b      	uxth	r3, r1
 8001694:	2200      	movs	r2, #0
 8001696:	4698      	mov	r8, r3
 8001698:	4691      	mov	r9, r2
 800169a:	f04f 0200 	mov.w	r2, #0
 800169e:	f04f 0300 	mov.w	r3, #0
 80016a2:	ea4f 1309 	mov.w	r3, r9, lsl #4
 80016a6:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 80016aa:	ea4f 1208 	mov.w	r2, r8, lsl #4
 80016ae:	b28b      	uxth	r3, r1
 80016b0:	2200      	movs	r2, #0
 80016b2:	461c      	mov	r4, r3
 80016b4:	4615      	mov	r5, r2
 80016b6:	f04f 0200 	mov.w	r2, #0
 80016ba:	f04f 0300 	mov.w	r3, #0
 80016be:	012b      	lsls	r3, r5, #4
 80016c0:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80016c4:	0122      	lsls	r2, r4, #4
 80016c6:	460b      	mov	r3, r1
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	3307      	adds	r3, #7
 80016cc:	08db      	lsrs	r3, r3, #3
 80016ce:	00db      	lsls	r3, r3, #3
 80016d0:	ebad 0d03 	sub.w	sp, sp, r3
 80016d4:	466b      	mov	r3, sp
 80016d6:	3301      	adds	r3, #1
 80016d8:	085b      	lsrs	r3, r3, #1
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		for (int i = 0; i < iterations; i++)
 80016e0:	2300      	movs	r3, #0
 80016e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80016e6:	e158      	b.n	800199a <acc_example_service_envelope.0+0x412>
 80016e8:	3e4ccccd 	.word	0x3e4ccccd
 80016ec:	08012e80 	.word	0x08012e80
 80016f0:	08012e9c 	.word	0x08012e9c
 80016f4:	08012ed0 	.word	0x08012ed0
 80016f8:	08012eec 	.word	0x08012eec
			success = acc_service_envelope_get_next(handle, data, envelope_metadata.data_length, &result_info);
 80016fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80016fe:	8bba      	ldrh	r2, [r7, #28]
 8001700:	f107 0310 	add.w	r3, r7, #16
 8001704:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8001708:	f004 fa12 	bl	8005b30 <acc_service_envelope_get_next>
 800170c:	4603      	mov	r3, r0
 800170e:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
			if (!success)
 8001712:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8001716:	f083 0301 	eor.w	r3, r3, #1
 800171a:	b2db      	uxtb	r3, r3
 800171c:	2b00      	cmp	r3, #0
 800171e:	f040 8144 	bne.w	80019aa <acc_example_service_envelope.0+0x422>
			int* peaks = mutliple_peak_detection(data, envelope_metadata.data_length);
 8001722:	8bbb      	ldrh	r3, [r7, #28]
 8001724:	4619      	mov	r1, r3
 8001726:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800172a:	f000 fad4 	bl	8001cd6 <mutliple_peak_detection>
 800172e:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
			print_data(data, envelope_metadata.data_length);
 8001732:	8bbb      	ldrh	r3, [r7, #28]
 8001734:	46b4      	mov	ip, r6
 8001736:	4619      	mov	r1, r3
 8001738:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800173c:	f7ff fefe 	bl	800153c <print_data.2>
		    printf("Peaks ");
 8001740:	48b1      	ldr	r0, [pc, #708]	; (8001a08 <acc_example_service_envelope.0+0x480>)
 8001742:	f00c ff3b 	bl	800e5bc <iprintf>
		    printf("%6u", (unsigned int)(peaks[0]));
 8001746:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4619      	mov	r1, r3
 800174e:	48af      	ldr	r0, [pc, #700]	; (8001a0c <acc_example_service_envelope.0+0x484>)
 8001750:	f00c ff34 	bl	800e5bc <iprintf>
			printf("%6u", (unsigned int)(peaks[1]));
 8001754:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001758:	3304      	adds	r3, #4
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4619      	mov	r1, r3
 800175e:	48ab      	ldr	r0, [pc, #684]	; (8001a0c <acc_example_service_envelope.0+0x484>)
 8001760:	f00c ff2c 	bl	800e5bc <iprintf>
			printf("\n");
 8001764:	200a      	movs	r0, #10
 8001766:	f00c ff3b 	bl	800e5e0 <putchar>
			double oldMin = 0;
 800176a:	f04f 0200 	mov.w	r2, #0
 800176e:	f04f 0300 	mov.w	r3, #0
 8001772:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
			double oldMax = envelope_metadata.data_length;
 8001776:	8bbb      	ldrh	r3, [r7, #28]
 8001778:	4618      	mov	r0, r3
 800177a:	f7fe ff3b 	bl	80005f4 <__aeabi_ui2d>
 800177e:	4602      	mov	r2, r0
 8001780:	460b      	mov	r3, r1
 8001782:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
			double newMin = start_m *100;
 8001786:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800178a:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 8001a10 <acc_example_service_envelope.0+0x488>
 800178e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001792:	ee17 0a90 	vmov	r0, s15
 8001796:	f7fe ff4f 	bl	8000638 <__aeabi_f2d>
 800179a:	4602      	mov	r2, r0
 800179c:	460b      	mov	r3, r1
 800179e:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			double newMax = (start_m + length_m)*100;
 80017a2:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80017a6:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80017aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017ae:	ed9f 7a98 	vldr	s14, [pc, #608]	; 8001a10 <acc_example_service_envelope.0+0x488>
 80017b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017b6:	ee17 0a90 	vmov	r0, s15
 80017ba:	f7fe ff3d 	bl	8000638 <__aeabi_f2d>
 80017be:	4602      	mov	r2, r0
 80017c0:	460b      	mov	r3, r1
 80017c2:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
			double radius = 6.5; // cm
 80017c6:	f04f 0200 	mov.w	r2, #0
 80017ca:	4b92      	ldr	r3, [pc, #584]	; (8001a14 <acc_example_service_envelope.0+0x48c>)
 80017cc:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
			double peak1 = (((peaks[0] - oldMin) / (oldMax - oldMin)) * (newMax - newMin) + newMin);
 80017d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7fe ff1c 	bl	8000614 <__aeabi_i2d>
 80017dc:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80017e0:	f7fe fdca 	bl	8000378 <__aeabi_dsub>
 80017e4:	4602      	mov	r2, r0
 80017e6:	460b      	mov	r3, r1
 80017e8:	4614      	mov	r4, r2
 80017ea:	461d      	mov	r5, r3
 80017ec:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80017f0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80017f4:	f7fe fdc0 	bl	8000378 <__aeabi_dsub>
 80017f8:	4602      	mov	r2, r0
 80017fa:	460b      	mov	r3, r1
 80017fc:	4620      	mov	r0, r4
 80017fe:	4629      	mov	r1, r5
 8001800:	f7ff f89c 	bl	800093c <__aeabi_ddiv>
 8001804:	4602      	mov	r2, r0
 8001806:	460b      	mov	r3, r1
 8001808:	4614      	mov	r4, r2
 800180a:	461d      	mov	r5, r3
 800180c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001810:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001814:	f7fe fdb0 	bl	8000378 <__aeabi_dsub>
 8001818:	4602      	mov	r2, r0
 800181a:	460b      	mov	r3, r1
 800181c:	4620      	mov	r0, r4
 800181e:	4629      	mov	r1, r5
 8001820:	f7fe ff62 	bl	80006e8 <__aeabi_dmul>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800182c:	f7fe fda6 	bl	800037c <__adddf3>
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
			double peak2 = (((peaks[1] - oldMin) / (oldMax - oldMin)) * (newMax - newMin) + newMin);
 8001838:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800183c:	3304      	adds	r3, #4
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4618      	mov	r0, r3
 8001842:	f7fe fee7 	bl	8000614 <__aeabi_i2d>
 8001846:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800184a:	f7fe fd95 	bl	8000378 <__aeabi_dsub>
 800184e:	4602      	mov	r2, r0
 8001850:	460b      	mov	r3, r1
 8001852:	4614      	mov	r4, r2
 8001854:	461d      	mov	r5, r3
 8001856:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800185a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800185e:	f7fe fd8b 	bl	8000378 <__aeabi_dsub>
 8001862:	4602      	mov	r2, r0
 8001864:	460b      	mov	r3, r1
 8001866:	4620      	mov	r0, r4
 8001868:	4629      	mov	r1, r5
 800186a:	f7ff f867 	bl	800093c <__aeabi_ddiv>
 800186e:	4602      	mov	r2, r0
 8001870:	460b      	mov	r3, r1
 8001872:	4614      	mov	r4, r2
 8001874:	461d      	mov	r5, r3
 8001876:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800187a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800187e:	f7fe fd7b 	bl	8000378 <__aeabi_dsub>
 8001882:	4602      	mov	r2, r0
 8001884:	460b      	mov	r3, r1
 8001886:	4620      	mov	r0, r4
 8001888:	4629      	mov	r1, r5
 800188a:	f7fe ff2d 	bl	80006e8 <__aeabi_dmul>
 800188e:	4602      	mov	r2, r0
 8001890:	460b      	mov	r3, r1
 8001892:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001896:	f7fe fd71 	bl	800037c <__adddf3>
 800189a:	4602      	mov	r2, r0
 800189c:	460b      	mov	r3, r1
 800189e:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
		    if (peak1 < peak2){
 80018a2:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80018a6:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80018aa:	f7ff f98f 	bl	8000bcc <__aeabi_dcmplt>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d00b      	beq.n	80018cc <acc_example_service_envelope.0+0x344>
		    	double temp = peak1;
 80018b4:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80018b8:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		    	peak1 = peak2;
 80018bc:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80018c0:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
		    	peak2 = temp;
 80018c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80018c8:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
		    uint16_t num_peaks = 2;
 80018cc:	2302      	movs	r3, #2
 80018ce:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
		    if (peak1 == newMin || peak2 == newMin){
 80018d2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80018d6:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80018da:	f7ff f96d 	bl	8000bb8 <__aeabi_dcmpeq>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d108      	bne.n	80018f6 <acc_example_service_envelope.0+0x36e>
 80018e4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80018e8:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80018ec:	f7ff f964 	bl	8000bb8 <__aeabi_dcmpeq>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d002      	beq.n	80018fc <acc_example_service_envelope.0+0x374>
		    	num_peaks = 1;
 80018f6:	2301      	movs	r3, #1
 80018f8:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
		    double value = 2*radius - (peak1 - peak2);
 80018fc:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	f7fe fd3a 	bl	800037c <__adddf3>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	4614      	mov	r4, r2
 800190e:	461d      	mov	r5, r3
 8001910:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8001914:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8001918:	f7fe fd2e 	bl	8000378 <__aeabi_dsub>
 800191c:	4602      	mov	r2, r0
 800191e:	460b      	mov	r3, r1
 8001920:	4620      	mov	r0, r4
 8001922:	4629      	mov	r1, r5
 8001924:	f7fe fd28 	bl	8000378 <__aeabi_dsub>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		    printf("Height");
 8001930:	4839      	ldr	r0, [pc, #228]	; (8001a18 <acc_example_service_envelope.0+0x490>)
 8001932:	f00c fe43 	bl	800e5bc <iprintf>
		    printf("%.2f",value);
 8001936:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800193a:	4838      	ldr	r0, [pc, #224]	; (8001a1c <acc_example_service_envelope.0+0x494>)
 800193c:	f00c fe3e 	bl	800e5bc <iprintf>
		    double K = 1.49; // Constant
 8001940:	a32b      	add	r3, pc, #172	; (adr r3, 80019f0 <acc_example_service_envelope.0+0x468>)
 8001942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001946:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
		    double S = 0.001; // Slope of the pipe, assumption.
 800194a:	a32b      	add	r3, pc, #172	; (adr r3, 80019f8 <acc_example_service_envelope.0+0x470>)
 800194c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001950:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
		    double n = 0.20; // Roughness coefficient, assumption.
 8001954:	a32a      	add	r3, pc, #168	; (adr r3, 8001a00 <acc_example_service_envelope.0+0x478>)
 8001956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800195a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		    uint16_t Q = water_flow(value, radius, K, S, n, num_peaks);
 800195e:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8001962:	4618      	mov	r0, r3
 8001964:	ed97 4b0c 	vldr	d4, [r7, #48]	; 0x30
 8001968:	ed97 3b0e 	vldr	d3, [r7, #56]	; 0x38
 800196c:	ed97 2b10 	vldr	d2, [r7, #64]	; 0x40
 8001970:	ed97 1b16 	vldr	d1, [r7, #88]	; 0x58
 8001974:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 8001978:	f7ff fc8e 	bl	8001298 <water_flow>
 800197c:	4603      	mov	r3, r0
 800197e:	85fb      	strh	r3, [r7, #46]	; 0x2e
			printf("Speed ");
 8001980:	4827      	ldr	r0, [pc, #156]	; (8001a20 <acc_example_service_envelope.0+0x498>)
 8001982:	f00c fe1b 	bl	800e5bc <iprintf>
		    printf("%6u\n", Q);
 8001986:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001988:	4619      	mov	r1, r3
 800198a:	4826      	ldr	r0, [pc, #152]	; (8001a24 <acc_example_service_envelope.0+0x49c>)
 800198c:	f00c fe16 	bl	800e5bc <iprintf>
		for (int i = 0; i < iterations; i++)
 8001990:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001994:	3301      	adds	r3, #1
 8001996:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800199a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800199e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80019a2:	429a      	cmp	r2, r3
 80019a4:	f6ff aeaa 	blt.w	80016fc <acc_example_service_envelope.0+0x174>
 80019a8:	e000      	b.n	80019ac <acc_example_service_envelope.0+0x424>
				break;
 80019aa:	bf00      	nop
		bool deactivated = acc_service_deactivate(handle);
 80019ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ae:	4618      	mov	r0, r3
 80019b0:	f003 fdda 	bl	8005568 <acc_service_deactivate>
 80019b4:	4603      	mov	r3, r0
 80019b6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		acc_service_destroy(&handle);
 80019ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019be:	4618      	mov	r0, r3
 80019c0:	f004 f988 	bl	8005cd4 <acc_service_destroy>
		acc_rss_deactivate();
 80019c4:	f003 fcd6 	bl	8005374 <acc_rss_deactivate>
		if (deactivated && success)
 80019c8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d005      	beq.n	80019dc <acc_example_service_envelope.0+0x454>
 80019d0:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <acc_example_service_envelope.0+0x454>
			return EXIT_SUCCESS;
 80019d8:	2300      	movs	r3, #0
 80019da:	e000      	b.n	80019de <acc_example_service_envelope.0+0x456>
		return EXIT_FAILURE;
 80019dc:	2301      	movs	r3, #1
 80019de:	46d5      	mov	sp, sl
	}
 80019e0:	4618      	mov	r0, r3
 80019e2:	37b8      	adds	r7, #184	; 0xb8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80019ea:	bf00      	nop
 80019ec:	f3af 8000 	nop.w
 80019f0:	3d70a3d7 	.word	0x3d70a3d7
 80019f4:	3ff7d70a 	.word	0x3ff7d70a
 80019f8:	d2f1a9fc 	.word	0xd2f1a9fc
 80019fc:	3f50624d 	.word	0x3f50624d
 8001a00:	9999999a 	.word	0x9999999a
 8001a04:	3fc99999 	.word	0x3fc99999
 8001a08:	08012f0c 	.word	0x08012f0c
 8001a0c:	08012e7c 	.word	0x08012e7c
 8001a10:	42c80000 	.word	0x42c80000
 8001a14:	401a0000 	.word	0x401a0000
 8001a18:	08012f14 	.word	0x08012f14
 8001a1c:	08012f1c 	.word	0x08012f1c
 8001a20:	08012f24 	.word	0x08012f24
 8001a24:	08012f2c 	.word	0x08012f2c

08001a28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b096      	sub	sp, #88	; 0x58
 8001a2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a2e:	f107 0314 	add.w	r3, r7, #20
 8001a32:	2244      	movs	r2, #68	; 0x44
 8001a34:	2100      	movs	r1, #0
 8001a36:	4618      	mov	r0, r3
 8001a38:	f00c ff62 	bl	800e900 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a3c:	463b      	mov	r3, r7
 8001a3e:	2200      	movs	r2, #0
 8001a40:	601a      	str	r2, [r3, #0]
 8001a42:	605a      	str	r2, [r3, #4]
 8001a44:	609a      	str	r2, [r3, #8]
 8001a46:	60da      	str	r2, [r3, #12]
 8001a48:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001a4a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001a4e:	f000 ff71 	bl	8002934 <HAL_PWREx_ControlVoltageScaling>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001a58:	f000 f938 	bl	8001ccc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a64:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a66:	2310      	movs	r3, #16
 8001a68:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a6e:	2302      	movs	r3, #2
 8001a70:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001a72:	2301      	movs	r3, #1
 8001a74:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001a76:	230a      	movs	r3, #10
 8001a78:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001a7a:	2307      	movs	r3, #7
 8001a7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a82:	2302      	movs	r3, #2
 8001a84:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a86:	f107 0314 	add.w	r3, r7, #20
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f000 ffa8 	bl	80029e0 <HAL_RCC_OscConfig>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001a96:	f000 f919 	bl	8001ccc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a9a:	230f      	movs	r3, #15
 8001a9c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001aae:	463b      	mov	r3, r7
 8001ab0:	2104      	movs	r1, #4
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f001 fb70 	bl	8003198 <HAL_RCC_ClockConfig>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001abe:	f000 f905 	bl	8001ccc <Error_Handler>
  }
}
 8001ac2:	bf00      	nop
 8001ac4:	3758      	adds	r7, #88	; 0x58
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
	...

08001acc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001ad0:	4b1b      	ldr	r3, [pc, #108]	; (8001b40 <MX_SPI3_Init+0x74>)
 8001ad2:	4a1c      	ldr	r2, [pc, #112]	; (8001b44 <MX_SPI3_Init+0x78>)
 8001ad4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001ad6:	4b1a      	ldr	r3, [pc, #104]	; (8001b40 <MX_SPI3_Init+0x74>)
 8001ad8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001adc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001ade:	4b18      	ldr	r3, [pc, #96]	; (8001b40 <MX_SPI3_Init+0x74>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ae4:	4b16      	ldr	r3, [pc, #88]	; (8001b40 <MX_SPI3_Init+0x74>)
 8001ae6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001aea:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001aec:	4b14      	ldr	r3, [pc, #80]	; (8001b40 <MX_SPI3_Init+0x74>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001af2:	4b13      	ldr	r3, [pc, #76]	; (8001b40 <MX_SPI3_Init+0x74>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001af8:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <MX_SPI3_Init+0x74>)
 8001afa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001afe:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001b00:	4b0f      	ldr	r3, [pc, #60]	; (8001b40 <MX_SPI3_Init+0x74>)
 8001b02:	2228      	movs	r2, #40	; 0x28
 8001b04:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b06:	4b0e      	ldr	r3, [pc, #56]	; (8001b40 <MX_SPI3_Init+0x74>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b0c:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <MX_SPI3_Init+0x74>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b12:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <MX_SPI3_Init+0x74>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001b18:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <MX_SPI3_Init+0x74>)
 8001b1a:	2207      	movs	r2, #7
 8001b1c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001b1e:	4b08      	ldr	r3, [pc, #32]	; (8001b40 <MX_SPI3_Init+0x74>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001b24:	4b06      	ldr	r3, [pc, #24]	; (8001b40 <MX_SPI3_Init+0x74>)
 8001b26:	2208      	movs	r2, #8
 8001b28:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001b2a:	4805      	ldr	r0, [pc, #20]	; (8001b40 <MX_SPI3_Init+0x74>)
 8001b2c:	f002 fa14 	bl	8003f58 <HAL_SPI_Init>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001b36:	f000 f8c9 	bl	8001ccc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20000384 	.word	0x20000384
 8001b44:	40003c00 	.word	0x40003c00

08001b48 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b4c:	4b14      	ldr	r3, [pc, #80]	; (8001ba0 <MX_USART2_UART_Init+0x58>)
 8001b4e:	4a15      	ldr	r2, [pc, #84]	; (8001ba4 <MX_USART2_UART_Init+0x5c>)
 8001b50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b52:	4b13      	ldr	r3, [pc, #76]	; (8001ba0 <MX_USART2_UART_Init+0x58>)
 8001b54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b5a:	4b11      	ldr	r3, [pc, #68]	; (8001ba0 <MX_USART2_UART_Init+0x58>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b60:	4b0f      	ldr	r3, [pc, #60]	; (8001ba0 <MX_USART2_UART_Init+0x58>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b66:	4b0e      	ldr	r3, [pc, #56]	; (8001ba0 <MX_USART2_UART_Init+0x58>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <MX_USART2_UART_Init+0x58>)
 8001b6e:	220c      	movs	r2, #12
 8001b70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b72:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <MX_USART2_UART_Init+0x58>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b78:	4b09      	ldr	r3, [pc, #36]	; (8001ba0 <MX_USART2_UART_Init+0x58>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b7e:	4b08      	ldr	r3, [pc, #32]	; (8001ba0 <MX_USART2_UART_Init+0x58>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b84:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <MX_USART2_UART_Init+0x58>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b8a:	4805      	ldr	r0, [pc, #20]	; (8001ba0 <MX_USART2_UART_Init+0x58>)
 8001b8c:	f002 fe0e 	bl	80047ac <HAL_UART_Init>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001b96:	f000 f899 	bl	8001ccc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	200003e8 	.word	0x200003e8
 8001ba4:	40004400 	.word	0x40004400

08001ba8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b08a      	sub	sp, #40	; 0x28
 8001bac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bae:	f107 0314 	add.w	r3, r7, #20
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	605a      	str	r2, [r3, #4]
 8001bb8:	609a      	str	r2, [r3, #8]
 8001bba:	60da      	str	r2, [r3, #12]
 8001bbc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bbe:	4b40      	ldr	r3, [pc, #256]	; (8001cc0 <MX_GPIO_Init+0x118>)
 8001bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bc2:	4a3f      	ldr	r2, [pc, #252]	; (8001cc0 <MX_GPIO_Init+0x118>)
 8001bc4:	f043 0304 	orr.w	r3, r3, #4
 8001bc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bca:	4b3d      	ldr	r3, [pc, #244]	; (8001cc0 <MX_GPIO_Init+0x118>)
 8001bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bce:	f003 0304 	and.w	r3, r3, #4
 8001bd2:	613b      	str	r3, [r7, #16]
 8001bd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bd6:	4b3a      	ldr	r3, [pc, #232]	; (8001cc0 <MX_GPIO_Init+0x118>)
 8001bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bda:	4a39      	ldr	r2, [pc, #228]	; (8001cc0 <MX_GPIO_Init+0x118>)
 8001bdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001be0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001be2:	4b37      	ldr	r3, [pc, #220]	; (8001cc0 <MX_GPIO_Init+0x118>)
 8001be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bee:	4b34      	ldr	r3, [pc, #208]	; (8001cc0 <MX_GPIO_Init+0x118>)
 8001bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf2:	4a33      	ldr	r2, [pc, #204]	; (8001cc0 <MX_GPIO_Init+0x118>)
 8001bf4:	f043 0301 	orr.w	r3, r3, #1
 8001bf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bfa:	4b31      	ldr	r3, [pc, #196]	; (8001cc0 <MX_GPIO_Init+0x118>)
 8001bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bfe:	f003 0301 	and.w	r3, r3, #1
 8001c02:	60bb      	str	r3, [r7, #8]
 8001c04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c06:	4b2e      	ldr	r3, [pc, #184]	; (8001cc0 <MX_GPIO_Init+0x118>)
 8001c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c0a:	4a2d      	ldr	r2, [pc, #180]	; (8001cc0 <MX_GPIO_Init+0x118>)
 8001c0c:	f043 0302 	orr.w	r3, r3, #2
 8001c10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c12:	4b2b      	ldr	r3, [pc, #172]	; (8001cc0 <MX_GPIO_Init+0x118>)
 8001c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	607b      	str	r3, [r7, #4]
 8001c1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001c1e:	2200      	movs	r2, #0
 8001c20:	2120      	movs	r1, #32
 8001c22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c26:	f000 fe3b 	bl	80028a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A111_ENABLE_Pin|A111_CS_N_Pin, GPIO_PIN_RESET);
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	2160      	movs	r1, #96	; 0x60
 8001c2e:	4825      	ldr	r0, [pc, #148]	; (8001cc4 <MX_GPIO_Init+0x11c>)
 8001c30:	f000 fe36 	bl	80028a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001c34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c3a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001c3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c40:	2300      	movs	r3, #0
 8001c42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001c44:	f107 0314 	add.w	r3, r7, #20
 8001c48:	4619      	mov	r1, r3
 8001c4a:	481f      	ldr	r0, [pc, #124]	; (8001cc8 <MX_GPIO_Init+0x120>)
 8001c4c:	f000 fc66 	bl	800251c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001c50:	2320      	movs	r3, #32
 8001c52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c54:	2301      	movs	r3, #1
 8001c56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001c60:	f107 0314 	add.w	r3, r7, #20
 8001c64:	4619      	mov	r1, r3
 8001c66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c6a:	f000 fc57 	bl	800251c <HAL_GPIO_Init>

  /*Configure GPIO pin : A111_SENSOR_INTERRUPT_Pin */
  GPIO_InitStruct.Pin = A111_SENSOR_INTERRUPT_Pin;
 8001c6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c74:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(A111_SENSOR_INTERRUPT_GPIO_Port, &GPIO_InitStruct);
 8001c7e:	f107 0314 	add.w	r3, r7, #20
 8001c82:	4619      	mov	r1, r3
 8001c84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c88:	f000 fc48 	bl	800251c <HAL_GPIO_Init>

  /*Configure GPIO pins : A111_ENABLE_Pin A111_CS_N_Pin */
  GPIO_InitStruct.Pin = A111_ENABLE_Pin|A111_CS_N_Pin;
 8001c8c:	2360      	movs	r3, #96	; 0x60
 8001c8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c90:	2301      	movs	r3, #1
 8001c92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c94:	2300      	movs	r3, #0
 8001c96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c9c:	f107 0314 	add.w	r3, r7, #20
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4808      	ldr	r0, [pc, #32]	; (8001cc4 <MX_GPIO_Init+0x11c>)
 8001ca4:	f000 fc3a 	bl	800251c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001ca8:	2200      	movs	r2, #0
 8001caa:	2100      	movs	r1, #0
 8001cac:	2017      	movs	r0, #23
 8001cae:	f000 fbfe 	bl	80024ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001cb2:	2017      	movs	r0, #23
 8001cb4:	f000 fc17 	bl	80024e6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001cb8:	bf00      	nop
 8001cba:	3728      	adds	r7, #40	; 0x28
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	48000400 	.word	0x48000400
 8001cc8:	48000800 	.word	0x48000800

08001ccc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001cd0:	b672      	cpsid	i
}
 8001cd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cd4:	e7fe      	b.n	8001cd4 <Error_Handler+0x8>

08001cd6 <mutliple_peak_detection>:

struct Tuple{
	int index;
	uint16_t value;
};
int* mutliple_peak_detection(uint16_t *data, uint16_t data_length){
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b08c      	sub	sp, #48	; 0x30
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
 8001cde:	460b      	mov	r3, r1
 8001ce0:	807b      	strh	r3, [r7, #2]

	uint16_t sum = 0;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	for (int i = 0; i < data_length; i++){
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cea:	e00a      	b.n	8001d02 <mutliple_peak_detection+0x2c>
		sum = sum + data[i];
 8001cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	881a      	ldrh	r2, [r3, #0]
 8001cf6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001cf8:	4413      	add	r3, r2
 8001cfa:	85fb      	strh	r3, [r7, #46]	; 0x2e
	for (int i = 0; i < data_length; i++){
 8001cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cfe:	3301      	adds	r3, #1
 8001d00:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d02:	887b      	ldrh	r3, [r7, #2]
 8001d04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d06:	429a      	cmp	r2, r3
 8001d08:	dbf0      	blt.n	8001cec <mutliple_peak_detection+0x16>

	}
	uint16_t baseline = sum/data_length;
 8001d0a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001d0c:	887b      	ldrh	r3, [r7, #2]
 8001d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d12:	847b      	strh	r3, [r7, #34]	; 0x22
	struct Tuple peaks[] = {
 8001d14:	f107 030c 	add.w	r3, r7, #12
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	605a      	str	r2, [r3, #4]
 8001d1e:	609a      	str	r2, [r3, #8]
 8001d20:	60da      	str	r2, [r3, #12]
						   {0,0},
						   {0,0}
	};

	for (int i = 0;i<data_length-5;i++){
 8001d22:	2300      	movs	r3, #0
 8001d24:	627b      	str	r3, [r7, #36]	; 0x24
 8001d26:	e055      	b.n	8001dd4 <mutliple_peak_detection+0xfe>
		if (data[i] > data[i-1] && data[i] > data[i+5]&& data[i] > baseline){
 8001d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	4413      	add	r3, r2
 8001d30:	881a      	ldrh	r2, [r3, #0]
 8001d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d34:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8001d38:	3b01      	subs	r3, #1
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	6879      	ldr	r1, [r7, #4]
 8001d3e:	440b      	add	r3, r1
 8001d40:	881b      	ldrh	r3, [r3, #0]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d943      	bls.n	8001dce <mutliple_peak_detection+0xf8>
 8001d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	881a      	ldrh	r2, [r3, #0]
 8001d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d52:	3305      	adds	r3, #5
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	6879      	ldr	r1, [r7, #4]
 8001d58:	440b      	add	r3, r1
 8001d5a:	881b      	ldrh	r3, [r3, #0]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d936      	bls.n	8001dce <mutliple_peak_detection+0xf8>
 8001d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	4413      	add	r3, r2
 8001d68:	881b      	ldrh	r3, [r3, #0]
 8001d6a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d22e      	bcs.n	8001dce <mutliple_peak_detection+0xf8>
			if (data[i] > peaks[0].value){
 8001d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	4413      	add	r3, r2
 8001d78:	881a      	ldrh	r2, [r3, #0]
 8001d7a:	8a3b      	ldrh	r3, [r7, #16]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d911      	bls.n	8001da4 <mutliple_peak_detection+0xce>
				if (i - peaks[0].index > 10){
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b0a      	cmp	r3, #10
 8001d88:	dd03      	ble.n	8001d92 <mutliple_peak_detection+0xbc>
					peaks[1].index = peaks[0].index;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	617b      	str	r3, [r7, #20]
					peaks[1].value = peaks[0].value;
 8001d8e:	8a3b      	ldrh	r3, [r7, #16]
 8001d90:	833b      	strh	r3, [r7, #24]
				}
				peaks[0].index = i;
 8001d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d94:	60fb      	str	r3, [r7, #12]
				peaks[0].value = data[i];
 8001d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	881b      	ldrh	r3, [r3, #0]
 8001da0:	823b      	strh	r3, [r7, #16]
 8001da2:	e014      	b.n	8001dce <mutliple_peak_detection+0xf8>
			}

			else if (data[i] > peaks[1].value && i - peaks[0].index > 10){
 8001da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	4413      	add	r3, r2
 8001dac:	881a      	ldrh	r2, [r3, #0]
 8001dae:	8b3b      	ldrh	r3, [r7, #24]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d90c      	bls.n	8001dce <mutliple_peak_detection+0xf8>
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b0a      	cmp	r3, #10
 8001dbc:	dd07      	ble.n	8001dce <mutliple_peak_detection+0xf8>
				peaks[1].index = i;
 8001dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc0:	617b      	str	r3, [r7, #20]
				peaks[1].value = data[i];
 8001dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	4413      	add	r3, r2
 8001dca:	881b      	ldrh	r3, [r3, #0]
 8001dcc:	833b      	strh	r3, [r7, #24]
	for (int i = 0;i<data_length-5;i++){
 8001dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	627b      	str	r3, [r7, #36]	; 0x24
 8001dd4:	887b      	ldrh	r3, [r7, #2]
 8001dd6:	3b05      	subs	r3, #5
 8001dd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	dba4      	blt.n	8001d28 <mutliple_peak_detection+0x52>
			}
		}
	}
	int* peakIndexes = (int*)malloc(2 * sizeof(int));
 8001dde:	2008      	movs	r0, #8
 8001de0:	f00b fd58 	bl	800d894 <malloc>
 8001de4:	4603      	mov	r3, r0
 8001de6:	61fb      	str	r3, [r7, #28]

	peakIndexes[0] = peaks[0].index;
 8001de8:	68fa      	ldr	r2, [r7, #12]
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	601a      	str	r2, [r3, #0]
	peakIndexes[1] = peaks[1].index;
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	3304      	adds	r3, #4
 8001df2:	697a      	ldr	r2, [r7, #20]
 8001df4:	601a      	str	r2, [r3, #0]

	return peakIndexes;
 8001df6:	69fb      	ldr	r3, [r7, #28]



}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3730      	adds	r7, #48	; 0x30
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e06:	4b0f      	ldr	r3, [pc, #60]	; (8001e44 <HAL_MspInit+0x44>)
 8001e08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e0a:	4a0e      	ldr	r2, [pc, #56]	; (8001e44 <HAL_MspInit+0x44>)
 8001e0c:	f043 0301 	orr.w	r3, r3, #1
 8001e10:	6613      	str	r3, [r2, #96]	; 0x60
 8001e12:	4b0c      	ldr	r3, [pc, #48]	; (8001e44 <HAL_MspInit+0x44>)
 8001e14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	607b      	str	r3, [r7, #4]
 8001e1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e1e:	4b09      	ldr	r3, [pc, #36]	; (8001e44 <HAL_MspInit+0x44>)
 8001e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e22:	4a08      	ldr	r2, [pc, #32]	; (8001e44 <HAL_MspInit+0x44>)
 8001e24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e28:	6593      	str	r3, [r2, #88]	; 0x58
 8001e2a:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <HAL_MspInit+0x44>)
 8001e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e32:	603b      	str	r3, [r7, #0]
 8001e34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e36:	bf00      	nop
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	40021000 	.word	0x40021000

08001e48 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b08a      	sub	sp, #40	; 0x28
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e50:	f107 0314 	add.w	r3, r7, #20
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	605a      	str	r2, [r3, #4]
 8001e5a:	609a      	str	r2, [r3, #8]
 8001e5c:	60da      	str	r2, [r3, #12]
 8001e5e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a17      	ldr	r2, [pc, #92]	; (8001ec4 <HAL_SPI_MspInit+0x7c>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d128      	bne.n	8001ebc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001e6a:	4b17      	ldr	r3, [pc, #92]	; (8001ec8 <HAL_SPI_MspInit+0x80>)
 8001e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e6e:	4a16      	ldr	r2, [pc, #88]	; (8001ec8 <HAL_SPI_MspInit+0x80>)
 8001e70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e74:	6593      	str	r3, [r2, #88]	; 0x58
 8001e76:	4b14      	ldr	r3, [pc, #80]	; (8001ec8 <HAL_SPI_MspInit+0x80>)
 8001e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e7e:	613b      	str	r3, [r7, #16]
 8001e80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e82:	4b11      	ldr	r3, [pc, #68]	; (8001ec8 <HAL_SPI_MspInit+0x80>)
 8001e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e86:	4a10      	ldr	r2, [pc, #64]	; (8001ec8 <HAL_SPI_MspInit+0x80>)
 8001e88:	f043 0304 	orr.w	r3, r3, #4
 8001e8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e8e:	4b0e      	ldr	r3, [pc, #56]	; (8001ec8 <HAL_SPI_MspInit+0x80>)
 8001e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e92:	f003 0304 	and.w	r3, r3, #4
 8001e96:	60fb      	str	r3, [r7, #12]
 8001e98:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = A111_SPI_SCK_Pin|A111_SPI_MISO_Pin|A111_SPI_MOSI_Pin;
 8001e9a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001e9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001eac:	2306      	movs	r3, #6
 8001eae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eb0:	f107 0314 	add.w	r3, r7, #20
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	4805      	ldr	r0, [pc, #20]	; (8001ecc <HAL_SPI_MspInit+0x84>)
 8001eb8:	f000 fb30 	bl	800251c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001ebc:	bf00      	nop
 8001ebe:	3728      	adds	r7, #40	; 0x28
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	40003c00 	.word	0x40003c00
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	48000800 	.word	0x48000800

08001ed0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b0ac      	sub	sp, #176	; 0xb0
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	605a      	str	r2, [r3, #4]
 8001ee2:	609a      	str	r2, [r3, #8]
 8001ee4:	60da      	str	r2, [r3, #12]
 8001ee6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ee8:	f107 0314 	add.w	r3, r7, #20
 8001eec:	2288      	movs	r2, #136	; 0x88
 8001eee:	2100      	movs	r1, #0
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f00c fd05 	bl	800e900 <memset>
  if(huart->Instance==USART2)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a21      	ldr	r2, [pc, #132]	; (8001f80 <HAL_UART_MspInit+0xb0>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d13b      	bne.n	8001f78 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001f00:	2302      	movs	r3, #2
 8001f02:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001f04:	2300      	movs	r3, #0
 8001f06:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f08:	f107 0314 	add.w	r3, r7, #20
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f001 fb67 	bl	80035e0 <HAL_RCCEx_PeriphCLKConfig>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001f18:	f7ff fed8 	bl	8001ccc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f1c:	4b19      	ldr	r3, [pc, #100]	; (8001f84 <HAL_UART_MspInit+0xb4>)
 8001f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f20:	4a18      	ldr	r2, [pc, #96]	; (8001f84 <HAL_UART_MspInit+0xb4>)
 8001f22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f26:	6593      	str	r3, [r2, #88]	; 0x58
 8001f28:	4b16      	ldr	r3, [pc, #88]	; (8001f84 <HAL_UART_MspInit+0xb4>)
 8001f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f30:	613b      	str	r3, [r7, #16]
 8001f32:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f34:	4b13      	ldr	r3, [pc, #76]	; (8001f84 <HAL_UART_MspInit+0xb4>)
 8001f36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f38:	4a12      	ldr	r2, [pc, #72]	; (8001f84 <HAL_UART_MspInit+0xb4>)
 8001f3a:	f043 0301 	orr.w	r3, r3, #1
 8001f3e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f40:	4b10      	ldr	r3, [pc, #64]	; (8001f84 <HAL_UART_MspInit+0xb4>)
 8001f42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f44:	f003 0301 	and.w	r3, r3, #1
 8001f48:	60fb      	str	r3, [r7, #12]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001f4c:	230c      	movs	r3, #12
 8001f4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f52:	2302      	movs	r3, #2
 8001f54:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f64:	2307      	movs	r3, #7
 8001f66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f6a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f6e:	4619      	mov	r1, r3
 8001f70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f74:	f000 fad2 	bl	800251c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f78:	bf00      	nop
 8001f7a:	37b0      	adds	r7, #176	; 0xb0
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	40004400 	.word	0x40004400
 8001f84:	40021000 	.word	0x40021000

08001f88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f8c:	e7fe      	b.n	8001f8c <NMI_Handler+0x4>

08001f8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f92:	e7fe      	b.n	8001f92 <HardFault_Handler+0x4>

08001f94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f98:	e7fe      	b.n	8001f98 <MemManage_Handler+0x4>

08001f9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f9e:	e7fe      	b.n	8001f9e <BusFault_Handler+0x4>

08001fa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fa4:	e7fe      	b.n	8001fa4 <UsageFault_Handler+0x4>

08001fa6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001faa:	bf00      	nop
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fb8:	bf00      	nop
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fc6:	bf00      	nop
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fd4:	f000 f94c 	bl	8002270 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fd8:	bf00      	nop
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(A111_SENSOR_INTERRUPT_Pin);
 8001fe0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001fe4:	f000 fc74 	bl	80028d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001fe8:	bf00      	nop
 8001fea:	bd80      	pop	{r7, pc}

08001fec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  return 1;
 8001ff0:	2301      	movs	r3, #1
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <_kill>:

int _kill(int pid, int sig)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002006:	f00c fcdd 	bl	800e9c4 <__errno>
 800200a:	4603      	mov	r3, r0
 800200c:	2216      	movs	r2, #22
 800200e:	601a      	str	r2, [r3, #0]
  return -1;
 8002010:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002014:	4618      	mov	r0, r3
 8002016:	3708      	adds	r7, #8
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}

0800201c <_exit>:

void _exit (int status)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002024:	f04f 31ff 	mov.w	r1, #4294967295
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f7ff ffe7 	bl	8001ffc <_kill>
  while (1) {}    /* Make sure we hang here */
 800202e:	e7fe      	b.n	800202e <_exit+0x12>

08002030 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800203c:	2300      	movs	r3, #0
 800203e:	617b      	str	r3, [r7, #20]
 8002040:	e00a      	b.n	8002058 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002042:	f3af 8000 	nop.w
 8002046:	4601      	mov	r1, r0
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	1c5a      	adds	r2, r3, #1
 800204c:	60ba      	str	r2, [r7, #8]
 800204e:	b2ca      	uxtb	r2, r1
 8002050:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	3301      	adds	r3, #1
 8002056:	617b      	str	r3, [r7, #20]
 8002058:	697a      	ldr	r2, [r7, #20]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	429a      	cmp	r2, r3
 800205e:	dbf0      	blt.n	8002042 <_read+0x12>
  }

  return len;
 8002060:	687b      	ldr	r3, [r7, #4]
}
 8002062:	4618      	mov	r0, r3
 8002064:	3718      	adds	r7, #24
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <_close>:
  }
  return len;
}

int _close(int file)
{
 800206a:	b480      	push	{r7}
 800206c:	b083      	sub	sp, #12
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002072:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002076:	4618      	mov	r0, r3
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr

08002082 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002082:	b480      	push	{r7}
 8002084:	b083      	sub	sp, #12
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
 800208a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002092:	605a      	str	r2, [r3, #4]
  return 0;
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr

080020a2 <_isatty>:

int _isatty(int file)
{
 80020a2:	b480      	push	{r7}
 80020a4:	b083      	sub	sp, #12
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020aa:	2301      	movs	r3, #1
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3714      	adds	r7, #20
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
	...

080020d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b086      	sub	sp, #24
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020dc:	4a14      	ldr	r2, [pc, #80]	; (8002130 <_sbrk+0x5c>)
 80020de:	4b15      	ldr	r3, [pc, #84]	; (8002134 <_sbrk+0x60>)
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020e8:	4b13      	ldr	r3, [pc, #76]	; (8002138 <_sbrk+0x64>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d102      	bne.n	80020f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020f0:	4b11      	ldr	r3, [pc, #68]	; (8002138 <_sbrk+0x64>)
 80020f2:	4a12      	ldr	r2, [pc, #72]	; (800213c <_sbrk+0x68>)
 80020f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020f6:	4b10      	ldr	r3, [pc, #64]	; (8002138 <_sbrk+0x64>)
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4413      	add	r3, r2
 80020fe:	693a      	ldr	r2, [r7, #16]
 8002100:	429a      	cmp	r2, r3
 8002102:	d207      	bcs.n	8002114 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002104:	f00c fc5e 	bl	800e9c4 <__errno>
 8002108:	4603      	mov	r3, r0
 800210a:	220c      	movs	r2, #12
 800210c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800210e:	f04f 33ff 	mov.w	r3, #4294967295
 8002112:	e009      	b.n	8002128 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002114:	4b08      	ldr	r3, [pc, #32]	; (8002138 <_sbrk+0x64>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800211a:	4b07      	ldr	r3, [pc, #28]	; (8002138 <_sbrk+0x64>)
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4413      	add	r3, r2
 8002122:	4a05      	ldr	r2, [pc, #20]	; (8002138 <_sbrk+0x64>)
 8002124:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002126:	68fb      	ldr	r3, [r7, #12]
}
 8002128:	4618      	mov	r0, r3
 800212a:	3718      	adds	r7, #24
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	20018000 	.word	0x20018000
 8002134:	00000400 	.word	0x00000400
 8002138:	20000470 	.word	0x20000470
 800213c:	20000680 	.word	0x20000680

08002140 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002144:	4b06      	ldr	r3, [pc, #24]	; (8002160 <SystemInit+0x20>)
 8002146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800214a:	4a05      	ldr	r2, [pc, #20]	; (8002160 <SystemInit+0x20>)
 800214c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002150:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002154:	bf00      	nop
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	e000ed00 	.word	0xe000ed00

08002164 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002164:	f8df d034 	ldr.w	sp, [pc, #52]	; 800219c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002168:	f7ff ffea 	bl	8002140 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800216c:	480c      	ldr	r0, [pc, #48]	; (80021a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800216e:	490d      	ldr	r1, [pc, #52]	; (80021a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002170:	4a0d      	ldr	r2, [pc, #52]	; (80021a8 <LoopForever+0xe>)
  movs r3, #0
 8002172:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002174:	e002      	b.n	800217c <LoopCopyDataInit>

08002176 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002176:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002178:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800217a:	3304      	adds	r3, #4

0800217c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800217c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800217e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002180:	d3f9      	bcc.n	8002176 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002182:	4a0a      	ldr	r2, [pc, #40]	; (80021ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8002184:	4c0a      	ldr	r4, [pc, #40]	; (80021b0 <LoopForever+0x16>)
  movs r3, #0
 8002186:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002188:	e001      	b.n	800218e <LoopFillZerobss>

0800218a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800218a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800218c:	3204      	adds	r2, #4

0800218e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800218e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002190:	d3fb      	bcc.n	800218a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002192:	f00c fc1d 	bl	800e9d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002196:	f7ff f9b5 	bl	8001504 <main>

0800219a <LoopForever>:

LoopForever:
    b LoopForever
 800219a:	e7fe      	b.n	800219a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800219c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80021a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021a4:	20000368 	.word	0x20000368
  ldr r2, =_sidata
 80021a8:	08018b30 	.word	0x08018b30
  ldr r2, =_sbss
 80021ac:	20000368 	.word	0x20000368
  ldr r4, =_ebss
 80021b0:	2000067c 	.word	0x2000067c

080021b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80021b4:	e7fe      	b.n	80021b4 <ADC1_2_IRQHandler>
	...

080021b8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80021be:	2300      	movs	r3, #0
 80021c0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021c2:	4b0c      	ldr	r3, [pc, #48]	; (80021f4 <HAL_Init+0x3c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a0b      	ldr	r2, [pc, #44]	; (80021f4 <HAL_Init+0x3c>)
 80021c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021cc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021ce:	2003      	movs	r0, #3
 80021d0:	f000 f962 	bl	8002498 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021d4:	2000      	movs	r0, #0
 80021d6:	f000 f80f 	bl	80021f8 <HAL_InitTick>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d002      	beq.n	80021e6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	71fb      	strb	r3, [r7, #7]
 80021e4:	e001      	b.n	80021ea <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80021e6:	f7ff fe0b 	bl	8001e00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80021ea:	79fb      	ldrb	r3, [r7, #7]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3708      	adds	r7, #8
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	40022000 	.word	0x40022000

080021f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002200:	2300      	movs	r3, #0
 8002202:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002204:	4b17      	ldr	r3, [pc, #92]	; (8002264 <HAL_InitTick+0x6c>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d023      	beq.n	8002254 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800220c:	4b16      	ldr	r3, [pc, #88]	; (8002268 <HAL_InitTick+0x70>)
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	4b14      	ldr	r3, [pc, #80]	; (8002264 <HAL_InitTick+0x6c>)
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	4619      	mov	r1, r3
 8002216:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800221a:	fbb3 f3f1 	udiv	r3, r3, r1
 800221e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002222:	4618      	mov	r0, r3
 8002224:	f000 f96d 	bl	8002502 <HAL_SYSTICK_Config>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d10f      	bne.n	800224e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2b0f      	cmp	r3, #15
 8002232:	d809      	bhi.n	8002248 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002234:	2200      	movs	r2, #0
 8002236:	6879      	ldr	r1, [r7, #4]
 8002238:	f04f 30ff 	mov.w	r0, #4294967295
 800223c:	f000 f937 	bl	80024ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002240:	4a0a      	ldr	r2, [pc, #40]	; (800226c <HAL_InitTick+0x74>)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6013      	str	r3, [r2, #0]
 8002246:	e007      	b.n	8002258 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	73fb      	strb	r3, [r7, #15]
 800224c:	e004      	b.n	8002258 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	73fb      	strb	r3, [r7, #15]
 8002252:	e001      	b.n	8002258 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002258:	7bfb      	ldrb	r3, [r7, #15]
}
 800225a:	4618      	mov	r0, r3
 800225c:	3710      	adds	r7, #16
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	20000008 	.word	0x20000008
 8002268:	20000000 	.word	0x20000000
 800226c:	20000004 	.word	0x20000004

08002270 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002274:	4b06      	ldr	r3, [pc, #24]	; (8002290 <HAL_IncTick+0x20>)
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	461a      	mov	r2, r3
 800227a:	4b06      	ldr	r3, [pc, #24]	; (8002294 <HAL_IncTick+0x24>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4413      	add	r3, r2
 8002280:	4a04      	ldr	r2, [pc, #16]	; (8002294 <HAL_IncTick+0x24>)
 8002282:	6013      	str	r3, [r2, #0]
}
 8002284:	bf00      	nop
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	20000008 	.word	0x20000008
 8002294:	20000474 	.word	0x20000474

08002298 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  return uwTick;
 800229c:	4b03      	ldr	r3, [pc, #12]	; (80022ac <HAL_GetTick+0x14>)
 800229e:	681b      	ldr	r3, [r3, #0]
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	20000474 	.word	0x20000474

080022b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022b8:	f7ff ffee 	bl	8002298 <HAL_GetTick>
 80022bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022c8:	d005      	beq.n	80022d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80022ca:	4b0a      	ldr	r3, [pc, #40]	; (80022f4 <HAL_Delay+0x44>)
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	461a      	mov	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	4413      	add	r3, r2
 80022d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022d6:	bf00      	nop
 80022d8:	f7ff ffde 	bl	8002298 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	68fa      	ldr	r2, [r7, #12]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d8f7      	bhi.n	80022d8 <HAL_Delay+0x28>
  {
  }
}
 80022e8:	bf00      	nop
 80022ea:	bf00      	nop
 80022ec:	3710      	adds	r7, #16
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	20000008 	.word	0x20000008

080022f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f003 0307 	and.w	r3, r3, #7
 8002306:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002308:	4b0c      	ldr	r3, [pc, #48]	; (800233c <__NVIC_SetPriorityGrouping+0x44>)
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800230e:	68ba      	ldr	r2, [r7, #8]
 8002310:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002314:	4013      	ands	r3, r2
 8002316:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002320:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002324:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002328:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800232a:	4a04      	ldr	r2, [pc, #16]	; (800233c <__NVIC_SetPriorityGrouping+0x44>)
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	60d3      	str	r3, [r2, #12]
}
 8002330:	bf00      	nop
 8002332:	3714      	adds	r7, #20
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr
 800233c:	e000ed00 	.word	0xe000ed00

08002340 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002344:	4b04      	ldr	r3, [pc, #16]	; (8002358 <__NVIC_GetPriorityGrouping+0x18>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	0a1b      	lsrs	r3, r3, #8
 800234a:	f003 0307 	and.w	r3, r3, #7
}
 800234e:	4618      	mov	r0, r3
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr
 8002358:	e000ed00 	.word	0xe000ed00

0800235c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	4603      	mov	r3, r0
 8002364:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236a:	2b00      	cmp	r3, #0
 800236c:	db0b      	blt.n	8002386 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800236e:	79fb      	ldrb	r3, [r7, #7]
 8002370:	f003 021f 	and.w	r2, r3, #31
 8002374:	4907      	ldr	r1, [pc, #28]	; (8002394 <__NVIC_EnableIRQ+0x38>)
 8002376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237a:	095b      	lsrs	r3, r3, #5
 800237c:	2001      	movs	r0, #1
 800237e:	fa00 f202 	lsl.w	r2, r0, r2
 8002382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002386:	bf00      	nop
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	e000e100 	.word	0xe000e100

08002398 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	4603      	mov	r3, r0
 80023a0:	6039      	str	r1, [r7, #0]
 80023a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	db0a      	blt.n	80023c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	b2da      	uxtb	r2, r3
 80023b0:	490c      	ldr	r1, [pc, #48]	; (80023e4 <__NVIC_SetPriority+0x4c>)
 80023b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b6:	0112      	lsls	r2, r2, #4
 80023b8:	b2d2      	uxtb	r2, r2
 80023ba:	440b      	add	r3, r1
 80023bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023c0:	e00a      	b.n	80023d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	b2da      	uxtb	r2, r3
 80023c6:	4908      	ldr	r1, [pc, #32]	; (80023e8 <__NVIC_SetPriority+0x50>)
 80023c8:	79fb      	ldrb	r3, [r7, #7]
 80023ca:	f003 030f 	and.w	r3, r3, #15
 80023ce:	3b04      	subs	r3, #4
 80023d0:	0112      	lsls	r2, r2, #4
 80023d2:	b2d2      	uxtb	r2, r2
 80023d4:	440b      	add	r3, r1
 80023d6:	761a      	strb	r2, [r3, #24]
}
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr
 80023e4:	e000e100 	.word	0xe000e100
 80023e8:	e000ed00 	.word	0xe000ed00

080023ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b089      	sub	sp, #36	; 0x24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f003 0307 	and.w	r3, r3, #7
 80023fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	f1c3 0307 	rsb	r3, r3, #7
 8002406:	2b04      	cmp	r3, #4
 8002408:	bf28      	it	cs
 800240a:	2304      	movcs	r3, #4
 800240c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	3304      	adds	r3, #4
 8002412:	2b06      	cmp	r3, #6
 8002414:	d902      	bls.n	800241c <NVIC_EncodePriority+0x30>
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	3b03      	subs	r3, #3
 800241a:	e000      	b.n	800241e <NVIC_EncodePriority+0x32>
 800241c:	2300      	movs	r3, #0
 800241e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002420:	f04f 32ff 	mov.w	r2, #4294967295
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	fa02 f303 	lsl.w	r3, r2, r3
 800242a:	43da      	mvns	r2, r3
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	401a      	ands	r2, r3
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002434:	f04f 31ff 	mov.w	r1, #4294967295
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	fa01 f303 	lsl.w	r3, r1, r3
 800243e:	43d9      	mvns	r1, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002444:	4313      	orrs	r3, r2
         );
}
 8002446:	4618      	mov	r0, r3
 8002448:	3724      	adds	r7, #36	; 0x24
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
	...

08002454 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	3b01      	subs	r3, #1
 8002460:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002464:	d301      	bcc.n	800246a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002466:	2301      	movs	r3, #1
 8002468:	e00f      	b.n	800248a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800246a:	4a0a      	ldr	r2, [pc, #40]	; (8002494 <SysTick_Config+0x40>)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	3b01      	subs	r3, #1
 8002470:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002472:	210f      	movs	r1, #15
 8002474:	f04f 30ff 	mov.w	r0, #4294967295
 8002478:	f7ff ff8e 	bl	8002398 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800247c:	4b05      	ldr	r3, [pc, #20]	; (8002494 <SysTick_Config+0x40>)
 800247e:	2200      	movs	r2, #0
 8002480:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002482:	4b04      	ldr	r3, [pc, #16]	; (8002494 <SysTick_Config+0x40>)
 8002484:	2207      	movs	r2, #7
 8002486:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	e000e010 	.word	0xe000e010

08002498 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f7ff ff29 	bl	80022f8 <__NVIC_SetPriorityGrouping>
}
 80024a6:	bf00      	nop
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b086      	sub	sp, #24
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	4603      	mov	r3, r0
 80024b6:	60b9      	str	r1, [r7, #8]
 80024b8:	607a      	str	r2, [r7, #4]
 80024ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80024bc:	2300      	movs	r3, #0
 80024be:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80024c0:	f7ff ff3e 	bl	8002340 <__NVIC_GetPriorityGrouping>
 80024c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	68b9      	ldr	r1, [r7, #8]
 80024ca:	6978      	ldr	r0, [r7, #20]
 80024cc:	f7ff ff8e 	bl	80023ec <NVIC_EncodePriority>
 80024d0:	4602      	mov	r2, r0
 80024d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024d6:	4611      	mov	r1, r2
 80024d8:	4618      	mov	r0, r3
 80024da:	f7ff ff5d 	bl	8002398 <__NVIC_SetPriority>
}
 80024de:	bf00      	nop
 80024e0:	3718      	adds	r7, #24
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b082      	sub	sp, #8
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	4603      	mov	r3, r0
 80024ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7ff ff31 	bl	800235c <__NVIC_EnableIRQ>
}
 80024fa:	bf00      	nop
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	b082      	sub	sp, #8
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f7ff ffa2 	bl	8002454 <SysTick_Config>
 8002510:	4603      	mov	r3, r0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
	...

0800251c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800251c:	b480      	push	{r7}
 800251e:	b087      	sub	sp, #28
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002526:	2300      	movs	r3, #0
 8002528:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800252a:	e17f      	b.n	800282c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	2101      	movs	r1, #1
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	fa01 f303 	lsl.w	r3, r1, r3
 8002538:	4013      	ands	r3, r2
 800253a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2b00      	cmp	r3, #0
 8002540:	f000 8171 	beq.w	8002826 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f003 0303 	and.w	r3, r3, #3
 800254c:	2b01      	cmp	r3, #1
 800254e:	d005      	beq.n	800255c <HAL_GPIO_Init+0x40>
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f003 0303 	and.w	r3, r3, #3
 8002558:	2b02      	cmp	r3, #2
 800255a:	d130      	bne.n	80025be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	2203      	movs	r2, #3
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	43db      	mvns	r3, r3
 800256e:	693a      	ldr	r2, [r7, #16]
 8002570:	4013      	ands	r3, r2
 8002572:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	68da      	ldr	r2, [r3, #12]
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	693a      	ldr	r2, [r7, #16]
 8002582:	4313      	orrs	r3, r2
 8002584:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	693a      	ldr	r2, [r7, #16]
 800258a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002592:	2201      	movs	r2, #1
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	fa02 f303 	lsl.w	r3, r2, r3
 800259a:	43db      	mvns	r3, r3
 800259c:	693a      	ldr	r2, [r7, #16]
 800259e:	4013      	ands	r3, r2
 80025a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	091b      	lsrs	r3, r3, #4
 80025a8:	f003 0201 	and.w	r2, r3, #1
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	fa02 f303 	lsl.w	r3, r2, r3
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f003 0303 	and.w	r3, r3, #3
 80025c6:	2b03      	cmp	r3, #3
 80025c8:	d118      	bne.n	80025fc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80025d0:	2201      	movs	r2, #1
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	43db      	mvns	r3, r3
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	4013      	ands	r3, r2
 80025de:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	08db      	lsrs	r3, r3, #3
 80025e6:	f003 0201 	and.w	r2, r3, #1
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	693a      	ldr	r2, [r7, #16]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	693a      	ldr	r2, [r7, #16]
 80025fa:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f003 0303 	and.w	r3, r3, #3
 8002604:	2b03      	cmp	r3, #3
 8002606:	d017      	beq.n	8002638 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	2203      	movs	r2, #3
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	43db      	mvns	r3, r3
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	4013      	ands	r3, r2
 800261e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	689a      	ldr	r2, [r3, #8]
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	005b      	lsls	r3, r3, #1
 8002628:	fa02 f303 	lsl.w	r3, r2, r3
 800262c:	693a      	ldr	r2, [r7, #16]
 800262e:	4313      	orrs	r3, r2
 8002630:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	693a      	ldr	r2, [r7, #16]
 8002636:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f003 0303 	and.w	r3, r3, #3
 8002640:	2b02      	cmp	r3, #2
 8002642:	d123      	bne.n	800268c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	08da      	lsrs	r2, r3, #3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	3208      	adds	r2, #8
 800264c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002650:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	f003 0307 	and.w	r3, r3, #7
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	220f      	movs	r2, #15
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	43db      	mvns	r3, r3
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	4013      	ands	r3, r2
 8002666:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	691a      	ldr	r2, [r3, #16]
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	f003 0307 	and.w	r3, r3, #7
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	693a      	ldr	r2, [r7, #16]
 800267a:	4313      	orrs	r3, r2
 800267c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	08da      	lsrs	r2, r3, #3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	3208      	adds	r2, #8
 8002686:	6939      	ldr	r1, [r7, #16]
 8002688:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	2203      	movs	r2, #3
 8002698:	fa02 f303 	lsl.w	r3, r2, r3
 800269c:	43db      	mvns	r3, r3
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	4013      	ands	r3, r2
 80026a2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f003 0203 	and.w	r2, r3, #3
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	693a      	ldr	r2, [r7, #16]
 80026be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	f000 80ac 	beq.w	8002826 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ce:	4b5f      	ldr	r3, [pc, #380]	; (800284c <HAL_GPIO_Init+0x330>)
 80026d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026d2:	4a5e      	ldr	r2, [pc, #376]	; (800284c <HAL_GPIO_Init+0x330>)
 80026d4:	f043 0301 	orr.w	r3, r3, #1
 80026d8:	6613      	str	r3, [r2, #96]	; 0x60
 80026da:	4b5c      	ldr	r3, [pc, #368]	; (800284c <HAL_GPIO_Init+0x330>)
 80026dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	60bb      	str	r3, [r7, #8]
 80026e4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80026e6:	4a5a      	ldr	r2, [pc, #360]	; (8002850 <HAL_GPIO_Init+0x334>)
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	089b      	lsrs	r3, r3, #2
 80026ec:	3302      	adds	r3, #2
 80026ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	f003 0303 	and.w	r3, r3, #3
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	220f      	movs	r2, #15
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	43db      	mvns	r3, r3
 8002704:	693a      	ldr	r2, [r7, #16]
 8002706:	4013      	ands	r3, r2
 8002708:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002710:	d025      	beq.n	800275e <HAL_GPIO_Init+0x242>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a4f      	ldr	r2, [pc, #316]	; (8002854 <HAL_GPIO_Init+0x338>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d01f      	beq.n	800275a <HAL_GPIO_Init+0x23e>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a4e      	ldr	r2, [pc, #312]	; (8002858 <HAL_GPIO_Init+0x33c>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d019      	beq.n	8002756 <HAL_GPIO_Init+0x23a>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a4d      	ldr	r2, [pc, #308]	; (800285c <HAL_GPIO_Init+0x340>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d013      	beq.n	8002752 <HAL_GPIO_Init+0x236>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a4c      	ldr	r2, [pc, #304]	; (8002860 <HAL_GPIO_Init+0x344>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d00d      	beq.n	800274e <HAL_GPIO_Init+0x232>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a4b      	ldr	r2, [pc, #300]	; (8002864 <HAL_GPIO_Init+0x348>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d007      	beq.n	800274a <HAL_GPIO_Init+0x22e>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a4a      	ldr	r2, [pc, #296]	; (8002868 <HAL_GPIO_Init+0x34c>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d101      	bne.n	8002746 <HAL_GPIO_Init+0x22a>
 8002742:	2306      	movs	r3, #6
 8002744:	e00c      	b.n	8002760 <HAL_GPIO_Init+0x244>
 8002746:	2307      	movs	r3, #7
 8002748:	e00a      	b.n	8002760 <HAL_GPIO_Init+0x244>
 800274a:	2305      	movs	r3, #5
 800274c:	e008      	b.n	8002760 <HAL_GPIO_Init+0x244>
 800274e:	2304      	movs	r3, #4
 8002750:	e006      	b.n	8002760 <HAL_GPIO_Init+0x244>
 8002752:	2303      	movs	r3, #3
 8002754:	e004      	b.n	8002760 <HAL_GPIO_Init+0x244>
 8002756:	2302      	movs	r3, #2
 8002758:	e002      	b.n	8002760 <HAL_GPIO_Init+0x244>
 800275a:	2301      	movs	r3, #1
 800275c:	e000      	b.n	8002760 <HAL_GPIO_Init+0x244>
 800275e:	2300      	movs	r3, #0
 8002760:	697a      	ldr	r2, [r7, #20]
 8002762:	f002 0203 	and.w	r2, r2, #3
 8002766:	0092      	lsls	r2, r2, #2
 8002768:	4093      	lsls	r3, r2
 800276a:	693a      	ldr	r2, [r7, #16]
 800276c:	4313      	orrs	r3, r2
 800276e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002770:	4937      	ldr	r1, [pc, #220]	; (8002850 <HAL_GPIO_Init+0x334>)
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	089b      	lsrs	r3, r3, #2
 8002776:	3302      	adds	r3, #2
 8002778:	693a      	ldr	r2, [r7, #16]
 800277a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800277e:	4b3b      	ldr	r3, [pc, #236]	; (800286c <HAL_GPIO_Init+0x350>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	43db      	mvns	r3, r3
 8002788:	693a      	ldr	r2, [r7, #16]
 800278a:	4013      	ands	r3, r2
 800278c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d003      	beq.n	80027a2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800279a:	693a      	ldr	r2, [r7, #16]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	4313      	orrs	r3, r2
 80027a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80027a2:	4a32      	ldr	r2, [pc, #200]	; (800286c <HAL_GPIO_Init+0x350>)
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80027a8:	4b30      	ldr	r3, [pc, #192]	; (800286c <HAL_GPIO_Init+0x350>)
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	43db      	mvns	r3, r3
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	4013      	ands	r3, r2
 80027b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d003      	beq.n	80027cc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80027c4:	693a      	ldr	r2, [r7, #16]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80027cc:	4a27      	ldr	r2, [pc, #156]	; (800286c <HAL_GPIO_Init+0x350>)
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80027d2:	4b26      	ldr	r3, [pc, #152]	; (800286c <HAL_GPIO_Init+0x350>)
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	43db      	mvns	r3, r3
 80027dc:	693a      	ldr	r2, [r7, #16]
 80027de:	4013      	ands	r3, r2
 80027e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d003      	beq.n	80027f6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80027ee:	693a      	ldr	r2, [r7, #16]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80027f6:	4a1d      	ldr	r2, [pc, #116]	; (800286c <HAL_GPIO_Init+0x350>)
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80027fc:	4b1b      	ldr	r3, [pc, #108]	; (800286c <HAL_GPIO_Init+0x350>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	43db      	mvns	r3, r3
 8002806:	693a      	ldr	r2, [r7, #16]
 8002808:	4013      	ands	r3, r2
 800280a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d003      	beq.n	8002820 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002818:	693a      	ldr	r2, [r7, #16]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	4313      	orrs	r3, r2
 800281e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002820:	4a12      	ldr	r2, [pc, #72]	; (800286c <HAL_GPIO_Init+0x350>)
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	3301      	adds	r3, #1
 800282a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	fa22 f303 	lsr.w	r3, r2, r3
 8002836:	2b00      	cmp	r3, #0
 8002838:	f47f ae78 	bne.w	800252c <HAL_GPIO_Init+0x10>
  }
}
 800283c:	bf00      	nop
 800283e:	bf00      	nop
 8002840:	371c      	adds	r7, #28
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	40021000 	.word	0x40021000
 8002850:	40010000 	.word	0x40010000
 8002854:	48000400 	.word	0x48000400
 8002858:	48000800 	.word	0x48000800
 800285c:	48000c00 	.word	0x48000c00
 8002860:	48001000 	.word	0x48001000
 8002864:	48001400 	.word	0x48001400
 8002868:	48001800 	.word	0x48001800
 800286c:	40010400 	.word	0x40010400

08002870 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	460b      	mov	r3, r1
 800287a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	691a      	ldr	r2, [r3, #16]
 8002880:	887b      	ldrh	r3, [r7, #2]
 8002882:	4013      	ands	r3, r2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d002      	beq.n	800288e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002888:	2301      	movs	r3, #1
 800288a:	73fb      	strb	r3, [r7, #15]
 800288c:	e001      	b.n	8002892 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800288e:	2300      	movs	r3, #0
 8002890:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002892:	7bfb      	ldrb	r3, [r7, #15]
}
 8002894:	4618      	mov	r0, r3
 8002896:	3714      	adds	r7, #20
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	460b      	mov	r3, r1
 80028aa:	807b      	strh	r3, [r7, #2]
 80028ac:	4613      	mov	r3, r2
 80028ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028b0:	787b      	ldrb	r3, [r7, #1]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d003      	beq.n	80028be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028b6:	887a      	ldrh	r2, [r7, #2]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80028bc:	e002      	b.n	80028c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028be:	887a      	ldrh	r2, [r7, #2]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80028c4:	bf00      	nop
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	4603      	mov	r3, r0
 80028d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80028da:	4b08      	ldr	r3, [pc, #32]	; (80028fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028dc:	695a      	ldr	r2, [r3, #20]
 80028de:	88fb      	ldrh	r3, [r7, #6]
 80028e0:	4013      	ands	r3, r2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d006      	beq.n	80028f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80028e6:	4a05      	ldr	r2, [pc, #20]	; (80028fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028e8:	88fb      	ldrh	r3, [r7, #6]
 80028ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80028ec:	88fb      	ldrh	r3, [r7, #6]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f000 f806 	bl	8002900 <HAL_GPIO_EXTI_Callback>
  }
}
 80028f4:	bf00      	nop
 80028f6:	3708      	adds	r7, #8
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	40010400 	.word	0x40010400

08002900 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	4603      	mov	r3, r0
 8002908:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800290a:	bf00      	nop
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
	...

08002918 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800291c:	4b04      	ldr	r3, [pc, #16]	; (8002930 <HAL_PWREx_GetVoltageRange+0x18>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002924:	4618      	mov	r0, r3
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	40007000 	.word	0x40007000

08002934 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002942:	d130      	bne.n	80029a6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002944:	4b23      	ldr	r3, [pc, #140]	; (80029d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800294c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002950:	d038      	beq.n	80029c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002952:	4b20      	ldr	r3, [pc, #128]	; (80029d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800295a:	4a1e      	ldr	r2, [pc, #120]	; (80029d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800295c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002960:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002962:	4b1d      	ldr	r3, [pc, #116]	; (80029d8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2232      	movs	r2, #50	; 0x32
 8002968:	fb02 f303 	mul.w	r3, r2, r3
 800296c:	4a1b      	ldr	r2, [pc, #108]	; (80029dc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800296e:	fba2 2303 	umull	r2, r3, r2, r3
 8002972:	0c9b      	lsrs	r3, r3, #18
 8002974:	3301      	adds	r3, #1
 8002976:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002978:	e002      	b.n	8002980 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	3b01      	subs	r3, #1
 800297e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002980:	4b14      	ldr	r3, [pc, #80]	; (80029d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002982:	695b      	ldr	r3, [r3, #20]
 8002984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002988:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800298c:	d102      	bne.n	8002994 <HAL_PWREx_ControlVoltageScaling+0x60>
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d1f2      	bne.n	800297a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002994:	4b0f      	ldr	r3, [pc, #60]	; (80029d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002996:	695b      	ldr	r3, [r3, #20]
 8002998:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800299c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029a0:	d110      	bne.n	80029c4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e00f      	b.n	80029c6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80029a6:	4b0b      	ldr	r3, [pc, #44]	; (80029d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80029ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029b2:	d007      	beq.n	80029c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80029b4:	4b07      	ldr	r3, [pc, #28]	; (80029d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80029bc:	4a05      	ldr	r2, [pc, #20]	; (80029d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029c2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3714      	adds	r7, #20
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	40007000 	.word	0x40007000
 80029d8:	20000000 	.word	0x20000000
 80029dc:	431bde83 	.word	0x431bde83

080029e0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b088      	sub	sp, #32
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e3ca      	b.n	8003188 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029f2:	4b97      	ldr	r3, [pc, #604]	; (8002c50 <HAL_RCC_OscConfig+0x270>)
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f003 030c 	and.w	r3, r3, #12
 80029fa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029fc:	4b94      	ldr	r3, [pc, #592]	; (8002c50 <HAL_RCC_OscConfig+0x270>)
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	f003 0303 	and.w	r3, r3, #3
 8002a04:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0310 	and.w	r3, r3, #16
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	f000 80e4 	beq.w	8002bdc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d007      	beq.n	8002a2a <HAL_RCC_OscConfig+0x4a>
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	2b0c      	cmp	r3, #12
 8002a1e:	f040 808b 	bne.w	8002b38 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	f040 8087 	bne.w	8002b38 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a2a:	4b89      	ldr	r3, [pc, #548]	; (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0302 	and.w	r3, r3, #2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d005      	beq.n	8002a42 <HAL_RCC_OscConfig+0x62>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d101      	bne.n	8002a42 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e3a2      	b.n	8003188 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a1a      	ldr	r2, [r3, #32]
 8002a46:	4b82      	ldr	r3, [pc, #520]	; (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0308 	and.w	r3, r3, #8
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d004      	beq.n	8002a5c <HAL_RCC_OscConfig+0x7c>
 8002a52:	4b7f      	ldr	r3, [pc, #508]	; (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a5a:	e005      	b.n	8002a68 <HAL_RCC_OscConfig+0x88>
 8002a5c:	4b7c      	ldr	r3, [pc, #496]	; (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002a5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a62:	091b      	lsrs	r3, r3, #4
 8002a64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d223      	bcs.n	8002ab4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a1b      	ldr	r3, [r3, #32]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f000 fd55 	bl	8003520 <RCC_SetFlashLatencyFromMSIRange>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d001      	beq.n	8002a80 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e383      	b.n	8003188 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a80:	4b73      	ldr	r3, [pc, #460]	; (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a72      	ldr	r2, [pc, #456]	; (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002a86:	f043 0308 	orr.w	r3, r3, #8
 8002a8a:	6013      	str	r3, [r2, #0]
 8002a8c:	4b70      	ldr	r3, [pc, #448]	; (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a1b      	ldr	r3, [r3, #32]
 8002a98:	496d      	ldr	r1, [pc, #436]	; (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a9e:	4b6c      	ldr	r3, [pc, #432]	; (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	69db      	ldr	r3, [r3, #28]
 8002aaa:	021b      	lsls	r3, r3, #8
 8002aac:	4968      	ldr	r1, [pc, #416]	; (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	604b      	str	r3, [r1, #4]
 8002ab2:	e025      	b.n	8002b00 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ab4:	4b66      	ldr	r3, [pc, #408]	; (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a65      	ldr	r2, [pc, #404]	; (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002aba:	f043 0308 	orr.w	r3, r3, #8
 8002abe:	6013      	str	r3, [r2, #0]
 8002ac0:	4b63      	ldr	r3, [pc, #396]	; (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6a1b      	ldr	r3, [r3, #32]
 8002acc:	4960      	ldr	r1, [pc, #384]	; (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ad2:	4b5f      	ldr	r3, [pc, #380]	; (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	69db      	ldr	r3, [r3, #28]
 8002ade:	021b      	lsls	r3, r3, #8
 8002ae0:	495b      	ldr	r1, [pc, #364]	; (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d109      	bne.n	8002b00 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a1b      	ldr	r3, [r3, #32]
 8002af0:	4618      	mov	r0, r3
 8002af2:	f000 fd15 	bl	8003520 <RCC_SetFlashLatencyFromMSIRange>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d001      	beq.n	8002b00 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e343      	b.n	8003188 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b00:	f000 fc4a 	bl	8003398 <HAL_RCC_GetSysClockFreq>
 8002b04:	4602      	mov	r2, r0
 8002b06:	4b52      	ldr	r3, [pc, #328]	; (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	091b      	lsrs	r3, r3, #4
 8002b0c:	f003 030f 	and.w	r3, r3, #15
 8002b10:	4950      	ldr	r1, [pc, #320]	; (8002c54 <HAL_RCC_OscConfig+0x274>)
 8002b12:	5ccb      	ldrb	r3, [r1, r3]
 8002b14:	f003 031f 	and.w	r3, r3, #31
 8002b18:	fa22 f303 	lsr.w	r3, r2, r3
 8002b1c:	4a4e      	ldr	r2, [pc, #312]	; (8002c58 <HAL_RCC_OscConfig+0x278>)
 8002b1e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b20:	4b4e      	ldr	r3, [pc, #312]	; (8002c5c <HAL_RCC_OscConfig+0x27c>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7ff fb67 	bl	80021f8 <HAL_InitTick>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002b2e:	7bfb      	ldrb	r3, [r7, #15]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d052      	beq.n	8002bda <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002b34:	7bfb      	ldrb	r3, [r7, #15]
 8002b36:	e327      	b.n	8003188 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	699b      	ldr	r3, [r3, #24]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d032      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b40:	4b43      	ldr	r3, [pc, #268]	; (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a42      	ldr	r2, [pc, #264]	; (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002b46:	f043 0301 	orr.w	r3, r3, #1
 8002b4a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b4c:	f7ff fba4 	bl	8002298 <HAL_GetTick>
 8002b50:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b52:	e008      	b.n	8002b66 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b54:	f7ff fba0 	bl	8002298 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e310      	b.n	8003188 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b66:	4b3a      	ldr	r3, [pc, #232]	; (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d0f0      	beq.n	8002b54 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b72:	4b37      	ldr	r3, [pc, #220]	; (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a36      	ldr	r2, [pc, #216]	; (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002b78:	f043 0308 	orr.w	r3, r3, #8
 8002b7c:	6013      	str	r3, [r2, #0]
 8002b7e:	4b34      	ldr	r3, [pc, #208]	; (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a1b      	ldr	r3, [r3, #32]
 8002b8a:	4931      	ldr	r1, [pc, #196]	; (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b90:	4b2f      	ldr	r3, [pc, #188]	; (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	69db      	ldr	r3, [r3, #28]
 8002b9c:	021b      	lsls	r3, r3, #8
 8002b9e:	492c      	ldr	r1, [pc, #176]	; (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	604b      	str	r3, [r1, #4]
 8002ba4:	e01a      	b.n	8002bdc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002ba6:	4b2a      	ldr	r3, [pc, #168]	; (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a29      	ldr	r2, [pc, #164]	; (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002bac:	f023 0301 	bic.w	r3, r3, #1
 8002bb0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002bb2:	f7ff fb71 	bl	8002298 <HAL_GetTick>
 8002bb6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bb8:	e008      	b.n	8002bcc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bba:	f7ff fb6d 	bl	8002298 <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d901      	bls.n	8002bcc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e2dd      	b.n	8003188 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bcc:	4b20      	ldr	r3, [pc, #128]	; (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d1f0      	bne.n	8002bba <HAL_RCC_OscConfig+0x1da>
 8002bd8:	e000      	b.n	8002bdc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002bda:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0301 	and.w	r3, r3, #1
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d074      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	2b08      	cmp	r3, #8
 8002bec:	d005      	beq.n	8002bfa <HAL_RCC_OscConfig+0x21a>
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	2b0c      	cmp	r3, #12
 8002bf2:	d10e      	bne.n	8002c12 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	2b03      	cmp	r3, #3
 8002bf8:	d10b      	bne.n	8002c12 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bfa:	4b15      	ldr	r3, [pc, #84]	; (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d064      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x2f0>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d160      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e2ba      	b.n	8003188 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c1a:	d106      	bne.n	8002c2a <HAL_RCC_OscConfig+0x24a>
 8002c1c:	4b0c      	ldr	r3, [pc, #48]	; (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a0b      	ldr	r2, [pc, #44]	; (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002c22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c26:	6013      	str	r3, [r2, #0]
 8002c28:	e026      	b.n	8002c78 <HAL_RCC_OscConfig+0x298>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c32:	d115      	bne.n	8002c60 <HAL_RCC_OscConfig+0x280>
 8002c34:	4b06      	ldr	r3, [pc, #24]	; (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a05      	ldr	r2, [pc, #20]	; (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002c3a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c3e:	6013      	str	r3, [r2, #0]
 8002c40:	4b03      	ldr	r3, [pc, #12]	; (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a02      	ldr	r2, [pc, #8]	; (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002c46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c4a:	6013      	str	r3, [r2, #0]
 8002c4c:	e014      	b.n	8002c78 <HAL_RCC_OscConfig+0x298>
 8002c4e:	bf00      	nop
 8002c50:	40021000 	.word	0x40021000
 8002c54:	08012f70 	.word	0x08012f70
 8002c58:	20000000 	.word	0x20000000
 8002c5c:	20000004 	.word	0x20000004
 8002c60:	4ba0      	ldr	r3, [pc, #640]	; (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a9f      	ldr	r2, [pc, #636]	; (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002c66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c6a:	6013      	str	r3, [r2, #0]
 8002c6c:	4b9d      	ldr	r3, [pc, #628]	; (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a9c      	ldr	r2, [pc, #624]	; (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002c72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d013      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c80:	f7ff fb0a 	bl	8002298 <HAL_GetTick>
 8002c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c86:	e008      	b.n	8002c9a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c88:	f7ff fb06 	bl	8002298 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b64      	cmp	r3, #100	; 0x64
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e276      	b.n	8003188 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c9a:	4b92      	ldr	r3, [pc, #584]	; (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d0f0      	beq.n	8002c88 <HAL_RCC_OscConfig+0x2a8>
 8002ca6:	e014      	b.n	8002cd2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca8:	f7ff faf6 	bl	8002298 <HAL_GetTick>
 8002cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cae:	e008      	b.n	8002cc2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cb0:	f7ff faf2 	bl	8002298 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b64      	cmp	r3, #100	; 0x64
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e262      	b.n	8003188 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cc2:	4b88      	ldr	r3, [pc, #544]	; (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d1f0      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x2d0>
 8002cce:	e000      	b.n	8002cd2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d060      	beq.n	8002da0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	2b04      	cmp	r3, #4
 8002ce2:	d005      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x310>
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	2b0c      	cmp	r3, #12
 8002ce8:	d119      	bne.n	8002d1e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d116      	bne.n	8002d1e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cf0:	4b7c      	ldr	r3, [pc, #496]	; (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d005      	beq.n	8002d08 <HAL_RCC_OscConfig+0x328>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d101      	bne.n	8002d08 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e23f      	b.n	8003188 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d08:	4b76      	ldr	r3, [pc, #472]	; (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	061b      	lsls	r3, r3, #24
 8002d16:	4973      	ldr	r1, [pc, #460]	; (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d1c:	e040      	b.n	8002da0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d023      	beq.n	8002d6e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d26:	4b6f      	ldr	r3, [pc, #444]	; (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a6e      	ldr	r2, [pc, #440]	; (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002d2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d32:	f7ff fab1 	bl	8002298 <HAL_GetTick>
 8002d36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d38:	e008      	b.n	8002d4c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d3a:	f7ff faad 	bl	8002298 <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d901      	bls.n	8002d4c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e21d      	b.n	8003188 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d4c:	4b65      	ldr	r3, [pc, #404]	; (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d0f0      	beq.n	8002d3a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d58:	4b62      	ldr	r3, [pc, #392]	; (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	691b      	ldr	r3, [r3, #16]
 8002d64:	061b      	lsls	r3, r3, #24
 8002d66:	495f      	ldr	r1, [pc, #380]	; (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	604b      	str	r3, [r1, #4]
 8002d6c:	e018      	b.n	8002da0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d6e:	4b5d      	ldr	r3, [pc, #372]	; (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a5c      	ldr	r2, [pc, #368]	; (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002d74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d7a:	f7ff fa8d 	bl	8002298 <HAL_GetTick>
 8002d7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d80:	e008      	b.n	8002d94 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d82:	f7ff fa89 	bl	8002298 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d901      	bls.n	8002d94 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e1f9      	b.n	8003188 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d94:	4b53      	ldr	r3, [pc, #332]	; (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d1f0      	bne.n	8002d82 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0308 	and.w	r3, r3, #8
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d03c      	beq.n	8002e26 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	695b      	ldr	r3, [r3, #20]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d01c      	beq.n	8002dee <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002db4:	4b4b      	ldr	r3, [pc, #300]	; (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002db6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dba:	4a4a      	ldr	r2, [pc, #296]	; (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002dbc:	f043 0301 	orr.w	r3, r3, #1
 8002dc0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc4:	f7ff fa68 	bl	8002298 <HAL_GetTick>
 8002dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dca:	e008      	b.n	8002dde <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dcc:	f7ff fa64 	bl	8002298 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e1d4      	b.n	8003188 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dde:	4b41      	ldr	r3, [pc, #260]	; (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002de0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002de4:	f003 0302 	and.w	r3, r3, #2
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d0ef      	beq.n	8002dcc <HAL_RCC_OscConfig+0x3ec>
 8002dec:	e01b      	b.n	8002e26 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dee:	4b3d      	ldr	r3, [pc, #244]	; (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002df0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002df4:	4a3b      	ldr	r2, [pc, #236]	; (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002df6:	f023 0301 	bic.w	r3, r3, #1
 8002dfa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dfe:	f7ff fa4b 	bl	8002298 <HAL_GetTick>
 8002e02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e04:	e008      	b.n	8002e18 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e06:	f7ff fa47 	bl	8002298 <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d901      	bls.n	8002e18 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e1b7      	b.n	8003188 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e18:	4b32      	ldr	r3, [pc, #200]	; (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002e1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d1ef      	bne.n	8002e06 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0304 	and.w	r3, r3, #4
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	f000 80a6 	beq.w	8002f80 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e34:	2300      	movs	r3, #0
 8002e36:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002e38:	4b2a      	ldr	r3, [pc, #168]	; (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d10d      	bne.n	8002e60 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e44:	4b27      	ldr	r3, [pc, #156]	; (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e48:	4a26      	ldr	r2, [pc, #152]	; (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002e4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e4e:	6593      	str	r3, [r2, #88]	; 0x58
 8002e50:	4b24      	ldr	r3, [pc, #144]	; (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e58:	60bb      	str	r3, [r7, #8]
 8002e5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e60:	4b21      	ldr	r3, [pc, #132]	; (8002ee8 <HAL_RCC_OscConfig+0x508>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d118      	bne.n	8002e9e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e6c:	4b1e      	ldr	r3, [pc, #120]	; (8002ee8 <HAL_RCC_OscConfig+0x508>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a1d      	ldr	r2, [pc, #116]	; (8002ee8 <HAL_RCC_OscConfig+0x508>)
 8002e72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e76:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e78:	f7ff fa0e 	bl	8002298 <HAL_GetTick>
 8002e7c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e7e:	e008      	b.n	8002e92 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e80:	f7ff fa0a 	bl	8002298 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e17a      	b.n	8003188 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e92:	4b15      	ldr	r3, [pc, #84]	; (8002ee8 <HAL_RCC_OscConfig+0x508>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d0f0      	beq.n	8002e80 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d108      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x4d8>
 8002ea6:	4b0f      	ldr	r3, [pc, #60]	; (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eac:	4a0d      	ldr	r2, [pc, #52]	; (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002eae:	f043 0301 	orr.w	r3, r3, #1
 8002eb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002eb6:	e029      	b.n	8002f0c <HAL_RCC_OscConfig+0x52c>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	2b05      	cmp	r3, #5
 8002ebe:	d115      	bne.n	8002eec <HAL_RCC_OscConfig+0x50c>
 8002ec0:	4b08      	ldr	r3, [pc, #32]	; (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec6:	4a07      	ldr	r2, [pc, #28]	; (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002ec8:	f043 0304 	orr.w	r3, r3, #4
 8002ecc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ed0:	4b04      	ldr	r3, [pc, #16]	; (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ed6:	4a03      	ldr	r2, [pc, #12]	; (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002ed8:	f043 0301 	orr.w	r3, r3, #1
 8002edc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ee0:	e014      	b.n	8002f0c <HAL_RCC_OscConfig+0x52c>
 8002ee2:	bf00      	nop
 8002ee4:	40021000 	.word	0x40021000
 8002ee8:	40007000 	.word	0x40007000
 8002eec:	4b9c      	ldr	r3, [pc, #624]	; (8003160 <HAL_RCC_OscConfig+0x780>)
 8002eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef2:	4a9b      	ldr	r2, [pc, #620]	; (8003160 <HAL_RCC_OscConfig+0x780>)
 8002ef4:	f023 0301 	bic.w	r3, r3, #1
 8002ef8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002efc:	4b98      	ldr	r3, [pc, #608]	; (8003160 <HAL_RCC_OscConfig+0x780>)
 8002efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f02:	4a97      	ldr	r2, [pc, #604]	; (8003160 <HAL_RCC_OscConfig+0x780>)
 8002f04:	f023 0304 	bic.w	r3, r3, #4
 8002f08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d016      	beq.n	8002f42 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f14:	f7ff f9c0 	bl	8002298 <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f1a:	e00a      	b.n	8002f32 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f1c:	f7ff f9bc 	bl	8002298 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e12a      	b.n	8003188 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f32:	4b8b      	ldr	r3, [pc, #556]	; (8003160 <HAL_RCC_OscConfig+0x780>)
 8002f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f38:	f003 0302 	and.w	r3, r3, #2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d0ed      	beq.n	8002f1c <HAL_RCC_OscConfig+0x53c>
 8002f40:	e015      	b.n	8002f6e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f42:	f7ff f9a9 	bl	8002298 <HAL_GetTick>
 8002f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f48:	e00a      	b.n	8002f60 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f4a:	f7ff f9a5 	bl	8002298 <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d901      	bls.n	8002f60 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e113      	b.n	8003188 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f60:	4b7f      	ldr	r3, [pc, #508]	; (8003160 <HAL_RCC_OscConfig+0x780>)
 8002f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d1ed      	bne.n	8002f4a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f6e:	7ffb      	ldrb	r3, [r7, #31]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d105      	bne.n	8002f80 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f74:	4b7a      	ldr	r3, [pc, #488]	; (8003160 <HAL_RCC_OscConfig+0x780>)
 8002f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f78:	4a79      	ldr	r2, [pc, #484]	; (8003160 <HAL_RCC_OscConfig+0x780>)
 8002f7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f7e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	f000 80fe 	beq.w	8003186 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	f040 80d0 	bne.w	8003134 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002f94:	4b72      	ldr	r3, [pc, #456]	; (8003160 <HAL_RCC_OscConfig+0x780>)
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	f003 0203 	and.w	r2, r3, #3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d130      	bne.n	800300a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d127      	bne.n	800300a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fc4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d11f      	bne.n	800300a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002fd4:	2a07      	cmp	r2, #7
 8002fd6:	bf14      	ite	ne
 8002fd8:	2201      	movne	r2, #1
 8002fda:	2200      	moveq	r2, #0
 8002fdc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d113      	bne.n	800300a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fec:	085b      	lsrs	r3, r3, #1
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d109      	bne.n	800300a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003000:	085b      	lsrs	r3, r3, #1
 8003002:	3b01      	subs	r3, #1
 8003004:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003006:	429a      	cmp	r2, r3
 8003008:	d06e      	beq.n	80030e8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	2b0c      	cmp	r3, #12
 800300e:	d069      	beq.n	80030e4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003010:	4b53      	ldr	r3, [pc, #332]	; (8003160 <HAL_RCC_OscConfig+0x780>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d105      	bne.n	8003028 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800301c:	4b50      	ldr	r3, [pc, #320]	; (8003160 <HAL_RCC_OscConfig+0x780>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d001      	beq.n	800302c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e0ad      	b.n	8003188 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800302c:	4b4c      	ldr	r3, [pc, #304]	; (8003160 <HAL_RCC_OscConfig+0x780>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a4b      	ldr	r2, [pc, #300]	; (8003160 <HAL_RCC_OscConfig+0x780>)
 8003032:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003036:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003038:	f7ff f92e 	bl	8002298 <HAL_GetTick>
 800303c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800303e:	e008      	b.n	8003052 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003040:	f7ff f92a 	bl	8002298 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e09a      	b.n	8003188 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003052:	4b43      	ldr	r3, [pc, #268]	; (8003160 <HAL_RCC_OscConfig+0x780>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d1f0      	bne.n	8003040 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800305e:	4b40      	ldr	r3, [pc, #256]	; (8003160 <HAL_RCC_OscConfig+0x780>)
 8003060:	68da      	ldr	r2, [r3, #12]
 8003062:	4b40      	ldr	r3, [pc, #256]	; (8003164 <HAL_RCC_OscConfig+0x784>)
 8003064:	4013      	ands	r3, r2
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800306e:	3a01      	subs	r2, #1
 8003070:	0112      	lsls	r2, r2, #4
 8003072:	4311      	orrs	r1, r2
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003078:	0212      	lsls	r2, r2, #8
 800307a:	4311      	orrs	r1, r2
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003080:	0852      	lsrs	r2, r2, #1
 8003082:	3a01      	subs	r2, #1
 8003084:	0552      	lsls	r2, r2, #21
 8003086:	4311      	orrs	r1, r2
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800308c:	0852      	lsrs	r2, r2, #1
 800308e:	3a01      	subs	r2, #1
 8003090:	0652      	lsls	r2, r2, #25
 8003092:	4311      	orrs	r1, r2
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003098:	0912      	lsrs	r2, r2, #4
 800309a:	0452      	lsls	r2, r2, #17
 800309c:	430a      	orrs	r2, r1
 800309e:	4930      	ldr	r1, [pc, #192]	; (8003160 <HAL_RCC_OscConfig+0x780>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80030a4:	4b2e      	ldr	r3, [pc, #184]	; (8003160 <HAL_RCC_OscConfig+0x780>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a2d      	ldr	r2, [pc, #180]	; (8003160 <HAL_RCC_OscConfig+0x780>)
 80030aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030ae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030b0:	4b2b      	ldr	r3, [pc, #172]	; (8003160 <HAL_RCC_OscConfig+0x780>)
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	4a2a      	ldr	r2, [pc, #168]	; (8003160 <HAL_RCC_OscConfig+0x780>)
 80030b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030ba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030bc:	f7ff f8ec 	bl	8002298 <HAL_GetTick>
 80030c0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030c2:	e008      	b.n	80030d6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030c4:	f7ff f8e8 	bl	8002298 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e058      	b.n	8003188 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030d6:	4b22      	ldr	r3, [pc, #136]	; (8003160 <HAL_RCC_OscConfig+0x780>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d0f0      	beq.n	80030c4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030e2:	e050      	b.n	8003186 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e04f      	b.n	8003188 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030e8:	4b1d      	ldr	r3, [pc, #116]	; (8003160 <HAL_RCC_OscConfig+0x780>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d148      	bne.n	8003186 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80030f4:	4b1a      	ldr	r3, [pc, #104]	; (8003160 <HAL_RCC_OscConfig+0x780>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a19      	ldr	r2, [pc, #100]	; (8003160 <HAL_RCC_OscConfig+0x780>)
 80030fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030fe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003100:	4b17      	ldr	r3, [pc, #92]	; (8003160 <HAL_RCC_OscConfig+0x780>)
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	4a16      	ldr	r2, [pc, #88]	; (8003160 <HAL_RCC_OscConfig+0x780>)
 8003106:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800310a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800310c:	f7ff f8c4 	bl	8002298 <HAL_GetTick>
 8003110:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003112:	e008      	b.n	8003126 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003114:	f7ff f8c0 	bl	8002298 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	2b02      	cmp	r3, #2
 8003120:	d901      	bls.n	8003126 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e030      	b.n	8003188 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003126:	4b0e      	ldr	r3, [pc, #56]	; (8003160 <HAL_RCC_OscConfig+0x780>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d0f0      	beq.n	8003114 <HAL_RCC_OscConfig+0x734>
 8003132:	e028      	b.n	8003186 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	2b0c      	cmp	r3, #12
 8003138:	d023      	beq.n	8003182 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800313a:	4b09      	ldr	r3, [pc, #36]	; (8003160 <HAL_RCC_OscConfig+0x780>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a08      	ldr	r2, [pc, #32]	; (8003160 <HAL_RCC_OscConfig+0x780>)
 8003140:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003144:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003146:	f7ff f8a7 	bl	8002298 <HAL_GetTick>
 800314a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800314c:	e00c      	b.n	8003168 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800314e:	f7ff f8a3 	bl	8002298 <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	2b02      	cmp	r3, #2
 800315a:	d905      	bls.n	8003168 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e013      	b.n	8003188 <HAL_RCC_OscConfig+0x7a8>
 8003160:	40021000 	.word	0x40021000
 8003164:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003168:	4b09      	ldr	r3, [pc, #36]	; (8003190 <HAL_RCC_OscConfig+0x7b0>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d1ec      	bne.n	800314e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003174:	4b06      	ldr	r3, [pc, #24]	; (8003190 <HAL_RCC_OscConfig+0x7b0>)
 8003176:	68da      	ldr	r2, [r3, #12]
 8003178:	4905      	ldr	r1, [pc, #20]	; (8003190 <HAL_RCC_OscConfig+0x7b0>)
 800317a:	4b06      	ldr	r3, [pc, #24]	; (8003194 <HAL_RCC_OscConfig+0x7b4>)
 800317c:	4013      	ands	r3, r2
 800317e:	60cb      	str	r3, [r1, #12]
 8003180:	e001      	b.n	8003186 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e000      	b.n	8003188 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003186:	2300      	movs	r3, #0
}
 8003188:	4618      	mov	r0, r3
 800318a:	3720      	adds	r7, #32
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	40021000 	.word	0x40021000
 8003194:	feeefffc 	.word	0xfeeefffc

08003198 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d101      	bne.n	80031ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e0e7      	b.n	800337c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031ac:	4b75      	ldr	r3, [pc, #468]	; (8003384 <HAL_RCC_ClockConfig+0x1ec>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0307 	and.w	r3, r3, #7
 80031b4:	683a      	ldr	r2, [r7, #0]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d910      	bls.n	80031dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ba:	4b72      	ldr	r3, [pc, #456]	; (8003384 <HAL_RCC_ClockConfig+0x1ec>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f023 0207 	bic.w	r2, r3, #7
 80031c2:	4970      	ldr	r1, [pc, #448]	; (8003384 <HAL_RCC_ClockConfig+0x1ec>)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ca:	4b6e      	ldr	r3, [pc, #440]	; (8003384 <HAL_RCC_ClockConfig+0x1ec>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0307 	and.w	r3, r3, #7
 80031d2:	683a      	ldr	r2, [r7, #0]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d001      	beq.n	80031dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e0cf      	b.n	800337c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0302 	and.w	r3, r3, #2
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d010      	beq.n	800320a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	689a      	ldr	r2, [r3, #8]
 80031ec:	4b66      	ldr	r3, [pc, #408]	; (8003388 <HAL_RCC_ClockConfig+0x1f0>)
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d908      	bls.n	800320a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031f8:	4b63      	ldr	r3, [pc, #396]	; (8003388 <HAL_RCC_ClockConfig+0x1f0>)
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	4960      	ldr	r1, [pc, #384]	; (8003388 <HAL_RCC_ClockConfig+0x1f0>)
 8003206:	4313      	orrs	r3, r2
 8003208:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	2b00      	cmp	r3, #0
 8003214:	d04c      	beq.n	80032b0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	2b03      	cmp	r3, #3
 800321c:	d107      	bne.n	800322e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800321e:	4b5a      	ldr	r3, [pc, #360]	; (8003388 <HAL_RCC_ClockConfig+0x1f0>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d121      	bne.n	800326e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e0a6      	b.n	800337c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	2b02      	cmp	r3, #2
 8003234:	d107      	bne.n	8003246 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003236:	4b54      	ldr	r3, [pc, #336]	; (8003388 <HAL_RCC_ClockConfig+0x1f0>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d115      	bne.n	800326e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e09a      	b.n	800337c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d107      	bne.n	800325e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800324e:	4b4e      	ldr	r3, [pc, #312]	; (8003388 <HAL_RCC_ClockConfig+0x1f0>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	2b00      	cmp	r3, #0
 8003258:	d109      	bne.n	800326e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e08e      	b.n	800337c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800325e:	4b4a      	ldr	r3, [pc, #296]	; (8003388 <HAL_RCC_ClockConfig+0x1f0>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003266:	2b00      	cmp	r3, #0
 8003268:	d101      	bne.n	800326e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e086      	b.n	800337c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800326e:	4b46      	ldr	r3, [pc, #280]	; (8003388 <HAL_RCC_ClockConfig+0x1f0>)
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f023 0203 	bic.w	r2, r3, #3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	4943      	ldr	r1, [pc, #268]	; (8003388 <HAL_RCC_ClockConfig+0x1f0>)
 800327c:	4313      	orrs	r3, r2
 800327e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003280:	f7ff f80a 	bl	8002298 <HAL_GetTick>
 8003284:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003286:	e00a      	b.n	800329e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003288:	f7ff f806 	bl	8002298 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	f241 3288 	movw	r2, #5000	; 0x1388
 8003296:	4293      	cmp	r3, r2
 8003298:	d901      	bls.n	800329e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e06e      	b.n	800337c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800329e:	4b3a      	ldr	r3, [pc, #232]	; (8003388 <HAL_RCC_ClockConfig+0x1f0>)
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f003 020c 	and.w	r2, r3, #12
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d1eb      	bne.n	8003288 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0302 	and.w	r3, r3, #2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d010      	beq.n	80032de <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689a      	ldr	r2, [r3, #8]
 80032c0:	4b31      	ldr	r3, [pc, #196]	; (8003388 <HAL_RCC_ClockConfig+0x1f0>)
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d208      	bcs.n	80032de <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032cc:	4b2e      	ldr	r3, [pc, #184]	; (8003388 <HAL_RCC_ClockConfig+0x1f0>)
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	492b      	ldr	r1, [pc, #172]	; (8003388 <HAL_RCC_ClockConfig+0x1f0>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032de:	4b29      	ldr	r3, [pc, #164]	; (8003384 <HAL_RCC_ClockConfig+0x1ec>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0307 	and.w	r3, r3, #7
 80032e6:	683a      	ldr	r2, [r7, #0]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d210      	bcs.n	800330e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ec:	4b25      	ldr	r3, [pc, #148]	; (8003384 <HAL_RCC_ClockConfig+0x1ec>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f023 0207 	bic.w	r2, r3, #7
 80032f4:	4923      	ldr	r1, [pc, #140]	; (8003384 <HAL_RCC_ClockConfig+0x1ec>)
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032fc:	4b21      	ldr	r3, [pc, #132]	; (8003384 <HAL_RCC_ClockConfig+0x1ec>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0307 	and.w	r3, r3, #7
 8003304:	683a      	ldr	r2, [r7, #0]
 8003306:	429a      	cmp	r2, r3
 8003308:	d001      	beq.n	800330e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e036      	b.n	800337c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0304 	and.w	r3, r3, #4
 8003316:	2b00      	cmp	r3, #0
 8003318:	d008      	beq.n	800332c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800331a:	4b1b      	ldr	r3, [pc, #108]	; (8003388 <HAL_RCC_ClockConfig+0x1f0>)
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	4918      	ldr	r1, [pc, #96]	; (8003388 <HAL_RCC_ClockConfig+0x1f0>)
 8003328:	4313      	orrs	r3, r2
 800332a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0308 	and.w	r3, r3, #8
 8003334:	2b00      	cmp	r3, #0
 8003336:	d009      	beq.n	800334c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003338:	4b13      	ldr	r3, [pc, #76]	; (8003388 <HAL_RCC_ClockConfig+0x1f0>)
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	691b      	ldr	r3, [r3, #16]
 8003344:	00db      	lsls	r3, r3, #3
 8003346:	4910      	ldr	r1, [pc, #64]	; (8003388 <HAL_RCC_ClockConfig+0x1f0>)
 8003348:	4313      	orrs	r3, r2
 800334a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800334c:	f000 f824 	bl	8003398 <HAL_RCC_GetSysClockFreq>
 8003350:	4602      	mov	r2, r0
 8003352:	4b0d      	ldr	r3, [pc, #52]	; (8003388 <HAL_RCC_ClockConfig+0x1f0>)
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	091b      	lsrs	r3, r3, #4
 8003358:	f003 030f 	and.w	r3, r3, #15
 800335c:	490b      	ldr	r1, [pc, #44]	; (800338c <HAL_RCC_ClockConfig+0x1f4>)
 800335e:	5ccb      	ldrb	r3, [r1, r3]
 8003360:	f003 031f 	and.w	r3, r3, #31
 8003364:	fa22 f303 	lsr.w	r3, r2, r3
 8003368:	4a09      	ldr	r2, [pc, #36]	; (8003390 <HAL_RCC_ClockConfig+0x1f8>)
 800336a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800336c:	4b09      	ldr	r3, [pc, #36]	; (8003394 <HAL_RCC_ClockConfig+0x1fc>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4618      	mov	r0, r3
 8003372:	f7fe ff41 	bl	80021f8 <HAL_InitTick>
 8003376:	4603      	mov	r3, r0
 8003378:	72fb      	strb	r3, [r7, #11]

  return status;
 800337a:	7afb      	ldrb	r3, [r7, #11]
}
 800337c:	4618      	mov	r0, r3
 800337e:	3710      	adds	r7, #16
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	40022000 	.word	0x40022000
 8003388:	40021000 	.word	0x40021000
 800338c:	08012f70 	.word	0x08012f70
 8003390:	20000000 	.word	0x20000000
 8003394:	20000004 	.word	0x20000004

08003398 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003398:	b480      	push	{r7}
 800339a:	b089      	sub	sp, #36	; 0x24
 800339c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800339e:	2300      	movs	r3, #0
 80033a0:	61fb      	str	r3, [r7, #28]
 80033a2:	2300      	movs	r3, #0
 80033a4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033a6:	4b3e      	ldr	r3, [pc, #248]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f003 030c 	and.w	r3, r3, #12
 80033ae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033b0:	4b3b      	ldr	r3, [pc, #236]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	f003 0303 	and.w	r3, r3, #3
 80033b8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d005      	beq.n	80033cc <HAL_RCC_GetSysClockFreq+0x34>
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	2b0c      	cmp	r3, #12
 80033c4:	d121      	bne.n	800340a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d11e      	bne.n	800340a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80033cc:	4b34      	ldr	r3, [pc, #208]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0308 	and.w	r3, r3, #8
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d107      	bne.n	80033e8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80033d8:	4b31      	ldr	r3, [pc, #196]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80033da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033de:	0a1b      	lsrs	r3, r3, #8
 80033e0:	f003 030f 	and.w	r3, r3, #15
 80033e4:	61fb      	str	r3, [r7, #28]
 80033e6:	e005      	b.n	80033f4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80033e8:	4b2d      	ldr	r3, [pc, #180]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	091b      	lsrs	r3, r3, #4
 80033ee:	f003 030f 	and.w	r3, r3, #15
 80033f2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80033f4:	4a2b      	ldr	r2, [pc, #172]	; (80034a4 <HAL_RCC_GetSysClockFreq+0x10c>)
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033fc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d10d      	bne.n	8003420 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003408:	e00a      	b.n	8003420 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	2b04      	cmp	r3, #4
 800340e:	d102      	bne.n	8003416 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003410:	4b25      	ldr	r3, [pc, #148]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003412:	61bb      	str	r3, [r7, #24]
 8003414:	e004      	b.n	8003420 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	2b08      	cmp	r3, #8
 800341a:	d101      	bne.n	8003420 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800341c:	4b23      	ldr	r3, [pc, #140]	; (80034ac <HAL_RCC_GetSysClockFreq+0x114>)
 800341e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	2b0c      	cmp	r3, #12
 8003424:	d134      	bne.n	8003490 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003426:	4b1e      	ldr	r3, [pc, #120]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	f003 0303 	and.w	r3, r3, #3
 800342e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	2b02      	cmp	r3, #2
 8003434:	d003      	beq.n	800343e <HAL_RCC_GetSysClockFreq+0xa6>
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	2b03      	cmp	r3, #3
 800343a:	d003      	beq.n	8003444 <HAL_RCC_GetSysClockFreq+0xac>
 800343c:	e005      	b.n	800344a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800343e:	4b1a      	ldr	r3, [pc, #104]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003440:	617b      	str	r3, [r7, #20]
      break;
 8003442:	e005      	b.n	8003450 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003444:	4b19      	ldr	r3, [pc, #100]	; (80034ac <HAL_RCC_GetSysClockFreq+0x114>)
 8003446:	617b      	str	r3, [r7, #20]
      break;
 8003448:	e002      	b.n	8003450 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	617b      	str	r3, [r7, #20]
      break;
 800344e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003450:	4b13      	ldr	r3, [pc, #76]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	091b      	lsrs	r3, r3, #4
 8003456:	f003 0307 	and.w	r3, r3, #7
 800345a:	3301      	adds	r3, #1
 800345c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800345e:	4b10      	ldr	r3, [pc, #64]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	0a1b      	lsrs	r3, r3, #8
 8003464:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003468:	697a      	ldr	r2, [r7, #20]
 800346a:	fb03 f202 	mul.w	r2, r3, r2
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	fbb2 f3f3 	udiv	r3, r2, r3
 8003474:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003476:	4b0a      	ldr	r3, [pc, #40]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	0e5b      	lsrs	r3, r3, #25
 800347c:	f003 0303 	and.w	r3, r3, #3
 8003480:	3301      	adds	r3, #1
 8003482:	005b      	lsls	r3, r3, #1
 8003484:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003486:	697a      	ldr	r2, [r7, #20]
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	fbb2 f3f3 	udiv	r3, r2, r3
 800348e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003490:	69bb      	ldr	r3, [r7, #24]
}
 8003492:	4618      	mov	r0, r3
 8003494:	3724      	adds	r7, #36	; 0x24
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	40021000 	.word	0x40021000
 80034a4:	08012f88 	.word	0x08012f88
 80034a8:	00f42400 	.word	0x00f42400
 80034ac:	007a1200 	.word	0x007a1200

080034b0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034b0:	b480      	push	{r7}
 80034b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034b4:	4b03      	ldr	r3, [pc, #12]	; (80034c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80034b6:	681b      	ldr	r3, [r3, #0]
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	20000000 	.word	0x20000000

080034c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80034cc:	f7ff fff0 	bl	80034b0 <HAL_RCC_GetHCLKFreq>
 80034d0:	4602      	mov	r2, r0
 80034d2:	4b06      	ldr	r3, [pc, #24]	; (80034ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	0a1b      	lsrs	r3, r3, #8
 80034d8:	f003 0307 	and.w	r3, r3, #7
 80034dc:	4904      	ldr	r1, [pc, #16]	; (80034f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80034de:	5ccb      	ldrb	r3, [r1, r3]
 80034e0:	f003 031f 	and.w	r3, r3, #31
 80034e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	40021000 	.word	0x40021000
 80034f0:	08012f80 	.word	0x08012f80

080034f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80034f8:	f7ff ffda 	bl	80034b0 <HAL_RCC_GetHCLKFreq>
 80034fc:	4602      	mov	r2, r0
 80034fe:	4b06      	ldr	r3, [pc, #24]	; (8003518 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	0adb      	lsrs	r3, r3, #11
 8003504:	f003 0307 	and.w	r3, r3, #7
 8003508:	4904      	ldr	r1, [pc, #16]	; (800351c <HAL_RCC_GetPCLK2Freq+0x28>)
 800350a:	5ccb      	ldrb	r3, [r1, r3]
 800350c:	f003 031f 	and.w	r3, r3, #31
 8003510:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003514:	4618      	mov	r0, r3
 8003516:	bd80      	pop	{r7, pc}
 8003518:	40021000 	.word	0x40021000
 800351c:	08012f80 	.word	0x08012f80

08003520 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b086      	sub	sp, #24
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003528:	2300      	movs	r3, #0
 800352a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800352c:	4b2a      	ldr	r3, [pc, #168]	; (80035d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800352e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d003      	beq.n	8003540 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003538:	f7ff f9ee 	bl	8002918 <HAL_PWREx_GetVoltageRange>
 800353c:	6178      	str	r0, [r7, #20]
 800353e:	e014      	b.n	800356a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003540:	4b25      	ldr	r3, [pc, #148]	; (80035d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003544:	4a24      	ldr	r2, [pc, #144]	; (80035d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003546:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800354a:	6593      	str	r3, [r2, #88]	; 0x58
 800354c:	4b22      	ldr	r3, [pc, #136]	; (80035d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800354e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003550:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003554:	60fb      	str	r3, [r7, #12]
 8003556:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003558:	f7ff f9de 	bl	8002918 <HAL_PWREx_GetVoltageRange>
 800355c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800355e:	4b1e      	ldr	r3, [pc, #120]	; (80035d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003562:	4a1d      	ldr	r2, [pc, #116]	; (80035d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003564:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003568:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003570:	d10b      	bne.n	800358a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2b80      	cmp	r3, #128	; 0x80
 8003576:	d919      	bls.n	80035ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2ba0      	cmp	r3, #160	; 0xa0
 800357c:	d902      	bls.n	8003584 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800357e:	2302      	movs	r3, #2
 8003580:	613b      	str	r3, [r7, #16]
 8003582:	e013      	b.n	80035ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003584:	2301      	movs	r3, #1
 8003586:	613b      	str	r3, [r7, #16]
 8003588:	e010      	b.n	80035ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2b80      	cmp	r3, #128	; 0x80
 800358e:	d902      	bls.n	8003596 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003590:	2303      	movs	r3, #3
 8003592:	613b      	str	r3, [r7, #16]
 8003594:	e00a      	b.n	80035ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2b80      	cmp	r3, #128	; 0x80
 800359a:	d102      	bne.n	80035a2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800359c:	2302      	movs	r3, #2
 800359e:	613b      	str	r3, [r7, #16]
 80035a0:	e004      	b.n	80035ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2b70      	cmp	r3, #112	; 0x70
 80035a6:	d101      	bne.n	80035ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035a8:	2301      	movs	r3, #1
 80035aa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80035ac:	4b0b      	ldr	r3, [pc, #44]	; (80035dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f023 0207 	bic.w	r2, r3, #7
 80035b4:	4909      	ldr	r1, [pc, #36]	; (80035dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80035bc:	4b07      	ldr	r3, [pc, #28]	; (80035dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0307 	and.w	r3, r3, #7
 80035c4:	693a      	ldr	r2, [r7, #16]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d001      	beq.n	80035ce <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e000      	b.n	80035d0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3718      	adds	r7, #24
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	40021000 	.word	0x40021000
 80035dc:	40022000 	.word	0x40022000

080035e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80035e8:	2300      	movs	r3, #0
 80035ea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035ec:	2300      	movs	r3, #0
 80035ee:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d041      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003600:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003604:	d02a      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003606:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800360a:	d824      	bhi.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800360c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003610:	d008      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003612:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003616:	d81e      	bhi.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003618:	2b00      	cmp	r3, #0
 800361a:	d00a      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800361c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003620:	d010      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003622:	e018      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003624:	4b86      	ldr	r3, [pc, #536]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	4a85      	ldr	r2, [pc, #532]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800362a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800362e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003630:	e015      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	3304      	adds	r3, #4
 8003636:	2100      	movs	r1, #0
 8003638:	4618      	mov	r0, r3
 800363a:	f000 fabb 	bl	8003bb4 <RCCEx_PLLSAI1_Config>
 800363e:	4603      	mov	r3, r0
 8003640:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003642:	e00c      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	3320      	adds	r3, #32
 8003648:	2100      	movs	r1, #0
 800364a:	4618      	mov	r0, r3
 800364c:	f000 fba6 	bl	8003d9c <RCCEx_PLLSAI2_Config>
 8003650:	4603      	mov	r3, r0
 8003652:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003654:	e003      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	74fb      	strb	r3, [r7, #19]
      break;
 800365a:	e000      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800365c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800365e:	7cfb      	ldrb	r3, [r7, #19]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d10b      	bne.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003664:	4b76      	ldr	r3, [pc, #472]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800366a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003672:	4973      	ldr	r1, [pc, #460]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003674:	4313      	orrs	r3, r2
 8003676:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800367a:	e001      	b.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800367c:	7cfb      	ldrb	r3, [r7, #19]
 800367e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d041      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003690:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003694:	d02a      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003696:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800369a:	d824      	bhi.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800369c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036a0:	d008      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80036a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036a6:	d81e      	bhi.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00a      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80036ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036b0:	d010      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80036b2:	e018      	b.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80036b4:	4b62      	ldr	r3, [pc, #392]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	4a61      	ldr	r2, [pc, #388]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036be:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80036c0:	e015      	b.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	3304      	adds	r3, #4
 80036c6:	2100      	movs	r1, #0
 80036c8:	4618      	mov	r0, r3
 80036ca:	f000 fa73 	bl	8003bb4 <RCCEx_PLLSAI1_Config>
 80036ce:	4603      	mov	r3, r0
 80036d0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80036d2:	e00c      	b.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	3320      	adds	r3, #32
 80036d8:	2100      	movs	r1, #0
 80036da:	4618      	mov	r0, r3
 80036dc:	f000 fb5e 	bl	8003d9c <RCCEx_PLLSAI2_Config>
 80036e0:	4603      	mov	r3, r0
 80036e2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80036e4:	e003      	b.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	74fb      	strb	r3, [r7, #19]
      break;
 80036ea:	e000      	b.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80036ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036ee:	7cfb      	ldrb	r3, [r7, #19]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d10b      	bne.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80036f4:	4b52      	ldr	r3, [pc, #328]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036fa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003702:	494f      	ldr	r1, [pc, #316]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003704:	4313      	orrs	r3, r2
 8003706:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800370a:	e001      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800370c:	7cfb      	ldrb	r3, [r7, #19]
 800370e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003718:	2b00      	cmp	r3, #0
 800371a:	f000 80a0 	beq.w	800385e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800371e:	2300      	movs	r3, #0
 8003720:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003722:	4b47      	ldr	r3, [pc, #284]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d101      	bne.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800372e:	2301      	movs	r3, #1
 8003730:	e000      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003732:	2300      	movs	r3, #0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00d      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003738:	4b41      	ldr	r3, [pc, #260]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800373a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800373c:	4a40      	ldr	r2, [pc, #256]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800373e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003742:	6593      	str	r3, [r2, #88]	; 0x58
 8003744:	4b3e      	ldr	r3, [pc, #248]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800374c:	60bb      	str	r3, [r7, #8]
 800374e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003750:	2301      	movs	r3, #1
 8003752:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003754:	4b3b      	ldr	r3, [pc, #236]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a3a      	ldr	r2, [pc, #232]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800375a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800375e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003760:	f7fe fd9a 	bl	8002298 <HAL_GetTick>
 8003764:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003766:	e009      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003768:	f7fe fd96 	bl	8002298 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b02      	cmp	r3, #2
 8003774:	d902      	bls.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	74fb      	strb	r3, [r7, #19]
        break;
 800377a:	e005      	b.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800377c:	4b31      	ldr	r3, [pc, #196]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003784:	2b00      	cmp	r3, #0
 8003786:	d0ef      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003788:	7cfb      	ldrb	r3, [r7, #19]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d15c      	bne.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800378e:	4b2c      	ldr	r3, [pc, #176]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003794:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003798:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d01f      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037a6:	697a      	ldr	r2, [r7, #20]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d019      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80037ac:	4b24      	ldr	r3, [pc, #144]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037b6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80037b8:	4b21      	ldr	r3, [pc, #132]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037be:	4a20      	ldr	r2, [pc, #128]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80037c8:	4b1d      	ldr	r3, [pc, #116]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ce:	4a1c      	ldr	r2, [pc, #112]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80037d8:	4a19      	ldr	r2, [pc, #100]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	f003 0301 	and.w	r3, r3, #1
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d016      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ea:	f7fe fd55 	bl	8002298 <HAL_GetTick>
 80037ee:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037f0:	e00b      	b.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037f2:	f7fe fd51 	bl	8002298 <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003800:	4293      	cmp	r3, r2
 8003802:	d902      	bls.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	74fb      	strb	r3, [r7, #19]
            break;
 8003808:	e006      	b.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800380a:	4b0d      	ldr	r3, [pc, #52]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800380c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	2b00      	cmp	r3, #0
 8003816:	d0ec      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003818:	7cfb      	ldrb	r3, [r7, #19]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d10c      	bne.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800381e:	4b08      	ldr	r3, [pc, #32]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003824:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800382e:	4904      	ldr	r1, [pc, #16]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003830:	4313      	orrs	r3, r2
 8003832:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003836:	e009      	b.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003838:	7cfb      	ldrb	r3, [r7, #19]
 800383a:	74bb      	strb	r3, [r7, #18]
 800383c:	e006      	b.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800383e:	bf00      	nop
 8003840:	40021000 	.word	0x40021000
 8003844:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003848:	7cfb      	ldrb	r3, [r7, #19]
 800384a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800384c:	7c7b      	ldrb	r3, [r7, #17]
 800384e:	2b01      	cmp	r3, #1
 8003850:	d105      	bne.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003852:	4b9e      	ldr	r3, [pc, #632]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003856:	4a9d      	ldr	r2, [pc, #628]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003858:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800385c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00a      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800386a:	4b98      	ldr	r3, [pc, #608]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800386c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003870:	f023 0203 	bic.w	r2, r3, #3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003878:	4994      	ldr	r1, [pc, #592]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800387a:	4313      	orrs	r3, r2
 800387c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0302 	and.w	r3, r3, #2
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00a      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800388c:	4b8f      	ldr	r3, [pc, #572]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800388e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003892:	f023 020c 	bic.w	r2, r3, #12
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800389a:	498c      	ldr	r1, [pc, #560]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800389c:	4313      	orrs	r3, r2
 800389e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0304 	and.w	r3, r3, #4
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00a      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80038ae:	4b87      	ldr	r3, [pc, #540]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038bc:	4983      	ldr	r1, [pc, #524]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0308 	and.w	r3, r3, #8
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00a      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80038d0:	4b7e      	ldr	r3, [pc, #504]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038d6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038de:	497b      	ldr	r1, [pc, #492]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0310 	and.w	r3, r3, #16
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00a      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80038f2:	4b76      	ldr	r3, [pc, #472]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003900:	4972      	ldr	r1, [pc, #456]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003902:	4313      	orrs	r3, r2
 8003904:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0320 	and.w	r3, r3, #32
 8003910:	2b00      	cmp	r3, #0
 8003912:	d00a      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003914:	4b6d      	ldr	r3, [pc, #436]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800391a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003922:	496a      	ldr	r1, [pc, #424]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003924:	4313      	orrs	r3, r2
 8003926:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00a      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003936:	4b65      	ldr	r3, [pc, #404]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003938:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800393c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003944:	4961      	ldr	r1, [pc, #388]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003946:	4313      	orrs	r3, r2
 8003948:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003954:	2b00      	cmp	r3, #0
 8003956:	d00a      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003958:	4b5c      	ldr	r3, [pc, #368]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800395a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800395e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003966:	4959      	ldr	r1, [pc, #356]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003968:	4313      	orrs	r3, r2
 800396a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00a      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800397a:	4b54      	ldr	r3, [pc, #336]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800397c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003980:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003988:	4950      	ldr	r1, [pc, #320]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800398a:	4313      	orrs	r3, r2
 800398c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003998:	2b00      	cmp	r3, #0
 800399a:	d00a      	beq.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800399c:	4b4b      	ldr	r3, [pc, #300]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800399e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039aa:	4948      	ldr	r1, [pc, #288]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d00a      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80039be:	4b43      	ldr	r3, [pc, #268]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039cc:	493f      	ldr	r1, [pc, #252]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d028      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039e0:	4b3a      	ldr	r3, [pc, #232]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039ee:	4937      	ldr	r1, [pc, #220]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039fe:	d106      	bne.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a00:	4b32      	ldr	r3, [pc, #200]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	4a31      	ldr	r2, [pc, #196]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a0a:	60d3      	str	r3, [r2, #12]
 8003a0c:	e011      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a12:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a16:	d10c      	bne.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	3304      	adds	r3, #4
 8003a1c:	2101      	movs	r1, #1
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f000 f8c8 	bl	8003bb4 <RCCEx_PLLSAI1_Config>
 8003a24:	4603      	mov	r3, r0
 8003a26:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003a28:	7cfb      	ldrb	r3, [r7, #19]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d001      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003a2e:	7cfb      	ldrb	r3, [r7, #19]
 8003a30:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d028      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003a3e:	4b23      	ldr	r3, [pc, #140]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a44:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a4c:	491f      	ldr	r1, [pc, #124]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a5c:	d106      	bne.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a5e:	4b1b      	ldr	r3, [pc, #108]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	4a1a      	ldr	r2, [pc, #104]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a68:	60d3      	str	r3, [r2, #12]
 8003a6a:	e011      	b.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a74:	d10c      	bne.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	3304      	adds	r3, #4
 8003a7a:	2101      	movs	r1, #1
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f000 f899 	bl	8003bb4 <RCCEx_PLLSAI1_Config>
 8003a82:	4603      	mov	r3, r0
 8003a84:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a86:	7cfb      	ldrb	r3, [r7, #19]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d001      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003a8c:	7cfb      	ldrb	r3, [r7, #19]
 8003a8e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d02b      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a9c:	4b0b      	ldr	r3, [pc, #44]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aaa:	4908      	ldr	r1, [pc, #32]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aac:	4313      	orrs	r3, r2
 8003aae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ab6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003aba:	d109      	bne.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003abc:	4b03      	ldr	r3, [pc, #12]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	4a02      	ldr	r2, [pc, #8]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ac2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ac6:	60d3      	str	r3, [r2, #12]
 8003ac8:	e014      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003aca:	bf00      	nop
 8003acc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ad4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ad8:	d10c      	bne.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	3304      	adds	r3, #4
 8003ade:	2101      	movs	r1, #1
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f000 f867 	bl	8003bb4 <RCCEx_PLLSAI1_Config>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003aea:	7cfb      	ldrb	r3, [r7, #19]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d001      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003af0:	7cfb      	ldrb	r3, [r7, #19]
 8003af2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d02f      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b00:	4b2b      	ldr	r3, [pc, #172]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b06:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b0e:	4928      	ldr	r1, [pc, #160]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b10:	4313      	orrs	r3, r2
 8003b12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b1e:	d10d      	bne.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	3304      	adds	r3, #4
 8003b24:	2102      	movs	r1, #2
 8003b26:	4618      	mov	r0, r3
 8003b28:	f000 f844 	bl	8003bb4 <RCCEx_PLLSAI1_Config>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b30:	7cfb      	ldrb	r3, [r7, #19]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d014      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003b36:	7cfb      	ldrb	r3, [r7, #19]
 8003b38:	74bb      	strb	r3, [r7, #18]
 8003b3a:	e011      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b44:	d10c      	bne.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	3320      	adds	r3, #32
 8003b4a:	2102      	movs	r1, #2
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f000 f925 	bl	8003d9c <RCCEx_PLLSAI2_Config>
 8003b52:	4603      	mov	r3, r0
 8003b54:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b56:	7cfb      	ldrb	r3, [r7, #19]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d001      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003b5c:	7cfb      	ldrb	r3, [r7, #19]
 8003b5e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00a      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003b6c:	4b10      	ldr	r3, [pc, #64]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b72:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b7a:	490d      	ldr	r1, [pc, #52]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d00b      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b8e:	4b08      	ldr	r3, [pc, #32]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b94:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b9e:	4904      	ldr	r1, [pc, #16]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003ba6:	7cbb      	ldrb	r3, [r7, #18]
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3718      	adds	r7, #24
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	40021000 	.word	0x40021000

08003bb4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003bc2:	4b75      	ldr	r3, [pc, #468]	; (8003d98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	f003 0303 	and.w	r3, r3, #3
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d018      	beq.n	8003c00 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003bce:	4b72      	ldr	r3, [pc, #456]	; (8003d98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	f003 0203 	and.w	r2, r3, #3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d10d      	bne.n	8003bfa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
       ||
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d009      	beq.n	8003bfa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003be6:	4b6c      	ldr	r3, [pc, #432]	; (8003d98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	091b      	lsrs	r3, r3, #4
 8003bec:	f003 0307 	and.w	r3, r3, #7
 8003bf0:	1c5a      	adds	r2, r3, #1
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
       ||
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d047      	beq.n	8003c8a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	73fb      	strb	r3, [r7, #15]
 8003bfe:	e044      	b.n	8003c8a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2b03      	cmp	r3, #3
 8003c06:	d018      	beq.n	8003c3a <RCCEx_PLLSAI1_Config+0x86>
 8003c08:	2b03      	cmp	r3, #3
 8003c0a:	d825      	bhi.n	8003c58 <RCCEx_PLLSAI1_Config+0xa4>
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d002      	beq.n	8003c16 <RCCEx_PLLSAI1_Config+0x62>
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d009      	beq.n	8003c28 <RCCEx_PLLSAI1_Config+0x74>
 8003c14:	e020      	b.n	8003c58 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003c16:	4b60      	ldr	r3, [pc, #384]	; (8003d98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d11d      	bne.n	8003c5e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c26:	e01a      	b.n	8003c5e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c28:	4b5b      	ldr	r3, [pc, #364]	; (8003d98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d116      	bne.n	8003c62 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c38:	e013      	b.n	8003c62 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c3a:	4b57      	ldr	r3, [pc, #348]	; (8003d98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d10f      	bne.n	8003c66 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c46:	4b54      	ldr	r3, [pc, #336]	; (8003d98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d109      	bne.n	8003c66 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c56:	e006      	b.n	8003c66 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	73fb      	strb	r3, [r7, #15]
      break;
 8003c5c:	e004      	b.n	8003c68 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c5e:	bf00      	nop
 8003c60:	e002      	b.n	8003c68 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c62:	bf00      	nop
 8003c64:	e000      	b.n	8003c68 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c66:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c68:	7bfb      	ldrb	r3, [r7, #15]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d10d      	bne.n	8003c8a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003c6e:	4b4a      	ldr	r3, [pc, #296]	; (8003d98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6819      	ldr	r1, [r3, #0]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	011b      	lsls	r3, r3, #4
 8003c82:	430b      	orrs	r3, r1
 8003c84:	4944      	ldr	r1, [pc, #272]	; (8003d98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003c8a:	7bfb      	ldrb	r3, [r7, #15]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d17d      	bne.n	8003d8c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003c90:	4b41      	ldr	r3, [pc, #260]	; (8003d98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a40      	ldr	r2, [pc, #256]	; (8003d98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c96:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003c9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c9c:	f7fe fafc 	bl	8002298 <HAL_GetTick>
 8003ca0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003ca2:	e009      	b.n	8003cb8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ca4:	f7fe faf8 	bl	8002298 <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d902      	bls.n	8003cb8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	73fb      	strb	r3, [r7, #15]
        break;
 8003cb6:	e005      	b.n	8003cc4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003cb8:	4b37      	ldr	r3, [pc, #220]	; (8003d98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d1ef      	bne.n	8003ca4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003cc4:	7bfb      	ldrb	r3, [r7, #15]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d160      	bne.n	8003d8c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d111      	bne.n	8003cf4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003cd0:	4b31      	ldr	r3, [pc, #196]	; (8003d98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003cd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	6892      	ldr	r2, [r2, #8]
 8003ce0:	0211      	lsls	r1, r2, #8
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	68d2      	ldr	r2, [r2, #12]
 8003ce6:	0912      	lsrs	r2, r2, #4
 8003ce8:	0452      	lsls	r2, r2, #17
 8003cea:	430a      	orrs	r2, r1
 8003cec:	492a      	ldr	r1, [pc, #168]	; (8003d98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	610b      	str	r3, [r1, #16]
 8003cf2:	e027      	b.n	8003d44 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d112      	bne.n	8003d20 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003cfa:	4b27      	ldr	r3, [pc, #156]	; (8003d98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003d02:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	6892      	ldr	r2, [r2, #8]
 8003d0a:	0211      	lsls	r1, r2, #8
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	6912      	ldr	r2, [r2, #16]
 8003d10:	0852      	lsrs	r2, r2, #1
 8003d12:	3a01      	subs	r2, #1
 8003d14:	0552      	lsls	r2, r2, #21
 8003d16:	430a      	orrs	r2, r1
 8003d18:	491f      	ldr	r1, [pc, #124]	; (8003d98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	610b      	str	r3, [r1, #16]
 8003d1e:	e011      	b.n	8003d44 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d20:	4b1d      	ldr	r3, [pc, #116]	; (8003d98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d22:	691b      	ldr	r3, [r3, #16]
 8003d24:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003d28:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	6892      	ldr	r2, [r2, #8]
 8003d30:	0211      	lsls	r1, r2, #8
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	6952      	ldr	r2, [r2, #20]
 8003d36:	0852      	lsrs	r2, r2, #1
 8003d38:	3a01      	subs	r2, #1
 8003d3a:	0652      	lsls	r2, r2, #25
 8003d3c:	430a      	orrs	r2, r1
 8003d3e:	4916      	ldr	r1, [pc, #88]	; (8003d98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003d44:	4b14      	ldr	r3, [pc, #80]	; (8003d98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a13      	ldr	r2, [pc, #76]	; (8003d98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d4a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d4e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d50:	f7fe faa2 	bl	8002298 <HAL_GetTick>
 8003d54:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d56:	e009      	b.n	8003d6c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d58:	f7fe fa9e 	bl	8002298 <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d902      	bls.n	8003d6c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	73fb      	strb	r3, [r7, #15]
          break;
 8003d6a:	e005      	b.n	8003d78 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d6c:	4b0a      	ldr	r3, [pc, #40]	; (8003d98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d0ef      	beq.n	8003d58 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003d78:	7bfb      	ldrb	r3, [r7, #15]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d106      	bne.n	8003d8c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003d7e:	4b06      	ldr	r3, [pc, #24]	; (8003d98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d80:	691a      	ldr	r2, [r3, #16]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	4904      	ldr	r1, [pc, #16]	; (8003d98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3710      	adds	r7, #16
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	40021000 	.word	0x40021000

08003d9c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003da6:	2300      	movs	r3, #0
 8003da8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003daa:	4b6a      	ldr	r3, [pc, #424]	; (8003f54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	f003 0303 	and.w	r3, r3, #3
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d018      	beq.n	8003de8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003db6:	4b67      	ldr	r3, [pc, #412]	; (8003f54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	f003 0203 	and.w	r2, r3, #3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d10d      	bne.n	8003de2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
       ||
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d009      	beq.n	8003de2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003dce:	4b61      	ldr	r3, [pc, #388]	; (8003f54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	091b      	lsrs	r3, r3, #4
 8003dd4:	f003 0307 	and.w	r3, r3, #7
 8003dd8:	1c5a      	adds	r2, r3, #1
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685b      	ldr	r3, [r3, #4]
       ||
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d047      	beq.n	8003e72 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	73fb      	strb	r3, [r7, #15]
 8003de6:	e044      	b.n	8003e72 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2b03      	cmp	r3, #3
 8003dee:	d018      	beq.n	8003e22 <RCCEx_PLLSAI2_Config+0x86>
 8003df0:	2b03      	cmp	r3, #3
 8003df2:	d825      	bhi.n	8003e40 <RCCEx_PLLSAI2_Config+0xa4>
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d002      	beq.n	8003dfe <RCCEx_PLLSAI2_Config+0x62>
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d009      	beq.n	8003e10 <RCCEx_PLLSAI2_Config+0x74>
 8003dfc:	e020      	b.n	8003e40 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003dfe:	4b55      	ldr	r3, [pc, #340]	; (8003f54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d11d      	bne.n	8003e46 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e0e:	e01a      	b.n	8003e46 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003e10:	4b50      	ldr	r3, [pc, #320]	; (8003f54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d116      	bne.n	8003e4a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e20:	e013      	b.n	8003e4a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003e22:	4b4c      	ldr	r3, [pc, #304]	; (8003f54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d10f      	bne.n	8003e4e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003e2e:	4b49      	ldr	r3, [pc, #292]	; (8003f54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d109      	bne.n	8003e4e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003e3e:	e006      	b.n	8003e4e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	73fb      	strb	r3, [r7, #15]
      break;
 8003e44:	e004      	b.n	8003e50 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e46:	bf00      	nop
 8003e48:	e002      	b.n	8003e50 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e4a:	bf00      	nop
 8003e4c:	e000      	b.n	8003e50 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e4e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003e50:	7bfb      	ldrb	r3, [r7, #15]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d10d      	bne.n	8003e72 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003e56:	4b3f      	ldr	r3, [pc, #252]	; (8003f54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6819      	ldr	r1, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	3b01      	subs	r3, #1
 8003e68:	011b      	lsls	r3, r3, #4
 8003e6a:	430b      	orrs	r3, r1
 8003e6c:	4939      	ldr	r1, [pc, #228]	; (8003f54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003e72:	7bfb      	ldrb	r3, [r7, #15]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d167      	bne.n	8003f48 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003e78:	4b36      	ldr	r3, [pc, #216]	; (8003f54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a35      	ldr	r2, [pc, #212]	; (8003f54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e84:	f7fe fa08 	bl	8002298 <HAL_GetTick>
 8003e88:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003e8a:	e009      	b.n	8003ea0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003e8c:	f7fe fa04 	bl	8002298 <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d902      	bls.n	8003ea0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	73fb      	strb	r3, [r7, #15]
        break;
 8003e9e:	e005      	b.n	8003eac <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003ea0:	4b2c      	ldr	r3, [pc, #176]	; (8003f54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d1ef      	bne.n	8003e8c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003eac:	7bfb      	ldrb	r3, [r7, #15]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d14a      	bne.n	8003f48 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d111      	bne.n	8003edc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003eb8:	4b26      	ldr	r3, [pc, #152]	; (8003f54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eba:	695b      	ldr	r3, [r3, #20]
 8003ebc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003ec0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	6892      	ldr	r2, [r2, #8]
 8003ec8:	0211      	lsls	r1, r2, #8
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	68d2      	ldr	r2, [r2, #12]
 8003ece:	0912      	lsrs	r2, r2, #4
 8003ed0:	0452      	lsls	r2, r2, #17
 8003ed2:	430a      	orrs	r2, r1
 8003ed4:	491f      	ldr	r1, [pc, #124]	; (8003f54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	614b      	str	r3, [r1, #20]
 8003eda:	e011      	b.n	8003f00 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003edc:	4b1d      	ldr	r3, [pc, #116]	; (8003f54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ede:	695b      	ldr	r3, [r3, #20]
 8003ee0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003ee4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	6892      	ldr	r2, [r2, #8]
 8003eec:	0211      	lsls	r1, r2, #8
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	6912      	ldr	r2, [r2, #16]
 8003ef2:	0852      	lsrs	r2, r2, #1
 8003ef4:	3a01      	subs	r2, #1
 8003ef6:	0652      	lsls	r2, r2, #25
 8003ef8:	430a      	orrs	r2, r1
 8003efa:	4916      	ldr	r1, [pc, #88]	; (8003f54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003f00:	4b14      	ldr	r3, [pc, #80]	; (8003f54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a13      	ldr	r2, [pc, #76]	; (8003f54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f0a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f0c:	f7fe f9c4 	bl	8002298 <HAL_GetTick>
 8003f10:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003f12:	e009      	b.n	8003f28 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003f14:	f7fe f9c0 	bl	8002298 <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d902      	bls.n	8003f28 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	73fb      	strb	r3, [r7, #15]
          break;
 8003f26:	e005      	b.n	8003f34 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003f28:	4b0a      	ldr	r3, [pc, #40]	; (8003f54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d0ef      	beq.n	8003f14 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003f34:	7bfb      	ldrb	r3, [r7, #15]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d106      	bne.n	8003f48 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003f3a:	4b06      	ldr	r3, [pc, #24]	; (8003f54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f3c:	695a      	ldr	r2, [r3, #20]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	695b      	ldr	r3, [r3, #20]
 8003f42:	4904      	ldr	r1, [pc, #16]	; (8003f54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f44:	4313      	orrs	r3, r2
 8003f46:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3710      	adds	r7, #16
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	40021000 	.word	0x40021000

08003f58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d101      	bne.n	8003f6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e095      	b.n	8004096 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d108      	bne.n	8003f84 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f7a:	d009      	beq.n	8003f90 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	61da      	str	r2, [r3, #28]
 8003f82:	e005      	b.n	8003f90 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d106      	bne.n	8003fb0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f7fd ff4c 	bl	8001e48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2202      	movs	r2, #2
 8003fb4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fc6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003fd0:	d902      	bls.n	8003fd8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	60fb      	str	r3, [r7, #12]
 8003fd6:	e002      	b.n	8003fde <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003fd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003fdc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003fe6:	d007      	beq.n	8003ff8 <HAL_SPI_Init+0xa0>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ff0:	d002      	beq.n	8003ff8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004008:	431a      	orrs	r2, r3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	f003 0302 	and.w	r3, r3, #2
 8004012:	431a      	orrs	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	695b      	ldr	r3, [r3, #20]
 8004018:	f003 0301 	and.w	r3, r3, #1
 800401c:	431a      	orrs	r2, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	699b      	ldr	r3, [r3, #24]
 8004022:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004026:	431a      	orrs	r2, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	69db      	ldr	r3, [r3, #28]
 800402c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004030:	431a      	orrs	r2, r3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a1b      	ldr	r3, [r3, #32]
 8004036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800403a:	ea42 0103 	orr.w	r1, r2, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004042:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	430a      	orrs	r2, r1
 800404c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	0c1b      	lsrs	r3, r3, #16
 8004054:	f003 0204 	and.w	r2, r3, #4
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405c:	f003 0310 	and.w	r3, r3, #16
 8004060:	431a      	orrs	r2, r3
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004066:	f003 0308 	and.w	r3, r3, #8
 800406a:	431a      	orrs	r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004074:	ea42 0103 	orr.w	r1, r2, r3
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	430a      	orrs	r2, r1
 8004084:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3710      	adds	r7, #16
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}

0800409e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800409e:	b580      	push	{r7, lr}
 80040a0:	b08a      	sub	sp, #40	; 0x28
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	60f8      	str	r0, [r7, #12]
 80040a6:	60b9      	str	r1, [r7, #8]
 80040a8:	607a      	str	r2, [r7, #4]
 80040aa:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80040ac:	2301      	movs	r3, #1
 80040ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80040b0:	2300      	movs	r3, #0
 80040b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d101      	bne.n	80040c4 <HAL_SPI_TransmitReceive+0x26>
 80040c0:	2302      	movs	r3, #2
 80040c2:	e20a      	b.n	80044da <HAL_SPI_TransmitReceive+0x43c>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80040cc:	f7fe f8e4 	bl	8002298 <HAL_GetTick>
 80040d0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80040d8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80040e0:	887b      	ldrh	r3, [r7, #2]
 80040e2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80040e4:	887b      	ldrh	r3, [r7, #2]
 80040e6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80040e8:	7efb      	ldrb	r3, [r7, #27]
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d00e      	beq.n	800410c <HAL_SPI_TransmitReceive+0x6e>
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040f4:	d106      	bne.n	8004104 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d102      	bne.n	8004104 <HAL_SPI_TransmitReceive+0x66>
 80040fe:	7efb      	ldrb	r3, [r7, #27]
 8004100:	2b04      	cmp	r3, #4
 8004102:	d003      	beq.n	800410c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004104:	2302      	movs	r3, #2
 8004106:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800410a:	e1e0      	b.n	80044ce <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d005      	beq.n	800411e <HAL_SPI_TransmitReceive+0x80>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d002      	beq.n	800411e <HAL_SPI_TransmitReceive+0x80>
 8004118:	887b      	ldrh	r3, [r7, #2]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d103      	bne.n	8004126 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004124:	e1d3      	b.n	80044ce <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800412c:	b2db      	uxtb	r3, r3
 800412e:	2b04      	cmp	r3, #4
 8004130:	d003      	beq.n	800413a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2205      	movs	r2, #5
 8004136:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2200      	movs	r2, #0
 800413e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	887a      	ldrh	r2, [r7, #2]
 800414a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	887a      	ldrh	r2, [r7, #2]
 8004152:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	68ba      	ldr	r2, [r7, #8]
 800415a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	887a      	ldrh	r2, [r7, #2]
 8004160:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	887a      	ldrh	r2, [r7, #2]
 8004166:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2200      	movs	r2, #0
 800416c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2200      	movs	r2, #0
 8004172:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800417c:	d802      	bhi.n	8004184 <HAL_SPI_TransmitReceive+0xe6>
 800417e:	8a3b      	ldrh	r3, [r7, #16]
 8004180:	2b01      	cmp	r3, #1
 8004182:	d908      	bls.n	8004196 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	685a      	ldr	r2, [r3, #4]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004192:	605a      	str	r2, [r3, #4]
 8004194:	e007      	b.n	80041a6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	685a      	ldr	r2, [r3, #4]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80041a4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b0:	2b40      	cmp	r3, #64	; 0x40
 80041b2:	d007      	beq.n	80041c4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80041cc:	f240 8081 	bls.w	80042d2 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d002      	beq.n	80041de <HAL_SPI_TransmitReceive+0x140>
 80041d8:	8a7b      	ldrh	r3, [r7, #18]
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d16d      	bne.n	80042ba <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e2:	881a      	ldrh	r2, [r3, #0]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ee:	1c9a      	adds	r2, r3, #2
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	3b01      	subs	r3, #1
 80041fc:	b29a      	uxth	r2, r3
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004202:	e05a      	b.n	80042ba <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	f003 0302 	and.w	r3, r3, #2
 800420e:	2b02      	cmp	r3, #2
 8004210:	d11b      	bne.n	800424a <HAL_SPI_TransmitReceive+0x1ac>
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004216:	b29b      	uxth	r3, r3
 8004218:	2b00      	cmp	r3, #0
 800421a:	d016      	beq.n	800424a <HAL_SPI_TransmitReceive+0x1ac>
 800421c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421e:	2b01      	cmp	r3, #1
 8004220:	d113      	bne.n	800424a <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004226:	881a      	ldrh	r2, [r3, #0]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004232:	1c9a      	adds	r2, r3, #2
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800423c:	b29b      	uxth	r3, r3
 800423e:	3b01      	subs	r3, #1
 8004240:	b29a      	uxth	r2, r3
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004246:	2300      	movs	r3, #0
 8004248:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	f003 0301 	and.w	r3, r3, #1
 8004254:	2b01      	cmp	r3, #1
 8004256:	d11c      	bne.n	8004292 <HAL_SPI_TransmitReceive+0x1f4>
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800425e:	b29b      	uxth	r3, r3
 8004260:	2b00      	cmp	r3, #0
 8004262:	d016      	beq.n	8004292 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68da      	ldr	r2, [r3, #12]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426e:	b292      	uxth	r2, r2
 8004270:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004276:	1c9a      	adds	r2, r3, #2
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004282:	b29b      	uxth	r3, r3
 8004284:	3b01      	subs	r3, #1
 8004286:	b29a      	uxth	r2, r3
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800428e:	2301      	movs	r3, #1
 8004290:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004292:	f7fe f801 	bl	8002298 <HAL_GetTick>
 8004296:	4602      	mov	r2, r0
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800429e:	429a      	cmp	r2, r3
 80042a0:	d80b      	bhi.n	80042ba <HAL_SPI_TransmitReceive+0x21c>
 80042a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a8:	d007      	beq.n	80042ba <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80042b8:	e109      	b.n	80044ce <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042be:	b29b      	uxth	r3, r3
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d19f      	bne.n	8004204 <HAL_SPI_TransmitReceive+0x166>
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d199      	bne.n	8004204 <HAL_SPI_TransmitReceive+0x166>
 80042d0:	e0e3      	b.n	800449a <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d003      	beq.n	80042e2 <HAL_SPI_TransmitReceive+0x244>
 80042da:	8a7b      	ldrh	r3, [r7, #18]
 80042dc:	2b01      	cmp	r3, #1
 80042de:	f040 80cf 	bne.w	8004480 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d912      	bls.n	8004312 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f0:	881a      	ldrh	r2, [r3, #0]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042fc:	1c9a      	adds	r2, r3, #2
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004306:	b29b      	uxth	r3, r3
 8004308:	3b02      	subs	r3, #2
 800430a:	b29a      	uxth	r2, r3
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004310:	e0b6      	b.n	8004480 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	330c      	adds	r3, #12
 800431c:	7812      	ldrb	r2, [r2, #0]
 800431e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004324:	1c5a      	adds	r2, r3, #1
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800432e:	b29b      	uxth	r3, r3
 8004330:	3b01      	subs	r3, #1
 8004332:	b29a      	uxth	r2, r3
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004338:	e0a2      	b.n	8004480 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	f003 0302 	and.w	r3, r3, #2
 8004344:	2b02      	cmp	r3, #2
 8004346:	d134      	bne.n	80043b2 <HAL_SPI_TransmitReceive+0x314>
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800434c:	b29b      	uxth	r3, r3
 800434e:	2b00      	cmp	r3, #0
 8004350:	d02f      	beq.n	80043b2 <HAL_SPI_TransmitReceive+0x314>
 8004352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004354:	2b01      	cmp	r3, #1
 8004356:	d12c      	bne.n	80043b2 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800435c:	b29b      	uxth	r3, r3
 800435e:	2b01      	cmp	r3, #1
 8004360:	d912      	bls.n	8004388 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004366:	881a      	ldrh	r2, [r3, #0]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004372:	1c9a      	adds	r2, r3, #2
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800437c:	b29b      	uxth	r3, r3
 800437e:	3b02      	subs	r3, #2
 8004380:	b29a      	uxth	r2, r3
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004386:	e012      	b.n	80043ae <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	330c      	adds	r3, #12
 8004392:	7812      	ldrb	r2, [r2, #0]
 8004394:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800439a:	1c5a      	adds	r2, r3, #1
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	3b01      	subs	r3, #1
 80043a8:	b29a      	uxth	r2, r3
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80043ae:	2300      	movs	r3, #0
 80043b0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f003 0301 	and.w	r3, r3, #1
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d148      	bne.n	8004452 <HAL_SPI_TransmitReceive+0x3b4>
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d042      	beq.n	8004452 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d923      	bls.n	8004420 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68da      	ldr	r2, [r3, #12]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e2:	b292      	uxth	r2, r2
 80043e4:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ea:	1c9a      	adds	r2, r3, #2
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	3b02      	subs	r3, #2
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004408:	b29b      	uxth	r3, r3
 800440a:	2b01      	cmp	r3, #1
 800440c:	d81f      	bhi.n	800444e <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	685a      	ldr	r2, [r3, #4]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800441c:	605a      	str	r2, [r3, #4]
 800441e:	e016      	b.n	800444e <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f103 020c 	add.w	r2, r3, #12
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442c:	7812      	ldrb	r2, [r2, #0]
 800442e:	b2d2      	uxtb	r2, r2
 8004430:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004436:	1c5a      	adds	r2, r3, #1
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004442:	b29b      	uxth	r3, r3
 8004444:	3b01      	subs	r3, #1
 8004446:	b29a      	uxth	r2, r3
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800444e:	2301      	movs	r3, #1
 8004450:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004452:	f7fd ff21 	bl	8002298 <HAL_GetTick>
 8004456:	4602      	mov	r2, r0
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800445e:	429a      	cmp	r2, r3
 8004460:	d803      	bhi.n	800446a <HAL_SPI_TransmitReceive+0x3cc>
 8004462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004468:	d102      	bne.n	8004470 <HAL_SPI_TransmitReceive+0x3d2>
 800446a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446c:	2b00      	cmp	r3, #0
 800446e:	d107      	bne.n	8004480 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2201      	movs	r2, #1
 800447a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800447e:	e026      	b.n	80044ce <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004484:	b29b      	uxth	r3, r3
 8004486:	2b00      	cmp	r3, #0
 8004488:	f47f af57 	bne.w	800433a <HAL_SPI_TransmitReceive+0x29c>
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004492:	b29b      	uxth	r3, r3
 8004494:	2b00      	cmp	r3, #0
 8004496:	f47f af50 	bne.w	800433a <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800449a:	69fa      	ldr	r2, [r7, #28]
 800449c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800449e:	68f8      	ldr	r0, [r7, #12]
 80044a0:	f000 f93e 	bl	8004720 <SPI_EndRxTxTransaction>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d005      	beq.n	80044b6 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2220      	movs	r2, #32
 80044b4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d003      	beq.n	80044c6 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044c4:	e003      	b.n	80044ce <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2201      	movs	r2, #1
 80044ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80044d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3728      	adds	r7, #40	; 0x28
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
	...

080044e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b088      	sub	sp, #32
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	603b      	str	r3, [r7, #0]
 80044f0:	4613      	mov	r3, r2
 80044f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80044f4:	f7fd fed0 	bl	8002298 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044fc:	1a9b      	subs	r3, r3, r2
 80044fe:	683a      	ldr	r2, [r7, #0]
 8004500:	4413      	add	r3, r2
 8004502:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004504:	f7fd fec8 	bl	8002298 <HAL_GetTick>
 8004508:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800450a:	4b39      	ldr	r3, [pc, #228]	; (80045f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	015b      	lsls	r3, r3, #5
 8004510:	0d1b      	lsrs	r3, r3, #20
 8004512:	69fa      	ldr	r2, [r7, #28]
 8004514:	fb02 f303 	mul.w	r3, r2, r3
 8004518:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800451a:	e054      	b.n	80045c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004522:	d050      	beq.n	80045c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004524:	f7fd feb8 	bl	8002298 <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	69fa      	ldr	r2, [r7, #28]
 8004530:	429a      	cmp	r2, r3
 8004532:	d902      	bls.n	800453a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d13d      	bne.n	80045b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	685a      	ldr	r2, [r3, #4]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004548:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004552:	d111      	bne.n	8004578 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800455c:	d004      	beq.n	8004568 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004566:	d107      	bne.n	8004578 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004576:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800457c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004580:	d10f      	bne.n	80045a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004590:	601a      	str	r2, [r3, #0]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e017      	b.n	80045e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d101      	bne.n	80045c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80045bc:	2300      	movs	r3, #0
 80045be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	3b01      	subs	r3, #1
 80045c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	689a      	ldr	r2, [r3, #8]
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	4013      	ands	r3, r2
 80045d0:	68ba      	ldr	r2, [r7, #8]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	bf0c      	ite	eq
 80045d6:	2301      	moveq	r3, #1
 80045d8:	2300      	movne	r3, #0
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	461a      	mov	r2, r3
 80045de:	79fb      	ldrb	r3, [r7, #7]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d19b      	bne.n	800451c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3720      	adds	r7, #32
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	20000000 	.word	0x20000000

080045f4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b08a      	sub	sp, #40	; 0x28
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	60b9      	str	r1, [r7, #8]
 80045fe:	607a      	str	r2, [r7, #4]
 8004600:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004602:	2300      	movs	r3, #0
 8004604:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004606:	f7fd fe47 	bl	8002298 <HAL_GetTick>
 800460a:	4602      	mov	r2, r0
 800460c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800460e:	1a9b      	subs	r3, r3, r2
 8004610:	683a      	ldr	r2, [r7, #0]
 8004612:	4413      	add	r3, r2
 8004614:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004616:	f7fd fe3f 	bl	8002298 <HAL_GetTick>
 800461a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	330c      	adds	r3, #12
 8004622:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004624:	4b3d      	ldr	r3, [pc, #244]	; (800471c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	4613      	mov	r3, r2
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	4413      	add	r3, r2
 800462e:	00da      	lsls	r2, r3, #3
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	0d1b      	lsrs	r3, r3, #20
 8004634:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004636:	fb02 f303 	mul.w	r3, r2, r3
 800463a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800463c:	e060      	b.n	8004700 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004644:	d107      	bne.n	8004656 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d104      	bne.n	8004656 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	b2db      	uxtb	r3, r3
 8004652:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004654:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800465c:	d050      	beq.n	8004700 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800465e:	f7fd fe1b 	bl	8002298 <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	6a3b      	ldr	r3, [r7, #32]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800466a:	429a      	cmp	r2, r3
 800466c:	d902      	bls.n	8004674 <SPI_WaitFifoStateUntilTimeout+0x80>
 800466e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004670:	2b00      	cmp	r3, #0
 8004672:	d13d      	bne.n	80046f0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	685a      	ldr	r2, [r3, #4]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004682:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800468c:	d111      	bne.n	80046b2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004696:	d004      	beq.n	80046a2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046a0:	d107      	bne.n	80046b2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046b0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046ba:	d10f      	bne.n	80046dc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046ca:	601a      	str	r2, [r3, #0]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046da:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e010      	b.n	8004712 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d101      	bne.n	80046fa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80046f6:	2300      	movs	r3, #0
 80046f8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	3b01      	subs	r3, #1
 80046fe:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	689a      	ldr	r2, [r3, #8]
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	4013      	ands	r3, r2
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	429a      	cmp	r2, r3
 800470e:	d196      	bne.n	800463e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004710:	2300      	movs	r3, #0
}
 8004712:	4618      	mov	r0, r3
 8004714:	3728      	adds	r7, #40	; 0x28
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	20000000 	.word	0x20000000

08004720 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b086      	sub	sp, #24
 8004724:	af02      	add	r7, sp, #8
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	9300      	str	r3, [sp, #0]
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	2200      	movs	r2, #0
 8004734:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004738:	68f8      	ldr	r0, [r7, #12]
 800473a:	f7ff ff5b 	bl	80045f4 <SPI_WaitFifoStateUntilTimeout>
 800473e:	4603      	mov	r3, r0
 8004740:	2b00      	cmp	r3, #0
 8004742:	d007      	beq.n	8004754 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004748:	f043 0220 	orr.w	r2, r3, #32
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e027      	b.n	80047a4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	9300      	str	r3, [sp, #0]
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	2200      	movs	r2, #0
 800475c:	2180      	movs	r1, #128	; 0x80
 800475e:	68f8      	ldr	r0, [r7, #12]
 8004760:	f7ff fec0 	bl	80044e4 <SPI_WaitFlagStateUntilTimeout>
 8004764:	4603      	mov	r3, r0
 8004766:	2b00      	cmp	r3, #0
 8004768:	d007      	beq.n	800477a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800476e:	f043 0220 	orr.w	r2, r3, #32
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	e014      	b.n	80047a4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	9300      	str	r3, [sp, #0]
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	2200      	movs	r2, #0
 8004782:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004786:	68f8      	ldr	r0, [r7, #12]
 8004788:	f7ff ff34 	bl	80045f4 <SPI_WaitFifoStateUntilTimeout>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d007      	beq.n	80047a2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004796:	f043 0220 	orr.w	r2, r3, #32
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e000      	b.n	80047a4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80047a2:	2300      	movs	r3, #0
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3710      	adds	r7, #16
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b082      	sub	sp, #8
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d101      	bne.n	80047be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e040      	b.n	8004840 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d106      	bne.n	80047d4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f7fd fb7e 	bl	8001ed0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2224      	movs	r2, #36	; 0x24
 80047d8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f022 0201 	bic.w	r2, r2, #1
 80047e8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d002      	beq.n	80047f8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f000 fb6a 	bl	8004ecc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f000 f8af 	bl	800495c <UART_SetConfig>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b01      	cmp	r3, #1
 8004802:	d101      	bne.n	8004808 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e01b      	b.n	8004840 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	685a      	ldr	r2, [r3, #4]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004816:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	689a      	ldr	r2, [r3, #8]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004826:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f042 0201 	orr.w	r2, r2, #1
 8004836:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f000 fbe9 	bl	8005010 <UART_CheckIdleState>
 800483e:	4603      	mov	r3, r0
}
 8004840:	4618      	mov	r0, r3
 8004842:	3708      	adds	r7, #8
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b08a      	sub	sp, #40	; 0x28
 800484c:	af02      	add	r7, sp, #8
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	60b9      	str	r1, [r7, #8]
 8004852:	603b      	str	r3, [r7, #0]
 8004854:	4613      	mov	r3, r2
 8004856:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800485c:	2b20      	cmp	r3, #32
 800485e:	d178      	bne.n	8004952 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d002      	beq.n	800486c <HAL_UART_Transmit+0x24>
 8004866:	88fb      	ldrh	r3, [r7, #6]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d101      	bne.n	8004870 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e071      	b.n	8004954 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2200      	movs	r2, #0
 8004874:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2221      	movs	r2, #33	; 0x21
 800487c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800487e:	f7fd fd0b 	bl	8002298 <HAL_GetTick>
 8004882:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	88fa      	ldrh	r2, [r7, #6]
 8004888:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	88fa      	ldrh	r2, [r7, #6]
 8004890:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800489c:	d108      	bne.n	80048b0 <HAL_UART_Transmit+0x68>
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d104      	bne.n	80048b0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80048a6:	2300      	movs	r3, #0
 80048a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	61bb      	str	r3, [r7, #24]
 80048ae:	e003      	b.n	80048b8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048b4:	2300      	movs	r3, #0
 80048b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80048b8:	e030      	b.n	800491c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	9300      	str	r3, [sp, #0]
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	2200      	movs	r2, #0
 80048c2:	2180      	movs	r1, #128	; 0x80
 80048c4:	68f8      	ldr	r0, [r7, #12]
 80048c6:	f000 fc4b 	bl	8005160 <UART_WaitOnFlagUntilTimeout>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d004      	beq.n	80048da <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2220      	movs	r2, #32
 80048d4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e03c      	b.n	8004954 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d10b      	bne.n	80048f8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	881a      	ldrh	r2, [r3, #0]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048ec:	b292      	uxth	r2, r2
 80048ee:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	3302      	adds	r3, #2
 80048f4:	61bb      	str	r3, [r7, #24]
 80048f6:	e008      	b.n	800490a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	781a      	ldrb	r2, [r3, #0]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	b292      	uxth	r2, r2
 8004902:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	3301      	adds	r3, #1
 8004908:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004910:	b29b      	uxth	r3, r3
 8004912:	3b01      	subs	r3, #1
 8004914:	b29a      	uxth	r2, r3
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004922:	b29b      	uxth	r3, r3
 8004924:	2b00      	cmp	r3, #0
 8004926:	d1c8      	bne.n	80048ba <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	9300      	str	r3, [sp, #0]
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	2200      	movs	r2, #0
 8004930:	2140      	movs	r1, #64	; 0x40
 8004932:	68f8      	ldr	r0, [r7, #12]
 8004934:	f000 fc14 	bl	8005160 <UART_WaitOnFlagUntilTimeout>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d004      	beq.n	8004948 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2220      	movs	r2, #32
 8004942:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004944:	2303      	movs	r3, #3
 8004946:	e005      	b.n	8004954 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2220      	movs	r2, #32
 800494c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800494e:	2300      	movs	r3, #0
 8004950:	e000      	b.n	8004954 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004952:	2302      	movs	r3, #2
  }
}
 8004954:	4618      	mov	r0, r3
 8004956:	3720      	adds	r7, #32
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}

0800495c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800495c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004960:	b08a      	sub	sp, #40	; 0x28
 8004962:	af00      	add	r7, sp, #0
 8004964:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004966:	2300      	movs	r3, #0
 8004968:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	689a      	ldr	r2, [r3, #8]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	691b      	ldr	r3, [r3, #16]
 8004974:	431a      	orrs	r2, r3
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	695b      	ldr	r3, [r3, #20]
 800497a:	431a      	orrs	r2, r3
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	69db      	ldr	r3, [r3, #28]
 8004980:	4313      	orrs	r3, r2
 8004982:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	4ba4      	ldr	r3, [pc, #656]	; (8004c1c <UART_SetConfig+0x2c0>)
 800498c:	4013      	ands	r3, r2
 800498e:	68fa      	ldr	r2, [r7, #12]
 8004990:	6812      	ldr	r2, [r2, #0]
 8004992:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004994:	430b      	orrs	r3, r1
 8004996:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	68da      	ldr	r2, [r3, #12]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	430a      	orrs	r2, r1
 80049ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	699b      	ldr	r3, [r3, #24]
 80049b2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a99      	ldr	r2, [pc, #612]	; (8004c20 <UART_SetConfig+0x2c4>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d004      	beq.n	80049c8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6a1b      	ldr	r3, [r3, #32]
 80049c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049c4:	4313      	orrs	r3, r2
 80049c6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049d8:	430a      	orrs	r2, r1
 80049da:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a90      	ldr	r2, [pc, #576]	; (8004c24 <UART_SetConfig+0x2c8>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d126      	bne.n	8004a34 <UART_SetConfig+0xd8>
 80049e6:	4b90      	ldr	r3, [pc, #576]	; (8004c28 <UART_SetConfig+0x2cc>)
 80049e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ec:	f003 0303 	and.w	r3, r3, #3
 80049f0:	2b03      	cmp	r3, #3
 80049f2:	d81b      	bhi.n	8004a2c <UART_SetConfig+0xd0>
 80049f4:	a201      	add	r2, pc, #4	; (adr r2, 80049fc <UART_SetConfig+0xa0>)
 80049f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049fa:	bf00      	nop
 80049fc:	08004a0d 	.word	0x08004a0d
 8004a00:	08004a1d 	.word	0x08004a1d
 8004a04:	08004a15 	.word	0x08004a15
 8004a08:	08004a25 	.word	0x08004a25
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a12:	e116      	b.n	8004c42 <UART_SetConfig+0x2e6>
 8004a14:	2302      	movs	r3, #2
 8004a16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a1a:	e112      	b.n	8004c42 <UART_SetConfig+0x2e6>
 8004a1c:	2304      	movs	r3, #4
 8004a1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a22:	e10e      	b.n	8004c42 <UART_SetConfig+0x2e6>
 8004a24:	2308      	movs	r3, #8
 8004a26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a2a:	e10a      	b.n	8004c42 <UART_SetConfig+0x2e6>
 8004a2c:	2310      	movs	r3, #16
 8004a2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a32:	e106      	b.n	8004c42 <UART_SetConfig+0x2e6>
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a7c      	ldr	r2, [pc, #496]	; (8004c2c <UART_SetConfig+0x2d0>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d138      	bne.n	8004ab0 <UART_SetConfig+0x154>
 8004a3e:	4b7a      	ldr	r3, [pc, #488]	; (8004c28 <UART_SetConfig+0x2cc>)
 8004a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a44:	f003 030c 	and.w	r3, r3, #12
 8004a48:	2b0c      	cmp	r3, #12
 8004a4a:	d82d      	bhi.n	8004aa8 <UART_SetConfig+0x14c>
 8004a4c:	a201      	add	r2, pc, #4	; (adr r2, 8004a54 <UART_SetConfig+0xf8>)
 8004a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a52:	bf00      	nop
 8004a54:	08004a89 	.word	0x08004a89
 8004a58:	08004aa9 	.word	0x08004aa9
 8004a5c:	08004aa9 	.word	0x08004aa9
 8004a60:	08004aa9 	.word	0x08004aa9
 8004a64:	08004a99 	.word	0x08004a99
 8004a68:	08004aa9 	.word	0x08004aa9
 8004a6c:	08004aa9 	.word	0x08004aa9
 8004a70:	08004aa9 	.word	0x08004aa9
 8004a74:	08004a91 	.word	0x08004a91
 8004a78:	08004aa9 	.word	0x08004aa9
 8004a7c:	08004aa9 	.word	0x08004aa9
 8004a80:	08004aa9 	.word	0x08004aa9
 8004a84:	08004aa1 	.word	0x08004aa1
 8004a88:	2300      	movs	r3, #0
 8004a8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a8e:	e0d8      	b.n	8004c42 <UART_SetConfig+0x2e6>
 8004a90:	2302      	movs	r3, #2
 8004a92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a96:	e0d4      	b.n	8004c42 <UART_SetConfig+0x2e6>
 8004a98:	2304      	movs	r3, #4
 8004a9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a9e:	e0d0      	b.n	8004c42 <UART_SetConfig+0x2e6>
 8004aa0:	2308      	movs	r3, #8
 8004aa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004aa6:	e0cc      	b.n	8004c42 <UART_SetConfig+0x2e6>
 8004aa8:	2310      	movs	r3, #16
 8004aaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004aae:	e0c8      	b.n	8004c42 <UART_SetConfig+0x2e6>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a5e      	ldr	r2, [pc, #376]	; (8004c30 <UART_SetConfig+0x2d4>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d125      	bne.n	8004b06 <UART_SetConfig+0x1aa>
 8004aba:	4b5b      	ldr	r3, [pc, #364]	; (8004c28 <UART_SetConfig+0x2cc>)
 8004abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ac0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004ac4:	2b30      	cmp	r3, #48	; 0x30
 8004ac6:	d016      	beq.n	8004af6 <UART_SetConfig+0x19a>
 8004ac8:	2b30      	cmp	r3, #48	; 0x30
 8004aca:	d818      	bhi.n	8004afe <UART_SetConfig+0x1a2>
 8004acc:	2b20      	cmp	r3, #32
 8004ace:	d00a      	beq.n	8004ae6 <UART_SetConfig+0x18a>
 8004ad0:	2b20      	cmp	r3, #32
 8004ad2:	d814      	bhi.n	8004afe <UART_SetConfig+0x1a2>
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d002      	beq.n	8004ade <UART_SetConfig+0x182>
 8004ad8:	2b10      	cmp	r3, #16
 8004ada:	d008      	beq.n	8004aee <UART_SetConfig+0x192>
 8004adc:	e00f      	b.n	8004afe <UART_SetConfig+0x1a2>
 8004ade:	2300      	movs	r3, #0
 8004ae0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ae4:	e0ad      	b.n	8004c42 <UART_SetConfig+0x2e6>
 8004ae6:	2302      	movs	r3, #2
 8004ae8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004aec:	e0a9      	b.n	8004c42 <UART_SetConfig+0x2e6>
 8004aee:	2304      	movs	r3, #4
 8004af0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004af4:	e0a5      	b.n	8004c42 <UART_SetConfig+0x2e6>
 8004af6:	2308      	movs	r3, #8
 8004af8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004afc:	e0a1      	b.n	8004c42 <UART_SetConfig+0x2e6>
 8004afe:	2310      	movs	r3, #16
 8004b00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b04:	e09d      	b.n	8004c42 <UART_SetConfig+0x2e6>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a4a      	ldr	r2, [pc, #296]	; (8004c34 <UART_SetConfig+0x2d8>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d125      	bne.n	8004b5c <UART_SetConfig+0x200>
 8004b10:	4b45      	ldr	r3, [pc, #276]	; (8004c28 <UART_SetConfig+0x2cc>)
 8004b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b16:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004b1a:	2bc0      	cmp	r3, #192	; 0xc0
 8004b1c:	d016      	beq.n	8004b4c <UART_SetConfig+0x1f0>
 8004b1e:	2bc0      	cmp	r3, #192	; 0xc0
 8004b20:	d818      	bhi.n	8004b54 <UART_SetConfig+0x1f8>
 8004b22:	2b80      	cmp	r3, #128	; 0x80
 8004b24:	d00a      	beq.n	8004b3c <UART_SetConfig+0x1e0>
 8004b26:	2b80      	cmp	r3, #128	; 0x80
 8004b28:	d814      	bhi.n	8004b54 <UART_SetConfig+0x1f8>
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d002      	beq.n	8004b34 <UART_SetConfig+0x1d8>
 8004b2e:	2b40      	cmp	r3, #64	; 0x40
 8004b30:	d008      	beq.n	8004b44 <UART_SetConfig+0x1e8>
 8004b32:	e00f      	b.n	8004b54 <UART_SetConfig+0x1f8>
 8004b34:	2300      	movs	r3, #0
 8004b36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b3a:	e082      	b.n	8004c42 <UART_SetConfig+0x2e6>
 8004b3c:	2302      	movs	r3, #2
 8004b3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b42:	e07e      	b.n	8004c42 <UART_SetConfig+0x2e6>
 8004b44:	2304      	movs	r3, #4
 8004b46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b4a:	e07a      	b.n	8004c42 <UART_SetConfig+0x2e6>
 8004b4c:	2308      	movs	r3, #8
 8004b4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b52:	e076      	b.n	8004c42 <UART_SetConfig+0x2e6>
 8004b54:	2310      	movs	r3, #16
 8004b56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b5a:	e072      	b.n	8004c42 <UART_SetConfig+0x2e6>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a35      	ldr	r2, [pc, #212]	; (8004c38 <UART_SetConfig+0x2dc>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d12a      	bne.n	8004bbc <UART_SetConfig+0x260>
 8004b66:	4b30      	ldr	r3, [pc, #192]	; (8004c28 <UART_SetConfig+0x2cc>)
 8004b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b74:	d01a      	beq.n	8004bac <UART_SetConfig+0x250>
 8004b76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b7a:	d81b      	bhi.n	8004bb4 <UART_SetConfig+0x258>
 8004b7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b80:	d00c      	beq.n	8004b9c <UART_SetConfig+0x240>
 8004b82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b86:	d815      	bhi.n	8004bb4 <UART_SetConfig+0x258>
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d003      	beq.n	8004b94 <UART_SetConfig+0x238>
 8004b8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b90:	d008      	beq.n	8004ba4 <UART_SetConfig+0x248>
 8004b92:	e00f      	b.n	8004bb4 <UART_SetConfig+0x258>
 8004b94:	2300      	movs	r3, #0
 8004b96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b9a:	e052      	b.n	8004c42 <UART_SetConfig+0x2e6>
 8004b9c:	2302      	movs	r3, #2
 8004b9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ba2:	e04e      	b.n	8004c42 <UART_SetConfig+0x2e6>
 8004ba4:	2304      	movs	r3, #4
 8004ba6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004baa:	e04a      	b.n	8004c42 <UART_SetConfig+0x2e6>
 8004bac:	2308      	movs	r3, #8
 8004bae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bb2:	e046      	b.n	8004c42 <UART_SetConfig+0x2e6>
 8004bb4:	2310      	movs	r3, #16
 8004bb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bba:	e042      	b.n	8004c42 <UART_SetConfig+0x2e6>
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a17      	ldr	r2, [pc, #92]	; (8004c20 <UART_SetConfig+0x2c4>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d13a      	bne.n	8004c3c <UART_SetConfig+0x2e0>
 8004bc6:	4b18      	ldr	r3, [pc, #96]	; (8004c28 <UART_SetConfig+0x2cc>)
 8004bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bcc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004bd0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004bd4:	d01a      	beq.n	8004c0c <UART_SetConfig+0x2b0>
 8004bd6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004bda:	d81b      	bhi.n	8004c14 <UART_SetConfig+0x2b8>
 8004bdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004be0:	d00c      	beq.n	8004bfc <UART_SetConfig+0x2a0>
 8004be2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004be6:	d815      	bhi.n	8004c14 <UART_SetConfig+0x2b8>
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d003      	beq.n	8004bf4 <UART_SetConfig+0x298>
 8004bec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bf0:	d008      	beq.n	8004c04 <UART_SetConfig+0x2a8>
 8004bf2:	e00f      	b.n	8004c14 <UART_SetConfig+0x2b8>
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bfa:	e022      	b.n	8004c42 <UART_SetConfig+0x2e6>
 8004bfc:	2302      	movs	r3, #2
 8004bfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c02:	e01e      	b.n	8004c42 <UART_SetConfig+0x2e6>
 8004c04:	2304      	movs	r3, #4
 8004c06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c0a:	e01a      	b.n	8004c42 <UART_SetConfig+0x2e6>
 8004c0c:	2308      	movs	r3, #8
 8004c0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c12:	e016      	b.n	8004c42 <UART_SetConfig+0x2e6>
 8004c14:	2310      	movs	r3, #16
 8004c16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c1a:	e012      	b.n	8004c42 <UART_SetConfig+0x2e6>
 8004c1c:	efff69f3 	.word	0xefff69f3
 8004c20:	40008000 	.word	0x40008000
 8004c24:	40013800 	.word	0x40013800
 8004c28:	40021000 	.word	0x40021000
 8004c2c:	40004400 	.word	0x40004400
 8004c30:	40004800 	.word	0x40004800
 8004c34:	40004c00 	.word	0x40004c00
 8004c38:	40005000 	.word	0x40005000
 8004c3c:	2310      	movs	r3, #16
 8004c3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a9f      	ldr	r2, [pc, #636]	; (8004ec4 <UART_SetConfig+0x568>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d17a      	bne.n	8004d42 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004c4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c50:	2b08      	cmp	r3, #8
 8004c52:	d824      	bhi.n	8004c9e <UART_SetConfig+0x342>
 8004c54:	a201      	add	r2, pc, #4	; (adr r2, 8004c5c <UART_SetConfig+0x300>)
 8004c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c5a:	bf00      	nop
 8004c5c:	08004c81 	.word	0x08004c81
 8004c60:	08004c9f 	.word	0x08004c9f
 8004c64:	08004c89 	.word	0x08004c89
 8004c68:	08004c9f 	.word	0x08004c9f
 8004c6c:	08004c8f 	.word	0x08004c8f
 8004c70:	08004c9f 	.word	0x08004c9f
 8004c74:	08004c9f 	.word	0x08004c9f
 8004c78:	08004c9f 	.word	0x08004c9f
 8004c7c:	08004c97 	.word	0x08004c97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c80:	f7fe fc22 	bl	80034c8 <HAL_RCC_GetPCLK1Freq>
 8004c84:	61f8      	str	r0, [r7, #28]
        break;
 8004c86:	e010      	b.n	8004caa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c88:	4b8f      	ldr	r3, [pc, #572]	; (8004ec8 <UART_SetConfig+0x56c>)
 8004c8a:	61fb      	str	r3, [r7, #28]
        break;
 8004c8c:	e00d      	b.n	8004caa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c8e:	f7fe fb83 	bl	8003398 <HAL_RCC_GetSysClockFreq>
 8004c92:	61f8      	str	r0, [r7, #28]
        break;
 8004c94:	e009      	b.n	8004caa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c9a:	61fb      	str	r3, [r7, #28]
        break;
 8004c9c:	e005      	b.n	8004caa <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004ca8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	f000 80fb 	beq.w	8004ea8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	685a      	ldr	r2, [r3, #4]
 8004cb6:	4613      	mov	r3, r2
 8004cb8:	005b      	lsls	r3, r3, #1
 8004cba:	4413      	add	r3, r2
 8004cbc:	69fa      	ldr	r2, [r7, #28]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d305      	bcc.n	8004cce <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004cc8:	69fa      	ldr	r2, [r7, #28]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d903      	bls.n	8004cd6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004cd4:	e0e8      	b.n	8004ea8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	461c      	mov	r4, r3
 8004cdc:	4615      	mov	r5, r2
 8004cde:	f04f 0200 	mov.w	r2, #0
 8004ce2:	f04f 0300 	mov.w	r3, #0
 8004ce6:	022b      	lsls	r3, r5, #8
 8004ce8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004cec:	0222      	lsls	r2, r4, #8
 8004cee:	68f9      	ldr	r1, [r7, #12]
 8004cf0:	6849      	ldr	r1, [r1, #4]
 8004cf2:	0849      	lsrs	r1, r1, #1
 8004cf4:	2000      	movs	r0, #0
 8004cf6:	4688      	mov	r8, r1
 8004cf8:	4681      	mov	r9, r0
 8004cfa:	eb12 0a08 	adds.w	sl, r2, r8
 8004cfe:	eb43 0b09 	adc.w	fp, r3, r9
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	603b      	str	r3, [r7, #0]
 8004d0a:	607a      	str	r2, [r7, #4]
 8004d0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d10:	4650      	mov	r0, sl
 8004d12:	4659      	mov	r1, fp
 8004d14:	f7fb ffe0 	bl	8000cd8 <__aeabi_uldivmod>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	460b      	mov	r3, r1
 8004d1c:	4613      	mov	r3, r2
 8004d1e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004d20:	69bb      	ldr	r3, [r7, #24]
 8004d22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d26:	d308      	bcc.n	8004d3a <UART_SetConfig+0x3de>
 8004d28:	69bb      	ldr	r3, [r7, #24]
 8004d2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d2e:	d204      	bcs.n	8004d3a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	69ba      	ldr	r2, [r7, #24]
 8004d36:	60da      	str	r2, [r3, #12]
 8004d38:	e0b6      	b.n	8004ea8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004d40:	e0b2      	b.n	8004ea8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	69db      	ldr	r3, [r3, #28]
 8004d46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d4a:	d15e      	bne.n	8004e0a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004d4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d50:	2b08      	cmp	r3, #8
 8004d52:	d828      	bhi.n	8004da6 <UART_SetConfig+0x44a>
 8004d54:	a201      	add	r2, pc, #4	; (adr r2, 8004d5c <UART_SetConfig+0x400>)
 8004d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d5a:	bf00      	nop
 8004d5c:	08004d81 	.word	0x08004d81
 8004d60:	08004d89 	.word	0x08004d89
 8004d64:	08004d91 	.word	0x08004d91
 8004d68:	08004da7 	.word	0x08004da7
 8004d6c:	08004d97 	.word	0x08004d97
 8004d70:	08004da7 	.word	0x08004da7
 8004d74:	08004da7 	.word	0x08004da7
 8004d78:	08004da7 	.word	0x08004da7
 8004d7c:	08004d9f 	.word	0x08004d9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d80:	f7fe fba2 	bl	80034c8 <HAL_RCC_GetPCLK1Freq>
 8004d84:	61f8      	str	r0, [r7, #28]
        break;
 8004d86:	e014      	b.n	8004db2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d88:	f7fe fbb4 	bl	80034f4 <HAL_RCC_GetPCLK2Freq>
 8004d8c:	61f8      	str	r0, [r7, #28]
        break;
 8004d8e:	e010      	b.n	8004db2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d90:	4b4d      	ldr	r3, [pc, #308]	; (8004ec8 <UART_SetConfig+0x56c>)
 8004d92:	61fb      	str	r3, [r7, #28]
        break;
 8004d94:	e00d      	b.n	8004db2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d96:	f7fe faff 	bl	8003398 <HAL_RCC_GetSysClockFreq>
 8004d9a:	61f8      	str	r0, [r7, #28]
        break;
 8004d9c:	e009      	b.n	8004db2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004da2:	61fb      	str	r3, [r7, #28]
        break;
 8004da4:	e005      	b.n	8004db2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004da6:	2300      	movs	r3, #0
 8004da8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004db0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d077      	beq.n	8004ea8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	005a      	lsls	r2, r3, #1
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	085b      	lsrs	r3, r3, #1
 8004dc2:	441a      	add	r2, r3
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dcc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004dce:	69bb      	ldr	r3, [r7, #24]
 8004dd0:	2b0f      	cmp	r3, #15
 8004dd2:	d916      	bls.n	8004e02 <UART_SetConfig+0x4a6>
 8004dd4:	69bb      	ldr	r3, [r7, #24]
 8004dd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dda:	d212      	bcs.n	8004e02 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	f023 030f 	bic.w	r3, r3, #15
 8004de4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	085b      	lsrs	r3, r3, #1
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	f003 0307 	and.w	r3, r3, #7
 8004df0:	b29a      	uxth	r2, r3
 8004df2:	8afb      	ldrh	r3, [r7, #22]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	8afa      	ldrh	r2, [r7, #22]
 8004dfe:	60da      	str	r2, [r3, #12]
 8004e00:	e052      	b.n	8004ea8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004e08:	e04e      	b.n	8004ea8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e0a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e0e:	2b08      	cmp	r3, #8
 8004e10:	d827      	bhi.n	8004e62 <UART_SetConfig+0x506>
 8004e12:	a201      	add	r2, pc, #4	; (adr r2, 8004e18 <UART_SetConfig+0x4bc>)
 8004e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e18:	08004e3d 	.word	0x08004e3d
 8004e1c:	08004e45 	.word	0x08004e45
 8004e20:	08004e4d 	.word	0x08004e4d
 8004e24:	08004e63 	.word	0x08004e63
 8004e28:	08004e53 	.word	0x08004e53
 8004e2c:	08004e63 	.word	0x08004e63
 8004e30:	08004e63 	.word	0x08004e63
 8004e34:	08004e63 	.word	0x08004e63
 8004e38:	08004e5b 	.word	0x08004e5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e3c:	f7fe fb44 	bl	80034c8 <HAL_RCC_GetPCLK1Freq>
 8004e40:	61f8      	str	r0, [r7, #28]
        break;
 8004e42:	e014      	b.n	8004e6e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e44:	f7fe fb56 	bl	80034f4 <HAL_RCC_GetPCLK2Freq>
 8004e48:	61f8      	str	r0, [r7, #28]
        break;
 8004e4a:	e010      	b.n	8004e6e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e4c:	4b1e      	ldr	r3, [pc, #120]	; (8004ec8 <UART_SetConfig+0x56c>)
 8004e4e:	61fb      	str	r3, [r7, #28]
        break;
 8004e50:	e00d      	b.n	8004e6e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e52:	f7fe faa1 	bl	8003398 <HAL_RCC_GetSysClockFreq>
 8004e56:	61f8      	str	r0, [r7, #28]
        break;
 8004e58:	e009      	b.n	8004e6e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e5e:	61fb      	str	r3, [r7, #28]
        break;
 8004e60:	e005      	b.n	8004e6e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004e62:	2300      	movs	r3, #0
 8004e64:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004e6c:	bf00      	nop
    }

    if (pclk != 0U)
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d019      	beq.n	8004ea8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	085a      	lsrs	r2, r3, #1
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	441a      	add	r2, r3
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e86:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	2b0f      	cmp	r3, #15
 8004e8c:	d909      	bls.n	8004ea2 <UART_SetConfig+0x546>
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e94:	d205      	bcs.n	8004ea2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	b29a      	uxth	r2, r3
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	60da      	str	r2, [r3, #12]
 8004ea0:	e002      	b.n	8004ea8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004eb4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3728      	adds	r7, #40	; 0x28
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ec2:	bf00      	nop
 8004ec4:	40008000 	.word	0x40008000
 8004ec8:	00f42400 	.word	0x00f42400

08004ecc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed8:	f003 0308 	and.w	r3, r3, #8
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d00a      	beq.n	8004ef6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	430a      	orrs	r2, r1
 8004ef4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efa:	f003 0301 	and.w	r3, r3, #1
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d00a      	beq.n	8004f18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	430a      	orrs	r2, r1
 8004f16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1c:	f003 0302 	and.w	r3, r3, #2
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d00a      	beq.n	8004f3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	430a      	orrs	r2, r1
 8004f38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3e:	f003 0304 	and.w	r3, r3, #4
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d00a      	beq.n	8004f5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	430a      	orrs	r2, r1
 8004f5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f60:	f003 0310 	and.w	r3, r3, #16
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d00a      	beq.n	8004f7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	430a      	orrs	r2, r1
 8004f7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f82:	f003 0320 	and.w	r3, r3, #32
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d00a      	beq.n	8004fa0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	430a      	orrs	r2, r1
 8004f9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d01a      	beq.n	8004fe2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	430a      	orrs	r2, r1
 8004fc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fca:	d10a      	bne.n	8004fe2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	430a      	orrs	r2, r1
 8004fe0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d00a      	beq.n	8005004 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	430a      	orrs	r2, r1
 8005002:	605a      	str	r2, [r3, #4]
  }
}
 8005004:	bf00      	nop
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr

08005010 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b098      	sub	sp, #96	; 0x60
 8005014:	af02      	add	r7, sp, #8
 8005016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005020:	f7fd f93a 	bl	8002298 <HAL_GetTick>
 8005024:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 0308 	and.w	r3, r3, #8
 8005030:	2b08      	cmp	r3, #8
 8005032:	d12e      	bne.n	8005092 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005034:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005038:	9300      	str	r3, [sp, #0]
 800503a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800503c:	2200      	movs	r2, #0
 800503e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 f88c 	bl	8005160 <UART_WaitOnFlagUntilTimeout>
 8005048:	4603      	mov	r3, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	d021      	beq.n	8005092 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005056:	e853 3f00 	ldrex	r3, [r3]
 800505a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800505c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800505e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005062:	653b      	str	r3, [r7, #80]	; 0x50
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	461a      	mov	r2, r3
 800506a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800506c:	647b      	str	r3, [r7, #68]	; 0x44
 800506e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005070:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005072:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005074:	e841 2300 	strex	r3, r2, [r1]
 8005078:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800507a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800507c:	2b00      	cmp	r3, #0
 800507e:	d1e6      	bne.n	800504e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2220      	movs	r2, #32
 8005084:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e062      	b.n	8005158 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 0304 	and.w	r3, r3, #4
 800509c:	2b04      	cmp	r3, #4
 800509e:	d149      	bne.n	8005134 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80050a4:	9300      	str	r3, [sp, #0]
 80050a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050a8:	2200      	movs	r2, #0
 80050aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 f856 	bl	8005160 <UART_WaitOnFlagUntilTimeout>
 80050b4:	4603      	mov	r3, r0
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d03c      	beq.n	8005134 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c2:	e853 3f00 	ldrex	r3, [r3]
 80050c6:	623b      	str	r3, [r7, #32]
   return(result);
 80050c8:	6a3b      	ldr	r3, [r7, #32]
 80050ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	461a      	mov	r2, r3
 80050d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050d8:	633b      	str	r3, [r7, #48]	; 0x30
 80050da:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050e0:	e841 2300 	strex	r3, r2, [r1]
 80050e4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80050e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d1e6      	bne.n	80050ba <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	3308      	adds	r3, #8
 80050f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	e853 3f00 	ldrex	r3, [r3]
 80050fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f023 0301 	bic.w	r3, r3, #1
 8005102:	64bb      	str	r3, [r7, #72]	; 0x48
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	3308      	adds	r3, #8
 800510a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800510c:	61fa      	str	r2, [r7, #28]
 800510e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005110:	69b9      	ldr	r1, [r7, #24]
 8005112:	69fa      	ldr	r2, [r7, #28]
 8005114:	e841 2300 	strex	r3, r2, [r1]
 8005118:	617b      	str	r3, [r7, #20]
   return(result);
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d1e5      	bne.n	80050ec <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2220      	movs	r2, #32
 8005124:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005130:	2303      	movs	r3, #3
 8005132:	e011      	b.n	8005158 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2220      	movs	r2, #32
 8005138:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2220      	movs	r2, #32
 800513e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005156:	2300      	movs	r3, #0
}
 8005158:	4618      	mov	r0, r3
 800515a:	3758      	adds	r7, #88	; 0x58
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	603b      	str	r3, [r7, #0]
 800516c:	4613      	mov	r3, r2
 800516e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005170:	e049      	b.n	8005206 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005178:	d045      	beq.n	8005206 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800517a:	f7fd f88d 	bl	8002298 <HAL_GetTick>
 800517e:	4602      	mov	r2, r0
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	69ba      	ldr	r2, [r7, #24]
 8005186:	429a      	cmp	r2, r3
 8005188:	d302      	bcc.n	8005190 <UART_WaitOnFlagUntilTimeout+0x30>
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d101      	bne.n	8005194 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005190:	2303      	movs	r3, #3
 8005192:	e048      	b.n	8005226 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0304 	and.w	r3, r3, #4
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d031      	beq.n	8005206 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	69db      	ldr	r3, [r3, #28]
 80051a8:	f003 0308 	and.w	r3, r3, #8
 80051ac:	2b08      	cmp	r3, #8
 80051ae:	d110      	bne.n	80051d2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2208      	movs	r2, #8
 80051b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051b8:	68f8      	ldr	r0, [r7, #12]
 80051ba:	f000 f838 	bl	800522e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2208      	movs	r2, #8
 80051c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e029      	b.n	8005226 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	69db      	ldr	r3, [r3, #28]
 80051d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051e0:	d111      	bne.n	8005206 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80051ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051ec:	68f8      	ldr	r0, [r7, #12]
 80051ee:	f000 f81e 	bl	800522e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2220      	movs	r2, #32
 80051f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005202:	2303      	movs	r3, #3
 8005204:	e00f      	b.n	8005226 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	69da      	ldr	r2, [r3, #28]
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	4013      	ands	r3, r2
 8005210:	68ba      	ldr	r2, [r7, #8]
 8005212:	429a      	cmp	r2, r3
 8005214:	bf0c      	ite	eq
 8005216:	2301      	moveq	r3, #1
 8005218:	2300      	movne	r3, #0
 800521a:	b2db      	uxtb	r3, r3
 800521c:	461a      	mov	r2, r3
 800521e:	79fb      	ldrb	r3, [r7, #7]
 8005220:	429a      	cmp	r2, r3
 8005222:	d0a6      	beq.n	8005172 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3710      	adds	r7, #16
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}

0800522e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800522e:	b480      	push	{r7}
 8005230:	b095      	sub	sp, #84	; 0x54
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800523c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800523e:	e853 3f00 	ldrex	r3, [r3]
 8005242:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005246:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800524a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	461a      	mov	r2, r3
 8005252:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005254:	643b      	str	r3, [r7, #64]	; 0x40
 8005256:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005258:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800525a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800525c:	e841 2300 	strex	r3, r2, [r1]
 8005260:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005264:	2b00      	cmp	r3, #0
 8005266:	d1e6      	bne.n	8005236 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	3308      	adds	r3, #8
 800526e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005270:	6a3b      	ldr	r3, [r7, #32]
 8005272:	e853 3f00 	ldrex	r3, [r3]
 8005276:	61fb      	str	r3, [r7, #28]
   return(result);
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	f023 0301 	bic.w	r3, r3, #1
 800527e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	3308      	adds	r3, #8
 8005286:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005288:	62fa      	str	r2, [r7, #44]	; 0x2c
 800528a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800528c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800528e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005290:	e841 2300 	strex	r3, r2, [r1]
 8005294:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005298:	2b00      	cmp	r3, #0
 800529a:	d1e5      	bne.n	8005268 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d118      	bne.n	80052d6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	e853 3f00 	ldrex	r3, [r3]
 80052b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	f023 0310 	bic.w	r3, r3, #16
 80052b8:	647b      	str	r3, [r7, #68]	; 0x44
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	461a      	mov	r2, r3
 80052c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052c2:	61bb      	str	r3, [r7, #24]
 80052c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c6:	6979      	ldr	r1, [r7, #20]
 80052c8:	69ba      	ldr	r2, [r7, #24]
 80052ca:	e841 2300 	strex	r3, r2, [r1]
 80052ce:	613b      	str	r3, [r7, #16]
   return(result);
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d1e6      	bne.n	80052a4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2220      	movs	r2, #32
 80052da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80052ea:	bf00      	nop
 80052ec:	3754      	adds	r7, #84	; 0x54
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr
	...

080052f8 <acc_rss_activate>:
 80052f8:	b510      	push	{r4, lr}
 80052fa:	4c18      	ldr	r4, [pc, #96]	; (800535c <acc_rss_activate+0x64>)
 80052fc:	7823      	ldrb	r3, [r4, #0]
 80052fe:	b9c3      	cbnz	r3, 8005332 <acc_rss_activate+0x3a>
 8005300:	b1a8      	cbz	r0, 800532e <acc_rss_activate+0x36>
 8005302:	f001 f8bd 	bl	8006480 <acc_rss_integration_register>
 8005306:	b188      	cbz	r0, 800532c <acc_rss_activate+0x34>
 8005308:	f000 fc62 	bl	8005bd0 <acc_service_manager_activate>
 800530c:	b1e8      	cbz	r0, 800534a <acc_rss_activate+0x52>
 800530e:	f002 fda3 	bl	8007e58 <acc_sensor_manager_activate>
 8005312:	b1d0      	cbz	r0, 800534a <acc_rss_activate+0x52>
 8005314:	2301      	movs	r3, #1
 8005316:	7023      	strb	r3, [r4, #0]
 8005318:	f001 f9b0 	bl	800667c <acc_rss_integration_log_level>
 800531c:	2801      	cmp	r0, #1
 800531e:	d905      	bls.n	800532c <acc_rss_activate+0x34>
 8005320:	4b0f      	ldr	r3, [pc, #60]	; (8005360 <acc_rss_activate+0x68>)
 8005322:	4a10      	ldr	r2, [pc, #64]	; (8005364 <acc_rss_activate+0x6c>)
 8005324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005326:	4910      	ldr	r1, [pc, #64]	; (8005368 <acc_rss_activate+0x70>)
 8005328:	2002      	movs	r0, #2
 800532a:	4798      	blx	r3
 800532c:	7823      	ldrb	r3, [r4, #0]
 800532e:	4618      	mov	r0, r3
 8005330:	bd10      	pop	{r4, pc}
 8005332:	f001 f9a3 	bl	800667c <acc_rss_integration_log_level>
 8005336:	2801      	cmp	r0, #1
 8005338:	d9f8      	bls.n	800532c <acc_rss_activate+0x34>
 800533a:	4b09      	ldr	r3, [pc, #36]	; (8005360 <acc_rss_activate+0x68>)
 800533c:	4a0b      	ldr	r2, [pc, #44]	; (800536c <acc_rss_activate+0x74>)
 800533e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005340:	4909      	ldr	r1, [pc, #36]	; (8005368 <acc_rss_activate+0x70>)
 8005342:	2002      	movs	r0, #2
 8005344:	4798      	blx	r3
 8005346:	7823      	ldrb	r3, [r4, #0]
 8005348:	e7f1      	b.n	800532e <acc_rss_activate+0x36>
 800534a:	4b05      	ldr	r3, [pc, #20]	; (8005360 <acc_rss_activate+0x68>)
 800534c:	4a08      	ldr	r2, [pc, #32]	; (8005370 <acc_rss_activate+0x78>)
 800534e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005350:	4905      	ldr	r1, [pc, #20]	; (8005368 <acc_rss_activate+0x70>)
 8005352:	2000      	movs	r0, #0
 8005354:	4798      	blx	r3
 8005356:	7823      	ldrb	r3, [r4, #0]
 8005358:	4618      	mov	r0, r3
 800535a:	bd10      	pop	{r4, pc}
 800535c:	20000478 	.word	0x20000478
 8005360:	20000640 	.word	0x20000640
 8005364:	08012fb8 	.word	0x08012fb8
 8005368:	08012fd8 	.word	0x08012fd8
 800536c:	08012ff4 	.word	0x08012ff4
 8005370:	08012fdc 	.word	0x08012fdc

08005374 <acc_rss_deactivate>:
 8005374:	b510      	push	{r4, lr}
 8005376:	4c0b      	ldr	r4, [pc, #44]	; (80053a4 <acc_rss_deactivate+0x30>)
 8005378:	7823      	ldrb	r3, [r4, #0]
 800537a:	b903      	cbnz	r3, 800537e <acc_rss_deactivate+0xa>
 800537c:	bd10      	pop	{r4, pc}
 800537e:	f000 fcd5 	bl	8005d2c <acc_service_manager_deactivate>
 8005382:	f002 fda5 	bl	8007ed0 <acc_sensor_manager_deactivate>
 8005386:	f001 f979 	bl	800667c <acc_rss_integration_log_level>
 800538a:	2801      	cmp	r0, #1
 800538c:	d905      	bls.n	800539a <acc_rss_deactivate+0x26>
 800538e:	4b06      	ldr	r3, [pc, #24]	; (80053a8 <acc_rss_deactivate+0x34>)
 8005390:	4a06      	ldr	r2, [pc, #24]	; (80053ac <acc_rss_deactivate+0x38>)
 8005392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005394:	4906      	ldr	r1, [pc, #24]	; (80053b0 <acc_rss_deactivate+0x3c>)
 8005396:	2002      	movs	r0, #2
 8005398:	4798      	blx	r3
 800539a:	f001 f8b1 	bl	8006500 <acc_rss_integration_unregister>
 800539e:	2300      	movs	r3, #0
 80053a0:	7023      	strb	r3, [r4, #0]
 80053a2:	bd10      	pop	{r4, pc}
 80053a4:	20000478 	.word	0x20000478
 80053a8:	20000640 	.word	0x20000640
 80053ac:	0801301c 	.word	0x0801301c
 80053b0:	08012fd8 	.word	0x08012fd8

080053b4 <acc_service_get_base_configuration>:
 80053b4:	b510      	push	{r4, lr}
 80053b6:	4604      	mov	r4, r0
 80053b8:	b108      	cbz	r0, 80053be <acc_service_get_base_configuration+0xa>
 80053ba:	6900      	ldr	r0, [r0, #16]
 80053bc:	bd10      	pop	{r4, pc}
 80053be:	f001 f95d 	bl	800667c <acc_rss_integration_log_level>
 80053c2:	2800      	cmp	r0, #0
 80053c4:	d0fa      	beq.n	80053bc <acc_service_get_base_configuration+0x8>
 80053c6:	4b04      	ldr	r3, [pc, #16]	; (80053d8 <acc_service_get_base_configuration+0x24>)
 80053c8:	4a04      	ldr	r2, [pc, #16]	; (80053dc <acc_service_get_base_configuration+0x28>)
 80053ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053cc:	4904      	ldr	r1, [pc, #16]	; (80053e0 <acc_service_get_base_configuration+0x2c>)
 80053ce:	2001      	movs	r0, #1
 80053d0:	4798      	blx	r3
 80053d2:	4620      	mov	r0, r4
 80053d4:	bd10      	pop	{r4, pc}
 80053d6:	bf00      	nop
 80053d8:	20000640 	.word	0x20000640
 80053dc:	08013040 	.word	0x08013040
 80053e0:	08013058 	.word	0x08013058

080053e4 <set_maximize_signal_attenuation>:
 80053e4:	b570      	push	{r4, r5, r6, lr}
 80053e6:	460d      	mov	r5, r1
 80053e8:	4606      	mov	r6, r0
 80053ea:	f7ff ffe3 	bl	80053b4 <acc_service_get_base_configuration>
 80053ee:	b158      	cbz	r0, 8005408 <set_maximize_signal_attenuation+0x24>
 80053f0:	4629      	mov	r1, r5
 80053f2:	4604      	mov	r4, r0
 80053f4:	f000 ff38 	bl	8006268 <acc_base_configuration_maximize_signal_attenuation_set>
 80053f8:	b93d      	cbnz	r5, 800540a <set_maximize_signal_attenuation+0x26>
 80053fa:	68b3      	ldr	r3, [r6, #8]
 80053fc:	b123      	cbz	r3, 8005408 <set_maximize_signal_attenuation+0x24>
 80053fe:	7971      	ldrb	r1, [r6, #5]
 8005400:	4630      	mov	r0, r6
 8005402:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005406:	4718      	bx	r3
 8005408:	bd70      	pop	{r4, r5, r6, pc}
 800540a:	4620      	mov	r0, r4
 800540c:	210f      	movs	r1, #15
 800540e:	f000 fe1d 	bl	800604c <acc_base_configuration_integrator_set>
 8005412:	4620      	mov	r0, r4
 8005414:	2101      	movs	r1, #1
 8005416:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800541a:	f000 be3f 	b.w	800609c <acc_base_configuration_integrator_ramp_up_set>
 800541e:	bf00      	nop

08005420 <acc_service_requested_start_set>:
 8005420:	b500      	push	{lr}
 8005422:	b083      	sub	sp, #12
 8005424:	ed8d 0a01 	vstr	s0, [sp, #4]
 8005428:	f7ff ffc4 	bl	80053b4 <acc_service_get_base_configuration>
 800542c:	ed9d 0a01 	vldr	s0, [sp, #4]
 8005430:	b003      	add	sp, #12
 8005432:	f85d eb04 	ldr.w	lr, [sp], #4
 8005436:	f000 bcd3 	b.w	8005de0 <acc_base_configuration_requested_start_set>
 800543a:	bf00      	nop

0800543c <acc_service_requested_length_set>:
 800543c:	b500      	push	{lr}
 800543e:	b083      	sub	sp, #12
 8005440:	ed8d 0a01 	vstr	s0, [sp, #4]
 8005444:	f7ff ffb6 	bl	80053b4 <acc_service_get_base_configuration>
 8005448:	ed9d 0a01 	vldr	s0, [sp, #4]
 800544c:	b003      	add	sp, #12
 800544e:	f85d eb04 	ldr.w	lr, [sp], #4
 8005452:	f000 bce1 	b.w	8005e18 <acc_base_configuration_requested_length_set>
 8005456:	bf00      	nop

08005458 <acc_service_pipeline_destroy>:
 8005458:	b510      	push	{r4, lr}
 800545a:	4604      	mov	r4, r0
 800545c:	6900      	ldr	r0, [r0, #16]
 800545e:	b118      	cbz	r0, 8005468 <acc_service_pipeline_destroy+0x10>
 8005460:	68c3      	ldr	r3, [r0, #12]
 8005462:	4798      	blx	r3
 8005464:	2300      	movs	r3, #0
 8005466:	6123      	str	r3, [r4, #16]
 8005468:	bd10      	pop	{r4, pc}
 800546a:	bf00      	nop

0800546c <acc_service_send_data>:
 800546c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800546e:	9e06      	ldr	r6, [sp, #24]
 8005470:	6944      	ldr	r4, [r0, #20]
 8005472:	7835      	ldrb	r5, [r6, #0]
 8005474:	461f      	mov	r7, r3
 8005476:	b91d      	cbnz	r5, 8005480 <acc_service_send_data+0x14>
 8005478:	7ea5      	ldrb	r5, [r4, #26]
 800547a:	b95d      	cbnz	r5, 8005494 <acc_service_send_data+0x28>
 800547c:	68a3      	ldr	r3, [r4, #8]
 800547e:	6019      	str	r1, [r3, #0]
 8005480:	6920      	ldr	r0, [r4, #16]
 8005482:	7665      	strb	r5, [r4, #25]
 8005484:	b128      	cbz	r0, 8005492 <acc_service_send_data+0x26>
 8005486:	6962      	ldr	r2, [r4, #20]
 8005488:	4639      	mov	r1, r7
 800548a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800548e:	f009 bac5 	b.w	800ea1c <memcpy>
 8005492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005494:	68e3      	ldr	r3, [r4, #12]
 8005496:	6860      	ldr	r0, [r4, #4]
 8005498:	429a      	cmp	r2, r3
 800549a:	bf28      	it	cs
 800549c:	461a      	movcs	r2, r3
 800549e:	f009 fabd 	bl	800ea1c <memcpy>
 80054a2:	7835      	ldrb	r5, [r6, #0]
 80054a4:	e7ec      	b.n	8005480 <acc_service_send_data+0x14>
 80054a6:	bf00      	nop

080054a8 <acc_service_set_module_active>:
 80054a8:	4b01      	ldr	r3, [pc, #4]	; (80054b0 <acc_service_set_module_active+0x8>)
 80054aa:	7018      	strb	r0, [r3, #0]
 80054ac:	4770      	bx	lr
 80054ae:	bf00      	nop
 80054b0:	20000479 	.word	0x20000479

080054b4 <acc_service_handle_valid>:
 80054b4:	b508      	push	{r3, lr}
 80054b6:	b118      	cbz	r0, 80054c0 <acc_service_handle_valid+0xc>
 80054b8:	6802      	ldr	r2, [r0, #0]
 80054ba:	4b06      	ldr	r3, [pc, #24]	; (80054d4 <acc_service_handle_valid+0x20>)
 80054bc:	429a      	cmp	r2, r3
 80054be:	d007      	beq.n	80054d0 <acc_service_handle_valid+0x1c>
 80054c0:	4b05      	ldr	r3, [pc, #20]	; (80054d8 <acc_service_handle_valid+0x24>)
 80054c2:	4a06      	ldr	r2, [pc, #24]	; (80054dc <acc_service_handle_valid+0x28>)
 80054c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054c6:	4906      	ldr	r1, [pc, #24]	; (80054e0 <acc_service_handle_valid+0x2c>)
 80054c8:	2000      	movs	r0, #0
 80054ca:	4798      	blx	r3
 80054cc:	2000      	movs	r0, #0
 80054ce:	bd08      	pop	{r3, pc}
 80054d0:	2001      	movs	r0, #1
 80054d2:	bd08      	pop	{r3, pc}
 80054d4:	acc09ee8 	.word	0xacc09ee8
 80054d8:	20000640 	.word	0x20000640
 80054dc:	08013060 	.word	0x08013060
 80054e0:	08013058 	.word	0x08013058

080054e4 <acc_service_activate>:
 80054e4:	b570      	push	{r4, r5, r6, lr}
 80054e6:	4604      	mov	r4, r0
 80054e8:	f7ff ffe4 	bl	80054b4 <acc_service_handle_valid>
 80054ec:	b1b0      	cbz	r0, 800551c <acc_service_activate+0x38>
 80054ee:	4b19      	ldr	r3, [pc, #100]	; (8005554 <acc_service_activate+0x70>)
 80054f0:	7818      	ldrb	r0, [r3, #0]
 80054f2:	b198      	cbz	r0, 800551c <acc_service_activate+0x38>
 80054f4:	7a63      	ldrb	r3, [r4, #9]
 80054f6:	b903      	cbnz	r3, 80054fa <acc_service_activate+0x16>
 80054f8:	bd70      	pop	{r4, r5, r6, pc}
 80054fa:	6863      	ldr	r3, [r4, #4]
 80054fc:	2b2a      	cmp	r3, #42	; 0x2a
 80054fe:	d80d      	bhi.n	800551c <acc_service_activate+0x38>
 8005500:	4d15      	ldr	r5, [pc, #84]	; (8005558 <acc_service_activate+0x74>)
 8005502:	f815 2013 	ldrb.w	r2, [r5, r3, lsl #1]
 8005506:	b94a      	cbnz	r2, 800551c <acc_service_activate+0x38>
 8005508:	eb05 0243 	add.w	r2, r5, r3, lsl #1
 800550c:	2101      	movs	r1, #1
 800550e:	7856      	ldrb	r6, [r2, #1]
 8005510:	f805 1013 	strb.w	r1, [r5, r3, lsl #1]
 8005514:	b156      	cbz	r6, 800552c <acc_service_activate+0x48>
 8005516:	2200      	movs	r2, #0
 8005518:	f805 2013 	strb.w	r2, [r5, r3, lsl #1]
 800551c:	4b0f      	ldr	r3, [pc, #60]	; (800555c <acc_service_activate+0x78>)
 800551e:	4a10      	ldr	r2, [pc, #64]	; (8005560 <acc_service_activate+0x7c>)
 8005520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005522:	4910      	ldr	r1, [pc, #64]	; (8005564 <acc_service_activate+0x80>)
 8005524:	2000      	movs	r0, #0
 8005526:	4798      	blx	r3
 8005528:	2000      	movs	r0, #0
 800552a:	bd70      	pop	{r4, r5, r6, pc}
 800552c:	f104 0018 	add.w	r0, r4, #24
 8005530:	f002 fe38 	bl	80081a4 <acc_sensor_manager_start_measurement>
 8005534:	6863      	ldr	r3, [r4, #4]
 8005536:	b910      	cbnz	r0, 800553e <acc_service_activate+0x5a>
 8005538:	2b2a      	cmp	r3, #42	; 0x2a
 800553a:	d8ef      	bhi.n	800551c <acc_service_activate+0x38>
 800553c:	e7eb      	b.n	8005516 <acc_service_activate+0x32>
 800553e:	2b2a      	cmp	r3, #42	; 0x2a
 8005540:	d805      	bhi.n	800554e <acc_service_activate+0x6a>
 8005542:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005546:	7266      	strb	r6, [r4, #9]
 8005548:	f825 2013 	strh.w	r2, [r5, r3, lsl #1]
 800554c:	bd70      	pop	{r4, r5, r6, pc}
 800554e:	7266      	strb	r6, [r4, #9]
 8005550:	bd70      	pop	{r4, r5, r6, pc}
 8005552:	bf00      	nop
 8005554:	20000479 	.word	0x20000479
 8005558:	2000047c 	.word	0x2000047c
 800555c:	20000640 	.word	0x20000640
 8005560:	08013070 	.word	0x08013070
 8005564:	08013058 	.word	0x08013058

08005568 <acc_service_deactivate>:
 8005568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800556c:	4605      	mov	r5, r0
 800556e:	f7ff ffa1 	bl	80054b4 <acc_service_handle_valid>
 8005572:	b110      	cbz	r0, 800557a <acc_service_deactivate+0x12>
 8005574:	4b16      	ldr	r3, [pc, #88]	; (80055d0 <acc_service_deactivate+0x68>)
 8005576:	781c      	ldrb	r4, [r3, #0]
 8005578:	b94c      	cbnz	r4, 800558e <acc_service_deactivate+0x26>
 800557a:	4b16      	ldr	r3, [pc, #88]	; (80055d4 <acc_service_deactivate+0x6c>)
 800557c:	4a16      	ldr	r2, [pc, #88]	; (80055d8 <acc_service_deactivate+0x70>)
 800557e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005580:	4916      	ldr	r1, [pc, #88]	; (80055dc <acc_service_deactivate+0x74>)
 8005582:	2000      	movs	r0, #0
 8005584:	4798      	blx	r3
 8005586:	2400      	movs	r4, #0
 8005588:	4620      	mov	r0, r4
 800558a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800558e:	7a6b      	ldrb	r3, [r5, #9]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d1f9      	bne.n	8005588 <acc_service_deactivate+0x20>
 8005594:	686b      	ldr	r3, [r5, #4]
 8005596:	2b2a      	cmp	r3, #42	; 0x2a
 8005598:	d8ef      	bhi.n	800557a <acc_service_deactivate+0x12>
 800559a:	4e11      	ldr	r6, [pc, #68]	; (80055e0 <acc_service_deactivate+0x78>)
 800559c:	f816 7013 	ldrb.w	r7, [r6, r3, lsl #1]
 80055a0:	2f00      	cmp	r7, #0
 80055a2:	d1ea      	bne.n	800557a <acc_service_deactivate+0x12>
 80055a4:	f04f 0801 	mov.w	r8, #1
 80055a8:	f105 0018 	add.w	r0, r5, #24
 80055ac:	f806 8013 	strb.w	r8, [r6, r3, lsl #1]
 80055b0:	f002 fe32 	bl	8008218 <acc_sensor_manager_stop_measurement>
 80055b4:	686b      	ldr	r3, [r5, #4]
 80055b6:	2b2a      	cmp	r3, #42	; 0x2a
 80055b8:	d807      	bhi.n	80055ca <acc_service_deactivate+0x62>
 80055ba:	eb06 0243 	add.w	r2, r6, r3, lsl #1
 80055be:	7057      	strb	r7, [r2, #1]
 80055c0:	f885 8009 	strb.w	r8, [r5, #9]
 80055c4:	f806 7013 	strb.w	r7, [r6, r3, lsl #1]
 80055c8:	e7de      	b.n	8005588 <acc_service_deactivate+0x20>
 80055ca:	f885 8009 	strb.w	r8, [r5, #9]
 80055ce:	e7db      	b.n	8005588 <acc_service_deactivate+0x20>
 80055d0:	20000479 	.word	0x20000479
 80055d4:	20000640 	.word	0x20000640
 80055d8:	0801308c 	.word	0x0801308c
 80055dc:	08013058 	.word	0x08013058
 80055e0:	2000047c 	.word	0x2000047c

080055e4 <acc_service_get_next>:
 80055e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055e8:	460c      	mov	r4, r1
 80055ea:	b082      	sub	sp, #8
 80055ec:	4606      	mov	r6, r0
 80055ee:	f7ff ff61 	bl	80054b4 <acc_service_handle_valid>
 80055f2:	7ea5      	ldrb	r5, [r4, #26]
 80055f4:	b175      	cbz	r5, 8005614 <acc_service_get_next+0x30>
 80055f6:	6863      	ldr	r3, [r4, #4]
 80055f8:	b10b      	cbz	r3, 80055fe <acc_service_get_next+0x1a>
 80055fa:	68e3      	ldr	r3, [r4, #12]
 80055fc:	b96b      	cbnz	r3, 800561a <acc_service_get_next+0x36>
 80055fe:	4b29      	ldr	r3, [pc, #164]	; (80056a4 <acc_service_get_next+0xc0>)
 8005600:	4a29      	ldr	r2, [pc, #164]	; (80056a8 <acc_service_get_next+0xc4>)
 8005602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005604:	4929      	ldr	r1, [pc, #164]	; (80056ac <acc_service_get_next+0xc8>)
 8005606:	2000      	movs	r0, #0
 8005608:	4798      	blx	r3
 800560a:	2500      	movs	r5, #0
 800560c:	4628      	mov	r0, r5
 800560e:	b002      	add	sp, #8
 8005610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005614:	68a3      	ldr	r3, [r4, #8]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d033      	beq.n	8005682 <acc_service_get_next+0x9e>
 800561a:	b920      	cbnz	r0, 8005626 <acc_service_get_next+0x42>
 800561c:	2500      	movs	r5, #0
 800561e:	4628      	mov	r0, r5
 8005620:	b002      	add	sp, #8
 8005622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005626:	7a33      	ldrb	r3, [r6, #8]
 8005628:	7822      	ldrb	r2, [r4, #0]
 800562a:	4293      	cmp	r3, r2
 800562c:	d007      	beq.n	800563e <acc_service_get_next+0x5a>
 800562e:	491d      	ldr	r1, [pc, #116]	; (80056a4 <acc_service_get_next+0xc0>)
 8005630:	9200      	str	r2, [sp, #0]
 8005632:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 8005634:	4a1e      	ldr	r2, [pc, #120]	; (80056b0 <acc_service_get_next+0xcc>)
 8005636:	491d      	ldr	r1, [pc, #116]	; (80056ac <acc_service_get_next+0xc8>)
 8005638:	2000      	movs	r0, #0
 800563a:	47a0      	blx	r4
 800563c:	e7ee      	b.n	800561c <acc_service_get_next+0x38>
 800563e:	7e27      	ldrb	r7, [r4, #24]
 8005640:	bb4f      	cbnz	r7, 8005696 <acc_service_get_next+0xb2>
 8005642:	f896 8009 	ldrb.w	r8, [r6, #9]
 8005646:	f1b8 0f00 	cmp.w	r8, #0
 800564a:	d00f      	beq.n	800566c <acc_service_get_next+0x88>
 800564c:	4b15      	ldr	r3, [pc, #84]	; (80056a4 <acc_service_get_next+0xc0>)
 800564e:	4a19      	ldr	r2, [pc, #100]	; (80056b4 <acc_service_get_next+0xd0>)
 8005650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005652:	4916      	ldr	r1, [pc, #88]	; (80056ac <acc_service_get_next+0xc8>)
 8005654:	2000      	movs	r0, #0
 8005656:	4798      	blx	r3
 8005658:	2500      	movs	r5, #0
 800565a:	2f00      	cmp	r7, #0
 800565c:	d0df      	beq.n	800561e <acc_service_get_next+0x3a>
 800565e:	4630      	mov	r0, r6
 8005660:	f7ff ff82 	bl	8005568 <acc_service_deactivate>
 8005664:	4628      	mov	r0, r5
 8005666:	b002      	add	sp, #8
 8005668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800566c:	6933      	ldr	r3, [r6, #16]
 800566e:	6174      	str	r4, [r6, #20]
 8005670:	e9d3 0200 	ldrd	r0, r2, [r3]
 8005674:	4790      	blx	r2
 8005676:	7e65      	ldrb	r5, [r4, #25]
 8005678:	f8c6 8014 	str.w	r8, [r6, #20]
 800567c:	f085 0501 	eor.w	r5, r5, #1
 8005680:	e7eb      	b.n	800565a <acc_service_get_next+0x76>
 8005682:	4b08      	ldr	r3, [pc, #32]	; (80056a4 <acc_service_get_next+0xc0>)
 8005684:	4a0c      	ldr	r2, [pc, #48]	; (80056b8 <acc_service_get_next+0xd4>)
 8005686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005688:	4908      	ldr	r1, [pc, #32]	; (80056ac <acc_service_get_next+0xc8>)
 800568a:	4628      	mov	r0, r5
 800568c:	4798      	blx	r3
 800568e:	4628      	mov	r0, r5
 8005690:	b002      	add	sp, #8
 8005692:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005696:	4630      	mov	r0, r6
 8005698:	f7ff ff24 	bl	80054e4 <acc_service_activate>
 800569c:	4607      	mov	r7, r0
 800569e:	2800      	cmp	r0, #0
 80056a0:	d1cf      	bne.n	8005642 <acc_service_get_next+0x5e>
 80056a2:	e7bb      	b.n	800561c <acc_service_get_next+0x38>
 80056a4:	20000640 	.word	0x20000640
 80056a8:	080130a8 	.word	0x080130a8
 80056ac:	08013058 	.word	0x08013058
 80056b0:	080130e0 	.word	0x080130e0
 80056b4:	080130fc 	.word	0x080130fc
 80056b8:	080130c8 	.word	0x080130c8

080056bc <acc_service_configuration_valid>:
 80056bc:	b508      	push	{r3, lr}
 80056be:	b118      	cbz	r0, 80056c8 <acc_service_configuration_valid+0xc>
 80056c0:	4b09      	ldr	r3, [pc, #36]	; (80056e8 <acc_service_configuration_valid+0x2c>)
 80056c2:	6802      	ldr	r2, [r0, #0]
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d007      	beq.n	80056d8 <acc_service_configuration_valid+0x1c>
 80056c8:	4b08      	ldr	r3, [pc, #32]	; (80056ec <acc_service_configuration_valid+0x30>)
 80056ca:	4a09      	ldr	r2, [pc, #36]	; (80056f0 <acc_service_configuration_valid+0x34>)
 80056cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056ce:	4909      	ldr	r1, [pc, #36]	; (80056f4 <acc_service_configuration_valid+0x38>)
 80056d0:	2000      	movs	r0, #0
 80056d2:	4798      	blx	r3
 80056d4:	2000      	movs	r0, #0
 80056d6:	bd08      	pop	{r3, pc}
 80056d8:	8b03      	ldrh	r3, [r0, #24]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d0f4      	beq.n	80056c8 <acc_service_configuration_valid+0xc>
 80056de:	6943      	ldr	r3, [r0, #20]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d0f1      	beq.n	80056c8 <acc_service_configuration_valid+0xc>
 80056e4:	2001      	movs	r0, #1
 80056e6:	bd08      	pop	{r3, pc}
 80056e8:	acc09dd7 	.word	0xacc09dd7
 80056ec:	20000640 	.word	0x20000640
 80056f0:	08013040 	.word	0x08013040
 80056f4:	08013058 	.word	0x08013058

080056f8 <acc_service_configuration_check>:
 80056f8:	b510      	push	{r4, lr}
 80056fa:	4604      	mov	r4, r0
 80056fc:	f7ff ffde 	bl	80056bc <acc_service_configuration_valid>
 8005700:	b118      	cbz	r0, 800570a <acc_service_configuration_check+0x12>
 8005702:	7963      	ldrb	r3, [r4, #5]
 8005704:	3b01      	subs	r3, #1
 8005706:	2b04      	cmp	r3, #4
 8005708:	d800      	bhi.n	800570c <acc_service_configuration_check+0x14>
 800570a:	bd10      	pop	{r4, pc}
 800570c:	4b03      	ldr	r3, [pc, #12]	; (800571c <acc_service_configuration_check+0x24>)
 800570e:	4a04      	ldr	r2, [pc, #16]	; (8005720 <acc_service_configuration_check+0x28>)
 8005710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005712:	4904      	ldr	r1, [pc, #16]	; (8005724 <acc_service_configuration_check+0x2c>)
 8005714:	2000      	movs	r0, #0
 8005716:	4798      	blx	r3
 8005718:	2000      	movs	r0, #0
 800571a:	bd10      	pop	{r4, pc}
 800571c:	20000640 	.word	0x20000640
 8005720:	08013114 	.word	0x08013114
 8005724:	08013058 	.word	0x08013058

08005728 <acc_service_profile_set>:
 8005728:	b510      	push	{r4, lr}
 800572a:	b138      	cbz	r0, 800573c <acc_service_profile_set+0x14>
 800572c:	6882      	ldr	r2, [r0, #8]
 800572e:	4604      	mov	r4, r0
 8005730:	b122      	cbz	r2, 800573c <acc_service_profile_set+0x14>
 8005732:	7141      	strb	r1, [r0, #5]
 8005734:	4790      	blx	r2
 8005736:	7b23      	ldrb	r3, [r4, #12]
 8005738:	b963      	cbnz	r3, 8005754 <acc_service_profile_set+0x2c>
 800573a:	bd10      	pop	{r4, pc}
 800573c:	f000 ff9e 	bl	800667c <acc_rss_integration_log_level>
 8005740:	2800      	cmp	r0, #0
 8005742:	d0fa      	beq.n	800573a <acc_service_profile_set+0x12>
 8005744:	4b06      	ldr	r3, [pc, #24]	; (8005760 <acc_service_profile_set+0x38>)
 8005746:	4a07      	ldr	r2, [pc, #28]	; (8005764 <acc_service_profile_set+0x3c>)
 8005748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800574a:	4907      	ldr	r1, [pc, #28]	; (8005768 <acc_service_profile_set+0x40>)
 800574c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005750:	2001      	movs	r0, #1
 8005752:	4718      	bx	r3
 8005754:	4620      	mov	r0, r4
 8005756:	2101      	movs	r1, #1
 8005758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800575c:	f7ff be42 	b.w	80053e4 <set_maximize_signal_attenuation>
 8005760:	20000640 	.word	0x20000640
 8005764:	08013040 	.word	0x08013040
 8005768:	08013058 	.word	0x08013058

0800576c <acc_service_maximize_signal_attenuation_set>:
 800576c:	b110      	cbz	r0, 8005774 <acc_service_maximize_signal_attenuation_set+0x8>
 800576e:	7301      	strb	r1, [r0, #12]
 8005770:	f7ff be38 	b.w	80053e4 <set_maximize_signal_attenuation>
 8005774:	b510      	push	{r4, lr}
 8005776:	f000 ff81 	bl	800667c <acc_rss_integration_log_level>
 800577a:	b138      	cbz	r0, 800578c <acc_service_maximize_signal_attenuation_set+0x20>
 800577c:	4b04      	ldr	r3, [pc, #16]	; (8005790 <acc_service_maximize_signal_attenuation_set+0x24>)
 800577e:	4a05      	ldr	r2, [pc, #20]	; (8005794 <acc_service_maximize_signal_attenuation_set+0x28>)
 8005780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005782:	4905      	ldr	r1, [pc, #20]	; (8005798 <acc_service_maximize_signal_attenuation_set+0x2c>)
 8005784:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005788:	2001      	movs	r0, #1
 800578a:	4718      	bx	r3
 800578c:	bd10      	pop	{r4, pc}
 800578e:	bf00      	nop
 8005790:	20000640 	.word	0x20000640
 8005794:	08013040 	.word	0x08013040
 8005798:	08013058 	.word	0x08013058

0800579c <acc_service_initialize_service_configuration>:
 800579c:	b538      	push	{r3, r4, r5, lr}
 800579e:	7101      	strb	r1, [r0, #4]
 80057a0:	6102      	str	r2, [r0, #16]
 80057a2:	9905      	ldr	r1, [sp, #20]
 80057a4:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80057a8:	4d07      	ldr	r5, [pc, #28]	; (80057c8 <acc_service_initialize_service_configuration+0x2c>)
 80057aa:	6143      	str	r3, [r0, #20]
 80057ac:	4604      	mov	r4, r0
 80057ae:	6005      	str	r5, [r0, #0]
 80057b0:	6081      	str	r1, [r0, #8]
 80057b2:	8302      	strh	r2, [r0, #24]
 80057b4:	f89d 1018 	ldrb.w	r1, [sp, #24]
 80057b8:	f7ff ffb6 	bl	8005728 <acc_service_profile_set>
 80057bc:	4620      	mov	r0, r4
 80057be:	2100      	movs	r1, #0
 80057c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80057c4:	f7ff bfd2 	b.w	800576c <acc_service_maximize_signal_attenuation_set>
 80057c8:	acc09dd7 	.word	0xacc09dd7

080057cc <envelope_send_data>:
 80057cc:	b570      	push	{r4, r5, r6, lr}
 80057ce:	460b      	mov	r3, r1
 80057d0:	b084      	sub	sp, #16
 80057d2:	ac02      	add	r4, sp, #8
 80057d4:	4601      	mov	r1, r0
 80057d6:	4610      	mov	r0, r2
 80057d8:	795a      	ldrb	r2, [r3, #5]
 80057da:	9400      	str	r4, [sp, #0]
 80057dc:	791e      	ldrb	r6, [r3, #4]
 80057de:	79dd      	ldrb	r5, [r3, #7]
 80057e0:	799c      	ldrb	r4, [r3, #6]
 80057e2:	f88d 200d 	strb.w	r2, [sp, #13]
 80057e6:	f88d 2008 	strb.w	r2, [sp, #8]
 80057ea:	691a      	ldr	r2, [r3, #16]
 80057ec:	f88d 600e 	strb.w	r6, [sp, #14]
 80057f0:	ab03      	add	r3, sp, #12
 80057f2:	f88d 500f 	strb.w	r5, [sp, #15]
 80057f6:	f88d 400c 	strb.w	r4, [sp, #12]
 80057fa:	f7ff fe37 	bl	800546c <acc_service_send_data>
 80057fe:	b004      	add	sp, #16
 8005800:	bd70      	pop	{r4, r5, r6, pc}
 8005802:	bf00      	nop

08005804 <envelope_create_service>:
 8005804:	b570      	push	{r4, r5, r6, lr}
 8005806:	b0a4      	sub	sp, #144	; 0x90
 8005808:	2288      	movs	r2, #136	; 0x88
 800580a:	4604      	mov	r4, r0
 800580c:	a802      	add	r0, sp, #8
 800580e:	460d      	mov	r5, r1
 8005810:	f009 f904 	bl	800ea1c <memcpy>
 8005814:	a809      	add	r0, sp, #36	; 0x24
 8005816:	f000 fcc3 	bl	80061a0 <acc_base_configuration_downsampling_factor_get>
 800581a:	ee07 0a90 	vmov	s15, r0
 800581e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8005822:	eddd 7a23 	vldr	s15, [sp, #140]	; 0x8c
 8005826:	a809      	add	r0, sp, #36	; 0x24
 8005828:	ee20 0a27 	vmul.f32	s0, s0, s15
 800582c:	f000 fbb2 	bl	8005f94 <acc_base_configuration_demodulation_filter_cutoff_freq_ratio_set>
 8005830:	a802      	add	r0, sp, #8
 8005832:	f7ff ff61 	bl	80056f8 <acc_service_configuration_check>
 8005836:	b1c0      	cbz	r0, 800586a <envelope_create_service+0x66>
 8005838:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800583a:	2b04      	cmp	r3, #4
 800583c:	d00f      	beq.n	800585e <envelope_create_service+0x5a>
 800583e:	a809      	add	r0, sp, #36	; 0x24
 8005840:	f000 fdb8 	bl	80063b4 <acc_base_configuration_check>
 8005844:	b188      	cbz	r0, 800586a <envelope_create_service+0x66>
 8005846:	a809      	add	r0, sp, #36	; 0x24
 8005848:	f000 fcaa 	bl	80061a0 <acc_base_configuration_downsampling_factor_get>
 800584c:	1e43      	subs	r3, r0, #1
 800584e:	b29b      	uxth	r3, r3
 8005850:	2b01      	cmp	r3, #1
 8005852:	d90d      	bls.n	8005870 <envelope_create_service+0x6c>
 8005854:	2804      	cmp	r0, #4
 8005856:	d00b      	beq.n	8005870 <envelope_create_service+0x6c>
 8005858:	4b1a      	ldr	r3, [pc, #104]	; (80058c4 <envelope_create_service+0xc0>)
 800585a:	4a1b      	ldr	r2, [pc, #108]	; (80058c8 <envelope_create_service+0xc4>)
 800585c:	e001      	b.n	8005862 <envelope_create_service+0x5e>
 800585e:	4b19      	ldr	r3, [pc, #100]	; (80058c4 <envelope_create_service+0xc0>)
 8005860:	4a1a      	ldr	r2, [pc, #104]	; (80058cc <envelope_create_service+0xc8>)
 8005862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005864:	491a      	ldr	r1, [pc, #104]	; (80058d0 <envelope_create_service+0xcc>)
 8005866:	2000      	movs	r0, #0
 8005868:	4798      	blx	r3
 800586a:	2000      	movs	r0, #0
 800586c:	b024      	add	sp, #144	; 0x90
 800586e:	bd70      	pop	{r4, r5, r6, pc}
 8005870:	2200      	movs	r2, #0
 8005872:	4611      	mov	r1, r2
 8005874:	a809      	add	r0, sp, #36	; 0x24
 8005876:	f000 fd01 	bl	800627c <acc_base_configuration_cca_get>
 800587a:	2100      	movs	r1, #0
 800587c:	4606      	mov	r6, r0
 800587e:	a809      	add	r0, sp, #36	; 0x24
 8005880:	f000 fb4e 	bl	8005f20 <acc_base_configuration_time_domain_low_pass_filter_alpha_get>
 8005884:	b106      	cbz	r6, 8005888 <envelope_create_service+0x84>
 8005886:	b990      	cbnz	r0, 80058ae <envelope_create_service+0xaa>
 8005888:	792b      	ldrb	r3, [r5, #4]
 800588a:	7223      	strb	r3, [r4, #8]
 800588c:	4b11      	ldr	r3, [pc, #68]	; (80058d4 <envelope_create_service+0xd0>)
 800588e:	9301      	str	r3, [sp, #4]
 8005890:	aa09      	add	r2, sp, #36	; 0x24
 8005892:	4623      	mov	r3, r4
 8005894:	a901      	add	r1, sp, #4
 8005896:	f104 0018 	add.w	r0, r4, #24
 800589a:	f000 ff21 	bl	80066e0 <acc_pipeline_envelope_assemble>
 800589e:	4b0e      	ldr	r3, [pc, #56]	; (80058d8 <envelope_create_service+0xd4>)
 80058a0:	6120      	str	r0, [r4, #16]
 80058a2:	3800      	subs	r0, #0
 80058a4:	bf18      	it	ne
 80058a6:	2001      	movne	r0, #1
 80058a8:	60e3      	str	r3, [r4, #12]
 80058aa:	b024      	add	sp, #144	; 0x90
 80058ac:	bd70      	pop	{r4, r5, r6, pc}
 80058ae:	f000 fee5 	bl	800667c <acc_rss_integration_log_level>
 80058b2:	2800      	cmp	r0, #0
 80058b4:	d0e8      	beq.n	8005888 <envelope_create_service+0x84>
 80058b6:	4b03      	ldr	r3, [pc, #12]	; (80058c4 <envelope_create_service+0xc0>)
 80058b8:	4a08      	ldr	r2, [pc, #32]	; (80058dc <envelope_create_service+0xd8>)
 80058ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058bc:	4904      	ldr	r1, [pc, #16]	; (80058d0 <envelope_create_service+0xcc>)
 80058be:	2001      	movs	r0, #1
 80058c0:	4798      	blx	r3
 80058c2:	e7e1      	b.n	8005888 <envelope_create_service+0x84>
 80058c4:	20000640 	.word	0x20000640
 80058c8:	0801317c 	.word	0x0801317c
 80058cc:	0801312c 	.word	0x0801312c
 80058d0:	08013168 	.word	0x08013168
 80058d4:	080057cd 	.word	0x080057cd
 80058d8:	08005459 	.word	0x08005459
 80058dc:	0801319c 	.word	0x0801319c

080058e0 <get_and_validate_envelope_configuration>:
 80058e0:	b510      	push	{r4, lr}
 80058e2:	4604      	mov	r4, r0
 80058e4:	f7ff feea 	bl	80056bc <acc_service_configuration_valid>
 80058e8:	b108      	cbz	r0, 80058ee <get_and_validate_envelope_configuration+0xe>
 80058ea:	7923      	ldrb	r3, [r4, #4]
 80058ec:	b153      	cbz	r3, 8005904 <get_and_validate_envelope_configuration+0x24>
 80058ee:	f000 fec5 	bl	800667c <acc_rss_integration_log_level>
 80058f2:	b130      	cbz	r0, 8005902 <get_and_validate_envelope_configuration+0x22>
 80058f4:	4b04      	ldr	r3, [pc, #16]	; (8005908 <get_and_validate_envelope_configuration+0x28>)
 80058f6:	4a05      	ldr	r2, [pc, #20]	; (800590c <get_and_validate_envelope_configuration+0x2c>)
 80058f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058fa:	4905      	ldr	r1, [pc, #20]	; (8005910 <get_and_validate_envelope_configuration+0x30>)
 80058fc:	2001      	movs	r0, #1
 80058fe:	4798      	blx	r3
 8005900:	2000      	movs	r0, #0
 8005902:	bd10      	pop	{r4, pc}
 8005904:	4620      	mov	r0, r4
 8005906:	bd10      	pop	{r4, pc}
 8005908:	20000640 	.word	0x20000640
 800590c:	08013040 	.word	0x08013040
 8005910:	08013168 	.word	0x08013168

08005914 <set_configuration_for_profile>:
 8005914:	b530      	push	{r4, r5, lr}
 8005916:	b083      	sub	sp, #12
 8005918:	460c      	mov	r4, r1
 800591a:	f7ff ffe1 	bl	80058e0 <get_and_validate_envelope_configuration>
 800591e:	b1c0      	cbz	r0, 8005952 <set_configuration_for_profile+0x3e>
 8005920:	1e61      	subs	r1, r4, #1
 8005922:	4605      	mov	r5, r0
 8005924:	301c      	adds	r0, #28
 8005926:	2904      	cmp	r1, #4
 8005928:	d813      	bhi.n	8005952 <set_configuration_for_profile+0x3e>
 800592a:	e8df f001 	tbb	[pc, r1]
 800592e:	2514      	.short	0x2514
 8005930:	3836      	.short	0x3836
 8005932:	03          	.byte	0x03
 8005933:	00          	.byte	0x00
 8005934:	2110      	movs	r1, #16
 8005936:	9001      	str	r0, [sp, #4]
 8005938:	f000 fb9c 	bl	8006074 <acc_base_configuration_wg_duration_set>
 800593c:	9801      	ldr	r0, [sp, #4]
 800593e:	2106      	movs	r1, #6
 8005940:	f000 fb84 	bl	800604c <acc_base_configuration_integrator_set>
 8005944:	9801      	ldr	r0, [sp, #4]
 8005946:	2101      	movs	r1, #1
 8005948:	f000 fba8 	bl	800609c <acc_base_configuration_integrator_ramp_up_set>
 800594c:	4b15      	ldr	r3, [pc, #84]	; (80059a4 <set_configuration_for_profile+0x90>)
 800594e:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
 8005952:	b003      	add	sp, #12
 8005954:	bd30      	pop	{r4, r5, pc}
 8005956:	2100      	movs	r1, #0
 8005958:	9001      	str	r0, [sp, #4]
 800595a:	f000 fb8b 	bl	8006074 <acc_base_configuration_wg_duration_set>
 800595e:	9801      	ldr	r0, [sp, #4]
 8005960:	2100      	movs	r1, #0
 8005962:	f000 fb73 	bl	800604c <acc_base_configuration_integrator_set>
 8005966:	9801      	ldr	r0, [sp, #4]
 8005968:	2103      	movs	r1, #3
 800596a:	f000 fb97 	bl	800609c <acc_base_configuration_integrator_ramp_up_set>
 800596e:	4b0e      	ldr	r3, [pc, #56]	; (80059a8 <set_configuration_for_profile+0x94>)
 8005970:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
 8005974:	b003      	add	sp, #12
 8005976:	bd30      	pop	{r4, r5, pc}
 8005978:	2107      	movs	r1, #7
 800597a:	9001      	str	r0, [sp, #4]
 800597c:	f000 fb7a 	bl	8006074 <acc_base_configuration_wg_duration_set>
 8005980:	9801      	ldr	r0, [sp, #4]
 8005982:	2106      	movs	r1, #6
 8005984:	f000 fb62 	bl	800604c <acc_base_configuration_integrator_set>
 8005988:	9801      	ldr	r0, [sp, #4]
 800598a:	2109      	movs	r1, #9
 800598c:	f000 fb86 	bl	800609c <acc_base_configuration_integrator_ramp_up_set>
 8005990:	4b04      	ldr	r3, [pc, #16]	; (80059a4 <set_configuration_for_profile+0x90>)
 8005992:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
 8005996:	b003      	add	sp, #12
 8005998:	bd30      	pop	{r4, r5, pc}
 800599a:	2109      	movs	r1, #9
 800599c:	e7ed      	b.n	800597a <set_configuration_for_profile+0x66>
 800599e:	210c      	movs	r1, #12
 80059a0:	e7c9      	b.n	8005936 <set_configuration_for_profile+0x22>
 80059a2:	bf00      	nop
 80059a4:	3b843809 	.word	0x3b843809
 80059a8:	3c8461fa 	.word	0x3c8461fa

080059ac <acc_service_envelope_configuration_create>:
 80059ac:	b570      	push	{r4, r5, r6, lr}
 80059ae:	4a3e      	ldr	r2, [pc, #248]	; (8005aa8 <acc_service_envelope_configuration_create+0xfc>)
 80059b0:	b084      	sub	sp, #16
 80059b2:	236d      	movs	r3, #109	; 0x6d
 80059b4:	2188      	movs	r1, #136	; 0x88
 80059b6:	2001      	movs	r0, #1
 80059b8:	f000 fe30 	bl	800661c <acc_rss_integration_mem_calloc_debug>
 80059bc:	4605      	mov	r5, r0
 80059be:	2800      	cmp	r0, #0
 80059c0:	d06f      	beq.n	8005aa2 <acc_service_envelope_configuration_create+0xf6>
 80059c2:	493a      	ldr	r1, [pc, #232]	; (8005aac <acc_service_envelope_configuration_create+0x100>)
 80059c4:	f100 041c 	add.w	r4, r0, #28
 80059c8:	2602      	movs	r6, #2
 80059ca:	2358      	movs	r3, #88	; 0x58
 80059cc:	4622      	mov	r2, r4
 80059ce:	e9cd 3100 	strd	r3, r1, [sp]
 80059d2:	9602      	str	r6, [sp, #8]
 80059d4:	4b36      	ldr	r3, [pc, #216]	; (8005ab0 <acc_service_envelope_configuration_create+0x104>)
 80059d6:	2100      	movs	r1, #0
 80059d8:	f7ff fee0 	bl	800579c <acc_service_initialize_service_configuration>
 80059dc:	ed9f 0a35 	vldr	s0, [pc, #212]	; 8005ab4 <acc_service_envelope_configuration_create+0x108>
 80059e0:	4620      	mov	r0, r4
 80059e2:	f000 f9fd 	bl	8005de0 <acc_base_configuration_requested_start_set>
 80059e6:	ed9f 0a34 	vldr	s0, [pc, #208]	; 8005ab8 <acc_service_envelope_configuration_create+0x10c>
 80059ea:	4620      	mov	r0, r4
 80059ec:	f000 fa14 	bl	8005e18 <acc_base_configuration_requested_length_set>
 80059f0:	4620      	mov	r0, r4
 80059f2:	2106      	movs	r1, #6
 80059f4:	f000 fc64 	bl	80062c0 <acc_base_configuration_mur_set>
 80059f8:	4620      	mov	r0, r4
 80059fa:	210a      	movs	r1, #10
 80059fc:	f000 fa64 	bl	8005ec8 <acc_base_configuration_hw_accelerated_average_samples_set>
 8005a00:	2101      	movs	r1, #1
 8005a02:	4620      	mov	r0, r4
 8005a04:	f000 f9d6 	bl	8005db4 <acc_base_configuration_sensor_set>
 8005a08:	4620      	mov	r0, r4
 8005a0a:	f000 fa13 	bl	8005e34 <acc_base_configuration_repetition_mode_on_demand_set>
 8005a0e:	4631      	mov	r1, r6
 8005a10:	4620      	mov	r0, r4
 8005a12:	f000 fa1f 	bl	8005e54 <acc_base_configuration_power_save_mode_set>
 8005a16:	4620      	mov	r0, r4
 8005a18:	2100      	movs	r1, #0
 8005a1a:	f000 fb67 	bl	80060ec <acc_base_configuration_use_point_range_set>
 8005a1e:	4620      	mov	r0, r4
 8005a20:	2100      	movs	r1, #0
 8005a22:	f000 fb4f 	bl	80060c4 <acc_base_configuration_sweep_type_debug_set>
 8005a26:	4620      	mov	r0, r4
 8005a28:	2100      	movs	r1, #0
 8005a2a:	f000 fa25 	bl	8005e78 <acc_base_configuration_tx_disable_set>
 8005a2e:	4620      	mov	r0, r4
 8005a30:	2100      	movs	r1, #0
 8005a32:	f000 fa35 	bl	8005ea0 <acc_base_configuration_decrease_tx_emission_set>
 8005a36:	2200      	movs	r2, #0
 8005a38:	4611      	mov	r1, r2
 8005a3a:	2340      	movs	r3, #64	; 0x40
 8005a3c:	4620      	mov	r0, r4
 8005a3e:	f000 fc2f 	bl	80062a0 <acc_base_configuration_cca_set>
 8005a42:	4620      	mov	r0, r4
 8005a44:	21ff      	movs	r1, #255	; 0xff
 8005a46:	f000 fb6f 	bl	8006128 <acc_base_configuration_staggered_vga_stabilization_time_set>
 8005a4a:	4620      	mov	r0, r4
 8005a4c:	2100      	movs	r1, #0
 8005a4e:	f000 fb61 	bl	8006114 <acc_base_configuration_use_fast_dll_refresh_routine_set>
 8005a52:	4620      	mov	r0, r4
 8005a54:	2101      	movs	r1, #1
 8005a56:	f000 fbad 	bl	80061b4 <acc_base_configuration_downsampling_factor_set>
 8005a5a:	4620      	mov	r0, r4
 8005a5c:	210b      	movs	r1, #11
 8005a5e:	f000 fae3 	bl	8006028 <acc_base_configuration_gain_set>
 8005a62:	2101      	movs	r1, #1
 8005a64:	4620      	mov	r0, r4
 8005a66:	f000 fbb9 	bl	80061dc <acc_base_configuration_noise_level_normalization_set>
 8005a6a:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8005abc <acc_service_envelope_configuration_create+0x110>
 8005a6e:	4620      	mov	r0, r4
 8005a70:	f000 fa48 	bl	8005f04 <acc_base_configuration_phase_compensation_alpha_set>
 8005a74:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8005ac0 <acc_service_envelope_configuration_create+0x114>
 8005a78:	4620      	mov	r0, r4
 8005a7a:	2101      	movs	r1, #1
 8005a7c:	f000 fa5c 	bl	8005f38 <acc_base_configuration_time_domain_low_pass_filter_alpha_set>
 8005a80:	4620      	mov	r0, r4
 8005a82:	2101      	movs	r1, #1
 8005a84:	f000 fa70 	bl	8005f68 <acc_base_configuration_filter_demodulated_data_set>
 8005a88:	4620      	mov	r0, r4
 8005a8a:	2101      	movs	r1, #1
 8005a8c:	f000 fbc4 	bl	8006218 <acc_base_configuration_asynchronous_measurement_set>
 8005a90:	4620      	mov	r0, r4
 8005a92:	f44f 5196 	mov.w	r1, #4800	; 0x12c0
 8005a96:	f000 fbd3 	bl	8006240 <acc_base_configuration_min_pipeline_memory_size_set>
 8005a9a:	490a      	ldr	r1, [pc, #40]	; (8005ac4 <acc_service_envelope_configuration_create+0x118>)
 8005a9c:	4620      	mov	r0, r4
 8005a9e:	f000 fa1b 	bl	8005ed8 <acc_base_configuration_radar_engine_creation_set>
 8005aa2:	4628      	mov	r0, r5
 8005aa4:	b004      	add	sp, #16
 8005aa6:	bd70      	pop	{r4, r5, r6, pc}
 8005aa8:	08013168 	.word	0x08013168
 8005aac:	08005915 	.word	0x08005915
 8005ab0:	08005805 	.word	0x08005805
 8005ab4:	3e4ccccd 	.word	0x3e4ccccd
 8005ab8:	3ecccccd 	.word	0x3ecccccd
 8005abc:	3dcccccd 	.word	0x3dcccccd
 8005ac0:	3e99999a 	.word	0x3e99999a
 8005ac4:	080074b9 	.word	0x080074b9

08005ac8 <acc_service_envelope_configuration_destroy>:
 8005ac8:	b130      	cbz	r0, 8005ad8 <acc_service_envelope_configuration_destroy+0x10>
 8005aca:	b510      	push	{r4, lr}
 8005acc:	4604      	mov	r4, r0
 8005ace:	6800      	ldr	r0, [r0, #0]
 8005ad0:	f7ff fdf4 	bl	80056bc <acc_service_configuration_valid>
 8005ad4:	b908      	cbnz	r0, 8005ada <acc_service_envelope_configuration_destroy+0x12>
 8005ad6:	bd10      	pop	{r4, pc}
 8005ad8:	4770      	bx	lr
 8005ada:	6820      	ldr	r0, [r4, #0]
 8005adc:	f7ff ff00 	bl	80058e0 <get_and_validate_envelope_configuration>
 8005ae0:	f000 fdba 	bl	8006658 <acc_rss_integration_mem_free>
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	6023      	str	r3, [r4, #0]
 8005ae8:	bd10      	pop	{r4, pc}
 8005aea:	bf00      	nop

08005aec <acc_service_envelope_get_metadata>:
 8005aec:	b1e0      	cbz	r0, 8005b28 <acc_service_envelope_get_metadata+0x3c>
 8005aee:	7a03      	ldrb	r3, [r0, #8]
 8005af0:	b9d3      	cbnz	r3, 8005b28 <acc_service_envelope_get_metadata+0x3c>
 8005af2:	b1c9      	cbz	r1, 8005b28 <acc_service_envelope_get_metadata+0x3c>
 8005af4:	6903      	ldr	r3, [r0, #16]
 8005af6:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8005b2c <acc_service_envelope_get_metadata+0x40>
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	edd3 7a08 	vldr	s15, [r3, #32]
 8005b00:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005b02:	8d58      	ldrh	r0, [r3, #42]	; 0x2a
 8005b04:	b430      	push	{r4, r5}
 8005b06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b0a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005b0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b12:	695d      	ldr	r5, [r3, #20]
 8005b14:	699c      	ldr	r4, [r3, #24]
 8005b16:	604c      	str	r4, [r1, #4]
 8005b18:	1e53      	subs	r3, r2, #1
 8005b1a:	600d      	str	r5, [r1, #0]
 8005b1c:	edc1 7a03 	vstr	s15, [r1, #12]
 8005b20:	bc30      	pop	{r4, r5}
 8005b22:	814b      	strh	r3, [r1, #10]
 8005b24:	8108      	strh	r0, [r1, #8]
 8005b26:	4770      	bx	lr
 8005b28:	4770      	bx	lr
 8005b2a:	bf00      	nop
 8005b2c:	4d8ef3c2 	.word	0x4d8ef3c2

08005b30 <acc_service_envelope_get_next>:
 8005b30:	b530      	push	{r4, r5, lr}
 8005b32:	b08b      	sub	sp, #44	; 0x2c
 8005b34:	0052      	lsls	r2, r2, #1
 8005b36:	9101      	str	r1, [sp, #4]
 8005b38:	2400      	movs	r4, #0
 8005b3a:	9206      	str	r2, [sp, #24]
 8005b3c:	9307      	str	r3, [sp, #28]
 8005b3e:	2204      	movs	r2, #4
 8005b40:	2301      	movs	r3, #1
 8005b42:	9104      	str	r1, [sp, #16]
 8005b44:	ad01      	add	r5, sp, #4
 8005b46:	a903      	add	r1, sp, #12
 8005b48:	f88d 400c 	strb.w	r4, [sp, #12]
 8005b4c:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
 8005b50:	9505      	str	r5, [sp, #20]
 8005b52:	9208      	str	r2, [sp, #32]
 8005b54:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
 8005b58:	f7ff fd44 	bl	80055e4 <acc_service_get_next>
 8005b5c:	b00b      	add	sp, #44	; 0x2c
 8005b5e:	bd30      	pop	{r4, r5, pc}

08005b60 <destroy_handle>:
 8005b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b64:	4e15      	ldr	r6, [pc, #84]	; (8005bbc <destroy_handle+0x5c>)
 8005b66:	4605      	mov	r5, r0
 8005b68:	6874      	ldr	r4, [r6, #4]
 8005b6a:	f000 fd87 	bl	800667c <acc_rss_integration_log_level>
 8005b6e:	2803      	cmp	r0, #3
 8005b70:	d906      	bls.n	8005b80 <destroy_handle+0x20>
 8005b72:	4a13      	ldr	r2, [pc, #76]	; (8005bc0 <destroy_handle+0x60>)
 8005b74:	686b      	ldr	r3, [r5, #4]
 8005b76:	6b57      	ldr	r7, [r2, #52]	; 0x34
 8005b78:	4912      	ldr	r1, [pc, #72]	; (8005bc4 <destroy_handle+0x64>)
 8005b7a:	4a13      	ldr	r2, [pc, #76]	; (8005bc8 <destroy_handle+0x68>)
 8005b7c:	2004      	movs	r0, #4
 8005b7e:	47b8      	blx	r7
 8005b80:	b144      	cbz	r4, 8005b94 <destroy_handle+0x34>
 8005b82:	42ac      	cmp	r4, r5
 8005b84:	d102      	bne.n	8005b8c <destroy_handle+0x2c>
 8005b86:	e016      	b.n	8005bb6 <destroy_handle+0x56>
 8005b88:	42a5      	cmp	r5, r4
 8005b8a:	d00d      	beq.n	8005ba8 <destroy_handle+0x48>
 8005b8c:	4623      	mov	r3, r4
 8005b8e:	6d64      	ldr	r4, [r4, #84]	; 0x54
 8005b90:	2c00      	cmp	r4, #0
 8005b92:	d1f9      	bne.n	8005b88 <destroy_handle+0x28>
 8005b94:	4a0a      	ldr	r2, [pc, #40]	; (8005bc0 <destroy_handle+0x60>)
 8005b96:	686b      	ldr	r3, [r5, #4]
 8005b98:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8005b9a:	490a      	ldr	r1, [pc, #40]	; (8005bc4 <destroy_handle+0x64>)
 8005b9c:	4a0b      	ldr	r2, [pc, #44]	; (8005bcc <destroy_handle+0x6c>)
 8005b9e:	46a4      	mov	ip, r4
 8005ba0:	2000      	movs	r0, #0
 8005ba2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ba6:	4760      	bx	ip
 8005ba8:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 8005baa:	655a      	str	r2, [r3, #84]	; 0x54
 8005bac:	4628      	mov	r0, r5
 8005bae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005bb2:	f000 bd51 	b.w	8006658 <acc_rss_integration_mem_free>
 8005bb6:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8005bb8:	6073      	str	r3, [r6, #4]
 8005bba:	e7f7      	b.n	8005bac <destroy_handle+0x4c>
 8005bbc:	200004d4 	.word	0x200004d4
 8005bc0:	20000640 	.word	0x20000640
 8005bc4:	08013208 	.word	0x08013208
 8005bc8:	080131e4 	.word	0x080131e4
 8005bcc:	08013218 	.word	0x08013218

08005bd0 <acc_service_manager_activate>:
 8005bd0:	b510      	push	{r4, lr}
 8005bd2:	4c05      	ldr	r4, [pc, #20]	; (8005be8 <acc_service_manager_activate+0x18>)
 8005bd4:	7820      	ldrb	r0, [r4, #0]
 8005bd6:	b100      	cbz	r0, 8005bda <acc_service_manager_activate+0xa>
 8005bd8:	bd10      	pop	{r4, pc}
 8005bda:	2001      	movs	r0, #1
 8005bdc:	7020      	strb	r0, [r4, #0]
 8005bde:	f7ff fc63 	bl	80054a8 <acc_service_set_module_active>
 8005be2:	7820      	ldrb	r0, [r4, #0]
 8005be4:	bd10      	pop	{r4, pc}
 8005be6:	bf00      	nop
 8005be8:	200004d4 	.word	0x200004d4

08005bec <acc_service_create>:
 8005bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bf0:	4e30      	ldr	r6, [pc, #192]	; (8005cb4 <acc_service_create+0xc8>)
 8005bf2:	7834      	ldrb	r4, [r6, #0]
 8005bf4:	2c00      	cmp	r4, #0
 8005bf6:	d041      	beq.n	8005c7c <acc_service_create+0x90>
 8005bf8:	4605      	mov	r5, r0
 8005bfa:	f7ff fd5f 	bl	80056bc <acc_service_configuration_valid>
 8005bfe:	b1a0      	cbz	r0, 8005c2a <acc_service_create+0x3e>
 8005c00:	692b      	ldr	r3, [r5, #16]
 8005c02:	68df      	ldr	r7, [r3, #12]
 8005c04:	1e7b      	subs	r3, r7, #1
 8005c06:	2b29      	cmp	r3, #41	; 0x29
 8005c08:	d84a      	bhi.n	8005ca0 <acc_service_create+0xb4>
 8005c0a:	7873      	ldrb	r3, [r6, #1]
 8005c0c:	b98b      	cbnz	r3, 8005c32 <acc_service_create+0x46>
 8005c0e:	6873      	ldr	r3, [r6, #4]
 8005c10:	b913      	cbnz	r3, 8005c18 <acc_service_create+0x2c>
 8005c12:	e00e      	b.n	8005c32 <acc_service_create+0x46>
 8005c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c16:	b163      	cbz	r3, 8005c32 <acc_service_create+0x46>
 8005c18:	685a      	ldr	r2, [r3, #4]
 8005c1a:	4297      	cmp	r7, r2
 8005c1c:	d1fa      	bne.n	8005c14 <acc_service_create+0x28>
 8005c1e:	4b26      	ldr	r3, [pc, #152]	; (8005cb8 <acc_service_create+0xcc>)
 8005c20:	4a26      	ldr	r2, [pc, #152]	; (8005cbc <acc_service_create+0xd0>)
 8005c22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c24:	4926      	ldr	r1, [pc, #152]	; (8005cc0 <acc_service_create+0xd4>)
 8005c26:	2000      	movs	r0, #0
 8005c28:	4798      	blx	r3
 8005c2a:	2400      	movs	r4, #0
 8005c2c:	4620      	mov	r0, r4
 8005c2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c32:	8b2c      	ldrh	r4, [r5, #24]
 8005c34:	f000 fd22 	bl	800667c <acc_rss_integration_log_level>
 8005c38:	2803      	cmp	r0, #3
 8005c3a:	d907      	bls.n	8005c4c <acc_service_create+0x60>
 8005c3c:	4b1e      	ldr	r3, [pc, #120]	; (8005cb8 <acc_service_create+0xcc>)
 8005c3e:	4a21      	ldr	r2, [pc, #132]	; (8005cc4 <acc_service_create+0xd8>)
 8005c40:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 8005c44:	491e      	ldr	r1, [pc, #120]	; (8005cc0 <acc_service_create+0xd4>)
 8005c46:	463b      	mov	r3, r7
 8005c48:	2004      	movs	r0, #4
 8005c4a:	47c0      	blx	r8
 8005c4c:	4621      	mov	r1, r4
 8005c4e:	4a1c      	ldr	r2, [pc, #112]	; (8005cc0 <acc_service_create+0xd4>)
 8005c50:	23bd      	movs	r3, #189	; 0xbd
 8005c52:	2001      	movs	r0, #1
 8005c54:	f000 fce2 	bl	800661c <acc_rss_integration_mem_calloc_debug>
 8005c58:	4604      	mov	r4, r0
 8005c5a:	2800      	cmp	r0, #0
 8005c5c:	d0e5      	beq.n	8005c2a <acc_service_create+0x3e>
 8005c5e:	6873      	ldr	r3, [r6, #4]
 8005c60:	4a19      	ldr	r2, [pc, #100]	; (8005cc8 <acc_service_create+0xdc>)
 8005c62:	6047      	str	r7, [r0, #4]
 8005c64:	6002      	str	r2, [r0, #0]
 8005c66:	6543      	str	r3, [r0, #84]	; 0x54
 8005c68:	6070      	str	r0, [r6, #4]
 8005c6a:	696b      	ldr	r3, [r5, #20]
 8005c6c:	4629      	mov	r1, r5
 8005c6e:	4798      	blx	r3
 8005c70:	b168      	cbz	r0, 8005c8e <acc_service_create+0xa2>
 8005c72:	2301      	movs	r3, #1
 8005c74:	7263      	strb	r3, [r4, #9]
 8005c76:	4620      	mov	r0, r4
 8005c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c7c:	4b0e      	ldr	r3, [pc, #56]	; (8005cb8 <acc_service_create+0xcc>)
 8005c7e:	4a13      	ldr	r2, [pc, #76]	; (8005ccc <acc_service_create+0xe0>)
 8005c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c82:	490f      	ldr	r1, [pc, #60]	; (8005cc0 <acc_service_create+0xd4>)
 8005c84:	4620      	mov	r0, r4
 8005c86:	4798      	blx	r3
 8005c88:	4620      	mov	r0, r4
 8005c8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c8e:	68e3      	ldr	r3, [r4, #12]
 8005c90:	b10b      	cbz	r3, 8005c96 <acc_service_create+0xaa>
 8005c92:	4620      	mov	r0, r4
 8005c94:	4798      	blx	r3
 8005c96:	4620      	mov	r0, r4
 8005c98:	f7ff ff62 	bl	8005b60 <destroy_handle>
 8005c9c:	2400      	movs	r4, #0
 8005c9e:	e7c5      	b.n	8005c2c <acc_service_create+0x40>
 8005ca0:	4b05      	ldr	r3, [pc, #20]	; (8005cb8 <acc_service_create+0xcc>)
 8005ca2:	4a0b      	ldr	r2, [pc, #44]	; (8005cd0 <acc_service_create+0xe4>)
 8005ca4:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8005ca6:	4906      	ldr	r1, [pc, #24]	; (8005cc0 <acc_service_create+0xd4>)
 8005ca8:	232a      	movs	r3, #42	; 0x2a
 8005caa:	2000      	movs	r0, #0
 8005cac:	47a0      	blx	r4
 8005cae:	2400      	movs	r4, #0
 8005cb0:	e7bc      	b.n	8005c2c <acc_service_create+0x40>
 8005cb2:	bf00      	nop
 8005cb4:	200004d4 	.word	0x200004d4
 8005cb8:	20000640 	.word	0x20000640
 8005cbc:	080132ac 	.word	0x080132ac
 8005cc0:	08013208 	.word	0x08013208
 8005cc4:	08013278 	.word	0x08013278
 8005cc8:	acc09ee8 	.word	0xacc09ee8
 8005ccc:	08013298 	.word	0x08013298
 8005cd0:	0801324c 	.word	0x0801324c

08005cd4 <acc_service_destroy>:
 8005cd4:	4b11      	ldr	r3, [pc, #68]	; (8005d1c <acc_service_destroy+0x48>)
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	b510      	push	{r4, lr}
 8005cda:	b133      	cbz	r3, 8005cea <acc_service_destroy+0x16>
 8005cdc:	4604      	mov	r4, r0
 8005cde:	b118      	cbz	r0, 8005ce8 <acc_service_destroy+0x14>
 8005ce0:	6800      	ldr	r0, [r0, #0]
 8005ce2:	f7ff fbe7 	bl	80054b4 <acc_service_handle_valid>
 8005ce6:	b960      	cbnz	r0, 8005d02 <acc_service_destroy+0x2e>
 8005ce8:	bd10      	pop	{r4, pc}
 8005cea:	f000 fcc7 	bl	800667c <acc_rss_integration_log_level>
 8005cee:	2800      	cmp	r0, #0
 8005cf0:	d0fa      	beq.n	8005ce8 <acc_service_destroy+0x14>
 8005cf2:	4b0b      	ldr	r3, [pc, #44]	; (8005d20 <acc_service_destroy+0x4c>)
 8005cf4:	4a0b      	ldr	r2, [pc, #44]	; (8005d24 <acc_service_destroy+0x50>)
 8005cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cf8:	490b      	ldr	r1, [pc, #44]	; (8005d28 <acc_service_destroy+0x54>)
 8005cfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cfe:	2001      	movs	r0, #1
 8005d00:	4718      	bx	r3
 8005d02:	6820      	ldr	r0, [r4, #0]
 8005d04:	f7ff fc30 	bl	8005568 <acc_service_deactivate>
 8005d08:	6820      	ldr	r0, [r4, #0]
 8005d0a:	68c3      	ldr	r3, [r0, #12]
 8005d0c:	b10b      	cbz	r3, 8005d12 <acc_service_destroy+0x3e>
 8005d0e:	4798      	blx	r3
 8005d10:	6820      	ldr	r0, [r4, #0]
 8005d12:	f7ff ff25 	bl	8005b60 <destroy_handle>
 8005d16:	2300      	movs	r3, #0
 8005d18:	6023      	str	r3, [r4, #0]
 8005d1a:	bd10      	pop	{r4, pc}
 8005d1c:	200004d4 	.word	0x200004d4
 8005d20:	20000640 	.word	0x20000640
 8005d24:	08013298 	.word	0x08013298
 8005d28:	08013208 	.word	0x08013208

08005d2c <acc_service_manager_deactivate>:
 8005d2c:	b538      	push	{r3, r4, r5, lr}
 8005d2e:	4c0e      	ldr	r4, [pc, #56]	; (8005d68 <acc_service_manager_deactivate+0x3c>)
 8005d30:	7823      	ldrb	r3, [r4, #0]
 8005d32:	b1bb      	cbz	r3, 8005d64 <acc_service_manager_deactivate+0x38>
 8005d34:	6863      	ldr	r3, [r4, #4]
 8005d36:	b17b      	cbz	r3, 8005d58 <acc_service_manager_deactivate+0x2c>
 8005d38:	1d25      	adds	r5, r4, #4
 8005d3a:	4628      	mov	r0, r5
 8005d3c:	f7ff ffca 	bl	8005cd4 <acc_service_destroy>
 8005d40:	6863      	ldr	r3, [r4, #4]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d1f9      	bne.n	8005d3a <acc_service_manager_deactivate+0xe>
 8005d46:	f000 fc99 	bl	800667c <acc_rss_integration_log_level>
 8005d4a:	b128      	cbz	r0, 8005d58 <acc_service_manager_deactivate+0x2c>
 8005d4c:	4b07      	ldr	r3, [pc, #28]	; (8005d6c <acc_service_manager_deactivate+0x40>)
 8005d4e:	4a08      	ldr	r2, [pc, #32]	; (8005d70 <acc_service_manager_deactivate+0x44>)
 8005d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d52:	4908      	ldr	r1, [pc, #32]	; (8005d74 <acc_service_manager_deactivate+0x48>)
 8005d54:	2001      	movs	r0, #1
 8005d56:	4798      	blx	r3
 8005d58:	2000      	movs	r0, #0
 8005d5a:	7020      	strb	r0, [r4, #0]
 8005d5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d60:	f7ff bba2 	b.w	80054a8 <acc_service_set_module_active>
 8005d64:	bd38      	pop	{r3, r4, r5, pc}
 8005d66:	bf00      	nop
 8005d68:	200004d4 	.word	0x200004d4
 8005d6c:	20000640 	.word	0x20000640
 8005d70:	080132d4 	.word	0x080132d4
 8005d74:	08013208 	.word	0x08013208

08005d78 <configuration_is_valid>:
 8005d78:	b108      	cbz	r0, 8005d7e <configuration_is_valid+0x6>
 8005d7a:	2001      	movs	r0, #1
 8005d7c:	4770      	bx	lr
 8005d7e:	b510      	push	{r4, lr}
 8005d80:	4604      	mov	r4, r0
 8005d82:	f000 fc7b 	bl	800667c <acc_rss_integration_log_level>
 8005d86:	b130      	cbz	r0, 8005d96 <configuration_is_valid+0x1e>
 8005d88:	4b03      	ldr	r3, [pc, #12]	; (8005d98 <configuration_is_valid+0x20>)
 8005d8a:	4a04      	ldr	r2, [pc, #16]	; (8005d9c <configuration_is_valid+0x24>)
 8005d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d8e:	4904      	ldr	r1, [pc, #16]	; (8005da0 <configuration_is_valid+0x28>)
 8005d90:	2001      	movs	r0, #1
 8005d92:	4798      	blx	r3
 8005d94:	4620      	mov	r0, r4
 8005d96:	bd10      	pop	{r4, pc}
 8005d98:	20000640 	.word	0x20000640
 8005d9c:	08013320 	.word	0x08013320
 8005da0:	0801333c 	.word	0x0801333c

08005da4 <acc_base_configuration_sensor_get>:
 8005da4:	b510      	push	{r4, lr}
 8005da6:	4604      	mov	r4, r0
 8005da8:	f7ff ffe6 	bl	8005d78 <configuration_is_valid>
 8005dac:	b900      	cbnz	r0, 8005db0 <acc_base_configuration_sensor_get+0xc>
 8005dae:	bd10      	pop	{r4, pc}
 8005db0:	68e0      	ldr	r0, [r4, #12]
 8005db2:	bd10      	pop	{r4, pc}

08005db4 <acc_base_configuration_sensor_set>:
 8005db4:	b538      	push	{r3, r4, r5, lr}
 8005db6:	460d      	mov	r5, r1
 8005db8:	4604      	mov	r4, r0
 8005dba:	f7ff ffdd 	bl	8005d78 <configuration_is_valid>
 8005dbe:	b100      	cbz	r0, 8005dc2 <acc_base_configuration_sensor_set+0xe>
 8005dc0:	60e5      	str	r5, [r4, #12]
 8005dc2:	bd38      	pop	{r3, r4, r5, pc}

08005dc4 <acc_base_configuration_requested_start_get>:
 8005dc4:	b510      	push	{r4, lr}
 8005dc6:	4604      	mov	r4, r0
 8005dc8:	f7ff ffd6 	bl	8005d78 <configuration_is_valid>
 8005dcc:	b910      	cbnz	r0, 8005dd4 <acc_base_configuration_requested_start_get+0x10>
 8005dce:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8005ddc <acc_base_configuration_requested_start_get+0x18>
 8005dd2:	bd10      	pop	{r4, pc}
 8005dd4:	ed94 0a09 	vldr	s0, [r4, #36]	; 0x24
 8005dd8:	bd10      	pop	{r4, pc}
 8005dda:	bf00      	nop
 8005ddc:	00000000 	.word	0x00000000

08005de0 <acc_base_configuration_requested_start_set>:
 8005de0:	b510      	push	{r4, lr}
 8005de2:	ed2d 8b02 	vpush	{d8}
 8005de6:	4604      	mov	r4, r0
 8005de8:	eeb0 8a40 	vmov.f32	s16, s0
 8005dec:	f7ff ffc4 	bl	8005d78 <configuration_is_valid>
 8005df0:	b108      	cbz	r0, 8005df6 <acc_base_configuration_requested_start_set+0x16>
 8005df2:	ed84 8a09 	vstr	s16, [r4, #36]	; 0x24
 8005df6:	ecbd 8b02 	vpop	{d8}
 8005dfa:	bd10      	pop	{r4, pc}

08005dfc <acc_base_configuration_requested_length_get>:
 8005dfc:	b510      	push	{r4, lr}
 8005dfe:	4604      	mov	r4, r0
 8005e00:	f7ff ffba 	bl	8005d78 <configuration_is_valid>
 8005e04:	b910      	cbnz	r0, 8005e0c <acc_base_configuration_requested_length_get+0x10>
 8005e06:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8005e14 <acc_base_configuration_requested_length_get+0x18>
 8005e0a:	bd10      	pop	{r4, pc}
 8005e0c:	ed94 0a0a 	vldr	s0, [r4, #40]	; 0x28
 8005e10:	bd10      	pop	{r4, pc}
 8005e12:	bf00      	nop
 8005e14:	00000000 	.word	0x00000000

08005e18 <acc_base_configuration_requested_length_set>:
 8005e18:	b510      	push	{r4, lr}
 8005e1a:	ed2d 8b02 	vpush	{d8}
 8005e1e:	4604      	mov	r4, r0
 8005e20:	eeb0 8a40 	vmov.f32	s16, s0
 8005e24:	f7ff ffa8 	bl	8005d78 <configuration_is_valid>
 8005e28:	b108      	cbz	r0, 8005e2e <acc_base_configuration_requested_length_set+0x16>
 8005e2a:	ed84 8a0a 	vstr	s16, [r4, #40]	; 0x28
 8005e2e:	ecbd 8b02 	vpop	{d8}
 8005e32:	bd10      	pop	{r4, pc}

08005e34 <acc_base_configuration_repetition_mode_on_demand_set>:
 8005e34:	b510      	push	{r4, lr}
 8005e36:	4604      	mov	r4, r0
 8005e38:	f7ff ff9e 	bl	8005d78 <configuration_is_valid>
 8005e3c:	b108      	cbz	r0, 8005e42 <acc_base_configuration_repetition_mode_on_demand_set+0xe>
 8005e3e:	2301      	movs	r3, #1
 8005e40:	7123      	strb	r3, [r4, #4]
 8005e42:	bd10      	pop	{r4, pc}

08005e44 <acc_base_configuration_power_save_mode_get>:
 8005e44:	b510      	push	{r4, lr}
 8005e46:	4604      	mov	r4, r0
 8005e48:	f7ff ff96 	bl	8005d78 <configuration_is_valid>
 8005e4c:	b900      	cbnz	r0, 8005e50 <acc_base_configuration_power_save_mode_get+0xc>
 8005e4e:	bd10      	pop	{r4, pc}
 8005e50:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005e52:	bd10      	pop	{r4, pc}

08005e54 <acc_base_configuration_power_save_mode_set>:
 8005e54:	b538      	push	{r3, r4, r5, lr}
 8005e56:	460d      	mov	r5, r1
 8005e58:	4604      	mov	r4, r0
 8005e5a:	f7ff ff8d 	bl	8005d78 <configuration_is_valid>
 8005e5e:	b100      	cbz	r0, 8005e62 <acc_base_configuration_power_save_mode_set+0xe>
 8005e60:	63a5      	str	r5, [r4, #56]	; 0x38
 8005e62:	bd38      	pop	{r3, r4, r5, pc}

08005e64 <acc_base_configuration_tx_disable_get>:
 8005e64:	b510      	push	{r4, lr}
 8005e66:	4604      	mov	r4, r0
 8005e68:	f7ff ff86 	bl	8005d78 <configuration_is_valid>
 8005e6c:	b900      	cbnz	r0, 8005e70 <acc_base_configuration_tx_disable_get+0xc>
 8005e6e:	bd10      	pop	{r4, pc}
 8005e70:	f894 0047 	ldrb.w	r0, [r4, #71]	; 0x47
 8005e74:	bd10      	pop	{r4, pc}
 8005e76:	bf00      	nop

08005e78 <acc_base_configuration_tx_disable_set>:
 8005e78:	b538      	push	{r3, r4, r5, lr}
 8005e7a:	460d      	mov	r5, r1
 8005e7c:	4604      	mov	r4, r0
 8005e7e:	f7ff ff7b 	bl	8005d78 <configuration_is_valid>
 8005e82:	b108      	cbz	r0, 8005e88 <acc_base_configuration_tx_disable_set+0x10>
 8005e84:	f884 5047 	strb.w	r5, [r4, #71]	; 0x47
 8005e88:	bd38      	pop	{r3, r4, r5, pc}
 8005e8a:	bf00      	nop

08005e8c <acc_base_configuration_decrease_tx_emission_get>:
 8005e8c:	b510      	push	{r4, lr}
 8005e8e:	4604      	mov	r4, r0
 8005e90:	f7ff ff72 	bl	8005d78 <configuration_is_valid>
 8005e94:	b900      	cbnz	r0, 8005e98 <acc_base_configuration_decrease_tx_emission_get+0xc>
 8005e96:	bd10      	pop	{r4, pc}
 8005e98:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 8005e9c:	bd10      	pop	{r4, pc}
 8005e9e:	bf00      	nop

08005ea0 <acc_base_configuration_decrease_tx_emission_set>:
 8005ea0:	b538      	push	{r3, r4, r5, lr}
 8005ea2:	460d      	mov	r5, r1
 8005ea4:	4604      	mov	r4, r0
 8005ea6:	f7ff ff67 	bl	8005d78 <configuration_is_valid>
 8005eaa:	b108      	cbz	r0, 8005eb0 <acc_base_configuration_decrease_tx_emission_set+0x10>
 8005eac:	f884 5048 	strb.w	r5, [r4, #72]	; 0x48
 8005eb0:	bd38      	pop	{r3, r4, r5, pc}
 8005eb2:	bf00      	nop

08005eb4 <acc_base_configuration_hw_accelerated_average_samples_get>:
 8005eb4:	b510      	push	{r4, lr}
 8005eb6:	4604      	mov	r4, r0
 8005eb8:	f7ff ff5e 	bl	8005d78 <configuration_is_valid>
 8005ebc:	b900      	cbnz	r0, 8005ec0 <acc_base_configuration_hw_accelerated_average_samples_get+0xc>
 8005ebe:	bd10      	pop	{r4, pc}
 8005ec0:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
 8005ec4:	bd10      	pop	{r4, pc}
 8005ec6:	bf00      	nop

08005ec8 <acc_base_configuration_hw_accelerated_average_samples_set>:
 8005ec8:	b538      	push	{r3, r4, r5, lr}
 8005eca:	460d      	mov	r5, r1
 8005ecc:	4604      	mov	r4, r0
 8005ece:	f7ff ff53 	bl	8005d78 <configuration_is_valid>
 8005ed2:	b100      	cbz	r0, 8005ed6 <acc_base_configuration_hw_accelerated_average_samples_set+0xe>
 8005ed4:	87a5      	strh	r5, [r4, #60]	; 0x3c
 8005ed6:	bd38      	pop	{r3, r4, r5, pc}

08005ed8 <acc_base_configuration_radar_engine_creation_set>:
 8005ed8:	b538      	push	{r3, r4, r5, lr}
 8005eda:	460d      	mov	r5, r1
 8005edc:	4604      	mov	r4, r0
 8005ede:	f7ff ff4b 	bl	8005d78 <configuration_is_valid>
 8005ee2:	b100      	cbz	r0, 8005ee6 <acc_base_configuration_radar_engine_creation_set+0xe>
 8005ee4:	6025      	str	r5, [r4, #0]
 8005ee6:	bd38      	pop	{r3, r4, r5, pc}

08005ee8 <acc_base_configuration_phase_compensation_alpha_get>:
 8005ee8:	b510      	push	{r4, lr}
 8005eea:	4604      	mov	r4, r0
 8005eec:	f7ff ff44 	bl	8005d78 <configuration_is_valid>
 8005ef0:	b910      	cbnz	r0, 8005ef8 <acc_base_configuration_phase_compensation_alpha_get+0x10>
 8005ef2:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8005f00 <acc_base_configuration_phase_compensation_alpha_get+0x18>
 8005ef6:	bd10      	pop	{r4, pc}
 8005ef8:	ed94 0a04 	vldr	s0, [r4, #16]
 8005efc:	bd10      	pop	{r4, pc}
 8005efe:	bf00      	nop
 8005f00:	00000000 	.word	0x00000000

08005f04 <acc_base_configuration_phase_compensation_alpha_set>:
 8005f04:	b510      	push	{r4, lr}
 8005f06:	ed2d 8b02 	vpush	{d8}
 8005f0a:	4604      	mov	r4, r0
 8005f0c:	eeb0 8a40 	vmov.f32	s16, s0
 8005f10:	f7ff ff32 	bl	8005d78 <configuration_is_valid>
 8005f14:	b108      	cbz	r0, 8005f1a <acc_base_configuration_phase_compensation_alpha_set+0x16>
 8005f16:	ed84 8a04 	vstr	s16, [r4, #16]
 8005f1a:	ecbd 8b02 	vpop	{d8}
 8005f1e:	bd10      	pop	{r4, pc}

08005f20 <acc_base_configuration_time_domain_low_pass_filter_alpha_get>:
 8005f20:	b538      	push	{r3, r4, r5, lr}
 8005f22:	460d      	mov	r5, r1
 8005f24:	4604      	mov	r4, r0
 8005f26:	f7ff ff27 	bl	8005d78 <configuration_is_valid>
 8005f2a:	b900      	cbnz	r0, 8005f2e <acc_base_configuration_time_domain_low_pass_filter_alpha_get+0xe>
 8005f2c:	bd38      	pop	{r3, r4, r5, pc}
 8005f2e:	b10d      	cbz	r5, 8005f34 <acc_base_configuration_time_domain_low_pass_filter_alpha_get+0x14>
 8005f30:	6963      	ldr	r3, [r4, #20]
 8005f32:	602b      	str	r3, [r5, #0]
 8005f34:	7e20      	ldrb	r0, [r4, #24]
 8005f36:	bd38      	pop	{r3, r4, r5, pc}

08005f38 <acc_base_configuration_time_domain_low_pass_filter_alpha_set>:
 8005f38:	b538      	push	{r3, r4, r5, lr}
 8005f3a:	ed2d 8b02 	vpush	{d8}
 8005f3e:	460d      	mov	r5, r1
 8005f40:	eeb0 8a40 	vmov.f32	s16, s0
 8005f44:	4604      	mov	r4, r0
 8005f46:	f7ff ff17 	bl	8005d78 <configuration_is_valid>
 8005f4a:	b110      	cbz	r0, 8005f52 <acc_base_configuration_time_domain_low_pass_filter_alpha_set+0x1a>
 8005f4c:	ed84 8a05 	vstr	s16, [r4, #20]
 8005f50:	7625      	strb	r5, [r4, #24]
 8005f52:	ecbd 8b02 	vpop	{d8}
 8005f56:	bd38      	pop	{r3, r4, r5, pc}

08005f58 <acc_base_configuration_filter_demodulated_data_get>:
 8005f58:	b510      	push	{r4, lr}
 8005f5a:	4604      	mov	r4, r0
 8005f5c:	f7ff ff0c 	bl	8005d78 <configuration_is_valid>
 8005f60:	b900      	cbnz	r0, 8005f64 <acc_base_configuration_filter_demodulated_data_get+0xc>
 8005f62:	bd10      	pop	{r4, pc}
 8005f64:	7f20      	ldrb	r0, [r4, #28]
 8005f66:	bd10      	pop	{r4, pc}

08005f68 <acc_base_configuration_filter_demodulated_data_set>:
 8005f68:	b538      	push	{r3, r4, r5, lr}
 8005f6a:	460d      	mov	r5, r1
 8005f6c:	4604      	mov	r4, r0
 8005f6e:	f7ff ff03 	bl	8005d78 <configuration_is_valid>
 8005f72:	b100      	cbz	r0, 8005f76 <acc_base_configuration_filter_demodulated_data_set+0xe>
 8005f74:	7725      	strb	r5, [r4, #28]
 8005f76:	bd38      	pop	{r3, r4, r5, pc}

08005f78 <acc_base_configuration_demodulation_filter_cutoff_freq_ratio_get>:
 8005f78:	b510      	push	{r4, lr}
 8005f7a:	4604      	mov	r4, r0
 8005f7c:	f7ff fefc 	bl	8005d78 <configuration_is_valid>
 8005f80:	b910      	cbnz	r0, 8005f88 <acc_base_configuration_demodulation_filter_cutoff_freq_ratio_get+0x10>
 8005f82:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8005f90 <acc_base_configuration_demodulation_filter_cutoff_freq_ratio_get+0x18>
 8005f86:	bd10      	pop	{r4, pc}
 8005f88:	ed94 0a08 	vldr	s0, [r4, #32]
 8005f8c:	bd10      	pop	{r4, pc}
 8005f8e:	bf00      	nop
 8005f90:	00000000 	.word	0x00000000

08005f94 <acc_base_configuration_demodulation_filter_cutoff_freq_ratio_set>:
 8005f94:	b510      	push	{r4, lr}
 8005f96:	ed2d 8b02 	vpush	{d8}
 8005f9a:	4604      	mov	r4, r0
 8005f9c:	eeb0 8a40 	vmov.f32	s16, s0
 8005fa0:	f7ff feea 	bl	8005d78 <configuration_is_valid>
 8005fa4:	b108      	cbz	r0, 8005faa <acc_base_configuration_demodulation_filter_cutoff_freq_ratio_set+0x16>
 8005fa6:	ed84 8a08 	vstr	s16, [r4, #32]
 8005faa:	ecbd 8b02 	vpop	{d8}
 8005fae:	bd10      	pop	{r4, pc}

08005fb0 <acc_base_configuration_point_start_get>:
 8005fb0:	b510      	push	{r4, lr}
 8005fb2:	4604      	mov	r4, r0
 8005fb4:	f7ff fee0 	bl	8005d78 <configuration_is_valid>
 8005fb8:	b900      	cbnz	r0, 8005fbc <acc_base_configuration_point_start_get+0xc>
 8005fba:	bd10      	pop	{r4, pc}
 8005fbc:	f9b4 0034 	ldrsh.w	r0, [r4, #52]	; 0x34
 8005fc0:	bd10      	pop	{r4, pc}
 8005fc2:	bf00      	nop

08005fc4 <acc_base_configuration_point_length_get>:
 8005fc4:	b510      	push	{r4, lr}
 8005fc6:	4604      	mov	r4, r0
 8005fc8:	f7ff fed6 	bl	8005d78 <configuration_is_valid>
 8005fcc:	b900      	cbnz	r0, 8005fd0 <acc_base_configuration_point_length_get+0xc>
 8005fce:	bd10      	pop	{r4, pc}
 8005fd0:	f9b4 0036 	ldrsh.w	r0, [r4, #54]	; 0x36
 8005fd4:	bd10      	pop	{r4, pc}
 8005fd6:	bf00      	nop

08005fd8 <acc_base_configuration_repetition_mode_get>:
 8005fd8:	b510      	push	{r4, lr}
 8005fda:	4604      	mov	r4, r0
 8005fdc:	f7ff fecc 	bl	8005d78 <configuration_is_valid>
 8005fe0:	b900      	cbnz	r0, 8005fe4 <acc_base_configuration_repetition_mode_get+0xc>
 8005fe2:	bd10      	pop	{r4, pc}
 8005fe4:	7920      	ldrb	r0, [r4, #4]
 8005fe6:	bd10      	pop	{r4, pc}

08005fe8 <acc_base_configuration_update_rate_get>:
 8005fe8:	b510      	push	{r4, lr}
 8005fea:	4604      	mov	r4, r0
 8005fec:	f7ff fec4 	bl	8005d78 <configuration_is_valid>
 8005ff0:	b158      	cbz	r0, 800600a <acc_base_configuration_update_rate_get+0x22>
 8005ff2:	7923      	ldrb	r3, [r4, #4]
 8005ff4:	2b02      	cmp	r3, #2
 8005ff6:	d005      	beq.n	8006004 <acc_base_configuration_update_rate_get+0x1c>
 8005ff8:	d802      	bhi.n	8006000 <acc_base_configuration_update_rate_get+0x18>
 8005ffa:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8006010 <acc_base_configuration_update_rate_get+0x28>
 8005ffe:	bd10      	pop	{r4, pc}
 8006000:	2b03      	cmp	r3, #3
 8006002:	d102      	bne.n	800600a <acc_base_configuration_update_rate_get+0x22>
 8006004:	ed94 0a02 	vldr	s0, [r4, #8]
 8006008:	bd10      	pop	{r4, pc}
 800600a:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8006014 <acc_base_configuration_update_rate_get+0x2c>
 800600e:	bd10      	pop	{r4, pc}
 8006010:	7f800000 	.word	0x7f800000
 8006014:	7fc00000 	.word	0x7fc00000

08006018 <acc_base_configuration_gain_get>:
 8006018:	b510      	push	{r4, lr}
 800601a:	4604      	mov	r4, r0
 800601c:	f7ff feac 	bl	8005d78 <configuration_is_valid>
 8006020:	b900      	cbnz	r0, 8006024 <acc_base_configuration_gain_get+0xc>
 8006022:	bd10      	pop	{r4, pc}
 8006024:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
 8006026:	bd10      	pop	{r4, pc}

08006028 <acc_base_configuration_gain_set>:
 8006028:	b538      	push	{r3, r4, r5, lr}
 800602a:	460d      	mov	r5, r1
 800602c:	4604      	mov	r4, r0
 800602e:	f7ff fea3 	bl	8005d78 <configuration_is_valid>
 8006032:	b100      	cbz	r0, 8006036 <acc_base_configuration_gain_set+0xe>
 8006034:	87e5      	strh	r5, [r4, #62]	; 0x3e
 8006036:	bd38      	pop	{r3, r4, r5, pc}

08006038 <acc_base_configuration_integrator_get>:
 8006038:	b510      	push	{r4, lr}
 800603a:	4604      	mov	r4, r0
 800603c:	f7ff fe9c 	bl	8005d78 <configuration_is_valid>
 8006040:	b900      	cbnz	r0, 8006044 <acc_base_configuration_integrator_get+0xc>
 8006042:	bd10      	pop	{r4, pc}
 8006044:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
 8006048:	bd10      	pop	{r4, pc}
 800604a:	bf00      	nop

0800604c <acc_base_configuration_integrator_set>:
 800604c:	b538      	push	{r3, r4, r5, lr}
 800604e:	460d      	mov	r5, r1
 8006050:	4604      	mov	r4, r0
 8006052:	f7ff fe91 	bl	8005d78 <configuration_is_valid>
 8006056:	b108      	cbz	r0, 800605c <acc_base_configuration_integrator_set+0x10>
 8006058:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
 800605c:	bd38      	pop	{r3, r4, r5, pc}
 800605e:	bf00      	nop

08006060 <acc_base_configuration_wg_duration_get>:
 8006060:	b510      	push	{r4, lr}
 8006062:	4604      	mov	r4, r0
 8006064:	f7ff fe88 	bl	8005d78 <configuration_is_valid>
 8006068:	b900      	cbnz	r0, 800606c <acc_base_configuration_wg_duration_get+0xc>
 800606a:	bd10      	pop	{r4, pc}
 800606c:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
 8006070:	bd10      	pop	{r4, pc}
 8006072:	bf00      	nop

08006074 <acc_base_configuration_wg_duration_set>:
 8006074:	b538      	push	{r3, r4, r5, lr}
 8006076:	460d      	mov	r5, r1
 8006078:	4604      	mov	r4, r0
 800607a:	f7ff fe7d 	bl	8005d78 <configuration_is_valid>
 800607e:	b108      	cbz	r0, 8006084 <acc_base_configuration_wg_duration_set+0x10>
 8006080:	f8a4 5042 	strh.w	r5, [r4, #66]	; 0x42
 8006084:	bd38      	pop	{r3, r4, r5, pc}
 8006086:	bf00      	nop

08006088 <acc_base_configuration_integrator_ramp_up_get>:
 8006088:	b510      	push	{r4, lr}
 800608a:	4604      	mov	r4, r0
 800608c:	f7ff fe74 	bl	8005d78 <configuration_is_valid>
 8006090:	b900      	cbnz	r0, 8006094 <acc_base_configuration_integrator_ramp_up_get+0xc>
 8006092:	bd10      	pop	{r4, pc}
 8006094:	f8b4 0044 	ldrh.w	r0, [r4, #68]	; 0x44
 8006098:	bd10      	pop	{r4, pc}
 800609a:	bf00      	nop

0800609c <acc_base_configuration_integrator_ramp_up_set>:
 800609c:	b538      	push	{r3, r4, r5, lr}
 800609e:	460d      	mov	r5, r1
 80060a0:	4604      	mov	r4, r0
 80060a2:	f7ff fe69 	bl	8005d78 <configuration_is_valid>
 80060a6:	b108      	cbz	r0, 80060ac <acc_base_configuration_integrator_ramp_up_set+0x10>
 80060a8:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
 80060ac:	bd38      	pop	{r3, r4, r5, pc}
 80060ae:	bf00      	nop

080060b0 <acc_base_configuration_sampling_mode_get>:
 80060b0:	b510      	push	{r4, lr}
 80060b2:	4604      	mov	r4, r0
 80060b4:	f7ff fe60 	bl	8005d78 <configuration_is_valid>
 80060b8:	b900      	cbnz	r0, 80060bc <acc_base_configuration_sampling_mode_get+0xc>
 80060ba:	bd10      	pop	{r4, pc}
 80060bc:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
 80060c0:	bd10      	pop	{r4, pc}
 80060c2:	bf00      	nop

080060c4 <acc_base_configuration_sweep_type_debug_set>:
 80060c4:	b538      	push	{r3, r4, r5, lr}
 80060c6:	460d      	mov	r5, r1
 80060c8:	4604      	mov	r4, r0
 80060ca:	f7ff fe55 	bl	8005d78 <configuration_is_valid>
 80060ce:	b108      	cbz	r0, 80060d4 <acc_base_configuration_sweep_type_debug_set+0x10>
 80060d0:	f884 5046 	strb.w	r5, [r4, #70]	; 0x46
 80060d4:	bd38      	pop	{r3, r4, r5, pc}
 80060d6:	bf00      	nop

080060d8 <acc_base_configuration_sweep_type_debug_get>:
 80060d8:	b510      	push	{r4, lr}
 80060da:	4604      	mov	r4, r0
 80060dc:	f7ff fe4c 	bl	8005d78 <configuration_is_valid>
 80060e0:	b900      	cbnz	r0, 80060e4 <acc_base_configuration_sweep_type_debug_get+0xc>
 80060e2:	bd10      	pop	{r4, pc}
 80060e4:	f894 0046 	ldrb.w	r0, [r4, #70]	; 0x46
 80060e8:	bd10      	pop	{r4, pc}
 80060ea:	bf00      	nop

080060ec <acc_base_configuration_use_point_range_set>:
 80060ec:	b538      	push	{r3, r4, r5, lr}
 80060ee:	460d      	mov	r5, r1
 80060f0:	4604      	mov	r4, r0
 80060f2:	f7ff fe41 	bl	8005d78 <configuration_is_valid>
 80060f6:	b108      	cbz	r0, 80060fc <acc_base_configuration_use_point_range_set+0x10>
 80060f8:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
 80060fc:	bd38      	pop	{r3, r4, r5, pc}
 80060fe:	bf00      	nop

08006100 <acc_base_configuration_use_point_range_get>:
 8006100:	b510      	push	{r4, lr}
 8006102:	4604      	mov	r4, r0
 8006104:	f7ff fe38 	bl	8005d78 <configuration_is_valid>
 8006108:	b900      	cbnz	r0, 800610c <acc_base_configuration_use_point_range_get+0xc>
 800610a:	bd10      	pop	{r4, pc}
 800610c:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8006110:	bd10      	pop	{r4, pc}
 8006112:	bf00      	nop

08006114 <acc_base_configuration_use_fast_dll_refresh_routine_set>:
 8006114:	b538      	push	{r3, r4, r5, lr}
 8006116:	460d      	mov	r5, r1
 8006118:	4604      	mov	r4, r0
 800611a:	f7ff fe2d 	bl	8005d78 <configuration_is_valid>
 800611e:	b108      	cbz	r0, 8006124 <acc_base_configuration_use_fast_dll_refresh_routine_set+0x10>
 8006120:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 8006124:	bd38      	pop	{r3, r4, r5, pc}
 8006126:	bf00      	nop

08006128 <acc_base_configuration_staggered_vga_stabilization_time_set>:
 8006128:	b538      	push	{r3, r4, r5, lr}
 800612a:	460d      	mov	r5, r1
 800612c:	4604      	mov	r4, r0
 800612e:	f7ff fe23 	bl	8005d78 <configuration_is_valid>
 8006132:	b108      	cbz	r0, 8006138 <acc_base_configuration_staggered_vga_stabilization_time_set+0x10>
 8006134:	f8a4 5056 	strh.w	r5, [r4, #86]	; 0x56
 8006138:	bd38      	pop	{r3, r4, r5, pc}
 800613a:	bf00      	nop

0800613c <acc_base_configuration_bba_reset_clocksync_perturbation_get>:
 800613c:	b510      	push	{r4, lr}
 800613e:	4604      	mov	r4, r0
 8006140:	f7ff fe1a 	bl	8005d78 <configuration_is_valid>
 8006144:	b900      	cbnz	r0, 8006148 <acc_base_configuration_bba_reset_clocksync_perturbation_get+0xc>
 8006146:	bd10      	pop	{r4, pc}
 8006148:	f894 0063 	ldrb.w	r0, [r4, #99]	; 0x63
 800614c:	bd10      	pop	{r4, pc}
 800614e:	bf00      	nop

08006150 <acc_base_configuration_bba_linear_resync_perturbation_get>:
 8006150:	b510      	push	{r4, lr}
 8006152:	4604      	mov	r4, r0
 8006154:	f7ff fe10 	bl	8005d78 <configuration_is_valid>
 8006158:	b900      	cbnz	r0, 800615c <acc_base_configuration_bba_linear_resync_perturbation_get+0xc>
 800615a:	bd10      	pop	{r4, pc}
 800615c:	f894 0064 	ldrb.w	r0, [r4, #100]	; 0x64
 8006160:	bd10      	pop	{r4, pc}
 8006162:	bf00      	nop

08006164 <acc_base_configuration_bba_fast_refresh_disable_get>:
 8006164:	b510      	push	{r4, lr}
 8006166:	4604      	mov	r4, r0
 8006168:	f7ff fe06 	bl	8005d78 <configuration_is_valid>
 800616c:	b900      	cbnz	r0, 8006170 <acc_base_configuration_bba_fast_refresh_disable_get+0xc>
 800616e:	bd10      	pop	{r4, pc}
 8006170:	f894 0065 	ldrb.w	r0, [r4, #101]	; 0x65
 8006174:	bd10      	pop	{r4, pc}
 8006176:	bf00      	nop

08006178 <acc_base_configuration_ignore_range_limits_get>:
 8006178:	b510      	push	{r4, lr}
 800617a:	4604      	mov	r4, r0
 800617c:	f7ff fdfc 	bl	8005d78 <configuration_is_valid>
 8006180:	b900      	cbnz	r0, 8006184 <acc_base_configuration_ignore_range_limits_get+0xc>
 8006182:	bd10      	pop	{r4, pc}
 8006184:	f894 0066 	ldrb.w	r0, [r4, #102]	; 0x66
 8006188:	bd10      	pop	{r4, pc}
 800618a:	bf00      	nop

0800618c <acc_base_configuration_sparse_sweeps_per_frame_get>:
 800618c:	b510      	push	{r4, lr}
 800618e:	4604      	mov	r4, r0
 8006190:	f7ff fdf2 	bl	8005d78 <configuration_is_valid>
 8006194:	b900      	cbnz	r0, 8006198 <acc_base_configuration_sparse_sweeps_per_frame_get+0xc>
 8006196:	bd10      	pop	{r4, pc}
 8006198:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 800619c:	bd10      	pop	{r4, pc}
 800619e:	bf00      	nop

080061a0 <acc_base_configuration_downsampling_factor_get>:
 80061a0:	b510      	push	{r4, lr}
 80061a2:	4604      	mov	r4, r0
 80061a4:	f7ff fde8 	bl	8005d78 <configuration_is_valid>
 80061a8:	b900      	cbnz	r0, 80061ac <acc_base_configuration_downsampling_factor_get+0xc>
 80061aa:	bd10      	pop	{r4, pc}
 80061ac:	f8b4 0060 	ldrh.w	r0, [r4, #96]	; 0x60
 80061b0:	bd10      	pop	{r4, pc}
 80061b2:	bf00      	nop

080061b4 <acc_base_configuration_downsampling_factor_set>:
 80061b4:	b538      	push	{r3, r4, r5, lr}
 80061b6:	460d      	mov	r5, r1
 80061b8:	4604      	mov	r4, r0
 80061ba:	f7ff fddd 	bl	8005d78 <configuration_is_valid>
 80061be:	b108      	cbz	r0, 80061c4 <acc_base_configuration_downsampling_factor_set+0x10>
 80061c0:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
 80061c4:	bd38      	pop	{r3, r4, r5, pc}
 80061c6:	bf00      	nop

080061c8 <acc_base_configuration_noise_level_normalization_get>:
 80061c8:	b510      	push	{r4, lr}
 80061ca:	4604      	mov	r4, r0
 80061cc:	f7ff fdd4 	bl	8005d78 <configuration_is_valid>
 80061d0:	b900      	cbnz	r0, 80061d4 <acc_base_configuration_noise_level_normalization_get+0xc>
 80061d2:	bd10      	pop	{r4, pc}
 80061d4:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
 80061d8:	bd10      	pop	{r4, pc}
 80061da:	bf00      	nop

080061dc <acc_base_configuration_noise_level_normalization_set>:
 80061dc:	b538      	push	{r3, r4, r5, lr}
 80061de:	460d      	mov	r5, r1
 80061e0:	4604      	mov	r4, r0
 80061e2:	f7ff fdc9 	bl	8005d78 <configuration_is_valid>
 80061e6:	b108      	cbz	r0, 80061ec <acc_base_configuration_noise_level_normalization_set+0x10>
 80061e8:	f884 5049 	strb.w	r5, [r4, #73]	; 0x49
 80061ec:	bd38      	pop	{r3, r4, r5, pc}
 80061ee:	bf00      	nop

080061f0 <acc_base_configuration_noise_deviation_override_get>:
 80061f0:	b510      	push	{r4, lr}
 80061f2:	4604      	mov	r4, r0
 80061f4:	f7ff fdc0 	bl	8005d78 <configuration_is_valid>
 80061f8:	b900      	cbnz	r0, 80061fc <acc_base_configuration_noise_deviation_override_get+0xc>
 80061fa:	bd10      	pop	{r4, pc}
 80061fc:	f8b4 004c 	ldrh.w	r0, [r4, #76]	; 0x4c
 8006200:	bd10      	pop	{r4, pc}
 8006202:	bf00      	nop

08006204 <acc_base_configuration_asynchronous_measurement_get>:
 8006204:	b510      	push	{r4, lr}
 8006206:	4604      	mov	r4, r0
 8006208:	f7ff fdb6 	bl	8005d78 <configuration_is_valid>
 800620c:	b900      	cbnz	r0, 8006210 <acc_base_configuration_asynchronous_measurement_get+0xc>
 800620e:	bd10      	pop	{r4, pc}
 8006210:	f894 004e 	ldrb.w	r0, [r4, #78]	; 0x4e
 8006214:	bd10      	pop	{r4, pc}
 8006216:	bf00      	nop

08006218 <acc_base_configuration_asynchronous_measurement_set>:
 8006218:	b538      	push	{r3, r4, r5, lr}
 800621a:	460d      	mov	r5, r1
 800621c:	4604      	mov	r4, r0
 800621e:	f7ff fdab 	bl	8005d78 <configuration_is_valid>
 8006222:	b108      	cbz	r0, 8006228 <acc_base_configuration_asynchronous_measurement_set+0x10>
 8006224:	f884 504e 	strb.w	r5, [r4, #78]	; 0x4e
 8006228:	bd38      	pop	{r3, r4, r5, pc}
 800622a:	bf00      	nop

0800622c <acc_base_configuration_min_pipeline_memory_size_get>:
 800622c:	b510      	push	{r4, lr}
 800622e:	4604      	mov	r4, r0
 8006230:	f7ff fda2 	bl	8005d78 <configuration_is_valid>
 8006234:	b900      	cbnz	r0, 8006238 <acc_base_configuration_min_pipeline_memory_size_get+0xc>
 8006236:	bd10      	pop	{r4, pc}
 8006238:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
 800623c:	bd10      	pop	{r4, pc}
 800623e:	bf00      	nop

08006240 <acc_base_configuration_min_pipeline_memory_size_set>:
 8006240:	b538      	push	{r3, r4, r5, lr}
 8006242:	460d      	mov	r5, r1
 8006244:	4604      	mov	r4, r0
 8006246:	f7ff fd97 	bl	8005d78 <configuration_is_valid>
 800624a:	b108      	cbz	r0, 8006250 <acc_base_configuration_min_pipeline_memory_size_set+0x10>
 800624c:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 8006250:	bd38      	pop	{r3, r4, r5, pc}
 8006252:	bf00      	nop

08006254 <acc_base_configuration_maximize_signal_attenuation_get>:
 8006254:	b510      	push	{r4, lr}
 8006256:	4604      	mov	r4, r0
 8006258:	f7ff fd8e 	bl	8005d78 <configuration_is_valid>
 800625c:	b900      	cbnz	r0, 8006260 <acc_base_configuration_maximize_signal_attenuation_get+0xc>
 800625e:	bd10      	pop	{r4, pc}
 8006260:	f894 004a 	ldrb.w	r0, [r4, #74]	; 0x4a
 8006264:	bd10      	pop	{r4, pc}
 8006266:	bf00      	nop

08006268 <acc_base_configuration_maximize_signal_attenuation_set>:
 8006268:	b538      	push	{r3, r4, r5, lr}
 800626a:	460d      	mov	r5, r1
 800626c:	4604      	mov	r4, r0
 800626e:	f7ff fd83 	bl	8005d78 <configuration_is_valid>
 8006272:	b108      	cbz	r0, 8006278 <acc_base_configuration_maximize_signal_attenuation_set+0x10>
 8006274:	f884 504a 	strb.w	r5, [r4, #74]	; 0x4a
 8006278:	bd38      	pop	{r3, r4, r5, pc}
 800627a:	bf00      	nop

0800627c <acc_base_configuration_cca_get>:
 800627c:	b570      	push	{r4, r5, r6, lr}
 800627e:	460e      	mov	r6, r1
 8006280:	4615      	mov	r5, r2
 8006282:	4604      	mov	r4, r0
 8006284:	f7ff fd78 	bl	8005d78 <configuration_is_valid>
 8006288:	b148      	cbz	r0, 800629e <acc_base_configuration_cca_get+0x22>
 800628a:	b116      	cbz	r6, 8006292 <acc_base_configuration_cca_get+0x16>
 800628c:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8006290:	7033      	strb	r3, [r6, #0]
 8006292:	b115      	cbz	r5, 800629a <acc_base_configuration_cca_get+0x1e>
 8006294:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8006298:	802b      	strh	r3, [r5, #0]
 800629a:	f894 004f 	ldrb.w	r0, [r4, #79]	; 0x4f
 800629e:	bd70      	pop	{r4, r5, r6, pc}

080062a0 <acc_base_configuration_cca_set>:
 80062a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062a2:	460f      	mov	r7, r1
 80062a4:	4616      	mov	r6, r2
 80062a6:	461d      	mov	r5, r3
 80062a8:	4604      	mov	r4, r0
 80062aa:	f7ff fd65 	bl	8005d78 <configuration_is_valid>
 80062ae:	b128      	cbz	r0, 80062bc <acc_base_configuration_cca_set+0x1c>
 80062b0:	f884 704f 	strb.w	r7, [r4, #79]	; 0x4f
 80062b4:	f884 6050 	strb.w	r6, [r4, #80]	; 0x50
 80062b8:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
 80062bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062be:	bf00      	nop

080062c0 <acc_base_configuration_mur_set>:
 80062c0:	b538      	push	{r3, r4, r5, lr}
 80062c2:	460d      	mov	r5, r1
 80062c4:	4604      	mov	r4, r0
 80062c6:	f7ff fd57 	bl	8005d78 <configuration_is_valid>
 80062ca:	b108      	cbz	r0, 80062d0 <acc_base_configuration_mur_set+0x10>
 80062cc:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
 80062d0:	bd38      	pop	{r3, r4, r5, pc}
 80062d2:	bf00      	nop

080062d4 <acc_base_configuration_sampling_mode_to_string>:
 80062d4:	b130      	cbz	r0, 80062e4 <acc_base_configuration_sampling_mode_to_string+0x10>
 80062d6:	4b04      	ldr	r3, [pc, #16]	; (80062e8 <acc_base_configuration_sampling_mode_to_string+0x14>)
 80062d8:	4a04      	ldr	r2, [pc, #16]	; (80062ec <acc_base_configuration_sampling_mode_to_string+0x18>)
 80062da:	2801      	cmp	r0, #1
 80062dc:	bf14      	ite	ne
 80062de:	4618      	movne	r0, r3
 80062e0:	4610      	moveq	r0, r2
 80062e2:	4770      	bx	lr
 80062e4:	4802      	ldr	r0, [pc, #8]	; (80062f0 <acc_base_configuration_sampling_mode_to_string+0x1c>)
 80062e6:	4770      	bx	lr
 80062e8:	08014818 	.word	0x08014818
 80062ec:	08013354 	.word	0x08013354
 80062f0:	08013350 	.word	0x08013350

080062f4 <acc_base_configuration_print>:
 80062f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062f8:	b08f      	sub	sp, #60	; 0x3c
 80062fa:	4604      	mov	r4, r0
 80062fc:	f000 f9be 	bl	800667c <acc_rss_integration_log_level>
 8006300:	2801      	cmp	r0, #1
 8006302:	d94a      	bls.n	800639a <acc_base_configuration_print+0xa6>
 8006304:	4b26      	ldr	r3, [pc, #152]	; (80063a0 <acc_base_configuration_print+0xac>)
 8006306:	4620      	mov	r0, r4
 8006308:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 800630c:	f7ff fd4a 	bl	8005da4 <acc_base_configuration_sensor_get>
 8006310:	4683      	mov	fp, r0
 8006312:	4620      	mov	r0, r4
 8006314:	f7ff fdce 	bl	8005eb4 <acc_base_configuration_hw_accelerated_average_samples_get>
 8006318:	4605      	mov	r5, r0
 800631a:	4620      	mov	r0, r4
 800631c:	f7ff fe7c 	bl	8006018 <acc_base_configuration_gain_get>
 8006320:	4606      	mov	r6, r0
 8006322:	4620      	mov	r0, r4
 8006324:	f7ff fe88 	bl	8006038 <acc_base_configuration_integrator_get>
 8006328:	4607      	mov	r7, r0
 800632a:	4620      	mov	r0, r4
 800632c:	f7ff fe98 	bl	8006060 <acc_base_configuration_wg_duration_get>
 8006330:	4680      	mov	r8, r0
 8006332:	4620      	mov	r0, r4
 8006334:	f7ff fea8 	bl	8006088 <acc_base_configuration_integrator_ramp_up_get>
 8006338:	4681      	mov	r9, r0
 800633a:	4620      	mov	r0, r4
 800633c:	f7ff fd82 	bl	8005e44 <acc_base_configuration_power_save_mode_get>
 8006340:	2804      	cmp	r0, #4
 8006342:	bf96      	itet	ls
 8006344:	4b17      	ldrls	r3, [pc, #92]	; (80063a4 <acc_base_configuration_print+0xb0>)
 8006346:	4918      	ldrhi	r1, [pc, #96]	; (80063a8 <acc_base_configuration_print+0xb4>)
 8006348:	f853 1020 	ldrls.w	r1, [r3, r0, lsl #2]
 800634c:	910d      	str	r1, [sp, #52]	; 0x34
 800634e:	4620      	mov	r0, r4
 8006350:	f7ff feae 	bl	80060b0 <acc_base_configuration_sampling_mode_get>
 8006354:	f7ff ffbe 	bl	80062d4 <acc_base_configuration_sampling_mode_to_string>
 8006358:	4602      	mov	r2, r0
 800635a:	4620      	mov	r0, r4
 800635c:	920c      	str	r2, [sp, #48]	; 0x30
 800635e:	f7ff fd81 	bl	8005e64 <acc_base_configuration_tx_disable_get>
 8006362:	4603      	mov	r3, r0
 8006364:	4620      	mov	r0, r4
 8006366:	930b      	str	r3, [sp, #44]	; 0x2c
 8006368:	f7ff ff10 	bl	800618c <acc_base_configuration_sparse_sweeps_per_frame_get>
 800636c:	4684      	mov	ip, r0
 800636e:	4620      	mov	r0, r4
 8006370:	4664      	mov	r4, ip
 8006372:	f7ff fd8b 	bl	8005e8c <acc_base_configuration_decrease_tx_emission_get>
 8006376:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006378:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800637a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800637c:	9206      	str	r2, [sp, #24]
 800637e:	e9cd 9104 	strd	r9, r1, [sp, #16]
 8006382:	9307      	str	r3, [sp, #28]
 8006384:	9009      	str	r0, [sp, #36]	; 0x24
 8006386:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800638a:	e9cd 5600 	strd	r5, r6, [sp]
 800638e:	4a07      	ldr	r2, [pc, #28]	; (80063ac <acc_base_configuration_print+0xb8>)
 8006390:	4907      	ldr	r1, [pc, #28]	; (80063b0 <acc_base_configuration_print+0xbc>)
 8006392:	9408      	str	r4, [sp, #32]
 8006394:	465b      	mov	r3, fp
 8006396:	2002      	movs	r0, #2
 8006398:	47d0      	blx	sl
 800639a:	b00f      	add	sp, #60	; 0x3c
 800639c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063a0:	20000640 	.word	0x20000640
 80063a4:	0801356c 	.word	0x0801356c
 80063a8:	08014818 	.word	0x08014818
 80063ac:	08013358 	.word	0x08013358
 80063b0:	0801333c 	.word	0x0801333c

080063b4 <acc_base_configuration_check>:
 80063b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063b6:	4605      	mov	r5, r0
 80063b8:	f7ff fcde 	bl	8005d78 <configuration_is_valid>
 80063bc:	4604      	mov	r4, r0
 80063be:	b318      	cbz	r0, 8006408 <acc_base_configuration_check+0x54>
 80063c0:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80063c2:	2b04      	cmp	r3, #4
 80063c4:	d819      	bhi.n	80063fa <acc_base_configuration_check+0x46>
 80063c6:	d02d      	beq.n	8006424 <acc_base_configuration_check+0x70>
 80063c8:	8feb      	ldrh	r3, [r5, #62]	; 0x3e
 80063ca:	2b16      	cmp	r3, #22
 80063cc:	d821      	bhi.n	8006412 <acc_base_configuration_check+0x5e>
 80063ce:	8fab      	ldrh	r3, [r5, #60]	; 0x3c
 80063d0:	3b01      	subs	r3, #1
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	2b3e      	cmp	r3, #62	; 0x3e
 80063d6:	d819      	bhi.n	800640c <acc_base_configuration_check+0x58>
 80063d8:	6bae      	ldr	r6, [r5, #56]	; 0x38
 80063da:	792b      	ldrb	r3, [r5, #4]
 80063dc:	b9e6      	cbnz	r6, 8006418 <acc_base_configuration_check+0x64>
 80063de:	2b03      	cmp	r3, #3
 80063e0:	d037      	beq.n	8006452 <acc_base_configuration_check+0x9e>
 80063e2:	2301      	movs	r3, #1
 80063e4:	f885 304e 	strb.w	r3, [r5, #78]	; 0x4e
 80063e8:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
 80063ec:	2b06      	cmp	r3, #6
 80063ee:	d00b      	beq.n	8006408 <acc_base_configuration_check+0x54>
 80063f0:	2b09      	cmp	r3, #9
 80063f2:	d009      	beq.n	8006408 <acc_base_configuration_check+0x54>
 80063f4:	4b18      	ldr	r3, [pc, #96]	; (8006458 <acc_base_configuration_check+0xa4>)
 80063f6:	4a19      	ldr	r2, [pc, #100]	; (800645c <acc_base_configuration_check+0xa8>)
 80063f8:	e001      	b.n	80063fe <acc_base_configuration_check+0x4a>
 80063fa:	4b17      	ldr	r3, [pc, #92]	; (8006458 <acc_base_configuration_check+0xa4>)
 80063fc:	4a18      	ldr	r2, [pc, #96]	; (8006460 <acc_base_configuration_check+0xac>)
 80063fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006400:	4918      	ldr	r1, [pc, #96]	; (8006464 <acc_base_configuration_check+0xb0>)
 8006402:	2000      	movs	r0, #0
 8006404:	4798      	blx	r3
 8006406:	2400      	movs	r4, #0
 8006408:	4620      	mov	r0, r4
 800640a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800640c:	4b12      	ldr	r3, [pc, #72]	; (8006458 <acc_base_configuration_check+0xa4>)
 800640e:	4a16      	ldr	r2, [pc, #88]	; (8006468 <acc_base_configuration_check+0xb4>)
 8006410:	e7f5      	b.n	80063fe <acc_base_configuration_check+0x4a>
 8006412:	4b11      	ldr	r3, [pc, #68]	; (8006458 <acc_base_configuration_check+0xa4>)
 8006414:	4a15      	ldr	r2, [pc, #84]	; (800646c <acc_base_configuration_check+0xb8>)
 8006416:	e7f2      	b.n	80063fe <acc_base_configuration_check+0x4a>
 8006418:	2b03      	cmp	r3, #3
 800641a:	d00c      	beq.n	8006436 <acc_base_configuration_check+0x82>
 800641c:	f036 0304 	bics.w	r3, r6, #4
 8006420:	d1e2      	bne.n	80063e8 <acc_base_configuration_check+0x34>
 8006422:	e7de      	b.n	80063e2 <acc_base_configuration_check+0x2e>
 8006424:	f000 f8a2 	bl	800656c <acc_rss_integration_is_hibernate_capable>
 8006428:	b160      	cbz	r0, 8006444 <acc_base_configuration_check+0x90>
 800642a:	792b      	ldrb	r3, [r5, #4]
 800642c:	2b03      	cmp	r3, #3
 800642e:	d1cb      	bne.n	80063c8 <acc_base_configuration_check+0x14>
 8006430:	4b09      	ldr	r3, [pc, #36]	; (8006458 <acc_base_configuration_check+0xa4>)
 8006432:	4a0f      	ldr	r2, [pc, #60]	; (8006470 <acc_base_configuration_check+0xbc>)
 8006434:	e7e3      	b.n	80063fe <acc_base_configuration_check+0x4a>
 8006436:	f895 704e 	ldrb.w	r7, [r5, #78]	; 0x4e
 800643a:	2f00      	cmp	r7, #0
 800643c:	d1ee      	bne.n	800641c <acc_base_configuration_check+0x68>
 800643e:	4b06      	ldr	r3, [pc, #24]	; (8006458 <acc_base_configuration_check+0xa4>)
 8006440:	4a0c      	ldr	r2, [pc, #48]	; (8006474 <acc_base_configuration_check+0xc0>)
 8006442:	e7dc      	b.n	80063fe <acc_base_configuration_check+0x4a>
 8006444:	4904      	ldr	r1, [pc, #16]	; (8006458 <acc_base_configuration_check+0xa4>)
 8006446:	4a0c      	ldr	r2, [pc, #48]	; (8006478 <acc_base_configuration_check+0xc4>)
 8006448:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800644a:	4906      	ldr	r1, [pc, #24]	; (8006464 <acc_base_configuration_check+0xb0>)
 800644c:	4604      	mov	r4, r0
 800644e:	47a8      	blx	r5
 8006450:	e7da      	b.n	8006408 <acc_base_configuration_check+0x54>
 8006452:	4b01      	ldr	r3, [pc, #4]	; (8006458 <acc_base_configuration_check+0xa4>)
 8006454:	4a09      	ldr	r2, [pc, #36]	; (800647c <acc_base_configuration_check+0xc8>)
 8006456:	e7d2      	b.n	80063fe <acc_base_configuration_check+0x4a>
 8006458:	20000640 	.word	0x20000640
 800645c:	08013530 	.word	0x08013530
 8006460:	08013390 	.word	0x08013390
 8006464:	0801333c 	.word	0x0801333c
 8006468:	08013460 	.word	0x08013460
 800646c:	0801342c 	.word	0x0801342c
 8006470:	080133e8 	.word	0x080133e8
 8006474:	080134f0 	.word	0x080134f0
 8006478:	080133a8 	.word	0x080133a8
 800647c:	080134b4 	.word	0x080134b4

08006480 <acc_rss_integration_register>:
 8006480:	b538      	push	{r3, r4, r5, lr}
 8006482:	6943      	ldr	r3, [r0, #20]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d02b      	beq.n	80064e0 <acc_rss_integration_register+0x60>
 8006488:	6983      	ldr	r3, [r0, #24]
 800648a:	b34b      	cbz	r3, 80064e0 <acc_rss_integration_register+0x60>
 800648c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800648e:	b323      	cbz	r3, 80064da <acc_rss_integration_register+0x5a>
 8006490:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006492:	b32b      	cbz	r3, 80064e0 <acc_rss_integration_register+0x60>
 8006494:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8006496:	b31b      	cbz	r3, 80064e0 <acc_rss_integration_register+0x60>
 8006498:	6883      	ldr	r3, [r0, #8]
 800649a:	b30b      	cbz	r3, 80064e0 <acc_rss_integration_register+0x60>
 800649c:	68c3      	ldr	r3, [r0, #12]
 800649e:	b1fb      	cbz	r3, 80064e0 <acc_rss_integration_register+0x60>
 80064a0:	6903      	ldr	r3, [r0, #16]
 80064a2:	b1eb      	cbz	r3, 80064e0 <acc_rss_integration_register+0x60>
 80064a4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80064a6:	b313      	cbz	r3, 80064ee <acc_rss_integration_register+0x6e>
 80064a8:	6802      	ldr	r2, [r0, #0]
 80064aa:	2a2a      	cmp	r2, #42	; 0x2a
 80064ac:	d81a      	bhi.n	80064e4 <acc_rss_integration_register+0x64>
 80064ae:	6842      	ldr	r2, [r0, #4]
 80064b0:	2a0f      	cmp	r2, #15
 80064b2:	d917      	bls.n	80064e4 <acc_rss_integration_register+0x64>
 80064b4:	69c2      	ldr	r2, [r0, #28]
 80064b6:	b10a      	cbz	r2, 80064bc <acc_rss_integration_register+0x3c>
 80064b8:	6a02      	ldr	r2, [r0, #32]
 80064ba:	b19a      	cbz	r2, 80064e4 <acc_rss_integration_register+0x64>
 80064bc:	4605      	mov	r5, r0
 80064be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80064c0:	4c0c      	ldr	r4, [pc, #48]	; (80064f4 <acc_rss_integration_register+0x74>)
 80064c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80064c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80064ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80064d0:	2301      	movs	r3, #1
 80064d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80064d6:	4618      	mov	r0, r3
 80064d8:	bd38      	pop	{r3, r4, r5, pc}
 80064da:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d1d7      	bne.n	8006490 <acc_rss_integration_register+0x10>
 80064e0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80064e2:	b123      	cbz	r3, 80064ee <acc_rss_integration_register+0x6e>
 80064e4:	4a04      	ldr	r2, [pc, #16]	; (80064f8 <acc_rss_integration_register+0x78>)
 80064e6:	4905      	ldr	r1, [pc, #20]	; (80064fc <acc_rss_integration_register+0x7c>)
 80064e8:	2000      	movs	r0, #0
 80064ea:	4798      	blx	r3
 80064ec:	2300      	movs	r3, #0
 80064ee:	4618      	mov	r0, r3
 80064f0:	bd38      	pop	{r3, r4, r5, pc}
 80064f2:	bf00      	nop
 80064f4:	20000640 	.word	0x20000640
 80064f8:	08013580 	.word	0x08013580
 80064fc:	08013594 	.word	0x08013594

08006500 <acc_rss_integration_unregister>:
 8006500:	4802      	ldr	r0, [pc, #8]	; (800650c <acc_rss_integration_unregister+0xc>)
 8006502:	223c      	movs	r2, #60	; 0x3c
 8006504:	2100      	movs	r1, #0
 8006506:	f008 b9fb 	b.w	800e900 <memset>
 800650a:	bf00      	nop
 800650c:	20000640 	.word	0x20000640

08006510 <acc_rss_integration_get_sensor_count>:
 8006510:	4b01      	ldr	r3, [pc, #4]	; (8006518 <acc_rss_integration_get_sensor_count+0x8>)
 8006512:	6818      	ldr	r0, [r3, #0]
 8006514:	4770      	bx	lr
 8006516:	bf00      	nop
 8006518:	20000640 	.word	0x20000640

0800651c <acc_rss_integration_get_sensor_reference_frequency>:
 800651c:	4b01      	ldr	r3, [pc, #4]	; (8006524 <acc_rss_integration_get_sensor_reference_frequency+0x8>)
 800651e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006520:	4718      	bx	r3
 8006522:	bf00      	nop
 8006524:	20000640 	.word	0x20000640

08006528 <acc_rss_integration_get_max_spi_transfer_size>:
 8006528:	4b01      	ldr	r3, [pc, #4]	; (8006530 <acc_rss_integration_get_max_spi_transfer_size+0x8>)
 800652a:	6858      	ldr	r0, [r3, #4]
 800652c:	4770      	bx	lr
 800652e:	bf00      	nop
 8006530:	20000640 	.word	0x20000640

08006534 <acc_rss_integration_sensor_device_power_on>:
 8006534:	4b01      	ldr	r3, [pc, #4]	; (800653c <acc_rss_integration_sensor_device_power_on+0x8>)
 8006536:	695b      	ldr	r3, [r3, #20]
 8006538:	4718      	bx	r3
 800653a:	bf00      	nop
 800653c:	20000640 	.word	0x20000640

08006540 <acc_rss_integration_sensor_device_power_off>:
 8006540:	4b01      	ldr	r3, [pc, #4]	; (8006548 <acc_rss_integration_sensor_device_power_off+0x8>)
 8006542:	699b      	ldr	r3, [r3, #24]
 8006544:	4718      	bx	r3
 8006546:	bf00      	nop
 8006548:	20000640 	.word	0x20000640

0800654c <acc_rss_integration_sensor_device_hibernate_enter>:
 800654c:	4b02      	ldr	r3, [pc, #8]	; (8006558 <acc_rss_integration_sensor_device_hibernate_enter+0xc>)
 800654e:	69db      	ldr	r3, [r3, #28]
 8006550:	b103      	cbz	r3, 8006554 <acc_rss_integration_sensor_device_hibernate_enter+0x8>
 8006552:	4718      	bx	r3
 8006554:	4770      	bx	lr
 8006556:	bf00      	nop
 8006558:	20000640 	.word	0x20000640

0800655c <acc_rss_integration_sensor_device_hibernate_exit>:
 800655c:	4b02      	ldr	r3, [pc, #8]	; (8006568 <acc_rss_integration_sensor_device_hibernate_exit+0xc>)
 800655e:	6a1b      	ldr	r3, [r3, #32]
 8006560:	b103      	cbz	r3, 8006564 <acc_rss_integration_sensor_device_hibernate_exit+0x8>
 8006562:	4718      	bx	r3
 8006564:	4770      	bx	lr
 8006566:	bf00      	nop
 8006568:	20000640 	.word	0x20000640

0800656c <acc_rss_integration_is_hibernate_capable>:
 800656c:	4b02      	ldr	r3, [pc, #8]	; (8006578 <acc_rss_integration_is_hibernate_capable+0xc>)
 800656e:	69d8      	ldr	r0, [r3, #28]
 8006570:	3800      	subs	r0, #0
 8006572:	bf18      	it	ne
 8006574:	2001      	movne	r0, #1
 8006576:	4770      	bx	lr
 8006578:	20000640 	.word	0x20000640

0800657c <acc_rss_integration_wait_for_sensor_interrupt>:
 800657c:	4b01      	ldr	r3, [pc, #4]	; (8006584 <acc_rss_integration_wait_for_sensor_interrupt+0x8>)
 800657e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006580:	4718      	bx	r3
 8006582:	bf00      	nop
 8006584:	20000640 	.word	0x20000640

08006588 <acc_rss_integration_sensor_device_transfer>:
 8006588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800658c:	4f10      	ldr	r7, [pc, #64]	; (80065d0 <acc_rss_integration_sensor_device_transfer+0x48>)
 800658e:	f8d7 e038 	ldr.w	lr, [r7, #56]	; 0x38
 8006592:	f1be 0f00 	cmp.w	lr, #0
 8006596:	d003      	beq.n	80065a0 <acc_rss_integration_sensor_device_transfer+0x18>
 8006598:	4673      	mov	r3, lr
 800659a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800659e:	4718      	bx	r3
 80065a0:	460c      	mov	r4, r1
 80065a2:	4606      	mov	r6, r0
 80065a4:	4611      	mov	r1, r2
 80065a6:	4615      	mov	r5, r2
 80065a8:	4620      	mov	r0, r4
 80065aa:	4698      	mov	r8, r3
 80065ac:	f002 fd3a 	bl	8009024 <acc_utils_swap16_array>
 80065b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b2:	4630      	mov	r0, r6
 80065b4:	006a      	lsls	r2, r5, #1
 80065b6:	4621      	mov	r1, r4
 80065b8:	4798      	blx	r3
 80065ba:	f1b8 0f00 	cmp.w	r8, #0
 80065be:	d101      	bne.n	80065c4 <acc_rss_integration_sensor_device_transfer+0x3c>
 80065c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065c4:	4629      	mov	r1, r5
 80065c6:	4620      	mov	r0, r4
 80065c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065cc:	f002 bd2a 	b.w	8009024 <acc_utils_swap16_array>
 80065d0:	20000640 	.word	0x20000640

080065d4 <acc_rss_integration_mem_alloc_debug>:
 80065d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065d8:	4f0c      	ldr	r7, [pc, #48]	; (800660c <acc_rss_integration_mem_alloc_debug+0x38>)
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	4688      	mov	r8, r1
 80065de:	4616      	mov	r6, r2
 80065e0:	4605      	mov	r5, r0
 80065e2:	4798      	blx	r3
 80065e4:	4604      	mov	r4, r0
 80065e6:	b150      	cbz	r0, 80065fe <acc_rss_integration_mem_alloc_debug+0x2a>
 80065e8:	4b09      	ldr	r3, [pc, #36]	; (8006610 <acc_rss_integration_mem_alloc_debug+0x3c>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	b123      	cbz	r3, 80065f8 <acc_rss_integration_mem_alloc_debug+0x24>
 80065ee:	689f      	ldr	r7, [r3, #8]
 80065f0:	4642      	mov	r2, r8
 80065f2:	4633      	mov	r3, r6
 80065f4:	4629      	mov	r1, r5
 80065f6:	47b8      	blx	r7
 80065f8:	4620      	mov	r0, r4
 80065fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006600:	4a04      	ldr	r2, [pc, #16]	; (8006614 <acc_rss_integration_mem_alloc_debug+0x40>)
 8006602:	4905      	ldr	r1, [pc, #20]	; (8006618 <acc_rss_integration_mem_alloc_debug+0x44>)
 8006604:	4798      	blx	r3
 8006606:	4620      	mov	r0, r4
 8006608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800660c:	20000640 	.word	0x20000640
 8006610:	200004dc 	.word	0x200004dc
 8006614:	080135a4 	.word	0x080135a4
 8006618:	08013594 	.word	0x08013594

0800661c <acc_rss_integration_mem_calloc_debug>:
 800661c:	b570      	push	{r4, r5, r6, lr}
 800661e:	b190      	cbz	r0, 8006646 <acc_rss_integration_mem_calloc_debug+0x2a>
 8006620:	460c      	mov	r4, r1
 8006622:	4611      	mov	r1, r2
 8006624:	461a      	mov	r2, r3
 8006626:	fba0 3604 	umull	r3, r6, r0, r4
 800662a:	b97e      	cbnz	r6, 800664c <acc_rss_integration_mem_calloc_debug+0x30>
 800662c:	fb04 f500 	mul.w	r5, r4, r0
 8006630:	4628      	mov	r0, r5
 8006632:	f7ff ffcf 	bl	80065d4 <acc_rss_integration_mem_alloc_debug>
 8006636:	4604      	mov	r4, r0
 8006638:	b118      	cbz	r0, 8006642 <acc_rss_integration_mem_calloc_debug+0x26>
 800663a:	462a      	mov	r2, r5
 800663c:	4631      	mov	r1, r6
 800663e:	f008 f95f 	bl	800e900 <memset>
 8006642:	4620      	mov	r0, r4
 8006644:	bd70      	pop	{r4, r5, r6, pc}
 8006646:	4604      	mov	r4, r0
 8006648:	4620      	mov	r0, r4
 800664a:	bd70      	pop	{r4, r5, r6, pc}
 800664c:	4801      	ldr	r0, [pc, #4]	; (8006654 <acc_rss_integration_mem_calloc_debug+0x38>)
 800664e:	21dd      	movs	r1, #221	; 0xdd
 8006650:	f002 fa38 	bl	8008ac4 <acc_assert_fail>
 8006654:	08013594 	.word	0x08013594

08006658 <acc_rss_integration_mem_free>:
 8006658:	4b06      	ldr	r3, [pc, #24]	; (8006674 <acc_rss_integration_mem_free+0x1c>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	b510      	push	{r4, lr}
 800665e:	4604      	mov	r4, r0
 8006660:	b10b      	cbz	r3, 8006666 <acc_rss_integration_mem_free+0xe>
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	4798      	blx	r3
 8006666:	4b04      	ldr	r3, [pc, #16]	; (8006678 <acc_rss_integration_mem_free+0x20>)
 8006668:	4620      	mov	r0, r4
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006670:	4718      	bx	r3
 8006672:	bf00      	nop
 8006674:	200004dc 	.word	0x200004dc
 8006678:	20000640 	.word	0x20000640

0800667c <acc_rss_integration_log_level>:
 800667c:	4b01      	ldr	r3, [pc, #4]	; (8006684 <acc_rss_integration_log_level+0x8>)
 800667e:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
 8006682:	4770      	bx	lr
 8006684:	20000640 	.word	0x20000640

08006688 <inject_data>:
 8006688:	3034      	adds	r0, #52	; 0x34
 800668a:	f003 bacf 	b.w	8009c2c <acc_element_source_adc_inject_data>
 800668e:	bf00      	nop

08006690 <disassemble>:
 8006690:	b538      	push	{r3, r4, r5, lr}
 8006692:	6805      	ldr	r5, [r0, #0]
 8006694:	4604      	mov	r4, r0
 8006696:	b155      	cbz	r5, 80066ae <disassemble+0x1e>
 8006698:	f105 0034 	add.w	r0, r5, #52	; 0x34
 800669c:	f003 fa76 	bl	8009b8c <acc_element_source_adc_release>
 80066a0:	f8d5 03a4 	ldr.w	r0, [r5, #932]	; 0x3a4
 80066a4:	f7ff ffd8 	bl	8006658 <acc_rss_integration_mem_free>
 80066a8:	4628      	mov	r0, r5
 80066aa:	f7ff ffd5 	bl	8006658 <acc_rss_integration_mem_free>
 80066ae:	4620      	mov	r0, r4
 80066b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80066b4:	f7ff bfd0 	b.w	8006658 <acc_rss_integration_mem_free>

080066b8 <produce>:
 80066b8:	b510      	push	{r4, lr}
 80066ba:	4604      	mov	r4, r0
 80066bc:	3034      	adds	r0, #52	; 0x34
 80066be:	f003 fa73 	bl	8009ba8 <acc_element_source_adc_produce>
 80066c2:	b960      	cbnz	r0, 80066de <produce+0x26>
 80066c4:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 80066c8:	f8d4 2348 	ldr.w	r2, [r4, #840]	; 0x348
 80066cc:	6118      	str	r0, [r3, #16]
 80066ce:	2101      	movs	r1, #1
 80066d0:	7198      	strb	r0, [r3, #6]
 80066d2:	7159      	strb	r1, [r3, #5]
 80066d4:	f504 7051 	add.w	r0, r4, #836	; 0x344
 80066d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066dc:	4710      	bx	r2
 80066de:	bd10      	pop	{r4, pc}

080066e0 <acc_pipeline_envelope_assemble>:
 80066e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066e4:	ed2d 8b08 	vpush	{d8-d11}
 80066e8:	460e      	mov	r6, r1
 80066ea:	b08b      	sub	sp, #44	; 0x2c
 80066ec:	461c      	mov	r4, r3
 80066ee:	2110      	movs	r1, #16
 80066f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80066f4:	4681      	mov	r9, r0
 80066f6:	4615      	mov	r5, r2
 80066f8:	2001      	movs	r0, #1
 80066fa:	4ae4      	ldr	r2, [pc, #912]	; (8006a8c <acc_pipeline_envelope_assemble+0x3ac>)
 80066fc:	e9cd 6403 	strd	r6, r4, [sp, #12]
 8006700:	f7ff ff8c 	bl	800661c <acc_rss_integration_mem_calloc_debug>
 8006704:	4ae1      	ldr	r2, [pc, #900]	; (8006a8c <acc_pipeline_envelope_assemble+0x3ac>)
 8006706:	4606      	mov	r6, r0
 8006708:	f240 1301 	movw	r3, #257	; 0x101
 800670c:	f44f 716b 	mov.w	r1, #940	; 0x3ac
 8006710:	2001      	movs	r0, #1
 8006712:	f7ff ff83 	bl	800661c <acc_rss_integration_mem_calloc_debug>
 8006716:	4604      	mov	r4, r0
 8006718:	2e00      	cmp	r6, #0
 800671a:	f000 8208 	beq.w	8006b2e <acc_pipeline_envelope_assemble+0x44e>
 800671e:	2800      	cmp	r0, #0
 8006720:	f000 8205 	beq.w	8006b2e <acc_pipeline_envelope_assemble+0x44e>
 8006724:	f100 0334 	add.w	r3, r0, #52	; 0x34
 8006728:	f500 7262 	add.w	r2, r0, #904	; 0x388
 800672c:	f100 0814 	add.w	r8, r0, #20
 8006730:	6030      	str	r0, [r6, #0]
 8006732:	4649      	mov	r1, r9
 8006734:	4618      	mov	r0, r3
 8006736:	9200      	str	r2, [sp, #0]
 8006738:	ee08 3a10 	vmov	s16, r3
 800673c:	462a      	mov	r2, r5
 800673e:	4643      	mov	r3, r8
 8006740:	f003 fa04 	bl	8009b4c <acc_element_source_adc_init_radar_engine>
 8006744:	4681      	mov	r9, r0
 8006746:	2800      	cmp	r0, #0
 8006748:	f000 81aa 	beq.w	8006aa0 <acc_pipeline_envelope_assemble+0x3c0>
 800674c:	2100      	movs	r1, #0
 800674e:	4628      	mov	r0, r5
 8006750:	f7ff fbe6 	bl	8005f20 <acc_base_configuration_time_domain_low_pass_filter_alpha_get>
 8006754:	4683      	mov	fp, r0
 8006756:	2007      	movs	r0, #7
 8006758:	f8b4 9388 	ldrh.w	r9, [r4, #904]	; 0x388
 800675c:	f002 f9ca 	bl	8008af4 <acc_element_sizeof>
 8006760:	f8b4 a396 	ldrh.w	sl, [r4, #918]	; 0x396
 8006764:	f8b4 3392 	ldrh.w	r3, [r4, #914]	; 0x392
 8006768:	f8b4 2394 	ldrh.w	r2, [r4, #916]	; 0x394
 800676c:	4453      	add	r3, sl
 800676e:	ea4f 0a43 	mov.w	sl, r3, lsl #1
 8006772:	0053      	lsls	r3, r2, #1
 8006774:	459a      	cmp	sl, r3
 8006776:	bf38      	it	cc
 8006778:	469a      	movcc	sl, r3
 800677a:	fb00 f909 	mul.w	r9, r0, r9
 800677e:	45ca      	cmp	sl, r9
 8006780:	4628      	mov	r0, r5
 8006782:	bf38      	it	cc
 8006784:	46ca      	movcc	sl, r9
 8006786:	f7ff fd51 	bl	800622c <acc_base_configuration_min_pipeline_memory_size_get>
 800678a:	4582      	cmp	sl, r0
 800678c:	bf38      	it	cc
 800678e:	4682      	movcc	sl, r0
 8006790:	f8c4 a3a8 	str.w	sl, [r4, #936]	; 0x3a8
 8006794:	f1bb 0f00 	cmp.w	fp, #0
 8006798:	d115      	bne.n	80067c6 <acc_pipeline_envelope_assemble+0xe6>
 800679a:	49bc      	ldr	r1, [pc, #752]	; (8006a8c <acc_pipeline_envelope_assemble+0x3ac>)
 800679c:	f240 1285 	movw	r2, #389	; 0x185
 80067a0:	4650      	mov	r0, sl
 80067a2:	f7ff ff17 	bl	80065d4 <acc_rss_integration_mem_alloc_debug>
 80067a6:	4681      	mov	r9, r0
 80067a8:	f8c4 03a4 	str.w	r0, [r4, #932]	; 0x3a4
 80067ac:	2800      	cmp	r0, #0
 80067ae:	f040 8181 	bne.w	8006ab4 <acc_pipeline_envelope_assemble+0x3d4>
 80067b2:	4630      	mov	r0, r6
 80067b4:	f7ff ff6c 	bl	8006690 <disassemble>
 80067b8:	2600      	movs	r6, #0
 80067ba:	4630      	mov	r0, r6
 80067bc:	b00b      	add	sp, #44	; 0x2c
 80067be:	ecbd 8b08 	vpop	{d8-d11}
 80067c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067c6:	2007      	movs	r0, #7
 80067c8:	f8b4 9388 	ldrh.w	r9, [r4, #904]	; 0x388
 80067cc:	f002 f992 	bl	8008af4 <acc_element_sizeof>
 80067d0:	f10a 030a 	add.w	r3, sl, #10
 80067d4:	fb00 3009 	mla	r0, r0, r9, r3
 80067d8:	49ac      	ldr	r1, [pc, #688]	; (8006a8c <acc_pipeline_envelope_assemble+0x3ac>)
 80067da:	f240 1285 	movw	r2, #389	; 0x185
 80067de:	f7ff fef9 	bl	80065d4 <acc_rss_integration_mem_alloc_debug>
 80067e2:	4681      	mov	r9, r0
 80067e4:	f8c4 03a4 	str.w	r0, [r4, #932]	; 0x3a4
 80067e8:	2800      	cmp	r0, #0
 80067ea:	d0e2      	beq.n	80067b2 <acc_pipeline_envelope_assemble+0xd2>
 80067ec:	f8b4 138a 	ldrh.w	r1, [r4, #906]	; 0x38a
 80067f0:	9105      	str	r1, [sp, #20]
 80067f2:	2007      	movs	r0, #7
 80067f4:	f002 f97e 	bl	8008af4 <acc_element_sizeof>
 80067f8:	9905      	ldr	r1, [sp, #20]
 80067fa:	f10a 0204 	add.w	r2, sl, #4
 80067fe:	fb00 9101 	mla	r1, r0, r1, r9
 8006802:	444a      	add	r2, r9
 8006804:	f104 0c06 	add.w	ip, r4, #6
 8006808:	1de0      	adds	r0, r4, #7
 800680a:	f104 0310 	add.w	r3, r4, #16
 800680e:	e9cd 2106 	strd	r2, r1, [sp, #24]
 8006812:	f8c4 c05c 	str.w	ip, [r4, #92]	; 0x5c
 8006816:	f104 020c 	add.w	r2, r4, #12
 800681a:	f104 0c08 	add.w	ip, r4, #8
 800681e:	6620      	str	r0, [r4, #96]	; 0x60
 8006820:	1d20      	adds	r0, r4, #4
 8006822:	e9c4 2c19 	strd	r2, ip, [r4, #100]	; 0x64
 8006826:	65a3      	str	r3, [r4, #88]	; 0x58
 8006828:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 800682c:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 8006830:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8006834:	e9c4 9931 	strd	r9, r9, [r4, #196]	; 0xc4
 8006838:	f8c4 9048 	str.w	r9, [r4, #72]	; 0x48
 800683c:	6564      	str	r4, [r4, #84]	; 0x54
 800683e:	f8c4 9084 	str.w	r9, [r4, #132]	; 0x84
 8006842:	4628      	mov	r0, r5
 8006844:	4617      	mov	r7, r2
 8006846:	9305      	str	r3, [sp, #20]
 8006848:	f7ff fcbe 	bl	80061c8 <acc_base_configuration_noise_level_normalization_get>
 800684c:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 8006850:	9907      	ldr	r1, [sp, #28]
 8006852:	b118      	cbz	r0, 800685c <acc_pipeline_envelope_assemble+0x17c>
 8006854:	e9c4 9941 	strd	r9, r9, [r4, #260]	; 0x104
 8006858:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 800685c:	e9c4 9951 	strd	r9, r9, [r4, #324]	; 0x144
 8006860:	e9c4 9960 	strd	r9, r9, [r4, #384]	; 0x180
 8006864:	e9c4 9971 	strd	r9, r9, [r4, #452]	; 0x1c4
 8006868:	e9c4 9183 	strd	r9, r1, [r4, #524]	; 0x20c
 800686c:	e9c4 1192 	strd	r1, r1, [r4, #584]	; 0x248
 8006870:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
 8006874:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194
 8006878:	f8c4 71a0 	str.w	r7, [r4, #416]	; 0x1a0
 800687c:	f8c4 31d8 	str.w	r3, [r4, #472]	; 0x1d8
 8006880:	f8c4 3220 	str.w	r3, [r4, #544]	; 0x220
 8006884:	f8c4 325c 	str.w	r3, [r4, #604]	; 0x25c
 8006888:	f1bb 0f00 	cmp.w	fp, #0
 800688c:	d007      	beq.n	800689e <acc_pipeline_envelope_assemble+0x1be>
 800688e:	e9c4 12a7 	strd	r1, r2, [r4, #668]	; 0x29c
 8006892:	eb09 000a 	add.w	r0, r9, sl
 8006896:	f8c4 02a8 	str.w	r0, [r4, #680]	; 0x2a8
 800689a:	f8c4 32b0 	str.w	r3, [r4, #688]	; 0x2b0
 800689e:	e9c4 29b7 	strd	r2, r9, [r4, #732]	; 0x2dc
 80068a2:	e9c4 99c6 	strd	r9, r9, [r4, #792]	; 0x318
 80068a6:	f8c4 32f0 	str.w	r3, [r4, #752]	; 0x2f0
 80068aa:	f8c4 332c 	str.w	r3, [r4, #812]	; 0x32c
 80068ae:	f8c4 9354 	str.w	r9, [r4, #852]	; 0x354
 80068b2:	ee18 0a10 	vmov	r0, s16
 80068b6:	f8c4 437c 	str.w	r4, [r4, #892]	; 0x37c
 80068ba:	f504 7369 	add.w	r3, r4, #932	; 0x3a4
 80068be:	4642      	mov	r2, r8
 80068c0:	4629      	mov	r1, r5
 80068c2:	f003 f951 	bl	8009b68 <acc_element_source_adc_init>
 80068c6:	4681      	mov	r9, r0
 80068c8:	2800      	cmp	r0, #0
 80068ca:	f000 80e9 	beq.w	8006aa0 <acc_pipeline_envelope_assemble+0x3c0>
 80068ce:	f104 03b4 	add.w	r3, r4, #180	; 0xb4
 80068d2:	f104 0a74 	add.w	sl, r4, #116	; 0x74
 80068d6:	461f      	mov	r7, r3
 80068d8:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8006a90 <acc_pipeline_envelope_assemble+0x3b0>
 80068dc:	2105      	movs	r1, #5
 80068de:	4650      	mov	r0, sl
 80068e0:	ee09 3a90 	vmov	s19, r3
 80068e4:	f002 f954 	bl	8008b90 <acc_element_saturation_check_init>
 80068e8:	4638      	mov	r0, r7
 80068ea:	2200      	movs	r2, #0
 80068ec:	2105      	movs	r1, #5
 80068ee:	f002 fc77 	bl	80091e0 <acc_element_centering_init>
 80068f2:	4628      	mov	r0, r5
 80068f4:	f7ff fc68 	bl	80061c8 <acc_base_configuration_noise_level_normalization_get>
 80068f8:	2800      	cmp	r0, #0
 80068fa:	f040 80fa 	bne.w	8006af2 <acc_pipeline_envelope_assemble+0x412>
 80068fe:	f504 739a 	add.w	r3, r4, #308	; 0x134
 8006902:	4618      	mov	r0, r3
 8006904:	ee08 3a90 	vmov	s17, r3
 8006908:	f504 73b8 	add.w	r3, r4, #368	; 0x170
 800690c:	461f      	mov	r7, r3
 800690e:	2207      	movs	r2, #7
 8006910:	2105      	movs	r1, #5
 8006912:	ee0a 3a90 	vmov	s21, r3
 8006916:	f002 fd2f 	bl	8009378 <acc_element_converter_init>
 800691a:	eddf 0a5d 	vldr	s1, [pc, #372]	; 8006a90 <acc_pipeline_envelope_assemble+0x3b0>
 800691e:	ed94 0a08 	vldr	s0, [r4, #32]
 8006922:	2107      	movs	r1, #7
 8006924:	4638      	mov	r0, r7
 8006926:	f002 fee9 	bl	80096fc <acc_element_iq_mixer_init>
 800692a:	f504 73da 	add.w	r3, r4, #436	; 0x1b4
 800692e:	f8b4 2390 	ldrh.w	r2, [r4, #912]	; 0x390
 8006932:	9206      	str	r2, [sp, #24]
 8006934:	461f      	mov	r7, r3
 8006936:	4628      	mov	r0, r5
 8006938:	ee0b 3a10 	vmov	s22, r3
 800693c:	f8b4 338e 	ldrh.w	r3, [r4, #910]	; 0x38e
 8006940:	9305      	str	r3, [sp, #20]
 8006942:	f7ff fad1 	bl	8005ee8 <acc_base_configuration_phase_compensation_alpha_get>
 8006946:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 800694a:	4638      	mov	r0, r7
 800694c:	2107      	movs	r1, #7
 800694e:	f504 77fe 	add.w	r7, r4, #508	; 0x1fc
 8006952:	f003 f809 	bl	8009968 <acc_element_phase_compensation_init>
 8006956:	f8b4 238c 	ldrh.w	r2, [r4, #908]	; 0x38c
 800695a:	2107      	movs	r1, #7
 800695c:	4638      	mov	r0, r7
 800695e:	f002 fd7d 	bl	800945c <acc_element_crop_init>
 8006962:	4628      	mov	r0, r5
 8006964:	f7ff faf8 	bl	8005f58 <acc_base_configuration_filter_demodulated_data_get>
 8006968:	f504 7b0e 	add.w	fp, r4, #568	; 0x238
 800696c:	9005      	str	r0, [sp, #20]
 800696e:	4628      	mov	r0, r5
 8006970:	f7ff fb02 	bl	8005f78 <acc_base_configuration_demodulation_filter_cutoff_freq_ratio_get>
 8006974:	2107      	movs	r1, #7
 8006976:	9a05      	ldr	r2, [sp, #20]
 8006978:	4643      	mov	r3, r8
 800697a:	4658      	mov	r0, fp
 800697c:	f002 fdd0 	bl	8009520 <acc_element_depth_domain_low_pass_filter_init>
 8006980:	a909      	add	r1, sp, #36	; 0x24
 8006982:	4628      	mov	r0, r5
 8006984:	ee09 7a10 	vmov	s18, r7
 8006988:	f7ff faca 	bl	8005f20 <acc_base_configuration_time_domain_low_pass_filter_alpha_get>
 800698c:	2800      	cmp	r0, #0
 800698e:	f040 80a8 	bne.w	8006ae2 <acc_pipeline_envelope_assemble+0x402>
 8006992:	f504 7933 	add.w	r9, r4, #716	; 0x2cc
 8006996:	2107      	movs	r1, #7
 8006998:	4648      	mov	r0, r9
 800699a:	f504 7842 	add.w	r8, r4, #776	; 0x308
 800699e:	f002 fbb9 	bl	8009114 <acc_element_abs_init>
 80069a2:	f504 7351 	add.w	r3, r4, #836	; 0x344
 80069a6:	2202      	movs	r2, #2
 80069a8:	2104      	movs	r1, #4
 80069aa:	4640      	mov	r0, r8
 80069ac:	461f      	mov	r7, r3
 80069ae:	ee0a 3a10 	vmov	s20, r3
 80069b2:	f002 fce1 	bl	8009378 <acc_element_converter_init>
 80069b6:	9a03      	ldr	r2, [sp, #12]
 80069b8:	4638      	mov	r0, r7
 80069ba:	6811      	ldr	r1, [r2, #0]
 80069bc:	f002 f958 	bl	8008c70 <acc_element_sink_callback_init>
 80069c0:	ee18 0a10 	vmov	r0, s16
 80069c4:	4651      	mov	r1, sl
 80069c6:	f002 f8a1 	bl	8008b0c <acc_element_connect>
 80069ca:	4650      	mov	r0, sl
 80069cc:	ee19 1a90 	vmov	r1, s19
 80069d0:	f002 f89c 	bl	8008b0c <acc_element_connect>
 80069d4:	4628      	mov	r0, r5
 80069d6:	f7ff fbf7 	bl	80061c8 <acc_base_configuration_noise_level_normalization_get>
 80069da:	2800      	cmp	r0, #0
 80069dc:	d07a      	beq.n	8006ad4 <acc_pipeline_envelope_assemble+0x3f4>
 80069de:	f104 0af4 	add.w	sl, r4, #244	; 0xf4
 80069e2:	ee19 0a90 	vmov	r0, s19
 80069e6:	4651      	mov	r1, sl
 80069e8:	f002 f890 	bl	8008b0c <acc_element_connect>
 80069ec:	ee18 1a90 	vmov	r1, s17
 80069f0:	4650      	mov	r0, sl
 80069f2:	f002 f88b 	bl	8008b0c <acc_element_connect>
 80069f6:	ee18 0a90 	vmov	r0, s17
 80069fa:	ee1a 1a90 	vmov	r1, s21
 80069fe:	f002 f885 	bl	8008b0c <acc_element_connect>
 8006a02:	ee1b 1a10 	vmov	r1, s22
 8006a06:	ee1a 0a90 	vmov	r0, s21
 8006a0a:	f002 f87f 	bl	8008b0c <acc_element_connect>
 8006a0e:	ee19 1a10 	vmov	r1, s18
 8006a12:	ee1b 0a10 	vmov	r0, s22
 8006a16:	f002 f879 	bl	8008b0c <acc_element_connect>
 8006a1a:	ee19 0a10 	vmov	r0, s18
 8006a1e:	4659      	mov	r1, fp
 8006a20:	f002 f874 	bl	8008b0c <acc_element_connect>
 8006a24:	4628      	mov	r0, r5
 8006a26:	2100      	movs	r1, #0
 8006a28:	f7ff fa7a 	bl	8005f20 <acc_base_configuration_time_domain_low_pass_filter_alpha_get>
 8006a2c:	2800      	cmp	r0, #0
 8006a2e:	d04c      	beq.n	8006aca <acc_pipeline_envelope_assemble+0x3ea>
 8006a30:	f504 7523 	add.w	r5, r4, #652	; 0x28c
 8006a34:	4658      	mov	r0, fp
 8006a36:	4629      	mov	r1, r5
 8006a38:	f002 f868 	bl	8008b0c <acc_element_connect>
 8006a3c:	4649      	mov	r1, r9
 8006a3e:	4628      	mov	r0, r5
 8006a40:	f002 f864 	bl	8008b0c <acc_element_connect>
 8006a44:	4648      	mov	r0, r9
 8006a46:	4641      	mov	r1, r8
 8006a48:	f002 f860 	bl	8008b0c <acc_element_connect>
 8006a4c:	ee1a 1a10 	vmov	r1, s20
 8006a50:	4640      	mov	r0, r8
 8006a52:	f002 f85b 	bl	8008b0c <acc_element_connect>
 8006a56:	ee18 0a10 	vmov	r0, s16
 8006a5a:	f003 f8a1 	bl	8009ba0 <acc_element_source_adc_validate>
 8006a5e:	4605      	mov	r5, r0
 8006a60:	2800      	cmp	r0, #0
 8006a62:	d055      	beq.n	8006b10 <acc_pipeline_envelope_assemble+0x430>
 8006a64:	ee18 0a10 	vmov	r0, s16
 8006a68:	f003 f896 	bl	8009b98 <acc_element_source_adc_reset>
 8006a6c:	9804      	ldr	r0, [sp, #16]
 8006a6e:	4909      	ldr	r1, [pc, #36]	; (8006a94 <acc_pipeline_envelope_assemble+0x3b4>)
 8006a70:	4a09      	ldr	r2, [pc, #36]	; (8006a98 <acc_pipeline_envelope_assemble+0x3b8>)
 8006a72:	4b0a      	ldr	r3, [pc, #40]	; (8006a9c <acc_pipeline_envelope_assemble+0x3bc>)
 8006a74:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 8006a78:	4630      	mov	r0, r6
 8006a7a:	e9c6 1201 	strd	r1, r2, [r6, #4]
 8006a7e:	60f3      	str	r3, [r6, #12]
 8006a80:	b00b      	add	sp, #44	; 0x2c
 8006a82:	ecbd 8b08 	vpop	{d8-d11}
 8006a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a8a:	bf00      	nop
 8006a8c:	080135b4 	.word	0x080135b4
 8006a90:	00000000 	.word	0x00000000
 8006a94:	080066b9 	.word	0x080066b9
 8006a98:	08006689 	.word	0x08006689
 8006a9c:	08006691 	.word	0x08006691
 8006aa0:	4630      	mov	r0, r6
 8006aa2:	f7ff fdf5 	bl	8006690 <disassemble>
 8006aa6:	464e      	mov	r6, r9
 8006aa8:	4630      	mov	r0, r6
 8006aaa:	b00b      	add	sp, #44	; 0x2c
 8006aac:	ecbd 8b08 	vpop	{d8-d11}
 8006ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ab4:	f8b4 238a 	ldrh.w	r2, [r4, #906]	; 0x38a
 8006ab8:	9205      	str	r2, [sp, #20]
 8006aba:	2007      	movs	r0, #7
 8006abc:	f002 f81a 	bl	8008af4 <acc_element_sizeof>
 8006ac0:	9a05      	ldr	r2, [sp, #20]
 8006ac2:	fb00 9202 	mla	r2, r0, r2, r9
 8006ac6:	4611      	mov	r1, r2
 8006ac8:	e69c      	b.n	8006804 <acc_pipeline_envelope_assemble+0x124>
 8006aca:	4658      	mov	r0, fp
 8006acc:	4649      	mov	r1, r9
 8006ace:	f002 f81d 	bl	8008b0c <acc_element_connect>
 8006ad2:	e7b7      	b.n	8006a44 <acc_pipeline_envelope_assemble+0x364>
 8006ad4:	ee19 0a90 	vmov	r0, s19
 8006ad8:	ee18 1a90 	vmov	r1, s17
 8006adc:	f002 f816 	bl	8008b0c <acc_element_connect>
 8006ae0:	e789      	b.n	80069f6 <acc_pipeline_envelope_assemble+0x316>
 8006ae2:	ed9d 0a09 	vldr	s0, [sp, #36]	; 0x24
 8006ae6:	2107      	movs	r1, #7
 8006ae8:	f504 7023 	add.w	r0, r4, #652	; 0x28c
 8006aec:	f003 f806 	bl	8009afc <acc_element_time_domain_low_pass_filter_init>
 8006af0:	e74f      	b.n	8006992 <acc_pipeline_envelope_assemble+0x2b2>
 8006af2:	4628      	mov	r0, r5
 8006af4:	f7ff fbae 	bl	8006254 <acc_base_configuration_maximize_signal_attenuation_get>
 8006af8:	2800      	cmp	r0, #0
 8006afa:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8006afc:	bf14      	ite	ne
 8006afe:	231e      	movne	r3, #30
 8006b00:	f44f 7396 	moveq.w	r3, #300	; 0x12c
 8006b04:	2105      	movs	r1, #5
 8006b06:	f104 00f4 	add.w	r0, r4, #244	; 0xf4
 8006b0a:	f002 fe83 	bl	8009814 <acc_element_noise_level_normalization_init>
 8006b0e:	e6f6      	b.n	80068fe <acc_pipeline_envelope_assemble+0x21e>
 8006b10:	4b0d      	ldr	r3, [pc, #52]	; (8006b48 <acc_pipeline_envelope_assemble+0x468>)
 8006b12:	4a0e      	ldr	r2, [pc, #56]	; (8006b4c <acc_pipeline_envelope_assemble+0x46c>)
 8006b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b16:	490e      	ldr	r1, [pc, #56]	; (8006b50 <acc_pipeline_envelope_assemble+0x470>)
 8006b18:	4798      	blx	r3
 8006b1a:	4630      	mov	r0, r6
 8006b1c:	f7ff fdb8 	bl	8006690 <disassemble>
 8006b20:	462e      	mov	r6, r5
 8006b22:	4630      	mov	r0, r6
 8006b24:	b00b      	add	sp, #44	; 0x2c
 8006b26:	ecbd 8b08 	vpop	{d8-d11}
 8006b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b2e:	4630      	mov	r0, r6
 8006b30:	f7ff fd92 	bl	8006658 <acc_rss_integration_mem_free>
 8006b34:	4620      	mov	r0, r4
 8006b36:	f7ff fd8f 	bl	8006658 <acc_rss_integration_mem_free>
 8006b3a:	2600      	movs	r6, #0
 8006b3c:	4630      	mov	r0, r6
 8006b3e:	b00b      	add	sp, #44	; 0x2c
 8006b40:	ecbd 8b08 	vpop	{d8-d11}
 8006b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b48:	20000640 	.word	0x20000640
 8006b4c:	080135c8 	.word	0x080135c8
 8006b50:	080135b4 	.word	0x080135b4

08006b54 <destroy>:
 8006b54:	b510      	push	{r4, lr}
 8006b56:	4604      	mov	r4, r0
 8006b58:	6940      	ldr	r0, [r0, #20]
 8006b5a:	b118      	cbz	r0, 8006b64 <destroy+0x10>
 8006b5c:	f7ff fd7c 	bl	8006658 <acc_rss_integration_mem_free>
 8006b60:	2300      	movs	r3, #0
 8006b62:	6163      	str	r3, [r4, #20]
 8006b64:	bd10      	pop	{r4, pc}
 8006b66:	bf00      	nop

08006b68 <process_data>:
 8006b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b6c:	6944      	ldr	r4, [r0, #20]
 8006b6e:	f8b4 70ce 	ldrh.w	r7, [r4, #206]	; 0xce
 8006b72:	b917      	cbnz	r7, 8006b7a <process_data+0x12>
 8006b74:	2001      	movs	r0, #1
 8006b76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b7a:	f8b4 c0c8 	ldrh.w	ip, [r4, #200]	; 0xc8
 8006b7e:	f8b4 80c4 	ldrh.w	r8, [r4, #196]	; 0xc4
 8006b82:	f8b4 e0cc 	ldrh.w	lr, [r4, #204]	; 0xcc
 8006b86:	461d      	mov	r5, r3
 8006b88:	4616      	mov	r6, r2
 8006b8a:	237c      	movs	r3, #124	; 0x7c
 8006b8c:	680a      	ldr	r2, [r1, #0]
 8006b8e:	fbb3 f3fe 	udiv	r3, r3, lr
 8006b92:	fb03 f30c 	mul.w	r3, r3, ip
 8006b96:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 8006b9a:	eb02 0803 	add.w	r8, r2, r3
 8006b9e:	4642      	mov	r2, r8
 8006ba0:	6801      	ldr	r1, [r0, #0]
 8006ba2:	463b      	mov	r3, r7
 8006ba4:	2001      	movs	r0, #1
 8006ba6:	f002 f875 	bl	8008c94 <acc_probes_execute_uint16>
 8006baa:	f8b4 10ce 	ldrh.w	r1, [r4, #206]	; 0xce
 8006bae:	4640      	mov	r0, r8
 8006bb0:	f001 ff5a 	bl	8008a68 <acc_alg_cca_u16_calculate>
 8006bb4:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8006bf0 <process_data+0x88>
 8006bb8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006bba:	ed85 0a01 	vstr	s0, [r5, #4]
 8006bbe:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8006bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bc6:	bfcc      	ite	gt
 8006bc8:	2201      	movgt	r2, #1
 8006bca:	2200      	movle	r2, #0
 8006bcc:	702a      	strb	r2, [r5, #0]
 8006bce:	b14b      	cbz	r3, 8006be4 <process_data+0x7c>
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	f8b4 10ce 	ldrh.w	r1, [r4, #206]	; 0xce
 8006bd6:	6833      	ldr	r3, [r6, #0]
 8006bd8:	722a      	strb	r2, [r5, #8]
 8006bda:	1a5b      	subs	r3, r3, r1
 8006bdc:	6033      	str	r3, [r6, #0]
 8006bde:	2001      	movs	r0, #1
 8006be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006be4:	f894 20c0 	ldrb.w	r2, [r4, #192]	; 0xc0
 8006be8:	f082 0201 	eor.w	r2, r2, #1
 8006bec:	e7f1      	b.n	8006bd2 <process_data+0x6a>
 8006bee:	bf00      	nop
 8006bf0:	42640000 	.word	0x42640000

08006bf4 <transfer_data>:
 8006bf4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006bf8:	6944      	ldr	r4, [r0, #20]
 8006bfa:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
 8006bfe:	b089      	sub	sp, #36	; 0x24
 8006c00:	4680      	mov	r8, r0
 8006c02:	460f      	mov	r7, r1
 8006c04:	4691      	mov	r9, r2
 8006c06:	b90b      	cbnz	r3, 8006c0c <transfer_data+0x18>
 8006c08:	f8a4 30c6 	strh.w	r3, [r4, #198]	; 0xc6
 8006c0c:	f8b4 20ce 	ldrh.w	r2, [r4, #206]	; 0xce
 8006c10:	f8b4 50c8 	ldrh.w	r5, [r4, #200]	; 0xc8
 8006c14:	f8b4 30cc 	ldrh.w	r3, [r4, #204]	; 0xcc
 8006c18:	a902      	add	r1, sp, #8
 8006c1a:	4620      	mov	r0, r4
 8006c1c:	267c      	movs	r6, #124	; 0x7c
 8006c1e:	fbb6 f3f3 	udiv	r3, r6, r3
 8006c22:	fb03 2505 	mla	r5, r3, r5, r2
 8006c26:	f005 f925 	bl	800be74 <acc_cpd_linear_sweep_get_info>
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	9a02      	ldr	r2, [sp, #8]
 8006c2e:	f8b4 10c6 	ldrh.w	r1, [r4, #198]	; 0xc6
 8006c32:	f8d8 0000 	ldr.w	r0, [r8]
 8006c36:	442a      	add	r2, r5
 8006c38:	4419      	add	r1, r3
 8006c3a:	f001 fdd7 	bl	80087ec <acc_sensor_protocol_r2_transfer_data>
 8006c3e:	f104 02bc 	add.w	r2, r4, #188	; 0xbc
 8006c42:	ab01      	add	r3, sp, #4
 8006c44:	4621      	mov	r1, r4
 8006c46:	4680      	mov	r8, r0
 8006c48:	f005 f92c 	bl	800bea4 <acc_cpd_linear_sweep_check>
 8006c4c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006c50:	3b00      	subs	r3, #0
 8006c52:	bf18      	it	ne
 8006c54:	2301      	movne	r3, #1
 8006c56:	a902      	add	r1, sp, #8
 8006c58:	f889 3000 	strb.w	r3, [r9]
 8006c5c:	4620      	mov	r0, r4
 8006c5e:	f005 f909 	bl	800be74 <acc_cpd_linear_sweep_get_info>
 8006c62:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
 8006c66:	6838      	ldr	r0, [r7, #0]
 8006c68:	9902      	ldr	r1, [sp, #8]
 8006c6a:	006a      	lsls	r2, r5, #1
 8006c6c:	eb08 0141 	add.w	r1, r8, r1, lsl #1
 8006c70:	4418      	add	r0, r3
 8006c72:	f007 fe2b 	bl	800e8cc <memmove>
 8006c76:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
 8006c7a:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
 8006c7e:	f8b4 10cc 	ldrh.w	r1, [r4, #204]	; 0xcc
 8006c82:	fbb6 f6f1 	udiv	r6, r6, r1
 8006c86:	fb03 f306 	mul.w	r3, r3, r6
 8006c8a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8006c8e:	4628      	mov	r0, r5
 8006c90:	f8a4 30c6 	strh.w	r3, [r4, #198]	; 0xc6
 8006c94:	f8a4 20c4 	strh.w	r2, [r4, #196]	; 0xc4
 8006c98:	b009      	add	sp, #36	; 0x24
 8006c9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006c9e:	bf00      	nop

08006ca0 <measure_noise>:
 8006ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ca4:	b0b7      	sub	sp, #220	; 0xdc
 8006ca6:	4604      	mov	r4, r0
 8006ca8:	4688      	mov	r8, r1
 8006caa:	4616      	mov	r6, r2
 8006cac:	f7ff fce6 	bl	800667c <acc_rss_integration_log_level>
 8006cb0:	2803      	cmp	r0, #3
 8006cb2:	d905      	bls.n	8006cc0 <measure_noise+0x20>
 8006cb4:	4b41      	ldr	r3, [pc, #260]	; (8006dbc <measure_noise+0x11c>)
 8006cb6:	4a42      	ldr	r2, [pc, #264]	; (8006dc0 <measure_noise+0x120>)
 8006cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cba:	4942      	ldr	r1, [pc, #264]	; (8006dc4 <measure_noise+0x124>)
 8006cbc:	2004      	movs	r0, #4
 8006cbe:	4798      	blx	r3
 8006cc0:	f8d4 9014 	ldr.w	r9, [r4, #20]
 8006cc4:	f8d4 a000 	ldr.w	sl, [r4]
 8006cc8:	4649      	mov	r1, r9
 8006cca:	22bc      	movs	r2, #188	; 0xbc
 8006ccc:	a807      	add	r0, sp, #28
 8006cce:	f007 fea5 	bl	800ea1c <memcpy>
 8006cd2:	9d30      	ldr	r5, [sp, #192]	; 0xc0
 8006cd4:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8006cd8:	f8d8 1000 	ldr.w	r1, [r8]
 8006cdc:	f8b9 b0cc 	ldrh.w	fp, [r9, #204]	; 0xcc
 8006ce0:	00ad      	lsls	r5, r5, #2
 8006ce2:	1e6f      	subs	r7, r5, #1
 8006ce4:	972c      	str	r7, [sp, #176]	; 0xb0
 8006ce6:	2702      	movs	r7, #2
 8006ce8:	2400      	movs	r4, #0
 8006cea:	ab07      	add	r3, sp, #28
 8006cec:	972d      	str	r7, [sp, #180]	; 0xb4
 8006cee:	4650      	mov	r0, sl
 8006cf0:	2701      	movs	r7, #1
 8006cf2:	971d      	str	r7, [sp, #116]	; 0x74
 8006cf4:	9422      	str	r4, [sp, #136]	; 0x88
 8006cf6:	941c      	str	r4, [sp, #112]	; 0x70
 8006cf8:	f88d 40c8 	strb.w	r4, [sp, #200]	; 0xc8
 8006cfc:	9434      	str	r4, [sp, #208]	; 0xd0
 8006cfe:	f004 fb2b 	bl	800b358 <acc_cpd_linear_sweep_load_program>
 8006d02:	4650      	mov	r0, sl
 8006d04:	f005 f860 	bl	800bdc8 <acc_cpd_linear_sweep_run_program>
 8006d08:	4650      	mov	r0, sl
 8006d0a:	466b      	mov	r3, sp
 8006d0c:	2264      	movs	r2, #100	; 0x64
 8006d0e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006d12:	f001 fc21 	bl	8008558 <acc_sensor_protocol_r2_wait_for_event>
 8006d16:	4607      	mov	r7, r0
 8006d18:	b918      	cbnz	r0, 8006d22 <measure_noise+0x82>
 8006d1a:	4638      	mov	r0, r7
 8006d1c:	b037      	add	sp, #220	; 0xdc
 8006d1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d22:	a901      	add	r1, sp, #4
 8006d24:	4648      	mov	r0, r9
 8006d26:	237c      	movs	r3, #124	; 0x7c
 8006d28:	f8d8 8000 	ldr.w	r8, [r8]
 8006d2c:	fbb3 fbfb 	udiv	fp, r3, fp
 8006d30:	b2ad      	uxth	r5, r5
 8006d32:	f005 f89f 	bl	800be74 <acc_cpd_linear_sweep_get_info>
 8006d36:	9a01      	ldr	r2, [sp, #4]
 8006d38:	fb0b f505 	mul.w	r5, fp, r5
 8006d3c:	4641      	mov	r1, r8
 8006d3e:	442a      	add	r2, r5
 8006d40:	4650      	mov	r0, sl
 8006d42:	f001 fd53 	bl	80087ec <acc_sensor_protocol_r2_transfer_data>
 8006d46:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006d4a:	4680      	mov	r8, r0
 8006d4c:	4650      	mov	r0, sl
 8006d4e:	f001 fc9b 	bl	8008688 <acc_sensor_protocol_r2_stop>
 8006d52:	4648      	mov	r0, r9
 8006d54:	a901      	add	r1, sp, #4
 8006d56:	f005 f88d 	bl	800be74 <acc_cpd_linear_sweep_get_info>
 8006d5a:	9801      	ldr	r0, [sp, #4]
 8006d5c:	2d0e      	cmp	r5, #14
 8006d5e:	eb08 0040 	add.w	r0, r8, r0, lsl #1
 8006d62:	d91c      	bls.n	8006d9e <measure_noise+0xfe>
 8006d64:	006a      	lsls	r2, r5, #1
 8006d66:	3a02      	subs	r2, #2
 8006d68:	f100 011a 	add.w	r1, r0, #26
 8006d6c:	eb00 0e02 	add.w	lr, r0, r2
 8006d70:	460b      	mov	r3, r1
 8006d72:	f833 cf02 	ldrh.w	ip, [r3, #2]!
 8006d76:	459e      	cmp	lr, r3
 8006d78:	4464      	add	r4, ip
 8006d7a:	d1fa      	bne.n	8006d72 <measure_noise+0xd2>
 8006d7c:	4410      	add	r0, r2
 8006d7e:	2200      	movs	r2, #0
 8006d80:	3d0e      	subs	r5, #14
 8006d82:	fbb4 f4f5 	udiv	r4, r4, r5
 8006d86:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 8006d8a:	1b1b      	subs	r3, r3, r4
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	bfb8      	it	lt
 8006d90:	425b      	neglt	r3, r3
 8006d92:	4288      	cmp	r0, r1
 8006d94:	441a      	add	r2, r3
 8006d96:	d1f6      	bne.n	8006d86 <measure_noise+0xe6>
 8006d98:	fbb2 f4f5 	udiv	r4, r2, r5
 8006d9c:	b2a4      	uxth	r4, r4
 8006d9e:	8034      	strh	r4, [r6, #0]
 8006da0:	f7ff fc6c 	bl	800667c <acc_rss_integration_log_level>
 8006da4:	2803      	cmp	r0, #3
 8006da6:	d9b8      	bls.n	8006d1a <measure_noise+0x7a>
 8006da8:	4b04      	ldr	r3, [pc, #16]	; (8006dbc <measure_noise+0x11c>)
 8006daa:	4a07      	ldr	r2, [pc, #28]	; (8006dc8 <measure_noise+0x128>)
 8006dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dae:	4905      	ldr	r1, [pc, #20]	; (8006dc4 <measure_noise+0x124>)
 8006db0:	2004      	movs	r0, #4
 8006db2:	4798      	blx	r3
 8006db4:	4638      	mov	r0, r7
 8006db6:	b037      	add	sp, #220	; 0xdc
 8006db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dbc:	20000640 	.word	0x20000640
 8006dc0:	080135e8 	.word	0x080135e8
 8006dc4:	0801360c 	.word	0x0801360c
 8006dc8:	08013620 	.word	0x08013620

08006dcc <calibrate>:
 8006dcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006dd0:	b09b      	sub	sp, #108	; 0x6c
 8006dd2:	4604      	mov	r4, r0
 8006dd4:	460d      	mov	r5, r1
 8006dd6:	4616      	mov	r6, r2
 8006dd8:	461f      	mov	r7, r3
 8006dda:	f7ff fc4f 	bl	800667c <acc_rss_integration_log_level>
 8006dde:	2803      	cmp	r0, #3
 8006de0:	d905      	bls.n	8006dee <calibrate+0x22>
 8006de2:	4b46      	ldr	r3, [pc, #280]	; (8006efc <calibrate+0x130>)
 8006de4:	4a46      	ldr	r2, [pc, #280]	; (8006f00 <calibrate+0x134>)
 8006de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006de8:	4946      	ldr	r1, [pc, #280]	; (8006f04 <calibrate+0x138>)
 8006dea:	2004      	movs	r0, #4
 8006dec:	4798      	blx	r3
 8006dee:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8006df2:	6824      	ldr	r4, [r4, #0]
 8006df4:	2300      	movs	r3, #0
 8006df6:	f8c8 30bc 	str.w	r3, [r8, #188]	; 0xbc
 8006dfa:	f7ff fb8f 	bl	800651c <acc_rss_integration_get_sensor_reference_frequency>
 8006dfe:	a812      	add	r0, sp, #72	; 0x48
 8006e00:	a902      	add	r1, sp, #8
 8006e02:	ed8d 0a12 	vstr	s0, [sp, #72]	; 0x48
 8006e06:	f001 fffb 	bl	8008e00 <acc_cpd_pll_divisors_calculate>
 8006e0a:	b920      	cbnz	r0, 8006e16 <calibrate+0x4a>
 8006e0c:	2400      	movs	r4, #0
 8006e0e:	4620      	mov	r0, r4
 8006e10:	b01b      	add	sp, #108	; 0x6c
 8006e12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006e16:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8006e1a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8006e1e:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8006e22:	f8bd c010 	ldrh.w	ip, [sp, #16]
 8006e26:	9207      	str	r2, [sp, #28]
 8006e28:	e9cd 4305 	strd	r4, r3, [sp, #20]
 8006e2c:	9008      	str	r0, [sp, #32]
 8006e2e:	6869      	ldr	r1, [r5, #4]
 8006e30:	6828      	ldr	r0, [r5, #0]
 8006e32:	f8ad c024 	strh.w	ip, [sp, #36]	; 0x24
 8006e36:	466b      	mov	r3, sp
 8006e38:	aa05      	add	r2, sp, #20
 8006e3a:	f002 ff0d 	bl	8009c58 <acc_cpd_cbank_and_vana_calibration>
 8006e3e:	2800      	cmp	r0, #0
 8006e40:	d0e4      	beq.n	8006e0c <calibrate+0x40>
 8006e42:	f8b8 90ce 	ldrh.w	r9, [r8, #206]	; 0xce
 8006e46:	f898 10d0 	ldrb.w	r1, [r8, #208]	; 0xd0
 8006e4a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8006e4e:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
 8006e52:	f1b9 0000 	subs.w	r0, r9, #0
 8006e56:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8006e5a:	920b      	str	r2, [sp, #44]	; 0x2c
 8006e5c:	bf18      	it	ne
 8006e5e:	2001      	movne	r0, #1
 8006e60:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8006e64:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
 8006e68:	910c      	str	r1, [sp, #48]	; 0x30
 8006e6a:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8006e6e:	9900      	ldr	r1, [sp, #0]
 8006e70:	940a      	str	r4, [sp, #40]	; 0x28
 8006e72:	900d      	str	r0, [sp, #52]	; 0x34
 8006e74:	f89d 4004 	ldrb.w	r4, [sp, #4]
 8006e78:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8006e7c:	910f      	str	r1, [sp, #60]	; 0x3c
 8006e7e:	ab12      	add	r3, sp, #72	; 0x48
 8006e80:	e9d5 0100 	ldrd	r0, r1, [r5]
 8006e84:	aa0a      	add	r2, sp, #40	; 0x28
 8006e86:	9410      	str	r4, [sp, #64]	; 0x40
 8006e88:	f8ad 9046 	strh.w	r9, [sp, #70]	; 0x46
 8006e8c:	f003 f936 	bl	800a0fc <acc_cpd_dll_calibration>
 8006e90:	4604      	mov	r4, r0
 8006e92:	f1b9 0f00 	cmp.w	r9, #0
 8006e96:	d004      	beq.n	8006ea2 <calibrate+0xd6>
 8006e98:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006e9a:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
 8006e9e:	607a      	str	r2, [r7, #4]
 8006ea0:	703b      	strb	r3, [r7, #0]
 8006ea2:	2c00      	cmp	r4, #0
 8006ea4:	d0b2      	beq.n	8006e0c <calibrate+0x40>
 8006ea6:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	; 0x48
 8006eaa:	9b00      	ldr	r3, [sp, #0]
 8006eac:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8006eb0:	80b3      	strh	r3, [r6, #4]
 8006eb2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006eb4:	80f0      	strh	r0, [r6, #6]
 8006eb6:	8131      	strh	r1, [r6, #8]
 8006eb8:	f8bd 0054 	ldrh.w	r0, [sp, #84]	; 0x54
 8006ebc:	f8bd 1056 	ldrh.w	r1, [sp, #86]	; 0x56
 8006ec0:	8172      	strh	r2, [r6, #10]
 8006ec2:	81b3      	strh	r3, [r6, #12]
 8006ec4:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
 8006ec8:	81f0      	strh	r0, [r6, #14]
 8006eca:	2306      	movs	r3, #6
 8006ecc:	8231      	strh	r1, [r6, #16]
 8006ece:	8272      	strh	r2, [r6, #18]
 8006ed0:	6033      	str	r3, [r6, #0]
 8006ed2:	f7ff fbd3 	bl	800667c <acc_rss_integration_log_level>
 8006ed6:	2803      	cmp	r0, #3
 8006ed8:	d905      	bls.n	8006ee6 <calibrate+0x11a>
 8006eda:	4b08      	ldr	r3, [pc, #32]	; (8006efc <calibrate+0x130>)
 8006edc:	4a0a      	ldr	r2, [pc, #40]	; (8006f08 <calibrate+0x13c>)
 8006ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ee0:	4908      	ldr	r1, [pc, #32]	; (8006f04 <calibrate+0x138>)
 8006ee2:	2004      	movs	r0, #4
 8006ee4:	4798      	blx	r3
 8006ee6:	f7ff fbc9 	bl	800667c <acc_rss_integration_log_level>
 8006eea:	2801      	cmp	r0, #1
 8006eec:	d98f      	bls.n	8006e0e <calibrate+0x42>
 8006eee:	4b03      	ldr	r3, [pc, #12]	; (8006efc <calibrate+0x130>)
 8006ef0:	4a06      	ldr	r2, [pc, #24]	; (8006f0c <calibrate+0x140>)
 8006ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ef4:	4903      	ldr	r1, [pc, #12]	; (8006f04 <calibrate+0x138>)
 8006ef6:	2002      	movs	r0, #2
 8006ef8:	4798      	blx	r3
 8006efa:	e788      	b.n	8006e0e <calibrate+0x42>
 8006efc:	20000640 	.word	0x20000640
 8006f00:	08013640 	.word	0x08013640
 8006f04:	0801360c 	.word	0x0801360c
 8006f08:	08013660 	.word	0x08013660
 8006f0c:	0801367c 	.word	0x0801367c

08006f10 <set_calibration_context>:
 8006f10:	b570      	push	{r4, r5, r6, lr}
 8006f12:	680b      	ldr	r3, [r1, #0]
 8006f14:	2b06      	cmp	r3, #6
 8006f16:	b08c      	sub	sp, #48	; 0x30
 8006f18:	d00b      	beq.n	8006f32 <set_calibration_context+0x22>
 8006f1a:	4929      	ldr	r1, [pc, #164]	; (8006fc0 <set_calibration_context+0xb0>)
 8006f1c:	4a29      	ldr	r2, [pc, #164]	; (8006fc4 <set_calibration_context+0xb4>)
 8006f1e:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 8006f20:	4929      	ldr	r1, [pc, #164]	; (8006fc8 <set_calibration_context+0xb8>)
 8006f22:	2006      	movs	r0, #6
 8006f24:	9000      	str	r0, [sp, #0]
 8006f26:	2000      	movs	r0, #0
 8006f28:	47a0      	blx	r4
 8006f2a:	2600      	movs	r6, #0
 8006f2c:	4630      	mov	r0, r6
 8006f2e:	b00c      	add	sp, #48	; 0x30
 8006f30:	bd70      	pop	{r4, r5, r6, pc}
 8006f32:	460d      	mov	r5, r1
 8006f34:	4604      	mov	r4, r0
 8006f36:	f7ff faf1 	bl	800651c <acc_rss_integration_get_sensor_reference_frequency>
 8006f3a:	a806      	add	r0, sp, #24
 8006f3c:	a903      	add	r1, sp, #12
 8006f3e:	ed8d 0a06 	vstr	s0, [sp, #24]
 8006f42:	f001 ff5d 	bl	8008e00 <acc_cpd_pll_divisors_calculate>
 8006f46:	4606      	mov	r6, r0
 8006f48:	2800      	cmp	r0, #0
 8006f4a:	d0ef      	beq.n	8006f2c <set_calibration_context+0x1c>
 8006f4c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8006f50:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8006f54:	6063      	str	r3, [r4, #4]
 8006f56:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8006f5a:	60a2      	str	r2, [r4, #8]
 8006f5c:	6023      	str	r3, [r4, #0]
 8006f5e:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8006f62:	88ab      	ldrh	r3, [r5, #4]
 8006f64:	81a2      	strh	r2, [r4, #12]
 8006f66:	88ea      	ldrh	r2, [r5, #6]
 8006f68:	6123      	str	r3, [r4, #16]
 8006f6a:	892b      	ldrh	r3, [r5, #8]
 8006f6c:	6162      	str	r2, [r4, #20]
 8006f6e:	896a      	ldrh	r2, [r5, #10]
 8006f70:	61a3      	str	r3, [r4, #24]
 8006f72:	89ab      	ldrh	r3, [r5, #12]
 8006f74:	61e2      	str	r2, [r4, #28]
 8006f76:	8a2a      	ldrh	r2, [r5, #16]
 8006f78:	6223      	str	r3, [r4, #32]
 8006f7a:	8a6b      	ldrh	r3, [r5, #18]
 8006f7c:	89e8      	ldrh	r0, [r5, #14]
 8006f7e:	84a2      	strh	r2, [r4, #36]	; 0x24
 8006f80:	84e3      	strh	r3, [r4, #38]	; 0x26
 8006f82:	aa06      	add	r2, sp, #24
 8006f84:	217c      	movs	r1, #124	; 0x7c
 8006f86:	f002 f821 	bl	8008fcc <acc_dll_calculate_area_settings>
 8006f8a:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 8006f8e:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 8006f92:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8006f96:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8006f9a:	62a0      	str	r0, [r4, #40]	; 0x28
 8006f9c:	62e1      	str	r1, [r4, #44]	; 0x2c
 8006f9e:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
 8006fa2:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8006fa6:	6322      	str	r2, [r4, #48]	; 0x30
 8006fa8:	6363      	str	r3, [r4, #52]	; 0x34
 8006faa:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8006fae:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8006fb2:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
 8006fb6:	4630      	mov	r0, r6
 8006fb8:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
 8006fbc:	b00c      	add	sp, #48	; 0x30
 8006fbe:	bd70      	pop	{r4, r5, r6, pc}
 8006fc0:	20000640 	.word	0x20000640
 8006fc4:	0801369c 	.word	0x0801369c
 8006fc8:	0801360c 	.word	0x0801360c

08006fcc <get_package_range_coarse_max>:
 8006fcc:	b530      	push	{r4, r5, lr}
 8006fce:	f8b0 50cc 	ldrh.w	r5, [r0, #204]	; 0xcc
 8006fd2:	b087      	sub	sp, #28
 8006fd4:	b185      	cbz	r5, 8006ff8 <get_package_range_coarse_max+0x2c>
 8006fd6:	4604      	mov	r4, r0
 8006fd8:	4669      	mov	r1, sp
 8006fda:	f004 ff4b 	bl	800be74 <acc_cpd_linear_sweep_get_info>
 8006fde:	9b00      	ldr	r3, [sp, #0]
 8006fe0:	f8b4 00ce 	ldrh.w	r0, [r4, #206]	; 0xce
 8006fe4:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8006fe8:	1a1b      	subs	r3, r3, r0
 8006fea:	207c      	movs	r0, #124	; 0x7c
 8006fec:	fbb0 f0f5 	udiv	r0, r0, r5
 8006ff0:	fbb3 f0f0 	udiv	r0, r3, r0
 8006ff4:	b007      	add	sp, #28
 8006ff6:	bd30      	pop	{r4, r5, pc}
 8006ff8:	4802      	ldr	r0, [pc, #8]	; (8007004 <get_package_range_coarse_max+0x38>)
 8006ffa:	f44f 71a9 	mov.w	r1, #338	; 0x152
 8006ffe:	f001 fd61 	bl	8008ac4 <acc_assert_fail>
 8007002:	bf00      	nop
 8007004:	0801360c 	.word	0x0801360c

08007008 <initialize>:
 8007008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800700c:	460d      	mov	r5, r1
 800700e:	f891 1032 	ldrb.w	r1, [r1, #50]	; 0x32
 8007012:	2906      	cmp	r1, #6
 8007014:	b08f      	sub	sp, #60	; 0x3c
 8007016:	4606      	mov	r6, r0
 8007018:	4690      	mov	r8, r2
 800701a:	461f      	mov	r7, r3
 800701c:	d00d      	beq.n	800703a <initialize+0x32>
 800701e:	2909      	cmp	r1, #9
 8007020:	d00b      	beq.n	800703a <initialize+0x32>
 8007022:	4ba8      	ldr	r3, [pc, #672]	; (80072c4 <initialize+0x2bc>)
 8007024:	4aa8      	ldr	r2, [pc, #672]	; (80072c8 <initialize+0x2c0>)
 8007026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007028:	49a8      	ldr	r1, [pc, #672]	; (80072cc <initialize+0x2c4>)
 800702a:	2000      	movs	r0, #0
 800702c:	4798      	blx	r3
 800702e:	f04f 0900 	mov.w	r9, #0
 8007032:	4648      	mov	r0, r9
 8007034:	b00f      	add	sp, #60	; 0x3c
 8007036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800703a:	aa06      	add	r2, sp, #24
 800703c:	f10d 0116 	add.w	r1, sp, #22
 8007040:	4628      	mov	r0, r5
 8007042:	6974      	ldr	r4, [r6, #20]
 8007044:	f7ff f91a 	bl	800627c <acc_base_configuration_cca_get>
 8007048:	2800      	cmp	r0, #0
 800704a:	d03f      	beq.n	80070cc <initialize+0xc4>
 800704c:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8007050:	f89d 0016 	ldrb.w	r0, [sp, #22]
 8007054:	f8a4 30ce 	strh.w	r3, [r4, #206]	; 0xce
 8007058:	f884 00d0 	strb.w	r0, [r4, #208]	; 0xd0
 800705c:	4628      	mov	r0, r5
 800705e:	f7ff f89f 	bl	80061a0 <acc_base_configuration_downsampling_factor_get>
 8007062:	2300      	movs	r3, #0
 8007064:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
 8007068:	f8a4 00cc 	strh.w	r0, [r4, #204]	; 0xcc
 800706c:	4628      	mov	r0, r5
 800706e:	f7fe fef9 	bl	8005e64 <acc_base_configuration_tx_disable_get>
 8007072:	f04f 0b01 	mov.w	fp, #1
 8007076:	f884 00c0 	strb.w	r0, [r4, #192]	; 0xc0
 800707a:	f884 b0ad 	strb.w	fp, [r4, #173]	; 0xad
 800707e:	4620      	mov	r0, r4
 8007080:	f7ff ffa4 	bl	8006fcc <get_package_range_coarse_max>
 8007084:	4b92      	ldr	r3, [pc, #584]	; (80072d0 <initialize+0x2c8>)
 8007086:	b280      	uxth	r0, r0
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	9002      	str	r0, [sp, #8]
 800708c:	237c      	movs	r3, #124	; 0x7c
 800708e:	f106 0a04 	add.w	sl, r6, #4
 8007092:	9201      	str	r2, [sp, #4]
 8007094:	9300      	str	r3, [sp, #0]
 8007096:	4652      	mov	r2, sl
 8007098:	463b      	mov	r3, r7
 800709a:	4641      	mov	r1, r8
 800709c:	4628      	mov	r0, r5
 800709e:	f000 fa95 	bl	80075cc <acc_radar_engine_common_sweep_w_dly_initialize_range>
 80070a2:	4681      	mov	r9, r0
 80070a4:	2800      	cmp	r0, #0
 80070a6:	d0c4      	beq.n	8007032 <initialize+0x2a>
 80070a8:	4628      	mov	r0, r5
 80070aa:	f7ff f815 	bl	80060d8 <acc_base_configuration_sweep_type_debug_get>
 80070ae:	b980      	cbnz	r0, 80070d2 <initialize+0xca>
 80070b0:	e9c4 0b12 	strd	r0, fp, [r4, #72]	; 0x48
 80070b4:	2300      	movs	r3, #0
 80070b6:	6523      	str	r3, [r4, #80]	; 0x50
 80070b8:	4628      	mov	r0, r5
 80070ba:	f7fe ff8d 	bl	8005fd8 <acc_base_configuration_repetition_mode_get>
 80070be:	2803      	cmp	r0, #3
 80070c0:	f200 80d8 	bhi.w	8007274 <initialize+0x26c>
 80070c4:	e8df f000 	tbb	[pc, r0]
 80070c8:	0abfd9d1 	.word	0x0abfd9d1
 80070cc:	f8a4 00ce 	strh.w	r0, [r4, #206]	; 0xce
 80070d0:	e7c2      	b.n	8007058 <initialize+0x50>
 80070d2:	2300      	movs	r3, #0
 80070d4:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
 80070d8:	64e3      	str	r3, [r4, #76]	; 0x4c
 80070da:	e7eb      	b.n	80070b4 <initialize+0xac>
 80070dc:	4628      	mov	r0, r5
 80070de:	f10d 0b20 	add.w	fp, sp, #32
 80070e2:	f7fe ff81 	bl	8005fe8 <acc_base_configuration_update_rate_get>
 80070e6:	a907      	add	r1, sp, #28
 80070e8:	4658      	mov	r0, fp
 80070ea:	f000 fa27 	bl	800753c <acc_radar_engine_common_frequency_to_main_clk>
 80070ee:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 80070f2:	2301      	movs	r3, #1
 80070f4:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
 80070f8:	e9c4 1217 	strd	r1, r2, [r4, #92]	; 0x5c
 80070fc:	4628      	mov	r0, r5
 80070fe:	f7fe fea1 	bl	8005e44 <acc_base_configuration_power_save_mode_get>
 8007102:	2804      	cmp	r0, #4
 8007104:	d807      	bhi.n	8007116 <initialize+0x10e>
 8007106:	e8df f000 	tbb	[pc, r0]
 800710a:	0303      	.short	0x0303
 800710c:	c1c5      	.short	0xc1c5
 800710e:	03          	.byte	0x03
 800710f:	00          	.byte	0x00
 8007110:	2301      	movs	r3, #1
 8007112:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
 8007116:	f10d 021a 	add.w	r2, sp, #26
 800711a:	f10d 0117 	add.w	r1, sp, #23
 800711e:	4628      	mov	r0, r5
 8007120:	f7ff f8ac 	bl	800627c <acc_base_configuration_cca_get>
 8007124:	2800      	cmp	r0, #0
 8007126:	f000 80ba 	beq.w	800729e <initialize+0x296>
 800712a:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 800712e:	2201      	movs	r2, #1
 8007130:	3b01      	subs	r3, #1
 8007132:	e9c4 232d 	strd	r2, r3, [r4, #180]	; 0xb4
 8007136:	4628      	mov	r0, r5
 8007138:	f7fe fe94 	bl	8005e64 <acc_base_configuration_tx_disable_get>
 800713c:	2800      	cmp	r0, #0
 800713e:	f000 80bb 	beq.w	80072b8 <initialize+0x2b0>
 8007142:	2000      	movs	r0, #0
 8007144:	66e0      	str	r0, [r4, #108]	; 0x6c
 8007146:	4628      	mov	r0, r5
 8007148:	f7fe fea0 	bl	8005e8c <acc_base_configuration_decrease_tx_emission_get>
 800714c:	f080 0001 	eor.w	r0, r0, #1
 8007150:	2301      	movs	r3, #1
 8007152:	b2c0      	uxtb	r0, r0
 8007154:	e9c4 031c 	strd	r0, r3, [r4, #112]	; 0x70
 8007158:	4628      	mov	r0, r5
 800715a:	f7fe feab 	bl	8005eb4 <acc_base_configuration_hw_accelerated_average_samples_get>
 800715e:	3801      	subs	r0, #1
 8007160:	67a0      	str	r0, [r4, #120]	; 0x78
 8007162:	4628      	mov	r0, r5
 8007164:	f7fe ff58 	bl	8006018 <acc_base_configuration_gain_get>
 8007168:	67e0      	str	r0, [r4, #124]	; 0x7c
 800716a:	4628      	mov	r0, r5
 800716c:	f7fe ff64 	bl	8006038 <acc_base_configuration_integrator_get>
 8007170:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
 8007174:	4628      	mov	r0, r5
 8007176:	f7fe ff87 	bl	8006088 <acc_base_configuration_integrator_ramp_up_get>
 800717a:	3801      	subs	r0, #1
 800717c:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 8007180:	4628      	mov	r0, r5
 8007182:	f7fe ff6d 	bl	8006060 <acc_base_configuration_wg_duration_get>
 8007186:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 800718a:	4628      	mov	r0, r5
 800718c:	f7fe ffea 	bl	8006164 <acc_base_configuration_bba_fast_refresh_disable_get>
 8007190:	f884 008d 	strb.w	r0, [r4, #141]	; 0x8d
 8007194:	4628      	mov	r0, r5
 8007196:	f7ff f803 	bl	80061a0 <acc_base_configuration_downsampling_factor_get>
 800719a:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
 800719e:	4628      	mov	r0, r5
 80071a0:	f7fe ffcc 	bl	800613c <acc_base_configuration_bba_reset_clocksync_perturbation_get>
 80071a4:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c
 80071a8:	4628      	mov	r0, r5
 80071aa:	f7fe ffd1 	bl	8006150 <acc_base_configuration_bba_linear_resync_perturbation_get>
 80071ae:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
 80071b2:	4628      	mov	r0, r5
 80071b4:	f7ff f826 	bl	8006204 <acc_base_configuration_asynchronous_measurement_get>
 80071b8:	88b2      	ldrh	r2, [r6, #4]
 80071ba:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 80071be:	f080 0001 	eor.w	r0, r0, #1
 80071c2:	2301      	movs	r3, #1
 80071c4:	f884 00ac 	strb.w	r0, [r4, #172]	; 0xac
 80071c8:	f884 30ad 	strb.w	r3, [r4, #173]	; 0xad
 80071cc:	4650      	mov	r0, sl
 80071ce:	f000 fcc9 	bl	8007b64 <acc_radar_engine_common_sweep_w_dly_stitching_required>
 80071d2:	2800      	cmp	r0, #0
 80071d4:	d16c      	bne.n	80072b0 <initialize+0x2a8>
 80071d6:	8970      	ldrh	r0, [r6, #10]
 80071d8:	f9b6 3008 	ldrsh.w	r3, [r6, #8]
 80071dc:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 80071e0:	3801      	subs	r0, #1
 80071e2:	88f3      	ldrh	r3, [r6, #6]
 80071e4:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 80071e8:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
 80071ec:	f7ff f996 	bl	800651c <acc_rss_integration_get_sensor_reference_frequency>
 80071f0:	893b      	ldrh	r3, [r7, #8]
 80071f2:	ed84 0a2c 	vstr	s0, [r4, #176]	; 0xb0
 80071f6:	f44f 7261 	mov.w	r2, #900	; 0x384
 80071fa:	f8a8 2014 	strh.w	r2, [r8, #20]
 80071fe:	f8b4 10cc 	ldrh.w	r1, [r4, #204]	; 0xcc
 8007202:	227c      	movs	r2, #124	; 0x7c
 8007204:	fbb2 f2f1 	udiv	r2, r2, r1
 8007208:	fb03 f302 	mul.w	r3, r3, r2
 800720c:	2200      	movs	r2, #0
 800720e:	817b      	strh	r3, [r7, #10]
 8007210:	833a      	strh	r2, [r7, #24]
 8007212:	4659      	mov	r1, fp
 8007214:	4620      	mov	r0, r4
 8007216:	f004 fe2d 	bl	800be74 <acc_cpd_linear_sweep_get_info>
 800721a:	465a      	mov	r2, fp
 800721c:	6831      	ldr	r1, [r6, #0]
 800721e:	2301      	movs	r3, #1
 8007220:	2013      	movs	r0, #19
 8007222:	f001 fd37 	bl	8008c94 <acc_probes_execute_uint16>
 8007226:	f000 fcf9 	bl	8007c1c <acc_sensor_r2_get_max_header_length>
 800722a:	f8b4 20ce 	ldrh.w	r2, [r4, #206]	; 0xce
 800722e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8007232:	4413      	add	r3, r2
 8007234:	4418      	add	r0, r3
 8007236:	81f8      	strh	r0, [r7, #14]
 8007238:	f44f 6316 	mov.w	r3, #2400	; 0x960
 800723c:	4648      	mov	r0, r9
 800723e:	81bb      	strh	r3, [r7, #12]
 8007240:	b00f      	add	sp, #60	; 0x3c
 8007242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007246:	4628      	mov	r0, r5
 8007248:	f10d 0b20 	add.w	fp, sp, #32
 800724c:	f7fe fecc 	bl	8005fe8 <acc_base_configuration_update_rate_get>
 8007250:	a907      	add	r1, sp, #28
 8007252:	4658      	mov	r0, fp
 8007254:	f000 f972 	bl	800753c <acc_radar_engine_common_frequency_to_main_clk>
 8007258:	2301      	movs	r3, #1
 800725a:	9a07      	ldr	r2, [sp, #28]
 800725c:	6563      	str	r3, [r4, #84]	; 0x54
 800725e:	2100      	movs	r1, #0
 8007260:	9b08      	ldr	r3, [sp, #32]
 8007262:	6623      	str	r3, [r4, #96]	; 0x60
 8007264:	e9c4 1216 	strd	r1, r2, [r4, #88]	; 0x58
 8007268:	e748      	b.n	80070fc <initialize+0xf4>
 800726a:	2300      	movs	r3, #0
 800726c:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
 8007270:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
 8007274:	f10d 0b20 	add.w	fp, sp, #32
 8007278:	e740      	b.n	80070fc <initialize+0xf4>
 800727a:	2300      	movs	r3, #0
 800727c:	2201      	movs	r2, #1
 800727e:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
 8007282:	6563      	str	r3, [r4, #84]	; 0x54
 8007284:	65a2      	str	r2, [r4, #88]	; 0x58
 8007286:	f10d 0b20 	add.w	fp, sp, #32
 800728a:	e737      	b.n	80070fc <initialize+0xf4>
 800728c:	2300      	movs	r3, #0
 800728e:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
 8007292:	e740      	b.n	8007116 <initialize+0x10e>
 8007294:	2201      	movs	r2, #1
 8007296:	2300      	movs	r3, #0
 8007298:	e9c4 2319 	strd	r2, r3, [r4, #100]	; 0x64
 800729c:	e73b      	b.n	8007116 <initialize+0x10e>
 800729e:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
 80072a2:	4628      	mov	r0, r5
 80072a4:	f7fe fdde 	bl	8005e64 <acc_base_configuration_tx_disable_get>
 80072a8:	f080 0001 	eor.w	r0, r0, #1
 80072ac:	b2c0      	uxtb	r0, r0
 80072ae:	e749      	b.n	8007144 <initialize+0x13c>
 80072b0:	6970      	ldr	r0, [r6, #20]
 80072b2:	f7ff fe8b 	bl	8006fcc <get_package_range_coarse_max>
 80072b6:	e78f      	b.n	80071d8 <initialize+0x1d0>
 80072b8:	f89d 0017 	ldrb.w	r0, [sp, #23]
 80072bc:	f080 0001 	eor.w	r0, r0, #1
 80072c0:	e740      	b.n	8007144 <initialize+0x13c>
 80072c2:	bf00      	nop
 80072c4:	20000640 	.word	0x20000640
 80072c8:	08013530 	.word	0x08013530
 80072cc:	0801360c 	.word	0x0801360c
 80072d0:	0801378c 	.word	0x0801378c

080072d4 <coarse_count_for_next_package>:
 80072d4:	b538      	push	{r3, r4, r5, lr}
 80072d6:	8983      	ldrh	r3, [r0, #12]
 80072d8:	4604      	mov	r4, r0
 80072da:	6940      	ldr	r0, [r0, #20]
 80072dc:	3b01      	subs	r3, #1
 80072de:	f8b0 20c2 	ldrh.w	r2, [r0, #194]	; 0xc2
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	429a      	cmp	r2, r3
 80072e6:	d109      	bne.n	80072fc <coarse_count_for_next_package+0x28>
 80072e8:	8965      	ldrh	r5, [r4, #10]
 80072ea:	f7ff fe6f 	bl	8006fcc <get_package_range_coarse_max>
 80072ee:	fbb5 f3f0 	udiv	r3, r5, r0
 80072f2:	fb03 5010 	mls	r0, r3, r0, r5
 80072f6:	b100      	cbz	r0, 80072fa <coarse_count_for_next_package+0x26>
 80072f8:	bd38      	pop	{r3, r4, r5, pc}
 80072fa:	6960      	ldr	r0, [r4, #20]
 80072fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007300:	f7ff be64 	b.w	8006fcc <get_package_range_coarse_max>

08007304 <update_program>:
 8007304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007308:	6946      	ldr	r6, [r0, #20]
 800730a:	8987      	ldrh	r7, [r0, #12]
 800730c:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
 800730e:	f896 20c0 	ldrb.w	r2, [r6, #192]	; 0xc0
 8007312:	460d      	mov	r5, r1
 8007314:	fab3 f383 	clz	r3, r3
 8007318:	2a00      	cmp	r2, #0
 800731a:	bf18      	it	ne
 800731c:	4611      	movne	r1, r2
 800731e:	2f01      	cmp	r7, #1
 8007320:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8007324:	bf94      	ite	ls
 8007326:	f04f 0900 	movls.w	r9, #0
 800732a:	f04f 0901 	movhi.w	r9, #1
 800732e:	2f01      	cmp	r7, #1
 8007330:	b085      	sub	sp, #20
 8007332:	4604      	mov	r4, r0
 8007334:	ea83 0a01 	eor.w	sl, r3, r1
 8007338:	d933      	bls.n	80073a2 <update_program+0x9e>
 800733a:	f8b6 30c2 	ldrh.w	r3, [r6, #194]	; 0xc2
 800733e:	f9b0 b008 	ldrsh.w	fp, [r0, #8]
 8007342:	3301      	adds	r3, #1
 8007344:	b29b      	uxth	r3, r3
 8007346:	fbb3 f8f7 	udiv	r8, r3, r7
 800734a:	fb07 3718 	mls	r7, r7, r8, r3
 800734e:	fa1f f887 	uxth.w	r8, r7
 8007352:	f8a6 80c2 	strh.w	r8, [r6, #194]	; 0xc2
 8007356:	4630      	mov	r0, r6
 8007358:	f7ff fe38 	bl	8006fcc <get_package_range_coarse_max>
 800735c:	4607      	mov	r7, r0
 800735e:	4620      	mov	r0, r4
 8007360:	f7ff ffb8 	bl	80072d4 <coarse_count_for_next_package>
 8007364:	f896 20c0 	ldrb.w	r2, [r6, #192]	; 0xc0
 8007368:	f8c6 00c8 	str.w	r0, [r6, #200]	; 0xc8
 800736c:	fb07 b708 	mla	r7, r7, r8, fp
 8007370:	3801      	subs	r0, #1
 8007372:	e9cd 0701 	strd	r0, r7, [sp, #4]
 8007376:	f88d 9000 	strb.w	r9, [sp]
 800737a:	f88d 9001 	strb.w	r9, [sp, #1]
 800737e:	f88d a002 	strb.w	sl, [sp, #2]
 8007382:	b15a      	cbz	r2, 800739c <update_program+0x98>
 8007384:	2500      	movs	r5, #0
 8007386:	6820      	ldr	r0, [r4, #0]
 8007388:	9503      	str	r5, [sp, #12]
 800738a:	4669      	mov	r1, sp
 800738c:	f004 fd20 	bl	800bdd0 <acc_cpd_linear_sweep_update_program>
 8007390:	b108      	cbz	r0, 8007396 <update_program+0x92>
 8007392:	9b03      	ldr	r3, [sp, #12]
 8007394:	66f3      	str	r3, [r6, #108]	; 0x6c
 8007396:	b005      	add	sp, #20
 8007398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800739c:	f085 0501 	eor.w	r5, r5, #1
 80073a0:	e7f1      	b.n	8007386 <update_program+0x82>
 80073a2:	428b      	cmp	r3, r1
 80073a4:	d003      	beq.n	80073ae <update_program+0xaa>
 80073a6:	f04f 30ff 	mov.w	r0, #4294967295
 80073aa:	2700      	movs	r7, #0
 80073ac:	e7e1      	b.n	8007372 <update_program+0x6e>
 80073ae:	2001      	movs	r0, #1
 80073b0:	e7f1      	b.n	8007396 <update_program+0x92>
 80073b2:	bf00      	nop

080073b4 <start>:
 80073b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80073b8:	6944      	ldr	r4, [r0, #20]
 80073ba:	f8d4 70b4 	ldr.w	r7, [r4, #180]	; 0xb4
 80073be:	f894 80ac 	ldrb.w	r8, [r4, #172]	; 0xac
 80073c2:	f8d4 906c 	ldr.w	r9, [r4, #108]	; 0x6c
 80073c6:	2300      	movs	r3, #0
 80073c8:	b085      	sub	sp, #20
 80073ca:	4606      	mov	r6, r0
 80073cc:	460d      	mov	r5, r1
 80073ce:	f8a4 30c2 	strh.w	r3, [r4, #194]	; 0xc2
 80073d2:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 80073d6:	b117      	cbz	r7, 80073de <start+0x2a>
 80073d8:	f1b8 0f00 	cmp.w	r8, #0
 80073dc:	d11f      	bne.n	800741e <start+0x6a>
 80073de:	4630      	mov	r0, r6
 80073e0:	f7ff ff78 	bl	80072d4 <coarse_count_for_next_package>
 80073e4:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
 80073e8:	f7ff f948 	bl	800667c <acc_rss_integration_log_level>
 80073ec:	2803      	cmp	r0, #3
 80073ee:	d905      	bls.n	80073fc <start+0x48>
 80073f0:	4b2b      	ldr	r3, [pc, #172]	; (80074a0 <start+0xec>)
 80073f2:	4a2c      	ldr	r2, [pc, #176]	; (80074a4 <start+0xf0>)
 80073f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073f6:	492c      	ldr	r1, [pc, #176]	; (80074a8 <start+0xf4>)
 80073f8:	2004      	movs	r0, #4
 80073fa:	4798      	blx	r3
 80073fc:	e9d5 1200 	ldrd	r1, r2, [r5]
 8007400:	6830      	ldr	r0, [r6, #0]
 8007402:	4623      	mov	r3, r4
 8007404:	f003 ffa8 	bl	800b358 <acc_cpd_linear_sweep_load_program>
 8007408:	4605      	mov	r5, r0
 800740a:	b950      	cbnz	r0, 8007422 <start+0x6e>
 800740c:	4b24      	ldr	r3, [pc, #144]	; (80074a0 <start+0xec>)
 800740e:	4a27      	ldr	r2, [pc, #156]	; (80074ac <start+0xf8>)
 8007410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007412:	4925      	ldr	r1, [pc, #148]	; (80074a8 <start+0xf4>)
 8007414:	4798      	blx	r3
 8007416:	4628      	mov	r0, r5
 8007418:	b005      	add	sp, #20
 800741a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800741e:	66e3      	str	r3, [r4, #108]	; 0x6c
 8007420:	e7dd      	b.n	80073de <start+0x2a>
 8007422:	6830      	ldr	r0, [r6, #0]
 8007424:	f004 fcd0 	bl	800bdc8 <acc_cpd_linear_sweep_run_program>
 8007428:	4605      	mov	r5, r0
 800742a:	2800      	cmp	r0, #0
 800742c:	d032      	beq.n	8007494 <start+0xe0>
 800742e:	f1b8 0f00 	cmp.w	r8, #0
 8007432:	d00f      	beq.n	8007454 <start+0xa0>
 8007434:	6931      	ldr	r1, [r6, #16]
 8007436:	6830      	ldr	r0, [r6, #0]
 8007438:	f001 f9ae 	bl	8008798 <acc_sensor_protocol_r2_wait_for_sync_start>
 800743c:	b350      	cbz	r0, 8007494 <start+0xe0>
 800743e:	f7ff f91d 	bl	800667c <acc_rss_integration_log_level>
 8007442:	2801      	cmp	r0, #1
 8007444:	d905      	bls.n	8007452 <start+0x9e>
 8007446:	4b16      	ldr	r3, [pc, #88]	; (80074a0 <start+0xec>)
 8007448:	4a19      	ldr	r2, [pc, #100]	; (80074b0 <start+0xfc>)
 800744a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800744c:	4916      	ldr	r1, [pc, #88]	; (80074a8 <start+0xf4>)
 800744e:	2002      	movs	r0, #2
 8007450:	4798      	blx	r3
 8007452:	b96f      	cbnz	r7, 8007470 <start+0xbc>
 8007454:	f7ff f912 	bl	800667c <acc_rss_integration_log_level>
 8007458:	2803      	cmp	r0, #3
 800745a:	d9dc      	bls.n	8007416 <start+0x62>
 800745c:	4b10      	ldr	r3, [pc, #64]	; (80074a0 <start+0xec>)
 800745e:	4a15      	ldr	r2, [pc, #84]	; (80074b4 <start+0x100>)
 8007460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007462:	4911      	ldr	r1, [pc, #68]	; (80074a8 <start+0xf4>)
 8007464:	2004      	movs	r0, #4
 8007466:	4798      	blx	r3
 8007468:	4628      	mov	r0, r5
 800746a:	b005      	add	sp, #20
 800746c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007470:	2300      	movs	r3, #0
 8007472:	2201      	movs	r2, #1
 8007474:	6830      	ldr	r0, [r6, #0]
 8007476:	f8c4 906c 	str.w	r9, [r4, #108]	; 0x6c
 800747a:	4669      	mov	r1, sp
 800747c:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8007480:	f8cd 900c 	str.w	r9, [sp, #12]
 8007484:	f8ad 3000 	strh.w	r3, [sp]
 8007488:	f88d 2002 	strb.w	r2, [sp, #2]
 800748c:	f004 fca0 	bl	800bdd0 <acc_cpd_linear_sweep_update_program>
 8007490:	2800      	cmp	r0, #0
 8007492:	d1df      	bne.n	8007454 <start+0xa0>
 8007494:	2500      	movs	r5, #0
 8007496:	4628      	mov	r0, r5
 8007498:	b005      	add	sp, #20
 800749a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800749e:	bf00      	nop
 80074a0:	20000640 	.word	0x20000640
 80074a4:	080136dc 	.word	0x080136dc
 80074a8:	0801360c 	.word	0x0801360c
 80074ac:	08013704 	.word	0x08013704
 80074b0:	08013720 	.word	0x08013720
 80074b4:	08013744 	.word	0x08013744

080074b8 <acc_radar_engine_linear_create>:
 80074b8:	b538      	push	{r3, r4, r5, lr}
 80074ba:	4a11      	ldr	r2, [pc, #68]	; (8007500 <acc_radar_engine_linear_create+0x48>)
 80074bc:	4604      	mov	r4, r0
 80074be:	460d      	mov	r5, r1
 80074c0:	f44f 7393 	mov.w	r3, #294	; 0x126
 80074c4:	21d4      	movs	r1, #212	; 0xd4
 80074c6:	2001      	movs	r0, #1
 80074c8:	f7ff f8a8 	bl	800661c <acc_rss_integration_mem_calloc_debug>
 80074cc:	6160      	str	r0, [r4, #20]
 80074ce:	b1a8      	cbz	r0, 80074fc <acc_radar_engine_linear_create+0x44>
 80074d0:	4628      	mov	r0, r5
 80074d2:	f7fe fc67 	bl	8005da4 <acc_base_configuration_sensor_get>
 80074d6:	6020      	str	r0, [r4, #0]
 80074d8:	4628      	mov	r0, r5
 80074da:	f7fe fe93 	bl	8006204 <acc_base_configuration_asynchronous_measurement_get>
 80074de:	73a0      	strb	r0, [r4, #14]
 80074e0:	4628      	mov	r0, r5
 80074e2:	f7fe fcaf 	bl	8005e44 <acc_base_configuration_power_save_mode_get>
 80074e6:	fab0 f080 	clz	r0, r0
 80074ea:	0940      	lsrs	r0, r0, #5
 80074ec:	73e0      	strb	r0, [r4, #15]
 80074ee:	4628      	mov	r0, r5
 80074f0:	f000 f80a 	bl	8007508 <acc_radar_engine_common_get_timeout_ms>
 80074f4:	4b03      	ldr	r3, [pc, #12]	; (8007504 <acc_radar_engine_linear_create+0x4c>)
 80074f6:	6120      	str	r0, [r4, #16]
 80074f8:	61a3      	str	r3, [r4, #24]
 80074fa:	2001      	movs	r0, #1
 80074fc:	bd38      	pop	{r3, r4, r5, pc}
 80074fe:	bf00      	nop
 8007500:	0801360c 	.word	0x0801360c
 8007504:	08013768 	.word	0x08013768

08007508 <acc_radar_engine_common_get_timeout_ms>:
 8007508:	b510      	push	{r4, lr}
 800750a:	4604      	mov	r4, r0
 800750c:	f7fe fd64 	bl	8005fd8 <acc_base_configuration_repetition_mode_get>
 8007510:	2801      	cmp	r0, #1
 8007512:	d00d      	beq.n	8007530 <acc_radar_engine_common_get_timeout_ms+0x28>
 8007514:	4620      	mov	r0, r4
 8007516:	f7fe fd67 	bl	8005fe8 <acc_base_configuration_update_rate_get>
 800751a:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8007538 <acc_radar_engine_common_get_timeout_ms+0x30>
 800751e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007522:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007526:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800752a:	ee17 0a90 	vmov	r0, s15
 800752e:	bd10      	pop	{r4, pc}
 8007530:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8007534:	bd10      	pop	{r4, pc}
 8007536:	bf00      	nop
 8007538:	44fa0000 	.word	0x44fa0000

0800753c <acc_radar_engine_common_frequency_to_main_clk>:
 800753c:	b538      	push	{r3, r4, r5, lr}
 800753e:	ed2d 8b02 	vpush	{d8}
 8007542:	4604      	mov	r4, r0
 8007544:	eeb0 8a40 	vmov.f32	s16, s0
 8007548:	460d      	mov	r5, r1
 800754a:	f7fe ffe7 	bl	800651c <acc_rss_integration_get_sensor_reference_frequency>
 800754e:	eec0 7a08 	vdiv.f32	s15, s0, s16
 8007552:	ecbd 8b02 	vpop	{d8}
 8007556:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800755a:	ee17 3a90 	vmov	r3, s15
 800755e:	0c1a      	lsrs	r2, r3, #16
 8007560:	b29b      	uxth	r3, r3
 8007562:	602a      	str	r2, [r5, #0]
 8007564:	6023      	str	r3, [r4, #0]
 8007566:	bd38      	pop	{r3, r4, r5, pc}

08007568 <get_dt>:
 8007568:	b508      	push	{r3, lr}
 800756a:	ed2d 8b02 	vpush	{d8}
 800756e:	ee08 0a10 	vmov	s16, r0
 8007572:	f7fe ffd3 	bl	800651c <acc_rss_integration_get_sensor_reference_frequency>
 8007576:	eef0 8a40 	vmov.f32	s17, s0
 800757a:	f001 fd1f 	bl	8008fbc <acc_cpd_pll_divisors_ref_divisor>
 800757e:	ee28 0a80 	vmul.f32	s0, s17, s0
 8007582:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007586:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800758a:	eeb8 8a48 	vcvt.f32.u32	s16, s16
 800758e:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8007592:	ecbd 8b02 	vpop	{d8}
 8007596:	bd08      	pop	{r3, pc}

08007598 <points_to_meter>:
 8007598:	b508      	push	{r3, lr}
 800759a:	4603      	mov	r3, r0
 800759c:	ed2d 8b02 	vpush	{d8}
 80075a0:	4608      	mov	r0, r1
 80075a2:	ee08 3a10 	vmov	s16, r3
 80075a6:	f7ff ffdf 	bl	8007568 <get_dt>
 80075aa:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 80075ae:	eddf 7a06 	vldr	s15, [pc, #24]	; 80075c8 <points_to_meter+0x30>
 80075b2:	ee28 8a00 	vmul.f32	s16, s16, s0
 80075b6:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80075ba:	ee28 8a27 	vmul.f32	s16, s16, s15
 80075be:	ee28 0a00 	vmul.f32	s0, s16, s0
 80075c2:	ecbd 8b02 	vpop	{d8}
 80075c6:	bd08      	pop	{r3, pc}
 80075c8:	4d8ef3c2 	.word	0x4d8ef3c2

080075cc <acc_radar_engine_common_sweep_w_dly_initialize_range>:
 80075cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075d0:	ed2d 8b04 	vpush	{d8-d9}
 80075d4:	b089      	sub	sp, #36	; 0x24
 80075d6:	4689      	mov	r9, r1
 80075d8:	9e16      	ldr	r6, [sp, #88]	; 0x58
 80075da:	f89d a05c 	ldrb.w	sl, [sp, #92]	; 0x5c
 80075de:	f9bd b05e 	ldrsh.w	fp, [sp, #94]	; 0x5e
 80075e2:	9306      	str	r3, [sp, #24]
 80075e4:	4617      	mov	r7, r2
 80075e6:	4680      	mov	r8, r0
 80075e8:	f7fe fd8a 	bl	8006100 <acc_base_configuration_use_point_range_get>
 80075ec:	2800      	cmp	r0, #0
 80075ee:	d03d      	beq.n	800766c <acc_radar_engine_common_sweep_w_dly_initialize_range+0xa0>
 80075f0:	4640      	mov	r0, r8
 80075f2:	f7fe fcdd 	bl	8005fb0 <acc_base_configuration_point_start_get>
 80075f6:	4605      	mov	r5, r0
 80075f8:	4640      	mov	r0, r8
 80075fa:	f7fe fce3 	bl	8005fc4 <acc_base_configuration_point_length_get>
 80075fe:	182c      	adds	r4, r5, r0
 8007600:	f1ba 0f00 	cmp.w	sl, #0
 8007604:	d02f      	beq.n	8007666 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x9a>
 8007606:	f06f 020b 	mvn.w	r2, #11
 800760a:	4593      	cmp	fp, r2
 800760c:	bfb8      	it	lt
 800760e:	4693      	movlt	fp, r2
 8007610:	f898 202e 	ldrb.w	r2, [r8, #46]	; 0x2e
 8007614:	b31a      	cbz	r2, 800765e <acc_radar_engine_common_sweep_w_dly_initialize_range+0x92>
 8007616:	f8b8 3030 	ldrh.w	r3, [r8, #48]	; 0x30
 800761a:	9307      	str	r3, [sp, #28]
 800761c:	4640      	mov	r0, r8
 800761e:	f7fe fdbf 	bl	80061a0 <acc_base_configuration_downsampling_factor_get>
 8007622:	2801      	cmp	r0, #1
 8007624:	4682      	mov	sl, r0
 8007626:	d90a      	bls.n	800763e <acc_radar_engine_common_sweep_w_dly_initialize_range+0x72>
 8007628:	2802      	cmp	r0, #2
 800762a:	f000 8121 	beq.w	8007870 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2a4>
 800762e:	1b60      	subs	r0, r4, r5
 8007630:	fb90 f2fa 	sdiv	r2, r0, sl
 8007634:	fb0a 0a12 	mls	sl, sl, r2, r0
 8007638:	f1ba 0f00 	cmp.w	sl, #0
 800763c:	dc55      	bgt.n	80076ea <acc_radar_engine_common_sweep_w_dly_initialize_range+0x11e>
 800763e:	42ac      	cmp	r4, r5
 8007640:	da61      	bge.n	8007706 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x13a>
 8007642:	4b9b      	ldr	r3, [pc, #620]	; (80078b0 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2e4>)
 8007644:	4a9b      	ldr	r2, [pc, #620]	; (80078b4 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2e8>)
 8007646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007648:	499b      	ldr	r1, [pc, #620]	; (80078b8 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2ec>)
 800764a:	2000      	movs	r0, #0
 800764c:	4798      	blx	r3
 800764e:	f04f 0a00 	mov.w	sl, #0
 8007652:	4650      	mov	r0, sl
 8007654:	b009      	add	sp, #36	; 0x24
 8007656:	ecbd 8b04 	vpop	{d8-d9}
 800765a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800765e:	f898 3032 	ldrb.w	r3, [r8, #50]	; 0x32
 8007662:	9307      	str	r3, [sp, #28]
 8007664:	e7da      	b.n	800761c <acc_radar_engine_common_sweep_w_dly_initialize_range+0x50>
 8007666:	f06f 0b0b 	mvn.w	fp, #11
 800766a:	e7d1      	b.n	8007610 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x44>
 800766c:	4640      	mov	r0, r8
 800766e:	f7fe fba9 	bl	8005dc4 <acc_base_configuration_requested_start_get>
 8007672:	4640      	mov	r0, r8
 8007674:	eeb0 8a40 	vmov.f32	s16, s0
 8007678:	f7fe fbc0 	bl	8005dfc <acc_base_configuration_requested_length_get>
 800767c:	4630      	mov	r0, r6
 800767e:	ee78 8a00 	vadd.f32	s17, s16, s0
 8007682:	f7ff ff71 	bl	8007568 <get_dt>
 8007686:	eddf 9a8d 	vldr	s19, [pc, #564]	; 80078bc <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2f0>
 800768a:	ee38 7a08 	vadd.f32	s14, s16, s16
 800768e:	ee20 0a29 	vmul.f32	s0, s0, s19
 8007692:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8007696:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800769a:	4630      	mov	r0, r6
 800769c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076a0:	eebe 8a00 	vmov.f32	s16, #224	; 0xbf000000 -0.5
 80076a4:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 80076a8:	bf54      	ite	pl
 80076aa:	eeb0 7a49 	vmovpl.f32	s14, s18
 80076ae:	eeb0 7a48 	vmovmi.f32	s14, s16
 80076b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80076b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80076ba:	ee17 5a90 	vmov	r5, s15
 80076be:	f7ff ff53 	bl	8007568 <get_dt>
 80076c2:	ee38 7aa8 	vadd.f32	s14, s17, s17
 80076c6:	ee20 0a29 	vmul.f32	s0, s0, s19
 80076ca:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 80076ce:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80076d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076d6:	bf58      	it	pl
 80076d8:	eeb0 8a49 	vmovpl.f32	s16, s18
 80076dc:	ee37 8a88 	vadd.f32	s16, s15, s16
 80076e0:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80076e4:	ee17 4a90 	vmov	r4, s15
 80076e8:	e78a      	b.n	8007600 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x34>
 80076ea:	f7fe ffc7 	bl	800667c <acc_rss_integration_log_level>
 80076ee:	2801      	cmp	r0, #1
 80076f0:	d905      	bls.n	80076fe <acc_radar_engine_common_sweep_w_dly_initialize_range+0x132>
 80076f2:	496f      	ldr	r1, [pc, #444]	; (80078b0 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2e4>)
 80076f4:	4a72      	ldr	r2, [pc, #456]	; (80078c0 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2f4>)
 80076f6:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80076f8:	496f      	ldr	r1, [pc, #444]	; (80078b8 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2ec>)
 80076fa:	2002      	movs	r0, #2
 80076fc:	4798      	blx	r3
 80076fe:	eba4 040a 	sub.w	r4, r4, sl
 8007702:	42ac      	cmp	r4, r5
 8007704:	db9d      	blt.n	8007642 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x76>
 8007706:	4640      	mov	r0, r8
 8007708:	f7fe fd36 	bl	8006178 <acc_base_configuration_ignore_range_limits_get>
 800770c:	4682      	mov	sl, r0
 800770e:	b970      	cbnz	r0, 800772e <acc_radar_engine_common_sweep_w_dly_initialize_range+0x162>
 8007710:	fb0b fb06 	mul.w	fp, fp, r6
 8007714:	45ab      	cmp	fp, r5
 8007716:	f300 80d9 	bgt.w	80078cc <acc_radar_engine_common_sweep_w_dly_initialize_range+0x300>
 800771a:	9b07      	ldr	r3, [sp, #28]
 800771c:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8007720:	f1ab 0b4b 	sub.w	fp, fp, #75	; 0x4b
 8007724:	fb06 fb0b 	mul.w	fp, r6, fp
 8007728:	455c      	cmp	r4, fp
 800772a:	f300 8171 	bgt.w	8007a10 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x444>
 800772e:	4640      	mov	r0, r8
 8007730:	f7fe fd36 	bl	80061a0 <acc_base_configuration_downsampling_factor_get>
 8007734:	f898 202e 	ldrb.w	r2, [r8, #46]	; 0x2e
 8007738:	4683      	mov	fp, r0
 800773a:	2a00      	cmp	r2, #0
 800773c:	f000 80a7 	beq.w	800788e <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2c2>
 8007740:	f8b8 e030 	ldrh.w	lr, [r8, #48]	; 0x30
 8007744:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8007746:	fb95 f1fb 	sdiv	r1, r5, fp
 800774a:	eb04 72d4 	add.w	r2, r4, r4, lsr #31
 800774e:	fb92 f2f6 	sdiv	r2, r2, r6
 8007752:	eba2 72d4 	sub.w	r2, r2, r4, lsr #31
 8007756:	3201      	adds	r2, #1
 8007758:	eb05 70d5 	add.w	r0, r5, r5, lsr #31
 800775c:	fb90 f0f6 	sdiv	r0, r0, r6
 8007760:	eba0 70d5 	sub.w	r0, r0, r5, lsr #31
 8007764:	1a12      	subs	r2, r2, r0
 8007766:	fb0b 5111 	mls	r1, fp, r1, r5
 800776a:	b292      	uxth	r2, r2
 800776c:	4459      	add	r1, fp
 800776e:	fbb2 fcf3 	udiv	ip, r2, r3
 8007772:	80fa      	strh	r2, [r7, #6]
 8007774:	fb03 2a1c 	mls	sl, r3, ip, r2
 8007778:	fb91 f2fb 	sdiv	r2, r1, fp
 800777c:	fb0b 1112 	mls	r1, fp, r2, r1
 8007780:	f8a7 e000 	strh.w	lr, [r7]
 8007784:	80b8      	strh	r0, [r7, #4]
 8007786:	fa1f fc8c 	uxth.w	ip, ip
 800778a:	8079      	strh	r1, [r7, #2]
 800778c:	f1ba 0f00 	cmp.w	sl, #0
 8007790:	d001      	beq.n	8007796 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x1ca>
 8007792:	f10c 0c01 	add.w	ip, ip, #1
 8007796:	f8a7 c008 	strh.w	ip, [r7, #8]
 800779a:	4640      	mov	r0, r8
 800779c:	f7fe fb52 	bl	8005e44 <acc_base_configuration_power_save_mode_get>
 80077a0:	4602      	mov	r2, r0
 80077a2:	4640      	mov	r0, r8
 80077a4:	9207      	str	r2, [sp, #28]
 80077a6:	f7fe fc17 	bl	8005fd8 <acc_base_configuration_repetition_mode_get>
 80077aa:	9a07      	ldr	r2, [sp, #28]
 80077ac:	2a04      	cmp	r2, #4
 80077ae:	d001      	beq.n	80077b4 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x1e8>
 80077b0:	2801      	cmp	r0, #1
 80077b2:	d003      	beq.n	80077bc <acc_radar_engine_common_sweep_w_dly_initialize_range+0x1f0>
 80077b4:	88fb      	ldrh	r3, [r7, #6]
 80077b6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d876      	bhi.n	80078aa <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2de>
 80077bc:	4630      	mov	r0, r6
 80077be:	f7ff fed3 	bl	8007568 <get_dt>
 80077c2:	ee07 ba90 	vmov	s15, fp
 80077c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077ca:	4631      	mov	r1, r6
 80077cc:	ee27 0a80 	vmul.f32	s0, s15, s0
 80077d0:	4628      	mov	r0, r5
 80077d2:	ed89 0a03 	vstr	s0, [r9, #12]
 80077d6:	f7ff fedf 	bl	8007598 <points_to_meter>
 80077da:	4631      	mov	r1, r6
 80077dc:	4620      	mov	r0, r4
 80077de:	ed89 0a00 	vstr	s0, [r9]
 80077e2:	f7ff fed9 	bl	8007598 <points_to_meter>
 80077e6:	fbb6 f2fb 	udiv	r2, r6, fp
 80077ea:	fb95 fcf6 	sdiv	ip, r5, r6
 80077ee:	edd9 7a00 	vldr	s15, [r9]
 80077f2:	88fb      	ldrh	r3, [r7, #6]
 80077f4:	8939      	ldrh	r1, [r7, #8]
 80077f6:	9806      	ldr	r0, [sp, #24]
 80077f8:	ed89 0a02 	vstr	s0, [r9, #8]
 80077fc:	1b64      	subs	r4, r4, r5
 80077fe:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007802:	fbb4 f4fb 	udiv	r4, r4, fp
 8007806:	3401      	adds	r4, #1
 8007808:	b2a4      	uxth	r4, r4
 800780a:	f8a9 4016 	strh.w	r4, [r9, #22]
 800780e:	ed89 0a01 	vstr	s0, [r9, #4]
 8007812:	f8a9 1018 	strh.w	r1, [r9, #24]
 8007816:	80c2      	strh	r2, [r0, #6]
 8007818:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800781a:	8084      	strh	r4, [r0, #4]
 800781c:	fb06 551c 	mls	r5, r6, ip, r5
 8007820:	4435      	add	r5, r6
 8007822:	429a      	cmp	r2, r3
 8007824:	fb95 fcf6 	sdiv	ip, r5, r6
 8007828:	8103      	strh	r3, [r0, #8]
 800782a:	fb06 551c 	mls	r5, r6, ip, r5
 800782e:	8201      	strh	r1, [r0, #16]
 8007830:	fb95 f5fb 	sdiv	r5, r5, fp
 8007834:	fb03 f606 	mul.w	r6, r3, r6
 8007838:	8045      	strh	r5, [r0, #2]
 800783a:	fbb6 fbfb 	udiv	fp, r6, fp
 800783e:	f8a0 b000 	strh.w	fp, [r0]
 8007842:	d227      	bcs.n	8007894 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2c8>
 8007844:	b292      	uxth	r2, r2
 8007846:	8282      	strh	r2, [r0, #20]
 8007848:	f1ba 0f00 	cmp.w	sl, #0
 800784c:	d006      	beq.n	800785c <acc_radar_engine_common_sweep_w_dly_initialize_range+0x290>
 800784e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007850:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007852:	fbb3 f2f2 	udiv	r2, r3, r2
 8007856:	fb01 3312 	mls	r3, r1, r2, r3
 800785a:	b29a      	uxth	r2, r3
 800785c:	9b06      	ldr	r3, [sp, #24]
 800785e:	f04f 0a01 	mov.w	sl, #1
 8007862:	4650      	mov	r0, sl
 8007864:	82da      	strh	r2, [r3, #22]
 8007866:	b009      	add	sp, #36	; 0x24
 8007868:	ecbd 8b04 	vpop	{d8-d9}
 800786c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007870:	07eb      	lsls	r3, r5, #31
 8007872:	f53f aedc 	bmi.w	800762e <acc_radar_engine_common_sweep_w_dly_initialize_range+0x62>
 8007876:	f7fe ff01 	bl	800667c <acc_rss_integration_log_level>
 800787a:	2801      	cmp	r0, #1
 800787c:	d905      	bls.n	800788a <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2be>
 800787e:	490c      	ldr	r1, [pc, #48]	; (80078b0 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2e4>)
 8007880:	4a10      	ldr	r2, [pc, #64]	; (80078c4 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2f8>)
 8007882:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8007884:	490c      	ldr	r1, [pc, #48]	; (80078b8 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2ec>)
 8007886:	4650      	mov	r0, sl
 8007888:	4798      	blx	r3
 800788a:	3501      	adds	r5, #1
 800788c:	e6cf      	b.n	800762e <acc_radar_engine_common_sweep_w_dly_initialize_range+0x62>
 800788e:	f898 e032 	ldrb.w	lr, [r8, #50]	; 0x32
 8007892:	e757      	b.n	8007744 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x178>
 8007894:	9a06      	ldr	r2, [sp, #24]
 8007896:	f04f 0a01 	mov.w	sl, #1
 800789a:	4650      	mov	r0, sl
 800789c:	8293      	strh	r3, [r2, #20]
 800789e:	82d3      	strh	r3, [r2, #22]
 80078a0:	b009      	add	sp, #36	; 0x24
 80078a2:	ecbd 8b04 	vpop	{d8-d9}
 80078a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078aa:	4b01      	ldr	r3, [pc, #4]	; (80078b0 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2e4>)
 80078ac:	4a06      	ldr	r2, [pc, #24]	; (80078c8 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2fc>)
 80078ae:	e6ca      	b.n	8007646 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x7a>
 80078b0:	20000640 	.word	0x20000640
 80078b4:	08013820 	.word	0x08013820
 80078b8:	080137cc 	.word	0x080137cc
 80078bc:	4d8ef3c2 	.word	0x4d8ef3c2
 80078c0:	080137ec 	.word	0x080137ec
 80078c4:	08013794 	.word	0x08013794
 80078c8:	080138d0 	.word	0x080138d0
 80078cc:	4b9d      	ldr	r3, [pc, #628]	; (8007b44 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x578>)
 80078ce:	4c9e      	ldr	r4, [pc, #632]	; (8007b48 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x57c>)
 80078d0:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 80078d2:	4631      	mov	r1, r6
 80078d4:	4628      	mov	r0, r5
 80078d6:	f7ff fe5f 	bl	8007598 <points_to_meter>
 80078da:	4b9c      	ldr	r3, [pc, #624]	; (8007b4c <acc_radar_engine_common_sweep_w_dly_initialize_range+0x580>)
 80078dc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80078e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078e4:	4631      	mov	r1, r6
 80078e6:	4628      	mov	r0, r5
 80078e8:	bf54      	ite	pl
 80078ea:	4698      	movpl	r8, r3
 80078ec:	46a0      	movmi	r8, r4
 80078ee:	f7ff fe53 	bl	8007598 <points_to_meter>
 80078f2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80078f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078fa:	eddf 7a95 	vldr	s15, [pc, #596]	; 8007b50 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x584>
 80078fe:	bf48      	it	mi
 8007900:	eeb1 0a40 	vnegmi.f32	s0, s0
 8007904:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007908:	4628      	mov	r0, r5
 800790a:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800790e:	4631      	mov	r1, r6
 8007910:	ee17 5a90 	vmov	r5, s15
 8007914:	f7ff fe40 	bl	8007598 <points_to_meter>
 8007918:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800791c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007920:	eddf 7a8b 	vldr	s15, [pc, #556]	; 8007b50 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x584>
 8007924:	ed9f 6a8a 	vldr	s12, [pc, #552]	; 8007b50 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x584>
 8007928:	eddf 6a8a 	vldr	s13, [pc, #552]	; 8007b54 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x588>
 800792c:	bf48      	it	mi
 800792e:	eeb1 0a40 	vnegmi.f32	s0, s0
 8007932:	ee70 7a27 	vadd.f32	s15, s0, s15
 8007936:	4631      	mov	r1, r6
 8007938:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800793c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007940:	bf4c      	ite	mi
 8007942:	eeb1 7a67 	vnegmi.f32	s14, s15
 8007946:	eeb0 7a67 	vmovpl.f32	s14, s15
 800794a:	ee37 7a06 	vadd.f32	s14, s14, s12
 800794e:	4658      	mov	r0, fp
 8007950:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8007954:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8007958:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800795c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007960:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007964:	ee17 4a90 	vmov	r4, s15
 8007968:	f7ff fe16 	bl	8007598 <points_to_meter>
 800796c:	4b77      	ldr	r3, [pc, #476]	; (8007b4c <acc_radar_engine_common_sweep_w_dly_initialize_range+0x580>)
 800796e:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8007b48 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x57c>
 8007972:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800797a:	4631      	mov	r1, r6
 800797c:	4658      	mov	r0, fp
 800797e:	bf54      	ite	pl
 8007980:	4699      	movpl	r9, r3
 8007982:	46e1      	movmi	r9, ip
 8007984:	f7ff fe08 	bl	8007598 <points_to_meter>
 8007988:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800798c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007990:	eddf 7a6f 	vldr	s15, [pc, #444]	; 8007b50 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x584>
 8007994:	bf48      	it	mi
 8007996:	eeb1 0a40 	vnegmi.f32	s0, s0
 800799a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800799e:	4631      	mov	r1, r6
 80079a0:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80079a4:	4658      	mov	r0, fp
 80079a6:	ee17 6a90 	vmov	r6, s15
 80079aa:	f7ff fdf5 	bl	8007598 <points_to_meter>
 80079ae:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80079b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079b6:	eddf 7a66 	vldr	s15, [pc, #408]	; 8007b50 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x584>
 80079ba:	ed9f 6a65 	vldr	s12, [pc, #404]	; 8007b50 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x584>
 80079be:	eddf 6a65 	vldr	s13, [pc, #404]	; 8007b54 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x588>
 80079c2:	4a65      	ldr	r2, [pc, #404]	; (8007b58 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x58c>)
 80079c4:	9603      	str	r6, [sp, #12]
 80079c6:	bf48      	it	mi
 80079c8:	eeb1 0a40 	vnegmi.f32	s0, s0
 80079cc:	ee70 7a27 	vadd.f32	s15, s0, s15
 80079d0:	f8cd 9008 	str.w	r9, [sp, #8]
 80079d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80079d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079dc:	bf4c      	ite	mi
 80079de:	eeb1 7a67 	vnegmi.f32	s14, s15
 80079e2:	eeb0 7a67 	vmovpl.f32	s14, s15
 80079e6:	ee37 7a06 	vadd.f32	s14, s14, s12
 80079ea:	9401      	str	r4, [sp, #4]
 80079ec:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80079f0:	9500      	str	r5, [sp, #0]
 80079f2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80079f6:	4643      	mov	r3, r8
 80079f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80079fc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007a00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a04:	4955      	ldr	r1, [pc, #340]	; (8007b5c <acc_radar_engine_common_sweep_w_dly_initialize_range+0x590>)
 8007a06:	edcd 7a04 	vstr	s15, [sp, #16]
 8007a0a:	2000      	movs	r0, #0
 8007a0c:	47b8      	blx	r7
 8007a0e:	e620      	b.n	8007652 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x86>
 8007a10:	4b4c      	ldr	r3, [pc, #304]	; (8007b44 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x578>)
 8007a12:	4631      	mov	r1, r6
 8007a14:	4620      	mov	r0, r4
 8007a16:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 8007a18:	f7ff fdbe 	bl	8007598 <points_to_meter>
 8007a1c:	4a4a      	ldr	r2, [pc, #296]	; (8007b48 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x57c>)
 8007a1e:	4b4b      	ldr	r3, [pc, #300]	; (8007b4c <acc_radar_engine_common_sweep_w_dly_initialize_range+0x580>)
 8007a20:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a28:	4631      	mov	r1, r6
 8007a2a:	4620      	mov	r0, r4
 8007a2c:	bf4c      	ite	mi
 8007a2e:	4690      	movmi	r8, r2
 8007a30:	4698      	movpl	r8, r3
 8007a32:	f7ff fdb1 	bl	8007598 <points_to_meter>
 8007a36:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a3e:	eddf 7a44 	vldr	s15, [pc, #272]	; 8007b50 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x584>
 8007a42:	bf48      	it	mi
 8007a44:	eeb1 0a40 	vnegmi.f32	s0, s0
 8007a48:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007a4c:	4620      	mov	r0, r4
 8007a4e:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8007a52:	4631      	mov	r1, r6
 8007a54:	ee17 5a90 	vmov	r5, s15
 8007a58:	f7ff fd9e 	bl	8007598 <points_to_meter>
 8007a5c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a64:	eddf 7a3a 	vldr	s15, [pc, #232]	; 8007b50 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x584>
 8007a68:	ed9f 6a39 	vldr	s12, [pc, #228]	; 8007b50 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x584>
 8007a6c:	eddf 6a39 	vldr	s13, [pc, #228]	; 8007b54 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x588>
 8007a70:	bf48      	it	mi
 8007a72:	eeb1 0a40 	vnegmi.f32	s0, s0
 8007a76:	ee70 7a27 	vadd.f32	s15, s0, s15
 8007a7a:	4631      	mov	r1, r6
 8007a7c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a84:	bf4c      	ite	mi
 8007a86:	eeb1 7a67 	vnegmi.f32	s14, s15
 8007a8a:	eeb0 7a67 	vmovpl.f32	s14, s15
 8007a8e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8007a92:	4658      	mov	r0, fp
 8007a94:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8007a98:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8007a9c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007aa0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007aa4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007aa8:	ee17 4a90 	vmov	r4, s15
 8007aac:	f7ff fd74 	bl	8007598 <points_to_meter>
 8007ab0:	4a25      	ldr	r2, [pc, #148]	; (8007b48 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x57c>)
 8007ab2:	4b26      	ldr	r3, [pc, #152]	; (8007b4c <acc_radar_engine_common_sweep_w_dly_initialize_range+0x580>)
 8007ab4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007abc:	4631      	mov	r1, r6
 8007abe:	4658      	mov	r0, fp
 8007ac0:	bf4c      	ite	mi
 8007ac2:	4691      	movmi	r9, r2
 8007ac4:	4699      	movpl	r9, r3
 8007ac6:	f7ff fd67 	bl	8007598 <points_to_meter>
 8007aca:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ad2:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8007b50 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x584>
 8007ad6:	bf48      	it	mi
 8007ad8:	eeb1 0a40 	vnegmi.f32	s0, s0
 8007adc:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007ae0:	4631      	mov	r1, r6
 8007ae2:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8007ae6:	4658      	mov	r0, fp
 8007ae8:	ee17 6a90 	vmov	r6, s15
 8007aec:	f7ff fd54 	bl	8007598 <points_to_meter>
 8007af0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007af8:	eddf 7a15 	vldr	s15, [pc, #84]	; 8007b50 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x584>
 8007afc:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8007b50 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x584>
 8007b00:	eddf 6a14 	vldr	s13, [pc, #80]	; 8007b54 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x588>
 8007b04:	4a16      	ldr	r2, [pc, #88]	; (8007b60 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x594>)
 8007b06:	9603      	str	r6, [sp, #12]
 8007b08:	bf48      	it	mi
 8007b0a:	eeb1 0a40 	vnegmi.f32	s0, s0
 8007b0e:	ee70 7a27 	vadd.f32	s15, s0, s15
 8007b12:	f8cd 9008 	str.w	r9, [sp, #8]
 8007b16:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b1e:	bf4c      	ite	mi
 8007b20:	eeb1 7a67 	vnegmi.f32	s14, s15
 8007b24:	eeb0 7a67 	vmovpl.f32	s14, s15
 8007b28:	ee37 7a06 	vadd.f32	s14, s14, s12
 8007b2c:	9401      	str	r4, [sp, #4]
 8007b2e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8007b32:	9500      	str	r5, [sp, #0]
 8007b34:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8007b38:	4643      	mov	r3, r8
 8007b3a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007b3e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007b42:	e75d      	b.n	8007a00 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x434>
 8007b44:	20000640 	.word	0x20000640
 8007b48:	08013790 	.word	0x08013790
 8007b4c:	08014818 	.word	0x08014818
 8007b50:	350637bd 	.word	0x350637bd
 8007b54:	49742400 	.word	0x49742400
 8007b58:	08013850 	.word	0x08013850
 8007b5c:	080137cc 	.word	0x080137cc
 8007b60:	08013890 	.word	0x08013890

08007b64 <acc_radar_engine_common_sweep_w_dly_stitching_required>:
 8007b64:	8900      	ldrh	r0, [r0, #8]
 8007b66:	2801      	cmp	r0, #1
 8007b68:	bf94      	ite	ls
 8007b6a:	2000      	movls	r0, #0
 8007b6c:	2001      	movhi	r0, #1
 8007b6e:	4770      	bx	lr

08007b70 <internal_buffer_processed_read>:
 8007b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b74:	b085      	sub	sp, #20
 8007b76:	461f      	mov	r7, r3
 8007b78:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
 8007b7c:	9101      	str	r1, [sp, #4]
 8007b7e:	4682      	mov	sl, r0
 8007b80:	4689      	mov	r9, r1
 8007b82:	4615      	mov	r5, r2
 8007b84:	f7fe fcd0 	bl	8006528 <acc_rss_integration_get_max_spi_transfer_size>
 8007b88:	2300      	movs	r3, #0
 8007b8a:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007b8e:	9302      	str	r3, [sp, #8]
 8007b90:	2f00      	cmp	r7, #0
 8007b92:	d03d      	beq.n	8007c10 <internal_buffer_processed_read+0xa0>
 8007b94:	429c      	cmp	r4, r3
 8007b96:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8007b9a:	bf14      	ite	ne
 8007b9c:	f44f 4be0 	movne.w	fp, #28672	; 0x7000
 8007ba0:	f44f 4b00 	moveq.w	fp, #32768	; 0x8000
 8007ba4:	f1a0 0803 	sub.w	r8, r0, #3
 8007ba8:	9300      	str	r3, [sp, #0]
 8007baa:	fa0f fb8b 	sxth.w	fp, fp
 8007bae:	e024      	b.n	8007bfa <internal_buffer_processed_read+0x8a>
 8007bb0:	b2a6      	uxth	r6, r4
 8007bb2:	9900      	ldr	r1, [sp, #0]
 8007bb4:	f8a9 1004 	strh.w	r1, [r9, #4]
 8007bb8:	1e72      	subs	r2, r6, #1
 8007bba:	ea4b 0305 	orr.w	r3, fp, r5
 8007bbe:	f8a9 2002 	strh.w	r2, [r9, #2]
 8007bc2:	f8a9 3000 	strh.w	r3, [r9]
 8007bc6:	4649      	mov	r1, r9
 8007bc8:	2301      	movs	r3, #1
 8007bca:	4650      	mov	r0, sl
 8007bcc:	1ce2      	adds	r2, r4, #3
 8007bce:	f7fe fcdb 	bl	8006588 <acc_rss_integration_sensor_device_transfer>
 8007bd2:	9802      	ldr	r0, [sp, #8]
 8007bd4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8007bd8:	f8c9 0000 	str.w	r0, [r9]
 8007bdc:	f8a9 3004 	strh.w	r3, [r9, #4]
 8007be0:	eb09 0944 	add.w	r9, r9, r4, lsl #1
 8007be4:	442e      	add	r6, r5
 8007be6:	f8d9 0000 	ldr.w	r0, [r9]
 8007bea:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 8007bee:	9002      	str	r0, [sp, #8]
 8007bf0:	1b3f      	subs	r7, r7, r4
 8007bf2:	b2b5      	uxth	r5, r6
 8007bf4:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007bf8:	d00a      	beq.n	8007c10 <internal_buffer_processed_read+0xa0>
 8007bfa:	45b8      	cmp	r8, r7
 8007bfc:	4644      	mov	r4, r8
 8007bfe:	bf28      	it	cs
 8007c00:	463c      	movcs	r4, r7
 8007c02:	45b8      	cmp	r8, r7
 8007c04:	d2d4      	bcs.n	8007bb0 <internal_buffer_processed_read+0x40>
 8007c06:	e000      	b.n	8007c0a <internal_buffer_processed_read+0x9a>
 8007c08:	3c01      	subs	r4, #1
 8007c0a:	07e3      	lsls	r3, r4, #31
 8007c0c:	d4fc      	bmi.n	8007c08 <internal_buffer_processed_read+0x98>
 8007c0e:	e7cf      	b.n	8007bb0 <internal_buffer_processed_read+0x40>
 8007c10:	9801      	ldr	r0, [sp, #4]
 8007c12:	3006      	adds	r0, #6
 8007c14:	b005      	add	sp, #20
 8007c16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c1a:	bf00      	nop

08007c1c <acc_sensor_r2_get_max_header_length>:
 8007c1c:	2003      	movs	r0, #3
 8007c1e:	4770      	bx	lr

08007c20 <acc_sensor_r2_conf_write_instr>:
 8007c20:	b510      	push	{r4, lr}
 8007c22:	b084      	sub	sp, #16
 8007c24:	f441 43a0 	orr.w	r3, r1, #20480	; 0x5000
 8007c28:	4604      	mov	r4, r0
 8007c2a:	9201      	str	r2, [sp, #4]
 8007c2c:	f10d 010a 	add.w	r1, sp, #10
 8007c30:	a801      	add	r0, sp, #4
 8007c32:	2201      	movs	r2, #1
 8007c34:	f8ad 3008 	strh.w	r3, [sp, #8]
 8007c38:	f001 fa00 	bl	800903c <acc_utils_uint32_to_transfer_buffer>
 8007c3c:	4620      	mov	r0, r4
 8007c3e:	a902      	add	r1, sp, #8
 8007c40:	2300      	movs	r3, #0
 8007c42:	2203      	movs	r2, #3
 8007c44:	f7fe fca0 	bl	8006588 <acc_rss_integration_sensor_device_transfer>
 8007c48:	b004      	add	sp, #16
 8007c4a:	bd10      	pop	{r4, pc}

08007c4c <acc_sensor_r2_prepare_load_confmem>:
 8007c4c:	0849      	lsrs	r1, r1, #1
 8007c4e:	b538      	push	{r3, r4, r5, lr}
 8007c50:	6010      	str	r0, [r2, #0]
 8007c52:	461c      	mov	r4, r3
 8007c54:	6019      	str	r1, [r3, #0]
 8007c56:	4615      	mov	r5, r2
 8007c58:	f7fe fc66 	bl	8006528 <acc_rss_integration_get_max_spi_transfer_size>
 8007c5c:	6821      	ldr	r1, [r4, #0]
 8007c5e:	ebb1 0f50 	cmp.w	r1, r0, lsr #1
 8007c62:	d807      	bhi.n	8007c74 <acc_sensor_r2_prepare_load_confmem+0x28>
 8007c64:	682b      	ldr	r3, [r5, #0]
 8007c66:	3901      	subs	r1, #1
 8007c68:	f021 0101 	bic.w	r1, r1, #1
 8007c6c:	3302      	adds	r3, #2
 8007c6e:	602b      	str	r3, [r5, #0]
 8007c70:	6021      	str	r1, [r4, #0]
 8007c72:	bd38      	pop	{r3, r4, r5, pc}
 8007c74:	f7fe fc58 	bl	8006528 <acc_rss_integration_get_max_spi_transfer_size>
 8007c78:	0841      	lsrs	r1, r0, #1
 8007c7a:	e7f3      	b.n	8007c64 <acc_sensor_r2_prepare_load_confmem+0x18>

08007c7c <acc_sensor_r2_load_confmem>:
 8007c7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007c80:	b083      	sub	sp, #12
 8007c82:	1c5d      	adds	r5, r3, #1
 8007c84:	4606      	mov	r6, r0
 8007c86:	460c      	mov	r4, r1
 8007c88:	4617      	mov	r7, r2
 8007c8a:	f7fe fcf7 	bl	800667c <acc_rss_integration_log_level>
 8007c8e:	2803      	cmp	r0, #3
 8007c90:	ea4f 0845 	mov.w	r8, r5, lsl #1
 8007c94:	d908      	bls.n	8007ca8 <acc_sensor_r2_load_confmem+0x2c>
 8007c96:	4b11      	ldr	r3, [pc, #68]	; (8007cdc <acc_sensor_r2_load_confmem+0x60>)
 8007c98:	9400      	str	r4, [sp, #0]
 8007c9a:	f8d3 9034 	ldr.w	r9, [r3, #52]	; 0x34
 8007c9e:	4a10      	ldr	r2, [pc, #64]	; (8007ce0 <acc_sensor_r2_load_confmem+0x64>)
 8007ca0:	4910      	ldr	r1, [pc, #64]	; (8007ce4 <acc_sensor_r2_load_confmem+0x68>)
 8007ca2:	4633      	mov	r3, r6
 8007ca4:	2004      	movs	r0, #4
 8007ca6:	47c8      	blx	r9
 8007ca8:	f7fe fc3e 	bl	8006528 <acc_rss_integration_get_max_spi_transfer_size>
 8007cac:	4540      	cmp	r0, r8
 8007cae:	d208      	bcs.n	8007cc2 <acc_sensor_r2_load_confmem+0x46>
 8007cb0:	4b0a      	ldr	r3, [pc, #40]	; (8007cdc <acc_sensor_r2_load_confmem+0x60>)
 8007cb2:	4a0d      	ldr	r2, [pc, #52]	; (8007ce8 <acc_sensor_r2_load_confmem+0x6c>)
 8007cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cb6:	490b      	ldr	r1, [pc, #44]	; (8007ce4 <acc_sensor_r2_load_confmem+0x68>)
 8007cb8:	2000      	movs	r0, #0
 8007cba:	b003      	add	sp, #12
 8007cbc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007cc0:	4718      	bx	r3
 8007cc2:	f444 44a0 	orr.w	r4, r4, #20480	; 0x5000
 8007cc6:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8007cca:	4639      	mov	r1, r7
 8007ccc:	4630      	mov	r0, r6
 8007cce:	2300      	movs	r3, #0
 8007cd0:	803c      	strh	r4, [r7, #0]
 8007cd2:	b003      	add	sp, #12
 8007cd4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007cd8:	f7fe bc56 	b.w	8006588 <acc_rss_integration_sensor_device_transfer>
 8007cdc:	20000640 	.word	0x20000640
 8007ce0:	0801390c 	.word	0x0801390c
 8007ce4:	080138fc 	.word	0x080138fc
 8007ce8:	08013934 	.word	0x08013934

08007cec <acc_sensor_r2_buffer_processed_verify_size>:
 8007cec:	3103      	adds	r1, #3
 8007cee:	ebb0 0f41 	cmp.w	r0, r1, lsl #1
 8007cf2:	bf2c      	ite	cs
 8007cf4:	2001      	movcs	r0, #1
 8007cf6:	2000      	movcc	r0, #0
 8007cf8:	4770      	bx	lr
 8007cfa:	bf00      	nop

08007cfc <acc_sensor_r2_buffer_processed_read>:
 8007cfc:	b510      	push	{r4, lr}
 8007cfe:	b082      	sub	sp, #8
 8007d00:	2400      	movs	r4, #0
 8007d02:	9400      	str	r4, [sp, #0]
 8007d04:	f7ff ff34 	bl	8007b70 <internal_buffer_processed_read>
 8007d08:	b002      	add	sp, #8
 8007d0a:	bd10      	pop	{r4, pc}

08007d0c <acc_sensor_manager_power_on_and_start_sensor>:
 8007d0c:	b570      	push	{r4, r5, r6, lr}
 8007d0e:	6986      	ldr	r6, [r0, #24]
 8007d10:	4604      	mov	r4, r0
 8007d12:	4630      	mov	r0, r6
 8007d14:	f7fe fc0e 	bl	8006534 <acc_rss_integration_sensor_device_power_on>
 8007d18:	4b0a      	ldr	r3, [pc, #40]	; (8007d44 <acc_sensor_manager_power_on_and_start_sensor+0x38>)
 8007d1a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007d1c:	6819      	ldr	r1, [r3, #0]
 8007d1e:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 8007d22:	00db      	lsls	r3, r3, #3
 8007d24:	3b48      	subs	r3, #72	; 0x48
 8007d26:	4419      	add	r1, r3
 8007d28:	1d20      	adds	r0, r4, #4
 8007d2a:	f000 fe5f 	bl	80089ec <acc_sweep_manager_start>
 8007d2e:	4605      	mov	r5, r0
 8007d30:	b118      	cbz	r0, 8007d3a <acc_sensor_manager_power_on_and_start_sensor+0x2e>
 8007d32:	2301      	movs	r3, #1
 8007d34:	70e3      	strb	r3, [r4, #3]
 8007d36:	4628      	mov	r0, r5
 8007d38:	bd70      	pop	{r4, r5, r6, pc}
 8007d3a:	4630      	mov	r0, r6
 8007d3c:	f7fe fc00 	bl	8006540 <acc_rss_integration_sensor_device_power_off>
 8007d40:	4628      	mov	r0, r5
 8007d42:	bd70      	pop	{r4, r5, r6, pc}
 8007d44:	200004e8 	.word	0x200004e8

08007d48 <calibrate_sensor>:
 8007d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d4c:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8007e1c <calibrate_sensor+0xd4>
 8007d50:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 8007e20 <calibrate_sensor+0xd8>
 8007d54:	f8d8 3000 	ldr.w	r3, [r8]
 8007d58:	eb00 04c0 	add.w	r4, r0, r0, lsl #3
 8007d5c:	00e4      	lsls	r4, r4, #3
 8007d5e:	3c48      	subs	r4, #72	; 0x48
 8007d60:	4423      	add	r3, r4
 8007d62:	f04f 0900 	mov.w	r9, #0
 8007d66:	b085      	sub	sp, #20
 8007d68:	460e      	mov	r6, r1
 8007d6a:	f883 9041 	strb.w	r9, [r3, #65]	; 0x41
 8007d6e:	f883 9042 	strb.w	r9, [r3, #66]	; 0x42
 8007d72:	f8c3 b044 	str.w	fp, [r3, #68]	; 0x44
 8007d76:	4607      	mov	r7, r0
 8007d78:	4692      	mov	sl, r2
 8007d7a:	f7fe fbdb 	bl	8006534 <acc_rss_integration_sensor_device_power_on>
 8007d7e:	4630      	mov	r0, r6
 8007d80:	f000 fe10 	bl	80089a4 <acc_sweep_manager_is_sensor_connected>
 8007d84:	b968      	cbnz	r0, 8007da2 <calibrate_sensor+0x5a>
 8007d86:	4b21      	ldr	r3, [pc, #132]	; (8007e0c <calibrate_sensor+0xc4>)
 8007d88:	4a21      	ldr	r2, [pc, #132]	; (8007e10 <calibrate_sensor+0xc8>)
 8007d8a:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8007d8c:	4921      	ldr	r1, [pc, #132]	; (8007e14 <calibrate_sensor+0xcc>)
 8007d8e:	463b      	mov	r3, r7
 8007d90:	4605      	mov	r5, r0
 8007d92:	47a0      	blx	r4
 8007d94:	4638      	mov	r0, r7
 8007d96:	f7fe fbd3 	bl	8006540 <acc_rss_integration_sensor_device_power_off>
 8007d9a:	4628      	mov	r0, r5
 8007d9c:	b005      	add	sp, #20
 8007d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007da2:	4639      	mov	r1, r7
 8007da4:	200b      	movs	r0, #11
 8007da6:	f000 ffa3 	bl	8008cf0 <acc_probes_execute_primitive_probe>
 8007daa:	f8d8 2000 	ldr.w	r2, [r8]
 8007dae:	f8cd 9004 	str.w	r9, [sp, #4]
 8007db2:	4651      	mov	r1, sl
 8007db4:	4630      	mov	r0, r6
 8007db6:	4422      	add	r2, r4
 8007db8:	ab01      	add	r3, sp, #4
 8007dba:	f8cd b008 	str.w	fp, [sp, #8]
 8007dbe:	f8cd 900c 	str.w	r9, [sp, #12]
 8007dc2:	f000 fdf3 	bl	80089ac <acc_sweep_manager_calibrate>
 8007dc6:	4605      	mov	r5, r0
 8007dc8:	b9c8      	cbnz	r0, 8007dfe <calibrate_sensor+0xb6>
 8007dca:	4b10      	ldr	r3, [pc, #64]	; (8007e0c <calibrate_sensor+0xc4>)
 8007dcc:	4a12      	ldr	r2, [pc, #72]	; (8007e18 <calibrate_sensor+0xd0>)
 8007dce:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8007dd0:	4910      	ldr	r1, [pc, #64]	; (8007e14 <calibrate_sensor+0xcc>)
 8007dd2:	463b      	mov	r3, r7
 8007dd4:	47b0      	blx	r6
 8007dd6:	f8d8 3000 	ldr.w	r3, [r8]
 8007dda:	441c      	add	r4, r3
 8007ddc:	9a02      	ldr	r2, [sp, #8]
 8007dde:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007de2:	6462      	str	r2, [r4, #68]	; 0x44
 8007de4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007de8:	4639      	mov	r1, r7
 8007dea:	200c      	movs	r0, #12
 8007dec:	f000 ff80 	bl	8008cf0 <acc_probes_execute_primitive_probe>
 8007df0:	4638      	mov	r0, r7
 8007df2:	f7fe fba5 	bl	8006540 <acc_rss_integration_sensor_device_power_off>
 8007df6:	4628      	mov	r0, r5
 8007df8:	b005      	add	sp, #20
 8007dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dfe:	f8d8 3000 	ldr.w	r3, [r8]
 8007e02:	441c      	add	r4, r3
 8007e04:	2301      	movs	r3, #1
 8007e06:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8007e0a:	e7e7      	b.n	8007ddc <calibrate_sensor+0x94>
 8007e0c:	20000640 	.word	0x20000640
 8007e10:	08013954 	.word	0x08013954
 8007e14:	08013990 	.word	0x08013990
 8007e18:	080139a0 	.word	0x080139a0
 8007e1c:	200004e8 	.word	0x200004e8
 8007e20:	ff800000 	.word	0xff800000

08007e24 <acc_sensor_manager_hibernate_enter>:
 8007e24:	b538      	push	{r3, r4, r5, lr}
 8007e26:	4603      	mov	r3, r0
 8007e28:	3004      	adds	r0, #4
 8007e2a:	699d      	ldr	r5, [r3, #24]
 8007e2c:	f000 fdf6 	bl	8008a1c <acc_sweep_manager_wait_for_hibernate_ready>
 8007e30:	4604      	mov	r4, r0
 8007e32:	b930      	cbnz	r0, 8007e42 <acc_sensor_manager_hibernate_enter+0x1e>
 8007e34:	4b05      	ldr	r3, [pc, #20]	; (8007e4c <acc_sensor_manager_hibernate_enter+0x28>)
 8007e36:	4a06      	ldr	r2, [pc, #24]	; (8007e50 <acc_sensor_manager_hibernate_enter+0x2c>)
 8007e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e3a:	4906      	ldr	r1, [pc, #24]	; (8007e54 <acc_sensor_manager_hibernate_enter+0x30>)
 8007e3c:	4798      	blx	r3
 8007e3e:	4620      	mov	r0, r4
 8007e40:	bd38      	pop	{r3, r4, r5, pc}
 8007e42:	4628      	mov	r0, r5
 8007e44:	f7fe fb82 	bl	800654c <acc_rss_integration_sensor_device_hibernate_enter>
 8007e48:	4620      	mov	r0, r4
 8007e4a:	bd38      	pop	{r3, r4, r5, pc}
 8007e4c:	20000640 	.word	0x20000640
 8007e50:	080139c4 	.word	0x080139c4
 8007e54:	08013990 	.word	0x08013990

08007e58 <acc_sensor_manager_activate>:
 8007e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e5c:	4e18      	ldr	r6, [pc, #96]	; (8007ec0 <acc_sensor_manager_activate+0x68>)
 8007e5e:	7834      	ldrb	r4, [r6, #0]
 8007e60:	b114      	cbz	r4, 8007e68 <acc_sensor_manager_activate+0x10>
 8007e62:	4620      	mov	r0, r4
 8007e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e68:	f7fe fb52 	bl	8006510 <acc_rss_integration_get_sensor_count>
 8007e6c:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8007e70:	4914      	ldr	r1, [pc, #80]	; (8007ec4 <acc_sensor_manager_activate+0x6c>)
 8007e72:	4f15      	ldr	r7, [pc, #84]	; (8007ec8 <acc_sensor_manager_activate+0x70>)
 8007e74:	00c0      	lsls	r0, r0, #3
 8007e76:	f240 1253 	movw	r2, #339	; 0x153
 8007e7a:	f7fe fbab 	bl	80065d4 <acc_rss_integration_mem_alloc_debug>
 8007e7e:	6038      	str	r0, [r7, #0]
 8007e80:	2800      	cmp	r0, #0
 8007e82:	d0ee      	beq.n	8007e62 <acc_sensor_manager_activate+0xa>
 8007e84:	f8df 8044 	ldr.w	r8, [pc, #68]	; 8007ecc <acc_sensor_manager_activate+0x74>
 8007e88:	4625      	mov	r5, r4
 8007e8a:	e00e      	b.n	8007eaa <acc_sensor_manager_activate+0x52>
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e92:	4618      	mov	r0, r3
 8007e94:	2248      	movs	r2, #72	; 0x48
 8007e96:	2100      	movs	r1, #0
 8007e98:	f006 fd32 	bl	800e900 <memset>
 8007e9c:	3401      	adds	r4, #1
 8007e9e:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 8007ea2:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
 8007ea6:	f8c0 8044 	str.w	r8, [r0, #68]	; 0x44
 8007eaa:	f7fe fb31 	bl	8006510 <acc_rss_integration_get_sensor_count>
 8007eae:	42a0      	cmp	r0, r4
 8007eb0:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 8007eb4:	d8ea      	bhi.n	8007e8c <acc_sensor_manager_activate+0x34>
 8007eb6:	2401      	movs	r4, #1
 8007eb8:	7034      	strb	r4, [r6, #0]
 8007eba:	4620      	mov	r0, r4
 8007ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ec0:	200004e0 	.word	0x200004e0
 8007ec4:	08013990 	.word	0x08013990
 8007ec8:	200004e8 	.word	0x200004e8
 8007ecc:	ff800000 	.word	0xff800000

08007ed0 <acc_sensor_manager_deactivate>:
 8007ed0:	b510      	push	{r4, lr}
 8007ed2:	4c05      	ldr	r4, [pc, #20]	; (8007ee8 <acc_sensor_manager_deactivate+0x18>)
 8007ed4:	7823      	ldrb	r3, [r4, #0]
 8007ed6:	b903      	cbnz	r3, 8007eda <acc_sensor_manager_deactivate+0xa>
 8007ed8:	bd10      	pop	{r4, pc}
 8007eda:	4b04      	ldr	r3, [pc, #16]	; (8007eec <acc_sensor_manager_deactivate+0x1c>)
 8007edc:	6818      	ldr	r0, [r3, #0]
 8007ede:	f7fe fbbb 	bl	8006658 <acc_rss_integration_mem_free>
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	7023      	strb	r3, [r4, #0]
 8007ee6:	bd10      	pop	{r4, pc}
 8007ee8:	200004e0 	.word	0x200004e0
 8007eec:	200004e8 	.word	0x200004e8

08007ef0 <acc_sensor_manager_acquire_adc_data>:
 8007ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ef4:	7846      	ldrb	r6, [r0, #1]
 8007ef6:	461c      	mov	r4, r3
 8007ef8:	b13e      	cbz	r6, 8007f0a <acc_sensor_manager_acquire_adc_data+0x1a>
 8007efa:	2300      	movs	r3, #0
 8007efc:	7023      	strb	r3, [r4, #0]
 8007efe:	7063      	strb	r3, [r4, #1]
 8007f00:	70a3      	strb	r3, [r4, #2]
 8007f02:	70e3      	strb	r3, [r4, #3]
 8007f04:	4630      	mov	r0, r6
 8007f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f0a:	f8df c0fc 	ldr.w	ip, [pc, #252]	; 8008008 <acc_sensor_manager_acquire_adc_data+0x118>
 8007f0e:	f8d0 9018 	ldr.w	r9, [r0, #24]
 8007f12:	f8dc c000 	ldr.w	ip, [ip]
 8007f16:	4605      	mov	r5, r0
 8007f18:	4688      	mov	r8, r1
 8007f1a:	4617      	mov	r7, r2
 8007f1c:	f1bc 0f00 	cmp.w	ip, #0
 8007f20:	d014      	beq.n	8007f4c <acc_sensor_manager_acquire_adc_data+0x5c>
 8007f22:	f8dc a00c 	ldr.w	sl, [ip, #12]
 8007f26:	f1ba 0f00 	cmp.w	sl, #0
 8007f2a:	d00f      	beq.n	8007f4c <acc_sensor_manager_acquire_adc_data+0x5c>
 8007f2c:	47d0      	blx	sl
 8007f2e:	2800      	cmp	r0, #0
 8007f30:	d0e8      	beq.n	8007f04 <acc_sensor_manager_acquire_adc_data+0x14>
 8007f32:	786e      	ldrb	r6, [r5, #1]
 8007f34:	2e00      	cmp	r6, #0
 8007f36:	d1e5      	bne.n	8007f04 <acc_sensor_manager_acquire_adc_data+0x14>
 8007f38:	463b      	mov	r3, r7
 8007f3a:	4642      	mov	r2, r8
 8007f3c:	4649      	mov	r1, r9
 8007f3e:	2601      	movs	r6, #1
 8007f40:	2002      	movs	r0, #2
 8007f42:	f000 fea7 	bl	8008c94 <acc_probes_execute_uint16>
 8007f46:	4630      	mov	r0, r6
 8007f48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	7023      	strb	r3, [r4, #0]
 8007f50:	7063      	strb	r3, [r4, #1]
 8007f52:	70a3      	strb	r3, [r4, #2]
 8007f54:	70e3      	strb	r3, [r4, #3]
 8007f56:	f895 a000 	ldrb.w	sl, [r5]
 8007f5a:	f1ba 0f02 	cmp.w	sl, #2
 8007f5e:	d031      	beq.n	8007fc4 <acc_sensor_manager_acquire_adc_data+0xd4>
 8007f60:	f1ba 0f01 	cmp.w	sl, #1
 8007f64:	d034      	beq.n	8007fd0 <acc_sensor_manager_acquire_adc_data+0xe0>
 8007f66:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8007f68:	1d28      	adds	r0, r5, #4
 8007f6a:	f000 fd5f 	bl	8008a2c <acc_sweep_manager_acquire_adc_data>
 8007f6e:	6843      	ldr	r3, [r0, #4]
 8007f70:	b30b      	cbz	r3, 8007fb6 <acc_sensor_manager_acquire_adc_data+0xc6>
 8007f72:	4543      	cmp	r3, r8
 8007f74:	d13b      	bne.n	8007fee <acc_sensor_manager_acquire_adc_data+0xfe>
 8007f76:	8843      	ldrh	r3, [r0, #2]
 8007f78:	42bb      	cmp	r3, r7
 8007f7a:	d133      	bne.n	8007fe4 <acc_sensor_manager_acquire_adc_data+0xf4>
 8007f7c:	4b1e      	ldr	r3, [pc, #120]	; (8007ff8 <acc_sensor_manager_acquire_adc_data+0x108>)
 8007f7e:	68c1      	ldr	r1, [r0, #12]
 8007f80:	681a      	ldr	r2, [r3, #0]
 8007f82:	7a06      	ldrb	r6, [r0, #8]
 8007f84:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8007f88:	00db      	lsls	r3, r3, #3
 8007f8a:	3b48      	subs	r3, #72	; 0x48
 8007f8c:	4413      	add	r3, r2
 8007f8e:	7802      	ldrb	r2, [r0, #0]
 8007f90:	7022      	strb	r2, [r4, #0]
 8007f92:	7842      	ldrb	r2, [r0, #1]
 8007f94:	7062      	strb	r2, [r4, #1]
 8007f96:	f1ba 0f02 	cmp.w	sl, #2
 8007f9a:	7a42      	ldrb	r2, [r0, #9]
 8007f9c:	70e2      	strb	r2, [r4, #3]
 8007f9e:	70a6      	strb	r6, [r4, #2]
 8007fa0:	6459      	str	r1, [r3, #68]	; 0x44
 8007fa2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007fa6:	d017      	beq.n	8007fd8 <acc_sensor_manager_acquire_adc_data+0xe8>
 8007fa8:	f1ba 0f01 	cmp.w	sl, #1
 8007fac:	d1c1      	bne.n	8007f32 <acc_sensor_manager_acquire_adc_data+0x42>
 8007fae:	4628      	mov	r0, r5
 8007fb0:	f7ff ff38 	bl	8007e24 <acc_sensor_manager_hibernate_enter>
 8007fb4:	e7bd      	b.n	8007f32 <acc_sensor_manager_acquire_adc_data+0x42>
 8007fb6:	4911      	ldr	r1, [pc, #68]	; (8007ffc <acc_sensor_manager_acquire_adc_data+0x10c>)
 8007fb8:	4a11      	ldr	r2, [pc, #68]	; (8008000 <acc_sensor_manager_acquire_adc_data+0x110>)
 8007fba:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 8007fbc:	4911      	ldr	r1, [pc, #68]	; (8008004 <acc_sensor_manager_acquire_adc_data+0x114>)
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	47a0      	blx	r4
 8007fc2:	e79f      	b.n	8007f04 <acc_sensor_manager_acquire_adc_data+0x14>
 8007fc4:	4628      	mov	r0, r5
 8007fc6:	f7ff fea1 	bl	8007d0c <acc_sensor_manager_power_on_and_start_sensor>
 8007fca:	2800      	cmp	r0, #0
 8007fcc:	d1cb      	bne.n	8007f66 <acc_sensor_manager_acquire_adc_data+0x76>
 8007fce:	e799      	b.n	8007f04 <acc_sensor_manager_acquire_adc_data+0x14>
 8007fd0:	4648      	mov	r0, r9
 8007fd2:	f7fe fac3 	bl	800655c <acc_rss_integration_sensor_device_hibernate_exit>
 8007fd6:	e7c6      	b.n	8007f66 <acc_sensor_manager_acquire_adc_data+0x76>
 8007fd8:	4648      	mov	r0, r9
 8007fda:	f7fe fab1 	bl	8006540 <acc_rss_integration_sensor_device_power_off>
 8007fde:	2300      	movs	r3, #0
 8007fe0:	70eb      	strb	r3, [r5, #3]
 8007fe2:	e7a6      	b.n	8007f32 <acc_sensor_manager_acquire_adc_data+0x42>
 8007fe4:	4807      	ldr	r0, [pc, #28]	; (8008004 <acc_sensor_manager_acquire_adc_data+0x114>)
 8007fe6:	f240 11c9 	movw	r1, #457	; 0x1c9
 8007fea:	f000 fd6b 	bl	8008ac4 <acc_assert_fail>
 8007fee:	4805      	ldr	r0, [pc, #20]	; (8008004 <acc_sensor_manager_acquire_adc_data+0x114>)
 8007ff0:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 8007ff4:	f000 fd66 	bl	8008ac4 <acc_assert_fail>
 8007ff8:	200004e8 	.word	0x200004e8
 8007ffc:	20000640 	.word	0x20000640
 8008000:	080139e4 	.word	0x080139e4
 8008004:	08013990 	.word	0x08013990
 8008008:	200004e4 	.word	0x200004e4

0800800c <acc_sensor_manager_prepare_radar_engine>:
 800800c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008010:	f100 0804 	add.w	r8, r0, #4
 8008014:	4617      	mov	r7, r2
 8008016:	4605      	mov	r5, r0
 8008018:	2234      	movs	r2, #52	; 0x34
 800801a:	460c      	mov	r4, r1
 800801c:	4640      	mov	r0, r8
 800801e:	2100      	movs	r1, #0
 8008020:	461e      	mov	r6, r3
 8008022:	f006 fc6d 	bl	800e900 <memset>
 8008026:	4b1e      	ldr	r3, [pc, #120]	; (80080a0 <acc_sensor_manager_prepare_radar_engine+0x94>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	463a      	mov	r2, r7
 800802c:	4640      	mov	r0, r8
 800802e:	b33b      	cbz	r3, 8008080 <acc_sensor_manager_prepare_radar_engine+0x74>
 8008030:	f8d3 9000 	ldr.w	r9, [r3]
 8008034:	f1b9 0f00 	cmp.w	r9, #0
 8008038:	d022      	beq.n	8008080 <acc_sensor_manager_prepare_radar_engine+0x74>
 800803a:	4633      	mov	r3, r6
 800803c:	4621      	mov	r1, r4
 800803e:	47c8      	blx	r9
 8008040:	4607      	mov	r7, r0
 8008042:	4620      	mov	r0, r4
 8008044:	f7fd fefe 	bl	8005e44 <acc_base_configuration_power_save_mode_get>
 8008048:	b320      	cbz	r0, 8008094 <acc_sensor_manager_prepare_radar_engine+0x88>
 800804a:	2804      	cmp	r0, #4
 800804c:	d025      	beq.n	800809a <acc_sensor_manager_prepare_radar_engine+0x8e>
 800804e:	2300      	movs	r3, #0
 8008050:	702b      	strb	r3, [r5, #0]
 8008052:	4620      	mov	r0, r4
 8008054:	f7fd ffc0 	bl	8005fd8 <acc_base_configuration_repetition_mode_get>
 8008058:	fab0 f280 	clz	r2, r0
 800805c:	0952      	lsrs	r2, r2, #5
 800805e:	706a      	strb	r2, [r5, #1]
 8008060:	4620      	mov	r0, r4
 8008062:	f7fe f8cf 	bl	8006204 <acc_base_configuration_asynchronous_measurement_get>
 8008066:	70a8      	strb	r0, [r5, #2]
 8008068:	4620      	mov	r0, r4
 800806a:	f7fd fe9b 	bl	8005da4 <acc_base_configuration_sensor_get>
 800806e:	4632      	mov	r2, r6
 8008070:	4601      	mov	r1, r0
 8008072:	231a      	movs	r3, #26
 8008074:	2005      	movs	r0, #5
 8008076:	f000 fe23 	bl	8008cc0 <acc_probes_execute_struct>
 800807a:	4638      	mov	r0, r7
 800807c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008080:	4633      	mov	r3, r6
 8008082:	4621      	mov	r1, r4
 8008084:	f000 fbec 	bl	8008860 <acc_sweep_manager_prepare>
 8008088:	4607      	mov	r7, r0
 800808a:	4620      	mov	r0, r4
 800808c:	f7fd feda 	bl	8005e44 <acc_base_configuration_power_save_mode_get>
 8008090:	2800      	cmp	r0, #0
 8008092:	d1da      	bne.n	800804a <acc_sensor_manager_prepare_radar_engine+0x3e>
 8008094:	2302      	movs	r3, #2
 8008096:	702b      	strb	r3, [r5, #0]
 8008098:	e7db      	b.n	8008052 <acc_sensor_manager_prepare_radar_engine+0x46>
 800809a:	2301      	movs	r3, #1
 800809c:	702b      	strb	r3, [r5, #0]
 800809e:	e7d8      	b.n	8008052 <acc_sensor_manager_prepare_radar_engine+0x46>
 80080a0:	200004e4 	.word	0x200004e4

080080a4 <acc_sensor_manager_prepare_measurement>:
 80080a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080a8:	4680      	mov	r8, r0
 80080aa:	b083      	sub	sp, #12
 80080ac:	4608      	mov	r0, r1
 80080ae:	460e      	mov	r6, r1
 80080b0:	4617      	mov	r7, r2
 80080b2:	469a      	mov	sl, r3
 80080b4:	f7fd fe76 	bl	8005da4 <acc_base_configuration_sensor_get>
 80080b8:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 80081a0 <acc_sensor_manager_prepare_measurement+0xfc>
 80080bc:	4605      	mov	r5, r0
 80080be:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
 80080c2:	4630      	mov	r0, r6
 80080c4:	f7fe f894 	bl	80061f0 <acc_base_configuration_noise_deviation_override_get>
 80080c8:	00e4      	lsls	r4, r4, #3
 80080ca:	f8d9 1000 	ldr.w	r1, [r9]
 80080ce:	4b32      	ldr	r3, [pc, #200]	; (8008198 <acc_sensor_manager_prepare_measurement+0xf4>)
 80080d0:	4a32      	ldr	r2, [pc, #200]	; (800819c <acc_sensor_manager_prepare_measurement+0xf8>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	3c48      	subs	r4, #72	; 0x48
 80080d6:	440c      	add	r4, r1
 80080d8:	2100      	movs	r1, #0
 80080da:	4683      	mov	fp, r0
 80080dc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80080e0:	6462      	str	r2, [r4, #68]	; 0x44
 80080e2:	b163      	cbz	r3, 80080fe <acc_sensor_manager_prepare_measurement+0x5a>
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	b153      	cbz	r3, 80080fe <acc_sensor_manager_prepare_measurement+0x5a>
 80080e8:	4652      	mov	r2, sl
 80080ea:	4630      	mov	r0, r6
 80080ec:	4639      	mov	r1, r7
 80080ee:	4798      	blx	r3
 80080f0:	4604      	mov	r4, r0
 80080f2:	2800      	cmp	r0, #0
 80080f4:	d14b      	bne.n	800818e <acc_sensor_manager_prepare_measurement+0xea>
 80080f6:	4620      	mov	r0, r4
 80080f8:	b003      	add	sp, #12
 80080fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080fe:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8008102:	f8c8 a038 	str.w	sl, [r8, #56]	; 0x38
 8008106:	b17b      	cbz	r3, 8008128 <acc_sensor_manager_prepare_measurement+0x84>
 8008108:	f1bb 0f00 	cmp.w	fp, #0
 800810c:	d01b      	beq.n	8008146 <acc_sensor_manager_prepare_measurement+0xa2>
 800810e:	f8a7 b014 	strh.w	fp, [r7, #20]
 8008112:	463a      	mov	r2, r7
 8008114:	4629      	mov	r1, r5
 8008116:	2320      	movs	r3, #32
 8008118:	200e      	movs	r0, #14
 800811a:	f000 fdd1 	bl	8008cc0 <acc_probes_execute_struct>
 800811e:	2401      	movs	r4, #1
 8008120:	4620      	mov	r0, r4
 8008122:	b003      	add	sp, #12
 8008124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008128:	f108 0104 	add.w	r1, r8, #4
 800812c:	4652      	mov	r2, sl
 800812e:	4628      	mov	r0, r5
 8008130:	9101      	str	r1, [sp, #4]
 8008132:	f7ff fe09 	bl	8007d48 <calibrate_sensor>
 8008136:	9901      	ldr	r1, [sp, #4]
 8008138:	4604      	mov	r4, r0
 800813a:	2800      	cmp	r0, #0
 800813c:	d1e4      	bne.n	8008108 <acc_sensor_manager_prepare_measurement+0x64>
 800813e:	4608      	mov	r0, r1
 8008140:	f000 fc28 	bl	8008994 <acc_sweep_manager_release>
 8008144:	e7d7      	b.n	80080f6 <acc_sensor_manager_prepare_measurement+0x52>
 8008146:	4630      	mov	r0, r6
 8008148:	f7fe f83e 	bl	80061c8 <acc_base_configuration_noise_level_normalization_get>
 800814c:	2800      	cmp	r0, #0
 800814e:	d0e0      	beq.n	8008112 <acc_sensor_manager_prepare_measurement+0x6e>
 8008150:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8008154:	4630      	mov	r0, r6
 8008156:	f7fe f9ed 	bl	8006534 <acc_rss_integration_sensor_device_power_on>
 800815a:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 800815e:	f8d9 1000 	ldr.w	r1, [r9]
 8008162:	f8d8 2038 	ldr.w	r2, [r8, #56]	; 0x38
 8008166:	00db      	lsls	r3, r3, #3
 8008168:	3b48      	subs	r3, #72	; 0x48
 800816a:	f108 0804 	add.w	r8, r8, #4
 800816e:	4419      	add	r1, r3
 8008170:	4640      	mov	r0, r8
 8008172:	f107 0314 	add.w	r3, r7, #20
 8008176:	f000 fc23 	bl	80089c0 <acc_sweep_manager_measure_noise>
 800817a:	4604      	mov	r4, r0
 800817c:	4630      	mov	r0, r6
 800817e:	f7fe f9df 	bl	8006540 <acc_rss_integration_sensor_device_power_off>
 8008182:	2c00      	cmp	r4, #0
 8008184:	d1c5      	bne.n	8008112 <acc_sensor_manager_prepare_measurement+0x6e>
 8008186:	4640      	mov	r0, r8
 8008188:	f000 fc04 	bl	8008994 <acc_sweep_manager_release>
 800818c:	e7b3      	b.n	80080f6 <acc_sensor_manager_prepare_measurement+0x52>
 800818e:	f1bb 0f00 	cmp.w	fp, #0
 8008192:	d0be      	beq.n	8008112 <acc_sensor_manager_prepare_measurement+0x6e>
 8008194:	e7bb      	b.n	800810e <acc_sensor_manager_prepare_measurement+0x6a>
 8008196:	bf00      	nop
 8008198:	200004e4 	.word	0x200004e4
 800819c:	ff800000 	.word	0xff800000
 80081a0:	200004e8 	.word	0x200004e8

080081a4 <acc_sensor_manager_start_measurement>:
 80081a4:	4b1b      	ldr	r3, [pc, #108]	; (8008214 <acc_sensor_manager_start_measurement+0x70>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	b570      	push	{r4, r5, r6, lr}
 80081aa:	4604      	mov	r4, r0
 80081ac:	b123      	cbz	r3, 80081b8 <acc_sensor_manager_start_measurement+0x14>
 80081ae:	689b      	ldr	r3, [r3, #8]
 80081b0:	b113      	cbz	r3, 80081b8 <acc_sensor_manager_start_measurement+0x14>
 80081b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80081b6:	4718      	bx	r3
 80081b8:	7823      	ldrb	r3, [r4, #0]
 80081ba:	2b02      	cmp	r3, #2
 80081bc:	d008      	beq.n	80081d0 <acc_sensor_manager_start_measurement+0x2c>
 80081be:	4620      	mov	r0, r4
 80081c0:	f7ff fda4 	bl	8007d0c <acc_sensor_manager_power_on_and_start_sensor>
 80081c4:	b160      	cbz	r0, 80081e0 <acc_sensor_manager_start_measurement+0x3c>
 80081c6:	78a3      	ldrb	r3, [r4, #2]
 80081c8:	b12b      	cbz	r3, 80081d6 <acc_sensor_manager_start_measurement+0x32>
 80081ca:	7823      	ldrb	r3, [r4, #0]
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d010      	beq.n	80081f2 <acc_sensor_manager_start_measurement+0x4e>
 80081d0:	2501      	movs	r5, #1
 80081d2:	4628      	mov	r0, r5
 80081d4:	bd70      	pop	{r4, r5, r6, pc}
 80081d6:	1d25      	adds	r5, r4, #4
 80081d8:	4628      	mov	r0, r5
 80081da:	f000 fc23 	bl	8008a24 <acc_sweep_manager_measure>
 80081de:	b910      	cbnz	r0, 80081e6 <acc_sensor_manager_start_measurement+0x42>
 80081e0:	2500      	movs	r5, #0
 80081e2:	4628      	mov	r0, r5
 80081e4:	bd70      	pop	{r4, r5, r6, pc}
 80081e6:	4628      	mov	r0, r5
 80081e8:	f000 fc12 	bl	8008a10 <acc_sweep_manager_wait_for_data>
 80081ec:	2800      	cmp	r0, #0
 80081ee:	d1ec      	bne.n	80081ca <acc_sensor_manager_start_measurement+0x26>
 80081f0:	e7f6      	b.n	80081e0 <acc_sensor_manager_start_measurement+0x3c>
 80081f2:	1d25      	adds	r5, r4, #4
 80081f4:	4628      	mov	r0, r5
 80081f6:	f000 fc0b 	bl	8008a10 <acc_sweep_manager_wait_for_data>
 80081fa:	2800      	cmp	r0, #0
 80081fc:	d0f0      	beq.n	80081e0 <acc_sensor_manager_start_measurement+0x3c>
 80081fe:	4628      	mov	r0, r5
 8008200:	f000 fc10 	bl	8008a24 <acc_sweep_manager_measure>
 8008204:	4605      	mov	r5, r0
 8008206:	2800      	cmp	r0, #0
 8008208:	d0ea      	beq.n	80081e0 <acc_sensor_manager_start_measurement+0x3c>
 800820a:	4620      	mov	r0, r4
 800820c:	f7ff fe0a 	bl	8007e24 <acc_sensor_manager_hibernate_enter>
 8008210:	e7df      	b.n	80081d2 <acc_sensor_manager_start_measurement+0x2e>
 8008212:	bf00      	nop
 8008214:	200004e4 	.word	0x200004e4

08008218 <acc_sensor_manager_stop_measurement>:
 8008218:	78c3      	ldrb	r3, [r0, #3]
 800821a:	b903      	cbnz	r3, 800821e <acc_sensor_manager_stop_measurement+0x6>
 800821c:	4770      	bx	lr
 800821e:	b510      	push	{r4, lr}
 8008220:	4604      	mov	r4, r0
 8008222:	6980      	ldr	r0, [r0, #24]
 8008224:	f7fe f98c 	bl	8006540 <acc_rss_integration_sensor_device_power_off>
 8008228:	2300      	movs	r3, #0
 800822a:	70e3      	strb	r3, [r4, #3]
 800822c:	bd10      	pop	{r4, pc}
 800822e:	bf00      	nop

08008230 <acc_sensor_manager_release_measurement>:
 8008230:	6983      	ldr	r3, [r0, #24]
 8008232:	b173      	cbz	r3, 8008252 <acc_sensor_manager_release_measurement+0x22>
 8008234:	4a07      	ldr	r2, [pc, #28]	; (8008254 <acc_sensor_manager_release_measurement+0x24>)
 8008236:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800823a:	6812      	ldr	r2, [r2, #0]
 800823c:	00db      	lsls	r3, r3, #3
 800823e:	3b48      	subs	r3, #72	; 0x48
 8008240:	4413      	add	r3, r2
 8008242:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8008246:	b90a      	cbnz	r2, 800824c <acc_sensor_manager_release_measurement+0x1c>
 8008248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800824c:	3004      	adds	r0, #4
 800824e:	f000 bba1 	b.w	8008994 <acc_sweep_manager_release>
 8008252:	4770      	bx	lr
 8008254:	200004e8 	.word	0x200004e8

08008258 <acc_sensor_manager_get_sensor_id>:
 8008258:	6980      	ldr	r0, [r0, #24]
 800825a:	4770      	bx	lr

0800825c <acc_sensor_protocol_r2_prepare_load>:
 800825c:	b570      	push	{r4, r5, r6, lr}
 800825e:	b084      	sub	sp, #16
 8008260:	4604      	mov	r4, r0
 8008262:	4608      	mov	r0, r1
 8008264:	4611      	mov	r1, r2
 8008266:	461a      	mov	r2, r3
 8008268:	9b08      	ldr	r3, [sp, #32]
 800826a:	f7ff fcef 	bl	8007c4c <acc_sensor_r2_prepare_load_confmem>
 800826e:	2300      	movs	r3, #0
 8008270:	4620      	mov	r0, r4
 8008272:	f10d 020e 	add.w	r2, sp, #14
 8008276:	212a      	movs	r1, #42	; 0x2a
 8008278:	f8ad 300e 	strh.w	r3, [sp, #14]
 800827c:	f000 fd50 	bl	8008d20 <acc_sensor_reg_read>
 8008280:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8008284:	065b      	lsls	r3, r3, #25
 8008286:	d436      	bmi.n	80082f6 <acc_sensor_protocol_r2_prepare_load+0x9a>
 8008288:	f10d 020e 	add.w	r2, sp, #14
 800828c:	2500      	movs	r5, #0
 800828e:	2111      	movs	r1, #17
 8008290:	4620      	mov	r0, r4
 8008292:	f8ad 500e 	strh.w	r5, [sp, #14]
 8008296:	f000 fd43 	bl	8008d20 <acc_sensor_reg_read>
 800829a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800829e:	f413 6680 	ands.w	r6, r3, #1024	; 0x400
 80082a2:	d00c      	beq.n	80082be <acc_sensor_protocol_r2_prepare_load+0x62>
 80082a4:	4b1b      	ldr	r3, [pc, #108]	; (8008314 <acc_sensor_protocol_r2_prepare_load+0xb8>)
 80082a6:	4a1c      	ldr	r2, [pc, #112]	; (8008318 <acc_sensor_protocol_r2_prepare_load+0xbc>)
 80082a8:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 80082aa:	491c      	ldr	r1, [pc, #112]	; (800831c <acc_sensor_protocol_r2_prepare_load+0xc0>)
 80082ac:	4623      	mov	r3, r4
 80082ae:	4628      	mov	r0, r5
 80082b0:	47b0      	blx	r6
 80082b2:	4620      	mov	r0, r4
 80082b4:	f004 f888 	bl	800c3c8 <acc_sensor_diagnostics_r2_sensor_status>
 80082b8:	4628      	mov	r0, r5
 80082ba:	b004      	add	sp, #16
 80082bc:	bd70      	pop	{r4, r5, r6, pc}
 80082be:	2501      	movs	r5, #1
 80082c0:	4629      	mov	r1, r5
 80082c2:	4620      	mov	r0, r4
 80082c4:	9500      	str	r5, [sp, #0]
 80082c6:	2380      	movs	r3, #128	; 0x80
 80082c8:	2202      	movs	r2, #2
 80082ca:	f000 fd4f 	bl	8008d6c <acc_sensor_reg_field_write>
 80082ce:	2380      	movs	r3, #128	; 0x80
 80082d0:	461a      	mov	r2, r3
 80082d2:	4620      	mov	r0, r4
 80082d4:	9600      	str	r6, [sp, #0]
 80082d6:	2107      	movs	r1, #7
 80082d8:	f000 fd48 	bl	8008d6c <acc_sensor_reg_field_write>
 80082dc:	462a      	mov	r2, r5
 80082de:	4620      	mov	r0, r4
 80082e0:	2105      	movs	r1, #5
 80082e2:	f000 fd33 	bl	8008d4c <acc_sensor_reg_write>
 80082e6:	4620      	mov	r0, r4
 80082e8:	2203      	movs	r2, #3
 80082ea:	217a      	movs	r1, #122	; 0x7a
 80082ec:	f000 fd2e 	bl	8008d4c <acc_sensor_reg_write>
 80082f0:	4628      	mov	r0, r5
 80082f2:	b004      	add	sp, #16
 80082f4:	bd70      	pop	{r4, r5, r6, pc}
 80082f6:	f7fe f9c1 	bl	800667c <acc_rss_integration_log_level>
 80082fa:	b130      	cbz	r0, 800830a <acc_sensor_protocol_r2_prepare_load+0xae>
 80082fc:	4b05      	ldr	r3, [pc, #20]	; (8008314 <acc_sensor_protocol_r2_prepare_load+0xb8>)
 80082fe:	4a08      	ldr	r2, [pc, #32]	; (8008320 <acc_sensor_protocol_r2_prepare_load+0xc4>)
 8008300:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8008302:	4906      	ldr	r1, [pc, #24]	; (800831c <acc_sensor_protocol_r2_prepare_load+0xc0>)
 8008304:	4623      	mov	r3, r4
 8008306:	2001      	movs	r0, #1
 8008308:	47a8      	blx	r5
 800830a:	4620      	mov	r0, r4
 800830c:	f004 f85c 	bl	800c3c8 <acc_sensor_diagnostics_r2_sensor_status>
 8008310:	e7ba      	b.n	8008288 <acc_sensor_protocol_r2_prepare_load+0x2c>
 8008312:	bf00      	nop
 8008314:	20000640 	.word	0x20000640
 8008318:	08013a3c 	.word	0x08013a3c
 800831c:	08013a28 	.word	0x08013a28
 8008320:	080139fc 	.word	0x080139fc

08008324 <acc_sensor_protocol_r2_run_program>:
 8008324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008326:	b085      	sub	sp, #20
 8008328:	4604      	mov	r4, r0
 800832a:	460e      	mov	r6, r1
 800832c:	f7fe f9a6 	bl	800667c <acc_rss_integration_log_level>
 8008330:	2803      	cmp	r0, #3
 8008332:	d907      	bls.n	8008344 <acc_sensor_protocol_r2_run_program+0x20>
 8008334:	4b1e      	ldr	r3, [pc, #120]	; (80083b0 <acc_sensor_protocol_r2_run_program+0x8c>)
 8008336:	9600      	str	r6, [sp, #0]
 8008338:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 800833a:	4a1e      	ldr	r2, [pc, #120]	; (80083b4 <acc_sensor_protocol_r2_run_program+0x90>)
 800833c:	491e      	ldr	r1, [pc, #120]	; (80083b8 <acc_sensor_protocol_r2_run_program+0x94>)
 800833e:	4623      	mov	r3, r4
 8008340:	2004      	movs	r0, #4
 8008342:	47a8      	blx	r5
 8008344:	f10d 020e 	add.w	r2, sp, #14
 8008348:	2700      	movs	r7, #0
 800834a:	2111      	movs	r1, #17
 800834c:	4620      	mov	r0, r4
 800834e:	f8ad 700e 	strh.w	r7, [sp, #14]
 8008352:	f000 fce5 	bl	8008d20 <acc_sensor_reg_read>
 8008356:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 800835a:	f412 6580 	ands.w	r5, r2, #1024	; 0x400
 800835e:	d11a      	bne.n	8008396 <acc_sensor_protocol_r2_run_program+0x72>
 8008360:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008364:	d309      	bcc.n	800837a <acc_sensor_protocol_r2_run_program+0x56>
 8008366:	4b12      	ldr	r3, [pc, #72]	; (80083b0 <acc_sensor_protocol_r2_run_program+0x8c>)
 8008368:	4a14      	ldr	r2, [pc, #80]	; (80083bc <acc_sensor_protocol_r2_run_program+0x98>)
 800836a:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800836c:	4912      	ldr	r1, [pc, #72]	; (80083b8 <acc_sensor_protocol_r2_run_program+0x94>)
 800836e:	4628      	mov	r0, r5
 8008370:	4633      	mov	r3, r6
 8008372:	47a0      	blx	r4
 8008374:	4628      	mov	r0, r5
 8008376:	b005      	add	sp, #20
 8008378:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800837a:	462a      	mov	r2, r5
 800837c:	4620      	mov	r0, r4
 800837e:	2110      	movs	r1, #16
 8008380:	f000 fce4 	bl	8008d4c <acc_sensor_reg_write>
 8008384:	4620      	mov	r0, r4
 8008386:	f446 6280 	orr.w	r2, r6, #1024	; 0x400
 800838a:	2110      	movs	r1, #16
 800838c:	f000 fcde 	bl	8008d4c <acc_sensor_reg_write>
 8008390:	2001      	movs	r0, #1
 8008392:	b005      	add	sp, #20
 8008394:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008396:	4b06      	ldr	r3, [pc, #24]	; (80083b0 <acc_sensor_protocol_r2_run_program+0x8c>)
 8008398:	4a09      	ldr	r2, [pc, #36]	; (80083c0 <acc_sensor_protocol_r2_run_program+0x9c>)
 800839a:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 800839c:	4906      	ldr	r1, [pc, #24]	; (80083b8 <acc_sensor_protocol_r2_run_program+0x94>)
 800839e:	4623      	mov	r3, r4
 80083a0:	4638      	mov	r0, r7
 80083a2:	47a8      	blx	r5
 80083a4:	4620      	mov	r0, r4
 80083a6:	f004 f80f 	bl	800c3c8 <acc_sensor_diagnostics_r2_sensor_status>
 80083aa:	4638      	mov	r0, r7
 80083ac:	b005      	add	sp, #20
 80083ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083b0:	20000640 	.word	0x20000640
 80083b4:	08013a6c 	.word	0x08013a6c
 80083b8:	08013a28 	.word	0x08013a28
 80083bc:	08013ac0 	.word	0x08013ac0
 80083c0:	08013a90 	.word	0x08013a90

080083c4 <acc_sensor_protocol_r2_terminate_program>:
 80083c4:	b530      	push	{r4, r5, lr}
 80083c6:	b083      	sub	sp, #12
 80083c8:	2300      	movs	r3, #0
 80083ca:	f10d 0206 	add.w	r2, sp, #6
 80083ce:	2111      	movs	r1, #17
 80083d0:	f8ad 3006 	strh.w	r3, [sp, #6]
 80083d4:	4605      	mov	r5, r0
 80083d6:	f000 fca3 	bl	8008d20 <acc_sensor_reg_read>
 80083da:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80083de:	f413 6480 	ands.w	r4, r3, #1024	; 0x400
 80083e2:	d10b      	bne.n	80083fc <acc_sensor_protocol_r2_terminate_program+0x38>
 80083e4:	4b09      	ldr	r3, [pc, #36]	; (800840c <acc_sensor_protocol_r2_terminate_program+0x48>)
 80083e6:	4a0a      	ldr	r2, [pc, #40]	; (8008410 <acc_sensor_protocol_r2_terminate_program+0x4c>)
 80083e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083ea:	490a      	ldr	r1, [pc, #40]	; (8008414 <acc_sensor_protocol_r2_terminate_program+0x50>)
 80083ec:	4620      	mov	r0, r4
 80083ee:	4798      	blx	r3
 80083f0:	4628      	mov	r0, r5
 80083f2:	f003 ffe9 	bl	800c3c8 <acc_sensor_diagnostics_r2_sensor_status>
 80083f6:	4620      	mov	r0, r4
 80083f8:	b003      	add	sp, #12
 80083fa:	bd30      	pop	{r4, r5, pc}
 80083fc:	4628      	mov	r0, r5
 80083fe:	2201      	movs	r2, #1
 8008400:	2174      	movs	r1, #116	; 0x74
 8008402:	f000 fca3 	bl	8008d4c <acc_sensor_reg_write>
 8008406:	2001      	movs	r0, #1
 8008408:	b003      	add	sp, #12
 800840a:	bd30      	pop	{r4, r5, pc}
 800840c:	20000640 	.word	0x20000640
 8008410:	08013adc 	.word	0x08013adc
 8008414:	08013a28 	.word	0x08013a28

08008418 <acc_sensor_protocol_r2_is_sensor_running>:
 8008418:	b500      	push	{lr}
 800841a:	b083      	sub	sp, #12
 800841c:	2300      	movs	r3, #0
 800841e:	f10d 0206 	add.w	r2, sp, #6
 8008422:	2111      	movs	r1, #17
 8008424:	f8ad 3006 	strh.w	r3, [sp, #6]
 8008428:	f000 fc7a 	bl	8008d20 <acc_sensor_reg_read>
 800842c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8008430:	f3c0 2080 	ubfx	r0, r0, #10, #1
 8008434:	b003      	add	sp, #12
 8008436:	f85d fb04 	ldr.w	pc, [sp], #4
 800843a:	bf00      	nop

0800843c <acc_sensor_protocol_r2_ack_event>:
 800843c:	b570      	push	{r4, r5, r6, lr}
 800843e:	b082      	sub	sp, #8
 8008440:	2300      	movs	r3, #0
 8008442:	f10d 0206 	add.w	r2, sp, #6
 8008446:	2138      	movs	r1, #56	; 0x38
 8008448:	4605      	mov	r5, r0
 800844a:	f8ad 3006 	strh.w	r3, [sp, #6]
 800844e:	f000 fc67 	bl	8008d20 <acc_sensor_reg_read>
 8008452:	f8bd 4006 	ldrh.w	r4, [sp, #6]
 8008456:	b114      	cbz	r4, 800845e <acc_sensor_protocol_r2_ack_event+0x22>
 8008458:	2001      	movs	r0, #1
 800845a:	b002      	add	sp, #8
 800845c:	bd70      	pop	{r4, r5, r6, pc}
 800845e:	4b06      	ldr	r3, [pc, #24]	; (8008478 <acc_sensor_protocol_r2_ack_event+0x3c>)
 8008460:	4a06      	ldr	r2, [pc, #24]	; (800847c <acc_sensor_protocol_r2_ack_event+0x40>)
 8008462:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8008464:	4906      	ldr	r1, [pc, #24]	; (8008480 <acc_sensor_protocol_r2_ack_event+0x44>)
 8008466:	462b      	mov	r3, r5
 8008468:	4620      	mov	r0, r4
 800846a:	47b0      	blx	r6
 800846c:	4628      	mov	r0, r5
 800846e:	f003 ffab 	bl	800c3c8 <acc_sensor_diagnostics_r2_sensor_status>
 8008472:	4620      	mov	r0, r4
 8008474:	b002      	add	sp, #8
 8008476:	bd70      	pop	{r4, r5, r6, pc}
 8008478:	20000640 	.word	0x20000640
 800847c:	08013b10 	.word	0x08013b10
 8008480:	08013a28 	.word	0x08013a28

08008484 <acc_sensor_protocol_r2_get_event>:
 8008484:	b570      	push	{r4, r5, r6, lr}
 8008486:	460c      	mov	r4, r1
 8008488:	b084      	sub	sp, #16
 800848a:	b301      	cbz	r1, 80084ce <acc_sensor_protocol_r2_get_event+0x4a>
 800848c:	f10d 020e 	add.w	r2, sp, #14
 8008490:	2128      	movs	r1, #40	; 0x28
 8008492:	4605      	mov	r5, r0
 8008494:	f000 fc44 	bl	8008d20 <acc_sensor_reg_read>
 8008498:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 800849c:	8062      	strh	r2, [r4, #2]
 800849e:	b2d3      	uxtb	r3, r2
 80084a0:	2b01      	cmp	r3, #1
 80084a2:	7023      	strb	r3, [r4, #0]
 80084a4:	d026      	beq.n	80084f4 <acc_sensor_protocol_r2_get_event+0x70>
 80084a6:	d80c      	bhi.n	80084c2 <acc_sensor_protocol_r2_get_event+0x3e>
 80084a8:	4b22      	ldr	r3, [pc, #136]	; (8008534 <acc_sensor_protocol_r2_get_event+0xb0>)
 80084aa:	4a23      	ldr	r2, [pc, #140]	; (8008538 <acc_sensor_protocol_r2_get_event+0xb4>)
 80084ac:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 80084ae:	4923      	ldr	r1, [pc, #140]	; (800853c <acc_sensor_protocol_r2_get_event+0xb8>)
 80084b0:	462b      	mov	r3, r5
 80084b2:	2000      	movs	r0, #0
 80084b4:	47a0      	blx	r4
 80084b6:	4628      	mov	r0, r5
 80084b8:	f003 ff86 	bl	800c3c8 <acc_sensor_diagnostics_r2_sensor_status>
 80084bc:	2000      	movs	r0, #0
 80084be:	b004      	add	sp, #16
 80084c0:	bd70      	pop	{r4, r5, r6, pc}
 80084c2:	1e9a      	subs	r2, r3, #2
 80084c4:	2a09      	cmp	r2, #9
 80084c6:	d80b      	bhi.n	80084e0 <acc_sensor_protocol_r2_get_event+0x5c>
 80084c8:	2001      	movs	r0, #1
 80084ca:	b004      	add	sp, #16
 80084cc:	bd70      	pop	{r4, r5, r6, pc}
 80084ce:	4b19      	ldr	r3, [pc, #100]	; (8008534 <acc_sensor_protocol_r2_get_event+0xb0>)
 80084d0:	4a1b      	ldr	r2, [pc, #108]	; (8008540 <acc_sensor_protocol_r2_get_event+0xbc>)
 80084d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084d4:	4919      	ldr	r1, [pc, #100]	; (800853c <acc_sensor_protocol_r2_get_event+0xb8>)
 80084d6:	4620      	mov	r0, r4
 80084d8:	4798      	blx	r3
 80084da:	4620      	mov	r0, r4
 80084dc:	b004      	add	sp, #16
 80084de:	bd70      	pop	{r4, r5, r6, pc}
 80084e0:	4a14      	ldr	r2, [pc, #80]	; (8008534 <acc_sensor_protocol_r2_get_event+0xb0>)
 80084e2:	9500      	str	r5, [sp, #0]
 80084e4:	6b56      	ldr	r6, [r2, #52]	; 0x34
 80084e6:	4915      	ldr	r1, [pc, #84]	; (800853c <acc_sensor_protocol_r2_get_event+0xb8>)
 80084e8:	4a16      	ldr	r2, [pc, #88]	; (8008544 <acc_sensor_protocol_r2_get_event+0xc0>)
 80084ea:	2000      	movs	r0, #0
 80084ec:	47b0      	blx	r6
 80084ee:	2300      	movs	r3, #0
 80084f0:	7023      	strb	r3, [r4, #0]
 80084f2:	e7e0      	b.n	80084b6 <acc_sensor_protocol_r2_get_event+0x32>
 80084f4:	f5b2 5f88 	cmp.w	r2, #4352	; 0x1100
 80084f8:	ea4f 2112 	mov.w	r1, r2, lsr #8
 80084fc:	d203      	bcs.n	8008506 <acc_sensor_protocol_r2_get_event+0x82>
 80084fe:	4a12      	ldr	r2, [pc, #72]	; (8008548 <acc_sensor_protocol_r2_get_event+0xc4>)
 8008500:	408b      	lsls	r3, r1
 8008502:	401a      	ands	r2, r3
 8008504:	b96a      	cbnz	r2, 8008522 <acc_sensor_protocol_r2_get_event+0x9e>
 8008506:	4a0b      	ldr	r2, [pc, #44]	; (8008534 <acc_sensor_protocol_r2_get_event+0xb0>)
 8008508:	f242 1301 	movw	r3, #8449	; 0x2101
 800850c:	6b56      	ldr	r6, [r2, #52]	; 0x34
 800850e:	8063      	strh	r3, [r4, #2]
 8008510:	2320      	movs	r3, #32
 8008512:	4a0e      	ldr	r2, [pc, #56]	; (800854c <acc_sensor_protocol_r2_get_event+0xc8>)
 8008514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008518:	4a0d      	ldr	r2, [pc, #52]	; (8008550 <acc_sensor_protocol_r2_get_event+0xcc>)
 800851a:	4908      	ldr	r1, [pc, #32]	; (800853c <acc_sensor_protocol_r2_get_event+0xb8>)
 800851c:	2000      	movs	r0, #0
 800851e:	47b0      	blx	r6
 8008520:	e7c9      	b.n	80084b6 <acc_sensor_protocol_r2_get_event+0x32>
 8008522:	1e4b      	subs	r3, r1, #1
 8008524:	4a03      	ldr	r2, [pc, #12]	; (8008534 <acc_sensor_protocol_r2_get_event+0xb0>)
 8008526:	b2db      	uxtb	r3, r3
 8008528:	2b20      	cmp	r3, #32
 800852a:	6b56      	ldr	r6, [r2, #52]	; 0x34
 800852c:	d9f1      	bls.n	8008512 <acc_sensor_protocol_r2_get_event+0x8e>
 800852e:	4b09      	ldr	r3, [pc, #36]	; (8008554 <acc_sensor_protocol_r2_get_event+0xd0>)
 8008530:	e7f2      	b.n	8008518 <acc_sensor_protocol_r2_get_event+0x94>
 8008532:	bf00      	nop
 8008534:	20000640 	.word	0x20000640
 8008538:	08013b68 	.word	0x08013b68
 800853c:	08013a28 	.word	0x08013a28
 8008540:	08013b54 	.word	0x08013b54
 8008544:	08013bac 	.word	0x08013bac
 8008548:	00010016 	.word	0x00010016
 800854c:	08013e88 	.word	0x08013e88
 8008550:	08013b8c 	.word	0x08013b8c
 8008554:	08013b44 	.word	0x08013b44

08008558 <acc_sensor_protocol_r2_wait_for_event>:
 8008558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800855c:	b087      	sub	sp, #28
 800855e:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 8008614 <acc_sensor_protocol_r2_wait_for_event+0xbc>
 8008562:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008628 <acc_sensor_protocol_r2_wait_for_event+0xd0>
 8008566:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 800861c <acc_sensor_protocol_r2_wait_for_event+0xc4>
 800856a:	9303      	str	r3, [sp, #12]
 800856c:	4604      	mov	r4, r0
 800856e:	460e      	mov	r6, r1
 8008570:	4690      	mov	r8, r2
 8008572:	2500      	movs	r5, #0
 8008574:	e018      	b.n	80085a8 <acc_sensor_protocol_r2_wait_for_event+0x50>
 8008576:	4620      	mov	r0, r4
 8008578:	f8ad 3016 	strh.w	r3, [sp, #22]
 800857c:	f000 fbd0 	bl	8008d20 <acc_sensor_reg_read>
 8008580:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8008584:	065b      	lsls	r3, r3, #25
 8008586:	d434      	bmi.n	80085f2 <acc_sensor_protocol_r2_wait_for_event+0x9a>
 8008588:	f7fe f878 	bl	800667c <acc_rss_integration_log_level>
 800858c:	4607      	mov	r7, r0
 800858e:	4623      	mov	r3, r4
 8008590:	4652      	mov	r2, sl
 8008592:	4649      	mov	r1, r9
 8008594:	2001      	movs	r0, #1
 8008596:	b117      	cbz	r7, 800859e <acc_sensor_protocol_r2_wait_for_event+0x46>
 8008598:	f8db 7034 	ldr.w	r7, [fp, #52]	; 0x34
 800859c:	47b8      	blx	r7
 800859e:	4545      	cmp	r5, r8
 80085a0:	f105 0301 	add.w	r3, r5, #1
 80085a4:	d018      	beq.n	80085d8 <acc_sensor_protocol_r2_wait_for_event+0x80>
 80085a6:	461d      	mov	r5, r3
 80085a8:	4631      	mov	r1, r6
 80085aa:	4620      	mov	r0, r4
 80085ac:	f7fd ffe6 	bl	800657c <acc_rss_integration_wait_for_sensor_interrupt>
 80085b0:	f10d 0216 	add.w	r2, sp, #22
 80085b4:	212a      	movs	r1, #42	; 0x2a
 80085b6:	2300      	movs	r3, #0
 80085b8:	4607      	mov	r7, r0
 80085ba:	2800      	cmp	r0, #0
 80085bc:	d1db      	bne.n	8008576 <acc_sensor_protocol_r2_wait_for_event+0x1e>
 80085be:	4b15      	ldr	r3, [pc, #84]	; (8008614 <acc_sensor_protocol_r2_wait_for_event+0xbc>)
 80085c0:	4a15      	ldr	r2, [pc, #84]	; (8008618 <acc_sensor_protocol_r2_wait_for_event+0xc0>)
 80085c2:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 80085c4:	4915      	ldr	r1, [pc, #84]	; (800861c <acc_sensor_protocol_r2_wait_for_event+0xc4>)
 80085c6:	4623      	mov	r3, r4
 80085c8:	47a8      	blx	r5
 80085ca:	4620      	mov	r0, r4
 80085cc:	f003 fefc 	bl	800c3c8 <acc_sensor_diagnostics_r2_sensor_status>
 80085d0:	4638      	mov	r0, r7
 80085d2:	b007      	add	sp, #28
 80085d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085d8:	4a0e      	ldr	r2, [pc, #56]	; (8008614 <acc_sensor_protocol_r2_wait_for_event+0xbc>)
 80085da:	9400      	str	r4, [sp, #0]
 80085dc:	6b54      	ldr	r4, [r2, #52]	; 0x34
 80085de:	490f      	ldr	r1, [pc, #60]	; (800861c <acc_sensor_protocol_r2_wait_for_event+0xc4>)
 80085e0:	4a0f      	ldr	r2, [pc, #60]	; (8008620 <acc_sensor_protocol_r2_wait_for_event+0xc8>)
 80085e2:	462b      	mov	r3, r5
 80085e4:	2000      	movs	r0, #0
 80085e6:	47a0      	blx	r4
 80085e8:	2700      	movs	r7, #0
 80085ea:	4638      	mov	r0, r7
 80085ec:	b007      	add	sp, #28
 80085ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085f2:	9903      	ldr	r1, [sp, #12]
 80085f4:	4620      	mov	r0, r4
 80085f6:	f7ff ff45 	bl	8008484 <acc_sensor_protocol_r2_get_event>
 80085fa:	4607      	mov	r7, r0
 80085fc:	2800      	cmp	r0, #0
 80085fe:	d1e7      	bne.n	80085d0 <acc_sensor_protocol_r2_wait_for_event+0x78>
 8008600:	4b04      	ldr	r3, [pc, #16]	; (8008614 <acc_sensor_protocol_r2_wait_for_event+0xbc>)
 8008602:	4a08      	ldr	r2, [pc, #32]	; (8008624 <acc_sensor_protocol_r2_wait_for_event+0xcc>)
 8008604:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8008606:	4905      	ldr	r1, [pc, #20]	; (800861c <acc_sensor_protocol_r2_wait_for_event+0xc4>)
 8008608:	4623      	mov	r3, r4
 800860a:	47a8      	blx	r5
 800860c:	4638      	mov	r0, r7
 800860e:	b007      	add	sp, #28
 8008610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008614:	20000640 	.word	0x20000640
 8008618:	08013bdc 	.word	0x08013bdc
 800861c:	08013a28 	.word	0x08013a28
 8008620:	08013c28 	.word	0x08013c28
 8008624:	08013c64 	.word	0x08013c64
 8008628:	08013c04 	.word	0x08013c04

0800862c <acc_sensor_protocol_r2_wait_for_specific_event>:
 800862c:	b570      	push	{r4, r5, r6, lr}
 800862e:	b084      	sub	sp, #16
 8008630:	4616      	mov	r6, r2
 8008632:	461c      	mov	r4, r3
 8008634:	2264      	movs	r2, #100	; 0x64
 8008636:	ab03      	add	r3, sp, #12
 8008638:	4605      	mov	r5, r0
 800863a:	f7ff ff8d 	bl	8008558 <acc_sensor_protocol_r2_wait_for_event>
 800863e:	b168      	cbz	r0, 800865c <acc_sensor_protocol_r2_wait_for_specific_event+0x30>
 8008640:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8008644:	42b3      	cmp	r3, r6
 8008646:	d00b      	beq.n	8008660 <acc_sensor_protocol_r2_wait_for_specific_event+0x34>
 8008648:	e9cd 3600 	strd	r3, r6, [sp]
 800864c:	4a08      	ldr	r2, [pc, #32]	; (8008670 <acc_sensor_protocol_r2_wait_for_specific_event+0x44>)
 800864e:	4b09      	ldr	r3, [pc, #36]	; (8008674 <acc_sensor_protocol_r2_wait_for_specific_event+0x48>)
 8008650:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8008652:	4909      	ldr	r1, [pc, #36]	; (8008678 <acc_sensor_protocol_r2_wait_for_specific_event+0x4c>)
 8008654:	4a09      	ldr	r2, [pc, #36]	; (800867c <acc_sensor_protocol_r2_wait_for_specific_event+0x50>)
 8008656:	2000      	movs	r0, #0
 8008658:	47a0      	blx	r4
 800865a:	2000      	movs	r0, #0
 800865c:	b004      	add	sp, #16
 800865e:	bd70      	pop	{r4, r5, r6, pc}
 8008660:	2c00      	cmp	r4, #0
 8008662:	d0fb      	beq.n	800865c <acc_sensor_protocol_r2_wait_for_specific_event+0x30>
 8008664:	4628      	mov	r0, r5
 8008666:	f7ff fee9 	bl	800843c <acc_sensor_protocol_r2_ack_event>
 800866a:	b004      	add	sp, #16
 800866c:	bd70      	pop	{r4, r5, r6, pc}
 800866e:	bf00      	nop
 8008670:	20000640 	.word	0x20000640
 8008674:	08013f0c 	.word	0x08013f0c
 8008678:	08013a28 	.word	0x08013a28
 800867c:	08013c8c 	.word	0x08013c8c

08008680 <acc_sensor_protocol_r2_wait_for_hibernate_ready>:
 8008680:	2301      	movs	r3, #1
 8008682:	220b      	movs	r2, #11
 8008684:	f7ff bfd2 	b.w	800862c <acc_sensor_protocol_r2_wait_for_specific_event>

08008688 <acc_sensor_protocol_r2_stop>:
 8008688:	b530      	push	{r4, r5, lr}
 800868a:	b083      	sub	sp, #12
 800868c:	460c      	mov	r4, r1
 800868e:	4605      	mov	r5, r0
 8008690:	f7ff fe98 	bl	80083c4 <acc_sensor_protocol_r2_terminate_program>
 8008694:	b910      	cbnz	r0, 800869c <acc_sensor_protocol_r2_stop+0x14>
 8008696:	2000      	movs	r0, #0
 8008698:	b003      	add	sp, #12
 800869a:	bd30      	pop	{r4, r5, pc}
 800869c:	4628      	mov	r0, r5
 800869e:	f7ff fecd 	bl	800843c <acc_sensor_protocol_r2_ack_event>
 80086a2:	2800      	cmp	r0, #0
 80086a4:	d0f7      	beq.n	8008696 <acc_sensor_protocol_r2_stop+0xe>
 80086a6:	4621      	mov	r1, r4
 80086a8:	ab01      	add	r3, sp, #4
 80086aa:	2264      	movs	r2, #100	; 0x64
 80086ac:	4628      	mov	r0, r5
 80086ae:	f7ff ff53 	bl	8008558 <acc_sensor_protocol_r2_wait_for_event>
 80086b2:	2800      	cmp	r0, #0
 80086b4:	d0ef      	beq.n	8008696 <acc_sensor_protocol_r2_stop+0xe>
 80086b6:	4628      	mov	r0, r5
 80086b8:	f7ff fec0 	bl	800843c <acc_sensor_protocol_r2_ack_event>
 80086bc:	2800      	cmp	r0, #0
 80086be:	d0ea      	beq.n	8008696 <acc_sensor_protocol_r2_stop+0xe>
 80086c0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80086c4:	2b02      	cmp	r3, #2
 80086c6:	d0e7      	beq.n	8008698 <acc_sensor_protocol_r2_stop+0x10>
 80086c8:	4a05      	ldr	r2, [pc, #20]	; (80086e0 <acc_sensor_protocol_r2_stop+0x58>)
 80086ca:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80086ce:	6b54      	ldr	r4, [r2, #52]	; 0x34
 80086d0:	4904      	ldr	r1, [pc, #16]	; (80086e4 <acc_sensor_protocol_r2_stop+0x5c>)
 80086d2:	4a05      	ldr	r2, [pc, #20]	; (80086e8 <acc_sensor_protocol_r2_stop+0x60>)
 80086d4:	2000      	movs	r0, #0
 80086d6:	47a0      	blx	r4
 80086d8:	4628      	mov	r0, r5
 80086da:	f003 fe75 	bl	800c3c8 <acc_sensor_diagnostics_r2_sensor_status>
 80086de:	e7da      	b.n	8008696 <acc_sensor_protocol_r2_stop+0xe>
 80086e0:	20000640 	.word	0x20000640
 80086e4:	08013a28 	.word	0x08013a28
 80086e8:	08013cb8 	.word	0x08013cb8

080086ec <acc_sensor_protocol_r2_wait_for_radar_data>:
 80086ec:	b570      	push	{r4, r5, r6, lr}
 80086ee:	b084      	sub	sp, #16
 80086f0:	4616      	mov	r6, r2
 80086f2:	ab03      	add	r3, sp, #12
 80086f4:	2264      	movs	r2, #100	; 0x64
 80086f6:	4605      	mov	r5, r0
 80086f8:	f7ff ff2e 	bl	8008558 <acc_sensor_protocol_r2_wait_for_event>
 80086fc:	4604      	mov	r4, r0
 80086fe:	b180      	cbz	r0, 8008722 <acc_sensor_protocol_r2_wait_for_radar_data+0x36>
 8008700:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8008704:	2b06      	cmp	r3, #6
 8008706:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800870a:	d10d      	bne.n	8008728 <acc_sensor_protocol_r2_wait_for_radar_data+0x3c>
 800870c:	0519      	lsls	r1, r3, #20
 800870e:	d50b      	bpl.n	8008728 <acc_sensor_protocol_r2_wait_for_radar_data+0x3c>
 8008710:	f413 6280 	ands.w	r2, r3, #1024	; 0x400
 8008714:	d114      	bne.n	8008740 <acc_sensor_protocol_r2_wait_for_radar_data+0x54>
 8008716:	b106      	cbz	r6, 800871a <acc_sensor_protocol_r2_wait_for_radar_data+0x2e>
 8008718:	7032      	strb	r2, [r6, #0]
 800871a:	05da      	lsls	r2, r3, #23
 800871c:	d425      	bmi.n	800876a <acc_sensor_protocol_r2_wait_for_radar_data+0x7e>
 800871e:	059b      	lsls	r3, r3, #22
 8008720:	d418      	bmi.n	8008754 <acc_sensor_protocol_r2_wait_for_radar_data+0x68>
 8008722:	4620      	mov	r0, r4
 8008724:	b004      	add	sp, #16
 8008726:	bd70      	pop	{r4, r5, r6, pc}
 8008728:	4a16      	ldr	r2, [pc, #88]	; (8008784 <acc_sensor_protocol_r2_wait_for_radar_data+0x98>)
 800872a:	9300      	str	r3, [sp, #0]
 800872c:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800872e:	4916      	ldr	r1, [pc, #88]	; (8008788 <acc_sensor_protocol_r2_wait_for_radar_data+0x9c>)
 8008730:	4a16      	ldr	r2, [pc, #88]	; (800878c <acc_sensor_protocol_r2_wait_for_radar_data+0xa0>)
 8008732:	462b      	mov	r3, r5
 8008734:	2000      	movs	r0, #0
 8008736:	47a0      	blx	r4
 8008738:	2400      	movs	r4, #0
 800873a:	4620      	mov	r0, r4
 800873c:	b004      	add	sp, #16
 800873e:	bd70      	pop	{r4, r5, r6, pc}
 8008740:	4629      	mov	r1, r5
 8008742:	200f      	movs	r0, #15
 8008744:	f000 fad4 	bl	8008cf0 <acc_probes_execute_primitive_probe>
 8008748:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800874c:	4622      	mov	r2, r4
 800874e:	2e00      	cmp	r6, #0
 8008750:	d1e2      	bne.n	8008718 <acc_sensor_protocol_r2_wait_for_radar_data+0x2c>
 8008752:	e7e2      	b.n	800871a <acc_sensor_protocol_r2_wait_for_radar_data+0x2e>
 8008754:	f7fd ff92 	bl	800667c <acc_rss_integration_log_level>
 8008758:	2803      	cmp	r0, #3
 800875a:	d9e2      	bls.n	8008722 <acc_sensor_protocol_r2_wait_for_radar_data+0x36>
 800875c:	4b09      	ldr	r3, [pc, #36]	; (8008784 <acc_sensor_protocol_r2_wait_for_radar_data+0x98>)
 800875e:	4a0c      	ldr	r2, [pc, #48]	; (8008790 <acc_sensor_protocol_r2_wait_for_radar_data+0xa4>)
 8008760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008762:	4909      	ldr	r1, [pc, #36]	; (8008788 <acc_sensor_protocol_r2_wait_for_radar_data+0x9c>)
 8008764:	2004      	movs	r0, #4
 8008766:	4798      	blx	r3
 8008768:	e7db      	b.n	8008722 <acc_sensor_protocol_r2_wait_for_radar_data+0x36>
 800876a:	f7fd ff87 	bl	800667c <acc_rss_integration_log_level>
 800876e:	2803      	cmp	r0, #3
 8008770:	d905      	bls.n	800877e <acc_sensor_protocol_r2_wait_for_radar_data+0x92>
 8008772:	4b04      	ldr	r3, [pc, #16]	; (8008784 <acc_sensor_protocol_r2_wait_for_radar_data+0x98>)
 8008774:	4a07      	ldr	r2, [pc, #28]	; (8008794 <acc_sensor_protocol_r2_wait_for_radar_data+0xa8>)
 8008776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008778:	4903      	ldr	r1, [pc, #12]	; (8008788 <acc_sensor_protocol_r2_wait_for_radar_data+0x9c>)
 800877a:	2004      	movs	r0, #4
 800877c:	4798      	blx	r3
 800877e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8008782:	e7cc      	b.n	800871e <acc_sensor_protocol_r2_wait_for_radar_data+0x32>
 8008784:	20000640 	.word	0x20000640
 8008788:	08013a28 	.word	0x08013a28
 800878c:	08013cd8 	.word	0x08013cd8
 8008790:	08013d24 	.word	0x08013d24
 8008794:	08013d08 	.word	0x08013d08

08008798 <acc_sensor_protocol_r2_wait_for_sync_start>:
 8008798:	b570      	push	{r4, r5, r6, lr}
 800879a:	b084      	sub	sp, #16
 800879c:	ab03      	add	r3, sp, #12
 800879e:	2264      	movs	r2, #100	; 0x64
 80087a0:	4605      	mov	r5, r0
 80087a2:	f7ff fed9 	bl	8008558 <acc_sensor_protocol_r2_wait_for_event>
 80087a6:	4604      	mov	r4, r0
 80087a8:	b178      	cbz	r0, 80087ca <acc_sensor_protocol_r2_wait_for_sync_start+0x32>
 80087aa:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80087ae:	2b06      	cmp	r3, #6
 80087b0:	d008      	beq.n	80087c4 <acc_sensor_protocol_r2_wait_for_sync_start+0x2c>
 80087b2:	4a0a      	ldr	r2, [pc, #40]	; (80087dc <acc_sensor_protocol_r2_wait_for_sync_start+0x44>)
 80087b4:	9300      	str	r3, [sp, #0]
 80087b6:	6b54      	ldr	r4, [r2, #52]	; 0x34
 80087b8:	4909      	ldr	r1, [pc, #36]	; (80087e0 <acc_sensor_protocol_r2_wait_for_sync_start+0x48>)
 80087ba:	4a0a      	ldr	r2, [pc, #40]	; (80087e4 <acc_sensor_protocol_r2_wait_for_sync_start+0x4c>)
 80087bc:	462b      	mov	r3, r5
 80087be:	2000      	movs	r0, #0
 80087c0:	47a0      	blx	r4
 80087c2:	2400      	movs	r4, #0
 80087c4:	4620      	mov	r0, r4
 80087c6:	b004      	add	sp, #16
 80087c8:	bd70      	pop	{r4, r5, r6, pc}
 80087ca:	4b04      	ldr	r3, [pc, #16]	; (80087dc <acc_sensor_protocol_r2_wait_for_sync_start+0x44>)
 80087cc:	4a06      	ldr	r2, [pc, #24]	; (80087e8 <acc_sensor_protocol_r2_wait_for_sync_start+0x50>)
 80087ce:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 80087d0:	4903      	ldr	r1, [pc, #12]	; (80087e0 <acc_sensor_protocol_r2_wait_for_sync_start+0x48>)
 80087d2:	462b      	mov	r3, r5
 80087d4:	47b0      	blx	r6
 80087d6:	4620      	mov	r0, r4
 80087d8:	b004      	add	sp, #16
 80087da:	bd70      	pop	{r4, r5, r6, pc}
 80087dc:	20000640 	.word	0x20000640
 80087e0:	08013a28 	.word	0x08013a28
 80087e4:	08013d70 	.word	0x08013d70
 80087e8:	08013d3c 	.word	0x08013d3c

080087ec <acc_sensor_protocol_r2_transfer_data>:
 80087ec:	b530      	push	{r4, r5, lr}
 80087ee:	b083      	sub	sp, #12
 80087f0:	4613      	mov	r3, r2
 80087f2:	9201      	str	r2, [sp, #4]
 80087f4:	2200      	movs	r2, #0
 80087f6:	4605      	mov	r5, r0
 80087f8:	f7ff fa80 	bl	8007cfc <acc_sensor_r2_buffer_processed_read>
 80087fc:	9b01      	ldr	r3, [sp, #4]
 80087fe:	4604      	mov	r4, r0
 8008800:	4602      	mov	r2, r0
 8008802:	4629      	mov	r1, r5
 8008804:	2000      	movs	r0, #0
 8008806:	f000 fa45 	bl	8008c94 <acc_probes_execute_uint16>
 800880a:	4620      	mov	r0, r4
 800880c:	b003      	add	sp, #12
 800880e:	bd30      	pop	{r4, r5, pc}

08008810 <acc_sensor_protocol_r2_check_asic_id>:
 8008810:	b530      	push	{r4, r5, lr}
 8008812:	2400      	movs	r4, #0
 8008814:	b085      	sub	sp, #20
 8008816:	f10d 020e 	add.w	r2, sp, #14
 800881a:	460d      	mov	r5, r1
 800881c:	4621      	mov	r1, r4
 800881e:	f8ad 400e 	strh.w	r4, [sp, #14]
 8008822:	f000 fa7d 	bl	8008d20 <acc_sensor_reg_read>
 8008826:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 800882a:	f241 1312 	movw	r3, #4370	; 0x1112
 800882e:	429a      	cmp	r2, r3
 8008830:	d00a      	beq.n	8008848 <acc_sensor_protocol_r2_check_asic_id+0x38>
 8008832:	b965      	cbnz	r5, 800884e <acc_sensor_protocol_r2_check_asic_id+0x3e>
 8008834:	4907      	ldr	r1, [pc, #28]	; (8008854 <acc_sensor_protocol_r2_check_asic_id+0x44>)
 8008836:	9200      	str	r2, [sp, #0]
 8008838:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 800883a:	4a07      	ldr	r2, [pc, #28]	; (8008858 <acc_sensor_protocol_r2_check_asic_id+0x48>)
 800883c:	4907      	ldr	r1, [pc, #28]	; (800885c <acc_sensor_protocol_r2_check_asic_id+0x4c>)
 800883e:	4628      	mov	r0, r5
 8008840:	47a0      	blx	r4
 8008842:	4628      	mov	r0, r5
 8008844:	b005      	add	sp, #20
 8008846:	bd30      	pop	{r4, r5, pc}
 8008848:	2001      	movs	r0, #1
 800884a:	b005      	add	sp, #20
 800884c:	bd30      	pop	{r4, r5, pc}
 800884e:	4620      	mov	r0, r4
 8008850:	b005      	add	sp, #20
 8008852:	bd30      	pop	{r4, r5, pc}
 8008854:	20000640 	.word	0x20000640
 8008858:	08013dac 	.word	0x08013dac
 800885c:	08013a28 	.word	0x08013a28

08008860 <acc_sweep_manager_prepare>:
 8008860:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008864:	4680      	mov	r8, r0
 8008866:	b095      	sub	sp, #84	; 0x54
 8008868:	4608      	mov	r0, r1
 800886a:	460c      	mov	r4, r1
 800886c:	4617      	mov	r7, r2
 800886e:	4699      	mov	r9, r3
 8008870:	f7fd fa98 	bl	8005da4 <acc_base_configuration_sensor_get>
 8008874:	4601      	mov	r1, r0
 8008876:	4620      	mov	r0, r4
 8008878:	9101      	str	r1, [sp, #4]
 800887a:	f7fd fbf1 	bl	8006060 <acc_base_configuration_wg_duration_get>
 800887e:	4603      	mov	r3, r0
 8008880:	4620      	mov	r0, r4
 8008882:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008886:	f7fd fbd7 	bl	8006038 <acc_base_configuration_integrator_get>
 800888a:	4603      	mov	r3, r0
 800888c:	4620      	mov	r0, r4
 800888e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8008892:	f7fd fbf9 	bl	8006088 <acc_base_configuration_integrator_ramp_up_get>
 8008896:	4603      	mov	r3, r0
 8008898:	4620      	mov	r0, r4
 800889a:	f8ad 3010 	strh.w	r3, [sp, #16]
 800889e:	f7fd faf5 	bl	8005e8c <acc_base_configuration_decrease_tx_emission_get>
 80088a2:	4605      	mov	r5, r0
 80088a4:	2304      	movs	r3, #4
 80088a6:	9901      	ldr	r1, [sp, #4]
 80088a8:	f8ad 5012 	strh.w	r5, [sp, #18]
 80088ac:	aa03      	add	r2, sp, #12
 80088ae:	f108 0514 	add.w	r5, r8, #20
 80088b2:	2012      	movs	r0, #18
 80088b4:	f000 f9ee 	bl	8008c94 <acc_probes_execute_uint16>
 80088b8:	2220      	movs	r2, #32
 80088ba:	2100      	movs	r1, #0
 80088bc:	4628      	mov	r0, r5
 80088be:	f006 f81f 	bl	800e900 <memset>
 80088c2:	6823      	ldr	r3, [r4, #0]
 80088c4:	4628      	mov	r0, r5
 80088c6:	4621      	mov	r1, r4
 80088c8:	4798      	blx	r3
 80088ca:	4606      	mov	r6, r0
 80088cc:	2800      	cmp	r0, #0
 80088ce:	d04e      	beq.n	800896e <acc_sweep_manager_prepare+0x10e>
 80088d0:	2220      	movs	r2, #32
 80088d2:	2100      	movs	r1, #0
 80088d4:	a80c      	add	r0, sp, #48	; 0x30
 80088d6:	f006 f813 	bl	800e900 <memset>
 80088da:	f8d8 002c 	ldr.w	r0, [r8, #44]	; 0x2c
 80088de:	2100      	movs	r1, #0
 80088e0:	6806      	ldr	r6, [r0, #0]
 80088e2:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 80088e6:	e9cd 1105 	strd	r1, r1, [sp, #20]
 80088ea:	e9cd 1107 	strd	r1, r1, [sp, #28]
 80088ee:	e9cd 1109 	strd	r1, r1, [sp, #36]	; 0x24
 80088f2:	aa0c      	add	r2, sp, #48	; 0x30
 80088f4:	ab05      	add	r3, sp, #20
 80088f6:	4621      	mov	r1, r4
 80088f8:	4628      	mov	r0, r5
 80088fa:	47b0      	blx	r6
 80088fc:	4606      	mov	r6, r0
 80088fe:	2800      	cmp	r0, #0
 8008900:	d039      	beq.n	8008976 <acc_sweep_manager_prepare+0x116>
 8008902:	b137      	cbz	r7, 8008912 <acc_sweep_manager_prepare+0xb2>
 8008904:	ad0c      	add	r5, sp, #48	; 0x30
 8008906:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008908:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800890a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800890e:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8008912:	f1b9 0f00 	cmp.w	r9, #0
 8008916:	d011      	beq.n	800893c <acc_sweep_manager_prepare+0xdc>
 8008918:	ad05      	add	r5, sp, #20
 800891a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800891c:	f8c9 0000 	str.w	r0, [r9]
 8008920:	f8c9 1004 	str.w	r1, [r9, #4]
 8008924:	cd03      	ldmia	r5!, {r0, r1}
 8008926:	882d      	ldrh	r5, [r5, #0]
 8008928:	f8c9 2008 	str.w	r2, [r9, #8]
 800892c:	f8c9 300c 	str.w	r3, [r9, #12]
 8008930:	f8a9 5018 	strh.w	r5, [r9, #24]
 8008934:	f8c9 0010 	str.w	r0, [r9, #16]
 8008938:	f8c9 1014 	str.w	r1, [r9, #20]
 800893c:	4620      	mov	r0, r4
 800893e:	f7fd fb4b 	bl	8005fd8 <acc_base_configuration_repetition_mode_get>
 8008942:	2801      	cmp	r0, #1
 8008944:	d020      	beq.n	8008988 <acc_sweep_manager_prepare+0x128>
 8008946:	4620      	mov	r0, r4
 8008948:	f7fd fb4e 	bl	8005fe8 <acc_base_configuration_update_rate_get>
 800894c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8008990 <acc_sweep_manager_prepare+0x130>
 8008950:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8008954:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008958:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800895c:	ee17 3a90 	vmov	r3, s15
 8008960:	2200      	movs	r2, #0
 8008962:	f8c8 3000 	str.w	r3, [r8]
 8008966:	f8c8 2008 	str.w	r2, [r8, #8]
 800896a:	f8a8 2006 	strh.w	r2, [r8, #6]
 800896e:	4630      	mov	r0, r6
 8008970:	b015      	add	sp, #84	; 0x54
 8008972:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008976:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 800897a:	4628      	mov	r0, r5
 800897c:	6a1b      	ldr	r3, [r3, #32]
 800897e:	4798      	blx	r3
 8008980:	4630      	mov	r0, r6
 8008982:	b015      	add	sp, #84	; 0x54
 8008984:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008988:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800898c:	e7e8      	b.n	8008960 <acc_sweep_manager_prepare+0x100>
 800898e:	bf00      	nop
 8008990:	44fa0000 	.word	0x44fa0000

08008994 <acc_sweep_manager_release>:
 8008994:	b120      	cbz	r0, 80089a0 <acc_sweep_manager_release+0xc>
 8008996:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8008998:	b113      	cbz	r3, 80089a0 <acc_sweep_manager_release+0xc>
 800899a:	6a1b      	ldr	r3, [r3, #32]
 800899c:	3014      	adds	r0, #20
 800899e:	4718      	bx	r3
 80089a0:	4770      	bx	lr
 80089a2:	bf00      	nop

080089a4 <acc_sweep_manager_is_sensor_connected>:
 80089a4:	3014      	adds	r0, #20
 80089a6:	f003 bc69 	b.w	800c27c <acc_radar_engine_check_asic_id>
 80089aa:	bf00      	nop

080089ac <acc_sweep_manager_calibrate>:
 80089ac:	b410      	push	{r4}
 80089ae:	4604      	mov	r4, r0
 80089b0:	3014      	adds	r0, #20
 80089b2:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 80089b4:	68a4      	ldr	r4, [r4, #8]
 80089b6:	46a4      	mov	ip, r4
 80089b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089bc:	4760      	bx	ip
 80089be:	bf00      	nop

080089c0 <acc_sweep_manager_measure_noise>:
 80089c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089c4:	4604      	mov	r4, r0
 80089c6:	e9d0 050a 	ldrd	r0, r5, [r0, #40]	; 0x28
 80089ca:	686f      	ldr	r7, [r5, #4]
 80089cc:	461e      	mov	r6, r3
 80089ce:	4615      	mov	r5, r2
 80089d0:	47b8      	blx	r7
 80089d2:	b140      	cbz	r0, 80089e6 <acc_sweep_manager_measure_noise+0x26>
 80089d4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80089d6:	4632      	mov	r2, r6
 80089d8:	4629      	mov	r1, r5
 80089da:	f104 0014 	add.w	r0, r4, #20
 80089de:	68db      	ldr	r3, [r3, #12]
 80089e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80089e4:	4718      	bx	r3
 80089e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089ea:	bf00      	nop

080089ec <acc_sweep_manager_start>:
 80089ec:	b570      	push	{r4, r5, r6, lr}
 80089ee:	4604      	mov	r4, r0
 80089f0:	e9d0 030a 	ldrd	r0, r3, [r0, #40]	; 0x28
 80089f4:	685b      	ldr	r3, [r3, #4]
 80089f6:	4615      	mov	r5, r2
 80089f8:	4798      	blx	r3
 80089fa:	b138      	cbz	r0, 8008a0c <acc_sweep_manager_start+0x20>
 80089fc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80089fe:	4629      	mov	r1, r5
 8008a00:	f104 0014 	add.w	r0, r4, #20
 8008a04:	691b      	ldr	r3, [r3, #16]
 8008a06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008a0a:	4718      	bx	r3
 8008a0c:	bd70      	pop	{r4, r5, r6, pc}
 8008a0e:	bf00      	nop

08008a10 <acc_sweep_manager_wait_for_data>:
 8008a10:	f850 1b14 	ldr.w	r1, [r0], #20
 8008a14:	2200      	movs	r2, #0
 8008a16:	f003 bc35 	b.w	800c284 <acc_radar_engine_wait_for_radar_data>
 8008a1a:	bf00      	nop

08008a1c <acc_sweep_manager_wait_for_hibernate_ready>:
 8008a1c:	f850 1b14 	ldr.w	r1, [r0], #20
 8008a20:	f003 bc38 	b.w	800c294 <acc_radar_engine_wait_for_hibernate_ready>

08008a24 <acc_sweep_manager_measure>:
 8008a24:	3014      	adds	r0, #20
 8008a26:	f003 bc31 	b.w	800c28c <acc_radar_engine_measure>
 8008a2a:	bf00      	nop

08008a2c <acc_sweep_manager_acquire_adc_data>:
 8008a2c:	b570      	push	{r4, r5, r6, lr}
 8008a2e:	2300      	movs	r3, #0
 8008a30:	b084      	sub	sp, #16
 8008a32:	4604      	mov	r4, r0
 8008a34:	6043      	str	r3, [r0, #4]
 8008a36:	6083      	str	r3, [r0, #8]
 8008a38:	60c3      	str	r3, [r0, #12]
 8008a3a:	6103      	str	r3, [r0, #16]
 8008a3c:	466a      	mov	r2, sp
 8008a3e:	3014      	adds	r0, #20
 8008a40:	f003 fc2c 	bl	800c29c <acc_radar_engine_acquire_adc_data>
 8008a44:	9b02      	ldr	r3, [sp, #8]
 8008a46:	f8bd 6000 	ldrh.w	r6, [sp]
 8008a4a:	f8bd 5002 	ldrh.w	r5, [sp, #2]
 8008a4e:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8008a52:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008a56:	60a0      	str	r0, [r4, #8]
 8008a58:	1d20      	adds	r0, r4, #4
 8008a5a:	80e6      	strh	r6, [r4, #6]
 8008a5c:	80a5      	strh	r5, [r4, #4]
 8008a5e:	7321      	strb	r1, [r4, #12]
 8008a60:	7362      	strb	r2, [r4, #13]
 8008a62:	6123      	str	r3, [r4, #16]
 8008a64:	b004      	add	sp, #16
 8008a66:	bd70      	pop	{r4, r5, r6, pc}

08008a68 <acc_alg_cca_u16_calculate>:
 8008a68:	2901      	cmp	r1, #1
 8008a6a:	b538      	push	{r3, r4, r5, lr}
 8008a6c:	d925      	bls.n	8008aba <acc_alg_cca_u16_calculate+0x52>
 8008a6e:	1e8d      	subs	r5, r1, #2
 8008a70:	1c83      	adds	r3, r0, #2
 8008a72:	b2ad      	uxth	r5, r5
 8008a74:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8008a78:	2400      	movs	r4, #0
 8008a7a:	4602      	mov	r2, r0
 8008a7c:	3002      	adds	r0, #2
 8008a7e:	8853      	ldrh	r3, [r2, #2]
 8008a80:	8812      	ldrh	r2, [r2, #0]
 8008a82:	1a9b      	subs	r3, r3, r2
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	bfb8      	it	lt
 8008a88:	425b      	neglt	r3, r3
 8008a8a:	4285      	cmp	r5, r0
 8008a8c:	441c      	add	r4, r3
 8008a8e:	d1f4      	bne.n	8008a7a <acc_alg_cca_u16_calculate+0x12>
 8008a90:	ee07 4a90 	vmov	s15, r4
 8008a94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008a98:	ee07 1a10 	vmov	s14, r1
 8008a9c:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 8008aa0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008aa4:	ee30 0a47 	vsub.f32	s0, s0, s14
 8008aa8:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8008aac:	f007 ff60 	bl	8010970 <log10f>
 8008ab0:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8008ab4:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008ab8:	bd38      	pop	{r3, r4, r5, pc}
 8008aba:	eddf 7a01 	vldr	s15, [pc, #4]	; 8008ac0 <acc_alg_cca_u16_calculate+0x58>
 8008abe:	e7eb      	b.n	8008a98 <acc_alg_cca_u16_calculate+0x30>
 8008ac0:	00000000 	.word	0x00000000

08008ac4 <acc_assert_fail>:
 8008ac4:	b500      	push	{lr}
 8008ac6:	4b07      	ldr	r3, [pc, #28]	; (8008ae4 <acc_assert_fail+0x20>)
 8008ac8:	4a07      	ldr	r2, [pc, #28]	; (8008ae8 <acc_assert_fail+0x24>)
 8008aca:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8008acc:	b083      	sub	sp, #12
 8008ace:	4603      	mov	r3, r0
 8008ad0:	9100      	str	r1, [sp, #0]
 8008ad2:	2000      	movs	r0, #0
 8008ad4:	4905      	ldr	r1, [pc, #20]	; (8008aec <acc_assert_fail+0x28>)
 8008ad6:	47a0      	blx	r4
 8008ad8:	4b05      	ldr	r3, [pc, #20]	; (8008af0 <acc_assert_fail+0x2c>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	b103      	cbz	r3, 8008ae0 <acc_assert_fail+0x1c>
 8008ade:	4798      	blx	r3
 8008ae0:	e7fe      	b.n	8008ae0 <acc_assert_fail+0x1c>
 8008ae2:	bf00      	nop
 8008ae4:	20000640 	.word	0x20000640
 8008ae8:	08013f3c 	.word	0x08013f3c
 8008aec:	08013f54 	.word	0x08013f54
 8008af0:	200004ec 	.word	0x200004ec

08008af4 <acc_element_sizeof>:
 8008af4:	3801      	subs	r0, #1
 8008af6:	b2c0      	uxtb	r0, r0
 8008af8:	2807      	cmp	r0, #7
 8008afa:	bf9a      	itte	ls
 8008afc:	4b02      	ldrls	r3, [pc, #8]	; (8008b08 <acc_element_sizeof+0x14>)
 8008afe:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8008b02:	2000      	movhi	r0, #0
 8008b04:	4770      	bx	lr
 8008b06:	bf00      	nop
 8008b08:	08013f5c 	.word	0x08013f5c

08008b0c <acc_element_connect>:
 8008b0c:	6001      	str	r1, [r0, #0]
 8008b0e:	4770      	bx	lr

08008b10 <event>:
 8008b10:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8008b12:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8008b14:	ed90 0a0e 	vldr	s0, [r0, #56]	; 0x38
 8008b18:	6811      	ldr	r1, [r2, #0]
 8008b1a:	b570      	push	{r4, r5, r6, lr}
 8008b1c:	4604      	mov	r4, r0
 8008b1e:	e9d0 0504 	ldrd	r0, r5, [r0, #16]
 8008b22:	4798      	blx	r3
 8008b24:	6823      	ldr	r3, [r4, #0]
 8008b26:	7028      	strb	r0, [r5, #0]
 8008b28:	685a      	ldr	r2, [r3, #4]
 8008b2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	4710      	bx	r2
 8008b32:	bf00      	nop

08008b34 <reset>:
 8008b34:	6800      	ldr	r0, [r0, #0]
 8008b36:	68c3      	ldr	r3, [r0, #12]
 8008b38:	4718      	bx	r3
 8008b3a:	bf00      	nop

08008b3c <validate>:
 8008b3c:	6983      	ldr	r3, [r0, #24]
 8008b3e:	b510      	push	{r4, lr}
 8008b40:	4604      	mov	r4, r0
 8008b42:	b113      	cbz	r3, 8008b4a <validate+0xe>
 8008b44:	f7fd fd9a 	bl	800667c <acc_rss_integration_log_level>
 8008b48:	b978      	cbnz	r0, 8008b6a <validate+0x2e>
 8008b4a:	69e3      	ldr	r3, [r4, #28]
 8008b4c:	b143      	cbz	r3, 8008b60 <validate+0x24>
 8008b4e:	f7fd fd95 	bl	800667c <acc_rss_integration_log_level>
 8008b52:	b128      	cbz	r0, 8008b60 <validate+0x24>
 8008b54:	4b08      	ldr	r3, [pc, #32]	; (8008b78 <validate+0x3c>)
 8008b56:	4a09      	ldr	r2, [pc, #36]	; (8008b7c <validate+0x40>)
 8008b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b5a:	4909      	ldr	r1, [pc, #36]	; (8008b80 <validate+0x44>)
 8008b5c:	2001      	movs	r0, #1
 8008b5e:	4798      	blx	r3
 8008b60:	6820      	ldr	r0, [r4, #0]
 8008b62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b66:	6883      	ldr	r3, [r0, #8]
 8008b68:	4718      	bx	r3
 8008b6a:	4b03      	ldr	r3, [pc, #12]	; (8008b78 <validate+0x3c>)
 8008b6c:	4a05      	ldr	r2, [pc, #20]	; (8008b84 <validate+0x48>)
 8008b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b70:	4903      	ldr	r1, [pc, #12]	; (8008b80 <validate+0x44>)
 8008b72:	2001      	movs	r0, #1
 8008b74:	4798      	blx	r3
 8008b76:	e7e8      	b.n	8008b4a <validate+0xe>
 8008b78:	20000640 	.word	0x20000640
 8008b7c:	08013fac 	.word	0x08013fac
 8008b80:	08013f90 	.word	0x08013f90
 8008b84:	08013f7c 	.word	0x08013f7c

08008b88 <saturation_check_i16>:
 8008b88:	f003 be8e 	b.w	800c8a8 <acc_alg_basic_saturation_check_i16>

08008b8c <saturation_check_u16>:
 8008b8c:	f003 be58 	b.w	800c840 <acc_alg_basic_saturation_check_u16>

08008b90 <acc_element_saturation_check_init>:
 8008b90:	2903      	cmp	r1, #3
 8008b92:	ed80 0a0e 	vstr	s0, [r0, #56]	; 0x38
 8008b96:	d00e      	beq.n	8008bb6 <acc_element_saturation_check_init+0x26>
 8008b98:	2905      	cmp	r1, #5
 8008b9a:	d016      	beq.n	8008bca <acc_element_saturation_check_init+0x3a>
 8008b9c:	2902      	cmp	r1, #2
 8008b9e:	d014      	beq.n	8008bca <acc_element_saturation_check_init+0x3a>
 8008ba0:	b510      	push	{r4, lr}
 8008ba2:	4b0b      	ldr	r3, [pc, #44]	; (8008bd0 <acc_element_saturation_check_init+0x40>)
 8008ba4:	4a0b      	ldr	r2, [pc, #44]	; (8008bd4 <acc_element_saturation_check_init+0x44>)
 8008ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ba8:	490b      	ldr	r1, [pc, #44]	; (8008bd8 <acc_element_saturation_check_init+0x48>)
 8008baa:	2400      	movs	r4, #0
 8008bac:	63c4      	str	r4, [r0, #60]	; 0x3c
 8008bae:	4620      	mov	r0, r4
 8008bb0:	4798      	blx	r3
 8008bb2:	4620      	mov	r0, r4
 8008bb4:	bd10      	pop	{r4, pc}
 8008bb6:	4b09      	ldr	r3, [pc, #36]	; (8008bdc <acc_element_saturation_check_init+0x4c>)
 8008bb8:	63c3      	str	r3, [r0, #60]	; 0x3c
 8008bba:	4909      	ldr	r1, [pc, #36]	; (8008be0 <acc_element_saturation_check_init+0x50>)
 8008bbc:	4a09      	ldr	r2, [pc, #36]	; (8008be4 <acc_element_saturation_check_init+0x54>)
 8008bbe:	4b0a      	ldr	r3, [pc, #40]	; (8008be8 <acc_element_saturation_check_init+0x58>)
 8008bc0:	60c3      	str	r3, [r0, #12]
 8008bc2:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8008bc6:	2001      	movs	r0, #1
 8008bc8:	4770      	bx	lr
 8008bca:	4b08      	ldr	r3, [pc, #32]	; (8008bec <acc_element_saturation_check_init+0x5c>)
 8008bcc:	63c3      	str	r3, [r0, #60]	; 0x3c
 8008bce:	e7f4      	b.n	8008bba <acc_element_saturation_check_init+0x2a>
 8008bd0:	20000640 	.word	0x20000640
 8008bd4:	08013fbc 	.word	0x08013fbc
 8008bd8:	08013f90 	.word	0x08013f90
 8008bdc:	08008b89 	.word	0x08008b89
 8008be0:	08008b11 	.word	0x08008b11
 8008be4:	08008b3d 	.word	0x08008b3d
 8008be8:	08008b35 	.word	0x08008b35
 8008bec:	08008b8d 	.word	0x08008b8d

08008bf0 <consume>:
 8008bf0:	b510      	push	{r4, lr}
 8008bf2:	4604      	mov	r4, r0
 8008bf4:	e9d0 230f 	ldrd	r2, r3, [r0, #60]	; 0x3c
 8008bf8:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8008bfa:	6900      	ldr	r0, [r0, #16]
 8008bfc:	4798      	blx	r3
 8008bfe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008c00:	2200      	movs	r2, #0
 8008c02:	611a      	str	r2, [r3, #16]
 8008c04:	bd10      	pop	{r4, pc}
 8008c06:	bf00      	nop

08008c08 <reset>:
 8008c08:	4770      	bx	lr
 8008c0a:	bf00      	nop

08008c0c <validate>:
 8008c0c:	6983      	ldr	r3, [r0, #24]
 8008c0e:	b510      	push	{r4, lr}
 8008c10:	4604      	mov	r4, r0
 8008c12:	b113      	cbz	r3, 8008c1a <validate+0xe>
 8008c14:	f7fd fd32 	bl	800667c <acc_rss_integration_log_level>
 8008c18:	b9c8      	cbnz	r0, 8008c4e <validate+0x42>
 8008c1a:	69e3      	ldr	r3, [r4, #28]
 8008c1c:	b113      	cbz	r3, 8008c24 <validate+0x18>
 8008c1e:	f7fd fd2d 	bl	800667c <acc_rss_integration_log_level>
 8008c22:	b948      	cbnz	r0, 8008c38 <validate+0x2c>
 8008c24:	6963      	ldr	r3, [r4, #20]
 8008c26:	b183      	cbz	r3, 8008c4a <validate+0x3e>
 8008c28:	4b0c      	ldr	r3, [pc, #48]	; (8008c5c <validate+0x50>)
 8008c2a:	4a0d      	ldr	r2, [pc, #52]	; (8008c60 <validate+0x54>)
 8008c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c2e:	490d      	ldr	r1, [pc, #52]	; (8008c64 <validate+0x58>)
 8008c30:	2000      	movs	r0, #0
 8008c32:	4798      	blx	r3
 8008c34:	2000      	movs	r0, #0
 8008c36:	bd10      	pop	{r4, pc}
 8008c38:	4b08      	ldr	r3, [pc, #32]	; (8008c5c <validate+0x50>)
 8008c3a:	4a0b      	ldr	r2, [pc, #44]	; (8008c68 <validate+0x5c>)
 8008c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c3e:	4909      	ldr	r1, [pc, #36]	; (8008c64 <validate+0x58>)
 8008c40:	2001      	movs	r0, #1
 8008c42:	4798      	blx	r3
 8008c44:	6963      	ldr	r3, [r4, #20]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d1ee      	bne.n	8008c28 <validate+0x1c>
 8008c4a:	2001      	movs	r0, #1
 8008c4c:	bd10      	pop	{r4, pc}
 8008c4e:	4b03      	ldr	r3, [pc, #12]	; (8008c5c <validate+0x50>)
 8008c50:	4a06      	ldr	r2, [pc, #24]	; (8008c6c <validate+0x60>)
 8008c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c54:	4903      	ldr	r1, [pc, #12]	; (8008c64 <validate+0x58>)
 8008c56:	2001      	movs	r0, #1
 8008c58:	4798      	blx	r3
 8008c5a:	e7de      	b.n	8008c1a <validate+0xe>
 8008c5c:	20000640 	.word	0x20000640
 8008c60:	08013fe8 	.word	0x08013fe8
 8008c64:	08013fd0 	.word	0x08013fd0
 8008c68:	08013fac 	.word	0x08013fac
 8008c6c:	08013f7c 	.word	0x08013f7c

08008c70 <acc_element_sink_callback_init>:
 8008c70:	b410      	push	{r4}
 8008c72:	4a05      	ldr	r2, [pc, #20]	; (8008c88 <acc_element_sink_callback_init+0x18>)
 8008c74:	4c05      	ldr	r4, [pc, #20]	; (8008c8c <acc_element_sink_callback_init+0x1c>)
 8008c76:	4b06      	ldr	r3, [pc, #24]	; (8008c90 <acc_element_sink_callback_init+0x20>)
 8008c78:	6401      	str	r1, [r0, #64]	; 0x40
 8008c7a:	e9c0 4201 	strd	r4, r2, [r0, #4]
 8008c7e:	60c3      	str	r3, [r0, #12]
 8008c80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c84:	4770      	bx	lr
 8008c86:	bf00      	nop
 8008c88:	08008c0d 	.word	0x08008c0d
 8008c8c:	08008bf1 	.word	0x08008bf1
 8008c90:	08008c09 	.word	0x08008c09

08008c94 <acc_probes_execute_uint16>:
 8008c94:	b530      	push	{r4, r5, lr}
 8008c96:	4c09      	ldr	r4, [pc, #36]	; (8008cbc <acc_probes_execute_uint16+0x28>)
 8008c98:	eb04 1400 	add.w	r4, r4, r0, lsl #4
 8008c9c:	b085      	sub	sp, #20
 8008c9e:	6865      	ldr	r5, [r4, #4]
 8008ca0:	f88d 0004 	strb.w	r0, [sp, #4]
 8008ca4:	2001      	movs	r0, #1
 8008ca6:	e9cd 1002 	strd	r1, r0, [sp, #8]
 8008caa:	b12d      	cbz	r5, 8008cb8 <acc_probes_execute_uint16+0x24>
 8008cac:	4611      	mov	r1, r2
 8008cae:	461a      	mov	r2, r3
 8008cb0:	4082      	lsls	r2, r0
 8008cb2:	68e3      	ldr	r3, [r4, #12]
 8008cb4:	a801      	add	r0, sp, #4
 8008cb6:	47a8      	blx	r5
 8008cb8:	b005      	add	sp, #20
 8008cba:	bd30      	pop	{r4, r5, pc}
 8008cbc:	2000000c 	.word	0x2000000c

08008cc0 <acc_probes_execute_struct>:
 8008cc0:	b530      	push	{r4, r5, lr}
 8008cc2:	4c0a      	ldr	r4, [pc, #40]	; (8008cec <acc_probes_execute_struct+0x2c>)
 8008cc4:	eb04 1400 	add.w	r4, r4, r0, lsl #4
 8008cc8:	b085      	sub	sp, #20
 8008cca:	6865      	ldr	r5, [r4, #4]
 8008ccc:	f88d 0004 	strb.w	r0, [sp, #4]
 8008cd0:	2007      	movs	r0, #7
 8008cd2:	e9cd 1002 	strd	r1, r0, [sp, #8]
 8008cd6:	b135      	cbz	r5, 8008ce6 <acc_probes_execute_struct+0x26>
 8008cd8:	4611      	mov	r1, r2
 8008cda:	a801      	add	r0, sp, #4
 8008cdc:	461a      	mov	r2, r3
 8008cde:	68e3      	ldr	r3, [r4, #12]
 8008ce0:	47a8      	blx	r5
 8008ce2:	b005      	add	sp, #20
 8008ce4:	bd30      	pop	{r4, r5, pc}
 8008ce6:	2001      	movs	r0, #1
 8008ce8:	b005      	add	sp, #20
 8008cea:	bd30      	pop	{r4, r5, pc}
 8008cec:	2000000c 	.word	0x2000000c

08008cf0 <acc_probes_execute_primitive_probe>:
 8008cf0:	b510      	push	{r4, lr}
 8008cf2:	4b0a      	ldr	r3, [pc, #40]	; (8008d1c <acc_probes_execute_primitive_probe+0x2c>)
 8008cf4:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8008cf8:	b084      	sub	sp, #16
 8008cfa:	685c      	ldr	r4, [r3, #4]
 8008cfc:	f88d 0004 	strb.w	r0, [sp, #4]
 8008d00:	2200      	movs	r2, #0
 8008d02:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8008d06:	b12c      	cbz	r4, 8008d14 <acc_probes_execute_primitive_probe+0x24>
 8008d08:	68db      	ldr	r3, [r3, #12]
 8008d0a:	4611      	mov	r1, r2
 8008d0c:	a801      	add	r0, sp, #4
 8008d0e:	47a0      	blx	r4
 8008d10:	b004      	add	sp, #16
 8008d12:	bd10      	pop	{r4, pc}
 8008d14:	2001      	movs	r0, #1
 8008d16:	b004      	add	sp, #16
 8008d18:	bd10      	pop	{r4, pc}
 8008d1a:	bf00      	nop
 8008d1c:	2000000c 	.word	0x2000000c

08008d20 <acc_sensor_reg_read>:
 8008d20:	b530      	push	{r4, r5, lr}
 8008d22:	b083      	sub	sp, #12
 8008d24:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
 8008d28:	4614      	mov	r4, r2
 8008d2a:	2500      	movs	r5, #0
 8008d2c:	f8ad 1000 	strh.w	r1, [sp]
 8008d30:	2301      	movs	r3, #1
 8008d32:	2203      	movs	r2, #3
 8008d34:	4669      	mov	r1, sp
 8008d36:	f8ad 5002 	strh.w	r5, [sp, #2]
 8008d3a:	f8ad 5004 	strh.w	r5, [sp, #4]
 8008d3e:	f7fd fc23 	bl	8006588 <acc_rss_integration_sensor_device_transfer>
 8008d42:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8008d46:	8023      	strh	r3, [r4, #0]
 8008d48:	b003      	add	sp, #12
 8008d4a:	bd30      	pop	{r4, r5, pc}

08008d4c <acc_sensor_reg_write>:
 8008d4c:	b530      	push	{r4, r5, lr}
 8008d4e:	b083      	sub	sp, #12
 8008d50:	f441 5480 	orr.w	r4, r1, #4096	; 0x1000
 8008d54:	4615      	mov	r5, r2
 8008d56:	2300      	movs	r3, #0
 8008d58:	2202      	movs	r2, #2
 8008d5a:	a901      	add	r1, sp, #4
 8008d5c:	f8ad 4004 	strh.w	r4, [sp, #4]
 8008d60:	f8ad 5006 	strh.w	r5, [sp, #6]
 8008d64:	f7fd fc10 	bl	8006588 <acc_rss_integration_sensor_device_transfer>
 8008d68:	b003      	add	sp, #12
 8008d6a:	bd30      	pop	{r4, r5, pc}

08008d6c <acc_sensor_reg_field_write>:
 8008d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d70:	b082      	sub	sp, #8
 8008d72:	461d      	mov	r5, r3
 8008d74:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8008d78:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
 8008d7c:	f8ad 3000 	strh.w	r3, [sp]
 8008d80:	2700      	movs	r7, #0
 8008d82:	468a      	mov	sl, r1
 8008d84:	4691      	mov	r9, r2
 8008d86:	4669      	mov	r1, sp
 8008d88:	2301      	movs	r3, #1
 8008d8a:	2203      	movs	r2, #3
 8008d8c:	4680      	mov	r8, r0
 8008d8e:	f8ad 7002 	strh.w	r7, [sp, #2]
 8008d92:	f8ad 7004 	strh.w	r7, [sp, #4]
 8008d96:	f7fd fbf7 	bl	8006588 <acc_rss_integration_sensor_device_transfer>
 8008d9a:	f9bd 6004 	ldrsh.w	r6, [sp, #4]
 8008d9e:	fa04 f10a 	lsl.w	r1, r4, sl
 8008da2:	4071      	eors	r1, r6
 8008da4:	ea01 0409 	and.w	r4, r1, r9
 8008da8:	f445 5580 	orr.w	r5, r5, #4096	; 0x1000
 8008dac:	4640      	mov	r0, r8
 8008dae:	463b      	mov	r3, r7
 8008db0:	4669      	mov	r1, sp
 8008db2:	4074      	eors	r4, r6
 8008db4:	2202      	movs	r2, #2
 8008db6:	f8ad 5000 	strh.w	r5, [sp]
 8008dba:	f8ad 4002 	strh.w	r4, [sp, #2]
 8008dbe:	f7fd fbe3 	bl	8006588 <acc_rss_integration_sensor_device_transfer>
 8008dc2:	b002      	add	sp, #8
 8008dc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008dc8 <acc_sensor_conf_read_instr>:
 8008dc8:	b530      	push	{r4, r5, lr}
 8008dca:	b085      	sub	sp, #20
 8008dcc:	2401      	movs	r4, #1
 8008dce:	f441 4120 	orr.w	r1, r1, #40960	; 0xa000
 8008dd2:	4623      	mov	r3, r4
 8008dd4:	2500      	movs	r5, #0
 8008dd6:	f8ad 1004 	strh.w	r1, [sp, #4]
 8008dda:	2205      	movs	r2, #5
 8008ddc:	a901      	add	r1, sp, #4
 8008dde:	f8ad 4006 	strh.w	r4, [sp, #6]
 8008de2:	f8ad 5008 	strh.w	r5, [sp, #8]
 8008de6:	f8cd 500a 	str.w	r5, [sp, #10]
 8008dea:	f7fd fbcd 	bl	8006588 <acc_rss_integration_sensor_device_transfer>
 8008dee:	f10d 000a 	add.w	r0, sp, #10
 8008df2:	4622      	mov	r2, r4
 8008df4:	4669      	mov	r1, sp
 8008df6:	f000 f92f 	bl	8009058 <acc_utils_transfer_buffer_to_uint32>
 8008dfa:	9800      	ldr	r0, [sp, #0]
 8008dfc:	b005      	add	sp, #20
 8008dfe:	bd30      	pop	{r4, r5, pc}

08008e00 <acc_cpd_pll_divisors_calculate>:
 8008e00:	edd0 7a00 	vldr	s15, [r0]
 8008e04:	ed9f 6a61 	vldr	s12, [pc, #388]	; 8008f8c <acc_cpd_pll_divisors_calculate+0x18c>
 8008e08:	eddf 6a61 	vldr	s13, [pc, #388]	; 8008f90 <acc_cpd_pll_divisors_calculate+0x190>
 8008e0c:	ee86 7a27 	vdiv.f32	s14, s12, s15
 8008e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e12:	4606      	mov	r6, r0
 8008e14:	b083      	sub	sp, #12
 8008e16:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8008e1a:	ee37 7a06 	vadd.f32	s14, s14, s12
 8008e1e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8008e22:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8008e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e2a:	ee17 3a10 	vmov	r3, s14
 8008e2e:	b29c      	uxth	r4, r3
 8008e30:	dc06      	bgt.n	8008e40 <acc_cpd_pll_divisors_calculate+0x40>
 8008e32:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8008f94 <acc_cpd_pll_divisors_calculate+0x194>
 8008e36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e3e:	d571      	bpl.n	8008f24 <acc_cpd_pll_divisors_calculate+0x124>
 8008e40:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e48:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8008f98 <acc_cpd_pll_divisors_calculate+0x198>
 8008e4c:	bf4c      	ite	mi
 8008e4e:	4b53      	ldrmi	r3, [pc, #332]	; (8008f9c <acc_cpd_pll_divisors_calculate+0x19c>)
 8008e50:	4b53      	ldrpl	r3, [pc, #332]	; (8008fa0 <acc_cpd_pll_divisors_calculate+0x1a0>)
 8008e52:	ed9f 6a51 	vldr	s12, [pc, #324]	; 8008f98 <acc_cpd_pll_divisors_calculate+0x198>
 8008e56:	eddf 6a53 	vldr	s13, [pc, #332]	; 8008fa4 <acc_cpd_pll_divisors_calculate+0x1a4>
 8008e5a:	4d53      	ldr	r5, [pc, #332]	; (8008fa8 <acc_cpd_pll_divisors_calculate+0x1a8>)
 8008e5c:	4953      	ldr	r1, [pc, #332]	; (8008fac <acc_cpd_pll_divisors_calculate+0x1ac>)
 8008e5e:	6b6f      	ldr	r7, [r5, #52]	; 0x34
 8008e60:	bf48      	it	mi
 8008e62:	eef1 7a67 	vnegmi.f32	s15, s15
 8008e66:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008e6a:	2000      	movs	r0, #0
 8008e6c:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8008e70:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e78:	ee17 2a10 	vmov	r2, s14
 8008e7c:	bf4c      	ite	mi
 8008e7e:	eeb1 7a67 	vnegmi.f32	s14, s15
 8008e82:	eeb0 7a67 	vmovpl.f32	s14, s15
 8008e86:	ee37 7a06 	vadd.f32	s14, s14, s12
 8008e8a:	9200      	str	r2, [sp, #0]
 8008e8c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8008e90:	4a47      	ldr	r2, [pc, #284]	; (8008fb0 <acc_cpd_pll_divisors_calculate+0x1b0>)
 8008e92:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8008e96:	3c10      	subs	r4, #16
 8008e98:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008e9c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008ea0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ea4:	edcd 7a01 	vstr	s15, [sp, #4]
 8008ea8:	47b8      	blx	r7
 8008eaa:	2cef      	cmp	r4, #239	; 0xef
 8008eac:	d937      	bls.n	8008f1e <acc_cpd_pll_divisors_calculate+0x11e>
 8008eae:	edd6 7a00 	vldr	s15, [r6]
 8008eb2:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8008f98 <acc_cpd_pll_divisors_calculate+0x198>
 8008eb6:	ed9f 6a38 	vldr	s12, [pc, #224]	; 8008f98 <acc_cpd_pll_divisors_calculate+0x198>
 8008eba:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8008fa4 <acc_cpd_pll_divisors_calculate+0x1a4>
 8008ebe:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 8008ec0:	493a      	ldr	r1, [pc, #232]	; (8008fac <acc_cpd_pll_divisors_calculate+0x1ac>)
 8008ec2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008eca:	bf48      	it	mi
 8008ecc:	eef1 7a67 	vnegmi.f32	s15, s15
 8008ed0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008ed4:	bf4c      	ite	mi
 8008ed6:	4b31      	ldrmi	r3, [pc, #196]	; (8008f9c <acc_cpd_pll_divisors_calculate+0x19c>)
 8008ed8:	4b31      	ldrpl	r3, [pc, #196]	; (8008fa0 <acc_cpd_pll_divisors_calculate+0x1a0>)
 8008eda:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8008ede:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ee6:	ee17 2a10 	vmov	r2, s14
 8008eea:	bf4c      	ite	mi
 8008eec:	eeb1 7a67 	vnegmi.f32	s14, s15
 8008ef0:	eeb0 7a67 	vmovpl.f32	s14, s15
 8008ef4:	ee37 7a06 	vadd.f32	s14, s14, s12
 8008ef8:	9200      	str	r2, [sp, #0]
 8008efa:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8008efe:	4a2c      	ldr	r2, [pc, #176]	; (8008fb0 <acc_cpd_pll_divisors_calculate+0x1b0>)
 8008f00:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8008f04:	2000      	movs	r0, #0
 8008f06:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008f0a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008f0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f12:	edcd 7a01 	vstr	s15, [sp, #4]
 8008f16:	47a0      	blx	r4
 8008f18:	2000      	movs	r0, #0
 8008f1a:	b003      	add	sp, #12
 8008f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f1e:	2000      	movs	r0, #0
 8008f20:	b003      	add	sp, #12
 8008f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f24:	f1a4 0310 	sub.w	r3, r4, #16
 8008f28:	b29b      	uxth	r3, r3
 8008f2a:	2bef      	cmp	r3, #239	; 0xef
 8008f2c:	d901      	bls.n	8008f32 <acc_cpd_pll_divisors_calculate+0x132>
 8008f2e:	4d1e      	ldr	r5, [pc, #120]	; (8008fa8 <acc_cpd_pll_divisors_calculate+0x1a8>)
 8008f30:	e7bf      	b.n	8008eb2 <acc_cpd_pll_divisors_calculate+0xb2>
 8008f32:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008f36:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8008fb4 <acc_cpd_pll_divisors_calculate+0x1b4>
 8008f3a:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8008fb8 <acc_cpd_pll_divisors_calculate+0x1b8>
 8008f3e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008f42:	2c3f      	cmp	r4, #63	; 0x3f
 8008f44:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008f48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f4c:	ee17 2a90 	vmov	r2, s15
 8008f50:	810a      	strh	r2, [r1, #8]
 8008f52:	d912      	bls.n	8008f7a <acc_cpd_pll_divisors_calculate+0x17a>
 8008f54:	2cbf      	cmp	r4, #191	; 0xbf
 8008f56:	f04f 0301 	mov.w	r3, #1
 8008f5a:	bf98      	it	ls
 8008f5c:	f1a4 0240 	subls.w	r2, r4, #64	; 0x40
 8008f60:	804b      	strh	r3, [r1, #2]
 8008f62:	bf8c      	ite	hi
 8008f64:	08e2      	lsrhi	r2, r4, #3
 8008f66:	f3c2 02cf 	ubfxls	r2, r2, #3, #16
 8008f6a:	f004 0307 	and.w	r3, r4, #7
 8008f6e:	808a      	strh	r2, [r1, #4]
 8008f70:	80cb      	strh	r3, [r1, #6]
 8008f72:	2001      	movs	r0, #1
 8008f74:	800c      	strh	r4, [r1, #0]
 8008f76:	b003      	add	sp, #12
 8008f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	2c2f      	cmp	r4, #47	; 0x2f
 8008f7e:	bf88      	it	hi
 8008f80:	4623      	movhi	r3, r4
 8008f82:	808b      	strh	r3, [r1, #4]
 8008f84:	804a      	strh	r2, [r1, #2]
 8008f86:	80ca      	strh	r2, [r1, #6]
 8008f88:	e7f3      	b.n	8008f72 <acc_cpd_pll_divisors_calculate+0x172>
 8008f8a:	bf00      	nop
 8008f8c:	4f1502f9 	.word	0x4f1502f9
 8008f90:	4c989680 	.word	0x4c989680
 8008f94:	4b989680 	.word	0x4b989680
 8008f98:	350637bd 	.word	0x350637bd
 8008f9c:	08013790 	.word	0x08013790
 8008fa0:	08014818 	.word	0x08014818
 8008fa4:	49742400 	.word	0x49742400
 8008fa8:	20000640 	.word	0x20000640
 8008fac:	0801403c 	.word	0x0801403c
 8008fb0:	08014010 	.word	0x08014010
 8008fb4:	b55b38e8 	.word	0xb55b38e8
 8008fb8:	427c0000 	.word	0x427c0000

08008fbc <acc_cpd_pll_divisors_ref_divisor>:
 8008fbc:	eddf 7a02 	vldr	s15, [pc, #8]	; 8008fc8 <acc_cpd_pll_divisors_ref_divisor+0xc>
 8008fc0:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8008fc4:	f007 be30 	b.w	8010c28 <roundf>
 8008fc8:	4f1502f9 	.word	0x4f1502f9

08008fcc <acc_dll_calculate_area_settings>:
 8008fcc:	0080      	lsls	r0, r0, #2
 8008fce:	b280      	uxth	r0, r0
 8008fd0:	eb00 0351 	add.w	r3, r0, r1, lsr #1
 8008fd4:	b29b      	uxth	r3, r3
 8008fd6:	428b      	cmp	r3, r1
 8008fd8:	8010      	strh	r0, [r2, #0]
 8008fda:	8053      	strh	r3, [r2, #2]
 8008fdc:	d20c      	bcs.n	8008ff8 <acc_dll_calculate_area_settings+0x2c>
 8008fde:	2301      	movs	r3, #1
 8008fe0:	2100      	movs	r1, #0
 8008fe2:	2003      	movs	r0, #3
 8008fe4:	8093      	strh	r3, [r2, #4]
 8008fe6:	8153      	strh	r3, [r2, #10]
 8008fe8:	8193      	strh	r3, [r2, #12]
 8008fea:	8213      	strh	r3, [r2, #16]
 8008fec:	80d1      	strh	r1, [r2, #6]
 8008fee:	8251      	strh	r1, [r2, #18]
 8008ff0:	8291      	strh	r1, [r2, #20]
 8008ff2:	8110      	strh	r0, [r2, #8]
 8008ff4:	81d0      	strh	r0, [r2, #14]
 8008ff6:	4770      	bx	lr
 8008ff8:	b430      	push	{r4, r5}
 8008ffa:	fbb3 f4f1 	udiv	r4, r3, r1
 8008ffe:	2500      	movs	r5, #0
 8009000:	fb01 3114 	mls	r1, r1, r4, r3
 8009004:	2401      	movs	r4, #1
 8009006:	2303      	movs	r3, #3
 8009008:	8094      	strh	r4, [r2, #4]
 800900a:	80d4      	strh	r4, [r2, #6]
 800900c:	8154      	strh	r4, [r2, #10]
 800900e:	8214      	strh	r4, [r2, #16]
 8009010:	8254      	strh	r4, [r2, #18]
 8009012:	8195      	strh	r5, [r2, #12]
 8009014:	81d5      	strh	r5, [r2, #14]
 8009016:	8295      	strh	r5, [r2, #20]
 8009018:	8050      	strh	r0, [r2, #2]
 800901a:	bc30      	pop	{r4, r5}
 800901c:	8011      	strh	r1, [r2, #0]
 800901e:	8113      	strh	r3, [r2, #8]
 8009020:	4770      	bx	lr
 8009022:	bf00      	nop

08009024 <acc_utils_swap16_array>:
 8009024:	b141      	cbz	r1, 8009038 <acc_utils_swap16_array+0x14>
 8009026:	3802      	subs	r0, #2
 8009028:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800902c:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8009030:	ba5b      	rev16	r3, r3
 8009032:	4288      	cmp	r0, r1
 8009034:	8003      	strh	r3, [r0, #0]
 8009036:	d1f9      	bne.n	800902c <acc_utils_swap16_array+0x8>
 8009038:	4770      	bx	lr
 800903a:	bf00      	nop

0800903c <acc_utils_uint32_to_transfer_buffer>:
 800903c:	b152      	cbz	r2, 8009054 <acc_utils_uint32_to_transfer_buffer+0x18>
 800903e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8009042:	3804      	subs	r0, #4
 8009044:	f850 3f04 	ldr.w	r3, [r0, #4]!
 8009048:	804b      	strh	r3, [r1, #2]
 800904a:	0c1b      	lsrs	r3, r3, #16
 800904c:	800b      	strh	r3, [r1, #0]
 800904e:	3104      	adds	r1, #4
 8009050:	4291      	cmp	r1, r2
 8009052:	d1f7      	bne.n	8009044 <acc_utils_uint32_to_transfer_buffer+0x8>
 8009054:	4770      	bx	lr
 8009056:	bf00      	nop

08009058 <acc_utils_transfer_buffer_to_uint32>:
 8009058:	b17a      	cbz	r2, 800907a <acc_utils_transfer_buffer_to_uint32+0x22>
 800905a:	b410      	push	{r4}
 800905c:	3904      	subs	r1, #4
 800905e:	eb00 0482 	add.w	r4, r0, r2, lsl #2
 8009062:	8802      	ldrh	r2, [r0, #0]
 8009064:	8843      	ldrh	r3, [r0, #2]
 8009066:	3004      	adds	r0, #4
 8009068:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800906c:	4284      	cmp	r4, r0
 800906e:	f841 3f04 	str.w	r3, [r1, #4]!
 8009072:	d1f6      	bne.n	8009062 <acc_utils_transfer_buffer_to_uint32+0xa>
 8009074:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009078:	4770      	bx	lr
 800907a:	4770      	bx	lr

0800907c <event>:
 800907c:	b570      	push	{r4, r5, r6, lr}
 800907e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009080:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009082:	682a      	ldr	r2, [r5, #0]
 8009084:	4604      	mov	r4, r0
 8009086:	e9d0 0104 	ldrd	r0, r1, [r0, #16]
 800908a:	4798      	blx	r3
 800908c:	6823      	ldr	r3, [r4, #0]
 800908e:	6028      	str	r0, [r5, #0]
 8009090:	685a      	ldr	r2, [r3, #4]
 8009092:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009096:	4618      	mov	r0, r3
 8009098:	4710      	bx	r2
 800909a:	bf00      	nop

0800909c <reset>:
 800909c:	6800      	ldr	r0, [r0, #0]
 800909e:	68c3      	ldr	r3, [r0, #12]
 80090a0:	4718      	bx	r3
 80090a2:	bf00      	nop

080090a4 <validate>:
 80090a4:	6983      	ldr	r3, [r0, #24]
 80090a6:	b510      	push	{r4, lr}
 80090a8:	4604      	mov	r4, r0
 80090aa:	b113      	cbz	r3, 80090b2 <validate+0xe>
 80090ac:	f7fd fae6 	bl	800667c <acc_rss_integration_log_level>
 80090b0:	b978      	cbnz	r0, 80090d2 <validate+0x2e>
 80090b2:	69e3      	ldr	r3, [r4, #28]
 80090b4:	b143      	cbz	r3, 80090c8 <validate+0x24>
 80090b6:	f7fd fae1 	bl	800667c <acc_rss_integration_log_level>
 80090ba:	b128      	cbz	r0, 80090c8 <validate+0x24>
 80090bc:	4b08      	ldr	r3, [pc, #32]	; (80090e0 <validate+0x3c>)
 80090be:	4a09      	ldr	r2, [pc, #36]	; (80090e4 <validate+0x40>)
 80090c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090c2:	4909      	ldr	r1, [pc, #36]	; (80090e8 <validate+0x44>)
 80090c4:	2001      	movs	r0, #1
 80090c6:	4798      	blx	r3
 80090c8:	6820      	ldr	r0, [r4, #0]
 80090ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090ce:	6883      	ldr	r3, [r0, #8]
 80090d0:	4718      	bx	r3
 80090d2:	4b03      	ldr	r3, [pc, #12]	; (80090e0 <validate+0x3c>)
 80090d4:	4a05      	ldr	r2, [pc, #20]	; (80090ec <validate+0x48>)
 80090d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090d8:	4903      	ldr	r1, [pc, #12]	; (80090e8 <validate+0x44>)
 80090da:	2001      	movs	r0, #1
 80090dc:	4798      	blx	r3
 80090de:	e7e8      	b.n	80090b2 <validate+0xe>
 80090e0:	20000640 	.word	0x20000640
 80090e4:	08013fac 	.word	0x08013fac
 80090e8:	08014050 	.word	0x08014050
 80090ec:	08013f7c 	.word	0x08013f7c

080090f0 <abs_q3_12_complex>:
 80090f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090f2:	0897      	lsrs	r7, r2, #2
 80090f4:	d00b      	beq.n	800910e <abs_q3_12_complex+0x1e>
 80090f6:	4604      	mov	r4, r0
 80090f8:	1e8d      	subs	r5, r1, #2
 80090fa:	eb00 0687 	add.w	r6, r0, r7, lsl #2
 80090fe:	f854 0b04 	ldr.w	r0, [r4], #4
 8009102:	f004 fafb 	bl	800d6fc <acc_alg_basic_math_q3_12_complex_scalar_abs>
 8009106:	42b4      	cmp	r4, r6
 8009108:	f825 0f02 	strh.w	r0, [r5, #2]!
 800910c:	d1f7      	bne.n	80090fe <abs_q3_12_complex+0xe>
 800910e:	0078      	lsls	r0, r7, #1
 8009110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009112:	bf00      	nop

08009114 <acc_element_abs_init>:
 8009114:	b510      	push	{r4, lr}
 8009116:	4a0b      	ldr	r2, [pc, #44]	; (8009144 <acc_element_abs_init+0x30>)
 8009118:	4c0b      	ldr	r4, [pc, #44]	; (8009148 <acc_element_abs_init+0x34>)
 800911a:	4b0c      	ldr	r3, [pc, #48]	; (800914c <acc_element_abs_init+0x38>)
 800911c:	60c3      	str	r3, [r0, #12]
 800911e:	2907      	cmp	r1, #7
 8009120:	e9c0 4201 	strd	r4, r2, [r0, #4]
 8009124:	d103      	bne.n	800912e <acc_element_abs_init+0x1a>
 8009126:	4b0a      	ldr	r3, [pc, #40]	; (8009150 <acc_element_abs_init+0x3c>)
 8009128:	6383      	str	r3, [r0, #56]	; 0x38
 800912a:	2001      	movs	r0, #1
 800912c:	bd10      	pop	{r4, pc}
 800912e:	4b09      	ldr	r3, [pc, #36]	; (8009154 <acc_element_abs_init+0x40>)
 8009130:	4a09      	ldr	r2, [pc, #36]	; (8009158 <acc_element_abs_init+0x44>)
 8009132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009134:	4909      	ldr	r1, [pc, #36]	; (800915c <acc_element_abs_init+0x48>)
 8009136:	2400      	movs	r4, #0
 8009138:	6384      	str	r4, [r0, #56]	; 0x38
 800913a:	4620      	mov	r0, r4
 800913c:	4798      	blx	r3
 800913e:	4620      	mov	r0, r4
 8009140:	bd10      	pop	{r4, pc}
 8009142:	bf00      	nop
 8009144:	080090a5 	.word	0x080090a5
 8009148:	0800907d 	.word	0x0800907d
 800914c:	0800909d 	.word	0x0800909d
 8009150:	080090f1 	.word	0x080090f1
 8009154:	20000640 	.word	0x20000640
 8009158:	08013fbc 	.word	0x08013fbc
 800915c:	08014050 	.word	0x08014050

08009160 <event>:
 8009160:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8009162:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009164:	6811      	ldr	r1, [r2, #0]
 8009166:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
 8009168:	b510      	push	{r4, lr}
 800916a:	4604      	mov	r4, r0
 800916c:	6900      	ldr	r0, [r0, #16]
 800916e:	4798      	blx	r3
 8009170:	6820      	ldr	r0, [r4, #0]
 8009172:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009176:	6843      	ldr	r3, [r0, #4]
 8009178:	4718      	bx	r3
 800917a:	bf00      	nop

0800917c <reset>:
 800917c:	6800      	ldr	r0, [r0, #0]
 800917e:	68c3      	ldr	r3, [r0, #12]
 8009180:	4718      	bx	r3
 8009182:	bf00      	nop

08009184 <validate>:
 8009184:	6983      	ldr	r3, [r0, #24]
 8009186:	b510      	push	{r4, lr}
 8009188:	4604      	mov	r4, r0
 800918a:	b113      	cbz	r3, 8009192 <validate+0xe>
 800918c:	f7fd fa76 	bl	800667c <acc_rss_integration_log_level>
 8009190:	b978      	cbnz	r0, 80091b2 <validate+0x2e>
 8009192:	69e3      	ldr	r3, [r4, #28]
 8009194:	b143      	cbz	r3, 80091a8 <validate+0x24>
 8009196:	f7fd fa71 	bl	800667c <acc_rss_integration_log_level>
 800919a:	b128      	cbz	r0, 80091a8 <validate+0x24>
 800919c:	4b08      	ldr	r3, [pc, #32]	; (80091c0 <validate+0x3c>)
 800919e:	4a09      	ldr	r2, [pc, #36]	; (80091c4 <validate+0x40>)
 80091a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091a2:	4909      	ldr	r1, [pc, #36]	; (80091c8 <validate+0x44>)
 80091a4:	2001      	movs	r0, #1
 80091a6:	4798      	blx	r3
 80091a8:	6820      	ldr	r0, [r4, #0]
 80091aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091ae:	6883      	ldr	r3, [r0, #8]
 80091b0:	4718      	bx	r3
 80091b2:	4b03      	ldr	r3, [pc, #12]	; (80091c0 <validate+0x3c>)
 80091b4:	4a05      	ldr	r2, [pc, #20]	; (80091cc <validate+0x48>)
 80091b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091b8:	4903      	ldr	r1, [pc, #12]	; (80091c8 <validate+0x44>)
 80091ba:	2001      	movs	r0, #1
 80091bc:	4798      	blx	r3
 80091be:	e7e8      	b.n	8009192 <validate+0xe>
 80091c0:	20000640 	.word	0x20000640
 80091c4:	08013fac 	.word	0x08013fac
 80091c8:	0801405c 	.word	0x0801405c
 80091cc:	08013f7c 	.word	0x08013f7c

080091d0 <centering_q12_4>:
 80091d0:	f3c1 014f 	ubfx	r1, r1, #1, #16
 80091d4:	f3c2 024f 	ubfx	r2, r2, #1, #16
 80091d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80091dc:	f003 bbe2 	b.w	800c9a4 <acc_alg_basic_subtract_section_mean_q12_4>

080091e0 <acc_element_centering_init>:
 80091e0:	b430      	push	{r4, r5}
 80091e2:	4b09      	ldr	r3, [pc, #36]	; (8009208 <acc_element_centering_init+0x28>)
 80091e4:	60c3      	str	r3, [r0, #12]
 80091e6:	2905      	cmp	r1, #5
 80091e8:	4d08      	ldr	r5, [pc, #32]	; (800920c <acc_element_centering_init+0x2c>)
 80091ea:	4c09      	ldr	r4, [pc, #36]	; (8009210 <acc_element_centering_init+0x30>)
 80091ec:	bf08      	it	eq
 80091ee:	4909      	ldreq	r1, [pc, #36]	; (8009214 <acc_element_centering_init+0x34>)
 80091f0:	8782      	strh	r2, [r0, #60]	; 0x3c
 80091f2:	bf1a      	itte	ne
 80091f4:	2300      	movne	r3, #0
 80091f6:	4619      	movne	r1, r3
 80091f8:	2301      	moveq	r3, #1
 80091fa:	e9c0 5401 	strd	r5, r4, [r0, #4]
 80091fe:	6381      	str	r1, [r0, #56]	; 0x38
 8009200:	bc30      	pop	{r4, r5}
 8009202:	4618      	mov	r0, r3
 8009204:	4770      	bx	lr
 8009206:	bf00      	nop
 8009208:	0800917d 	.word	0x0800917d
 800920c:	08009161 	.word	0x08009161
 8009210:	08009185 	.word	0x08009185
 8009214:	080091d1 	.word	0x080091d1

08009218 <convert_q3_12_to_u16>:
 8009218:	0853      	lsrs	r3, r2, #1
 800921a:	d010      	beq.n	800923e <convert_q3_12_to_u16+0x26>
 800921c:	b410      	push	{r4}
 800921e:	eb01 0443 	add.w	r4, r1, r3, lsl #1
 8009222:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 8009226:	f831 3d02 	ldrh.w	r3, [r1, #-2]!
 800922a:	005b      	lsls	r3, r3, #1
 800922c:	4281      	cmp	r1, r0
 800922e:	f824 3d02 	strh.w	r3, [r4, #-2]!
 8009232:	d1f8      	bne.n	8009226 <convert_q3_12_to_u16+0xe>
 8009234:	f022 0001 	bic.w	r0, r2, #1
 8009238:	f85d 4b04 	ldr.w	r4, [sp], #4
 800923c:	4770      	bx	lr
 800923e:	f022 0001 	bic.w	r0, r2, #1
 8009242:	4770      	bx	lr

08009244 <convert_q3_12_complex_to_f32_complex>:
 8009244:	0892      	lsrs	r2, r2, #2
 8009246:	d024      	beq.n	8009292 <convert_q3_12_complex_to_f32_complex+0x4e>
 8009248:	eddf 6a13 	vldr	s13, [pc, #76]	; 8009298 <convert_q3_12_complex_to_f32_complex+0x54>
 800924c:	eddf 5a13 	vldr	s11, [pc, #76]	; 800929c <convert_q3_12_complex_to_f32_complex+0x58>
 8009250:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8009254:	00d0      	lsls	r0, r2, #3
 8009256:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800925a:	f933 cc02 	ldrsh.w	ip, [r3, #-2]
 800925e:	ee07 ca10 	vmov	s14, ip
 8009262:	f933 cd04 	ldrsh.w	ip, [r3, #-4]!
 8009266:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800926a:	ee07 ca90 	vmov	s15, ip
 800926e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8009272:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009276:	ee27 6a25 	vmul.f32	s12, s14, s11
 800927a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800927e:	ed02 7a01 	vstr	s14, [r2, #-4]
 8009282:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009286:	3a08      	subs	r2, #8
 8009288:	edc2 7a00 	vstr	s15, [r2]
 800928c:	4291      	cmp	r1, r2
 800928e:	d1e4      	bne.n	800925a <convert_q3_12_complex_to_f32_complex+0x16>
 8009290:	4770      	bx	lr
 8009292:	4610      	mov	r0, r2
 8009294:	4770      	bx	lr
 8009296:	bf00      	nop
 8009298:	39800000 	.word	0x39800000
 800929c:	00000000 	.word	0x00000000

080092a0 <convert_q12_4_to_q3_12>:
 80092a0:	0853      	lsrs	r3, r2, #1
 80092a2:	d012      	beq.n	80092ca <convert_q12_4_to_q3_12+0x2a>
 80092a4:	b410      	push	{r4}
 80092a6:	eb01 0443 	add.w	r4, r1, r3, lsl #1
 80092aa:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 80092ae:	f931 3d02 	ldrsh.w	r3, [r1, #-2]!
 80092b2:	105b      	asrs	r3, r3, #1
 80092b4:	f483 4340 	eor.w	r3, r3, #49152	; 0xc000
 80092b8:	4281      	cmp	r1, r0
 80092ba:	f824 3d02 	strh.w	r3, [r4, #-2]!
 80092be:	d1f6      	bne.n	80092ae <convert_q12_4_to_q3_12+0xe>
 80092c0:	f022 0001 	bic.w	r0, r2, #1
 80092c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80092c8:	4770      	bx	lr
 80092ca:	f022 0001 	bic.w	r0, r2, #1
 80092ce:	4770      	bx	lr

080092d0 <convert_q12_4_to_q3_12_complex>:
 80092d0:	b470      	push	{r4, r5, r6}
 80092d2:	4605      	mov	r5, r0
 80092d4:	0850      	lsrs	r0, r2, #1
 80092d6:	d012      	beq.n	80092fe <convert_q12_4_to_q3_12_complex+0x2e>
 80092d8:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 80092dc:	eb05 0440 	add.w	r4, r5, r0, lsl #1
 80092e0:	2600      	movs	r6, #0
 80092e2:	0080      	lsls	r0, r0, #2
 80092e4:	f934 3d02 	ldrsh.w	r3, [r4, #-2]!
 80092e8:	f821 6c02 	strh.w	r6, [r1, #-2]
 80092ec:	105b      	asrs	r3, r3, #1
 80092ee:	f483 4340 	eor.w	r3, r3, #49152	; 0xc000
 80092f2:	42a5      	cmp	r5, r4
 80092f4:	f821 3c04 	strh.w	r3, [r1, #-4]
 80092f8:	f1a1 0104 	sub.w	r1, r1, #4
 80092fc:	d1f2      	bne.n	80092e4 <convert_q12_4_to_q3_12_complex+0x14>
 80092fe:	bc70      	pop	{r4, r5, r6}
 8009300:	4770      	bx	lr
 8009302:	bf00      	nop

08009304 <event>:
 8009304:	b570      	push	{r4, r5, r6, lr}
 8009306:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009308:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800930a:	682a      	ldr	r2, [r5, #0]
 800930c:	4604      	mov	r4, r0
 800930e:	e9d0 0104 	ldrd	r0, r1, [r0, #16]
 8009312:	4798      	blx	r3
 8009314:	6823      	ldr	r3, [r4, #0]
 8009316:	6028      	str	r0, [r5, #0]
 8009318:	685a      	ldr	r2, [r3, #4]
 800931a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800931e:	4618      	mov	r0, r3
 8009320:	4710      	bx	r2
 8009322:	bf00      	nop

08009324 <reset>:
 8009324:	6800      	ldr	r0, [r0, #0]
 8009326:	68c3      	ldr	r3, [r0, #12]
 8009328:	4718      	bx	r3
 800932a:	bf00      	nop

0800932c <validate>:
 800932c:	6983      	ldr	r3, [r0, #24]
 800932e:	b510      	push	{r4, lr}
 8009330:	4604      	mov	r4, r0
 8009332:	b113      	cbz	r3, 800933a <validate+0xe>
 8009334:	f7fd f9a2 	bl	800667c <acc_rss_integration_log_level>
 8009338:	b978      	cbnz	r0, 800935a <validate+0x2e>
 800933a:	69e3      	ldr	r3, [r4, #28]
 800933c:	b143      	cbz	r3, 8009350 <validate+0x24>
 800933e:	f7fd f99d 	bl	800667c <acc_rss_integration_log_level>
 8009342:	b128      	cbz	r0, 8009350 <validate+0x24>
 8009344:	4b08      	ldr	r3, [pc, #32]	; (8009368 <validate+0x3c>)
 8009346:	4a09      	ldr	r2, [pc, #36]	; (800936c <validate+0x40>)
 8009348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800934a:	4909      	ldr	r1, [pc, #36]	; (8009370 <validate+0x44>)
 800934c:	2001      	movs	r0, #1
 800934e:	4798      	blx	r3
 8009350:	6820      	ldr	r0, [r4, #0]
 8009352:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009356:	6883      	ldr	r3, [r0, #8]
 8009358:	4718      	bx	r3
 800935a:	4b03      	ldr	r3, [pc, #12]	; (8009368 <validate+0x3c>)
 800935c:	4a05      	ldr	r2, [pc, #20]	; (8009374 <validate+0x48>)
 800935e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009360:	4903      	ldr	r1, [pc, #12]	; (8009370 <validate+0x44>)
 8009362:	2001      	movs	r0, #1
 8009364:	4798      	blx	r3
 8009366:	e7e8      	b.n	800933a <validate+0xe>
 8009368:	20000640 	.word	0x20000640
 800936c:	08013fac 	.word	0x08013fac
 8009370:	08014070 	.word	0x08014070
 8009374:	08013f7c 	.word	0x08013f7c

08009378 <acc_element_converter_init>:
 8009378:	3a02      	subs	r2, #2
 800937a:	b510      	push	{r4, lr}
 800937c:	2a05      	cmp	r2, #5
 800937e:	d804      	bhi.n	800938a <acc_element_converter_init+0x12>
 8009380:	e8df f002 	tbb	[pc, r2]
 8009384:	031d0319 	.word	0x031d0319
 8009388:	0d21      	.short	0x0d21
 800938a:	2300      	movs	r3, #0
 800938c:	6383      	str	r3, [r0, #56]	; 0x38
 800938e:	4b10      	ldr	r3, [pc, #64]	; (80093d0 <acc_element_converter_init+0x58>)
 8009390:	4a10      	ldr	r2, [pc, #64]	; (80093d4 <acc_element_converter_init+0x5c>)
 8009392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009394:	4910      	ldr	r1, [pc, #64]	; (80093d8 <acc_element_converter_init+0x60>)
 8009396:	2000      	movs	r0, #0
 8009398:	4798      	blx	r3
 800939a:	2000      	movs	r0, #0
 800939c:	bd10      	pop	{r4, pc}
 800939e:	2905      	cmp	r1, #5
 80093a0:	d1f3      	bne.n	800938a <acc_element_converter_init+0x12>
 80093a2:	4c0e      	ldr	r4, [pc, #56]	; (80093dc <acc_element_converter_init+0x64>)
 80093a4:	490e      	ldr	r1, [pc, #56]	; (80093e0 <acc_element_converter_init+0x68>)
 80093a6:	4a0f      	ldr	r2, [pc, #60]	; (80093e4 <acc_element_converter_init+0x6c>)
 80093a8:	4b0f      	ldr	r3, [pc, #60]	; (80093e8 <acc_element_converter_init+0x70>)
 80093aa:	6384      	str	r4, [r0, #56]	; 0x38
 80093ac:	e9c0 1201 	strd	r1, r2, [r0, #4]
 80093b0:	60c3      	str	r3, [r0, #12]
 80093b2:	2001      	movs	r0, #1
 80093b4:	bd10      	pop	{r4, pc}
 80093b6:	2904      	cmp	r1, #4
 80093b8:	d1e7      	bne.n	800938a <acc_element_converter_init+0x12>
 80093ba:	4c0c      	ldr	r4, [pc, #48]	; (80093ec <acc_element_converter_init+0x74>)
 80093bc:	e7f2      	b.n	80093a4 <acc_element_converter_init+0x2c>
 80093be:	2905      	cmp	r1, #5
 80093c0:	d1e3      	bne.n	800938a <acc_element_converter_init+0x12>
 80093c2:	4c0b      	ldr	r4, [pc, #44]	; (80093f0 <acc_element_converter_init+0x78>)
 80093c4:	e7ee      	b.n	80093a4 <acc_element_converter_init+0x2c>
 80093c6:	2907      	cmp	r1, #7
 80093c8:	d1df      	bne.n	800938a <acc_element_converter_init+0x12>
 80093ca:	4c0a      	ldr	r4, [pc, #40]	; (80093f4 <acc_element_converter_init+0x7c>)
 80093cc:	e7ea      	b.n	80093a4 <acc_element_converter_init+0x2c>
 80093ce:	bf00      	nop
 80093d0:	20000640 	.word	0x20000640
 80093d4:	08014084 	.word	0x08014084
 80093d8:	08014070 	.word	0x08014070
 80093dc:	080092d1 	.word	0x080092d1
 80093e0:	08009305 	.word	0x08009305
 80093e4:	0800932d 	.word	0x0800932d
 80093e8:	08009325 	.word	0x08009325
 80093ec:	08009219 	.word	0x08009219
 80093f0:	080092a1 	.word	0x080092a1
 80093f4:	08009245 	.word	0x08009245

080093f8 <event>:
 80093f8:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80093fa:	6803      	ldr	r3, [r0, #0]
 80093fc:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80093fe:	6011      	str	r1, [r2, #0]
 8009400:	4618      	mov	r0, r3
 8009402:	685a      	ldr	r2, [r3, #4]
 8009404:	4710      	bx	r2
 8009406:	bf00      	nop

08009408 <reset>:
 8009408:	6800      	ldr	r0, [r0, #0]
 800940a:	68c3      	ldr	r3, [r0, #12]
 800940c:	4718      	bx	r3
 800940e:	bf00      	nop

08009410 <validate>:
 8009410:	6983      	ldr	r3, [r0, #24]
 8009412:	b510      	push	{r4, lr}
 8009414:	4604      	mov	r4, r0
 8009416:	b113      	cbz	r3, 800941e <validate+0xe>
 8009418:	f7fd f930 	bl	800667c <acc_rss_integration_log_level>
 800941c:	b978      	cbnz	r0, 800943e <validate+0x2e>
 800941e:	69e3      	ldr	r3, [r4, #28]
 8009420:	b143      	cbz	r3, 8009434 <validate+0x24>
 8009422:	f7fd f92b 	bl	800667c <acc_rss_integration_log_level>
 8009426:	b128      	cbz	r0, 8009434 <validate+0x24>
 8009428:	4b08      	ldr	r3, [pc, #32]	; (800944c <validate+0x3c>)
 800942a:	4a09      	ldr	r2, [pc, #36]	; (8009450 <validate+0x40>)
 800942c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800942e:	4909      	ldr	r1, [pc, #36]	; (8009454 <validate+0x44>)
 8009430:	2001      	movs	r0, #1
 8009432:	4798      	blx	r3
 8009434:	6820      	ldr	r0, [r4, #0]
 8009436:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800943a:	6883      	ldr	r3, [r0, #8]
 800943c:	4718      	bx	r3
 800943e:	4b03      	ldr	r3, [pc, #12]	; (800944c <validate+0x3c>)
 8009440:	4a05      	ldr	r2, [pc, #20]	; (8009458 <validate+0x48>)
 8009442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009444:	4903      	ldr	r1, [pc, #12]	; (8009454 <validate+0x44>)
 8009446:	2001      	movs	r0, #1
 8009448:	4798      	blx	r3
 800944a:	e7e8      	b.n	800941e <validate+0xe>
 800944c:	20000640 	.word	0x20000640
 8009450:	08013fac 	.word	0x08013fac
 8009454:	080140ac 	.word	0x080140ac
 8009458:	08013f7c 	.word	0x08013f7c

0800945c <acc_element_crop_init>:
 800945c:	b538      	push	{r3, r4, r5, lr}
 800945e:	4604      	mov	r4, r0
 8009460:	4608      	mov	r0, r1
 8009462:	4615      	mov	r5, r2
 8009464:	f7ff fb46 	bl	8008af4 <acc_element_sizeof>
 8009468:	4904      	ldr	r1, [pc, #16]	; (800947c <acc_element_crop_init+0x20>)
 800946a:	4a05      	ldr	r2, [pc, #20]	; (8009480 <acc_element_crop_init+0x24>)
 800946c:	4b05      	ldr	r3, [pc, #20]	; (8009484 <acc_element_crop_init+0x28>)
 800946e:	60e3      	str	r3, [r4, #12]
 8009470:	fb05 f000 	mul.w	r0, r5, r0
 8009474:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8009478:	63a0      	str	r0, [r4, #56]	; 0x38
 800947a:	bd38      	pop	{r3, r4, r5, pc}
 800947c:	080093f9 	.word	0x080093f9
 8009480:	08009411 	.word	0x08009411
 8009484:	08009409 	.word	0x08009409

08009488 <filter_no_operation>:
 8009488:	4770      	bx	lr
 800948a:	bf00      	nop

0800948c <event>:
 800948c:	b510      	push	{r4, lr}
 800948e:	4604      	mov	r4, r0
 8009490:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009492:	4798      	blx	r3
 8009494:	6820      	ldr	r0, [r4, #0]
 8009496:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800949a:	6843      	ldr	r3, [r0, #4]
 800949c:	4718      	bx	r3
 800949e:	bf00      	nop

080094a0 <reset>:
 80094a0:	6800      	ldr	r0, [r0, #0]
 80094a2:	68c3      	ldr	r3, [r0, #12]
 80094a4:	4718      	bx	r3
 80094a6:	bf00      	nop

080094a8 <filter_q3_12_complex>:
 80094a8:	4603      	mov	r3, r0
 80094aa:	3040      	adds	r0, #64	; 0x40
 80094ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80094ae:	6919      	ldr	r1, [r3, #16]
 80094b0:	6812      	ldr	r2, [r2, #0]
 80094b2:	0892      	lsrs	r2, r2, #2
 80094b4:	f003 bc5c 	b.w	800cd70 <acc_alg_biquad_q3_12_complex_direct_form_1_filtfilt_reduced_edge_transients>

080094b8 <validate>:
 80094b8:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 80094bc:	429a      	cmp	r2, r3
 80094be:	b510      	push	{r4, lr}
 80094c0:	d007      	beq.n	80094d2 <validate+0x1a>
 80094c2:	4b12      	ldr	r3, [pc, #72]	; (800950c <validate+0x54>)
 80094c4:	4a12      	ldr	r2, [pc, #72]	; (8009510 <validate+0x58>)
 80094c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094c8:	4912      	ldr	r1, [pc, #72]	; (8009514 <validate+0x5c>)
 80094ca:	2000      	movs	r0, #0
 80094cc:	4798      	blx	r3
 80094ce:	2000      	movs	r0, #0
 80094d0:	bd10      	pop	{r4, pc}
 80094d2:	6983      	ldr	r3, [r0, #24]
 80094d4:	4604      	mov	r4, r0
 80094d6:	b113      	cbz	r3, 80094de <validate+0x26>
 80094d8:	f7fd f8d0 	bl	800667c <acc_rss_integration_log_level>
 80094dc:	b978      	cbnz	r0, 80094fe <validate+0x46>
 80094de:	69e3      	ldr	r3, [r4, #28]
 80094e0:	b143      	cbz	r3, 80094f4 <validate+0x3c>
 80094e2:	f7fd f8cb 	bl	800667c <acc_rss_integration_log_level>
 80094e6:	b128      	cbz	r0, 80094f4 <validate+0x3c>
 80094e8:	4b08      	ldr	r3, [pc, #32]	; (800950c <validate+0x54>)
 80094ea:	4a0b      	ldr	r2, [pc, #44]	; (8009518 <validate+0x60>)
 80094ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094ee:	4909      	ldr	r1, [pc, #36]	; (8009514 <validate+0x5c>)
 80094f0:	2001      	movs	r0, #1
 80094f2:	4798      	blx	r3
 80094f4:	6820      	ldr	r0, [r4, #0]
 80094f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094fa:	6883      	ldr	r3, [r0, #8]
 80094fc:	4718      	bx	r3
 80094fe:	4b03      	ldr	r3, [pc, #12]	; (800950c <validate+0x54>)
 8009500:	4a06      	ldr	r2, [pc, #24]	; (800951c <validate+0x64>)
 8009502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009504:	4903      	ldr	r1, [pc, #12]	; (8009514 <validate+0x5c>)
 8009506:	2001      	movs	r0, #1
 8009508:	4798      	blx	r3
 800950a:	e7e8      	b.n	80094de <validate+0x26>
 800950c:	20000640 	.word	0x20000640
 8009510:	080140bc 	.word	0x080140bc
 8009514:	080140e4 	.word	0x080140e4
 8009518:	08013fac 	.word	0x08013fac
 800951c:	08013f7c 	.word	0x08013f7c

08009520 <acc_element_depth_domain_low_pass_filter_init>:
 8009520:	b570      	push	{r4, r5, r6, lr}
 8009522:	4604      	mov	r4, r0
 8009524:	4823      	ldr	r0, [pc, #140]	; (80095b4 <acc_element_depth_domain_low_pass_filter_init+0x94>)
 8009526:	6060      	str	r0, [r4, #4]
 8009528:	4823      	ldr	r0, [pc, #140]	; (80095b8 <acc_element_depth_domain_low_pass_filter_init+0x98>)
 800952a:	60a0      	str	r0, [r4, #8]
 800952c:	4823      	ldr	r0, [pc, #140]	; (80095bc <acc_element_depth_domain_low_pass_filter_init+0x9c>)
 800952e:	60e0      	str	r0, [r4, #12]
 8009530:	461e      	mov	r6, r3
 8009532:	b30a      	cbz	r2, 8009578 <acc_element_depth_domain_low_pass_filter_init+0x58>
 8009534:	eddf 7a22 	vldr	s15, [pc, #136]	; 80095c0 <acc_element_depth_domain_low_pass_filter_init+0xa0>
 8009538:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800953c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009540:	d513      	bpl.n	800956a <acc_element_depth_domain_low_pass_filter_init+0x4a>
 8009542:	eeb0 0a67 	vmov.f32	s0, s15
 8009546:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
 800954a:	2907      	cmp	r1, #7
 800954c:	d124      	bne.n	8009598 <acc_element_depth_domain_low_pass_filter_init+0x78>
 800954e:	4b1d      	ldr	r3, [pc, #116]	; (80095c4 <acc_element_depth_domain_low_pass_filter_init+0xa4>)
 8009550:	63a3      	str	r3, [r4, #56]	; 0x38
 8009552:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 8009556:	2300      	movs	r3, #0
 8009558:	f104 0140 	add.w	r1, r4, #64	; 0x40
 800955c:	2001      	movs	r0, #1
 800955e:	f003 fa6d 	bl	800ca3c <acc_alg_biquad_q3_12_lowpass_coeffs>
 8009562:	4605      	mov	r5, r0
 8009564:	b188      	cbz	r0, 800958a <acc_element_depth_domain_low_pass_filter_init+0x6a>
 8009566:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8009568:	e00b      	b.n	8009582 <acc_element_depth_domain_low_pass_filter_init+0x62>
 800956a:	eddf 7a17 	vldr	s15, [pc, #92]	; 80095c8 <acc_element_depth_domain_low_pass_filter_init+0xa8>
 800956e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8009572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009576:	dd19      	ble.n	80095ac <acc_element_depth_domain_low_pass_filter_init+0x8c>
 8009578:	4b14      	ldr	r3, [pc, #80]	; (80095cc <acc_element_depth_domain_low_pass_filter_init+0xac>)
 800957a:	63a3      	str	r3, [r4, #56]	; 0x38
 800957c:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8009580:	63e2      	str	r2, [r4, #60]	; 0x3c
 8009582:	2501      	movs	r5, #1
 8009584:	61f2      	str	r2, [r6, #28]
 8009586:	4628      	mov	r0, r5
 8009588:	bd70      	pop	{r4, r5, r6, pc}
 800958a:	4b11      	ldr	r3, [pc, #68]	; (80095d0 <acc_element_depth_domain_low_pass_filter_init+0xb0>)
 800958c:	4a11      	ldr	r2, [pc, #68]	; (80095d4 <acc_element_depth_domain_low_pass_filter_init+0xb4>)
 800958e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009590:	4911      	ldr	r1, [pc, #68]	; (80095d8 <acc_element_depth_domain_low_pass_filter_init+0xb8>)
 8009592:	4798      	blx	r3
 8009594:	4628      	mov	r0, r5
 8009596:	bd70      	pop	{r4, r5, r6, pc}
 8009598:	4b0d      	ldr	r3, [pc, #52]	; (80095d0 <acc_element_depth_domain_low_pass_filter_init+0xb0>)
 800959a:	4a10      	ldr	r2, [pc, #64]	; (80095dc <acc_element_depth_domain_low_pass_filter_init+0xbc>)
 800959c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800959e:	490e      	ldr	r1, [pc, #56]	; (80095d8 <acc_element_depth_domain_low_pass_filter_init+0xb8>)
 80095a0:	2000      	movs	r0, #0
 80095a2:	63a0      	str	r0, [r4, #56]	; 0x38
 80095a4:	4605      	mov	r5, r0
 80095a6:	4798      	blx	r3
 80095a8:	4628      	mov	r0, r5
 80095aa:	bd70      	pop	{r4, r5, r6, pc}
 80095ac:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
 80095b0:	e7cb      	b.n	800954a <acc_element_depth_domain_low_pass_filter_init+0x2a>
 80095b2:	bf00      	nop
 80095b4:	0800948d 	.word	0x0800948d
 80095b8:	080094b9 	.word	0x080094b9
 80095bc:	080094a1 	.word	0x080094a1
 80095c0:	3b843809 	.word	0x3b843809
 80095c4:	080094a9 	.word	0x080094a9
 80095c8:	3efdca08 	.word	0x3efdca08
 80095cc:	08009489 	.word	0x08009489
 80095d0:	20000640 	.word	0x20000640
 80095d4:	0801410c 	.word	0x0801410c
 80095d8:	080140e4 	.word	0x080140e4
 80095dc:	08013fbc 	.word	0x08013fbc

080095e0 <event>:
 80095e0:	b510      	push	{r4, lr}
 80095e2:	4604      	mov	r4, r0
 80095e4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80095e6:	4798      	blx	r3
 80095e8:	6820      	ldr	r0, [r4, #0]
 80095ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095ee:	6843      	ldr	r3, [r0, #4]
 80095f0:	4718      	bx	r3
 80095f2:	bf00      	nop

080095f4 <reset>:
 80095f4:	6800      	ldr	r0, [r0, #0]
 80095f6:	68c3      	ldr	r3, [r0, #12]
 80095f8:	4718      	bx	r3
 80095fa:	bf00      	nop

080095fc <iq_mix_q3_12>:
 80095fc:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80095fe:	ed90 1a10 	vldr	s2, [r0, #64]	; 0x40
 8009602:	edd0 0a0f 	vldr	s1, [r0, #60]	; 0x3c
 8009606:	b538      	push	{r3, r4, r5, lr}
 8009608:	6815      	ldr	r5, [r2, #0]
 800960a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800960c:	4604      	mov	r4, r0
 800960e:	086d      	lsrs	r5, r5, #1
 8009610:	ed93 0a00 	vldr	s0, [r3]
 8009614:	462a      	mov	r2, r5
 8009616:	e9d0 0104 	ldrd	r0, r1, [r0, #16]
 800961a:	f003 fbc7 	bl	800cdac <acc_alg_iq_demodulation_q3_12_real>
 800961e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009620:	00ad      	lsls	r5, r5, #2
 8009622:	601d      	str	r5, [r3, #0]
 8009624:	bd38      	pop	{r3, r4, r5, pc}
 8009626:	bf00      	nop

08009628 <iq_mix_q3_12_complex>:
 8009628:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800962a:	ed90 1a10 	vldr	s2, [r0, #64]	; 0x40
 800962e:	edd0 0a0f 	vldr	s1, [r0, #60]	; 0x3c
 8009632:	b538      	push	{r3, r4, r5, lr}
 8009634:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8009636:	6815      	ldr	r5, [r2, #0]
 8009638:	ed93 0a00 	vldr	s0, [r3]
 800963c:	4604      	mov	r4, r0
 800963e:	08a9      	lsrs	r1, r5, #2
 8009640:	6900      	ldr	r0, [r0, #16]
 8009642:	f003 fc15 	bl	800ce70 <acc_alg_iq_demodulation_q3_12_complex>
 8009646:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009648:	f025 0503 	bic.w	r5, r5, #3
 800964c:	601d      	str	r5, [r3, #0]
 800964e:	bd38      	pop	{r3, r4, r5, pc}

08009650 <validate>:
 8009650:	4a21      	ldr	r2, [pc, #132]	; (80096d8 <validate+0x88>)
 8009652:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009654:	4293      	cmp	r3, r2
 8009656:	b510      	push	{r4, lr}
 8009658:	4604      	mov	r4, r0
 800965a:	d023      	beq.n	80096a4 <validate+0x54>
 800965c:	4a1f      	ldr	r2, [pc, #124]	; (80096dc <validate+0x8c>)
 800965e:	4293      	cmp	r3, r2
 8009660:	d007      	beq.n	8009672 <validate+0x22>
 8009662:	4b1f      	ldr	r3, [pc, #124]	; (80096e0 <validate+0x90>)
 8009664:	4a1f      	ldr	r2, [pc, #124]	; (80096e4 <validate+0x94>)
 8009666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009668:	491f      	ldr	r1, [pc, #124]	; (80096e8 <validate+0x98>)
 800966a:	2000      	movs	r0, #0
 800966c:	4798      	blx	r3
 800966e:	2000      	movs	r0, #0
 8009670:	bd10      	pop	{r4, pc}
 8009672:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 8009676:	429a      	cmp	r2, r3
 8009678:	d027      	beq.n	80096ca <validate+0x7a>
 800967a:	69a3      	ldr	r3, [r4, #24]
 800967c:	b113      	cbz	r3, 8009684 <validate+0x34>
 800967e:	f7fc fffd 	bl	800667c <acc_rss_integration_log_level>
 8009682:	b9d8      	cbnz	r0, 80096bc <validate+0x6c>
 8009684:	69e3      	ldr	r3, [r4, #28]
 8009686:	b143      	cbz	r3, 800969a <validate+0x4a>
 8009688:	f7fc fff8 	bl	800667c <acc_rss_integration_log_level>
 800968c:	b128      	cbz	r0, 800969a <validate+0x4a>
 800968e:	4b14      	ldr	r3, [pc, #80]	; (80096e0 <validate+0x90>)
 8009690:	4a16      	ldr	r2, [pc, #88]	; (80096ec <validate+0x9c>)
 8009692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009694:	4914      	ldr	r1, [pc, #80]	; (80096e8 <validate+0x98>)
 8009696:	2001      	movs	r0, #1
 8009698:	4798      	blx	r3
 800969a:	6820      	ldr	r0, [r4, #0]
 800969c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096a0:	6883      	ldr	r3, [r0, #8]
 80096a2:	4718      	bx	r3
 80096a4:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 80096a8:	429a      	cmp	r2, r3
 80096aa:	d0e6      	beq.n	800967a <validate+0x2a>
 80096ac:	4b0c      	ldr	r3, [pc, #48]	; (80096e0 <validate+0x90>)
 80096ae:	4a10      	ldr	r2, [pc, #64]	; (80096f0 <validate+0xa0>)
 80096b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096b2:	490d      	ldr	r1, [pc, #52]	; (80096e8 <validate+0x98>)
 80096b4:	2000      	movs	r0, #0
 80096b6:	4798      	blx	r3
 80096b8:	2000      	movs	r0, #0
 80096ba:	bd10      	pop	{r4, pc}
 80096bc:	4b08      	ldr	r3, [pc, #32]	; (80096e0 <validate+0x90>)
 80096be:	4a0d      	ldr	r2, [pc, #52]	; (80096f4 <validate+0xa4>)
 80096c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096c2:	4909      	ldr	r1, [pc, #36]	; (80096e8 <validate+0x98>)
 80096c4:	2001      	movs	r0, #1
 80096c6:	4798      	blx	r3
 80096c8:	e7dc      	b.n	8009684 <validate+0x34>
 80096ca:	4b05      	ldr	r3, [pc, #20]	; (80096e0 <validate+0x90>)
 80096cc:	4a0a      	ldr	r2, [pc, #40]	; (80096f8 <validate+0xa8>)
 80096ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096d0:	4905      	ldr	r1, [pc, #20]	; (80096e8 <validate+0x98>)
 80096d2:	2000      	movs	r0, #0
 80096d4:	4798      	blx	r3
 80096d6:	e7ca      	b.n	800966e <validate+0x1e>
 80096d8:	08009629 	.word	0x08009629
 80096dc:	080095fd 	.word	0x080095fd
 80096e0:	20000640 	.word	0x20000640
 80096e4:	08014184 	.word	0x08014184
 80096e8:	08014138 	.word	0x08014138
 80096ec:	08013fac 	.word	0x08013fac
 80096f0:	080140bc 	.word	0x080140bc
 80096f4:	08013f7c 	.word	0x08013f7c
 80096f8:	0801414c 	.word	0x0801414c

080096fc <acc_element_iq_mixer_init>:
 80096fc:	4b10      	ldr	r3, [pc, #64]	; (8009740 <acc_element_iq_mixer_init+0x44>)
 80096fe:	4a11      	ldr	r2, [pc, #68]	; (8009744 <acc_element_iq_mixer_init+0x48>)
 8009700:	6043      	str	r3, [r0, #4]
 8009702:	4b11      	ldr	r3, [pc, #68]	; (8009748 <acc_element_iq_mixer_init+0x4c>)
 8009704:	ed80 0a0f 	vstr	s0, [r0, #60]	; 0x3c
 8009708:	2904      	cmp	r1, #4
 800970a:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800970e:	edc0 0a10 	vstr	s1, [r0, #64]	; 0x40
 8009712:	d00c      	beq.n	800972e <acc_element_iq_mixer_init+0x32>
 8009714:	2907      	cmp	r1, #7
 8009716:	d00e      	beq.n	8009736 <acc_element_iq_mixer_init+0x3a>
 8009718:	b510      	push	{r4, lr}
 800971a:	4b0c      	ldr	r3, [pc, #48]	; (800974c <acc_element_iq_mixer_init+0x50>)
 800971c:	4a0c      	ldr	r2, [pc, #48]	; (8009750 <acc_element_iq_mixer_init+0x54>)
 800971e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009720:	490c      	ldr	r1, [pc, #48]	; (8009754 <acc_element_iq_mixer_init+0x58>)
 8009722:	2400      	movs	r4, #0
 8009724:	6384      	str	r4, [r0, #56]	; 0x38
 8009726:	4620      	mov	r0, r4
 8009728:	4798      	blx	r3
 800972a:	4620      	mov	r0, r4
 800972c:	bd10      	pop	{r4, pc}
 800972e:	4b0a      	ldr	r3, [pc, #40]	; (8009758 <acc_element_iq_mixer_init+0x5c>)
 8009730:	6383      	str	r3, [r0, #56]	; 0x38
 8009732:	2001      	movs	r0, #1
 8009734:	4770      	bx	lr
 8009736:	4b09      	ldr	r3, [pc, #36]	; (800975c <acc_element_iq_mixer_init+0x60>)
 8009738:	6383      	str	r3, [r0, #56]	; 0x38
 800973a:	2001      	movs	r0, #1
 800973c:	4770      	bx	lr
 800973e:	bf00      	nop
 8009740:	080095e1 	.word	0x080095e1
 8009744:	08009651 	.word	0x08009651
 8009748:	080095f5 	.word	0x080095f5
 800974c:	20000640 	.word	0x20000640
 8009750:	08013fbc 	.word	0x08013fbc
 8009754:	08014138 	.word	0x08014138
 8009758:	080095fd 	.word	0x080095fd
 800975c:	08009629 	.word	0x08009629

08009760 <noise_level_normalization_u16>:
 8009760:	0849      	lsrs	r1, r1, #1
 8009762:	d01e      	beq.n	80097a2 <noise_level_normalization_u16+0x42>
 8009764:	b470      	push	{r4, r5, r6}
 8009766:	eb00 0441 	add.w	r4, r0, r1, lsl #1
 800976a:	f64f 75ff 	movw	r5, #65535	; 0xffff
 800976e:	2600      	movs	r6, #0
 8009770:	b92a      	cbnz	r2, 800977e <noise_level_normalization_u16+0x1e>
 8009772:	8005      	strh	r5, [r0, #0]
 8009774:	3002      	adds	r0, #2
 8009776:	42a0      	cmp	r0, r4
 8009778:	d1fa      	bne.n	8009770 <noise_level_normalization_u16+0x10>
 800977a:	bc70      	pop	{r4, r5, r6}
 800977c:	4770      	bx	lr
 800977e:	8801      	ldrh	r1, [r0, #0]
 8009780:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
 8009784:	fb03 f101 	mul.w	r1, r3, r1
 8009788:	fb91 f1f2 	sdiv	r1, r1, r2
 800978c:	f511 4100 	adds.w	r1, r1, #32768	; 0x8000
 8009790:	d405      	bmi.n	800979e <noise_level_normalization_u16+0x3e>
 8009792:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8009796:	bfa8      	it	ge
 8009798:	4629      	movge	r1, r5
 800979a:	8001      	strh	r1, [r0, #0]
 800979c:	e7ea      	b.n	8009774 <noise_level_normalization_u16+0x14>
 800979e:	8006      	strh	r6, [r0, #0]
 80097a0:	e7e8      	b.n	8009774 <noise_level_normalization_u16+0x14>
 80097a2:	4770      	bx	lr

080097a4 <event>:
 80097a4:	b570      	push	{r4, r5, r6, lr}
 80097a6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80097a8:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 80097aa:	6819      	ldr	r1, [r3, #0]
 80097ac:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 80097ae:	8f43      	ldrh	r3, [r0, #58]	; 0x3a
 80097b0:	4604      	mov	r4, r0
 80097b2:	6900      	ldr	r0, [r0, #16]
 80097b4:	47a8      	blx	r5
 80097b6:	6820      	ldr	r0, [r4, #0]
 80097b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80097bc:	6843      	ldr	r3, [r0, #4]
 80097be:	4718      	bx	r3

080097c0 <reset>:
 80097c0:	6800      	ldr	r0, [r0, #0]
 80097c2:	68c3      	ldr	r3, [r0, #12]
 80097c4:	4718      	bx	r3
 80097c6:	bf00      	nop

080097c8 <validate>:
 80097c8:	6983      	ldr	r3, [r0, #24]
 80097ca:	b510      	push	{r4, lr}
 80097cc:	4604      	mov	r4, r0
 80097ce:	b113      	cbz	r3, 80097d6 <validate+0xe>
 80097d0:	f7fc ff54 	bl	800667c <acc_rss_integration_log_level>
 80097d4:	b978      	cbnz	r0, 80097f6 <validate+0x2e>
 80097d6:	69e3      	ldr	r3, [r4, #28]
 80097d8:	b143      	cbz	r3, 80097ec <validate+0x24>
 80097da:	f7fc ff4f 	bl	800667c <acc_rss_integration_log_level>
 80097de:	b128      	cbz	r0, 80097ec <validate+0x24>
 80097e0:	4b08      	ldr	r3, [pc, #32]	; (8009804 <validate+0x3c>)
 80097e2:	4a09      	ldr	r2, [pc, #36]	; (8009808 <validate+0x40>)
 80097e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097e6:	4909      	ldr	r1, [pc, #36]	; (800980c <validate+0x44>)
 80097e8:	2001      	movs	r0, #1
 80097ea:	4798      	blx	r3
 80097ec:	6820      	ldr	r0, [r4, #0]
 80097ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097f2:	6883      	ldr	r3, [r0, #8]
 80097f4:	4718      	bx	r3
 80097f6:	4b03      	ldr	r3, [pc, #12]	; (8009804 <validate+0x3c>)
 80097f8:	4a05      	ldr	r2, [pc, #20]	; (8009810 <validate+0x48>)
 80097fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097fc:	4903      	ldr	r1, [pc, #12]	; (800980c <validate+0x44>)
 80097fe:	2001      	movs	r0, #1
 8009800:	4798      	blx	r3
 8009802:	e7e8      	b.n	80097d6 <validate+0xe>
 8009804:	20000640 	.word	0x20000640
 8009808:	08013fac 	.word	0x08013fac
 800980c:	0801419c 	.word	0x0801419c
 8009810:	08013f7c 	.word	0x08013f7c

08009814 <acc_element_noise_level_normalization_init>:
 8009814:	2902      	cmp	r1, #2
 8009816:	b510      	push	{r4, lr}
 8009818:	8702      	strh	r2, [r0, #56]	; 0x38
 800981a:	8743      	strh	r3, [r0, #58]	; 0x3a
 800981c:	d001      	beq.n	8009822 <acc_element_noise_level_normalization_init+0xe>
 800981e:	2905      	cmp	r1, #5
 8009820:	d109      	bne.n	8009836 <acc_element_noise_level_normalization_init+0x22>
 8009822:	490a      	ldr	r1, [pc, #40]	; (800984c <acc_element_noise_level_normalization_init+0x38>)
 8009824:	4a0a      	ldr	r2, [pc, #40]	; (8009850 <acc_element_noise_level_normalization_init+0x3c>)
 8009826:	4c0b      	ldr	r4, [pc, #44]	; (8009854 <acc_element_noise_level_normalization_init+0x40>)
 8009828:	4b0b      	ldr	r3, [pc, #44]	; (8009858 <acc_element_noise_level_normalization_init+0x44>)
 800982a:	63c4      	str	r4, [r0, #60]	; 0x3c
 800982c:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8009830:	60c3      	str	r3, [r0, #12]
 8009832:	2001      	movs	r0, #1
 8009834:	bd10      	pop	{r4, pc}
 8009836:	4b09      	ldr	r3, [pc, #36]	; (800985c <acc_element_noise_level_normalization_init+0x48>)
 8009838:	4a09      	ldr	r2, [pc, #36]	; (8009860 <acc_element_noise_level_normalization_init+0x4c>)
 800983a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800983c:	4909      	ldr	r1, [pc, #36]	; (8009864 <acc_element_noise_level_normalization_init+0x50>)
 800983e:	2400      	movs	r4, #0
 8009840:	63c4      	str	r4, [r0, #60]	; 0x3c
 8009842:	4620      	mov	r0, r4
 8009844:	4798      	blx	r3
 8009846:	4620      	mov	r0, r4
 8009848:	bd10      	pop	{r4, pc}
 800984a:	bf00      	nop
 800984c:	080097a5 	.word	0x080097a5
 8009850:	080097c9 	.word	0x080097c9
 8009854:	08009761 	.word	0x08009761
 8009858:	080097c1 	.word	0x080097c1
 800985c:	20000640 	.word	0x20000640
 8009860:	08013fbc 	.word	0x08013fbc
 8009864:	0801419c 	.word	0x0801419c

08009868 <event>:
 8009868:	b510      	push	{r4, lr}
 800986a:	4604      	mov	r4, r0
 800986c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800986e:	4798      	blx	r3
 8009870:	6820      	ldr	r0, [r4, #0]
 8009872:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009876:	6843      	ldr	r3, [r0, #4]
 8009878:	4718      	bx	r3
 800987a:	bf00      	nop

0800987c <reset>:
 800987c:	6800      	ldr	r0, [r0, #0]
 800987e:	68c3      	ldr	r3, [r0, #12]
 8009880:	4718      	bx	r3
 8009882:	bf00      	nop

08009884 <do_phase_compensation_q3_12>:
 8009884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009888:	2a7c      	cmp	r2, #124	; 0x7c
 800988a:	b0fd      	sub	sp, #500	; 0x1f4
 800988c:	d82a      	bhi.n	80098e4 <do_phase_compensation_q3_12+0x60>
 800988e:	4689      	mov	r9, r1
 8009890:	b329      	cbz	r1, 80098de <do_phase_compensation_q3_12+0x5a>
 8009892:	469a      	mov	sl, r3
 8009894:	ab7c      	add	r3, sp, #496	; 0x1f0
 8009896:	2600      	movs	r6, #0
 8009898:	eb03 0b82 	add.w	fp, r3, r2, lsl #2
 800989c:	4615      	mov	r5, r2
 800989e:	4604      	mov	r4, r0
 80098a0:	46b0      	mov	r8, r6
 80098a2:	f5ab 7bfa 	sub.w	fp, fp, #500	; 0x1f4
 80098a6:	0097      	lsls	r7, r2, #2
 80098a8:	4621      	mov	r1, r4
 80098aa:	463a      	mov	r2, r7
 80098ac:	4668      	mov	r0, sp
 80098ae:	f005 f8b5 	bl	800ea1c <memcpy>
 80098b2:	462a      	mov	r2, r5
 80098b4:	4651      	mov	r1, sl
 80098b6:	4668      	mov	r0, sp
 80098b8:	f8cd 8000 	str.w	r8, [sp]
 80098bc:	f8cb 8000 	str.w	r8, [fp]
 80098c0:	f003 fb48 	bl	800cf54 <acc_alg_phase_estimation_q3_12>
 80098c4:	4629      	mov	r1, r5
 80098c6:	4668      	mov	r0, sp
 80098c8:	f003 ff4c 	bl	800d764 <acc_alg_basic_math_q3_12_complex_conj_normalize>
 80098cc:	3601      	adds	r6, #1
 80098ce:	4620      	mov	r0, r4
 80098d0:	462a      	mov	r2, r5
 80098d2:	4669      	mov	r1, sp
 80098d4:	f003 feee 	bl	800d6b4 <acc_alg_basic_math_q3_12_complex_mul>
 80098d8:	45b1      	cmp	r9, r6
 80098da:	443c      	add	r4, r7
 80098dc:	d1e4      	bne.n	80098a8 <do_phase_compensation_q3_12+0x24>
 80098de:	b07d      	add	sp, #500	; 0x1f4
 80098e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098e4:	4801      	ldr	r0, [pc, #4]	; (80098ec <do_phase_compensation_q3_12+0x68>)
 80098e6:	217d      	movs	r1, #125	; 0x7d
 80098e8:	f7ff f8ec 	bl	8008ac4 <acc_assert_fail>
 80098ec:	080141c0 	.word	0x080141c0

080098f0 <phase_compensate_q3_12_complex>:
 80098f0:	e9d0 120f 	ldrd	r1, r2, [r0, #60]	; 0x3c
 80098f4:	f9b0 3044 	ldrsh.w	r3, [r0, #68]	; 0x44
 80098f8:	6900      	ldr	r0, [r0, #16]
 80098fa:	f7ff bfc3 	b.w	8009884 <do_phase_compensation_q3_12>
 80098fe:	bf00      	nop

08009900 <validate>:
 8009900:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 8009904:	429a      	cmp	r2, r3
 8009906:	b510      	push	{r4, lr}
 8009908:	d007      	beq.n	800991a <validate+0x1a>
 800990a:	4b12      	ldr	r3, [pc, #72]	; (8009954 <validate+0x54>)
 800990c:	4a12      	ldr	r2, [pc, #72]	; (8009958 <validate+0x58>)
 800990e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009910:	4912      	ldr	r1, [pc, #72]	; (800995c <validate+0x5c>)
 8009912:	2000      	movs	r0, #0
 8009914:	4798      	blx	r3
 8009916:	2000      	movs	r0, #0
 8009918:	bd10      	pop	{r4, pc}
 800991a:	6983      	ldr	r3, [r0, #24]
 800991c:	4604      	mov	r4, r0
 800991e:	b113      	cbz	r3, 8009926 <validate+0x26>
 8009920:	f7fc feac 	bl	800667c <acc_rss_integration_log_level>
 8009924:	b978      	cbnz	r0, 8009946 <validate+0x46>
 8009926:	69e3      	ldr	r3, [r4, #28]
 8009928:	b143      	cbz	r3, 800993c <validate+0x3c>
 800992a:	f7fc fea7 	bl	800667c <acc_rss_integration_log_level>
 800992e:	b128      	cbz	r0, 800993c <validate+0x3c>
 8009930:	4b08      	ldr	r3, [pc, #32]	; (8009954 <validate+0x54>)
 8009932:	4a0b      	ldr	r2, [pc, #44]	; (8009960 <validate+0x60>)
 8009934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009936:	4909      	ldr	r1, [pc, #36]	; (800995c <validate+0x5c>)
 8009938:	2001      	movs	r0, #1
 800993a:	4798      	blx	r3
 800993c:	6820      	ldr	r0, [r4, #0]
 800993e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009942:	6883      	ldr	r3, [r0, #8]
 8009944:	4718      	bx	r3
 8009946:	4b03      	ldr	r3, [pc, #12]	; (8009954 <validate+0x54>)
 8009948:	4a06      	ldr	r2, [pc, #24]	; (8009964 <validate+0x64>)
 800994a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800994c:	4903      	ldr	r1, [pc, #12]	; (800995c <validate+0x5c>)
 800994e:	2001      	movs	r0, #1
 8009950:	4798      	blx	r3
 8009952:	e7e8      	b.n	8009926 <validate+0x26>
 8009954:	20000640 	.word	0x20000640
 8009958:	080140bc 	.word	0x080140bc
 800995c:	080141c0 	.word	0x080141c0
 8009960:	08013fac 	.word	0x08013fac
 8009964:	08013f7c 	.word	0x08013f7c

08009968 <acc_element_phase_compensation_init>:
 8009968:	eddf 6a17 	vldr	s13, [pc, #92]	; 80099c8 <acc_element_phase_compensation_init+0x60>
 800996c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009974:	ee20 0a26 	vmul.f32	s0, s0, s13
 8009978:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800997c:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8009980:	bfb8      	it	lt
 8009982:	eef0 7a47 	vmovlt.f32	s15, s14
 8009986:	ee30 0a27 	vadd.f32	s0, s0, s15
 800998a:	b538      	push	{r3, r4, r5, lr}
 800998c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8009990:	6403      	str	r3, [r0, #64]	; 0x40
 8009992:	4b0e      	ldr	r3, [pc, #56]	; (80099cc <acc_element_phase_compensation_init+0x64>)
 8009994:	4d0e      	ldr	r5, [pc, #56]	; (80099d0 <acc_element_phase_compensation_init+0x68>)
 8009996:	4c0f      	ldr	r4, [pc, #60]	; (80099d4 <acc_element_phase_compensation_init+0x6c>)
 8009998:	60c3      	str	r3, [r0, #12]
 800999a:	ee10 3a10 	vmov	r3, s0
 800999e:	2907      	cmp	r1, #7
 80099a0:	e9c0 5401 	strd	r5, r4, [r0, #4]
 80099a4:	63c2      	str	r2, [r0, #60]	; 0x3c
 80099a6:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 80099aa:	d103      	bne.n	80099b4 <acc_element_phase_compensation_init+0x4c>
 80099ac:	4b0a      	ldr	r3, [pc, #40]	; (80099d8 <acc_element_phase_compensation_init+0x70>)
 80099ae:	6383      	str	r3, [r0, #56]	; 0x38
 80099b0:	2001      	movs	r0, #1
 80099b2:	bd38      	pop	{r3, r4, r5, pc}
 80099b4:	4b09      	ldr	r3, [pc, #36]	; (80099dc <acc_element_phase_compensation_init+0x74>)
 80099b6:	4a0a      	ldr	r2, [pc, #40]	; (80099e0 <acc_element_phase_compensation_init+0x78>)
 80099b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099ba:	490a      	ldr	r1, [pc, #40]	; (80099e4 <acc_element_phase_compensation_init+0x7c>)
 80099bc:	2400      	movs	r4, #0
 80099be:	6384      	str	r4, [r0, #56]	; 0x38
 80099c0:	4620      	mov	r0, r4
 80099c2:	4798      	blx	r3
 80099c4:	4620      	mov	r0, r4
 80099c6:	bd38      	pop	{r3, r4, r5, pc}
 80099c8:	45800000 	.word	0x45800000
 80099cc:	0800987d 	.word	0x0800987d
 80099d0:	08009869 	.word	0x08009869
 80099d4:	08009901 	.word	0x08009901
 80099d8:	080098f1 	.word	0x080098f1
 80099dc:	20000640 	.word	0x20000640
 80099e0:	08013fbc 	.word	0x08013fbc
 80099e4:	080141c0 	.word	0x080141c0

080099e8 <reset>:
 80099e8:	69c3      	ldr	r3, [r0, #28]
 80099ea:	6800      	ldr	r0, [r0, #0]
 80099ec:	2201      	movs	r2, #1
 80099ee:	701a      	strb	r2, [r3, #0]
 80099f0:	68c3      	ldr	r3, [r0, #12]
 80099f2:	4718      	bx	r3

080099f4 <event>:
 80099f4:	b570      	push	{r4, r5, r6, lr}
 80099f6:	69c5      	ldr	r5, [r0, #28]
 80099f8:	462b      	mov	r3, r5
 80099fa:	4604      	mov	r4, r0
 80099fc:	f813 2b04 	ldrb.w	r2, [r3], #4
 8009a00:	b962      	cbnz	r2, 8009a1c <event+0x28>
 8009a02:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8009a04:	6b85      	ldr	r5, [r0, #56]	; 0x38
 8009a06:	ed90 0a0f 	vldr	s0, [r0, #60]	; 0x3c
 8009a0a:	6812      	ldr	r2, [r2, #0]
 8009a0c:	6900      	ldr	r0, [r0, #16]
 8009a0e:	4619      	mov	r1, r3
 8009a10:	47a8      	blx	r5
 8009a12:	6820      	ldr	r0, [r4, #0]
 8009a14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009a18:	6843      	ldr	r3, [r0, #4]
 8009a1a:	4718      	bx	r3
 8009a1c:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8009a1e:	6901      	ldr	r1, [r0, #16]
 8009a20:	6812      	ldr	r2, [r2, #0]
 8009a22:	4618      	mov	r0, r3
 8009a24:	f004 fffa 	bl	800ea1c <memcpy>
 8009a28:	6820      	ldr	r0, [r4, #0]
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	702b      	strb	r3, [r5, #0]
 8009a2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009a32:	6843      	ldr	r3, [r0, #4]
 8009a34:	4718      	bx	r3
 8009a36:	bf00      	nop

08009a38 <filter_q3_12_complex>:
 8009a38:	b530      	push	{r4, r5, lr}
 8009a3a:	ed2d 8b02 	vpush	{d8}
 8009a3e:	b083      	sub	sp, #12
 8009a40:	4604      	mov	r4, r0
 8009a42:	2007      	movs	r0, #7
 8009a44:	eeb0 8a40 	vmov.f32	s16, s0
 8009a48:	4615      	mov	r5, r2
 8009a4a:	9101      	str	r1, [sp, #4]
 8009a4c:	f7ff f852 	bl	8008af4 <acc_element_sizeof>
 8009a50:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8009a94 <filter_q3_12_complex+0x5c>
 8009a54:	9901      	ldr	r1, [sp, #4]
 8009a56:	fbb5 f3f0 	udiv	r3, r5, r0
 8009a5a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8009a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a62:	ee28 8a07 	vmul.f32	s16, s16, s14
 8009a66:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8009a6a:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8009a6e:	bfb8      	it	lt
 8009a70:	eeb0 0a67 	vmovlt.f32	s0, s15
 8009a74:	ee38 8a00 	vadd.f32	s16, s16, s0
 8009a78:	4620      	mov	r0, r4
 8009a7a:	eebd 8ac8 	vcvt.s32.f32	s16, s16
 8009a7e:	ee18 2a10 	vmov	r2, s16
 8009a82:	b212      	sxth	r2, r2
 8009a84:	b003      	add	sp, #12
 8009a86:	ecbd 8b02 	vpop	{d8}
 8009a8a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009a8e:	f002 bfab 	b.w	800c9e8 <acc_alg_basic_exponential_smoothing_q3_12_complex>
 8009a92:	bf00      	nop
 8009a94:	45800000 	.word	0x45800000

08009a98 <validate>:
 8009a98:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 8009a9c:	429a      	cmp	r2, r3
 8009a9e:	b510      	push	{r4, lr}
 8009aa0:	d015      	beq.n	8009ace <validate+0x36>
 8009aa2:	6984      	ldr	r4, [r0, #24]
 8009aa4:	b13c      	cbz	r4, 8009ab6 <validate+0x1e>
 8009aa6:	4b10      	ldr	r3, [pc, #64]	; (8009ae8 <validate+0x50>)
 8009aa8:	4a10      	ldr	r2, [pc, #64]	; (8009aec <validate+0x54>)
 8009aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009aac:	4910      	ldr	r1, [pc, #64]	; (8009af0 <validate+0x58>)
 8009aae:	2000      	movs	r0, #0
 8009ab0:	4798      	blx	r3
 8009ab2:	2000      	movs	r0, #0
 8009ab4:	bd10      	pop	{r4, pc}
 8009ab6:	69c2      	ldr	r2, [r0, #28]
 8009ab8:	3204      	adds	r2, #4
 8009aba:	4293      	cmp	r3, r2
 8009abc:	d00f      	beq.n	8009ade <validate+0x46>
 8009abe:	4b0a      	ldr	r3, [pc, #40]	; (8009ae8 <validate+0x50>)
 8009ac0:	4a0c      	ldr	r2, [pc, #48]	; (8009af4 <validate+0x5c>)
 8009ac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ac4:	490a      	ldr	r1, [pc, #40]	; (8009af0 <validate+0x58>)
 8009ac6:	4620      	mov	r0, r4
 8009ac8:	4798      	blx	r3
 8009aca:	2000      	movs	r0, #0
 8009acc:	bd10      	pop	{r4, pc}
 8009ace:	4b06      	ldr	r3, [pc, #24]	; (8009ae8 <validate+0x50>)
 8009ad0:	4a09      	ldr	r2, [pc, #36]	; (8009af8 <validate+0x60>)
 8009ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ad4:	4906      	ldr	r1, [pc, #24]	; (8009af0 <validate+0x58>)
 8009ad6:	2000      	movs	r0, #0
 8009ad8:	4798      	blx	r3
 8009ada:	2000      	movs	r0, #0
 8009adc:	bd10      	pop	{r4, pc}
 8009ade:	6800      	ldr	r0, [r0, #0]
 8009ae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ae4:	6883      	ldr	r3, [r0, #8]
 8009ae6:	4718      	bx	r3
 8009ae8:	20000640 	.word	0x20000640
 8009aec:	0801422c 	.word	0x0801422c
 8009af0:	08014208 	.word	0x08014208
 8009af4:	0801424c 	.word	0x0801424c
 8009af8:	080141dc 	.word	0x080141dc

08009afc <acc_element_time_domain_low_pass_filter_init>:
 8009afc:	b510      	push	{r4, lr}
 8009afe:	4a0c      	ldr	r2, [pc, #48]	; (8009b30 <acc_element_time_domain_low_pass_filter_init+0x34>)
 8009b00:	4c0c      	ldr	r4, [pc, #48]	; (8009b34 <acc_element_time_domain_low_pass_filter_init+0x38>)
 8009b02:	4b0d      	ldr	r3, [pc, #52]	; (8009b38 <acc_element_time_domain_low_pass_filter_init+0x3c>)
 8009b04:	60c3      	str	r3, [r0, #12]
 8009b06:	2907      	cmp	r1, #7
 8009b08:	e9c0 4201 	strd	r4, r2, [r0, #4]
 8009b0c:	ed80 0a0f 	vstr	s0, [r0, #60]	; 0x3c
 8009b10:	d103      	bne.n	8009b1a <acc_element_time_domain_low_pass_filter_init+0x1e>
 8009b12:	4b0a      	ldr	r3, [pc, #40]	; (8009b3c <acc_element_time_domain_low_pass_filter_init+0x40>)
 8009b14:	6383      	str	r3, [r0, #56]	; 0x38
 8009b16:	2001      	movs	r0, #1
 8009b18:	bd10      	pop	{r4, pc}
 8009b1a:	4b09      	ldr	r3, [pc, #36]	; (8009b40 <acc_element_time_domain_low_pass_filter_init+0x44>)
 8009b1c:	4a09      	ldr	r2, [pc, #36]	; (8009b44 <acc_element_time_domain_low_pass_filter_init+0x48>)
 8009b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b20:	4909      	ldr	r1, [pc, #36]	; (8009b48 <acc_element_time_domain_low_pass_filter_init+0x4c>)
 8009b22:	2400      	movs	r4, #0
 8009b24:	6384      	str	r4, [r0, #56]	; 0x38
 8009b26:	4620      	mov	r0, r4
 8009b28:	4798      	blx	r3
 8009b2a:	4620      	mov	r0, r4
 8009b2c:	bd10      	pop	{r4, pc}
 8009b2e:	bf00      	nop
 8009b30:	08009a99 	.word	0x08009a99
 8009b34:	080099f5 	.word	0x080099f5
 8009b38:	080099e9 	.word	0x080099e9
 8009b3c:	08009a39 	.word	0x08009a39
 8009b40:	20000640 	.word	0x20000640
 8009b44:	08013fbc 	.word	0x08013fbc
 8009b48:	08014208 	.word	0x08014208

08009b4c <acc_element_source_adc_init_radar_engine>:
 8009b4c:	b538      	push	{r3, r4, r5, lr}
 8009b4e:	9d04      	ldr	r5, [sp, #16]
 8009b50:	4604      	mov	r4, r0
 8009b52:	4608      	mov	r0, r1
 8009b54:	63e1      	str	r1, [r4, #60]	; 0x3c
 8009b56:	4611      	mov	r1, r2
 8009b58:	461a      	mov	r2, r3
 8009b5a:	462b      	mov	r3, r5
 8009b5c:	f7fe fa56 	bl	800800c <acc_sensor_manager_prepare_radar_engine>
 8009b60:	896b      	ldrh	r3, [r5, #10]
 8009b62:	8723      	strh	r3, [r4, #56]	; 0x38
 8009b64:	bd38      	pop	{r3, r4, r5, pc}
 8009b66:	bf00      	nop

08009b68 <acc_element_source_adc_init>:
 8009b68:	b510      	push	{r4, lr}
 8009b6a:	b084      	sub	sp, #16
 8009b6c:	4604      	mov	r4, r0
 8009b6e:	4608      	mov	r0, r1
 8009b70:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8009b74:	9101      	str	r1, [sp, #4]
 8009b76:	f7fc fbbd 	bl	80062f4 <acc_base_configuration_print>
 8009b7a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009b7e:	9901      	ldr	r1, [sp, #4]
 8009b80:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8009b82:	b004      	add	sp, #16
 8009b84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b88:	f7fe ba8c 	b.w	80080a4 <acc_sensor_manager_prepare_measurement>

08009b8c <acc_element_source_adc_release>:
 8009b8c:	b110      	cbz	r0, 8009b94 <acc_element_source_adc_release+0x8>
 8009b8e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8009b90:	f7fe bb4e 	b.w	8008230 <acc_sensor_manager_release_measurement>
 8009b94:	4770      	bx	lr
 8009b96:	bf00      	nop

08009b98 <acc_element_source_adc_reset>:
 8009b98:	6800      	ldr	r0, [r0, #0]
 8009b9a:	68c3      	ldr	r3, [r0, #12]
 8009b9c:	4718      	bx	r3
 8009b9e:	bf00      	nop

08009ba0 <acc_element_source_adc_validate>:
 8009ba0:	6800      	ldr	r0, [r0, #0]
 8009ba2:	6883      	ldr	r3, [r0, #8]
 8009ba4:	4718      	bx	r3
 8009ba6:	bf00      	nop

08009ba8 <acc_element_source_adc_produce>:
 8009ba8:	b530      	push	{r4, r5, lr}
 8009baa:	4604      	mov	r4, r0
 8009bac:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8009bae:	b083      	sub	sp, #12
 8009bb0:	2800      	cmp	r0, #0
 8009bb2:	d02f      	beq.n	8009c14 <acc_element_source_adc_produce+0x6c>
 8009bb4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009bb6:	4a19      	ldr	r2, [pc, #100]	; (8009c1c <acc_element_source_adc_produce+0x74>)
 8009bb8:	6a25      	ldr	r5, [r4, #32]
 8009bba:	601a      	str	r2, [r3, #0]
 8009bbc:	f7fe fb4c 	bl	8008258 <acc_sensor_manager_get_sensor_id>
 8009bc0:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 8009bc2:	6028      	str	r0, [r5, #0]
 8009bc4:	6961      	ldr	r1, [r4, #20]
 8009bc6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8009bc8:	ab01      	add	r3, sp, #4
 8009bca:	f7fe f991 	bl	8007ef0 <acc_sensor_manager_acquire_adc_data>
 8009bce:	4605      	mov	r5, r0
 8009bd0:	b1c0      	cbz	r0, 8009c04 <acc_element_source_adc_produce+0x5c>
 8009bd2:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 8009bd6:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8009bd8:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8009bdc:	005b      	lsls	r3, r3, #1
 8009bde:	6003      	str	r3, [r0, #0]
 8009be0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009be2:	7011      	strb	r1, [r2, #0]
 8009be4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009be8:	701a      	strb	r2, [r3, #0]
 8009bea:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009bee:	b90b      	cbnz	r3, 8009bf4 <acc_element_source_adc_produce+0x4c>
 8009bf0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009bf4:	6820      	ldr	r0, [r4, #0]
 8009bf6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8009bf8:	7013      	strb	r3, [r2, #0]
 8009bfa:	6843      	ldr	r3, [r0, #4]
 8009bfc:	4798      	blx	r3
 8009bfe:	4628      	mov	r0, r5
 8009c00:	b003      	add	sp, #12
 8009c02:	bd30      	pop	{r4, r5, pc}
 8009c04:	4b06      	ldr	r3, [pc, #24]	; (8009c20 <acc_element_source_adc_produce+0x78>)
 8009c06:	4a07      	ldr	r2, [pc, #28]	; (8009c24 <acc_element_source_adc_produce+0x7c>)
 8009c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c0a:	4907      	ldr	r1, [pc, #28]	; (8009c28 <acc_element_source_adc_produce+0x80>)
 8009c0c:	4798      	blx	r3
 8009c0e:	4628      	mov	r0, r5
 8009c10:	b003      	add	sp, #12
 8009c12:	bd30      	pop	{r4, r5, pc}
 8009c14:	4605      	mov	r5, r0
 8009c16:	4628      	mov	r0, r5
 8009c18:	b003      	add	sp, #12
 8009c1a:	bd30      	pop	{r4, r5, pc}
 8009c1c:	51645c3c 	.word	0x51645c3c
 8009c20:	20000640 	.word	0x20000640
 8009c24:	08014274 	.word	0x08014274
 8009c28:	08014294 	.word	0x08014294

08009c2c <acc_element_source_adc_inject_data>:
 8009c2c:	b570      	push	{r4, r5, r6, lr}
 8009c2e:	4604      	mov	r4, r0
 8009c30:	6940      	ldr	r0, [r0, #20]
 8009c32:	4e08      	ldr	r6, [pc, #32]	; (8009c54 <acc_element_source_adc_inject_data+0x28>)
 8009c34:	4615      	mov	r5, r2
 8009c36:	f004 fef1 	bl	800ea1c <memcpy>
 8009c3a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009c3c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009c3e:	6820      	ldr	r0, [r4, #0]
 8009c40:	6a22      	ldr	r2, [r4, #32]
 8009c42:	600d      	str	r5, [r1, #0]
 8009c44:	2100      	movs	r1, #0
 8009c46:	601e      	str	r6, [r3, #0]
 8009c48:	6843      	ldr	r3, [r0, #4]
 8009c4a:	6011      	str	r1, [r2, #0]
 8009c4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009c50:	4718      	bx	r3
 8009c52:	bf00      	nop
 8009c54:	51645c3c 	.word	0x51645c3c

08009c58 <acc_cpd_cbank_and_vana_calibration>:
 8009c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c5c:	ed2d 8b02 	vpush	{d8}
 8009c60:	4614      	mov	r4, r2
 8009c62:	b08b      	sub	sp, #44	; 0x2c
 8009c64:	461e      	mov	r6, r3
 8009c66:	ab09      	add	r3, sp, #36	; 0x24
 8009c68:	4680      	mov	r8, r0
 8009c6a:	4689      	mov	r9, r1
 8009c6c:	460a      	mov	r2, r1
 8009c6e:	2500      	movs	r5, #0
 8009c70:	4601      	mov	r1, r0
 8009c72:	6820      	ldr	r0, [r4, #0]
 8009c74:	9300      	str	r3, [sp, #0]
 8009c76:	ab08      	add	r3, sp, #32
 8009c78:	e9cd 5508 	strd	r5, r5, [sp, #32]
 8009c7c:	9606      	str	r6, [sp, #24]
 8009c7e:	f7fe faed 	bl	800825c <acc_sensor_protocol_r2_prepare_load>
 8009c82:	2800      	cmp	r0, #0
 8009c84:	f000 808b 	beq.w	8009d9e <acc_cpd_cbank_and_vana_calibration+0x146>
 8009c88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c8a:	461e      	mov	r6, r3
 8009c8c:	f5c5 734b 	rsb	r3, r5, #812	; 0x32c
 8009c90:	429e      	cmp	r6, r3
 8009c92:	bf28      	it	cs
 8009c94:	461e      	movcs	r6, r3
 8009c96:	9f08      	ldr	r7, [sp, #32]
 8009c98:	f003 fc22 	bl	800d4e0 <acc_image_a111_r2c_cbank_and_vana_calibration_get>
 8009c9c:	ea4f 0a55 	mov.w	sl, r5, lsr #1
 8009ca0:	0872      	lsrs	r2, r6, #1
 8009ca2:	4639      	mov	r1, r7
 8009ca4:	eb00 008a 	add.w	r0, r0, sl, lsl #2
 8009ca8:	f003 fbcc 	bl	800d444 <acc_confprogram_copy>
 8009cac:	b2b2      	uxth	r2, r6
 8009cae:	9204      	str	r2, [sp, #16]
 8009cb0:	f003 fc1a 	bl	800d4e8 <acc_image_a111_r2c_cbank_and_vana_calibration_param_table_get>
 8009cb4:	6862      	ldr	r2, [r4, #4]
 8009cb6:	9201      	str	r2, [sp, #4]
 8009cb8:	2218      	movs	r2, #24
 8009cba:	b2a9      	uxth	r1, r5
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	9200      	str	r2, [sp, #0]
 8009cc0:	4638      	mov	r0, r7
 8009cc2:	9a04      	ldr	r2, [sp, #16]
 8009cc4:	9205      	str	r2, [sp, #20]
 8009cc6:	9104      	str	r1, [sp, #16]
 8009cc8:	f003 face 	bl	800d268 <acc_confprogram_patch_offset>
 8009ccc:	f003 fc0c 	bl	800d4e8 <acc_image_a111_r2c_cbank_and_vana_calibration_param_table_get>
 8009cd0:	68a2      	ldr	r2, [r4, #8]
 8009cd2:	9201      	str	r2, [sp, #4]
 8009cd4:	2216      	movs	r2, #22
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	9200      	str	r2, [sp, #0]
 8009cda:	4638      	mov	r0, r7
 8009cdc:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8009ce0:	f003 fac2 	bl	800d268 <acc_confprogram_patch_offset>
 8009ce4:	f003 fc00 	bl	800d4e8 <acc_image_a111_r2c_cbank_and_vana_calibration_param_table_get>
 8009ce8:	68e2      	ldr	r2, [r4, #12]
 8009cea:	9201      	str	r2, [sp, #4]
 8009cec:	2217      	movs	r2, #23
 8009cee:	4603      	mov	r3, r0
 8009cf0:	9200      	str	r2, [sp, #0]
 8009cf2:	4638      	mov	r0, r7
 8009cf4:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8009cf8:	f003 fab6 	bl	800d268 <acc_confprogram_patch_offset>
 8009cfc:	f003 fbf4 	bl	800d4e8 <acc_image_a111_r2c_cbank_and_vana_calibration_param_table_get>
 8009d00:	f04f 0c15 	mov.w	ip, #21
 8009d04:	4603      	mov	r3, r0
 8009d06:	8a20      	ldrh	r0, [r4, #16]
 8009d08:	9001      	str	r0, [sp, #4]
 8009d0a:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8009d0e:	f8cd c000 	str.w	ip, [sp]
 8009d12:	4638      	mov	r0, r7
 8009d14:	f003 faa8 	bl	800d268 <acc_confprogram_patch_offset>
 8009d18:	f003 fbe6 	bl	800d4e8 <acc_image_a111_r2c_cbank_and_vana_calibration_param_table_get>
 8009d1c:	f04f 0b00 	mov.w	fp, #0
 8009d20:	f04f 0c10 	mov.w	ip, #16
 8009d24:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8009d28:	4603      	mov	r3, r0
 8009d2a:	e9cd bc00 	strd	fp, ip, [sp]
 8009d2e:	4638      	mov	r0, r7
 8009d30:	f003 fa9a 	bl	800d268 <acc_confprogram_patch_offset>
 8009d34:	4633      	mov	r3, r6
 8009d36:	6820      	ldr	r0, [r4, #0]
 8009d38:	4642      	mov	r2, r8
 8009d3a:	fa1f f18a 	uxth.w	r1, sl
 8009d3e:	f7fd ff9d 	bl	8007c7c <acc_sensor_r2_load_confmem>
 8009d42:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009d44:	4435      	add	r5, r6
 8009d46:	f5b5 7f4b 	cmp.w	r5, #812	; 0x32c
 8009d4a:	d39f      	bcc.n	8009c8c <acc_cpd_cbank_and_vana_calibration+0x34>
 8009d4c:	48ba      	ldr	r0, [pc, #744]	; (800a038 <acc_cpd_cbank_and_vana_calibration+0x3e0>)
 8009d4e:	f003 fb87 	bl	800d460 <acc_diagnostic_log_set_scope>
 8009d52:	6821      	ldr	r1, [r4, #0]
 8009d54:	48b9      	ldr	r0, [pc, #740]	; (800a03c <acc_cpd_cbank_and_vana_calibration+0x3e4>)
 8009d56:	f003 fba3 	bl	800d4a0 <acc_diagnostic_log_scalar>
 8009d5a:	48b9      	ldr	r0, [pc, #740]	; (800a040 <acc_cpd_cbank_and_vana_calibration+0x3e8>)
 8009d5c:	2203      	movs	r2, #3
 8009d5e:	4659      	mov	r1, fp
 8009d60:	f003 fb86 	bl	800d470 <acc_diagnostic_log_declare_parameter>
 8009d64:	6826      	ldr	r6, [r4, #0]
 8009d66:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009d6a:	4630      	mov	r0, r6
 8009d6c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8009d70:	f7fe fb52 	bl	8008418 <acc_sensor_protocol_r2_is_sensor_running>
 8009d74:	4605      	mov	r5, r0
 8009d76:	b1f0      	cbz	r0, 8009db6 <acc_cpd_cbank_and_vana_calibration+0x15e>
 8009d78:	4db2      	ldr	r5, [pc, #712]	; (800a044 <acc_cpd_cbank_and_vana_calibration+0x3ec>)
 8009d7a:	4ab3      	ldr	r2, [pc, #716]	; (800a048 <acc_cpd_cbank_and_vana_calibration+0x3f0>)
 8009d7c:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 8009d7e:	49b3      	ldr	r1, [pc, #716]	; (800a04c <acc_cpd_cbank_and_vana_calibration+0x3f4>)
 8009d80:	4633      	mov	r3, r6
 8009d82:	4658      	mov	r0, fp
 8009d84:	47a0      	blx	r4
 8009d86:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009d88:	4ab1      	ldr	r2, [pc, #708]	; (800a050 <acc_cpd_cbank_and_vana_calibration+0x3f8>)
 8009d8a:	49b0      	ldr	r1, [pc, #704]	; (800a04c <acc_cpd_cbank_and_vana_calibration+0x3f4>)
 8009d8c:	2000      	movs	r0, #0
 8009d8e:	4798      	blx	r3
 8009d90:	2600      	movs	r6, #0
 8009d92:	4630      	mov	r0, r6
 8009d94:	b00b      	add	sp, #44	; 0x2c
 8009d96:	ecbd 8b02 	vpop	{d8}
 8009d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d9e:	4ba9      	ldr	r3, [pc, #676]	; (800a044 <acc_cpd_cbank_and_vana_calibration+0x3ec>)
 8009da0:	4aac      	ldr	r2, [pc, #688]	; (800a054 <acc_cpd_cbank_and_vana_calibration+0x3fc>)
 8009da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009da4:	49a9      	ldr	r1, [pc, #676]	; (800a04c <acc_cpd_cbank_and_vana_calibration+0x3f4>)
 8009da6:	4606      	mov	r6, r0
 8009da8:	4798      	blx	r3
 8009daa:	4630      	mov	r0, r6
 8009dac:	b00b      	add	sp, #44	; 0x2c
 8009dae:	ecbd 8b02 	vpop	{d8}
 8009db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009db6:	f003 fb93 	bl	800d4e0 <acc_image_a111_r2c_cbank_and_vana_calibration_get>
 8009dba:	9004      	str	r0, [sp, #16]
 8009dbc:	f003 fb94 	bl	800d4e8 <acc_image_a111_r2c_cbank_and_vana_calibration_param_table_get>
 8009dc0:	f8df a2b4 	ldr.w	sl, [pc, #692]	; 800a078 <acc_cpd_cbank_and_vana_calibration+0x420>
 8009dc4:	9904      	ldr	r1, [sp, #16]
 8009dc6:	f8df b278 	ldr.w	fp, [pc, #632]	; 800a040 <acc_cpd_cbank_and_vana_calibration+0x3e8>
 8009dca:	2201      	movs	r2, #1
 8009dcc:	4603      	mov	r3, r0
 8009dce:	9200      	str	r2, [sp, #0]
 8009dd0:	e9cd 5a01 	strd	r5, sl, [sp, #4]
 8009dd4:	462a      	mov	r2, r5
 8009dd6:	4630      	mov	r0, r6
 8009dd8:	ee08 8a10 	vmov	s16, r8
 8009ddc:	f003 fab8 	bl	800d350 <acc_confprogram_live_patch>
 8009de0:	462f      	mov	r7, r5
 8009de2:	9405      	str	r4, [sp, #20]
 8009de4:	462c      	mov	r4, r5
 8009de6:	4639      	mov	r1, r7
 8009de8:	4658      	mov	r0, fp
 8009dea:	f003 fb49 	bl	800d480 <acc_diagnostic_log_set_parameter>
 8009dee:	f003 fb77 	bl	800d4e0 <acc_image_a111_r2c_cbank_and_vana_calibration_get>
 8009df2:	9004      	str	r0, [sp, #16]
 8009df4:	f003 fb78 	bl	800d4e8 <acc_image_a111_r2c_cbank_and_vana_calibration_param_table_get>
 8009df8:	221c      	movs	r2, #28
 8009dfa:	9904      	ldr	r1, [sp, #16]
 8009dfc:	9200      	str	r2, [sp, #0]
 8009dfe:	4603      	mov	r3, r0
 8009e00:	e9cd 7a01 	strd	r7, sl, [sp, #4]
 8009e04:	4630      	mov	r0, r6
 8009e06:	2200      	movs	r2, #0
 8009e08:	f003 faa2 	bl	800d350 <acc_confprogram_live_patch>
 8009e0c:	21ef      	movs	r1, #239	; 0xef
 8009e0e:	4630      	mov	r0, r6
 8009e10:	f7fe fa88 	bl	8008324 <acc_sensor_protocol_r2_run_program>
 8009e14:	2800      	cmp	r0, #0
 8009e16:	f000 8131 	beq.w	800a07c <acc_cpd_cbank_and_vana_calibration+0x424>
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	2209      	movs	r2, #9
 8009e1e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8009e22:	4630      	mov	r0, r6
 8009e24:	f7fe fc02 	bl	800862c <acc_sensor_protocol_r2_wait_for_specific_event>
 8009e28:	b938      	cbnz	r0, 8009e3a <acc_cpd_cbank_and_vana_calibration+0x1e2>
 8009e2a:	4d86      	ldr	r5, [pc, #536]	; (800a044 <acc_cpd_cbank_and_vana_calibration+0x3ec>)
 8009e2c:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 8009e2e:	4a8a      	ldr	r2, [pc, #552]	; (800a058 <acc_cpd_cbank_and_vana_calibration+0x400>)
 8009e30:	4986      	ldr	r1, [pc, #536]	; (800a04c <acc_cpd_cbank_and_vana_calibration+0x3f4>)
 8009e32:	463b      	mov	r3, r7
 8009e34:	2000      	movs	r0, #0
 8009e36:	47a0      	blx	r4
 8009e38:	e7a5      	b.n	8009d86 <acc_cpd_cbank_and_vana_calibration+0x12e>
 8009e3a:	2110      	movs	r1, #16
 8009e3c:	4648      	mov	r0, r9
 8009e3e:	f7fd ff55 	bl	8007cec <acc_sensor_r2_buffer_processed_verify_size>
 8009e42:	b928      	cbnz	r0, 8009e50 <acc_cpd_cbank_and_vana_calibration+0x1f8>
 8009e44:	4d7f      	ldr	r5, [pc, #508]	; (800a044 <acc_cpd_cbank_and_vana_calibration+0x3ec>)
 8009e46:	4a85      	ldr	r2, [pc, #532]	; (800a05c <acc_cpd_cbank_and_vana_calibration+0x404>)
 8009e48:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009e4a:	4980      	ldr	r1, [pc, #512]	; (800a04c <acc_cpd_cbank_and_vana_calibration+0x3f4>)
 8009e4c:	4798      	blx	r3
 8009e4e:	e7ed      	b.n	8009e2c <acc_cpd_cbank_and_vana_calibration+0x1d4>
 8009e50:	ee18 1a10 	vmov	r1, s16
 8009e54:	2310      	movs	r3, #16
 8009e56:	2200      	movs	r2, #0
 8009e58:	4630      	mov	r0, r6
 8009e5a:	f7fd ff4f 	bl	8007cfc <acc_sensor_r2_buffer_processed_read>
 8009e5e:	2310      	movs	r3, #16
 8009e60:	4602      	mov	r2, r0
 8009e62:	4680      	mov	r8, r0
 8009e64:	4631      	mov	r1, r6
 8009e66:	2000      	movs	r0, #0
 8009e68:	f7fe ff14 	bl	8008c94 <acc_probes_execute_uint16>
 8009e6c:	4630      	mov	r0, r6
 8009e6e:	f7fe fae5 	bl	800843c <acc_sensor_protocol_r2_ack_event>
 8009e72:	2800      	cmp	r0, #0
 8009e74:	d0d9      	beq.n	8009e2a <acc_cpd_cbank_and_vana_calibration+0x1d2>
 8009e76:	2500      	movs	r5, #0
 8009e78:	462b      	mov	r3, r5
 8009e7a:	4642      	mov	r2, r8
 8009e7c:	f108 0c1e 	add.w	ip, r8, #30
 8009e80:	8851      	ldrh	r1, [r2, #2]
 8009e82:	f832 0b02 	ldrh.w	r0, [r2], #2
 8009e86:	4281      	cmp	r1, r0
 8009e88:	440b      	add	r3, r1
 8009e8a:	bf34      	ite	cc
 8009e8c:	1a41      	subcc	r1, r0, r1
 8009e8e:	1a09      	subcs	r1, r1, r0
 8009e90:	428d      	cmp	r5, r1
 8009e92:	bf38      	it	cc
 8009e94:	460d      	movcc	r5, r1
 8009e96:	4594      	cmp	ip, r2
 8009e98:	d1f2      	bne.n	8009e80 <acc_cpd_cbank_and_vana_calibration+0x228>
 8009e9a:	4871      	ldr	r0, [pc, #452]	; (800a060 <acc_cpd_cbank_and_vana_calibration+0x408>)
 8009e9c:	9304      	str	r3, [sp, #16]
 8009e9e:	4659      	mov	r1, fp
 8009ea0:	f003 faf6 	bl	800d490 <acc_diagnostic_log_array>
 8009ea4:	2110      	movs	r1, #16
 8009ea6:	4640      	mov	r0, r8
 8009ea8:	f003 fb02 	bl	800d4b0 <acc_diagnostic_log_data_u16>
 8009eac:	f8b8 2000 	ldrh.w	r2, [r8]
 8009eb0:	9b04      	ldr	r3, [sp, #16]
 8009eb2:	4413      	add	r3, r2
 8009eb4:	ea4f 1813 	mov.w	r8, r3, lsr #4
 8009eb8:	f5a8 43f2 	sub.w	r3, r8, #30976	; 0x7900
 8009ebc:	3b18      	subs	r3, #24
 8009ebe:	b29b      	uxth	r3, r3
 8009ec0:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8009ec4:	428b      	cmp	r3, r1
 8009ec6:	d83d      	bhi.n	8009f44 <acc_cpd_cbank_and_vana_calibration+0x2ec>
 8009ec8:	f5b5 7f48 	cmp.w	r5, #800	; 0x320
 8009ecc:	d83a      	bhi.n	8009f44 <acc_cpd_cbank_and_vana_calibration+0x2ec>
 8009ece:	f8cd 8010 	str.w	r8, [sp, #16]
 8009ed2:	9c05      	ldr	r4, [sp, #20]
 8009ed4:	9507      	str	r5, [sp, #28]
 8009ed6:	f7fc fbd1 	bl	800667c <acc_rss_integration_log_level>
 8009eda:	2803      	cmp	r0, #3
 8009edc:	ee18 8a10 	vmov	r8, s16
 8009ee0:	9a04      	ldr	r2, [sp, #16]
 8009ee2:	9b07      	ldr	r3, [sp, #28]
 8009ee4:	d909      	bls.n	8009efa <acc_cpd_cbank_and_vana_calibration+0x2a2>
 8009ee6:	b292      	uxth	r2, r2
 8009ee8:	4d56      	ldr	r5, [pc, #344]	; (800a044 <acc_cpd_cbank_and_vana_calibration+0x3ec>)
 8009eea:	9301      	str	r3, [sp, #4]
 8009eec:	9200      	str	r2, [sp, #0]
 8009eee:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 8009ef0:	4a5c      	ldr	r2, [pc, #368]	; (800a064 <acc_cpd_cbank_and_vana_calibration+0x40c>)
 8009ef2:	4956      	ldr	r1, [pc, #344]	; (800a04c <acc_cpd_cbank_and_vana_calibration+0x3f4>)
 8009ef4:	4633      	mov	r3, r6
 8009ef6:	2004      	movs	r0, #4
 8009ef8:	47a8      	blx	r5
 8009efa:	9e06      	ldr	r6, [sp, #24]
 8009efc:	7137      	strb	r7, [r6, #4]
 8009efe:	6825      	ldr	r5, [r4, #0]
 8009f00:	f003 faee 	bl	800d4e0 <acc_image_a111_r2c_cbank_and_vana_calibration_get>
 8009f04:	9004      	str	r0, [sp, #16]
 8009f06:	f003 faef 	bl	800d4e8 <acc_image_a111_r2c_cbank_and_vana_calibration_param_table_get>
 8009f0a:	7936      	ldrb	r6, [r6, #4]
 8009f0c:	9904      	ldr	r1, [sp, #16]
 8009f0e:	f8cd a008 	str.w	sl, [sp, #8]
 8009f12:	221c      	movs	r2, #28
 8009f14:	e9cd 2600 	strd	r2, r6, [sp]
 8009f18:	4603      	mov	r3, r0
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	4628      	mov	r0, r5
 8009f1e:	f003 fa17 	bl	800d350 <acc_confprogram_live_patch>
 8009f22:	6820      	ldr	r0, [r4, #0]
 8009f24:	2119      	movs	r1, #25
 8009f26:	f7fe f9fd 	bl	8008324 <acc_sensor_protocol_r2_run_program>
 8009f2a:	4606      	mov	r6, r0
 8009f2c:	bb00      	cbnz	r0, 8009f70 <acc_cpd_cbank_and_vana_calibration+0x318>
 8009f2e:	4b45      	ldr	r3, [pc, #276]	; (800a044 <acc_cpd_cbank_and_vana_calibration+0x3ec>)
 8009f30:	4a4d      	ldr	r2, [pc, #308]	; (800a068 <acc_cpd_cbank_and_vana_calibration+0x410>)
 8009f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f34:	4945      	ldr	r1, [pc, #276]	; (800a04c <acc_cpd_cbank_and_vana_calibration+0x3f4>)
 8009f36:	4798      	blx	r3
 8009f38:	4630      	mov	r0, r6
 8009f3a:	b00b      	add	sp, #44	; 0x2c
 8009f3c:	ecbd 8b02 	vpop	{d8}
 8009f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f44:	f7fc fb9a 	bl	800667c <acc_rss_integration_log_level>
 8009f48:	2803      	cmp	r0, #3
 8009f4a:	d90a      	bls.n	8009f62 <acc_cpd_cbank_and_vana_calibration+0x30a>
 8009f4c:	fa1f f288 	uxth.w	r2, r8
 8009f50:	e9cd 2500 	strd	r2, r5, [sp]
 8009f54:	4b3b      	ldr	r3, [pc, #236]	; (800a044 <acc_cpd_cbank_and_vana_calibration+0x3ec>)
 8009f56:	4a43      	ldr	r2, [pc, #268]	; (800a064 <acc_cpd_cbank_and_vana_calibration+0x40c>)
 8009f58:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8009f5a:	493c      	ldr	r1, [pc, #240]	; (800a04c <acc_cpd_cbank_and_vana_calibration+0x3f4>)
 8009f5c:	4633      	mov	r3, r6
 8009f5e:	2004      	movs	r0, #4
 8009f60:	47a8      	blx	r5
 8009f62:	b10c      	cbz	r4, 8009f68 <acc_cpd_cbank_and_vana_calibration+0x310>
 8009f64:	4d37      	ldr	r5, [pc, #220]	; (800a044 <acc_cpd_cbank_and_vana_calibration+0x3ec>)
 8009f66:	e70e      	b.n	8009d86 <acc_cpd_cbank_and_vana_calibration+0x12e>
 8009f68:	f89d 7025 	ldrb.w	r7, [sp, #37]	; 0x25
 8009f6c:	2401      	movs	r4, #1
 8009f6e:	e73a      	b.n	8009de6 <acc_cpd_cbank_and_vana_calibration+0x18e>
 8009f70:	4648      	mov	r0, r9
 8009f72:	2108      	movs	r1, #8
 8009f74:	6826      	ldr	r6, [r4, #0]
 8009f76:	f7fd feb9 	bl	8007cec <acc_sensor_r2_buffer_processed_verify_size>
 8009f7a:	b958      	cbnz	r0, 8009f94 <acc_cpd_cbank_and_vana_calibration+0x33c>
 8009f7c:	4d31      	ldr	r5, [pc, #196]	; (800a044 <acc_cpd_cbank_and_vana_calibration+0x3ec>)
 8009f7e:	4a37      	ldr	r2, [pc, #220]	; (800a05c <acc_cpd_cbank_and_vana_calibration+0x404>)
 8009f80:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009f82:	4932      	ldr	r1, [pc, #200]	; (800a04c <acc_cpd_cbank_and_vana_calibration+0x3f4>)
 8009f84:	4798      	blx	r3
 8009f86:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009f88:	4a38      	ldr	r2, [pc, #224]	; (800a06c <acc_cpd_cbank_and_vana_calibration+0x414>)
 8009f8a:	4930      	ldr	r1, [pc, #192]	; (800a04c <acc_cpd_cbank_and_vana_calibration+0x3f4>)
 8009f8c:	2000      	movs	r0, #0
 8009f8e:	4798      	blx	r3
 8009f90:	2600      	movs	r6, #0
 8009f92:	e70a      	b.n	8009daa <acc_cpd_cbank_and_vana_calibration+0x152>
 8009f94:	2300      	movs	r3, #0
 8009f96:	2203      	movs	r2, #3
 8009f98:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8009f9c:	4630      	mov	r0, r6
 8009f9e:	f7fe fb45 	bl	800862c <acc_sensor_protocol_r2_wait_for_specific_event>
 8009fa2:	2800      	cmp	r0, #0
 8009fa4:	d046      	beq.n	800a034 <acc_cpd_cbank_and_vana_calibration+0x3dc>
 8009fa6:	2408      	movs	r4, #8
 8009fa8:	4623      	mov	r3, r4
 8009faa:	2200      	movs	r2, #0
 8009fac:	4641      	mov	r1, r8
 8009fae:	4630      	mov	r0, r6
 8009fb0:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
 8009fb4:	f7fd fea2 	bl	8007cfc <acc_sensor_r2_buffer_processed_read>
 8009fb8:	492d      	ldr	r1, [pc, #180]	; (800a070 <acc_cpd_cbank_and_vana_calibration+0x418>)
 8009fba:	4605      	mov	r5, r0
 8009fbc:	482d      	ldr	r0, [pc, #180]	; (800a074 <acc_cpd_cbank_and_vana_calibration+0x41c>)
 8009fbe:	f003 fa67 	bl	800d490 <acc_diagnostic_log_array>
 8009fc2:	4621      	mov	r1, r4
 8009fc4:	4628      	mov	r0, r5
 8009fc6:	1eac      	subs	r4, r5, #2
 8009fc8:	f003 fa72 	bl	800d4b0 <acc_diagnostic_log_data_u16>
 8009fcc:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8009fd0:	4620      	mov	r0, r4
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	f830 2f02 	ldrh.w	r2, [r0, #2]!
 8009fd8:	f5d2 4100 	rsbs	r1, r2, #32768	; 0x8000
 8009fdc:	bf48      	it	mi
 8009fde:	f5a2 4100 	submi.w	r1, r2, #32768	; 0x8000
 8009fe2:	42b9      	cmp	r1, r7
 8009fe4:	bfb8      	it	lt
 8009fe6:	f8ad 3024 	strhlt.w	r3, [sp, #36]	; 0x24
 8009fea:	f103 0301 	add.w	r3, r3, #1
 8009fee:	bfb8      	it	lt
 8009ff0:	460f      	movlt	r7, r1
 8009ff2:	2b08      	cmp	r3, #8
 8009ff4:	d1ee      	bne.n	8009fd4 <acc_cpd_cbank_and_vana_calibration+0x37c>
 8009ff6:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 8009ffa:	4631      	mov	r1, r6
 8009ffc:	aa09      	add	r2, sp, #36	; 0x24
 8009ffe:	2301      	movs	r3, #1
 800a000:	f007 0707 	and.w	r7, r7, #7
 800a004:	2006      	movs	r0, #6
 800a006:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 800a00a:	f7fe fe43 	bl	8008c94 <acc_probes_execute_uint16>
 800a00e:	4630      	mov	r0, r6
 800a010:	f7fe fa14 	bl	800843c <acc_sensor_protocol_r2_ack_event>
 800a014:	4606      	mov	r6, r0
 800a016:	b168      	cbz	r0, 800a034 <acc_cpd_cbank_and_vana_calibration+0x3dc>
 800a018:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 800a01c:	2900      	cmp	r1, #0
 800a01e:	d05e      	beq.n	800a0de <acc_cpd_cbank_and_vana_calibration+0x486>
 800a020:	2300      	movs	r3, #0
 800a022:	e001      	b.n	800a028 <acc_cpd_cbank_and_vana_calibration+0x3d0>
 800a024:	428b      	cmp	r3, r1
 800a026:	d030      	beq.n	800a08a <acc_cpd_cbank_and_vana_calibration+0x432>
 800a028:	f934 2f02 	ldrsh.w	r2, [r4, #2]!
 800a02c:	2a00      	cmp	r2, #0
 800a02e:	f103 0301 	add.w	r3, r3, #1
 800a032:	daf7      	bge.n	800a024 <acc_cpd_cbank_and_vana_calibration+0x3cc>
 800a034:	4d03      	ldr	r5, [pc, #12]	; (800a044 <acc_cpd_cbank_and_vana_calibration+0x3ec>)
 800a036:	e7a6      	b.n	8009f86 <acc_cpd_cbank_and_vana_calibration+0x32e>
 800a038:	080142f0 	.word	0x080142f0
 800a03c:	0801430c 	.word	0x0801430c
 800a040:	08014318 	.word	0x08014318
 800a044:	20000640 	.word	0x20000640
 800a048:	08014324 	.word	0x08014324
 800a04c:	080142ec 	.word	0x080142ec
 800a050:	080143ec 	.word	0x080143ec
 800a054:	080142a8 	.word	0x080142a8
 800a058:	080143c0 	.word	0x080143c0
 800a05c:	08014398 	.word	0x08014398
 800a060:	080143b0 	.word	0x080143b0
 800a064:	08014480 	.word	0x08014480
 800a068:	08014404 	.word	0x08014404
 800a06c:	08014448 	.word	0x08014448
 800a070:	08014818 	.word	0x08014818
 800a074:	08014438 	.word	0x08014438
 800a078:	08007c21 	.word	0x08007c21
 800a07c:	4d19      	ldr	r5, [pc, #100]	; (800a0e4 <acc_cpd_cbank_and_vana_calibration+0x48c>)
 800a07e:	4a1a      	ldr	r2, [pc, #104]	; (800a0e8 <acc_cpd_cbank_and_vana_calibration+0x490>)
 800a080:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 800a082:	491a      	ldr	r1, [pc, #104]	; (800a0ec <acc_cpd_cbank_and_vana_calibration+0x494>)
 800a084:	463b      	mov	r3, r7
 800a086:	47a0      	blx	r4
 800a088:	e67d      	b.n	8009d86 <acc_cpd_cbank_and_vana_calibration+0x12e>
 800a08a:	1c4b      	adds	r3, r1, #1
 800a08c:	2b07      	cmp	r3, #7
 800a08e:	dc0c      	bgt.n	800a0aa <acc_cpd_cbank_and_vana_calibration+0x452>
 800a090:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 800a094:	e001      	b.n	800a09a <acc_cpd_cbank_and_vana_calibration+0x442>
 800a096:	2b08      	cmp	r3, #8
 800a098:	d007      	beq.n	800a0aa <acc_cpd_cbank_and_vana_calibration+0x452>
 800a09a:	f835 2b02 	ldrh.w	r2, [r5], #2
 800a09e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800a0a2:	f103 0301 	add.w	r3, r3, #1
 800a0a6:	d8f6      	bhi.n	800a096 <acc_cpd_cbank_and_vana_calibration+0x43e>
 800a0a8:	e7c4      	b.n	800a034 <acc_cpd_cbank_and_vana_calibration+0x3dc>
 800a0aa:	9b06      	ldr	r3, [sp, #24]
 800a0ac:	6019      	str	r1, [r3, #0]
 800a0ae:	f7fc fae5 	bl	800667c <acc_rss_integration_log_level>
 800a0b2:	2801      	cmp	r0, #1
 800a0b4:	d909      	bls.n	800a0ca <acc_cpd_cbank_and_vana_calibration+0x472>
 800a0b6:	9906      	ldr	r1, [sp, #24]
 800a0b8:	4a0a      	ldr	r2, [pc, #40]	; (800a0e4 <acc_cpd_cbank_and_vana_calibration+0x48c>)
 800a0ba:	790b      	ldrb	r3, [r1, #4]
 800a0bc:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800a0be:	9300      	str	r3, [sp, #0]
 800a0c0:	680b      	ldr	r3, [r1, #0]
 800a0c2:	4a0b      	ldr	r2, [pc, #44]	; (800a0f0 <acc_cpd_cbank_and_vana_calibration+0x498>)
 800a0c4:	4909      	ldr	r1, [pc, #36]	; (800a0ec <acc_cpd_cbank_and_vana_calibration+0x494>)
 800a0c6:	2002      	movs	r0, #2
 800a0c8:	47a0      	blx	r4
 800a0ca:	9c06      	ldr	r4, [sp, #24]
 800a0cc:	4809      	ldr	r0, [pc, #36]	; (800a0f4 <acc_cpd_cbank_and_vana_calibration+0x49c>)
 800a0ce:	6821      	ldr	r1, [r4, #0]
 800a0d0:	f003 f9e6 	bl	800d4a0 <acc_diagnostic_log_scalar>
 800a0d4:	7921      	ldrb	r1, [r4, #4]
 800a0d6:	4808      	ldr	r0, [pc, #32]	; (800a0f8 <acc_cpd_cbank_and_vana_calibration+0x4a0>)
 800a0d8:	f003 f9e2 	bl	800d4a0 <acc_diagnostic_log_scalar>
 800a0dc:	e665      	b.n	8009daa <acc_cpd_cbank_and_vana_calibration+0x152>
 800a0de:	2301      	movs	r3, #1
 800a0e0:	e7d6      	b.n	800a090 <acc_cpd_cbank_and_vana_calibration+0x438>
 800a0e2:	bf00      	nop
 800a0e4:	20000640 	.word	0x20000640
 800a0e8:	08014358 	.word	0x08014358
 800a0ec:	080142ec 	.word	0x080142ec
 800a0f0:	08014460 	.word	0x08014460
 800a0f4:	08014474 	.word	0x08014474
 800a0f8:	08014318 	.word	0x08014318

0800a0fc <acc_cpd_dll_calibration>:
 800a0fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a100:	ed2d 8b0a 	vpush	{d8-d12}
 800a104:	b0c7      	sub	sp, #284	; 0x11c
 800a106:	461d      	mov	r5, r3
 800a108:	9309      	str	r3, [sp, #36]	; 0x24
 800a10a:	2400      	movs	r4, #0
 800a10c:	4b63      	ldr	r3, [pc, #396]	; (800a29c <acc_cpd_dll_calibration+0x1a0>)
 800a10e:	61eb      	str	r3, [r5, #28]
 800a110:	f5b1 7f45 	cmp.w	r1, #788	; 0x314
 800a114:	ee0b 0a90 	vmov	s23, r0
 800a118:	4693      	mov	fp, r2
 800a11a:	766c      	strb	r4, [r5, #25]
 800a11c:	f0c0 8479 	bcc.w	800aa12 <acc_cpd_dll_calibration+0x916>
 800a120:	f5a1 7316 	sub.w	r3, r1, #600	; 0x258
 800a124:	f023 0301 	bic.w	r3, r3, #1
 800a128:	f5a1 7145 	sub.w	r1, r1, #788	; 0x314
 800a12c:	f021 0201 	bic.w	r2, r1, #1
 800a130:	18c3      	adds	r3, r0, r3
 800a132:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800a136:	ee0c 1a10 	vmov	s24, r1
 800a13a:	9312      	str	r3, [sp, #72]	; 0x48
 800a13c:	eb00 0a02 	add.w	sl, r0, r2
 800a140:	f0c0 8085 	bcc.w	800a24e <acc_cpd_dll_calibration+0x152>
 800a144:	4856      	ldr	r0, [pc, #344]	; (800a2a0 <acc_cpd_dll_calibration+0x1a4>)
 800a146:	ed9f 9a57 	vldr	s18, [pc, #348]	; 800a2a4 <acc_cpd_dll_calibration+0x1a8>
 800a14a:	eddf 8a57 	vldr	s17, [pc, #348]	; 800a2a8 <acc_cpd_dll_calibration+0x1ac>
 800a14e:	f003 f987 	bl	800d460 <acc_diagnostic_log_set_scope>
 800a152:	f8db 1000 	ldr.w	r1, [fp]
 800a156:	4855      	ldr	r0, [pc, #340]	; (800a2ac <acc_cpd_dll_calibration+0x1b0>)
 800a158:	f003 f9a2 	bl	800d4a0 <acc_diagnostic_log_scalar>
 800a15c:	4854      	ldr	r0, [pc, #336]	; (800a2b0 <acc_cpd_dll_calibration+0x1b4>)
 800a15e:	2202      	movs	r2, #2
 800a160:	2101      	movs	r1, #1
 800a162:	f003 f985 	bl	800d470 <acc_diagnostic_log_declare_parameter>
 800a166:	4853      	ldr	r0, [pc, #332]	; (800a2b4 <acc_cpd_dll_calibration+0x1b8>)
 800a168:	221f      	movs	r2, #31
 800a16a:	2100      	movs	r1, #0
 800a16c:	f003 f980 	bl	800d470 <acc_diagnostic_log_declare_parameter>
 800a170:	4851      	ldr	r0, [pc, #324]	; (800a2b8 <acc_cpd_dll_calibration+0x1bc>)
 800a172:	227b      	movs	r2, #123	; 0x7b
 800a174:	2100      	movs	r1, #0
 800a176:	f003 f97b 	bl	800d470 <acc_diagnostic_log_declare_parameter>
 800a17a:	2302      	movs	r3, #2
 800a17c:	461c      	mov	r4, r3
 800a17e:	484f      	ldr	r0, [pc, #316]	; (800a2bc <acc_cpd_dll_calibration+0x1c0>)
 800a180:	9319      	str	r3, [sp, #100]	; 0x64
 800a182:	220b      	movs	r2, #11
 800a184:	2100      	movs	r1, #0
 800a186:	f003 f973 	bl	800d470 <acc_diagnostic_log_declare_parameter>
 800a18a:	46d1      	mov	r9, sl
 800a18c:	940e      	str	r4, [sp, #56]	; 0x38
 800a18e:	46da      	mov	sl, fp
 800a190:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a192:	4847      	ldr	r0, [pc, #284]	; (800a2b0 <acc_cpd_dll_calibration+0x1b4>)
 800a194:	ed9f 8a4a 	vldr	s16, [pc, #296]	; 800a2c0 <acc_cpd_dll_calibration+0x1c4>
 800a198:	f003 f972 	bl	800d480 <acc_diagnostic_log_set_parameter>
 800a19c:	ab20      	add	r3, sp, #128	; 0x80
 800a19e:	464c      	mov	r4, r9
 800a1a0:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800a1a2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800a1a4:	ee1c ba10 	vmov	fp, s24
 800a1a8:	ee1b 9a90 	vmov	r9, s23
 800a1ac:	2500      	movs	r5, #0
 800a1ae:	4698      	mov	r8, r3
 800a1b0:	e023      	b.n	800a1fa <acc_cpd_dll_calibration+0xfe>
 800a1b2:	f837 3b32 	ldrh.w	r3, [r7], #50
 800a1b6:	ee07 3a10 	vmov	s14, r3
 800a1ba:	4b42      	ldr	r3, [pc, #264]	; (800a2c4 <acc_cpd_dll_calibration+0x1c8>)
 800a1bc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800a1c0:	f833 2016 	ldrh.w	r2, [r3, r6, lsl #1]
 800a1c4:	4b40      	ldr	r3, [pc, #256]	; (800a2c8 <acc_cpd_dll_calibration+0x1cc>)
 800a1c6:	ee27 7a09 	vmul.f32	s14, s14, s18
 800a1ca:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 800a1ce:	ee37 7a66 	vsub.f32	s14, s14, s13
 800a1d2:	1ad3      	subs	r3, r2, r3
 800a1d4:	b21b      	sxth	r3, r3
 800a1d6:	ee07 3a90 	vmov	s15, r3
 800a1da:	ee27 7a28 	vmul.f32	s14, s14, s17
 800a1de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a1e2:	ee27 7a08 	vmul.f32	s14, s14, s16
 800a1e6:	2d0c      	cmp	r5, #12
 800a1e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a1ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a1f0:	ee17 3a90 	vmov	r3, s15
 800a1f4:	f828 3b02 	strh.w	r3, [r8], #2
 800a1f8:	d035      	beq.n	800a266 <acc_cpd_dll_calibration+0x16a>
 800a1fa:	4629      	mov	r1, r5
 800a1fc:	482f      	ldr	r0, [pc, #188]	; (800a2bc <acc_cpd_dll_calibration+0x1c0>)
 800a1fe:	f003 f93f 	bl	800d480 <acc_diagnostic_log_set_parameter>
 800a202:	e9da 1200 	ldrd	r1, r2, [sl]
 800a206:	e9da 3002 	ldrd	r3, r0, [sl, #8]
 800a20a:	9139      	str	r1, [sp, #228]	; 0xe4
 800a20c:	e9cd 303b 	strd	r3, r0, [sp, #236]	; 0xec
 800a210:	f8da 1014 	ldr.w	r1, [sl, #20]
 800a214:	f8da 0018 	ldr.w	r0, [sl, #24]
 800a218:	f8ba c010 	ldrh.w	ip, [sl, #16]
 800a21c:	923a      	str	r2, [sp, #232]	; 0xe8
 800a21e:	9140      	str	r1, [sp, #256]	; 0x100
 800a220:	9041      	str	r0, [sp, #260]	; 0x104
 800a222:	463b      	mov	r3, r7
 800a224:	aa39      	add	r2, sp, #228	; 0xe4
 800a226:	4659      	mov	r1, fp
 800a228:	4648      	mov	r0, r9
 800a22a:	e9cd 653e 	strd	r6, r5, [sp, #248]	; 0xf8
 800a22e:	f8ad c0f4 	strh.w	ip, [sp, #244]	; 0xf4
 800a232:	f001 fe85 	bl	800bf40 <acc_cpd_rx_fine_dip_calibration>
 800a236:	3501      	adds	r5, #1
 800a238:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800a23c:	2800      	cmp	r0, #0
 800a23e:	d1b8      	bne.n	800a1b2 <acc_cpd_dll_calibration+0xb6>
 800a240:	4604      	mov	r4, r0
 800a242:	4620      	mov	r0, r4
 800a244:	b047      	add	sp, #284	; 0x11c
 800a246:	ecbd 8b0a 	vpop	{d8-d12}
 800a24a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a24e:	f7fc fa15 	bl	800667c <acc_rss_integration_log_level>
 800a252:	2801      	cmp	r0, #1
 800a254:	f67f af76 	bls.w	800a144 <acc_cpd_dll_calibration+0x48>
 800a258:	4b1c      	ldr	r3, [pc, #112]	; (800a2cc <acc_cpd_dll_calibration+0x1d0>)
 800a25a:	4a1d      	ldr	r2, [pc, #116]	; (800a2d0 <acc_cpd_dll_calibration+0x1d4>)
 800a25c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a25e:	491d      	ldr	r1, [pc, #116]	; (800a2d4 <acc_cpd_dll_calibration+0x1d8>)
 800a260:	2002      	movs	r0, #2
 800a262:	4798      	blx	r3
 800a264:	e76e      	b.n	800a144 <acc_cpd_dll_calibration+0x48>
 800a266:	491c      	ldr	r1, [pc, #112]	; (800a2d8 <acc_cpd_dll_calibration+0x1dc>)
 800a268:	481c      	ldr	r0, [pc, #112]	; (800a2dc <acc_cpd_dll_calibration+0x1e0>)
 800a26a:	f003 f911 	bl	800d490 <acc_diagnostic_log_array>
 800a26e:	4629      	mov	r1, r5
 800a270:	a820      	add	r0, sp, #128	; 0x80
 800a272:	f003 f91d 	bl	800d4b0 <acc_diagnostic_log_data_u16>
 800a276:	aa1d      	add	r2, sp, #116	; 0x74
 800a278:	a920      	add	r1, sp, #128	; 0x80
 800a27a:	4628      	mov	r0, r5
 800a27c:	f000 fd66 	bl	800ad4c <acc_dll_dly_coarse_priority_sort>
 800a280:	4915      	ldr	r1, [pc, #84]	; (800a2d8 <acc_cpd_dll_calibration+0x1dc>)
 800a282:	4817      	ldr	r0, [pc, #92]	; (800a2e0 <acc_cpd_dll_calibration+0x1e4>)
 800a284:	f003 f904 	bl	800d490 <acc_diagnostic_log_array>
 800a288:	4629      	mov	r1, r5
 800a28a:	a81d      	add	r0, sp, #116	; 0x74
 800a28c:	f003 f920 	bl	800d4d0 <acc_diagnostic_log_data_u8>
 800a290:	ab1d      	add	r3, sp, #116	; 0x74
 800a292:	930d      	str	r3, [sp, #52]	; 0x34
 800a294:	4653      	mov	r3, sl
 800a296:	4699      	mov	r9, r3
 800a298:	46a2      	mov	sl, r4
 800a29a:	e075      	b.n	800a388 <acc_cpd_dll_calibration+0x28c>
 800a29c:	ff800000 	.word	0xff800000
 800a2a0:	080144f0 	.word	0x080144f0
 800a2a4:	37800000 	.word	0x37800000
 800a2a8:	3f99999a 	.word	0x3f99999a
 800a2ac:	0801430c 	.word	0x0801430c
 800a2b0:	08014500 	.word	0x08014500
 800a2b4:	0801450c 	.word	0x0801450c
 800a2b8:	08014518 	.word	0x08014518
 800a2bc:	08014524 	.word	0x08014524
 800a2c0:	447a0000 	.word	0x447a0000
 800a2c4:	08018598 	.word	0x08018598
 800a2c8:	08018590 	.word	0x08018590
 800a2cc:	20000640 	.word	0x20000640
 800a2d0:	080144c4 	.word	0x080144c4
 800a2d4:	080144b0 	.word	0x080144b0
 800a2d8:	08014530 	.word	0x08014530
 800a2dc:	08014548 	.word	0x08014548
 800a2e0:	0801455c 	.word	0x0801455c
 800a2e4:	f5a2 7243 	sub.w	r2, r2, #780	; 0x30c
 800a2e8:	f5b2 7fe6 	cmp.w	r2, #460	; 0x1cc
 800a2ec:	f200 82eb 	bhi.w	800a8c6 <acc_cpd_dll_calibration+0x7ca>
 800a2f0:	f9bd 206e 	ldrsh.w	r2, [sp, #110]	; 0x6e
 800a2f4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a2f6:	1a9b      	subs	r3, r3, r2
 800a2f8:	b21b      	sxth	r3, r3
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	bfb8      	it	lt
 800a2fe:	425b      	neglt	r3, r3
 800a300:	b21b      	sxth	r3, r3
 800a302:	2b64      	cmp	r3, #100	; 0x64
 800a304:	f300 82df 	bgt.w	800a8c6 <acc_cpd_dll_calibration+0x7ca>
 800a308:	ee18 3a10 	vmov	r3, s16
 800a30c:	4293      	cmp	r3, r2
 800a30e:	f2c0 82da 	blt.w	800a8c6 <acc_cpd_dll_calibration+0x7ca>
 800a312:	49d4      	ldr	r1, [pc, #848]	; (800a664 <acc_cpd_dll_calibration+0x568>)
 800a314:	48d4      	ldr	r0, [pc, #848]	; (800a668 <acc_cpd_dll_calibration+0x56c>)
 800a316:	f003 f8bb 	bl	800d490 <acc_diagnostic_log_array>
 800a31a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800a31c:	4628      	mov	r0, r5
 800a31e:	4621      	mov	r1, r4
 800a320:	f003 f8c6 	bl	800d4b0 <acc_diagnostic_log_data_u16>
 800a324:	4621      	mov	r1, r4
 800a326:	4628      	mov	r0, r5
 800a328:	f000 fc76 	bl	800ac18 <acc_dll_check_direct_leakage>
 800a32c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800a330:	4604      	mov	r4, r0
 800a332:	4658      	mov	r0, fp
 800a334:	f7fe f9a8 	bl	8008688 <acc_sensor_protocol_r2_stop>
 800a338:	2c00      	cmp	r4, #0
 800a33a:	f040 840f 	bne.w	800ab5c <acc_cpd_dll_calibration+0xa60>
 800a33e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a340:	2b01      	cmp	r3, #1
 800a342:	f04f 0100 	mov.w	r1, #0
 800a346:	f040 82e5 	bne.w	800a914 <acc_cpd_dll_calibration+0x818>
 800a34a:	f7fc f997 	bl	800667c <acc_rss_integration_log_level>
 800a34e:	2803      	cmp	r0, #3
 800a350:	d908      	bls.n	800a364 <acc_cpd_dll_calibration+0x268>
 800a352:	4bc6      	ldr	r3, [pc, #792]	; (800a66c <acc_cpd_dll_calibration+0x570>)
 800a354:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a356:	9200      	str	r2, [sp, #0]
 800a358:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800a35a:	4ac5      	ldr	r2, [pc, #788]	; (800a670 <acc_cpd_dll_calibration+0x574>)
 800a35c:	49c5      	ldr	r1, [pc, #788]	; (800a674 <acc_cpd_dll_calibration+0x578>)
 800a35e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a360:	2004      	movs	r0, #4
 800a362:	47a0      	blx	r4
 800a364:	f7fc f98a 	bl	800667c <acc_rss_integration_log_level>
 800a368:	2803      	cmp	r0, #3
 800a36a:	d908      	bls.n	800a37e <acc_cpd_dll_calibration+0x282>
 800a36c:	4bbf      	ldr	r3, [pc, #764]	; (800a66c <acc_cpd_dll_calibration+0x570>)
 800a36e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a370:	9200      	str	r2, [sp, #0]
 800a372:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800a374:	4ac0      	ldr	r2, [pc, #768]	; (800a678 <acc_cpd_dll_calibration+0x57c>)
 800a376:	49bf      	ldr	r1, [pc, #764]	; (800a674 <acc_cpd_dll_calibration+0x578>)
 800a378:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a37a:	2004      	movs	r0, #4
 800a37c:	47a0      	blx	r4
 800a37e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a380:	aa20      	add	r2, sp, #128	; 0x80
 800a382:	429a      	cmp	r2, r3
 800a384:	f000 8332 	beq.w	800a9ec <acc_cpd_dll_calibration+0x8f0>
 800a388:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a38a:	48bc      	ldr	r0, [pc, #752]	; (800a67c <acc_cpd_dll_calibration+0x580>)
 800a38c:	f812 3b01 	ldrb.w	r3, [r2], #1
 800a390:	9311      	str	r3, [sp, #68]	; 0x44
 800a392:	461c      	mov	r4, r3
 800a394:	4619      	mov	r1, r3
 800a396:	920d      	str	r2, [sp, #52]	; 0x34
 800a398:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800a39c:	f003 f870 	bl	800d480 <acc_diagnostic_log_set_parameter>
 800a3a0:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800a3a2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800a3a6:	eb06 0544 	add.w	r5, r6, r4, lsl #1
 800a3aa:	4629      	mov	r1, r5
 800a3ac:	ab2c      	add	r3, sp, #176	; 0xb0
 800a3ae:	aa39      	add	r2, sp, #228	; 0xe4
 800a3b0:	2019      	movs	r0, #25
 800a3b2:	f000 fd8f 	bl	800aed4 <acc_dll_plateau_finder>
 800a3b6:	9016      	str	r0, [sp, #88]	; 0x58
 800a3b8:	2800      	cmp	r0, #0
 800a3ba:	d0d3      	beq.n	800a364 <acc_cpd_dll_calibration+0x268>
 800a3bc:	f836 3014 	ldrh.w	r3, [r6, r4, lsl #1]
 800a3c0:	49af      	ldr	r1, [pc, #700]	; (800a680 <acc_cpd_dll_calibration+0x584>)
 800a3c2:	eddf 6abc 	vldr	s13, [pc, #752]	; 800a6b4 <acc_cpd_dll_calibration+0x5b8>
 800a3c6:	ee07 3a10 	vmov	s14, r3
 800a3ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a3cc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800a3d0:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800a3d4:	49ab      	ldr	r1, [pc, #684]	; (800a684 <acc_cpd_dll_calibration+0x588>)
 800a3d6:	ee27 7a09 	vmul.f32	s14, s14, s18
 800a3da:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800a3de:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800a3e2:	1ad3      	subs	r3, r2, r3
 800a3e4:	ee37 7a46 	vsub.f32	s14, s14, s12
 800a3e8:	b21b      	sxth	r3, r3
 800a3ea:	ee07 3a90 	vmov	s15, r3
 800a3ee:	ee27 7a28 	vmul.f32	s14, s14, s17
 800a3f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a3f6:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a3fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a3fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a402:	ee17 3a90 	vmov	r3, s15
 800a406:	b21a      	sxth	r2, r3
 800a408:	f5a2 7343 	sub.w	r3, r2, #780	; 0x30c
 800a40c:	b29b      	uxth	r3, r3
 800a40e:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 800a412:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
 800a416:	f200 82dd 	bhi.w	800a9d4 <acc_cpd_dll_calibration+0x8d8>
 800a41a:	f8bd 40e4 	ldrh.w	r4, [sp, #228]	; 0xe4
 800a41e:	4b9a      	ldr	r3, [pc, #616]	; (800a688 <acc_cpd_dll_calibration+0x58c>)
 800a420:	a946      	add	r1, sp, #280	; 0x118
 800a422:	eb01 0144 	add.w	r1, r1, r4, lsl #1
 800a426:	ee07 2a90 	vmov	s15, r2
 800a42a:	f831 6c68 	ldrh.w	r6, [r1, #-104]
 800a42e:	9613      	str	r6, [sp, #76]	; 0x4c
 800a430:	4632      	mov	r2, r6
 800a432:	fba3 2302 	umull	r2, r3, r3, r2
 800a436:	f3c3 0387 	ubfx	r3, r3, #2, #8
 800a43a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a43e:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
 800a442:	ee07 3a90 	vmov	s15, r3
 800a446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a44a:	ee67 7a89 	vmul.f32	s15, s15, s18
 800a44e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800a452:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800a456:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a45a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a45e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a462:	ee17 3a90 	vmov	r3, s15
 800a466:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
 800a46a:	f7fc f907 	bl	800667c <acc_rss_integration_log_level>
 800a46e:	2803      	cmp	r0, #3
 800a470:	d907      	bls.n	800a482 <acc_cpd_dll_calibration+0x386>
 800a472:	4a7e      	ldr	r2, [pc, #504]	; (800a66c <acc_cpd_dll_calibration+0x570>)
 800a474:	9600      	str	r6, [sp, #0]
 800a476:	4623      	mov	r3, r4
 800a478:	497e      	ldr	r1, [pc, #504]	; (800a674 <acc_cpd_dll_calibration+0x578>)
 800a47a:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800a47c:	4a83      	ldr	r2, [pc, #524]	; (800a68c <acc_cpd_dll_calibration+0x590>)
 800a47e:	2004      	movs	r0, #4
 800a480:	47a0      	blx	r4
 800a482:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a484:	4882      	ldr	r0, [pc, #520]	; (800a690 <acc_cpd_dll_calibration+0x594>)
 800a486:	f002 fffb 	bl	800d480 <acc_diagnostic_log_set_parameter>
 800a48a:	4982      	ldr	r1, [pc, #520]	; (800a694 <acc_cpd_dll_calibration+0x598>)
 800a48c:	4882      	ldr	r0, [pc, #520]	; (800a698 <acc_cpd_dll_calibration+0x59c>)
 800a48e:	f002 ffff 	bl	800d490 <acc_diagnostic_log_array>
 800a492:	2101      	movs	r1, #1
 800a494:	f10d 006a 	add.w	r0, sp, #106	; 0x6a
 800a498:	f003 f812 	bl	800d4c0 <acc_diagnostic_log_data_i16>
 800a49c:	497d      	ldr	r1, [pc, #500]	; (800a694 <acc_cpd_dll_calibration+0x598>)
 800a49e:	487f      	ldr	r0, [pc, #508]	; (800a69c <acc_cpd_dll_calibration+0x5a0>)
 800a4a0:	f002 fff6 	bl	800d490 <acc_diagnostic_log_array>
 800a4a4:	2101      	movs	r1, #1
 800a4a6:	a81a      	add	r0, sp, #104	; 0x68
 800a4a8:	f003 f80a 	bl	800d4c0 <acc_diagnostic_log_data_i16>
 800a4ac:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
 800a4b0:	f2a3 431a 	subw	r3, r3, #1050	; 0x41a
 800a4b4:	b29b      	uxth	r3, r3
 800a4b6:	2bc8      	cmp	r3, #200	; 0xc8
 800a4b8:	f200 8330 	bhi.w	800ab1c <acc_cpd_dll_calibration+0xa20>
 800a4bc:	2302      	movs	r3, #2
 800a4be:	9315      	str	r3, [sp, #84]	; 0x54
 800a4c0:	211b      	movs	r1, #27
 800a4c2:	b28b      	uxth	r3, r1
 800a4c4:	461c      	mov	r4, r3
 800a4c6:	4876      	ldr	r0, [pc, #472]	; (800a6a0 <acc_cpd_dll_calibration+0x5a4>)
 800a4c8:	9318      	str	r3, [sp, #96]	; 0x60
 800a4ca:	f002 ffd9 	bl	800d480 <acc_diagnostic_log_set_parameter>
 800a4ce:	4620      	mov	r0, r4
 800a4d0:	aa26      	add	r2, sp, #152	; 0x98
 800a4d2:	217c      	movs	r1, #124	; 0x7c
 800a4d4:	f7fe fd7a 	bl	8008fcc <acc_dll_calculate_area_settings>
 800a4d8:	f899 301c 	ldrb.w	r3, [r9, #28]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	f000 8274 	beq.w	800a9ca <acc_cpd_dll_calibration+0x8ce>
 800a4e2:	f899 301d 	ldrb.w	r3, [r9, #29]
 800a4e6:	f083 0301 	eor.w	r3, r3, #1
 800a4ea:	f8b9 2010 	ldrh.w	r2, [r9, #16]
 800a4ee:	f8d9 100c 	ldr.w	r1, [r9, #12]
 800a4f2:	f8bd b0ac 	ldrh.w	fp, [sp, #172]	; 0xac
 800a4f6:	f8bd c098 	ldrh.w	ip, [sp, #152]	; 0x98
 800a4fa:	f8bd 709a 	ldrh.w	r7, [sp, #154]	; 0x9a
 800a4fe:	f8bd 609e 	ldrh.w	r6, [sp, #158]	; 0x9e
 800a502:	f8bd 50a0 	ldrh.w	r5, [sp, #160]	; 0xa0
 800a506:	e9d9 4001 	ldrd	r4, r0, [r9, #4]
 800a50a:	e9d9 8e05 	ldrd	r8, lr, [r9, #20]
 800a50e:	f8aa 200c 	strh.w	r2, [sl, #12]
 800a512:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a514:	f8ca 2018 	str.w	r2, [sl, #24]
 800a518:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a51a:	f8ca 1008 	str.w	r1, [sl, #8]
 800a51e:	f8ca 201c 	str.w	r2, [sl, #28]
 800a522:	f8bd 10aa 	ldrh.w	r1, [sp, #170]	; 0xaa
 800a526:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a528:	f8ca 4000 	str.w	r4, [sl]
 800a52c:	e9ca 8e04 	strd	r8, lr, [sl, #16]
 800a530:	f8bd 40a4 	ldrh.w	r4, [sp, #164]	; 0xa4
 800a534:	f8ca 0004 	str.w	r0, [sl, #4]
 800a538:	f04f 0e01 	mov.w	lr, #1
 800a53c:	f8bd 00a6 	ldrh.w	r0, [sp, #166]	; 0xa6
 800a540:	f8ca 2020 	str.w	r2, [sl, #32]
 800a544:	2200      	movs	r2, #0
 800a546:	f8ca c028 	str.w	ip, [sl, #40]	; 0x28
 800a54a:	f8ca 702c 	str.w	r7, [sl, #44]	; 0x2c
 800a54e:	f04f 0c06 	mov.w	ip, #6
 800a552:	2703      	movs	r7, #3
 800a554:	f8ca 6030 	str.w	r6, [sl, #48]	; 0x30
 800a558:	f8ca 5034 	str.w	r5, [sl, #52]	; 0x34
 800a55c:	f06f 0601 	mvn.w	r6, #1
 800a560:	f8ca 4038 	str.w	r4, [sl, #56]	; 0x38
 800a564:	f8ca 003c 	str.w	r0, [sl, #60]	; 0x3c
 800a568:	240f      	movs	r4, #15
 800a56a:	e9ca 1b10 	strd	r1, fp, [sl, #64]	; 0x40
 800a56e:	2007      	movs	r0, #7
 800a570:	e9ca 2e12 	strd	r2, lr, [sl, #72]	; 0x48
 800a574:	e9ca e216 	strd	lr, r2, [sl, #88]	; 0x58
 800a578:	e9ca 2214 	strd	r2, r2, [sl, #80]	; 0x50
 800a57c:	e9ca 2218 	strd	r2, r2, [sl, #96]	; 0x60
 800a580:	e9ca 2227 	strd	r2, r2, [sl, #156]	; 0x9c
 800a584:	f8ca 2068 	str.w	r2, [sl, #104]	; 0x68
 800a588:	f8ca 2078 	str.w	r2, [sl, #120]	; 0x78
 800a58c:	f8ca 2084 	str.w	r2, [sl, #132]	; 0x84
 800a590:	f8aa 208c 	strh.w	r2, [sl, #140]	; 0x8c
 800a594:	2516      	movs	r5, #22
 800a596:	2200      	movs	r2, #0
 800a598:	e9ca c724 	strd	ip, r7, [sl, #144]	; 0x90
 800a59c:	e9ca ee1c 	strd	lr, lr, [sl, #112]	; 0x70
 800a5a0:	e9ca 541f 	strd	r5, r4, [sl, #124]	; 0x7c
 800a5a4:	f8ca e0a4 	str.w	lr, [sl, #164]	; 0xa4
 800a5a8:	f8ca 20a8 	str.w	r2, [sl, #168]	; 0xa8
 800a5ac:	f88a e0ad 	strb.w	lr, [sl, #173]	; 0xad
 800a5b0:	f8ca 306c 	str.w	r3, [sl, #108]	; 0x6c
 800a5b4:	f8ca 6098 	str.w	r6, [sl, #152]	; 0x98
 800a5b8:	f8ca 0088 	str.w	r0, [sl, #136]	; 0x88
 800a5bc:	f7fb ffae 	bl	800651c <acc_rss_integration_get_sensor_reference_frequency>
 800a5c0:	f8b9 301e 	ldrh.w	r3, [r9, #30]
 800a5c4:	f899 201c 	ldrb.w	r2, [r9, #28]
 800a5c8:	ed8a 0a2c 	vstr	s0, [sl, #176]	; 0xb0
 800a5cc:	3b01      	subs	r3, #1
 800a5ce:	e9ca 232d 	strd	r2, r3, [sl, #180]	; 0xb4
 800a5d2:	f9bd 3068 	ldrsh.w	r3, [sp, #104]	; 0x68
 800a5d6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a5d8:	f04f 0100 	mov.w	r1, #0
 800a5dc:	f9bd 306a 	ldrsh.w	r3, [sp, #106]	; 0x6a
 800a5e0:	f88a 10ac 	strb.w	r1, [sl, #172]	; 0xac
 800a5e4:	9314      	str	r3, [sp, #80]	; 0x50
 800a5e6:	a926      	add	r1, sp, #152	; 0x98
 800a5e8:	f89a 308c 	ldrb.w	r3, [sl, #140]	; 0x8c
 800a5ec:	9308      	str	r3, [sp, #32]
 800a5ee:	4650      	mov	r0, sl
 800a5f0:	f8d9 b000 	ldr.w	fp, [r9]
 800a5f4:	f8da 4094 	ldr.w	r4, [sl, #148]	; 0x94
 800a5f8:	f8da 60a4 	ldr.w	r6, [sl, #164]	; 0xa4
 800a5fc:	f8da 7080 	ldr.w	r7, [sl, #128]	; 0x80
 800a600:	f001 fc38 	bl	800be74 <acc_cpd_linear_sweep_get_info>
 800a604:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800a606:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800a608:	429a      	cmp	r2, r3
 800a60a:	f000 81fb 	beq.w	800aa04 <acc_cpd_dll_calibration+0x908>
 800a60e:	f899 301c 	ldrb.w	r3, [r9, #28]
 800a612:	2b00      	cmp	r3, #0
 800a614:	f000 81db 	beq.w	800a9ce <acc_cpd_dll_calibration+0x8d2>
 800a618:	f8b9 301e 	ldrh.w	r3, [r9, #30]
 800a61c:	ee0c 3a90 	vmov	s25, r3
 800a620:	ee1c 2a10 	vmov	r2, s24
 800a624:	ee1b 1a90 	vmov	r1, s23
 800a628:	4653      	mov	r3, sl
 800a62a:	4658      	mov	r0, fp
 800a62c:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800a62e:	f000 fe93 	bl	800b358 <acc_cpd_linear_sweep_load_program>
 800a632:	2800      	cmp	r0, #0
 800a634:	f000 81b9 	beq.w	800a9aa <acc_cpd_dll_calibration+0x8ae>
 800a638:	f899 301c 	ldrb.w	r3, [r9, #28]
 800a63c:	930a      	str	r3, [sp, #40]	; 0x28
 800a63e:	b113      	cbz	r3, 800a646 <acc_cpd_dll_calibration+0x54a>
 800a640:	f899 301d 	ldrb.w	r3, [r9, #29]
 800a644:	930a      	str	r3, [sp, #40]	; 0x28
 800a646:	ee07 6a90 	vmov	s15, r6
 800a64a:	eddf 6a16 	vldr	s13, [pc, #88]	; 800a6a4 <acc_cpd_dll_calibration+0x5a8>
 800a64e:	ed9f ba16 	vldr	s22, [pc, #88]	; 800a6a8 <acc_cpd_dll_calibration+0x5ac>
 800a652:	eddf aa16 	vldr	s21, [pc, #88]	; 800a6ac <acc_cpd_dll_calibration+0x5b0>
 800a656:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a65a:	3401      	adds	r4, #1
 800a65c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a660:	b2a4      	uxth	r4, r4
 800a662:	e029      	b.n	800a6b8 <acc_cpd_dll_calibration+0x5bc>
 800a664:	08014858 	.word	0x08014858
 800a668:	08014888 	.word	0x08014888
 800a66c:	20000640 	.word	0x20000640
 800a670:	080147b8 	.word	0x080147b8
 800a674:	080144b0 	.word	0x080144b0
 800a678:	0801481c 	.word	0x0801481c
 800a67c:	08014524 	.word	0x08014524
 800a680:	08018598 	.word	0x08018598
 800a684:	08018590 	.word	0x08018590
 800a688:	cccccccd 	.word	0xcccccccd
 800a68c:	0801459c 	.word	0x0801459c
 800a690:	08014518 	.word	0x08014518
 800a694:	080145b4 	.word	0x080145b4
 800a698:	080145d8 	.word	0x080145d8
 800a69c:	080145e0 	.word	0x080145e0
 800a6a0:	0801450c 	.word	0x0801450c
 800a6a4:	42f80000 	.word	0x42f80000
 800a6a8:	42640000 	.word	0x42640000
 800a6ac:	42172c98 	.word	0x42172c98
 800a6b0:	402ca8ad 	.word	0x402ca8ad
 800a6b4:	447a0000 	.word	0x447a0000
 800a6b8:	ee1c 2a90 	vmov	r2, s25
 800a6bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6c0:	ee17 3a90 	vmov	r3, s15
 800a6c4:	b29b      	uxth	r3, r3
 800a6c6:	fb04 f303 	mul.w	r3, r4, r3
 800a6ca:	441d      	add	r5, r3
 800a6cc:	18aa      	adds	r2, r5, r2
 800a6ce:	9317      	str	r3, [sp, #92]	; 0x5c
 800a6d0:	920b      	str	r2, [sp, #44]	; 0x2c
 800a6d2:	ea4f 0843 	mov.w	r8, r3, lsl #1
 800a6d6:	4658      	mov	r0, fp
 800a6d8:	f001 fb76 	bl	800bdc8 <acc_cpd_linear_sweep_run_program>
 800a6dc:	2800      	cmp	r0, #0
 800a6de:	f000 8164 	beq.w	800a9aa <acc_cpd_dll_calibration+0x8ae>
 800a6e2:	ed1f aa0d 	vldr	s20, [pc, #-52]	; 800a6b0 <acc_cpd_dll_calibration+0x5b4>
 800a6e6:	ed5f 9a0d 	vldr	s19, [pc, #-52]	; 800a6b4 <acc_cpd_dll_calibration+0x5b8>
 800a6ea:	2600      	movs	r6, #0
 800a6ec:	ab1c      	add	r3, sp, #112	; 0x70
 800a6ee:	2264      	movs	r2, #100	; 0x64
 800a6f0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800a6f4:	4658      	mov	r0, fp
 800a6f6:	f7fd ff2f 	bl	8008558 <acc_sensor_protocol_r2_wait_for_event>
 800a6fa:	2800      	cmp	r0, #0
 800a6fc:	f000 8155 	beq.w	800a9aa <acc_cpd_dll_calibration+0x8ae>
 800a700:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
 800a704:	2b06      	cmp	r3, #6
 800a706:	f040 8150 	bne.w	800a9aa <acc_cpd_dll_calibration+0x8ae>
 800a70a:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 800a70e:	ee1c 0a10 	vmov	r0, s24
 800a712:	f7fd faeb 	bl	8007cec <acc_sensor_r2_buffer_processed_verify_size>
 800a716:	2800      	cmp	r0, #0
 800a718:	f000 813d 	beq.w	800a996 <acc_cpd_dll_calibration+0x89a>
 800a71c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a71e:	ee1b 1a90 	vmov	r1, s23
 800a722:	4658      	mov	r0, fp
 800a724:	f7fe f862 	bl	80087ec <acc_sensor_protocol_r2_transfer_data>
 800a728:	4604      	mov	r4, r0
 800a72a:	2800      	cmp	r0, #0
 800a72c:	f000 813d 	beq.w	800a9aa <acc_cpd_dll_calibration+0x8ae>
 800a730:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800a732:	f899 301c 	ldrb.w	r3, [r9, #28]
 800a736:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 800a73a:	b1fb      	cbz	r3, 800a77c <acc_cpd_dll_calibration+0x680>
 800a73c:	ee1c 3a90 	vmov	r3, s25
 800a740:	eb05 0208 	add.w	r2, r5, r8
 800a744:	4659      	mov	r1, fp
 800a746:	2001      	movs	r0, #1
 800a748:	920c      	str	r2, [sp, #48]	; 0x30
 800a74a:	f7fe faa3 	bl	8008c94 <acc_probes_execute_uint16>
 800a74e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a750:	ee1c 1a90 	vmov	r1, s25
 800a754:	4610      	mov	r0, r2
 800a756:	f7fe f987 	bl	8008a68 <acc_alg_cca_u16_calculate>
 800a75a:	eeb4 0acb 	vcmpe.f32	s0, s22
 800a75e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a764:	bfcc      	ite	gt
 800a766:	2301      	movgt	r3, #1
 800a768:	2300      	movle	r3, #0
 800a76a:	ed82 0a07 	vstr	s0, [r2, #28]
 800a76e:	7653      	strb	r3, [r2, #25]
 800a770:	f300 8237 	bgt.w	800abe2 <acc_cpd_dll_calibration+0xae6>
 800a774:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a776:	2b00      	cmp	r3, #0
 800a778:	f040 80f1 	bne.w	800a95e <acc_cpd_dll_calibration+0x862>
 800a77c:	eeb0 0a6a 	vmov.f32	s0, s21
 800a780:	4641      	mov	r1, r8
 800a782:	4628      	mov	r0, r5
 800a784:	f002 f85c 	bl	800c840 <acc_alg_basic_saturation_check_u16>
 800a788:	2800      	cmp	r0, #0
 800a78a:	f040 80c6 	bne.w	800a91a <acc_cpd_dll_calibration+0x81e>
 800a78e:	2f00      	cmp	r7, #0
 800a790:	f040 814b 	bne.w	800aa2a <acc_cpd_dll_calibration+0x92e>
 800a794:	9b08      	ldr	r3, [sp, #32]
 800a796:	2b00      	cmp	r3, #0
 800a798:	f040 81a8 	bne.w	800aaec <acc_cpd_dll_calibration+0x9f0>
 800a79c:	f7fb ff6e 	bl	800667c <acc_rss_integration_log_level>
 800a7a0:	2803      	cmp	r0, #3
 800a7a2:	d905      	bls.n	800a7b0 <acc_cpd_dll_calibration+0x6b4>
 800a7a4:	4bbf      	ldr	r3, [pc, #764]	; (800aaa4 <acc_cpd_dll_calibration+0x9a8>)
 800a7a6:	4ac0      	ldr	r2, [pc, #768]	; (800aaa8 <acc_cpd_dll_calibration+0x9ac>)
 800a7a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7aa:	49c0      	ldr	r1, [pc, #768]	; (800aaac <acc_cpd_dll_calibration+0x9b0>)
 800a7ac:	2004      	movs	r0, #4
 800a7ae:	4798      	blx	r3
 800a7b0:	eeb0 0a4a 	vmov.f32	s0, s20
 800a7b4:	4641      	mov	r1, r8
 800a7b6:	4628      	mov	r0, r5
 800a7b8:	f002 f842 	bl	800c840 <acc_alg_basic_saturation_check_u16>
 800a7bc:	2800      	cmp	r0, #0
 800a7be:	f040 81a2 	bne.w	800ab06 <acc_cpd_dll_calibration+0xa0a>
 800a7c2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800a7c4:	f8da 2020 	ldr.w	r2, [sl, #32]
 800a7c8:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 800a7cc:	49b8      	ldr	r1, [pc, #736]	; (800aab0 <acc_cpd_dll_calibration+0x9b4>)
 800a7ce:	9829      	ldr	r0, [sp, #164]	; 0xa4
 800a7d0:	ee06 3a90 	vmov	s13, r3
 800a7d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7d6:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 800a7da:	615f      	str	r7, [r3, #20]
 800a7dc:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800a7e0:	f831 3012 	ldrh.w	r3, [r1, r2, lsl #1]
 800a7e4:	49b3      	ldr	r1, [pc, #716]	; (800aab4 <acc_cpd_dll_calibration+0x9b8>)
 800a7e6:	ee66 6a89 	vmul.f32	s13, s13, s18
 800a7ea:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 800a7ee:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800a7f2:	ee76 6ae5 	vsub.f32	s13, s13, s11
 800a7f6:	1a5b      	subs	r3, r3, r1
 800a7f8:	b21b      	sxth	r3, r3
 800a7fa:	ee07 0a90 	vmov	s15, r0
 800a7fe:	ee08 3a10 	vmov	s16, r3
 800a802:	e9dd 0208 	ldrd	r0, r2, [sp, #32]
 800a806:	ee66 6aa8 	vmul.f32	s13, s13, s17
 800a80a:	eeb8 6ac8 	vcvt.f32.s32	s12, s16
 800a80e:	ee66 6aa9 	vmul.f32	s13, s13, s19
 800a812:	7610      	strb	r0, [r2, #24]
 800a814:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800a816:	49a8      	ldr	r1, [pc, #672]	; (800aab8 <acc_cpd_dll_calibration+0x9bc>)
 800a818:	f834 3012 	ldrh.w	r3, [r4, r2, lsl #1]
 800a81c:	48a7      	ldr	r0, [pc, #668]	; (800aabc <acc_cpd_dll_calibration+0x9c0>)
 800a81e:	ee76 6a66 	vsub.f32	s13, s12, s13
 800a822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a826:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 800a82a:	ee07 3a10 	vmov	s14, r3
 800a82e:	ee67 7a89 	vmul.f32	s15, s15, s18
 800a832:	ee16 3a90 	vmov	r3, s13
 800a836:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800a83a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800a83e:	b21b      	sxth	r3, r3
 800a840:	ee06 3a90 	vmov	s13, r3
 800a844:	ee27 7a09 	vmul.f32	s14, s14, s18
 800a848:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800a84c:	ee37 7a65 	vsub.f32	s14, s14, s11
 800a850:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800a854:	ee67 7aa9 	vmul.f32	s15, s15, s19
 800a858:	ee27 7a28 	vmul.f32	s14, s14, s17
 800a85c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a860:	ee27 7a29 	vmul.f32	s14, s14, s19
 800a864:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a868:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800a86c:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
 800a870:	ee17 3a90 	vmov	r3, s15
 800a874:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
 800a878:	ee17 3a10 	vmov	r3, s14
 800a87c:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
 800a880:	f002 fe06 	bl	800d490 <acc_diagnostic_log_array>
 800a884:	2101      	movs	r1, #1
 800a886:	a81b      	add	r0, sp, #108	; 0x6c
 800a888:	f002 fe1a 	bl	800d4c0 <acc_diagnostic_log_data_i16>
 800a88c:	498a      	ldr	r1, [pc, #552]	; (800aab8 <acc_cpd_dll_calibration+0x9bc>)
 800a88e:	488b      	ldr	r0, [pc, #556]	; (800aabc <acc_cpd_dll_calibration+0x9c0>)
 800a890:	f002 fdfe 	bl	800d490 <acc_diagnostic_log_array>
 800a894:	2101      	movs	r1, #1
 800a896:	f10d 006e 	add.w	r0, sp, #110	; 0x6e
 800a89a:	f002 fe11 	bl	800d4c0 <acc_diagnostic_log_data_i16>
 800a89e:	4986      	ldr	r1, [pc, #536]	; (800aab8 <acc_cpd_dll_calibration+0x9bc>)
 800a8a0:	4887      	ldr	r0, [pc, #540]	; (800aac0 <acc_cpd_dll_calibration+0x9c4>)
 800a8a2:	f002 fdf5 	bl	800d490 <acc_diagnostic_log_array>
 800a8a6:	2101      	movs	r1, #1
 800a8a8:	a81c      	add	r0, sp, #112	; 0x70
 800a8aa:	f002 fe09 	bl	800d4c0 <acc_diagnostic_log_data_i16>
 800a8ae:	f8bd 206c 	ldrh.w	r2, [sp, #108]	; 0x6c
 800a8b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a8b4:	1a9b      	subs	r3, r3, r2
 800a8b6:	b21b      	sxth	r3, r3
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	bfb8      	it	lt
 800a8bc:	425b      	neglt	r3, r3
 800a8be:	b21b      	sxth	r3, r3
 800a8c0:	2b64      	cmp	r3, #100	; 0x64
 800a8c2:	f77f ad0f 	ble.w	800a2e4 <acc_cpd_dll_calibration+0x1e8>
 800a8c6:	2e02      	cmp	r6, #2
 800a8c8:	d00f      	beq.n	800a8ea <acc_cpd_dll_calibration+0x7ee>
 800a8ca:	f7fb fed7 	bl	800667c <acc_rss_integration_log_level>
 800a8ce:	2803      	cmp	r0, #3
 800a8d0:	d906      	bls.n	800a8e0 <acc_cpd_dll_calibration+0x7e4>
 800a8d2:	4b74      	ldr	r3, [pc, #464]	; (800aaa4 <acc_cpd_dll_calibration+0x9a8>)
 800a8d4:	4a7b      	ldr	r2, [pc, #492]	; (800aac4 <acc_cpd_dll_calibration+0x9c8>)
 800a8d6:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800a8d8:	4974      	ldr	r1, [pc, #464]	; (800aaac <acc_cpd_dll_calibration+0x9b0>)
 800a8da:	4633      	mov	r3, r6
 800a8dc:	2004      	movs	r0, #4
 800a8de:	47a0      	blx	r4
 800a8e0:	4658      	mov	r0, fp
 800a8e2:	3601      	adds	r6, #1
 800a8e4:	f7fd fdaa 	bl	800843c <acc_sensor_protocol_r2_ack_event>
 800a8e8:	e700      	b.n	800a6ec <acc_cpd_dll_calibration+0x5f0>
 800a8ea:	f7fb fec7 	bl	800667c <acc_rss_integration_log_level>
 800a8ee:	2803      	cmp	r0, #3
 800a8f0:	d92f      	bls.n	800a952 <acc_cpd_dll_calibration+0x856>
 800a8f2:	4b6c      	ldr	r3, [pc, #432]	; (800aaa4 <acc_cpd_dll_calibration+0x9a8>)
 800a8f4:	4a74      	ldr	r2, [pc, #464]	; (800aac8 <acc_cpd_dll_calibration+0x9cc>)
 800a8f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8f8:	496c      	ldr	r1, [pc, #432]	; (800aaac <acc_cpd_dll_calibration+0x9b0>)
 800a8fa:	2004      	movs	r0, #4
 800a8fc:	4798      	blx	r3
 800a8fe:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800a902:	4658      	mov	r0, fp
 800a904:	f7fd fec0 	bl	8008688 <acc_sensor_protocol_r2_stop>
 800a908:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a90a:	2b01      	cmp	r3, #1
 800a90c:	f04f 0100 	mov.w	r1, #0
 800a910:	f43f ad1b 	beq.w	800a34a <acc_cpd_dll_calibration+0x24e>
 800a914:	2301      	movs	r3, #1
 800a916:	9315      	str	r3, [sp, #84]	; 0x54
 800a918:	e5d3      	b.n	800a4c2 <acc_cpd_dll_calibration+0x3c6>
 800a91a:	eeb0 0a4a 	vmov.f32	s0, s20
 800a91e:	4641      	mov	r1, r8
 800a920:	4628      	mov	r0, r5
 800a922:	f001 ff8d 	bl	800c840 <acc_alg_basic_saturation_check_u16>
 800a926:	2800      	cmp	r0, #0
 800a928:	f43f af4b 	beq.w	800a7c2 <acc_cpd_dll_calibration+0x6c6>
 800a92c:	2f0f      	cmp	r7, #15
 800a92e:	f040 80ea 	bne.w	800ab06 <acc_cpd_dll_calibration+0xa0a>
 800a932:	9b08      	ldr	r3, [sp, #32]
 800a934:	2b00      	cmp	r3, #0
 800a936:	f000 80fd 	beq.w	800ab34 <acc_cpd_dll_calibration+0xa38>
 800a93a:	f7fb fe9f 	bl	800667c <acc_rss_integration_log_level>
 800a93e:	2803      	cmp	r0, #3
 800a940:	f67f af3f 	bls.w	800a7c2 <acc_cpd_dll_calibration+0x6c6>
 800a944:	4b57      	ldr	r3, [pc, #348]	; (800aaa4 <acc_cpd_dll_calibration+0x9a8>)
 800a946:	4a61      	ldr	r2, [pc, #388]	; (800aacc <acc_cpd_dll_calibration+0x9d0>)
 800a948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a94a:	4958      	ldr	r1, [pc, #352]	; (800aaac <acc_cpd_dll_calibration+0x9b0>)
 800a94c:	2004      	movs	r0, #4
 800a94e:	4798      	blx	r3
 800a950:	e737      	b.n	800a7c2 <acc_cpd_dll_calibration+0x6c6>
 800a952:	4658      	mov	r0, fp
 800a954:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800a958:	f7fd fe96 	bl	8008688 <acc_sensor_protocol_r2_stop>
 800a95c:	e4ef      	b.n	800a33e <acc_cpd_dll_calibration+0x242>
 800a95e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800a962:	4658      	mov	r0, fp
 800a964:	f7fd fe90 	bl	8008688 <acc_sensor_protocol_r2_stop>
 800a968:	4658      	mov	r0, fp
 800a96a:	f7fd fd55 	bl	8008418 <acc_sensor_protocol_r2_is_sensor_running>
 800a96e:	900a      	str	r0, [sp, #40]	; 0x28
 800a970:	bb10      	cbnz	r0, 800a9b8 <acc_cpd_dll_calibration+0x8bc>
 800a972:	f002 fdc5 	bl	800d500 <acc_image_a111_r2c_sweep_get>
 800a976:	900c      	str	r0, [sp, #48]	; 0x30
 800a978:	f002 fdc6 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800a97c:	4a54      	ldr	r2, [pc, #336]	; (800aad0 <acc_cpd_dll_calibration+0x9d4>)
 800a97e:	9202      	str	r2, [sp, #8]
 800a980:	2401      	movs	r4, #1
 800a982:	2272      	movs	r2, #114	; 0x72
 800a984:	e9cd 2400 	strd	r2, r4, [sp]
 800a988:	4603      	mov	r3, r0
 800a98a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a98c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a98e:	4658      	mov	r0, fp
 800a990:	f002 fcde 	bl	800d350 <acc_confprogram_live_patch>
 800a994:	e69f      	b.n	800a6d6 <acc_cpd_dll_calibration+0x5da>
 800a996:	4b43      	ldr	r3, [pc, #268]	; (800aaa4 <acc_cpd_dll_calibration+0x9a8>)
 800a998:	4944      	ldr	r1, [pc, #272]	; (800aaac <acc_cpd_dll_calibration+0x9b0>)
 800a99a:	4a4e      	ldr	r2, [pc, #312]	; (800aad4 <acc_cpd_dll_calibration+0x9d8>)
 800a99c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a99e:	4798      	blx	r3
 800a9a0:	4658      	mov	r0, fp
 800a9a2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800a9a6:	f7fd fe6f 	bl	8008688 <acc_sensor_protocol_r2_stop>
 800a9aa:	2400      	movs	r4, #0
 800a9ac:	4620      	mov	r0, r4
 800a9ae:	b047      	add	sp, #284	; 0x11c
 800a9b0:	ecbd 8b0a 	vpop	{d8-d12}
 800a9b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9b8:	4b3a      	ldr	r3, [pc, #232]	; (800aaa4 <acc_cpd_dll_calibration+0x9a8>)
 800a9ba:	4a47      	ldr	r2, [pc, #284]	; (800aad8 <acc_cpd_dll_calibration+0x9dc>)
 800a9bc:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800a9be:	493b      	ldr	r1, [pc, #236]	; (800aaac <acc_cpd_dll_calibration+0x9b0>)
 800a9c0:	46d9      	mov	r9, fp
 800a9c2:	464b      	mov	r3, r9
 800a9c4:	2000      	movs	r0, #0
 800a9c6:	47a0      	blx	r4
 800a9c8:	e7ef      	b.n	800a9aa <acc_cpd_dll_calibration+0x8ae>
 800a9ca:	2301      	movs	r3, #1
 800a9cc:	e58d      	b.n	800a4ea <acc_cpd_dll_calibration+0x3ee>
 800a9ce:	ee0c 3a90 	vmov	s25, r3
 800a9d2:	e625      	b.n	800a620 <acc_cpd_dll_calibration+0x524>
 800a9d4:	f7fb fe52 	bl	800667c <acc_rss_integration_log_level>
 800a9d8:	2803      	cmp	r0, #3
 800a9da:	f67f acc3 	bls.w	800a364 <acc_cpd_dll_calibration+0x268>
 800a9de:	4b31      	ldr	r3, [pc, #196]	; (800aaa4 <acc_cpd_dll_calibration+0x9a8>)
 800a9e0:	4a3e      	ldr	r2, [pc, #248]	; (800aadc <acc_cpd_dll_calibration+0x9e0>)
 800a9e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9e4:	4931      	ldr	r1, [pc, #196]	; (800aaac <acc_cpd_dll_calibration+0x9b0>)
 800a9e6:	2004      	movs	r0, #4
 800a9e8:	4798      	blx	r3
 800a9ea:	e4bb      	b.n	800a364 <acc_cpd_dll_calibration+0x268>
 800a9ec:	464b      	mov	r3, r9
 800a9ee:	46d1      	mov	r9, sl
 800a9f0:	469a      	mov	sl, r3
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	930e      	str	r3, [sp, #56]	; 0x38
 800a9f6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a9f8:	2b01      	cmp	r3, #1
 800a9fa:	d0d6      	beq.n	800a9aa <acc_cpd_dll_calibration+0x8ae>
 800a9fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a9fe:	9319      	str	r3, [sp, #100]	; 0x64
 800aa00:	f7ff bbc6 	b.w	800a190 <acc_cpd_dll_calibration+0x94>
 800aa04:	4b27      	ldr	r3, [pc, #156]	; (800aaa4 <acc_cpd_dll_calibration+0x9a8>)
 800aa06:	4a36      	ldr	r2, [pc, #216]	; (800aae0 <acc_cpd_dll_calibration+0x9e4>)
 800aa08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa0a:	4928      	ldr	r1, [pc, #160]	; (800aaac <acc_cpd_dll_calibration+0x9b0>)
 800aa0c:	2000      	movs	r0, #0
 800aa0e:	4798      	blx	r3
 800aa10:	e7cb      	b.n	800a9aa <acc_cpd_dll_calibration+0x8ae>
 800aa12:	4b24      	ldr	r3, [pc, #144]	; (800aaa4 <acc_cpd_dll_calibration+0x9a8>)
 800aa14:	4a33      	ldr	r2, [pc, #204]	; (800aae4 <acc_cpd_dll_calibration+0x9e8>)
 800aa16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa18:	4924      	ldr	r1, [pc, #144]	; (800aaac <acc_cpd_dll_calibration+0x9b0>)
 800aa1a:	4620      	mov	r0, r4
 800aa1c:	4798      	blx	r3
 800aa1e:	4620      	mov	r0, r4
 800aa20:	b047      	add	sp, #284	; 0x11c
 800aa22:	ecbd 8b0a 	vpop	{d8-d12}
 800aa26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa2a:	2f08      	cmp	r7, #8
 800aa2c:	bf38      	it	cc
 800aa2e:	2708      	movcc	r7, #8
 800aa30:	f7fb fe24 	bl	800667c <acc_rss_integration_log_level>
 800aa34:	2803      	cmp	r0, #3
 800aa36:	f1a7 0708 	sub.w	r7, r7, #8
 800aa3a:	d906      	bls.n	800aa4a <acc_cpd_dll_calibration+0x94e>
 800aa3c:	4b19      	ldr	r3, [pc, #100]	; (800aaa4 <acc_cpd_dll_calibration+0x9a8>)
 800aa3e:	4a2a      	ldr	r2, [pc, #168]	; (800aae8 <acc_cpd_dll_calibration+0x9ec>)
 800aa40:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800aa42:	491a      	ldr	r1, [pc, #104]	; (800aaac <acc_cpd_dll_calibration+0x9b0>)
 800aa44:	463b      	mov	r3, r7
 800aa46:	2004      	movs	r0, #4
 800aa48:	47a0      	blx	r4
 800aa4a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800aa4e:	4658      	mov	r0, fp
 800aa50:	f7fd fe1a 	bl	8008688 <acc_sensor_protocol_r2_stop>
 800aa54:	4658      	mov	r0, fp
 800aa56:	f7fd fcdf 	bl	8008418 <acc_sensor_protocol_r2_is_sensor_running>
 800aa5a:	4602      	mov	r2, r0
 800aa5c:	2800      	cmp	r0, #0
 800aa5e:	d1ab      	bne.n	800a9b8 <acc_cpd_dll_calibration+0x8bc>
 800aa60:	9210      	str	r2, [sp, #64]	; 0x40
 800aa62:	f002 fd4d 	bl	800d500 <acc_image_a111_r2c_sweep_get>
 800aa66:	900c      	str	r0, [sp, #48]	; 0x30
 800aa68:	f002 fd4e 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800aa6c:	4c18      	ldr	r4, [pc, #96]	; (800aad0 <acc_cpd_dll_calibration+0x9d4>)
 800aa6e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800aa70:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800aa72:	2544      	movs	r5, #68	; 0x44
 800aa74:	4603      	mov	r3, r0
 800aa76:	9500      	str	r5, [sp, #0]
 800aa78:	4658      	mov	r0, fp
 800aa7a:	e9cd 7401 	strd	r7, r4, [sp, #4]
 800aa7e:	f002 fc67 	bl	800d350 <acc_confprogram_live_patch>
 800aa82:	f002 fd3d 	bl	800d500 <acc_image_a111_r2c_sweep_get>
 800aa86:	900c      	str	r0, [sp, #48]	; 0x30
 800aa88:	f002 fd3e 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800aa8c:	2542      	movs	r5, #66	; 0x42
 800aa8e:	9a08      	ldr	r2, [sp, #32]
 800aa90:	9201      	str	r2, [sp, #4]
 800aa92:	4603      	mov	r3, r0
 800aa94:	990c      	ldr	r1, [sp, #48]	; 0x30
 800aa96:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800aa98:	9402      	str	r4, [sp, #8]
 800aa9a:	9500      	str	r5, [sp, #0]
 800aa9c:	4658      	mov	r0, fp
 800aa9e:	f002 fc57 	bl	800d350 <acc_confprogram_live_patch>
 800aaa2:	e618      	b.n	800a6d6 <acc_cpd_dll_calibration+0x5da>
 800aaa4:	20000640 	.word	0x20000640
 800aaa8:	08014658 	.word	0x08014658
 800aaac:	080144b0 	.word	0x080144b0
 800aab0:	08018598 	.word	0x08018598
 800aab4:	08018590 	.word	0x08018590
 800aab8:	080145b4 	.word	0x080145b4
 800aabc:	08014728 	.word	0x08014728
 800aac0:	08014738 	.word	0x08014738
 800aac4:	08014748 	.word	0x08014748
 800aac8:	08014770 	.word	0x08014770
 800aacc:	080146ac 	.word	0x080146ac
 800aad0:	08007c21 	.word	0x08007c21
 800aad4:	08014398 	.word	0x08014398
 800aad8:	08014324 	.word	0x08014324
 800aadc:	08014574 	.word	0x08014574
 800aae0:	08014610 	.word	0x08014610
 800aae4:	080135a4 	.word	0x080135a4
 800aae8:	08014678 	.word	0x08014678
 800aaec:	f7fb fdc6 	bl	800667c <acc_rss_integration_log_level>
 800aaf0:	2803      	cmp	r0, #3
 800aaf2:	d92d      	bls.n	800ab50 <acc_cpd_dll_calibration+0xa54>
 800aaf4:	4b3e      	ldr	r3, [pc, #248]	; (800abf0 <acc_cpd_dll_calibration+0xaf4>)
 800aaf6:	4a3f      	ldr	r2, [pc, #252]	; (800abf4 <acc_cpd_dll_calibration+0xaf8>)
 800aaf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aafa:	493f      	ldr	r1, [pc, #252]	; (800abf8 <acc_cpd_dll_calibration+0xafc>)
 800aafc:	9708      	str	r7, [sp, #32]
 800aafe:	2004      	movs	r0, #4
 800ab00:	4798      	blx	r3
 800ab02:	270f      	movs	r7, #15
 800ab04:	e7a1      	b.n	800aa4a <acc_cpd_dll_calibration+0x94e>
 800ab06:	3708      	adds	r7, #8
 800ab08:	2f0f      	cmp	r7, #15
 800ab0a:	bf28      	it	cs
 800ab0c:	270f      	movcs	r7, #15
 800ab0e:	f7fb fdb5 	bl	800667c <acc_rss_integration_log_level>
 800ab12:	2803      	cmp	r0, #3
 800ab14:	d999      	bls.n	800aa4a <acc_cpd_dll_calibration+0x94e>
 800ab16:	4b36      	ldr	r3, [pc, #216]	; (800abf0 <acc_cpd_dll_calibration+0xaf4>)
 800ab18:	4a38      	ldr	r2, [pc, #224]	; (800abfc <acc_cpd_dll_calibration+0xb00>)
 800ab1a:	e791      	b.n	800aa40 <acc_cpd_dll_calibration+0x944>
 800ab1c:	f7fb fdae 	bl	800667c <acc_rss_integration_log_level>
 800ab20:	2803      	cmp	r0, #3
 800ab22:	f67f ac1f 	bls.w	800a364 <acc_cpd_dll_calibration+0x268>
 800ab26:	4b32      	ldr	r3, [pc, #200]	; (800abf0 <acc_cpd_dll_calibration+0xaf4>)
 800ab28:	4a35      	ldr	r2, [pc, #212]	; (800ac00 <acc_cpd_dll_calibration+0xb04>)
 800ab2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab2c:	4932      	ldr	r1, [pc, #200]	; (800abf8 <acc_cpd_dll_calibration+0xafc>)
 800ab2e:	2004      	movs	r0, #4
 800ab30:	4798      	blx	r3
 800ab32:	e417      	b.n	800a364 <acc_cpd_dll_calibration+0x268>
 800ab34:	9008      	str	r0, [sp, #32]
 800ab36:	f7fb fda1 	bl	800667c <acc_rss_integration_log_level>
 800ab3a:	2803      	cmp	r0, #3
 800ab3c:	9b08      	ldr	r3, [sp, #32]
 800ab3e:	d90a      	bls.n	800ab56 <acc_cpd_dll_calibration+0xa5a>
 800ab40:	492b      	ldr	r1, [pc, #172]	; (800abf0 <acc_cpd_dll_calibration+0xaf4>)
 800ab42:	4a30      	ldr	r2, [pc, #192]	; (800ac04 <acc_cpd_dll_calibration+0xb08>)
 800ab44:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 800ab46:	492c      	ldr	r1, [pc, #176]	; (800abf8 <acc_cpd_dll_calibration+0xafc>)
 800ab48:	2004      	movs	r0, #4
 800ab4a:	47a0      	blx	r4
 800ab4c:	2700      	movs	r7, #0
 800ab4e:	e77c      	b.n	800aa4a <acc_cpd_dll_calibration+0x94e>
 800ab50:	9708      	str	r7, [sp, #32]
 800ab52:	270f      	movs	r7, #15
 800ab54:	e779      	b.n	800aa4a <acc_cpd_dll_calibration+0x94e>
 800ab56:	9308      	str	r3, [sp, #32]
 800ab58:	2700      	movs	r7, #0
 800ab5a:	e776      	b.n	800aa4a <acc_cpd_dll_calibration+0x94e>
 800ab5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ab5e:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
 800ab62:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800ab64:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
 800ab68:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800ab6a:	6008      	str	r0, [r1, #0]
 800ab6c:	818d      	strh	r5, [r1, #12]
 800ab6e:	81ca      	strh	r2, [r1, #14]
 800ab70:	820b      	strh	r3, [r1, #16]
 800ab72:	f7fb fd83 	bl	800667c <acc_rss_integration_log_level>
 800ab76:	2803      	cmp	r0, #3
 800ab78:	d909      	bls.n	800ab8e <acc_cpd_dll_calibration+0xa92>
 800ab7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab7c:	4a1c      	ldr	r2, [pc, #112]	; (800abf0 <acc_cpd_dll_calibration+0xaf4>)
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800ab82:	491d      	ldr	r1, [pc, #116]	; (800abf8 <acc_cpd_dll_calibration+0xafc>)
 800ab84:	9300      	str	r3, [sp, #0]
 800ab86:	4a20      	ldr	r2, [pc, #128]	; (800ac08 <acc_cpd_dll_calibration+0xb0c>)
 800ab88:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ab8a:	2004      	movs	r0, #4
 800ab8c:	47a8      	blx	r5
 800ab8e:	f7fb fd75 	bl	800667c <acc_rss_integration_log_level>
 800ab92:	2801      	cmp	r0, #1
 800ab94:	d91e      	bls.n	800abd4 <acc_cpd_dll_calibration+0xad8>
 800ab96:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ab98:	4a1c      	ldr	r2, [pc, #112]	; (800ac0c <acc_cpd_dll_calibration+0xb10>)
 800ab9a:	7e39      	ldrb	r1, [r7, #24]
 800ab9c:	f8df c074 	ldr.w	ip, [pc, #116]	; 800ac14 <acc_cpd_dll_calibration+0xb18>
 800aba0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aba2:	89b8      	ldrh	r0, [r7, #12]
 800aba4:	683e      	ldr	r6, [r7, #0]
 800aba6:	9300      	str	r3, [sp, #0]
 800aba8:	2900      	cmp	r1, #0
 800abaa:	bf14      	ite	ne
 800abac:	4663      	movne	r3, ip
 800abae:	4613      	moveq	r3, r2
 800abb0:	4d0f      	ldr	r5, [pc, #60]	; (800abf0 <acc_cpd_dll_calibration+0xaf4>)
 800abb2:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800abb6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800abba:	9306      	str	r3, [sp, #24]
 800abbc:	697b      	ldr	r3, [r7, #20]
 800abbe:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 800abc0:	9305      	str	r3, [sp, #20]
 800abc2:	e9cd 1203 	strd	r1, r2, [sp, #12]
 800abc6:	e9cd 6001 	strd	r6, r0, [sp, #4]
 800abca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800abcc:	4a10      	ldr	r2, [pc, #64]	; (800ac10 <acc_cpd_dll_calibration+0xb14>)
 800abce:	490a      	ldr	r1, [pc, #40]	; (800abf8 <acc_cpd_dll_calibration+0xafc>)
 800abd0:	2002      	movs	r0, #2
 800abd2:	47a8      	blx	r5
 800abd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abd6:	9911      	ldr	r1, [sp, #68]	; 0x44
 800abd8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800abda:	6059      	str	r1, [r3, #4]
 800abdc:	609a      	str	r2, [r3, #8]
 800abde:	f7ff bb30 	b.w	800a242 <acc_cpd_dll_calibration+0x146>
 800abe2:	4658      	mov	r0, fp
 800abe4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800abe8:	f7fd fd4e 	bl	8008688 <acc_sensor_protocol_r2_stop>
 800abec:	e6dd      	b.n	800a9aa <acc_cpd_dll_calibration+0x8ae>
 800abee:	bf00      	nop
 800abf0:	20000640 	.word	0x20000640
 800abf4:	08014630 	.word	0x08014630
 800abf8:	080144b0 	.word	0x080144b0
 800abfc:	080146f4 	.word	0x080146f4
 800ac00:	080145e8 	.word	0x080145e8
 800ac04:	080146cc 	.word	0x080146cc
 800ac08:	08014788 	.word	0x08014788
 800ac0c:	080144a8 	.word	0x080144a8
 800ac10:	080147ec 	.word	0x080147ec
 800ac14:	080144a0 	.word	0x080144a0

0800ac18 <acc_dll_check_direct_leakage>:
 800ac18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac1c:	4b44      	ldr	r3, [pc, #272]	; (800ad30 <acc_dll_check_direct_leakage+0x118>)
 800ac1e:	460d      	mov	r5, r1
 800ac20:	fba3 3101 	umull	r3, r1, r3, r1
 800ac24:	ea4f 0991 	mov.w	r9, r1, lsr #2
 800ac28:	f021 0403 	bic.w	r4, r1, #3
 800ac2c:	b084      	sub	sp, #16
 800ac2e:	464b      	mov	r3, r9
 800ac30:	eb04 0191 	add.w	r1, r4, r1, lsr #2
 800ac34:	4602      	mov	r2, r0
 800ac36:	4682      	mov	sl, r0
 800ac38:	f002 f9e2 	bl	800d000 <acc_alg_power_bins>
 800ac3c:	2d04      	cmp	r5, #4
 800ac3e:	d924      	bls.n	800ac8a <acc_dll_check_direct_leakage+0x72>
 800ac40:	f1aa 0602 	sub.w	r6, sl, #2
 800ac44:	2300      	movs	r3, #0
 800ac46:	4632      	mov	r2, r6
 800ac48:	461c      	mov	r4, r3
 800ac4a:	f832 1f02 	ldrh.w	r1, [r2, #2]!
 800ac4e:	3301      	adds	r3, #1
 800ac50:	428c      	cmp	r4, r1
 800ac52:	bf38      	it	cc
 800ac54:	460c      	movcc	r4, r1
 800ac56:	4599      	cmp	r9, r3
 800ac58:	d8f7      	bhi.n	800ac4a <acc_dll_check_direct_leakage+0x32>
 800ac5a:	4b36      	ldr	r3, [pc, #216]	; (800ad34 <acc_dll_check_direct_leakage+0x11c>)
 800ac5c:	2d0e      	cmp	r5, #14
 800ac5e:	fba3 3404 	umull	r3, r4, r3, r4
 800ac62:	f3c4 084f 	ubfx	r8, r4, #1, #16
 800ac66:	d910      	bls.n	800ac8a <acc_dll_check_direct_leakage+0x72>
 800ac68:	2702      	movs	r7, #2
 800ac6a:	f836 5f02 	ldrh.w	r5, [r6, #2]!
 800ac6e:	88b4      	ldrh	r4, [r6, #4]
 800ac70:	42a5      	cmp	r5, r4
 800ac72:	d902      	bls.n	800ac7a <acc_dll_check_direct_leakage+0x62>
 800ac74:	4623      	mov	r3, r4
 800ac76:	462c      	mov	r4, r5
 800ac78:	461d      	mov	r5, r3
 800ac7a:	4544      	cmp	r4, r8
 800ac7c:	d902      	bls.n	800ac84 <acc_dll_check_direct_leakage+0x6c>
 800ac7e:	ebb4 0fc5 	cmp.w	r4, r5, lsl #3
 800ac82:	d834      	bhi.n	800acee <acc_dll_check_direct_leakage+0xd6>
 800ac84:	3701      	adds	r7, #1
 800ac86:	45b9      	cmp	r9, r7
 800ac88:	d8ef      	bhi.n	800ac6a <acc_dll_check_direct_leakage+0x52>
 800ac8a:	ea4f 0559 	mov.w	r5, r9, lsr #1
 800ac8e:	f105 0308 	add.w	r3, r5, #8
 800ac92:	454b      	cmp	r3, r9
 800ac94:	d821      	bhi.n	800acda <acc_dll_check_direct_leakage+0xc2>
 800ac96:	f1aa 0202 	sub.w	r2, sl, #2
 800ac9a:	f10a 000e 	add.w	r0, sl, #14
 800ac9e:	2400      	movs	r4, #0
 800aca0:	f832 1f02 	ldrh.w	r1, [r2, #2]!
 800aca4:	4290      	cmp	r0, r2
 800aca6:	440c      	add	r4, r1
 800aca8:	d1fa      	bne.n	800aca0 <acc_dll_check_direct_leakage+0x88>
 800acaa:	1c6a      	adds	r2, r5, #1
 800acac:	4293      	cmp	r3, r2
 800acae:	bf34      	ite	cc
 800acb0:	2301      	movcc	r3, #1
 800acb2:	2308      	movcs	r3, #8
 800acb4:	442b      	add	r3, r5
 800acb6:	eb0a 0343 	add.w	r3, sl, r3, lsl #1
 800acba:	eb0a 0a45 	add.w	sl, sl, r5, lsl #1
 800acbe:	2500      	movs	r5, #0
 800acc0:	f83a 2b02 	ldrh.w	r2, [sl], #2
 800acc4:	4553      	cmp	r3, sl
 800acc6:	4415      	add	r5, r2
 800acc8:	d1fa      	bne.n	800acc0 <acc_dll_check_direct_leakage+0xa8>
 800acca:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800acce:	42ab      	cmp	r3, r5
 800acd0:	d81f      	bhi.n	800ad12 <acc_dll_check_direct_leakage+0xfa>
 800acd2:	2001      	movs	r0, #1
 800acd4:	b004      	add	sp, #16
 800acd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acda:	4b17      	ldr	r3, [pc, #92]	; (800ad38 <acc_dll_check_direct_leakage+0x120>)
 800acdc:	4a17      	ldr	r2, [pc, #92]	; (800ad3c <acc_dll_check_direct_leakage+0x124>)
 800acde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ace0:	4917      	ldr	r1, [pc, #92]	; (800ad40 <acc_dll_check_direct_leakage+0x128>)
 800ace2:	2000      	movs	r0, #0
 800ace4:	4798      	blx	r3
 800ace6:	2000      	movs	r0, #0
 800ace8:	b004      	add	sp, #16
 800acea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acee:	f7fb fcc5 	bl	800667c <acc_rss_integration_log_level>
 800acf2:	2803      	cmp	r0, #3
 800acf4:	d909      	bls.n	800ad0a <acc_dll_check_direct_leakage+0xf2>
 800acf6:	e9cd 5801 	strd	r5, r8, [sp, #4]
 800acfa:	4a0f      	ldr	r2, [pc, #60]	; (800ad38 <acc_dll_check_direct_leakage+0x120>)
 800acfc:	9400      	str	r4, [sp, #0]
 800acfe:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800ad00:	490f      	ldr	r1, [pc, #60]	; (800ad40 <acc_dll_check_direct_leakage+0x128>)
 800ad02:	4a10      	ldr	r2, [pc, #64]	; (800ad44 <acc_dll_check_direct_leakage+0x12c>)
 800ad04:	463b      	mov	r3, r7
 800ad06:	2004      	movs	r0, #4
 800ad08:	47a0      	blx	r4
 800ad0a:	2000      	movs	r0, #0
 800ad0c:	b004      	add	sp, #16
 800ad0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad12:	f7fb fcb3 	bl	800667c <acc_rss_integration_log_level>
 800ad16:	2803      	cmp	r0, #3
 800ad18:	d9f7      	bls.n	800ad0a <acc_dll_check_direct_leakage+0xf2>
 800ad1a:	4a07      	ldr	r2, [pc, #28]	; (800ad38 <acc_dll_check_direct_leakage+0x120>)
 800ad1c:	9500      	str	r5, [sp, #0]
 800ad1e:	4623      	mov	r3, r4
 800ad20:	2004      	movs	r0, #4
 800ad22:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800ad24:	4906      	ldr	r1, [pc, #24]	; (800ad40 <acc_dll_check_direct_leakage+0x128>)
 800ad26:	4a08      	ldr	r2, [pc, #32]	; (800ad48 <acc_dll_check_direct_leakage+0x130>)
 800ad28:	47a0      	blx	r4
 800ad2a:	2000      	movs	r0, #0
 800ad2c:	e7d2      	b.n	800acd4 <acc_dll_check_direct_leakage+0xbc>
 800ad2e:	bf00      	nop
 800ad30:	cccccccd 	.word	0xcccccccd
 800ad34:	aaaaaaab 	.word	0xaaaaaaab
 800ad38:	20000640 	.word	0x20000640
 800ad3c:	08014914 	.word	0x08014914
 800ad40:	080148f8 	.word	0x080148f8
 800ad44:	0801489c 	.word	0x0801489c
 800ad48:	08014924 	.word	0x08014924

0800ad4c <acc_dll_dly_coarse_priority_sort>:
 800ad4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad50:	b084      	sub	sp, #16
 800ad52:	2800      	cmp	r0, #0
 800ad54:	f000 80ad 	beq.w	800aeb2 <acc_dll_dly_coarse_priority_sort+0x166>
 800ad58:	280c      	cmp	r0, #12
 800ad5a:	f200 80a6 	bhi.w	800aeaa <acc_dll_dly_coarse_priority_sort+0x15e>
 800ad5e:	2400      	movs	r4, #0
 800ad60:	ed9f 4a56 	vldr	s8, [pc, #344]	; 800aebc <acc_dll_dly_coarse_priority_sort+0x170>
 800ad64:	eddf 4a56 	vldr	s9, [pc, #344]	; 800aec0 <acc_dll_dly_coarse_priority_sort+0x174>
 800ad68:	ed9f 6a56 	vldr	s12, [pc, #344]	; 800aec4 <acc_dll_dly_coarse_priority_sort+0x178>
 800ad6c:	ed9f 5a56 	vldr	s10, [pc, #344]	; 800aec8 <acc_dll_dly_coarse_priority_sort+0x17c>
 800ad70:	eddf 5a56 	vldr	s11, [pc, #344]	; 800aecc <acc_dll_dly_coarse_priority_sort+0x180>
 800ad74:	4626      	mov	r6, r4
 800ad76:	f10d 0e04 	add.w	lr, sp, #4
 800ad7a:	f102 3cff 	add.w	ip, r2, #4294967295
 800ad7e:	460d      	mov	r5, r1
 800ad80:	1e47      	subs	r7, r0, #1
 800ad82:	f240 5813 	movw	r8, #1299	; 0x513
 800ad86:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 800ad8a:	2c00      	cmp	r4, #0
 800ad8c:	d067      	beq.n	800ae5e <acc_dll_dly_coarse_priority_sort+0x112>
 800ad8e:	42bc      	cmp	r4, r7
 800ad90:	d016      	beq.n	800adc0 <acc_dll_dly_coarse_priority_sort+0x74>
 800ad92:	f935 ac02 	ldrsh.w	sl, [r5, #-2]
 800ad96:	f9b5 3000 	ldrsh.w	r3, [r5]
 800ad9a:	459a      	cmp	sl, r3
 800ad9c:	dd18      	ble.n	800add0 <acc_dll_dly_coarse_priority_sort+0x84>
 800ad9e:	f9b5 9002 	ldrsh.w	r9, [r5, #2]
 800ada2:	454b      	cmp	r3, r9
 800ada4:	dd14      	ble.n	800add0 <acc_dll_dly_coarse_priority_sort+0x84>
 800ada6:	45c2      	cmp	sl, r8
 800ada8:	dc12      	bgt.n	800add0 <acc_dll_dly_coarse_priority_sort+0x84>
 800adaa:	4543      	cmp	r3, r8
 800adac:	dc10      	bgt.n	800add0 <acc_dll_dly_coarse_priority_sort+0x84>
 800adae:	eba9 090a 	sub.w	r9, r9, sl
 800adb2:	ee07 9a90 	vmov	s15, r9
 800adb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800adba:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800adbe:	e05e      	b.n	800ae7e <acc_dll_dly_coarse_priority_sort+0x132>
 800adc0:	f935 9c02 	ldrsh.w	r9, [r5, #-2]
 800adc4:	f9b5 3000 	ldrsh.w	r3, [r5]
 800adc8:	4599      	cmp	r9, r3
 800adca:	dd01      	ble.n	800add0 <acc_dll_dly_coarse_priority_sort+0x84>
 800adcc:	45c1      	cmp	r9, r8
 800adce:	dd65      	ble.n	800ae9c <acc_dll_dly_coarse_priority_sort+0x150>
 800add0:	eef0 6a46 	vmov.f32	s13, s12
 800add4:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800add8:	2b00      	cmp	r3, #0
 800adda:	bfb8      	it	lt
 800addc:	425b      	neglt	r3, r3
 800adde:	ee07 3a90 	vmov	s15, r3
 800ade2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ade6:	3401      	adds	r4, #1
 800ade8:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800adec:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800adf0:	b2e6      	uxtb	r6, r4
 800adf2:	42b0      	cmp	r0, r6
 800adf4:	f105 0502 	add.w	r5, r5, #2
 800adf8:	ee67 7a25 	vmul.f32	s15, s14, s11
 800adfc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae04:	ee17 3a90 	vmov	r3, s15
 800ae08:	f80e 3b01 	strb.w	r3, [lr], #1
 800ae0c:	d8bd      	bhi.n	800ad8a <acc_dll_dly_coarse_priority_sort+0x3e>
 800ae0e:	3802      	subs	r0, #2
 800ae10:	f102 0c01 	add.w	ip, r2, #1
 800ae14:	fa5f fe87 	uxtb.w	lr, r7
 800ae18:	fa5c f780 	uxtab	r7, ip, r0
 800ae1c:	eba7 0e0e 	sub.w	lr, r7, lr
 800ae20:	45be      	cmp	lr, r7
 800ae22:	d019      	beq.n	800ae58 <acc_dll_dly_coarse_priority_sort+0x10c>
 800ae24:	4613      	mov	r3, r2
 800ae26:	2400      	movs	r4, #0
 800ae28:	7819      	ldrb	r1, [r3, #0]
 800ae2a:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800ae2e:	ad04      	add	r5, sp, #16
 800ae30:	186e      	adds	r6, r5, r1
 800ae32:	4405      	add	r5, r0
 800ae34:	f816 6c0c 	ldrb.w	r6, [r6, #-12]
 800ae38:	f815 5c0c 	ldrb.w	r5, [r5, #-12]
 800ae3c:	42ae      	cmp	r6, r5
 800ae3e:	d904      	bls.n	800ae4a <acc_dll_dly_coarse_priority_sort+0xfe>
 800ae40:	3401      	adds	r4, #1
 800ae42:	b2e4      	uxtb	r4, r4
 800ae44:	f803 0c01 	strb.w	r0, [r3, #-1]
 800ae48:	7019      	strb	r1, [r3, #0]
 800ae4a:	429f      	cmp	r7, r3
 800ae4c:	d1ec      	bne.n	800ae28 <acc_dll_dly_coarse_priority_sort+0xdc>
 800ae4e:	45bc      	cmp	ip, r7
 800ae50:	d002      	beq.n	800ae58 <acc_dll_dly_coarse_priority_sort+0x10c>
 800ae52:	3f01      	subs	r7, #1
 800ae54:	2c00      	cmp	r4, #0
 800ae56:	d1e3      	bne.n	800ae20 <acc_dll_dly_coarse_priority_sort+0xd4>
 800ae58:	b004      	add	sp, #16
 800ae5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae5e:	f9b1 9000 	ldrsh.w	r9, [r1]
 800ae62:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800ae66:	4599      	cmp	r9, r3
 800ae68:	dd13      	ble.n	800ae92 <acc_dll_dly_coarse_priority_sort+0x146>
 800ae6a:	45c1      	cmp	r9, r8
 800ae6c:	dc11      	bgt.n	800ae92 <acc_dll_dly_coarse_priority_sort+0x146>
 800ae6e:	eba3 0309 	sub.w	r3, r3, r9
 800ae72:	ee07 3a90 	vmov	s15, r3
 800ae76:	f9b5 3000 	ldrsh.w	r3, [r5]
 800ae7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ae7e:	eef4 7ac4 	vcmpe.f32	s15, s8
 800ae82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae86:	bf54      	ite	pl
 800ae88:	eef0 6a46 	vmovpl.f32	s13, s12
 800ae8c:	eef0 6a64 	vmovmi.f32	s13, s9
 800ae90:	e7a0      	b.n	800add4 <acc_dll_dly_coarse_priority_sort+0x88>
 800ae92:	f9b5 3000 	ldrsh.w	r3, [r5]
 800ae96:	eef0 6a46 	vmov.f32	s13, s12
 800ae9a:	e79b      	b.n	800add4 <acc_dll_dly_coarse_priority_sort+0x88>
 800ae9c:	eba3 0909 	sub.w	r9, r3, r9
 800aea0:	ee07 9a90 	vmov	s15, r9
 800aea4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aea8:	e7e9      	b.n	800ae7e <acc_dll_dly_coarse_priority_sort+0x132>
 800aeaa:	4809      	ldr	r0, [pc, #36]	; (800aed0 <acc_dll_dly_coarse_priority_sort+0x184>)
 800aeac:	211f      	movs	r1, #31
 800aeae:	f7fd fe09 	bl	8008ac4 <acc_assert_fail>
 800aeb2:	4807      	ldr	r0, [pc, #28]	; (800aed0 <acc_dll_dly_coarse_priority_sort+0x184>)
 800aeb4:	211a      	movs	r1, #26
 800aeb6:	f7fd fe05 	bl	8008ac4 <acc_assert_fail>
 800aeba:	bf00      	nop
 800aebc:	c2c80000 	.word	0xc2c80000
 800aec0:	00000000 	.word	0x00000000
 800aec4:	42480000 	.word	0x42480000
 800aec8:	447a0000 	.word	0x447a0000
 800aecc:	42c80000 	.word	0x42c80000
 800aed0:	08014964 	.word	0x08014964

0800aed4 <acc_dll_plateau_finder>:
 800aed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aed8:	b0af      	sub	sp, #188	; 0xbc
 800aeda:	2819      	cmp	r0, #25
 800aedc:	9104      	str	r1, [sp, #16]
 800aede:	f200 8226 	bhi.w	800b32e <acc_dll_plateau_finder+0x45a>
 800aee2:	2801      	cmp	r0, #1
 800aee4:	4683      	mov	fp, r0
 800aee6:	4615      	mov	r5, r2
 800aee8:	469a      	mov	sl, r3
 800aeea:	f240 8217 	bls.w	800b31c <acc_dll_plateau_finder+0x448>
 800aeee:	f1a0 0902 	sub.w	r9, r0, #2
 800aef2:	2100      	movs	r1, #0
 800aef4:	fa1f f989 	uxth.w	r9, r9
 800aef8:	2301      	movs	r3, #1
 800aefa:	ed9f 7ad2 	vldr	s14, [pc, #840]	; 800b244 <acc_dll_plateau_finder+0x370>
 800aefe:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800af02:	9205      	str	r2, [sp, #20]
 800af04:	f109 0902 	add.w	r9, r9, #2
 800af08:	460c      	mov	r4, r1
 800af0a:	460e      	mov	r6, r1
 800af0c:	461d      	mov	r5, r3
 800af0e:	e006      	b.n	800af1e <acc_dll_plateau_finder+0x4a>
 800af10:	f10b 32ff 	add.w	r2, fp, #4294967295
 800af14:	42aa      	cmp	r2, r5
 800af16:	d019      	beq.n	800af4c <acc_dll_plateau_finder+0x78>
 800af18:	3501      	adds	r5, #1
 800af1a:	45a9      	cmp	r9, r5
 800af1c:	d04b      	beq.n	800afb6 <acc_dll_plateau_finder+0xe2>
 800af1e:	f8b8 2000 	ldrh.w	r2, [r8]
 800af22:	f838 0f02 	ldrh.w	r0, [r8, #2]!
 800af26:	ee07 2a90 	vmov	s15, r2
 800af2a:	4282      	cmp	r2, r0
 800af2c:	bf34      	ite	cc
 800af2e:	1a82      	subcc	r2, r0, r2
 800af30:	1a12      	subcs	r2, r2, r0
 800af32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800af36:	b2af      	uxth	r7, r5
 800af38:	b292      	uxth	r2, r2
 800af3a:	3401      	adds	r4, #1
 800af3c:	4439      	add	r1, r7
 800af3e:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 800af42:	ee37 7a27 	vadd.f32	s14, s14, s15
 800af46:	b2a4      	uxth	r4, r4
 800af48:	b289      	uxth	r1, r1
 800af4a:	d9e1      	bls.n	800af10 <acc_dll_plateau_finder+0x3c>
 800af4c:	2c02      	cmp	r4, #2
 800af4e:	f240 8191 	bls.w	800b274 <acc_dll_plateau_finder+0x3a0>
 800af52:	ee07 1a90 	vmov	s15, r1
 800af56:	eef8 5a67 	vcvt.f32.u32	s11, s15
 800af5a:	ee07 4a90 	vmov	s15, r4
 800af5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af62:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800af66:	eec5 7aa6 	vdiv.f32	s15, s11, s13
 800af6a:	ab2e      	add	r3, sp, #184	; 0xb8
 800af6c:	eb03 0046 	add.w	r0, r3, r6, lsl #1
 800af70:	3501      	adds	r5, #1
 800af72:	f106 0c01 	add.w	ip, r6, #1
 800af76:	2100      	movs	r1, #0
 800af78:	45a9      	cmp	r9, r5
 800af7a:	f820 4c34 	strh.w	r4, [r0, #-52]
 800af7e:	f820 7c9c 	strh.w	r7, [r0, #-156]
 800af82:	460c      	mov	r4, r1
 800af84:	eec7 6a06 	vdiv.f32	s13, s14, s12
 800af88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800af8c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800af90:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800af94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af98:	ee16 3a90 	vmov	r3, s13
 800af9c:	ee17 2a90 	vmov	r2, s15
 800afa0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800afa4:	f82a 2016 	strh.w	r2, [sl, r6, lsl #1]
 800afa8:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 800b244 <acc_dll_plateau_finder+0x370>
 800afac:	f820 3c68 	strh.w	r3, [r0, #-104]
 800afb0:	fa1f f68c 	uxth.w	r6, ip
 800afb4:	d1b3      	bne.n	800af1e <acc_dll_plateau_finder+0x4a>
 800afb6:	9d05      	ldr	r5, [sp, #20]
 800afb8:	f7fb fb60 	bl	800667c <acc_rss_integration_log_level>
 800afbc:	2803      	cmp	r0, #3
 800afbe:	f200 817f 	bhi.w	800b2c0 <acc_dll_plateau_finder+0x3ec>
 800afc2:	b33e      	cbz	r6, 800b014 <acc_dll_plateau_finder+0x140>
 800afc4:	f8df 929c 	ldr.w	r9, [pc, #668]	; 800b264 <acc_dll_plateau_finder+0x390>
 800afc8:	4c9f      	ldr	r4, [pc, #636]	; (800b248 <acc_dll_plateau_finder+0x374>)
 800afca:	4fa0      	ldr	r7, [pc, #640]	; (800b24c <acc_dll_plateau_finder+0x378>)
 800afcc:	f04f 0b00 	mov.w	fp, #0
 800afd0:	46a8      	mov	r8, r5
 800afd2:	f7fb fb53 	bl	800667c <acc_rss_integration_log_level>
 800afd6:	2803      	cmp	r0, #3
 800afd8:	d915      	bls.n	800b006 <acc_dll_plateau_finder+0x132>
 800afda:	a914      	add	r1, sp, #80	; 0x50
 800afdc:	aa21      	add	r2, sp, #132	; 0x84
 800afde:	ab07      	add	r3, sp, #28
 800afe0:	f831 001b 	ldrh.w	r0, [r1, fp, lsl #1]
 800afe4:	f832 101b 	ldrh.w	r1, [r2, fp, lsl #1]
 800afe8:	f833 201b 	ldrh.w	r2, [r3, fp, lsl #1]
 800afec:	f83a 301b 	ldrh.w	r3, [sl, fp, lsl #1]
 800aff0:	e9cd 1002 	strd	r1, r0, [sp, #8]
 800aff4:	e9cd 2300 	strd	r2, r3, [sp]
 800aff8:	4639      	mov	r1, r7
 800affa:	f8d9 5034 	ldr.w	r5, [r9, #52]	; 0x34
 800affe:	465b      	mov	r3, fp
 800b000:	4622      	mov	r2, r4
 800b002:	2004      	movs	r0, #4
 800b004:	47a8      	blx	r5
 800b006:	f10b 0b01 	add.w	fp, fp, #1
 800b00a:	fa1f f38b 	uxth.w	r3, fp
 800b00e:	42b3      	cmp	r3, r6
 800b010:	d3df      	bcc.n	800afd2 <acc_dll_plateau_finder+0xfe>
 800b012:	4645      	mov	r5, r8
 800b014:	9b04      	ldr	r3, [sp, #16]
 800b016:	f8b3 b000 	ldrh.w	fp, [r3]
 800b01a:	f248 73cf 	movw	r3, #34767	; 0x87cf
 800b01e:	459b      	cmp	fp, r3
 800b020:	f240 8161 	bls.w	800b2e6 <acc_dll_plateau_finder+0x412>
 800b024:	f5ab 4300 	sub.w	r3, fp, #32768	; 0x8000
 800b028:	ee07 3a90 	vmov	s15, r3
 800b02c:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800b250 <acc_dll_plateau_finder+0x37c>
 800b030:	ed9f 5a88 	vldr	s10, [pc, #544]	; 800b254 <acc_dll_plateau_finder+0x380>
 800b034:	eddf 6a88 	vldr	s13, [pc, #544]	; 800b258 <acc_dll_plateau_finder+0x384>
 800b038:	eddf 5a88 	vldr	s11, [pc, #544]	; 800b25c <acc_dll_plateau_finder+0x388>
 800b03c:	ed9f 6a88 	vldr	s12, [pc, #544]	; 800b260 <acc_dll_plateau_finder+0x38c>
 800b040:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b044:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b048:	ee67 7a85 	vmul.f32	s15, s15, s10
 800b04c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b050:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800b054:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b058:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800b05c:	ee77 7a86 	vadd.f32	s15, s15, s12
 800b060:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b064:	ee17 3a90 	vmov	r3, s15
 800b068:	b29c      	uxth	r4, r3
 800b06a:	f7fb fb07 	bl	800667c <acc_rss_integration_log_level>
 800b06e:	2803      	cmp	r0, #3
 800b070:	f200 812e 	bhi.w	800b2d0 <acc_dll_plateau_finder+0x3fc>
 800b074:	2e00      	cmp	r6, #0
 800b076:	f000 814b 	beq.w	800b310 <acc_dll_plateau_finder+0x43c>
 800b07a:	f04f 0900 	mov.w	r9, #0
 800b07e:	46c8      	mov	r8, r9
 800b080:	464b      	mov	r3, r9
 800b082:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 800b086:	4627      	mov	r7, r4
 800b088:	e010      	b.n	800b0ac <acc_dll_plateau_finder+0x1d8>
 800b08a:	f5ab 62fa 	sub.w	r2, fp, #2000	; 0x7d0
 800b08e:	4294      	cmp	r4, r2
 800b090:	f200 8109 	bhi.w	800b2a6 <acc_dll_plateau_finder+0x3d2>
 800b094:	f108 0201 	add.w	r2, r8, #1
 800b098:	f825 3018 	strh.w	r3, [r5, r8, lsl #1]
 800b09c:	fa1f f882 	uxth.w	r8, r2
 800b0a0:	f109 0901 	add.w	r9, r9, #1
 800b0a4:	fa1f f389 	uxth.w	r3, r9
 800b0a8:	429e      	cmp	r6, r3
 800b0aa:	d916      	bls.n	800b0da <acc_dll_plateau_finder+0x206>
 800b0ac:	f83a 4b02 	ldrh.w	r4, [sl], #2
 800b0b0:	f241 3287 	movw	r2, #4999	; 0x1387
 800b0b4:	4294      	cmp	r4, r2
 800b0b6:	d8e8      	bhi.n	800b08a <acc_dll_plateau_finder+0x1b6>
 800b0b8:	f7fb fae0 	bl	800667c <acc_rss_integration_log_level>
 800b0bc:	2803      	cmp	r0, #3
 800b0be:	d9ef      	bls.n	800b0a0 <acc_dll_plateau_finder+0x1cc>
 800b0c0:	4a68      	ldr	r2, [pc, #416]	; (800b264 <acc_dll_plateau_finder+0x390>)
 800b0c2:	4962      	ldr	r1, [pc, #392]	; (800b24c <acc_dll_plateau_finder+0x378>)
 800b0c4:	4623      	mov	r3, r4
 800b0c6:	2004      	movs	r0, #4
 800b0c8:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800b0ca:	4a67      	ldr	r2, [pc, #412]	; (800b268 <acc_dll_plateau_finder+0x394>)
 800b0cc:	f109 0901 	add.w	r9, r9, #1
 800b0d0:	47a0      	blx	r4
 800b0d2:	fa1f f389 	uxth.w	r3, r9
 800b0d6:	429e      	cmp	r6, r3
 800b0d8:	d8e8      	bhi.n	800b0ac <acc_dll_plateau_finder+0x1d8>
 800b0da:	f1b8 0f01 	cmp.w	r8, #1
 800b0de:	463c      	mov	r4, r7
 800b0e0:	f240 8112 	bls.w	800b308 <acc_dll_plateau_finder+0x434>
 800b0e4:	f1a8 0a02 	sub.w	sl, r8, #2
 800b0e8:	fa0f fe8a 	sxth.w	lr, sl
 800b0ec:	f10e 0901 	add.w	r9, lr, #1
 800b0f0:	fa1f fa8a 	uxth.w	sl, sl
 800b0f4:	eb05 0949 	add.w	r9, r5, r9, lsl #1
 800b0f8:	46ac      	mov	ip, r5
 800b0fa:	f1be 0f00 	cmp.w	lr, #0
 800b0fe:	db23      	blt.n	800b148 <acc_dll_plateau_finder+0x274>
 800b100:	4649      	mov	r1, r9
 800b102:	4670      	mov	r0, lr
 800b104:	2500      	movs	r5, #0
 800b106:	f831 6d02 	ldrh.w	r6, [r1, #-2]!
 800b10a:	ab2e      	add	r3, sp, #184	; 0xb8
 800b10c:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 800b110:	884f      	ldrh	r7, [r1, #2]
 800b112:	f833 2c68 	ldrh.w	r2, [r3, #-104]
 800b116:	ab2e      	add	r3, sp, #184	; 0xb8
 800b118:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 800b11c:	42a2      	cmp	r2, r4
 800b11e:	f833 3c68 	ldrh.w	r3, [r3, #-104]
 800b122:	bf8c      	ite	hi
 800b124:	1b12      	subhi	r2, r2, r4
 800b126:	1aa2      	subls	r2, r4, r2
 800b128:	42a3      	cmp	r3, r4
 800b12a:	bf8c      	ite	hi
 800b12c:	1b1b      	subhi	r3, r3, r4
 800b12e:	1ae3      	subls	r3, r4, r3
 800b130:	b292      	uxth	r2, r2
 800b132:	b29b      	uxth	r3, r3
 800b134:	429a      	cmp	r2, r3
 800b136:	d902      	bls.n	800b13e <acc_dll_plateau_finder+0x26a>
 800b138:	800f      	strh	r7, [r1, #0]
 800b13a:	804e      	strh	r6, [r1, #2]
 800b13c:	2501      	movs	r5, #1
 800b13e:	3801      	subs	r0, #1
 800b140:	0403      	lsls	r3, r0, #16
 800b142:	d5e0      	bpl.n	800b106 <acc_dll_plateau_finder+0x232>
 800b144:	2d00      	cmp	r5, #0
 800b146:	d1d8      	bne.n	800b0fa <acc_dll_plateau_finder+0x226>
 800b148:	f8bc 3000 	ldrh.w	r3, [ip]
 800b14c:	aa2e      	add	r2, sp, #184	; 0xb8
 800b14e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800b152:	4665      	mov	r5, ip
 800b154:	1ca8      	adds	r0, r5, #2
 800b156:	f833 1c68 	ldrh.w	r1, [r3, #-104]
 800b15a:	eb00 004a 	add.w	r0, r0, sl, lsl #1
 800b15e:	4662      	mov	r2, ip
 800b160:	f04f 0a01 	mov.w	sl, #1
 800b164:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 800b168:	ac2e      	add	r4, sp, #184	; 0xb8
 800b16a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800b16e:	f833 3c68 	ldrh.w	r3, [r3, #-104]
 800b172:	428b      	cmp	r3, r1
 800b174:	bf8c      	ite	hi
 800b176:	1a5b      	subhi	r3, r3, r1
 800b178:	1acb      	subls	r3, r1, r3
 800b17a:	b29b      	uxth	r3, r3
 800b17c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b180:	bf3c      	itt	cc
 800b182:	f10a 0a01 	addcc.w	sl, sl, #1
 800b186:	fa1f fa8a 	uxthcc.w	sl, sl
 800b18a:	4290      	cmp	r0, r2
 800b18c:	d1ea      	bne.n	800b164 <acc_dll_plateau_finder+0x290>
 800b18e:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 800b264 <acc_dll_plateau_finder+0x390>
 800b192:	4f36      	ldr	r7, [pc, #216]	; (800b26c <acc_dll_plateau_finder+0x398>)
 800b194:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b198:	f1ba 0f00 	cmp.w	sl, #0
 800b19c:	d031      	beq.n	800b202 <acc_dll_plateau_finder+0x32e>
 800b19e:	2400      	movs	r4, #0
 800b1a0:	4e2a      	ldr	r6, [pc, #168]	; (800b24c <acc_dll_plateau_finder+0x378>)
 800b1a2:	46a6      	mov	lr, r4
 800b1a4:	4622      	mov	r2, r4
 800b1a6:	e004      	b.n	800b1b2 <acc_dll_plateau_finder+0x2de>
 800b1a8:	3401      	adds	r4, #1
 800b1aa:	b2a4      	uxth	r4, r4
 800b1ac:	4554      	cmp	r4, sl
 800b1ae:	4622      	mov	r2, r4
 800b1b0:	d224      	bcs.n	800b1fc <acc_dll_plateau_finder+0x328>
 800b1b2:	0053      	lsls	r3, r2, #1
 800b1b4:	3302      	adds	r3, #2
 800b1b6:	f835 1012 	ldrh.w	r1, [r5, r2, lsl #1]
 800b1ba:	5ae8      	ldrh	r0, [r5, r3]
 800b1bc:	f10d 0cb8 	add.w	ip, sp, #184	; 0xb8
 800b1c0:	eb0c 0b41 	add.w	fp, ip, r1, lsl #1
 800b1c4:	eb0c 0c40 	add.w	ip, ip, r0, lsl #1
 800b1c8:	f83b bc34 	ldrh.w	fp, [fp, #-52]
 800b1cc:	f83c cc34 	ldrh.w	ip, [ip, #-52]
 800b1d0:	45e3      	cmp	fp, ip
 800b1d2:	d2e9      	bcs.n	800b1a8 <acc_dll_plateau_finder+0x2d4>
 800b1d4:	f825 0012 	strh.w	r0, [r5, r2, lsl #1]
 800b1d8:	52e9      	strh	r1, [r5, r3]
 800b1da:	f7fb fa4f 	bl	800667c <acc_rss_integration_log_level>
 800b1de:	2803      	cmp	r0, #3
 800b1e0:	d97e      	bls.n	800b2e0 <acc_dll_plateau_finder+0x40c>
 800b1e2:	3401      	adds	r4, #1
 800b1e4:	463a      	mov	r2, r7
 800b1e6:	b2a4      	uxth	r4, r4
 800b1e8:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
 800b1ec:	4631      	mov	r1, r6
 800b1ee:	2004      	movs	r0, #4
 800b1f0:	4798      	blx	r3
 800b1f2:	4554      	cmp	r4, sl
 800b1f4:	f04f 0e01 	mov.w	lr, #1
 800b1f8:	4622      	mov	r2, r4
 800b1fa:	d3da      	bcc.n	800b1b2 <acc_dll_plateau_finder+0x2de>
 800b1fc:	f1be 0f00 	cmp.w	lr, #0
 800b200:	d1ca      	bne.n	800b198 <acc_dll_plateau_finder+0x2c4>
 800b202:	f8df a060 	ldr.w	sl, [pc, #96]	; 800b264 <acc_dll_plateau_finder+0x390>
 800b206:	f8df 9068 	ldr.w	r9, [pc, #104]	; 800b270 <acc_dll_plateau_finder+0x39c>
 800b20a:	4f10      	ldr	r7, [pc, #64]	; (800b24c <acc_dll_plateau_finder+0x378>)
 800b20c:	2400      	movs	r4, #0
 800b20e:	f7fb fa35 	bl	800667c <acc_rss_integration_log_level>
 800b212:	2803      	cmp	r0, #3
 800b214:	d90d      	bls.n	800b232 <acc_dll_plateau_finder+0x35e>
 800b216:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
 800b21a:	aa2e      	add	r2, sp, #184	; 0xb8
 800b21c:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800b220:	4639      	mov	r1, r7
 800b222:	f832 2c68 	ldrh.w	r2, [r2, #-104]
 800b226:	9200      	str	r2, [sp, #0]
 800b228:	f8da 6034 	ldr.w	r6, [sl, #52]	; 0x34
 800b22c:	464a      	mov	r2, r9
 800b22e:	2004      	movs	r0, #4
 800b230:	47b0      	blx	r6
 800b232:	3401      	adds	r4, #1
 800b234:	b2a3      	uxth	r3, r4
 800b236:	4598      	cmp	r8, r3
 800b238:	d8e9      	bhi.n	800b20e <acc_dll_plateau_finder+0x33a>
 800b23a:	4640      	mov	r0, r8
 800b23c:	b02f      	add	sp, #188	; 0xbc
 800b23e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b242:	bf00      	nop
 800b244:	00000000 	.word	0x00000000
 800b248:	08014a00 	.word	0x08014a00
 800b24c:	08014984 	.word	0x08014984
 800b250:	3f99999a 	.word	0x3f99999a
 800b254:	37800000 	.word	0x37800000
 800b258:	3f866666 	.word	0x3f866666
 800b25c:	47800000 	.word	0x47800000
 800b260:	47000000 	.word	0x47000000
 800b264:	20000640 	.word	0x20000640
 800b268:	08014a7c 	.word	0x08014a7c
 800b26c:	08014adc 	.word	0x08014adc
 800b270:	08014b10 	.word	0x08014b10
 800b274:	f7fb fa02 	bl	800667c <acc_rss_integration_log_level>
 800b278:	2803      	cmp	r0, #3
 800b27a:	d90f      	bls.n	800b29c <acc_dll_plateau_finder+0x3c8>
 800b27c:	9401      	str	r4, [sp, #4]
 800b27e:	f838 2c02 	ldrh.w	r2, [r8, #-2]
 800b282:	4b2d      	ldr	r3, [pc, #180]	; (800b338 <acc_dll_plateau_finder+0x464>)
 800b284:	9200      	str	r2, [sp, #0]
 800b286:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 800b288:	492c      	ldr	r1, [pc, #176]	; (800b33c <acc_dll_plateau_finder+0x468>)
 800b28a:	4a2d      	ldr	r2, [pc, #180]	; (800b340 <acc_dll_plateau_finder+0x46c>)
 800b28c:	462b      	mov	r3, r5
 800b28e:	2004      	movs	r0, #4
 800b290:	2400      	movs	r4, #0
 800b292:	47b8      	blx	r7
 800b294:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800b344 <acc_dll_plateau_finder+0x470>
 800b298:	4621      	mov	r1, r4
 800b29a:	e63d      	b.n	800af18 <acc_dll_plateau_finder+0x44>
 800b29c:	2100      	movs	r1, #0
 800b29e:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800b344 <acc_dll_plateau_finder+0x470>
 800b2a2:	460c      	mov	r4, r1
 800b2a4:	e638      	b.n	800af18 <acc_dll_plateau_finder+0x44>
 800b2a6:	f7fb f9e9 	bl	800667c <acc_rss_integration_log_level>
 800b2aa:	2803      	cmp	r0, #3
 800b2ac:	f67f aef8 	bls.w	800b0a0 <acc_dll_plateau_finder+0x1cc>
 800b2b0:	4a21      	ldr	r2, [pc, #132]	; (800b338 <acc_dll_plateau_finder+0x464>)
 800b2b2:	4922      	ldr	r1, [pc, #136]	; (800b33c <acc_dll_plateau_finder+0x468>)
 800b2b4:	4623      	mov	r3, r4
 800b2b6:	2004      	movs	r0, #4
 800b2b8:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800b2ba:	4a23      	ldr	r2, [pc, #140]	; (800b348 <acc_dll_plateau_finder+0x474>)
 800b2bc:	47a0      	blx	r4
 800b2be:	e6ef      	b.n	800b0a0 <acc_dll_plateau_finder+0x1cc>
 800b2c0:	4633      	mov	r3, r6
 800b2c2:	491d      	ldr	r1, [pc, #116]	; (800b338 <acc_dll_plateau_finder+0x464>)
 800b2c4:	4a21      	ldr	r2, [pc, #132]	; (800b34c <acc_dll_plateau_finder+0x478>)
 800b2c6:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 800b2c8:	491c      	ldr	r1, [pc, #112]	; (800b33c <acc_dll_plateau_finder+0x468>)
 800b2ca:	2004      	movs	r0, #4
 800b2cc:	47a0      	blx	r4
 800b2ce:	e678      	b.n	800afc2 <acc_dll_plateau_finder+0xee>
 800b2d0:	4b19      	ldr	r3, [pc, #100]	; (800b338 <acc_dll_plateau_finder+0x464>)
 800b2d2:	4a1f      	ldr	r2, [pc, #124]	; (800b350 <acc_dll_plateau_finder+0x47c>)
 800b2d4:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 800b2d6:	4919      	ldr	r1, [pc, #100]	; (800b33c <acc_dll_plateau_finder+0x468>)
 800b2d8:	4623      	mov	r3, r4
 800b2da:	2004      	movs	r0, #4
 800b2dc:	47b8      	blx	r7
 800b2de:	e6c9      	b.n	800b074 <acc_dll_plateau_finder+0x1a0>
 800b2e0:	f04f 0e01 	mov.w	lr, #1
 800b2e4:	e760      	b.n	800b1a8 <acc_dll_plateau_finder+0x2d4>
 800b2e6:	f7fb f9c9 	bl	800667c <acc_rss_integration_log_level>
 800b2ea:	2803      	cmp	r0, #3
 800b2ec:	d910      	bls.n	800b310 <acc_dll_plateau_finder+0x43c>
 800b2ee:	4b12      	ldr	r3, [pc, #72]	; (800b338 <acc_dll_plateau_finder+0x464>)
 800b2f0:	4a18      	ldr	r2, [pc, #96]	; (800b354 <acc_dll_plateau_finder+0x480>)
 800b2f2:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800b2f4:	4911      	ldr	r1, [pc, #68]	; (800b33c <acc_dll_plateau_finder+0x468>)
 800b2f6:	465b      	mov	r3, fp
 800b2f8:	2004      	movs	r0, #4
 800b2fa:	47a0      	blx	r4
 800b2fc:	f04f 0800 	mov.w	r8, #0
 800b300:	4640      	mov	r0, r8
 800b302:	b02f      	add	sp, #188	; 0xbc
 800b304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b308:	f1b8 0f00 	cmp.w	r8, #0
 800b30c:	f47f af79 	bne.w	800b202 <acc_dll_plateau_finder+0x32e>
 800b310:	f04f 0800 	mov.w	r8, #0
 800b314:	4640      	mov	r0, r8
 800b316:	b02f      	add	sp, #188	; 0xbc
 800b318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b31c:	f7fb f9ae 	bl	800667c <acc_rss_integration_log_level>
 800b320:	2803      	cmp	r0, #3
 800b322:	d801      	bhi.n	800b328 <acc_dll_plateau_finder+0x454>
 800b324:	2600      	movs	r6, #0
 800b326:	e675      	b.n	800b014 <acc_dll_plateau_finder+0x140>
 800b328:	2300      	movs	r3, #0
 800b32a:	461e      	mov	r6, r3
 800b32c:	e7c9      	b.n	800b2c2 <acc_dll_plateau_finder+0x3ee>
 800b32e:	4803      	ldr	r0, [pc, #12]	; (800b33c <acc_dll_plateau_finder+0x468>)
 800b330:	2128      	movs	r1, #40	; 0x28
 800b332:	f7fd fbc7 	bl	8008ac4 <acc_assert_fail>
 800b336:	bf00      	nop
 800b338:	20000640 	.word	0x20000640
 800b33c:	08014984 	.word	0x08014984
 800b340:	08014998 	.word	0x08014998
 800b344:	00000000 	.word	0x00000000
 800b348:	08014aac 	.word	0x08014aac
 800b34c:	080149ec 	.word	0x080149ec
 800b350:	08014a6c 	.word	0x08014a6c
 800b354:	08014a44 	.word	0x08014a44

0800b358 <acc_cpd_linear_sweep_load_program>:
 800b358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b35c:	ed2d 8b04 	vpush	{d8-d9}
 800b360:	4614      	mov	r4, r2
 800b362:	b08f      	sub	sp, #60	; 0x3c
 800b364:	461a      	mov	r2, r3
 800b366:	4606      	mov	r6, r0
 800b368:	460d      	mov	r5, r1
 800b36a:	ee08 0a90 	vmov	s17, r0
 800b36e:	4601      	mov	r1, r0
 800b370:	469b      	mov	fp, r3
 800b372:	2016      	movs	r0, #22
 800b374:	23bc      	movs	r3, #188	; 0xbc
 800b376:	f7fd fca3 	bl	8008cc0 <acc_probes_execute_struct>
 800b37a:	ab0d      	add	r3, sp, #52	; 0x34
 800b37c:	4622      	mov	r2, r4
 800b37e:	9300      	str	r3, [sp, #0]
 800b380:	4629      	mov	r1, r5
 800b382:	4630      	mov	r0, r6
 800b384:	2400      	movs	r4, #0
 800b386:	ab0c      	add	r3, sp, #48	; 0x30
 800b388:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
 800b38c:	f7fc ff66 	bl	800825c <acc_sensor_protocol_r2_prepare_load>
 800b390:	900b      	str	r0, [sp, #44]	; 0x2c
 800b392:	b928      	cbnz	r0, 800b3a0 <acc_cpd_linear_sweep_load_program+0x48>
 800b394:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b396:	b00f      	add	sp, #60	; 0x3c
 800b398:	ecbd 8b04 	vpop	{d8-d9}
 800b39c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3a0:	f7fb f96c 	bl	800667c <acc_rss_integration_log_level>
 800b3a4:	2803      	cmp	r0, #3
 800b3a6:	ee09 5a10 	vmov	s18, r5
 800b3aa:	d905      	bls.n	800b3b8 <acc_cpd_linear_sweep_load_program+0x60>
 800b3ac:	4b05      	ldr	r3, [pc, #20]	; (800b3c4 <acc_cpd_linear_sweep_load_program+0x6c>)
 800b3ae:	4a06      	ldr	r2, [pc, #24]	; (800b3c8 <acc_cpd_linear_sweep_load_program+0x70>)
 800b3b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3b2:	4906      	ldr	r1, [pc, #24]	; (800b3cc <acc_cpd_linear_sweep_load_program+0x74>)
 800b3b4:	2004      	movs	r0, #4
 800b3b6:	4798      	blx	r3
 800b3b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b3ba:	ed9f 8a05 	vldr	s16, [pc, #20]	; 800b3d0 <acc_cpd_linear_sweep_load_program+0x78>
 800b3be:	f04f 0a00 	mov.w	sl, #0
 800b3c2:	e07b      	b.n	800b4bc <acc_cpd_linear_sweep_load_program+0x164>
 800b3c4:	20000640 	.word	0x20000640
 800b3c8:	08014b34 	.word	0x08014b34
 800b3cc:	08014b5c 	.word	0x08014b5c
 800b3d0:	3751b717 	.word	0x3751b717
 800b3d4:	f002 f898 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800b3d8:	2223      	movs	r2, #35	; 0x23
 800b3da:	2103      	movs	r1, #3
 800b3dc:	4603      	mov	r3, r0
 800b3de:	e9cd 2100 	strd	r2, r1, [sp]
 800b3e2:	4620      	mov	r0, r4
 800b3e4:	4632      	mov	r2, r6
 800b3e6:	4629      	mov	r1, r5
 800b3e8:	f001 ff3e 	bl	800d268 <acc_confprogram_patch_offset>
 800b3ec:	f002 f88c 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800b3f0:	227d      	movs	r2, #125	; 0x7d
 800b3f2:	2100      	movs	r1, #0
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	e9cd 2100 	strd	r2, r1, [sp]
 800b3fa:	4620      	mov	r0, r4
 800b3fc:	4632      	mov	r2, r6
 800b3fe:	4629      	mov	r1, r5
 800b400:	f001 ff32 	bl	800d268 <acc_confprogram_patch_offset>
 800b404:	f002 f880 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800b408:	2281      	movs	r2, #129	; 0x81
 800b40a:	2101      	movs	r1, #1
 800b40c:	4603      	mov	r3, r0
 800b40e:	e9cd 2100 	strd	r2, r1, [sp]
 800b412:	4620      	mov	r0, r4
 800b414:	4632      	mov	r2, r6
 800b416:	4629      	mov	r1, r5
 800b418:	f001 ff26 	bl	800d268 <acc_confprogram_patch_offset>
 800b41c:	f002 f874 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800b420:	2102      	movs	r1, #2
 800b422:	4603      	mov	r3, r0
 800b424:	2275      	movs	r2, #117	; 0x75
 800b426:	9101      	str	r1, [sp, #4]
 800b428:	4629      	mov	r1, r5
 800b42a:	9200      	str	r2, [sp, #0]
 800b42c:	4620      	mov	r0, r4
 800b42e:	4632      	mov	r2, r6
 800b430:	f001 ff1a 	bl	800d268 <acc_confprogram_patch_offset>
 800b434:	f002 f868 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800b438:	f89b 20ac 	ldrb.w	r2, [fp, #172]	; 0xac
 800b43c:	9201      	str	r2, [sp, #4]
 800b43e:	2252      	movs	r2, #82	; 0x52
 800b440:	4603      	mov	r3, r0
 800b442:	4629      	mov	r1, r5
 800b444:	9200      	str	r2, [sp, #0]
 800b446:	4620      	mov	r0, r4
 800b448:	4632      	mov	r2, r6
 800b44a:	f001 ff0d 	bl	800d268 <acc_confprogram_patch_offset>
 800b44e:	eddb 7a2c 	vldr	s15, [fp, #176]	; 0xb0
 800b452:	ee67 7a88 	vmul.f32	s15, s15, s16
 800b456:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b45a:	ee17 7a90 	vmov	r7, s15
 800b45e:	f002 f853 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800b462:	3f01      	subs	r7, #1
 800b464:	2268      	movs	r2, #104	; 0x68
 800b466:	b2bf      	uxth	r7, r7
 800b468:	4603      	mov	r3, r0
 800b46a:	4629      	mov	r1, r5
 800b46c:	e9cd 2700 	strd	r2, r7, [sp]
 800b470:	4620      	mov	r0, r4
 800b472:	4632      	mov	r2, r6
 800b474:	f001 fef8 	bl	800d268 <acc_confprogram_patch_offset>
 800b478:	f002 f846 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800b47c:	f8db 20b4 	ldr.w	r2, [fp, #180]	; 0xb4
 800b480:	9201      	str	r2, [sp, #4]
 800b482:	2253      	movs	r2, #83	; 0x53
 800b484:	4603      	mov	r3, r0
 800b486:	9200      	str	r2, [sp, #0]
 800b488:	4629      	mov	r1, r5
 800b48a:	4632      	mov	r2, r6
 800b48c:	4620      	mov	r0, r4
 800b48e:	f001 feeb 	bl	800d268 <acc_confprogram_patch_offset>
 800b492:	f8db 30b4 	ldr.w	r3, [fp, #180]	; 0xb4
 800b496:	2b00      	cmp	r3, #0
 800b498:	f040 8465 	bne.w	800bd66 <acc_cpd_linear_sweep_load_program+0xa0e>
 800b49c:	ee19 2a10 	vmov	r2, s18
 800b4a0:	464b      	mov	r3, r9
 800b4a2:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 800b4a6:	ee18 0a90 	vmov	r0, s17
 800b4aa:	f7fc fbe7 	bl	8007c7c <acc_sensor_r2_load_confmem>
 800b4ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b4b0:	f240 7211 	movw	r2, #1809	; 0x711
 800b4b4:	449a      	add	sl, r3
 800b4b6:	4592      	cmp	sl, r2
 800b4b8:	f200 8464 	bhi.w	800bd84 <acc_cpd_linear_sweep_load_program+0xa2c>
 800b4bc:	f5ca 62e2 	rsb	r2, sl, #1808	; 0x710
 800b4c0:	3202      	adds	r2, #2
 800b4c2:	429a      	cmp	r2, r3
 800b4c4:	bf28      	it	cs
 800b4c6:	461a      	movcs	r2, r3
 800b4c8:	ea4f 035a 	mov.w	r3, sl, lsr #1
 800b4cc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800b4ce:	9302      	str	r3, [sp, #8]
 800b4d0:	461d      	mov	r5, r3
 800b4d2:	4691      	mov	r9, r2
 800b4d4:	f002 f814 	bl	800d500 <acc_image_a111_r2c_sweep_get>
 800b4d8:	ea4f 0259 	mov.w	r2, r9, lsr #1
 800b4dc:	4621      	mov	r1, r4
 800b4de:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 800b4e2:	f001 ffaf 	bl	800d444 <acc_confprogram_copy>
 800b4e6:	f002 f80f 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800b4ea:	fa1f f689 	uxth.w	r6, r9
 800b4ee:	fa1f f58a 	uxth.w	r5, sl
 800b4f2:	f8db 2000 	ldr.w	r2, [fp]
 800b4f6:	9201      	str	r2, [sp, #4]
 800b4f8:	2750      	movs	r7, #80	; 0x50
 800b4fa:	4603      	mov	r3, r0
 800b4fc:	4632      	mov	r2, r6
 800b4fe:	4629      	mov	r1, r5
 800b500:	4620      	mov	r0, r4
 800b502:	9700      	str	r7, [sp, #0]
 800b504:	f001 feb0 	bl	800d268 <acc_confprogram_patch_offset>
 800b508:	f001 fffe 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800b50c:	274e      	movs	r7, #78	; 0x4e
 800b50e:	f8db 2004 	ldr.w	r2, [fp, #4]
 800b512:	9201      	str	r2, [sp, #4]
 800b514:	4603      	mov	r3, r0
 800b516:	4632      	mov	r2, r6
 800b518:	4629      	mov	r1, r5
 800b51a:	4620      	mov	r0, r4
 800b51c:	9700      	str	r7, [sp, #0]
 800b51e:	f001 fea3 	bl	800d268 <acc_confprogram_patch_offset>
 800b522:	f001 fff1 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800b526:	274f      	movs	r7, #79	; 0x4f
 800b528:	f8db 2008 	ldr.w	r2, [fp, #8]
 800b52c:	9201      	str	r2, [sp, #4]
 800b52e:	4603      	mov	r3, r0
 800b530:	4632      	mov	r2, r6
 800b532:	4629      	mov	r1, r5
 800b534:	4620      	mov	r0, r4
 800b536:	9700      	str	r7, [sp, #0]
 800b538:	f001 fe96 	bl	800d268 <acc_confprogram_patch_offset>
 800b53c:	f001 ffe4 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800b540:	274c      	movs	r7, #76	; 0x4c
 800b542:	f8bb 200c 	ldrh.w	r2, [fp, #12]
 800b546:	9201      	str	r2, [sp, #4]
 800b548:	4603      	mov	r3, r0
 800b54a:	4632      	mov	r2, r6
 800b54c:	4629      	mov	r1, r5
 800b54e:	4620      	mov	r0, r4
 800b550:	9700      	str	r7, [sp, #0]
 800b552:	f001 fe89 	bl	800d268 <acc_confprogram_patch_offset>
 800b556:	f001 ffd7 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800b55a:	2726      	movs	r7, #38	; 0x26
 800b55c:	f8db 2010 	ldr.w	r2, [fp, #16]
 800b560:	9201      	str	r2, [sp, #4]
 800b562:	4603      	mov	r3, r0
 800b564:	4632      	mov	r2, r6
 800b566:	4629      	mov	r1, r5
 800b568:	4620      	mov	r0, r4
 800b56a:	9700      	str	r7, [sp, #0]
 800b56c:	f001 fe7c 	bl	800d268 <acc_confprogram_patch_offset>
 800b570:	f001 ffca 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800b574:	2773      	movs	r7, #115	; 0x73
 800b576:	f8db 2014 	ldr.w	r2, [fp, #20]
 800b57a:	9201      	str	r2, [sp, #4]
 800b57c:	4603      	mov	r3, r0
 800b57e:	4632      	mov	r2, r6
 800b580:	4629      	mov	r1, r5
 800b582:	4620      	mov	r0, r4
 800b584:	9700      	str	r7, [sp, #0]
 800b586:	f001 fe6f 	bl	800d268 <acc_confprogram_patch_offset>
 800b58a:	f001 ffbd 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800b58e:	2762      	movs	r7, #98	; 0x62
 800b590:	f8db 2018 	ldr.w	r2, [fp, #24]
 800b594:	9201      	str	r2, [sp, #4]
 800b596:	4603      	mov	r3, r0
 800b598:	4632      	mov	r2, r6
 800b59a:	4629      	mov	r1, r5
 800b59c:	4620      	mov	r0, r4
 800b59e:	9700      	str	r7, [sp, #0]
 800b5a0:	f001 fe62 	bl	800d268 <acc_confprogram_patch_offset>
 800b5a4:	f001 ffb0 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800b5a8:	2737      	movs	r7, #55	; 0x37
 800b5aa:	f8db 201c 	ldr.w	r2, [fp, #28]
 800b5ae:	9201      	str	r2, [sp, #4]
 800b5b0:	4603      	mov	r3, r0
 800b5b2:	4632      	mov	r2, r6
 800b5b4:	4629      	mov	r1, r5
 800b5b6:	4620      	mov	r0, r4
 800b5b8:	9700      	str	r7, [sp, #0]
 800b5ba:	f001 fe55 	bl	800d268 <acc_confprogram_patch_offset>
 800b5be:	f001 ffa3 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800b5c2:	2776      	movs	r7, #118	; 0x76
 800b5c4:	f8db 2020 	ldr.w	r2, [fp, #32]
 800b5c8:	9201      	str	r2, [sp, #4]
 800b5ca:	4603      	mov	r3, r0
 800b5cc:	4632      	mov	r2, r6
 800b5ce:	4629      	mov	r1, r5
 800b5d0:	4620      	mov	r0, r4
 800b5d2:	9700      	str	r7, [sp, #0]
 800b5d4:	f001 fe48 	bl	800d268 <acc_confprogram_patch_offset>
 800b5d8:	f001 ff96 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800b5dc:	2769      	movs	r7, #105	; 0x69
 800b5de:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 800b5e2:	9201      	str	r2, [sp, #4]
 800b5e4:	4603      	mov	r3, r0
 800b5e6:	4632      	mov	r2, r6
 800b5e8:	4629      	mov	r1, r5
 800b5ea:	4620      	mov	r0, r4
 800b5ec:	9700      	str	r7, [sp, #0]
 800b5ee:	f001 fe3b 	bl	800d268 <acc_confprogram_patch_offset>
 800b5f2:	f001 ff89 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800b5f6:	276a      	movs	r7, #106	; 0x6a
 800b5f8:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 800b5fc:	9201      	str	r2, [sp, #4]
 800b5fe:	4603      	mov	r3, r0
 800b600:	4632      	mov	r2, r6
 800b602:	4629      	mov	r1, r5
 800b604:	4620      	mov	r0, r4
 800b606:	9700      	str	r7, [sp, #0]
 800b608:	f001 fe2e 	bl	800d268 <acc_confprogram_patch_offset>
 800b60c:	f001 ff7c 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800b610:	2719      	movs	r7, #25
 800b612:	f8db 2030 	ldr.w	r2, [fp, #48]	; 0x30
 800b616:	9201      	str	r2, [sp, #4]
 800b618:	4603      	mov	r3, r0
 800b61a:	4632      	mov	r2, r6
 800b61c:	4629      	mov	r1, r5
 800b61e:	4620      	mov	r0, r4
 800b620:	9700      	str	r7, [sp, #0]
 800b622:	f001 fe21 	bl	800d268 <acc_confprogram_patch_offset>
 800b626:	f001 ff6f 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800b62a:	271a      	movs	r7, #26
 800b62c:	f8db 2034 	ldr.w	r2, [fp, #52]	; 0x34
 800b630:	9201      	str	r2, [sp, #4]
 800b632:	4603      	mov	r3, r0
 800b634:	4632      	mov	r2, r6
 800b636:	4629      	mov	r1, r5
 800b638:	4620      	mov	r0, r4
 800b63a:	9700      	str	r7, [sp, #0]
 800b63c:	f001 fe14 	bl	800d268 <acc_confprogram_patch_offset>
 800b640:	f001 ff62 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800b644:	271b      	movs	r7, #27
 800b646:	f8db 2038 	ldr.w	r2, [fp, #56]	; 0x38
 800b64a:	9201      	str	r2, [sp, #4]
 800b64c:	4603      	mov	r3, r0
 800b64e:	4632      	mov	r2, r6
 800b650:	4629      	mov	r1, r5
 800b652:	4620      	mov	r0, r4
 800b654:	9700      	str	r7, [sp, #0]
 800b656:	f001 fe07 	bl	800d268 <acc_confprogram_patch_offset>
 800b65a:	f001 ff55 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800b65e:	271c      	movs	r7, #28
 800b660:	f8db 203c 	ldr.w	r2, [fp, #60]	; 0x3c
 800b664:	9201      	str	r2, [sp, #4]
 800b666:	4603      	mov	r3, r0
 800b668:	4632      	mov	r2, r6
 800b66a:	4629      	mov	r1, r5
 800b66c:	4620      	mov	r0, r4
 800b66e:	9700      	str	r7, [sp, #0]
 800b670:	f001 fdfa 	bl	800d268 <acc_confprogram_patch_offset>
 800b674:	f001 ff48 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800b678:	271d      	movs	r7, #29
 800b67a:	f8db 2040 	ldr.w	r2, [fp, #64]	; 0x40
 800b67e:	9201      	str	r2, [sp, #4]
 800b680:	4603      	mov	r3, r0
 800b682:	4632      	mov	r2, r6
 800b684:	4629      	mov	r1, r5
 800b686:	4620      	mov	r0, r4
 800b688:	9700      	str	r7, [sp, #0]
 800b68a:	f001 fded 	bl	800d268 <acc_confprogram_patch_offset>
 800b68e:	f001 ff3b 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800b692:	271e      	movs	r7, #30
 800b694:	f8db 2044 	ldr.w	r2, [fp, #68]	; 0x44
 800b698:	9201      	str	r2, [sp, #4]
 800b69a:	4603      	mov	r3, r0
 800b69c:	4632      	mov	r2, r6
 800b69e:	4629      	mov	r1, r5
 800b6a0:	4620      	mov	r0, r4
 800b6a2:	9700      	str	r7, [sp, #0]
 800b6a4:	f001 fde0 	bl	800d268 <acc_confprogram_patch_offset>
 800b6a8:	f001 ff2e 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800b6ac:	2755      	movs	r7, #85	; 0x55
 800b6ae:	f8db 2048 	ldr.w	r2, [fp, #72]	; 0x48
 800b6b2:	9201      	str	r2, [sp, #4]
 800b6b4:	4603      	mov	r3, r0
 800b6b6:	4632      	mov	r2, r6
 800b6b8:	4629      	mov	r1, r5
 800b6ba:	4620      	mov	r0, r4
 800b6bc:	9700      	str	r7, [sp, #0]
 800b6be:	f001 fdd3 	bl	800d268 <acc_confprogram_patch_offset>
 800b6c2:	f001 ff21 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800b6c6:	2756      	movs	r7, #86	; 0x56
 800b6c8:	f8db 204c 	ldr.w	r2, [fp, #76]	; 0x4c
 800b6cc:	9201      	str	r2, [sp, #4]
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	4632      	mov	r2, r6
 800b6d2:	4629      	mov	r1, r5
 800b6d4:	4620      	mov	r0, r4
 800b6d6:	9700      	str	r7, [sp, #0]
 800b6d8:	f001 fdc6 	bl	800d268 <acc_confprogram_patch_offset>
 800b6dc:	f001 ff14 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800b6e0:	2758      	movs	r7, #88	; 0x58
 800b6e2:	f8db 2050 	ldr.w	r2, [fp, #80]	; 0x50
 800b6e6:	9201      	str	r2, [sp, #4]
 800b6e8:	4603      	mov	r3, r0
 800b6ea:	4632      	mov	r2, r6
 800b6ec:	4629      	mov	r1, r5
 800b6ee:	4620      	mov	r0, r4
 800b6f0:	9700      	str	r7, [sp, #0]
 800b6f2:	f001 fdb9 	bl	800d268 <acc_confprogram_patch_offset>
 800b6f6:	f001 ff07 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800b6fa:	276b      	movs	r7, #107	; 0x6b
 800b6fc:	f8db 2054 	ldr.w	r2, [fp, #84]	; 0x54
 800b700:	9201      	str	r2, [sp, #4]
 800b702:	4603      	mov	r3, r0
 800b704:	4632      	mov	r2, r6
 800b706:	4629      	mov	r1, r5
 800b708:	4620      	mov	r0, r4
 800b70a:	9700      	str	r7, [sp, #0]
 800b70c:	f001 fdac 	bl	800d268 <acc_confprogram_patch_offset>
 800b710:	f001 fefa 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800b714:	2786      	movs	r7, #134	; 0x86
 800b716:	f8db 2058 	ldr.w	r2, [fp, #88]	; 0x58
 800b71a:	9201      	str	r2, [sp, #4]
 800b71c:	4603      	mov	r3, r0
 800b71e:	4632      	mov	r2, r6
 800b720:	4629      	mov	r1, r5
 800b722:	4620      	mov	r0, r4
 800b724:	9700      	str	r7, [sp, #0]
 800b726:	f001 fd9f 	bl	800d268 <acc_confprogram_patch_offset>
 800b72a:	f001 feed 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800b72e:	2764      	movs	r7, #100	; 0x64
 800b730:	f8db 205c 	ldr.w	r2, [fp, #92]	; 0x5c
 800b734:	9201      	str	r2, [sp, #4]
 800b736:	4603      	mov	r3, r0
 800b738:	4632      	mov	r2, r6
 800b73a:	4629      	mov	r1, r5
 800b73c:	4620      	mov	r0, r4
 800b73e:	9700      	str	r7, [sp, #0]
 800b740:	f001 fd92 	bl	800d268 <acc_confprogram_patch_offset>
 800b744:	f001 fee0 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800b748:	2765      	movs	r7, #101	; 0x65
 800b74a:	f8db 2060 	ldr.w	r2, [fp, #96]	; 0x60
 800b74e:	9201      	str	r2, [sp, #4]
 800b750:	4603      	mov	r3, r0
 800b752:	4632      	mov	r2, r6
 800b754:	4629      	mov	r1, r5
 800b756:	4620      	mov	r0, r4
 800b758:	9700      	str	r7, [sp, #0]
 800b75a:	f001 fd85 	bl	800d268 <acc_confprogram_patch_offset>
 800b75e:	f001 fed3 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800b762:	2740      	movs	r7, #64	; 0x40
 800b764:	f8db 2064 	ldr.w	r2, [fp, #100]	; 0x64
 800b768:	9201      	str	r2, [sp, #4]
 800b76a:	4603      	mov	r3, r0
 800b76c:	4632      	mov	r2, r6
 800b76e:	4629      	mov	r1, r5
 800b770:	4620      	mov	r0, r4
 800b772:	9700      	str	r7, [sp, #0]
 800b774:	f001 fd78 	bl	800d268 <acc_confprogram_patch_offset>
 800b778:	f001 fec6 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800b77c:	2741      	movs	r7, #65	; 0x41
 800b77e:	f8db 2068 	ldr.w	r2, [fp, #104]	; 0x68
 800b782:	9201      	str	r2, [sp, #4]
 800b784:	4603      	mov	r3, r0
 800b786:	4632      	mov	r2, r6
 800b788:	4629      	mov	r1, r5
 800b78a:	4620      	mov	r0, r4
 800b78c:	9700      	str	r7, [sp, #0]
 800b78e:	f001 fd6b 	bl	800d268 <acc_confprogram_patch_offset>
 800b792:	f001 feb9 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800b796:	2772      	movs	r7, #114	; 0x72
 800b798:	f8db 206c 	ldr.w	r2, [fp, #108]	; 0x6c
 800b79c:	9201      	str	r2, [sp, #4]
 800b79e:	4603      	mov	r3, r0
 800b7a0:	4632      	mov	r2, r6
 800b7a2:	4629      	mov	r1, r5
 800b7a4:	4620      	mov	r0, r4
 800b7a6:	9700      	str	r7, [sp, #0]
 800b7a8:	f001 fd5e 	bl	800d268 <acc_confprogram_patch_offset>
 800b7ac:	f001 feac 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800b7b0:	2754      	movs	r7, #84	; 0x54
 800b7b2:	f8db 2070 	ldr.w	r2, [fp, #112]	; 0x70
 800b7b6:	9201      	str	r2, [sp, #4]
 800b7b8:	4603      	mov	r3, r0
 800b7ba:	4632      	mov	r2, r6
 800b7bc:	4629      	mov	r1, r5
 800b7be:	4620      	mov	r0, r4
 800b7c0:	9700      	str	r7, [sp, #0]
 800b7c2:	f001 fd51 	bl	800d268 <acc_confprogram_patch_offset>
 800b7c6:	f001 fe9f 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800b7ca:	2739      	movs	r7, #57	; 0x39
 800b7cc:	f8db 2074 	ldr.w	r2, [fp, #116]	; 0x74
 800b7d0:	9201      	str	r2, [sp, #4]
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	4632      	mov	r2, r6
 800b7d6:	4629      	mov	r1, r5
 800b7d8:	4620      	mov	r0, r4
 800b7da:	9700      	str	r7, [sp, #0]
 800b7dc:	f001 fd44 	bl	800d268 <acc_confprogram_patch_offset>
 800b7e0:	f8db 3074 	ldr.w	r3, [fp, #116]	; 0x74
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	f040 8239 	bne.w	800bc5c <acc_cpd_linear_sweep_load_program+0x904>
 800b7ea:	f001 fe8d 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800b7ee:	f8db 2078 	ldr.w	r2, [fp, #120]	; 0x78
 800b7f2:	9201      	str	r2, [sp, #4]
 800b7f4:	2251      	movs	r2, #81	; 0x51
 800b7f6:	4603      	mov	r3, r0
 800b7f8:	4629      	mov	r1, r5
 800b7fa:	9200      	str	r2, [sp, #0]
 800b7fc:	4620      	mov	r0, r4
 800b7fe:	4632      	mov	r2, r6
 800b800:	f001 fd32 	bl	800d268 <acc_confprogram_patch_offset>
 800b804:	f001 fe80 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800b808:	f8db 207c 	ldr.w	r2, [fp, #124]	; 0x7c
 800b80c:	9201      	str	r2, [sp, #4]
 800b80e:	2277      	movs	r2, #119	; 0x77
 800b810:	4603      	mov	r3, r0
 800b812:	4629      	mov	r1, r5
 800b814:	9200      	str	r2, [sp, #0]
 800b816:	4620      	mov	r0, r4
 800b818:	4632      	mov	r2, r6
 800b81a:	f001 fd25 	bl	800d268 <acc_confprogram_patch_offset>
 800b81e:	f001 fe73 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800b822:	f8db 2080 	ldr.w	r2, [fp, #128]	; 0x80
 800b826:	9201      	str	r2, [sp, #4]
 800b828:	2244      	movs	r2, #68	; 0x44
 800b82a:	4603      	mov	r3, r0
 800b82c:	4629      	mov	r1, r5
 800b82e:	9200      	str	r2, [sp, #0]
 800b830:	4620      	mov	r0, r4
 800b832:	4632      	mov	r2, r6
 800b834:	f001 fd18 	bl	800d268 <acc_confprogram_patch_offset>
 800b838:	f001 fe66 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800b83c:	f8db 2084 	ldr.w	r2, [fp, #132]	; 0x84
 800b840:	9201      	str	r2, [sp, #4]
 800b842:	2243      	movs	r2, #67	; 0x43
 800b844:	4603      	mov	r3, r0
 800b846:	9200      	str	r2, [sp, #0]
 800b848:	4629      	mov	r1, r5
 800b84a:	4632      	mov	r2, r6
 800b84c:	4620      	mov	r0, r4
 800b84e:	f001 fd0b 	bl	800d268 <acc_confprogram_patch_offset>
 800b852:	f8db 7088 	ldr.w	r7, [fp, #136]	; 0x88
 800b856:	b2bb      	uxth	r3, r7
 800b858:	2b08      	cmp	r3, #8
 800b85a:	f200 81e7 	bhi.w	800bc2c <acc_cpd_linear_sweep_load_program+0x8d4>
 800b85e:	4698      	mov	r8, r3
 800b860:	2700      	movs	r7, #0
 800b862:	f001 fe51 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800b866:	226c      	movs	r2, #108	; 0x6c
 800b868:	4603      	mov	r3, r0
 800b86a:	e9cd 2800 	strd	r2, r8, [sp]
 800b86e:	4629      	mov	r1, r5
 800b870:	4632      	mov	r2, r6
 800b872:	4620      	mov	r0, r4
 800b874:	f001 fcf8 	bl	800d268 <acc_confprogram_patch_offset>
 800b878:	f001 fe46 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800b87c:	2259      	movs	r2, #89	; 0x59
 800b87e:	4603      	mov	r3, r0
 800b880:	e9cd 2800 	strd	r2, r8, [sp]
 800b884:	4629      	mov	r1, r5
 800b886:	4632      	mov	r2, r6
 800b888:	4620      	mov	r0, r4
 800b88a:	f001 fced 	bl	800d268 <acc_confprogram_patch_offset>
 800b88e:	f001 fe3b 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800b892:	216e      	movs	r1, #110	; 0x6e
 800b894:	f001 fdd2 	bl	800d43c <acc_confprogram_get_default_value>
 800b898:	900a      	str	r0, [sp, #40]	; 0x28
 800b89a:	f001 fe35 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800b89e:	2170      	movs	r1, #112	; 0x70
 800b8a0:	f001 fdcc 	bl	800d43c <acc_confprogram_get_default_value>
 800b8a4:	9003      	str	r0, [sp, #12]
 800b8a6:	f001 fe2f 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800b8aa:	216f      	movs	r1, #111	; 0x6f
 800b8ac:	f001 fdc6 	bl	800d43c <acc_confprogram_get_default_value>
 800b8b0:	9004      	str	r0, [sp, #16]
 800b8b2:	f001 fe29 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800b8b6:	215b      	movs	r1, #91	; 0x5b
 800b8b8:	f001 fdc0 	bl	800d43c <acc_confprogram_get_default_value>
 800b8bc:	4680      	mov	r8, r0
 800b8be:	f001 fe23 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800b8c2:	215d      	movs	r1, #93	; 0x5d
 800b8c4:	f001 fdba 	bl	800d43c <acc_confprogram_get_default_value>
 800b8c8:	9005      	str	r0, [sp, #20]
 800b8ca:	f001 fe1d 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800b8ce:	215c      	movs	r1, #92	; 0x5c
 800b8d0:	f001 fdb4 	bl	800d43c <acc_confprogram_get_default_value>
 800b8d4:	9006      	str	r0, [sp, #24]
 800b8d6:	f001 fe17 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800b8da:	214a      	movs	r1, #74	; 0x4a
 800b8dc:	f001 fdae 	bl	800d43c <acc_confprogram_get_default_value>
 800b8e0:	9007      	str	r0, [sp, #28]
 800b8e2:	f001 fe11 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800b8e6:	2145      	movs	r1, #69	; 0x45
 800b8e8:	f001 fda8 	bl	800d43c <acc_confprogram_get_default_value>
 800b8ec:	9008      	str	r0, [sp, #32]
 800b8ee:	f001 fe0b 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800b8f2:	2122      	movs	r1, #34	; 0x22
 800b8f4:	f001 fda2 	bl	800d43c <acc_confprogram_get_default_value>
 800b8f8:	9009      	str	r0, [sp, #36]	; 0x24
 800b8fa:	f001 fe05 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800b8fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b900:	216e      	movs	r1, #110	; 0x6e
 800b902:	433a      	orrs	r2, r7
 800b904:	4603      	mov	r3, r0
 800b906:	9201      	str	r2, [sp, #4]
 800b908:	9100      	str	r1, [sp, #0]
 800b90a:	4632      	mov	r2, r6
 800b90c:	4629      	mov	r1, r5
 800b90e:	4620      	mov	r0, r4
 800b910:	f001 fcaa 	bl	800d268 <acc_confprogram_patch_offset>
 800b914:	f001 fdf8 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800b918:	9a03      	ldr	r2, [sp, #12]
 800b91a:	2170      	movs	r1, #112	; 0x70
 800b91c:	433a      	orrs	r2, r7
 800b91e:	4603      	mov	r3, r0
 800b920:	9201      	str	r2, [sp, #4]
 800b922:	9100      	str	r1, [sp, #0]
 800b924:	4632      	mov	r2, r6
 800b926:	4629      	mov	r1, r5
 800b928:	4620      	mov	r0, r4
 800b92a:	f001 fc9d 	bl	800d268 <acc_confprogram_patch_offset>
 800b92e:	f001 fdeb 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800b932:	9a04      	ldr	r2, [sp, #16]
 800b934:	216f      	movs	r1, #111	; 0x6f
 800b936:	433a      	orrs	r2, r7
 800b938:	4603      	mov	r3, r0
 800b93a:	e9cd 1200 	strd	r1, r2, [sp]
 800b93e:	4620      	mov	r0, r4
 800b940:	4632      	mov	r2, r6
 800b942:	4629      	mov	r1, r5
 800b944:	f001 fc90 	bl	800d268 <acc_confprogram_patch_offset>
 800b948:	f001 fdde 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800b94c:	ea48 0207 	orr.w	r2, r8, r7
 800b950:	215b      	movs	r1, #91	; 0x5b
 800b952:	4603      	mov	r3, r0
 800b954:	e9cd 1200 	strd	r1, r2, [sp]
 800b958:	4620      	mov	r0, r4
 800b95a:	4632      	mov	r2, r6
 800b95c:	4629      	mov	r1, r5
 800b95e:	f001 fc83 	bl	800d268 <acc_confprogram_patch_offset>
 800b962:	f001 fdd1 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800b966:	9a05      	ldr	r2, [sp, #20]
 800b968:	215d      	movs	r1, #93	; 0x5d
 800b96a:	433a      	orrs	r2, r7
 800b96c:	4603      	mov	r3, r0
 800b96e:	e9cd 1200 	strd	r1, r2, [sp]
 800b972:	4620      	mov	r0, r4
 800b974:	4632      	mov	r2, r6
 800b976:	4629      	mov	r1, r5
 800b978:	f001 fc76 	bl	800d268 <acc_confprogram_patch_offset>
 800b97c:	f001 fdc4 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800b980:	9a06      	ldr	r2, [sp, #24]
 800b982:	215c      	movs	r1, #92	; 0x5c
 800b984:	433a      	orrs	r2, r7
 800b986:	4603      	mov	r3, r0
 800b988:	e9cd 1200 	strd	r1, r2, [sp]
 800b98c:	4620      	mov	r0, r4
 800b98e:	4632      	mov	r2, r6
 800b990:	4629      	mov	r1, r5
 800b992:	f001 fc69 	bl	800d268 <acc_confprogram_patch_offset>
 800b996:	f001 fdb7 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800b99a:	9a07      	ldr	r2, [sp, #28]
 800b99c:	214a      	movs	r1, #74	; 0x4a
 800b99e:	433a      	orrs	r2, r7
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	e9cd 1200 	strd	r1, r2, [sp]
 800b9a6:	4620      	mov	r0, r4
 800b9a8:	4632      	mov	r2, r6
 800b9aa:	4629      	mov	r1, r5
 800b9ac:	f001 fc5c 	bl	800d268 <acc_confprogram_patch_offset>
 800b9b0:	f001 fdaa 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800b9b4:	9a08      	ldr	r2, [sp, #32]
 800b9b6:	2145      	movs	r1, #69	; 0x45
 800b9b8:	433a      	orrs	r2, r7
 800b9ba:	4603      	mov	r3, r0
 800b9bc:	e9cd 1200 	strd	r1, r2, [sp]
 800b9c0:	4620      	mov	r0, r4
 800b9c2:	4632      	mov	r2, r6
 800b9c4:	4629      	mov	r1, r5
 800b9c6:	f001 fc4f 	bl	800d268 <acc_confprogram_patch_offset>
 800b9ca:	f001 fd9d 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800b9ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b9d0:	433a      	orrs	r2, r7
 800b9d2:	4617      	mov	r7, r2
 800b9d4:	2222      	movs	r2, #34	; 0x22
 800b9d6:	4629      	mov	r1, r5
 800b9d8:	4603      	mov	r3, r0
 800b9da:	e9cd 2700 	strd	r2, r7, [sp]
 800b9de:	4620      	mov	r0, r4
 800b9e0:	4632      	mov	r2, r6
 800b9e2:	f001 fc41 	bl	800d268 <acc_confprogram_patch_offset>
 800b9e6:	f001 fd8f 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800b9ea:	f8db 2090 	ldr.w	r2, [fp, #144]	; 0x90
 800b9ee:	2a05      	cmp	r2, #5
 800b9f0:	bf8c      	ite	hi
 800b9f2:	2164      	movhi	r1, #100	; 0x64
 800b9f4:	2144      	movls	r1, #68	; 0x44
 800b9f6:	2205      	movs	r2, #5
 800b9f8:	4603      	mov	r3, r0
 800b9fa:	e9cd 2100 	strd	r2, r1, [sp]
 800b9fe:	4620      	mov	r0, r4
 800ba00:	4632      	mov	r2, r6
 800ba02:	4629      	mov	r1, r5
 800ba04:	f001 fc30 	bl	800d268 <acc_confprogram_patch_offset>
 800ba08:	f001 fd7e 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800ba0c:	f8db 2090 	ldr.w	r2, [fp, #144]	; 0x90
 800ba10:	0152      	lsls	r2, r2, #5
 800ba12:	3a03      	subs	r2, #3
 800ba14:	2124      	movs	r1, #36	; 0x24
 800ba16:	4603      	mov	r3, r0
 800ba18:	e9cd 1200 	strd	r1, r2, [sp]
 800ba1c:	4620      	mov	r0, r4
 800ba1e:	4632      	mov	r2, r6
 800ba20:	4629      	mov	r1, r5
 800ba22:	f001 fc21 	bl	800d268 <acc_confprogram_patch_offset>
 800ba26:	f001 fd6f 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800ba2a:	f8db 2090 	ldr.w	r2, [fp, #144]	; 0x90
 800ba2e:	0152      	lsls	r2, r2, #5
 800ba30:	0852      	lsrs	r2, r2, #1
 800ba32:	3a03      	subs	r2, #3
 800ba34:	2125      	movs	r1, #37	; 0x25
 800ba36:	4603      	mov	r3, r0
 800ba38:	e9cd 1200 	strd	r1, r2, [sp]
 800ba3c:	4620      	mov	r0, r4
 800ba3e:	4632      	mov	r2, r6
 800ba40:	4629      	mov	r1, r5
 800ba42:	f001 fc11 	bl	800d268 <acc_confprogram_patch_offset>
 800ba46:	f001 fd5f 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800ba4a:	f8db 2094 	ldr.w	r2, [fp, #148]	; 0x94
 800ba4e:	9201      	str	r2, [sp, #4]
 800ba50:	2236      	movs	r2, #54	; 0x36
 800ba52:	4603      	mov	r3, r0
 800ba54:	4629      	mov	r1, r5
 800ba56:	9200      	str	r2, [sp, #0]
 800ba58:	4620      	mov	r0, r4
 800ba5a:	4632      	mov	r2, r6
 800ba5c:	f001 fc04 	bl	800d268 <acc_confprogram_patch_offset>
 800ba60:	f001 fd52 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800ba64:	f8db 2098 	ldr.w	r2, [fp, #152]	; 0x98
 800ba68:	215e      	movs	r1, #94	; 0x5e
 800ba6a:	320e      	adds	r2, #14
 800ba6c:	4603      	mov	r3, r0
 800ba6e:	e9cd 1200 	strd	r1, r2, [sp]
 800ba72:	4620      	mov	r0, r4
 800ba74:	4632      	mov	r2, r6
 800ba76:	4629      	mov	r1, r5
 800ba78:	f001 fbf6 	bl	800d268 <acc_confprogram_patch_offset>
 800ba7c:	f001 fd44 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800ba80:	2120      	movs	r1, #32
 800ba82:	f001 fcdb 	bl	800d43c <acc_confprogram_get_default_value>
 800ba86:	f8db 3090 	ldr.w	r3, [fp, #144]	; 0x90
 800ba8a:	2b05      	cmp	r3, #5
 800ba8c:	bf98      	it	ls
 800ba8e:	3002      	addls	r0, #2
 800ba90:	fbb0 f7f3 	udiv	r7, r0, r3
 800ba94:	fb03 0717 	mls	r7, r3, r7, r0
 800ba98:	b107      	cbz	r7, 800ba9c <acc_cpd_linear_sweep_load_program+0x744>
 800ba9a:	1bdf      	subs	r7, r3, r7
 800ba9c:	f8db 309c 	ldr.w	r3, [fp, #156]	; 0x9c
 800baa0:	eb07 0803 	add.w	r8, r7, r3
 800baa4:	f001 fd30 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800baa8:	221f      	movs	r2, #31
 800baaa:	4603      	mov	r3, r0
 800baac:	e9cd 2800 	strd	r2, r8, [sp]
 800bab0:	4629      	mov	r1, r5
 800bab2:	4632      	mov	r2, r6
 800bab4:	4620      	mov	r0, r4
 800bab6:	f001 fbd7 	bl	800d268 <acc_confprogram_patch_offset>
 800baba:	f8db 309c 	ldr.w	r3, [fp, #156]	; 0x9c
 800babe:	2b00      	cmp	r3, #0
 800bac0:	f040 809a 	bne.w	800bbf8 <acc_cpd_linear_sweep_load_program+0x8a0>
 800bac4:	f001 fd20 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800bac8:	213a      	movs	r1, #58	; 0x3a
 800baca:	f001 fcb7 	bl	800d43c <acc_confprogram_get_default_value>
 800bace:	f8db 3090 	ldr.w	r3, [fp, #144]	; 0x90
 800bad2:	2b05      	cmp	r3, #5
 800bad4:	bf8c      	ite	hi
 800bad6:	3007      	addhi	r0, #7
 800bad8:	3009      	addls	r0, #9
 800bada:	fbb0 f7f3 	udiv	r7, r0, r3
 800bade:	fb03 0717 	mls	r7, r3, r7, r0
 800bae2:	b107      	cbz	r7, 800bae6 <acc_cpd_linear_sweep_load_program+0x78e>
 800bae4:	1bdf      	subs	r7, r3, r7
 800bae6:	f8db 30a0 	ldr.w	r3, [fp, #160]	; 0xa0
 800baea:	eb07 0803 	add.w	r8, r7, r3
 800baee:	f001 fd0b 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800baf2:	2266      	movs	r2, #102	; 0x66
 800baf4:	4603      	mov	r3, r0
 800baf6:	e9cd 2800 	strd	r2, r8, [sp]
 800bafa:	4629      	mov	r1, r5
 800bafc:	4632      	mov	r2, r6
 800bafe:	4620      	mov	r0, r4
 800bb00:	f001 fbb2 	bl	800d268 <acc_confprogram_patch_offset>
 800bb04:	f8db 30a0 	ldr.w	r3, [fp, #160]	; 0xa0
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d15c      	bne.n	800bbc6 <acc_cpd_linear_sweep_load_program+0x86e>
 800bb0c:	f89b 308d 	ldrb.w	r3, [fp, #141]	; 0x8d
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d141      	bne.n	800bb98 <acc_cpd_linear_sweep_load_program+0x840>
 800bb14:	f8db 70a4 	ldr.w	r7, [fp, #164]	; 0xa4
 800bb18:	f001 fcf6 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800bb1c:	1e79      	subs	r1, r7, #1
 800bb1e:	2206      	movs	r2, #6
 800bb20:	4603      	mov	r3, r0
 800bb22:	e9cd 2100 	strd	r2, r1, [sp]
 800bb26:	4620      	mov	r0, r4
 800bb28:	4632      	mov	r2, r6
 800bb2a:	4629      	mov	r1, r5
 800bb2c:	f001 fb9c 	bl	800d268 <acc_confprogram_patch_offset>
 800bb30:	f001 fcea 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800bb34:	2204      	movs	r2, #4
 800bb36:	2163      	movs	r1, #99	; 0x63
 800bb38:	fbb2 f7f7 	udiv	r7, r2, r7
 800bb3c:	3f01      	subs	r7, #1
 800bb3e:	4603      	mov	r3, r0
 800bb40:	e9cd 1700 	strd	r1, r7, [sp]
 800bb44:	4632      	mov	r2, r6
 800bb46:	4629      	mov	r1, r5
 800bb48:	4620      	mov	r0, r4
 800bb4a:	f001 fb8d 	bl	800d268 <acc_confprogram_patch_offset>
 800bb4e:	f001 fcdb 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800bb52:	f8db 20a8 	ldr.w	r2, [fp, #168]	; 0xa8
 800bb56:	9201      	str	r2, [sp, #4]
 800bb58:	2261      	movs	r2, #97	; 0x61
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	4629      	mov	r1, r5
 800bb5e:	9200      	str	r2, [sp, #0]
 800bb60:	4620      	mov	r0, r4
 800bb62:	4632      	mov	r2, r6
 800bb64:	f001 fb80 	bl	800d268 <acc_confprogram_patch_offset>
 800bb68:	f001 fcce 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800bb6c:	f89b 20ad 	ldrb.w	r2, [fp, #173]	; 0xad
 800bb70:	9201      	str	r2, [sp, #4]
 800bb72:	2246      	movs	r2, #70	; 0x46
 800bb74:	4603      	mov	r3, r0
 800bb76:	9200      	str	r2, [sp, #0]
 800bb78:	4629      	mov	r1, r5
 800bb7a:	4632      	mov	r2, r6
 800bb7c:	4620      	mov	r0, r4
 800bb7e:	f001 fb73 	bl	800d268 <acc_confprogram_patch_offset>
 800bb82:	f89b 70ad 	ldrb.w	r7, [fp, #173]	; 0xad
 800bb86:	2f00      	cmp	r7, #0
 800bb88:	f47f ac24 	bne.w	800b3d4 <acc_cpd_linear_sweep_load_program+0x7c>
 800bb8c:	f001 fcbc 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800bb90:	2223      	movs	r2, #35	; 0x23
 800bb92:	4603      	mov	r3, r0
 800bb94:	9701      	str	r7, [sp, #4]
 800bb96:	e447      	b.n	800b428 <acc_cpd_linear_sweep_load_program+0xd0>
 800bb98:	f001 fcb6 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800bb9c:	223b      	movs	r2, #59	; 0x3b
 800bb9e:	2100      	movs	r1, #0
 800bba0:	e9cd 2100 	strd	r2, r1, [sp]
 800bba4:	4603      	mov	r3, r0
 800bba6:	4632      	mov	r2, r6
 800bba8:	4629      	mov	r1, r5
 800bbaa:	4620      	mov	r0, r4
 800bbac:	f001 fb5c 	bl	800d268 <acc_confprogram_patch_offset>
 800bbb0:	f7fa fd64 	bl	800667c <acc_rss_integration_log_level>
 800bbb4:	2801      	cmp	r0, #1
 800bbb6:	d9ad      	bls.n	800bb14 <acc_cpd_linear_sweep_load_program+0x7bc>
 800bbb8:	4b7b      	ldr	r3, [pc, #492]	; (800bda8 <acc_cpd_linear_sweep_load_program+0xa50>)
 800bbba:	4a7c      	ldr	r2, [pc, #496]	; (800bdac <acc_cpd_linear_sweep_load_program+0xa54>)
 800bbbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbbe:	497c      	ldr	r1, [pc, #496]	; (800bdb0 <acc_cpd_linear_sweep_load_program+0xa58>)
 800bbc0:	2002      	movs	r0, #2
 800bbc2:	4798      	blx	r3
 800bbc4:	e7a6      	b.n	800bb14 <acc_cpd_linear_sweep_load_program+0x7bc>
 800bbc6:	f7fa fd59 	bl	800667c <acc_rss_integration_log_level>
 800bbca:	2801      	cmp	r0, #1
 800bbcc:	d908      	bls.n	800bbe0 <acc_cpd_linear_sweep_load_program+0x888>
 800bbce:	4b76      	ldr	r3, [pc, #472]	; (800bda8 <acc_cpd_linear_sweep_load_program+0xa50>)
 800bbd0:	4a78      	ldr	r2, [pc, #480]	; (800bdb4 <acc_cpd_linear_sweep_load_program+0xa5c>)
 800bbd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbd4:	9303      	str	r3, [sp, #12]
 800bbd6:	4976      	ldr	r1, [pc, #472]	; (800bdb0 <acc_cpd_linear_sweep_load_program+0xa58>)
 800bbd8:	463b      	mov	r3, r7
 800bbda:	2002      	movs	r0, #2
 800bbdc:	9f03      	ldr	r7, [sp, #12]
 800bbde:	47b8      	blx	r7
 800bbe0:	f7fa fd4c 	bl	800667c <acc_rss_integration_log_level>
 800bbe4:	2801      	cmp	r0, #1
 800bbe6:	d991      	bls.n	800bb0c <acc_cpd_linear_sweep_load_program+0x7b4>
 800bbe8:	4b6f      	ldr	r3, [pc, #444]	; (800bda8 <acc_cpd_linear_sweep_load_program+0xa50>)
 800bbea:	4a73      	ldr	r2, [pc, #460]	; (800bdb8 <acc_cpd_linear_sweep_load_program+0xa60>)
 800bbec:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 800bbee:	4970      	ldr	r1, [pc, #448]	; (800bdb0 <acc_cpd_linear_sweep_load_program+0xa58>)
 800bbf0:	4643      	mov	r3, r8
 800bbf2:	2002      	movs	r0, #2
 800bbf4:	47b8      	blx	r7
 800bbf6:	e789      	b.n	800bb0c <acc_cpd_linear_sweep_load_program+0x7b4>
 800bbf8:	f7fa fd40 	bl	800667c <acc_rss_integration_log_level>
 800bbfc:	2801      	cmp	r0, #1
 800bbfe:	d908      	bls.n	800bc12 <acc_cpd_linear_sweep_load_program+0x8ba>
 800bc00:	4b69      	ldr	r3, [pc, #420]	; (800bda8 <acc_cpd_linear_sweep_load_program+0xa50>)
 800bc02:	4a6e      	ldr	r2, [pc, #440]	; (800bdbc <acc_cpd_linear_sweep_load_program+0xa64>)
 800bc04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc06:	9303      	str	r3, [sp, #12]
 800bc08:	4969      	ldr	r1, [pc, #420]	; (800bdb0 <acc_cpd_linear_sweep_load_program+0xa58>)
 800bc0a:	463b      	mov	r3, r7
 800bc0c:	2002      	movs	r0, #2
 800bc0e:	9f03      	ldr	r7, [sp, #12]
 800bc10:	47b8      	blx	r7
 800bc12:	f7fa fd33 	bl	800667c <acc_rss_integration_log_level>
 800bc16:	2801      	cmp	r0, #1
 800bc18:	f67f af54 	bls.w	800bac4 <acc_cpd_linear_sweep_load_program+0x76c>
 800bc1c:	4b62      	ldr	r3, [pc, #392]	; (800bda8 <acc_cpd_linear_sweep_load_program+0xa50>)
 800bc1e:	4a68      	ldr	r2, [pc, #416]	; (800bdc0 <acc_cpd_linear_sweep_load_program+0xa68>)
 800bc20:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 800bc22:	4963      	ldr	r1, [pc, #396]	; (800bdb0 <acc_cpd_linear_sweep_load_program+0xa58>)
 800bc24:	4643      	mov	r3, r8
 800bc26:	2002      	movs	r0, #2
 800bc28:	47b8      	blx	r7
 800bc2a:	e74b      	b.n	800bac4 <acc_cpd_linear_sweep_load_program+0x76c>
 800bc2c:	f001 fc6c 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800bc30:	fa1f f887 	uxth.w	r8, r7
 800bc34:	2267      	movs	r2, #103	; 0x67
 800bc36:	2102      	movs	r1, #2
 800bc38:	f1a8 0808 	sub.w	r8, r8, #8
 800bc3c:	27ff      	movs	r7, #255	; 0xff
 800bc3e:	e9cd 2100 	strd	r2, r1, [sp]
 800bc42:	4603      	mov	r3, r0
 800bc44:	fa07 f708 	lsl.w	r7, r7, r8
 800bc48:	4632      	mov	r2, r6
 800bc4a:	4629      	mov	r1, r5
 800bc4c:	4620      	mov	r0, r4
 800bc4e:	f001 fb0b 	bl	800d268 <acc_confprogram_patch_offset>
 800bc52:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 800bc56:	f04f 0808 	mov.w	r8, #8
 800bc5a:	e602      	b.n	800b862 <acc_cpd_linear_sweep_load_program+0x50a>
 800bc5c:	f001 fc54 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800bc60:	2210      	movs	r2, #16
 800bc62:	2101      	movs	r1, #1
 800bc64:	e9cd 2100 	strd	r2, r1, [sp]
 800bc68:	4603      	mov	r3, r0
 800bc6a:	4632      	mov	r2, r6
 800bc6c:	4629      	mov	r1, r5
 800bc6e:	4620      	mov	r0, r4
 800bc70:	f001 fafa 	bl	800d268 <acc_confprogram_patch_offset>
 800bc74:	f001 fc48 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800bc78:	f64f 7880 	movw	r8, #65408	; 0xff80
 800bc7c:	2212      	movs	r2, #18
 800bc7e:	4603      	mov	r3, r0
 800bc80:	4629      	mov	r1, r5
 800bc82:	e9cd 2800 	strd	r2, r8, [sp]
 800bc86:	4620      	mov	r0, r4
 800bc88:	4632      	mov	r2, r6
 800bc8a:	f001 faed 	bl	800d268 <acc_confprogram_patch_offset>
 800bc8e:	f001 fc3b 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800bc92:	2707      	movs	r7, #7
 800bc94:	2214      	movs	r2, #20
 800bc96:	4603      	mov	r3, r0
 800bc98:	4629      	mov	r1, r5
 800bc9a:	e9cd 2700 	strd	r2, r7, [sp]
 800bc9e:	4620      	mov	r0, r4
 800bca0:	4632      	mov	r2, r6
 800bca2:	f001 fae1 	bl	800d268 <acc_confprogram_patch_offset>
 800bca6:	f001 fc2f 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800bcaa:	2211      	movs	r2, #17
 800bcac:	4603      	mov	r3, r0
 800bcae:	4629      	mov	r1, r5
 800bcb0:	e9cd 2800 	strd	r2, r8, [sp]
 800bcb4:	4620      	mov	r0, r4
 800bcb6:	4632      	mov	r2, r6
 800bcb8:	f001 fad6 	bl	800d268 <acc_confprogram_patch_offset>
 800bcbc:	f001 fc24 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800bcc0:	2213      	movs	r2, #19
 800bcc2:	2100      	movs	r1, #0
 800bcc4:	e9cd 2100 	strd	r2, r1, [sp]
 800bcc8:	4603      	mov	r3, r0
 800bcca:	4632      	mov	r2, r6
 800bccc:	4629      	mov	r1, r5
 800bcce:	4620      	mov	r0, r4
 800bcd0:	f001 faca 	bl	800d268 <acc_confprogram_patch_offset>
 800bcd4:	f001 fc18 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800bcd8:	2215      	movs	r2, #21
 800bcda:	f64f 71c0 	movw	r1, #65472	; 0xffc0
 800bcde:	e9cd 2100 	strd	r2, r1, [sp]
 800bce2:	4603      	mov	r3, r0
 800bce4:	4632      	mov	r2, r6
 800bce6:	4629      	mov	r1, r5
 800bce8:	4620      	mov	r0, r4
 800bcea:	f001 fabd 	bl	800d268 <acc_confprogram_patch_offset>
 800bcee:	f001 fc0b 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800bcf2:	2216      	movs	r2, #22
 800bcf4:	4603      	mov	r3, r0
 800bcf6:	4629      	mov	r1, r5
 800bcf8:	e9cd 2700 	strd	r2, r7, [sp]
 800bcfc:	4620      	mov	r0, r4
 800bcfe:	4632      	mov	r2, r6
 800bd00:	f001 fab2 	bl	800d268 <acc_confprogram_patch_offset>
 800bd04:	f001 fc00 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800bd08:	220e      	movs	r2, #14
 800bd0a:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 800bd0e:	e9cd 2100 	strd	r2, r1, [sp]
 800bd12:	4603      	mov	r3, r0
 800bd14:	4632      	mov	r2, r6
 800bd16:	4629      	mov	r1, r5
 800bd18:	4620      	mov	r0, r4
 800bd1a:	f001 faa5 	bl	800d268 <acc_confprogram_patch_offset>
 800bd1e:	f001 fbf3 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800bd22:	220f      	movs	r2, #15
 800bd24:	4603      	mov	r3, r0
 800bd26:	4629      	mov	r1, r5
 800bd28:	e9cd 2700 	strd	r2, r7, [sp]
 800bd2c:	4620      	mov	r0, r4
 800bd2e:	4632      	mov	r2, r6
 800bd30:	f001 fa9a 	bl	800d268 <acc_confprogram_patch_offset>
 800bd34:	f001 fbe8 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800bd38:	2217      	movs	r2, #23
 800bd3a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800bd3e:	e9cd 2100 	strd	r2, r1, [sp]
 800bd42:	4603      	mov	r3, r0
 800bd44:	4632      	mov	r2, r6
 800bd46:	4629      	mov	r1, r5
 800bd48:	4620      	mov	r0, r4
 800bd4a:	f001 fa8d 	bl	800d268 <acc_confprogram_patch_offset>
 800bd4e:	f001 fbdb 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800bd52:	2218      	movs	r2, #24
 800bd54:	e9cd 2700 	strd	r2, r7, [sp]
 800bd58:	4603      	mov	r3, r0
 800bd5a:	4632      	mov	r2, r6
 800bd5c:	4629      	mov	r1, r5
 800bd5e:	4620      	mov	r0, r4
 800bd60:	f001 fa82 	bl	800d268 <acc_confprogram_patch_offset>
 800bd64:	e541      	b.n	800b7ea <acc_cpd_linear_sweep_load_program+0x492>
 800bd66:	f001 fbcf 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800bd6a:	2732      	movs	r7, #50	; 0x32
 800bd6c:	f8db 20b8 	ldr.w	r2, [fp, #184]	; 0xb8
 800bd70:	9201      	str	r2, [sp, #4]
 800bd72:	4603      	mov	r3, r0
 800bd74:	4632      	mov	r2, r6
 800bd76:	4629      	mov	r1, r5
 800bd78:	4620      	mov	r0, r4
 800bd7a:	9700      	str	r7, [sp, #0]
 800bd7c:	f001 fa74 	bl	800d268 <acc_confprogram_patch_offset>
 800bd80:	f7ff bb8c 	b.w	800b49c <acc_cpd_linear_sweep_load_program+0x144>
 800bd84:	f7fa fc7a 	bl	800667c <acc_rss_integration_log_level>
 800bd88:	2803      	cmp	r0, #3
 800bd8a:	f67f ab03 	bls.w	800b394 <acc_cpd_linear_sweep_load_program+0x3c>
 800bd8e:	4b06      	ldr	r3, [pc, #24]	; (800bda8 <acc_cpd_linear_sweep_load_program+0xa50>)
 800bd90:	4a0c      	ldr	r2, [pc, #48]	; (800bdc4 <acc_cpd_linear_sweep_load_program+0xa6c>)
 800bd92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd94:	4906      	ldr	r1, [pc, #24]	; (800bdb0 <acc_cpd_linear_sweep_load_program+0xa58>)
 800bd96:	2004      	movs	r0, #4
 800bd98:	4798      	blx	r3
 800bd9a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800bd9c:	b00f      	add	sp, #60	; 0x3c
 800bd9e:	ecbd 8b04 	vpop	{d8-d9}
 800bda2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bda6:	bf00      	nop
 800bda8:	20000640 	.word	0x20000640
 800bdac:	08014c30 	.word	0x08014c30
 800bdb0:	08014b5c 	.word	0x08014b5c
 800bdb4:	08014be0 	.word	0x08014be0
 800bdb8:	08014c08 	.word	0x08014c08
 800bdbc:	08014b70 	.word	0x08014b70
 800bdc0:	08014ba8 	.word	0x08014ba8
 800bdc4:	08014c4c 	.word	0x08014c4c

0800bdc8 <acc_cpd_linear_sweep_run_program>:
 800bdc8:	f240 213b 	movw	r1, #571	; 0x23b
 800bdcc:	f7fc baaa 	b.w	8008324 <acc_sensor_protocol_r2_run_program>

0800bdd0 <acc_cpd_linear_sweep_update_program>:
 800bdd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdd4:	784b      	ldrb	r3, [r1, #1]
 800bdd6:	684f      	ldr	r7, [r1, #4]
 800bdd8:	68ce      	ldr	r6, [r1, #12]
 800bdda:	b086      	sub	sp, #24
 800bddc:	460c      	mov	r4, r1
 800bdde:	4605      	mov	r5, r0
 800bde0:	b943      	cbnz	r3, 800bdf4 <acc_cpd_linear_sweep_update_program+0x24>
 800bde2:	7823      	ldrb	r3, [r4, #0]
 800bde4:	b9eb      	cbnz	r3, 800be22 <acc_cpd_linear_sweep_update_program+0x52>
 800bde6:	78a3      	ldrb	r3, [r4, #2]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d12d      	bne.n	800be48 <acc_cpd_linear_sweep_update_program+0x78>
 800bdec:	2001      	movs	r0, #1
 800bdee:	b006      	add	sp, #24
 800bdf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdf4:	f8d1 8008 	ldr.w	r8, [r1, #8]
 800bdf8:	f001 fb82 	bl	800d500 <acc_image_a111_r2c_sweep_get>
 800bdfc:	9005      	str	r0, [sp, #20]
 800bdfe:	f001 fb83 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800be02:	f108 020e 	add.w	r2, r8, #14
 800be06:	4603      	mov	r3, r0
 800be08:	9201      	str	r2, [sp, #4]
 800be0a:	4819      	ldr	r0, [pc, #100]	; (800be70 <acc_cpd_linear_sweep_update_program+0xa0>)
 800be0c:	9002      	str	r0, [sp, #8]
 800be0e:	225e      	movs	r2, #94	; 0x5e
 800be10:	9200      	str	r2, [sp, #0]
 800be12:	9905      	ldr	r1, [sp, #20]
 800be14:	2200      	movs	r2, #0
 800be16:	4628      	mov	r0, r5
 800be18:	f001 fa9a 	bl	800d350 <acc_confprogram_live_patch>
 800be1c:	7823      	ldrb	r3, [r4, #0]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d0e1      	beq.n	800bde6 <acc_cpd_linear_sweep_update_program+0x16>
 800be22:	f001 fb6d 	bl	800d500 <acc_image_a111_r2c_sweep_get>
 800be26:	9005      	str	r0, [sp, #20]
 800be28:	f001 fb6e 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800be2c:	2236      	movs	r2, #54	; 0x36
 800be2e:	4603      	mov	r3, r0
 800be30:	480f      	ldr	r0, [pc, #60]	; (800be70 <acc_cpd_linear_sweep_update_program+0xa0>)
 800be32:	9002      	str	r0, [sp, #8]
 800be34:	9200      	str	r2, [sp, #0]
 800be36:	9905      	ldr	r1, [sp, #20]
 800be38:	9701      	str	r7, [sp, #4]
 800be3a:	2200      	movs	r2, #0
 800be3c:	4628      	mov	r0, r5
 800be3e:	f001 fa87 	bl	800d350 <acc_confprogram_live_patch>
 800be42:	78a3      	ldrb	r3, [r4, #2]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d0d1      	beq.n	800bdec <acc_cpd_linear_sweep_update_program+0x1c>
 800be48:	f001 fb5a 	bl	800d500 <acc_image_a111_r2c_sweep_get>
 800be4c:	9005      	str	r0, [sp, #20]
 800be4e:	f001 fb5b 	bl	800d508 <acc_image_a111_r2c_sweep_param_table_get>
 800be52:	4c07      	ldr	r4, [pc, #28]	; (800be70 <acc_cpd_linear_sweep_update_program+0xa0>)
 800be54:	9905      	ldr	r1, [sp, #20]
 800be56:	9601      	str	r6, [sp, #4]
 800be58:	2272      	movs	r2, #114	; 0x72
 800be5a:	4603      	mov	r3, r0
 800be5c:	9200      	str	r2, [sp, #0]
 800be5e:	4628      	mov	r0, r5
 800be60:	9402      	str	r4, [sp, #8]
 800be62:	2200      	movs	r2, #0
 800be64:	f001 fa74 	bl	800d350 <acc_confprogram_live_patch>
 800be68:	2001      	movs	r0, #1
 800be6a:	b006      	add	sp, #24
 800be6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be70:	08007c21 	.word	0x08007c21

0800be74 <acc_cpd_linear_sweep_get_info>:
 800be74:	f890 30ad 	ldrb.w	r3, [r0, #173]	; 0xad
 800be78:	b16b      	cbz	r3, 800be96 <acc_cpd_linear_sweep_get_info+0x22>
 800be7a:	b410      	push	{r4}
 800be7c:	2203      	movs	r2, #3
 800be7e:	2401      	movs	r4, #1
 800be80:	2300      	movs	r3, #0
 800be82:	2002      	movs	r0, #2
 800be84:	e9c1 4003 	strd	r4, r0, [r1, #12]
 800be88:	e9c1 3301 	strd	r3, r3, [r1, #4]
 800be8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be90:	600a      	str	r2, [r1, #0]
 800be92:	614a      	str	r2, [r1, #20]
 800be94:	4770      	bx	lr
 800be96:	e9c1 3300 	strd	r3, r3, [r1]
 800be9a:	e9c1 3302 	strd	r3, r3, [r1, #8]
 800be9e:	e9c1 3304 	strd	r3, r3, [r1, #16]
 800bea2:	4770      	bx	lr

0800bea4 <acc_cpd_linear_sweep_check>:
 800bea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bea8:	461e      	mov	r6, r3
 800beaa:	2300      	movs	r3, #0
 800beac:	7033      	strb	r3, [r6, #0]
 800beae:	460c      	mov	r4, r1
 800beb0:	f891 10ad 	ldrb.w	r1, [r1, #173]	; 0xad
 800beb4:	b082      	sub	sp, #8
 800beb6:	b911      	cbnz	r1, 800bebe <acc_cpd_linear_sweep_check+0x1a>
 800beb8:	b002      	add	sp, #8
 800beba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bebe:	6813      	ldr	r3, [r2, #0]
 800bec0:	005b      	lsls	r3, r3, #1
 800bec2:	f003 031f 	and.w	r3, r3, #31
 800bec6:	6013      	str	r3, [r2, #0]
 800bec8:	4607      	mov	r7, r0
 800beca:	4615      	mov	r5, r2
 800becc:	f7fa fbd6 	bl	800667c <acc_rss_integration_log_level>
 800bed0:	2803      	cmp	r0, #3
 800bed2:	d907      	bls.n	800bee4 <acc_cpd_linear_sweep_check+0x40>
 800bed4:	4a16      	ldr	r2, [pc, #88]	; (800bf30 <acc_cpd_linear_sweep_check+0x8c>)
 800bed6:	682b      	ldr	r3, [r5, #0]
 800bed8:	f8d2 8034 	ldr.w	r8, [r2, #52]	; 0x34
 800bedc:	4915      	ldr	r1, [pc, #84]	; (800bf34 <acc_cpd_linear_sweep_check+0x90>)
 800bede:	4a16      	ldr	r2, [pc, #88]	; (800bf38 <acc_cpd_linear_sweep_check+0x94>)
 800bee0:	2004      	movs	r0, #4
 800bee2:	47c0      	blx	r8
 800bee4:	f9b4 3026 	ldrsh.w	r3, [r4, #38]	; 0x26
 800bee8:	f9b4 2024 	ldrsh.w	r2, [r4, #36]	; 0x24
 800beec:	8c21      	ldrh	r1, [r4, #32]
 800beee:	4638      	mov	r0, r7
 800bef0:	f000 f952 	bl	800c198 <acc_cpd_sweep_check_voffset_vslope>
 800bef4:	b1b0      	cbz	r0, 800bf24 <acc_cpd_linear_sweep_check+0x80>
 800bef6:	6828      	ldr	r0, [r5, #0]
 800bef8:	f000 f9b4 	bl	800c264 <acc_cpd_sweep_check_count_bad_sweeps>
 800befc:	2802      	cmp	r0, #2
 800befe:	4604      	mov	r4, r0
 800bf00:	d9da      	bls.n	800beb8 <acc_cpd_linear_sweep_check+0x14>
 800bf02:	f7fa fbbb 	bl	800667c <acc_rss_integration_log_level>
 800bf06:	b140      	cbz	r0, 800bf1a <acc_cpd_linear_sweep_check+0x76>
 800bf08:	4b09      	ldr	r3, [pc, #36]	; (800bf30 <acc_cpd_linear_sweep_check+0x8c>)
 800bf0a:	4a0c      	ldr	r2, [pc, #48]	; (800bf3c <acc_cpd_linear_sweep_check+0x98>)
 800bf0c:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 800bf0e:	4909      	ldr	r1, [pc, #36]	; (800bf34 <acc_cpd_linear_sweep_check+0x90>)
 800bf10:	2005      	movs	r0, #5
 800bf12:	9000      	str	r0, [sp, #0]
 800bf14:	4623      	mov	r3, r4
 800bf16:	2001      	movs	r0, #1
 800bf18:	47a8      	blx	r5
 800bf1a:	2301      	movs	r3, #1
 800bf1c:	7033      	strb	r3, [r6, #0]
 800bf1e:	b002      	add	sp, #8
 800bf20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf24:	6828      	ldr	r0, [r5, #0]
 800bf26:	f040 0001 	orr.w	r0, r0, #1
 800bf2a:	6028      	str	r0, [r5, #0]
 800bf2c:	e7e4      	b.n	800bef8 <acc_cpd_linear_sweep_check+0x54>
 800bf2e:	bf00      	nop
 800bf30:	20000640 	.word	0x20000640
 800bf34:	08014b5c 	.word	0x08014b5c
 800bf38:	08014c70 	.word	0x08014c70
 800bf3c:	08014c88 	.word	0x08014c88

0800bf40 <acc_cpd_rx_fine_dip_calibration>:
 800bf40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf44:	ed2d 8b02 	vpush	{d8}
 800bf48:	f8d2 a000 	ldr.w	sl, [r2]
 800bf4c:	b087      	sub	sp, #28
 800bf4e:	4681      	mov	r9, r0
 800bf50:	ad05      	add	r5, sp, #20
 800bf52:	461e      	mov	r6, r3
 800bf54:	4614      	mov	r4, r2
 800bf56:	468b      	mov	fp, r1
 800bf58:	460a      	mov	r2, r1
 800bf5a:	9500      	str	r5, [sp, #0]
 800bf5c:	4650      	mov	r0, sl
 800bf5e:	2500      	movs	r5, #0
 800bf60:	4649      	mov	r1, r9
 800bf62:	ab04      	add	r3, sp, #16
 800bf64:	e9cd 6503 	strd	r6, r5, [sp, #12]
 800bf68:	9505      	str	r5, [sp, #20]
 800bf6a:	f7fc f977 	bl	800825c <acc_sensor_protocol_r2_prepare_load>
 800bf6e:	2800      	cmp	r0, #0
 800bf70:	f000 80af 	beq.w	800c0d2 <acc_cpd_rx_fine_dip_calibration+0x192>
 800bf74:	9b05      	ldr	r3, [sp, #20]
 800bf76:	ee08 aa10 	vmov	s16, sl
 800bf7a:	ee08 ba90 	vmov	s17, fp
 800bf7e:	46cb      	mov	fp, r9
 800bf80:	f5c5 68d5 	rsb	r8, r5, #1704	; 0x6a8
 800bf84:	f108 0806 	add.w	r8, r8, #6
 800bf88:	4598      	cmp	r8, r3
 800bf8a:	bf28      	it	cs
 800bf8c:	4698      	movcs	r8, r3
 800bf8e:	9e04      	ldr	r6, [sp, #16]
 800bf90:	f001 faae 	bl	800d4f0 <acc_image_a111_r2c_rx_fine_dip_calibration_get>
 800bf94:	ea4f 0955 	mov.w	r9, r5, lsr #1
 800bf98:	ea4f 0258 	mov.w	r2, r8, lsr #1
 800bf9c:	4631      	mov	r1, r6
 800bf9e:	eb00 0089 	add.w	r0, r0, r9, lsl #2
 800bfa2:	f001 fa4f 	bl	800d444 <acc_confprogram_copy>
 800bfa6:	f001 faa7 	bl	800d4f8 <acc_image_a111_r2c_rx_fine_dip_calibration_param_table_get>
 800bfaa:	6862      	ldr	r2, [r4, #4]
 800bfac:	9201      	str	r2, [sp, #4]
 800bfae:	b2af      	uxth	r7, r5
 800bfb0:	fa1f fa88 	uxth.w	sl, r8
 800bfb4:	221b      	movs	r2, #27
 800bfb6:	4603      	mov	r3, r0
 800bfb8:	4639      	mov	r1, r7
 800bfba:	9200      	str	r2, [sp, #0]
 800bfbc:	4630      	mov	r0, r6
 800bfbe:	4652      	mov	r2, sl
 800bfc0:	f001 f952 	bl	800d268 <acc_confprogram_patch_offset>
 800bfc4:	f001 fa98 	bl	800d4f8 <acc_image_a111_r2c_rx_fine_dip_calibration_param_table_get>
 800bfc8:	68a2      	ldr	r2, [r4, #8]
 800bfca:	9201      	str	r2, [sp, #4]
 800bfcc:	2219      	movs	r2, #25
 800bfce:	4603      	mov	r3, r0
 800bfd0:	4639      	mov	r1, r7
 800bfd2:	9200      	str	r2, [sp, #0]
 800bfd4:	4630      	mov	r0, r6
 800bfd6:	4652      	mov	r2, sl
 800bfd8:	f001 f946 	bl	800d268 <acc_confprogram_patch_offset>
 800bfdc:	f001 fa8c 	bl	800d4f8 <acc_image_a111_r2c_rx_fine_dip_calibration_param_table_get>
 800bfe0:	68e2      	ldr	r2, [r4, #12]
 800bfe2:	9201      	str	r2, [sp, #4]
 800bfe4:	f04f 0c1a 	mov.w	ip, #26
 800bfe8:	4603      	mov	r3, r0
 800bfea:	4652      	mov	r2, sl
 800bfec:	4639      	mov	r1, r7
 800bfee:	f8cd c000 	str.w	ip, [sp]
 800bff2:	4630      	mov	r0, r6
 800bff4:	f001 f938 	bl	800d268 <acc_confprogram_patch_offset>
 800bff8:	f001 fa7e 	bl	800d4f8 <acc_image_a111_r2c_rx_fine_dip_calibration_param_table_get>
 800bffc:	8a22      	ldrh	r2, [r4, #16]
 800bffe:	9201      	str	r2, [sp, #4]
 800c000:	f04f 0c17 	mov.w	ip, #23
 800c004:	4603      	mov	r3, r0
 800c006:	4652      	mov	r2, sl
 800c008:	4639      	mov	r1, r7
 800c00a:	f8cd c000 	str.w	ip, [sp]
 800c00e:	4630      	mov	r0, r6
 800c010:	f001 f92a 	bl	800d268 <acc_confprogram_patch_offset>
 800c014:	f001 fa70 	bl	800d4f8 <acc_image_a111_r2c_rx_fine_dip_calibration_param_table_get>
 800c018:	69e2      	ldr	r2, [r4, #28]
 800c01a:	9201      	str	r2, [sp, #4]
 800c01c:	f04f 0c0d 	mov.w	ip, #13
 800c020:	4603      	mov	r3, r0
 800c022:	4652      	mov	r2, sl
 800c024:	4639      	mov	r1, r7
 800c026:	f8cd c000 	str.w	ip, [sp]
 800c02a:	4630      	mov	r0, r6
 800c02c:	f001 f91c 	bl	800d268 <acc_confprogram_patch_offset>
 800c030:	f001 fa62 	bl	800d4f8 <acc_image_a111_r2c_rx_fine_dip_calibration_param_table_get>
 800c034:	6a22      	ldr	r2, [r4, #32]
 800c036:	9201      	str	r2, [sp, #4]
 800c038:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 800c03c:	4603      	mov	r3, r0
 800c03e:	4652      	mov	r2, sl
 800c040:	4639      	mov	r1, r7
 800c042:	f8cd c000 	str.w	ip, [sp]
 800c046:	4630      	mov	r0, r6
 800c048:	f001 f90e 	bl	800d268 <acc_confprogram_patch_offset>
 800c04c:	f001 fa54 	bl	800d4f8 <acc_image_a111_r2c_rx_fine_dip_calibration_param_table_get>
 800c050:	69a2      	ldr	r2, [r4, #24]
 800c052:	9201      	str	r2, [sp, #4]
 800c054:	f04f 0c0f 	mov.w	ip, #15
 800c058:	4603      	mov	r3, r0
 800c05a:	4652      	mov	r2, sl
 800c05c:	4639      	mov	r1, r7
 800c05e:	f8cd c000 	str.w	ip, [sp]
 800c062:	4630      	mov	r0, r6
 800c064:	f001 f900 	bl	800d268 <acc_confprogram_patch_offset>
 800c068:	f001 fa46 	bl	800d4f8 <acc_image_a111_r2c_rx_fine_dip_calibration_param_table_get>
 800c06c:	6962      	ldr	r2, [r4, #20]
 800c06e:	9201      	str	r2, [sp, #4]
 800c070:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
 800c074:	4603      	mov	r3, r0
 800c076:	4652      	mov	r2, sl
 800c078:	4639      	mov	r1, r7
 800c07a:	4630      	mov	r0, r6
 800c07c:	f8cd c000 	str.w	ip, [sp]
 800c080:	f001 f8f2 	bl	800d268 <acc_confprogram_patch_offset>
 800c084:	4643      	mov	r3, r8
 800c086:	465a      	mov	r2, fp
 800c088:	6820      	ldr	r0, [r4, #0]
 800c08a:	fa1f f189 	uxth.w	r1, r9
 800c08e:	f7fb fdf5 	bl	8007c7c <acc_sensor_r2_load_confmem>
 800c092:	9b05      	ldr	r3, [sp, #20]
 800c094:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800c098:	441d      	add	r5, r3
 800c09a:	4295      	cmp	r5, r2
 800c09c:	f67f af70 	bls.w	800bf80 <acc_cpd_rx_fine_dip_calibration+0x40>
 800c0a0:	ee18 0a10 	vmov	r0, s16
 800c0a4:	2119      	movs	r1, #25
 800c0a6:	f7fc f93d 	bl	8008324 <acc_sensor_protocol_r2_run_program>
 800c0aa:	ee18 aa10 	vmov	sl, s16
 800c0ae:	4606      	mov	r6, r0
 800c0b0:	b1d8      	cbz	r0, 800c0ea <acc_cpd_rx_fine_dip_calibration+0x1aa>
 800c0b2:	ee18 0a10 	vmov	r0, s16
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	2208      	movs	r2, #8
 800c0ba:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800c0be:	f7fc fab5 	bl	800862c <acc_sensor_protocol_r2_wait_for_specific_event>
 800c0c2:	b9e8      	cbnz	r0, 800c100 <acc_cpd_rx_fine_dip_calibration+0x1c0>
 800c0c4:	2600      	movs	r6, #0
 800c0c6:	4630      	mov	r0, r6
 800c0c8:	b007      	add	sp, #28
 800c0ca:	ecbd 8b02 	vpop	{d8}
 800c0ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0d2:	4b2a      	ldr	r3, [pc, #168]	; (800c17c <acc_cpd_rx_fine_dip_calibration+0x23c>)
 800c0d4:	4a2a      	ldr	r2, [pc, #168]	; (800c180 <acc_cpd_rx_fine_dip_calibration+0x240>)
 800c0d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0d8:	492a      	ldr	r1, [pc, #168]	; (800c184 <acc_cpd_rx_fine_dip_calibration+0x244>)
 800c0da:	4606      	mov	r6, r0
 800c0dc:	4798      	blx	r3
 800c0de:	4630      	mov	r0, r6
 800c0e0:	b007      	add	sp, #28
 800c0e2:	ecbd 8b02 	vpop	{d8}
 800c0e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0ea:	4b24      	ldr	r3, [pc, #144]	; (800c17c <acc_cpd_rx_fine_dip_calibration+0x23c>)
 800c0ec:	4a26      	ldr	r2, [pc, #152]	; (800c188 <acc_cpd_rx_fine_dip_calibration+0x248>)
 800c0ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0f0:	4924      	ldr	r1, [pc, #144]	; (800c184 <acc_cpd_rx_fine_dip_calibration+0x244>)
 800c0f2:	4798      	blx	r3
 800c0f4:	4630      	mov	r0, r6
 800c0f6:	b007      	add	sp, #28
 800c0f8:	ecbd 8b02 	vpop	{d8}
 800c0fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c100:	ee18 0a90 	vmov	r0, s17
 800c104:	2119      	movs	r1, #25
 800c106:	f7fb fdf1 	bl	8007cec <acc_sensor_r2_buffer_processed_verify_size>
 800c10a:	4606      	mov	r6, r0
 800c10c:	b928      	cbnz	r0, 800c11a <acc_cpd_rx_fine_dip_calibration+0x1da>
 800c10e:	4b1b      	ldr	r3, [pc, #108]	; (800c17c <acc_cpd_rx_fine_dip_calibration+0x23c>)
 800c110:	4a1e      	ldr	r2, [pc, #120]	; (800c18c <acc_cpd_rx_fine_dip_calibration+0x24c>)
 800c112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c114:	491b      	ldr	r1, [pc, #108]	; (800c184 <acc_cpd_rx_fine_dip_calibration+0x244>)
 800c116:	4798      	blx	r3
 800c118:	e7e1      	b.n	800c0de <acc_cpd_rx_fine_dip_calibration+0x19e>
 800c11a:	4659      	mov	r1, fp
 800c11c:	2319      	movs	r3, #25
 800c11e:	2200      	movs	r2, #0
 800c120:	ee18 0a10 	vmov	r0, s16
 800c124:	f7fb fdea 	bl	8007cfc <acc_sensor_r2_buffer_processed_read>
 800c128:	2319      	movs	r3, #25
 800c12a:	4604      	mov	r4, r0
 800c12c:	4602      	mov	r2, r0
 800c12e:	ee18 1a10 	vmov	r1, s16
 800c132:	200a      	movs	r0, #10
 800c134:	f7fc fdae 	bl	8008c94 <acc_probes_execute_uint16>
 800c138:	9b03      	ldr	r3, [sp, #12]
 800c13a:	4620      	mov	r0, r4
 800c13c:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800c140:	6804      	ldr	r4, [r0, #0]
 800c142:	6841      	ldr	r1, [r0, #4]
 800c144:	6882      	ldr	r2, [r0, #8]
 800c146:	68c5      	ldr	r5, [r0, #12]
 800c148:	60dd      	str	r5, [r3, #12]
 800c14a:	3010      	adds	r0, #16
 800c14c:	42b0      	cmp	r0, r6
 800c14e:	601c      	str	r4, [r3, #0]
 800c150:	6059      	str	r1, [r3, #4]
 800c152:	609a      	str	r2, [r3, #8]
 800c154:	f103 0310 	add.w	r3, r3, #16
 800c158:	d1f2      	bne.n	800c140 <acc_cpd_rx_fine_dip_calibration+0x200>
 800c15a:	8802      	ldrh	r2, [r0, #0]
 800c15c:	801a      	strh	r2, [r3, #0]
 800c15e:	4650      	mov	r0, sl
 800c160:	f7fc f96c 	bl	800843c <acc_sensor_protocol_r2_ack_event>
 800c164:	4606      	mov	r6, r0
 800c166:	2800      	cmp	r0, #0
 800c168:	d0ac      	beq.n	800c0c4 <acc_cpd_rx_fine_dip_calibration+0x184>
 800c16a:	4909      	ldr	r1, [pc, #36]	; (800c190 <acc_cpd_rx_fine_dip_calibration+0x250>)
 800c16c:	4809      	ldr	r0, [pc, #36]	; (800c194 <acc_cpd_rx_fine_dip_calibration+0x254>)
 800c16e:	f001 f98f 	bl	800d490 <acc_diagnostic_log_array>
 800c172:	9803      	ldr	r0, [sp, #12]
 800c174:	2119      	movs	r1, #25
 800c176:	f001 f99b 	bl	800d4b0 <acc_diagnostic_log_data_u16>
 800c17a:	e7b0      	b.n	800c0de <acc_cpd_rx_fine_dip_calibration+0x19e>
 800c17c:	20000640 	.word	0x20000640
 800c180:	08014cc4 	.word	0x08014cc4
 800c184:	08014cec 	.word	0x08014cec
 800c188:	08014d08 	.word	0x08014d08
 800c18c:	08014398 	.word	0x08014398
 800c190:	08014530 	.word	0x08014530
 800c194:	08014d3c 	.word	0x08014d3c

0800c198 <acc_cpd_sweep_check_voffset_vslope>:
 800c198:	8802      	ldrh	r2, [r0, #0]
 800c19a:	eddf 4a2e 	vldr	s9, [pc, #184]	; 800c254 <acc_cpd_sweep_check_voffset_vslope+0xbc>
 800c19e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800c258 <acc_cpd_sweep_check_voffset_vslope+0xc0>
 800c1a2:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 800c25c <acc_cpd_sweep_check_voffset_vslope+0xc4>
 800c1a6:	ee07 2a90 	vmov	s15, r2
 800c1aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1ae:	b410      	push	{r4}
 800c1b0:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800c1b4:	4c2a      	ldr	r4, [pc, #168]	; (800c260 <acc_cpd_sweep_check_voffset_vslope+0xc8>)
 800c1b6:	8842      	ldrh	r2, [r0, #2]
 800c1b8:	f934 1011 	ldrsh.w	r1, [r4, r1, lsl #1]
 800c1bc:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 800c1c0:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800c1c4:	ee07 1a10 	vmov	s14, r1
 800c1c8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800c1cc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c1d0:	ee67 7a86 	vmul.f32	s15, s15, s12
 800c1d4:	b083      	sub	sp, #12
 800c1d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c1da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c1de:	edcd 7a01 	vstr	s15, [sp, #4]
 800c1e2:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 800c1e6:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 800c1ea:	f2a0 24ee 	subw	r4, r0, #750	; 0x2ee
 800c1ee:	f5b4 7f06 	cmp.w	r4, #536	; 0x218
 800c1f2:	d224      	bcs.n	800c23e <acc_cpd_sweep_check_voffset_vslope+0xa6>
 800c1f4:	f5a0 7043 	sub.w	r0, r0, #780	; 0x30c
 800c1f8:	f5b0 7fe6 	cmp.w	r0, #460	; 0x1cc
 800c1fc:	d924      	bls.n	800c248 <acc_cpd_sweep_check_voffset_vslope+0xb0>
 800c1fe:	ee07 2a90 	vmov	s15, r2
 800c202:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c206:	ee07 1a90 	vmov	s15, r1
 800c20a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800c20e:	ee67 7a24 	vmul.f32	s15, s14, s9
 800c212:	3364      	adds	r3, #100	; 0x64
 800c214:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800c218:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800c21c:	ee67 7a86 	vmul.f32	s15, s15, s12
 800c220:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c224:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c228:	ee17 2a90 	vmov	r2, s15
 800c22c:	b210      	sxth	r0, r2
 800c22e:	4298      	cmp	r0, r3
 800c230:	bfcc      	ite	gt
 800c232:	2000      	movgt	r0, #0
 800c234:	2001      	movle	r0, #1
 800c236:	b003      	add	sp, #12
 800c238:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c23c:	4770      	bx	lr
 800c23e:	2000      	movs	r0, #0
 800c240:	b003      	add	sp, #12
 800c242:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c246:	4770      	bx	lr
 800c248:	2001      	movs	r0, #1
 800c24a:	b003      	add	sp, #12
 800c24c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c250:	4770      	bx	lr
 800c252:	bf00      	nop
 800c254:	37800000 	.word	0x37800000
 800c258:	3f99999a 	.word	0x3f99999a
 800c25c:	447a0000 	.word	0x447a0000
 800c260:	08018598 	.word	0x08018598

0800c264 <acc_cpd_sweep_check_count_bad_sweeps>:
 800c264:	b138      	cbz	r0, 800c276 <acc_cpd_sweep_check_count_bad_sweeps+0x12>
 800c266:	2200      	movs	r2, #0
 800c268:	1e43      	subs	r3, r0, #1
 800c26a:	4018      	ands	r0, r3
 800c26c:	f102 0201 	add.w	r2, r2, #1
 800c270:	d1fa      	bne.n	800c268 <acc_cpd_sweep_check_count_bad_sweeps+0x4>
 800c272:	4610      	mov	r0, r2
 800c274:	4770      	bx	lr
 800c276:	4602      	mov	r2, r0
 800c278:	4610      	mov	r0, r2
 800c27a:	4770      	bx	lr

0800c27c <acc_radar_engine_check_asic_id>:
 800c27c:	6800      	ldr	r0, [r0, #0]
 800c27e:	2100      	movs	r1, #0
 800c280:	f7fc bac6 	b.w	8008810 <acc_sensor_protocol_r2_check_asic_id>

0800c284 <acc_radar_engine_wait_for_radar_data>:
 800c284:	6800      	ldr	r0, [r0, #0]
 800c286:	f7fc ba31 	b.w	80086ec <acc_sensor_protocol_r2_wait_for_radar_data>
 800c28a:	bf00      	nop

0800c28c <acc_radar_engine_measure>:
 800c28c:	6800      	ldr	r0, [r0, #0]
 800c28e:	f7fc b8d5 	b.w	800843c <acc_sensor_protocol_r2_ack_event>
 800c292:	bf00      	nop

0800c294 <acc_radar_engine_wait_for_hibernate_ready>:
 800c294:	6800      	ldr	r0, [r0, #0]
 800c296:	f7fc b9f3 	b.w	8008680 <acc_sensor_protocol_r2_wait_for_hibernate_ready>
 800c29a:	bf00      	nop

0800c29c <acc_radar_engine_acquire_adc_data>:
 800c29c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2a0:	ed2d 8b02 	vpush	{d8}
 800c2a4:	2600      	movs	r6, #0
 800c2a6:	6016      	str	r6, [r2, #0]
 800c2a8:	f8b0 a00c 	ldrh.w	sl, [r0, #12]
 800c2ac:	ed9f 8a45 	vldr	s16, [pc, #276]	; 800c3c4 <acc_radar_engine_acquire_adc_data+0x128>
 800c2b0:	7bc3      	ldrb	r3, [r0, #15]
 800c2b2:	f890 800e 	ldrb.w	r8, [r0, #14]
 800c2b6:	f8d0 b010 	ldr.w	fp, [r0, #16]
 800c2ba:	7316      	strb	r6, [r2, #12]
 800c2bc:	b089      	sub	sp, #36	; 0x24
 800c2be:	460f      	mov	r7, r1
 800c2c0:	7116      	strb	r6, [r2, #4]
 800c2c2:	f88d 600e 	strb.w	r6, [sp, #14]
 800c2c6:	f88d 600f 	strb.w	r6, [sp, #15]
 800c2ca:	9301      	str	r3, [sp, #4]
 800c2cc:	ed82 8a02 	vstr	s16, [r2, #8]
 800c2d0:	f1ba 0f00 	cmp.w	sl, #0
 800c2d4:	d05b      	beq.n	800c38e <acc_radar_engine_acquire_adc_data+0xf2>
 800c2d6:	4647      	mov	r7, r8
 800c2d8:	4614      	mov	r4, r2
 800c2da:	4605      	mov	r5, r0
 800c2dc:	4688      	mov	r8, r1
 800c2de:	b927      	cbnz	r7, 800c2ea <acc_radar_engine_acquire_adc_data+0x4e>
 800c2e0:	6828      	ldr	r0, [r5, #0]
 800c2e2:	f7fc f8ab 	bl	800843c <acc_sensor_protocol_r2_ack_event>
 800c2e6:	2800      	cmp	r0, #0
 800c2e8:	d05e      	beq.n	800c3a8 <acc_radar_engine_acquire_adc_data+0x10c>
 800c2ea:	6828      	ldr	r0, [r5, #0]
 800c2ec:	f10d 020e 	add.w	r2, sp, #14
 800c2f0:	4659      	mov	r1, fp
 800c2f2:	f7fc f9fb 	bl	80086ec <acc_sensor_protocol_r2_wait_for_radar_data>
 800c2f6:	2800      	cmp	r0, #0
 800c2f8:	d056      	beq.n	800c3a8 <acc_radar_engine_acquire_adc_data+0x10c>
 800c2fa:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800c2fe:	b903      	cbnz	r3, 800c302 <acc_radar_engine_acquire_adc_data+0x66>
 800c300:	78a3      	ldrb	r3, [r4, #2]
 800c302:	69aa      	ldr	r2, [r5, #24]
 800c304:	70a3      	strb	r3, [r4, #2]
 800c306:	4641      	mov	r1, r8
 800c308:	6953      	ldr	r3, [r2, #20]
 800c30a:	4628      	mov	r0, r5
 800c30c:	f10d 020f 	add.w	r2, sp, #15
 800c310:	4798      	blx	r3
 800c312:	69aa      	ldr	r2, [r5, #24]
 800c314:	9004      	str	r0, [sp, #16]
 800c316:	2300      	movs	r3, #0
 800c318:	f8d2 9018 	ldr.w	r9, [r2, #24]
 800c31c:	f88d 3014 	strb.w	r3, [sp, #20]
 800c320:	f88d 301c 	strb.w	r3, [sp, #28]
 800c324:	ed8d 8a06 	vstr	s16, [sp, #24]
 800c328:	ab05      	add	r3, sp, #20
 800c32a:	aa04      	add	r2, sp, #16
 800c32c:	4641      	mov	r1, r8
 800c32e:	4628      	mov	r0, r5
 800c330:	47c8      	blx	r9
 800c332:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800c336:	b903      	cbnz	r3, 800c33a <acc_radar_engine_acquire_adc_data+0x9e>
 800c338:	7b23      	ldrb	r3, [r4, #12]
 800c33a:	f89d 9014 	ldrb.w	r9, [sp, #20]
 800c33e:	7323      	strb	r3, [r4, #12]
 800c340:	f1b9 0f00 	cmp.w	r9, #0
 800c344:	d129      	bne.n	800c39a <acc_radar_engine_acquire_adc_data+0xfe>
 800c346:	7923      	ldrb	r3, [r4, #4]
 800c348:	edd4 0a02 	vldr	s1, [r4, #8]
 800c34c:	ed9d 0a06 	vldr	s0, [sp, #24]
 800c350:	7123      	strb	r3, [r4, #4]
 800c352:	f004 fb57 	bl	8010a04 <fmaxf>
 800c356:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800c35a:	ed84 0a02 	vstr	s0, [r4, #8]
 800c35e:	b902      	cbnz	r2, 800c362 <acc_radar_engine_acquire_adc_data+0xc6>
 800c360:	78e2      	ldrb	r2, [r4, #3]
 800c362:	8821      	ldrh	r1, [r4, #0]
 800c364:	9b04      	ldr	r3, [sp, #16]
 800c366:	70e2      	strb	r2, [r4, #3]
 800c368:	69aa      	ldr	r2, [r5, #24]
 800c36a:	440b      	add	r3, r1
 800c36c:	8023      	strh	r3, [r4, #0]
 800c36e:	4649      	mov	r1, r9
 800c370:	69d3      	ldr	r3, [r2, #28]
 800c372:	4628      	mov	r0, r5
 800c374:	4798      	blx	r3
 800c376:	9b01      	ldr	r3, [sp, #4]
 800c378:	b11b      	cbz	r3, 800c382 <acc_radar_engine_acquire_adc_data+0xe6>
 800c37a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c37e:	42b3      	cmp	r3, r6
 800c380:	d018      	beq.n	800c3b4 <acc_radar_engine_acquire_adc_data+0x118>
 800c382:	b967      	cbnz	r7, 800c39e <acc_radar_engine_acquire_adc_data+0x102>
 800c384:	3601      	adds	r6, #1
 800c386:	b2b3      	uxth	r3, r6
 800c388:	4553      	cmp	r3, sl
 800c38a:	d3a8      	bcc.n	800c2de <acc_radar_engine_acquire_adc_data+0x42>
 800c38c:	4647      	mov	r7, r8
 800c38e:	6838      	ldr	r0, [r7, #0]
 800c390:	b009      	add	sp, #36	; 0x24
 800c392:	ecbd 8b02 	vpop	{d8}
 800c396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c39a:	464b      	mov	r3, r9
 800c39c:	e7d4      	b.n	800c348 <acc_radar_engine_acquire_adc_data+0xac>
 800c39e:	6828      	ldr	r0, [r5, #0]
 800c3a0:	f7fc f84c 	bl	800843c <acc_sensor_protocol_r2_ack_event>
 800c3a4:	2800      	cmp	r0, #0
 800c3a6:	d1ed      	bne.n	800c384 <acc_radar_engine_acquire_adc_data+0xe8>
 800c3a8:	2000      	movs	r0, #0
 800c3aa:	b009      	add	sp, #36	; 0x24
 800c3ac:	ecbd 8b02 	vpop	{d8}
 800c3b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3b4:	f8d8 0000 	ldr.w	r0, [r8]
 800c3b8:	b009      	add	sp, #36	; 0x24
 800c3ba:	ecbd 8b02 	vpop	{d8}
 800c3be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3c2:	bf00      	nop
 800c3c4:	ff800000 	.word	0xff800000

0800c3c8 <acc_sensor_diagnostics_r2_sensor_status>:
 800c3c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3cc:	b094      	sub	sp, #80	; 0x50
 800c3ce:	4604      	mov	r4, r0
 800c3d0:	f7fa f954 	bl	800667c <acc_rss_integration_log_level>
 800c3d4:	2801      	cmp	r0, #1
 800c3d6:	d905      	bls.n	800c3e4 <acc_sensor_diagnostics_r2_sensor_status+0x1c>
 800c3d8:	4b9c      	ldr	r3, [pc, #624]	; (800c64c <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800c3da:	4a9d      	ldr	r2, [pc, #628]	; (800c650 <acc_sensor_diagnostics_r2_sensor_status+0x288>)
 800c3dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3de:	499d      	ldr	r1, [pc, #628]	; (800c654 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800c3e0:	2002      	movs	r0, #2
 800c3e2:	4798      	blx	r3
 800c3e4:	2201      	movs	r2, #1
 800c3e6:	21b2      	movs	r1, #178	; 0xb2
 800c3e8:	4620      	mov	r0, r4
 800c3ea:	f7fc fcaf 	bl	8008d4c <acc_sensor_reg_write>
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	f8df a258 	ldr.w	sl, [pc, #600]	; 800c64c <acc_sensor_diagnostics_r2_sensor_status+0x284>
 800c3f4:	f8df 9288 	ldr.w	r9, [pc, #648]	; 800c680 <acc_sensor_diagnostics_r2_sensor_status+0x2b8>
 800c3f8:	4f96      	ldr	r7, [pc, #600]	; (800c654 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800c3fa:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 800c3fe:	2564      	movs	r5, #100	; 0x64
 800c400:	e013      	b.n	800c42a <acc_sensor_diagnostics_r2_sensor_status+0x62>
 800c402:	f7fa f93b 	bl	800667c <acc_rss_integration_log_level>
 800c406:	2801      	cmp	r0, #1
 800c408:	4623      	mov	r3, r4
 800c40a:	464a      	mov	r2, r9
 800c40c:	4639      	mov	r1, r7
 800c40e:	f04f 0002 	mov.w	r0, #2
 800c412:	d907      	bls.n	800c424 <acc_sensor_diagnostics_r2_sensor_status+0x5c>
 800c414:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
 800c418:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800c41c:	9600      	str	r6, [sp, #0]
 800c41e:	f8da 6034 	ldr.w	r6, [sl, #52]	; 0x34
 800c422:	47b0      	blx	r6
 800c424:	3d01      	subs	r5, #1
 800c426:	b2ad      	uxth	r5, r5
 800c428:	b1c5      	cbz	r5, 800c45c <acc_sensor_diagnostics_r2_sensor_status+0x94>
 800c42a:	aa0c      	add	r2, sp, #48	; 0x30
 800c42c:	2111      	movs	r1, #17
 800c42e:	4620      	mov	r0, r4
 800c430:	f7fc fc76 	bl	8008d20 <acc_sensor_reg_read>
 800c434:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800c438:	055b      	lsls	r3, r3, #21
 800c43a:	d4e2      	bmi.n	800c402 <acc_sensor_diagnostics_r2_sensor_status+0x3a>
 800c43c:	f7fa f91e 	bl	800667c <acc_rss_integration_log_level>
 800c440:	2801      	cmp	r0, #1
 800c442:	d90b      	bls.n	800c45c <acc_sensor_diagnostics_r2_sensor_status+0x94>
 800c444:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800c448:	4980      	ldr	r1, [pc, #512]	; (800c64c <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800c44a:	4a83      	ldr	r2, [pc, #524]	; (800c658 <acc_sensor_diagnostics_r2_sensor_status+0x290>)
 800c44c:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800c44e:	4981      	ldr	r1, [pc, #516]	; (800c654 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800c450:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c454:	9300      	str	r3, [sp, #0]
 800c456:	2002      	movs	r0, #2
 800c458:	4623      	mov	r3, r4
 800c45a:	47a8      	blx	r5
 800c45c:	2600      	movs	r6, #0
 800c45e:	4631      	mov	r1, r6
 800c460:	aa09      	add	r2, sp, #36	; 0x24
 800c462:	4620      	mov	r0, r4
 800c464:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 800c468:	4d7c      	ldr	r5, [pc, #496]	; (800c65c <acc_sensor_diagnostics_r2_sensor_status+0x294>)
 800c46a:	f7fc fc59 	bl	8008d20 <acc_sensor_reg_read>
 800c46e:	f10d 0226 	add.w	r2, sp, #38	; 0x26
 800c472:	212a      	movs	r1, #42	; 0x2a
 800c474:	4620      	mov	r0, r4
 800c476:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 800c47a:	f7fc fc51 	bl	8008d20 <acc_sensor_reg_read>
 800c47e:	2128      	movs	r1, #40	; 0x28
 800c480:	aa0a      	add	r2, sp, #40	; 0x28
 800c482:	4620      	mov	r0, r4
 800c484:	f8ad 6028 	strh.w	r6, [sp, #40]	; 0x28
 800c488:	f105 071e 	add.w	r7, r5, #30
 800c48c:	f7fc fc48 	bl	8008d20 <acc_sensor_reg_read>
 800c490:	ae0c      	add	r6, sp, #48	; 0x30
 800c492:	2163      	movs	r1, #99	; 0x63
 800c494:	e001      	b.n	800c49a <acc_sensor_diagnostics_r2_sensor_status+0xd2>
 800c496:	f835 1f02 	ldrh.w	r1, [r5, #2]!
 800c49a:	4632      	mov	r2, r6
 800c49c:	4620      	mov	r0, r4
 800c49e:	f7fc fc3f 	bl	8008d20 <acc_sensor_reg_read>
 800c4a2:	42af      	cmp	r7, r5
 800c4a4:	f106 0602 	add.w	r6, r6, #2
 800c4a8:	d1f5      	bne.n	800c496 <acc_sensor_diagnostics_r2_sensor_status+0xce>
 800c4aa:	f7fa f8e7 	bl	800667c <acc_rss_integration_log_level>
 800c4ae:	2801      	cmp	r0, #1
 800c4b0:	d91e      	bls.n	800c4f0 <acc_sensor_diagnostics_r2_sensor_status+0x128>
 800c4b2:	4d66      	ldr	r5, [pc, #408]	; (800c64c <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800c4b4:	f8bd 103e 	ldrh.w	r1, [sp, #62]	; 0x3e
 800c4b8:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 800c4bc:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 800c4be:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 800c4c2:	f8bd 0036 	ldrh.w	r0, [sp, #54]	; 0x36
 800c4c6:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 800c4ca:	9107      	str	r1, [sp, #28]
 800c4cc:	9206      	str	r2, [sp, #24]
 800c4ce:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 800c4d2:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 800c4d6:	9305      	str	r3, [sp, #20]
 800c4d8:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800c4dc:	9300      	str	r3, [sp, #0]
 800c4de:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800c4e2:	e9cd 0603 	strd	r0, r6, [sp, #12]
 800c4e6:	4a5e      	ldr	r2, [pc, #376]	; (800c660 <acc_sensor_diagnostics_r2_sensor_status+0x298>)
 800c4e8:	495a      	ldr	r1, [pc, #360]	; (800c654 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800c4ea:	4623      	mov	r3, r4
 800c4ec:	2002      	movs	r0, #2
 800c4ee:	47a8      	blx	r5
 800c4f0:	f7fa f8c4 	bl	800667c <acc_rss_integration_log_level>
 800c4f4:	2801      	cmp	r0, #1
 800c4f6:	d91e      	bls.n	800c536 <acc_sensor_diagnostics_r2_sensor_status+0x16e>
 800c4f8:	4d54      	ldr	r5, [pc, #336]	; (800c64c <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800c4fa:	f8bd 104e 	ldrh.w	r1, [sp, #78]	; 0x4e
 800c4fe:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 800c502:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 800c504:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
 800c508:	f8bd 0046 	ldrh.w	r0, [sp, #70]	; 0x46
 800c50c:	f8bd 6048 	ldrh.w	r6, [sp, #72]	; 0x48
 800c510:	9107      	str	r1, [sp, #28]
 800c512:	9206      	str	r2, [sp, #24]
 800c514:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
 800c518:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 800c51c:	9305      	str	r3, [sp, #20]
 800c51e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800c522:	9300      	str	r3, [sp, #0]
 800c524:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800c528:	e9cd 0603 	strd	r0, r6, [sp, #12]
 800c52c:	4a4d      	ldr	r2, [pc, #308]	; (800c664 <acc_sensor_diagnostics_r2_sensor_status+0x29c>)
 800c52e:	4949      	ldr	r1, [pc, #292]	; (800c654 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800c530:	4623      	mov	r3, r4
 800c532:	2002      	movs	r0, #2
 800c534:	47a8      	blx	r5
 800c536:	aa0c      	add	r2, sp, #48	; 0x30
 800c538:	2168      	movs	r1, #104	; 0x68
 800c53a:	4620      	mov	r0, r4
 800c53c:	f7fc fbf0 	bl	8008d20 <acc_sensor_reg_read>
 800c540:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 800c544:	2167      	movs	r1, #103	; 0x67
 800c546:	4620      	mov	r0, r4
 800c548:	f7fc fbea 	bl	8008d20 <acc_sensor_reg_read>
 800c54c:	aa0d      	add	r2, sp, #52	; 0x34
 800c54e:	2166      	movs	r1, #102	; 0x66
 800c550:	4620      	mov	r0, r4
 800c552:	f7fc fbe5 	bl	8008d20 <acc_sensor_reg_read>
 800c556:	f10d 0236 	add.w	r2, sp, #54	; 0x36
 800c55a:	2165      	movs	r1, #101	; 0x65
 800c55c:	4620      	mov	r0, r4
 800c55e:	f7fc fbdf 	bl	8008d20 <acc_sensor_reg_read>
 800c562:	f7fa f88b 	bl	800667c <acc_rss_integration_log_level>
 800c566:	2801      	cmp	r0, #1
 800c568:	d912      	bls.n	800c590 <acc_sensor_diagnostics_r2_sensor_status+0x1c8>
 800c56a:	f8bd 0036 	ldrh.w	r0, [sp, #54]	; 0x36
 800c56e:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 800c572:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 800c576:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800c57a:	4d34      	ldr	r5, [pc, #208]	; (800c64c <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800c57c:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 800c57e:	e9cd 1002 	strd	r1, r0, [sp, #8]
 800c582:	e9cd 3200 	strd	r3, r2, [sp]
 800c586:	4933      	ldr	r1, [pc, #204]	; (800c654 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800c588:	4a37      	ldr	r2, [pc, #220]	; (800c668 <acc_sensor_diagnostics_r2_sensor_status+0x2a0>)
 800c58a:	4623      	mov	r3, r4
 800c58c:	2002      	movs	r0, #2
 800c58e:	47a8      	blx	r5
 800c590:	2500      	movs	r5, #0
 800c592:	f10d 022a 	add.w	r2, sp, #42	; 0x2a
 800c596:	2153      	movs	r1, #83	; 0x53
 800c598:	4620      	mov	r0, r4
 800c59a:	f8ad 502a 	strh.w	r5, [sp, #42]	; 0x2a
 800c59e:	f7fc fbbf 	bl	8008d20 <acc_sensor_reg_read>
 800c5a2:	aa0c      	add	r2, sp, #48	; 0x30
 800c5a4:	2140      	movs	r1, #64	; 0x40
 800c5a6:	4620      	mov	r0, r4
 800c5a8:	f8ad 5030 	strh.w	r5, [sp, #48]	; 0x30
 800c5ac:	f7fc fbb8 	bl	8008d20 <acc_sensor_reg_read>
 800c5b0:	f7fa f864 	bl	800667c <acc_rss_integration_log_level>
 800c5b4:	2801      	cmp	r0, #1
 800c5b6:	d909      	bls.n	800c5cc <acc_sensor_diagnostics_r2_sensor_status+0x204>
 800c5b8:	4a24      	ldr	r2, [pc, #144]	; (800c64c <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800c5ba:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800c5be:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800c5c0:	4924      	ldr	r1, [pc, #144]	; (800c654 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800c5c2:	9300      	str	r3, [sp, #0]
 800c5c4:	4a29      	ldr	r2, [pc, #164]	; (800c66c <acc_sensor_diagnostics_r2_sensor_status+0x2a4>)
 800c5c6:	4623      	mov	r3, r4
 800c5c8:	2002      	movs	r0, #2
 800c5ca:	47a8      	blx	r5
 800c5cc:	f7fa f856 	bl	800667c <acc_rss_integration_log_level>
 800c5d0:	2801      	cmp	r0, #1
 800c5d2:	d90e      	bls.n	800c5f2 <acc_sensor_diagnostics_r2_sensor_status+0x22a>
 800c5d4:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800c5d8:	491c      	ldr	r1, [pc, #112]	; (800c64c <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800c5da:	4a25      	ldr	r2, [pc, #148]	; (800c670 <acc_sensor_diagnostics_r2_sensor_status+0x2a8>)
 800c5dc:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800c5de:	491d      	ldr	r1, [pc, #116]	; (800c654 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800c5e0:	f003 0040 	and.w	r0, r3, #64	; 0x40
 800c5e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c5e8:	e9cd 3000 	strd	r3, r0, [sp]
 800c5ec:	4623      	mov	r3, r4
 800c5ee:	2002      	movs	r0, #2
 800c5f0:	47a8      	blx	r5
 800c5f2:	f7fa f843 	bl	800667c <acc_rss_integration_log_level>
 800c5f6:	2801      	cmp	r0, #1
 800c5f8:	d90e      	bls.n	800c618 <acc_sensor_diagnostics_r2_sensor_status+0x250>
 800c5fa:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800c5fe:	4913      	ldr	r1, [pc, #76]	; (800c64c <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800c600:	4a1c      	ldr	r2, [pc, #112]	; (800c674 <acc_sensor_diagnostics_r2_sensor_status+0x2ac>)
 800c602:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800c604:	4913      	ldr	r1, [pc, #76]	; (800c654 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800c606:	f003 0010 	and.w	r0, r3, #16
 800c60a:	f003 0320 	and.w	r3, r3, #32
 800c60e:	e9cd 3000 	strd	r3, r0, [sp]
 800c612:	4623      	mov	r3, r4
 800c614:	2002      	movs	r0, #2
 800c616:	47a8      	blx	r5
 800c618:	f7fa f830 	bl	800667c <acc_rss_integration_log_level>
 800c61c:	2801      	cmp	r0, #1
 800c61e:	d90e      	bls.n	800c63e <acc_sensor_diagnostics_r2_sensor_status+0x276>
 800c620:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800c624:	4909      	ldr	r1, [pc, #36]	; (800c64c <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800c626:	4a14      	ldr	r2, [pc, #80]	; (800c678 <acc_sensor_diagnostics_r2_sensor_status+0x2b0>)
 800c628:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800c62a:	490a      	ldr	r1, [pc, #40]	; (800c654 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800c62c:	f003 0004 	and.w	r0, r3, #4
 800c630:	f003 0308 	and.w	r3, r3, #8
 800c634:	e9cd 3000 	strd	r3, r0, [sp]
 800c638:	4623      	mov	r3, r4
 800c63a:	2002      	movs	r0, #2
 800c63c:	47a8      	blx	r5
 800c63e:	4d0f      	ldr	r5, [pc, #60]	; (800c67c <acc_sensor_diagnostics_r2_sensor_status+0x2b4>)
 800c640:	ae0c      	add	r6, sp, #48	; 0x30
 800c642:	f105 071e 	add.w	r7, r5, #30
 800c646:	21f0      	movs	r1, #240	; 0xf0
 800c648:	e01e      	b.n	800c688 <acc_sensor_diagnostics_r2_sensor_status+0x2c0>
 800c64a:	bf00      	nop
 800c64c:	20000640 	.word	0x20000640
 800c650:	08014d4c 	.word	0x08014d4c
 800c654:	08014d8c 	.word	0x08014d8c
 800c658:	08014dc4 	.word	0x08014dc4
 800c65c:	080150d4 	.word	0x080150d4
 800c660:	08014de4 	.word	0x08014de4
 800c664:	08014e2c 	.word	0x08014e2c
 800c668:	08014e78 	.word	0x08014e78
 800c66c:	08014eac 	.word	0x08014eac
 800c670:	08014ecc 	.word	0x08014ecc
 800c674:	08014ef8 	.word	0x08014ef8
 800c678:	08014f2c 	.word	0x08014f2c
 800c67c:	080150f4 	.word	0x080150f4
 800c680:	08014da4 	.word	0x08014da4
 800c684:	f835 1f02 	ldrh.w	r1, [r5, #2]!
 800c688:	4632      	mov	r2, r6
 800c68a:	4620      	mov	r0, r4
 800c68c:	f7fc fb48 	bl	8008d20 <acc_sensor_reg_read>
 800c690:	42bd      	cmp	r5, r7
 800c692:	f106 0602 	add.w	r6, r6, #2
 800c696:	d1f5      	bne.n	800c684 <acc_sensor_diagnostics_r2_sensor_status+0x2bc>
 800c698:	f7f9 fff0 	bl	800667c <acc_rss_integration_log_level>
 800c69c:	2801      	cmp	r0, #1
 800c69e:	f240 80b6 	bls.w	800c80e <acc_sensor_diagnostics_r2_sensor_status+0x446>
 800c6a2:	4a5c      	ldr	r2, [pc, #368]	; (800c814 <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 800c6a4:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800c6a8:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800c6aa:	495b      	ldr	r1, [pc, #364]	; (800c818 <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 800c6ac:	9300      	str	r3, [sp, #0]
 800c6ae:	4a5b      	ldr	r2, [pc, #364]	; (800c81c <acc_sensor_diagnostics_r2_sensor_status+0x454>)
 800c6b0:	4623      	mov	r3, r4
 800c6b2:	2002      	movs	r0, #2
 800c6b4:	47a8      	blx	r5
 800c6b6:	2501      	movs	r5, #1
 800c6b8:	f7f9 ffe0 	bl	800667c <acc_rss_integration_log_level>
 800c6bc:	2801      	cmp	r0, #1
 800c6be:	d90e      	bls.n	800c6de <acc_sensor_diagnostics_r2_sensor_status+0x316>
 800c6c0:	ab14      	add	r3, sp, #80	; 0x50
 800c6c2:	eb03 0245 	add.w	r2, r3, r5, lsl #1
 800c6c6:	4b53      	ldr	r3, [pc, #332]	; (800c814 <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 800c6c8:	f832 2c20 	ldrh.w	r2, [r2, #-32]
 800c6cc:	9200      	str	r2, [sp, #0]
 800c6ce:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800c6d0:	4a53      	ldr	r2, [pc, #332]	; (800c820 <acc_sensor_diagnostics_r2_sensor_status+0x458>)
 800c6d2:	4951      	ldr	r1, [pc, #324]	; (800c818 <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 800c6d4:	3501      	adds	r5, #1
 800c6d6:	4623      	mov	r3, r4
 800c6d8:	2002      	movs	r0, #2
 800c6da:	b2ed      	uxtb	r5, r5
 800c6dc:	47b0      	blx	r6
 800c6de:	f8df a134 	ldr.w	sl, [pc, #308]	; 800c814 <acc_sensor_diagnostics_r2_sensor_status+0x44c>
 800c6e2:	f8df 9158 	ldr.w	r9, [pc, #344]	; 800c83c <acc_sensor_diagnostics_r2_sensor_status+0x474>
 800c6e6:	f8df 8130 	ldr.w	r8, [pc, #304]	; 800c818 <acc_sensor_diagnostics_r2_sensor_status+0x450>
 800c6ea:	2601      	movs	r6, #1
 800c6ec:	f7f9 ffc6 	bl	800667c <acc_rss_integration_log_level>
 800c6f0:	ab14      	add	r3, sp, #80	; 0x50
 800c6f2:	eb03 0c45 	add.w	ip, r3, r5, lsl #1
 800c6f6:	2801      	cmp	r0, #1
 800c6f8:	4667      	mov	r7, ip
 800c6fa:	4623      	mov	r3, r4
 800c6fc:	464a      	mov	r2, r9
 800c6fe:	4641      	mov	r1, r8
 800c700:	f04f 0002 	mov.w	r0, #2
 800c704:	d909      	bls.n	800c71a <acc_sensor_diagnostics_r2_sensor_status+0x352>
 800c706:	f837 7c20 	ldrh.w	r7, [r7, #-32]
 800c70a:	f83c cc1e 	ldrh.w	ip, [ip, #-30]
 800c70e:	9600      	str	r6, [sp, #0]
 800c710:	e9cd 7c01 	strd	r7, ip, [sp, #4]
 800c714:	f8da 7034 	ldr.w	r7, [sl, #52]	; 0x34
 800c718:	47b8      	blx	r7
 800c71a:	3601      	adds	r6, #1
 800c71c:	3502      	adds	r5, #2
 800c71e:	2e08      	cmp	r6, #8
 800c720:	b2ed      	uxtb	r5, r5
 800c722:	d1e3      	bne.n	800c6ec <acc_sensor_diagnostics_r2_sensor_status+0x324>
 800c724:	2500      	movs	r5, #0
 800c726:	aa0b      	add	r2, sp, #44	; 0x2c
 800c728:	219d      	movs	r1, #157	; 0x9d
 800c72a:	4620      	mov	r0, r4
 800c72c:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
 800c730:	f7fc faf6 	bl	8008d20 <acc_sensor_reg_read>
 800c734:	f10d 022e 	add.w	r2, sp, #46	; 0x2e
 800c738:	2199      	movs	r1, #153	; 0x99
 800c73a:	4620      	mov	r0, r4
 800c73c:	f8ad 502e 	strh.w	r5, [sp, #46]	; 0x2e
 800c740:	f7fc faee 	bl	8008d20 <acc_sensor_reg_read>
 800c744:	aa0c      	add	r2, sp, #48	; 0x30
 800c746:	2196      	movs	r1, #150	; 0x96
 800c748:	4620      	mov	r0, r4
 800c74a:	f8ad 5030 	strh.w	r5, [sp, #48]	; 0x30
 800c74e:	f7fc fae7 	bl	8008d20 <acc_sensor_reg_read>
 800c752:	462a      	mov	r2, r5
 800c754:	21b2      	movs	r1, #178	; 0xb2
 800c756:	4620      	mov	r0, r4
 800c758:	f7fc faf8 	bl	8008d4c <acc_sensor_reg_write>
 800c75c:	f7f9 ff8e 	bl	800667c <acc_rss_integration_log_level>
 800c760:	2801      	cmp	r0, #1
 800c762:	d90f      	bls.n	800c784 <acc_sensor_diagnostics_r2_sensor_status+0x3bc>
 800c764:	482b      	ldr	r0, [pc, #172]	; (800c814 <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 800c766:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 800c76a:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 800c76e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 800c772:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800c774:	9300      	str	r3, [sp, #0]
 800c776:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800c77a:	4623      	mov	r3, r4
 800c77c:	4a29      	ldr	r2, [pc, #164]	; (800c824 <acc_sensor_diagnostics_r2_sensor_status+0x45c>)
 800c77e:	4926      	ldr	r1, [pc, #152]	; (800c818 <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 800c780:	2002      	movs	r0, #2
 800c782:	47a8      	blx	r5
 800c784:	f7f9 ff7a 	bl	800667c <acc_rss_integration_log_level>
 800c788:	2801      	cmp	r0, #1
 800c78a:	d909      	bls.n	800c7a0 <acc_sensor_diagnostics_r2_sensor_status+0x3d8>
 800c78c:	4a21      	ldr	r2, [pc, #132]	; (800c814 <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 800c78e:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 800c792:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800c794:	4920      	ldr	r1, [pc, #128]	; (800c818 <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 800c796:	9300      	str	r3, [sp, #0]
 800c798:	4a23      	ldr	r2, [pc, #140]	; (800c828 <acc_sensor_diagnostics_r2_sensor_status+0x460>)
 800c79a:	4623      	mov	r3, r4
 800c79c:	2002      	movs	r0, #2
 800c79e:	47a8      	blx	r5
 800c7a0:	f7f9 ff6c 	bl	800667c <acc_rss_integration_log_level>
 800c7a4:	2801      	cmp	r0, #1
 800c7a6:	d909      	bls.n	800c7bc <acc_sensor_diagnostics_r2_sensor_status+0x3f4>
 800c7a8:	4a1a      	ldr	r2, [pc, #104]	; (800c814 <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 800c7aa:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800c7ae:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800c7b0:	4919      	ldr	r1, [pc, #100]	; (800c818 <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 800c7b2:	9300      	str	r3, [sp, #0]
 800c7b4:	4a1d      	ldr	r2, [pc, #116]	; (800c82c <acc_sensor_diagnostics_r2_sensor_status+0x464>)
 800c7b6:	4623      	mov	r3, r4
 800c7b8:	2002      	movs	r0, #2
 800c7ba:	47a8      	blx	r5
 800c7bc:	f7f9 ff5e 	bl	800667c <acc_rss_integration_log_level>
 800c7c0:	2801      	cmp	r0, #1
 800c7c2:	d909      	bls.n	800c7d8 <acc_sensor_diagnostics_r2_sensor_status+0x410>
 800c7c4:	4a13      	ldr	r2, [pc, #76]	; (800c814 <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 800c7c6:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 800c7ca:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800c7cc:	4912      	ldr	r1, [pc, #72]	; (800c818 <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 800c7ce:	9300      	str	r3, [sp, #0]
 800c7d0:	4a17      	ldr	r2, [pc, #92]	; (800c830 <acc_sensor_diagnostics_r2_sensor_status+0x468>)
 800c7d2:	4623      	mov	r3, r4
 800c7d4:	2002      	movs	r0, #2
 800c7d6:	47a8      	blx	r5
 800c7d8:	f7f9 ff50 	bl	800667c <acc_rss_integration_log_level>
 800c7dc:	2801      	cmp	r0, #1
 800c7de:	d909      	bls.n	800c7f4 <acc_sensor_diagnostics_r2_sensor_status+0x42c>
 800c7e0:	4a0c      	ldr	r2, [pc, #48]	; (800c814 <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 800c7e2:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800c7e6:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800c7e8:	490b      	ldr	r1, [pc, #44]	; (800c818 <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 800c7ea:	9300      	str	r3, [sp, #0]
 800c7ec:	4a11      	ldr	r2, [pc, #68]	; (800c834 <acc_sensor_diagnostics_r2_sensor_status+0x46c>)
 800c7ee:	4623      	mov	r3, r4
 800c7f0:	2002      	movs	r0, #2
 800c7f2:	47a8      	blx	r5
 800c7f4:	f7f9 ff42 	bl	800667c <acc_rss_integration_log_level>
 800c7f8:	2801      	cmp	r0, #1
 800c7fa:	d905      	bls.n	800c808 <acc_sensor_diagnostics_r2_sensor_status+0x440>
 800c7fc:	4b05      	ldr	r3, [pc, #20]	; (800c814 <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 800c7fe:	4a0e      	ldr	r2, [pc, #56]	; (800c838 <acc_sensor_diagnostics_r2_sensor_status+0x470>)
 800c800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c802:	4905      	ldr	r1, [pc, #20]	; (800c818 <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 800c804:	2002      	movs	r0, #2
 800c806:	4798      	blx	r3
 800c808:	b014      	add	sp, #80	; 0x50
 800c80a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c80e:	2500      	movs	r5, #0
 800c810:	e752      	b.n	800c6b8 <acc_sensor_diagnostics_r2_sensor_status+0x2f0>
 800c812:	bf00      	nop
 800c814:	20000640 	.word	0x20000640
 800c818:	08014d8c 	.word	0x08014d8c
 800c81c:	08014f5c 	.word	0x08014f5c
 800c820:	08014f84 	.word	0x08014f84
 800c824:	08014fcc 	.word	0x08014fcc
 800c828:	08015020 	.word	0x08015020
 800c82c:	08015044 	.word	0x08015044
 800c830:	08015060 	.word	0x08015060
 800c834:	08015078 	.word	0x08015078
 800c838:	08015094 	.word	0x08015094
 800c83c:	08014fa4 	.word	0x08014fa4

0800c840 <acc_alg_basic_saturation_check_u16>:
 800c840:	eddf 6a17 	vldr	s13, [pc, #92]	; 800c8a0 <acc_alg_basic_saturation_check_u16+0x60>
 800c844:	ed9f 6a17 	vldr	s12, [pc, #92]	; 800c8a4 <acc_alg_basic_saturation_check_u16+0x64>
 800c848:	ee76 5ac0 	vsub.f32	s11, s13, s0
 800c84c:	ee80 7a26 	vdiv.f32	s14, s0, s13
 800c850:	0849      	lsrs	r1, r1, #1
 800c852:	eec5 7aa6 	vdiv.f32	s15, s11, s13
 800c856:	ee27 7a06 	vmul.f32	s14, s14, s12
 800c85a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800c85e:	d01c      	beq.n	800c89a <acc_alg_basic_saturation_check_u16+0x5a>
 800c860:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800c864:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c868:	ee17 3a10 	vmov	r3, s14
 800c86c:	b430      	push	{r4, r5}
 800c86e:	b29d      	uxth	r5, r3
 800c870:	ee17 3a90 	vmov	r3, s15
 800c874:	b29c      	uxth	r4, r3
 800c876:	1e83      	subs	r3, r0, #2
 800c878:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 800c87c:	e003      	b.n	800c886 <acc_alg_basic_saturation_check_u16+0x46>
 800c87e:	42aa      	cmp	r2, r5
 800c880:	d905      	bls.n	800c88e <acc_alg_basic_saturation_check_u16+0x4e>
 800c882:	428b      	cmp	r3, r1
 800c884:	d006      	beq.n	800c894 <acc_alg_basic_saturation_check_u16+0x54>
 800c886:	f833 2f02 	ldrh.w	r2, [r3, #2]!
 800c88a:	42a2      	cmp	r2, r4
 800c88c:	d3f7      	bcc.n	800c87e <acc_alg_basic_saturation_check_u16+0x3e>
 800c88e:	2001      	movs	r0, #1
 800c890:	bc30      	pop	{r4, r5}
 800c892:	4770      	bx	lr
 800c894:	2000      	movs	r0, #0
 800c896:	bc30      	pop	{r4, r5}
 800c898:	4770      	bx	lr
 800c89a:	4608      	mov	r0, r1
 800c89c:	4770      	bx	lr
 800c89e:	bf00      	nop
 800c8a0:	42c80000 	.word	0x42c80000
 800c8a4:	477fff00 	.word	0x477fff00

0800c8a8 <acc_alg_basic_saturation_check_i16>:
 800c8a8:	eddf 6a17 	vldr	s13, [pc, #92]	; 800c908 <acc_alg_basic_saturation_check_i16+0x60>
 800c8ac:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800c90c <acc_alg_basic_saturation_check_i16+0x64>
 800c8b0:	ed9f 6a17 	vldr	s12, [pc, #92]	; 800c910 <acc_alg_basic_saturation_check_i16+0x68>
 800c8b4:	ee36 0ac0 	vsub.f32	s0, s13, s0
 800c8b8:	0849      	lsrs	r1, r1, #1
 800c8ba:	eec0 7a26 	vdiv.f32	s15, s0, s13
 800c8be:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c8c2:	ee67 7a86 	vmul.f32	s15, s15, s12
 800c8c6:	d01c      	beq.n	800c902 <acc_alg_basic_saturation_check_i16+0x5a>
 800c8c8:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800c8cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c8d0:	ee17 3a10 	vmov	r3, s14
 800c8d4:	b430      	push	{r4, r5}
 800c8d6:	b21d      	sxth	r5, r3
 800c8d8:	ee17 3a90 	vmov	r3, s15
 800c8dc:	b21c      	sxth	r4, r3
 800c8de:	1e83      	subs	r3, r0, #2
 800c8e0:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 800c8e4:	e003      	b.n	800c8ee <acc_alg_basic_saturation_check_i16+0x46>
 800c8e6:	42aa      	cmp	r2, r5
 800c8e8:	dd05      	ble.n	800c8f6 <acc_alg_basic_saturation_check_i16+0x4e>
 800c8ea:	428b      	cmp	r3, r1
 800c8ec:	d006      	beq.n	800c8fc <acc_alg_basic_saturation_check_i16+0x54>
 800c8ee:	f933 2f02 	ldrsh.w	r2, [r3, #2]!
 800c8f2:	42a2      	cmp	r2, r4
 800c8f4:	dbf7      	blt.n	800c8e6 <acc_alg_basic_saturation_check_i16+0x3e>
 800c8f6:	2001      	movs	r0, #1
 800c8f8:	bc30      	pop	{r4, r5}
 800c8fa:	4770      	bx	lr
 800c8fc:	2000      	movs	r0, #0
 800c8fe:	bc30      	pop	{r4, r5}
 800c900:	4770      	bx	lr
 800c902:	4608      	mov	r0, r1
 800c904:	4770      	bx	lr
 800c906:	bf00      	nop
 800c908:	42c80000 	.word	0x42c80000
 800c90c:	c7000000 	.word	0xc7000000
 800c910:	46fffe00 	.word	0x46fffe00

0800c914 <acc_alg_basic_subtract_mean_uint16>:
 800c914:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800c918:	b570      	push	{r4, r5, r6, lr}
 800c91a:	d13c      	bne.n	800c996 <acc_alg_basic_subtract_mean_uint16+0x82>
 800c91c:	2900      	cmp	r1, #0
 800c91e:	d036      	beq.n	800c98e <acc_alg_basic_subtract_mean_uint16+0x7a>
 800c920:	eb00 0641 	add.w	r6, r0, r1, lsl #1
 800c924:	4604      	mov	r4, r0
 800c926:	2500      	movs	r5, #0
 800c928:	f834 2b02 	ldrh.w	r2, [r4], #2
 800c92c:	f5a2 4200 	sub.w	r2, r2, #32768	; 0x8000
 800c930:	42a6      	cmp	r6, r4
 800c932:	4415      	add	r5, r2
 800c934:	d1f8      	bne.n	800c928 <acc_alg_basic_subtract_mean_uint16+0x14>
 800c936:	2d00      	cmp	r5, #0
 800c938:	bfac      	ite	ge
 800c93a:	2401      	movge	r4, #1
 800c93c:	f04f 34ff 	movlt.w	r4, #4294967295
 800c940:	084a      	lsrs	r2, r1, #1
 800c942:	fb04 5202 	mla	r2, r4, r2, r5
 800c946:	fb92 f5f1 	sdiv	r5, r2, r1
 800c94a:	b22c      	sxth	r4, r5
 800c94c:	2c00      	cmp	r4, #0
 800c94e:	dd0e      	ble.n	800c96e <acc_alg_basic_subtract_mean_uint16+0x5a>
 800c950:	b2ad      	uxth	r5, r5
 800c952:	f830 2b02 	ldrh.w	r2, [r0], #2
 800c956:	42aa      	cmp	r2, r5
 800c958:	bf26      	itte	cs
 800c95a:	1b52      	subcs	r2, r2, r5
 800c95c:	b292      	uxthcs	r2, r2
 800c95e:	2200      	movcc	r2, #0
 800c960:	4286      	cmp	r6, r0
 800c962:	f820 2c02 	strh.w	r2, [r0, #-2]
 800c966:	d1f4      	bne.n	800c952 <acc_alg_basic_subtract_mean_uint16+0x3e>
 800c968:	b103      	cbz	r3, 800c96c <acc_alg_basic_subtract_mean_uint16+0x58>
 800c96a:	801c      	strh	r4, [r3, #0]
 800c96c:	bd70      	pop	{r4, r5, r6, pc}
 800c96e:	f504 417f 	add.w	r1, r4, #65280	; 0xff00
 800c972:	31ff      	adds	r1, #255	; 0xff
 800c974:	f830 2b02 	ldrh.w	r2, [r0], #2
 800c978:	4291      	cmp	r1, r2
 800c97a:	bfa6      	itte	ge
 800c97c:	1b52      	subge	r2, r2, r5
 800c97e:	b292      	uxthge	r2, r2
 800c980:	f64f 72ff 	movwlt	r2, #65535	; 0xffff
 800c984:	42b0      	cmp	r0, r6
 800c986:	f820 2c02 	strh.w	r2, [r0, #-2]
 800c98a:	d1f3      	bne.n	800c974 <acc_alg_basic_subtract_mean_uint16+0x60>
 800c98c:	e7ec      	b.n	800c968 <acc_alg_basic_subtract_mean_uint16+0x54>
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d0ec      	beq.n	800c96c <acc_alg_basic_subtract_mean_uint16+0x58>
 800c992:	8019      	strh	r1, [r3, #0]
 800c994:	bd70      	pop	{r4, r5, r6, pc}
 800c996:	4802      	ldr	r0, [pc, #8]	; (800c9a0 <acc_alg_basic_subtract_mean_uint16+0x8c>)
 800c998:	211b      	movs	r1, #27
 800c99a:	f7fc f893 	bl	8008ac4 <acc_assert_fail>
 800c99e:	bf00      	nop
 800c9a0:	08015114 	.word	0x08015114

0800c9a4 <acc_alg_basic_subtract_section_mean_q12_4>:
 800c9a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9a8:	2a00      	cmp	r2, #0
 800c9aa:	bf14      	ite	ne
 800c9ac:	4690      	movne	r8, r2
 800c9ae:	4688      	moveq	r8, r1
 800c9b0:	b1b9      	cbz	r1, 800c9e2 <acc_alg_basic_subtract_section_mean_q12_4+0x3e>
 800c9b2:	460f      	mov	r7, r1
 800c9b4:	4681      	mov	r9, r0
 800c9b6:	469a      	mov	sl, r3
 800c9b8:	460d      	mov	r5, r1
 800c9ba:	4646      	mov	r6, r8
 800c9bc:	2400      	movs	r4, #0
 800c9be:	19a3      	adds	r3, r4, r6
 800c9c0:	42bb      	cmp	r3, r7
 800c9c2:	bfc8      	it	gt
 800c9c4:	462e      	movgt	r6, r5
 800c9c6:	eb09 0044 	add.w	r0, r9, r4, lsl #1
 800c9ca:	4444      	add	r4, r8
 800c9cc:	4631      	mov	r1, r6
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	4652      	mov	r2, sl
 800c9d2:	b2a4      	uxth	r4, r4
 800c9d4:	f7ff ff9e 	bl	800c914 <acc_alg_basic_subtract_mean_uint16>
 800c9d8:	eba5 0508 	sub.w	r5, r5, r8
 800c9dc:	42a7      	cmp	r7, r4
 800c9de:	b2ad      	uxth	r5, r5
 800c9e0:	d8ed      	bhi.n	800c9be <acc_alg_basic_subtract_section_mean_q12_4+0x1a>
 800c9e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9e6:	bf00      	nop

0800c9e8 <acc_alg_basic_exponential_smoothing_q3_12_complex>:
 800c9e8:	b33b      	cbz	r3, 800ca3a <acc_alg_basic_exponential_smoothing_q3_12_complex+0x52>
 800c9ea:	b4f0      	push	{r4, r5, r6, r7}
 800c9ec:	f100 0c02 	add.w	ip, r0, #2
 800c9f0:	2400      	movs	r4, #0
 800c9f2:	1c8f      	adds	r7, r1, #2
 800c9f4:	f931 6024 	ldrsh.w	r6, [r1, r4, lsl #2]
 800c9f8:	f930 5024 	ldrsh.w	r5, [r0, r4, lsl #2]
 800c9fc:	1bad      	subs	r5, r5, r6
 800c9fe:	fb02 f505 	mul.w	r5, r2, r5
 800ca02:	2d00      	cmp	r5, #0
 800ca04:	bfb8      	it	lt
 800ca06:	f605 75ff 	addwlt	r5, r5, #4095	; 0xfff
 800ca0a:	eb06 3525 	add.w	r5, r6, r5, asr #12
 800ca0e:	f821 5024 	strh.w	r5, [r1, r4, lsl #2]
 800ca12:	f93c 5024 	ldrsh.w	r5, [ip, r4, lsl #2]
 800ca16:	f937 6024 	ldrsh.w	r6, [r7, r4, lsl #2]
 800ca1a:	1bad      	subs	r5, r5, r6
 800ca1c:	fb02 f505 	mul.w	r5, r2, r5
 800ca20:	2d00      	cmp	r5, #0
 800ca22:	bfb8      	it	lt
 800ca24:	f605 75ff 	addwlt	r5, r5, #4095	; 0xfff
 800ca28:	eb06 3525 	add.w	r5, r6, r5, asr #12
 800ca2c:	f827 5024 	strh.w	r5, [r7, r4, lsl #2]
 800ca30:	3401      	adds	r4, #1
 800ca32:	42a3      	cmp	r3, r4
 800ca34:	d1de      	bne.n	800c9f4 <acc_alg_basic_exponential_smoothing_q3_12_complex+0xc>
 800ca36:	bcf0      	pop	{r4, r5, r6, r7}
 800ca38:	4770      	bx	lr
 800ca3a:	4770      	bx	lr

0800ca3c <acc_alg_biquad_q3_12_lowpass_coeffs>:
 800ca3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca40:	eddf 7abd 	vldr	s15, [pc, #756]	; 800cd38 <acc_alg_biquad_q3_12_lowpass_coeffs+0x2fc>
 800ca44:	eeb0 0ac0 	vabs.f32	s0, s0
 800ca48:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800ca4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca50:	ed2d 8b02 	vpush	{d8}
 800ca54:	4680      	mov	r8, r0
 800ca56:	4689      	mov	r9, r1
 800ca58:	4616      	mov	r6, r2
 800ca5a:	461f      	mov	r7, r3
 800ca5c:	f300 810a 	bgt.w	800cc74 <acc_alg_biquad_q3_12_lowpass_coeffs+0x238>
 800ca60:	eddf 7ab6 	vldr	s15, [pc, #728]	; 800cd3c <acc_alg_biquad_q3_12_lowpass_coeffs+0x300>
 800ca64:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ca68:	f004 f8de 	bl	8010c28 <roundf>
 800ca6c:	ed9f 7ab4 	vldr	s14, [pc, #720]	; 800cd40 <acc_alg_biquad_q3_12_lowpass_coeffs+0x304>
 800ca70:	eddf 7ab4 	vldr	s15, [pc, #720]	; 800cd44 <acc_alg_biquad_q3_12_lowpass_coeffs+0x308>
 800ca74:	ee20 0a07 	vmul.f32	s0, s0, s14
 800ca78:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ca7c:	f1b8 0f00 	cmp.w	r8, #0
 800ca80:	d036      	beq.n	800caf0 <acc_alg_biquad_q3_12_lowpass_coeffs+0xb4>
 800ca82:	f000 fdbd 	bl	800d600 <acc_alg_basic_math_restricted_tan_f32>
 800ca86:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 800cd48 <acc_alg_biquad_q3_12_lowpass_coeffs+0x30c>
 800ca8a:	eddf 7ab0 	vldr	s15, [pc, #704]	; 800cd4c <acc_alg_biquad_q3_12_lowpass_coeffs+0x310>
 800ca8e:	ee20 0a07 	vmul.f32	s0, s0, s14
 800ca92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca96:	ee30 7a27 	vadd.f32	s14, s0, s15
 800ca9a:	ee60 7a27 	vmul.f32	s15, s0, s15
 800ca9e:	ee27 0a00 	vmul.f32	s0, s14, s0
 800caa2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800caa6:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 800caaa:	eec0 7a07 	vdiv.f32	s15, s0, s14
 800caae:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800cab2:	eef4 7ac6 	vcmpe.f32	s15, s12
 800cab6:	ee37 7a26 	vadd.f32	s14, s14, s13
 800caba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cabe:	eef1 5ac7 	vsqrt.f32	s11, s14
 800cac2:	ee86 7aa5 	vdiv.f32	s14, s13, s11
 800cac6:	d533      	bpl.n	800cb30 <acc_alg_biquad_q3_12_lowpass_coeffs+0xf4>
 800cac8:	eef4 7ae6 	vcmpe.f32	s15, s13
 800cacc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cad0:	f340 80d3 	ble.w	800cc7a <acc_alg_biquad_q3_12_lowpass_coeffs+0x23e>
 800cad4:	eddf 7a9e 	vldr	s15, [pc, #632]	; 800cd50 <acc_alg_biquad_q3_12_lowpass_coeffs+0x314>
 800cad8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cadc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800cae0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cae4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cae8:	ee17 3a90 	vmov	r3, s15
 800caec:	005c      	lsls	r4, r3, #1
 800caee:	e0d0      	b.n	800cc92 <acc_alg_biquad_q3_12_lowpass_coeffs+0x256>
 800caf0:	f000 fd86 	bl	800d600 <acc_alg_basic_math_restricted_tan_f32>
 800caf4:	eddf 7a95 	vldr	s15, [pc, #596]	; 800cd4c <acc_alg_biquad_q3_12_lowpass_coeffs+0x310>
 800caf8:	ee30 7a27 	vadd.f32	s14, s0, s15
 800cafc:	ee60 7a27 	vmul.f32	s15, s0, s15
 800cb00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb04:	ee27 0a00 	vmul.f32	s0, s14, s0
 800cb08:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800cb0c:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 800cb10:	eec0 7a07 	vdiv.f32	s15, s0, s14
 800cb14:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800cb18:	eef4 7ac6 	vcmpe.f32	s15, s12
 800cb1c:	ee37 7a26 	vadd.f32	s14, s14, s13
 800cb20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb24:	eef1 5ac7 	vsqrt.f32	s11, s14
 800cb28:	ee86 7aa5 	vdiv.f32	s14, s13, s11
 800cb2c:	f100 80a5 	bmi.w	800cc7a <acc_alg_biquad_q3_12_lowpass_coeffs+0x23e>
 800cb30:	eddf 6a88 	vldr	s13, [pc, #544]	; 800cd54 <acc_alg_biquad_q3_12_lowpass_coeffs+0x318>
 800cb34:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800cb38:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800cb3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cb40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cb48:	ee17 5a90 	vmov	r5, s15
 800cb4c:	fb05 f305 	mul.w	r3, r5, r5
 800cb50:	f1c3 6380 	rsb	r3, r3, #67108864	; 0x4000000
 800cb54:	ee07 3a90 	vmov	s15, r3
 800cb58:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800cb5c:	eef1 7ac7 	vsqrt.f32	s15, s14
 800cb60:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800cb64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cb6c:	ee17 4a90 	vmov	r4, s15
 800cb70:	2c00      	cmp	r4, #0
 800cb72:	f000 80a4 	beq.w	800ccbe <acc_alg_biquad_q3_12_lowpass_coeffs+0x282>
 800cb76:	f1b9 0f00 	cmp.w	r9, #0
 800cb7a:	d017      	beq.n	800cbac <acc_alg_biquad_q3_12_lowpass_coeffs+0x170>
 800cb7c:	b2a3      	uxth	r3, r4
 800cb7e:	f5c3 5180 	rsb	r1, r3, #4096	; 0x1000
 800cb82:	b208      	sxth	r0, r1
 800cb84:	b2aa      	uxth	r2, r5
 800cb86:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 800cb8a:	f8a9 0000 	strh.w	r0, [r9]
 800cb8e:	f8a9 0004 	strh.w	r0, [r9, #4]
 800cb92:	f5c4 50c0 	rsb	r0, r4, #6144	; 0x1800
 800cb96:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800cb9a:	0049      	lsls	r1, r1, #1
 800cb9c:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 800cba0:	f8a9 1002 	strh.w	r1, [r9, #2]
 800cba4:	f8a9 3006 	strh.w	r3, [r9, #6]
 800cba8:	f8a9 2008 	strh.w	r2, [r9, #8]
 800cbac:	2d00      	cmp	r5, #0
 800cbae:	f000 80a1 	beq.w	800ccf4 <acc_alg_biquad_q3_12_lowpass_coeffs+0x2b8>
 800cbb2:	2e00      	cmp	r6, #0
 800cbb4:	f000 80b8 	beq.w	800cd28 <acc_alg_biquad_q3_12_lowpass_coeffs+0x2ec>
 800cbb8:	f5c4 5280 	rsb	r2, r4, #4096	; 0x1000
 800cbbc:	fb05 f305 	mul.w	r3, r5, r5
 800cbc0:	fb04 f404 	mul.w	r4, r4, r4
 800cbc4:	ebc5 0242 	rsb	r2, r5, r2, lsl #1
 800cbc8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cbcc:	f104 447c 	add.w	r4, r4, #4227858432	; 0xfc000000
 800cbd0:	fb02 f202 	mul.w	r2, r2, r2
 800cbd4:	eba2 0244 	sub.w	r2, r2, r4, lsl #1
 800cbd8:	ee07 2a90 	vmov	s15, r2
 800cbdc:	0064      	lsls	r4, r4, #1
 800cbde:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800cbe2:	ee07 4a90 	vmov	s15, r4
 800cbe6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cbea:	ee87 8a87 	vdiv.f32	s16, s15, s14
 800cbee:	b356      	cbz	r6, 800cc46 <acc_alg_biquad_q3_12_lowpass_coeffs+0x20a>
 800cbf0:	f1b8 0f00 	cmp.w	r8, #0
 800cbf4:	f040 8089 	bne.w	800cd0a <acc_alg_biquad_q3_12_lowpass_coeffs+0x2ce>
 800cbf8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800cbfc:	ee78 6a27 	vadd.f32	s13, s16, s15
 800cc00:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800cc04:	ee76 7aa6 	vadd.f32	s15, s13, s13
 800cc08:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800cc0c:	ee77 7a86 	vadd.f32	s15, s15, s12
 800cc10:	eef1 6ae7 	vsqrt.f32	s13, s15
 800cc14:	f5c5 5500 	rsb	r5, r5, #8192	; 0x2000
 800cc18:	006d      	lsls	r5, r5, #1
 800cc1a:	eeb1 6ac7 	vsqrt.f32	s12, s14
 800cc1e:	ee07 5a90 	vmov	s15, r5
 800cc22:	ee36 7ac8 	vsub.f32	s14, s13, s16
 800cc26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cc2a:	eef1 6ac7 	vsqrt.f32	s13, s14
 800cc2e:	ee86 0a27 	vdiv.f32	s0, s12, s15
 800cc32:	ee20 0a26 	vmul.f32	s0, s0, s13
 800cc36:	f000 fcf3 	bl	800d620 <acc_alg_basic_math_restricted_atan_f32>
 800cc3a:	ed9f 7a42 	vldr	s14, [pc, #264]	; 800cd44 <acc_alg_biquad_q3_12_lowpass_coeffs+0x308>
 800cc3e:	eec0 7a07 	vdiv.f32	s15, s0, s14
 800cc42:	edc6 7a00 	vstr	s15, [r6]
 800cc46:	2f00      	cmp	r7, #0
 800cc48:	d071      	beq.n	800cd2e <acc_alg_biquad_q3_12_lowpass_coeffs+0x2f2>
 800cc4a:	eddf 7a43 	vldr	s15, [pc, #268]	; 800cd58 <acc_alg_biquad_q3_12_lowpass_coeffs+0x31c>
 800cc4e:	eddf 6a43 	vldr	s13, [pc, #268]	; 800cd5c <acc_alg_biquad_q3_12_lowpass_coeffs+0x320>
 800cc52:	ee28 7a27 	vmul.f32	s14, s16, s15
 800cc56:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800cc5a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cc5e:	2001      	movs	r0, #1
 800cc60:	ee28 8a67 	vnmul.f32	s16, s16, s15
 800cc64:	eec8 7a26 	vdiv.f32	s15, s16, s13
 800cc68:	ecbd 8b02 	vpop	{d8}
 800cc6c:	edc7 7a00 	vstr	s15, [r7]
 800cc70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc74:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 800cd60 <acc_alg_biquad_q3_12_lowpass_coeffs+0x324>
 800cc78:	e700      	b.n	800ca7c <acc_alg_biquad_q3_12_lowpass_coeffs+0x40>
 800cc7a:	eddf 7a3a 	vldr	s15, [pc, #232]	; 800cd64 <acc_alg_biquad_q3_12_lowpass_coeffs+0x328>
 800cc7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc82:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800cc86:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cc8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cc8e:	ee17 4a90 	vmov	r4, s15
 800cc92:	fb04 f304 	mul.w	r3, r4, r4
 800cc96:	009b      	lsls	r3, r3, #2
 800cc98:	f1c3 6380 	rsb	r3, r3, #67108864	; 0x4000000
 800cc9c:	ee07 3a90 	vmov	s15, r3
 800cca0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cca4:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800cca8:	eeb1 7ae7 	vsqrt.f32	s14, s15
 800ccac:	ee77 7a26 	vadd.f32	s15, s14, s13
 800ccb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ccb4:	ee17 5a90 	vmov	r5, s15
 800ccb8:	2c00      	cmp	r4, #0
 800ccba:	f47f af5c 	bne.w	800cb76 <acc_alg_biquad_q3_12_lowpass_coeffs+0x13a>
 800ccbe:	f1b9 0f00 	cmp.w	r9, #0
 800ccc2:	d00b      	beq.n	800ccdc <acc_alg_biquad_q3_12_lowpass_coeffs+0x2a0>
 800ccc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ccc8:	f8a9 4002 	strh.w	r4, [r9, #2]
 800cccc:	f8a9 4004 	strh.w	r4, [r9, #4]
 800ccd0:	f8a9 4006 	strh.w	r4, [r9, #6]
 800ccd4:	f8a9 4008 	strh.w	r4, [r9, #8]
 800ccd8:	f8a9 3000 	strh.w	r3, [r9]
 800ccdc:	b116      	cbz	r6, 800cce4 <acc_alg_biquad_q3_12_lowpass_coeffs+0x2a8>
 800ccde:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 800cce2:	6033      	str	r3, [r6, #0]
 800cce4:	b167      	cbz	r7, 800cd00 <acc_alg_biquad_q3_12_lowpass_coeffs+0x2c4>
 800cce6:	ecbd 8b02 	vpop	{d8}
 800ccea:	2300      	movs	r3, #0
 800ccec:	2000      	movs	r0, #0
 800ccee:	603b      	str	r3, [r7, #0]
 800ccf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ccf4:	2e00      	cmp	r6, #0
 800ccf6:	d0f5      	beq.n	800cce4 <acc_alg_biquad_q3_12_lowpass_coeffs+0x2a8>
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	6033      	str	r3, [r6, #0]
 800ccfc:	2f00      	cmp	r7, #0
 800ccfe:	d1f2      	bne.n	800cce6 <acc_alg_biquad_q3_12_lowpass_coeffs+0x2aa>
 800cd00:	ecbd 8b02 	vpop	{d8}
 800cd04:	4638      	mov	r0, r7
 800cd06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd0a:	eddf 6a17 	vldr	s13, [pc, #92]	; 800cd68 <acc_alg_biquad_q3_12_lowpass_coeffs+0x32c>
 800cd0e:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800cd4c <acc_alg_biquad_q3_12_lowpass_coeffs+0x310>
 800cd12:	ed9f 6a16 	vldr	s12, [pc, #88]	; 800cd6c <acc_alg_biquad_q3_12_lowpass_coeffs+0x330>
 800cd16:	ee78 6a26 	vadd.f32	s13, s16, s13
 800cd1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cd1e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800cd22:	ee77 7a86 	vadd.f32	s15, s15, s12
 800cd26:	e773      	b.n	800cc10 <acc_alg_biquad_q3_12_lowpass_coeffs+0x1d4>
 800cd28:	2f00      	cmp	r7, #0
 800cd2a:	f47f af45 	bne.w	800cbb8 <acc_alg_biquad_q3_12_lowpass_coeffs+0x17c>
 800cd2e:	ecbd 8b02 	vpop	{d8}
 800cd32:	2001      	movs	r0, #1
 800cd34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd38:	3effffde 	.word	0x3effffde
 800cd3c:	48800000 	.word	0x48800000
 800cd40:	36800000 	.word	0x36800000
 800cd44:	40490fdb 	.word	0x40490fdb
 800cd48:	3f9f8d77 	.word	0x3f9f8d77
 800cd4c:	3fb504f3 	.word	0x3fb504f3
 800cd50:	45000000 	.word	0x45000000
 800cd54:	46000000 	.word	0x46000000
 800cd58:	4113c6ef 	.word	0x4113c6ef
 800cd5c:	42a646e1 	.word	0x42a646e1
 800cd60:	3fc90fdb 	.word	0x3fc90fdb
 800cd64:	45800000 	.word	0x45800000
 800cd68:	3f15f61a 	.word	0x3f15f61a
 800cd6c:	3f95f61a 	.word	0x3f95f61a

0800cd70 <acc_alg_biquad_q3_12_complex_direct_form_1_filtfilt_reduced_edge_transients>:
 800cd70:	b570      	push	{r4, r5, r6, lr}
 800cd72:	2300      	movs	r3, #0
 800cd74:	b082      	sub	sp, #8
 800cd76:	4615      	mov	r5, r2
 800cd78:	460c      	mov	r4, r1
 800cd7a:	4606      	mov	r6, r0
 800cd7c:	f7f3 fa2c 	bl	80001d8 <acc_alg_biquad_q3_12_complex_direct_form_1>
 800cd80:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
 800cd84:	3b01      	subs	r3, #1
 800cd86:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800cd8a:	f834 3023 	ldrh.w	r3, [r4, r3, lsl #2]
 800cd8e:	8852      	ldrh	r2, [r2, #2]
 800cd90:	f8ad 2006 	strh.w	r2, [sp, #6]
 800cd94:	f8ad 3004 	strh.w	r3, [sp, #4]
 800cd98:	9b01      	ldr	r3, [sp, #4]
 800cd9a:	4630      	mov	r0, r6
 800cd9c:	462a      	mov	r2, r5
 800cd9e:	4621      	mov	r1, r4
 800cda0:	b002      	add	sp, #8
 800cda2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cda6:	f7f3 ba13 	b.w	80001d0 <acc_alg_biquad_q3_12_complex_direct_form_1_reverse>
 800cdaa:	bf00      	nop

0800cdac <acc_alg_iq_demodulation_q3_12_real>:
 800cdac:	ee20 1a01 	vmul.f32	s2, s0, s2
 800cdb0:	ee60 0a20 	vmul.f32	s1, s0, s1
 800cdb4:	eefd 7ac1 	vcvt.s32.f32	s15, s2
 800cdb8:	eebd 0ae0 	vcvt.s32.f32	s0, s1
 800cdbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cdc0:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800cdc4:	ee31 1a67 	vsub.f32	s2, s2, s15
 800cdc8:	ee30 0ac0 	vsub.f32	s0, s1, s0
 800cdcc:	eddf 7a26 	vldr	s15, [pc, #152]	; 800ce68 <acc_alg_iq_demodulation_q3_12_real+0xbc>
 800cdd0:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800ce6c <acc_alg_iq_demodulation_q3_12_real+0xc0>
 800cdd4:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 800cdd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cddc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cde0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800cde4:	bfb4      	ite	lt
 800cde6:	eeb0 6a66 	vmovlt.f32	s12, s13
 800cdea:	eeb0 6a67 	vmovge.f32	s12, s15
 800cdee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdf2:	bfb8      	it	lt
 800cdf4:	eef0 7a66 	vmovlt.f32	s15, s13
 800cdf8:	ee31 1a06 	vadd.f32	s2, s2, s12
 800cdfc:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ce00:	ee21 1a07 	vmul.f32	s2, s2, s14
 800ce04:	ee20 0a07 	vmul.f32	s0, s0, s14
 800ce08:	b36a      	cbz	r2, 800ce66 <acc_alg_iq_demodulation_q3_12_real+0xba>
 800ce0a:	eefc 7ac1 	vcvt.u32.f32	s15, s2
 800ce0e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce12:	ee17 9a90 	vmov	r9, s15
 800ce16:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800ce1a:	1e85      	subs	r5, r0, #2
 800ce1c:	ee17 7a90 	vmov	r7, s15
 800ce20:	eb05 0842 	add.w	r8, r5, r2, lsl #1
 800ce24:	1c8e      	adds	r6, r1, #2
 800ce26:	4648      	mov	r0, r9
 800ce28:	f935 4f02 	ldrsh.w	r4, [r5, #2]!
 800ce2c:	f000 fd04 	bl	800d838 <acc_alg_basic_math_q3_12_cos>
 800ce30:	4603      	mov	r3, r0
 800ce32:	fb04 f303 	mul.w	r3, r4, r3
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	bfb8      	it	lt
 800ce3a:	f603 73ff 	addwlt	r3, r3, #4095	; 0xfff
 800ce3e:	131b      	asrs	r3, r3, #12
 800ce40:	4648      	mov	r0, r9
 800ce42:	f826 3c02 	strh.w	r3, [r6, #-2]
 800ce46:	f000 fce1 	bl	800d80c <acc_alg_basic_math_q3_12_sin>
 800ce4a:	fb04 f000 	mul.w	r0, r4, r0
 800ce4e:	2800      	cmp	r0, #0
 800ce50:	bfb8      	it	lt
 800ce52:	f600 70ff 	addwlt	r0, r0, #4095	; 0xfff
 800ce56:	1300      	asrs	r0, r0, #12
 800ce58:	45a8      	cmp	r8, r5
 800ce5a:	f826 0b04 	strh.w	r0, [r6], #4
 800ce5e:	44b9      	add	r9, r7
 800ce60:	d1e1      	bne.n	800ce26 <acc_alg_iq_demodulation_q3_12_real+0x7a>
 800ce62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce66:	4770      	bx	lr
 800ce68:	00000000 	.word	0x00000000
 800ce6c:	4f800000 	.word	0x4f800000

0800ce70 <acc_alg_iq_demodulation_q3_12_complex>:
 800ce70:	ee20 1a01 	vmul.f32	s2, s0, s2
 800ce74:	ee60 0a20 	vmul.f32	s1, s0, s1
 800ce78:	eefd 7ac1 	vcvt.s32.f32	s15, s2
 800ce7c:	eebd 0ae0 	vcvt.s32.f32	s0, s1
 800ce80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ce84:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800ce88:	ee31 1a67 	vsub.f32	s2, s2, s15
 800ce8c:	ee30 0ac0 	vsub.f32	s0, s1, s0
 800ce90:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800cf4c <acc_alg_iq_demodulation_q3_12_complex+0xdc>
 800ce94:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800cf50 <acc_alg_iq_demodulation_q3_12_complex+0xe0>
 800ce98:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 800ce9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cea0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cea4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800cea8:	bfb4      	ite	lt
 800ceaa:	eeb0 6a66 	vmovlt.f32	s12, s13
 800ceae:	eeb0 6a67 	vmovge.f32	s12, s15
 800ceb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ceb6:	bfb8      	it	lt
 800ceb8:	eef0 7a66 	vmovlt.f32	s15, s13
 800cebc:	ee31 1a06 	vadd.f32	s2, s2, s12
 800cec0:	ee30 0a27 	vadd.f32	s0, s0, s15
 800cec4:	ee21 1a07 	vmul.f32	s2, s2, s14
 800cec8:	ee20 0a07 	vmul.f32	s0, s0, s14
 800cecc:	b3e9      	cbz	r1, 800cf4a <acc_alg_iq_demodulation_q3_12_complex+0xda>
 800cece:	eefc 7ac1 	vcvt.u32.f32	s15, s2
 800ced2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ced6:	ee17 8a90 	vmov	r8, s15
 800ceda:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800cede:	4607      	mov	r7, r0
 800cee0:	ee17 5a90 	vmov	r5, s15
 800cee4:	eb00 0681 	add.w	r6, r0, r1, lsl #2
 800cee8:	4640      	mov	r0, r8
 800ceea:	f9b7 9000 	ldrsh.w	r9, [r7]
 800ceee:	f9b7 a002 	ldrsh.w	sl, [r7, #2]
 800cef2:	f000 fca1 	bl	800d838 <acc_alg_basic_math_q3_12_cos>
 800cef6:	4604      	mov	r4, r0
 800cef8:	4640      	mov	r0, r8
 800cefa:	f000 fc87 	bl	800d80c <acc_alg_basic_math_q3_12_sin>
 800cefe:	fb09 f204 	mul.w	r2, r9, r4
 800cf02:	fb0a f100 	mul.w	r1, sl, r0
 800cf06:	2a00      	cmp	r2, #0
 800cf08:	fb04 f30a 	mul.w	r3, r4, sl
 800cf0c:	bfb8      	it	lt
 800cf0e:	f602 72ff 	addwlt	r2, r2, #4095	; 0xfff
 800cf12:	2900      	cmp	r1, #0
 800cf14:	fb09 f000 	mul.w	r0, r9, r0
 800cf18:	bfb8      	it	lt
 800cf1a:	f601 71ff 	addwlt	r1, r1, #4095	; 0xfff
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	bfb8      	it	lt
 800cf22:	f603 73ff 	addwlt	r3, r3, #4095	; 0xfff
 800cf26:	2800      	cmp	r0, #0
 800cf28:	bfb8      	it	lt
 800cf2a:	f600 70ff 	addwlt	r0, r0, #4095	; 0xfff
 800cf2e:	1312      	asrs	r2, r2, #12
 800cf30:	131b      	asrs	r3, r3, #12
 800cf32:	eba2 3221 	sub.w	r2, r2, r1, asr #12
 800cf36:	eb03 3320 	add.w	r3, r3, r0, asr #12
 800cf3a:	803a      	strh	r2, [r7, #0]
 800cf3c:	807b      	strh	r3, [r7, #2]
 800cf3e:	3704      	adds	r7, #4
 800cf40:	42be      	cmp	r6, r7
 800cf42:	44a8      	add	r8, r5
 800cf44:	d1d0      	bne.n	800cee8 <acc_alg_iq_demodulation_q3_12_complex+0x78>
 800cf46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf4a:	4770      	bx	lr
 800cf4c:	00000000 	.word	0x00000000
 800cf50:	4f800000 	.word	0x4f800000

0800cf54 <acc_alg_phase_estimation_q3_12>:
 800cf54:	2a01      	cmp	r2, #1
 800cf56:	b4f0      	push	{r4, r5, r6, r7}
 800cf58:	d94c      	bls.n	800cff4 <acc_alg_phase_estimation_q3_12+0xa0>
 800cf5a:	eb00 0c82 	add.w	ip, r0, r2, lsl #2
 800cf5e:	f1ac 0c04 	sub.w	ip, ip, #4
 800cf62:	4603      	mov	r3, r0
 800cf64:	f9b3 7000 	ldrsh.w	r7, [r3]
 800cf68:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 800cf6c:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 800cf70:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
 800cf74:	1bed      	subs	r5, r5, r7
 800cf76:	fb01 f505 	mul.w	r5, r1, r5
 800cf7a:	1ba4      	subs	r4, r4, r6
 800cf7c:	2d00      	cmp	r5, #0
 800cf7e:	fb01 f404 	mul.w	r4, r1, r4
 800cf82:	bfb8      	it	lt
 800cf84:	f605 75ff 	addwlt	r5, r5, #4095	; 0xfff
 800cf88:	2c00      	cmp	r4, #0
 800cf8a:	bfb8      	it	lt
 800cf8c:	f604 74ff 	addwlt	r4, r4, #4095	; 0xfff
 800cf90:	eb07 3525 	add.w	r5, r7, r5, asr #12
 800cf94:	eb06 3424 	add.w	r4, r6, r4, asr #12
 800cf98:	809d      	strh	r5, [r3, #4]
 800cf9a:	80dc      	strh	r4, [r3, #6]
 800cf9c:	3304      	adds	r3, #4
 800cf9e:	4563      	cmp	r3, ip
 800cfa0:	d1e0      	bne.n	800cf64 <acc_alg_phase_estimation_q3_12+0x10>
 800cfa2:	1e53      	subs	r3, r2, #1
 800cfa4:	3a02      	subs	r2, #2
 800cfa6:	eb00 0483 	add.w	r4, r0, r3, lsl #2
 800cfaa:	f930 6023 	ldrsh.w	r6, [r0, r3, lsl #2]
 800cfae:	f9b4 5002 	ldrsh.w	r5, [r4, #2]
 800cfb2:	1c87      	adds	r7, r0, #2
 800cfb4:	f930 4022 	ldrsh.w	r4, [r0, r2, lsl #2]
 800cfb8:	1ba4      	subs	r4, r4, r6
 800cfba:	fb01 f404 	mul.w	r4, r1, r4
 800cfbe:	2c00      	cmp	r4, #0
 800cfc0:	bfb8      	it	lt
 800cfc2:	f604 74ff 	addwlt	r4, r4, #4095	; 0xfff
 800cfc6:	eb06 3624 	add.w	r6, r6, r4, asr #12
 800cfca:	b236      	sxth	r6, r6
 800cfcc:	f820 6022 	strh.w	r6, [r0, r2, lsl #2]
 800cfd0:	f937 3022 	ldrsh.w	r3, [r7, r2, lsl #2]
 800cfd4:	1b5b      	subs	r3, r3, r5
 800cfd6:	fb01 f303 	mul.w	r3, r1, r3
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	bfb8      	it	lt
 800cfde:	f603 73ff 	addwlt	r3, r3, #4095	; 0xfff
 800cfe2:	eb05 3523 	add.w	r5, r5, r3, asr #12
 800cfe6:	b22d      	sxth	r5, r5
 800cfe8:	f827 5022 	strh.w	r5, [r7, r2, lsl #2]
 800cfec:	3a01      	subs	r2, #1
 800cfee:	d2e1      	bcs.n	800cfb4 <acc_alg_phase_estimation_q3_12+0x60>
 800cff0:	bcf0      	pop	{r4, r5, r6, r7}
 800cff2:	4770      	bx	lr
 800cff4:	d0fc      	beq.n	800cff0 <acc_alg_phase_estimation_q3_12+0x9c>
 800cff6:	f06f 0201 	mvn.w	r2, #1
 800cffa:	f04f 33ff 	mov.w	r3, #4294967295
 800cffe:	e7d2      	b.n	800cfa6 <acc_alg_phase_estimation_q3_12+0x52>

0800d000 <acc_alg_power_bins>:
 800d000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d004:	2900      	cmp	r1, #0
 800d006:	d03e      	beq.n	800d086 <acc_alg_power_bins+0x86>
 800d008:	1e87      	subs	r7, r0, #2
 800d00a:	eb07 0c41 	add.w	ip, r7, r1, lsl #1
 800d00e:	463e      	mov	r6, r7
 800d010:	004d      	lsls	r5, r1, #1
 800d012:	2400      	movs	r4, #0
 800d014:	f836 ef02 	ldrh.w	lr, [r6, #2]!
 800d018:	4566      	cmp	r6, ip
 800d01a:	4474      	add	r4, lr
 800d01c:	d1fa      	bne.n	800d014 <acc_alg_power_bins+0x14>
 800d01e:	fbb4 f4f1 	udiv	r4, r4, r1
 800d022:	b2a6      	uxth	r6, r4
 800d024:	f837 4f02 	ldrh.w	r4, [r7, #2]!
 800d028:	42b4      	cmp	r4, r6
 800d02a:	bf8c      	ite	hi
 800d02c:	1ba4      	subhi	r4, r4, r6
 800d02e:	1b34      	subls	r4, r6, r4
 800d030:	b2a4      	uxth	r4, r4
 800d032:	4567      	cmp	r7, ip
 800d034:	803c      	strh	r4, [r7, #0]
 800d036:	d1f5      	bne.n	800d024 <acc_alg_power_bins+0x24>
 800d038:	b31b      	cbz	r3, 800d082 <acc_alg_power_bins+0x82>
 800d03a:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800d03e:	f04f 0800 	mov.w	r8, #0
 800d042:	e00c      	b.n	800d05e <acc_alg_power_bins+0x5e>
 800d044:	f8a2 8000 	strh.w	r8, [r2]
 800d048:	3b01      	subs	r3, #1
 800d04a:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800d04e:	eba1 0106 	sub.w	r1, r1, r6
 800d052:	f1ae 0e02 	sub.w	lr, lr, #2
 800d056:	f102 0202 	add.w	r2, r2, #2
 800d05a:	d012      	beq.n	800d082 <acc_alg_power_bins+0x82>
 800d05c:	004d      	lsls	r5, r1, #1
 800d05e:	441d      	add	r5, r3
 800d060:	4575      	cmp	r5, lr
 800d062:	fbb5 f6fe 	udiv	r6, r5, lr
 800d066:	d3ed      	bcc.n	800d044 <acc_alg_power_bins+0x44>
 800d068:	2500      	movs	r5, #0
 800d06a:	462c      	mov	r4, r5
 800d06c:	1e87      	subs	r7, r0, #2
 800d06e:	f837 cf02 	ldrh.w	ip, [r7, #2]!
 800d072:	3401      	adds	r4, #1
 800d074:	42a6      	cmp	r6, r4
 800d076:	4465      	add	r5, ip
 800d078:	d8f9      	bhi.n	800d06e <acc_alg_power_bins+0x6e>
 800d07a:	fbb5 f5f6 	udiv	r5, r5, r6
 800d07e:	8015      	strh	r5, [r2, #0]
 800d080:	e7e2      	b.n	800d048 <acc_alg_power_bins+0x48>
 800d082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d086:	4802      	ldr	r0, [pc, #8]	; (800d090 <acc_alg_power_bins+0x90>)
 800d088:	2124      	movs	r1, #36	; 0x24
 800d08a:	f7fb fd1b 	bl	8008ac4 <acc_assert_fail>
 800d08e:	bf00      	nop
 800d090:	0801512c 	.word	0x0801512c

0800d094 <acc_confprogram_modify_bin_sensor>:
 800d094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d098:	b082      	sub	sp, #8
 800d09a:	e9dd 690a 	ldrd	r6, r9, [sp, #40]	; 0x28
 800d09e:	2501      	movs	r5, #1
 800d0a0:	409d      	lsls	r5, r3
 800d0a2:	42b5      	cmp	r5, r6
 800d0a4:	461c      	mov	r4, r3
 800d0a6:	4607      	mov	r7, r0
 800d0a8:	468a      	mov	sl, r1
 800d0aa:	4690      	mov	r8, r2
 800d0ac:	d809      	bhi.n	800d0c2 <acc_confprogram_modify_bin_sensor+0x2e>
 800d0ae:	4b10      	ldr	r3, [pc, #64]	; (800d0f0 <acc_confprogram_modify_bin_sensor+0x5c>)
 800d0b0:	9600      	str	r6, [sp, #0]
 800d0b2:	3d01      	subs	r5, #1
 800d0b4:	9501      	str	r5, [sp, #4]
 800d0b6:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 800d0b8:	4a0e      	ldr	r2, [pc, #56]	; (800d0f4 <acc_confprogram_modify_bin_sensor+0x60>)
 800d0ba:	490f      	ldr	r1, [pc, #60]	; (800d0f8 <acc_confprogram_modify_bin_sensor+0x64>)
 800d0bc:	4653      	mov	r3, sl
 800d0be:	2000      	movs	r0, #0
 800d0c0:	47a8      	blx	r5
 800d0c2:	4651      	mov	r1, sl
 800d0c4:	4638      	mov	r0, r7
 800d0c6:	f7fb fe7f 	bl	8008dc8 <acc_sensor_conf_read_instr>
 800d0ca:	f1c4 0420 	rsb	r4, r4, #32
 800d0ce:	f04f 35ff 	mov.w	r5, #4294967295
 800d0d2:	40e5      	lsrs	r5, r4
 800d0d4:	fa05 f408 	lsl.w	r4, r5, r8
 800d0d8:	ea20 0204 	bic.w	r2, r0, r4
 800d0dc:	fa06 f608 	lsl.w	r6, r6, r8
 800d0e0:	4651      	mov	r1, sl
 800d0e2:	4638      	mov	r0, r7
 800d0e4:	4332      	orrs	r2, r6
 800d0e6:	464b      	mov	r3, r9
 800d0e8:	b002      	add	sp, #8
 800d0ea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0ee:	4718      	bx	r3
 800d0f0:	20000640 	.word	0x20000640
 800d0f4:	0801513c 	.word	0x0801513c
 800d0f8:	08015174 	.word	0x08015174

0800d0fc <acc_confprogram_modify_bin>:
 800d0fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d100:	b085      	sub	sp, #20
 800d102:	f04f 0c01 	mov.w	ip, #1
 800d106:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800d108:	fa0c fc03 	lsl.w	ip, ip, r3
 800d10c:	45b4      	cmp	ip, r6
 800d10e:	461d      	mov	r5, r3
 800d110:	4680      	mov	r8, r0
 800d112:	460c      	mov	r4, r1
 800d114:	4617      	mov	r7, r2
 800d116:	d80b      	bhi.n	800d130 <acc_confprogram_modify_bin+0x34>
 800d118:	4b13      	ldr	r3, [pc, #76]	; (800d168 <acc_confprogram_modify_bin+0x6c>)
 800d11a:	9600      	str	r6, [sp, #0]
 800d11c:	f10c 32ff 	add.w	r2, ip, #4294967295
 800d120:	9201      	str	r2, [sp, #4]
 800d122:	f8d3 9034 	ldr.w	r9, [r3, #52]	; 0x34
 800d126:	4a11      	ldr	r2, [pc, #68]	; (800d16c <acc_confprogram_modify_bin+0x70>)
 800d128:	4911      	ldr	r1, [pc, #68]	; (800d170 <acc_confprogram_modify_bin+0x74>)
 800d12a:	4623      	mov	r3, r4
 800d12c:	2000      	movs	r0, #0
 800d12e:	47c8      	blx	r9
 800d130:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 800d134:	4620      	mov	r0, r4
 800d136:	a902      	add	r1, sp, #8
 800d138:	2201      	movs	r2, #1
 800d13a:	f7fb ff8d 	bl	8009058 <acc_utils_transfer_buffer_to_uint32>
 800d13e:	f1c5 0520 	rsb	r5, r5, #32
 800d142:	f04f 33ff 	mov.w	r3, #4294967295
 800d146:	9902      	ldr	r1, [sp, #8]
 800d148:	40eb      	lsrs	r3, r5
 800d14a:	40bb      	lsls	r3, r7
 800d14c:	fa06 f207 	lsl.w	r2, r6, r7
 800d150:	ea21 0303 	bic.w	r3, r1, r3
 800d154:	4313      	orrs	r3, r2
 800d156:	4621      	mov	r1, r4
 800d158:	2201      	movs	r2, #1
 800d15a:	a803      	add	r0, sp, #12
 800d15c:	9303      	str	r3, [sp, #12]
 800d15e:	f7fb ff6d 	bl	800903c <acc_utils_uint32_to_transfer_buffer>
 800d162:	b005      	add	sp, #20
 800d164:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d168:	20000640 	.word	0x20000640
 800d16c:	08015180 	.word	0x08015180
 800d170:	08015174 	.word	0x08015174

0800d174 <acc_confprogram_modify_runif_sensor>:
 800d174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d178:	4614      	mov	r4, r2
 800d17a:	b082      	sub	sp, #8
 800d17c:	f851 5024 	ldr.w	r5, [r1, r4, lsl #2]
 800d180:	f89d 2020 	ldrb.w	r2, [sp, #32]
 800d184:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 800d188:	f025 050f 	bic.w	r5, r5, #15
 800d18c:	4606      	mov	r6, r0
 800d18e:	b1b2      	cbz	r2, 800d1be <acc_confprogram_modify_runif_sensor+0x4a>
 800d190:	461f      	mov	r7, r3
 800d192:	f7f9 fa73 	bl	800667c <acc_rss_integration_log_level>
 800d196:	2803      	cmp	r0, #3
 800d198:	ea45 0507 	orr.w	r5, r5, r7
 800d19c:	d907      	bls.n	800d1ae <acc_confprogram_modify_runif_sensor+0x3a>
 800d19e:	4b0e      	ldr	r3, [pc, #56]	; (800d1d8 <acc_confprogram_modify_runif_sensor+0x64>)
 800d1a0:	9700      	str	r7, [sp, #0]
 800d1a2:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 800d1a4:	4a0d      	ldr	r2, [pc, #52]	; (800d1dc <acc_confprogram_modify_runif_sensor+0x68>)
 800d1a6:	490e      	ldr	r1, [pc, #56]	; (800d1e0 <acc_confprogram_modify_runif_sensor+0x6c>)
 800d1a8:	4623      	mov	r3, r4
 800d1aa:	2004      	movs	r0, #4
 800d1ac:	47b8      	blx	r7
 800d1ae:	462a      	mov	r2, r5
 800d1b0:	4621      	mov	r1, r4
 800d1b2:	4630      	mov	r0, r6
 800d1b4:	4643      	mov	r3, r8
 800d1b6:	b002      	add	sp, #8
 800d1b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d1bc:	4718      	bx	r3
 800d1be:	f7f9 fa5d 	bl	800667c <acc_rss_integration_log_level>
 800d1c2:	2803      	cmp	r0, #3
 800d1c4:	d9f3      	bls.n	800d1ae <acc_confprogram_modify_runif_sensor+0x3a>
 800d1c6:	4b04      	ldr	r3, [pc, #16]	; (800d1d8 <acc_confprogram_modify_runif_sensor+0x64>)
 800d1c8:	4a06      	ldr	r2, [pc, #24]	; (800d1e4 <acc_confprogram_modify_runif_sensor+0x70>)
 800d1ca:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 800d1cc:	4904      	ldr	r1, [pc, #16]	; (800d1e0 <acc_confprogram_modify_runif_sensor+0x6c>)
 800d1ce:	4623      	mov	r3, r4
 800d1d0:	2004      	movs	r0, #4
 800d1d2:	47b8      	blx	r7
 800d1d4:	e7eb      	b.n	800d1ae <acc_confprogram_modify_runif_sensor+0x3a>
 800d1d6:	bf00      	nop
 800d1d8:	20000640 	.word	0x20000640
 800d1dc:	080151b8 	.word	0x080151b8
 800d1e0:	08015174 	.word	0x08015174
 800d1e4:	080151f0 	.word	0x080151f0

0800d1e8 <acc_confprogram_modify_runif>:
 800d1e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1ec:	eb00 0542 	add.w	r5, r0, r2, lsl #1
 800d1f0:	b084      	sub	sp, #16
 800d1f2:	4616      	mov	r6, r2
 800d1f4:	460f      	mov	r7, r1
 800d1f6:	4628      	mov	r0, r5
 800d1f8:	2201      	movs	r2, #1
 800d1fa:	a902      	add	r1, sp, #8
 800d1fc:	4698      	mov	r8, r3
 800d1fe:	f7fb ff2b 	bl	8009058 <acc_utils_transfer_buffer_to_uint32>
 800d202:	9c02      	ldr	r4, [sp, #8]
 800d204:	f024 040f 	bic.w	r4, r4, #15
 800d208:	9403      	str	r4, [sp, #12]
 800d20a:	f1b8 0f00 	cmp.w	r8, #0
 800d20e:	d015      	beq.n	800d23c <acc_confprogram_modify_runif+0x54>
 800d210:	433c      	orrs	r4, r7
 800d212:	9403      	str	r4, [sp, #12]
 800d214:	f7f9 fa32 	bl	800667c <acc_rss_integration_log_level>
 800d218:	2803      	cmp	r0, #3
 800d21a:	d907      	bls.n	800d22c <acc_confprogram_modify_runif+0x44>
 800d21c:	4a0e      	ldr	r2, [pc, #56]	; (800d258 <acc_confprogram_modify_runif+0x70>)
 800d21e:	9700      	str	r7, [sp, #0]
 800d220:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800d222:	490e      	ldr	r1, [pc, #56]	; (800d25c <acc_confprogram_modify_runif+0x74>)
 800d224:	4a0e      	ldr	r2, [pc, #56]	; (800d260 <acc_confprogram_modify_runif+0x78>)
 800d226:	0873      	lsrs	r3, r6, #1
 800d228:	2004      	movs	r0, #4
 800d22a:	47a0      	blx	r4
 800d22c:	4629      	mov	r1, r5
 800d22e:	2201      	movs	r2, #1
 800d230:	a803      	add	r0, sp, #12
 800d232:	f7fb ff03 	bl	800903c <acc_utils_uint32_to_transfer_buffer>
 800d236:	b004      	add	sp, #16
 800d238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d23c:	f7f9 fa1e 	bl	800667c <acc_rss_integration_log_level>
 800d240:	2803      	cmp	r0, #3
 800d242:	d9f3      	bls.n	800d22c <acc_confprogram_modify_runif+0x44>
 800d244:	4a04      	ldr	r2, [pc, #16]	; (800d258 <acc_confprogram_modify_runif+0x70>)
 800d246:	9700      	str	r7, [sp, #0]
 800d248:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800d24a:	4904      	ldr	r1, [pc, #16]	; (800d25c <acc_confprogram_modify_runif+0x74>)
 800d24c:	4a05      	ldr	r2, [pc, #20]	; (800d264 <acc_confprogram_modify_runif+0x7c>)
 800d24e:	0873      	lsrs	r3, r6, #1
 800d250:	2004      	movs	r0, #4
 800d252:	47a0      	blx	r4
 800d254:	e7ea      	b.n	800d22c <acc_confprogram_modify_runif+0x44>
 800d256:	bf00      	nop
 800d258:	20000640 	.word	0x20000640
 800d25c:	08015174 	.word	0x08015174
 800d260:	080151b8 	.word	0x080151b8
 800d264:	08015220 	.word	0x08015220

0800d268 <acc_confprogram_patch_offset>:
 800d268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d26c:	b083      	sub	sp, #12
 800d26e:	4680      	mov	r8, r0
 800d270:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 800d274:	460d      	mov	r5, r1
 800d276:	4617      	mov	r7, r2
 800d278:	461e      	mov	r6, r3
 800d27a:	f7f9 f9ff 	bl	800667c <acc_rss_integration_log_level>
 800d27e:	2803      	cmp	r0, #3
 800d280:	d909      	bls.n	800d296 <acc_confprogram_patch_offset+0x2e>
 800d282:	4b2f      	ldr	r3, [pc, #188]	; (800d340 <acc_confprogram_patch_offset+0xd8>)
 800d284:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d286:	9200      	str	r2, [sp, #0]
 800d288:	f8d3 9034 	ldr.w	r9, [r3, #52]	; 0x34
 800d28c:	4a2d      	ldr	r2, [pc, #180]	; (800d344 <acc_confprogram_patch_offset+0xdc>)
 800d28e:	492e      	ldr	r1, [pc, #184]	; (800d348 <acc_confprogram_patch_offset+0xe0>)
 800d290:	4623      	mov	r3, r4
 800d292:	2004      	movs	r0, #4
 800d294:	47c8      	blx	r9
 800d296:	eb06 06c4 	add.w	r6, r6, r4, lsl #3
 800d29a:	8871      	ldrh	r1, [r6, #2]
 800d29c:	b399      	cbz	r1, 800d306 <acc_confprogram_patch_offset+0x9e>
 800d29e:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 800d340 <acc_confprogram_patch_offset+0xd8>
 800d2a2:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 800d34c <acc_confprogram_patch_offset+0xe4>
 800d2a6:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 800d348 <acc_confprogram_patch_offset+0xe0>
 800d2aa:	2400      	movs	r4, #0
 800d2ac:	e00b      	b.n	800d2c6 <acc_confprogram_patch_offset+0x5e>
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d039      	beq.n	800d326 <acc_confprogram_patch_offset+0xbe>
 800d2b2:	4649      	mov	r1, r9
 800d2b4:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 800d2b8:	4652      	mov	r2, sl
 800d2ba:	2000      	movs	r0, #0
 800d2bc:	4798      	blx	r3
 800d2be:	8871      	ldrh	r1, [r6, #2]
 800d2c0:	3401      	adds	r4, #1
 800d2c2:	42a1      	cmp	r1, r4
 800d2c4:	d91f      	bls.n	800d306 <acc_confprogram_patch_offset+0x9e>
 800d2c6:	6873      	ldr	r3, [r6, #4]
 800d2c8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800d2cc:	0042      	lsls	r2, r0, #1
 800d2ce:	b292      	uxth	r2, r2
 800d2d0:	42aa      	cmp	r2, r5
 800d2d2:	eb05 0c07 	add.w	ip, r5, r7
 800d2d6:	f3c0 7301 	ubfx	r3, r0, #28, #2
 800d2da:	d3f1      	bcc.n	800d2c0 <acc_confprogram_patch_offset+0x58>
 800d2dc:	4562      	cmp	r2, ip
 800d2de:	daef      	bge.n	800d2c0 <acc_confprogram_patch_offset+0x58>
 800d2e0:	2b01      	cmp	r3, #1
 800d2e2:	d013      	beq.n	800d30c <acc_confprogram_patch_offset+0xa4>
 800d2e4:	2b02      	cmp	r3, #2
 800d2e6:	d1e2      	bne.n	800d2ae <acc_confprogram_patch_offset+0x46>
 800d2e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d2ea:	1b52      	subs	r2, r2, r5
 800d2ec:	fab3 f383 	clz	r3, r3
 800d2f0:	f3c0 4103 	ubfx	r1, r0, #16, #4
 800d2f4:	b292      	uxth	r2, r2
 800d2f6:	095b      	lsrs	r3, r3, #5
 800d2f8:	4640      	mov	r0, r8
 800d2fa:	f7ff ff75 	bl	800d1e8 <acc_confprogram_modify_runif>
 800d2fe:	8871      	ldrh	r1, [r6, #2]
 800d300:	3401      	adds	r4, #1
 800d302:	42a1      	cmp	r1, r4
 800d304:	d8df      	bhi.n	800d2c6 <acc_confprogram_patch_offset+0x5e>
 800d306:	b003      	add	sp, #12
 800d308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d30c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d30e:	1b52      	subs	r2, r2, r5
 800d310:	3b00      	subs	r3, #0
 800d312:	f3c0 4103 	ubfx	r1, r0, #16, #4
 800d316:	b292      	uxth	r2, r2
 800d318:	bf18      	it	ne
 800d31a:	2301      	movne	r3, #1
 800d31c:	4640      	mov	r0, r8
 800d31e:	f7ff ff63 	bl	800d1e8 <acc_confprogram_modify_runif>
 800d322:	8871      	ldrh	r1, [r6, #2]
 800d324:	e7cc      	b.n	800d2c0 <acc_confprogram_patch_offset+0x58>
 800d326:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d328:	9300      	str	r3, [sp, #0]
 800d32a:	1b52      	subs	r2, r2, r5
 800d32c:	b291      	uxth	r1, r2
 800d32e:	f3c0 5344 	ubfx	r3, r0, #21, #5
 800d332:	f3c0 4204 	ubfx	r2, r0, #16, #5
 800d336:	4640      	mov	r0, r8
 800d338:	f7ff fee0 	bl	800d0fc <acc_confprogram_modify_bin>
 800d33c:	8871      	ldrh	r1, [r6, #2]
 800d33e:	e7bf      	b.n	800d2c0 <acc_confprogram_patch_offset+0x58>
 800d340:	20000640 	.word	0x20000640
 800d344:	0801527c 	.word	0x0801527c
 800d348:	08015174 	.word	0x08015174
 800d34c:	08015254 	.word	0x08015254

0800d350 <acc_confprogram_live_patch>:
 800d350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d354:	b083      	sub	sp, #12
 800d356:	4606      	mov	r6, r0
 800d358:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 800d35c:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 800d360:	468b      	mov	fp, r1
 800d362:	4617      	mov	r7, r2
 800d364:	461d      	mov	r5, r3
 800d366:	f7f9 f989 	bl	800667c <acc_rss_integration_log_level>
 800d36a:	2803      	cmp	r0, #3
 800d36c:	d909      	bls.n	800d382 <acc_confprogram_live_patch+0x32>
 800d36e:	4b2f      	ldr	r3, [pc, #188]	; (800d42c <acc_confprogram_live_patch+0xdc>)
 800d370:	f8cd a000 	str.w	sl, [sp]
 800d374:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 800d378:	4a2d      	ldr	r2, [pc, #180]	; (800d430 <acc_confprogram_live_patch+0xe0>)
 800d37a:	492e      	ldr	r1, [pc, #184]	; (800d434 <acc_confprogram_live_patch+0xe4>)
 800d37c:	4623      	mov	r3, r4
 800d37e:	2004      	movs	r0, #4
 800d380:	47c0      	blx	r8
 800d382:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800d386:	886b      	ldrh	r3, [r5, #2]
 800d388:	b373      	cbz	r3, 800d3e8 <acc_confprogram_live_patch+0x98>
 800d38a:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 800d438 <acc_confprogram_live_patch+0xe8>
 800d38e:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 800d434 <acc_confprogram_live_patch+0xe4>
 800d392:	2400      	movs	r4, #0
 800d394:	e008      	b.n	800d3a8 <acc_confprogram_live_patch+0x58>
 800d396:	2b00      	cmp	r3, #0
 800d398:	d03a      	beq.n	800d410 <acc_confprogram_live_patch+0xc0>
 800d39a:	4b24      	ldr	r3, [pc, #144]	; (800d42c <acc_confprogram_live_patch+0xdc>)
 800d39c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d39e:	4798      	blx	r3
 800d3a0:	886b      	ldrh	r3, [r5, #2]
 800d3a2:	3401      	adds	r4, #1
 800d3a4:	42a3      	cmp	r3, r4
 800d3a6:	d91f      	bls.n	800d3e8 <acc_confprogram_live_patch+0x98>
 800d3a8:	686b      	ldr	r3, [r5, #4]
 800d3aa:	f853 c024 	ldr.w	ip, [r3, r4, lsl #2]
 800d3ae:	f3cc 7301 	ubfx	r3, ip, #28, #2
 800d3b2:	2b01      	cmp	r3, #1
 800d3b4:	d01b      	beq.n	800d3ee <acc_confprogram_live_patch+0x9e>
 800d3b6:	2b02      	cmp	r3, #2
 800d3b8:	464a      	mov	r2, r9
 800d3ba:	4641      	mov	r1, r8
 800d3bc:	f04f 0000 	mov.w	r0, #0
 800d3c0:	d1e9      	bne.n	800d396 <acc_confprogram_live_patch+0x46>
 800d3c2:	990e      	ldr	r1, [sp, #56]	; 0x38
 800d3c4:	faba f38a 	clz	r3, sl
 800d3c8:	095b      	lsrs	r3, r3, #5
 800d3ca:	eb07 020c 	add.w	r2, r7, ip
 800d3ce:	e9cd 3100 	strd	r3, r1, [sp]
 800d3d2:	b292      	uxth	r2, r2
 800d3d4:	f3cc 4303 	ubfx	r3, ip, #16, #4
 800d3d8:	4659      	mov	r1, fp
 800d3da:	4630      	mov	r0, r6
 800d3dc:	f7ff feca 	bl	800d174 <acc_confprogram_modify_runif_sensor>
 800d3e0:	886b      	ldrh	r3, [r5, #2]
 800d3e2:	3401      	adds	r4, #1
 800d3e4:	42a3      	cmp	r3, r4
 800d3e6:	d8df      	bhi.n	800d3a8 <acc_confprogram_live_patch+0x58>
 800d3e8:	b003      	add	sp, #12
 800d3ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3ee:	f1ba 0100 	subs.w	r1, sl, #0
 800d3f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d3f4:	9301      	str	r3, [sp, #4]
 800d3f6:	bf18      	it	ne
 800d3f8:	2101      	movne	r1, #1
 800d3fa:	eb07 020c 	add.w	r2, r7, ip
 800d3fe:	9100      	str	r1, [sp, #0]
 800d400:	b292      	uxth	r2, r2
 800d402:	f3cc 4303 	ubfx	r3, ip, #16, #4
 800d406:	4659      	mov	r1, fp
 800d408:	4630      	mov	r0, r6
 800d40a:	f7ff feb3 	bl	800d174 <acc_confprogram_modify_runif_sensor>
 800d40e:	e7c7      	b.n	800d3a0 <acc_confprogram_live_patch+0x50>
 800d410:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d412:	eb07 010c 	add.w	r1, r7, ip
 800d416:	e9cd a300 	strd	sl, r3, [sp]
 800d41a:	b289      	uxth	r1, r1
 800d41c:	f3cc 5344 	ubfx	r3, ip, #21, #5
 800d420:	f3cc 4204 	ubfx	r2, ip, #16, #5
 800d424:	4630      	mov	r0, r6
 800d426:	f7ff fe35 	bl	800d094 <acc_confprogram_modify_bin_sensor>
 800d42a:	e7b9      	b.n	800d3a0 <acc_confprogram_live_patch+0x50>
 800d42c:	20000640 	.word	0x20000640
 800d430:	08015278 	.word	0x08015278
 800d434:	08015174 	.word	0x08015174
 800d438:	0801529c 	.word	0x0801529c

0800d43c <acc_confprogram_get_default_value>:
 800d43c:	f830 0031 	ldrh.w	r0, [r0, r1, lsl #3]
 800d440:	4770      	bx	lr
 800d442:	bf00      	nop

0800d444 <acc_confprogram_copy>:
 800d444:	b152      	cbz	r2, 800d45c <acc_confprogram_copy+0x18>
 800d446:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800d44a:	3804      	subs	r0, #4
 800d44c:	f850 3f04 	ldr.w	r3, [r0, #4]!
 800d450:	804b      	strh	r3, [r1, #2]
 800d452:	0c1b      	lsrs	r3, r3, #16
 800d454:	800b      	strh	r3, [r1, #0]
 800d456:	3104      	adds	r1, #4
 800d458:	4291      	cmp	r1, r2
 800d45a:	d1f7      	bne.n	800d44c <acc_confprogram_copy+0x8>
 800d45c:	4770      	bx	lr
 800d45e:	bf00      	nop

0800d460 <acc_diagnostic_log_set_scope>:
 800d460:	4b02      	ldr	r3, [pc, #8]	; (800d46c <acc_diagnostic_log_set_scope+0xc>)
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	b10b      	cbz	r3, 800d46a <acc_diagnostic_log_set_scope+0xa>
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	4718      	bx	r3
 800d46a:	4770      	bx	lr
 800d46c:	200004f0 	.word	0x200004f0

0800d470 <acc_diagnostic_log_declare_parameter>:
 800d470:	4b02      	ldr	r3, [pc, #8]	; (800d47c <acc_diagnostic_log_declare_parameter+0xc>)
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	b10b      	cbz	r3, 800d47a <acc_diagnostic_log_declare_parameter+0xa>
 800d476:	685b      	ldr	r3, [r3, #4]
 800d478:	4718      	bx	r3
 800d47a:	4770      	bx	lr
 800d47c:	200004f0 	.word	0x200004f0

0800d480 <acc_diagnostic_log_set_parameter>:
 800d480:	4b02      	ldr	r3, [pc, #8]	; (800d48c <acc_diagnostic_log_set_parameter+0xc>)
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	b10b      	cbz	r3, 800d48a <acc_diagnostic_log_set_parameter+0xa>
 800d486:	689b      	ldr	r3, [r3, #8]
 800d488:	4718      	bx	r3
 800d48a:	4770      	bx	lr
 800d48c:	200004f0 	.word	0x200004f0

0800d490 <acc_diagnostic_log_array>:
 800d490:	4b02      	ldr	r3, [pc, #8]	; (800d49c <acc_diagnostic_log_array+0xc>)
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	b10b      	cbz	r3, 800d49a <acc_diagnostic_log_array+0xa>
 800d496:	68db      	ldr	r3, [r3, #12]
 800d498:	4718      	bx	r3
 800d49a:	4770      	bx	lr
 800d49c:	200004f0 	.word	0x200004f0

0800d4a0 <acc_diagnostic_log_scalar>:
 800d4a0:	4b02      	ldr	r3, [pc, #8]	; (800d4ac <acc_diagnostic_log_scalar+0xc>)
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	b10b      	cbz	r3, 800d4aa <acc_diagnostic_log_scalar+0xa>
 800d4a6:	695b      	ldr	r3, [r3, #20]
 800d4a8:	4718      	bx	r3
 800d4aa:	4770      	bx	lr
 800d4ac:	200004f0 	.word	0x200004f0

0800d4b0 <acc_diagnostic_log_data_u16>:
 800d4b0:	4b02      	ldr	r3, [pc, #8]	; (800d4bc <acc_diagnostic_log_data_u16+0xc>)
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	b10b      	cbz	r3, 800d4ba <acc_diagnostic_log_data_u16+0xa>
 800d4b6:	6a1b      	ldr	r3, [r3, #32]
 800d4b8:	4718      	bx	r3
 800d4ba:	4770      	bx	lr
 800d4bc:	200004f0 	.word	0x200004f0

0800d4c0 <acc_diagnostic_log_data_i16>:
 800d4c0:	4b02      	ldr	r3, [pc, #8]	; (800d4cc <acc_diagnostic_log_data_i16+0xc>)
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	b10b      	cbz	r3, 800d4ca <acc_diagnostic_log_data_i16+0xa>
 800d4c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4c8:	4718      	bx	r3
 800d4ca:	4770      	bx	lr
 800d4cc:	200004f0 	.word	0x200004f0

0800d4d0 <acc_diagnostic_log_data_u8>:
 800d4d0:	4b02      	ldr	r3, [pc, #8]	; (800d4dc <acc_diagnostic_log_data_u8+0xc>)
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	b10b      	cbz	r3, 800d4da <acc_diagnostic_log_data_u8+0xa>
 800d4d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4d8:	4718      	bx	r3
 800d4da:	4770      	bx	lr
 800d4dc:	200004f0 	.word	0x200004f0

0800d4e0 <acc_image_a111_r2c_cbank_and_vana_calibration_get>:
 800d4e0:	4800      	ldr	r0, [pc, #0]	; (800d4e4 <acc_image_a111_r2c_cbank_and_vana_calibration_get+0x4>)
 800d4e2:	4770      	bx	lr
 800d4e4:	0801537c 	.word	0x0801537c

0800d4e8 <acc_image_a111_r2c_cbank_and_vana_calibration_param_table_get>:
 800d4e8:	4800      	ldr	r0, [pc, #0]	; (800d4ec <acc_image_a111_r2c_cbank_and_vana_calibration_param_table_get+0x4>)
 800d4ea:	4770      	bx	lr
 800d4ec:	080159d4 	.word	0x080159d4

0800d4f0 <acc_image_a111_r2c_rx_fine_dip_calibration_get>:
 800d4f0:	4800      	ldr	r0, [pc, #0]	; (800d4f4 <acc_image_a111_r2c_rx_fine_dip_calibration_get+0x4>)
 800d4f2:	4770      	bx	lr
 800d4f4:	08015d64 	.word	0x08015d64

0800d4f8 <acc_image_a111_r2c_rx_fine_dip_calibration_param_table_get>:
 800d4f8:	4800      	ldr	r0, [pc, #0]	; (800d4fc <acc_image_a111_r2c_rx_fine_dip_calibration_param_table_get+0x4>)
 800d4fa:	4770      	bx	lr
 800d4fc:	08016ac0 	.word	0x08016ac0

0800d500 <acc_image_a111_r2c_sweep_get>:
 800d500:	4800      	ldr	r0, [pc, #0]	; (800d504 <acc_image_a111_r2c_sweep_get+0x4>)
 800d502:	4770      	bx	lr
 800d504:	08017044 	.word	0x08017044

0800d508 <acc_image_a111_r2c_sweep_param_table_get>:
 800d508:	4800      	ldr	r0, [pc, #0]	; (800d50c <acc_image_a111_r2c_sweep_param_table_get+0x4>)
 800d50a:	4770      	bx	lr
 800d50c:	08017e68 	.word	0x08017e68

0800d510 <quarter_pi_cos_sin_f32>:
 800d510:	eddf 7a26 	vldr	s15, [pc, #152]	; 800d5ac <quarter_pi_cos_sin_f32+0x9c>
 800d514:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800d518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d51c:	d442      	bmi.n	800d5a4 <quarter_pi_cos_sin_f32+0x94>
 800d51e:	b310      	cbz	r0, 800d566 <quarter_pi_cos_sin_f32+0x56>
 800d520:	ee20 0a00 	vmul.f32	s0, s0, s0
 800d524:	eddf 7a22 	vldr	s15, [pc, #136]	; 800d5b0 <quarter_pi_cos_sin_f32+0xa0>
 800d528:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800d5b4 <quarter_pi_cos_sin_f32+0xa4>
 800d52c:	eddf 5a22 	vldr	s11, [pc, #136]	; 800d5b8 <quarter_pi_cos_sin_f32+0xa8>
 800d530:	ed9f 6a22 	vldr	s12, [pc, #136]	; 800d5bc <quarter_pi_cos_sin_f32+0xac>
 800d534:	ee60 7a27 	vmul.f32	s15, s0, s15
 800d538:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800d53c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d540:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d544:	ee60 7a27 	vmul.f32	s15, s0, s15
 800d548:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800d54c:	ee60 7a27 	vmul.f32	s15, s0, s15
 800d550:	ee77 7a86 	vadd.f32	s15, s15, s12
 800d554:	ee60 7a27 	vmul.f32	s15, s0, s15
 800d558:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d55c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d560:	ee30 0a07 	vadd.f32	s0, s0, s14
 800d564:	4770      	bx	lr
 800d566:	ee60 7a00 	vmul.f32	s15, s0, s0
 800d56a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800d5b0 <quarter_pi_cos_sin_f32+0xa0>
 800d56e:	ed9f 5a14 	vldr	s10, [pc, #80]	; 800d5c0 <quarter_pi_cos_sin_f32+0xb0>
 800d572:	eddf 5a14 	vldr	s11, [pc, #80]	; 800d5c4 <quarter_pi_cos_sin_f32+0xb4>
 800d576:	ed9f 6a14 	vldr	s12, [pc, #80]	; 800d5c8 <quarter_pi_cos_sin_f32+0xb8>
 800d57a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d57e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d582:	ee37 7a45 	vsub.f32	s14, s14, s10
 800d586:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d58a:	ee37 7a25 	vadd.f32	s14, s14, s11
 800d58e:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d592:	ee37 7a46 	vsub.f32	s14, s14, s12
 800d596:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d59a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d59e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800d5a2:	4770      	bx	lr
 800d5a4:	ed9f 0a09 	vldr	s0, [pc, #36]	; 800d5cc <quarter_pi_cos_sin_f32+0xbc>
 800d5a8:	4770      	bx	lr
 800d5aa:	bf00      	nop
 800d5ac:	bf490fdb 	.word	0xbf490fdb
 800d5b0:	00000000 	.word	0x00000000
 800d5b4:	37cd1800 	.word	0x37cd1800
 800d5b8:	3ab606a0 	.word	0x3ab606a0
 800d5bc:	3d2aaaa6 	.word	0x3d2aaaa6
 800d5c0:	394c909b 	.word	0x394c909b
 800d5c4:	3c088366 	.word	0x3c088366
 800d5c8:	3e2aaaa2 	.word	0x3e2aaaa2
 800d5cc:	7fc00000 	.word	0x7fc00000

0800d5d0 <restricted_cos_sin_f32>:
 800d5d0:	eddf 7a09 	vldr	s15, [pc, #36]	; 800d5f8 <restricted_cos_sin_f32+0x28>
 800d5d4:	eddf 6a09 	vldr	s13, [pc, #36]	; 800d5fc <restricted_cos_sin_f32+0x2c>
 800d5d8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800d5dc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d5e0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800d5e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5e8:	bf5c      	itt	pl
 800d5ea:	f080 0001 	eorpl.w	r0, r0, #1
 800d5ee:	eeb0 0a67 	vmovpl.f32	s0, s15
 800d5f2:	f7ff bf8d 	b.w	800d510 <quarter_pi_cos_sin_f32>
 800d5f6:	bf00      	nop
 800d5f8:	3fc90fdb 	.word	0x3fc90fdb
 800d5fc:	333bbd2e 	.word	0x333bbd2e

0800d600 <acc_alg_basic_math_restricted_tan_f32>:
 800d600:	b508      	push	{r3, lr}
 800d602:	2000      	movs	r0, #0
 800d604:	eeb0 4a40 	vmov.f32	s8, s0
 800d608:	f7ff ffe2 	bl	800d5d0 <restricted_cos_sin_f32>
 800d60c:	2001      	movs	r0, #1
 800d60e:	eef0 4a40 	vmov.f32	s9, s0
 800d612:	eeb0 0a44 	vmov.f32	s0, s8
 800d616:	f7ff ffdb 	bl	800d5d0 <restricted_cos_sin_f32>
 800d61a:	ee84 0a80 	vdiv.f32	s0, s9, s0
 800d61e:	bd08      	pop	{r3, pc}

0800d620 <acc_alg_basic_math_restricted_atan_f32>:
 800d620:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800d624:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800d628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d62c:	d434      	bmi.n	800d698 <acc_alg_basic_math_restricted_atan_f32+0x78>
 800d62e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d632:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800d636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d63a:	dd1b      	ble.n	800d674 <acc_alg_basic_math_restricted_atan_f32+0x54>
 800d63c:	ee87 6a80 	vdiv.f32	s12, s15, s0
 800d640:	4b17      	ldr	r3, [pc, #92]	; (800d6a0 <acc_alg_basic_math_restricted_atan_f32+0x80>)
 800d642:	f1a3 0224 	sub.w	r2, r3, #36	; 0x24
 800d646:	eddf 7a17 	vldr	s15, [pc, #92]	; 800d6a4 <acc_alg_basic_math_restricted_atan_f32+0x84>
 800d64a:	ee66 6a06 	vmul.f32	s13, s12, s12
 800d64e:	ed33 7a01 	vldmdb	r3!, {s14}
 800d652:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d656:	429a      	cmp	r2, r3
 800d658:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d65c:	d1f7      	bne.n	800d64e <acc_alg_basic_math_restricted_atan_f32+0x2e>
 800d65e:	ee66 7a27 	vmul.f32	s15, s12, s15
 800d662:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800d6a8 <acc_alg_basic_math_restricted_atan_f32+0x88>
 800d666:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800d6ac <acc_alg_basic_math_restricted_atan_f32+0x8c>
 800d66a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d66e:	ee30 0a47 	vsub.f32	s0, s0, s14
 800d672:	4770      	bx	lr
 800d674:	4b0a      	ldr	r3, [pc, #40]	; (800d6a0 <acc_alg_basic_math_restricted_atan_f32+0x80>)
 800d676:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800d6a4 <acc_alg_basic_math_restricted_atan_f32+0x84>
 800d67a:	ee60 6a00 	vmul.f32	s13, s0, s0
 800d67e:	f1a3 0224 	sub.w	r2, r3, #36	; 0x24
 800d682:	ed33 7a01 	vldmdb	r3!, {s14}
 800d686:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d68a:	429a      	cmp	r2, r3
 800d68c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d690:	d1f7      	bne.n	800d682 <acc_alg_basic_math_restricted_atan_f32+0x62>
 800d692:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d696:	4770      	bx	lr
 800d698:	ed9f 0a05 	vldr	s0, [pc, #20]	; 800d6b0 <acc_alg_basic_math_restricted_atan_f32+0x90>
 800d69c:	4770      	bx	lr
 800d69e:	bf00      	nop
 800d6a0:	0801838c 	.word	0x0801838c
 800d6a4:	00000000 	.word	0x00000000
 800d6a8:	3fc90fdb 	.word	0x3fc90fdb
 800d6ac:	333bbd2e 	.word	0x333bbd2e
 800d6b0:	7fc00000 	.word	0x7fc00000

0800d6b4 <acc_alg_basic_math_q3_12_complex_mul>:
 800d6b4:	b302      	cbz	r2, 800d6f8 <acc_alg_basic_math_q3_12_complex_mul+0x44>
 800d6b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	1c87      	adds	r7, r0, #2
 800d6bc:	f101 0c02 	add.w	ip, r1, #2
 800d6c0:	f930 e023 	ldrsh.w	lr, [r0, r3, lsl #2]
 800d6c4:	f831 4023 	ldrh.w	r4, [r1, r3, lsl #2]
 800d6c8:	f937 5023 	ldrsh.w	r5, [r7, r3, lsl #2]
 800d6cc:	f93c 6023 	ldrsh.w	r6, [ip, r3, lsl #2]
 800d6d0:	fb14 f40e 	smulbb	r4, r4, lr
 800d6d4:	fb05 4416 	mls	r4, r5, r6, r4
 800d6d8:	1324      	asrs	r4, r4, #12
 800d6da:	f820 4023 	strh.w	r4, [r0, r3, lsl #2]
 800d6de:	f831 4023 	ldrh.w	r4, [r1, r3, lsl #2]
 800d6e2:	fb06 f60e 	mul.w	r6, r6, lr
 800d6e6:	fb15 6504 	smlabb	r5, r5, r4, r6
 800d6ea:	132d      	asrs	r5, r5, #12
 800d6ec:	f827 5023 	strh.w	r5, [r7, r3, lsl #2]
 800d6f0:	3301      	adds	r3, #1
 800d6f2:	429a      	cmp	r2, r3
 800d6f4:	d1e4      	bne.n	800d6c0 <acc_alg_basic_math_q3_12_complex_mul+0xc>
 800d6f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d6f8:	4770      	bx	lr
 800d6fa:	bf00      	nop

0800d6fc <acc_alg_basic_math_q3_12_complex_scalar_abs>:
 800d6fc:	b203      	sxth	r3, r0
 800d6fe:	1400      	asrs	r0, r0, #16
 800d700:	2b00      	cmp	r3, #0
 800d702:	ea80 72e0 	eor.w	r2, r0, r0, asr #31
 800d706:	bfb8      	it	lt
 800d708:	425b      	neglt	r3, r3
 800d70a:	eba2 72e0 	sub.w	r2, r2, r0, asr #31
 800d70e:	b218      	sxth	r0, r3
 800d710:	b213      	sxth	r3, r2
 800d712:	4298      	cmp	r0, r3
 800d714:	b082      	sub	sp, #8
 800d716:	da02      	bge.n	800d71e <acc_alg_basic_math_q3_12_complex_scalar_abs+0x22>
 800d718:	4602      	mov	r2, r0
 800d71a:	4618      	mov	r0, r3
 800d71c:	4613      	mov	r3, r2
 800d71e:	f240 62a1 	movw	r2, #1697	; 0x6a1
 800d722:	fb10 f202 	smulbb	r2, r0, r2
 800d726:	2a00      	cmp	r2, #0
 800d728:	bfb8      	it	lt
 800d72a:	f602 72ff 	addwlt	r2, r2, #4095	; 0xfff
 800d72e:	ebb3 3f22 	cmp.w	r3, r2, asr #12
 800d732:	da0b      	bge.n	800d74c <acc_alg_basic_math_q3_12_complex_scalar_abs+0x50>
 800d734:	f240 3227 	movw	r2, #807	; 0x327
 800d738:	fb13 f302 	smulbb	r3, r3, r2
 800d73c:	f640 72d7 	movw	r2, #4055	; 0xfd7
 800d740:	fb10 3002 	smlabb	r0, r0, r2, r3
 800d744:	f340 300f 	sbfx	r0, r0, #12, #16
 800d748:	b002      	add	sp, #8
 800d74a:	4770      	bx	lr
 800d74c:	f640 02fa 	movw	r2, #2298	; 0x8fa
 800d750:	fb13 f302 	smulbb	r3, r3, r2
 800d754:	f640 5271 	movw	r2, #3441	; 0xd71
 800d758:	fb10 3002 	smlabb	r0, r0, r2, r3
 800d75c:	f340 300f 	sbfx	r0, r0, #12, #16
 800d760:	b002      	add	sp, #8
 800d762:	4770      	bx	lr

0800d764 <acc_alg_basic_math_q3_12_complex_conj_normalize>:
 800d764:	2900      	cmp	r1, #0
 800d766:	d04f      	beq.n	800d808 <acc_alg_basic_math_q3_12_complex_conj_normalize+0xa4>
 800d768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d76c:	f240 6ca1 	movw	ip, #1697	; 0x6a1
 800d770:	2400      	movs	r4, #0
 800d772:	1c87      	adds	r7, r0, #2
 800d774:	f640 0afa 	movw	sl, #2298	; 0x8fa
 800d778:	f640 5971 	movw	r9, #3441	; 0xd71
 800d77c:	f240 3827 	movw	r8, #807	; 0x327
 800d780:	f640 7ed7 	movw	lr, #4055	; 0xfd7
 800d784:	e006      	b.n	800d794 <acc_alg_basic_math_q3_12_complex_conj_normalize+0x30>
 800d786:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
 800d78a:	f827 3024 	strh.w	r3, [r7, r4, lsl #2]
 800d78e:	3401      	adds	r4, #1
 800d790:	42a1      	cmp	r1, r4
 800d792:	d037      	beq.n	800d804 <acc_alg_basic_math_q3_12_complex_conj_normalize+0xa0>
 800d794:	f930 6024 	ldrsh.w	r6, [r0, r4, lsl #2]
 800d798:	f937 5024 	ldrsh.w	r5, [r7, r4, lsl #2]
 800d79c:	ea86 73e6 	eor.w	r3, r6, r6, asr #31
 800d7a0:	ea85 72e5 	eor.w	r2, r5, r5, asr #31
 800d7a4:	eba3 73e6 	sub.w	r3, r3, r6, asr #31
 800d7a8:	eba2 72e5 	sub.w	r2, r2, r5, asr #31
 800d7ac:	b21b      	sxth	r3, r3
 800d7ae:	b212      	sxth	r2, r2
 800d7b0:	4293      	cmp	r3, r2
 800d7b2:	da02      	bge.n	800d7ba <acc_alg_basic_math_q3_12_complex_conj_normalize+0x56>
 800d7b4:	469b      	mov	fp, r3
 800d7b6:	4613      	mov	r3, r2
 800d7b8:	465a      	mov	r2, fp
 800d7ba:	fb13 fb0c 	smulbb	fp, r3, ip
 800d7be:	f1bb 0f00 	cmp.w	fp, #0
 800d7c2:	bfb8      	it	lt
 800d7c4:	f60b 7bff 	addwlt	fp, fp, #4095	; 0xfff
 800d7c8:	ebb2 3f2b 	cmp.w	r2, fp, asr #12
 800d7cc:	bfb5      	itete	lt
 800d7ce:	fb12 f208 	smulbblt	r2, r2, r8
 800d7d2:	fb12 f20a 	smulbbge	r2, r2, sl
 800d7d6:	fb13 230e 	smlabblt	r3, r3, lr, r2
 800d7da:	fb13 2309 	smlabbge	r3, r3, r9, r2
 800d7de:	f343 330f 	sbfx	r3, r3, #12, #16
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d0cf      	beq.n	800d786 <acc_alg_basic_math_q3_12_complex_conj_normalize+0x22>
 800d7e6:	ebc5 5505 	rsb	r5, r5, r5, lsl #20
 800d7ea:	032d      	lsls	r5, r5, #12
 800d7ec:	0336      	lsls	r6, r6, #12
 800d7ee:	fb95 f5f3 	sdiv	r5, r5, r3
 800d7f2:	fb96 f3f3 	sdiv	r3, r6, r3
 800d7f6:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
 800d7fa:	f827 5024 	strh.w	r5, [r7, r4, lsl #2]
 800d7fe:	3401      	adds	r4, #1
 800d800:	42a1      	cmp	r1, r4
 800d802:	d1c7      	bne.n	800d794 <acc_alg_basic_math_q3_12_complex_conj_normalize+0x30>
 800d804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d808:	4770      	bx	lr
 800d80a:	bf00      	nop

0800d80c <acc_alg_basic_math_q3_12_sin>:
 800d80c:	0043      	lsls	r3, r0, #1
 800d80e:	bf4c      	ite	mi
 800d810:	43c3      	mvnmi	r3, r0
 800d812:	4603      	movpl	r3, r0
 800d814:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800d818:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800d81c:	4a05      	ldr	r2, [pc, #20]	; (800d834 <acc_alg_basic_math_q3_12_sin+0x28>)
 800d81e:	0d9b      	lsrs	r3, r3, #22
 800d820:	2800      	cmp	r0, #0
 800d822:	bfbd      	ittte	lt
 800d824:	f832 0013 	ldrhlt.w	r0, [r2, r3, lsl #1]
 800d828:	4240      	neglt	r0, r0
 800d82a:	b200      	sxthlt	r0, r0
 800d82c:	f932 0013 	ldrshge.w	r0, [r2, r3, lsl #1]
 800d830:	4770      	bx	lr
 800d832:	bf00      	nop
 800d834:	0801838c 	.word	0x0801838c

0800d838 <acc_alg_basic_math_q3_12_cos>:
 800d838:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 800d83c:	0043      	lsls	r3, r0, #1
 800d83e:	bf54      	ite	pl
 800d840:	43d3      	mvnpl	r3, r2
 800d842:	4613      	movmi	r3, r2
 800d844:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800d848:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800d84c:	2a00      	cmp	r2, #0
 800d84e:	ea4f 5393 	mov.w	r3, r3, lsr #22
 800d852:	4a04      	ldr	r2, [pc, #16]	; (800d864 <acc_alg_basic_math_q3_12_cos+0x2c>)
 800d854:	bfbd      	ittte	lt
 800d856:	f832 0013 	ldrhlt.w	r0, [r2, r3, lsl #1]
 800d85a:	4240      	neglt	r0, r0
 800d85c:	b200      	sxthlt	r0, r0
 800d85e:	f932 0013 	ldrshge.w	r0, [r2, r3, lsl #1]
 800d862:	4770      	bx	lr
 800d864:	0801838c 	.word	0x0801838c

0800d868 <_calloc_r>:
 800d868:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d86a:	fba1 2402 	umull	r2, r4, r1, r2
 800d86e:	b94c      	cbnz	r4, 800d884 <_calloc_r+0x1c>
 800d870:	4611      	mov	r1, r2
 800d872:	9201      	str	r2, [sp, #4]
 800d874:	f000 f83e 	bl	800d8f4 <_malloc_r>
 800d878:	9a01      	ldr	r2, [sp, #4]
 800d87a:	4605      	mov	r5, r0
 800d87c:	b930      	cbnz	r0, 800d88c <_calloc_r+0x24>
 800d87e:	4628      	mov	r0, r5
 800d880:	b003      	add	sp, #12
 800d882:	bd30      	pop	{r4, r5, pc}
 800d884:	220c      	movs	r2, #12
 800d886:	6002      	str	r2, [r0, #0]
 800d888:	2500      	movs	r5, #0
 800d88a:	e7f8      	b.n	800d87e <_calloc_r+0x16>
 800d88c:	4621      	mov	r1, r4
 800d88e:	f001 f837 	bl	800e900 <memset>
 800d892:	e7f4      	b.n	800d87e <_calloc_r+0x16>

0800d894 <malloc>:
 800d894:	4b02      	ldr	r3, [pc, #8]	; (800d8a0 <malloc+0xc>)
 800d896:	4601      	mov	r1, r0
 800d898:	6818      	ldr	r0, [r3, #0]
 800d89a:	f000 b82b 	b.w	800d8f4 <_malloc_r>
 800d89e:	bf00      	nop
 800d8a0:	200001e4 	.word	0x200001e4

0800d8a4 <free>:
 800d8a4:	4b02      	ldr	r3, [pc, #8]	; (800d8b0 <free+0xc>)
 800d8a6:	4601      	mov	r1, r0
 800d8a8:	6818      	ldr	r0, [r3, #0]
 800d8aa:	f001 bf3f 	b.w	800f72c <_free_r>
 800d8ae:	bf00      	nop
 800d8b0:	200001e4 	.word	0x200001e4

0800d8b4 <sbrk_aligned>:
 800d8b4:	b570      	push	{r4, r5, r6, lr}
 800d8b6:	4e0e      	ldr	r6, [pc, #56]	; (800d8f0 <sbrk_aligned+0x3c>)
 800d8b8:	460c      	mov	r4, r1
 800d8ba:	6831      	ldr	r1, [r6, #0]
 800d8bc:	4605      	mov	r5, r0
 800d8be:	b911      	cbnz	r1, 800d8c6 <sbrk_aligned+0x12>
 800d8c0:	f001 f85e 	bl	800e980 <_sbrk_r>
 800d8c4:	6030      	str	r0, [r6, #0]
 800d8c6:	4621      	mov	r1, r4
 800d8c8:	4628      	mov	r0, r5
 800d8ca:	f001 f859 	bl	800e980 <_sbrk_r>
 800d8ce:	1c43      	adds	r3, r0, #1
 800d8d0:	d00a      	beq.n	800d8e8 <sbrk_aligned+0x34>
 800d8d2:	1cc4      	adds	r4, r0, #3
 800d8d4:	f024 0403 	bic.w	r4, r4, #3
 800d8d8:	42a0      	cmp	r0, r4
 800d8da:	d007      	beq.n	800d8ec <sbrk_aligned+0x38>
 800d8dc:	1a21      	subs	r1, r4, r0
 800d8de:	4628      	mov	r0, r5
 800d8e0:	f001 f84e 	bl	800e980 <_sbrk_r>
 800d8e4:	3001      	adds	r0, #1
 800d8e6:	d101      	bne.n	800d8ec <sbrk_aligned+0x38>
 800d8e8:	f04f 34ff 	mov.w	r4, #4294967295
 800d8ec:	4620      	mov	r0, r4
 800d8ee:	bd70      	pop	{r4, r5, r6, pc}
 800d8f0:	200004f8 	.word	0x200004f8

0800d8f4 <_malloc_r>:
 800d8f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d8f8:	1ccd      	adds	r5, r1, #3
 800d8fa:	f025 0503 	bic.w	r5, r5, #3
 800d8fe:	3508      	adds	r5, #8
 800d900:	2d0c      	cmp	r5, #12
 800d902:	bf38      	it	cc
 800d904:	250c      	movcc	r5, #12
 800d906:	2d00      	cmp	r5, #0
 800d908:	4607      	mov	r7, r0
 800d90a:	db01      	blt.n	800d910 <_malloc_r+0x1c>
 800d90c:	42a9      	cmp	r1, r5
 800d90e:	d905      	bls.n	800d91c <_malloc_r+0x28>
 800d910:	230c      	movs	r3, #12
 800d912:	603b      	str	r3, [r7, #0]
 800d914:	2600      	movs	r6, #0
 800d916:	4630      	mov	r0, r6
 800d918:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d91c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d9f0 <_malloc_r+0xfc>
 800d920:	f000 f868 	bl	800d9f4 <__malloc_lock>
 800d924:	f8d8 3000 	ldr.w	r3, [r8]
 800d928:	461c      	mov	r4, r3
 800d92a:	bb5c      	cbnz	r4, 800d984 <_malloc_r+0x90>
 800d92c:	4629      	mov	r1, r5
 800d92e:	4638      	mov	r0, r7
 800d930:	f7ff ffc0 	bl	800d8b4 <sbrk_aligned>
 800d934:	1c43      	adds	r3, r0, #1
 800d936:	4604      	mov	r4, r0
 800d938:	d155      	bne.n	800d9e6 <_malloc_r+0xf2>
 800d93a:	f8d8 4000 	ldr.w	r4, [r8]
 800d93e:	4626      	mov	r6, r4
 800d940:	2e00      	cmp	r6, #0
 800d942:	d145      	bne.n	800d9d0 <_malloc_r+0xdc>
 800d944:	2c00      	cmp	r4, #0
 800d946:	d048      	beq.n	800d9da <_malloc_r+0xe6>
 800d948:	6823      	ldr	r3, [r4, #0]
 800d94a:	4631      	mov	r1, r6
 800d94c:	4638      	mov	r0, r7
 800d94e:	eb04 0903 	add.w	r9, r4, r3
 800d952:	f001 f815 	bl	800e980 <_sbrk_r>
 800d956:	4581      	cmp	r9, r0
 800d958:	d13f      	bne.n	800d9da <_malloc_r+0xe6>
 800d95a:	6821      	ldr	r1, [r4, #0]
 800d95c:	1a6d      	subs	r5, r5, r1
 800d95e:	4629      	mov	r1, r5
 800d960:	4638      	mov	r0, r7
 800d962:	f7ff ffa7 	bl	800d8b4 <sbrk_aligned>
 800d966:	3001      	adds	r0, #1
 800d968:	d037      	beq.n	800d9da <_malloc_r+0xe6>
 800d96a:	6823      	ldr	r3, [r4, #0]
 800d96c:	442b      	add	r3, r5
 800d96e:	6023      	str	r3, [r4, #0]
 800d970:	f8d8 3000 	ldr.w	r3, [r8]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d038      	beq.n	800d9ea <_malloc_r+0xf6>
 800d978:	685a      	ldr	r2, [r3, #4]
 800d97a:	42a2      	cmp	r2, r4
 800d97c:	d12b      	bne.n	800d9d6 <_malloc_r+0xe2>
 800d97e:	2200      	movs	r2, #0
 800d980:	605a      	str	r2, [r3, #4]
 800d982:	e00f      	b.n	800d9a4 <_malloc_r+0xb0>
 800d984:	6822      	ldr	r2, [r4, #0]
 800d986:	1b52      	subs	r2, r2, r5
 800d988:	d41f      	bmi.n	800d9ca <_malloc_r+0xd6>
 800d98a:	2a0b      	cmp	r2, #11
 800d98c:	d917      	bls.n	800d9be <_malloc_r+0xca>
 800d98e:	1961      	adds	r1, r4, r5
 800d990:	42a3      	cmp	r3, r4
 800d992:	6025      	str	r5, [r4, #0]
 800d994:	bf18      	it	ne
 800d996:	6059      	strne	r1, [r3, #4]
 800d998:	6863      	ldr	r3, [r4, #4]
 800d99a:	bf08      	it	eq
 800d99c:	f8c8 1000 	streq.w	r1, [r8]
 800d9a0:	5162      	str	r2, [r4, r5]
 800d9a2:	604b      	str	r3, [r1, #4]
 800d9a4:	4638      	mov	r0, r7
 800d9a6:	f104 060b 	add.w	r6, r4, #11
 800d9aa:	f000 f829 	bl	800da00 <__malloc_unlock>
 800d9ae:	f026 0607 	bic.w	r6, r6, #7
 800d9b2:	1d23      	adds	r3, r4, #4
 800d9b4:	1af2      	subs	r2, r6, r3
 800d9b6:	d0ae      	beq.n	800d916 <_malloc_r+0x22>
 800d9b8:	1b9b      	subs	r3, r3, r6
 800d9ba:	50a3      	str	r3, [r4, r2]
 800d9bc:	e7ab      	b.n	800d916 <_malloc_r+0x22>
 800d9be:	42a3      	cmp	r3, r4
 800d9c0:	6862      	ldr	r2, [r4, #4]
 800d9c2:	d1dd      	bne.n	800d980 <_malloc_r+0x8c>
 800d9c4:	f8c8 2000 	str.w	r2, [r8]
 800d9c8:	e7ec      	b.n	800d9a4 <_malloc_r+0xb0>
 800d9ca:	4623      	mov	r3, r4
 800d9cc:	6864      	ldr	r4, [r4, #4]
 800d9ce:	e7ac      	b.n	800d92a <_malloc_r+0x36>
 800d9d0:	4634      	mov	r4, r6
 800d9d2:	6876      	ldr	r6, [r6, #4]
 800d9d4:	e7b4      	b.n	800d940 <_malloc_r+0x4c>
 800d9d6:	4613      	mov	r3, r2
 800d9d8:	e7cc      	b.n	800d974 <_malloc_r+0x80>
 800d9da:	230c      	movs	r3, #12
 800d9dc:	603b      	str	r3, [r7, #0]
 800d9de:	4638      	mov	r0, r7
 800d9e0:	f000 f80e 	bl	800da00 <__malloc_unlock>
 800d9e4:	e797      	b.n	800d916 <_malloc_r+0x22>
 800d9e6:	6025      	str	r5, [r4, #0]
 800d9e8:	e7dc      	b.n	800d9a4 <_malloc_r+0xb0>
 800d9ea:	605b      	str	r3, [r3, #4]
 800d9ec:	deff      	udf	#255	; 0xff
 800d9ee:	bf00      	nop
 800d9f0:	200004f4 	.word	0x200004f4

0800d9f4 <__malloc_lock>:
 800d9f4:	4801      	ldr	r0, [pc, #4]	; (800d9fc <__malloc_lock+0x8>)
 800d9f6:	f001 b80f 	b.w	800ea18 <__retarget_lock_acquire_recursive>
 800d9fa:	bf00      	nop
 800d9fc:	2000063c 	.word	0x2000063c

0800da00 <__malloc_unlock>:
 800da00:	4801      	ldr	r0, [pc, #4]	; (800da08 <__malloc_unlock+0x8>)
 800da02:	f001 b80a 	b.w	800ea1a <__retarget_lock_release_recursive>
 800da06:	bf00      	nop
 800da08:	2000063c 	.word	0x2000063c

0800da0c <__cvt>:
 800da0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800da10:	ec55 4b10 	vmov	r4, r5, d0
 800da14:	2d00      	cmp	r5, #0
 800da16:	460e      	mov	r6, r1
 800da18:	4619      	mov	r1, r3
 800da1a:	462b      	mov	r3, r5
 800da1c:	bfbb      	ittet	lt
 800da1e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800da22:	461d      	movlt	r5, r3
 800da24:	2300      	movge	r3, #0
 800da26:	232d      	movlt	r3, #45	; 0x2d
 800da28:	700b      	strb	r3, [r1, #0]
 800da2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800da2c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800da30:	4691      	mov	r9, r2
 800da32:	f023 0820 	bic.w	r8, r3, #32
 800da36:	bfbc      	itt	lt
 800da38:	4622      	movlt	r2, r4
 800da3a:	4614      	movlt	r4, r2
 800da3c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800da40:	d005      	beq.n	800da4e <__cvt+0x42>
 800da42:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800da46:	d100      	bne.n	800da4a <__cvt+0x3e>
 800da48:	3601      	adds	r6, #1
 800da4a:	2102      	movs	r1, #2
 800da4c:	e000      	b.n	800da50 <__cvt+0x44>
 800da4e:	2103      	movs	r1, #3
 800da50:	ab03      	add	r3, sp, #12
 800da52:	9301      	str	r3, [sp, #4]
 800da54:	ab02      	add	r3, sp, #8
 800da56:	9300      	str	r3, [sp, #0]
 800da58:	ec45 4b10 	vmov	d0, r4, r5
 800da5c:	4653      	mov	r3, sl
 800da5e:	4632      	mov	r2, r6
 800da60:	f001 f872 	bl	800eb48 <_dtoa_r>
 800da64:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800da68:	4607      	mov	r7, r0
 800da6a:	d102      	bne.n	800da72 <__cvt+0x66>
 800da6c:	f019 0f01 	tst.w	r9, #1
 800da70:	d022      	beq.n	800dab8 <__cvt+0xac>
 800da72:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800da76:	eb07 0906 	add.w	r9, r7, r6
 800da7a:	d110      	bne.n	800da9e <__cvt+0x92>
 800da7c:	783b      	ldrb	r3, [r7, #0]
 800da7e:	2b30      	cmp	r3, #48	; 0x30
 800da80:	d10a      	bne.n	800da98 <__cvt+0x8c>
 800da82:	2200      	movs	r2, #0
 800da84:	2300      	movs	r3, #0
 800da86:	4620      	mov	r0, r4
 800da88:	4629      	mov	r1, r5
 800da8a:	f7f3 f895 	bl	8000bb8 <__aeabi_dcmpeq>
 800da8e:	b918      	cbnz	r0, 800da98 <__cvt+0x8c>
 800da90:	f1c6 0601 	rsb	r6, r6, #1
 800da94:	f8ca 6000 	str.w	r6, [sl]
 800da98:	f8da 3000 	ldr.w	r3, [sl]
 800da9c:	4499      	add	r9, r3
 800da9e:	2200      	movs	r2, #0
 800daa0:	2300      	movs	r3, #0
 800daa2:	4620      	mov	r0, r4
 800daa4:	4629      	mov	r1, r5
 800daa6:	f7f3 f887 	bl	8000bb8 <__aeabi_dcmpeq>
 800daaa:	b108      	cbz	r0, 800dab0 <__cvt+0xa4>
 800daac:	f8cd 900c 	str.w	r9, [sp, #12]
 800dab0:	2230      	movs	r2, #48	; 0x30
 800dab2:	9b03      	ldr	r3, [sp, #12]
 800dab4:	454b      	cmp	r3, r9
 800dab6:	d307      	bcc.n	800dac8 <__cvt+0xbc>
 800dab8:	9b03      	ldr	r3, [sp, #12]
 800daba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dabc:	1bdb      	subs	r3, r3, r7
 800dabe:	4638      	mov	r0, r7
 800dac0:	6013      	str	r3, [r2, #0]
 800dac2:	b004      	add	sp, #16
 800dac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dac8:	1c59      	adds	r1, r3, #1
 800daca:	9103      	str	r1, [sp, #12]
 800dacc:	701a      	strb	r2, [r3, #0]
 800dace:	e7f0      	b.n	800dab2 <__cvt+0xa6>

0800dad0 <__exponent>:
 800dad0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dad2:	4603      	mov	r3, r0
 800dad4:	2900      	cmp	r1, #0
 800dad6:	bfb8      	it	lt
 800dad8:	4249      	neglt	r1, r1
 800dada:	f803 2b02 	strb.w	r2, [r3], #2
 800dade:	bfb4      	ite	lt
 800dae0:	222d      	movlt	r2, #45	; 0x2d
 800dae2:	222b      	movge	r2, #43	; 0x2b
 800dae4:	2909      	cmp	r1, #9
 800dae6:	7042      	strb	r2, [r0, #1]
 800dae8:	dd2a      	ble.n	800db40 <__exponent+0x70>
 800daea:	f10d 0207 	add.w	r2, sp, #7
 800daee:	4617      	mov	r7, r2
 800daf0:	260a      	movs	r6, #10
 800daf2:	4694      	mov	ip, r2
 800daf4:	fb91 f5f6 	sdiv	r5, r1, r6
 800daf8:	fb06 1415 	mls	r4, r6, r5, r1
 800dafc:	3430      	adds	r4, #48	; 0x30
 800dafe:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800db02:	460c      	mov	r4, r1
 800db04:	2c63      	cmp	r4, #99	; 0x63
 800db06:	f102 32ff 	add.w	r2, r2, #4294967295
 800db0a:	4629      	mov	r1, r5
 800db0c:	dcf1      	bgt.n	800daf2 <__exponent+0x22>
 800db0e:	3130      	adds	r1, #48	; 0x30
 800db10:	f1ac 0402 	sub.w	r4, ip, #2
 800db14:	f802 1c01 	strb.w	r1, [r2, #-1]
 800db18:	1c41      	adds	r1, r0, #1
 800db1a:	4622      	mov	r2, r4
 800db1c:	42ba      	cmp	r2, r7
 800db1e:	d30a      	bcc.n	800db36 <__exponent+0x66>
 800db20:	f10d 0209 	add.w	r2, sp, #9
 800db24:	eba2 020c 	sub.w	r2, r2, ip
 800db28:	42bc      	cmp	r4, r7
 800db2a:	bf88      	it	hi
 800db2c:	2200      	movhi	r2, #0
 800db2e:	4413      	add	r3, r2
 800db30:	1a18      	subs	r0, r3, r0
 800db32:	b003      	add	sp, #12
 800db34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db36:	f812 5b01 	ldrb.w	r5, [r2], #1
 800db3a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800db3e:	e7ed      	b.n	800db1c <__exponent+0x4c>
 800db40:	2330      	movs	r3, #48	; 0x30
 800db42:	3130      	adds	r1, #48	; 0x30
 800db44:	7083      	strb	r3, [r0, #2]
 800db46:	70c1      	strb	r1, [r0, #3]
 800db48:	1d03      	adds	r3, r0, #4
 800db4a:	e7f1      	b.n	800db30 <__exponent+0x60>

0800db4c <_printf_float>:
 800db4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db50:	ed2d 8b02 	vpush	{d8}
 800db54:	b08d      	sub	sp, #52	; 0x34
 800db56:	460c      	mov	r4, r1
 800db58:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800db5c:	4616      	mov	r6, r2
 800db5e:	461f      	mov	r7, r3
 800db60:	4605      	mov	r5, r0
 800db62:	f000 fed5 	bl	800e910 <_localeconv_r>
 800db66:	f8d0 a000 	ldr.w	sl, [r0]
 800db6a:	4650      	mov	r0, sl
 800db6c:	f7f2 fbf8 	bl	8000360 <strlen>
 800db70:	2300      	movs	r3, #0
 800db72:	930a      	str	r3, [sp, #40]	; 0x28
 800db74:	6823      	ldr	r3, [r4, #0]
 800db76:	9305      	str	r3, [sp, #20]
 800db78:	f8d8 3000 	ldr.w	r3, [r8]
 800db7c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800db80:	3307      	adds	r3, #7
 800db82:	f023 0307 	bic.w	r3, r3, #7
 800db86:	f103 0208 	add.w	r2, r3, #8
 800db8a:	f8c8 2000 	str.w	r2, [r8]
 800db8e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800db92:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800db96:	9307      	str	r3, [sp, #28]
 800db98:	f8cd 8018 	str.w	r8, [sp, #24]
 800db9c:	ee08 0a10 	vmov	s16, r0
 800dba0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800dba4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dba8:	4b9e      	ldr	r3, [pc, #632]	; (800de24 <_printf_float+0x2d8>)
 800dbaa:	f04f 32ff 	mov.w	r2, #4294967295
 800dbae:	f7f3 f835 	bl	8000c1c <__aeabi_dcmpun>
 800dbb2:	bb88      	cbnz	r0, 800dc18 <_printf_float+0xcc>
 800dbb4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dbb8:	4b9a      	ldr	r3, [pc, #616]	; (800de24 <_printf_float+0x2d8>)
 800dbba:	f04f 32ff 	mov.w	r2, #4294967295
 800dbbe:	f7f3 f80f 	bl	8000be0 <__aeabi_dcmple>
 800dbc2:	bb48      	cbnz	r0, 800dc18 <_printf_float+0xcc>
 800dbc4:	2200      	movs	r2, #0
 800dbc6:	2300      	movs	r3, #0
 800dbc8:	4640      	mov	r0, r8
 800dbca:	4649      	mov	r1, r9
 800dbcc:	f7f2 fffe 	bl	8000bcc <__aeabi_dcmplt>
 800dbd0:	b110      	cbz	r0, 800dbd8 <_printf_float+0x8c>
 800dbd2:	232d      	movs	r3, #45	; 0x2d
 800dbd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dbd8:	4a93      	ldr	r2, [pc, #588]	; (800de28 <_printf_float+0x2dc>)
 800dbda:	4b94      	ldr	r3, [pc, #592]	; (800de2c <_printf_float+0x2e0>)
 800dbdc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800dbe0:	bf94      	ite	ls
 800dbe2:	4690      	movls	r8, r2
 800dbe4:	4698      	movhi	r8, r3
 800dbe6:	2303      	movs	r3, #3
 800dbe8:	6123      	str	r3, [r4, #16]
 800dbea:	9b05      	ldr	r3, [sp, #20]
 800dbec:	f023 0304 	bic.w	r3, r3, #4
 800dbf0:	6023      	str	r3, [r4, #0]
 800dbf2:	f04f 0900 	mov.w	r9, #0
 800dbf6:	9700      	str	r7, [sp, #0]
 800dbf8:	4633      	mov	r3, r6
 800dbfa:	aa0b      	add	r2, sp, #44	; 0x2c
 800dbfc:	4621      	mov	r1, r4
 800dbfe:	4628      	mov	r0, r5
 800dc00:	f000 f9da 	bl	800dfb8 <_printf_common>
 800dc04:	3001      	adds	r0, #1
 800dc06:	f040 8090 	bne.w	800dd2a <_printf_float+0x1de>
 800dc0a:	f04f 30ff 	mov.w	r0, #4294967295
 800dc0e:	b00d      	add	sp, #52	; 0x34
 800dc10:	ecbd 8b02 	vpop	{d8}
 800dc14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc18:	4642      	mov	r2, r8
 800dc1a:	464b      	mov	r3, r9
 800dc1c:	4640      	mov	r0, r8
 800dc1e:	4649      	mov	r1, r9
 800dc20:	f7f2 fffc 	bl	8000c1c <__aeabi_dcmpun>
 800dc24:	b140      	cbz	r0, 800dc38 <_printf_float+0xec>
 800dc26:	464b      	mov	r3, r9
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	bfbc      	itt	lt
 800dc2c:	232d      	movlt	r3, #45	; 0x2d
 800dc2e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800dc32:	4a7f      	ldr	r2, [pc, #508]	; (800de30 <_printf_float+0x2e4>)
 800dc34:	4b7f      	ldr	r3, [pc, #508]	; (800de34 <_printf_float+0x2e8>)
 800dc36:	e7d1      	b.n	800dbdc <_printf_float+0x90>
 800dc38:	6863      	ldr	r3, [r4, #4]
 800dc3a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800dc3e:	9206      	str	r2, [sp, #24]
 800dc40:	1c5a      	adds	r2, r3, #1
 800dc42:	d13f      	bne.n	800dcc4 <_printf_float+0x178>
 800dc44:	2306      	movs	r3, #6
 800dc46:	6063      	str	r3, [r4, #4]
 800dc48:	9b05      	ldr	r3, [sp, #20]
 800dc4a:	6861      	ldr	r1, [r4, #4]
 800dc4c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800dc50:	2300      	movs	r3, #0
 800dc52:	9303      	str	r3, [sp, #12]
 800dc54:	ab0a      	add	r3, sp, #40	; 0x28
 800dc56:	e9cd b301 	strd	fp, r3, [sp, #4]
 800dc5a:	ab09      	add	r3, sp, #36	; 0x24
 800dc5c:	ec49 8b10 	vmov	d0, r8, r9
 800dc60:	9300      	str	r3, [sp, #0]
 800dc62:	6022      	str	r2, [r4, #0]
 800dc64:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800dc68:	4628      	mov	r0, r5
 800dc6a:	f7ff fecf 	bl	800da0c <__cvt>
 800dc6e:	9b06      	ldr	r3, [sp, #24]
 800dc70:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dc72:	2b47      	cmp	r3, #71	; 0x47
 800dc74:	4680      	mov	r8, r0
 800dc76:	d108      	bne.n	800dc8a <_printf_float+0x13e>
 800dc78:	1cc8      	adds	r0, r1, #3
 800dc7a:	db02      	blt.n	800dc82 <_printf_float+0x136>
 800dc7c:	6863      	ldr	r3, [r4, #4]
 800dc7e:	4299      	cmp	r1, r3
 800dc80:	dd41      	ble.n	800dd06 <_printf_float+0x1ba>
 800dc82:	f1ab 0302 	sub.w	r3, fp, #2
 800dc86:	fa5f fb83 	uxtb.w	fp, r3
 800dc8a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800dc8e:	d820      	bhi.n	800dcd2 <_printf_float+0x186>
 800dc90:	3901      	subs	r1, #1
 800dc92:	465a      	mov	r2, fp
 800dc94:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800dc98:	9109      	str	r1, [sp, #36]	; 0x24
 800dc9a:	f7ff ff19 	bl	800dad0 <__exponent>
 800dc9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dca0:	1813      	adds	r3, r2, r0
 800dca2:	2a01      	cmp	r2, #1
 800dca4:	4681      	mov	r9, r0
 800dca6:	6123      	str	r3, [r4, #16]
 800dca8:	dc02      	bgt.n	800dcb0 <_printf_float+0x164>
 800dcaa:	6822      	ldr	r2, [r4, #0]
 800dcac:	07d2      	lsls	r2, r2, #31
 800dcae:	d501      	bpl.n	800dcb4 <_printf_float+0x168>
 800dcb0:	3301      	adds	r3, #1
 800dcb2:	6123      	str	r3, [r4, #16]
 800dcb4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d09c      	beq.n	800dbf6 <_printf_float+0xaa>
 800dcbc:	232d      	movs	r3, #45	; 0x2d
 800dcbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dcc2:	e798      	b.n	800dbf6 <_printf_float+0xaa>
 800dcc4:	9a06      	ldr	r2, [sp, #24]
 800dcc6:	2a47      	cmp	r2, #71	; 0x47
 800dcc8:	d1be      	bne.n	800dc48 <_printf_float+0xfc>
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d1bc      	bne.n	800dc48 <_printf_float+0xfc>
 800dcce:	2301      	movs	r3, #1
 800dcd0:	e7b9      	b.n	800dc46 <_printf_float+0xfa>
 800dcd2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800dcd6:	d118      	bne.n	800dd0a <_printf_float+0x1be>
 800dcd8:	2900      	cmp	r1, #0
 800dcda:	6863      	ldr	r3, [r4, #4]
 800dcdc:	dd0b      	ble.n	800dcf6 <_printf_float+0x1aa>
 800dcde:	6121      	str	r1, [r4, #16]
 800dce0:	b913      	cbnz	r3, 800dce8 <_printf_float+0x19c>
 800dce2:	6822      	ldr	r2, [r4, #0]
 800dce4:	07d0      	lsls	r0, r2, #31
 800dce6:	d502      	bpl.n	800dcee <_printf_float+0x1a2>
 800dce8:	3301      	adds	r3, #1
 800dcea:	440b      	add	r3, r1
 800dcec:	6123      	str	r3, [r4, #16]
 800dcee:	65a1      	str	r1, [r4, #88]	; 0x58
 800dcf0:	f04f 0900 	mov.w	r9, #0
 800dcf4:	e7de      	b.n	800dcb4 <_printf_float+0x168>
 800dcf6:	b913      	cbnz	r3, 800dcfe <_printf_float+0x1b2>
 800dcf8:	6822      	ldr	r2, [r4, #0]
 800dcfa:	07d2      	lsls	r2, r2, #31
 800dcfc:	d501      	bpl.n	800dd02 <_printf_float+0x1b6>
 800dcfe:	3302      	adds	r3, #2
 800dd00:	e7f4      	b.n	800dcec <_printf_float+0x1a0>
 800dd02:	2301      	movs	r3, #1
 800dd04:	e7f2      	b.n	800dcec <_printf_float+0x1a0>
 800dd06:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800dd0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd0c:	4299      	cmp	r1, r3
 800dd0e:	db05      	blt.n	800dd1c <_printf_float+0x1d0>
 800dd10:	6823      	ldr	r3, [r4, #0]
 800dd12:	6121      	str	r1, [r4, #16]
 800dd14:	07d8      	lsls	r0, r3, #31
 800dd16:	d5ea      	bpl.n	800dcee <_printf_float+0x1a2>
 800dd18:	1c4b      	adds	r3, r1, #1
 800dd1a:	e7e7      	b.n	800dcec <_printf_float+0x1a0>
 800dd1c:	2900      	cmp	r1, #0
 800dd1e:	bfd4      	ite	le
 800dd20:	f1c1 0202 	rsble	r2, r1, #2
 800dd24:	2201      	movgt	r2, #1
 800dd26:	4413      	add	r3, r2
 800dd28:	e7e0      	b.n	800dcec <_printf_float+0x1a0>
 800dd2a:	6823      	ldr	r3, [r4, #0]
 800dd2c:	055a      	lsls	r2, r3, #21
 800dd2e:	d407      	bmi.n	800dd40 <_printf_float+0x1f4>
 800dd30:	6923      	ldr	r3, [r4, #16]
 800dd32:	4642      	mov	r2, r8
 800dd34:	4631      	mov	r1, r6
 800dd36:	4628      	mov	r0, r5
 800dd38:	47b8      	blx	r7
 800dd3a:	3001      	adds	r0, #1
 800dd3c:	d12c      	bne.n	800dd98 <_printf_float+0x24c>
 800dd3e:	e764      	b.n	800dc0a <_printf_float+0xbe>
 800dd40:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800dd44:	f240 80e0 	bls.w	800df08 <_printf_float+0x3bc>
 800dd48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800dd4c:	2200      	movs	r2, #0
 800dd4e:	2300      	movs	r3, #0
 800dd50:	f7f2 ff32 	bl	8000bb8 <__aeabi_dcmpeq>
 800dd54:	2800      	cmp	r0, #0
 800dd56:	d034      	beq.n	800ddc2 <_printf_float+0x276>
 800dd58:	4a37      	ldr	r2, [pc, #220]	; (800de38 <_printf_float+0x2ec>)
 800dd5a:	2301      	movs	r3, #1
 800dd5c:	4631      	mov	r1, r6
 800dd5e:	4628      	mov	r0, r5
 800dd60:	47b8      	blx	r7
 800dd62:	3001      	adds	r0, #1
 800dd64:	f43f af51 	beq.w	800dc0a <_printf_float+0xbe>
 800dd68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dd6c:	429a      	cmp	r2, r3
 800dd6e:	db02      	blt.n	800dd76 <_printf_float+0x22a>
 800dd70:	6823      	ldr	r3, [r4, #0]
 800dd72:	07d8      	lsls	r0, r3, #31
 800dd74:	d510      	bpl.n	800dd98 <_printf_float+0x24c>
 800dd76:	ee18 3a10 	vmov	r3, s16
 800dd7a:	4652      	mov	r2, sl
 800dd7c:	4631      	mov	r1, r6
 800dd7e:	4628      	mov	r0, r5
 800dd80:	47b8      	blx	r7
 800dd82:	3001      	adds	r0, #1
 800dd84:	f43f af41 	beq.w	800dc0a <_printf_float+0xbe>
 800dd88:	f04f 0800 	mov.w	r8, #0
 800dd8c:	f104 091a 	add.w	r9, r4, #26
 800dd90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd92:	3b01      	subs	r3, #1
 800dd94:	4543      	cmp	r3, r8
 800dd96:	dc09      	bgt.n	800ddac <_printf_float+0x260>
 800dd98:	6823      	ldr	r3, [r4, #0]
 800dd9a:	079b      	lsls	r3, r3, #30
 800dd9c:	f100 8107 	bmi.w	800dfae <_printf_float+0x462>
 800dda0:	68e0      	ldr	r0, [r4, #12]
 800dda2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dda4:	4298      	cmp	r0, r3
 800dda6:	bfb8      	it	lt
 800dda8:	4618      	movlt	r0, r3
 800ddaa:	e730      	b.n	800dc0e <_printf_float+0xc2>
 800ddac:	2301      	movs	r3, #1
 800ddae:	464a      	mov	r2, r9
 800ddb0:	4631      	mov	r1, r6
 800ddb2:	4628      	mov	r0, r5
 800ddb4:	47b8      	blx	r7
 800ddb6:	3001      	adds	r0, #1
 800ddb8:	f43f af27 	beq.w	800dc0a <_printf_float+0xbe>
 800ddbc:	f108 0801 	add.w	r8, r8, #1
 800ddc0:	e7e6      	b.n	800dd90 <_printf_float+0x244>
 800ddc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	dc39      	bgt.n	800de3c <_printf_float+0x2f0>
 800ddc8:	4a1b      	ldr	r2, [pc, #108]	; (800de38 <_printf_float+0x2ec>)
 800ddca:	2301      	movs	r3, #1
 800ddcc:	4631      	mov	r1, r6
 800ddce:	4628      	mov	r0, r5
 800ddd0:	47b8      	blx	r7
 800ddd2:	3001      	adds	r0, #1
 800ddd4:	f43f af19 	beq.w	800dc0a <_printf_float+0xbe>
 800ddd8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800dddc:	4313      	orrs	r3, r2
 800ddde:	d102      	bne.n	800dde6 <_printf_float+0x29a>
 800dde0:	6823      	ldr	r3, [r4, #0]
 800dde2:	07d9      	lsls	r1, r3, #31
 800dde4:	d5d8      	bpl.n	800dd98 <_printf_float+0x24c>
 800dde6:	ee18 3a10 	vmov	r3, s16
 800ddea:	4652      	mov	r2, sl
 800ddec:	4631      	mov	r1, r6
 800ddee:	4628      	mov	r0, r5
 800ddf0:	47b8      	blx	r7
 800ddf2:	3001      	adds	r0, #1
 800ddf4:	f43f af09 	beq.w	800dc0a <_printf_float+0xbe>
 800ddf8:	f04f 0900 	mov.w	r9, #0
 800ddfc:	f104 0a1a 	add.w	sl, r4, #26
 800de00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de02:	425b      	negs	r3, r3
 800de04:	454b      	cmp	r3, r9
 800de06:	dc01      	bgt.n	800de0c <_printf_float+0x2c0>
 800de08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de0a:	e792      	b.n	800dd32 <_printf_float+0x1e6>
 800de0c:	2301      	movs	r3, #1
 800de0e:	4652      	mov	r2, sl
 800de10:	4631      	mov	r1, r6
 800de12:	4628      	mov	r0, r5
 800de14:	47b8      	blx	r7
 800de16:	3001      	adds	r0, #1
 800de18:	f43f aef7 	beq.w	800dc0a <_printf_float+0xbe>
 800de1c:	f109 0901 	add.w	r9, r9, #1
 800de20:	e7ee      	b.n	800de00 <_printf_float+0x2b4>
 800de22:	bf00      	nop
 800de24:	7fefffff 	.word	0x7fefffff
 800de28:	080185a0 	.word	0x080185a0
 800de2c:	080185a4 	.word	0x080185a4
 800de30:	080185a8 	.word	0x080185a8
 800de34:	080185ac 	.word	0x080185ac
 800de38:	080185b0 	.word	0x080185b0
 800de3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800de3e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800de40:	429a      	cmp	r2, r3
 800de42:	bfa8      	it	ge
 800de44:	461a      	movge	r2, r3
 800de46:	2a00      	cmp	r2, #0
 800de48:	4691      	mov	r9, r2
 800de4a:	dc37      	bgt.n	800debc <_printf_float+0x370>
 800de4c:	f04f 0b00 	mov.w	fp, #0
 800de50:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800de54:	f104 021a 	add.w	r2, r4, #26
 800de58:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800de5a:	9305      	str	r3, [sp, #20]
 800de5c:	eba3 0309 	sub.w	r3, r3, r9
 800de60:	455b      	cmp	r3, fp
 800de62:	dc33      	bgt.n	800decc <_printf_float+0x380>
 800de64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800de68:	429a      	cmp	r2, r3
 800de6a:	db3b      	blt.n	800dee4 <_printf_float+0x398>
 800de6c:	6823      	ldr	r3, [r4, #0]
 800de6e:	07da      	lsls	r2, r3, #31
 800de70:	d438      	bmi.n	800dee4 <_printf_float+0x398>
 800de72:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800de76:	eba2 0903 	sub.w	r9, r2, r3
 800de7a:	9b05      	ldr	r3, [sp, #20]
 800de7c:	1ad2      	subs	r2, r2, r3
 800de7e:	4591      	cmp	r9, r2
 800de80:	bfa8      	it	ge
 800de82:	4691      	movge	r9, r2
 800de84:	f1b9 0f00 	cmp.w	r9, #0
 800de88:	dc35      	bgt.n	800def6 <_printf_float+0x3aa>
 800de8a:	f04f 0800 	mov.w	r8, #0
 800de8e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800de92:	f104 0a1a 	add.w	sl, r4, #26
 800de96:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800de9a:	1a9b      	subs	r3, r3, r2
 800de9c:	eba3 0309 	sub.w	r3, r3, r9
 800dea0:	4543      	cmp	r3, r8
 800dea2:	f77f af79 	ble.w	800dd98 <_printf_float+0x24c>
 800dea6:	2301      	movs	r3, #1
 800dea8:	4652      	mov	r2, sl
 800deaa:	4631      	mov	r1, r6
 800deac:	4628      	mov	r0, r5
 800deae:	47b8      	blx	r7
 800deb0:	3001      	adds	r0, #1
 800deb2:	f43f aeaa 	beq.w	800dc0a <_printf_float+0xbe>
 800deb6:	f108 0801 	add.w	r8, r8, #1
 800deba:	e7ec      	b.n	800de96 <_printf_float+0x34a>
 800debc:	4613      	mov	r3, r2
 800debe:	4631      	mov	r1, r6
 800dec0:	4642      	mov	r2, r8
 800dec2:	4628      	mov	r0, r5
 800dec4:	47b8      	blx	r7
 800dec6:	3001      	adds	r0, #1
 800dec8:	d1c0      	bne.n	800de4c <_printf_float+0x300>
 800deca:	e69e      	b.n	800dc0a <_printf_float+0xbe>
 800decc:	2301      	movs	r3, #1
 800dece:	4631      	mov	r1, r6
 800ded0:	4628      	mov	r0, r5
 800ded2:	9205      	str	r2, [sp, #20]
 800ded4:	47b8      	blx	r7
 800ded6:	3001      	adds	r0, #1
 800ded8:	f43f ae97 	beq.w	800dc0a <_printf_float+0xbe>
 800dedc:	9a05      	ldr	r2, [sp, #20]
 800dede:	f10b 0b01 	add.w	fp, fp, #1
 800dee2:	e7b9      	b.n	800de58 <_printf_float+0x30c>
 800dee4:	ee18 3a10 	vmov	r3, s16
 800dee8:	4652      	mov	r2, sl
 800deea:	4631      	mov	r1, r6
 800deec:	4628      	mov	r0, r5
 800deee:	47b8      	blx	r7
 800def0:	3001      	adds	r0, #1
 800def2:	d1be      	bne.n	800de72 <_printf_float+0x326>
 800def4:	e689      	b.n	800dc0a <_printf_float+0xbe>
 800def6:	9a05      	ldr	r2, [sp, #20]
 800def8:	464b      	mov	r3, r9
 800defa:	4442      	add	r2, r8
 800defc:	4631      	mov	r1, r6
 800defe:	4628      	mov	r0, r5
 800df00:	47b8      	blx	r7
 800df02:	3001      	adds	r0, #1
 800df04:	d1c1      	bne.n	800de8a <_printf_float+0x33e>
 800df06:	e680      	b.n	800dc0a <_printf_float+0xbe>
 800df08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800df0a:	2a01      	cmp	r2, #1
 800df0c:	dc01      	bgt.n	800df12 <_printf_float+0x3c6>
 800df0e:	07db      	lsls	r3, r3, #31
 800df10:	d53a      	bpl.n	800df88 <_printf_float+0x43c>
 800df12:	2301      	movs	r3, #1
 800df14:	4642      	mov	r2, r8
 800df16:	4631      	mov	r1, r6
 800df18:	4628      	mov	r0, r5
 800df1a:	47b8      	blx	r7
 800df1c:	3001      	adds	r0, #1
 800df1e:	f43f ae74 	beq.w	800dc0a <_printf_float+0xbe>
 800df22:	ee18 3a10 	vmov	r3, s16
 800df26:	4652      	mov	r2, sl
 800df28:	4631      	mov	r1, r6
 800df2a:	4628      	mov	r0, r5
 800df2c:	47b8      	blx	r7
 800df2e:	3001      	adds	r0, #1
 800df30:	f43f ae6b 	beq.w	800dc0a <_printf_float+0xbe>
 800df34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800df38:	2200      	movs	r2, #0
 800df3a:	2300      	movs	r3, #0
 800df3c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800df40:	f7f2 fe3a 	bl	8000bb8 <__aeabi_dcmpeq>
 800df44:	b9d8      	cbnz	r0, 800df7e <_printf_float+0x432>
 800df46:	f10a 33ff 	add.w	r3, sl, #4294967295
 800df4a:	f108 0201 	add.w	r2, r8, #1
 800df4e:	4631      	mov	r1, r6
 800df50:	4628      	mov	r0, r5
 800df52:	47b8      	blx	r7
 800df54:	3001      	adds	r0, #1
 800df56:	d10e      	bne.n	800df76 <_printf_float+0x42a>
 800df58:	e657      	b.n	800dc0a <_printf_float+0xbe>
 800df5a:	2301      	movs	r3, #1
 800df5c:	4652      	mov	r2, sl
 800df5e:	4631      	mov	r1, r6
 800df60:	4628      	mov	r0, r5
 800df62:	47b8      	blx	r7
 800df64:	3001      	adds	r0, #1
 800df66:	f43f ae50 	beq.w	800dc0a <_printf_float+0xbe>
 800df6a:	f108 0801 	add.w	r8, r8, #1
 800df6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df70:	3b01      	subs	r3, #1
 800df72:	4543      	cmp	r3, r8
 800df74:	dcf1      	bgt.n	800df5a <_printf_float+0x40e>
 800df76:	464b      	mov	r3, r9
 800df78:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800df7c:	e6da      	b.n	800dd34 <_printf_float+0x1e8>
 800df7e:	f04f 0800 	mov.w	r8, #0
 800df82:	f104 0a1a 	add.w	sl, r4, #26
 800df86:	e7f2      	b.n	800df6e <_printf_float+0x422>
 800df88:	2301      	movs	r3, #1
 800df8a:	4642      	mov	r2, r8
 800df8c:	e7df      	b.n	800df4e <_printf_float+0x402>
 800df8e:	2301      	movs	r3, #1
 800df90:	464a      	mov	r2, r9
 800df92:	4631      	mov	r1, r6
 800df94:	4628      	mov	r0, r5
 800df96:	47b8      	blx	r7
 800df98:	3001      	adds	r0, #1
 800df9a:	f43f ae36 	beq.w	800dc0a <_printf_float+0xbe>
 800df9e:	f108 0801 	add.w	r8, r8, #1
 800dfa2:	68e3      	ldr	r3, [r4, #12]
 800dfa4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dfa6:	1a5b      	subs	r3, r3, r1
 800dfa8:	4543      	cmp	r3, r8
 800dfaa:	dcf0      	bgt.n	800df8e <_printf_float+0x442>
 800dfac:	e6f8      	b.n	800dda0 <_printf_float+0x254>
 800dfae:	f04f 0800 	mov.w	r8, #0
 800dfb2:	f104 0919 	add.w	r9, r4, #25
 800dfb6:	e7f4      	b.n	800dfa2 <_printf_float+0x456>

0800dfb8 <_printf_common>:
 800dfb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dfbc:	4616      	mov	r6, r2
 800dfbe:	4699      	mov	r9, r3
 800dfc0:	688a      	ldr	r2, [r1, #8]
 800dfc2:	690b      	ldr	r3, [r1, #16]
 800dfc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dfc8:	4293      	cmp	r3, r2
 800dfca:	bfb8      	it	lt
 800dfcc:	4613      	movlt	r3, r2
 800dfce:	6033      	str	r3, [r6, #0]
 800dfd0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dfd4:	4607      	mov	r7, r0
 800dfd6:	460c      	mov	r4, r1
 800dfd8:	b10a      	cbz	r2, 800dfde <_printf_common+0x26>
 800dfda:	3301      	adds	r3, #1
 800dfdc:	6033      	str	r3, [r6, #0]
 800dfde:	6823      	ldr	r3, [r4, #0]
 800dfe0:	0699      	lsls	r1, r3, #26
 800dfe2:	bf42      	ittt	mi
 800dfe4:	6833      	ldrmi	r3, [r6, #0]
 800dfe6:	3302      	addmi	r3, #2
 800dfe8:	6033      	strmi	r3, [r6, #0]
 800dfea:	6825      	ldr	r5, [r4, #0]
 800dfec:	f015 0506 	ands.w	r5, r5, #6
 800dff0:	d106      	bne.n	800e000 <_printf_common+0x48>
 800dff2:	f104 0a19 	add.w	sl, r4, #25
 800dff6:	68e3      	ldr	r3, [r4, #12]
 800dff8:	6832      	ldr	r2, [r6, #0]
 800dffa:	1a9b      	subs	r3, r3, r2
 800dffc:	42ab      	cmp	r3, r5
 800dffe:	dc26      	bgt.n	800e04e <_printf_common+0x96>
 800e000:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e004:	1e13      	subs	r3, r2, #0
 800e006:	6822      	ldr	r2, [r4, #0]
 800e008:	bf18      	it	ne
 800e00a:	2301      	movne	r3, #1
 800e00c:	0692      	lsls	r2, r2, #26
 800e00e:	d42b      	bmi.n	800e068 <_printf_common+0xb0>
 800e010:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e014:	4649      	mov	r1, r9
 800e016:	4638      	mov	r0, r7
 800e018:	47c0      	blx	r8
 800e01a:	3001      	adds	r0, #1
 800e01c:	d01e      	beq.n	800e05c <_printf_common+0xa4>
 800e01e:	6823      	ldr	r3, [r4, #0]
 800e020:	6922      	ldr	r2, [r4, #16]
 800e022:	f003 0306 	and.w	r3, r3, #6
 800e026:	2b04      	cmp	r3, #4
 800e028:	bf02      	ittt	eq
 800e02a:	68e5      	ldreq	r5, [r4, #12]
 800e02c:	6833      	ldreq	r3, [r6, #0]
 800e02e:	1aed      	subeq	r5, r5, r3
 800e030:	68a3      	ldr	r3, [r4, #8]
 800e032:	bf0c      	ite	eq
 800e034:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e038:	2500      	movne	r5, #0
 800e03a:	4293      	cmp	r3, r2
 800e03c:	bfc4      	itt	gt
 800e03e:	1a9b      	subgt	r3, r3, r2
 800e040:	18ed      	addgt	r5, r5, r3
 800e042:	2600      	movs	r6, #0
 800e044:	341a      	adds	r4, #26
 800e046:	42b5      	cmp	r5, r6
 800e048:	d11a      	bne.n	800e080 <_printf_common+0xc8>
 800e04a:	2000      	movs	r0, #0
 800e04c:	e008      	b.n	800e060 <_printf_common+0xa8>
 800e04e:	2301      	movs	r3, #1
 800e050:	4652      	mov	r2, sl
 800e052:	4649      	mov	r1, r9
 800e054:	4638      	mov	r0, r7
 800e056:	47c0      	blx	r8
 800e058:	3001      	adds	r0, #1
 800e05a:	d103      	bne.n	800e064 <_printf_common+0xac>
 800e05c:	f04f 30ff 	mov.w	r0, #4294967295
 800e060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e064:	3501      	adds	r5, #1
 800e066:	e7c6      	b.n	800dff6 <_printf_common+0x3e>
 800e068:	18e1      	adds	r1, r4, r3
 800e06a:	1c5a      	adds	r2, r3, #1
 800e06c:	2030      	movs	r0, #48	; 0x30
 800e06e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e072:	4422      	add	r2, r4
 800e074:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e078:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e07c:	3302      	adds	r3, #2
 800e07e:	e7c7      	b.n	800e010 <_printf_common+0x58>
 800e080:	2301      	movs	r3, #1
 800e082:	4622      	mov	r2, r4
 800e084:	4649      	mov	r1, r9
 800e086:	4638      	mov	r0, r7
 800e088:	47c0      	blx	r8
 800e08a:	3001      	adds	r0, #1
 800e08c:	d0e6      	beq.n	800e05c <_printf_common+0xa4>
 800e08e:	3601      	adds	r6, #1
 800e090:	e7d9      	b.n	800e046 <_printf_common+0x8e>
	...

0800e094 <_printf_i>:
 800e094:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e098:	7e0f      	ldrb	r7, [r1, #24]
 800e09a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e09c:	2f78      	cmp	r7, #120	; 0x78
 800e09e:	4691      	mov	r9, r2
 800e0a0:	4680      	mov	r8, r0
 800e0a2:	460c      	mov	r4, r1
 800e0a4:	469a      	mov	sl, r3
 800e0a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e0aa:	d807      	bhi.n	800e0bc <_printf_i+0x28>
 800e0ac:	2f62      	cmp	r7, #98	; 0x62
 800e0ae:	d80a      	bhi.n	800e0c6 <_printf_i+0x32>
 800e0b0:	2f00      	cmp	r7, #0
 800e0b2:	f000 80d4 	beq.w	800e25e <_printf_i+0x1ca>
 800e0b6:	2f58      	cmp	r7, #88	; 0x58
 800e0b8:	f000 80c0 	beq.w	800e23c <_printf_i+0x1a8>
 800e0bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e0c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e0c4:	e03a      	b.n	800e13c <_printf_i+0xa8>
 800e0c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e0ca:	2b15      	cmp	r3, #21
 800e0cc:	d8f6      	bhi.n	800e0bc <_printf_i+0x28>
 800e0ce:	a101      	add	r1, pc, #4	; (adr r1, 800e0d4 <_printf_i+0x40>)
 800e0d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e0d4:	0800e12d 	.word	0x0800e12d
 800e0d8:	0800e141 	.word	0x0800e141
 800e0dc:	0800e0bd 	.word	0x0800e0bd
 800e0e0:	0800e0bd 	.word	0x0800e0bd
 800e0e4:	0800e0bd 	.word	0x0800e0bd
 800e0e8:	0800e0bd 	.word	0x0800e0bd
 800e0ec:	0800e141 	.word	0x0800e141
 800e0f0:	0800e0bd 	.word	0x0800e0bd
 800e0f4:	0800e0bd 	.word	0x0800e0bd
 800e0f8:	0800e0bd 	.word	0x0800e0bd
 800e0fc:	0800e0bd 	.word	0x0800e0bd
 800e100:	0800e245 	.word	0x0800e245
 800e104:	0800e16d 	.word	0x0800e16d
 800e108:	0800e1ff 	.word	0x0800e1ff
 800e10c:	0800e0bd 	.word	0x0800e0bd
 800e110:	0800e0bd 	.word	0x0800e0bd
 800e114:	0800e267 	.word	0x0800e267
 800e118:	0800e0bd 	.word	0x0800e0bd
 800e11c:	0800e16d 	.word	0x0800e16d
 800e120:	0800e0bd 	.word	0x0800e0bd
 800e124:	0800e0bd 	.word	0x0800e0bd
 800e128:	0800e207 	.word	0x0800e207
 800e12c:	682b      	ldr	r3, [r5, #0]
 800e12e:	1d1a      	adds	r2, r3, #4
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	602a      	str	r2, [r5, #0]
 800e134:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e138:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e13c:	2301      	movs	r3, #1
 800e13e:	e09f      	b.n	800e280 <_printf_i+0x1ec>
 800e140:	6820      	ldr	r0, [r4, #0]
 800e142:	682b      	ldr	r3, [r5, #0]
 800e144:	0607      	lsls	r7, r0, #24
 800e146:	f103 0104 	add.w	r1, r3, #4
 800e14a:	6029      	str	r1, [r5, #0]
 800e14c:	d501      	bpl.n	800e152 <_printf_i+0xbe>
 800e14e:	681e      	ldr	r6, [r3, #0]
 800e150:	e003      	b.n	800e15a <_printf_i+0xc6>
 800e152:	0646      	lsls	r6, r0, #25
 800e154:	d5fb      	bpl.n	800e14e <_printf_i+0xba>
 800e156:	f9b3 6000 	ldrsh.w	r6, [r3]
 800e15a:	2e00      	cmp	r6, #0
 800e15c:	da03      	bge.n	800e166 <_printf_i+0xd2>
 800e15e:	232d      	movs	r3, #45	; 0x2d
 800e160:	4276      	negs	r6, r6
 800e162:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e166:	485a      	ldr	r0, [pc, #360]	; (800e2d0 <_printf_i+0x23c>)
 800e168:	230a      	movs	r3, #10
 800e16a:	e012      	b.n	800e192 <_printf_i+0xfe>
 800e16c:	682b      	ldr	r3, [r5, #0]
 800e16e:	6820      	ldr	r0, [r4, #0]
 800e170:	1d19      	adds	r1, r3, #4
 800e172:	6029      	str	r1, [r5, #0]
 800e174:	0605      	lsls	r5, r0, #24
 800e176:	d501      	bpl.n	800e17c <_printf_i+0xe8>
 800e178:	681e      	ldr	r6, [r3, #0]
 800e17a:	e002      	b.n	800e182 <_printf_i+0xee>
 800e17c:	0641      	lsls	r1, r0, #25
 800e17e:	d5fb      	bpl.n	800e178 <_printf_i+0xe4>
 800e180:	881e      	ldrh	r6, [r3, #0]
 800e182:	4853      	ldr	r0, [pc, #332]	; (800e2d0 <_printf_i+0x23c>)
 800e184:	2f6f      	cmp	r7, #111	; 0x6f
 800e186:	bf0c      	ite	eq
 800e188:	2308      	moveq	r3, #8
 800e18a:	230a      	movne	r3, #10
 800e18c:	2100      	movs	r1, #0
 800e18e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e192:	6865      	ldr	r5, [r4, #4]
 800e194:	60a5      	str	r5, [r4, #8]
 800e196:	2d00      	cmp	r5, #0
 800e198:	bfa2      	ittt	ge
 800e19a:	6821      	ldrge	r1, [r4, #0]
 800e19c:	f021 0104 	bicge.w	r1, r1, #4
 800e1a0:	6021      	strge	r1, [r4, #0]
 800e1a2:	b90e      	cbnz	r6, 800e1a8 <_printf_i+0x114>
 800e1a4:	2d00      	cmp	r5, #0
 800e1a6:	d04b      	beq.n	800e240 <_printf_i+0x1ac>
 800e1a8:	4615      	mov	r5, r2
 800e1aa:	fbb6 f1f3 	udiv	r1, r6, r3
 800e1ae:	fb03 6711 	mls	r7, r3, r1, r6
 800e1b2:	5dc7      	ldrb	r7, [r0, r7]
 800e1b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e1b8:	4637      	mov	r7, r6
 800e1ba:	42bb      	cmp	r3, r7
 800e1bc:	460e      	mov	r6, r1
 800e1be:	d9f4      	bls.n	800e1aa <_printf_i+0x116>
 800e1c0:	2b08      	cmp	r3, #8
 800e1c2:	d10b      	bne.n	800e1dc <_printf_i+0x148>
 800e1c4:	6823      	ldr	r3, [r4, #0]
 800e1c6:	07de      	lsls	r6, r3, #31
 800e1c8:	d508      	bpl.n	800e1dc <_printf_i+0x148>
 800e1ca:	6923      	ldr	r3, [r4, #16]
 800e1cc:	6861      	ldr	r1, [r4, #4]
 800e1ce:	4299      	cmp	r1, r3
 800e1d0:	bfde      	ittt	le
 800e1d2:	2330      	movle	r3, #48	; 0x30
 800e1d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e1d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e1dc:	1b52      	subs	r2, r2, r5
 800e1de:	6122      	str	r2, [r4, #16]
 800e1e0:	f8cd a000 	str.w	sl, [sp]
 800e1e4:	464b      	mov	r3, r9
 800e1e6:	aa03      	add	r2, sp, #12
 800e1e8:	4621      	mov	r1, r4
 800e1ea:	4640      	mov	r0, r8
 800e1ec:	f7ff fee4 	bl	800dfb8 <_printf_common>
 800e1f0:	3001      	adds	r0, #1
 800e1f2:	d14a      	bne.n	800e28a <_printf_i+0x1f6>
 800e1f4:	f04f 30ff 	mov.w	r0, #4294967295
 800e1f8:	b004      	add	sp, #16
 800e1fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1fe:	6823      	ldr	r3, [r4, #0]
 800e200:	f043 0320 	orr.w	r3, r3, #32
 800e204:	6023      	str	r3, [r4, #0]
 800e206:	4833      	ldr	r0, [pc, #204]	; (800e2d4 <_printf_i+0x240>)
 800e208:	2778      	movs	r7, #120	; 0x78
 800e20a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e20e:	6823      	ldr	r3, [r4, #0]
 800e210:	6829      	ldr	r1, [r5, #0]
 800e212:	061f      	lsls	r7, r3, #24
 800e214:	f851 6b04 	ldr.w	r6, [r1], #4
 800e218:	d402      	bmi.n	800e220 <_printf_i+0x18c>
 800e21a:	065f      	lsls	r7, r3, #25
 800e21c:	bf48      	it	mi
 800e21e:	b2b6      	uxthmi	r6, r6
 800e220:	07df      	lsls	r7, r3, #31
 800e222:	bf48      	it	mi
 800e224:	f043 0320 	orrmi.w	r3, r3, #32
 800e228:	6029      	str	r1, [r5, #0]
 800e22a:	bf48      	it	mi
 800e22c:	6023      	strmi	r3, [r4, #0]
 800e22e:	b91e      	cbnz	r6, 800e238 <_printf_i+0x1a4>
 800e230:	6823      	ldr	r3, [r4, #0]
 800e232:	f023 0320 	bic.w	r3, r3, #32
 800e236:	6023      	str	r3, [r4, #0]
 800e238:	2310      	movs	r3, #16
 800e23a:	e7a7      	b.n	800e18c <_printf_i+0xf8>
 800e23c:	4824      	ldr	r0, [pc, #144]	; (800e2d0 <_printf_i+0x23c>)
 800e23e:	e7e4      	b.n	800e20a <_printf_i+0x176>
 800e240:	4615      	mov	r5, r2
 800e242:	e7bd      	b.n	800e1c0 <_printf_i+0x12c>
 800e244:	682b      	ldr	r3, [r5, #0]
 800e246:	6826      	ldr	r6, [r4, #0]
 800e248:	6961      	ldr	r1, [r4, #20]
 800e24a:	1d18      	adds	r0, r3, #4
 800e24c:	6028      	str	r0, [r5, #0]
 800e24e:	0635      	lsls	r5, r6, #24
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	d501      	bpl.n	800e258 <_printf_i+0x1c4>
 800e254:	6019      	str	r1, [r3, #0]
 800e256:	e002      	b.n	800e25e <_printf_i+0x1ca>
 800e258:	0670      	lsls	r0, r6, #25
 800e25a:	d5fb      	bpl.n	800e254 <_printf_i+0x1c0>
 800e25c:	8019      	strh	r1, [r3, #0]
 800e25e:	2300      	movs	r3, #0
 800e260:	6123      	str	r3, [r4, #16]
 800e262:	4615      	mov	r5, r2
 800e264:	e7bc      	b.n	800e1e0 <_printf_i+0x14c>
 800e266:	682b      	ldr	r3, [r5, #0]
 800e268:	1d1a      	adds	r2, r3, #4
 800e26a:	602a      	str	r2, [r5, #0]
 800e26c:	681d      	ldr	r5, [r3, #0]
 800e26e:	6862      	ldr	r2, [r4, #4]
 800e270:	2100      	movs	r1, #0
 800e272:	4628      	mov	r0, r5
 800e274:	f7f2 f824 	bl	80002c0 <memchr>
 800e278:	b108      	cbz	r0, 800e27e <_printf_i+0x1ea>
 800e27a:	1b40      	subs	r0, r0, r5
 800e27c:	6060      	str	r0, [r4, #4]
 800e27e:	6863      	ldr	r3, [r4, #4]
 800e280:	6123      	str	r3, [r4, #16]
 800e282:	2300      	movs	r3, #0
 800e284:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e288:	e7aa      	b.n	800e1e0 <_printf_i+0x14c>
 800e28a:	6923      	ldr	r3, [r4, #16]
 800e28c:	462a      	mov	r2, r5
 800e28e:	4649      	mov	r1, r9
 800e290:	4640      	mov	r0, r8
 800e292:	47d0      	blx	sl
 800e294:	3001      	adds	r0, #1
 800e296:	d0ad      	beq.n	800e1f4 <_printf_i+0x160>
 800e298:	6823      	ldr	r3, [r4, #0]
 800e29a:	079b      	lsls	r3, r3, #30
 800e29c:	d413      	bmi.n	800e2c6 <_printf_i+0x232>
 800e29e:	68e0      	ldr	r0, [r4, #12]
 800e2a0:	9b03      	ldr	r3, [sp, #12]
 800e2a2:	4298      	cmp	r0, r3
 800e2a4:	bfb8      	it	lt
 800e2a6:	4618      	movlt	r0, r3
 800e2a8:	e7a6      	b.n	800e1f8 <_printf_i+0x164>
 800e2aa:	2301      	movs	r3, #1
 800e2ac:	4632      	mov	r2, r6
 800e2ae:	4649      	mov	r1, r9
 800e2b0:	4640      	mov	r0, r8
 800e2b2:	47d0      	blx	sl
 800e2b4:	3001      	adds	r0, #1
 800e2b6:	d09d      	beq.n	800e1f4 <_printf_i+0x160>
 800e2b8:	3501      	adds	r5, #1
 800e2ba:	68e3      	ldr	r3, [r4, #12]
 800e2bc:	9903      	ldr	r1, [sp, #12]
 800e2be:	1a5b      	subs	r3, r3, r1
 800e2c0:	42ab      	cmp	r3, r5
 800e2c2:	dcf2      	bgt.n	800e2aa <_printf_i+0x216>
 800e2c4:	e7eb      	b.n	800e29e <_printf_i+0x20a>
 800e2c6:	2500      	movs	r5, #0
 800e2c8:	f104 0619 	add.w	r6, r4, #25
 800e2cc:	e7f5      	b.n	800e2ba <_printf_i+0x226>
 800e2ce:	bf00      	nop
 800e2d0:	080185b2 	.word	0x080185b2
 800e2d4:	080185c3 	.word	0x080185c3

0800e2d8 <__sflush_r>:
 800e2d8:	898a      	ldrh	r2, [r1, #12]
 800e2da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2de:	4605      	mov	r5, r0
 800e2e0:	0710      	lsls	r0, r2, #28
 800e2e2:	460c      	mov	r4, r1
 800e2e4:	d458      	bmi.n	800e398 <__sflush_r+0xc0>
 800e2e6:	684b      	ldr	r3, [r1, #4]
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	dc05      	bgt.n	800e2f8 <__sflush_r+0x20>
 800e2ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	dc02      	bgt.n	800e2f8 <__sflush_r+0x20>
 800e2f2:	2000      	movs	r0, #0
 800e2f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e2fa:	2e00      	cmp	r6, #0
 800e2fc:	d0f9      	beq.n	800e2f2 <__sflush_r+0x1a>
 800e2fe:	2300      	movs	r3, #0
 800e300:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e304:	682f      	ldr	r7, [r5, #0]
 800e306:	6a21      	ldr	r1, [r4, #32]
 800e308:	602b      	str	r3, [r5, #0]
 800e30a:	d032      	beq.n	800e372 <__sflush_r+0x9a>
 800e30c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e30e:	89a3      	ldrh	r3, [r4, #12]
 800e310:	075a      	lsls	r2, r3, #29
 800e312:	d505      	bpl.n	800e320 <__sflush_r+0x48>
 800e314:	6863      	ldr	r3, [r4, #4]
 800e316:	1ac0      	subs	r0, r0, r3
 800e318:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e31a:	b10b      	cbz	r3, 800e320 <__sflush_r+0x48>
 800e31c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e31e:	1ac0      	subs	r0, r0, r3
 800e320:	2300      	movs	r3, #0
 800e322:	4602      	mov	r2, r0
 800e324:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e326:	6a21      	ldr	r1, [r4, #32]
 800e328:	4628      	mov	r0, r5
 800e32a:	47b0      	blx	r6
 800e32c:	1c43      	adds	r3, r0, #1
 800e32e:	89a3      	ldrh	r3, [r4, #12]
 800e330:	d106      	bne.n	800e340 <__sflush_r+0x68>
 800e332:	6829      	ldr	r1, [r5, #0]
 800e334:	291d      	cmp	r1, #29
 800e336:	d82b      	bhi.n	800e390 <__sflush_r+0xb8>
 800e338:	4a29      	ldr	r2, [pc, #164]	; (800e3e0 <__sflush_r+0x108>)
 800e33a:	410a      	asrs	r2, r1
 800e33c:	07d6      	lsls	r6, r2, #31
 800e33e:	d427      	bmi.n	800e390 <__sflush_r+0xb8>
 800e340:	2200      	movs	r2, #0
 800e342:	6062      	str	r2, [r4, #4]
 800e344:	04d9      	lsls	r1, r3, #19
 800e346:	6922      	ldr	r2, [r4, #16]
 800e348:	6022      	str	r2, [r4, #0]
 800e34a:	d504      	bpl.n	800e356 <__sflush_r+0x7e>
 800e34c:	1c42      	adds	r2, r0, #1
 800e34e:	d101      	bne.n	800e354 <__sflush_r+0x7c>
 800e350:	682b      	ldr	r3, [r5, #0]
 800e352:	b903      	cbnz	r3, 800e356 <__sflush_r+0x7e>
 800e354:	6560      	str	r0, [r4, #84]	; 0x54
 800e356:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e358:	602f      	str	r7, [r5, #0]
 800e35a:	2900      	cmp	r1, #0
 800e35c:	d0c9      	beq.n	800e2f2 <__sflush_r+0x1a>
 800e35e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e362:	4299      	cmp	r1, r3
 800e364:	d002      	beq.n	800e36c <__sflush_r+0x94>
 800e366:	4628      	mov	r0, r5
 800e368:	f001 f9e0 	bl	800f72c <_free_r>
 800e36c:	2000      	movs	r0, #0
 800e36e:	6360      	str	r0, [r4, #52]	; 0x34
 800e370:	e7c0      	b.n	800e2f4 <__sflush_r+0x1c>
 800e372:	2301      	movs	r3, #1
 800e374:	4628      	mov	r0, r5
 800e376:	47b0      	blx	r6
 800e378:	1c41      	adds	r1, r0, #1
 800e37a:	d1c8      	bne.n	800e30e <__sflush_r+0x36>
 800e37c:	682b      	ldr	r3, [r5, #0]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d0c5      	beq.n	800e30e <__sflush_r+0x36>
 800e382:	2b1d      	cmp	r3, #29
 800e384:	d001      	beq.n	800e38a <__sflush_r+0xb2>
 800e386:	2b16      	cmp	r3, #22
 800e388:	d101      	bne.n	800e38e <__sflush_r+0xb6>
 800e38a:	602f      	str	r7, [r5, #0]
 800e38c:	e7b1      	b.n	800e2f2 <__sflush_r+0x1a>
 800e38e:	89a3      	ldrh	r3, [r4, #12]
 800e390:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e394:	81a3      	strh	r3, [r4, #12]
 800e396:	e7ad      	b.n	800e2f4 <__sflush_r+0x1c>
 800e398:	690f      	ldr	r7, [r1, #16]
 800e39a:	2f00      	cmp	r7, #0
 800e39c:	d0a9      	beq.n	800e2f2 <__sflush_r+0x1a>
 800e39e:	0793      	lsls	r3, r2, #30
 800e3a0:	680e      	ldr	r6, [r1, #0]
 800e3a2:	bf08      	it	eq
 800e3a4:	694b      	ldreq	r3, [r1, #20]
 800e3a6:	600f      	str	r7, [r1, #0]
 800e3a8:	bf18      	it	ne
 800e3aa:	2300      	movne	r3, #0
 800e3ac:	eba6 0807 	sub.w	r8, r6, r7
 800e3b0:	608b      	str	r3, [r1, #8]
 800e3b2:	f1b8 0f00 	cmp.w	r8, #0
 800e3b6:	dd9c      	ble.n	800e2f2 <__sflush_r+0x1a>
 800e3b8:	6a21      	ldr	r1, [r4, #32]
 800e3ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e3bc:	4643      	mov	r3, r8
 800e3be:	463a      	mov	r2, r7
 800e3c0:	4628      	mov	r0, r5
 800e3c2:	47b0      	blx	r6
 800e3c4:	2800      	cmp	r0, #0
 800e3c6:	dc06      	bgt.n	800e3d6 <__sflush_r+0xfe>
 800e3c8:	89a3      	ldrh	r3, [r4, #12]
 800e3ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e3ce:	81a3      	strh	r3, [r4, #12]
 800e3d0:	f04f 30ff 	mov.w	r0, #4294967295
 800e3d4:	e78e      	b.n	800e2f4 <__sflush_r+0x1c>
 800e3d6:	4407      	add	r7, r0
 800e3d8:	eba8 0800 	sub.w	r8, r8, r0
 800e3dc:	e7e9      	b.n	800e3b2 <__sflush_r+0xda>
 800e3de:	bf00      	nop
 800e3e0:	dfbffffe 	.word	0xdfbffffe

0800e3e4 <_fflush_r>:
 800e3e4:	b538      	push	{r3, r4, r5, lr}
 800e3e6:	690b      	ldr	r3, [r1, #16]
 800e3e8:	4605      	mov	r5, r0
 800e3ea:	460c      	mov	r4, r1
 800e3ec:	b913      	cbnz	r3, 800e3f4 <_fflush_r+0x10>
 800e3ee:	2500      	movs	r5, #0
 800e3f0:	4628      	mov	r0, r5
 800e3f2:	bd38      	pop	{r3, r4, r5, pc}
 800e3f4:	b118      	cbz	r0, 800e3fe <_fflush_r+0x1a>
 800e3f6:	6a03      	ldr	r3, [r0, #32]
 800e3f8:	b90b      	cbnz	r3, 800e3fe <_fflush_r+0x1a>
 800e3fa:	f000 f8a9 	bl	800e550 <__sinit>
 800e3fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e402:	2b00      	cmp	r3, #0
 800e404:	d0f3      	beq.n	800e3ee <_fflush_r+0xa>
 800e406:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e408:	07d0      	lsls	r0, r2, #31
 800e40a:	d404      	bmi.n	800e416 <_fflush_r+0x32>
 800e40c:	0599      	lsls	r1, r3, #22
 800e40e:	d402      	bmi.n	800e416 <_fflush_r+0x32>
 800e410:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e412:	f000 fb01 	bl	800ea18 <__retarget_lock_acquire_recursive>
 800e416:	4628      	mov	r0, r5
 800e418:	4621      	mov	r1, r4
 800e41a:	f7ff ff5d 	bl	800e2d8 <__sflush_r>
 800e41e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e420:	07da      	lsls	r2, r3, #31
 800e422:	4605      	mov	r5, r0
 800e424:	d4e4      	bmi.n	800e3f0 <_fflush_r+0xc>
 800e426:	89a3      	ldrh	r3, [r4, #12]
 800e428:	059b      	lsls	r3, r3, #22
 800e42a:	d4e1      	bmi.n	800e3f0 <_fflush_r+0xc>
 800e42c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e42e:	f000 faf4 	bl	800ea1a <__retarget_lock_release_recursive>
 800e432:	e7dd      	b.n	800e3f0 <_fflush_r+0xc>

0800e434 <fflush>:
 800e434:	4601      	mov	r1, r0
 800e436:	b920      	cbnz	r0, 800e442 <fflush+0xe>
 800e438:	4a04      	ldr	r2, [pc, #16]	; (800e44c <fflush+0x18>)
 800e43a:	4905      	ldr	r1, [pc, #20]	; (800e450 <fflush+0x1c>)
 800e43c:	4805      	ldr	r0, [pc, #20]	; (800e454 <fflush+0x20>)
 800e43e:	f000 b89f 	b.w	800e580 <_fwalk_sglue>
 800e442:	4b05      	ldr	r3, [pc, #20]	; (800e458 <fflush+0x24>)
 800e444:	6818      	ldr	r0, [r3, #0]
 800e446:	f7ff bfcd 	b.w	800e3e4 <_fflush_r>
 800e44a:	bf00      	nop
 800e44c:	2000018c 	.word	0x2000018c
 800e450:	0800e3e5 	.word	0x0800e3e5
 800e454:	20000198 	.word	0x20000198
 800e458:	200001e4 	.word	0x200001e4

0800e45c <std>:
 800e45c:	2300      	movs	r3, #0
 800e45e:	b510      	push	{r4, lr}
 800e460:	4604      	mov	r4, r0
 800e462:	e9c0 3300 	strd	r3, r3, [r0]
 800e466:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e46a:	6083      	str	r3, [r0, #8]
 800e46c:	8181      	strh	r1, [r0, #12]
 800e46e:	6643      	str	r3, [r0, #100]	; 0x64
 800e470:	81c2      	strh	r2, [r0, #14]
 800e472:	6183      	str	r3, [r0, #24]
 800e474:	4619      	mov	r1, r3
 800e476:	2208      	movs	r2, #8
 800e478:	305c      	adds	r0, #92	; 0x5c
 800e47a:	f000 fa41 	bl	800e900 <memset>
 800e47e:	4b05      	ldr	r3, [pc, #20]	; (800e494 <std+0x38>)
 800e480:	6263      	str	r3, [r4, #36]	; 0x24
 800e482:	4b05      	ldr	r3, [pc, #20]	; (800e498 <std+0x3c>)
 800e484:	62a3      	str	r3, [r4, #40]	; 0x28
 800e486:	4b05      	ldr	r3, [pc, #20]	; (800e49c <std+0x40>)
 800e488:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e48a:	4b05      	ldr	r3, [pc, #20]	; (800e4a0 <std+0x44>)
 800e48c:	6224      	str	r4, [r4, #32]
 800e48e:	6323      	str	r3, [r4, #48]	; 0x30
 800e490:	bd10      	pop	{r4, pc}
 800e492:	bf00      	nop
 800e494:	0800e6a9 	.word	0x0800e6a9
 800e498:	0800e6cb 	.word	0x0800e6cb
 800e49c:	0800e703 	.word	0x0800e703
 800e4a0:	0800e727 	.word	0x0800e727

0800e4a4 <stdio_exit_handler>:
 800e4a4:	4a02      	ldr	r2, [pc, #8]	; (800e4b0 <stdio_exit_handler+0xc>)
 800e4a6:	4903      	ldr	r1, [pc, #12]	; (800e4b4 <stdio_exit_handler+0x10>)
 800e4a8:	4803      	ldr	r0, [pc, #12]	; (800e4b8 <stdio_exit_handler+0x14>)
 800e4aa:	f000 b869 	b.w	800e580 <_fwalk_sglue>
 800e4ae:	bf00      	nop
 800e4b0:	2000018c 	.word	0x2000018c
 800e4b4:	0800e3e5 	.word	0x0800e3e5
 800e4b8:	20000198 	.word	0x20000198

0800e4bc <cleanup_stdio>:
 800e4bc:	6841      	ldr	r1, [r0, #4]
 800e4be:	4b0c      	ldr	r3, [pc, #48]	; (800e4f0 <cleanup_stdio+0x34>)
 800e4c0:	4299      	cmp	r1, r3
 800e4c2:	b510      	push	{r4, lr}
 800e4c4:	4604      	mov	r4, r0
 800e4c6:	d001      	beq.n	800e4cc <cleanup_stdio+0x10>
 800e4c8:	f7ff ff8c 	bl	800e3e4 <_fflush_r>
 800e4cc:	68a1      	ldr	r1, [r4, #8]
 800e4ce:	4b09      	ldr	r3, [pc, #36]	; (800e4f4 <cleanup_stdio+0x38>)
 800e4d0:	4299      	cmp	r1, r3
 800e4d2:	d002      	beq.n	800e4da <cleanup_stdio+0x1e>
 800e4d4:	4620      	mov	r0, r4
 800e4d6:	f7ff ff85 	bl	800e3e4 <_fflush_r>
 800e4da:	68e1      	ldr	r1, [r4, #12]
 800e4dc:	4b06      	ldr	r3, [pc, #24]	; (800e4f8 <cleanup_stdio+0x3c>)
 800e4de:	4299      	cmp	r1, r3
 800e4e0:	d004      	beq.n	800e4ec <cleanup_stdio+0x30>
 800e4e2:	4620      	mov	r0, r4
 800e4e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e4e8:	f7ff bf7c 	b.w	800e3e4 <_fflush_r>
 800e4ec:	bd10      	pop	{r4, pc}
 800e4ee:	bf00      	nop
 800e4f0:	200004fc 	.word	0x200004fc
 800e4f4:	20000564 	.word	0x20000564
 800e4f8:	200005cc 	.word	0x200005cc

0800e4fc <global_stdio_init.part.0>:
 800e4fc:	b510      	push	{r4, lr}
 800e4fe:	4b0b      	ldr	r3, [pc, #44]	; (800e52c <global_stdio_init.part.0+0x30>)
 800e500:	4c0b      	ldr	r4, [pc, #44]	; (800e530 <global_stdio_init.part.0+0x34>)
 800e502:	4a0c      	ldr	r2, [pc, #48]	; (800e534 <global_stdio_init.part.0+0x38>)
 800e504:	601a      	str	r2, [r3, #0]
 800e506:	4620      	mov	r0, r4
 800e508:	2200      	movs	r2, #0
 800e50a:	2104      	movs	r1, #4
 800e50c:	f7ff ffa6 	bl	800e45c <std>
 800e510:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800e514:	2201      	movs	r2, #1
 800e516:	2109      	movs	r1, #9
 800e518:	f7ff ffa0 	bl	800e45c <std>
 800e51c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800e520:	2202      	movs	r2, #2
 800e522:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e526:	2112      	movs	r1, #18
 800e528:	f7ff bf98 	b.w	800e45c <std>
 800e52c:	20000634 	.word	0x20000634
 800e530:	200004fc 	.word	0x200004fc
 800e534:	0800e4a5 	.word	0x0800e4a5

0800e538 <__sfp_lock_acquire>:
 800e538:	4801      	ldr	r0, [pc, #4]	; (800e540 <__sfp_lock_acquire+0x8>)
 800e53a:	f000 ba6d 	b.w	800ea18 <__retarget_lock_acquire_recursive>
 800e53e:	bf00      	nop
 800e540:	2000063d 	.word	0x2000063d

0800e544 <__sfp_lock_release>:
 800e544:	4801      	ldr	r0, [pc, #4]	; (800e54c <__sfp_lock_release+0x8>)
 800e546:	f000 ba68 	b.w	800ea1a <__retarget_lock_release_recursive>
 800e54a:	bf00      	nop
 800e54c:	2000063d 	.word	0x2000063d

0800e550 <__sinit>:
 800e550:	b510      	push	{r4, lr}
 800e552:	4604      	mov	r4, r0
 800e554:	f7ff fff0 	bl	800e538 <__sfp_lock_acquire>
 800e558:	6a23      	ldr	r3, [r4, #32]
 800e55a:	b11b      	cbz	r3, 800e564 <__sinit+0x14>
 800e55c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e560:	f7ff bff0 	b.w	800e544 <__sfp_lock_release>
 800e564:	4b04      	ldr	r3, [pc, #16]	; (800e578 <__sinit+0x28>)
 800e566:	6223      	str	r3, [r4, #32]
 800e568:	4b04      	ldr	r3, [pc, #16]	; (800e57c <__sinit+0x2c>)
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d1f5      	bne.n	800e55c <__sinit+0xc>
 800e570:	f7ff ffc4 	bl	800e4fc <global_stdio_init.part.0>
 800e574:	e7f2      	b.n	800e55c <__sinit+0xc>
 800e576:	bf00      	nop
 800e578:	0800e4bd 	.word	0x0800e4bd
 800e57c:	20000634 	.word	0x20000634

0800e580 <_fwalk_sglue>:
 800e580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e584:	4607      	mov	r7, r0
 800e586:	4688      	mov	r8, r1
 800e588:	4614      	mov	r4, r2
 800e58a:	2600      	movs	r6, #0
 800e58c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e590:	f1b9 0901 	subs.w	r9, r9, #1
 800e594:	d505      	bpl.n	800e5a2 <_fwalk_sglue+0x22>
 800e596:	6824      	ldr	r4, [r4, #0]
 800e598:	2c00      	cmp	r4, #0
 800e59a:	d1f7      	bne.n	800e58c <_fwalk_sglue+0xc>
 800e59c:	4630      	mov	r0, r6
 800e59e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e5a2:	89ab      	ldrh	r3, [r5, #12]
 800e5a4:	2b01      	cmp	r3, #1
 800e5a6:	d907      	bls.n	800e5b8 <_fwalk_sglue+0x38>
 800e5a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e5ac:	3301      	adds	r3, #1
 800e5ae:	d003      	beq.n	800e5b8 <_fwalk_sglue+0x38>
 800e5b0:	4629      	mov	r1, r5
 800e5b2:	4638      	mov	r0, r7
 800e5b4:	47c0      	blx	r8
 800e5b6:	4306      	orrs	r6, r0
 800e5b8:	3568      	adds	r5, #104	; 0x68
 800e5ba:	e7e9      	b.n	800e590 <_fwalk_sglue+0x10>

0800e5bc <iprintf>:
 800e5bc:	b40f      	push	{r0, r1, r2, r3}
 800e5be:	b507      	push	{r0, r1, r2, lr}
 800e5c0:	4906      	ldr	r1, [pc, #24]	; (800e5dc <iprintf+0x20>)
 800e5c2:	ab04      	add	r3, sp, #16
 800e5c4:	6808      	ldr	r0, [r1, #0]
 800e5c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800e5ca:	6881      	ldr	r1, [r0, #8]
 800e5cc:	9301      	str	r3, [sp, #4]
 800e5ce:	f001 fdf7 	bl	80101c0 <_vfiprintf_r>
 800e5d2:	b003      	add	sp, #12
 800e5d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800e5d8:	b004      	add	sp, #16
 800e5da:	4770      	bx	lr
 800e5dc:	200001e4 	.word	0x200001e4

0800e5e0 <putchar>:
 800e5e0:	4b02      	ldr	r3, [pc, #8]	; (800e5ec <putchar+0xc>)
 800e5e2:	4601      	mov	r1, r0
 800e5e4:	6818      	ldr	r0, [r3, #0]
 800e5e6:	6882      	ldr	r2, [r0, #8]
 800e5e8:	f001 bf66 	b.w	80104b8 <_putc_r>
 800e5ec:	200001e4 	.word	0x200001e4

0800e5f0 <_puts_r>:
 800e5f0:	6a03      	ldr	r3, [r0, #32]
 800e5f2:	b570      	push	{r4, r5, r6, lr}
 800e5f4:	6884      	ldr	r4, [r0, #8]
 800e5f6:	4605      	mov	r5, r0
 800e5f8:	460e      	mov	r6, r1
 800e5fa:	b90b      	cbnz	r3, 800e600 <_puts_r+0x10>
 800e5fc:	f7ff ffa8 	bl	800e550 <__sinit>
 800e600:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e602:	07db      	lsls	r3, r3, #31
 800e604:	d405      	bmi.n	800e612 <_puts_r+0x22>
 800e606:	89a3      	ldrh	r3, [r4, #12]
 800e608:	0598      	lsls	r0, r3, #22
 800e60a:	d402      	bmi.n	800e612 <_puts_r+0x22>
 800e60c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e60e:	f000 fa03 	bl	800ea18 <__retarget_lock_acquire_recursive>
 800e612:	89a3      	ldrh	r3, [r4, #12]
 800e614:	0719      	lsls	r1, r3, #28
 800e616:	d513      	bpl.n	800e640 <_puts_r+0x50>
 800e618:	6923      	ldr	r3, [r4, #16]
 800e61a:	b18b      	cbz	r3, 800e640 <_puts_r+0x50>
 800e61c:	3e01      	subs	r6, #1
 800e61e:	68a3      	ldr	r3, [r4, #8]
 800e620:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e624:	3b01      	subs	r3, #1
 800e626:	60a3      	str	r3, [r4, #8]
 800e628:	b9e9      	cbnz	r1, 800e666 <_puts_r+0x76>
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	da2e      	bge.n	800e68c <_puts_r+0x9c>
 800e62e:	4622      	mov	r2, r4
 800e630:	210a      	movs	r1, #10
 800e632:	4628      	mov	r0, r5
 800e634:	f000 f8b4 	bl	800e7a0 <__swbuf_r>
 800e638:	3001      	adds	r0, #1
 800e63a:	d007      	beq.n	800e64c <_puts_r+0x5c>
 800e63c:	250a      	movs	r5, #10
 800e63e:	e007      	b.n	800e650 <_puts_r+0x60>
 800e640:	4621      	mov	r1, r4
 800e642:	4628      	mov	r0, r5
 800e644:	f000 f8ea 	bl	800e81c <__swsetup_r>
 800e648:	2800      	cmp	r0, #0
 800e64a:	d0e7      	beq.n	800e61c <_puts_r+0x2c>
 800e64c:	f04f 35ff 	mov.w	r5, #4294967295
 800e650:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e652:	07da      	lsls	r2, r3, #31
 800e654:	d405      	bmi.n	800e662 <_puts_r+0x72>
 800e656:	89a3      	ldrh	r3, [r4, #12]
 800e658:	059b      	lsls	r3, r3, #22
 800e65a:	d402      	bmi.n	800e662 <_puts_r+0x72>
 800e65c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e65e:	f000 f9dc 	bl	800ea1a <__retarget_lock_release_recursive>
 800e662:	4628      	mov	r0, r5
 800e664:	bd70      	pop	{r4, r5, r6, pc}
 800e666:	2b00      	cmp	r3, #0
 800e668:	da04      	bge.n	800e674 <_puts_r+0x84>
 800e66a:	69a2      	ldr	r2, [r4, #24]
 800e66c:	429a      	cmp	r2, r3
 800e66e:	dc06      	bgt.n	800e67e <_puts_r+0x8e>
 800e670:	290a      	cmp	r1, #10
 800e672:	d004      	beq.n	800e67e <_puts_r+0x8e>
 800e674:	6823      	ldr	r3, [r4, #0]
 800e676:	1c5a      	adds	r2, r3, #1
 800e678:	6022      	str	r2, [r4, #0]
 800e67a:	7019      	strb	r1, [r3, #0]
 800e67c:	e7cf      	b.n	800e61e <_puts_r+0x2e>
 800e67e:	4622      	mov	r2, r4
 800e680:	4628      	mov	r0, r5
 800e682:	f000 f88d 	bl	800e7a0 <__swbuf_r>
 800e686:	3001      	adds	r0, #1
 800e688:	d1c9      	bne.n	800e61e <_puts_r+0x2e>
 800e68a:	e7df      	b.n	800e64c <_puts_r+0x5c>
 800e68c:	6823      	ldr	r3, [r4, #0]
 800e68e:	250a      	movs	r5, #10
 800e690:	1c5a      	adds	r2, r3, #1
 800e692:	6022      	str	r2, [r4, #0]
 800e694:	701d      	strb	r5, [r3, #0]
 800e696:	e7db      	b.n	800e650 <_puts_r+0x60>

0800e698 <puts>:
 800e698:	4b02      	ldr	r3, [pc, #8]	; (800e6a4 <puts+0xc>)
 800e69a:	4601      	mov	r1, r0
 800e69c:	6818      	ldr	r0, [r3, #0]
 800e69e:	f7ff bfa7 	b.w	800e5f0 <_puts_r>
 800e6a2:	bf00      	nop
 800e6a4:	200001e4 	.word	0x200001e4

0800e6a8 <__sread>:
 800e6a8:	b510      	push	{r4, lr}
 800e6aa:	460c      	mov	r4, r1
 800e6ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e6b0:	f000 f954 	bl	800e95c <_read_r>
 800e6b4:	2800      	cmp	r0, #0
 800e6b6:	bfab      	itete	ge
 800e6b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e6ba:	89a3      	ldrhlt	r3, [r4, #12]
 800e6bc:	181b      	addge	r3, r3, r0
 800e6be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e6c2:	bfac      	ite	ge
 800e6c4:	6563      	strge	r3, [r4, #84]	; 0x54
 800e6c6:	81a3      	strhlt	r3, [r4, #12]
 800e6c8:	bd10      	pop	{r4, pc}

0800e6ca <__swrite>:
 800e6ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6ce:	461f      	mov	r7, r3
 800e6d0:	898b      	ldrh	r3, [r1, #12]
 800e6d2:	05db      	lsls	r3, r3, #23
 800e6d4:	4605      	mov	r5, r0
 800e6d6:	460c      	mov	r4, r1
 800e6d8:	4616      	mov	r6, r2
 800e6da:	d505      	bpl.n	800e6e8 <__swrite+0x1e>
 800e6dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e6e0:	2302      	movs	r3, #2
 800e6e2:	2200      	movs	r2, #0
 800e6e4:	f000 f928 	bl	800e938 <_lseek_r>
 800e6e8:	89a3      	ldrh	r3, [r4, #12]
 800e6ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e6ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e6f2:	81a3      	strh	r3, [r4, #12]
 800e6f4:	4632      	mov	r2, r6
 800e6f6:	463b      	mov	r3, r7
 800e6f8:	4628      	mov	r0, r5
 800e6fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e6fe:	f000 b94f 	b.w	800e9a0 <_write_r>

0800e702 <__sseek>:
 800e702:	b510      	push	{r4, lr}
 800e704:	460c      	mov	r4, r1
 800e706:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e70a:	f000 f915 	bl	800e938 <_lseek_r>
 800e70e:	1c43      	adds	r3, r0, #1
 800e710:	89a3      	ldrh	r3, [r4, #12]
 800e712:	bf15      	itete	ne
 800e714:	6560      	strne	r0, [r4, #84]	; 0x54
 800e716:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e71a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e71e:	81a3      	strheq	r3, [r4, #12]
 800e720:	bf18      	it	ne
 800e722:	81a3      	strhne	r3, [r4, #12]
 800e724:	bd10      	pop	{r4, pc}

0800e726 <__sclose>:
 800e726:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e72a:	f000 b8f5 	b.w	800e918 <_close_r>

0800e72e <_vsniprintf_r>:
 800e72e:	b530      	push	{r4, r5, lr}
 800e730:	4614      	mov	r4, r2
 800e732:	2c00      	cmp	r4, #0
 800e734:	b09b      	sub	sp, #108	; 0x6c
 800e736:	4605      	mov	r5, r0
 800e738:	461a      	mov	r2, r3
 800e73a:	da05      	bge.n	800e748 <_vsniprintf_r+0x1a>
 800e73c:	238b      	movs	r3, #139	; 0x8b
 800e73e:	6003      	str	r3, [r0, #0]
 800e740:	f04f 30ff 	mov.w	r0, #4294967295
 800e744:	b01b      	add	sp, #108	; 0x6c
 800e746:	bd30      	pop	{r4, r5, pc}
 800e748:	f44f 7302 	mov.w	r3, #520	; 0x208
 800e74c:	f8ad 300c 	strh.w	r3, [sp, #12]
 800e750:	bf14      	ite	ne
 800e752:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e756:	4623      	moveq	r3, r4
 800e758:	9302      	str	r3, [sp, #8]
 800e75a:	9305      	str	r3, [sp, #20]
 800e75c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e760:	9100      	str	r1, [sp, #0]
 800e762:	9104      	str	r1, [sp, #16]
 800e764:	f8ad 300e 	strh.w	r3, [sp, #14]
 800e768:	4669      	mov	r1, sp
 800e76a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800e76c:	f001 fc00 	bl	800ff70 <_svfiprintf_r>
 800e770:	1c43      	adds	r3, r0, #1
 800e772:	bfbc      	itt	lt
 800e774:	238b      	movlt	r3, #139	; 0x8b
 800e776:	602b      	strlt	r3, [r5, #0]
 800e778:	2c00      	cmp	r4, #0
 800e77a:	d0e3      	beq.n	800e744 <_vsniprintf_r+0x16>
 800e77c:	9b00      	ldr	r3, [sp, #0]
 800e77e:	2200      	movs	r2, #0
 800e780:	701a      	strb	r2, [r3, #0]
 800e782:	e7df      	b.n	800e744 <_vsniprintf_r+0x16>

0800e784 <vsniprintf>:
 800e784:	b507      	push	{r0, r1, r2, lr}
 800e786:	9300      	str	r3, [sp, #0]
 800e788:	4613      	mov	r3, r2
 800e78a:	460a      	mov	r2, r1
 800e78c:	4601      	mov	r1, r0
 800e78e:	4803      	ldr	r0, [pc, #12]	; (800e79c <vsniprintf+0x18>)
 800e790:	6800      	ldr	r0, [r0, #0]
 800e792:	f7ff ffcc 	bl	800e72e <_vsniprintf_r>
 800e796:	b003      	add	sp, #12
 800e798:	f85d fb04 	ldr.w	pc, [sp], #4
 800e79c:	200001e4 	.word	0x200001e4

0800e7a0 <__swbuf_r>:
 800e7a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7a2:	460e      	mov	r6, r1
 800e7a4:	4614      	mov	r4, r2
 800e7a6:	4605      	mov	r5, r0
 800e7a8:	b118      	cbz	r0, 800e7b2 <__swbuf_r+0x12>
 800e7aa:	6a03      	ldr	r3, [r0, #32]
 800e7ac:	b90b      	cbnz	r3, 800e7b2 <__swbuf_r+0x12>
 800e7ae:	f7ff fecf 	bl	800e550 <__sinit>
 800e7b2:	69a3      	ldr	r3, [r4, #24]
 800e7b4:	60a3      	str	r3, [r4, #8]
 800e7b6:	89a3      	ldrh	r3, [r4, #12]
 800e7b8:	071a      	lsls	r2, r3, #28
 800e7ba:	d525      	bpl.n	800e808 <__swbuf_r+0x68>
 800e7bc:	6923      	ldr	r3, [r4, #16]
 800e7be:	b31b      	cbz	r3, 800e808 <__swbuf_r+0x68>
 800e7c0:	6823      	ldr	r3, [r4, #0]
 800e7c2:	6922      	ldr	r2, [r4, #16]
 800e7c4:	1a98      	subs	r0, r3, r2
 800e7c6:	6963      	ldr	r3, [r4, #20]
 800e7c8:	b2f6      	uxtb	r6, r6
 800e7ca:	4283      	cmp	r3, r0
 800e7cc:	4637      	mov	r7, r6
 800e7ce:	dc04      	bgt.n	800e7da <__swbuf_r+0x3a>
 800e7d0:	4621      	mov	r1, r4
 800e7d2:	4628      	mov	r0, r5
 800e7d4:	f7ff fe06 	bl	800e3e4 <_fflush_r>
 800e7d8:	b9e0      	cbnz	r0, 800e814 <__swbuf_r+0x74>
 800e7da:	68a3      	ldr	r3, [r4, #8]
 800e7dc:	3b01      	subs	r3, #1
 800e7de:	60a3      	str	r3, [r4, #8]
 800e7e0:	6823      	ldr	r3, [r4, #0]
 800e7e2:	1c5a      	adds	r2, r3, #1
 800e7e4:	6022      	str	r2, [r4, #0]
 800e7e6:	701e      	strb	r6, [r3, #0]
 800e7e8:	6962      	ldr	r2, [r4, #20]
 800e7ea:	1c43      	adds	r3, r0, #1
 800e7ec:	429a      	cmp	r2, r3
 800e7ee:	d004      	beq.n	800e7fa <__swbuf_r+0x5a>
 800e7f0:	89a3      	ldrh	r3, [r4, #12]
 800e7f2:	07db      	lsls	r3, r3, #31
 800e7f4:	d506      	bpl.n	800e804 <__swbuf_r+0x64>
 800e7f6:	2e0a      	cmp	r6, #10
 800e7f8:	d104      	bne.n	800e804 <__swbuf_r+0x64>
 800e7fa:	4621      	mov	r1, r4
 800e7fc:	4628      	mov	r0, r5
 800e7fe:	f7ff fdf1 	bl	800e3e4 <_fflush_r>
 800e802:	b938      	cbnz	r0, 800e814 <__swbuf_r+0x74>
 800e804:	4638      	mov	r0, r7
 800e806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e808:	4621      	mov	r1, r4
 800e80a:	4628      	mov	r0, r5
 800e80c:	f000 f806 	bl	800e81c <__swsetup_r>
 800e810:	2800      	cmp	r0, #0
 800e812:	d0d5      	beq.n	800e7c0 <__swbuf_r+0x20>
 800e814:	f04f 37ff 	mov.w	r7, #4294967295
 800e818:	e7f4      	b.n	800e804 <__swbuf_r+0x64>
	...

0800e81c <__swsetup_r>:
 800e81c:	b538      	push	{r3, r4, r5, lr}
 800e81e:	4b2a      	ldr	r3, [pc, #168]	; (800e8c8 <__swsetup_r+0xac>)
 800e820:	4605      	mov	r5, r0
 800e822:	6818      	ldr	r0, [r3, #0]
 800e824:	460c      	mov	r4, r1
 800e826:	b118      	cbz	r0, 800e830 <__swsetup_r+0x14>
 800e828:	6a03      	ldr	r3, [r0, #32]
 800e82a:	b90b      	cbnz	r3, 800e830 <__swsetup_r+0x14>
 800e82c:	f7ff fe90 	bl	800e550 <__sinit>
 800e830:	89a3      	ldrh	r3, [r4, #12]
 800e832:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e836:	0718      	lsls	r0, r3, #28
 800e838:	d422      	bmi.n	800e880 <__swsetup_r+0x64>
 800e83a:	06d9      	lsls	r1, r3, #27
 800e83c:	d407      	bmi.n	800e84e <__swsetup_r+0x32>
 800e83e:	2309      	movs	r3, #9
 800e840:	602b      	str	r3, [r5, #0]
 800e842:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e846:	81a3      	strh	r3, [r4, #12]
 800e848:	f04f 30ff 	mov.w	r0, #4294967295
 800e84c:	e034      	b.n	800e8b8 <__swsetup_r+0x9c>
 800e84e:	0758      	lsls	r0, r3, #29
 800e850:	d512      	bpl.n	800e878 <__swsetup_r+0x5c>
 800e852:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e854:	b141      	cbz	r1, 800e868 <__swsetup_r+0x4c>
 800e856:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e85a:	4299      	cmp	r1, r3
 800e85c:	d002      	beq.n	800e864 <__swsetup_r+0x48>
 800e85e:	4628      	mov	r0, r5
 800e860:	f000 ff64 	bl	800f72c <_free_r>
 800e864:	2300      	movs	r3, #0
 800e866:	6363      	str	r3, [r4, #52]	; 0x34
 800e868:	89a3      	ldrh	r3, [r4, #12]
 800e86a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e86e:	81a3      	strh	r3, [r4, #12]
 800e870:	2300      	movs	r3, #0
 800e872:	6063      	str	r3, [r4, #4]
 800e874:	6923      	ldr	r3, [r4, #16]
 800e876:	6023      	str	r3, [r4, #0]
 800e878:	89a3      	ldrh	r3, [r4, #12]
 800e87a:	f043 0308 	orr.w	r3, r3, #8
 800e87e:	81a3      	strh	r3, [r4, #12]
 800e880:	6923      	ldr	r3, [r4, #16]
 800e882:	b94b      	cbnz	r3, 800e898 <__swsetup_r+0x7c>
 800e884:	89a3      	ldrh	r3, [r4, #12]
 800e886:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e88a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e88e:	d003      	beq.n	800e898 <__swsetup_r+0x7c>
 800e890:	4621      	mov	r1, r4
 800e892:	4628      	mov	r0, r5
 800e894:	f001 fdd4 	bl	8010440 <__smakebuf_r>
 800e898:	89a0      	ldrh	r0, [r4, #12]
 800e89a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e89e:	f010 0301 	ands.w	r3, r0, #1
 800e8a2:	d00a      	beq.n	800e8ba <__swsetup_r+0x9e>
 800e8a4:	2300      	movs	r3, #0
 800e8a6:	60a3      	str	r3, [r4, #8]
 800e8a8:	6963      	ldr	r3, [r4, #20]
 800e8aa:	425b      	negs	r3, r3
 800e8ac:	61a3      	str	r3, [r4, #24]
 800e8ae:	6923      	ldr	r3, [r4, #16]
 800e8b0:	b943      	cbnz	r3, 800e8c4 <__swsetup_r+0xa8>
 800e8b2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e8b6:	d1c4      	bne.n	800e842 <__swsetup_r+0x26>
 800e8b8:	bd38      	pop	{r3, r4, r5, pc}
 800e8ba:	0781      	lsls	r1, r0, #30
 800e8bc:	bf58      	it	pl
 800e8be:	6963      	ldrpl	r3, [r4, #20]
 800e8c0:	60a3      	str	r3, [r4, #8]
 800e8c2:	e7f4      	b.n	800e8ae <__swsetup_r+0x92>
 800e8c4:	2000      	movs	r0, #0
 800e8c6:	e7f7      	b.n	800e8b8 <__swsetup_r+0x9c>
 800e8c8:	200001e4 	.word	0x200001e4

0800e8cc <memmove>:
 800e8cc:	4288      	cmp	r0, r1
 800e8ce:	b510      	push	{r4, lr}
 800e8d0:	eb01 0402 	add.w	r4, r1, r2
 800e8d4:	d902      	bls.n	800e8dc <memmove+0x10>
 800e8d6:	4284      	cmp	r4, r0
 800e8d8:	4623      	mov	r3, r4
 800e8da:	d807      	bhi.n	800e8ec <memmove+0x20>
 800e8dc:	1e43      	subs	r3, r0, #1
 800e8de:	42a1      	cmp	r1, r4
 800e8e0:	d008      	beq.n	800e8f4 <memmove+0x28>
 800e8e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e8e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e8ea:	e7f8      	b.n	800e8de <memmove+0x12>
 800e8ec:	4402      	add	r2, r0
 800e8ee:	4601      	mov	r1, r0
 800e8f0:	428a      	cmp	r2, r1
 800e8f2:	d100      	bne.n	800e8f6 <memmove+0x2a>
 800e8f4:	bd10      	pop	{r4, pc}
 800e8f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e8fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e8fe:	e7f7      	b.n	800e8f0 <memmove+0x24>

0800e900 <memset>:
 800e900:	4402      	add	r2, r0
 800e902:	4603      	mov	r3, r0
 800e904:	4293      	cmp	r3, r2
 800e906:	d100      	bne.n	800e90a <memset+0xa>
 800e908:	4770      	bx	lr
 800e90a:	f803 1b01 	strb.w	r1, [r3], #1
 800e90e:	e7f9      	b.n	800e904 <memset+0x4>

0800e910 <_localeconv_r>:
 800e910:	4800      	ldr	r0, [pc, #0]	; (800e914 <_localeconv_r+0x4>)
 800e912:	4770      	bx	lr
 800e914:	200002d8 	.word	0x200002d8

0800e918 <_close_r>:
 800e918:	b538      	push	{r3, r4, r5, lr}
 800e91a:	4d06      	ldr	r5, [pc, #24]	; (800e934 <_close_r+0x1c>)
 800e91c:	2300      	movs	r3, #0
 800e91e:	4604      	mov	r4, r0
 800e920:	4608      	mov	r0, r1
 800e922:	602b      	str	r3, [r5, #0]
 800e924:	f7f3 fba1 	bl	800206a <_close>
 800e928:	1c43      	adds	r3, r0, #1
 800e92a:	d102      	bne.n	800e932 <_close_r+0x1a>
 800e92c:	682b      	ldr	r3, [r5, #0]
 800e92e:	b103      	cbz	r3, 800e932 <_close_r+0x1a>
 800e930:	6023      	str	r3, [r4, #0]
 800e932:	bd38      	pop	{r3, r4, r5, pc}
 800e934:	20000638 	.word	0x20000638

0800e938 <_lseek_r>:
 800e938:	b538      	push	{r3, r4, r5, lr}
 800e93a:	4d07      	ldr	r5, [pc, #28]	; (800e958 <_lseek_r+0x20>)
 800e93c:	4604      	mov	r4, r0
 800e93e:	4608      	mov	r0, r1
 800e940:	4611      	mov	r1, r2
 800e942:	2200      	movs	r2, #0
 800e944:	602a      	str	r2, [r5, #0]
 800e946:	461a      	mov	r2, r3
 800e948:	f7f3 fbb6 	bl	80020b8 <_lseek>
 800e94c:	1c43      	adds	r3, r0, #1
 800e94e:	d102      	bne.n	800e956 <_lseek_r+0x1e>
 800e950:	682b      	ldr	r3, [r5, #0]
 800e952:	b103      	cbz	r3, 800e956 <_lseek_r+0x1e>
 800e954:	6023      	str	r3, [r4, #0]
 800e956:	bd38      	pop	{r3, r4, r5, pc}
 800e958:	20000638 	.word	0x20000638

0800e95c <_read_r>:
 800e95c:	b538      	push	{r3, r4, r5, lr}
 800e95e:	4d07      	ldr	r5, [pc, #28]	; (800e97c <_read_r+0x20>)
 800e960:	4604      	mov	r4, r0
 800e962:	4608      	mov	r0, r1
 800e964:	4611      	mov	r1, r2
 800e966:	2200      	movs	r2, #0
 800e968:	602a      	str	r2, [r5, #0]
 800e96a:	461a      	mov	r2, r3
 800e96c:	f7f3 fb60 	bl	8002030 <_read>
 800e970:	1c43      	adds	r3, r0, #1
 800e972:	d102      	bne.n	800e97a <_read_r+0x1e>
 800e974:	682b      	ldr	r3, [r5, #0]
 800e976:	b103      	cbz	r3, 800e97a <_read_r+0x1e>
 800e978:	6023      	str	r3, [r4, #0]
 800e97a:	bd38      	pop	{r3, r4, r5, pc}
 800e97c:	20000638 	.word	0x20000638

0800e980 <_sbrk_r>:
 800e980:	b538      	push	{r3, r4, r5, lr}
 800e982:	4d06      	ldr	r5, [pc, #24]	; (800e99c <_sbrk_r+0x1c>)
 800e984:	2300      	movs	r3, #0
 800e986:	4604      	mov	r4, r0
 800e988:	4608      	mov	r0, r1
 800e98a:	602b      	str	r3, [r5, #0]
 800e98c:	f7f3 fba2 	bl	80020d4 <_sbrk>
 800e990:	1c43      	adds	r3, r0, #1
 800e992:	d102      	bne.n	800e99a <_sbrk_r+0x1a>
 800e994:	682b      	ldr	r3, [r5, #0]
 800e996:	b103      	cbz	r3, 800e99a <_sbrk_r+0x1a>
 800e998:	6023      	str	r3, [r4, #0]
 800e99a:	bd38      	pop	{r3, r4, r5, pc}
 800e99c:	20000638 	.word	0x20000638

0800e9a0 <_write_r>:
 800e9a0:	b538      	push	{r3, r4, r5, lr}
 800e9a2:	4d07      	ldr	r5, [pc, #28]	; (800e9c0 <_write_r+0x20>)
 800e9a4:	4604      	mov	r4, r0
 800e9a6:	4608      	mov	r0, r1
 800e9a8:	4611      	mov	r1, r2
 800e9aa:	2200      	movs	r2, #0
 800e9ac:	602a      	str	r2, [r5, #0]
 800e9ae:	461a      	mov	r2, r3
 800e9b0:	f7f2 fd76 	bl	80014a0 <_write>
 800e9b4:	1c43      	adds	r3, r0, #1
 800e9b6:	d102      	bne.n	800e9be <_write_r+0x1e>
 800e9b8:	682b      	ldr	r3, [r5, #0]
 800e9ba:	b103      	cbz	r3, 800e9be <_write_r+0x1e>
 800e9bc:	6023      	str	r3, [r4, #0]
 800e9be:	bd38      	pop	{r3, r4, r5, pc}
 800e9c0:	20000638 	.word	0x20000638

0800e9c4 <__errno>:
 800e9c4:	4b01      	ldr	r3, [pc, #4]	; (800e9cc <__errno+0x8>)
 800e9c6:	6818      	ldr	r0, [r3, #0]
 800e9c8:	4770      	bx	lr
 800e9ca:	bf00      	nop
 800e9cc:	200001e4 	.word	0x200001e4

0800e9d0 <__libc_init_array>:
 800e9d0:	b570      	push	{r4, r5, r6, lr}
 800e9d2:	4d0d      	ldr	r5, [pc, #52]	; (800ea08 <__libc_init_array+0x38>)
 800e9d4:	4c0d      	ldr	r4, [pc, #52]	; (800ea0c <__libc_init_array+0x3c>)
 800e9d6:	1b64      	subs	r4, r4, r5
 800e9d8:	10a4      	asrs	r4, r4, #2
 800e9da:	2600      	movs	r6, #0
 800e9dc:	42a6      	cmp	r6, r4
 800e9de:	d109      	bne.n	800e9f4 <__libc_init_array+0x24>
 800e9e0:	4d0b      	ldr	r5, [pc, #44]	; (800ea10 <__libc_init_array+0x40>)
 800e9e2:	4c0c      	ldr	r4, [pc, #48]	; (800ea14 <__libc_init_array+0x44>)
 800e9e4:	f004 fa28 	bl	8012e38 <_init>
 800e9e8:	1b64      	subs	r4, r4, r5
 800e9ea:	10a4      	asrs	r4, r4, #2
 800e9ec:	2600      	movs	r6, #0
 800e9ee:	42a6      	cmp	r6, r4
 800e9f0:	d105      	bne.n	800e9fe <__libc_init_array+0x2e>
 800e9f2:	bd70      	pop	{r4, r5, r6, pc}
 800e9f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800e9f8:	4798      	blx	r3
 800e9fa:	3601      	adds	r6, #1
 800e9fc:	e7ee      	b.n	800e9dc <__libc_init_array+0xc>
 800e9fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800ea02:	4798      	blx	r3
 800ea04:	3601      	adds	r6, #1
 800ea06:	e7f2      	b.n	800e9ee <__libc_init_array+0x1e>
 800ea08:	08018b28 	.word	0x08018b28
 800ea0c:	08018b28 	.word	0x08018b28
 800ea10:	08018b28 	.word	0x08018b28
 800ea14:	08018b2c 	.word	0x08018b2c

0800ea18 <__retarget_lock_acquire_recursive>:
 800ea18:	4770      	bx	lr

0800ea1a <__retarget_lock_release_recursive>:
 800ea1a:	4770      	bx	lr

0800ea1c <memcpy>:
 800ea1c:	440a      	add	r2, r1
 800ea1e:	4291      	cmp	r1, r2
 800ea20:	f100 33ff 	add.w	r3, r0, #4294967295
 800ea24:	d100      	bne.n	800ea28 <memcpy+0xc>
 800ea26:	4770      	bx	lr
 800ea28:	b510      	push	{r4, lr}
 800ea2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ea2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ea32:	4291      	cmp	r1, r2
 800ea34:	d1f9      	bne.n	800ea2a <memcpy+0xe>
 800ea36:	bd10      	pop	{r4, pc}

0800ea38 <quorem>:
 800ea38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea3c:	6903      	ldr	r3, [r0, #16]
 800ea3e:	690c      	ldr	r4, [r1, #16]
 800ea40:	42a3      	cmp	r3, r4
 800ea42:	4607      	mov	r7, r0
 800ea44:	db7e      	blt.n	800eb44 <quorem+0x10c>
 800ea46:	3c01      	subs	r4, #1
 800ea48:	f101 0814 	add.w	r8, r1, #20
 800ea4c:	f100 0514 	add.w	r5, r0, #20
 800ea50:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ea54:	9301      	str	r3, [sp, #4]
 800ea56:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ea5a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ea5e:	3301      	adds	r3, #1
 800ea60:	429a      	cmp	r2, r3
 800ea62:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ea66:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ea6a:	fbb2 f6f3 	udiv	r6, r2, r3
 800ea6e:	d331      	bcc.n	800ead4 <quorem+0x9c>
 800ea70:	f04f 0e00 	mov.w	lr, #0
 800ea74:	4640      	mov	r0, r8
 800ea76:	46ac      	mov	ip, r5
 800ea78:	46f2      	mov	sl, lr
 800ea7a:	f850 2b04 	ldr.w	r2, [r0], #4
 800ea7e:	b293      	uxth	r3, r2
 800ea80:	fb06 e303 	mla	r3, r6, r3, lr
 800ea84:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ea88:	0c1a      	lsrs	r2, r3, #16
 800ea8a:	b29b      	uxth	r3, r3
 800ea8c:	ebaa 0303 	sub.w	r3, sl, r3
 800ea90:	f8dc a000 	ldr.w	sl, [ip]
 800ea94:	fa13 f38a 	uxtah	r3, r3, sl
 800ea98:	fb06 220e 	mla	r2, r6, lr, r2
 800ea9c:	9300      	str	r3, [sp, #0]
 800ea9e:	9b00      	ldr	r3, [sp, #0]
 800eaa0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800eaa4:	b292      	uxth	r2, r2
 800eaa6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800eaaa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800eaae:	f8bd 3000 	ldrh.w	r3, [sp]
 800eab2:	4581      	cmp	r9, r0
 800eab4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800eab8:	f84c 3b04 	str.w	r3, [ip], #4
 800eabc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800eac0:	d2db      	bcs.n	800ea7a <quorem+0x42>
 800eac2:	f855 300b 	ldr.w	r3, [r5, fp]
 800eac6:	b92b      	cbnz	r3, 800ead4 <quorem+0x9c>
 800eac8:	9b01      	ldr	r3, [sp, #4]
 800eaca:	3b04      	subs	r3, #4
 800eacc:	429d      	cmp	r5, r3
 800eace:	461a      	mov	r2, r3
 800ead0:	d32c      	bcc.n	800eb2c <quorem+0xf4>
 800ead2:	613c      	str	r4, [r7, #16]
 800ead4:	4638      	mov	r0, r7
 800ead6:	f001 f8f1 	bl	800fcbc <__mcmp>
 800eada:	2800      	cmp	r0, #0
 800eadc:	db22      	blt.n	800eb24 <quorem+0xec>
 800eade:	3601      	adds	r6, #1
 800eae0:	4629      	mov	r1, r5
 800eae2:	2000      	movs	r0, #0
 800eae4:	f858 2b04 	ldr.w	r2, [r8], #4
 800eae8:	f8d1 c000 	ldr.w	ip, [r1]
 800eaec:	b293      	uxth	r3, r2
 800eaee:	1ac3      	subs	r3, r0, r3
 800eaf0:	0c12      	lsrs	r2, r2, #16
 800eaf2:	fa13 f38c 	uxtah	r3, r3, ip
 800eaf6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800eafa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800eafe:	b29b      	uxth	r3, r3
 800eb00:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800eb04:	45c1      	cmp	r9, r8
 800eb06:	f841 3b04 	str.w	r3, [r1], #4
 800eb0a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800eb0e:	d2e9      	bcs.n	800eae4 <quorem+0xac>
 800eb10:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800eb14:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800eb18:	b922      	cbnz	r2, 800eb24 <quorem+0xec>
 800eb1a:	3b04      	subs	r3, #4
 800eb1c:	429d      	cmp	r5, r3
 800eb1e:	461a      	mov	r2, r3
 800eb20:	d30a      	bcc.n	800eb38 <quorem+0x100>
 800eb22:	613c      	str	r4, [r7, #16]
 800eb24:	4630      	mov	r0, r6
 800eb26:	b003      	add	sp, #12
 800eb28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb2c:	6812      	ldr	r2, [r2, #0]
 800eb2e:	3b04      	subs	r3, #4
 800eb30:	2a00      	cmp	r2, #0
 800eb32:	d1ce      	bne.n	800ead2 <quorem+0x9a>
 800eb34:	3c01      	subs	r4, #1
 800eb36:	e7c9      	b.n	800eacc <quorem+0x94>
 800eb38:	6812      	ldr	r2, [r2, #0]
 800eb3a:	3b04      	subs	r3, #4
 800eb3c:	2a00      	cmp	r2, #0
 800eb3e:	d1f0      	bne.n	800eb22 <quorem+0xea>
 800eb40:	3c01      	subs	r4, #1
 800eb42:	e7eb      	b.n	800eb1c <quorem+0xe4>
 800eb44:	2000      	movs	r0, #0
 800eb46:	e7ee      	b.n	800eb26 <quorem+0xee>

0800eb48 <_dtoa_r>:
 800eb48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb4c:	ed2d 8b04 	vpush	{d8-d9}
 800eb50:	69c5      	ldr	r5, [r0, #28]
 800eb52:	b093      	sub	sp, #76	; 0x4c
 800eb54:	ed8d 0b02 	vstr	d0, [sp, #8]
 800eb58:	ec57 6b10 	vmov	r6, r7, d0
 800eb5c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800eb60:	9107      	str	r1, [sp, #28]
 800eb62:	4604      	mov	r4, r0
 800eb64:	920a      	str	r2, [sp, #40]	; 0x28
 800eb66:	930d      	str	r3, [sp, #52]	; 0x34
 800eb68:	b975      	cbnz	r5, 800eb88 <_dtoa_r+0x40>
 800eb6a:	2010      	movs	r0, #16
 800eb6c:	f7fe fe92 	bl	800d894 <malloc>
 800eb70:	4602      	mov	r2, r0
 800eb72:	61e0      	str	r0, [r4, #28]
 800eb74:	b920      	cbnz	r0, 800eb80 <_dtoa_r+0x38>
 800eb76:	4bae      	ldr	r3, [pc, #696]	; (800ee30 <_dtoa_r+0x2e8>)
 800eb78:	21ef      	movs	r1, #239	; 0xef
 800eb7a:	48ae      	ldr	r0, [pc, #696]	; (800ee34 <_dtoa_r+0x2ec>)
 800eb7c:	f001 fcf2 	bl	8010564 <__assert_func>
 800eb80:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800eb84:	6005      	str	r5, [r0, #0]
 800eb86:	60c5      	str	r5, [r0, #12]
 800eb88:	69e3      	ldr	r3, [r4, #28]
 800eb8a:	6819      	ldr	r1, [r3, #0]
 800eb8c:	b151      	cbz	r1, 800eba4 <_dtoa_r+0x5c>
 800eb8e:	685a      	ldr	r2, [r3, #4]
 800eb90:	604a      	str	r2, [r1, #4]
 800eb92:	2301      	movs	r3, #1
 800eb94:	4093      	lsls	r3, r2
 800eb96:	608b      	str	r3, [r1, #8]
 800eb98:	4620      	mov	r0, r4
 800eb9a:	f000 fe53 	bl	800f844 <_Bfree>
 800eb9e:	69e3      	ldr	r3, [r4, #28]
 800eba0:	2200      	movs	r2, #0
 800eba2:	601a      	str	r2, [r3, #0]
 800eba4:	1e3b      	subs	r3, r7, #0
 800eba6:	bfbb      	ittet	lt
 800eba8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ebac:	9303      	strlt	r3, [sp, #12]
 800ebae:	2300      	movge	r3, #0
 800ebb0:	2201      	movlt	r2, #1
 800ebb2:	bfac      	ite	ge
 800ebb4:	f8c8 3000 	strge.w	r3, [r8]
 800ebb8:	f8c8 2000 	strlt.w	r2, [r8]
 800ebbc:	4b9e      	ldr	r3, [pc, #632]	; (800ee38 <_dtoa_r+0x2f0>)
 800ebbe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800ebc2:	ea33 0308 	bics.w	r3, r3, r8
 800ebc6:	d11b      	bne.n	800ec00 <_dtoa_r+0xb8>
 800ebc8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ebca:	f242 730f 	movw	r3, #9999	; 0x270f
 800ebce:	6013      	str	r3, [r2, #0]
 800ebd0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800ebd4:	4333      	orrs	r3, r6
 800ebd6:	f000 8593 	beq.w	800f700 <_dtoa_r+0xbb8>
 800ebda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ebdc:	b963      	cbnz	r3, 800ebf8 <_dtoa_r+0xb0>
 800ebde:	4b97      	ldr	r3, [pc, #604]	; (800ee3c <_dtoa_r+0x2f4>)
 800ebe0:	e027      	b.n	800ec32 <_dtoa_r+0xea>
 800ebe2:	4b97      	ldr	r3, [pc, #604]	; (800ee40 <_dtoa_r+0x2f8>)
 800ebe4:	9300      	str	r3, [sp, #0]
 800ebe6:	3308      	adds	r3, #8
 800ebe8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ebea:	6013      	str	r3, [r2, #0]
 800ebec:	9800      	ldr	r0, [sp, #0]
 800ebee:	b013      	add	sp, #76	; 0x4c
 800ebf0:	ecbd 8b04 	vpop	{d8-d9}
 800ebf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebf8:	4b90      	ldr	r3, [pc, #576]	; (800ee3c <_dtoa_r+0x2f4>)
 800ebfa:	9300      	str	r3, [sp, #0]
 800ebfc:	3303      	adds	r3, #3
 800ebfe:	e7f3      	b.n	800ebe8 <_dtoa_r+0xa0>
 800ec00:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ec04:	2200      	movs	r2, #0
 800ec06:	ec51 0b17 	vmov	r0, r1, d7
 800ec0a:	eeb0 8a47 	vmov.f32	s16, s14
 800ec0e:	eef0 8a67 	vmov.f32	s17, s15
 800ec12:	2300      	movs	r3, #0
 800ec14:	f7f1 ffd0 	bl	8000bb8 <__aeabi_dcmpeq>
 800ec18:	4681      	mov	r9, r0
 800ec1a:	b160      	cbz	r0, 800ec36 <_dtoa_r+0xee>
 800ec1c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ec1e:	2301      	movs	r3, #1
 800ec20:	6013      	str	r3, [r2, #0]
 800ec22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	f000 8568 	beq.w	800f6fa <_dtoa_r+0xbb2>
 800ec2a:	4b86      	ldr	r3, [pc, #536]	; (800ee44 <_dtoa_r+0x2fc>)
 800ec2c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ec2e:	6013      	str	r3, [r2, #0]
 800ec30:	3b01      	subs	r3, #1
 800ec32:	9300      	str	r3, [sp, #0]
 800ec34:	e7da      	b.n	800ebec <_dtoa_r+0xa4>
 800ec36:	aa10      	add	r2, sp, #64	; 0x40
 800ec38:	a911      	add	r1, sp, #68	; 0x44
 800ec3a:	4620      	mov	r0, r4
 800ec3c:	eeb0 0a48 	vmov.f32	s0, s16
 800ec40:	eef0 0a68 	vmov.f32	s1, s17
 800ec44:	f001 f8e0 	bl	800fe08 <__d2b>
 800ec48:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800ec4c:	4682      	mov	sl, r0
 800ec4e:	2d00      	cmp	r5, #0
 800ec50:	d07f      	beq.n	800ed52 <_dtoa_r+0x20a>
 800ec52:	ee18 3a90 	vmov	r3, s17
 800ec56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ec5a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800ec5e:	ec51 0b18 	vmov	r0, r1, d8
 800ec62:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ec66:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ec6a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800ec6e:	4619      	mov	r1, r3
 800ec70:	2200      	movs	r2, #0
 800ec72:	4b75      	ldr	r3, [pc, #468]	; (800ee48 <_dtoa_r+0x300>)
 800ec74:	f7f1 fb80 	bl	8000378 <__aeabi_dsub>
 800ec78:	a367      	add	r3, pc, #412	; (adr r3, 800ee18 <_dtoa_r+0x2d0>)
 800ec7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec7e:	f7f1 fd33 	bl	80006e8 <__aeabi_dmul>
 800ec82:	a367      	add	r3, pc, #412	; (adr r3, 800ee20 <_dtoa_r+0x2d8>)
 800ec84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec88:	f7f1 fb78 	bl	800037c <__adddf3>
 800ec8c:	4606      	mov	r6, r0
 800ec8e:	4628      	mov	r0, r5
 800ec90:	460f      	mov	r7, r1
 800ec92:	f7f1 fcbf 	bl	8000614 <__aeabi_i2d>
 800ec96:	a364      	add	r3, pc, #400	; (adr r3, 800ee28 <_dtoa_r+0x2e0>)
 800ec98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec9c:	f7f1 fd24 	bl	80006e8 <__aeabi_dmul>
 800eca0:	4602      	mov	r2, r0
 800eca2:	460b      	mov	r3, r1
 800eca4:	4630      	mov	r0, r6
 800eca6:	4639      	mov	r1, r7
 800eca8:	f7f1 fb68 	bl	800037c <__adddf3>
 800ecac:	4606      	mov	r6, r0
 800ecae:	460f      	mov	r7, r1
 800ecb0:	f7f1 ffca 	bl	8000c48 <__aeabi_d2iz>
 800ecb4:	2200      	movs	r2, #0
 800ecb6:	4683      	mov	fp, r0
 800ecb8:	2300      	movs	r3, #0
 800ecba:	4630      	mov	r0, r6
 800ecbc:	4639      	mov	r1, r7
 800ecbe:	f7f1 ff85 	bl	8000bcc <__aeabi_dcmplt>
 800ecc2:	b148      	cbz	r0, 800ecd8 <_dtoa_r+0x190>
 800ecc4:	4658      	mov	r0, fp
 800ecc6:	f7f1 fca5 	bl	8000614 <__aeabi_i2d>
 800ecca:	4632      	mov	r2, r6
 800eccc:	463b      	mov	r3, r7
 800ecce:	f7f1 ff73 	bl	8000bb8 <__aeabi_dcmpeq>
 800ecd2:	b908      	cbnz	r0, 800ecd8 <_dtoa_r+0x190>
 800ecd4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ecd8:	f1bb 0f16 	cmp.w	fp, #22
 800ecdc:	d857      	bhi.n	800ed8e <_dtoa_r+0x246>
 800ecde:	4b5b      	ldr	r3, [pc, #364]	; (800ee4c <_dtoa_r+0x304>)
 800ece0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ece4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ece8:	ec51 0b18 	vmov	r0, r1, d8
 800ecec:	f7f1 ff6e 	bl	8000bcc <__aeabi_dcmplt>
 800ecf0:	2800      	cmp	r0, #0
 800ecf2:	d04e      	beq.n	800ed92 <_dtoa_r+0x24a>
 800ecf4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ecf8:	2300      	movs	r3, #0
 800ecfa:	930c      	str	r3, [sp, #48]	; 0x30
 800ecfc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ecfe:	1b5b      	subs	r3, r3, r5
 800ed00:	1e5a      	subs	r2, r3, #1
 800ed02:	bf45      	ittet	mi
 800ed04:	f1c3 0301 	rsbmi	r3, r3, #1
 800ed08:	9305      	strmi	r3, [sp, #20]
 800ed0a:	2300      	movpl	r3, #0
 800ed0c:	2300      	movmi	r3, #0
 800ed0e:	9206      	str	r2, [sp, #24]
 800ed10:	bf54      	ite	pl
 800ed12:	9305      	strpl	r3, [sp, #20]
 800ed14:	9306      	strmi	r3, [sp, #24]
 800ed16:	f1bb 0f00 	cmp.w	fp, #0
 800ed1a:	db3c      	blt.n	800ed96 <_dtoa_r+0x24e>
 800ed1c:	9b06      	ldr	r3, [sp, #24]
 800ed1e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800ed22:	445b      	add	r3, fp
 800ed24:	9306      	str	r3, [sp, #24]
 800ed26:	2300      	movs	r3, #0
 800ed28:	9308      	str	r3, [sp, #32]
 800ed2a:	9b07      	ldr	r3, [sp, #28]
 800ed2c:	2b09      	cmp	r3, #9
 800ed2e:	d868      	bhi.n	800ee02 <_dtoa_r+0x2ba>
 800ed30:	2b05      	cmp	r3, #5
 800ed32:	bfc4      	itt	gt
 800ed34:	3b04      	subgt	r3, #4
 800ed36:	9307      	strgt	r3, [sp, #28]
 800ed38:	9b07      	ldr	r3, [sp, #28]
 800ed3a:	f1a3 0302 	sub.w	r3, r3, #2
 800ed3e:	bfcc      	ite	gt
 800ed40:	2500      	movgt	r5, #0
 800ed42:	2501      	movle	r5, #1
 800ed44:	2b03      	cmp	r3, #3
 800ed46:	f200 8085 	bhi.w	800ee54 <_dtoa_r+0x30c>
 800ed4a:	e8df f003 	tbb	[pc, r3]
 800ed4e:	3b2e      	.short	0x3b2e
 800ed50:	5839      	.short	0x5839
 800ed52:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ed56:	441d      	add	r5, r3
 800ed58:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ed5c:	2b20      	cmp	r3, #32
 800ed5e:	bfc1      	itttt	gt
 800ed60:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ed64:	fa08 f803 	lslgt.w	r8, r8, r3
 800ed68:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800ed6c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800ed70:	bfd6      	itet	le
 800ed72:	f1c3 0320 	rsble	r3, r3, #32
 800ed76:	ea48 0003 	orrgt.w	r0, r8, r3
 800ed7a:	fa06 f003 	lslle.w	r0, r6, r3
 800ed7e:	f7f1 fc39 	bl	80005f4 <__aeabi_ui2d>
 800ed82:	2201      	movs	r2, #1
 800ed84:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800ed88:	3d01      	subs	r5, #1
 800ed8a:	920e      	str	r2, [sp, #56]	; 0x38
 800ed8c:	e76f      	b.n	800ec6e <_dtoa_r+0x126>
 800ed8e:	2301      	movs	r3, #1
 800ed90:	e7b3      	b.n	800ecfa <_dtoa_r+0x1b2>
 800ed92:	900c      	str	r0, [sp, #48]	; 0x30
 800ed94:	e7b2      	b.n	800ecfc <_dtoa_r+0x1b4>
 800ed96:	9b05      	ldr	r3, [sp, #20]
 800ed98:	eba3 030b 	sub.w	r3, r3, fp
 800ed9c:	9305      	str	r3, [sp, #20]
 800ed9e:	f1cb 0300 	rsb	r3, fp, #0
 800eda2:	9308      	str	r3, [sp, #32]
 800eda4:	2300      	movs	r3, #0
 800eda6:	930b      	str	r3, [sp, #44]	; 0x2c
 800eda8:	e7bf      	b.n	800ed2a <_dtoa_r+0x1e2>
 800edaa:	2300      	movs	r3, #0
 800edac:	9309      	str	r3, [sp, #36]	; 0x24
 800edae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	dc52      	bgt.n	800ee5a <_dtoa_r+0x312>
 800edb4:	2301      	movs	r3, #1
 800edb6:	9301      	str	r3, [sp, #4]
 800edb8:	9304      	str	r3, [sp, #16]
 800edba:	461a      	mov	r2, r3
 800edbc:	920a      	str	r2, [sp, #40]	; 0x28
 800edbe:	e00b      	b.n	800edd8 <_dtoa_r+0x290>
 800edc0:	2301      	movs	r3, #1
 800edc2:	e7f3      	b.n	800edac <_dtoa_r+0x264>
 800edc4:	2300      	movs	r3, #0
 800edc6:	9309      	str	r3, [sp, #36]	; 0x24
 800edc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800edca:	445b      	add	r3, fp
 800edcc:	9301      	str	r3, [sp, #4]
 800edce:	3301      	adds	r3, #1
 800edd0:	2b01      	cmp	r3, #1
 800edd2:	9304      	str	r3, [sp, #16]
 800edd4:	bfb8      	it	lt
 800edd6:	2301      	movlt	r3, #1
 800edd8:	69e0      	ldr	r0, [r4, #28]
 800edda:	2100      	movs	r1, #0
 800eddc:	2204      	movs	r2, #4
 800edde:	f102 0614 	add.w	r6, r2, #20
 800ede2:	429e      	cmp	r6, r3
 800ede4:	d93d      	bls.n	800ee62 <_dtoa_r+0x31a>
 800ede6:	6041      	str	r1, [r0, #4]
 800ede8:	4620      	mov	r0, r4
 800edea:	f000 fceb 	bl	800f7c4 <_Balloc>
 800edee:	9000      	str	r0, [sp, #0]
 800edf0:	2800      	cmp	r0, #0
 800edf2:	d139      	bne.n	800ee68 <_dtoa_r+0x320>
 800edf4:	4b16      	ldr	r3, [pc, #88]	; (800ee50 <_dtoa_r+0x308>)
 800edf6:	4602      	mov	r2, r0
 800edf8:	f240 11af 	movw	r1, #431	; 0x1af
 800edfc:	e6bd      	b.n	800eb7a <_dtoa_r+0x32>
 800edfe:	2301      	movs	r3, #1
 800ee00:	e7e1      	b.n	800edc6 <_dtoa_r+0x27e>
 800ee02:	2501      	movs	r5, #1
 800ee04:	2300      	movs	r3, #0
 800ee06:	9307      	str	r3, [sp, #28]
 800ee08:	9509      	str	r5, [sp, #36]	; 0x24
 800ee0a:	f04f 33ff 	mov.w	r3, #4294967295
 800ee0e:	9301      	str	r3, [sp, #4]
 800ee10:	9304      	str	r3, [sp, #16]
 800ee12:	2200      	movs	r2, #0
 800ee14:	2312      	movs	r3, #18
 800ee16:	e7d1      	b.n	800edbc <_dtoa_r+0x274>
 800ee18:	636f4361 	.word	0x636f4361
 800ee1c:	3fd287a7 	.word	0x3fd287a7
 800ee20:	8b60c8b3 	.word	0x8b60c8b3
 800ee24:	3fc68a28 	.word	0x3fc68a28
 800ee28:	509f79fb 	.word	0x509f79fb
 800ee2c:	3fd34413 	.word	0x3fd34413
 800ee30:	080185e1 	.word	0x080185e1
 800ee34:	080185f8 	.word	0x080185f8
 800ee38:	7ff00000 	.word	0x7ff00000
 800ee3c:	080185dd 	.word	0x080185dd
 800ee40:	080185d4 	.word	0x080185d4
 800ee44:	080185b1 	.word	0x080185b1
 800ee48:	3ff80000 	.word	0x3ff80000
 800ee4c:	080186e8 	.word	0x080186e8
 800ee50:	08018650 	.word	0x08018650
 800ee54:	2301      	movs	r3, #1
 800ee56:	9309      	str	r3, [sp, #36]	; 0x24
 800ee58:	e7d7      	b.n	800ee0a <_dtoa_r+0x2c2>
 800ee5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ee5c:	9301      	str	r3, [sp, #4]
 800ee5e:	9304      	str	r3, [sp, #16]
 800ee60:	e7ba      	b.n	800edd8 <_dtoa_r+0x290>
 800ee62:	3101      	adds	r1, #1
 800ee64:	0052      	lsls	r2, r2, #1
 800ee66:	e7ba      	b.n	800edde <_dtoa_r+0x296>
 800ee68:	69e3      	ldr	r3, [r4, #28]
 800ee6a:	9a00      	ldr	r2, [sp, #0]
 800ee6c:	601a      	str	r2, [r3, #0]
 800ee6e:	9b04      	ldr	r3, [sp, #16]
 800ee70:	2b0e      	cmp	r3, #14
 800ee72:	f200 80a8 	bhi.w	800efc6 <_dtoa_r+0x47e>
 800ee76:	2d00      	cmp	r5, #0
 800ee78:	f000 80a5 	beq.w	800efc6 <_dtoa_r+0x47e>
 800ee7c:	f1bb 0f00 	cmp.w	fp, #0
 800ee80:	dd38      	ble.n	800eef4 <_dtoa_r+0x3ac>
 800ee82:	4bc0      	ldr	r3, [pc, #768]	; (800f184 <_dtoa_r+0x63c>)
 800ee84:	f00b 020f 	and.w	r2, fp, #15
 800ee88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ee8c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800ee90:	e9d3 6700 	ldrd	r6, r7, [r3]
 800ee94:	ea4f 182b 	mov.w	r8, fp, asr #4
 800ee98:	d019      	beq.n	800eece <_dtoa_r+0x386>
 800ee9a:	4bbb      	ldr	r3, [pc, #748]	; (800f188 <_dtoa_r+0x640>)
 800ee9c:	ec51 0b18 	vmov	r0, r1, d8
 800eea0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800eea4:	f7f1 fd4a 	bl	800093c <__aeabi_ddiv>
 800eea8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eeac:	f008 080f 	and.w	r8, r8, #15
 800eeb0:	2503      	movs	r5, #3
 800eeb2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800f188 <_dtoa_r+0x640>
 800eeb6:	f1b8 0f00 	cmp.w	r8, #0
 800eeba:	d10a      	bne.n	800eed2 <_dtoa_r+0x38a>
 800eebc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eec0:	4632      	mov	r2, r6
 800eec2:	463b      	mov	r3, r7
 800eec4:	f7f1 fd3a 	bl	800093c <__aeabi_ddiv>
 800eec8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eecc:	e02b      	b.n	800ef26 <_dtoa_r+0x3de>
 800eece:	2502      	movs	r5, #2
 800eed0:	e7ef      	b.n	800eeb2 <_dtoa_r+0x36a>
 800eed2:	f018 0f01 	tst.w	r8, #1
 800eed6:	d008      	beq.n	800eeea <_dtoa_r+0x3a2>
 800eed8:	4630      	mov	r0, r6
 800eeda:	4639      	mov	r1, r7
 800eedc:	e9d9 2300 	ldrd	r2, r3, [r9]
 800eee0:	f7f1 fc02 	bl	80006e8 <__aeabi_dmul>
 800eee4:	3501      	adds	r5, #1
 800eee6:	4606      	mov	r6, r0
 800eee8:	460f      	mov	r7, r1
 800eeea:	ea4f 0868 	mov.w	r8, r8, asr #1
 800eeee:	f109 0908 	add.w	r9, r9, #8
 800eef2:	e7e0      	b.n	800eeb6 <_dtoa_r+0x36e>
 800eef4:	f000 809f 	beq.w	800f036 <_dtoa_r+0x4ee>
 800eef8:	f1cb 0600 	rsb	r6, fp, #0
 800eefc:	4ba1      	ldr	r3, [pc, #644]	; (800f184 <_dtoa_r+0x63c>)
 800eefe:	4fa2      	ldr	r7, [pc, #648]	; (800f188 <_dtoa_r+0x640>)
 800ef00:	f006 020f 	and.w	r2, r6, #15
 800ef04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ef08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef0c:	ec51 0b18 	vmov	r0, r1, d8
 800ef10:	f7f1 fbea 	bl	80006e8 <__aeabi_dmul>
 800ef14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ef18:	1136      	asrs	r6, r6, #4
 800ef1a:	2300      	movs	r3, #0
 800ef1c:	2502      	movs	r5, #2
 800ef1e:	2e00      	cmp	r6, #0
 800ef20:	d17e      	bne.n	800f020 <_dtoa_r+0x4d8>
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d1d0      	bne.n	800eec8 <_dtoa_r+0x380>
 800ef26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ef28:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	f000 8084 	beq.w	800f03a <_dtoa_r+0x4f2>
 800ef32:	4b96      	ldr	r3, [pc, #600]	; (800f18c <_dtoa_r+0x644>)
 800ef34:	2200      	movs	r2, #0
 800ef36:	4640      	mov	r0, r8
 800ef38:	4649      	mov	r1, r9
 800ef3a:	f7f1 fe47 	bl	8000bcc <__aeabi_dcmplt>
 800ef3e:	2800      	cmp	r0, #0
 800ef40:	d07b      	beq.n	800f03a <_dtoa_r+0x4f2>
 800ef42:	9b04      	ldr	r3, [sp, #16]
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d078      	beq.n	800f03a <_dtoa_r+0x4f2>
 800ef48:	9b01      	ldr	r3, [sp, #4]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	dd39      	ble.n	800efc2 <_dtoa_r+0x47a>
 800ef4e:	4b90      	ldr	r3, [pc, #576]	; (800f190 <_dtoa_r+0x648>)
 800ef50:	2200      	movs	r2, #0
 800ef52:	4640      	mov	r0, r8
 800ef54:	4649      	mov	r1, r9
 800ef56:	f7f1 fbc7 	bl	80006e8 <__aeabi_dmul>
 800ef5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ef5e:	9e01      	ldr	r6, [sp, #4]
 800ef60:	f10b 37ff 	add.w	r7, fp, #4294967295
 800ef64:	3501      	adds	r5, #1
 800ef66:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ef6a:	4628      	mov	r0, r5
 800ef6c:	f7f1 fb52 	bl	8000614 <__aeabi_i2d>
 800ef70:	4642      	mov	r2, r8
 800ef72:	464b      	mov	r3, r9
 800ef74:	f7f1 fbb8 	bl	80006e8 <__aeabi_dmul>
 800ef78:	4b86      	ldr	r3, [pc, #536]	; (800f194 <_dtoa_r+0x64c>)
 800ef7a:	2200      	movs	r2, #0
 800ef7c:	f7f1 f9fe 	bl	800037c <__adddf3>
 800ef80:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ef84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ef88:	9303      	str	r3, [sp, #12]
 800ef8a:	2e00      	cmp	r6, #0
 800ef8c:	d158      	bne.n	800f040 <_dtoa_r+0x4f8>
 800ef8e:	4b82      	ldr	r3, [pc, #520]	; (800f198 <_dtoa_r+0x650>)
 800ef90:	2200      	movs	r2, #0
 800ef92:	4640      	mov	r0, r8
 800ef94:	4649      	mov	r1, r9
 800ef96:	f7f1 f9ef 	bl	8000378 <__aeabi_dsub>
 800ef9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ef9e:	4680      	mov	r8, r0
 800efa0:	4689      	mov	r9, r1
 800efa2:	f7f1 fe31 	bl	8000c08 <__aeabi_dcmpgt>
 800efa6:	2800      	cmp	r0, #0
 800efa8:	f040 8296 	bne.w	800f4d8 <_dtoa_r+0x990>
 800efac:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800efb0:	4640      	mov	r0, r8
 800efb2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800efb6:	4649      	mov	r1, r9
 800efb8:	f7f1 fe08 	bl	8000bcc <__aeabi_dcmplt>
 800efbc:	2800      	cmp	r0, #0
 800efbe:	f040 8289 	bne.w	800f4d4 <_dtoa_r+0x98c>
 800efc2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800efc6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800efc8:	2b00      	cmp	r3, #0
 800efca:	f2c0 814e 	blt.w	800f26a <_dtoa_r+0x722>
 800efce:	f1bb 0f0e 	cmp.w	fp, #14
 800efd2:	f300 814a 	bgt.w	800f26a <_dtoa_r+0x722>
 800efd6:	4b6b      	ldr	r3, [pc, #428]	; (800f184 <_dtoa_r+0x63c>)
 800efd8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800efdc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800efe0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	f280 80dc 	bge.w	800f1a0 <_dtoa_r+0x658>
 800efe8:	9b04      	ldr	r3, [sp, #16]
 800efea:	2b00      	cmp	r3, #0
 800efec:	f300 80d8 	bgt.w	800f1a0 <_dtoa_r+0x658>
 800eff0:	f040 826f 	bne.w	800f4d2 <_dtoa_r+0x98a>
 800eff4:	4b68      	ldr	r3, [pc, #416]	; (800f198 <_dtoa_r+0x650>)
 800eff6:	2200      	movs	r2, #0
 800eff8:	4640      	mov	r0, r8
 800effa:	4649      	mov	r1, r9
 800effc:	f7f1 fb74 	bl	80006e8 <__aeabi_dmul>
 800f000:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f004:	f7f1 fdf6 	bl	8000bf4 <__aeabi_dcmpge>
 800f008:	9e04      	ldr	r6, [sp, #16]
 800f00a:	4637      	mov	r7, r6
 800f00c:	2800      	cmp	r0, #0
 800f00e:	f040 8245 	bne.w	800f49c <_dtoa_r+0x954>
 800f012:	9d00      	ldr	r5, [sp, #0]
 800f014:	2331      	movs	r3, #49	; 0x31
 800f016:	f805 3b01 	strb.w	r3, [r5], #1
 800f01a:	f10b 0b01 	add.w	fp, fp, #1
 800f01e:	e241      	b.n	800f4a4 <_dtoa_r+0x95c>
 800f020:	07f2      	lsls	r2, r6, #31
 800f022:	d505      	bpl.n	800f030 <_dtoa_r+0x4e8>
 800f024:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f028:	f7f1 fb5e 	bl	80006e8 <__aeabi_dmul>
 800f02c:	3501      	adds	r5, #1
 800f02e:	2301      	movs	r3, #1
 800f030:	1076      	asrs	r6, r6, #1
 800f032:	3708      	adds	r7, #8
 800f034:	e773      	b.n	800ef1e <_dtoa_r+0x3d6>
 800f036:	2502      	movs	r5, #2
 800f038:	e775      	b.n	800ef26 <_dtoa_r+0x3de>
 800f03a:	9e04      	ldr	r6, [sp, #16]
 800f03c:	465f      	mov	r7, fp
 800f03e:	e792      	b.n	800ef66 <_dtoa_r+0x41e>
 800f040:	9900      	ldr	r1, [sp, #0]
 800f042:	4b50      	ldr	r3, [pc, #320]	; (800f184 <_dtoa_r+0x63c>)
 800f044:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f048:	4431      	add	r1, r6
 800f04a:	9102      	str	r1, [sp, #8]
 800f04c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f04e:	eeb0 9a47 	vmov.f32	s18, s14
 800f052:	eef0 9a67 	vmov.f32	s19, s15
 800f056:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800f05a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f05e:	2900      	cmp	r1, #0
 800f060:	d044      	beq.n	800f0ec <_dtoa_r+0x5a4>
 800f062:	494e      	ldr	r1, [pc, #312]	; (800f19c <_dtoa_r+0x654>)
 800f064:	2000      	movs	r0, #0
 800f066:	f7f1 fc69 	bl	800093c <__aeabi_ddiv>
 800f06a:	ec53 2b19 	vmov	r2, r3, d9
 800f06e:	f7f1 f983 	bl	8000378 <__aeabi_dsub>
 800f072:	9d00      	ldr	r5, [sp, #0]
 800f074:	ec41 0b19 	vmov	d9, r0, r1
 800f078:	4649      	mov	r1, r9
 800f07a:	4640      	mov	r0, r8
 800f07c:	f7f1 fde4 	bl	8000c48 <__aeabi_d2iz>
 800f080:	4606      	mov	r6, r0
 800f082:	f7f1 fac7 	bl	8000614 <__aeabi_i2d>
 800f086:	4602      	mov	r2, r0
 800f088:	460b      	mov	r3, r1
 800f08a:	4640      	mov	r0, r8
 800f08c:	4649      	mov	r1, r9
 800f08e:	f7f1 f973 	bl	8000378 <__aeabi_dsub>
 800f092:	3630      	adds	r6, #48	; 0x30
 800f094:	f805 6b01 	strb.w	r6, [r5], #1
 800f098:	ec53 2b19 	vmov	r2, r3, d9
 800f09c:	4680      	mov	r8, r0
 800f09e:	4689      	mov	r9, r1
 800f0a0:	f7f1 fd94 	bl	8000bcc <__aeabi_dcmplt>
 800f0a4:	2800      	cmp	r0, #0
 800f0a6:	d164      	bne.n	800f172 <_dtoa_r+0x62a>
 800f0a8:	4642      	mov	r2, r8
 800f0aa:	464b      	mov	r3, r9
 800f0ac:	4937      	ldr	r1, [pc, #220]	; (800f18c <_dtoa_r+0x644>)
 800f0ae:	2000      	movs	r0, #0
 800f0b0:	f7f1 f962 	bl	8000378 <__aeabi_dsub>
 800f0b4:	ec53 2b19 	vmov	r2, r3, d9
 800f0b8:	f7f1 fd88 	bl	8000bcc <__aeabi_dcmplt>
 800f0bc:	2800      	cmp	r0, #0
 800f0be:	f040 80b6 	bne.w	800f22e <_dtoa_r+0x6e6>
 800f0c2:	9b02      	ldr	r3, [sp, #8]
 800f0c4:	429d      	cmp	r5, r3
 800f0c6:	f43f af7c 	beq.w	800efc2 <_dtoa_r+0x47a>
 800f0ca:	4b31      	ldr	r3, [pc, #196]	; (800f190 <_dtoa_r+0x648>)
 800f0cc:	ec51 0b19 	vmov	r0, r1, d9
 800f0d0:	2200      	movs	r2, #0
 800f0d2:	f7f1 fb09 	bl	80006e8 <__aeabi_dmul>
 800f0d6:	4b2e      	ldr	r3, [pc, #184]	; (800f190 <_dtoa_r+0x648>)
 800f0d8:	ec41 0b19 	vmov	d9, r0, r1
 800f0dc:	2200      	movs	r2, #0
 800f0de:	4640      	mov	r0, r8
 800f0e0:	4649      	mov	r1, r9
 800f0e2:	f7f1 fb01 	bl	80006e8 <__aeabi_dmul>
 800f0e6:	4680      	mov	r8, r0
 800f0e8:	4689      	mov	r9, r1
 800f0ea:	e7c5      	b.n	800f078 <_dtoa_r+0x530>
 800f0ec:	ec51 0b17 	vmov	r0, r1, d7
 800f0f0:	f7f1 fafa 	bl	80006e8 <__aeabi_dmul>
 800f0f4:	9b02      	ldr	r3, [sp, #8]
 800f0f6:	9d00      	ldr	r5, [sp, #0]
 800f0f8:	930f      	str	r3, [sp, #60]	; 0x3c
 800f0fa:	ec41 0b19 	vmov	d9, r0, r1
 800f0fe:	4649      	mov	r1, r9
 800f100:	4640      	mov	r0, r8
 800f102:	f7f1 fda1 	bl	8000c48 <__aeabi_d2iz>
 800f106:	4606      	mov	r6, r0
 800f108:	f7f1 fa84 	bl	8000614 <__aeabi_i2d>
 800f10c:	3630      	adds	r6, #48	; 0x30
 800f10e:	4602      	mov	r2, r0
 800f110:	460b      	mov	r3, r1
 800f112:	4640      	mov	r0, r8
 800f114:	4649      	mov	r1, r9
 800f116:	f7f1 f92f 	bl	8000378 <__aeabi_dsub>
 800f11a:	f805 6b01 	strb.w	r6, [r5], #1
 800f11e:	9b02      	ldr	r3, [sp, #8]
 800f120:	429d      	cmp	r5, r3
 800f122:	4680      	mov	r8, r0
 800f124:	4689      	mov	r9, r1
 800f126:	f04f 0200 	mov.w	r2, #0
 800f12a:	d124      	bne.n	800f176 <_dtoa_r+0x62e>
 800f12c:	4b1b      	ldr	r3, [pc, #108]	; (800f19c <_dtoa_r+0x654>)
 800f12e:	ec51 0b19 	vmov	r0, r1, d9
 800f132:	f7f1 f923 	bl	800037c <__adddf3>
 800f136:	4602      	mov	r2, r0
 800f138:	460b      	mov	r3, r1
 800f13a:	4640      	mov	r0, r8
 800f13c:	4649      	mov	r1, r9
 800f13e:	f7f1 fd63 	bl	8000c08 <__aeabi_dcmpgt>
 800f142:	2800      	cmp	r0, #0
 800f144:	d173      	bne.n	800f22e <_dtoa_r+0x6e6>
 800f146:	ec53 2b19 	vmov	r2, r3, d9
 800f14a:	4914      	ldr	r1, [pc, #80]	; (800f19c <_dtoa_r+0x654>)
 800f14c:	2000      	movs	r0, #0
 800f14e:	f7f1 f913 	bl	8000378 <__aeabi_dsub>
 800f152:	4602      	mov	r2, r0
 800f154:	460b      	mov	r3, r1
 800f156:	4640      	mov	r0, r8
 800f158:	4649      	mov	r1, r9
 800f15a:	f7f1 fd37 	bl	8000bcc <__aeabi_dcmplt>
 800f15e:	2800      	cmp	r0, #0
 800f160:	f43f af2f 	beq.w	800efc2 <_dtoa_r+0x47a>
 800f164:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800f166:	1e6b      	subs	r3, r5, #1
 800f168:	930f      	str	r3, [sp, #60]	; 0x3c
 800f16a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f16e:	2b30      	cmp	r3, #48	; 0x30
 800f170:	d0f8      	beq.n	800f164 <_dtoa_r+0x61c>
 800f172:	46bb      	mov	fp, r7
 800f174:	e04a      	b.n	800f20c <_dtoa_r+0x6c4>
 800f176:	4b06      	ldr	r3, [pc, #24]	; (800f190 <_dtoa_r+0x648>)
 800f178:	f7f1 fab6 	bl	80006e8 <__aeabi_dmul>
 800f17c:	4680      	mov	r8, r0
 800f17e:	4689      	mov	r9, r1
 800f180:	e7bd      	b.n	800f0fe <_dtoa_r+0x5b6>
 800f182:	bf00      	nop
 800f184:	080186e8 	.word	0x080186e8
 800f188:	080186c0 	.word	0x080186c0
 800f18c:	3ff00000 	.word	0x3ff00000
 800f190:	40240000 	.word	0x40240000
 800f194:	401c0000 	.word	0x401c0000
 800f198:	40140000 	.word	0x40140000
 800f19c:	3fe00000 	.word	0x3fe00000
 800f1a0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f1a4:	9d00      	ldr	r5, [sp, #0]
 800f1a6:	4642      	mov	r2, r8
 800f1a8:	464b      	mov	r3, r9
 800f1aa:	4630      	mov	r0, r6
 800f1ac:	4639      	mov	r1, r7
 800f1ae:	f7f1 fbc5 	bl	800093c <__aeabi_ddiv>
 800f1b2:	f7f1 fd49 	bl	8000c48 <__aeabi_d2iz>
 800f1b6:	9001      	str	r0, [sp, #4]
 800f1b8:	f7f1 fa2c 	bl	8000614 <__aeabi_i2d>
 800f1bc:	4642      	mov	r2, r8
 800f1be:	464b      	mov	r3, r9
 800f1c0:	f7f1 fa92 	bl	80006e8 <__aeabi_dmul>
 800f1c4:	4602      	mov	r2, r0
 800f1c6:	460b      	mov	r3, r1
 800f1c8:	4630      	mov	r0, r6
 800f1ca:	4639      	mov	r1, r7
 800f1cc:	f7f1 f8d4 	bl	8000378 <__aeabi_dsub>
 800f1d0:	9e01      	ldr	r6, [sp, #4]
 800f1d2:	9f04      	ldr	r7, [sp, #16]
 800f1d4:	3630      	adds	r6, #48	; 0x30
 800f1d6:	f805 6b01 	strb.w	r6, [r5], #1
 800f1da:	9e00      	ldr	r6, [sp, #0]
 800f1dc:	1bae      	subs	r6, r5, r6
 800f1de:	42b7      	cmp	r7, r6
 800f1e0:	4602      	mov	r2, r0
 800f1e2:	460b      	mov	r3, r1
 800f1e4:	d134      	bne.n	800f250 <_dtoa_r+0x708>
 800f1e6:	f7f1 f8c9 	bl	800037c <__adddf3>
 800f1ea:	4642      	mov	r2, r8
 800f1ec:	464b      	mov	r3, r9
 800f1ee:	4606      	mov	r6, r0
 800f1f0:	460f      	mov	r7, r1
 800f1f2:	f7f1 fd09 	bl	8000c08 <__aeabi_dcmpgt>
 800f1f6:	b9c8      	cbnz	r0, 800f22c <_dtoa_r+0x6e4>
 800f1f8:	4642      	mov	r2, r8
 800f1fa:	464b      	mov	r3, r9
 800f1fc:	4630      	mov	r0, r6
 800f1fe:	4639      	mov	r1, r7
 800f200:	f7f1 fcda 	bl	8000bb8 <__aeabi_dcmpeq>
 800f204:	b110      	cbz	r0, 800f20c <_dtoa_r+0x6c4>
 800f206:	9b01      	ldr	r3, [sp, #4]
 800f208:	07db      	lsls	r3, r3, #31
 800f20a:	d40f      	bmi.n	800f22c <_dtoa_r+0x6e4>
 800f20c:	4651      	mov	r1, sl
 800f20e:	4620      	mov	r0, r4
 800f210:	f000 fb18 	bl	800f844 <_Bfree>
 800f214:	2300      	movs	r3, #0
 800f216:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f218:	702b      	strb	r3, [r5, #0]
 800f21a:	f10b 0301 	add.w	r3, fp, #1
 800f21e:	6013      	str	r3, [r2, #0]
 800f220:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f222:	2b00      	cmp	r3, #0
 800f224:	f43f ace2 	beq.w	800ebec <_dtoa_r+0xa4>
 800f228:	601d      	str	r5, [r3, #0]
 800f22a:	e4df      	b.n	800ebec <_dtoa_r+0xa4>
 800f22c:	465f      	mov	r7, fp
 800f22e:	462b      	mov	r3, r5
 800f230:	461d      	mov	r5, r3
 800f232:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f236:	2a39      	cmp	r2, #57	; 0x39
 800f238:	d106      	bne.n	800f248 <_dtoa_r+0x700>
 800f23a:	9a00      	ldr	r2, [sp, #0]
 800f23c:	429a      	cmp	r2, r3
 800f23e:	d1f7      	bne.n	800f230 <_dtoa_r+0x6e8>
 800f240:	9900      	ldr	r1, [sp, #0]
 800f242:	2230      	movs	r2, #48	; 0x30
 800f244:	3701      	adds	r7, #1
 800f246:	700a      	strb	r2, [r1, #0]
 800f248:	781a      	ldrb	r2, [r3, #0]
 800f24a:	3201      	adds	r2, #1
 800f24c:	701a      	strb	r2, [r3, #0]
 800f24e:	e790      	b.n	800f172 <_dtoa_r+0x62a>
 800f250:	4ba3      	ldr	r3, [pc, #652]	; (800f4e0 <_dtoa_r+0x998>)
 800f252:	2200      	movs	r2, #0
 800f254:	f7f1 fa48 	bl	80006e8 <__aeabi_dmul>
 800f258:	2200      	movs	r2, #0
 800f25a:	2300      	movs	r3, #0
 800f25c:	4606      	mov	r6, r0
 800f25e:	460f      	mov	r7, r1
 800f260:	f7f1 fcaa 	bl	8000bb8 <__aeabi_dcmpeq>
 800f264:	2800      	cmp	r0, #0
 800f266:	d09e      	beq.n	800f1a6 <_dtoa_r+0x65e>
 800f268:	e7d0      	b.n	800f20c <_dtoa_r+0x6c4>
 800f26a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f26c:	2a00      	cmp	r2, #0
 800f26e:	f000 80ca 	beq.w	800f406 <_dtoa_r+0x8be>
 800f272:	9a07      	ldr	r2, [sp, #28]
 800f274:	2a01      	cmp	r2, #1
 800f276:	f300 80ad 	bgt.w	800f3d4 <_dtoa_r+0x88c>
 800f27a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f27c:	2a00      	cmp	r2, #0
 800f27e:	f000 80a5 	beq.w	800f3cc <_dtoa_r+0x884>
 800f282:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f286:	9e08      	ldr	r6, [sp, #32]
 800f288:	9d05      	ldr	r5, [sp, #20]
 800f28a:	9a05      	ldr	r2, [sp, #20]
 800f28c:	441a      	add	r2, r3
 800f28e:	9205      	str	r2, [sp, #20]
 800f290:	9a06      	ldr	r2, [sp, #24]
 800f292:	2101      	movs	r1, #1
 800f294:	441a      	add	r2, r3
 800f296:	4620      	mov	r0, r4
 800f298:	9206      	str	r2, [sp, #24]
 800f29a:	f000 fb89 	bl	800f9b0 <__i2b>
 800f29e:	4607      	mov	r7, r0
 800f2a0:	b165      	cbz	r5, 800f2bc <_dtoa_r+0x774>
 800f2a2:	9b06      	ldr	r3, [sp, #24]
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	dd09      	ble.n	800f2bc <_dtoa_r+0x774>
 800f2a8:	42ab      	cmp	r3, r5
 800f2aa:	9a05      	ldr	r2, [sp, #20]
 800f2ac:	bfa8      	it	ge
 800f2ae:	462b      	movge	r3, r5
 800f2b0:	1ad2      	subs	r2, r2, r3
 800f2b2:	9205      	str	r2, [sp, #20]
 800f2b4:	9a06      	ldr	r2, [sp, #24]
 800f2b6:	1aed      	subs	r5, r5, r3
 800f2b8:	1ad3      	subs	r3, r2, r3
 800f2ba:	9306      	str	r3, [sp, #24]
 800f2bc:	9b08      	ldr	r3, [sp, #32]
 800f2be:	b1f3      	cbz	r3, 800f2fe <_dtoa_r+0x7b6>
 800f2c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	f000 80a3 	beq.w	800f40e <_dtoa_r+0x8c6>
 800f2c8:	2e00      	cmp	r6, #0
 800f2ca:	dd10      	ble.n	800f2ee <_dtoa_r+0x7a6>
 800f2cc:	4639      	mov	r1, r7
 800f2ce:	4632      	mov	r2, r6
 800f2d0:	4620      	mov	r0, r4
 800f2d2:	f000 fc2d 	bl	800fb30 <__pow5mult>
 800f2d6:	4652      	mov	r2, sl
 800f2d8:	4601      	mov	r1, r0
 800f2da:	4607      	mov	r7, r0
 800f2dc:	4620      	mov	r0, r4
 800f2de:	f000 fb7d 	bl	800f9dc <__multiply>
 800f2e2:	4651      	mov	r1, sl
 800f2e4:	4680      	mov	r8, r0
 800f2e6:	4620      	mov	r0, r4
 800f2e8:	f000 faac 	bl	800f844 <_Bfree>
 800f2ec:	46c2      	mov	sl, r8
 800f2ee:	9b08      	ldr	r3, [sp, #32]
 800f2f0:	1b9a      	subs	r2, r3, r6
 800f2f2:	d004      	beq.n	800f2fe <_dtoa_r+0x7b6>
 800f2f4:	4651      	mov	r1, sl
 800f2f6:	4620      	mov	r0, r4
 800f2f8:	f000 fc1a 	bl	800fb30 <__pow5mult>
 800f2fc:	4682      	mov	sl, r0
 800f2fe:	2101      	movs	r1, #1
 800f300:	4620      	mov	r0, r4
 800f302:	f000 fb55 	bl	800f9b0 <__i2b>
 800f306:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f308:	2b00      	cmp	r3, #0
 800f30a:	4606      	mov	r6, r0
 800f30c:	f340 8081 	ble.w	800f412 <_dtoa_r+0x8ca>
 800f310:	461a      	mov	r2, r3
 800f312:	4601      	mov	r1, r0
 800f314:	4620      	mov	r0, r4
 800f316:	f000 fc0b 	bl	800fb30 <__pow5mult>
 800f31a:	9b07      	ldr	r3, [sp, #28]
 800f31c:	2b01      	cmp	r3, #1
 800f31e:	4606      	mov	r6, r0
 800f320:	dd7a      	ble.n	800f418 <_dtoa_r+0x8d0>
 800f322:	f04f 0800 	mov.w	r8, #0
 800f326:	6933      	ldr	r3, [r6, #16]
 800f328:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f32c:	6918      	ldr	r0, [r3, #16]
 800f32e:	f000 faf1 	bl	800f914 <__hi0bits>
 800f332:	f1c0 0020 	rsb	r0, r0, #32
 800f336:	9b06      	ldr	r3, [sp, #24]
 800f338:	4418      	add	r0, r3
 800f33a:	f010 001f 	ands.w	r0, r0, #31
 800f33e:	f000 8094 	beq.w	800f46a <_dtoa_r+0x922>
 800f342:	f1c0 0320 	rsb	r3, r0, #32
 800f346:	2b04      	cmp	r3, #4
 800f348:	f340 8085 	ble.w	800f456 <_dtoa_r+0x90e>
 800f34c:	9b05      	ldr	r3, [sp, #20]
 800f34e:	f1c0 001c 	rsb	r0, r0, #28
 800f352:	4403      	add	r3, r0
 800f354:	9305      	str	r3, [sp, #20]
 800f356:	9b06      	ldr	r3, [sp, #24]
 800f358:	4403      	add	r3, r0
 800f35a:	4405      	add	r5, r0
 800f35c:	9306      	str	r3, [sp, #24]
 800f35e:	9b05      	ldr	r3, [sp, #20]
 800f360:	2b00      	cmp	r3, #0
 800f362:	dd05      	ble.n	800f370 <_dtoa_r+0x828>
 800f364:	4651      	mov	r1, sl
 800f366:	461a      	mov	r2, r3
 800f368:	4620      	mov	r0, r4
 800f36a:	f000 fc3b 	bl	800fbe4 <__lshift>
 800f36e:	4682      	mov	sl, r0
 800f370:	9b06      	ldr	r3, [sp, #24]
 800f372:	2b00      	cmp	r3, #0
 800f374:	dd05      	ble.n	800f382 <_dtoa_r+0x83a>
 800f376:	4631      	mov	r1, r6
 800f378:	461a      	mov	r2, r3
 800f37a:	4620      	mov	r0, r4
 800f37c:	f000 fc32 	bl	800fbe4 <__lshift>
 800f380:	4606      	mov	r6, r0
 800f382:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f384:	2b00      	cmp	r3, #0
 800f386:	d072      	beq.n	800f46e <_dtoa_r+0x926>
 800f388:	4631      	mov	r1, r6
 800f38a:	4650      	mov	r0, sl
 800f38c:	f000 fc96 	bl	800fcbc <__mcmp>
 800f390:	2800      	cmp	r0, #0
 800f392:	da6c      	bge.n	800f46e <_dtoa_r+0x926>
 800f394:	2300      	movs	r3, #0
 800f396:	4651      	mov	r1, sl
 800f398:	220a      	movs	r2, #10
 800f39a:	4620      	mov	r0, r4
 800f39c:	f000 fa74 	bl	800f888 <__multadd>
 800f3a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f3a2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f3a6:	4682      	mov	sl, r0
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	f000 81b0 	beq.w	800f70e <_dtoa_r+0xbc6>
 800f3ae:	2300      	movs	r3, #0
 800f3b0:	4639      	mov	r1, r7
 800f3b2:	220a      	movs	r2, #10
 800f3b4:	4620      	mov	r0, r4
 800f3b6:	f000 fa67 	bl	800f888 <__multadd>
 800f3ba:	9b01      	ldr	r3, [sp, #4]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	4607      	mov	r7, r0
 800f3c0:	f300 8096 	bgt.w	800f4f0 <_dtoa_r+0x9a8>
 800f3c4:	9b07      	ldr	r3, [sp, #28]
 800f3c6:	2b02      	cmp	r3, #2
 800f3c8:	dc59      	bgt.n	800f47e <_dtoa_r+0x936>
 800f3ca:	e091      	b.n	800f4f0 <_dtoa_r+0x9a8>
 800f3cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f3ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f3d2:	e758      	b.n	800f286 <_dtoa_r+0x73e>
 800f3d4:	9b04      	ldr	r3, [sp, #16]
 800f3d6:	1e5e      	subs	r6, r3, #1
 800f3d8:	9b08      	ldr	r3, [sp, #32]
 800f3da:	42b3      	cmp	r3, r6
 800f3dc:	bfbf      	itttt	lt
 800f3de:	9b08      	ldrlt	r3, [sp, #32]
 800f3e0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800f3e2:	9608      	strlt	r6, [sp, #32]
 800f3e4:	1af3      	sublt	r3, r6, r3
 800f3e6:	bfb4      	ite	lt
 800f3e8:	18d2      	addlt	r2, r2, r3
 800f3ea:	1b9e      	subge	r6, r3, r6
 800f3ec:	9b04      	ldr	r3, [sp, #16]
 800f3ee:	bfbc      	itt	lt
 800f3f0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800f3f2:	2600      	movlt	r6, #0
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	bfb7      	itett	lt
 800f3f8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800f3fc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800f400:	1a9d      	sublt	r5, r3, r2
 800f402:	2300      	movlt	r3, #0
 800f404:	e741      	b.n	800f28a <_dtoa_r+0x742>
 800f406:	9e08      	ldr	r6, [sp, #32]
 800f408:	9d05      	ldr	r5, [sp, #20]
 800f40a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800f40c:	e748      	b.n	800f2a0 <_dtoa_r+0x758>
 800f40e:	9a08      	ldr	r2, [sp, #32]
 800f410:	e770      	b.n	800f2f4 <_dtoa_r+0x7ac>
 800f412:	9b07      	ldr	r3, [sp, #28]
 800f414:	2b01      	cmp	r3, #1
 800f416:	dc19      	bgt.n	800f44c <_dtoa_r+0x904>
 800f418:	9b02      	ldr	r3, [sp, #8]
 800f41a:	b9bb      	cbnz	r3, 800f44c <_dtoa_r+0x904>
 800f41c:	9b03      	ldr	r3, [sp, #12]
 800f41e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f422:	b99b      	cbnz	r3, 800f44c <_dtoa_r+0x904>
 800f424:	9b03      	ldr	r3, [sp, #12]
 800f426:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f42a:	0d1b      	lsrs	r3, r3, #20
 800f42c:	051b      	lsls	r3, r3, #20
 800f42e:	b183      	cbz	r3, 800f452 <_dtoa_r+0x90a>
 800f430:	9b05      	ldr	r3, [sp, #20]
 800f432:	3301      	adds	r3, #1
 800f434:	9305      	str	r3, [sp, #20]
 800f436:	9b06      	ldr	r3, [sp, #24]
 800f438:	3301      	adds	r3, #1
 800f43a:	9306      	str	r3, [sp, #24]
 800f43c:	f04f 0801 	mov.w	r8, #1
 800f440:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f442:	2b00      	cmp	r3, #0
 800f444:	f47f af6f 	bne.w	800f326 <_dtoa_r+0x7de>
 800f448:	2001      	movs	r0, #1
 800f44a:	e774      	b.n	800f336 <_dtoa_r+0x7ee>
 800f44c:	f04f 0800 	mov.w	r8, #0
 800f450:	e7f6      	b.n	800f440 <_dtoa_r+0x8f8>
 800f452:	4698      	mov	r8, r3
 800f454:	e7f4      	b.n	800f440 <_dtoa_r+0x8f8>
 800f456:	d082      	beq.n	800f35e <_dtoa_r+0x816>
 800f458:	9a05      	ldr	r2, [sp, #20]
 800f45a:	331c      	adds	r3, #28
 800f45c:	441a      	add	r2, r3
 800f45e:	9205      	str	r2, [sp, #20]
 800f460:	9a06      	ldr	r2, [sp, #24]
 800f462:	441a      	add	r2, r3
 800f464:	441d      	add	r5, r3
 800f466:	9206      	str	r2, [sp, #24]
 800f468:	e779      	b.n	800f35e <_dtoa_r+0x816>
 800f46a:	4603      	mov	r3, r0
 800f46c:	e7f4      	b.n	800f458 <_dtoa_r+0x910>
 800f46e:	9b04      	ldr	r3, [sp, #16]
 800f470:	2b00      	cmp	r3, #0
 800f472:	dc37      	bgt.n	800f4e4 <_dtoa_r+0x99c>
 800f474:	9b07      	ldr	r3, [sp, #28]
 800f476:	2b02      	cmp	r3, #2
 800f478:	dd34      	ble.n	800f4e4 <_dtoa_r+0x99c>
 800f47a:	9b04      	ldr	r3, [sp, #16]
 800f47c:	9301      	str	r3, [sp, #4]
 800f47e:	9b01      	ldr	r3, [sp, #4]
 800f480:	b963      	cbnz	r3, 800f49c <_dtoa_r+0x954>
 800f482:	4631      	mov	r1, r6
 800f484:	2205      	movs	r2, #5
 800f486:	4620      	mov	r0, r4
 800f488:	f000 f9fe 	bl	800f888 <__multadd>
 800f48c:	4601      	mov	r1, r0
 800f48e:	4606      	mov	r6, r0
 800f490:	4650      	mov	r0, sl
 800f492:	f000 fc13 	bl	800fcbc <__mcmp>
 800f496:	2800      	cmp	r0, #0
 800f498:	f73f adbb 	bgt.w	800f012 <_dtoa_r+0x4ca>
 800f49c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f49e:	9d00      	ldr	r5, [sp, #0]
 800f4a0:	ea6f 0b03 	mvn.w	fp, r3
 800f4a4:	f04f 0800 	mov.w	r8, #0
 800f4a8:	4631      	mov	r1, r6
 800f4aa:	4620      	mov	r0, r4
 800f4ac:	f000 f9ca 	bl	800f844 <_Bfree>
 800f4b0:	2f00      	cmp	r7, #0
 800f4b2:	f43f aeab 	beq.w	800f20c <_dtoa_r+0x6c4>
 800f4b6:	f1b8 0f00 	cmp.w	r8, #0
 800f4ba:	d005      	beq.n	800f4c8 <_dtoa_r+0x980>
 800f4bc:	45b8      	cmp	r8, r7
 800f4be:	d003      	beq.n	800f4c8 <_dtoa_r+0x980>
 800f4c0:	4641      	mov	r1, r8
 800f4c2:	4620      	mov	r0, r4
 800f4c4:	f000 f9be 	bl	800f844 <_Bfree>
 800f4c8:	4639      	mov	r1, r7
 800f4ca:	4620      	mov	r0, r4
 800f4cc:	f000 f9ba 	bl	800f844 <_Bfree>
 800f4d0:	e69c      	b.n	800f20c <_dtoa_r+0x6c4>
 800f4d2:	2600      	movs	r6, #0
 800f4d4:	4637      	mov	r7, r6
 800f4d6:	e7e1      	b.n	800f49c <_dtoa_r+0x954>
 800f4d8:	46bb      	mov	fp, r7
 800f4da:	4637      	mov	r7, r6
 800f4dc:	e599      	b.n	800f012 <_dtoa_r+0x4ca>
 800f4de:	bf00      	nop
 800f4e0:	40240000 	.word	0x40240000
 800f4e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	f000 80c8 	beq.w	800f67c <_dtoa_r+0xb34>
 800f4ec:	9b04      	ldr	r3, [sp, #16]
 800f4ee:	9301      	str	r3, [sp, #4]
 800f4f0:	2d00      	cmp	r5, #0
 800f4f2:	dd05      	ble.n	800f500 <_dtoa_r+0x9b8>
 800f4f4:	4639      	mov	r1, r7
 800f4f6:	462a      	mov	r2, r5
 800f4f8:	4620      	mov	r0, r4
 800f4fa:	f000 fb73 	bl	800fbe4 <__lshift>
 800f4fe:	4607      	mov	r7, r0
 800f500:	f1b8 0f00 	cmp.w	r8, #0
 800f504:	d05b      	beq.n	800f5be <_dtoa_r+0xa76>
 800f506:	6879      	ldr	r1, [r7, #4]
 800f508:	4620      	mov	r0, r4
 800f50a:	f000 f95b 	bl	800f7c4 <_Balloc>
 800f50e:	4605      	mov	r5, r0
 800f510:	b928      	cbnz	r0, 800f51e <_dtoa_r+0x9d6>
 800f512:	4b83      	ldr	r3, [pc, #524]	; (800f720 <_dtoa_r+0xbd8>)
 800f514:	4602      	mov	r2, r0
 800f516:	f240 21ef 	movw	r1, #751	; 0x2ef
 800f51a:	f7ff bb2e 	b.w	800eb7a <_dtoa_r+0x32>
 800f51e:	693a      	ldr	r2, [r7, #16]
 800f520:	3202      	adds	r2, #2
 800f522:	0092      	lsls	r2, r2, #2
 800f524:	f107 010c 	add.w	r1, r7, #12
 800f528:	300c      	adds	r0, #12
 800f52a:	f7ff fa77 	bl	800ea1c <memcpy>
 800f52e:	2201      	movs	r2, #1
 800f530:	4629      	mov	r1, r5
 800f532:	4620      	mov	r0, r4
 800f534:	f000 fb56 	bl	800fbe4 <__lshift>
 800f538:	9b00      	ldr	r3, [sp, #0]
 800f53a:	3301      	adds	r3, #1
 800f53c:	9304      	str	r3, [sp, #16]
 800f53e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f542:	4413      	add	r3, r2
 800f544:	9308      	str	r3, [sp, #32]
 800f546:	9b02      	ldr	r3, [sp, #8]
 800f548:	f003 0301 	and.w	r3, r3, #1
 800f54c:	46b8      	mov	r8, r7
 800f54e:	9306      	str	r3, [sp, #24]
 800f550:	4607      	mov	r7, r0
 800f552:	9b04      	ldr	r3, [sp, #16]
 800f554:	4631      	mov	r1, r6
 800f556:	3b01      	subs	r3, #1
 800f558:	4650      	mov	r0, sl
 800f55a:	9301      	str	r3, [sp, #4]
 800f55c:	f7ff fa6c 	bl	800ea38 <quorem>
 800f560:	4641      	mov	r1, r8
 800f562:	9002      	str	r0, [sp, #8]
 800f564:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800f568:	4650      	mov	r0, sl
 800f56a:	f000 fba7 	bl	800fcbc <__mcmp>
 800f56e:	463a      	mov	r2, r7
 800f570:	9005      	str	r0, [sp, #20]
 800f572:	4631      	mov	r1, r6
 800f574:	4620      	mov	r0, r4
 800f576:	f000 fbbd 	bl	800fcf4 <__mdiff>
 800f57a:	68c2      	ldr	r2, [r0, #12]
 800f57c:	4605      	mov	r5, r0
 800f57e:	bb02      	cbnz	r2, 800f5c2 <_dtoa_r+0xa7a>
 800f580:	4601      	mov	r1, r0
 800f582:	4650      	mov	r0, sl
 800f584:	f000 fb9a 	bl	800fcbc <__mcmp>
 800f588:	4602      	mov	r2, r0
 800f58a:	4629      	mov	r1, r5
 800f58c:	4620      	mov	r0, r4
 800f58e:	9209      	str	r2, [sp, #36]	; 0x24
 800f590:	f000 f958 	bl	800f844 <_Bfree>
 800f594:	9b07      	ldr	r3, [sp, #28]
 800f596:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f598:	9d04      	ldr	r5, [sp, #16]
 800f59a:	ea43 0102 	orr.w	r1, r3, r2
 800f59e:	9b06      	ldr	r3, [sp, #24]
 800f5a0:	4319      	orrs	r1, r3
 800f5a2:	d110      	bne.n	800f5c6 <_dtoa_r+0xa7e>
 800f5a4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f5a8:	d029      	beq.n	800f5fe <_dtoa_r+0xab6>
 800f5aa:	9b05      	ldr	r3, [sp, #20]
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	dd02      	ble.n	800f5b6 <_dtoa_r+0xa6e>
 800f5b0:	9b02      	ldr	r3, [sp, #8]
 800f5b2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800f5b6:	9b01      	ldr	r3, [sp, #4]
 800f5b8:	f883 9000 	strb.w	r9, [r3]
 800f5bc:	e774      	b.n	800f4a8 <_dtoa_r+0x960>
 800f5be:	4638      	mov	r0, r7
 800f5c0:	e7ba      	b.n	800f538 <_dtoa_r+0x9f0>
 800f5c2:	2201      	movs	r2, #1
 800f5c4:	e7e1      	b.n	800f58a <_dtoa_r+0xa42>
 800f5c6:	9b05      	ldr	r3, [sp, #20]
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	db04      	blt.n	800f5d6 <_dtoa_r+0xa8e>
 800f5cc:	9907      	ldr	r1, [sp, #28]
 800f5ce:	430b      	orrs	r3, r1
 800f5d0:	9906      	ldr	r1, [sp, #24]
 800f5d2:	430b      	orrs	r3, r1
 800f5d4:	d120      	bne.n	800f618 <_dtoa_r+0xad0>
 800f5d6:	2a00      	cmp	r2, #0
 800f5d8:	dded      	ble.n	800f5b6 <_dtoa_r+0xa6e>
 800f5da:	4651      	mov	r1, sl
 800f5dc:	2201      	movs	r2, #1
 800f5de:	4620      	mov	r0, r4
 800f5e0:	f000 fb00 	bl	800fbe4 <__lshift>
 800f5e4:	4631      	mov	r1, r6
 800f5e6:	4682      	mov	sl, r0
 800f5e8:	f000 fb68 	bl	800fcbc <__mcmp>
 800f5ec:	2800      	cmp	r0, #0
 800f5ee:	dc03      	bgt.n	800f5f8 <_dtoa_r+0xab0>
 800f5f0:	d1e1      	bne.n	800f5b6 <_dtoa_r+0xa6e>
 800f5f2:	f019 0f01 	tst.w	r9, #1
 800f5f6:	d0de      	beq.n	800f5b6 <_dtoa_r+0xa6e>
 800f5f8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f5fc:	d1d8      	bne.n	800f5b0 <_dtoa_r+0xa68>
 800f5fe:	9a01      	ldr	r2, [sp, #4]
 800f600:	2339      	movs	r3, #57	; 0x39
 800f602:	7013      	strb	r3, [r2, #0]
 800f604:	462b      	mov	r3, r5
 800f606:	461d      	mov	r5, r3
 800f608:	3b01      	subs	r3, #1
 800f60a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f60e:	2a39      	cmp	r2, #57	; 0x39
 800f610:	d06c      	beq.n	800f6ec <_dtoa_r+0xba4>
 800f612:	3201      	adds	r2, #1
 800f614:	701a      	strb	r2, [r3, #0]
 800f616:	e747      	b.n	800f4a8 <_dtoa_r+0x960>
 800f618:	2a00      	cmp	r2, #0
 800f61a:	dd07      	ble.n	800f62c <_dtoa_r+0xae4>
 800f61c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f620:	d0ed      	beq.n	800f5fe <_dtoa_r+0xab6>
 800f622:	9a01      	ldr	r2, [sp, #4]
 800f624:	f109 0301 	add.w	r3, r9, #1
 800f628:	7013      	strb	r3, [r2, #0]
 800f62a:	e73d      	b.n	800f4a8 <_dtoa_r+0x960>
 800f62c:	9b04      	ldr	r3, [sp, #16]
 800f62e:	9a08      	ldr	r2, [sp, #32]
 800f630:	f803 9c01 	strb.w	r9, [r3, #-1]
 800f634:	4293      	cmp	r3, r2
 800f636:	d043      	beq.n	800f6c0 <_dtoa_r+0xb78>
 800f638:	4651      	mov	r1, sl
 800f63a:	2300      	movs	r3, #0
 800f63c:	220a      	movs	r2, #10
 800f63e:	4620      	mov	r0, r4
 800f640:	f000 f922 	bl	800f888 <__multadd>
 800f644:	45b8      	cmp	r8, r7
 800f646:	4682      	mov	sl, r0
 800f648:	f04f 0300 	mov.w	r3, #0
 800f64c:	f04f 020a 	mov.w	r2, #10
 800f650:	4641      	mov	r1, r8
 800f652:	4620      	mov	r0, r4
 800f654:	d107      	bne.n	800f666 <_dtoa_r+0xb1e>
 800f656:	f000 f917 	bl	800f888 <__multadd>
 800f65a:	4680      	mov	r8, r0
 800f65c:	4607      	mov	r7, r0
 800f65e:	9b04      	ldr	r3, [sp, #16]
 800f660:	3301      	adds	r3, #1
 800f662:	9304      	str	r3, [sp, #16]
 800f664:	e775      	b.n	800f552 <_dtoa_r+0xa0a>
 800f666:	f000 f90f 	bl	800f888 <__multadd>
 800f66a:	4639      	mov	r1, r7
 800f66c:	4680      	mov	r8, r0
 800f66e:	2300      	movs	r3, #0
 800f670:	220a      	movs	r2, #10
 800f672:	4620      	mov	r0, r4
 800f674:	f000 f908 	bl	800f888 <__multadd>
 800f678:	4607      	mov	r7, r0
 800f67a:	e7f0      	b.n	800f65e <_dtoa_r+0xb16>
 800f67c:	9b04      	ldr	r3, [sp, #16]
 800f67e:	9301      	str	r3, [sp, #4]
 800f680:	9d00      	ldr	r5, [sp, #0]
 800f682:	4631      	mov	r1, r6
 800f684:	4650      	mov	r0, sl
 800f686:	f7ff f9d7 	bl	800ea38 <quorem>
 800f68a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800f68e:	9b00      	ldr	r3, [sp, #0]
 800f690:	f805 9b01 	strb.w	r9, [r5], #1
 800f694:	1aea      	subs	r2, r5, r3
 800f696:	9b01      	ldr	r3, [sp, #4]
 800f698:	4293      	cmp	r3, r2
 800f69a:	dd07      	ble.n	800f6ac <_dtoa_r+0xb64>
 800f69c:	4651      	mov	r1, sl
 800f69e:	2300      	movs	r3, #0
 800f6a0:	220a      	movs	r2, #10
 800f6a2:	4620      	mov	r0, r4
 800f6a4:	f000 f8f0 	bl	800f888 <__multadd>
 800f6a8:	4682      	mov	sl, r0
 800f6aa:	e7ea      	b.n	800f682 <_dtoa_r+0xb3a>
 800f6ac:	9b01      	ldr	r3, [sp, #4]
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	bfc8      	it	gt
 800f6b2:	461d      	movgt	r5, r3
 800f6b4:	9b00      	ldr	r3, [sp, #0]
 800f6b6:	bfd8      	it	le
 800f6b8:	2501      	movle	r5, #1
 800f6ba:	441d      	add	r5, r3
 800f6bc:	f04f 0800 	mov.w	r8, #0
 800f6c0:	4651      	mov	r1, sl
 800f6c2:	2201      	movs	r2, #1
 800f6c4:	4620      	mov	r0, r4
 800f6c6:	f000 fa8d 	bl	800fbe4 <__lshift>
 800f6ca:	4631      	mov	r1, r6
 800f6cc:	4682      	mov	sl, r0
 800f6ce:	f000 faf5 	bl	800fcbc <__mcmp>
 800f6d2:	2800      	cmp	r0, #0
 800f6d4:	dc96      	bgt.n	800f604 <_dtoa_r+0xabc>
 800f6d6:	d102      	bne.n	800f6de <_dtoa_r+0xb96>
 800f6d8:	f019 0f01 	tst.w	r9, #1
 800f6dc:	d192      	bne.n	800f604 <_dtoa_r+0xabc>
 800f6de:	462b      	mov	r3, r5
 800f6e0:	461d      	mov	r5, r3
 800f6e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f6e6:	2a30      	cmp	r2, #48	; 0x30
 800f6e8:	d0fa      	beq.n	800f6e0 <_dtoa_r+0xb98>
 800f6ea:	e6dd      	b.n	800f4a8 <_dtoa_r+0x960>
 800f6ec:	9a00      	ldr	r2, [sp, #0]
 800f6ee:	429a      	cmp	r2, r3
 800f6f0:	d189      	bne.n	800f606 <_dtoa_r+0xabe>
 800f6f2:	f10b 0b01 	add.w	fp, fp, #1
 800f6f6:	2331      	movs	r3, #49	; 0x31
 800f6f8:	e796      	b.n	800f628 <_dtoa_r+0xae0>
 800f6fa:	4b0a      	ldr	r3, [pc, #40]	; (800f724 <_dtoa_r+0xbdc>)
 800f6fc:	f7ff ba99 	b.w	800ec32 <_dtoa_r+0xea>
 800f700:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f702:	2b00      	cmp	r3, #0
 800f704:	f47f aa6d 	bne.w	800ebe2 <_dtoa_r+0x9a>
 800f708:	4b07      	ldr	r3, [pc, #28]	; (800f728 <_dtoa_r+0xbe0>)
 800f70a:	f7ff ba92 	b.w	800ec32 <_dtoa_r+0xea>
 800f70e:	9b01      	ldr	r3, [sp, #4]
 800f710:	2b00      	cmp	r3, #0
 800f712:	dcb5      	bgt.n	800f680 <_dtoa_r+0xb38>
 800f714:	9b07      	ldr	r3, [sp, #28]
 800f716:	2b02      	cmp	r3, #2
 800f718:	f73f aeb1 	bgt.w	800f47e <_dtoa_r+0x936>
 800f71c:	e7b0      	b.n	800f680 <_dtoa_r+0xb38>
 800f71e:	bf00      	nop
 800f720:	08018650 	.word	0x08018650
 800f724:	080185b0 	.word	0x080185b0
 800f728:	080185d4 	.word	0x080185d4

0800f72c <_free_r>:
 800f72c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f72e:	2900      	cmp	r1, #0
 800f730:	d044      	beq.n	800f7bc <_free_r+0x90>
 800f732:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f736:	9001      	str	r0, [sp, #4]
 800f738:	2b00      	cmp	r3, #0
 800f73a:	f1a1 0404 	sub.w	r4, r1, #4
 800f73e:	bfb8      	it	lt
 800f740:	18e4      	addlt	r4, r4, r3
 800f742:	f7fe f957 	bl	800d9f4 <__malloc_lock>
 800f746:	4a1e      	ldr	r2, [pc, #120]	; (800f7c0 <_free_r+0x94>)
 800f748:	9801      	ldr	r0, [sp, #4]
 800f74a:	6813      	ldr	r3, [r2, #0]
 800f74c:	b933      	cbnz	r3, 800f75c <_free_r+0x30>
 800f74e:	6063      	str	r3, [r4, #4]
 800f750:	6014      	str	r4, [r2, #0]
 800f752:	b003      	add	sp, #12
 800f754:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f758:	f7fe b952 	b.w	800da00 <__malloc_unlock>
 800f75c:	42a3      	cmp	r3, r4
 800f75e:	d908      	bls.n	800f772 <_free_r+0x46>
 800f760:	6825      	ldr	r5, [r4, #0]
 800f762:	1961      	adds	r1, r4, r5
 800f764:	428b      	cmp	r3, r1
 800f766:	bf01      	itttt	eq
 800f768:	6819      	ldreq	r1, [r3, #0]
 800f76a:	685b      	ldreq	r3, [r3, #4]
 800f76c:	1949      	addeq	r1, r1, r5
 800f76e:	6021      	streq	r1, [r4, #0]
 800f770:	e7ed      	b.n	800f74e <_free_r+0x22>
 800f772:	461a      	mov	r2, r3
 800f774:	685b      	ldr	r3, [r3, #4]
 800f776:	b10b      	cbz	r3, 800f77c <_free_r+0x50>
 800f778:	42a3      	cmp	r3, r4
 800f77a:	d9fa      	bls.n	800f772 <_free_r+0x46>
 800f77c:	6811      	ldr	r1, [r2, #0]
 800f77e:	1855      	adds	r5, r2, r1
 800f780:	42a5      	cmp	r5, r4
 800f782:	d10b      	bne.n	800f79c <_free_r+0x70>
 800f784:	6824      	ldr	r4, [r4, #0]
 800f786:	4421      	add	r1, r4
 800f788:	1854      	adds	r4, r2, r1
 800f78a:	42a3      	cmp	r3, r4
 800f78c:	6011      	str	r1, [r2, #0]
 800f78e:	d1e0      	bne.n	800f752 <_free_r+0x26>
 800f790:	681c      	ldr	r4, [r3, #0]
 800f792:	685b      	ldr	r3, [r3, #4]
 800f794:	6053      	str	r3, [r2, #4]
 800f796:	440c      	add	r4, r1
 800f798:	6014      	str	r4, [r2, #0]
 800f79a:	e7da      	b.n	800f752 <_free_r+0x26>
 800f79c:	d902      	bls.n	800f7a4 <_free_r+0x78>
 800f79e:	230c      	movs	r3, #12
 800f7a0:	6003      	str	r3, [r0, #0]
 800f7a2:	e7d6      	b.n	800f752 <_free_r+0x26>
 800f7a4:	6825      	ldr	r5, [r4, #0]
 800f7a6:	1961      	adds	r1, r4, r5
 800f7a8:	428b      	cmp	r3, r1
 800f7aa:	bf04      	itt	eq
 800f7ac:	6819      	ldreq	r1, [r3, #0]
 800f7ae:	685b      	ldreq	r3, [r3, #4]
 800f7b0:	6063      	str	r3, [r4, #4]
 800f7b2:	bf04      	itt	eq
 800f7b4:	1949      	addeq	r1, r1, r5
 800f7b6:	6021      	streq	r1, [r4, #0]
 800f7b8:	6054      	str	r4, [r2, #4]
 800f7ba:	e7ca      	b.n	800f752 <_free_r+0x26>
 800f7bc:	b003      	add	sp, #12
 800f7be:	bd30      	pop	{r4, r5, pc}
 800f7c0:	200004f4 	.word	0x200004f4

0800f7c4 <_Balloc>:
 800f7c4:	b570      	push	{r4, r5, r6, lr}
 800f7c6:	69c6      	ldr	r6, [r0, #28]
 800f7c8:	4604      	mov	r4, r0
 800f7ca:	460d      	mov	r5, r1
 800f7cc:	b976      	cbnz	r6, 800f7ec <_Balloc+0x28>
 800f7ce:	2010      	movs	r0, #16
 800f7d0:	f7fe f860 	bl	800d894 <malloc>
 800f7d4:	4602      	mov	r2, r0
 800f7d6:	61e0      	str	r0, [r4, #28]
 800f7d8:	b920      	cbnz	r0, 800f7e4 <_Balloc+0x20>
 800f7da:	4b18      	ldr	r3, [pc, #96]	; (800f83c <_Balloc+0x78>)
 800f7dc:	4818      	ldr	r0, [pc, #96]	; (800f840 <_Balloc+0x7c>)
 800f7de:	216b      	movs	r1, #107	; 0x6b
 800f7e0:	f000 fec0 	bl	8010564 <__assert_func>
 800f7e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f7e8:	6006      	str	r6, [r0, #0]
 800f7ea:	60c6      	str	r6, [r0, #12]
 800f7ec:	69e6      	ldr	r6, [r4, #28]
 800f7ee:	68f3      	ldr	r3, [r6, #12]
 800f7f0:	b183      	cbz	r3, 800f814 <_Balloc+0x50>
 800f7f2:	69e3      	ldr	r3, [r4, #28]
 800f7f4:	68db      	ldr	r3, [r3, #12]
 800f7f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f7fa:	b9b8      	cbnz	r0, 800f82c <_Balloc+0x68>
 800f7fc:	2101      	movs	r1, #1
 800f7fe:	fa01 f605 	lsl.w	r6, r1, r5
 800f802:	1d72      	adds	r2, r6, #5
 800f804:	0092      	lsls	r2, r2, #2
 800f806:	4620      	mov	r0, r4
 800f808:	f7fe f82e 	bl	800d868 <_calloc_r>
 800f80c:	b160      	cbz	r0, 800f828 <_Balloc+0x64>
 800f80e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f812:	e00e      	b.n	800f832 <_Balloc+0x6e>
 800f814:	2221      	movs	r2, #33	; 0x21
 800f816:	2104      	movs	r1, #4
 800f818:	4620      	mov	r0, r4
 800f81a:	f7fe f825 	bl	800d868 <_calloc_r>
 800f81e:	69e3      	ldr	r3, [r4, #28]
 800f820:	60f0      	str	r0, [r6, #12]
 800f822:	68db      	ldr	r3, [r3, #12]
 800f824:	2b00      	cmp	r3, #0
 800f826:	d1e4      	bne.n	800f7f2 <_Balloc+0x2e>
 800f828:	2000      	movs	r0, #0
 800f82a:	bd70      	pop	{r4, r5, r6, pc}
 800f82c:	6802      	ldr	r2, [r0, #0]
 800f82e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f832:	2300      	movs	r3, #0
 800f834:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f838:	e7f7      	b.n	800f82a <_Balloc+0x66>
 800f83a:	bf00      	nop
 800f83c:	080185e1 	.word	0x080185e1
 800f840:	08018661 	.word	0x08018661

0800f844 <_Bfree>:
 800f844:	b570      	push	{r4, r5, r6, lr}
 800f846:	69c6      	ldr	r6, [r0, #28]
 800f848:	4605      	mov	r5, r0
 800f84a:	460c      	mov	r4, r1
 800f84c:	b976      	cbnz	r6, 800f86c <_Bfree+0x28>
 800f84e:	2010      	movs	r0, #16
 800f850:	f7fe f820 	bl	800d894 <malloc>
 800f854:	4602      	mov	r2, r0
 800f856:	61e8      	str	r0, [r5, #28]
 800f858:	b920      	cbnz	r0, 800f864 <_Bfree+0x20>
 800f85a:	4b09      	ldr	r3, [pc, #36]	; (800f880 <_Bfree+0x3c>)
 800f85c:	4809      	ldr	r0, [pc, #36]	; (800f884 <_Bfree+0x40>)
 800f85e:	218f      	movs	r1, #143	; 0x8f
 800f860:	f000 fe80 	bl	8010564 <__assert_func>
 800f864:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f868:	6006      	str	r6, [r0, #0]
 800f86a:	60c6      	str	r6, [r0, #12]
 800f86c:	b13c      	cbz	r4, 800f87e <_Bfree+0x3a>
 800f86e:	69eb      	ldr	r3, [r5, #28]
 800f870:	6862      	ldr	r2, [r4, #4]
 800f872:	68db      	ldr	r3, [r3, #12]
 800f874:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f878:	6021      	str	r1, [r4, #0]
 800f87a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f87e:	bd70      	pop	{r4, r5, r6, pc}
 800f880:	080185e1 	.word	0x080185e1
 800f884:	08018661 	.word	0x08018661

0800f888 <__multadd>:
 800f888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f88c:	690d      	ldr	r5, [r1, #16]
 800f88e:	4607      	mov	r7, r0
 800f890:	460c      	mov	r4, r1
 800f892:	461e      	mov	r6, r3
 800f894:	f101 0c14 	add.w	ip, r1, #20
 800f898:	2000      	movs	r0, #0
 800f89a:	f8dc 3000 	ldr.w	r3, [ip]
 800f89e:	b299      	uxth	r1, r3
 800f8a0:	fb02 6101 	mla	r1, r2, r1, r6
 800f8a4:	0c1e      	lsrs	r6, r3, #16
 800f8a6:	0c0b      	lsrs	r3, r1, #16
 800f8a8:	fb02 3306 	mla	r3, r2, r6, r3
 800f8ac:	b289      	uxth	r1, r1
 800f8ae:	3001      	adds	r0, #1
 800f8b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f8b4:	4285      	cmp	r5, r0
 800f8b6:	f84c 1b04 	str.w	r1, [ip], #4
 800f8ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f8be:	dcec      	bgt.n	800f89a <__multadd+0x12>
 800f8c0:	b30e      	cbz	r6, 800f906 <__multadd+0x7e>
 800f8c2:	68a3      	ldr	r3, [r4, #8]
 800f8c4:	42ab      	cmp	r3, r5
 800f8c6:	dc19      	bgt.n	800f8fc <__multadd+0x74>
 800f8c8:	6861      	ldr	r1, [r4, #4]
 800f8ca:	4638      	mov	r0, r7
 800f8cc:	3101      	adds	r1, #1
 800f8ce:	f7ff ff79 	bl	800f7c4 <_Balloc>
 800f8d2:	4680      	mov	r8, r0
 800f8d4:	b928      	cbnz	r0, 800f8e2 <__multadd+0x5a>
 800f8d6:	4602      	mov	r2, r0
 800f8d8:	4b0c      	ldr	r3, [pc, #48]	; (800f90c <__multadd+0x84>)
 800f8da:	480d      	ldr	r0, [pc, #52]	; (800f910 <__multadd+0x88>)
 800f8dc:	21ba      	movs	r1, #186	; 0xba
 800f8de:	f000 fe41 	bl	8010564 <__assert_func>
 800f8e2:	6922      	ldr	r2, [r4, #16]
 800f8e4:	3202      	adds	r2, #2
 800f8e6:	f104 010c 	add.w	r1, r4, #12
 800f8ea:	0092      	lsls	r2, r2, #2
 800f8ec:	300c      	adds	r0, #12
 800f8ee:	f7ff f895 	bl	800ea1c <memcpy>
 800f8f2:	4621      	mov	r1, r4
 800f8f4:	4638      	mov	r0, r7
 800f8f6:	f7ff ffa5 	bl	800f844 <_Bfree>
 800f8fa:	4644      	mov	r4, r8
 800f8fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f900:	3501      	adds	r5, #1
 800f902:	615e      	str	r6, [r3, #20]
 800f904:	6125      	str	r5, [r4, #16]
 800f906:	4620      	mov	r0, r4
 800f908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f90c:	08018650 	.word	0x08018650
 800f910:	08018661 	.word	0x08018661

0800f914 <__hi0bits>:
 800f914:	0c03      	lsrs	r3, r0, #16
 800f916:	041b      	lsls	r3, r3, #16
 800f918:	b9d3      	cbnz	r3, 800f950 <__hi0bits+0x3c>
 800f91a:	0400      	lsls	r0, r0, #16
 800f91c:	2310      	movs	r3, #16
 800f91e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f922:	bf04      	itt	eq
 800f924:	0200      	lsleq	r0, r0, #8
 800f926:	3308      	addeq	r3, #8
 800f928:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f92c:	bf04      	itt	eq
 800f92e:	0100      	lsleq	r0, r0, #4
 800f930:	3304      	addeq	r3, #4
 800f932:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f936:	bf04      	itt	eq
 800f938:	0080      	lsleq	r0, r0, #2
 800f93a:	3302      	addeq	r3, #2
 800f93c:	2800      	cmp	r0, #0
 800f93e:	db05      	blt.n	800f94c <__hi0bits+0x38>
 800f940:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f944:	f103 0301 	add.w	r3, r3, #1
 800f948:	bf08      	it	eq
 800f94a:	2320      	moveq	r3, #32
 800f94c:	4618      	mov	r0, r3
 800f94e:	4770      	bx	lr
 800f950:	2300      	movs	r3, #0
 800f952:	e7e4      	b.n	800f91e <__hi0bits+0xa>

0800f954 <__lo0bits>:
 800f954:	6803      	ldr	r3, [r0, #0]
 800f956:	f013 0207 	ands.w	r2, r3, #7
 800f95a:	d00c      	beq.n	800f976 <__lo0bits+0x22>
 800f95c:	07d9      	lsls	r1, r3, #31
 800f95e:	d422      	bmi.n	800f9a6 <__lo0bits+0x52>
 800f960:	079a      	lsls	r2, r3, #30
 800f962:	bf49      	itett	mi
 800f964:	085b      	lsrmi	r3, r3, #1
 800f966:	089b      	lsrpl	r3, r3, #2
 800f968:	6003      	strmi	r3, [r0, #0]
 800f96a:	2201      	movmi	r2, #1
 800f96c:	bf5c      	itt	pl
 800f96e:	6003      	strpl	r3, [r0, #0]
 800f970:	2202      	movpl	r2, #2
 800f972:	4610      	mov	r0, r2
 800f974:	4770      	bx	lr
 800f976:	b299      	uxth	r1, r3
 800f978:	b909      	cbnz	r1, 800f97e <__lo0bits+0x2a>
 800f97a:	0c1b      	lsrs	r3, r3, #16
 800f97c:	2210      	movs	r2, #16
 800f97e:	b2d9      	uxtb	r1, r3
 800f980:	b909      	cbnz	r1, 800f986 <__lo0bits+0x32>
 800f982:	3208      	adds	r2, #8
 800f984:	0a1b      	lsrs	r3, r3, #8
 800f986:	0719      	lsls	r1, r3, #28
 800f988:	bf04      	itt	eq
 800f98a:	091b      	lsreq	r3, r3, #4
 800f98c:	3204      	addeq	r2, #4
 800f98e:	0799      	lsls	r1, r3, #30
 800f990:	bf04      	itt	eq
 800f992:	089b      	lsreq	r3, r3, #2
 800f994:	3202      	addeq	r2, #2
 800f996:	07d9      	lsls	r1, r3, #31
 800f998:	d403      	bmi.n	800f9a2 <__lo0bits+0x4e>
 800f99a:	085b      	lsrs	r3, r3, #1
 800f99c:	f102 0201 	add.w	r2, r2, #1
 800f9a0:	d003      	beq.n	800f9aa <__lo0bits+0x56>
 800f9a2:	6003      	str	r3, [r0, #0]
 800f9a4:	e7e5      	b.n	800f972 <__lo0bits+0x1e>
 800f9a6:	2200      	movs	r2, #0
 800f9a8:	e7e3      	b.n	800f972 <__lo0bits+0x1e>
 800f9aa:	2220      	movs	r2, #32
 800f9ac:	e7e1      	b.n	800f972 <__lo0bits+0x1e>
	...

0800f9b0 <__i2b>:
 800f9b0:	b510      	push	{r4, lr}
 800f9b2:	460c      	mov	r4, r1
 800f9b4:	2101      	movs	r1, #1
 800f9b6:	f7ff ff05 	bl	800f7c4 <_Balloc>
 800f9ba:	4602      	mov	r2, r0
 800f9bc:	b928      	cbnz	r0, 800f9ca <__i2b+0x1a>
 800f9be:	4b05      	ldr	r3, [pc, #20]	; (800f9d4 <__i2b+0x24>)
 800f9c0:	4805      	ldr	r0, [pc, #20]	; (800f9d8 <__i2b+0x28>)
 800f9c2:	f240 1145 	movw	r1, #325	; 0x145
 800f9c6:	f000 fdcd 	bl	8010564 <__assert_func>
 800f9ca:	2301      	movs	r3, #1
 800f9cc:	6144      	str	r4, [r0, #20]
 800f9ce:	6103      	str	r3, [r0, #16]
 800f9d0:	bd10      	pop	{r4, pc}
 800f9d2:	bf00      	nop
 800f9d4:	08018650 	.word	0x08018650
 800f9d8:	08018661 	.word	0x08018661

0800f9dc <__multiply>:
 800f9dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9e0:	4691      	mov	r9, r2
 800f9e2:	690a      	ldr	r2, [r1, #16]
 800f9e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f9e8:	429a      	cmp	r2, r3
 800f9ea:	bfb8      	it	lt
 800f9ec:	460b      	movlt	r3, r1
 800f9ee:	460c      	mov	r4, r1
 800f9f0:	bfbc      	itt	lt
 800f9f2:	464c      	movlt	r4, r9
 800f9f4:	4699      	movlt	r9, r3
 800f9f6:	6927      	ldr	r7, [r4, #16]
 800f9f8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f9fc:	68a3      	ldr	r3, [r4, #8]
 800f9fe:	6861      	ldr	r1, [r4, #4]
 800fa00:	eb07 060a 	add.w	r6, r7, sl
 800fa04:	42b3      	cmp	r3, r6
 800fa06:	b085      	sub	sp, #20
 800fa08:	bfb8      	it	lt
 800fa0a:	3101      	addlt	r1, #1
 800fa0c:	f7ff feda 	bl	800f7c4 <_Balloc>
 800fa10:	b930      	cbnz	r0, 800fa20 <__multiply+0x44>
 800fa12:	4602      	mov	r2, r0
 800fa14:	4b44      	ldr	r3, [pc, #272]	; (800fb28 <__multiply+0x14c>)
 800fa16:	4845      	ldr	r0, [pc, #276]	; (800fb2c <__multiply+0x150>)
 800fa18:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800fa1c:	f000 fda2 	bl	8010564 <__assert_func>
 800fa20:	f100 0514 	add.w	r5, r0, #20
 800fa24:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800fa28:	462b      	mov	r3, r5
 800fa2a:	2200      	movs	r2, #0
 800fa2c:	4543      	cmp	r3, r8
 800fa2e:	d321      	bcc.n	800fa74 <__multiply+0x98>
 800fa30:	f104 0314 	add.w	r3, r4, #20
 800fa34:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800fa38:	f109 0314 	add.w	r3, r9, #20
 800fa3c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800fa40:	9202      	str	r2, [sp, #8]
 800fa42:	1b3a      	subs	r2, r7, r4
 800fa44:	3a15      	subs	r2, #21
 800fa46:	f022 0203 	bic.w	r2, r2, #3
 800fa4a:	3204      	adds	r2, #4
 800fa4c:	f104 0115 	add.w	r1, r4, #21
 800fa50:	428f      	cmp	r7, r1
 800fa52:	bf38      	it	cc
 800fa54:	2204      	movcc	r2, #4
 800fa56:	9201      	str	r2, [sp, #4]
 800fa58:	9a02      	ldr	r2, [sp, #8]
 800fa5a:	9303      	str	r3, [sp, #12]
 800fa5c:	429a      	cmp	r2, r3
 800fa5e:	d80c      	bhi.n	800fa7a <__multiply+0x9e>
 800fa60:	2e00      	cmp	r6, #0
 800fa62:	dd03      	ble.n	800fa6c <__multiply+0x90>
 800fa64:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d05b      	beq.n	800fb24 <__multiply+0x148>
 800fa6c:	6106      	str	r6, [r0, #16]
 800fa6e:	b005      	add	sp, #20
 800fa70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa74:	f843 2b04 	str.w	r2, [r3], #4
 800fa78:	e7d8      	b.n	800fa2c <__multiply+0x50>
 800fa7a:	f8b3 a000 	ldrh.w	sl, [r3]
 800fa7e:	f1ba 0f00 	cmp.w	sl, #0
 800fa82:	d024      	beq.n	800face <__multiply+0xf2>
 800fa84:	f104 0e14 	add.w	lr, r4, #20
 800fa88:	46a9      	mov	r9, r5
 800fa8a:	f04f 0c00 	mov.w	ip, #0
 800fa8e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800fa92:	f8d9 1000 	ldr.w	r1, [r9]
 800fa96:	fa1f fb82 	uxth.w	fp, r2
 800fa9a:	b289      	uxth	r1, r1
 800fa9c:	fb0a 110b 	mla	r1, sl, fp, r1
 800faa0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800faa4:	f8d9 2000 	ldr.w	r2, [r9]
 800faa8:	4461      	add	r1, ip
 800faaa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800faae:	fb0a c20b 	mla	r2, sl, fp, ip
 800fab2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800fab6:	b289      	uxth	r1, r1
 800fab8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800fabc:	4577      	cmp	r7, lr
 800fabe:	f849 1b04 	str.w	r1, [r9], #4
 800fac2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fac6:	d8e2      	bhi.n	800fa8e <__multiply+0xb2>
 800fac8:	9a01      	ldr	r2, [sp, #4]
 800faca:	f845 c002 	str.w	ip, [r5, r2]
 800face:	9a03      	ldr	r2, [sp, #12]
 800fad0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800fad4:	3304      	adds	r3, #4
 800fad6:	f1b9 0f00 	cmp.w	r9, #0
 800fada:	d021      	beq.n	800fb20 <__multiply+0x144>
 800fadc:	6829      	ldr	r1, [r5, #0]
 800fade:	f104 0c14 	add.w	ip, r4, #20
 800fae2:	46ae      	mov	lr, r5
 800fae4:	f04f 0a00 	mov.w	sl, #0
 800fae8:	f8bc b000 	ldrh.w	fp, [ip]
 800faec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800faf0:	fb09 220b 	mla	r2, r9, fp, r2
 800faf4:	4452      	add	r2, sl
 800faf6:	b289      	uxth	r1, r1
 800faf8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800fafc:	f84e 1b04 	str.w	r1, [lr], #4
 800fb00:	f85c 1b04 	ldr.w	r1, [ip], #4
 800fb04:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800fb08:	f8be 1000 	ldrh.w	r1, [lr]
 800fb0c:	fb09 110a 	mla	r1, r9, sl, r1
 800fb10:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800fb14:	4567      	cmp	r7, ip
 800fb16:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800fb1a:	d8e5      	bhi.n	800fae8 <__multiply+0x10c>
 800fb1c:	9a01      	ldr	r2, [sp, #4]
 800fb1e:	50a9      	str	r1, [r5, r2]
 800fb20:	3504      	adds	r5, #4
 800fb22:	e799      	b.n	800fa58 <__multiply+0x7c>
 800fb24:	3e01      	subs	r6, #1
 800fb26:	e79b      	b.n	800fa60 <__multiply+0x84>
 800fb28:	08018650 	.word	0x08018650
 800fb2c:	08018661 	.word	0x08018661

0800fb30 <__pow5mult>:
 800fb30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb34:	4615      	mov	r5, r2
 800fb36:	f012 0203 	ands.w	r2, r2, #3
 800fb3a:	4606      	mov	r6, r0
 800fb3c:	460f      	mov	r7, r1
 800fb3e:	d007      	beq.n	800fb50 <__pow5mult+0x20>
 800fb40:	4c25      	ldr	r4, [pc, #148]	; (800fbd8 <__pow5mult+0xa8>)
 800fb42:	3a01      	subs	r2, #1
 800fb44:	2300      	movs	r3, #0
 800fb46:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fb4a:	f7ff fe9d 	bl	800f888 <__multadd>
 800fb4e:	4607      	mov	r7, r0
 800fb50:	10ad      	asrs	r5, r5, #2
 800fb52:	d03d      	beq.n	800fbd0 <__pow5mult+0xa0>
 800fb54:	69f4      	ldr	r4, [r6, #28]
 800fb56:	b97c      	cbnz	r4, 800fb78 <__pow5mult+0x48>
 800fb58:	2010      	movs	r0, #16
 800fb5a:	f7fd fe9b 	bl	800d894 <malloc>
 800fb5e:	4602      	mov	r2, r0
 800fb60:	61f0      	str	r0, [r6, #28]
 800fb62:	b928      	cbnz	r0, 800fb70 <__pow5mult+0x40>
 800fb64:	4b1d      	ldr	r3, [pc, #116]	; (800fbdc <__pow5mult+0xac>)
 800fb66:	481e      	ldr	r0, [pc, #120]	; (800fbe0 <__pow5mult+0xb0>)
 800fb68:	f240 11b3 	movw	r1, #435	; 0x1b3
 800fb6c:	f000 fcfa 	bl	8010564 <__assert_func>
 800fb70:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fb74:	6004      	str	r4, [r0, #0]
 800fb76:	60c4      	str	r4, [r0, #12]
 800fb78:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800fb7c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fb80:	b94c      	cbnz	r4, 800fb96 <__pow5mult+0x66>
 800fb82:	f240 2171 	movw	r1, #625	; 0x271
 800fb86:	4630      	mov	r0, r6
 800fb88:	f7ff ff12 	bl	800f9b0 <__i2b>
 800fb8c:	2300      	movs	r3, #0
 800fb8e:	f8c8 0008 	str.w	r0, [r8, #8]
 800fb92:	4604      	mov	r4, r0
 800fb94:	6003      	str	r3, [r0, #0]
 800fb96:	f04f 0900 	mov.w	r9, #0
 800fb9a:	07eb      	lsls	r3, r5, #31
 800fb9c:	d50a      	bpl.n	800fbb4 <__pow5mult+0x84>
 800fb9e:	4639      	mov	r1, r7
 800fba0:	4622      	mov	r2, r4
 800fba2:	4630      	mov	r0, r6
 800fba4:	f7ff ff1a 	bl	800f9dc <__multiply>
 800fba8:	4639      	mov	r1, r7
 800fbaa:	4680      	mov	r8, r0
 800fbac:	4630      	mov	r0, r6
 800fbae:	f7ff fe49 	bl	800f844 <_Bfree>
 800fbb2:	4647      	mov	r7, r8
 800fbb4:	106d      	asrs	r5, r5, #1
 800fbb6:	d00b      	beq.n	800fbd0 <__pow5mult+0xa0>
 800fbb8:	6820      	ldr	r0, [r4, #0]
 800fbba:	b938      	cbnz	r0, 800fbcc <__pow5mult+0x9c>
 800fbbc:	4622      	mov	r2, r4
 800fbbe:	4621      	mov	r1, r4
 800fbc0:	4630      	mov	r0, r6
 800fbc2:	f7ff ff0b 	bl	800f9dc <__multiply>
 800fbc6:	6020      	str	r0, [r4, #0]
 800fbc8:	f8c0 9000 	str.w	r9, [r0]
 800fbcc:	4604      	mov	r4, r0
 800fbce:	e7e4      	b.n	800fb9a <__pow5mult+0x6a>
 800fbd0:	4638      	mov	r0, r7
 800fbd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fbd6:	bf00      	nop
 800fbd8:	080187b0 	.word	0x080187b0
 800fbdc:	080185e1 	.word	0x080185e1
 800fbe0:	08018661 	.word	0x08018661

0800fbe4 <__lshift>:
 800fbe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fbe8:	460c      	mov	r4, r1
 800fbea:	6849      	ldr	r1, [r1, #4]
 800fbec:	6923      	ldr	r3, [r4, #16]
 800fbee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fbf2:	68a3      	ldr	r3, [r4, #8]
 800fbf4:	4607      	mov	r7, r0
 800fbf6:	4691      	mov	r9, r2
 800fbf8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fbfc:	f108 0601 	add.w	r6, r8, #1
 800fc00:	42b3      	cmp	r3, r6
 800fc02:	db0b      	blt.n	800fc1c <__lshift+0x38>
 800fc04:	4638      	mov	r0, r7
 800fc06:	f7ff fddd 	bl	800f7c4 <_Balloc>
 800fc0a:	4605      	mov	r5, r0
 800fc0c:	b948      	cbnz	r0, 800fc22 <__lshift+0x3e>
 800fc0e:	4602      	mov	r2, r0
 800fc10:	4b28      	ldr	r3, [pc, #160]	; (800fcb4 <__lshift+0xd0>)
 800fc12:	4829      	ldr	r0, [pc, #164]	; (800fcb8 <__lshift+0xd4>)
 800fc14:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800fc18:	f000 fca4 	bl	8010564 <__assert_func>
 800fc1c:	3101      	adds	r1, #1
 800fc1e:	005b      	lsls	r3, r3, #1
 800fc20:	e7ee      	b.n	800fc00 <__lshift+0x1c>
 800fc22:	2300      	movs	r3, #0
 800fc24:	f100 0114 	add.w	r1, r0, #20
 800fc28:	f100 0210 	add.w	r2, r0, #16
 800fc2c:	4618      	mov	r0, r3
 800fc2e:	4553      	cmp	r3, sl
 800fc30:	db33      	blt.n	800fc9a <__lshift+0xb6>
 800fc32:	6920      	ldr	r0, [r4, #16]
 800fc34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fc38:	f104 0314 	add.w	r3, r4, #20
 800fc3c:	f019 091f 	ands.w	r9, r9, #31
 800fc40:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fc44:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fc48:	d02b      	beq.n	800fca2 <__lshift+0xbe>
 800fc4a:	f1c9 0e20 	rsb	lr, r9, #32
 800fc4e:	468a      	mov	sl, r1
 800fc50:	2200      	movs	r2, #0
 800fc52:	6818      	ldr	r0, [r3, #0]
 800fc54:	fa00 f009 	lsl.w	r0, r0, r9
 800fc58:	4310      	orrs	r0, r2
 800fc5a:	f84a 0b04 	str.w	r0, [sl], #4
 800fc5e:	f853 2b04 	ldr.w	r2, [r3], #4
 800fc62:	459c      	cmp	ip, r3
 800fc64:	fa22 f20e 	lsr.w	r2, r2, lr
 800fc68:	d8f3      	bhi.n	800fc52 <__lshift+0x6e>
 800fc6a:	ebac 0304 	sub.w	r3, ip, r4
 800fc6e:	3b15      	subs	r3, #21
 800fc70:	f023 0303 	bic.w	r3, r3, #3
 800fc74:	3304      	adds	r3, #4
 800fc76:	f104 0015 	add.w	r0, r4, #21
 800fc7a:	4584      	cmp	ip, r0
 800fc7c:	bf38      	it	cc
 800fc7e:	2304      	movcc	r3, #4
 800fc80:	50ca      	str	r2, [r1, r3]
 800fc82:	b10a      	cbz	r2, 800fc88 <__lshift+0xa4>
 800fc84:	f108 0602 	add.w	r6, r8, #2
 800fc88:	3e01      	subs	r6, #1
 800fc8a:	4638      	mov	r0, r7
 800fc8c:	612e      	str	r6, [r5, #16]
 800fc8e:	4621      	mov	r1, r4
 800fc90:	f7ff fdd8 	bl	800f844 <_Bfree>
 800fc94:	4628      	mov	r0, r5
 800fc96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc9a:	f842 0f04 	str.w	r0, [r2, #4]!
 800fc9e:	3301      	adds	r3, #1
 800fca0:	e7c5      	b.n	800fc2e <__lshift+0x4a>
 800fca2:	3904      	subs	r1, #4
 800fca4:	f853 2b04 	ldr.w	r2, [r3], #4
 800fca8:	f841 2f04 	str.w	r2, [r1, #4]!
 800fcac:	459c      	cmp	ip, r3
 800fcae:	d8f9      	bhi.n	800fca4 <__lshift+0xc0>
 800fcb0:	e7ea      	b.n	800fc88 <__lshift+0xa4>
 800fcb2:	bf00      	nop
 800fcb4:	08018650 	.word	0x08018650
 800fcb8:	08018661 	.word	0x08018661

0800fcbc <__mcmp>:
 800fcbc:	b530      	push	{r4, r5, lr}
 800fcbe:	6902      	ldr	r2, [r0, #16]
 800fcc0:	690c      	ldr	r4, [r1, #16]
 800fcc2:	1b12      	subs	r2, r2, r4
 800fcc4:	d10e      	bne.n	800fce4 <__mcmp+0x28>
 800fcc6:	f100 0314 	add.w	r3, r0, #20
 800fcca:	3114      	adds	r1, #20
 800fccc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800fcd0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800fcd4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800fcd8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800fcdc:	42a5      	cmp	r5, r4
 800fcde:	d003      	beq.n	800fce8 <__mcmp+0x2c>
 800fce0:	d305      	bcc.n	800fcee <__mcmp+0x32>
 800fce2:	2201      	movs	r2, #1
 800fce4:	4610      	mov	r0, r2
 800fce6:	bd30      	pop	{r4, r5, pc}
 800fce8:	4283      	cmp	r3, r0
 800fcea:	d3f3      	bcc.n	800fcd4 <__mcmp+0x18>
 800fcec:	e7fa      	b.n	800fce4 <__mcmp+0x28>
 800fcee:	f04f 32ff 	mov.w	r2, #4294967295
 800fcf2:	e7f7      	b.n	800fce4 <__mcmp+0x28>

0800fcf4 <__mdiff>:
 800fcf4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcf8:	460c      	mov	r4, r1
 800fcfa:	4606      	mov	r6, r0
 800fcfc:	4611      	mov	r1, r2
 800fcfe:	4620      	mov	r0, r4
 800fd00:	4690      	mov	r8, r2
 800fd02:	f7ff ffdb 	bl	800fcbc <__mcmp>
 800fd06:	1e05      	subs	r5, r0, #0
 800fd08:	d110      	bne.n	800fd2c <__mdiff+0x38>
 800fd0a:	4629      	mov	r1, r5
 800fd0c:	4630      	mov	r0, r6
 800fd0e:	f7ff fd59 	bl	800f7c4 <_Balloc>
 800fd12:	b930      	cbnz	r0, 800fd22 <__mdiff+0x2e>
 800fd14:	4b3a      	ldr	r3, [pc, #232]	; (800fe00 <__mdiff+0x10c>)
 800fd16:	4602      	mov	r2, r0
 800fd18:	f240 2137 	movw	r1, #567	; 0x237
 800fd1c:	4839      	ldr	r0, [pc, #228]	; (800fe04 <__mdiff+0x110>)
 800fd1e:	f000 fc21 	bl	8010564 <__assert_func>
 800fd22:	2301      	movs	r3, #1
 800fd24:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fd28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd2c:	bfa4      	itt	ge
 800fd2e:	4643      	movge	r3, r8
 800fd30:	46a0      	movge	r8, r4
 800fd32:	4630      	mov	r0, r6
 800fd34:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800fd38:	bfa6      	itte	ge
 800fd3a:	461c      	movge	r4, r3
 800fd3c:	2500      	movge	r5, #0
 800fd3e:	2501      	movlt	r5, #1
 800fd40:	f7ff fd40 	bl	800f7c4 <_Balloc>
 800fd44:	b920      	cbnz	r0, 800fd50 <__mdiff+0x5c>
 800fd46:	4b2e      	ldr	r3, [pc, #184]	; (800fe00 <__mdiff+0x10c>)
 800fd48:	4602      	mov	r2, r0
 800fd4a:	f240 2145 	movw	r1, #581	; 0x245
 800fd4e:	e7e5      	b.n	800fd1c <__mdiff+0x28>
 800fd50:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800fd54:	6926      	ldr	r6, [r4, #16]
 800fd56:	60c5      	str	r5, [r0, #12]
 800fd58:	f104 0914 	add.w	r9, r4, #20
 800fd5c:	f108 0514 	add.w	r5, r8, #20
 800fd60:	f100 0e14 	add.w	lr, r0, #20
 800fd64:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800fd68:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800fd6c:	f108 0210 	add.w	r2, r8, #16
 800fd70:	46f2      	mov	sl, lr
 800fd72:	2100      	movs	r1, #0
 800fd74:	f859 3b04 	ldr.w	r3, [r9], #4
 800fd78:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fd7c:	fa11 f88b 	uxtah	r8, r1, fp
 800fd80:	b299      	uxth	r1, r3
 800fd82:	0c1b      	lsrs	r3, r3, #16
 800fd84:	eba8 0801 	sub.w	r8, r8, r1
 800fd88:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fd8c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800fd90:	fa1f f888 	uxth.w	r8, r8
 800fd94:	1419      	asrs	r1, r3, #16
 800fd96:	454e      	cmp	r6, r9
 800fd98:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800fd9c:	f84a 3b04 	str.w	r3, [sl], #4
 800fda0:	d8e8      	bhi.n	800fd74 <__mdiff+0x80>
 800fda2:	1b33      	subs	r3, r6, r4
 800fda4:	3b15      	subs	r3, #21
 800fda6:	f023 0303 	bic.w	r3, r3, #3
 800fdaa:	3304      	adds	r3, #4
 800fdac:	3415      	adds	r4, #21
 800fdae:	42a6      	cmp	r6, r4
 800fdb0:	bf38      	it	cc
 800fdb2:	2304      	movcc	r3, #4
 800fdb4:	441d      	add	r5, r3
 800fdb6:	4473      	add	r3, lr
 800fdb8:	469e      	mov	lr, r3
 800fdba:	462e      	mov	r6, r5
 800fdbc:	4566      	cmp	r6, ip
 800fdbe:	d30e      	bcc.n	800fdde <__mdiff+0xea>
 800fdc0:	f10c 0203 	add.w	r2, ip, #3
 800fdc4:	1b52      	subs	r2, r2, r5
 800fdc6:	f022 0203 	bic.w	r2, r2, #3
 800fdca:	3d03      	subs	r5, #3
 800fdcc:	45ac      	cmp	ip, r5
 800fdce:	bf38      	it	cc
 800fdd0:	2200      	movcc	r2, #0
 800fdd2:	4413      	add	r3, r2
 800fdd4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800fdd8:	b17a      	cbz	r2, 800fdfa <__mdiff+0x106>
 800fdda:	6107      	str	r7, [r0, #16]
 800fddc:	e7a4      	b.n	800fd28 <__mdiff+0x34>
 800fdde:	f856 8b04 	ldr.w	r8, [r6], #4
 800fde2:	fa11 f288 	uxtah	r2, r1, r8
 800fde6:	1414      	asrs	r4, r2, #16
 800fde8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800fdec:	b292      	uxth	r2, r2
 800fdee:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800fdf2:	f84e 2b04 	str.w	r2, [lr], #4
 800fdf6:	1421      	asrs	r1, r4, #16
 800fdf8:	e7e0      	b.n	800fdbc <__mdiff+0xc8>
 800fdfa:	3f01      	subs	r7, #1
 800fdfc:	e7ea      	b.n	800fdd4 <__mdiff+0xe0>
 800fdfe:	bf00      	nop
 800fe00:	08018650 	.word	0x08018650
 800fe04:	08018661 	.word	0x08018661

0800fe08 <__d2b>:
 800fe08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fe0c:	460f      	mov	r7, r1
 800fe0e:	2101      	movs	r1, #1
 800fe10:	ec59 8b10 	vmov	r8, r9, d0
 800fe14:	4616      	mov	r6, r2
 800fe16:	f7ff fcd5 	bl	800f7c4 <_Balloc>
 800fe1a:	4604      	mov	r4, r0
 800fe1c:	b930      	cbnz	r0, 800fe2c <__d2b+0x24>
 800fe1e:	4602      	mov	r2, r0
 800fe20:	4b24      	ldr	r3, [pc, #144]	; (800feb4 <__d2b+0xac>)
 800fe22:	4825      	ldr	r0, [pc, #148]	; (800feb8 <__d2b+0xb0>)
 800fe24:	f240 310f 	movw	r1, #783	; 0x30f
 800fe28:	f000 fb9c 	bl	8010564 <__assert_func>
 800fe2c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800fe30:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fe34:	bb2d      	cbnz	r5, 800fe82 <__d2b+0x7a>
 800fe36:	9301      	str	r3, [sp, #4]
 800fe38:	f1b8 0300 	subs.w	r3, r8, #0
 800fe3c:	d026      	beq.n	800fe8c <__d2b+0x84>
 800fe3e:	4668      	mov	r0, sp
 800fe40:	9300      	str	r3, [sp, #0]
 800fe42:	f7ff fd87 	bl	800f954 <__lo0bits>
 800fe46:	e9dd 1200 	ldrd	r1, r2, [sp]
 800fe4a:	b1e8      	cbz	r0, 800fe88 <__d2b+0x80>
 800fe4c:	f1c0 0320 	rsb	r3, r0, #32
 800fe50:	fa02 f303 	lsl.w	r3, r2, r3
 800fe54:	430b      	orrs	r3, r1
 800fe56:	40c2      	lsrs	r2, r0
 800fe58:	6163      	str	r3, [r4, #20]
 800fe5a:	9201      	str	r2, [sp, #4]
 800fe5c:	9b01      	ldr	r3, [sp, #4]
 800fe5e:	61a3      	str	r3, [r4, #24]
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	bf14      	ite	ne
 800fe64:	2202      	movne	r2, #2
 800fe66:	2201      	moveq	r2, #1
 800fe68:	6122      	str	r2, [r4, #16]
 800fe6a:	b1bd      	cbz	r5, 800fe9c <__d2b+0x94>
 800fe6c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800fe70:	4405      	add	r5, r0
 800fe72:	603d      	str	r5, [r7, #0]
 800fe74:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fe78:	6030      	str	r0, [r6, #0]
 800fe7a:	4620      	mov	r0, r4
 800fe7c:	b003      	add	sp, #12
 800fe7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fe82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fe86:	e7d6      	b.n	800fe36 <__d2b+0x2e>
 800fe88:	6161      	str	r1, [r4, #20]
 800fe8a:	e7e7      	b.n	800fe5c <__d2b+0x54>
 800fe8c:	a801      	add	r0, sp, #4
 800fe8e:	f7ff fd61 	bl	800f954 <__lo0bits>
 800fe92:	9b01      	ldr	r3, [sp, #4]
 800fe94:	6163      	str	r3, [r4, #20]
 800fe96:	3020      	adds	r0, #32
 800fe98:	2201      	movs	r2, #1
 800fe9a:	e7e5      	b.n	800fe68 <__d2b+0x60>
 800fe9c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fea0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fea4:	6038      	str	r0, [r7, #0]
 800fea6:	6918      	ldr	r0, [r3, #16]
 800fea8:	f7ff fd34 	bl	800f914 <__hi0bits>
 800feac:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800feb0:	e7e2      	b.n	800fe78 <__d2b+0x70>
 800feb2:	bf00      	nop
 800feb4:	08018650 	.word	0x08018650
 800feb8:	08018661 	.word	0x08018661

0800febc <__ssputs_r>:
 800febc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fec0:	688e      	ldr	r6, [r1, #8]
 800fec2:	461f      	mov	r7, r3
 800fec4:	42be      	cmp	r6, r7
 800fec6:	680b      	ldr	r3, [r1, #0]
 800fec8:	4682      	mov	sl, r0
 800feca:	460c      	mov	r4, r1
 800fecc:	4690      	mov	r8, r2
 800fece:	d82c      	bhi.n	800ff2a <__ssputs_r+0x6e>
 800fed0:	898a      	ldrh	r2, [r1, #12]
 800fed2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fed6:	d026      	beq.n	800ff26 <__ssputs_r+0x6a>
 800fed8:	6965      	ldr	r5, [r4, #20]
 800feda:	6909      	ldr	r1, [r1, #16]
 800fedc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fee0:	eba3 0901 	sub.w	r9, r3, r1
 800fee4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fee8:	1c7b      	adds	r3, r7, #1
 800feea:	444b      	add	r3, r9
 800feec:	106d      	asrs	r5, r5, #1
 800feee:	429d      	cmp	r5, r3
 800fef0:	bf38      	it	cc
 800fef2:	461d      	movcc	r5, r3
 800fef4:	0553      	lsls	r3, r2, #21
 800fef6:	d527      	bpl.n	800ff48 <__ssputs_r+0x8c>
 800fef8:	4629      	mov	r1, r5
 800fefa:	f7fd fcfb 	bl	800d8f4 <_malloc_r>
 800fefe:	4606      	mov	r6, r0
 800ff00:	b360      	cbz	r0, 800ff5c <__ssputs_r+0xa0>
 800ff02:	6921      	ldr	r1, [r4, #16]
 800ff04:	464a      	mov	r2, r9
 800ff06:	f7fe fd89 	bl	800ea1c <memcpy>
 800ff0a:	89a3      	ldrh	r3, [r4, #12]
 800ff0c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ff10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ff14:	81a3      	strh	r3, [r4, #12]
 800ff16:	6126      	str	r6, [r4, #16]
 800ff18:	6165      	str	r5, [r4, #20]
 800ff1a:	444e      	add	r6, r9
 800ff1c:	eba5 0509 	sub.w	r5, r5, r9
 800ff20:	6026      	str	r6, [r4, #0]
 800ff22:	60a5      	str	r5, [r4, #8]
 800ff24:	463e      	mov	r6, r7
 800ff26:	42be      	cmp	r6, r7
 800ff28:	d900      	bls.n	800ff2c <__ssputs_r+0x70>
 800ff2a:	463e      	mov	r6, r7
 800ff2c:	6820      	ldr	r0, [r4, #0]
 800ff2e:	4632      	mov	r2, r6
 800ff30:	4641      	mov	r1, r8
 800ff32:	f7fe fccb 	bl	800e8cc <memmove>
 800ff36:	68a3      	ldr	r3, [r4, #8]
 800ff38:	1b9b      	subs	r3, r3, r6
 800ff3a:	60a3      	str	r3, [r4, #8]
 800ff3c:	6823      	ldr	r3, [r4, #0]
 800ff3e:	4433      	add	r3, r6
 800ff40:	6023      	str	r3, [r4, #0]
 800ff42:	2000      	movs	r0, #0
 800ff44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff48:	462a      	mov	r2, r5
 800ff4a:	f000 fb3b 	bl	80105c4 <_realloc_r>
 800ff4e:	4606      	mov	r6, r0
 800ff50:	2800      	cmp	r0, #0
 800ff52:	d1e0      	bne.n	800ff16 <__ssputs_r+0x5a>
 800ff54:	6921      	ldr	r1, [r4, #16]
 800ff56:	4650      	mov	r0, sl
 800ff58:	f7ff fbe8 	bl	800f72c <_free_r>
 800ff5c:	230c      	movs	r3, #12
 800ff5e:	f8ca 3000 	str.w	r3, [sl]
 800ff62:	89a3      	ldrh	r3, [r4, #12]
 800ff64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ff68:	81a3      	strh	r3, [r4, #12]
 800ff6a:	f04f 30ff 	mov.w	r0, #4294967295
 800ff6e:	e7e9      	b.n	800ff44 <__ssputs_r+0x88>

0800ff70 <_svfiprintf_r>:
 800ff70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff74:	4698      	mov	r8, r3
 800ff76:	898b      	ldrh	r3, [r1, #12]
 800ff78:	061b      	lsls	r3, r3, #24
 800ff7a:	b09d      	sub	sp, #116	; 0x74
 800ff7c:	4607      	mov	r7, r0
 800ff7e:	460d      	mov	r5, r1
 800ff80:	4614      	mov	r4, r2
 800ff82:	d50e      	bpl.n	800ffa2 <_svfiprintf_r+0x32>
 800ff84:	690b      	ldr	r3, [r1, #16]
 800ff86:	b963      	cbnz	r3, 800ffa2 <_svfiprintf_r+0x32>
 800ff88:	2140      	movs	r1, #64	; 0x40
 800ff8a:	f7fd fcb3 	bl	800d8f4 <_malloc_r>
 800ff8e:	6028      	str	r0, [r5, #0]
 800ff90:	6128      	str	r0, [r5, #16]
 800ff92:	b920      	cbnz	r0, 800ff9e <_svfiprintf_r+0x2e>
 800ff94:	230c      	movs	r3, #12
 800ff96:	603b      	str	r3, [r7, #0]
 800ff98:	f04f 30ff 	mov.w	r0, #4294967295
 800ff9c:	e0d0      	b.n	8010140 <_svfiprintf_r+0x1d0>
 800ff9e:	2340      	movs	r3, #64	; 0x40
 800ffa0:	616b      	str	r3, [r5, #20]
 800ffa2:	2300      	movs	r3, #0
 800ffa4:	9309      	str	r3, [sp, #36]	; 0x24
 800ffa6:	2320      	movs	r3, #32
 800ffa8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ffac:	f8cd 800c 	str.w	r8, [sp, #12]
 800ffb0:	2330      	movs	r3, #48	; 0x30
 800ffb2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8010158 <_svfiprintf_r+0x1e8>
 800ffb6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ffba:	f04f 0901 	mov.w	r9, #1
 800ffbe:	4623      	mov	r3, r4
 800ffc0:	469a      	mov	sl, r3
 800ffc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ffc6:	b10a      	cbz	r2, 800ffcc <_svfiprintf_r+0x5c>
 800ffc8:	2a25      	cmp	r2, #37	; 0x25
 800ffca:	d1f9      	bne.n	800ffc0 <_svfiprintf_r+0x50>
 800ffcc:	ebba 0b04 	subs.w	fp, sl, r4
 800ffd0:	d00b      	beq.n	800ffea <_svfiprintf_r+0x7a>
 800ffd2:	465b      	mov	r3, fp
 800ffd4:	4622      	mov	r2, r4
 800ffd6:	4629      	mov	r1, r5
 800ffd8:	4638      	mov	r0, r7
 800ffda:	f7ff ff6f 	bl	800febc <__ssputs_r>
 800ffde:	3001      	adds	r0, #1
 800ffe0:	f000 80a9 	beq.w	8010136 <_svfiprintf_r+0x1c6>
 800ffe4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ffe6:	445a      	add	r2, fp
 800ffe8:	9209      	str	r2, [sp, #36]	; 0x24
 800ffea:	f89a 3000 	ldrb.w	r3, [sl]
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	f000 80a1 	beq.w	8010136 <_svfiprintf_r+0x1c6>
 800fff4:	2300      	movs	r3, #0
 800fff6:	f04f 32ff 	mov.w	r2, #4294967295
 800fffa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fffe:	f10a 0a01 	add.w	sl, sl, #1
 8010002:	9304      	str	r3, [sp, #16]
 8010004:	9307      	str	r3, [sp, #28]
 8010006:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801000a:	931a      	str	r3, [sp, #104]	; 0x68
 801000c:	4654      	mov	r4, sl
 801000e:	2205      	movs	r2, #5
 8010010:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010014:	4850      	ldr	r0, [pc, #320]	; (8010158 <_svfiprintf_r+0x1e8>)
 8010016:	f7f0 f953 	bl	80002c0 <memchr>
 801001a:	9a04      	ldr	r2, [sp, #16]
 801001c:	b9d8      	cbnz	r0, 8010056 <_svfiprintf_r+0xe6>
 801001e:	06d0      	lsls	r0, r2, #27
 8010020:	bf44      	itt	mi
 8010022:	2320      	movmi	r3, #32
 8010024:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010028:	0711      	lsls	r1, r2, #28
 801002a:	bf44      	itt	mi
 801002c:	232b      	movmi	r3, #43	; 0x2b
 801002e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010032:	f89a 3000 	ldrb.w	r3, [sl]
 8010036:	2b2a      	cmp	r3, #42	; 0x2a
 8010038:	d015      	beq.n	8010066 <_svfiprintf_r+0xf6>
 801003a:	9a07      	ldr	r2, [sp, #28]
 801003c:	4654      	mov	r4, sl
 801003e:	2000      	movs	r0, #0
 8010040:	f04f 0c0a 	mov.w	ip, #10
 8010044:	4621      	mov	r1, r4
 8010046:	f811 3b01 	ldrb.w	r3, [r1], #1
 801004a:	3b30      	subs	r3, #48	; 0x30
 801004c:	2b09      	cmp	r3, #9
 801004e:	d94d      	bls.n	80100ec <_svfiprintf_r+0x17c>
 8010050:	b1b0      	cbz	r0, 8010080 <_svfiprintf_r+0x110>
 8010052:	9207      	str	r2, [sp, #28]
 8010054:	e014      	b.n	8010080 <_svfiprintf_r+0x110>
 8010056:	eba0 0308 	sub.w	r3, r0, r8
 801005a:	fa09 f303 	lsl.w	r3, r9, r3
 801005e:	4313      	orrs	r3, r2
 8010060:	9304      	str	r3, [sp, #16]
 8010062:	46a2      	mov	sl, r4
 8010064:	e7d2      	b.n	801000c <_svfiprintf_r+0x9c>
 8010066:	9b03      	ldr	r3, [sp, #12]
 8010068:	1d19      	adds	r1, r3, #4
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	9103      	str	r1, [sp, #12]
 801006e:	2b00      	cmp	r3, #0
 8010070:	bfbb      	ittet	lt
 8010072:	425b      	neglt	r3, r3
 8010074:	f042 0202 	orrlt.w	r2, r2, #2
 8010078:	9307      	strge	r3, [sp, #28]
 801007a:	9307      	strlt	r3, [sp, #28]
 801007c:	bfb8      	it	lt
 801007e:	9204      	strlt	r2, [sp, #16]
 8010080:	7823      	ldrb	r3, [r4, #0]
 8010082:	2b2e      	cmp	r3, #46	; 0x2e
 8010084:	d10c      	bne.n	80100a0 <_svfiprintf_r+0x130>
 8010086:	7863      	ldrb	r3, [r4, #1]
 8010088:	2b2a      	cmp	r3, #42	; 0x2a
 801008a:	d134      	bne.n	80100f6 <_svfiprintf_r+0x186>
 801008c:	9b03      	ldr	r3, [sp, #12]
 801008e:	1d1a      	adds	r2, r3, #4
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	9203      	str	r2, [sp, #12]
 8010094:	2b00      	cmp	r3, #0
 8010096:	bfb8      	it	lt
 8010098:	f04f 33ff 	movlt.w	r3, #4294967295
 801009c:	3402      	adds	r4, #2
 801009e:	9305      	str	r3, [sp, #20]
 80100a0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8010168 <_svfiprintf_r+0x1f8>
 80100a4:	7821      	ldrb	r1, [r4, #0]
 80100a6:	2203      	movs	r2, #3
 80100a8:	4650      	mov	r0, sl
 80100aa:	f7f0 f909 	bl	80002c0 <memchr>
 80100ae:	b138      	cbz	r0, 80100c0 <_svfiprintf_r+0x150>
 80100b0:	9b04      	ldr	r3, [sp, #16]
 80100b2:	eba0 000a 	sub.w	r0, r0, sl
 80100b6:	2240      	movs	r2, #64	; 0x40
 80100b8:	4082      	lsls	r2, r0
 80100ba:	4313      	orrs	r3, r2
 80100bc:	3401      	adds	r4, #1
 80100be:	9304      	str	r3, [sp, #16]
 80100c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80100c4:	4825      	ldr	r0, [pc, #148]	; (801015c <_svfiprintf_r+0x1ec>)
 80100c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80100ca:	2206      	movs	r2, #6
 80100cc:	f7f0 f8f8 	bl	80002c0 <memchr>
 80100d0:	2800      	cmp	r0, #0
 80100d2:	d038      	beq.n	8010146 <_svfiprintf_r+0x1d6>
 80100d4:	4b22      	ldr	r3, [pc, #136]	; (8010160 <_svfiprintf_r+0x1f0>)
 80100d6:	bb1b      	cbnz	r3, 8010120 <_svfiprintf_r+0x1b0>
 80100d8:	9b03      	ldr	r3, [sp, #12]
 80100da:	3307      	adds	r3, #7
 80100dc:	f023 0307 	bic.w	r3, r3, #7
 80100e0:	3308      	adds	r3, #8
 80100e2:	9303      	str	r3, [sp, #12]
 80100e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80100e6:	4433      	add	r3, r6
 80100e8:	9309      	str	r3, [sp, #36]	; 0x24
 80100ea:	e768      	b.n	800ffbe <_svfiprintf_r+0x4e>
 80100ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80100f0:	460c      	mov	r4, r1
 80100f2:	2001      	movs	r0, #1
 80100f4:	e7a6      	b.n	8010044 <_svfiprintf_r+0xd4>
 80100f6:	2300      	movs	r3, #0
 80100f8:	3401      	adds	r4, #1
 80100fa:	9305      	str	r3, [sp, #20]
 80100fc:	4619      	mov	r1, r3
 80100fe:	f04f 0c0a 	mov.w	ip, #10
 8010102:	4620      	mov	r0, r4
 8010104:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010108:	3a30      	subs	r2, #48	; 0x30
 801010a:	2a09      	cmp	r2, #9
 801010c:	d903      	bls.n	8010116 <_svfiprintf_r+0x1a6>
 801010e:	2b00      	cmp	r3, #0
 8010110:	d0c6      	beq.n	80100a0 <_svfiprintf_r+0x130>
 8010112:	9105      	str	r1, [sp, #20]
 8010114:	e7c4      	b.n	80100a0 <_svfiprintf_r+0x130>
 8010116:	fb0c 2101 	mla	r1, ip, r1, r2
 801011a:	4604      	mov	r4, r0
 801011c:	2301      	movs	r3, #1
 801011e:	e7f0      	b.n	8010102 <_svfiprintf_r+0x192>
 8010120:	ab03      	add	r3, sp, #12
 8010122:	9300      	str	r3, [sp, #0]
 8010124:	462a      	mov	r2, r5
 8010126:	4b0f      	ldr	r3, [pc, #60]	; (8010164 <_svfiprintf_r+0x1f4>)
 8010128:	a904      	add	r1, sp, #16
 801012a:	4638      	mov	r0, r7
 801012c:	f7fd fd0e 	bl	800db4c <_printf_float>
 8010130:	1c42      	adds	r2, r0, #1
 8010132:	4606      	mov	r6, r0
 8010134:	d1d6      	bne.n	80100e4 <_svfiprintf_r+0x174>
 8010136:	89ab      	ldrh	r3, [r5, #12]
 8010138:	065b      	lsls	r3, r3, #25
 801013a:	f53f af2d 	bmi.w	800ff98 <_svfiprintf_r+0x28>
 801013e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010140:	b01d      	add	sp, #116	; 0x74
 8010142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010146:	ab03      	add	r3, sp, #12
 8010148:	9300      	str	r3, [sp, #0]
 801014a:	462a      	mov	r2, r5
 801014c:	4b05      	ldr	r3, [pc, #20]	; (8010164 <_svfiprintf_r+0x1f4>)
 801014e:	a904      	add	r1, sp, #16
 8010150:	4638      	mov	r0, r7
 8010152:	f7fd ff9f 	bl	800e094 <_printf_i>
 8010156:	e7eb      	b.n	8010130 <_svfiprintf_r+0x1c0>
 8010158:	080187bc 	.word	0x080187bc
 801015c:	080187c6 	.word	0x080187c6
 8010160:	0800db4d 	.word	0x0800db4d
 8010164:	0800febd 	.word	0x0800febd
 8010168:	080187c2 	.word	0x080187c2

0801016c <__sfputc_r>:
 801016c:	6893      	ldr	r3, [r2, #8]
 801016e:	3b01      	subs	r3, #1
 8010170:	2b00      	cmp	r3, #0
 8010172:	b410      	push	{r4}
 8010174:	6093      	str	r3, [r2, #8]
 8010176:	da08      	bge.n	801018a <__sfputc_r+0x1e>
 8010178:	6994      	ldr	r4, [r2, #24]
 801017a:	42a3      	cmp	r3, r4
 801017c:	db01      	blt.n	8010182 <__sfputc_r+0x16>
 801017e:	290a      	cmp	r1, #10
 8010180:	d103      	bne.n	801018a <__sfputc_r+0x1e>
 8010182:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010186:	f7fe bb0b 	b.w	800e7a0 <__swbuf_r>
 801018a:	6813      	ldr	r3, [r2, #0]
 801018c:	1c58      	adds	r0, r3, #1
 801018e:	6010      	str	r0, [r2, #0]
 8010190:	7019      	strb	r1, [r3, #0]
 8010192:	4608      	mov	r0, r1
 8010194:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010198:	4770      	bx	lr

0801019a <__sfputs_r>:
 801019a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801019c:	4606      	mov	r6, r0
 801019e:	460f      	mov	r7, r1
 80101a0:	4614      	mov	r4, r2
 80101a2:	18d5      	adds	r5, r2, r3
 80101a4:	42ac      	cmp	r4, r5
 80101a6:	d101      	bne.n	80101ac <__sfputs_r+0x12>
 80101a8:	2000      	movs	r0, #0
 80101aa:	e007      	b.n	80101bc <__sfputs_r+0x22>
 80101ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80101b0:	463a      	mov	r2, r7
 80101b2:	4630      	mov	r0, r6
 80101b4:	f7ff ffda 	bl	801016c <__sfputc_r>
 80101b8:	1c43      	adds	r3, r0, #1
 80101ba:	d1f3      	bne.n	80101a4 <__sfputs_r+0xa>
 80101bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080101c0 <_vfiprintf_r>:
 80101c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101c4:	460d      	mov	r5, r1
 80101c6:	b09d      	sub	sp, #116	; 0x74
 80101c8:	4614      	mov	r4, r2
 80101ca:	4698      	mov	r8, r3
 80101cc:	4606      	mov	r6, r0
 80101ce:	b118      	cbz	r0, 80101d8 <_vfiprintf_r+0x18>
 80101d0:	6a03      	ldr	r3, [r0, #32]
 80101d2:	b90b      	cbnz	r3, 80101d8 <_vfiprintf_r+0x18>
 80101d4:	f7fe f9bc 	bl	800e550 <__sinit>
 80101d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80101da:	07d9      	lsls	r1, r3, #31
 80101dc:	d405      	bmi.n	80101ea <_vfiprintf_r+0x2a>
 80101de:	89ab      	ldrh	r3, [r5, #12]
 80101e0:	059a      	lsls	r2, r3, #22
 80101e2:	d402      	bmi.n	80101ea <_vfiprintf_r+0x2a>
 80101e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80101e6:	f7fe fc17 	bl	800ea18 <__retarget_lock_acquire_recursive>
 80101ea:	89ab      	ldrh	r3, [r5, #12]
 80101ec:	071b      	lsls	r3, r3, #28
 80101ee:	d501      	bpl.n	80101f4 <_vfiprintf_r+0x34>
 80101f0:	692b      	ldr	r3, [r5, #16]
 80101f2:	b99b      	cbnz	r3, 801021c <_vfiprintf_r+0x5c>
 80101f4:	4629      	mov	r1, r5
 80101f6:	4630      	mov	r0, r6
 80101f8:	f7fe fb10 	bl	800e81c <__swsetup_r>
 80101fc:	b170      	cbz	r0, 801021c <_vfiprintf_r+0x5c>
 80101fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010200:	07dc      	lsls	r4, r3, #31
 8010202:	d504      	bpl.n	801020e <_vfiprintf_r+0x4e>
 8010204:	f04f 30ff 	mov.w	r0, #4294967295
 8010208:	b01d      	add	sp, #116	; 0x74
 801020a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801020e:	89ab      	ldrh	r3, [r5, #12]
 8010210:	0598      	lsls	r0, r3, #22
 8010212:	d4f7      	bmi.n	8010204 <_vfiprintf_r+0x44>
 8010214:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010216:	f7fe fc00 	bl	800ea1a <__retarget_lock_release_recursive>
 801021a:	e7f3      	b.n	8010204 <_vfiprintf_r+0x44>
 801021c:	2300      	movs	r3, #0
 801021e:	9309      	str	r3, [sp, #36]	; 0x24
 8010220:	2320      	movs	r3, #32
 8010222:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010226:	f8cd 800c 	str.w	r8, [sp, #12]
 801022a:	2330      	movs	r3, #48	; 0x30
 801022c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80103e0 <_vfiprintf_r+0x220>
 8010230:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010234:	f04f 0901 	mov.w	r9, #1
 8010238:	4623      	mov	r3, r4
 801023a:	469a      	mov	sl, r3
 801023c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010240:	b10a      	cbz	r2, 8010246 <_vfiprintf_r+0x86>
 8010242:	2a25      	cmp	r2, #37	; 0x25
 8010244:	d1f9      	bne.n	801023a <_vfiprintf_r+0x7a>
 8010246:	ebba 0b04 	subs.w	fp, sl, r4
 801024a:	d00b      	beq.n	8010264 <_vfiprintf_r+0xa4>
 801024c:	465b      	mov	r3, fp
 801024e:	4622      	mov	r2, r4
 8010250:	4629      	mov	r1, r5
 8010252:	4630      	mov	r0, r6
 8010254:	f7ff ffa1 	bl	801019a <__sfputs_r>
 8010258:	3001      	adds	r0, #1
 801025a:	f000 80a9 	beq.w	80103b0 <_vfiprintf_r+0x1f0>
 801025e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010260:	445a      	add	r2, fp
 8010262:	9209      	str	r2, [sp, #36]	; 0x24
 8010264:	f89a 3000 	ldrb.w	r3, [sl]
 8010268:	2b00      	cmp	r3, #0
 801026a:	f000 80a1 	beq.w	80103b0 <_vfiprintf_r+0x1f0>
 801026e:	2300      	movs	r3, #0
 8010270:	f04f 32ff 	mov.w	r2, #4294967295
 8010274:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010278:	f10a 0a01 	add.w	sl, sl, #1
 801027c:	9304      	str	r3, [sp, #16]
 801027e:	9307      	str	r3, [sp, #28]
 8010280:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010284:	931a      	str	r3, [sp, #104]	; 0x68
 8010286:	4654      	mov	r4, sl
 8010288:	2205      	movs	r2, #5
 801028a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801028e:	4854      	ldr	r0, [pc, #336]	; (80103e0 <_vfiprintf_r+0x220>)
 8010290:	f7f0 f816 	bl	80002c0 <memchr>
 8010294:	9a04      	ldr	r2, [sp, #16]
 8010296:	b9d8      	cbnz	r0, 80102d0 <_vfiprintf_r+0x110>
 8010298:	06d1      	lsls	r1, r2, #27
 801029a:	bf44      	itt	mi
 801029c:	2320      	movmi	r3, #32
 801029e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80102a2:	0713      	lsls	r3, r2, #28
 80102a4:	bf44      	itt	mi
 80102a6:	232b      	movmi	r3, #43	; 0x2b
 80102a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80102ac:	f89a 3000 	ldrb.w	r3, [sl]
 80102b0:	2b2a      	cmp	r3, #42	; 0x2a
 80102b2:	d015      	beq.n	80102e0 <_vfiprintf_r+0x120>
 80102b4:	9a07      	ldr	r2, [sp, #28]
 80102b6:	4654      	mov	r4, sl
 80102b8:	2000      	movs	r0, #0
 80102ba:	f04f 0c0a 	mov.w	ip, #10
 80102be:	4621      	mov	r1, r4
 80102c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80102c4:	3b30      	subs	r3, #48	; 0x30
 80102c6:	2b09      	cmp	r3, #9
 80102c8:	d94d      	bls.n	8010366 <_vfiprintf_r+0x1a6>
 80102ca:	b1b0      	cbz	r0, 80102fa <_vfiprintf_r+0x13a>
 80102cc:	9207      	str	r2, [sp, #28]
 80102ce:	e014      	b.n	80102fa <_vfiprintf_r+0x13a>
 80102d0:	eba0 0308 	sub.w	r3, r0, r8
 80102d4:	fa09 f303 	lsl.w	r3, r9, r3
 80102d8:	4313      	orrs	r3, r2
 80102da:	9304      	str	r3, [sp, #16]
 80102dc:	46a2      	mov	sl, r4
 80102de:	e7d2      	b.n	8010286 <_vfiprintf_r+0xc6>
 80102e0:	9b03      	ldr	r3, [sp, #12]
 80102e2:	1d19      	adds	r1, r3, #4
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	9103      	str	r1, [sp, #12]
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	bfbb      	ittet	lt
 80102ec:	425b      	neglt	r3, r3
 80102ee:	f042 0202 	orrlt.w	r2, r2, #2
 80102f2:	9307      	strge	r3, [sp, #28]
 80102f4:	9307      	strlt	r3, [sp, #28]
 80102f6:	bfb8      	it	lt
 80102f8:	9204      	strlt	r2, [sp, #16]
 80102fa:	7823      	ldrb	r3, [r4, #0]
 80102fc:	2b2e      	cmp	r3, #46	; 0x2e
 80102fe:	d10c      	bne.n	801031a <_vfiprintf_r+0x15a>
 8010300:	7863      	ldrb	r3, [r4, #1]
 8010302:	2b2a      	cmp	r3, #42	; 0x2a
 8010304:	d134      	bne.n	8010370 <_vfiprintf_r+0x1b0>
 8010306:	9b03      	ldr	r3, [sp, #12]
 8010308:	1d1a      	adds	r2, r3, #4
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	9203      	str	r2, [sp, #12]
 801030e:	2b00      	cmp	r3, #0
 8010310:	bfb8      	it	lt
 8010312:	f04f 33ff 	movlt.w	r3, #4294967295
 8010316:	3402      	adds	r4, #2
 8010318:	9305      	str	r3, [sp, #20]
 801031a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80103f0 <_vfiprintf_r+0x230>
 801031e:	7821      	ldrb	r1, [r4, #0]
 8010320:	2203      	movs	r2, #3
 8010322:	4650      	mov	r0, sl
 8010324:	f7ef ffcc 	bl	80002c0 <memchr>
 8010328:	b138      	cbz	r0, 801033a <_vfiprintf_r+0x17a>
 801032a:	9b04      	ldr	r3, [sp, #16]
 801032c:	eba0 000a 	sub.w	r0, r0, sl
 8010330:	2240      	movs	r2, #64	; 0x40
 8010332:	4082      	lsls	r2, r0
 8010334:	4313      	orrs	r3, r2
 8010336:	3401      	adds	r4, #1
 8010338:	9304      	str	r3, [sp, #16]
 801033a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801033e:	4829      	ldr	r0, [pc, #164]	; (80103e4 <_vfiprintf_r+0x224>)
 8010340:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010344:	2206      	movs	r2, #6
 8010346:	f7ef ffbb 	bl	80002c0 <memchr>
 801034a:	2800      	cmp	r0, #0
 801034c:	d03f      	beq.n	80103ce <_vfiprintf_r+0x20e>
 801034e:	4b26      	ldr	r3, [pc, #152]	; (80103e8 <_vfiprintf_r+0x228>)
 8010350:	bb1b      	cbnz	r3, 801039a <_vfiprintf_r+0x1da>
 8010352:	9b03      	ldr	r3, [sp, #12]
 8010354:	3307      	adds	r3, #7
 8010356:	f023 0307 	bic.w	r3, r3, #7
 801035a:	3308      	adds	r3, #8
 801035c:	9303      	str	r3, [sp, #12]
 801035e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010360:	443b      	add	r3, r7
 8010362:	9309      	str	r3, [sp, #36]	; 0x24
 8010364:	e768      	b.n	8010238 <_vfiprintf_r+0x78>
 8010366:	fb0c 3202 	mla	r2, ip, r2, r3
 801036a:	460c      	mov	r4, r1
 801036c:	2001      	movs	r0, #1
 801036e:	e7a6      	b.n	80102be <_vfiprintf_r+0xfe>
 8010370:	2300      	movs	r3, #0
 8010372:	3401      	adds	r4, #1
 8010374:	9305      	str	r3, [sp, #20]
 8010376:	4619      	mov	r1, r3
 8010378:	f04f 0c0a 	mov.w	ip, #10
 801037c:	4620      	mov	r0, r4
 801037e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010382:	3a30      	subs	r2, #48	; 0x30
 8010384:	2a09      	cmp	r2, #9
 8010386:	d903      	bls.n	8010390 <_vfiprintf_r+0x1d0>
 8010388:	2b00      	cmp	r3, #0
 801038a:	d0c6      	beq.n	801031a <_vfiprintf_r+0x15a>
 801038c:	9105      	str	r1, [sp, #20]
 801038e:	e7c4      	b.n	801031a <_vfiprintf_r+0x15a>
 8010390:	fb0c 2101 	mla	r1, ip, r1, r2
 8010394:	4604      	mov	r4, r0
 8010396:	2301      	movs	r3, #1
 8010398:	e7f0      	b.n	801037c <_vfiprintf_r+0x1bc>
 801039a:	ab03      	add	r3, sp, #12
 801039c:	9300      	str	r3, [sp, #0]
 801039e:	462a      	mov	r2, r5
 80103a0:	4b12      	ldr	r3, [pc, #72]	; (80103ec <_vfiprintf_r+0x22c>)
 80103a2:	a904      	add	r1, sp, #16
 80103a4:	4630      	mov	r0, r6
 80103a6:	f7fd fbd1 	bl	800db4c <_printf_float>
 80103aa:	4607      	mov	r7, r0
 80103ac:	1c78      	adds	r0, r7, #1
 80103ae:	d1d6      	bne.n	801035e <_vfiprintf_r+0x19e>
 80103b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80103b2:	07d9      	lsls	r1, r3, #31
 80103b4:	d405      	bmi.n	80103c2 <_vfiprintf_r+0x202>
 80103b6:	89ab      	ldrh	r3, [r5, #12]
 80103b8:	059a      	lsls	r2, r3, #22
 80103ba:	d402      	bmi.n	80103c2 <_vfiprintf_r+0x202>
 80103bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80103be:	f7fe fb2c 	bl	800ea1a <__retarget_lock_release_recursive>
 80103c2:	89ab      	ldrh	r3, [r5, #12]
 80103c4:	065b      	lsls	r3, r3, #25
 80103c6:	f53f af1d 	bmi.w	8010204 <_vfiprintf_r+0x44>
 80103ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 80103cc:	e71c      	b.n	8010208 <_vfiprintf_r+0x48>
 80103ce:	ab03      	add	r3, sp, #12
 80103d0:	9300      	str	r3, [sp, #0]
 80103d2:	462a      	mov	r2, r5
 80103d4:	4b05      	ldr	r3, [pc, #20]	; (80103ec <_vfiprintf_r+0x22c>)
 80103d6:	a904      	add	r1, sp, #16
 80103d8:	4630      	mov	r0, r6
 80103da:	f7fd fe5b 	bl	800e094 <_printf_i>
 80103de:	e7e4      	b.n	80103aa <_vfiprintf_r+0x1ea>
 80103e0:	080187bc 	.word	0x080187bc
 80103e4:	080187c6 	.word	0x080187c6
 80103e8:	0800db4d 	.word	0x0800db4d
 80103ec:	0801019b 	.word	0x0801019b
 80103f0:	080187c2 	.word	0x080187c2

080103f4 <__swhatbuf_r>:
 80103f4:	b570      	push	{r4, r5, r6, lr}
 80103f6:	460c      	mov	r4, r1
 80103f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80103fc:	2900      	cmp	r1, #0
 80103fe:	b096      	sub	sp, #88	; 0x58
 8010400:	4615      	mov	r5, r2
 8010402:	461e      	mov	r6, r3
 8010404:	da0d      	bge.n	8010422 <__swhatbuf_r+0x2e>
 8010406:	89a3      	ldrh	r3, [r4, #12]
 8010408:	f013 0f80 	tst.w	r3, #128	; 0x80
 801040c:	f04f 0100 	mov.w	r1, #0
 8010410:	bf0c      	ite	eq
 8010412:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8010416:	2340      	movne	r3, #64	; 0x40
 8010418:	2000      	movs	r0, #0
 801041a:	6031      	str	r1, [r6, #0]
 801041c:	602b      	str	r3, [r5, #0]
 801041e:	b016      	add	sp, #88	; 0x58
 8010420:	bd70      	pop	{r4, r5, r6, pc}
 8010422:	466a      	mov	r2, sp
 8010424:	f000 f87c 	bl	8010520 <_fstat_r>
 8010428:	2800      	cmp	r0, #0
 801042a:	dbec      	blt.n	8010406 <__swhatbuf_r+0x12>
 801042c:	9901      	ldr	r1, [sp, #4]
 801042e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8010432:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8010436:	4259      	negs	r1, r3
 8010438:	4159      	adcs	r1, r3
 801043a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801043e:	e7eb      	b.n	8010418 <__swhatbuf_r+0x24>

08010440 <__smakebuf_r>:
 8010440:	898b      	ldrh	r3, [r1, #12]
 8010442:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010444:	079d      	lsls	r5, r3, #30
 8010446:	4606      	mov	r6, r0
 8010448:	460c      	mov	r4, r1
 801044a:	d507      	bpl.n	801045c <__smakebuf_r+0x1c>
 801044c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010450:	6023      	str	r3, [r4, #0]
 8010452:	6123      	str	r3, [r4, #16]
 8010454:	2301      	movs	r3, #1
 8010456:	6163      	str	r3, [r4, #20]
 8010458:	b002      	add	sp, #8
 801045a:	bd70      	pop	{r4, r5, r6, pc}
 801045c:	ab01      	add	r3, sp, #4
 801045e:	466a      	mov	r2, sp
 8010460:	f7ff ffc8 	bl	80103f4 <__swhatbuf_r>
 8010464:	9900      	ldr	r1, [sp, #0]
 8010466:	4605      	mov	r5, r0
 8010468:	4630      	mov	r0, r6
 801046a:	f7fd fa43 	bl	800d8f4 <_malloc_r>
 801046e:	b948      	cbnz	r0, 8010484 <__smakebuf_r+0x44>
 8010470:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010474:	059a      	lsls	r2, r3, #22
 8010476:	d4ef      	bmi.n	8010458 <__smakebuf_r+0x18>
 8010478:	f023 0303 	bic.w	r3, r3, #3
 801047c:	f043 0302 	orr.w	r3, r3, #2
 8010480:	81a3      	strh	r3, [r4, #12]
 8010482:	e7e3      	b.n	801044c <__smakebuf_r+0xc>
 8010484:	89a3      	ldrh	r3, [r4, #12]
 8010486:	6020      	str	r0, [r4, #0]
 8010488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801048c:	81a3      	strh	r3, [r4, #12]
 801048e:	9b00      	ldr	r3, [sp, #0]
 8010490:	6163      	str	r3, [r4, #20]
 8010492:	9b01      	ldr	r3, [sp, #4]
 8010494:	6120      	str	r0, [r4, #16]
 8010496:	b15b      	cbz	r3, 80104b0 <__smakebuf_r+0x70>
 8010498:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801049c:	4630      	mov	r0, r6
 801049e:	f000 f851 	bl	8010544 <_isatty_r>
 80104a2:	b128      	cbz	r0, 80104b0 <__smakebuf_r+0x70>
 80104a4:	89a3      	ldrh	r3, [r4, #12]
 80104a6:	f023 0303 	bic.w	r3, r3, #3
 80104aa:	f043 0301 	orr.w	r3, r3, #1
 80104ae:	81a3      	strh	r3, [r4, #12]
 80104b0:	89a3      	ldrh	r3, [r4, #12]
 80104b2:	431d      	orrs	r5, r3
 80104b4:	81a5      	strh	r5, [r4, #12]
 80104b6:	e7cf      	b.n	8010458 <__smakebuf_r+0x18>

080104b8 <_putc_r>:
 80104b8:	b570      	push	{r4, r5, r6, lr}
 80104ba:	460d      	mov	r5, r1
 80104bc:	4614      	mov	r4, r2
 80104be:	4606      	mov	r6, r0
 80104c0:	b118      	cbz	r0, 80104ca <_putc_r+0x12>
 80104c2:	6a03      	ldr	r3, [r0, #32]
 80104c4:	b90b      	cbnz	r3, 80104ca <_putc_r+0x12>
 80104c6:	f7fe f843 	bl	800e550 <__sinit>
 80104ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80104cc:	07d8      	lsls	r0, r3, #31
 80104ce:	d405      	bmi.n	80104dc <_putc_r+0x24>
 80104d0:	89a3      	ldrh	r3, [r4, #12]
 80104d2:	0599      	lsls	r1, r3, #22
 80104d4:	d402      	bmi.n	80104dc <_putc_r+0x24>
 80104d6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80104d8:	f7fe fa9e 	bl	800ea18 <__retarget_lock_acquire_recursive>
 80104dc:	68a3      	ldr	r3, [r4, #8]
 80104de:	3b01      	subs	r3, #1
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	60a3      	str	r3, [r4, #8]
 80104e4:	da05      	bge.n	80104f2 <_putc_r+0x3a>
 80104e6:	69a2      	ldr	r2, [r4, #24]
 80104e8:	4293      	cmp	r3, r2
 80104ea:	db12      	blt.n	8010512 <_putc_r+0x5a>
 80104ec:	b2eb      	uxtb	r3, r5
 80104ee:	2b0a      	cmp	r3, #10
 80104f0:	d00f      	beq.n	8010512 <_putc_r+0x5a>
 80104f2:	6823      	ldr	r3, [r4, #0]
 80104f4:	1c5a      	adds	r2, r3, #1
 80104f6:	6022      	str	r2, [r4, #0]
 80104f8:	701d      	strb	r5, [r3, #0]
 80104fa:	b2ed      	uxtb	r5, r5
 80104fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80104fe:	07da      	lsls	r2, r3, #31
 8010500:	d405      	bmi.n	801050e <_putc_r+0x56>
 8010502:	89a3      	ldrh	r3, [r4, #12]
 8010504:	059b      	lsls	r3, r3, #22
 8010506:	d402      	bmi.n	801050e <_putc_r+0x56>
 8010508:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801050a:	f7fe fa86 	bl	800ea1a <__retarget_lock_release_recursive>
 801050e:	4628      	mov	r0, r5
 8010510:	bd70      	pop	{r4, r5, r6, pc}
 8010512:	4629      	mov	r1, r5
 8010514:	4622      	mov	r2, r4
 8010516:	4630      	mov	r0, r6
 8010518:	f7fe f942 	bl	800e7a0 <__swbuf_r>
 801051c:	4605      	mov	r5, r0
 801051e:	e7ed      	b.n	80104fc <_putc_r+0x44>

08010520 <_fstat_r>:
 8010520:	b538      	push	{r3, r4, r5, lr}
 8010522:	4d07      	ldr	r5, [pc, #28]	; (8010540 <_fstat_r+0x20>)
 8010524:	2300      	movs	r3, #0
 8010526:	4604      	mov	r4, r0
 8010528:	4608      	mov	r0, r1
 801052a:	4611      	mov	r1, r2
 801052c:	602b      	str	r3, [r5, #0]
 801052e:	f7f1 fda8 	bl	8002082 <_fstat>
 8010532:	1c43      	adds	r3, r0, #1
 8010534:	d102      	bne.n	801053c <_fstat_r+0x1c>
 8010536:	682b      	ldr	r3, [r5, #0]
 8010538:	b103      	cbz	r3, 801053c <_fstat_r+0x1c>
 801053a:	6023      	str	r3, [r4, #0]
 801053c:	bd38      	pop	{r3, r4, r5, pc}
 801053e:	bf00      	nop
 8010540:	20000638 	.word	0x20000638

08010544 <_isatty_r>:
 8010544:	b538      	push	{r3, r4, r5, lr}
 8010546:	4d06      	ldr	r5, [pc, #24]	; (8010560 <_isatty_r+0x1c>)
 8010548:	2300      	movs	r3, #0
 801054a:	4604      	mov	r4, r0
 801054c:	4608      	mov	r0, r1
 801054e:	602b      	str	r3, [r5, #0]
 8010550:	f7f1 fda7 	bl	80020a2 <_isatty>
 8010554:	1c43      	adds	r3, r0, #1
 8010556:	d102      	bne.n	801055e <_isatty_r+0x1a>
 8010558:	682b      	ldr	r3, [r5, #0]
 801055a:	b103      	cbz	r3, 801055e <_isatty_r+0x1a>
 801055c:	6023      	str	r3, [r4, #0]
 801055e:	bd38      	pop	{r3, r4, r5, pc}
 8010560:	20000638 	.word	0x20000638

08010564 <__assert_func>:
 8010564:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010566:	4614      	mov	r4, r2
 8010568:	461a      	mov	r2, r3
 801056a:	4b09      	ldr	r3, [pc, #36]	; (8010590 <__assert_func+0x2c>)
 801056c:	681b      	ldr	r3, [r3, #0]
 801056e:	4605      	mov	r5, r0
 8010570:	68d8      	ldr	r0, [r3, #12]
 8010572:	b14c      	cbz	r4, 8010588 <__assert_func+0x24>
 8010574:	4b07      	ldr	r3, [pc, #28]	; (8010594 <__assert_func+0x30>)
 8010576:	9100      	str	r1, [sp, #0]
 8010578:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801057c:	4906      	ldr	r1, [pc, #24]	; (8010598 <__assert_func+0x34>)
 801057e:	462b      	mov	r3, r5
 8010580:	f000 f85c 	bl	801063c <fiprintf>
 8010584:	f000 f86c 	bl	8010660 <abort>
 8010588:	4b04      	ldr	r3, [pc, #16]	; (801059c <__assert_func+0x38>)
 801058a:	461c      	mov	r4, r3
 801058c:	e7f3      	b.n	8010576 <__assert_func+0x12>
 801058e:	bf00      	nop
 8010590:	200001e4 	.word	0x200001e4
 8010594:	080187d7 	.word	0x080187d7
 8010598:	080187e4 	.word	0x080187e4
 801059c:	08018812 	.word	0x08018812

080105a0 <__ascii_mbtowc>:
 80105a0:	b082      	sub	sp, #8
 80105a2:	b901      	cbnz	r1, 80105a6 <__ascii_mbtowc+0x6>
 80105a4:	a901      	add	r1, sp, #4
 80105a6:	b142      	cbz	r2, 80105ba <__ascii_mbtowc+0x1a>
 80105a8:	b14b      	cbz	r3, 80105be <__ascii_mbtowc+0x1e>
 80105aa:	7813      	ldrb	r3, [r2, #0]
 80105ac:	600b      	str	r3, [r1, #0]
 80105ae:	7812      	ldrb	r2, [r2, #0]
 80105b0:	1e10      	subs	r0, r2, #0
 80105b2:	bf18      	it	ne
 80105b4:	2001      	movne	r0, #1
 80105b6:	b002      	add	sp, #8
 80105b8:	4770      	bx	lr
 80105ba:	4610      	mov	r0, r2
 80105bc:	e7fb      	b.n	80105b6 <__ascii_mbtowc+0x16>
 80105be:	f06f 0001 	mvn.w	r0, #1
 80105c2:	e7f8      	b.n	80105b6 <__ascii_mbtowc+0x16>

080105c4 <_realloc_r>:
 80105c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105c8:	4680      	mov	r8, r0
 80105ca:	4614      	mov	r4, r2
 80105cc:	460e      	mov	r6, r1
 80105ce:	b921      	cbnz	r1, 80105da <_realloc_r+0x16>
 80105d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80105d4:	4611      	mov	r1, r2
 80105d6:	f7fd b98d 	b.w	800d8f4 <_malloc_r>
 80105da:	b92a      	cbnz	r2, 80105e8 <_realloc_r+0x24>
 80105dc:	f7ff f8a6 	bl	800f72c <_free_r>
 80105e0:	4625      	mov	r5, r4
 80105e2:	4628      	mov	r0, r5
 80105e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105e8:	f000 f841 	bl	801066e <_malloc_usable_size_r>
 80105ec:	4284      	cmp	r4, r0
 80105ee:	4607      	mov	r7, r0
 80105f0:	d802      	bhi.n	80105f8 <_realloc_r+0x34>
 80105f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80105f6:	d812      	bhi.n	801061e <_realloc_r+0x5a>
 80105f8:	4621      	mov	r1, r4
 80105fa:	4640      	mov	r0, r8
 80105fc:	f7fd f97a 	bl	800d8f4 <_malloc_r>
 8010600:	4605      	mov	r5, r0
 8010602:	2800      	cmp	r0, #0
 8010604:	d0ed      	beq.n	80105e2 <_realloc_r+0x1e>
 8010606:	42bc      	cmp	r4, r7
 8010608:	4622      	mov	r2, r4
 801060a:	4631      	mov	r1, r6
 801060c:	bf28      	it	cs
 801060e:	463a      	movcs	r2, r7
 8010610:	f7fe fa04 	bl	800ea1c <memcpy>
 8010614:	4631      	mov	r1, r6
 8010616:	4640      	mov	r0, r8
 8010618:	f7ff f888 	bl	800f72c <_free_r>
 801061c:	e7e1      	b.n	80105e2 <_realloc_r+0x1e>
 801061e:	4635      	mov	r5, r6
 8010620:	e7df      	b.n	80105e2 <_realloc_r+0x1e>

08010622 <__ascii_wctomb>:
 8010622:	b149      	cbz	r1, 8010638 <__ascii_wctomb+0x16>
 8010624:	2aff      	cmp	r2, #255	; 0xff
 8010626:	bf85      	ittet	hi
 8010628:	238a      	movhi	r3, #138	; 0x8a
 801062a:	6003      	strhi	r3, [r0, #0]
 801062c:	700a      	strbls	r2, [r1, #0]
 801062e:	f04f 30ff 	movhi.w	r0, #4294967295
 8010632:	bf98      	it	ls
 8010634:	2001      	movls	r0, #1
 8010636:	4770      	bx	lr
 8010638:	4608      	mov	r0, r1
 801063a:	4770      	bx	lr

0801063c <fiprintf>:
 801063c:	b40e      	push	{r1, r2, r3}
 801063e:	b503      	push	{r0, r1, lr}
 8010640:	4601      	mov	r1, r0
 8010642:	ab03      	add	r3, sp, #12
 8010644:	4805      	ldr	r0, [pc, #20]	; (801065c <fiprintf+0x20>)
 8010646:	f853 2b04 	ldr.w	r2, [r3], #4
 801064a:	6800      	ldr	r0, [r0, #0]
 801064c:	9301      	str	r3, [sp, #4]
 801064e:	f7ff fdb7 	bl	80101c0 <_vfiprintf_r>
 8010652:	b002      	add	sp, #8
 8010654:	f85d eb04 	ldr.w	lr, [sp], #4
 8010658:	b003      	add	sp, #12
 801065a:	4770      	bx	lr
 801065c:	200001e4 	.word	0x200001e4

08010660 <abort>:
 8010660:	b508      	push	{r3, lr}
 8010662:	2006      	movs	r0, #6
 8010664:	f000 f834 	bl	80106d0 <raise>
 8010668:	2001      	movs	r0, #1
 801066a:	f7f1 fcd7 	bl	800201c <_exit>

0801066e <_malloc_usable_size_r>:
 801066e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010672:	1f18      	subs	r0, r3, #4
 8010674:	2b00      	cmp	r3, #0
 8010676:	bfbc      	itt	lt
 8010678:	580b      	ldrlt	r3, [r1, r0]
 801067a:	18c0      	addlt	r0, r0, r3
 801067c:	4770      	bx	lr

0801067e <_raise_r>:
 801067e:	291f      	cmp	r1, #31
 8010680:	b538      	push	{r3, r4, r5, lr}
 8010682:	4604      	mov	r4, r0
 8010684:	460d      	mov	r5, r1
 8010686:	d904      	bls.n	8010692 <_raise_r+0x14>
 8010688:	2316      	movs	r3, #22
 801068a:	6003      	str	r3, [r0, #0]
 801068c:	f04f 30ff 	mov.w	r0, #4294967295
 8010690:	bd38      	pop	{r3, r4, r5, pc}
 8010692:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8010694:	b112      	cbz	r2, 801069c <_raise_r+0x1e>
 8010696:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801069a:	b94b      	cbnz	r3, 80106b0 <_raise_r+0x32>
 801069c:	4620      	mov	r0, r4
 801069e:	f000 f831 	bl	8010704 <_getpid_r>
 80106a2:	462a      	mov	r2, r5
 80106a4:	4601      	mov	r1, r0
 80106a6:	4620      	mov	r0, r4
 80106a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80106ac:	f000 b818 	b.w	80106e0 <_kill_r>
 80106b0:	2b01      	cmp	r3, #1
 80106b2:	d00a      	beq.n	80106ca <_raise_r+0x4c>
 80106b4:	1c59      	adds	r1, r3, #1
 80106b6:	d103      	bne.n	80106c0 <_raise_r+0x42>
 80106b8:	2316      	movs	r3, #22
 80106ba:	6003      	str	r3, [r0, #0]
 80106bc:	2001      	movs	r0, #1
 80106be:	e7e7      	b.n	8010690 <_raise_r+0x12>
 80106c0:	2400      	movs	r4, #0
 80106c2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80106c6:	4628      	mov	r0, r5
 80106c8:	4798      	blx	r3
 80106ca:	2000      	movs	r0, #0
 80106cc:	e7e0      	b.n	8010690 <_raise_r+0x12>
	...

080106d0 <raise>:
 80106d0:	4b02      	ldr	r3, [pc, #8]	; (80106dc <raise+0xc>)
 80106d2:	4601      	mov	r1, r0
 80106d4:	6818      	ldr	r0, [r3, #0]
 80106d6:	f7ff bfd2 	b.w	801067e <_raise_r>
 80106da:	bf00      	nop
 80106dc:	200001e4 	.word	0x200001e4

080106e0 <_kill_r>:
 80106e0:	b538      	push	{r3, r4, r5, lr}
 80106e2:	4d07      	ldr	r5, [pc, #28]	; (8010700 <_kill_r+0x20>)
 80106e4:	2300      	movs	r3, #0
 80106e6:	4604      	mov	r4, r0
 80106e8:	4608      	mov	r0, r1
 80106ea:	4611      	mov	r1, r2
 80106ec:	602b      	str	r3, [r5, #0]
 80106ee:	f7f1 fc85 	bl	8001ffc <_kill>
 80106f2:	1c43      	adds	r3, r0, #1
 80106f4:	d102      	bne.n	80106fc <_kill_r+0x1c>
 80106f6:	682b      	ldr	r3, [r5, #0]
 80106f8:	b103      	cbz	r3, 80106fc <_kill_r+0x1c>
 80106fa:	6023      	str	r3, [r4, #0]
 80106fc:	bd38      	pop	{r3, r4, r5, pc}
 80106fe:	bf00      	nop
 8010700:	20000638 	.word	0x20000638

08010704 <_getpid_r>:
 8010704:	f7f1 bc72 	b.w	8001fec <_getpid>

08010708 <acos>:
 8010708:	b538      	push	{r3, r4, r5, lr}
 801070a:	ed2d 8b02 	vpush	{d8}
 801070e:	ec55 4b10 	vmov	r4, r5, d0
 8010712:	f000 fc35 	bl	8010f80 <__ieee754_acos>
 8010716:	4622      	mov	r2, r4
 8010718:	462b      	mov	r3, r5
 801071a:	4620      	mov	r0, r4
 801071c:	4629      	mov	r1, r5
 801071e:	eeb0 8a40 	vmov.f32	s16, s0
 8010722:	eef0 8a60 	vmov.f32	s17, s1
 8010726:	f7f0 fa79 	bl	8000c1c <__aeabi_dcmpun>
 801072a:	b9a8      	cbnz	r0, 8010758 <acos+0x50>
 801072c:	ec45 4b10 	vmov	d0, r4, r5
 8010730:	f000 f8ba 	bl	80108a8 <fabs>
 8010734:	4b0c      	ldr	r3, [pc, #48]	; (8010768 <acos+0x60>)
 8010736:	ec51 0b10 	vmov	r0, r1, d0
 801073a:	2200      	movs	r2, #0
 801073c:	f7f0 fa64 	bl	8000c08 <__aeabi_dcmpgt>
 8010740:	b150      	cbz	r0, 8010758 <acos+0x50>
 8010742:	f7fe f93f 	bl	800e9c4 <__errno>
 8010746:	ecbd 8b02 	vpop	{d8}
 801074a:	2321      	movs	r3, #33	; 0x21
 801074c:	6003      	str	r3, [r0, #0]
 801074e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010752:	4806      	ldr	r0, [pc, #24]	; (801076c <acos+0x64>)
 8010754:	f000 b948 	b.w	80109e8 <nan>
 8010758:	eeb0 0a48 	vmov.f32	s0, s16
 801075c:	eef0 0a68 	vmov.f32	s1, s17
 8010760:	ecbd 8b02 	vpop	{d8}
 8010764:	bd38      	pop	{r3, r4, r5, pc}
 8010766:	bf00      	nop
 8010768:	3ff00000 	.word	0x3ff00000
 801076c:	08018812 	.word	0x08018812

08010770 <pow>:
 8010770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010772:	ed2d 8b02 	vpush	{d8}
 8010776:	eeb0 8a40 	vmov.f32	s16, s0
 801077a:	eef0 8a60 	vmov.f32	s17, s1
 801077e:	ec55 4b11 	vmov	r4, r5, d1
 8010782:	f000 fe5d 	bl	8011440 <__ieee754_pow>
 8010786:	4622      	mov	r2, r4
 8010788:	462b      	mov	r3, r5
 801078a:	4620      	mov	r0, r4
 801078c:	4629      	mov	r1, r5
 801078e:	ec57 6b10 	vmov	r6, r7, d0
 8010792:	f7f0 fa43 	bl	8000c1c <__aeabi_dcmpun>
 8010796:	2800      	cmp	r0, #0
 8010798:	d13b      	bne.n	8010812 <pow+0xa2>
 801079a:	ec51 0b18 	vmov	r0, r1, d8
 801079e:	2200      	movs	r2, #0
 80107a0:	2300      	movs	r3, #0
 80107a2:	f7f0 fa09 	bl	8000bb8 <__aeabi_dcmpeq>
 80107a6:	b1b8      	cbz	r0, 80107d8 <pow+0x68>
 80107a8:	2200      	movs	r2, #0
 80107aa:	2300      	movs	r3, #0
 80107ac:	4620      	mov	r0, r4
 80107ae:	4629      	mov	r1, r5
 80107b0:	f7f0 fa02 	bl	8000bb8 <__aeabi_dcmpeq>
 80107b4:	2800      	cmp	r0, #0
 80107b6:	d146      	bne.n	8010846 <pow+0xd6>
 80107b8:	ec45 4b10 	vmov	d0, r4, r5
 80107bc:	f000 f906 	bl	80109cc <finite>
 80107c0:	b338      	cbz	r0, 8010812 <pow+0xa2>
 80107c2:	2200      	movs	r2, #0
 80107c4:	2300      	movs	r3, #0
 80107c6:	4620      	mov	r0, r4
 80107c8:	4629      	mov	r1, r5
 80107ca:	f7f0 f9ff 	bl	8000bcc <__aeabi_dcmplt>
 80107ce:	b300      	cbz	r0, 8010812 <pow+0xa2>
 80107d0:	f7fe f8f8 	bl	800e9c4 <__errno>
 80107d4:	2322      	movs	r3, #34	; 0x22
 80107d6:	e01b      	b.n	8010810 <pow+0xa0>
 80107d8:	ec47 6b10 	vmov	d0, r6, r7
 80107dc:	f000 f8f6 	bl	80109cc <finite>
 80107e0:	b9e0      	cbnz	r0, 801081c <pow+0xac>
 80107e2:	eeb0 0a48 	vmov.f32	s0, s16
 80107e6:	eef0 0a68 	vmov.f32	s1, s17
 80107ea:	f000 f8ef 	bl	80109cc <finite>
 80107ee:	b1a8      	cbz	r0, 801081c <pow+0xac>
 80107f0:	ec45 4b10 	vmov	d0, r4, r5
 80107f4:	f000 f8ea 	bl	80109cc <finite>
 80107f8:	b180      	cbz	r0, 801081c <pow+0xac>
 80107fa:	4632      	mov	r2, r6
 80107fc:	463b      	mov	r3, r7
 80107fe:	4630      	mov	r0, r6
 8010800:	4639      	mov	r1, r7
 8010802:	f7f0 fa0b 	bl	8000c1c <__aeabi_dcmpun>
 8010806:	2800      	cmp	r0, #0
 8010808:	d0e2      	beq.n	80107d0 <pow+0x60>
 801080a:	f7fe f8db 	bl	800e9c4 <__errno>
 801080e:	2321      	movs	r3, #33	; 0x21
 8010810:	6003      	str	r3, [r0, #0]
 8010812:	ecbd 8b02 	vpop	{d8}
 8010816:	ec47 6b10 	vmov	d0, r6, r7
 801081a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801081c:	2200      	movs	r2, #0
 801081e:	2300      	movs	r3, #0
 8010820:	4630      	mov	r0, r6
 8010822:	4639      	mov	r1, r7
 8010824:	f7f0 f9c8 	bl	8000bb8 <__aeabi_dcmpeq>
 8010828:	2800      	cmp	r0, #0
 801082a:	d0f2      	beq.n	8010812 <pow+0xa2>
 801082c:	eeb0 0a48 	vmov.f32	s0, s16
 8010830:	eef0 0a68 	vmov.f32	s1, s17
 8010834:	f000 f8ca 	bl	80109cc <finite>
 8010838:	2800      	cmp	r0, #0
 801083a:	d0ea      	beq.n	8010812 <pow+0xa2>
 801083c:	ec45 4b10 	vmov	d0, r4, r5
 8010840:	f000 f8c4 	bl	80109cc <finite>
 8010844:	e7c3      	b.n	80107ce <pow+0x5e>
 8010846:	4f01      	ldr	r7, [pc, #4]	; (801084c <pow+0xdc>)
 8010848:	2600      	movs	r6, #0
 801084a:	e7e2      	b.n	8010812 <pow+0xa2>
 801084c:	3ff00000 	.word	0x3ff00000

08010850 <sqrt>:
 8010850:	b538      	push	{r3, r4, r5, lr}
 8010852:	ed2d 8b02 	vpush	{d8}
 8010856:	ec55 4b10 	vmov	r4, r5, d0
 801085a:	f000 f90b 	bl	8010a74 <__ieee754_sqrt>
 801085e:	4622      	mov	r2, r4
 8010860:	462b      	mov	r3, r5
 8010862:	4620      	mov	r0, r4
 8010864:	4629      	mov	r1, r5
 8010866:	eeb0 8a40 	vmov.f32	s16, s0
 801086a:	eef0 8a60 	vmov.f32	s17, s1
 801086e:	f7f0 f9d5 	bl	8000c1c <__aeabi_dcmpun>
 8010872:	b990      	cbnz	r0, 801089a <sqrt+0x4a>
 8010874:	2200      	movs	r2, #0
 8010876:	2300      	movs	r3, #0
 8010878:	4620      	mov	r0, r4
 801087a:	4629      	mov	r1, r5
 801087c:	f7f0 f9a6 	bl	8000bcc <__aeabi_dcmplt>
 8010880:	b158      	cbz	r0, 801089a <sqrt+0x4a>
 8010882:	f7fe f89f 	bl	800e9c4 <__errno>
 8010886:	2321      	movs	r3, #33	; 0x21
 8010888:	6003      	str	r3, [r0, #0]
 801088a:	2200      	movs	r2, #0
 801088c:	2300      	movs	r3, #0
 801088e:	4610      	mov	r0, r2
 8010890:	4619      	mov	r1, r3
 8010892:	f7f0 f853 	bl	800093c <__aeabi_ddiv>
 8010896:	ec41 0b18 	vmov	d8, r0, r1
 801089a:	eeb0 0a48 	vmov.f32	s0, s16
 801089e:	eef0 0a68 	vmov.f32	s1, s17
 80108a2:	ecbd 8b02 	vpop	{d8}
 80108a6:	bd38      	pop	{r3, r4, r5, pc}

080108a8 <fabs>:
 80108a8:	ec51 0b10 	vmov	r0, r1, d0
 80108ac:	ee10 2a10 	vmov	r2, s0
 80108b0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80108b4:	ec43 2b10 	vmov	d0, r2, r3
 80108b8:	4770      	bx	lr
 80108ba:	0000      	movs	r0, r0
 80108bc:	0000      	movs	r0, r0
	...

080108c0 <sin>:
 80108c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80108c2:	ec53 2b10 	vmov	r2, r3, d0
 80108c6:	4828      	ldr	r0, [pc, #160]	; (8010968 <sin+0xa8>)
 80108c8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80108cc:	4281      	cmp	r1, r0
 80108ce:	dc07      	bgt.n	80108e0 <sin+0x20>
 80108d0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8010960 <sin+0xa0>
 80108d4:	2000      	movs	r0, #0
 80108d6:	b005      	add	sp, #20
 80108d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80108dc:	f000 ba90 	b.w	8010e00 <__kernel_sin>
 80108e0:	4822      	ldr	r0, [pc, #136]	; (801096c <sin+0xac>)
 80108e2:	4281      	cmp	r1, r0
 80108e4:	dd09      	ble.n	80108fa <sin+0x3a>
 80108e6:	ee10 0a10 	vmov	r0, s0
 80108ea:	4619      	mov	r1, r3
 80108ec:	f7ef fd44 	bl	8000378 <__aeabi_dsub>
 80108f0:	ec41 0b10 	vmov	d0, r0, r1
 80108f4:	b005      	add	sp, #20
 80108f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80108fa:	4668      	mov	r0, sp
 80108fc:	f001 facc 	bl	8011e98 <__ieee754_rem_pio2>
 8010900:	f000 0003 	and.w	r0, r0, #3
 8010904:	2801      	cmp	r0, #1
 8010906:	d00c      	beq.n	8010922 <sin+0x62>
 8010908:	2802      	cmp	r0, #2
 801090a:	d011      	beq.n	8010930 <sin+0x70>
 801090c:	b9f0      	cbnz	r0, 801094c <sin+0x8c>
 801090e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010912:	ed9d 0b00 	vldr	d0, [sp]
 8010916:	2001      	movs	r0, #1
 8010918:	f000 fa72 	bl	8010e00 <__kernel_sin>
 801091c:	ec51 0b10 	vmov	r0, r1, d0
 8010920:	e7e6      	b.n	80108f0 <sin+0x30>
 8010922:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010926:	ed9d 0b00 	vldr	d0, [sp]
 801092a:	f000 f9a1 	bl	8010c70 <__kernel_cos>
 801092e:	e7f5      	b.n	801091c <sin+0x5c>
 8010930:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010934:	ed9d 0b00 	vldr	d0, [sp]
 8010938:	2001      	movs	r0, #1
 801093a:	f000 fa61 	bl	8010e00 <__kernel_sin>
 801093e:	ec53 2b10 	vmov	r2, r3, d0
 8010942:	ee10 0a10 	vmov	r0, s0
 8010946:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801094a:	e7d1      	b.n	80108f0 <sin+0x30>
 801094c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010950:	ed9d 0b00 	vldr	d0, [sp]
 8010954:	f000 f98c 	bl	8010c70 <__kernel_cos>
 8010958:	e7f1      	b.n	801093e <sin+0x7e>
 801095a:	bf00      	nop
 801095c:	f3af 8000 	nop.w
	...
 8010968:	3fe921fb 	.word	0x3fe921fb
 801096c:	7fefffff 	.word	0x7fefffff

08010970 <log10f>:
 8010970:	b508      	push	{r3, lr}
 8010972:	ed2d 8b02 	vpush	{d8}
 8010976:	eeb0 8a40 	vmov.f32	s16, s0
 801097a:	f001 fc93 	bl	80122a4 <__ieee754_log10f>
 801097e:	eeb4 8a48 	vcmp.f32	s16, s16
 8010982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010986:	d60f      	bvs.n	80109a8 <log10f+0x38>
 8010988:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801098c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010990:	d80a      	bhi.n	80109a8 <log10f+0x38>
 8010992:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8010996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801099a:	d108      	bne.n	80109ae <log10f+0x3e>
 801099c:	f7fe f812 	bl	800e9c4 <__errno>
 80109a0:	2322      	movs	r3, #34	; 0x22
 80109a2:	ed9f 0a08 	vldr	s0, [pc, #32]	; 80109c4 <log10f+0x54>
 80109a6:	6003      	str	r3, [r0, #0]
 80109a8:	ecbd 8b02 	vpop	{d8}
 80109ac:	bd08      	pop	{r3, pc}
 80109ae:	f7fe f809 	bl	800e9c4 <__errno>
 80109b2:	ecbd 8b02 	vpop	{d8}
 80109b6:	2321      	movs	r3, #33	; 0x21
 80109b8:	6003      	str	r3, [r0, #0]
 80109ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80109be:	4802      	ldr	r0, [pc, #8]	; (80109c8 <log10f+0x58>)
 80109c0:	f000 b81a 	b.w	80109f8 <nanf>
 80109c4:	ff800000 	.word	0xff800000
 80109c8:	08018812 	.word	0x08018812

080109cc <finite>:
 80109cc:	b082      	sub	sp, #8
 80109ce:	ed8d 0b00 	vstr	d0, [sp]
 80109d2:	9801      	ldr	r0, [sp, #4]
 80109d4:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80109d8:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80109dc:	0fc0      	lsrs	r0, r0, #31
 80109de:	b002      	add	sp, #8
 80109e0:	4770      	bx	lr
 80109e2:	0000      	movs	r0, r0
 80109e4:	0000      	movs	r0, r0
	...

080109e8 <nan>:
 80109e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80109f0 <nan+0x8>
 80109ec:	4770      	bx	lr
 80109ee:	bf00      	nop
 80109f0:	00000000 	.word	0x00000000
 80109f4:	7ff80000 	.word	0x7ff80000

080109f8 <nanf>:
 80109f8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8010a00 <nanf+0x8>
 80109fc:	4770      	bx	lr
 80109fe:	bf00      	nop
 8010a00:	7fc00000 	.word	0x7fc00000

08010a04 <fmaxf>:
 8010a04:	b508      	push	{r3, lr}
 8010a06:	ed2d 8b02 	vpush	{d8}
 8010a0a:	eeb0 8a40 	vmov.f32	s16, s0
 8010a0e:	eef0 8a60 	vmov.f32	s17, s1
 8010a12:	f000 f813 	bl	8010a3c <__fpclassifyf>
 8010a16:	b148      	cbz	r0, 8010a2c <fmaxf+0x28>
 8010a18:	eeb0 0a68 	vmov.f32	s0, s17
 8010a1c:	f000 f80e 	bl	8010a3c <__fpclassifyf>
 8010a20:	b130      	cbz	r0, 8010a30 <fmaxf+0x2c>
 8010a22:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8010a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a2a:	dc01      	bgt.n	8010a30 <fmaxf+0x2c>
 8010a2c:	eeb0 8a68 	vmov.f32	s16, s17
 8010a30:	eeb0 0a48 	vmov.f32	s0, s16
 8010a34:	ecbd 8b02 	vpop	{d8}
 8010a38:	bd08      	pop	{r3, pc}
	...

08010a3c <__fpclassifyf>:
 8010a3c:	ee10 3a10 	vmov	r3, s0
 8010a40:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 8010a44:	d00d      	beq.n	8010a62 <__fpclassifyf+0x26>
 8010a46:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 8010a4a:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8010a4e:	d30a      	bcc.n	8010a66 <__fpclassifyf+0x2a>
 8010a50:	4b07      	ldr	r3, [pc, #28]	; (8010a70 <__fpclassifyf+0x34>)
 8010a52:	1e42      	subs	r2, r0, #1
 8010a54:	429a      	cmp	r2, r3
 8010a56:	d908      	bls.n	8010a6a <__fpclassifyf+0x2e>
 8010a58:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 8010a5c:	4258      	negs	r0, r3
 8010a5e:	4158      	adcs	r0, r3
 8010a60:	4770      	bx	lr
 8010a62:	2002      	movs	r0, #2
 8010a64:	4770      	bx	lr
 8010a66:	2004      	movs	r0, #4
 8010a68:	4770      	bx	lr
 8010a6a:	2003      	movs	r0, #3
 8010a6c:	4770      	bx	lr
 8010a6e:	bf00      	nop
 8010a70:	007ffffe 	.word	0x007ffffe

08010a74 <__ieee754_sqrt>:
 8010a74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a78:	ec55 4b10 	vmov	r4, r5, d0
 8010a7c:	4e67      	ldr	r6, [pc, #412]	; (8010c1c <__ieee754_sqrt+0x1a8>)
 8010a7e:	43ae      	bics	r6, r5
 8010a80:	ee10 0a10 	vmov	r0, s0
 8010a84:	ee10 2a10 	vmov	r2, s0
 8010a88:	4629      	mov	r1, r5
 8010a8a:	462b      	mov	r3, r5
 8010a8c:	d10d      	bne.n	8010aaa <__ieee754_sqrt+0x36>
 8010a8e:	f7ef fe2b 	bl	80006e8 <__aeabi_dmul>
 8010a92:	4602      	mov	r2, r0
 8010a94:	460b      	mov	r3, r1
 8010a96:	4620      	mov	r0, r4
 8010a98:	4629      	mov	r1, r5
 8010a9a:	f7ef fc6f 	bl	800037c <__adddf3>
 8010a9e:	4604      	mov	r4, r0
 8010aa0:	460d      	mov	r5, r1
 8010aa2:	ec45 4b10 	vmov	d0, r4, r5
 8010aa6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010aaa:	2d00      	cmp	r5, #0
 8010aac:	dc0b      	bgt.n	8010ac6 <__ieee754_sqrt+0x52>
 8010aae:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010ab2:	4326      	orrs	r6, r4
 8010ab4:	d0f5      	beq.n	8010aa2 <__ieee754_sqrt+0x2e>
 8010ab6:	b135      	cbz	r5, 8010ac6 <__ieee754_sqrt+0x52>
 8010ab8:	f7ef fc5e 	bl	8000378 <__aeabi_dsub>
 8010abc:	4602      	mov	r2, r0
 8010abe:	460b      	mov	r3, r1
 8010ac0:	f7ef ff3c 	bl	800093c <__aeabi_ddiv>
 8010ac4:	e7eb      	b.n	8010a9e <__ieee754_sqrt+0x2a>
 8010ac6:	1509      	asrs	r1, r1, #20
 8010ac8:	f000 808d 	beq.w	8010be6 <__ieee754_sqrt+0x172>
 8010acc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010ad0:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8010ad4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010ad8:	07c9      	lsls	r1, r1, #31
 8010ada:	bf5c      	itt	pl
 8010adc:	005b      	lslpl	r3, r3, #1
 8010ade:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8010ae2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010ae6:	bf58      	it	pl
 8010ae8:	0052      	lslpl	r2, r2, #1
 8010aea:	2500      	movs	r5, #0
 8010aec:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8010af0:	1076      	asrs	r6, r6, #1
 8010af2:	0052      	lsls	r2, r2, #1
 8010af4:	f04f 0e16 	mov.w	lr, #22
 8010af8:	46ac      	mov	ip, r5
 8010afa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010afe:	eb0c 0001 	add.w	r0, ip, r1
 8010b02:	4298      	cmp	r0, r3
 8010b04:	bfde      	ittt	le
 8010b06:	1a1b      	suble	r3, r3, r0
 8010b08:	eb00 0c01 	addle.w	ip, r0, r1
 8010b0c:	186d      	addle	r5, r5, r1
 8010b0e:	005b      	lsls	r3, r3, #1
 8010b10:	f1be 0e01 	subs.w	lr, lr, #1
 8010b14:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8010b18:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8010b1c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8010b20:	d1ed      	bne.n	8010afe <__ieee754_sqrt+0x8a>
 8010b22:	4674      	mov	r4, lr
 8010b24:	2720      	movs	r7, #32
 8010b26:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8010b2a:	4563      	cmp	r3, ip
 8010b2c:	eb01 000e 	add.w	r0, r1, lr
 8010b30:	dc02      	bgt.n	8010b38 <__ieee754_sqrt+0xc4>
 8010b32:	d113      	bne.n	8010b5c <__ieee754_sqrt+0xe8>
 8010b34:	4290      	cmp	r0, r2
 8010b36:	d811      	bhi.n	8010b5c <__ieee754_sqrt+0xe8>
 8010b38:	2800      	cmp	r0, #0
 8010b3a:	eb00 0e01 	add.w	lr, r0, r1
 8010b3e:	da57      	bge.n	8010bf0 <__ieee754_sqrt+0x17c>
 8010b40:	f1be 0f00 	cmp.w	lr, #0
 8010b44:	db54      	blt.n	8010bf0 <__ieee754_sqrt+0x17c>
 8010b46:	f10c 0801 	add.w	r8, ip, #1
 8010b4a:	eba3 030c 	sub.w	r3, r3, ip
 8010b4e:	4290      	cmp	r0, r2
 8010b50:	bf88      	it	hi
 8010b52:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8010b56:	1a12      	subs	r2, r2, r0
 8010b58:	440c      	add	r4, r1
 8010b5a:	46c4      	mov	ip, r8
 8010b5c:	005b      	lsls	r3, r3, #1
 8010b5e:	3f01      	subs	r7, #1
 8010b60:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8010b64:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8010b68:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8010b6c:	d1dd      	bne.n	8010b2a <__ieee754_sqrt+0xb6>
 8010b6e:	4313      	orrs	r3, r2
 8010b70:	d01b      	beq.n	8010baa <__ieee754_sqrt+0x136>
 8010b72:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8010c20 <__ieee754_sqrt+0x1ac>
 8010b76:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8010c24 <__ieee754_sqrt+0x1b0>
 8010b7a:	e9da 0100 	ldrd	r0, r1, [sl]
 8010b7e:	e9db 2300 	ldrd	r2, r3, [fp]
 8010b82:	f7ef fbf9 	bl	8000378 <__aeabi_dsub>
 8010b86:	e9da 8900 	ldrd	r8, r9, [sl]
 8010b8a:	4602      	mov	r2, r0
 8010b8c:	460b      	mov	r3, r1
 8010b8e:	4640      	mov	r0, r8
 8010b90:	4649      	mov	r1, r9
 8010b92:	f7f0 f825 	bl	8000be0 <__aeabi_dcmple>
 8010b96:	b140      	cbz	r0, 8010baa <__ieee754_sqrt+0x136>
 8010b98:	f1b4 3fff 	cmp.w	r4, #4294967295
 8010b9c:	e9da 0100 	ldrd	r0, r1, [sl]
 8010ba0:	e9db 2300 	ldrd	r2, r3, [fp]
 8010ba4:	d126      	bne.n	8010bf4 <__ieee754_sqrt+0x180>
 8010ba6:	3501      	adds	r5, #1
 8010ba8:	463c      	mov	r4, r7
 8010baa:	106a      	asrs	r2, r5, #1
 8010bac:	0863      	lsrs	r3, r4, #1
 8010bae:	07e9      	lsls	r1, r5, #31
 8010bb0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8010bb4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8010bb8:	bf48      	it	mi
 8010bba:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8010bbe:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8010bc2:	461c      	mov	r4, r3
 8010bc4:	e76d      	b.n	8010aa2 <__ieee754_sqrt+0x2e>
 8010bc6:	0ad3      	lsrs	r3, r2, #11
 8010bc8:	3815      	subs	r0, #21
 8010bca:	0552      	lsls	r2, r2, #21
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d0fa      	beq.n	8010bc6 <__ieee754_sqrt+0x152>
 8010bd0:	02dc      	lsls	r4, r3, #11
 8010bd2:	d50a      	bpl.n	8010bea <__ieee754_sqrt+0x176>
 8010bd4:	f1c1 0420 	rsb	r4, r1, #32
 8010bd8:	fa22 f404 	lsr.w	r4, r2, r4
 8010bdc:	1e4d      	subs	r5, r1, #1
 8010bde:	408a      	lsls	r2, r1
 8010be0:	4323      	orrs	r3, r4
 8010be2:	1b41      	subs	r1, r0, r5
 8010be4:	e772      	b.n	8010acc <__ieee754_sqrt+0x58>
 8010be6:	4608      	mov	r0, r1
 8010be8:	e7f0      	b.n	8010bcc <__ieee754_sqrt+0x158>
 8010bea:	005b      	lsls	r3, r3, #1
 8010bec:	3101      	adds	r1, #1
 8010bee:	e7ef      	b.n	8010bd0 <__ieee754_sqrt+0x15c>
 8010bf0:	46e0      	mov	r8, ip
 8010bf2:	e7aa      	b.n	8010b4a <__ieee754_sqrt+0xd6>
 8010bf4:	f7ef fbc2 	bl	800037c <__adddf3>
 8010bf8:	e9da 8900 	ldrd	r8, r9, [sl]
 8010bfc:	4602      	mov	r2, r0
 8010bfe:	460b      	mov	r3, r1
 8010c00:	4640      	mov	r0, r8
 8010c02:	4649      	mov	r1, r9
 8010c04:	f7ef ffe2 	bl	8000bcc <__aeabi_dcmplt>
 8010c08:	b120      	cbz	r0, 8010c14 <__ieee754_sqrt+0x1a0>
 8010c0a:	1ca0      	adds	r0, r4, #2
 8010c0c:	bf08      	it	eq
 8010c0e:	3501      	addeq	r5, #1
 8010c10:	3402      	adds	r4, #2
 8010c12:	e7ca      	b.n	8010baa <__ieee754_sqrt+0x136>
 8010c14:	3401      	adds	r4, #1
 8010c16:	f024 0401 	bic.w	r4, r4, #1
 8010c1a:	e7c6      	b.n	8010baa <__ieee754_sqrt+0x136>
 8010c1c:	7ff00000 	.word	0x7ff00000
 8010c20:	20000358 	.word	0x20000358
 8010c24:	20000360 	.word	0x20000360

08010c28 <roundf>:
 8010c28:	ee10 0a10 	vmov	r0, s0
 8010c2c:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8010c30:	3a7f      	subs	r2, #127	; 0x7f
 8010c32:	2a16      	cmp	r2, #22
 8010c34:	dc15      	bgt.n	8010c62 <roundf+0x3a>
 8010c36:	2a00      	cmp	r2, #0
 8010c38:	da08      	bge.n	8010c4c <roundf+0x24>
 8010c3a:	3201      	adds	r2, #1
 8010c3c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8010c40:	d101      	bne.n	8010c46 <roundf+0x1e>
 8010c42:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8010c46:	ee00 3a10 	vmov	s0, r3
 8010c4a:	4770      	bx	lr
 8010c4c:	4907      	ldr	r1, [pc, #28]	; (8010c6c <roundf+0x44>)
 8010c4e:	4111      	asrs	r1, r2
 8010c50:	4208      	tst	r0, r1
 8010c52:	d0fa      	beq.n	8010c4a <roundf+0x22>
 8010c54:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8010c58:	4113      	asrs	r3, r2
 8010c5a:	4403      	add	r3, r0
 8010c5c:	ea23 0301 	bic.w	r3, r3, r1
 8010c60:	e7f1      	b.n	8010c46 <roundf+0x1e>
 8010c62:	2a80      	cmp	r2, #128	; 0x80
 8010c64:	d1f1      	bne.n	8010c4a <roundf+0x22>
 8010c66:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010c6a:	4770      	bx	lr
 8010c6c:	007fffff 	.word	0x007fffff

08010c70 <__kernel_cos>:
 8010c70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c74:	ec57 6b10 	vmov	r6, r7, d0
 8010c78:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8010c7c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8010c80:	ed8d 1b00 	vstr	d1, [sp]
 8010c84:	da07      	bge.n	8010c96 <__kernel_cos+0x26>
 8010c86:	ee10 0a10 	vmov	r0, s0
 8010c8a:	4639      	mov	r1, r7
 8010c8c:	f7ef ffdc 	bl	8000c48 <__aeabi_d2iz>
 8010c90:	2800      	cmp	r0, #0
 8010c92:	f000 8088 	beq.w	8010da6 <__kernel_cos+0x136>
 8010c96:	4632      	mov	r2, r6
 8010c98:	463b      	mov	r3, r7
 8010c9a:	4630      	mov	r0, r6
 8010c9c:	4639      	mov	r1, r7
 8010c9e:	f7ef fd23 	bl	80006e8 <__aeabi_dmul>
 8010ca2:	4b51      	ldr	r3, [pc, #324]	; (8010de8 <__kernel_cos+0x178>)
 8010ca4:	2200      	movs	r2, #0
 8010ca6:	4604      	mov	r4, r0
 8010ca8:	460d      	mov	r5, r1
 8010caa:	f7ef fd1d 	bl	80006e8 <__aeabi_dmul>
 8010cae:	a340      	add	r3, pc, #256	; (adr r3, 8010db0 <__kernel_cos+0x140>)
 8010cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cb4:	4682      	mov	sl, r0
 8010cb6:	468b      	mov	fp, r1
 8010cb8:	4620      	mov	r0, r4
 8010cba:	4629      	mov	r1, r5
 8010cbc:	f7ef fd14 	bl	80006e8 <__aeabi_dmul>
 8010cc0:	a33d      	add	r3, pc, #244	; (adr r3, 8010db8 <__kernel_cos+0x148>)
 8010cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cc6:	f7ef fb59 	bl	800037c <__adddf3>
 8010cca:	4622      	mov	r2, r4
 8010ccc:	462b      	mov	r3, r5
 8010cce:	f7ef fd0b 	bl	80006e8 <__aeabi_dmul>
 8010cd2:	a33b      	add	r3, pc, #236	; (adr r3, 8010dc0 <__kernel_cos+0x150>)
 8010cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cd8:	f7ef fb4e 	bl	8000378 <__aeabi_dsub>
 8010cdc:	4622      	mov	r2, r4
 8010cde:	462b      	mov	r3, r5
 8010ce0:	f7ef fd02 	bl	80006e8 <__aeabi_dmul>
 8010ce4:	a338      	add	r3, pc, #224	; (adr r3, 8010dc8 <__kernel_cos+0x158>)
 8010ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cea:	f7ef fb47 	bl	800037c <__adddf3>
 8010cee:	4622      	mov	r2, r4
 8010cf0:	462b      	mov	r3, r5
 8010cf2:	f7ef fcf9 	bl	80006e8 <__aeabi_dmul>
 8010cf6:	a336      	add	r3, pc, #216	; (adr r3, 8010dd0 <__kernel_cos+0x160>)
 8010cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cfc:	f7ef fb3c 	bl	8000378 <__aeabi_dsub>
 8010d00:	4622      	mov	r2, r4
 8010d02:	462b      	mov	r3, r5
 8010d04:	f7ef fcf0 	bl	80006e8 <__aeabi_dmul>
 8010d08:	a333      	add	r3, pc, #204	; (adr r3, 8010dd8 <__kernel_cos+0x168>)
 8010d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d0e:	f7ef fb35 	bl	800037c <__adddf3>
 8010d12:	4622      	mov	r2, r4
 8010d14:	462b      	mov	r3, r5
 8010d16:	f7ef fce7 	bl	80006e8 <__aeabi_dmul>
 8010d1a:	4622      	mov	r2, r4
 8010d1c:	462b      	mov	r3, r5
 8010d1e:	f7ef fce3 	bl	80006e8 <__aeabi_dmul>
 8010d22:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010d26:	4604      	mov	r4, r0
 8010d28:	460d      	mov	r5, r1
 8010d2a:	4630      	mov	r0, r6
 8010d2c:	4639      	mov	r1, r7
 8010d2e:	f7ef fcdb 	bl	80006e8 <__aeabi_dmul>
 8010d32:	460b      	mov	r3, r1
 8010d34:	4602      	mov	r2, r0
 8010d36:	4629      	mov	r1, r5
 8010d38:	4620      	mov	r0, r4
 8010d3a:	f7ef fb1d 	bl	8000378 <__aeabi_dsub>
 8010d3e:	4b2b      	ldr	r3, [pc, #172]	; (8010dec <__kernel_cos+0x17c>)
 8010d40:	4598      	cmp	r8, r3
 8010d42:	4606      	mov	r6, r0
 8010d44:	460f      	mov	r7, r1
 8010d46:	dc10      	bgt.n	8010d6a <__kernel_cos+0xfa>
 8010d48:	4602      	mov	r2, r0
 8010d4a:	460b      	mov	r3, r1
 8010d4c:	4650      	mov	r0, sl
 8010d4e:	4659      	mov	r1, fp
 8010d50:	f7ef fb12 	bl	8000378 <__aeabi_dsub>
 8010d54:	460b      	mov	r3, r1
 8010d56:	4926      	ldr	r1, [pc, #152]	; (8010df0 <__kernel_cos+0x180>)
 8010d58:	4602      	mov	r2, r0
 8010d5a:	2000      	movs	r0, #0
 8010d5c:	f7ef fb0c 	bl	8000378 <__aeabi_dsub>
 8010d60:	ec41 0b10 	vmov	d0, r0, r1
 8010d64:	b003      	add	sp, #12
 8010d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d6a:	4b22      	ldr	r3, [pc, #136]	; (8010df4 <__kernel_cos+0x184>)
 8010d6c:	4920      	ldr	r1, [pc, #128]	; (8010df0 <__kernel_cos+0x180>)
 8010d6e:	4598      	cmp	r8, r3
 8010d70:	bfcc      	ite	gt
 8010d72:	4d21      	ldrgt	r5, [pc, #132]	; (8010df8 <__kernel_cos+0x188>)
 8010d74:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8010d78:	2400      	movs	r4, #0
 8010d7a:	4622      	mov	r2, r4
 8010d7c:	462b      	mov	r3, r5
 8010d7e:	2000      	movs	r0, #0
 8010d80:	f7ef fafa 	bl	8000378 <__aeabi_dsub>
 8010d84:	4622      	mov	r2, r4
 8010d86:	4680      	mov	r8, r0
 8010d88:	4689      	mov	r9, r1
 8010d8a:	462b      	mov	r3, r5
 8010d8c:	4650      	mov	r0, sl
 8010d8e:	4659      	mov	r1, fp
 8010d90:	f7ef faf2 	bl	8000378 <__aeabi_dsub>
 8010d94:	4632      	mov	r2, r6
 8010d96:	463b      	mov	r3, r7
 8010d98:	f7ef faee 	bl	8000378 <__aeabi_dsub>
 8010d9c:	4602      	mov	r2, r0
 8010d9e:	460b      	mov	r3, r1
 8010da0:	4640      	mov	r0, r8
 8010da2:	4649      	mov	r1, r9
 8010da4:	e7da      	b.n	8010d5c <__kernel_cos+0xec>
 8010da6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8010de0 <__kernel_cos+0x170>
 8010daa:	e7db      	b.n	8010d64 <__kernel_cos+0xf4>
 8010dac:	f3af 8000 	nop.w
 8010db0:	be8838d4 	.word	0xbe8838d4
 8010db4:	bda8fae9 	.word	0xbda8fae9
 8010db8:	bdb4b1c4 	.word	0xbdb4b1c4
 8010dbc:	3e21ee9e 	.word	0x3e21ee9e
 8010dc0:	809c52ad 	.word	0x809c52ad
 8010dc4:	3e927e4f 	.word	0x3e927e4f
 8010dc8:	19cb1590 	.word	0x19cb1590
 8010dcc:	3efa01a0 	.word	0x3efa01a0
 8010dd0:	16c15177 	.word	0x16c15177
 8010dd4:	3f56c16c 	.word	0x3f56c16c
 8010dd8:	5555554c 	.word	0x5555554c
 8010ddc:	3fa55555 	.word	0x3fa55555
 8010de0:	00000000 	.word	0x00000000
 8010de4:	3ff00000 	.word	0x3ff00000
 8010de8:	3fe00000 	.word	0x3fe00000
 8010dec:	3fd33332 	.word	0x3fd33332
 8010df0:	3ff00000 	.word	0x3ff00000
 8010df4:	3fe90000 	.word	0x3fe90000
 8010df8:	3fd20000 	.word	0x3fd20000
 8010dfc:	00000000 	.word	0x00000000

08010e00 <__kernel_sin>:
 8010e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e04:	ed2d 8b04 	vpush	{d8-d9}
 8010e08:	eeb0 8a41 	vmov.f32	s16, s2
 8010e0c:	eef0 8a61 	vmov.f32	s17, s3
 8010e10:	ec55 4b10 	vmov	r4, r5, d0
 8010e14:	b083      	sub	sp, #12
 8010e16:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010e1a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8010e1e:	9001      	str	r0, [sp, #4]
 8010e20:	da06      	bge.n	8010e30 <__kernel_sin+0x30>
 8010e22:	ee10 0a10 	vmov	r0, s0
 8010e26:	4629      	mov	r1, r5
 8010e28:	f7ef ff0e 	bl	8000c48 <__aeabi_d2iz>
 8010e2c:	2800      	cmp	r0, #0
 8010e2e:	d051      	beq.n	8010ed4 <__kernel_sin+0xd4>
 8010e30:	4622      	mov	r2, r4
 8010e32:	462b      	mov	r3, r5
 8010e34:	4620      	mov	r0, r4
 8010e36:	4629      	mov	r1, r5
 8010e38:	f7ef fc56 	bl	80006e8 <__aeabi_dmul>
 8010e3c:	4682      	mov	sl, r0
 8010e3e:	468b      	mov	fp, r1
 8010e40:	4602      	mov	r2, r0
 8010e42:	460b      	mov	r3, r1
 8010e44:	4620      	mov	r0, r4
 8010e46:	4629      	mov	r1, r5
 8010e48:	f7ef fc4e 	bl	80006e8 <__aeabi_dmul>
 8010e4c:	a341      	add	r3, pc, #260	; (adr r3, 8010f54 <__kernel_sin+0x154>)
 8010e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e52:	4680      	mov	r8, r0
 8010e54:	4689      	mov	r9, r1
 8010e56:	4650      	mov	r0, sl
 8010e58:	4659      	mov	r1, fp
 8010e5a:	f7ef fc45 	bl	80006e8 <__aeabi_dmul>
 8010e5e:	a33f      	add	r3, pc, #252	; (adr r3, 8010f5c <__kernel_sin+0x15c>)
 8010e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e64:	f7ef fa88 	bl	8000378 <__aeabi_dsub>
 8010e68:	4652      	mov	r2, sl
 8010e6a:	465b      	mov	r3, fp
 8010e6c:	f7ef fc3c 	bl	80006e8 <__aeabi_dmul>
 8010e70:	a33c      	add	r3, pc, #240	; (adr r3, 8010f64 <__kernel_sin+0x164>)
 8010e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e76:	f7ef fa81 	bl	800037c <__adddf3>
 8010e7a:	4652      	mov	r2, sl
 8010e7c:	465b      	mov	r3, fp
 8010e7e:	f7ef fc33 	bl	80006e8 <__aeabi_dmul>
 8010e82:	a33a      	add	r3, pc, #232	; (adr r3, 8010f6c <__kernel_sin+0x16c>)
 8010e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e88:	f7ef fa76 	bl	8000378 <__aeabi_dsub>
 8010e8c:	4652      	mov	r2, sl
 8010e8e:	465b      	mov	r3, fp
 8010e90:	f7ef fc2a 	bl	80006e8 <__aeabi_dmul>
 8010e94:	a337      	add	r3, pc, #220	; (adr r3, 8010f74 <__kernel_sin+0x174>)
 8010e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e9a:	f7ef fa6f 	bl	800037c <__adddf3>
 8010e9e:	9b01      	ldr	r3, [sp, #4]
 8010ea0:	4606      	mov	r6, r0
 8010ea2:	460f      	mov	r7, r1
 8010ea4:	b9eb      	cbnz	r3, 8010ee2 <__kernel_sin+0xe2>
 8010ea6:	4602      	mov	r2, r0
 8010ea8:	460b      	mov	r3, r1
 8010eaa:	4650      	mov	r0, sl
 8010eac:	4659      	mov	r1, fp
 8010eae:	f7ef fc1b 	bl	80006e8 <__aeabi_dmul>
 8010eb2:	a325      	add	r3, pc, #148	; (adr r3, 8010f48 <__kernel_sin+0x148>)
 8010eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010eb8:	f7ef fa5e 	bl	8000378 <__aeabi_dsub>
 8010ebc:	4642      	mov	r2, r8
 8010ebe:	464b      	mov	r3, r9
 8010ec0:	f7ef fc12 	bl	80006e8 <__aeabi_dmul>
 8010ec4:	4602      	mov	r2, r0
 8010ec6:	460b      	mov	r3, r1
 8010ec8:	4620      	mov	r0, r4
 8010eca:	4629      	mov	r1, r5
 8010ecc:	f7ef fa56 	bl	800037c <__adddf3>
 8010ed0:	4604      	mov	r4, r0
 8010ed2:	460d      	mov	r5, r1
 8010ed4:	ec45 4b10 	vmov	d0, r4, r5
 8010ed8:	b003      	add	sp, #12
 8010eda:	ecbd 8b04 	vpop	{d8-d9}
 8010ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ee2:	4b1b      	ldr	r3, [pc, #108]	; (8010f50 <__kernel_sin+0x150>)
 8010ee4:	ec51 0b18 	vmov	r0, r1, d8
 8010ee8:	2200      	movs	r2, #0
 8010eea:	f7ef fbfd 	bl	80006e8 <__aeabi_dmul>
 8010eee:	4632      	mov	r2, r6
 8010ef0:	ec41 0b19 	vmov	d9, r0, r1
 8010ef4:	463b      	mov	r3, r7
 8010ef6:	4640      	mov	r0, r8
 8010ef8:	4649      	mov	r1, r9
 8010efa:	f7ef fbf5 	bl	80006e8 <__aeabi_dmul>
 8010efe:	4602      	mov	r2, r0
 8010f00:	460b      	mov	r3, r1
 8010f02:	ec51 0b19 	vmov	r0, r1, d9
 8010f06:	f7ef fa37 	bl	8000378 <__aeabi_dsub>
 8010f0a:	4652      	mov	r2, sl
 8010f0c:	465b      	mov	r3, fp
 8010f0e:	f7ef fbeb 	bl	80006e8 <__aeabi_dmul>
 8010f12:	ec53 2b18 	vmov	r2, r3, d8
 8010f16:	f7ef fa2f 	bl	8000378 <__aeabi_dsub>
 8010f1a:	a30b      	add	r3, pc, #44	; (adr r3, 8010f48 <__kernel_sin+0x148>)
 8010f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f20:	4606      	mov	r6, r0
 8010f22:	460f      	mov	r7, r1
 8010f24:	4640      	mov	r0, r8
 8010f26:	4649      	mov	r1, r9
 8010f28:	f7ef fbde 	bl	80006e8 <__aeabi_dmul>
 8010f2c:	4602      	mov	r2, r0
 8010f2e:	460b      	mov	r3, r1
 8010f30:	4630      	mov	r0, r6
 8010f32:	4639      	mov	r1, r7
 8010f34:	f7ef fa22 	bl	800037c <__adddf3>
 8010f38:	4602      	mov	r2, r0
 8010f3a:	460b      	mov	r3, r1
 8010f3c:	4620      	mov	r0, r4
 8010f3e:	4629      	mov	r1, r5
 8010f40:	f7ef fa1a 	bl	8000378 <__aeabi_dsub>
 8010f44:	e7c4      	b.n	8010ed0 <__kernel_sin+0xd0>
 8010f46:	bf00      	nop
 8010f48:	55555549 	.word	0x55555549
 8010f4c:	3fc55555 	.word	0x3fc55555
 8010f50:	3fe00000 	.word	0x3fe00000
 8010f54:	5acfd57c 	.word	0x5acfd57c
 8010f58:	3de5d93a 	.word	0x3de5d93a
 8010f5c:	8a2b9ceb 	.word	0x8a2b9ceb
 8010f60:	3e5ae5e6 	.word	0x3e5ae5e6
 8010f64:	57b1fe7d 	.word	0x57b1fe7d
 8010f68:	3ec71de3 	.word	0x3ec71de3
 8010f6c:	19c161d5 	.word	0x19c161d5
 8010f70:	3f2a01a0 	.word	0x3f2a01a0
 8010f74:	1110f8a6 	.word	0x1110f8a6
 8010f78:	3f811111 	.word	0x3f811111
 8010f7c:	00000000 	.word	0x00000000

08010f80 <__ieee754_acos>:
 8010f80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f84:	ec55 4b10 	vmov	r4, r5, d0
 8010f88:	49b7      	ldr	r1, [pc, #732]	; (8011268 <__ieee754_acos+0x2e8>)
 8010f8a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010f8e:	428b      	cmp	r3, r1
 8010f90:	dd1b      	ble.n	8010fca <__ieee754_acos+0x4a>
 8010f92:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8010f96:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8010f9a:	4323      	orrs	r3, r4
 8010f9c:	d106      	bne.n	8010fac <__ieee754_acos+0x2c>
 8010f9e:	2d00      	cmp	r5, #0
 8010fa0:	f300 8211 	bgt.w	80113c6 <__ieee754_acos+0x446>
 8010fa4:	ed9f 0b96 	vldr	d0, [pc, #600]	; 8011200 <__ieee754_acos+0x280>
 8010fa8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fac:	ee10 2a10 	vmov	r2, s0
 8010fb0:	462b      	mov	r3, r5
 8010fb2:	ee10 0a10 	vmov	r0, s0
 8010fb6:	4629      	mov	r1, r5
 8010fb8:	f7ef f9de 	bl	8000378 <__aeabi_dsub>
 8010fbc:	4602      	mov	r2, r0
 8010fbe:	460b      	mov	r3, r1
 8010fc0:	f7ef fcbc 	bl	800093c <__aeabi_ddiv>
 8010fc4:	ec41 0b10 	vmov	d0, r0, r1
 8010fc8:	e7ee      	b.n	8010fa8 <__ieee754_acos+0x28>
 8010fca:	49a8      	ldr	r1, [pc, #672]	; (801126c <__ieee754_acos+0x2ec>)
 8010fcc:	428b      	cmp	r3, r1
 8010fce:	f300 8087 	bgt.w	80110e0 <__ieee754_acos+0x160>
 8010fd2:	4aa7      	ldr	r2, [pc, #668]	; (8011270 <__ieee754_acos+0x2f0>)
 8010fd4:	4293      	cmp	r3, r2
 8010fd6:	f340 81f9 	ble.w	80113cc <__ieee754_acos+0x44c>
 8010fda:	ee10 2a10 	vmov	r2, s0
 8010fde:	ee10 0a10 	vmov	r0, s0
 8010fe2:	462b      	mov	r3, r5
 8010fe4:	4629      	mov	r1, r5
 8010fe6:	f7ef fb7f 	bl	80006e8 <__aeabi_dmul>
 8010fea:	a387      	add	r3, pc, #540	; (adr r3, 8011208 <__ieee754_acos+0x288>)
 8010fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ff0:	4606      	mov	r6, r0
 8010ff2:	460f      	mov	r7, r1
 8010ff4:	f7ef fb78 	bl	80006e8 <__aeabi_dmul>
 8010ff8:	a385      	add	r3, pc, #532	; (adr r3, 8011210 <__ieee754_acos+0x290>)
 8010ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ffe:	f7ef f9bd 	bl	800037c <__adddf3>
 8011002:	4632      	mov	r2, r6
 8011004:	463b      	mov	r3, r7
 8011006:	f7ef fb6f 	bl	80006e8 <__aeabi_dmul>
 801100a:	a383      	add	r3, pc, #524	; (adr r3, 8011218 <__ieee754_acos+0x298>)
 801100c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011010:	f7ef f9b2 	bl	8000378 <__aeabi_dsub>
 8011014:	4632      	mov	r2, r6
 8011016:	463b      	mov	r3, r7
 8011018:	f7ef fb66 	bl	80006e8 <__aeabi_dmul>
 801101c:	a380      	add	r3, pc, #512	; (adr r3, 8011220 <__ieee754_acos+0x2a0>)
 801101e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011022:	f7ef f9ab 	bl	800037c <__adddf3>
 8011026:	4632      	mov	r2, r6
 8011028:	463b      	mov	r3, r7
 801102a:	f7ef fb5d 	bl	80006e8 <__aeabi_dmul>
 801102e:	a37e      	add	r3, pc, #504	; (adr r3, 8011228 <__ieee754_acos+0x2a8>)
 8011030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011034:	f7ef f9a0 	bl	8000378 <__aeabi_dsub>
 8011038:	4632      	mov	r2, r6
 801103a:	463b      	mov	r3, r7
 801103c:	f7ef fb54 	bl	80006e8 <__aeabi_dmul>
 8011040:	a37b      	add	r3, pc, #492	; (adr r3, 8011230 <__ieee754_acos+0x2b0>)
 8011042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011046:	f7ef f999 	bl	800037c <__adddf3>
 801104a:	4632      	mov	r2, r6
 801104c:	463b      	mov	r3, r7
 801104e:	f7ef fb4b 	bl	80006e8 <__aeabi_dmul>
 8011052:	a379      	add	r3, pc, #484	; (adr r3, 8011238 <__ieee754_acos+0x2b8>)
 8011054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011058:	4680      	mov	r8, r0
 801105a:	4689      	mov	r9, r1
 801105c:	4630      	mov	r0, r6
 801105e:	4639      	mov	r1, r7
 8011060:	f7ef fb42 	bl	80006e8 <__aeabi_dmul>
 8011064:	a376      	add	r3, pc, #472	; (adr r3, 8011240 <__ieee754_acos+0x2c0>)
 8011066:	e9d3 2300 	ldrd	r2, r3, [r3]
 801106a:	f7ef f985 	bl	8000378 <__aeabi_dsub>
 801106e:	4632      	mov	r2, r6
 8011070:	463b      	mov	r3, r7
 8011072:	f7ef fb39 	bl	80006e8 <__aeabi_dmul>
 8011076:	a374      	add	r3, pc, #464	; (adr r3, 8011248 <__ieee754_acos+0x2c8>)
 8011078:	e9d3 2300 	ldrd	r2, r3, [r3]
 801107c:	f7ef f97e 	bl	800037c <__adddf3>
 8011080:	4632      	mov	r2, r6
 8011082:	463b      	mov	r3, r7
 8011084:	f7ef fb30 	bl	80006e8 <__aeabi_dmul>
 8011088:	a371      	add	r3, pc, #452	; (adr r3, 8011250 <__ieee754_acos+0x2d0>)
 801108a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801108e:	f7ef f973 	bl	8000378 <__aeabi_dsub>
 8011092:	4632      	mov	r2, r6
 8011094:	463b      	mov	r3, r7
 8011096:	f7ef fb27 	bl	80006e8 <__aeabi_dmul>
 801109a:	4b76      	ldr	r3, [pc, #472]	; (8011274 <__ieee754_acos+0x2f4>)
 801109c:	2200      	movs	r2, #0
 801109e:	f7ef f96d 	bl	800037c <__adddf3>
 80110a2:	4602      	mov	r2, r0
 80110a4:	460b      	mov	r3, r1
 80110a6:	4640      	mov	r0, r8
 80110a8:	4649      	mov	r1, r9
 80110aa:	f7ef fc47 	bl	800093c <__aeabi_ddiv>
 80110ae:	4622      	mov	r2, r4
 80110b0:	462b      	mov	r3, r5
 80110b2:	f7ef fb19 	bl	80006e8 <__aeabi_dmul>
 80110b6:	4602      	mov	r2, r0
 80110b8:	460b      	mov	r3, r1
 80110ba:	a167      	add	r1, pc, #412	; (adr r1, 8011258 <__ieee754_acos+0x2d8>)
 80110bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80110c0:	f7ef f95a 	bl	8000378 <__aeabi_dsub>
 80110c4:	4602      	mov	r2, r0
 80110c6:	460b      	mov	r3, r1
 80110c8:	4620      	mov	r0, r4
 80110ca:	4629      	mov	r1, r5
 80110cc:	f7ef f954 	bl	8000378 <__aeabi_dsub>
 80110d0:	4602      	mov	r2, r0
 80110d2:	460b      	mov	r3, r1
 80110d4:	a162      	add	r1, pc, #392	; (adr r1, 8011260 <__ieee754_acos+0x2e0>)
 80110d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80110da:	f7ef f94d 	bl	8000378 <__aeabi_dsub>
 80110de:	e771      	b.n	8010fc4 <__ieee754_acos+0x44>
 80110e0:	2d00      	cmp	r5, #0
 80110e2:	f280 80cb 	bge.w	801127c <__ieee754_acos+0x2fc>
 80110e6:	ee10 0a10 	vmov	r0, s0
 80110ea:	4b62      	ldr	r3, [pc, #392]	; (8011274 <__ieee754_acos+0x2f4>)
 80110ec:	2200      	movs	r2, #0
 80110ee:	4629      	mov	r1, r5
 80110f0:	f7ef f944 	bl	800037c <__adddf3>
 80110f4:	4b60      	ldr	r3, [pc, #384]	; (8011278 <__ieee754_acos+0x2f8>)
 80110f6:	2200      	movs	r2, #0
 80110f8:	f7ef faf6 	bl	80006e8 <__aeabi_dmul>
 80110fc:	a342      	add	r3, pc, #264	; (adr r3, 8011208 <__ieee754_acos+0x288>)
 80110fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011102:	4604      	mov	r4, r0
 8011104:	460d      	mov	r5, r1
 8011106:	f7ef faef 	bl	80006e8 <__aeabi_dmul>
 801110a:	a341      	add	r3, pc, #260	; (adr r3, 8011210 <__ieee754_acos+0x290>)
 801110c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011110:	f7ef f934 	bl	800037c <__adddf3>
 8011114:	4622      	mov	r2, r4
 8011116:	462b      	mov	r3, r5
 8011118:	f7ef fae6 	bl	80006e8 <__aeabi_dmul>
 801111c:	a33e      	add	r3, pc, #248	; (adr r3, 8011218 <__ieee754_acos+0x298>)
 801111e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011122:	f7ef f929 	bl	8000378 <__aeabi_dsub>
 8011126:	4622      	mov	r2, r4
 8011128:	462b      	mov	r3, r5
 801112a:	f7ef fadd 	bl	80006e8 <__aeabi_dmul>
 801112e:	a33c      	add	r3, pc, #240	; (adr r3, 8011220 <__ieee754_acos+0x2a0>)
 8011130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011134:	f7ef f922 	bl	800037c <__adddf3>
 8011138:	4622      	mov	r2, r4
 801113a:	462b      	mov	r3, r5
 801113c:	f7ef fad4 	bl	80006e8 <__aeabi_dmul>
 8011140:	a339      	add	r3, pc, #228	; (adr r3, 8011228 <__ieee754_acos+0x2a8>)
 8011142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011146:	f7ef f917 	bl	8000378 <__aeabi_dsub>
 801114a:	4622      	mov	r2, r4
 801114c:	462b      	mov	r3, r5
 801114e:	f7ef facb 	bl	80006e8 <__aeabi_dmul>
 8011152:	a337      	add	r3, pc, #220	; (adr r3, 8011230 <__ieee754_acos+0x2b0>)
 8011154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011158:	f7ef f910 	bl	800037c <__adddf3>
 801115c:	4622      	mov	r2, r4
 801115e:	462b      	mov	r3, r5
 8011160:	f7ef fac2 	bl	80006e8 <__aeabi_dmul>
 8011164:	ec45 4b10 	vmov	d0, r4, r5
 8011168:	4680      	mov	r8, r0
 801116a:	4689      	mov	r9, r1
 801116c:	f7ff fc82 	bl	8010a74 <__ieee754_sqrt>
 8011170:	a331      	add	r3, pc, #196	; (adr r3, 8011238 <__ieee754_acos+0x2b8>)
 8011172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011176:	4620      	mov	r0, r4
 8011178:	4629      	mov	r1, r5
 801117a:	ec57 6b10 	vmov	r6, r7, d0
 801117e:	f7ef fab3 	bl	80006e8 <__aeabi_dmul>
 8011182:	a32f      	add	r3, pc, #188	; (adr r3, 8011240 <__ieee754_acos+0x2c0>)
 8011184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011188:	f7ef f8f6 	bl	8000378 <__aeabi_dsub>
 801118c:	4622      	mov	r2, r4
 801118e:	462b      	mov	r3, r5
 8011190:	f7ef faaa 	bl	80006e8 <__aeabi_dmul>
 8011194:	a32c      	add	r3, pc, #176	; (adr r3, 8011248 <__ieee754_acos+0x2c8>)
 8011196:	e9d3 2300 	ldrd	r2, r3, [r3]
 801119a:	f7ef f8ef 	bl	800037c <__adddf3>
 801119e:	4622      	mov	r2, r4
 80111a0:	462b      	mov	r3, r5
 80111a2:	f7ef faa1 	bl	80006e8 <__aeabi_dmul>
 80111a6:	a32a      	add	r3, pc, #168	; (adr r3, 8011250 <__ieee754_acos+0x2d0>)
 80111a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111ac:	f7ef f8e4 	bl	8000378 <__aeabi_dsub>
 80111b0:	4622      	mov	r2, r4
 80111b2:	462b      	mov	r3, r5
 80111b4:	f7ef fa98 	bl	80006e8 <__aeabi_dmul>
 80111b8:	4b2e      	ldr	r3, [pc, #184]	; (8011274 <__ieee754_acos+0x2f4>)
 80111ba:	2200      	movs	r2, #0
 80111bc:	f7ef f8de 	bl	800037c <__adddf3>
 80111c0:	4602      	mov	r2, r0
 80111c2:	460b      	mov	r3, r1
 80111c4:	4640      	mov	r0, r8
 80111c6:	4649      	mov	r1, r9
 80111c8:	f7ef fbb8 	bl	800093c <__aeabi_ddiv>
 80111cc:	4632      	mov	r2, r6
 80111ce:	463b      	mov	r3, r7
 80111d0:	f7ef fa8a 	bl	80006e8 <__aeabi_dmul>
 80111d4:	a320      	add	r3, pc, #128	; (adr r3, 8011258 <__ieee754_acos+0x2d8>)
 80111d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111da:	f7ef f8cd 	bl	8000378 <__aeabi_dsub>
 80111de:	4632      	mov	r2, r6
 80111e0:	463b      	mov	r3, r7
 80111e2:	f7ef f8cb 	bl	800037c <__adddf3>
 80111e6:	4602      	mov	r2, r0
 80111e8:	460b      	mov	r3, r1
 80111ea:	f7ef f8c7 	bl	800037c <__adddf3>
 80111ee:	4602      	mov	r2, r0
 80111f0:	460b      	mov	r3, r1
 80111f2:	a103      	add	r1, pc, #12	; (adr r1, 8011200 <__ieee754_acos+0x280>)
 80111f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80111f8:	e76f      	b.n	80110da <__ieee754_acos+0x15a>
 80111fa:	bf00      	nop
 80111fc:	f3af 8000 	nop.w
 8011200:	54442d18 	.word	0x54442d18
 8011204:	400921fb 	.word	0x400921fb
 8011208:	0dfdf709 	.word	0x0dfdf709
 801120c:	3f023de1 	.word	0x3f023de1
 8011210:	7501b288 	.word	0x7501b288
 8011214:	3f49efe0 	.word	0x3f49efe0
 8011218:	b5688f3b 	.word	0xb5688f3b
 801121c:	3fa48228 	.word	0x3fa48228
 8011220:	0e884455 	.word	0x0e884455
 8011224:	3fc9c155 	.word	0x3fc9c155
 8011228:	03eb6f7d 	.word	0x03eb6f7d
 801122c:	3fd4d612 	.word	0x3fd4d612
 8011230:	55555555 	.word	0x55555555
 8011234:	3fc55555 	.word	0x3fc55555
 8011238:	b12e9282 	.word	0xb12e9282
 801123c:	3fb3b8c5 	.word	0x3fb3b8c5
 8011240:	1b8d0159 	.word	0x1b8d0159
 8011244:	3fe6066c 	.word	0x3fe6066c
 8011248:	9c598ac8 	.word	0x9c598ac8
 801124c:	40002ae5 	.word	0x40002ae5
 8011250:	1c8a2d4b 	.word	0x1c8a2d4b
 8011254:	40033a27 	.word	0x40033a27
 8011258:	33145c07 	.word	0x33145c07
 801125c:	3c91a626 	.word	0x3c91a626
 8011260:	54442d18 	.word	0x54442d18
 8011264:	3ff921fb 	.word	0x3ff921fb
 8011268:	3fefffff 	.word	0x3fefffff
 801126c:	3fdfffff 	.word	0x3fdfffff
 8011270:	3c600000 	.word	0x3c600000
 8011274:	3ff00000 	.word	0x3ff00000
 8011278:	3fe00000 	.word	0x3fe00000
 801127c:	ee10 2a10 	vmov	r2, s0
 8011280:	462b      	mov	r3, r5
 8011282:	496d      	ldr	r1, [pc, #436]	; (8011438 <__ieee754_acos+0x4b8>)
 8011284:	2000      	movs	r0, #0
 8011286:	f7ef f877 	bl	8000378 <__aeabi_dsub>
 801128a:	4b6c      	ldr	r3, [pc, #432]	; (801143c <__ieee754_acos+0x4bc>)
 801128c:	2200      	movs	r2, #0
 801128e:	f7ef fa2b 	bl	80006e8 <__aeabi_dmul>
 8011292:	4604      	mov	r4, r0
 8011294:	460d      	mov	r5, r1
 8011296:	ec45 4b10 	vmov	d0, r4, r5
 801129a:	f7ff fbeb 	bl	8010a74 <__ieee754_sqrt>
 801129e:	a34e      	add	r3, pc, #312	; (adr r3, 80113d8 <__ieee754_acos+0x458>)
 80112a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112a4:	4620      	mov	r0, r4
 80112a6:	4629      	mov	r1, r5
 80112a8:	ec59 8b10 	vmov	r8, r9, d0
 80112ac:	f7ef fa1c 	bl	80006e8 <__aeabi_dmul>
 80112b0:	a34b      	add	r3, pc, #300	; (adr r3, 80113e0 <__ieee754_acos+0x460>)
 80112b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112b6:	f7ef f861 	bl	800037c <__adddf3>
 80112ba:	4622      	mov	r2, r4
 80112bc:	462b      	mov	r3, r5
 80112be:	f7ef fa13 	bl	80006e8 <__aeabi_dmul>
 80112c2:	a349      	add	r3, pc, #292	; (adr r3, 80113e8 <__ieee754_acos+0x468>)
 80112c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112c8:	f7ef f856 	bl	8000378 <__aeabi_dsub>
 80112cc:	4622      	mov	r2, r4
 80112ce:	462b      	mov	r3, r5
 80112d0:	f7ef fa0a 	bl	80006e8 <__aeabi_dmul>
 80112d4:	a346      	add	r3, pc, #280	; (adr r3, 80113f0 <__ieee754_acos+0x470>)
 80112d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112da:	f7ef f84f 	bl	800037c <__adddf3>
 80112de:	4622      	mov	r2, r4
 80112e0:	462b      	mov	r3, r5
 80112e2:	f7ef fa01 	bl	80006e8 <__aeabi_dmul>
 80112e6:	a344      	add	r3, pc, #272	; (adr r3, 80113f8 <__ieee754_acos+0x478>)
 80112e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112ec:	f7ef f844 	bl	8000378 <__aeabi_dsub>
 80112f0:	4622      	mov	r2, r4
 80112f2:	462b      	mov	r3, r5
 80112f4:	f7ef f9f8 	bl	80006e8 <__aeabi_dmul>
 80112f8:	a341      	add	r3, pc, #260	; (adr r3, 8011400 <__ieee754_acos+0x480>)
 80112fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112fe:	f7ef f83d 	bl	800037c <__adddf3>
 8011302:	4622      	mov	r2, r4
 8011304:	462b      	mov	r3, r5
 8011306:	f7ef f9ef 	bl	80006e8 <__aeabi_dmul>
 801130a:	a33f      	add	r3, pc, #252	; (adr r3, 8011408 <__ieee754_acos+0x488>)
 801130c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011310:	4682      	mov	sl, r0
 8011312:	468b      	mov	fp, r1
 8011314:	4620      	mov	r0, r4
 8011316:	4629      	mov	r1, r5
 8011318:	f7ef f9e6 	bl	80006e8 <__aeabi_dmul>
 801131c:	a33c      	add	r3, pc, #240	; (adr r3, 8011410 <__ieee754_acos+0x490>)
 801131e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011322:	f7ef f829 	bl	8000378 <__aeabi_dsub>
 8011326:	4622      	mov	r2, r4
 8011328:	462b      	mov	r3, r5
 801132a:	f7ef f9dd 	bl	80006e8 <__aeabi_dmul>
 801132e:	a33a      	add	r3, pc, #232	; (adr r3, 8011418 <__ieee754_acos+0x498>)
 8011330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011334:	f7ef f822 	bl	800037c <__adddf3>
 8011338:	4622      	mov	r2, r4
 801133a:	462b      	mov	r3, r5
 801133c:	f7ef f9d4 	bl	80006e8 <__aeabi_dmul>
 8011340:	a337      	add	r3, pc, #220	; (adr r3, 8011420 <__ieee754_acos+0x4a0>)
 8011342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011346:	f7ef f817 	bl	8000378 <__aeabi_dsub>
 801134a:	4622      	mov	r2, r4
 801134c:	462b      	mov	r3, r5
 801134e:	f7ef f9cb 	bl	80006e8 <__aeabi_dmul>
 8011352:	4b39      	ldr	r3, [pc, #228]	; (8011438 <__ieee754_acos+0x4b8>)
 8011354:	2200      	movs	r2, #0
 8011356:	f7ef f811 	bl	800037c <__adddf3>
 801135a:	4602      	mov	r2, r0
 801135c:	460b      	mov	r3, r1
 801135e:	4650      	mov	r0, sl
 8011360:	4659      	mov	r1, fp
 8011362:	f7ef faeb 	bl	800093c <__aeabi_ddiv>
 8011366:	4642      	mov	r2, r8
 8011368:	464b      	mov	r3, r9
 801136a:	f7ef f9bd 	bl	80006e8 <__aeabi_dmul>
 801136e:	2600      	movs	r6, #0
 8011370:	4682      	mov	sl, r0
 8011372:	468b      	mov	fp, r1
 8011374:	4632      	mov	r2, r6
 8011376:	464b      	mov	r3, r9
 8011378:	4630      	mov	r0, r6
 801137a:	4649      	mov	r1, r9
 801137c:	f7ef f9b4 	bl	80006e8 <__aeabi_dmul>
 8011380:	4602      	mov	r2, r0
 8011382:	460b      	mov	r3, r1
 8011384:	4620      	mov	r0, r4
 8011386:	4629      	mov	r1, r5
 8011388:	f7ee fff6 	bl	8000378 <__aeabi_dsub>
 801138c:	4632      	mov	r2, r6
 801138e:	4604      	mov	r4, r0
 8011390:	460d      	mov	r5, r1
 8011392:	464b      	mov	r3, r9
 8011394:	4640      	mov	r0, r8
 8011396:	4649      	mov	r1, r9
 8011398:	f7ee fff0 	bl	800037c <__adddf3>
 801139c:	4602      	mov	r2, r0
 801139e:	460b      	mov	r3, r1
 80113a0:	4620      	mov	r0, r4
 80113a2:	4629      	mov	r1, r5
 80113a4:	f7ef faca 	bl	800093c <__aeabi_ddiv>
 80113a8:	4602      	mov	r2, r0
 80113aa:	460b      	mov	r3, r1
 80113ac:	4650      	mov	r0, sl
 80113ae:	4659      	mov	r1, fp
 80113b0:	f7ee ffe4 	bl	800037c <__adddf3>
 80113b4:	4632      	mov	r2, r6
 80113b6:	464b      	mov	r3, r9
 80113b8:	f7ee ffe0 	bl	800037c <__adddf3>
 80113bc:	4602      	mov	r2, r0
 80113be:	460b      	mov	r3, r1
 80113c0:	f7ee ffdc 	bl	800037c <__adddf3>
 80113c4:	e5fe      	b.n	8010fc4 <__ieee754_acos+0x44>
 80113c6:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8011428 <__ieee754_acos+0x4a8>
 80113ca:	e5ed      	b.n	8010fa8 <__ieee754_acos+0x28>
 80113cc:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8011430 <__ieee754_acos+0x4b0>
 80113d0:	e5ea      	b.n	8010fa8 <__ieee754_acos+0x28>
 80113d2:	bf00      	nop
 80113d4:	f3af 8000 	nop.w
 80113d8:	0dfdf709 	.word	0x0dfdf709
 80113dc:	3f023de1 	.word	0x3f023de1
 80113e0:	7501b288 	.word	0x7501b288
 80113e4:	3f49efe0 	.word	0x3f49efe0
 80113e8:	b5688f3b 	.word	0xb5688f3b
 80113ec:	3fa48228 	.word	0x3fa48228
 80113f0:	0e884455 	.word	0x0e884455
 80113f4:	3fc9c155 	.word	0x3fc9c155
 80113f8:	03eb6f7d 	.word	0x03eb6f7d
 80113fc:	3fd4d612 	.word	0x3fd4d612
 8011400:	55555555 	.word	0x55555555
 8011404:	3fc55555 	.word	0x3fc55555
 8011408:	b12e9282 	.word	0xb12e9282
 801140c:	3fb3b8c5 	.word	0x3fb3b8c5
 8011410:	1b8d0159 	.word	0x1b8d0159
 8011414:	3fe6066c 	.word	0x3fe6066c
 8011418:	9c598ac8 	.word	0x9c598ac8
 801141c:	40002ae5 	.word	0x40002ae5
 8011420:	1c8a2d4b 	.word	0x1c8a2d4b
 8011424:	40033a27 	.word	0x40033a27
	...
 8011430:	54442d18 	.word	0x54442d18
 8011434:	3ff921fb 	.word	0x3ff921fb
 8011438:	3ff00000 	.word	0x3ff00000
 801143c:	3fe00000 	.word	0x3fe00000

08011440 <__ieee754_pow>:
 8011440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011444:	ed2d 8b06 	vpush	{d8-d10}
 8011448:	b089      	sub	sp, #36	; 0x24
 801144a:	ed8d 1b00 	vstr	d1, [sp]
 801144e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8011452:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8011456:	ea58 0102 	orrs.w	r1, r8, r2
 801145a:	ec57 6b10 	vmov	r6, r7, d0
 801145e:	d115      	bne.n	801148c <__ieee754_pow+0x4c>
 8011460:	19b3      	adds	r3, r6, r6
 8011462:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8011466:	4152      	adcs	r2, r2
 8011468:	4299      	cmp	r1, r3
 801146a:	4b89      	ldr	r3, [pc, #548]	; (8011690 <__ieee754_pow+0x250>)
 801146c:	4193      	sbcs	r3, r2
 801146e:	f080 84d1 	bcs.w	8011e14 <__ieee754_pow+0x9d4>
 8011472:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011476:	4630      	mov	r0, r6
 8011478:	4639      	mov	r1, r7
 801147a:	f7ee ff7f 	bl	800037c <__adddf3>
 801147e:	ec41 0b10 	vmov	d0, r0, r1
 8011482:	b009      	add	sp, #36	; 0x24
 8011484:	ecbd 8b06 	vpop	{d8-d10}
 8011488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801148c:	4b81      	ldr	r3, [pc, #516]	; (8011694 <__ieee754_pow+0x254>)
 801148e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8011492:	429c      	cmp	r4, r3
 8011494:	ee10 aa10 	vmov	sl, s0
 8011498:	463d      	mov	r5, r7
 801149a:	dc06      	bgt.n	80114aa <__ieee754_pow+0x6a>
 801149c:	d101      	bne.n	80114a2 <__ieee754_pow+0x62>
 801149e:	2e00      	cmp	r6, #0
 80114a0:	d1e7      	bne.n	8011472 <__ieee754_pow+0x32>
 80114a2:	4598      	cmp	r8, r3
 80114a4:	dc01      	bgt.n	80114aa <__ieee754_pow+0x6a>
 80114a6:	d10f      	bne.n	80114c8 <__ieee754_pow+0x88>
 80114a8:	b172      	cbz	r2, 80114c8 <__ieee754_pow+0x88>
 80114aa:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80114ae:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80114b2:	ea55 050a 	orrs.w	r5, r5, sl
 80114b6:	d1dc      	bne.n	8011472 <__ieee754_pow+0x32>
 80114b8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80114bc:	18db      	adds	r3, r3, r3
 80114be:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80114c2:	4152      	adcs	r2, r2
 80114c4:	429d      	cmp	r5, r3
 80114c6:	e7d0      	b.n	801146a <__ieee754_pow+0x2a>
 80114c8:	2d00      	cmp	r5, #0
 80114ca:	da3b      	bge.n	8011544 <__ieee754_pow+0x104>
 80114cc:	4b72      	ldr	r3, [pc, #456]	; (8011698 <__ieee754_pow+0x258>)
 80114ce:	4598      	cmp	r8, r3
 80114d0:	dc51      	bgt.n	8011576 <__ieee754_pow+0x136>
 80114d2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80114d6:	4598      	cmp	r8, r3
 80114d8:	f340 84ab 	ble.w	8011e32 <__ieee754_pow+0x9f2>
 80114dc:	ea4f 5328 	mov.w	r3, r8, asr #20
 80114e0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80114e4:	2b14      	cmp	r3, #20
 80114e6:	dd0f      	ble.n	8011508 <__ieee754_pow+0xc8>
 80114e8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80114ec:	fa22 f103 	lsr.w	r1, r2, r3
 80114f0:	fa01 f303 	lsl.w	r3, r1, r3
 80114f4:	4293      	cmp	r3, r2
 80114f6:	f040 849c 	bne.w	8011e32 <__ieee754_pow+0x9f2>
 80114fa:	f001 0101 	and.w	r1, r1, #1
 80114fe:	f1c1 0302 	rsb	r3, r1, #2
 8011502:	9304      	str	r3, [sp, #16]
 8011504:	b182      	cbz	r2, 8011528 <__ieee754_pow+0xe8>
 8011506:	e05f      	b.n	80115c8 <__ieee754_pow+0x188>
 8011508:	2a00      	cmp	r2, #0
 801150a:	d15b      	bne.n	80115c4 <__ieee754_pow+0x184>
 801150c:	f1c3 0314 	rsb	r3, r3, #20
 8011510:	fa48 f103 	asr.w	r1, r8, r3
 8011514:	fa01 f303 	lsl.w	r3, r1, r3
 8011518:	4543      	cmp	r3, r8
 801151a:	f040 8487 	bne.w	8011e2c <__ieee754_pow+0x9ec>
 801151e:	f001 0101 	and.w	r1, r1, #1
 8011522:	f1c1 0302 	rsb	r3, r1, #2
 8011526:	9304      	str	r3, [sp, #16]
 8011528:	4b5c      	ldr	r3, [pc, #368]	; (801169c <__ieee754_pow+0x25c>)
 801152a:	4598      	cmp	r8, r3
 801152c:	d132      	bne.n	8011594 <__ieee754_pow+0x154>
 801152e:	f1b9 0f00 	cmp.w	r9, #0
 8011532:	f280 8477 	bge.w	8011e24 <__ieee754_pow+0x9e4>
 8011536:	4959      	ldr	r1, [pc, #356]	; (801169c <__ieee754_pow+0x25c>)
 8011538:	4632      	mov	r2, r6
 801153a:	463b      	mov	r3, r7
 801153c:	2000      	movs	r0, #0
 801153e:	f7ef f9fd 	bl	800093c <__aeabi_ddiv>
 8011542:	e79c      	b.n	801147e <__ieee754_pow+0x3e>
 8011544:	2300      	movs	r3, #0
 8011546:	9304      	str	r3, [sp, #16]
 8011548:	2a00      	cmp	r2, #0
 801154a:	d13d      	bne.n	80115c8 <__ieee754_pow+0x188>
 801154c:	4b51      	ldr	r3, [pc, #324]	; (8011694 <__ieee754_pow+0x254>)
 801154e:	4598      	cmp	r8, r3
 8011550:	d1ea      	bne.n	8011528 <__ieee754_pow+0xe8>
 8011552:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8011556:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801155a:	ea53 030a 	orrs.w	r3, r3, sl
 801155e:	f000 8459 	beq.w	8011e14 <__ieee754_pow+0x9d4>
 8011562:	4b4f      	ldr	r3, [pc, #316]	; (80116a0 <__ieee754_pow+0x260>)
 8011564:	429c      	cmp	r4, r3
 8011566:	dd08      	ble.n	801157a <__ieee754_pow+0x13a>
 8011568:	f1b9 0f00 	cmp.w	r9, #0
 801156c:	f2c0 8456 	blt.w	8011e1c <__ieee754_pow+0x9dc>
 8011570:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011574:	e783      	b.n	801147e <__ieee754_pow+0x3e>
 8011576:	2302      	movs	r3, #2
 8011578:	e7e5      	b.n	8011546 <__ieee754_pow+0x106>
 801157a:	f1b9 0f00 	cmp.w	r9, #0
 801157e:	f04f 0000 	mov.w	r0, #0
 8011582:	f04f 0100 	mov.w	r1, #0
 8011586:	f6bf af7a 	bge.w	801147e <__ieee754_pow+0x3e>
 801158a:	e9dd 0300 	ldrd	r0, r3, [sp]
 801158e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011592:	e774      	b.n	801147e <__ieee754_pow+0x3e>
 8011594:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8011598:	d106      	bne.n	80115a8 <__ieee754_pow+0x168>
 801159a:	4632      	mov	r2, r6
 801159c:	463b      	mov	r3, r7
 801159e:	4630      	mov	r0, r6
 80115a0:	4639      	mov	r1, r7
 80115a2:	f7ef f8a1 	bl	80006e8 <__aeabi_dmul>
 80115a6:	e76a      	b.n	801147e <__ieee754_pow+0x3e>
 80115a8:	4b3e      	ldr	r3, [pc, #248]	; (80116a4 <__ieee754_pow+0x264>)
 80115aa:	4599      	cmp	r9, r3
 80115ac:	d10c      	bne.n	80115c8 <__ieee754_pow+0x188>
 80115ae:	2d00      	cmp	r5, #0
 80115b0:	db0a      	blt.n	80115c8 <__ieee754_pow+0x188>
 80115b2:	ec47 6b10 	vmov	d0, r6, r7
 80115b6:	b009      	add	sp, #36	; 0x24
 80115b8:	ecbd 8b06 	vpop	{d8-d10}
 80115bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115c0:	f7ff ba58 	b.w	8010a74 <__ieee754_sqrt>
 80115c4:	2300      	movs	r3, #0
 80115c6:	9304      	str	r3, [sp, #16]
 80115c8:	ec47 6b10 	vmov	d0, r6, r7
 80115cc:	f7ff f96c 	bl	80108a8 <fabs>
 80115d0:	ec51 0b10 	vmov	r0, r1, d0
 80115d4:	f1ba 0f00 	cmp.w	sl, #0
 80115d8:	d129      	bne.n	801162e <__ieee754_pow+0x1ee>
 80115da:	b124      	cbz	r4, 80115e6 <__ieee754_pow+0x1a6>
 80115dc:	4b2f      	ldr	r3, [pc, #188]	; (801169c <__ieee754_pow+0x25c>)
 80115de:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80115e2:	429a      	cmp	r2, r3
 80115e4:	d123      	bne.n	801162e <__ieee754_pow+0x1ee>
 80115e6:	f1b9 0f00 	cmp.w	r9, #0
 80115ea:	da05      	bge.n	80115f8 <__ieee754_pow+0x1b8>
 80115ec:	4602      	mov	r2, r0
 80115ee:	460b      	mov	r3, r1
 80115f0:	2000      	movs	r0, #0
 80115f2:	492a      	ldr	r1, [pc, #168]	; (801169c <__ieee754_pow+0x25c>)
 80115f4:	f7ef f9a2 	bl	800093c <__aeabi_ddiv>
 80115f8:	2d00      	cmp	r5, #0
 80115fa:	f6bf af40 	bge.w	801147e <__ieee754_pow+0x3e>
 80115fe:	9b04      	ldr	r3, [sp, #16]
 8011600:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8011604:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011608:	431c      	orrs	r4, r3
 801160a:	d108      	bne.n	801161e <__ieee754_pow+0x1de>
 801160c:	4602      	mov	r2, r0
 801160e:	460b      	mov	r3, r1
 8011610:	4610      	mov	r0, r2
 8011612:	4619      	mov	r1, r3
 8011614:	f7ee feb0 	bl	8000378 <__aeabi_dsub>
 8011618:	4602      	mov	r2, r0
 801161a:	460b      	mov	r3, r1
 801161c:	e78f      	b.n	801153e <__ieee754_pow+0xfe>
 801161e:	9b04      	ldr	r3, [sp, #16]
 8011620:	2b01      	cmp	r3, #1
 8011622:	f47f af2c 	bne.w	801147e <__ieee754_pow+0x3e>
 8011626:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801162a:	4619      	mov	r1, r3
 801162c:	e727      	b.n	801147e <__ieee754_pow+0x3e>
 801162e:	0feb      	lsrs	r3, r5, #31
 8011630:	3b01      	subs	r3, #1
 8011632:	9306      	str	r3, [sp, #24]
 8011634:	9a06      	ldr	r2, [sp, #24]
 8011636:	9b04      	ldr	r3, [sp, #16]
 8011638:	4313      	orrs	r3, r2
 801163a:	d102      	bne.n	8011642 <__ieee754_pow+0x202>
 801163c:	4632      	mov	r2, r6
 801163e:	463b      	mov	r3, r7
 8011640:	e7e6      	b.n	8011610 <__ieee754_pow+0x1d0>
 8011642:	4b19      	ldr	r3, [pc, #100]	; (80116a8 <__ieee754_pow+0x268>)
 8011644:	4598      	cmp	r8, r3
 8011646:	f340 80fb 	ble.w	8011840 <__ieee754_pow+0x400>
 801164a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801164e:	4598      	cmp	r8, r3
 8011650:	4b13      	ldr	r3, [pc, #76]	; (80116a0 <__ieee754_pow+0x260>)
 8011652:	dd0c      	ble.n	801166e <__ieee754_pow+0x22e>
 8011654:	429c      	cmp	r4, r3
 8011656:	dc0f      	bgt.n	8011678 <__ieee754_pow+0x238>
 8011658:	f1b9 0f00 	cmp.w	r9, #0
 801165c:	da0f      	bge.n	801167e <__ieee754_pow+0x23e>
 801165e:	2000      	movs	r0, #0
 8011660:	b009      	add	sp, #36	; 0x24
 8011662:	ecbd 8b06 	vpop	{d8-d10}
 8011666:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801166a:	f000 bf1a 	b.w	80124a2 <__math_oflow>
 801166e:	429c      	cmp	r4, r3
 8011670:	dbf2      	blt.n	8011658 <__ieee754_pow+0x218>
 8011672:	4b0a      	ldr	r3, [pc, #40]	; (801169c <__ieee754_pow+0x25c>)
 8011674:	429c      	cmp	r4, r3
 8011676:	dd19      	ble.n	80116ac <__ieee754_pow+0x26c>
 8011678:	f1b9 0f00 	cmp.w	r9, #0
 801167c:	dcef      	bgt.n	801165e <__ieee754_pow+0x21e>
 801167e:	2000      	movs	r0, #0
 8011680:	b009      	add	sp, #36	; 0x24
 8011682:	ecbd 8b06 	vpop	{d8-d10}
 8011686:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801168a:	f000 bf01 	b.w	8012490 <__math_uflow>
 801168e:	bf00      	nop
 8011690:	fff00000 	.word	0xfff00000
 8011694:	7ff00000 	.word	0x7ff00000
 8011698:	433fffff 	.word	0x433fffff
 801169c:	3ff00000 	.word	0x3ff00000
 80116a0:	3fefffff 	.word	0x3fefffff
 80116a4:	3fe00000 	.word	0x3fe00000
 80116a8:	41e00000 	.word	0x41e00000
 80116ac:	4b60      	ldr	r3, [pc, #384]	; (8011830 <__ieee754_pow+0x3f0>)
 80116ae:	2200      	movs	r2, #0
 80116b0:	f7ee fe62 	bl	8000378 <__aeabi_dsub>
 80116b4:	a354      	add	r3, pc, #336	; (adr r3, 8011808 <__ieee754_pow+0x3c8>)
 80116b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116ba:	4604      	mov	r4, r0
 80116bc:	460d      	mov	r5, r1
 80116be:	f7ef f813 	bl	80006e8 <__aeabi_dmul>
 80116c2:	a353      	add	r3, pc, #332	; (adr r3, 8011810 <__ieee754_pow+0x3d0>)
 80116c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116c8:	4606      	mov	r6, r0
 80116ca:	460f      	mov	r7, r1
 80116cc:	4620      	mov	r0, r4
 80116ce:	4629      	mov	r1, r5
 80116d0:	f7ef f80a 	bl	80006e8 <__aeabi_dmul>
 80116d4:	4b57      	ldr	r3, [pc, #348]	; (8011834 <__ieee754_pow+0x3f4>)
 80116d6:	4682      	mov	sl, r0
 80116d8:	468b      	mov	fp, r1
 80116da:	2200      	movs	r2, #0
 80116dc:	4620      	mov	r0, r4
 80116de:	4629      	mov	r1, r5
 80116e0:	f7ef f802 	bl	80006e8 <__aeabi_dmul>
 80116e4:	4602      	mov	r2, r0
 80116e6:	460b      	mov	r3, r1
 80116e8:	a14b      	add	r1, pc, #300	; (adr r1, 8011818 <__ieee754_pow+0x3d8>)
 80116ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80116ee:	f7ee fe43 	bl	8000378 <__aeabi_dsub>
 80116f2:	4622      	mov	r2, r4
 80116f4:	462b      	mov	r3, r5
 80116f6:	f7ee fff7 	bl	80006e8 <__aeabi_dmul>
 80116fa:	4602      	mov	r2, r0
 80116fc:	460b      	mov	r3, r1
 80116fe:	2000      	movs	r0, #0
 8011700:	494d      	ldr	r1, [pc, #308]	; (8011838 <__ieee754_pow+0x3f8>)
 8011702:	f7ee fe39 	bl	8000378 <__aeabi_dsub>
 8011706:	4622      	mov	r2, r4
 8011708:	4680      	mov	r8, r0
 801170a:	4689      	mov	r9, r1
 801170c:	462b      	mov	r3, r5
 801170e:	4620      	mov	r0, r4
 8011710:	4629      	mov	r1, r5
 8011712:	f7ee ffe9 	bl	80006e8 <__aeabi_dmul>
 8011716:	4602      	mov	r2, r0
 8011718:	460b      	mov	r3, r1
 801171a:	4640      	mov	r0, r8
 801171c:	4649      	mov	r1, r9
 801171e:	f7ee ffe3 	bl	80006e8 <__aeabi_dmul>
 8011722:	a33f      	add	r3, pc, #252	; (adr r3, 8011820 <__ieee754_pow+0x3e0>)
 8011724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011728:	f7ee ffde 	bl	80006e8 <__aeabi_dmul>
 801172c:	4602      	mov	r2, r0
 801172e:	460b      	mov	r3, r1
 8011730:	4650      	mov	r0, sl
 8011732:	4659      	mov	r1, fp
 8011734:	f7ee fe20 	bl	8000378 <__aeabi_dsub>
 8011738:	4602      	mov	r2, r0
 801173a:	460b      	mov	r3, r1
 801173c:	4680      	mov	r8, r0
 801173e:	4689      	mov	r9, r1
 8011740:	4630      	mov	r0, r6
 8011742:	4639      	mov	r1, r7
 8011744:	f7ee fe1a 	bl	800037c <__adddf3>
 8011748:	2000      	movs	r0, #0
 801174a:	4632      	mov	r2, r6
 801174c:	463b      	mov	r3, r7
 801174e:	4604      	mov	r4, r0
 8011750:	460d      	mov	r5, r1
 8011752:	f7ee fe11 	bl	8000378 <__aeabi_dsub>
 8011756:	4602      	mov	r2, r0
 8011758:	460b      	mov	r3, r1
 801175a:	4640      	mov	r0, r8
 801175c:	4649      	mov	r1, r9
 801175e:	f7ee fe0b 	bl	8000378 <__aeabi_dsub>
 8011762:	9b04      	ldr	r3, [sp, #16]
 8011764:	9a06      	ldr	r2, [sp, #24]
 8011766:	3b01      	subs	r3, #1
 8011768:	4313      	orrs	r3, r2
 801176a:	4682      	mov	sl, r0
 801176c:	468b      	mov	fp, r1
 801176e:	f040 81e7 	bne.w	8011b40 <__ieee754_pow+0x700>
 8011772:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8011828 <__ieee754_pow+0x3e8>
 8011776:	eeb0 8a47 	vmov.f32	s16, s14
 801177a:	eef0 8a67 	vmov.f32	s17, s15
 801177e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8011782:	2600      	movs	r6, #0
 8011784:	4632      	mov	r2, r6
 8011786:	463b      	mov	r3, r7
 8011788:	e9dd 0100 	ldrd	r0, r1, [sp]
 801178c:	f7ee fdf4 	bl	8000378 <__aeabi_dsub>
 8011790:	4622      	mov	r2, r4
 8011792:	462b      	mov	r3, r5
 8011794:	f7ee ffa8 	bl	80006e8 <__aeabi_dmul>
 8011798:	e9dd 2300 	ldrd	r2, r3, [sp]
 801179c:	4680      	mov	r8, r0
 801179e:	4689      	mov	r9, r1
 80117a0:	4650      	mov	r0, sl
 80117a2:	4659      	mov	r1, fp
 80117a4:	f7ee ffa0 	bl	80006e8 <__aeabi_dmul>
 80117a8:	4602      	mov	r2, r0
 80117aa:	460b      	mov	r3, r1
 80117ac:	4640      	mov	r0, r8
 80117ae:	4649      	mov	r1, r9
 80117b0:	f7ee fde4 	bl	800037c <__adddf3>
 80117b4:	4632      	mov	r2, r6
 80117b6:	463b      	mov	r3, r7
 80117b8:	4680      	mov	r8, r0
 80117ba:	4689      	mov	r9, r1
 80117bc:	4620      	mov	r0, r4
 80117be:	4629      	mov	r1, r5
 80117c0:	f7ee ff92 	bl	80006e8 <__aeabi_dmul>
 80117c4:	460b      	mov	r3, r1
 80117c6:	4604      	mov	r4, r0
 80117c8:	460d      	mov	r5, r1
 80117ca:	4602      	mov	r2, r0
 80117cc:	4649      	mov	r1, r9
 80117ce:	4640      	mov	r0, r8
 80117d0:	f7ee fdd4 	bl	800037c <__adddf3>
 80117d4:	4b19      	ldr	r3, [pc, #100]	; (801183c <__ieee754_pow+0x3fc>)
 80117d6:	4299      	cmp	r1, r3
 80117d8:	ec45 4b19 	vmov	d9, r4, r5
 80117dc:	4606      	mov	r6, r0
 80117de:	460f      	mov	r7, r1
 80117e0:	468b      	mov	fp, r1
 80117e2:	f340 82f0 	ble.w	8011dc6 <__ieee754_pow+0x986>
 80117e6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80117ea:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80117ee:	4303      	orrs	r3, r0
 80117f0:	f000 81e4 	beq.w	8011bbc <__ieee754_pow+0x77c>
 80117f4:	ec51 0b18 	vmov	r0, r1, d8
 80117f8:	2200      	movs	r2, #0
 80117fa:	2300      	movs	r3, #0
 80117fc:	f7ef f9e6 	bl	8000bcc <__aeabi_dcmplt>
 8011800:	3800      	subs	r0, #0
 8011802:	bf18      	it	ne
 8011804:	2001      	movne	r0, #1
 8011806:	e72b      	b.n	8011660 <__ieee754_pow+0x220>
 8011808:	60000000 	.word	0x60000000
 801180c:	3ff71547 	.word	0x3ff71547
 8011810:	f85ddf44 	.word	0xf85ddf44
 8011814:	3e54ae0b 	.word	0x3e54ae0b
 8011818:	55555555 	.word	0x55555555
 801181c:	3fd55555 	.word	0x3fd55555
 8011820:	652b82fe 	.word	0x652b82fe
 8011824:	3ff71547 	.word	0x3ff71547
 8011828:	00000000 	.word	0x00000000
 801182c:	bff00000 	.word	0xbff00000
 8011830:	3ff00000 	.word	0x3ff00000
 8011834:	3fd00000 	.word	0x3fd00000
 8011838:	3fe00000 	.word	0x3fe00000
 801183c:	408fffff 	.word	0x408fffff
 8011840:	4bd5      	ldr	r3, [pc, #852]	; (8011b98 <__ieee754_pow+0x758>)
 8011842:	402b      	ands	r3, r5
 8011844:	2200      	movs	r2, #0
 8011846:	b92b      	cbnz	r3, 8011854 <__ieee754_pow+0x414>
 8011848:	4bd4      	ldr	r3, [pc, #848]	; (8011b9c <__ieee754_pow+0x75c>)
 801184a:	f7ee ff4d 	bl	80006e8 <__aeabi_dmul>
 801184e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8011852:	460c      	mov	r4, r1
 8011854:	1523      	asrs	r3, r4, #20
 8011856:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801185a:	4413      	add	r3, r2
 801185c:	9305      	str	r3, [sp, #20]
 801185e:	4bd0      	ldr	r3, [pc, #832]	; (8011ba0 <__ieee754_pow+0x760>)
 8011860:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8011864:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8011868:	429c      	cmp	r4, r3
 801186a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801186e:	dd08      	ble.n	8011882 <__ieee754_pow+0x442>
 8011870:	4bcc      	ldr	r3, [pc, #816]	; (8011ba4 <__ieee754_pow+0x764>)
 8011872:	429c      	cmp	r4, r3
 8011874:	f340 8162 	ble.w	8011b3c <__ieee754_pow+0x6fc>
 8011878:	9b05      	ldr	r3, [sp, #20]
 801187a:	3301      	adds	r3, #1
 801187c:	9305      	str	r3, [sp, #20]
 801187e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8011882:	2400      	movs	r4, #0
 8011884:	00e3      	lsls	r3, r4, #3
 8011886:	9307      	str	r3, [sp, #28]
 8011888:	4bc7      	ldr	r3, [pc, #796]	; (8011ba8 <__ieee754_pow+0x768>)
 801188a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801188e:	ed93 7b00 	vldr	d7, [r3]
 8011892:	4629      	mov	r1, r5
 8011894:	ec53 2b17 	vmov	r2, r3, d7
 8011898:	eeb0 9a47 	vmov.f32	s18, s14
 801189c:	eef0 9a67 	vmov.f32	s19, s15
 80118a0:	4682      	mov	sl, r0
 80118a2:	f7ee fd69 	bl	8000378 <__aeabi_dsub>
 80118a6:	4652      	mov	r2, sl
 80118a8:	4606      	mov	r6, r0
 80118aa:	460f      	mov	r7, r1
 80118ac:	462b      	mov	r3, r5
 80118ae:	ec51 0b19 	vmov	r0, r1, d9
 80118b2:	f7ee fd63 	bl	800037c <__adddf3>
 80118b6:	4602      	mov	r2, r0
 80118b8:	460b      	mov	r3, r1
 80118ba:	2000      	movs	r0, #0
 80118bc:	49bb      	ldr	r1, [pc, #748]	; (8011bac <__ieee754_pow+0x76c>)
 80118be:	f7ef f83d 	bl	800093c <__aeabi_ddiv>
 80118c2:	ec41 0b1a 	vmov	d10, r0, r1
 80118c6:	4602      	mov	r2, r0
 80118c8:	460b      	mov	r3, r1
 80118ca:	4630      	mov	r0, r6
 80118cc:	4639      	mov	r1, r7
 80118ce:	f7ee ff0b 	bl	80006e8 <__aeabi_dmul>
 80118d2:	2300      	movs	r3, #0
 80118d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80118d8:	9302      	str	r3, [sp, #8]
 80118da:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80118de:	46ab      	mov	fp, r5
 80118e0:	106d      	asrs	r5, r5, #1
 80118e2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80118e6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80118ea:	ec41 0b18 	vmov	d8, r0, r1
 80118ee:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80118f2:	2200      	movs	r2, #0
 80118f4:	4640      	mov	r0, r8
 80118f6:	4649      	mov	r1, r9
 80118f8:	4614      	mov	r4, r2
 80118fa:	461d      	mov	r5, r3
 80118fc:	f7ee fef4 	bl	80006e8 <__aeabi_dmul>
 8011900:	4602      	mov	r2, r0
 8011902:	460b      	mov	r3, r1
 8011904:	4630      	mov	r0, r6
 8011906:	4639      	mov	r1, r7
 8011908:	f7ee fd36 	bl	8000378 <__aeabi_dsub>
 801190c:	ec53 2b19 	vmov	r2, r3, d9
 8011910:	4606      	mov	r6, r0
 8011912:	460f      	mov	r7, r1
 8011914:	4620      	mov	r0, r4
 8011916:	4629      	mov	r1, r5
 8011918:	f7ee fd2e 	bl	8000378 <__aeabi_dsub>
 801191c:	4602      	mov	r2, r0
 801191e:	460b      	mov	r3, r1
 8011920:	4650      	mov	r0, sl
 8011922:	4659      	mov	r1, fp
 8011924:	f7ee fd28 	bl	8000378 <__aeabi_dsub>
 8011928:	4642      	mov	r2, r8
 801192a:	464b      	mov	r3, r9
 801192c:	f7ee fedc 	bl	80006e8 <__aeabi_dmul>
 8011930:	4602      	mov	r2, r0
 8011932:	460b      	mov	r3, r1
 8011934:	4630      	mov	r0, r6
 8011936:	4639      	mov	r1, r7
 8011938:	f7ee fd1e 	bl	8000378 <__aeabi_dsub>
 801193c:	ec53 2b1a 	vmov	r2, r3, d10
 8011940:	f7ee fed2 	bl	80006e8 <__aeabi_dmul>
 8011944:	ec53 2b18 	vmov	r2, r3, d8
 8011948:	ec41 0b19 	vmov	d9, r0, r1
 801194c:	ec51 0b18 	vmov	r0, r1, d8
 8011950:	f7ee feca 	bl	80006e8 <__aeabi_dmul>
 8011954:	a37c      	add	r3, pc, #496	; (adr r3, 8011b48 <__ieee754_pow+0x708>)
 8011956:	e9d3 2300 	ldrd	r2, r3, [r3]
 801195a:	4604      	mov	r4, r0
 801195c:	460d      	mov	r5, r1
 801195e:	f7ee fec3 	bl	80006e8 <__aeabi_dmul>
 8011962:	a37b      	add	r3, pc, #492	; (adr r3, 8011b50 <__ieee754_pow+0x710>)
 8011964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011968:	f7ee fd08 	bl	800037c <__adddf3>
 801196c:	4622      	mov	r2, r4
 801196e:	462b      	mov	r3, r5
 8011970:	f7ee feba 	bl	80006e8 <__aeabi_dmul>
 8011974:	a378      	add	r3, pc, #480	; (adr r3, 8011b58 <__ieee754_pow+0x718>)
 8011976:	e9d3 2300 	ldrd	r2, r3, [r3]
 801197a:	f7ee fcff 	bl	800037c <__adddf3>
 801197e:	4622      	mov	r2, r4
 8011980:	462b      	mov	r3, r5
 8011982:	f7ee feb1 	bl	80006e8 <__aeabi_dmul>
 8011986:	a376      	add	r3, pc, #472	; (adr r3, 8011b60 <__ieee754_pow+0x720>)
 8011988:	e9d3 2300 	ldrd	r2, r3, [r3]
 801198c:	f7ee fcf6 	bl	800037c <__adddf3>
 8011990:	4622      	mov	r2, r4
 8011992:	462b      	mov	r3, r5
 8011994:	f7ee fea8 	bl	80006e8 <__aeabi_dmul>
 8011998:	a373      	add	r3, pc, #460	; (adr r3, 8011b68 <__ieee754_pow+0x728>)
 801199a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801199e:	f7ee fced 	bl	800037c <__adddf3>
 80119a2:	4622      	mov	r2, r4
 80119a4:	462b      	mov	r3, r5
 80119a6:	f7ee fe9f 	bl	80006e8 <__aeabi_dmul>
 80119aa:	a371      	add	r3, pc, #452	; (adr r3, 8011b70 <__ieee754_pow+0x730>)
 80119ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119b0:	f7ee fce4 	bl	800037c <__adddf3>
 80119b4:	4622      	mov	r2, r4
 80119b6:	4606      	mov	r6, r0
 80119b8:	460f      	mov	r7, r1
 80119ba:	462b      	mov	r3, r5
 80119bc:	4620      	mov	r0, r4
 80119be:	4629      	mov	r1, r5
 80119c0:	f7ee fe92 	bl	80006e8 <__aeabi_dmul>
 80119c4:	4602      	mov	r2, r0
 80119c6:	460b      	mov	r3, r1
 80119c8:	4630      	mov	r0, r6
 80119ca:	4639      	mov	r1, r7
 80119cc:	f7ee fe8c 	bl	80006e8 <__aeabi_dmul>
 80119d0:	4642      	mov	r2, r8
 80119d2:	4604      	mov	r4, r0
 80119d4:	460d      	mov	r5, r1
 80119d6:	464b      	mov	r3, r9
 80119d8:	ec51 0b18 	vmov	r0, r1, d8
 80119dc:	f7ee fcce 	bl	800037c <__adddf3>
 80119e0:	ec53 2b19 	vmov	r2, r3, d9
 80119e4:	f7ee fe80 	bl	80006e8 <__aeabi_dmul>
 80119e8:	4622      	mov	r2, r4
 80119ea:	462b      	mov	r3, r5
 80119ec:	f7ee fcc6 	bl	800037c <__adddf3>
 80119f0:	4642      	mov	r2, r8
 80119f2:	4682      	mov	sl, r0
 80119f4:	468b      	mov	fp, r1
 80119f6:	464b      	mov	r3, r9
 80119f8:	4640      	mov	r0, r8
 80119fa:	4649      	mov	r1, r9
 80119fc:	f7ee fe74 	bl	80006e8 <__aeabi_dmul>
 8011a00:	4b6b      	ldr	r3, [pc, #428]	; (8011bb0 <__ieee754_pow+0x770>)
 8011a02:	2200      	movs	r2, #0
 8011a04:	4606      	mov	r6, r0
 8011a06:	460f      	mov	r7, r1
 8011a08:	f7ee fcb8 	bl	800037c <__adddf3>
 8011a0c:	4652      	mov	r2, sl
 8011a0e:	465b      	mov	r3, fp
 8011a10:	f7ee fcb4 	bl	800037c <__adddf3>
 8011a14:	2000      	movs	r0, #0
 8011a16:	4604      	mov	r4, r0
 8011a18:	460d      	mov	r5, r1
 8011a1a:	4602      	mov	r2, r0
 8011a1c:	460b      	mov	r3, r1
 8011a1e:	4640      	mov	r0, r8
 8011a20:	4649      	mov	r1, r9
 8011a22:	f7ee fe61 	bl	80006e8 <__aeabi_dmul>
 8011a26:	4b62      	ldr	r3, [pc, #392]	; (8011bb0 <__ieee754_pow+0x770>)
 8011a28:	4680      	mov	r8, r0
 8011a2a:	4689      	mov	r9, r1
 8011a2c:	2200      	movs	r2, #0
 8011a2e:	4620      	mov	r0, r4
 8011a30:	4629      	mov	r1, r5
 8011a32:	f7ee fca1 	bl	8000378 <__aeabi_dsub>
 8011a36:	4632      	mov	r2, r6
 8011a38:	463b      	mov	r3, r7
 8011a3a:	f7ee fc9d 	bl	8000378 <__aeabi_dsub>
 8011a3e:	4602      	mov	r2, r0
 8011a40:	460b      	mov	r3, r1
 8011a42:	4650      	mov	r0, sl
 8011a44:	4659      	mov	r1, fp
 8011a46:	f7ee fc97 	bl	8000378 <__aeabi_dsub>
 8011a4a:	ec53 2b18 	vmov	r2, r3, d8
 8011a4e:	f7ee fe4b 	bl	80006e8 <__aeabi_dmul>
 8011a52:	4622      	mov	r2, r4
 8011a54:	4606      	mov	r6, r0
 8011a56:	460f      	mov	r7, r1
 8011a58:	462b      	mov	r3, r5
 8011a5a:	ec51 0b19 	vmov	r0, r1, d9
 8011a5e:	f7ee fe43 	bl	80006e8 <__aeabi_dmul>
 8011a62:	4602      	mov	r2, r0
 8011a64:	460b      	mov	r3, r1
 8011a66:	4630      	mov	r0, r6
 8011a68:	4639      	mov	r1, r7
 8011a6a:	f7ee fc87 	bl	800037c <__adddf3>
 8011a6e:	4606      	mov	r6, r0
 8011a70:	460f      	mov	r7, r1
 8011a72:	4602      	mov	r2, r0
 8011a74:	460b      	mov	r3, r1
 8011a76:	4640      	mov	r0, r8
 8011a78:	4649      	mov	r1, r9
 8011a7a:	f7ee fc7f 	bl	800037c <__adddf3>
 8011a7e:	a33e      	add	r3, pc, #248	; (adr r3, 8011b78 <__ieee754_pow+0x738>)
 8011a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a84:	2000      	movs	r0, #0
 8011a86:	4604      	mov	r4, r0
 8011a88:	460d      	mov	r5, r1
 8011a8a:	f7ee fe2d 	bl	80006e8 <__aeabi_dmul>
 8011a8e:	4642      	mov	r2, r8
 8011a90:	ec41 0b18 	vmov	d8, r0, r1
 8011a94:	464b      	mov	r3, r9
 8011a96:	4620      	mov	r0, r4
 8011a98:	4629      	mov	r1, r5
 8011a9a:	f7ee fc6d 	bl	8000378 <__aeabi_dsub>
 8011a9e:	4602      	mov	r2, r0
 8011aa0:	460b      	mov	r3, r1
 8011aa2:	4630      	mov	r0, r6
 8011aa4:	4639      	mov	r1, r7
 8011aa6:	f7ee fc67 	bl	8000378 <__aeabi_dsub>
 8011aaa:	a335      	add	r3, pc, #212	; (adr r3, 8011b80 <__ieee754_pow+0x740>)
 8011aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ab0:	f7ee fe1a 	bl	80006e8 <__aeabi_dmul>
 8011ab4:	a334      	add	r3, pc, #208	; (adr r3, 8011b88 <__ieee754_pow+0x748>)
 8011ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011aba:	4606      	mov	r6, r0
 8011abc:	460f      	mov	r7, r1
 8011abe:	4620      	mov	r0, r4
 8011ac0:	4629      	mov	r1, r5
 8011ac2:	f7ee fe11 	bl	80006e8 <__aeabi_dmul>
 8011ac6:	4602      	mov	r2, r0
 8011ac8:	460b      	mov	r3, r1
 8011aca:	4630      	mov	r0, r6
 8011acc:	4639      	mov	r1, r7
 8011ace:	f7ee fc55 	bl	800037c <__adddf3>
 8011ad2:	9a07      	ldr	r2, [sp, #28]
 8011ad4:	4b37      	ldr	r3, [pc, #220]	; (8011bb4 <__ieee754_pow+0x774>)
 8011ad6:	4413      	add	r3, r2
 8011ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011adc:	f7ee fc4e 	bl	800037c <__adddf3>
 8011ae0:	4682      	mov	sl, r0
 8011ae2:	9805      	ldr	r0, [sp, #20]
 8011ae4:	468b      	mov	fp, r1
 8011ae6:	f7ee fd95 	bl	8000614 <__aeabi_i2d>
 8011aea:	9a07      	ldr	r2, [sp, #28]
 8011aec:	4b32      	ldr	r3, [pc, #200]	; (8011bb8 <__ieee754_pow+0x778>)
 8011aee:	4413      	add	r3, r2
 8011af0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011af4:	4606      	mov	r6, r0
 8011af6:	460f      	mov	r7, r1
 8011af8:	4652      	mov	r2, sl
 8011afa:	465b      	mov	r3, fp
 8011afc:	ec51 0b18 	vmov	r0, r1, d8
 8011b00:	f7ee fc3c 	bl	800037c <__adddf3>
 8011b04:	4642      	mov	r2, r8
 8011b06:	464b      	mov	r3, r9
 8011b08:	f7ee fc38 	bl	800037c <__adddf3>
 8011b0c:	4632      	mov	r2, r6
 8011b0e:	463b      	mov	r3, r7
 8011b10:	f7ee fc34 	bl	800037c <__adddf3>
 8011b14:	2000      	movs	r0, #0
 8011b16:	4632      	mov	r2, r6
 8011b18:	463b      	mov	r3, r7
 8011b1a:	4604      	mov	r4, r0
 8011b1c:	460d      	mov	r5, r1
 8011b1e:	f7ee fc2b 	bl	8000378 <__aeabi_dsub>
 8011b22:	4642      	mov	r2, r8
 8011b24:	464b      	mov	r3, r9
 8011b26:	f7ee fc27 	bl	8000378 <__aeabi_dsub>
 8011b2a:	ec53 2b18 	vmov	r2, r3, d8
 8011b2e:	f7ee fc23 	bl	8000378 <__aeabi_dsub>
 8011b32:	4602      	mov	r2, r0
 8011b34:	460b      	mov	r3, r1
 8011b36:	4650      	mov	r0, sl
 8011b38:	4659      	mov	r1, fp
 8011b3a:	e610      	b.n	801175e <__ieee754_pow+0x31e>
 8011b3c:	2401      	movs	r4, #1
 8011b3e:	e6a1      	b.n	8011884 <__ieee754_pow+0x444>
 8011b40:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8011b90 <__ieee754_pow+0x750>
 8011b44:	e617      	b.n	8011776 <__ieee754_pow+0x336>
 8011b46:	bf00      	nop
 8011b48:	4a454eef 	.word	0x4a454eef
 8011b4c:	3fca7e28 	.word	0x3fca7e28
 8011b50:	93c9db65 	.word	0x93c9db65
 8011b54:	3fcd864a 	.word	0x3fcd864a
 8011b58:	a91d4101 	.word	0xa91d4101
 8011b5c:	3fd17460 	.word	0x3fd17460
 8011b60:	518f264d 	.word	0x518f264d
 8011b64:	3fd55555 	.word	0x3fd55555
 8011b68:	db6fabff 	.word	0xdb6fabff
 8011b6c:	3fdb6db6 	.word	0x3fdb6db6
 8011b70:	33333303 	.word	0x33333303
 8011b74:	3fe33333 	.word	0x3fe33333
 8011b78:	e0000000 	.word	0xe0000000
 8011b7c:	3feec709 	.word	0x3feec709
 8011b80:	dc3a03fd 	.word	0xdc3a03fd
 8011b84:	3feec709 	.word	0x3feec709
 8011b88:	145b01f5 	.word	0x145b01f5
 8011b8c:	be3e2fe0 	.word	0xbe3e2fe0
 8011b90:	00000000 	.word	0x00000000
 8011b94:	3ff00000 	.word	0x3ff00000
 8011b98:	7ff00000 	.word	0x7ff00000
 8011b9c:	43400000 	.word	0x43400000
 8011ba0:	0003988e 	.word	0x0003988e
 8011ba4:	000bb679 	.word	0x000bb679
 8011ba8:	08018918 	.word	0x08018918
 8011bac:	3ff00000 	.word	0x3ff00000
 8011bb0:	40080000 	.word	0x40080000
 8011bb4:	08018938 	.word	0x08018938
 8011bb8:	08018928 	.word	0x08018928
 8011bbc:	a3b3      	add	r3, pc, #716	; (adr r3, 8011e8c <__ieee754_pow+0xa4c>)
 8011bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bc2:	4640      	mov	r0, r8
 8011bc4:	4649      	mov	r1, r9
 8011bc6:	f7ee fbd9 	bl	800037c <__adddf3>
 8011bca:	4622      	mov	r2, r4
 8011bcc:	ec41 0b1a 	vmov	d10, r0, r1
 8011bd0:	462b      	mov	r3, r5
 8011bd2:	4630      	mov	r0, r6
 8011bd4:	4639      	mov	r1, r7
 8011bd6:	f7ee fbcf 	bl	8000378 <__aeabi_dsub>
 8011bda:	4602      	mov	r2, r0
 8011bdc:	460b      	mov	r3, r1
 8011bde:	ec51 0b1a 	vmov	r0, r1, d10
 8011be2:	f7ef f811 	bl	8000c08 <__aeabi_dcmpgt>
 8011be6:	2800      	cmp	r0, #0
 8011be8:	f47f ae04 	bne.w	80117f4 <__ieee754_pow+0x3b4>
 8011bec:	4aa2      	ldr	r2, [pc, #648]	; (8011e78 <__ieee754_pow+0xa38>)
 8011bee:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011bf2:	4293      	cmp	r3, r2
 8011bf4:	f340 8107 	ble.w	8011e06 <__ieee754_pow+0x9c6>
 8011bf8:	151b      	asrs	r3, r3, #20
 8011bfa:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8011bfe:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8011c02:	fa4a fa03 	asr.w	sl, sl, r3
 8011c06:	44da      	add	sl, fp
 8011c08:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8011c0c:	489b      	ldr	r0, [pc, #620]	; (8011e7c <__ieee754_pow+0xa3c>)
 8011c0e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8011c12:	4108      	asrs	r0, r1
 8011c14:	ea00 030a 	and.w	r3, r0, sl
 8011c18:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8011c1c:	f1c1 0114 	rsb	r1, r1, #20
 8011c20:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8011c24:	fa4a fa01 	asr.w	sl, sl, r1
 8011c28:	f1bb 0f00 	cmp.w	fp, #0
 8011c2c:	f04f 0200 	mov.w	r2, #0
 8011c30:	4620      	mov	r0, r4
 8011c32:	4629      	mov	r1, r5
 8011c34:	bfb8      	it	lt
 8011c36:	f1ca 0a00 	rsblt	sl, sl, #0
 8011c3a:	f7ee fb9d 	bl	8000378 <__aeabi_dsub>
 8011c3e:	ec41 0b19 	vmov	d9, r0, r1
 8011c42:	4642      	mov	r2, r8
 8011c44:	464b      	mov	r3, r9
 8011c46:	ec51 0b19 	vmov	r0, r1, d9
 8011c4a:	f7ee fb97 	bl	800037c <__adddf3>
 8011c4e:	a37a      	add	r3, pc, #488	; (adr r3, 8011e38 <__ieee754_pow+0x9f8>)
 8011c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c54:	2000      	movs	r0, #0
 8011c56:	4604      	mov	r4, r0
 8011c58:	460d      	mov	r5, r1
 8011c5a:	f7ee fd45 	bl	80006e8 <__aeabi_dmul>
 8011c5e:	ec53 2b19 	vmov	r2, r3, d9
 8011c62:	4606      	mov	r6, r0
 8011c64:	460f      	mov	r7, r1
 8011c66:	4620      	mov	r0, r4
 8011c68:	4629      	mov	r1, r5
 8011c6a:	f7ee fb85 	bl	8000378 <__aeabi_dsub>
 8011c6e:	4602      	mov	r2, r0
 8011c70:	460b      	mov	r3, r1
 8011c72:	4640      	mov	r0, r8
 8011c74:	4649      	mov	r1, r9
 8011c76:	f7ee fb7f 	bl	8000378 <__aeabi_dsub>
 8011c7a:	a371      	add	r3, pc, #452	; (adr r3, 8011e40 <__ieee754_pow+0xa00>)
 8011c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c80:	f7ee fd32 	bl	80006e8 <__aeabi_dmul>
 8011c84:	a370      	add	r3, pc, #448	; (adr r3, 8011e48 <__ieee754_pow+0xa08>)
 8011c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c8a:	4680      	mov	r8, r0
 8011c8c:	4689      	mov	r9, r1
 8011c8e:	4620      	mov	r0, r4
 8011c90:	4629      	mov	r1, r5
 8011c92:	f7ee fd29 	bl	80006e8 <__aeabi_dmul>
 8011c96:	4602      	mov	r2, r0
 8011c98:	460b      	mov	r3, r1
 8011c9a:	4640      	mov	r0, r8
 8011c9c:	4649      	mov	r1, r9
 8011c9e:	f7ee fb6d 	bl	800037c <__adddf3>
 8011ca2:	4604      	mov	r4, r0
 8011ca4:	460d      	mov	r5, r1
 8011ca6:	4602      	mov	r2, r0
 8011ca8:	460b      	mov	r3, r1
 8011caa:	4630      	mov	r0, r6
 8011cac:	4639      	mov	r1, r7
 8011cae:	f7ee fb65 	bl	800037c <__adddf3>
 8011cb2:	4632      	mov	r2, r6
 8011cb4:	463b      	mov	r3, r7
 8011cb6:	4680      	mov	r8, r0
 8011cb8:	4689      	mov	r9, r1
 8011cba:	f7ee fb5d 	bl	8000378 <__aeabi_dsub>
 8011cbe:	4602      	mov	r2, r0
 8011cc0:	460b      	mov	r3, r1
 8011cc2:	4620      	mov	r0, r4
 8011cc4:	4629      	mov	r1, r5
 8011cc6:	f7ee fb57 	bl	8000378 <__aeabi_dsub>
 8011cca:	4642      	mov	r2, r8
 8011ccc:	4606      	mov	r6, r0
 8011cce:	460f      	mov	r7, r1
 8011cd0:	464b      	mov	r3, r9
 8011cd2:	4640      	mov	r0, r8
 8011cd4:	4649      	mov	r1, r9
 8011cd6:	f7ee fd07 	bl	80006e8 <__aeabi_dmul>
 8011cda:	a35d      	add	r3, pc, #372	; (adr r3, 8011e50 <__ieee754_pow+0xa10>)
 8011cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ce0:	4604      	mov	r4, r0
 8011ce2:	460d      	mov	r5, r1
 8011ce4:	f7ee fd00 	bl	80006e8 <__aeabi_dmul>
 8011ce8:	a35b      	add	r3, pc, #364	; (adr r3, 8011e58 <__ieee754_pow+0xa18>)
 8011cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cee:	f7ee fb43 	bl	8000378 <__aeabi_dsub>
 8011cf2:	4622      	mov	r2, r4
 8011cf4:	462b      	mov	r3, r5
 8011cf6:	f7ee fcf7 	bl	80006e8 <__aeabi_dmul>
 8011cfa:	a359      	add	r3, pc, #356	; (adr r3, 8011e60 <__ieee754_pow+0xa20>)
 8011cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d00:	f7ee fb3c 	bl	800037c <__adddf3>
 8011d04:	4622      	mov	r2, r4
 8011d06:	462b      	mov	r3, r5
 8011d08:	f7ee fcee 	bl	80006e8 <__aeabi_dmul>
 8011d0c:	a356      	add	r3, pc, #344	; (adr r3, 8011e68 <__ieee754_pow+0xa28>)
 8011d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d12:	f7ee fb31 	bl	8000378 <__aeabi_dsub>
 8011d16:	4622      	mov	r2, r4
 8011d18:	462b      	mov	r3, r5
 8011d1a:	f7ee fce5 	bl	80006e8 <__aeabi_dmul>
 8011d1e:	a354      	add	r3, pc, #336	; (adr r3, 8011e70 <__ieee754_pow+0xa30>)
 8011d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d24:	f7ee fb2a 	bl	800037c <__adddf3>
 8011d28:	4622      	mov	r2, r4
 8011d2a:	462b      	mov	r3, r5
 8011d2c:	f7ee fcdc 	bl	80006e8 <__aeabi_dmul>
 8011d30:	4602      	mov	r2, r0
 8011d32:	460b      	mov	r3, r1
 8011d34:	4640      	mov	r0, r8
 8011d36:	4649      	mov	r1, r9
 8011d38:	f7ee fb1e 	bl	8000378 <__aeabi_dsub>
 8011d3c:	4604      	mov	r4, r0
 8011d3e:	460d      	mov	r5, r1
 8011d40:	4602      	mov	r2, r0
 8011d42:	460b      	mov	r3, r1
 8011d44:	4640      	mov	r0, r8
 8011d46:	4649      	mov	r1, r9
 8011d48:	f7ee fcce 	bl	80006e8 <__aeabi_dmul>
 8011d4c:	2200      	movs	r2, #0
 8011d4e:	ec41 0b19 	vmov	d9, r0, r1
 8011d52:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011d56:	4620      	mov	r0, r4
 8011d58:	4629      	mov	r1, r5
 8011d5a:	f7ee fb0d 	bl	8000378 <__aeabi_dsub>
 8011d5e:	4602      	mov	r2, r0
 8011d60:	460b      	mov	r3, r1
 8011d62:	ec51 0b19 	vmov	r0, r1, d9
 8011d66:	f7ee fde9 	bl	800093c <__aeabi_ddiv>
 8011d6a:	4632      	mov	r2, r6
 8011d6c:	4604      	mov	r4, r0
 8011d6e:	460d      	mov	r5, r1
 8011d70:	463b      	mov	r3, r7
 8011d72:	4640      	mov	r0, r8
 8011d74:	4649      	mov	r1, r9
 8011d76:	f7ee fcb7 	bl	80006e8 <__aeabi_dmul>
 8011d7a:	4632      	mov	r2, r6
 8011d7c:	463b      	mov	r3, r7
 8011d7e:	f7ee fafd 	bl	800037c <__adddf3>
 8011d82:	4602      	mov	r2, r0
 8011d84:	460b      	mov	r3, r1
 8011d86:	4620      	mov	r0, r4
 8011d88:	4629      	mov	r1, r5
 8011d8a:	f7ee faf5 	bl	8000378 <__aeabi_dsub>
 8011d8e:	4642      	mov	r2, r8
 8011d90:	464b      	mov	r3, r9
 8011d92:	f7ee faf1 	bl	8000378 <__aeabi_dsub>
 8011d96:	460b      	mov	r3, r1
 8011d98:	4602      	mov	r2, r0
 8011d9a:	4939      	ldr	r1, [pc, #228]	; (8011e80 <__ieee754_pow+0xa40>)
 8011d9c:	2000      	movs	r0, #0
 8011d9e:	f7ee faeb 	bl	8000378 <__aeabi_dsub>
 8011da2:	ec41 0b10 	vmov	d0, r0, r1
 8011da6:	ee10 3a90 	vmov	r3, s1
 8011daa:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8011dae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011db2:	da2b      	bge.n	8011e0c <__ieee754_pow+0x9cc>
 8011db4:	4650      	mov	r0, sl
 8011db6:	f000 facf 	bl	8012358 <scalbn>
 8011dba:	ec51 0b10 	vmov	r0, r1, d0
 8011dbe:	ec53 2b18 	vmov	r2, r3, d8
 8011dc2:	f7ff bbee 	b.w	80115a2 <__ieee754_pow+0x162>
 8011dc6:	4b2f      	ldr	r3, [pc, #188]	; (8011e84 <__ieee754_pow+0xa44>)
 8011dc8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8011dcc:	429e      	cmp	r6, r3
 8011dce:	f77f af0d 	ble.w	8011bec <__ieee754_pow+0x7ac>
 8011dd2:	4b2d      	ldr	r3, [pc, #180]	; (8011e88 <__ieee754_pow+0xa48>)
 8011dd4:	440b      	add	r3, r1
 8011dd6:	4303      	orrs	r3, r0
 8011dd8:	d009      	beq.n	8011dee <__ieee754_pow+0x9ae>
 8011dda:	ec51 0b18 	vmov	r0, r1, d8
 8011dde:	2200      	movs	r2, #0
 8011de0:	2300      	movs	r3, #0
 8011de2:	f7ee fef3 	bl	8000bcc <__aeabi_dcmplt>
 8011de6:	3800      	subs	r0, #0
 8011de8:	bf18      	it	ne
 8011dea:	2001      	movne	r0, #1
 8011dec:	e448      	b.n	8011680 <__ieee754_pow+0x240>
 8011dee:	4622      	mov	r2, r4
 8011df0:	462b      	mov	r3, r5
 8011df2:	f7ee fac1 	bl	8000378 <__aeabi_dsub>
 8011df6:	4642      	mov	r2, r8
 8011df8:	464b      	mov	r3, r9
 8011dfa:	f7ee fefb 	bl	8000bf4 <__aeabi_dcmpge>
 8011dfe:	2800      	cmp	r0, #0
 8011e00:	f43f aef4 	beq.w	8011bec <__ieee754_pow+0x7ac>
 8011e04:	e7e9      	b.n	8011dda <__ieee754_pow+0x99a>
 8011e06:	f04f 0a00 	mov.w	sl, #0
 8011e0a:	e71a      	b.n	8011c42 <__ieee754_pow+0x802>
 8011e0c:	ec51 0b10 	vmov	r0, r1, d0
 8011e10:	4619      	mov	r1, r3
 8011e12:	e7d4      	b.n	8011dbe <__ieee754_pow+0x97e>
 8011e14:	491a      	ldr	r1, [pc, #104]	; (8011e80 <__ieee754_pow+0xa40>)
 8011e16:	2000      	movs	r0, #0
 8011e18:	f7ff bb31 	b.w	801147e <__ieee754_pow+0x3e>
 8011e1c:	2000      	movs	r0, #0
 8011e1e:	2100      	movs	r1, #0
 8011e20:	f7ff bb2d 	b.w	801147e <__ieee754_pow+0x3e>
 8011e24:	4630      	mov	r0, r6
 8011e26:	4639      	mov	r1, r7
 8011e28:	f7ff bb29 	b.w	801147e <__ieee754_pow+0x3e>
 8011e2c:	9204      	str	r2, [sp, #16]
 8011e2e:	f7ff bb7b 	b.w	8011528 <__ieee754_pow+0xe8>
 8011e32:	2300      	movs	r3, #0
 8011e34:	f7ff bb65 	b.w	8011502 <__ieee754_pow+0xc2>
 8011e38:	00000000 	.word	0x00000000
 8011e3c:	3fe62e43 	.word	0x3fe62e43
 8011e40:	fefa39ef 	.word	0xfefa39ef
 8011e44:	3fe62e42 	.word	0x3fe62e42
 8011e48:	0ca86c39 	.word	0x0ca86c39
 8011e4c:	be205c61 	.word	0xbe205c61
 8011e50:	72bea4d0 	.word	0x72bea4d0
 8011e54:	3e663769 	.word	0x3e663769
 8011e58:	c5d26bf1 	.word	0xc5d26bf1
 8011e5c:	3ebbbd41 	.word	0x3ebbbd41
 8011e60:	af25de2c 	.word	0xaf25de2c
 8011e64:	3f11566a 	.word	0x3f11566a
 8011e68:	16bebd93 	.word	0x16bebd93
 8011e6c:	3f66c16c 	.word	0x3f66c16c
 8011e70:	5555553e 	.word	0x5555553e
 8011e74:	3fc55555 	.word	0x3fc55555
 8011e78:	3fe00000 	.word	0x3fe00000
 8011e7c:	fff00000 	.word	0xfff00000
 8011e80:	3ff00000 	.word	0x3ff00000
 8011e84:	4090cbff 	.word	0x4090cbff
 8011e88:	3f6f3400 	.word	0x3f6f3400
 8011e8c:	652b82fe 	.word	0x652b82fe
 8011e90:	3c971547 	.word	0x3c971547
 8011e94:	00000000 	.word	0x00000000

08011e98 <__ieee754_rem_pio2>:
 8011e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e9c:	ed2d 8b02 	vpush	{d8}
 8011ea0:	ec55 4b10 	vmov	r4, r5, d0
 8011ea4:	4bca      	ldr	r3, [pc, #808]	; (80121d0 <__ieee754_rem_pio2+0x338>)
 8011ea6:	b08b      	sub	sp, #44	; 0x2c
 8011ea8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8011eac:	4598      	cmp	r8, r3
 8011eae:	4682      	mov	sl, r0
 8011eb0:	9502      	str	r5, [sp, #8]
 8011eb2:	dc08      	bgt.n	8011ec6 <__ieee754_rem_pio2+0x2e>
 8011eb4:	2200      	movs	r2, #0
 8011eb6:	2300      	movs	r3, #0
 8011eb8:	ed80 0b00 	vstr	d0, [r0]
 8011ebc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8011ec0:	f04f 0b00 	mov.w	fp, #0
 8011ec4:	e028      	b.n	8011f18 <__ieee754_rem_pio2+0x80>
 8011ec6:	4bc3      	ldr	r3, [pc, #780]	; (80121d4 <__ieee754_rem_pio2+0x33c>)
 8011ec8:	4598      	cmp	r8, r3
 8011eca:	dc78      	bgt.n	8011fbe <__ieee754_rem_pio2+0x126>
 8011ecc:	9b02      	ldr	r3, [sp, #8]
 8011ece:	4ec2      	ldr	r6, [pc, #776]	; (80121d8 <__ieee754_rem_pio2+0x340>)
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	ee10 0a10 	vmov	r0, s0
 8011ed6:	a3b0      	add	r3, pc, #704	; (adr r3, 8012198 <__ieee754_rem_pio2+0x300>)
 8011ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011edc:	4629      	mov	r1, r5
 8011ede:	dd39      	ble.n	8011f54 <__ieee754_rem_pio2+0xbc>
 8011ee0:	f7ee fa4a 	bl	8000378 <__aeabi_dsub>
 8011ee4:	45b0      	cmp	r8, r6
 8011ee6:	4604      	mov	r4, r0
 8011ee8:	460d      	mov	r5, r1
 8011eea:	d01b      	beq.n	8011f24 <__ieee754_rem_pio2+0x8c>
 8011eec:	a3ac      	add	r3, pc, #688	; (adr r3, 80121a0 <__ieee754_rem_pio2+0x308>)
 8011eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ef2:	f7ee fa41 	bl	8000378 <__aeabi_dsub>
 8011ef6:	4602      	mov	r2, r0
 8011ef8:	460b      	mov	r3, r1
 8011efa:	e9ca 2300 	strd	r2, r3, [sl]
 8011efe:	4620      	mov	r0, r4
 8011f00:	4629      	mov	r1, r5
 8011f02:	f7ee fa39 	bl	8000378 <__aeabi_dsub>
 8011f06:	a3a6      	add	r3, pc, #664	; (adr r3, 80121a0 <__ieee754_rem_pio2+0x308>)
 8011f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f0c:	f7ee fa34 	bl	8000378 <__aeabi_dsub>
 8011f10:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011f14:	f04f 0b01 	mov.w	fp, #1
 8011f18:	4658      	mov	r0, fp
 8011f1a:	b00b      	add	sp, #44	; 0x2c
 8011f1c:	ecbd 8b02 	vpop	{d8}
 8011f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f24:	a3a0      	add	r3, pc, #640	; (adr r3, 80121a8 <__ieee754_rem_pio2+0x310>)
 8011f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f2a:	f7ee fa25 	bl	8000378 <__aeabi_dsub>
 8011f2e:	a3a0      	add	r3, pc, #640	; (adr r3, 80121b0 <__ieee754_rem_pio2+0x318>)
 8011f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f34:	4604      	mov	r4, r0
 8011f36:	460d      	mov	r5, r1
 8011f38:	f7ee fa1e 	bl	8000378 <__aeabi_dsub>
 8011f3c:	4602      	mov	r2, r0
 8011f3e:	460b      	mov	r3, r1
 8011f40:	e9ca 2300 	strd	r2, r3, [sl]
 8011f44:	4620      	mov	r0, r4
 8011f46:	4629      	mov	r1, r5
 8011f48:	f7ee fa16 	bl	8000378 <__aeabi_dsub>
 8011f4c:	a398      	add	r3, pc, #608	; (adr r3, 80121b0 <__ieee754_rem_pio2+0x318>)
 8011f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f52:	e7db      	b.n	8011f0c <__ieee754_rem_pio2+0x74>
 8011f54:	f7ee fa12 	bl	800037c <__adddf3>
 8011f58:	45b0      	cmp	r8, r6
 8011f5a:	4604      	mov	r4, r0
 8011f5c:	460d      	mov	r5, r1
 8011f5e:	d016      	beq.n	8011f8e <__ieee754_rem_pio2+0xf6>
 8011f60:	a38f      	add	r3, pc, #572	; (adr r3, 80121a0 <__ieee754_rem_pio2+0x308>)
 8011f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f66:	f7ee fa09 	bl	800037c <__adddf3>
 8011f6a:	4602      	mov	r2, r0
 8011f6c:	460b      	mov	r3, r1
 8011f6e:	e9ca 2300 	strd	r2, r3, [sl]
 8011f72:	4620      	mov	r0, r4
 8011f74:	4629      	mov	r1, r5
 8011f76:	f7ee f9ff 	bl	8000378 <__aeabi_dsub>
 8011f7a:	a389      	add	r3, pc, #548	; (adr r3, 80121a0 <__ieee754_rem_pio2+0x308>)
 8011f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f80:	f7ee f9fc 	bl	800037c <__adddf3>
 8011f84:	f04f 3bff 	mov.w	fp, #4294967295
 8011f88:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011f8c:	e7c4      	b.n	8011f18 <__ieee754_rem_pio2+0x80>
 8011f8e:	a386      	add	r3, pc, #536	; (adr r3, 80121a8 <__ieee754_rem_pio2+0x310>)
 8011f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f94:	f7ee f9f2 	bl	800037c <__adddf3>
 8011f98:	a385      	add	r3, pc, #532	; (adr r3, 80121b0 <__ieee754_rem_pio2+0x318>)
 8011f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f9e:	4604      	mov	r4, r0
 8011fa0:	460d      	mov	r5, r1
 8011fa2:	f7ee f9eb 	bl	800037c <__adddf3>
 8011fa6:	4602      	mov	r2, r0
 8011fa8:	460b      	mov	r3, r1
 8011faa:	e9ca 2300 	strd	r2, r3, [sl]
 8011fae:	4620      	mov	r0, r4
 8011fb0:	4629      	mov	r1, r5
 8011fb2:	f7ee f9e1 	bl	8000378 <__aeabi_dsub>
 8011fb6:	a37e      	add	r3, pc, #504	; (adr r3, 80121b0 <__ieee754_rem_pio2+0x318>)
 8011fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fbc:	e7e0      	b.n	8011f80 <__ieee754_rem_pio2+0xe8>
 8011fbe:	4b87      	ldr	r3, [pc, #540]	; (80121dc <__ieee754_rem_pio2+0x344>)
 8011fc0:	4598      	cmp	r8, r3
 8011fc2:	f300 80d8 	bgt.w	8012176 <__ieee754_rem_pio2+0x2de>
 8011fc6:	f7fe fc6f 	bl	80108a8 <fabs>
 8011fca:	ec55 4b10 	vmov	r4, r5, d0
 8011fce:	ee10 0a10 	vmov	r0, s0
 8011fd2:	a379      	add	r3, pc, #484	; (adr r3, 80121b8 <__ieee754_rem_pio2+0x320>)
 8011fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fd8:	4629      	mov	r1, r5
 8011fda:	f7ee fb85 	bl	80006e8 <__aeabi_dmul>
 8011fde:	4b80      	ldr	r3, [pc, #512]	; (80121e0 <__ieee754_rem_pio2+0x348>)
 8011fe0:	2200      	movs	r2, #0
 8011fe2:	f7ee f9cb 	bl	800037c <__adddf3>
 8011fe6:	f7ee fe2f 	bl	8000c48 <__aeabi_d2iz>
 8011fea:	4683      	mov	fp, r0
 8011fec:	f7ee fb12 	bl	8000614 <__aeabi_i2d>
 8011ff0:	4602      	mov	r2, r0
 8011ff2:	460b      	mov	r3, r1
 8011ff4:	ec43 2b18 	vmov	d8, r2, r3
 8011ff8:	a367      	add	r3, pc, #412	; (adr r3, 8012198 <__ieee754_rem_pio2+0x300>)
 8011ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ffe:	f7ee fb73 	bl	80006e8 <__aeabi_dmul>
 8012002:	4602      	mov	r2, r0
 8012004:	460b      	mov	r3, r1
 8012006:	4620      	mov	r0, r4
 8012008:	4629      	mov	r1, r5
 801200a:	f7ee f9b5 	bl	8000378 <__aeabi_dsub>
 801200e:	a364      	add	r3, pc, #400	; (adr r3, 80121a0 <__ieee754_rem_pio2+0x308>)
 8012010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012014:	4606      	mov	r6, r0
 8012016:	460f      	mov	r7, r1
 8012018:	ec51 0b18 	vmov	r0, r1, d8
 801201c:	f7ee fb64 	bl	80006e8 <__aeabi_dmul>
 8012020:	f1bb 0f1f 	cmp.w	fp, #31
 8012024:	4604      	mov	r4, r0
 8012026:	460d      	mov	r5, r1
 8012028:	dc0d      	bgt.n	8012046 <__ieee754_rem_pio2+0x1ae>
 801202a:	4b6e      	ldr	r3, [pc, #440]	; (80121e4 <__ieee754_rem_pio2+0x34c>)
 801202c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8012030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012034:	4543      	cmp	r3, r8
 8012036:	d006      	beq.n	8012046 <__ieee754_rem_pio2+0x1ae>
 8012038:	4622      	mov	r2, r4
 801203a:	462b      	mov	r3, r5
 801203c:	4630      	mov	r0, r6
 801203e:	4639      	mov	r1, r7
 8012040:	f7ee f99a 	bl	8000378 <__aeabi_dsub>
 8012044:	e00e      	b.n	8012064 <__ieee754_rem_pio2+0x1cc>
 8012046:	462b      	mov	r3, r5
 8012048:	4622      	mov	r2, r4
 801204a:	4630      	mov	r0, r6
 801204c:	4639      	mov	r1, r7
 801204e:	f7ee f993 	bl	8000378 <__aeabi_dsub>
 8012052:	ea4f 5328 	mov.w	r3, r8, asr #20
 8012056:	9303      	str	r3, [sp, #12]
 8012058:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801205c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8012060:	2b10      	cmp	r3, #16
 8012062:	dc02      	bgt.n	801206a <__ieee754_rem_pio2+0x1d2>
 8012064:	e9ca 0100 	strd	r0, r1, [sl]
 8012068:	e039      	b.n	80120de <__ieee754_rem_pio2+0x246>
 801206a:	a34f      	add	r3, pc, #316	; (adr r3, 80121a8 <__ieee754_rem_pio2+0x310>)
 801206c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012070:	ec51 0b18 	vmov	r0, r1, d8
 8012074:	f7ee fb38 	bl	80006e8 <__aeabi_dmul>
 8012078:	4604      	mov	r4, r0
 801207a:	460d      	mov	r5, r1
 801207c:	4602      	mov	r2, r0
 801207e:	460b      	mov	r3, r1
 8012080:	4630      	mov	r0, r6
 8012082:	4639      	mov	r1, r7
 8012084:	f7ee f978 	bl	8000378 <__aeabi_dsub>
 8012088:	4602      	mov	r2, r0
 801208a:	460b      	mov	r3, r1
 801208c:	4680      	mov	r8, r0
 801208e:	4689      	mov	r9, r1
 8012090:	4630      	mov	r0, r6
 8012092:	4639      	mov	r1, r7
 8012094:	f7ee f970 	bl	8000378 <__aeabi_dsub>
 8012098:	4622      	mov	r2, r4
 801209a:	462b      	mov	r3, r5
 801209c:	f7ee f96c 	bl	8000378 <__aeabi_dsub>
 80120a0:	a343      	add	r3, pc, #268	; (adr r3, 80121b0 <__ieee754_rem_pio2+0x318>)
 80120a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120a6:	4604      	mov	r4, r0
 80120a8:	460d      	mov	r5, r1
 80120aa:	ec51 0b18 	vmov	r0, r1, d8
 80120ae:	f7ee fb1b 	bl	80006e8 <__aeabi_dmul>
 80120b2:	4622      	mov	r2, r4
 80120b4:	462b      	mov	r3, r5
 80120b6:	f7ee f95f 	bl	8000378 <__aeabi_dsub>
 80120ba:	4602      	mov	r2, r0
 80120bc:	460b      	mov	r3, r1
 80120be:	4604      	mov	r4, r0
 80120c0:	460d      	mov	r5, r1
 80120c2:	4640      	mov	r0, r8
 80120c4:	4649      	mov	r1, r9
 80120c6:	f7ee f957 	bl	8000378 <__aeabi_dsub>
 80120ca:	9a03      	ldr	r2, [sp, #12]
 80120cc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80120d0:	1ad3      	subs	r3, r2, r3
 80120d2:	2b31      	cmp	r3, #49	; 0x31
 80120d4:	dc24      	bgt.n	8012120 <__ieee754_rem_pio2+0x288>
 80120d6:	e9ca 0100 	strd	r0, r1, [sl]
 80120da:	4646      	mov	r6, r8
 80120dc:	464f      	mov	r7, r9
 80120de:	e9da 8900 	ldrd	r8, r9, [sl]
 80120e2:	4630      	mov	r0, r6
 80120e4:	4642      	mov	r2, r8
 80120e6:	464b      	mov	r3, r9
 80120e8:	4639      	mov	r1, r7
 80120ea:	f7ee f945 	bl	8000378 <__aeabi_dsub>
 80120ee:	462b      	mov	r3, r5
 80120f0:	4622      	mov	r2, r4
 80120f2:	f7ee f941 	bl	8000378 <__aeabi_dsub>
 80120f6:	9b02      	ldr	r3, [sp, #8]
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80120fe:	f6bf af0b 	bge.w	8011f18 <__ieee754_rem_pio2+0x80>
 8012102:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8012106:	f8ca 3004 	str.w	r3, [sl, #4]
 801210a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801210e:	f8ca 8000 	str.w	r8, [sl]
 8012112:	f8ca 0008 	str.w	r0, [sl, #8]
 8012116:	f8ca 300c 	str.w	r3, [sl, #12]
 801211a:	f1cb 0b00 	rsb	fp, fp, #0
 801211e:	e6fb      	b.n	8011f18 <__ieee754_rem_pio2+0x80>
 8012120:	a327      	add	r3, pc, #156	; (adr r3, 80121c0 <__ieee754_rem_pio2+0x328>)
 8012122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012126:	ec51 0b18 	vmov	r0, r1, d8
 801212a:	f7ee fadd 	bl	80006e8 <__aeabi_dmul>
 801212e:	4604      	mov	r4, r0
 8012130:	460d      	mov	r5, r1
 8012132:	4602      	mov	r2, r0
 8012134:	460b      	mov	r3, r1
 8012136:	4640      	mov	r0, r8
 8012138:	4649      	mov	r1, r9
 801213a:	f7ee f91d 	bl	8000378 <__aeabi_dsub>
 801213e:	4602      	mov	r2, r0
 8012140:	460b      	mov	r3, r1
 8012142:	4606      	mov	r6, r0
 8012144:	460f      	mov	r7, r1
 8012146:	4640      	mov	r0, r8
 8012148:	4649      	mov	r1, r9
 801214a:	f7ee f915 	bl	8000378 <__aeabi_dsub>
 801214e:	4622      	mov	r2, r4
 8012150:	462b      	mov	r3, r5
 8012152:	f7ee f911 	bl	8000378 <__aeabi_dsub>
 8012156:	a31c      	add	r3, pc, #112	; (adr r3, 80121c8 <__ieee754_rem_pio2+0x330>)
 8012158:	e9d3 2300 	ldrd	r2, r3, [r3]
 801215c:	4604      	mov	r4, r0
 801215e:	460d      	mov	r5, r1
 8012160:	ec51 0b18 	vmov	r0, r1, d8
 8012164:	f7ee fac0 	bl	80006e8 <__aeabi_dmul>
 8012168:	4622      	mov	r2, r4
 801216a:	462b      	mov	r3, r5
 801216c:	f7ee f904 	bl	8000378 <__aeabi_dsub>
 8012170:	4604      	mov	r4, r0
 8012172:	460d      	mov	r5, r1
 8012174:	e760      	b.n	8012038 <__ieee754_rem_pio2+0x1a0>
 8012176:	4b1c      	ldr	r3, [pc, #112]	; (80121e8 <__ieee754_rem_pio2+0x350>)
 8012178:	4598      	cmp	r8, r3
 801217a:	dd37      	ble.n	80121ec <__ieee754_rem_pio2+0x354>
 801217c:	ee10 2a10 	vmov	r2, s0
 8012180:	462b      	mov	r3, r5
 8012182:	4620      	mov	r0, r4
 8012184:	4629      	mov	r1, r5
 8012186:	f7ee f8f7 	bl	8000378 <__aeabi_dsub>
 801218a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801218e:	e9ca 0100 	strd	r0, r1, [sl]
 8012192:	e695      	b.n	8011ec0 <__ieee754_rem_pio2+0x28>
 8012194:	f3af 8000 	nop.w
 8012198:	54400000 	.word	0x54400000
 801219c:	3ff921fb 	.word	0x3ff921fb
 80121a0:	1a626331 	.word	0x1a626331
 80121a4:	3dd0b461 	.word	0x3dd0b461
 80121a8:	1a600000 	.word	0x1a600000
 80121ac:	3dd0b461 	.word	0x3dd0b461
 80121b0:	2e037073 	.word	0x2e037073
 80121b4:	3ba3198a 	.word	0x3ba3198a
 80121b8:	6dc9c883 	.word	0x6dc9c883
 80121bc:	3fe45f30 	.word	0x3fe45f30
 80121c0:	2e000000 	.word	0x2e000000
 80121c4:	3ba3198a 	.word	0x3ba3198a
 80121c8:	252049c1 	.word	0x252049c1
 80121cc:	397b839a 	.word	0x397b839a
 80121d0:	3fe921fb 	.word	0x3fe921fb
 80121d4:	4002d97b 	.word	0x4002d97b
 80121d8:	3ff921fb 	.word	0x3ff921fb
 80121dc:	413921fb 	.word	0x413921fb
 80121e0:	3fe00000 	.word	0x3fe00000
 80121e4:	08018948 	.word	0x08018948
 80121e8:	7fefffff 	.word	0x7fefffff
 80121ec:	ea4f 5628 	mov.w	r6, r8, asr #20
 80121f0:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 80121f4:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 80121f8:	4620      	mov	r0, r4
 80121fa:	460d      	mov	r5, r1
 80121fc:	f7ee fd24 	bl	8000c48 <__aeabi_d2iz>
 8012200:	f7ee fa08 	bl	8000614 <__aeabi_i2d>
 8012204:	4602      	mov	r2, r0
 8012206:	460b      	mov	r3, r1
 8012208:	4620      	mov	r0, r4
 801220a:	4629      	mov	r1, r5
 801220c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012210:	f7ee f8b2 	bl	8000378 <__aeabi_dsub>
 8012214:	4b21      	ldr	r3, [pc, #132]	; (801229c <__ieee754_rem_pio2+0x404>)
 8012216:	2200      	movs	r2, #0
 8012218:	f7ee fa66 	bl	80006e8 <__aeabi_dmul>
 801221c:	460d      	mov	r5, r1
 801221e:	4604      	mov	r4, r0
 8012220:	f7ee fd12 	bl	8000c48 <__aeabi_d2iz>
 8012224:	f7ee f9f6 	bl	8000614 <__aeabi_i2d>
 8012228:	4602      	mov	r2, r0
 801222a:	460b      	mov	r3, r1
 801222c:	4620      	mov	r0, r4
 801222e:	4629      	mov	r1, r5
 8012230:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012234:	f7ee f8a0 	bl	8000378 <__aeabi_dsub>
 8012238:	4b18      	ldr	r3, [pc, #96]	; (801229c <__ieee754_rem_pio2+0x404>)
 801223a:	2200      	movs	r2, #0
 801223c:	f7ee fa54 	bl	80006e8 <__aeabi_dmul>
 8012240:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012244:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8012248:	2703      	movs	r7, #3
 801224a:	2400      	movs	r4, #0
 801224c:	2500      	movs	r5, #0
 801224e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8012252:	4622      	mov	r2, r4
 8012254:	462b      	mov	r3, r5
 8012256:	46b9      	mov	r9, r7
 8012258:	3f01      	subs	r7, #1
 801225a:	f7ee fcad 	bl	8000bb8 <__aeabi_dcmpeq>
 801225e:	2800      	cmp	r0, #0
 8012260:	d1f5      	bne.n	801224e <__ieee754_rem_pio2+0x3b6>
 8012262:	4b0f      	ldr	r3, [pc, #60]	; (80122a0 <__ieee754_rem_pio2+0x408>)
 8012264:	9301      	str	r3, [sp, #4]
 8012266:	2302      	movs	r3, #2
 8012268:	9300      	str	r3, [sp, #0]
 801226a:	4632      	mov	r2, r6
 801226c:	464b      	mov	r3, r9
 801226e:	4651      	mov	r1, sl
 8012270:	a804      	add	r0, sp, #16
 8012272:	f000 f921 	bl	80124b8 <__kernel_rem_pio2>
 8012276:	9b02      	ldr	r3, [sp, #8]
 8012278:	2b00      	cmp	r3, #0
 801227a:	4683      	mov	fp, r0
 801227c:	f6bf ae4c 	bge.w	8011f18 <__ieee754_rem_pio2+0x80>
 8012280:	e9da 2100 	ldrd	r2, r1, [sl]
 8012284:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012288:	e9ca 2300 	strd	r2, r3, [sl]
 801228c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8012290:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012294:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8012298:	e73f      	b.n	801211a <__ieee754_rem_pio2+0x282>
 801229a:	bf00      	nop
 801229c:	41700000 	.word	0x41700000
 80122a0:	080189c8 	.word	0x080189c8

080122a4 <__ieee754_log10f>:
 80122a4:	b508      	push	{r3, lr}
 80122a6:	ee10 2a10 	vmov	r2, s0
 80122aa:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 80122ae:	ed2d 8b02 	vpush	{d8}
 80122b2:	d108      	bne.n	80122c6 <__ieee754_log10f+0x22>
 80122b4:	ed9f 7a21 	vldr	s14, [pc, #132]	; 801233c <__ieee754_log10f+0x98>
 80122b8:	eddf 7a21 	vldr	s15, [pc, #132]	; 8012340 <__ieee754_log10f+0x9c>
 80122bc:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80122c0:	ecbd 8b02 	vpop	{d8}
 80122c4:	bd08      	pop	{r3, pc}
 80122c6:	2a00      	cmp	r2, #0
 80122c8:	da02      	bge.n	80122d0 <__ieee754_log10f+0x2c>
 80122ca:	ee30 7a40 	vsub.f32	s14, s0, s0
 80122ce:	e7f3      	b.n	80122b8 <__ieee754_log10f+0x14>
 80122d0:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80122d4:	db02      	blt.n	80122dc <__ieee754_log10f+0x38>
 80122d6:	ee30 0a00 	vadd.f32	s0, s0, s0
 80122da:	e7f1      	b.n	80122c0 <__ieee754_log10f+0x1c>
 80122dc:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 80122e0:	bfbf      	itttt	lt
 80122e2:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 8012344 <__ieee754_log10f+0xa0>
 80122e6:	ee60 7a27 	vmullt.f32	s15, s0, s15
 80122ea:	f06f 0118 	mvnlt.w	r1, #24
 80122ee:	ee17 2a90 	vmovlt	r2, s15
 80122f2:	ea4f 53e2 	mov.w	r3, r2, asr #23
 80122f6:	bfa8      	it	ge
 80122f8:	2100      	movge	r1, #0
 80122fa:	3b7f      	subs	r3, #127	; 0x7f
 80122fc:	440b      	add	r3, r1
 80122fe:	0fd9      	lsrs	r1, r3, #31
 8012300:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8012304:	ee07 3a90 	vmov	s15, r3
 8012308:	f3c2 0216 	ubfx	r2, r2, #0, #23
 801230c:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 8012310:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8012314:	ee00 3a10 	vmov	s0, r3
 8012318:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 801231c:	f000 fc1a 	bl	8012b54 <__ieee754_logf>
 8012320:	eddf 7a09 	vldr	s15, [pc, #36]	; 8012348 <__ieee754_log10f+0xa4>
 8012324:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012328:	eddf 7a08 	vldr	s15, [pc, #32]	; 801234c <__ieee754_log10f+0xa8>
 801232c:	eea8 0a27 	vfma.f32	s0, s16, s15
 8012330:	eddf 7a07 	vldr	s15, [pc, #28]	; 8012350 <__ieee754_log10f+0xac>
 8012334:	eea8 0a27 	vfma.f32	s0, s16, s15
 8012338:	e7c2      	b.n	80122c0 <__ieee754_log10f+0x1c>
 801233a:	bf00      	nop
 801233c:	cc000000 	.word	0xcc000000
 8012340:	00000000 	.word	0x00000000
 8012344:	4c000000 	.word	0x4c000000
 8012348:	3ede5bd9 	.word	0x3ede5bd9
 801234c:	355427db 	.word	0x355427db
 8012350:	3e9a2080 	.word	0x3e9a2080
 8012354:	00000000 	.word	0x00000000

08012358 <scalbn>:
 8012358:	b570      	push	{r4, r5, r6, lr}
 801235a:	ec55 4b10 	vmov	r4, r5, d0
 801235e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8012362:	4606      	mov	r6, r0
 8012364:	462b      	mov	r3, r5
 8012366:	b999      	cbnz	r1, 8012390 <scalbn+0x38>
 8012368:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801236c:	4323      	orrs	r3, r4
 801236e:	d03f      	beq.n	80123f0 <scalbn+0x98>
 8012370:	4b35      	ldr	r3, [pc, #212]	; (8012448 <scalbn+0xf0>)
 8012372:	4629      	mov	r1, r5
 8012374:	ee10 0a10 	vmov	r0, s0
 8012378:	2200      	movs	r2, #0
 801237a:	f7ee f9b5 	bl	80006e8 <__aeabi_dmul>
 801237e:	4b33      	ldr	r3, [pc, #204]	; (801244c <scalbn+0xf4>)
 8012380:	429e      	cmp	r6, r3
 8012382:	4604      	mov	r4, r0
 8012384:	460d      	mov	r5, r1
 8012386:	da10      	bge.n	80123aa <scalbn+0x52>
 8012388:	a327      	add	r3, pc, #156	; (adr r3, 8012428 <scalbn+0xd0>)
 801238a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801238e:	e01f      	b.n	80123d0 <scalbn+0x78>
 8012390:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8012394:	4291      	cmp	r1, r2
 8012396:	d10c      	bne.n	80123b2 <scalbn+0x5a>
 8012398:	ee10 2a10 	vmov	r2, s0
 801239c:	4620      	mov	r0, r4
 801239e:	4629      	mov	r1, r5
 80123a0:	f7ed ffec 	bl	800037c <__adddf3>
 80123a4:	4604      	mov	r4, r0
 80123a6:	460d      	mov	r5, r1
 80123a8:	e022      	b.n	80123f0 <scalbn+0x98>
 80123aa:	460b      	mov	r3, r1
 80123ac:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80123b0:	3936      	subs	r1, #54	; 0x36
 80123b2:	f24c 3250 	movw	r2, #50000	; 0xc350
 80123b6:	4296      	cmp	r6, r2
 80123b8:	dd0d      	ble.n	80123d6 <scalbn+0x7e>
 80123ba:	2d00      	cmp	r5, #0
 80123bc:	a11c      	add	r1, pc, #112	; (adr r1, 8012430 <scalbn+0xd8>)
 80123be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80123c2:	da02      	bge.n	80123ca <scalbn+0x72>
 80123c4:	a11c      	add	r1, pc, #112	; (adr r1, 8012438 <scalbn+0xe0>)
 80123c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80123ca:	a319      	add	r3, pc, #100	; (adr r3, 8012430 <scalbn+0xd8>)
 80123cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123d0:	f7ee f98a 	bl	80006e8 <__aeabi_dmul>
 80123d4:	e7e6      	b.n	80123a4 <scalbn+0x4c>
 80123d6:	1872      	adds	r2, r6, r1
 80123d8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80123dc:	428a      	cmp	r2, r1
 80123de:	dcec      	bgt.n	80123ba <scalbn+0x62>
 80123e0:	2a00      	cmp	r2, #0
 80123e2:	dd08      	ble.n	80123f6 <scalbn+0x9e>
 80123e4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80123e8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80123ec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80123f0:	ec45 4b10 	vmov	d0, r4, r5
 80123f4:	bd70      	pop	{r4, r5, r6, pc}
 80123f6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80123fa:	da08      	bge.n	801240e <scalbn+0xb6>
 80123fc:	2d00      	cmp	r5, #0
 80123fe:	a10a      	add	r1, pc, #40	; (adr r1, 8012428 <scalbn+0xd0>)
 8012400:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012404:	dac0      	bge.n	8012388 <scalbn+0x30>
 8012406:	a10e      	add	r1, pc, #56	; (adr r1, 8012440 <scalbn+0xe8>)
 8012408:	e9d1 0100 	ldrd	r0, r1, [r1]
 801240c:	e7bc      	b.n	8012388 <scalbn+0x30>
 801240e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012412:	3236      	adds	r2, #54	; 0x36
 8012414:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012418:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801241c:	4620      	mov	r0, r4
 801241e:	4b0c      	ldr	r3, [pc, #48]	; (8012450 <scalbn+0xf8>)
 8012420:	2200      	movs	r2, #0
 8012422:	e7d5      	b.n	80123d0 <scalbn+0x78>
 8012424:	f3af 8000 	nop.w
 8012428:	c2f8f359 	.word	0xc2f8f359
 801242c:	01a56e1f 	.word	0x01a56e1f
 8012430:	8800759c 	.word	0x8800759c
 8012434:	7e37e43c 	.word	0x7e37e43c
 8012438:	8800759c 	.word	0x8800759c
 801243c:	fe37e43c 	.word	0xfe37e43c
 8012440:	c2f8f359 	.word	0xc2f8f359
 8012444:	81a56e1f 	.word	0x81a56e1f
 8012448:	43500000 	.word	0x43500000
 801244c:	ffff3cb0 	.word	0xffff3cb0
 8012450:	3c900000 	.word	0x3c900000

08012454 <with_errno>:
 8012454:	b570      	push	{r4, r5, r6, lr}
 8012456:	4604      	mov	r4, r0
 8012458:	460d      	mov	r5, r1
 801245a:	4616      	mov	r6, r2
 801245c:	f7fc fab2 	bl	800e9c4 <__errno>
 8012460:	4629      	mov	r1, r5
 8012462:	6006      	str	r6, [r0, #0]
 8012464:	4620      	mov	r0, r4
 8012466:	bd70      	pop	{r4, r5, r6, pc}

08012468 <xflow>:
 8012468:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801246a:	4614      	mov	r4, r2
 801246c:	461d      	mov	r5, r3
 801246e:	b108      	cbz	r0, 8012474 <xflow+0xc>
 8012470:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012474:	e9cd 2300 	strd	r2, r3, [sp]
 8012478:	e9dd 2300 	ldrd	r2, r3, [sp]
 801247c:	4620      	mov	r0, r4
 801247e:	4629      	mov	r1, r5
 8012480:	f7ee f932 	bl	80006e8 <__aeabi_dmul>
 8012484:	2222      	movs	r2, #34	; 0x22
 8012486:	b003      	add	sp, #12
 8012488:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801248c:	f7ff bfe2 	b.w	8012454 <with_errno>

08012490 <__math_uflow>:
 8012490:	b508      	push	{r3, lr}
 8012492:	2200      	movs	r2, #0
 8012494:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8012498:	f7ff ffe6 	bl	8012468 <xflow>
 801249c:	ec41 0b10 	vmov	d0, r0, r1
 80124a0:	bd08      	pop	{r3, pc}

080124a2 <__math_oflow>:
 80124a2:	b508      	push	{r3, lr}
 80124a4:	2200      	movs	r2, #0
 80124a6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80124aa:	f7ff ffdd 	bl	8012468 <xflow>
 80124ae:	ec41 0b10 	vmov	d0, r0, r1
 80124b2:	bd08      	pop	{r3, pc}
 80124b4:	0000      	movs	r0, r0
	...

080124b8 <__kernel_rem_pio2>:
 80124b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124bc:	ed2d 8b02 	vpush	{d8}
 80124c0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80124c4:	f112 0f14 	cmn.w	r2, #20
 80124c8:	9306      	str	r3, [sp, #24]
 80124ca:	9104      	str	r1, [sp, #16]
 80124cc:	4bc2      	ldr	r3, [pc, #776]	; (80127d8 <__kernel_rem_pio2+0x320>)
 80124ce:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80124d0:	9009      	str	r0, [sp, #36]	; 0x24
 80124d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80124d6:	9300      	str	r3, [sp, #0]
 80124d8:	9b06      	ldr	r3, [sp, #24]
 80124da:	f103 33ff 	add.w	r3, r3, #4294967295
 80124de:	bfa8      	it	ge
 80124e0:	1ed4      	subge	r4, r2, #3
 80124e2:	9305      	str	r3, [sp, #20]
 80124e4:	bfb2      	itee	lt
 80124e6:	2400      	movlt	r4, #0
 80124e8:	2318      	movge	r3, #24
 80124ea:	fb94 f4f3 	sdivge	r4, r4, r3
 80124ee:	f06f 0317 	mvn.w	r3, #23
 80124f2:	fb04 3303 	mla	r3, r4, r3, r3
 80124f6:	eb03 0a02 	add.w	sl, r3, r2
 80124fa:	9b00      	ldr	r3, [sp, #0]
 80124fc:	9a05      	ldr	r2, [sp, #20]
 80124fe:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 80127c8 <__kernel_rem_pio2+0x310>
 8012502:	eb03 0802 	add.w	r8, r3, r2
 8012506:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8012508:	1aa7      	subs	r7, r4, r2
 801250a:	ae20      	add	r6, sp, #128	; 0x80
 801250c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8012510:	2500      	movs	r5, #0
 8012512:	4545      	cmp	r5, r8
 8012514:	dd13      	ble.n	801253e <__kernel_rem_pio2+0x86>
 8012516:	9b06      	ldr	r3, [sp, #24]
 8012518:	aa20      	add	r2, sp, #128	; 0x80
 801251a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801251e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8012522:	f04f 0800 	mov.w	r8, #0
 8012526:	9b00      	ldr	r3, [sp, #0]
 8012528:	4598      	cmp	r8, r3
 801252a:	dc31      	bgt.n	8012590 <__kernel_rem_pio2+0xd8>
 801252c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 80127c8 <__kernel_rem_pio2+0x310>
 8012530:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8012534:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012538:	462f      	mov	r7, r5
 801253a:	2600      	movs	r6, #0
 801253c:	e01b      	b.n	8012576 <__kernel_rem_pio2+0xbe>
 801253e:	42ef      	cmn	r7, r5
 8012540:	d407      	bmi.n	8012552 <__kernel_rem_pio2+0x9a>
 8012542:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8012546:	f7ee f865 	bl	8000614 <__aeabi_i2d>
 801254a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801254e:	3501      	adds	r5, #1
 8012550:	e7df      	b.n	8012512 <__kernel_rem_pio2+0x5a>
 8012552:	ec51 0b18 	vmov	r0, r1, d8
 8012556:	e7f8      	b.n	801254a <__kernel_rem_pio2+0x92>
 8012558:	e9d7 2300 	ldrd	r2, r3, [r7]
 801255c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8012560:	f7ee f8c2 	bl	80006e8 <__aeabi_dmul>
 8012564:	4602      	mov	r2, r0
 8012566:	460b      	mov	r3, r1
 8012568:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801256c:	f7ed ff06 	bl	800037c <__adddf3>
 8012570:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012574:	3601      	adds	r6, #1
 8012576:	9b05      	ldr	r3, [sp, #20]
 8012578:	429e      	cmp	r6, r3
 801257a:	f1a7 0708 	sub.w	r7, r7, #8
 801257e:	ddeb      	ble.n	8012558 <__kernel_rem_pio2+0xa0>
 8012580:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012584:	f108 0801 	add.w	r8, r8, #1
 8012588:	ecab 7b02 	vstmia	fp!, {d7}
 801258c:	3508      	adds	r5, #8
 801258e:	e7ca      	b.n	8012526 <__kernel_rem_pio2+0x6e>
 8012590:	9b00      	ldr	r3, [sp, #0]
 8012592:	aa0c      	add	r2, sp, #48	; 0x30
 8012594:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012598:	930b      	str	r3, [sp, #44]	; 0x2c
 801259a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801259c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80125a0:	9c00      	ldr	r4, [sp, #0]
 80125a2:	930a      	str	r3, [sp, #40]	; 0x28
 80125a4:	00e3      	lsls	r3, r4, #3
 80125a6:	9308      	str	r3, [sp, #32]
 80125a8:	ab98      	add	r3, sp, #608	; 0x260
 80125aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80125ae:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80125b2:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 80125b6:	ab70      	add	r3, sp, #448	; 0x1c0
 80125b8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80125bc:	46c3      	mov	fp, r8
 80125be:	46a1      	mov	r9, r4
 80125c0:	f1b9 0f00 	cmp.w	r9, #0
 80125c4:	f1a5 0508 	sub.w	r5, r5, #8
 80125c8:	dc77      	bgt.n	80126ba <__kernel_rem_pio2+0x202>
 80125ca:	ec47 6b10 	vmov	d0, r6, r7
 80125ce:	4650      	mov	r0, sl
 80125d0:	f7ff fec2 	bl	8012358 <scalbn>
 80125d4:	ec57 6b10 	vmov	r6, r7, d0
 80125d8:	2200      	movs	r2, #0
 80125da:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80125de:	ee10 0a10 	vmov	r0, s0
 80125e2:	4639      	mov	r1, r7
 80125e4:	f7ee f880 	bl	80006e8 <__aeabi_dmul>
 80125e8:	ec41 0b10 	vmov	d0, r0, r1
 80125ec:	f000 fba4 	bl	8012d38 <floor>
 80125f0:	4b7a      	ldr	r3, [pc, #488]	; (80127dc <__kernel_rem_pio2+0x324>)
 80125f2:	ec51 0b10 	vmov	r0, r1, d0
 80125f6:	2200      	movs	r2, #0
 80125f8:	f7ee f876 	bl	80006e8 <__aeabi_dmul>
 80125fc:	4602      	mov	r2, r0
 80125fe:	460b      	mov	r3, r1
 8012600:	4630      	mov	r0, r6
 8012602:	4639      	mov	r1, r7
 8012604:	f7ed feb8 	bl	8000378 <__aeabi_dsub>
 8012608:	460f      	mov	r7, r1
 801260a:	4606      	mov	r6, r0
 801260c:	f7ee fb1c 	bl	8000c48 <__aeabi_d2iz>
 8012610:	9002      	str	r0, [sp, #8]
 8012612:	f7ed ffff 	bl	8000614 <__aeabi_i2d>
 8012616:	4602      	mov	r2, r0
 8012618:	460b      	mov	r3, r1
 801261a:	4630      	mov	r0, r6
 801261c:	4639      	mov	r1, r7
 801261e:	f7ed feab 	bl	8000378 <__aeabi_dsub>
 8012622:	f1ba 0f00 	cmp.w	sl, #0
 8012626:	4606      	mov	r6, r0
 8012628:	460f      	mov	r7, r1
 801262a:	dd6d      	ble.n	8012708 <__kernel_rem_pio2+0x250>
 801262c:	1e61      	subs	r1, r4, #1
 801262e:	ab0c      	add	r3, sp, #48	; 0x30
 8012630:	9d02      	ldr	r5, [sp, #8]
 8012632:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012636:	f1ca 0018 	rsb	r0, sl, #24
 801263a:	fa43 f200 	asr.w	r2, r3, r0
 801263e:	4415      	add	r5, r2
 8012640:	4082      	lsls	r2, r0
 8012642:	1a9b      	subs	r3, r3, r2
 8012644:	aa0c      	add	r2, sp, #48	; 0x30
 8012646:	9502      	str	r5, [sp, #8]
 8012648:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801264c:	f1ca 0217 	rsb	r2, sl, #23
 8012650:	fa43 fb02 	asr.w	fp, r3, r2
 8012654:	f1bb 0f00 	cmp.w	fp, #0
 8012658:	dd65      	ble.n	8012726 <__kernel_rem_pio2+0x26e>
 801265a:	9b02      	ldr	r3, [sp, #8]
 801265c:	2200      	movs	r2, #0
 801265e:	3301      	adds	r3, #1
 8012660:	9302      	str	r3, [sp, #8]
 8012662:	4615      	mov	r5, r2
 8012664:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8012668:	4294      	cmp	r4, r2
 801266a:	f300 809f 	bgt.w	80127ac <__kernel_rem_pio2+0x2f4>
 801266e:	f1ba 0f00 	cmp.w	sl, #0
 8012672:	dd07      	ble.n	8012684 <__kernel_rem_pio2+0x1cc>
 8012674:	f1ba 0f01 	cmp.w	sl, #1
 8012678:	f000 80c1 	beq.w	80127fe <__kernel_rem_pio2+0x346>
 801267c:	f1ba 0f02 	cmp.w	sl, #2
 8012680:	f000 80c7 	beq.w	8012812 <__kernel_rem_pio2+0x35a>
 8012684:	f1bb 0f02 	cmp.w	fp, #2
 8012688:	d14d      	bne.n	8012726 <__kernel_rem_pio2+0x26e>
 801268a:	4632      	mov	r2, r6
 801268c:	463b      	mov	r3, r7
 801268e:	4954      	ldr	r1, [pc, #336]	; (80127e0 <__kernel_rem_pio2+0x328>)
 8012690:	2000      	movs	r0, #0
 8012692:	f7ed fe71 	bl	8000378 <__aeabi_dsub>
 8012696:	4606      	mov	r6, r0
 8012698:	460f      	mov	r7, r1
 801269a:	2d00      	cmp	r5, #0
 801269c:	d043      	beq.n	8012726 <__kernel_rem_pio2+0x26e>
 801269e:	4650      	mov	r0, sl
 80126a0:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 80127d0 <__kernel_rem_pio2+0x318>
 80126a4:	f7ff fe58 	bl	8012358 <scalbn>
 80126a8:	4630      	mov	r0, r6
 80126aa:	4639      	mov	r1, r7
 80126ac:	ec53 2b10 	vmov	r2, r3, d0
 80126b0:	f7ed fe62 	bl	8000378 <__aeabi_dsub>
 80126b4:	4606      	mov	r6, r0
 80126b6:	460f      	mov	r7, r1
 80126b8:	e035      	b.n	8012726 <__kernel_rem_pio2+0x26e>
 80126ba:	4b4a      	ldr	r3, [pc, #296]	; (80127e4 <__kernel_rem_pio2+0x32c>)
 80126bc:	2200      	movs	r2, #0
 80126be:	4630      	mov	r0, r6
 80126c0:	4639      	mov	r1, r7
 80126c2:	f7ee f811 	bl	80006e8 <__aeabi_dmul>
 80126c6:	f7ee fabf 	bl	8000c48 <__aeabi_d2iz>
 80126ca:	f7ed ffa3 	bl	8000614 <__aeabi_i2d>
 80126ce:	4602      	mov	r2, r0
 80126d0:	460b      	mov	r3, r1
 80126d2:	ec43 2b18 	vmov	d8, r2, r3
 80126d6:	4b44      	ldr	r3, [pc, #272]	; (80127e8 <__kernel_rem_pio2+0x330>)
 80126d8:	2200      	movs	r2, #0
 80126da:	f7ee f805 	bl	80006e8 <__aeabi_dmul>
 80126de:	4602      	mov	r2, r0
 80126e0:	460b      	mov	r3, r1
 80126e2:	4630      	mov	r0, r6
 80126e4:	4639      	mov	r1, r7
 80126e6:	f7ed fe47 	bl	8000378 <__aeabi_dsub>
 80126ea:	f7ee faad 	bl	8000c48 <__aeabi_d2iz>
 80126ee:	e9d5 2300 	ldrd	r2, r3, [r5]
 80126f2:	f84b 0b04 	str.w	r0, [fp], #4
 80126f6:	ec51 0b18 	vmov	r0, r1, d8
 80126fa:	f7ed fe3f 	bl	800037c <__adddf3>
 80126fe:	f109 39ff 	add.w	r9, r9, #4294967295
 8012702:	4606      	mov	r6, r0
 8012704:	460f      	mov	r7, r1
 8012706:	e75b      	b.n	80125c0 <__kernel_rem_pio2+0x108>
 8012708:	d106      	bne.n	8012718 <__kernel_rem_pio2+0x260>
 801270a:	1e63      	subs	r3, r4, #1
 801270c:	aa0c      	add	r2, sp, #48	; 0x30
 801270e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012712:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8012716:	e79d      	b.n	8012654 <__kernel_rem_pio2+0x19c>
 8012718:	4b34      	ldr	r3, [pc, #208]	; (80127ec <__kernel_rem_pio2+0x334>)
 801271a:	2200      	movs	r2, #0
 801271c:	f7ee fa6a 	bl	8000bf4 <__aeabi_dcmpge>
 8012720:	2800      	cmp	r0, #0
 8012722:	d140      	bne.n	80127a6 <__kernel_rem_pio2+0x2ee>
 8012724:	4683      	mov	fp, r0
 8012726:	2200      	movs	r2, #0
 8012728:	2300      	movs	r3, #0
 801272a:	4630      	mov	r0, r6
 801272c:	4639      	mov	r1, r7
 801272e:	f7ee fa43 	bl	8000bb8 <__aeabi_dcmpeq>
 8012732:	2800      	cmp	r0, #0
 8012734:	f000 80c1 	beq.w	80128ba <__kernel_rem_pio2+0x402>
 8012738:	1e65      	subs	r5, r4, #1
 801273a:	462b      	mov	r3, r5
 801273c:	2200      	movs	r2, #0
 801273e:	9900      	ldr	r1, [sp, #0]
 8012740:	428b      	cmp	r3, r1
 8012742:	da6d      	bge.n	8012820 <__kernel_rem_pio2+0x368>
 8012744:	2a00      	cmp	r2, #0
 8012746:	f000 808a 	beq.w	801285e <__kernel_rem_pio2+0x3a6>
 801274a:	ab0c      	add	r3, sp, #48	; 0x30
 801274c:	f1aa 0a18 	sub.w	sl, sl, #24
 8012750:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8012754:	2b00      	cmp	r3, #0
 8012756:	f000 80ae 	beq.w	80128b6 <__kernel_rem_pio2+0x3fe>
 801275a:	4650      	mov	r0, sl
 801275c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 80127d0 <__kernel_rem_pio2+0x318>
 8012760:	f7ff fdfa 	bl	8012358 <scalbn>
 8012764:	1c6b      	adds	r3, r5, #1
 8012766:	00da      	lsls	r2, r3, #3
 8012768:	9205      	str	r2, [sp, #20]
 801276a:	ec57 6b10 	vmov	r6, r7, d0
 801276e:	aa70      	add	r2, sp, #448	; 0x1c0
 8012770:	f8df 9070 	ldr.w	r9, [pc, #112]	; 80127e4 <__kernel_rem_pio2+0x32c>
 8012774:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8012778:	462c      	mov	r4, r5
 801277a:	f04f 0800 	mov.w	r8, #0
 801277e:	2c00      	cmp	r4, #0
 8012780:	f280 80d4 	bge.w	801292c <__kernel_rem_pio2+0x474>
 8012784:	462c      	mov	r4, r5
 8012786:	2c00      	cmp	r4, #0
 8012788:	f2c0 8102 	blt.w	8012990 <__kernel_rem_pio2+0x4d8>
 801278c:	4b18      	ldr	r3, [pc, #96]	; (80127f0 <__kernel_rem_pio2+0x338>)
 801278e:	461e      	mov	r6, r3
 8012790:	ab70      	add	r3, sp, #448	; 0x1c0
 8012792:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8012796:	1b2b      	subs	r3, r5, r4
 8012798:	f04f 0900 	mov.w	r9, #0
 801279c:	f04f 0a00 	mov.w	sl, #0
 80127a0:	2700      	movs	r7, #0
 80127a2:	9306      	str	r3, [sp, #24]
 80127a4:	e0e6      	b.n	8012974 <__kernel_rem_pio2+0x4bc>
 80127a6:	f04f 0b02 	mov.w	fp, #2
 80127aa:	e756      	b.n	801265a <__kernel_rem_pio2+0x1a2>
 80127ac:	f8d8 3000 	ldr.w	r3, [r8]
 80127b0:	bb05      	cbnz	r5, 80127f4 <__kernel_rem_pio2+0x33c>
 80127b2:	b123      	cbz	r3, 80127be <__kernel_rem_pio2+0x306>
 80127b4:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80127b8:	f8c8 3000 	str.w	r3, [r8]
 80127bc:	2301      	movs	r3, #1
 80127be:	3201      	adds	r2, #1
 80127c0:	f108 0804 	add.w	r8, r8, #4
 80127c4:	461d      	mov	r5, r3
 80127c6:	e74f      	b.n	8012668 <__kernel_rem_pio2+0x1b0>
	...
 80127d4:	3ff00000 	.word	0x3ff00000
 80127d8:	08018b10 	.word	0x08018b10
 80127dc:	40200000 	.word	0x40200000
 80127e0:	3ff00000 	.word	0x3ff00000
 80127e4:	3e700000 	.word	0x3e700000
 80127e8:	41700000 	.word	0x41700000
 80127ec:	3fe00000 	.word	0x3fe00000
 80127f0:	08018ad0 	.word	0x08018ad0
 80127f4:	1acb      	subs	r3, r1, r3
 80127f6:	f8c8 3000 	str.w	r3, [r8]
 80127fa:	462b      	mov	r3, r5
 80127fc:	e7df      	b.n	80127be <__kernel_rem_pio2+0x306>
 80127fe:	1e62      	subs	r2, r4, #1
 8012800:	ab0c      	add	r3, sp, #48	; 0x30
 8012802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012806:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801280a:	a90c      	add	r1, sp, #48	; 0x30
 801280c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8012810:	e738      	b.n	8012684 <__kernel_rem_pio2+0x1cc>
 8012812:	1e62      	subs	r2, r4, #1
 8012814:	ab0c      	add	r3, sp, #48	; 0x30
 8012816:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801281a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801281e:	e7f4      	b.n	801280a <__kernel_rem_pio2+0x352>
 8012820:	a90c      	add	r1, sp, #48	; 0x30
 8012822:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8012826:	3b01      	subs	r3, #1
 8012828:	430a      	orrs	r2, r1
 801282a:	e788      	b.n	801273e <__kernel_rem_pio2+0x286>
 801282c:	3301      	adds	r3, #1
 801282e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8012832:	2900      	cmp	r1, #0
 8012834:	d0fa      	beq.n	801282c <__kernel_rem_pio2+0x374>
 8012836:	9a08      	ldr	r2, [sp, #32]
 8012838:	f502 7218 	add.w	r2, r2, #608	; 0x260
 801283c:	446a      	add	r2, sp
 801283e:	3a98      	subs	r2, #152	; 0x98
 8012840:	9208      	str	r2, [sp, #32]
 8012842:	9a06      	ldr	r2, [sp, #24]
 8012844:	a920      	add	r1, sp, #128	; 0x80
 8012846:	18a2      	adds	r2, r4, r2
 8012848:	18e3      	adds	r3, r4, r3
 801284a:	f104 0801 	add.w	r8, r4, #1
 801284e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8012852:	9302      	str	r3, [sp, #8]
 8012854:	9b02      	ldr	r3, [sp, #8]
 8012856:	4543      	cmp	r3, r8
 8012858:	da04      	bge.n	8012864 <__kernel_rem_pio2+0x3ac>
 801285a:	461c      	mov	r4, r3
 801285c:	e6a2      	b.n	80125a4 <__kernel_rem_pio2+0xec>
 801285e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012860:	2301      	movs	r3, #1
 8012862:	e7e4      	b.n	801282e <__kernel_rem_pio2+0x376>
 8012864:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012866:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801286a:	f7ed fed3 	bl	8000614 <__aeabi_i2d>
 801286e:	e8e5 0102 	strd	r0, r1, [r5], #8
 8012872:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012874:	46ab      	mov	fp, r5
 8012876:	461c      	mov	r4, r3
 8012878:	f04f 0900 	mov.w	r9, #0
 801287c:	2600      	movs	r6, #0
 801287e:	2700      	movs	r7, #0
 8012880:	9b05      	ldr	r3, [sp, #20]
 8012882:	4599      	cmp	r9, r3
 8012884:	dd06      	ble.n	8012894 <__kernel_rem_pio2+0x3dc>
 8012886:	9b08      	ldr	r3, [sp, #32]
 8012888:	e8e3 6702 	strd	r6, r7, [r3], #8
 801288c:	f108 0801 	add.w	r8, r8, #1
 8012890:	9308      	str	r3, [sp, #32]
 8012892:	e7df      	b.n	8012854 <__kernel_rem_pio2+0x39c>
 8012894:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8012898:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801289c:	f7ed ff24 	bl	80006e8 <__aeabi_dmul>
 80128a0:	4602      	mov	r2, r0
 80128a2:	460b      	mov	r3, r1
 80128a4:	4630      	mov	r0, r6
 80128a6:	4639      	mov	r1, r7
 80128a8:	f7ed fd68 	bl	800037c <__adddf3>
 80128ac:	f109 0901 	add.w	r9, r9, #1
 80128b0:	4606      	mov	r6, r0
 80128b2:	460f      	mov	r7, r1
 80128b4:	e7e4      	b.n	8012880 <__kernel_rem_pio2+0x3c8>
 80128b6:	3d01      	subs	r5, #1
 80128b8:	e747      	b.n	801274a <__kernel_rem_pio2+0x292>
 80128ba:	ec47 6b10 	vmov	d0, r6, r7
 80128be:	f1ca 0000 	rsb	r0, sl, #0
 80128c2:	f7ff fd49 	bl	8012358 <scalbn>
 80128c6:	ec57 6b10 	vmov	r6, r7, d0
 80128ca:	4ba0      	ldr	r3, [pc, #640]	; (8012b4c <__kernel_rem_pio2+0x694>)
 80128cc:	ee10 0a10 	vmov	r0, s0
 80128d0:	2200      	movs	r2, #0
 80128d2:	4639      	mov	r1, r7
 80128d4:	f7ee f98e 	bl	8000bf4 <__aeabi_dcmpge>
 80128d8:	b1f8      	cbz	r0, 801291a <__kernel_rem_pio2+0x462>
 80128da:	4b9d      	ldr	r3, [pc, #628]	; (8012b50 <__kernel_rem_pio2+0x698>)
 80128dc:	2200      	movs	r2, #0
 80128de:	4630      	mov	r0, r6
 80128e0:	4639      	mov	r1, r7
 80128e2:	f7ed ff01 	bl	80006e8 <__aeabi_dmul>
 80128e6:	f7ee f9af 	bl	8000c48 <__aeabi_d2iz>
 80128ea:	4680      	mov	r8, r0
 80128ec:	f7ed fe92 	bl	8000614 <__aeabi_i2d>
 80128f0:	4b96      	ldr	r3, [pc, #600]	; (8012b4c <__kernel_rem_pio2+0x694>)
 80128f2:	2200      	movs	r2, #0
 80128f4:	f7ed fef8 	bl	80006e8 <__aeabi_dmul>
 80128f8:	460b      	mov	r3, r1
 80128fa:	4602      	mov	r2, r0
 80128fc:	4639      	mov	r1, r7
 80128fe:	4630      	mov	r0, r6
 8012900:	f7ed fd3a 	bl	8000378 <__aeabi_dsub>
 8012904:	f7ee f9a0 	bl	8000c48 <__aeabi_d2iz>
 8012908:	1c65      	adds	r5, r4, #1
 801290a:	ab0c      	add	r3, sp, #48	; 0x30
 801290c:	f10a 0a18 	add.w	sl, sl, #24
 8012910:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8012914:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8012918:	e71f      	b.n	801275a <__kernel_rem_pio2+0x2a2>
 801291a:	4630      	mov	r0, r6
 801291c:	4639      	mov	r1, r7
 801291e:	f7ee f993 	bl	8000c48 <__aeabi_d2iz>
 8012922:	ab0c      	add	r3, sp, #48	; 0x30
 8012924:	4625      	mov	r5, r4
 8012926:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801292a:	e716      	b.n	801275a <__kernel_rem_pio2+0x2a2>
 801292c:	ab0c      	add	r3, sp, #48	; 0x30
 801292e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8012932:	f7ed fe6f 	bl	8000614 <__aeabi_i2d>
 8012936:	4632      	mov	r2, r6
 8012938:	463b      	mov	r3, r7
 801293a:	f7ed fed5 	bl	80006e8 <__aeabi_dmul>
 801293e:	4642      	mov	r2, r8
 8012940:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8012944:	464b      	mov	r3, r9
 8012946:	4630      	mov	r0, r6
 8012948:	4639      	mov	r1, r7
 801294a:	f7ed fecd 	bl	80006e8 <__aeabi_dmul>
 801294e:	3c01      	subs	r4, #1
 8012950:	4606      	mov	r6, r0
 8012952:	460f      	mov	r7, r1
 8012954:	e713      	b.n	801277e <__kernel_rem_pio2+0x2c6>
 8012956:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 801295a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 801295e:	f7ed fec3 	bl	80006e8 <__aeabi_dmul>
 8012962:	4602      	mov	r2, r0
 8012964:	460b      	mov	r3, r1
 8012966:	4648      	mov	r0, r9
 8012968:	4651      	mov	r1, sl
 801296a:	f7ed fd07 	bl	800037c <__adddf3>
 801296e:	3701      	adds	r7, #1
 8012970:	4681      	mov	r9, r0
 8012972:	468a      	mov	sl, r1
 8012974:	9b00      	ldr	r3, [sp, #0]
 8012976:	429f      	cmp	r7, r3
 8012978:	dc02      	bgt.n	8012980 <__kernel_rem_pio2+0x4c8>
 801297a:	9b06      	ldr	r3, [sp, #24]
 801297c:	429f      	cmp	r7, r3
 801297e:	ddea      	ble.n	8012956 <__kernel_rem_pio2+0x49e>
 8012980:	9a06      	ldr	r2, [sp, #24]
 8012982:	ab48      	add	r3, sp, #288	; 0x120
 8012984:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8012988:	e9c6 9a00 	strd	r9, sl, [r6]
 801298c:	3c01      	subs	r4, #1
 801298e:	e6fa      	b.n	8012786 <__kernel_rem_pio2+0x2ce>
 8012990:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8012992:	2b02      	cmp	r3, #2
 8012994:	dc0b      	bgt.n	80129ae <__kernel_rem_pio2+0x4f6>
 8012996:	2b00      	cmp	r3, #0
 8012998:	dc39      	bgt.n	8012a0e <__kernel_rem_pio2+0x556>
 801299a:	d05d      	beq.n	8012a58 <__kernel_rem_pio2+0x5a0>
 801299c:	9b02      	ldr	r3, [sp, #8]
 801299e:	f003 0007 	and.w	r0, r3, #7
 80129a2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80129a6:	ecbd 8b02 	vpop	{d8}
 80129aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129ae:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80129b0:	2b03      	cmp	r3, #3
 80129b2:	d1f3      	bne.n	801299c <__kernel_rem_pio2+0x4e4>
 80129b4:	9b05      	ldr	r3, [sp, #20]
 80129b6:	9500      	str	r5, [sp, #0]
 80129b8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80129bc:	eb0d 0403 	add.w	r4, sp, r3
 80129c0:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 80129c4:	46a2      	mov	sl, r4
 80129c6:	9b00      	ldr	r3, [sp, #0]
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	f1aa 0a08 	sub.w	sl, sl, #8
 80129ce:	dc69      	bgt.n	8012aa4 <__kernel_rem_pio2+0x5ec>
 80129d0:	46aa      	mov	sl, r5
 80129d2:	f1ba 0f01 	cmp.w	sl, #1
 80129d6:	f1a4 0408 	sub.w	r4, r4, #8
 80129da:	f300 8083 	bgt.w	8012ae4 <__kernel_rem_pio2+0x62c>
 80129de:	9c05      	ldr	r4, [sp, #20]
 80129e0:	ab48      	add	r3, sp, #288	; 0x120
 80129e2:	441c      	add	r4, r3
 80129e4:	2000      	movs	r0, #0
 80129e6:	2100      	movs	r1, #0
 80129e8:	2d01      	cmp	r5, #1
 80129ea:	f300 809a 	bgt.w	8012b22 <__kernel_rem_pio2+0x66a>
 80129ee:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 80129f2:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80129f6:	f1bb 0f00 	cmp.w	fp, #0
 80129fa:	f040 8098 	bne.w	8012b2e <__kernel_rem_pio2+0x676>
 80129fe:	9b04      	ldr	r3, [sp, #16]
 8012a00:	e9c3 7800 	strd	r7, r8, [r3]
 8012a04:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8012a08:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8012a0c:	e7c6      	b.n	801299c <__kernel_rem_pio2+0x4e4>
 8012a0e:	9e05      	ldr	r6, [sp, #20]
 8012a10:	ab48      	add	r3, sp, #288	; 0x120
 8012a12:	441e      	add	r6, r3
 8012a14:	462c      	mov	r4, r5
 8012a16:	2000      	movs	r0, #0
 8012a18:	2100      	movs	r1, #0
 8012a1a:	2c00      	cmp	r4, #0
 8012a1c:	da33      	bge.n	8012a86 <__kernel_rem_pio2+0x5ce>
 8012a1e:	f1bb 0f00 	cmp.w	fp, #0
 8012a22:	d036      	beq.n	8012a92 <__kernel_rem_pio2+0x5da>
 8012a24:	4602      	mov	r2, r0
 8012a26:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012a2a:	9c04      	ldr	r4, [sp, #16]
 8012a2c:	e9c4 2300 	strd	r2, r3, [r4]
 8012a30:	4602      	mov	r2, r0
 8012a32:	460b      	mov	r3, r1
 8012a34:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8012a38:	f7ed fc9e 	bl	8000378 <__aeabi_dsub>
 8012a3c:	ae4a      	add	r6, sp, #296	; 0x128
 8012a3e:	2401      	movs	r4, #1
 8012a40:	42a5      	cmp	r5, r4
 8012a42:	da29      	bge.n	8012a98 <__kernel_rem_pio2+0x5e0>
 8012a44:	f1bb 0f00 	cmp.w	fp, #0
 8012a48:	d002      	beq.n	8012a50 <__kernel_rem_pio2+0x598>
 8012a4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012a4e:	4619      	mov	r1, r3
 8012a50:	9b04      	ldr	r3, [sp, #16]
 8012a52:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8012a56:	e7a1      	b.n	801299c <__kernel_rem_pio2+0x4e4>
 8012a58:	9c05      	ldr	r4, [sp, #20]
 8012a5a:	ab48      	add	r3, sp, #288	; 0x120
 8012a5c:	441c      	add	r4, r3
 8012a5e:	2000      	movs	r0, #0
 8012a60:	2100      	movs	r1, #0
 8012a62:	2d00      	cmp	r5, #0
 8012a64:	da09      	bge.n	8012a7a <__kernel_rem_pio2+0x5c2>
 8012a66:	f1bb 0f00 	cmp.w	fp, #0
 8012a6a:	d002      	beq.n	8012a72 <__kernel_rem_pio2+0x5ba>
 8012a6c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012a70:	4619      	mov	r1, r3
 8012a72:	9b04      	ldr	r3, [sp, #16]
 8012a74:	e9c3 0100 	strd	r0, r1, [r3]
 8012a78:	e790      	b.n	801299c <__kernel_rem_pio2+0x4e4>
 8012a7a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012a7e:	f7ed fc7d 	bl	800037c <__adddf3>
 8012a82:	3d01      	subs	r5, #1
 8012a84:	e7ed      	b.n	8012a62 <__kernel_rem_pio2+0x5aa>
 8012a86:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8012a8a:	f7ed fc77 	bl	800037c <__adddf3>
 8012a8e:	3c01      	subs	r4, #1
 8012a90:	e7c3      	b.n	8012a1a <__kernel_rem_pio2+0x562>
 8012a92:	4602      	mov	r2, r0
 8012a94:	460b      	mov	r3, r1
 8012a96:	e7c8      	b.n	8012a2a <__kernel_rem_pio2+0x572>
 8012a98:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8012a9c:	f7ed fc6e 	bl	800037c <__adddf3>
 8012aa0:	3401      	adds	r4, #1
 8012aa2:	e7cd      	b.n	8012a40 <__kernel_rem_pio2+0x588>
 8012aa4:	e9da 8900 	ldrd	r8, r9, [sl]
 8012aa8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8012aac:	9b00      	ldr	r3, [sp, #0]
 8012aae:	3b01      	subs	r3, #1
 8012ab0:	9300      	str	r3, [sp, #0]
 8012ab2:	4632      	mov	r2, r6
 8012ab4:	463b      	mov	r3, r7
 8012ab6:	4640      	mov	r0, r8
 8012ab8:	4649      	mov	r1, r9
 8012aba:	f7ed fc5f 	bl	800037c <__adddf3>
 8012abe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012ac2:	4602      	mov	r2, r0
 8012ac4:	460b      	mov	r3, r1
 8012ac6:	4640      	mov	r0, r8
 8012ac8:	4649      	mov	r1, r9
 8012aca:	f7ed fc55 	bl	8000378 <__aeabi_dsub>
 8012ace:	4632      	mov	r2, r6
 8012ad0:	463b      	mov	r3, r7
 8012ad2:	f7ed fc53 	bl	800037c <__adddf3>
 8012ad6:	ed9d 7b06 	vldr	d7, [sp, #24]
 8012ada:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012ade:	ed8a 7b00 	vstr	d7, [sl]
 8012ae2:	e770      	b.n	80129c6 <__kernel_rem_pio2+0x50e>
 8012ae4:	e9d4 8900 	ldrd	r8, r9, [r4]
 8012ae8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8012aec:	4640      	mov	r0, r8
 8012aee:	4632      	mov	r2, r6
 8012af0:	463b      	mov	r3, r7
 8012af2:	4649      	mov	r1, r9
 8012af4:	f7ed fc42 	bl	800037c <__adddf3>
 8012af8:	e9cd 0100 	strd	r0, r1, [sp]
 8012afc:	4602      	mov	r2, r0
 8012afe:	460b      	mov	r3, r1
 8012b00:	4640      	mov	r0, r8
 8012b02:	4649      	mov	r1, r9
 8012b04:	f7ed fc38 	bl	8000378 <__aeabi_dsub>
 8012b08:	4632      	mov	r2, r6
 8012b0a:	463b      	mov	r3, r7
 8012b0c:	f7ed fc36 	bl	800037c <__adddf3>
 8012b10:	ed9d 7b00 	vldr	d7, [sp]
 8012b14:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012b18:	ed84 7b00 	vstr	d7, [r4]
 8012b1c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012b20:	e757      	b.n	80129d2 <__kernel_rem_pio2+0x51a>
 8012b22:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012b26:	f7ed fc29 	bl	800037c <__adddf3>
 8012b2a:	3d01      	subs	r5, #1
 8012b2c:	e75c      	b.n	80129e8 <__kernel_rem_pio2+0x530>
 8012b2e:	9b04      	ldr	r3, [sp, #16]
 8012b30:	9a04      	ldr	r2, [sp, #16]
 8012b32:	601f      	str	r7, [r3, #0]
 8012b34:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8012b38:	605c      	str	r4, [r3, #4]
 8012b3a:	609d      	str	r5, [r3, #8]
 8012b3c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8012b40:	60d3      	str	r3, [r2, #12]
 8012b42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012b46:	6110      	str	r0, [r2, #16]
 8012b48:	6153      	str	r3, [r2, #20]
 8012b4a:	e727      	b.n	801299c <__kernel_rem_pio2+0x4e4>
 8012b4c:	41700000 	.word	0x41700000
 8012b50:	3e700000 	.word	0x3e700000

08012b54 <__ieee754_logf>:
 8012b54:	ee10 3a10 	vmov	r3, s0
 8012b58:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8012b5c:	d106      	bne.n	8012b6c <__ieee754_logf+0x18>
 8012b5e:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8012cf8 <__ieee754_logf+0x1a4>
 8012b62:	eddf 7a66 	vldr	s15, [pc, #408]	; 8012cfc <__ieee754_logf+0x1a8>
 8012b66:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8012b6a:	4770      	bx	lr
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	da02      	bge.n	8012b76 <__ieee754_logf+0x22>
 8012b70:	ee30 7a40 	vsub.f32	s14, s0, s0
 8012b74:	e7f5      	b.n	8012b62 <__ieee754_logf+0xe>
 8012b76:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012b7a:	db02      	blt.n	8012b82 <__ieee754_logf+0x2e>
 8012b7c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012b80:	4770      	bx	lr
 8012b82:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8012b86:	bfb8      	it	lt
 8012b88:	eddf 7a5d 	vldrlt	s15, [pc, #372]	; 8012d00 <__ieee754_logf+0x1ac>
 8012b8c:	485d      	ldr	r0, [pc, #372]	; (8012d04 <__ieee754_logf+0x1b0>)
 8012b8e:	bfbe      	ittt	lt
 8012b90:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8012b94:	f06f 0118 	mvnlt.w	r1, #24
 8012b98:	ee17 3a90 	vmovlt	r3, s15
 8012b9c:	ea4f 52e3 	mov.w	r2, r3, asr #23
 8012ba0:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8012ba4:	4418      	add	r0, r3
 8012ba6:	bfa8      	it	ge
 8012ba8:	2100      	movge	r1, #0
 8012baa:	3a7f      	subs	r2, #127	; 0x7f
 8012bac:	440a      	add	r2, r1
 8012bae:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 8012bb2:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 8012bb6:	4319      	orrs	r1, r3
 8012bb8:	ee00 1a10 	vmov	s0, r1
 8012bbc:	4952      	ldr	r1, [pc, #328]	; (8012d08 <__ieee754_logf+0x1b4>)
 8012bbe:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 8012bc2:	f103 000f 	add.w	r0, r3, #15
 8012bc6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012bca:	4001      	ands	r1, r0
 8012bcc:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012bd0:	bb89      	cbnz	r1, 8012c36 <__ieee754_logf+0xe2>
 8012bd2:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8012bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bda:	d10f      	bne.n	8012bfc <__ieee754_logf+0xa8>
 8012bdc:	2a00      	cmp	r2, #0
 8012bde:	f000 8087 	beq.w	8012cf0 <__ieee754_logf+0x19c>
 8012be2:	ee07 2a90 	vmov	s15, r2
 8012be6:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8012d0c <__ieee754_logf+0x1b8>
 8012bea:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8012d10 <__ieee754_logf+0x1bc>
 8012bee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012bf2:	ee27 0a80 	vmul.f32	s0, s15, s0
 8012bf6:	eea7 0a87 	vfma.f32	s0, s15, s14
 8012bfa:	4770      	bx	lr
 8012bfc:	eddf 6a45 	vldr	s13, [pc, #276]	; 8012d14 <__ieee754_logf+0x1c0>
 8012c00:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8012c04:	eee0 7a66 	vfms.f32	s15, s0, s13
 8012c08:	ee20 7a00 	vmul.f32	s14, s0, s0
 8012c0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012c10:	b912      	cbnz	r2, 8012c18 <__ieee754_logf+0xc4>
 8012c12:	ee30 0a47 	vsub.f32	s0, s0, s14
 8012c16:	4770      	bx	lr
 8012c18:	ee07 2a90 	vmov	s15, r2
 8012c1c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8012d0c <__ieee754_logf+0x1b8>
 8012c20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012c24:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8012c28:	ee37 0a40 	vsub.f32	s0, s14, s0
 8012c2c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8012d10 <__ieee754_logf+0x1bc>
 8012c30:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8012c34:	4770      	bx	lr
 8012c36:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8012c3a:	ee70 7a27 	vadd.f32	s15, s0, s15
 8012c3e:	eddf 5a36 	vldr	s11, [pc, #216]	; 8012d18 <__ieee754_logf+0x1c4>
 8012c42:	eddf 4a36 	vldr	s9, [pc, #216]	; 8012d1c <__ieee754_logf+0x1c8>
 8012c46:	4936      	ldr	r1, [pc, #216]	; (8012d20 <__ieee754_logf+0x1cc>)
 8012c48:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8012c4c:	4419      	add	r1, r3
 8012c4e:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 8012c52:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8012c56:	430b      	orrs	r3, r1
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	ee07 2a90 	vmov	s15, r2
 8012c5e:	ee26 5a06 	vmul.f32	s10, s12, s12
 8012c62:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8012c66:	ee25 7a05 	vmul.f32	s14, s10, s10
 8012c6a:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8012d24 <__ieee754_logf+0x1d0>
 8012c6e:	eee7 7a25 	vfma.f32	s15, s14, s11
 8012c72:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8012d28 <__ieee754_logf+0x1d4>
 8012c76:	eee7 5a87 	vfma.f32	s11, s15, s14
 8012c7a:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8012d2c <__ieee754_logf+0x1d8>
 8012c7e:	eee7 7a24 	vfma.f32	s15, s14, s9
 8012c82:	eddf 4a2b 	vldr	s9, [pc, #172]	; 8012d30 <__ieee754_logf+0x1dc>
 8012c86:	eee7 4a87 	vfma.f32	s9, s15, s14
 8012c8a:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8012d34 <__ieee754_logf+0x1e0>
 8012c8e:	eee4 7a87 	vfma.f32	s15, s9, s14
 8012c92:	ee67 7a85 	vmul.f32	s15, s15, s10
 8012c96:	eee5 7a87 	vfma.f32	s15, s11, s14
 8012c9a:	dd1a      	ble.n	8012cd2 <__ieee754_logf+0x17e>
 8012c9c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8012ca0:	ee20 7a07 	vmul.f32	s14, s0, s14
 8012ca4:	ee27 7a00 	vmul.f32	s14, s14, s0
 8012ca8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012cac:	ee67 7a86 	vmul.f32	s15, s15, s12
 8012cb0:	b912      	cbnz	r2, 8012cb8 <__ieee754_logf+0x164>
 8012cb2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012cb6:	e7ac      	b.n	8012c12 <__ieee754_logf+0xbe>
 8012cb8:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8012d0c <__ieee754_logf+0x1b8>
 8012cbc:	eee6 7a86 	vfma.f32	s15, s13, s12
 8012cc0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012cc4:	ee37 0a40 	vsub.f32	s0, s14, s0
 8012cc8:	eddf 7a11 	vldr	s15, [pc, #68]	; 8012d10 <__ieee754_logf+0x1bc>
 8012ccc:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8012cd0:	4770      	bx	lr
 8012cd2:	ee70 7a67 	vsub.f32	s15, s0, s15
 8012cd6:	ee67 7a86 	vmul.f32	s15, s15, s12
 8012cda:	b912      	cbnz	r2, 8012ce2 <__ieee754_logf+0x18e>
 8012cdc:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012ce0:	4770      	bx	lr
 8012ce2:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8012d0c <__ieee754_logf+0x1b8>
 8012ce6:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8012cea:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8012cee:	e7eb      	b.n	8012cc8 <__ieee754_logf+0x174>
 8012cf0:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8012cfc <__ieee754_logf+0x1a8>
 8012cf4:	4770      	bx	lr
 8012cf6:	bf00      	nop
 8012cf8:	cc000000 	.word	0xcc000000
 8012cfc:	00000000 	.word	0x00000000
 8012d00:	4c000000 	.word	0x4c000000
 8012d04:	004afb20 	.word	0x004afb20
 8012d08:	007ffff0 	.word	0x007ffff0
 8012d0c:	3717f7d1 	.word	0x3717f7d1
 8012d10:	3f317180 	.word	0x3f317180
 8012d14:	3eaaaaab 	.word	0x3eaaaaab
 8012d18:	3e1cd04f 	.word	0x3e1cd04f
 8012d1c:	3e178897 	.word	0x3e178897
 8012d20:	ffcf5c30 	.word	0xffcf5c30
 8012d24:	3e638e29 	.word	0x3e638e29
 8012d28:	3ecccccd 	.word	0x3ecccccd
 8012d2c:	3e3a3325 	.word	0x3e3a3325
 8012d30:	3e924925 	.word	0x3e924925
 8012d34:	3f2aaaab 	.word	0x3f2aaaab

08012d38 <floor>:
 8012d38:	ec51 0b10 	vmov	r0, r1, d0
 8012d3c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d44:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8012d48:	2e13      	cmp	r6, #19
 8012d4a:	ee10 5a10 	vmov	r5, s0
 8012d4e:	ee10 8a10 	vmov	r8, s0
 8012d52:	460c      	mov	r4, r1
 8012d54:	dc31      	bgt.n	8012dba <floor+0x82>
 8012d56:	2e00      	cmp	r6, #0
 8012d58:	da14      	bge.n	8012d84 <floor+0x4c>
 8012d5a:	a333      	add	r3, pc, #204	; (adr r3, 8012e28 <floor+0xf0>)
 8012d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d60:	f7ed fb0c 	bl	800037c <__adddf3>
 8012d64:	2200      	movs	r2, #0
 8012d66:	2300      	movs	r3, #0
 8012d68:	f7ed ff4e 	bl	8000c08 <__aeabi_dcmpgt>
 8012d6c:	b138      	cbz	r0, 8012d7e <floor+0x46>
 8012d6e:	2c00      	cmp	r4, #0
 8012d70:	da53      	bge.n	8012e1a <floor+0xe2>
 8012d72:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8012d76:	4325      	orrs	r5, r4
 8012d78:	d052      	beq.n	8012e20 <floor+0xe8>
 8012d7a:	4c2d      	ldr	r4, [pc, #180]	; (8012e30 <floor+0xf8>)
 8012d7c:	2500      	movs	r5, #0
 8012d7e:	4621      	mov	r1, r4
 8012d80:	4628      	mov	r0, r5
 8012d82:	e024      	b.n	8012dce <floor+0x96>
 8012d84:	4f2b      	ldr	r7, [pc, #172]	; (8012e34 <floor+0xfc>)
 8012d86:	4137      	asrs	r7, r6
 8012d88:	ea01 0307 	and.w	r3, r1, r7
 8012d8c:	4303      	orrs	r3, r0
 8012d8e:	d01e      	beq.n	8012dce <floor+0x96>
 8012d90:	a325      	add	r3, pc, #148	; (adr r3, 8012e28 <floor+0xf0>)
 8012d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d96:	f7ed faf1 	bl	800037c <__adddf3>
 8012d9a:	2200      	movs	r2, #0
 8012d9c:	2300      	movs	r3, #0
 8012d9e:	f7ed ff33 	bl	8000c08 <__aeabi_dcmpgt>
 8012da2:	2800      	cmp	r0, #0
 8012da4:	d0eb      	beq.n	8012d7e <floor+0x46>
 8012da6:	2c00      	cmp	r4, #0
 8012da8:	bfbe      	ittt	lt
 8012daa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8012dae:	4133      	asrlt	r3, r6
 8012db0:	18e4      	addlt	r4, r4, r3
 8012db2:	ea24 0407 	bic.w	r4, r4, r7
 8012db6:	2500      	movs	r5, #0
 8012db8:	e7e1      	b.n	8012d7e <floor+0x46>
 8012dba:	2e33      	cmp	r6, #51	; 0x33
 8012dbc:	dd0b      	ble.n	8012dd6 <floor+0x9e>
 8012dbe:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8012dc2:	d104      	bne.n	8012dce <floor+0x96>
 8012dc4:	ee10 2a10 	vmov	r2, s0
 8012dc8:	460b      	mov	r3, r1
 8012dca:	f7ed fad7 	bl	800037c <__adddf3>
 8012dce:	ec41 0b10 	vmov	d0, r0, r1
 8012dd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012dd6:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8012dda:	f04f 37ff 	mov.w	r7, #4294967295
 8012dde:	40df      	lsrs	r7, r3
 8012de0:	4238      	tst	r0, r7
 8012de2:	d0f4      	beq.n	8012dce <floor+0x96>
 8012de4:	a310      	add	r3, pc, #64	; (adr r3, 8012e28 <floor+0xf0>)
 8012de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dea:	f7ed fac7 	bl	800037c <__adddf3>
 8012dee:	2200      	movs	r2, #0
 8012df0:	2300      	movs	r3, #0
 8012df2:	f7ed ff09 	bl	8000c08 <__aeabi_dcmpgt>
 8012df6:	2800      	cmp	r0, #0
 8012df8:	d0c1      	beq.n	8012d7e <floor+0x46>
 8012dfa:	2c00      	cmp	r4, #0
 8012dfc:	da0a      	bge.n	8012e14 <floor+0xdc>
 8012dfe:	2e14      	cmp	r6, #20
 8012e00:	d101      	bne.n	8012e06 <floor+0xce>
 8012e02:	3401      	adds	r4, #1
 8012e04:	e006      	b.n	8012e14 <floor+0xdc>
 8012e06:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8012e0a:	2301      	movs	r3, #1
 8012e0c:	40b3      	lsls	r3, r6
 8012e0e:	441d      	add	r5, r3
 8012e10:	45a8      	cmp	r8, r5
 8012e12:	d8f6      	bhi.n	8012e02 <floor+0xca>
 8012e14:	ea25 0507 	bic.w	r5, r5, r7
 8012e18:	e7b1      	b.n	8012d7e <floor+0x46>
 8012e1a:	2500      	movs	r5, #0
 8012e1c:	462c      	mov	r4, r5
 8012e1e:	e7ae      	b.n	8012d7e <floor+0x46>
 8012e20:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8012e24:	e7ab      	b.n	8012d7e <floor+0x46>
 8012e26:	bf00      	nop
 8012e28:	8800759c 	.word	0x8800759c
 8012e2c:	7e37e43c 	.word	0x7e37e43c
 8012e30:	bff00000 	.word	0xbff00000
 8012e34:	000fffff 	.word	0x000fffff

08012e38 <_init>:
 8012e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e3a:	bf00      	nop
 8012e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012e3e:	bc08      	pop	{r3}
 8012e40:	469e      	mov	lr, r3
 8012e42:	4770      	bx	lr

08012e44 <_fini>:
 8012e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e46:	bf00      	nop
 8012e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012e4a:	bc08      	pop	{r3}
 8012e4c:	469e      	mov	lr, r3
 8012e4e:	4770      	bx	lr
