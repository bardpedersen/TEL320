
NUCLEO-L476RG_A111.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dfe8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000576c  0800e178  0800e178  0001e178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080138e4  080138e4  000301e8  2**0
                  CONTENTS
  4 .ARM          00000008  080138e4  080138e4  000238e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080138ec  080138ec  000301e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080138ec  080138ec  000238ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080138f0  080138f0  000238f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  080138f4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  200001e8  08013adc  000301e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004fc  08013adc  000304fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 12 .comment      0000008f  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY
 13 .debug_info   00061874  00000000  00000000  000302a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000def9  00000000  00000000  00091b1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000020f0  00000000  00000000  0009fa18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000096d  00000000  00000000  000a1b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027eb5  00000000  00000000  000a2475  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00027605  00000000  00000000  000ca32a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f8550  00000000  00000000  000f192f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000079b0  00000000  00000000  001e9e80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001f1830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000198a5  00000000  00000000  001f1893  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00003a10  00000000  00000000  0020b138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e160 	.word	0x0800e160

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800e160 	.word	0x0800e160

080001d0 <acc_alg_biquad_q3_12_complex_direct_form_1_reverse>:
 80001d0:	f06f 0c03 	mvn.w	ip, #3
 80001d4:	3904      	subs	r1, #4
 80001d6:	e004      	b.n	80001e2 <head_complex>

080001d8 <acc_alg_biquad_q3_12_complex_direct_form_1>:
 80001d8:	f04f 0c04 	mov.w	ip, #4
 80001dc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80001e0:	4252      	negs	r2, r2

080001e2 <head_complex>:
 80001e2:	0092      	lsls	r2, r2, #2
 80001e4:	d100      	bne.n	80001e8 <init_complex>
 80001e6:	4770      	bx	lr

080001e8 <init_complex>:
 80001e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001ec:	eac3 4603 	pkhbt	r6, r3, r3, lsl #16
 80001f0:	eac3 4723 	pkhtb	r7, r3, r3, asr #16
 80001f4:	f8b0 a000 	ldrh.w	sl, [r0]
 80001f8:	8844      	ldrh	r4, [r0, #2]
 80001fa:	8883      	ldrh	r3, [r0, #4]
 80001fc:	88c5      	ldrh	r5, [r0, #6]
 80001fe:	8900      	ldrh	r0, [r0, #8]
 8000200:	f5c5 4570 	rsb	r5, r5, #61440	; 0xf000
 8000204:	eac3 4e00 	pkhbt	lr, r3, r0, lsl #16
 8000208:	4663      	mov	r3, ip
 800020a:	eac4 4c05 	pkhbt	ip, r4, r5, lsl #16
 800020e:	b234      	sxth	r4, r6
 8000210:	b23d      	sxth	r5, r7
 8000212:	ea4f 3804 	mov.w	r8, r4, lsl #12
 8000216:	ea4f 3905 	mov.w	r9, r5, lsl #12
 800021a:	0034      	movs	r4, r6
 800021c:	003d      	movs	r5, r7

0800021e <loop_complex>:
 800021e:	5888      	ldr	r0, [r1, r2]
 8000220:	fb1a 8800 	smlabb	r8, sl, r0, r8
 8000224:	fb1a 9910 	smlabt	r9, sl, r0, r9
 8000228:	fb2c 8804 	smlad	r8, ip, r4, r8
 800022c:	fb2c 9915 	smladx	r9, ip, r5, r9
 8000230:	fb4e 8806 	smlsd	r8, lr, r6, r8
 8000234:	fb4e 9917 	smlsdx	r9, lr, r7, r9
 8000238:	0026      	movs	r6, r4
 800023a:	002f      	movs	r7, r5
 800023c:	eac0 1408 	pkhbt	r4, r0, r8, lsl #4
 8000240:	eac0 3529 	pkhtb	r5, r0, r9, asr #12
 8000244:	0428      	lsls	r0, r5, #16
 8000246:	eac0 4024 	pkhtb	r0, r0, r4, asr #16
 800024a:	5088      	str	r0, [r1, r2]
 800024c:	18d2      	adds	r2, r2, r3
 800024e:	d1e6      	bne.n	800021e <loop_complex>
 8000250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08000254 <acc_alg_biquad_q3_12_direct_form_1_reverse>:
 8000254:	f06f 0c01 	mvn.w	ip, #1
 8000258:	3902      	subs	r1, #2
 800025a:	e004      	b.n	8000266 <head_real>

0800025c <acc_alg_biquad_q3_12_direct_form_1>:
 800025c:	f05f 0c02 	movs.w	ip, #2
 8000260:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8000264:	4252      	negs	r2, r2

08000266 <head_real>:
 8000266:	0052      	lsls	r2, r2, #1
 8000268:	d100      	bne.n	800026c <init_real>
 800026a:	4770      	bx	lr

0800026c <init_real>:
 800026c:	e92d 44f0 	stmdb	sp!, {r4, r5, r6, r7, sl, lr}
 8000270:	4667      	mov	r7, ip
 8000272:	f8b0 a000 	ldrh.w	sl, [r0]
 8000276:	8844      	ldrh	r4, [r0, #2]
 8000278:	8885      	ldrh	r5, [r0, #4]
 800027a:	88c6      	ldrh	r6, [r0, #6]
 800027c:	8900      	ldrh	r0, [r0, #8]
 800027e:	f5c6 4670 	rsb	r6, r6, #61440	; 0xf000
 8000282:	eac4 4c06 	pkhbt	ip, r4, r6, lsl #16
 8000286:	eac5 4e00 	pkhbt	lr, r5, r0, lsl #16
 800028a:	eac3 4403 	pkhbt	r4, r3, r3, lsl #16
 800028e:	0025      	movs	r5, r4
 8000290:	b21b      	sxth	r3, r3
 8000292:	031e      	lsls	r6, r3, #12

08000294 <loop_real>:
 8000294:	5a88      	ldrh	r0, [r1, r2]
 8000296:	fb1a 6600 	smlabb	r6, sl, r0, r6
 800029a:	fb2c 6604 	smlad	r6, ip, r4, r6
 800029e:	fb4e 6605 	smlsd	r6, lr, r5, r6
 80002a2:	0025      	movs	r5, r4
 80002a4:	eac0 1406 	pkhbt	r4, r0, r6, lsl #4
 80002a8:	1420      	asrs	r0, r4, #16
 80002aa:	5288      	strh	r0, [r1, r2]
 80002ac:	19d2      	adds	r2, r2, r7
 80002ae:	d1f1      	bne.n	8000294 <loop_real>
 80002b0:	e8bd 84f0 	ldmia.w	sp!, {r4, r5, r6, r7, sl, pc}
	...

080002c0 <memchr>:
 80002c0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002c4:	2a10      	cmp	r2, #16
 80002c6:	db2b      	blt.n	8000320 <memchr+0x60>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	d008      	beq.n	80002e0 <memchr+0x20>
 80002ce:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d2:	3a01      	subs	r2, #1
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d02d      	beq.n	8000334 <memchr+0x74>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	b342      	cbz	r2, 8000330 <memchr+0x70>
 80002de:	d1f6      	bne.n	80002ce <memchr+0xe>
 80002e0:	b4f0      	push	{r4, r5, r6, r7}
 80002e2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002e6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ea:	f022 0407 	bic.w	r4, r2, #7
 80002ee:	f07f 0700 	mvns.w	r7, #0
 80002f2:	2300      	movs	r3, #0
 80002f4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002f8:	3c08      	subs	r4, #8
 80002fa:	ea85 0501 	eor.w	r5, r5, r1
 80002fe:	ea86 0601 	eor.w	r6, r6, r1
 8000302:	fa85 f547 	uadd8	r5, r5, r7
 8000306:	faa3 f587 	sel	r5, r3, r7
 800030a:	fa86 f647 	uadd8	r6, r6, r7
 800030e:	faa5 f687 	sel	r6, r5, r7
 8000312:	b98e      	cbnz	r6, 8000338 <memchr+0x78>
 8000314:	d1ee      	bne.n	80002f4 <memchr+0x34>
 8000316:	bcf0      	pop	{r4, r5, r6, r7}
 8000318:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800031c:	f002 0207 	and.w	r2, r2, #7
 8000320:	b132      	cbz	r2, 8000330 <memchr+0x70>
 8000322:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000326:	3a01      	subs	r2, #1
 8000328:	ea83 0301 	eor.w	r3, r3, r1
 800032c:	b113      	cbz	r3, 8000334 <memchr+0x74>
 800032e:	d1f8      	bne.n	8000322 <memchr+0x62>
 8000330:	2000      	movs	r0, #0
 8000332:	4770      	bx	lr
 8000334:	3801      	subs	r0, #1
 8000336:	4770      	bx	lr
 8000338:	2d00      	cmp	r5, #0
 800033a:	bf06      	itte	eq
 800033c:	4635      	moveq	r5, r6
 800033e:	3803      	subeq	r0, #3
 8000340:	3807      	subne	r0, #7
 8000342:	f015 0f01 	tst.w	r5, #1
 8000346:	d107      	bne.n	8000358 <memchr+0x98>
 8000348:	3001      	adds	r0, #1
 800034a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800034e:	bf02      	ittt	eq
 8000350:	3001      	addeq	r0, #1
 8000352:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000356:	3001      	addeq	r0, #1
 8000358:	bcf0      	pop	{r4, r5, r6, r7}
 800035a:	3801      	subs	r0, #1
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop

08000360 <__aeabi_uldivmod>:
 8000360:	b953      	cbnz	r3, 8000378 <__aeabi_uldivmod+0x18>
 8000362:	b94a      	cbnz	r2, 8000378 <__aeabi_uldivmod+0x18>
 8000364:	2900      	cmp	r1, #0
 8000366:	bf08      	it	eq
 8000368:	2800      	cmpeq	r0, #0
 800036a:	bf1c      	itt	ne
 800036c:	f04f 31ff 	movne.w	r1, #4294967295
 8000370:	f04f 30ff 	movne.w	r0, #4294967295
 8000374:	f000 b970 	b.w	8000658 <__aeabi_idiv0>
 8000378:	f1ad 0c08 	sub.w	ip, sp, #8
 800037c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000380:	f000 f806 	bl	8000390 <__udivmoddi4>
 8000384:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000388:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038c:	b004      	add	sp, #16
 800038e:	4770      	bx	lr

08000390 <__udivmoddi4>:
 8000390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000394:	9e08      	ldr	r6, [sp, #32]
 8000396:	460d      	mov	r5, r1
 8000398:	4604      	mov	r4, r0
 800039a:	460f      	mov	r7, r1
 800039c:	2b00      	cmp	r3, #0
 800039e:	d14a      	bne.n	8000436 <__udivmoddi4+0xa6>
 80003a0:	428a      	cmp	r2, r1
 80003a2:	4694      	mov	ip, r2
 80003a4:	d965      	bls.n	8000472 <__udivmoddi4+0xe2>
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	b143      	cbz	r3, 80003be <__udivmoddi4+0x2e>
 80003ac:	fa02 fc03 	lsl.w	ip, r2, r3
 80003b0:	f1c3 0220 	rsb	r2, r3, #32
 80003b4:	409f      	lsls	r7, r3
 80003b6:	fa20 f202 	lsr.w	r2, r0, r2
 80003ba:	4317      	orrs	r7, r2
 80003bc:	409c      	lsls	r4, r3
 80003be:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003c2:	fa1f f58c 	uxth.w	r5, ip
 80003c6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003ca:	0c22      	lsrs	r2, r4, #16
 80003cc:	fb0e 7711 	mls	r7, lr, r1, r7
 80003d0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80003d4:	fb01 f005 	mul.w	r0, r1, r5
 80003d8:	4290      	cmp	r0, r2
 80003da:	d90a      	bls.n	80003f2 <__udivmoddi4+0x62>
 80003dc:	eb1c 0202 	adds.w	r2, ip, r2
 80003e0:	f101 37ff 	add.w	r7, r1, #4294967295
 80003e4:	f080 811c 	bcs.w	8000620 <__udivmoddi4+0x290>
 80003e8:	4290      	cmp	r0, r2
 80003ea:	f240 8119 	bls.w	8000620 <__udivmoddi4+0x290>
 80003ee:	3902      	subs	r1, #2
 80003f0:	4462      	add	r2, ip
 80003f2:	1a12      	subs	r2, r2, r0
 80003f4:	b2a4      	uxth	r4, r4
 80003f6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003fa:	fb0e 2210 	mls	r2, lr, r0, r2
 80003fe:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000402:	fb00 f505 	mul.w	r5, r0, r5
 8000406:	42a5      	cmp	r5, r4
 8000408:	d90a      	bls.n	8000420 <__udivmoddi4+0x90>
 800040a:	eb1c 0404 	adds.w	r4, ip, r4
 800040e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000412:	f080 8107 	bcs.w	8000624 <__udivmoddi4+0x294>
 8000416:	42a5      	cmp	r5, r4
 8000418:	f240 8104 	bls.w	8000624 <__udivmoddi4+0x294>
 800041c:	4464      	add	r4, ip
 800041e:	3802      	subs	r0, #2
 8000420:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000424:	1b64      	subs	r4, r4, r5
 8000426:	2100      	movs	r1, #0
 8000428:	b11e      	cbz	r6, 8000432 <__udivmoddi4+0xa2>
 800042a:	40dc      	lsrs	r4, r3
 800042c:	2300      	movs	r3, #0
 800042e:	e9c6 4300 	strd	r4, r3, [r6]
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	428b      	cmp	r3, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0xbc>
 800043a:	2e00      	cmp	r6, #0
 800043c:	f000 80ed 	beq.w	800061a <__udivmoddi4+0x28a>
 8000440:	2100      	movs	r1, #0
 8000442:	e9c6 0500 	strd	r0, r5, [r6]
 8000446:	4608      	mov	r0, r1
 8000448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044c:	fab3 f183 	clz	r1, r3
 8000450:	2900      	cmp	r1, #0
 8000452:	d149      	bne.n	80004e8 <__udivmoddi4+0x158>
 8000454:	42ab      	cmp	r3, r5
 8000456:	d302      	bcc.n	800045e <__udivmoddi4+0xce>
 8000458:	4282      	cmp	r2, r0
 800045a:	f200 80f8 	bhi.w	800064e <__udivmoddi4+0x2be>
 800045e:	1a84      	subs	r4, r0, r2
 8000460:	eb65 0203 	sbc.w	r2, r5, r3
 8000464:	2001      	movs	r0, #1
 8000466:	4617      	mov	r7, r2
 8000468:	2e00      	cmp	r6, #0
 800046a:	d0e2      	beq.n	8000432 <__udivmoddi4+0xa2>
 800046c:	e9c6 4700 	strd	r4, r7, [r6]
 8000470:	e7df      	b.n	8000432 <__udivmoddi4+0xa2>
 8000472:	b902      	cbnz	r2, 8000476 <__udivmoddi4+0xe6>
 8000474:	deff      	udf	#255	; 0xff
 8000476:	fab2 f382 	clz	r3, r2
 800047a:	2b00      	cmp	r3, #0
 800047c:	f040 8090 	bne.w	80005a0 <__udivmoddi4+0x210>
 8000480:	1a8a      	subs	r2, r1, r2
 8000482:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000486:	fa1f fe8c 	uxth.w	lr, ip
 800048a:	2101      	movs	r1, #1
 800048c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000490:	fb07 2015 	mls	r0, r7, r5, r2
 8000494:	0c22      	lsrs	r2, r4, #16
 8000496:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800049a:	fb0e f005 	mul.w	r0, lr, r5
 800049e:	4290      	cmp	r0, r2
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x124>
 80004a2:	eb1c 0202 	adds.w	r2, ip, r2
 80004a6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004aa:	d202      	bcs.n	80004b2 <__udivmoddi4+0x122>
 80004ac:	4290      	cmp	r0, r2
 80004ae:	f200 80cb 	bhi.w	8000648 <__udivmoddi4+0x2b8>
 80004b2:	4645      	mov	r5, r8
 80004b4:	1a12      	subs	r2, r2, r0
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004bc:	fb07 2210 	mls	r2, r7, r0, r2
 80004c0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004c4:	fb0e fe00 	mul.w	lr, lr, r0
 80004c8:	45a6      	cmp	lr, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x14e>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f100 32ff 	add.w	r2, r0, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x14c>
 80004d6:	45a6      	cmp	lr, r4
 80004d8:	f200 80bb 	bhi.w	8000652 <__udivmoddi4+0x2c2>
 80004dc:	4610      	mov	r0, r2
 80004de:	eba4 040e 	sub.w	r4, r4, lr
 80004e2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80004e6:	e79f      	b.n	8000428 <__udivmoddi4+0x98>
 80004e8:	f1c1 0720 	rsb	r7, r1, #32
 80004ec:	408b      	lsls	r3, r1
 80004ee:	fa22 fc07 	lsr.w	ip, r2, r7
 80004f2:	ea4c 0c03 	orr.w	ip, ip, r3
 80004f6:	fa05 f401 	lsl.w	r4, r5, r1
 80004fa:	fa20 f307 	lsr.w	r3, r0, r7
 80004fe:	40fd      	lsrs	r5, r7
 8000500:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000504:	4323      	orrs	r3, r4
 8000506:	fbb5 f8f9 	udiv	r8, r5, r9
 800050a:	fa1f fe8c 	uxth.w	lr, ip
 800050e:	fb09 5518 	mls	r5, r9, r8, r5
 8000512:	0c1c      	lsrs	r4, r3, #16
 8000514:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000518:	fb08 f50e 	mul.w	r5, r8, lr
 800051c:	42a5      	cmp	r5, r4
 800051e:	fa02 f201 	lsl.w	r2, r2, r1
 8000522:	fa00 f001 	lsl.w	r0, r0, r1
 8000526:	d90b      	bls.n	8000540 <__udivmoddi4+0x1b0>
 8000528:	eb1c 0404 	adds.w	r4, ip, r4
 800052c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000530:	f080 8088 	bcs.w	8000644 <__udivmoddi4+0x2b4>
 8000534:	42a5      	cmp	r5, r4
 8000536:	f240 8085 	bls.w	8000644 <__udivmoddi4+0x2b4>
 800053a:	f1a8 0802 	sub.w	r8, r8, #2
 800053e:	4464      	add	r4, ip
 8000540:	1b64      	subs	r4, r4, r5
 8000542:	b29d      	uxth	r5, r3
 8000544:	fbb4 f3f9 	udiv	r3, r4, r9
 8000548:	fb09 4413 	mls	r4, r9, r3, r4
 800054c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000550:	fb03 fe0e 	mul.w	lr, r3, lr
 8000554:	45a6      	cmp	lr, r4
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x1da>
 8000558:	eb1c 0404 	adds.w	r4, ip, r4
 800055c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000560:	d26c      	bcs.n	800063c <__udivmoddi4+0x2ac>
 8000562:	45a6      	cmp	lr, r4
 8000564:	d96a      	bls.n	800063c <__udivmoddi4+0x2ac>
 8000566:	3b02      	subs	r3, #2
 8000568:	4464      	add	r4, ip
 800056a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800056e:	fba3 9502 	umull	r9, r5, r3, r2
 8000572:	eba4 040e 	sub.w	r4, r4, lr
 8000576:	42ac      	cmp	r4, r5
 8000578:	46c8      	mov	r8, r9
 800057a:	46ae      	mov	lr, r5
 800057c:	d356      	bcc.n	800062c <__udivmoddi4+0x29c>
 800057e:	d053      	beq.n	8000628 <__udivmoddi4+0x298>
 8000580:	b156      	cbz	r6, 8000598 <__udivmoddi4+0x208>
 8000582:	ebb0 0208 	subs.w	r2, r0, r8
 8000586:	eb64 040e 	sbc.w	r4, r4, lr
 800058a:	fa04 f707 	lsl.w	r7, r4, r7
 800058e:	40ca      	lsrs	r2, r1
 8000590:	40cc      	lsrs	r4, r1
 8000592:	4317      	orrs	r7, r2
 8000594:	e9c6 7400 	strd	r7, r4, [r6]
 8000598:	4618      	mov	r0, r3
 800059a:	2100      	movs	r1, #0
 800059c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a0:	f1c3 0120 	rsb	r1, r3, #32
 80005a4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005a8:	fa20 f201 	lsr.w	r2, r0, r1
 80005ac:	fa25 f101 	lsr.w	r1, r5, r1
 80005b0:	409d      	lsls	r5, r3
 80005b2:	432a      	orrs	r2, r5
 80005b4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005b8:	fa1f fe8c 	uxth.w	lr, ip
 80005bc:	fbb1 f0f7 	udiv	r0, r1, r7
 80005c0:	fb07 1510 	mls	r5, r7, r0, r1
 80005c4:	0c11      	lsrs	r1, r2, #16
 80005c6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005ca:	fb00 f50e 	mul.w	r5, r0, lr
 80005ce:	428d      	cmp	r5, r1
 80005d0:	fa04 f403 	lsl.w	r4, r4, r3
 80005d4:	d908      	bls.n	80005e8 <__udivmoddi4+0x258>
 80005d6:	eb1c 0101 	adds.w	r1, ip, r1
 80005da:	f100 38ff 	add.w	r8, r0, #4294967295
 80005de:	d22f      	bcs.n	8000640 <__udivmoddi4+0x2b0>
 80005e0:	428d      	cmp	r5, r1
 80005e2:	d92d      	bls.n	8000640 <__udivmoddi4+0x2b0>
 80005e4:	3802      	subs	r0, #2
 80005e6:	4461      	add	r1, ip
 80005e8:	1b49      	subs	r1, r1, r5
 80005ea:	b292      	uxth	r2, r2
 80005ec:	fbb1 f5f7 	udiv	r5, r1, r7
 80005f0:	fb07 1115 	mls	r1, r7, r5, r1
 80005f4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005f8:	fb05 f10e 	mul.w	r1, r5, lr
 80005fc:	4291      	cmp	r1, r2
 80005fe:	d908      	bls.n	8000612 <__udivmoddi4+0x282>
 8000600:	eb1c 0202 	adds.w	r2, ip, r2
 8000604:	f105 38ff 	add.w	r8, r5, #4294967295
 8000608:	d216      	bcs.n	8000638 <__udivmoddi4+0x2a8>
 800060a:	4291      	cmp	r1, r2
 800060c:	d914      	bls.n	8000638 <__udivmoddi4+0x2a8>
 800060e:	3d02      	subs	r5, #2
 8000610:	4462      	add	r2, ip
 8000612:	1a52      	subs	r2, r2, r1
 8000614:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000618:	e738      	b.n	800048c <__udivmoddi4+0xfc>
 800061a:	4631      	mov	r1, r6
 800061c:	4630      	mov	r0, r6
 800061e:	e708      	b.n	8000432 <__udivmoddi4+0xa2>
 8000620:	4639      	mov	r1, r7
 8000622:	e6e6      	b.n	80003f2 <__udivmoddi4+0x62>
 8000624:	4610      	mov	r0, r2
 8000626:	e6fb      	b.n	8000420 <__udivmoddi4+0x90>
 8000628:	4548      	cmp	r0, r9
 800062a:	d2a9      	bcs.n	8000580 <__udivmoddi4+0x1f0>
 800062c:	ebb9 0802 	subs.w	r8, r9, r2
 8000630:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000634:	3b01      	subs	r3, #1
 8000636:	e7a3      	b.n	8000580 <__udivmoddi4+0x1f0>
 8000638:	4645      	mov	r5, r8
 800063a:	e7ea      	b.n	8000612 <__udivmoddi4+0x282>
 800063c:	462b      	mov	r3, r5
 800063e:	e794      	b.n	800056a <__udivmoddi4+0x1da>
 8000640:	4640      	mov	r0, r8
 8000642:	e7d1      	b.n	80005e8 <__udivmoddi4+0x258>
 8000644:	46d0      	mov	r8, sl
 8000646:	e77b      	b.n	8000540 <__udivmoddi4+0x1b0>
 8000648:	3d02      	subs	r5, #2
 800064a:	4462      	add	r2, ip
 800064c:	e732      	b.n	80004b4 <__udivmoddi4+0x124>
 800064e:	4608      	mov	r0, r1
 8000650:	e70a      	b.n	8000468 <__udivmoddi4+0xd8>
 8000652:	4464      	add	r4, ip
 8000654:	3802      	subs	r0, #2
 8000656:	e742      	b.n	80004de <__udivmoddi4+0x14e>

08000658 <__aeabi_idiv0>:
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop

0800065c <disable_interrupts>:
 */
#define ACC_BOARD_REF_FREQ 26000000


static inline void disable_interrupts(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000660:	b672      	cpsid	i
}
 8000662:	bf00      	nop
	__disable_irq();
}
 8000664:	bf00      	nop
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr

0800066e <enable_interrupts>:


static inline void enable_interrupts(void)
{
 800066e:	b480      	push	{r7}
 8000670:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 8000672:	b662      	cpsie	i
}
 8000674:	bf00      	nop
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8000676:	f3bf 8f6f 	isb	sy
}
 800067a:	bf00      	nop
	__enable_irq();
	__ISB();
}
 800067c:	bf00      	nop
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr
	...

08000688 <acc_hal_integration_sensor_transfer>:
// Implementation of RSS HAL handlers
//----------------------------------------


static void acc_hal_integration_sensor_transfer(acc_sensor_id_t sensor_id, uint8_t *buffer, size_t buffer_size)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b088      	sub	sp, #32
 800068c:	af02      	add	r7, sp, #8
 800068e:	60f8      	str	r0, [r7, #12]
 8000690:	60b9      	str	r1, [r7, #8]
 8000692:	607a      	str	r2, [r7, #4]
	(void)sensor_id;  // Ignore parameter sensor_id

	const uint32_t SPI_TRANSMIT_RECEIVE_TIMEOUT = 5000;
 8000694:	f241 3388 	movw	r3, #5000	; 0x1388
 8000698:	617b      	str	r3, [r7, #20]

	HAL_GPIO_WritePin(A111_CS_N_GPIO_Port, A111_CS_N_Pin, GPIO_PIN_RESET);
 800069a:	2200      	movs	r2, #0
 800069c:	2140      	movs	r1, #64	; 0x40
 800069e:	480b      	ldr	r0, [pc, #44]	; (80006cc <acc_hal_integration_sensor_transfer+0x44>)
 80006a0:	f001 f9d0 	bl	8001a44 <HAL_GPIO_WritePin>

		// Enable interrupt again, the ISR will execute directly after this
		enable_interrupts();
	}
#else
	HAL_SPI_TransmitReceive(&A111_SPI_HANDLE, buffer, buffer, buffer_size, SPI_TRANSMIT_RECEIVE_TIMEOUT);
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	b29a      	uxth	r2, r3
 80006a8:	697b      	ldr	r3, [r7, #20]
 80006aa:	9300      	str	r3, [sp, #0]
 80006ac:	4613      	mov	r3, r2
 80006ae:	68ba      	ldr	r2, [r7, #8]
 80006b0:	68b9      	ldr	r1, [r7, #8]
 80006b2:	4807      	ldr	r0, [pc, #28]	; (80006d0 <acc_hal_integration_sensor_transfer+0x48>)
 80006b4:	f002 fdc5 	bl	8003242 <HAL_SPI_TransmitReceive>
#endif

	HAL_GPIO_WritePin(A111_CS_N_GPIO_Port, A111_CS_N_Pin, GPIO_PIN_SET);
 80006b8:	2201      	movs	r2, #1
 80006ba:	2140      	movs	r1, #64	; 0x40
 80006bc:	4803      	ldr	r0, [pc, #12]	; (80006cc <acc_hal_integration_sensor_transfer+0x44>)
 80006be:	f001 f9c1 	bl	8001a44 <HAL_GPIO_WritePin>
}
 80006c2:	bf00      	nop
 80006c4:	3718      	adds	r7, #24
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	48000400 	.word	0x48000400
 80006d0:	20000204 	.word	0x20000204

080006d4 <acc_hal_integration_sensor_power_on>:


static void acc_hal_integration_sensor_power_on(acc_sensor_id_t sensor_id)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
	(void)sensor_id;  // Ignore parameter sensor_id

	HAL_GPIO_WritePin(A111_ENABLE_GPIO_Port, A111_ENABLE_Pin, GPIO_PIN_SET);
 80006dc:	2201      	movs	r2, #1
 80006de:	2120      	movs	r1, #32
 80006e0:	4807      	ldr	r0, [pc, #28]	; (8000700 <acc_hal_integration_sensor_power_on+0x2c>)
 80006e2:	f001 f9af 	bl	8001a44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A111_CS_N_GPIO_Port, A111_CS_N_Pin, GPIO_PIN_SET);
 80006e6:	2201      	movs	r2, #1
 80006e8:	2140      	movs	r1, #64	; 0x40
 80006ea:	4805      	ldr	r0, [pc, #20]	; (8000700 <acc_hal_integration_sensor_power_on+0x2c>)
 80006ec:	f001 f9aa 	bl	8001a44 <HAL_GPIO_WritePin>

	// Wait 2 ms to make sure that the sensor crystal have time to stabilize
	HAL_Delay(2);
 80006f0:	2002      	movs	r0, #2
 80006f2:	f000 feaf 	bl	8001454 <HAL_Delay>
}
 80006f6:	bf00      	nop
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	48000400 	.word	0x48000400

08000704 <acc_hal_integration_sensor_power_off>:


static void acc_hal_integration_sensor_power_off(acc_sensor_id_t sensor_id)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
	(void)sensor_id;  // Ignore parameter sensor_id

	HAL_GPIO_WritePin(A111_CS_N_GPIO_Port, A111_CS_N_Pin, GPIO_PIN_RESET);
 800070c:	2200      	movs	r2, #0
 800070e:	2140      	movs	r1, #64	; 0x40
 8000710:	4807      	ldr	r0, [pc, #28]	; (8000730 <acc_hal_integration_sensor_power_off+0x2c>)
 8000712:	f001 f997 	bl	8001a44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A111_ENABLE_GPIO_Port, A111_ENABLE_Pin, GPIO_PIN_RESET);
 8000716:	2200      	movs	r2, #0
 8000718:	2120      	movs	r1, #32
 800071a:	4805      	ldr	r0, [pc, #20]	; (8000730 <acc_hal_integration_sensor_power_off+0x2c>)
 800071c:	f001 f992 	bl	8001a44 <HAL_GPIO_WritePin>

	// Wait after power off to leave the sensor in a known state
	// in case the application intends to enable the sensor directly
	HAL_Delay(2);
 8000720:	2002      	movs	r0, #2
 8000722:	f000 fe97 	bl	8001454 <HAL_Delay>
}
 8000726:	bf00      	nop
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	48000400 	.word	0x48000400

08000734 <acc_hal_integration_wait_for_sensor_interrupt>:


static bool acc_hal_integration_wait_for_sensor_interrupt(acc_sensor_id_t sensor_id, uint32_t timeout_ms)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	6039      	str	r1, [r7, #0]
	(void)sensor_id; // Ignore parameter sensor_id

	const uint32_t wait_begin_ms = HAL_GetTick();
 800073e:	f000 fe7d 	bl	800143c <HAL_GetTick>
 8000742:	60f8      	str	r0, [r7, #12]
	while ((HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) != GPIO_PIN_SET) &&
 8000744:	e00d      	b.n	8000762 <acc_hal_integration_wait_for_sensor_interrupt+0x2e>
	       (HAL_GetTick() - wait_begin_ms < timeout_ms))
	{
		// Wait for the GPIO interrupt
		disable_interrupts();
 8000746:	f7ff ff89 	bl	800065c <disable_interrupts>
		// Check again so that IRQ did not occur
		if (HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) != GPIO_PIN_SET)
 800074a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800074e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000752:	f001 f95f 	bl	8001a14 <HAL_GPIO_ReadPin>
 8000756:	4603      	mov	r3, r0
 8000758:	2b01      	cmp	r3, #1
 800075a:	d000      	beq.n	800075e <acc_hal_integration_wait_for_sensor_interrupt+0x2a>
		{
			__WFI();
 800075c:	bf30      	wfi
		}

		// Enable interrupts again to allow pending interrupt to be handled
		enable_interrupts();
 800075e:	f7ff ff86 	bl	800066e <enable_interrupts>
	while ((HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) != GPIO_PIN_SET) &&
 8000762:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000766:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800076a:	f001 f953 	bl	8001a14 <HAL_GPIO_ReadPin>
 800076e:	4603      	mov	r3, r0
 8000770:	2b01      	cmp	r3, #1
 8000772:	d007      	beq.n	8000784 <acc_hal_integration_wait_for_sensor_interrupt+0x50>
	       (HAL_GetTick() - wait_begin_ms < timeout_ms))
 8000774:	f000 fe62 	bl	800143c <HAL_GetTick>
 8000778:	4602      	mov	r2, r0
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	1ad3      	subs	r3, r2, r3
	while ((HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) != GPIO_PIN_SET) &&
 800077e:	683a      	ldr	r2, [r7, #0]
 8000780:	429a      	cmp	r2, r3
 8000782:	d8e0      	bhi.n	8000746 <acc_hal_integration_wait_for_sensor_interrupt+0x12>
	}

	return HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) == GPIO_PIN_SET;
 8000784:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000788:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800078c:	f001 f942 	bl	8001a14 <HAL_GPIO_ReadPin>
 8000790:	4603      	mov	r3, r0
 8000792:	2b01      	cmp	r3, #1
 8000794:	bf0c      	ite	eq
 8000796:	2301      	moveq	r3, #1
 8000798:	2300      	movne	r3, #0
 800079a:	b2db      	uxtb	r3, r3
}
 800079c:	4618      	mov	r0, r3
 800079e:	3710      	adds	r7, #16
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <acc_hal_integration_get_reference_frequency>:


static float acc_hal_integration_get_reference_frequency(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
	return ACC_BOARD_REF_FREQ;
 80007a8:	4b04      	ldr	r3, [pc, #16]	; (80007bc <acc_hal_integration_get_reference_frequency+0x18>)
 80007aa:	ee07 3a90 	vmov	s15, r3
}
 80007ae:	eeb0 0a67 	vmov.f32	s0, s15
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	4bc65d40 	.word	0x4bc65d40

080007c0 <acc_hal_integration_get_implementation>:
	.optimization.transfer16 = NULL,
};


const acc_hal_t *acc_hal_integration_get_implementation(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
	return &hal;
 80007c4:	4b02      	ldr	r3, [pc, #8]	; (80007d0 <acc_hal_integration_get_implementation+0x10>)
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr
 80007d0:	0800e244 	.word	0x0800e244

080007d4 <acc_integration_log>:

#define LOG_FORMAT "%02u:%02u:%02u.%03u (%c) (%s) %s\n"


void acc_integration_log(acc_log_level_t level, const char *module, const char *format, ...)
{
 80007d4:	b40c      	push	{r2, r3}
 80007d6:	b580      	push	{r7, lr}
 80007d8:	b0b4      	sub	sp, #208	; 0xd0
 80007da:	af04      	add	r7, sp, #16
 80007dc:	4603      	mov	r3, r0
 80007de:	6039      	str	r1, [r7, #0]
 80007e0:	71fb      	strb	r3, [r7, #7]
	char    log_buffer[LOG_BUFFER_MAX_SIZE];
	va_list ap;

	va_start(ap, format);
 80007e2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80007e6:	60bb      	str	r3, [r7, #8]

	int ret = vsnprintf(log_buffer, LOG_BUFFER_MAX_SIZE, format, ap);
 80007e8:	f107 000c 	add.w	r0, r7, #12
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80007f2:	2196      	movs	r1, #150	; 0x96
 80007f4:	f00c fc1c 	bl	800d030 <vsniprintf>
 80007f8:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc

	if (ret >= LOG_BUFFER_MAX_SIZE)
 80007fc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000800:	2b95      	cmp	r3, #149	; 0x95
 8000802:	dd0b      	ble.n	800081c <acc_integration_log+0x48>
	{
		log_buffer[LOG_BUFFER_MAX_SIZE - 4] = '.';
 8000804:	232e      	movs	r3, #46	; 0x2e
 8000806:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
		log_buffer[LOG_BUFFER_MAX_SIZE - 3] = '.';
 800080a:	232e      	movs	r3, #46	; 0x2e
 800080c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		log_buffer[LOG_BUFFER_MAX_SIZE - 2] = '.';
 8000810:	232e      	movs	r3, #46	; 0x2e
 8000812:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
		log_buffer[LOG_BUFFER_MAX_SIZE - 1] = 0;
 8000816:	2300      	movs	r3, #0
 8000818:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
	}

	uint32_t time_ms = acc_integration_get_time();
 800081c:	f000 f876 	bl	800090c <acc_integration_get_time>
 8000820:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
	char     level_ch;

	unsigned int timestamp    = time_ms;
 8000824:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000828:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	unsigned int hours        = timestamp / 1000 / 60 / 60;
 800082c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000830:	4a2f      	ldr	r2, [pc, #188]	; (80008f0 <acc_integration_log+0x11c>)
 8000832:	fba2 2303 	umull	r2, r3, r2, r3
 8000836:	0d5b      	lsrs	r3, r3, #21
 8000838:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	unsigned int minutes      = timestamp / 1000 / 60 % 60;
 800083c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000840:	4a2c      	ldr	r2, [pc, #176]	; (80008f4 <acc_integration_log+0x120>)
 8000842:	fba2 2303 	umull	r2, r3, r2, r3
 8000846:	0b9a      	lsrs	r2, r3, #14
 8000848:	4b2b      	ldr	r3, [pc, #172]	; (80008f8 <acc_integration_log+0x124>)
 800084a:	fba3 1302 	umull	r1, r3, r3, r2
 800084e:	0959      	lsrs	r1, r3, #5
 8000850:	460b      	mov	r3, r1
 8000852:	011b      	lsls	r3, r3, #4
 8000854:	1a5b      	subs	r3, r3, r1
 8000856:	009b      	lsls	r3, r3, #2
 8000858:	1ad3      	subs	r3, r2, r3
 800085a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	unsigned int seconds      = timestamp / 1000 % 60;
 800085e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000862:	4a26      	ldr	r2, [pc, #152]	; (80008fc <acc_integration_log+0x128>)
 8000864:	fba2 2303 	umull	r2, r3, r2, r3
 8000868:	099a      	lsrs	r2, r3, #6
 800086a:	4b23      	ldr	r3, [pc, #140]	; (80008f8 <acc_integration_log+0x124>)
 800086c:	fba3 1302 	umull	r1, r3, r3, r2
 8000870:	0959      	lsrs	r1, r3, #5
 8000872:	460b      	mov	r3, r1
 8000874:	011b      	lsls	r3, r3, #4
 8000876:	1a5b      	subs	r3, r3, r1
 8000878:	009b      	lsls	r3, r3, #2
 800087a:	1ad3      	subs	r3, r2, r3
 800087c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	unsigned int milliseconds = timestamp % 1000;
 8000880:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000884:	4a1d      	ldr	r2, [pc, #116]	; (80008fc <acc_integration_log+0x128>)
 8000886:	fba2 1203 	umull	r1, r2, r2, r3
 800088a:	0992      	lsrs	r2, r2, #6
 800088c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000890:	fb01 f202 	mul.w	r2, r1, r2
 8000894:	1a9b      	subs	r3, r3, r2
 8000896:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	level_ch = (level <= ACC_LOG_LEVEL_DEBUG) ? "EWIVD"[level] : '?';
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	2b04      	cmp	r3, #4
 800089e:	d803      	bhi.n	80008a8 <acc_integration_log+0xd4>
 80008a0:	79fb      	ldrb	r3, [r7, #7]
 80008a2:	4a17      	ldr	r2, [pc, #92]	; (8000900 <acc_integration_log+0x12c>)
 80008a4:	5cd3      	ldrb	r3, [r2, r3]
 80008a6:	e000      	b.n	80008aa <acc_integration_log+0xd6>
 80008a8:	233f      	movs	r3, #63	; 0x3f
 80008aa:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

	printf(LOG_FORMAT, hours, minutes, seconds, milliseconds, level_ch, module, log_buffer);
 80008ae:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80008b2:	f107 020c 	add.w	r2, r7, #12
 80008b6:	9203      	str	r2, [sp, #12]
 80008b8:	683a      	ldr	r2, [r7, #0]
 80008ba:	9202      	str	r2, [sp, #8]
 80008bc:	9301      	str	r3, [sp, #4]
 80008be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80008c2:	9300      	str	r3, [sp, #0]
 80008c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80008c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80008cc:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 80008d0:	480c      	ldr	r0, [pc, #48]	; (8000904 <acc_integration_log+0x130>)
 80008d2:	f00c fac9 	bl	800ce68 <iprintf>

	fflush(stdout);
 80008d6:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <acc_integration_log+0x134>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	689b      	ldr	r3, [r3, #8]
 80008dc:	4618      	mov	r0, r3
 80008de:	f00c f9ff 	bl	800cce0 <fflush>

	va_end(ap);
}
 80008e2:	bf00      	nop
 80008e4:	37c0      	adds	r7, #192	; 0xc0
 80008e6:	46bd      	mov	sp, r7
 80008e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80008ec:	b002      	add	sp, #8
 80008ee:	4770      	bx	lr
 80008f0:	95217cb1 	.word	0x95217cb1
 80008f4:	45e7b273 	.word	0x45e7b273
 80008f8:	88888889 	.word	0x88888889
 80008fc:	10624dd3 	.word	0x10624dd3
 8000900:	0800e19c 	.word	0x0800e19c
 8000904:	0800e178 	.word	0x0800e178
 8000908:	200001e4 	.word	0x200001e4

0800090c <acc_integration_get_time>:
	HAL_Delay(time_msec);
}


uint32_t acc_integration_get_time(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8000910:	f000 fd94 	bl	800143c <HAL_GetTick>
 8000914:	4603      	mov	r3, r0
}
 8000916:	4618      	mov	r0, r3
 8000918:	bd80      	pop	{r7, pc}
	...

0800091c <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	60f8      	str	r0, [r7, #12]
 8000924:	60b9      	str	r1, [r7, #8]
 8000926:	607a      	str	r2, [r7, #4]
	(void)file;
	HAL_UART_Transmit(&huart2, ptr, len, 0xFFFF);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	b29a      	uxth	r2, r3
 800092c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000930:	68b9      	ldr	r1, [r7, #8]
 8000932:	4804      	ldr	r0, [pc, #16]	; (8000944 <_write+0x28>)
 8000934:	f003 f85a 	bl	80039ec <HAL_UART_Transmit>
	return len;
 8000938:	687b      	ldr	r3, [r7, #4]
}
 800093a:	4618      	mov	r0, r3
 800093c:	3710      	adds	r7, #16
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	20000268 	.word	0x20000268

08000948 <update_configuration.1>:
{
  /* USER CODE BEGIN 1 */


	void update_configuration(acc_service_configuration_t envelope_configuration)
	{
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
 8000950:	f8c7 c000 	str.w	ip, [r7]
		float start_m  = 0.2f;
 8000954:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <update_configuration.1+0x3c>)
 8000956:	60fb      	str	r3, [r7, #12]
		float length_m = 0.5f;
 8000958:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 800095c:	60bb      	str	r3, [r7, #8]

		acc_service_profile_set(envelope_configuration, ACC_SERVICE_PROFILE_1);
 800095e:	2101      	movs	r1, #1
 8000960:	6878      	ldr	r0, [r7, #4]
 8000962:	f003 ffb3 	bl	80048cc <acc_service_profile_set>
		acc_service_requested_start_set(envelope_configuration, start_m);
 8000966:	ed97 0a03 	vldr	s0, [r7, #12]
 800096a:	6878      	ldr	r0, [r7, #4]
 800096c:	f003 fe2a 	bl	80045c4 <acc_service_requested_start_set>
		acc_service_requested_length_set(envelope_configuration, length_m);
 8000970:	ed97 0a02 	vldr	s0, [r7, #8]
 8000974:	6878      	ldr	r0, [r7, #4]
 8000976:	f003 fe33 	bl	80045e0 <acc_service_requested_length_set>
	}
 800097a:	bf00      	nop
 800097c:	3710      	adds	r7, #16
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	3e4ccccd 	.word	0x3e4ccccd

08000988 <main>:
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
int main(void)
 800098e:	f107 0310 	add.w	r3, r7, #16
 8000992:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000994:	f000 fce2 	bl	800135c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000998:	f000 f93a 	bl	8000c10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800099c:	f000 f9f8 	bl	8000d90 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80009a0:	f000 f9c6 	bl	8000d30 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 80009a4:	f000 f986 	bl	8000cb4 <MX_SPI3_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_Delay(5000);
 80009a8:	f241 3088 	movw	r0, #5000	; 0x1388
 80009ac:	f000 fd52 	bl	8001454 <HAL_Delay>
	  acc_example_service_envelope(0, NULL);
 80009b0:	1d3b      	adds	r3, r7, #4
 80009b2:	469c      	mov	ip, r3
 80009b4:	2100      	movs	r1, #0
 80009b6:	2000      	movs	r0, #0
 80009b8:	f000 f826 	bl	8000a08 <acc_example_service_envelope.0>
	  HAL_Delay(5000);
 80009bc:	e7f4      	b.n	80009a8 <main+0x20>
	...

080009c0 <print_data.2>:
	{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b086      	sub	sp, #24
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	60f8      	str	r0, [r7, #12]
 80009c8:	460b      	mov	r3, r1
 80009ca:	817b      	strh	r3, [r7, #10]
 80009cc:	f8c7 c004 	str.w	ip, [r7, #4]
		for (uint16_t i = 0; i < data_length; i++)
 80009d0:	2300      	movs	r3, #0
 80009d2:	82fb      	strh	r3, [r7, #22]
 80009d4:	e00b      	b.n	80009ee <print_data.2+0x2e>
			printf("%6u", (unsigned int)(data[i]));
 80009d6:	8afb      	ldrh	r3, [r7, #22]
 80009d8:	005b      	lsls	r3, r3, #1
 80009da:	68fa      	ldr	r2, [r7, #12]
 80009dc:	4413      	add	r3, r2
 80009de:	881b      	ldrh	r3, [r3, #0]
 80009e0:	4619      	mov	r1, r3
 80009e2:	4808      	ldr	r0, [pc, #32]	; (8000a04 <print_data.2+0x44>)
 80009e4:	f00c fa40 	bl	800ce68 <iprintf>
		for (uint16_t i = 0; i < data_length; i++)
 80009e8:	8afb      	ldrh	r3, [r7, #22]
 80009ea:	3301      	adds	r3, #1
 80009ec:	82fb      	strh	r3, [r7, #22]
 80009ee:	8afa      	ldrh	r2, [r7, #22]
 80009f0:	897b      	ldrh	r3, [r7, #10]
 80009f2:	429a      	cmp	r2, r3
 80009f4:	d3ef      	bcc.n	80009d6 <print_data.2+0x16>
		printf("\n");
 80009f6:	200a      	movs	r0, #10
 80009f8:	f00c fa48 	bl	800ce8c <putchar>
	}
 80009fc:	bf00      	nop
 80009fe:	3718      	adds	r7, #24
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	0800e1a4 	.word	0x0800e1a4

08000a08 <acc_example_service_envelope.0>:
	{
 8000a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a0c:	b094      	sub	sp, #80	; 0x50
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	60f8      	str	r0, [r7, #12]
 8000a12:	60b9      	str	r1, [r7, #8]
 8000a14:	4666      	mov	r6, ip
 8000a16:	f8c7 c004 	str.w	ip, [r7, #4]
 8000a1a:	466b      	mov	r3, sp
 8000a1c:	469a      	mov	sl, r3
		const acc_hal_t *hal = acc_hal_integration_get_implementation();
 8000a1e:	f7ff fecf 	bl	80007c0 <acc_hal_integration_get_implementation>
 8000a22:	6478      	str	r0, [r7, #68]	; 0x44
		if (!acc_rss_activate(hal))
 8000a24:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000a26:	f003 fd39 	bl	800449c <acc_rss_activate>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	f083 0301 	eor.w	r3, r3, #1
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d004      	beq.n	8000a40 <acc_example_service_envelope.0+0x38>
			printf("acc_rss_activate() failed\n");
 8000a36:	4870      	ldr	r0, [pc, #448]	; (8000bf8 <acc_example_service_envelope.0+0x1f0>)
 8000a38:	f00c fa84 	bl	800cf44 <puts>
			return EXIT_FAILURE;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	e0d4      	b.n	8000bea <acc_example_service_envelope.0+0x1e2>
		acc_service_configuration_t envelope_configuration = acc_service_envelope_configuration_create();
 8000a40:	f004 f886 	bl	8004b50 <acc_service_envelope_configuration_create>
 8000a44:	4603      	mov	r3, r0
 8000a46:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (envelope_configuration == NULL)
 8000a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d106      	bne.n	8000a5c <acc_example_service_envelope.0+0x54>
			printf("acc_service_envelope_configuration_create() failed\n");
 8000a4e:	486b      	ldr	r0, [pc, #428]	; (8000bfc <acc_example_service_envelope.0+0x1f4>)
 8000a50:	f00c fa78 	bl	800cf44 <puts>
			acc_rss_deactivate();
 8000a54:	f003 fd60 	bl	8004518 <acc_rss_deactivate>
			return EXIT_FAILURE;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	e0c6      	b.n	8000bea <acc_example_service_envelope.0+0x1e2>
		update_configuration(envelope_configuration);
 8000a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a5e:	46b4      	mov	ip, r6
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff ff71 	bl	8000948 <update_configuration.1>
		acc_service_handle_t handle = acc_service_create(envelope_configuration);
 8000a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f004 f991 	bl	8004d90 <acc_service_create>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	62bb      	str	r3, [r7, #40]	; 0x28
		if (handle == NULL)
 8000a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d10b      	bne.n	8000a90 <acc_example_service_envelope.0+0x88>
			printf("acc_service_create() failed\n");
 8000a78:	4861      	ldr	r0, [pc, #388]	; (8000c00 <acc_example_service_envelope.0+0x1f8>)
 8000a7a:	f00c fa63 	bl	800cf44 <puts>
			acc_service_envelope_configuration_destroy(&envelope_configuration);
 8000a7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a82:	4618      	mov	r0, r3
 8000a84:	f004 f8f2 	bl	8004c6c <acc_service_envelope_configuration_destroy>
			acc_rss_deactivate();
 8000a88:	f003 fd46 	bl	8004518 <acc_rss_deactivate>
			return EXIT_FAILURE;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	e0ac      	b.n	8000bea <acc_example_service_envelope.0+0x1e2>
		acc_service_envelope_configuration_destroy(&envelope_configuration);
 8000a90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a94:	4618      	mov	r0, r3
 8000a96:	f004 f8e9 	bl	8004c6c <acc_service_envelope_configuration_destroy>
		acc_service_envelope_metadata_t envelope_metadata = { 0 };
 8000a9a:	f107 0318 	add.w	r3, r7, #24
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	605a      	str	r2, [r3, #4]
 8000aa4:	609a      	str	r2, [r3, #8]
 8000aa6:	60da      	str	r2, [r3, #12]
		acc_service_envelope_get_metadata(handle, &envelope_metadata);
 8000aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aaa:	f107 0218 	add.w	r2, r7, #24
 8000aae:	4611      	mov	r1, r2
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f004 f8ed 	bl	8004c90 <acc_service_envelope_get_metadata>
		if (!acc_service_activate(handle))
 8000ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f003 fde5 	bl	8004688 <acc_service_activate>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	f083 0301 	eor.w	r3, r3, #1
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d00b      	beq.n	8000ae2 <acc_example_service_envelope.0+0xda>
			printf("acc_service_activate() failed\n");
 8000aca:	484e      	ldr	r0, [pc, #312]	; (8000c04 <acc_example_service_envelope.0+0x1fc>)
 8000acc:	f00c fa3a 	bl	800cf44 <puts>
			acc_service_destroy(&handle);
 8000ad0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f004 f9cf 	bl	8004e78 <acc_service_destroy>
			acc_rss_deactivate();
 8000ada:	f003 fd1d 	bl	8004518 <acc_rss_deactivate>
			return EXIT_FAILURE;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	e083      	b.n	8000bea <acc_example_service_envelope.0+0x1e2>
		bool                               success    = true;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		const int                          iterations = 5;
 8000ae8:	2305      	movs	r3, #5
 8000aea:	643b      	str	r3, [r7, #64]	; 0x40
		uint16_t                           data[envelope_metadata.data_length];
 8000aec:	8c39      	ldrh	r1, [r7, #32]
 8000aee:	460b      	mov	r3, r1
 8000af0:	3b01      	subs	r3, #1
 8000af2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000af4:	b28b      	uxth	r3, r1
 8000af6:	2200      	movs	r2, #0
 8000af8:	4698      	mov	r8, r3
 8000afa:	4691      	mov	r9, r2
 8000afc:	f04f 0200 	mov.w	r2, #0
 8000b00:	f04f 0300 	mov.w	r3, #0
 8000b04:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8000b08:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8000b0c:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8000b10:	b28b      	uxth	r3, r1
 8000b12:	2200      	movs	r2, #0
 8000b14:	461c      	mov	r4, r3
 8000b16:	4615      	mov	r5, r2
 8000b18:	f04f 0200 	mov.w	r2, #0
 8000b1c:	f04f 0300 	mov.w	r3, #0
 8000b20:	012b      	lsls	r3, r5, #4
 8000b22:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000b26:	0122      	lsls	r2, r4, #4
 8000b28:	460b      	mov	r3, r1
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	3307      	adds	r3, #7
 8000b2e:	08db      	lsrs	r3, r3, #3
 8000b30:	00db      	lsls	r3, r3, #3
 8000b32:	ebad 0d03 	sub.w	sp, sp, r3
 8000b36:	466b      	mov	r3, sp
 8000b38:	3301      	adds	r3, #1
 8000b3a:	085b      	lsrs	r3, r3, #1
 8000b3c:	005b      	lsls	r3, r3, #1
 8000b3e:	63bb      	str	r3, [r7, #56]	; 0x38
		for (int i = 0; i < iterations; i++)
 8000b40:	2300      	movs	r3, #0
 8000b42:	64bb      	str	r3, [r7, #72]	; 0x48
 8000b44:	e032      	b.n	8000bac <acc_example_service_envelope.0+0x1a4>
			success = acc_service_envelope_get_next(handle, data, envelope_metadata.data_length, &result_info);
 8000b46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000b48:	8c3a      	ldrh	r2, [r7, #32]
 8000b4a:	f107 0314 	add.w	r3, r7, #20
 8000b4e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000b50:	f004 f8c0 	bl	8004cd4 <acc_service_envelope_get_next>
 8000b54:	4603      	mov	r3, r0
 8000b56:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			if (!success)
 8000b5a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000b5e:	f083 0301 	eor.w	r3, r3, #1
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d126      	bne.n	8000bb6 <acc_example_service_envelope.0+0x1ae>
			int* peaks = mutliple_peak_detection(data, envelope_metadata.data_length);
 8000b68:	8c3b      	ldrh	r3, [r7, #32]
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000b6e:	f000 f9a6 	bl	8000ebe <mutliple_peak_detection>
 8000b72:	6378      	str	r0, [r7, #52]	; 0x34
			print_data(data, envelope_metadata.data_length);
 8000b74:	8c3b      	ldrh	r3, [r7, #32]
 8000b76:	46b4      	mov	ip, r6
 8000b78:	4619      	mov	r1, r3
 8000b7a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000b7c:	f7ff ff20 	bl	80009c0 <print_data.2>
			printf("Peaks ");
 8000b80:	4821      	ldr	r0, [pc, #132]	; (8000c08 <acc_example_service_envelope.0+0x200>)
 8000b82:	f00c f971 	bl	800ce68 <iprintf>
			printf("%6u ", (unsigned int)(peaks[0]));
 8000b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	481f      	ldr	r0, [pc, #124]	; (8000c0c <acc_example_service_envelope.0+0x204>)
 8000b8e:	f00c f96b 	bl	800ce68 <iprintf>
			printf("%6u ", (unsigned int)(peaks[1]));
 8000b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b94:	3304      	adds	r3, #4
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4619      	mov	r1, r3
 8000b9a:	481c      	ldr	r0, [pc, #112]	; (8000c0c <acc_example_service_envelope.0+0x204>)
 8000b9c:	f00c f964 	bl	800ce68 <iprintf>
			printf("\n");
 8000ba0:	200a      	movs	r0, #10
 8000ba2:	f00c f973 	bl	800ce8c <putchar>
		for (int i = 0; i < iterations; i++)
 8000ba6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ba8:	3301      	adds	r3, #1
 8000baa:	64bb      	str	r3, [r7, #72]	; 0x48
 8000bac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000bae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	dbc8      	blt.n	8000b46 <acc_example_service_envelope.0+0x13e>
 8000bb4:	e000      	b.n	8000bb8 <acc_example_service_envelope.0+0x1b0>
				break;
 8000bb6:	bf00      	nop
		bool deactivated = acc_service_deactivate(handle);
 8000bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f003 fda6 	bl	800470c <acc_service_deactivate>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		acc_service_destroy(&handle);
 8000bc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f004 f954 	bl	8004e78 <acc_service_destroy>
		acc_rss_deactivate();
 8000bd0:	f003 fca2 	bl	8004518 <acc_rss_deactivate>
		if (deactivated && success)
 8000bd4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d005      	beq.n	8000be8 <acc_example_service_envelope.0+0x1e0>
 8000bdc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <acc_example_service_envelope.0+0x1e0>
			return EXIT_SUCCESS;
 8000be4:	2300      	movs	r3, #0
 8000be6:	e000      	b.n	8000bea <acc_example_service_envelope.0+0x1e2>
		return EXIT_FAILURE;
 8000be8:	2301      	movs	r3, #1
 8000bea:	46d5      	mov	sp, sl
	}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3750      	adds	r7, #80	; 0x50
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf6:	bf00      	nop
 8000bf8:	0800e1a8 	.word	0x0800e1a8
 8000bfc:	0800e1c4 	.word	0x0800e1c4
 8000c00:	0800e1f8 	.word	0x0800e1f8
 8000c04:	0800e214 	.word	0x0800e214
 8000c08:	0800e234 	.word	0x0800e234
 8000c0c:	0800e23c 	.word	0x0800e23c

08000c10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b096      	sub	sp, #88	; 0x58
 8000c14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c16:	f107 0314 	add.w	r3, r7, #20
 8000c1a:	2244      	movs	r2, #68	; 0x44
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f00c fac4 	bl	800d1ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c24:	463b      	mov	r3, r7
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	605a      	str	r2, [r3, #4]
 8000c2c:	609a      	str	r2, [r3, #8]
 8000c2e:	60da      	str	r2, [r3, #12]
 8000c30:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c32:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c36:	f000 ff4f 	bl	8001ad8 <HAL_PWREx_ControlVoltageScaling>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000c40:	f000 f938 	bl	8000eb4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c44:	2302      	movs	r3, #2
 8000c46:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c4c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c4e:	2310      	movs	r3, #16
 8000c50:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c52:	2302      	movs	r3, #2
 8000c54:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c56:	2302      	movs	r3, #2
 8000c58:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000c5e:	230a      	movs	r3, #10
 8000c60:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000c62:	2307      	movs	r3, #7
 8000c64:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c66:	2302      	movs	r3, #2
 8000c68:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c6e:	f107 0314 	add.w	r3, r7, #20
 8000c72:	4618      	mov	r0, r3
 8000c74:	f000 ff86 	bl	8001b84 <HAL_RCC_OscConfig>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000c7e:	f000 f919 	bl	8000eb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c82:	230f      	movs	r3, #15
 8000c84:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c86:	2303      	movs	r3, #3
 8000c88:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c92:	2300      	movs	r3, #0
 8000c94:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c96:	463b      	mov	r3, r7
 8000c98:	2104      	movs	r1, #4
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f001 fb4e 	bl	800233c <HAL_RCC_ClockConfig>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000ca6:	f000 f905 	bl	8000eb4 <Error_Handler>
  }
}
 8000caa:	bf00      	nop
 8000cac:	3758      	adds	r7, #88	; 0x58
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
	...

08000cb4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000cb8:	4b1b      	ldr	r3, [pc, #108]	; (8000d28 <MX_SPI3_Init+0x74>)
 8000cba:	4a1c      	ldr	r2, [pc, #112]	; (8000d2c <MX_SPI3_Init+0x78>)
 8000cbc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000cbe:	4b1a      	ldr	r3, [pc, #104]	; (8000d28 <MX_SPI3_Init+0x74>)
 8000cc0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cc4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000cc6:	4b18      	ldr	r3, [pc, #96]	; (8000d28 <MX_SPI3_Init+0x74>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ccc:	4b16      	ldr	r3, [pc, #88]	; (8000d28 <MX_SPI3_Init+0x74>)
 8000cce:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000cd2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cd4:	4b14      	ldr	r3, [pc, #80]	; (8000d28 <MX_SPI3_Init+0x74>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cda:	4b13      	ldr	r3, [pc, #76]	; (8000d28 <MX_SPI3_Init+0x74>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000ce0:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <MX_SPI3_Init+0x74>)
 8000ce2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ce6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000ce8:	4b0f      	ldr	r3, [pc, #60]	; (8000d28 <MX_SPI3_Init+0x74>)
 8000cea:	2228      	movs	r2, #40	; 0x28
 8000cec:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cee:	4b0e      	ldr	r3, [pc, #56]	; (8000d28 <MX_SPI3_Init+0x74>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cf4:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <MX_SPI3_Init+0x74>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cfa:	4b0b      	ldr	r3, [pc, #44]	; (8000d28 <MX_SPI3_Init+0x74>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000d00:	4b09      	ldr	r3, [pc, #36]	; (8000d28 <MX_SPI3_Init+0x74>)
 8000d02:	2207      	movs	r2, #7
 8000d04:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d06:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <MX_SPI3_Init+0x74>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d0c:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <MX_SPI3_Init+0x74>)
 8000d0e:	2208      	movs	r2, #8
 8000d10:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000d12:	4805      	ldr	r0, [pc, #20]	; (8000d28 <MX_SPI3_Init+0x74>)
 8000d14:	f002 f9f2 	bl	80030fc <HAL_SPI_Init>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000d1e:	f000 f8c9 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000d22:	bf00      	nop
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	20000204 	.word	0x20000204
 8000d2c:	40003c00 	.word	0x40003c00

08000d30 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d34:	4b14      	ldr	r3, [pc, #80]	; (8000d88 <MX_USART2_UART_Init+0x58>)
 8000d36:	4a15      	ldr	r2, [pc, #84]	; (8000d8c <MX_USART2_UART_Init+0x5c>)
 8000d38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d3a:	4b13      	ldr	r3, [pc, #76]	; (8000d88 <MX_USART2_UART_Init+0x58>)
 8000d3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d42:	4b11      	ldr	r3, [pc, #68]	; (8000d88 <MX_USART2_UART_Init+0x58>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d48:	4b0f      	ldr	r3, [pc, #60]	; (8000d88 <MX_USART2_UART_Init+0x58>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d4e:	4b0e      	ldr	r3, [pc, #56]	; (8000d88 <MX_USART2_UART_Init+0x58>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d54:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <MX_USART2_UART_Init+0x58>)
 8000d56:	220c      	movs	r2, #12
 8000d58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d5a:	4b0b      	ldr	r3, [pc, #44]	; (8000d88 <MX_USART2_UART_Init+0x58>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d60:	4b09      	ldr	r3, [pc, #36]	; (8000d88 <MX_USART2_UART_Init+0x58>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d66:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <MX_USART2_UART_Init+0x58>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d6c:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <MX_USART2_UART_Init+0x58>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d72:	4805      	ldr	r0, [pc, #20]	; (8000d88 <MX_USART2_UART_Init+0x58>)
 8000d74:	f002 fdec 	bl	8003950 <HAL_UART_Init>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d7e:	f000 f899 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20000268 	.word	0x20000268
 8000d8c:	40004400 	.word	0x40004400

08000d90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b08a      	sub	sp, #40	; 0x28
 8000d94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d96:	f107 0314 	add.w	r3, r7, #20
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	605a      	str	r2, [r3, #4]
 8000da0:	609a      	str	r2, [r3, #8]
 8000da2:	60da      	str	r2, [r3, #12]
 8000da4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000da6:	4b40      	ldr	r3, [pc, #256]	; (8000ea8 <MX_GPIO_Init+0x118>)
 8000da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000daa:	4a3f      	ldr	r2, [pc, #252]	; (8000ea8 <MX_GPIO_Init+0x118>)
 8000dac:	f043 0304 	orr.w	r3, r3, #4
 8000db0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000db2:	4b3d      	ldr	r3, [pc, #244]	; (8000ea8 <MX_GPIO_Init+0x118>)
 8000db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db6:	f003 0304 	and.w	r3, r3, #4
 8000dba:	613b      	str	r3, [r7, #16]
 8000dbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dbe:	4b3a      	ldr	r3, [pc, #232]	; (8000ea8 <MX_GPIO_Init+0x118>)
 8000dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc2:	4a39      	ldr	r2, [pc, #228]	; (8000ea8 <MX_GPIO_Init+0x118>)
 8000dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dca:	4b37      	ldr	r3, [pc, #220]	; (8000ea8 <MX_GPIO_Init+0x118>)
 8000dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd6:	4b34      	ldr	r3, [pc, #208]	; (8000ea8 <MX_GPIO_Init+0x118>)
 8000dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dda:	4a33      	ldr	r2, [pc, #204]	; (8000ea8 <MX_GPIO_Init+0x118>)
 8000ddc:	f043 0301 	orr.w	r3, r3, #1
 8000de0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000de2:	4b31      	ldr	r3, [pc, #196]	; (8000ea8 <MX_GPIO_Init+0x118>)
 8000de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	60bb      	str	r3, [r7, #8]
 8000dec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dee:	4b2e      	ldr	r3, [pc, #184]	; (8000ea8 <MX_GPIO_Init+0x118>)
 8000df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df2:	4a2d      	ldr	r2, [pc, #180]	; (8000ea8 <MX_GPIO_Init+0x118>)
 8000df4:	f043 0302 	orr.w	r3, r3, #2
 8000df8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dfa:	4b2b      	ldr	r3, [pc, #172]	; (8000ea8 <MX_GPIO_Init+0x118>)
 8000dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfe:	f003 0302 	and.w	r3, r3, #2
 8000e02:	607b      	str	r3, [r7, #4]
 8000e04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e06:	2200      	movs	r2, #0
 8000e08:	2120      	movs	r1, #32
 8000e0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e0e:	f000 fe19 	bl	8001a44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A111_ENABLE_Pin|A111_CS_N_Pin, GPIO_PIN_RESET);
 8000e12:	2200      	movs	r2, #0
 8000e14:	2160      	movs	r1, #96	; 0x60
 8000e16:	4825      	ldr	r0, [pc, #148]	; (8000eac <MX_GPIO_Init+0x11c>)
 8000e18:	f000 fe14 	bl	8001a44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e22:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e2c:	f107 0314 	add.w	r3, r7, #20
 8000e30:	4619      	mov	r1, r3
 8000e32:	481f      	ldr	r0, [pc, #124]	; (8000eb0 <MX_GPIO_Init+0x120>)
 8000e34:	f000 fc44 	bl	80016c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e38:	2320      	movs	r3, #32
 8000e3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e44:	2300      	movs	r3, #0
 8000e46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e48:	f107 0314 	add.w	r3, r7, #20
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e52:	f000 fc35 	bl	80016c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : A111_SENSOR_INTERRUPT_Pin */
  GPIO_InitStruct.Pin = A111_SENSOR_INTERRUPT_Pin;
 8000e56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e5c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(A111_SENSOR_INTERRUPT_GPIO_Port, &GPIO_InitStruct);
 8000e66:	f107 0314 	add.w	r3, r7, #20
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e70:	f000 fc26 	bl	80016c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : A111_ENABLE_Pin A111_CS_N_Pin */
  GPIO_InitStruct.Pin = A111_ENABLE_Pin|A111_CS_N_Pin;
 8000e74:	2360      	movs	r3, #96	; 0x60
 8000e76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e80:	2300      	movs	r3, #0
 8000e82:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e84:	f107 0314 	add.w	r3, r7, #20
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4808      	ldr	r0, [pc, #32]	; (8000eac <MX_GPIO_Init+0x11c>)
 8000e8c:	f000 fc18 	bl	80016c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000e90:	2200      	movs	r2, #0
 8000e92:	2100      	movs	r1, #0
 8000e94:	2017      	movs	r0, #23
 8000e96:	f000 fbdc 	bl	8001652 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000e9a:	2017      	movs	r0, #23
 8000e9c:	f000 fbf5 	bl	800168a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ea0:	bf00      	nop
 8000ea2:	3728      	adds	r7, #40	; 0x28
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	40021000 	.word	0x40021000
 8000eac:	48000400 	.word	0x48000400
 8000eb0:	48000800 	.word	0x48000800

08000eb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000eb8:	b672      	cpsid	i
}
 8000eba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ebc:	e7fe      	b.n	8000ebc <Error_Handler+0x8>

08000ebe <mutliple_peak_detection>:

struct Tuple{
	int index;
	uint16_t value;
};
int* mutliple_peak_detection(uint16_t *data, uint16_t data_length){
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b08c      	sub	sp, #48	; 0x30
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	807b      	strh	r3, [r7, #2]

	uint16_t sum = 0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	85fb      	strh	r3, [r7, #46]	; 0x2e
	for (int i = 0; i < data_length; i++){
 8000ece:	2300      	movs	r3, #0
 8000ed0:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ed2:	e00a      	b.n	8000eea <mutliple_peak_detection+0x2c>
		sum = sum + data[i];
 8000ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	687a      	ldr	r2, [r7, #4]
 8000eda:	4413      	add	r3, r2
 8000edc:	881a      	ldrh	r2, [r3, #0]
 8000ede:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000ee0:	4413      	add	r3, r2
 8000ee2:	85fb      	strh	r3, [r7, #46]	; 0x2e
	for (int i = 0; i < data_length; i++){
 8000ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	62bb      	str	r3, [r7, #40]	; 0x28
 8000eea:	887b      	ldrh	r3, [r7, #2]
 8000eec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	dbf0      	blt.n	8000ed4 <mutliple_peak_detection+0x16>

	}
	uint16_t baseline = sum/data_length;
 8000ef2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000ef4:	887b      	ldrh	r3, [r7, #2]
 8000ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000efa:	847b      	strh	r3, [r7, #34]	; 0x22
	struct Tuple peaks[] = {
 8000efc:	f107 030c 	add.w	r3, r7, #12
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
						   {0,0},
						   {0,0}
	};

	for (int i = 0;i<data_length-5;i++){
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	627b      	str	r3, [r7, #36]	; 0x24
 8000f0e:	e055      	b.n	8000fbc <mutliple_peak_detection+0xfe>
		if (data[i] > data[i-1] && data[i] > data[i+5]&& data[i] > 1000){
 8000f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	687a      	ldr	r2, [r7, #4]
 8000f16:	4413      	add	r3, r2
 8000f18:	881a      	ldrh	r2, [r3, #0]
 8000f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f1c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8000f20:	3b01      	subs	r3, #1
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	6879      	ldr	r1, [r7, #4]
 8000f26:	440b      	add	r3, r1
 8000f28:	881b      	ldrh	r3, [r3, #0]
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	d943      	bls.n	8000fb6 <mutliple_peak_detection+0xf8>
 8000f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	4413      	add	r3, r2
 8000f36:	881a      	ldrh	r2, [r3, #0]
 8000f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f3a:	3305      	adds	r3, #5
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	6879      	ldr	r1, [r7, #4]
 8000f40:	440b      	add	r3, r1
 8000f42:	881b      	ldrh	r3, [r3, #0]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d936      	bls.n	8000fb6 <mutliple_peak_detection+0xf8>
 8000f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	4413      	add	r3, r2
 8000f50:	881b      	ldrh	r3, [r3, #0]
 8000f52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f56:	d92e      	bls.n	8000fb6 <mutliple_peak_detection+0xf8>
			if (data[i] > peaks[0].value){
 8000f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	4413      	add	r3, r2
 8000f60:	881a      	ldrh	r2, [r3, #0]
 8000f62:	8a3b      	ldrh	r3, [r7, #16]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d911      	bls.n	8000f8c <mutliple_peak_detection+0xce>
				if (i - peaks[0].index > 10){
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f6c:	1ad3      	subs	r3, r2, r3
 8000f6e:	2b0a      	cmp	r3, #10
 8000f70:	dd03      	ble.n	8000f7a <mutliple_peak_detection+0xbc>
					peaks[1].index = peaks[0].index;
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	617b      	str	r3, [r7, #20]
					peaks[1].value = peaks[0].value;
 8000f76:	8a3b      	ldrh	r3, [r7, #16]
 8000f78:	833b      	strh	r3, [r7, #24]
				}
				peaks[0].index = i;
 8000f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f7c:	60fb      	str	r3, [r7, #12]
				peaks[0].value = data[i];
 8000f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	687a      	ldr	r2, [r7, #4]
 8000f84:	4413      	add	r3, r2
 8000f86:	881b      	ldrh	r3, [r3, #0]
 8000f88:	823b      	strh	r3, [r7, #16]
 8000f8a:	e014      	b.n	8000fb6 <mutliple_peak_detection+0xf8>
			}

			else if (data[i] > peaks[1].value && i - peaks[0].index > 10){
 8000f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	687a      	ldr	r2, [r7, #4]
 8000f92:	4413      	add	r3, r2
 8000f94:	881a      	ldrh	r2, [r3, #0]
 8000f96:	8b3b      	ldrh	r3, [r7, #24]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d90c      	bls.n	8000fb6 <mutliple_peak_detection+0xf8>
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	2b0a      	cmp	r3, #10
 8000fa4:	dd07      	ble.n	8000fb6 <mutliple_peak_detection+0xf8>
				peaks[1].index = i;
 8000fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa8:	617b      	str	r3, [r7, #20]
				peaks[1].value = data[i];
 8000faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	687a      	ldr	r2, [r7, #4]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	881b      	ldrh	r3, [r3, #0]
 8000fb4:	833b      	strh	r3, [r7, #24]
	for (int i = 0;i<data_length-5;i++){
 8000fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb8:	3301      	adds	r3, #1
 8000fba:	627b      	str	r3, [r7, #36]	; 0x24
 8000fbc:	887b      	ldrh	r3, [r7, #2]
 8000fbe:	3b05      	subs	r3, #5
 8000fc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	dba4      	blt.n	8000f10 <mutliple_peak_detection+0x52>
			}
		}
	}
	int* peakIndexes = (int*)malloc(2 * sizeof(int));
 8000fc6:	2008      	movs	r0, #8
 8000fc8:	f00b fd20 	bl	800ca0c <malloc>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	61fb      	str	r3, [r7, #28]

	peakIndexes[0] = peaks[0].index;
 8000fd0:	68fa      	ldr	r2, [r7, #12]
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	601a      	str	r2, [r3, #0]
	peakIndexes[1] = peaks[1].index;
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	3304      	adds	r3, #4
 8000fda:	697a      	ldr	r2, [r7, #20]
 8000fdc:	601a      	str	r2, [r3, #0]

	return peakIndexes;
 8000fde:	69fb      	ldr	r3, [r7, #28]



}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3730      	adds	r7, #48	; 0x30
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fee:	4b0f      	ldr	r3, [pc, #60]	; (800102c <HAL_MspInit+0x44>)
 8000ff0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ff2:	4a0e      	ldr	r2, [pc, #56]	; (800102c <HAL_MspInit+0x44>)
 8000ff4:	f043 0301 	orr.w	r3, r3, #1
 8000ff8:	6613      	str	r3, [r2, #96]	; 0x60
 8000ffa:	4b0c      	ldr	r3, [pc, #48]	; (800102c <HAL_MspInit+0x44>)
 8000ffc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ffe:	f003 0301 	and.w	r3, r3, #1
 8001002:	607b      	str	r3, [r7, #4]
 8001004:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001006:	4b09      	ldr	r3, [pc, #36]	; (800102c <HAL_MspInit+0x44>)
 8001008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800100a:	4a08      	ldr	r2, [pc, #32]	; (800102c <HAL_MspInit+0x44>)
 800100c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001010:	6593      	str	r3, [r2, #88]	; 0x58
 8001012:	4b06      	ldr	r3, [pc, #24]	; (800102c <HAL_MspInit+0x44>)
 8001014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800101a:	603b      	str	r3, [r7, #0]
 800101c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800101e:	bf00      	nop
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	40021000 	.word	0x40021000

08001030 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b08a      	sub	sp, #40	; 0x28
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
 8001046:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a17      	ldr	r2, [pc, #92]	; (80010ac <HAL_SPI_MspInit+0x7c>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d128      	bne.n	80010a4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001052:	4b17      	ldr	r3, [pc, #92]	; (80010b0 <HAL_SPI_MspInit+0x80>)
 8001054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001056:	4a16      	ldr	r2, [pc, #88]	; (80010b0 <HAL_SPI_MspInit+0x80>)
 8001058:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800105c:	6593      	str	r3, [r2, #88]	; 0x58
 800105e:	4b14      	ldr	r3, [pc, #80]	; (80010b0 <HAL_SPI_MspInit+0x80>)
 8001060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001062:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001066:	613b      	str	r3, [r7, #16]
 8001068:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800106a:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <HAL_SPI_MspInit+0x80>)
 800106c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800106e:	4a10      	ldr	r2, [pc, #64]	; (80010b0 <HAL_SPI_MspInit+0x80>)
 8001070:	f043 0304 	orr.w	r3, r3, #4
 8001074:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001076:	4b0e      	ldr	r3, [pc, #56]	; (80010b0 <HAL_SPI_MspInit+0x80>)
 8001078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107a:	f003 0304 	and.w	r3, r3, #4
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = A111_SPI_SCK_Pin|A111_SPI_MISO_Pin|A111_SPI_MOSI_Pin;
 8001082:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001086:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001088:	2302      	movs	r3, #2
 800108a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001090:	2303      	movs	r3, #3
 8001092:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001094:	2306      	movs	r3, #6
 8001096:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001098:	f107 0314 	add.w	r3, r7, #20
 800109c:	4619      	mov	r1, r3
 800109e:	4805      	ldr	r0, [pc, #20]	; (80010b4 <HAL_SPI_MspInit+0x84>)
 80010a0:	f000 fb0e 	bl	80016c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80010a4:	bf00      	nop
 80010a6:	3728      	adds	r7, #40	; 0x28
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	40003c00 	.word	0x40003c00
 80010b0:	40021000 	.word	0x40021000
 80010b4:	48000800 	.word	0x48000800

080010b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b0ac      	sub	sp, #176	; 0xb0
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010d0:	f107 0314 	add.w	r3, r7, #20
 80010d4:	2288      	movs	r2, #136	; 0x88
 80010d6:	2100      	movs	r1, #0
 80010d8:	4618      	mov	r0, r3
 80010da:	f00c f867 	bl	800d1ac <memset>
  if(huart->Instance==USART2)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a21      	ldr	r2, [pc, #132]	; (8001168 <HAL_UART_MspInit+0xb0>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d13b      	bne.n	8001160 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80010e8:	2302      	movs	r3, #2
 80010ea:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80010ec:	2300      	movs	r3, #0
 80010ee:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010f0:	f107 0314 	add.w	r3, r7, #20
 80010f4:	4618      	mov	r0, r3
 80010f6:	f001 fb45 	bl	8002784 <HAL_RCCEx_PeriphCLKConfig>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001100:	f7ff fed8 	bl	8000eb4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001104:	4b19      	ldr	r3, [pc, #100]	; (800116c <HAL_UART_MspInit+0xb4>)
 8001106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001108:	4a18      	ldr	r2, [pc, #96]	; (800116c <HAL_UART_MspInit+0xb4>)
 800110a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800110e:	6593      	str	r3, [r2, #88]	; 0x58
 8001110:	4b16      	ldr	r3, [pc, #88]	; (800116c <HAL_UART_MspInit+0xb4>)
 8001112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001118:	613b      	str	r3, [r7, #16]
 800111a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800111c:	4b13      	ldr	r3, [pc, #76]	; (800116c <HAL_UART_MspInit+0xb4>)
 800111e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001120:	4a12      	ldr	r2, [pc, #72]	; (800116c <HAL_UART_MspInit+0xb4>)
 8001122:	f043 0301 	orr.w	r3, r3, #1
 8001126:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001128:	4b10      	ldr	r3, [pc, #64]	; (800116c <HAL_UART_MspInit+0xb4>)
 800112a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112c:	f003 0301 	and.w	r3, r3, #1
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001134:	230c      	movs	r3, #12
 8001136:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113a:	2302      	movs	r3, #2
 800113c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001146:	2303      	movs	r3, #3
 8001148:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800114c:	2307      	movs	r3, #7
 800114e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001152:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001156:	4619      	mov	r1, r3
 8001158:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800115c:	f000 fab0 	bl	80016c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001160:	bf00      	nop
 8001162:	37b0      	adds	r7, #176	; 0xb0
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	40004400 	.word	0x40004400
 800116c:	40021000 	.word	0x40021000

08001170 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001174:	e7fe      	b.n	8001174 <NMI_Handler+0x4>

08001176 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001176:	b480      	push	{r7}
 8001178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800117a:	e7fe      	b.n	800117a <HardFault_Handler+0x4>

0800117c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001180:	e7fe      	b.n	8001180 <MemManage_Handler+0x4>

08001182 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001182:	b480      	push	{r7}
 8001184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001186:	e7fe      	b.n	8001186 <BusFault_Handler+0x4>

08001188 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800118c:	e7fe      	b.n	800118c <UsageFault_Handler+0x4>

0800118e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800118e:	b480      	push	{r7}
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr

080011aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011aa:	b480      	push	{r7}
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ae:	bf00      	nop
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011bc:	f000 f92a 	bl	8001414 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011c0:	bf00      	nop
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(A111_SENSOR_INTERRUPT_Pin);
 80011c8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80011cc:	f000 fc52 	bl	8001a74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80011d0:	bf00      	nop
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]
 80011e4:	e00a      	b.n	80011fc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011e6:	f3af 8000 	nop.w
 80011ea:	4601      	mov	r1, r0
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	1c5a      	adds	r2, r3, #1
 80011f0:	60ba      	str	r2, [r7, #8]
 80011f2:	b2ca      	uxtb	r2, r1
 80011f4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	3301      	adds	r3, #1
 80011fa:	617b      	str	r3, [r7, #20]
 80011fc:	697a      	ldr	r2, [r7, #20]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	429a      	cmp	r2, r3
 8001202:	dbf0      	blt.n	80011e6 <_read+0x12>
  }

  return len;
 8001204:	687b      	ldr	r3, [r7, #4]
}
 8001206:	4618      	mov	r0, r3
 8001208:	3718      	adds	r7, #24
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <_close>:
  }
  return len;
}

int _close(int file)
{
 800120e:	b480      	push	{r7}
 8001210:	b083      	sub	sp, #12
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001216:	f04f 33ff 	mov.w	r3, #4294967295
}
 800121a:	4618      	mov	r0, r3
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr

08001226 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001226:	b480      	push	{r7}
 8001228:	b083      	sub	sp, #12
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
 800122e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001236:	605a      	str	r2, [r3, #4]
  return 0;
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr

08001246 <_isatty>:

int _isatty(int file)
{
 8001246:	b480      	push	{r7}
 8001248:	b083      	sub	sp, #12
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800124e:	2301      	movs	r3, #1
}
 8001250:	4618      	mov	r0, r3
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800125c:	b480      	push	{r7}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001268:	2300      	movs	r3, #0
}
 800126a:	4618      	mov	r0, r3
 800126c:	3714      	adds	r7, #20
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
	...

08001278 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001280:	4a14      	ldr	r2, [pc, #80]	; (80012d4 <_sbrk+0x5c>)
 8001282:	4b15      	ldr	r3, [pc, #84]	; (80012d8 <_sbrk+0x60>)
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800128c:	4b13      	ldr	r3, [pc, #76]	; (80012dc <_sbrk+0x64>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d102      	bne.n	800129a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001294:	4b11      	ldr	r3, [pc, #68]	; (80012dc <_sbrk+0x64>)
 8001296:	4a12      	ldr	r2, [pc, #72]	; (80012e0 <_sbrk+0x68>)
 8001298:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800129a:	4b10      	ldr	r3, [pc, #64]	; (80012dc <_sbrk+0x64>)
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4413      	add	r3, r2
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d207      	bcs.n	80012b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012a8:	f00b ffde 	bl	800d268 <__errno>
 80012ac:	4603      	mov	r3, r0
 80012ae:	220c      	movs	r2, #12
 80012b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012b2:	f04f 33ff 	mov.w	r3, #4294967295
 80012b6:	e009      	b.n	80012cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012b8:	4b08      	ldr	r3, [pc, #32]	; (80012dc <_sbrk+0x64>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012be:	4b07      	ldr	r3, [pc, #28]	; (80012dc <_sbrk+0x64>)
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4413      	add	r3, r2
 80012c6:	4a05      	ldr	r2, [pc, #20]	; (80012dc <_sbrk+0x64>)
 80012c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012ca:	68fb      	ldr	r3, [r7, #12]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3718      	adds	r7, #24
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	20018000 	.word	0x20018000
 80012d8:	00000400 	.word	0x00000400
 80012dc:	200002f0 	.word	0x200002f0
 80012e0:	20000500 	.word	0x20000500

080012e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80012e8:	4b06      	ldr	r3, [pc, #24]	; (8001304 <SystemInit+0x20>)
 80012ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012ee:	4a05      	ldr	r2, [pc, #20]	; (8001304 <SystemInit+0x20>)
 80012f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001308:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001340 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800130c:	f7ff ffea 	bl	80012e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001310:	480c      	ldr	r0, [pc, #48]	; (8001344 <LoopForever+0x6>)
  ldr r1, =_edata
 8001312:	490d      	ldr	r1, [pc, #52]	; (8001348 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001314:	4a0d      	ldr	r2, [pc, #52]	; (800134c <LoopForever+0xe>)
  movs r3, #0
 8001316:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001318:	e002      	b.n	8001320 <LoopCopyDataInit>

0800131a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800131a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800131c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800131e:	3304      	adds	r3, #4

08001320 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001320:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001322:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001324:	d3f9      	bcc.n	800131a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001326:	4a0a      	ldr	r2, [pc, #40]	; (8001350 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001328:	4c0a      	ldr	r4, [pc, #40]	; (8001354 <LoopForever+0x16>)
  movs r3, #0
 800132a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800132c:	e001      	b.n	8001332 <LoopFillZerobss>

0800132e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800132e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001330:	3204      	adds	r2, #4

08001332 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001332:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001334:	d3fb      	bcc.n	800132e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001336:	f00b ff9d 	bl	800d274 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800133a:	f7ff fb25 	bl	8000988 <main>

0800133e <LoopForever>:

LoopForever:
    b LoopForever
 800133e:	e7fe      	b.n	800133e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001340:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001344:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001348:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 800134c:	080138f4 	.word	0x080138f4
  ldr r2, =_sbss
 8001350:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001354:	200004fc 	.word	0x200004fc

08001358 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001358:	e7fe      	b.n	8001358 <ADC1_2_IRQHandler>
	...

0800135c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001362:	2300      	movs	r3, #0
 8001364:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001366:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <HAL_Init+0x3c>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a0b      	ldr	r2, [pc, #44]	; (8001398 <HAL_Init+0x3c>)
 800136c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001370:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001372:	2003      	movs	r0, #3
 8001374:	f000 f962 	bl	800163c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001378:	2000      	movs	r0, #0
 800137a:	f000 f80f 	bl	800139c <HAL_InitTick>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d002      	beq.n	800138a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	71fb      	strb	r3, [r7, #7]
 8001388:	e001      	b.n	800138e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800138a:	f7ff fe2d 	bl	8000fe8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800138e:	79fb      	ldrb	r3, [r7, #7]
}
 8001390:	4618      	mov	r0, r3
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40022000 	.word	0x40022000

0800139c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013a4:	2300      	movs	r3, #0
 80013a6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80013a8:	4b17      	ldr	r3, [pc, #92]	; (8001408 <HAL_InitTick+0x6c>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d023      	beq.n	80013f8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80013b0:	4b16      	ldr	r3, [pc, #88]	; (800140c <HAL_InitTick+0x70>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	4b14      	ldr	r3, [pc, #80]	; (8001408 <HAL_InitTick+0x6c>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	4619      	mov	r1, r3
 80013ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013be:	fbb3 f3f1 	udiv	r3, r3, r1
 80013c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013c6:	4618      	mov	r0, r3
 80013c8:	f000 f96d 	bl	80016a6 <HAL_SYSTICK_Config>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d10f      	bne.n	80013f2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2b0f      	cmp	r3, #15
 80013d6:	d809      	bhi.n	80013ec <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013d8:	2200      	movs	r2, #0
 80013da:	6879      	ldr	r1, [r7, #4]
 80013dc:	f04f 30ff 	mov.w	r0, #4294967295
 80013e0:	f000 f937 	bl	8001652 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013e4:	4a0a      	ldr	r2, [pc, #40]	; (8001410 <HAL_InitTick+0x74>)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6013      	str	r3, [r2, #0]
 80013ea:	e007      	b.n	80013fc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	73fb      	strb	r3, [r7, #15]
 80013f0:	e004      	b.n	80013fc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	73fb      	strb	r3, [r7, #15]
 80013f6:	e001      	b.n	80013fc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80013fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3710      	adds	r7, #16
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	20000008 	.word	0x20000008
 800140c:	20000000 	.word	0x20000000
 8001410:	20000004 	.word	0x20000004

08001414 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001418:	4b06      	ldr	r3, [pc, #24]	; (8001434 <HAL_IncTick+0x20>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	461a      	mov	r2, r3
 800141e:	4b06      	ldr	r3, [pc, #24]	; (8001438 <HAL_IncTick+0x24>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4413      	add	r3, r2
 8001424:	4a04      	ldr	r2, [pc, #16]	; (8001438 <HAL_IncTick+0x24>)
 8001426:	6013      	str	r3, [r2, #0]
}
 8001428:	bf00      	nop
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	20000008 	.word	0x20000008
 8001438:	200002f4 	.word	0x200002f4

0800143c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  return uwTick;
 8001440:	4b03      	ldr	r3, [pc, #12]	; (8001450 <HAL_GetTick+0x14>)
 8001442:	681b      	ldr	r3, [r3, #0]
}
 8001444:	4618      	mov	r0, r3
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	200002f4 	.word	0x200002f4

08001454 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800145c:	f7ff ffee 	bl	800143c <HAL_GetTick>
 8001460:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800146c:	d005      	beq.n	800147a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800146e:	4b0a      	ldr	r3, [pc, #40]	; (8001498 <HAL_Delay+0x44>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	461a      	mov	r2, r3
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	4413      	add	r3, r2
 8001478:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800147a:	bf00      	nop
 800147c:	f7ff ffde 	bl	800143c <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	68fa      	ldr	r2, [r7, #12]
 8001488:	429a      	cmp	r2, r3
 800148a:	d8f7      	bhi.n	800147c <HAL_Delay+0x28>
  {
  }
}
 800148c:	bf00      	nop
 800148e:	bf00      	nop
 8001490:	3710      	adds	r7, #16
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20000008 	.word	0x20000008

0800149c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f003 0307 	and.w	r3, r3, #7
 80014aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014ac:	4b0c      	ldr	r3, [pc, #48]	; (80014e0 <__NVIC_SetPriorityGrouping+0x44>)
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014b2:	68ba      	ldr	r2, [r7, #8]
 80014b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014b8:	4013      	ands	r3, r2
 80014ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ce:	4a04      	ldr	r2, [pc, #16]	; (80014e0 <__NVIC_SetPriorityGrouping+0x44>)
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	60d3      	str	r3, [r2, #12]
}
 80014d4:	bf00      	nop
 80014d6:	3714      	adds	r7, #20
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	e000ed00 	.word	0xe000ed00

080014e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014e8:	4b04      	ldr	r3, [pc, #16]	; (80014fc <__NVIC_GetPriorityGrouping+0x18>)
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	0a1b      	lsrs	r3, r3, #8
 80014ee:	f003 0307 	and.w	r3, r3, #7
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	e000ed00 	.word	0xe000ed00

08001500 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800150a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150e:	2b00      	cmp	r3, #0
 8001510:	db0b      	blt.n	800152a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	f003 021f 	and.w	r2, r3, #31
 8001518:	4907      	ldr	r1, [pc, #28]	; (8001538 <__NVIC_EnableIRQ+0x38>)
 800151a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151e:	095b      	lsrs	r3, r3, #5
 8001520:	2001      	movs	r0, #1
 8001522:	fa00 f202 	lsl.w	r2, r0, r2
 8001526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800152a:	bf00      	nop
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	e000e100 	.word	0xe000e100

0800153c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	6039      	str	r1, [r7, #0]
 8001546:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154c:	2b00      	cmp	r3, #0
 800154e:	db0a      	blt.n	8001566 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	b2da      	uxtb	r2, r3
 8001554:	490c      	ldr	r1, [pc, #48]	; (8001588 <__NVIC_SetPriority+0x4c>)
 8001556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155a:	0112      	lsls	r2, r2, #4
 800155c:	b2d2      	uxtb	r2, r2
 800155e:	440b      	add	r3, r1
 8001560:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001564:	e00a      	b.n	800157c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	b2da      	uxtb	r2, r3
 800156a:	4908      	ldr	r1, [pc, #32]	; (800158c <__NVIC_SetPriority+0x50>)
 800156c:	79fb      	ldrb	r3, [r7, #7]
 800156e:	f003 030f 	and.w	r3, r3, #15
 8001572:	3b04      	subs	r3, #4
 8001574:	0112      	lsls	r2, r2, #4
 8001576:	b2d2      	uxtb	r2, r2
 8001578:	440b      	add	r3, r1
 800157a:	761a      	strb	r2, [r3, #24]
}
 800157c:	bf00      	nop
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	e000e100 	.word	0xe000e100
 800158c:	e000ed00 	.word	0xe000ed00

08001590 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001590:	b480      	push	{r7}
 8001592:	b089      	sub	sp, #36	; 0x24
 8001594:	af00      	add	r7, sp, #0
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	f003 0307 	and.w	r3, r3, #7
 80015a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	f1c3 0307 	rsb	r3, r3, #7
 80015aa:	2b04      	cmp	r3, #4
 80015ac:	bf28      	it	cs
 80015ae:	2304      	movcs	r3, #4
 80015b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	3304      	adds	r3, #4
 80015b6:	2b06      	cmp	r3, #6
 80015b8:	d902      	bls.n	80015c0 <NVIC_EncodePriority+0x30>
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	3b03      	subs	r3, #3
 80015be:	e000      	b.n	80015c2 <NVIC_EncodePriority+0x32>
 80015c0:	2300      	movs	r3, #0
 80015c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c4:	f04f 32ff 	mov.w	r2, #4294967295
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	43da      	mvns	r2, r3
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	401a      	ands	r2, r3
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015d8:	f04f 31ff 	mov.w	r1, #4294967295
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	fa01 f303 	lsl.w	r3, r1, r3
 80015e2:	43d9      	mvns	r1, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e8:	4313      	orrs	r3, r2
         );
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3724      	adds	r7, #36	; 0x24
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
	...

080015f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	3b01      	subs	r3, #1
 8001604:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001608:	d301      	bcc.n	800160e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800160a:	2301      	movs	r3, #1
 800160c:	e00f      	b.n	800162e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800160e:	4a0a      	ldr	r2, [pc, #40]	; (8001638 <SysTick_Config+0x40>)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	3b01      	subs	r3, #1
 8001614:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001616:	210f      	movs	r1, #15
 8001618:	f04f 30ff 	mov.w	r0, #4294967295
 800161c:	f7ff ff8e 	bl	800153c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001620:	4b05      	ldr	r3, [pc, #20]	; (8001638 <SysTick_Config+0x40>)
 8001622:	2200      	movs	r2, #0
 8001624:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001626:	4b04      	ldr	r3, [pc, #16]	; (8001638 <SysTick_Config+0x40>)
 8001628:	2207      	movs	r2, #7
 800162a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	e000e010 	.word	0xe000e010

0800163c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f7ff ff29 	bl	800149c <__NVIC_SetPriorityGrouping>
}
 800164a:	bf00      	nop
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b086      	sub	sp, #24
 8001656:	af00      	add	r7, sp, #0
 8001658:	4603      	mov	r3, r0
 800165a:	60b9      	str	r1, [r7, #8]
 800165c:	607a      	str	r2, [r7, #4]
 800165e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001660:	2300      	movs	r3, #0
 8001662:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001664:	f7ff ff3e 	bl	80014e4 <__NVIC_GetPriorityGrouping>
 8001668:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	68b9      	ldr	r1, [r7, #8]
 800166e:	6978      	ldr	r0, [r7, #20]
 8001670:	f7ff ff8e 	bl	8001590 <NVIC_EncodePriority>
 8001674:	4602      	mov	r2, r0
 8001676:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800167a:	4611      	mov	r1, r2
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff ff5d 	bl	800153c <__NVIC_SetPriority>
}
 8001682:	bf00      	nop
 8001684:	3718      	adds	r7, #24
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	b082      	sub	sp, #8
 800168e:	af00      	add	r7, sp, #0
 8001690:	4603      	mov	r3, r0
 8001692:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff ff31 	bl	8001500 <__NVIC_EnableIRQ>
}
 800169e:	bf00      	nop
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b082      	sub	sp, #8
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f7ff ffa2 	bl	80015f8 <SysTick_Config>
 80016b4:	4603      	mov	r3, r0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
	...

080016c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b087      	sub	sp, #28
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016ca:	2300      	movs	r3, #0
 80016cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016ce:	e17f      	b.n	80019d0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	2101      	movs	r1, #1
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	fa01 f303 	lsl.w	r3, r1, r3
 80016dc:	4013      	ands	r3, r2
 80016de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	f000 8171 	beq.w	80019ca <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f003 0303 	and.w	r3, r3, #3
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d005      	beq.n	8001700 <HAL_GPIO_Init+0x40>
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f003 0303 	and.w	r3, r3, #3
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d130      	bne.n	8001762 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	2203      	movs	r2, #3
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	43db      	mvns	r3, r3
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	4013      	ands	r3, r2
 8001716:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	68da      	ldr	r2, [r3, #12]
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	693a      	ldr	r2, [r7, #16]
 8001726:	4313      	orrs	r3, r2
 8001728:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	693a      	ldr	r2, [r7, #16]
 800172e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001736:	2201      	movs	r2, #1
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	43db      	mvns	r3, r3
 8001740:	693a      	ldr	r2, [r7, #16]
 8001742:	4013      	ands	r3, r2
 8001744:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	091b      	lsrs	r3, r3, #4
 800174c:	f003 0201 	and.w	r2, r3, #1
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	4313      	orrs	r3, r2
 800175a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f003 0303 	and.w	r3, r3, #3
 800176a:	2b03      	cmp	r3, #3
 800176c:	d118      	bne.n	80017a0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001772:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001774:	2201      	movs	r2, #1
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	43db      	mvns	r3, r3
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	4013      	ands	r3, r2
 8001782:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	08db      	lsrs	r3, r3, #3
 800178a:	f003 0201 	and.w	r2, r3, #1
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	693a      	ldr	r2, [r7, #16]
 8001796:	4313      	orrs	r3, r2
 8001798:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f003 0303 	and.w	r3, r3, #3
 80017a8:	2b03      	cmp	r3, #3
 80017aa:	d017      	beq.n	80017dc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	2203      	movs	r2, #3
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	43db      	mvns	r3, r3
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	4013      	ands	r3, r2
 80017c2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	689a      	ldr	r2, [r3, #8]
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	693a      	ldr	r2, [r7, #16]
 80017da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f003 0303 	and.w	r3, r3, #3
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d123      	bne.n	8001830 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	08da      	lsrs	r2, r3, #3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	3208      	adds	r2, #8
 80017f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	f003 0307 	and.w	r3, r3, #7
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	220f      	movs	r2, #15
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	43db      	mvns	r3, r3
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	4013      	ands	r3, r2
 800180a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	691a      	ldr	r2, [r3, #16]
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	f003 0307 	and.w	r3, r3, #7
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	693a      	ldr	r2, [r7, #16]
 800181e:	4313      	orrs	r3, r2
 8001820:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	08da      	lsrs	r2, r3, #3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	3208      	adds	r2, #8
 800182a:	6939      	ldr	r1, [r7, #16]
 800182c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	2203      	movs	r2, #3
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	43db      	mvns	r3, r3
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	4013      	ands	r3, r2
 8001846:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f003 0203 	and.w	r2, r3, #3
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	693a      	ldr	r2, [r7, #16]
 800185a:	4313      	orrs	r3, r2
 800185c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	693a      	ldr	r2, [r7, #16]
 8001862:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800186c:	2b00      	cmp	r3, #0
 800186e:	f000 80ac 	beq.w	80019ca <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001872:	4b5f      	ldr	r3, [pc, #380]	; (80019f0 <HAL_GPIO_Init+0x330>)
 8001874:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001876:	4a5e      	ldr	r2, [pc, #376]	; (80019f0 <HAL_GPIO_Init+0x330>)
 8001878:	f043 0301 	orr.w	r3, r3, #1
 800187c:	6613      	str	r3, [r2, #96]	; 0x60
 800187e:	4b5c      	ldr	r3, [pc, #368]	; (80019f0 <HAL_GPIO_Init+0x330>)
 8001880:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	60bb      	str	r3, [r7, #8]
 8001888:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800188a:	4a5a      	ldr	r2, [pc, #360]	; (80019f4 <HAL_GPIO_Init+0x334>)
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	089b      	lsrs	r3, r3, #2
 8001890:	3302      	adds	r3, #2
 8001892:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001896:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	f003 0303 	and.w	r3, r3, #3
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	220f      	movs	r2, #15
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	43db      	mvns	r3, r3
 80018a8:	693a      	ldr	r2, [r7, #16]
 80018aa:	4013      	ands	r3, r2
 80018ac:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80018b4:	d025      	beq.n	8001902 <HAL_GPIO_Init+0x242>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a4f      	ldr	r2, [pc, #316]	; (80019f8 <HAL_GPIO_Init+0x338>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d01f      	beq.n	80018fe <HAL_GPIO_Init+0x23e>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a4e      	ldr	r2, [pc, #312]	; (80019fc <HAL_GPIO_Init+0x33c>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d019      	beq.n	80018fa <HAL_GPIO_Init+0x23a>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4a4d      	ldr	r2, [pc, #308]	; (8001a00 <HAL_GPIO_Init+0x340>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d013      	beq.n	80018f6 <HAL_GPIO_Init+0x236>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4a4c      	ldr	r2, [pc, #304]	; (8001a04 <HAL_GPIO_Init+0x344>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d00d      	beq.n	80018f2 <HAL_GPIO_Init+0x232>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a4b      	ldr	r2, [pc, #300]	; (8001a08 <HAL_GPIO_Init+0x348>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d007      	beq.n	80018ee <HAL_GPIO_Init+0x22e>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a4a      	ldr	r2, [pc, #296]	; (8001a0c <HAL_GPIO_Init+0x34c>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d101      	bne.n	80018ea <HAL_GPIO_Init+0x22a>
 80018e6:	2306      	movs	r3, #6
 80018e8:	e00c      	b.n	8001904 <HAL_GPIO_Init+0x244>
 80018ea:	2307      	movs	r3, #7
 80018ec:	e00a      	b.n	8001904 <HAL_GPIO_Init+0x244>
 80018ee:	2305      	movs	r3, #5
 80018f0:	e008      	b.n	8001904 <HAL_GPIO_Init+0x244>
 80018f2:	2304      	movs	r3, #4
 80018f4:	e006      	b.n	8001904 <HAL_GPIO_Init+0x244>
 80018f6:	2303      	movs	r3, #3
 80018f8:	e004      	b.n	8001904 <HAL_GPIO_Init+0x244>
 80018fa:	2302      	movs	r3, #2
 80018fc:	e002      	b.n	8001904 <HAL_GPIO_Init+0x244>
 80018fe:	2301      	movs	r3, #1
 8001900:	e000      	b.n	8001904 <HAL_GPIO_Init+0x244>
 8001902:	2300      	movs	r3, #0
 8001904:	697a      	ldr	r2, [r7, #20]
 8001906:	f002 0203 	and.w	r2, r2, #3
 800190a:	0092      	lsls	r2, r2, #2
 800190c:	4093      	lsls	r3, r2
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	4313      	orrs	r3, r2
 8001912:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001914:	4937      	ldr	r1, [pc, #220]	; (80019f4 <HAL_GPIO_Init+0x334>)
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	089b      	lsrs	r3, r3, #2
 800191a:	3302      	adds	r3, #2
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001922:	4b3b      	ldr	r3, [pc, #236]	; (8001a10 <HAL_GPIO_Init+0x350>)
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	43db      	mvns	r3, r3
 800192c:	693a      	ldr	r2, [r7, #16]
 800192e:	4013      	ands	r3, r2
 8001930:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d003      	beq.n	8001946 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	4313      	orrs	r3, r2
 8001944:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001946:	4a32      	ldr	r2, [pc, #200]	; (8001a10 <HAL_GPIO_Init+0x350>)
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800194c:	4b30      	ldr	r3, [pc, #192]	; (8001a10 <HAL_GPIO_Init+0x350>)
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	43db      	mvns	r3, r3
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	4013      	ands	r3, r2
 800195a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d003      	beq.n	8001970 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	4313      	orrs	r3, r2
 800196e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001970:	4a27      	ldr	r2, [pc, #156]	; (8001a10 <HAL_GPIO_Init+0x350>)
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001976:	4b26      	ldr	r3, [pc, #152]	; (8001a10 <HAL_GPIO_Init+0x350>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	43db      	mvns	r3, r3
 8001980:	693a      	ldr	r2, [r7, #16]
 8001982:	4013      	ands	r3, r2
 8001984:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d003      	beq.n	800199a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	4313      	orrs	r3, r2
 8001998:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800199a:	4a1d      	ldr	r2, [pc, #116]	; (8001a10 <HAL_GPIO_Init+0x350>)
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80019a0:	4b1b      	ldr	r3, [pc, #108]	; (8001a10 <HAL_GPIO_Init+0x350>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	43db      	mvns	r3, r3
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	4013      	ands	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d003      	beq.n	80019c4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80019c4:	4a12      	ldr	r2, [pc, #72]	; (8001a10 <HAL_GPIO_Init+0x350>)
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	3301      	adds	r3, #1
 80019ce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	fa22 f303 	lsr.w	r3, r2, r3
 80019da:	2b00      	cmp	r3, #0
 80019dc:	f47f ae78 	bne.w	80016d0 <HAL_GPIO_Init+0x10>
  }
}
 80019e0:	bf00      	nop
 80019e2:	bf00      	nop
 80019e4:	371c      	adds	r7, #28
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	40021000 	.word	0x40021000
 80019f4:	40010000 	.word	0x40010000
 80019f8:	48000400 	.word	0x48000400
 80019fc:	48000800 	.word	0x48000800
 8001a00:	48000c00 	.word	0x48000c00
 8001a04:	48001000 	.word	0x48001000
 8001a08:	48001400 	.word	0x48001400
 8001a0c:	48001800 	.word	0x48001800
 8001a10:	40010400 	.word	0x40010400

08001a14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	691a      	ldr	r2, [r3, #16]
 8001a24:	887b      	ldrh	r3, [r7, #2]
 8001a26:	4013      	ands	r3, r2
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d002      	beq.n	8001a32 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	73fb      	strb	r3, [r7, #15]
 8001a30:	e001      	b.n	8001a36 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a32:	2300      	movs	r3, #0
 8001a34:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3714      	adds	r7, #20
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	807b      	strh	r3, [r7, #2]
 8001a50:	4613      	mov	r3, r2
 8001a52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a54:	787b      	ldrb	r3, [r7, #1]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d003      	beq.n	8001a62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a5a:	887a      	ldrh	r2, [r7, #2]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a60:	e002      	b.n	8001a68 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a62:	887a      	ldrh	r2, [r7, #2]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a68:	bf00      	nop
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a7e:	4b08      	ldr	r3, [pc, #32]	; (8001aa0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a80:	695a      	ldr	r2, [r3, #20]
 8001a82:	88fb      	ldrh	r3, [r7, #6]
 8001a84:	4013      	ands	r3, r2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d006      	beq.n	8001a98 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a8a:	4a05      	ldr	r2, [pc, #20]	; (8001aa0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a8c:	88fb      	ldrh	r3, [r7, #6]
 8001a8e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a90:	88fb      	ldrh	r3, [r7, #6]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f000 f806 	bl	8001aa4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a98:	bf00      	nop
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	40010400 	.word	0x40010400

08001aa4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4603      	mov	r3, r0
 8001aac:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001aae:	bf00      	nop
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
	...

08001abc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001ac0:	4b04      	ldr	r3, [pc, #16]	; (8001ad4 <HAL_PWREx_GetVoltageRange+0x18>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	40007000 	.word	0x40007000

08001ad8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ae6:	d130      	bne.n	8001b4a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ae8:	4b23      	ldr	r3, [pc, #140]	; (8001b78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001af0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001af4:	d038      	beq.n	8001b68 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001af6:	4b20      	ldr	r3, [pc, #128]	; (8001b78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001afe:	4a1e      	ldr	r2, [pc, #120]	; (8001b78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b04:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b06:	4b1d      	ldr	r3, [pc, #116]	; (8001b7c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2232      	movs	r2, #50	; 0x32
 8001b0c:	fb02 f303 	mul.w	r3, r2, r3
 8001b10:	4a1b      	ldr	r2, [pc, #108]	; (8001b80 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001b12:	fba2 2303 	umull	r2, r3, r2, r3
 8001b16:	0c9b      	lsrs	r3, r3, #18
 8001b18:	3301      	adds	r3, #1
 8001b1a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b1c:	e002      	b.n	8001b24 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	3b01      	subs	r3, #1
 8001b22:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b24:	4b14      	ldr	r3, [pc, #80]	; (8001b78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b26:	695b      	ldr	r3, [r3, #20]
 8001b28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b30:	d102      	bne.n	8001b38 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d1f2      	bne.n	8001b1e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b38:	4b0f      	ldr	r3, [pc, #60]	; (8001b78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b3a:	695b      	ldr	r3, [r3, #20]
 8001b3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b44:	d110      	bne.n	8001b68 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e00f      	b.n	8001b6a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b4a:	4b0b      	ldr	r3, [pc, #44]	; (8001b78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b56:	d007      	beq.n	8001b68 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b58:	4b07      	ldr	r3, [pc, #28]	; (8001b78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b60:	4a05      	ldr	r2, [pc, #20]	; (8001b78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b66:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3714      	adds	r7, #20
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	40007000 	.word	0x40007000
 8001b7c:	20000000 	.word	0x20000000
 8001b80:	431bde83 	.word	0x431bde83

08001b84 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b088      	sub	sp, #32
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d101      	bne.n	8001b96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e3ca      	b.n	800232c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b96:	4b97      	ldr	r3, [pc, #604]	; (8001df4 <HAL_RCC_OscConfig+0x270>)
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f003 030c 	and.w	r3, r3, #12
 8001b9e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ba0:	4b94      	ldr	r3, [pc, #592]	; (8001df4 <HAL_RCC_OscConfig+0x270>)
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	f003 0303 	and.w	r3, r3, #3
 8001ba8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0310 	and.w	r3, r3, #16
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	f000 80e4 	beq.w	8001d80 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d007      	beq.n	8001bce <HAL_RCC_OscConfig+0x4a>
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	2b0c      	cmp	r3, #12
 8001bc2:	f040 808b 	bne.w	8001cdc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	f040 8087 	bne.w	8001cdc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001bce:	4b89      	ldr	r3, [pc, #548]	; (8001df4 <HAL_RCC_OscConfig+0x270>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d005      	beq.n	8001be6 <HAL_RCC_OscConfig+0x62>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	699b      	ldr	r3, [r3, #24]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d101      	bne.n	8001be6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e3a2      	b.n	800232c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6a1a      	ldr	r2, [r3, #32]
 8001bea:	4b82      	ldr	r3, [pc, #520]	; (8001df4 <HAL_RCC_OscConfig+0x270>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0308 	and.w	r3, r3, #8
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d004      	beq.n	8001c00 <HAL_RCC_OscConfig+0x7c>
 8001bf6:	4b7f      	ldr	r3, [pc, #508]	; (8001df4 <HAL_RCC_OscConfig+0x270>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bfe:	e005      	b.n	8001c0c <HAL_RCC_OscConfig+0x88>
 8001c00:	4b7c      	ldr	r3, [pc, #496]	; (8001df4 <HAL_RCC_OscConfig+0x270>)
 8001c02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c06:	091b      	lsrs	r3, r3, #4
 8001c08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d223      	bcs.n	8001c58 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a1b      	ldr	r3, [r3, #32]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f000 fd55 	bl	80026c4 <RCC_SetFlashLatencyFromMSIRange>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e383      	b.n	800232c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c24:	4b73      	ldr	r3, [pc, #460]	; (8001df4 <HAL_RCC_OscConfig+0x270>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a72      	ldr	r2, [pc, #456]	; (8001df4 <HAL_RCC_OscConfig+0x270>)
 8001c2a:	f043 0308 	orr.w	r3, r3, #8
 8001c2e:	6013      	str	r3, [r2, #0]
 8001c30:	4b70      	ldr	r3, [pc, #448]	; (8001df4 <HAL_RCC_OscConfig+0x270>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6a1b      	ldr	r3, [r3, #32]
 8001c3c:	496d      	ldr	r1, [pc, #436]	; (8001df4 <HAL_RCC_OscConfig+0x270>)
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c42:	4b6c      	ldr	r3, [pc, #432]	; (8001df4 <HAL_RCC_OscConfig+0x270>)
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	69db      	ldr	r3, [r3, #28]
 8001c4e:	021b      	lsls	r3, r3, #8
 8001c50:	4968      	ldr	r1, [pc, #416]	; (8001df4 <HAL_RCC_OscConfig+0x270>)
 8001c52:	4313      	orrs	r3, r2
 8001c54:	604b      	str	r3, [r1, #4]
 8001c56:	e025      	b.n	8001ca4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c58:	4b66      	ldr	r3, [pc, #408]	; (8001df4 <HAL_RCC_OscConfig+0x270>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a65      	ldr	r2, [pc, #404]	; (8001df4 <HAL_RCC_OscConfig+0x270>)
 8001c5e:	f043 0308 	orr.w	r3, r3, #8
 8001c62:	6013      	str	r3, [r2, #0]
 8001c64:	4b63      	ldr	r3, [pc, #396]	; (8001df4 <HAL_RCC_OscConfig+0x270>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a1b      	ldr	r3, [r3, #32]
 8001c70:	4960      	ldr	r1, [pc, #384]	; (8001df4 <HAL_RCC_OscConfig+0x270>)
 8001c72:	4313      	orrs	r3, r2
 8001c74:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c76:	4b5f      	ldr	r3, [pc, #380]	; (8001df4 <HAL_RCC_OscConfig+0x270>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	69db      	ldr	r3, [r3, #28]
 8001c82:	021b      	lsls	r3, r3, #8
 8001c84:	495b      	ldr	r1, [pc, #364]	; (8001df4 <HAL_RCC_OscConfig+0x270>)
 8001c86:	4313      	orrs	r3, r2
 8001c88:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d109      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a1b      	ldr	r3, [r3, #32]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f000 fd15 	bl	80026c4 <RCC_SetFlashLatencyFromMSIRange>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e343      	b.n	800232c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ca4:	f000 fc4a 	bl	800253c <HAL_RCC_GetSysClockFreq>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	4b52      	ldr	r3, [pc, #328]	; (8001df4 <HAL_RCC_OscConfig+0x270>)
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	091b      	lsrs	r3, r3, #4
 8001cb0:	f003 030f 	and.w	r3, r3, #15
 8001cb4:	4950      	ldr	r1, [pc, #320]	; (8001df8 <HAL_RCC_OscConfig+0x274>)
 8001cb6:	5ccb      	ldrb	r3, [r1, r3]
 8001cb8:	f003 031f 	and.w	r3, r3, #31
 8001cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8001cc0:	4a4e      	ldr	r2, [pc, #312]	; (8001dfc <HAL_RCC_OscConfig+0x278>)
 8001cc2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001cc4:	4b4e      	ldr	r3, [pc, #312]	; (8001e00 <HAL_RCC_OscConfig+0x27c>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff fb67 	bl	800139c <HAL_InitTick>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001cd2:	7bfb      	ldrb	r3, [r7, #15]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d052      	beq.n	8001d7e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001cd8:	7bfb      	ldrb	r3, [r7, #15]
 8001cda:	e327      	b.n	800232c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d032      	beq.n	8001d4a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001ce4:	4b43      	ldr	r3, [pc, #268]	; (8001df4 <HAL_RCC_OscConfig+0x270>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a42      	ldr	r2, [pc, #264]	; (8001df4 <HAL_RCC_OscConfig+0x270>)
 8001cea:	f043 0301 	orr.w	r3, r3, #1
 8001cee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001cf0:	f7ff fba4 	bl	800143c <HAL_GetTick>
 8001cf4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cf6:	e008      	b.n	8001d0a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cf8:	f7ff fba0 	bl	800143c <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e310      	b.n	800232c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d0a:	4b3a      	ldr	r3, [pc, #232]	; (8001df4 <HAL_RCC_OscConfig+0x270>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d0f0      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d16:	4b37      	ldr	r3, [pc, #220]	; (8001df4 <HAL_RCC_OscConfig+0x270>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a36      	ldr	r2, [pc, #216]	; (8001df4 <HAL_RCC_OscConfig+0x270>)
 8001d1c:	f043 0308 	orr.w	r3, r3, #8
 8001d20:	6013      	str	r3, [r2, #0]
 8001d22:	4b34      	ldr	r3, [pc, #208]	; (8001df4 <HAL_RCC_OscConfig+0x270>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6a1b      	ldr	r3, [r3, #32]
 8001d2e:	4931      	ldr	r1, [pc, #196]	; (8001df4 <HAL_RCC_OscConfig+0x270>)
 8001d30:	4313      	orrs	r3, r2
 8001d32:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d34:	4b2f      	ldr	r3, [pc, #188]	; (8001df4 <HAL_RCC_OscConfig+0x270>)
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	69db      	ldr	r3, [r3, #28]
 8001d40:	021b      	lsls	r3, r3, #8
 8001d42:	492c      	ldr	r1, [pc, #176]	; (8001df4 <HAL_RCC_OscConfig+0x270>)
 8001d44:	4313      	orrs	r3, r2
 8001d46:	604b      	str	r3, [r1, #4]
 8001d48:	e01a      	b.n	8001d80 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d4a:	4b2a      	ldr	r3, [pc, #168]	; (8001df4 <HAL_RCC_OscConfig+0x270>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a29      	ldr	r2, [pc, #164]	; (8001df4 <HAL_RCC_OscConfig+0x270>)
 8001d50:	f023 0301 	bic.w	r3, r3, #1
 8001d54:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d56:	f7ff fb71 	bl	800143c <HAL_GetTick>
 8001d5a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d5c:	e008      	b.n	8001d70 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d5e:	f7ff fb6d 	bl	800143c <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d901      	bls.n	8001d70 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e2dd      	b.n	800232c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d70:	4b20      	ldr	r3, [pc, #128]	; (8001df4 <HAL_RCC_OscConfig+0x270>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d1f0      	bne.n	8001d5e <HAL_RCC_OscConfig+0x1da>
 8001d7c:	e000      	b.n	8001d80 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d7e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0301 	and.w	r3, r3, #1
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d074      	beq.n	8001e76 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	2b08      	cmp	r3, #8
 8001d90:	d005      	beq.n	8001d9e <HAL_RCC_OscConfig+0x21a>
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	2b0c      	cmp	r3, #12
 8001d96:	d10e      	bne.n	8001db6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	2b03      	cmp	r3, #3
 8001d9c:	d10b      	bne.n	8001db6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d9e:	4b15      	ldr	r3, [pc, #84]	; (8001df4 <HAL_RCC_OscConfig+0x270>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d064      	beq.n	8001e74 <HAL_RCC_OscConfig+0x2f0>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d160      	bne.n	8001e74 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e2ba      	b.n	800232c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dbe:	d106      	bne.n	8001dce <HAL_RCC_OscConfig+0x24a>
 8001dc0:	4b0c      	ldr	r3, [pc, #48]	; (8001df4 <HAL_RCC_OscConfig+0x270>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a0b      	ldr	r2, [pc, #44]	; (8001df4 <HAL_RCC_OscConfig+0x270>)
 8001dc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dca:	6013      	str	r3, [r2, #0]
 8001dcc:	e026      	b.n	8001e1c <HAL_RCC_OscConfig+0x298>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dd6:	d115      	bne.n	8001e04 <HAL_RCC_OscConfig+0x280>
 8001dd8:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <HAL_RCC_OscConfig+0x270>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a05      	ldr	r2, [pc, #20]	; (8001df4 <HAL_RCC_OscConfig+0x270>)
 8001dde:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001de2:	6013      	str	r3, [r2, #0]
 8001de4:	4b03      	ldr	r3, [pc, #12]	; (8001df4 <HAL_RCC_OscConfig+0x270>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a02      	ldr	r2, [pc, #8]	; (8001df4 <HAL_RCC_OscConfig+0x270>)
 8001dea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dee:	6013      	str	r3, [r2, #0]
 8001df0:	e014      	b.n	8001e1c <HAL_RCC_OscConfig+0x298>
 8001df2:	bf00      	nop
 8001df4:	40021000 	.word	0x40021000
 8001df8:	0800e280 	.word	0x0800e280
 8001dfc:	20000000 	.word	0x20000000
 8001e00:	20000004 	.word	0x20000004
 8001e04:	4ba0      	ldr	r3, [pc, #640]	; (8002088 <HAL_RCC_OscConfig+0x504>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a9f      	ldr	r2, [pc, #636]	; (8002088 <HAL_RCC_OscConfig+0x504>)
 8001e0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e0e:	6013      	str	r3, [r2, #0]
 8001e10:	4b9d      	ldr	r3, [pc, #628]	; (8002088 <HAL_RCC_OscConfig+0x504>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a9c      	ldr	r2, [pc, #624]	; (8002088 <HAL_RCC_OscConfig+0x504>)
 8001e16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d013      	beq.n	8001e4c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e24:	f7ff fb0a 	bl	800143c <HAL_GetTick>
 8001e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e2c:	f7ff fb06 	bl	800143c <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b64      	cmp	r3, #100	; 0x64
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e276      	b.n	800232c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e3e:	4b92      	ldr	r3, [pc, #584]	; (8002088 <HAL_RCC_OscConfig+0x504>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d0f0      	beq.n	8001e2c <HAL_RCC_OscConfig+0x2a8>
 8001e4a:	e014      	b.n	8001e76 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4c:	f7ff faf6 	bl	800143c <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e54:	f7ff faf2 	bl	800143c <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b64      	cmp	r3, #100	; 0x64
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e262      	b.n	800232c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e66:	4b88      	ldr	r3, [pc, #544]	; (8002088 <HAL_RCC_OscConfig+0x504>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d1f0      	bne.n	8001e54 <HAL_RCC_OscConfig+0x2d0>
 8001e72:	e000      	b.n	8001e76 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d060      	beq.n	8001f44 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	2b04      	cmp	r3, #4
 8001e86:	d005      	beq.n	8001e94 <HAL_RCC_OscConfig+0x310>
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	2b0c      	cmp	r3, #12
 8001e8c:	d119      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d116      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e94:	4b7c      	ldr	r3, [pc, #496]	; (8002088 <HAL_RCC_OscConfig+0x504>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d005      	beq.n	8001eac <HAL_RCC_OscConfig+0x328>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d101      	bne.n	8001eac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e23f      	b.n	800232c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eac:	4b76      	ldr	r3, [pc, #472]	; (8002088 <HAL_RCC_OscConfig+0x504>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	691b      	ldr	r3, [r3, #16]
 8001eb8:	061b      	lsls	r3, r3, #24
 8001eba:	4973      	ldr	r1, [pc, #460]	; (8002088 <HAL_RCC_OscConfig+0x504>)
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ec0:	e040      	b.n	8001f44 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d023      	beq.n	8001f12 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001eca:	4b6f      	ldr	r3, [pc, #444]	; (8002088 <HAL_RCC_OscConfig+0x504>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a6e      	ldr	r2, [pc, #440]	; (8002088 <HAL_RCC_OscConfig+0x504>)
 8001ed0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ed4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed6:	f7ff fab1 	bl	800143c <HAL_GetTick>
 8001eda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001edc:	e008      	b.n	8001ef0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ede:	f7ff faad 	bl	800143c <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d901      	bls.n	8001ef0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e21d      	b.n	800232c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ef0:	4b65      	ldr	r3, [pc, #404]	; (8002088 <HAL_RCC_OscConfig+0x504>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d0f0      	beq.n	8001ede <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001efc:	4b62      	ldr	r3, [pc, #392]	; (8002088 <HAL_RCC_OscConfig+0x504>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	691b      	ldr	r3, [r3, #16]
 8001f08:	061b      	lsls	r3, r3, #24
 8001f0a:	495f      	ldr	r1, [pc, #380]	; (8002088 <HAL_RCC_OscConfig+0x504>)
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	604b      	str	r3, [r1, #4]
 8001f10:	e018      	b.n	8001f44 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f12:	4b5d      	ldr	r3, [pc, #372]	; (8002088 <HAL_RCC_OscConfig+0x504>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a5c      	ldr	r2, [pc, #368]	; (8002088 <HAL_RCC_OscConfig+0x504>)
 8001f18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f1e:	f7ff fa8d 	bl	800143c <HAL_GetTick>
 8001f22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f24:	e008      	b.n	8001f38 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f26:	f7ff fa89 	bl	800143c <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d901      	bls.n	8001f38 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e1f9      	b.n	800232c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f38:	4b53      	ldr	r3, [pc, #332]	; (8002088 <HAL_RCC_OscConfig+0x504>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d1f0      	bne.n	8001f26 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0308 	and.w	r3, r3, #8
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d03c      	beq.n	8001fca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	695b      	ldr	r3, [r3, #20]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d01c      	beq.n	8001f92 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f58:	4b4b      	ldr	r3, [pc, #300]	; (8002088 <HAL_RCC_OscConfig+0x504>)
 8001f5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f5e:	4a4a      	ldr	r2, [pc, #296]	; (8002088 <HAL_RCC_OscConfig+0x504>)
 8001f60:	f043 0301 	orr.w	r3, r3, #1
 8001f64:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f68:	f7ff fa68 	bl	800143c <HAL_GetTick>
 8001f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f6e:	e008      	b.n	8001f82 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f70:	f7ff fa64 	bl	800143c <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e1d4      	b.n	800232c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f82:	4b41      	ldr	r3, [pc, #260]	; (8002088 <HAL_RCC_OscConfig+0x504>)
 8001f84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f88:	f003 0302 	and.w	r3, r3, #2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d0ef      	beq.n	8001f70 <HAL_RCC_OscConfig+0x3ec>
 8001f90:	e01b      	b.n	8001fca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f92:	4b3d      	ldr	r3, [pc, #244]	; (8002088 <HAL_RCC_OscConfig+0x504>)
 8001f94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f98:	4a3b      	ldr	r2, [pc, #236]	; (8002088 <HAL_RCC_OscConfig+0x504>)
 8001f9a:	f023 0301 	bic.w	r3, r3, #1
 8001f9e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fa2:	f7ff fa4b 	bl	800143c <HAL_GetTick>
 8001fa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fa8:	e008      	b.n	8001fbc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001faa:	f7ff fa47 	bl	800143c <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d901      	bls.n	8001fbc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e1b7      	b.n	800232c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fbc:	4b32      	ldr	r3, [pc, #200]	; (8002088 <HAL_RCC_OscConfig+0x504>)
 8001fbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d1ef      	bne.n	8001faa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0304 	and.w	r3, r3, #4
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	f000 80a6 	beq.w	8002124 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001fdc:	4b2a      	ldr	r3, [pc, #168]	; (8002088 <HAL_RCC_OscConfig+0x504>)
 8001fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d10d      	bne.n	8002004 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fe8:	4b27      	ldr	r3, [pc, #156]	; (8002088 <HAL_RCC_OscConfig+0x504>)
 8001fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fec:	4a26      	ldr	r2, [pc, #152]	; (8002088 <HAL_RCC_OscConfig+0x504>)
 8001fee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ff2:	6593      	str	r3, [r2, #88]	; 0x58
 8001ff4:	4b24      	ldr	r3, [pc, #144]	; (8002088 <HAL_RCC_OscConfig+0x504>)
 8001ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ffc:	60bb      	str	r3, [r7, #8]
 8001ffe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002000:	2301      	movs	r3, #1
 8002002:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002004:	4b21      	ldr	r3, [pc, #132]	; (800208c <HAL_RCC_OscConfig+0x508>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800200c:	2b00      	cmp	r3, #0
 800200e:	d118      	bne.n	8002042 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002010:	4b1e      	ldr	r3, [pc, #120]	; (800208c <HAL_RCC_OscConfig+0x508>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a1d      	ldr	r2, [pc, #116]	; (800208c <HAL_RCC_OscConfig+0x508>)
 8002016:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800201a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800201c:	f7ff fa0e 	bl	800143c <HAL_GetTick>
 8002020:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002022:	e008      	b.n	8002036 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002024:	f7ff fa0a 	bl	800143c <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b02      	cmp	r3, #2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e17a      	b.n	800232c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002036:	4b15      	ldr	r3, [pc, #84]	; (800208c <HAL_RCC_OscConfig+0x508>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800203e:	2b00      	cmp	r3, #0
 8002040:	d0f0      	beq.n	8002024 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	2b01      	cmp	r3, #1
 8002048:	d108      	bne.n	800205c <HAL_RCC_OscConfig+0x4d8>
 800204a:	4b0f      	ldr	r3, [pc, #60]	; (8002088 <HAL_RCC_OscConfig+0x504>)
 800204c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002050:	4a0d      	ldr	r2, [pc, #52]	; (8002088 <HAL_RCC_OscConfig+0x504>)
 8002052:	f043 0301 	orr.w	r3, r3, #1
 8002056:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800205a:	e029      	b.n	80020b0 <HAL_RCC_OscConfig+0x52c>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	2b05      	cmp	r3, #5
 8002062:	d115      	bne.n	8002090 <HAL_RCC_OscConfig+0x50c>
 8002064:	4b08      	ldr	r3, [pc, #32]	; (8002088 <HAL_RCC_OscConfig+0x504>)
 8002066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800206a:	4a07      	ldr	r2, [pc, #28]	; (8002088 <HAL_RCC_OscConfig+0x504>)
 800206c:	f043 0304 	orr.w	r3, r3, #4
 8002070:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002074:	4b04      	ldr	r3, [pc, #16]	; (8002088 <HAL_RCC_OscConfig+0x504>)
 8002076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800207a:	4a03      	ldr	r2, [pc, #12]	; (8002088 <HAL_RCC_OscConfig+0x504>)
 800207c:	f043 0301 	orr.w	r3, r3, #1
 8002080:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002084:	e014      	b.n	80020b0 <HAL_RCC_OscConfig+0x52c>
 8002086:	bf00      	nop
 8002088:	40021000 	.word	0x40021000
 800208c:	40007000 	.word	0x40007000
 8002090:	4b9c      	ldr	r3, [pc, #624]	; (8002304 <HAL_RCC_OscConfig+0x780>)
 8002092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002096:	4a9b      	ldr	r2, [pc, #620]	; (8002304 <HAL_RCC_OscConfig+0x780>)
 8002098:	f023 0301 	bic.w	r3, r3, #1
 800209c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020a0:	4b98      	ldr	r3, [pc, #608]	; (8002304 <HAL_RCC_OscConfig+0x780>)
 80020a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020a6:	4a97      	ldr	r2, [pc, #604]	; (8002304 <HAL_RCC_OscConfig+0x780>)
 80020a8:	f023 0304 	bic.w	r3, r3, #4
 80020ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d016      	beq.n	80020e6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020b8:	f7ff f9c0 	bl	800143c <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020be:	e00a      	b.n	80020d6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020c0:	f7ff f9bc 	bl	800143c <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e12a      	b.n	800232c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020d6:	4b8b      	ldr	r3, [pc, #556]	; (8002304 <HAL_RCC_OscConfig+0x780>)
 80020d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020dc:	f003 0302 	and.w	r3, r3, #2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d0ed      	beq.n	80020c0 <HAL_RCC_OscConfig+0x53c>
 80020e4:	e015      	b.n	8002112 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020e6:	f7ff f9a9 	bl	800143c <HAL_GetTick>
 80020ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020ec:	e00a      	b.n	8002104 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ee:	f7ff f9a5 	bl	800143c <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d901      	bls.n	8002104 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e113      	b.n	800232c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002104:	4b7f      	ldr	r3, [pc, #508]	; (8002304 <HAL_RCC_OscConfig+0x780>)
 8002106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d1ed      	bne.n	80020ee <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002112:	7ffb      	ldrb	r3, [r7, #31]
 8002114:	2b01      	cmp	r3, #1
 8002116:	d105      	bne.n	8002124 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002118:	4b7a      	ldr	r3, [pc, #488]	; (8002304 <HAL_RCC_OscConfig+0x780>)
 800211a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800211c:	4a79      	ldr	r2, [pc, #484]	; (8002304 <HAL_RCC_OscConfig+0x780>)
 800211e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002122:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002128:	2b00      	cmp	r3, #0
 800212a:	f000 80fe 	beq.w	800232a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002132:	2b02      	cmp	r3, #2
 8002134:	f040 80d0 	bne.w	80022d8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002138:	4b72      	ldr	r3, [pc, #456]	; (8002304 <HAL_RCC_OscConfig+0x780>)
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	f003 0203 	and.w	r2, r3, #3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002148:	429a      	cmp	r2, r3
 800214a:	d130      	bne.n	80021ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002156:	3b01      	subs	r3, #1
 8002158:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800215a:	429a      	cmp	r2, r3
 800215c:	d127      	bne.n	80021ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002168:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800216a:	429a      	cmp	r2, r3
 800216c:	d11f      	bne.n	80021ae <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002178:	2a07      	cmp	r2, #7
 800217a:	bf14      	ite	ne
 800217c:	2201      	movne	r2, #1
 800217e:	2200      	moveq	r2, #0
 8002180:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002182:	4293      	cmp	r3, r2
 8002184:	d113      	bne.n	80021ae <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002190:	085b      	lsrs	r3, r3, #1
 8002192:	3b01      	subs	r3, #1
 8002194:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002196:	429a      	cmp	r2, r3
 8002198:	d109      	bne.n	80021ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a4:	085b      	lsrs	r3, r3, #1
 80021a6:	3b01      	subs	r3, #1
 80021a8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d06e      	beq.n	800228c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	2b0c      	cmp	r3, #12
 80021b2:	d069      	beq.n	8002288 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80021b4:	4b53      	ldr	r3, [pc, #332]	; (8002304 <HAL_RCC_OscConfig+0x780>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d105      	bne.n	80021cc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80021c0:	4b50      	ldr	r3, [pc, #320]	; (8002304 <HAL_RCC_OscConfig+0x780>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e0ad      	b.n	800232c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80021d0:	4b4c      	ldr	r3, [pc, #304]	; (8002304 <HAL_RCC_OscConfig+0x780>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a4b      	ldr	r2, [pc, #300]	; (8002304 <HAL_RCC_OscConfig+0x780>)
 80021d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021da:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021dc:	f7ff f92e 	bl	800143c <HAL_GetTick>
 80021e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021e2:	e008      	b.n	80021f6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e4:	f7ff f92a 	bl	800143c <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e09a      	b.n	800232c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021f6:	4b43      	ldr	r3, [pc, #268]	; (8002304 <HAL_RCC_OscConfig+0x780>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1f0      	bne.n	80021e4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002202:	4b40      	ldr	r3, [pc, #256]	; (8002304 <HAL_RCC_OscConfig+0x780>)
 8002204:	68da      	ldr	r2, [r3, #12]
 8002206:	4b40      	ldr	r3, [pc, #256]	; (8002308 <HAL_RCC_OscConfig+0x784>)
 8002208:	4013      	ands	r3, r2
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002212:	3a01      	subs	r2, #1
 8002214:	0112      	lsls	r2, r2, #4
 8002216:	4311      	orrs	r1, r2
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800221c:	0212      	lsls	r2, r2, #8
 800221e:	4311      	orrs	r1, r2
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002224:	0852      	lsrs	r2, r2, #1
 8002226:	3a01      	subs	r2, #1
 8002228:	0552      	lsls	r2, r2, #21
 800222a:	4311      	orrs	r1, r2
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002230:	0852      	lsrs	r2, r2, #1
 8002232:	3a01      	subs	r2, #1
 8002234:	0652      	lsls	r2, r2, #25
 8002236:	4311      	orrs	r1, r2
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800223c:	0912      	lsrs	r2, r2, #4
 800223e:	0452      	lsls	r2, r2, #17
 8002240:	430a      	orrs	r2, r1
 8002242:	4930      	ldr	r1, [pc, #192]	; (8002304 <HAL_RCC_OscConfig+0x780>)
 8002244:	4313      	orrs	r3, r2
 8002246:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002248:	4b2e      	ldr	r3, [pc, #184]	; (8002304 <HAL_RCC_OscConfig+0x780>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a2d      	ldr	r2, [pc, #180]	; (8002304 <HAL_RCC_OscConfig+0x780>)
 800224e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002252:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002254:	4b2b      	ldr	r3, [pc, #172]	; (8002304 <HAL_RCC_OscConfig+0x780>)
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	4a2a      	ldr	r2, [pc, #168]	; (8002304 <HAL_RCC_OscConfig+0x780>)
 800225a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800225e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002260:	f7ff f8ec 	bl	800143c <HAL_GetTick>
 8002264:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002266:	e008      	b.n	800227a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002268:	f7ff f8e8 	bl	800143c <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	2b02      	cmp	r3, #2
 8002274:	d901      	bls.n	800227a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e058      	b.n	800232c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800227a:	4b22      	ldr	r3, [pc, #136]	; (8002304 <HAL_RCC_OscConfig+0x780>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d0f0      	beq.n	8002268 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002286:	e050      	b.n	800232a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e04f      	b.n	800232c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800228c:	4b1d      	ldr	r3, [pc, #116]	; (8002304 <HAL_RCC_OscConfig+0x780>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d148      	bne.n	800232a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002298:	4b1a      	ldr	r3, [pc, #104]	; (8002304 <HAL_RCC_OscConfig+0x780>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a19      	ldr	r2, [pc, #100]	; (8002304 <HAL_RCC_OscConfig+0x780>)
 800229e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022a2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022a4:	4b17      	ldr	r3, [pc, #92]	; (8002304 <HAL_RCC_OscConfig+0x780>)
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	4a16      	ldr	r2, [pc, #88]	; (8002304 <HAL_RCC_OscConfig+0x780>)
 80022aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022ae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80022b0:	f7ff f8c4 	bl	800143c <HAL_GetTick>
 80022b4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022b6:	e008      	b.n	80022ca <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022b8:	f7ff f8c0 	bl	800143c <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e030      	b.n	800232c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022ca:	4b0e      	ldr	r3, [pc, #56]	; (8002304 <HAL_RCC_OscConfig+0x780>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d0f0      	beq.n	80022b8 <HAL_RCC_OscConfig+0x734>
 80022d6:	e028      	b.n	800232a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	2b0c      	cmp	r3, #12
 80022dc:	d023      	beq.n	8002326 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022de:	4b09      	ldr	r3, [pc, #36]	; (8002304 <HAL_RCC_OscConfig+0x780>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a08      	ldr	r2, [pc, #32]	; (8002304 <HAL_RCC_OscConfig+0x780>)
 80022e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ea:	f7ff f8a7 	bl	800143c <HAL_GetTick>
 80022ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022f0:	e00c      	b.n	800230c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022f2:	f7ff f8a3 	bl	800143c <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d905      	bls.n	800230c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e013      	b.n	800232c <HAL_RCC_OscConfig+0x7a8>
 8002304:	40021000 	.word	0x40021000
 8002308:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800230c:	4b09      	ldr	r3, [pc, #36]	; (8002334 <HAL_RCC_OscConfig+0x7b0>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d1ec      	bne.n	80022f2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002318:	4b06      	ldr	r3, [pc, #24]	; (8002334 <HAL_RCC_OscConfig+0x7b0>)
 800231a:	68da      	ldr	r2, [r3, #12]
 800231c:	4905      	ldr	r1, [pc, #20]	; (8002334 <HAL_RCC_OscConfig+0x7b0>)
 800231e:	4b06      	ldr	r3, [pc, #24]	; (8002338 <HAL_RCC_OscConfig+0x7b4>)
 8002320:	4013      	ands	r3, r2
 8002322:	60cb      	str	r3, [r1, #12]
 8002324:	e001      	b.n	800232a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e000      	b.n	800232c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800232a:	2300      	movs	r3, #0
}
 800232c:	4618      	mov	r0, r3
 800232e:	3720      	adds	r7, #32
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40021000 	.word	0x40021000
 8002338:	feeefffc 	.word	0xfeeefffc

0800233c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d101      	bne.n	8002350 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e0e7      	b.n	8002520 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002350:	4b75      	ldr	r3, [pc, #468]	; (8002528 <HAL_RCC_ClockConfig+0x1ec>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0307 	and.w	r3, r3, #7
 8002358:	683a      	ldr	r2, [r7, #0]
 800235a:	429a      	cmp	r2, r3
 800235c:	d910      	bls.n	8002380 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800235e:	4b72      	ldr	r3, [pc, #456]	; (8002528 <HAL_RCC_ClockConfig+0x1ec>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f023 0207 	bic.w	r2, r3, #7
 8002366:	4970      	ldr	r1, [pc, #448]	; (8002528 <HAL_RCC_ClockConfig+0x1ec>)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	4313      	orrs	r3, r2
 800236c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800236e:	4b6e      	ldr	r3, [pc, #440]	; (8002528 <HAL_RCC_ClockConfig+0x1ec>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0307 	and.w	r3, r3, #7
 8002376:	683a      	ldr	r2, [r7, #0]
 8002378:	429a      	cmp	r2, r3
 800237a:	d001      	beq.n	8002380 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e0cf      	b.n	8002520 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0302 	and.w	r3, r3, #2
 8002388:	2b00      	cmp	r3, #0
 800238a:	d010      	beq.n	80023ae <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	689a      	ldr	r2, [r3, #8]
 8002390:	4b66      	ldr	r3, [pc, #408]	; (800252c <HAL_RCC_ClockConfig+0x1f0>)
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002398:	429a      	cmp	r2, r3
 800239a:	d908      	bls.n	80023ae <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800239c:	4b63      	ldr	r3, [pc, #396]	; (800252c <HAL_RCC_ClockConfig+0x1f0>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	4960      	ldr	r1, [pc, #384]	; (800252c <HAL_RCC_ClockConfig+0x1f0>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0301 	and.w	r3, r3, #1
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d04c      	beq.n	8002454 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	2b03      	cmp	r3, #3
 80023c0:	d107      	bne.n	80023d2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023c2:	4b5a      	ldr	r3, [pc, #360]	; (800252c <HAL_RCC_ClockConfig+0x1f0>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d121      	bne.n	8002412 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e0a6      	b.n	8002520 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d107      	bne.n	80023ea <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023da:	4b54      	ldr	r3, [pc, #336]	; (800252c <HAL_RCC_ClockConfig+0x1f0>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d115      	bne.n	8002412 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e09a      	b.n	8002520 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d107      	bne.n	8002402 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023f2:	4b4e      	ldr	r3, [pc, #312]	; (800252c <HAL_RCC_ClockConfig+0x1f0>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d109      	bne.n	8002412 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e08e      	b.n	8002520 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002402:	4b4a      	ldr	r3, [pc, #296]	; (800252c <HAL_RCC_ClockConfig+0x1f0>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800240a:	2b00      	cmp	r3, #0
 800240c:	d101      	bne.n	8002412 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e086      	b.n	8002520 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002412:	4b46      	ldr	r3, [pc, #280]	; (800252c <HAL_RCC_ClockConfig+0x1f0>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f023 0203 	bic.w	r2, r3, #3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	4943      	ldr	r1, [pc, #268]	; (800252c <HAL_RCC_ClockConfig+0x1f0>)
 8002420:	4313      	orrs	r3, r2
 8002422:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002424:	f7ff f80a 	bl	800143c <HAL_GetTick>
 8002428:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800242a:	e00a      	b.n	8002442 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800242c:	f7ff f806 	bl	800143c <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	f241 3288 	movw	r2, #5000	; 0x1388
 800243a:	4293      	cmp	r3, r2
 800243c:	d901      	bls.n	8002442 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e06e      	b.n	8002520 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002442:	4b3a      	ldr	r3, [pc, #232]	; (800252c <HAL_RCC_ClockConfig+0x1f0>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f003 020c 	and.w	r2, r3, #12
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	429a      	cmp	r2, r3
 8002452:	d1eb      	bne.n	800242c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d010      	beq.n	8002482 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	689a      	ldr	r2, [r3, #8]
 8002464:	4b31      	ldr	r3, [pc, #196]	; (800252c <HAL_RCC_ClockConfig+0x1f0>)
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800246c:	429a      	cmp	r2, r3
 800246e:	d208      	bcs.n	8002482 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002470:	4b2e      	ldr	r3, [pc, #184]	; (800252c <HAL_RCC_ClockConfig+0x1f0>)
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	492b      	ldr	r1, [pc, #172]	; (800252c <HAL_RCC_ClockConfig+0x1f0>)
 800247e:	4313      	orrs	r3, r2
 8002480:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002482:	4b29      	ldr	r3, [pc, #164]	; (8002528 <HAL_RCC_ClockConfig+0x1ec>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0307 	and.w	r3, r3, #7
 800248a:	683a      	ldr	r2, [r7, #0]
 800248c:	429a      	cmp	r2, r3
 800248e:	d210      	bcs.n	80024b2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002490:	4b25      	ldr	r3, [pc, #148]	; (8002528 <HAL_RCC_ClockConfig+0x1ec>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f023 0207 	bic.w	r2, r3, #7
 8002498:	4923      	ldr	r1, [pc, #140]	; (8002528 <HAL_RCC_ClockConfig+0x1ec>)
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	4313      	orrs	r3, r2
 800249e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024a0:	4b21      	ldr	r3, [pc, #132]	; (8002528 <HAL_RCC_ClockConfig+0x1ec>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0307 	and.w	r3, r3, #7
 80024a8:	683a      	ldr	r2, [r7, #0]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d001      	beq.n	80024b2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e036      	b.n	8002520 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0304 	and.w	r3, r3, #4
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d008      	beq.n	80024d0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024be:	4b1b      	ldr	r3, [pc, #108]	; (800252c <HAL_RCC_ClockConfig+0x1f0>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	4918      	ldr	r1, [pc, #96]	; (800252c <HAL_RCC_ClockConfig+0x1f0>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0308 	and.w	r3, r3, #8
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d009      	beq.n	80024f0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024dc:	4b13      	ldr	r3, [pc, #76]	; (800252c <HAL_RCC_ClockConfig+0x1f0>)
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	691b      	ldr	r3, [r3, #16]
 80024e8:	00db      	lsls	r3, r3, #3
 80024ea:	4910      	ldr	r1, [pc, #64]	; (800252c <HAL_RCC_ClockConfig+0x1f0>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024f0:	f000 f824 	bl	800253c <HAL_RCC_GetSysClockFreq>
 80024f4:	4602      	mov	r2, r0
 80024f6:	4b0d      	ldr	r3, [pc, #52]	; (800252c <HAL_RCC_ClockConfig+0x1f0>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	091b      	lsrs	r3, r3, #4
 80024fc:	f003 030f 	and.w	r3, r3, #15
 8002500:	490b      	ldr	r1, [pc, #44]	; (8002530 <HAL_RCC_ClockConfig+0x1f4>)
 8002502:	5ccb      	ldrb	r3, [r1, r3]
 8002504:	f003 031f 	and.w	r3, r3, #31
 8002508:	fa22 f303 	lsr.w	r3, r2, r3
 800250c:	4a09      	ldr	r2, [pc, #36]	; (8002534 <HAL_RCC_ClockConfig+0x1f8>)
 800250e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002510:	4b09      	ldr	r3, [pc, #36]	; (8002538 <HAL_RCC_ClockConfig+0x1fc>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4618      	mov	r0, r3
 8002516:	f7fe ff41 	bl	800139c <HAL_InitTick>
 800251a:	4603      	mov	r3, r0
 800251c:	72fb      	strb	r3, [r7, #11]

  return status;
 800251e:	7afb      	ldrb	r3, [r7, #11]
}
 8002520:	4618      	mov	r0, r3
 8002522:	3710      	adds	r7, #16
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	40022000 	.word	0x40022000
 800252c:	40021000 	.word	0x40021000
 8002530:	0800e280 	.word	0x0800e280
 8002534:	20000000 	.word	0x20000000
 8002538:	20000004 	.word	0x20000004

0800253c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800253c:	b480      	push	{r7}
 800253e:	b089      	sub	sp, #36	; 0x24
 8002540:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002542:	2300      	movs	r3, #0
 8002544:	61fb      	str	r3, [r7, #28]
 8002546:	2300      	movs	r3, #0
 8002548:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800254a:	4b3e      	ldr	r3, [pc, #248]	; (8002644 <HAL_RCC_GetSysClockFreq+0x108>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f003 030c 	and.w	r3, r3, #12
 8002552:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002554:	4b3b      	ldr	r3, [pc, #236]	; (8002644 <HAL_RCC_GetSysClockFreq+0x108>)
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	f003 0303 	and.w	r3, r3, #3
 800255c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d005      	beq.n	8002570 <HAL_RCC_GetSysClockFreq+0x34>
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	2b0c      	cmp	r3, #12
 8002568:	d121      	bne.n	80025ae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d11e      	bne.n	80025ae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002570:	4b34      	ldr	r3, [pc, #208]	; (8002644 <HAL_RCC_GetSysClockFreq+0x108>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0308 	and.w	r3, r3, #8
 8002578:	2b00      	cmp	r3, #0
 800257a:	d107      	bne.n	800258c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800257c:	4b31      	ldr	r3, [pc, #196]	; (8002644 <HAL_RCC_GetSysClockFreq+0x108>)
 800257e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002582:	0a1b      	lsrs	r3, r3, #8
 8002584:	f003 030f 	and.w	r3, r3, #15
 8002588:	61fb      	str	r3, [r7, #28]
 800258a:	e005      	b.n	8002598 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800258c:	4b2d      	ldr	r3, [pc, #180]	; (8002644 <HAL_RCC_GetSysClockFreq+0x108>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	091b      	lsrs	r3, r3, #4
 8002592:	f003 030f 	and.w	r3, r3, #15
 8002596:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002598:	4a2b      	ldr	r2, [pc, #172]	; (8002648 <HAL_RCC_GetSysClockFreq+0x10c>)
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025a0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d10d      	bne.n	80025c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025ac:	e00a      	b.n	80025c4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	2b04      	cmp	r3, #4
 80025b2:	d102      	bne.n	80025ba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80025b4:	4b25      	ldr	r3, [pc, #148]	; (800264c <HAL_RCC_GetSysClockFreq+0x110>)
 80025b6:	61bb      	str	r3, [r7, #24]
 80025b8:	e004      	b.n	80025c4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	2b08      	cmp	r3, #8
 80025be:	d101      	bne.n	80025c4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80025c0:	4b23      	ldr	r3, [pc, #140]	; (8002650 <HAL_RCC_GetSysClockFreq+0x114>)
 80025c2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	2b0c      	cmp	r3, #12
 80025c8:	d134      	bne.n	8002634 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025ca:	4b1e      	ldr	r3, [pc, #120]	; (8002644 <HAL_RCC_GetSysClockFreq+0x108>)
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	f003 0303 	and.w	r3, r3, #3
 80025d2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d003      	beq.n	80025e2 <HAL_RCC_GetSysClockFreq+0xa6>
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	2b03      	cmp	r3, #3
 80025de:	d003      	beq.n	80025e8 <HAL_RCC_GetSysClockFreq+0xac>
 80025e0:	e005      	b.n	80025ee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80025e2:	4b1a      	ldr	r3, [pc, #104]	; (800264c <HAL_RCC_GetSysClockFreq+0x110>)
 80025e4:	617b      	str	r3, [r7, #20]
      break;
 80025e6:	e005      	b.n	80025f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80025e8:	4b19      	ldr	r3, [pc, #100]	; (8002650 <HAL_RCC_GetSysClockFreq+0x114>)
 80025ea:	617b      	str	r3, [r7, #20]
      break;
 80025ec:	e002      	b.n	80025f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	617b      	str	r3, [r7, #20]
      break;
 80025f2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025f4:	4b13      	ldr	r3, [pc, #76]	; (8002644 <HAL_RCC_GetSysClockFreq+0x108>)
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	091b      	lsrs	r3, r3, #4
 80025fa:	f003 0307 	and.w	r3, r3, #7
 80025fe:	3301      	adds	r3, #1
 8002600:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002602:	4b10      	ldr	r3, [pc, #64]	; (8002644 <HAL_RCC_GetSysClockFreq+0x108>)
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	0a1b      	lsrs	r3, r3, #8
 8002608:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800260c:	697a      	ldr	r2, [r7, #20]
 800260e:	fb03 f202 	mul.w	r2, r3, r2
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	fbb2 f3f3 	udiv	r3, r2, r3
 8002618:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800261a:	4b0a      	ldr	r3, [pc, #40]	; (8002644 <HAL_RCC_GetSysClockFreq+0x108>)
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	0e5b      	lsrs	r3, r3, #25
 8002620:	f003 0303 	and.w	r3, r3, #3
 8002624:	3301      	adds	r3, #1
 8002626:	005b      	lsls	r3, r3, #1
 8002628:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800262a:	697a      	ldr	r2, [r7, #20]
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002632:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002634:	69bb      	ldr	r3, [r7, #24]
}
 8002636:	4618      	mov	r0, r3
 8002638:	3724      	adds	r7, #36	; 0x24
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	40021000 	.word	0x40021000
 8002648:	0800e298 	.word	0x0800e298
 800264c:	00f42400 	.word	0x00f42400
 8002650:	007a1200 	.word	0x007a1200

08002654 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002658:	4b03      	ldr	r3, [pc, #12]	; (8002668 <HAL_RCC_GetHCLKFreq+0x14>)
 800265a:	681b      	ldr	r3, [r3, #0]
}
 800265c:	4618      	mov	r0, r3
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	20000000 	.word	0x20000000

0800266c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002670:	f7ff fff0 	bl	8002654 <HAL_RCC_GetHCLKFreq>
 8002674:	4602      	mov	r2, r0
 8002676:	4b06      	ldr	r3, [pc, #24]	; (8002690 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	0a1b      	lsrs	r3, r3, #8
 800267c:	f003 0307 	and.w	r3, r3, #7
 8002680:	4904      	ldr	r1, [pc, #16]	; (8002694 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002682:	5ccb      	ldrb	r3, [r1, r3]
 8002684:	f003 031f 	and.w	r3, r3, #31
 8002688:	fa22 f303 	lsr.w	r3, r2, r3
}
 800268c:	4618      	mov	r0, r3
 800268e:	bd80      	pop	{r7, pc}
 8002690:	40021000 	.word	0x40021000
 8002694:	0800e290 	.word	0x0800e290

08002698 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800269c:	f7ff ffda 	bl	8002654 <HAL_RCC_GetHCLKFreq>
 80026a0:	4602      	mov	r2, r0
 80026a2:	4b06      	ldr	r3, [pc, #24]	; (80026bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	0adb      	lsrs	r3, r3, #11
 80026a8:	f003 0307 	and.w	r3, r3, #7
 80026ac:	4904      	ldr	r1, [pc, #16]	; (80026c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80026ae:	5ccb      	ldrb	r3, [r1, r3]
 80026b0:	f003 031f 	and.w	r3, r3, #31
 80026b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	40021000 	.word	0x40021000
 80026c0:	0800e290 	.word	0x0800e290

080026c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b086      	sub	sp, #24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80026cc:	2300      	movs	r3, #0
 80026ce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80026d0:	4b2a      	ldr	r3, [pc, #168]	; (800277c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d003      	beq.n	80026e4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80026dc:	f7ff f9ee 	bl	8001abc <HAL_PWREx_GetVoltageRange>
 80026e0:	6178      	str	r0, [r7, #20]
 80026e2:	e014      	b.n	800270e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80026e4:	4b25      	ldr	r3, [pc, #148]	; (800277c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e8:	4a24      	ldr	r2, [pc, #144]	; (800277c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ee:	6593      	str	r3, [r2, #88]	; 0x58
 80026f0:	4b22      	ldr	r3, [pc, #136]	; (800277c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f8:	60fb      	str	r3, [r7, #12]
 80026fa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80026fc:	f7ff f9de 	bl	8001abc <HAL_PWREx_GetVoltageRange>
 8002700:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002702:	4b1e      	ldr	r3, [pc, #120]	; (800277c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002706:	4a1d      	ldr	r2, [pc, #116]	; (800277c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002708:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800270c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002714:	d10b      	bne.n	800272e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2b80      	cmp	r3, #128	; 0x80
 800271a:	d919      	bls.n	8002750 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2ba0      	cmp	r3, #160	; 0xa0
 8002720:	d902      	bls.n	8002728 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002722:	2302      	movs	r3, #2
 8002724:	613b      	str	r3, [r7, #16]
 8002726:	e013      	b.n	8002750 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002728:	2301      	movs	r3, #1
 800272a:	613b      	str	r3, [r7, #16]
 800272c:	e010      	b.n	8002750 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2b80      	cmp	r3, #128	; 0x80
 8002732:	d902      	bls.n	800273a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002734:	2303      	movs	r3, #3
 8002736:	613b      	str	r3, [r7, #16]
 8002738:	e00a      	b.n	8002750 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2b80      	cmp	r3, #128	; 0x80
 800273e:	d102      	bne.n	8002746 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002740:	2302      	movs	r3, #2
 8002742:	613b      	str	r3, [r7, #16]
 8002744:	e004      	b.n	8002750 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2b70      	cmp	r3, #112	; 0x70
 800274a:	d101      	bne.n	8002750 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800274c:	2301      	movs	r3, #1
 800274e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002750:	4b0b      	ldr	r3, [pc, #44]	; (8002780 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f023 0207 	bic.w	r2, r3, #7
 8002758:	4909      	ldr	r1, [pc, #36]	; (8002780 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	4313      	orrs	r3, r2
 800275e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002760:	4b07      	ldr	r3, [pc, #28]	; (8002780 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0307 	and.w	r3, r3, #7
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	429a      	cmp	r2, r3
 800276c:	d001      	beq.n	8002772 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e000      	b.n	8002774 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002772:	2300      	movs	r3, #0
}
 8002774:	4618      	mov	r0, r3
 8002776:	3718      	adds	r7, #24
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	40021000 	.word	0x40021000
 8002780:	40022000 	.word	0x40022000

08002784 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800278c:	2300      	movs	r3, #0
 800278e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002790:	2300      	movs	r3, #0
 8002792:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800279c:	2b00      	cmp	r3, #0
 800279e:	d041      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027a4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80027a8:	d02a      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80027aa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80027ae:	d824      	bhi.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x76>
 80027b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80027b4:	d008      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80027b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80027ba:	d81e      	bhi.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x76>
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d00a      	beq.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80027c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027c4:	d010      	beq.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80027c6:	e018      	b.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80027c8:	4b86      	ldr	r3, [pc, #536]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	4a85      	ldr	r2, [pc, #532]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027d2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80027d4:	e015      	b.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	3304      	adds	r3, #4
 80027da:	2100      	movs	r1, #0
 80027dc:	4618      	mov	r0, r3
 80027de:	f000 fabb 	bl	8002d58 <RCCEx_PLLSAI1_Config>
 80027e2:	4603      	mov	r3, r0
 80027e4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80027e6:	e00c      	b.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	3320      	adds	r3, #32
 80027ec:	2100      	movs	r1, #0
 80027ee:	4618      	mov	r0, r3
 80027f0:	f000 fba6 	bl	8002f40 <RCCEx_PLLSAI2_Config>
 80027f4:	4603      	mov	r3, r0
 80027f6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80027f8:	e003      	b.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	74fb      	strb	r3, [r7, #19]
      break;
 80027fe:	e000      	b.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002800:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002802:	7cfb      	ldrb	r3, [r7, #19]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d10b      	bne.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002808:	4b76      	ldr	r3, [pc, #472]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800280a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800280e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002816:	4973      	ldr	r1, [pc, #460]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002818:	4313      	orrs	r3, r2
 800281a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800281e:	e001      	b.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002820:	7cfb      	ldrb	r3, [r7, #19]
 8002822:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d041      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002834:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002838:	d02a      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800283a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800283e:	d824      	bhi.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002840:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002844:	d008      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002846:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800284a:	d81e      	bhi.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800284c:	2b00      	cmp	r3, #0
 800284e:	d00a      	beq.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002850:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002854:	d010      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002856:	e018      	b.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002858:	4b62      	ldr	r3, [pc, #392]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	4a61      	ldr	r2, [pc, #388]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800285e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002862:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002864:	e015      	b.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	3304      	adds	r3, #4
 800286a:	2100      	movs	r1, #0
 800286c:	4618      	mov	r0, r3
 800286e:	f000 fa73 	bl	8002d58 <RCCEx_PLLSAI1_Config>
 8002872:	4603      	mov	r3, r0
 8002874:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002876:	e00c      	b.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	3320      	adds	r3, #32
 800287c:	2100      	movs	r1, #0
 800287e:	4618      	mov	r0, r3
 8002880:	f000 fb5e 	bl	8002f40 <RCCEx_PLLSAI2_Config>
 8002884:	4603      	mov	r3, r0
 8002886:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002888:	e003      	b.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	74fb      	strb	r3, [r7, #19]
      break;
 800288e:	e000      	b.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002890:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002892:	7cfb      	ldrb	r3, [r7, #19]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d10b      	bne.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002898:	4b52      	ldr	r3, [pc, #328]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800289a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800289e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028a6:	494f      	ldr	r1, [pc, #316]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80028ae:	e001      	b.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028b0:	7cfb      	ldrb	r3, [r7, #19]
 80028b2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	f000 80a0 	beq.w	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028c2:	2300      	movs	r3, #0
 80028c4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80028c6:	4b47      	ldr	r3, [pc, #284]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d101      	bne.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80028d2:	2301      	movs	r3, #1
 80028d4:	e000      	b.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80028d6:	2300      	movs	r3, #0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d00d      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028dc:	4b41      	ldr	r3, [pc, #260]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e0:	4a40      	ldr	r2, [pc, #256]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028e6:	6593      	str	r3, [r2, #88]	; 0x58
 80028e8:	4b3e      	ldr	r3, [pc, #248]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028f0:	60bb      	str	r3, [r7, #8]
 80028f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028f4:	2301      	movs	r3, #1
 80028f6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028f8:	4b3b      	ldr	r3, [pc, #236]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a3a      	ldr	r2, [pc, #232]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80028fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002902:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002904:	f7fe fd9a 	bl	800143c <HAL_GetTick>
 8002908:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800290a:	e009      	b.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800290c:	f7fe fd96 	bl	800143c <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b02      	cmp	r3, #2
 8002918:	d902      	bls.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	74fb      	strb	r3, [r7, #19]
        break;
 800291e:	e005      	b.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002920:	4b31      	ldr	r3, [pc, #196]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002928:	2b00      	cmp	r3, #0
 800292a:	d0ef      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800292c:	7cfb      	ldrb	r3, [r7, #19]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d15c      	bne.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002932:	4b2c      	ldr	r3, [pc, #176]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002934:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002938:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800293c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d01f      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800294a:	697a      	ldr	r2, [r7, #20]
 800294c:	429a      	cmp	r2, r3
 800294e:	d019      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002950:	4b24      	ldr	r3, [pc, #144]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002956:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800295a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800295c:	4b21      	ldr	r3, [pc, #132]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800295e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002962:	4a20      	ldr	r2, [pc, #128]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002964:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002968:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800296c:	4b1d      	ldr	r3, [pc, #116]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800296e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002972:	4a1c      	ldr	r2, [pc, #112]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002974:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002978:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800297c:	4a19      	ldr	r2, [pc, #100]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	2b00      	cmp	r3, #0
 800298c:	d016      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800298e:	f7fe fd55 	bl	800143c <HAL_GetTick>
 8002992:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002994:	e00b      	b.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002996:	f7fe fd51 	bl	800143c <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d902      	bls.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	74fb      	strb	r3, [r7, #19]
            break;
 80029ac:	e006      	b.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029ae:	4b0d      	ldr	r3, [pc, #52]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029b4:	f003 0302 	and.w	r3, r3, #2
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d0ec      	beq.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80029bc:	7cfb      	ldrb	r3, [r7, #19]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d10c      	bne.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029c2:	4b08      	ldr	r3, [pc, #32]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029d2:	4904      	ldr	r1, [pc, #16]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80029da:	e009      	b.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80029dc:	7cfb      	ldrb	r3, [r7, #19]
 80029de:	74bb      	strb	r3, [r7, #18]
 80029e0:	e006      	b.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80029e2:	bf00      	nop
 80029e4:	40021000 	.word	0x40021000
 80029e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029ec:	7cfb      	ldrb	r3, [r7, #19]
 80029ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029f0:	7c7b      	ldrb	r3, [r7, #17]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d105      	bne.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029f6:	4b9e      	ldr	r3, [pc, #632]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029fa:	4a9d      	ldr	r2, [pc, #628]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a00:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00a      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a0e:	4b98      	ldr	r3, [pc, #608]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a14:	f023 0203 	bic.w	r2, r3, #3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a1c:	4994      	ldr	r1, [pc, #592]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0302 	and.w	r3, r3, #2
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d00a      	beq.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a30:	4b8f      	ldr	r3, [pc, #572]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a36:	f023 020c 	bic.w	r2, r3, #12
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a3e:	498c      	ldr	r1, [pc, #560]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0304 	and.w	r3, r3, #4
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00a      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a52:	4b87      	ldr	r3, [pc, #540]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a58:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a60:	4983      	ldr	r1, [pc, #524]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0308 	and.w	r3, r3, #8
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d00a      	beq.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a74:	4b7e      	ldr	r3, [pc, #504]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a7a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a82:	497b      	ldr	r1, [pc, #492]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0310 	and.w	r3, r3, #16
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00a      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a96:	4b76      	ldr	r3, [pc, #472]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aa4:	4972      	ldr	r1, [pc, #456]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0320 	and.w	r3, r3, #32
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d00a      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ab8:	4b6d      	ldr	r3, [pc, #436]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002abe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ac6:	496a      	ldr	r1, [pc, #424]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00a      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ada:	4b65      	ldr	r3, [pc, #404]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae8:	4961      	ldr	r1, [pc, #388]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d00a      	beq.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002afc:	4b5c      	ldr	r3, [pc, #368]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b02:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b0a:	4959      	ldr	r1, [pc, #356]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00a      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b1e:	4b54      	ldr	r3, [pc, #336]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b24:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b2c:	4950      	ldr	r1, [pc, #320]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d00a      	beq.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b40:	4b4b      	ldr	r3, [pc, #300]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b46:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b4e:	4948      	ldr	r1, [pc, #288]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d00a      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b62:	4b43      	ldr	r3, [pc, #268]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b68:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b70:	493f      	ldr	r1, [pc, #252]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d028      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b84:	4b3a      	ldr	r3, [pc, #232]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b8a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b92:	4937      	ldr	r1, [pc, #220]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ba2:	d106      	bne.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ba4:	4b32      	ldr	r3, [pc, #200]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	4a31      	ldr	r2, [pc, #196]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002baa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bae:	60d3      	str	r3, [r2, #12]
 8002bb0:	e011      	b.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bb6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002bba:	d10c      	bne.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	3304      	adds	r3, #4
 8002bc0:	2101      	movs	r1, #1
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f000 f8c8 	bl	8002d58 <RCCEx_PLLSAI1_Config>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002bcc:	7cfb      	ldrb	r3, [r7, #19]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002bd2:	7cfb      	ldrb	r3, [r7, #19]
 8002bd4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d028      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002be2:	4b23      	ldr	r3, [pc, #140]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf0:	491f      	ldr	r1, [pc, #124]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bfc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c00:	d106      	bne.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c02:	4b1b      	ldr	r3, [pc, #108]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	4a1a      	ldr	r2, [pc, #104]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c0c:	60d3      	str	r3, [r2, #12]
 8002c0e:	e011      	b.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c18:	d10c      	bne.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	3304      	adds	r3, #4
 8002c1e:	2101      	movs	r1, #1
 8002c20:	4618      	mov	r0, r3
 8002c22:	f000 f899 	bl	8002d58 <RCCEx_PLLSAI1_Config>
 8002c26:	4603      	mov	r3, r0
 8002c28:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c2a:	7cfb      	ldrb	r3, [r7, #19]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d001      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002c30:	7cfb      	ldrb	r3, [r7, #19]
 8002c32:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d02b      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c40:	4b0b      	ldr	r3, [pc, #44]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c46:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c4e:	4908      	ldr	r1, [pc, #32]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c5e:	d109      	bne.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c60:	4b03      	ldr	r3, [pc, #12]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	4a02      	ldr	r2, [pc, #8]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c6a:	60d3      	str	r3, [r2, #12]
 8002c6c:	e014      	b.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002c6e:	bf00      	nop
 8002c70:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c7c:	d10c      	bne.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	3304      	adds	r3, #4
 8002c82:	2101      	movs	r1, #1
 8002c84:	4618      	mov	r0, r3
 8002c86:	f000 f867 	bl	8002d58 <RCCEx_PLLSAI1_Config>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c8e:	7cfb      	ldrb	r3, [r7, #19]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002c94:	7cfb      	ldrb	r3, [r7, #19]
 8002c96:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d02f      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ca4:	4b2b      	ldr	r3, [pc, #172]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002caa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cb2:	4928      	ldr	r1, [pc, #160]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cc2:	d10d      	bne.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	3304      	adds	r3, #4
 8002cc8:	2102      	movs	r1, #2
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f000 f844 	bl	8002d58 <RCCEx_PLLSAI1_Config>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cd4:	7cfb      	ldrb	r3, [r7, #19]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d014      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002cda:	7cfb      	ldrb	r3, [r7, #19]
 8002cdc:	74bb      	strb	r3, [r7, #18]
 8002cde:	e011      	b.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ce4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ce8:	d10c      	bne.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	3320      	adds	r3, #32
 8002cee:	2102      	movs	r1, #2
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f000 f925 	bl	8002f40 <RCCEx_PLLSAI2_Config>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cfa:	7cfb      	ldrb	r3, [r7, #19]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d001      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002d00:	7cfb      	ldrb	r3, [r7, #19]
 8002d02:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d00a      	beq.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002d10:	4b10      	ldr	r3, [pc, #64]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d16:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d1e:	490d      	ldr	r1, [pc, #52]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00b      	beq.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002d32:	4b08      	ldr	r3, [pc, #32]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d38:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d42:	4904      	ldr	r1, [pc, #16]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002d4a:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3718      	adds	r7, #24
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	40021000 	.word	0x40021000

08002d58 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d62:	2300      	movs	r3, #0
 8002d64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d66:	4b75      	ldr	r3, [pc, #468]	; (8002f3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	f003 0303 	and.w	r3, r3, #3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d018      	beq.n	8002da4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002d72:	4b72      	ldr	r3, [pc, #456]	; (8002f3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	f003 0203 	and.w	r2, r3, #3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d10d      	bne.n	8002d9e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
       ||
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d009      	beq.n	8002d9e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002d8a:	4b6c      	ldr	r3, [pc, #432]	; (8002f3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	091b      	lsrs	r3, r3, #4
 8002d90:	f003 0307 	and.w	r3, r3, #7
 8002d94:	1c5a      	adds	r2, r3, #1
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
       ||
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d047      	beq.n	8002e2e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	73fb      	strb	r3, [r7, #15]
 8002da2:	e044      	b.n	8002e2e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2b03      	cmp	r3, #3
 8002daa:	d018      	beq.n	8002dde <RCCEx_PLLSAI1_Config+0x86>
 8002dac:	2b03      	cmp	r3, #3
 8002dae:	d825      	bhi.n	8002dfc <RCCEx_PLLSAI1_Config+0xa4>
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d002      	beq.n	8002dba <RCCEx_PLLSAI1_Config+0x62>
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d009      	beq.n	8002dcc <RCCEx_PLLSAI1_Config+0x74>
 8002db8:	e020      	b.n	8002dfc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002dba:	4b60      	ldr	r3, [pc, #384]	; (8002f3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d11d      	bne.n	8002e02 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dca:	e01a      	b.n	8002e02 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002dcc:	4b5b      	ldr	r3, [pc, #364]	; (8002f3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d116      	bne.n	8002e06 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ddc:	e013      	b.n	8002e06 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002dde:	4b57      	ldr	r3, [pc, #348]	; (8002f3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d10f      	bne.n	8002e0a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002dea:	4b54      	ldr	r3, [pc, #336]	; (8002f3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d109      	bne.n	8002e0a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002dfa:	e006      	b.n	8002e0a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	73fb      	strb	r3, [r7, #15]
      break;
 8002e00:	e004      	b.n	8002e0c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e02:	bf00      	nop
 8002e04:	e002      	b.n	8002e0c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e06:	bf00      	nop
 8002e08:	e000      	b.n	8002e0c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e0a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e0c:	7bfb      	ldrb	r3, [r7, #15]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d10d      	bne.n	8002e2e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e12:	4b4a      	ldr	r3, [pc, #296]	; (8002f3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6819      	ldr	r1, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	3b01      	subs	r3, #1
 8002e24:	011b      	lsls	r3, r3, #4
 8002e26:	430b      	orrs	r3, r1
 8002e28:	4944      	ldr	r1, [pc, #272]	; (8002f3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e2e:	7bfb      	ldrb	r3, [r7, #15]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d17d      	bne.n	8002f30 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002e34:	4b41      	ldr	r3, [pc, #260]	; (8002f3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a40      	ldr	r2, [pc, #256]	; (8002f3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e3a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e40:	f7fe fafc 	bl	800143c <HAL_GetTick>
 8002e44:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e46:	e009      	b.n	8002e5c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e48:	f7fe faf8 	bl	800143c <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d902      	bls.n	8002e5c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	73fb      	strb	r3, [r7, #15]
        break;
 8002e5a:	e005      	b.n	8002e68 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e5c:	4b37      	ldr	r3, [pc, #220]	; (8002f3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d1ef      	bne.n	8002e48 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002e68:	7bfb      	ldrb	r3, [r7, #15]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d160      	bne.n	8002f30 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d111      	bne.n	8002e98 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e74:	4b31      	ldr	r3, [pc, #196]	; (8002f3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e76:	691b      	ldr	r3, [r3, #16]
 8002e78:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002e7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	6892      	ldr	r2, [r2, #8]
 8002e84:	0211      	lsls	r1, r2, #8
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	68d2      	ldr	r2, [r2, #12]
 8002e8a:	0912      	lsrs	r2, r2, #4
 8002e8c:	0452      	lsls	r2, r2, #17
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	492a      	ldr	r1, [pc, #168]	; (8002f3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	610b      	str	r3, [r1, #16]
 8002e96:	e027      	b.n	8002ee8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d112      	bne.n	8002ec4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e9e:	4b27      	ldr	r3, [pc, #156]	; (8002f3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002ea6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	6892      	ldr	r2, [r2, #8]
 8002eae:	0211      	lsls	r1, r2, #8
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	6912      	ldr	r2, [r2, #16]
 8002eb4:	0852      	lsrs	r2, r2, #1
 8002eb6:	3a01      	subs	r2, #1
 8002eb8:	0552      	lsls	r2, r2, #21
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	491f      	ldr	r1, [pc, #124]	; (8002f3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	610b      	str	r3, [r1, #16]
 8002ec2:	e011      	b.n	8002ee8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ec4:	4b1d      	ldr	r3, [pc, #116]	; (8002f3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002ecc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	6892      	ldr	r2, [r2, #8]
 8002ed4:	0211      	lsls	r1, r2, #8
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	6952      	ldr	r2, [r2, #20]
 8002eda:	0852      	lsrs	r2, r2, #1
 8002edc:	3a01      	subs	r2, #1
 8002ede:	0652      	lsls	r2, r2, #25
 8002ee0:	430a      	orrs	r2, r1
 8002ee2:	4916      	ldr	r1, [pc, #88]	; (8002f3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002ee8:	4b14      	ldr	r3, [pc, #80]	; (8002f3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a13      	ldr	r2, [pc, #76]	; (8002f3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ef2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ef4:	f7fe faa2 	bl	800143c <HAL_GetTick>
 8002ef8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002efa:	e009      	b.n	8002f10 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002efc:	f7fe fa9e 	bl	800143c <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d902      	bls.n	8002f10 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	73fb      	strb	r3, [r7, #15]
          break;
 8002f0e:	e005      	b.n	8002f1c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f10:	4b0a      	ldr	r3, [pc, #40]	; (8002f3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d0ef      	beq.n	8002efc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002f1c:	7bfb      	ldrb	r3, [r7, #15]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d106      	bne.n	8002f30 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002f22:	4b06      	ldr	r3, [pc, #24]	; (8002f3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f24:	691a      	ldr	r2, [r3, #16]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	4904      	ldr	r1, [pc, #16]	; (8002f3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3710      	adds	r7, #16
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	40021000 	.word	0x40021000

08002f40 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f4e:	4b6a      	ldr	r3, [pc, #424]	; (80030f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	f003 0303 	and.w	r3, r3, #3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d018      	beq.n	8002f8c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002f5a:	4b67      	ldr	r3, [pc, #412]	; (80030f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	f003 0203 	and.w	r2, r3, #3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d10d      	bne.n	8002f86 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
       ||
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d009      	beq.n	8002f86 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002f72:	4b61      	ldr	r3, [pc, #388]	; (80030f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	091b      	lsrs	r3, r3, #4
 8002f78:	f003 0307 	and.w	r3, r3, #7
 8002f7c:	1c5a      	adds	r2, r3, #1
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
       ||
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d047      	beq.n	8003016 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	73fb      	strb	r3, [r7, #15]
 8002f8a:	e044      	b.n	8003016 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2b03      	cmp	r3, #3
 8002f92:	d018      	beq.n	8002fc6 <RCCEx_PLLSAI2_Config+0x86>
 8002f94:	2b03      	cmp	r3, #3
 8002f96:	d825      	bhi.n	8002fe4 <RCCEx_PLLSAI2_Config+0xa4>
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d002      	beq.n	8002fa2 <RCCEx_PLLSAI2_Config+0x62>
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d009      	beq.n	8002fb4 <RCCEx_PLLSAI2_Config+0x74>
 8002fa0:	e020      	b.n	8002fe4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002fa2:	4b55      	ldr	r3, [pc, #340]	; (80030f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0302 	and.w	r3, r3, #2
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d11d      	bne.n	8002fea <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fb2:	e01a      	b.n	8002fea <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002fb4:	4b50      	ldr	r3, [pc, #320]	; (80030f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d116      	bne.n	8002fee <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fc4:	e013      	b.n	8002fee <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002fc6:	4b4c      	ldr	r3, [pc, #304]	; (80030f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d10f      	bne.n	8002ff2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002fd2:	4b49      	ldr	r3, [pc, #292]	; (80030f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d109      	bne.n	8002ff2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002fe2:	e006      	b.n	8002ff2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	73fb      	strb	r3, [r7, #15]
      break;
 8002fe8:	e004      	b.n	8002ff4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002fea:	bf00      	nop
 8002fec:	e002      	b.n	8002ff4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002fee:	bf00      	nop
 8002ff0:	e000      	b.n	8002ff4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ff2:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ff4:	7bfb      	ldrb	r3, [r7, #15]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d10d      	bne.n	8003016 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002ffa:	4b3f      	ldr	r3, [pc, #252]	; (80030f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6819      	ldr	r1, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	3b01      	subs	r3, #1
 800300c:	011b      	lsls	r3, r3, #4
 800300e:	430b      	orrs	r3, r1
 8003010:	4939      	ldr	r1, [pc, #228]	; (80030f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003012:	4313      	orrs	r3, r2
 8003014:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003016:	7bfb      	ldrb	r3, [r7, #15]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d167      	bne.n	80030ec <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800301c:	4b36      	ldr	r3, [pc, #216]	; (80030f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a35      	ldr	r2, [pc, #212]	; (80030f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003022:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003026:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003028:	f7fe fa08 	bl	800143c <HAL_GetTick>
 800302c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800302e:	e009      	b.n	8003044 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003030:	f7fe fa04 	bl	800143c <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b02      	cmp	r3, #2
 800303c:	d902      	bls.n	8003044 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	73fb      	strb	r3, [r7, #15]
        break;
 8003042:	e005      	b.n	8003050 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003044:	4b2c      	ldr	r3, [pc, #176]	; (80030f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1ef      	bne.n	8003030 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003050:	7bfb      	ldrb	r3, [r7, #15]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d14a      	bne.n	80030ec <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d111      	bne.n	8003080 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800305c:	4b26      	ldr	r3, [pc, #152]	; (80030f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800305e:	695b      	ldr	r3, [r3, #20]
 8003060:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003064:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	6892      	ldr	r2, [r2, #8]
 800306c:	0211      	lsls	r1, r2, #8
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	68d2      	ldr	r2, [r2, #12]
 8003072:	0912      	lsrs	r2, r2, #4
 8003074:	0452      	lsls	r2, r2, #17
 8003076:	430a      	orrs	r2, r1
 8003078:	491f      	ldr	r1, [pc, #124]	; (80030f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800307a:	4313      	orrs	r3, r2
 800307c:	614b      	str	r3, [r1, #20]
 800307e:	e011      	b.n	80030a4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003080:	4b1d      	ldr	r3, [pc, #116]	; (80030f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003082:	695b      	ldr	r3, [r3, #20]
 8003084:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003088:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	6892      	ldr	r2, [r2, #8]
 8003090:	0211      	lsls	r1, r2, #8
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	6912      	ldr	r2, [r2, #16]
 8003096:	0852      	lsrs	r2, r2, #1
 8003098:	3a01      	subs	r2, #1
 800309a:	0652      	lsls	r2, r2, #25
 800309c:	430a      	orrs	r2, r1
 800309e:	4916      	ldr	r1, [pc, #88]	; (80030f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80030a4:	4b14      	ldr	r3, [pc, #80]	; (80030f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a13      	ldr	r2, [pc, #76]	; (80030f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030ae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030b0:	f7fe f9c4 	bl	800143c <HAL_GetTick>
 80030b4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80030b6:	e009      	b.n	80030cc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80030b8:	f7fe f9c0 	bl	800143c <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d902      	bls.n	80030cc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	73fb      	strb	r3, [r7, #15]
          break;
 80030ca:	e005      	b.n	80030d8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80030cc:	4b0a      	ldr	r3, [pc, #40]	; (80030f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d0ef      	beq.n	80030b8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80030d8:	7bfb      	ldrb	r3, [r7, #15]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d106      	bne.n	80030ec <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80030de:	4b06      	ldr	r3, [pc, #24]	; (80030f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030e0:	695a      	ldr	r2, [r3, #20]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	4904      	ldr	r1, [pc, #16]	; (80030f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80030ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3710      	adds	r7, #16
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	40021000 	.word	0x40021000

080030fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e095      	b.n	800323a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003112:	2b00      	cmp	r3, #0
 8003114:	d108      	bne.n	8003128 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800311e:	d009      	beq.n	8003134 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	61da      	str	r2, [r3, #28]
 8003126:	e005      	b.n	8003134 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2b00      	cmp	r3, #0
 8003144:	d106      	bne.n	8003154 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f7fd ff6e 	bl	8001030 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2202      	movs	r2, #2
 8003158:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800316a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003174:	d902      	bls.n	800317c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003176:	2300      	movs	r3, #0
 8003178:	60fb      	str	r3, [r7, #12]
 800317a:	e002      	b.n	8003182 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800317c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003180:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800318a:	d007      	beq.n	800319c <HAL_SPI_Init+0xa0>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003194:	d002      	beq.n	800319c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80031ac:	431a      	orrs	r2, r3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	431a      	orrs	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	695b      	ldr	r3, [r3, #20]
 80031bc:	f003 0301 	and.w	r3, r3, #1
 80031c0:	431a      	orrs	r2, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031ca:	431a      	orrs	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	69db      	ldr	r3, [r3, #28]
 80031d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031d4:	431a      	orrs	r2, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a1b      	ldr	r3, [r3, #32]
 80031da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031de:	ea42 0103 	orr.w	r1, r2, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	430a      	orrs	r2, r1
 80031f0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	0c1b      	lsrs	r3, r3, #16
 80031f8:	f003 0204 	and.w	r2, r3, #4
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003200:	f003 0310 	and.w	r3, r3, #16
 8003204:	431a      	orrs	r2, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800320a:	f003 0308 	and.w	r3, r3, #8
 800320e:	431a      	orrs	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003218:	ea42 0103 	orr.w	r1, r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	430a      	orrs	r2, r1
 8003228:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3710      	adds	r7, #16
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003242:	b580      	push	{r7, lr}
 8003244:	b08a      	sub	sp, #40	; 0x28
 8003246:	af00      	add	r7, sp, #0
 8003248:	60f8      	str	r0, [r7, #12]
 800324a:	60b9      	str	r1, [r7, #8]
 800324c:	607a      	str	r2, [r7, #4]
 800324e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003250:	2301      	movs	r3, #1
 8003252:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003254:	2300      	movs	r3, #0
 8003256:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003260:	2b01      	cmp	r3, #1
 8003262:	d101      	bne.n	8003268 <HAL_SPI_TransmitReceive+0x26>
 8003264:	2302      	movs	r3, #2
 8003266:	e20a      	b.n	800367e <HAL_SPI_TransmitReceive+0x43c>
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003270:	f7fe f8e4 	bl	800143c <HAL_GetTick>
 8003274:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800327c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003284:	887b      	ldrh	r3, [r7, #2]
 8003286:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003288:	887b      	ldrh	r3, [r7, #2]
 800328a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800328c:	7efb      	ldrb	r3, [r7, #27]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d00e      	beq.n	80032b0 <HAL_SPI_TransmitReceive+0x6e>
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003298:	d106      	bne.n	80032a8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d102      	bne.n	80032a8 <HAL_SPI_TransmitReceive+0x66>
 80032a2:	7efb      	ldrb	r3, [r7, #27]
 80032a4:	2b04      	cmp	r3, #4
 80032a6:	d003      	beq.n	80032b0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80032a8:	2302      	movs	r3, #2
 80032aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80032ae:	e1e0      	b.n	8003672 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d005      	beq.n	80032c2 <HAL_SPI_TransmitReceive+0x80>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d002      	beq.n	80032c2 <HAL_SPI_TransmitReceive+0x80>
 80032bc:	887b      	ldrh	r3, [r7, #2]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d103      	bne.n	80032ca <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80032c8:	e1d3      	b.n	8003672 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b04      	cmp	r3, #4
 80032d4:	d003      	beq.n	80032de <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2205      	movs	r2, #5
 80032da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	887a      	ldrh	r2, [r7, #2]
 80032ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	887a      	ldrh	r2, [r7, #2]
 80032f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	68ba      	ldr	r2, [r7, #8]
 80032fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	887a      	ldrh	r2, [r7, #2]
 8003304:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	887a      	ldrh	r2, [r7, #2]
 800330a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2200      	movs	r2, #0
 8003310:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2200      	movs	r2, #0
 8003316:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003320:	d802      	bhi.n	8003328 <HAL_SPI_TransmitReceive+0xe6>
 8003322:	8a3b      	ldrh	r3, [r7, #16]
 8003324:	2b01      	cmp	r3, #1
 8003326:	d908      	bls.n	800333a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	685a      	ldr	r2, [r3, #4]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003336:	605a      	str	r2, [r3, #4]
 8003338:	e007      	b.n	800334a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	685a      	ldr	r2, [r3, #4]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003348:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003354:	2b40      	cmp	r3, #64	; 0x40
 8003356:	d007      	beq.n	8003368 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003366:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003370:	f240 8081 	bls.w	8003476 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d002      	beq.n	8003382 <HAL_SPI_TransmitReceive+0x140>
 800337c:	8a7b      	ldrh	r3, [r7, #18]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d16d      	bne.n	800345e <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003386:	881a      	ldrh	r2, [r3, #0]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003392:	1c9a      	adds	r2, r3, #2
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800339c:	b29b      	uxth	r3, r3
 800339e:	3b01      	subs	r3, #1
 80033a0:	b29a      	uxth	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033a6:	e05a      	b.n	800345e <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f003 0302 	and.w	r3, r3, #2
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d11b      	bne.n	80033ee <HAL_SPI_TransmitReceive+0x1ac>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d016      	beq.n	80033ee <HAL_SPI_TransmitReceive+0x1ac>
 80033c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d113      	bne.n	80033ee <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ca:	881a      	ldrh	r2, [r3, #0]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d6:	1c9a      	adds	r2, r3, #2
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	3b01      	subs	r3, #1
 80033e4:	b29a      	uxth	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80033ea:	2300      	movs	r3, #0
 80033ec:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f003 0301 	and.w	r3, r3, #1
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d11c      	bne.n	8003436 <HAL_SPI_TransmitReceive+0x1f4>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003402:	b29b      	uxth	r3, r3
 8003404:	2b00      	cmp	r3, #0
 8003406:	d016      	beq.n	8003436 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	68da      	ldr	r2, [r3, #12]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003412:	b292      	uxth	r2, r2
 8003414:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341a:	1c9a      	adds	r2, r3, #2
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003426:	b29b      	uxth	r3, r3
 8003428:	3b01      	subs	r3, #1
 800342a:	b29a      	uxth	r2, r3
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003432:	2301      	movs	r3, #1
 8003434:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003436:	f7fe f801 	bl	800143c <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003442:	429a      	cmp	r2, r3
 8003444:	d80b      	bhi.n	800345e <HAL_SPI_TransmitReceive+0x21c>
 8003446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800344c:	d007      	beq.n	800345e <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800345c:	e109      	b.n	8003672 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003462:	b29b      	uxth	r3, r3
 8003464:	2b00      	cmp	r3, #0
 8003466:	d19f      	bne.n	80033a8 <HAL_SPI_TransmitReceive+0x166>
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800346e:	b29b      	uxth	r3, r3
 8003470:	2b00      	cmp	r3, #0
 8003472:	d199      	bne.n	80033a8 <HAL_SPI_TransmitReceive+0x166>
 8003474:	e0e3      	b.n	800363e <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d003      	beq.n	8003486 <HAL_SPI_TransmitReceive+0x244>
 800347e:	8a7b      	ldrh	r3, [r7, #18]
 8003480:	2b01      	cmp	r3, #1
 8003482:	f040 80cf 	bne.w	8003624 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800348a:	b29b      	uxth	r3, r3
 800348c:	2b01      	cmp	r3, #1
 800348e:	d912      	bls.n	80034b6 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003494:	881a      	ldrh	r2, [r3, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a0:	1c9a      	adds	r2, r3, #2
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	3b02      	subs	r3, #2
 80034ae:	b29a      	uxth	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80034b4:	e0b6      	b.n	8003624 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	330c      	adds	r3, #12
 80034c0:	7812      	ldrb	r2, [r2, #0]
 80034c2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c8:	1c5a      	adds	r2, r3, #1
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	3b01      	subs	r3, #1
 80034d6:	b29a      	uxth	r2, r3
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034dc:	e0a2      	b.n	8003624 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f003 0302 	and.w	r3, r3, #2
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d134      	bne.n	8003556 <HAL_SPI_TransmitReceive+0x314>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d02f      	beq.n	8003556 <HAL_SPI_TransmitReceive+0x314>
 80034f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d12c      	bne.n	8003556 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003500:	b29b      	uxth	r3, r3
 8003502:	2b01      	cmp	r3, #1
 8003504:	d912      	bls.n	800352c <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800350a:	881a      	ldrh	r2, [r3, #0]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003516:	1c9a      	adds	r2, r3, #2
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003520:	b29b      	uxth	r3, r3
 8003522:	3b02      	subs	r3, #2
 8003524:	b29a      	uxth	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	87da      	strh	r2, [r3, #62]	; 0x3e
 800352a:	e012      	b.n	8003552 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	330c      	adds	r3, #12
 8003536:	7812      	ldrb	r2, [r2, #0]
 8003538:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800353e:	1c5a      	adds	r2, r3, #1
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003548:	b29b      	uxth	r3, r3
 800354a:	3b01      	subs	r3, #1
 800354c:	b29a      	uxth	r2, r3
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003552:	2300      	movs	r3, #0
 8003554:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f003 0301 	and.w	r3, r3, #1
 8003560:	2b01      	cmp	r3, #1
 8003562:	d148      	bne.n	80035f6 <HAL_SPI_TransmitReceive+0x3b4>
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800356a:	b29b      	uxth	r3, r3
 800356c:	2b00      	cmp	r3, #0
 800356e:	d042      	beq.n	80035f6 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003576:	b29b      	uxth	r3, r3
 8003578:	2b01      	cmp	r3, #1
 800357a:	d923      	bls.n	80035c4 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68da      	ldr	r2, [r3, #12]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003586:	b292      	uxth	r2, r2
 8003588:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358e:	1c9a      	adds	r2, r3, #2
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800359a:	b29b      	uxth	r3, r3
 800359c:	3b02      	subs	r3, #2
 800359e:	b29a      	uxth	r2, r3
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d81f      	bhi.n	80035f2 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	685a      	ldr	r2, [r3, #4]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80035c0:	605a      	str	r2, [r3, #4]
 80035c2:	e016      	b.n	80035f2 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f103 020c 	add.w	r2, r3, #12
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d0:	7812      	ldrb	r2, [r2, #0]
 80035d2:	b2d2      	uxtb	r2, r2
 80035d4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035da:	1c5a      	adds	r2, r3, #1
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	3b01      	subs	r3, #1
 80035ea:	b29a      	uxth	r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80035f2:	2301      	movs	r3, #1
 80035f4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80035f6:	f7fd ff21 	bl	800143c <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003602:	429a      	cmp	r2, r3
 8003604:	d803      	bhi.n	800360e <HAL_SPI_TransmitReceive+0x3cc>
 8003606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800360c:	d102      	bne.n	8003614 <HAL_SPI_TransmitReceive+0x3d2>
 800360e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003610:	2b00      	cmp	r3, #0
 8003612:	d107      	bne.n	8003624 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2201      	movs	r2, #1
 800361e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8003622:	e026      	b.n	8003672 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003628:	b29b      	uxth	r3, r3
 800362a:	2b00      	cmp	r3, #0
 800362c:	f47f af57 	bne.w	80034de <HAL_SPI_TransmitReceive+0x29c>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003636:	b29b      	uxth	r3, r3
 8003638:	2b00      	cmp	r3, #0
 800363a:	f47f af50 	bne.w	80034de <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800363e:	69fa      	ldr	r2, [r7, #28]
 8003640:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003642:	68f8      	ldr	r0, [r7, #12]
 8003644:	f000 f93e 	bl	80038c4 <SPI_EndRxTxTransaction>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d005      	beq.n	800365a <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2220      	movs	r2, #32
 8003658:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800365e:	2b00      	cmp	r3, #0
 8003660:	d003      	beq.n	800366a <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003668:	e003      	b.n	8003672 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2201      	movs	r2, #1
 800366e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800367a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800367e:	4618      	mov	r0, r3
 8003680:	3728      	adds	r7, #40	; 0x28
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
	...

08003688 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b088      	sub	sp, #32
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	603b      	str	r3, [r7, #0]
 8003694:	4613      	mov	r3, r2
 8003696:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003698:	f7fd fed0 	bl	800143c <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a0:	1a9b      	subs	r3, r3, r2
 80036a2:	683a      	ldr	r2, [r7, #0]
 80036a4:	4413      	add	r3, r2
 80036a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80036a8:	f7fd fec8 	bl	800143c <HAL_GetTick>
 80036ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80036ae:	4b39      	ldr	r3, [pc, #228]	; (8003794 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	015b      	lsls	r3, r3, #5
 80036b4:	0d1b      	lsrs	r3, r3, #20
 80036b6:	69fa      	ldr	r2, [r7, #28]
 80036b8:	fb02 f303 	mul.w	r3, r2, r3
 80036bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036be:	e054      	b.n	800376a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c6:	d050      	beq.n	800376a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80036c8:	f7fd feb8 	bl	800143c <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	69fa      	ldr	r2, [r7, #28]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d902      	bls.n	80036de <SPI_WaitFlagStateUntilTimeout+0x56>
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d13d      	bne.n	800375a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	685a      	ldr	r2, [r3, #4]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80036ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036f6:	d111      	bne.n	800371c <SPI_WaitFlagStateUntilTimeout+0x94>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003700:	d004      	beq.n	800370c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800370a:	d107      	bne.n	800371c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800371a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003720:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003724:	d10f      	bne.n	8003746 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003734:	601a      	str	r2, [r3, #0]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003744:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2201      	movs	r2, #1
 800374a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e017      	b.n	800378a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d101      	bne.n	8003764 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003760:	2300      	movs	r3, #0
 8003762:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	3b01      	subs	r3, #1
 8003768:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	689a      	ldr	r2, [r3, #8]
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	4013      	ands	r3, r2
 8003774:	68ba      	ldr	r2, [r7, #8]
 8003776:	429a      	cmp	r2, r3
 8003778:	bf0c      	ite	eq
 800377a:	2301      	moveq	r3, #1
 800377c:	2300      	movne	r3, #0
 800377e:	b2db      	uxtb	r3, r3
 8003780:	461a      	mov	r2, r3
 8003782:	79fb      	ldrb	r3, [r7, #7]
 8003784:	429a      	cmp	r2, r3
 8003786:	d19b      	bne.n	80036c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3720      	adds	r7, #32
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	20000000 	.word	0x20000000

08003798 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b08a      	sub	sp, #40	; 0x28
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	607a      	str	r2, [r7, #4]
 80037a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80037a6:	2300      	movs	r3, #0
 80037a8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80037aa:	f7fd fe47 	bl	800143c <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b2:	1a9b      	subs	r3, r3, r2
 80037b4:	683a      	ldr	r2, [r7, #0]
 80037b6:	4413      	add	r3, r2
 80037b8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80037ba:	f7fd fe3f 	bl	800143c <HAL_GetTick>
 80037be:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	330c      	adds	r3, #12
 80037c6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80037c8:	4b3d      	ldr	r3, [pc, #244]	; (80038c0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	4613      	mov	r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	4413      	add	r3, r2
 80037d2:	00da      	lsls	r2, r3, #3
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	0d1b      	lsrs	r3, r3, #20
 80037d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037da:	fb02 f303 	mul.w	r3, r2, r3
 80037de:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80037e0:	e060      	b.n	80038a4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80037e8:	d107      	bne.n	80037fa <SPI_WaitFifoStateUntilTimeout+0x62>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d104      	bne.n	80037fa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80037f8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003800:	d050      	beq.n	80038a4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003802:	f7fd fe1b 	bl	800143c <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	6a3b      	ldr	r3, [r7, #32]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800380e:	429a      	cmp	r2, r3
 8003810:	d902      	bls.n	8003818 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003814:	2b00      	cmp	r3, #0
 8003816:	d13d      	bne.n	8003894 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	685a      	ldr	r2, [r3, #4]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003826:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003830:	d111      	bne.n	8003856 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800383a:	d004      	beq.n	8003846 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003844:	d107      	bne.n	8003856 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003854:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800385e:	d10f      	bne.n	8003880 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800386e:	601a      	str	r2, [r3, #0]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800387e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e010      	b.n	80038b6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d101      	bne.n	800389e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800389a:	2300      	movs	r3, #0
 800389c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	3b01      	subs	r3, #1
 80038a2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	689a      	ldr	r2, [r3, #8]
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	4013      	ands	r3, r2
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d196      	bne.n	80037e2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3728      	adds	r7, #40	; 0x28
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	20000000 	.word	0x20000000

080038c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b086      	sub	sp, #24
 80038c8:	af02      	add	r7, sp, #8
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	9300      	str	r3, [sp, #0]
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80038dc:	68f8      	ldr	r0, [r7, #12]
 80038de:	f7ff ff5b 	bl	8003798 <SPI_WaitFifoStateUntilTimeout>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d007      	beq.n	80038f8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038ec:	f043 0220 	orr.w	r2, r3, #32
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e027      	b.n	8003948 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	9300      	str	r3, [sp, #0]
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	2200      	movs	r2, #0
 8003900:	2180      	movs	r1, #128	; 0x80
 8003902:	68f8      	ldr	r0, [r7, #12]
 8003904:	f7ff fec0 	bl	8003688 <SPI_WaitFlagStateUntilTimeout>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d007      	beq.n	800391e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003912:	f043 0220 	orr.w	r2, r3, #32
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e014      	b.n	8003948 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	9300      	str	r3, [sp, #0]
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	2200      	movs	r2, #0
 8003926:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800392a:	68f8      	ldr	r0, [r7, #12]
 800392c:	f7ff ff34 	bl	8003798 <SPI_WaitFifoStateUntilTimeout>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d007      	beq.n	8003946 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800393a:	f043 0220 	orr.w	r2, r3, #32
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e000      	b.n	8003948 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003946:	2300      	movs	r3, #0
}
 8003948:	4618      	mov	r0, r3
 800394a:	3710      	adds	r7, #16
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d101      	bne.n	8003962 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e040      	b.n	80039e4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003966:	2b00      	cmp	r3, #0
 8003968:	d106      	bne.n	8003978 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f7fd fba0 	bl	80010b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2224      	movs	r2, #36	; 0x24
 800397c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f022 0201 	bic.w	r2, r2, #1
 800398c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003992:	2b00      	cmp	r3, #0
 8003994:	d002      	beq.n	800399c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 fb6a 	bl	8004070 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f000 f8af 	bl	8003b00 <UART_SetConfig>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d101      	bne.n	80039ac <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e01b      	b.n	80039e4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	685a      	ldr	r2, [r3, #4]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	689a      	ldr	r2, [r3, #8]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f042 0201 	orr.w	r2, r2, #1
 80039da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 fbe9 	bl	80041b4 <UART_CheckIdleState>
 80039e2:	4603      	mov	r3, r0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3708      	adds	r7, #8
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b08a      	sub	sp, #40	; 0x28
 80039f0:	af02      	add	r7, sp, #8
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	603b      	str	r3, [r7, #0]
 80039f8:	4613      	mov	r3, r2
 80039fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a00:	2b20      	cmp	r3, #32
 8003a02:	d178      	bne.n	8003af6 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d002      	beq.n	8003a10 <HAL_UART_Transmit+0x24>
 8003a0a:	88fb      	ldrh	r3, [r7, #6]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d101      	bne.n	8003a14 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e071      	b.n	8003af8 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2221      	movs	r2, #33	; 0x21
 8003a20:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a22:	f7fd fd0b 	bl	800143c <HAL_GetTick>
 8003a26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	88fa      	ldrh	r2, [r7, #6]
 8003a2c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	88fa      	ldrh	r2, [r7, #6]
 8003a34:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a40:	d108      	bne.n	8003a54 <HAL_UART_Transmit+0x68>
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d104      	bne.n	8003a54 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	61bb      	str	r3, [r7, #24]
 8003a52:	e003      	b.n	8003a5c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a5c:	e030      	b.n	8003ac0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	9300      	str	r3, [sp, #0]
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	2200      	movs	r2, #0
 8003a66:	2180      	movs	r1, #128	; 0x80
 8003a68:	68f8      	ldr	r0, [r7, #12]
 8003a6a:	f000 fc4b 	bl	8004304 <UART_WaitOnFlagUntilTimeout>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d004      	beq.n	8003a7e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2220      	movs	r2, #32
 8003a78:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e03c      	b.n	8003af8 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d10b      	bne.n	8003a9c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	881a      	ldrh	r2, [r3, #0]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a90:	b292      	uxth	r2, r2
 8003a92:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	3302      	adds	r3, #2
 8003a98:	61bb      	str	r3, [r7, #24]
 8003a9a:	e008      	b.n	8003aae <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	781a      	ldrb	r2, [r3, #0]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	b292      	uxth	r2, r2
 8003aa6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	3301      	adds	r3, #1
 8003aac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	b29a      	uxth	r2, r3
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d1c8      	bne.n	8003a5e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	9300      	str	r3, [sp, #0]
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	2140      	movs	r1, #64	; 0x40
 8003ad6:	68f8      	ldr	r0, [r7, #12]
 8003ad8:	f000 fc14 	bl	8004304 <UART_WaitOnFlagUntilTimeout>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d004      	beq.n	8003aec <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2220      	movs	r2, #32
 8003ae6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e005      	b.n	8003af8 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2220      	movs	r2, #32
 8003af0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003af2:	2300      	movs	r3, #0
 8003af4:	e000      	b.n	8003af8 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003af6:	2302      	movs	r3, #2
  }
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3720      	adds	r7, #32
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b04:	b08a      	sub	sp, #40	; 0x28
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	689a      	ldr	r2, [r3, #8]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	431a      	orrs	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	695b      	ldr	r3, [r3, #20]
 8003b1e:	431a      	orrs	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	69db      	ldr	r3, [r3, #28]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	4ba4      	ldr	r3, [pc, #656]	; (8003dc0 <UART_SetConfig+0x2c0>)
 8003b30:	4013      	ands	r3, r2
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	6812      	ldr	r2, [r2, #0]
 8003b36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b38:	430b      	orrs	r3, r1
 8003b3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	68da      	ldr	r2, [r3, #12]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	699b      	ldr	r3, [r3, #24]
 8003b56:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a99      	ldr	r2, [pc, #612]	; (8003dc4 <UART_SetConfig+0x2c4>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d004      	beq.n	8003b6c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6a1b      	ldr	r3, [r3, #32]
 8003b66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a90      	ldr	r2, [pc, #576]	; (8003dc8 <UART_SetConfig+0x2c8>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d126      	bne.n	8003bd8 <UART_SetConfig+0xd8>
 8003b8a:	4b90      	ldr	r3, [pc, #576]	; (8003dcc <UART_SetConfig+0x2cc>)
 8003b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b90:	f003 0303 	and.w	r3, r3, #3
 8003b94:	2b03      	cmp	r3, #3
 8003b96:	d81b      	bhi.n	8003bd0 <UART_SetConfig+0xd0>
 8003b98:	a201      	add	r2, pc, #4	; (adr r2, 8003ba0 <UART_SetConfig+0xa0>)
 8003b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b9e:	bf00      	nop
 8003ba0:	08003bb1 	.word	0x08003bb1
 8003ba4:	08003bc1 	.word	0x08003bc1
 8003ba8:	08003bb9 	.word	0x08003bb9
 8003bac:	08003bc9 	.word	0x08003bc9
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bb6:	e116      	b.n	8003de6 <UART_SetConfig+0x2e6>
 8003bb8:	2302      	movs	r3, #2
 8003bba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bbe:	e112      	b.n	8003de6 <UART_SetConfig+0x2e6>
 8003bc0:	2304      	movs	r3, #4
 8003bc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bc6:	e10e      	b.n	8003de6 <UART_SetConfig+0x2e6>
 8003bc8:	2308      	movs	r3, #8
 8003bca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bce:	e10a      	b.n	8003de6 <UART_SetConfig+0x2e6>
 8003bd0:	2310      	movs	r3, #16
 8003bd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bd6:	e106      	b.n	8003de6 <UART_SetConfig+0x2e6>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a7c      	ldr	r2, [pc, #496]	; (8003dd0 <UART_SetConfig+0x2d0>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d138      	bne.n	8003c54 <UART_SetConfig+0x154>
 8003be2:	4b7a      	ldr	r3, [pc, #488]	; (8003dcc <UART_SetConfig+0x2cc>)
 8003be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be8:	f003 030c 	and.w	r3, r3, #12
 8003bec:	2b0c      	cmp	r3, #12
 8003bee:	d82d      	bhi.n	8003c4c <UART_SetConfig+0x14c>
 8003bf0:	a201      	add	r2, pc, #4	; (adr r2, 8003bf8 <UART_SetConfig+0xf8>)
 8003bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf6:	bf00      	nop
 8003bf8:	08003c2d 	.word	0x08003c2d
 8003bfc:	08003c4d 	.word	0x08003c4d
 8003c00:	08003c4d 	.word	0x08003c4d
 8003c04:	08003c4d 	.word	0x08003c4d
 8003c08:	08003c3d 	.word	0x08003c3d
 8003c0c:	08003c4d 	.word	0x08003c4d
 8003c10:	08003c4d 	.word	0x08003c4d
 8003c14:	08003c4d 	.word	0x08003c4d
 8003c18:	08003c35 	.word	0x08003c35
 8003c1c:	08003c4d 	.word	0x08003c4d
 8003c20:	08003c4d 	.word	0x08003c4d
 8003c24:	08003c4d 	.word	0x08003c4d
 8003c28:	08003c45 	.word	0x08003c45
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c32:	e0d8      	b.n	8003de6 <UART_SetConfig+0x2e6>
 8003c34:	2302      	movs	r3, #2
 8003c36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c3a:	e0d4      	b.n	8003de6 <UART_SetConfig+0x2e6>
 8003c3c:	2304      	movs	r3, #4
 8003c3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c42:	e0d0      	b.n	8003de6 <UART_SetConfig+0x2e6>
 8003c44:	2308      	movs	r3, #8
 8003c46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c4a:	e0cc      	b.n	8003de6 <UART_SetConfig+0x2e6>
 8003c4c:	2310      	movs	r3, #16
 8003c4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c52:	e0c8      	b.n	8003de6 <UART_SetConfig+0x2e6>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a5e      	ldr	r2, [pc, #376]	; (8003dd4 <UART_SetConfig+0x2d4>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d125      	bne.n	8003caa <UART_SetConfig+0x1aa>
 8003c5e:	4b5b      	ldr	r3, [pc, #364]	; (8003dcc <UART_SetConfig+0x2cc>)
 8003c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c64:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003c68:	2b30      	cmp	r3, #48	; 0x30
 8003c6a:	d016      	beq.n	8003c9a <UART_SetConfig+0x19a>
 8003c6c:	2b30      	cmp	r3, #48	; 0x30
 8003c6e:	d818      	bhi.n	8003ca2 <UART_SetConfig+0x1a2>
 8003c70:	2b20      	cmp	r3, #32
 8003c72:	d00a      	beq.n	8003c8a <UART_SetConfig+0x18a>
 8003c74:	2b20      	cmp	r3, #32
 8003c76:	d814      	bhi.n	8003ca2 <UART_SetConfig+0x1a2>
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d002      	beq.n	8003c82 <UART_SetConfig+0x182>
 8003c7c:	2b10      	cmp	r3, #16
 8003c7e:	d008      	beq.n	8003c92 <UART_SetConfig+0x192>
 8003c80:	e00f      	b.n	8003ca2 <UART_SetConfig+0x1a2>
 8003c82:	2300      	movs	r3, #0
 8003c84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c88:	e0ad      	b.n	8003de6 <UART_SetConfig+0x2e6>
 8003c8a:	2302      	movs	r3, #2
 8003c8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c90:	e0a9      	b.n	8003de6 <UART_SetConfig+0x2e6>
 8003c92:	2304      	movs	r3, #4
 8003c94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c98:	e0a5      	b.n	8003de6 <UART_SetConfig+0x2e6>
 8003c9a:	2308      	movs	r3, #8
 8003c9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ca0:	e0a1      	b.n	8003de6 <UART_SetConfig+0x2e6>
 8003ca2:	2310      	movs	r3, #16
 8003ca4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ca8:	e09d      	b.n	8003de6 <UART_SetConfig+0x2e6>
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a4a      	ldr	r2, [pc, #296]	; (8003dd8 <UART_SetConfig+0x2d8>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d125      	bne.n	8003d00 <UART_SetConfig+0x200>
 8003cb4:	4b45      	ldr	r3, [pc, #276]	; (8003dcc <UART_SetConfig+0x2cc>)
 8003cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003cbe:	2bc0      	cmp	r3, #192	; 0xc0
 8003cc0:	d016      	beq.n	8003cf0 <UART_SetConfig+0x1f0>
 8003cc2:	2bc0      	cmp	r3, #192	; 0xc0
 8003cc4:	d818      	bhi.n	8003cf8 <UART_SetConfig+0x1f8>
 8003cc6:	2b80      	cmp	r3, #128	; 0x80
 8003cc8:	d00a      	beq.n	8003ce0 <UART_SetConfig+0x1e0>
 8003cca:	2b80      	cmp	r3, #128	; 0x80
 8003ccc:	d814      	bhi.n	8003cf8 <UART_SetConfig+0x1f8>
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d002      	beq.n	8003cd8 <UART_SetConfig+0x1d8>
 8003cd2:	2b40      	cmp	r3, #64	; 0x40
 8003cd4:	d008      	beq.n	8003ce8 <UART_SetConfig+0x1e8>
 8003cd6:	e00f      	b.n	8003cf8 <UART_SetConfig+0x1f8>
 8003cd8:	2300      	movs	r3, #0
 8003cda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cde:	e082      	b.n	8003de6 <UART_SetConfig+0x2e6>
 8003ce0:	2302      	movs	r3, #2
 8003ce2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ce6:	e07e      	b.n	8003de6 <UART_SetConfig+0x2e6>
 8003ce8:	2304      	movs	r3, #4
 8003cea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cee:	e07a      	b.n	8003de6 <UART_SetConfig+0x2e6>
 8003cf0:	2308      	movs	r3, #8
 8003cf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cf6:	e076      	b.n	8003de6 <UART_SetConfig+0x2e6>
 8003cf8:	2310      	movs	r3, #16
 8003cfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cfe:	e072      	b.n	8003de6 <UART_SetConfig+0x2e6>
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a35      	ldr	r2, [pc, #212]	; (8003ddc <UART_SetConfig+0x2dc>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d12a      	bne.n	8003d60 <UART_SetConfig+0x260>
 8003d0a:	4b30      	ldr	r3, [pc, #192]	; (8003dcc <UART_SetConfig+0x2cc>)
 8003d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d18:	d01a      	beq.n	8003d50 <UART_SetConfig+0x250>
 8003d1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d1e:	d81b      	bhi.n	8003d58 <UART_SetConfig+0x258>
 8003d20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d24:	d00c      	beq.n	8003d40 <UART_SetConfig+0x240>
 8003d26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d2a:	d815      	bhi.n	8003d58 <UART_SetConfig+0x258>
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d003      	beq.n	8003d38 <UART_SetConfig+0x238>
 8003d30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d34:	d008      	beq.n	8003d48 <UART_SetConfig+0x248>
 8003d36:	e00f      	b.n	8003d58 <UART_SetConfig+0x258>
 8003d38:	2300      	movs	r3, #0
 8003d3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d3e:	e052      	b.n	8003de6 <UART_SetConfig+0x2e6>
 8003d40:	2302      	movs	r3, #2
 8003d42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d46:	e04e      	b.n	8003de6 <UART_SetConfig+0x2e6>
 8003d48:	2304      	movs	r3, #4
 8003d4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d4e:	e04a      	b.n	8003de6 <UART_SetConfig+0x2e6>
 8003d50:	2308      	movs	r3, #8
 8003d52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d56:	e046      	b.n	8003de6 <UART_SetConfig+0x2e6>
 8003d58:	2310      	movs	r3, #16
 8003d5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d5e:	e042      	b.n	8003de6 <UART_SetConfig+0x2e6>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a17      	ldr	r2, [pc, #92]	; (8003dc4 <UART_SetConfig+0x2c4>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d13a      	bne.n	8003de0 <UART_SetConfig+0x2e0>
 8003d6a:	4b18      	ldr	r3, [pc, #96]	; (8003dcc <UART_SetConfig+0x2cc>)
 8003d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d70:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003d74:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d78:	d01a      	beq.n	8003db0 <UART_SetConfig+0x2b0>
 8003d7a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d7e:	d81b      	bhi.n	8003db8 <UART_SetConfig+0x2b8>
 8003d80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d84:	d00c      	beq.n	8003da0 <UART_SetConfig+0x2a0>
 8003d86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d8a:	d815      	bhi.n	8003db8 <UART_SetConfig+0x2b8>
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d003      	beq.n	8003d98 <UART_SetConfig+0x298>
 8003d90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d94:	d008      	beq.n	8003da8 <UART_SetConfig+0x2a8>
 8003d96:	e00f      	b.n	8003db8 <UART_SetConfig+0x2b8>
 8003d98:	2300      	movs	r3, #0
 8003d9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d9e:	e022      	b.n	8003de6 <UART_SetConfig+0x2e6>
 8003da0:	2302      	movs	r3, #2
 8003da2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003da6:	e01e      	b.n	8003de6 <UART_SetConfig+0x2e6>
 8003da8:	2304      	movs	r3, #4
 8003daa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dae:	e01a      	b.n	8003de6 <UART_SetConfig+0x2e6>
 8003db0:	2308      	movs	r3, #8
 8003db2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003db6:	e016      	b.n	8003de6 <UART_SetConfig+0x2e6>
 8003db8:	2310      	movs	r3, #16
 8003dba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dbe:	e012      	b.n	8003de6 <UART_SetConfig+0x2e6>
 8003dc0:	efff69f3 	.word	0xefff69f3
 8003dc4:	40008000 	.word	0x40008000
 8003dc8:	40013800 	.word	0x40013800
 8003dcc:	40021000 	.word	0x40021000
 8003dd0:	40004400 	.word	0x40004400
 8003dd4:	40004800 	.word	0x40004800
 8003dd8:	40004c00 	.word	0x40004c00
 8003ddc:	40005000 	.word	0x40005000
 8003de0:	2310      	movs	r3, #16
 8003de2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a9f      	ldr	r2, [pc, #636]	; (8004068 <UART_SetConfig+0x568>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d17a      	bne.n	8003ee6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003df0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003df4:	2b08      	cmp	r3, #8
 8003df6:	d824      	bhi.n	8003e42 <UART_SetConfig+0x342>
 8003df8:	a201      	add	r2, pc, #4	; (adr r2, 8003e00 <UART_SetConfig+0x300>)
 8003dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dfe:	bf00      	nop
 8003e00:	08003e25 	.word	0x08003e25
 8003e04:	08003e43 	.word	0x08003e43
 8003e08:	08003e2d 	.word	0x08003e2d
 8003e0c:	08003e43 	.word	0x08003e43
 8003e10:	08003e33 	.word	0x08003e33
 8003e14:	08003e43 	.word	0x08003e43
 8003e18:	08003e43 	.word	0x08003e43
 8003e1c:	08003e43 	.word	0x08003e43
 8003e20:	08003e3b 	.word	0x08003e3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e24:	f7fe fc22 	bl	800266c <HAL_RCC_GetPCLK1Freq>
 8003e28:	61f8      	str	r0, [r7, #28]
        break;
 8003e2a:	e010      	b.n	8003e4e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e2c:	4b8f      	ldr	r3, [pc, #572]	; (800406c <UART_SetConfig+0x56c>)
 8003e2e:	61fb      	str	r3, [r7, #28]
        break;
 8003e30:	e00d      	b.n	8003e4e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e32:	f7fe fb83 	bl	800253c <HAL_RCC_GetSysClockFreq>
 8003e36:	61f8      	str	r0, [r7, #28]
        break;
 8003e38:	e009      	b.n	8003e4e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e3e:	61fb      	str	r3, [r7, #28]
        break;
 8003e40:	e005      	b.n	8003e4e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003e42:	2300      	movs	r3, #0
 8003e44:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003e4c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	f000 80fb 	beq.w	800404c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	685a      	ldr	r2, [r3, #4]
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	005b      	lsls	r3, r3, #1
 8003e5e:	4413      	add	r3, r2
 8003e60:	69fa      	ldr	r2, [r7, #28]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d305      	bcc.n	8003e72 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e6c:	69fa      	ldr	r2, [r7, #28]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d903      	bls.n	8003e7a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003e78:	e0e8      	b.n	800404c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	461c      	mov	r4, r3
 8003e80:	4615      	mov	r5, r2
 8003e82:	f04f 0200 	mov.w	r2, #0
 8003e86:	f04f 0300 	mov.w	r3, #0
 8003e8a:	022b      	lsls	r3, r5, #8
 8003e8c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003e90:	0222      	lsls	r2, r4, #8
 8003e92:	68f9      	ldr	r1, [r7, #12]
 8003e94:	6849      	ldr	r1, [r1, #4]
 8003e96:	0849      	lsrs	r1, r1, #1
 8003e98:	2000      	movs	r0, #0
 8003e9a:	4688      	mov	r8, r1
 8003e9c:	4681      	mov	r9, r0
 8003e9e:	eb12 0a08 	adds.w	sl, r2, r8
 8003ea2:	eb43 0b09 	adc.w	fp, r3, r9
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	603b      	str	r3, [r7, #0]
 8003eae:	607a      	str	r2, [r7, #4]
 8003eb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003eb4:	4650      	mov	r0, sl
 8003eb6:	4659      	mov	r1, fp
 8003eb8:	f7fc fa52 	bl	8000360 <__aeabi_uldivmod>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003eca:	d308      	bcc.n	8003ede <UART_SetConfig+0x3de>
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ed2:	d204      	bcs.n	8003ede <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	69ba      	ldr	r2, [r7, #24]
 8003eda:	60da      	str	r2, [r3, #12]
 8003edc:	e0b6      	b.n	800404c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003ee4:	e0b2      	b.n	800404c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	69db      	ldr	r3, [r3, #28]
 8003eea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003eee:	d15e      	bne.n	8003fae <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003ef0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ef4:	2b08      	cmp	r3, #8
 8003ef6:	d828      	bhi.n	8003f4a <UART_SetConfig+0x44a>
 8003ef8:	a201      	add	r2, pc, #4	; (adr r2, 8003f00 <UART_SetConfig+0x400>)
 8003efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003efe:	bf00      	nop
 8003f00:	08003f25 	.word	0x08003f25
 8003f04:	08003f2d 	.word	0x08003f2d
 8003f08:	08003f35 	.word	0x08003f35
 8003f0c:	08003f4b 	.word	0x08003f4b
 8003f10:	08003f3b 	.word	0x08003f3b
 8003f14:	08003f4b 	.word	0x08003f4b
 8003f18:	08003f4b 	.word	0x08003f4b
 8003f1c:	08003f4b 	.word	0x08003f4b
 8003f20:	08003f43 	.word	0x08003f43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f24:	f7fe fba2 	bl	800266c <HAL_RCC_GetPCLK1Freq>
 8003f28:	61f8      	str	r0, [r7, #28]
        break;
 8003f2a:	e014      	b.n	8003f56 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f2c:	f7fe fbb4 	bl	8002698 <HAL_RCC_GetPCLK2Freq>
 8003f30:	61f8      	str	r0, [r7, #28]
        break;
 8003f32:	e010      	b.n	8003f56 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f34:	4b4d      	ldr	r3, [pc, #308]	; (800406c <UART_SetConfig+0x56c>)
 8003f36:	61fb      	str	r3, [r7, #28]
        break;
 8003f38:	e00d      	b.n	8003f56 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f3a:	f7fe faff 	bl	800253c <HAL_RCC_GetSysClockFreq>
 8003f3e:	61f8      	str	r0, [r7, #28]
        break;
 8003f40:	e009      	b.n	8003f56 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f46:	61fb      	str	r3, [r7, #28]
        break;
 8003f48:	e005      	b.n	8003f56 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003f54:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d077      	beq.n	800404c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	005a      	lsls	r2, r3, #1
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	085b      	lsrs	r3, r3, #1
 8003f66:	441a      	add	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f70:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	2b0f      	cmp	r3, #15
 8003f76:	d916      	bls.n	8003fa6 <UART_SetConfig+0x4a6>
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f7e:	d212      	bcs.n	8003fa6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	f023 030f 	bic.w	r3, r3, #15
 8003f88:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	085b      	lsrs	r3, r3, #1
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	f003 0307 	and.w	r3, r3, #7
 8003f94:	b29a      	uxth	r2, r3
 8003f96:	8afb      	ldrh	r3, [r7, #22]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	8afa      	ldrh	r2, [r7, #22]
 8003fa2:	60da      	str	r2, [r3, #12]
 8003fa4:	e052      	b.n	800404c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003fac:	e04e      	b.n	800404c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003fae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003fb2:	2b08      	cmp	r3, #8
 8003fb4:	d827      	bhi.n	8004006 <UART_SetConfig+0x506>
 8003fb6:	a201      	add	r2, pc, #4	; (adr r2, 8003fbc <UART_SetConfig+0x4bc>)
 8003fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fbc:	08003fe1 	.word	0x08003fe1
 8003fc0:	08003fe9 	.word	0x08003fe9
 8003fc4:	08003ff1 	.word	0x08003ff1
 8003fc8:	08004007 	.word	0x08004007
 8003fcc:	08003ff7 	.word	0x08003ff7
 8003fd0:	08004007 	.word	0x08004007
 8003fd4:	08004007 	.word	0x08004007
 8003fd8:	08004007 	.word	0x08004007
 8003fdc:	08003fff 	.word	0x08003fff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fe0:	f7fe fb44 	bl	800266c <HAL_RCC_GetPCLK1Freq>
 8003fe4:	61f8      	str	r0, [r7, #28]
        break;
 8003fe6:	e014      	b.n	8004012 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fe8:	f7fe fb56 	bl	8002698 <HAL_RCC_GetPCLK2Freq>
 8003fec:	61f8      	str	r0, [r7, #28]
        break;
 8003fee:	e010      	b.n	8004012 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ff0:	4b1e      	ldr	r3, [pc, #120]	; (800406c <UART_SetConfig+0x56c>)
 8003ff2:	61fb      	str	r3, [r7, #28]
        break;
 8003ff4:	e00d      	b.n	8004012 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ff6:	f7fe faa1 	bl	800253c <HAL_RCC_GetSysClockFreq>
 8003ffa:	61f8      	str	r0, [r7, #28]
        break;
 8003ffc:	e009      	b.n	8004012 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ffe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004002:	61fb      	str	r3, [r7, #28]
        break;
 8004004:	e005      	b.n	8004012 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004006:	2300      	movs	r3, #0
 8004008:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004010:	bf00      	nop
    }

    if (pclk != 0U)
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d019      	beq.n	800404c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	085a      	lsrs	r2, r3, #1
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	441a      	add	r2, r3
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	fbb2 f3f3 	udiv	r3, r2, r3
 800402a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	2b0f      	cmp	r3, #15
 8004030:	d909      	bls.n	8004046 <UART_SetConfig+0x546>
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004038:	d205      	bcs.n	8004046 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	b29a      	uxth	r2, r3
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	60da      	str	r2, [r3, #12]
 8004044:	e002      	b.n	800404c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2200      	movs	r2, #0
 8004050:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2200      	movs	r2, #0
 8004056:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004058:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800405c:	4618      	mov	r0, r3
 800405e:	3728      	adds	r7, #40	; 0x28
 8004060:	46bd      	mov	sp, r7
 8004062:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004066:	bf00      	nop
 8004068:	40008000 	.word	0x40008000
 800406c:	00f42400 	.word	0x00f42400

08004070 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407c:	f003 0308 	and.w	r3, r3, #8
 8004080:	2b00      	cmp	r3, #0
 8004082:	d00a      	beq.n	800409a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	430a      	orrs	r2, r1
 8004098:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409e:	f003 0301 	and.w	r3, r3, #1
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00a      	beq.n	80040bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	430a      	orrs	r2, r1
 80040ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c0:	f003 0302 	and.w	r3, r3, #2
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d00a      	beq.n	80040de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	430a      	orrs	r2, r1
 80040dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e2:	f003 0304 	and.w	r3, r3, #4
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00a      	beq.n	8004100 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	430a      	orrs	r2, r1
 80040fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004104:	f003 0310 	and.w	r3, r3, #16
 8004108:	2b00      	cmp	r3, #0
 800410a:	d00a      	beq.n	8004122 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	430a      	orrs	r2, r1
 8004120:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004126:	f003 0320 	and.w	r3, r3, #32
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00a      	beq.n	8004144 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	430a      	orrs	r2, r1
 8004142:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800414c:	2b00      	cmp	r3, #0
 800414e:	d01a      	beq.n	8004186 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	430a      	orrs	r2, r1
 8004164:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800416e:	d10a      	bne.n	8004186 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	430a      	orrs	r2, r1
 8004184:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00a      	beq.n	80041a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	430a      	orrs	r2, r1
 80041a6:	605a      	str	r2, [r3, #4]
  }
}
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b098      	sub	sp, #96	; 0x60
 80041b8:	af02      	add	r7, sp, #8
 80041ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80041c4:	f7fd f93a 	bl	800143c <HAL_GetTick>
 80041c8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0308 	and.w	r3, r3, #8
 80041d4:	2b08      	cmp	r3, #8
 80041d6:	d12e      	bne.n	8004236 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80041dc:	9300      	str	r3, [sp, #0]
 80041de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041e0:	2200      	movs	r2, #0
 80041e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 f88c 	bl	8004304 <UART_WaitOnFlagUntilTimeout>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d021      	beq.n	8004236 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041fa:	e853 3f00 	ldrex	r3, [r3]
 80041fe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004202:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004206:	653b      	str	r3, [r7, #80]	; 0x50
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	461a      	mov	r2, r3
 800420e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004210:	647b      	str	r3, [r7, #68]	; 0x44
 8004212:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004214:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004216:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004218:	e841 2300 	strex	r3, r2, [r1]
 800421c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800421e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004220:	2b00      	cmp	r3, #0
 8004222:	d1e6      	bne.n	80041f2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2220      	movs	r2, #32
 8004228:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e062      	b.n	80042fc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0304 	and.w	r3, r3, #4
 8004240:	2b04      	cmp	r3, #4
 8004242:	d149      	bne.n	80042d8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004244:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004248:	9300      	str	r3, [sp, #0]
 800424a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800424c:	2200      	movs	r2, #0
 800424e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 f856 	bl	8004304 <UART_WaitOnFlagUntilTimeout>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d03c      	beq.n	80042d8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004266:	e853 3f00 	ldrex	r3, [r3]
 800426a:	623b      	str	r3, [r7, #32]
   return(result);
 800426c:	6a3b      	ldr	r3, [r7, #32]
 800426e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004272:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	461a      	mov	r2, r3
 800427a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800427c:	633b      	str	r3, [r7, #48]	; 0x30
 800427e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004280:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004282:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004284:	e841 2300 	strex	r3, r2, [r1]
 8004288:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800428a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800428c:	2b00      	cmp	r3, #0
 800428e:	d1e6      	bne.n	800425e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	3308      	adds	r3, #8
 8004296:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	e853 3f00 	ldrex	r3, [r3]
 800429e:	60fb      	str	r3, [r7, #12]
   return(result);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f023 0301 	bic.w	r3, r3, #1
 80042a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	3308      	adds	r3, #8
 80042ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042b0:	61fa      	str	r2, [r7, #28]
 80042b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b4:	69b9      	ldr	r1, [r7, #24]
 80042b6:	69fa      	ldr	r2, [r7, #28]
 80042b8:	e841 2300 	strex	r3, r2, [r1]
 80042bc:	617b      	str	r3, [r7, #20]
   return(result);
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d1e5      	bne.n	8004290 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2220      	movs	r2, #32
 80042c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	e011      	b.n	80042fc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2220      	movs	r2, #32
 80042dc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2220      	movs	r2, #32
 80042e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80042fa:	2300      	movs	r3, #0
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3758      	adds	r7, #88	; 0x58
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}

08004304 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	603b      	str	r3, [r7, #0]
 8004310:	4613      	mov	r3, r2
 8004312:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004314:	e049      	b.n	80043aa <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800431c:	d045      	beq.n	80043aa <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800431e:	f7fd f88d 	bl	800143c <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	69ba      	ldr	r2, [r7, #24]
 800432a:	429a      	cmp	r2, r3
 800432c:	d302      	bcc.n	8004334 <UART_WaitOnFlagUntilTimeout+0x30>
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d101      	bne.n	8004338 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	e048      	b.n	80043ca <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0304 	and.w	r3, r3, #4
 8004342:	2b00      	cmp	r3, #0
 8004344:	d031      	beq.n	80043aa <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	69db      	ldr	r3, [r3, #28]
 800434c:	f003 0308 	and.w	r3, r3, #8
 8004350:	2b08      	cmp	r3, #8
 8004352:	d110      	bne.n	8004376 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2208      	movs	r2, #8
 800435a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800435c:	68f8      	ldr	r0, [r7, #12]
 800435e:	f000 f838 	bl	80043d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2208      	movs	r2, #8
 8004366:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e029      	b.n	80043ca <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	69db      	ldr	r3, [r3, #28]
 800437c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004380:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004384:	d111      	bne.n	80043aa <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800438e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004390:	68f8      	ldr	r0, [r7, #12]
 8004392:	f000 f81e 	bl	80043d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2220      	movs	r2, #32
 800439a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e00f      	b.n	80043ca <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	69da      	ldr	r2, [r3, #28]
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	4013      	ands	r3, r2
 80043b4:	68ba      	ldr	r2, [r7, #8]
 80043b6:	429a      	cmp	r2, r3
 80043b8:	bf0c      	ite	eq
 80043ba:	2301      	moveq	r3, #1
 80043bc:	2300      	movne	r3, #0
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	461a      	mov	r2, r3
 80043c2:	79fb      	ldrb	r3, [r7, #7]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d0a6      	beq.n	8004316 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043c8:	2300      	movs	r3, #0
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3710      	adds	r7, #16
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043d2:	b480      	push	{r7}
 80043d4:	b095      	sub	sp, #84	; 0x54
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043e2:	e853 3f00 	ldrex	r3, [r3]
 80043e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80043e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80043ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	461a      	mov	r2, r3
 80043f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043f8:	643b      	str	r3, [r7, #64]	; 0x40
 80043fa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80043fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004400:	e841 2300 	strex	r3, r2, [r1]
 8004404:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004408:	2b00      	cmp	r3, #0
 800440a:	d1e6      	bne.n	80043da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	3308      	adds	r3, #8
 8004412:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004414:	6a3b      	ldr	r3, [r7, #32]
 8004416:	e853 3f00 	ldrex	r3, [r3]
 800441a:	61fb      	str	r3, [r7, #28]
   return(result);
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	f023 0301 	bic.w	r3, r3, #1
 8004422:	64bb      	str	r3, [r7, #72]	; 0x48
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	3308      	adds	r3, #8
 800442a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800442c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800442e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004430:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004432:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004434:	e841 2300 	strex	r3, r2, [r1]
 8004438:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800443a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443c:	2b00      	cmp	r3, #0
 800443e:	d1e5      	bne.n	800440c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004444:	2b01      	cmp	r3, #1
 8004446:	d118      	bne.n	800447a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	e853 3f00 	ldrex	r3, [r3]
 8004454:	60bb      	str	r3, [r7, #8]
   return(result);
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	f023 0310 	bic.w	r3, r3, #16
 800445c:	647b      	str	r3, [r7, #68]	; 0x44
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	461a      	mov	r2, r3
 8004464:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004466:	61bb      	str	r3, [r7, #24]
 8004468:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446a:	6979      	ldr	r1, [r7, #20]
 800446c:	69ba      	ldr	r2, [r7, #24]
 800446e:	e841 2300 	strex	r3, r2, [r1]
 8004472:	613b      	str	r3, [r7, #16]
   return(result);
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1e6      	bne.n	8004448 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2220      	movs	r2, #32
 800447e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800448e:	bf00      	nop
 8004490:	3754      	adds	r7, #84	; 0x54
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr
	...

0800449c <acc_rss_activate>:
 800449c:	b510      	push	{r4, lr}
 800449e:	4c18      	ldr	r4, [pc, #96]	; (8004500 <acc_rss_activate+0x64>)
 80044a0:	7823      	ldrb	r3, [r4, #0]
 80044a2:	b9c3      	cbnz	r3, 80044d6 <acc_rss_activate+0x3a>
 80044a4:	b1a8      	cbz	r0, 80044d2 <acc_rss_activate+0x36>
 80044a6:	f001 f8bd 	bl	8005624 <acc_rss_integration_register>
 80044aa:	b188      	cbz	r0, 80044d0 <acc_rss_activate+0x34>
 80044ac:	f000 fc62 	bl	8004d74 <acc_service_manager_activate>
 80044b0:	b1e8      	cbz	r0, 80044ee <acc_rss_activate+0x52>
 80044b2:	f002 fda3 	bl	8006ffc <acc_sensor_manager_activate>
 80044b6:	b1d0      	cbz	r0, 80044ee <acc_rss_activate+0x52>
 80044b8:	2301      	movs	r3, #1
 80044ba:	7023      	strb	r3, [r4, #0]
 80044bc:	f001 f9b0 	bl	8005820 <acc_rss_integration_log_level>
 80044c0:	2801      	cmp	r0, #1
 80044c2:	d905      	bls.n	80044d0 <acc_rss_activate+0x34>
 80044c4:	4b0f      	ldr	r3, [pc, #60]	; (8004504 <acc_rss_activate+0x68>)
 80044c6:	4a10      	ldr	r2, [pc, #64]	; (8004508 <acc_rss_activate+0x6c>)
 80044c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ca:	4910      	ldr	r1, [pc, #64]	; (800450c <acc_rss_activate+0x70>)
 80044cc:	2002      	movs	r0, #2
 80044ce:	4798      	blx	r3
 80044d0:	7823      	ldrb	r3, [r4, #0]
 80044d2:	4618      	mov	r0, r3
 80044d4:	bd10      	pop	{r4, pc}
 80044d6:	f001 f9a3 	bl	8005820 <acc_rss_integration_log_level>
 80044da:	2801      	cmp	r0, #1
 80044dc:	d9f8      	bls.n	80044d0 <acc_rss_activate+0x34>
 80044de:	4b09      	ldr	r3, [pc, #36]	; (8004504 <acc_rss_activate+0x68>)
 80044e0:	4a0b      	ldr	r2, [pc, #44]	; (8004510 <acc_rss_activate+0x74>)
 80044e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044e4:	4909      	ldr	r1, [pc, #36]	; (800450c <acc_rss_activate+0x70>)
 80044e6:	2002      	movs	r0, #2
 80044e8:	4798      	blx	r3
 80044ea:	7823      	ldrb	r3, [r4, #0]
 80044ec:	e7f1      	b.n	80044d2 <acc_rss_activate+0x36>
 80044ee:	4b05      	ldr	r3, [pc, #20]	; (8004504 <acc_rss_activate+0x68>)
 80044f0:	4a08      	ldr	r2, [pc, #32]	; (8004514 <acc_rss_activate+0x78>)
 80044f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044f4:	4905      	ldr	r1, [pc, #20]	; (800450c <acc_rss_activate+0x70>)
 80044f6:	2000      	movs	r0, #0
 80044f8:	4798      	blx	r3
 80044fa:	7823      	ldrb	r3, [r4, #0]
 80044fc:	4618      	mov	r0, r3
 80044fe:	bd10      	pop	{r4, pc}
 8004500:	200002f8 	.word	0x200002f8
 8004504:	200004c0 	.word	0x200004c0
 8004508:	0800e2c8 	.word	0x0800e2c8
 800450c:	0800e2e8 	.word	0x0800e2e8
 8004510:	0800e304 	.word	0x0800e304
 8004514:	0800e2ec 	.word	0x0800e2ec

08004518 <acc_rss_deactivate>:
 8004518:	b510      	push	{r4, lr}
 800451a:	4c0b      	ldr	r4, [pc, #44]	; (8004548 <acc_rss_deactivate+0x30>)
 800451c:	7823      	ldrb	r3, [r4, #0]
 800451e:	b903      	cbnz	r3, 8004522 <acc_rss_deactivate+0xa>
 8004520:	bd10      	pop	{r4, pc}
 8004522:	f000 fcd5 	bl	8004ed0 <acc_service_manager_deactivate>
 8004526:	f002 fda5 	bl	8007074 <acc_sensor_manager_deactivate>
 800452a:	f001 f979 	bl	8005820 <acc_rss_integration_log_level>
 800452e:	2801      	cmp	r0, #1
 8004530:	d905      	bls.n	800453e <acc_rss_deactivate+0x26>
 8004532:	4b06      	ldr	r3, [pc, #24]	; (800454c <acc_rss_deactivate+0x34>)
 8004534:	4a06      	ldr	r2, [pc, #24]	; (8004550 <acc_rss_deactivate+0x38>)
 8004536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004538:	4906      	ldr	r1, [pc, #24]	; (8004554 <acc_rss_deactivate+0x3c>)
 800453a:	2002      	movs	r0, #2
 800453c:	4798      	blx	r3
 800453e:	f001 f8b1 	bl	80056a4 <acc_rss_integration_unregister>
 8004542:	2300      	movs	r3, #0
 8004544:	7023      	strb	r3, [r4, #0]
 8004546:	bd10      	pop	{r4, pc}
 8004548:	200002f8 	.word	0x200002f8
 800454c:	200004c0 	.word	0x200004c0
 8004550:	0800e32c 	.word	0x0800e32c
 8004554:	0800e2e8 	.word	0x0800e2e8

08004558 <acc_service_get_base_configuration>:
 8004558:	b510      	push	{r4, lr}
 800455a:	4604      	mov	r4, r0
 800455c:	b108      	cbz	r0, 8004562 <acc_service_get_base_configuration+0xa>
 800455e:	6900      	ldr	r0, [r0, #16]
 8004560:	bd10      	pop	{r4, pc}
 8004562:	f001 f95d 	bl	8005820 <acc_rss_integration_log_level>
 8004566:	2800      	cmp	r0, #0
 8004568:	d0fa      	beq.n	8004560 <acc_service_get_base_configuration+0x8>
 800456a:	4b04      	ldr	r3, [pc, #16]	; (800457c <acc_service_get_base_configuration+0x24>)
 800456c:	4a04      	ldr	r2, [pc, #16]	; (8004580 <acc_service_get_base_configuration+0x28>)
 800456e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004570:	4904      	ldr	r1, [pc, #16]	; (8004584 <acc_service_get_base_configuration+0x2c>)
 8004572:	2001      	movs	r0, #1
 8004574:	4798      	blx	r3
 8004576:	4620      	mov	r0, r4
 8004578:	bd10      	pop	{r4, pc}
 800457a:	bf00      	nop
 800457c:	200004c0 	.word	0x200004c0
 8004580:	0800e350 	.word	0x0800e350
 8004584:	0800e368 	.word	0x0800e368

08004588 <set_maximize_signal_attenuation>:
 8004588:	b570      	push	{r4, r5, r6, lr}
 800458a:	460d      	mov	r5, r1
 800458c:	4606      	mov	r6, r0
 800458e:	f7ff ffe3 	bl	8004558 <acc_service_get_base_configuration>
 8004592:	b158      	cbz	r0, 80045ac <set_maximize_signal_attenuation+0x24>
 8004594:	4629      	mov	r1, r5
 8004596:	4604      	mov	r4, r0
 8004598:	f000 ff38 	bl	800540c <acc_base_configuration_maximize_signal_attenuation_set>
 800459c:	b93d      	cbnz	r5, 80045ae <set_maximize_signal_attenuation+0x26>
 800459e:	68b3      	ldr	r3, [r6, #8]
 80045a0:	b123      	cbz	r3, 80045ac <set_maximize_signal_attenuation+0x24>
 80045a2:	7971      	ldrb	r1, [r6, #5]
 80045a4:	4630      	mov	r0, r6
 80045a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80045aa:	4718      	bx	r3
 80045ac:	bd70      	pop	{r4, r5, r6, pc}
 80045ae:	4620      	mov	r0, r4
 80045b0:	210f      	movs	r1, #15
 80045b2:	f000 fe1d 	bl	80051f0 <acc_base_configuration_integrator_set>
 80045b6:	4620      	mov	r0, r4
 80045b8:	2101      	movs	r1, #1
 80045ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80045be:	f000 be3f 	b.w	8005240 <acc_base_configuration_integrator_ramp_up_set>
 80045c2:	bf00      	nop

080045c4 <acc_service_requested_start_set>:
 80045c4:	b500      	push	{lr}
 80045c6:	b083      	sub	sp, #12
 80045c8:	ed8d 0a01 	vstr	s0, [sp, #4]
 80045cc:	f7ff ffc4 	bl	8004558 <acc_service_get_base_configuration>
 80045d0:	ed9d 0a01 	vldr	s0, [sp, #4]
 80045d4:	b003      	add	sp, #12
 80045d6:	f85d eb04 	ldr.w	lr, [sp], #4
 80045da:	f000 bcd3 	b.w	8004f84 <acc_base_configuration_requested_start_set>
 80045de:	bf00      	nop

080045e0 <acc_service_requested_length_set>:
 80045e0:	b500      	push	{lr}
 80045e2:	b083      	sub	sp, #12
 80045e4:	ed8d 0a01 	vstr	s0, [sp, #4]
 80045e8:	f7ff ffb6 	bl	8004558 <acc_service_get_base_configuration>
 80045ec:	ed9d 0a01 	vldr	s0, [sp, #4]
 80045f0:	b003      	add	sp, #12
 80045f2:	f85d eb04 	ldr.w	lr, [sp], #4
 80045f6:	f000 bce1 	b.w	8004fbc <acc_base_configuration_requested_length_set>
 80045fa:	bf00      	nop

080045fc <acc_service_pipeline_destroy>:
 80045fc:	b510      	push	{r4, lr}
 80045fe:	4604      	mov	r4, r0
 8004600:	6900      	ldr	r0, [r0, #16]
 8004602:	b118      	cbz	r0, 800460c <acc_service_pipeline_destroy+0x10>
 8004604:	68c3      	ldr	r3, [r0, #12]
 8004606:	4798      	blx	r3
 8004608:	2300      	movs	r3, #0
 800460a:	6123      	str	r3, [r4, #16]
 800460c:	bd10      	pop	{r4, pc}
 800460e:	bf00      	nop

08004610 <acc_service_send_data>:
 8004610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004612:	9e06      	ldr	r6, [sp, #24]
 8004614:	6944      	ldr	r4, [r0, #20]
 8004616:	7835      	ldrb	r5, [r6, #0]
 8004618:	461f      	mov	r7, r3
 800461a:	b91d      	cbnz	r5, 8004624 <acc_service_send_data+0x14>
 800461c:	7ea5      	ldrb	r5, [r4, #26]
 800461e:	b95d      	cbnz	r5, 8004638 <acc_service_send_data+0x28>
 8004620:	68a3      	ldr	r3, [r4, #8]
 8004622:	6019      	str	r1, [r3, #0]
 8004624:	6920      	ldr	r0, [r4, #16]
 8004626:	7665      	strb	r5, [r4, #25]
 8004628:	b128      	cbz	r0, 8004636 <acc_service_send_data+0x26>
 800462a:	6962      	ldr	r2, [r4, #20]
 800462c:	4639      	mov	r1, r7
 800462e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004632:	f008 be45 	b.w	800d2c0 <memcpy>
 8004636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004638:	68e3      	ldr	r3, [r4, #12]
 800463a:	6860      	ldr	r0, [r4, #4]
 800463c:	429a      	cmp	r2, r3
 800463e:	bf28      	it	cs
 8004640:	461a      	movcs	r2, r3
 8004642:	f008 fe3d 	bl	800d2c0 <memcpy>
 8004646:	7835      	ldrb	r5, [r6, #0]
 8004648:	e7ec      	b.n	8004624 <acc_service_send_data+0x14>
 800464a:	bf00      	nop

0800464c <acc_service_set_module_active>:
 800464c:	4b01      	ldr	r3, [pc, #4]	; (8004654 <acc_service_set_module_active+0x8>)
 800464e:	7018      	strb	r0, [r3, #0]
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop
 8004654:	200002f9 	.word	0x200002f9

08004658 <acc_service_handle_valid>:
 8004658:	b508      	push	{r3, lr}
 800465a:	b118      	cbz	r0, 8004664 <acc_service_handle_valid+0xc>
 800465c:	6802      	ldr	r2, [r0, #0]
 800465e:	4b06      	ldr	r3, [pc, #24]	; (8004678 <acc_service_handle_valid+0x20>)
 8004660:	429a      	cmp	r2, r3
 8004662:	d007      	beq.n	8004674 <acc_service_handle_valid+0x1c>
 8004664:	4b05      	ldr	r3, [pc, #20]	; (800467c <acc_service_handle_valid+0x24>)
 8004666:	4a06      	ldr	r2, [pc, #24]	; (8004680 <acc_service_handle_valid+0x28>)
 8004668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800466a:	4906      	ldr	r1, [pc, #24]	; (8004684 <acc_service_handle_valid+0x2c>)
 800466c:	2000      	movs	r0, #0
 800466e:	4798      	blx	r3
 8004670:	2000      	movs	r0, #0
 8004672:	bd08      	pop	{r3, pc}
 8004674:	2001      	movs	r0, #1
 8004676:	bd08      	pop	{r3, pc}
 8004678:	acc09ee8 	.word	0xacc09ee8
 800467c:	200004c0 	.word	0x200004c0
 8004680:	0800e370 	.word	0x0800e370
 8004684:	0800e368 	.word	0x0800e368

08004688 <acc_service_activate>:
 8004688:	b570      	push	{r4, r5, r6, lr}
 800468a:	4604      	mov	r4, r0
 800468c:	f7ff ffe4 	bl	8004658 <acc_service_handle_valid>
 8004690:	b1b0      	cbz	r0, 80046c0 <acc_service_activate+0x38>
 8004692:	4b19      	ldr	r3, [pc, #100]	; (80046f8 <acc_service_activate+0x70>)
 8004694:	7818      	ldrb	r0, [r3, #0]
 8004696:	b198      	cbz	r0, 80046c0 <acc_service_activate+0x38>
 8004698:	7a63      	ldrb	r3, [r4, #9]
 800469a:	b903      	cbnz	r3, 800469e <acc_service_activate+0x16>
 800469c:	bd70      	pop	{r4, r5, r6, pc}
 800469e:	6863      	ldr	r3, [r4, #4]
 80046a0:	2b2a      	cmp	r3, #42	; 0x2a
 80046a2:	d80d      	bhi.n	80046c0 <acc_service_activate+0x38>
 80046a4:	4d15      	ldr	r5, [pc, #84]	; (80046fc <acc_service_activate+0x74>)
 80046a6:	f815 2013 	ldrb.w	r2, [r5, r3, lsl #1]
 80046aa:	b94a      	cbnz	r2, 80046c0 <acc_service_activate+0x38>
 80046ac:	eb05 0243 	add.w	r2, r5, r3, lsl #1
 80046b0:	2101      	movs	r1, #1
 80046b2:	7856      	ldrb	r6, [r2, #1]
 80046b4:	f805 1013 	strb.w	r1, [r5, r3, lsl #1]
 80046b8:	b156      	cbz	r6, 80046d0 <acc_service_activate+0x48>
 80046ba:	2200      	movs	r2, #0
 80046bc:	f805 2013 	strb.w	r2, [r5, r3, lsl #1]
 80046c0:	4b0f      	ldr	r3, [pc, #60]	; (8004700 <acc_service_activate+0x78>)
 80046c2:	4a10      	ldr	r2, [pc, #64]	; (8004704 <acc_service_activate+0x7c>)
 80046c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046c6:	4910      	ldr	r1, [pc, #64]	; (8004708 <acc_service_activate+0x80>)
 80046c8:	2000      	movs	r0, #0
 80046ca:	4798      	blx	r3
 80046cc:	2000      	movs	r0, #0
 80046ce:	bd70      	pop	{r4, r5, r6, pc}
 80046d0:	f104 0018 	add.w	r0, r4, #24
 80046d4:	f002 fe38 	bl	8007348 <acc_sensor_manager_start_measurement>
 80046d8:	6863      	ldr	r3, [r4, #4]
 80046da:	b910      	cbnz	r0, 80046e2 <acc_service_activate+0x5a>
 80046dc:	2b2a      	cmp	r3, #42	; 0x2a
 80046de:	d8ef      	bhi.n	80046c0 <acc_service_activate+0x38>
 80046e0:	e7eb      	b.n	80046ba <acc_service_activate+0x32>
 80046e2:	2b2a      	cmp	r3, #42	; 0x2a
 80046e4:	d805      	bhi.n	80046f2 <acc_service_activate+0x6a>
 80046e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80046ea:	7266      	strb	r6, [r4, #9]
 80046ec:	f825 2013 	strh.w	r2, [r5, r3, lsl #1]
 80046f0:	bd70      	pop	{r4, r5, r6, pc}
 80046f2:	7266      	strb	r6, [r4, #9]
 80046f4:	bd70      	pop	{r4, r5, r6, pc}
 80046f6:	bf00      	nop
 80046f8:	200002f9 	.word	0x200002f9
 80046fc:	200002fc 	.word	0x200002fc
 8004700:	200004c0 	.word	0x200004c0
 8004704:	0800e380 	.word	0x0800e380
 8004708:	0800e368 	.word	0x0800e368

0800470c <acc_service_deactivate>:
 800470c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004710:	4605      	mov	r5, r0
 8004712:	f7ff ffa1 	bl	8004658 <acc_service_handle_valid>
 8004716:	b110      	cbz	r0, 800471e <acc_service_deactivate+0x12>
 8004718:	4b16      	ldr	r3, [pc, #88]	; (8004774 <acc_service_deactivate+0x68>)
 800471a:	781c      	ldrb	r4, [r3, #0]
 800471c:	b94c      	cbnz	r4, 8004732 <acc_service_deactivate+0x26>
 800471e:	4b16      	ldr	r3, [pc, #88]	; (8004778 <acc_service_deactivate+0x6c>)
 8004720:	4a16      	ldr	r2, [pc, #88]	; (800477c <acc_service_deactivate+0x70>)
 8004722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004724:	4916      	ldr	r1, [pc, #88]	; (8004780 <acc_service_deactivate+0x74>)
 8004726:	2000      	movs	r0, #0
 8004728:	4798      	blx	r3
 800472a:	2400      	movs	r4, #0
 800472c:	4620      	mov	r0, r4
 800472e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004732:	7a6b      	ldrb	r3, [r5, #9]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d1f9      	bne.n	800472c <acc_service_deactivate+0x20>
 8004738:	686b      	ldr	r3, [r5, #4]
 800473a:	2b2a      	cmp	r3, #42	; 0x2a
 800473c:	d8ef      	bhi.n	800471e <acc_service_deactivate+0x12>
 800473e:	4e11      	ldr	r6, [pc, #68]	; (8004784 <acc_service_deactivate+0x78>)
 8004740:	f816 7013 	ldrb.w	r7, [r6, r3, lsl #1]
 8004744:	2f00      	cmp	r7, #0
 8004746:	d1ea      	bne.n	800471e <acc_service_deactivate+0x12>
 8004748:	f04f 0801 	mov.w	r8, #1
 800474c:	f105 0018 	add.w	r0, r5, #24
 8004750:	f806 8013 	strb.w	r8, [r6, r3, lsl #1]
 8004754:	f002 fe32 	bl	80073bc <acc_sensor_manager_stop_measurement>
 8004758:	686b      	ldr	r3, [r5, #4]
 800475a:	2b2a      	cmp	r3, #42	; 0x2a
 800475c:	d807      	bhi.n	800476e <acc_service_deactivate+0x62>
 800475e:	eb06 0243 	add.w	r2, r6, r3, lsl #1
 8004762:	7057      	strb	r7, [r2, #1]
 8004764:	f885 8009 	strb.w	r8, [r5, #9]
 8004768:	f806 7013 	strb.w	r7, [r6, r3, lsl #1]
 800476c:	e7de      	b.n	800472c <acc_service_deactivate+0x20>
 800476e:	f885 8009 	strb.w	r8, [r5, #9]
 8004772:	e7db      	b.n	800472c <acc_service_deactivate+0x20>
 8004774:	200002f9 	.word	0x200002f9
 8004778:	200004c0 	.word	0x200004c0
 800477c:	0800e39c 	.word	0x0800e39c
 8004780:	0800e368 	.word	0x0800e368
 8004784:	200002fc 	.word	0x200002fc

08004788 <acc_service_get_next>:
 8004788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800478c:	460c      	mov	r4, r1
 800478e:	b082      	sub	sp, #8
 8004790:	4606      	mov	r6, r0
 8004792:	f7ff ff61 	bl	8004658 <acc_service_handle_valid>
 8004796:	7ea5      	ldrb	r5, [r4, #26]
 8004798:	b175      	cbz	r5, 80047b8 <acc_service_get_next+0x30>
 800479a:	6863      	ldr	r3, [r4, #4]
 800479c:	b10b      	cbz	r3, 80047a2 <acc_service_get_next+0x1a>
 800479e:	68e3      	ldr	r3, [r4, #12]
 80047a0:	b96b      	cbnz	r3, 80047be <acc_service_get_next+0x36>
 80047a2:	4b29      	ldr	r3, [pc, #164]	; (8004848 <acc_service_get_next+0xc0>)
 80047a4:	4a29      	ldr	r2, [pc, #164]	; (800484c <acc_service_get_next+0xc4>)
 80047a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047a8:	4929      	ldr	r1, [pc, #164]	; (8004850 <acc_service_get_next+0xc8>)
 80047aa:	2000      	movs	r0, #0
 80047ac:	4798      	blx	r3
 80047ae:	2500      	movs	r5, #0
 80047b0:	4628      	mov	r0, r5
 80047b2:	b002      	add	sp, #8
 80047b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047b8:	68a3      	ldr	r3, [r4, #8]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d033      	beq.n	8004826 <acc_service_get_next+0x9e>
 80047be:	b920      	cbnz	r0, 80047ca <acc_service_get_next+0x42>
 80047c0:	2500      	movs	r5, #0
 80047c2:	4628      	mov	r0, r5
 80047c4:	b002      	add	sp, #8
 80047c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047ca:	7a33      	ldrb	r3, [r6, #8]
 80047cc:	7822      	ldrb	r2, [r4, #0]
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d007      	beq.n	80047e2 <acc_service_get_next+0x5a>
 80047d2:	491d      	ldr	r1, [pc, #116]	; (8004848 <acc_service_get_next+0xc0>)
 80047d4:	9200      	str	r2, [sp, #0]
 80047d6:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 80047d8:	4a1e      	ldr	r2, [pc, #120]	; (8004854 <acc_service_get_next+0xcc>)
 80047da:	491d      	ldr	r1, [pc, #116]	; (8004850 <acc_service_get_next+0xc8>)
 80047dc:	2000      	movs	r0, #0
 80047de:	47a0      	blx	r4
 80047e0:	e7ee      	b.n	80047c0 <acc_service_get_next+0x38>
 80047e2:	7e27      	ldrb	r7, [r4, #24]
 80047e4:	bb4f      	cbnz	r7, 800483a <acc_service_get_next+0xb2>
 80047e6:	f896 8009 	ldrb.w	r8, [r6, #9]
 80047ea:	f1b8 0f00 	cmp.w	r8, #0
 80047ee:	d00f      	beq.n	8004810 <acc_service_get_next+0x88>
 80047f0:	4b15      	ldr	r3, [pc, #84]	; (8004848 <acc_service_get_next+0xc0>)
 80047f2:	4a19      	ldr	r2, [pc, #100]	; (8004858 <acc_service_get_next+0xd0>)
 80047f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047f6:	4916      	ldr	r1, [pc, #88]	; (8004850 <acc_service_get_next+0xc8>)
 80047f8:	2000      	movs	r0, #0
 80047fa:	4798      	blx	r3
 80047fc:	2500      	movs	r5, #0
 80047fe:	2f00      	cmp	r7, #0
 8004800:	d0df      	beq.n	80047c2 <acc_service_get_next+0x3a>
 8004802:	4630      	mov	r0, r6
 8004804:	f7ff ff82 	bl	800470c <acc_service_deactivate>
 8004808:	4628      	mov	r0, r5
 800480a:	b002      	add	sp, #8
 800480c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004810:	6933      	ldr	r3, [r6, #16]
 8004812:	6174      	str	r4, [r6, #20]
 8004814:	e9d3 0200 	ldrd	r0, r2, [r3]
 8004818:	4790      	blx	r2
 800481a:	7e65      	ldrb	r5, [r4, #25]
 800481c:	f8c6 8014 	str.w	r8, [r6, #20]
 8004820:	f085 0501 	eor.w	r5, r5, #1
 8004824:	e7eb      	b.n	80047fe <acc_service_get_next+0x76>
 8004826:	4b08      	ldr	r3, [pc, #32]	; (8004848 <acc_service_get_next+0xc0>)
 8004828:	4a0c      	ldr	r2, [pc, #48]	; (800485c <acc_service_get_next+0xd4>)
 800482a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800482c:	4908      	ldr	r1, [pc, #32]	; (8004850 <acc_service_get_next+0xc8>)
 800482e:	4628      	mov	r0, r5
 8004830:	4798      	blx	r3
 8004832:	4628      	mov	r0, r5
 8004834:	b002      	add	sp, #8
 8004836:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800483a:	4630      	mov	r0, r6
 800483c:	f7ff ff24 	bl	8004688 <acc_service_activate>
 8004840:	4607      	mov	r7, r0
 8004842:	2800      	cmp	r0, #0
 8004844:	d1cf      	bne.n	80047e6 <acc_service_get_next+0x5e>
 8004846:	e7bb      	b.n	80047c0 <acc_service_get_next+0x38>
 8004848:	200004c0 	.word	0x200004c0
 800484c:	0800e3b8 	.word	0x0800e3b8
 8004850:	0800e368 	.word	0x0800e368
 8004854:	0800e3f0 	.word	0x0800e3f0
 8004858:	0800e40c 	.word	0x0800e40c
 800485c:	0800e3d8 	.word	0x0800e3d8

08004860 <acc_service_configuration_valid>:
 8004860:	b508      	push	{r3, lr}
 8004862:	b118      	cbz	r0, 800486c <acc_service_configuration_valid+0xc>
 8004864:	4b09      	ldr	r3, [pc, #36]	; (800488c <acc_service_configuration_valid+0x2c>)
 8004866:	6802      	ldr	r2, [r0, #0]
 8004868:	429a      	cmp	r2, r3
 800486a:	d007      	beq.n	800487c <acc_service_configuration_valid+0x1c>
 800486c:	4b08      	ldr	r3, [pc, #32]	; (8004890 <acc_service_configuration_valid+0x30>)
 800486e:	4a09      	ldr	r2, [pc, #36]	; (8004894 <acc_service_configuration_valid+0x34>)
 8004870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004872:	4909      	ldr	r1, [pc, #36]	; (8004898 <acc_service_configuration_valid+0x38>)
 8004874:	2000      	movs	r0, #0
 8004876:	4798      	blx	r3
 8004878:	2000      	movs	r0, #0
 800487a:	bd08      	pop	{r3, pc}
 800487c:	8b03      	ldrh	r3, [r0, #24]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d0f4      	beq.n	800486c <acc_service_configuration_valid+0xc>
 8004882:	6943      	ldr	r3, [r0, #20]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d0f1      	beq.n	800486c <acc_service_configuration_valid+0xc>
 8004888:	2001      	movs	r0, #1
 800488a:	bd08      	pop	{r3, pc}
 800488c:	acc09dd7 	.word	0xacc09dd7
 8004890:	200004c0 	.word	0x200004c0
 8004894:	0800e350 	.word	0x0800e350
 8004898:	0800e368 	.word	0x0800e368

0800489c <acc_service_configuration_check>:
 800489c:	b510      	push	{r4, lr}
 800489e:	4604      	mov	r4, r0
 80048a0:	f7ff ffde 	bl	8004860 <acc_service_configuration_valid>
 80048a4:	b118      	cbz	r0, 80048ae <acc_service_configuration_check+0x12>
 80048a6:	7963      	ldrb	r3, [r4, #5]
 80048a8:	3b01      	subs	r3, #1
 80048aa:	2b04      	cmp	r3, #4
 80048ac:	d800      	bhi.n	80048b0 <acc_service_configuration_check+0x14>
 80048ae:	bd10      	pop	{r4, pc}
 80048b0:	4b03      	ldr	r3, [pc, #12]	; (80048c0 <acc_service_configuration_check+0x24>)
 80048b2:	4a04      	ldr	r2, [pc, #16]	; (80048c4 <acc_service_configuration_check+0x28>)
 80048b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048b6:	4904      	ldr	r1, [pc, #16]	; (80048c8 <acc_service_configuration_check+0x2c>)
 80048b8:	2000      	movs	r0, #0
 80048ba:	4798      	blx	r3
 80048bc:	2000      	movs	r0, #0
 80048be:	bd10      	pop	{r4, pc}
 80048c0:	200004c0 	.word	0x200004c0
 80048c4:	0800e424 	.word	0x0800e424
 80048c8:	0800e368 	.word	0x0800e368

080048cc <acc_service_profile_set>:
 80048cc:	b510      	push	{r4, lr}
 80048ce:	b138      	cbz	r0, 80048e0 <acc_service_profile_set+0x14>
 80048d0:	6882      	ldr	r2, [r0, #8]
 80048d2:	4604      	mov	r4, r0
 80048d4:	b122      	cbz	r2, 80048e0 <acc_service_profile_set+0x14>
 80048d6:	7141      	strb	r1, [r0, #5]
 80048d8:	4790      	blx	r2
 80048da:	7b23      	ldrb	r3, [r4, #12]
 80048dc:	b963      	cbnz	r3, 80048f8 <acc_service_profile_set+0x2c>
 80048de:	bd10      	pop	{r4, pc}
 80048e0:	f000 ff9e 	bl	8005820 <acc_rss_integration_log_level>
 80048e4:	2800      	cmp	r0, #0
 80048e6:	d0fa      	beq.n	80048de <acc_service_profile_set+0x12>
 80048e8:	4b06      	ldr	r3, [pc, #24]	; (8004904 <acc_service_profile_set+0x38>)
 80048ea:	4a07      	ldr	r2, [pc, #28]	; (8004908 <acc_service_profile_set+0x3c>)
 80048ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048ee:	4907      	ldr	r1, [pc, #28]	; (800490c <acc_service_profile_set+0x40>)
 80048f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048f4:	2001      	movs	r0, #1
 80048f6:	4718      	bx	r3
 80048f8:	4620      	mov	r0, r4
 80048fa:	2101      	movs	r1, #1
 80048fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004900:	f7ff be42 	b.w	8004588 <set_maximize_signal_attenuation>
 8004904:	200004c0 	.word	0x200004c0
 8004908:	0800e350 	.word	0x0800e350
 800490c:	0800e368 	.word	0x0800e368

08004910 <acc_service_maximize_signal_attenuation_set>:
 8004910:	b110      	cbz	r0, 8004918 <acc_service_maximize_signal_attenuation_set+0x8>
 8004912:	7301      	strb	r1, [r0, #12]
 8004914:	f7ff be38 	b.w	8004588 <set_maximize_signal_attenuation>
 8004918:	b510      	push	{r4, lr}
 800491a:	f000 ff81 	bl	8005820 <acc_rss_integration_log_level>
 800491e:	b138      	cbz	r0, 8004930 <acc_service_maximize_signal_attenuation_set+0x20>
 8004920:	4b04      	ldr	r3, [pc, #16]	; (8004934 <acc_service_maximize_signal_attenuation_set+0x24>)
 8004922:	4a05      	ldr	r2, [pc, #20]	; (8004938 <acc_service_maximize_signal_attenuation_set+0x28>)
 8004924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004926:	4905      	ldr	r1, [pc, #20]	; (800493c <acc_service_maximize_signal_attenuation_set+0x2c>)
 8004928:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800492c:	2001      	movs	r0, #1
 800492e:	4718      	bx	r3
 8004930:	bd10      	pop	{r4, pc}
 8004932:	bf00      	nop
 8004934:	200004c0 	.word	0x200004c0
 8004938:	0800e350 	.word	0x0800e350
 800493c:	0800e368 	.word	0x0800e368

08004940 <acc_service_initialize_service_configuration>:
 8004940:	b538      	push	{r3, r4, r5, lr}
 8004942:	7101      	strb	r1, [r0, #4]
 8004944:	6102      	str	r2, [r0, #16]
 8004946:	9905      	ldr	r1, [sp, #20]
 8004948:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 800494c:	4d07      	ldr	r5, [pc, #28]	; (800496c <acc_service_initialize_service_configuration+0x2c>)
 800494e:	6143      	str	r3, [r0, #20]
 8004950:	4604      	mov	r4, r0
 8004952:	6005      	str	r5, [r0, #0]
 8004954:	6081      	str	r1, [r0, #8]
 8004956:	8302      	strh	r2, [r0, #24]
 8004958:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800495c:	f7ff ffb6 	bl	80048cc <acc_service_profile_set>
 8004960:	4620      	mov	r0, r4
 8004962:	2100      	movs	r1, #0
 8004964:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004968:	f7ff bfd2 	b.w	8004910 <acc_service_maximize_signal_attenuation_set>
 800496c:	acc09dd7 	.word	0xacc09dd7

08004970 <envelope_send_data>:
 8004970:	b570      	push	{r4, r5, r6, lr}
 8004972:	460b      	mov	r3, r1
 8004974:	b084      	sub	sp, #16
 8004976:	ac02      	add	r4, sp, #8
 8004978:	4601      	mov	r1, r0
 800497a:	4610      	mov	r0, r2
 800497c:	795a      	ldrb	r2, [r3, #5]
 800497e:	9400      	str	r4, [sp, #0]
 8004980:	791e      	ldrb	r6, [r3, #4]
 8004982:	79dd      	ldrb	r5, [r3, #7]
 8004984:	799c      	ldrb	r4, [r3, #6]
 8004986:	f88d 200d 	strb.w	r2, [sp, #13]
 800498a:	f88d 2008 	strb.w	r2, [sp, #8]
 800498e:	691a      	ldr	r2, [r3, #16]
 8004990:	f88d 600e 	strb.w	r6, [sp, #14]
 8004994:	ab03      	add	r3, sp, #12
 8004996:	f88d 500f 	strb.w	r5, [sp, #15]
 800499a:	f88d 400c 	strb.w	r4, [sp, #12]
 800499e:	f7ff fe37 	bl	8004610 <acc_service_send_data>
 80049a2:	b004      	add	sp, #16
 80049a4:	bd70      	pop	{r4, r5, r6, pc}
 80049a6:	bf00      	nop

080049a8 <envelope_create_service>:
 80049a8:	b570      	push	{r4, r5, r6, lr}
 80049aa:	b0a4      	sub	sp, #144	; 0x90
 80049ac:	2288      	movs	r2, #136	; 0x88
 80049ae:	4604      	mov	r4, r0
 80049b0:	a802      	add	r0, sp, #8
 80049b2:	460d      	mov	r5, r1
 80049b4:	f008 fc84 	bl	800d2c0 <memcpy>
 80049b8:	a809      	add	r0, sp, #36	; 0x24
 80049ba:	f000 fcc3 	bl	8005344 <acc_base_configuration_downsampling_factor_get>
 80049be:	ee07 0a90 	vmov	s15, r0
 80049c2:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80049c6:	eddd 7a23 	vldr	s15, [sp, #140]	; 0x8c
 80049ca:	a809      	add	r0, sp, #36	; 0x24
 80049cc:	ee20 0a27 	vmul.f32	s0, s0, s15
 80049d0:	f000 fbb2 	bl	8005138 <acc_base_configuration_demodulation_filter_cutoff_freq_ratio_set>
 80049d4:	a802      	add	r0, sp, #8
 80049d6:	f7ff ff61 	bl	800489c <acc_service_configuration_check>
 80049da:	b1c0      	cbz	r0, 8004a0e <envelope_create_service+0x66>
 80049dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80049de:	2b04      	cmp	r3, #4
 80049e0:	d00f      	beq.n	8004a02 <envelope_create_service+0x5a>
 80049e2:	a809      	add	r0, sp, #36	; 0x24
 80049e4:	f000 fdb8 	bl	8005558 <acc_base_configuration_check>
 80049e8:	b188      	cbz	r0, 8004a0e <envelope_create_service+0x66>
 80049ea:	a809      	add	r0, sp, #36	; 0x24
 80049ec:	f000 fcaa 	bl	8005344 <acc_base_configuration_downsampling_factor_get>
 80049f0:	1e43      	subs	r3, r0, #1
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d90d      	bls.n	8004a14 <envelope_create_service+0x6c>
 80049f8:	2804      	cmp	r0, #4
 80049fa:	d00b      	beq.n	8004a14 <envelope_create_service+0x6c>
 80049fc:	4b1a      	ldr	r3, [pc, #104]	; (8004a68 <envelope_create_service+0xc0>)
 80049fe:	4a1b      	ldr	r2, [pc, #108]	; (8004a6c <envelope_create_service+0xc4>)
 8004a00:	e001      	b.n	8004a06 <envelope_create_service+0x5e>
 8004a02:	4b19      	ldr	r3, [pc, #100]	; (8004a68 <envelope_create_service+0xc0>)
 8004a04:	4a1a      	ldr	r2, [pc, #104]	; (8004a70 <envelope_create_service+0xc8>)
 8004a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a08:	491a      	ldr	r1, [pc, #104]	; (8004a74 <envelope_create_service+0xcc>)
 8004a0a:	2000      	movs	r0, #0
 8004a0c:	4798      	blx	r3
 8004a0e:	2000      	movs	r0, #0
 8004a10:	b024      	add	sp, #144	; 0x90
 8004a12:	bd70      	pop	{r4, r5, r6, pc}
 8004a14:	2200      	movs	r2, #0
 8004a16:	4611      	mov	r1, r2
 8004a18:	a809      	add	r0, sp, #36	; 0x24
 8004a1a:	f000 fd01 	bl	8005420 <acc_base_configuration_cca_get>
 8004a1e:	2100      	movs	r1, #0
 8004a20:	4606      	mov	r6, r0
 8004a22:	a809      	add	r0, sp, #36	; 0x24
 8004a24:	f000 fb4e 	bl	80050c4 <acc_base_configuration_time_domain_low_pass_filter_alpha_get>
 8004a28:	b106      	cbz	r6, 8004a2c <envelope_create_service+0x84>
 8004a2a:	b990      	cbnz	r0, 8004a52 <envelope_create_service+0xaa>
 8004a2c:	792b      	ldrb	r3, [r5, #4]
 8004a2e:	7223      	strb	r3, [r4, #8]
 8004a30:	4b11      	ldr	r3, [pc, #68]	; (8004a78 <envelope_create_service+0xd0>)
 8004a32:	9301      	str	r3, [sp, #4]
 8004a34:	aa09      	add	r2, sp, #36	; 0x24
 8004a36:	4623      	mov	r3, r4
 8004a38:	a901      	add	r1, sp, #4
 8004a3a:	f104 0018 	add.w	r0, r4, #24
 8004a3e:	f000 ff21 	bl	8005884 <acc_pipeline_envelope_assemble>
 8004a42:	4b0e      	ldr	r3, [pc, #56]	; (8004a7c <envelope_create_service+0xd4>)
 8004a44:	6120      	str	r0, [r4, #16]
 8004a46:	3800      	subs	r0, #0
 8004a48:	bf18      	it	ne
 8004a4a:	2001      	movne	r0, #1
 8004a4c:	60e3      	str	r3, [r4, #12]
 8004a4e:	b024      	add	sp, #144	; 0x90
 8004a50:	bd70      	pop	{r4, r5, r6, pc}
 8004a52:	f000 fee5 	bl	8005820 <acc_rss_integration_log_level>
 8004a56:	2800      	cmp	r0, #0
 8004a58:	d0e8      	beq.n	8004a2c <envelope_create_service+0x84>
 8004a5a:	4b03      	ldr	r3, [pc, #12]	; (8004a68 <envelope_create_service+0xc0>)
 8004a5c:	4a08      	ldr	r2, [pc, #32]	; (8004a80 <envelope_create_service+0xd8>)
 8004a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a60:	4904      	ldr	r1, [pc, #16]	; (8004a74 <envelope_create_service+0xcc>)
 8004a62:	2001      	movs	r0, #1
 8004a64:	4798      	blx	r3
 8004a66:	e7e1      	b.n	8004a2c <envelope_create_service+0x84>
 8004a68:	200004c0 	.word	0x200004c0
 8004a6c:	0800e48c 	.word	0x0800e48c
 8004a70:	0800e43c 	.word	0x0800e43c
 8004a74:	0800e478 	.word	0x0800e478
 8004a78:	08004971 	.word	0x08004971
 8004a7c:	080045fd 	.word	0x080045fd
 8004a80:	0800e4ac 	.word	0x0800e4ac

08004a84 <get_and_validate_envelope_configuration>:
 8004a84:	b510      	push	{r4, lr}
 8004a86:	4604      	mov	r4, r0
 8004a88:	f7ff feea 	bl	8004860 <acc_service_configuration_valid>
 8004a8c:	b108      	cbz	r0, 8004a92 <get_and_validate_envelope_configuration+0xe>
 8004a8e:	7923      	ldrb	r3, [r4, #4]
 8004a90:	b153      	cbz	r3, 8004aa8 <get_and_validate_envelope_configuration+0x24>
 8004a92:	f000 fec5 	bl	8005820 <acc_rss_integration_log_level>
 8004a96:	b130      	cbz	r0, 8004aa6 <get_and_validate_envelope_configuration+0x22>
 8004a98:	4b04      	ldr	r3, [pc, #16]	; (8004aac <get_and_validate_envelope_configuration+0x28>)
 8004a9a:	4a05      	ldr	r2, [pc, #20]	; (8004ab0 <get_and_validate_envelope_configuration+0x2c>)
 8004a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a9e:	4905      	ldr	r1, [pc, #20]	; (8004ab4 <get_and_validate_envelope_configuration+0x30>)
 8004aa0:	2001      	movs	r0, #1
 8004aa2:	4798      	blx	r3
 8004aa4:	2000      	movs	r0, #0
 8004aa6:	bd10      	pop	{r4, pc}
 8004aa8:	4620      	mov	r0, r4
 8004aaa:	bd10      	pop	{r4, pc}
 8004aac:	200004c0 	.word	0x200004c0
 8004ab0:	0800e350 	.word	0x0800e350
 8004ab4:	0800e478 	.word	0x0800e478

08004ab8 <set_configuration_for_profile>:
 8004ab8:	b530      	push	{r4, r5, lr}
 8004aba:	b083      	sub	sp, #12
 8004abc:	460c      	mov	r4, r1
 8004abe:	f7ff ffe1 	bl	8004a84 <get_and_validate_envelope_configuration>
 8004ac2:	b1c0      	cbz	r0, 8004af6 <set_configuration_for_profile+0x3e>
 8004ac4:	1e61      	subs	r1, r4, #1
 8004ac6:	4605      	mov	r5, r0
 8004ac8:	301c      	adds	r0, #28
 8004aca:	2904      	cmp	r1, #4
 8004acc:	d813      	bhi.n	8004af6 <set_configuration_for_profile+0x3e>
 8004ace:	e8df f001 	tbb	[pc, r1]
 8004ad2:	2514      	.short	0x2514
 8004ad4:	3836      	.short	0x3836
 8004ad6:	03          	.byte	0x03
 8004ad7:	00          	.byte	0x00
 8004ad8:	2110      	movs	r1, #16
 8004ada:	9001      	str	r0, [sp, #4]
 8004adc:	f000 fb9c 	bl	8005218 <acc_base_configuration_wg_duration_set>
 8004ae0:	9801      	ldr	r0, [sp, #4]
 8004ae2:	2106      	movs	r1, #6
 8004ae4:	f000 fb84 	bl	80051f0 <acc_base_configuration_integrator_set>
 8004ae8:	9801      	ldr	r0, [sp, #4]
 8004aea:	2101      	movs	r1, #1
 8004aec:	f000 fba8 	bl	8005240 <acc_base_configuration_integrator_ramp_up_set>
 8004af0:	4b15      	ldr	r3, [pc, #84]	; (8004b48 <set_configuration_for_profile+0x90>)
 8004af2:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
 8004af6:	b003      	add	sp, #12
 8004af8:	bd30      	pop	{r4, r5, pc}
 8004afa:	2100      	movs	r1, #0
 8004afc:	9001      	str	r0, [sp, #4]
 8004afe:	f000 fb8b 	bl	8005218 <acc_base_configuration_wg_duration_set>
 8004b02:	9801      	ldr	r0, [sp, #4]
 8004b04:	2100      	movs	r1, #0
 8004b06:	f000 fb73 	bl	80051f0 <acc_base_configuration_integrator_set>
 8004b0a:	9801      	ldr	r0, [sp, #4]
 8004b0c:	2103      	movs	r1, #3
 8004b0e:	f000 fb97 	bl	8005240 <acc_base_configuration_integrator_ramp_up_set>
 8004b12:	4b0e      	ldr	r3, [pc, #56]	; (8004b4c <set_configuration_for_profile+0x94>)
 8004b14:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
 8004b18:	b003      	add	sp, #12
 8004b1a:	bd30      	pop	{r4, r5, pc}
 8004b1c:	2107      	movs	r1, #7
 8004b1e:	9001      	str	r0, [sp, #4]
 8004b20:	f000 fb7a 	bl	8005218 <acc_base_configuration_wg_duration_set>
 8004b24:	9801      	ldr	r0, [sp, #4]
 8004b26:	2106      	movs	r1, #6
 8004b28:	f000 fb62 	bl	80051f0 <acc_base_configuration_integrator_set>
 8004b2c:	9801      	ldr	r0, [sp, #4]
 8004b2e:	2109      	movs	r1, #9
 8004b30:	f000 fb86 	bl	8005240 <acc_base_configuration_integrator_ramp_up_set>
 8004b34:	4b04      	ldr	r3, [pc, #16]	; (8004b48 <set_configuration_for_profile+0x90>)
 8004b36:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
 8004b3a:	b003      	add	sp, #12
 8004b3c:	bd30      	pop	{r4, r5, pc}
 8004b3e:	2109      	movs	r1, #9
 8004b40:	e7ed      	b.n	8004b1e <set_configuration_for_profile+0x66>
 8004b42:	210c      	movs	r1, #12
 8004b44:	e7c9      	b.n	8004ada <set_configuration_for_profile+0x22>
 8004b46:	bf00      	nop
 8004b48:	3b843809 	.word	0x3b843809
 8004b4c:	3c8461fa 	.word	0x3c8461fa

08004b50 <acc_service_envelope_configuration_create>:
 8004b50:	b570      	push	{r4, r5, r6, lr}
 8004b52:	4a3e      	ldr	r2, [pc, #248]	; (8004c4c <acc_service_envelope_configuration_create+0xfc>)
 8004b54:	b084      	sub	sp, #16
 8004b56:	236d      	movs	r3, #109	; 0x6d
 8004b58:	2188      	movs	r1, #136	; 0x88
 8004b5a:	2001      	movs	r0, #1
 8004b5c:	f000 fe30 	bl	80057c0 <acc_rss_integration_mem_calloc_debug>
 8004b60:	4605      	mov	r5, r0
 8004b62:	2800      	cmp	r0, #0
 8004b64:	d06f      	beq.n	8004c46 <acc_service_envelope_configuration_create+0xf6>
 8004b66:	493a      	ldr	r1, [pc, #232]	; (8004c50 <acc_service_envelope_configuration_create+0x100>)
 8004b68:	f100 041c 	add.w	r4, r0, #28
 8004b6c:	2602      	movs	r6, #2
 8004b6e:	2358      	movs	r3, #88	; 0x58
 8004b70:	4622      	mov	r2, r4
 8004b72:	e9cd 3100 	strd	r3, r1, [sp]
 8004b76:	9602      	str	r6, [sp, #8]
 8004b78:	4b36      	ldr	r3, [pc, #216]	; (8004c54 <acc_service_envelope_configuration_create+0x104>)
 8004b7a:	2100      	movs	r1, #0
 8004b7c:	f7ff fee0 	bl	8004940 <acc_service_initialize_service_configuration>
 8004b80:	ed9f 0a35 	vldr	s0, [pc, #212]	; 8004c58 <acc_service_envelope_configuration_create+0x108>
 8004b84:	4620      	mov	r0, r4
 8004b86:	f000 f9fd 	bl	8004f84 <acc_base_configuration_requested_start_set>
 8004b8a:	ed9f 0a34 	vldr	s0, [pc, #208]	; 8004c5c <acc_service_envelope_configuration_create+0x10c>
 8004b8e:	4620      	mov	r0, r4
 8004b90:	f000 fa14 	bl	8004fbc <acc_base_configuration_requested_length_set>
 8004b94:	4620      	mov	r0, r4
 8004b96:	2106      	movs	r1, #6
 8004b98:	f000 fc64 	bl	8005464 <acc_base_configuration_mur_set>
 8004b9c:	4620      	mov	r0, r4
 8004b9e:	210a      	movs	r1, #10
 8004ba0:	f000 fa64 	bl	800506c <acc_base_configuration_hw_accelerated_average_samples_set>
 8004ba4:	2101      	movs	r1, #1
 8004ba6:	4620      	mov	r0, r4
 8004ba8:	f000 f9d6 	bl	8004f58 <acc_base_configuration_sensor_set>
 8004bac:	4620      	mov	r0, r4
 8004bae:	f000 fa13 	bl	8004fd8 <acc_base_configuration_repetition_mode_on_demand_set>
 8004bb2:	4631      	mov	r1, r6
 8004bb4:	4620      	mov	r0, r4
 8004bb6:	f000 fa1f 	bl	8004ff8 <acc_base_configuration_power_save_mode_set>
 8004bba:	4620      	mov	r0, r4
 8004bbc:	2100      	movs	r1, #0
 8004bbe:	f000 fb67 	bl	8005290 <acc_base_configuration_use_point_range_set>
 8004bc2:	4620      	mov	r0, r4
 8004bc4:	2100      	movs	r1, #0
 8004bc6:	f000 fb4f 	bl	8005268 <acc_base_configuration_sweep_type_debug_set>
 8004bca:	4620      	mov	r0, r4
 8004bcc:	2100      	movs	r1, #0
 8004bce:	f000 fa25 	bl	800501c <acc_base_configuration_tx_disable_set>
 8004bd2:	4620      	mov	r0, r4
 8004bd4:	2100      	movs	r1, #0
 8004bd6:	f000 fa35 	bl	8005044 <acc_base_configuration_decrease_tx_emission_set>
 8004bda:	2200      	movs	r2, #0
 8004bdc:	4611      	mov	r1, r2
 8004bde:	2340      	movs	r3, #64	; 0x40
 8004be0:	4620      	mov	r0, r4
 8004be2:	f000 fc2f 	bl	8005444 <acc_base_configuration_cca_set>
 8004be6:	4620      	mov	r0, r4
 8004be8:	21ff      	movs	r1, #255	; 0xff
 8004bea:	f000 fb6f 	bl	80052cc <acc_base_configuration_staggered_vga_stabilization_time_set>
 8004bee:	4620      	mov	r0, r4
 8004bf0:	2100      	movs	r1, #0
 8004bf2:	f000 fb61 	bl	80052b8 <acc_base_configuration_use_fast_dll_refresh_routine_set>
 8004bf6:	4620      	mov	r0, r4
 8004bf8:	2101      	movs	r1, #1
 8004bfa:	f000 fbad 	bl	8005358 <acc_base_configuration_downsampling_factor_set>
 8004bfe:	4620      	mov	r0, r4
 8004c00:	210b      	movs	r1, #11
 8004c02:	f000 fae3 	bl	80051cc <acc_base_configuration_gain_set>
 8004c06:	2101      	movs	r1, #1
 8004c08:	4620      	mov	r0, r4
 8004c0a:	f000 fbb9 	bl	8005380 <acc_base_configuration_noise_level_normalization_set>
 8004c0e:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8004c60 <acc_service_envelope_configuration_create+0x110>
 8004c12:	4620      	mov	r0, r4
 8004c14:	f000 fa48 	bl	80050a8 <acc_base_configuration_phase_compensation_alpha_set>
 8004c18:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8004c64 <acc_service_envelope_configuration_create+0x114>
 8004c1c:	4620      	mov	r0, r4
 8004c1e:	2101      	movs	r1, #1
 8004c20:	f000 fa5c 	bl	80050dc <acc_base_configuration_time_domain_low_pass_filter_alpha_set>
 8004c24:	4620      	mov	r0, r4
 8004c26:	2101      	movs	r1, #1
 8004c28:	f000 fa70 	bl	800510c <acc_base_configuration_filter_demodulated_data_set>
 8004c2c:	4620      	mov	r0, r4
 8004c2e:	2101      	movs	r1, #1
 8004c30:	f000 fbc4 	bl	80053bc <acc_base_configuration_asynchronous_measurement_set>
 8004c34:	4620      	mov	r0, r4
 8004c36:	f44f 5196 	mov.w	r1, #4800	; 0x12c0
 8004c3a:	f000 fbd3 	bl	80053e4 <acc_base_configuration_min_pipeline_memory_size_set>
 8004c3e:	490a      	ldr	r1, [pc, #40]	; (8004c68 <acc_service_envelope_configuration_create+0x118>)
 8004c40:	4620      	mov	r0, r4
 8004c42:	f000 fa1b 	bl	800507c <acc_base_configuration_radar_engine_creation_set>
 8004c46:	4628      	mov	r0, r5
 8004c48:	b004      	add	sp, #16
 8004c4a:	bd70      	pop	{r4, r5, r6, pc}
 8004c4c:	0800e478 	.word	0x0800e478
 8004c50:	08004ab9 	.word	0x08004ab9
 8004c54:	080049a9 	.word	0x080049a9
 8004c58:	3e4ccccd 	.word	0x3e4ccccd
 8004c5c:	3ecccccd 	.word	0x3ecccccd
 8004c60:	3dcccccd 	.word	0x3dcccccd
 8004c64:	3e99999a 	.word	0x3e99999a
 8004c68:	0800665d 	.word	0x0800665d

08004c6c <acc_service_envelope_configuration_destroy>:
 8004c6c:	b130      	cbz	r0, 8004c7c <acc_service_envelope_configuration_destroy+0x10>
 8004c6e:	b510      	push	{r4, lr}
 8004c70:	4604      	mov	r4, r0
 8004c72:	6800      	ldr	r0, [r0, #0]
 8004c74:	f7ff fdf4 	bl	8004860 <acc_service_configuration_valid>
 8004c78:	b908      	cbnz	r0, 8004c7e <acc_service_envelope_configuration_destroy+0x12>
 8004c7a:	bd10      	pop	{r4, pc}
 8004c7c:	4770      	bx	lr
 8004c7e:	6820      	ldr	r0, [r4, #0]
 8004c80:	f7ff ff00 	bl	8004a84 <get_and_validate_envelope_configuration>
 8004c84:	f000 fdba 	bl	80057fc <acc_rss_integration_mem_free>
 8004c88:	2300      	movs	r3, #0
 8004c8a:	6023      	str	r3, [r4, #0]
 8004c8c:	bd10      	pop	{r4, pc}
 8004c8e:	bf00      	nop

08004c90 <acc_service_envelope_get_metadata>:
 8004c90:	b1e0      	cbz	r0, 8004ccc <acc_service_envelope_get_metadata+0x3c>
 8004c92:	7a03      	ldrb	r3, [r0, #8]
 8004c94:	b9d3      	cbnz	r3, 8004ccc <acc_service_envelope_get_metadata+0x3c>
 8004c96:	b1c9      	cbz	r1, 8004ccc <acc_service_envelope_get_metadata+0x3c>
 8004c98:	6903      	ldr	r3, [r0, #16]
 8004c9a:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8004cd0 <acc_service_envelope_get_metadata+0x40>
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	edd3 7a08 	vldr	s15, [r3, #32]
 8004ca4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004ca6:	8d58      	ldrh	r0, [r3, #42]	; 0x2a
 8004ca8:	b430      	push	{r4, r5}
 8004caa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004cae:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004cb2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004cb6:	695d      	ldr	r5, [r3, #20]
 8004cb8:	699c      	ldr	r4, [r3, #24]
 8004cba:	604c      	str	r4, [r1, #4]
 8004cbc:	1e53      	subs	r3, r2, #1
 8004cbe:	600d      	str	r5, [r1, #0]
 8004cc0:	edc1 7a03 	vstr	s15, [r1, #12]
 8004cc4:	bc30      	pop	{r4, r5}
 8004cc6:	814b      	strh	r3, [r1, #10]
 8004cc8:	8108      	strh	r0, [r1, #8]
 8004cca:	4770      	bx	lr
 8004ccc:	4770      	bx	lr
 8004cce:	bf00      	nop
 8004cd0:	4d8ef3c2 	.word	0x4d8ef3c2

08004cd4 <acc_service_envelope_get_next>:
 8004cd4:	b530      	push	{r4, r5, lr}
 8004cd6:	b08b      	sub	sp, #44	; 0x2c
 8004cd8:	0052      	lsls	r2, r2, #1
 8004cda:	9101      	str	r1, [sp, #4]
 8004cdc:	2400      	movs	r4, #0
 8004cde:	9206      	str	r2, [sp, #24]
 8004ce0:	9307      	str	r3, [sp, #28]
 8004ce2:	2204      	movs	r2, #4
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	9104      	str	r1, [sp, #16]
 8004ce8:	ad01      	add	r5, sp, #4
 8004cea:	a903      	add	r1, sp, #12
 8004cec:	f88d 400c 	strb.w	r4, [sp, #12]
 8004cf0:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
 8004cf4:	9505      	str	r5, [sp, #20]
 8004cf6:	9208      	str	r2, [sp, #32]
 8004cf8:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
 8004cfc:	f7ff fd44 	bl	8004788 <acc_service_get_next>
 8004d00:	b00b      	add	sp, #44	; 0x2c
 8004d02:	bd30      	pop	{r4, r5, pc}

08004d04 <destroy_handle>:
 8004d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d08:	4e15      	ldr	r6, [pc, #84]	; (8004d60 <destroy_handle+0x5c>)
 8004d0a:	4605      	mov	r5, r0
 8004d0c:	6874      	ldr	r4, [r6, #4]
 8004d0e:	f000 fd87 	bl	8005820 <acc_rss_integration_log_level>
 8004d12:	2803      	cmp	r0, #3
 8004d14:	d906      	bls.n	8004d24 <destroy_handle+0x20>
 8004d16:	4a13      	ldr	r2, [pc, #76]	; (8004d64 <destroy_handle+0x60>)
 8004d18:	686b      	ldr	r3, [r5, #4]
 8004d1a:	6b57      	ldr	r7, [r2, #52]	; 0x34
 8004d1c:	4912      	ldr	r1, [pc, #72]	; (8004d68 <destroy_handle+0x64>)
 8004d1e:	4a13      	ldr	r2, [pc, #76]	; (8004d6c <destroy_handle+0x68>)
 8004d20:	2004      	movs	r0, #4
 8004d22:	47b8      	blx	r7
 8004d24:	b144      	cbz	r4, 8004d38 <destroy_handle+0x34>
 8004d26:	42ac      	cmp	r4, r5
 8004d28:	d102      	bne.n	8004d30 <destroy_handle+0x2c>
 8004d2a:	e016      	b.n	8004d5a <destroy_handle+0x56>
 8004d2c:	42a5      	cmp	r5, r4
 8004d2e:	d00d      	beq.n	8004d4c <destroy_handle+0x48>
 8004d30:	4623      	mov	r3, r4
 8004d32:	6d64      	ldr	r4, [r4, #84]	; 0x54
 8004d34:	2c00      	cmp	r4, #0
 8004d36:	d1f9      	bne.n	8004d2c <destroy_handle+0x28>
 8004d38:	4a0a      	ldr	r2, [pc, #40]	; (8004d64 <destroy_handle+0x60>)
 8004d3a:	686b      	ldr	r3, [r5, #4]
 8004d3c:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8004d3e:	490a      	ldr	r1, [pc, #40]	; (8004d68 <destroy_handle+0x64>)
 8004d40:	4a0b      	ldr	r2, [pc, #44]	; (8004d70 <destroy_handle+0x6c>)
 8004d42:	46a4      	mov	ip, r4
 8004d44:	2000      	movs	r0, #0
 8004d46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d4a:	4760      	bx	ip
 8004d4c:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 8004d4e:	655a      	str	r2, [r3, #84]	; 0x54
 8004d50:	4628      	mov	r0, r5
 8004d52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d56:	f000 bd51 	b.w	80057fc <acc_rss_integration_mem_free>
 8004d5a:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8004d5c:	6073      	str	r3, [r6, #4]
 8004d5e:	e7f7      	b.n	8004d50 <destroy_handle+0x4c>
 8004d60:	20000354 	.word	0x20000354
 8004d64:	200004c0 	.word	0x200004c0
 8004d68:	0800e518 	.word	0x0800e518
 8004d6c:	0800e4f4 	.word	0x0800e4f4
 8004d70:	0800e528 	.word	0x0800e528

08004d74 <acc_service_manager_activate>:
 8004d74:	b510      	push	{r4, lr}
 8004d76:	4c05      	ldr	r4, [pc, #20]	; (8004d8c <acc_service_manager_activate+0x18>)
 8004d78:	7820      	ldrb	r0, [r4, #0]
 8004d7a:	b100      	cbz	r0, 8004d7e <acc_service_manager_activate+0xa>
 8004d7c:	bd10      	pop	{r4, pc}
 8004d7e:	2001      	movs	r0, #1
 8004d80:	7020      	strb	r0, [r4, #0]
 8004d82:	f7ff fc63 	bl	800464c <acc_service_set_module_active>
 8004d86:	7820      	ldrb	r0, [r4, #0]
 8004d88:	bd10      	pop	{r4, pc}
 8004d8a:	bf00      	nop
 8004d8c:	20000354 	.word	0x20000354

08004d90 <acc_service_create>:
 8004d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d94:	4e30      	ldr	r6, [pc, #192]	; (8004e58 <acc_service_create+0xc8>)
 8004d96:	7834      	ldrb	r4, [r6, #0]
 8004d98:	2c00      	cmp	r4, #0
 8004d9a:	d041      	beq.n	8004e20 <acc_service_create+0x90>
 8004d9c:	4605      	mov	r5, r0
 8004d9e:	f7ff fd5f 	bl	8004860 <acc_service_configuration_valid>
 8004da2:	b1a0      	cbz	r0, 8004dce <acc_service_create+0x3e>
 8004da4:	692b      	ldr	r3, [r5, #16]
 8004da6:	68df      	ldr	r7, [r3, #12]
 8004da8:	1e7b      	subs	r3, r7, #1
 8004daa:	2b29      	cmp	r3, #41	; 0x29
 8004dac:	d84a      	bhi.n	8004e44 <acc_service_create+0xb4>
 8004dae:	7873      	ldrb	r3, [r6, #1]
 8004db0:	b98b      	cbnz	r3, 8004dd6 <acc_service_create+0x46>
 8004db2:	6873      	ldr	r3, [r6, #4]
 8004db4:	b913      	cbnz	r3, 8004dbc <acc_service_create+0x2c>
 8004db6:	e00e      	b.n	8004dd6 <acc_service_create+0x46>
 8004db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dba:	b163      	cbz	r3, 8004dd6 <acc_service_create+0x46>
 8004dbc:	685a      	ldr	r2, [r3, #4]
 8004dbe:	4297      	cmp	r7, r2
 8004dc0:	d1fa      	bne.n	8004db8 <acc_service_create+0x28>
 8004dc2:	4b26      	ldr	r3, [pc, #152]	; (8004e5c <acc_service_create+0xcc>)
 8004dc4:	4a26      	ldr	r2, [pc, #152]	; (8004e60 <acc_service_create+0xd0>)
 8004dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dc8:	4926      	ldr	r1, [pc, #152]	; (8004e64 <acc_service_create+0xd4>)
 8004dca:	2000      	movs	r0, #0
 8004dcc:	4798      	blx	r3
 8004dce:	2400      	movs	r4, #0
 8004dd0:	4620      	mov	r0, r4
 8004dd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004dd6:	8b2c      	ldrh	r4, [r5, #24]
 8004dd8:	f000 fd22 	bl	8005820 <acc_rss_integration_log_level>
 8004ddc:	2803      	cmp	r0, #3
 8004dde:	d907      	bls.n	8004df0 <acc_service_create+0x60>
 8004de0:	4b1e      	ldr	r3, [pc, #120]	; (8004e5c <acc_service_create+0xcc>)
 8004de2:	4a21      	ldr	r2, [pc, #132]	; (8004e68 <acc_service_create+0xd8>)
 8004de4:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 8004de8:	491e      	ldr	r1, [pc, #120]	; (8004e64 <acc_service_create+0xd4>)
 8004dea:	463b      	mov	r3, r7
 8004dec:	2004      	movs	r0, #4
 8004dee:	47c0      	blx	r8
 8004df0:	4621      	mov	r1, r4
 8004df2:	4a1c      	ldr	r2, [pc, #112]	; (8004e64 <acc_service_create+0xd4>)
 8004df4:	23bd      	movs	r3, #189	; 0xbd
 8004df6:	2001      	movs	r0, #1
 8004df8:	f000 fce2 	bl	80057c0 <acc_rss_integration_mem_calloc_debug>
 8004dfc:	4604      	mov	r4, r0
 8004dfe:	2800      	cmp	r0, #0
 8004e00:	d0e5      	beq.n	8004dce <acc_service_create+0x3e>
 8004e02:	6873      	ldr	r3, [r6, #4]
 8004e04:	4a19      	ldr	r2, [pc, #100]	; (8004e6c <acc_service_create+0xdc>)
 8004e06:	6047      	str	r7, [r0, #4]
 8004e08:	6002      	str	r2, [r0, #0]
 8004e0a:	6543      	str	r3, [r0, #84]	; 0x54
 8004e0c:	6070      	str	r0, [r6, #4]
 8004e0e:	696b      	ldr	r3, [r5, #20]
 8004e10:	4629      	mov	r1, r5
 8004e12:	4798      	blx	r3
 8004e14:	b168      	cbz	r0, 8004e32 <acc_service_create+0xa2>
 8004e16:	2301      	movs	r3, #1
 8004e18:	7263      	strb	r3, [r4, #9]
 8004e1a:	4620      	mov	r0, r4
 8004e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e20:	4b0e      	ldr	r3, [pc, #56]	; (8004e5c <acc_service_create+0xcc>)
 8004e22:	4a13      	ldr	r2, [pc, #76]	; (8004e70 <acc_service_create+0xe0>)
 8004e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e26:	490f      	ldr	r1, [pc, #60]	; (8004e64 <acc_service_create+0xd4>)
 8004e28:	4620      	mov	r0, r4
 8004e2a:	4798      	blx	r3
 8004e2c:	4620      	mov	r0, r4
 8004e2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e32:	68e3      	ldr	r3, [r4, #12]
 8004e34:	b10b      	cbz	r3, 8004e3a <acc_service_create+0xaa>
 8004e36:	4620      	mov	r0, r4
 8004e38:	4798      	blx	r3
 8004e3a:	4620      	mov	r0, r4
 8004e3c:	f7ff ff62 	bl	8004d04 <destroy_handle>
 8004e40:	2400      	movs	r4, #0
 8004e42:	e7c5      	b.n	8004dd0 <acc_service_create+0x40>
 8004e44:	4b05      	ldr	r3, [pc, #20]	; (8004e5c <acc_service_create+0xcc>)
 8004e46:	4a0b      	ldr	r2, [pc, #44]	; (8004e74 <acc_service_create+0xe4>)
 8004e48:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8004e4a:	4906      	ldr	r1, [pc, #24]	; (8004e64 <acc_service_create+0xd4>)
 8004e4c:	232a      	movs	r3, #42	; 0x2a
 8004e4e:	2000      	movs	r0, #0
 8004e50:	47a0      	blx	r4
 8004e52:	2400      	movs	r4, #0
 8004e54:	e7bc      	b.n	8004dd0 <acc_service_create+0x40>
 8004e56:	bf00      	nop
 8004e58:	20000354 	.word	0x20000354
 8004e5c:	200004c0 	.word	0x200004c0
 8004e60:	0800e5bc 	.word	0x0800e5bc
 8004e64:	0800e518 	.word	0x0800e518
 8004e68:	0800e588 	.word	0x0800e588
 8004e6c:	acc09ee8 	.word	0xacc09ee8
 8004e70:	0800e5a8 	.word	0x0800e5a8
 8004e74:	0800e55c 	.word	0x0800e55c

08004e78 <acc_service_destroy>:
 8004e78:	4b11      	ldr	r3, [pc, #68]	; (8004ec0 <acc_service_destroy+0x48>)
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	b510      	push	{r4, lr}
 8004e7e:	b133      	cbz	r3, 8004e8e <acc_service_destroy+0x16>
 8004e80:	4604      	mov	r4, r0
 8004e82:	b118      	cbz	r0, 8004e8c <acc_service_destroy+0x14>
 8004e84:	6800      	ldr	r0, [r0, #0]
 8004e86:	f7ff fbe7 	bl	8004658 <acc_service_handle_valid>
 8004e8a:	b960      	cbnz	r0, 8004ea6 <acc_service_destroy+0x2e>
 8004e8c:	bd10      	pop	{r4, pc}
 8004e8e:	f000 fcc7 	bl	8005820 <acc_rss_integration_log_level>
 8004e92:	2800      	cmp	r0, #0
 8004e94:	d0fa      	beq.n	8004e8c <acc_service_destroy+0x14>
 8004e96:	4b0b      	ldr	r3, [pc, #44]	; (8004ec4 <acc_service_destroy+0x4c>)
 8004e98:	4a0b      	ldr	r2, [pc, #44]	; (8004ec8 <acc_service_destroy+0x50>)
 8004e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e9c:	490b      	ldr	r1, [pc, #44]	; (8004ecc <acc_service_destroy+0x54>)
 8004e9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ea2:	2001      	movs	r0, #1
 8004ea4:	4718      	bx	r3
 8004ea6:	6820      	ldr	r0, [r4, #0]
 8004ea8:	f7ff fc30 	bl	800470c <acc_service_deactivate>
 8004eac:	6820      	ldr	r0, [r4, #0]
 8004eae:	68c3      	ldr	r3, [r0, #12]
 8004eb0:	b10b      	cbz	r3, 8004eb6 <acc_service_destroy+0x3e>
 8004eb2:	4798      	blx	r3
 8004eb4:	6820      	ldr	r0, [r4, #0]
 8004eb6:	f7ff ff25 	bl	8004d04 <destroy_handle>
 8004eba:	2300      	movs	r3, #0
 8004ebc:	6023      	str	r3, [r4, #0]
 8004ebe:	bd10      	pop	{r4, pc}
 8004ec0:	20000354 	.word	0x20000354
 8004ec4:	200004c0 	.word	0x200004c0
 8004ec8:	0800e5a8 	.word	0x0800e5a8
 8004ecc:	0800e518 	.word	0x0800e518

08004ed0 <acc_service_manager_deactivate>:
 8004ed0:	b538      	push	{r3, r4, r5, lr}
 8004ed2:	4c0e      	ldr	r4, [pc, #56]	; (8004f0c <acc_service_manager_deactivate+0x3c>)
 8004ed4:	7823      	ldrb	r3, [r4, #0]
 8004ed6:	b1bb      	cbz	r3, 8004f08 <acc_service_manager_deactivate+0x38>
 8004ed8:	6863      	ldr	r3, [r4, #4]
 8004eda:	b17b      	cbz	r3, 8004efc <acc_service_manager_deactivate+0x2c>
 8004edc:	1d25      	adds	r5, r4, #4
 8004ede:	4628      	mov	r0, r5
 8004ee0:	f7ff ffca 	bl	8004e78 <acc_service_destroy>
 8004ee4:	6863      	ldr	r3, [r4, #4]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d1f9      	bne.n	8004ede <acc_service_manager_deactivate+0xe>
 8004eea:	f000 fc99 	bl	8005820 <acc_rss_integration_log_level>
 8004eee:	b128      	cbz	r0, 8004efc <acc_service_manager_deactivate+0x2c>
 8004ef0:	4b07      	ldr	r3, [pc, #28]	; (8004f10 <acc_service_manager_deactivate+0x40>)
 8004ef2:	4a08      	ldr	r2, [pc, #32]	; (8004f14 <acc_service_manager_deactivate+0x44>)
 8004ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ef6:	4908      	ldr	r1, [pc, #32]	; (8004f18 <acc_service_manager_deactivate+0x48>)
 8004ef8:	2001      	movs	r0, #1
 8004efa:	4798      	blx	r3
 8004efc:	2000      	movs	r0, #0
 8004efe:	7020      	strb	r0, [r4, #0]
 8004f00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f04:	f7ff bba2 	b.w	800464c <acc_service_set_module_active>
 8004f08:	bd38      	pop	{r3, r4, r5, pc}
 8004f0a:	bf00      	nop
 8004f0c:	20000354 	.word	0x20000354
 8004f10:	200004c0 	.word	0x200004c0
 8004f14:	0800e5e4 	.word	0x0800e5e4
 8004f18:	0800e518 	.word	0x0800e518

08004f1c <configuration_is_valid>:
 8004f1c:	b108      	cbz	r0, 8004f22 <configuration_is_valid+0x6>
 8004f1e:	2001      	movs	r0, #1
 8004f20:	4770      	bx	lr
 8004f22:	b510      	push	{r4, lr}
 8004f24:	4604      	mov	r4, r0
 8004f26:	f000 fc7b 	bl	8005820 <acc_rss_integration_log_level>
 8004f2a:	b130      	cbz	r0, 8004f3a <configuration_is_valid+0x1e>
 8004f2c:	4b03      	ldr	r3, [pc, #12]	; (8004f3c <configuration_is_valid+0x20>)
 8004f2e:	4a04      	ldr	r2, [pc, #16]	; (8004f40 <configuration_is_valid+0x24>)
 8004f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f32:	4904      	ldr	r1, [pc, #16]	; (8004f44 <configuration_is_valid+0x28>)
 8004f34:	2001      	movs	r0, #1
 8004f36:	4798      	blx	r3
 8004f38:	4620      	mov	r0, r4
 8004f3a:	bd10      	pop	{r4, pc}
 8004f3c:	200004c0 	.word	0x200004c0
 8004f40:	0800e630 	.word	0x0800e630
 8004f44:	0800e64c 	.word	0x0800e64c

08004f48 <acc_base_configuration_sensor_get>:
 8004f48:	b510      	push	{r4, lr}
 8004f4a:	4604      	mov	r4, r0
 8004f4c:	f7ff ffe6 	bl	8004f1c <configuration_is_valid>
 8004f50:	b900      	cbnz	r0, 8004f54 <acc_base_configuration_sensor_get+0xc>
 8004f52:	bd10      	pop	{r4, pc}
 8004f54:	68e0      	ldr	r0, [r4, #12]
 8004f56:	bd10      	pop	{r4, pc}

08004f58 <acc_base_configuration_sensor_set>:
 8004f58:	b538      	push	{r3, r4, r5, lr}
 8004f5a:	460d      	mov	r5, r1
 8004f5c:	4604      	mov	r4, r0
 8004f5e:	f7ff ffdd 	bl	8004f1c <configuration_is_valid>
 8004f62:	b100      	cbz	r0, 8004f66 <acc_base_configuration_sensor_set+0xe>
 8004f64:	60e5      	str	r5, [r4, #12]
 8004f66:	bd38      	pop	{r3, r4, r5, pc}

08004f68 <acc_base_configuration_requested_start_get>:
 8004f68:	b510      	push	{r4, lr}
 8004f6a:	4604      	mov	r4, r0
 8004f6c:	f7ff ffd6 	bl	8004f1c <configuration_is_valid>
 8004f70:	b910      	cbnz	r0, 8004f78 <acc_base_configuration_requested_start_get+0x10>
 8004f72:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8004f80 <acc_base_configuration_requested_start_get+0x18>
 8004f76:	bd10      	pop	{r4, pc}
 8004f78:	ed94 0a09 	vldr	s0, [r4, #36]	; 0x24
 8004f7c:	bd10      	pop	{r4, pc}
 8004f7e:	bf00      	nop
 8004f80:	00000000 	.word	0x00000000

08004f84 <acc_base_configuration_requested_start_set>:
 8004f84:	b510      	push	{r4, lr}
 8004f86:	ed2d 8b02 	vpush	{d8}
 8004f8a:	4604      	mov	r4, r0
 8004f8c:	eeb0 8a40 	vmov.f32	s16, s0
 8004f90:	f7ff ffc4 	bl	8004f1c <configuration_is_valid>
 8004f94:	b108      	cbz	r0, 8004f9a <acc_base_configuration_requested_start_set+0x16>
 8004f96:	ed84 8a09 	vstr	s16, [r4, #36]	; 0x24
 8004f9a:	ecbd 8b02 	vpop	{d8}
 8004f9e:	bd10      	pop	{r4, pc}

08004fa0 <acc_base_configuration_requested_length_get>:
 8004fa0:	b510      	push	{r4, lr}
 8004fa2:	4604      	mov	r4, r0
 8004fa4:	f7ff ffba 	bl	8004f1c <configuration_is_valid>
 8004fa8:	b910      	cbnz	r0, 8004fb0 <acc_base_configuration_requested_length_get+0x10>
 8004faa:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8004fb8 <acc_base_configuration_requested_length_get+0x18>
 8004fae:	bd10      	pop	{r4, pc}
 8004fb0:	ed94 0a0a 	vldr	s0, [r4, #40]	; 0x28
 8004fb4:	bd10      	pop	{r4, pc}
 8004fb6:	bf00      	nop
 8004fb8:	00000000 	.word	0x00000000

08004fbc <acc_base_configuration_requested_length_set>:
 8004fbc:	b510      	push	{r4, lr}
 8004fbe:	ed2d 8b02 	vpush	{d8}
 8004fc2:	4604      	mov	r4, r0
 8004fc4:	eeb0 8a40 	vmov.f32	s16, s0
 8004fc8:	f7ff ffa8 	bl	8004f1c <configuration_is_valid>
 8004fcc:	b108      	cbz	r0, 8004fd2 <acc_base_configuration_requested_length_set+0x16>
 8004fce:	ed84 8a0a 	vstr	s16, [r4, #40]	; 0x28
 8004fd2:	ecbd 8b02 	vpop	{d8}
 8004fd6:	bd10      	pop	{r4, pc}

08004fd8 <acc_base_configuration_repetition_mode_on_demand_set>:
 8004fd8:	b510      	push	{r4, lr}
 8004fda:	4604      	mov	r4, r0
 8004fdc:	f7ff ff9e 	bl	8004f1c <configuration_is_valid>
 8004fe0:	b108      	cbz	r0, 8004fe6 <acc_base_configuration_repetition_mode_on_demand_set+0xe>
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	7123      	strb	r3, [r4, #4]
 8004fe6:	bd10      	pop	{r4, pc}

08004fe8 <acc_base_configuration_power_save_mode_get>:
 8004fe8:	b510      	push	{r4, lr}
 8004fea:	4604      	mov	r4, r0
 8004fec:	f7ff ff96 	bl	8004f1c <configuration_is_valid>
 8004ff0:	b900      	cbnz	r0, 8004ff4 <acc_base_configuration_power_save_mode_get+0xc>
 8004ff2:	bd10      	pop	{r4, pc}
 8004ff4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004ff6:	bd10      	pop	{r4, pc}

08004ff8 <acc_base_configuration_power_save_mode_set>:
 8004ff8:	b538      	push	{r3, r4, r5, lr}
 8004ffa:	460d      	mov	r5, r1
 8004ffc:	4604      	mov	r4, r0
 8004ffe:	f7ff ff8d 	bl	8004f1c <configuration_is_valid>
 8005002:	b100      	cbz	r0, 8005006 <acc_base_configuration_power_save_mode_set+0xe>
 8005004:	63a5      	str	r5, [r4, #56]	; 0x38
 8005006:	bd38      	pop	{r3, r4, r5, pc}

08005008 <acc_base_configuration_tx_disable_get>:
 8005008:	b510      	push	{r4, lr}
 800500a:	4604      	mov	r4, r0
 800500c:	f7ff ff86 	bl	8004f1c <configuration_is_valid>
 8005010:	b900      	cbnz	r0, 8005014 <acc_base_configuration_tx_disable_get+0xc>
 8005012:	bd10      	pop	{r4, pc}
 8005014:	f894 0047 	ldrb.w	r0, [r4, #71]	; 0x47
 8005018:	bd10      	pop	{r4, pc}
 800501a:	bf00      	nop

0800501c <acc_base_configuration_tx_disable_set>:
 800501c:	b538      	push	{r3, r4, r5, lr}
 800501e:	460d      	mov	r5, r1
 8005020:	4604      	mov	r4, r0
 8005022:	f7ff ff7b 	bl	8004f1c <configuration_is_valid>
 8005026:	b108      	cbz	r0, 800502c <acc_base_configuration_tx_disable_set+0x10>
 8005028:	f884 5047 	strb.w	r5, [r4, #71]	; 0x47
 800502c:	bd38      	pop	{r3, r4, r5, pc}
 800502e:	bf00      	nop

08005030 <acc_base_configuration_decrease_tx_emission_get>:
 8005030:	b510      	push	{r4, lr}
 8005032:	4604      	mov	r4, r0
 8005034:	f7ff ff72 	bl	8004f1c <configuration_is_valid>
 8005038:	b900      	cbnz	r0, 800503c <acc_base_configuration_decrease_tx_emission_get+0xc>
 800503a:	bd10      	pop	{r4, pc}
 800503c:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 8005040:	bd10      	pop	{r4, pc}
 8005042:	bf00      	nop

08005044 <acc_base_configuration_decrease_tx_emission_set>:
 8005044:	b538      	push	{r3, r4, r5, lr}
 8005046:	460d      	mov	r5, r1
 8005048:	4604      	mov	r4, r0
 800504a:	f7ff ff67 	bl	8004f1c <configuration_is_valid>
 800504e:	b108      	cbz	r0, 8005054 <acc_base_configuration_decrease_tx_emission_set+0x10>
 8005050:	f884 5048 	strb.w	r5, [r4, #72]	; 0x48
 8005054:	bd38      	pop	{r3, r4, r5, pc}
 8005056:	bf00      	nop

08005058 <acc_base_configuration_hw_accelerated_average_samples_get>:
 8005058:	b510      	push	{r4, lr}
 800505a:	4604      	mov	r4, r0
 800505c:	f7ff ff5e 	bl	8004f1c <configuration_is_valid>
 8005060:	b900      	cbnz	r0, 8005064 <acc_base_configuration_hw_accelerated_average_samples_get+0xc>
 8005062:	bd10      	pop	{r4, pc}
 8005064:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
 8005068:	bd10      	pop	{r4, pc}
 800506a:	bf00      	nop

0800506c <acc_base_configuration_hw_accelerated_average_samples_set>:
 800506c:	b538      	push	{r3, r4, r5, lr}
 800506e:	460d      	mov	r5, r1
 8005070:	4604      	mov	r4, r0
 8005072:	f7ff ff53 	bl	8004f1c <configuration_is_valid>
 8005076:	b100      	cbz	r0, 800507a <acc_base_configuration_hw_accelerated_average_samples_set+0xe>
 8005078:	87a5      	strh	r5, [r4, #60]	; 0x3c
 800507a:	bd38      	pop	{r3, r4, r5, pc}

0800507c <acc_base_configuration_radar_engine_creation_set>:
 800507c:	b538      	push	{r3, r4, r5, lr}
 800507e:	460d      	mov	r5, r1
 8005080:	4604      	mov	r4, r0
 8005082:	f7ff ff4b 	bl	8004f1c <configuration_is_valid>
 8005086:	b100      	cbz	r0, 800508a <acc_base_configuration_radar_engine_creation_set+0xe>
 8005088:	6025      	str	r5, [r4, #0]
 800508a:	bd38      	pop	{r3, r4, r5, pc}

0800508c <acc_base_configuration_phase_compensation_alpha_get>:
 800508c:	b510      	push	{r4, lr}
 800508e:	4604      	mov	r4, r0
 8005090:	f7ff ff44 	bl	8004f1c <configuration_is_valid>
 8005094:	b910      	cbnz	r0, 800509c <acc_base_configuration_phase_compensation_alpha_get+0x10>
 8005096:	ed9f 0a03 	vldr	s0, [pc, #12]	; 80050a4 <acc_base_configuration_phase_compensation_alpha_get+0x18>
 800509a:	bd10      	pop	{r4, pc}
 800509c:	ed94 0a04 	vldr	s0, [r4, #16]
 80050a0:	bd10      	pop	{r4, pc}
 80050a2:	bf00      	nop
 80050a4:	00000000 	.word	0x00000000

080050a8 <acc_base_configuration_phase_compensation_alpha_set>:
 80050a8:	b510      	push	{r4, lr}
 80050aa:	ed2d 8b02 	vpush	{d8}
 80050ae:	4604      	mov	r4, r0
 80050b0:	eeb0 8a40 	vmov.f32	s16, s0
 80050b4:	f7ff ff32 	bl	8004f1c <configuration_is_valid>
 80050b8:	b108      	cbz	r0, 80050be <acc_base_configuration_phase_compensation_alpha_set+0x16>
 80050ba:	ed84 8a04 	vstr	s16, [r4, #16]
 80050be:	ecbd 8b02 	vpop	{d8}
 80050c2:	bd10      	pop	{r4, pc}

080050c4 <acc_base_configuration_time_domain_low_pass_filter_alpha_get>:
 80050c4:	b538      	push	{r3, r4, r5, lr}
 80050c6:	460d      	mov	r5, r1
 80050c8:	4604      	mov	r4, r0
 80050ca:	f7ff ff27 	bl	8004f1c <configuration_is_valid>
 80050ce:	b900      	cbnz	r0, 80050d2 <acc_base_configuration_time_domain_low_pass_filter_alpha_get+0xe>
 80050d0:	bd38      	pop	{r3, r4, r5, pc}
 80050d2:	b10d      	cbz	r5, 80050d8 <acc_base_configuration_time_domain_low_pass_filter_alpha_get+0x14>
 80050d4:	6963      	ldr	r3, [r4, #20]
 80050d6:	602b      	str	r3, [r5, #0]
 80050d8:	7e20      	ldrb	r0, [r4, #24]
 80050da:	bd38      	pop	{r3, r4, r5, pc}

080050dc <acc_base_configuration_time_domain_low_pass_filter_alpha_set>:
 80050dc:	b538      	push	{r3, r4, r5, lr}
 80050de:	ed2d 8b02 	vpush	{d8}
 80050e2:	460d      	mov	r5, r1
 80050e4:	eeb0 8a40 	vmov.f32	s16, s0
 80050e8:	4604      	mov	r4, r0
 80050ea:	f7ff ff17 	bl	8004f1c <configuration_is_valid>
 80050ee:	b110      	cbz	r0, 80050f6 <acc_base_configuration_time_domain_low_pass_filter_alpha_set+0x1a>
 80050f0:	ed84 8a05 	vstr	s16, [r4, #20]
 80050f4:	7625      	strb	r5, [r4, #24]
 80050f6:	ecbd 8b02 	vpop	{d8}
 80050fa:	bd38      	pop	{r3, r4, r5, pc}

080050fc <acc_base_configuration_filter_demodulated_data_get>:
 80050fc:	b510      	push	{r4, lr}
 80050fe:	4604      	mov	r4, r0
 8005100:	f7ff ff0c 	bl	8004f1c <configuration_is_valid>
 8005104:	b900      	cbnz	r0, 8005108 <acc_base_configuration_filter_demodulated_data_get+0xc>
 8005106:	bd10      	pop	{r4, pc}
 8005108:	7f20      	ldrb	r0, [r4, #28]
 800510a:	bd10      	pop	{r4, pc}

0800510c <acc_base_configuration_filter_demodulated_data_set>:
 800510c:	b538      	push	{r3, r4, r5, lr}
 800510e:	460d      	mov	r5, r1
 8005110:	4604      	mov	r4, r0
 8005112:	f7ff ff03 	bl	8004f1c <configuration_is_valid>
 8005116:	b100      	cbz	r0, 800511a <acc_base_configuration_filter_demodulated_data_set+0xe>
 8005118:	7725      	strb	r5, [r4, #28]
 800511a:	bd38      	pop	{r3, r4, r5, pc}

0800511c <acc_base_configuration_demodulation_filter_cutoff_freq_ratio_get>:
 800511c:	b510      	push	{r4, lr}
 800511e:	4604      	mov	r4, r0
 8005120:	f7ff fefc 	bl	8004f1c <configuration_is_valid>
 8005124:	b910      	cbnz	r0, 800512c <acc_base_configuration_demodulation_filter_cutoff_freq_ratio_get+0x10>
 8005126:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8005134 <acc_base_configuration_demodulation_filter_cutoff_freq_ratio_get+0x18>
 800512a:	bd10      	pop	{r4, pc}
 800512c:	ed94 0a08 	vldr	s0, [r4, #32]
 8005130:	bd10      	pop	{r4, pc}
 8005132:	bf00      	nop
 8005134:	00000000 	.word	0x00000000

08005138 <acc_base_configuration_demodulation_filter_cutoff_freq_ratio_set>:
 8005138:	b510      	push	{r4, lr}
 800513a:	ed2d 8b02 	vpush	{d8}
 800513e:	4604      	mov	r4, r0
 8005140:	eeb0 8a40 	vmov.f32	s16, s0
 8005144:	f7ff feea 	bl	8004f1c <configuration_is_valid>
 8005148:	b108      	cbz	r0, 800514e <acc_base_configuration_demodulation_filter_cutoff_freq_ratio_set+0x16>
 800514a:	ed84 8a08 	vstr	s16, [r4, #32]
 800514e:	ecbd 8b02 	vpop	{d8}
 8005152:	bd10      	pop	{r4, pc}

08005154 <acc_base_configuration_point_start_get>:
 8005154:	b510      	push	{r4, lr}
 8005156:	4604      	mov	r4, r0
 8005158:	f7ff fee0 	bl	8004f1c <configuration_is_valid>
 800515c:	b900      	cbnz	r0, 8005160 <acc_base_configuration_point_start_get+0xc>
 800515e:	bd10      	pop	{r4, pc}
 8005160:	f9b4 0034 	ldrsh.w	r0, [r4, #52]	; 0x34
 8005164:	bd10      	pop	{r4, pc}
 8005166:	bf00      	nop

08005168 <acc_base_configuration_point_length_get>:
 8005168:	b510      	push	{r4, lr}
 800516a:	4604      	mov	r4, r0
 800516c:	f7ff fed6 	bl	8004f1c <configuration_is_valid>
 8005170:	b900      	cbnz	r0, 8005174 <acc_base_configuration_point_length_get+0xc>
 8005172:	bd10      	pop	{r4, pc}
 8005174:	f9b4 0036 	ldrsh.w	r0, [r4, #54]	; 0x36
 8005178:	bd10      	pop	{r4, pc}
 800517a:	bf00      	nop

0800517c <acc_base_configuration_repetition_mode_get>:
 800517c:	b510      	push	{r4, lr}
 800517e:	4604      	mov	r4, r0
 8005180:	f7ff fecc 	bl	8004f1c <configuration_is_valid>
 8005184:	b900      	cbnz	r0, 8005188 <acc_base_configuration_repetition_mode_get+0xc>
 8005186:	bd10      	pop	{r4, pc}
 8005188:	7920      	ldrb	r0, [r4, #4]
 800518a:	bd10      	pop	{r4, pc}

0800518c <acc_base_configuration_update_rate_get>:
 800518c:	b510      	push	{r4, lr}
 800518e:	4604      	mov	r4, r0
 8005190:	f7ff fec4 	bl	8004f1c <configuration_is_valid>
 8005194:	b158      	cbz	r0, 80051ae <acc_base_configuration_update_rate_get+0x22>
 8005196:	7923      	ldrb	r3, [r4, #4]
 8005198:	2b02      	cmp	r3, #2
 800519a:	d005      	beq.n	80051a8 <acc_base_configuration_update_rate_get+0x1c>
 800519c:	d802      	bhi.n	80051a4 <acc_base_configuration_update_rate_get+0x18>
 800519e:	ed9f 0a05 	vldr	s0, [pc, #20]	; 80051b4 <acc_base_configuration_update_rate_get+0x28>
 80051a2:	bd10      	pop	{r4, pc}
 80051a4:	2b03      	cmp	r3, #3
 80051a6:	d102      	bne.n	80051ae <acc_base_configuration_update_rate_get+0x22>
 80051a8:	ed94 0a02 	vldr	s0, [r4, #8]
 80051ac:	bd10      	pop	{r4, pc}
 80051ae:	ed9f 0a02 	vldr	s0, [pc, #8]	; 80051b8 <acc_base_configuration_update_rate_get+0x2c>
 80051b2:	bd10      	pop	{r4, pc}
 80051b4:	7f800000 	.word	0x7f800000
 80051b8:	7fc00000 	.word	0x7fc00000

080051bc <acc_base_configuration_gain_get>:
 80051bc:	b510      	push	{r4, lr}
 80051be:	4604      	mov	r4, r0
 80051c0:	f7ff feac 	bl	8004f1c <configuration_is_valid>
 80051c4:	b900      	cbnz	r0, 80051c8 <acc_base_configuration_gain_get+0xc>
 80051c6:	bd10      	pop	{r4, pc}
 80051c8:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
 80051ca:	bd10      	pop	{r4, pc}

080051cc <acc_base_configuration_gain_set>:
 80051cc:	b538      	push	{r3, r4, r5, lr}
 80051ce:	460d      	mov	r5, r1
 80051d0:	4604      	mov	r4, r0
 80051d2:	f7ff fea3 	bl	8004f1c <configuration_is_valid>
 80051d6:	b100      	cbz	r0, 80051da <acc_base_configuration_gain_set+0xe>
 80051d8:	87e5      	strh	r5, [r4, #62]	; 0x3e
 80051da:	bd38      	pop	{r3, r4, r5, pc}

080051dc <acc_base_configuration_integrator_get>:
 80051dc:	b510      	push	{r4, lr}
 80051de:	4604      	mov	r4, r0
 80051e0:	f7ff fe9c 	bl	8004f1c <configuration_is_valid>
 80051e4:	b900      	cbnz	r0, 80051e8 <acc_base_configuration_integrator_get+0xc>
 80051e6:	bd10      	pop	{r4, pc}
 80051e8:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
 80051ec:	bd10      	pop	{r4, pc}
 80051ee:	bf00      	nop

080051f0 <acc_base_configuration_integrator_set>:
 80051f0:	b538      	push	{r3, r4, r5, lr}
 80051f2:	460d      	mov	r5, r1
 80051f4:	4604      	mov	r4, r0
 80051f6:	f7ff fe91 	bl	8004f1c <configuration_is_valid>
 80051fa:	b108      	cbz	r0, 8005200 <acc_base_configuration_integrator_set+0x10>
 80051fc:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
 8005200:	bd38      	pop	{r3, r4, r5, pc}
 8005202:	bf00      	nop

08005204 <acc_base_configuration_wg_duration_get>:
 8005204:	b510      	push	{r4, lr}
 8005206:	4604      	mov	r4, r0
 8005208:	f7ff fe88 	bl	8004f1c <configuration_is_valid>
 800520c:	b900      	cbnz	r0, 8005210 <acc_base_configuration_wg_duration_get+0xc>
 800520e:	bd10      	pop	{r4, pc}
 8005210:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
 8005214:	bd10      	pop	{r4, pc}
 8005216:	bf00      	nop

08005218 <acc_base_configuration_wg_duration_set>:
 8005218:	b538      	push	{r3, r4, r5, lr}
 800521a:	460d      	mov	r5, r1
 800521c:	4604      	mov	r4, r0
 800521e:	f7ff fe7d 	bl	8004f1c <configuration_is_valid>
 8005222:	b108      	cbz	r0, 8005228 <acc_base_configuration_wg_duration_set+0x10>
 8005224:	f8a4 5042 	strh.w	r5, [r4, #66]	; 0x42
 8005228:	bd38      	pop	{r3, r4, r5, pc}
 800522a:	bf00      	nop

0800522c <acc_base_configuration_integrator_ramp_up_get>:
 800522c:	b510      	push	{r4, lr}
 800522e:	4604      	mov	r4, r0
 8005230:	f7ff fe74 	bl	8004f1c <configuration_is_valid>
 8005234:	b900      	cbnz	r0, 8005238 <acc_base_configuration_integrator_ramp_up_get+0xc>
 8005236:	bd10      	pop	{r4, pc}
 8005238:	f8b4 0044 	ldrh.w	r0, [r4, #68]	; 0x44
 800523c:	bd10      	pop	{r4, pc}
 800523e:	bf00      	nop

08005240 <acc_base_configuration_integrator_ramp_up_set>:
 8005240:	b538      	push	{r3, r4, r5, lr}
 8005242:	460d      	mov	r5, r1
 8005244:	4604      	mov	r4, r0
 8005246:	f7ff fe69 	bl	8004f1c <configuration_is_valid>
 800524a:	b108      	cbz	r0, 8005250 <acc_base_configuration_integrator_ramp_up_set+0x10>
 800524c:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
 8005250:	bd38      	pop	{r3, r4, r5, pc}
 8005252:	bf00      	nop

08005254 <acc_base_configuration_sampling_mode_get>:
 8005254:	b510      	push	{r4, lr}
 8005256:	4604      	mov	r4, r0
 8005258:	f7ff fe60 	bl	8004f1c <configuration_is_valid>
 800525c:	b900      	cbnz	r0, 8005260 <acc_base_configuration_sampling_mode_get+0xc>
 800525e:	bd10      	pop	{r4, pc}
 8005260:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
 8005264:	bd10      	pop	{r4, pc}
 8005266:	bf00      	nop

08005268 <acc_base_configuration_sweep_type_debug_set>:
 8005268:	b538      	push	{r3, r4, r5, lr}
 800526a:	460d      	mov	r5, r1
 800526c:	4604      	mov	r4, r0
 800526e:	f7ff fe55 	bl	8004f1c <configuration_is_valid>
 8005272:	b108      	cbz	r0, 8005278 <acc_base_configuration_sweep_type_debug_set+0x10>
 8005274:	f884 5046 	strb.w	r5, [r4, #70]	; 0x46
 8005278:	bd38      	pop	{r3, r4, r5, pc}
 800527a:	bf00      	nop

0800527c <acc_base_configuration_sweep_type_debug_get>:
 800527c:	b510      	push	{r4, lr}
 800527e:	4604      	mov	r4, r0
 8005280:	f7ff fe4c 	bl	8004f1c <configuration_is_valid>
 8005284:	b900      	cbnz	r0, 8005288 <acc_base_configuration_sweep_type_debug_get+0xc>
 8005286:	bd10      	pop	{r4, pc}
 8005288:	f894 0046 	ldrb.w	r0, [r4, #70]	; 0x46
 800528c:	bd10      	pop	{r4, pc}
 800528e:	bf00      	nop

08005290 <acc_base_configuration_use_point_range_set>:
 8005290:	b538      	push	{r3, r4, r5, lr}
 8005292:	460d      	mov	r5, r1
 8005294:	4604      	mov	r4, r0
 8005296:	f7ff fe41 	bl	8004f1c <configuration_is_valid>
 800529a:	b108      	cbz	r0, 80052a0 <acc_base_configuration_use_point_range_set+0x10>
 800529c:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
 80052a0:	bd38      	pop	{r3, r4, r5, pc}
 80052a2:	bf00      	nop

080052a4 <acc_base_configuration_use_point_range_get>:
 80052a4:	b510      	push	{r4, lr}
 80052a6:	4604      	mov	r4, r0
 80052a8:	f7ff fe38 	bl	8004f1c <configuration_is_valid>
 80052ac:	b900      	cbnz	r0, 80052b0 <acc_base_configuration_use_point_range_get+0xc>
 80052ae:	bd10      	pop	{r4, pc}
 80052b0:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 80052b4:	bd10      	pop	{r4, pc}
 80052b6:	bf00      	nop

080052b8 <acc_base_configuration_use_fast_dll_refresh_routine_set>:
 80052b8:	b538      	push	{r3, r4, r5, lr}
 80052ba:	460d      	mov	r5, r1
 80052bc:	4604      	mov	r4, r0
 80052be:	f7ff fe2d 	bl	8004f1c <configuration_is_valid>
 80052c2:	b108      	cbz	r0, 80052c8 <acc_base_configuration_use_fast_dll_refresh_routine_set+0x10>
 80052c4:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 80052c8:	bd38      	pop	{r3, r4, r5, pc}
 80052ca:	bf00      	nop

080052cc <acc_base_configuration_staggered_vga_stabilization_time_set>:
 80052cc:	b538      	push	{r3, r4, r5, lr}
 80052ce:	460d      	mov	r5, r1
 80052d0:	4604      	mov	r4, r0
 80052d2:	f7ff fe23 	bl	8004f1c <configuration_is_valid>
 80052d6:	b108      	cbz	r0, 80052dc <acc_base_configuration_staggered_vga_stabilization_time_set+0x10>
 80052d8:	f8a4 5056 	strh.w	r5, [r4, #86]	; 0x56
 80052dc:	bd38      	pop	{r3, r4, r5, pc}
 80052de:	bf00      	nop

080052e0 <acc_base_configuration_bba_reset_clocksync_perturbation_get>:
 80052e0:	b510      	push	{r4, lr}
 80052e2:	4604      	mov	r4, r0
 80052e4:	f7ff fe1a 	bl	8004f1c <configuration_is_valid>
 80052e8:	b900      	cbnz	r0, 80052ec <acc_base_configuration_bba_reset_clocksync_perturbation_get+0xc>
 80052ea:	bd10      	pop	{r4, pc}
 80052ec:	f894 0063 	ldrb.w	r0, [r4, #99]	; 0x63
 80052f0:	bd10      	pop	{r4, pc}
 80052f2:	bf00      	nop

080052f4 <acc_base_configuration_bba_linear_resync_perturbation_get>:
 80052f4:	b510      	push	{r4, lr}
 80052f6:	4604      	mov	r4, r0
 80052f8:	f7ff fe10 	bl	8004f1c <configuration_is_valid>
 80052fc:	b900      	cbnz	r0, 8005300 <acc_base_configuration_bba_linear_resync_perturbation_get+0xc>
 80052fe:	bd10      	pop	{r4, pc}
 8005300:	f894 0064 	ldrb.w	r0, [r4, #100]	; 0x64
 8005304:	bd10      	pop	{r4, pc}
 8005306:	bf00      	nop

08005308 <acc_base_configuration_bba_fast_refresh_disable_get>:
 8005308:	b510      	push	{r4, lr}
 800530a:	4604      	mov	r4, r0
 800530c:	f7ff fe06 	bl	8004f1c <configuration_is_valid>
 8005310:	b900      	cbnz	r0, 8005314 <acc_base_configuration_bba_fast_refresh_disable_get+0xc>
 8005312:	bd10      	pop	{r4, pc}
 8005314:	f894 0065 	ldrb.w	r0, [r4, #101]	; 0x65
 8005318:	bd10      	pop	{r4, pc}
 800531a:	bf00      	nop

0800531c <acc_base_configuration_ignore_range_limits_get>:
 800531c:	b510      	push	{r4, lr}
 800531e:	4604      	mov	r4, r0
 8005320:	f7ff fdfc 	bl	8004f1c <configuration_is_valid>
 8005324:	b900      	cbnz	r0, 8005328 <acc_base_configuration_ignore_range_limits_get+0xc>
 8005326:	bd10      	pop	{r4, pc}
 8005328:	f894 0066 	ldrb.w	r0, [r4, #102]	; 0x66
 800532c:	bd10      	pop	{r4, pc}
 800532e:	bf00      	nop

08005330 <acc_base_configuration_sparse_sweeps_per_frame_get>:
 8005330:	b510      	push	{r4, lr}
 8005332:	4604      	mov	r4, r0
 8005334:	f7ff fdf2 	bl	8004f1c <configuration_is_valid>
 8005338:	b900      	cbnz	r0, 800533c <acc_base_configuration_sparse_sweeps_per_frame_get+0xc>
 800533a:	bd10      	pop	{r4, pc}
 800533c:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 8005340:	bd10      	pop	{r4, pc}
 8005342:	bf00      	nop

08005344 <acc_base_configuration_downsampling_factor_get>:
 8005344:	b510      	push	{r4, lr}
 8005346:	4604      	mov	r4, r0
 8005348:	f7ff fde8 	bl	8004f1c <configuration_is_valid>
 800534c:	b900      	cbnz	r0, 8005350 <acc_base_configuration_downsampling_factor_get+0xc>
 800534e:	bd10      	pop	{r4, pc}
 8005350:	f8b4 0060 	ldrh.w	r0, [r4, #96]	; 0x60
 8005354:	bd10      	pop	{r4, pc}
 8005356:	bf00      	nop

08005358 <acc_base_configuration_downsampling_factor_set>:
 8005358:	b538      	push	{r3, r4, r5, lr}
 800535a:	460d      	mov	r5, r1
 800535c:	4604      	mov	r4, r0
 800535e:	f7ff fddd 	bl	8004f1c <configuration_is_valid>
 8005362:	b108      	cbz	r0, 8005368 <acc_base_configuration_downsampling_factor_set+0x10>
 8005364:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
 8005368:	bd38      	pop	{r3, r4, r5, pc}
 800536a:	bf00      	nop

0800536c <acc_base_configuration_noise_level_normalization_get>:
 800536c:	b510      	push	{r4, lr}
 800536e:	4604      	mov	r4, r0
 8005370:	f7ff fdd4 	bl	8004f1c <configuration_is_valid>
 8005374:	b900      	cbnz	r0, 8005378 <acc_base_configuration_noise_level_normalization_get+0xc>
 8005376:	bd10      	pop	{r4, pc}
 8005378:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
 800537c:	bd10      	pop	{r4, pc}
 800537e:	bf00      	nop

08005380 <acc_base_configuration_noise_level_normalization_set>:
 8005380:	b538      	push	{r3, r4, r5, lr}
 8005382:	460d      	mov	r5, r1
 8005384:	4604      	mov	r4, r0
 8005386:	f7ff fdc9 	bl	8004f1c <configuration_is_valid>
 800538a:	b108      	cbz	r0, 8005390 <acc_base_configuration_noise_level_normalization_set+0x10>
 800538c:	f884 5049 	strb.w	r5, [r4, #73]	; 0x49
 8005390:	bd38      	pop	{r3, r4, r5, pc}
 8005392:	bf00      	nop

08005394 <acc_base_configuration_noise_deviation_override_get>:
 8005394:	b510      	push	{r4, lr}
 8005396:	4604      	mov	r4, r0
 8005398:	f7ff fdc0 	bl	8004f1c <configuration_is_valid>
 800539c:	b900      	cbnz	r0, 80053a0 <acc_base_configuration_noise_deviation_override_get+0xc>
 800539e:	bd10      	pop	{r4, pc}
 80053a0:	f8b4 004c 	ldrh.w	r0, [r4, #76]	; 0x4c
 80053a4:	bd10      	pop	{r4, pc}
 80053a6:	bf00      	nop

080053a8 <acc_base_configuration_asynchronous_measurement_get>:
 80053a8:	b510      	push	{r4, lr}
 80053aa:	4604      	mov	r4, r0
 80053ac:	f7ff fdb6 	bl	8004f1c <configuration_is_valid>
 80053b0:	b900      	cbnz	r0, 80053b4 <acc_base_configuration_asynchronous_measurement_get+0xc>
 80053b2:	bd10      	pop	{r4, pc}
 80053b4:	f894 004e 	ldrb.w	r0, [r4, #78]	; 0x4e
 80053b8:	bd10      	pop	{r4, pc}
 80053ba:	bf00      	nop

080053bc <acc_base_configuration_asynchronous_measurement_set>:
 80053bc:	b538      	push	{r3, r4, r5, lr}
 80053be:	460d      	mov	r5, r1
 80053c0:	4604      	mov	r4, r0
 80053c2:	f7ff fdab 	bl	8004f1c <configuration_is_valid>
 80053c6:	b108      	cbz	r0, 80053cc <acc_base_configuration_asynchronous_measurement_set+0x10>
 80053c8:	f884 504e 	strb.w	r5, [r4, #78]	; 0x4e
 80053cc:	bd38      	pop	{r3, r4, r5, pc}
 80053ce:	bf00      	nop

080053d0 <acc_base_configuration_min_pipeline_memory_size_get>:
 80053d0:	b510      	push	{r4, lr}
 80053d2:	4604      	mov	r4, r0
 80053d4:	f7ff fda2 	bl	8004f1c <configuration_is_valid>
 80053d8:	b900      	cbnz	r0, 80053dc <acc_base_configuration_min_pipeline_memory_size_get+0xc>
 80053da:	bd10      	pop	{r4, pc}
 80053dc:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
 80053e0:	bd10      	pop	{r4, pc}
 80053e2:	bf00      	nop

080053e4 <acc_base_configuration_min_pipeline_memory_size_set>:
 80053e4:	b538      	push	{r3, r4, r5, lr}
 80053e6:	460d      	mov	r5, r1
 80053e8:	4604      	mov	r4, r0
 80053ea:	f7ff fd97 	bl	8004f1c <configuration_is_valid>
 80053ee:	b108      	cbz	r0, 80053f4 <acc_base_configuration_min_pipeline_memory_size_set+0x10>
 80053f0:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 80053f4:	bd38      	pop	{r3, r4, r5, pc}
 80053f6:	bf00      	nop

080053f8 <acc_base_configuration_maximize_signal_attenuation_get>:
 80053f8:	b510      	push	{r4, lr}
 80053fa:	4604      	mov	r4, r0
 80053fc:	f7ff fd8e 	bl	8004f1c <configuration_is_valid>
 8005400:	b900      	cbnz	r0, 8005404 <acc_base_configuration_maximize_signal_attenuation_get+0xc>
 8005402:	bd10      	pop	{r4, pc}
 8005404:	f894 004a 	ldrb.w	r0, [r4, #74]	; 0x4a
 8005408:	bd10      	pop	{r4, pc}
 800540a:	bf00      	nop

0800540c <acc_base_configuration_maximize_signal_attenuation_set>:
 800540c:	b538      	push	{r3, r4, r5, lr}
 800540e:	460d      	mov	r5, r1
 8005410:	4604      	mov	r4, r0
 8005412:	f7ff fd83 	bl	8004f1c <configuration_is_valid>
 8005416:	b108      	cbz	r0, 800541c <acc_base_configuration_maximize_signal_attenuation_set+0x10>
 8005418:	f884 504a 	strb.w	r5, [r4, #74]	; 0x4a
 800541c:	bd38      	pop	{r3, r4, r5, pc}
 800541e:	bf00      	nop

08005420 <acc_base_configuration_cca_get>:
 8005420:	b570      	push	{r4, r5, r6, lr}
 8005422:	460e      	mov	r6, r1
 8005424:	4615      	mov	r5, r2
 8005426:	4604      	mov	r4, r0
 8005428:	f7ff fd78 	bl	8004f1c <configuration_is_valid>
 800542c:	b148      	cbz	r0, 8005442 <acc_base_configuration_cca_get+0x22>
 800542e:	b116      	cbz	r6, 8005436 <acc_base_configuration_cca_get+0x16>
 8005430:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8005434:	7033      	strb	r3, [r6, #0]
 8005436:	b115      	cbz	r5, 800543e <acc_base_configuration_cca_get+0x1e>
 8005438:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800543c:	802b      	strh	r3, [r5, #0]
 800543e:	f894 004f 	ldrb.w	r0, [r4, #79]	; 0x4f
 8005442:	bd70      	pop	{r4, r5, r6, pc}

08005444 <acc_base_configuration_cca_set>:
 8005444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005446:	460f      	mov	r7, r1
 8005448:	4616      	mov	r6, r2
 800544a:	461d      	mov	r5, r3
 800544c:	4604      	mov	r4, r0
 800544e:	f7ff fd65 	bl	8004f1c <configuration_is_valid>
 8005452:	b128      	cbz	r0, 8005460 <acc_base_configuration_cca_set+0x1c>
 8005454:	f884 704f 	strb.w	r7, [r4, #79]	; 0x4f
 8005458:	f884 6050 	strb.w	r6, [r4, #80]	; 0x50
 800545c:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
 8005460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005462:	bf00      	nop

08005464 <acc_base_configuration_mur_set>:
 8005464:	b538      	push	{r3, r4, r5, lr}
 8005466:	460d      	mov	r5, r1
 8005468:	4604      	mov	r4, r0
 800546a:	f7ff fd57 	bl	8004f1c <configuration_is_valid>
 800546e:	b108      	cbz	r0, 8005474 <acc_base_configuration_mur_set+0x10>
 8005470:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
 8005474:	bd38      	pop	{r3, r4, r5, pc}
 8005476:	bf00      	nop

08005478 <acc_base_configuration_sampling_mode_to_string>:
 8005478:	b130      	cbz	r0, 8005488 <acc_base_configuration_sampling_mode_to_string+0x10>
 800547a:	4b04      	ldr	r3, [pc, #16]	; (800548c <acc_base_configuration_sampling_mode_to_string+0x14>)
 800547c:	4a04      	ldr	r2, [pc, #16]	; (8005490 <acc_base_configuration_sampling_mode_to_string+0x18>)
 800547e:	2801      	cmp	r0, #1
 8005480:	bf14      	ite	ne
 8005482:	4618      	movne	r0, r3
 8005484:	4610      	moveq	r0, r2
 8005486:	4770      	bx	lr
 8005488:	4802      	ldr	r0, [pc, #8]	; (8005494 <acc_base_configuration_sampling_mode_to_string+0x1c>)
 800548a:	4770      	bx	lr
 800548c:	0800fb28 	.word	0x0800fb28
 8005490:	0800e664 	.word	0x0800e664
 8005494:	0800e660 	.word	0x0800e660

08005498 <acc_base_configuration_print>:
 8005498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800549c:	b08f      	sub	sp, #60	; 0x3c
 800549e:	4604      	mov	r4, r0
 80054a0:	f000 f9be 	bl	8005820 <acc_rss_integration_log_level>
 80054a4:	2801      	cmp	r0, #1
 80054a6:	d94a      	bls.n	800553e <acc_base_configuration_print+0xa6>
 80054a8:	4b26      	ldr	r3, [pc, #152]	; (8005544 <acc_base_configuration_print+0xac>)
 80054aa:	4620      	mov	r0, r4
 80054ac:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 80054b0:	f7ff fd4a 	bl	8004f48 <acc_base_configuration_sensor_get>
 80054b4:	4683      	mov	fp, r0
 80054b6:	4620      	mov	r0, r4
 80054b8:	f7ff fdce 	bl	8005058 <acc_base_configuration_hw_accelerated_average_samples_get>
 80054bc:	4605      	mov	r5, r0
 80054be:	4620      	mov	r0, r4
 80054c0:	f7ff fe7c 	bl	80051bc <acc_base_configuration_gain_get>
 80054c4:	4606      	mov	r6, r0
 80054c6:	4620      	mov	r0, r4
 80054c8:	f7ff fe88 	bl	80051dc <acc_base_configuration_integrator_get>
 80054cc:	4607      	mov	r7, r0
 80054ce:	4620      	mov	r0, r4
 80054d0:	f7ff fe98 	bl	8005204 <acc_base_configuration_wg_duration_get>
 80054d4:	4680      	mov	r8, r0
 80054d6:	4620      	mov	r0, r4
 80054d8:	f7ff fea8 	bl	800522c <acc_base_configuration_integrator_ramp_up_get>
 80054dc:	4681      	mov	r9, r0
 80054de:	4620      	mov	r0, r4
 80054e0:	f7ff fd82 	bl	8004fe8 <acc_base_configuration_power_save_mode_get>
 80054e4:	2804      	cmp	r0, #4
 80054e6:	bf96      	itet	ls
 80054e8:	4b17      	ldrls	r3, [pc, #92]	; (8005548 <acc_base_configuration_print+0xb0>)
 80054ea:	4918      	ldrhi	r1, [pc, #96]	; (800554c <acc_base_configuration_print+0xb4>)
 80054ec:	f853 1020 	ldrls.w	r1, [r3, r0, lsl #2]
 80054f0:	910d      	str	r1, [sp, #52]	; 0x34
 80054f2:	4620      	mov	r0, r4
 80054f4:	f7ff feae 	bl	8005254 <acc_base_configuration_sampling_mode_get>
 80054f8:	f7ff ffbe 	bl	8005478 <acc_base_configuration_sampling_mode_to_string>
 80054fc:	4602      	mov	r2, r0
 80054fe:	4620      	mov	r0, r4
 8005500:	920c      	str	r2, [sp, #48]	; 0x30
 8005502:	f7ff fd81 	bl	8005008 <acc_base_configuration_tx_disable_get>
 8005506:	4603      	mov	r3, r0
 8005508:	4620      	mov	r0, r4
 800550a:	930b      	str	r3, [sp, #44]	; 0x2c
 800550c:	f7ff ff10 	bl	8005330 <acc_base_configuration_sparse_sweeps_per_frame_get>
 8005510:	4684      	mov	ip, r0
 8005512:	4620      	mov	r0, r4
 8005514:	4664      	mov	r4, ip
 8005516:	f7ff fd8b 	bl	8005030 <acc_base_configuration_decrease_tx_emission_get>
 800551a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800551c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800551e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005520:	9206      	str	r2, [sp, #24]
 8005522:	e9cd 9104 	strd	r9, r1, [sp, #16]
 8005526:	9307      	str	r3, [sp, #28]
 8005528:	9009      	str	r0, [sp, #36]	; 0x24
 800552a:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800552e:	e9cd 5600 	strd	r5, r6, [sp]
 8005532:	4a07      	ldr	r2, [pc, #28]	; (8005550 <acc_base_configuration_print+0xb8>)
 8005534:	4907      	ldr	r1, [pc, #28]	; (8005554 <acc_base_configuration_print+0xbc>)
 8005536:	9408      	str	r4, [sp, #32]
 8005538:	465b      	mov	r3, fp
 800553a:	2002      	movs	r0, #2
 800553c:	47d0      	blx	sl
 800553e:	b00f      	add	sp, #60	; 0x3c
 8005540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005544:	200004c0 	.word	0x200004c0
 8005548:	0800e87c 	.word	0x0800e87c
 800554c:	0800fb28 	.word	0x0800fb28
 8005550:	0800e668 	.word	0x0800e668
 8005554:	0800e64c 	.word	0x0800e64c

08005558 <acc_base_configuration_check>:
 8005558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800555a:	4605      	mov	r5, r0
 800555c:	f7ff fcde 	bl	8004f1c <configuration_is_valid>
 8005560:	4604      	mov	r4, r0
 8005562:	b318      	cbz	r0, 80055ac <acc_base_configuration_check+0x54>
 8005564:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005566:	2b04      	cmp	r3, #4
 8005568:	d819      	bhi.n	800559e <acc_base_configuration_check+0x46>
 800556a:	d02d      	beq.n	80055c8 <acc_base_configuration_check+0x70>
 800556c:	8feb      	ldrh	r3, [r5, #62]	; 0x3e
 800556e:	2b16      	cmp	r3, #22
 8005570:	d821      	bhi.n	80055b6 <acc_base_configuration_check+0x5e>
 8005572:	8fab      	ldrh	r3, [r5, #60]	; 0x3c
 8005574:	3b01      	subs	r3, #1
 8005576:	b29b      	uxth	r3, r3
 8005578:	2b3e      	cmp	r3, #62	; 0x3e
 800557a:	d819      	bhi.n	80055b0 <acc_base_configuration_check+0x58>
 800557c:	6bae      	ldr	r6, [r5, #56]	; 0x38
 800557e:	792b      	ldrb	r3, [r5, #4]
 8005580:	b9e6      	cbnz	r6, 80055bc <acc_base_configuration_check+0x64>
 8005582:	2b03      	cmp	r3, #3
 8005584:	d037      	beq.n	80055f6 <acc_base_configuration_check+0x9e>
 8005586:	2301      	movs	r3, #1
 8005588:	f885 304e 	strb.w	r3, [r5, #78]	; 0x4e
 800558c:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
 8005590:	2b06      	cmp	r3, #6
 8005592:	d00b      	beq.n	80055ac <acc_base_configuration_check+0x54>
 8005594:	2b09      	cmp	r3, #9
 8005596:	d009      	beq.n	80055ac <acc_base_configuration_check+0x54>
 8005598:	4b18      	ldr	r3, [pc, #96]	; (80055fc <acc_base_configuration_check+0xa4>)
 800559a:	4a19      	ldr	r2, [pc, #100]	; (8005600 <acc_base_configuration_check+0xa8>)
 800559c:	e001      	b.n	80055a2 <acc_base_configuration_check+0x4a>
 800559e:	4b17      	ldr	r3, [pc, #92]	; (80055fc <acc_base_configuration_check+0xa4>)
 80055a0:	4a18      	ldr	r2, [pc, #96]	; (8005604 <acc_base_configuration_check+0xac>)
 80055a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055a4:	4918      	ldr	r1, [pc, #96]	; (8005608 <acc_base_configuration_check+0xb0>)
 80055a6:	2000      	movs	r0, #0
 80055a8:	4798      	blx	r3
 80055aa:	2400      	movs	r4, #0
 80055ac:	4620      	mov	r0, r4
 80055ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055b0:	4b12      	ldr	r3, [pc, #72]	; (80055fc <acc_base_configuration_check+0xa4>)
 80055b2:	4a16      	ldr	r2, [pc, #88]	; (800560c <acc_base_configuration_check+0xb4>)
 80055b4:	e7f5      	b.n	80055a2 <acc_base_configuration_check+0x4a>
 80055b6:	4b11      	ldr	r3, [pc, #68]	; (80055fc <acc_base_configuration_check+0xa4>)
 80055b8:	4a15      	ldr	r2, [pc, #84]	; (8005610 <acc_base_configuration_check+0xb8>)
 80055ba:	e7f2      	b.n	80055a2 <acc_base_configuration_check+0x4a>
 80055bc:	2b03      	cmp	r3, #3
 80055be:	d00c      	beq.n	80055da <acc_base_configuration_check+0x82>
 80055c0:	f036 0304 	bics.w	r3, r6, #4
 80055c4:	d1e2      	bne.n	800558c <acc_base_configuration_check+0x34>
 80055c6:	e7de      	b.n	8005586 <acc_base_configuration_check+0x2e>
 80055c8:	f000 f8a2 	bl	8005710 <acc_rss_integration_is_hibernate_capable>
 80055cc:	b160      	cbz	r0, 80055e8 <acc_base_configuration_check+0x90>
 80055ce:	792b      	ldrb	r3, [r5, #4]
 80055d0:	2b03      	cmp	r3, #3
 80055d2:	d1cb      	bne.n	800556c <acc_base_configuration_check+0x14>
 80055d4:	4b09      	ldr	r3, [pc, #36]	; (80055fc <acc_base_configuration_check+0xa4>)
 80055d6:	4a0f      	ldr	r2, [pc, #60]	; (8005614 <acc_base_configuration_check+0xbc>)
 80055d8:	e7e3      	b.n	80055a2 <acc_base_configuration_check+0x4a>
 80055da:	f895 704e 	ldrb.w	r7, [r5, #78]	; 0x4e
 80055de:	2f00      	cmp	r7, #0
 80055e0:	d1ee      	bne.n	80055c0 <acc_base_configuration_check+0x68>
 80055e2:	4b06      	ldr	r3, [pc, #24]	; (80055fc <acc_base_configuration_check+0xa4>)
 80055e4:	4a0c      	ldr	r2, [pc, #48]	; (8005618 <acc_base_configuration_check+0xc0>)
 80055e6:	e7dc      	b.n	80055a2 <acc_base_configuration_check+0x4a>
 80055e8:	4904      	ldr	r1, [pc, #16]	; (80055fc <acc_base_configuration_check+0xa4>)
 80055ea:	4a0c      	ldr	r2, [pc, #48]	; (800561c <acc_base_configuration_check+0xc4>)
 80055ec:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 80055ee:	4906      	ldr	r1, [pc, #24]	; (8005608 <acc_base_configuration_check+0xb0>)
 80055f0:	4604      	mov	r4, r0
 80055f2:	47a8      	blx	r5
 80055f4:	e7da      	b.n	80055ac <acc_base_configuration_check+0x54>
 80055f6:	4b01      	ldr	r3, [pc, #4]	; (80055fc <acc_base_configuration_check+0xa4>)
 80055f8:	4a09      	ldr	r2, [pc, #36]	; (8005620 <acc_base_configuration_check+0xc8>)
 80055fa:	e7d2      	b.n	80055a2 <acc_base_configuration_check+0x4a>
 80055fc:	200004c0 	.word	0x200004c0
 8005600:	0800e840 	.word	0x0800e840
 8005604:	0800e6a0 	.word	0x0800e6a0
 8005608:	0800e64c 	.word	0x0800e64c
 800560c:	0800e770 	.word	0x0800e770
 8005610:	0800e73c 	.word	0x0800e73c
 8005614:	0800e6f8 	.word	0x0800e6f8
 8005618:	0800e800 	.word	0x0800e800
 800561c:	0800e6b8 	.word	0x0800e6b8
 8005620:	0800e7c4 	.word	0x0800e7c4

08005624 <acc_rss_integration_register>:
 8005624:	b538      	push	{r3, r4, r5, lr}
 8005626:	6943      	ldr	r3, [r0, #20]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d02b      	beq.n	8005684 <acc_rss_integration_register+0x60>
 800562c:	6983      	ldr	r3, [r0, #24]
 800562e:	b34b      	cbz	r3, 8005684 <acc_rss_integration_register+0x60>
 8005630:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005632:	b323      	cbz	r3, 800567e <acc_rss_integration_register+0x5a>
 8005634:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005636:	b32b      	cbz	r3, 8005684 <acc_rss_integration_register+0x60>
 8005638:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800563a:	b31b      	cbz	r3, 8005684 <acc_rss_integration_register+0x60>
 800563c:	6883      	ldr	r3, [r0, #8]
 800563e:	b30b      	cbz	r3, 8005684 <acc_rss_integration_register+0x60>
 8005640:	68c3      	ldr	r3, [r0, #12]
 8005642:	b1fb      	cbz	r3, 8005684 <acc_rss_integration_register+0x60>
 8005644:	6903      	ldr	r3, [r0, #16]
 8005646:	b1eb      	cbz	r3, 8005684 <acc_rss_integration_register+0x60>
 8005648:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800564a:	b313      	cbz	r3, 8005692 <acc_rss_integration_register+0x6e>
 800564c:	6802      	ldr	r2, [r0, #0]
 800564e:	2a2a      	cmp	r2, #42	; 0x2a
 8005650:	d81a      	bhi.n	8005688 <acc_rss_integration_register+0x64>
 8005652:	6842      	ldr	r2, [r0, #4]
 8005654:	2a0f      	cmp	r2, #15
 8005656:	d917      	bls.n	8005688 <acc_rss_integration_register+0x64>
 8005658:	69c2      	ldr	r2, [r0, #28]
 800565a:	b10a      	cbz	r2, 8005660 <acc_rss_integration_register+0x3c>
 800565c:	6a02      	ldr	r2, [r0, #32]
 800565e:	b19a      	cbz	r2, 8005688 <acc_rss_integration_register+0x64>
 8005660:	4605      	mov	r5, r0
 8005662:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005664:	4c0c      	ldr	r4, [pc, #48]	; (8005698 <acc_rss_integration_register+0x74>)
 8005666:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005668:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800566a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800566c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800566e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005670:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005674:	2301      	movs	r3, #1
 8005676:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800567a:	4618      	mov	r0, r3
 800567c:	bd38      	pop	{r3, r4, r5, pc}
 800567e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005680:	2b00      	cmp	r3, #0
 8005682:	d1d7      	bne.n	8005634 <acc_rss_integration_register+0x10>
 8005684:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005686:	b123      	cbz	r3, 8005692 <acc_rss_integration_register+0x6e>
 8005688:	4a04      	ldr	r2, [pc, #16]	; (800569c <acc_rss_integration_register+0x78>)
 800568a:	4905      	ldr	r1, [pc, #20]	; (80056a0 <acc_rss_integration_register+0x7c>)
 800568c:	2000      	movs	r0, #0
 800568e:	4798      	blx	r3
 8005690:	2300      	movs	r3, #0
 8005692:	4618      	mov	r0, r3
 8005694:	bd38      	pop	{r3, r4, r5, pc}
 8005696:	bf00      	nop
 8005698:	200004c0 	.word	0x200004c0
 800569c:	0800e890 	.word	0x0800e890
 80056a0:	0800e8a4 	.word	0x0800e8a4

080056a4 <acc_rss_integration_unregister>:
 80056a4:	4802      	ldr	r0, [pc, #8]	; (80056b0 <acc_rss_integration_unregister+0xc>)
 80056a6:	223c      	movs	r2, #60	; 0x3c
 80056a8:	2100      	movs	r1, #0
 80056aa:	f007 bd7f 	b.w	800d1ac <memset>
 80056ae:	bf00      	nop
 80056b0:	200004c0 	.word	0x200004c0

080056b4 <acc_rss_integration_get_sensor_count>:
 80056b4:	4b01      	ldr	r3, [pc, #4]	; (80056bc <acc_rss_integration_get_sensor_count+0x8>)
 80056b6:	6818      	ldr	r0, [r3, #0]
 80056b8:	4770      	bx	lr
 80056ba:	bf00      	nop
 80056bc:	200004c0 	.word	0x200004c0

080056c0 <acc_rss_integration_get_sensor_reference_frequency>:
 80056c0:	4b01      	ldr	r3, [pc, #4]	; (80056c8 <acc_rss_integration_get_sensor_reference_frequency+0x8>)
 80056c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c4:	4718      	bx	r3
 80056c6:	bf00      	nop
 80056c8:	200004c0 	.word	0x200004c0

080056cc <acc_rss_integration_get_max_spi_transfer_size>:
 80056cc:	4b01      	ldr	r3, [pc, #4]	; (80056d4 <acc_rss_integration_get_max_spi_transfer_size+0x8>)
 80056ce:	6858      	ldr	r0, [r3, #4]
 80056d0:	4770      	bx	lr
 80056d2:	bf00      	nop
 80056d4:	200004c0 	.word	0x200004c0

080056d8 <acc_rss_integration_sensor_device_power_on>:
 80056d8:	4b01      	ldr	r3, [pc, #4]	; (80056e0 <acc_rss_integration_sensor_device_power_on+0x8>)
 80056da:	695b      	ldr	r3, [r3, #20]
 80056dc:	4718      	bx	r3
 80056de:	bf00      	nop
 80056e0:	200004c0 	.word	0x200004c0

080056e4 <acc_rss_integration_sensor_device_power_off>:
 80056e4:	4b01      	ldr	r3, [pc, #4]	; (80056ec <acc_rss_integration_sensor_device_power_off+0x8>)
 80056e6:	699b      	ldr	r3, [r3, #24]
 80056e8:	4718      	bx	r3
 80056ea:	bf00      	nop
 80056ec:	200004c0 	.word	0x200004c0

080056f0 <acc_rss_integration_sensor_device_hibernate_enter>:
 80056f0:	4b02      	ldr	r3, [pc, #8]	; (80056fc <acc_rss_integration_sensor_device_hibernate_enter+0xc>)
 80056f2:	69db      	ldr	r3, [r3, #28]
 80056f4:	b103      	cbz	r3, 80056f8 <acc_rss_integration_sensor_device_hibernate_enter+0x8>
 80056f6:	4718      	bx	r3
 80056f8:	4770      	bx	lr
 80056fa:	bf00      	nop
 80056fc:	200004c0 	.word	0x200004c0

08005700 <acc_rss_integration_sensor_device_hibernate_exit>:
 8005700:	4b02      	ldr	r3, [pc, #8]	; (800570c <acc_rss_integration_sensor_device_hibernate_exit+0xc>)
 8005702:	6a1b      	ldr	r3, [r3, #32]
 8005704:	b103      	cbz	r3, 8005708 <acc_rss_integration_sensor_device_hibernate_exit+0x8>
 8005706:	4718      	bx	r3
 8005708:	4770      	bx	lr
 800570a:	bf00      	nop
 800570c:	200004c0 	.word	0x200004c0

08005710 <acc_rss_integration_is_hibernate_capable>:
 8005710:	4b02      	ldr	r3, [pc, #8]	; (800571c <acc_rss_integration_is_hibernate_capable+0xc>)
 8005712:	69d8      	ldr	r0, [r3, #28]
 8005714:	3800      	subs	r0, #0
 8005716:	bf18      	it	ne
 8005718:	2001      	movne	r0, #1
 800571a:	4770      	bx	lr
 800571c:	200004c0 	.word	0x200004c0

08005720 <acc_rss_integration_wait_for_sensor_interrupt>:
 8005720:	4b01      	ldr	r3, [pc, #4]	; (8005728 <acc_rss_integration_wait_for_sensor_interrupt+0x8>)
 8005722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005724:	4718      	bx	r3
 8005726:	bf00      	nop
 8005728:	200004c0 	.word	0x200004c0

0800572c <acc_rss_integration_sensor_device_transfer>:
 800572c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005730:	4f10      	ldr	r7, [pc, #64]	; (8005774 <acc_rss_integration_sensor_device_transfer+0x48>)
 8005732:	f8d7 e038 	ldr.w	lr, [r7, #56]	; 0x38
 8005736:	f1be 0f00 	cmp.w	lr, #0
 800573a:	d003      	beq.n	8005744 <acc_rss_integration_sensor_device_transfer+0x18>
 800573c:	4673      	mov	r3, lr
 800573e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005742:	4718      	bx	r3
 8005744:	460c      	mov	r4, r1
 8005746:	4606      	mov	r6, r0
 8005748:	4611      	mov	r1, r2
 800574a:	4615      	mov	r5, r2
 800574c:	4620      	mov	r0, r4
 800574e:	4698      	mov	r8, r3
 8005750:	f002 fd3a 	bl	80081c8 <acc_utils_swap16_array>
 8005754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005756:	4630      	mov	r0, r6
 8005758:	006a      	lsls	r2, r5, #1
 800575a:	4621      	mov	r1, r4
 800575c:	4798      	blx	r3
 800575e:	f1b8 0f00 	cmp.w	r8, #0
 8005762:	d101      	bne.n	8005768 <acc_rss_integration_sensor_device_transfer+0x3c>
 8005764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005768:	4629      	mov	r1, r5
 800576a:	4620      	mov	r0, r4
 800576c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005770:	f002 bd2a 	b.w	80081c8 <acc_utils_swap16_array>
 8005774:	200004c0 	.word	0x200004c0

08005778 <acc_rss_integration_mem_alloc_debug>:
 8005778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800577c:	4f0c      	ldr	r7, [pc, #48]	; (80057b0 <acc_rss_integration_mem_alloc_debug+0x38>)
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	4688      	mov	r8, r1
 8005782:	4616      	mov	r6, r2
 8005784:	4605      	mov	r5, r0
 8005786:	4798      	blx	r3
 8005788:	4604      	mov	r4, r0
 800578a:	b150      	cbz	r0, 80057a2 <acc_rss_integration_mem_alloc_debug+0x2a>
 800578c:	4b09      	ldr	r3, [pc, #36]	; (80057b4 <acc_rss_integration_mem_alloc_debug+0x3c>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	b123      	cbz	r3, 800579c <acc_rss_integration_mem_alloc_debug+0x24>
 8005792:	689f      	ldr	r7, [r3, #8]
 8005794:	4642      	mov	r2, r8
 8005796:	4633      	mov	r3, r6
 8005798:	4629      	mov	r1, r5
 800579a:	47b8      	blx	r7
 800579c:	4620      	mov	r0, r4
 800579e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057a4:	4a04      	ldr	r2, [pc, #16]	; (80057b8 <acc_rss_integration_mem_alloc_debug+0x40>)
 80057a6:	4905      	ldr	r1, [pc, #20]	; (80057bc <acc_rss_integration_mem_alloc_debug+0x44>)
 80057a8:	4798      	blx	r3
 80057aa:	4620      	mov	r0, r4
 80057ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057b0:	200004c0 	.word	0x200004c0
 80057b4:	2000035c 	.word	0x2000035c
 80057b8:	0800e8b4 	.word	0x0800e8b4
 80057bc:	0800e8a4 	.word	0x0800e8a4

080057c0 <acc_rss_integration_mem_calloc_debug>:
 80057c0:	b570      	push	{r4, r5, r6, lr}
 80057c2:	b190      	cbz	r0, 80057ea <acc_rss_integration_mem_calloc_debug+0x2a>
 80057c4:	460c      	mov	r4, r1
 80057c6:	4611      	mov	r1, r2
 80057c8:	461a      	mov	r2, r3
 80057ca:	fba0 3604 	umull	r3, r6, r0, r4
 80057ce:	b97e      	cbnz	r6, 80057f0 <acc_rss_integration_mem_calloc_debug+0x30>
 80057d0:	fb04 f500 	mul.w	r5, r4, r0
 80057d4:	4628      	mov	r0, r5
 80057d6:	f7ff ffcf 	bl	8005778 <acc_rss_integration_mem_alloc_debug>
 80057da:	4604      	mov	r4, r0
 80057dc:	b118      	cbz	r0, 80057e6 <acc_rss_integration_mem_calloc_debug+0x26>
 80057de:	462a      	mov	r2, r5
 80057e0:	4631      	mov	r1, r6
 80057e2:	f007 fce3 	bl	800d1ac <memset>
 80057e6:	4620      	mov	r0, r4
 80057e8:	bd70      	pop	{r4, r5, r6, pc}
 80057ea:	4604      	mov	r4, r0
 80057ec:	4620      	mov	r0, r4
 80057ee:	bd70      	pop	{r4, r5, r6, pc}
 80057f0:	4801      	ldr	r0, [pc, #4]	; (80057f8 <acc_rss_integration_mem_calloc_debug+0x38>)
 80057f2:	21dd      	movs	r1, #221	; 0xdd
 80057f4:	f002 fa38 	bl	8007c68 <acc_assert_fail>
 80057f8:	0800e8a4 	.word	0x0800e8a4

080057fc <acc_rss_integration_mem_free>:
 80057fc:	4b06      	ldr	r3, [pc, #24]	; (8005818 <acc_rss_integration_mem_free+0x1c>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	b510      	push	{r4, lr}
 8005802:	4604      	mov	r4, r0
 8005804:	b10b      	cbz	r3, 800580a <acc_rss_integration_mem_free+0xe>
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	4798      	blx	r3
 800580a:	4b04      	ldr	r3, [pc, #16]	; (800581c <acc_rss_integration_mem_free+0x20>)
 800580c:	4620      	mov	r0, r4
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005814:	4718      	bx	r3
 8005816:	bf00      	nop
 8005818:	2000035c 	.word	0x2000035c
 800581c:	200004c0 	.word	0x200004c0

08005820 <acc_rss_integration_log_level>:
 8005820:	4b01      	ldr	r3, [pc, #4]	; (8005828 <acc_rss_integration_log_level+0x8>)
 8005822:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
 8005826:	4770      	bx	lr
 8005828:	200004c0 	.word	0x200004c0

0800582c <inject_data>:
 800582c:	3034      	adds	r0, #52	; 0x34
 800582e:	f003 bacf 	b.w	8008dd0 <acc_element_source_adc_inject_data>
 8005832:	bf00      	nop

08005834 <disassemble>:
 8005834:	b538      	push	{r3, r4, r5, lr}
 8005836:	6805      	ldr	r5, [r0, #0]
 8005838:	4604      	mov	r4, r0
 800583a:	b155      	cbz	r5, 8005852 <disassemble+0x1e>
 800583c:	f105 0034 	add.w	r0, r5, #52	; 0x34
 8005840:	f003 fa76 	bl	8008d30 <acc_element_source_adc_release>
 8005844:	f8d5 03a4 	ldr.w	r0, [r5, #932]	; 0x3a4
 8005848:	f7ff ffd8 	bl	80057fc <acc_rss_integration_mem_free>
 800584c:	4628      	mov	r0, r5
 800584e:	f7ff ffd5 	bl	80057fc <acc_rss_integration_mem_free>
 8005852:	4620      	mov	r0, r4
 8005854:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005858:	f7ff bfd0 	b.w	80057fc <acc_rss_integration_mem_free>

0800585c <produce>:
 800585c:	b510      	push	{r4, lr}
 800585e:	4604      	mov	r4, r0
 8005860:	3034      	adds	r0, #52	; 0x34
 8005862:	f003 fa73 	bl	8008d4c <acc_element_source_adc_produce>
 8005866:	b960      	cbnz	r0, 8005882 <produce+0x26>
 8005868:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 800586c:	f8d4 2348 	ldr.w	r2, [r4, #840]	; 0x348
 8005870:	6118      	str	r0, [r3, #16]
 8005872:	2101      	movs	r1, #1
 8005874:	7198      	strb	r0, [r3, #6]
 8005876:	7159      	strb	r1, [r3, #5]
 8005878:	f504 7051 	add.w	r0, r4, #836	; 0x344
 800587c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005880:	4710      	bx	r2
 8005882:	bd10      	pop	{r4, pc}

08005884 <acc_pipeline_envelope_assemble>:
 8005884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005888:	ed2d 8b08 	vpush	{d8-d11}
 800588c:	460e      	mov	r6, r1
 800588e:	b08b      	sub	sp, #44	; 0x2c
 8005890:	461c      	mov	r4, r3
 8005892:	2110      	movs	r1, #16
 8005894:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005898:	4681      	mov	r9, r0
 800589a:	4615      	mov	r5, r2
 800589c:	2001      	movs	r0, #1
 800589e:	4ae4      	ldr	r2, [pc, #912]	; (8005c30 <acc_pipeline_envelope_assemble+0x3ac>)
 80058a0:	e9cd 6403 	strd	r6, r4, [sp, #12]
 80058a4:	f7ff ff8c 	bl	80057c0 <acc_rss_integration_mem_calloc_debug>
 80058a8:	4ae1      	ldr	r2, [pc, #900]	; (8005c30 <acc_pipeline_envelope_assemble+0x3ac>)
 80058aa:	4606      	mov	r6, r0
 80058ac:	f240 1301 	movw	r3, #257	; 0x101
 80058b0:	f44f 716b 	mov.w	r1, #940	; 0x3ac
 80058b4:	2001      	movs	r0, #1
 80058b6:	f7ff ff83 	bl	80057c0 <acc_rss_integration_mem_calloc_debug>
 80058ba:	4604      	mov	r4, r0
 80058bc:	2e00      	cmp	r6, #0
 80058be:	f000 8208 	beq.w	8005cd2 <acc_pipeline_envelope_assemble+0x44e>
 80058c2:	2800      	cmp	r0, #0
 80058c4:	f000 8205 	beq.w	8005cd2 <acc_pipeline_envelope_assemble+0x44e>
 80058c8:	f100 0334 	add.w	r3, r0, #52	; 0x34
 80058cc:	f500 7262 	add.w	r2, r0, #904	; 0x388
 80058d0:	f100 0814 	add.w	r8, r0, #20
 80058d4:	6030      	str	r0, [r6, #0]
 80058d6:	4649      	mov	r1, r9
 80058d8:	4618      	mov	r0, r3
 80058da:	9200      	str	r2, [sp, #0]
 80058dc:	ee08 3a10 	vmov	s16, r3
 80058e0:	462a      	mov	r2, r5
 80058e2:	4643      	mov	r3, r8
 80058e4:	f003 fa04 	bl	8008cf0 <acc_element_source_adc_init_radar_engine>
 80058e8:	4681      	mov	r9, r0
 80058ea:	2800      	cmp	r0, #0
 80058ec:	f000 81aa 	beq.w	8005c44 <acc_pipeline_envelope_assemble+0x3c0>
 80058f0:	2100      	movs	r1, #0
 80058f2:	4628      	mov	r0, r5
 80058f4:	f7ff fbe6 	bl	80050c4 <acc_base_configuration_time_domain_low_pass_filter_alpha_get>
 80058f8:	4683      	mov	fp, r0
 80058fa:	2007      	movs	r0, #7
 80058fc:	f8b4 9388 	ldrh.w	r9, [r4, #904]	; 0x388
 8005900:	f002 f9ca 	bl	8007c98 <acc_element_sizeof>
 8005904:	f8b4 a396 	ldrh.w	sl, [r4, #918]	; 0x396
 8005908:	f8b4 3392 	ldrh.w	r3, [r4, #914]	; 0x392
 800590c:	f8b4 2394 	ldrh.w	r2, [r4, #916]	; 0x394
 8005910:	4453      	add	r3, sl
 8005912:	ea4f 0a43 	mov.w	sl, r3, lsl #1
 8005916:	0053      	lsls	r3, r2, #1
 8005918:	459a      	cmp	sl, r3
 800591a:	bf38      	it	cc
 800591c:	469a      	movcc	sl, r3
 800591e:	fb00 f909 	mul.w	r9, r0, r9
 8005922:	45ca      	cmp	sl, r9
 8005924:	4628      	mov	r0, r5
 8005926:	bf38      	it	cc
 8005928:	46ca      	movcc	sl, r9
 800592a:	f7ff fd51 	bl	80053d0 <acc_base_configuration_min_pipeline_memory_size_get>
 800592e:	4582      	cmp	sl, r0
 8005930:	bf38      	it	cc
 8005932:	4682      	movcc	sl, r0
 8005934:	f8c4 a3a8 	str.w	sl, [r4, #936]	; 0x3a8
 8005938:	f1bb 0f00 	cmp.w	fp, #0
 800593c:	d115      	bne.n	800596a <acc_pipeline_envelope_assemble+0xe6>
 800593e:	49bc      	ldr	r1, [pc, #752]	; (8005c30 <acc_pipeline_envelope_assemble+0x3ac>)
 8005940:	f240 1285 	movw	r2, #389	; 0x185
 8005944:	4650      	mov	r0, sl
 8005946:	f7ff ff17 	bl	8005778 <acc_rss_integration_mem_alloc_debug>
 800594a:	4681      	mov	r9, r0
 800594c:	f8c4 03a4 	str.w	r0, [r4, #932]	; 0x3a4
 8005950:	2800      	cmp	r0, #0
 8005952:	f040 8181 	bne.w	8005c58 <acc_pipeline_envelope_assemble+0x3d4>
 8005956:	4630      	mov	r0, r6
 8005958:	f7ff ff6c 	bl	8005834 <disassemble>
 800595c:	2600      	movs	r6, #0
 800595e:	4630      	mov	r0, r6
 8005960:	b00b      	add	sp, #44	; 0x2c
 8005962:	ecbd 8b08 	vpop	{d8-d11}
 8005966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800596a:	2007      	movs	r0, #7
 800596c:	f8b4 9388 	ldrh.w	r9, [r4, #904]	; 0x388
 8005970:	f002 f992 	bl	8007c98 <acc_element_sizeof>
 8005974:	f10a 030a 	add.w	r3, sl, #10
 8005978:	fb00 3009 	mla	r0, r0, r9, r3
 800597c:	49ac      	ldr	r1, [pc, #688]	; (8005c30 <acc_pipeline_envelope_assemble+0x3ac>)
 800597e:	f240 1285 	movw	r2, #389	; 0x185
 8005982:	f7ff fef9 	bl	8005778 <acc_rss_integration_mem_alloc_debug>
 8005986:	4681      	mov	r9, r0
 8005988:	f8c4 03a4 	str.w	r0, [r4, #932]	; 0x3a4
 800598c:	2800      	cmp	r0, #0
 800598e:	d0e2      	beq.n	8005956 <acc_pipeline_envelope_assemble+0xd2>
 8005990:	f8b4 138a 	ldrh.w	r1, [r4, #906]	; 0x38a
 8005994:	9105      	str	r1, [sp, #20]
 8005996:	2007      	movs	r0, #7
 8005998:	f002 f97e 	bl	8007c98 <acc_element_sizeof>
 800599c:	9905      	ldr	r1, [sp, #20]
 800599e:	f10a 0204 	add.w	r2, sl, #4
 80059a2:	fb00 9101 	mla	r1, r0, r1, r9
 80059a6:	444a      	add	r2, r9
 80059a8:	f104 0c06 	add.w	ip, r4, #6
 80059ac:	1de0      	adds	r0, r4, #7
 80059ae:	f104 0310 	add.w	r3, r4, #16
 80059b2:	e9cd 2106 	strd	r2, r1, [sp, #24]
 80059b6:	f8c4 c05c 	str.w	ip, [r4, #92]	; 0x5c
 80059ba:	f104 020c 	add.w	r2, r4, #12
 80059be:	f104 0c08 	add.w	ip, r4, #8
 80059c2:	6620      	str	r0, [r4, #96]	; 0x60
 80059c4:	1d20      	adds	r0, r4, #4
 80059c6:	e9c4 2c19 	strd	r2, ip, [r4, #100]	; 0x64
 80059ca:	65a3      	str	r3, [r4, #88]	; 0x58
 80059cc:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 80059d0:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 80059d4:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80059d8:	e9c4 9931 	strd	r9, r9, [r4, #196]	; 0xc4
 80059dc:	f8c4 9048 	str.w	r9, [r4, #72]	; 0x48
 80059e0:	6564      	str	r4, [r4, #84]	; 0x54
 80059e2:	f8c4 9084 	str.w	r9, [r4, #132]	; 0x84
 80059e6:	4628      	mov	r0, r5
 80059e8:	4617      	mov	r7, r2
 80059ea:	9305      	str	r3, [sp, #20]
 80059ec:	f7ff fcbe 	bl	800536c <acc_base_configuration_noise_level_normalization_get>
 80059f0:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 80059f4:	9907      	ldr	r1, [sp, #28]
 80059f6:	b118      	cbz	r0, 8005a00 <acc_pipeline_envelope_assemble+0x17c>
 80059f8:	e9c4 9941 	strd	r9, r9, [r4, #260]	; 0x104
 80059fc:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8005a00:	e9c4 9951 	strd	r9, r9, [r4, #324]	; 0x144
 8005a04:	e9c4 9960 	strd	r9, r9, [r4, #384]	; 0x180
 8005a08:	e9c4 9971 	strd	r9, r9, [r4, #452]	; 0x1c4
 8005a0c:	e9c4 9183 	strd	r9, r1, [r4, #524]	; 0x20c
 8005a10:	e9c4 1192 	strd	r1, r1, [r4, #584]	; 0x248
 8005a14:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
 8005a18:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194
 8005a1c:	f8c4 71a0 	str.w	r7, [r4, #416]	; 0x1a0
 8005a20:	f8c4 31d8 	str.w	r3, [r4, #472]	; 0x1d8
 8005a24:	f8c4 3220 	str.w	r3, [r4, #544]	; 0x220
 8005a28:	f8c4 325c 	str.w	r3, [r4, #604]	; 0x25c
 8005a2c:	f1bb 0f00 	cmp.w	fp, #0
 8005a30:	d007      	beq.n	8005a42 <acc_pipeline_envelope_assemble+0x1be>
 8005a32:	e9c4 12a7 	strd	r1, r2, [r4, #668]	; 0x29c
 8005a36:	eb09 000a 	add.w	r0, r9, sl
 8005a3a:	f8c4 02a8 	str.w	r0, [r4, #680]	; 0x2a8
 8005a3e:	f8c4 32b0 	str.w	r3, [r4, #688]	; 0x2b0
 8005a42:	e9c4 29b7 	strd	r2, r9, [r4, #732]	; 0x2dc
 8005a46:	e9c4 99c6 	strd	r9, r9, [r4, #792]	; 0x318
 8005a4a:	f8c4 32f0 	str.w	r3, [r4, #752]	; 0x2f0
 8005a4e:	f8c4 332c 	str.w	r3, [r4, #812]	; 0x32c
 8005a52:	f8c4 9354 	str.w	r9, [r4, #852]	; 0x354
 8005a56:	ee18 0a10 	vmov	r0, s16
 8005a5a:	f8c4 437c 	str.w	r4, [r4, #892]	; 0x37c
 8005a5e:	f504 7369 	add.w	r3, r4, #932	; 0x3a4
 8005a62:	4642      	mov	r2, r8
 8005a64:	4629      	mov	r1, r5
 8005a66:	f003 f951 	bl	8008d0c <acc_element_source_adc_init>
 8005a6a:	4681      	mov	r9, r0
 8005a6c:	2800      	cmp	r0, #0
 8005a6e:	f000 80e9 	beq.w	8005c44 <acc_pipeline_envelope_assemble+0x3c0>
 8005a72:	f104 03b4 	add.w	r3, r4, #180	; 0xb4
 8005a76:	f104 0a74 	add.w	sl, r4, #116	; 0x74
 8005a7a:	461f      	mov	r7, r3
 8005a7c:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8005c34 <acc_pipeline_envelope_assemble+0x3b0>
 8005a80:	2105      	movs	r1, #5
 8005a82:	4650      	mov	r0, sl
 8005a84:	ee09 3a90 	vmov	s19, r3
 8005a88:	f002 f954 	bl	8007d34 <acc_element_saturation_check_init>
 8005a8c:	4638      	mov	r0, r7
 8005a8e:	2200      	movs	r2, #0
 8005a90:	2105      	movs	r1, #5
 8005a92:	f002 fc77 	bl	8008384 <acc_element_centering_init>
 8005a96:	4628      	mov	r0, r5
 8005a98:	f7ff fc68 	bl	800536c <acc_base_configuration_noise_level_normalization_get>
 8005a9c:	2800      	cmp	r0, #0
 8005a9e:	f040 80fa 	bne.w	8005c96 <acc_pipeline_envelope_assemble+0x412>
 8005aa2:	f504 739a 	add.w	r3, r4, #308	; 0x134
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	ee08 3a90 	vmov	s17, r3
 8005aac:	f504 73b8 	add.w	r3, r4, #368	; 0x170
 8005ab0:	461f      	mov	r7, r3
 8005ab2:	2207      	movs	r2, #7
 8005ab4:	2105      	movs	r1, #5
 8005ab6:	ee0a 3a90 	vmov	s21, r3
 8005aba:	f002 fd2f 	bl	800851c <acc_element_converter_init>
 8005abe:	eddf 0a5d 	vldr	s1, [pc, #372]	; 8005c34 <acc_pipeline_envelope_assemble+0x3b0>
 8005ac2:	ed94 0a08 	vldr	s0, [r4, #32]
 8005ac6:	2107      	movs	r1, #7
 8005ac8:	4638      	mov	r0, r7
 8005aca:	f002 fee9 	bl	80088a0 <acc_element_iq_mixer_init>
 8005ace:	f504 73da 	add.w	r3, r4, #436	; 0x1b4
 8005ad2:	f8b4 2390 	ldrh.w	r2, [r4, #912]	; 0x390
 8005ad6:	9206      	str	r2, [sp, #24]
 8005ad8:	461f      	mov	r7, r3
 8005ada:	4628      	mov	r0, r5
 8005adc:	ee0b 3a10 	vmov	s22, r3
 8005ae0:	f8b4 338e 	ldrh.w	r3, [r4, #910]	; 0x38e
 8005ae4:	9305      	str	r3, [sp, #20]
 8005ae6:	f7ff fad1 	bl	800508c <acc_base_configuration_phase_compensation_alpha_get>
 8005aea:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 8005aee:	4638      	mov	r0, r7
 8005af0:	2107      	movs	r1, #7
 8005af2:	f504 77fe 	add.w	r7, r4, #508	; 0x1fc
 8005af6:	f003 f809 	bl	8008b0c <acc_element_phase_compensation_init>
 8005afa:	f8b4 238c 	ldrh.w	r2, [r4, #908]	; 0x38c
 8005afe:	2107      	movs	r1, #7
 8005b00:	4638      	mov	r0, r7
 8005b02:	f002 fd7d 	bl	8008600 <acc_element_crop_init>
 8005b06:	4628      	mov	r0, r5
 8005b08:	f7ff faf8 	bl	80050fc <acc_base_configuration_filter_demodulated_data_get>
 8005b0c:	f504 7b0e 	add.w	fp, r4, #568	; 0x238
 8005b10:	9005      	str	r0, [sp, #20]
 8005b12:	4628      	mov	r0, r5
 8005b14:	f7ff fb02 	bl	800511c <acc_base_configuration_demodulation_filter_cutoff_freq_ratio_get>
 8005b18:	2107      	movs	r1, #7
 8005b1a:	9a05      	ldr	r2, [sp, #20]
 8005b1c:	4643      	mov	r3, r8
 8005b1e:	4658      	mov	r0, fp
 8005b20:	f002 fdd0 	bl	80086c4 <acc_element_depth_domain_low_pass_filter_init>
 8005b24:	a909      	add	r1, sp, #36	; 0x24
 8005b26:	4628      	mov	r0, r5
 8005b28:	ee09 7a10 	vmov	s18, r7
 8005b2c:	f7ff faca 	bl	80050c4 <acc_base_configuration_time_domain_low_pass_filter_alpha_get>
 8005b30:	2800      	cmp	r0, #0
 8005b32:	f040 80a8 	bne.w	8005c86 <acc_pipeline_envelope_assemble+0x402>
 8005b36:	f504 7933 	add.w	r9, r4, #716	; 0x2cc
 8005b3a:	2107      	movs	r1, #7
 8005b3c:	4648      	mov	r0, r9
 8005b3e:	f504 7842 	add.w	r8, r4, #776	; 0x308
 8005b42:	f002 fbb9 	bl	80082b8 <acc_element_abs_init>
 8005b46:	f504 7351 	add.w	r3, r4, #836	; 0x344
 8005b4a:	2202      	movs	r2, #2
 8005b4c:	2104      	movs	r1, #4
 8005b4e:	4640      	mov	r0, r8
 8005b50:	461f      	mov	r7, r3
 8005b52:	ee0a 3a10 	vmov	s20, r3
 8005b56:	f002 fce1 	bl	800851c <acc_element_converter_init>
 8005b5a:	9a03      	ldr	r2, [sp, #12]
 8005b5c:	4638      	mov	r0, r7
 8005b5e:	6811      	ldr	r1, [r2, #0]
 8005b60:	f002 f958 	bl	8007e14 <acc_element_sink_callback_init>
 8005b64:	ee18 0a10 	vmov	r0, s16
 8005b68:	4651      	mov	r1, sl
 8005b6a:	f002 f8a1 	bl	8007cb0 <acc_element_connect>
 8005b6e:	4650      	mov	r0, sl
 8005b70:	ee19 1a90 	vmov	r1, s19
 8005b74:	f002 f89c 	bl	8007cb0 <acc_element_connect>
 8005b78:	4628      	mov	r0, r5
 8005b7a:	f7ff fbf7 	bl	800536c <acc_base_configuration_noise_level_normalization_get>
 8005b7e:	2800      	cmp	r0, #0
 8005b80:	d07a      	beq.n	8005c78 <acc_pipeline_envelope_assemble+0x3f4>
 8005b82:	f104 0af4 	add.w	sl, r4, #244	; 0xf4
 8005b86:	ee19 0a90 	vmov	r0, s19
 8005b8a:	4651      	mov	r1, sl
 8005b8c:	f002 f890 	bl	8007cb0 <acc_element_connect>
 8005b90:	ee18 1a90 	vmov	r1, s17
 8005b94:	4650      	mov	r0, sl
 8005b96:	f002 f88b 	bl	8007cb0 <acc_element_connect>
 8005b9a:	ee18 0a90 	vmov	r0, s17
 8005b9e:	ee1a 1a90 	vmov	r1, s21
 8005ba2:	f002 f885 	bl	8007cb0 <acc_element_connect>
 8005ba6:	ee1b 1a10 	vmov	r1, s22
 8005baa:	ee1a 0a90 	vmov	r0, s21
 8005bae:	f002 f87f 	bl	8007cb0 <acc_element_connect>
 8005bb2:	ee19 1a10 	vmov	r1, s18
 8005bb6:	ee1b 0a10 	vmov	r0, s22
 8005bba:	f002 f879 	bl	8007cb0 <acc_element_connect>
 8005bbe:	ee19 0a10 	vmov	r0, s18
 8005bc2:	4659      	mov	r1, fp
 8005bc4:	f002 f874 	bl	8007cb0 <acc_element_connect>
 8005bc8:	4628      	mov	r0, r5
 8005bca:	2100      	movs	r1, #0
 8005bcc:	f7ff fa7a 	bl	80050c4 <acc_base_configuration_time_domain_low_pass_filter_alpha_get>
 8005bd0:	2800      	cmp	r0, #0
 8005bd2:	d04c      	beq.n	8005c6e <acc_pipeline_envelope_assemble+0x3ea>
 8005bd4:	f504 7523 	add.w	r5, r4, #652	; 0x28c
 8005bd8:	4658      	mov	r0, fp
 8005bda:	4629      	mov	r1, r5
 8005bdc:	f002 f868 	bl	8007cb0 <acc_element_connect>
 8005be0:	4649      	mov	r1, r9
 8005be2:	4628      	mov	r0, r5
 8005be4:	f002 f864 	bl	8007cb0 <acc_element_connect>
 8005be8:	4648      	mov	r0, r9
 8005bea:	4641      	mov	r1, r8
 8005bec:	f002 f860 	bl	8007cb0 <acc_element_connect>
 8005bf0:	ee1a 1a10 	vmov	r1, s20
 8005bf4:	4640      	mov	r0, r8
 8005bf6:	f002 f85b 	bl	8007cb0 <acc_element_connect>
 8005bfa:	ee18 0a10 	vmov	r0, s16
 8005bfe:	f003 f8a1 	bl	8008d44 <acc_element_source_adc_validate>
 8005c02:	4605      	mov	r5, r0
 8005c04:	2800      	cmp	r0, #0
 8005c06:	d055      	beq.n	8005cb4 <acc_pipeline_envelope_assemble+0x430>
 8005c08:	ee18 0a10 	vmov	r0, s16
 8005c0c:	f003 f896 	bl	8008d3c <acc_element_source_adc_reset>
 8005c10:	9804      	ldr	r0, [sp, #16]
 8005c12:	4909      	ldr	r1, [pc, #36]	; (8005c38 <acc_pipeline_envelope_assemble+0x3b4>)
 8005c14:	4a09      	ldr	r2, [pc, #36]	; (8005c3c <acc_pipeline_envelope_assemble+0x3b8>)
 8005c16:	4b0a      	ldr	r3, [pc, #40]	; (8005c40 <acc_pipeline_envelope_assemble+0x3bc>)
 8005c18:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 8005c1c:	4630      	mov	r0, r6
 8005c1e:	e9c6 1201 	strd	r1, r2, [r6, #4]
 8005c22:	60f3      	str	r3, [r6, #12]
 8005c24:	b00b      	add	sp, #44	; 0x2c
 8005c26:	ecbd 8b08 	vpop	{d8-d11}
 8005c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c2e:	bf00      	nop
 8005c30:	0800e8c4 	.word	0x0800e8c4
 8005c34:	00000000 	.word	0x00000000
 8005c38:	0800585d 	.word	0x0800585d
 8005c3c:	0800582d 	.word	0x0800582d
 8005c40:	08005835 	.word	0x08005835
 8005c44:	4630      	mov	r0, r6
 8005c46:	f7ff fdf5 	bl	8005834 <disassemble>
 8005c4a:	464e      	mov	r6, r9
 8005c4c:	4630      	mov	r0, r6
 8005c4e:	b00b      	add	sp, #44	; 0x2c
 8005c50:	ecbd 8b08 	vpop	{d8-d11}
 8005c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c58:	f8b4 238a 	ldrh.w	r2, [r4, #906]	; 0x38a
 8005c5c:	9205      	str	r2, [sp, #20]
 8005c5e:	2007      	movs	r0, #7
 8005c60:	f002 f81a 	bl	8007c98 <acc_element_sizeof>
 8005c64:	9a05      	ldr	r2, [sp, #20]
 8005c66:	fb00 9202 	mla	r2, r0, r2, r9
 8005c6a:	4611      	mov	r1, r2
 8005c6c:	e69c      	b.n	80059a8 <acc_pipeline_envelope_assemble+0x124>
 8005c6e:	4658      	mov	r0, fp
 8005c70:	4649      	mov	r1, r9
 8005c72:	f002 f81d 	bl	8007cb0 <acc_element_connect>
 8005c76:	e7b7      	b.n	8005be8 <acc_pipeline_envelope_assemble+0x364>
 8005c78:	ee19 0a90 	vmov	r0, s19
 8005c7c:	ee18 1a90 	vmov	r1, s17
 8005c80:	f002 f816 	bl	8007cb0 <acc_element_connect>
 8005c84:	e789      	b.n	8005b9a <acc_pipeline_envelope_assemble+0x316>
 8005c86:	ed9d 0a09 	vldr	s0, [sp, #36]	; 0x24
 8005c8a:	2107      	movs	r1, #7
 8005c8c:	f504 7023 	add.w	r0, r4, #652	; 0x28c
 8005c90:	f003 f806 	bl	8008ca0 <acc_element_time_domain_low_pass_filter_init>
 8005c94:	e74f      	b.n	8005b36 <acc_pipeline_envelope_assemble+0x2b2>
 8005c96:	4628      	mov	r0, r5
 8005c98:	f7ff fbae 	bl	80053f8 <acc_base_configuration_maximize_signal_attenuation_get>
 8005c9c:	2800      	cmp	r0, #0
 8005c9e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8005ca0:	bf14      	ite	ne
 8005ca2:	231e      	movne	r3, #30
 8005ca4:	f44f 7396 	moveq.w	r3, #300	; 0x12c
 8005ca8:	2105      	movs	r1, #5
 8005caa:	f104 00f4 	add.w	r0, r4, #244	; 0xf4
 8005cae:	f002 fe83 	bl	80089b8 <acc_element_noise_level_normalization_init>
 8005cb2:	e6f6      	b.n	8005aa2 <acc_pipeline_envelope_assemble+0x21e>
 8005cb4:	4b0d      	ldr	r3, [pc, #52]	; (8005cec <acc_pipeline_envelope_assemble+0x468>)
 8005cb6:	4a0e      	ldr	r2, [pc, #56]	; (8005cf0 <acc_pipeline_envelope_assemble+0x46c>)
 8005cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cba:	490e      	ldr	r1, [pc, #56]	; (8005cf4 <acc_pipeline_envelope_assemble+0x470>)
 8005cbc:	4798      	blx	r3
 8005cbe:	4630      	mov	r0, r6
 8005cc0:	f7ff fdb8 	bl	8005834 <disassemble>
 8005cc4:	462e      	mov	r6, r5
 8005cc6:	4630      	mov	r0, r6
 8005cc8:	b00b      	add	sp, #44	; 0x2c
 8005cca:	ecbd 8b08 	vpop	{d8-d11}
 8005cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cd2:	4630      	mov	r0, r6
 8005cd4:	f7ff fd92 	bl	80057fc <acc_rss_integration_mem_free>
 8005cd8:	4620      	mov	r0, r4
 8005cda:	f7ff fd8f 	bl	80057fc <acc_rss_integration_mem_free>
 8005cde:	2600      	movs	r6, #0
 8005ce0:	4630      	mov	r0, r6
 8005ce2:	b00b      	add	sp, #44	; 0x2c
 8005ce4:	ecbd 8b08 	vpop	{d8-d11}
 8005ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cec:	200004c0 	.word	0x200004c0
 8005cf0:	0800e8d8 	.word	0x0800e8d8
 8005cf4:	0800e8c4 	.word	0x0800e8c4

08005cf8 <destroy>:
 8005cf8:	b510      	push	{r4, lr}
 8005cfa:	4604      	mov	r4, r0
 8005cfc:	6940      	ldr	r0, [r0, #20]
 8005cfe:	b118      	cbz	r0, 8005d08 <destroy+0x10>
 8005d00:	f7ff fd7c 	bl	80057fc <acc_rss_integration_mem_free>
 8005d04:	2300      	movs	r3, #0
 8005d06:	6163      	str	r3, [r4, #20]
 8005d08:	bd10      	pop	{r4, pc}
 8005d0a:	bf00      	nop

08005d0c <process_data>:
 8005d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d10:	6944      	ldr	r4, [r0, #20]
 8005d12:	f8b4 70ce 	ldrh.w	r7, [r4, #206]	; 0xce
 8005d16:	b917      	cbnz	r7, 8005d1e <process_data+0x12>
 8005d18:	2001      	movs	r0, #1
 8005d1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d1e:	f8b4 c0c8 	ldrh.w	ip, [r4, #200]	; 0xc8
 8005d22:	f8b4 80c4 	ldrh.w	r8, [r4, #196]	; 0xc4
 8005d26:	f8b4 e0cc 	ldrh.w	lr, [r4, #204]	; 0xcc
 8005d2a:	461d      	mov	r5, r3
 8005d2c:	4616      	mov	r6, r2
 8005d2e:	237c      	movs	r3, #124	; 0x7c
 8005d30:	680a      	ldr	r2, [r1, #0]
 8005d32:	fbb3 f3fe 	udiv	r3, r3, lr
 8005d36:	fb03 f30c 	mul.w	r3, r3, ip
 8005d3a:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 8005d3e:	eb02 0803 	add.w	r8, r2, r3
 8005d42:	4642      	mov	r2, r8
 8005d44:	6801      	ldr	r1, [r0, #0]
 8005d46:	463b      	mov	r3, r7
 8005d48:	2001      	movs	r0, #1
 8005d4a:	f002 f875 	bl	8007e38 <acc_probes_execute_uint16>
 8005d4e:	f8b4 10ce 	ldrh.w	r1, [r4, #206]	; 0xce
 8005d52:	4640      	mov	r0, r8
 8005d54:	f001 ff5a 	bl	8007c0c <acc_alg_cca_u16_calculate>
 8005d58:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8005d94 <process_data+0x88>
 8005d5c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8005d5e:	ed85 0a01 	vstr	s0, [r5, #4]
 8005d62:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8005d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d6a:	bfcc      	ite	gt
 8005d6c:	2201      	movgt	r2, #1
 8005d6e:	2200      	movle	r2, #0
 8005d70:	702a      	strb	r2, [r5, #0]
 8005d72:	b14b      	cbz	r3, 8005d88 <process_data+0x7c>
 8005d74:	2200      	movs	r2, #0
 8005d76:	f8b4 10ce 	ldrh.w	r1, [r4, #206]	; 0xce
 8005d7a:	6833      	ldr	r3, [r6, #0]
 8005d7c:	722a      	strb	r2, [r5, #8]
 8005d7e:	1a5b      	subs	r3, r3, r1
 8005d80:	6033      	str	r3, [r6, #0]
 8005d82:	2001      	movs	r0, #1
 8005d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d88:	f894 20c0 	ldrb.w	r2, [r4, #192]	; 0xc0
 8005d8c:	f082 0201 	eor.w	r2, r2, #1
 8005d90:	e7f1      	b.n	8005d76 <process_data+0x6a>
 8005d92:	bf00      	nop
 8005d94:	42640000 	.word	0x42640000

08005d98 <transfer_data>:
 8005d98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005d9c:	6944      	ldr	r4, [r0, #20]
 8005d9e:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
 8005da2:	b089      	sub	sp, #36	; 0x24
 8005da4:	4680      	mov	r8, r0
 8005da6:	460f      	mov	r7, r1
 8005da8:	4691      	mov	r9, r2
 8005daa:	b90b      	cbnz	r3, 8005db0 <transfer_data+0x18>
 8005dac:	f8a4 30c6 	strh.w	r3, [r4, #198]	; 0xc6
 8005db0:	f8b4 20ce 	ldrh.w	r2, [r4, #206]	; 0xce
 8005db4:	f8b4 50c8 	ldrh.w	r5, [r4, #200]	; 0xc8
 8005db8:	f8b4 30cc 	ldrh.w	r3, [r4, #204]	; 0xcc
 8005dbc:	a902      	add	r1, sp, #8
 8005dbe:	4620      	mov	r0, r4
 8005dc0:	267c      	movs	r6, #124	; 0x7c
 8005dc2:	fbb6 f3f3 	udiv	r3, r6, r3
 8005dc6:	fb03 2505 	mla	r5, r3, r5, r2
 8005dca:	f005 f925 	bl	800b018 <acc_cpd_linear_sweep_get_info>
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	9a02      	ldr	r2, [sp, #8]
 8005dd2:	f8b4 10c6 	ldrh.w	r1, [r4, #198]	; 0xc6
 8005dd6:	f8d8 0000 	ldr.w	r0, [r8]
 8005dda:	442a      	add	r2, r5
 8005ddc:	4419      	add	r1, r3
 8005dde:	f001 fdd7 	bl	8007990 <acc_sensor_protocol_r2_transfer_data>
 8005de2:	f104 02bc 	add.w	r2, r4, #188	; 0xbc
 8005de6:	ab01      	add	r3, sp, #4
 8005de8:	4621      	mov	r1, r4
 8005dea:	4680      	mov	r8, r0
 8005dec:	f005 f92c 	bl	800b048 <acc_cpd_linear_sweep_check>
 8005df0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005df4:	3b00      	subs	r3, #0
 8005df6:	bf18      	it	ne
 8005df8:	2301      	movne	r3, #1
 8005dfa:	a902      	add	r1, sp, #8
 8005dfc:	f889 3000 	strb.w	r3, [r9]
 8005e00:	4620      	mov	r0, r4
 8005e02:	f005 f909 	bl	800b018 <acc_cpd_linear_sweep_get_info>
 8005e06:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
 8005e0a:	6838      	ldr	r0, [r7, #0]
 8005e0c:	9902      	ldr	r1, [sp, #8]
 8005e0e:	006a      	lsls	r2, r5, #1
 8005e10:	eb08 0141 	add.w	r1, r8, r1, lsl #1
 8005e14:	4418      	add	r0, r3
 8005e16:	f007 f9af 	bl	800d178 <memmove>
 8005e1a:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
 8005e1e:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
 8005e22:	f8b4 10cc 	ldrh.w	r1, [r4, #204]	; 0xcc
 8005e26:	fbb6 f6f1 	udiv	r6, r6, r1
 8005e2a:	fb03 f306 	mul.w	r3, r3, r6
 8005e2e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8005e32:	4628      	mov	r0, r5
 8005e34:	f8a4 30c6 	strh.w	r3, [r4, #198]	; 0xc6
 8005e38:	f8a4 20c4 	strh.w	r2, [r4, #196]	; 0xc4
 8005e3c:	b009      	add	sp, #36	; 0x24
 8005e3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005e42:	bf00      	nop

08005e44 <measure_noise>:
 8005e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e48:	b0b7      	sub	sp, #220	; 0xdc
 8005e4a:	4604      	mov	r4, r0
 8005e4c:	4688      	mov	r8, r1
 8005e4e:	4616      	mov	r6, r2
 8005e50:	f7ff fce6 	bl	8005820 <acc_rss_integration_log_level>
 8005e54:	2803      	cmp	r0, #3
 8005e56:	d905      	bls.n	8005e64 <measure_noise+0x20>
 8005e58:	4b41      	ldr	r3, [pc, #260]	; (8005f60 <measure_noise+0x11c>)
 8005e5a:	4a42      	ldr	r2, [pc, #264]	; (8005f64 <measure_noise+0x120>)
 8005e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e5e:	4942      	ldr	r1, [pc, #264]	; (8005f68 <measure_noise+0x124>)
 8005e60:	2004      	movs	r0, #4
 8005e62:	4798      	blx	r3
 8005e64:	f8d4 9014 	ldr.w	r9, [r4, #20]
 8005e68:	f8d4 a000 	ldr.w	sl, [r4]
 8005e6c:	4649      	mov	r1, r9
 8005e6e:	22bc      	movs	r2, #188	; 0xbc
 8005e70:	a807      	add	r0, sp, #28
 8005e72:	f007 fa25 	bl	800d2c0 <memcpy>
 8005e76:	9d30      	ldr	r5, [sp, #192]	; 0xc0
 8005e78:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8005e7c:	f8d8 1000 	ldr.w	r1, [r8]
 8005e80:	f8b9 b0cc 	ldrh.w	fp, [r9, #204]	; 0xcc
 8005e84:	00ad      	lsls	r5, r5, #2
 8005e86:	1e6f      	subs	r7, r5, #1
 8005e88:	972c      	str	r7, [sp, #176]	; 0xb0
 8005e8a:	2702      	movs	r7, #2
 8005e8c:	2400      	movs	r4, #0
 8005e8e:	ab07      	add	r3, sp, #28
 8005e90:	972d      	str	r7, [sp, #180]	; 0xb4
 8005e92:	4650      	mov	r0, sl
 8005e94:	2701      	movs	r7, #1
 8005e96:	971d      	str	r7, [sp, #116]	; 0x74
 8005e98:	9422      	str	r4, [sp, #136]	; 0x88
 8005e9a:	941c      	str	r4, [sp, #112]	; 0x70
 8005e9c:	f88d 40c8 	strb.w	r4, [sp, #200]	; 0xc8
 8005ea0:	9434      	str	r4, [sp, #208]	; 0xd0
 8005ea2:	f004 fb2b 	bl	800a4fc <acc_cpd_linear_sweep_load_program>
 8005ea6:	4650      	mov	r0, sl
 8005ea8:	f005 f860 	bl	800af6c <acc_cpd_linear_sweep_run_program>
 8005eac:	4650      	mov	r0, sl
 8005eae:	466b      	mov	r3, sp
 8005eb0:	2264      	movs	r2, #100	; 0x64
 8005eb2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8005eb6:	f001 fc21 	bl	80076fc <acc_sensor_protocol_r2_wait_for_event>
 8005eba:	4607      	mov	r7, r0
 8005ebc:	b918      	cbnz	r0, 8005ec6 <measure_noise+0x82>
 8005ebe:	4638      	mov	r0, r7
 8005ec0:	b037      	add	sp, #220	; 0xdc
 8005ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ec6:	a901      	add	r1, sp, #4
 8005ec8:	4648      	mov	r0, r9
 8005eca:	237c      	movs	r3, #124	; 0x7c
 8005ecc:	f8d8 8000 	ldr.w	r8, [r8]
 8005ed0:	fbb3 fbfb 	udiv	fp, r3, fp
 8005ed4:	b2ad      	uxth	r5, r5
 8005ed6:	f005 f89f 	bl	800b018 <acc_cpd_linear_sweep_get_info>
 8005eda:	9a01      	ldr	r2, [sp, #4]
 8005edc:	fb0b f505 	mul.w	r5, fp, r5
 8005ee0:	4641      	mov	r1, r8
 8005ee2:	442a      	add	r2, r5
 8005ee4:	4650      	mov	r0, sl
 8005ee6:	f001 fd53 	bl	8007990 <acc_sensor_protocol_r2_transfer_data>
 8005eea:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8005eee:	4680      	mov	r8, r0
 8005ef0:	4650      	mov	r0, sl
 8005ef2:	f001 fc9b 	bl	800782c <acc_sensor_protocol_r2_stop>
 8005ef6:	4648      	mov	r0, r9
 8005ef8:	a901      	add	r1, sp, #4
 8005efa:	f005 f88d 	bl	800b018 <acc_cpd_linear_sweep_get_info>
 8005efe:	9801      	ldr	r0, [sp, #4]
 8005f00:	2d0e      	cmp	r5, #14
 8005f02:	eb08 0040 	add.w	r0, r8, r0, lsl #1
 8005f06:	d91c      	bls.n	8005f42 <measure_noise+0xfe>
 8005f08:	006a      	lsls	r2, r5, #1
 8005f0a:	3a02      	subs	r2, #2
 8005f0c:	f100 011a 	add.w	r1, r0, #26
 8005f10:	eb00 0e02 	add.w	lr, r0, r2
 8005f14:	460b      	mov	r3, r1
 8005f16:	f833 cf02 	ldrh.w	ip, [r3, #2]!
 8005f1a:	459e      	cmp	lr, r3
 8005f1c:	4464      	add	r4, ip
 8005f1e:	d1fa      	bne.n	8005f16 <measure_noise+0xd2>
 8005f20:	4410      	add	r0, r2
 8005f22:	2200      	movs	r2, #0
 8005f24:	3d0e      	subs	r5, #14
 8005f26:	fbb4 f4f5 	udiv	r4, r4, r5
 8005f2a:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 8005f2e:	1b1b      	subs	r3, r3, r4
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	bfb8      	it	lt
 8005f34:	425b      	neglt	r3, r3
 8005f36:	4288      	cmp	r0, r1
 8005f38:	441a      	add	r2, r3
 8005f3a:	d1f6      	bne.n	8005f2a <measure_noise+0xe6>
 8005f3c:	fbb2 f4f5 	udiv	r4, r2, r5
 8005f40:	b2a4      	uxth	r4, r4
 8005f42:	8034      	strh	r4, [r6, #0]
 8005f44:	f7ff fc6c 	bl	8005820 <acc_rss_integration_log_level>
 8005f48:	2803      	cmp	r0, #3
 8005f4a:	d9b8      	bls.n	8005ebe <measure_noise+0x7a>
 8005f4c:	4b04      	ldr	r3, [pc, #16]	; (8005f60 <measure_noise+0x11c>)
 8005f4e:	4a07      	ldr	r2, [pc, #28]	; (8005f6c <measure_noise+0x128>)
 8005f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f52:	4905      	ldr	r1, [pc, #20]	; (8005f68 <measure_noise+0x124>)
 8005f54:	2004      	movs	r0, #4
 8005f56:	4798      	blx	r3
 8005f58:	4638      	mov	r0, r7
 8005f5a:	b037      	add	sp, #220	; 0xdc
 8005f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f60:	200004c0 	.word	0x200004c0
 8005f64:	0800e8f8 	.word	0x0800e8f8
 8005f68:	0800e91c 	.word	0x0800e91c
 8005f6c:	0800e930 	.word	0x0800e930

08005f70 <calibrate>:
 8005f70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005f74:	b09b      	sub	sp, #108	; 0x6c
 8005f76:	4604      	mov	r4, r0
 8005f78:	460d      	mov	r5, r1
 8005f7a:	4616      	mov	r6, r2
 8005f7c:	461f      	mov	r7, r3
 8005f7e:	f7ff fc4f 	bl	8005820 <acc_rss_integration_log_level>
 8005f82:	2803      	cmp	r0, #3
 8005f84:	d905      	bls.n	8005f92 <calibrate+0x22>
 8005f86:	4b46      	ldr	r3, [pc, #280]	; (80060a0 <calibrate+0x130>)
 8005f88:	4a46      	ldr	r2, [pc, #280]	; (80060a4 <calibrate+0x134>)
 8005f8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f8c:	4946      	ldr	r1, [pc, #280]	; (80060a8 <calibrate+0x138>)
 8005f8e:	2004      	movs	r0, #4
 8005f90:	4798      	blx	r3
 8005f92:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8005f96:	6824      	ldr	r4, [r4, #0]
 8005f98:	2300      	movs	r3, #0
 8005f9a:	f8c8 30bc 	str.w	r3, [r8, #188]	; 0xbc
 8005f9e:	f7ff fb8f 	bl	80056c0 <acc_rss_integration_get_sensor_reference_frequency>
 8005fa2:	a812      	add	r0, sp, #72	; 0x48
 8005fa4:	a902      	add	r1, sp, #8
 8005fa6:	ed8d 0a12 	vstr	s0, [sp, #72]	; 0x48
 8005faa:	f001 fffb 	bl	8007fa4 <acc_cpd_pll_divisors_calculate>
 8005fae:	b920      	cbnz	r0, 8005fba <calibrate+0x4a>
 8005fb0:	2400      	movs	r4, #0
 8005fb2:	4620      	mov	r0, r4
 8005fb4:	b01b      	add	sp, #108	; 0x6c
 8005fb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005fba:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8005fbe:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8005fc2:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8005fc6:	f8bd c010 	ldrh.w	ip, [sp, #16]
 8005fca:	9207      	str	r2, [sp, #28]
 8005fcc:	e9cd 4305 	strd	r4, r3, [sp, #20]
 8005fd0:	9008      	str	r0, [sp, #32]
 8005fd2:	6869      	ldr	r1, [r5, #4]
 8005fd4:	6828      	ldr	r0, [r5, #0]
 8005fd6:	f8ad c024 	strh.w	ip, [sp, #36]	; 0x24
 8005fda:	466b      	mov	r3, sp
 8005fdc:	aa05      	add	r2, sp, #20
 8005fde:	f002 ff0d 	bl	8008dfc <acc_cpd_cbank_and_vana_calibration>
 8005fe2:	2800      	cmp	r0, #0
 8005fe4:	d0e4      	beq.n	8005fb0 <calibrate+0x40>
 8005fe6:	f8b8 90ce 	ldrh.w	r9, [r8, #206]	; 0xce
 8005fea:	f898 10d0 	ldrb.w	r1, [r8, #208]	; 0xd0
 8005fee:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8005ff2:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
 8005ff6:	f1b9 0000 	subs.w	r0, r9, #0
 8005ffa:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8005ffe:	920b      	str	r2, [sp, #44]	; 0x2c
 8006000:	bf18      	it	ne
 8006002:	2001      	movne	r0, #1
 8006004:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8006008:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
 800600c:	910c      	str	r1, [sp, #48]	; 0x30
 800600e:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8006012:	9900      	ldr	r1, [sp, #0]
 8006014:	940a      	str	r4, [sp, #40]	; 0x28
 8006016:	900d      	str	r0, [sp, #52]	; 0x34
 8006018:	f89d 4004 	ldrb.w	r4, [sp, #4]
 800601c:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8006020:	910f      	str	r1, [sp, #60]	; 0x3c
 8006022:	ab12      	add	r3, sp, #72	; 0x48
 8006024:	e9d5 0100 	ldrd	r0, r1, [r5]
 8006028:	aa0a      	add	r2, sp, #40	; 0x28
 800602a:	9410      	str	r4, [sp, #64]	; 0x40
 800602c:	f8ad 9046 	strh.w	r9, [sp, #70]	; 0x46
 8006030:	f003 f936 	bl	80092a0 <acc_cpd_dll_calibration>
 8006034:	4604      	mov	r4, r0
 8006036:	f1b9 0f00 	cmp.w	r9, #0
 800603a:	d004      	beq.n	8006046 <calibrate+0xd6>
 800603c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800603e:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
 8006042:	607a      	str	r2, [r7, #4]
 8006044:	703b      	strb	r3, [r7, #0]
 8006046:	2c00      	cmp	r4, #0
 8006048:	d0b2      	beq.n	8005fb0 <calibrate+0x40>
 800604a:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	; 0x48
 800604e:	9b00      	ldr	r3, [sp, #0]
 8006050:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8006054:	80b3      	strh	r3, [r6, #4]
 8006056:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006058:	80f0      	strh	r0, [r6, #6]
 800605a:	8131      	strh	r1, [r6, #8]
 800605c:	f8bd 0054 	ldrh.w	r0, [sp, #84]	; 0x54
 8006060:	f8bd 1056 	ldrh.w	r1, [sp, #86]	; 0x56
 8006064:	8172      	strh	r2, [r6, #10]
 8006066:	81b3      	strh	r3, [r6, #12]
 8006068:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
 800606c:	81f0      	strh	r0, [r6, #14]
 800606e:	2306      	movs	r3, #6
 8006070:	8231      	strh	r1, [r6, #16]
 8006072:	8272      	strh	r2, [r6, #18]
 8006074:	6033      	str	r3, [r6, #0]
 8006076:	f7ff fbd3 	bl	8005820 <acc_rss_integration_log_level>
 800607a:	2803      	cmp	r0, #3
 800607c:	d905      	bls.n	800608a <calibrate+0x11a>
 800607e:	4b08      	ldr	r3, [pc, #32]	; (80060a0 <calibrate+0x130>)
 8006080:	4a0a      	ldr	r2, [pc, #40]	; (80060ac <calibrate+0x13c>)
 8006082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006084:	4908      	ldr	r1, [pc, #32]	; (80060a8 <calibrate+0x138>)
 8006086:	2004      	movs	r0, #4
 8006088:	4798      	blx	r3
 800608a:	f7ff fbc9 	bl	8005820 <acc_rss_integration_log_level>
 800608e:	2801      	cmp	r0, #1
 8006090:	d98f      	bls.n	8005fb2 <calibrate+0x42>
 8006092:	4b03      	ldr	r3, [pc, #12]	; (80060a0 <calibrate+0x130>)
 8006094:	4a06      	ldr	r2, [pc, #24]	; (80060b0 <calibrate+0x140>)
 8006096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006098:	4903      	ldr	r1, [pc, #12]	; (80060a8 <calibrate+0x138>)
 800609a:	2002      	movs	r0, #2
 800609c:	4798      	blx	r3
 800609e:	e788      	b.n	8005fb2 <calibrate+0x42>
 80060a0:	200004c0 	.word	0x200004c0
 80060a4:	0800e950 	.word	0x0800e950
 80060a8:	0800e91c 	.word	0x0800e91c
 80060ac:	0800e970 	.word	0x0800e970
 80060b0:	0800e98c 	.word	0x0800e98c

080060b4 <set_calibration_context>:
 80060b4:	b570      	push	{r4, r5, r6, lr}
 80060b6:	680b      	ldr	r3, [r1, #0]
 80060b8:	2b06      	cmp	r3, #6
 80060ba:	b08c      	sub	sp, #48	; 0x30
 80060bc:	d00b      	beq.n	80060d6 <set_calibration_context+0x22>
 80060be:	4929      	ldr	r1, [pc, #164]	; (8006164 <set_calibration_context+0xb0>)
 80060c0:	4a29      	ldr	r2, [pc, #164]	; (8006168 <set_calibration_context+0xb4>)
 80060c2:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 80060c4:	4929      	ldr	r1, [pc, #164]	; (800616c <set_calibration_context+0xb8>)
 80060c6:	2006      	movs	r0, #6
 80060c8:	9000      	str	r0, [sp, #0]
 80060ca:	2000      	movs	r0, #0
 80060cc:	47a0      	blx	r4
 80060ce:	2600      	movs	r6, #0
 80060d0:	4630      	mov	r0, r6
 80060d2:	b00c      	add	sp, #48	; 0x30
 80060d4:	bd70      	pop	{r4, r5, r6, pc}
 80060d6:	460d      	mov	r5, r1
 80060d8:	4604      	mov	r4, r0
 80060da:	f7ff faf1 	bl	80056c0 <acc_rss_integration_get_sensor_reference_frequency>
 80060de:	a806      	add	r0, sp, #24
 80060e0:	a903      	add	r1, sp, #12
 80060e2:	ed8d 0a06 	vstr	s0, [sp, #24]
 80060e6:	f001 ff5d 	bl	8007fa4 <acc_cpd_pll_divisors_calculate>
 80060ea:	4606      	mov	r6, r0
 80060ec:	2800      	cmp	r0, #0
 80060ee:	d0ef      	beq.n	80060d0 <set_calibration_context+0x1c>
 80060f0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80060f4:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80060f8:	6063      	str	r3, [r4, #4]
 80060fa:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80060fe:	60a2      	str	r2, [r4, #8]
 8006100:	6023      	str	r3, [r4, #0]
 8006102:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8006106:	88ab      	ldrh	r3, [r5, #4]
 8006108:	81a2      	strh	r2, [r4, #12]
 800610a:	88ea      	ldrh	r2, [r5, #6]
 800610c:	6123      	str	r3, [r4, #16]
 800610e:	892b      	ldrh	r3, [r5, #8]
 8006110:	6162      	str	r2, [r4, #20]
 8006112:	896a      	ldrh	r2, [r5, #10]
 8006114:	61a3      	str	r3, [r4, #24]
 8006116:	89ab      	ldrh	r3, [r5, #12]
 8006118:	61e2      	str	r2, [r4, #28]
 800611a:	8a2a      	ldrh	r2, [r5, #16]
 800611c:	6223      	str	r3, [r4, #32]
 800611e:	8a6b      	ldrh	r3, [r5, #18]
 8006120:	89e8      	ldrh	r0, [r5, #14]
 8006122:	84a2      	strh	r2, [r4, #36]	; 0x24
 8006124:	84e3      	strh	r3, [r4, #38]	; 0x26
 8006126:	aa06      	add	r2, sp, #24
 8006128:	217c      	movs	r1, #124	; 0x7c
 800612a:	f002 f821 	bl	8008170 <acc_dll_calculate_area_settings>
 800612e:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 8006132:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 8006136:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800613a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800613e:	62a0      	str	r0, [r4, #40]	; 0x28
 8006140:	62e1      	str	r1, [r4, #44]	; 0x2c
 8006142:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
 8006146:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 800614a:	6322      	str	r2, [r4, #48]	; 0x30
 800614c:	6363      	str	r3, [r4, #52]	; 0x34
 800614e:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8006152:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8006156:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
 800615a:	4630      	mov	r0, r6
 800615c:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
 8006160:	b00c      	add	sp, #48	; 0x30
 8006162:	bd70      	pop	{r4, r5, r6, pc}
 8006164:	200004c0 	.word	0x200004c0
 8006168:	0800e9ac 	.word	0x0800e9ac
 800616c:	0800e91c 	.word	0x0800e91c

08006170 <get_package_range_coarse_max>:
 8006170:	b530      	push	{r4, r5, lr}
 8006172:	f8b0 50cc 	ldrh.w	r5, [r0, #204]	; 0xcc
 8006176:	b087      	sub	sp, #28
 8006178:	b185      	cbz	r5, 800619c <get_package_range_coarse_max+0x2c>
 800617a:	4604      	mov	r4, r0
 800617c:	4669      	mov	r1, sp
 800617e:	f004 ff4b 	bl	800b018 <acc_cpd_linear_sweep_get_info>
 8006182:	9b00      	ldr	r3, [sp, #0]
 8006184:	f8b4 00ce 	ldrh.w	r0, [r4, #206]	; 0xce
 8006188:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 800618c:	1a1b      	subs	r3, r3, r0
 800618e:	207c      	movs	r0, #124	; 0x7c
 8006190:	fbb0 f0f5 	udiv	r0, r0, r5
 8006194:	fbb3 f0f0 	udiv	r0, r3, r0
 8006198:	b007      	add	sp, #28
 800619a:	bd30      	pop	{r4, r5, pc}
 800619c:	4802      	ldr	r0, [pc, #8]	; (80061a8 <get_package_range_coarse_max+0x38>)
 800619e:	f44f 71a9 	mov.w	r1, #338	; 0x152
 80061a2:	f001 fd61 	bl	8007c68 <acc_assert_fail>
 80061a6:	bf00      	nop
 80061a8:	0800e91c 	.word	0x0800e91c

080061ac <initialize>:
 80061ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061b0:	460d      	mov	r5, r1
 80061b2:	f891 1032 	ldrb.w	r1, [r1, #50]	; 0x32
 80061b6:	2906      	cmp	r1, #6
 80061b8:	b08f      	sub	sp, #60	; 0x3c
 80061ba:	4606      	mov	r6, r0
 80061bc:	4690      	mov	r8, r2
 80061be:	461f      	mov	r7, r3
 80061c0:	d00d      	beq.n	80061de <initialize+0x32>
 80061c2:	2909      	cmp	r1, #9
 80061c4:	d00b      	beq.n	80061de <initialize+0x32>
 80061c6:	4ba8      	ldr	r3, [pc, #672]	; (8006468 <initialize+0x2bc>)
 80061c8:	4aa8      	ldr	r2, [pc, #672]	; (800646c <initialize+0x2c0>)
 80061ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061cc:	49a8      	ldr	r1, [pc, #672]	; (8006470 <initialize+0x2c4>)
 80061ce:	2000      	movs	r0, #0
 80061d0:	4798      	blx	r3
 80061d2:	f04f 0900 	mov.w	r9, #0
 80061d6:	4648      	mov	r0, r9
 80061d8:	b00f      	add	sp, #60	; 0x3c
 80061da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061de:	aa06      	add	r2, sp, #24
 80061e0:	f10d 0116 	add.w	r1, sp, #22
 80061e4:	4628      	mov	r0, r5
 80061e6:	6974      	ldr	r4, [r6, #20]
 80061e8:	f7ff f91a 	bl	8005420 <acc_base_configuration_cca_get>
 80061ec:	2800      	cmp	r0, #0
 80061ee:	d03f      	beq.n	8006270 <initialize+0xc4>
 80061f0:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 80061f4:	f89d 0016 	ldrb.w	r0, [sp, #22]
 80061f8:	f8a4 30ce 	strh.w	r3, [r4, #206]	; 0xce
 80061fc:	f884 00d0 	strb.w	r0, [r4, #208]	; 0xd0
 8006200:	4628      	mov	r0, r5
 8006202:	f7ff f89f 	bl	8005344 <acc_base_configuration_downsampling_factor_get>
 8006206:	2300      	movs	r3, #0
 8006208:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
 800620c:	f8a4 00cc 	strh.w	r0, [r4, #204]	; 0xcc
 8006210:	4628      	mov	r0, r5
 8006212:	f7fe fef9 	bl	8005008 <acc_base_configuration_tx_disable_get>
 8006216:	f04f 0b01 	mov.w	fp, #1
 800621a:	f884 00c0 	strb.w	r0, [r4, #192]	; 0xc0
 800621e:	f884 b0ad 	strb.w	fp, [r4, #173]	; 0xad
 8006222:	4620      	mov	r0, r4
 8006224:	f7ff ffa4 	bl	8006170 <get_package_range_coarse_max>
 8006228:	4b92      	ldr	r3, [pc, #584]	; (8006474 <initialize+0x2c8>)
 800622a:	b280      	uxth	r0, r0
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	9002      	str	r0, [sp, #8]
 8006230:	237c      	movs	r3, #124	; 0x7c
 8006232:	f106 0a04 	add.w	sl, r6, #4
 8006236:	9201      	str	r2, [sp, #4]
 8006238:	9300      	str	r3, [sp, #0]
 800623a:	4652      	mov	r2, sl
 800623c:	463b      	mov	r3, r7
 800623e:	4641      	mov	r1, r8
 8006240:	4628      	mov	r0, r5
 8006242:	f000 fa95 	bl	8006770 <acc_radar_engine_common_sweep_w_dly_initialize_range>
 8006246:	4681      	mov	r9, r0
 8006248:	2800      	cmp	r0, #0
 800624a:	d0c4      	beq.n	80061d6 <initialize+0x2a>
 800624c:	4628      	mov	r0, r5
 800624e:	f7ff f815 	bl	800527c <acc_base_configuration_sweep_type_debug_get>
 8006252:	b980      	cbnz	r0, 8006276 <initialize+0xca>
 8006254:	e9c4 0b12 	strd	r0, fp, [r4, #72]	; 0x48
 8006258:	2300      	movs	r3, #0
 800625a:	6523      	str	r3, [r4, #80]	; 0x50
 800625c:	4628      	mov	r0, r5
 800625e:	f7fe ff8d 	bl	800517c <acc_base_configuration_repetition_mode_get>
 8006262:	2803      	cmp	r0, #3
 8006264:	f200 80d8 	bhi.w	8006418 <initialize+0x26c>
 8006268:	e8df f000 	tbb	[pc, r0]
 800626c:	0abfd9d1 	.word	0x0abfd9d1
 8006270:	f8a4 00ce 	strh.w	r0, [r4, #206]	; 0xce
 8006274:	e7c2      	b.n	80061fc <initialize+0x50>
 8006276:	2300      	movs	r3, #0
 8006278:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
 800627c:	64e3      	str	r3, [r4, #76]	; 0x4c
 800627e:	e7eb      	b.n	8006258 <initialize+0xac>
 8006280:	4628      	mov	r0, r5
 8006282:	f10d 0b20 	add.w	fp, sp, #32
 8006286:	f7fe ff81 	bl	800518c <acc_base_configuration_update_rate_get>
 800628a:	a907      	add	r1, sp, #28
 800628c:	4658      	mov	r0, fp
 800628e:	f000 fa27 	bl	80066e0 <acc_radar_engine_common_frequency_to_main_clk>
 8006292:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8006296:	2301      	movs	r3, #1
 8006298:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
 800629c:	e9c4 1217 	strd	r1, r2, [r4, #92]	; 0x5c
 80062a0:	4628      	mov	r0, r5
 80062a2:	f7fe fea1 	bl	8004fe8 <acc_base_configuration_power_save_mode_get>
 80062a6:	2804      	cmp	r0, #4
 80062a8:	d807      	bhi.n	80062ba <initialize+0x10e>
 80062aa:	e8df f000 	tbb	[pc, r0]
 80062ae:	0303      	.short	0x0303
 80062b0:	c1c5      	.short	0xc1c5
 80062b2:	03          	.byte	0x03
 80062b3:	00          	.byte	0x00
 80062b4:	2301      	movs	r3, #1
 80062b6:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
 80062ba:	f10d 021a 	add.w	r2, sp, #26
 80062be:	f10d 0117 	add.w	r1, sp, #23
 80062c2:	4628      	mov	r0, r5
 80062c4:	f7ff f8ac 	bl	8005420 <acc_base_configuration_cca_get>
 80062c8:	2800      	cmp	r0, #0
 80062ca:	f000 80ba 	beq.w	8006442 <initialize+0x296>
 80062ce:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 80062d2:	2201      	movs	r2, #1
 80062d4:	3b01      	subs	r3, #1
 80062d6:	e9c4 232d 	strd	r2, r3, [r4, #180]	; 0xb4
 80062da:	4628      	mov	r0, r5
 80062dc:	f7fe fe94 	bl	8005008 <acc_base_configuration_tx_disable_get>
 80062e0:	2800      	cmp	r0, #0
 80062e2:	f000 80bb 	beq.w	800645c <initialize+0x2b0>
 80062e6:	2000      	movs	r0, #0
 80062e8:	66e0      	str	r0, [r4, #108]	; 0x6c
 80062ea:	4628      	mov	r0, r5
 80062ec:	f7fe fea0 	bl	8005030 <acc_base_configuration_decrease_tx_emission_get>
 80062f0:	f080 0001 	eor.w	r0, r0, #1
 80062f4:	2301      	movs	r3, #1
 80062f6:	b2c0      	uxtb	r0, r0
 80062f8:	e9c4 031c 	strd	r0, r3, [r4, #112]	; 0x70
 80062fc:	4628      	mov	r0, r5
 80062fe:	f7fe feab 	bl	8005058 <acc_base_configuration_hw_accelerated_average_samples_get>
 8006302:	3801      	subs	r0, #1
 8006304:	67a0      	str	r0, [r4, #120]	; 0x78
 8006306:	4628      	mov	r0, r5
 8006308:	f7fe ff58 	bl	80051bc <acc_base_configuration_gain_get>
 800630c:	67e0      	str	r0, [r4, #124]	; 0x7c
 800630e:	4628      	mov	r0, r5
 8006310:	f7fe ff64 	bl	80051dc <acc_base_configuration_integrator_get>
 8006314:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
 8006318:	4628      	mov	r0, r5
 800631a:	f7fe ff87 	bl	800522c <acc_base_configuration_integrator_ramp_up_get>
 800631e:	3801      	subs	r0, #1
 8006320:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 8006324:	4628      	mov	r0, r5
 8006326:	f7fe ff6d 	bl	8005204 <acc_base_configuration_wg_duration_get>
 800632a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 800632e:	4628      	mov	r0, r5
 8006330:	f7fe ffea 	bl	8005308 <acc_base_configuration_bba_fast_refresh_disable_get>
 8006334:	f884 008d 	strb.w	r0, [r4, #141]	; 0x8d
 8006338:	4628      	mov	r0, r5
 800633a:	f7ff f803 	bl	8005344 <acc_base_configuration_downsampling_factor_get>
 800633e:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
 8006342:	4628      	mov	r0, r5
 8006344:	f7fe ffcc 	bl	80052e0 <acc_base_configuration_bba_reset_clocksync_perturbation_get>
 8006348:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c
 800634c:	4628      	mov	r0, r5
 800634e:	f7fe ffd1 	bl	80052f4 <acc_base_configuration_bba_linear_resync_perturbation_get>
 8006352:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
 8006356:	4628      	mov	r0, r5
 8006358:	f7ff f826 	bl	80053a8 <acc_base_configuration_asynchronous_measurement_get>
 800635c:	88b2      	ldrh	r2, [r6, #4]
 800635e:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8006362:	f080 0001 	eor.w	r0, r0, #1
 8006366:	2301      	movs	r3, #1
 8006368:	f884 00ac 	strb.w	r0, [r4, #172]	; 0xac
 800636c:	f884 30ad 	strb.w	r3, [r4, #173]	; 0xad
 8006370:	4650      	mov	r0, sl
 8006372:	f000 fcc9 	bl	8006d08 <acc_radar_engine_common_sweep_w_dly_stitching_required>
 8006376:	2800      	cmp	r0, #0
 8006378:	d16c      	bne.n	8006454 <initialize+0x2a8>
 800637a:	8970      	ldrh	r0, [r6, #10]
 800637c:	f9b6 3008 	ldrsh.w	r3, [r6, #8]
 8006380:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 8006384:	3801      	subs	r0, #1
 8006386:	88f3      	ldrh	r3, [r6, #6]
 8006388:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 800638c:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
 8006390:	f7ff f996 	bl	80056c0 <acc_rss_integration_get_sensor_reference_frequency>
 8006394:	893b      	ldrh	r3, [r7, #8]
 8006396:	ed84 0a2c 	vstr	s0, [r4, #176]	; 0xb0
 800639a:	f44f 7261 	mov.w	r2, #900	; 0x384
 800639e:	f8a8 2014 	strh.w	r2, [r8, #20]
 80063a2:	f8b4 10cc 	ldrh.w	r1, [r4, #204]	; 0xcc
 80063a6:	227c      	movs	r2, #124	; 0x7c
 80063a8:	fbb2 f2f1 	udiv	r2, r2, r1
 80063ac:	fb03 f302 	mul.w	r3, r3, r2
 80063b0:	2200      	movs	r2, #0
 80063b2:	817b      	strh	r3, [r7, #10]
 80063b4:	833a      	strh	r2, [r7, #24]
 80063b6:	4659      	mov	r1, fp
 80063b8:	4620      	mov	r0, r4
 80063ba:	f004 fe2d 	bl	800b018 <acc_cpd_linear_sweep_get_info>
 80063be:	465a      	mov	r2, fp
 80063c0:	6831      	ldr	r1, [r6, #0]
 80063c2:	2301      	movs	r3, #1
 80063c4:	2013      	movs	r0, #19
 80063c6:	f001 fd37 	bl	8007e38 <acc_probes_execute_uint16>
 80063ca:	f000 fcf9 	bl	8006dc0 <acc_sensor_r2_get_max_header_length>
 80063ce:	f8b4 20ce 	ldrh.w	r2, [r4, #206]	; 0xce
 80063d2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80063d6:	4413      	add	r3, r2
 80063d8:	4418      	add	r0, r3
 80063da:	81f8      	strh	r0, [r7, #14]
 80063dc:	f44f 6316 	mov.w	r3, #2400	; 0x960
 80063e0:	4648      	mov	r0, r9
 80063e2:	81bb      	strh	r3, [r7, #12]
 80063e4:	b00f      	add	sp, #60	; 0x3c
 80063e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063ea:	4628      	mov	r0, r5
 80063ec:	f10d 0b20 	add.w	fp, sp, #32
 80063f0:	f7fe fecc 	bl	800518c <acc_base_configuration_update_rate_get>
 80063f4:	a907      	add	r1, sp, #28
 80063f6:	4658      	mov	r0, fp
 80063f8:	f000 f972 	bl	80066e0 <acc_radar_engine_common_frequency_to_main_clk>
 80063fc:	2301      	movs	r3, #1
 80063fe:	9a07      	ldr	r2, [sp, #28]
 8006400:	6563      	str	r3, [r4, #84]	; 0x54
 8006402:	2100      	movs	r1, #0
 8006404:	9b08      	ldr	r3, [sp, #32]
 8006406:	6623      	str	r3, [r4, #96]	; 0x60
 8006408:	e9c4 1216 	strd	r1, r2, [r4, #88]	; 0x58
 800640c:	e748      	b.n	80062a0 <initialize+0xf4>
 800640e:	2300      	movs	r3, #0
 8006410:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
 8006414:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
 8006418:	f10d 0b20 	add.w	fp, sp, #32
 800641c:	e740      	b.n	80062a0 <initialize+0xf4>
 800641e:	2300      	movs	r3, #0
 8006420:	2201      	movs	r2, #1
 8006422:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
 8006426:	6563      	str	r3, [r4, #84]	; 0x54
 8006428:	65a2      	str	r2, [r4, #88]	; 0x58
 800642a:	f10d 0b20 	add.w	fp, sp, #32
 800642e:	e737      	b.n	80062a0 <initialize+0xf4>
 8006430:	2300      	movs	r3, #0
 8006432:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
 8006436:	e740      	b.n	80062ba <initialize+0x10e>
 8006438:	2201      	movs	r2, #1
 800643a:	2300      	movs	r3, #0
 800643c:	e9c4 2319 	strd	r2, r3, [r4, #100]	; 0x64
 8006440:	e73b      	b.n	80062ba <initialize+0x10e>
 8006442:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
 8006446:	4628      	mov	r0, r5
 8006448:	f7fe fdde 	bl	8005008 <acc_base_configuration_tx_disable_get>
 800644c:	f080 0001 	eor.w	r0, r0, #1
 8006450:	b2c0      	uxtb	r0, r0
 8006452:	e749      	b.n	80062e8 <initialize+0x13c>
 8006454:	6970      	ldr	r0, [r6, #20]
 8006456:	f7ff fe8b 	bl	8006170 <get_package_range_coarse_max>
 800645a:	e78f      	b.n	800637c <initialize+0x1d0>
 800645c:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8006460:	f080 0001 	eor.w	r0, r0, #1
 8006464:	e740      	b.n	80062e8 <initialize+0x13c>
 8006466:	bf00      	nop
 8006468:	200004c0 	.word	0x200004c0
 800646c:	0800e840 	.word	0x0800e840
 8006470:	0800e91c 	.word	0x0800e91c
 8006474:	0800ea9c 	.word	0x0800ea9c

08006478 <coarse_count_for_next_package>:
 8006478:	b538      	push	{r3, r4, r5, lr}
 800647a:	8983      	ldrh	r3, [r0, #12]
 800647c:	4604      	mov	r4, r0
 800647e:	6940      	ldr	r0, [r0, #20]
 8006480:	3b01      	subs	r3, #1
 8006482:	f8b0 20c2 	ldrh.w	r2, [r0, #194]	; 0xc2
 8006486:	b29b      	uxth	r3, r3
 8006488:	429a      	cmp	r2, r3
 800648a:	d109      	bne.n	80064a0 <coarse_count_for_next_package+0x28>
 800648c:	8965      	ldrh	r5, [r4, #10]
 800648e:	f7ff fe6f 	bl	8006170 <get_package_range_coarse_max>
 8006492:	fbb5 f3f0 	udiv	r3, r5, r0
 8006496:	fb03 5010 	mls	r0, r3, r0, r5
 800649a:	b100      	cbz	r0, 800649e <coarse_count_for_next_package+0x26>
 800649c:	bd38      	pop	{r3, r4, r5, pc}
 800649e:	6960      	ldr	r0, [r4, #20]
 80064a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80064a4:	f7ff be64 	b.w	8006170 <get_package_range_coarse_max>

080064a8 <update_program>:
 80064a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064ac:	6946      	ldr	r6, [r0, #20]
 80064ae:	8987      	ldrh	r7, [r0, #12]
 80064b0:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
 80064b2:	f896 20c0 	ldrb.w	r2, [r6, #192]	; 0xc0
 80064b6:	460d      	mov	r5, r1
 80064b8:	fab3 f383 	clz	r3, r3
 80064bc:	2a00      	cmp	r2, #0
 80064be:	bf18      	it	ne
 80064c0:	4611      	movne	r1, r2
 80064c2:	2f01      	cmp	r7, #1
 80064c4:	ea4f 1353 	mov.w	r3, r3, lsr #5
 80064c8:	bf94      	ite	ls
 80064ca:	f04f 0900 	movls.w	r9, #0
 80064ce:	f04f 0901 	movhi.w	r9, #1
 80064d2:	2f01      	cmp	r7, #1
 80064d4:	b085      	sub	sp, #20
 80064d6:	4604      	mov	r4, r0
 80064d8:	ea83 0a01 	eor.w	sl, r3, r1
 80064dc:	d933      	bls.n	8006546 <update_program+0x9e>
 80064de:	f8b6 30c2 	ldrh.w	r3, [r6, #194]	; 0xc2
 80064e2:	f9b0 b008 	ldrsh.w	fp, [r0, #8]
 80064e6:	3301      	adds	r3, #1
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	fbb3 f8f7 	udiv	r8, r3, r7
 80064ee:	fb07 3718 	mls	r7, r7, r8, r3
 80064f2:	fa1f f887 	uxth.w	r8, r7
 80064f6:	f8a6 80c2 	strh.w	r8, [r6, #194]	; 0xc2
 80064fa:	4630      	mov	r0, r6
 80064fc:	f7ff fe38 	bl	8006170 <get_package_range_coarse_max>
 8006500:	4607      	mov	r7, r0
 8006502:	4620      	mov	r0, r4
 8006504:	f7ff ffb8 	bl	8006478 <coarse_count_for_next_package>
 8006508:	f896 20c0 	ldrb.w	r2, [r6, #192]	; 0xc0
 800650c:	f8c6 00c8 	str.w	r0, [r6, #200]	; 0xc8
 8006510:	fb07 b708 	mla	r7, r7, r8, fp
 8006514:	3801      	subs	r0, #1
 8006516:	e9cd 0701 	strd	r0, r7, [sp, #4]
 800651a:	f88d 9000 	strb.w	r9, [sp]
 800651e:	f88d 9001 	strb.w	r9, [sp, #1]
 8006522:	f88d a002 	strb.w	sl, [sp, #2]
 8006526:	b15a      	cbz	r2, 8006540 <update_program+0x98>
 8006528:	2500      	movs	r5, #0
 800652a:	6820      	ldr	r0, [r4, #0]
 800652c:	9503      	str	r5, [sp, #12]
 800652e:	4669      	mov	r1, sp
 8006530:	f004 fd20 	bl	800af74 <acc_cpd_linear_sweep_update_program>
 8006534:	b108      	cbz	r0, 800653a <update_program+0x92>
 8006536:	9b03      	ldr	r3, [sp, #12]
 8006538:	66f3      	str	r3, [r6, #108]	; 0x6c
 800653a:	b005      	add	sp, #20
 800653c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006540:	f085 0501 	eor.w	r5, r5, #1
 8006544:	e7f1      	b.n	800652a <update_program+0x82>
 8006546:	428b      	cmp	r3, r1
 8006548:	d003      	beq.n	8006552 <update_program+0xaa>
 800654a:	f04f 30ff 	mov.w	r0, #4294967295
 800654e:	2700      	movs	r7, #0
 8006550:	e7e1      	b.n	8006516 <update_program+0x6e>
 8006552:	2001      	movs	r0, #1
 8006554:	e7f1      	b.n	800653a <update_program+0x92>
 8006556:	bf00      	nop

08006558 <start>:
 8006558:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800655c:	6944      	ldr	r4, [r0, #20]
 800655e:	f8d4 70b4 	ldr.w	r7, [r4, #180]	; 0xb4
 8006562:	f894 80ac 	ldrb.w	r8, [r4, #172]	; 0xac
 8006566:	f8d4 906c 	ldr.w	r9, [r4, #108]	; 0x6c
 800656a:	2300      	movs	r3, #0
 800656c:	b085      	sub	sp, #20
 800656e:	4606      	mov	r6, r0
 8006570:	460d      	mov	r5, r1
 8006572:	f8a4 30c2 	strh.w	r3, [r4, #194]	; 0xc2
 8006576:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 800657a:	b117      	cbz	r7, 8006582 <start+0x2a>
 800657c:	f1b8 0f00 	cmp.w	r8, #0
 8006580:	d11f      	bne.n	80065c2 <start+0x6a>
 8006582:	4630      	mov	r0, r6
 8006584:	f7ff ff78 	bl	8006478 <coarse_count_for_next_package>
 8006588:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
 800658c:	f7ff f948 	bl	8005820 <acc_rss_integration_log_level>
 8006590:	2803      	cmp	r0, #3
 8006592:	d905      	bls.n	80065a0 <start+0x48>
 8006594:	4b2b      	ldr	r3, [pc, #172]	; (8006644 <start+0xec>)
 8006596:	4a2c      	ldr	r2, [pc, #176]	; (8006648 <start+0xf0>)
 8006598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800659a:	492c      	ldr	r1, [pc, #176]	; (800664c <start+0xf4>)
 800659c:	2004      	movs	r0, #4
 800659e:	4798      	blx	r3
 80065a0:	e9d5 1200 	ldrd	r1, r2, [r5]
 80065a4:	6830      	ldr	r0, [r6, #0]
 80065a6:	4623      	mov	r3, r4
 80065a8:	f003 ffa8 	bl	800a4fc <acc_cpd_linear_sweep_load_program>
 80065ac:	4605      	mov	r5, r0
 80065ae:	b950      	cbnz	r0, 80065c6 <start+0x6e>
 80065b0:	4b24      	ldr	r3, [pc, #144]	; (8006644 <start+0xec>)
 80065b2:	4a27      	ldr	r2, [pc, #156]	; (8006650 <start+0xf8>)
 80065b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065b6:	4925      	ldr	r1, [pc, #148]	; (800664c <start+0xf4>)
 80065b8:	4798      	blx	r3
 80065ba:	4628      	mov	r0, r5
 80065bc:	b005      	add	sp, #20
 80065be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80065c2:	66e3      	str	r3, [r4, #108]	; 0x6c
 80065c4:	e7dd      	b.n	8006582 <start+0x2a>
 80065c6:	6830      	ldr	r0, [r6, #0]
 80065c8:	f004 fcd0 	bl	800af6c <acc_cpd_linear_sweep_run_program>
 80065cc:	4605      	mov	r5, r0
 80065ce:	2800      	cmp	r0, #0
 80065d0:	d032      	beq.n	8006638 <start+0xe0>
 80065d2:	f1b8 0f00 	cmp.w	r8, #0
 80065d6:	d00f      	beq.n	80065f8 <start+0xa0>
 80065d8:	6931      	ldr	r1, [r6, #16]
 80065da:	6830      	ldr	r0, [r6, #0]
 80065dc:	f001 f9ae 	bl	800793c <acc_sensor_protocol_r2_wait_for_sync_start>
 80065e0:	b350      	cbz	r0, 8006638 <start+0xe0>
 80065e2:	f7ff f91d 	bl	8005820 <acc_rss_integration_log_level>
 80065e6:	2801      	cmp	r0, #1
 80065e8:	d905      	bls.n	80065f6 <start+0x9e>
 80065ea:	4b16      	ldr	r3, [pc, #88]	; (8006644 <start+0xec>)
 80065ec:	4a19      	ldr	r2, [pc, #100]	; (8006654 <start+0xfc>)
 80065ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065f0:	4916      	ldr	r1, [pc, #88]	; (800664c <start+0xf4>)
 80065f2:	2002      	movs	r0, #2
 80065f4:	4798      	blx	r3
 80065f6:	b96f      	cbnz	r7, 8006614 <start+0xbc>
 80065f8:	f7ff f912 	bl	8005820 <acc_rss_integration_log_level>
 80065fc:	2803      	cmp	r0, #3
 80065fe:	d9dc      	bls.n	80065ba <start+0x62>
 8006600:	4b10      	ldr	r3, [pc, #64]	; (8006644 <start+0xec>)
 8006602:	4a15      	ldr	r2, [pc, #84]	; (8006658 <start+0x100>)
 8006604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006606:	4911      	ldr	r1, [pc, #68]	; (800664c <start+0xf4>)
 8006608:	2004      	movs	r0, #4
 800660a:	4798      	blx	r3
 800660c:	4628      	mov	r0, r5
 800660e:	b005      	add	sp, #20
 8006610:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006614:	2300      	movs	r3, #0
 8006616:	2201      	movs	r2, #1
 8006618:	6830      	ldr	r0, [r6, #0]
 800661a:	f8c4 906c 	str.w	r9, [r4, #108]	; 0x6c
 800661e:	4669      	mov	r1, sp
 8006620:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8006624:	f8cd 900c 	str.w	r9, [sp, #12]
 8006628:	f8ad 3000 	strh.w	r3, [sp]
 800662c:	f88d 2002 	strb.w	r2, [sp, #2]
 8006630:	f004 fca0 	bl	800af74 <acc_cpd_linear_sweep_update_program>
 8006634:	2800      	cmp	r0, #0
 8006636:	d1df      	bne.n	80065f8 <start+0xa0>
 8006638:	2500      	movs	r5, #0
 800663a:	4628      	mov	r0, r5
 800663c:	b005      	add	sp, #20
 800663e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006642:	bf00      	nop
 8006644:	200004c0 	.word	0x200004c0
 8006648:	0800e9ec 	.word	0x0800e9ec
 800664c:	0800e91c 	.word	0x0800e91c
 8006650:	0800ea14 	.word	0x0800ea14
 8006654:	0800ea30 	.word	0x0800ea30
 8006658:	0800ea54 	.word	0x0800ea54

0800665c <acc_radar_engine_linear_create>:
 800665c:	b538      	push	{r3, r4, r5, lr}
 800665e:	4a11      	ldr	r2, [pc, #68]	; (80066a4 <acc_radar_engine_linear_create+0x48>)
 8006660:	4604      	mov	r4, r0
 8006662:	460d      	mov	r5, r1
 8006664:	f44f 7393 	mov.w	r3, #294	; 0x126
 8006668:	21d4      	movs	r1, #212	; 0xd4
 800666a:	2001      	movs	r0, #1
 800666c:	f7ff f8a8 	bl	80057c0 <acc_rss_integration_mem_calloc_debug>
 8006670:	6160      	str	r0, [r4, #20]
 8006672:	b1a8      	cbz	r0, 80066a0 <acc_radar_engine_linear_create+0x44>
 8006674:	4628      	mov	r0, r5
 8006676:	f7fe fc67 	bl	8004f48 <acc_base_configuration_sensor_get>
 800667a:	6020      	str	r0, [r4, #0]
 800667c:	4628      	mov	r0, r5
 800667e:	f7fe fe93 	bl	80053a8 <acc_base_configuration_asynchronous_measurement_get>
 8006682:	73a0      	strb	r0, [r4, #14]
 8006684:	4628      	mov	r0, r5
 8006686:	f7fe fcaf 	bl	8004fe8 <acc_base_configuration_power_save_mode_get>
 800668a:	fab0 f080 	clz	r0, r0
 800668e:	0940      	lsrs	r0, r0, #5
 8006690:	73e0      	strb	r0, [r4, #15]
 8006692:	4628      	mov	r0, r5
 8006694:	f000 f80a 	bl	80066ac <acc_radar_engine_common_get_timeout_ms>
 8006698:	4b03      	ldr	r3, [pc, #12]	; (80066a8 <acc_radar_engine_linear_create+0x4c>)
 800669a:	6120      	str	r0, [r4, #16]
 800669c:	61a3      	str	r3, [r4, #24]
 800669e:	2001      	movs	r0, #1
 80066a0:	bd38      	pop	{r3, r4, r5, pc}
 80066a2:	bf00      	nop
 80066a4:	0800e91c 	.word	0x0800e91c
 80066a8:	0800ea78 	.word	0x0800ea78

080066ac <acc_radar_engine_common_get_timeout_ms>:
 80066ac:	b510      	push	{r4, lr}
 80066ae:	4604      	mov	r4, r0
 80066b0:	f7fe fd64 	bl	800517c <acc_base_configuration_repetition_mode_get>
 80066b4:	2801      	cmp	r0, #1
 80066b6:	d00d      	beq.n	80066d4 <acc_radar_engine_common_get_timeout_ms+0x28>
 80066b8:	4620      	mov	r0, r4
 80066ba:	f7fe fd67 	bl	800518c <acc_base_configuration_update_rate_get>
 80066be:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80066dc <acc_radar_engine_common_get_timeout_ms+0x30>
 80066c2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80066c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80066ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066ce:	ee17 0a90 	vmov	r0, s15
 80066d2:	bd10      	pop	{r4, pc}
 80066d4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80066d8:	bd10      	pop	{r4, pc}
 80066da:	bf00      	nop
 80066dc:	44fa0000 	.word	0x44fa0000

080066e0 <acc_radar_engine_common_frequency_to_main_clk>:
 80066e0:	b538      	push	{r3, r4, r5, lr}
 80066e2:	ed2d 8b02 	vpush	{d8}
 80066e6:	4604      	mov	r4, r0
 80066e8:	eeb0 8a40 	vmov.f32	s16, s0
 80066ec:	460d      	mov	r5, r1
 80066ee:	f7fe ffe7 	bl	80056c0 <acc_rss_integration_get_sensor_reference_frequency>
 80066f2:	eec0 7a08 	vdiv.f32	s15, s0, s16
 80066f6:	ecbd 8b02 	vpop	{d8}
 80066fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066fe:	ee17 3a90 	vmov	r3, s15
 8006702:	0c1a      	lsrs	r2, r3, #16
 8006704:	b29b      	uxth	r3, r3
 8006706:	602a      	str	r2, [r5, #0]
 8006708:	6023      	str	r3, [r4, #0]
 800670a:	bd38      	pop	{r3, r4, r5, pc}

0800670c <get_dt>:
 800670c:	b508      	push	{r3, lr}
 800670e:	ed2d 8b02 	vpush	{d8}
 8006712:	ee08 0a10 	vmov	s16, r0
 8006716:	f7fe ffd3 	bl	80056c0 <acc_rss_integration_get_sensor_reference_frequency>
 800671a:	eef0 8a40 	vmov.f32	s17, s0
 800671e:	f001 fd1f 	bl	8008160 <acc_cpd_pll_divisors_ref_divisor>
 8006722:	ee28 0a80 	vmul.f32	s0, s17, s0
 8006726:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800672a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800672e:	eeb8 8a48 	vcvt.f32.u32	s16, s16
 8006732:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8006736:	ecbd 8b02 	vpop	{d8}
 800673a:	bd08      	pop	{r3, pc}

0800673c <points_to_meter>:
 800673c:	b508      	push	{r3, lr}
 800673e:	4603      	mov	r3, r0
 8006740:	ed2d 8b02 	vpush	{d8}
 8006744:	4608      	mov	r0, r1
 8006746:	ee08 3a10 	vmov	s16, r3
 800674a:	f7ff ffdf 	bl	800670c <get_dt>
 800674e:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8006752:	eddf 7a06 	vldr	s15, [pc, #24]	; 800676c <points_to_meter+0x30>
 8006756:	ee28 8a00 	vmul.f32	s16, s16, s0
 800675a:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800675e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8006762:	ee28 0a00 	vmul.f32	s0, s16, s0
 8006766:	ecbd 8b02 	vpop	{d8}
 800676a:	bd08      	pop	{r3, pc}
 800676c:	4d8ef3c2 	.word	0x4d8ef3c2

08006770 <acc_radar_engine_common_sweep_w_dly_initialize_range>:
 8006770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006774:	ed2d 8b04 	vpush	{d8-d9}
 8006778:	b089      	sub	sp, #36	; 0x24
 800677a:	4689      	mov	r9, r1
 800677c:	9e16      	ldr	r6, [sp, #88]	; 0x58
 800677e:	f89d a05c 	ldrb.w	sl, [sp, #92]	; 0x5c
 8006782:	f9bd b05e 	ldrsh.w	fp, [sp, #94]	; 0x5e
 8006786:	9306      	str	r3, [sp, #24]
 8006788:	4617      	mov	r7, r2
 800678a:	4680      	mov	r8, r0
 800678c:	f7fe fd8a 	bl	80052a4 <acc_base_configuration_use_point_range_get>
 8006790:	2800      	cmp	r0, #0
 8006792:	d03d      	beq.n	8006810 <acc_radar_engine_common_sweep_w_dly_initialize_range+0xa0>
 8006794:	4640      	mov	r0, r8
 8006796:	f7fe fcdd 	bl	8005154 <acc_base_configuration_point_start_get>
 800679a:	4605      	mov	r5, r0
 800679c:	4640      	mov	r0, r8
 800679e:	f7fe fce3 	bl	8005168 <acc_base_configuration_point_length_get>
 80067a2:	182c      	adds	r4, r5, r0
 80067a4:	f1ba 0f00 	cmp.w	sl, #0
 80067a8:	d02f      	beq.n	800680a <acc_radar_engine_common_sweep_w_dly_initialize_range+0x9a>
 80067aa:	f06f 020b 	mvn.w	r2, #11
 80067ae:	4593      	cmp	fp, r2
 80067b0:	bfb8      	it	lt
 80067b2:	4693      	movlt	fp, r2
 80067b4:	f898 202e 	ldrb.w	r2, [r8, #46]	; 0x2e
 80067b8:	b31a      	cbz	r2, 8006802 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x92>
 80067ba:	f8b8 3030 	ldrh.w	r3, [r8, #48]	; 0x30
 80067be:	9307      	str	r3, [sp, #28]
 80067c0:	4640      	mov	r0, r8
 80067c2:	f7fe fdbf 	bl	8005344 <acc_base_configuration_downsampling_factor_get>
 80067c6:	2801      	cmp	r0, #1
 80067c8:	4682      	mov	sl, r0
 80067ca:	d90a      	bls.n	80067e2 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x72>
 80067cc:	2802      	cmp	r0, #2
 80067ce:	f000 8121 	beq.w	8006a14 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2a4>
 80067d2:	1b60      	subs	r0, r4, r5
 80067d4:	fb90 f2fa 	sdiv	r2, r0, sl
 80067d8:	fb0a 0a12 	mls	sl, sl, r2, r0
 80067dc:	f1ba 0f00 	cmp.w	sl, #0
 80067e0:	dc55      	bgt.n	800688e <acc_radar_engine_common_sweep_w_dly_initialize_range+0x11e>
 80067e2:	42ac      	cmp	r4, r5
 80067e4:	da61      	bge.n	80068aa <acc_radar_engine_common_sweep_w_dly_initialize_range+0x13a>
 80067e6:	4b9b      	ldr	r3, [pc, #620]	; (8006a54 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2e4>)
 80067e8:	4a9b      	ldr	r2, [pc, #620]	; (8006a58 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2e8>)
 80067ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067ec:	499b      	ldr	r1, [pc, #620]	; (8006a5c <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2ec>)
 80067ee:	2000      	movs	r0, #0
 80067f0:	4798      	blx	r3
 80067f2:	f04f 0a00 	mov.w	sl, #0
 80067f6:	4650      	mov	r0, sl
 80067f8:	b009      	add	sp, #36	; 0x24
 80067fa:	ecbd 8b04 	vpop	{d8-d9}
 80067fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006802:	f898 3032 	ldrb.w	r3, [r8, #50]	; 0x32
 8006806:	9307      	str	r3, [sp, #28]
 8006808:	e7da      	b.n	80067c0 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x50>
 800680a:	f06f 0b0b 	mvn.w	fp, #11
 800680e:	e7d1      	b.n	80067b4 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x44>
 8006810:	4640      	mov	r0, r8
 8006812:	f7fe fba9 	bl	8004f68 <acc_base_configuration_requested_start_get>
 8006816:	4640      	mov	r0, r8
 8006818:	eeb0 8a40 	vmov.f32	s16, s0
 800681c:	f7fe fbc0 	bl	8004fa0 <acc_base_configuration_requested_length_get>
 8006820:	4630      	mov	r0, r6
 8006822:	ee78 8a00 	vadd.f32	s17, s16, s0
 8006826:	f7ff ff71 	bl	800670c <get_dt>
 800682a:	eddf 9a8d 	vldr	s19, [pc, #564]	; 8006a60 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2f0>
 800682e:	ee38 7a08 	vadd.f32	s14, s16, s16
 8006832:	ee20 0a29 	vmul.f32	s0, s0, s19
 8006836:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800683a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800683e:	4630      	mov	r0, r6
 8006840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006844:	eebe 8a00 	vmov.f32	s16, #224	; 0xbf000000 -0.5
 8006848:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 800684c:	bf54      	ite	pl
 800684e:	eeb0 7a49 	vmovpl.f32	s14, s18
 8006852:	eeb0 7a48 	vmovmi.f32	s14, s16
 8006856:	ee77 7a87 	vadd.f32	s15, s15, s14
 800685a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800685e:	ee17 5a90 	vmov	r5, s15
 8006862:	f7ff ff53 	bl	800670c <get_dt>
 8006866:	ee38 7aa8 	vadd.f32	s14, s17, s17
 800686a:	ee20 0a29 	vmul.f32	s0, s0, s19
 800686e:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8006872:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8006876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800687a:	bf58      	it	pl
 800687c:	eeb0 8a49 	vmovpl.f32	s16, s18
 8006880:	ee37 8a88 	vadd.f32	s16, s15, s16
 8006884:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8006888:	ee17 4a90 	vmov	r4, s15
 800688c:	e78a      	b.n	80067a4 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x34>
 800688e:	f7fe ffc7 	bl	8005820 <acc_rss_integration_log_level>
 8006892:	2801      	cmp	r0, #1
 8006894:	d905      	bls.n	80068a2 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x132>
 8006896:	496f      	ldr	r1, [pc, #444]	; (8006a54 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2e4>)
 8006898:	4a72      	ldr	r2, [pc, #456]	; (8006a64 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2f4>)
 800689a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800689c:	496f      	ldr	r1, [pc, #444]	; (8006a5c <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2ec>)
 800689e:	2002      	movs	r0, #2
 80068a0:	4798      	blx	r3
 80068a2:	eba4 040a 	sub.w	r4, r4, sl
 80068a6:	42ac      	cmp	r4, r5
 80068a8:	db9d      	blt.n	80067e6 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x76>
 80068aa:	4640      	mov	r0, r8
 80068ac:	f7fe fd36 	bl	800531c <acc_base_configuration_ignore_range_limits_get>
 80068b0:	4682      	mov	sl, r0
 80068b2:	b970      	cbnz	r0, 80068d2 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x162>
 80068b4:	fb0b fb06 	mul.w	fp, fp, r6
 80068b8:	45ab      	cmp	fp, r5
 80068ba:	f300 80d9 	bgt.w	8006a70 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x300>
 80068be:	9b07      	ldr	r3, [sp, #28]
 80068c0:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80068c4:	f1ab 0b4b 	sub.w	fp, fp, #75	; 0x4b
 80068c8:	fb06 fb0b 	mul.w	fp, r6, fp
 80068cc:	455c      	cmp	r4, fp
 80068ce:	f300 8171 	bgt.w	8006bb4 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x444>
 80068d2:	4640      	mov	r0, r8
 80068d4:	f7fe fd36 	bl	8005344 <acc_base_configuration_downsampling_factor_get>
 80068d8:	f898 202e 	ldrb.w	r2, [r8, #46]	; 0x2e
 80068dc:	4683      	mov	fp, r0
 80068de:	2a00      	cmp	r2, #0
 80068e0:	f000 80a7 	beq.w	8006a32 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2c2>
 80068e4:	f8b8 e030 	ldrh.w	lr, [r8, #48]	; 0x30
 80068e8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80068ea:	fb95 f1fb 	sdiv	r1, r5, fp
 80068ee:	eb04 72d4 	add.w	r2, r4, r4, lsr #31
 80068f2:	fb92 f2f6 	sdiv	r2, r2, r6
 80068f6:	eba2 72d4 	sub.w	r2, r2, r4, lsr #31
 80068fa:	3201      	adds	r2, #1
 80068fc:	eb05 70d5 	add.w	r0, r5, r5, lsr #31
 8006900:	fb90 f0f6 	sdiv	r0, r0, r6
 8006904:	eba0 70d5 	sub.w	r0, r0, r5, lsr #31
 8006908:	1a12      	subs	r2, r2, r0
 800690a:	fb0b 5111 	mls	r1, fp, r1, r5
 800690e:	b292      	uxth	r2, r2
 8006910:	4459      	add	r1, fp
 8006912:	fbb2 fcf3 	udiv	ip, r2, r3
 8006916:	80fa      	strh	r2, [r7, #6]
 8006918:	fb03 2a1c 	mls	sl, r3, ip, r2
 800691c:	fb91 f2fb 	sdiv	r2, r1, fp
 8006920:	fb0b 1112 	mls	r1, fp, r2, r1
 8006924:	f8a7 e000 	strh.w	lr, [r7]
 8006928:	80b8      	strh	r0, [r7, #4]
 800692a:	fa1f fc8c 	uxth.w	ip, ip
 800692e:	8079      	strh	r1, [r7, #2]
 8006930:	f1ba 0f00 	cmp.w	sl, #0
 8006934:	d001      	beq.n	800693a <acc_radar_engine_common_sweep_w_dly_initialize_range+0x1ca>
 8006936:	f10c 0c01 	add.w	ip, ip, #1
 800693a:	f8a7 c008 	strh.w	ip, [r7, #8]
 800693e:	4640      	mov	r0, r8
 8006940:	f7fe fb52 	bl	8004fe8 <acc_base_configuration_power_save_mode_get>
 8006944:	4602      	mov	r2, r0
 8006946:	4640      	mov	r0, r8
 8006948:	9207      	str	r2, [sp, #28]
 800694a:	f7fe fc17 	bl	800517c <acc_base_configuration_repetition_mode_get>
 800694e:	9a07      	ldr	r2, [sp, #28]
 8006950:	2a04      	cmp	r2, #4
 8006952:	d001      	beq.n	8006958 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x1e8>
 8006954:	2801      	cmp	r0, #1
 8006956:	d003      	beq.n	8006960 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x1f0>
 8006958:	88fb      	ldrh	r3, [r7, #6]
 800695a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800695c:	4293      	cmp	r3, r2
 800695e:	d876      	bhi.n	8006a4e <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2de>
 8006960:	4630      	mov	r0, r6
 8006962:	f7ff fed3 	bl	800670c <get_dt>
 8006966:	ee07 ba90 	vmov	s15, fp
 800696a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800696e:	4631      	mov	r1, r6
 8006970:	ee27 0a80 	vmul.f32	s0, s15, s0
 8006974:	4628      	mov	r0, r5
 8006976:	ed89 0a03 	vstr	s0, [r9, #12]
 800697a:	f7ff fedf 	bl	800673c <points_to_meter>
 800697e:	4631      	mov	r1, r6
 8006980:	4620      	mov	r0, r4
 8006982:	ed89 0a00 	vstr	s0, [r9]
 8006986:	f7ff fed9 	bl	800673c <points_to_meter>
 800698a:	fbb6 f2fb 	udiv	r2, r6, fp
 800698e:	fb95 fcf6 	sdiv	ip, r5, r6
 8006992:	edd9 7a00 	vldr	s15, [r9]
 8006996:	88fb      	ldrh	r3, [r7, #6]
 8006998:	8939      	ldrh	r1, [r7, #8]
 800699a:	9806      	ldr	r0, [sp, #24]
 800699c:	ed89 0a02 	vstr	s0, [r9, #8]
 80069a0:	1b64      	subs	r4, r4, r5
 80069a2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80069a6:	fbb4 f4fb 	udiv	r4, r4, fp
 80069aa:	3401      	adds	r4, #1
 80069ac:	b2a4      	uxth	r4, r4
 80069ae:	f8a9 4016 	strh.w	r4, [r9, #22]
 80069b2:	ed89 0a01 	vstr	s0, [r9, #4]
 80069b6:	f8a9 1018 	strh.w	r1, [r9, #24]
 80069ba:	80c2      	strh	r2, [r0, #6]
 80069bc:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80069be:	8084      	strh	r4, [r0, #4]
 80069c0:	fb06 551c 	mls	r5, r6, ip, r5
 80069c4:	4435      	add	r5, r6
 80069c6:	429a      	cmp	r2, r3
 80069c8:	fb95 fcf6 	sdiv	ip, r5, r6
 80069cc:	8103      	strh	r3, [r0, #8]
 80069ce:	fb06 551c 	mls	r5, r6, ip, r5
 80069d2:	8201      	strh	r1, [r0, #16]
 80069d4:	fb95 f5fb 	sdiv	r5, r5, fp
 80069d8:	fb03 f606 	mul.w	r6, r3, r6
 80069dc:	8045      	strh	r5, [r0, #2]
 80069de:	fbb6 fbfb 	udiv	fp, r6, fp
 80069e2:	f8a0 b000 	strh.w	fp, [r0]
 80069e6:	d227      	bcs.n	8006a38 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2c8>
 80069e8:	b292      	uxth	r2, r2
 80069ea:	8282      	strh	r2, [r0, #20]
 80069ec:	f1ba 0f00 	cmp.w	sl, #0
 80069f0:	d006      	beq.n	8006a00 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x290>
 80069f2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80069f4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80069f6:	fbb3 f2f2 	udiv	r2, r3, r2
 80069fa:	fb01 3312 	mls	r3, r1, r2, r3
 80069fe:	b29a      	uxth	r2, r3
 8006a00:	9b06      	ldr	r3, [sp, #24]
 8006a02:	f04f 0a01 	mov.w	sl, #1
 8006a06:	4650      	mov	r0, sl
 8006a08:	82da      	strh	r2, [r3, #22]
 8006a0a:	b009      	add	sp, #36	; 0x24
 8006a0c:	ecbd 8b04 	vpop	{d8-d9}
 8006a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a14:	07eb      	lsls	r3, r5, #31
 8006a16:	f53f aedc 	bmi.w	80067d2 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x62>
 8006a1a:	f7fe ff01 	bl	8005820 <acc_rss_integration_log_level>
 8006a1e:	2801      	cmp	r0, #1
 8006a20:	d905      	bls.n	8006a2e <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2be>
 8006a22:	490c      	ldr	r1, [pc, #48]	; (8006a54 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2e4>)
 8006a24:	4a10      	ldr	r2, [pc, #64]	; (8006a68 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2f8>)
 8006a26:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8006a28:	490c      	ldr	r1, [pc, #48]	; (8006a5c <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2ec>)
 8006a2a:	4650      	mov	r0, sl
 8006a2c:	4798      	blx	r3
 8006a2e:	3501      	adds	r5, #1
 8006a30:	e6cf      	b.n	80067d2 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x62>
 8006a32:	f898 e032 	ldrb.w	lr, [r8, #50]	; 0x32
 8006a36:	e757      	b.n	80068e8 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x178>
 8006a38:	9a06      	ldr	r2, [sp, #24]
 8006a3a:	f04f 0a01 	mov.w	sl, #1
 8006a3e:	4650      	mov	r0, sl
 8006a40:	8293      	strh	r3, [r2, #20]
 8006a42:	82d3      	strh	r3, [r2, #22]
 8006a44:	b009      	add	sp, #36	; 0x24
 8006a46:	ecbd 8b04 	vpop	{d8-d9}
 8006a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a4e:	4b01      	ldr	r3, [pc, #4]	; (8006a54 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2e4>)
 8006a50:	4a06      	ldr	r2, [pc, #24]	; (8006a6c <acc_radar_engine_common_sweep_w_dly_initialize_range+0x2fc>)
 8006a52:	e6ca      	b.n	80067ea <acc_radar_engine_common_sweep_w_dly_initialize_range+0x7a>
 8006a54:	200004c0 	.word	0x200004c0
 8006a58:	0800eb30 	.word	0x0800eb30
 8006a5c:	0800eadc 	.word	0x0800eadc
 8006a60:	4d8ef3c2 	.word	0x4d8ef3c2
 8006a64:	0800eafc 	.word	0x0800eafc
 8006a68:	0800eaa4 	.word	0x0800eaa4
 8006a6c:	0800ebe0 	.word	0x0800ebe0
 8006a70:	4b9d      	ldr	r3, [pc, #628]	; (8006ce8 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x578>)
 8006a72:	4c9e      	ldr	r4, [pc, #632]	; (8006cec <acc_radar_engine_common_sweep_w_dly_initialize_range+0x57c>)
 8006a74:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 8006a76:	4631      	mov	r1, r6
 8006a78:	4628      	mov	r0, r5
 8006a7a:	f7ff fe5f 	bl	800673c <points_to_meter>
 8006a7e:	4b9c      	ldr	r3, [pc, #624]	; (8006cf0 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x580>)
 8006a80:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a88:	4631      	mov	r1, r6
 8006a8a:	4628      	mov	r0, r5
 8006a8c:	bf54      	ite	pl
 8006a8e:	4698      	movpl	r8, r3
 8006a90:	46a0      	movmi	r8, r4
 8006a92:	f7ff fe53 	bl	800673c <points_to_meter>
 8006a96:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a9e:	eddf 7a95 	vldr	s15, [pc, #596]	; 8006cf4 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x584>
 8006aa2:	bf48      	it	mi
 8006aa4:	eeb1 0a40 	vnegmi.f32	s0, s0
 8006aa8:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006aac:	4628      	mov	r0, r5
 8006aae:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8006ab2:	4631      	mov	r1, r6
 8006ab4:	ee17 5a90 	vmov	r5, s15
 8006ab8:	f7ff fe40 	bl	800673c <points_to_meter>
 8006abc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ac4:	eddf 7a8b 	vldr	s15, [pc, #556]	; 8006cf4 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x584>
 8006ac8:	ed9f 6a8a 	vldr	s12, [pc, #552]	; 8006cf4 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x584>
 8006acc:	eddf 6a8a 	vldr	s13, [pc, #552]	; 8006cf8 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x588>
 8006ad0:	bf48      	it	mi
 8006ad2:	eeb1 0a40 	vnegmi.f32	s0, s0
 8006ad6:	ee70 7a27 	vadd.f32	s15, s0, s15
 8006ada:	4631      	mov	r1, r6
 8006adc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ae4:	bf4c      	ite	mi
 8006ae6:	eeb1 7a67 	vnegmi.f32	s14, s15
 8006aea:	eeb0 7a67 	vmovpl.f32	s14, s15
 8006aee:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006af2:	4658      	mov	r0, fp
 8006af4:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8006af8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8006afc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006b00:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006b04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b08:	ee17 4a90 	vmov	r4, s15
 8006b0c:	f7ff fe16 	bl	800673c <points_to_meter>
 8006b10:	4b77      	ldr	r3, [pc, #476]	; (8006cf0 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x580>)
 8006b12:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8006cec <acc_radar_engine_common_sweep_w_dly_initialize_range+0x57c>
 8006b16:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b1e:	4631      	mov	r1, r6
 8006b20:	4658      	mov	r0, fp
 8006b22:	bf54      	ite	pl
 8006b24:	4699      	movpl	r9, r3
 8006b26:	46e1      	movmi	r9, ip
 8006b28:	f7ff fe08 	bl	800673c <points_to_meter>
 8006b2c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b34:	eddf 7a6f 	vldr	s15, [pc, #444]	; 8006cf4 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x584>
 8006b38:	bf48      	it	mi
 8006b3a:	eeb1 0a40 	vnegmi.f32	s0, s0
 8006b3e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006b42:	4631      	mov	r1, r6
 8006b44:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8006b48:	4658      	mov	r0, fp
 8006b4a:	ee17 6a90 	vmov	r6, s15
 8006b4e:	f7ff fdf5 	bl	800673c <points_to_meter>
 8006b52:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b5a:	eddf 7a66 	vldr	s15, [pc, #408]	; 8006cf4 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x584>
 8006b5e:	ed9f 6a65 	vldr	s12, [pc, #404]	; 8006cf4 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x584>
 8006b62:	eddf 6a65 	vldr	s13, [pc, #404]	; 8006cf8 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x588>
 8006b66:	4a65      	ldr	r2, [pc, #404]	; (8006cfc <acc_radar_engine_common_sweep_w_dly_initialize_range+0x58c>)
 8006b68:	9603      	str	r6, [sp, #12]
 8006b6a:	bf48      	it	mi
 8006b6c:	eeb1 0a40 	vnegmi.f32	s0, s0
 8006b70:	ee70 7a27 	vadd.f32	s15, s0, s15
 8006b74:	f8cd 9008 	str.w	r9, [sp, #8]
 8006b78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b80:	bf4c      	ite	mi
 8006b82:	eeb1 7a67 	vnegmi.f32	s14, s15
 8006b86:	eeb0 7a67 	vmovpl.f32	s14, s15
 8006b8a:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006b8e:	9401      	str	r4, [sp, #4]
 8006b90:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8006b94:	9500      	str	r5, [sp, #0]
 8006b96:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8006b9a:	4643      	mov	r3, r8
 8006b9c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006ba0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006ba4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ba8:	4955      	ldr	r1, [pc, #340]	; (8006d00 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x590>)
 8006baa:	edcd 7a04 	vstr	s15, [sp, #16]
 8006bae:	2000      	movs	r0, #0
 8006bb0:	47b8      	blx	r7
 8006bb2:	e620      	b.n	80067f6 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x86>
 8006bb4:	4b4c      	ldr	r3, [pc, #304]	; (8006ce8 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x578>)
 8006bb6:	4631      	mov	r1, r6
 8006bb8:	4620      	mov	r0, r4
 8006bba:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 8006bbc:	f7ff fdbe 	bl	800673c <points_to_meter>
 8006bc0:	4a4a      	ldr	r2, [pc, #296]	; (8006cec <acc_radar_engine_common_sweep_w_dly_initialize_range+0x57c>)
 8006bc2:	4b4b      	ldr	r3, [pc, #300]	; (8006cf0 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x580>)
 8006bc4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bcc:	4631      	mov	r1, r6
 8006bce:	4620      	mov	r0, r4
 8006bd0:	bf4c      	ite	mi
 8006bd2:	4690      	movmi	r8, r2
 8006bd4:	4698      	movpl	r8, r3
 8006bd6:	f7ff fdb1 	bl	800673c <points_to_meter>
 8006bda:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006be2:	eddf 7a44 	vldr	s15, [pc, #272]	; 8006cf4 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x584>
 8006be6:	bf48      	it	mi
 8006be8:	eeb1 0a40 	vnegmi.f32	s0, s0
 8006bec:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006bf0:	4620      	mov	r0, r4
 8006bf2:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8006bf6:	4631      	mov	r1, r6
 8006bf8:	ee17 5a90 	vmov	r5, s15
 8006bfc:	f7ff fd9e 	bl	800673c <points_to_meter>
 8006c00:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006c04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c08:	eddf 7a3a 	vldr	s15, [pc, #232]	; 8006cf4 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x584>
 8006c0c:	ed9f 6a39 	vldr	s12, [pc, #228]	; 8006cf4 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x584>
 8006c10:	eddf 6a39 	vldr	s13, [pc, #228]	; 8006cf8 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x588>
 8006c14:	bf48      	it	mi
 8006c16:	eeb1 0a40 	vnegmi.f32	s0, s0
 8006c1a:	ee70 7a27 	vadd.f32	s15, s0, s15
 8006c1e:	4631      	mov	r1, r6
 8006c20:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c28:	bf4c      	ite	mi
 8006c2a:	eeb1 7a67 	vnegmi.f32	s14, s15
 8006c2e:	eeb0 7a67 	vmovpl.f32	s14, s15
 8006c32:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006c36:	4658      	mov	r0, fp
 8006c38:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8006c3c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8006c40:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006c44:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006c48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c4c:	ee17 4a90 	vmov	r4, s15
 8006c50:	f7ff fd74 	bl	800673c <points_to_meter>
 8006c54:	4a25      	ldr	r2, [pc, #148]	; (8006cec <acc_radar_engine_common_sweep_w_dly_initialize_range+0x57c>)
 8006c56:	4b26      	ldr	r3, [pc, #152]	; (8006cf0 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x580>)
 8006c58:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c60:	4631      	mov	r1, r6
 8006c62:	4658      	mov	r0, fp
 8006c64:	bf4c      	ite	mi
 8006c66:	4691      	movmi	r9, r2
 8006c68:	4699      	movpl	r9, r3
 8006c6a:	f7ff fd67 	bl	800673c <points_to_meter>
 8006c6e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c76:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8006cf4 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x584>
 8006c7a:	bf48      	it	mi
 8006c7c:	eeb1 0a40 	vnegmi.f32	s0, s0
 8006c80:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006c84:	4631      	mov	r1, r6
 8006c86:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8006c8a:	4658      	mov	r0, fp
 8006c8c:	ee17 6a90 	vmov	r6, s15
 8006c90:	f7ff fd54 	bl	800673c <points_to_meter>
 8006c94:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c9c:	eddf 7a15 	vldr	s15, [pc, #84]	; 8006cf4 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x584>
 8006ca0:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8006cf4 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x584>
 8006ca4:	eddf 6a14 	vldr	s13, [pc, #80]	; 8006cf8 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x588>
 8006ca8:	4a16      	ldr	r2, [pc, #88]	; (8006d04 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x594>)
 8006caa:	9603      	str	r6, [sp, #12]
 8006cac:	bf48      	it	mi
 8006cae:	eeb1 0a40 	vnegmi.f32	s0, s0
 8006cb2:	ee70 7a27 	vadd.f32	s15, s0, s15
 8006cb6:	f8cd 9008 	str.w	r9, [sp, #8]
 8006cba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cc2:	bf4c      	ite	mi
 8006cc4:	eeb1 7a67 	vnegmi.f32	s14, s15
 8006cc8:	eeb0 7a67 	vmovpl.f32	s14, s15
 8006ccc:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006cd0:	9401      	str	r4, [sp, #4]
 8006cd2:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8006cd6:	9500      	str	r5, [sp, #0]
 8006cd8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8006cdc:	4643      	mov	r3, r8
 8006cde:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006ce2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006ce6:	e75d      	b.n	8006ba4 <acc_radar_engine_common_sweep_w_dly_initialize_range+0x434>
 8006ce8:	200004c0 	.word	0x200004c0
 8006cec:	0800eaa0 	.word	0x0800eaa0
 8006cf0:	0800fb28 	.word	0x0800fb28
 8006cf4:	350637bd 	.word	0x350637bd
 8006cf8:	49742400 	.word	0x49742400
 8006cfc:	0800eb60 	.word	0x0800eb60
 8006d00:	0800eadc 	.word	0x0800eadc
 8006d04:	0800eba0 	.word	0x0800eba0

08006d08 <acc_radar_engine_common_sweep_w_dly_stitching_required>:
 8006d08:	8900      	ldrh	r0, [r0, #8]
 8006d0a:	2801      	cmp	r0, #1
 8006d0c:	bf94      	ite	ls
 8006d0e:	2000      	movls	r0, #0
 8006d10:	2001      	movhi	r0, #1
 8006d12:	4770      	bx	lr

08006d14 <internal_buffer_processed_read>:
 8006d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d18:	b085      	sub	sp, #20
 8006d1a:	461f      	mov	r7, r3
 8006d1c:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
 8006d20:	9101      	str	r1, [sp, #4]
 8006d22:	4682      	mov	sl, r0
 8006d24:	4689      	mov	r9, r1
 8006d26:	4615      	mov	r5, r2
 8006d28:	f7fe fcd0 	bl	80056cc <acc_rss_integration_get_max_spi_transfer_size>
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8006d32:	9302      	str	r3, [sp, #8]
 8006d34:	2f00      	cmp	r7, #0
 8006d36:	d03d      	beq.n	8006db4 <internal_buffer_processed_read+0xa0>
 8006d38:	429c      	cmp	r4, r3
 8006d3a:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8006d3e:	bf14      	ite	ne
 8006d40:	f44f 4be0 	movne.w	fp, #28672	; 0x7000
 8006d44:	f44f 4b00 	moveq.w	fp, #32768	; 0x8000
 8006d48:	f1a0 0803 	sub.w	r8, r0, #3
 8006d4c:	9300      	str	r3, [sp, #0]
 8006d4e:	fa0f fb8b 	sxth.w	fp, fp
 8006d52:	e024      	b.n	8006d9e <internal_buffer_processed_read+0x8a>
 8006d54:	b2a6      	uxth	r6, r4
 8006d56:	9900      	ldr	r1, [sp, #0]
 8006d58:	f8a9 1004 	strh.w	r1, [r9, #4]
 8006d5c:	1e72      	subs	r2, r6, #1
 8006d5e:	ea4b 0305 	orr.w	r3, fp, r5
 8006d62:	f8a9 2002 	strh.w	r2, [r9, #2]
 8006d66:	f8a9 3000 	strh.w	r3, [r9]
 8006d6a:	4649      	mov	r1, r9
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	4650      	mov	r0, sl
 8006d70:	1ce2      	adds	r2, r4, #3
 8006d72:	f7fe fcdb 	bl	800572c <acc_rss_integration_sensor_device_transfer>
 8006d76:	9802      	ldr	r0, [sp, #8]
 8006d78:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8006d7c:	f8c9 0000 	str.w	r0, [r9]
 8006d80:	f8a9 3004 	strh.w	r3, [r9, #4]
 8006d84:	eb09 0944 	add.w	r9, r9, r4, lsl #1
 8006d88:	442e      	add	r6, r5
 8006d8a:	f8d9 0000 	ldr.w	r0, [r9]
 8006d8e:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 8006d92:	9002      	str	r0, [sp, #8]
 8006d94:	1b3f      	subs	r7, r7, r4
 8006d96:	b2b5      	uxth	r5, r6
 8006d98:	f8ad 300c 	strh.w	r3, [sp, #12]
 8006d9c:	d00a      	beq.n	8006db4 <internal_buffer_processed_read+0xa0>
 8006d9e:	45b8      	cmp	r8, r7
 8006da0:	4644      	mov	r4, r8
 8006da2:	bf28      	it	cs
 8006da4:	463c      	movcs	r4, r7
 8006da6:	45b8      	cmp	r8, r7
 8006da8:	d2d4      	bcs.n	8006d54 <internal_buffer_processed_read+0x40>
 8006daa:	e000      	b.n	8006dae <internal_buffer_processed_read+0x9a>
 8006dac:	3c01      	subs	r4, #1
 8006dae:	07e3      	lsls	r3, r4, #31
 8006db0:	d4fc      	bmi.n	8006dac <internal_buffer_processed_read+0x98>
 8006db2:	e7cf      	b.n	8006d54 <internal_buffer_processed_read+0x40>
 8006db4:	9801      	ldr	r0, [sp, #4]
 8006db6:	3006      	adds	r0, #6
 8006db8:	b005      	add	sp, #20
 8006dba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dbe:	bf00      	nop

08006dc0 <acc_sensor_r2_get_max_header_length>:
 8006dc0:	2003      	movs	r0, #3
 8006dc2:	4770      	bx	lr

08006dc4 <acc_sensor_r2_conf_write_instr>:
 8006dc4:	b510      	push	{r4, lr}
 8006dc6:	b084      	sub	sp, #16
 8006dc8:	f441 43a0 	orr.w	r3, r1, #20480	; 0x5000
 8006dcc:	4604      	mov	r4, r0
 8006dce:	9201      	str	r2, [sp, #4]
 8006dd0:	f10d 010a 	add.w	r1, sp, #10
 8006dd4:	a801      	add	r0, sp, #4
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	f8ad 3008 	strh.w	r3, [sp, #8]
 8006ddc:	f001 fa00 	bl	80081e0 <acc_utils_uint32_to_transfer_buffer>
 8006de0:	4620      	mov	r0, r4
 8006de2:	a902      	add	r1, sp, #8
 8006de4:	2300      	movs	r3, #0
 8006de6:	2203      	movs	r2, #3
 8006de8:	f7fe fca0 	bl	800572c <acc_rss_integration_sensor_device_transfer>
 8006dec:	b004      	add	sp, #16
 8006dee:	bd10      	pop	{r4, pc}

08006df0 <acc_sensor_r2_prepare_load_confmem>:
 8006df0:	0849      	lsrs	r1, r1, #1
 8006df2:	b538      	push	{r3, r4, r5, lr}
 8006df4:	6010      	str	r0, [r2, #0]
 8006df6:	461c      	mov	r4, r3
 8006df8:	6019      	str	r1, [r3, #0]
 8006dfa:	4615      	mov	r5, r2
 8006dfc:	f7fe fc66 	bl	80056cc <acc_rss_integration_get_max_spi_transfer_size>
 8006e00:	6821      	ldr	r1, [r4, #0]
 8006e02:	ebb1 0f50 	cmp.w	r1, r0, lsr #1
 8006e06:	d807      	bhi.n	8006e18 <acc_sensor_r2_prepare_load_confmem+0x28>
 8006e08:	682b      	ldr	r3, [r5, #0]
 8006e0a:	3901      	subs	r1, #1
 8006e0c:	f021 0101 	bic.w	r1, r1, #1
 8006e10:	3302      	adds	r3, #2
 8006e12:	602b      	str	r3, [r5, #0]
 8006e14:	6021      	str	r1, [r4, #0]
 8006e16:	bd38      	pop	{r3, r4, r5, pc}
 8006e18:	f7fe fc58 	bl	80056cc <acc_rss_integration_get_max_spi_transfer_size>
 8006e1c:	0841      	lsrs	r1, r0, #1
 8006e1e:	e7f3      	b.n	8006e08 <acc_sensor_r2_prepare_load_confmem+0x18>

08006e20 <acc_sensor_r2_load_confmem>:
 8006e20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006e24:	b083      	sub	sp, #12
 8006e26:	1c5d      	adds	r5, r3, #1
 8006e28:	4606      	mov	r6, r0
 8006e2a:	460c      	mov	r4, r1
 8006e2c:	4617      	mov	r7, r2
 8006e2e:	f7fe fcf7 	bl	8005820 <acc_rss_integration_log_level>
 8006e32:	2803      	cmp	r0, #3
 8006e34:	ea4f 0845 	mov.w	r8, r5, lsl #1
 8006e38:	d908      	bls.n	8006e4c <acc_sensor_r2_load_confmem+0x2c>
 8006e3a:	4b11      	ldr	r3, [pc, #68]	; (8006e80 <acc_sensor_r2_load_confmem+0x60>)
 8006e3c:	9400      	str	r4, [sp, #0]
 8006e3e:	f8d3 9034 	ldr.w	r9, [r3, #52]	; 0x34
 8006e42:	4a10      	ldr	r2, [pc, #64]	; (8006e84 <acc_sensor_r2_load_confmem+0x64>)
 8006e44:	4910      	ldr	r1, [pc, #64]	; (8006e88 <acc_sensor_r2_load_confmem+0x68>)
 8006e46:	4633      	mov	r3, r6
 8006e48:	2004      	movs	r0, #4
 8006e4a:	47c8      	blx	r9
 8006e4c:	f7fe fc3e 	bl	80056cc <acc_rss_integration_get_max_spi_transfer_size>
 8006e50:	4540      	cmp	r0, r8
 8006e52:	d208      	bcs.n	8006e66 <acc_sensor_r2_load_confmem+0x46>
 8006e54:	4b0a      	ldr	r3, [pc, #40]	; (8006e80 <acc_sensor_r2_load_confmem+0x60>)
 8006e56:	4a0d      	ldr	r2, [pc, #52]	; (8006e8c <acc_sensor_r2_load_confmem+0x6c>)
 8006e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e5a:	490b      	ldr	r1, [pc, #44]	; (8006e88 <acc_sensor_r2_load_confmem+0x68>)
 8006e5c:	2000      	movs	r0, #0
 8006e5e:	b003      	add	sp, #12
 8006e60:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006e64:	4718      	bx	r3
 8006e66:	f444 44a0 	orr.w	r4, r4, #20480	; 0x5000
 8006e6a:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8006e6e:	4639      	mov	r1, r7
 8006e70:	4630      	mov	r0, r6
 8006e72:	2300      	movs	r3, #0
 8006e74:	803c      	strh	r4, [r7, #0]
 8006e76:	b003      	add	sp, #12
 8006e78:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006e7c:	f7fe bc56 	b.w	800572c <acc_rss_integration_sensor_device_transfer>
 8006e80:	200004c0 	.word	0x200004c0
 8006e84:	0800ec1c 	.word	0x0800ec1c
 8006e88:	0800ec0c 	.word	0x0800ec0c
 8006e8c:	0800ec44 	.word	0x0800ec44

08006e90 <acc_sensor_r2_buffer_processed_verify_size>:
 8006e90:	3103      	adds	r1, #3
 8006e92:	ebb0 0f41 	cmp.w	r0, r1, lsl #1
 8006e96:	bf2c      	ite	cs
 8006e98:	2001      	movcs	r0, #1
 8006e9a:	2000      	movcc	r0, #0
 8006e9c:	4770      	bx	lr
 8006e9e:	bf00      	nop

08006ea0 <acc_sensor_r2_buffer_processed_read>:
 8006ea0:	b510      	push	{r4, lr}
 8006ea2:	b082      	sub	sp, #8
 8006ea4:	2400      	movs	r4, #0
 8006ea6:	9400      	str	r4, [sp, #0]
 8006ea8:	f7ff ff34 	bl	8006d14 <internal_buffer_processed_read>
 8006eac:	b002      	add	sp, #8
 8006eae:	bd10      	pop	{r4, pc}

08006eb0 <acc_sensor_manager_power_on_and_start_sensor>:
 8006eb0:	b570      	push	{r4, r5, r6, lr}
 8006eb2:	6986      	ldr	r6, [r0, #24]
 8006eb4:	4604      	mov	r4, r0
 8006eb6:	4630      	mov	r0, r6
 8006eb8:	f7fe fc0e 	bl	80056d8 <acc_rss_integration_sensor_device_power_on>
 8006ebc:	4b0a      	ldr	r3, [pc, #40]	; (8006ee8 <acc_sensor_manager_power_on_and_start_sensor+0x38>)
 8006ebe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006ec0:	6819      	ldr	r1, [r3, #0]
 8006ec2:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 8006ec6:	00db      	lsls	r3, r3, #3
 8006ec8:	3b48      	subs	r3, #72	; 0x48
 8006eca:	4419      	add	r1, r3
 8006ecc:	1d20      	adds	r0, r4, #4
 8006ece:	f000 fe5f 	bl	8007b90 <acc_sweep_manager_start>
 8006ed2:	4605      	mov	r5, r0
 8006ed4:	b118      	cbz	r0, 8006ede <acc_sensor_manager_power_on_and_start_sensor+0x2e>
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	70e3      	strb	r3, [r4, #3]
 8006eda:	4628      	mov	r0, r5
 8006edc:	bd70      	pop	{r4, r5, r6, pc}
 8006ede:	4630      	mov	r0, r6
 8006ee0:	f7fe fc00 	bl	80056e4 <acc_rss_integration_sensor_device_power_off>
 8006ee4:	4628      	mov	r0, r5
 8006ee6:	bd70      	pop	{r4, r5, r6, pc}
 8006ee8:	20000368 	.word	0x20000368

08006eec <calibrate_sensor>:
 8006eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ef0:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8006fc0 <calibrate_sensor+0xd4>
 8006ef4:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 8006fc4 <calibrate_sensor+0xd8>
 8006ef8:	f8d8 3000 	ldr.w	r3, [r8]
 8006efc:	eb00 04c0 	add.w	r4, r0, r0, lsl #3
 8006f00:	00e4      	lsls	r4, r4, #3
 8006f02:	3c48      	subs	r4, #72	; 0x48
 8006f04:	4423      	add	r3, r4
 8006f06:	f04f 0900 	mov.w	r9, #0
 8006f0a:	b085      	sub	sp, #20
 8006f0c:	460e      	mov	r6, r1
 8006f0e:	f883 9041 	strb.w	r9, [r3, #65]	; 0x41
 8006f12:	f883 9042 	strb.w	r9, [r3, #66]	; 0x42
 8006f16:	f8c3 b044 	str.w	fp, [r3, #68]	; 0x44
 8006f1a:	4607      	mov	r7, r0
 8006f1c:	4692      	mov	sl, r2
 8006f1e:	f7fe fbdb 	bl	80056d8 <acc_rss_integration_sensor_device_power_on>
 8006f22:	4630      	mov	r0, r6
 8006f24:	f000 fe10 	bl	8007b48 <acc_sweep_manager_is_sensor_connected>
 8006f28:	b968      	cbnz	r0, 8006f46 <calibrate_sensor+0x5a>
 8006f2a:	4b21      	ldr	r3, [pc, #132]	; (8006fb0 <calibrate_sensor+0xc4>)
 8006f2c:	4a21      	ldr	r2, [pc, #132]	; (8006fb4 <calibrate_sensor+0xc8>)
 8006f2e:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8006f30:	4921      	ldr	r1, [pc, #132]	; (8006fb8 <calibrate_sensor+0xcc>)
 8006f32:	463b      	mov	r3, r7
 8006f34:	4605      	mov	r5, r0
 8006f36:	47a0      	blx	r4
 8006f38:	4638      	mov	r0, r7
 8006f3a:	f7fe fbd3 	bl	80056e4 <acc_rss_integration_sensor_device_power_off>
 8006f3e:	4628      	mov	r0, r5
 8006f40:	b005      	add	sp, #20
 8006f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f46:	4639      	mov	r1, r7
 8006f48:	200b      	movs	r0, #11
 8006f4a:	f000 ffa3 	bl	8007e94 <acc_probes_execute_primitive_probe>
 8006f4e:	f8d8 2000 	ldr.w	r2, [r8]
 8006f52:	f8cd 9004 	str.w	r9, [sp, #4]
 8006f56:	4651      	mov	r1, sl
 8006f58:	4630      	mov	r0, r6
 8006f5a:	4422      	add	r2, r4
 8006f5c:	ab01      	add	r3, sp, #4
 8006f5e:	f8cd b008 	str.w	fp, [sp, #8]
 8006f62:	f8cd 900c 	str.w	r9, [sp, #12]
 8006f66:	f000 fdf3 	bl	8007b50 <acc_sweep_manager_calibrate>
 8006f6a:	4605      	mov	r5, r0
 8006f6c:	b9c8      	cbnz	r0, 8006fa2 <calibrate_sensor+0xb6>
 8006f6e:	4b10      	ldr	r3, [pc, #64]	; (8006fb0 <calibrate_sensor+0xc4>)
 8006f70:	4a12      	ldr	r2, [pc, #72]	; (8006fbc <calibrate_sensor+0xd0>)
 8006f72:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8006f74:	4910      	ldr	r1, [pc, #64]	; (8006fb8 <calibrate_sensor+0xcc>)
 8006f76:	463b      	mov	r3, r7
 8006f78:	47b0      	blx	r6
 8006f7a:	f8d8 3000 	ldr.w	r3, [r8]
 8006f7e:	441c      	add	r4, r3
 8006f80:	9a02      	ldr	r2, [sp, #8]
 8006f82:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006f86:	6462      	str	r2, [r4, #68]	; 0x44
 8006f88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f8c:	4639      	mov	r1, r7
 8006f8e:	200c      	movs	r0, #12
 8006f90:	f000 ff80 	bl	8007e94 <acc_probes_execute_primitive_probe>
 8006f94:	4638      	mov	r0, r7
 8006f96:	f7fe fba5 	bl	80056e4 <acc_rss_integration_sensor_device_power_off>
 8006f9a:	4628      	mov	r0, r5
 8006f9c:	b005      	add	sp, #20
 8006f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fa2:	f8d8 3000 	ldr.w	r3, [r8]
 8006fa6:	441c      	add	r4, r3
 8006fa8:	2301      	movs	r3, #1
 8006faa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8006fae:	e7e7      	b.n	8006f80 <calibrate_sensor+0x94>
 8006fb0:	200004c0 	.word	0x200004c0
 8006fb4:	0800ec64 	.word	0x0800ec64
 8006fb8:	0800eca0 	.word	0x0800eca0
 8006fbc:	0800ecb0 	.word	0x0800ecb0
 8006fc0:	20000368 	.word	0x20000368
 8006fc4:	ff800000 	.word	0xff800000

08006fc8 <acc_sensor_manager_hibernate_enter>:
 8006fc8:	b538      	push	{r3, r4, r5, lr}
 8006fca:	4603      	mov	r3, r0
 8006fcc:	3004      	adds	r0, #4
 8006fce:	699d      	ldr	r5, [r3, #24]
 8006fd0:	f000 fdf6 	bl	8007bc0 <acc_sweep_manager_wait_for_hibernate_ready>
 8006fd4:	4604      	mov	r4, r0
 8006fd6:	b930      	cbnz	r0, 8006fe6 <acc_sensor_manager_hibernate_enter+0x1e>
 8006fd8:	4b05      	ldr	r3, [pc, #20]	; (8006ff0 <acc_sensor_manager_hibernate_enter+0x28>)
 8006fda:	4a06      	ldr	r2, [pc, #24]	; (8006ff4 <acc_sensor_manager_hibernate_enter+0x2c>)
 8006fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fde:	4906      	ldr	r1, [pc, #24]	; (8006ff8 <acc_sensor_manager_hibernate_enter+0x30>)
 8006fe0:	4798      	blx	r3
 8006fe2:	4620      	mov	r0, r4
 8006fe4:	bd38      	pop	{r3, r4, r5, pc}
 8006fe6:	4628      	mov	r0, r5
 8006fe8:	f7fe fb82 	bl	80056f0 <acc_rss_integration_sensor_device_hibernate_enter>
 8006fec:	4620      	mov	r0, r4
 8006fee:	bd38      	pop	{r3, r4, r5, pc}
 8006ff0:	200004c0 	.word	0x200004c0
 8006ff4:	0800ecd4 	.word	0x0800ecd4
 8006ff8:	0800eca0 	.word	0x0800eca0

08006ffc <acc_sensor_manager_activate>:
 8006ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007000:	4e18      	ldr	r6, [pc, #96]	; (8007064 <acc_sensor_manager_activate+0x68>)
 8007002:	7834      	ldrb	r4, [r6, #0]
 8007004:	b114      	cbz	r4, 800700c <acc_sensor_manager_activate+0x10>
 8007006:	4620      	mov	r0, r4
 8007008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800700c:	f7fe fb52 	bl	80056b4 <acc_rss_integration_get_sensor_count>
 8007010:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8007014:	4914      	ldr	r1, [pc, #80]	; (8007068 <acc_sensor_manager_activate+0x6c>)
 8007016:	4f15      	ldr	r7, [pc, #84]	; (800706c <acc_sensor_manager_activate+0x70>)
 8007018:	00c0      	lsls	r0, r0, #3
 800701a:	f240 1253 	movw	r2, #339	; 0x153
 800701e:	f7fe fbab 	bl	8005778 <acc_rss_integration_mem_alloc_debug>
 8007022:	6038      	str	r0, [r7, #0]
 8007024:	2800      	cmp	r0, #0
 8007026:	d0ee      	beq.n	8007006 <acc_sensor_manager_activate+0xa>
 8007028:	f8df 8044 	ldr.w	r8, [pc, #68]	; 8007070 <acc_sensor_manager_activate+0x74>
 800702c:	4625      	mov	r5, r4
 800702e:	e00e      	b.n	800704e <acc_sensor_manager_activate+0x52>
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007036:	4618      	mov	r0, r3
 8007038:	2248      	movs	r2, #72	; 0x48
 800703a:	2100      	movs	r1, #0
 800703c:	f006 f8b6 	bl	800d1ac <memset>
 8007040:	3401      	adds	r4, #1
 8007042:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 8007046:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
 800704a:	f8c0 8044 	str.w	r8, [r0, #68]	; 0x44
 800704e:	f7fe fb31 	bl	80056b4 <acc_rss_integration_get_sensor_count>
 8007052:	42a0      	cmp	r0, r4
 8007054:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 8007058:	d8ea      	bhi.n	8007030 <acc_sensor_manager_activate+0x34>
 800705a:	2401      	movs	r4, #1
 800705c:	7034      	strb	r4, [r6, #0]
 800705e:	4620      	mov	r0, r4
 8007060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007064:	20000360 	.word	0x20000360
 8007068:	0800eca0 	.word	0x0800eca0
 800706c:	20000368 	.word	0x20000368
 8007070:	ff800000 	.word	0xff800000

08007074 <acc_sensor_manager_deactivate>:
 8007074:	b510      	push	{r4, lr}
 8007076:	4c05      	ldr	r4, [pc, #20]	; (800708c <acc_sensor_manager_deactivate+0x18>)
 8007078:	7823      	ldrb	r3, [r4, #0]
 800707a:	b903      	cbnz	r3, 800707e <acc_sensor_manager_deactivate+0xa>
 800707c:	bd10      	pop	{r4, pc}
 800707e:	4b04      	ldr	r3, [pc, #16]	; (8007090 <acc_sensor_manager_deactivate+0x1c>)
 8007080:	6818      	ldr	r0, [r3, #0]
 8007082:	f7fe fbbb 	bl	80057fc <acc_rss_integration_mem_free>
 8007086:	2300      	movs	r3, #0
 8007088:	7023      	strb	r3, [r4, #0]
 800708a:	bd10      	pop	{r4, pc}
 800708c:	20000360 	.word	0x20000360
 8007090:	20000368 	.word	0x20000368

08007094 <acc_sensor_manager_acquire_adc_data>:
 8007094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007098:	7846      	ldrb	r6, [r0, #1]
 800709a:	461c      	mov	r4, r3
 800709c:	b13e      	cbz	r6, 80070ae <acc_sensor_manager_acquire_adc_data+0x1a>
 800709e:	2300      	movs	r3, #0
 80070a0:	7023      	strb	r3, [r4, #0]
 80070a2:	7063      	strb	r3, [r4, #1]
 80070a4:	70a3      	strb	r3, [r4, #2]
 80070a6:	70e3      	strb	r3, [r4, #3]
 80070a8:	4630      	mov	r0, r6
 80070aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070ae:	f8df c0fc 	ldr.w	ip, [pc, #252]	; 80071ac <acc_sensor_manager_acquire_adc_data+0x118>
 80070b2:	f8d0 9018 	ldr.w	r9, [r0, #24]
 80070b6:	f8dc c000 	ldr.w	ip, [ip]
 80070ba:	4605      	mov	r5, r0
 80070bc:	4688      	mov	r8, r1
 80070be:	4617      	mov	r7, r2
 80070c0:	f1bc 0f00 	cmp.w	ip, #0
 80070c4:	d014      	beq.n	80070f0 <acc_sensor_manager_acquire_adc_data+0x5c>
 80070c6:	f8dc a00c 	ldr.w	sl, [ip, #12]
 80070ca:	f1ba 0f00 	cmp.w	sl, #0
 80070ce:	d00f      	beq.n	80070f0 <acc_sensor_manager_acquire_adc_data+0x5c>
 80070d0:	47d0      	blx	sl
 80070d2:	2800      	cmp	r0, #0
 80070d4:	d0e8      	beq.n	80070a8 <acc_sensor_manager_acquire_adc_data+0x14>
 80070d6:	786e      	ldrb	r6, [r5, #1]
 80070d8:	2e00      	cmp	r6, #0
 80070da:	d1e5      	bne.n	80070a8 <acc_sensor_manager_acquire_adc_data+0x14>
 80070dc:	463b      	mov	r3, r7
 80070de:	4642      	mov	r2, r8
 80070e0:	4649      	mov	r1, r9
 80070e2:	2601      	movs	r6, #1
 80070e4:	2002      	movs	r0, #2
 80070e6:	f000 fea7 	bl	8007e38 <acc_probes_execute_uint16>
 80070ea:	4630      	mov	r0, r6
 80070ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070f0:	2300      	movs	r3, #0
 80070f2:	7023      	strb	r3, [r4, #0]
 80070f4:	7063      	strb	r3, [r4, #1]
 80070f6:	70a3      	strb	r3, [r4, #2]
 80070f8:	70e3      	strb	r3, [r4, #3]
 80070fa:	f895 a000 	ldrb.w	sl, [r5]
 80070fe:	f1ba 0f02 	cmp.w	sl, #2
 8007102:	d031      	beq.n	8007168 <acc_sensor_manager_acquire_adc_data+0xd4>
 8007104:	f1ba 0f01 	cmp.w	sl, #1
 8007108:	d034      	beq.n	8007174 <acc_sensor_manager_acquire_adc_data+0xe0>
 800710a:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 800710c:	1d28      	adds	r0, r5, #4
 800710e:	f000 fd5f 	bl	8007bd0 <acc_sweep_manager_acquire_adc_data>
 8007112:	6843      	ldr	r3, [r0, #4]
 8007114:	b30b      	cbz	r3, 800715a <acc_sensor_manager_acquire_adc_data+0xc6>
 8007116:	4543      	cmp	r3, r8
 8007118:	d13b      	bne.n	8007192 <acc_sensor_manager_acquire_adc_data+0xfe>
 800711a:	8843      	ldrh	r3, [r0, #2]
 800711c:	42bb      	cmp	r3, r7
 800711e:	d133      	bne.n	8007188 <acc_sensor_manager_acquire_adc_data+0xf4>
 8007120:	4b1e      	ldr	r3, [pc, #120]	; (800719c <acc_sensor_manager_acquire_adc_data+0x108>)
 8007122:	68c1      	ldr	r1, [r0, #12]
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	7a06      	ldrb	r6, [r0, #8]
 8007128:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 800712c:	00db      	lsls	r3, r3, #3
 800712e:	3b48      	subs	r3, #72	; 0x48
 8007130:	4413      	add	r3, r2
 8007132:	7802      	ldrb	r2, [r0, #0]
 8007134:	7022      	strb	r2, [r4, #0]
 8007136:	7842      	ldrb	r2, [r0, #1]
 8007138:	7062      	strb	r2, [r4, #1]
 800713a:	f1ba 0f02 	cmp.w	sl, #2
 800713e:	7a42      	ldrb	r2, [r0, #9]
 8007140:	70e2      	strb	r2, [r4, #3]
 8007142:	70a6      	strb	r6, [r4, #2]
 8007144:	6459      	str	r1, [r3, #68]	; 0x44
 8007146:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800714a:	d017      	beq.n	800717c <acc_sensor_manager_acquire_adc_data+0xe8>
 800714c:	f1ba 0f01 	cmp.w	sl, #1
 8007150:	d1c1      	bne.n	80070d6 <acc_sensor_manager_acquire_adc_data+0x42>
 8007152:	4628      	mov	r0, r5
 8007154:	f7ff ff38 	bl	8006fc8 <acc_sensor_manager_hibernate_enter>
 8007158:	e7bd      	b.n	80070d6 <acc_sensor_manager_acquire_adc_data+0x42>
 800715a:	4911      	ldr	r1, [pc, #68]	; (80071a0 <acc_sensor_manager_acquire_adc_data+0x10c>)
 800715c:	4a11      	ldr	r2, [pc, #68]	; (80071a4 <acc_sensor_manager_acquire_adc_data+0x110>)
 800715e:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 8007160:	4911      	ldr	r1, [pc, #68]	; (80071a8 <acc_sensor_manager_acquire_adc_data+0x114>)
 8007162:	4618      	mov	r0, r3
 8007164:	47a0      	blx	r4
 8007166:	e79f      	b.n	80070a8 <acc_sensor_manager_acquire_adc_data+0x14>
 8007168:	4628      	mov	r0, r5
 800716a:	f7ff fea1 	bl	8006eb0 <acc_sensor_manager_power_on_and_start_sensor>
 800716e:	2800      	cmp	r0, #0
 8007170:	d1cb      	bne.n	800710a <acc_sensor_manager_acquire_adc_data+0x76>
 8007172:	e799      	b.n	80070a8 <acc_sensor_manager_acquire_adc_data+0x14>
 8007174:	4648      	mov	r0, r9
 8007176:	f7fe fac3 	bl	8005700 <acc_rss_integration_sensor_device_hibernate_exit>
 800717a:	e7c6      	b.n	800710a <acc_sensor_manager_acquire_adc_data+0x76>
 800717c:	4648      	mov	r0, r9
 800717e:	f7fe fab1 	bl	80056e4 <acc_rss_integration_sensor_device_power_off>
 8007182:	2300      	movs	r3, #0
 8007184:	70eb      	strb	r3, [r5, #3]
 8007186:	e7a6      	b.n	80070d6 <acc_sensor_manager_acquire_adc_data+0x42>
 8007188:	4807      	ldr	r0, [pc, #28]	; (80071a8 <acc_sensor_manager_acquire_adc_data+0x114>)
 800718a:	f240 11c9 	movw	r1, #457	; 0x1c9
 800718e:	f000 fd6b 	bl	8007c68 <acc_assert_fail>
 8007192:	4805      	ldr	r0, [pc, #20]	; (80071a8 <acc_sensor_manager_acquire_adc_data+0x114>)
 8007194:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 8007198:	f000 fd66 	bl	8007c68 <acc_assert_fail>
 800719c:	20000368 	.word	0x20000368
 80071a0:	200004c0 	.word	0x200004c0
 80071a4:	0800ecf4 	.word	0x0800ecf4
 80071a8:	0800eca0 	.word	0x0800eca0
 80071ac:	20000364 	.word	0x20000364

080071b0 <acc_sensor_manager_prepare_radar_engine>:
 80071b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071b4:	f100 0804 	add.w	r8, r0, #4
 80071b8:	4617      	mov	r7, r2
 80071ba:	4605      	mov	r5, r0
 80071bc:	2234      	movs	r2, #52	; 0x34
 80071be:	460c      	mov	r4, r1
 80071c0:	4640      	mov	r0, r8
 80071c2:	2100      	movs	r1, #0
 80071c4:	461e      	mov	r6, r3
 80071c6:	f005 fff1 	bl	800d1ac <memset>
 80071ca:	4b1e      	ldr	r3, [pc, #120]	; (8007244 <acc_sensor_manager_prepare_radar_engine+0x94>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	463a      	mov	r2, r7
 80071d0:	4640      	mov	r0, r8
 80071d2:	b33b      	cbz	r3, 8007224 <acc_sensor_manager_prepare_radar_engine+0x74>
 80071d4:	f8d3 9000 	ldr.w	r9, [r3]
 80071d8:	f1b9 0f00 	cmp.w	r9, #0
 80071dc:	d022      	beq.n	8007224 <acc_sensor_manager_prepare_radar_engine+0x74>
 80071de:	4633      	mov	r3, r6
 80071e0:	4621      	mov	r1, r4
 80071e2:	47c8      	blx	r9
 80071e4:	4607      	mov	r7, r0
 80071e6:	4620      	mov	r0, r4
 80071e8:	f7fd fefe 	bl	8004fe8 <acc_base_configuration_power_save_mode_get>
 80071ec:	b320      	cbz	r0, 8007238 <acc_sensor_manager_prepare_radar_engine+0x88>
 80071ee:	2804      	cmp	r0, #4
 80071f0:	d025      	beq.n	800723e <acc_sensor_manager_prepare_radar_engine+0x8e>
 80071f2:	2300      	movs	r3, #0
 80071f4:	702b      	strb	r3, [r5, #0]
 80071f6:	4620      	mov	r0, r4
 80071f8:	f7fd ffc0 	bl	800517c <acc_base_configuration_repetition_mode_get>
 80071fc:	fab0 f280 	clz	r2, r0
 8007200:	0952      	lsrs	r2, r2, #5
 8007202:	706a      	strb	r2, [r5, #1]
 8007204:	4620      	mov	r0, r4
 8007206:	f7fe f8cf 	bl	80053a8 <acc_base_configuration_asynchronous_measurement_get>
 800720a:	70a8      	strb	r0, [r5, #2]
 800720c:	4620      	mov	r0, r4
 800720e:	f7fd fe9b 	bl	8004f48 <acc_base_configuration_sensor_get>
 8007212:	4632      	mov	r2, r6
 8007214:	4601      	mov	r1, r0
 8007216:	231a      	movs	r3, #26
 8007218:	2005      	movs	r0, #5
 800721a:	f000 fe23 	bl	8007e64 <acc_probes_execute_struct>
 800721e:	4638      	mov	r0, r7
 8007220:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007224:	4633      	mov	r3, r6
 8007226:	4621      	mov	r1, r4
 8007228:	f000 fbec 	bl	8007a04 <acc_sweep_manager_prepare>
 800722c:	4607      	mov	r7, r0
 800722e:	4620      	mov	r0, r4
 8007230:	f7fd feda 	bl	8004fe8 <acc_base_configuration_power_save_mode_get>
 8007234:	2800      	cmp	r0, #0
 8007236:	d1da      	bne.n	80071ee <acc_sensor_manager_prepare_radar_engine+0x3e>
 8007238:	2302      	movs	r3, #2
 800723a:	702b      	strb	r3, [r5, #0]
 800723c:	e7db      	b.n	80071f6 <acc_sensor_manager_prepare_radar_engine+0x46>
 800723e:	2301      	movs	r3, #1
 8007240:	702b      	strb	r3, [r5, #0]
 8007242:	e7d8      	b.n	80071f6 <acc_sensor_manager_prepare_radar_engine+0x46>
 8007244:	20000364 	.word	0x20000364

08007248 <acc_sensor_manager_prepare_measurement>:
 8007248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800724c:	4680      	mov	r8, r0
 800724e:	b083      	sub	sp, #12
 8007250:	4608      	mov	r0, r1
 8007252:	460e      	mov	r6, r1
 8007254:	4617      	mov	r7, r2
 8007256:	469a      	mov	sl, r3
 8007258:	f7fd fe76 	bl	8004f48 <acc_base_configuration_sensor_get>
 800725c:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 8007344 <acc_sensor_manager_prepare_measurement+0xfc>
 8007260:	4605      	mov	r5, r0
 8007262:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
 8007266:	4630      	mov	r0, r6
 8007268:	f7fe f894 	bl	8005394 <acc_base_configuration_noise_deviation_override_get>
 800726c:	00e4      	lsls	r4, r4, #3
 800726e:	f8d9 1000 	ldr.w	r1, [r9]
 8007272:	4b32      	ldr	r3, [pc, #200]	; (800733c <acc_sensor_manager_prepare_measurement+0xf4>)
 8007274:	4a32      	ldr	r2, [pc, #200]	; (8007340 <acc_sensor_manager_prepare_measurement+0xf8>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	3c48      	subs	r4, #72	; 0x48
 800727a:	440c      	add	r4, r1
 800727c:	2100      	movs	r1, #0
 800727e:	4683      	mov	fp, r0
 8007280:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007284:	6462      	str	r2, [r4, #68]	; 0x44
 8007286:	b163      	cbz	r3, 80072a2 <acc_sensor_manager_prepare_measurement+0x5a>
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	b153      	cbz	r3, 80072a2 <acc_sensor_manager_prepare_measurement+0x5a>
 800728c:	4652      	mov	r2, sl
 800728e:	4630      	mov	r0, r6
 8007290:	4639      	mov	r1, r7
 8007292:	4798      	blx	r3
 8007294:	4604      	mov	r4, r0
 8007296:	2800      	cmp	r0, #0
 8007298:	d14b      	bne.n	8007332 <acc_sensor_manager_prepare_measurement+0xea>
 800729a:	4620      	mov	r0, r4
 800729c:	b003      	add	sp, #12
 800729e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072a2:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80072a6:	f8c8 a038 	str.w	sl, [r8, #56]	; 0x38
 80072aa:	b17b      	cbz	r3, 80072cc <acc_sensor_manager_prepare_measurement+0x84>
 80072ac:	f1bb 0f00 	cmp.w	fp, #0
 80072b0:	d01b      	beq.n	80072ea <acc_sensor_manager_prepare_measurement+0xa2>
 80072b2:	f8a7 b014 	strh.w	fp, [r7, #20]
 80072b6:	463a      	mov	r2, r7
 80072b8:	4629      	mov	r1, r5
 80072ba:	2320      	movs	r3, #32
 80072bc:	200e      	movs	r0, #14
 80072be:	f000 fdd1 	bl	8007e64 <acc_probes_execute_struct>
 80072c2:	2401      	movs	r4, #1
 80072c4:	4620      	mov	r0, r4
 80072c6:	b003      	add	sp, #12
 80072c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072cc:	f108 0104 	add.w	r1, r8, #4
 80072d0:	4652      	mov	r2, sl
 80072d2:	4628      	mov	r0, r5
 80072d4:	9101      	str	r1, [sp, #4]
 80072d6:	f7ff fe09 	bl	8006eec <calibrate_sensor>
 80072da:	9901      	ldr	r1, [sp, #4]
 80072dc:	4604      	mov	r4, r0
 80072de:	2800      	cmp	r0, #0
 80072e0:	d1e4      	bne.n	80072ac <acc_sensor_manager_prepare_measurement+0x64>
 80072e2:	4608      	mov	r0, r1
 80072e4:	f000 fc28 	bl	8007b38 <acc_sweep_manager_release>
 80072e8:	e7d7      	b.n	800729a <acc_sensor_manager_prepare_measurement+0x52>
 80072ea:	4630      	mov	r0, r6
 80072ec:	f7fe f83e 	bl	800536c <acc_base_configuration_noise_level_normalization_get>
 80072f0:	2800      	cmp	r0, #0
 80072f2:	d0e0      	beq.n	80072b6 <acc_sensor_manager_prepare_measurement+0x6e>
 80072f4:	f8d8 6018 	ldr.w	r6, [r8, #24]
 80072f8:	4630      	mov	r0, r6
 80072fa:	f7fe f9ed 	bl	80056d8 <acc_rss_integration_sensor_device_power_on>
 80072fe:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 8007302:	f8d9 1000 	ldr.w	r1, [r9]
 8007306:	f8d8 2038 	ldr.w	r2, [r8, #56]	; 0x38
 800730a:	00db      	lsls	r3, r3, #3
 800730c:	3b48      	subs	r3, #72	; 0x48
 800730e:	f108 0804 	add.w	r8, r8, #4
 8007312:	4419      	add	r1, r3
 8007314:	4640      	mov	r0, r8
 8007316:	f107 0314 	add.w	r3, r7, #20
 800731a:	f000 fc23 	bl	8007b64 <acc_sweep_manager_measure_noise>
 800731e:	4604      	mov	r4, r0
 8007320:	4630      	mov	r0, r6
 8007322:	f7fe f9df 	bl	80056e4 <acc_rss_integration_sensor_device_power_off>
 8007326:	2c00      	cmp	r4, #0
 8007328:	d1c5      	bne.n	80072b6 <acc_sensor_manager_prepare_measurement+0x6e>
 800732a:	4640      	mov	r0, r8
 800732c:	f000 fc04 	bl	8007b38 <acc_sweep_manager_release>
 8007330:	e7b3      	b.n	800729a <acc_sensor_manager_prepare_measurement+0x52>
 8007332:	f1bb 0f00 	cmp.w	fp, #0
 8007336:	d0be      	beq.n	80072b6 <acc_sensor_manager_prepare_measurement+0x6e>
 8007338:	e7bb      	b.n	80072b2 <acc_sensor_manager_prepare_measurement+0x6a>
 800733a:	bf00      	nop
 800733c:	20000364 	.word	0x20000364
 8007340:	ff800000 	.word	0xff800000
 8007344:	20000368 	.word	0x20000368

08007348 <acc_sensor_manager_start_measurement>:
 8007348:	4b1b      	ldr	r3, [pc, #108]	; (80073b8 <acc_sensor_manager_start_measurement+0x70>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	b570      	push	{r4, r5, r6, lr}
 800734e:	4604      	mov	r4, r0
 8007350:	b123      	cbz	r3, 800735c <acc_sensor_manager_start_measurement+0x14>
 8007352:	689b      	ldr	r3, [r3, #8]
 8007354:	b113      	cbz	r3, 800735c <acc_sensor_manager_start_measurement+0x14>
 8007356:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800735a:	4718      	bx	r3
 800735c:	7823      	ldrb	r3, [r4, #0]
 800735e:	2b02      	cmp	r3, #2
 8007360:	d008      	beq.n	8007374 <acc_sensor_manager_start_measurement+0x2c>
 8007362:	4620      	mov	r0, r4
 8007364:	f7ff fda4 	bl	8006eb0 <acc_sensor_manager_power_on_and_start_sensor>
 8007368:	b160      	cbz	r0, 8007384 <acc_sensor_manager_start_measurement+0x3c>
 800736a:	78a3      	ldrb	r3, [r4, #2]
 800736c:	b12b      	cbz	r3, 800737a <acc_sensor_manager_start_measurement+0x32>
 800736e:	7823      	ldrb	r3, [r4, #0]
 8007370:	2b01      	cmp	r3, #1
 8007372:	d010      	beq.n	8007396 <acc_sensor_manager_start_measurement+0x4e>
 8007374:	2501      	movs	r5, #1
 8007376:	4628      	mov	r0, r5
 8007378:	bd70      	pop	{r4, r5, r6, pc}
 800737a:	1d25      	adds	r5, r4, #4
 800737c:	4628      	mov	r0, r5
 800737e:	f000 fc23 	bl	8007bc8 <acc_sweep_manager_measure>
 8007382:	b910      	cbnz	r0, 800738a <acc_sensor_manager_start_measurement+0x42>
 8007384:	2500      	movs	r5, #0
 8007386:	4628      	mov	r0, r5
 8007388:	bd70      	pop	{r4, r5, r6, pc}
 800738a:	4628      	mov	r0, r5
 800738c:	f000 fc12 	bl	8007bb4 <acc_sweep_manager_wait_for_data>
 8007390:	2800      	cmp	r0, #0
 8007392:	d1ec      	bne.n	800736e <acc_sensor_manager_start_measurement+0x26>
 8007394:	e7f6      	b.n	8007384 <acc_sensor_manager_start_measurement+0x3c>
 8007396:	1d25      	adds	r5, r4, #4
 8007398:	4628      	mov	r0, r5
 800739a:	f000 fc0b 	bl	8007bb4 <acc_sweep_manager_wait_for_data>
 800739e:	2800      	cmp	r0, #0
 80073a0:	d0f0      	beq.n	8007384 <acc_sensor_manager_start_measurement+0x3c>
 80073a2:	4628      	mov	r0, r5
 80073a4:	f000 fc10 	bl	8007bc8 <acc_sweep_manager_measure>
 80073a8:	4605      	mov	r5, r0
 80073aa:	2800      	cmp	r0, #0
 80073ac:	d0ea      	beq.n	8007384 <acc_sensor_manager_start_measurement+0x3c>
 80073ae:	4620      	mov	r0, r4
 80073b0:	f7ff fe0a 	bl	8006fc8 <acc_sensor_manager_hibernate_enter>
 80073b4:	e7df      	b.n	8007376 <acc_sensor_manager_start_measurement+0x2e>
 80073b6:	bf00      	nop
 80073b8:	20000364 	.word	0x20000364

080073bc <acc_sensor_manager_stop_measurement>:
 80073bc:	78c3      	ldrb	r3, [r0, #3]
 80073be:	b903      	cbnz	r3, 80073c2 <acc_sensor_manager_stop_measurement+0x6>
 80073c0:	4770      	bx	lr
 80073c2:	b510      	push	{r4, lr}
 80073c4:	4604      	mov	r4, r0
 80073c6:	6980      	ldr	r0, [r0, #24]
 80073c8:	f7fe f98c 	bl	80056e4 <acc_rss_integration_sensor_device_power_off>
 80073cc:	2300      	movs	r3, #0
 80073ce:	70e3      	strb	r3, [r4, #3]
 80073d0:	bd10      	pop	{r4, pc}
 80073d2:	bf00      	nop

080073d4 <acc_sensor_manager_release_measurement>:
 80073d4:	6983      	ldr	r3, [r0, #24]
 80073d6:	b173      	cbz	r3, 80073f6 <acc_sensor_manager_release_measurement+0x22>
 80073d8:	4a07      	ldr	r2, [pc, #28]	; (80073f8 <acc_sensor_manager_release_measurement+0x24>)
 80073da:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 80073de:	6812      	ldr	r2, [r2, #0]
 80073e0:	00db      	lsls	r3, r3, #3
 80073e2:	3b48      	subs	r3, #72	; 0x48
 80073e4:	4413      	add	r3, r2
 80073e6:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80073ea:	b90a      	cbnz	r2, 80073f0 <acc_sensor_manager_release_measurement+0x1c>
 80073ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80073f0:	3004      	adds	r0, #4
 80073f2:	f000 bba1 	b.w	8007b38 <acc_sweep_manager_release>
 80073f6:	4770      	bx	lr
 80073f8:	20000368 	.word	0x20000368

080073fc <acc_sensor_manager_get_sensor_id>:
 80073fc:	6980      	ldr	r0, [r0, #24]
 80073fe:	4770      	bx	lr

08007400 <acc_sensor_protocol_r2_prepare_load>:
 8007400:	b570      	push	{r4, r5, r6, lr}
 8007402:	b084      	sub	sp, #16
 8007404:	4604      	mov	r4, r0
 8007406:	4608      	mov	r0, r1
 8007408:	4611      	mov	r1, r2
 800740a:	461a      	mov	r2, r3
 800740c:	9b08      	ldr	r3, [sp, #32]
 800740e:	f7ff fcef 	bl	8006df0 <acc_sensor_r2_prepare_load_confmem>
 8007412:	2300      	movs	r3, #0
 8007414:	4620      	mov	r0, r4
 8007416:	f10d 020e 	add.w	r2, sp, #14
 800741a:	212a      	movs	r1, #42	; 0x2a
 800741c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8007420:	f000 fd50 	bl	8007ec4 <acc_sensor_reg_read>
 8007424:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8007428:	065b      	lsls	r3, r3, #25
 800742a:	d436      	bmi.n	800749a <acc_sensor_protocol_r2_prepare_load+0x9a>
 800742c:	f10d 020e 	add.w	r2, sp, #14
 8007430:	2500      	movs	r5, #0
 8007432:	2111      	movs	r1, #17
 8007434:	4620      	mov	r0, r4
 8007436:	f8ad 500e 	strh.w	r5, [sp, #14]
 800743a:	f000 fd43 	bl	8007ec4 <acc_sensor_reg_read>
 800743e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8007442:	f413 6680 	ands.w	r6, r3, #1024	; 0x400
 8007446:	d00c      	beq.n	8007462 <acc_sensor_protocol_r2_prepare_load+0x62>
 8007448:	4b1b      	ldr	r3, [pc, #108]	; (80074b8 <acc_sensor_protocol_r2_prepare_load+0xb8>)
 800744a:	4a1c      	ldr	r2, [pc, #112]	; (80074bc <acc_sensor_protocol_r2_prepare_load+0xbc>)
 800744c:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800744e:	491c      	ldr	r1, [pc, #112]	; (80074c0 <acc_sensor_protocol_r2_prepare_load+0xc0>)
 8007450:	4623      	mov	r3, r4
 8007452:	4628      	mov	r0, r5
 8007454:	47b0      	blx	r6
 8007456:	4620      	mov	r0, r4
 8007458:	f004 f888 	bl	800b56c <acc_sensor_diagnostics_r2_sensor_status>
 800745c:	4628      	mov	r0, r5
 800745e:	b004      	add	sp, #16
 8007460:	bd70      	pop	{r4, r5, r6, pc}
 8007462:	2501      	movs	r5, #1
 8007464:	4629      	mov	r1, r5
 8007466:	4620      	mov	r0, r4
 8007468:	9500      	str	r5, [sp, #0]
 800746a:	2380      	movs	r3, #128	; 0x80
 800746c:	2202      	movs	r2, #2
 800746e:	f000 fd4f 	bl	8007f10 <acc_sensor_reg_field_write>
 8007472:	2380      	movs	r3, #128	; 0x80
 8007474:	461a      	mov	r2, r3
 8007476:	4620      	mov	r0, r4
 8007478:	9600      	str	r6, [sp, #0]
 800747a:	2107      	movs	r1, #7
 800747c:	f000 fd48 	bl	8007f10 <acc_sensor_reg_field_write>
 8007480:	462a      	mov	r2, r5
 8007482:	4620      	mov	r0, r4
 8007484:	2105      	movs	r1, #5
 8007486:	f000 fd33 	bl	8007ef0 <acc_sensor_reg_write>
 800748a:	4620      	mov	r0, r4
 800748c:	2203      	movs	r2, #3
 800748e:	217a      	movs	r1, #122	; 0x7a
 8007490:	f000 fd2e 	bl	8007ef0 <acc_sensor_reg_write>
 8007494:	4628      	mov	r0, r5
 8007496:	b004      	add	sp, #16
 8007498:	bd70      	pop	{r4, r5, r6, pc}
 800749a:	f7fe f9c1 	bl	8005820 <acc_rss_integration_log_level>
 800749e:	b130      	cbz	r0, 80074ae <acc_sensor_protocol_r2_prepare_load+0xae>
 80074a0:	4b05      	ldr	r3, [pc, #20]	; (80074b8 <acc_sensor_protocol_r2_prepare_load+0xb8>)
 80074a2:	4a08      	ldr	r2, [pc, #32]	; (80074c4 <acc_sensor_protocol_r2_prepare_load+0xc4>)
 80074a4:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 80074a6:	4906      	ldr	r1, [pc, #24]	; (80074c0 <acc_sensor_protocol_r2_prepare_load+0xc0>)
 80074a8:	4623      	mov	r3, r4
 80074aa:	2001      	movs	r0, #1
 80074ac:	47a8      	blx	r5
 80074ae:	4620      	mov	r0, r4
 80074b0:	f004 f85c 	bl	800b56c <acc_sensor_diagnostics_r2_sensor_status>
 80074b4:	e7ba      	b.n	800742c <acc_sensor_protocol_r2_prepare_load+0x2c>
 80074b6:	bf00      	nop
 80074b8:	200004c0 	.word	0x200004c0
 80074bc:	0800ed4c 	.word	0x0800ed4c
 80074c0:	0800ed38 	.word	0x0800ed38
 80074c4:	0800ed0c 	.word	0x0800ed0c

080074c8 <acc_sensor_protocol_r2_run_program>:
 80074c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074ca:	b085      	sub	sp, #20
 80074cc:	4604      	mov	r4, r0
 80074ce:	460e      	mov	r6, r1
 80074d0:	f7fe f9a6 	bl	8005820 <acc_rss_integration_log_level>
 80074d4:	2803      	cmp	r0, #3
 80074d6:	d907      	bls.n	80074e8 <acc_sensor_protocol_r2_run_program+0x20>
 80074d8:	4b1e      	ldr	r3, [pc, #120]	; (8007554 <acc_sensor_protocol_r2_run_program+0x8c>)
 80074da:	9600      	str	r6, [sp, #0]
 80074dc:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 80074de:	4a1e      	ldr	r2, [pc, #120]	; (8007558 <acc_sensor_protocol_r2_run_program+0x90>)
 80074e0:	491e      	ldr	r1, [pc, #120]	; (800755c <acc_sensor_protocol_r2_run_program+0x94>)
 80074e2:	4623      	mov	r3, r4
 80074e4:	2004      	movs	r0, #4
 80074e6:	47a8      	blx	r5
 80074e8:	f10d 020e 	add.w	r2, sp, #14
 80074ec:	2700      	movs	r7, #0
 80074ee:	2111      	movs	r1, #17
 80074f0:	4620      	mov	r0, r4
 80074f2:	f8ad 700e 	strh.w	r7, [sp, #14]
 80074f6:	f000 fce5 	bl	8007ec4 <acc_sensor_reg_read>
 80074fa:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 80074fe:	f412 6580 	ands.w	r5, r2, #1024	; 0x400
 8007502:	d11a      	bne.n	800753a <acc_sensor_protocol_r2_run_program+0x72>
 8007504:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007508:	d309      	bcc.n	800751e <acc_sensor_protocol_r2_run_program+0x56>
 800750a:	4b12      	ldr	r3, [pc, #72]	; (8007554 <acc_sensor_protocol_r2_run_program+0x8c>)
 800750c:	4a14      	ldr	r2, [pc, #80]	; (8007560 <acc_sensor_protocol_r2_run_program+0x98>)
 800750e:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8007510:	4912      	ldr	r1, [pc, #72]	; (800755c <acc_sensor_protocol_r2_run_program+0x94>)
 8007512:	4628      	mov	r0, r5
 8007514:	4633      	mov	r3, r6
 8007516:	47a0      	blx	r4
 8007518:	4628      	mov	r0, r5
 800751a:	b005      	add	sp, #20
 800751c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800751e:	462a      	mov	r2, r5
 8007520:	4620      	mov	r0, r4
 8007522:	2110      	movs	r1, #16
 8007524:	f000 fce4 	bl	8007ef0 <acc_sensor_reg_write>
 8007528:	4620      	mov	r0, r4
 800752a:	f446 6280 	orr.w	r2, r6, #1024	; 0x400
 800752e:	2110      	movs	r1, #16
 8007530:	f000 fcde 	bl	8007ef0 <acc_sensor_reg_write>
 8007534:	2001      	movs	r0, #1
 8007536:	b005      	add	sp, #20
 8007538:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800753a:	4b06      	ldr	r3, [pc, #24]	; (8007554 <acc_sensor_protocol_r2_run_program+0x8c>)
 800753c:	4a09      	ldr	r2, [pc, #36]	; (8007564 <acc_sensor_protocol_r2_run_program+0x9c>)
 800753e:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8007540:	4906      	ldr	r1, [pc, #24]	; (800755c <acc_sensor_protocol_r2_run_program+0x94>)
 8007542:	4623      	mov	r3, r4
 8007544:	4638      	mov	r0, r7
 8007546:	47a8      	blx	r5
 8007548:	4620      	mov	r0, r4
 800754a:	f004 f80f 	bl	800b56c <acc_sensor_diagnostics_r2_sensor_status>
 800754e:	4638      	mov	r0, r7
 8007550:	b005      	add	sp, #20
 8007552:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007554:	200004c0 	.word	0x200004c0
 8007558:	0800ed7c 	.word	0x0800ed7c
 800755c:	0800ed38 	.word	0x0800ed38
 8007560:	0800edd0 	.word	0x0800edd0
 8007564:	0800eda0 	.word	0x0800eda0

08007568 <acc_sensor_protocol_r2_terminate_program>:
 8007568:	b530      	push	{r4, r5, lr}
 800756a:	b083      	sub	sp, #12
 800756c:	2300      	movs	r3, #0
 800756e:	f10d 0206 	add.w	r2, sp, #6
 8007572:	2111      	movs	r1, #17
 8007574:	f8ad 3006 	strh.w	r3, [sp, #6]
 8007578:	4605      	mov	r5, r0
 800757a:	f000 fca3 	bl	8007ec4 <acc_sensor_reg_read>
 800757e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8007582:	f413 6480 	ands.w	r4, r3, #1024	; 0x400
 8007586:	d10b      	bne.n	80075a0 <acc_sensor_protocol_r2_terminate_program+0x38>
 8007588:	4b09      	ldr	r3, [pc, #36]	; (80075b0 <acc_sensor_protocol_r2_terminate_program+0x48>)
 800758a:	4a0a      	ldr	r2, [pc, #40]	; (80075b4 <acc_sensor_protocol_r2_terminate_program+0x4c>)
 800758c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800758e:	490a      	ldr	r1, [pc, #40]	; (80075b8 <acc_sensor_protocol_r2_terminate_program+0x50>)
 8007590:	4620      	mov	r0, r4
 8007592:	4798      	blx	r3
 8007594:	4628      	mov	r0, r5
 8007596:	f003 ffe9 	bl	800b56c <acc_sensor_diagnostics_r2_sensor_status>
 800759a:	4620      	mov	r0, r4
 800759c:	b003      	add	sp, #12
 800759e:	bd30      	pop	{r4, r5, pc}
 80075a0:	4628      	mov	r0, r5
 80075a2:	2201      	movs	r2, #1
 80075a4:	2174      	movs	r1, #116	; 0x74
 80075a6:	f000 fca3 	bl	8007ef0 <acc_sensor_reg_write>
 80075aa:	2001      	movs	r0, #1
 80075ac:	b003      	add	sp, #12
 80075ae:	bd30      	pop	{r4, r5, pc}
 80075b0:	200004c0 	.word	0x200004c0
 80075b4:	0800edec 	.word	0x0800edec
 80075b8:	0800ed38 	.word	0x0800ed38

080075bc <acc_sensor_protocol_r2_is_sensor_running>:
 80075bc:	b500      	push	{lr}
 80075be:	b083      	sub	sp, #12
 80075c0:	2300      	movs	r3, #0
 80075c2:	f10d 0206 	add.w	r2, sp, #6
 80075c6:	2111      	movs	r1, #17
 80075c8:	f8ad 3006 	strh.w	r3, [sp, #6]
 80075cc:	f000 fc7a 	bl	8007ec4 <acc_sensor_reg_read>
 80075d0:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80075d4:	f3c0 2080 	ubfx	r0, r0, #10, #1
 80075d8:	b003      	add	sp, #12
 80075da:	f85d fb04 	ldr.w	pc, [sp], #4
 80075de:	bf00      	nop

080075e0 <acc_sensor_protocol_r2_ack_event>:
 80075e0:	b570      	push	{r4, r5, r6, lr}
 80075e2:	b082      	sub	sp, #8
 80075e4:	2300      	movs	r3, #0
 80075e6:	f10d 0206 	add.w	r2, sp, #6
 80075ea:	2138      	movs	r1, #56	; 0x38
 80075ec:	4605      	mov	r5, r0
 80075ee:	f8ad 3006 	strh.w	r3, [sp, #6]
 80075f2:	f000 fc67 	bl	8007ec4 <acc_sensor_reg_read>
 80075f6:	f8bd 4006 	ldrh.w	r4, [sp, #6]
 80075fa:	b114      	cbz	r4, 8007602 <acc_sensor_protocol_r2_ack_event+0x22>
 80075fc:	2001      	movs	r0, #1
 80075fe:	b002      	add	sp, #8
 8007600:	bd70      	pop	{r4, r5, r6, pc}
 8007602:	4b06      	ldr	r3, [pc, #24]	; (800761c <acc_sensor_protocol_r2_ack_event+0x3c>)
 8007604:	4a06      	ldr	r2, [pc, #24]	; (8007620 <acc_sensor_protocol_r2_ack_event+0x40>)
 8007606:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8007608:	4906      	ldr	r1, [pc, #24]	; (8007624 <acc_sensor_protocol_r2_ack_event+0x44>)
 800760a:	462b      	mov	r3, r5
 800760c:	4620      	mov	r0, r4
 800760e:	47b0      	blx	r6
 8007610:	4628      	mov	r0, r5
 8007612:	f003 ffab 	bl	800b56c <acc_sensor_diagnostics_r2_sensor_status>
 8007616:	4620      	mov	r0, r4
 8007618:	b002      	add	sp, #8
 800761a:	bd70      	pop	{r4, r5, r6, pc}
 800761c:	200004c0 	.word	0x200004c0
 8007620:	0800ee20 	.word	0x0800ee20
 8007624:	0800ed38 	.word	0x0800ed38

08007628 <acc_sensor_protocol_r2_get_event>:
 8007628:	b570      	push	{r4, r5, r6, lr}
 800762a:	460c      	mov	r4, r1
 800762c:	b084      	sub	sp, #16
 800762e:	b301      	cbz	r1, 8007672 <acc_sensor_protocol_r2_get_event+0x4a>
 8007630:	f10d 020e 	add.w	r2, sp, #14
 8007634:	2128      	movs	r1, #40	; 0x28
 8007636:	4605      	mov	r5, r0
 8007638:	f000 fc44 	bl	8007ec4 <acc_sensor_reg_read>
 800763c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8007640:	8062      	strh	r2, [r4, #2]
 8007642:	b2d3      	uxtb	r3, r2
 8007644:	2b01      	cmp	r3, #1
 8007646:	7023      	strb	r3, [r4, #0]
 8007648:	d026      	beq.n	8007698 <acc_sensor_protocol_r2_get_event+0x70>
 800764a:	d80c      	bhi.n	8007666 <acc_sensor_protocol_r2_get_event+0x3e>
 800764c:	4b22      	ldr	r3, [pc, #136]	; (80076d8 <acc_sensor_protocol_r2_get_event+0xb0>)
 800764e:	4a23      	ldr	r2, [pc, #140]	; (80076dc <acc_sensor_protocol_r2_get_event+0xb4>)
 8007650:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8007652:	4923      	ldr	r1, [pc, #140]	; (80076e0 <acc_sensor_protocol_r2_get_event+0xb8>)
 8007654:	462b      	mov	r3, r5
 8007656:	2000      	movs	r0, #0
 8007658:	47a0      	blx	r4
 800765a:	4628      	mov	r0, r5
 800765c:	f003 ff86 	bl	800b56c <acc_sensor_diagnostics_r2_sensor_status>
 8007660:	2000      	movs	r0, #0
 8007662:	b004      	add	sp, #16
 8007664:	bd70      	pop	{r4, r5, r6, pc}
 8007666:	1e9a      	subs	r2, r3, #2
 8007668:	2a09      	cmp	r2, #9
 800766a:	d80b      	bhi.n	8007684 <acc_sensor_protocol_r2_get_event+0x5c>
 800766c:	2001      	movs	r0, #1
 800766e:	b004      	add	sp, #16
 8007670:	bd70      	pop	{r4, r5, r6, pc}
 8007672:	4b19      	ldr	r3, [pc, #100]	; (80076d8 <acc_sensor_protocol_r2_get_event+0xb0>)
 8007674:	4a1b      	ldr	r2, [pc, #108]	; (80076e4 <acc_sensor_protocol_r2_get_event+0xbc>)
 8007676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007678:	4919      	ldr	r1, [pc, #100]	; (80076e0 <acc_sensor_protocol_r2_get_event+0xb8>)
 800767a:	4620      	mov	r0, r4
 800767c:	4798      	blx	r3
 800767e:	4620      	mov	r0, r4
 8007680:	b004      	add	sp, #16
 8007682:	bd70      	pop	{r4, r5, r6, pc}
 8007684:	4a14      	ldr	r2, [pc, #80]	; (80076d8 <acc_sensor_protocol_r2_get_event+0xb0>)
 8007686:	9500      	str	r5, [sp, #0]
 8007688:	6b56      	ldr	r6, [r2, #52]	; 0x34
 800768a:	4915      	ldr	r1, [pc, #84]	; (80076e0 <acc_sensor_protocol_r2_get_event+0xb8>)
 800768c:	4a16      	ldr	r2, [pc, #88]	; (80076e8 <acc_sensor_protocol_r2_get_event+0xc0>)
 800768e:	2000      	movs	r0, #0
 8007690:	47b0      	blx	r6
 8007692:	2300      	movs	r3, #0
 8007694:	7023      	strb	r3, [r4, #0]
 8007696:	e7e0      	b.n	800765a <acc_sensor_protocol_r2_get_event+0x32>
 8007698:	f5b2 5f88 	cmp.w	r2, #4352	; 0x1100
 800769c:	ea4f 2112 	mov.w	r1, r2, lsr #8
 80076a0:	d203      	bcs.n	80076aa <acc_sensor_protocol_r2_get_event+0x82>
 80076a2:	4a12      	ldr	r2, [pc, #72]	; (80076ec <acc_sensor_protocol_r2_get_event+0xc4>)
 80076a4:	408b      	lsls	r3, r1
 80076a6:	401a      	ands	r2, r3
 80076a8:	b96a      	cbnz	r2, 80076c6 <acc_sensor_protocol_r2_get_event+0x9e>
 80076aa:	4a0b      	ldr	r2, [pc, #44]	; (80076d8 <acc_sensor_protocol_r2_get_event+0xb0>)
 80076ac:	f242 1301 	movw	r3, #8449	; 0x2101
 80076b0:	6b56      	ldr	r6, [r2, #52]	; 0x34
 80076b2:	8063      	strh	r3, [r4, #2]
 80076b4:	2320      	movs	r3, #32
 80076b6:	4a0e      	ldr	r2, [pc, #56]	; (80076f0 <acc_sensor_protocol_r2_get_event+0xc8>)
 80076b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076bc:	4a0d      	ldr	r2, [pc, #52]	; (80076f4 <acc_sensor_protocol_r2_get_event+0xcc>)
 80076be:	4908      	ldr	r1, [pc, #32]	; (80076e0 <acc_sensor_protocol_r2_get_event+0xb8>)
 80076c0:	2000      	movs	r0, #0
 80076c2:	47b0      	blx	r6
 80076c4:	e7c9      	b.n	800765a <acc_sensor_protocol_r2_get_event+0x32>
 80076c6:	1e4b      	subs	r3, r1, #1
 80076c8:	4a03      	ldr	r2, [pc, #12]	; (80076d8 <acc_sensor_protocol_r2_get_event+0xb0>)
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	2b20      	cmp	r3, #32
 80076ce:	6b56      	ldr	r6, [r2, #52]	; 0x34
 80076d0:	d9f1      	bls.n	80076b6 <acc_sensor_protocol_r2_get_event+0x8e>
 80076d2:	4b09      	ldr	r3, [pc, #36]	; (80076f8 <acc_sensor_protocol_r2_get_event+0xd0>)
 80076d4:	e7f2      	b.n	80076bc <acc_sensor_protocol_r2_get_event+0x94>
 80076d6:	bf00      	nop
 80076d8:	200004c0 	.word	0x200004c0
 80076dc:	0800ee78 	.word	0x0800ee78
 80076e0:	0800ed38 	.word	0x0800ed38
 80076e4:	0800ee64 	.word	0x0800ee64
 80076e8:	0800eebc 	.word	0x0800eebc
 80076ec:	00010016 	.word	0x00010016
 80076f0:	0800f198 	.word	0x0800f198
 80076f4:	0800ee9c 	.word	0x0800ee9c
 80076f8:	0800ee54 	.word	0x0800ee54

080076fc <acc_sensor_protocol_r2_wait_for_event>:
 80076fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007700:	b087      	sub	sp, #28
 8007702:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 80077b8 <acc_sensor_protocol_r2_wait_for_event+0xbc>
 8007706:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80077cc <acc_sensor_protocol_r2_wait_for_event+0xd0>
 800770a:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 80077c0 <acc_sensor_protocol_r2_wait_for_event+0xc4>
 800770e:	9303      	str	r3, [sp, #12]
 8007710:	4604      	mov	r4, r0
 8007712:	460e      	mov	r6, r1
 8007714:	4690      	mov	r8, r2
 8007716:	2500      	movs	r5, #0
 8007718:	e018      	b.n	800774c <acc_sensor_protocol_r2_wait_for_event+0x50>
 800771a:	4620      	mov	r0, r4
 800771c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007720:	f000 fbd0 	bl	8007ec4 <acc_sensor_reg_read>
 8007724:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8007728:	065b      	lsls	r3, r3, #25
 800772a:	d434      	bmi.n	8007796 <acc_sensor_protocol_r2_wait_for_event+0x9a>
 800772c:	f7fe f878 	bl	8005820 <acc_rss_integration_log_level>
 8007730:	4607      	mov	r7, r0
 8007732:	4623      	mov	r3, r4
 8007734:	4652      	mov	r2, sl
 8007736:	4649      	mov	r1, r9
 8007738:	2001      	movs	r0, #1
 800773a:	b117      	cbz	r7, 8007742 <acc_sensor_protocol_r2_wait_for_event+0x46>
 800773c:	f8db 7034 	ldr.w	r7, [fp, #52]	; 0x34
 8007740:	47b8      	blx	r7
 8007742:	4545      	cmp	r5, r8
 8007744:	f105 0301 	add.w	r3, r5, #1
 8007748:	d018      	beq.n	800777c <acc_sensor_protocol_r2_wait_for_event+0x80>
 800774a:	461d      	mov	r5, r3
 800774c:	4631      	mov	r1, r6
 800774e:	4620      	mov	r0, r4
 8007750:	f7fd ffe6 	bl	8005720 <acc_rss_integration_wait_for_sensor_interrupt>
 8007754:	f10d 0216 	add.w	r2, sp, #22
 8007758:	212a      	movs	r1, #42	; 0x2a
 800775a:	2300      	movs	r3, #0
 800775c:	4607      	mov	r7, r0
 800775e:	2800      	cmp	r0, #0
 8007760:	d1db      	bne.n	800771a <acc_sensor_protocol_r2_wait_for_event+0x1e>
 8007762:	4b15      	ldr	r3, [pc, #84]	; (80077b8 <acc_sensor_protocol_r2_wait_for_event+0xbc>)
 8007764:	4a15      	ldr	r2, [pc, #84]	; (80077bc <acc_sensor_protocol_r2_wait_for_event+0xc0>)
 8007766:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8007768:	4915      	ldr	r1, [pc, #84]	; (80077c0 <acc_sensor_protocol_r2_wait_for_event+0xc4>)
 800776a:	4623      	mov	r3, r4
 800776c:	47a8      	blx	r5
 800776e:	4620      	mov	r0, r4
 8007770:	f003 fefc 	bl	800b56c <acc_sensor_diagnostics_r2_sensor_status>
 8007774:	4638      	mov	r0, r7
 8007776:	b007      	add	sp, #28
 8007778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800777c:	4a0e      	ldr	r2, [pc, #56]	; (80077b8 <acc_sensor_protocol_r2_wait_for_event+0xbc>)
 800777e:	9400      	str	r4, [sp, #0]
 8007780:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8007782:	490f      	ldr	r1, [pc, #60]	; (80077c0 <acc_sensor_protocol_r2_wait_for_event+0xc4>)
 8007784:	4a0f      	ldr	r2, [pc, #60]	; (80077c4 <acc_sensor_protocol_r2_wait_for_event+0xc8>)
 8007786:	462b      	mov	r3, r5
 8007788:	2000      	movs	r0, #0
 800778a:	47a0      	blx	r4
 800778c:	2700      	movs	r7, #0
 800778e:	4638      	mov	r0, r7
 8007790:	b007      	add	sp, #28
 8007792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007796:	9903      	ldr	r1, [sp, #12]
 8007798:	4620      	mov	r0, r4
 800779a:	f7ff ff45 	bl	8007628 <acc_sensor_protocol_r2_get_event>
 800779e:	4607      	mov	r7, r0
 80077a0:	2800      	cmp	r0, #0
 80077a2:	d1e7      	bne.n	8007774 <acc_sensor_protocol_r2_wait_for_event+0x78>
 80077a4:	4b04      	ldr	r3, [pc, #16]	; (80077b8 <acc_sensor_protocol_r2_wait_for_event+0xbc>)
 80077a6:	4a08      	ldr	r2, [pc, #32]	; (80077c8 <acc_sensor_protocol_r2_wait_for_event+0xcc>)
 80077a8:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 80077aa:	4905      	ldr	r1, [pc, #20]	; (80077c0 <acc_sensor_protocol_r2_wait_for_event+0xc4>)
 80077ac:	4623      	mov	r3, r4
 80077ae:	47a8      	blx	r5
 80077b0:	4638      	mov	r0, r7
 80077b2:	b007      	add	sp, #28
 80077b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077b8:	200004c0 	.word	0x200004c0
 80077bc:	0800eeec 	.word	0x0800eeec
 80077c0:	0800ed38 	.word	0x0800ed38
 80077c4:	0800ef38 	.word	0x0800ef38
 80077c8:	0800ef74 	.word	0x0800ef74
 80077cc:	0800ef14 	.word	0x0800ef14

080077d0 <acc_sensor_protocol_r2_wait_for_specific_event>:
 80077d0:	b570      	push	{r4, r5, r6, lr}
 80077d2:	b084      	sub	sp, #16
 80077d4:	4616      	mov	r6, r2
 80077d6:	461c      	mov	r4, r3
 80077d8:	2264      	movs	r2, #100	; 0x64
 80077da:	ab03      	add	r3, sp, #12
 80077dc:	4605      	mov	r5, r0
 80077de:	f7ff ff8d 	bl	80076fc <acc_sensor_protocol_r2_wait_for_event>
 80077e2:	b168      	cbz	r0, 8007800 <acc_sensor_protocol_r2_wait_for_specific_event+0x30>
 80077e4:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80077e8:	42b3      	cmp	r3, r6
 80077ea:	d00b      	beq.n	8007804 <acc_sensor_protocol_r2_wait_for_specific_event+0x34>
 80077ec:	e9cd 3600 	strd	r3, r6, [sp]
 80077f0:	4a08      	ldr	r2, [pc, #32]	; (8007814 <acc_sensor_protocol_r2_wait_for_specific_event+0x44>)
 80077f2:	4b09      	ldr	r3, [pc, #36]	; (8007818 <acc_sensor_protocol_r2_wait_for_specific_event+0x48>)
 80077f4:	6b54      	ldr	r4, [r2, #52]	; 0x34
 80077f6:	4909      	ldr	r1, [pc, #36]	; (800781c <acc_sensor_protocol_r2_wait_for_specific_event+0x4c>)
 80077f8:	4a09      	ldr	r2, [pc, #36]	; (8007820 <acc_sensor_protocol_r2_wait_for_specific_event+0x50>)
 80077fa:	2000      	movs	r0, #0
 80077fc:	47a0      	blx	r4
 80077fe:	2000      	movs	r0, #0
 8007800:	b004      	add	sp, #16
 8007802:	bd70      	pop	{r4, r5, r6, pc}
 8007804:	2c00      	cmp	r4, #0
 8007806:	d0fb      	beq.n	8007800 <acc_sensor_protocol_r2_wait_for_specific_event+0x30>
 8007808:	4628      	mov	r0, r5
 800780a:	f7ff fee9 	bl	80075e0 <acc_sensor_protocol_r2_ack_event>
 800780e:	b004      	add	sp, #16
 8007810:	bd70      	pop	{r4, r5, r6, pc}
 8007812:	bf00      	nop
 8007814:	200004c0 	.word	0x200004c0
 8007818:	0800f21c 	.word	0x0800f21c
 800781c:	0800ed38 	.word	0x0800ed38
 8007820:	0800ef9c 	.word	0x0800ef9c

08007824 <acc_sensor_protocol_r2_wait_for_hibernate_ready>:
 8007824:	2301      	movs	r3, #1
 8007826:	220b      	movs	r2, #11
 8007828:	f7ff bfd2 	b.w	80077d0 <acc_sensor_protocol_r2_wait_for_specific_event>

0800782c <acc_sensor_protocol_r2_stop>:
 800782c:	b530      	push	{r4, r5, lr}
 800782e:	b083      	sub	sp, #12
 8007830:	460c      	mov	r4, r1
 8007832:	4605      	mov	r5, r0
 8007834:	f7ff fe98 	bl	8007568 <acc_sensor_protocol_r2_terminate_program>
 8007838:	b910      	cbnz	r0, 8007840 <acc_sensor_protocol_r2_stop+0x14>
 800783a:	2000      	movs	r0, #0
 800783c:	b003      	add	sp, #12
 800783e:	bd30      	pop	{r4, r5, pc}
 8007840:	4628      	mov	r0, r5
 8007842:	f7ff fecd 	bl	80075e0 <acc_sensor_protocol_r2_ack_event>
 8007846:	2800      	cmp	r0, #0
 8007848:	d0f7      	beq.n	800783a <acc_sensor_protocol_r2_stop+0xe>
 800784a:	4621      	mov	r1, r4
 800784c:	ab01      	add	r3, sp, #4
 800784e:	2264      	movs	r2, #100	; 0x64
 8007850:	4628      	mov	r0, r5
 8007852:	f7ff ff53 	bl	80076fc <acc_sensor_protocol_r2_wait_for_event>
 8007856:	2800      	cmp	r0, #0
 8007858:	d0ef      	beq.n	800783a <acc_sensor_protocol_r2_stop+0xe>
 800785a:	4628      	mov	r0, r5
 800785c:	f7ff fec0 	bl	80075e0 <acc_sensor_protocol_r2_ack_event>
 8007860:	2800      	cmp	r0, #0
 8007862:	d0ea      	beq.n	800783a <acc_sensor_protocol_r2_stop+0xe>
 8007864:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007868:	2b02      	cmp	r3, #2
 800786a:	d0e7      	beq.n	800783c <acc_sensor_protocol_r2_stop+0x10>
 800786c:	4a05      	ldr	r2, [pc, #20]	; (8007884 <acc_sensor_protocol_r2_stop+0x58>)
 800786e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8007872:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8007874:	4904      	ldr	r1, [pc, #16]	; (8007888 <acc_sensor_protocol_r2_stop+0x5c>)
 8007876:	4a05      	ldr	r2, [pc, #20]	; (800788c <acc_sensor_protocol_r2_stop+0x60>)
 8007878:	2000      	movs	r0, #0
 800787a:	47a0      	blx	r4
 800787c:	4628      	mov	r0, r5
 800787e:	f003 fe75 	bl	800b56c <acc_sensor_diagnostics_r2_sensor_status>
 8007882:	e7da      	b.n	800783a <acc_sensor_protocol_r2_stop+0xe>
 8007884:	200004c0 	.word	0x200004c0
 8007888:	0800ed38 	.word	0x0800ed38
 800788c:	0800efc8 	.word	0x0800efc8

08007890 <acc_sensor_protocol_r2_wait_for_radar_data>:
 8007890:	b570      	push	{r4, r5, r6, lr}
 8007892:	b084      	sub	sp, #16
 8007894:	4616      	mov	r6, r2
 8007896:	ab03      	add	r3, sp, #12
 8007898:	2264      	movs	r2, #100	; 0x64
 800789a:	4605      	mov	r5, r0
 800789c:	f7ff ff2e 	bl	80076fc <acc_sensor_protocol_r2_wait_for_event>
 80078a0:	4604      	mov	r4, r0
 80078a2:	b180      	cbz	r0, 80078c6 <acc_sensor_protocol_r2_wait_for_radar_data+0x36>
 80078a4:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80078a8:	2b06      	cmp	r3, #6
 80078aa:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80078ae:	d10d      	bne.n	80078cc <acc_sensor_protocol_r2_wait_for_radar_data+0x3c>
 80078b0:	0519      	lsls	r1, r3, #20
 80078b2:	d50b      	bpl.n	80078cc <acc_sensor_protocol_r2_wait_for_radar_data+0x3c>
 80078b4:	f413 6280 	ands.w	r2, r3, #1024	; 0x400
 80078b8:	d114      	bne.n	80078e4 <acc_sensor_protocol_r2_wait_for_radar_data+0x54>
 80078ba:	b106      	cbz	r6, 80078be <acc_sensor_protocol_r2_wait_for_radar_data+0x2e>
 80078bc:	7032      	strb	r2, [r6, #0]
 80078be:	05da      	lsls	r2, r3, #23
 80078c0:	d425      	bmi.n	800790e <acc_sensor_protocol_r2_wait_for_radar_data+0x7e>
 80078c2:	059b      	lsls	r3, r3, #22
 80078c4:	d418      	bmi.n	80078f8 <acc_sensor_protocol_r2_wait_for_radar_data+0x68>
 80078c6:	4620      	mov	r0, r4
 80078c8:	b004      	add	sp, #16
 80078ca:	bd70      	pop	{r4, r5, r6, pc}
 80078cc:	4a16      	ldr	r2, [pc, #88]	; (8007928 <acc_sensor_protocol_r2_wait_for_radar_data+0x98>)
 80078ce:	9300      	str	r3, [sp, #0]
 80078d0:	6b54      	ldr	r4, [r2, #52]	; 0x34
 80078d2:	4916      	ldr	r1, [pc, #88]	; (800792c <acc_sensor_protocol_r2_wait_for_radar_data+0x9c>)
 80078d4:	4a16      	ldr	r2, [pc, #88]	; (8007930 <acc_sensor_protocol_r2_wait_for_radar_data+0xa0>)
 80078d6:	462b      	mov	r3, r5
 80078d8:	2000      	movs	r0, #0
 80078da:	47a0      	blx	r4
 80078dc:	2400      	movs	r4, #0
 80078de:	4620      	mov	r0, r4
 80078e0:	b004      	add	sp, #16
 80078e2:	bd70      	pop	{r4, r5, r6, pc}
 80078e4:	4629      	mov	r1, r5
 80078e6:	200f      	movs	r0, #15
 80078e8:	f000 fad4 	bl	8007e94 <acc_probes_execute_primitive_probe>
 80078ec:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80078f0:	4622      	mov	r2, r4
 80078f2:	2e00      	cmp	r6, #0
 80078f4:	d1e2      	bne.n	80078bc <acc_sensor_protocol_r2_wait_for_radar_data+0x2c>
 80078f6:	e7e2      	b.n	80078be <acc_sensor_protocol_r2_wait_for_radar_data+0x2e>
 80078f8:	f7fd ff92 	bl	8005820 <acc_rss_integration_log_level>
 80078fc:	2803      	cmp	r0, #3
 80078fe:	d9e2      	bls.n	80078c6 <acc_sensor_protocol_r2_wait_for_radar_data+0x36>
 8007900:	4b09      	ldr	r3, [pc, #36]	; (8007928 <acc_sensor_protocol_r2_wait_for_radar_data+0x98>)
 8007902:	4a0c      	ldr	r2, [pc, #48]	; (8007934 <acc_sensor_protocol_r2_wait_for_radar_data+0xa4>)
 8007904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007906:	4909      	ldr	r1, [pc, #36]	; (800792c <acc_sensor_protocol_r2_wait_for_radar_data+0x9c>)
 8007908:	2004      	movs	r0, #4
 800790a:	4798      	blx	r3
 800790c:	e7db      	b.n	80078c6 <acc_sensor_protocol_r2_wait_for_radar_data+0x36>
 800790e:	f7fd ff87 	bl	8005820 <acc_rss_integration_log_level>
 8007912:	2803      	cmp	r0, #3
 8007914:	d905      	bls.n	8007922 <acc_sensor_protocol_r2_wait_for_radar_data+0x92>
 8007916:	4b04      	ldr	r3, [pc, #16]	; (8007928 <acc_sensor_protocol_r2_wait_for_radar_data+0x98>)
 8007918:	4a07      	ldr	r2, [pc, #28]	; (8007938 <acc_sensor_protocol_r2_wait_for_radar_data+0xa8>)
 800791a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800791c:	4903      	ldr	r1, [pc, #12]	; (800792c <acc_sensor_protocol_r2_wait_for_radar_data+0x9c>)
 800791e:	2004      	movs	r0, #4
 8007920:	4798      	blx	r3
 8007922:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8007926:	e7cc      	b.n	80078c2 <acc_sensor_protocol_r2_wait_for_radar_data+0x32>
 8007928:	200004c0 	.word	0x200004c0
 800792c:	0800ed38 	.word	0x0800ed38
 8007930:	0800efe8 	.word	0x0800efe8
 8007934:	0800f034 	.word	0x0800f034
 8007938:	0800f018 	.word	0x0800f018

0800793c <acc_sensor_protocol_r2_wait_for_sync_start>:
 800793c:	b570      	push	{r4, r5, r6, lr}
 800793e:	b084      	sub	sp, #16
 8007940:	ab03      	add	r3, sp, #12
 8007942:	2264      	movs	r2, #100	; 0x64
 8007944:	4605      	mov	r5, r0
 8007946:	f7ff fed9 	bl	80076fc <acc_sensor_protocol_r2_wait_for_event>
 800794a:	4604      	mov	r4, r0
 800794c:	b178      	cbz	r0, 800796e <acc_sensor_protocol_r2_wait_for_sync_start+0x32>
 800794e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8007952:	2b06      	cmp	r3, #6
 8007954:	d008      	beq.n	8007968 <acc_sensor_protocol_r2_wait_for_sync_start+0x2c>
 8007956:	4a0a      	ldr	r2, [pc, #40]	; (8007980 <acc_sensor_protocol_r2_wait_for_sync_start+0x44>)
 8007958:	9300      	str	r3, [sp, #0]
 800795a:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800795c:	4909      	ldr	r1, [pc, #36]	; (8007984 <acc_sensor_protocol_r2_wait_for_sync_start+0x48>)
 800795e:	4a0a      	ldr	r2, [pc, #40]	; (8007988 <acc_sensor_protocol_r2_wait_for_sync_start+0x4c>)
 8007960:	462b      	mov	r3, r5
 8007962:	2000      	movs	r0, #0
 8007964:	47a0      	blx	r4
 8007966:	2400      	movs	r4, #0
 8007968:	4620      	mov	r0, r4
 800796a:	b004      	add	sp, #16
 800796c:	bd70      	pop	{r4, r5, r6, pc}
 800796e:	4b04      	ldr	r3, [pc, #16]	; (8007980 <acc_sensor_protocol_r2_wait_for_sync_start+0x44>)
 8007970:	4a06      	ldr	r2, [pc, #24]	; (800798c <acc_sensor_protocol_r2_wait_for_sync_start+0x50>)
 8007972:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8007974:	4903      	ldr	r1, [pc, #12]	; (8007984 <acc_sensor_protocol_r2_wait_for_sync_start+0x48>)
 8007976:	462b      	mov	r3, r5
 8007978:	47b0      	blx	r6
 800797a:	4620      	mov	r0, r4
 800797c:	b004      	add	sp, #16
 800797e:	bd70      	pop	{r4, r5, r6, pc}
 8007980:	200004c0 	.word	0x200004c0
 8007984:	0800ed38 	.word	0x0800ed38
 8007988:	0800f080 	.word	0x0800f080
 800798c:	0800f04c 	.word	0x0800f04c

08007990 <acc_sensor_protocol_r2_transfer_data>:
 8007990:	b530      	push	{r4, r5, lr}
 8007992:	b083      	sub	sp, #12
 8007994:	4613      	mov	r3, r2
 8007996:	9201      	str	r2, [sp, #4]
 8007998:	2200      	movs	r2, #0
 800799a:	4605      	mov	r5, r0
 800799c:	f7ff fa80 	bl	8006ea0 <acc_sensor_r2_buffer_processed_read>
 80079a0:	9b01      	ldr	r3, [sp, #4]
 80079a2:	4604      	mov	r4, r0
 80079a4:	4602      	mov	r2, r0
 80079a6:	4629      	mov	r1, r5
 80079a8:	2000      	movs	r0, #0
 80079aa:	f000 fa45 	bl	8007e38 <acc_probes_execute_uint16>
 80079ae:	4620      	mov	r0, r4
 80079b0:	b003      	add	sp, #12
 80079b2:	bd30      	pop	{r4, r5, pc}

080079b4 <acc_sensor_protocol_r2_check_asic_id>:
 80079b4:	b530      	push	{r4, r5, lr}
 80079b6:	2400      	movs	r4, #0
 80079b8:	b085      	sub	sp, #20
 80079ba:	f10d 020e 	add.w	r2, sp, #14
 80079be:	460d      	mov	r5, r1
 80079c0:	4621      	mov	r1, r4
 80079c2:	f8ad 400e 	strh.w	r4, [sp, #14]
 80079c6:	f000 fa7d 	bl	8007ec4 <acc_sensor_reg_read>
 80079ca:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 80079ce:	f241 1312 	movw	r3, #4370	; 0x1112
 80079d2:	429a      	cmp	r2, r3
 80079d4:	d00a      	beq.n	80079ec <acc_sensor_protocol_r2_check_asic_id+0x38>
 80079d6:	b965      	cbnz	r5, 80079f2 <acc_sensor_protocol_r2_check_asic_id+0x3e>
 80079d8:	4907      	ldr	r1, [pc, #28]	; (80079f8 <acc_sensor_protocol_r2_check_asic_id+0x44>)
 80079da:	9200      	str	r2, [sp, #0]
 80079dc:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 80079de:	4a07      	ldr	r2, [pc, #28]	; (80079fc <acc_sensor_protocol_r2_check_asic_id+0x48>)
 80079e0:	4907      	ldr	r1, [pc, #28]	; (8007a00 <acc_sensor_protocol_r2_check_asic_id+0x4c>)
 80079e2:	4628      	mov	r0, r5
 80079e4:	47a0      	blx	r4
 80079e6:	4628      	mov	r0, r5
 80079e8:	b005      	add	sp, #20
 80079ea:	bd30      	pop	{r4, r5, pc}
 80079ec:	2001      	movs	r0, #1
 80079ee:	b005      	add	sp, #20
 80079f0:	bd30      	pop	{r4, r5, pc}
 80079f2:	4620      	mov	r0, r4
 80079f4:	b005      	add	sp, #20
 80079f6:	bd30      	pop	{r4, r5, pc}
 80079f8:	200004c0 	.word	0x200004c0
 80079fc:	0800f0bc 	.word	0x0800f0bc
 8007a00:	0800ed38 	.word	0x0800ed38

08007a04 <acc_sweep_manager_prepare>:
 8007a04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007a08:	4680      	mov	r8, r0
 8007a0a:	b095      	sub	sp, #84	; 0x54
 8007a0c:	4608      	mov	r0, r1
 8007a0e:	460c      	mov	r4, r1
 8007a10:	4617      	mov	r7, r2
 8007a12:	4699      	mov	r9, r3
 8007a14:	f7fd fa98 	bl	8004f48 <acc_base_configuration_sensor_get>
 8007a18:	4601      	mov	r1, r0
 8007a1a:	4620      	mov	r0, r4
 8007a1c:	9101      	str	r1, [sp, #4]
 8007a1e:	f7fd fbf1 	bl	8005204 <acc_base_configuration_wg_duration_get>
 8007a22:	4603      	mov	r3, r0
 8007a24:	4620      	mov	r0, r4
 8007a26:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007a2a:	f7fd fbd7 	bl	80051dc <acc_base_configuration_integrator_get>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	4620      	mov	r0, r4
 8007a32:	f8ad 300e 	strh.w	r3, [sp, #14]
 8007a36:	f7fd fbf9 	bl	800522c <acc_base_configuration_integrator_ramp_up_get>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	4620      	mov	r0, r4
 8007a3e:	f8ad 3010 	strh.w	r3, [sp, #16]
 8007a42:	f7fd faf5 	bl	8005030 <acc_base_configuration_decrease_tx_emission_get>
 8007a46:	4605      	mov	r5, r0
 8007a48:	2304      	movs	r3, #4
 8007a4a:	9901      	ldr	r1, [sp, #4]
 8007a4c:	f8ad 5012 	strh.w	r5, [sp, #18]
 8007a50:	aa03      	add	r2, sp, #12
 8007a52:	f108 0514 	add.w	r5, r8, #20
 8007a56:	2012      	movs	r0, #18
 8007a58:	f000 f9ee 	bl	8007e38 <acc_probes_execute_uint16>
 8007a5c:	2220      	movs	r2, #32
 8007a5e:	2100      	movs	r1, #0
 8007a60:	4628      	mov	r0, r5
 8007a62:	f005 fba3 	bl	800d1ac <memset>
 8007a66:	6823      	ldr	r3, [r4, #0]
 8007a68:	4628      	mov	r0, r5
 8007a6a:	4621      	mov	r1, r4
 8007a6c:	4798      	blx	r3
 8007a6e:	4606      	mov	r6, r0
 8007a70:	2800      	cmp	r0, #0
 8007a72:	d04e      	beq.n	8007b12 <acc_sweep_manager_prepare+0x10e>
 8007a74:	2220      	movs	r2, #32
 8007a76:	2100      	movs	r1, #0
 8007a78:	a80c      	add	r0, sp, #48	; 0x30
 8007a7a:	f005 fb97 	bl	800d1ac <memset>
 8007a7e:	f8d8 002c 	ldr.w	r0, [r8, #44]	; 0x2c
 8007a82:	2100      	movs	r1, #0
 8007a84:	6806      	ldr	r6, [r0, #0]
 8007a86:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 8007a8a:	e9cd 1105 	strd	r1, r1, [sp, #20]
 8007a8e:	e9cd 1107 	strd	r1, r1, [sp, #28]
 8007a92:	e9cd 1109 	strd	r1, r1, [sp, #36]	; 0x24
 8007a96:	aa0c      	add	r2, sp, #48	; 0x30
 8007a98:	ab05      	add	r3, sp, #20
 8007a9a:	4621      	mov	r1, r4
 8007a9c:	4628      	mov	r0, r5
 8007a9e:	47b0      	blx	r6
 8007aa0:	4606      	mov	r6, r0
 8007aa2:	2800      	cmp	r0, #0
 8007aa4:	d039      	beq.n	8007b1a <acc_sweep_manager_prepare+0x116>
 8007aa6:	b137      	cbz	r7, 8007ab6 <acc_sweep_manager_prepare+0xb2>
 8007aa8:	ad0c      	add	r5, sp, #48	; 0x30
 8007aaa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007aac:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8007aae:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007ab2:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8007ab6:	f1b9 0f00 	cmp.w	r9, #0
 8007aba:	d011      	beq.n	8007ae0 <acc_sweep_manager_prepare+0xdc>
 8007abc:	ad05      	add	r5, sp, #20
 8007abe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007ac0:	f8c9 0000 	str.w	r0, [r9]
 8007ac4:	f8c9 1004 	str.w	r1, [r9, #4]
 8007ac8:	cd03      	ldmia	r5!, {r0, r1}
 8007aca:	882d      	ldrh	r5, [r5, #0]
 8007acc:	f8c9 2008 	str.w	r2, [r9, #8]
 8007ad0:	f8c9 300c 	str.w	r3, [r9, #12]
 8007ad4:	f8a9 5018 	strh.w	r5, [r9, #24]
 8007ad8:	f8c9 0010 	str.w	r0, [r9, #16]
 8007adc:	f8c9 1014 	str.w	r1, [r9, #20]
 8007ae0:	4620      	mov	r0, r4
 8007ae2:	f7fd fb4b 	bl	800517c <acc_base_configuration_repetition_mode_get>
 8007ae6:	2801      	cmp	r0, #1
 8007ae8:	d020      	beq.n	8007b2c <acc_sweep_manager_prepare+0x128>
 8007aea:	4620      	mov	r0, r4
 8007aec:	f7fd fb4e 	bl	800518c <acc_base_configuration_update_rate_get>
 8007af0:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8007b34 <acc_sweep_manager_prepare+0x130>
 8007af4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007af8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007afc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b00:	ee17 3a90 	vmov	r3, s15
 8007b04:	2200      	movs	r2, #0
 8007b06:	f8c8 3000 	str.w	r3, [r8]
 8007b0a:	f8c8 2008 	str.w	r2, [r8, #8]
 8007b0e:	f8a8 2006 	strh.w	r2, [r8, #6]
 8007b12:	4630      	mov	r0, r6
 8007b14:	b015      	add	sp, #84	; 0x54
 8007b16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007b1a:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 8007b1e:	4628      	mov	r0, r5
 8007b20:	6a1b      	ldr	r3, [r3, #32]
 8007b22:	4798      	blx	r3
 8007b24:	4630      	mov	r0, r6
 8007b26:	b015      	add	sp, #84	; 0x54
 8007b28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007b2c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8007b30:	e7e8      	b.n	8007b04 <acc_sweep_manager_prepare+0x100>
 8007b32:	bf00      	nop
 8007b34:	44fa0000 	.word	0x44fa0000

08007b38 <acc_sweep_manager_release>:
 8007b38:	b120      	cbz	r0, 8007b44 <acc_sweep_manager_release+0xc>
 8007b3a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8007b3c:	b113      	cbz	r3, 8007b44 <acc_sweep_manager_release+0xc>
 8007b3e:	6a1b      	ldr	r3, [r3, #32]
 8007b40:	3014      	adds	r0, #20
 8007b42:	4718      	bx	r3
 8007b44:	4770      	bx	lr
 8007b46:	bf00      	nop

08007b48 <acc_sweep_manager_is_sensor_connected>:
 8007b48:	3014      	adds	r0, #20
 8007b4a:	f003 bc69 	b.w	800b420 <acc_radar_engine_check_asic_id>
 8007b4e:	bf00      	nop

08007b50 <acc_sweep_manager_calibrate>:
 8007b50:	b410      	push	{r4}
 8007b52:	4604      	mov	r4, r0
 8007b54:	3014      	adds	r0, #20
 8007b56:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 8007b58:	68a4      	ldr	r4, [r4, #8]
 8007b5a:	46a4      	mov	ip, r4
 8007b5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b60:	4760      	bx	ip
 8007b62:	bf00      	nop

08007b64 <acc_sweep_manager_measure_noise>:
 8007b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b68:	4604      	mov	r4, r0
 8007b6a:	e9d0 050a 	ldrd	r0, r5, [r0, #40]	; 0x28
 8007b6e:	686f      	ldr	r7, [r5, #4]
 8007b70:	461e      	mov	r6, r3
 8007b72:	4615      	mov	r5, r2
 8007b74:	47b8      	blx	r7
 8007b76:	b140      	cbz	r0, 8007b8a <acc_sweep_manager_measure_noise+0x26>
 8007b78:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007b7a:	4632      	mov	r2, r6
 8007b7c:	4629      	mov	r1, r5
 8007b7e:	f104 0014 	add.w	r0, r4, #20
 8007b82:	68db      	ldr	r3, [r3, #12]
 8007b84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b88:	4718      	bx	r3
 8007b8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b8e:	bf00      	nop

08007b90 <acc_sweep_manager_start>:
 8007b90:	b570      	push	{r4, r5, r6, lr}
 8007b92:	4604      	mov	r4, r0
 8007b94:	e9d0 030a 	ldrd	r0, r3, [r0, #40]	; 0x28
 8007b98:	685b      	ldr	r3, [r3, #4]
 8007b9a:	4615      	mov	r5, r2
 8007b9c:	4798      	blx	r3
 8007b9e:	b138      	cbz	r0, 8007bb0 <acc_sweep_manager_start+0x20>
 8007ba0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007ba2:	4629      	mov	r1, r5
 8007ba4:	f104 0014 	add.w	r0, r4, #20
 8007ba8:	691b      	ldr	r3, [r3, #16]
 8007baa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007bae:	4718      	bx	r3
 8007bb0:	bd70      	pop	{r4, r5, r6, pc}
 8007bb2:	bf00      	nop

08007bb4 <acc_sweep_manager_wait_for_data>:
 8007bb4:	f850 1b14 	ldr.w	r1, [r0], #20
 8007bb8:	2200      	movs	r2, #0
 8007bba:	f003 bc35 	b.w	800b428 <acc_radar_engine_wait_for_radar_data>
 8007bbe:	bf00      	nop

08007bc0 <acc_sweep_manager_wait_for_hibernate_ready>:
 8007bc0:	f850 1b14 	ldr.w	r1, [r0], #20
 8007bc4:	f003 bc38 	b.w	800b438 <acc_radar_engine_wait_for_hibernate_ready>

08007bc8 <acc_sweep_manager_measure>:
 8007bc8:	3014      	adds	r0, #20
 8007bca:	f003 bc31 	b.w	800b430 <acc_radar_engine_measure>
 8007bce:	bf00      	nop

08007bd0 <acc_sweep_manager_acquire_adc_data>:
 8007bd0:	b570      	push	{r4, r5, r6, lr}
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	b084      	sub	sp, #16
 8007bd6:	4604      	mov	r4, r0
 8007bd8:	6043      	str	r3, [r0, #4]
 8007bda:	6083      	str	r3, [r0, #8]
 8007bdc:	60c3      	str	r3, [r0, #12]
 8007bde:	6103      	str	r3, [r0, #16]
 8007be0:	466a      	mov	r2, sp
 8007be2:	3014      	adds	r0, #20
 8007be4:	f003 fc2c 	bl	800b440 <acc_radar_engine_acquire_adc_data>
 8007be8:	9b02      	ldr	r3, [sp, #8]
 8007bea:	f8bd 6000 	ldrh.w	r6, [sp]
 8007bee:	f8bd 5002 	ldrh.w	r5, [sp, #2]
 8007bf2:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8007bf6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8007bfa:	60a0      	str	r0, [r4, #8]
 8007bfc:	1d20      	adds	r0, r4, #4
 8007bfe:	80e6      	strh	r6, [r4, #6]
 8007c00:	80a5      	strh	r5, [r4, #4]
 8007c02:	7321      	strb	r1, [r4, #12]
 8007c04:	7362      	strb	r2, [r4, #13]
 8007c06:	6123      	str	r3, [r4, #16]
 8007c08:	b004      	add	sp, #16
 8007c0a:	bd70      	pop	{r4, r5, r6, pc}

08007c0c <acc_alg_cca_u16_calculate>:
 8007c0c:	2901      	cmp	r1, #1
 8007c0e:	b538      	push	{r3, r4, r5, lr}
 8007c10:	d925      	bls.n	8007c5e <acc_alg_cca_u16_calculate+0x52>
 8007c12:	1e8d      	subs	r5, r1, #2
 8007c14:	1c83      	adds	r3, r0, #2
 8007c16:	b2ad      	uxth	r5, r5
 8007c18:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8007c1c:	2400      	movs	r4, #0
 8007c1e:	4602      	mov	r2, r0
 8007c20:	3002      	adds	r0, #2
 8007c22:	8853      	ldrh	r3, [r2, #2]
 8007c24:	8812      	ldrh	r2, [r2, #0]
 8007c26:	1a9b      	subs	r3, r3, r2
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	bfb8      	it	lt
 8007c2c:	425b      	neglt	r3, r3
 8007c2e:	4285      	cmp	r5, r0
 8007c30:	441c      	add	r4, r3
 8007c32:	d1f4      	bne.n	8007c1e <acc_alg_cca_u16_calculate+0x12>
 8007c34:	ee07 4a90 	vmov	s15, r4
 8007c38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007c3c:	ee07 1a10 	vmov	s14, r1
 8007c40:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 8007c44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c48:	ee30 0a47 	vsub.f32	s0, s0, s14
 8007c4c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8007c50:	f006 f8ac 	bl	800ddac <log10f>
 8007c54:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8007c58:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007c5c:	bd38      	pop	{r3, r4, r5, pc}
 8007c5e:	eddf 7a01 	vldr	s15, [pc, #4]	; 8007c64 <acc_alg_cca_u16_calculate+0x58>
 8007c62:	e7eb      	b.n	8007c3c <acc_alg_cca_u16_calculate+0x30>
 8007c64:	00000000 	.word	0x00000000

08007c68 <acc_assert_fail>:
 8007c68:	b500      	push	{lr}
 8007c6a:	4b07      	ldr	r3, [pc, #28]	; (8007c88 <acc_assert_fail+0x20>)
 8007c6c:	4a07      	ldr	r2, [pc, #28]	; (8007c8c <acc_assert_fail+0x24>)
 8007c6e:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8007c70:	b083      	sub	sp, #12
 8007c72:	4603      	mov	r3, r0
 8007c74:	9100      	str	r1, [sp, #0]
 8007c76:	2000      	movs	r0, #0
 8007c78:	4905      	ldr	r1, [pc, #20]	; (8007c90 <acc_assert_fail+0x28>)
 8007c7a:	47a0      	blx	r4
 8007c7c:	4b05      	ldr	r3, [pc, #20]	; (8007c94 <acc_assert_fail+0x2c>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	b103      	cbz	r3, 8007c84 <acc_assert_fail+0x1c>
 8007c82:	4798      	blx	r3
 8007c84:	e7fe      	b.n	8007c84 <acc_assert_fail+0x1c>
 8007c86:	bf00      	nop
 8007c88:	200004c0 	.word	0x200004c0
 8007c8c:	0800f24c 	.word	0x0800f24c
 8007c90:	0800f264 	.word	0x0800f264
 8007c94:	2000036c 	.word	0x2000036c

08007c98 <acc_element_sizeof>:
 8007c98:	3801      	subs	r0, #1
 8007c9a:	b2c0      	uxtb	r0, r0
 8007c9c:	2807      	cmp	r0, #7
 8007c9e:	bf9a      	itte	ls
 8007ca0:	4b02      	ldrls	r3, [pc, #8]	; (8007cac <acc_element_sizeof+0x14>)
 8007ca2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8007ca6:	2000      	movhi	r0, #0
 8007ca8:	4770      	bx	lr
 8007caa:	bf00      	nop
 8007cac:	0800f26c 	.word	0x0800f26c

08007cb0 <acc_element_connect>:
 8007cb0:	6001      	str	r1, [r0, #0]
 8007cb2:	4770      	bx	lr

08007cb4 <event>:
 8007cb4:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8007cb6:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8007cb8:	ed90 0a0e 	vldr	s0, [r0, #56]	; 0x38
 8007cbc:	6811      	ldr	r1, [r2, #0]
 8007cbe:	b570      	push	{r4, r5, r6, lr}
 8007cc0:	4604      	mov	r4, r0
 8007cc2:	e9d0 0504 	ldrd	r0, r5, [r0, #16]
 8007cc6:	4798      	blx	r3
 8007cc8:	6823      	ldr	r3, [r4, #0]
 8007cca:	7028      	strb	r0, [r5, #0]
 8007ccc:	685a      	ldr	r2, [r3, #4]
 8007cce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	4710      	bx	r2
 8007cd6:	bf00      	nop

08007cd8 <reset>:
 8007cd8:	6800      	ldr	r0, [r0, #0]
 8007cda:	68c3      	ldr	r3, [r0, #12]
 8007cdc:	4718      	bx	r3
 8007cde:	bf00      	nop

08007ce0 <validate>:
 8007ce0:	6983      	ldr	r3, [r0, #24]
 8007ce2:	b510      	push	{r4, lr}
 8007ce4:	4604      	mov	r4, r0
 8007ce6:	b113      	cbz	r3, 8007cee <validate+0xe>
 8007ce8:	f7fd fd9a 	bl	8005820 <acc_rss_integration_log_level>
 8007cec:	b978      	cbnz	r0, 8007d0e <validate+0x2e>
 8007cee:	69e3      	ldr	r3, [r4, #28]
 8007cf0:	b143      	cbz	r3, 8007d04 <validate+0x24>
 8007cf2:	f7fd fd95 	bl	8005820 <acc_rss_integration_log_level>
 8007cf6:	b128      	cbz	r0, 8007d04 <validate+0x24>
 8007cf8:	4b08      	ldr	r3, [pc, #32]	; (8007d1c <validate+0x3c>)
 8007cfa:	4a09      	ldr	r2, [pc, #36]	; (8007d20 <validate+0x40>)
 8007cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cfe:	4909      	ldr	r1, [pc, #36]	; (8007d24 <validate+0x44>)
 8007d00:	2001      	movs	r0, #1
 8007d02:	4798      	blx	r3
 8007d04:	6820      	ldr	r0, [r4, #0]
 8007d06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d0a:	6883      	ldr	r3, [r0, #8]
 8007d0c:	4718      	bx	r3
 8007d0e:	4b03      	ldr	r3, [pc, #12]	; (8007d1c <validate+0x3c>)
 8007d10:	4a05      	ldr	r2, [pc, #20]	; (8007d28 <validate+0x48>)
 8007d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d14:	4903      	ldr	r1, [pc, #12]	; (8007d24 <validate+0x44>)
 8007d16:	2001      	movs	r0, #1
 8007d18:	4798      	blx	r3
 8007d1a:	e7e8      	b.n	8007cee <validate+0xe>
 8007d1c:	200004c0 	.word	0x200004c0
 8007d20:	0800f2bc 	.word	0x0800f2bc
 8007d24:	0800f2a0 	.word	0x0800f2a0
 8007d28:	0800f28c 	.word	0x0800f28c

08007d2c <saturation_check_i16>:
 8007d2c:	f003 be8e 	b.w	800ba4c <acc_alg_basic_saturation_check_i16>

08007d30 <saturation_check_u16>:
 8007d30:	f003 be58 	b.w	800b9e4 <acc_alg_basic_saturation_check_u16>

08007d34 <acc_element_saturation_check_init>:
 8007d34:	2903      	cmp	r1, #3
 8007d36:	ed80 0a0e 	vstr	s0, [r0, #56]	; 0x38
 8007d3a:	d00e      	beq.n	8007d5a <acc_element_saturation_check_init+0x26>
 8007d3c:	2905      	cmp	r1, #5
 8007d3e:	d016      	beq.n	8007d6e <acc_element_saturation_check_init+0x3a>
 8007d40:	2902      	cmp	r1, #2
 8007d42:	d014      	beq.n	8007d6e <acc_element_saturation_check_init+0x3a>
 8007d44:	b510      	push	{r4, lr}
 8007d46:	4b0b      	ldr	r3, [pc, #44]	; (8007d74 <acc_element_saturation_check_init+0x40>)
 8007d48:	4a0b      	ldr	r2, [pc, #44]	; (8007d78 <acc_element_saturation_check_init+0x44>)
 8007d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d4c:	490b      	ldr	r1, [pc, #44]	; (8007d7c <acc_element_saturation_check_init+0x48>)
 8007d4e:	2400      	movs	r4, #0
 8007d50:	63c4      	str	r4, [r0, #60]	; 0x3c
 8007d52:	4620      	mov	r0, r4
 8007d54:	4798      	blx	r3
 8007d56:	4620      	mov	r0, r4
 8007d58:	bd10      	pop	{r4, pc}
 8007d5a:	4b09      	ldr	r3, [pc, #36]	; (8007d80 <acc_element_saturation_check_init+0x4c>)
 8007d5c:	63c3      	str	r3, [r0, #60]	; 0x3c
 8007d5e:	4909      	ldr	r1, [pc, #36]	; (8007d84 <acc_element_saturation_check_init+0x50>)
 8007d60:	4a09      	ldr	r2, [pc, #36]	; (8007d88 <acc_element_saturation_check_init+0x54>)
 8007d62:	4b0a      	ldr	r3, [pc, #40]	; (8007d8c <acc_element_saturation_check_init+0x58>)
 8007d64:	60c3      	str	r3, [r0, #12]
 8007d66:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8007d6a:	2001      	movs	r0, #1
 8007d6c:	4770      	bx	lr
 8007d6e:	4b08      	ldr	r3, [pc, #32]	; (8007d90 <acc_element_saturation_check_init+0x5c>)
 8007d70:	63c3      	str	r3, [r0, #60]	; 0x3c
 8007d72:	e7f4      	b.n	8007d5e <acc_element_saturation_check_init+0x2a>
 8007d74:	200004c0 	.word	0x200004c0
 8007d78:	0800f2cc 	.word	0x0800f2cc
 8007d7c:	0800f2a0 	.word	0x0800f2a0
 8007d80:	08007d2d 	.word	0x08007d2d
 8007d84:	08007cb5 	.word	0x08007cb5
 8007d88:	08007ce1 	.word	0x08007ce1
 8007d8c:	08007cd9 	.word	0x08007cd9
 8007d90:	08007d31 	.word	0x08007d31

08007d94 <consume>:
 8007d94:	b510      	push	{r4, lr}
 8007d96:	4604      	mov	r4, r0
 8007d98:	e9d0 230f 	ldrd	r2, r3, [r0, #60]	; 0x3c
 8007d9c:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8007d9e:	6900      	ldr	r0, [r0, #16]
 8007da0:	4798      	blx	r3
 8007da2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007da4:	2200      	movs	r2, #0
 8007da6:	611a      	str	r2, [r3, #16]
 8007da8:	bd10      	pop	{r4, pc}
 8007daa:	bf00      	nop

08007dac <reset>:
 8007dac:	4770      	bx	lr
 8007dae:	bf00      	nop

08007db0 <validate>:
 8007db0:	6983      	ldr	r3, [r0, #24]
 8007db2:	b510      	push	{r4, lr}
 8007db4:	4604      	mov	r4, r0
 8007db6:	b113      	cbz	r3, 8007dbe <validate+0xe>
 8007db8:	f7fd fd32 	bl	8005820 <acc_rss_integration_log_level>
 8007dbc:	b9c8      	cbnz	r0, 8007df2 <validate+0x42>
 8007dbe:	69e3      	ldr	r3, [r4, #28]
 8007dc0:	b113      	cbz	r3, 8007dc8 <validate+0x18>
 8007dc2:	f7fd fd2d 	bl	8005820 <acc_rss_integration_log_level>
 8007dc6:	b948      	cbnz	r0, 8007ddc <validate+0x2c>
 8007dc8:	6963      	ldr	r3, [r4, #20]
 8007dca:	b183      	cbz	r3, 8007dee <validate+0x3e>
 8007dcc:	4b0c      	ldr	r3, [pc, #48]	; (8007e00 <validate+0x50>)
 8007dce:	4a0d      	ldr	r2, [pc, #52]	; (8007e04 <validate+0x54>)
 8007dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dd2:	490d      	ldr	r1, [pc, #52]	; (8007e08 <validate+0x58>)
 8007dd4:	2000      	movs	r0, #0
 8007dd6:	4798      	blx	r3
 8007dd8:	2000      	movs	r0, #0
 8007dda:	bd10      	pop	{r4, pc}
 8007ddc:	4b08      	ldr	r3, [pc, #32]	; (8007e00 <validate+0x50>)
 8007dde:	4a0b      	ldr	r2, [pc, #44]	; (8007e0c <validate+0x5c>)
 8007de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007de2:	4909      	ldr	r1, [pc, #36]	; (8007e08 <validate+0x58>)
 8007de4:	2001      	movs	r0, #1
 8007de6:	4798      	blx	r3
 8007de8:	6963      	ldr	r3, [r4, #20]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d1ee      	bne.n	8007dcc <validate+0x1c>
 8007dee:	2001      	movs	r0, #1
 8007df0:	bd10      	pop	{r4, pc}
 8007df2:	4b03      	ldr	r3, [pc, #12]	; (8007e00 <validate+0x50>)
 8007df4:	4a06      	ldr	r2, [pc, #24]	; (8007e10 <validate+0x60>)
 8007df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007df8:	4903      	ldr	r1, [pc, #12]	; (8007e08 <validate+0x58>)
 8007dfa:	2001      	movs	r0, #1
 8007dfc:	4798      	blx	r3
 8007dfe:	e7de      	b.n	8007dbe <validate+0xe>
 8007e00:	200004c0 	.word	0x200004c0
 8007e04:	0800f2f8 	.word	0x0800f2f8
 8007e08:	0800f2e0 	.word	0x0800f2e0
 8007e0c:	0800f2bc 	.word	0x0800f2bc
 8007e10:	0800f28c 	.word	0x0800f28c

08007e14 <acc_element_sink_callback_init>:
 8007e14:	b410      	push	{r4}
 8007e16:	4a05      	ldr	r2, [pc, #20]	; (8007e2c <acc_element_sink_callback_init+0x18>)
 8007e18:	4c05      	ldr	r4, [pc, #20]	; (8007e30 <acc_element_sink_callback_init+0x1c>)
 8007e1a:	4b06      	ldr	r3, [pc, #24]	; (8007e34 <acc_element_sink_callback_init+0x20>)
 8007e1c:	6401      	str	r1, [r0, #64]	; 0x40
 8007e1e:	e9c0 4201 	strd	r4, r2, [r0, #4]
 8007e22:	60c3      	str	r3, [r0, #12]
 8007e24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e28:	4770      	bx	lr
 8007e2a:	bf00      	nop
 8007e2c:	08007db1 	.word	0x08007db1
 8007e30:	08007d95 	.word	0x08007d95
 8007e34:	08007dad 	.word	0x08007dad

08007e38 <acc_probes_execute_uint16>:
 8007e38:	b530      	push	{r4, r5, lr}
 8007e3a:	4c09      	ldr	r4, [pc, #36]	; (8007e60 <acc_probes_execute_uint16+0x28>)
 8007e3c:	eb04 1400 	add.w	r4, r4, r0, lsl #4
 8007e40:	b085      	sub	sp, #20
 8007e42:	6865      	ldr	r5, [r4, #4]
 8007e44:	f88d 0004 	strb.w	r0, [sp, #4]
 8007e48:	2001      	movs	r0, #1
 8007e4a:	e9cd 1002 	strd	r1, r0, [sp, #8]
 8007e4e:	b12d      	cbz	r5, 8007e5c <acc_probes_execute_uint16+0x24>
 8007e50:	4611      	mov	r1, r2
 8007e52:	461a      	mov	r2, r3
 8007e54:	4082      	lsls	r2, r0
 8007e56:	68e3      	ldr	r3, [r4, #12]
 8007e58:	a801      	add	r0, sp, #4
 8007e5a:	47a8      	blx	r5
 8007e5c:	b005      	add	sp, #20
 8007e5e:	bd30      	pop	{r4, r5, pc}
 8007e60:	2000000c 	.word	0x2000000c

08007e64 <acc_probes_execute_struct>:
 8007e64:	b530      	push	{r4, r5, lr}
 8007e66:	4c0a      	ldr	r4, [pc, #40]	; (8007e90 <acc_probes_execute_struct+0x2c>)
 8007e68:	eb04 1400 	add.w	r4, r4, r0, lsl #4
 8007e6c:	b085      	sub	sp, #20
 8007e6e:	6865      	ldr	r5, [r4, #4]
 8007e70:	f88d 0004 	strb.w	r0, [sp, #4]
 8007e74:	2007      	movs	r0, #7
 8007e76:	e9cd 1002 	strd	r1, r0, [sp, #8]
 8007e7a:	b135      	cbz	r5, 8007e8a <acc_probes_execute_struct+0x26>
 8007e7c:	4611      	mov	r1, r2
 8007e7e:	a801      	add	r0, sp, #4
 8007e80:	461a      	mov	r2, r3
 8007e82:	68e3      	ldr	r3, [r4, #12]
 8007e84:	47a8      	blx	r5
 8007e86:	b005      	add	sp, #20
 8007e88:	bd30      	pop	{r4, r5, pc}
 8007e8a:	2001      	movs	r0, #1
 8007e8c:	b005      	add	sp, #20
 8007e8e:	bd30      	pop	{r4, r5, pc}
 8007e90:	2000000c 	.word	0x2000000c

08007e94 <acc_probes_execute_primitive_probe>:
 8007e94:	b510      	push	{r4, lr}
 8007e96:	4b0a      	ldr	r3, [pc, #40]	; (8007ec0 <acc_probes_execute_primitive_probe+0x2c>)
 8007e98:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8007e9c:	b084      	sub	sp, #16
 8007e9e:	685c      	ldr	r4, [r3, #4]
 8007ea0:	f88d 0004 	strb.w	r0, [sp, #4]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8007eaa:	b12c      	cbz	r4, 8007eb8 <acc_probes_execute_primitive_probe+0x24>
 8007eac:	68db      	ldr	r3, [r3, #12]
 8007eae:	4611      	mov	r1, r2
 8007eb0:	a801      	add	r0, sp, #4
 8007eb2:	47a0      	blx	r4
 8007eb4:	b004      	add	sp, #16
 8007eb6:	bd10      	pop	{r4, pc}
 8007eb8:	2001      	movs	r0, #1
 8007eba:	b004      	add	sp, #16
 8007ebc:	bd10      	pop	{r4, pc}
 8007ebe:	bf00      	nop
 8007ec0:	2000000c 	.word	0x2000000c

08007ec4 <acc_sensor_reg_read>:
 8007ec4:	b530      	push	{r4, r5, lr}
 8007ec6:	b083      	sub	sp, #12
 8007ec8:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
 8007ecc:	4614      	mov	r4, r2
 8007ece:	2500      	movs	r5, #0
 8007ed0:	f8ad 1000 	strh.w	r1, [sp]
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	2203      	movs	r2, #3
 8007ed8:	4669      	mov	r1, sp
 8007eda:	f8ad 5002 	strh.w	r5, [sp, #2]
 8007ede:	f8ad 5004 	strh.w	r5, [sp, #4]
 8007ee2:	f7fd fc23 	bl	800572c <acc_rss_integration_sensor_device_transfer>
 8007ee6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8007eea:	8023      	strh	r3, [r4, #0]
 8007eec:	b003      	add	sp, #12
 8007eee:	bd30      	pop	{r4, r5, pc}

08007ef0 <acc_sensor_reg_write>:
 8007ef0:	b530      	push	{r4, r5, lr}
 8007ef2:	b083      	sub	sp, #12
 8007ef4:	f441 5480 	orr.w	r4, r1, #4096	; 0x1000
 8007ef8:	4615      	mov	r5, r2
 8007efa:	2300      	movs	r3, #0
 8007efc:	2202      	movs	r2, #2
 8007efe:	a901      	add	r1, sp, #4
 8007f00:	f8ad 4004 	strh.w	r4, [sp, #4]
 8007f04:	f8ad 5006 	strh.w	r5, [sp, #6]
 8007f08:	f7fd fc10 	bl	800572c <acc_rss_integration_sensor_device_transfer>
 8007f0c:	b003      	add	sp, #12
 8007f0e:	bd30      	pop	{r4, r5, pc}

08007f10 <acc_sensor_reg_field_write>:
 8007f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f14:	b082      	sub	sp, #8
 8007f16:	461d      	mov	r5, r3
 8007f18:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8007f1c:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
 8007f20:	f8ad 3000 	strh.w	r3, [sp]
 8007f24:	2700      	movs	r7, #0
 8007f26:	468a      	mov	sl, r1
 8007f28:	4691      	mov	r9, r2
 8007f2a:	4669      	mov	r1, sp
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	2203      	movs	r2, #3
 8007f30:	4680      	mov	r8, r0
 8007f32:	f8ad 7002 	strh.w	r7, [sp, #2]
 8007f36:	f8ad 7004 	strh.w	r7, [sp, #4]
 8007f3a:	f7fd fbf7 	bl	800572c <acc_rss_integration_sensor_device_transfer>
 8007f3e:	f9bd 6004 	ldrsh.w	r6, [sp, #4]
 8007f42:	fa04 f10a 	lsl.w	r1, r4, sl
 8007f46:	4071      	eors	r1, r6
 8007f48:	ea01 0409 	and.w	r4, r1, r9
 8007f4c:	f445 5580 	orr.w	r5, r5, #4096	; 0x1000
 8007f50:	4640      	mov	r0, r8
 8007f52:	463b      	mov	r3, r7
 8007f54:	4669      	mov	r1, sp
 8007f56:	4074      	eors	r4, r6
 8007f58:	2202      	movs	r2, #2
 8007f5a:	f8ad 5000 	strh.w	r5, [sp]
 8007f5e:	f8ad 4002 	strh.w	r4, [sp, #2]
 8007f62:	f7fd fbe3 	bl	800572c <acc_rss_integration_sensor_device_transfer>
 8007f66:	b002      	add	sp, #8
 8007f68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007f6c <acc_sensor_conf_read_instr>:
 8007f6c:	b530      	push	{r4, r5, lr}
 8007f6e:	b085      	sub	sp, #20
 8007f70:	2401      	movs	r4, #1
 8007f72:	f441 4120 	orr.w	r1, r1, #40960	; 0xa000
 8007f76:	4623      	mov	r3, r4
 8007f78:	2500      	movs	r5, #0
 8007f7a:	f8ad 1004 	strh.w	r1, [sp, #4]
 8007f7e:	2205      	movs	r2, #5
 8007f80:	a901      	add	r1, sp, #4
 8007f82:	f8ad 4006 	strh.w	r4, [sp, #6]
 8007f86:	f8ad 5008 	strh.w	r5, [sp, #8]
 8007f8a:	f8cd 500a 	str.w	r5, [sp, #10]
 8007f8e:	f7fd fbcd 	bl	800572c <acc_rss_integration_sensor_device_transfer>
 8007f92:	f10d 000a 	add.w	r0, sp, #10
 8007f96:	4622      	mov	r2, r4
 8007f98:	4669      	mov	r1, sp
 8007f9a:	f000 f92f 	bl	80081fc <acc_utils_transfer_buffer_to_uint32>
 8007f9e:	9800      	ldr	r0, [sp, #0]
 8007fa0:	b005      	add	sp, #20
 8007fa2:	bd30      	pop	{r4, r5, pc}

08007fa4 <acc_cpd_pll_divisors_calculate>:
 8007fa4:	edd0 7a00 	vldr	s15, [r0]
 8007fa8:	ed9f 6a61 	vldr	s12, [pc, #388]	; 8008130 <acc_cpd_pll_divisors_calculate+0x18c>
 8007fac:	eddf 6a61 	vldr	s13, [pc, #388]	; 8008134 <acc_cpd_pll_divisors_calculate+0x190>
 8007fb0:	ee86 7a27 	vdiv.f32	s14, s12, s15
 8007fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fb6:	4606      	mov	r6, r0
 8007fb8:	b083      	sub	sp, #12
 8007fba:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8007fbe:	ee37 7a06 	vadd.f32	s14, s14, s12
 8007fc2:	eef4 7ae6 	vcmpe.f32	s15, s13
 8007fc6:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8007fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fce:	ee17 3a10 	vmov	r3, s14
 8007fd2:	b29c      	uxth	r4, r3
 8007fd4:	dc06      	bgt.n	8007fe4 <acc_cpd_pll_divisors_calculate+0x40>
 8007fd6:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8008138 <acc_cpd_pll_divisors_calculate+0x194>
 8007fda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007fde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fe2:	d571      	bpl.n	80080c8 <acc_cpd_pll_divisors_calculate+0x124>
 8007fe4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fec:	ed9f 7a53 	vldr	s14, [pc, #332]	; 800813c <acc_cpd_pll_divisors_calculate+0x198>
 8007ff0:	bf4c      	ite	mi
 8007ff2:	4b53      	ldrmi	r3, [pc, #332]	; (8008140 <acc_cpd_pll_divisors_calculate+0x19c>)
 8007ff4:	4b53      	ldrpl	r3, [pc, #332]	; (8008144 <acc_cpd_pll_divisors_calculate+0x1a0>)
 8007ff6:	ed9f 6a51 	vldr	s12, [pc, #324]	; 800813c <acc_cpd_pll_divisors_calculate+0x198>
 8007ffa:	eddf 6a53 	vldr	s13, [pc, #332]	; 8008148 <acc_cpd_pll_divisors_calculate+0x1a4>
 8007ffe:	4d53      	ldr	r5, [pc, #332]	; (800814c <acc_cpd_pll_divisors_calculate+0x1a8>)
 8008000:	4953      	ldr	r1, [pc, #332]	; (8008150 <acc_cpd_pll_divisors_calculate+0x1ac>)
 8008002:	6b6f      	ldr	r7, [r5, #52]	; 0x34
 8008004:	bf48      	it	mi
 8008006:	eef1 7a67 	vnegmi.f32	s15, s15
 800800a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800800e:	2000      	movs	r0, #0
 8008010:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8008014:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800801c:	ee17 2a10 	vmov	r2, s14
 8008020:	bf4c      	ite	mi
 8008022:	eeb1 7a67 	vnegmi.f32	s14, s15
 8008026:	eeb0 7a67 	vmovpl.f32	s14, s15
 800802a:	ee37 7a06 	vadd.f32	s14, s14, s12
 800802e:	9200      	str	r2, [sp, #0]
 8008030:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8008034:	4a47      	ldr	r2, [pc, #284]	; (8008154 <acc_cpd_pll_divisors_calculate+0x1b0>)
 8008036:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800803a:	3c10      	subs	r4, #16
 800803c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008040:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008044:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008048:	edcd 7a01 	vstr	s15, [sp, #4]
 800804c:	47b8      	blx	r7
 800804e:	2cef      	cmp	r4, #239	; 0xef
 8008050:	d937      	bls.n	80080c2 <acc_cpd_pll_divisors_calculate+0x11e>
 8008052:	edd6 7a00 	vldr	s15, [r6]
 8008056:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800813c <acc_cpd_pll_divisors_calculate+0x198>
 800805a:	ed9f 6a38 	vldr	s12, [pc, #224]	; 800813c <acc_cpd_pll_divisors_calculate+0x198>
 800805e:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8008148 <acc_cpd_pll_divisors_calculate+0x1a4>
 8008062:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 8008064:	493a      	ldr	r1, [pc, #232]	; (8008150 <acc_cpd_pll_divisors_calculate+0x1ac>)
 8008066:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800806a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800806e:	bf48      	it	mi
 8008070:	eef1 7a67 	vnegmi.f32	s15, s15
 8008074:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008078:	bf4c      	ite	mi
 800807a:	4b31      	ldrmi	r3, [pc, #196]	; (8008140 <acc_cpd_pll_divisors_calculate+0x19c>)
 800807c:	4b31      	ldrpl	r3, [pc, #196]	; (8008144 <acc_cpd_pll_divisors_calculate+0x1a0>)
 800807e:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8008082:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800808a:	ee17 2a10 	vmov	r2, s14
 800808e:	bf4c      	ite	mi
 8008090:	eeb1 7a67 	vnegmi.f32	s14, s15
 8008094:	eeb0 7a67 	vmovpl.f32	s14, s15
 8008098:	ee37 7a06 	vadd.f32	s14, s14, s12
 800809c:	9200      	str	r2, [sp, #0]
 800809e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80080a2:	4a2c      	ldr	r2, [pc, #176]	; (8008154 <acc_cpd_pll_divisors_calculate+0x1b0>)
 80080a4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80080a8:	2000      	movs	r0, #0
 80080aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80080ae:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80080b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080b6:	edcd 7a01 	vstr	s15, [sp, #4]
 80080ba:	47a0      	blx	r4
 80080bc:	2000      	movs	r0, #0
 80080be:	b003      	add	sp, #12
 80080c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080c2:	2000      	movs	r0, #0
 80080c4:	b003      	add	sp, #12
 80080c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080c8:	f1a4 0310 	sub.w	r3, r4, #16
 80080cc:	b29b      	uxth	r3, r3
 80080ce:	2bef      	cmp	r3, #239	; 0xef
 80080d0:	d901      	bls.n	80080d6 <acc_cpd_pll_divisors_calculate+0x132>
 80080d2:	4d1e      	ldr	r5, [pc, #120]	; (800814c <acc_cpd_pll_divisors_calculate+0x1a8>)
 80080d4:	e7bf      	b.n	8008056 <acc_cpd_pll_divisors_calculate+0xb2>
 80080d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80080da:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8008158 <acc_cpd_pll_divisors_calculate+0x1b4>
 80080de:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800815c <acc_cpd_pll_divisors_calculate+0x1b8>
 80080e2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80080e6:	2c3f      	cmp	r4, #63	; 0x3f
 80080e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80080ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080f0:	ee17 2a90 	vmov	r2, s15
 80080f4:	810a      	strh	r2, [r1, #8]
 80080f6:	d912      	bls.n	800811e <acc_cpd_pll_divisors_calculate+0x17a>
 80080f8:	2cbf      	cmp	r4, #191	; 0xbf
 80080fa:	f04f 0301 	mov.w	r3, #1
 80080fe:	bf98      	it	ls
 8008100:	f1a4 0240 	subls.w	r2, r4, #64	; 0x40
 8008104:	804b      	strh	r3, [r1, #2]
 8008106:	bf8c      	ite	hi
 8008108:	08e2      	lsrhi	r2, r4, #3
 800810a:	f3c2 02cf 	ubfxls	r2, r2, #3, #16
 800810e:	f004 0307 	and.w	r3, r4, #7
 8008112:	808a      	strh	r2, [r1, #4]
 8008114:	80cb      	strh	r3, [r1, #6]
 8008116:	2001      	movs	r0, #1
 8008118:	800c      	strh	r4, [r1, #0]
 800811a:	b003      	add	sp, #12
 800811c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800811e:	2200      	movs	r2, #0
 8008120:	2c2f      	cmp	r4, #47	; 0x2f
 8008122:	bf88      	it	hi
 8008124:	4623      	movhi	r3, r4
 8008126:	808b      	strh	r3, [r1, #4]
 8008128:	804a      	strh	r2, [r1, #2]
 800812a:	80ca      	strh	r2, [r1, #6]
 800812c:	e7f3      	b.n	8008116 <acc_cpd_pll_divisors_calculate+0x172>
 800812e:	bf00      	nop
 8008130:	4f1502f9 	.word	0x4f1502f9
 8008134:	4c989680 	.word	0x4c989680
 8008138:	4b989680 	.word	0x4b989680
 800813c:	350637bd 	.word	0x350637bd
 8008140:	0800eaa0 	.word	0x0800eaa0
 8008144:	0800fb28 	.word	0x0800fb28
 8008148:	49742400 	.word	0x49742400
 800814c:	200004c0 	.word	0x200004c0
 8008150:	0800f34c 	.word	0x0800f34c
 8008154:	0800f320 	.word	0x0800f320
 8008158:	b55b38e8 	.word	0xb55b38e8
 800815c:	427c0000 	.word	0x427c0000

08008160 <acc_cpd_pll_divisors_ref_divisor>:
 8008160:	eddf 7a02 	vldr	s15, [pc, #8]	; 800816c <acc_cpd_pll_divisors_ref_divisor+0xc>
 8008164:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8008168:	f005 be8c 	b.w	800de84 <roundf>
 800816c:	4f1502f9 	.word	0x4f1502f9

08008170 <acc_dll_calculate_area_settings>:
 8008170:	0080      	lsls	r0, r0, #2
 8008172:	b280      	uxth	r0, r0
 8008174:	eb00 0351 	add.w	r3, r0, r1, lsr #1
 8008178:	b29b      	uxth	r3, r3
 800817a:	428b      	cmp	r3, r1
 800817c:	8010      	strh	r0, [r2, #0]
 800817e:	8053      	strh	r3, [r2, #2]
 8008180:	d20c      	bcs.n	800819c <acc_dll_calculate_area_settings+0x2c>
 8008182:	2301      	movs	r3, #1
 8008184:	2100      	movs	r1, #0
 8008186:	2003      	movs	r0, #3
 8008188:	8093      	strh	r3, [r2, #4]
 800818a:	8153      	strh	r3, [r2, #10]
 800818c:	8193      	strh	r3, [r2, #12]
 800818e:	8213      	strh	r3, [r2, #16]
 8008190:	80d1      	strh	r1, [r2, #6]
 8008192:	8251      	strh	r1, [r2, #18]
 8008194:	8291      	strh	r1, [r2, #20]
 8008196:	8110      	strh	r0, [r2, #8]
 8008198:	81d0      	strh	r0, [r2, #14]
 800819a:	4770      	bx	lr
 800819c:	b430      	push	{r4, r5}
 800819e:	fbb3 f4f1 	udiv	r4, r3, r1
 80081a2:	2500      	movs	r5, #0
 80081a4:	fb01 3114 	mls	r1, r1, r4, r3
 80081a8:	2401      	movs	r4, #1
 80081aa:	2303      	movs	r3, #3
 80081ac:	8094      	strh	r4, [r2, #4]
 80081ae:	80d4      	strh	r4, [r2, #6]
 80081b0:	8154      	strh	r4, [r2, #10]
 80081b2:	8214      	strh	r4, [r2, #16]
 80081b4:	8254      	strh	r4, [r2, #18]
 80081b6:	8195      	strh	r5, [r2, #12]
 80081b8:	81d5      	strh	r5, [r2, #14]
 80081ba:	8295      	strh	r5, [r2, #20]
 80081bc:	8050      	strh	r0, [r2, #2]
 80081be:	bc30      	pop	{r4, r5}
 80081c0:	8011      	strh	r1, [r2, #0]
 80081c2:	8113      	strh	r3, [r2, #8]
 80081c4:	4770      	bx	lr
 80081c6:	bf00      	nop

080081c8 <acc_utils_swap16_array>:
 80081c8:	b141      	cbz	r1, 80081dc <acc_utils_swap16_array+0x14>
 80081ca:	3802      	subs	r0, #2
 80081cc:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 80081d0:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 80081d4:	ba5b      	rev16	r3, r3
 80081d6:	4288      	cmp	r0, r1
 80081d8:	8003      	strh	r3, [r0, #0]
 80081da:	d1f9      	bne.n	80081d0 <acc_utils_swap16_array+0x8>
 80081dc:	4770      	bx	lr
 80081de:	bf00      	nop

080081e0 <acc_utils_uint32_to_transfer_buffer>:
 80081e0:	b152      	cbz	r2, 80081f8 <acc_utils_uint32_to_transfer_buffer+0x18>
 80081e2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80081e6:	3804      	subs	r0, #4
 80081e8:	f850 3f04 	ldr.w	r3, [r0, #4]!
 80081ec:	804b      	strh	r3, [r1, #2]
 80081ee:	0c1b      	lsrs	r3, r3, #16
 80081f0:	800b      	strh	r3, [r1, #0]
 80081f2:	3104      	adds	r1, #4
 80081f4:	4291      	cmp	r1, r2
 80081f6:	d1f7      	bne.n	80081e8 <acc_utils_uint32_to_transfer_buffer+0x8>
 80081f8:	4770      	bx	lr
 80081fa:	bf00      	nop

080081fc <acc_utils_transfer_buffer_to_uint32>:
 80081fc:	b17a      	cbz	r2, 800821e <acc_utils_transfer_buffer_to_uint32+0x22>
 80081fe:	b410      	push	{r4}
 8008200:	3904      	subs	r1, #4
 8008202:	eb00 0482 	add.w	r4, r0, r2, lsl #2
 8008206:	8802      	ldrh	r2, [r0, #0]
 8008208:	8843      	ldrh	r3, [r0, #2]
 800820a:	3004      	adds	r0, #4
 800820c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008210:	4284      	cmp	r4, r0
 8008212:	f841 3f04 	str.w	r3, [r1, #4]!
 8008216:	d1f6      	bne.n	8008206 <acc_utils_transfer_buffer_to_uint32+0xa>
 8008218:	f85d 4b04 	ldr.w	r4, [sp], #4
 800821c:	4770      	bx	lr
 800821e:	4770      	bx	lr

08008220 <event>:
 8008220:	b570      	push	{r4, r5, r6, lr}
 8008222:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008224:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008226:	682a      	ldr	r2, [r5, #0]
 8008228:	4604      	mov	r4, r0
 800822a:	e9d0 0104 	ldrd	r0, r1, [r0, #16]
 800822e:	4798      	blx	r3
 8008230:	6823      	ldr	r3, [r4, #0]
 8008232:	6028      	str	r0, [r5, #0]
 8008234:	685a      	ldr	r2, [r3, #4]
 8008236:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800823a:	4618      	mov	r0, r3
 800823c:	4710      	bx	r2
 800823e:	bf00      	nop

08008240 <reset>:
 8008240:	6800      	ldr	r0, [r0, #0]
 8008242:	68c3      	ldr	r3, [r0, #12]
 8008244:	4718      	bx	r3
 8008246:	bf00      	nop

08008248 <validate>:
 8008248:	6983      	ldr	r3, [r0, #24]
 800824a:	b510      	push	{r4, lr}
 800824c:	4604      	mov	r4, r0
 800824e:	b113      	cbz	r3, 8008256 <validate+0xe>
 8008250:	f7fd fae6 	bl	8005820 <acc_rss_integration_log_level>
 8008254:	b978      	cbnz	r0, 8008276 <validate+0x2e>
 8008256:	69e3      	ldr	r3, [r4, #28]
 8008258:	b143      	cbz	r3, 800826c <validate+0x24>
 800825a:	f7fd fae1 	bl	8005820 <acc_rss_integration_log_level>
 800825e:	b128      	cbz	r0, 800826c <validate+0x24>
 8008260:	4b08      	ldr	r3, [pc, #32]	; (8008284 <validate+0x3c>)
 8008262:	4a09      	ldr	r2, [pc, #36]	; (8008288 <validate+0x40>)
 8008264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008266:	4909      	ldr	r1, [pc, #36]	; (800828c <validate+0x44>)
 8008268:	2001      	movs	r0, #1
 800826a:	4798      	blx	r3
 800826c:	6820      	ldr	r0, [r4, #0]
 800826e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008272:	6883      	ldr	r3, [r0, #8]
 8008274:	4718      	bx	r3
 8008276:	4b03      	ldr	r3, [pc, #12]	; (8008284 <validate+0x3c>)
 8008278:	4a05      	ldr	r2, [pc, #20]	; (8008290 <validate+0x48>)
 800827a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800827c:	4903      	ldr	r1, [pc, #12]	; (800828c <validate+0x44>)
 800827e:	2001      	movs	r0, #1
 8008280:	4798      	blx	r3
 8008282:	e7e8      	b.n	8008256 <validate+0xe>
 8008284:	200004c0 	.word	0x200004c0
 8008288:	0800f2bc 	.word	0x0800f2bc
 800828c:	0800f360 	.word	0x0800f360
 8008290:	0800f28c 	.word	0x0800f28c

08008294 <abs_q3_12_complex>:
 8008294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008296:	0897      	lsrs	r7, r2, #2
 8008298:	d00b      	beq.n	80082b2 <abs_q3_12_complex+0x1e>
 800829a:	4604      	mov	r4, r0
 800829c:	1e8d      	subs	r5, r1, #2
 800829e:	eb00 0687 	add.w	r6, r0, r7, lsl #2
 80082a2:	f854 0b04 	ldr.w	r0, [r4], #4
 80082a6:	f004 fafb 	bl	800c8a0 <acc_alg_basic_math_q3_12_complex_scalar_abs>
 80082aa:	42b4      	cmp	r4, r6
 80082ac:	f825 0f02 	strh.w	r0, [r5, #2]!
 80082b0:	d1f7      	bne.n	80082a2 <abs_q3_12_complex+0xe>
 80082b2:	0078      	lsls	r0, r7, #1
 80082b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082b6:	bf00      	nop

080082b8 <acc_element_abs_init>:
 80082b8:	b510      	push	{r4, lr}
 80082ba:	4a0b      	ldr	r2, [pc, #44]	; (80082e8 <acc_element_abs_init+0x30>)
 80082bc:	4c0b      	ldr	r4, [pc, #44]	; (80082ec <acc_element_abs_init+0x34>)
 80082be:	4b0c      	ldr	r3, [pc, #48]	; (80082f0 <acc_element_abs_init+0x38>)
 80082c0:	60c3      	str	r3, [r0, #12]
 80082c2:	2907      	cmp	r1, #7
 80082c4:	e9c0 4201 	strd	r4, r2, [r0, #4]
 80082c8:	d103      	bne.n	80082d2 <acc_element_abs_init+0x1a>
 80082ca:	4b0a      	ldr	r3, [pc, #40]	; (80082f4 <acc_element_abs_init+0x3c>)
 80082cc:	6383      	str	r3, [r0, #56]	; 0x38
 80082ce:	2001      	movs	r0, #1
 80082d0:	bd10      	pop	{r4, pc}
 80082d2:	4b09      	ldr	r3, [pc, #36]	; (80082f8 <acc_element_abs_init+0x40>)
 80082d4:	4a09      	ldr	r2, [pc, #36]	; (80082fc <acc_element_abs_init+0x44>)
 80082d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082d8:	4909      	ldr	r1, [pc, #36]	; (8008300 <acc_element_abs_init+0x48>)
 80082da:	2400      	movs	r4, #0
 80082dc:	6384      	str	r4, [r0, #56]	; 0x38
 80082de:	4620      	mov	r0, r4
 80082e0:	4798      	blx	r3
 80082e2:	4620      	mov	r0, r4
 80082e4:	bd10      	pop	{r4, pc}
 80082e6:	bf00      	nop
 80082e8:	08008249 	.word	0x08008249
 80082ec:	08008221 	.word	0x08008221
 80082f0:	08008241 	.word	0x08008241
 80082f4:	08008295 	.word	0x08008295
 80082f8:	200004c0 	.word	0x200004c0
 80082fc:	0800f2cc 	.word	0x0800f2cc
 8008300:	0800f360 	.word	0x0800f360

08008304 <event>:
 8008304:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8008306:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008308:	6811      	ldr	r1, [r2, #0]
 800830a:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
 800830c:	b510      	push	{r4, lr}
 800830e:	4604      	mov	r4, r0
 8008310:	6900      	ldr	r0, [r0, #16]
 8008312:	4798      	blx	r3
 8008314:	6820      	ldr	r0, [r4, #0]
 8008316:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800831a:	6843      	ldr	r3, [r0, #4]
 800831c:	4718      	bx	r3
 800831e:	bf00      	nop

08008320 <reset>:
 8008320:	6800      	ldr	r0, [r0, #0]
 8008322:	68c3      	ldr	r3, [r0, #12]
 8008324:	4718      	bx	r3
 8008326:	bf00      	nop

08008328 <validate>:
 8008328:	6983      	ldr	r3, [r0, #24]
 800832a:	b510      	push	{r4, lr}
 800832c:	4604      	mov	r4, r0
 800832e:	b113      	cbz	r3, 8008336 <validate+0xe>
 8008330:	f7fd fa76 	bl	8005820 <acc_rss_integration_log_level>
 8008334:	b978      	cbnz	r0, 8008356 <validate+0x2e>
 8008336:	69e3      	ldr	r3, [r4, #28]
 8008338:	b143      	cbz	r3, 800834c <validate+0x24>
 800833a:	f7fd fa71 	bl	8005820 <acc_rss_integration_log_level>
 800833e:	b128      	cbz	r0, 800834c <validate+0x24>
 8008340:	4b08      	ldr	r3, [pc, #32]	; (8008364 <validate+0x3c>)
 8008342:	4a09      	ldr	r2, [pc, #36]	; (8008368 <validate+0x40>)
 8008344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008346:	4909      	ldr	r1, [pc, #36]	; (800836c <validate+0x44>)
 8008348:	2001      	movs	r0, #1
 800834a:	4798      	blx	r3
 800834c:	6820      	ldr	r0, [r4, #0]
 800834e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008352:	6883      	ldr	r3, [r0, #8]
 8008354:	4718      	bx	r3
 8008356:	4b03      	ldr	r3, [pc, #12]	; (8008364 <validate+0x3c>)
 8008358:	4a05      	ldr	r2, [pc, #20]	; (8008370 <validate+0x48>)
 800835a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800835c:	4903      	ldr	r1, [pc, #12]	; (800836c <validate+0x44>)
 800835e:	2001      	movs	r0, #1
 8008360:	4798      	blx	r3
 8008362:	e7e8      	b.n	8008336 <validate+0xe>
 8008364:	200004c0 	.word	0x200004c0
 8008368:	0800f2bc 	.word	0x0800f2bc
 800836c:	0800f36c 	.word	0x0800f36c
 8008370:	0800f28c 	.word	0x0800f28c

08008374 <centering_q12_4>:
 8008374:	f3c1 014f 	ubfx	r1, r1, #1, #16
 8008378:	f3c2 024f 	ubfx	r2, r2, #1, #16
 800837c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008380:	f003 bbe2 	b.w	800bb48 <acc_alg_basic_subtract_section_mean_q12_4>

08008384 <acc_element_centering_init>:
 8008384:	b430      	push	{r4, r5}
 8008386:	4b09      	ldr	r3, [pc, #36]	; (80083ac <acc_element_centering_init+0x28>)
 8008388:	60c3      	str	r3, [r0, #12]
 800838a:	2905      	cmp	r1, #5
 800838c:	4d08      	ldr	r5, [pc, #32]	; (80083b0 <acc_element_centering_init+0x2c>)
 800838e:	4c09      	ldr	r4, [pc, #36]	; (80083b4 <acc_element_centering_init+0x30>)
 8008390:	bf08      	it	eq
 8008392:	4909      	ldreq	r1, [pc, #36]	; (80083b8 <acc_element_centering_init+0x34>)
 8008394:	8782      	strh	r2, [r0, #60]	; 0x3c
 8008396:	bf1a      	itte	ne
 8008398:	2300      	movne	r3, #0
 800839a:	4619      	movne	r1, r3
 800839c:	2301      	moveq	r3, #1
 800839e:	e9c0 5401 	strd	r5, r4, [r0, #4]
 80083a2:	6381      	str	r1, [r0, #56]	; 0x38
 80083a4:	bc30      	pop	{r4, r5}
 80083a6:	4618      	mov	r0, r3
 80083a8:	4770      	bx	lr
 80083aa:	bf00      	nop
 80083ac:	08008321 	.word	0x08008321
 80083b0:	08008305 	.word	0x08008305
 80083b4:	08008329 	.word	0x08008329
 80083b8:	08008375 	.word	0x08008375

080083bc <convert_q3_12_to_u16>:
 80083bc:	0853      	lsrs	r3, r2, #1
 80083be:	d010      	beq.n	80083e2 <convert_q3_12_to_u16+0x26>
 80083c0:	b410      	push	{r4}
 80083c2:	eb01 0443 	add.w	r4, r1, r3, lsl #1
 80083c6:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 80083ca:	f831 3d02 	ldrh.w	r3, [r1, #-2]!
 80083ce:	005b      	lsls	r3, r3, #1
 80083d0:	4281      	cmp	r1, r0
 80083d2:	f824 3d02 	strh.w	r3, [r4, #-2]!
 80083d6:	d1f8      	bne.n	80083ca <convert_q3_12_to_u16+0xe>
 80083d8:	f022 0001 	bic.w	r0, r2, #1
 80083dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083e0:	4770      	bx	lr
 80083e2:	f022 0001 	bic.w	r0, r2, #1
 80083e6:	4770      	bx	lr

080083e8 <convert_q3_12_complex_to_f32_complex>:
 80083e8:	0892      	lsrs	r2, r2, #2
 80083ea:	d024      	beq.n	8008436 <convert_q3_12_complex_to_f32_complex+0x4e>
 80083ec:	eddf 6a13 	vldr	s13, [pc, #76]	; 800843c <convert_q3_12_complex_to_f32_complex+0x54>
 80083f0:	eddf 5a13 	vldr	s11, [pc, #76]	; 8008440 <convert_q3_12_complex_to_f32_complex+0x58>
 80083f4:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 80083f8:	00d0      	lsls	r0, r2, #3
 80083fa:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80083fe:	f933 cc02 	ldrsh.w	ip, [r3, #-2]
 8008402:	ee07 ca10 	vmov	s14, ip
 8008406:	f933 cd04 	ldrsh.w	ip, [r3, #-4]!
 800840a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800840e:	ee07 ca90 	vmov	s15, ip
 8008412:	ee27 7a26 	vmul.f32	s14, s14, s13
 8008416:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800841a:	ee27 6a25 	vmul.f32	s12, s14, s11
 800841e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008422:	ed02 7a01 	vstr	s14, [r2, #-4]
 8008426:	ee77 7a86 	vadd.f32	s15, s15, s12
 800842a:	3a08      	subs	r2, #8
 800842c:	edc2 7a00 	vstr	s15, [r2]
 8008430:	4291      	cmp	r1, r2
 8008432:	d1e4      	bne.n	80083fe <convert_q3_12_complex_to_f32_complex+0x16>
 8008434:	4770      	bx	lr
 8008436:	4610      	mov	r0, r2
 8008438:	4770      	bx	lr
 800843a:	bf00      	nop
 800843c:	39800000 	.word	0x39800000
 8008440:	00000000 	.word	0x00000000

08008444 <convert_q12_4_to_q3_12>:
 8008444:	0853      	lsrs	r3, r2, #1
 8008446:	d012      	beq.n	800846e <convert_q12_4_to_q3_12+0x2a>
 8008448:	b410      	push	{r4}
 800844a:	eb01 0443 	add.w	r4, r1, r3, lsl #1
 800844e:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 8008452:	f931 3d02 	ldrsh.w	r3, [r1, #-2]!
 8008456:	105b      	asrs	r3, r3, #1
 8008458:	f483 4340 	eor.w	r3, r3, #49152	; 0xc000
 800845c:	4281      	cmp	r1, r0
 800845e:	f824 3d02 	strh.w	r3, [r4, #-2]!
 8008462:	d1f6      	bne.n	8008452 <convert_q12_4_to_q3_12+0xe>
 8008464:	f022 0001 	bic.w	r0, r2, #1
 8008468:	f85d 4b04 	ldr.w	r4, [sp], #4
 800846c:	4770      	bx	lr
 800846e:	f022 0001 	bic.w	r0, r2, #1
 8008472:	4770      	bx	lr

08008474 <convert_q12_4_to_q3_12_complex>:
 8008474:	b470      	push	{r4, r5, r6}
 8008476:	4605      	mov	r5, r0
 8008478:	0850      	lsrs	r0, r2, #1
 800847a:	d012      	beq.n	80084a2 <convert_q12_4_to_q3_12_complex+0x2e>
 800847c:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8008480:	eb05 0440 	add.w	r4, r5, r0, lsl #1
 8008484:	2600      	movs	r6, #0
 8008486:	0080      	lsls	r0, r0, #2
 8008488:	f934 3d02 	ldrsh.w	r3, [r4, #-2]!
 800848c:	f821 6c02 	strh.w	r6, [r1, #-2]
 8008490:	105b      	asrs	r3, r3, #1
 8008492:	f483 4340 	eor.w	r3, r3, #49152	; 0xc000
 8008496:	42a5      	cmp	r5, r4
 8008498:	f821 3c04 	strh.w	r3, [r1, #-4]
 800849c:	f1a1 0104 	sub.w	r1, r1, #4
 80084a0:	d1f2      	bne.n	8008488 <convert_q12_4_to_q3_12_complex+0x14>
 80084a2:	bc70      	pop	{r4, r5, r6}
 80084a4:	4770      	bx	lr
 80084a6:	bf00      	nop

080084a8 <event>:
 80084a8:	b570      	push	{r4, r5, r6, lr}
 80084aa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80084ac:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80084ae:	682a      	ldr	r2, [r5, #0]
 80084b0:	4604      	mov	r4, r0
 80084b2:	e9d0 0104 	ldrd	r0, r1, [r0, #16]
 80084b6:	4798      	blx	r3
 80084b8:	6823      	ldr	r3, [r4, #0]
 80084ba:	6028      	str	r0, [r5, #0]
 80084bc:	685a      	ldr	r2, [r3, #4]
 80084be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80084c2:	4618      	mov	r0, r3
 80084c4:	4710      	bx	r2
 80084c6:	bf00      	nop

080084c8 <reset>:
 80084c8:	6800      	ldr	r0, [r0, #0]
 80084ca:	68c3      	ldr	r3, [r0, #12]
 80084cc:	4718      	bx	r3
 80084ce:	bf00      	nop

080084d0 <validate>:
 80084d0:	6983      	ldr	r3, [r0, #24]
 80084d2:	b510      	push	{r4, lr}
 80084d4:	4604      	mov	r4, r0
 80084d6:	b113      	cbz	r3, 80084de <validate+0xe>
 80084d8:	f7fd f9a2 	bl	8005820 <acc_rss_integration_log_level>
 80084dc:	b978      	cbnz	r0, 80084fe <validate+0x2e>
 80084de:	69e3      	ldr	r3, [r4, #28]
 80084e0:	b143      	cbz	r3, 80084f4 <validate+0x24>
 80084e2:	f7fd f99d 	bl	8005820 <acc_rss_integration_log_level>
 80084e6:	b128      	cbz	r0, 80084f4 <validate+0x24>
 80084e8:	4b08      	ldr	r3, [pc, #32]	; (800850c <validate+0x3c>)
 80084ea:	4a09      	ldr	r2, [pc, #36]	; (8008510 <validate+0x40>)
 80084ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084ee:	4909      	ldr	r1, [pc, #36]	; (8008514 <validate+0x44>)
 80084f0:	2001      	movs	r0, #1
 80084f2:	4798      	blx	r3
 80084f4:	6820      	ldr	r0, [r4, #0]
 80084f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084fa:	6883      	ldr	r3, [r0, #8]
 80084fc:	4718      	bx	r3
 80084fe:	4b03      	ldr	r3, [pc, #12]	; (800850c <validate+0x3c>)
 8008500:	4a05      	ldr	r2, [pc, #20]	; (8008518 <validate+0x48>)
 8008502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008504:	4903      	ldr	r1, [pc, #12]	; (8008514 <validate+0x44>)
 8008506:	2001      	movs	r0, #1
 8008508:	4798      	blx	r3
 800850a:	e7e8      	b.n	80084de <validate+0xe>
 800850c:	200004c0 	.word	0x200004c0
 8008510:	0800f2bc 	.word	0x0800f2bc
 8008514:	0800f380 	.word	0x0800f380
 8008518:	0800f28c 	.word	0x0800f28c

0800851c <acc_element_converter_init>:
 800851c:	3a02      	subs	r2, #2
 800851e:	b510      	push	{r4, lr}
 8008520:	2a05      	cmp	r2, #5
 8008522:	d804      	bhi.n	800852e <acc_element_converter_init+0x12>
 8008524:	e8df f002 	tbb	[pc, r2]
 8008528:	031d0319 	.word	0x031d0319
 800852c:	0d21      	.short	0x0d21
 800852e:	2300      	movs	r3, #0
 8008530:	6383      	str	r3, [r0, #56]	; 0x38
 8008532:	4b10      	ldr	r3, [pc, #64]	; (8008574 <acc_element_converter_init+0x58>)
 8008534:	4a10      	ldr	r2, [pc, #64]	; (8008578 <acc_element_converter_init+0x5c>)
 8008536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008538:	4910      	ldr	r1, [pc, #64]	; (800857c <acc_element_converter_init+0x60>)
 800853a:	2000      	movs	r0, #0
 800853c:	4798      	blx	r3
 800853e:	2000      	movs	r0, #0
 8008540:	bd10      	pop	{r4, pc}
 8008542:	2905      	cmp	r1, #5
 8008544:	d1f3      	bne.n	800852e <acc_element_converter_init+0x12>
 8008546:	4c0e      	ldr	r4, [pc, #56]	; (8008580 <acc_element_converter_init+0x64>)
 8008548:	490e      	ldr	r1, [pc, #56]	; (8008584 <acc_element_converter_init+0x68>)
 800854a:	4a0f      	ldr	r2, [pc, #60]	; (8008588 <acc_element_converter_init+0x6c>)
 800854c:	4b0f      	ldr	r3, [pc, #60]	; (800858c <acc_element_converter_init+0x70>)
 800854e:	6384      	str	r4, [r0, #56]	; 0x38
 8008550:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8008554:	60c3      	str	r3, [r0, #12]
 8008556:	2001      	movs	r0, #1
 8008558:	bd10      	pop	{r4, pc}
 800855a:	2904      	cmp	r1, #4
 800855c:	d1e7      	bne.n	800852e <acc_element_converter_init+0x12>
 800855e:	4c0c      	ldr	r4, [pc, #48]	; (8008590 <acc_element_converter_init+0x74>)
 8008560:	e7f2      	b.n	8008548 <acc_element_converter_init+0x2c>
 8008562:	2905      	cmp	r1, #5
 8008564:	d1e3      	bne.n	800852e <acc_element_converter_init+0x12>
 8008566:	4c0b      	ldr	r4, [pc, #44]	; (8008594 <acc_element_converter_init+0x78>)
 8008568:	e7ee      	b.n	8008548 <acc_element_converter_init+0x2c>
 800856a:	2907      	cmp	r1, #7
 800856c:	d1df      	bne.n	800852e <acc_element_converter_init+0x12>
 800856e:	4c0a      	ldr	r4, [pc, #40]	; (8008598 <acc_element_converter_init+0x7c>)
 8008570:	e7ea      	b.n	8008548 <acc_element_converter_init+0x2c>
 8008572:	bf00      	nop
 8008574:	200004c0 	.word	0x200004c0
 8008578:	0800f394 	.word	0x0800f394
 800857c:	0800f380 	.word	0x0800f380
 8008580:	08008475 	.word	0x08008475
 8008584:	080084a9 	.word	0x080084a9
 8008588:	080084d1 	.word	0x080084d1
 800858c:	080084c9 	.word	0x080084c9
 8008590:	080083bd 	.word	0x080083bd
 8008594:	08008445 	.word	0x08008445
 8008598:	080083e9 	.word	0x080083e9

0800859c <event>:
 800859c:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800859e:	6803      	ldr	r3, [r0, #0]
 80085a0:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80085a2:	6011      	str	r1, [r2, #0]
 80085a4:	4618      	mov	r0, r3
 80085a6:	685a      	ldr	r2, [r3, #4]
 80085a8:	4710      	bx	r2
 80085aa:	bf00      	nop

080085ac <reset>:
 80085ac:	6800      	ldr	r0, [r0, #0]
 80085ae:	68c3      	ldr	r3, [r0, #12]
 80085b0:	4718      	bx	r3
 80085b2:	bf00      	nop

080085b4 <validate>:
 80085b4:	6983      	ldr	r3, [r0, #24]
 80085b6:	b510      	push	{r4, lr}
 80085b8:	4604      	mov	r4, r0
 80085ba:	b113      	cbz	r3, 80085c2 <validate+0xe>
 80085bc:	f7fd f930 	bl	8005820 <acc_rss_integration_log_level>
 80085c0:	b978      	cbnz	r0, 80085e2 <validate+0x2e>
 80085c2:	69e3      	ldr	r3, [r4, #28]
 80085c4:	b143      	cbz	r3, 80085d8 <validate+0x24>
 80085c6:	f7fd f92b 	bl	8005820 <acc_rss_integration_log_level>
 80085ca:	b128      	cbz	r0, 80085d8 <validate+0x24>
 80085cc:	4b08      	ldr	r3, [pc, #32]	; (80085f0 <validate+0x3c>)
 80085ce:	4a09      	ldr	r2, [pc, #36]	; (80085f4 <validate+0x40>)
 80085d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085d2:	4909      	ldr	r1, [pc, #36]	; (80085f8 <validate+0x44>)
 80085d4:	2001      	movs	r0, #1
 80085d6:	4798      	blx	r3
 80085d8:	6820      	ldr	r0, [r4, #0]
 80085da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085de:	6883      	ldr	r3, [r0, #8]
 80085e0:	4718      	bx	r3
 80085e2:	4b03      	ldr	r3, [pc, #12]	; (80085f0 <validate+0x3c>)
 80085e4:	4a05      	ldr	r2, [pc, #20]	; (80085fc <validate+0x48>)
 80085e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085e8:	4903      	ldr	r1, [pc, #12]	; (80085f8 <validate+0x44>)
 80085ea:	2001      	movs	r0, #1
 80085ec:	4798      	blx	r3
 80085ee:	e7e8      	b.n	80085c2 <validate+0xe>
 80085f0:	200004c0 	.word	0x200004c0
 80085f4:	0800f2bc 	.word	0x0800f2bc
 80085f8:	0800f3bc 	.word	0x0800f3bc
 80085fc:	0800f28c 	.word	0x0800f28c

08008600 <acc_element_crop_init>:
 8008600:	b538      	push	{r3, r4, r5, lr}
 8008602:	4604      	mov	r4, r0
 8008604:	4608      	mov	r0, r1
 8008606:	4615      	mov	r5, r2
 8008608:	f7ff fb46 	bl	8007c98 <acc_element_sizeof>
 800860c:	4904      	ldr	r1, [pc, #16]	; (8008620 <acc_element_crop_init+0x20>)
 800860e:	4a05      	ldr	r2, [pc, #20]	; (8008624 <acc_element_crop_init+0x24>)
 8008610:	4b05      	ldr	r3, [pc, #20]	; (8008628 <acc_element_crop_init+0x28>)
 8008612:	60e3      	str	r3, [r4, #12]
 8008614:	fb05 f000 	mul.w	r0, r5, r0
 8008618:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800861c:	63a0      	str	r0, [r4, #56]	; 0x38
 800861e:	bd38      	pop	{r3, r4, r5, pc}
 8008620:	0800859d 	.word	0x0800859d
 8008624:	080085b5 	.word	0x080085b5
 8008628:	080085ad 	.word	0x080085ad

0800862c <filter_no_operation>:
 800862c:	4770      	bx	lr
 800862e:	bf00      	nop

08008630 <event>:
 8008630:	b510      	push	{r4, lr}
 8008632:	4604      	mov	r4, r0
 8008634:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008636:	4798      	blx	r3
 8008638:	6820      	ldr	r0, [r4, #0]
 800863a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800863e:	6843      	ldr	r3, [r0, #4]
 8008640:	4718      	bx	r3
 8008642:	bf00      	nop

08008644 <reset>:
 8008644:	6800      	ldr	r0, [r0, #0]
 8008646:	68c3      	ldr	r3, [r0, #12]
 8008648:	4718      	bx	r3
 800864a:	bf00      	nop

0800864c <filter_q3_12_complex>:
 800864c:	4603      	mov	r3, r0
 800864e:	3040      	adds	r0, #64	; 0x40
 8008650:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008652:	6919      	ldr	r1, [r3, #16]
 8008654:	6812      	ldr	r2, [r2, #0]
 8008656:	0892      	lsrs	r2, r2, #2
 8008658:	f003 bc5c 	b.w	800bf14 <acc_alg_biquad_q3_12_complex_direct_form_1_filtfilt_reduced_edge_transients>

0800865c <validate>:
 800865c:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 8008660:	429a      	cmp	r2, r3
 8008662:	b510      	push	{r4, lr}
 8008664:	d007      	beq.n	8008676 <validate+0x1a>
 8008666:	4b12      	ldr	r3, [pc, #72]	; (80086b0 <validate+0x54>)
 8008668:	4a12      	ldr	r2, [pc, #72]	; (80086b4 <validate+0x58>)
 800866a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800866c:	4912      	ldr	r1, [pc, #72]	; (80086b8 <validate+0x5c>)
 800866e:	2000      	movs	r0, #0
 8008670:	4798      	blx	r3
 8008672:	2000      	movs	r0, #0
 8008674:	bd10      	pop	{r4, pc}
 8008676:	6983      	ldr	r3, [r0, #24]
 8008678:	4604      	mov	r4, r0
 800867a:	b113      	cbz	r3, 8008682 <validate+0x26>
 800867c:	f7fd f8d0 	bl	8005820 <acc_rss_integration_log_level>
 8008680:	b978      	cbnz	r0, 80086a2 <validate+0x46>
 8008682:	69e3      	ldr	r3, [r4, #28]
 8008684:	b143      	cbz	r3, 8008698 <validate+0x3c>
 8008686:	f7fd f8cb 	bl	8005820 <acc_rss_integration_log_level>
 800868a:	b128      	cbz	r0, 8008698 <validate+0x3c>
 800868c:	4b08      	ldr	r3, [pc, #32]	; (80086b0 <validate+0x54>)
 800868e:	4a0b      	ldr	r2, [pc, #44]	; (80086bc <validate+0x60>)
 8008690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008692:	4909      	ldr	r1, [pc, #36]	; (80086b8 <validate+0x5c>)
 8008694:	2001      	movs	r0, #1
 8008696:	4798      	blx	r3
 8008698:	6820      	ldr	r0, [r4, #0]
 800869a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800869e:	6883      	ldr	r3, [r0, #8]
 80086a0:	4718      	bx	r3
 80086a2:	4b03      	ldr	r3, [pc, #12]	; (80086b0 <validate+0x54>)
 80086a4:	4a06      	ldr	r2, [pc, #24]	; (80086c0 <validate+0x64>)
 80086a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086a8:	4903      	ldr	r1, [pc, #12]	; (80086b8 <validate+0x5c>)
 80086aa:	2001      	movs	r0, #1
 80086ac:	4798      	blx	r3
 80086ae:	e7e8      	b.n	8008682 <validate+0x26>
 80086b0:	200004c0 	.word	0x200004c0
 80086b4:	0800f3cc 	.word	0x0800f3cc
 80086b8:	0800f3f4 	.word	0x0800f3f4
 80086bc:	0800f2bc 	.word	0x0800f2bc
 80086c0:	0800f28c 	.word	0x0800f28c

080086c4 <acc_element_depth_domain_low_pass_filter_init>:
 80086c4:	b570      	push	{r4, r5, r6, lr}
 80086c6:	4604      	mov	r4, r0
 80086c8:	4823      	ldr	r0, [pc, #140]	; (8008758 <acc_element_depth_domain_low_pass_filter_init+0x94>)
 80086ca:	6060      	str	r0, [r4, #4]
 80086cc:	4823      	ldr	r0, [pc, #140]	; (800875c <acc_element_depth_domain_low_pass_filter_init+0x98>)
 80086ce:	60a0      	str	r0, [r4, #8]
 80086d0:	4823      	ldr	r0, [pc, #140]	; (8008760 <acc_element_depth_domain_low_pass_filter_init+0x9c>)
 80086d2:	60e0      	str	r0, [r4, #12]
 80086d4:	461e      	mov	r6, r3
 80086d6:	b30a      	cbz	r2, 800871c <acc_element_depth_domain_low_pass_filter_init+0x58>
 80086d8:	eddf 7a22 	vldr	s15, [pc, #136]	; 8008764 <acc_element_depth_domain_low_pass_filter_init+0xa0>
 80086dc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80086e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086e4:	d513      	bpl.n	800870e <acc_element_depth_domain_low_pass_filter_init+0x4a>
 80086e6:	eeb0 0a67 	vmov.f32	s0, s15
 80086ea:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
 80086ee:	2907      	cmp	r1, #7
 80086f0:	d124      	bne.n	800873c <acc_element_depth_domain_low_pass_filter_init+0x78>
 80086f2:	4b1d      	ldr	r3, [pc, #116]	; (8008768 <acc_element_depth_domain_low_pass_filter_init+0xa4>)
 80086f4:	63a3      	str	r3, [r4, #56]	; 0x38
 80086f6:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 80086fa:	2300      	movs	r3, #0
 80086fc:	f104 0140 	add.w	r1, r4, #64	; 0x40
 8008700:	2001      	movs	r0, #1
 8008702:	f003 fa6d 	bl	800bbe0 <acc_alg_biquad_q3_12_lowpass_coeffs>
 8008706:	4605      	mov	r5, r0
 8008708:	b188      	cbz	r0, 800872e <acc_element_depth_domain_low_pass_filter_init+0x6a>
 800870a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800870c:	e00b      	b.n	8008726 <acc_element_depth_domain_low_pass_filter_init+0x62>
 800870e:	eddf 7a17 	vldr	s15, [pc, #92]	; 800876c <acc_element_depth_domain_low_pass_filter_init+0xa8>
 8008712:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8008716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800871a:	dd19      	ble.n	8008750 <acc_element_depth_domain_low_pass_filter_init+0x8c>
 800871c:	4b14      	ldr	r3, [pc, #80]	; (8008770 <acc_element_depth_domain_low_pass_filter_init+0xac>)
 800871e:	63a3      	str	r3, [r4, #56]	; 0x38
 8008720:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8008724:	63e2      	str	r2, [r4, #60]	; 0x3c
 8008726:	2501      	movs	r5, #1
 8008728:	61f2      	str	r2, [r6, #28]
 800872a:	4628      	mov	r0, r5
 800872c:	bd70      	pop	{r4, r5, r6, pc}
 800872e:	4b11      	ldr	r3, [pc, #68]	; (8008774 <acc_element_depth_domain_low_pass_filter_init+0xb0>)
 8008730:	4a11      	ldr	r2, [pc, #68]	; (8008778 <acc_element_depth_domain_low_pass_filter_init+0xb4>)
 8008732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008734:	4911      	ldr	r1, [pc, #68]	; (800877c <acc_element_depth_domain_low_pass_filter_init+0xb8>)
 8008736:	4798      	blx	r3
 8008738:	4628      	mov	r0, r5
 800873a:	bd70      	pop	{r4, r5, r6, pc}
 800873c:	4b0d      	ldr	r3, [pc, #52]	; (8008774 <acc_element_depth_domain_low_pass_filter_init+0xb0>)
 800873e:	4a10      	ldr	r2, [pc, #64]	; (8008780 <acc_element_depth_domain_low_pass_filter_init+0xbc>)
 8008740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008742:	490e      	ldr	r1, [pc, #56]	; (800877c <acc_element_depth_domain_low_pass_filter_init+0xb8>)
 8008744:	2000      	movs	r0, #0
 8008746:	63a0      	str	r0, [r4, #56]	; 0x38
 8008748:	4605      	mov	r5, r0
 800874a:	4798      	blx	r3
 800874c:	4628      	mov	r0, r5
 800874e:	bd70      	pop	{r4, r5, r6, pc}
 8008750:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
 8008754:	e7cb      	b.n	80086ee <acc_element_depth_domain_low_pass_filter_init+0x2a>
 8008756:	bf00      	nop
 8008758:	08008631 	.word	0x08008631
 800875c:	0800865d 	.word	0x0800865d
 8008760:	08008645 	.word	0x08008645
 8008764:	3b843809 	.word	0x3b843809
 8008768:	0800864d 	.word	0x0800864d
 800876c:	3efdca08 	.word	0x3efdca08
 8008770:	0800862d 	.word	0x0800862d
 8008774:	200004c0 	.word	0x200004c0
 8008778:	0800f41c 	.word	0x0800f41c
 800877c:	0800f3f4 	.word	0x0800f3f4
 8008780:	0800f2cc 	.word	0x0800f2cc

08008784 <event>:
 8008784:	b510      	push	{r4, lr}
 8008786:	4604      	mov	r4, r0
 8008788:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800878a:	4798      	blx	r3
 800878c:	6820      	ldr	r0, [r4, #0]
 800878e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008792:	6843      	ldr	r3, [r0, #4]
 8008794:	4718      	bx	r3
 8008796:	bf00      	nop

08008798 <reset>:
 8008798:	6800      	ldr	r0, [r0, #0]
 800879a:	68c3      	ldr	r3, [r0, #12]
 800879c:	4718      	bx	r3
 800879e:	bf00      	nop

080087a0 <iq_mix_q3_12>:
 80087a0:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80087a2:	ed90 1a10 	vldr	s2, [r0, #64]	; 0x40
 80087a6:	edd0 0a0f 	vldr	s1, [r0, #60]	; 0x3c
 80087aa:	b538      	push	{r3, r4, r5, lr}
 80087ac:	6815      	ldr	r5, [r2, #0]
 80087ae:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80087b0:	4604      	mov	r4, r0
 80087b2:	086d      	lsrs	r5, r5, #1
 80087b4:	ed93 0a00 	vldr	s0, [r3]
 80087b8:	462a      	mov	r2, r5
 80087ba:	e9d0 0104 	ldrd	r0, r1, [r0, #16]
 80087be:	f003 fbc7 	bl	800bf50 <acc_alg_iq_demodulation_q3_12_real>
 80087c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80087c4:	00ad      	lsls	r5, r5, #2
 80087c6:	601d      	str	r5, [r3, #0]
 80087c8:	bd38      	pop	{r3, r4, r5, pc}
 80087ca:	bf00      	nop

080087cc <iq_mix_q3_12_complex>:
 80087cc:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80087ce:	ed90 1a10 	vldr	s2, [r0, #64]	; 0x40
 80087d2:	edd0 0a0f 	vldr	s1, [r0, #60]	; 0x3c
 80087d6:	b538      	push	{r3, r4, r5, lr}
 80087d8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80087da:	6815      	ldr	r5, [r2, #0]
 80087dc:	ed93 0a00 	vldr	s0, [r3]
 80087e0:	4604      	mov	r4, r0
 80087e2:	08a9      	lsrs	r1, r5, #2
 80087e4:	6900      	ldr	r0, [r0, #16]
 80087e6:	f003 fc15 	bl	800c014 <acc_alg_iq_demodulation_q3_12_complex>
 80087ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80087ec:	f025 0503 	bic.w	r5, r5, #3
 80087f0:	601d      	str	r5, [r3, #0]
 80087f2:	bd38      	pop	{r3, r4, r5, pc}

080087f4 <validate>:
 80087f4:	4a21      	ldr	r2, [pc, #132]	; (800887c <validate+0x88>)
 80087f6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80087f8:	4293      	cmp	r3, r2
 80087fa:	b510      	push	{r4, lr}
 80087fc:	4604      	mov	r4, r0
 80087fe:	d023      	beq.n	8008848 <validate+0x54>
 8008800:	4a1f      	ldr	r2, [pc, #124]	; (8008880 <validate+0x8c>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d007      	beq.n	8008816 <validate+0x22>
 8008806:	4b1f      	ldr	r3, [pc, #124]	; (8008884 <validate+0x90>)
 8008808:	4a1f      	ldr	r2, [pc, #124]	; (8008888 <validate+0x94>)
 800880a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800880c:	491f      	ldr	r1, [pc, #124]	; (800888c <validate+0x98>)
 800880e:	2000      	movs	r0, #0
 8008810:	4798      	blx	r3
 8008812:	2000      	movs	r0, #0
 8008814:	bd10      	pop	{r4, pc}
 8008816:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 800881a:	429a      	cmp	r2, r3
 800881c:	d027      	beq.n	800886e <validate+0x7a>
 800881e:	69a3      	ldr	r3, [r4, #24]
 8008820:	b113      	cbz	r3, 8008828 <validate+0x34>
 8008822:	f7fc fffd 	bl	8005820 <acc_rss_integration_log_level>
 8008826:	b9d8      	cbnz	r0, 8008860 <validate+0x6c>
 8008828:	69e3      	ldr	r3, [r4, #28]
 800882a:	b143      	cbz	r3, 800883e <validate+0x4a>
 800882c:	f7fc fff8 	bl	8005820 <acc_rss_integration_log_level>
 8008830:	b128      	cbz	r0, 800883e <validate+0x4a>
 8008832:	4b14      	ldr	r3, [pc, #80]	; (8008884 <validate+0x90>)
 8008834:	4a16      	ldr	r2, [pc, #88]	; (8008890 <validate+0x9c>)
 8008836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008838:	4914      	ldr	r1, [pc, #80]	; (800888c <validate+0x98>)
 800883a:	2001      	movs	r0, #1
 800883c:	4798      	blx	r3
 800883e:	6820      	ldr	r0, [r4, #0]
 8008840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008844:	6883      	ldr	r3, [r0, #8]
 8008846:	4718      	bx	r3
 8008848:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 800884c:	429a      	cmp	r2, r3
 800884e:	d0e6      	beq.n	800881e <validate+0x2a>
 8008850:	4b0c      	ldr	r3, [pc, #48]	; (8008884 <validate+0x90>)
 8008852:	4a10      	ldr	r2, [pc, #64]	; (8008894 <validate+0xa0>)
 8008854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008856:	490d      	ldr	r1, [pc, #52]	; (800888c <validate+0x98>)
 8008858:	2000      	movs	r0, #0
 800885a:	4798      	blx	r3
 800885c:	2000      	movs	r0, #0
 800885e:	bd10      	pop	{r4, pc}
 8008860:	4b08      	ldr	r3, [pc, #32]	; (8008884 <validate+0x90>)
 8008862:	4a0d      	ldr	r2, [pc, #52]	; (8008898 <validate+0xa4>)
 8008864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008866:	4909      	ldr	r1, [pc, #36]	; (800888c <validate+0x98>)
 8008868:	2001      	movs	r0, #1
 800886a:	4798      	blx	r3
 800886c:	e7dc      	b.n	8008828 <validate+0x34>
 800886e:	4b05      	ldr	r3, [pc, #20]	; (8008884 <validate+0x90>)
 8008870:	4a0a      	ldr	r2, [pc, #40]	; (800889c <validate+0xa8>)
 8008872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008874:	4905      	ldr	r1, [pc, #20]	; (800888c <validate+0x98>)
 8008876:	2000      	movs	r0, #0
 8008878:	4798      	blx	r3
 800887a:	e7ca      	b.n	8008812 <validate+0x1e>
 800887c:	080087cd 	.word	0x080087cd
 8008880:	080087a1 	.word	0x080087a1
 8008884:	200004c0 	.word	0x200004c0
 8008888:	0800f494 	.word	0x0800f494
 800888c:	0800f448 	.word	0x0800f448
 8008890:	0800f2bc 	.word	0x0800f2bc
 8008894:	0800f3cc 	.word	0x0800f3cc
 8008898:	0800f28c 	.word	0x0800f28c
 800889c:	0800f45c 	.word	0x0800f45c

080088a0 <acc_element_iq_mixer_init>:
 80088a0:	4b10      	ldr	r3, [pc, #64]	; (80088e4 <acc_element_iq_mixer_init+0x44>)
 80088a2:	4a11      	ldr	r2, [pc, #68]	; (80088e8 <acc_element_iq_mixer_init+0x48>)
 80088a4:	6043      	str	r3, [r0, #4]
 80088a6:	4b11      	ldr	r3, [pc, #68]	; (80088ec <acc_element_iq_mixer_init+0x4c>)
 80088a8:	ed80 0a0f 	vstr	s0, [r0, #60]	; 0x3c
 80088ac:	2904      	cmp	r1, #4
 80088ae:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80088b2:	edc0 0a10 	vstr	s1, [r0, #64]	; 0x40
 80088b6:	d00c      	beq.n	80088d2 <acc_element_iq_mixer_init+0x32>
 80088b8:	2907      	cmp	r1, #7
 80088ba:	d00e      	beq.n	80088da <acc_element_iq_mixer_init+0x3a>
 80088bc:	b510      	push	{r4, lr}
 80088be:	4b0c      	ldr	r3, [pc, #48]	; (80088f0 <acc_element_iq_mixer_init+0x50>)
 80088c0:	4a0c      	ldr	r2, [pc, #48]	; (80088f4 <acc_element_iq_mixer_init+0x54>)
 80088c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088c4:	490c      	ldr	r1, [pc, #48]	; (80088f8 <acc_element_iq_mixer_init+0x58>)
 80088c6:	2400      	movs	r4, #0
 80088c8:	6384      	str	r4, [r0, #56]	; 0x38
 80088ca:	4620      	mov	r0, r4
 80088cc:	4798      	blx	r3
 80088ce:	4620      	mov	r0, r4
 80088d0:	bd10      	pop	{r4, pc}
 80088d2:	4b0a      	ldr	r3, [pc, #40]	; (80088fc <acc_element_iq_mixer_init+0x5c>)
 80088d4:	6383      	str	r3, [r0, #56]	; 0x38
 80088d6:	2001      	movs	r0, #1
 80088d8:	4770      	bx	lr
 80088da:	4b09      	ldr	r3, [pc, #36]	; (8008900 <acc_element_iq_mixer_init+0x60>)
 80088dc:	6383      	str	r3, [r0, #56]	; 0x38
 80088de:	2001      	movs	r0, #1
 80088e0:	4770      	bx	lr
 80088e2:	bf00      	nop
 80088e4:	08008785 	.word	0x08008785
 80088e8:	080087f5 	.word	0x080087f5
 80088ec:	08008799 	.word	0x08008799
 80088f0:	200004c0 	.word	0x200004c0
 80088f4:	0800f2cc 	.word	0x0800f2cc
 80088f8:	0800f448 	.word	0x0800f448
 80088fc:	080087a1 	.word	0x080087a1
 8008900:	080087cd 	.word	0x080087cd

08008904 <noise_level_normalization_u16>:
 8008904:	0849      	lsrs	r1, r1, #1
 8008906:	d01e      	beq.n	8008946 <noise_level_normalization_u16+0x42>
 8008908:	b470      	push	{r4, r5, r6}
 800890a:	eb00 0441 	add.w	r4, r0, r1, lsl #1
 800890e:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8008912:	2600      	movs	r6, #0
 8008914:	b92a      	cbnz	r2, 8008922 <noise_level_normalization_u16+0x1e>
 8008916:	8005      	strh	r5, [r0, #0]
 8008918:	3002      	adds	r0, #2
 800891a:	42a0      	cmp	r0, r4
 800891c:	d1fa      	bne.n	8008914 <noise_level_normalization_u16+0x10>
 800891e:	bc70      	pop	{r4, r5, r6}
 8008920:	4770      	bx	lr
 8008922:	8801      	ldrh	r1, [r0, #0]
 8008924:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
 8008928:	fb03 f101 	mul.w	r1, r3, r1
 800892c:	fb91 f1f2 	sdiv	r1, r1, r2
 8008930:	f511 4100 	adds.w	r1, r1, #32768	; 0x8000
 8008934:	d405      	bmi.n	8008942 <noise_level_normalization_u16+0x3e>
 8008936:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800893a:	bfa8      	it	ge
 800893c:	4629      	movge	r1, r5
 800893e:	8001      	strh	r1, [r0, #0]
 8008940:	e7ea      	b.n	8008918 <noise_level_normalization_u16+0x14>
 8008942:	8006      	strh	r6, [r0, #0]
 8008944:	e7e8      	b.n	8008918 <noise_level_normalization_u16+0x14>
 8008946:	4770      	bx	lr

08008948 <event>:
 8008948:	b570      	push	{r4, r5, r6, lr}
 800894a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800894c:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 800894e:	6819      	ldr	r1, [r3, #0]
 8008950:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 8008952:	8f43      	ldrh	r3, [r0, #58]	; 0x3a
 8008954:	4604      	mov	r4, r0
 8008956:	6900      	ldr	r0, [r0, #16]
 8008958:	47a8      	blx	r5
 800895a:	6820      	ldr	r0, [r4, #0]
 800895c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008960:	6843      	ldr	r3, [r0, #4]
 8008962:	4718      	bx	r3

08008964 <reset>:
 8008964:	6800      	ldr	r0, [r0, #0]
 8008966:	68c3      	ldr	r3, [r0, #12]
 8008968:	4718      	bx	r3
 800896a:	bf00      	nop

0800896c <validate>:
 800896c:	6983      	ldr	r3, [r0, #24]
 800896e:	b510      	push	{r4, lr}
 8008970:	4604      	mov	r4, r0
 8008972:	b113      	cbz	r3, 800897a <validate+0xe>
 8008974:	f7fc ff54 	bl	8005820 <acc_rss_integration_log_level>
 8008978:	b978      	cbnz	r0, 800899a <validate+0x2e>
 800897a:	69e3      	ldr	r3, [r4, #28]
 800897c:	b143      	cbz	r3, 8008990 <validate+0x24>
 800897e:	f7fc ff4f 	bl	8005820 <acc_rss_integration_log_level>
 8008982:	b128      	cbz	r0, 8008990 <validate+0x24>
 8008984:	4b08      	ldr	r3, [pc, #32]	; (80089a8 <validate+0x3c>)
 8008986:	4a09      	ldr	r2, [pc, #36]	; (80089ac <validate+0x40>)
 8008988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800898a:	4909      	ldr	r1, [pc, #36]	; (80089b0 <validate+0x44>)
 800898c:	2001      	movs	r0, #1
 800898e:	4798      	blx	r3
 8008990:	6820      	ldr	r0, [r4, #0]
 8008992:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008996:	6883      	ldr	r3, [r0, #8]
 8008998:	4718      	bx	r3
 800899a:	4b03      	ldr	r3, [pc, #12]	; (80089a8 <validate+0x3c>)
 800899c:	4a05      	ldr	r2, [pc, #20]	; (80089b4 <validate+0x48>)
 800899e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089a0:	4903      	ldr	r1, [pc, #12]	; (80089b0 <validate+0x44>)
 80089a2:	2001      	movs	r0, #1
 80089a4:	4798      	blx	r3
 80089a6:	e7e8      	b.n	800897a <validate+0xe>
 80089a8:	200004c0 	.word	0x200004c0
 80089ac:	0800f2bc 	.word	0x0800f2bc
 80089b0:	0800f4ac 	.word	0x0800f4ac
 80089b4:	0800f28c 	.word	0x0800f28c

080089b8 <acc_element_noise_level_normalization_init>:
 80089b8:	2902      	cmp	r1, #2
 80089ba:	b510      	push	{r4, lr}
 80089bc:	8702      	strh	r2, [r0, #56]	; 0x38
 80089be:	8743      	strh	r3, [r0, #58]	; 0x3a
 80089c0:	d001      	beq.n	80089c6 <acc_element_noise_level_normalization_init+0xe>
 80089c2:	2905      	cmp	r1, #5
 80089c4:	d109      	bne.n	80089da <acc_element_noise_level_normalization_init+0x22>
 80089c6:	490a      	ldr	r1, [pc, #40]	; (80089f0 <acc_element_noise_level_normalization_init+0x38>)
 80089c8:	4a0a      	ldr	r2, [pc, #40]	; (80089f4 <acc_element_noise_level_normalization_init+0x3c>)
 80089ca:	4c0b      	ldr	r4, [pc, #44]	; (80089f8 <acc_element_noise_level_normalization_init+0x40>)
 80089cc:	4b0b      	ldr	r3, [pc, #44]	; (80089fc <acc_element_noise_level_normalization_init+0x44>)
 80089ce:	63c4      	str	r4, [r0, #60]	; 0x3c
 80089d0:	e9c0 1201 	strd	r1, r2, [r0, #4]
 80089d4:	60c3      	str	r3, [r0, #12]
 80089d6:	2001      	movs	r0, #1
 80089d8:	bd10      	pop	{r4, pc}
 80089da:	4b09      	ldr	r3, [pc, #36]	; (8008a00 <acc_element_noise_level_normalization_init+0x48>)
 80089dc:	4a09      	ldr	r2, [pc, #36]	; (8008a04 <acc_element_noise_level_normalization_init+0x4c>)
 80089de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089e0:	4909      	ldr	r1, [pc, #36]	; (8008a08 <acc_element_noise_level_normalization_init+0x50>)
 80089e2:	2400      	movs	r4, #0
 80089e4:	63c4      	str	r4, [r0, #60]	; 0x3c
 80089e6:	4620      	mov	r0, r4
 80089e8:	4798      	blx	r3
 80089ea:	4620      	mov	r0, r4
 80089ec:	bd10      	pop	{r4, pc}
 80089ee:	bf00      	nop
 80089f0:	08008949 	.word	0x08008949
 80089f4:	0800896d 	.word	0x0800896d
 80089f8:	08008905 	.word	0x08008905
 80089fc:	08008965 	.word	0x08008965
 8008a00:	200004c0 	.word	0x200004c0
 8008a04:	0800f2cc 	.word	0x0800f2cc
 8008a08:	0800f4ac 	.word	0x0800f4ac

08008a0c <event>:
 8008a0c:	b510      	push	{r4, lr}
 8008a0e:	4604      	mov	r4, r0
 8008a10:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008a12:	4798      	blx	r3
 8008a14:	6820      	ldr	r0, [r4, #0]
 8008a16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a1a:	6843      	ldr	r3, [r0, #4]
 8008a1c:	4718      	bx	r3
 8008a1e:	bf00      	nop

08008a20 <reset>:
 8008a20:	6800      	ldr	r0, [r0, #0]
 8008a22:	68c3      	ldr	r3, [r0, #12]
 8008a24:	4718      	bx	r3
 8008a26:	bf00      	nop

08008a28 <do_phase_compensation_q3_12>:
 8008a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a2c:	2a7c      	cmp	r2, #124	; 0x7c
 8008a2e:	b0fd      	sub	sp, #500	; 0x1f4
 8008a30:	d82a      	bhi.n	8008a88 <do_phase_compensation_q3_12+0x60>
 8008a32:	4689      	mov	r9, r1
 8008a34:	b329      	cbz	r1, 8008a82 <do_phase_compensation_q3_12+0x5a>
 8008a36:	469a      	mov	sl, r3
 8008a38:	ab7c      	add	r3, sp, #496	; 0x1f0
 8008a3a:	2600      	movs	r6, #0
 8008a3c:	eb03 0b82 	add.w	fp, r3, r2, lsl #2
 8008a40:	4615      	mov	r5, r2
 8008a42:	4604      	mov	r4, r0
 8008a44:	46b0      	mov	r8, r6
 8008a46:	f5ab 7bfa 	sub.w	fp, fp, #500	; 0x1f4
 8008a4a:	0097      	lsls	r7, r2, #2
 8008a4c:	4621      	mov	r1, r4
 8008a4e:	463a      	mov	r2, r7
 8008a50:	4668      	mov	r0, sp
 8008a52:	f004 fc35 	bl	800d2c0 <memcpy>
 8008a56:	462a      	mov	r2, r5
 8008a58:	4651      	mov	r1, sl
 8008a5a:	4668      	mov	r0, sp
 8008a5c:	f8cd 8000 	str.w	r8, [sp]
 8008a60:	f8cb 8000 	str.w	r8, [fp]
 8008a64:	f003 fb48 	bl	800c0f8 <acc_alg_phase_estimation_q3_12>
 8008a68:	4629      	mov	r1, r5
 8008a6a:	4668      	mov	r0, sp
 8008a6c:	f003 ff4c 	bl	800c908 <acc_alg_basic_math_q3_12_complex_conj_normalize>
 8008a70:	3601      	adds	r6, #1
 8008a72:	4620      	mov	r0, r4
 8008a74:	462a      	mov	r2, r5
 8008a76:	4669      	mov	r1, sp
 8008a78:	f003 feee 	bl	800c858 <acc_alg_basic_math_q3_12_complex_mul>
 8008a7c:	45b1      	cmp	r9, r6
 8008a7e:	443c      	add	r4, r7
 8008a80:	d1e4      	bne.n	8008a4c <do_phase_compensation_q3_12+0x24>
 8008a82:	b07d      	add	sp, #500	; 0x1f4
 8008a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a88:	4801      	ldr	r0, [pc, #4]	; (8008a90 <do_phase_compensation_q3_12+0x68>)
 8008a8a:	217d      	movs	r1, #125	; 0x7d
 8008a8c:	f7ff f8ec 	bl	8007c68 <acc_assert_fail>
 8008a90:	0800f4d0 	.word	0x0800f4d0

08008a94 <phase_compensate_q3_12_complex>:
 8008a94:	e9d0 120f 	ldrd	r1, r2, [r0, #60]	; 0x3c
 8008a98:	f9b0 3044 	ldrsh.w	r3, [r0, #68]	; 0x44
 8008a9c:	6900      	ldr	r0, [r0, #16]
 8008a9e:	f7ff bfc3 	b.w	8008a28 <do_phase_compensation_q3_12>
 8008aa2:	bf00      	nop

08008aa4 <validate>:
 8008aa4:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	b510      	push	{r4, lr}
 8008aac:	d007      	beq.n	8008abe <validate+0x1a>
 8008aae:	4b12      	ldr	r3, [pc, #72]	; (8008af8 <validate+0x54>)
 8008ab0:	4a12      	ldr	r2, [pc, #72]	; (8008afc <validate+0x58>)
 8008ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ab4:	4912      	ldr	r1, [pc, #72]	; (8008b00 <validate+0x5c>)
 8008ab6:	2000      	movs	r0, #0
 8008ab8:	4798      	blx	r3
 8008aba:	2000      	movs	r0, #0
 8008abc:	bd10      	pop	{r4, pc}
 8008abe:	6983      	ldr	r3, [r0, #24]
 8008ac0:	4604      	mov	r4, r0
 8008ac2:	b113      	cbz	r3, 8008aca <validate+0x26>
 8008ac4:	f7fc feac 	bl	8005820 <acc_rss_integration_log_level>
 8008ac8:	b978      	cbnz	r0, 8008aea <validate+0x46>
 8008aca:	69e3      	ldr	r3, [r4, #28]
 8008acc:	b143      	cbz	r3, 8008ae0 <validate+0x3c>
 8008ace:	f7fc fea7 	bl	8005820 <acc_rss_integration_log_level>
 8008ad2:	b128      	cbz	r0, 8008ae0 <validate+0x3c>
 8008ad4:	4b08      	ldr	r3, [pc, #32]	; (8008af8 <validate+0x54>)
 8008ad6:	4a0b      	ldr	r2, [pc, #44]	; (8008b04 <validate+0x60>)
 8008ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ada:	4909      	ldr	r1, [pc, #36]	; (8008b00 <validate+0x5c>)
 8008adc:	2001      	movs	r0, #1
 8008ade:	4798      	blx	r3
 8008ae0:	6820      	ldr	r0, [r4, #0]
 8008ae2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ae6:	6883      	ldr	r3, [r0, #8]
 8008ae8:	4718      	bx	r3
 8008aea:	4b03      	ldr	r3, [pc, #12]	; (8008af8 <validate+0x54>)
 8008aec:	4a06      	ldr	r2, [pc, #24]	; (8008b08 <validate+0x64>)
 8008aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008af0:	4903      	ldr	r1, [pc, #12]	; (8008b00 <validate+0x5c>)
 8008af2:	2001      	movs	r0, #1
 8008af4:	4798      	blx	r3
 8008af6:	e7e8      	b.n	8008aca <validate+0x26>
 8008af8:	200004c0 	.word	0x200004c0
 8008afc:	0800f3cc 	.word	0x0800f3cc
 8008b00:	0800f4d0 	.word	0x0800f4d0
 8008b04:	0800f2bc 	.word	0x0800f2bc
 8008b08:	0800f28c 	.word	0x0800f28c

08008b0c <acc_element_phase_compensation_init>:
 8008b0c:	eddf 6a17 	vldr	s13, [pc, #92]	; 8008b6c <acc_element_phase_compensation_init+0x60>
 8008b10:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b18:	ee20 0a26 	vmul.f32	s0, s0, s13
 8008b1c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8008b20:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8008b24:	bfb8      	it	lt
 8008b26:	eef0 7a47 	vmovlt.f32	s15, s14
 8008b2a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008b2e:	b538      	push	{r3, r4, r5, lr}
 8008b30:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008b34:	6403      	str	r3, [r0, #64]	; 0x40
 8008b36:	4b0e      	ldr	r3, [pc, #56]	; (8008b70 <acc_element_phase_compensation_init+0x64>)
 8008b38:	4d0e      	ldr	r5, [pc, #56]	; (8008b74 <acc_element_phase_compensation_init+0x68>)
 8008b3a:	4c0f      	ldr	r4, [pc, #60]	; (8008b78 <acc_element_phase_compensation_init+0x6c>)
 8008b3c:	60c3      	str	r3, [r0, #12]
 8008b3e:	ee10 3a10 	vmov	r3, s0
 8008b42:	2907      	cmp	r1, #7
 8008b44:	e9c0 5401 	strd	r5, r4, [r0, #4]
 8008b48:	63c2      	str	r2, [r0, #60]	; 0x3c
 8008b4a:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 8008b4e:	d103      	bne.n	8008b58 <acc_element_phase_compensation_init+0x4c>
 8008b50:	4b0a      	ldr	r3, [pc, #40]	; (8008b7c <acc_element_phase_compensation_init+0x70>)
 8008b52:	6383      	str	r3, [r0, #56]	; 0x38
 8008b54:	2001      	movs	r0, #1
 8008b56:	bd38      	pop	{r3, r4, r5, pc}
 8008b58:	4b09      	ldr	r3, [pc, #36]	; (8008b80 <acc_element_phase_compensation_init+0x74>)
 8008b5a:	4a0a      	ldr	r2, [pc, #40]	; (8008b84 <acc_element_phase_compensation_init+0x78>)
 8008b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b5e:	490a      	ldr	r1, [pc, #40]	; (8008b88 <acc_element_phase_compensation_init+0x7c>)
 8008b60:	2400      	movs	r4, #0
 8008b62:	6384      	str	r4, [r0, #56]	; 0x38
 8008b64:	4620      	mov	r0, r4
 8008b66:	4798      	blx	r3
 8008b68:	4620      	mov	r0, r4
 8008b6a:	bd38      	pop	{r3, r4, r5, pc}
 8008b6c:	45800000 	.word	0x45800000
 8008b70:	08008a21 	.word	0x08008a21
 8008b74:	08008a0d 	.word	0x08008a0d
 8008b78:	08008aa5 	.word	0x08008aa5
 8008b7c:	08008a95 	.word	0x08008a95
 8008b80:	200004c0 	.word	0x200004c0
 8008b84:	0800f2cc 	.word	0x0800f2cc
 8008b88:	0800f4d0 	.word	0x0800f4d0

08008b8c <reset>:
 8008b8c:	69c3      	ldr	r3, [r0, #28]
 8008b8e:	6800      	ldr	r0, [r0, #0]
 8008b90:	2201      	movs	r2, #1
 8008b92:	701a      	strb	r2, [r3, #0]
 8008b94:	68c3      	ldr	r3, [r0, #12]
 8008b96:	4718      	bx	r3

08008b98 <event>:
 8008b98:	b570      	push	{r4, r5, r6, lr}
 8008b9a:	69c5      	ldr	r5, [r0, #28]
 8008b9c:	462b      	mov	r3, r5
 8008b9e:	4604      	mov	r4, r0
 8008ba0:	f813 2b04 	ldrb.w	r2, [r3], #4
 8008ba4:	b962      	cbnz	r2, 8008bc0 <event+0x28>
 8008ba6:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8008ba8:	6b85      	ldr	r5, [r0, #56]	; 0x38
 8008baa:	ed90 0a0f 	vldr	s0, [r0, #60]	; 0x3c
 8008bae:	6812      	ldr	r2, [r2, #0]
 8008bb0:	6900      	ldr	r0, [r0, #16]
 8008bb2:	4619      	mov	r1, r3
 8008bb4:	47a8      	blx	r5
 8008bb6:	6820      	ldr	r0, [r4, #0]
 8008bb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008bbc:	6843      	ldr	r3, [r0, #4]
 8008bbe:	4718      	bx	r3
 8008bc0:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8008bc2:	6901      	ldr	r1, [r0, #16]
 8008bc4:	6812      	ldr	r2, [r2, #0]
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f004 fb7a 	bl	800d2c0 <memcpy>
 8008bcc:	6820      	ldr	r0, [r4, #0]
 8008bce:	2300      	movs	r3, #0
 8008bd0:	702b      	strb	r3, [r5, #0]
 8008bd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008bd6:	6843      	ldr	r3, [r0, #4]
 8008bd8:	4718      	bx	r3
 8008bda:	bf00      	nop

08008bdc <filter_q3_12_complex>:
 8008bdc:	b530      	push	{r4, r5, lr}
 8008bde:	ed2d 8b02 	vpush	{d8}
 8008be2:	b083      	sub	sp, #12
 8008be4:	4604      	mov	r4, r0
 8008be6:	2007      	movs	r0, #7
 8008be8:	eeb0 8a40 	vmov.f32	s16, s0
 8008bec:	4615      	mov	r5, r2
 8008bee:	9101      	str	r1, [sp, #4]
 8008bf0:	f7ff f852 	bl	8007c98 <acc_element_sizeof>
 8008bf4:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8008c38 <filter_q3_12_complex+0x5c>
 8008bf8:	9901      	ldr	r1, [sp, #4]
 8008bfa:	fbb5 f3f0 	udiv	r3, r5, r0
 8008bfe:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8008c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c06:	ee28 8a07 	vmul.f32	s16, s16, s14
 8008c0a:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8008c0e:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8008c12:	bfb8      	it	lt
 8008c14:	eeb0 0a67 	vmovlt.f32	s0, s15
 8008c18:	ee38 8a00 	vadd.f32	s16, s16, s0
 8008c1c:	4620      	mov	r0, r4
 8008c1e:	eebd 8ac8 	vcvt.s32.f32	s16, s16
 8008c22:	ee18 2a10 	vmov	r2, s16
 8008c26:	b212      	sxth	r2, r2
 8008c28:	b003      	add	sp, #12
 8008c2a:	ecbd 8b02 	vpop	{d8}
 8008c2e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008c32:	f002 bfab 	b.w	800bb8c <acc_alg_basic_exponential_smoothing_q3_12_complex>
 8008c36:	bf00      	nop
 8008c38:	45800000 	.word	0x45800000

08008c3c <validate>:
 8008c3c:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 8008c40:	429a      	cmp	r2, r3
 8008c42:	b510      	push	{r4, lr}
 8008c44:	d015      	beq.n	8008c72 <validate+0x36>
 8008c46:	6984      	ldr	r4, [r0, #24]
 8008c48:	b13c      	cbz	r4, 8008c5a <validate+0x1e>
 8008c4a:	4b10      	ldr	r3, [pc, #64]	; (8008c8c <validate+0x50>)
 8008c4c:	4a10      	ldr	r2, [pc, #64]	; (8008c90 <validate+0x54>)
 8008c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c50:	4910      	ldr	r1, [pc, #64]	; (8008c94 <validate+0x58>)
 8008c52:	2000      	movs	r0, #0
 8008c54:	4798      	blx	r3
 8008c56:	2000      	movs	r0, #0
 8008c58:	bd10      	pop	{r4, pc}
 8008c5a:	69c2      	ldr	r2, [r0, #28]
 8008c5c:	3204      	adds	r2, #4
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d00f      	beq.n	8008c82 <validate+0x46>
 8008c62:	4b0a      	ldr	r3, [pc, #40]	; (8008c8c <validate+0x50>)
 8008c64:	4a0c      	ldr	r2, [pc, #48]	; (8008c98 <validate+0x5c>)
 8008c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c68:	490a      	ldr	r1, [pc, #40]	; (8008c94 <validate+0x58>)
 8008c6a:	4620      	mov	r0, r4
 8008c6c:	4798      	blx	r3
 8008c6e:	2000      	movs	r0, #0
 8008c70:	bd10      	pop	{r4, pc}
 8008c72:	4b06      	ldr	r3, [pc, #24]	; (8008c8c <validate+0x50>)
 8008c74:	4a09      	ldr	r2, [pc, #36]	; (8008c9c <validate+0x60>)
 8008c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c78:	4906      	ldr	r1, [pc, #24]	; (8008c94 <validate+0x58>)
 8008c7a:	2000      	movs	r0, #0
 8008c7c:	4798      	blx	r3
 8008c7e:	2000      	movs	r0, #0
 8008c80:	bd10      	pop	{r4, pc}
 8008c82:	6800      	ldr	r0, [r0, #0]
 8008c84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c88:	6883      	ldr	r3, [r0, #8]
 8008c8a:	4718      	bx	r3
 8008c8c:	200004c0 	.word	0x200004c0
 8008c90:	0800f53c 	.word	0x0800f53c
 8008c94:	0800f518 	.word	0x0800f518
 8008c98:	0800f55c 	.word	0x0800f55c
 8008c9c:	0800f4ec 	.word	0x0800f4ec

08008ca0 <acc_element_time_domain_low_pass_filter_init>:
 8008ca0:	b510      	push	{r4, lr}
 8008ca2:	4a0c      	ldr	r2, [pc, #48]	; (8008cd4 <acc_element_time_domain_low_pass_filter_init+0x34>)
 8008ca4:	4c0c      	ldr	r4, [pc, #48]	; (8008cd8 <acc_element_time_domain_low_pass_filter_init+0x38>)
 8008ca6:	4b0d      	ldr	r3, [pc, #52]	; (8008cdc <acc_element_time_domain_low_pass_filter_init+0x3c>)
 8008ca8:	60c3      	str	r3, [r0, #12]
 8008caa:	2907      	cmp	r1, #7
 8008cac:	e9c0 4201 	strd	r4, r2, [r0, #4]
 8008cb0:	ed80 0a0f 	vstr	s0, [r0, #60]	; 0x3c
 8008cb4:	d103      	bne.n	8008cbe <acc_element_time_domain_low_pass_filter_init+0x1e>
 8008cb6:	4b0a      	ldr	r3, [pc, #40]	; (8008ce0 <acc_element_time_domain_low_pass_filter_init+0x40>)
 8008cb8:	6383      	str	r3, [r0, #56]	; 0x38
 8008cba:	2001      	movs	r0, #1
 8008cbc:	bd10      	pop	{r4, pc}
 8008cbe:	4b09      	ldr	r3, [pc, #36]	; (8008ce4 <acc_element_time_domain_low_pass_filter_init+0x44>)
 8008cc0:	4a09      	ldr	r2, [pc, #36]	; (8008ce8 <acc_element_time_domain_low_pass_filter_init+0x48>)
 8008cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cc4:	4909      	ldr	r1, [pc, #36]	; (8008cec <acc_element_time_domain_low_pass_filter_init+0x4c>)
 8008cc6:	2400      	movs	r4, #0
 8008cc8:	6384      	str	r4, [r0, #56]	; 0x38
 8008cca:	4620      	mov	r0, r4
 8008ccc:	4798      	blx	r3
 8008cce:	4620      	mov	r0, r4
 8008cd0:	bd10      	pop	{r4, pc}
 8008cd2:	bf00      	nop
 8008cd4:	08008c3d 	.word	0x08008c3d
 8008cd8:	08008b99 	.word	0x08008b99
 8008cdc:	08008b8d 	.word	0x08008b8d
 8008ce0:	08008bdd 	.word	0x08008bdd
 8008ce4:	200004c0 	.word	0x200004c0
 8008ce8:	0800f2cc 	.word	0x0800f2cc
 8008cec:	0800f518 	.word	0x0800f518

08008cf0 <acc_element_source_adc_init_radar_engine>:
 8008cf0:	b538      	push	{r3, r4, r5, lr}
 8008cf2:	9d04      	ldr	r5, [sp, #16]
 8008cf4:	4604      	mov	r4, r0
 8008cf6:	4608      	mov	r0, r1
 8008cf8:	63e1      	str	r1, [r4, #60]	; 0x3c
 8008cfa:	4611      	mov	r1, r2
 8008cfc:	461a      	mov	r2, r3
 8008cfe:	462b      	mov	r3, r5
 8008d00:	f7fe fa56 	bl	80071b0 <acc_sensor_manager_prepare_radar_engine>
 8008d04:	896b      	ldrh	r3, [r5, #10]
 8008d06:	8723      	strh	r3, [r4, #56]	; 0x38
 8008d08:	bd38      	pop	{r3, r4, r5, pc}
 8008d0a:	bf00      	nop

08008d0c <acc_element_source_adc_init>:
 8008d0c:	b510      	push	{r4, lr}
 8008d0e:	b084      	sub	sp, #16
 8008d10:	4604      	mov	r4, r0
 8008d12:	4608      	mov	r0, r1
 8008d14:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8008d18:	9101      	str	r1, [sp, #4]
 8008d1a:	f7fc fbbd 	bl	8005498 <acc_base_configuration_print>
 8008d1e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008d22:	9901      	ldr	r1, [sp, #4]
 8008d24:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8008d26:	b004      	add	sp, #16
 8008d28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d2c:	f7fe ba8c 	b.w	8007248 <acc_sensor_manager_prepare_measurement>

08008d30 <acc_element_source_adc_release>:
 8008d30:	b110      	cbz	r0, 8008d38 <acc_element_source_adc_release+0x8>
 8008d32:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8008d34:	f7fe bb4e 	b.w	80073d4 <acc_sensor_manager_release_measurement>
 8008d38:	4770      	bx	lr
 8008d3a:	bf00      	nop

08008d3c <acc_element_source_adc_reset>:
 8008d3c:	6800      	ldr	r0, [r0, #0]
 8008d3e:	68c3      	ldr	r3, [r0, #12]
 8008d40:	4718      	bx	r3
 8008d42:	bf00      	nop

08008d44 <acc_element_source_adc_validate>:
 8008d44:	6800      	ldr	r0, [r0, #0]
 8008d46:	6883      	ldr	r3, [r0, #8]
 8008d48:	4718      	bx	r3
 8008d4a:	bf00      	nop

08008d4c <acc_element_source_adc_produce>:
 8008d4c:	b530      	push	{r4, r5, lr}
 8008d4e:	4604      	mov	r4, r0
 8008d50:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8008d52:	b083      	sub	sp, #12
 8008d54:	2800      	cmp	r0, #0
 8008d56:	d02f      	beq.n	8008db8 <acc_element_source_adc_produce+0x6c>
 8008d58:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008d5a:	4a19      	ldr	r2, [pc, #100]	; (8008dc0 <acc_element_source_adc_produce+0x74>)
 8008d5c:	6a25      	ldr	r5, [r4, #32]
 8008d5e:	601a      	str	r2, [r3, #0]
 8008d60:	f7fe fb4c 	bl	80073fc <acc_sensor_manager_get_sensor_id>
 8008d64:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 8008d66:	6028      	str	r0, [r5, #0]
 8008d68:	6961      	ldr	r1, [r4, #20]
 8008d6a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8008d6c:	ab01      	add	r3, sp, #4
 8008d6e:	f7fe f991 	bl	8007094 <acc_sensor_manager_acquire_adc_data>
 8008d72:	4605      	mov	r5, r0
 8008d74:	b1c0      	cbz	r0, 8008da8 <acc_element_source_adc_produce+0x5c>
 8008d76:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 8008d7a:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8008d7c:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8008d80:	005b      	lsls	r3, r3, #1
 8008d82:	6003      	str	r3, [r0, #0]
 8008d84:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008d86:	7011      	strb	r1, [r2, #0]
 8008d88:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008d8c:	701a      	strb	r2, [r3, #0]
 8008d8e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008d92:	b90b      	cbnz	r3, 8008d98 <acc_element_source_adc_produce+0x4c>
 8008d94:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008d98:	6820      	ldr	r0, [r4, #0]
 8008d9a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8008d9c:	7013      	strb	r3, [r2, #0]
 8008d9e:	6843      	ldr	r3, [r0, #4]
 8008da0:	4798      	blx	r3
 8008da2:	4628      	mov	r0, r5
 8008da4:	b003      	add	sp, #12
 8008da6:	bd30      	pop	{r4, r5, pc}
 8008da8:	4b06      	ldr	r3, [pc, #24]	; (8008dc4 <acc_element_source_adc_produce+0x78>)
 8008daa:	4a07      	ldr	r2, [pc, #28]	; (8008dc8 <acc_element_source_adc_produce+0x7c>)
 8008dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dae:	4907      	ldr	r1, [pc, #28]	; (8008dcc <acc_element_source_adc_produce+0x80>)
 8008db0:	4798      	blx	r3
 8008db2:	4628      	mov	r0, r5
 8008db4:	b003      	add	sp, #12
 8008db6:	bd30      	pop	{r4, r5, pc}
 8008db8:	4605      	mov	r5, r0
 8008dba:	4628      	mov	r0, r5
 8008dbc:	b003      	add	sp, #12
 8008dbe:	bd30      	pop	{r4, r5, pc}
 8008dc0:	51645c3c 	.word	0x51645c3c
 8008dc4:	200004c0 	.word	0x200004c0
 8008dc8:	0800f584 	.word	0x0800f584
 8008dcc:	0800f5a4 	.word	0x0800f5a4

08008dd0 <acc_element_source_adc_inject_data>:
 8008dd0:	b570      	push	{r4, r5, r6, lr}
 8008dd2:	4604      	mov	r4, r0
 8008dd4:	6940      	ldr	r0, [r0, #20]
 8008dd6:	4e08      	ldr	r6, [pc, #32]	; (8008df8 <acc_element_source_adc_inject_data+0x28>)
 8008dd8:	4615      	mov	r5, r2
 8008dda:	f004 fa71 	bl	800d2c0 <memcpy>
 8008dde:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008de0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008de2:	6820      	ldr	r0, [r4, #0]
 8008de4:	6a22      	ldr	r2, [r4, #32]
 8008de6:	600d      	str	r5, [r1, #0]
 8008de8:	2100      	movs	r1, #0
 8008dea:	601e      	str	r6, [r3, #0]
 8008dec:	6843      	ldr	r3, [r0, #4]
 8008dee:	6011      	str	r1, [r2, #0]
 8008df0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008df4:	4718      	bx	r3
 8008df6:	bf00      	nop
 8008df8:	51645c3c 	.word	0x51645c3c

08008dfc <acc_cpd_cbank_and_vana_calibration>:
 8008dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e00:	ed2d 8b02 	vpush	{d8}
 8008e04:	4614      	mov	r4, r2
 8008e06:	b08b      	sub	sp, #44	; 0x2c
 8008e08:	461e      	mov	r6, r3
 8008e0a:	ab09      	add	r3, sp, #36	; 0x24
 8008e0c:	4680      	mov	r8, r0
 8008e0e:	4689      	mov	r9, r1
 8008e10:	460a      	mov	r2, r1
 8008e12:	2500      	movs	r5, #0
 8008e14:	4601      	mov	r1, r0
 8008e16:	6820      	ldr	r0, [r4, #0]
 8008e18:	9300      	str	r3, [sp, #0]
 8008e1a:	ab08      	add	r3, sp, #32
 8008e1c:	e9cd 5508 	strd	r5, r5, [sp, #32]
 8008e20:	9606      	str	r6, [sp, #24]
 8008e22:	f7fe faed 	bl	8007400 <acc_sensor_protocol_r2_prepare_load>
 8008e26:	2800      	cmp	r0, #0
 8008e28:	f000 808b 	beq.w	8008f42 <acc_cpd_cbank_and_vana_calibration+0x146>
 8008e2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e2e:	461e      	mov	r6, r3
 8008e30:	f5c5 734b 	rsb	r3, r5, #812	; 0x32c
 8008e34:	429e      	cmp	r6, r3
 8008e36:	bf28      	it	cs
 8008e38:	461e      	movcs	r6, r3
 8008e3a:	9f08      	ldr	r7, [sp, #32]
 8008e3c:	f003 fc22 	bl	800c684 <acc_image_a111_r2c_cbank_and_vana_calibration_get>
 8008e40:	ea4f 0a55 	mov.w	sl, r5, lsr #1
 8008e44:	0872      	lsrs	r2, r6, #1
 8008e46:	4639      	mov	r1, r7
 8008e48:	eb00 008a 	add.w	r0, r0, sl, lsl #2
 8008e4c:	f003 fbcc 	bl	800c5e8 <acc_confprogram_copy>
 8008e50:	b2b2      	uxth	r2, r6
 8008e52:	9204      	str	r2, [sp, #16]
 8008e54:	f003 fc1a 	bl	800c68c <acc_image_a111_r2c_cbank_and_vana_calibration_param_table_get>
 8008e58:	6862      	ldr	r2, [r4, #4]
 8008e5a:	9201      	str	r2, [sp, #4]
 8008e5c:	2218      	movs	r2, #24
 8008e5e:	b2a9      	uxth	r1, r5
 8008e60:	4603      	mov	r3, r0
 8008e62:	9200      	str	r2, [sp, #0]
 8008e64:	4638      	mov	r0, r7
 8008e66:	9a04      	ldr	r2, [sp, #16]
 8008e68:	9205      	str	r2, [sp, #20]
 8008e6a:	9104      	str	r1, [sp, #16]
 8008e6c:	f003 face 	bl	800c40c <acc_confprogram_patch_offset>
 8008e70:	f003 fc0c 	bl	800c68c <acc_image_a111_r2c_cbank_and_vana_calibration_param_table_get>
 8008e74:	68a2      	ldr	r2, [r4, #8]
 8008e76:	9201      	str	r2, [sp, #4]
 8008e78:	2216      	movs	r2, #22
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	9200      	str	r2, [sp, #0]
 8008e7e:	4638      	mov	r0, r7
 8008e80:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8008e84:	f003 fac2 	bl	800c40c <acc_confprogram_patch_offset>
 8008e88:	f003 fc00 	bl	800c68c <acc_image_a111_r2c_cbank_and_vana_calibration_param_table_get>
 8008e8c:	68e2      	ldr	r2, [r4, #12]
 8008e8e:	9201      	str	r2, [sp, #4]
 8008e90:	2217      	movs	r2, #23
 8008e92:	4603      	mov	r3, r0
 8008e94:	9200      	str	r2, [sp, #0]
 8008e96:	4638      	mov	r0, r7
 8008e98:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8008e9c:	f003 fab6 	bl	800c40c <acc_confprogram_patch_offset>
 8008ea0:	f003 fbf4 	bl	800c68c <acc_image_a111_r2c_cbank_and_vana_calibration_param_table_get>
 8008ea4:	f04f 0c15 	mov.w	ip, #21
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	8a20      	ldrh	r0, [r4, #16]
 8008eac:	9001      	str	r0, [sp, #4]
 8008eae:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8008eb2:	f8cd c000 	str.w	ip, [sp]
 8008eb6:	4638      	mov	r0, r7
 8008eb8:	f003 faa8 	bl	800c40c <acc_confprogram_patch_offset>
 8008ebc:	f003 fbe6 	bl	800c68c <acc_image_a111_r2c_cbank_and_vana_calibration_param_table_get>
 8008ec0:	f04f 0b00 	mov.w	fp, #0
 8008ec4:	f04f 0c10 	mov.w	ip, #16
 8008ec8:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8008ecc:	4603      	mov	r3, r0
 8008ece:	e9cd bc00 	strd	fp, ip, [sp]
 8008ed2:	4638      	mov	r0, r7
 8008ed4:	f003 fa9a 	bl	800c40c <acc_confprogram_patch_offset>
 8008ed8:	4633      	mov	r3, r6
 8008eda:	6820      	ldr	r0, [r4, #0]
 8008edc:	4642      	mov	r2, r8
 8008ede:	fa1f f18a 	uxth.w	r1, sl
 8008ee2:	f7fd ff9d 	bl	8006e20 <acc_sensor_r2_load_confmem>
 8008ee6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008ee8:	4435      	add	r5, r6
 8008eea:	f5b5 7f4b 	cmp.w	r5, #812	; 0x32c
 8008eee:	d39f      	bcc.n	8008e30 <acc_cpd_cbank_and_vana_calibration+0x34>
 8008ef0:	48ba      	ldr	r0, [pc, #744]	; (80091dc <acc_cpd_cbank_and_vana_calibration+0x3e0>)
 8008ef2:	f003 fb87 	bl	800c604 <acc_diagnostic_log_set_scope>
 8008ef6:	6821      	ldr	r1, [r4, #0]
 8008ef8:	48b9      	ldr	r0, [pc, #740]	; (80091e0 <acc_cpd_cbank_and_vana_calibration+0x3e4>)
 8008efa:	f003 fba3 	bl	800c644 <acc_diagnostic_log_scalar>
 8008efe:	48b9      	ldr	r0, [pc, #740]	; (80091e4 <acc_cpd_cbank_and_vana_calibration+0x3e8>)
 8008f00:	2203      	movs	r2, #3
 8008f02:	4659      	mov	r1, fp
 8008f04:	f003 fb86 	bl	800c614 <acc_diagnostic_log_declare_parameter>
 8008f08:	6826      	ldr	r6, [r4, #0]
 8008f0a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008f0e:	4630      	mov	r0, r6
 8008f10:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8008f14:	f7fe fb52 	bl	80075bc <acc_sensor_protocol_r2_is_sensor_running>
 8008f18:	4605      	mov	r5, r0
 8008f1a:	b1f0      	cbz	r0, 8008f5a <acc_cpd_cbank_and_vana_calibration+0x15e>
 8008f1c:	4db2      	ldr	r5, [pc, #712]	; (80091e8 <acc_cpd_cbank_and_vana_calibration+0x3ec>)
 8008f1e:	4ab3      	ldr	r2, [pc, #716]	; (80091ec <acc_cpd_cbank_and_vana_calibration+0x3f0>)
 8008f20:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 8008f22:	49b3      	ldr	r1, [pc, #716]	; (80091f0 <acc_cpd_cbank_and_vana_calibration+0x3f4>)
 8008f24:	4633      	mov	r3, r6
 8008f26:	4658      	mov	r0, fp
 8008f28:	47a0      	blx	r4
 8008f2a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8008f2c:	4ab1      	ldr	r2, [pc, #708]	; (80091f4 <acc_cpd_cbank_and_vana_calibration+0x3f8>)
 8008f2e:	49b0      	ldr	r1, [pc, #704]	; (80091f0 <acc_cpd_cbank_and_vana_calibration+0x3f4>)
 8008f30:	2000      	movs	r0, #0
 8008f32:	4798      	blx	r3
 8008f34:	2600      	movs	r6, #0
 8008f36:	4630      	mov	r0, r6
 8008f38:	b00b      	add	sp, #44	; 0x2c
 8008f3a:	ecbd 8b02 	vpop	{d8}
 8008f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f42:	4ba9      	ldr	r3, [pc, #676]	; (80091e8 <acc_cpd_cbank_and_vana_calibration+0x3ec>)
 8008f44:	4aac      	ldr	r2, [pc, #688]	; (80091f8 <acc_cpd_cbank_and_vana_calibration+0x3fc>)
 8008f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f48:	49a9      	ldr	r1, [pc, #676]	; (80091f0 <acc_cpd_cbank_and_vana_calibration+0x3f4>)
 8008f4a:	4606      	mov	r6, r0
 8008f4c:	4798      	blx	r3
 8008f4e:	4630      	mov	r0, r6
 8008f50:	b00b      	add	sp, #44	; 0x2c
 8008f52:	ecbd 8b02 	vpop	{d8}
 8008f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f5a:	f003 fb93 	bl	800c684 <acc_image_a111_r2c_cbank_and_vana_calibration_get>
 8008f5e:	9004      	str	r0, [sp, #16]
 8008f60:	f003 fb94 	bl	800c68c <acc_image_a111_r2c_cbank_and_vana_calibration_param_table_get>
 8008f64:	f8df a2b4 	ldr.w	sl, [pc, #692]	; 800921c <acc_cpd_cbank_and_vana_calibration+0x420>
 8008f68:	9904      	ldr	r1, [sp, #16]
 8008f6a:	f8df b278 	ldr.w	fp, [pc, #632]	; 80091e4 <acc_cpd_cbank_and_vana_calibration+0x3e8>
 8008f6e:	2201      	movs	r2, #1
 8008f70:	4603      	mov	r3, r0
 8008f72:	9200      	str	r2, [sp, #0]
 8008f74:	e9cd 5a01 	strd	r5, sl, [sp, #4]
 8008f78:	462a      	mov	r2, r5
 8008f7a:	4630      	mov	r0, r6
 8008f7c:	ee08 8a10 	vmov	s16, r8
 8008f80:	f003 fab8 	bl	800c4f4 <acc_confprogram_live_patch>
 8008f84:	462f      	mov	r7, r5
 8008f86:	9405      	str	r4, [sp, #20]
 8008f88:	462c      	mov	r4, r5
 8008f8a:	4639      	mov	r1, r7
 8008f8c:	4658      	mov	r0, fp
 8008f8e:	f003 fb49 	bl	800c624 <acc_diagnostic_log_set_parameter>
 8008f92:	f003 fb77 	bl	800c684 <acc_image_a111_r2c_cbank_and_vana_calibration_get>
 8008f96:	9004      	str	r0, [sp, #16]
 8008f98:	f003 fb78 	bl	800c68c <acc_image_a111_r2c_cbank_and_vana_calibration_param_table_get>
 8008f9c:	221c      	movs	r2, #28
 8008f9e:	9904      	ldr	r1, [sp, #16]
 8008fa0:	9200      	str	r2, [sp, #0]
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	e9cd 7a01 	strd	r7, sl, [sp, #4]
 8008fa8:	4630      	mov	r0, r6
 8008faa:	2200      	movs	r2, #0
 8008fac:	f003 faa2 	bl	800c4f4 <acc_confprogram_live_patch>
 8008fb0:	21ef      	movs	r1, #239	; 0xef
 8008fb2:	4630      	mov	r0, r6
 8008fb4:	f7fe fa88 	bl	80074c8 <acc_sensor_protocol_r2_run_program>
 8008fb8:	2800      	cmp	r0, #0
 8008fba:	f000 8131 	beq.w	8009220 <acc_cpd_cbank_and_vana_calibration+0x424>
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	2209      	movs	r2, #9
 8008fc2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8008fc6:	4630      	mov	r0, r6
 8008fc8:	f7fe fc02 	bl	80077d0 <acc_sensor_protocol_r2_wait_for_specific_event>
 8008fcc:	b938      	cbnz	r0, 8008fde <acc_cpd_cbank_and_vana_calibration+0x1e2>
 8008fce:	4d86      	ldr	r5, [pc, #536]	; (80091e8 <acc_cpd_cbank_and_vana_calibration+0x3ec>)
 8008fd0:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 8008fd2:	4a8a      	ldr	r2, [pc, #552]	; (80091fc <acc_cpd_cbank_and_vana_calibration+0x400>)
 8008fd4:	4986      	ldr	r1, [pc, #536]	; (80091f0 <acc_cpd_cbank_and_vana_calibration+0x3f4>)
 8008fd6:	463b      	mov	r3, r7
 8008fd8:	2000      	movs	r0, #0
 8008fda:	47a0      	blx	r4
 8008fdc:	e7a5      	b.n	8008f2a <acc_cpd_cbank_and_vana_calibration+0x12e>
 8008fde:	2110      	movs	r1, #16
 8008fe0:	4648      	mov	r0, r9
 8008fe2:	f7fd ff55 	bl	8006e90 <acc_sensor_r2_buffer_processed_verify_size>
 8008fe6:	b928      	cbnz	r0, 8008ff4 <acc_cpd_cbank_and_vana_calibration+0x1f8>
 8008fe8:	4d7f      	ldr	r5, [pc, #508]	; (80091e8 <acc_cpd_cbank_and_vana_calibration+0x3ec>)
 8008fea:	4a85      	ldr	r2, [pc, #532]	; (8009200 <acc_cpd_cbank_and_vana_calibration+0x404>)
 8008fec:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8008fee:	4980      	ldr	r1, [pc, #512]	; (80091f0 <acc_cpd_cbank_and_vana_calibration+0x3f4>)
 8008ff0:	4798      	blx	r3
 8008ff2:	e7ed      	b.n	8008fd0 <acc_cpd_cbank_and_vana_calibration+0x1d4>
 8008ff4:	ee18 1a10 	vmov	r1, s16
 8008ff8:	2310      	movs	r3, #16
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	4630      	mov	r0, r6
 8008ffe:	f7fd ff4f 	bl	8006ea0 <acc_sensor_r2_buffer_processed_read>
 8009002:	2310      	movs	r3, #16
 8009004:	4602      	mov	r2, r0
 8009006:	4680      	mov	r8, r0
 8009008:	4631      	mov	r1, r6
 800900a:	2000      	movs	r0, #0
 800900c:	f7fe ff14 	bl	8007e38 <acc_probes_execute_uint16>
 8009010:	4630      	mov	r0, r6
 8009012:	f7fe fae5 	bl	80075e0 <acc_sensor_protocol_r2_ack_event>
 8009016:	2800      	cmp	r0, #0
 8009018:	d0d9      	beq.n	8008fce <acc_cpd_cbank_and_vana_calibration+0x1d2>
 800901a:	2500      	movs	r5, #0
 800901c:	462b      	mov	r3, r5
 800901e:	4642      	mov	r2, r8
 8009020:	f108 0c1e 	add.w	ip, r8, #30
 8009024:	8851      	ldrh	r1, [r2, #2]
 8009026:	f832 0b02 	ldrh.w	r0, [r2], #2
 800902a:	4281      	cmp	r1, r0
 800902c:	440b      	add	r3, r1
 800902e:	bf34      	ite	cc
 8009030:	1a41      	subcc	r1, r0, r1
 8009032:	1a09      	subcs	r1, r1, r0
 8009034:	428d      	cmp	r5, r1
 8009036:	bf38      	it	cc
 8009038:	460d      	movcc	r5, r1
 800903a:	4594      	cmp	ip, r2
 800903c:	d1f2      	bne.n	8009024 <acc_cpd_cbank_and_vana_calibration+0x228>
 800903e:	4871      	ldr	r0, [pc, #452]	; (8009204 <acc_cpd_cbank_and_vana_calibration+0x408>)
 8009040:	9304      	str	r3, [sp, #16]
 8009042:	4659      	mov	r1, fp
 8009044:	f003 faf6 	bl	800c634 <acc_diagnostic_log_array>
 8009048:	2110      	movs	r1, #16
 800904a:	4640      	mov	r0, r8
 800904c:	f003 fb02 	bl	800c654 <acc_diagnostic_log_data_u16>
 8009050:	f8b8 2000 	ldrh.w	r2, [r8]
 8009054:	9b04      	ldr	r3, [sp, #16]
 8009056:	4413      	add	r3, r2
 8009058:	ea4f 1813 	mov.w	r8, r3, lsr #4
 800905c:	f5a8 43f2 	sub.w	r3, r8, #30976	; 0x7900
 8009060:	3b18      	subs	r3, #24
 8009062:	b29b      	uxth	r3, r3
 8009064:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8009068:	428b      	cmp	r3, r1
 800906a:	d83d      	bhi.n	80090e8 <acc_cpd_cbank_and_vana_calibration+0x2ec>
 800906c:	f5b5 7f48 	cmp.w	r5, #800	; 0x320
 8009070:	d83a      	bhi.n	80090e8 <acc_cpd_cbank_and_vana_calibration+0x2ec>
 8009072:	f8cd 8010 	str.w	r8, [sp, #16]
 8009076:	9c05      	ldr	r4, [sp, #20]
 8009078:	9507      	str	r5, [sp, #28]
 800907a:	f7fc fbd1 	bl	8005820 <acc_rss_integration_log_level>
 800907e:	2803      	cmp	r0, #3
 8009080:	ee18 8a10 	vmov	r8, s16
 8009084:	9a04      	ldr	r2, [sp, #16]
 8009086:	9b07      	ldr	r3, [sp, #28]
 8009088:	d909      	bls.n	800909e <acc_cpd_cbank_and_vana_calibration+0x2a2>
 800908a:	b292      	uxth	r2, r2
 800908c:	4d56      	ldr	r5, [pc, #344]	; (80091e8 <acc_cpd_cbank_and_vana_calibration+0x3ec>)
 800908e:	9301      	str	r3, [sp, #4]
 8009090:	9200      	str	r2, [sp, #0]
 8009092:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 8009094:	4a5c      	ldr	r2, [pc, #368]	; (8009208 <acc_cpd_cbank_and_vana_calibration+0x40c>)
 8009096:	4956      	ldr	r1, [pc, #344]	; (80091f0 <acc_cpd_cbank_and_vana_calibration+0x3f4>)
 8009098:	4633      	mov	r3, r6
 800909a:	2004      	movs	r0, #4
 800909c:	47a8      	blx	r5
 800909e:	9e06      	ldr	r6, [sp, #24]
 80090a0:	7137      	strb	r7, [r6, #4]
 80090a2:	6825      	ldr	r5, [r4, #0]
 80090a4:	f003 faee 	bl	800c684 <acc_image_a111_r2c_cbank_and_vana_calibration_get>
 80090a8:	9004      	str	r0, [sp, #16]
 80090aa:	f003 faef 	bl	800c68c <acc_image_a111_r2c_cbank_and_vana_calibration_param_table_get>
 80090ae:	7936      	ldrb	r6, [r6, #4]
 80090b0:	9904      	ldr	r1, [sp, #16]
 80090b2:	f8cd a008 	str.w	sl, [sp, #8]
 80090b6:	221c      	movs	r2, #28
 80090b8:	e9cd 2600 	strd	r2, r6, [sp]
 80090bc:	4603      	mov	r3, r0
 80090be:	2200      	movs	r2, #0
 80090c0:	4628      	mov	r0, r5
 80090c2:	f003 fa17 	bl	800c4f4 <acc_confprogram_live_patch>
 80090c6:	6820      	ldr	r0, [r4, #0]
 80090c8:	2119      	movs	r1, #25
 80090ca:	f7fe f9fd 	bl	80074c8 <acc_sensor_protocol_r2_run_program>
 80090ce:	4606      	mov	r6, r0
 80090d0:	bb00      	cbnz	r0, 8009114 <acc_cpd_cbank_and_vana_calibration+0x318>
 80090d2:	4b45      	ldr	r3, [pc, #276]	; (80091e8 <acc_cpd_cbank_and_vana_calibration+0x3ec>)
 80090d4:	4a4d      	ldr	r2, [pc, #308]	; (800920c <acc_cpd_cbank_and_vana_calibration+0x410>)
 80090d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090d8:	4945      	ldr	r1, [pc, #276]	; (80091f0 <acc_cpd_cbank_and_vana_calibration+0x3f4>)
 80090da:	4798      	blx	r3
 80090dc:	4630      	mov	r0, r6
 80090de:	b00b      	add	sp, #44	; 0x2c
 80090e0:	ecbd 8b02 	vpop	{d8}
 80090e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090e8:	f7fc fb9a 	bl	8005820 <acc_rss_integration_log_level>
 80090ec:	2803      	cmp	r0, #3
 80090ee:	d90a      	bls.n	8009106 <acc_cpd_cbank_and_vana_calibration+0x30a>
 80090f0:	fa1f f288 	uxth.w	r2, r8
 80090f4:	e9cd 2500 	strd	r2, r5, [sp]
 80090f8:	4b3b      	ldr	r3, [pc, #236]	; (80091e8 <acc_cpd_cbank_and_vana_calibration+0x3ec>)
 80090fa:	4a43      	ldr	r2, [pc, #268]	; (8009208 <acc_cpd_cbank_and_vana_calibration+0x40c>)
 80090fc:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 80090fe:	493c      	ldr	r1, [pc, #240]	; (80091f0 <acc_cpd_cbank_and_vana_calibration+0x3f4>)
 8009100:	4633      	mov	r3, r6
 8009102:	2004      	movs	r0, #4
 8009104:	47a8      	blx	r5
 8009106:	b10c      	cbz	r4, 800910c <acc_cpd_cbank_and_vana_calibration+0x310>
 8009108:	4d37      	ldr	r5, [pc, #220]	; (80091e8 <acc_cpd_cbank_and_vana_calibration+0x3ec>)
 800910a:	e70e      	b.n	8008f2a <acc_cpd_cbank_and_vana_calibration+0x12e>
 800910c:	f89d 7025 	ldrb.w	r7, [sp, #37]	; 0x25
 8009110:	2401      	movs	r4, #1
 8009112:	e73a      	b.n	8008f8a <acc_cpd_cbank_and_vana_calibration+0x18e>
 8009114:	4648      	mov	r0, r9
 8009116:	2108      	movs	r1, #8
 8009118:	6826      	ldr	r6, [r4, #0]
 800911a:	f7fd feb9 	bl	8006e90 <acc_sensor_r2_buffer_processed_verify_size>
 800911e:	b958      	cbnz	r0, 8009138 <acc_cpd_cbank_and_vana_calibration+0x33c>
 8009120:	4d31      	ldr	r5, [pc, #196]	; (80091e8 <acc_cpd_cbank_and_vana_calibration+0x3ec>)
 8009122:	4a37      	ldr	r2, [pc, #220]	; (8009200 <acc_cpd_cbank_and_vana_calibration+0x404>)
 8009124:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009126:	4932      	ldr	r1, [pc, #200]	; (80091f0 <acc_cpd_cbank_and_vana_calibration+0x3f4>)
 8009128:	4798      	blx	r3
 800912a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800912c:	4a38      	ldr	r2, [pc, #224]	; (8009210 <acc_cpd_cbank_and_vana_calibration+0x414>)
 800912e:	4930      	ldr	r1, [pc, #192]	; (80091f0 <acc_cpd_cbank_and_vana_calibration+0x3f4>)
 8009130:	2000      	movs	r0, #0
 8009132:	4798      	blx	r3
 8009134:	2600      	movs	r6, #0
 8009136:	e70a      	b.n	8008f4e <acc_cpd_cbank_and_vana_calibration+0x152>
 8009138:	2300      	movs	r3, #0
 800913a:	2203      	movs	r2, #3
 800913c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8009140:	4630      	mov	r0, r6
 8009142:	f7fe fb45 	bl	80077d0 <acc_sensor_protocol_r2_wait_for_specific_event>
 8009146:	2800      	cmp	r0, #0
 8009148:	d046      	beq.n	80091d8 <acc_cpd_cbank_and_vana_calibration+0x3dc>
 800914a:	2408      	movs	r4, #8
 800914c:	4623      	mov	r3, r4
 800914e:	2200      	movs	r2, #0
 8009150:	4641      	mov	r1, r8
 8009152:	4630      	mov	r0, r6
 8009154:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
 8009158:	f7fd fea2 	bl	8006ea0 <acc_sensor_r2_buffer_processed_read>
 800915c:	492d      	ldr	r1, [pc, #180]	; (8009214 <acc_cpd_cbank_and_vana_calibration+0x418>)
 800915e:	4605      	mov	r5, r0
 8009160:	482d      	ldr	r0, [pc, #180]	; (8009218 <acc_cpd_cbank_and_vana_calibration+0x41c>)
 8009162:	f003 fa67 	bl	800c634 <acc_diagnostic_log_array>
 8009166:	4621      	mov	r1, r4
 8009168:	4628      	mov	r0, r5
 800916a:	1eac      	subs	r4, r5, #2
 800916c:	f003 fa72 	bl	800c654 <acc_diagnostic_log_data_u16>
 8009170:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8009174:	4620      	mov	r0, r4
 8009176:	2300      	movs	r3, #0
 8009178:	f830 2f02 	ldrh.w	r2, [r0, #2]!
 800917c:	f5d2 4100 	rsbs	r1, r2, #32768	; 0x8000
 8009180:	bf48      	it	mi
 8009182:	f5a2 4100 	submi.w	r1, r2, #32768	; 0x8000
 8009186:	42b9      	cmp	r1, r7
 8009188:	bfb8      	it	lt
 800918a:	f8ad 3024 	strhlt.w	r3, [sp, #36]	; 0x24
 800918e:	f103 0301 	add.w	r3, r3, #1
 8009192:	bfb8      	it	lt
 8009194:	460f      	movlt	r7, r1
 8009196:	2b08      	cmp	r3, #8
 8009198:	d1ee      	bne.n	8009178 <acc_cpd_cbank_and_vana_calibration+0x37c>
 800919a:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 800919e:	4631      	mov	r1, r6
 80091a0:	aa09      	add	r2, sp, #36	; 0x24
 80091a2:	2301      	movs	r3, #1
 80091a4:	f007 0707 	and.w	r7, r7, #7
 80091a8:	2006      	movs	r0, #6
 80091aa:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 80091ae:	f7fe fe43 	bl	8007e38 <acc_probes_execute_uint16>
 80091b2:	4630      	mov	r0, r6
 80091b4:	f7fe fa14 	bl	80075e0 <acc_sensor_protocol_r2_ack_event>
 80091b8:	4606      	mov	r6, r0
 80091ba:	b168      	cbz	r0, 80091d8 <acc_cpd_cbank_and_vana_calibration+0x3dc>
 80091bc:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 80091c0:	2900      	cmp	r1, #0
 80091c2:	d05e      	beq.n	8009282 <acc_cpd_cbank_and_vana_calibration+0x486>
 80091c4:	2300      	movs	r3, #0
 80091c6:	e001      	b.n	80091cc <acc_cpd_cbank_and_vana_calibration+0x3d0>
 80091c8:	428b      	cmp	r3, r1
 80091ca:	d030      	beq.n	800922e <acc_cpd_cbank_and_vana_calibration+0x432>
 80091cc:	f934 2f02 	ldrsh.w	r2, [r4, #2]!
 80091d0:	2a00      	cmp	r2, #0
 80091d2:	f103 0301 	add.w	r3, r3, #1
 80091d6:	daf7      	bge.n	80091c8 <acc_cpd_cbank_and_vana_calibration+0x3cc>
 80091d8:	4d03      	ldr	r5, [pc, #12]	; (80091e8 <acc_cpd_cbank_and_vana_calibration+0x3ec>)
 80091da:	e7a6      	b.n	800912a <acc_cpd_cbank_and_vana_calibration+0x32e>
 80091dc:	0800f600 	.word	0x0800f600
 80091e0:	0800f61c 	.word	0x0800f61c
 80091e4:	0800f628 	.word	0x0800f628
 80091e8:	200004c0 	.word	0x200004c0
 80091ec:	0800f634 	.word	0x0800f634
 80091f0:	0800f5fc 	.word	0x0800f5fc
 80091f4:	0800f6fc 	.word	0x0800f6fc
 80091f8:	0800f5b8 	.word	0x0800f5b8
 80091fc:	0800f6d0 	.word	0x0800f6d0
 8009200:	0800f6a8 	.word	0x0800f6a8
 8009204:	0800f6c0 	.word	0x0800f6c0
 8009208:	0800f790 	.word	0x0800f790
 800920c:	0800f714 	.word	0x0800f714
 8009210:	0800f758 	.word	0x0800f758
 8009214:	0800fb28 	.word	0x0800fb28
 8009218:	0800f748 	.word	0x0800f748
 800921c:	08006dc5 	.word	0x08006dc5
 8009220:	4d19      	ldr	r5, [pc, #100]	; (8009288 <acc_cpd_cbank_and_vana_calibration+0x48c>)
 8009222:	4a1a      	ldr	r2, [pc, #104]	; (800928c <acc_cpd_cbank_and_vana_calibration+0x490>)
 8009224:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 8009226:	491a      	ldr	r1, [pc, #104]	; (8009290 <acc_cpd_cbank_and_vana_calibration+0x494>)
 8009228:	463b      	mov	r3, r7
 800922a:	47a0      	blx	r4
 800922c:	e67d      	b.n	8008f2a <acc_cpd_cbank_and_vana_calibration+0x12e>
 800922e:	1c4b      	adds	r3, r1, #1
 8009230:	2b07      	cmp	r3, #7
 8009232:	dc0c      	bgt.n	800924e <acc_cpd_cbank_and_vana_calibration+0x452>
 8009234:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8009238:	e001      	b.n	800923e <acc_cpd_cbank_and_vana_calibration+0x442>
 800923a:	2b08      	cmp	r3, #8
 800923c:	d007      	beq.n	800924e <acc_cpd_cbank_and_vana_calibration+0x452>
 800923e:	f835 2b02 	ldrh.w	r2, [r5], #2
 8009242:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8009246:	f103 0301 	add.w	r3, r3, #1
 800924a:	d8f6      	bhi.n	800923a <acc_cpd_cbank_and_vana_calibration+0x43e>
 800924c:	e7c4      	b.n	80091d8 <acc_cpd_cbank_and_vana_calibration+0x3dc>
 800924e:	9b06      	ldr	r3, [sp, #24]
 8009250:	6019      	str	r1, [r3, #0]
 8009252:	f7fc fae5 	bl	8005820 <acc_rss_integration_log_level>
 8009256:	2801      	cmp	r0, #1
 8009258:	d909      	bls.n	800926e <acc_cpd_cbank_and_vana_calibration+0x472>
 800925a:	9906      	ldr	r1, [sp, #24]
 800925c:	4a0a      	ldr	r2, [pc, #40]	; (8009288 <acc_cpd_cbank_and_vana_calibration+0x48c>)
 800925e:	790b      	ldrb	r3, [r1, #4]
 8009260:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8009262:	9300      	str	r3, [sp, #0]
 8009264:	680b      	ldr	r3, [r1, #0]
 8009266:	4a0b      	ldr	r2, [pc, #44]	; (8009294 <acc_cpd_cbank_and_vana_calibration+0x498>)
 8009268:	4909      	ldr	r1, [pc, #36]	; (8009290 <acc_cpd_cbank_and_vana_calibration+0x494>)
 800926a:	2002      	movs	r0, #2
 800926c:	47a0      	blx	r4
 800926e:	9c06      	ldr	r4, [sp, #24]
 8009270:	4809      	ldr	r0, [pc, #36]	; (8009298 <acc_cpd_cbank_and_vana_calibration+0x49c>)
 8009272:	6821      	ldr	r1, [r4, #0]
 8009274:	f003 f9e6 	bl	800c644 <acc_diagnostic_log_scalar>
 8009278:	7921      	ldrb	r1, [r4, #4]
 800927a:	4808      	ldr	r0, [pc, #32]	; (800929c <acc_cpd_cbank_and_vana_calibration+0x4a0>)
 800927c:	f003 f9e2 	bl	800c644 <acc_diagnostic_log_scalar>
 8009280:	e665      	b.n	8008f4e <acc_cpd_cbank_and_vana_calibration+0x152>
 8009282:	2301      	movs	r3, #1
 8009284:	e7d6      	b.n	8009234 <acc_cpd_cbank_and_vana_calibration+0x438>
 8009286:	bf00      	nop
 8009288:	200004c0 	.word	0x200004c0
 800928c:	0800f668 	.word	0x0800f668
 8009290:	0800f5fc 	.word	0x0800f5fc
 8009294:	0800f770 	.word	0x0800f770
 8009298:	0800f784 	.word	0x0800f784
 800929c:	0800f628 	.word	0x0800f628

080092a0 <acc_cpd_dll_calibration>:
 80092a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092a4:	ed2d 8b0a 	vpush	{d8-d12}
 80092a8:	b0c7      	sub	sp, #284	; 0x11c
 80092aa:	461d      	mov	r5, r3
 80092ac:	9309      	str	r3, [sp, #36]	; 0x24
 80092ae:	2400      	movs	r4, #0
 80092b0:	4b63      	ldr	r3, [pc, #396]	; (8009440 <acc_cpd_dll_calibration+0x1a0>)
 80092b2:	61eb      	str	r3, [r5, #28]
 80092b4:	f5b1 7f45 	cmp.w	r1, #788	; 0x314
 80092b8:	ee0b 0a90 	vmov	s23, r0
 80092bc:	4693      	mov	fp, r2
 80092be:	766c      	strb	r4, [r5, #25]
 80092c0:	f0c0 8479 	bcc.w	8009bb6 <acc_cpd_dll_calibration+0x916>
 80092c4:	f5a1 7316 	sub.w	r3, r1, #600	; 0x258
 80092c8:	f023 0301 	bic.w	r3, r3, #1
 80092cc:	f5a1 7145 	sub.w	r1, r1, #788	; 0x314
 80092d0:	f021 0201 	bic.w	r2, r1, #1
 80092d4:	18c3      	adds	r3, r0, r3
 80092d6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80092da:	ee0c 1a10 	vmov	s24, r1
 80092de:	9312      	str	r3, [sp, #72]	; 0x48
 80092e0:	eb00 0a02 	add.w	sl, r0, r2
 80092e4:	f0c0 8085 	bcc.w	80093f2 <acc_cpd_dll_calibration+0x152>
 80092e8:	4856      	ldr	r0, [pc, #344]	; (8009444 <acc_cpd_dll_calibration+0x1a4>)
 80092ea:	ed9f 9a57 	vldr	s18, [pc, #348]	; 8009448 <acc_cpd_dll_calibration+0x1a8>
 80092ee:	eddf 8a57 	vldr	s17, [pc, #348]	; 800944c <acc_cpd_dll_calibration+0x1ac>
 80092f2:	f003 f987 	bl	800c604 <acc_diagnostic_log_set_scope>
 80092f6:	f8db 1000 	ldr.w	r1, [fp]
 80092fa:	4855      	ldr	r0, [pc, #340]	; (8009450 <acc_cpd_dll_calibration+0x1b0>)
 80092fc:	f003 f9a2 	bl	800c644 <acc_diagnostic_log_scalar>
 8009300:	4854      	ldr	r0, [pc, #336]	; (8009454 <acc_cpd_dll_calibration+0x1b4>)
 8009302:	2202      	movs	r2, #2
 8009304:	2101      	movs	r1, #1
 8009306:	f003 f985 	bl	800c614 <acc_diagnostic_log_declare_parameter>
 800930a:	4853      	ldr	r0, [pc, #332]	; (8009458 <acc_cpd_dll_calibration+0x1b8>)
 800930c:	221f      	movs	r2, #31
 800930e:	2100      	movs	r1, #0
 8009310:	f003 f980 	bl	800c614 <acc_diagnostic_log_declare_parameter>
 8009314:	4851      	ldr	r0, [pc, #324]	; (800945c <acc_cpd_dll_calibration+0x1bc>)
 8009316:	227b      	movs	r2, #123	; 0x7b
 8009318:	2100      	movs	r1, #0
 800931a:	f003 f97b 	bl	800c614 <acc_diagnostic_log_declare_parameter>
 800931e:	2302      	movs	r3, #2
 8009320:	461c      	mov	r4, r3
 8009322:	484f      	ldr	r0, [pc, #316]	; (8009460 <acc_cpd_dll_calibration+0x1c0>)
 8009324:	9319      	str	r3, [sp, #100]	; 0x64
 8009326:	220b      	movs	r2, #11
 8009328:	2100      	movs	r1, #0
 800932a:	f003 f973 	bl	800c614 <acc_diagnostic_log_declare_parameter>
 800932e:	46d1      	mov	r9, sl
 8009330:	940e      	str	r4, [sp, #56]	; 0x38
 8009332:	46da      	mov	sl, fp
 8009334:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009336:	4847      	ldr	r0, [pc, #284]	; (8009454 <acc_cpd_dll_calibration+0x1b4>)
 8009338:	ed9f 8a4a 	vldr	s16, [pc, #296]	; 8009464 <acc_cpd_dll_calibration+0x1c4>
 800933c:	f003 f972 	bl	800c624 <acc_diagnostic_log_set_parameter>
 8009340:	ab20      	add	r3, sp, #128	; 0x80
 8009342:	464c      	mov	r4, r9
 8009344:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8009346:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8009348:	ee1c ba10 	vmov	fp, s24
 800934c:	ee1b 9a90 	vmov	r9, s23
 8009350:	2500      	movs	r5, #0
 8009352:	4698      	mov	r8, r3
 8009354:	e023      	b.n	800939e <acc_cpd_dll_calibration+0xfe>
 8009356:	f837 3b32 	ldrh.w	r3, [r7], #50
 800935a:	ee07 3a10 	vmov	s14, r3
 800935e:	4b42      	ldr	r3, [pc, #264]	; (8009468 <acc_cpd_dll_calibration+0x1c8>)
 8009360:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8009364:	f833 2016 	ldrh.w	r2, [r3, r6, lsl #1]
 8009368:	4b40      	ldr	r3, [pc, #256]	; (800946c <acc_cpd_dll_calibration+0x1cc>)
 800936a:	ee27 7a09 	vmul.f32	s14, s14, s18
 800936e:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 8009372:	ee37 7a66 	vsub.f32	s14, s14, s13
 8009376:	1ad3      	subs	r3, r2, r3
 8009378:	b21b      	sxth	r3, r3
 800937a:	ee07 3a90 	vmov	s15, r3
 800937e:	ee27 7a28 	vmul.f32	s14, s14, s17
 8009382:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009386:	ee27 7a08 	vmul.f32	s14, s14, s16
 800938a:	2d0c      	cmp	r5, #12
 800938c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009390:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009394:	ee17 3a90 	vmov	r3, s15
 8009398:	f828 3b02 	strh.w	r3, [r8], #2
 800939c:	d035      	beq.n	800940a <acc_cpd_dll_calibration+0x16a>
 800939e:	4629      	mov	r1, r5
 80093a0:	482f      	ldr	r0, [pc, #188]	; (8009460 <acc_cpd_dll_calibration+0x1c0>)
 80093a2:	f003 f93f 	bl	800c624 <acc_diagnostic_log_set_parameter>
 80093a6:	e9da 1200 	ldrd	r1, r2, [sl]
 80093aa:	e9da 3002 	ldrd	r3, r0, [sl, #8]
 80093ae:	9139      	str	r1, [sp, #228]	; 0xe4
 80093b0:	e9cd 303b 	strd	r3, r0, [sp, #236]	; 0xec
 80093b4:	f8da 1014 	ldr.w	r1, [sl, #20]
 80093b8:	f8da 0018 	ldr.w	r0, [sl, #24]
 80093bc:	f8ba c010 	ldrh.w	ip, [sl, #16]
 80093c0:	923a      	str	r2, [sp, #232]	; 0xe8
 80093c2:	9140      	str	r1, [sp, #256]	; 0x100
 80093c4:	9041      	str	r0, [sp, #260]	; 0x104
 80093c6:	463b      	mov	r3, r7
 80093c8:	aa39      	add	r2, sp, #228	; 0xe4
 80093ca:	4659      	mov	r1, fp
 80093cc:	4648      	mov	r0, r9
 80093ce:	e9cd 653e 	strd	r6, r5, [sp, #248]	; 0xf8
 80093d2:	f8ad c0f4 	strh.w	ip, [sp, #244]	; 0xf4
 80093d6:	f001 fe85 	bl	800b0e4 <acc_cpd_rx_fine_dip_calibration>
 80093da:	3501      	adds	r5, #1
 80093dc:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80093e0:	2800      	cmp	r0, #0
 80093e2:	d1b8      	bne.n	8009356 <acc_cpd_dll_calibration+0xb6>
 80093e4:	4604      	mov	r4, r0
 80093e6:	4620      	mov	r0, r4
 80093e8:	b047      	add	sp, #284	; 0x11c
 80093ea:	ecbd 8b0a 	vpop	{d8-d12}
 80093ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093f2:	f7fc fa15 	bl	8005820 <acc_rss_integration_log_level>
 80093f6:	2801      	cmp	r0, #1
 80093f8:	f67f af76 	bls.w	80092e8 <acc_cpd_dll_calibration+0x48>
 80093fc:	4b1c      	ldr	r3, [pc, #112]	; (8009470 <acc_cpd_dll_calibration+0x1d0>)
 80093fe:	4a1d      	ldr	r2, [pc, #116]	; (8009474 <acc_cpd_dll_calibration+0x1d4>)
 8009400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009402:	491d      	ldr	r1, [pc, #116]	; (8009478 <acc_cpd_dll_calibration+0x1d8>)
 8009404:	2002      	movs	r0, #2
 8009406:	4798      	blx	r3
 8009408:	e76e      	b.n	80092e8 <acc_cpd_dll_calibration+0x48>
 800940a:	491c      	ldr	r1, [pc, #112]	; (800947c <acc_cpd_dll_calibration+0x1dc>)
 800940c:	481c      	ldr	r0, [pc, #112]	; (8009480 <acc_cpd_dll_calibration+0x1e0>)
 800940e:	f003 f911 	bl	800c634 <acc_diagnostic_log_array>
 8009412:	4629      	mov	r1, r5
 8009414:	a820      	add	r0, sp, #128	; 0x80
 8009416:	f003 f91d 	bl	800c654 <acc_diagnostic_log_data_u16>
 800941a:	aa1d      	add	r2, sp, #116	; 0x74
 800941c:	a920      	add	r1, sp, #128	; 0x80
 800941e:	4628      	mov	r0, r5
 8009420:	f000 fd66 	bl	8009ef0 <acc_dll_dly_coarse_priority_sort>
 8009424:	4915      	ldr	r1, [pc, #84]	; (800947c <acc_cpd_dll_calibration+0x1dc>)
 8009426:	4817      	ldr	r0, [pc, #92]	; (8009484 <acc_cpd_dll_calibration+0x1e4>)
 8009428:	f003 f904 	bl	800c634 <acc_diagnostic_log_array>
 800942c:	4629      	mov	r1, r5
 800942e:	a81d      	add	r0, sp, #116	; 0x74
 8009430:	f003 f920 	bl	800c674 <acc_diagnostic_log_data_u8>
 8009434:	ab1d      	add	r3, sp, #116	; 0x74
 8009436:	930d      	str	r3, [sp, #52]	; 0x34
 8009438:	4653      	mov	r3, sl
 800943a:	4699      	mov	r9, r3
 800943c:	46a2      	mov	sl, r4
 800943e:	e075      	b.n	800952c <acc_cpd_dll_calibration+0x28c>
 8009440:	ff800000 	.word	0xff800000
 8009444:	0800f800 	.word	0x0800f800
 8009448:	37800000 	.word	0x37800000
 800944c:	3f99999a 	.word	0x3f99999a
 8009450:	0800f61c 	.word	0x0800f61c
 8009454:	0800f810 	.word	0x0800f810
 8009458:	0800f81c 	.word	0x0800f81c
 800945c:	0800f828 	.word	0x0800f828
 8009460:	0800f834 	.word	0x0800f834
 8009464:	447a0000 	.word	0x447a0000
 8009468:	080138a8 	.word	0x080138a8
 800946c:	080138a0 	.word	0x080138a0
 8009470:	200004c0 	.word	0x200004c0
 8009474:	0800f7d4 	.word	0x0800f7d4
 8009478:	0800f7c0 	.word	0x0800f7c0
 800947c:	0800f840 	.word	0x0800f840
 8009480:	0800f858 	.word	0x0800f858
 8009484:	0800f86c 	.word	0x0800f86c
 8009488:	f5a2 7243 	sub.w	r2, r2, #780	; 0x30c
 800948c:	f5b2 7fe6 	cmp.w	r2, #460	; 0x1cc
 8009490:	f200 82eb 	bhi.w	8009a6a <acc_cpd_dll_calibration+0x7ca>
 8009494:	f9bd 206e 	ldrsh.w	r2, [sp, #110]	; 0x6e
 8009498:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800949a:	1a9b      	subs	r3, r3, r2
 800949c:	b21b      	sxth	r3, r3
 800949e:	2b00      	cmp	r3, #0
 80094a0:	bfb8      	it	lt
 80094a2:	425b      	neglt	r3, r3
 80094a4:	b21b      	sxth	r3, r3
 80094a6:	2b64      	cmp	r3, #100	; 0x64
 80094a8:	f300 82df 	bgt.w	8009a6a <acc_cpd_dll_calibration+0x7ca>
 80094ac:	ee18 3a10 	vmov	r3, s16
 80094b0:	4293      	cmp	r3, r2
 80094b2:	f2c0 82da 	blt.w	8009a6a <acc_cpd_dll_calibration+0x7ca>
 80094b6:	49d4      	ldr	r1, [pc, #848]	; (8009808 <acc_cpd_dll_calibration+0x568>)
 80094b8:	48d4      	ldr	r0, [pc, #848]	; (800980c <acc_cpd_dll_calibration+0x56c>)
 80094ba:	f003 f8bb 	bl	800c634 <acc_diagnostic_log_array>
 80094be:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80094c0:	4628      	mov	r0, r5
 80094c2:	4621      	mov	r1, r4
 80094c4:	f003 f8c6 	bl	800c654 <acc_diagnostic_log_data_u16>
 80094c8:	4621      	mov	r1, r4
 80094ca:	4628      	mov	r0, r5
 80094cc:	f000 fc76 	bl	8009dbc <acc_dll_check_direct_leakage>
 80094d0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80094d4:	4604      	mov	r4, r0
 80094d6:	4658      	mov	r0, fp
 80094d8:	f7fe f9a8 	bl	800782c <acc_sensor_protocol_r2_stop>
 80094dc:	2c00      	cmp	r4, #0
 80094de:	f040 840f 	bne.w	8009d00 <acc_cpd_dll_calibration+0xa60>
 80094e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80094e4:	2b01      	cmp	r3, #1
 80094e6:	f04f 0100 	mov.w	r1, #0
 80094ea:	f040 82e5 	bne.w	8009ab8 <acc_cpd_dll_calibration+0x818>
 80094ee:	f7fc f997 	bl	8005820 <acc_rss_integration_log_level>
 80094f2:	2803      	cmp	r0, #3
 80094f4:	d908      	bls.n	8009508 <acc_cpd_dll_calibration+0x268>
 80094f6:	4bc6      	ldr	r3, [pc, #792]	; (8009810 <acc_cpd_dll_calibration+0x570>)
 80094f8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80094fa:	9200      	str	r2, [sp, #0]
 80094fc:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 80094fe:	4ac5      	ldr	r2, [pc, #788]	; (8009814 <acc_cpd_dll_calibration+0x574>)
 8009500:	49c5      	ldr	r1, [pc, #788]	; (8009818 <acc_cpd_dll_calibration+0x578>)
 8009502:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009504:	2004      	movs	r0, #4
 8009506:	47a0      	blx	r4
 8009508:	f7fc f98a 	bl	8005820 <acc_rss_integration_log_level>
 800950c:	2803      	cmp	r0, #3
 800950e:	d908      	bls.n	8009522 <acc_cpd_dll_calibration+0x282>
 8009510:	4bbf      	ldr	r3, [pc, #764]	; (8009810 <acc_cpd_dll_calibration+0x570>)
 8009512:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009514:	9200      	str	r2, [sp, #0]
 8009516:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8009518:	4ac0      	ldr	r2, [pc, #768]	; (800981c <acc_cpd_dll_calibration+0x57c>)
 800951a:	49bf      	ldr	r1, [pc, #764]	; (8009818 <acc_cpd_dll_calibration+0x578>)
 800951c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800951e:	2004      	movs	r0, #4
 8009520:	47a0      	blx	r4
 8009522:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009524:	aa20      	add	r2, sp, #128	; 0x80
 8009526:	429a      	cmp	r2, r3
 8009528:	f000 8332 	beq.w	8009b90 <acc_cpd_dll_calibration+0x8f0>
 800952c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800952e:	48bc      	ldr	r0, [pc, #752]	; (8009820 <acc_cpd_dll_calibration+0x580>)
 8009530:	f812 3b01 	ldrb.w	r3, [r2], #1
 8009534:	9311      	str	r3, [sp, #68]	; 0x44
 8009536:	461c      	mov	r4, r3
 8009538:	4619      	mov	r1, r3
 800953a:	920d      	str	r2, [sp, #52]	; 0x34
 800953c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8009540:	f003 f870 	bl	800c624 <acc_diagnostic_log_set_parameter>
 8009544:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8009546:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800954a:	eb06 0544 	add.w	r5, r6, r4, lsl #1
 800954e:	4629      	mov	r1, r5
 8009550:	ab2c      	add	r3, sp, #176	; 0xb0
 8009552:	aa39      	add	r2, sp, #228	; 0xe4
 8009554:	2019      	movs	r0, #25
 8009556:	f000 fd8f 	bl	800a078 <acc_dll_plateau_finder>
 800955a:	9016      	str	r0, [sp, #88]	; 0x58
 800955c:	2800      	cmp	r0, #0
 800955e:	d0d3      	beq.n	8009508 <acc_cpd_dll_calibration+0x268>
 8009560:	f836 3014 	ldrh.w	r3, [r6, r4, lsl #1]
 8009564:	49af      	ldr	r1, [pc, #700]	; (8009824 <acc_cpd_dll_calibration+0x584>)
 8009566:	eddf 6abc 	vldr	s13, [pc, #752]	; 8009858 <acc_cpd_dll_calibration+0x5b8>
 800956a:	ee07 3a10 	vmov	s14, r3
 800956e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009570:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8009574:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8009578:	49ab      	ldr	r1, [pc, #684]	; (8009828 <acc_cpd_dll_calibration+0x588>)
 800957a:	ee27 7a09 	vmul.f32	s14, s14, s18
 800957e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8009582:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8009586:	1ad3      	subs	r3, r2, r3
 8009588:	ee37 7a46 	vsub.f32	s14, s14, s12
 800958c:	b21b      	sxth	r3, r3
 800958e:	ee07 3a90 	vmov	s15, r3
 8009592:	ee27 7a28 	vmul.f32	s14, s14, s17
 8009596:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800959a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800959e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80095a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80095a6:	ee17 3a90 	vmov	r3, s15
 80095aa:	b21a      	sxth	r2, r3
 80095ac:	f5a2 7343 	sub.w	r3, r2, #780	; 0x30c
 80095b0:	b29b      	uxth	r3, r3
 80095b2:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 80095b6:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
 80095ba:	f200 82dd 	bhi.w	8009b78 <acc_cpd_dll_calibration+0x8d8>
 80095be:	f8bd 40e4 	ldrh.w	r4, [sp, #228]	; 0xe4
 80095c2:	4b9a      	ldr	r3, [pc, #616]	; (800982c <acc_cpd_dll_calibration+0x58c>)
 80095c4:	a946      	add	r1, sp, #280	; 0x118
 80095c6:	eb01 0144 	add.w	r1, r1, r4, lsl #1
 80095ca:	ee07 2a90 	vmov	s15, r2
 80095ce:	f831 6c68 	ldrh.w	r6, [r1, #-104]
 80095d2:	9613      	str	r6, [sp, #76]	; 0x4c
 80095d4:	4632      	mov	r2, r6
 80095d6:	fba3 2302 	umull	r2, r3, r3, r2
 80095da:	f3c3 0387 	ubfx	r3, r3, #2, #8
 80095de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80095e2:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
 80095e6:	ee07 3a90 	vmov	s15, r3
 80095ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095ee:	ee67 7a89 	vmul.f32	s15, s15, s18
 80095f2:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80095f6:	ee67 7aa8 	vmul.f32	s15, s15, s17
 80095fa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80095fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009602:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009606:	ee17 3a90 	vmov	r3, s15
 800960a:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
 800960e:	f7fc f907 	bl	8005820 <acc_rss_integration_log_level>
 8009612:	2803      	cmp	r0, #3
 8009614:	d907      	bls.n	8009626 <acc_cpd_dll_calibration+0x386>
 8009616:	4a7e      	ldr	r2, [pc, #504]	; (8009810 <acc_cpd_dll_calibration+0x570>)
 8009618:	9600      	str	r6, [sp, #0]
 800961a:	4623      	mov	r3, r4
 800961c:	497e      	ldr	r1, [pc, #504]	; (8009818 <acc_cpd_dll_calibration+0x578>)
 800961e:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8009620:	4a83      	ldr	r2, [pc, #524]	; (8009830 <acc_cpd_dll_calibration+0x590>)
 8009622:	2004      	movs	r0, #4
 8009624:	47a0      	blx	r4
 8009626:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009628:	4882      	ldr	r0, [pc, #520]	; (8009834 <acc_cpd_dll_calibration+0x594>)
 800962a:	f002 fffb 	bl	800c624 <acc_diagnostic_log_set_parameter>
 800962e:	4982      	ldr	r1, [pc, #520]	; (8009838 <acc_cpd_dll_calibration+0x598>)
 8009630:	4882      	ldr	r0, [pc, #520]	; (800983c <acc_cpd_dll_calibration+0x59c>)
 8009632:	f002 ffff 	bl	800c634 <acc_diagnostic_log_array>
 8009636:	2101      	movs	r1, #1
 8009638:	f10d 006a 	add.w	r0, sp, #106	; 0x6a
 800963c:	f003 f812 	bl	800c664 <acc_diagnostic_log_data_i16>
 8009640:	497d      	ldr	r1, [pc, #500]	; (8009838 <acc_cpd_dll_calibration+0x598>)
 8009642:	487f      	ldr	r0, [pc, #508]	; (8009840 <acc_cpd_dll_calibration+0x5a0>)
 8009644:	f002 fff6 	bl	800c634 <acc_diagnostic_log_array>
 8009648:	2101      	movs	r1, #1
 800964a:	a81a      	add	r0, sp, #104	; 0x68
 800964c:	f003 f80a 	bl	800c664 <acc_diagnostic_log_data_i16>
 8009650:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
 8009654:	f2a3 431a 	subw	r3, r3, #1050	; 0x41a
 8009658:	b29b      	uxth	r3, r3
 800965a:	2bc8      	cmp	r3, #200	; 0xc8
 800965c:	f200 8330 	bhi.w	8009cc0 <acc_cpd_dll_calibration+0xa20>
 8009660:	2302      	movs	r3, #2
 8009662:	9315      	str	r3, [sp, #84]	; 0x54
 8009664:	211b      	movs	r1, #27
 8009666:	b28b      	uxth	r3, r1
 8009668:	461c      	mov	r4, r3
 800966a:	4876      	ldr	r0, [pc, #472]	; (8009844 <acc_cpd_dll_calibration+0x5a4>)
 800966c:	9318      	str	r3, [sp, #96]	; 0x60
 800966e:	f002 ffd9 	bl	800c624 <acc_diagnostic_log_set_parameter>
 8009672:	4620      	mov	r0, r4
 8009674:	aa26      	add	r2, sp, #152	; 0x98
 8009676:	217c      	movs	r1, #124	; 0x7c
 8009678:	f7fe fd7a 	bl	8008170 <acc_dll_calculate_area_settings>
 800967c:	f899 301c 	ldrb.w	r3, [r9, #28]
 8009680:	2b00      	cmp	r3, #0
 8009682:	f000 8274 	beq.w	8009b6e <acc_cpd_dll_calibration+0x8ce>
 8009686:	f899 301d 	ldrb.w	r3, [r9, #29]
 800968a:	f083 0301 	eor.w	r3, r3, #1
 800968e:	f8b9 2010 	ldrh.w	r2, [r9, #16]
 8009692:	f8d9 100c 	ldr.w	r1, [r9, #12]
 8009696:	f8bd b0ac 	ldrh.w	fp, [sp, #172]	; 0xac
 800969a:	f8bd c098 	ldrh.w	ip, [sp, #152]	; 0x98
 800969e:	f8bd 709a 	ldrh.w	r7, [sp, #154]	; 0x9a
 80096a2:	f8bd 609e 	ldrh.w	r6, [sp, #158]	; 0x9e
 80096a6:	f8bd 50a0 	ldrh.w	r5, [sp, #160]	; 0xa0
 80096aa:	e9d9 4001 	ldrd	r4, r0, [r9, #4]
 80096ae:	e9d9 8e05 	ldrd	r8, lr, [r9, #20]
 80096b2:	f8aa 200c 	strh.w	r2, [sl, #12]
 80096b6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80096b8:	f8ca 2018 	str.w	r2, [sl, #24]
 80096bc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80096be:	f8ca 1008 	str.w	r1, [sl, #8]
 80096c2:	f8ca 201c 	str.w	r2, [sl, #28]
 80096c6:	f8bd 10aa 	ldrh.w	r1, [sp, #170]	; 0xaa
 80096ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80096cc:	f8ca 4000 	str.w	r4, [sl]
 80096d0:	e9ca 8e04 	strd	r8, lr, [sl, #16]
 80096d4:	f8bd 40a4 	ldrh.w	r4, [sp, #164]	; 0xa4
 80096d8:	f8ca 0004 	str.w	r0, [sl, #4]
 80096dc:	f04f 0e01 	mov.w	lr, #1
 80096e0:	f8bd 00a6 	ldrh.w	r0, [sp, #166]	; 0xa6
 80096e4:	f8ca 2020 	str.w	r2, [sl, #32]
 80096e8:	2200      	movs	r2, #0
 80096ea:	f8ca c028 	str.w	ip, [sl, #40]	; 0x28
 80096ee:	f8ca 702c 	str.w	r7, [sl, #44]	; 0x2c
 80096f2:	f04f 0c06 	mov.w	ip, #6
 80096f6:	2703      	movs	r7, #3
 80096f8:	f8ca 6030 	str.w	r6, [sl, #48]	; 0x30
 80096fc:	f8ca 5034 	str.w	r5, [sl, #52]	; 0x34
 8009700:	f06f 0601 	mvn.w	r6, #1
 8009704:	f8ca 4038 	str.w	r4, [sl, #56]	; 0x38
 8009708:	f8ca 003c 	str.w	r0, [sl, #60]	; 0x3c
 800970c:	240f      	movs	r4, #15
 800970e:	e9ca 1b10 	strd	r1, fp, [sl, #64]	; 0x40
 8009712:	2007      	movs	r0, #7
 8009714:	e9ca 2e12 	strd	r2, lr, [sl, #72]	; 0x48
 8009718:	e9ca e216 	strd	lr, r2, [sl, #88]	; 0x58
 800971c:	e9ca 2214 	strd	r2, r2, [sl, #80]	; 0x50
 8009720:	e9ca 2218 	strd	r2, r2, [sl, #96]	; 0x60
 8009724:	e9ca 2227 	strd	r2, r2, [sl, #156]	; 0x9c
 8009728:	f8ca 2068 	str.w	r2, [sl, #104]	; 0x68
 800972c:	f8ca 2078 	str.w	r2, [sl, #120]	; 0x78
 8009730:	f8ca 2084 	str.w	r2, [sl, #132]	; 0x84
 8009734:	f8aa 208c 	strh.w	r2, [sl, #140]	; 0x8c
 8009738:	2516      	movs	r5, #22
 800973a:	2200      	movs	r2, #0
 800973c:	e9ca c724 	strd	ip, r7, [sl, #144]	; 0x90
 8009740:	e9ca ee1c 	strd	lr, lr, [sl, #112]	; 0x70
 8009744:	e9ca 541f 	strd	r5, r4, [sl, #124]	; 0x7c
 8009748:	f8ca e0a4 	str.w	lr, [sl, #164]	; 0xa4
 800974c:	f8ca 20a8 	str.w	r2, [sl, #168]	; 0xa8
 8009750:	f88a e0ad 	strb.w	lr, [sl, #173]	; 0xad
 8009754:	f8ca 306c 	str.w	r3, [sl, #108]	; 0x6c
 8009758:	f8ca 6098 	str.w	r6, [sl, #152]	; 0x98
 800975c:	f8ca 0088 	str.w	r0, [sl, #136]	; 0x88
 8009760:	f7fb ffae 	bl	80056c0 <acc_rss_integration_get_sensor_reference_frequency>
 8009764:	f8b9 301e 	ldrh.w	r3, [r9, #30]
 8009768:	f899 201c 	ldrb.w	r2, [r9, #28]
 800976c:	ed8a 0a2c 	vstr	s0, [sl, #176]	; 0xb0
 8009770:	3b01      	subs	r3, #1
 8009772:	e9ca 232d 	strd	r2, r3, [sl, #180]	; 0xb4
 8009776:	f9bd 3068 	ldrsh.w	r3, [sp, #104]	; 0x68
 800977a:	930f      	str	r3, [sp, #60]	; 0x3c
 800977c:	f04f 0100 	mov.w	r1, #0
 8009780:	f9bd 306a 	ldrsh.w	r3, [sp, #106]	; 0x6a
 8009784:	f88a 10ac 	strb.w	r1, [sl, #172]	; 0xac
 8009788:	9314      	str	r3, [sp, #80]	; 0x50
 800978a:	a926      	add	r1, sp, #152	; 0x98
 800978c:	f89a 308c 	ldrb.w	r3, [sl, #140]	; 0x8c
 8009790:	9308      	str	r3, [sp, #32]
 8009792:	4650      	mov	r0, sl
 8009794:	f8d9 b000 	ldr.w	fp, [r9]
 8009798:	f8da 4094 	ldr.w	r4, [sl, #148]	; 0x94
 800979c:	f8da 60a4 	ldr.w	r6, [sl, #164]	; 0xa4
 80097a0:	f8da 7080 	ldr.w	r7, [sl, #128]	; 0x80
 80097a4:	f001 fc38 	bl	800b018 <acc_cpd_linear_sweep_get_info>
 80097a8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80097aa:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80097ac:	429a      	cmp	r2, r3
 80097ae:	f000 81fb 	beq.w	8009ba8 <acc_cpd_dll_calibration+0x908>
 80097b2:	f899 301c 	ldrb.w	r3, [r9, #28]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	f000 81db 	beq.w	8009b72 <acc_cpd_dll_calibration+0x8d2>
 80097bc:	f8b9 301e 	ldrh.w	r3, [r9, #30]
 80097c0:	ee0c 3a90 	vmov	s25, r3
 80097c4:	ee1c 2a10 	vmov	r2, s24
 80097c8:	ee1b 1a90 	vmov	r1, s23
 80097cc:	4653      	mov	r3, sl
 80097ce:	4658      	mov	r0, fp
 80097d0:	9d26      	ldr	r5, [sp, #152]	; 0x98
 80097d2:	f000 fe93 	bl	800a4fc <acc_cpd_linear_sweep_load_program>
 80097d6:	2800      	cmp	r0, #0
 80097d8:	f000 81b9 	beq.w	8009b4e <acc_cpd_dll_calibration+0x8ae>
 80097dc:	f899 301c 	ldrb.w	r3, [r9, #28]
 80097e0:	930a      	str	r3, [sp, #40]	; 0x28
 80097e2:	b113      	cbz	r3, 80097ea <acc_cpd_dll_calibration+0x54a>
 80097e4:	f899 301d 	ldrb.w	r3, [r9, #29]
 80097e8:	930a      	str	r3, [sp, #40]	; 0x28
 80097ea:	ee07 6a90 	vmov	s15, r6
 80097ee:	eddf 6a16 	vldr	s13, [pc, #88]	; 8009848 <acc_cpd_dll_calibration+0x5a8>
 80097f2:	ed9f ba16 	vldr	s22, [pc, #88]	; 800984c <acc_cpd_dll_calibration+0x5ac>
 80097f6:	eddf aa16 	vldr	s21, [pc, #88]	; 8009850 <acc_cpd_dll_calibration+0x5b0>
 80097fa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80097fe:	3401      	adds	r4, #1
 8009800:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009804:	b2a4      	uxth	r4, r4
 8009806:	e029      	b.n	800985c <acc_cpd_dll_calibration+0x5bc>
 8009808:	0800fb68 	.word	0x0800fb68
 800980c:	0800fb98 	.word	0x0800fb98
 8009810:	200004c0 	.word	0x200004c0
 8009814:	0800fac8 	.word	0x0800fac8
 8009818:	0800f7c0 	.word	0x0800f7c0
 800981c:	0800fb2c 	.word	0x0800fb2c
 8009820:	0800f834 	.word	0x0800f834
 8009824:	080138a8 	.word	0x080138a8
 8009828:	080138a0 	.word	0x080138a0
 800982c:	cccccccd 	.word	0xcccccccd
 8009830:	0800f8ac 	.word	0x0800f8ac
 8009834:	0800f828 	.word	0x0800f828
 8009838:	0800f8c4 	.word	0x0800f8c4
 800983c:	0800f8e8 	.word	0x0800f8e8
 8009840:	0800f8f0 	.word	0x0800f8f0
 8009844:	0800f81c 	.word	0x0800f81c
 8009848:	42f80000 	.word	0x42f80000
 800984c:	42640000 	.word	0x42640000
 8009850:	42172c98 	.word	0x42172c98
 8009854:	402ca8ad 	.word	0x402ca8ad
 8009858:	447a0000 	.word	0x447a0000
 800985c:	ee1c 2a90 	vmov	r2, s25
 8009860:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009864:	ee17 3a90 	vmov	r3, s15
 8009868:	b29b      	uxth	r3, r3
 800986a:	fb04 f303 	mul.w	r3, r4, r3
 800986e:	441d      	add	r5, r3
 8009870:	18aa      	adds	r2, r5, r2
 8009872:	9317      	str	r3, [sp, #92]	; 0x5c
 8009874:	920b      	str	r2, [sp, #44]	; 0x2c
 8009876:	ea4f 0843 	mov.w	r8, r3, lsl #1
 800987a:	4658      	mov	r0, fp
 800987c:	f001 fb76 	bl	800af6c <acc_cpd_linear_sweep_run_program>
 8009880:	2800      	cmp	r0, #0
 8009882:	f000 8164 	beq.w	8009b4e <acc_cpd_dll_calibration+0x8ae>
 8009886:	ed1f aa0d 	vldr	s20, [pc, #-52]	; 8009854 <acc_cpd_dll_calibration+0x5b4>
 800988a:	ed5f 9a0d 	vldr	s19, [pc, #-52]	; 8009858 <acc_cpd_dll_calibration+0x5b8>
 800988e:	2600      	movs	r6, #0
 8009890:	ab1c      	add	r3, sp, #112	; 0x70
 8009892:	2264      	movs	r2, #100	; 0x64
 8009894:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8009898:	4658      	mov	r0, fp
 800989a:	f7fd ff2f 	bl	80076fc <acc_sensor_protocol_r2_wait_for_event>
 800989e:	2800      	cmp	r0, #0
 80098a0:	f000 8155 	beq.w	8009b4e <acc_cpd_dll_calibration+0x8ae>
 80098a4:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
 80098a8:	2b06      	cmp	r3, #6
 80098aa:	f040 8150 	bne.w	8009b4e <acc_cpd_dll_calibration+0x8ae>
 80098ae:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80098b2:	ee1c 0a10 	vmov	r0, s24
 80098b6:	f7fd faeb 	bl	8006e90 <acc_sensor_r2_buffer_processed_verify_size>
 80098ba:	2800      	cmp	r0, #0
 80098bc:	f000 813d 	beq.w	8009b3a <acc_cpd_dll_calibration+0x89a>
 80098c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80098c2:	ee1b 1a90 	vmov	r1, s23
 80098c6:	4658      	mov	r0, fp
 80098c8:	f7fe f862 	bl	8007990 <acc_sensor_protocol_r2_transfer_data>
 80098cc:	4604      	mov	r4, r0
 80098ce:	2800      	cmp	r0, #0
 80098d0:	f000 813d 	beq.w	8009b4e <acc_cpd_dll_calibration+0x8ae>
 80098d4:	9d26      	ldr	r5, [sp, #152]	; 0x98
 80098d6:	f899 301c 	ldrb.w	r3, [r9, #28]
 80098da:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 80098de:	b1fb      	cbz	r3, 8009920 <acc_cpd_dll_calibration+0x680>
 80098e0:	ee1c 3a90 	vmov	r3, s25
 80098e4:	eb05 0208 	add.w	r2, r5, r8
 80098e8:	4659      	mov	r1, fp
 80098ea:	2001      	movs	r0, #1
 80098ec:	920c      	str	r2, [sp, #48]	; 0x30
 80098ee:	f7fe faa3 	bl	8007e38 <acc_probes_execute_uint16>
 80098f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80098f4:	ee1c 1a90 	vmov	r1, s25
 80098f8:	4610      	mov	r0, r2
 80098fa:	f7fe f987 	bl	8007c0c <acc_alg_cca_u16_calculate>
 80098fe:	eeb4 0acb 	vcmpe.f32	s0, s22
 8009902:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009908:	bfcc      	ite	gt
 800990a:	2301      	movgt	r3, #1
 800990c:	2300      	movle	r3, #0
 800990e:	ed82 0a07 	vstr	s0, [r2, #28]
 8009912:	7653      	strb	r3, [r2, #25]
 8009914:	f300 8237 	bgt.w	8009d86 <acc_cpd_dll_calibration+0xae6>
 8009918:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800991a:	2b00      	cmp	r3, #0
 800991c:	f040 80f1 	bne.w	8009b02 <acc_cpd_dll_calibration+0x862>
 8009920:	eeb0 0a6a 	vmov.f32	s0, s21
 8009924:	4641      	mov	r1, r8
 8009926:	4628      	mov	r0, r5
 8009928:	f002 f85c 	bl	800b9e4 <acc_alg_basic_saturation_check_u16>
 800992c:	2800      	cmp	r0, #0
 800992e:	f040 80c6 	bne.w	8009abe <acc_cpd_dll_calibration+0x81e>
 8009932:	2f00      	cmp	r7, #0
 8009934:	f040 814b 	bne.w	8009bce <acc_cpd_dll_calibration+0x92e>
 8009938:	9b08      	ldr	r3, [sp, #32]
 800993a:	2b00      	cmp	r3, #0
 800993c:	f040 81a8 	bne.w	8009c90 <acc_cpd_dll_calibration+0x9f0>
 8009940:	f7fb ff6e 	bl	8005820 <acc_rss_integration_log_level>
 8009944:	2803      	cmp	r0, #3
 8009946:	d905      	bls.n	8009954 <acc_cpd_dll_calibration+0x6b4>
 8009948:	4bbf      	ldr	r3, [pc, #764]	; (8009c48 <acc_cpd_dll_calibration+0x9a8>)
 800994a:	4ac0      	ldr	r2, [pc, #768]	; (8009c4c <acc_cpd_dll_calibration+0x9ac>)
 800994c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800994e:	49c0      	ldr	r1, [pc, #768]	; (8009c50 <acc_cpd_dll_calibration+0x9b0>)
 8009950:	2004      	movs	r0, #4
 8009952:	4798      	blx	r3
 8009954:	eeb0 0a4a 	vmov.f32	s0, s20
 8009958:	4641      	mov	r1, r8
 800995a:	4628      	mov	r0, r5
 800995c:	f002 f842 	bl	800b9e4 <acc_alg_basic_saturation_check_u16>
 8009960:	2800      	cmp	r0, #0
 8009962:	f040 81a2 	bne.w	8009caa <acc_cpd_dll_calibration+0xa0a>
 8009966:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8009968:	f8da 2020 	ldr.w	r2, [sl, #32]
 800996c:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 8009970:	49b8      	ldr	r1, [pc, #736]	; (8009c54 <acc_cpd_dll_calibration+0x9b4>)
 8009972:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8009974:	ee06 3a90 	vmov	s13, r3
 8009978:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800997a:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 800997e:	615f      	str	r7, [r3, #20]
 8009980:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8009984:	f831 3012 	ldrh.w	r3, [r1, r2, lsl #1]
 8009988:	49b3      	ldr	r1, [pc, #716]	; (8009c58 <acc_cpd_dll_calibration+0x9b8>)
 800998a:	ee66 6a89 	vmul.f32	s13, s13, s18
 800998e:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8009992:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8009996:	ee76 6ae5 	vsub.f32	s13, s13, s11
 800999a:	1a5b      	subs	r3, r3, r1
 800999c:	b21b      	sxth	r3, r3
 800999e:	ee07 0a90 	vmov	s15, r0
 80099a2:	ee08 3a10 	vmov	s16, r3
 80099a6:	e9dd 0208 	ldrd	r0, r2, [sp, #32]
 80099aa:	ee66 6aa8 	vmul.f32	s13, s13, s17
 80099ae:	eeb8 6ac8 	vcvt.f32.s32	s12, s16
 80099b2:	ee66 6aa9 	vmul.f32	s13, s13, s19
 80099b6:	7610      	strb	r0, [r2, #24]
 80099b8:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80099ba:	49a8      	ldr	r1, [pc, #672]	; (8009c5c <acc_cpd_dll_calibration+0x9bc>)
 80099bc:	f834 3012 	ldrh.w	r3, [r4, r2, lsl #1]
 80099c0:	48a7      	ldr	r0, [pc, #668]	; (8009c60 <acc_cpd_dll_calibration+0x9c0>)
 80099c2:	ee76 6a66 	vsub.f32	s13, s12, s13
 80099c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099ca:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 80099ce:	ee07 3a10 	vmov	s14, r3
 80099d2:	ee67 7a89 	vmul.f32	s15, s15, s18
 80099d6:	ee16 3a90 	vmov	r3, s13
 80099da:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80099de:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80099e2:	b21b      	sxth	r3, r3
 80099e4:	ee06 3a90 	vmov	s13, r3
 80099e8:	ee27 7a09 	vmul.f32	s14, s14, s18
 80099ec:	ee67 7aa8 	vmul.f32	s15, s15, s17
 80099f0:	ee37 7a65 	vsub.f32	s14, s14, s11
 80099f4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80099f8:	ee67 7aa9 	vmul.f32	s15, s15, s19
 80099fc:	ee27 7a28 	vmul.f32	s14, s14, s17
 8009a00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a04:	ee27 7a29 	vmul.f32	s14, s14, s19
 8009a08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009a0c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8009a10:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
 8009a14:	ee17 3a90 	vmov	r3, s15
 8009a18:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
 8009a1c:	ee17 3a10 	vmov	r3, s14
 8009a20:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
 8009a24:	f002 fe06 	bl	800c634 <acc_diagnostic_log_array>
 8009a28:	2101      	movs	r1, #1
 8009a2a:	a81b      	add	r0, sp, #108	; 0x6c
 8009a2c:	f002 fe1a 	bl	800c664 <acc_diagnostic_log_data_i16>
 8009a30:	498a      	ldr	r1, [pc, #552]	; (8009c5c <acc_cpd_dll_calibration+0x9bc>)
 8009a32:	488b      	ldr	r0, [pc, #556]	; (8009c60 <acc_cpd_dll_calibration+0x9c0>)
 8009a34:	f002 fdfe 	bl	800c634 <acc_diagnostic_log_array>
 8009a38:	2101      	movs	r1, #1
 8009a3a:	f10d 006e 	add.w	r0, sp, #110	; 0x6e
 8009a3e:	f002 fe11 	bl	800c664 <acc_diagnostic_log_data_i16>
 8009a42:	4986      	ldr	r1, [pc, #536]	; (8009c5c <acc_cpd_dll_calibration+0x9bc>)
 8009a44:	4887      	ldr	r0, [pc, #540]	; (8009c64 <acc_cpd_dll_calibration+0x9c4>)
 8009a46:	f002 fdf5 	bl	800c634 <acc_diagnostic_log_array>
 8009a4a:	2101      	movs	r1, #1
 8009a4c:	a81c      	add	r0, sp, #112	; 0x70
 8009a4e:	f002 fe09 	bl	800c664 <acc_diagnostic_log_data_i16>
 8009a52:	f8bd 206c 	ldrh.w	r2, [sp, #108]	; 0x6c
 8009a56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009a58:	1a9b      	subs	r3, r3, r2
 8009a5a:	b21b      	sxth	r3, r3
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	bfb8      	it	lt
 8009a60:	425b      	neglt	r3, r3
 8009a62:	b21b      	sxth	r3, r3
 8009a64:	2b64      	cmp	r3, #100	; 0x64
 8009a66:	f77f ad0f 	ble.w	8009488 <acc_cpd_dll_calibration+0x1e8>
 8009a6a:	2e02      	cmp	r6, #2
 8009a6c:	d00f      	beq.n	8009a8e <acc_cpd_dll_calibration+0x7ee>
 8009a6e:	f7fb fed7 	bl	8005820 <acc_rss_integration_log_level>
 8009a72:	2803      	cmp	r0, #3
 8009a74:	d906      	bls.n	8009a84 <acc_cpd_dll_calibration+0x7e4>
 8009a76:	4b74      	ldr	r3, [pc, #464]	; (8009c48 <acc_cpd_dll_calibration+0x9a8>)
 8009a78:	4a7b      	ldr	r2, [pc, #492]	; (8009c68 <acc_cpd_dll_calibration+0x9c8>)
 8009a7a:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8009a7c:	4974      	ldr	r1, [pc, #464]	; (8009c50 <acc_cpd_dll_calibration+0x9b0>)
 8009a7e:	4633      	mov	r3, r6
 8009a80:	2004      	movs	r0, #4
 8009a82:	47a0      	blx	r4
 8009a84:	4658      	mov	r0, fp
 8009a86:	3601      	adds	r6, #1
 8009a88:	f7fd fdaa 	bl	80075e0 <acc_sensor_protocol_r2_ack_event>
 8009a8c:	e700      	b.n	8009890 <acc_cpd_dll_calibration+0x5f0>
 8009a8e:	f7fb fec7 	bl	8005820 <acc_rss_integration_log_level>
 8009a92:	2803      	cmp	r0, #3
 8009a94:	d92f      	bls.n	8009af6 <acc_cpd_dll_calibration+0x856>
 8009a96:	4b6c      	ldr	r3, [pc, #432]	; (8009c48 <acc_cpd_dll_calibration+0x9a8>)
 8009a98:	4a74      	ldr	r2, [pc, #464]	; (8009c6c <acc_cpd_dll_calibration+0x9cc>)
 8009a9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a9c:	496c      	ldr	r1, [pc, #432]	; (8009c50 <acc_cpd_dll_calibration+0x9b0>)
 8009a9e:	2004      	movs	r0, #4
 8009aa0:	4798      	blx	r3
 8009aa2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8009aa6:	4658      	mov	r0, fp
 8009aa8:	f7fd fec0 	bl	800782c <acc_sensor_protocol_r2_stop>
 8009aac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009aae:	2b01      	cmp	r3, #1
 8009ab0:	f04f 0100 	mov.w	r1, #0
 8009ab4:	f43f ad1b 	beq.w	80094ee <acc_cpd_dll_calibration+0x24e>
 8009ab8:	2301      	movs	r3, #1
 8009aba:	9315      	str	r3, [sp, #84]	; 0x54
 8009abc:	e5d3      	b.n	8009666 <acc_cpd_dll_calibration+0x3c6>
 8009abe:	eeb0 0a4a 	vmov.f32	s0, s20
 8009ac2:	4641      	mov	r1, r8
 8009ac4:	4628      	mov	r0, r5
 8009ac6:	f001 ff8d 	bl	800b9e4 <acc_alg_basic_saturation_check_u16>
 8009aca:	2800      	cmp	r0, #0
 8009acc:	f43f af4b 	beq.w	8009966 <acc_cpd_dll_calibration+0x6c6>
 8009ad0:	2f0f      	cmp	r7, #15
 8009ad2:	f040 80ea 	bne.w	8009caa <acc_cpd_dll_calibration+0xa0a>
 8009ad6:	9b08      	ldr	r3, [sp, #32]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	f000 80fd 	beq.w	8009cd8 <acc_cpd_dll_calibration+0xa38>
 8009ade:	f7fb fe9f 	bl	8005820 <acc_rss_integration_log_level>
 8009ae2:	2803      	cmp	r0, #3
 8009ae4:	f67f af3f 	bls.w	8009966 <acc_cpd_dll_calibration+0x6c6>
 8009ae8:	4b57      	ldr	r3, [pc, #348]	; (8009c48 <acc_cpd_dll_calibration+0x9a8>)
 8009aea:	4a61      	ldr	r2, [pc, #388]	; (8009c70 <acc_cpd_dll_calibration+0x9d0>)
 8009aec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009aee:	4958      	ldr	r1, [pc, #352]	; (8009c50 <acc_cpd_dll_calibration+0x9b0>)
 8009af0:	2004      	movs	r0, #4
 8009af2:	4798      	blx	r3
 8009af4:	e737      	b.n	8009966 <acc_cpd_dll_calibration+0x6c6>
 8009af6:	4658      	mov	r0, fp
 8009af8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8009afc:	f7fd fe96 	bl	800782c <acc_sensor_protocol_r2_stop>
 8009b00:	e4ef      	b.n	80094e2 <acc_cpd_dll_calibration+0x242>
 8009b02:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8009b06:	4658      	mov	r0, fp
 8009b08:	f7fd fe90 	bl	800782c <acc_sensor_protocol_r2_stop>
 8009b0c:	4658      	mov	r0, fp
 8009b0e:	f7fd fd55 	bl	80075bc <acc_sensor_protocol_r2_is_sensor_running>
 8009b12:	900a      	str	r0, [sp, #40]	; 0x28
 8009b14:	bb10      	cbnz	r0, 8009b5c <acc_cpd_dll_calibration+0x8bc>
 8009b16:	f002 fdc5 	bl	800c6a4 <acc_image_a111_r2c_sweep_get>
 8009b1a:	900c      	str	r0, [sp, #48]	; 0x30
 8009b1c:	f002 fdc6 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 8009b20:	4a54      	ldr	r2, [pc, #336]	; (8009c74 <acc_cpd_dll_calibration+0x9d4>)
 8009b22:	9202      	str	r2, [sp, #8]
 8009b24:	2401      	movs	r4, #1
 8009b26:	2272      	movs	r2, #114	; 0x72
 8009b28:	e9cd 2400 	strd	r2, r4, [sp]
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009b30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b32:	4658      	mov	r0, fp
 8009b34:	f002 fcde 	bl	800c4f4 <acc_confprogram_live_patch>
 8009b38:	e69f      	b.n	800987a <acc_cpd_dll_calibration+0x5da>
 8009b3a:	4b43      	ldr	r3, [pc, #268]	; (8009c48 <acc_cpd_dll_calibration+0x9a8>)
 8009b3c:	4944      	ldr	r1, [pc, #272]	; (8009c50 <acc_cpd_dll_calibration+0x9b0>)
 8009b3e:	4a4e      	ldr	r2, [pc, #312]	; (8009c78 <acc_cpd_dll_calibration+0x9d8>)
 8009b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b42:	4798      	blx	r3
 8009b44:	4658      	mov	r0, fp
 8009b46:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8009b4a:	f7fd fe6f 	bl	800782c <acc_sensor_protocol_r2_stop>
 8009b4e:	2400      	movs	r4, #0
 8009b50:	4620      	mov	r0, r4
 8009b52:	b047      	add	sp, #284	; 0x11c
 8009b54:	ecbd 8b0a 	vpop	{d8-d12}
 8009b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b5c:	4b3a      	ldr	r3, [pc, #232]	; (8009c48 <acc_cpd_dll_calibration+0x9a8>)
 8009b5e:	4a47      	ldr	r2, [pc, #284]	; (8009c7c <acc_cpd_dll_calibration+0x9dc>)
 8009b60:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8009b62:	493b      	ldr	r1, [pc, #236]	; (8009c50 <acc_cpd_dll_calibration+0x9b0>)
 8009b64:	46d9      	mov	r9, fp
 8009b66:	464b      	mov	r3, r9
 8009b68:	2000      	movs	r0, #0
 8009b6a:	47a0      	blx	r4
 8009b6c:	e7ef      	b.n	8009b4e <acc_cpd_dll_calibration+0x8ae>
 8009b6e:	2301      	movs	r3, #1
 8009b70:	e58d      	b.n	800968e <acc_cpd_dll_calibration+0x3ee>
 8009b72:	ee0c 3a90 	vmov	s25, r3
 8009b76:	e625      	b.n	80097c4 <acc_cpd_dll_calibration+0x524>
 8009b78:	f7fb fe52 	bl	8005820 <acc_rss_integration_log_level>
 8009b7c:	2803      	cmp	r0, #3
 8009b7e:	f67f acc3 	bls.w	8009508 <acc_cpd_dll_calibration+0x268>
 8009b82:	4b31      	ldr	r3, [pc, #196]	; (8009c48 <acc_cpd_dll_calibration+0x9a8>)
 8009b84:	4a3e      	ldr	r2, [pc, #248]	; (8009c80 <acc_cpd_dll_calibration+0x9e0>)
 8009b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b88:	4931      	ldr	r1, [pc, #196]	; (8009c50 <acc_cpd_dll_calibration+0x9b0>)
 8009b8a:	2004      	movs	r0, #4
 8009b8c:	4798      	blx	r3
 8009b8e:	e4bb      	b.n	8009508 <acc_cpd_dll_calibration+0x268>
 8009b90:	464b      	mov	r3, r9
 8009b92:	46d1      	mov	r9, sl
 8009b94:	469a      	mov	sl, r3
 8009b96:	2301      	movs	r3, #1
 8009b98:	930e      	str	r3, [sp, #56]	; 0x38
 8009b9a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009b9c:	2b01      	cmp	r3, #1
 8009b9e:	d0d6      	beq.n	8009b4e <acc_cpd_dll_calibration+0x8ae>
 8009ba0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009ba2:	9319      	str	r3, [sp, #100]	; 0x64
 8009ba4:	f7ff bbc6 	b.w	8009334 <acc_cpd_dll_calibration+0x94>
 8009ba8:	4b27      	ldr	r3, [pc, #156]	; (8009c48 <acc_cpd_dll_calibration+0x9a8>)
 8009baa:	4a36      	ldr	r2, [pc, #216]	; (8009c84 <acc_cpd_dll_calibration+0x9e4>)
 8009bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bae:	4928      	ldr	r1, [pc, #160]	; (8009c50 <acc_cpd_dll_calibration+0x9b0>)
 8009bb0:	2000      	movs	r0, #0
 8009bb2:	4798      	blx	r3
 8009bb4:	e7cb      	b.n	8009b4e <acc_cpd_dll_calibration+0x8ae>
 8009bb6:	4b24      	ldr	r3, [pc, #144]	; (8009c48 <acc_cpd_dll_calibration+0x9a8>)
 8009bb8:	4a33      	ldr	r2, [pc, #204]	; (8009c88 <acc_cpd_dll_calibration+0x9e8>)
 8009bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bbc:	4924      	ldr	r1, [pc, #144]	; (8009c50 <acc_cpd_dll_calibration+0x9b0>)
 8009bbe:	4620      	mov	r0, r4
 8009bc0:	4798      	blx	r3
 8009bc2:	4620      	mov	r0, r4
 8009bc4:	b047      	add	sp, #284	; 0x11c
 8009bc6:	ecbd 8b0a 	vpop	{d8-d12}
 8009bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bce:	2f08      	cmp	r7, #8
 8009bd0:	bf38      	it	cc
 8009bd2:	2708      	movcc	r7, #8
 8009bd4:	f7fb fe24 	bl	8005820 <acc_rss_integration_log_level>
 8009bd8:	2803      	cmp	r0, #3
 8009bda:	f1a7 0708 	sub.w	r7, r7, #8
 8009bde:	d906      	bls.n	8009bee <acc_cpd_dll_calibration+0x94e>
 8009be0:	4b19      	ldr	r3, [pc, #100]	; (8009c48 <acc_cpd_dll_calibration+0x9a8>)
 8009be2:	4a2a      	ldr	r2, [pc, #168]	; (8009c8c <acc_cpd_dll_calibration+0x9ec>)
 8009be4:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8009be6:	491a      	ldr	r1, [pc, #104]	; (8009c50 <acc_cpd_dll_calibration+0x9b0>)
 8009be8:	463b      	mov	r3, r7
 8009bea:	2004      	movs	r0, #4
 8009bec:	47a0      	blx	r4
 8009bee:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8009bf2:	4658      	mov	r0, fp
 8009bf4:	f7fd fe1a 	bl	800782c <acc_sensor_protocol_r2_stop>
 8009bf8:	4658      	mov	r0, fp
 8009bfa:	f7fd fcdf 	bl	80075bc <acc_sensor_protocol_r2_is_sensor_running>
 8009bfe:	4602      	mov	r2, r0
 8009c00:	2800      	cmp	r0, #0
 8009c02:	d1ab      	bne.n	8009b5c <acc_cpd_dll_calibration+0x8bc>
 8009c04:	9210      	str	r2, [sp, #64]	; 0x40
 8009c06:	f002 fd4d 	bl	800c6a4 <acc_image_a111_r2c_sweep_get>
 8009c0a:	900c      	str	r0, [sp, #48]	; 0x30
 8009c0c:	f002 fd4e 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 8009c10:	4c18      	ldr	r4, [pc, #96]	; (8009c74 <acc_cpd_dll_calibration+0x9d4>)
 8009c12:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009c14:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009c16:	2544      	movs	r5, #68	; 0x44
 8009c18:	4603      	mov	r3, r0
 8009c1a:	9500      	str	r5, [sp, #0]
 8009c1c:	4658      	mov	r0, fp
 8009c1e:	e9cd 7401 	strd	r7, r4, [sp, #4]
 8009c22:	f002 fc67 	bl	800c4f4 <acc_confprogram_live_patch>
 8009c26:	f002 fd3d 	bl	800c6a4 <acc_image_a111_r2c_sweep_get>
 8009c2a:	900c      	str	r0, [sp, #48]	; 0x30
 8009c2c:	f002 fd3e 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 8009c30:	2542      	movs	r5, #66	; 0x42
 8009c32:	9a08      	ldr	r2, [sp, #32]
 8009c34:	9201      	str	r2, [sp, #4]
 8009c36:	4603      	mov	r3, r0
 8009c38:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009c3a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009c3c:	9402      	str	r4, [sp, #8]
 8009c3e:	9500      	str	r5, [sp, #0]
 8009c40:	4658      	mov	r0, fp
 8009c42:	f002 fc57 	bl	800c4f4 <acc_confprogram_live_patch>
 8009c46:	e618      	b.n	800987a <acc_cpd_dll_calibration+0x5da>
 8009c48:	200004c0 	.word	0x200004c0
 8009c4c:	0800f968 	.word	0x0800f968
 8009c50:	0800f7c0 	.word	0x0800f7c0
 8009c54:	080138a8 	.word	0x080138a8
 8009c58:	080138a0 	.word	0x080138a0
 8009c5c:	0800f8c4 	.word	0x0800f8c4
 8009c60:	0800fa38 	.word	0x0800fa38
 8009c64:	0800fa48 	.word	0x0800fa48
 8009c68:	0800fa58 	.word	0x0800fa58
 8009c6c:	0800fa80 	.word	0x0800fa80
 8009c70:	0800f9bc 	.word	0x0800f9bc
 8009c74:	08006dc5 	.word	0x08006dc5
 8009c78:	0800f6a8 	.word	0x0800f6a8
 8009c7c:	0800f634 	.word	0x0800f634
 8009c80:	0800f884 	.word	0x0800f884
 8009c84:	0800f920 	.word	0x0800f920
 8009c88:	0800e8b4 	.word	0x0800e8b4
 8009c8c:	0800f988 	.word	0x0800f988
 8009c90:	f7fb fdc6 	bl	8005820 <acc_rss_integration_log_level>
 8009c94:	2803      	cmp	r0, #3
 8009c96:	d92d      	bls.n	8009cf4 <acc_cpd_dll_calibration+0xa54>
 8009c98:	4b3e      	ldr	r3, [pc, #248]	; (8009d94 <acc_cpd_dll_calibration+0xaf4>)
 8009c9a:	4a3f      	ldr	r2, [pc, #252]	; (8009d98 <acc_cpd_dll_calibration+0xaf8>)
 8009c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c9e:	493f      	ldr	r1, [pc, #252]	; (8009d9c <acc_cpd_dll_calibration+0xafc>)
 8009ca0:	9708      	str	r7, [sp, #32]
 8009ca2:	2004      	movs	r0, #4
 8009ca4:	4798      	blx	r3
 8009ca6:	270f      	movs	r7, #15
 8009ca8:	e7a1      	b.n	8009bee <acc_cpd_dll_calibration+0x94e>
 8009caa:	3708      	adds	r7, #8
 8009cac:	2f0f      	cmp	r7, #15
 8009cae:	bf28      	it	cs
 8009cb0:	270f      	movcs	r7, #15
 8009cb2:	f7fb fdb5 	bl	8005820 <acc_rss_integration_log_level>
 8009cb6:	2803      	cmp	r0, #3
 8009cb8:	d999      	bls.n	8009bee <acc_cpd_dll_calibration+0x94e>
 8009cba:	4b36      	ldr	r3, [pc, #216]	; (8009d94 <acc_cpd_dll_calibration+0xaf4>)
 8009cbc:	4a38      	ldr	r2, [pc, #224]	; (8009da0 <acc_cpd_dll_calibration+0xb00>)
 8009cbe:	e791      	b.n	8009be4 <acc_cpd_dll_calibration+0x944>
 8009cc0:	f7fb fdae 	bl	8005820 <acc_rss_integration_log_level>
 8009cc4:	2803      	cmp	r0, #3
 8009cc6:	f67f ac1f 	bls.w	8009508 <acc_cpd_dll_calibration+0x268>
 8009cca:	4b32      	ldr	r3, [pc, #200]	; (8009d94 <acc_cpd_dll_calibration+0xaf4>)
 8009ccc:	4a35      	ldr	r2, [pc, #212]	; (8009da4 <acc_cpd_dll_calibration+0xb04>)
 8009cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cd0:	4932      	ldr	r1, [pc, #200]	; (8009d9c <acc_cpd_dll_calibration+0xafc>)
 8009cd2:	2004      	movs	r0, #4
 8009cd4:	4798      	blx	r3
 8009cd6:	e417      	b.n	8009508 <acc_cpd_dll_calibration+0x268>
 8009cd8:	9008      	str	r0, [sp, #32]
 8009cda:	f7fb fda1 	bl	8005820 <acc_rss_integration_log_level>
 8009cde:	2803      	cmp	r0, #3
 8009ce0:	9b08      	ldr	r3, [sp, #32]
 8009ce2:	d90a      	bls.n	8009cfa <acc_cpd_dll_calibration+0xa5a>
 8009ce4:	492b      	ldr	r1, [pc, #172]	; (8009d94 <acc_cpd_dll_calibration+0xaf4>)
 8009ce6:	4a30      	ldr	r2, [pc, #192]	; (8009da8 <acc_cpd_dll_calibration+0xb08>)
 8009ce8:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 8009cea:	492c      	ldr	r1, [pc, #176]	; (8009d9c <acc_cpd_dll_calibration+0xafc>)
 8009cec:	2004      	movs	r0, #4
 8009cee:	47a0      	blx	r4
 8009cf0:	2700      	movs	r7, #0
 8009cf2:	e77c      	b.n	8009bee <acc_cpd_dll_calibration+0x94e>
 8009cf4:	9708      	str	r7, [sp, #32]
 8009cf6:	270f      	movs	r7, #15
 8009cf8:	e779      	b.n	8009bee <acc_cpd_dll_calibration+0x94e>
 8009cfa:	9308      	str	r3, [sp, #32]
 8009cfc:	2700      	movs	r7, #0
 8009cfe:	e776      	b.n	8009bee <acc_cpd_dll_calibration+0x94e>
 8009d00:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009d02:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
 8009d06:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8009d08:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
 8009d0c:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8009d0e:	6008      	str	r0, [r1, #0]
 8009d10:	818d      	strh	r5, [r1, #12]
 8009d12:	81ca      	strh	r2, [r1, #14]
 8009d14:	820b      	strh	r3, [r1, #16]
 8009d16:	f7fb fd83 	bl	8005820 <acc_rss_integration_log_level>
 8009d1a:	2803      	cmp	r0, #3
 8009d1c:	d909      	bls.n	8009d32 <acc_cpd_dll_calibration+0xa92>
 8009d1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d20:	4a1c      	ldr	r2, [pc, #112]	; (8009d94 <acc_cpd_dll_calibration+0xaf4>)
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8009d26:	491d      	ldr	r1, [pc, #116]	; (8009d9c <acc_cpd_dll_calibration+0xafc>)
 8009d28:	9300      	str	r3, [sp, #0]
 8009d2a:	4a20      	ldr	r2, [pc, #128]	; (8009dac <acc_cpd_dll_calibration+0xb0c>)
 8009d2c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009d2e:	2004      	movs	r0, #4
 8009d30:	47a8      	blx	r5
 8009d32:	f7fb fd75 	bl	8005820 <acc_rss_integration_log_level>
 8009d36:	2801      	cmp	r0, #1
 8009d38:	d91e      	bls.n	8009d78 <acc_cpd_dll_calibration+0xad8>
 8009d3a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009d3c:	4a1c      	ldr	r2, [pc, #112]	; (8009db0 <acc_cpd_dll_calibration+0xb10>)
 8009d3e:	7e39      	ldrb	r1, [r7, #24]
 8009d40:	f8df c074 	ldr.w	ip, [pc, #116]	; 8009db8 <acc_cpd_dll_calibration+0xb18>
 8009d44:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009d46:	89b8      	ldrh	r0, [r7, #12]
 8009d48:	683e      	ldr	r6, [r7, #0]
 8009d4a:	9300      	str	r3, [sp, #0]
 8009d4c:	2900      	cmp	r1, #0
 8009d4e:	bf14      	ite	ne
 8009d50:	4663      	movne	r3, ip
 8009d52:	4613      	moveq	r3, r2
 8009d54:	4d0f      	ldr	r5, [pc, #60]	; (8009d94 <acc_cpd_dll_calibration+0xaf4>)
 8009d56:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8009d5a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8009d5e:	9306      	str	r3, [sp, #24]
 8009d60:	697b      	ldr	r3, [r7, #20]
 8009d62:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 8009d64:	9305      	str	r3, [sp, #20]
 8009d66:	e9cd 1203 	strd	r1, r2, [sp, #12]
 8009d6a:	e9cd 6001 	strd	r6, r0, [sp, #4]
 8009d6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d70:	4a10      	ldr	r2, [pc, #64]	; (8009db4 <acc_cpd_dll_calibration+0xb14>)
 8009d72:	490a      	ldr	r1, [pc, #40]	; (8009d9c <acc_cpd_dll_calibration+0xafc>)
 8009d74:	2002      	movs	r0, #2
 8009d76:	47a8      	blx	r5
 8009d78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d7a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009d7c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009d7e:	6059      	str	r1, [r3, #4]
 8009d80:	609a      	str	r2, [r3, #8]
 8009d82:	f7ff bb30 	b.w	80093e6 <acc_cpd_dll_calibration+0x146>
 8009d86:	4658      	mov	r0, fp
 8009d88:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8009d8c:	f7fd fd4e 	bl	800782c <acc_sensor_protocol_r2_stop>
 8009d90:	e6dd      	b.n	8009b4e <acc_cpd_dll_calibration+0x8ae>
 8009d92:	bf00      	nop
 8009d94:	200004c0 	.word	0x200004c0
 8009d98:	0800f940 	.word	0x0800f940
 8009d9c:	0800f7c0 	.word	0x0800f7c0
 8009da0:	0800fa04 	.word	0x0800fa04
 8009da4:	0800f8f8 	.word	0x0800f8f8
 8009da8:	0800f9dc 	.word	0x0800f9dc
 8009dac:	0800fa98 	.word	0x0800fa98
 8009db0:	0800f7b8 	.word	0x0800f7b8
 8009db4:	0800fafc 	.word	0x0800fafc
 8009db8:	0800f7b0 	.word	0x0800f7b0

08009dbc <acc_dll_check_direct_leakage>:
 8009dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009dc0:	4b44      	ldr	r3, [pc, #272]	; (8009ed4 <acc_dll_check_direct_leakage+0x118>)
 8009dc2:	460d      	mov	r5, r1
 8009dc4:	fba3 3101 	umull	r3, r1, r3, r1
 8009dc8:	ea4f 0991 	mov.w	r9, r1, lsr #2
 8009dcc:	f021 0403 	bic.w	r4, r1, #3
 8009dd0:	b084      	sub	sp, #16
 8009dd2:	464b      	mov	r3, r9
 8009dd4:	eb04 0191 	add.w	r1, r4, r1, lsr #2
 8009dd8:	4602      	mov	r2, r0
 8009dda:	4682      	mov	sl, r0
 8009ddc:	f002 f9e2 	bl	800c1a4 <acc_alg_power_bins>
 8009de0:	2d04      	cmp	r5, #4
 8009de2:	d924      	bls.n	8009e2e <acc_dll_check_direct_leakage+0x72>
 8009de4:	f1aa 0602 	sub.w	r6, sl, #2
 8009de8:	2300      	movs	r3, #0
 8009dea:	4632      	mov	r2, r6
 8009dec:	461c      	mov	r4, r3
 8009dee:	f832 1f02 	ldrh.w	r1, [r2, #2]!
 8009df2:	3301      	adds	r3, #1
 8009df4:	428c      	cmp	r4, r1
 8009df6:	bf38      	it	cc
 8009df8:	460c      	movcc	r4, r1
 8009dfa:	4599      	cmp	r9, r3
 8009dfc:	d8f7      	bhi.n	8009dee <acc_dll_check_direct_leakage+0x32>
 8009dfe:	4b36      	ldr	r3, [pc, #216]	; (8009ed8 <acc_dll_check_direct_leakage+0x11c>)
 8009e00:	2d0e      	cmp	r5, #14
 8009e02:	fba3 3404 	umull	r3, r4, r3, r4
 8009e06:	f3c4 084f 	ubfx	r8, r4, #1, #16
 8009e0a:	d910      	bls.n	8009e2e <acc_dll_check_direct_leakage+0x72>
 8009e0c:	2702      	movs	r7, #2
 8009e0e:	f836 5f02 	ldrh.w	r5, [r6, #2]!
 8009e12:	88b4      	ldrh	r4, [r6, #4]
 8009e14:	42a5      	cmp	r5, r4
 8009e16:	d902      	bls.n	8009e1e <acc_dll_check_direct_leakage+0x62>
 8009e18:	4623      	mov	r3, r4
 8009e1a:	462c      	mov	r4, r5
 8009e1c:	461d      	mov	r5, r3
 8009e1e:	4544      	cmp	r4, r8
 8009e20:	d902      	bls.n	8009e28 <acc_dll_check_direct_leakage+0x6c>
 8009e22:	ebb4 0fc5 	cmp.w	r4, r5, lsl #3
 8009e26:	d834      	bhi.n	8009e92 <acc_dll_check_direct_leakage+0xd6>
 8009e28:	3701      	adds	r7, #1
 8009e2a:	45b9      	cmp	r9, r7
 8009e2c:	d8ef      	bhi.n	8009e0e <acc_dll_check_direct_leakage+0x52>
 8009e2e:	ea4f 0559 	mov.w	r5, r9, lsr #1
 8009e32:	f105 0308 	add.w	r3, r5, #8
 8009e36:	454b      	cmp	r3, r9
 8009e38:	d821      	bhi.n	8009e7e <acc_dll_check_direct_leakage+0xc2>
 8009e3a:	f1aa 0202 	sub.w	r2, sl, #2
 8009e3e:	f10a 000e 	add.w	r0, sl, #14
 8009e42:	2400      	movs	r4, #0
 8009e44:	f832 1f02 	ldrh.w	r1, [r2, #2]!
 8009e48:	4290      	cmp	r0, r2
 8009e4a:	440c      	add	r4, r1
 8009e4c:	d1fa      	bne.n	8009e44 <acc_dll_check_direct_leakage+0x88>
 8009e4e:	1c6a      	adds	r2, r5, #1
 8009e50:	4293      	cmp	r3, r2
 8009e52:	bf34      	ite	cc
 8009e54:	2301      	movcc	r3, #1
 8009e56:	2308      	movcs	r3, #8
 8009e58:	442b      	add	r3, r5
 8009e5a:	eb0a 0343 	add.w	r3, sl, r3, lsl #1
 8009e5e:	eb0a 0a45 	add.w	sl, sl, r5, lsl #1
 8009e62:	2500      	movs	r5, #0
 8009e64:	f83a 2b02 	ldrh.w	r2, [sl], #2
 8009e68:	4553      	cmp	r3, sl
 8009e6a:	4415      	add	r5, r2
 8009e6c:	d1fa      	bne.n	8009e64 <acc_dll_check_direct_leakage+0xa8>
 8009e6e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8009e72:	42ab      	cmp	r3, r5
 8009e74:	d81f      	bhi.n	8009eb6 <acc_dll_check_direct_leakage+0xfa>
 8009e76:	2001      	movs	r0, #1
 8009e78:	b004      	add	sp, #16
 8009e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e7e:	4b17      	ldr	r3, [pc, #92]	; (8009edc <acc_dll_check_direct_leakage+0x120>)
 8009e80:	4a17      	ldr	r2, [pc, #92]	; (8009ee0 <acc_dll_check_direct_leakage+0x124>)
 8009e82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e84:	4917      	ldr	r1, [pc, #92]	; (8009ee4 <acc_dll_check_direct_leakage+0x128>)
 8009e86:	2000      	movs	r0, #0
 8009e88:	4798      	blx	r3
 8009e8a:	2000      	movs	r0, #0
 8009e8c:	b004      	add	sp, #16
 8009e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e92:	f7fb fcc5 	bl	8005820 <acc_rss_integration_log_level>
 8009e96:	2803      	cmp	r0, #3
 8009e98:	d909      	bls.n	8009eae <acc_dll_check_direct_leakage+0xf2>
 8009e9a:	e9cd 5801 	strd	r5, r8, [sp, #4]
 8009e9e:	4a0f      	ldr	r2, [pc, #60]	; (8009edc <acc_dll_check_direct_leakage+0x120>)
 8009ea0:	9400      	str	r4, [sp, #0]
 8009ea2:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8009ea4:	490f      	ldr	r1, [pc, #60]	; (8009ee4 <acc_dll_check_direct_leakage+0x128>)
 8009ea6:	4a10      	ldr	r2, [pc, #64]	; (8009ee8 <acc_dll_check_direct_leakage+0x12c>)
 8009ea8:	463b      	mov	r3, r7
 8009eaa:	2004      	movs	r0, #4
 8009eac:	47a0      	blx	r4
 8009eae:	2000      	movs	r0, #0
 8009eb0:	b004      	add	sp, #16
 8009eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009eb6:	f7fb fcb3 	bl	8005820 <acc_rss_integration_log_level>
 8009eba:	2803      	cmp	r0, #3
 8009ebc:	d9f7      	bls.n	8009eae <acc_dll_check_direct_leakage+0xf2>
 8009ebe:	4a07      	ldr	r2, [pc, #28]	; (8009edc <acc_dll_check_direct_leakage+0x120>)
 8009ec0:	9500      	str	r5, [sp, #0]
 8009ec2:	4623      	mov	r3, r4
 8009ec4:	2004      	movs	r0, #4
 8009ec6:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8009ec8:	4906      	ldr	r1, [pc, #24]	; (8009ee4 <acc_dll_check_direct_leakage+0x128>)
 8009eca:	4a08      	ldr	r2, [pc, #32]	; (8009eec <acc_dll_check_direct_leakage+0x130>)
 8009ecc:	47a0      	blx	r4
 8009ece:	2000      	movs	r0, #0
 8009ed0:	e7d2      	b.n	8009e78 <acc_dll_check_direct_leakage+0xbc>
 8009ed2:	bf00      	nop
 8009ed4:	cccccccd 	.word	0xcccccccd
 8009ed8:	aaaaaaab 	.word	0xaaaaaaab
 8009edc:	200004c0 	.word	0x200004c0
 8009ee0:	0800fc24 	.word	0x0800fc24
 8009ee4:	0800fc08 	.word	0x0800fc08
 8009ee8:	0800fbac 	.word	0x0800fbac
 8009eec:	0800fc34 	.word	0x0800fc34

08009ef0 <acc_dll_dly_coarse_priority_sort>:
 8009ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ef4:	b084      	sub	sp, #16
 8009ef6:	2800      	cmp	r0, #0
 8009ef8:	f000 80ad 	beq.w	800a056 <acc_dll_dly_coarse_priority_sort+0x166>
 8009efc:	280c      	cmp	r0, #12
 8009efe:	f200 80a6 	bhi.w	800a04e <acc_dll_dly_coarse_priority_sort+0x15e>
 8009f02:	2400      	movs	r4, #0
 8009f04:	ed9f 4a56 	vldr	s8, [pc, #344]	; 800a060 <acc_dll_dly_coarse_priority_sort+0x170>
 8009f08:	eddf 4a56 	vldr	s9, [pc, #344]	; 800a064 <acc_dll_dly_coarse_priority_sort+0x174>
 8009f0c:	ed9f 6a56 	vldr	s12, [pc, #344]	; 800a068 <acc_dll_dly_coarse_priority_sort+0x178>
 8009f10:	ed9f 5a56 	vldr	s10, [pc, #344]	; 800a06c <acc_dll_dly_coarse_priority_sort+0x17c>
 8009f14:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a070 <acc_dll_dly_coarse_priority_sort+0x180>
 8009f18:	4626      	mov	r6, r4
 8009f1a:	f10d 0e04 	add.w	lr, sp, #4
 8009f1e:	f102 3cff 	add.w	ip, r2, #4294967295
 8009f22:	460d      	mov	r5, r1
 8009f24:	1e47      	subs	r7, r0, #1
 8009f26:	f240 5813 	movw	r8, #1299	; 0x513
 8009f2a:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 8009f2e:	2c00      	cmp	r4, #0
 8009f30:	d067      	beq.n	800a002 <acc_dll_dly_coarse_priority_sort+0x112>
 8009f32:	42bc      	cmp	r4, r7
 8009f34:	d016      	beq.n	8009f64 <acc_dll_dly_coarse_priority_sort+0x74>
 8009f36:	f935 ac02 	ldrsh.w	sl, [r5, #-2]
 8009f3a:	f9b5 3000 	ldrsh.w	r3, [r5]
 8009f3e:	459a      	cmp	sl, r3
 8009f40:	dd18      	ble.n	8009f74 <acc_dll_dly_coarse_priority_sort+0x84>
 8009f42:	f9b5 9002 	ldrsh.w	r9, [r5, #2]
 8009f46:	454b      	cmp	r3, r9
 8009f48:	dd14      	ble.n	8009f74 <acc_dll_dly_coarse_priority_sort+0x84>
 8009f4a:	45c2      	cmp	sl, r8
 8009f4c:	dc12      	bgt.n	8009f74 <acc_dll_dly_coarse_priority_sort+0x84>
 8009f4e:	4543      	cmp	r3, r8
 8009f50:	dc10      	bgt.n	8009f74 <acc_dll_dly_coarse_priority_sort+0x84>
 8009f52:	eba9 090a 	sub.w	r9, r9, sl
 8009f56:	ee07 9a90 	vmov	s15, r9
 8009f5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009f5e:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8009f62:	e05e      	b.n	800a022 <acc_dll_dly_coarse_priority_sort+0x132>
 8009f64:	f935 9c02 	ldrsh.w	r9, [r5, #-2]
 8009f68:	f9b5 3000 	ldrsh.w	r3, [r5]
 8009f6c:	4599      	cmp	r9, r3
 8009f6e:	dd01      	ble.n	8009f74 <acc_dll_dly_coarse_priority_sort+0x84>
 8009f70:	45c1      	cmp	r9, r8
 8009f72:	dd65      	ble.n	800a040 <acc_dll_dly_coarse_priority_sort+0x150>
 8009f74:	eef0 6a46 	vmov.f32	s13, s12
 8009f78:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	bfb8      	it	lt
 8009f80:	425b      	neglt	r3, r3
 8009f82:	ee07 3a90 	vmov	s15, r3
 8009f86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009f8a:	3401      	adds	r4, #1
 8009f8c:	ee87 7a85 	vdiv.f32	s14, s15, s10
 8009f90:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8009f94:	b2e6      	uxtb	r6, r4
 8009f96:	42b0      	cmp	r0, r6
 8009f98:	f105 0502 	add.w	r5, r5, #2
 8009f9c:	ee67 7a25 	vmul.f32	s15, s14, s11
 8009fa0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fa4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009fa8:	ee17 3a90 	vmov	r3, s15
 8009fac:	f80e 3b01 	strb.w	r3, [lr], #1
 8009fb0:	d8bd      	bhi.n	8009f2e <acc_dll_dly_coarse_priority_sort+0x3e>
 8009fb2:	3802      	subs	r0, #2
 8009fb4:	f102 0c01 	add.w	ip, r2, #1
 8009fb8:	fa5f fe87 	uxtb.w	lr, r7
 8009fbc:	fa5c f780 	uxtab	r7, ip, r0
 8009fc0:	eba7 0e0e 	sub.w	lr, r7, lr
 8009fc4:	45be      	cmp	lr, r7
 8009fc6:	d019      	beq.n	8009ffc <acc_dll_dly_coarse_priority_sort+0x10c>
 8009fc8:	4613      	mov	r3, r2
 8009fca:	2400      	movs	r4, #0
 8009fcc:	7819      	ldrb	r1, [r3, #0]
 8009fce:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8009fd2:	ad04      	add	r5, sp, #16
 8009fd4:	186e      	adds	r6, r5, r1
 8009fd6:	4405      	add	r5, r0
 8009fd8:	f816 6c0c 	ldrb.w	r6, [r6, #-12]
 8009fdc:	f815 5c0c 	ldrb.w	r5, [r5, #-12]
 8009fe0:	42ae      	cmp	r6, r5
 8009fe2:	d904      	bls.n	8009fee <acc_dll_dly_coarse_priority_sort+0xfe>
 8009fe4:	3401      	adds	r4, #1
 8009fe6:	b2e4      	uxtb	r4, r4
 8009fe8:	f803 0c01 	strb.w	r0, [r3, #-1]
 8009fec:	7019      	strb	r1, [r3, #0]
 8009fee:	429f      	cmp	r7, r3
 8009ff0:	d1ec      	bne.n	8009fcc <acc_dll_dly_coarse_priority_sort+0xdc>
 8009ff2:	45bc      	cmp	ip, r7
 8009ff4:	d002      	beq.n	8009ffc <acc_dll_dly_coarse_priority_sort+0x10c>
 8009ff6:	3f01      	subs	r7, #1
 8009ff8:	2c00      	cmp	r4, #0
 8009ffa:	d1e3      	bne.n	8009fc4 <acc_dll_dly_coarse_priority_sort+0xd4>
 8009ffc:	b004      	add	sp, #16
 8009ffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a002:	f9b1 9000 	ldrsh.w	r9, [r1]
 800a006:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800a00a:	4599      	cmp	r9, r3
 800a00c:	dd13      	ble.n	800a036 <acc_dll_dly_coarse_priority_sort+0x146>
 800a00e:	45c1      	cmp	r9, r8
 800a010:	dc11      	bgt.n	800a036 <acc_dll_dly_coarse_priority_sort+0x146>
 800a012:	eba3 0309 	sub.w	r3, r3, r9
 800a016:	ee07 3a90 	vmov	s15, r3
 800a01a:	f9b5 3000 	ldrsh.w	r3, [r5]
 800a01e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a022:	eef4 7ac4 	vcmpe.f32	s15, s8
 800a026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a02a:	bf54      	ite	pl
 800a02c:	eef0 6a46 	vmovpl.f32	s13, s12
 800a030:	eef0 6a64 	vmovmi.f32	s13, s9
 800a034:	e7a0      	b.n	8009f78 <acc_dll_dly_coarse_priority_sort+0x88>
 800a036:	f9b5 3000 	ldrsh.w	r3, [r5]
 800a03a:	eef0 6a46 	vmov.f32	s13, s12
 800a03e:	e79b      	b.n	8009f78 <acc_dll_dly_coarse_priority_sort+0x88>
 800a040:	eba3 0909 	sub.w	r9, r3, r9
 800a044:	ee07 9a90 	vmov	s15, r9
 800a048:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a04c:	e7e9      	b.n	800a022 <acc_dll_dly_coarse_priority_sort+0x132>
 800a04e:	4809      	ldr	r0, [pc, #36]	; (800a074 <acc_dll_dly_coarse_priority_sort+0x184>)
 800a050:	211f      	movs	r1, #31
 800a052:	f7fd fe09 	bl	8007c68 <acc_assert_fail>
 800a056:	4807      	ldr	r0, [pc, #28]	; (800a074 <acc_dll_dly_coarse_priority_sort+0x184>)
 800a058:	211a      	movs	r1, #26
 800a05a:	f7fd fe05 	bl	8007c68 <acc_assert_fail>
 800a05e:	bf00      	nop
 800a060:	c2c80000 	.word	0xc2c80000
 800a064:	00000000 	.word	0x00000000
 800a068:	42480000 	.word	0x42480000
 800a06c:	447a0000 	.word	0x447a0000
 800a070:	42c80000 	.word	0x42c80000
 800a074:	0800fc74 	.word	0x0800fc74

0800a078 <acc_dll_plateau_finder>:
 800a078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a07c:	b0af      	sub	sp, #188	; 0xbc
 800a07e:	2819      	cmp	r0, #25
 800a080:	9104      	str	r1, [sp, #16]
 800a082:	f200 8226 	bhi.w	800a4d2 <acc_dll_plateau_finder+0x45a>
 800a086:	2801      	cmp	r0, #1
 800a088:	4683      	mov	fp, r0
 800a08a:	4615      	mov	r5, r2
 800a08c:	469a      	mov	sl, r3
 800a08e:	f240 8217 	bls.w	800a4c0 <acc_dll_plateau_finder+0x448>
 800a092:	f1a0 0902 	sub.w	r9, r0, #2
 800a096:	2100      	movs	r1, #0
 800a098:	fa1f f989 	uxth.w	r9, r9
 800a09c:	2301      	movs	r3, #1
 800a09e:	ed9f 7ad2 	vldr	s14, [pc, #840]	; 800a3e8 <acc_dll_plateau_finder+0x370>
 800a0a2:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a0a6:	9205      	str	r2, [sp, #20]
 800a0a8:	f109 0902 	add.w	r9, r9, #2
 800a0ac:	460c      	mov	r4, r1
 800a0ae:	460e      	mov	r6, r1
 800a0b0:	461d      	mov	r5, r3
 800a0b2:	e006      	b.n	800a0c2 <acc_dll_plateau_finder+0x4a>
 800a0b4:	f10b 32ff 	add.w	r2, fp, #4294967295
 800a0b8:	42aa      	cmp	r2, r5
 800a0ba:	d019      	beq.n	800a0f0 <acc_dll_plateau_finder+0x78>
 800a0bc:	3501      	adds	r5, #1
 800a0be:	45a9      	cmp	r9, r5
 800a0c0:	d04b      	beq.n	800a15a <acc_dll_plateau_finder+0xe2>
 800a0c2:	f8b8 2000 	ldrh.w	r2, [r8]
 800a0c6:	f838 0f02 	ldrh.w	r0, [r8, #2]!
 800a0ca:	ee07 2a90 	vmov	s15, r2
 800a0ce:	4282      	cmp	r2, r0
 800a0d0:	bf34      	ite	cc
 800a0d2:	1a82      	subcc	r2, r0, r2
 800a0d4:	1a12      	subcs	r2, r2, r0
 800a0d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a0da:	b2af      	uxth	r7, r5
 800a0dc:	b292      	uxth	r2, r2
 800a0de:	3401      	adds	r4, #1
 800a0e0:	4439      	add	r1, r7
 800a0e2:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 800a0e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a0ea:	b2a4      	uxth	r4, r4
 800a0ec:	b289      	uxth	r1, r1
 800a0ee:	d9e1      	bls.n	800a0b4 <acc_dll_plateau_finder+0x3c>
 800a0f0:	2c02      	cmp	r4, #2
 800a0f2:	f240 8191 	bls.w	800a418 <acc_dll_plateau_finder+0x3a0>
 800a0f6:	ee07 1a90 	vmov	s15, r1
 800a0fa:	eef8 5a67 	vcvt.f32.u32	s11, s15
 800a0fe:	ee07 4a90 	vmov	s15, r4
 800a102:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a106:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800a10a:	eec5 7aa6 	vdiv.f32	s15, s11, s13
 800a10e:	ab2e      	add	r3, sp, #184	; 0xb8
 800a110:	eb03 0046 	add.w	r0, r3, r6, lsl #1
 800a114:	3501      	adds	r5, #1
 800a116:	f106 0c01 	add.w	ip, r6, #1
 800a11a:	2100      	movs	r1, #0
 800a11c:	45a9      	cmp	r9, r5
 800a11e:	f820 4c34 	strh.w	r4, [r0, #-52]
 800a122:	f820 7c9c 	strh.w	r7, [r0, #-156]
 800a126:	460c      	mov	r4, r1
 800a128:	eec7 6a06 	vdiv.f32	s13, s14, s12
 800a12c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a130:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a134:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800a138:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a13c:	ee16 3a90 	vmov	r3, s13
 800a140:	ee17 2a90 	vmov	r2, s15
 800a144:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800a148:	f82a 2016 	strh.w	r2, [sl, r6, lsl #1]
 800a14c:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 800a3e8 <acc_dll_plateau_finder+0x370>
 800a150:	f820 3c68 	strh.w	r3, [r0, #-104]
 800a154:	fa1f f68c 	uxth.w	r6, ip
 800a158:	d1b3      	bne.n	800a0c2 <acc_dll_plateau_finder+0x4a>
 800a15a:	9d05      	ldr	r5, [sp, #20]
 800a15c:	f7fb fb60 	bl	8005820 <acc_rss_integration_log_level>
 800a160:	2803      	cmp	r0, #3
 800a162:	f200 817f 	bhi.w	800a464 <acc_dll_plateau_finder+0x3ec>
 800a166:	b33e      	cbz	r6, 800a1b8 <acc_dll_plateau_finder+0x140>
 800a168:	f8df 929c 	ldr.w	r9, [pc, #668]	; 800a408 <acc_dll_plateau_finder+0x390>
 800a16c:	4c9f      	ldr	r4, [pc, #636]	; (800a3ec <acc_dll_plateau_finder+0x374>)
 800a16e:	4fa0      	ldr	r7, [pc, #640]	; (800a3f0 <acc_dll_plateau_finder+0x378>)
 800a170:	f04f 0b00 	mov.w	fp, #0
 800a174:	46a8      	mov	r8, r5
 800a176:	f7fb fb53 	bl	8005820 <acc_rss_integration_log_level>
 800a17a:	2803      	cmp	r0, #3
 800a17c:	d915      	bls.n	800a1aa <acc_dll_plateau_finder+0x132>
 800a17e:	a914      	add	r1, sp, #80	; 0x50
 800a180:	aa21      	add	r2, sp, #132	; 0x84
 800a182:	ab07      	add	r3, sp, #28
 800a184:	f831 001b 	ldrh.w	r0, [r1, fp, lsl #1]
 800a188:	f832 101b 	ldrh.w	r1, [r2, fp, lsl #1]
 800a18c:	f833 201b 	ldrh.w	r2, [r3, fp, lsl #1]
 800a190:	f83a 301b 	ldrh.w	r3, [sl, fp, lsl #1]
 800a194:	e9cd 1002 	strd	r1, r0, [sp, #8]
 800a198:	e9cd 2300 	strd	r2, r3, [sp]
 800a19c:	4639      	mov	r1, r7
 800a19e:	f8d9 5034 	ldr.w	r5, [r9, #52]	; 0x34
 800a1a2:	465b      	mov	r3, fp
 800a1a4:	4622      	mov	r2, r4
 800a1a6:	2004      	movs	r0, #4
 800a1a8:	47a8      	blx	r5
 800a1aa:	f10b 0b01 	add.w	fp, fp, #1
 800a1ae:	fa1f f38b 	uxth.w	r3, fp
 800a1b2:	42b3      	cmp	r3, r6
 800a1b4:	d3df      	bcc.n	800a176 <acc_dll_plateau_finder+0xfe>
 800a1b6:	4645      	mov	r5, r8
 800a1b8:	9b04      	ldr	r3, [sp, #16]
 800a1ba:	f8b3 b000 	ldrh.w	fp, [r3]
 800a1be:	f248 73cf 	movw	r3, #34767	; 0x87cf
 800a1c2:	459b      	cmp	fp, r3
 800a1c4:	f240 8161 	bls.w	800a48a <acc_dll_plateau_finder+0x412>
 800a1c8:	f5ab 4300 	sub.w	r3, fp, #32768	; 0x8000
 800a1cc:	ee07 3a90 	vmov	s15, r3
 800a1d0:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800a3f4 <acc_dll_plateau_finder+0x37c>
 800a1d4:	ed9f 5a88 	vldr	s10, [pc, #544]	; 800a3f8 <acc_dll_plateau_finder+0x380>
 800a1d8:	eddf 6a88 	vldr	s13, [pc, #544]	; 800a3fc <acc_dll_plateau_finder+0x384>
 800a1dc:	eddf 5a88 	vldr	s11, [pc, #544]	; 800a400 <acc_dll_plateau_finder+0x388>
 800a1e0:	ed9f 6a88 	vldr	s12, [pc, #544]	; 800a404 <acc_dll_plateau_finder+0x38c>
 800a1e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a1e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a1ec:	ee67 7a85 	vmul.f32	s15, s15, s10
 800a1f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a1f4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800a1f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a1fc:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800a200:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a204:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a208:	ee17 3a90 	vmov	r3, s15
 800a20c:	b29c      	uxth	r4, r3
 800a20e:	f7fb fb07 	bl	8005820 <acc_rss_integration_log_level>
 800a212:	2803      	cmp	r0, #3
 800a214:	f200 812e 	bhi.w	800a474 <acc_dll_plateau_finder+0x3fc>
 800a218:	2e00      	cmp	r6, #0
 800a21a:	f000 814b 	beq.w	800a4b4 <acc_dll_plateau_finder+0x43c>
 800a21e:	f04f 0900 	mov.w	r9, #0
 800a222:	46c8      	mov	r8, r9
 800a224:	464b      	mov	r3, r9
 800a226:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 800a22a:	4627      	mov	r7, r4
 800a22c:	e010      	b.n	800a250 <acc_dll_plateau_finder+0x1d8>
 800a22e:	f5ab 62fa 	sub.w	r2, fp, #2000	; 0x7d0
 800a232:	4294      	cmp	r4, r2
 800a234:	f200 8109 	bhi.w	800a44a <acc_dll_plateau_finder+0x3d2>
 800a238:	f108 0201 	add.w	r2, r8, #1
 800a23c:	f825 3018 	strh.w	r3, [r5, r8, lsl #1]
 800a240:	fa1f f882 	uxth.w	r8, r2
 800a244:	f109 0901 	add.w	r9, r9, #1
 800a248:	fa1f f389 	uxth.w	r3, r9
 800a24c:	429e      	cmp	r6, r3
 800a24e:	d916      	bls.n	800a27e <acc_dll_plateau_finder+0x206>
 800a250:	f83a 4b02 	ldrh.w	r4, [sl], #2
 800a254:	f241 3287 	movw	r2, #4999	; 0x1387
 800a258:	4294      	cmp	r4, r2
 800a25a:	d8e8      	bhi.n	800a22e <acc_dll_plateau_finder+0x1b6>
 800a25c:	f7fb fae0 	bl	8005820 <acc_rss_integration_log_level>
 800a260:	2803      	cmp	r0, #3
 800a262:	d9ef      	bls.n	800a244 <acc_dll_plateau_finder+0x1cc>
 800a264:	4a68      	ldr	r2, [pc, #416]	; (800a408 <acc_dll_plateau_finder+0x390>)
 800a266:	4962      	ldr	r1, [pc, #392]	; (800a3f0 <acc_dll_plateau_finder+0x378>)
 800a268:	4623      	mov	r3, r4
 800a26a:	2004      	movs	r0, #4
 800a26c:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800a26e:	4a67      	ldr	r2, [pc, #412]	; (800a40c <acc_dll_plateau_finder+0x394>)
 800a270:	f109 0901 	add.w	r9, r9, #1
 800a274:	47a0      	blx	r4
 800a276:	fa1f f389 	uxth.w	r3, r9
 800a27a:	429e      	cmp	r6, r3
 800a27c:	d8e8      	bhi.n	800a250 <acc_dll_plateau_finder+0x1d8>
 800a27e:	f1b8 0f01 	cmp.w	r8, #1
 800a282:	463c      	mov	r4, r7
 800a284:	f240 8112 	bls.w	800a4ac <acc_dll_plateau_finder+0x434>
 800a288:	f1a8 0a02 	sub.w	sl, r8, #2
 800a28c:	fa0f fe8a 	sxth.w	lr, sl
 800a290:	f10e 0901 	add.w	r9, lr, #1
 800a294:	fa1f fa8a 	uxth.w	sl, sl
 800a298:	eb05 0949 	add.w	r9, r5, r9, lsl #1
 800a29c:	46ac      	mov	ip, r5
 800a29e:	f1be 0f00 	cmp.w	lr, #0
 800a2a2:	db23      	blt.n	800a2ec <acc_dll_plateau_finder+0x274>
 800a2a4:	4649      	mov	r1, r9
 800a2a6:	4670      	mov	r0, lr
 800a2a8:	2500      	movs	r5, #0
 800a2aa:	f831 6d02 	ldrh.w	r6, [r1, #-2]!
 800a2ae:	ab2e      	add	r3, sp, #184	; 0xb8
 800a2b0:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 800a2b4:	884f      	ldrh	r7, [r1, #2]
 800a2b6:	f833 2c68 	ldrh.w	r2, [r3, #-104]
 800a2ba:	ab2e      	add	r3, sp, #184	; 0xb8
 800a2bc:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 800a2c0:	42a2      	cmp	r2, r4
 800a2c2:	f833 3c68 	ldrh.w	r3, [r3, #-104]
 800a2c6:	bf8c      	ite	hi
 800a2c8:	1b12      	subhi	r2, r2, r4
 800a2ca:	1aa2      	subls	r2, r4, r2
 800a2cc:	42a3      	cmp	r3, r4
 800a2ce:	bf8c      	ite	hi
 800a2d0:	1b1b      	subhi	r3, r3, r4
 800a2d2:	1ae3      	subls	r3, r4, r3
 800a2d4:	b292      	uxth	r2, r2
 800a2d6:	b29b      	uxth	r3, r3
 800a2d8:	429a      	cmp	r2, r3
 800a2da:	d902      	bls.n	800a2e2 <acc_dll_plateau_finder+0x26a>
 800a2dc:	800f      	strh	r7, [r1, #0]
 800a2de:	804e      	strh	r6, [r1, #2]
 800a2e0:	2501      	movs	r5, #1
 800a2e2:	3801      	subs	r0, #1
 800a2e4:	0403      	lsls	r3, r0, #16
 800a2e6:	d5e0      	bpl.n	800a2aa <acc_dll_plateau_finder+0x232>
 800a2e8:	2d00      	cmp	r5, #0
 800a2ea:	d1d8      	bne.n	800a29e <acc_dll_plateau_finder+0x226>
 800a2ec:	f8bc 3000 	ldrh.w	r3, [ip]
 800a2f0:	aa2e      	add	r2, sp, #184	; 0xb8
 800a2f2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800a2f6:	4665      	mov	r5, ip
 800a2f8:	1ca8      	adds	r0, r5, #2
 800a2fa:	f833 1c68 	ldrh.w	r1, [r3, #-104]
 800a2fe:	eb00 004a 	add.w	r0, r0, sl, lsl #1
 800a302:	4662      	mov	r2, ip
 800a304:	f04f 0a01 	mov.w	sl, #1
 800a308:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 800a30c:	ac2e      	add	r4, sp, #184	; 0xb8
 800a30e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800a312:	f833 3c68 	ldrh.w	r3, [r3, #-104]
 800a316:	428b      	cmp	r3, r1
 800a318:	bf8c      	ite	hi
 800a31a:	1a5b      	subhi	r3, r3, r1
 800a31c:	1acb      	subls	r3, r1, r3
 800a31e:	b29b      	uxth	r3, r3
 800a320:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a324:	bf3c      	itt	cc
 800a326:	f10a 0a01 	addcc.w	sl, sl, #1
 800a32a:	fa1f fa8a 	uxthcc.w	sl, sl
 800a32e:	4290      	cmp	r0, r2
 800a330:	d1ea      	bne.n	800a308 <acc_dll_plateau_finder+0x290>
 800a332:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 800a408 <acc_dll_plateau_finder+0x390>
 800a336:	4f36      	ldr	r7, [pc, #216]	; (800a410 <acc_dll_plateau_finder+0x398>)
 800a338:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a33c:	f1ba 0f00 	cmp.w	sl, #0
 800a340:	d031      	beq.n	800a3a6 <acc_dll_plateau_finder+0x32e>
 800a342:	2400      	movs	r4, #0
 800a344:	4e2a      	ldr	r6, [pc, #168]	; (800a3f0 <acc_dll_plateau_finder+0x378>)
 800a346:	46a6      	mov	lr, r4
 800a348:	4622      	mov	r2, r4
 800a34a:	e004      	b.n	800a356 <acc_dll_plateau_finder+0x2de>
 800a34c:	3401      	adds	r4, #1
 800a34e:	b2a4      	uxth	r4, r4
 800a350:	4554      	cmp	r4, sl
 800a352:	4622      	mov	r2, r4
 800a354:	d224      	bcs.n	800a3a0 <acc_dll_plateau_finder+0x328>
 800a356:	0053      	lsls	r3, r2, #1
 800a358:	3302      	adds	r3, #2
 800a35a:	f835 1012 	ldrh.w	r1, [r5, r2, lsl #1]
 800a35e:	5ae8      	ldrh	r0, [r5, r3]
 800a360:	f10d 0cb8 	add.w	ip, sp, #184	; 0xb8
 800a364:	eb0c 0b41 	add.w	fp, ip, r1, lsl #1
 800a368:	eb0c 0c40 	add.w	ip, ip, r0, lsl #1
 800a36c:	f83b bc34 	ldrh.w	fp, [fp, #-52]
 800a370:	f83c cc34 	ldrh.w	ip, [ip, #-52]
 800a374:	45e3      	cmp	fp, ip
 800a376:	d2e9      	bcs.n	800a34c <acc_dll_plateau_finder+0x2d4>
 800a378:	f825 0012 	strh.w	r0, [r5, r2, lsl #1]
 800a37c:	52e9      	strh	r1, [r5, r3]
 800a37e:	f7fb fa4f 	bl	8005820 <acc_rss_integration_log_level>
 800a382:	2803      	cmp	r0, #3
 800a384:	d97e      	bls.n	800a484 <acc_dll_plateau_finder+0x40c>
 800a386:	3401      	adds	r4, #1
 800a388:	463a      	mov	r2, r7
 800a38a:	b2a4      	uxth	r4, r4
 800a38c:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
 800a390:	4631      	mov	r1, r6
 800a392:	2004      	movs	r0, #4
 800a394:	4798      	blx	r3
 800a396:	4554      	cmp	r4, sl
 800a398:	f04f 0e01 	mov.w	lr, #1
 800a39c:	4622      	mov	r2, r4
 800a39e:	d3da      	bcc.n	800a356 <acc_dll_plateau_finder+0x2de>
 800a3a0:	f1be 0f00 	cmp.w	lr, #0
 800a3a4:	d1ca      	bne.n	800a33c <acc_dll_plateau_finder+0x2c4>
 800a3a6:	f8df a060 	ldr.w	sl, [pc, #96]	; 800a408 <acc_dll_plateau_finder+0x390>
 800a3aa:	f8df 9068 	ldr.w	r9, [pc, #104]	; 800a414 <acc_dll_plateau_finder+0x39c>
 800a3ae:	4f10      	ldr	r7, [pc, #64]	; (800a3f0 <acc_dll_plateau_finder+0x378>)
 800a3b0:	2400      	movs	r4, #0
 800a3b2:	f7fb fa35 	bl	8005820 <acc_rss_integration_log_level>
 800a3b6:	2803      	cmp	r0, #3
 800a3b8:	d90d      	bls.n	800a3d6 <acc_dll_plateau_finder+0x35e>
 800a3ba:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
 800a3be:	aa2e      	add	r2, sp, #184	; 0xb8
 800a3c0:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800a3c4:	4639      	mov	r1, r7
 800a3c6:	f832 2c68 	ldrh.w	r2, [r2, #-104]
 800a3ca:	9200      	str	r2, [sp, #0]
 800a3cc:	f8da 6034 	ldr.w	r6, [sl, #52]	; 0x34
 800a3d0:	464a      	mov	r2, r9
 800a3d2:	2004      	movs	r0, #4
 800a3d4:	47b0      	blx	r6
 800a3d6:	3401      	adds	r4, #1
 800a3d8:	b2a3      	uxth	r3, r4
 800a3da:	4598      	cmp	r8, r3
 800a3dc:	d8e9      	bhi.n	800a3b2 <acc_dll_plateau_finder+0x33a>
 800a3de:	4640      	mov	r0, r8
 800a3e0:	b02f      	add	sp, #188	; 0xbc
 800a3e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3e6:	bf00      	nop
 800a3e8:	00000000 	.word	0x00000000
 800a3ec:	0800fd10 	.word	0x0800fd10
 800a3f0:	0800fc94 	.word	0x0800fc94
 800a3f4:	3f99999a 	.word	0x3f99999a
 800a3f8:	37800000 	.word	0x37800000
 800a3fc:	3f866666 	.word	0x3f866666
 800a400:	47800000 	.word	0x47800000
 800a404:	47000000 	.word	0x47000000
 800a408:	200004c0 	.word	0x200004c0
 800a40c:	0800fd8c 	.word	0x0800fd8c
 800a410:	0800fdec 	.word	0x0800fdec
 800a414:	0800fe20 	.word	0x0800fe20
 800a418:	f7fb fa02 	bl	8005820 <acc_rss_integration_log_level>
 800a41c:	2803      	cmp	r0, #3
 800a41e:	d90f      	bls.n	800a440 <acc_dll_plateau_finder+0x3c8>
 800a420:	9401      	str	r4, [sp, #4]
 800a422:	f838 2c02 	ldrh.w	r2, [r8, #-2]
 800a426:	4b2d      	ldr	r3, [pc, #180]	; (800a4dc <acc_dll_plateau_finder+0x464>)
 800a428:	9200      	str	r2, [sp, #0]
 800a42a:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 800a42c:	492c      	ldr	r1, [pc, #176]	; (800a4e0 <acc_dll_plateau_finder+0x468>)
 800a42e:	4a2d      	ldr	r2, [pc, #180]	; (800a4e4 <acc_dll_plateau_finder+0x46c>)
 800a430:	462b      	mov	r3, r5
 800a432:	2004      	movs	r0, #4
 800a434:	2400      	movs	r4, #0
 800a436:	47b8      	blx	r7
 800a438:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800a4e8 <acc_dll_plateau_finder+0x470>
 800a43c:	4621      	mov	r1, r4
 800a43e:	e63d      	b.n	800a0bc <acc_dll_plateau_finder+0x44>
 800a440:	2100      	movs	r1, #0
 800a442:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800a4e8 <acc_dll_plateau_finder+0x470>
 800a446:	460c      	mov	r4, r1
 800a448:	e638      	b.n	800a0bc <acc_dll_plateau_finder+0x44>
 800a44a:	f7fb f9e9 	bl	8005820 <acc_rss_integration_log_level>
 800a44e:	2803      	cmp	r0, #3
 800a450:	f67f aef8 	bls.w	800a244 <acc_dll_plateau_finder+0x1cc>
 800a454:	4a21      	ldr	r2, [pc, #132]	; (800a4dc <acc_dll_plateau_finder+0x464>)
 800a456:	4922      	ldr	r1, [pc, #136]	; (800a4e0 <acc_dll_plateau_finder+0x468>)
 800a458:	4623      	mov	r3, r4
 800a45a:	2004      	movs	r0, #4
 800a45c:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800a45e:	4a23      	ldr	r2, [pc, #140]	; (800a4ec <acc_dll_plateau_finder+0x474>)
 800a460:	47a0      	blx	r4
 800a462:	e6ef      	b.n	800a244 <acc_dll_plateau_finder+0x1cc>
 800a464:	4633      	mov	r3, r6
 800a466:	491d      	ldr	r1, [pc, #116]	; (800a4dc <acc_dll_plateau_finder+0x464>)
 800a468:	4a21      	ldr	r2, [pc, #132]	; (800a4f0 <acc_dll_plateau_finder+0x478>)
 800a46a:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 800a46c:	491c      	ldr	r1, [pc, #112]	; (800a4e0 <acc_dll_plateau_finder+0x468>)
 800a46e:	2004      	movs	r0, #4
 800a470:	47a0      	blx	r4
 800a472:	e678      	b.n	800a166 <acc_dll_plateau_finder+0xee>
 800a474:	4b19      	ldr	r3, [pc, #100]	; (800a4dc <acc_dll_plateau_finder+0x464>)
 800a476:	4a1f      	ldr	r2, [pc, #124]	; (800a4f4 <acc_dll_plateau_finder+0x47c>)
 800a478:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 800a47a:	4919      	ldr	r1, [pc, #100]	; (800a4e0 <acc_dll_plateau_finder+0x468>)
 800a47c:	4623      	mov	r3, r4
 800a47e:	2004      	movs	r0, #4
 800a480:	47b8      	blx	r7
 800a482:	e6c9      	b.n	800a218 <acc_dll_plateau_finder+0x1a0>
 800a484:	f04f 0e01 	mov.w	lr, #1
 800a488:	e760      	b.n	800a34c <acc_dll_plateau_finder+0x2d4>
 800a48a:	f7fb f9c9 	bl	8005820 <acc_rss_integration_log_level>
 800a48e:	2803      	cmp	r0, #3
 800a490:	d910      	bls.n	800a4b4 <acc_dll_plateau_finder+0x43c>
 800a492:	4b12      	ldr	r3, [pc, #72]	; (800a4dc <acc_dll_plateau_finder+0x464>)
 800a494:	4a18      	ldr	r2, [pc, #96]	; (800a4f8 <acc_dll_plateau_finder+0x480>)
 800a496:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800a498:	4911      	ldr	r1, [pc, #68]	; (800a4e0 <acc_dll_plateau_finder+0x468>)
 800a49a:	465b      	mov	r3, fp
 800a49c:	2004      	movs	r0, #4
 800a49e:	47a0      	blx	r4
 800a4a0:	f04f 0800 	mov.w	r8, #0
 800a4a4:	4640      	mov	r0, r8
 800a4a6:	b02f      	add	sp, #188	; 0xbc
 800a4a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4ac:	f1b8 0f00 	cmp.w	r8, #0
 800a4b0:	f47f af79 	bne.w	800a3a6 <acc_dll_plateau_finder+0x32e>
 800a4b4:	f04f 0800 	mov.w	r8, #0
 800a4b8:	4640      	mov	r0, r8
 800a4ba:	b02f      	add	sp, #188	; 0xbc
 800a4bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4c0:	f7fb f9ae 	bl	8005820 <acc_rss_integration_log_level>
 800a4c4:	2803      	cmp	r0, #3
 800a4c6:	d801      	bhi.n	800a4cc <acc_dll_plateau_finder+0x454>
 800a4c8:	2600      	movs	r6, #0
 800a4ca:	e675      	b.n	800a1b8 <acc_dll_plateau_finder+0x140>
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	461e      	mov	r6, r3
 800a4d0:	e7c9      	b.n	800a466 <acc_dll_plateau_finder+0x3ee>
 800a4d2:	4803      	ldr	r0, [pc, #12]	; (800a4e0 <acc_dll_plateau_finder+0x468>)
 800a4d4:	2128      	movs	r1, #40	; 0x28
 800a4d6:	f7fd fbc7 	bl	8007c68 <acc_assert_fail>
 800a4da:	bf00      	nop
 800a4dc:	200004c0 	.word	0x200004c0
 800a4e0:	0800fc94 	.word	0x0800fc94
 800a4e4:	0800fca8 	.word	0x0800fca8
 800a4e8:	00000000 	.word	0x00000000
 800a4ec:	0800fdbc 	.word	0x0800fdbc
 800a4f0:	0800fcfc 	.word	0x0800fcfc
 800a4f4:	0800fd7c 	.word	0x0800fd7c
 800a4f8:	0800fd54 	.word	0x0800fd54

0800a4fc <acc_cpd_linear_sweep_load_program>:
 800a4fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a500:	ed2d 8b04 	vpush	{d8-d9}
 800a504:	4614      	mov	r4, r2
 800a506:	b08f      	sub	sp, #60	; 0x3c
 800a508:	461a      	mov	r2, r3
 800a50a:	4606      	mov	r6, r0
 800a50c:	460d      	mov	r5, r1
 800a50e:	ee08 0a90 	vmov	s17, r0
 800a512:	4601      	mov	r1, r0
 800a514:	469b      	mov	fp, r3
 800a516:	2016      	movs	r0, #22
 800a518:	23bc      	movs	r3, #188	; 0xbc
 800a51a:	f7fd fca3 	bl	8007e64 <acc_probes_execute_struct>
 800a51e:	ab0d      	add	r3, sp, #52	; 0x34
 800a520:	4622      	mov	r2, r4
 800a522:	9300      	str	r3, [sp, #0]
 800a524:	4629      	mov	r1, r5
 800a526:	4630      	mov	r0, r6
 800a528:	2400      	movs	r4, #0
 800a52a:	ab0c      	add	r3, sp, #48	; 0x30
 800a52c:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
 800a530:	f7fc ff66 	bl	8007400 <acc_sensor_protocol_r2_prepare_load>
 800a534:	900b      	str	r0, [sp, #44]	; 0x2c
 800a536:	b928      	cbnz	r0, 800a544 <acc_cpd_linear_sweep_load_program+0x48>
 800a538:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a53a:	b00f      	add	sp, #60	; 0x3c
 800a53c:	ecbd 8b04 	vpop	{d8-d9}
 800a540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a544:	f7fb f96c 	bl	8005820 <acc_rss_integration_log_level>
 800a548:	2803      	cmp	r0, #3
 800a54a:	ee09 5a10 	vmov	s18, r5
 800a54e:	d905      	bls.n	800a55c <acc_cpd_linear_sweep_load_program+0x60>
 800a550:	4b05      	ldr	r3, [pc, #20]	; (800a568 <acc_cpd_linear_sweep_load_program+0x6c>)
 800a552:	4a06      	ldr	r2, [pc, #24]	; (800a56c <acc_cpd_linear_sweep_load_program+0x70>)
 800a554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a556:	4906      	ldr	r1, [pc, #24]	; (800a570 <acc_cpd_linear_sweep_load_program+0x74>)
 800a558:	2004      	movs	r0, #4
 800a55a:	4798      	blx	r3
 800a55c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a55e:	ed9f 8a05 	vldr	s16, [pc, #20]	; 800a574 <acc_cpd_linear_sweep_load_program+0x78>
 800a562:	f04f 0a00 	mov.w	sl, #0
 800a566:	e07b      	b.n	800a660 <acc_cpd_linear_sweep_load_program+0x164>
 800a568:	200004c0 	.word	0x200004c0
 800a56c:	0800fe44 	.word	0x0800fe44
 800a570:	0800fe6c 	.word	0x0800fe6c
 800a574:	3751b717 	.word	0x3751b717
 800a578:	f002 f898 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800a57c:	2223      	movs	r2, #35	; 0x23
 800a57e:	2103      	movs	r1, #3
 800a580:	4603      	mov	r3, r0
 800a582:	e9cd 2100 	strd	r2, r1, [sp]
 800a586:	4620      	mov	r0, r4
 800a588:	4632      	mov	r2, r6
 800a58a:	4629      	mov	r1, r5
 800a58c:	f001 ff3e 	bl	800c40c <acc_confprogram_patch_offset>
 800a590:	f002 f88c 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800a594:	227d      	movs	r2, #125	; 0x7d
 800a596:	2100      	movs	r1, #0
 800a598:	4603      	mov	r3, r0
 800a59a:	e9cd 2100 	strd	r2, r1, [sp]
 800a59e:	4620      	mov	r0, r4
 800a5a0:	4632      	mov	r2, r6
 800a5a2:	4629      	mov	r1, r5
 800a5a4:	f001 ff32 	bl	800c40c <acc_confprogram_patch_offset>
 800a5a8:	f002 f880 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800a5ac:	2281      	movs	r2, #129	; 0x81
 800a5ae:	2101      	movs	r1, #1
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	e9cd 2100 	strd	r2, r1, [sp]
 800a5b6:	4620      	mov	r0, r4
 800a5b8:	4632      	mov	r2, r6
 800a5ba:	4629      	mov	r1, r5
 800a5bc:	f001 ff26 	bl	800c40c <acc_confprogram_patch_offset>
 800a5c0:	f002 f874 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800a5c4:	2102      	movs	r1, #2
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	2275      	movs	r2, #117	; 0x75
 800a5ca:	9101      	str	r1, [sp, #4]
 800a5cc:	4629      	mov	r1, r5
 800a5ce:	9200      	str	r2, [sp, #0]
 800a5d0:	4620      	mov	r0, r4
 800a5d2:	4632      	mov	r2, r6
 800a5d4:	f001 ff1a 	bl	800c40c <acc_confprogram_patch_offset>
 800a5d8:	f002 f868 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800a5dc:	f89b 20ac 	ldrb.w	r2, [fp, #172]	; 0xac
 800a5e0:	9201      	str	r2, [sp, #4]
 800a5e2:	2252      	movs	r2, #82	; 0x52
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	4629      	mov	r1, r5
 800a5e8:	9200      	str	r2, [sp, #0]
 800a5ea:	4620      	mov	r0, r4
 800a5ec:	4632      	mov	r2, r6
 800a5ee:	f001 ff0d 	bl	800c40c <acc_confprogram_patch_offset>
 800a5f2:	eddb 7a2c 	vldr	s15, [fp, #176]	; 0xb0
 800a5f6:	ee67 7a88 	vmul.f32	s15, s15, s16
 800a5fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a5fe:	ee17 7a90 	vmov	r7, s15
 800a602:	f002 f853 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800a606:	3f01      	subs	r7, #1
 800a608:	2268      	movs	r2, #104	; 0x68
 800a60a:	b2bf      	uxth	r7, r7
 800a60c:	4603      	mov	r3, r0
 800a60e:	4629      	mov	r1, r5
 800a610:	e9cd 2700 	strd	r2, r7, [sp]
 800a614:	4620      	mov	r0, r4
 800a616:	4632      	mov	r2, r6
 800a618:	f001 fef8 	bl	800c40c <acc_confprogram_patch_offset>
 800a61c:	f002 f846 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800a620:	f8db 20b4 	ldr.w	r2, [fp, #180]	; 0xb4
 800a624:	9201      	str	r2, [sp, #4]
 800a626:	2253      	movs	r2, #83	; 0x53
 800a628:	4603      	mov	r3, r0
 800a62a:	9200      	str	r2, [sp, #0]
 800a62c:	4629      	mov	r1, r5
 800a62e:	4632      	mov	r2, r6
 800a630:	4620      	mov	r0, r4
 800a632:	f001 feeb 	bl	800c40c <acc_confprogram_patch_offset>
 800a636:	f8db 30b4 	ldr.w	r3, [fp, #180]	; 0xb4
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	f040 8465 	bne.w	800af0a <acc_cpd_linear_sweep_load_program+0xa0e>
 800a640:	ee19 2a10 	vmov	r2, s18
 800a644:	464b      	mov	r3, r9
 800a646:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 800a64a:	ee18 0a90 	vmov	r0, s17
 800a64e:	f7fc fbe7 	bl	8006e20 <acc_sensor_r2_load_confmem>
 800a652:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a654:	f240 7211 	movw	r2, #1809	; 0x711
 800a658:	449a      	add	sl, r3
 800a65a:	4592      	cmp	sl, r2
 800a65c:	f200 8464 	bhi.w	800af28 <acc_cpd_linear_sweep_load_program+0xa2c>
 800a660:	f5ca 62e2 	rsb	r2, sl, #1808	; 0x710
 800a664:	3202      	adds	r2, #2
 800a666:	429a      	cmp	r2, r3
 800a668:	bf28      	it	cs
 800a66a:	461a      	movcs	r2, r3
 800a66c:	ea4f 035a 	mov.w	r3, sl, lsr #1
 800a670:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800a672:	9302      	str	r3, [sp, #8]
 800a674:	461d      	mov	r5, r3
 800a676:	4691      	mov	r9, r2
 800a678:	f002 f814 	bl	800c6a4 <acc_image_a111_r2c_sweep_get>
 800a67c:	ea4f 0259 	mov.w	r2, r9, lsr #1
 800a680:	4621      	mov	r1, r4
 800a682:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 800a686:	f001 ffaf 	bl	800c5e8 <acc_confprogram_copy>
 800a68a:	f002 f80f 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800a68e:	fa1f f689 	uxth.w	r6, r9
 800a692:	fa1f f58a 	uxth.w	r5, sl
 800a696:	f8db 2000 	ldr.w	r2, [fp]
 800a69a:	9201      	str	r2, [sp, #4]
 800a69c:	2750      	movs	r7, #80	; 0x50
 800a69e:	4603      	mov	r3, r0
 800a6a0:	4632      	mov	r2, r6
 800a6a2:	4629      	mov	r1, r5
 800a6a4:	4620      	mov	r0, r4
 800a6a6:	9700      	str	r7, [sp, #0]
 800a6a8:	f001 feb0 	bl	800c40c <acc_confprogram_patch_offset>
 800a6ac:	f001 fffe 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800a6b0:	274e      	movs	r7, #78	; 0x4e
 800a6b2:	f8db 2004 	ldr.w	r2, [fp, #4]
 800a6b6:	9201      	str	r2, [sp, #4]
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	4632      	mov	r2, r6
 800a6bc:	4629      	mov	r1, r5
 800a6be:	4620      	mov	r0, r4
 800a6c0:	9700      	str	r7, [sp, #0]
 800a6c2:	f001 fea3 	bl	800c40c <acc_confprogram_patch_offset>
 800a6c6:	f001 fff1 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800a6ca:	274f      	movs	r7, #79	; 0x4f
 800a6cc:	f8db 2008 	ldr.w	r2, [fp, #8]
 800a6d0:	9201      	str	r2, [sp, #4]
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	4632      	mov	r2, r6
 800a6d6:	4629      	mov	r1, r5
 800a6d8:	4620      	mov	r0, r4
 800a6da:	9700      	str	r7, [sp, #0]
 800a6dc:	f001 fe96 	bl	800c40c <acc_confprogram_patch_offset>
 800a6e0:	f001 ffe4 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800a6e4:	274c      	movs	r7, #76	; 0x4c
 800a6e6:	f8bb 200c 	ldrh.w	r2, [fp, #12]
 800a6ea:	9201      	str	r2, [sp, #4]
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	4632      	mov	r2, r6
 800a6f0:	4629      	mov	r1, r5
 800a6f2:	4620      	mov	r0, r4
 800a6f4:	9700      	str	r7, [sp, #0]
 800a6f6:	f001 fe89 	bl	800c40c <acc_confprogram_patch_offset>
 800a6fa:	f001 ffd7 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800a6fe:	2726      	movs	r7, #38	; 0x26
 800a700:	f8db 2010 	ldr.w	r2, [fp, #16]
 800a704:	9201      	str	r2, [sp, #4]
 800a706:	4603      	mov	r3, r0
 800a708:	4632      	mov	r2, r6
 800a70a:	4629      	mov	r1, r5
 800a70c:	4620      	mov	r0, r4
 800a70e:	9700      	str	r7, [sp, #0]
 800a710:	f001 fe7c 	bl	800c40c <acc_confprogram_patch_offset>
 800a714:	f001 ffca 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800a718:	2773      	movs	r7, #115	; 0x73
 800a71a:	f8db 2014 	ldr.w	r2, [fp, #20]
 800a71e:	9201      	str	r2, [sp, #4]
 800a720:	4603      	mov	r3, r0
 800a722:	4632      	mov	r2, r6
 800a724:	4629      	mov	r1, r5
 800a726:	4620      	mov	r0, r4
 800a728:	9700      	str	r7, [sp, #0]
 800a72a:	f001 fe6f 	bl	800c40c <acc_confprogram_patch_offset>
 800a72e:	f001 ffbd 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800a732:	2762      	movs	r7, #98	; 0x62
 800a734:	f8db 2018 	ldr.w	r2, [fp, #24]
 800a738:	9201      	str	r2, [sp, #4]
 800a73a:	4603      	mov	r3, r0
 800a73c:	4632      	mov	r2, r6
 800a73e:	4629      	mov	r1, r5
 800a740:	4620      	mov	r0, r4
 800a742:	9700      	str	r7, [sp, #0]
 800a744:	f001 fe62 	bl	800c40c <acc_confprogram_patch_offset>
 800a748:	f001 ffb0 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800a74c:	2737      	movs	r7, #55	; 0x37
 800a74e:	f8db 201c 	ldr.w	r2, [fp, #28]
 800a752:	9201      	str	r2, [sp, #4]
 800a754:	4603      	mov	r3, r0
 800a756:	4632      	mov	r2, r6
 800a758:	4629      	mov	r1, r5
 800a75a:	4620      	mov	r0, r4
 800a75c:	9700      	str	r7, [sp, #0]
 800a75e:	f001 fe55 	bl	800c40c <acc_confprogram_patch_offset>
 800a762:	f001 ffa3 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800a766:	2776      	movs	r7, #118	; 0x76
 800a768:	f8db 2020 	ldr.w	r2, [fp, #32]
 800a76c:	9201      	str	r2, [sp, #4]
 800a76e:	4603      	mov	r3, r0
 800a770:	4632      	mov	r2, r6
 800a772:	4629      	mov	r1, r5
 800a774:	4620      	mov	r0, r4
 800a776:	9700      	str	r7, [sp, #0]
 800a778:	f001 fe48 	bl	800c40c <acc_confprogram_patch_offset>
 800a77c:	f001 ff96 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800a780:	2769      	movs	r7, #105	; 0x69
 800a782:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 800a786:	9201      	str	r2, [sp, #4]
 800a788:	4603      	mov	r3, r0
 800a78a:	4632      	mov	r2, r6
 800a78c:	4629      	mov	r1, r5
 800a78e:	4620      	mov	r0, r4
 800a790:	9700      	str	r7, [sp, #0]
 800a792:	f001 fe3b 	bl	800c40c <acc_confprogram_patch_offset>
 800a796:	f001 ff89 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800a79a:	276a      	movs	r7, #106	; 0x6a
 800a79c:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 800a7a0:	9201      	str	r2, [sp, #4]
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	4632      	mov	r2, r6
 800a7a6:	4629      	mov	r1, r5
 800a7a8:	4620      	mov	r0, r4
 800a7aa:	9700      	str	r7, [sp, #0]
 800a7ac:	f001 fe2e 	bl	800c40c <acc_confprogram_patch_offset>
 800a7b0:	f001 ff7c 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800a7b4:	2719      	movs	r7, #25
 800a7b6:	f8db 2030 	ldr.w	r2, [fp, #48]	; 0x30
 800a7ba:	9201      	str	r2, [sp, #4]
 800a7bc:	4603      	mov	r3, r0
 800a7be:	4632      	mov	r2, r6
 800a7c0:	4629      	mov	r1, r5
 800a7c2:	4620      	mov	r0, r4
 800a7c4:	9700      	str	r7, [sp, #0]
 800a7c6:	f001 fe21 	bl	800c40c <acc_confprogram_patch_offset>
 800a7ca:	f001 ff6f 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800a7ce:	271a      	movs	r7, #26
 800a7d0:	f8db 2034 	ldr.w	r2, [fp, #52]	; 0x34
 800a7d4:	9201      	str	r2, [sp, #4]
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	4632      	mov	r2, r6
 800a7da:	4629      	mov	r1, r5
 800a7dc:	4620      	mov	r0, r4
 800a7de:	9700      	str	r7, [sp, #0]
 800a7e0:	f001 fe14 	bl	800c40c <acc_confprogram_patch_offset>
 800a7e4:	f001 ff62 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800a7e8:	271b      	movs	r7, #27
 800a7ea:	f8db 2038 	ldr.w	r2, [fp, #56]	; 0x38
 800a7ee:	9201      	str	r2, [sp, #4]
 800a7f0:	4603      	mov	r3, r0
 800a7f2:	4632      	mov	r2, r6
 800a7f4:	4629      	mov	r1, r5
 800a7f6:	4620      	mov	r0, r4
 800a7f8:	9700      	str	r7, [sp, #0]
 800a7fa:	f001 fe07 	bl	800c40c <acc_confprogram_patch_offset>
 800a7fe:	f001 ff55 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800a802:	271c      	movs	r7, #28
 800a804:	f8db 203c 	ldr.w	r2, [fp, #60]	; 0x3c
 800a808:	9201      	str	r2, [sp, #4]
 800a80a:	4603      	mov	r3, r0
 800a80c:	4632      	mov	r2, r6
 800a80e:	4629      	mov	r1, r5
 800a810:	4620      	mov	r0, r4
 800a812:	9700      	str	r7, [sp, #0]
 800a814:	f001 fdfa 	bl	800c40c <acc_confprogram_patch_offset>
 800a818:	f001 ff48 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800a81c:	271d      	movs	r7, #29
 800a81e:	f8db 2040 	ldr.w	r2, [fp, #64]	; 0x40
 800a822:	9201      	str	r2, [sp, #4]
 800a824:	4603      	mov	r3, r0
 800a826:	4632      	mov	r2, r6
 800a828:	4629      	mov	r1, r5
 800a82a:	4620      	mov	r0, r4
 800a82c:	9700      	str	r7, [sp, #0]
 800a82e:	f001 fded 	bl	800c40c <acc_confprogram_patch_offset>
 800a832:	f001 ff3b 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800a836:	271e      	movs	r7, #30
 800a838:	f8db 2044 	ldr.w	r2, [fp, #68]	; 0x44
 800a83c:	9201      	str	r2, [sp, #4]
 800a83e:	4603      	mov	r3, r0
 800a840:	4632      	mov	r2, r6
 800a842:	4629      	mov	r1, r5
 800a844:	4620      	mov	r0, r4
 800a846:	9700      	str	r7, [sp, #0]
 800a848:	f001 fde0 	bl	800c40c <acc_confprogram_patch_offset>
 800a84c:	f001 ff2e 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800a850:	2755      	movs	r7, #85	; 0x55
 800a852:	f8db 2048 	ldr.w	r2, [fp, #72]	; 0x48
 800a856:	9201      	str	r2, [sp, #4]
 800a858:	4603      	mov	r3, r0
 800a85a:	4632      	mov	r2, r6
 800a85c:	4629      	mov	r1, r5
 800a85e:	4620      	mov	r0, r4
 800a860:	9700      	str	r7, [sp, #0]
 800a862:	f001 fdd3 	bl	800c40c <acc_confprogram_patch_offset>
 800a866:	f001 ff21 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800a86a:	2756      	movs	r7, #86	; 0x56
 800a86c:	f8db 204c 	ldr.w	r2, [fp, #76]	; 0x4c
 800a870:	9201      	str	r2, [sp, #4]
 800a872:	4603      	mov	r3, r0
 800a874:	4632      	mov	r2, r6
 800a876:	4629      	mov	r1, r5
 800a878:	4620      	mov	r0, r4
 800a87a:	9700      	str	r7, [sp, #0]
 800a87c:	f001 fdc6 	bl	800c40c <acc_confprogram_patch_offset>
 800a880:	f001 ff14 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800a884:	2758      	movs	r7, #88	; 0x58
 800a886:	f8db 2050 	ldr.w	r2, [fp, #80]	; 0x50
 800a88a:	9201      	str	r2, [sp, #4]
 800a88c:	4603      	mov	r3, r0
 800a88e:	4632      	mov	r2, r6
 800a890:	4629      	mov	r1, r5
 800a892:	4620      	mov	r0, r4
 800a894:	9700      	str	r7, [sp, #0]
 800a896:	f001 fdb9 	bl	800c40c <acc_confprogram_patch_offset>
 800a89a:	f001 ff07 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800a89e:	276b      	movs	r7, #107	; 0x6b
 800a8a0:	f8db 2054 	ldr.w	r2, [fp, #84]	; 0x54
 800a8a4:	9201      	str	r2, [sp, #4]
 800a8a6:	4603      	mov	r3, r0
 800a8a8:	4632      	mov	r2, r6
 800a8aa:	4629      	mov	r1, r5
 800a8ac:	4620      	mov	r0, r4
 800a8ae:	9700      	str	r7, [sp, #0]
 800a8b0:	f001 fdac 	bl	800c40c <acc_confprogram_patch_offset>
 800a8b4:	f001 fefa 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800a8b8:	2786      	movs	r7, #134	; 0x86
 800a8ba:	f8db 2058 	ldr.w	r2, [fp, #88]	; 0x58
 800a8be:	9201      	str	r2, [sp, #4]
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	4632      	mov	r2, r6
 800a8c4:	4629      	mov	r1, r5
 800a8c6:	4620      	mov	r0, r4
 800a8c8:	9700      	str	r7, [sp, #0]
 800a8ca:	f001 fd9f 	bl	800c40c <acc_confprogram_patch_offset>
 800a8ce:	f001 feed 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800a8d2:	2764      	movs	r7, #100	; 0x64
 800a8d4:	f8db 205c 	ldr.w	r2, [fp, #92]	; 0x5c
 800a8d8:	9201      	str	r2, [sp, #4]
 800a8da:	4603      	mov	r3, r0
 800a8dc:	4632      	mov	r2, r6
 800a8de:	4629      	mov	r1, r5
 800a8e0:	4620      	mov	r0, r4
 800a8e2:	9700      	str	r7, [sp, #0]
 800a8e4:	f001 fd92 	bl	800c40c <acc_confprogram_patch_offset>
 800a8e8:	f001 fee0 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800a8ec:	2765      	movs	r7, #101	; 0x65
 800a8ee:	f8db 2060 	ldr.w	r2, [fp, #96]	; 0x60
 800a8f2:	9201      	str	r2, [sp, #4]
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	4632      	mov	r2, r6
 800a8f8:	4629      	mov	r1, r5
 800a8fa:	4620      	mov	r0, r4
 800a8fc:	9700      	str	r7, [sp, #0]
 800a8fe:	f001 fd85 	bl	800c40c <acc_confprogram_patch_offset>
 800a902:	f001 fed3 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800a906:	2740      	movs	r7, #64	; 0x40
 800a908:	f8db 2064 	ldr.w	r2, [fp, #100]	; 0x64
 800a90c:	9201      	str	r2, [sp, #4]
 800a90e:	4603      	mov	r3, r0
 800a910:	4632      	mov	r2, r6
 800a912:	4629      	mov	r1, r5
 800a914:	4620      	mov	r0, r4
 800a916:	9700      	str	r7, [sp, #0]
 800a918:	f001 fd78 	bl	800c40c <acc_confprogram_patch_offset>
 800a91c:	f001 fec6 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800a920:	2741      	movs	r7, #65	; 0x41
 800a922:	f8db 2068 	ldr.w	r2, [fp, #104]	; 0x68
 800a926:	9201      	str	r2, [sp, #4]
 800a928:	4603      	mov	r3, r0
 800a92a:	4632      	mov	r2, r6
 800a92c:	4629      	mov	r1, r5
 800a92e:	4620      	mov	r0, r4
 800a930:	9700      	str	r7, [sp, #0]
 800a932:	f001 fd6b 	bl	800c40c <acc_confprogram_patch_offset>
 800a936:	f001 feb9 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800a93a:	2772      	movs	r7, #114	; 0x72
 800a93c:	f8db 206c 	ldr.w	r2, [fp, #108]	; 0x6c
 800a940:	9201      	str	r2, [sp, #4]
 800a942:	4603      	mov	r3, r0
 800a944:	4632      	mov	r2, r6
 800a946:	4629      	mov	r1, r5
 800a948:	4620      	mov	r0, r4
 800a94a:	9700      	str	r7, [sp, #0]
 800a94c:	f001 fd5e 	bl	800c40c <acc_confprogram_patch_offset>
 800a950:	f001 feac 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800a954:	2754      	movs	r7, #84	; 0x54
 800a956:	f8db 2070 	ldr.w	r2, [fp, #112]	; 0x70
 800a95a:	9201      	str	r2, [sp, #4]
 800a95c:	4603      	mov	r3, r0
 800a95e:	4632      	mov	r2, r6
 800a960:	4629      	mov	r1, r5
 800a962:	4620      	mov	r0, r4
 800a964:	9700      	str	r7, [sp, #0]
 800a966:	f001 fd51 	bl	800c40c <acc_confprogram_patch_offset>
 800a96a:	f001 fe9f 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800a96e:	2739      	movs	r7, #57	; 0x39
 800a970:	f8db 2074 	ldr.w	r2, [fp, #116]	; 0x74
 800a974:	9201      	str	r2, [sp, #4]
 800a976:	4603      	mov	r3, r0
 800a978:	4632      	mov	r2, r6
 800a97a:	4629      	mov	r1, r5
 800a97c:	4620      	mov	r0, r4
 800a97e:	9700      	str	r7, [sp, #0]
 800a980:	f001 fd44 	bl	800c40c <acc_confprogram_patch_offset>
 800a984:	f8db 3074 	ldr.w	r3, [fp, #116]	; 0x74
 800a988:	2b00      	cmp	r3, #0
 800a98a:	f040 8239 	bne.w	800ae00 <acc_cpd_linear_sweep_load_program+0x904>
 800a98e:	f001 fe8d 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800a992:	f8db 2078 	ldr.w	r2, [fp, #120]	; 0x78
 800a996:	9201      	str	r2, [sp, #4]
 800a998:	2251      	movs	r2, #81	; 0x51
 800a99a:	4603      	mov	r3, r0
 800a99c:	4629      	mov	r1, r5
 800a99e:	9200      	str	r2, [sp, #0]
 800a9a0:	4620      	mov	r0, r4
 800a9a2:	4632      	mov	r2, r6
 800a9a4:	f001 fd32 	bl	800c40c <acc_confprogram_patch_offset>
 800a9a8:	f001 fe80 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800a9ac:	f8db 207c 	ldr.w	r2, [fp, #124]	; 0x7c
 800a9b0:	9201      	str	r2, [sp, #4]
 800a9b2:	2277      	movs	r2, #119	; 0x77
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	4629      	mov	r1, r5
 800a9b8:	9200      	str	r2, [sp, #0]
 800a9ba:	4620      	mov	r0, r4
 800a9bc:	4632      	mov	r2, r6
 800a9be:	f001 fd25 	bl	800c40c <acc_confprogram_patch_offset>
 800a9c2:	f001 fe73 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800a9c6:	f8db 2080 	ldr.w	r2, [fp, #128]	; 0x80
 800a9ca:	9201      	str	r2, [sp, #4]
 800a9cc:	2244      	movs	r2, #68	; 0x44
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	4629      	mov	r1, r5
 800a9d2:	9200      	str	r2, [sp, #0]
 800a9d4:	4620      	mov	r0, r4
 800a9d6:	4632      	mov	r2, r6
 800a9d8:	f001 fd18 	bl	800c40c <acc_confprogram_patch_offset>
 800a9dc:	f001 fe66 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800a9e0:	f8db 2084 	ldr.w	r2, [fp, #132]	; 0x84
 800a9e4:	9201      	str	r2, [sp, #4]
 800a9e6:	2243      	movs	r2, #67	; 0x43
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	9200      	str	r2, [sp, #0]
 800a9ec:	4629      	mov	r1, r5
 800a9ee:	4632      	mov	r2, r6
 800a9f0:	4620      	mov	r0, r4
 800a9f2:	f001 fd0b 	bl	800c40c <acc_confprogram_patch_offset>
 800a9f6:	f8db 7088 	ldr.w	r7, [fp, #136]	; 0x88
 800a9fa:	b2bb      	uxth	r3, r7
 800a9fc:	2b08      	cmp	r3, #8
 800a9fe:	f200 81e7 	bhi.w	800add0 <acc_cpd_linear_sweep_load_program+0x8d4>
 800aa02:	4698      	mov	r8, r3
 800aa04:	2700      	movs	r7, #0
 800aa06:	f001 fe51 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800aa0a:	226c      	movs	r2, #108	; 0x6c
 800aa0c:	4603      	mov	r3, r0
 800aa0e:	e9cd 2800 	strd	r2, r8, [sp]
 800aa12:	4629      	mov	r1, r5
 800aa14:	4632      	mov	r2, r6
 800aa16:	4620      	mov	r0, r4
 800aa18:	f001 fcf8 	bl	800c40c <acc_confprogram_patch_offset>
 800aa1c:	f001 fe46 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800aa20:	2259      	movs	r2, #89	; 0x59
 800aa22:	4603      	mov	r3, r0
 800aa24:	e9cd 2800 	strd	r2, r8, [sp]
 800aa28:	4629      	mov	r1, r5
 800aa2a:	4632      	mov	r2, r6
 800aa2c:	4620      	mov	r0, r4
 800aa2e:	f001 fced 	bl	800c40c <acc_confprogram_patch_offset>
 800aa32:	f001 fe3b 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800aa36:	216e      	movs	r1, #110	; 0x6e
 800aa38:	f001 fdd2 	bl	800c5e0 <acc_confprogram_get_default_value>
 800aa3c:	900a      	str	r0, [sp, #40]	; 0x28
 800aa3e:	f001 fe35 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800aa42:	2170      	movs	r1, #112	; 0x70
 800aa44:	f001 fdcc 	bl	800c5e0 <acc_confprogram_get_default_value>
 800aa48:	9003      	str	r0, [sp, #12]
 800aa4a:	f001 fe2f 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800aa4e:	216f      	movs	r1, #111	; 0x6f
 800aa50:	f001 fdc6 	bl	800c5e0 <acc_confprogram_get_default_value>
 800aa54:	9004      	str	r0, [sp, #16]
 800aa56:	f001 fe29 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800aa5a:	215b      	movs	r1, #91	; 0x5b
 800aa5c:	f001 fdc0 	bl	800c5e0 <acc_confprogram_get_default_value>
 800aa60:	4680      	mov	r8, r0
 800aa62:	f001 fe23 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800aa66:	215d      	movs	r1, #93	; 0x5d
 800aa68:	f001 fdba 	bl	800c5e0 <acc_confprogram_get_default_value>
 800aa6c:	9005      	str	r0, [sp, #20]
 800aa6e:	f001 fe1d 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800aa72:	215c      	movs	r1, #92	; 0x5c
 800aa74:	f001 fdb4 	bl	800c5e0 <acc_confprogram_get_default_value>
 800aa78:	9006      	str	r0, [sp, #24]
 800aa7a:	f001 fe17 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800aa7e:	214a      	movs	r1, #74	; 0x4a
 800aa80:	f001 fdae 	bl	800c5e0 <acc_confprogram_get_default_value>
 800aa84:	9007      	str	r0, [sp, #28]
 800aa86:	f001 fe11 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800aa8a:	2145      	movs	r1, #69	; 0x45
 800aa8c:	f001 fda8 	bl	800c5e0 <acc_confprogram_get_default_value>
 800aa90:	9008      	str	r0, [sp, #32]
 800aa92:	f001 fe0b 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800aa96:	2122      	movs	r1, #34	; 0x22
 800aa98:	f001 fda2 	bl	800c5e0 <acc_confprogram_get_default_value>
 800aa9c:	9009      	str	r0, [sp, #36]	; 0x24
 800aa9e:	f001 fe05 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800aaa2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aaa4:	216e      	movs	r1, #110	; 0x6e
 800aaa6:	433a      	orrs	r2, r7
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	9201      	str	r2, [sp, #4]
 800aaac:	9100      	str	r1, [sp, #0]
 800aaae:	4632      	mov	r2, r6
 800aab0:	4629      	mov	r1, r5
 800aab2:	4620      	mov	r0, r4
 800aab4:	f001 fcaa 	bl	800c40c <acc_confprogram_patch_offset>
 800aab8:	f001 fdf8 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800aabc:	9a03      	ldr	r2, [sp, #12]
 800aabe:	2170      	movs	r1, #112	; 0x70
 800aac0:	433a      	orrs	r2, r7
 800aac2:	4603      	mov	r3, r0
 800aac4:	9201      	str	r2, [sp, #4]
 800aac6:	9100      	str	r1, [sp, #0]
 800aac8:	4632      	mov	r2, r6
 800aaca:	4629      	mov	r1, r5
 800aacc:	4620      	mov	r0, r4
 800aace:	f001 fc9d 	bl	800c40c <acc_confprogram_patch_offset>
 800aad2:	f001 fdeb 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800aad6:	9a04      	ldr	r2, [sp, #16]
 800aad8:	216f      	movs	r1, #111	; 0x6f
 800aada:	433a      	orrs	r2, r7
 800aadc:	4603      	mov	r3, r0
 800aade:	e9cd 1200 	strd	r1, r2, [sp]
 800aae2:	4620      	mov	r0, r4
 800aae4:	4632      	mov	r2, r6
 800aae6:	4629      	mov	r1, r5
 800aae8:	f001 fc90 	bl	800c40c <acc_confprogram_patch_offset>
 800aaec:	f001 fdde 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800aaf0:	ea48 0207 	orr.w	r2, r8, r7
 800aaf4:	215b      	movs	r1, #91	; 0x5b
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	e9cd 1200 	strd	r1, r2, [sp]
 800aafc:	4620      	mov	r0, r4
 800aafe:	4632      	mov	r2, r6
 800ab00:	4629      	mov	r1, r5
 800ab02:	f001 fc83 	bl	800c40c <acc_confprogram_patch_offset>
 800ab06:	f001 fdd1 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800ab0a:	9a05      	ldr	r2, [sp, #20]
 800ab0c:	215d      	movs	r1, #93	; 0x5d
 800ab0e:	433a      	orrs	r2, r7
 800ab10:	4603      	mov	r3, r0
 800ab12:	e9cd 1200 	strd	r1, r2, [sp]
 800ab16:	4620      	mov	r0, r4
 800ab18:	4632      	mov	r2, r6
 800ab1a:	4629      	mov	r1, r5
 800ab1c:	f001 fc76 	bl	800c40c <acc_confprogram_patch_offset>
 800ab20:	f001 fdc4 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800ab24:	9a06      	ldr	r2, [sp, #24]
 800ab26:	215c      	movs	r1, #92	; 0x5c
 800ab28:	433a      	orrs	r2, r7
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	e9cd 1200 	strd	r1, r2, [sp]
 800ab30:	4620      	mov	r0, r4
 800ab32:	4632      	mov	r2, r6
 800ab34:	4629      	mov	r1, r5
 800ab36:	f001 fc69 	bl	800c40c <acc_confprogram_patch_offset>
 800ab3a:	f001 fdb7 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800ab3e:	9a07      	ldr	r2, [sp, #28]
 800ab40:	214a      	movs	r1, #74	; 0x4a
 800ab42:	433a      	orrs	r2, r7
 800ab44:	4603      	mov	r3, r0
 800ab46:	e9cd 1200 	strd	r1, r2, [sp]
 800ab4a:	4620      	mov	r0, r4
 800ab4c:	4632      	mov	r2, r6
 800ab4e:	4629      	mov	r1, r5
 800ab50:	f001 fc5c 	bl	800c40c <acc_confprogram_patch_offset>
 800ab54:	f001 fdaa 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800ab58:	9a08      	ldr	r2, [sp, #32]
 800ab5a:	2145      	movs	r1, #69	; 0x45
 800ab5c:	433a      	orrs	r2, r7
 800ab5e:	4603      	mov	r3, r0
 800ab60:	e9cd 1200 	strd	r1, r2, [sp]
 800ab64:	4620      	mov	r0, r4
 800ab66:	4632      	mov	r2, r6
 800ab68:	4629      	mov	r1, r5
 800ab6a:	f001 fc4f 	bl	800c40c <acc_confprogram_patch_offset>
 800ab6e:	f001 fd9d 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800ab72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab74:	433a      	orrs	r2, r7
 800ab76:	4617      	mov	r7, r2
 800ab78:	2222      	movs	r2, #34	; 0x22
 800ab7a:	4629      	mov	r1, r5
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	e9cd 2700 	strd	r2, r7, [sp]
 800ab82:	4620      	mov	r0, r4
 800ab84:	4632      	mov	r2, r6
 800ab86:	f001 fc41 	bl	800c40c <acc_confprogram_patch_offset>
 800ab8a:	f001 fd8f 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800ab8e:	f8db 2090 	ldr.w	r2, [fp, #144]	; 0x90
 800ab92:	2a05      	cmp	r2, #5
 800ab94:	bf8c      	ite	hi
 800ab96:	2164      	movhi	r1, #100	; 0x64
 800ab98:	2144      	movls	r1, #68	; 0x44
 800ab9a:	2205      	movs	r2, #5
 800ab9c:	4603      	mov	r3, r0
 800ab9e:	e9cd 2100 	strd	r2, r1, [sp]
 800aba2:	4620      	mov	r0, r4
 800aba4:	4632      	mov	r2, r6
 800aba6:	4629      	mov	r1, r5
 800aba8:	f001 fc30 	bl	800c40c <acc_confprogram_patch_offset>
 800abac:	f001 fd7e 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800abb0:	f8db 2090 	ldr.w	r2, [fp, #144]	; 0x90
 800abb4:	0152      	lsls	r2, r2, #5
 800abb6:	3a03      	subs	r2, #3
 800abb8:	2124      	movs	r1, #36	; 0x24
 800abba:	4603      	mov	r3, r0
 800abbc:	e9cd 1200 	strd	r1, r2, [sp]
 800abc0:	4620      	mov	r0, r4
 800abc2:	4632      	mov	r2, r6
 800abc4:	4629      	mov	r1, r5
 800abc6:	f001 fc21 	bl	800c40c <acc_confprogram_patch_offset>
 800abca:	f001 fd6f 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800abce:	f8db 2090 	ldr.w	r2, [fp, #144]	; 0x90
 800abd2:	0152      	lsls	r2, r2, #5
 800abd4:	0852      	lsrs	r2, r2, #1
 800abd6:	3a03      	subs	r2, #3
 800abd8:	2125      	movs	r1, #37	; 0x25
 800abda:	4603      	mov	r3, r0
 800abdc:	e9cd 1200 	strd	r1, r2, [sp]
 800abe0:	4620      	mov	r0, r4
 800abe2:	4632      	mov	r2, r6
 800abe4:	4629      	mov	r1, r5
 800abe6:	f001 fc11 	bl	800c40c <acc_confprogram_patch_offset>
 800abea:	f001 fd5f 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800abee:	f8db 2094 	ldr.w	r2, [fp, #148]	; 0x94
 800abf2:	9201      	str	r2, [sp, #4]
 800abf4:	2236      	movs	r2, #54	; 0x36
 800abf6:	4603      	mov	r3, r0
 800abf8:	4629      	mov	r1, r5
 800abfa:	9200      	str	r2, [sp, #0]
 800abfc:	4620      	mov	r0, r4
 800abfe:	4632      	mov	r2, r6
 800ac00:	f001 fc04 	bl	800c40c <acc_confprogram_patch_offset>
 800ac04:	f001 fd52 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800ac08:	f8db 2098 	ldr.w	r2, [fp, #152]	; 0x98
 800ac0c:	215e      	movs	r1, #94	; 0x5e
 800ac0e:	320e      	adds	r2, #14
 800ac10:	4603      	mov	r3, r0
 800ac12:	e9cd 1200 	strd	r1, r2, [sp]
 800ac16:	4620      	mov	r0, r4
 800ac18:	4632      	mov	r2, r6
 800ac1a:	4629      	mov	r1, r5
 800ac1c:	f001 fbf6 	bl	800c40c <acc_confprogram_patch_offset>
 800ac20:	f001 fd44 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800ac24:	2120      	movs	r1, #32
 800ac26:	f001 fcdb 	bl	800c5e0 <acc_confprogram_get_default_value>
 800ac2a:	f8db 3090 	ldr.w	r3, [fp, #144]	; 0x90
 800ac2e:	2b05      	cmp	r3, #5
 800ac30:	bf98      	it	ls
 800ac32:	3002      	addls	r0, #2
 800ac34:	fbb0 f7f3 	udiv	r7, r0, r3
 800ac38:	fb03 0717 	mls	r7, r3, r7, r0
 800ac3c:	b107      	cbz	r7, 800ac40 <acc_cpd_linear_sweep_load_program+0x744>
 800ac3e:	1bdf      	subs	r7, r3, r7
 800ac40:	f8db 309c 	ldr.w	r3, [fp, #156]	; 0x9c
 800ac44:	eb07 0803 	add.w	r8, r7, r3
 800ac48:	f001 fd30 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800ac4c:	221f      	movs	r2, #31
 800ac4e:	4603      	mov	r3, r0
 800ac50:	e9cd 2800 	strd	r2, r8, [sp]
 800ac54:	4629      	mov	r1, r5
 800ac56:	4632      	mov	r2, r6
 800ac58:	4620      	mov	r0, r4
 800ac5a:	f001 fbd7 	bl	800c40c <acc_confprogram_patch_offset>
 800ac5e:	f8db 309c 	ldr.w	r3, [fp, #156]	; 0x9c
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	f040 809a 	bne.w	800ad9c <acc_cpd_linear_sweep_load_program+0x8a0>
 800ac68:	f001 fd20 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800ac6c:	213a      	movs	r1, #58	; 0x3a
 800ac6e:	f001 fcb7 	bl	800c5e0 <acc_confprogram_get_default_value>
 800ac72:	f8db 3090 	ldr.w	r3, [fp, #144]	; 0x90
 800ac76:	2b05      	cmp	r3, #5
 800ac78:	bf8c      	ite	hi
 800ac7a:	3007      	addhi	r0, #7
 800ac7c:	3009      	addls	r0, #9
 800ac7e:	fbb0 f7f3 	udiv	r7, r0, r3
 800ac82:	fb03 0717 	mls	r7, r3, r7, r0
 800ac86:	b107      	cbz	r7, 800ac8a <acc_cpd_linear_sweep_load_program+0x78e>
 800ac88:	1bdf      	subs	r7, r3, r7
 800ac8a:	f8db 30a0 	ldr.w	r3, [fp, #160]	; 0xa0
 800ac8e:	eb07 0803 	add.w	r8, r7, r3
 800ac92:	f001 fd0b 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800ac96:	2266      	movs	r2, #102	; 0x66
 800ac98:	4603      	mov	r3, r0
 800ac9a:	e9cd 2800 	strd	r2, r8, [sp]
 800ac9e:	4629      	mov	r1, r5
 800aca0:	4632      	mov	r2, r6
 800aca2:	4620      	mov	r0, r4
 800aca4:	f001 fbb2 	bl	800c40c <acc_confprogram_patch_offset>
 800aca8:	f8db 30a0 	ldr.w	r3, [fp, #160]	; 0xa0
 800acac:	2b00      	cmp	r3, #0
 800acae:	d15c      	bne.n	800ad6a <acc_cpd_linear_sweep_load_program+0x86e>
 800acb0:	f89b 308d 	ldrb.w	r3, [fp, #141]	; 0x8d
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d141      	bne.n	800ad3c <acc_cpd_linear_sweep_load_program+0x840>
 800acb8:	f8db 70a4 	ldr.w	r7, [fp, #164]	; 0xa4
 800acbc:	f001 fcf6 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800acc0:	1e79      	subs	r1, r7, #1
 800acc2:	2206      	movs	r2, #6
 800acc4:	4603      	mov	r3, r0
 800acc6:	e9cd 2100 	strd	r2, r1, [sp]
 800acca:	4620      	mov	r0, r4
 800accc:	4632      	mov	r2, r6
 800acce:	4629      	mov	r1, r5
 800acd0:	f001 fb9c 	bl	800c40c <acc_confprogram_patch_offset>
 800acd4:	f001 fcea 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800acd8:	2204      	movs	r2, #4
 800acda:	2163      	movs	r1, #99	; 0x63
 800acdc:	fbb2 f7f7 	udiv	r7, r2, r7
 800ace0:	3f01      	subs	r7, #1
 800ace2:	4603      	mov	r3, r0
 800ace4:	e9cd 1700 	strd	r1, r7, [sp]
 800ace8:	4632      	mov	r2, r6
 800acea:	4629      	mov	r1, r5
 800acec:	4620      	mov	r0, r4
 800acee:	f001 fb8d 	bl	800c40c <acc_confprogram_patch_offset>
 800acf2:	f001 fcdb 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800acf6:	f8db 20a8 	ldr.w	r2, [fp, #168]	; 0xa8
 800acfa:	9201      	str	r2, [sp, #4]
 800acfc:	2261      	movs	r2, #97	; 0x61
 800acfe:	4603      	mov	r3, r0
 800ad00:	4629      	mov	r1, r5
 800ad02:	9200      	str	r2, [sp, #0]
 800ad04:	4620      	mov	r0, r4
 800ad06:	4632      	mov	r2, r6
 800ad08:	f001 fb80 	bl	800c40c <acc_confprogram_patch_offset>
 800ad0c:	f001 fcce 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800ad10:	f89b 20ad 	ldrb.w	r2, [fp, #173]	; 0xad
 800ad14:	9201      	str	r2, [sp, #4]
 800ad16:	2246      	movs	r2, #70	; 0x46
 800ad18:	4603      	mov	r3, r0
 800ad1a:	9200      	str	r2, [sp, #0]
 800ad1c:	4629      	mov	r1, r5
 800ad1e:	4632      	mov	r2, r6
 800ad20:	4620      	mov	r0, r4
 800ad22:	f001 fb73 	bl	800c40c <acc_confprogram_patch_offset>
 800ad26:	f89b 70ad 	ldrb.w	r7, [fp, #173]	; 0xad
 800ad2a:	2f00      	cmp	r7, #0
 800ad2c:	f47f ac24 	bne.w	800a578 <acc_cpd_linear_sweep_load_program+0x7c>
 800ad30:	f001 fcbc 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800ad34:	2223      	movs	r2, #35	; 0x23
 800ad36:	4603      	mov	r3, r0
 800ad38:	9701      	str	r7, [sp, #4]
 800ad3a:	e447      	b.n	800a5cc <acc_cpd_linear_sweep_load_program+0xd0>
 800ad3c:	f001 fcb6 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800ad40:	223b      	movs	r2, #59	; 0x3b
 800ad42:	2100      	movs	r1, #0
 800ad44:	e9cd 2100 	strd	r2, r1, [sp]
 800ad48:	4603      	mov	r3, r0
 800ad4a:	4632      	mov	r2, r6
 800ad4c:	4629      	mov	r1, r5
 800ad4e:	4620      	mov	r0, r4
 800ad50:	f001 fb5c 	bl	800c40c <acc_confprogram_patch_offset>
 800ad54:	f7fa fd64 	bl	8005820 <acc_rss_integration_log_level>
 800ad58:	2801      	cmp	r0, #1
 800ad5a:	d9ad      	bls.n	800acb8 <acc_cpd_linear_sweep_load_program+0x7bc>
 800ad5c:	4b7b      	ldr	r3, [pc, #492]	; (800af4c <acc_cpd_linear_sweep_load_program+0xa50>)
 800ad5e:	4a7c      	ldr	r2, [pc, #496]	; (800af50 <acc_cpd_linear_sweep_load_program+0xa54>)
 800ad60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad62:	497c      	ldr	r1, [pc, #496]	; (800af54 <acc_cpd_linear_sweep_load_program+0xa58>)
 800ad64:	2002      	movs	r0, #2
 800ad66:	4798      	blx	r3
 800ad68:	e7a6      	b.n	800acb8 <acc_cpd_linear_sweep_load_program+0x7bc>
 800ad6a:	f7fa fd59 	bl	8005820 <acc_rss_integration_log_level>
 800ad6e:	2801      	cmp	r0, #1
 800ad70:	d908      	bls.n	800ad84 <acc_cpd_linear_sweep_load_program+0x888>
 800ad72:	4b76      	ldr	r3, [pc, #472]	; (800af4c <acc_cpd_linear_sweep_load_program+0xa50>)
 800ad74:	4a78      	ldr	r2, [pc, #480]	; (800af58 <acc_cpd_linear_sweep_load_program+0xa5c>)
 800ad76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad78:	9303      	str	r3, [sp, #12]
 800ad7a:	4976      	ldr	r1, [pc, #472]	; (800af54 <acc_cpd_linear_sweep_load_program+0xa58>)
 800ad7c:	463b      	mov	r3, r7
 800ad7e:	2002      	movs	r0, #2
 800ad80:	9f03      	ldr	r7, [sp, #12]
 800ad82:	47b8      	blx	r7
 800ad84:	f7fa fd4c 	bl	8005820 <acc_rss_integration_log_level>
 800ad88:	2801      	cmp	r0, #1
 800ad8a:	d991      	bls.n	800acb0 <acc_cpd_linear_sweep_load_program+0x7b4>
 800ad8c:	4b6f      	ldr	r3, [pc, #444]	; (800af4c <acc_cpd_linear_sweep_load_program+0xa50>)
 800ad8e:	4a73      	ldr	r2, [pc, #460]	; (800af5c <acc_cpd_linear_sweep_load_program+0xa60>)
 800ad90:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 800ad92:	4970      	ldr	r1, [pc, #448]	; (800af54 <acc_cpd_linear_sweep_load_program+0xa58>)
 800ad94:	4643      	mov	r3, r8
 800ad96:	2002      	movs	r0, #2
 800ad98:	47b8      	blx	r7
 800ad9a:	e789      	b.n	800acb0 <acc_cpd_linear_sweep_load_program+0x7b4>
 800ad9c:	f7fa fd40 	bl	8005820 <acc_rss_integration_log_level>
 800ada0:	2801      	cmp	r0, #1
 800ada2:	d908      	bls.n	800adb6 <acc_cpd_linear_sweep_load_program+0x8ba>
 800ada4:	4b69      	ldr	r3, [pc, #420]	; (800af4c <acc_cpd_linear_sweep_load_program+0xa50>)
 800ada6:	4a6e      	ldr	r2, [pc, #440]	; (800af60 <acc_cpd_linear_sweep_load_program+0xa64>)
 800ada8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adaa:	9303      	str	r3, [sp, #12]
 800adac:	4969      	ldr	r1, [pc, #420]	; (800af54 <acc_cpd_linear_sweep_load_program+0xa58>)
 800adae:	463b      	mov	r3, r7
 800adb0:	2002      	movs	r0, #2
 800adb2:	9f03      	ldr	r7, [sp, #12]
 800adb4:	47b8      	blx	r7
 800adb6:	f7fa fd33 	bl	8005820 <acc_rss_integration_log_level>
 800adba:	2801      	cmp	r0, #1
 800adbc:	f67f af54 	bls.w	800ac68 <acc_cpd_linear_sweep_load_program+0x76c>
 800adc0:	4b62      	ldr	r3, [pc, #392]	; (800af4c <acc_cpd_linear_sweep_load_program+0xa50>)
 800adc2:	4a68      	ldr	r2, [pc, #416]	; (800af64 <acc_cpd_linear_sweep_load_program+0xa68>)
 800adc4:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 800adc6:	4963      	ldr	r1, [pc, #396]	; (800af54 <acc_cpd_linear_sweep_load_program+0xa58>)
 800adc8:	4643      	mov	r3, r8
 800adca:	2002      	movs	r0, #2
 800adcc:	47b8      	blx	r7
 800adce:	e74b      	b.n	800ac68 <acc_cpd_linear_sweep_load_program+0x76c>
 800add0:	f001 fc6c 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800add4:	fa1f f887 	uxth.w	r8, r7
 800add8:	2267      	movs	r2, #103	; 0x67
 800adda:	2102      	movs	r1, #2
 800addc:	f1a8 0808 	sub.w	r8, r8, #8
 800ade0:	27ff      	movs	r7, #255	; 0xff
 800ade2:	e9cd 2100 	strd	r2, r1, [sp]
 800ade6:	4603      	mov	r3, r0
 800ade8:	fa07 f708 	lsl.w	r7, r7, r8
 800adec:	4632      	mov	r2, r6
 800adee:	4629      	mov	r1, r5
 800adf0:	4620      	mov	r0, r4
 800adf2:	f001 fb0b 	bl	800c40c <acc_confprogram_patch_offset>
 800adf6:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 800adfa:	f04f 0808 	mov.w	r8, #8
 800adfe:	e602      	b.n	800aa06 <acc_cpd_linear_sweep_load_program+0x50a>
 800ae00:	f001 fc54 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800ae04:	2210      	movs	r2, #16
 800ae06:	2101      	movs	r1, #1
 800ae08:	e9cd 2100 	strd	r2, r1, [sp]
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	4632      	mov	r2, r6
 800ae10:	4629      	mov	r1, r5
 800ae12:	4620      	mov	r0, r4
 800ae14:	f001 fafa 	bl	800c40c <acc_confprogram_patch_offset>
 800ae18:	f001 fc48 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800ae1c:	f64f 7880 	movw	r8, #65408	; 0xff80
 800ae20:	2212      	movs	r2, #18
 800ae22:	4603      	mov	r3, r0
 800ae24:	4629      	mov	r1, r5
 800ae26:	e9cd 2800 	strd	r2, r8, [sp]
 800ae2a:	4620      	mov	r0, r4
 800ae2c:	4632      	mov	r2, r6
 800ae2e:	f001 faed 	bl	800c40c <acc_confprogram_patch_offset>
 800ae32:	f001 fc3b 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800ae36:	2707      	movs	r7, #7
 800ae38:	2214      	movs	r2, #20
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	4629      	mov	r1, r5
 800ae3e:	e9cd 2700 	strd	r2, r7, [sp]
 800ae42:	4620      	mov	r0, r4
 800ae44:	4632      	mov	r2, r6
 800ae46:	f001 fae1 	bl	800c40c <acc_confprogram_patch_offset>
 800ae4a:	f001 fc2f 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800ae4e:	2211      	movs	r2, #17
 800ae50:	4603      	mov	r3, r0
 800ae52:	4629      	mov	r1, r5
 800ae54:	e9cd 2800 	strd	r2, r8, [sp]
 800ae58:	4620      	mov	r0, r4
 800ae5a:	4632      	mov	r2, r6
 800ae5c:	f001 fad6 	bl	800c40c <acc_confprogram_patch_offset>
 800ae60:	f001 fc24 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800ae64:	2213      	movs	r2, #19
 800ae66:	2100      	movs	r1, #0
 800ae68:	e9cd 2100 	strd	r2, r1, [sp]
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	4632      	mov	r2, r6
 800ae70:	4629      	mov	r1, r5
 800ae72:	4620      	mov	r0, r4
 800ae74:	f001 faca 	bl	800c40c <acc_confprogram_patch_offset>
 800ae78:	f001 fc18 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800ae7c:	2215      	movs	r2, #21
 800ae7e:	f64f 71c0 	movw	r1, #65472	; 0xffc0
 800ae82:	e9cd 2100 	strd	r2, r1, [sp]
 800ae86:	4603      	mov	r3, r0
 800ae88:	4632      	mov	r2, r6
 800ae8a:	4629      	mov	r1, r5
 800ae8c:	4620      	mov	r0, r4
 800ae8e:	f001 fabd 	bl	800c40c <acc_confprogram_patch_offset>
 800ae92:	f001 fc0b 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800ae96:	2216      	movs	r2, #22
 800ae98:	4603      	mov	r3, r0
 800ae9a:	4629      	mov	r1, r5
 800ae9c:	e9cd 2700 	strd	r2, r7, [sp]
 800aea0:	4620      	mov	r0, r4
 800aea2:	4632      	mov	r2, r6
 800aea4:	f001 fab2 	bl	800c40c <acc_confprogram_patch_offset>
 800aea8:	f001 fc00 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800aeac:	220e      	movs	r2, #14
 800aeae:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 800aeb2:	e9cd 2100 	strd	r2, r1, [sp]
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	4632      	mov	r2, r6
 800aeba:	4629      	mov	r1, r5
 800aebc:	4620      	mov	r0, r4
 800aebe:	f001 faa5 	bl	800c40c <acc_confprogram_patch_offset>
 800aec2:	f001 fbf3 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800aec6:	220f      	movs	r2, #15
 800aec8:	4603      	mov	r3, r0
 800aeca:	4629      	mov	r1, r5
 800aecc:	e9cd 2700 	strd	r2, r7, [sp]
 800aed0:	4620      	mov	r0, r4
 800aed2:	4632      	mov	r2, r6
 800aed4:	f001 fa9a 	bl	800c40c <acc_confprogram_patch_offset>
 800aed8:	f001 fbe8 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800aedc:	2217      	movs	r2, #23
 800aede:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800aee2:	e9cd 2100 	strd	r2, r1, [sp]
 800aee6:	4603      	mov	r3, r0
 800aee8:	4632      	mov	r2, r6
 800aeea:	4629      	mov	r1, r5
 800aeec:	4620      	mov	r0, r4
 800aeee:	f001 fa8d 	bl	800c40c <acc_confprogram_patch_offset>
 800aef2:	f001 fbdb 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800aef6:	2218      	movs	r2, #24
 800aef8:	e9cd 2700 	strd	r2, r7, [sp]
 800aefc:	4603      	mov	r3, r0
 800aefe:	4632      	mov	r2, r6
 800af00:	4629      	mov	r1, r5
 800af02:	4620      	mov	r0, r4
 800af04:	f001 fa82 	bl	800c40c <acc_confprogram_patch_offset>
 800af08:	e541      	b.n	800a98e <acc_cpd_linear_sweep_load_program+0x492>
 800af0a:	f001 fbcf 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800af0e:	2732      	movs	r7, #50	; 0x32
 800af10:	f8db 20b8 	ldr.w	r2, [fp, #184]	; 0xb8
 800af14:	9201      	str	r2, [sp, #4]
 800af16:	4603      	mov	r3, r0
 800af18:	4632      	mov	r2, r6
 800af1a:	4629      	mov	r1, r5
 800af1c:	4620      	mov	r0, r4
 800af1e:	9700      	str	r7, [sp, #0]
 800af20:	f001 fa74 	bl	800c40c <acc_confprogram_patch_offset>
 800af24:	f7ff bb8c 	b.w	800a640 <acc_cpd_linear_sweep_load_program+0x144>
 800af28:	f7fa fc7a 	bl	8005820 <acc_rss_integration_log_level>
 800af2c:	2803      	cmp	r0, #3
 800af2e:	f67f ab03 	bls.w	800a538 <acc_cpd_linear_sweep_load_program+0x3c>
 800af32:	4b06      	ldr	r3, [pc, #24]	; (800af4c <acc_cpd_linear_sweep_load_program+0xa50>)
 800af34:	4a0c      	ldr	r2, [pc, #48]	; (800af68 <acc_cpd_linear_sweep_load_program+0xa6c>)
 800af36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af38:	4906      	ldr	r1, [pc, #24]	; (800af54 <acc_cpd_linear_sweep_load_program+0xa58>)
 800af3a:	2004      	movs	r0, #4
 800af3c:	4798      	blx	r3
 800af3e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800af40:	b00f      	add	sp, #60	; 0x3c
 800af42:	ecbd 8b04 	vpop	{d8-d9}
 800af46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af4a:	bf00      	nop
 800af4c:	200004c0 	.word	0x200004c0
 800af50:	0800ff40 	.word	0x0800ff40
 800af54:	0800fe6c 	.word	0x0800fe6c
 800af58:	0800fef0 	.word	0x0800fef0
 800af5c:	0800ff18 	.word	0x0800ff18
 800af60:	0800fe80 	.word	0x0800fe80
 800af64:	0800feb8 	.word	0x0800feb8
 800af68:	0800ff5c 	.word	0x0800ff5c

0800af6c <acc_cpd_linear_sweep_run_program>:
 800af6c:	f240 213b 	movw	r1, #571	; 0x23b
 800af70:	f7fc baaa 	b.w	80074c8 <acc_sensor_protocol_r2_run_program>

0800af74 <acc_cpd_linear_sweep_update_program>:
 800af74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af78:	784b      	ldrb	r3, [r1, #1]
 800af7a:	684f      	ldr	r7, [r1, #4]
 800af7c:	68ce      	ldr	r6, [r1, #12]
 800af7e:	b086      	sub	sp, #24
 800af80:	460c      	mov	r4, r1
 800af82:	4605      	mov	r5, r0
 800af84:	b943      	cbnz	r3, 800af98 <acc_cpd_linear_sweep_update_program+0x24>
 800af86:	7823      	ldrb	r3, [r4, #0]
 800af88:	b9eb      	cbnz	r3, 800afc6 <acc_cpd_linear_sweep_update_program+0x52>
 800af8a:	78a3      	ldrb	r3, [r4, #2]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d12d      	bne.n	800afec <acc_cpd_linear_sweep_update_program+0x78>
 800af90:	2001      	movs	r0, #1
 800af92:	b006      	add	sp, #24
 800af94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af98:	f8d1 8008 	ldr.w	r8, [r1, #8]
 800af9c:	f001 fb82 	bl	800c6a4 <acc_image_a111_r2c_sweep_get>
 800afa0:	9005      	str	r0, [sp, #20]
 800afa2:	f001 fb83 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800afa6:	f108 020e 	add.w	r2, r8, #14
 800afaa:	4603      	mov	r3, r0
 800afac:	9201      	str	r2, [sp, #4]
 800afae:	4819      	ldr	r0, [pc, #100]	; (800b014 <acc_cpd_linear_sweep_update_program+0xa0>)
 800afb0:	9002      	str	r0, [sp, #8]
 800afb2:	225e      	movs	r2, #94	; 0x5e
 800afb4:	9200      	str	r2, [sp, #0]
 800afb6:	9905      	ldr	r1, [sp, #20]
 800afb8:	2200      	movs	r2, #0
 800afba:	4628      	mov	r0, r5
 800afbc:	f001 fa9a 	bl	800c4f4 <acc_confprogram_live_patch>
 800afc0:	7823      	ldrb	r3, [r4, #0]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d0e1      	beq.n	800af8a <acc_cpd_linear_sweep_update_program+0x16>
 800afc6:	f001 fb6d 	bl	800c6a4 <acc_image_a111_r2c_sweep_get>
 800afca:	9005      	str	r0, [sp, #20]
 800afcc:	f001 fb6e 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800afd0:	2236      	movs	r2, #54	; 0x36
 800afd2:	4603      	mov	r3, r0
 800afd4:	480f      	ldr	r0, [pc, #60]	; (800b014 <acc_cpd_linear_sweep_update_program+0xa0>)
 800afd6:	9002      	str	r0, [sp, #8]
 800afd8:	9200      	str	r2, [sp, #0]
 800afda:	9905      	ldr	r1, [sp, #20]
 800afdc:	9701      	str	r7, [sp, #4]
 800afde:	2200      	movs	r2, #0
 800afe0:	4628      	mov	r0, r5
 800afe2:	f001 fa87 	bl	800c4f4 <acc_confprogram_live_patch>
 800afe6:	78a3      	ldrb	r3, [r4, #2]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d0d1      	beq.n	800af90 <acc_cpd_linear_sweep_update_program+0x1c>
 800afec:	f001 fb5a 	bl	800c6a4 <acc_image_a111_r2c_sweep_get>
 800aff0:	9005      	str	r0, [sp, #20]
 800aff2:	f001 fb5b 	bl	800c6ac <acc_image_a111_r2c_sweep_param_table_get>
 800aff6:	4c07      	ldr	r4, [pc, #28]	; (800b014 <acc_cpd_linear_sweep_update_program+0xa0>)
 800aff8:	9905      	ldr	r1, [sp, #20]
 800affa:	9601      	str	r6, [sp, #4]
 800affc:	2272      	movs	r2, #114	; 0x72
 800affe:	4603      	mov	r3, r0
 800b000:	9200      	str	r2, [sp, #0]
 800b002:	4628      	mov	r0, r5
 800b004:	9402      	str	r4, [sp, #8]
 800b006:	2200      	movs	r2, #0
 800b008:	f001 fa74 	bl	800c4f4 <acc_confprogram_live_patch>
 800b00c:	2001      	movs	r0, #1
 800b00e:	b006      	add	sp, #24
 800b010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b014:	08006dc5 	.word	0x08006dc5

0800b018 <acc_cpd_linear_sweep_get_info>:
 800b018:	f890 30ad 	ldrb.w	r3, [r0, #173]	; 0xad
 800b01c:	b16b      	cbz	r3, 800b03a <acc_cpd_linear_sweep_get_info+0x22>
 800b01e:	b410      	push	{r4}
 800b020:	2203      	movs	r2, #3
 800b022:	2401      	movs	r4, #1
 800b024:	2300      	movs	r3, #0
 800b026:	2002      	movs	r0, #2
 800b028:	e9c1 4003 	strd	r4, r0, [r1, #12]
 800b02c:	e9c1 3301 	strd	r3, r3, [r1, #4]
 800b030:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b034:	600a      	str	r2, [r1, #0]
 800b036:	614a      	str	r2, [r1, #20]
 800b038:	4770      	bx	lr
 800b03a:	e9c1 3300 	strd	r3, r3, [r1]
 800b03e:	e9c1 3302 	strd	r3, r3, [r1, #8]
 800b042:	e9c1 3304 	strd	r3, r3, [r1, #16]
 800b046:	4770      	bx	lr

0800b048 <acc_cpd_linear_sweep_check>:
 800b048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b04c:	461e      	mov	r6, r3
 800b04e:	2300      	movs	r3, #0
 800b050:	7033      	strb	r3, [r6, #0]
 800b052:	460c      	mov	r4, r1
 800b054:	f891 10ad 	ldrb.w	r1, [r1, #173]	; 0xad
 800b058:	b082      	sub	sp, #8
 800b05a:	b911      	cbnz	r1, 800b062 <acc_cpd_linear_sweep_check+0x1a>
 800b05c:	b002      	add	sp, #8
 800b05e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b062:	6813      	ldr	r3, [r2, #0]
 800b064:	005b      	lsls	r3, r3, #1
 800b066:	f003 031f 	and.w	r3, r3, #31
 800b06a:	6013      	str	r3, [r2, #0]
 800b06c:	4607      	mov	r7, r0
 800b06e:	4615      	mov	r5, r2
 800b070:	f7fa fbd6 	bl	8005820 <acc_rss_integration_log_level>
 800b074:	2803      	cmp	r0, #3
 800b076:	d907      	bls.n	800b088 <acc_cpd_linear_sweep_check+0x40>
 800b078:	4a16      	ldr	r2, [pc, #88]	; (800b0d4 <acc_cpd_linear_sweep_check+0x8c>)
 800b07a:	682b      	ldr	r3, [r5, #0]
 800b07c:	f8d2 8034 	ldr.w	r8, [r2, #52]	; 0x34
 800b080:	4915      	ldr	r1, [pc, #84]	; (800b0d8 <acc_cpd_linear_sweep_check+0x90>)
 800b082:	4a16      	ldr	r2, [pc, #88]	; (800b0dc <acc_cpd_linear_sweep_check+0x94>)
 800b084:	2004      	movs	r0, #4
 800b086:	47c0      	blx	r8
 800b088:	f9b4 3026 	ldrsh.w	r3, [r4, #38]	; 0x26
 800b08c:	f9b4 2024 	ldrsh.w	r2, [r4, #36]	; 0x24
 800b090:	8c21      	ldrh	r1, [r4, #32]
 800b092:	4638      	mov	r0, r7
 800b094:	f000 f952 	bl	800b33c <acc_cpd_sweep_check_voffset_vslope>
 800b098:	b1b0      	cbz	r0, 800b0c8 <acc_cpd_linear_sweep_check+0x80>
 800b09a:	6828      	ldr	r0, [r5, #0]
 800b09c:	f000 f9b4 	bl	800b408 <acc_cpd_sweep_check_count_bad_sweeps>
 800b0a0:	2802      	cmp	r0, #2
 800b0a2:	4604      	mov	r4, r0
 800b0a4:	d9da      	bls.n	800b05c <acc_cpd_linear_sweep_check+0x14>
 800b0a6:	f7fa fbbb 	bl	8005820 <acc_rss_integration_log_level>
 800b0aa:	b140      	cbz	r0, 800b0be <acc_cpd_linear_sweep_check+0x76>
 800b0ac:	4b09      	ldr	r3, [pc, #36]	; (800b0d4 <acc_cpd_linear_sweep_check+0x8c>)
 800b0ae:	4a0c      	ldr	r2, [pc, #48]	; (800b0e0 <acc_cpd_linear_sweep_check+0x98>)
 800b0b0:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 800b0b2:	4909      	ldr	r1, [pc, #36]	; (800b0d8 <acc_cpd_linear_sweep_check+0x90>)
 800b0b4:	2005      	movs	r0, #5
 800b0b6:	9000      	str	r0, [sp, #0]
 800b0b8:	4623      	mov	r3, r4
 800b0ba:	2001      	movs	r0, #1
 800b0bc:	47a8      	blx	r5
 800b0be:	2301      	movs	r3, #1
 800b0c0:	7033      	strb	r3, [r6, #0]
 800b0c2:	b002      	add	sp, #8
 800b0c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0c8:	6828      	ldr	r0, [r5, #0]
 800b0ca:	f040 0001 	orr.w	r0, r0, #1
 800b0ce:	6028      	str	r0, [r5, #0]
 800b0d0:	e7e4      	b.n	800b09c <acc_cpd_linear_sweep_check+0x54>
 800b0d2:	bf00      	nop
 800b0d4:	200004c0 	.word	0x200004c0
 800b0d8:	0800fe6c 	.word	0x0800fe6c
 800b0dc:	0800ff80 	.word	0x0800ff80
 800b0e0:	0800ff98 	.word	0x0800ff98

0800b0e4 <acc_cpd_rx_fine_dip_calibration>:
 800b0e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0e8:	ed2d 8b02 	vpush	{d8}
 800b0ec:	f8d2 a000 	ldr.w	sl, [r2]
 800b0f0:	b087      	sub	sp, #28
 800b0f2:	4681      	mov	r9, r0
 800b0f4:	ad05      	add	r5, sp, #20
 800b0f6:	461e      	mov	r6, r3
 800b0f8:	4614      	mov	r4, r2
 800b0fa:	468b      	mov	fp, r1
 800b0fc:	460a      	mov	r2, r1
 800b0fe:	9500      	str	r5, [sp, #0]
 800b100:	4650      	mov	r0, sl
 800b102:	2500      	movs	r5, #0
 800b104:	4649      	mov	r1, r9
 800b106:	ab04      	add	r3, sp, #16
 800b108:	e9cd 6503 	strd	r6, r5, [sp, #12]
 800b10c:	9505      	str	r5, [sp, #20]
 800b10e:	f7fc f977 	bl	8007400 <acc_sensor_protocol_r2_prepare_load>
 800b112:	2800      	cmp	r0, #0
 800b114:	f000 80af 	beq.w	800b276 <acc_cpd_rx_fine_dip_calibration+0x192>
 800b118:	9b05      	ldr	r3, [sp, #20]
 800b11a:	ee08 aa10 	vmov	s16, sl
 800b11e:	ee08 ba90 	vmov	s17, fp
 800b122:	46cb      	mov	fp, r9
 800b124:	f5c5 68d5 	rsb	r8, r5, #1704	; 0x6a8
 800b128:	f108 0806 	add.w	r8, r8, #6
 800b12c:	4598      	cmp	r8, r3
 800b12e:	bf28      	it	cs
 800b130:	4698      	movcs	r8, r3
 800b132:	9e04      	ldr	r6, [sp, #16]
 800b134:	f001 faae 	bl	800c694 <acc_image_a111_r2c_rx_fine_dip_calibration_get>
 800b138:	ea4f 0955 	mov.w	r9, r5, lsr #1
 800b13c:	ea4f 0258 	mov.w	r2, r8, lsr #1
 800b140:	4631      	mov	r1, r6
 800b142:	eb00 0089 	add.w	r0, r0, r9, lsl #2
 800b146:	f001 fa4f 	bl	800c5e8 <acc_confprogram_copy>
 800b14a:	f001 faa7 	bl	800c69c <acc_image_a111_r2c_rx_fine_dip_calibration_param_table_get>
 800b14e:	6862      	ldr	r2, [r4, #4]
 800b150:	9201      	str	r2, [sp, #4]
 800b152:	b2af      	uxth	r7, r5
 800b154:	fa1f fa88 	uxth.w	sl, r8
 800b158:	221b      	movs	r2, #27
 800b15a:	4603      	mov	r3, r0
 800b15c:	4639      	mov	r1, r7
 800b15e:	9200      	str	r2, [sp, #0]
 800b160:	4630      	mov	r0, r6
 800b162:	4652      	mov	r2, sl
 800b164:	f001 f952 	bl	800c40c <acc_confprogram_patch_offset>
 800b168:	f001 fa98 	bl	800c69c <acc_image_a111_r2c_rx_fine_dip_calibration_param_table_get>
 800b16c:	68a2      	ldr	r2, [r4, #8]
 800b16e:	9201      	str	r2, [sp, #4]
 800b170:	2219      	movs	r2, #25
 800b172:	4603      	mov	r3, r0
 800b174:	4639      	mov	r1, r7
 800b176:	9200      	str	r2, [sp, #0]
 800b178:	4630      	mov	r0, r6
 800b17a:	4652      	mov	r2, sl
 800b17c:	f001 f946 	bl	800c40c <acc_confprogram_patch_offset>
 800b180:	f001 fa8c 	bl	800c69c <acc_image_a111_r2c_rx_fine_dip_calibration_param_table_get>
 800b184:	68e2      	ldr	r2, [r4, #12]
 800b186:	9201      	str	r2, [sp, #4]
 800b188:	f04f 0c1a 	mov.w	ip, #26
 800b18c:	4603      	mov	r3, r0
 800b18e:	4652      	mov	r2, sl
 800b190:	4639      	mov	r1, r7
 800b192:	f8cd c000 	str.w	ip, [sp]
 800b196:	4630      	mov	r0, r6
 800b198:	f001 f938 	bl	800c40c <acc_confprogram_patch_offset>
 800b19c:	f001 fa7e 	bl	800c69c <acc_image_a111_r2c_rx_fine_dip_calibration_param_table_get>
 800b1a0:	8a22      	ldrh	r2, [r4, #16]
 800b1a2:	9201      	str	r2, [sp, #4]
 800b1a4:	f04f 0c17 	mov.w	ip, #23
 800b1a8:	4603      	mov	r3, r0
 800b1aa:	4652      	mov	r2, sl
 800b1ac:	4639      	mov	r1, r7
 800b1ae:	f8cd c000 	str.w	ip, [sp]
 800b1b2:	4630      	mov	r0, r6
 800b1b4:	f001 f92a 	bl	800c40c <acc_confprogram_patch_offset>
 800b1b8:	f001 fa70 	bl	800c69c <acc_image_a111_r2c_rx_fine_dip_calibration_param_table_get>
 800b1bc:	69e2      	ldr	r2, [r4, #28]
 800b1be:	9201      	str	r2, [sp, #4]
 800b1c0:	f04f 0c0d 	mov.w	ip, #13
 800b1c4:	4603      	mov	r3, r0
 800b1c6:	4652      	mov	r2, sl
 800b1c8:	4639      	mov	r1, r7
 800b1ca:	f8cd c000 	str.w	ip, [sp]
 800b1ce:	4630      	mov	r0, r6
 800b1d0:	f001 f91c 	bl	800c40c <acc_confprogram_patch_offset>
 800b1d4:	f001 fa62 	bl	800c69c <acc_image_a111_r2c_rx_fine_dip_calibration_param_table_get>
 800b1d8:	6a22      	ldr	r2, [r4, #32]
 800b1da:	9201      	str	r2, [sp, #4]
 800b1dc:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 800b1e0:	4603      	mov	r3, r0
 800b1e2:	4652      	mov	r2, sl
 800b1e4:	4639      	mov	r1, r7
 800b1e6:	f8cd c000 	str.w	ip, [sp]
 800b1ea:	4630      	mov	r0, r6
 800b1ec:	f001 f90e 	bl	800c40c <acc_confprogram_patch_offset>
 800b1f0:	f001 fa54 	bl	800c69c <acc_image_a111_r2c_rx_fine_dip_calibration_param_table_get>
 800b1f4:	69a2      	ldr	r2, [r4, #24]
 800b1f6:	9201      	str	r2, [sp, #4]
 800b1f8:	f04f 0c0f 	mov.w	ip, #15
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	4652      	mov	r2, sl
 800b200:	4639      	mov	r1, r7
 800b202:	f8cd c000 	str.w	ip, [sp]
 800b206:	4630      	mov	r0, r6
 800b208:	f001 f900 	bl	800c40c <acc_confprogram_patch_offset>
 800b20c:	f001 fa46 	bl	800c69c <acc_image_a111_r2c_rx_fine_dip_calibration_param_table_get>
 800b210:	6962      	ldr	r2, [r4, #20]
 800b212:	9201      	str	r2, [sp, #4]
 800b214:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
 800b218:	4603      	mov	r3, r0
 800b21a:	4652      	mov	r2, sl
 800b21c:	4639      	mov	r1, r7
 800b21e:	4630      	mov	r0, r6
 800b220:	f8cd c000 	str.w	ip, [sp]
 800b224:	f001 f8f2 	bl	800c40c <acc_confprogram_patch_offset>
 800b228:	4643      	mov	r3, r8
 800b22a:	465a      	mov	r2, fp
 800b22c:	6820      	ldr	r0, [r4, #0]
 800b22e:	fa1f f189 	uxth.w	r1, r9
 800b232:	f7fb fdf5 	bl	8006e20 <acc_sensor_r2_load_confmem>
 800b236:	9b05      	ldr	r3, [sp, #20]
 800b238:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800b23c:	441d      	add	r5, r3
 800b23e:	4295      	cmp	r5, r2
 800b240:	f67f af70 	bls.w	800b124 <acc_cpd_rx_fine_dip_calibration+0x40>
 800b244:	ee18 0a10 	vmov	r0, s16
 800b248:	2119      	movs	r1, #25
 800b24a:	f7fc f93d 	bl	80074c8 <acc_sensor_protocol_r2_run_program>
 800b24e:	ee18 aa10 	vmov	sl, s16
 800b252:	4606      	mov	r6, r0
 800b254:	b1d8      	cbz	r0, 800b28e <acc_cpd_rx_fine_dip_calibration+0x1aa>
 800b256:	ee18 0a10 	vmov	r0, s16
 800b25a:	2300      	movs	r3, #0
 800b25c:	2208      	movs	r2, #8
 800b25e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800b262:	f7fc fab5 	bl	80077d0 <acc_sensor_protocol_r2_wait_for_specific_event>
 800b266:	b9e8      	cbnz	r0, 800b2a4 <acc_cpd_rx_fine_dip_calibration+0x1c0>
 800b268:	2600      	movs	r6, #0
 800b26a:	4630      	mov	r0, r6
 800b26c:	b007      	add	sp, #28
 800b26e:	ecbd 8b02 	vpop	{d8}
 800b272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b276:	4b2a      	ldr	r3, [pc, #168]	; (800b320 <acc_cpd_rx_fine_dip_calibration+0x23c>)
 800b278:	4a2a      	ldr	r2, [pc, #168]	; (800b324 <acc_cpd_rx_fine_dip_calibration+0x240>)
 800b27a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b27c:	492a      	ldr	r1, [pc, #168]	; (800b328 <acc_cpd_rx_fine_dip_calibration+0x244>)
 800b27e:	4606      	mov	r6, r0
 800b280:	4798      	blx	r3
 800b282:	4630      	mov	r0, r6
 800b284:	b007      	add	sp, #28
 800b286:	ecbd 8b02 	vpop	{d8}
 800b28a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b28e:	4b24      	ldr	r3, [pc, #144]	; (800b320 <acc_cpd_rx_fine_dip_calibration+0x23c>)
 800b290:	4a26      	ldr	r2, [pc, #152]	; (800b32c <acc_cpd_rx_fine_dip_calibration+0x248>)
 800b292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b294:	4924      	ldr	r1, [pc, #144]	; (800b328 <acc_cpd_rx_fine_dip_calibration+0x244>)
 800b296:	4798      	blx	r3
 800b298:	4630      	mov	r0, r6
 800b29a:	b007      	add	sp, #28
 800b29c:	ecbd 8b02 	vpop	{d8}
 800b2a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2a4:	ee18 0a90 	vmov	r0, s17
 800b2a8:	2119      	movs	r1, #25
 800b2aa:	f7fb fdf1 	bl	8006e90 <acc_sensor_r2_buffer_processed_verify_size>
 800b2ae:	4606      	mov	r6, r0
 800b2b0:	b928      	cbnz	r0, 800b2be <acc_cpd_rx_fine_dip_calibration+0x1da>
 800b2b2:	4b1b      	ldr	r3, [pc, #108]	; (800b320 <acc_cpd_rx_fine_dip_calibration+0x23c>)
 800b2b4:	4a1e      	ldr	r2, [pc, #120]	; (800b330 <acc_cpd_rx_fine_dip_calibration+0x24c>)
 800b2b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2b8:	491b      	ldr	r1, [pc, #108]	; (800b328 <acc_cpd_rx_fine_dip_calibration+0x244>)
 800b2ba:	4798      	blx	r3
 800b2bc:	e7e1      	b.n	800b282 <acc_cpd_rx_fine_dip_calibration+0x19e>
 800b2be:	4659      	mov	r1, fp
 800b2c0:	2319      	movs	r3, #25
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	ee18 0a10 	vmov	r0, s16
 800b2c8:	f7fb fdea 	bl	8006ea0 <acc_sensor_r2_buffer_processed_read>
 800b2cc:	2319      	movs	r3, #25
 800b2ce:	4604      	mov	r4, r0
 800b2d0:	4602      	mov	r2, r0
 800b2d2:	ee18 1a10 	vmov	r1, s16
 800b2d6:	200a      	movs	r0, #10
 800b2d8:	f7fc fdae 	bl	8007e38 <acc_probes_execute_uint16>
 800b2dc:	9b03      	ldr	r3, [sp, #12]
 800b2de:	4620      	mov	r0, r4
 800b2e0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800b2e4:	6804      	ldr	r4, [r0, #0]
 800b2e6:	6841      	ldr	r1, [r0, #4]
 800b2e8:	6882      	ldr	r2, [r0, #8]
 800b2ea:	68c5      	ldr	r5, [r0, #12]
 800b2ec:	60dd      	str	r5, [r3, #12]
 800b2ee:	3010      	adds	r0, #16
 800b2f0:	42b0      	cmp	r0, r6
 800b2f2:	601c      	str	r4, [r3, #0]
 800b2f4:	6059      	str	r1, [r3, #4]
 800b2f6:	609a      	str	r2, [r3, #8]
 800b2f8:	f103 0310 	add.w	r3, r3, #16
 800b2fc:	d1f2      	bne.n	800b2e4 <acc_cpd_rx_fine_dip_calibration+0x200>
 800b2fe:	8802      	ldrh	r2, [r0, #0]
 800b300:	801a      	strh	r2, [r3, #0]
 800b302:	4650      	mov	r0, sl
 800b304:	f7fc f96c 	bl	80075e0 <acc_sensor_protocol_r2_ack_event>
 800b308:	4606      	mov	r6, r0
 800b30a:	2800      	cmp	r0, #0
 800b30c:	d0ac      	beq.n	800b268 <acc_cpd_rx_fine_dip_calibration+0x184>
 800b30e:	4909      	ldr	r1, [pc, #36]	; (800b334 <acc_cpd_rx_fine_dip_calibration+0x250>)
 800b310:	4809      	ldr	r0, [pc, #36]	; (800b338 <acc_cpd_rx_fine_dip_calibration+0x254>)
 800b312:	f001 f98f 	bl	800c634 <acc_diagnostic_log_array>
 800b316:	9803      	ldr	r0, [sp, #12]
 800b318:	2119      	movs	r1, #25
 800b31a:	f001 f99b 	bl	800c654 <acc_diagnostic_log_data_u16>
 800b31e:	e7b0      	b.n	800b282 <acc_cpd_rx_fine_dip_calibration+0x19e>
 800b320:	200004c0 	.word	0x200004c0
 800b324:	0800ffd4 	.word	0x0800ffd4
 800b328:	0800fffc 	.word	0x0800fffc
 800b32c:	08010018 	.word	0x08010018
 800b330:	0800f6a8 	.word	0x0800f6a8
 800b334:	0800f840 	.word	0x0800f840
 800b338:	0801004c 	.word	0x0801004c

0800b33c <acc_cpd_sweep_check_voffset_vslope>:
 800b33c:	8802      	ldrh	r2, [r0, #0]
 800b33e:	eddf 4a2e 	vldr	s9, [pc, #184]	; 800b3f8 <acc_cpd_sweep_check_voffset_vslope+0xbc>
 800b342:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800b3fc <acc_cpd_sweep_check_voffset_vslope+0xc0>
 800b346:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 800b400 <acc_cpd_sweep_check_voffset_vslope+0xc4>
 800b34a:	ee07 2a90 	vmov	s15, r2
 800b34e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b352:	b410      	push	{r4}
 800b354:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800b358:	4c2a      	ldr	r4, [pc, #168]	; (800b404 <acc_cpd_sweep_check_voffset_vslope+0xc8>)
 800b35a:	8842      	ldrh	r2, [r0, #2]
 800b35c:	f934 1011 	ldrsh.w	r1, [r4, r1, lsl #1]
 800b360:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 800b364:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800b368:	ee07 1a10 	vmov	s14, r1
 800b36c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800b370:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b374:	ee67 7a86 	vmul.f32	s15, s15, s12
 800b378:	b083      	sub	sp, #12
 800b37a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b37e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b382:	edcd 7a01 	vstr	s15, [sp, #4]
 800b386:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 800b38a:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 800b38e:	f2a0 24ee 	subw	r4, r0, #750	; 0x2ee
 800b392:	f5b4 7f06 	cmp.w	r4, #536	; 0x218
 800b396:	d224      	bcs.n	800b3e2 <acc_cpd_sweep_check_voffset_vslope+0xa6>
 800b398:	f5a0 7043 	sub.w	r0, r0, #780	; 0x30c
 800b39c:	f5b0 7fe6 	cmp.w	r0, #460	; 0x1cc
 800b3a0:	d924      	bls.n	800b3ec <acc_cpd_sweep_check_voffset_vslope+0xb0>
 800b3a2:	ee07 2a90 	vmov	s15, r2
 800b3a6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b3aa:	ee07 1a90 	vmov	s15, r1
 800b3ae:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800b3b2:	ee67 7a24 	vmul.f32	s15, s14, s9
 800b3b6:	3364      	adds	r3, #100	; 0x64
 800b3b8:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800b3bc:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800b3c0:	ee67 7a86 	vmul.f32	s15, s15, s12
 800b3c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b3cc:	ee17 2a90 	vmov	r2, s15
 800b3d0:	b210      	sxth	r0, r2
 800b3d2:	4298      	cmp	r0, r3
 800b3d4:	bfcc      	ite	gt
 800b3d6:	2000      	movgt	r0, #0
 800b3d8:	2001      	movle	r0, #1
 800b3da:	b003      	add	sp, #12
 800b3dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3e0:	4770      	bx	lr
 800b3e2:	2000      	movs	r0, #0
 800b3e4:	b003      	add	sp, #12
 800b3e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3ea:	4770      	bx	lr
 800b3ec:	2001      	movs	r0, #1
 800b3ee:	b003      	add	sp, #12
 800b3f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3f4:	4770      	bx	lr
 800b3f6:	bf00      	nop
 800b3f8:	37800000 	.word	0x37800000
 800b3fc:	3f99999a 	.word	0x3f99999a
 800b400:	447a0000 	.word	0x447a0000
 800b404:	080138a8 	.word	0x080138a8

0800b408 <acc_cpd_sweep_check_count_bad_sweeps>:
 800b408:	b138      	cbz	r0, 800b41a <acc_cpd_sweep_check_count_bad_sweeps+0x12>
 800b40a:	2200      	movs	r2, #0
 800b40c:	1e43      	subs	r3, r0, #1
 800b40e:	4018      	ands	r0, r3
 800b410:	f102 0201 	add.w	r2, r2, #1
 800b414:	d1fa      	bne.n	800b40c <acc_cpd_sweep_check_count_bad_sweeps+0x4>
 800b416:	4610      	mov	r0, r2
 800b418:	4770      	bx	lr
 800b41a:	4602      	mov	r2, r0
 800b41c:	4610      	mov	r0, r2
 800b41e:	4770      	bx	lr

0800b420 <acc_radar_engine_check_asic_id>:
 800b420:	6800      	ldr	r0, [r0, #0]
 800b422:	2100      	movs	r1, #0
 800b424:	f7fc bac6 	b.w	80079b4 <acc_sensor_protocol_r2_check_asic_id>

0800b428 <acc_radar_engine_wait_for_radar_data>:
 800b428:	6800      	ldr	r0, [r0, #0]
 800b42a:	f7fc ba31 	b.w	8007890 <acc_sensor_protocol_r2_wait_for_radar_data>
 800b42e:	bf00      	nop

0800b430 <acc_radar_engine_measure>:
 800b430:	6800      	ldr	r0, [r0, #0]
 800b432:	f7fc b8d5 	b.w	80075e0 <acc_sensor_protocol_r2_ack_event>
 800b436:	bf00      	nop

0800b438 <acc_radar_engine_wait_for_hibernate_ready>:
 800b438:	6800      	ldr	r0, [r0, #0]
 800b43a:	f7fc b9f3 	b.w	8007824 <acc_sensor_protocol_r2_wait_for_hibernate_ready>
 800b43e:	bf00      	nop

0800b440 <acc_radar_engine_acquire_adc_data>:
 800b440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b444:	ed2d 8b02 	vpush	{d8}
 800b448:	2600      	movs	r6, #0
 800b44a:	6016      	str	r6, [r2, #0]
 800b44c:	f8b0 a00c 	ldrh.w	sl, [r0, #12]
 800b450:	ed9f 8a45 	vldr	s16, [pc, #276]	; 800b568 <acc_radar_engine_acquire_adc_data+0x128>
 800b454:	7bc3      	ldrb	r3, [r0, #15]
 800b456:	f890 800e 	ldrb.w	r8, [r0, #14]
 800b45a:	f8d0 b010 	ldr.w	fp, [r0, #16]
 800b45e:	7316      	strb	r6, [r2, #12]
 800b460:	b089      	sub	sp, #36	; 0x24
 800b462:	460f      	mov	r7, r1
 800b464:	7116      	strb	r6, [r2, #4]
 800b466:	f88d 600e 	strb.w	r6, [sp, #14]
 800b46a:	f88d 600f 	strb.w	r6, [sp, #15]
 800b46e:	9301      	str	r3, [sp, #4]
 800b470:	ed82 8a02 	vstr	s16, [r2, #8]
 800b474:	f1ba 0f00 	cmp.w	sl, #0
 800b478:	d05b      	beq.n	800b532 <acc_radar_engine_acquire_adc_data+0xf2>
 800b47a:	4647      	mov	r7, r8
 800b47c:	4614      	mov	r4, r2
 800b47e:	4605      	mov	r5, r0
 800b480:	4688      	mov	r8, r1
 800b482:	b927      	cbnz	r7, 800b48e <acc_radar_engine_acquire_adc_data+0x4e>
 800b484:	6828      	ldr	r0, [r5, #0]
 800b486:	f7fc f8ab 	bl	80075e0 <acc_sensor_protocol_r2_ack_event>
 800b48a:	2800      	cmp	r0, #0
 800b48c:	d05e      	beq.n	800b54c <acc_radar_engine_acquire_adc_data+0x10c>
 800b48e:	6828      	ldr	r0, [r5, #0]
 800b490:	f10d 020e 	add.w	r2, sp, #14
 800b494:	4659      	mov	r1, fp
 800b496:	f7fc f9fb 	bl	8007890 <acc_sensor_protocol_r2_wait_for_radar_data>
 800b49a:	2800      	cmp	r0, #0
 800b49c:	d056      	beq.n	800b54c <acc_radar_engine_acquire_adc_data+0x10c>
 800b49e:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800b4a2:	b903      	cbnz	r3, 800b4a6 <acc_radar_engine_acquire_adc_data+0x66>
 800b4a4:	78a3      	ldrb	r3, [r4, #2]
 800b4a6:	69aa      	ldr	r2, [r5, #24]
 800b4a8:	70a3      	strb	r3, [r4, #2]
 800b4aa:	4641      	mov	r1, r8
 800b4ac:	6953      	ldr	r3, [r2, #20]
 800b4ae:	4628      	mov	r0, r5
 800b4b0:	f10d 020f 	add.w	r2, sp, #15
 800b4b4:	4798      	blx	r3
 800b4b6:	69aa      	ldr	r2, [r5, #24]
 800b4b8:	9004      	str	r0, [sp, #16]
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	f8d2 9018 	ldr.w	r9, [r2, #24]
 800b4c0:	f88d 3014 	strb.w	r3, [sp, #20]
 800b4c4:	f88d 301c 	strb.w	r3, [sp, #28]
 800b4c8:	ed8d 8a06 	vstr	s16, [sp, #24]
 800b4cc:	ab05      	add	r3, sp, #20
 800b4ce:	aa04      	add	r2, sp, #16
 800b4d0:	4641      	mov	r1, r8
 800b4d2:	4628      	mov	r0, r5
 800b4d4:	47c8      	blx	r9
 800b4d6:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800b4da:	b903      	cbnz	r3, 800b4de <acc_radar_engine_acquire_adc_data+0x9e>
 800b4dc:	7b23      	ldrb	r3, [r4, #12]
 800b4de:	f89d 9014 	ldrb.w	r9, [sp, #20]
 800b4e2:	7323      	strb	r3, [r4, #12]
 800b4e4:	f1b9 0f00 	cmp.w	r9, #0
 800b4e8:	d129      	bne.n	800b53e <acc_radar_engine_acquire_adc_data+0xfe>
 800b4ea:	7923      	ldrb	r3, [r4, #4]
 800b4ec:	edd4 0a02 	vldr	s1, [r4, #8]
 800b4f0:	ed9d 0a06 	vldr	s0, [sp, #24]
 800b4f4:	7123      	strb	r3, [r4, #4]
 800b4f6:	f002 fc8d 	bl	800de14 <fmaxf>
 800b4fa:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800b4fe:	ed84 0a02 	vstr	s0, [r4, #8]
 800b502:	b902      	cbnz	r2, 800b506 <acc_radar_engine_acquire_adc_data+0xc6>
 800b504:	78e2      	ldrb	r2, [r4, #3]
 800b506:	8821      	ldrh	r1, [r4, #0]
 800b508:	9b04      	ldr	r3, [sp, #16]
 800b50a:	70e2      	strb	r2, [r4, #3]
 800b50c:	69aa      	ldr	r2, [r5, #24]
 800b50e:	440b      	add	r3, r1
 800b510:	8023      	strh	r3, [r4, #0]
 800b512:	4649      	mov	r1, r9
 800b514:	69d3      	ldr	r3, [r2, #28]
 800b516:	4628      	mov	r0, r5
 800b518:	4798      	blx	r3
 800b51a:	9b01      	ldr	r3, [sp, #4]
 800b51c:	b11b      	cbz	r3, 800b526 <acc_radar_engine_acquire_adc_data+0xe6>
 800b51e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b522:	42b3      	cmp	r3, r6
 800b524:	d018      	beq.n	800b558 <acc_radar_engine_acquire_adc_data+0x118>
 800b526:	b967      	cbnz	r7, 800b542 <acc_radar_engine_acquire_adc_data+0x102>
 800b528:	3601      	adds	r6, #1
 800b52a:	b2b3      	uxth	r3, r6
 800b52c:	4553      	cmp	r3, sl
 800b52e:	d3a8      	bcc.n	800b482 <acc_radar_engine_acquire_adc_data+0x42>
 800b530:	4647      	mov	r7, r8
 800b532:	6838      	ldr	r0, [r7, #0]
 800b534:	b009      	add	sp, #36	; 0x24
 800b536:	ecbd 8b02 	vpop	{d8}
 800b53a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b53e:	464b      	mov	r3, r9
 800b540:	e7d4      	b.n	800b4ec <acc_radar_engine_acquire_adc_data+0xac>
 800b542:	6828      	ldr	r0, [r5, #0]
 800b544:	f7fc f84c 	bl	80075e0 <acc_sensor_protocol_r2_ack_event>
 800b548:	2800      	cmp	r0, #0
 800b54a:	d1ed      	bne.n	800b528 <acc_radar_engine_acquire_adc_data+0xe8>
 800b54c:	2000      	movs	r0, #0
 800b54e:	b009      	add	sp, #36	; 0x24
 800b550:	ecbd 8b02 	vpop	{d8}
 800b554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b558:	f8d8 0000 	ldr.w	r0, [r8]
 800b55c:	b009      	add	sp, #36	; 0x24
 800b55e:	ecbd 8b02 	vpop	{d8}
 800b562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b566:	bf00      	nop
 800b568:	ff800000 	.word	0xff800000

0800b56c <acc_sensor_diagnostics_r2_sensor_status>:
 800b56c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b570:	b094      	sub	sp, #80	; 0x50
 800b572:	4604      	mov	r4, r0
 800b574:	f7fa f954 	bl	8005820 <acc_rss_integration_log_level>
 800b578:	2801      	cmp	r0, #1
 800b57a:	d905      	bls.n	800b588 <acc_sensor_diagnostics_r2_sensor_status+0x1c>
 800b57c:	4b9c      	ldr	r3, [pc, #624]	; (800b7f0 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800b57e:	4a9d      	ldr	r2, [pc, #628]	; (800b7f4 <acc_sensor_diagnostics_r2_sensor_status+0x288>)
 800b580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b582:	499d      	ldr	r1, [pc, #628]	; (800b7f8 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800b584:	2002      	movs	r0, #2
 800b586:	4798      	blx	r3
 800b588:	2201      	movs	r2, #1
 800b58a:	21b2      	movs	r1, #178	; 0xb2
 800b58c:	4620      	mov	r0, r4
 800b58e:	f7fc fcaf 	bl	8007ef0 <acc_sensor_reg_write>
 800b592:	2300      	movs	r3, #0
 800b594:	f8df a258 	ldr.w	sl, [pc, #600]	; 800b7f0 <acc_sensor_diagnostics_r2_sensor_status+0x284>
 800b598:	f8df 9288 	ldr.w	r9, [pc, #648]	; 800b824 <acc_sensor_diagnostics_r2_sensor_status+0x2b8>
 800b59c:	4f96      	ldr	r7, [pc, #600]	; (800b7f8 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800b59e:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 800b5a2:	2564      	movs	r5, #100	; 0x64
 800b5a4:	e013      	b.n	800b5ce <acc_sensor_diagnostics_r2_sensor_status+0x62>
 800b5a6:	f7fa f93b 	bl	8005820 <acc_rss_integration_log_level>
 800b5aa:	2801      	cmp	r0, #1
 800b5ac:	4623      	mov	r3, r4
 800b5ae:	464a      	mov	r2, r9
 800b5b0:	4639      	mov	r1, r7
 800b5b2:	f04f 0002 	mov.w	r0, #2
 800b5b6:	d907      	bls.n	800b5c8 <acc_sensor_diagnostics_r2_sensor_status+0x5c>
 800b5b8:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
 800b5bc:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800b5c0:	9600      	str	r6, [sp, #0]
 800b5c2:	f8da 6034 	ldr.w	r6, [sl, #52]	; 0x34
 800b5c6:	47b0      	blx	r6
 800b5c8:	3d01      	subs	r5, #1
 800b5ca:	b2ad      	uxth	r5, r5
 800b5cc:	b1c5      	cbz	r5, 800b600 <acc_sensor_diagnostics_r2_sensor_status+0x94>
 800b5ce:	aa0c      	add	r2, sp, #48	; 0x30
 800b5d0:	2111      	movs	r1, #17
 800b5d2:	4620      	mov	r0, r4
 800b5d4:	f7fc fc76 	bl	8007ec4 <acc_sensor_reg_read>
 800b5d8:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800b5dc:	055b      	lsls	r3, r3, #21
 800b5de:	d4e2      	bmi.n	800b5a6 <acc_sensor_diagnostics_r2_sensor_status+0x3a>
 800b5e0:	f7fa f91e 	bl	8005820 <acc_rss_integration_log_level>
 800b5e4:	2801      	cmp	r0, #1
 800b5e6:	d90b      	bls.n	800b600 <acc_sensor_diagnostics_r2_sensor_status+0x94>
 800b5e8:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800b5ec:	4980      	ldr	r1, [pc, #512]	; (800b7f0 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800b5ee:	4a83      	ldr	r2, [pc, #524]	; (800b7fc <acc_sensor_diagnostics_r2_sensor_status+0x290>)
 800b5f0:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800b5f2:	4981      	ldr	r1, [pc, #516]	; (800b7f8 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800b5f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b5f8:	9300      	str	r3, [sp, #0]
 800b5fa:	2002      	movs	r0, #2
 800b5fc:	4623      	mov	r3, r4
 800b5fe:	47a8      	blx	r5
 800b600:	2600      	movs	r6, #0
 800b602:	4631      	mov	r1, r6
 800b604:	aa09      	add	r2, sp, #36	; 0x24
 800b606:	4620      	mov	r0, r4
 800b608:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 800b60c:	4d7c      	ldr	r5, [pc, #496]	; (800b800 <acc_sensor_diagnostics_r2_sensor_status+0x294>)
 800b60e:	f7fc fc59 	bl	8007ec4 <acc_sensor_reg_read>
 800b612:	f10d 0226 	add.w	r2, sp, #38	; 0x26
 800b616:	212a      	movs	r1, #42	; 0x2a
 800b618:	4620      	mov	r0, r4
 800b61a:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 800b61e:	f7fc fc51 	bl	8007ec4 <acc_sensor_reg_read>
 800b622:	2128      	movs	r1, #40	; 0x28
 800b624:	aa0a      	add	r2, sp, #40	; 0x28
 800b626:	4620      	mov	r0, r4
 800b628:	f8ad 6028 	strh.w	r6, [sp, #40]	; 0x28
 800b62c:	f105 071e 	add.w	r7, r5, #30
 800b630:	f7fc fc48 	bl	8007ec4 <acc_sensor_reg_read>
 800b634:	ae0c      	add	r6, sp, #48	; 0x30
 800b636:	2163      	movs	r1, #99	; 0x63
 800b638:	e001      	b.n	800b63e <acc_sensor_diagnostics_r2_sensor_status+0xd2>
 800b63a:	f835 1f02 	ldrh.w	r1, [r5, #2]!
 800b63e:	4632      	mov	r2, r6
 800b640:	4620      	mov	r0, r4
 800b642:	f7fc fc3f 	bl	8007ec4 <acc_sensor_reg_read>
 800b646:	42af      	cmp	r7, r5
 800b648:	f106 0602 	add.w	r6, r6, #2
 800b64c:	d1f5      	bne.n	800b63a <acc_sensor_diagnostics_r2_sensor_status+0xce>
 800b64e:	f7fa f8e7 	bl	8005820 <acc_rss_integration_log_level>
 800b652:	2801      	cmp	r0, #1
 800b654:	d91e      	bls.n	800b694 <acc_sensor_diagnostics_r2_sensor_status+0x128>
 800b656:	4d66      	ldr	r5, [pc, #408]	; (800b7f0 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800b658:	f8bd 103e 	ldrh.w	r1, [sp, #62]	; 0x3e
 800b65c:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 800b660:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 800b662:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 800b666:	f8bd 0036 	ldrh.w	r0, [sp, #54]	; 0x36
 800b66a:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 800b66e:	9107      	str	r1, [sp, #28]
 800b670:	9206      	str	r2, [sp, #24]
 800b672:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 800b676:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 800b67a:	9305      	str	r3, [sp, #20]
 800b67c:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800b680:	9300      	str	r3, [sp, #0]
 800b682:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800b686:	e9cd 0603 	strd	r0, r6, [sp, #12]
 800b68a:	4a5e      	ldr	r2, [pc, #376]	; (800b804 <acc_sensor_diagnostics_r2_sensor_status+0x298>)
 800b68c:	495a      	ldr	r1, [pc, #360]	; (800b7f8 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800b68e:	4623      	mov	r3, r4
 800b690:	2002      	movs	r0, #2
 800b692:	47a8      	blx	r5
 800b694:	f7fa f8c4 	bl	8005820 <acc_rss_integration_log_level>
 800b698:	2801      	cmp	r0, #1
 800b69a:	d91e      	bls.n	800b6da <acc_sensor_diagnostics_r2_sensor_status+0x16e>
 800b69c:	4d54      	ldr	r5, [pc, #336]	; (800b7f0 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800b69e:	f8bd 104e 	ldrh.w	r1, [sp, #78]	; 0x4e
 800b6a2:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 800b6a6:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 800b6a8:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
 800b6ac:	f8bd 0046 	ldrh.w	r0, [sp, #70]	; 0x46
 800b6b0:	f8bd 6048 	ldrh.w	r6, [sp, #72]	; 0x48
 800b6b4:	9107      	str	r1, [sp, #28]
 800b6b6:	9206      	str	r2, [sp, #24]
 800b6b8:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
 800b6bc:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 800b6c0:	9305      	str	r3, [sp, #20]
 800b6c2:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800b6c6:	9300      	str	r3, [sp, #0]
 800b6c8:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800b6cc:	e9cd 0603 	strd	r0, r6, [sp, #12]
 800b6d0:	4a4d      	ldr	r2, [pc, #308]	; (800b808 <acc_sensor_diagnostics_r2_sensor_status+0x29c>)
 800b6d2:	4949      	ldr	r1, [pc, #292]	; (800b7f8 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800b6d4:	4623      	mov	r3, r4
 800b6d6:	2002      	movs	r0, #2
 800b6d8:	47a8      	blx	r5
 800b6da:	aa0c      	add	r2, sp, #48	; 0x30
 800b6dc:	2168      	movs	r1, #104	; 0x68
 800b6de:	4620      	mov	r0, r4
 800b6e0:	f7fc fbf0 	bl	8007ec4 <acc_sensor_reg_read>
 800b6e4:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 800b6e8:	2167      	movs	r1, #103	; 0x67
 800b6ea:	4620      	mov	r0, r4
 800b6ec:	f7fc fbea 	bl	8007ec4 <acc_sensor_reg_read>
 800b6f0:	aa0d      	add	r2, sp, #52	; 0x34
 800b6f2:	2166      	movs	r1, #102	; 0x66
 800b6f4:	4620      	mov	r0, r4
 800b6f6:	f7fc fbe5 	bl	8007ec4 <acc_sensor_reg_read>
 800b6fa:	f10d 0236 	add.w	r2, sp, #54	; 0x36
 800b6fe:	2165      	movs	r1, #101	; 0x65
 800b700:	4620      	mov	r0, r4
 800b702:	f7fc fbdf 	bl	8007ec4 <acc_sensor_reg_read>
 800b706:	f7fa f88b 	bl	8005820 <acc_rss_integration_log_level>
 800b70a:	2801      	cmp	r0, #1
 800b70c:	d912      	bls.n	800b734 <acc_sensor_diagnostics_r2_sensor_status+0x1c8>
 800b70e:	f8bd 0036 	ldrh.w	r0, [sp, #54]	; 0x36
 800b712:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 800b716:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 800b71a:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800b71e:	4d34      	ldr	r5, [pc, #208]	; (800b7f0 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800b720:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 800b722:	e9cd 1002 	strd	r1, r0, [sp, #8]
 800b726:	e9cd 3200 	strd	r3, r2, [sp]
 800b72a:	4933      	ldr	r1, [pc, #204]	; (800b7f8 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800b72c:	4a37      	ldr	r2, [pc, #220]	; (800b80c <acc_sensor_diagnostics_r2_sensor_status+0x2a0>)
 800b72e:	4623      	mov	r3, r4
 800b730:	2002      	movs	r0, #2
 800b732:	47a8      	blx	r5
 800b734:	2500      	movs	r5, #0
 800b736:	f10d 022a 	add.w	r2, sp, #42	; 0x2a
 800b73a:	2153      	movs	r1, #83	; 0x53
 800b73c:	4620      	mov	r0, r4
 800b73e:	f8ad 502a 	strh.w	r5, [sp, #42]	; 0x2a
 800b742:	f7fc fbbf 	bl	8007ec4 <acc_sensor_reg_read>
 800b746:	aa0c      	add	r2, sp, #48	; 0x30
 800b748:	2140      	movs	r1, #64	; 0x40
 800b74a:	4620      	mov	r0, r4
 800b74c:	f8ad 5030 	strh.w	r5, [sp, #48]	; 0x30
 800b750:	f7fc fbb8 	bl	8007ec4 <acc_sensor_reg_read>
 800b754:	f7fa f864 	bl	8005820 <acc_rss_integration_log_level>
 800b758:	2801      	cmp	r0, #1
 800b75a:	d909      	bls.n	800b770 <acc_sensor_diagnostics_r2_sensor_status+0x204>
 800b75c:	4a24      	ldr	r2, [pc, #144]	; (800b7f0 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800b75e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800b762:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800b764:	4924      	ldr	r1, [pc, #144]	; (800b7f8 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800b766:	9300      	str	r3, [sp, #0]
 800b768:	4a29      	ldr	r2, [pc, #164]	; (800b810 <acc_sensor_diagnostics_r2_sensor_status+0x2a4>)
 800b76a:	4623      	mov	r3, r4
 800b76c:	2002      	movs	r0, #2
 800b76e:	47a8      	blx	r5
 800b770:	f7fa f856 	bl	8005820 <acc_rss_integration_log_level>
 800b774:	2801      	cmp	r0, #1
 800b776:	d90e      	bls.n	800b796 <acc_sensor_diagnostics_r2_sensor_status+0x22a>
 800b778:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800b77c:	491c      	ldr	r1, [pc, #112]	; (800b7f0 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800b77e:	4a25      	ldr	r2, [pc, #148]	; (800b814 <acc_sensor_diagnostics_r2_sensor_status+0x2a8>)
 800b780:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800b782:	491d      	ldr	r1, [pc, #116]	; (800b7f8 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800b784:	f003 0040 	and.w	r0, r3, #64	; 0x40
 800b788:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b78c:	e9cd 3000 	strd	r3, r0, [sp]
 800b790:	4623      	mov	r3, r4
 800b792:	2002      	movs	r0, #2
 800b794:	47a8      	blx	r5
 800b796:	f7fa f843 	bl	8005820 <acc_rss_integration_log_level>
 800b79a:	2801      	cmp	r0, #1
 800b79c:	d90e      	bls.n	800b7bc <acc_sensor_diagnostics_r2_sensor_status+0x250>
 800b79e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800b7a2:	4913      	ldr	r1, [pc, #76]	; (800b7f0 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800b7a4:	4a1c      	ldr	r2, [pc, #112]	; (800b818 <acc_sensor_diagnostics_r2_sensor_status+0x2ac>)
 800b7a6:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800b7a8:	4913      	ldr	r1, [pc, #76]	; (800b7f8 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800b7aa:	f003 0010 	and.w	r0, r3, #16
 800b7ae:	f003 0320 	and.w	r3, r3, #32
 800b7b2:	e9cd 3000 	strd	r3, r0, [sp]
 800b7b6:	4623      	mov	r3, r4
 800b7b8:	2002      	movs	r0, #2
 800b7ba:	47a8      	blx	r5
 800b7bc:	f7fa f830 	bl	8005820 <acc_rss_integration_log_level>
 800b7c0:	2801      	cmp	r0, #1
 800b7c2:	d90e      	bls.n	800b7e2 <acc_sensor_diagnostics_r2_sensor_status+0x276>
 800b7c4:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800b7c8:	4909      	ldr	r1, [pc, #36]	; (800b7f0 <acc_sensor_diagnostics_r2_sensor_status+0x284>)
 800b7ca:	4a14      	ldr	r2, [pc, #80]	; (800b81c <acc_sensor_diagnostics_r2_sensor_status+0x2b0>)
 800b7cc:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800b7ce:	490a      	ldr	r1, [pc, #40]	; (800b7f8 <acc_sensor_diagnostics_r2_sensor_status+0x28c>)
 800b7d0:	f003 0004 	and.w	r0, r3, #4
 800b7d4:	f003 0308 	and.w	r3, r3, #8
 800b7d8:	e9cd 3000 	strd	r3, r0, [sp]
 800b7dc:	4623      	mov	r3, r4
 800b7de:	2002      	movs	r0, #2
 800b7e0:	47a8      	blx	r5
 800b7e2:	4d0f      	ldr	r5, [pc, #60]	; (800b820 <acc_sensor_diagnostics_r2_sensor_status+0x2b4>)
 800b7e4:	ae0c      	add	r6, sp, #48	; 0x30
 800b7e6:	f105 071e 	add.w	r7, r5, #30
 800b7ea:	21f0      	movs	r1, #240	; 0xf0
 800b7ec:	e01e      	b.n	800b82c <acc_sensor_diagnostics_r2_sensor_status+0x2c0>
 800b7ee:	bf00      	nop
 800b7f0:	200004c0 	.word	0x200004c0
 800b7f4:	0801005c 	.word	0x0801005c
 800b7f8:	0801009c 	.word	0x0801009c
 800b7fc:	080100d4 	.word	0x080100d4
 800b800:	080103e4 	.word	0x080103e4
 800b804:	080100f4 	.word	0x080100f4
 800b808:	0801013c 	.word	0x0801013c
 800b80c:	08010188 	.word	0x08010188
 800b810:	080101bc 	.word	0x080101bc
 800b814:	080101dc 	.word	0x080101dc
 800b818:	08010208 	.word	0x08010208
 800b81c:	0801023c 	.word	0x0801023c
 800b820:	08010404 	.word	0x08010404
 800b824:	080100b4 	.word	0x080100b4
 800b828:	f835 1f02 	ldrh.w	r1, [r5, #2]!
 800b82c:	4632      	mov	r2, r6
 800b82e:	4620      	mov	r0, r4
 800b830:	f7fc fb48 	bl	8007ec4 <acc_sensor_reg_read>
 800b834:	42bd      	cmp	r5, r7
 800b836:	f106 0602 	add.w	r6, r6, #2
 800b83a:	d1f5      	bne.n	800b828 <acc_sensor_diagnostics_r2_sensor_status+0x2bc>
 800b83c:	f7f9 fff0 	bl	8005820 <acc_rss_integration_log_level>
 800b840:	2801      	cmp	r0, #1
 800b842:	f240 80b6 	bls.w	800b9b2 <acc_sensor_diagnostics_r2_sensor_status+0x446>
 800b846:	4a5c      	ldr	r2, [pc, #368]	; (800b9b8 <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 800b848:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800b84c:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800b84e:	495b      	ldr	r1, [pc, #364]	; (800b9bc <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 800b850:	9300      	str	r3, [sp, #0]
 800b852:	4a5b      	ldr	r2, [pc, #364]	; (800b9c0 <acc_sensor_diagnostics_r2_sensor_status+0x454>)
 800b854:	4623      	mov	r3, r4
 800b856:	2002      	movs	r0, #2
 800b858:	47a8      	blx	r5
 800b85a:	2501      	movs	r5, #1
 800b85c:	f7f9 ffe0 	bl	8005820 <acc_rss_integration_log_level>
 800b860:	2801      	cmp	r0, #1
 800b862:	d90e      	bls.n	800b882 <acc_sensor_diagnostics_r2_sensor_status+0x316>
 800b864:	ab14      	add	r3, sp, #80	; 0x50
 800b866:	eb03 0245 	add.w	r2, r3, r5, lsl #1
 800b86a:	4b53      	ldr	r3, [pc, #332]	; (800b9b8 <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 800b86c:	f832 2c20 	ldrh.w	r2, [r2, #-32]
 800b870:	9200      	str	r2, [sp, #0]
 800b872:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800b874:	4a53      	ldr	r2, [pc, #332]	; (800b9c4 <acc_sensor_diagnostics_r2_sensor_status+0x458>)
 800b876:	4951      	ldr	r1, [pc, #324]	; (800b9bc <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 800b878:	3501      	adds	r5, #1
 800b87a:	4623      	mov	r3, r4
 800b87c:	2002      	movs	r0, #2
 800b87e:	b2ed      	uxtb	r5, r5
 800b880:	47b0      	blx	r6
 800b882:	f8df a134 	ldr.w	sl, [pc, #308]	; 800b9b8 <acc_sensor_diagnostics_r2_sensor_status+0x44c>
 800b886:	f8df 9158 	ldr.w	r9, [pc, #344]	; 800b9e0 <acc_sensor_diagnostics_r2_sensor_status+0x474>
 800b88a:	f8df 8130 	ldr.w	r8, [pc, #304]	; 800b9bc <acc_sensor_diagnostics_r2_sensor_status+0x450>
 800b88e:	2601      	movs	r6, #1
 800b890:	f7f9 ffc6 	bl	8005820 <acc_rss_integration_log_level>
 800b894:	ab14      	add	r3, sp, #80	; 0x50
 800b896:	eb03 0c45 	add.w	ip, r3, r5, lsl #1
 800b89a:	2801      	cmp	r0, #1
 800b89c:	4667      	mov	r7, ip
 800b89e:	4623      	mov	r3, r4
 800b8a0:	464a      	mov	r2, r9
 800b8a2:	4641      	mov	r1, r8
 800b8a4:	f04f 0002 	mov.w	r0, #2
 800b8a8:	d909      	bls.n	800b8be <acc_sensor_diagnostics_r2_sensor_status+0x352>
 800b8aa:	f837 7c20 	ldrh.w	r7, [r7, #-32]
 800b8ae:	f83c cc1e 	ldrh.w	ip, [ip, #-30]
 800b8b2:	9600      	str	r6, [sp, #0]
 800b8b4:	e9cd 7c01 	strd	r7, ip, [sp, #4]
 800b8b8:	f8da 7034 	ldr.w	r7, [sl, #52]	; 0x34
 800b8bc:	47b8      	blx	r7
 800b8be:	3601      	adds	r6, #1
 800b8c0:	3502      	adds	r5, #2
 800b8c2:	2e08      	cmp	r6, #8
 800b8c4:	b2ed      	uxtb	r5, r5
 800b8c6:	d1e3      	bne.n	800b890 <acc_sensor_diagnostics_r2_sensor_status+0x324>
 800b8c8:	2500      	movs	r5, #0
 800b8ca:	aa0b      	add	r2, sp, #44	; 0x2c
 800b8cc:	219d      	movs	r1, #157	; 0x9d
 800b8ce:	4620      	mov	r0, r4
 800b8d0:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
 800b8d4:	f7fc faf6 	bl	8007ec4 <acc_sensor_reg_read>
 800b8d8:	f10d 022e 	add.w	r2, sp, #46	; 0x2e
 800b8dc:	2199      	movs	r1, #153	; 0x99
 800b8de:	4620      	mov	r0, r4
 800b8e0:	f8ad 502e 	strh.w	r5, [sp, #46]	; 0x2e
 800b8e4:	f7fc faee 	bl	8007ec4 <acc_sensor_reg_read>
 800b8e8:	aa0c      	add	r2, sp, #48	; 0x30
 800b8ea:	2196      	movs	r1, #150	; 0x96
 800b8ec:	4620      	mov	r0, r4
 800b8ee:	f8ad 5030 	strh.w	r5, [sp, #48]	; 0x30
 800b8f2:	f7fc fae7 	bl	8007ec4 <acc_sensor_reg_read>
 800b8f6:	462a      	mov	r2, r5
 800b8f8:	21b2      	movs	r1, #178	; 0xb2
 800b8fa:	4620      	mov	r0, r4
 800b8fc:	f7fc faf8 	bl	8007ef0 <acc_sensor_reg_write>
 800b900:	f7f9 ff8e 	bl	8005820 <acc_rss_integration_log_level>
 800b904:	2801      	cmp	r0, #1
 800b906:	d90f      	bls.n	800b928 <acc_sensor_diagnostics_r2_sensor_status+0x3bc>
 800b908:	482b      	ldr	r0, [pc, #172]	; (800b9b8 <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 800b90a:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 800b90e:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 800b912:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 800b916:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800b918:	9300      	str	r3, [sp, #0]
 800b91a:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800b91e:	4623      	mov	r3, r4
 800b920:	4a29      	ldr	r2, [pc, #164]	; (800b9c8 <acc_sensor_diagnostics_r2_sensor_status+0x45c>)
 800b922:	4926      	ldr	r1, [pc, #152]	; (800b9bc <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 800b924:	2002      	movs	r0, #2
 800b926:	47a8      	blx	r5
 800b928:	f7f9 ff7a 	bl	8005820 <acc_rss_integration_log_level>
 800b92c:	2801      	cmp	r0, #1
 800b92e:	d909      	bls.n	800b944 <acc_sensor_diagnostics_r2_sensor_status+0x3d8>
 800b930:	4a21      	ldr	r2, [pc, #132]	; (800b9b8 <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 800b932:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 800b936:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800b938:	4920      	ldr	r1, [pc, #128]	; (800b9bc <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 800b93a:	9300      	str	r3, [sp, #0]
 800b93c:	4a23      	ldr	r2, [pc, #140]	; (800b9cc <acc_sensor_diagnostics_r2_sensor_status+0x460>)
 800b93e:	4623      	mov	r3, r4
 800b940:	2002      	movs	r0, #2
 800b942:	47a8      	blx	r5
 800b944:	f7f9 ff6c 	bl	8005820 <acc_rss_integration_log_level>
 800b948:	2801      	cmp	r0, #1
 800b94a:	d909      	bls.n	800b960 <acc_sensor_diagnostics_r2_sensor_status+0x3f4>
 800b94c:	4a1a      	ldr	r2, [pc, #104]	; (800b9b8 <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 800b94e:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800b952:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800b954:	4919      	ldr	r1, [pc, #100]	; (800b9bc <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 800b956:	9300      	str	r3, [sp, #0]
 800b958:	4a1d      	ldr	r2, [pc, #116]	; (800b9d0 <acc_sensor_diagnostics_r2_sensor_status+0x464>)
 800b95a:	4623      	mov	r3, r4
 800b95c:	2002      	movs	r0, #2
 800b95e:	47a8      	blx	r5
 800b960:	f7f9 ff5e 	bl	8005820 <acc_rss_integration_log_level>
 800b964:	2801      	cmp	r0, #1
 800b966:	d909      	bls.n	800b97c <acc_sensor_diagnostics_r2_sensor_status+0x410>
 800b968:	4a13      	ldr	r2, [pc, #76]	; (800b9b8 <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 800b96a:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 800b96e:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800b970:	4912      	ldr	r1, [pc, #72]	; (800b9bc <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 800b972:	9300      	str	r3, [sp, #0]
 800b974:	4a17      	ldr	r2, [pc, #92]	; (800b9d4 <acc_sensor_diagnostics_r2_sensor_status+0x468>)
 800b976:	4623      	mov	r3, r4
 800b978:	2002      	movs	r0, #2
 800b97a:	47a8      	blx	r5
 800b97c:	f7f9 ff50 	bl	8005820 <acc_rss_integration_log_level>
 800b980:	2801      	cmp	r0, #1
 800b982:	d909      	bls.n	800b998 <acc_sensor_diagnostics_r2_sensor_status+0x42c>
 800b984:	4a0c      	ldr	r2, [pc, #48]	; (800b9b8 <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 800b986:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800b98a:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800b98c:	490b      	ldr	r1, [pc, #44]	; (800b9bc <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 800b98e:	9300      	str	r3, [sp, #0]
 800b990:	4a11      	ldr	r2, [pc, #68]	; (800b9d8 <acc_sensor_diagnostics_r2_sensor_status+0x46c>)
 800b992:	4623      	mov	r3, r4
 800b994:	2002      	movs	r0, #2
 800b996:	47a8      	blx	r5
 800b998:	f7f9 ff42 	bl	8005820 <acc_rss_integration_log_level>
 800b99c:	2801      	cmp	r0, #1
 800b99e:	d905      	bls.n	800b9ac <acc_sensor_diagnostics_r2_sensor_status+0x440>
 800b9a0:	4b05      	ldr	r3, [pc, #20]	; (800b9b8 <acc_sensor_diagnostics_r2_sensor_status+0x44c>)
 800b9a2:	4a0e      	ldr	r2, [pc, #56]	; (800b9dc <acc_sensor_diagnostics_r2_sensor_status+0x470>)
 800b9a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9a6:	4905      	ldr	r1, [pc, #20]	; (800b9bc <acc_sensor_diagnostics_r2_sensor_status+0x450>)
 800b9a8:	2002      	movs	r0, #2
 800b9aa:	4798      	blx	r3
 800b9ac:	b014      	add	sp, #80	; 0x50
 800b9ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9b2:	2500      	movs	r5, #0
 800b9b4:	e752      	b.n	800b85c <acc_sensor_diagnostics_r2_sensor_status+0x2f0>
 800b9b6:	bf00      	nop
 800b9b8:	200004c0 	.word	0x200004c0
 800b9bc:	0801009c 	.word	0x0801009c
 800b9c0:	0801026c 	.word	0x0801026c
 800b9c4:	08010294 	.word	0x08010294
 800b9c8:	080102dc 	.word	0x080102dc
 800b9cc:	08010330 	.word	0x08010330
 800b9d0:	08010354 	.word	0x08010354
 800b9d4:	08010370 	.word	0x08010370
 800b9d8:	08010388 	.word	0x08010388
 800b9dc:	080103a4 	.word	0x080103a4
 800b9e0:	080102b4 	.word	0x080102b4

0800b9e4 <acc_alg_basic_saturation_check_u16>:
 800b9e4:	eddf 6a17 	vldr	s13, [pc, #92]	; 800ba44 <acc_alg_basic_saturation_check_u16+0x60>
 800b9e8:	ed9f 6a17 	vldr	s12, [pc, #92]	; 800ba48 <acc_alg_basic_saturation_check_u16+0x64>
 800b9ec:	ee76 5ac0 	vsub.f32	s11, s13, s0
 800b9f0:	ee80 7a26 	vdiv.f32	s14, s0, s13
 800b9f4:	0849      	lsrs	r1, r1, #1
 800b9f6:	eec5 7aa6 	vdiv.f32	s15, s11, s13
 800b9fa:	ee27 7a06 	vmul.f32	s14, s14, s12
 800b9fe:	ee67 7a86 	vmul.f32	s15, s15, s12
 800ba02:	d01c      	beq.n	800ba3e <acc_alg_basic_saturation_check_u16+0x5a>
 800ba04:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800ba08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba0c:	ee17 3a10 	vmov	r3, s14
 800ba10:	b430      	push	{r4, r5}
 800ba12:	b29d      	uxth	r5, r3
 800ba14:	ee17 3a90 	vmov	r3, s15
 800ba18:	b29c      	uxth	r4, r3
 800ba1a:	1e83      	subs	r3, r0, #2
 800ba1c:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 800ba20:	e003      	b.n	800ba2a <acc_alg_basic_saturation_check_u16+0x46>
 800ba22:	42aa      	cmp	r2, r5
 800ba24:	d905      	bls.n	800ba32 <acc_alg_basic_saturation_check_u16+0x4e>
 800ba26:	428b      	cmp	r3, r1
 800ba28:	d006      	beq.n	800ba38 <acc_alg_basic_saturation_check_u16+0x54>
 800ba2a:	f833 2f02 	ldrh.w	r2, [r3, #2]!
 800ba2e:	42a2      	cmp	r2, r4
 800ba30:	d3f7      	bcc.n	800ba22 <acc_alg_basic_saturation_check_u16+0x3e>
 800ba32:	2001      	movs	r0, #1
 800ba34:	bc30      	pop	{r4, r5}
 800ba36:	4770      	bx	lr
 800ba38:	2000      	movs	r0, #0
 800ba3a:	bc30      	pop	{r4, r5}
 800ba3c:	4770      	bx	lr
 800ba3e:	4608      	mov	r0, r1
 800ba40:	4770      	bx	lr
 800ba42:	bf00      	nop
 800ba44:	42c80000 	.word	0x42c80000
 800ba48:	477fff00 	.word	0x477fff00

0800ba4c <acc_alg_basic_saturation_check_i16>:
 800ba4c:	eddf 6a17 	vldr	s13, [pc, #92]	; 800baac <acc_alg_basic_saturation_check_i16+0x60>
 800ba50:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800bab0 <acc_alg_basic_saturation_check_i16+0x64>
 800ba54:	ed9f 6a17 	vldr	s12, [pc, #92]	; 800bab4 <acc_alg_basic_saturation_check_i16+0x68>
 800ba58:	ee36 0ac0 	vsub.f32	s0, s13, s0
 800ba5c:	0849      	lsrs	r1, r1, #1
 800ba5e:	eec0 7a26 	vdiv.f32	s15, s0, s13
 800ba62:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ba66:	ee67 7a86 	vmul.f32	s15, s15, s12
 800ba6a:	d01c      	beq.n	800baa6 <acc_alg_basic_saturation_check_i16+0x5a>
 800ba6c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800ba70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ba74:	ee17 3a10 	vmov	r3, s14
 800ba78:	b430      	push	{r4, r5}
 800ba7a:	b21d      	sxth	r5, r3
 800ba7c:	ee17 3a90 	vmov	r3, s15
 800ba80:	b21c      	sxth	r4, r3
 800ba82:	1e83      	subs	r3, r0, #2
 800ba84:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 800ba88:	e003      	b.n	800ba92 <acc_alg_basic_saturation_check_i16+0x46>
 800ba8a:	42aa      	cmp	r2, r5
 800ba8c:	dd05      	ble.n	800ba9a <acc_alg_basic_saturation_check_i16+0x4e>
 800ba8e:	428b      	cmp	r3, r1
 800ba90:	d006      	beq.n	800baa0 <acc_alg_basic_saturation_check_i16+0x54>
 800ba92:	f933 2f02 	ldrsh.w	r2, [r3, #2]!
 800ba96:	42a2      	cmp	r2, r4
 800ba98:	dbf7      	blt.n	800ba8a <acc_alg_basic_saturation_check_i16+0x3e>
 800ba9a:	2001      	movs	r0, #1
 800ba9c:	bc30      	pop	{r4, r5}
 800ba9e:	4770      	bx	lr
 800baa0:	2000      	movs	r0, #0
 800baa2:	bc30      	pop	{r4, r5}
 800baa4:	4770      	bx	lr
 800baa6:	4608      	mov	r0, r1
 800baa8:	4770      	bx	lr
 800baaa:	bf00      	nop
 800baac:	42c80000 	.word	0x42c80000
 800bab0:	c7000000 	.word	0xc7000000
 800bab4:	46fffe00 	.word	0x46fffe00

0800bab8 <acc_alg_basic_subtract_mean_uint16>:
 800bab8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800babc:	b570      	push	{r4, r5, r6, lr}
 800babe:	d13c      	bne.n	800bb3a <acc_alg_basic_subtract_mean_uint16+0x82>
 800bac0:	2900      	cmp	r1, #0
 800bac2:	d036      	beq.n	800bb32 <acc_alg_basic_subtract_mean_uint16+0x7a>
 800bac4:	eb00 0641 	add.w	r6, r0, r1, lsl #1
 800bac8:	4604      	mov	r4, r0
 800baca:	2500      	movs	r5, #0
 800bacc:	f834 2b02 	ldrh.w	r2, [r4], #2
 800bad0:	f5a2 4200 	sub.w	r2, r2, #32768	; 0x8000
 800bad4:	42a6      	cmp	r6, r4
 800bad6:	4415      	add	r5, r2
 800bad8:	d1f8      	bne.n	800bacc <acc_alg_basic_subtract_mean_uint16+0x14>
 800bada:	2d00      	cmp	r5, #0
 800badc:	bfac      	ite	ge
 800bade:	2401      	movge	r4, #1
 800bae0:	f04f 34ff 	movlt.w	r4, #4294967295
 800bae4:	084a      	lsrs	r2, r1, #1
 800bae6:	fb04 5202 	mla	r2, r4, r2, r5
 800baea:	fb92 f5f1 	sdiv	r5, r2, r1
 800baee:	b22c      	sxth	r4, r5
 800baf0:	2c00      	cmp	r4, #0
 800baf2:	dd0e      	ble.n	800bb12 <acc_alg_basic_subtract_mean_uint16+0x5a>
 800baf4:	b2ad      	uxth	r5, r5
 800baf6:	f830 2b02 	ldrh.w	r2, [r0], #2
 800bafa:	42aa      	cmp	r2, r5
 800bafc:	bf26      	itte	cs
 800bafe:	1b52      	subcs	r2, r2, r5
 800bb00:	b292      	uxthcs	r2, r2
 800bb02:	2200      	movcc	r2, #0
 800bb04:	4286      	cmp	r6, r0
 800bb06:	f820 2c02 	strh.w	r2, [r0, #-2]
 800bb0a:	d1f4      	bne.n	800baf6 <acc_alg_basic_subtract_mean_uint16+0x3e>
 800bb0c:	b103      	cbz	r3, 800bb10 <acc_alg_basic_subtract_mean_uint16+0x58>
 800bb0e:	801c      	strh	r4, [r3, #0]
 800bb10:	bd70      	pop	{r4, r5, r6, pc}
 800bb12:	f504 417f 	add.w	r1, r4, #65280	; 0xff00
 800bb16:	31ff      	adds	r1, #255	; 0xff
 800bb18:	f830 2b02 	ldrh.w	r2, [r0], #2
 800bb1c:	4291      	cmp	r1, r2
 800bb1e:	bfa6      	itte	ge
 800bb20:	1b52      	subge	r2, r2, r5
 800bb22:	b292      	uxthge	r2, r2
 800bb24:	f64f 72ff 	movwlt	r2, #65535	; 0xffff
 800bb28:	42b0      	cmp	r0, r6
 800bb2a:	f820 2c02 	strh.w	r2, [r0, #-2]
 800bb2e:	d1f3      	bne.n	800bb18 <acc_alg_basic_subtract_mean_uint16+0x60>
 800bb30:	e7ec      	b.n	800bb0c <acc_alg_basic_subtract_mean_uint16+0x54>
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d0ec      	beq.n	800bb10 <acc_alg_basic_subtract_mean_uint16+0x58>
 800bb36:	8019      	strh	r1, [r3, #0]
 800bb38:	bd70      	pop	{r4, r5, r6, pc}
 800bb3a:	4802      	ldr	r0, [pc, #8]	; (800bb44 <acc_alg_basic_subtract_mean_uint16+0x8c>)
 800bb3c:	211b      	movs	r1, #27
 800bb3e:	f7fc f893 	bl	8007c68 <acc_assert_fail>
 800bb42:	bf00      	nop
 800bb44:	08010424 	.word	0x08010424

0800bb48 <acc_alg_basic_subtract_section_mean_q12_4>:
 800bb48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb4c:	2a00      	cmp	r2, #0
 800bb4e:	bf14      	ite	ne
 800bb50:	4690      	movne	r8, r2
 800bb52:	4688      	moveq	r8, r1
 800bb54:	b1b9      	cbz	r1, 800bb86 <acc_alg_basic_subtract_section_mean_q12_4+0x3e>
 800bb56:	460f      	mov	r7, r1
 800bb58:	4681      	mov	r9, r0
 800bb5a:	469a      	mov	sl, r3
 800bb5c:	460d      	mov	r5, r1
 800bb5e:	4646      	mov	r6, r8
 800bb60:	2400      	movs	r4, #0
 800bb62:	19a3      	adds	r3, r4, r6
 800bb64:	42bb      	cmp	r3, r7
 800bb66:	bfc8      	it	gt
 800bb68:	462e      	movgt	r6, r5
 800bb6a:	eb09 0044 	add.w	r0, r9, r4, lsl #1
 800bb6e:	4444      	add	r4, r8
 800bb70:	4631      	mov	r1, r6
 800bb72:	2300      	movs	r3, #0
 800bb74:	4652      	mov	r2, sl
 800bb76:	b2a4      	uxth	r4, r4
 800bb78:	f7ff ff9e 	bl	800bab8 <acc_alg_basic_subtract_mean_uint16>
 800bb7c:	eba5 0508 	sub.w	r5, r5, r8
 800bb80:	42a7      	cmp	r7, r4
 800bb82:	b2ad      	uxth	r5, r5
 800bb84:	d8ed      	bhi.n	800bb62 <acc_alg_basic_subtract_section_mean_q12_4+0x1a>
 800bb86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb8a:	bf00      	nop

0800bb8c <acc_alg_basic_exponential_smoothing_q3_12_complex>:
 800bb8c:	b33b      	cbz	r3, 800bbde <acc_alg_basic_exponential_smoothing_q3_12_complex+0x52>
 800bb8e:	b4f0      	push	{r4, r5, r6, r7}
 800bb90:	f100 0c02 	add.w	ip, r0, #2
 800bb94:	2400      	movs	r4, #0
 800bb96:	1c8f      	adds	r7, r1, #2
 800bb98:	f931 6024 	ldrsh.w	r6, [r1, r4, lsl #2]
 800bb9c:	f930 5024 	ldrsh.w	r5, [r0, r4, lsl #2]
 800bba0:	1bad      	subs	r5, r5, r6
 800bba2:	fb02 f505 	mul.w	r5, r2, r5
 800bba6:	2d00      	cmp	r5, #0
 800bba8:	bfb8      	it	lt
 800bbaa:	f605 75ff 	addwlt	r5, r5, #4095	; 0xfff
 800bbae:	eb06 3525 	add.w	r5, r6, r5, asr #12
 800bbb2:	f821 5024 	strh.w	r5, [r1, r4, lsl #2]
 800bbb6:	f93c 5024 	ldrsh.w	r5, [ip, r4, lsl #2]
 800bbba:	f937 6024 	ldrsh.w	r6, [r7, r4, lsl #2]
 800bbbe:	1bad      	subs	r5, r5, r6
 800bbc0:	fb02 f505 	mul.w	r5, r2, r5
 800bbc4:	2d00      	cmp	r5, #0
 800bbc6:	bfb8      	it	lt
 800bbc8:	f605 75ff 	addwlt	r5, r5, #4095	; 0xfff
 800bbcc:	eb06 3525 	add.w	r5, r6, r5, asr #12
 800bbd0:	f827 5024 	strh.w	r5, [r7, r4, lsl #2]
 800bbd4:	3401      	adds	r4, #1
 800bbd6:	42a3      	cmp	r3, r4
 800bbd8:	d1de      	bne.n	800bb98 <acc_alg_basic_exponential_smoothing_q3_12_complex+0xc>
 800bbda:	bcf0      	pop	{r4, r5, r6, r7}
 800bbdc:	4770      	bx	lr
 800bbde:	4770      	bx	lr

0800bbe0 <acc_alg_biquad_q3_12_lowpass_coeffs>:
 800bbe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbe4:	eddf 7abd 	vldr	s15, [pc, #756]	; 800bedc <acc_alg_biquad_q3_12_lowpass_coeffs+0x2fc>
 800bbe8:	eeb0 0ac0 	vabs.f32	s0, s0
 800bbec:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800bbf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbf4:	ed2d 8b02 	vpush	{d8}
 800bbf8:	4680      	mov	r8, r0
 800bbfa:	4689      	mov	r9, r1
 800bbfc:	4616      	mov	r6, r2
 800bbfe:	461f      	mov	r7, r3
 800bc00:	f300 810a 	bgt.w	800be18 <acc_alg_biquad_q3_12_lowpass_coeffs+0x238>
 800bc04:	eddf 7ab6 	vldr	s15, [pc, #728]	; 800bee0 <acc_alg_biquad_q3_12_lowpass_coeffs+0x300>
 800bc08:	ee20 0a27 	vmul.f32	s0, s0, s15
 800bc0c:	f002 f93a 	bl	800de84 <roundf>
 800bc10:	ed9f 7ab4 	vldr	s14, [pc, #720]	; 800bee4 <acc_alg_biquad_q3_12_lowpass_coeffs+0x304>
 800bc14:	eddf 7ab4 	vldr	s15, [pc, #720]	; 800bee8 <acc_alg_biquad_q3_12_lowpass_coeffs+0x308>
 800bc18:	ee20 0a07 	vmul.f32	s0, s0, s14
 800bc1c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800bc20:	f1b8 0f00 	cmp.w	r8, #0
 800bc24:	d036      	beq.n	800bc94 <acc_alg_biquad_q3_12_lowpass_coeffs+0xb4>
 800bc26:	f000 fdbd 	bl	800c7a4 <acc_alg_basic_math_restricted_tan_f32>
 800bc2a:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 800beec <acc_alg_biquad_q3_12_lowpass_coeffs+0x30c>
 800bc2e:	eddf 7ab0 	vldr	s15, [pc, #704]	; 800bef0 <acc_alg_biquad_q3_12_lowpass_coeffs+0x310>
 800bc32:	ee20 0a07 	vmul.f32	s0, s0, s14
 800bc36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc3a:	ee30 7a27 	vadd.f32	s14, s0, s15
 800bc3e:	ee60 7a27 	vmul.f32	s15, s0, s15
 800bc42:	ee27 0a00 	vmul.f32	s0, s14, s0
 800bc46:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800bc4a:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 800bc4e:	eec0 7a07 	vdiv.f32	s15, s0, s14
 800bc52:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800bc56:	eef4 7ac6 	vcmpe.f32	s15, s12
 800bc5a:	ee37 7a26 	vadd.f32	s14, s14, s13
 800bc5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc62:	eef1 5ac7 	vsqrt.f32	s11, s14
 800bc66:	ee86 7aa5 	vdiv.f32	s14, s13, s11
 800bc6a:	d533      	bpl.n	800bcd4 <acc_alg_biquad_q3_12_lowpass_coeffs+0xf4>
 800bc6c:	eef4 7ae6 	vcmpe.f32	s15, s13
 800bc70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc74:	f340 80d3 	ble.w	800be1e <acc_alg_biquad_q3_12_lowpass_coeffs+0x23e>
 800bc78:	eddf 7a9e 	vldr	s15, [pc, #632]	; 800bef4 <acc_alg_biquad_q3_12_lowpass_coeffs+0x314>
 800bc7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc80:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800bc84:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bc88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bc8c:	ee17 3a90 	vmov	r3, s15
 800bc90:	005c      	lsls	r4, r3, #1
 800bc92:	e0d0      	b.n	800be36 <acc_alg_biquad_q3_12_lowpass_coeffs+0x256>
 800bc94:	f000 fd86 	bl	800c7a4 <acc_alg_basic_math_restricted_tan_f32>
 800bc98:	eddf 7a95 	vldr	s15, [pc, #596]	; 800bef0 <acc_alg_biquad_q3_12_lowpass_coeffs+0x310>
 800bc9c:	ee30 7a27 	vadd.f32	s14, s0, s15
 800bca0:	ee60 7a27 	vmul.f32	s15, s0, s15
 800bca4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bca8:	ee27 0a00 	vmul.f32	s0, s14, s0
 800bcac:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800bcb0:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 800bcb4:	eec0 7a07 	vdiv.f32	s15, s0, s14
 800bcb8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800bcbc:	eef4 7ac6 	vcmpe.f32	s15, s12
 800bcc0:	ee37 7a26 	vadd.f32	s14, s14, s13
 800bcc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcc8:	eef1 5ac7 	vsqrt.f32	s11, s14
 800bccc:	ee86 7aa5 	vdiv.f32	s14, s13, s11
 800bcd0:	f100 80a5 	bmi.w	800be1e <acc_alg_biquad_q3_12_lowpass_coeffs+0x23e>
 800bcd4:	eddf 6a88 	vldr	s13, [pc, #544]	; 800bef8 <acc_alg_biquad_q3_12_lowpass_coeffs+0x318>
 800bcd8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bcdc:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800bce0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bce4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bce8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bcec:	ee17 5a90 	vmov	r5, s15
 800bcf0:	fb05 f305 	mul.w	r3, r5, r5
 800bcf4:	f1c3 6380 	rsb	r3, r3, #67108864	; 0x4000000
 800bcf8:	ee07 3a90 	vmov	s15, r3
 800bcfc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800bd00:	eef1 7ac7 	vsqrt.f32	s15, s14
 800bd04:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bd08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bd10:	ee17 4a90 	vmov	r4, s15
 800bd14:	2c00      	cmp	r4, #0
 800bd16:	f000 80a4 	beq.w	800be62 <acc_alg_biquad_q3_12_lowpass_coeffs+0x282>
 800bd1a:	f1b9 0f00 	cmp.w	r9, #0
 800bd1e:	d017      	beq.n	800bd50 <acc_alg_biquad_q3_12_lowpass_coeffs+0x170>
 800bd20:	b2a3      	uxth	r3, r4
 800bd22:	f5c3 5180 	rsb	r1, r3, #4096	; 0x1000
 800bd26:	b208      	sxth	r0, r1
 800bd28:	b2aa      	uxth	r2, r5
 800bd2a:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 800bd2e:	f8a9 0000 	strh.w	r0, [r9]
 800bd32:	f8a9 0004 	strh.w	r0, [r9, #4]
 800bd36:	f5c4 50c0 	rsb	r0, r4, #6144	; 0x1800
 800bd3a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800bd3e:	0049      	lsls	r1, r1, #1
 800bd40:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 800bd44:	f8a9 1002 	strh.w	r1, [r9, #2]
 800bd48:	f8a9 3006 	strh.w	r3, [r9, #6]
 800bd4c:	f8a9 2008 	strh.w	r2, [r9, #8]
 800bd50:	2d00      	cmp	r5, #0
 800bd52:	f000 80a1 	beq.w	800be98 <acc_alg_biquad_q3_12_lowpass_coeffs+0x2b8>
 800bd56:	2e00      	cmp	r6, #0
 800bd58:	f000 80b8 	beq.w	800becc <acc_alg_biquad_q3_12_lowpass_coeffs+0x2ec>
 800bd5c:	f5c4 5280 	rsb	r2, r4, #4096	; 0x1000
 800bd60:	fb05 f305 	mul.w	r3, r5, r5
 800bd64:	fb04 f404 	mul.w	r4, r4, r4
 800bd68:	ebc5 0242 	rsb	r2, r5, r2, lsl #1
 800bd6c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bd70:	f104 447c 	add.w	r4, r4, #4227858432	; 0xfc000000
 800bd74:	fb02 f202 	mul.w	r2, r2, r2
 800bd78:	eba2 0244 	sub.w	r2, r2, r4, lsl #1
 800bd7c:	ee07 2a90 	vmov	s15, r2
 800bd80:	0064      	lsls	r4, r4, #1
 800bd82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bd86:	ee07 4a90 	vmov	s15, r4
 800bd8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bd8e:	ee87 8a87 	vdiv.f32	s16, s15, s14
 800bd92:	b356      	cbz	r6, 800bdea <acc_alg_biquad_q3_12_lowpass_coeffs+0x20a>
 800bd94:	f1b8 0f00 	cmp.w	r8, #0
 800bd98:	f040 8089 	bne.w	800beae <acc_alg_biquad_q3_12_lowpass_coeffs+0x2ce>
 800bd9c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800bda0:	ee78 6a27 	vadd.f32	s13, s16, s15
 800bda4:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800bda8:	ee76 7aa6 	vadd.f32	s15, s13, s13
 800bdac:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bdb0:	ee77 7a86 	vadd.f32	s15, s15, s12
 800bdb4:	eef1 6ae7 	vsqrt.f32	s13, s15
 800bdb8:	f5c5 5500 	rsb	r5, r5, #8192	; 0x2000
 800bdbc:	006d      	lsls	r5, r5, #1
 800bdbe:	eeb1 6ac7 	vsqrt.f32	s12, s14
 800bdc2:	ee07 5a90 	vmov	s15, r5
 800bdc6:	ee36 7ac8 	vsub.f32	s14, s13, s16
 800bdca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bdce:	eef1 6ac7 	vsqrt.f32	s13, s14
 800bdd2:	ee86 0a27 	vdiv.f32	s0, s12, s15
 800bdd6:	ee20 0a26 	vmul.f32	s0, s0, s13
 800bdda:	f000 fcf3 	bl	800c7c4 <acc_alg_basic_math_restricted_atan_f32>
 800bdde:	ed9f 7a42 	vldr	s14, [pc, #264]	; 800bee8 <acc_alg_biquad_q3_12_lowpass_coeffs+0x308>
 800bde2:	eec0 7a07 	vdiv.f32	s15, s0, s14
 800bde6:	edc6 7a00 	vstr	s15, [r6]
 800bdea:	2f00      	cmp	r7, #0
 800bdec:	d071      	beq.n	800bed2 <acc_alg_biquad_q3_12_lowpass_coeffs+0x2f2>
 800bdee:	eddf 7a43 	vldr	s15, [pc, #268]	; 800befc <acc_alg_biquad_q3_12_lowpass_coeffs+0x31c>
 800bdf2:	eddf 6a43 	vldr	s13, [pc, #268]	; 800bf00 <acc_alg_biquad_q3_12_lowpass_coeffs+0x320>
 800bdf6:	ee28 7a27 	vmul.f32	s14, s16, s15
 800bdfa:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800bdfe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800be02:	2001      	movs	r0, #1
 800be04:	ee28 8a67 	vnmul.f32	s16, s16, s15
 800be08:	eec8 7a26 	vdiv.f32	s15, s16, s13
 800be0c:	ecbd 8b02 	vpop	{d8}
 800be10:	edc7 7a00 	vstr	s15, [r7]
 800be14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be18:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 800bf04 <acc_alg_biquad_q3_12_lowpass_coeffs+0x324>
 800be1c:	e700      	b.n	800bc20 <acc_alg_biquad_q3_12_lowpass_coeffs+0x40>
 800be1e:	eddf 7a3a 	vldr	s15, [pc, #232]	; 800bf08 <acc_alg_biquad_q3_12_lowpass_coeffs+0x328>
 800be22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be26:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800be2a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800be2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800be32:	ee17 4a90 	vmov	r4, s15
 800be36:	fb04 f304 	mul.w	r3, r4, r4
 800be3a:	009b      	lsls	r3, r3, #2
 800be3c:	f1c3 6380 	rsb	r3, r3, #67108864	; 0x4000000
 800be40:	ee07 3a90 	vmov	s15, r3
 800be44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be48:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800be4c:	eeb1 7ae7 	vsqrt.f32	s14, s15
 800be50:	ee77 7a26 	vadd.f32	s15, s14, s13
 800be54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800be58:	ee17 5a90 	vmov	r5, s15
 800be5c:	2c00      	cmp	r4, #0
 800be5e:	f47f af5c 	bne.w	800bd1a <acc_alg_biquad_q3_12_lowpass_coeffs+0x13a>
 800be62:	f1b9 0f00 	cmp.w	r9, #0
 800be66:	d00b      	beq.n	800be80 <acc_alg_biquad_q3_12_lowpass_coeffs+0x2a0>
 800be68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800be6c:	f8a9 4002 	strh.w	r4, [r9, #2]
 800be70:	f8a9 4004 	strh.w	r4, [r9, #4]
 800be74:	f8a9 4006 	strh.w	r4, [r9, #6]
 800be78:	f8a9 4008 	strh.w	r4, [r9, #8]
 800be7c:	f8a9 3000 	strh.w	r3, [r9]
 800be80:	b116      	cbz	r6, 800be88 <acc_alg_biquad_q3_12_lowpass_coeffs+0x2a8>
 800be82:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 800be86:	6033      	str	r3, [r6, #0]
 800be88:	b167      	cbz	r7, 800bea4 <acc_alg_biquad_q3_12_lowpass_coeffs+0x2c4>
 800be8a:	ecbd 8b02 	vpop	{d8}
 800be8e:	2300      	movs	r3, #0
 800be90:	2000      	movs	r0, #0
 800be92:	603b      	str	r3, [r7, #0]
 800be94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be98:	2e00      	cmp	r6, #0
 800be9a:	d0f5      	beq.n	800be88 <acc_alg_biquad_q3_12_lowpass_coeffs+0x2a8>
 800be9c:	2300      	movs	r3, #0
 800be9e:	6033      	str	r3, [r6, #0]
 800bea0:	2f00      	cmp	r7, #0
 800bea2:	d1f2      	bne.n	800be8a <acc_alg_biquad_q3_12_lowpass_coeffs+0x2aa>
 800bea4:	ecbd 8b02 	vpop	{d8}
 800bea8:	4638      	mov	r0, r7
 800beaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800beae:	eddf 6a17 	vldr	s13, [pc, #92]	; 800bf0c <acc_alg_biquad_q3_12_lowpass_coeffs+0x32c>
 800beb2:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800bef0 <acc_alg_biquad_q3_12_lowpass_coeffs+0x310>
 800beb6:	ed9f 6a16 	vldr	s12, [pc, #88]	; 800bf10 <acc_alg_biquad_q3_12_lowpass_coeffs+0x330>
 800beba:	ee78 6a26 	vadd.f32	s13, s16, s13
 800bebe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bec2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bec6:	ee77 7a86 	vadd.f32	s15, s15, s12
 800beca:	e773      	b.n	800bdb4 <acc_alg_biquad_q3_12_lowpass_coeffs+0x1d4>
 800becc:	2f00      	cmp	r7, #0
 800bece:	f47f af45 	bne.w	800bd5c <acc_alg_biquad_q3_12_lowpass_coeffs+0x17c>
 800bed2:	ecbd 8b02 	vpop	{d8}
 800bed6:	2001      	movs	r0, #1
 800bed8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bedc:	3effffde 	.word	0x3effffde
 800bee0:	48800000 	.word	0x48800000
 800bee4:	36800000 	.word	0x36800000
 800bee8:	40490fdb 	.word	0x40490fdb
 800beec:	3f9f8d77 	.word	0x3f9f8d77
 800bef0:	3fb504f3 	.word	0x3fb504f3
 800bef4:	45000000 	.word	0x45000000
 800bef8:	46000000 	.word	0x46000000
 800befc:	4113c6ef 	.word	0x4113c6ef
 800bf00:	42a646e1 	.word	0x42a646e1
 800bf04:	3fc90fdb 	.word	0x3fc90fdb
 800bf08:	45800000 	.word	0x45800000
 800bf0c:	3f15f61a 	.word	0x3f15f61a
 800bf10:	3f95f61a 	.word	0x3f95f61a

0800bf14 <acc_alg_biquad_q3_12_complex_direct_form_1_filtfilt_reduced_edge_transients>:
 800bf14:	b570      	push	{r4, r5, r6, lr}
 800bf16:	2300      	movs	r3, #0
 800bf18:	b082      	sub	sp, #8
 800bf1a:	4615      	mov	r5, r2
 800bf1c:	460c      	mov	r4, r1
 800bf1e:	4606      	mov	r6, r0
 800bf20:	f7f4 f95a 	bl	80001d8 <acc_alg_biquad_q3_12_complex_direct_form_1>
 800bf24:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
 800bf28:	3b01      	subs	r3, #1
 800bf2a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800bf2e:	f834 3023 	ldrh.w	r3, [r4, r3, lsl #2]
 800bf32:	8852      	ldrh	r2, [r2, #2]
 800bf34:	f8ad 2006 	strh.w	r2, [sp, #6]
 800bf38:	f8ad 3004 	strh.w	r3, [sp, #4]
 800bf3c:	9b01      	ldr	r3, [sp, #4]
 800bf3e:	4630      	mov	r0, r6
 800bf40:	462a      	mov	r2, r5
 800bf42:	4621      	mov	r1, r4
 800bf44:	b002      	add	sp, #8
 800bf46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bf4a:	f7f4 b941 	b.w	80001d0 <acc_alg_biquad_q3_12_complex_direct_form_1_reverse>
 800bf4e:	bf00      	nop

0800bf50 <acc_alg_iq_demodulation_q3_12_real>:
 800bf50:	ee20 1a01 	vmul.f32	s2, s0, s2
 800bf54:	ee60 0a20 	vmul.f32	s1, s0, s1
 800bf58:	eefd 7ac1 	vcvt.s32.f32	s15, s2
 800bf5c:	eebd 0ae0 	vcvt.s32.f32	s0, s1
 800bf60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bf64:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800bf68:	ee31 1a67 	vsub.f32	s2, s2, s15
 800bf6c:	ee30 0ac0 	vsub.f32	s0, s1, s0
 800bf70:	eddf 7a26 	vldr	s15, [pc, #152]	; 800c00c <acc_alg_iq_demodulation_q3_12_real+0xbc>
 800bf74:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800c010 <acc_alg_iq_demodulation_q3_12_real+0xc0>
 800bf78:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 800bf7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf84:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800bf88:	bfb4      	ite	lt
 800bf8a:	eeb0 6a66 	vmovlt.f32	s12, s13
 800bf8e:	eeb0 6a67 	vmovge.f32	s12, s15
 800bf92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf96:	bfb8      	it	lt
 800bf98:	eef0 7a66 	vmovlt.f32	s15, s13
 800bf9c:	ee31 1a06 	vadd.f32	s2, s2, s12
 800bfa0:	ee30 0a27 	vadd.f32	s0, s0, s15
 800bfa4:	ee21 1a07 	vmul.f32	s2, s2, s14
 800bfa8:	ee20 0a07 	vmul.f32	s0, s0, s14
 800bfac:	b36a      	cbz	r2, 800c00a <acc_alg_iq_demodulation_q3_12_real+0xba>
 800bfae:	eefc 7ac1 	vcvt.u32.f32	s15, s2
 800bfb2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfb6:	ee17 9a90 	vmov	r9, s15
 800bfba:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800bfbe:	1e85      	subs	r5, r0, #2
 800bfc0:	ee17 7a90 	vmov	r7, s15
 800bfc4:	eb05 0842 	add.w	r8, r5, r2, lsl #1
 800bfc8:	1c8e      	adds	r6, r1, #2
 800bfca:	4648      	mov	r0, r9
 800bfcc:	f935 4f02 	ldrsh.w	r4, [r5, #2]!
 800bfd0:	f000 fd04 	bl	800c9dc <acc_alg_basic_math_q3_12_cos>
 800bfd4:	4603      	mov	r3, r0
 800bfd6:	fb04 f303 	mul.w	r3, r4, r3
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	bfb8      	it	lt
 800bfde:	f603 73ff 	addwlt	r3, r3, #4095	; 0xfff
 800bfe2:	131b      	asrs	r3, r3, #12
 800bfe4:	4648      	mov	r0, r9
 800bfe6:	f826 3c02 	strh.w	r3, [r6, #-2]
 800bfea:	f000 fce1 	bl	800c9b0 <acc_alg_basic_math_q3_12_sin>
 800bfee:	fb04 f000 	mul.w	r0, r4, r0
 800bff2:	2800      	cmp	r0, #0
 800bff4:	bfb8      	it	lt
 800bff6:	f600 70ff 	addwlt	r0, r0, #4095	; 0xfff
 800bffa:	1300      	asrs	r0, r0, #12
 800bffc:	45a8      	cmp	r8, r5
 800bffe:	f826 0b04 	strh.w	r0, [r6], #4
 800c002:	44b9      	add	r9, r7
 800c004:	d1e1      	bne.n	800bfca <acc_alg_iq_demodulation_q3_12_real+0x7a>
 800c006:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c00a:	4770      	bx	lr
 800c00c:	00000000 	.word	0x00000000
 800c010:	4f800000 	.word	0x4f800000

0800c014 <acc_alg_iq_demodulation_q3_12_complex>:
 800c014:	ee20 1a01 	vmul.f32	s2, s0, s2
 800c018:	ee60 0a20 	vmul.f32	s1, s0, s1
 800c01c:	eefd 7ac1 	vcvt.s32.f32	s15, s2
 800c020:	eebd 0ae0 	vcvt.s32.f32	s0, s1
 800c024:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c028:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800c02c:	ee31 1a67 	vsub.f32	s2, s2, s15
 800c030:	ee30 0ac0 	vsub.f32	s0, s1, s0
 800c034:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800c0f0 <acc_alg_iq_demodulation_q3_12_complex+0xdc>
 800c038:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800c0f4 <acc_alg_iq_demodulation_q3_12_complex+0xe0>
 800c03c:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 800c040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c044:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c048:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800c04c:	bfb4      	ite	lt
 800c04e:	eeb0 6a66 	vmovlt.f32	s12, s13
 800c052:	eeb0 6a67 	vmovge.f32	s12, s15
 800c056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c05a:	bfb8      	it	lt
 800c05c:	eef0 7a66 	vmovlt.f32	s15, s13
 800c060:	ee31 1a06 	vadd.f32	s2, s2, s12
 800c064:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c068:	ee21 1a07 	vmul.f32	s2, s2, s14
 800c06c:	ee20 0a07 	vmul.f32	s0, s0, s14
 800c070:	b3e9      	cbz	r1, 800c0ee <acc_alg_iq_demodulation_q3_12_complex+0xda>
 800c072:	eefc 7ac1 	vcvt.u32.f32	s15, s2
 800c076:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c07a:	ee17 8a90 	vmov	r8, s15
 800c07e:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800c082:	4607      	mov	r7, r0
 800c084:	ee17 5a90 	vmov	r5, s15
 800c088:	eb00 0681 	add.w	r6, r0, r1, lsl #2
 800c08c:	4640      	mov	r0, r8
 800c08e:	f9b7 9000 	ldrsh.w	r9, [r7]
 800c092:	f9b7 a002 	ldrsh.w	sl, [r7, #2]
 800c096:	f000 fca1 	bl	800c9dc <acc_alg_basic_math_q3_12_cos>
 800c09a:	4604      	mov	r4, r0
 800c09c:	4640      	mov	r0, r8
 800c09e:	f000 fc87 	bl	800c9b0 <acc_alg_basic_math_q3_12_sin>
 800c0a2:	fb09 f204 	mul.w	r2, r9, r4
 800c0a6:	fb0a f100 	mul.w	r1, sl, r0
 800c0aa:	2a00      	cmp	r2, #0
 800c0ac:	fb04 f30a 	mul.w	r3, r4, sl
 800c0b0:	bfb8      	it	lt
 800c0b2:	f602 72ff 	addwlt	r2, r2, #4095	; 0xfff
 800c0b6:	2900      	cmp	r1, #0
 800c0b8:	fb09 f000 	mul.w	r0, r9, r0
 800c0bc:	bfb8      	it	lt
 800c0be:	f601 71ff 	addwlt	r1, r1, #4095	; 0xfff
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	bfb8      	it	lt
 800c0c6:	f603 73ff 	addwlt	r3, r3, #4095	; 0xfff
 800c0ca:	2800      	cmp	r0, #0
 800c0cc:	bfb8      	it	lt
 800c0ce:	f600 70ff 	addwlt	r0, r0, #4095	; 0xfff
 800c0d2:	1312      	asrs	r2, r2, #12
 800c0d4:	131b      	asrs	r3, r3, #12
 800c0d6:	eba2 3221 	sub.w	r2, r2, r1, asr #12
 800c0da:	eb03 3320 	add.w	r3, r3, r0, asr #12
 800c0de:	803a      	strh	r2, [r7, #0]
 800c0e0:	807b      	strh	r3, [r7, #2]
 800c0e2:	3704      	adds	r7, #4
 800c0e4:	42be      	cmp	r6, r7
 800c0e6:	44a8      	add	r8, r5
 800c0e8:	d1d0      	bne.n	800c08c <acc_alg_iq_demodulation_q3_12_complex+0x78>
 800c0ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0ee:	4770      	bx	lr
 800c0f0:	00000000 	.word	0x00000000
 800c0f4:	4f800000 	.word	0x4f800000

0800c0f8 <acc_alg_phase_estimation_q3_12>:
 800c0f8:	2a01      	cmp	r2, #1
 800c0fa:	b4f0      	push	{r4, r5, r6, r7}
 800c0fc:	d94c      	bls.n	800c198 <acc_alg_phase_estimation_q3_12+0xa0>
 800c0fe:	eb00 0c82 	add.w	ip, r0, r2, lsl #2
 800c102:	f1ac 0c04 	sub.w	ip, ip, #4
 800c106:	4603      	mov	r3, r0
 800c108:	f9b3 7000 	ldrsh.w	r7, [r3]
 800c10c:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 800c110:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 800c114:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
 800c118:	1bed      	subs	r5, r5, r7
 800c11a:	fb01 f505 	mul.w	r5, r1, r5
 800c11e:	1ba4      	subs	r4, r4, r6
 800c120:	2d00      	cmp	r5, #0
 800c122:	fb01 f404 	mul.w	r4, r1, r4
 800c126:	bfb8      	it	lt
 800c128:	f605 75ff 	addwlt	r5, r5, #4095	; 0xfff
 800c12c:	2c00      	cmp	r4, #0
 800c12e:	bfb8      	it	lt
 800c130:	f604 74ff 	addwlt	r4, r4, #4095	; 0xfff
 800c134:	eb07 3525 	add.w	r5, r7, r5, asr #12
 800c138:	eb06 3424 	add.w	r4, r6, r4, asr #12
 800c13c:	809d      	strh	r5, [r3, #4]
 800c13e:	80dc      	strh	r4, [r3, #6]
 800c140:	3304      	adds	r3, #4
 800c142:	4563      	cmp	r3, ip
 800c144:	d1e0      	bne.n	800c108 <acc_alg_phase_estimation_q3_12+0x10>
 800c146:	1e53      	subs	r3, r2, #1
 800c148:	3a02      	subs	r2, #2
 800c14a:	eb00 0483 	add.w	r4, r0, r3, lsl #2
 800c14e:	f930 6023 	ldrsh.w	r6, [r0, r3, lsl #2]
 800c152:	f9b4 5002 	ldrsh.w	r5, [r4, #2]
 800c156:	1c87      	adds	r7, r0, #2
 800c158:	f930 4022 	ldrsh.w	r4, [r0, r2, lsl #2]
 800c15c:	1ba4      	subs	r4, r4, r6
 800c15e:	fb01 f404 	mul.w	r4, r1, r4
 800c162:	2c00      	cmp	r4, #0
 800c164:	bfb8      	it	lt
 800c166:	f604 74ff 	addwlt	r4, r4, #4095	; 0xfff
 800c16a:	eb06 3624 	add.w	r6, r6, r4, asr #12
 800c16e:	b236      	sxth	r6, r6
 800c170:	f820 6022 	strh.w	r6, [r0, r2, lsl #2]
 800c174:	f937 3022 	ldrsh.w	r3, [r7, r2, lsl #2]
 800c178:	1b5b      	subs	r3, r3, r5
 800c17a:	fb01 f303 	mul.w	r3, r1, r3
 800c17e:	2b00      	cmp	r3, #0
 800c180:	bfb8      	it	lt
 800c182:	f603 73ff 	addwlt	r3, r3, #4095	; 0xfff
 800c186:	eb05 3523 	add.w	r5, r5, r3, asr #12
 800c18a:	b22d      	sxth	r5, r5
 800c18c:	f827 5022 	strh.w	r5, [r7, r2, lsl #2]
 800c190:	3a01      	subs	r2, #1
 800c192:	d2e1      	bcs.n	800c158 <acc_alg_phase_estimation_q3_12+0x60>
 800c194:	bcf0      	pop	{r4, r5, r6, r7}
 800c196:	4770      	bx	lr
 800c198:	d0fc      	beq.n	800c194 <acc_alg_phase_estimation_q3_12+0x9c>
 800c19a:	f06f 0201 	mvn.w	r2, #1
 800c19e:	f04f 33ff 	mov.w	r3, #4294967295
 800c1a2:	e7d2      	b.n	800c14a <acc_alg_phase_estimation_q3_12+0x52>

0800c1a4 <acc_alg_power_bins>:
 800c1a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1a8:	2900      	cmp	r1, #0
 800c1aa:	d03e      	beq.n	800c22a <acc_alg_power_bins+0x86>
 800c1ac:	1e87      	subs	r7, r0, #2
 800c1ae:	eb07 0c41 	add.w	ip, r7, r1, lsl #1
 800c1b2:	463e      	mov	r6, r7
 800c1b4:	004d      	lsls	r5, r1, #1
 800c1b6:	2400      	movs	r4, #0
 800c1b8:	f836 ef02 	ldrh.w	lr, [r6, #2]!
 800c1bc:	4566      	cmp	r6, ip
 800c1be:	4474      	add	r4, lr
 800c1c0:	d1fa      	bne.n	800c1b8 <acc_alg_power_bins+0x14>
 800c1c2:	fbb4 f4f1 	udiv	r4, r4, r1
 800c1c6:	b2a6      	uxth	r6, r4
 800c1c8:	f837 4f02 	ldrh.w	r4, [r7, #2]!
 800c1cc:	42b4      	cmp	r4, r6
 800c1ce:	bf8c      	ite	hi
 800c1d0:	1ba4      	subhi	r4, r4, r6
 800c1d2:	1b34      	subls	r4, r6, r4
 800c1d4:	b2a4      	uxth	r4, r4
 800c1d6:	4567      	cmp	r7, ip
 800c1d8:	803c      	strh	r4, [r7, #0]
 800c1da:	d1f5      	bne.n	800c1c8 <acc_alg_power_bins+0x24>
 800c1dc:	b31b      	cbz	r3, 800c226 <acc_alg_power_bins+0x82>
 800c1de:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800c1e2:	f04f 0800 	mov.w	r8, #0
 800c1e6:	e00c      	b.n	800c202 <acc_alg_power_bins+0x5e>
 800c1e8:	f8a2 8000 	strh.w	r8, [r2]
 800c1ec:	3b01      	subs	r3, #1
 800c1ee:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800c1f2:	eba1 0106 	sub.w	r1, r1, r6
 800c1f6:	f1ae 0e02 	sub.w	lr, lr, #2
 800c1fa:	f102 0202 	add.w	r2, r2, #2
 800c1fe:	d012      	beq.n	800c226 <acc_alg_power_bins+0x82>
 800c200:	004d      	lsls	r5, r1, #1
 800c202:	441d      	add	r5, r3
 800c204:	4575      	cmp	r5, lr
 800c206:	fbb5 f6fe 	udiv	r6, r5, lr
 800c20a:	d3ed      	bcc.n	800c1e8 <acc_alg_power_bins+0x44>
 800c20c:	2500      	movs	r5, #0
 800c20e:	462c      	mov	r4, r5
 800c210:	1e87      	subs	r7, r0, #2
 800c212:	f837 cf02 	ldrh.w	ip, [r7, #2]!
 800c216:	3401      	adds	r4, #1
 800c218:	42a6      	cmp	r6, r4
 800c21a:	4465      	add	r5, ip
 800c21c:	d8f9      	bhi.n	800c212 <acc_alg_power_bins+0x6e>
 800c21e:	fbb5 f5f6 	udiv	r5, r5, r6
 800c222:	8015      	strh	r5, [r2, #0]
 800c224:	e7e2      	b.n	800c1ec <acc_alg_power_bins+0x48>
 800c226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c22a:	4802      	ldr	r0, [pc, #8]	; (800c234 <acc_alg_power_bins+0x90>)
 800c22c:	2124      	movs	r1, #36	; 0x24
 800c22e:	f7fb fd1b 	bl	8007c68 <acc_assert_fail>
 800c232:	bf00      	nop
 800c234:	0801043c 	.word	0x0801043c

0800c238 <acc_confprogram_modify_bin_sensor>:
 800c238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c23c:	b082      	sub	sp, #8
 800c23e:	e9dd 690a 	ldrd	r6, r9, [sp, #40]	; 0x28
 800c242:	2501      	movs	r5, #1
 800c244:	409d      	lsls	r5, r3
 800c246:	42b5      	cmp	r5, r6
 800c248:	461c      	mov	r4, r3
 800c24a:	4607      	mov	r7, r0
 800c24c:	468a      	mov	sl, r1
 800c24e:	4690      	mov	r8, r2
 800c250:	d809      	bhi.n	800c266 <acc_confprogram_modify_bin_sensor+0x2e>
 800c252:	4b10      	ldr	r3, [pc, #64]	; (800c294 <acc_confprogram_modify_bin_sensor+0x5c>)
 800c254:	9600      	str	r6, [sp, #0]
 800c256:	3d01      	subs	r5, #1
 800c258:	9501      	str	r5, [sp, #4]
 800c25a:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 800c25c:	4a0e      	ldr	r2, [pc, #56]	; (800c298 <acc_confprogram_modify_bin_sensor+0x60>)
 800c25e:	490f      	ldr	r1, [pc, #60]	; (800c29c <acc_confprogram_modify_bin_sensor+0x64>)
 800c260:	4653      	mov	r3, sl
 800c262:	2000      	movs	r0, #0
 800c264:	47a8      	blx	r5
 800c266:	4651      	mov	r1, sl
 800c268:	4638      	mov	r0, r7
 800c26a:	f7fb fe7f 	bl	8007f6c <acc_sensor_conf_read_instr>
 800c26e:	f1c4 0420 	rsb	r4, r4, #32
 800c272:	f04f 35ff 	mov.w	r5, #4294967295
 800c276:	40e5      	lsrs	r5, r4
 800c278:	fa05 f408 	lsl.w	r4, r5, r8
 800c27c:	ea20 0204 	bic.w	r2, r0, r4
 800c280:	fa06 f608 	lsl.w	r6, r6, r8
 800c284:	4651      	mov	r1, sl
 800c286:	4638      	mov	r0, r7
 800c288:	4332      	orrs	r2, r6
 800c28a:	464b      	mov	r3, r9
 800c28c:	b002      	add	sp, #8
 800c28e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c292:	4718      	bx	r3
 800c294:	200004c0 	.word	0x200004c0
 800c298:	0801044c 	.word	0x0801044c
 800c29c:	08010484 	.word	0x08010484

0800c2a0 <acc_confprogram_modify_bin>:
 800c2a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c2a4:	b085      	sub	sp, #20
 800c2a6:	f04f 0c01 	mov.w	ip, #1
 800c2aa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c2ac:	fa0c fc03 	lsl.w	ip, ip, r3
 800c2b0:	45b4      	cmp	ip, r6
 800c2b2:	461d      	mov	r5, r3
 800c2b4:	4680      	mov	r8, r0
 800c2b6:	460c      	mov	r4, r1
 800c2b8:	4617      	mov	r7, r2
 800c2ba:	d80b      	bhi.n	800c2d4 <acc_confprogram_modify_bin+0x34>
 800c2bc:	4b13      	ldr	r3, [pc, #76]	; (800c30c <acc_confprogram_modify_bin+0x6c>)
 800c2be:	9600      	str	r6, [sp, #0]
 800c2c0:	f10c 32ff 	add.w	r2, ip, #4294967295
 800c2c4:	9201      	str	r2, [sp, #4]
 800c2c6:	f8d3 9034 	ldr.w	r9, [r3, #52]	; 0x34
 800c2ca:	4a11      	ldr	r2, [pc, #68]	; (800c310 <acc_confprogram_modify_bin+0x70>)
 800c2cc:	4911      	ldr	r1, [pc, #68]	; (800c314 <acc_confprogram_modify_bin+0x74>)
 800c2ce:	4623      	mov	r3, r4
 800c2d0:	2000      	movs	r0, #0
 800c2d2:	47c8      	blx	r9
 800c2d4:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 800c2d8:	4620      	mov	r0, r4
 800c2da:	a902      	add	r1, sp, #8
 800c2dc:	2201      	movs	r2, #1
 800c2de:	f7fb ff8d 	bl	80081fc <acc_utils_transfer_buffer_to_uint32>
 800c2e2:	f1c5 0520 	rsb	r5, r5, #32
 800c2e6:	f04f 33ff 	mov.w	r3, #4294967295
 800c2ea:	9902      	ldr	r1, [sp, #8]
 800c2ec:	40eb      	lsrs	r3, r5
 800c2ee:	40bb      	lsls	r3, r7
 800c2f0:	fa06 f207 	lsl.w	r2, r6, r7
 800c2f4:	ea21 0303 	bic.w	r3, r1, r3
 800c2f8:	4313      	orrs	r3, r2
 800c2fa:	4621      	mov	r1, r4
 800c2fc:	2201      	movs	r2, #1
 800c2fe:	a803      	add	r0, sp, #12
 800c300:	9303      	str	r3, [sp, #12]
 800c302:	f7fb ff6d 	bl	80081e0 <acc_utils_uint32_to_transfer_buffer>
 800c306:	b005      	add	sp, #20
 800c308:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c30c:	200004c0 	.word	0x200004c0
 800c310:	08010490 	.word	0x08010490
 800c314:	08010484 	.word	0x08010484

0800c318 <acc_confprogram_modify_runif_sensor>:
 800c318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c31c:	4614      	mov	r4, r2
 800c31e:	b082      	sub	sp, #8
 800c320:	f851 5024 	ldr.w	r5, [r1, r4, lsl #2]
 800c324:	f89d 2020 	ldrb.w	r2, [sp, #32]
 800c328:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 800c32c:	f025 050f 	bic.w	r5, r5, #15
 800c330:	4606      	mov	r6, r0
 800c332:	b1b2      	cbz	r2, 800c362 <acc_confprogram_modify_runif_sensor+0x4a>
 800c334:	461f      	mov	r7, r3
 800c336:	f7f9 fa73 	bl	8005820 <acc_rss_integration_log_level>
 800c33a:	2803      	cmp	r0, #3
 800c33c:	ea45 0507 	orr.w	r5, r5, r7
 800c340:	d907      	bls.n	800c352 <acc_confprogram_modify_runif_sensor+0x3a>
 800c342:	4b0e      	ldr	r3, [pc, #56]	; (800c37c <acc_confprogram_modify_runif_sensor+0x64>)
 800c344:	9700      	str	r7, [sp, #0]
 800c346:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 800c348:	4a0d      	ldr	r2, [pc, #52]	; (800c380 <acc_confprogram_modify_runif_sensor+0x68>)
 800c34a:	490e      	ldr	r1, [pc, #56]	; (800c384 <acc_confprogram_modify_runif_sensor+0x6c>)
 800c34c:	4623      	mov	r3, r4
 800c34e:	2004      	movs	r0, #4
 800c350:	47b8      	blx	r7
 800c352:	462a      	mov	r2, r5
 800c354:	4621      	mov	r1, r4
 800c356:	4630      	mov	r0, r6
 800c358:	4643      	mov	r3, r8
 800c35a:	b002      	add	sp, #8
 800c35c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c360:	4718      	bx	r3
 800c362:	f7f9 fa5d 	bl	8005820 <acc_rss_integration_log_level>
 800c366:	2803      	cmp	r0, #3
 800c368:	d9f3      	bls.n	800c352 <acc_confprogram_modify_runif_sensor+0x3a>
 800c36a:	4b04      	ldr	r3, [pc, #16]	; (800c37c <acc_confprogram_modify_runif_sensor+0x64>)
 800c36c:	4a06      	ldr	r2, [pc, #24]	; (800c388 <acc_confprogram_modify_runif_sensor+0x70>)
 800c36e:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 800c370:	4904      	ldr	r1, [pc, #16]	; (800c384 <acc_confprogram_modify_runif_sensor+0x6c>)
 800c372:	4623      	mov	r3, r4
 800c374:	2004      	movs	r0, #4
 800c376:	47b8      	blx	r7
 800c378:	e7eb      	b.n	800c352 <acc_confprogram_modify_runif_sensor+0x3a>
 800c37a:	bf00      	nop
 800c37c:	200004c0 	.word	0x200004c0
 800c380:	080104c8 	.word	0x080104c8
 800c384:	08010484 	.word	0x08010484
 800c388:	08010500 	.word	0x08010500

0800c38c <acc_confprogram_modify_runif>:
 800c38c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c390:	eb00 0542 	add.w	r5, r0, r2, lsl #1
 800c394:	b084      	sub	sp, #16
 800c396:	4616      	mov	r6, r2
 800c398:	460f      	mov	r7, r1
 800c39a:	4628      	mov	r0, r5
 800c39c:	2201      	movs	r2, #1
 800c39e:	a902      	add	r1, sp, #8
 800c3a0:	4698      	mov	r8, r3
 800c3a2:	f7fb ff2b 	bl	80081fc <acc_utils_transfer_buffer_to_uint32>
 800c3a6:	9c02      	ldr	r4, [sp, #8]
 800c3a8:	f024 040f 	bic.w	r4, r4, #15
 800c3ac:	9403      	str	r4, [sp, #12]
 800c3ae:	f1b8 0f00 	cmp.w	r8, #0
 800c3b2:	d015      	beq.n	800c3e0 <acc_confprogram_modify_runif+0x54>
 800c3b4:	433c      	orrs	r4, r7
 800c3b6:	9403      	str	r4, [sp, #12]
 800c3b8:	f7f9 fa32 	bl	8005820 <acc_rss_integration_log_level>
 800c3bc:	2803      	cmp	r0, #3
 800c3be:	d907      	bls.n	800c3d0 <acc_confprogram_modify_runif+0x44>
 800c3c0:	4a0e      	ldr	r2, [pc, #56]	; (800c3fc <acc_confprogram_modify_runif+0x70>)
 800c3c2:	9700      	str	r7, [sp, #0]
 800c3c4:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800c3c6:	490e      	ldr	r1, [pc, #56]	; (800c400 <acc_confprogram_modify_runif+0x74>)
 800c3c8:	4a0e      	ldr	r2, [pc, #56]	; (800c404 <acc_confprogram_modify_runif+0x78>)
 800c3ca:	0873      	lsrs	r3, r6, #1
 800c3cc:	2004      	movs	r0, #4
 800c3ce:	47a0      	blx	r4
 800c3d0:	4629      	mov	r1, r5
 800c3d2:	2201      	movs	r2, #1
 800c3d4:	a803      	add	r0, sp, #12
 800c3d6:	f7fb ff03 	bl	80081e0 <acc_utils_uint32_to_transfer_buffer>
 800c3da:	b004      	add	sp, #16
 800c3dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3e0:	f7f9 fa1e 	bl	8005820 <acc_rss_integration_log_level>
 800c3e4:	2803      	cmp	r0, #3
 800c3e6:	d9f3      	bls.n	800c3d0 <acc_confprogram_modify_runif+0x44>
 800c3e8:	4a04      	ldr	r2, [pc, #16]	; (800c3fc <acc_confprogram_modify_runif+0x70>)
 800c3ea:	9700      	str	r7, [sp, #0]
 800c3ec:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800c3ee:	4904      	ldr	r1, [pc, #16]	; (800c400 <acc_confprogram_modify_runif+0x74>)
 800c3f0:	4a05      	ldr	r2, [pc, #20]	; (800c408 <acc_confprogram_modify_runif+0x7c>)
 800c3f2:	0873      	lsrs	r3, r6, #1
 800c3f4:	2004      	movs	r0, #4
 800c3f6:	47a0      	blx	r4
 800c3f8:	e7ea      	b.n	800c3d0 <acc_confprogram_modify_runif+0x44>
 800c3fa:	bf00      	nop
 800c3fc:	200004c0 	.word	0x200004c0
 800c400:	08010484 	.word	0x08010484
 800c404:	080104c8 	.word	0x080104c8
 800c408:	08010530 	.word	0x08010530

0800c40c <acc_confprogram_patch_offset>:
 800c40c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c410:	b083      	sub	sp, #12
 800c412:	4680      	mov	r8, r0
 800c414:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 800c418:	460d      	mov	r5, r1
 800c41a:	4617      	mov	r7, r2
 800c41c:	461e      	mov	r6, r3
 800c41e:	f7f9 f9ff 	bl	8005820 <acc_rss_integration_log_level>
 800c422:	2803      	cmp	r0, #3
 800c424:	d909      	bls.n	800c43a <acc_confprogram_patch_offset+0x2e>
 800c426:	4b2f      	ldr	r3, [pc, #188]	; (800c4e4 <acc_confprogram_patch_offset+0xd8>)
 800c428:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c42a:	9200      	str	r2, [sp, #0]
 800c42c:	f8d3 9034 	ldr.w	r9, [r3, #52]	; 0x34
 800c430:	4a2d      	ldr	r2, [pc, #180]	; (800c4e8 <acc_confprogram_patch_offset+0xdc>)
 800c432:	492e      	ldr	r1, [pc, #184]	; (800c4ec <acc_confprogram_patch_offset+0xe0>)
 800c434:	4623      	mov	r3, r4
 800c436:	2004      	movs	r0, #4
 800c438:	47c8      	blx	r9
 800c43a:	eb06 06c4 	add.w	r6, r6, r4, lsl #3
 800c43e:	8871      	ldrh	r1, [r6, #2]
 800c440:	b399      	cbz	r1, 800c4aa <acc_confprogram_patch_offset+0x9e>
 800c442:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 800c4e4 <acc_confprogram_patch_offset+0xd8>
 800c446:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 800c4f0 <acc_confprogram_patch_offset+0xe4>
 800c44a:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 800c4ec <acc_confprogram_patch_offset+0xe0>
 800c44e:	2400      	movs	r4, #0
 800c450:	e00b      	b.n	800c46a <acc_confprogram_patch_offset+0x5e>
 800c452:	2b00      	cmp	r3, #0
 800c454:	d039      	beq.n	800c4ca <acc_confprogram_patch_offset+0xbe>
 800c456:	4649      	mov	r1, r9
 800c458:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 800c45c:	4652      	mov	r2, sl
 800c45e:	2000      	movs	r0, #0
 800c460:	4798      	blx	r3
 800c462:	8871      	ldrh	r1, [r6, #2]
 800c464:	3401      	adds	r4, #1
 800c466:	42a1      	cmp	r1, r4
 800c468:	d91f      	bls.n	800c4aa <acc_confprogram_patch_offset+0x9e>
 800c46a:	6873      	ldr	r3, [r6, #4]
 800c46c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800c470:	0042      	lsls	r2, r0, #1
 800c472:	b292      	uxth	r2, r2
 800c474:	42aa      	cmp	r2, r5
 800c476:	eb05 0c07 	add.w	ip, r5, r7
 800c47a:	f3c0 7301 	ubfx	r3, r0, #28, #2
 800c47e:	d3f1      	bcc.n	800c464 <acc_confprogram_patch_offset+0x58>
 800c480:	4562      	cmp	r2, ip
 800c482:	daef      	bge.n	800c464 <acc_confprogram_patch_offset+0x58>
 800c484:	2b01      	cmp	r3, #1
 800c486:	d013      	beq.n	800c4b0 <acc_confprogram_patch_offset+0xa4>
 800c488:	2b02      	cmp	r3, #2
 800c48a:	d1e2      	bne.n	800c452 <acc_confprogram_patch_offset+0x46>
 800c48c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c48e:	1b52      	subs	r2, r2, r5
 800c490:	fab3 f383 	clz	r3, r3
 800c494:	f3c0 4103 	ubfx	r1, r0, #16, #4
 800c498:	b292      	uxth	r2, r2
 800c49a:	095b      	lsrs	r3, r3, #5
 800c49c:	4640      	mov	r0, r8
 800c49e:	f7ff ff75 	bl	800c38c <acc_confprogram_modify_runif>
 800c4a2:	8871      	ldrh	r1, [r6, #2]
 800c4a4:	3401      	adds	r4, #1
 800c4a6:	42a1      	cmp	r1, r4
 800c4a8:	d8df      	bhi.n	800c46a <acc_confprogram_patch_offset+0x5e>
 800c4aa:	b003      	add	sp, #12
 800c4ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c4b2:	1b52      	subs	r2, r2, r5
 800c4b4:	3b00      	subs	r3, #0
 800c4b6:	f3c0 4103 	ubfx	r1, r0, #16, #4
 800c4ba:	b292      	uxth	r2, r2
 800c4bc:	bf18      	it	ne
 800c4be:	2301      	movne	r3, #1
 800c4c0:	4640      	mov	r0, r8
 800c4c2:	f7ff ff63 	bl	800c38c <acc_confprogram_modify_runif>
 800c4c6:	8871      	ldrh	r1, [r6, #2]
 800c4c8:	e7cc      	b.n	800c464 <acc_confprogram_patch_offset+0x58>
 800c4ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c4cc:	9300      	str	r3, [sp, #0]
 800c4ce:	1b52      	subs	r2, r2, r5
 800c4d0:	b291      	uxth	r1, r2
 800c4d2:	f3c0 5344 	ubfx	r3, r0, #21, #5
 800c4d6:	f3c0 4204 	ubfx	r2, r0, #16, #5
 800c4da:	4640      	mov	r0, r8
 800c4dc:	f7ff fee0 	bl	800c2a0 <acc_confprogram_modify_bin>
 800c4e0:	8871      	ldrh	r1, [r6, #2]
 800c4e2:	e7bf      	b.n	800c464 <acc_confprogram_patch_offset+0x58>
 800c4e4:	200004c0 	.word	0x200004c0
 800c4e8:	0801058c 	.word	0x0801058c
 800c4ec:	08010484 	.word	0x08010484
 800c4f0:	08010564 	.word	0x08010564

0800c4f4 <acc_confprogram_live_patch>:
 800c4f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4f8:	b083      	sub	sp, #12
 800c4fa:	4606      	mov	r6, r0
 800c4fc:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 800c500:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 800c504:	468b      	mov	fp, r1
 800c506:	4617      	mov	r7, r2
 800c508:	461d      	mov	r5, r3
 800c50a:	f7f9 f989 	bl	8005820 <acc_rss_integration_log_level>
 800c50e:	2803      	cmp	r0, #3
 800c510:	d909      	bls.n	800c526 <acc_confprogram_live_patch+0x32>
 800c512:	4b2f      	ldr	r3, [pc, #188]	; (800c5d0 <acc_confprogram_live_patch+0xdc>)
 800c514:	f8cd a000 	str.w	sl, [sp]
 800c518:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 800c51c:	4a2d      	ldr	r2, [pc, #180]	; (800c5d4 <acc_confprogram_live_patch+0xe0>)
 800c51e:	492e      	ldr	r1, [pc, #184]	; (800c5d8 <acc_confprogram_live_patch+0xe4>)
 800c520:	4623      	mov	r3, r4
 800c522:	2004      	movs	r0, #4
 800c524:	47c0      	blx	r8
 800c526:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800c52a:	886b      	ldrh	r3, [r5, #2]
 800c52c:	b373      	cbz	r3, 800c58c <acc_confprogram_live_patch+0x98>
 800c52e:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 800c5dc <acc_confprogram_live_patch+0xe8>
 800c532:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 800c5d8 <acc_confprogram_live_patch+0xe4>
 800c536:	2400      	movs	r4, #0
 800c538:	e008      	b.n	800c54c <acc_confprogram_live_patch+0x58>
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d03a      	beq.n	800c5b4 <acc_confprogram_live_patch+0xc0>
 800c53e:	4b24      	ldr	r3, [pc, #144]	; (800c5d0 <acc_confprogram_live_patch+0xdc>)
 800c540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c542:	4798      	blx	r3
 800c544:	886b      	ldrh	r3, [r5, #2]
 800c546:	3401      	adds	r4, #1
 800c548:	42a3      	cmp	r3, r4
 800c54a:	d91f      	bls.n	800c58c <acc_confprogram_live_patch+0x98>
 800c54c:	686b      	ldr	r3, [r5, #4]
 800c54e:	f853 c024 	ldr.w	ip, [r3, r4, lsl #2]
 800c552:	f3cc 7301 	ubfx	r3, ip, #28, #2
 800c556:	2b01      	cmp	r3, #1
 800c558:	d01b      	beq.n	800c592 <acc_confprogram_live_patch+0x9e>
 800c55a:	2b02      	cmp	r3, #2
 800c55c:	464a      	mov	r2, r9
 800c55e:	4641      	mov	r1, r8
 800c560:	f04f 0000 	mov.w	r0, #0
 800c564:	d1e9      	bne.n	800c53a <acc_confprogram_live_patch+0x46>
 800c566:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c568:	faba f38a 	clz	r3, sl
 800c56c:	095b      	lsrs	r3, r3, #5
 800c56e:	eb07 020c 	add.w	r2, r7, ip
 800c572:	e9cd 3100 	strd	r3, r1, [sp]
 800c576:	b292      	uxth	r2, r2
 800c578:	f3cc 4303 	ubfx	r3, ip, #16, #4
 800c57c:	4659      	mov	r1, fp
 800c57e:	4630      	mov	r0, r6
 800c580:	f7ff feca 	bl	800c318 <acc_confprogram_modify_runif_sensor>
 800c584:	886b      	ldrh	r3, [r5, #2]
 800c586:	3401      	adds	r4, #1
 800c588:	42a3      	cmp	r3, r4
 800c58a:	d8df      	bhi.n	800c54c <acc_confprogram_live_patch+0x58>
 800c58c:	b003      	add	sp, #12
 800c58e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c592:	f1ba 0100 	subs.w	r1, sl, #0
 800c596:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c598:	9301      	str	r3, [sp, #4]
 800c59a:	bf18      	it	ne
 800c59c:	2101      	movne	r1, #1
 800c59e:	eb07 020c 	add.w	r2, r7, ip
 800c5a2:	9100      	str	r1, [sp, #0]
 800c5a4:	b292      	uxth	r2, r2
 800c5a6:	f3cc 4303 	ubfx	r3, ip, #16, #4
 800c5aa:	4659      	mov	r1, fp
 800c5ac:	4630      	mov	r0, r6
 800c5ae:	f7ff feb3 	bl	800c318 <acc_confprogram_modify_runif_sensor>
 800c5b2:	e7c7      	b.n	800c544 <acc_confprogram_live_patch+0x50>
 800c5b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c5b6:	eb07 010c 	add.w	r1, r7, ip
 800c5ba:	e9cd a300 	strd	sl, r3, [sp]
 800c5be:	b289      	uxth	r1, r1
 800c5c0:	f3cc 5344 	ubfx	r3, ip, #21, #5
 800c5c4:	f3cc 4204 	ubfx	r2, ip, #16, #5
 800c5c8:	4630      	mov	r0, r6
 800c5ca:	f7ff fe35 	bl	800c238 <acc_confprogram_modify_bin_sensor>
 800c5ce:	e7b9      	b.n	800c544 <acc_confprogram_live_patch+0x50>
 800c5d0:	200004c0 	.word	0x200004c0
 800c5d4:	08010588 	.word	0x08010588
 800c5d8:	08010484 	.word	0x08010484
 800c5dc:	080105ac 	.word	0x080105ac

0800c5e0 <acc_confprogram_get_default_value>:
 800c5e0:	f830 0031 	ldrh.w	r0, [r0, r1, lsl #3]
 800c5e4:	4770      	bx	lr
 800c5e6:	bf00      	nop

0800c5e8 <acc_confprogram_copy>:
 800c5e8:	b152      	cbz	r2, 800c600 <acc_confprogram_copy+0x18>
 800c5ea:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800c5ee:	3804      	subs	r0, #4
 800c5f0:	f850 3f04 	ldr.w	r3, [r0, #4]!
 800c5f4:	804b      	strh	r3, [r1, #2]
 800c5f6:	0c1b      	lsrs	r3, r3, #16
 800c5f8:	800b      	strh	r3, [r1, #0]
 800c5fa:	3104      	adds	r1, #4
 800c5fc:	4291      	cmp	r1, r2
 800c5fe:	d1f7      	bne.n	800c5f0 <acc_confprogram_copy+0x8>
 800c600:	4770      	bx	lr
 800c602:	bf00      	nop

0800c604 <acc_diagnostic_log_set_scope>:
 800c604:	4b02      	ldr	r3, [pc, #8]	; (800c610 <acc_diagnostic_log_set_scope+0xc>)
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	b10b      	cbz	r3, 800c60e <acc_diagnostic_log_set_scope+0xa>
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	4718      	bx	r3
 800c60e:	4770      	bx	lr
 800c610:	20000370 	.word	0x20000370

0800c614 <acc_diagnostic_log_declare_parameter>:
 800c614:	4b02      	ldr	r3, [pc, #8]	; (800c620 <acc_diagnostic_log_declare_parameter+0xc>)
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	b10b      	cbz	r3, 800c61e <acc_diagnostic_log_declare_parameter+0xa>
 800c61a:	685b      	ldr	r3, [r3, #4]
 800c61c:	4718      	bx	r3
 800c61e:	4770      	bx	lr
 800c620:	20000370 	.word	0x20000370

0800c624 <acc_diagnostic_log_set_parameter>:
 800c624:	4b02      	ldr	r3, [pc, #8]	; (800c630 <acc_diagnostic_log_set_parameter+0xc>)
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	b10b      	cbz	r3, 800c62e <acc_diagnostic_log_set_parameter+0xa>
 800c62a:	689b      	ldr	r3, [r3, #8]
 800c62c:	4718      	bx	r3
 800c62e:	4770      	bx	lr
 800c630:	20000370 	.word	0x20000370

0800c634 <acc_diagnostic_log_array>:
 800c634:	4b02      	ldr	r3, [pc, #8]	; (800c640 <acc_diagnostic_log_array+0xc>)
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	b10b      	cbz	r3, 800c63e <acc_diagnostic_log_array+0xa>
 800c63a:	68db      	ldr	r3, [r3, #12]
 800c63c:	4718      	bx	r3
 800c63e:	4770      	bx	lr
 800c640:	20000370 	.word	0x20000370

0800c644 <acc_diagnostic_log_scalar>:
 800c644:	4b02      	ldr	r3, [pc, #8]	; (800c650 <acc_diagnostic_log_scalar+0xc>)
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	b10b      	cbz	r3, 800c64e <acc_diagnostic_log_scalar+0xa>
 800c64a:	695b      	ldr	r3, [r3, #20]
 800c64c:	4718      	bx	r3
 800c64e:	4770      	bx	lr
 800c650:	20000370 	.word	0x20000370

0800c654 <acc_diagnostic_log_data_u16>:
 800c654:	4b02      	ldr	r3, [pc, #8]	; (800c660 <acc_diagnostic_log_data_u16+0xc>)
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	b10b      	cbz	r3, 800c65e <acc_diagnostic_log_data_u16+0xa>
 800c65a:	6a1b      	ldr	r3, [r3, #32]
 800c65c:	4718      	bx	r3
 800c65e:	4770      	bx	lr
 800c660:	20000370 	.word	0x20000370

0800c664 <acc_diagnostic_log_data_i16>:
 800c664:	4b02      	ldr	r3, [pc, #8]	; (800c670 <acc_diagnostic_log_data_i16+0xc>)
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	b10b      	cbz	r3, 800c66e <acc_diagnostic_log_data_i16+0xa>
 800c66a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c66c:	4718      	bx	r3
 800c66e:	4770      	bx	lr
 800c670:	20000370 	.word	0x20000370

0800c674 <acc_diagnostic_log_data_u8>:
 800c674:	4b02      	ldr	r3, [pc, #8]	; (800c680 <acc_diagnostic_log_data_u8+0xc>)
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	b10b      	cbz	r3, 800c67e <acc_diagnostic_log_data_u8+0xa>
 800c67a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c67c:	4718      	bx	r3
 800c67e:	4770      	bx	lr
 800c680:	20000370 	.word	0x20000370

0800c684 <acc_image_a111_r2c_cbank_and_vana_calibration_get>:
 800c684:	4800      	ldr	r0, [pc, #0]	; (800c688 <acc_image_a111_r2c_cbank_and_vana_calibration_get+0x4>)
 800c686:	4770      	bx	lr
 800c688:	0801068c 	.word	0x0801068c

0800c68c <acc_image_a111_r2c_cbank_and_vana_calibration_param_table_get>:
 800c68c:	4800      	ldr	r0, [pc, #0]	; (800c690 <acc_image_a111_r2c_cbank_and_vana_calibration_param_table_get+0x4>)
 800c68e:	4770      	bx	lr
 800c690:	08010ce4 	.word	0x08010ce4

0800c694 <acc_image_a111_r2c_rx_fine_dip_calibration_get>:
 800c694:	4800      	ldr	r0, [pc, #0]	; (800c698 <acc_image_a111_r2c_rx_fine_dip_calibration_get+0x4>)
 800c696:	4770      	bx	lr
 800c698:	08011074 	.word	0x08011074

0800c69c <acc_image_a111_r2c_rx_fine_dip_calibration_param_table_get>:
 800c69c:	4800      	ldr	r0, [pc, #0]	; (800c6a0 <acc_image_a111_r2c_rx_fine_dip_calibration_param_table_get+0x4>)
 800c69e:	4770      	bx	lr
 800c6a0:	08011dd0 	.word	0x08011dd0

0800c6a4 <acc_image_a111_r2c_sweep_get>:
 800c6a4:	4800      	ldr	r0, [pc, #0]	; (800c6a8 <acc_image_a111_r2c_sweep_get+0x4>)
 800c6a6:	4770      	bx	lr
 800c6a8:	08012354 	.word	0x08012354

0800c6ac <acc_image_a111_r2c_sweep_param_table_get>:
 800c6ac:	4800      	ldr	r0, [pc, #0]	; (800c6b0 <acc_image_a111_r2c_sweep_param_table_get+0x4>)
 800c6ae:	4770      	bx	lr
 800c6b0:	08013178 	.word	0x08013178

0800c6b4 <quarter_pi_cos_sin_f32>:
 800c6b4:	eddf 7a26 	vldr	s15, [pc, #152]	; 800c750 <quarter_pi_cos_sin_f32+0x9c>
 800c6b8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800c6bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6c0:	d442      	bmi.n	800c748 <quarter_pi_cos_sin_f32+0x94>
 800c6c2:	b310      	cbz	r0, 800c70a <quarter_pi_cos_sin_f32+0x56>
 800c6c4:	ee20 0a00 	vmul.f32	s0, s0, s0
 800c6c8:	eddf 7a22 	vldr	s15, [pc, #136]	; 800c754 <quarter_pi_cos_sin_f32+0xa0>
 800c6cc:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800c758 <quarter_pi_cos_sin_f32+0xa4>
 800c6d0:	eddf 5a22 	vldr	s11, [pc, #136]	; 800c75c <quarter_pi_cos_sin_f32+0xa8>
 800c6d4:	ed9f 6a22 	vldr	s12, [pc, #136]	; 800c760 <quarter_pi_cos_sin_f32+0xac>
 800c6d8:	ee60 7a27 	vmul.f32	s15, s0, s15
 800c6dc:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800c6e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c6e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c6e8:	ee60 7a27 	vmul.f32	s15, s0, s15
 800c6ec:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800c6f0:	ee60 7a27 	vmul.f32	s15, s0, s15
 800c6f4:	ee77 7a86 	vadd.f32	s15, s15, s12
 800c6f8:	ee60 7a27 	vmul.f32	s15, s0, s15
 800c6fc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c700:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c704:	ee30 0a07 	vadd.f32	s0, s0, s14
 800c708:	4770      	bx	lr
 800c70a:	ee60 7a00 	vmul.f32	s15, s0, s0
 800c70e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800c754 <quarter_pi_cos_sin_f32+0xa0>
 800c712:	ed9f 5a14 	vldr	s10, [pc, #80]	; 800c764 <quarter_pi_cos_sin_f32+0xb0>
 800c716:	eddf 5a14 	vldr	s11, [pc, #80]	; 800c768 <quarter_pi_cos_sin_f32+0xb4>
 800c71a:	ed9f 6a14 	vldr	s12, [pc, #80]	; 800c76c <quarter_pi_cos_sin_f32+0xb8>
 800c71e:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c722:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c726:	ee37 7a45 	vsub.f32	s14, s14, s10
 800c72a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c72e:	ee37 7a25 	vadd.f32	s14, s14, s11
 800c732:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c736:	ee37 7a46 	vsub.f32	s14, s14, s12
 800c73a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c73e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c742:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c746:	4770      	bx	lr
 800c748:	ed9f 0a09 	vldr	s0, [pc, #36]	; 800c770 <quarter_pi_cos_sin_f32+0xbc>
 800c74c:	4770      	bx	lr
 800c74e:	bf00      	nop
 800c750:	bf490fdb 	.word	0xbf490fdb
 800c754:	00000000 	.word	0x00000000
 800c758:	37cd1800 	.word	0x37cd1800
 800c75c:	3ab606a0 	.word	0x3ab606a0
 800c760:	3d2aaaa6 	.word	0x3d2aaaa6
 800c764:	394c909b 	.word	0x394c909b
 800c768:	3c088366 	.word	0x3c088366
 800c76c:	3e2aaaa2 	.word	0x3e2aaaa2
 800c770:	7fc00000 	.word	0x7fc00000

0800c774 <restricted_cos_sin_f32>:
 800c774:	eddf 7a09 	vldr	s15, [pc, #36]	; 800c79c <restricted_cos_sin_f32+0x28>
 800c778:	eddf 6a09 	vldr	s13, [pc, #36]	; 800c7a0 <restricted_cos_sin_f32+0x2c>
 800c77c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800c780:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c784:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800c788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c78c:	bf5c      	itt	pl
 800c78e:	f080 0001 	eorpl.w	r0, r0, #1
 800c792:	eeb0 0a67 	vmovpl.f32	s0, s15
 800c796:	f7ff bf8d 	b.w	800c6b4 <quarter_pi_cos_sin_f32>
 800c79a:	bf00      	nop
 800c79c:	3fc90fdb 	.word	0x3fc90fdb
 800c7a0:	333bbd2e 	.word	0x333bbd2e

0800c7a4 <acc_alg_basic_math_restricted_tan_f32>:
 800c7a4:	b508      	push	{r3, lr}
 800c7a6:	2000      	movs	r0, #0
 800c7a8:	eeb0 4a40 	vmov.f32	s8, s0
 800c7ac:	f7ff ffe2 	bl	800c774 <restricted_cos_sin_f32>
 800c7b0:	2001      	movs	r0, #1
 800c7b2:	eef0 4a40 	vmov.f32	s9, s0
 800c7b6:	eeb0 0a44 	vmov.f32	s0, s8
 800c7ba:	f7ff ffdb 	bl	800c774 <restricted_cos_sin_f32>
 800c7be:	ee84 0a80 	vdiv.f32	s0, s9, s0
 800c7c2:	bd08      	pop	{r3, pc}

0800c7c4 <acc_alg_basic_math_restricted_atan_f32>:
 800c7c4:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800c7c8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800c7cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7d0:	d434      	bmi.n	800c83c <acc_alg_basic_math_restricted_atan_f32+0x78>
 800c7d2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c7d6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800c7da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7de:	dd1b      	ble.n	800c818 <acc_alg_basic_math_restricted_atan_f32+0x54>
 800c7e0:	ee87 6a80 	vdiv.f32	s12, s15, s0
 800c7e4:	4b17      	ldr	r3, [pc, #92]	; (800c844 <acc_alg_basic_math_restricted_atan_f32+0x80>)
 800c7e6:	f1a3 0224 	sub.w	r2, r3, #36	; 0x24
 800c7ea:	eddf 7a17 	vldr	s15, [pc, #92]	; 800c848 <acc_alg_basic_math_restricted_atan_f32+0x84>
 800c7ee:	ee66 6a06 	vmul.f32	s13, s12, s12
 800c7f2:	ed33 7a01 	vldmdb	r3!, {s14}
 800c7f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c7fa:	429a      	cmp	r2, r3
 800c7fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c800:	d1f7      	bne.n	800c7f2 <acc_alg_basic_math_restricted_atan_f32+0x2e>
 800c802:	ee66 7a27 	vmul.f32	s15, s12, s15
 800c806:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800c84c <acc_alg_basic_math_restricted_atan_f32+0x88>
 800c80a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800c850 <acc_alg_basic_math_restricted_atan_f32+0x8c>
 800c80e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c812:	ee30 0a47 	vsub.f32	s0, s0, s14
 800c816:	4770      	bx	lr
 800c818:	4b0a      	ldr	r3, [pc, #40]	; (800c844 <acc_alg_basic_math_restricted_atan_f32+0x80>)
 800c81a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800c848 <acc_alg_basic_math_restricted_atan_f32+0x84>
 800c81e:	ee60 6a00 	vmul.f32	s13, s0, s0
 800c822:	f1a3 0224 	sub.w	r2, r3, #36	; 0x24
 800c826:	ed33 7a01 	vldmdb	r3!, {s14}
 800c82a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c82e:	429a      	cmp	r2, r3
 800c830:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c834:	d1f7      	bne.n	800c826 <acc_alg_basic_math_restricted_atan_f32+0x62>
 800c836:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c83a:	4770      	bx	lr
 800c83c:	ed9f 0a05 	vldr	s0, [pc, #20]	; 800c854 <acc_alg_basic_math_restricted_atan_f32+0x90>
 800c840:	4770      	bx	lr
 800c842:	bf00      	nop
 800c844:	0801369c 	.word	0x0801369c
 800c848:	00000000 	.word	0x00000000
 800c84c:	3fc90fdb 	.word	0x3fc90fdb
 800c850:	333bbd2e 	.word	0x333bbd2e
 800c854:	7fc00000 	.word	0x7fc00000

0800c858 <acc_alg_basic_math_q3_12_complex_mul>:
 800c858:	b302      	cbz	r2, 800c89c <acc_alg_basic_math_q3_12_complex_mul+0x44>
 800c85a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c85c:	2300      	movs	r3, #0
 800c85e:	1c87      	adds	r7, r0, #2
 800c860:	f101 0c02 	add.w	ip, r1, #2
 800c864:	f930 e023 	ldrsh.w	lr, [r0, r3, lsl #2]
 800c868:	f831 4023 	ldrh.w	r4, [r1, r3, lsl #2]
 800c86c:	f937 5023 	ldrsh.w	r5, [r7, r3, lsl #2]
 800c870:	f93c 6023 	ldrsh.w	r6, [ip, r3, lsl #2]
 800c874:	fb14 f40e 	smulbb	r4, r4, lr
 800c878:	fb05 4416 	mls	r4, r5, r6, r4
 800c87c:	1324      	asrs	r4, r4, #12
 800c87e:	f820 4023 	strh.w	r4, [r0, r3, lsl #2]
 800c882:	f831 4023 	ldrh.w	r4, [r1, r3, lsl #2]
 800c886:	fb06 f60e 	mul.w	r6, r6, lr
 800c88a:	fb15 6504 	smlabb	r5, r5, r4, r6
 800c88e:	132d      	asrs	r5, r5, #12
 800c890:	f827 5023 	strh.w	r5, [r7, r3, lsl #2]
 800c894:	3301      	adds	r3, #1
 800c896:	429a      	cmp	r2, r3
 800c898:	d1e4      	bne.n	800c864 <acc_alg_basic_math_q3_12_complex_mul+0xc>
 800c89a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c89c:	4770      	bx	lr
 800c89e:	bf00      	nop

0800c8a0 <acc_alg_basic_math_q3_12_complex_scalar_abs>:
 800c8a0:	b203      	sxth	r3, r0
 800c8a2:	1400      	asrs	r0, r0, #16
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	ea80 72e0 	eor.w	r2, r0, r0, asr #31
 800c8aa:	bfb8      	it	lt
 800c8ac:	425b      	neglt	r3, r3
 800c8ae:	eba2 72e0 	sub.w	r2, r2, r0, asr #31
 800c8b2:	b218      	sxth	r0, r3
 800c8b4:	b213      	sxth	r3, r2
 800c8b6:	4298      	cmp	r0, r3
 800c8b8:	b082      	sub	sp, #8
 800c8ba:	da02      	bge.n	800c8c2 <acc_alg_basic_math_q3_12_complex_scalar_abs+0x22>
 800c8bc:	4602      	mov	r2, r0
 800c8be:	4618      	mov	r0, r3
 800c8c0:	4613      	mov	r3, r2
 800c8c2:	f240 62a1 	movw	r2, #1697	; 0x6a1
 800c8c6:	fb10 f202 	smulbb	r2, r0, r2
 800c8ca:	2a00      	cmp	r2, #0
 800c8cc:	bfb8      	it	lt
 800c8ce:	f602 72ff 	addwlt	r2, r2, #4095	; 0xfff
 800c8d2:	ebb3 3f22 	cmp.w	r3, r2, asr #12
 800c8d6:	da0b      	bge.n	800c8f0 <acc_alg_basic_math_q3_12_complex_scalar_abs+0x50>
 800c8d8:	f240 3227 	movw	r2, #807	; 0x327
 800c8dc:	fb13 f302 	smulbb	r3, r3, r2
 800c8e0:	f640 72d7 	movw	r2, #4055	; 0xfd7
 800c8e4:	fb10 3002 	smlabb	r0, r0, r2, r3
 800c8e8:	f340 300f 	sbfx	r0, r0, #12, #16
 800c8ec:	b002      	add	sp, #8
 800c8ee:	4770      	bx	lr
 800c8f0:	f640 02fa 	movw	r2, #2298	; 0x8fa
 800c8f4:	fb13 f302 	smulbb	r3, r3, r2
 800c8f8:	f640 5271 	movw	r2, #3441	; 0xd71
 800c8fc:	fb10 3002 	smlabb	r0, r0, r2, r3
 800c900:	f340 300f 	sbfx	r0, r0, #12, #16
 800c904:	b002      	add	sp, #8
 800c906:	4770      	bx	lr

0800c908 <acc_alg_basic_math_q3_12_complex_conj_normalize>:
 800c908:	2900      	cmp	r1, #0
 800c90a:	d04f      	beq.n	800c9ac <acc_alg_basic_math_q3_12_complex_conj_normalize+0xa4>
 800c90c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c910:	f240 6ca1 	movw	ip, #1697	; 0x6a1
 800c914:	2400      	movs	r4, #0
 800c916:	1c87      	adds	r7, r0, #2
 800c918:	f640 0afa 	movw	sl, #2298	; 0x8fa
 800c91c:	f640 5971 	movw	r9, #3441	; 0xd71
 800c920:	f240 3827 	movw	r8, #807	; 0x327
 800c924:	f640 7ed7 	movw	lr, #4055	; 0xfd7
 800c928:	e006      	b.n	800c938 <acc_alg_basic_math_q3_12_complex_conj_normalize+0x30>
 800c92a:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
 800c92e:	f827 3024 	strh.w	r3, [r7, r4, lsl #2]
 800c932:	3401      	adds	r4, #1
 800c934:	42a1      	cmp	r1, r4
 800c936:	d037      	beq.n	800c9a8 <acc_alg_basic_math_q3_12_complex_conj_normalize+0xa0>
 800c938:	f930 6024 	ldrsh.w	r6, [r0, r4, lsl #2]
 800c93c:	f937 5024 	ldrsh.w	r5, [r7, r4, lsl #2]
 800c940:	ea86 73e6 	eor.w	r3, r6, r6, asr #31
 800c944:	ea85 72e5 	eor.w	r2, r5, r5, asr #31
 800c948:	eba3 73e6 	sub.w	r3, r3, r6, asr #31
 800c94c:	eba2 72e5 	sub.w	r2, r2, r5, asr #31
 800c950:	b21b      	sxth	r3, r3
 800c952:	b212      	sxth	r2, r2
 800c954:	4293      	cmp	r3, r2
 800c956:	da02      	bge.n	800c95e <acc_alg_basic_math_q3_12_complex_conj_normalize+0x56>
 800c958:	469b      	mov	fp, r3
 800c95a:	4613      	mov	r3, r2
 800c95c:	465a      	mov	r2, fp
 800c95e:	fb13 fb0c 	smulbb	fp, r3, ip
 800c962:	f1bb 0f00 	cmp.w	fp, #0
 800c966:	bfb8      	it	lt
 800c968:	f60b 7bff 	addwlt	fp, fp, #4095	; 0xfff
 800c96c:	ebb2 3f2b 	cmp.w	r2, fp, asr #12
 800c970:	bfb5      	itete	lt
 800c972:	fb12 f208 	smulbblt	r2, r2, r8
 800c976:	fb12 f20a 	smulbbge	r2, r2, sl
 800c97a:	fb13 230e 	smlabblt	r3, r3, lr, r2
 800c97e:	fb13 2309 	smlabbge	r3, r3, r9, r2
 800c982:	f343 330f 	sbfx	r3, r3, #12, #16
 800c986:	2b00      	cmp	r3, #0
 800c988:	d0cf      	beq.n	800c92a <acc_alg_basic_math_q3_12_complex_conj_normalize+0x22>
 800c98a:	ebc5 5505 	rsb	r5, r5, r5, lsl #20
 800c98e:	032d      	lsls	r5, r5, #12
 800c990:	0336      	lsls	r6, r6, #12
 800c992:	fb95 f5f3 	sdiv	r5, r5, r3
 800c996:	fb96 f3f3 	sdiv	r3, r6, r3
 800c99a:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
 800c99e:	f827 5024 	strh.w	r5, [r7, r4, lsl #2]
 800c9a2:	3401      	adds	r4, #1
 800c9a4:	42a1      	cmp	r1, r4
 800c9a6:	d1c7      	bne.n	800c938 <acc_alg_basic_math_q3_12_complex_conj_normalize+0x30>
 800c9a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9ac:	4770      	bx	lr
 800c9ae:	bf00      	nop

0800c9b0 <acc_alg_basic_math_q3_12_sin>:
 800c9b0:	0043      	lsls	r3, r0, #1
 800c9b2:	bf4c      	ite	mi
 800c9b4:	43c3      	mvnmi	r3, r0
 800c9b6:	4603      	movpl	r3, r0
 800c9b8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800c9bc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c9c0:	4a05      	ldr	r2, [pc, #20]	; (800c9d8 <acc_alg_basic_math_q3_12_sin+0x28>)
 800c9c2:	0d9b      	lsrs	r3, r3, #22
 800c9c4:	2800      	cmp	r0, #0
 800c9c6:	bfbd      	ittte	lt
 800c9c8:	f832 0013 	ldrhlt.w	r0, [r2, r3, lsl #1]
 800c9cc:	4240      	neglt	r0, r0
 800c9ce:	b200      	sxthlt	r0, r0
 800c9d0:	f932 0013 	ldrshge.w	r0, [r2, r3, lsl #1]
 800c9d4:	4770      	bx	lr
 800c9d6:	bf00      	nop
 800c9d8:	0801369c 	.word	0x0801369c

0800c9dc <acc_alg_basic_math_q3_12_cos>:
 800c9dc:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 800c9e0:	0043      	lsls	r3, r0, #1
 800c9e2:	bf54      	ite	pl
 800c9e4:	43d3      	mvnpl	r3, r2
 800c9e6:	4613      	movmi	r3, r2
 800c9e8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800c9ec:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c9f0:	2a00      	cmp	r2, #0
 800c9f2:	ea4f 5393 	mov.w	r3, r3, lsr #22
 800c9f6:	4a04      	ldr	r2, [pc, #16]	; (800ca08 <acc_alg_basic_math_q3_12_cos+0x2c>)
 800c9f8:	bfbd      	ittte	lt
 800c9fa:	f832 0013 	ldrhlt.w	r0, [r2, r3, lsl #1]
 800c9fe:	4240      	neglt	r0, r0
 800ca00:	b200      	sxthlt	r0, r0
 800ca02:	f932 0013 	ldrshge.w	r0, [r2, r3, lsl #1]
 800ca06:	4770      	bx	lr
 800ca08:	0801369c 	.word	0x0801369c

0800ca0c <malloc>:
 800ca0c:	4b02      	ldr	r3, [pc, #8]	; (800ca18 <malloc+0xc>)
 800ca0e:	4601      	mov	r1, r0
 800ca10:	6818      	ldr	r0, [r3, #0]
 800ca12:	f000 b82b 	b.w	800ca6c <_malloc_r>
 800ca16:	bf00      	nop
 800ca18:	200001e4 	.word	0x200001e4

0800ca1c <free>:
 800ca1c:	4b02      	ldr	r3, [pc, #8]	; (800ca28 <free+0xc>)
 800ca1e:	4601      	mov	r1, r0
 800ca20:	6818      	ldr	r0, [r3, #0]
 800ca22:	f000 bc5b 	b.w	800d2dc <_free_r>
 800ca26:	bf00      	nop
 800ca28:	200001e4 	.word	0x200001e4

0800ca2c <sbrk_aligned>:
 800ca2c:	b570      	push	{r4, r5, r6, lr}
 800ca2e:	4e0e      	ldr	r6, [pc, #56]	; (800ca68 <sbrk_aligned+0x3c>)
 800ca30:	460c      	mov	r4, r1
 800ca32:	6831      	ldr	r1, [r6, #0]
 800ca34:	4605      	mov	r5, r0
 800ca36:	b911      	cbnz	r1, 800ca3e <sbrk_aligned+0x12>
 800ca38:	f000 fbf4 	bl	800d224 <_sbrk_r>
 800ca3c:	6030      	str	r0, [r6, #0]
 800ca3e:	4621      	mov	r1, r4
 800ca40:	4628      	mov	r0, r5
 800ca42:	f000 fbef 	bl	800d224 <_sbrk_r>
 800ca46:	1c43      	adds	r3, r0, #1
 800ca48:	d00a      	beq.n	800ca60 <sbrk_aligned+0x34>
 800ca4a:	1cc4      	adds	r4, r0, #3
 800ca4c:	f024 0403 	bic.w	r4, r4, #3
 800ca50:	42a0      	cmp	r0, r4
 800ca52:	d007      	beq.n	800ca64 <sbrk_aligned+0x38>
 800ca54:	1a21      	subs	r1, r4, r0
 800ca56:	4628      	mov	r0, r5
 800ca58:	f000 fbe4 	bl	800d224 <_sbrk_r>
 800ca5c:	3001      	adds	r0, #1
 800ca5e:	d101      	bne.n	800ca64 <sbrk_aligned+0x38>
 800ca60:	f04f 34ff 	mov.w	r4, #4294967295
 800ca64:	4620      	mov	r0, r4
 800ca66:	bd70      	pop	{r4, r5, r6, pc}
 800ca68:	20000378 	.word	0x20000378

0800ca6c <_malloc_r>:
 800ca6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca70:	1ccd      	adds	r5, r1, #3
 800ca72:	f025 0503 	bic.w	r5, r5, #3
 800ca76:	3508      	adds	r5, #8
 800ca78:	2d0c      	cmp	r5, #12
 800ca7a:	bf38      	it	cc
 800ca7c:	250c      	movcc	r5, #12
 800ca7e:	2d00      	cmp	r5, #0
 800ca80:	4607      	mov	r7, r0
 800ca82:	db01      	blt.n	800ca88 <_malloc_r+0x1c>
 800ca84:	42a9      	cmp	r1, r5
 800ca86:	d905      	bls.n	800ca94 <_malloc_r+0x28>
 800ca88:	230c      	movs	r3, #12
 800ca8a:	603b      	str	r3, [r7, #0]
 800ca8c:	2600      	movs	r6, #0
 800ca8e:	4630      	mov	r0, r6
 800ca90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca94:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800cb68 <_malloc_r+0xfc>
 800ca98:	f000 f868 	bl	800cb6c <__malloc_lock>
 800ca9c:	f8d8 3000 	ldr.w	r3, [r8]
 800caa0:	461c      	mov	r4, r3
 800caa2:	bb5c      	cbnz	r4, 800cafc <_malloc_r+0x90>
 800caa4:	4629      	mov	r1, r5
 800caa6:	4638      	mov	r0, r7
 800caa8:	f7ff ffc0 	bl	800ca2c <sbrk_aligned>
 800caac:	1c43      	adds	r3, r0, #1
 800caae:	4604      	mov	r4, r0
 800cab0:	d155      	bne.n	800cb5e <_malloc_r+0xf2>
 800cab2:	f8d8 4000 	ldr.w	r4, [r8]
 800cab6:	4626      	mov	r6, r4
 800cab8:	2e00      	cmp	r6, #0
 800caba:	d145      	bne.n	800cb48 <_malloc_r+0xdc>
 800cabc:	2c00      	cmp	r4, #0
 800cabe:	d048      	beq.n	800cb52 <_malloc_r+0xe6>
 800cac0:	6823      	ldr	r3, [r4, #0]
 800cac2:	4631      	mov	r1, r6
 800cac4:	4638      	mov	r0, r7
 800cac6:	eb04 0903 	add.w	r9, r4, r3
 800caca:	f000 fbab 	bl	800d224 <_sbrk_r>
 800cace:	4581      	cmp	r9, r0
 800cad0:	d13f      	bne.n	800cb52 <_malloc_r+0xe6>
 800cad2:	6821      	ldr	r1, [r4, #0]
 800cad4:	1a6d      	subs	r5, r5, r1
 800cad6:	4629      	mov	r1, r5
 800cad8:	4638      	mov	r0, r7
 800cada:	f7ff ffa7 	bl	800ca2c <sbrk_aligned>
 800cade:	3001      	adds	r0, #1
 800cae0:	d037      	beq.n	800cb52 <_malloc_r+0xe6>
 800cae2:	6823      	ldr	r3, [r4, #0]
 800cae4:	442b      	add	r3, r5
 800cae6:	6023      	str	r3, [r4, #0]
 800cae8:	f8d8 3000 	ldr.w	r3, [r8]
 800caec:	2b00      	cmp	r3, #0
 800caee:	d038      	beq.n	800cb62 <_malloc_r+0xf6>
 800caf0:	685a      	ldr	r2, [r3, #4]
 800caf2:	42a2      	cmp	r2, r4
 800caf4:	d12b      	bne.n	800cb4e <_malloc_r+0xe2>
 800caf6:	2200      	movs	r2, #0
 800caf8:	605a      	str	r2, [r3, #4]
 800cafa:	e00f      	b.n	800cb1c <_malloc_r+0xb0>
 800cafc:	6822      	ldr	r2, [r4, #0]
 800cafe:	1b52      	subs	r2, r2, r5
 800cb00:	d41f      	bmi.n	800cb42 <_malloc_r+0xd6>
 800cb02:	2a0b      	cmp	r2, #11
 800cb04:	d917      	bls.n	800cb36 <_malloc_r+0xca>
 800cb06:	1961      	adds	r1, r4, r5
 800cb08:	42a3      	cmp	r3, r4
 800cb0a:	6025      	str	r5, [r4, #0]
 800cb0c:	bf18      	it	ne
 800cb0e:	6059      	strne	r1, [r3, #4]
 800cb10:	6863      	ldr	r3, [r4, #4]
 800cb12:	bf08      	it	eq
 800cb14:	f8c8 1000 	streq.w	r1, [r8]
 800cb18:	5162      	str	r2, [r4, r5]
 800cb1a:	604b      	str	r3, [r1, #4]
 800cb1c:	4638      	mov	r0, r7
 800cb1e:	f104 060b 	add.w	r6, r4, #11
 800cb22:	f000 f829 	bl	800cb78 <__malloc_unlock>
 800cb26:	f026 0607 	bic.w	r6, r6, #7
 800cb2a:	1d23      	adds	r3, r4, #4
 800cb2c:	1af2      	subs	r2, r6, r3
 800cb2e:	d0ae      	beq.n	800ca8e <_malloc_r+0x22>
 800cb30:	1b9b      	subs	r3, r3, r6
 800cb32:	50a3      	str	r3, [r4, r2]
 800cb34:	e7ab      	b.n	800ca8e <_malloc_r+0x22>
 800cb36:	42a3      	cmp	r3, r4
 800cb38:	6862      	ldr	r2, [r4, #4]
 800cb3a:	d1dd      	bne.n	800caf8 <_malloc_r+0x8c>
 800cb3c:	f8c8 2000 	str.w	r2, [r8]
 800cb40:	e7ec      	b.n	800cb1c <_malloc_r+0xb0>
 800cb42:	4623      	mov	r3, r4
 800cb44:	6864      	ldr	r4, [r4, #4]
 800cb46:	e7ac      	b.n	800caa2 <_malloc_r+0x36>
 800cb48:	4634      	mov	r4, r6
 800cb4a:	6876      	ldr	r6, [r6, #4]
 800cb4c:	e7b4      	b.n	800cab8 <_malloc_r+0x4c>
 800cb4e:	4613      	mov	r3, r2
 800cb50:	e7cc      	b.n	800caec <_malloc_r+0x80>
 800cb52:	230c      	movs	r3, #12
 800cb54:	603b      	str	r3, [r7, #0]
 800cb56:	4638      	mov	r0, r7
 800cb58:	f000 f80e 	bl	800cb78 <__malloc_unlock>
 800cb5c:	e797      	b.n	800ca8e <_malloc_r+0x22>
 800cb5e:	6025      	str	r5, [r4, #0]
 800cb60:	e7dc      	b.n	800cb1c <_malloc_r+0xb0>
 800cb62:	605b      	str	r3, [r3, #4]
 800cb64:	deff      	udf	#255	; 0xff
 800cb66:	bf00      	nop
 800cb68:	20000374 	.word	0x20000374

0800cb6c <__malloc_lock>:
 800cb6c:	4801      	ldr	r0, [pc, #4]	; (800cb74 <__malloc_lock+0x8>)
 800cb6e:	f000 bba5 	b.w	800d2bc <__retarget_lock_acquire_recursive>
 800cb72:	bf00      	nop
 800cb74:	200004bc 	.word	0x200004bc

0800cb78 <__malloc_unlock>:
 800cb78:	4801      	ldr	r0, [pc, #4]	; (800cb80 <__malloc_unlock+0x8>)
 800cb7a:	f000 bba0 	b.w	800d2be <__retarget_lock_release_recursive>
 800cb7e:	bf00      	nop
 800cb80:	200004bc 	.word	0x200004bc

0800cb84 <__sflush_r>:
 800cb84:	898a      	ldrh	r2, [r1, #12]
 800cb86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb8a:	4605      	mov	r5, r0
 800cb8c:	0710      	lsls	r0, r2, #28
 800cb8e:	460c      	mov	r4, r1
 800cb90:	d458      	bmi.n	800cc44 <__sflush_r+0xc0>
 800cb92:	684b      	ldr	r3, [r1, #4]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	dc05      	bgt.n	800cba4 <__sflush_r+0x20>
 800cb98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	dc02      	bgt.n	800cba4 <__sflush_r+0x20>
 800cb9e:	2000      	movs	r0, #0
 800cba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cba4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cba6:	2e00      	cmp	r6, #0
 800cba8:	d0f9      	beq.n	800cb9e <__sflush_r+0x1a>
 800cbaa:	2300      	movs	r3, #0
 800cbac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cbb0:	682f      	ldr	r7, [r5, #0]
 800cbb2:	6a21      	ldr	r1, [r4, #32]
 800cbb4:	602b      	str	r3, [r5, #0]
 800cbb6:	d032      	beq.n	800cc1e <__sflush_r+0x9a>
 800cbb8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cbba:	89a3      	ldrh	r3, [r4, #12]
 800cbbc:	075a      	lsls	r2, r3, #29
 800cbbe:	d505      	bpl.n	800cbcc <__sflush_r+0x48>
 800cbc0:	6863      	ldr	r3, [r4, #4]
 800cbc2:	1ac0      	subs	r0, r0, r3
 800cbc4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cbc6:	b10b      	cbz	r3, 800cbcc <__sflush_r+0x48>
 800cbc8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cbca:	1ac0      	subs	r0, r0, r3
 800cbcc:	2300      	movs	r3, #0
 800cbce:	4602      	mov	r2, r0
 800cbd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cbd2:	6a21      	ldr	r1, [r4, #32]
 800cbd4:	4628      	mov	r0, r5
 800cbd6:	47b0      	blx	r6
 800cbd8:	1c43      	adds	r3, r0, #1
 800cbda:	89a3      	ldrh	r3, [r4, #12]
 800cbdc:	d106      	bne.n	800cbec <__sflush_r+0x68>
 800cbde:	6829      	ldr	r1, [r5, #0]
 800cbe0:	291d      	cmp	r1, #29
 800cbe2:	d82b      	bhi.n	800cc3c <__sflush_r+0xb8>
 800cbe4:	4a29      	ldr	r2, [pc, #164]	; (800cc8c <__sflush_r+0x108>)
 800cbe6:	410a      	asrs	r2, r1
 800cbe8:	07d6      	lsls	r6, r2, #31
 800cbea:	d427      	bmi.n	800cc3c <__sflush_r+0xb8>
 800cbec:	2200      	movs	r2, #0
 800cbee:	6062      	str	r2, [r4, #4]
 800cbf0:	04d9      	lsls	r1, r3, #19
 800cbf2:	6922      	ldr	r2, [r4, #16]
 800cbf4:	6022      	str	r2, [r4, #0]
 800cbf6:	d504      	bpl.n	800cc02 <__sflush_r+0x7e>
 800cbf8:	1c42      	adds	r2, r0, #1
 800cbfa:	d101      	bne.n	800cc00 <__sflush_r+0x7c>
 800cbfc:	682b      	ldr	r3, [r5, #0]
 800cbfe:	b903      	cbnz	r3, 800cc02 <__sflush_r+0x7e>
 800cc00:	6560      	str	r0, [r4, #84]	; 0x54
 800cc02:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cc04:	602f      	str	r7, [r5, #0]
 800cc06:	2900      	cmp	r1, #0
 800cc08:	d0c9      	beq.n	800cb9e <__sflush_r+0x1a>
 800cc0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cc0e:	4299      	cmp	r1, r3
 800cc10:	d002      	beq.n	800cc18 <__sflush_r+0x94>
 800cc12:	4628      	mov	r0, r5
 800cc14:	f000 fb62 	bl	800d2dc <_free_r>
 800cc18:	2000      	movs	r0, #0
 800cc1a:	6360      	str	r0, [r4, #52]	; 0x34
 800cc1c:	e7c0      	b.n	800cba0 <__sflush_r+0x1c>
 800cc1e:	2301      	movs	r3, #1
 800cc20:	4628      	mov	r0, r5
 800cc22:	47b0      	blx	r6
 800cc24:	1c41      	adds	r1, r0, #1
 800cc26:	d1c8      	bne.n	800cbba <__sflush_r+0x36>
 800cc28:	682b      	ldr	r3, [r5, #0]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d0c5      	beq.n	800cbba <__sflush_r+0x36>
 800cc2e:	2b1d      	cmp	r3, #29
 800cc30:	d001      	beq.n	800cc36 <__sflush_r+0xb2>
 800cc32:	2b16      	cmp	r3, #22
 800cc34:	d101      	bne.n	800cc3a <__sflush_r+0xb6>
 800cc36:	602f      	str	r7, [r5, #0]
 800cc38:	e7b1      	b.n	800cb9e <__sflush_r+0x1a>
 800cc3a:	89a3      	ldrh	r3, [r4, #12]
 800cc3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc40:	81a3      	strh	r3, [r4, #12]
 800cc42:	e7ad      	b.n	800cba0 <__sflush_r+0x1c>
 800cc44:	690f      	ldr	r7, [r1, #16]
 800cc46:	2f00      	cmp	r7, #0
 800cc48:	d0a9      	beq.n	800cb9e <__sflush_r+0x1a>
 800cc4a:	0793      	lsls	r3, r2, #30
 800cc4c:	680e      	ldr	r6, [r1, #0]
 800cc4e:	bf08      	it	eq
 800cc50:	694b      	ldreq	r3, [r1, #20]
 800cc52:	600f      	str	r7, [r1, #0]
 800cc54:	bf18      	it	ne
 800cc56:	2300      	movne	r3, #0
 800cc58:	eba6 0807 	sub.w	r8, r6, r7
 800cc5c:	608b      	str	r3, [r1, #8]
 800cc5e:	f1b8 0f00 	cmp.w	r8, #0
 800cc62:	dd9c      	ble.n	800cb9e <__sflush_r+0x1a>
 800cc64:	6a21      	ldr	r1, [r4, #32]
 800cc66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cc68:	4643      	mov	r3, r8
 800cc6a:	463a      	mov	r2, r7
 800cc6c:	4628      	mov	r0, r5
 800cc6e:	47b0      	blx	r6
 800cc70:	2800      	cmp	r0, #0
 800cc72:	dc06      	bgt.n	800cc82 <__sflush_r+0xfe>
 800cc74:	89a3      	ldrh	r3, [r4, #12]
 800cc76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc7a:	81a3      	strh	r3, [r4, #12]
 800cc7c:	f04f 30ff 	mov.w	r0, #4294967295
 800cc80:	e78e      	b.n	800cba0 <__sflush_r+0x1c>
 800cc82:	4407      	add	r7, r0
 800cc84:	eba8 0800 	sub.w	r8, r8, r0
 800cc88:	e7e9      	b.n	800cc5e <__sflush_r+0xda>
 800cc8a:	bf00      	nop
 800cc8c:	dfbffffe 	.word	0xdfbffffe

0800cc90 <_fflush_r>:
 800cc90:	b538      	push	{r3, r4, r5, lr}
 800cc92:	690b      	ldr	r3, [r1, #16]
 800cc94:	4605      	mov	r5, r0
 800cc96:	460c      	mov	r4, r1
 800cc98:	b913      	cbnz	r3, 800cca0 <_fflush_r+0x10>
 800cc9a:	2500      	movs	r5, #0
 800cc9c:	4628      	mov	r0, r5
 800cc9e:	bd38      	pop	{r3, r4, r5, pc}
 800cca0:	b118      	cbz	r0, 800ccaa <_fflush_r+0x1a>
 800cca2:	6a03      	ldr	r3, [r0, #32]
 800cca4:	b90b      	cbnz	r3, 800ccaa <_fflush_r+0x1a>
 800cca6:	f000 f8a9 	bl	800cdfc <__sinit>
 800ccaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d0f3      	beq.n	800cc9a <_fflush_r+0xa>
 800ccb2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ccb4:	07d0      	lsls	r0, r2, #31
 800ccb6:	d404      	bmi.n	800ccc2 <_fflush_r+0x32>
 800ccb8:	0599      	lsls	r1, r3, #22
 800ccba:	d402      	bmi.n	800ccc2 <_fflush_r+0x32>
 800ccbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ccbe:	f000 fafd 	bl	800d2bc <__retarget_lock_acquire_recursive>
 800ccc2:	4628      	mov	r0, r5
 800ccc4:	4621      	mov	r1, r4
 800ccc6:	f7ff ff5d 	bl	800cb84 <__sflush_r>
 800ccca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cccc:	07da      	lsls	r2, r3, #31
 800ccce:	4605      	mov	r5, r0
 800ccd0:	d4e4      	bmi.n	800cc9c <_fflush_r+0xc>
 800ccd2:	89a3      	ldrh	r3, [r4, #12]
 800ccd4:	059b      	lsls	r3, r3, #22
 800ccd6:	d4e1      	bmi.n	800cc9c <_fflush_r+0xc>
 800ccd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ccda:	f000 faf0 	bl	800d2be <__retarget_lock_release_recursive>
 800ccde:	e7dd      	b.n	800cc9c <_fflush_r+0xc>

0800cce0 <fflush>:
 800cce0:	4601      	mov	r1, r0
 800cce2:	b920      	cbnz	r0, 800ccee <fflush+0xe>
 800cce4:	4a04      	ldr	r2, [pc, #16]	; (800ccf8 <fflush+0x18>)
 800cce6:	4905      	ldr	r1, [pc, #20]	; (800ccfc <fflush+0x1c>)
 800cce8:	4805      	ldr	r0, [pc, #20]	; (800cd00 <fflush+0x20>)
 800ccea:	f000 b89f 	b.w	800ce2c <_fwalk_sglue>
 800ccee:	4b05      	ldr	r3, [pc, #20]	; (800cd04 <fflush+0x24>)
 800ccf0:	6818      	ldr	r0, [r3, #0]
 800ccf2:	f7ff bfcd 	b.w	800cc90 <_fflush_r>
 800ccf6:	bf00      	nop
 800ccf8:	2000018c 	.word	0x2000018c
 800ccfc:	0800cc91 	.word	0x0800cc91
 800cd00:	20000198 	.word	0x20000198
 800cd04:	200001e4 	.word	0x200001e4

0800cd08 <std>:
 800cd08:	2300      	movs	r3, #0
 800cd0a:	b510      	push	{r4, lr}
 800cd0c:	4604      	mov	r4, r0
 800cd0e:	e9c0 3300 	strd	r3, r3, [r0]
 800cd12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cd16:	6083      	str	r3, [r0, #8]
 800cd18:	8181      	strh	r1, [r0, #12]
 800cd1a:	6643      	str	r3, [r0, #100]	; 0x64
 800cd1c:	81c2      	strh	r2, [r0, #14]
 800cd1e:	6183      	str	r3, [r0, #24]
 800cd20:	4619      	mov	r1, r3
 800cd22:	2208      	movs	r2, #8
 800cd24:	305c      	adds	r0, #92	; 0x5c
 800cd26:	f000 fa41 	bl	800d1ac <memset>
 800cd2a:	4b05      	ldr	r3, [pc, #20]	; (800cd40 <std+0x38>)
 800cd2c:	6263      	str	r3, [r4, #36]	; 0x24
 800cd2e:	4b05      	ldr	r3, [pc, #20]	; (800cd44 <std+0x3c>)
 800cd30:	62a3      	str	r3, [r4, #40]	; 0x28
 800cd32:	4b05      	ldr	r3, [pc, #20]	; (800cd48 <std+0x40>)
 800cd34:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cd36:	4b05      	ldr	r3, [pc, #20]	; (800cd4c <std+0x44>)
 800cd38:	6224      	str	r4, [r4, #32]
 800cd3a:	6323      	str	r3, [r4, #48]	; 0x30
 800cd3c:	bd10      	pop	{r4, pc}
 800cd3e:	bf00      	nop
 800cd40:	0800cf55 	.word	0x0800cf55
 800cd44:	0800cf77 	.word	0x0800cf77
 800cd48:	0800cfaf 	.word	0x0800cfaf
 800cd4c:	0800cfd3 	.word	0x0800cfd3

0800cd50 <stdio_exit_handler>:
 800cd50:	4a02      	ldr	r2, [pc, #8]	; (800cd5c <stdio_exit_handler+0xc>)
 800cd52:	4903      	ldr	r1, [pc, #12]	; (800cd60 <stdio_exit_handler+0x10>)
 800cd54:	4803      	ldr	r0, [pc, #12]	; (800cd64 <stdio_exit_handler+0x14>)
 800cd56:	f000 b869 	b.w	800ce2c <_fwalk_sglue>
 800cd5a:	bf00      	nop
 800cd5c:	2000018c 	.word	0x2000018c
 800cd60:	0800cc91 	.word	0x0800cc91
 800cd64:	20000198 	.word	0x20000198

0800cd68 <cleanup_stdio>:
 800cd68:	6841      	ldr	r1, [r0, #4]
 800cd6a:	4b0c      	ldr	r3, [pc, #48]	; (800cd9c <cleanup_stdio+0x34>)
 800cd6c:	4299      	cmp	r1, r3
 800cd6e:	b510      	push	{r4, lr}
 800cd70:	4604      	mov	r4, r0
 800cd72:	d001      	beq.n	800cd78 <cleanup_stdio+0x10>
 800cd74:	f7ff ff8c 	bl	800cc90 <_fflush_r>
 800cd78:	68a1      	ldr	r1, [r4, #8]
 800cd7a:	4b09      	ldr	r3, [pc, #36]	; (800cda0 <cleanup_stdio+0x38>)
 800cd7c:	4299      	cmp	r1, r3
 800cd7e:	d002      	beq.n	800cd86 <cleanup_stdio+0x1e>
 800cd80:	4620      	mov	r0, r4
 800cd82:	f7ff ff85 	bl	800cc90 <_fflush_r>
 800cd86:	68e1      	ldr	r1, [r4, #12]
 800cd88:	4b06      	ldr	r3, [pc, #24]	; (800cda4 <cleanup_stdio+0x3c>)
 800cd8a:	4299      	cmp	r1, r3
 800cd8c:	d004      	beq.n	800cd98 <cleanup_stdio+0x30>
 800cd8e:	4620      	mov	r0, r4
 800cd90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd94:	f7ff bf7c 	b.w	800cc90 <_fflush_r>
 800cd98:	bd10      	pop	{r4, pc}
 800cd9a:	bf00      	nop
 800cd9c:	2000037c 	.word	0x2000037c
 800cda0:	200003e4 	.word	0x200003e4
 800cda4:	2000044c 	.word	0x2000044c

0800cda8 <global_stdio_init.part.0>:
 800cda8:	b510      	push	{r4, lr}
 800cdaa:	4b0b      	ldr	r3, [pc, #44]	; (800cdd8 <global_stdio_init.part.0+0x30>)
 800cdac:	4c0b      	ldr	r4, [pc, #44]	; (800cddc <global_stdio_init.part.0+0x34>)
 800cdae:	4a0c      	ldr	r2, [pc, #48]	; (800cde0 <global_stdio_init.part.0+0x38>)
 800cdb0:	601a      	str	r2, [r3, #0]
 800cdb2:	4620      	mov	r0, r4
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	2104      	movs	r1, #4
 800cdb8:	f7ff ffa6 	bl	800cd08 <std>
 800cdbc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800cdc0:	2201      	movs	r2, #1
 800cdc2:	2109      	movs	r1, #9
 800cdc4:	f7ff ffa0 	bl	800cd08 <std>
 800cdc8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800cdcc:	2202      	movs	r2, #2
 800cdce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cdd2:	2112      	movs	r1, #18
 800cdd4:	f7ff bf98 	b.w	800cd08 <std>
 800cdd8:	200004b4 	.word	0x200004b4
 800cddc:	2000037c 	.word	0x2000037c
 800cde0:	0800cd51 	.word	0x0800cd51

0800cde4 <__sfp_lock_acquire>:
 800cde4:	4801      	ldr	r0, [pc, #4]	; (800cdec <__sfp_lock_acquire+0x8>)
 800cde6:	f000 ba69 	b.w	800d2bc <__retarget_lock_acquire_recursive>
 800cdea:	bf00      	nop
 800cdec:	200004bd 	.word	0x200004bd

0800cdf0 <__sfp_lock_release>:
 800cdf0:	4801      	ldr	r0, [pc, #4]	; (800cdf8 <__sfp_lock_release+0x8>)
 800cdf2:	f000 ba64 	b.w	800d2be <__retarget_lock_release_recursive>
 800cdf6:	bf00      	nop
 800cdf8:	200004bd 	.word	0x200004bd

0800cdfc <__sinit>:
 800cdfc:	b510      	push	{r4, lr}
 800cdfe:	4604      	mov	r4, r0
 800ce00:	f7ff fff0 	bl	800cde4 <__sfp_lock_acquire>
 800ce04:	6a23      	ldr	r3, [r4, #32]
 800ce06:	b11b      	cbz	r3, 800ce10 <__sinit+0x14>
 800ce08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce0c:	f7ff bff0 	b.w	800cdf0 <__sfp_lock_release>
 800ce10:	4b04      	ldr	r3, [pc, #16]	; (800ce24 <__sinit+0x28>)
 800ce12:	6223      	str	r3, [r4, #32]
 800ce14:	4b04      	ldr	r3, [pc, #16]	; (800ce28 <__sinit+0x2c>)
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d1f5      	bne.n	800ce08 <__sinit+0xc>
 800ce1c:	f7ff ffc4 	bl	800cda8 <global_stdio_init.part.0>
 800ce20:	e7f2      	b.n	800ce08 <__sinit+0xc>
 800ce22:	bf00      	nop
 800ce24:	0800cd69 	.word	0x0800cd69
 800ce28:	200004b4 	.word	0x200004b4

0800ce2c <_fwalk_sglue>:
 800ce2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce30:	4607      	mov	r7, r0
 800ce32:	4688      	mov	r8, r1
 800ce34:	4614      	mov	r4, r2
 800ce36:	2600      	movs	r6, #0
 800ce38:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ce3c:	f1b9 0901 	subs.w	r9, r9, #1
 800ce40:	d505      	bpl.n	800ce4e <_fwalk_sglue+0x22>
 800ce42:	6824      	ldr	r4, [r4, #0]
 800ce44:	2c00      	cmp	r4, #0
 800ce46:	d1f7      	bne.n	800ce38 <_fwalk_sglue+0xc>
 800ce48:	4630      	mov	r0, r6
 800ce4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce4e:	89ab      	ldrh	r3, [r5, #12]
 800ce50:	2b01      	cmp	r3, #1
 800ce52:	d907      	bls.n	800ce64 <_fwalk_sglue+0x38>
 800ce54:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ce58:	3301      	adds	r3, #1
 800ce5a:	d003      	beq.n	800ce64 <_fwalk_sglue+0x38>
 800ce5c:	4629      	mov	r1, r5
 800ce5e:	4638      	mov	r0, r7
 800ce60:	47c0      	blx	r8
 800ce62:	4306      	orrs	r6, r0
 800ce64:	3568      	adds	r5, #104	; 0x68
 800ce66:	e7e9      	b.n	800ce3c <_fwalk_sglue+0x10>

0800ce68 <iprintf>:
 800ce68:	b40f      	push	{r0, r1, r2, r3}
 800ce6a:	b507      	push	{r0, r1, r2, lr}
 800ce6c:	4906      	ldr	r1, [pc, #24]	; (800ce88 <iprintf+0x20>)
 800ce6e:	ab04      	add	r3, sp, #16
 800ce70:	6808      	ldr	r0, [r1, #0]
 800ce72:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce76:	6881      	ldr	r1, [r0, #8]
 800ce78:	9301      	str	r3, [sp, #4]
 800ce7a:	f000 fbfd 	bl	800d678 <_vfiprintf_r>
 800ce7e:	b003      	add	sp, #12
 800ce80:	f85d eb04 	ldr.w	lr, [sp], #4
 800ce84:	b004      	add	sp, #16
 800ce86:	4770      	bx	lr
 800ce88:	200001e4 	.word	0x200001e4

0800ce8c <putchar>:
 800ce8c:	4b02      	ldr	r3, [pc, #8]	; (800ce98 <putchar+0xc>)
 800ce8e:	4601      	mov	r1, r0
 800ce90:	6818      	ldr	r0, [r3, #0]
 800ce92:	6882      	ldr	r2, [r0, #8]
 800ce94:	f000 befc 	b.w	800dc90 <_putc_r>
 800ce98:	200001e4 	.word	0x200001e4

0800ce9c <_puts_r>:
 800ce9c:	6a03      	ldr	r3, [r0, #32]
 800ce9e:	b570      	push	{r4, r5, r6, lr}
 800cea0:	6884      	ldr	r4, [r0, #8]
 800cea2:	4605      	mov	r5, r0
 800cea4:	460e      	mov	r6, r1
 800cea6:	b90b      	cbnz	r3, 800ceac <_puts_r+0x10>
 800cea8:	f7ff ffa8 	bl	800cdfc <__sinit>
 800ceac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ceae:	07db      	lsls	r3, r3, #31
 800ceb0:	d405      	bmi.n	800cebe <_puts_r+0x22>
 800ceb2:	89a3      	ldrh	r3, [r4, #12]
 800ceb4:	0598      	lsls	r0, r3, #22
 800ceb6:	d402      	bmi.n	800cebe <_puts_r+0x22>
 800ceb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ceba:	f000 f9ff 	bl	800d2bc <__retarget_lock_acquire_recursive>
 800cebe:	89a3      	ldrh	r3, [r4, #12]
 800cec0:	0719      	lsls	r1, r3, #28
 800cec2:	d513      	bpl.n	800ceec <_puts_r+0x50>
 800cec4:	6923      	ldr	r3, [r4, #16]
 800cec6:	b18b      	cbz	r3, 800ceec <_puts_r+0x50>
 800cec8:	3e01      	subs	r6, #1
 800ceca:	68a3      	ldr	r3, [r4, #8]
 800cecc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ced0:	3b01      	subs	r3, #1
 800ced2:	60a3      	str	r3, [r4, #8]
 800ced4:	b9e9      	cbnz	r1, 800cf12 <_puts_r+0x76>
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	da2e      	bge.n	800cf38 <_puts_r+0x9c>
 800ceda:	4622      	mov	r2, r4
 800cedc:	210a      	movs	r1, #10
 800cede:	4628      	mov	r0, r5
 800cee0:	f000 f8b4 	bl	800d04c <__swbuf_r>
 800cee4:	3001      	adds	r0, #1
 800cee6:	d007      	beq.n	800cef8 <_puts_r+0x5c>
 800cee8:	250a      	movs	r5, #10
 800ceea:	e007      	b.n	800cefc <_puts_r+0x60>
 800ceec:	4621      	mov	r1, r4
 800ceee:	4628      	mov	r0, r5
 800cef0:	f000 f8ea 	bl	800d0c8 <__swsetup_r>
 800cef4:	2800      	cmp	r0, #0
 800cef6:	d0e7      	beq.n	800cec8 <_puts_r+0x2c>
 800cef8:	f04f 35ff 	mov.w	r5, #4294967295
 800cefc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cefe:	07da      	lsls	r2, r3, #31
 800cf00:	d405      	bmi.n	800cf0e <_puts_r+0x72>
 800cf02:	89a3      	ldrh	r3, [r4, #12]
 800cf04:	059b      	lsls	r3, r3, #22
 800cf06:	d402      	bmi.n	800cf0e <_puts_r+0x72>
 800cf08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf0a:	f000 f9d8 	bl	800d2be <__retarget_lock_release_recursive>
 800cf0e:	4628      	mov	r0, r5
 800cf10:	bd70      	pop	{r4, r5, r6, pc}
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	da04      	bge.n	800cf20 <_puts_r+0x84>
 800cf16:	69a2      	ldr	r2, [r4, #24]
 800cf18:	429a      	cmp	r2, r3
 800cf1a:	dc06      	bgt.n	800cf2a <_puts_r+0x8e>
 800cf1c:	290a      	cmp	r1, #10
 800cf1e:	d004      	beq.n	800cf2a <_puts_r+0x8e>
 800cf20:	6823      	ldr	r3, [r4, #0]
 800cf22:	1c5a      	adds	r2, r3, #1
 800cf24:	6022      	str	r2, [r4, #0]
 800cf26:	7019      	strb	r1, [r3, #0]
 800cf28:	e7cf      	b.n	800ceca <_puts_r+0x2e>
 800cf2a:	4622      	mov	r2, r4
 800cf2c:	4628      	mov	r0, r5
 800cf2e:	f000 f88d 	bl	800d04c <__swbuf_r>
 800cf32:	3001      	adds	r0, #1
 800cf34:	d1c9      	bne.n	800ceca <_puts_r+0x2e>
 800cf36:	e7df      	b.n	800cef8 <_puts_r+0x5c>
 800cf38:	6823      	ldr	r3, [r4, #0]
 800cf3a:	250a      	movs	r5, #10
 800cf3c:	1c5a      	adds	r2, r3, #1
 800cf3e:	6022      	str	r2, [r4, #0]
 800cf40:	701d      	strb	r5, [r3, #0]
 800cf42:	e7db      	b.n	800cefc <_puts_r+0x60>

0800cf44 <puts>:
 800cf44:	4b02      	ldr	r3, [pc, #8]	; (800cf50 <puts+0xc>)
 800cf46:	4601      	mov	r1, r0
 800cf48:	6818      	ldr	r0, [r3, #0]
 800cf4a:	f7ff bfa7 	b.w	800ce9c <_puts_r>
 800cf4e:	bf00      	nop
 800cf50:	200001e4 	.word	0x200001e4

0800cf54 <__sread>:
 800cf54:	b510      	push	{r4, lr}
 800cf56:	460c      	mov	r4, r1
 800cf58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf5c:	f000 f950 	bl	800d200 <_read_r>
 800cf60:	2800      	cmp	r0, #0
 800cf62:	bfab      	itete	ge
 800cf64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cf66:	89a3      	ldrhlt	r3, [r4, #12]
 800cf68:	181b      	addge	r3, r3, r0
 800cf6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cf6e:	bfac      	ite	ge
 800cf70:	6563      	strge	r3, [r4, #84]	; 0x54
 800cf72:	81a3      	strhlt	r3, [r4, #12]
 800cf74:	bd10      	pop	{r4, pc}

0800cf76 <__swrite>:
 800cf76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf7a:	461f      	mov	r7, r3
 800cf7c:	898b      	ldrh	r3, [r1, #12]
 800cf7e:	05db      	lsls	r3, r3, #23
 800cf80:	4605      	mov	r5, r0
 800cf82:	460c      	mov	r4, r1
 800cf84:	4616      	mov	r6, r2
 800cf86:	d505      	bpl.n	800cf94 <__swrite+0x1e>
 800cf88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf8c:	2302      	movs	r3, #2
 800cf8e:	2200      	movs	r2, #0
 800cf90:	f000 f924 	bl	800d1dc <_lseek_r>
 800cf94:	89a3      	ldrh	r3, [r4, #12]
 800cf96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cf9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cf9e:	81a3      	strh	r3, [r4, #12]
 800cfa0:	4632      	mov	r2, r6
 800cfa2:	463b      	mov	r3, r7
 800cfa4:	4628      	mov	r0, r5
 800cfa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cfaa:	f000 b94b 	b.w	800d244 <_write_r>

0800cfae <__sseek>:
 800cfae:	b510      	push	{r4, lr}
 800cfb0:	460c      	mov	r4, r1
 800cfb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfb6:	f000 f911 	bl	800d1dc <_lseek_r>
 800cfba:	1c43      	adds	r3, r0, #1
 800cfbc:	89a3      	ldrh	r3, [r4, #12]
 800cfbe:	bf15      	itete	ne
 800cfc0:	6560      	strne	r0, [r4, #84]	; 0x54
 800cfc2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cfc6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cfca:	81a3      	strheq	r3, [r4, #12]
 800cfcc:	bf18      	it	ne
 800cfce:	81a3      	strhne	r3, [r4, #12]
 800cfd0:	bd10      	pop	{r4, pc}

0800cfd2 <__sclose>:
 800cfd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfd6:	f000 b8f1 	b.w	800d1bc <_close_r>

0800cfda <_vsniprintf_r>:
 800cfda:	b530      	push	{r4, r5, lr}
 800cfdc:	4614      	mov	r4, r2
 800cfde:	2c00      	cmp	r4, #0
 800cfe0:	b09b      	sub	sp, #108	; 0x6c
 800cfe2:	4605      	mov	r5, r0
 800cfe4:	461a      	mov	r2, r3
 800cfe6:	da05      	bge.n	800cff4 <_vsniprintf_r+0x1a>
 800cfe8:	238b      	movs	r3, #139	; 0x8b
 800cfea:	6003      	str	r3, [r0, #0]
 800cfec:	f04f 30ff 	mov.w	r0, #4294967295
 800cff0:	b01b      	add	sp, #108	; 0x6c
 800cff2:	bd30      	pop	{r4, r5, pc}
 800cff4:	f44f 7302 	mov.w	r3, #520	; 0x208
 800cff8:	f8ad 300c 	strh.w	r3, [sp, #12]
 800cffc:	bf14      	ite	ne
 800cffe:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d002:	4623      	moveq	r3, r4
 800d004:	9302      	str	r3, [sp, #8]
 800d006:	9305      	str	r3, [sp, #20]
 800d008:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d00c:	9100      	str	r1, [sp, #0]
 800d00e:	9104      	str	r1, [sp, #16]
 800d010:	f8ad 300e 	strh.w	r3, [sp, #14]
 800d014:	4669      	mov	r1, sp
 800d016:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d018:	f000 fa06 	bl	800d428 <_svfiprintf_r>
 800d01c:	1c43      	adds	r3, r0, #1
 800d01e:	bfbc      	itt	lt
 800d020:	238b      	movlt	r3, #139	; 0x8b
 800d022:	602b      	strlt	r3, [r5, #0]
 800d024:	2c00      	cmp	r4, #0
 800d026:	d0e3      	beq.n	800cff0 <_vsniprintf_r+0x16>
 800d028:	9b00      	ldr	r3, [sp, #0]
 800d02a:	2200      	movs	r2, #0
 800d02c:	701a      	strb	r2, [r3, #0]
 800d02e:	e7df      	b.n	800cff0 <_vsniprintf_r+0x16>

0800d030 <vsniprintf>:
 800d030:	b507      	push	{r0, r1, r2, lr}
 800d032:	9300      	str	r3, [sp, #0]
 800d034:	4613      	mov	r3, r2
 800d036:	460a      	mov	r2, r1
 800d038:	4601      	mov	r1, r0
 800d03a:	4803      	ldr	r0, [pc, #12]	; (800d048 <vsniprintf+0x18>)
 800d03c:	6800      	ldr	r0, [r0, #0]
 800d03e:	f7ff ffcc 	bl	800cfda <_vsniprintf_r>
 800d042:	b003      	add	sp, #12
 800d044:	f85d fb04 	ldr.w	pc, [sp], #4
 800d048:	200001e4 	.word	0x200001e4

0800d04c <__swbuf_r>:
 800d04c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d04e:	460e      	mov	r6, r1
 800d050:	4614      	mov	r4, r2
 800d052:	4605      	mov	r5, r0
 800d054:	b118      	cbz	r0, 800d05e <__swbuf_r+0x12>
 800d056:	6a03      	ldr	r3, [r0, #32]
 800d058:	b90b      	cbnz	r3, 800d05e <__swbuf_r+0x12>
 800d05a:	f7ff fecf 	bl	800cdfc <__sinit>
 800d05e:	69a3      	ldr	r3, [r4, #24]
 800d060:	60a3      	str	r3, [r4, #8]
 800d062:	89a3      	ldrh	r3, [r4, #12]
 800d064:	071a      	lsls	r2, r3, #28
 800d066:	d525      	bpl.n	800d0b4 <__swbuf_r+0x68>
 800d068:	6923      	ldr	r3, [r4, #16]
 800d06a:	b31b      	cbz	r3, 800d0b4 <__swbuf_r+0x68>
 800d06c:	6823      	ldr	r3, [r4, #0]
 800d06e:	6922      	ldr	r2, [r4, #16]
 800d070:	1a98      	subs	r0, r3, r2
 800d072:	6963      	ldr	r3, [r4, #20]
 800d074:	b2f6      	uxtb	r6, r6
 800d076:	4283      	cmp	r3, r0
 800d078:	4637      	mov	r7, r6
 800d07a:	dc04      	bgt.n	800d086 <__swbuf_r+0x3a>
 800d07c:	4621      	mov	r1, r4
 800d07e:	4628      	mov	r0, r5
 800d080:	f7ff fe06 	bl	800cc90 <_fflush_r>
 800d084:	b9e0      	cbnz	r0, 800d0c0 <__swbuf_r+0x74>
 800d086:	68a3      	ldr	r3, [r4, #8]
 800d088:	3b01      	subs	r3, #1
 800d08a:	60a3      	str	r3, [r4, #8]
 800d08c:	6823      	ldr	r3, [r4, #0]
 800d08e:	1c5a      	adds	r2, r3, #1
 800d090:	6022      	str	r2, [r4, #0]
 800d092:	701e      	strb	r6, [r3, #0]
 800d094:	6962      	ldr	r2, [r4, #20]
 800d096:	1c43      	adds	r3, r0, #1
 800d098:	429a      	cmp	r2, r3
 800d09a:	d004      	beq.n	800d0a6 <__swbuf_r+0x5a>
 800d09c:	89a3      	ldrh	r3, [r4, #12]
 800d09e:	07db      	lsls	r3, r3, #31
 800d0a0:	d506      	bpl.n	800d0b0 <__swbuf_r+0x64>
 800d0a2:	2e0a      	cmp	r6, #10
 800d0a4:	d104      	bne.n	800d0b0 <__swbuf_r+0x64>
 800d0a6:	4621      	mov	r1, r4
 800d0a8:	4628      	mov	r0, r5
 800d0aa:	f7ff fdf1 	bl	800cc90 <_fflush_r>
 800d0ae:	b938      	cbnz	r0, 800d0c0 <__swbuf_r+0x74>
 800d0b0:	4638      	mov	r0, r7
 800d0b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d0b4:	4621      	mov	r1, r4
 800d0b6:	4628      	mov	r0, r5
 800d0b8:	f000 f806 	bl	800d0c8 <__swsetup_r>
 800d0bc:	2800      	cmp	r0, #0
 800d0be:	d0d5      	beq.n	800d06c <__swbuf_r+0x20>
 800d0c0:	f04f 37ff 	mov.w	r7, #4294967295
 800d0c4:	e7f4      	b.n	800d0b0 <__swbuf_r+0x64>
	...

0800d0c8 <__swsetup_r>:
 800d0c8:	b538      	push	{r3, r4, r5, lr}
 800d0ca:	4b2a      	ldr	r3, [pc, #168]	; (800d174 <__swsetup_r+0xac>)
 800d0cc:	4605      	mov	r5, r0
 800d0ce:	6818      	ldr	r0, [r3, #0]
 800d0d0:	460c      	mov	r4, r1
 800d0d2:	b118      	cbz	r0, 800d0dc <__swsetup_r+0x14>
 800d0d4:	6a03      	ldr	r3, [r0, #32]
 800d0d6:	b90b      	cbnz	r3, 800d0dc <__swsetup_r+0x14>
 800d0d8:	f7ff fe90 	bl	800cdfc <__sinit>
 800d0dc:	89a3      	ldrh	r3, [r4, #12]
 800d0de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d0e2:	0718      	lsls	r0, r3, #28
 800d0e4:	d422      	bmi.n	800d12c <__swsetup_r+0x64>
 800d0e6:	06d9      	lsls	r1, r3, #27
 800d0e8:	d407      	bmi.n	800d0fa <__swsetup_r+0x32>
 800d0ea:	2309      	movs	r3, #9
 800d0ec:	602b      	str	r3, [r5, #0]
 800d0ee:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d0f2:	81a3      	strh	r3, [r4, #12]
 800d0f4:	f04f 30ff 	mov.w	r0, #4294967295
 800d0f8:	e034      	b.n	800d164 <__swsetup_r+0x9c>
 800d0fa:	0758      	lsls	r0, r3, #29
 800d0fc:	d512      	bpl.n	800d124 <__swsetup_r+0x5c>
 800d0fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d100:	b141      	cbz	r1, 800d114 <__swsetup_r+0x4c>
 800d102:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d106:	4299      	cmp	r1, r3
 800d108:	d002      	beq.n	800d110 <__swsetup_r+0x48>
 800d10a:	4628      	mov	r0, r5
 800d10c:	f000 f8e6 	bl	800d2dc <_free_r>
 800d110:	2300      	movs	r3, #0
 800d112:	6363      	str	r3, [r4, #52]	; 0x34
 800d114:	89a3      	ldrh	r3, [r4, #12]
 800d116:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d11a:	81a3      	strh	r3, [r4, #12]
 800d11c:	2300      	movs	r3, #0
 800d11e:	6063      	str	r3, [r4, #4]
 800d120:	6923      	ldr	r3, [r4, #16]
 800d122:	6023      	str	r3, [r4, #0]
 800d124:	89a3      	ldrh	r3, [r4, #12]
 800d126:	f043 0308 	orr.w	r3, r3, #8
 800d12a:	81a3      	strh	r3, [r4, #12]
 800d12c:	6923      	ldr	r3, [r4, #16]
 800d12e:	b94b      	cbnz	r3, 800d144 <__swsetup_r+0x7c>
 800d130:	89a3      	ldrh	r3, [r4, #12]
 800d132:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d136:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d13a:	d003      	beq.n	800d144 <__swsetup_r+0x7c>
 800d13c:	4621      	mov	r1, r4
 800d13e:	4628      	mov	r0, r5
 800d140:	f000 fd6a 	bl	800dc18 <__smakebuf_r>
 800d144:	89a0      	ldrh	r0, [r4, #12]
 800d146:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d14a:	f010 0301 	ands.w	r3, r0, #1
 800d14e:	d00a      	beq.n	800d166 <__swsetup_r+0x9e>
 800d150:	2300      	movs	r3, #0
 800d152:	60a3      	str	r3, [r4, #8]
 800d154:	6963      	ldr	r3, [r4, #20]
 800d156:	425b      	negs	r3, r3
 800d158:	61a3      	str	r3, [r4, #24]
 800d15a:	6923      	ldr	r3, [r4, #16]
 800d15c:	b943      	cbnz	r3, 800d170 <__swsetup_r+0xa8>
 800d15e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d162:	d1c4      	bne.n	800d0ee <__swsetup_r+0x26>
 800d164:	bd38      	pop	{r3, r4, r5, pc}
 800d166:	0781      	lsls	r1, r0, #30
 800d168:	bf58      	it	pl
 800d16a:	6963      	ldrpl	r3, [r4, #20]
 800d16c:	60a3      	str	r3, [r4, #8]
 800d16e:	e7f4      	b.n	800d15a <__swsetup_r+0x92>
 800d170:	2000      	movs	r0, #0
 800d172:	e7f7      	b.n	800d164 <__swsetup_r+0x9c>
 800d174:	200001e4 	.word	0x200001e4

0800d178 <memmove>:
 800d178:	4288      	cmp	r0, r1
 800d17a:	b510      	push	{r4, lr}
 800d17c:	eb01 0402 	add.w	r4, r1, r2
 800d180:	d902      	bls.n	800d188 <memmove+0x10>
 800d182:	4284      	cmp	r4, r0
 800d184:	4623      	mov	r3, r4
 800d186:	d807      	bhi.n	800d198 <memmove+0x20>
 800d188:	1e43      	subs	r3, r0, #1
 800d18a:	42a1      	cmp	r1, r4
 800d18c:	d008      	beq.n	800d1a0 <memmove+0x28>
 800d18e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d192:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d196:	e7f8      	b.n	800d18a <memmove+0x12>
 800d198:	4402      	add	r2, r0
 800d19a:	4601      	mov	r1, r0
 800d19c:	428a      	cmp	r2, r1
 800d19e:	d100      	bne.n	800d1a2 <memmove+0x2a>
 800d1a0:	bd10      	pop	{r4, pc}
 800d1a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d1a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d1aa:	e7f7      	b.n	800d19c <memmove+0x24>

0800d1ac <memset>:
 800d1ac:	4402      	add	r2, r0
 800d1ae:	4603      	mov	r3, r0
 800d1b0:	4293      	cmp	r3, r2
 800d1b2:	d100      	bne.n	800d1b6 <memset+0xa>
 800d1b4:	4770      	bx	lr
 800d1b6:	f803 1b01 	strb.w	r1, [r3], #1
 800d1ba:	e7f9      	b.n	800d1b0 <memset+0x4>

0800d1bc <_close_r>:
 800d1bc:	b538      	push	{r3, r4, r5, lr}
 800d1be:	4d06      	ldr	r5, [pc, #24]	; (800d1d8 <_close_r+0x1c>)
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	4604      	mov	r4, r0
 800d1c4:	4608      	mov	r0, r1
 800d1c6:	602b      	str	r3, [r5, #0]
 800d1c8:	f7f4 f821 	bl	800120e <_close>
 800d1cc:	1c43      	adds	r3, r0, #1
 800d1ce:	d102      	bne.n	800d1d6 <_close_r+0x1a>
 800d1d0:	682b      	ldr	r3, [r5, #0]
 800d1d2:	b103      	cbz	r3, 800d1d6 <_close_r+0x1a>
 800d1d4:	6023      	str	r3, [r4, #0]
 800d1d6:	bd38      	pop	{r3, r4, r5, pc}
 800d1d8:	200004b8 	.word	0x200004b8

0800d1dc <_lseek_r>:
 800d1dc:	b538      	push	{r3, r4, r5, lr}
 800d1de:	4d07      	ldr	r5, [pc, #28]	; (800d1fc <_lseek_r+0x20>)
 800d1e0:	4604      	mov	r4, r0
 800d1e2:	4608      	mov	r0, r1
 800d1e4:	4611      	mov	r1, r2
 800d1e6:	2200      	movs	r2, #0
 800d1e8:	602a      	str	r2, [r5, #0]
 800d1ea:	461a      	mov	r2, r3
 800d1ec:	f7f4 f836 	bl	800125c <_lseek>
 800d1f0:	1c43      	adds	r3, r0, #1
 800d1f2:	d102      	bne.n	800d1fa <_lseek_r+0x1e>
 800d1f4:	682b      	ldr	r3, [r5, #0]
 800d1f6:	b103      	cbz	r3, 800d1fa <_lseek_r+0x1e>
 800d1f8:	6023      	str	r3, [r4, #0]
 800d1fa:	bd38      	pop	{r3, r4, r5, pc}
 800d1fc:	200004b8 	.word	0x200004b8

0800d200 <_read_r>:
 800d200:	b538      	push	{r3, r4, r5, lr}
 800d202:	4d07      	ldr	r5, [pc, #28]	; (800d220 <_read_r+0x20>)
 800d204:	4604      	mov	r4, r0
 800d206:	4608      	mov	r0, r1
 800d208:	4611      	mov	r1, r2
 800d20a:	2200      	movs	r2, #0
 800d20c:	602a      	str	r2, [r5, #0]
 800d20e:	461a      	mov	r2, r3
 800d210:	f7f3 ffe0 	bl	80011d4 <_read>
 800d214:	1c43      	adds	r3, r0, #1
 800d216:	d102      	bne.n	800d21e <_read_r+0x1e>
 800d218:	682b      	ldr	r3, [r5, #0]
 800d21a:	b103      	cbz	r3, 800d21e <_read_r+0x1e>
 800d21c:	6023      	str	r3, [r4, #0]
 800d21e:	bd38      	pop	{r3, r4, r5, pc}
 800d220:	200004b8 	.word	0x200004b8

0800d224 <_sbrk_r>:
 800d224:	b538      	push	{r3, r4, r5, lr}
 800d226:	4d06      	ldr	r5, [pc, #24]	; (800d240 <_sbrk_r+0x1c>)
 800d228:	2300      	movs	r3, #0
 800d22a:	4604      	mov	r4, r0
 800d22c:	4608      	mov	r0, r1
 800d22e:	602b      	str	r3, [r5, #0]
 800d230:	f7f4 f822 	bl	8001278 <_sbrk>
 800d234:	1c43      	adds	r3, r0, #1
 800d236:	d102      	bne.n	800d23e <_sbrk_r+0x1a>
 800d238:	682b      	ldr	r3, [r5, #0]
 800d23a:	b103      	cbz	r3, 800d23e <_sbrk_r+0x1a>
 800d23c:	6023      	str	r3, [r4, #0]
 800d23e:	bd38      	pop	{r3, r4, r5, pc}
 800d240:	200004b8 	.word	0x200004b8

0800d244 <_write_r>:
 800d244:	b538      	push	{r3, r4, r5, lr}
 800d246:	4d07      	ldr	r5, [pc, #28]	; (800d264 <_write_r+0x20>)
 800d248:	4604      	mov	r4, r0
 800d24a:	4608      	mov	r0, r1
 800d24c:	4611      	mov	r1, r2
 800d24e:	2200      	movs	r2, #0
 800d250:	602a      	str	r2, [r5, #0]
 800d252:	461a      	mov	r2, r3
 800d254:	f7f3 fb62 	bl	800091c <_write>
 800d258:	1c43      	adds	r3, r0, #1
 800d25a:	d102      	bne.n	800d262 <_write_r+0x1e>
 800d25c:	682b      	ldr	r3, [r5, #0]
 800d25e:	b103      	cbz	r3, 800d262 <_write_r+0x1e>
 800d260:	6023      	str	r3, [r4, #0]
 800d262:	bd38      	pop	{r3, r4, r5, pc}
 800d264:	200004b8 	.word	0x200004b8

0800d268 <__errno>:
 800d268:	4b01      	ldr	r3, [pc, #4]	; (800d270 <__errno+0x8>)
 800d26a:	6818      	ldr	r0, [r3, #0]
 800d26c:	4770      	bx	lr
 800d26e:	bf00      	nop
 800d270:	200001e4 	.word	0x200001e4

0800d274 <__libc_init_array>:
 800d274:	b570      	push	{r4, r5, r6, lr}
 800d276:	4d0d      	ldr	r5, [pc, #52]	; (800d2ac <__libc_init_array+0x38>)
 800d278:	4c0d      	ldr	r4, [pc, #52]	; (800d2b0 <__libc_init_array+0x3c>)
 800d27a:	1b64      	subs	r4, r4, r5
 800d27c:	10a4      	asrs	r4, r4, #2
 800d27e:	2600      	movs	r6, #0
 800d280:	42a6      	cmp	r6, r4
 800d282:	d109      	bne.n	800d298 <__libc_init_array+0x24>
 800d284:	4d0b      	ldr	r5, [pc, #44]	; (800d2b4 <__libc_init_array+0x40>)
 800d286:	4c0c      	ldr	r4, [pc, #48]	; (800d2b8 <__libc_init_array+0x44>)
 800d288:	f000 ff6a 	bl	800e160 <_init>
 800d28c:	1b64      	subs	r4, r4, r5
 800d28e:	10a4      	asrs	r4, r4, #2
 800d290:	2600      	movs	r6, #0
 800d292:	42a6      	cmp	r6, r4
 800d294:	d105      	bne.n	800d2a2 <__libc_init_array+0x2e>
 800d296:	bd70      	pop	{r4, r5, r6, pc}
 800d298:	f855 3b04 	ldr.w	r3, [r5], #4
 800d29c:	4798      	blx	r3
 800d29e:	3601      	adds	r6, #1
 800d2a0:	e7ee      	b.n	800d280 <__libc_init_array+0xc>
 800d2a2:	f855 3b04 	ldr.w	r3, [r5], #4
 800d2a6:	4798      	blx	r3
 800d2a8:	3601      	adds	r6, #1
 800d2aa:	e7f2      	b.n	800d292 <__libc_init_array+0x1e>
 800d2ac:	080138ec 	.word	0x080138ec
 800d2b0:	080138ec 	.word	0x080138ec
 800d2b4:	080138ec 	.word	0x080138ec
 800d2b8:	080138f0 	.word	0x080138f0

0800d2bc <__retarget_lock_acquire_recursive>:
 800d2bc:	4770      	bx	lr

0800d2be <__retarget_lock_release_recursive>:
 800d2be:	4770      	bx	lr

0800d2c0 <memcpy>:
 800d2c0:	440a      	add	r2, r1
 800d2c2:	4291      	cmp	r1, r2
 800d2c4:	f100 33ff 	add.w	r3, r0, #4294967295
 800d2c8:	d100      	bne.n	800d2cc <memcpy+0xc>
 800d2ca:	4770      	bx	lr
 800d2cc:	b510      	push	{r4, lr}
 800d2ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d2d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d2d6:	4291      	cmp	r1, r2
 800d2d8:	d1f9      	bne.n	800d2ce <memcpy+0xe>
 800d2da:	bd10      	pop	{r4, pc}

0800d2dc <_free_r>:
 800d2dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d2de:	2900      	cmp	r1, #0
 800d2e0:	d044      	beq.n	800d36c <_free_r+0x90>
 800d2e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d2e6:	9001      	str	r0, [sp, #4]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	f1a1 0404 	sub.w	r4, r1, #4
 800d2ee:	bfb8      	it	lt
 800d2f0:	18e4      	addlt	r4, r4, r3
 800d2f2:	f7ff fc3b 	bl	800cb6c <__malloc_lock>
 800d2f6:	4a1e      	ldr	r2, [pc, #120]	; (800d370 <_free_r+0x94>)
 800d2f8:	9801      	ldr	r0, [sp, #4]
 800d2fa:	6813      	ldr	r3, [r2, #0]
 800d2fc:	b933      	cbnz	r3, 800d30c <_free_r+0x30>
 800d2fe:	6063      	str	r3, [r4, #4]
 800d300:	6014      	str	r4, [r2, #0]
 800d302:	b003      	add	sp, #12
 800d304:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d308:	f7ff bc36 	b.w	800cb78 <__malloc_unlock>
 800d30c:	42a3      	cmp	r3, r4
 800d30e:	d908      	bls.n	800d322 <_free_r+0x46>
 800d310:	6825      	ldr	r5, [r4, #0]
 800d312:	1961      	adds	r1, r4, r5
 800d314:	428b      	cmp	r3, r1
 800d316:	bf01      	itttt	eq
 800d318:	6819      	ldreq	r1, [r3, #0]
 800d31a:	685b      	ldreq	r3, [r3, #4]
 800d31c:	1949      	addeq	r1, r1, r5
 800d31e:	6021      	streq	r1, [r4, #0]
 800d320:	e7ed      	b.n	800d2fe <_free_r+0x22>
 800d322:	461a      	mov	r2, r3
 800d324:	685b      	ldr	r3, [r3, #4]
 800d326:	b10b      	cbz	r3, 800d32c <_free_r+0x50>
 800d328:	42a3      	cmp	r3, r4
 800d32a:	d9fa      	bls.n	800d322 <_free_r+0x46>
 800d32c:	6811      	ldr	r1, [r2, #0]
 800d32e:	1855      	adds	r5, r2, r1
 800d330:	42a5      	cmp	r5, r4
 800d332:	d10b      	bne.n	800d34c <_free_r+0x70>
 800d334:	6824      	ldr	r4, [r4, #0]
 800d336:	4421      	add	r1, r4
 800d338:	1854      	adds	r4, r2, r1
 800d33a:	42a3      	cmp	r3, r4
 800d33c:	6011      	str	r1, [r2, #0]
 800d33e:	d1e0      	bne.n	800d302 <_free_r+0x26>
 800d340:	681c      	ldr	r4, [r3, #0]
 800d342:	685b      	ldr	r3, [r3, #4]
 800d344:	6053      	str	r3, [r2, #4]
 800d346:	440c      	add	r4, r1
 800d348:	6014      	str	r4, [r2, #0]
 800d34a:	e7da      	b.n	800d302 <_free_r+0x26>
 800d34c:	d902      	bls.n	800d354 <_free_r+0x78>
 800d34e:	230c      	movs	r3, #12
 800d350:	6003      	str	r3, [r0, #0]
 800d352:	e7d6      	b.n	800d302 <_free_r+0x26>
 800d354:	6825      	ldr	r5, [r4, #0]
 800d356:	1961      	adds	r1, r4, r5
 800d358:	428b      	cmp	r3, r1
 800d35a:	bf04      	itt	eq
 800d35c:	6819      	ldreq	r1, [r3, #0]
 800d35e:	685b      	ldreq	r3, [r3, #4]
 800d360:	6063      	str	r3, [r4, #4]
 800d362:	bf04      	itt	eq
 800d364:	1949      	addeq	r1, r1, r5
 800d366:	6021      	streq	r1, [r4, #0]
 800d368:	6054      	str	r4, [r2, #4]
 800d36a:	e7ca      	b.n	800d302 <_free_r+0x26>
 800d36c:	b003      	add	sp, #12
 800d36e:	bd30      	pop	{r4, r5, pc}
 800d370:	20000374 	.word	0x20000374

0800d374 <__ssputs_r>:
 800d374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d378:	688e      	ldr	r6, [r1, #8]
 800d37a:	461f      	mov	r7, r3
 800d37c:	42be      	cmp	r6, r7
 800d37e:	680b      	ldr	r3, [r1, #0]
 800d380:	4682      	mov	sl, r0
 800d382:	460c      	mov	r4, r1
 800d384:	4690      	mov	r8, r2
 800d386:	d82c      	bhi.n	800d3e2 <__ssputs_r+0x6e>
 800d388:	898a      	ldrh	r2, [r1, #12]
 800d38a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d38e:	d026      	beq.n	800d3de <__ssputs_r+0x6a>
 800d390:	6965      	ldr	r5, [r4, #20]
 800d392:	6909      	ldr	r1, [r1, #16]
 800d394:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d398:	eba3 0901 	sub.w	r9, r3, r1
 800d39c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d3a0:	1c7b      	adds	r3, r7, #1
 800d3a2:	444b      	add	r3, r9
 800d3a4:	106d      	asrs	r5, r5, #1
 800d3a6:	429d      	cmp	r5, r3
 800d3a8:	bf38      	it	cc
 800d3aa:	461d      	movcc	r5, r3
 800d3ac:	0553      	lsls	r3, r2, #21
 800d3ae:	d527      	bpl.n	800d400 <__ssputs_r+0x8c>
 800d3b0:	4629      	mov	r1, r5
 800d3b2:	f7ff fb5b 	bl	800ca6c <_malloc_r>
 800d3b6:	4606      	mov	r6, r0
 800d3b8:	b360      	cbz	r0, 800d414 <__ssputs_r+0xa0>
 800d3ba:	6921      	ldr	r1, [r4, #16]
 800d3bc:	464a      	mov	r2, r9
 800d3be:	f7ff ff7f 	bl	800d2c0 <memcpy>
 800d3c2:	89a3      	ldrh	r3, [r4, #12]
 800d3c4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d3c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d3cc:	81a3      	strh	r3, [r4, #12]
 800d3ce:	6126      	str	r6, [r4, #16]
 800d3d0:	6165      	str	r5, [r4, #20]
 800d3d2:	444e      	add	r6, r9
 800d3d4:	eba5 0509 	sub.w	r5, r5, r9
 800d3d8:	6026      	str	r6, [r4, #0]
 800d3da:	60a5      	str	r5, [r4, #8]
 800d3dc:	463e      	mov	r6, r7
 800d3de:	42be      	cmp	r6, r7
 800d3e0:	d900      	bls.n	800d3e4 <__ssputs_r+0x70>
 800d3e2:	463e      	mov	r6, r7
 800d3e4:	6820      	ldr	r0, [r4, #0]
 800d3e6:	4632      	mov	r2, r6
 800d3e8:	4641      	mov	r1, r8
 800d3ea:	f7ff fec5 	bl	800d178 <memmove>
 800d3ee:	68a3      	ldr	r3, [r4, #8]
 800d3f0:	1b9b      	subs	r3, r3, r6
 800d3f2:	60a3      	str	r3, [r4, #8]
 800d3f4:	6823      	ldr	r3, [r4, #0]
 800d3f6:	4433      	add	r3, r6
 800d3f8:	6023      	str	r3, [r4, #0]
 800d3fa:	2000      	movs	r0, #0
 800d3fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d400:	462a      	mov	r2, r5
 800d402:	f000 fc9b 	bl	800dd3c <_realloc_r>
 800d406:	4606      	mov	r6, r0
 800d408:	2800      	cmp	r0, #0
 800d40a:	d1e0      	bne.n	800d3ce <__ssputs_r+0x5a>
 800d40c:	6921      	ldr	r1, [r4, #16]
 800d40e:	4650      	mov	r0, sl
 800d410:	f7ff ff64 	bl	800d2dc <_free_r>
 800d414:	230c      	movs	r3, #12
 800d416:	f8ca 3000 	str.w	r3, [sl]
 800d41a:	89a3      	ldrh	r3, [r4, #12]
 800d41c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d420:	81a3      	strh	r3, [r4, #12]
 800d422:	f04f 30ff 	mov.w	r0, #4294967295
 800d426:	e7e9      	b.n	800d3fc <__ssputs_r+0x88>

0800d428 <_svfiprintf_r>:
 800d428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d42c:	4698      	mov	r8, r3
 800d42e:	898b      	ldrh	r3, [r1, #12]
 800d430:	061b      	lsls	r3, r3, #24
 800d432:	b09d      	sub	sp, #116	; 0x74
 800d434:	4607      	mov	r7, r0
 800d436:	460d      	mov	r5, r1
 800d438:	4614      	mov	r4, r2
 800d43a:	d50e      	bpl.n	800d45a <_svfiprintf_r+0x32>
 800d43c:	690b      	ldr	r3, [r1, #16]
 800d43e:	b963      	cbnz	r3, 800d45a <_svfiprintf_r+0x32>
 800d440:	2140      	movs	r1, #64	; 0x40
 800d442:	f7ff fb13 	bl	800ca6c <_malloc_r>
 800d446:	6028      	str	r0, [r5, #0]
 800d448:	6128      	str	r0, [r5, #16]
 800d44a:	b920      	cbnz	r0, 800d456 <_svfiprintf_r+0x2e>
 800d44c:	230c      	movs	r3, #12
 800d44e:	603b      	str	r3, [r7, #0]
 800d450:	f04f 30ff 	mov.w	r0, #4294967295
 800d454:	e0d0      	b.n	800d5f8 <_svfiprintf_r+0x1d0>
 800d456:	2340      	movs	r3, #64	; 0x40
 800d458:	616b      	str	r3, [r5, #20]
 800d45a:	2300      	movs	r3, #0
 800d45c:	9309      	str	r3, [sp, #36]	; 0x24
 800d45e:	2320      	movs	r3, #32
 800d460:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d464:	f8cd 800c 	str.w	r8, [sp, #12]
 800d468:	2330      	movs	r3, #48	; 0x30
 800d46a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d610 <_svfiprintf_r+0x1e8>
 800d46e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d472:	f04f 0901 	mov.w	r9, #1
 800d476:	4623      	mov	r3, r4
 800d478:	469a      	mov	sl, r3
 800d47a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d47e:	b10a      	cbz	r2, 800d484 <_svfiprintf_r+0x5c>
 800d480:	2a25      	cmp	r2, #37	; 0x25
 800d482:	d1f9      	bne.n	800d478 <_svfiprintf_r+0x50>
 800d484:	ebba 0b04 	subs.w	fp, sl, r4
 800d488:	d00b      	beq.n	800d4a2 <_svfiprintf_r+0x7a>
 800d48a:	465b      	mov	r3, fp
 800d48c:	4622      	mov	r2, r4
 800d48e:	4629      	mov	r1, r5
 800d490:	4638      	mov	r0, r7
 800d492:	f7ff ff6f 	bl	800d374 <__ssputs_r>
 800d496:	3001      	adds	r0, #1
 800d498:	f000 80a9 	beq.w	800d5ee <_svfiprintf_r+0x1c6>
 800d49c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d49e:	445a      	add	r2, fp
 800d4a0:	9209      	str	r2, [sp, #36]	; 0x24
 800d4a2:	f89a 3000 	ldrb.w	r3, [sl]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	f000 80a1 	beq.w	800d5ee <_svfiprintf_r+0x1c6>
 800d4ac:	2300      	movs	r3, #0
 800d4ae:	f04f 32ff 	mov.w	r2, #4294967295
 800d4b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d4b6:	f10a 0a01 	add.w	sl, sl, #1
 800d4ba:	9304      	str	r3, [sp, #16]
 800d4bc:	9307      	str	r3, [sp, #28]
 800d4be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d4c2:	931a      	str	r3, [sp, #104]	; 0x68
 800d4c4:	4654      	mov	r4, sl
 800d4c6:	2205      	movs	r2, #5
 800d4c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4cc:	4850      	ldr	r0, [pc, #320]	; (800d610 <_svfiprintf_r+0x1e8>)
 800d4ce:	f7f2 fef7 	bl	80002c0 <memchr>
 800d4d2:	9a04      	ldr	r2, [sp, #16]
 800d4d4:	b9d8      	cbnz	r0, 800d50e <_svfiprintf_r+0xe6>
 800d4d6:	06d0      	lsls	r0, r2, #27
 800d4d8:	bf44      	itt	mi
 800d4da:	2320      	movmi	r3, #32
 800d4dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d4e0:	0711      	lsls	r1, r2, #28
 800d4e2:	bf44      	itt	mi
 800d4e4:	232b      	movmi	r3, #43	; 0x2b
 800d4e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d4ea:	f89a 3000 	ldrb.w	r3, [sl]
 800d4ee:	2b2a      	cmp	r3, #42	; 0x2a
 800d4f0:	d015      	beq.n	800d51e <_svfiprintf_r+0xf6>
 800d4f2:	9a07      	ldr	r2, [sp, #28]
 800d4f4:	4654      	mov	r4, sl
 800d4f6:	2000      	movs	r0, #0
 800d4f8:	f04f 0c0a 	mov.w	ip, #10
 800d4fc:	4621      	mov	r1, r4
 800d4fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d502:	3b30      	subs	r3, #48	; 0x30
 800d504:	2b09      	cmp	r3, #9
 800d506:	d94d      	bls.n	800d5a4 <_svfiprintf_r+0x17c>
 800d508:	b1b0      	cbz	r0, 800d538 <_svfiprintf_r+0x110>
 800d50a:	9207      	str	r2, [sp, #28]
 800d50c:	e014      	b.n	800d538 <_svfiprintf_r+0x110>
 800d50e:	eba0 0308 	sub.w	r3, r0, r8
 800d512:	fa09 f303 	lsl.w	r3, r9, r3
 800d516:	4313      	orrs	r3, r2
 800d518:	9304      	str	r3, [sp, #16]
 800d51a:	46a2      	mov	sl, r4
 800d51c:	e7d2      	b.n	800d4c4 <_svfiprintf_r+0x9c>
 800d51e:	9b03      	ldr	r3, [sp, #12]
 800d520:	1d19      	adds	r1, r3, #4
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	9103      	str	r1, [sp, #12]
 800d526:	2b00      	cmp	r3, #0
 800d528:	bfbb      	ittet	lt
 800d52a:	425b      	neglt	r3, r3
 800d52c:	f042 0202 	orrlt.w	r2, r2, #2
 800d530:	9307      	strge	r3, [sp, #28]
 800d532:	9307      	strlt	r3, [sp, #28]
 800d534:	bfb8      	it	lt
 800d536:	9204      	strlt	r2, [sp, #16]
 800d538:	7823      	ldrb	r3, [r4, #0]
 800d53a:	2b2e      	cmp	r3, #46	; 0x2e
 800d53c:	d10c      	bne.n	800d558 <_svfiprintf_r+0x130>
 800d53e:	7863      	ldrb	r3, [r4, #1]
 800d540:	2b2a      	cmp	r3, #42	; 0x2a
 800d542:	d134      	bne.n	800d5ae <_svfiprintf_r+0x186>
 800d544:	9b03      	ldr	r3, [sp, #12]
 800d546:	1d1a      	adds	r2, r3, #4
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	9203      	str	r2, [sp, #12]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	bfb8      	it	lt
 800d550:	f04f 33ff 	movlt.w	r3, #4294967295
 800d554:	3402      	adds	r4, #2
 800d556:	9305      	str	r3, [sp, #20]
 800d558:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800d620 <_svfiprintf_r+0x1f8>
 800d55c:	7821      	ldrb	r1, [r4, #0]
 800d55e:	2203      	movs	r2, #3
 800d560:	4650      	mov	r0, sl
 800d562:	f7f2 fead 	bl	80002c0 <memchr>
 800d566:	b138      	cbz	r0, 800d578 <_svfiprintf_r+0x150>
 800d568:	9b04      	ldr	r3, [sp, #16]
 800d56a:	eba0 000a 	sub.w	r0, r0, sl
 800d56e:	2240      	movs	r2, #64	; 0x40
 800d570:	4082      	lsls	r2, r0
 800d572:	4313      	orrs	r3, r2
 800d574:	3401      	adds	r4, #1
 800d576:	9304      	str	r3, [sp, #16]
 800d578:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d57c:	4825      	ldr	r0, [pc, #148]	; (800d614 <_svfiprintf_r+0x1ec>)
 800d57e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d582:	2206      	movs	r2, #6
 800d584:	f7f2 fe9c 	bl	80002c0 <memchr>
 800d588:	2800      	cmp	r0, #0
 800d58a:	d038      	beq.n	800d5fe <_svfiprintf_r+0x1d6>
 800d58c:	4b22      	ldr	r3, [pc, #136]	; (800d618 <_svfiprintf_r+0x1f0>)
 800d58e:	bb1b      	cbnz	r3, 800d5d8 <_svfiprintf_r+0x1b0>
 800d590:	9b03      	ldr	r3, [sp, #12]
 800d592:	3307      	adds	r3, #7
 800d594:	f023 0307 	bic.w	r3, r3, #7
 800d598:	3308      	adds	r3, #8
 800d59a:	9303      	str	r3, [sp, #12]
 800d59c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d59e:	4433      	add	r3, r6
 800d5a0:	9309      	str	r3, [sp, #36]	; 0x24
 800d5a2:	e768      	b.n	800d476 <_svfiprintf_r+0x4e>
 800d5a4:	fb0c 3202 	mla	r2, ip, r2, r3
 800d5a8:	460c      	mov	r4, r1
 800d5aa:	2001      	movs	r0, #1
 800d5ac:	e7a6      	b.n	800d4fc <_svfiprintf_r+0xd4>
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	3401      	adds	r4, #1
 800d5b2:	9305      	str	r3, [sp, #20]
 800d5b4:	4619      	mov	r1, r3
 800d5b6:	f04f 0c0a 	mov.w	ip, #10
 800d5ba:	4620      	mov	r0, r4
 800d5bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d5c0:	3a30      	subs	r2, #48	; 0x30
 800d5c2:	2a09      	cmp	r2, #9
 800d5c4:	d903      	bls.n	800d5ce <_svfiprintf_r+0x1a6>
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d0c6      	beq.n	800d558 <_svfiprintf_r+0x130>
 800d5ca:	9105      	str	r1, [sp, #20]
 800d5cc:	e7c4      	b.n	800d558 <_svfiprintf_r+0x130>
 800d5ce:	fb0c 2101 	mla	r1, ip, r1, r2
 800d5d2:	4604      	mov	r4, r0
 800d5d4:	2301      	movs	r3, #1
 800d5d6:	e7f0      	b.n	800d5ba <_svfiprintf_r+0x192>
 800d5d8:	ab03      	add	r3, sp, #12
 800d5da:	9300      	str	r3, [sp, #0]
 800d5dc:	462a      	mov	r2, r5
 800d5de:	4b0f      	ldr	r3, [pc, #60]	; (800d61c <_svfiprintf_r+0x1f4>)
 800d5e0:	a904      	add	r1, sp, #16
 800d5e2:	4638      	mov	r0, r7
 800d5e4:	f3af 8000 	nop.w
 800d5e8:	1c42      	adds	r2, r0, #1
 800d5ea:	4606      	mov	r6, r0
 800d5ec:	d1d6      	bne.n	800d59c <_svfiprintf_r+0x174>
 800d5ee:	89ab      	ldrh	r3, [r5, #12]
 800d5f0:	065b      	lsls	r3, r3, #25
 800d5f2:	f53f af2d 	bmi.w	800d450 <_svfiprintf_r+0x28>
 800d5f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d5f8:	b01d      	add	sp, #116	; 0x74
 800d5fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5fe:	ab03      	add	r3, sp, #12
 800d600:	9300      	str	r3, [sp, #0]
 800d602:	462a      	mov	r2, r5
 800d604:	4b05      	ldr	r3, [pc, #20]	; (800d61c <_svfiprintf_r+0x1f4>)
 800d606:	a904      	add	r1, sp, #16
 800d608:	4638      	mov	r0, r7
 800d60a:	f000 f9bd 	bl	800d988 <_printf_i>
 800d60e:	e7eb      	b.n	800d5e8 <_svfiprintf_r+0x1c0>
 800d610:	080138b0 	.word	0x080138b0
 800d614:	080138ba 	.word	0x080138ba
 800d618:	00000000 	.word	0x00000000
 800d61c:	0800d375 	.word	0x0800d375
 800d620:	080138b6 	.word	0x080138b6

0800d624 <__sfputc_r>:
 800d624:	6893      	ldr	r3, [r2, #8]
 800d626:	3b01      	subs	r3, #1
 800d628:	2b00      	cmp	r3, #0
 800d62a:	b410      	push	{r4}
 800d62c:	6093      	str	r3, [r2, #8]
 800d62e:	da08      	bge.n	800d642 <__sfputc_r+0x1e>
 800d630:	6994      	ldr	r4, [r2, #24]
 800d632:	42a3      	cmp	r3, r4
 800d634:	db01      	blt.n	800d63a <__sfputc_r+0x16>
 800d636:	290a      	cmp	r1, #10
 800d638:	d103      	bne.n	800d642 <__sfputc_r+0x1e>
 800d63a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d63e:	f7ff bd05 	b.w	800d04c <__swbuf_r>
 800d642:	6813      	ldr	r3, [r2, #0]
 800d644:	1c58      	adds	r0, r3, #1
 800d646:	6010      	str	r0, [r2, #0]
 800d648:	7019      	strb	r1, [r3, #0]
 800d64a:	4608      	mov	r0, r1
 800d64c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d650:	4770      	bx	lr

0800d652 <__sfputs_r>:
 800d652:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d654:	4606      	mov	r6, r0
 800d656:	460f      	mov	r7, r1
 800d658:	4614      	mov	r4, r2
 800d65a:	18d5      	adds	r5, r2, r3
 800d65c:	42ac      	cmp	r4, r5
 800d65e:	d101      	bne.n	800d664 <__sfputs_r+0x12>
 800d660:	2000      	movs	r0, #0
 800d662:	e007      	b.n	800d674 <__sfputs_r+0x22>
 800d664:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d668:	463a      	mov	r2, r7
 800d66a:	4630      	mov	r0, r6
 800d66c:	f7ff ffda 	bl	800d624 <__sfputc_r>
 800d670:	1c43      	adds	r3, r0, #1
 800d672:	d1f3      	bne.n	800d65c <__sfputs_r+0xa>
 800d674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d678 <_vfiprintf_r>:
 800d678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d67c:	460d      	mov	r5, r1
 800d67e:	b09d      	sub	sp, #116	; 0x74
 800d680:	4614      	mov	r4, r2
 800d682:	4698      	mov	r8, r3
 800d684:	4606      	mov	r6, r0
 800d686:	b118      	cbz	r0, 800d690 <_vfiprintf_r+0x18>
 800d688:	6a03      	ldr	r3, [r0, #32]
 800d68a:	b90b      	cbnz	r3, 800d690 <_vfiprintf_r+0x18>
 800d68c:	f7ff fbb6 	bl	800cdfc <__sinit>
 800d690:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d692:	07d9      	lsls	r1, r3, #31
 800d694:	d405      	bmi.n	800d6a2 <_vfiprintf_r+0x2a>
 800d696:	89ab      	ldrh	r3, [r5, #12]
 800d698:	059a      	lsls	r2, r3, #22
 800d69a:	d402      	bmi.n	800d6a2 <_vfiprintf_r+0x2a>
 800d69c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d69e:	f7ff fe0d 	bl	800d2bc <__retarget_lock_acquire_recursive>
 800d6a2:	89ab      	ldrh	r3, [r5, #12]
 800d6a4:	071b      	lsls	r3, r3, #28
 800d6a6:	d501      	bpl.n	800d6ac <_vfiprintf_r+0x34>
 800d6a8:	692b      	ldr	r3, [r5, #16]
 800d6aa:	b99b      	cbnz	r3, 800d6d4 <_vfiprintf_r+0x5c>
 800d6ac:	4629      	mov	r1, r5
 800d6ae:	4630      	mov	r0, r6
 800d6b0:	f7ff fd0a 	bl	800d0c8 <__swsetup_r>
 800d6b4:	b170      	cbz	r0, 800d6d4 <_vfiprintf_r+0x5c>
 800d6b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d6b8:	07dc      	lsls	r4, r3, #31
 800d6ba:	d504      	bpl.n	800d6c6 <_vfiprintf_r+0x4e>
 800d6bc:	f04f 30ff 	mov.w	r0, #4294967295
 800d6c0:	b01d      	add	sp, #116	; 0x74
 800d6c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6c6:	89ab      	ldrh	r3, [r5, #12]
 800d6c8:	0598      	lsls	r0, r3, #22
 800d6ca:	d4f7      	bmi.n	800d6bc <_vfiprintf_r+0x44>
 800d6cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d6ce:	f7ff fdf6 	bl	800d2be <__retarget_lock_release_recursive>
 800d6d2:	e7f3      	b.n	800d6bc <_vfiprintf_r+0x44>
 800d6d4:	2300      	movs	r3, #0
 800d6d6:	9309      	str	r3, [sp, #36]	; 0x24
 800d6d8:	2320      	movs	r3, #32
 800d6da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d6de:	f8cd 800c 	str.w	r8, [sp, #12]
 800d6e2:	2330      	movs	r3, #48	; 0x30
 800d6e4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d898 <_vfiprintf_r+0x220>
 800d6e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d6ec:	f04f 0901 	mov.w	r9, #1
 800d6f0:	4623      	mov	r3, r4
 800d6f2:	469a      	mov	sl, r3
 800d6f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d6f8:	b10a      	cbz	r2, 800d6fe <_vfiprintf_r+0x86>
 800d6fa:	2a25      	cmp	r2, #37	; 0x25
 800d6fc:	d1f9      	bne.n	800d6f2 <_vfiprintf_r+0x7a>
 800d6fe:	ebba 0b04 	subs.w	fp, sl, r4
 800d702:	d00b      	beq.n	800d71c <_vfiprintf_r+0xa4>
 800d704:	465b      	mov	r3, fp
 800d706:	4622      	mov	r2, r4
 800d708:	4629      	mov	r1, r5
 800d70a:	4630      	mov	r0, r6
 800d70c:	f7ff ffa1 	bl	800d652 <__sfputs_r>
 800d710:	3001      	adds	r0, #1
 800d712:	f000 80a9 	beq.w	800d868 <_vfiprintf_r+0x1f0>
 800d716:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d718:	445a      	add	r2, fp
 800d71a:	9209      	str	r2, [sp, #36]	; 0x24
 800d71c:	f89a 3000 	ldrb.w	r3, [sl]
 800d720:	2b00      	cmp	r3, #0
 800d722:	f000 80a1 	beq.w	800d868 <_vfiprintf_r+0x1f0>
 800d726:	2300      	movs	r3, #0
 800d728:	f04f 32ff 	mov.w	r2, #4294967295
 800d72c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d730:	f10a 0a01 	add.w	sl, sl, #1
 800d734:	9304      	str	r3, [sp, #16]
 800d736:	9307      	str	r3, [sp, #28]
 800d738:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d73c:	931a      	str	r3, [sp, #104]	; 0x68
 800d73e:	4654      	mov	r4, sl
 800d740:	2205      	movs	r2, #5
 800d742:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d746:	4854      	ldr	r0, [pc, #336]	; (800d898 <_vfiprintf_r+0x220>)
 800d748:	f7f2 fdba 	bl	80002c0 <memchr>
 800d74c:	9a04      	ldr	r2, [sp, #16]
 800d74e:	b9d8      	cbnz	r0, 800d788 <_vfiprintf_r+0x110>
 800d750:	06d1      	lsls	r1, r2, #27
 800d752:	bf44      	itt	mi
 800d754:	2320      	movmi	r3, #32
 800d756:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d75a:	0713      	lsls	r3, r2, #28
 800d75c:	bf44      	itt	mi
 800d75e:	232b      	movmi	r3, #43	; 0x2b
 800d760:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d764:	f89a 3000 	ldrb.w	r3, [sl]
 800d768:	2b2a      	cmp	r3, #42	; 0x2a
 800d76a:	d015      	beq.n	800d798 <_vfiprintf_r+0x120>
 800d76c:	9a07      	ldr	r2, [sp, #28]
 800d76e:	4654      	mov	r4, sl
 800d770:	2000      	movs	r0, #0
 800d772:	f04f 0c0a 	mov.w	ip, #10
 800d776:	4621      	mov	r1, r4
 800d778:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d77c:	3b30      	subs	r3, #48	; 0x30
 800d77e:	2b09      	cmp	r3, #9
 800d780:	d94d      	bls.n	800d81e <_vfiprintf_r+0x1a6>
 800d782:	b1b0      	cbz	r0, 800d7b2 <_vfiprintf_r+0x13a>
 800d784:	9207      	str	r2, [sp, #28]
 800d786:	e014      	b.n	800d7b2 <_vfiprintf_r+0x13a>
 800d788:	eba0 0308 	sub.w	r3, r0, r8
 800d78c:	fa09 f303 	lsl.w	r3, r9, r3
 800d790:	4313      	orrs	r3, r2
 800d792:	9304      	str	r3, [sp, #16]
 800d794:	46a2      	mov	sl, r4
 800d796:	e7d2      	b.n	800d73e <_vfiprintf_r+0xc6>
 800d798:	9b03      	ldr	r3, [sp, #12]
 800d79a:	1d19      	adds	r1, r3, #4
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	9103      	str	r1, [sp, #12]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	bfbb      	ittet	lt
 800d7a4:	425b      	neglt	r3, r3
 800d7a6:	f042 0202 	orrlt.w	r2, r2, #2
 800d7aa:	9307      	strge	r3, [sp, #28]
 800d7ac:	9307      	strlt	r3, [sp, #28]
 800d7ae:	bfb8      	it	lt
 800d7b0:	9204      	strlt	r2, [sp, #16]
 800d7b2:	7823      	ldrb	r3, [r4, #0]
 800d7b4:	2b2e      	cmp	r3, #46	; 0x2e
 800d7b6:	d10c      	bne.n	800d7d2 <_vfiprintf_r+0x15a>
 800d7b8:	7863      	ldrb	r3, [r4, #1]
 800d7ba:	2b2a      	cmp	r3, #42	; 0x2a
 800d7bc:	d134      	bne.n	800d828 <_vfiprintf_r+0x1b0>
 800d7be:	9b03      	ldr	r3, [sp, #12]
 800d7c0:	1d1a      	adds	r2, r3, #4
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	9203      	str	r2, [sp, #12]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	bfb8      	it	lt
 800d7ca:	f04f 33ff 	movlt.w	r3, #4294967295
 800d7ce:	3402      	adds	r4, #2
 800d7d0:	9305      	str	r3, [sp, #20]
 800d7d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d8a8 <_vfiprintf_r+0x230>
 800d7d6:	7821      	ldrb	r1, [r4, #0]
 800d7d8:	2203      	movs	r2, #3
 800d7da:	4650      	mov	r0, sl
 800d7dc:	f7f2 fd70 	bl	80002c0 <memchr>
 800d7e0:	b138      	cbz	r0, 800d7f2 <_vfiprintf_r+0x17a>
 800d7e2:	9b04      	ldr	r3, [sp, #16]
 800d7e4:	eba0 000a 	sub.w	r0, r0, sl
 800d7e8:	2240      	movs	r2, #64	; 0x40
 800d7ea:	4082      	lsls	r2, r0
 800d7ec:	4313      	orrs	r3, r2
 800d7ee:	3401      	adds	r4, #1
 800d7f0:	9304      	str	r3, [sp, #16]
 800d7f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7f6:	4829      	ldr	r0, [pc, #164]	; (800d89c <_vfiprintf_r+0x224>)
 800d7f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d7fc:	2206      	movs	r2, #6
 800d7fe:	f7f2 fd5f 	bl	80002c0 <memchr>
 800d802:	2800      	cmp	r0, #0
 800d804:	d03f      	beq.n	800d886 <_vfiprintf_r+0x20e>
 800d806:	4b26      	ldr	r3, [pc, #152]	; (800d8a0 <_vfiprintf_r+0x228>)
 800d808:	bb1b      	cbnz	r3, 800d852 <_vfiprintf_r+0x1da>
 800d80a:	9b03      	ldr	r3, [sp, #12]
 800d80c:	3307      	adds	r3, #7
 800d80e:	f023 0307 	bic.w	r3, r3, #7
 800d812:	3308      	adds	r3, #8
 800d814:	9303      	str	r3, [sp, #12]
 800d816:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d818:	443b      	add	r3, r7
 800d81a:	9309      	str	r3, [sp, #36]	; 0x24
 800d81c:	e768      	b.n	800d6f0 <_vfiprintf_r+0x78>
 800d81e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d822:	460c      	mov	r4, r1
 800d824:	2001      	movs	r0, #1
 800d826:	e7a6      	b.n	800d776 <_vfiprintf_r+0xfe>
 800d828:	2300      	movs	r3, #0
 800d82a:	3401      	adds	r4, #1
 800d82c:	9305      	str	r3, [sp, #20]
 800d82e:	4619      	mov	r1, r3
 800d830:	f04f 0c0a 	mov.w	ip, #10
 800d834:	4620      	mov	r0, r4
 800d836:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d83a:	3a30      	subs	r2, #48	; 0x30
 800d83c:	2a09      	cmp	r2, #9
 800d83e:	d903      	bls.n	800d848 <_vfiprintf_r+0x1d0>
 800d840:	2b00      	cmp	r3, #0
 800d842:	d0c6      	beq.n	800d7d2 <_vfiprintf_r+0x15a>
 800d844:	9105      	str	r1, [sp, #20]
 800d846:	e7c4      	b.n	800d7d2 <_vfiprintf_r+0x15a>
 800d848:	fb0c 2101 	mla	r1, ip, r1, r2
 800d84c:	4604      	mov	r4, r0
 800d84e:	2301      	movs	r3, #1
 800d850:	e7f0      	b.n	800d834 <_vfiprintf_r+0x1bc>
 800d852:	ab03      	add	r3, sp, #12
 800d854:	9300      	str	r3, [sp, #0]
 800d856:	462a      	mov	r2, r5
 800d858:	4b12      	ldr	r3, [pc, #72]	; (800d8a4 <_vfiprintf_r+0x22c>)
 800d85a:	a904      	add	r1, sp, #16
 800d85c:	4630      	mov	r0, r6
 800d85e:	f3af 8000 	nop.w
 800d862:	4607      	mov	r7, r0
 800d864:	1c78      	adds	r0, r7, #1
 800d866:	d1d6      	bne.n	800d816 <_vfiprintf_r+0x19e>
 800d868:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d86a:	07d9      	lsls	r1, r3, #31
 800d86c:	d405      	bmi.n	800d87a <_vfiprintf_r+0x202>
 800d86e:	89ab      	ldrh	r3, [r5, #12]
 800d870:	059a      	lsls	r2, r3, #22
 800d872:	d402      	bmi.n	800d87a <_vfiprintf_r+0x202>
 800d874:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d876:	f7ff fd22 	bl	800d2be <__retarget_lock_release_recursive>
 800d87a:	89ab      	ldrh	r3, [r5, #12]
 800d87c:	065b      	lsls	r3, r3, #25
 800d87e:	f53f af1d 	bmi.w	800d6bc <_vfiprintf_r+0x44>
 800d882:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d884:	e71c      	b.n	800d6c0 <_vfiprintf_r+0x48>
 800d886:	ab03      	add	r3, sp, #12
 800d888:	9300      	str	r3, [sp, #0]
 800d88a:	462a      	mov	r2, r5
 800d88c:	4b05      	ldr	r3, [pc, #20]	; (800d8a4 <_vfiprintf_r+0x22c>)
 800d88e:	a904      	add	r1, sp, #16
 800d890:	4630      	mov	r0, r6
 800d892:	f000 f879 	bl	800d988 <_printf_i>
 800d896:	e7e4      	b.n	800d862 <_vfiprintf_r+0x1ea>
 800d898:	080138b0 	.word	0x080138b0
 800d89c:	080138ba 	.word	0x080138ba
 800d8a0:	00000000 	.word	0x00000000
 800d8a4:	0800d653 	.word	0x0800d653
 800d8a8:	080138b6 	.word	0x080138b6

0800d8ac <_printf_common>:
 800d8ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d8b0:	4616      	mov	r6, r2
 800d8b2:	4699      	mov	r9, r3
 800d8b4:	688a      	ldr	r2, [r1, #8]
 800d8b6:	690b      	ldr	r3, [r1, #16]
 800d8b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d8bc:	4293      	cmp	r3, r2
 800d8be:	bfb8      	it	lt
 800d8c0:	4613      	movlt	r3, r2
 800d8c2:	6033      	str	r3, [r6, #0]
 800d8c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d8c8:	4607      	mov	r7, r0
 800d8ca:	460c      	mov	r4, r1
 800d8cc:	b10a      	cbz	r2, 800d8d2 <_printf_common+0x26>
 800d8ce:	3301      	adds	r3, #1
 800d8d0:	6033      	str	r3, [r6, #0]
 800d8d2:	6823      	ldr	r3, [r4, #0]
 800d8d4:	0699      	lsls	r1, r3, #26
 800d8d6:	bf42      	ittt	mi
 800d8d8:	6833      	ldrmi	r3, [r6, #0]
 800d8da:	3302      	addmi	r3, #2
 800d8dc:	6033      	strmi	r3, [r6, #0]
 800d8de:	6825      	ldr	r5, [r4, #0]
 800d8e0:	f015 0506 	ands.w	r5, r5, #6
 800d8e4:	d106      	bne.n	800d8f4 <_printf_common+0x48>
 800d8e6:	f104 0a19 	add.w	sl, r4, #25
 800d8ea:	68e3      	ldr	r3, [r4, #12]
 800d8ec:	6832      	ldr	r2, [r6, #0]
 800d8ee:	1a9b      	subs	r3, r3, r2
 800d8f0:	42ab      	cmp	r3, r5
 800d8f2:	dc26      	bgt.n	800d942 <_printf_common+0x96>
 800d8f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d8f8:	1e13      	subs	r3, r2, #0
 800d8fa:	6822      	ldr	r2, [r4, #0]
 800d8fc:	bf18      	it	ne
 800d8fe:	2301      	movne	r3, #1
 800d900:	0692      	lsls	r2, r2, #26
 800d902:	d42b      	bmi.n	800d95c <_printf_common+0xb0>
 800d904:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d908:	4649      	mov	r1, r9
 800d90a:	4638      	mov	r0, r7
 800d90c:	47c0      	blx	r8
 800d90e:	3001      	adds	r0, #1
 800d910:	d01e      	beq.n	800d950 <_printf_common+0xa4>
 800d912:	6823      	ldr	r3, [r4, #0]
 800d914:	6922      	ldr	r2, [r4, #16]
 800d916:	f003 0306 	and.w	r3, r3, #6
 800d91a:	2b04      	cmp	r3, #4
 800d91c:	bf02      	ittt	eq
 800d91e:	68e5      	ldreq	r5, [r4, #12]
 800d920:	6833      	ldreq	r3, [r6, #0]
 800d922:	1aed      	subeq	r5, r5, r3
 800d924:	68a3      	ldr	r3, [r4, #8]
 800d926:	bf0c      	ite	eq
 800d928:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d92c:	2500      	movne	r5, #0
 800d92e:	4293      	cmp	r3, r2
 800d930:	bfc4      	itt	gt
 800d932:	1a9b      	subgt	r3, r3, r2
 800d934:	18ed      	addgt	r5, r5, r3
 800d936:	2600      	movs	r6, #0
 800d938:	341a      	adds	r4, #26
 800d93a:	42b5      	cmp	r5, r6
 800d93c:	d11a      	bne.n	800d974 <_printf_common+0xc8>
 800d93e:	2000      	movs	r0, #0
 800d940:	e008      	b.n	800d954 <_printf_common+0xa8>
 800d942:	2301      	movs	r3, #1
 800d944:	4652      	mov	r2, sl
 800d946:	4649      	mov	r1, r9
 800d948:	4638      	mov	r0, r7
 800d94a:	47c0      	blx	r8
 800d94c:	3001      	adds	r0, #1
 800d94e:	d103      	bne.n	800d958 <_printf_common+0xac>
 800d950:	f04f 30ff 	mov.w	r0, #4294967295
 800d954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d958:	3501      	adds	r5, #1
 800d95a:	e7c6      	b.n	800d8ea <_printf_common+0x3e>
 800d95c:	18e1      	adds	r1, r4, r3
 800d95e:	1c5a      	adds	r2, r3, #1
 800d960:	2030      	movs	r0, #48	; 0x30
 800d962:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d966:	4422      	add	r2, r4
 800d968:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d96c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d970:	3302      	adds	r3, #2
 800d972:	e7c7      	b.n	800d904 <_printf_common+0x58>
 800d974:	2301      	movs	r3, #1
 800d976:	4622      	mov	r2, r4
 800d978:	4649      	mov	r1, r9
 800d97a:	4638      	mov	r0, r7
 800d97c:	47c0      	blx	r8
 800d97e:	3001      	adds	r0, #1
 800d980:	d0e6      	beq.n	800d950 <_printf_common+0xa4>
 800d982:	3601      	adds	r6, #1
 800d984:	e7d9      	b.n	800d93a <_printf_common+0x8e>
	...

0800d988 <_printf_i>:
 800d988:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d98c:	7e0f      	ldrb	r7, [r1, #24]
 800d98e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d990:	2f78      	cmp	r7, #120	; 0x78
 800d992:	4691      	mov	r9, r2
 800d994:	4680      	mov	r8, r0
 800d996:	460c      	mov	r4, r1
 800d998:	469a      	mov	sl, r3
 800d99a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d99e:	d807      	bhi.n	800d9b0 <_printf_i+0x28>
 800d9a0:	2f62      	cmp	r7, #98	; 0x62
 800d9a2:	d80a      	bhi.n	800d9ba <_printf_i+0x32>
 800d9a4:	2f00      	cmp	r7, #0
 800d9a6:	f000 80d4 	beq.w	800db52 <_printf_i+0x1ca>
 800d9aa:	2f58      	cmp	r7, #88	; 0x58
 800d9ac:	f000 80c0 	beq.w	800db30 <_printf_i+0x1a8>
 800d9b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d9b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d9b8:	e03a      	b.n	800da30 <_printf_i+0xa8>
 800d9ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d9be:	2b15      	cmp	r3, #21
 800d9c0:	d8f6      	bhi.n	800d9b0 <_printf_i+0x28>
 800d9c2:	a101      	add	r1, pc, #4	; (adr r1, 800d9c8 <_printf_i+0x40>)
 800d9c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d9c8:	0800da21 	.word	0x0800da21
 800d9cc:	0800da35 	.word	0x0800da35
 800d9d0:	0800d9b1 	.word	0x0800d9b1
 800d9d4:	0800d9b1 	.word	0x0800d9b1
 800d9d8:	0800d9b1 	.word	0x0800d9b1
 800d9dc:	0800d9b1 	.word	0x0800d9b1
 800d9e0:	0800da35 	.word	0x0800da35
 800d9e4:	0800d9b1 	.word	0x0800d9b1
 800d9e8:	0800d9b1 	.word	0x0800d9b1
 800d9ec:	0800d9b1 	.word	0x0800d9b1
 800d9f0:	0800d9b1 	.word	0x0800d9b1
 800d9f4:	0800db39 	.word	0x0800db39
 800d9f8:	0800da61 	.word	0x0800da61
 800d9fc:	0800daf3 	.word	0x0800daf3
 800da00:	0800d9b1 	.word	0x0800d9b1
 800da04:	0800d9b1 	.word	0x0800d9b1
 800da08:	0800db5b 	.word	0x0800db5b
 800da0c:	0800d9b1 	.word	0x0800d9b1
 800da10:	0800da61 	.word	0x0800da61
 800da14:	0800d9b1 	.word	0x0800d9b1
 800da18:	0800d9b1 	.word	0x0800d9b1
 800da1c:	0800dafb 	.word	0x0800dafb
 800da20:	682b      	ldr	r3, [r5, #0]
 800da22:	1d1a      	adds	r2, r3, #4
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	602a      	str	r2, [r5, #0]
 800da28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800da2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800da30:	2301      	movs	r3, #1
 800da32:	e09f      	b.n	800db74 <_printf_i+0x1ec>
 800da34:	6820      	ldr	r0, [r4, #0]
 800da36:	682b      	ldr	r3, [r5, #0]
 800da38:	0607      	lsls	r7, r0, #24
 800da3a:	f103 0104 	add.w	r1, r3, #4
 800da3e:	6029      	str	r1, [r5, #0]
 800da40:	d501      	bpl.n	800da46 <_printf_i+0xbe>
 800da42:	681e      	ldr	r6, [r3, #0]
 800da44:	e003      	b.n	800da4e <_printf_i+0xc6>
 800da46:	0646      	lsls	r6, r0, #25
 800da48:	d5fb      	bpl.n	800da42 <_printf_i+0xba>
 800da4a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800da4e:	2e00      	cmp	r6, #0
 800da50:	da03      	bge.n	800da5a <_printf_i+0xd2>
 800da52:	232d      	movs	r3, #45	; 0x2d
 800da54:	4276      	negs	r6, r6
 800da56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800da5a:	485a      	ldr	r0, [pc, #360]	; (800dbc4 <_printf_i+0x23c>)
 800da5c:	230a      	movs	r3, #10
 800da5e:	e012      	b.n	800da86 <_printf_i+0xfe>
 800da60:	682b      	ldr	r3, [r5, #0]
 800da62:	6820      	ldr	r0, [r4, #0]
 800da64:	1d19      	adds	r1, r3, #4
 800da66:	6029      	str	r1, [r5, #0]
 800da68:	0605      	lsls	r5, r0, #24
 800da6a:	d501      	bpl.n	800da70 <_printf_i+0xe8>
 800da6c:	681e      	ldr	r6, [r3, #0]
 800da6e:	e002      	b.n	800da76 <_printf_i+0xee>
 800da70:	0641      	lsls	r1, r0, #25
 800da72:	d5fb      	bpl.n	800da6c <_printf_i+0xe4>
 800da74:	881e      	ldrh	r6, [r3, #0]
 800da76:	4853      	ldr	r0, [pc, #332]	; (800dbc4 <_printf_i+0x23c>)
 800da78:	2f6f      	cmp	r7, #111	; 0x6f
 800da7a:	bf0c      	ite	eq
 800da7c:	2308      	moveq	r3, #8
 800da7e:	230a      	movne	r3, #10
 800da80:	2100      	movs	r1, #0
 800da82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800da86:	6865      	ldr	r5, [r4, #4]
 800da88:	60a5      	str	r5, [r4, #8]
 800da8a:	2d00      	cmp	r5, #0
 800da8c:	bfa2      	ittt	ge
 800da8e:	6821      	ldrge	r1, [r4, #0]
 800da90:	f021 0104 	bicge.w	r1, r1, #4
 800da94:	6021      	strge	r1, [r4, #0]
 800da96:	b90e      	cbnz	r6, 800da9c <_printf_i+0x114>
 800da98:	2d00      	cmp	r5, #0
 800da9a:	d04b      	beq.n	800db34 <_printf_i+0x1ac>
 800da9c:	4615      	mov	r5, r2
 800da9e:	fbb6 f1f3 	udiv	r1, r6, r3
 800daa2:	fb03 6711 	mls	r7, r3, r1, r6
 800daa6:	5dc7      	ldrb	r7, [r0, r7]
 800daa8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800daac:	4637      	mov	r7, r6
 800daae:	42bb      	cmp	r3, r7
 800dab0:	460e      	mov	r6, r1
 800dab2:	d9f4      	bls.n	800da9e <_printf_i+0x116>
 800dab4:	2b08      	cmp	r3, #8
 800dab6:	d10b      	bne.n	800dad0 <_printf_i+0x148>
 800dab8:	6823      	ldr	r3, [r4, #0]
 800daba:	07de      	lsls	r6, r3, #31
 800dabc:	d508      	bpl.n	800dad0 <_printf_i+0x148>
 800dabe:	6923      	ldr	r3, [r4, #16]
 800dac0:	6861      	ldr	r1, [r4, #4]
 800dac2:	4299      	cmp	r1, r3
 800dac4:	bfde      	ittt	le
 800dac6:	2330      	movle	r3, #48	; 0x30
 800dac8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800dacc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800dad0:	1b52      	subs	r2, r2, r5
 800dad2:	6122      	str	r2, [r4, #16]
 800dad4:	f8cd a000 	str.w	sl, [sp]
 800dad8:	464b      	mov	r3, r9
 800dada:	aa03      	add	r2, sp, #12
 800dadc:	4621      	mov	r1, r4
 800dade:	4640      	mov	r0, r8
 800dae0:	f7ff fee4 	bl	800d8ac <_printf_common>
 800dae4:	3001      	adds	r0, #1
 800dae6:	d14a      	bne.n	800db7e <_printf_i+0x1f6>
 800dae8:	f04f 30ff 	mov.w	r0, #4294967295
 800daec:	b004      	add	sp, #16
 800daee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800daf2:	6823      	ldr	r3, [r4, #0]
 800daf4:	f043 0320 	orr.w	r3, r3, #32
 800daf8:	6023      	str	r3, [r4, #0]
 800dafa:	4833      	ldr	r0, [pc, #204]	; (800dbc8 <_printf_i+0x240>)
 800dafc:	2778      	movs	r7, #120	; 0x78
 800dafe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800db02:	6823      	ldr	r3, [r4, #0]
 800db04:	6829      	ldr	r1, [r5, #0]
 800db06:	061f      	lsls	r7, r3, #24
 800db08:	f851 6b04 	ldr.w	r6, [r1], #4
 800db0c:	d402      	bmi.n	800db14 <_printf_i+0x18c>
 800db0e:	065f      	lsls	r7, r3, #25
 800db10:	bf48      	it	mi
 800db12:	b2b6      	uxthmi	r6, r6
 800db14:	07df      	lsls	r7, r3, #31
 800db16:	bf48      	it	mi
 800db18:	f043 0320 	orrmi.w	r3, r3, #32
 800db1c:	6029      	str	r1, [r5, #0]
 800db1e:	bf48      	it	mi
 800db20:	6023      	strmi	r3, [r4, #0]
 800db22:	b91e      	cbnz	r6, 800db2c <_printf_i+0x1a4>
 800db24:	6823      	ldr	r3, [r4, #0]
 800db26:	f023 0320 	bic.w	r3, r3, #32
 800db2a:	6023      	str	r3, [r4, #0]
 800db2c:	2310      	movs	r3, #16
 800db2e:	e7a7      	b.n	800da80 <_printf_i+0xf8>
 800db30:	4824      	ldr	r0, [pc, #144]	; (800dbc4 <_printf_i+0x23c>)
 800db32:	e7e4      	b.n	800dafe <_printf_i+0x176>
 800db34:	4615      	mov	r5, r2
 800db36:	e7bd      	b.n	800dab4 <_printf_i+0x12c>
 800db38:	682b      	ldr	r3, [r5, #0]
 800db3a:	6826      	ldr	r6, [r4, #0]
 800db3c:	6961      	ldr	r1, [r4, #20]
 800db3e:	1d18      	adds	r0, r3, #4
 800db40:	6028      	str	r0, [r5, #0]
 800db42:	0635      	lsls	r5, r6, #24
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	d501      	bpl.n	800db4c <_printf_i+0x1c4>
 800db48:	6019      	str	r1, [r3, #0]
 800db4a:	e002      	b.n	800db52 <_printf_i+0x1ca>
 800db4c:	0670      	lsls	r0, r6, #25
 800db4e:	d5fb      	bpl.n	800db48 <_printf_i+0x1c0>
 800db50:	8019      	strh	r1, [r3, #0]
 800db52:	2300      	movs	r3, #0
 800db54:	6123      	str	r3, [r4, #16]
 800db56:	4615      	mov	r5, r2
 800db58:	e7bc      	b.n	800dad4 <_printf_i+0x14c>
 800db5a:	682b      	ldr	r3, [r5, #0]
 800db5c:	1d1a      	adds	r2, r3, #4
 800db5e:	602a      	str	r2, [r5, #0]
 800db60:	681d      	ldr	r5, [r3, #0]
 800db62:	6862      	ldr	r2, [r4, #4]
 800db64:	2100      	movs	r1, #0
 800db66:	4628      	mov	r0, r5
 800db68:	f7f2 fbaa 	bl	80002c0 <memchr>
 800db6c:	b108      	cbz	r0, 800db72 <_printf_i+0x1ea>
 800db6e:	1b40      	subs	r0, r0, r5
 800db70:	6060      	str	r0, [r4, #4]
 800db72:	6863      	ldr	r3, [r4, #4]
 800db74:	6123      	str	r3, [r4, #16]
 800db76:	2300      	movs	r3, #0
 800db78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800db7c:	e7aa      	b.n	800dad4 <_printf_i+0x14c>
 800db7e:	6923      	ldr	r3, [r4, #16]
 800db80:	462a      	mov	r2, r5
 800db82:	4649      	mov	r1, r9
 800db84:	4640      	mov	r0, r8
 800db86:	47d0      	blx	sl
 800db88:	3001      	adds	r0, #1
 800db8a:	d0ad      	beq.n	800dae8 <_printf_i+0x160>
 800db8c:	6823      	ldr	r3, [r4, #0]
 800db8e:	079b      	lsls	r3, r3, #30
 800db90:	d413      	bmi.n	800dbba <_printf_i+0x232>
 800db92:	68e0      	ldr	r0, [r4, #12]
 800db94:	9b03      	ldr	r3, [sp, #12]
 800db96:	4298      	cmp	r0, r3
 800db98:	bfb8      	it	lt
 800db9a:	4618      	movlt	r0, r3
 800db9c:	e7a6      	b.n	800daec <_printf_i+0x164>
 800db9e:	2301      	movs	r3, #1
 800dba0:	4632      	mov	r2, r6
 800dba2:	4649      	mov	r1, r9
 800dba4:	4640      	mov	r0, r8
 800dba6:	47d0      	blx	sl
 800dba8:	3001      	adds	r0, #1
 800dbaa:	d09d      	beq.n	800dae8 <_printf_i+0x160>
 800dbac:	3501      	adds	r5, #1
 800dbae:	68e3      	ldr	r3, [r4, #12]
 800dbb0:	9903      	ldr	r1, [sp, #12]
 800dbb2:	1a5b      	subs	r3, r3, r1
 800dbb4:	42ab      	cmp	r3, r5
 800dbb6:	dcf2      	bgt.n	800db9e <_printf_i+0x216>
 800dbb8:	e7eb      	b.n	800db92 <_printf_i+0x20a>
 800dbba:	2500      	movs	r5, #0
 800dbbc:	f104 0619 	add.w	r6, r4, #25
 800dbc0:	e7f5      	b.n	800dbae <_printf_i+0x226>
 800dbc2:	bf00      	nop
 800dbc4:	080138c1 	.word	0x080138c1
 800dbc8:	080138d2 	.word	0x080138d2

0800dbcc <__swhatbuf_r>:
 800dbcc:	b570      	push	{r4, r5, r6, lr}
 800dbce:	460c      	mov	r4, r1
 800dbd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbd4:	2900      	cmp	r1, #0
 800dbd6:	b096      	sub	sp, #88	; 0x58
 800dbd8:	4615      	mov	r5, r2
 800dbda:	461e      	mov	r6, r3
 800dbdc:	da0d      	bge.n	800dbfa <__swhatbuf_r+0x2e>
 800dbde:	89a3      	ldrh	r3, [r4, #12]
 800dbe0:	f013 0f80 	tst.w	r3, #128	; 0x80
 800dbe4:	f04f 0100 	mov.w	r1, #0
 800dbe8:	bf0c      	ite	eq
 800dbea:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800dbee:	2340      	movne	r3, #64	; 0x40
 800dbf0:	2000      	movs	r0, #0
 800dbf2:	6031      	str	r1, [r6, #0]
 800dbf4:	602b      	str	r3, [r5, #0]
 800dbf6:	b016      	add	sp, #88	; 0x58
 800dbf8:	bd70      	pop	{r4, r5, r6, pc}
 800dbfa:	466a      	mov	r2, sp
 800dbfc:	f000 f87c 	bl	800dcf8 <_fstat_r>
 800dc00:	2800      	cmp	r0, #0
 800dc02:	dbec      	blt.n	800dbde <__swhatbuf_r+0x12>
 800dc04:	9901      	ldr	r1, [sp, #4]
 800dc06:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800dc0a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800dc0e:	4259      	negs	r1, r3
 800dc10:	4159      	adcs	r1, r3
 800dc12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc16:	e7eb      	b.n	800dbf0 <__swhatbuf_r+0x24>

0800dc18 <__smakebuf_r>:
 800dc18:	898b      	ldrh	r3, [r1, #12]
 800dc1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dc1c:	079d      	lsls	r5, r3, #30
 800dc1e:	4606      	mov	r6, r0
 800dc20:	460c      	mov	r4, r1
 800dc22:	d507      	bpl.n	800dc34 <__smakebuf_r+0x1c>
 800dc24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dc28:	6023      	str	r3, [r4, #0]
 800dc2a:	6123      	str	r3, [r4, #16]
 800dc2c:	2301      	movs	r3, #1
 800dc2e:	6163      	str	r3, [r4, #20]
 800dc30:	b002      	add	sp, #8
 800dc32:	bd70      	pop	{r4, r5, r6, pc}
 800dc34:	ab01      	add	r3, sp, #4
 800dc36:	466a      	mov	r2, sp
 800dc38:	f7ff ffc8 	bl	800dbcc <__swhatbuf_r>
 800dc3c:	9900      	ldr	r1, [sp, #0]
 800dc3e:	4605      	mov	r5, r0
 800dc40:	4630      	mov	r0, r6
 800dc42:	f7fe ff13 	bl	800ca6c <_malloc_r>
 800dc46:	b948      	cbnz	r0, 800dc5c <__smakebuf_r+0x44>
 800dc48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc4c:	059a      	lsls	r2, r3, #22
 800dc4e:	d4ef      	bmi.n	800dc30 <__smakebuf_r+0x18>
 800dc50:	f023 0303 	bic.w	r3, r3, #3
 800dc54:	f043 0302 	orr.w	r3, r3, #2
 800dc58:	81a3      	strh	r3, [r4, #12]
 800dc5a:	e7e3      	b.n	800dc24 <__smakebuf_r+0xc>
 800dc5c:	89a3      	ldrh	r3, [r4, #12]
 800dc5e:	6020      	str	r0, [r4, #0]
 800dc60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc64:	81a3      	strh	r3, [r4, #12]
 800dc66:	9b00      	ldr	r3, [sp, #0]
 800dc68:	6163      	str	r3, [r4, #20]
 800dc6a:	9b01      	ldr	r3, [sp, #4]
 800dc6c:	6120      	str	r0, [r4, #16]
 800dc6e:	b15b      	cbz	r3, 800dc88 <__smakebuf_r+0x70>
 800dc70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dc74:	4630      	mov	r0, r6
 800dc76:	f000 f851 	bl	800dd1c <_isatty_r>
 800dc7a:	b128      	cbz	r0, 800dc88 <__smakebuf_r+0x70>
 800dc7c:	89a3      	ldrh	r3, [r4, #12]
 800dc7e:	f023 0303 	bic.w	r3, r3, #3
 800dc82:	f043 0301 	orr.w	r3, r3, #1
 800dc86:	81a3      	strh	r3, [r4, #12]
 800dc88:	89a3      	ldrh	r3, [r4, #12]
 800dc8a:	431d      	orrs	r5, r3
 800dc8c:	81a5      	strh	r5, [r4, #12]
 800dc8e:	e7cf      	b.n	800dc30 <__smakebuf_r+0x18>

0800dc90 <_putc_r>:
 800dc90:	b570      	push	{r4, r5, r6, lr}
 800dc92:	460d      	mov	r5, r1
 800dc94:	4614      	mov	r4, r2
 800dc96:	4606      	mov	r6, r0
 800dc98:	b118      	cbz	r0, 800dca2 <_putc_r+0x12>
 800dc9a:	6a03      	ldr	r3, [r0, #32]
 800dc9c:	b90b      	cbnz	r3, 800dca2 <_putc_r+0x12>
 800dc9e:	f7ff f8ad 	bl	800cdfc <__sinit>
 800dca2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dca4:	07d8      	lsls	r0, r3, #31
 800dca6:	d405      	bmi.n	800dcb4 <_putc_r+0x24>
 800dca8:	89a3      	ldrh	r3, [r4, #12]
 800dcaa:	0599      	lsls	r1, r3, #22
 800dcac:	d402      	bmi.n	800dcb4 <_putc_r+0x24>
 800dcae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dcb0:	f7ff fb04 	bl	800d2bc <__retarget_lock_acquire_recursive>
 800dcb4:	68a3      	ldr	r3, [r4, #8]
 800dcb6:	3b01      	subs	r3, #1
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	60a3      	str	r3, [r4, #8]
 800dcbc:	da05      	bge.n	800dcca <_putc_r+0x3a>
 800dcbe:	69a2      	ldr	r2, [r4, #24]
 800dcc0:	4293      	cmp	r3, r2
 800dcc2:	db12      	blt.n	800dcea <_putc_r+0x5a>
 800dcc4:	b2eb      	uxtb	r3, r5
 800dcc6:	2b0a      	cmp	r3, #10
 800dcc8:	d00f      	beq.n	800dcea <_putc_r+0x5a>
 800dcca:	6823      	ldr	r3, [r4, #0]
 800dccc:	1c5a      	adds	r2, r3, #1
 800dcce:	6022      	str	r2, [r4, #0]
 800dcd0:	701d      	strb	r5, [r3, #0]
 800dcd2:	b2ed      	uxtb	r5, r5
 800dcd4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dcd6:	07da      	lsls	r2, r3, #31
 800dcd8:	d405      	bmi.n	800dce6 <_putc_r+0x56>
 800dcda:	89a3      	ldrh	r3, [r4, #12]
 800dcdc:	059b      	lsls	r3, r3, #22
 800dcde:	d402      	bmi.n	800dce6 <_putc_r+0x56>
 800dce0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dce2:	f7ff faec 	bl	800d2be <__retarget_lock_release_recursive>
 800dce6:	4628      	mov	r0, r5
 800dce8:	bd70      	pop	{r4, r5, r6, pc}
 800dcea:	4629      	mov	r1, r5
 800dcec:	4622      	mov	r2, r4
 800dcee:	4630      	mov	r0, r6
 800dcf0:	f7ff f9ac 	bl	800d04c <__swbuf_r>
 800dcf4:	4605      	mov	r5, r0
 800dcf6:	e7ed      	b.n	800dcd4 <_putc_r+0x44>

0800dcf8 <_fstat_r>:
 800dcf8:	b538      	push	{r3, r4, r5, lr}
 800dcfa:	4d07      	ldr	r5, [pc, #28]	; (800dd18 <_fstat_r+0x20>)
 800dcfc:	2300      	movs	r3, #0
 800dcfe:	4604      	mov	r4, r0
 800dd00:	4608      	mov	r0, r1
 800dd02:	4611      	mov	r1, r2
 800dd04:	602b      	str	r3, [r5, #0]
 800dd06:	f7f3 fa8e 	bl	8001226 <_fstat>
 800dd0a:	1c43      	adds	r3, r0, #1
 800dd0c:	d102      	bne.n	800dd14 <_fstat_r+0x1c>
 800dd0e:	682b      	ldr	r3, [r5, #0]
 800dd10:	b103      	cbz	r3, 800dd14 <_fstat_r+0x1c>
 800dd12:	6023      	str	r3, [r4, #0]
 800dd14:	bd38      	pop	{r3, r4, r5, pc}
 800dd16:	bf00      	nop
 800dd18:	200004b8 	.word	0x200004b8

0800dd1c <_isatty_r>:
 800dd1c:	b538      	push	{r3, r4, r5, lr}
 800dd1e:	4d06      	ldr	r5, [pc, #24]	; (800dd38 <_isatty_r+0x1c>)
 800dd20:	2300      	movs	r3, #0
 800dd22:	4604      	mov	r4, r0
 800dd24:	4608      	mov	r0, r1
 800dd26:	602b      	str	r3, [r5, #0]
 800dd28:	f7f3 fa8d 	bl	8001246 <_isatty>
 800dd2c:	1c43      	adds	r3, r0, #1
 800dd2e:	d102      	bne.n	800dd36 <_isatty_r+0x1a>
 800dd30:	682b      	ldr	r3, [r5, #0]
 800dd32:	b103      	cbz	r3, 800dd36 <_isatty_r+0x1a>
 800dd34:	6023      	str	r3, [r4, #0]
 800dd36:	bd38      	pop	{r3, r4, r5, pc}
 800dd38:	200004b8 	.word	0x200004b8

0800dd3c <_realloc_r>:
 800dd3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd40:	4680      	mov	r8, r0
 800dd42:	4614      	mov	r4, r2
 800dd44:	460e      	mov	r6, r1
 800dd46:	b921      	cbnz	r1, 800dd52 <_realloc_r+0x16>
 800dd48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dd4c:	4611      	mov	r1, r2
 800dd4e:	f7fe be8d 	b.w	800ca6c <_malloc_r>
 800dd52:	b92a      	cbnz	r2, 800dd60 <_realloc_r+0x24>
 800dd54:	f7ff fac2 	bl	800d2dc <_free_r>
 800dd58:	4625      	mov	r5, r4
 800dd5a:	4628      	mov	r0, r5
 800dd5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd60:	f000 f81b 	bl	800dd9a <_malloc_usable_size_r>
 800dd64:	4284      	cmp	r4, r0
 800dd66:	4607      	mov	r7, r0
 800dd68:	d802      	bhi.n	800dd70 <_realloc_r+0x34>
 800dd6a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dd6e:	d812      	bhi.n	800dd96 <_realloc_r+0x5a>
 800dd70:	4621      	mov	r1, r4
 800dd72:	4640      	mov	r0, r8
 800dd74:	f7fe fe7a 	bl	800ca6c <_malloc_r>
 800dd78:	4605      	mov	r5, r0
 800dd7a:	2800      	cmp	r0, #0
 800dd7c:	d0ed      	beq.n	800dd5a <_realloc_r+0x1e>
 800dd7e:	42bc      	cmp	r4, r7
 800dd80:	4622      	mov	r2, r4
 800dd82:	4631      	mov	r1, r6
 800dd84:	bf28      	it	cs
 800dd86:	463a      	movcs	r2, r7
 800dd88:	f7ff fa9a 	bl	800d2c0 <memcpy>
 800dd8c:	4631      	mov	r1, r6
 800dd8e:	4640      	mov	r0, r8
 800dd90:	f7ff faa4 	bl	800d2dc <_free_r>
 800dd94:	e7e1      	b.n	800dd5a <_realloc_r+0x1e>
 800dd96:	4635      	mov	r5, r6
 800dd98:	e7df      	b.n	800dd5a <_realloc_r+0x1e>

0800dd9a <_malloc_usable_size_r>:
 800dd9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd9e:	1f18      	subs	r0, r3, #4
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	bfbc      	itt	lt
 800dda4:	580b      	ldrlt	r3, [r1, r0]
 800dda6:	18c0      	addlt	r0, r0, r3
 800dda8:	4770      	bx	lr
	...

0800ddac <log10f>:
 800ddac:	b508      	push	{r3, lr}
 800ddae:	ed2d 8b02 	vpush	{d8}
 800ddb2:	eeb0 8a40 	vmov.f32	s16, s0
 800ddb6:	f000 f889 	bl	800decc <__ieee754_log10f>
 800ddba:	eeb4 8a48 	vcmp.f32	s16, s16
 800ddbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddc2:	d60f      	bvs.n	800dde4 <log10f+0x38>
 800ddc4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800ddc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddcc:	d80a      	bhi.n	800dde4 <log10f+0x38>
 800ddce:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800ddd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddd6:	d108      	bne.n	800ddea <log10f+0x3e>
 800ddd8:	f7ff fa46 	bl	800d268 <__errno>
 800dddc:	2322      	movs	r3, #34	; 0x22
 800ddde:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800de00 <log10f+0x54>
 800dde2:	6003      	str	r3, [r0, #0]
 800dde4:	ecbd 8b02 	vpop	{d8}
 800dde8:	bd08      	pop	{r3, pc}
 800ddea:	f7ff fa3d 	bl	800d268 <__errno>
 800ddee:	ecbd 8b02 	vpop	{d8}
 800ddf2:	2321      	movs	r3, #33	; 0x21
 800ddf4:	6003      	str	r3, [r0, #0]
 800ddf6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ddfa:	4802      	ldr	r0, [pc, #8]	; (800de04 <log10f+0x58>)
 800ddfc:	f000 b804 	b.w	800de08 <nanf>
 800de00:	ff800000 	.word	0xff800000
 800de04:	080138b5 	.word	0x080138b5

0800de08 <nanf>:
 800de08:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800de10 <nanf+0x8>
 800de0c:	4770      	bx	lr
 800de0e:	bf00      	nop
 800de10:	7fc00000 	.word	0x7fc00000

0800de14 <fmaxf>:
 800de14:	b508      	push	{r3, lr}
 800de16:	ed2d 8b02 	vpush	{d8}
 800de1a:	eeb0 8a40 	vmov.f32	s16, s0
 800de1e:	eef0 8a60 	vmov.f32	s17, s1
 800de22:	f000 f813 	bl	800de4c <__fpclassifyf>
 800de26:	b148      	cbz	r0, 800de3c <fmaxf+0x28>
 800de28:	eeb0 0a68 	vmov.f32	s0, s17
 800de2c:	f000 f80e 	bl	800de4c <__fpclassifyf>
 800de30:	b130      	cbz	r0, 800de40 <fmaxf+0x2c>
 800de32:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800de36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de3a:	dc01      	bgt.n	800de40 <fmaxf+0x2c>
 800de3c:	eeb0 8a68 	vmov.f32	s16, s17
 800de40:	eeb0 0a48 	vmov.f32	s0, s16
 800de44:	ecbd 8b02 	vpop	{d8}
 800de48:	bd08      	pop	{r3, pc}
	...

0800de4c <__fpclassifyf>:
 800de4c:	ee10 3a10 	vmov	r3, s0
 800de50:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 800de54:	d00d      	beq.n	800de72 <__fpclassifyf+0x26>
 800de56:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 800de5a:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800de5e:	d30a      	bcc.n	800de76 <__fpclassifyf+0x2a>
 800de60:	4b07      	ldr	r3, [pc, #28]	; (800de80 <__fpclassifyf+0x34>)
 800de62:	1e42      	subs	r2, r0, #1
 800de64:	429a      	cmp	r2, r3
 800de66:	d908      	bls.n	800de7a <__fpclassifyf+0x2e>
 800de68:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 800de6c:	4258      	negs	r0, r3
 800de6e:	4158      	adcs	r0, r3
 800de70:	4770      	bx	lr
 800de72:	2002      	movs	r0, #2
 800de74:	4770      	bx	lr
 800de76:	2004      	movs	r0, #4
 800de78:	4770      	bx	lr
 800de7a:	2003      	movs	r0, #3
 800de7c:	4770      	bx	lr
 800de7e:	bf00      	nop
 800de80:	007ffffe 	.word	0x007ffffe

0800de84 <roundf>:
 800de84:	ee10 0a10 	vmov	r0, s0
 800de88:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800de8c:	3a7f      	subs	r2, #127	; 0x7f
 800de8e:	2a16      	cmp	r2, #22
 800de90:	dc15      	bgt.n	800debe <roundf+0x3a>
 800de92:	2a00      	cmp	r2, #0
 800de94:	da08      	bge.n	800dea8 <roundf+0x24>
 800de96:	3201      	adds	r2, #1
 800de98:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800de9c:	d101      	bne.n	800dea2 <roundf+0x1e>
 800de9e:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800dea2:	ee00 3a10 	vmov	s0, r3
 800dea6:	4770      	bx	lr
 800dea8:	4907      	ldr	r1, [pc, #28]	; (800dec8 <roundf+0x44>)
 800deaa:	4111      	asrs	r1, r2
 800deac:	4208      	tst	r0, r1
 800deae:	d0fa      	beq.n	800dea6 <roundf+0x22>
 800deb0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800deb4:	4113      	asrs	r3, r2
 800deb6:	4403      	add	r3, r0
 800deb8:	ea23 0301 	bic.w	r3, r3, r1
 800debc:	e7f1      	b.n	800dea2 <roundf+0x1e>
 800debe:	2a80      	cmp	r2, #128	; 0x80
 800dec0:	d1f1      	bne.n	800dea6 <roundf+0x22>
 800dec2:	ee30 0a00 	vadd.f32	s0, s0, s0
 800dec6:	4770      	bx	lr
 800dec8:	007fffff 	.word	0x007fffff

0800decc <__ieee754_log10f>:
 800decc:	b508      	push	{r3, lr}
 800dece:	ee10 2a10 	vmov	r2, s0
 800ded2:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800ded6:	ed2d 8b02 	vpush	{d8}
 800deda:	d108      	bne.n	800deee <__ieee754_log10f+0x22>
 800dedc:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800df64 <__ieee754_log10f+0x98>
 800dee0:	eddf 7a21 	vldr	s15, [pc, #132]	; 800df68 <__ieee754_log10f+0x9c>
 800dee4:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800dee8:	ecbd 8b02 	vpop	{d8}
 800deec:	bd08      	pop	{r3, pc}
 800deee:	2a00      	cmp	r2, #0
 800def0:	da02      	bge.n	800def8 <__ieee754_log10f+0x2c>
 800def2:	ee30 7a40 	vsub.f32	s14, s0, s0
 800def6:	e7f3      	b.n	800dee0 <__ieee754_log10f+0x14>
 800def8:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800defc:	db02      	blt.n	800df04 <__ieee754_log10f+0x38>
 800defe:	ee30 0a00 	vadd.f32	s0, s0, s0
 800df02:	e7f1      	b.n	800dee8 <__ieee754_log10f+0x1c>
 800df04:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800df08:	bfbf      	itttt	lt
 800df0a:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 800df6c <__ieee754_log10f+0xa0>
 800df0e:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800df12:	f06f 0118 	mvnlt.w	r1, #24
 800df16:	ee17 2a90 	vmovlt	r2, s15
 800df1a:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800df1e:	bfa8      	it	ge
 800df20:	2100      	movge	r1, #0
 800df22:	3b7f      	subs	r3, #127	; 0x7f
 800df24:	440b      	add	r3, r1
 800df26:	0fd9      	lsrs	r1, r3, #31
 800df28:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800df2c:	ee07 3a90 	vmov	s15, r3
 800df30:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800df34:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 800df38:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800df3c:	ee00 3a10 	vmov	s0, r3
 800df40:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800df44:	f000 f81a 	bl	800df7c <__ieee754_logf>
 800df48:	eddf 7a09 	vldr	s15, [pc, #36]	; 800df70 <__ieee754_log10f+0xa4>
 800df4c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800df50:	eddf 7a08 	vldr	s15, [pc, #32]	; 800df74 <__ieee754_log10f+0xa8>
 800df54:	eea8 0a27 	vfma.f32	s0, s16, s15
 800df58:	eddf 7a07 	vldr	s15, [pc, #28]	; 800df78 <__ieee754_log10f+0xac>
 800df5c:	eea8 0a27 	vfma.f32	s0, s16, s15
 800df60:	e7c2      	b.n	800dee8 <__ieee754_log10f+0x1c>
 800df62:	bf00      	nop
 800df64:	cc000000 	.word	0xcc000000
 800df68:	00000000 	.word	0x00000000
 800df6c:	4c000000 	.word	0x4c000000
 800df70:	3ede5bd9 	.word	0x3ede5bd9
 800df74:	355427db 	.word	0x355427db
 800df78:	3e9a2080 	.word	0x3e9a2080

0800df7c <__ieee754_logf>:
 800df7c:	ee10 3a10 	vmov	r3, s0
 800df80:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800df84:	d106      	bne.n	800df94 <__ieee754_logf+0x18>
 800df86:	ed9f 7a66 	vldr	s14, [pc, #408]	; 800e120 <__ieee754_logf+0x1a4>
 800df8a:	eddf 7a66 	vldr	s15, [pc, #408]	; 800e124 <__ieee754_logf+0x1a8>
 800df8e:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800df92:	4770      	bx	lr
 800df94:	2b00      	cmp	r3, #0
 800df96:	da02      	bge.n	800df9e <__ieee754_logf+0x22>
 800df98:	ee30 7a40 	vsub.f32	s14, s0, s0
 800df9c:	e7f5      	b.n	800df8a <__ieee754_logf+0xe>
 800df9e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800dfa2:	db02      	blt.n	800dfaa <__ieee754_logf+0x2e>
 800dfa4:	ee30 0a00 	vadd.f32	s0, s0, s0
 800dfa8:	4770      	bx	lr
 800dfaa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800dfae:	bfb8      	it	lt
 800dfb0:	eddf 7a5d 	vldrlt	s15, [pc, #372]	; 800e128 <__ieee754_logf+0x1ac>
 800dfb4:	485d      	ldr	r0, [pc, #372]	; (800e12c <__ieee754_logf+0x1b0>)
 800dfb6:	bfbe      	ittt	lt
 800dfb8:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800dfbc:	f06f 0118 	mvnlt.w	r1, #24
 800dfc0:	ee17 3a90 	vmovlt	r3, s15
 800dfc4:	ea4f 52e3 	mov.w	r2, r3, asr #23
 800dfc8:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800dfcc:	4418      	add	r0, r3
 800dfce:	bfa8      	it	ge
 800dfd0:	2100      	movge	r1, #0
 800dfd2:	3a7f      	subs	r2, #127	; 0x7f
 800dfd4:	440a      	add	r2, r1
 800dfd6:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 800dfda:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 800dfde:	4319      	orrs	r1, r3
 800dfe0:	ee00 1a10 	vmov	s0, r1
 800dfe4:	4952      	ldr	r1, [pc, #328]	; (800e130 <__ieee754_logf+0x1b4>)
 800dfe6:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 800dfea:	f103 000f 	add.w	r0, r3, #15
 800dfee:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800dff2:	4001      	ands	r1, r0
 800dff4:	ee30 0a67 	vsub.f32	s0, s0, s15
 800dff8:	bb89      	cbnz	r1, 800e05e <__ieee754_logf+0xe2>
 800dffa:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800dffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e002:	d10f      	bne.n	800e024 <__ieee754_logf+0xa8>
 800e004:	2a00      	cmp	r2, #0
 800e006:	f000 8087 	beq.w	800e118 <__ieee754_logf+0x19c>
 800e00a:	ee07 2a90 	vmov	s15, r2
 800e00e:	ed9f 0a49 	vldr	s0, [pc, #292]	; 800e134 <__ieee754_logf+0x1b8>
 800e012:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800e138 <__ieee754_logf+0x1bc>
 800e016:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e01a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800e01e:	eea7 0a87 	vfma.f32	s0, s15, s14
 800e022:	4770      	bx	lr
 800e024:	eddf 6a45 	vldr	s13, [pc, #276]	; 800e13c <__ieee754_logf+0x1c0>
 800e028:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e02c:	eee0 7a66 	vfms.f32	s15, s0, s13
 800e030:	ee20 7a00 	vmul.f32	s14, s0, s0
 800e034:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e038:	b912      	cbnz	r2, 800e040 <__ieee754_logf+0xc4>
 800e03a:	ee30 0a47 	vsub.f32	s0, s0, s14
 800e03e:	4770      	bx	lr
 800e040:	ee07 2a90 	vmov	s15, r2
 800e044:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800e134 <__ieee754_logf+0x1b8>
 800e048:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e04c:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800e050:	ee37 0a40 	vsub.f32	s0, s14, s0
 800e054:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800e138 <__ieee754_logf+0x1bc>
 800e058:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800e05c:	4770      	bx	lr
 800e05e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800e062:	ee70 7a27 	vadd.f32	s15, s0, s15
 800e066:	eddf 5a36 	vldr	s11, [pc, #216]	; 800e140 <__ieee754_logf+0x1c4>
 800e06a:	eddf 4a36 	vldr	s9, [pc, #216]	; 800e144 <__ieee754_logf+0x1c8>
 800e06e:	4936      	ldr	r1, [pc, #216]	; (800e148 <__ieee754_logf+0x1cc>)
 800e070:	ee80 6a27 	vdiv.f32	s12, s0, s15
 800e074:	4419      	add	r1, r3
 800e076:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 800e07a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800e07e:	430b      	orrs	r3, r1
 800e080:	2b00      	cmp	r3, #0
 800e082:	ee07 2a90 	vmov	s15, r2
 800e086:	ee26 5a06 	vmul.f32	s10, s12, s12
 800e08a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e08e:	ee25 7a05 	vmul.f32	s14, s10, s10
 800e092:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800e14c <__ieee754_logf+0x1d0>
 800e096:	eee7 7a25 	vfma.f32	s15, s14, s11
 800e09a:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800e150 <__ieee754_logf+0x1d4>
 800e09e:	eee7 5a87 	vfma.f32	s11, s15, s14
 800e0a2:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800e154 <__ieee754_logf+0x1d8>
 800e0a6:	eee7 7a24 	vfma.f32	s15, s14, s9
 800e0aa:	eddf 4a2b 	vldr	s9, [pc, #172]	; 800e158 <__ieee754_logf+0x1dc>
 800e0ae:	eee7 4a87 	vfma.f32	s9, s15, s14
 800e0b2:	eddf 7a2a 	vldr	s15, [pc, #168]	; 800e15c <__ieee754_logf+0x1e0>
 800e0b6:	eee4 7a87 	vfma.f32	s15, s9, s14
 800e0ba:	ee67 7a85 	vmul.f32	s15, s15, s10
 800e0be:	eee5 7a87 	vfma.f32	s15, s11, s14
 800e0c2:	dd1a      	ble.n	800e0fa <__ieee754_logf+0x17e>
 800e0c4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800e0c8:	ee20 7a07 	vmul.f32	s14, s0, s14
 800e0cc:	ee27 7a00 	vmul.f32	s14, s14, s0
 800e0d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e0d4:	ee67 7a86 	vmul.f32	s15, s15, s12
 800e0d8:	b912      	cbnz	r2, 800e0e0 <__ieee754_logf+0x164>
 800e0da:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e0de:	e7ac      	b.n	800e03a <__ieee754_logf+0xbe>
 800e0e0:	ed9f 6a14 	vldr	s12, [pc, #80]	; 800e134 <__ieee754_logf+0x1b8>
 800e0e4:	eee6 7a86 	vfma.f32	s15, s13, s12
 800e0e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e0ec:	ee37 0a40 	vsub.f32	s0, s14, s0
 800e0f0:	eddf 7a11 	vldr	s15, [pc, #68]	; 800e138 <__ieee754_logf+0x1bc>
 800e0f4:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800e0f8:	4770      	bx	lr
 800e0fa:	ee70 7a67 	vsub.f32	s15, s0, s15
 800e0fe:	ee67 7a86 	vmul.f32	s15, s15, s12
 800e102:	b912      	cbnz	r2, 800e10a <__ieee754_logf+0x18e>
 800e104:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e108:	4770      	bx	lr
 800e10a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800e134 <__ieee754_logf+0x1b8>
 800e10e:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800e112:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800e116:	e7eb      	b.n	800e0f0 <__ieee754_logf+0x174>
 800e118:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800e124 <__ieee754_logf+0x1a8>
 800e11c:	4770      	bx	lr
 800e11e:	bf00      	nop
 800e120:	cc000000 	.word	0xcc000000
 800e124:	00000000 	.word	0x00000000
 800e128:	4c000000 	.word	0x4c000000
 800e12c:	004afb20 	.word	0x004afb20
 800e130:	007ffff0 	.word	0x007ffff0
 800e134:	3717f7d1 	.word	0x3717f7d1
 800e138:	3f317180 	.word	0x3f317180
 800e13c:	3eaaaaab 	.word	0x3eaaaaab
 800e140:	3e1cd04f 	.word	0x3e1cd04f
 800e144:	3e178897 	.word	0x3e178897
 800e148:	ffcf5c30 	.word	0xffcf5c30
 800e14c:	3e638e29 	.word	0x3e638e29
 800e150:	3ecccccd 	.word	0x3ecccccd
 800e154:	3e3a3325 	.word	0x3e3a3325
 800e158:	3e924925 	.word	0x3e924925
 800e15c:	3f2aaaab 	.word	0x3f2aaaab

0800e160 <_init>:
 800e160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e162:	bf00      	nop
 800e164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e166:	bc08      	pop	{r3}
 800e168:	469e      	mov	lr, r3
 800e16a:	4770      	bx	lr

0800e16c <_fini>:
 800e16c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e16e:	bf00      	nop
 800e170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e172:	bc08      	pop	{r3}
 800e174:	469e      	mov	lr, r3
 800e176:	4770      	bx	lr
