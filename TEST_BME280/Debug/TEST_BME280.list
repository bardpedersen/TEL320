
TEST_BME280.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b94  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08005d24  08005d24  00015d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005da8  08005da8  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08005da8  08005da8  00015da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005db0  08005db0  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005db0  08005db0  00015db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005db4  08005db4  00015db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005db8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  2000005c  08005e14  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ec  08005e14  000202ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e2ce  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fbb  00000000  00000000  0002e39d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c58  00000000  00000000  00030358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000997  00000000  00000000  00030fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026445  00000000  00000000  00031947  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fd67  00000000  00000000  00057d8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ea96f  00000000  00000000  00067af3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000394c  00000000  00000000  00152464  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00155db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005d0c 	.word	0x08005d0c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08005d0c 	.word	0x08005d0c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_ldivmod>:
 8000a5c:	b97b      	cbnz	r3, 8000a7e <__aeabi_ldivmod+0x22>
 8000a5e:	b972      	cbnz	r2, 8000a7e <__aeabi_ldivmod+0x22>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bfbe      	ittt	lt
 8000a64:	2000      	movlt	r0, #0
 8000a66:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000a6a:	e006      	blt.n	8000a7a <__aeabi_ldivmod+0x1e>
 8000a6c:	bf08      	it	eq
 8000a6e:	2800      	cmpeq	r0, #0
 8000a70:	bf1c      	itt	ne
 8000a72:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000a76:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a7a:	f000 b9bb 	b.w	8000df4 <__aeabi_idiv0>
 8000a7e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a82:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a86:	2900      	cmp	r1, #0
 8000a88:	db09      	blt.n	8000a9e <__aeabi_ldivmod+0x42>
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	db1a      	blt.n	8000ac4 <__aeabi_ldivmod+0x68>
 8000a8e:	f000 f84d 	bl	8000b2c <__udivmoddi4>
 8000a92:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a9a:	b004      	add	sp, #16
 8000a9c:	4770      	bx	lr
 8000a9e:	4240      	negs	r0, r0
 8000aa0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	db1b      	blt.n	8000ae0 <__aeabi_ldivmod+0x84>
 8000aa8:	f000 f840 	bl	8000b2c <__udivmoddi4>
 8000aac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab4:	b004      	add	sp, #16
 8000ab6:	4240      	negs	r0, r0
 8000ab8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000abc:	4252      	negs	r2, r2
 8000abe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ac2:	4770      	bx	lr
 8000ac4:	4252      	negs	r2, r2
 8000ac6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000aca:	f000 f82f 	bl	8000b2c <__udivmoddi4>
 8000ace:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad6:	b004      	add	sp, #16
 8000ad8:	4240      	negs	r0, r0
 8000ada:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ade:	4770      	bx	lr
 8000ae0:	4252      	negs	r2, r2
 8000ae2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ae6:	f000 f821 	bl	8000b2c <__udivmoddi4>
 8000aea:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af2:	b004      	add	sp, #16
 8000af4:	4252      	negs	r2, r2
 8000af6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000afa:	4770      	bx	lr

08000afc <__aeabi_uldivmod>:
 8000afc:	b953      	cbnz	r3, 8000b14 <__aeabi_uldivmod+0x18>
 8000afe:	b94a      	cbnz	r2, 8000b14 <__aeabi_uldivmod+0x18>
 8000b00:	2900      	cmp	r1, #0
 8000b02:	bf08      	it	eq
 8000b04:	2800      	cmpeq	r0, #0
 8000b06:	bf1c      	itt	ne
 8000b08:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b0c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b10:	f000 b970 	b.w	8000df4 <__aeabi_idiv0>
 8000b14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b1c:	f000 f806 	bl	8000b2c <__udivmoddi4>
 8000b20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b28:	b004      	add	sp, #16
 8000b2a:	4770      	bx	lr

08000b2c <__udivmoddi4>:
 8000b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b30:	9e08      	ldr	r6, [sp, #32]
 8000b32:	460d      	mov	r5, r1
 8000b34:	4604      	mov	r4, r0
 8000b36:	460f      	mov	r7, r1
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d14a      	bne.n	8000bd2 <__udivmoddi4+0xa6>
 8000b3c:	428a      	cmp	r2, r1
 8000b3e:	4694      	mov	ip, r2
 8000b40:	d965      	bls.n	8000c0e <__udivmoddi4+0xe2>
 8000b42:	fab2 f382 	clz	r3, r2
 8000b46:	b143      	cbz	r3, 8000b5a <__udivmoddi4+0x2e>
 8000b48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b4c:	f1c3 0220 	rsb	r2, r3, #32
 8000b50:	409f      	lsls	r7, r3
 8000b52:	fa20 f202 	lsr.w	r2, r0, r2
 8000b56:	4317      	orrs	r7, r2
 8000b58:	409c      	lsls	r4, r3
 8000b5a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b5e:	fa1f f58c 	uxth.w	r5, ip
 8000b62:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b66:	0c22      	lsrs	r2, r4, #16
 8000b68:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b6c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b70:	fb01 f005 	mul.w	r0, r1, r5
 8000b74:	4290      	cmp	r0, r2
 8000b76:	d90a      	bls.n	8000b8e <__udivmoddi4+0x62>
 8000b78:	eb1c 0202 	adds.w	r2, ip, r2
 8000b7c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000b80:	f080 811c 	bcs.w	8000dbc <__udivmoddi4+0x290>
 8000b84:	4290      	cmp	r0, r2
 8000b86:	f240 8119 	bls.w	8000dbc <__udivmoddi4+0x290>
 8000b8a:	3902      	subs	r1, #2
 8000b8c:	4462      	add	r2, ip
 8000b8e:	1a12      	subs	r2, r2, r0
 8000b90:	b2a4      	uxth	r4, r4
 8000b92:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b96:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b9a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b9e:	fb00 f505 	mul.w	r5, r0, r5
 8000ba2:	42a5      	cmp	r5, r4
 8000ba4:	d90a      	bls.n	8000bbc <__udivmoddi4+0x90>
 8000ba6:	eb1c 0404 	adds.w	r4, ip, r4
 8000baa:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000bae:	f080 8107 	bcs.w	8000dc0 <__udivmoddi4+0x294>
 8000bb2:	42a5      	cmp	r5, r4
 8000bb4:	f240 8104 	bls.w	8000dc0 <__udivmoddi4+0x294>
 8000bb8:	4464      	add	r4, ip
 8000bba:	3802      	subs	r0, #2
 8000bbc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bc0:	1b64      	subs	r4, r4, r5
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	b11e      	cbz	r6, 8000bce <__udivmoddi4+0xa2>
 8000bc6:	40dc      	lsrs	r4, r3
 8000bc8:	2300      	movs	r3, #0
 8000bca:	e9c6 4300 	strd	r4, r3, [r6]
 8000bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd2:	428b      	cmp	r3, r1
 8000bd4:	d908      	bls.n	8000be8 <__udivmoddi4+0xbc>
 8000bd6:	2e00      	cmp	r6, #0
 8000bd8:	f000 80ed 	beq.w	8000db6 <__udivmoddi4+0x28a>
 8000bdc:	2100      	movs	r1, #0
 8000bde:	e9c6 0500 	strd	r0, r5, [r6]
 8000be2:	4608      	mov	r0, r1
 8000be4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be8:	fab3 f183 	clz	r1, r3
 8000bec:	2900      	cmp	r1, #0
 8000bee:	d149      	bne.n	8000c84 <__udivmoddi4+0x158>
 8000bf0:	42ab      	cmp	r3, r5
 8000bf2:	d302      	bcc.n	8000bfa <__udivmoddi4+0xce>
 8000bf4:	4282      	cmp	r2, r0
 8000bf6:	f200 80f8 	bhi.w	8000dea <__udivmoddi4+0x2be>
 8000bfa:	1a84      	subs	r4, r0, r2
 8000bfc:	eb65 0203 	sbc.w	r2, r5, r3
 8000c00:	2001      	movs	r0, #1
 8000c02:	4617      	mov	r7, r2
 8000c04:	2e00      	cmp	r6, #0
 8000c06:	d0e2      	beq.n	8000bce <__udivmoddi4+0xa2>
 8000c08:	e9c6 4700 	strd	r4, r7, [r6]
 8000c0c:	e7df      	b.n	8000bce <__udivmoddi4+0xa2>
 8000c0e:	b902      	cbnz	r2, 8000c12 <__udivmoddi4+0xe6>
 8000c10:	deff      	udf	#255	; 0xff
 8000c12:	fab2 f382 	clz	r3, r2
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	f040 8090 	bne.w	8000d3c <__udivmoddi4+0x210>
 8000c1c:	1a8a      	subs	r2, r1, r2
 8000c1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c22:	fa1f fe8c 	uxth.w	lr, ip
 8000c26:	2101      	movs	r1, #1
 8000c28:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c2c:	fb07 2015 	mls	r0, r7, r5, r2
 8000c30:	0c22      	lsrs	r2, r4, #16
 8000c32:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c36:	fb0e f005 	mul.w	r0, lr, r5
 8000c3a:	4290      	cmp	r0, r2
 8000c3c:	d908      	bls.n	8000c50 <__udivmoddi4+0x124>
 8000c3e:	eb1c 0202 	adds.w	r2, ip, r2
 8000c42:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000c46:	d202      	bcs.n	8000c4e <__udivmoddi4+0x122>
 8000c48:	4290      	cmp	r0, r2
 8000c4a:	f200 80cb 	bhi.w	8000de4 <__udivmoddi4+0x2b8>
 8000c4e:	4645      	mov	r5, r8
 8000c50:	1a12      	subs	r2, r2, r0
 8000c52:	b2a4      	uxth	r4, r4
 8000c54:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c58:	fb07 2210 	mls	r2, r7, r0, r2
 8000c5c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c60:	fb0e fe00 	mul.w	lr, lr, r0
 8000c64:	45a6      	cmp	lr, r4
 8000c66:	d908      	bls.n	8000c7a <__udivmoddi4+0x14e>
 8000c68:	eb1c 0404 	adds.w	r4, ip, r4
 8000c6c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c70:	d202      	bcs.n	8000c78 <__udivmoddi4+0x14c>
 8000c72:	45a6      	cmp	lr, r4
 8000c74:	f200 80bb 	bhi.w	8000dee <__udivmoddi4+0x2c2>
 8000c78:	4610      	mov	r0, r2
 8000c7a:	eba4 040e 	sub.w	r4, r4, lr
 8000c7e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c82:	e79f      	b.n	8000bc4 <__udivmoddi4+0x98>
 8000c84:	f1c1 0720 	rsb	r7, r1, #32
 8000c88:	408b      	lsls	r3, r1
 8000c8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c92:	fa05 f401 	lsl.w	r4, r5, r1
 8000c96:	fa20 f307 	lsr.w	r3, r0, r7
 8000c9a:	40fd      	lsrs	r5, r7
 8000c9c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ca0:	4323      	orrs	r3, r4
 8000ca2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ca6:	fa1f fe8c 	uxth.w	lr, ip
 8000caa:	fb09 5518 	mls	r5, r9, r8, r5
 8000cae:	0c1c      	lsrs	r4, r3, #16
 8000cb0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cb4:	fb08 f50e 	mul.w	r5, r8, lr
 8000cb8:	42a5      	cmp	r5, r4
 8000cba:	fa02 f201 	lsl.w	r2, r2, r1
 8000cbe:	fa00 f001 	lsl.w	r0, r0, r1
 8000cc2:	d90b      	bls.n	8000cdc <__udivmoddi4+0x1b0>
 8000cc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ccc:	f080 8088 	bcs.w	8000de0 <__udivmoddi4+0x2b4>
 8000cd0:	42a5      	cmp	r5, r4
 8000cd2:	f240 8085 	bls.w	8000de0 <__udivmoddi4+0x2b4>
 8000cd6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cda:	4464      	add	r4, ip
 8000cdc:	1b64      	subs	r4, r4, r5
 8000cde:	b29d      	uxth	r5, r3
 8000ce0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ce4:	fb09 4413 	mls	r4, r9, r3, r4
 8000ce8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000cec:	fb03 fe0e 	mul.w	lr, r3, lr
 8000cf0:	45a6      	cmp	lr, r4
 8000cf2:	d908      	bls.n	8000d06 <__udivmoddi4+0x1da>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000cfc:	d26c      	bcs.n	8000dd8 <__udivmoddi4+0x2ac>
 8000cfe:	45a6      	cmp	lr, r4
 8000d00:	d96a      	bls.n	8000dd8 <__udivmoddi4+0x2ac>
 8000d02:	3b02      	subs	r3, #2
 8000d04:	4464      	add	r4, ip
 8000d06:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0a:	fba3 9502 	umull	r9, r5, r3, r2
 8000d0e:	eba4 040e 	sub.w	r4, r4, lr
 8000d12:	42ac      	cmp	r4, r5
 8000d14:	46c8      	mov	r8, r9
 8000d16:	46ae      	mov	lr, r5
 8000d18:	d356      	bcc.n	8000dc8 <__udivmoddi4+0x29c>
 8000d1a:	d053      	beq.n	8000dc4 <__udivmoddi4+0x298>
 8000d1c:	b156      	cbz	r6, 8000d34 <__udivmoddi4+0x208>
 8000d1e:	ebb0 0208 	subs.w	r2, r0, r8
 8000d22:	eb64 040e 	sbc.w	r4, r4, lr
 8000d26:	fa04 f707 	lsl.w	r7, r4, r7
 8000d2a:	40ca      	lsrs	r2, r1
 8000d2c:	40cc      	lsrs	r4, r1
 8000d2e:	4317      	orrs	r7, r2
 8000d30:	e9c6 7400 	strd	r7, r4, [r6]
 8000d34:	4618      	mov	r0, r3
 8000d36:	2100      	movs	r1, #0
 8000d38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3c:	f1c3 0120 	rsb	r1, r3, #32
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	fa20 f201 	lsr.w	r2, r0, r1
 8000d48:	fa25 f101 	lsr.w	r1, r5, r1
 8000d4c:	409d      	lsls	r5, r3
 8000d4e:	432a      	orrs	r2, r5
 8000d50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d54:	fa1f fe8c 	uxth.w	lr, ip
 8000d58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d60:	0c11      	lsrs	r1, r2, #16
 8000d62:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d66:	fb00 f50e 	mul.w	r5, r0, lr
 8000d6a:	428d      	cmp	r5, r1
 8000d6c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0x258>
 8000d72:	eb1c 0101 	adds.w	r1, ip, r1
 8000d76:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000d7a:	d22f      	bcs.n	8000ddc <__udivmoddi4+0x2b0>
 8000d7c:	428d      	cmp	r5, r1
 8000d7e:	d92d      	bls.n	8000ddc <__udivmoddi4+0x2b0>
 8000d80:	3802      	subs	r0, #2
 8000d82:	4461      	add	r1, ip
 8000d84:	1b49      	subs	r1, r1, r5
 8000d86:	b292      	uxth	r2, r2
 8000d88:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d8c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d90:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d94:	fb05 f10e 	mul.w	r1, r5, lr
 8000d98:	4291      	cmp	r1, r2
 8000d9a:	d908      	bls.n	8000dae <__udivmoddi4+0x282>
 8000d9c:	eb1c 0202 	adds.w	r2, ip, r2
 8000da0:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000da4:	d216      	bcs.n	8000dd4 <__udivmoddi4+0x2a8>
 8000da6:	4291      	cmp	r1, r2
 8000da8:	d914      	bls.n	8000dd4 <__udivmoddi4+0x2a8>
 8000daa:	3d02      	subs	r5, #2
 8000dac:	4462      	add	r2, ip
 8000dae:	1a52      	subs	r2, r2, r1
 8000db0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000db4:	e738      	b.n	8000c28 <__udivmoddi4+0xfc>
 8000db6:	4631      	mov	r1, r6
 8000db8:	4630      	mov	r0, r6
 8000dba:	e708      	b.n	8000bce <__udivmoddi4+0xa2>
 8000dbc:	4639      	mov	r1, r7
 8000dbe:	e6e6      	b.n	8000b8e <__udivmoddi4+0x62>
 8000dc0:	4610      	mov	r0, r2
 8000dc2:	e6fb      	b.n	8000bbc <__udivmoddi4+0x90>
 8000dc4:	4548      	cmp	r0, r9
 8000dc6:	d2a9      	bcs.n	8000d1c <__udivmoddi4+0x1f0>
 8000dc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000dcc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000dd0:	3b01      	subs	r3, #1
 8000dd2:	e7a3      	b.n	8000d1c <__udivmoddi4+0x1f0>
 8000dd4:	4645      	mov	r5, r8
 8000dd6:	e7ea      	b.n	8000dae <__udivmoddi4+0x282>
 8000dd8:	462b      	mov	r3, r5
 8000dda:	e794      	b.n	8000d06 <__udivmoddi4+0x1da>
 8000ddc:	4640      	mov	r0, r8
 8000dde:	e7d1      	b.n	8000d84 <__udivmoddi4+0x258>
 8000de0:	46d0      	mov	r8, sl
 8000de2:	e77b      	b.n	8000cdc <__udivmoddi4+0x1b0>
 8000de4:	3d02      	subs	r5, #2
 8000de6:	4462      	add	r2, ip
 8000de8:	e732      	b.n	8000c50 <__udivmoddi4+0x124>
 8000dea:	4608      	mov	r0, r1
 8000dec:	e70a      	b.n	8000c04 <__udivmoddi4+0xd8>
 8000dee:	4464      	add	r4, ip
 8000df0:	3802      	subs	r0, #2
 8000df2:	e742      	b.n	8000c7a <__udivmoddi4+0x14e>

08000df4 <__aeabi_idiv0>:
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop

08000df8 <BME280_compensate_T_int32.0>:
  MX_USART2_UART_Init();
  MX_I2C1_Init();
  /* USER CODE BEGIN 2 */

  int32_t BME280_compensate_T_int32(int32_t adc_T)
  {
 8000df8:	b480      	push	{r7}
 8000dfa:	b087      	sub	sp, #28
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	4663      	mov	r3, ip
 8000e02:	f8c7 c000 	str.w	ip, [r7]
	  int32_t var1, var2, T;
	  var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 8000e06:	687a      	ldr	r2, [r7, #4]
 8000e08:	10d1      	asrs	r1, r2, #3
 8000e0a:	8b5a      	ldrh	r2, [r3, #26]
 8000e0c:	0052      	lsls	r2, r2, #1
 8000e0e:	1a8a      	subs	r2, r1, r2
 8000e10:	8b19      	ldrh	r1, [r3, #24]
 8000e12:	fb01 f202 	mul.w	r2, r1, r2
 8000e16:	12d2      	asrs	r2, r2, #11
 8000e18:	617a      	str	r2, [r7, #20]
	  var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1))) >> 12) * ((int32_t)dig_T3)) >> 14;
 8000e1a:	687a      	ldr	r2, [r7, #4]
 8000e1c:	1112      	asrs	r2, r2, #4
 8000e1e:	8b59      	ldrh	r1, [r3, #26]
 8000e20:	1a52      	subs	r2, r2, r1
 8000e22:	6879      	ldr	r1, [r7, #4]
 8000e24:	1109      	asrs	r1, r1, #4
 8000e26:	8b58      	ldrh	r0, [r3, #26]
 8000e28:	1a09      	subs	r1, r1, r0
 8000e2a:	fb01 f202 	mul.w	r2, r1, r2
 8000e2e:	1312      	asrs	r2, r2, #12
 8000e30:	8ad9      	ldrh	r1, [r3, #22]
 8000e32:	fb01 f202 	mul.w	r2, r1, r2
 8000e36:	1392      	asrs	r2, r2, #14
 8000e38:	613a      	str	r2, [r7, #16]
	  t_fine = var1 + var2;
 8000e3a:	6979      	ldr	r1, [r7, #20]
 8000e3c:	693a      	ldr	r2, [r7, #16]
 8000e3e:	440a      	add	r2, r1
 8000e40:	601a      	str	r2, [r3, #0]
	  T = (t_fine * 5 + 128) >> 8;
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	4613      	mov	r3, r2
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	4413      	add	r3, r2
 8000e4a:	3380      	adds	r3, #128	; 0x80
 8000e4c:	121b      	asrs	r3, r3, #8
 8000e4e:	60fb      	str	r3, [r7, #12]
	  return T;
 8000e50:	68fb      	ldr	r3, [r7, #12]
  }
 8000e52:	4618      	mov	r0, r3
 8000e54:	371c      	adds	r7, #28
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
	...

08000e60 <main>:
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b0a2      	sub	sp, #136	; 0x88
 8000e64:	af04      	add	r7, sp, #16
int main(void)
 8000e66:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000e6a:	663b      	str	r3, [r7, #96]	; 0x60
	uint16_t dig_T1 = 0;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	uint16_t dig_T2 = 0;
 8000e72:	2300      	movs	r3, #0
 8000e74:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	uint16_t dig_T3 = 0;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint16_t dig_P1 = 0;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	uint16_t dig_P2 = 0;
 8000e84:	2300      	movs	r3, #0
 8000e86:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	uint16_t dig_P3 = 0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	uint16_t dig_P4 = 0;
 8000e90:	2300      	movs	r3, #0
 8000e92:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	uint16_t dig_P5 = 0;
 8000e96:	2300      	movs	r3, #0
 8000e98:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	uint16_t dig_P6 = 0;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	uint16_t dig_P7 = 0;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	uint16_t dig_P8 = 0;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	uint16_t dig_P9 = 0;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	uint8_t datatowrite = 0;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  HAL_Init();
 8000eba:	f000 fec7 	bl	8001c4c <HAL_Init>
  SystemClock_Config();
 8000ebe:	f000 fbc7 	bl	8001650 <SystemClock_Config>
  MX_GPIO_Init();
 8000ec2:	f000 fca5 	bl	8001810 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ec6:	f000 fc85 	bl	80017d4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000eca:	f000 fc53 	bl	8001774 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000ece:	f000 fc11 	bl	80016f4 <MX_I2C1_Init>
  	var2 = (((int64_t)dig_P8) * p) >> 19;
  	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
  	return (uint32_t)p;
  }

  datatowrite = (0x03 <<5) |(0x05 << 2) | 0x03;
 8000ed2:	2377      	movs	r3, #119	; 0x77
 8000ed4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  HAL_I2C_Mem_Write(&hi2c1, 0x77<<1, 0xF4, 1, &datatowrite, 1, 1000);
 8000ed8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000edc:	9302      	str	r3, [sp, #8]
 8000ede:	2301      	movs	r3, #1
 8000ee0:	9301      	str	r3, [sp, #4]
 8000ee2:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8000ee6:	9300      	str	r3, [sp, #0]
 8000ee8:	2301      	movs	r3, #1
 8000eea:	22f4      	movs	r2, #244	; 0xf4
 8000eec:	21ee      	movs	r1, #238	; 0xee
 8000eee:	4882      	ldr	r0, [pc, #520]	; (80010f8 <main+0x298>)
 8000ef0:	f001 fc24 	bl	800273c <HAL_I2C_Mem_Write>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	/* USER CODE END WHILE */
	HAL_I2C_Mem_Read(&hi2c1, 0x77<<1, 0x88, 1, trimdata, 25, 1000);
 8000ef4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ef8:	9302      	str	r3, [sp, #8]
 8000efa:	2319      	movs	r3, #25
 8000efc:	9301      	str	r3, [sp, #4]
 8000efe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f02:	9300      	str	r3, [sp, #0]
 8000f04:	2301      	movs	r3, #1
 8000f06:	2288      	movs	r2, #136	; 0x88
 8000f08:	21ee      	movs	r1, #238	; 0xee
 8000f0a:	487b      	ldr	r0, [pc, #492]	; (80010f8 <main+0x298>)
 8000f0c:	f001 fd2a 	bl	8002964 <HAL_I2C_Mem_Read>
	//HAL_I2C_Mem_Read(&hi2c1, 0x77<<1, 0xD0, 1, &SensorId, 1, 1000);
	//HAL_I2C_Mem_Read(&hi2c1, 0x77<<1, 0xFA, 1, &dig_T1, 1, 1000);
	//HAL_I2C_Mem_Read(&hi2c1, 0x77<<1, 0xFB, 1, &dig_T2, 1, 1000);
	//HAL_I2C_Mem_Read(&hi2c1, 0x77<<1, 0xFC, 1, &dig_T3, 1, 1000);
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 8000f10:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000f14:	021b      	lsls	r3, r3, #8
 8000f16:	b21a      	sxth	r2, r3
 8000f18:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000f1c:	b21b      	sxth	r3, r3
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	b21b      	sxth	r3, r3
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 8000f28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f2c:	021b      	lsls	r3, r3, #8
 8000f2e:	b21a      	sxth	r2, r3
 8000f30:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000f34:	b21b      	sxth	r3, r3
 8000f36:	4313      	orrs	r3, r2
 8000f38:	b21b      	sxth	r3, r3
 8000f3a:	b29b      	uxth	r3, r3
 8000f3c:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 8000f40:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000f44:	021b      	lsls	r3, r3, #8
 8000f46:	b21a      	sxth	r2, r3
 8000f48:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000f4c:	b21b      	sxth	r3, r3
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	b21b      	sxth	r3, r3
 8000f52:	b29b      	uxth	r3, r3
 8000f54:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 8000f58:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000f5c:	021b      	lsls	r3, r3, #8
 8000f5e:	b21a      	sxth	r2, r3
 8000f60:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000f64:	b21b      	sxth	r3, r3
 8000f66:	4313      	orrs	r3, r2
 8000f68:	b21b      	sxth	r3, r3
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 8000f70:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000f74:	021b      	lsls	r3, r3, #8
 8000f76:	b21a      	sxth	r2, r3
 8000f78:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000f7c:	b21b      	sxth	r3, r3
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	b21b      	sxth	r3, r3
 8000f82:	b29b      	uxth	r3, r3
 8000f84:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 8000f88:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f8c:	021b      	lsls	r3, r3, #8
 8000f8e:	b21a      	sxth	r2, r3
 8000f90:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000f94:	b21b      	sxth	r3, r3
 8000f96:	4313      	orrs	r3, r2
 8000f98:	b21b      	sxth	r3, r3
 8000f9a:	b29b      	uxth	r3, r3
 8000f9c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 8000fa0:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8000fa4:	021b      	lsls	r3, r3, #8
 8000fa6:	b21a      	sxth	r2, r3
 8000fa8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000fac:	b21b      	sxth	r3, r3
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	b21b      	sxth	r3, r3
 8000fb2:	b29b      	uxth	r3, r3
 8000fb4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 8000fb8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000fbc:	021b      	lsls	r3, r3, #8
 8000fbe:	b21a      	sxth	r2, r3
 8000fc0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8000fc4:	b21b      	sxth	r3, r3
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	b21b      	sxth	r3, r3
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 8000fd0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000fd4:	021b      	lsls	r3, r3, #8
 8000fd6:	b21a      	sxth	r2, r3
 8000fd8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000fdc:	b21b      	sxth	r3, r3
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	b21b      	sxth	r3, r3
 8000fe2:	b29b      	uxth	r3, r3
 8000fe4:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 8000fe8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000fec:	021b      	lsls	r3, r3, #8
 8000fee:	b21a      	sxth	r2, r3
 8000ff0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000ff4:	b21b      	sxth	r3, r3
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	b21b      	sxth	r3, r3
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 8001000:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001004:	021b      	lsls	r3, r3, #8
 8001006:	b21a      	sxth	r2, r3
 8001008:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800100c:	b21b      	sxth	r3, r3
 800100e:	4313      	orrs	r3, r2
 8001010:	b21b      	sxth	r3, r3
 8001012:	b29b      	uxth	r3, r3
 8001014:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 8001018:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800101c:	021b      	lsls	r3, r3, #8
 800101e:	b21a      	sxth	r2, r3
 8001020:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8001024:	b21b      	sxth	r3, r3
 8001026:	4313      	orrs	r3, r2
 8001028:	b21b      	sxth	r3, r3
 800102a:	b29b      	uxth	r3, r3
 800102c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	HAL_I2C_Mem_Read(&hi2c1, 0x77<<1, 0xF7, 1, RawData, 8, 1000);
 8001030:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001034:	9302      	str	r3, [sp, #8]
 8001036:	2308      	movs	r3, #8
 8001038:	9301      	str	r3, [sp, #4]
 800103a:	f107 0318 	add.w	r3, r7, #24
 800103e:	9300      	str	r3, [sp, #0]
 8001040:	2301      	movs	r3, #1
 8001042:	22f7      	movs	r2, #247	; 0xf7
 8001044:	21ee      	movs	r1, #238	; 0xee
 8001046:	482c      	ldr	r0, [pc, #176]	; (80010f8 <main+0x298>)
 8001048:	f001 fc8c 	bl	8002964 <HAL_I2C_Mem_Read>

	pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 800104c:	7e3b      	ldrb	r3, [r7, #24]
 800104e:	031a      	lsls	r2, r3, #12
 8001050:	7e7b      	ldrb	r3, [r7, #25]
 8001052:	011b      	lsls	r3, r3, #4
 8001054:	4313      	orrs	r3, r2
 8001056:	7eba      	ldrb	r2, [r7, #26]
 8001058:	0912      	lsrs	r2, r2, #4
 800105a:	b2d2      	uxtb	r2, r2
 800105c:	4313      	orrs	r3, r2
 800105e:	677b      	str	r3, [r7, #116]	; 0x74
	tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 8001060:	7efb      	ldrb	r3, [r7, #27]
 8001062:	031a      	lsls	r2, r3, #12
 8001064:	7f3b      	ldrb	r3, [r7, #28]
 8001066:	011b      	lsls	r3, r3, #4
 8001068:	4313      	orrs	r3, r2
 800106a:	7f7a      	ldrb	r2, [r7, #29]
 800106c:	0912      	lsrs	r2, r2, #4
 800106e:	b2d2      	uxtb	r2, r2
 8001070:	4313      	orrs	r3, r2
 8001072:	673b      	str	r3, [r7, #112]	; 0x70
	int temp = (BME280_compensate_T_int32(tRaw))/100.0;
 8001074:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001078:	469c      	mov	ip, r3
 800107a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800107c:	f7ff febc 	bl	8000df8 <BME280_compensate_T_int32.0>
 8001080:	4603      	mov	r3, r0
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff fa46 	bl	8000514 <__aeabi_i2d>
 8001088:	f04f 0200 	mov.w	r2, #0
 800108c:	4b1b      	ldr	r3, [pc, #108]	; (80010fc <main+0x29c>)
 800108e:	f7ff fbd5 	bl	800083c <__aeabi_ddiv>
 8001092:	4602      	mov	r2, r0
 8001094:	460b      	mov	r3, r1
 8001096:	4610      	mov	r0, r2
 8001098:	4619      	mov	r1, r3
 800109a:	f7ff fcb7 	bl	8000a0c <__aeabi_d2iz>
 800109e:	4603      	mov	r3, r0
 80010a0:	66fb      	str	r3, [r7, #108]	; 0x6c
	int Pressure = (BME280_compensate_P_int64 (pRaw))/(256.0*100);
 80010a2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80010a6:	469c      	mov	ip, r3
 80010a8:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80010aa:	f000 f82f 	bl	800110c <BME280_compensate_P_int64.1>
 80010ae:	4603      	mov	r3, r0
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff fa1f 	bl	80004f4 <__aeabi_ui2d>
 80010b6:	f04f 0200 	mov.w	r2, #0
 80010ba:	4b11      	ldr	r3, [pc, #68]	; (8001100 <main+0x2a0>)
 80010bc:	f7ff fbbe 	bl	800083c <__aeabi_ddiv>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	4610      	mov	r0, r2
 80010c6:	4619      	mov	r1, r3
 80010c8:	f7ff fca0 	bl	8000a0c <__aeabi_d2iz>
 80010cc:	4603      	mov	r3, r0
 80010ce:	66bb      	str	r3, [r7, #104]	; 0x68

	int len = sprintf(SendID, "%lu\n", Pressure);
 80010d0:	1d3b      	adds	r3, r7, #4
 80010d2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80010d4:	490b      	ldr	r1, [pc, #44]	; (8001104 <main+0x2a4>)
 80010d6:	4618      	mov	r0, r3
 80010d8:	f004 f974 	bl	80053c4 <siprintf>
 80010dc:	6678      	str	r0, [r7, #100]	; 0x64
	HAL_UART_Transmit(&huart2, (uint8_t*)SendID, len, 10);// Sending in normal mode
 80010de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80010e0:	b29a      	uxth	r2, r3
 80010e2:	1d39      	adds	r1, r7, #4
 80010e4:	230a      	movs	r3, #10
 80010e6:	4808      	ldr	r0, [pc, #32]	; (8001108 <main+0x2a8>)
 80010e8:	f003 fc14 	bl	8004914 <HAL_UART_Transmit>
	HAL_Delay(1000);
 80010ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010f0:	f000 fe28 	bl	8001d44 <HAL_Delay>
  {
 80010f4:	e6fe      	b.n	8000ef4 <main+0x94>
 80010f6:	bf00      	nop
 80010f8:	20000078 	.word	0x20000078
 80010fc:	40590000 	.word	0x40590000
 8001100:	40d90000 	.word	0x40d90000
 8001104:	08005d24 	.word	0x08005d24
 8001108:	200000cc 	.word	0x200000cc

0800110c <BME280_compensate_P_int64.1>:
  {
 800110c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001110:	b0cb      	sub	sp, #300	; 0x12c
 8001112:	af00      	add	r7, sp, #0
 8001114:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 8001118:	4666      	mov	r6, ip
 800111a:	f8c7 c108 	str.w	ip, [r7, #264]	; 0x108
  	var1 = ((int64_t)t_fine) - 128000;
 800111e:	6833      	ldr	r3, [r6, #0]
 8001120:	17da      	asrs	r2, r3, #31
 8001122:	461c      	mov	r4, r3
 8001124:	4615      	mov	r5, r2
 8001126:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 800112a:	f145 3bff 	adc.w	fp, r5, #4294967295	; 0xffffffff
 800112e:	e9c7 ab48 	strd	sl, fp, [r7, #288]	; 0x120
  	var2 = var1 * var1 * (int64_t)dig_P6;
 8001132:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001136:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800113a:	fb03 f102 	mul.w	r1, r3, r2
 800113e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001142:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001146:	fb02 f303 	mul.w	r3, r2, r3
 800114a:	18ca      	adds	r2, r1, r3
 800114c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001150:	fba3 8903 	umull	r8, r9, r3, r3
 8001154:	eb02 0309 	add.w	r3, r2, r9
 8001158:	4699      	mov	r9, r3
 800115a:	8ab3      	ldrh	r3, [r6, #20]
 800115c:	b29b      	uxth	r3, r3
 800115e:	2200      	movs	r2, #0
 8001160:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001164:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001168:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800116c:	4603      	mov	r3, r0
 800116e:	fb03 f209 	mul.w	r2, r3, r9
 8001172:	460b      	mov	r3, r1
 8001174:	fb08 f303 	mul.w	r3, r8, r3
 8001178:	4413      	add	r3, r2
 800117a:	4602      	mov	r2, r0
 800117c:	fba8 1202 	umull	r1, r2, r8, r2
 8001180:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001184:	460a      	mov	r2, r1
 8001186:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 800118a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800118e:	4413      	add	r3, r2
 8001190:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001194:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8001198:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800119c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
  	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 80011a0:	8a73      	ldrh	r3, [r6, #18]
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	2200      	movs	r2, #0
 80011a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80011aa:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80011ae:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80011b2:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 80011b6:	462a      	mov	r2, r5
 80011b8:	fb02 f203 	mul.w	r2, r2, r3
 80011bc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80011c0:	4621      	mov	r1, r4
 80011c2:	fb01 f303 	mul.w	r3, r1, r3
 80011c6:	441a      	add	r2, r3
 80011c8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80011cc:	4621      	mov	r1, r4
 80011ce:	fba3 1301 	umull	r1, r3, r3, r1
 80011d2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80011d6:	460b      	mov	r3, r1
 80011d8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80011dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80011e0:	18d3      	adds	r3, r2, r3
 80011e2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80011e6:	f04f 0000 	mov.w	r0, #0
 80011ea:	f04f 0100 	mov.w	r1, #0
 80011ee:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 80011f2:	462b      	mov	r3, r5
 80011f4:	0459      	lsls	r1, r3, #17
 80011f6:	4623      	mov	r3, r4
 80011f8:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 80011fc:	4623      	mov	r3, r4
 80011fe:	0458      	lsls	r0, r3, #17
 8001200:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001204:	1814      	adds	r4, r2, r0
 8001206:	643c      	str	r4, [r7, #64]	; 0x40
 8001208:	414b      	adcs	r3, r1
 800120a:	647b      	str	r3, [r7, #68]	; 0x44
 800120c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001210:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
  	var2 = var2 + (((int64_t)dig_P4)<<35);
 8001214:	8a33      	ldrh	r3, [r6, #16]
 8001216:	b29b      	uxth	r3, r3
 8001218:	2200      	movs	r2, #0
 800121a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800121e:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001222:	f04f 0000 	mov.w	r0, #0
 8001226:	f04f 0100 	mov.w	r1, #0
 800122a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800122e:	00d9      	lsls	r1, r3, #3
 8001230:	2000      	movs	r0, #0
 8001232:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001236:	1814      	adds	r4, r2, r0
 8001238:	63bc      	str	r4, [r7, #56]	; 0x38
 800123a:	414b      	adcs	r3, r1
 800123c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800123e:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001242:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
  	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 8001246:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800124a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800124e:	fb03 f102 	mul.w	r1, r3, r2
 8001252:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001256:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800125a:	fb02 f303 	mul.w	r3, r2, r3
 800125e:	18ca      	adds	r2, r1, r3
 8001260:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001264:	fba3 1303 	umull	r1, r3, r3, r3
 8001268:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800126c:	460b      	mov	r3, r1
 800126e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001272:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001276:	18d3      	adds	r3, r2, r3
 8001278:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800127c:	89f3      	ldrh	r3, [r6, #14]
 800127e:	b29b      	uxth	r3, r3
 8001280:	2200      	movs	r2, #0
 8001282:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001286:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800128a:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 800128e:	462b      	mov	r3, r5
 8001290:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001294:	4642      	mov	r2, r8
 8001296:	fb02 f203 	mul.w	r2, r2, r3
 800129a:	464b      	mov	r3, r9
 800129c:	4621      	mov	r1, r4
 800129e:	fb01 f303 	mul.w	r3, r1, r3
 80012a2:	4413      	add	r3, r2
 80012a4:	4622      	mov	r2, r4
 80012a6:	4641      	mov	r1, r8
 80012a8:	fba2 1201 	umull	r1, r2, r2, r1
 80012ac:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80012b0:	460a      	mov	r2, r1
 80012b2:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 80012b6:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80012ba:	4413      	add	r3, r2
 80012bc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80012c0:	f04f 0000 	mov.w	r0, #0
 80012c4:	f04f 0100 	mov.w	r1, #0
 80012c8:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 80012cc:	4623      	mov	r3, r4
 80012ce:	0a18      	lsrs	r0, r3, #8
 80012d0:	462b      	mov	r3, r5
 80012d2:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80012d6:	462b      	mov	r3, r5
 80012d8:	1219      	asrs	r1, r3, #8
 80012da:	89b3      	ldrh	r3, [r6, #12]
 80012dc:	b29b      	uxth	r3, r3
 80012de:	2200      	movs	r2, #0
 80012e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80012e4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80012e8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80012ec:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 80012f0:	464a      	mov	r2, r9
 80012f2:	fb02 f203 	mul.w	r2, r2, r3
 80012f6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80012fa:	4644      	mov	r4, r8
 80012fc:	fb04 f303 	mul.w	r3, r4, r3
 8001300:	441a      	add	r2, r3
 8001302:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001306:	4644      	mov	r4, r8
 8001308:	fba3 4304 	umull	r4, r3, r3, r4
 800130c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001310:	4623      	mov	r3, r4
 8001312:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001316:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800131a:	18d3      	adds	r3, r2, r3
 800131c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001320:	f04f 0200 	mov.w	r2, #0
 8001324:	f04f 0300 	mov.w	r3, #0
 8001328:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 800132c:	464c      	mov	r4, r9
 800132e:	0323      	lsls	r3, r4, #12
 8001330:	4644      	mov	r4, r8
 8001332:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001336:	4644      	mov	r4, r8
 8001338:	0322      	lsls	r2, r4, #12
 800133a:	1884      	adds	r4, r0, r2
 800133c:	633c      	str	r4, [r7, #48]	; 0x30
 800133e:	eb41 0303 	adc.w	r3, r1, r3
 8001342:	637b      	str	r3, [r7, #52]	; 0x34
 8001344:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001348:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
  	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 800134c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001350:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8001354:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8001358:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800135c:	8973      	ldrh	r3, [r6, #10]
 800135e:	b29b      	uxth	r3, r3
 8001360:	2200      	movs	r2, #0
 8001362:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001366:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800136a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800136e:	462b      	mov	r3, r5
 8001370:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001374:	4642      	mov	r2, r8
 8001376:	fb02 f203 	mul.w	r2, r2, r3
 800137a:	464b      	mov	r3, r9
 800137c:	4621      	mov	r1, r4
 800137e:	fb01 f303 	mul.w	r3, r1, r3
 8001382:	4413      	add	r3, r2
 8001384:	4622      	mov	r2, r4
 8001386:	4641      	mov	r1, r8
 8001388:	fba2 1201 	umull	r1, r2, r2, r1
 800138c:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8001390:	460a      	mov	r2, r1
 8001392:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8001396:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800139a:	4413      	add	r3, r2
 800139c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80013a0:	f04f 0200 	mov.w	r2, #0
 80013a4:	f04f 0300 	mov.w	r3, #0
 80013a8:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 80013ac:	4629      	mov	r1, r5
 80013ae:	104a      	asrs	r2, r1, #1
 80013b0:	4629      	mov	r1, r5
 80013b2:	17cb      	asrs	r3, r1, #31
 80013b4:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
  	if (var1 == 0)
 80013b8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80013bc:	4313      	orrs	r3, r2
 80013be:	d101      	bne.n	80013c4 <BME280_compensate_P_int64.1+0x2b8>
  		return 0; // avoid exception caused by division by zero
 80013c0:	2300      	movs	r3, #0
 80013c2:	e13f      	b.n	8001644 <BME280_compensate_P_int64.1+0x538>
  	p = 1048576-adc_P;
 80013c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80013c8:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 80013cc:	17da      	asrs	r2, r3, #31
 80013ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80013d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80013d2:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80013d6:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
  	p = (((p<<31)-var2)*3125)/var1;
 80013da:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80013de:	105b      	asrs	r3, r3, #1
 80013e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80013e4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80013e8:	07db      	lsls	r3, r3, #31
 80013ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80013ee:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80013f2:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 80013f6:	4621      	mov	r1, r4
 80013f8:	1a89      	subs	r1, r1, r2
 80013fa:	67b9      	str	r1, [r7, #120]	; 0x78
 80013fc:	4629      	mov	r1, r5
 80013fe:	eb61 0303 	sbc.w	r3, r1, r3
 8001402:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001404:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001408:	4622      	mov	r2, r4
 800140a:	462b      	mov	r3, r5
 800140c:	1891      	adds	r1, r2, r2
 800140e:	6239      	str	r1, [r7, #32]
 8001410:	415b      	adcs	r3, r3
 8001412:	627b      	str	r3, [r7, #36]	; 0x24
 8001414:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001418:	4621      	mov	r1, r4
 800141a:	1851      	adds	r1, r2, r1
 800141c:	61b9      	str	r1, [r7, #24]
 800141e:	4629      	mov	r1, r5
 8001420:	414b      	adcs	r3, r1
 8001422:	61fb      	str	r3, [r7, #28]
 8001424:	f04f 0200 	mov.w	r2, #0
 8001428:	f04f 0300 	mov.w	r3, #0
 800142c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001430:	4649      	mov	r1, r9
 8001432:	018b      	lsls	r3, r1, #6
 8001434:	4641      	mov	r1, r8
 8001436:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800143a:	4641      	mov	r1, r8
 800143c:	018a      	lsls	r2, r1, #6
 800143e:	4641      	mov	r1, r8
 8001440:	1889      	adds	r1, r1, r2
 8001442:	6139      	str	r1, [r7, #16]
 8001444:	4649      	mov	r1, r9
 8001446:	eb43 0101 	adc.w	r1, r3, r1
 800144a:	6179      	str	r1, [r7, #20]
 800144c:	f04f 0200 	mov.w	r2, #0
 8001450:	f04f 0300 	mov.w	r3, #0
 8001454:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001458:	4649      	mov	r1, r9
 800145a:	008b      	lsls	r3, r1, #2
 800145c:	4641      	mov	r1, r8
 800145e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001462:	4641      	mov	r1, r8
 8001464:	008a      	lsls	r2, r1, #2
 8001466:	4610      	mov	r0, r2
 8001468:	4619      	mov	r1, r3
 800146a:	4603      	mov	r3, r0
 800146c:	4622      	mov	r2, r4
 800146e:	189b      	adds	r3, r3, r2
 8001470:	60bb      	str	r3, [r7, #8]
 8001472:	460b      	mov	r3, r1
 8001474:	462a      	mov	r2, r5
 8001476:	eb42 0303 	adc.w	r3, r2, r3
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	f04f 0200 	mov.w	r2, #0
 8001480:	f04f 0300 	mov.w	r3, #0
 8001484:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001488:	4649      	mov	r1, r9
 800148a:	008b      	lsls	r3, r1, #2
 800148c:	4641      	mov	r1, r8
 800148e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001492:	4641      	mov	r1, r8
 8001494:	008a      	lsls	r2, r1, #2
 8001496:	4610      	mov	r0, r2
 8001498:	4619      	mov	r1, r3
 800149a:	4603      	mov	r3, r0
 800149c:	4622      	mov	r2, r4
 800149e:	189b      	adds	r3, r3, r2
 80014a0:	673b      	str	r3, [r7, #112]	; 0x70
 80014a2:	462b      	mov	r3, r5
 80014a4:	460a      	mov	r2, r1
 80014a6:	eb42 0303 	adc.w	r3, r2, r3
 80014aa:	677b      	str	r3, [r7, #116]	; 0x74
 80014ac:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80014b0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80014b4:	f7ff fad2 	bl	8000a5c <__aeabi_ldivmod>
 80014b8:	4602      	mov	r2, r0
 80014ba:	460b      	mov	r3, r1
 80014bc:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
  	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 80014c0:	8933      	ldrh	r3, [r6, #8]
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	2200      	movs	r2, #0
 80014c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80014c8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80014ca:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80014ce:	f04f 0000 	mov.w	r0, #0
 80014d2:	f04f 0100 	mov.w	r1, #0
 80014d6:	0b50      	lsrs	r0, r2, #13
 80014d8:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80014dc:	1359      	asrs	r1, r3, #13
 80014de:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 80014e2:	462b      	mov	r3, r5
 80014e4:	fb00 f203 	mul.w	r2, r0, r3
 80014e8:	4623      	mov	r3, r4
 80014ea:	fb03 f301 	mul.w	r3, r3, r1
 80014ee:	4413      	add	r3, r2
 80014f0:	4622      	mov	r2, r4
 80014f2:	fba2 1200 	umull	r1, r2, r2, r0
 80014f6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80014fa:	460a      	mov	r2, r1
 80014fc:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8001500:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001504:	4413      	add	r3, r2
 8001506:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800150a:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800150e:	f04f 0000 	mov.w	r0, #0
 8001512:	f04f 0100 	mov.w	r1, #0
 8001516:	0b50      	lsrs	r0, r2, #13
 8001518:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800151c:	1359      	asrs	r1, r3, #13
 800151e:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8001522:	462b      	mov	r3, r5
 8001524:	fb00 f203 	mul.w	r2, r0, r3
 8001528:	4623      	mov	r3, r4
 800152a:	fb03 f301 	mul.w	r3, r3, r1
 800152e:	4413      	add	r3, r2
 8001530:	4622      	mov	r2, r4
 8001532:	fba2 1200 	umull	r1, r2, r2, r0
 8001536:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800153a:	460a      	mov	r2, r1
 800153c:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8001540:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001544:	4413      	add	r3, r2
 8001546:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800154a:	f04f 0200 	mov.w	r2, #0
 800154e:	f04f 0300 	mov.w	r3, #0
 8001552:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8001556:	4621      	mov	r1, r4
 8001558:	0e4a      	lsrs	r2, r1, #25
 800155a:	4629      	mov	r1, r5
 800155c:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001560:	4629      	mov	r1, r5
 8001562:	164b      	asrs	r3, r1, #25
 8001564:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
  	var2 = (((int64_t)dig_P8) * p) >> 19;
 8001568:	88f3      	ldrh	r3, [r6, #6]
 800156a:	b29b      	uxth	r3, r3
 800156c:	2200      	movs	r2, #0
 800156e:	663b      	str	r3, [r7, #96]	; 0x60
 8001570:	667a      	str	r2, [r7, #100]	; 0x64
 8001572:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001576:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800157a:	462a      	mov	r2, r5
 800157c:	fb02 f203 	mul.w	r2, r2, r3
 8001580:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001584:	4621      	mov	r1, r4
 8001586:	fb01 f303 	mul.w	r3, r1, r3
 800158a:	4413      	add	r3, r2
 800158c:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001590:	4621      	mov	r1, r4
 8001592:	fba2 1201 	umull	r1, r2, r2, r1
 8001596:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800159a:	460a      	mov	r2, r1
 800159c:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 80015a0:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80015a4:	4413      	add	r3, r2
 80015a6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80015aa:	f04f 0200 	mov.w	r2, #0
 80015ae:	f04f 0300 	mov.w	r3, #0
 80015b2:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 80015b6:	4621      	mov	r1, r4
 80015b8:	0cca      	lsrs	r2, r1, #19
 80015ba:	4629      	mov	r1, r5
 80015bc:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80015c0:	4629      	mov	r1, r5
 80015c2:	14cb      	asrs	r3, r1, #19
 80015c4:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
  	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 80015c8:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 80015cc:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80015d0:	1884      	adds	r4, r0, r2
 80015d2:	65bc      	str	r4, [r7, #88]	; 0x58
 80015d4:	eb41 0303 	adc.w	r3, r1, r3
 80015d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80015da:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80015de:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80015e2:	4621      	mov	r1, r4
 80015e4:	1889      	adds	r1, r1, r2
 80015e6:	6539      	str	r1, [r7, #80]	; 0x50
 80015e8:	4629      	mov	r1, r5
 80015ea:	eb43 0101 	adc.w	r1, r3, r1
 80015ee:	6579      	str	r1, [r7, #84]	; 0x54
 80015f0:	f04f 0000 	mov.w	r0, #0
 80015f4:	f04f 0100 	mov.w	r1, #0
 80015f8:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80015fc:	4623      	mov	r3, r4
 80015fe:	0a18      	lsrs	r0, r3, #8
 8001600:	462b      	mov	r3, r5
 8001602:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001606:	462b      	mov	r3, r5
 8001608:	1219      	asrs	r1, r3, #8
 800160a:	88b3      	ldrh	r3, [r6, #4]
 800160c:	b29b      	uxth	r3, r3
 800160e:	2200      	movs	r2, #0
 8001610:	64bb      	str	r3, [r7, #72]	; 0x48
 8001612:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001614:	f04f 0200 	mov.w	r2, #0
 8001618:	f04f 0300 	mov.w	r3, #0
 800161c:	e9d7 5612 	ldrd	r5, r6, [r7, #72]	; 0x48
 8001620:	4634      	mov	r4, r6
 8001622:	0123      	lsls	r3, r4, #4
 8001624:	462c      	mov	r4, r5
 8001626:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800162a:	462c      	mov	r4, r5
 800162c:	0122      	lsls	r2, r4, #4
 800162e:	1884      	adds	r4, r0, r2
 8001630:	603c      	str	r4, [r7, #0]
 8001632:	eb41 0303 	adc.w	r3, r1, r3
 8001636:	607b      	str	r3, [r7, #4]
 8001638:	e9d7 3400 	ldrd	r3, r4, [r7]
 800163c:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
  	return (uint32_t)p;
 8001640:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
  }
 8001644:	4618      	mov	r0, r3
 8001646:	f507 7796 	add.w	r7, r7, #300	; 0x12c
 800164a:	46bd      	mov	sp, r7
 800164c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b096      	sub	sp, #88	; 0x58
 8001654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001656:	f107 0314 	add.w	r3, r7, #20
 800165a:	2244      	movs	r2, #68	; 0x44
 800165c:	2100      	movs	r1, #0
 800165e:	4618      	mov	r0, r3
 8001660:	f003 fed0 	bl	8005404 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001664:	463b      	mov	r3, r7
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	605a      	str	r2, [r3, #4]
 800166c:	609a      	str	r2, [r3, #8]
 800166e:	60da      	str	r2, [r3, #12]
 8001670:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001672:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001676:	f001 fded 	bl	8003254 <HAL_PWREx_ControlVoltageScaling>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001680:	f000 f92c 	bl	80018dc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001684:	2302      	movs	r3, #2
 8001686:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001688:	f44f 7380 	mov.w	r3, #256	; 0x100
 800168c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800168e:	2310      	movs	r3, #16
 8001690:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001692:	2302      	movs	r3, #2
 8001694:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001696:	2302      	movs	r3, #2
 8001698:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800169a:	2301      	movs	r3, #1
 800169c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800169e:	230a      	movs	r3, #10
 80016a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80016a2:	2307      	movs	r3, #7
 80016a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80016a6:	2302      	movs	r3, #2
 80016a8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80016aa:	2302      	movs	r3, #2
 80016ac:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016ae:	f107 0314 	add.w	r3, r7, #20
 80016b2:	4618      	mov	r0, r3
 80016b4:	f001 fe24 	bl	8003300 <HAL_RCC_OscConfig>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80016be:	f000 f90d 	bl	80018dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016c2:	230f      	movs	r3, #15
 80016c4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016c6:	2303      	movs	r3, #3
 80016c8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016ca:	2300      	movs	r3, #0
 80016cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016ce:	2300      	movs	r3, #0
 80016d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016d2:	2300      	movs	r3, #0
 80016d4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80016d6:	463b      	mov	r3, r7
 80016d8:	2104      	movs	r1, #4
 80016da:	4618      	mov	r0, r3
 80016dc:	f002 f9ec 	bl	8003ab8 <HAL_RCC_ClockConfig>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80016e6:	f000 f8f9 	bl	80018dc <Error_Handler>
  }
}
 80016ea:	bf00      	nop
 80016ec:	3758      	adds	r7, #88	; 0x58
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
	...

080016f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016f8:	4b1b      	ldr	r3, [pc, #108]	; (8001768 <MX_I2C1_Init+0x74>)
 80016fa:	4a1c      	ldr	r2, [pc, #112]	; (800176c <MX_I2C1_Init+0x78>)
 80016fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80016fe:	4b1a      	ldr	r3, [pc, #104]	; (8001768 <MX_I2C1_Init+0x74>)
 8001700:	4a1b      	ldr	r2, [pc, #108]	; (8001770 <MX_I2C1_Init+0x7c>)
 8001702:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001704:	4b18      	ldr	r3, [pc, #96]	; (8001768 <MX_I2C1_Init+0x74>)
 8001706:	2200      	movs	r2, #0
 8001708:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800170a:	4b17      	ldr	r3, [pc, #92]	; (8001768 <MX_I2C1_Init+0x74>)
 800170c:	2201      	movs	r2, #1
 800170e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001710:	4b15      	ldr	r3, [pc, #84]	; (8001768 <MX_I2C1_Init+0x74>)
 8001712:	2200      	movs	r2, #0
 8001714:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001716:	4b14      	ldr	r3, [pc, #80]	; (8001768 <MX_I2C1_Init+0x74>)
 8001718:	2200      	movs	r2, #0
 800171a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800171c:	4b12      	ldr	r3, [pc, #72]	; (8001768 <MX_I2C1_Init+0x74>)
 800171e:	2200      	movs	r2, #0
 8001720:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001722:	4b11      	ldr	r3, [pc, #68]	; (8001768 <MX_I2C1_Init+0x74>)
 8001724:	2200      	movs	r2, #0
 8001726:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001728:	4b0f      	ldr	r3, [pc, #60]	; (8001768 <MX_I2C1_Init+0x74>)
 800172a:	2200      	movs	r2, #0
 800172c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800172e:	480e      	ldr	r0, [pc, #56]	; (8001768 <MX_I2C1_Init+0x74>)
 8001730:	f000 ff68 	bl	8002604 <HAL_I2C_Init>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800173a:	f000 f8cf 	bl	80018dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800173e:	2100      	movs	r1, #0
 8001740:	4809      	ldr	r0, [pc, #36]	; (8001768 <MX_I2C1_Init+0x74>)
 8001742:	f001 fce1 	bl	8003108 <HAL_I2CEx_ConfigAnalogFilter>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800174c:	f000 f8c6 	bl	80018dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001750:	2100      	movs	r1, #0
 8001752:	4805      	ldr	r0, [pc, #20]	; (8001768 <MX_I2C1_Init+0x74>)
 8001754:	f001 fd23 	bl	800319e <HAL_I2CEx_ConfigDigitalFilter>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800175e:	f000 f8bd 	bl	80018dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	20000078 	.word	0x20000078
 800176c:	40005400 	.word	0x40005400
 8001770:	10909cec 	.word	0x10909cec

08001774 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001778:	4b14      	ldr	r3, [pc, #80]	; (80017cc <MX_USART2_UART_Init+0x58>)
 800177a:	4a15      	ldr	r2, [pc, #84]	; (80017d0 <MX_USART2_UART_Init+0x5c>)
 800177c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800177e:	4b13      	ldr	r3, [pc, #76]	; (80017cc <MX_USART2_UART_Init+0x58>)
 8001780:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001784:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001786:	4b11      	ldr	r3, [pc, #68]	; (80017cc <MX_USART2_UART_Init+0x58>)
 8001788:	2200      	movs	r2, #0
 800178a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800178c:	4b0f      	ldr	r3, [pc, #60]	; (80017cc <MX_USART2_UART_Init+0x58>)
 800178e:	2200      	movs	r2, #0
 8001790:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001792:	4b0e      	ldr	r3, [pc, #56]	; (80017cc <MX_USART2_UART_Init+0x58>)
 8001794:	2200      	movs	r2, #0
 8001796:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001798:	4b0c      	ldr	r3, [pc, #48]	; (80017cc <MX_USART2_UART_Init+0x58>)
 800179a:	220c      	movs	r2, #12
 800179c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800179e:	4b0b      	ldr	r3, [pc, #44]	; (80017cc <MX_USART2_UART_Init+0x58>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017a4:	4b09      	ldr	r3, [pc, #36]	; (80017cc <MX_USART2_UART_Init+0x58>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017aa:	4b08      	ldr	r3, [pc, #32]	; (80017cc <MX_USART2_UART_Init+0x58>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017b0:	4b06      	ldr	r3, [pc, #24]	; (80017cc <MX_USART2_UART_Init+0x58>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017b6:	4805      	ldr	r0, [pc, #20]	; (80017cc <MX_USART2_UART_Init+0x58>)
 80017b8:	f003 f85e 	bl	8004878 <HAL_UART_Init>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80017c2:	f000 f88b 	bl	80018dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	200000cc 	.word	0x200000cc
 80017d0:	40004400 	.word	0x40004400

080017d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017da:	4b0c      	ldr	r3, [pc, #48]	; (800180c <MX_DMA_Init+0x38>)
 80017dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017de:	4a0b      	ldr	r2, [pc, #44]	; (800180c <MX_DMA_Init+0x38>)
 80017e0:	f043 0301 	orr.w	r3, r3, #1
 80017e4:	6493      	str	r3, [r2, #72]	; 0x48
 80017e6:	4b09      	ldr	r3, [pc, #36]	; (800180c <MX_DMA_Init+0x38>)
 80017e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	607b      	str	r3, [r7, #4]
 80017f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80017f2:	2200      	movs	r2, #0
 80017f4:	2100      	movs	r1, #0
 80017f6:	2010      	movs	r0, #16
 80017f8:	f000 fba3 	bl	8001f42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80017fc:	2010      	movs	r0, #16
 80017fe:	f000 fbbc 	bl	8001f7a <HAL_NVIC_EnableIRQ>

}
 8001802:	bf00      	nop
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40021000 	.word	0x40021000

08001810 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b08a      	sub	sp, #40	; 0x28
 8001814:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001816:	f107 0314 	add.w	r3, r7, #20
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	605a      	str	r2, [r3, #4]
 8001820:	609a      	str	r2, [r3, #8]
 8001822:	60da      	str	r2, [r3, #12]
 8001824:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001826:	4b2b      	ldr	r3, [pc, #172]	; (80018d4 <MX_GPIO_Init+0xc4>)
 8001828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800182a:	4a2a      	ldr	r2, [pc, #168]	; (80018d4 <MX_GPIO_Init+0xc4>)
 800182c:	f043 0304 	orr.w	r3, r3, #4
 8001830:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001832:	4b28      	ldr	r3, [pc, #160]	; (80018d4 <MX_GPIO_Init+0xc4>)
 8001834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001836:	f003 0304 	and.w	r3, r3, #4
 800183a:	613b      	str	r3, [r7, #16]
 800183c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800183e:	4b25      	ldr	r3, [pc, #148]	; (80018d4 <MX_GPIO_Init+0xc4>)
 8001840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001842:	4a24      	ldr	r2, [pc, #144]	; (80018d4 <MX_GPIO_Init+0xc4>)
 8001844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001848:	64d3      	str	r3, [r2, #76]	; 0x4c
 800184a:	4b22      	ldr	r3, [pc, #136]	; (80018d4 <MX_GPIO_Init+0xc4>)
 800184c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800184e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001856:	4b1f      	ldr	r3, [pc, #124]	; (80018d4 <MX_GPIO_Init+0xc4>)
 8001858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800185a:	4a1e      	ldr	r2, [pc, #120]	; (80018d4 <MX_GPIO_Init+0xc4>)
 800185c:	f043 0301 	orr.w	r3, r3, #1
 8001860:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001862:	4b1c      	ldr	r3, [pc, #112]	; (80018d4 <MX_GPIO_Init+0xc4>)
 8001864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	60bb      	str	r3, [r7, #8]
 800186c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800186e:	4b19      	ldr	r3, [pc, #100]	; (80018d4 <MX_GPIO_Init+0xc4>)
 8001870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001872:	4a18      	ldr	r2, [pc, #96]	; (80018d4 <MX_GPIO_Init+0xc4>)
 8001874:	f043 0302 	orr.w	r3, r3, #2
 8001878:	64d3      	str	r3, [r2, #76]	; 0x4c
 800187a:	4b16      	ldr	r3, [pc, #88]	; (80018d4 <MX_GPIO_Init+0xc4>)
 800187c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	607b      	str	r3, [r7, #4]
 8001884:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001886:	2200      	movs	r2, #0
 8001888:	2120      	movs	r1, #32
 800188a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800188e:	f000 fea1 	bl	80025d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001892:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001896:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001898:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800189c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189e:	2300      	movs	r3, #0
 80018a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018a2:	f107 0314 	add.w	r3, r7, #20
 80018a6:	4619      	mov	r1, r3
 80018a8:	480b      	ldr	r0, [pc, #44]	; (80018d8 <MX_GPIO_Init+0xc8>)
 80018aa:	f000 fce9 	bl	8002280 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80018ae:	2320      	movs	r3, #32
 80018b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b2:	2301      	movs	r3, #1
 80018b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b6:	2300      	movs	r3, #0
 80018b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ba:	2300      	movs	r3, #0
 80018bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80018be:	f107 0314 	add.w	r3, r7, #20
 80018c2:	4619      	mov	r1, r3
 80018c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018c8:	f000 fcda 	bl	8002280 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018cc:	bf00      	nop
 80018ce:	3728      	adds	r7, #40	; 0x28
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40021000 	.word	0x40021000
 80018d8:	48000800 	.word	0x48000800

080018dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018e0:	b672      	cpsid	i
}
 80018e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018e4:	e7fe      	b.n	80018e4 <Error_Handler+0x8>
	...

080018e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ee:	4b0f      	ldr	r3, [pc, #60]	; (800192c <HAL_MspInit+0x44>)
 80018f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018f2:	4a0e      	ldr	r2, [pc, #56]	; (800192c <HAL_MspInit+0x44>)
 80018f4:	f043 0301 	orr.w	r3, r3, #1
 80018f8:	6613      	str	r3, [r2, #96]	; 0x60
 80018fa:	4b0c      	ldr	r3, [pc, #48]	; (800192c <HAL_MspInit+0x44>)
 80018fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	607b      	str	r3, [r7, #4]
 8001904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001906:	4b09      	ldr	r3, [pc, #36]	; (800192c <HAL_MspInit+0x44>)
 8001908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800190a:	4a08      	ldr	r2, [pc, #32]	; (800192c <HAL_MspInit+0x44>)
 800190c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001910:	6593      	str	r3, [r2, #88]	; 0x58
 8001912:	4b06      	ldr	r3, [pc, #24]	; (800192c <HAL_MspInit+0x44>)
 8001914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800191a:	603b      	str	r3, [r7, #0]
 800191c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800191e:	bf00      	nop
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	40021000 	.word	0x40021000

08001930 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b0ac      	sub	sp, #176	; 0xb0
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001938:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	605a      	str	r2, [r3, #4]
 8001942:	609a      	str	r2, [r3, #8]
 8001944:	60da      	str	r2, [r3, #12]
 8001946:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001948:	f107 0314 	add.w	r3, r7, #20
 800194c:	2288      	movs	r2, #136	; 0x88
 800194e:	2100      	movs	r1, #0
 8001950:	4618      	mov	r0, r3
 8001952:	f003 fd57 	bl	8005404 <memset>
  if(hi2c->Instance==I2C1)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a21      	ldr	r2, [pc, #132]	; (80019e0 <HAL_I2C_MspInit+0xb0>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d13b      	bne.n	80019d8 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001960:	2340      	movs	r3, #64	; 0x40
 8001962:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001964:	2300      	movs	r3, #0
 8001966:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001968:	f107 0314 	add.w	r3, r7, #20
 800196c:	4618      	mov	r0, r3
 800196e:	f002 fac7 	bl	8003f00 <HAL_RCCEx_PeriphCLKConfig>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001978:	f7ff ffb0 	bl	80018dc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800197c:	4b19      	ldr	r3, [pc, #100]	; (80019e4 <HAL_I2C_MspInit+0xb4>)
 800197e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001980:	4a18      	ldr	r2, [pc, #96]	; (80019e4 <HAL_I2C_MspInit+0xb4>)
 8001982:	f043 0302 	orr.w	r3, r3, #2
 8001986:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001988:	4b16      	ldr	r3, [pc, #88]	; (80019e4 <HAL_I2C_MspInit+0xb4>)
 800198a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800198c:	f003 0302 	and.w	r3, r3, #2
 8001990:	613b      	str	r3, [r7, #16]
 8001992:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001994:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001998:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800199c:	2312      	movs	r3, #18
 800199e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a8:	2303      	movs	r3, #3
 80019aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019ae:	2304      	movs	r3, #4
 80019b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80019b8:	4619      	mov	r1, r3
 80019ba:	480b      	ldr	r0, [pc, #44]	; (80019e8 <HAL_I2C_MspInit+0xb8>)
 80019bc:	f000 fc60 	bl	8002280 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019c0:	4b08      	ldr	r3, [pc, #32]	; (80019e4 <HAL_I2C_MspInit+0xb4>)
 80019c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c4:	4a07      	ldr	r2, [pc, #28]	; (80019e4 <HAL_I2C_MspInit+0xb4>)
 80019c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019ca:	6593      	str	r3, [r2, #88]	; 0x58
 80019cc:	4b05      	ldr	r3, [pc, #20]	; (80019e4 <HAL_I2C_MspInit+0xb4>)
 80019ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019d4:	60fb      	str	r3, [r7, #12]
 80019d6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80019d8:	bf00      	nop
 80019da:	37b0      	adds	r7, #176	; 0xb0
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	40005400 	.word	0x40005400
 80019e4:	40021000 	.word	0x40021000
 80019e8:	48000400 	.word	0x48000400

080019ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b0ac      	sub	sp, #176	; 0xb0
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	605a      	str	r2, [r3, #4]
 80019fe:	609a      	str	r2, [r3, #8]
 8001a00:	60da      	str	r2, [r3, #12]
 8001a02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a04:	f107 0314 	add.w	r3, r7, #20
 8001a08:	2288      	movs	r2, #136	; 0x88
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f003 fcf9 	bl	8005404 <memset>
  if(huart->Instance==USART2)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a36      	ldr	r2, [pc, #216]	; (8001af0 <HAL_UART_MspInit+0x104>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d164      	bne.n	8001ae6 <HAL_UART_MspInit+0xfa>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a20:	2300      	movs	r3, #0
 8001a22:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a24:	f107 0314 	add.w	r3, r7, #20
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f002 fa69 	bl	8003f00 <HAL_RCCEx_PeriphCLKConfig>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a34:	f7ff ff52 	bl	80018dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a38:	4b2e      	ldr	r3, [pc, #184]	; (8001af4 <HAL_UART_MspInit+0x108>)
 8001a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a3c:	4a2d      	ldr	r2, [pc, #180]	; (8001af4 <HAL_UART_MspInit+0x108>)
 8001a3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a42:	6593      	str	r3, [r2, #88]	; 0x58
 8001a44:	4b2b      	ldr	r3, [pc, #172]	; (8001af4 <HAL_UART_MspInit+0x108>)
 8001a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4c:	613b      	str	r3, [r7, #16]
 8001a4e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a50:	4b28      	ldr	r3, [pc, #160]	; (8001af4 <HAL_UART_MspInit+0x108>)
 8001a52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a54:	4a27      	ldr	r2, [pc, #156]	; (8001af4 <HAL_UART_MspInit+0x108>)
 8001a56:	f043 0301 	orr.w	r3, r3, #1
 8001a5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a5c:	4b25      	ldr	r3, [pc, #148]	; (8001af4 <HAL_UART_MspInit+0x108>)
 8001a5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a60:	f003 0301 	and.w	r3, r3, #1
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a68:	230c      	movs	r3, #12
 8001a6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6e:	2302      	movs	r3, #2
 8001a70:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	2300      	movs	r3, #0
 8001a76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a80:	2307      	movs	r3, #7
 8001a82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a86:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a90:	f000 fbf6 	bl	8002280 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001a94:	4b18      	ldr	r3, [pc, #96]	; (8001af8 <HAL_UART_MspInit+0x10c>)
 8001a96:	4a19      	ldr	r2, [pc, #100]	; (8001afc <HAL_UART_MspInit+0x110>)
 8001a98:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8001a9a:	4b17      	ldr	r3, [pc, #92]	; (8001af8 <HAL_UART_MspInit+0x10c>)
 8001a9c:	2202      	movs	r2, #2
 8001a9e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001aa0:	4b15      	ldr	r3, [pc, #84]	; (8001af8 <HAL_UART_MspInit+0x10c>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001aa6:	4b14      	ldr	r3, [pc, #80]	; (8001af8 <HAL_UART_MspInit+0x10c>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001aac:	4b12      	ldr	r3, [pc, #72]	; (8001af8 <HAL_UART_MspInit+0x10c>)
 8001aae:	2280      	movs	r2, #128	; 0x80
 8001ab0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ab2:	4b11      	ldr	r3, [pc, #68]	; (8001af8 <HAL_UART_MspInit+0x10c>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ab8:	4b0f      	ldr	r3, [pc, #60]	; (8001af8 <HAL_UART_MspInit+0x10c>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001abe:	4b0e      	ldr	r3, [pc, #56]	; (8001af8 <HAL_UART_MspInit+0x10c>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ac4:	4b0c      	ldr	r3, [pc, #48]	; (8001af8 <HAL_UART_MspInit+0x10c>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001aca:	480b      	ldr	r0, [pc, #44]	; (8001af8 <HAL_UART_MspInit+0x10c>)
 8001acc:	f000 fa70 	bl	8001fb0 <HAL_DMA_Init>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 8001ad6:	f7ff ff01 	bl	80018dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a06      	ldr	r2, [pc, #24]	; (8001af8 <HAL_UART_MspInit+0x10c>)
 8001ade:	675a      	str	r2, [r3, #116]	; 0x74
 8001ae0:	4a05      	ldr	r2, [pc, #20]	; (8001af8 <HAL_UART_MspInit+0x10c>)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ae6:	bf00      	nop
 8001ae8:	37b0      	adds	r7, #176	; 0xb0
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	40004400 	.word	0x40004400
 8001af4:	40021000 	.word	0x40021000
 8001af8:	20000154 	.word	0x20000154
 8001afc:	4002006c 	.word	0x4002006c

08001b00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b04:	e7fe      	b.n	8001b04 <NMI_Handler+0x4>

08001b06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b06:	b480      	push	{r7}
 8001b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b0a:	e7fe      	b.n	8001b0a <HardFault_Handler+0x4>

08001b0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b10:	e7fe      	b.n	8001b10 <MemManage_Handler+0x4>

08001b12 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b12:	b480      	push	{r7}
 8001b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b16:	e7fe      	b.n	8001b16 <BusFault_Handler+0x4>

08001b18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b1c:	e7fe      	b.n	8001b1c <UsageFault_Handler+0x4>

08001b1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b30:	bf00      	nop
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr

08001b3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b4c:	f000 f8da 	bl	8001d04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b50:	bf00      	nop
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001b58:	4802      	ldr	r0, [pc, #8]	; (8001b64 <DMA1_Channel6_IRQHandler+0x10>)
 8001b5a:	f000 fae1 	bl	8002120 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	20000154 	.word	0x20000154

08001b68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b70:	4a14      	ldr	r2, [pc, #80]	; (8001bc4 <_sbrk+0x5c>)
 8001b72:	4b15      	ldr	r3, [pc, #84]	; (8001bc8 <_sbrk+0x60>)
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b7c:	4b13      	ldr	r3, [pc, #76]	; (8001bcc <_sbrk+0x64>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d102      	bne.n	8001b8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b84:	4b11      	ldr	r3, [pc, #68]	; (8001bcc <_sbrk+0x64>)
 8001b86:	4a12      	ldr	r2, [pc, #72]	; (8001bd0 <_sbrk+0x68>)
 8001b88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b8a:	4b10      	ldr	r3, [pc, #64]	; (8001bcc <_sbrk+0x64>)
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4413      	add	r3, r2
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d207      	bcs.n	8001ba8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b98:	f003 fc3c 	bl	8005414 <__errno>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	220c      	movs	r2, #12
 8001ba0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ba2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ba6:	e009      	b.n	8001bbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ba8:	4b08      	ldr	r3, [pc, #32]	; (8001bcc <_sbrk+0x64>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bae:	4b07      	ldr	r3, [pc, #28]	; (8001bcc <_sbrk+0x64>)
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	4a05      	ldr	r2, [pc, #20]	; (8001bcc <_sbrk+0x64>)
 8001bb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bba:	68fb      	ldr	r3, [r7, #12]
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3718      	adds	r7, #24
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	20018000 	.word	0x20018000
 8001bc8:	00000400 	.word	0x00000400
 8001bcc:	2000019c 	.word	0x2000019c
 8001bd0:	200002f0 	.word	0x200002f0

08001bd4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001bd8:	4b06      	ldr	r3, [pc, #24]	; (8001bf4 <SystemInit+0x20>)
 8001bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bde:	4a05      	ldr	r2, [pc, #20]	; (8001bf4 <SystemInit+0x20>)
 8001be0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001be4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001be8:	bf00      	nop
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	e000ed00 	.word	0xe000ed00

08001bf8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001bf8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c30 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bfc:	f7ff ffea 	bl	8001bd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c00:	480c      	ldr	r0, [pc, #48]	; (8001c34 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c02:	490d      	ldr	r1, [pc, #52]	; (8001c38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c04:	4a0d      	ldr	r2, [pc, #52]	; (8001c3c <LoopForever+0xe>)
  movs r3, #0
 8001c06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c08:	e002      	b.n	8001c10 <LoopCopyDataInit>

08001c0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c0e:	3304      	adds	r3, #4

08001c10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c14:	d3f9      	bcc.n	8001c0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c16:	4a0a      	ldr	r2, [pc, #40]	; (8001c40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c18:	4c0a      	ldr	r4, [pc, #40]	; (8001c44 <LoopForever+0x16>)
  movs r3, #0
 8001c1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c1c:	e001      	b.n	8001c22 <LoopFillZerobss>

08001c1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c20:	3204      	adds	r2, #4

08001c22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c24:	d3fb      	bcc.n	8001c1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c26:	f003 fbfb 	bl	8005420 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c2a:	f7ff f919 	bl	8000e60 <main>

08001c2e <LoopForever>:

LoopForever:
    b LoopForever
 8001c2e:	e7fe      	b.n	8001c2e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001c30:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001c34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c38:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001c3c:	08005db8 	.word	0x08005db8
  ldr r2, =_sbss
 8001c40:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001c44:	200002ec 	.word	0x200002ec

08001c48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c48:	e7fe      	b.n	8001c48 <ADC1_2_IRQHandler>
	...

08001c4c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c52:	2300      	movs	r3, #0
 8001c54:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c56:	4b0c      	ldr	r3, [pc, #48]	; (8001c88 <HAL_Init+0x3c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a0b      	ldr	r2, [pc, #44]	; (8001c88 <HAL_Init+0x3c>)
 8001c5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c60:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c62:	2003      	movs	r0, #3
 8001c64:	f000 f962 	bl	8001f2c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c68:	2000      	movs	r0, #0
 8001c6a:	f000 f80f 	bl	8001c8c <HAL_InitTick>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d002      	beq.n	8001c7a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	71fb      	strb	r3, [r7, #7]
 8001c78:	e001      	b.n	8001c7e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c7a:	f7ff fe35 	bl	80018e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c7e:	79fb      	ldrb	r3, [r7, #7]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3708      	adds	r7, #8
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	40022000 	.word	0x40022000

08001c8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c94:	2300      	movs	r3, #0
 8001c96:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001c98:	4b17      	ldr	r3, [pc, #92]	; (8001cf8 <HAL_InitTick+0x6c>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d023      	beq.n	8001ce8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ca0:	4b16      	ldr	r3, [pc, #88]	; (8001cfc <HAL_InitTick+0x70>)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	4b14      	ldr	r3, [pc, #80]	; (8001cf8 <HAL_InitTick+0x6c>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	4619      	mov	r1, r3
 8001caa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cae:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f000 f96d 	bl	8001f96 <HAL_SYSTICK_Config>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d10f      	bne.n	8001ce2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2b0f      	cmp	r3, #15
 8001cc6:	d809      	bhi.n	8001cdc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cc8:	2200      	movs	r2, #0
 8001cca:	6879      	ldr	r1, [r7, #4]
 8001ccc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001cd0:	f000 f937 	bl	8001f42 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001cd4:	4a0a      	ldr	r2, [pc, #40]	; (8001d00 <HAL_InitTick+0x74>)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6013      	str	r3, [r2, #0]
 8001cda:	e007      	b.n	8001cec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	73fb      	strb	r3, [r7, #15]
 8001ce0:	e004      	b.n	8001cec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	73fb      	strb	r3, [r7, #15]
 8001ce6:	e001      	b.n	8001cec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3710      	adds	r7, #16
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	20000008 	.word	0x20000008
 8001cfc:	20000000 	.word	0x20000000
 8001d00:	20000004 	.word	0x20000004

08001d04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d08:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <HAL_IncTick+0x20>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	4b06      	ldr	r3, [pc, #24]	; (8001d28 <HAL_IncTick+0x24>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4413      	add	r3, r2
 8001d14:	4a04      	ldr	r2, [pc, #16]	; (8001d28 <HAL_IncTick+0x24>)
 8001d16:	6013      	str	r3, [r2, #0]
}
 8001d18:	bf00      	nop
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	20000008 	.word	0x20000008
 8001d28:	200001a0 	.word	0x200001a0

08001d2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d30:	4b03      	ldr	r3, [pc, #12]	; (8001d40 <HAL_GetTick+0x14>)
 8001d32:	681b      	ldr	r3, [r3, #0]
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	200001a0 	.word	0x200001a0

08001d44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d4c:	f7ff ffee 	bl	8001d2c <HAL_GetTick>
 8001d50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d5c:	d005      	beq.n	8001d6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001d5e:	4b0a      	ldr	r3, [pc, #40]	; (8001d88 <HAL_Delay+0x44>)
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	461a      	mov	r2, r3
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	4413      	add	r3, r2
 8001d68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d6a:	bf00      	nop
 8001d6c:	f7ff ffde 	bl	8001d2c <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	68fa      	ldr	r2, [r7, #12]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d8f7      	bhi.n	8001d6c <HAL_Delay+0x28>
  {
  }
}
 8001d7c:	bf00      	nop
 8001d7e:	bf00      	nop
 8001d80:	3710      	adds	r7, #16
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	20000008 	.word	0x20000008

08001d8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f003 0307 	and.w	r3, r3, #7
 8001d9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d9c:	4b0c      	ldr	r3, [pc, #48]	; (8001dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001da2:	68ba      	ldr	r2, [r7, #8]
 8001da4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001da8:	4013      	ands	r3, r2
 8001daa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001db4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001db8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dbe:	4a04      	ldr	r2, [pc, #16]	; (8001dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	60d3      	str	r3, [r2, #12]
}
 8001dc4:	bf00      	nop
 8001dc6:	3714      	adds	r7, #20
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr
 8001dd0:	e000ed00 	.word	0xe000ed00

08001dd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dd8:	4b04      	ldr	r3, [pc, #16]	; (8001dec <__NVIC_GetPriorityGrouping+0x18>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	0a1b      	lsrs	r3, r3, #8
 8001dde:	f003 0307 	and.w	r3, r3, #7
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr
 8001dec:	e000ed00 	.word	0xe000ed00

08001df0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	db0b      	blt.n	8001e1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e02:	79fb      	ldrb	r3, [r7, #7]
 8001e04:	f003 021f 	and.w	r2, r3, #31
 8001e08:	4907      	ldr	r1, [pc, #28]	; (8001e28 <__NVIC_EnableIRQ+0x38>)
 8001e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0e:	095b      	lsrs	r3, r3, #5
 8001e10:	2001      	movs	r0, #1
 8001e12:	fa00 f202 	lsl.w	r2, r0, r2
 8001e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e1a:	bf00      	nop
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	e000e100 	.word	0xe000e100

08001e2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	4603      	mov	r3, r0
 8001e34:	6039      	str	r1, [r7, #0]
 8001e36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	db0a      	blt.n	8001e56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	b2da      	uxtb	r2, r3
 8001e44:	490c      	ldr	r1, [pc, #48]	; (8001e78 <__NVIC_SetPriority+0x4c>)
 8001e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4a:	0112      	lsls	r2, r2, #4
 8001e4c:	b2d2      	uxtb	r2, r2
 8001e4e:	440b      	add	r3, r1
 8001e50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e54:	e00a      	b.n	8001e6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	b2da      	uxtb	r2, r3
 8001e5a:	4908      	ldr	r1, [pc, #32]	; (8001e7c <__NVIC_SetPriority+0x50>)
 8001e5c:	79fb      	ldrb	r3, [r7, #7]
 8001e5e:	f003 030f 	and.w	r3, r3, #15
 8001e62:	3b04      	subs	r3, #4
 8001e64:	0112      	lsls	r2, r2, #4
 8001e66:	b2d2      	uxtb	r2, r2
 8001e68:	440b      	add	r3, r1
 8001e6a:	761a      	strb	r2, [r3, #24]
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	e000e100 	.word	0xe000e100
 8001e7c:	e000ed00 	.word	0xe000ed00

08001e80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b089      	sub	sp, #36	; 0x24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f003 0307 	and.w	r3, r3, #7
 8001e92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	f1c3 0307 	rsb	r3, r3, #7
 8001e9a:	2b04      	cmp	r3, #4
 8001e9c:	bf28      	it	cs
 8001e9e:	2304      	movcs	r3, #4
 8001ea0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	3304      	adds	r3, #4
 8001ea6:	2b06      	cmp	r3, #6
 8001ea8:	d902      	bls.n	8001eb0 <NVIC_EncodePriority+0x30>
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	3b03      	subs	r3, #3
 8001eae:	e000      	b.n	8001eb2 <NVIC_EncodePriority+0x32>
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	43da      	mvns	r2, r3
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	401a      	ands	r2, r3
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ec8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed2:	43d9      	mvns	r1, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed8:	4313      	orrs	r3, r2
         );
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3724      	adds	r7, #36	; 0x24
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
	...

08001ee8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ef8:	d301      	bcc.n	8001efe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001efa:	2301      	movs	r3, #1
 8001efc:	e00f      	b.n	8001f1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001efe:	4a0a      	ldr	r2, [pc, #40]	; (8001f28 <SysTick_Config+0x40>)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	3b01      	subs	r3, #1
 8001f04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f06:	210f      	movs	r1, #15
 8001f08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f0c:	f7ff ff8e 	bl	8001e2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f10:	4b05      	ldr	r3, [pc, #20]	; (8001f28 <SysTick_Config+0x40>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f16:	4b04      	ldr	r3, [pc, #16]	; (8001f28 <SysTick_Config+0x40>)
 8001f18:	2207      	movs	r2, #7
 8001f1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	e000e010 	.word	0xe000e010

08001f2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f7ff ff29 	bl	8001d8c <__NVIC_SetPriorityGrouping>
}
 8001f3a:	bf00      	nop
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b086      	sub	sp, #24
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	4603      	mov	r3, r0
 8001f4a:	60b9      	str	r1, [r7, #8]
 8001f4c:	607a      	str	r2, [r7, #4]
 8001f4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f50:	2300      	movs	r3, #0
 8001f52:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f54:	f7ff ff3e 	bl	8001dd4 <__NVIC_GetPriorityGrouping>
 8001f58:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	68b9      	ldr	r1, [r7, #8]
 8001f5e:	6978      	ldr	r0, [r7, #20]
 8001f60:	f7ff ff8e 	bl	8001e80 <NVIC_EncodePriority>
 8001f64:	4602      	mov	r2, r0
 8001f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f6a:	4611      	mov	r1, r2
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff ff5d 	bl	8001e2c <__NVIC_SetPriority>
}
 8001f72:	bf00      	nop
 8001f74:	3718      	adds	r7, #24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b082      	sub	sp, #8
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	4603      	mov	r3, r0
 8001f82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff ff31 	bl	8001df0 <__NVIC_EnableIRQ>
}
 8001f8e:	bf00      	nop
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b082      	sub	sp, #8
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f7ff ffa2 	bl	8001ee8 <SysTick_Config>
 8001fa4:	4603      	mov	r3, r0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
	...

08001fb0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d101      	bne.n	8001fc2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e098      	b.n	80020f4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	4b4d      	ldr	r3, [pc, #308]	; (8002100 <HAL_DMA_Init+0x150>)
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d80f      	bhi.n	8001fee <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	4b4b      	ldr	r3, [pc, #300]	; (8002104 <HAL_DMA_Init+0x154>)
 8001fd6:	4413      	add	r3, r2
 8001fd8:	4a4b      	ldr	r2, [pc, #300]	; (8002108 <HAL_DMA_Init+0x158>)
 8001fda:	fba2 2303 	umull	r2, r3, r2, r3
 8001fde:	091b      	lsrs	r3, r3, #4
 8001fe0:	009a      	lsls	r2, r3, #2
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a48      	ldr	r2, [pc, #288]	; (800210c <HAL_DMA_Init+0x15c>)
 8001fea:	641a      	str	r2, [r3, #64]	; 0x40
 8001fec:	e00e      	b.n	800200c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	4b46      	ldr	r3, [pc, #280]	; (8002110 <HAL_DMA_Init+0x160>)
 8001ff6:	4413      	add	r3, r2
 8001ff8:	4a43      	ldr	r2, [pc, #268]	; (8002108 <HAL_DMA_Init+0x158>)
 8001ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8001ffe:	091b      	lsrs	r3, r3, #4
 8002000:	009a      	lsls	r2, r3, #2
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a42      	ldr	r2, [pc, #264]	; (8002114 <HAL_DMA_Init+0x164>)
 800200a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2202      	movs	r2, #2
 8002010:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002026:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002030:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800203c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	699b      	ldr	r3, [r3, #24]
 8002042:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002048:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a1b      	ldr	r3, [r3, #32]
 800204e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002050:	68fa      	ldr	r2, [r7, #12]
 8002052:	4313      	orrs	r3, r2
 8002054:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002066:	d039      	beq.n	80020dc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206c:	4a27      	ldr	r2, [pc, #156]	; (800210c <HAL_DMA_Init+0x15c>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d11a      	bne.n	80020a8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002072:	4b29      	ldr	r3, [pc, #164]	; (8002118 <HAL_DMA_Init+0x168>)
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800207a:	f003 031c 	and.w	r3, r3, #28
 800207e:	210f      	movs	r1, #15
 8002080:	fa01 f303 	lsl.w	r3, r1, r3
 8002084:	43db      	mvns	r3, r3
 8002086:	4924      	ldr	r1, [pc, #144]	; (8002118 <HAL_DMA_Init+0x168>)
 8002088:	4013      	ands	r3, r2
 800208a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800208c:	4b22      	ldr	r3, [pc, #136]	; (8002118 <HAL_DMA_Init+0x168>)
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6859      	ldr	r1, [r3, #4]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002098:	f003 031c 	and.w	r3, r3, #28
 800209c:	fa01 f303 	lsl.w	r3, r1, r3
 80020a0:	491d      	ldr	r1, [pc, #116]	; (8002118 <HAL_DMA_Init+0x168>)
 80020a2:	4313      	orrs	r3, r2
 80020a4:	600b      	str	r3, [r1, #0]
 80020a6:	e019      	b.n	80020dc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80020a8:	4b1c      	ldr	r3, [pc, #112]	; (800211c <HAL_DMA_Init+0x16c>)
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b0:	f003 031c 	and.w	r3, r3, #28
 80020b4:	210f      	movs	r1, #15
 80020b6:	fa01 f303 	lsl.w	r3, r1, r3
 80020ba:	43db      	mvns	r3, r3
 80020bc:	4917      	ldr	r1, [pc, #92]	; (800211c <HAL_DMA_Init+0x16c>)
 80020be:	4013      	ands	r3, r2
 80020c0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80020c2:	4b16      	ldr	r3, [pc, #88]	; (800211c <HAL_DMA_Init+0x16c>)
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6859      	ldr	r1, [r3, #4]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ce:	f003 031c 	and.w	r3, r3, #28
 80020d2:	fa01 f303 	lsl.w	r3, r1, r3
 80020d6:	4911      	ldr	r1, [pc, #68]	; (800211c <HAL_DMA_Init+0x16c>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2201      	movs	r2, #1
 80020e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80020f2:	2300      	movs	r3, #0
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3714      	adds	r7, #20
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr
 8002100:	40020407 	.word	0x40020407
 8002104:	bffdfff8 	.word	0xbffdfff8
 8002108:	cccccccd 	.word	0xcccccccd
 800210c:	40020000 	.word	0x40020000
 8002110:	bffdfbf8 	.word	0xbffdfbf8
 8002114:	40020400 	.word	0x40020400
 8002118:	400200a8 	.word	0x400200a8
 800211c:	400204a8 	.word	0x400204a8

08002120 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213c:	f003 031c 	and.w	r3, r3, #28
 8002140:	2204      	movs	r2, #4
 8002142:	409a      	lsls	r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	4013      	ands	r3, r2
 8002148:	2b00      	cmp	r3, #0
 800214a:	d026      	beq.n	800219a <HAL_DMA_IRQHandler+0x7a>
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	f003 0304 	and.w	r3, r3, #4
 8002152:	2b00      	cmp	r3, #0
 8002154:	d021      	beq.n	800219a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0320 	and.w	r3, r3, #32
 8002160:	2b00      	cmp	r3, #0
 8002162:	d107      	bne.n	8002174 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f022 0204 	bic.w	r2, r2, #4
 8002172:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002178:	f003 021c 	and.w	r2, r3, #28
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002180:	2104      	movs	r1, #4
 8002182:	fa01 f202 	lsl.w	r2, r1, r2
 8002186:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218c:	2b00      	cmp	r3, #0
 800218e:	d071      	beq.n	8002274 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002198:	e06c      	b.n	8002274 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219e:	f003 031c 	and.w	r3, r3, #28
 80021a2:	2202      	movs	r2, #2
 80021a4:	409a      	lsls	r2, r3
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	4013      	ands	r3, r2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d02e      	beq.n	800220c <HAL_DMA_IRQHandler+0xec>
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	f003 0302 	and.w	r3, r3, #2
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d029      	beq.n	800220c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0320 	and.w	r3, r3, #32
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d10b      	bne.n	80021de <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f022 020a 	bic.w	r2, r2, #10
 80021d4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2201      	movs	r2, #1
 80021da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e2:	f003 021c 	and.w	r2, r3, #28
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ea:	2102      	movs	r1, #2
 80021ec:	fa01 f202 	lsl.w	r2, r1, r2
 80021f0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d038      	beq.n	8002274 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800220a:	e033      	b.n	8002274 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002210:	f003 031c 	and.w	r3, r3, #28
 8002214:	2208      	movs	r2, #8
 8002216:	409a      	lsls	r2, r3
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	4013      	ands	r3, r2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d02a      	beq.n	8002276 <HAL_DMA_IRQHandler+0x156>
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	f003 0308 	and.w	r3, r3, #8
 8002226:	2b00      	cmp	r3, #0
 8002228:	d025      	beq.n	8002276 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f022 020e 	bic.w	r2, r2, #14
 8002238:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223e:	f003 021c 	and.w	r2, r3, #28
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002246:	2101      	movs	r1, #1
 8002248:	fa01 f202 	lsl.w	r2, r1, r2
 800224c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2201      	movs	r2, #1
 8002252:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002268:	2b00      	cmp	r3, #0
 800226a:	d004      	beq.n	8002276 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002274:	bf00      	nop
 8002276:	bf00      	nop
}
 8002278:	3710      	adds	r7, #16
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
	...

08002280 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002280:	b480      	push	{r7}
 8002282:	b087      	sub	sp, #28
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800228a:	2300      	movs	r3, #0
 800228c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800228e:	e17f      	b.n	8002590 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	2101      	movs	r1, #1
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	fa01 f303 	lsl.w	r3, r1, r3
 800229c:	4013      	ands	r3, r2
 800229e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	f000 8171 	beq.w	800258a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f003 0303 	and.w	r3, r3, #3
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d005      	beq.n	80022c0 <HAL_GPIO_Init+0x40>
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f003 0303 	and.w	r3, r3, #3
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d130      	bne.n	8002322 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	2203      	movs	r2, #3
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	43db      	mvns	r3, r3
 80022d2:	693a      	ldr	r2, [r7, #16]
 80022d4:	4013      	ands	r3, r2
 80022d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	68da      	ldr	r2, [r3, #12]
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	005b      	lsls	r3, r3, #1
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	693a      	ldr	r2, [r7, #16]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	693a      	ldr	r2, [r7, #16]
 80022ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022f6:	2201      	movs	r2, #1
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	43db      	mvns	r3, r3
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	4013      	ands	r3, r2
 8002304:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	091b      	lsrs	r3, r3, #4
 800230c:	f003 0201 	and.w	r2, r3, #1
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	4313      	orrs	r3, r2
 800231a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f003 0303 	and.w	r3, r3, #3
 800232a:	2b03      	cmp	r3, #3
 800232c:	d118      	bne.n	8002360 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002332:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002334:	2201      	movs	r2, #1
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	43db      	mvns	r3, r3
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	4013      	ands	r3, r2
 8002342:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	08db      	lsrs	r3, r3, #3
 800234a:	f003 0201 	and.w	r2, r3, #1
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	fa02 f303 	lsl.w	r3, r2, r3
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	4313      	orrs	r3, r2
 8002358:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f003 0303 	and.w	r3, r3, #3
 8002368:	2b03      	cmp	r3, #3
 800236a:	d017      	beq.n	800239c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	2203      	movs	r2, #3
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	43db      	mvns	r3, r3
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	4013      	ands	r3, r2
 8002382:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	689a      	ldr	r2, [r3, #8]
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	693a      	ldr	r2, [r7, #16]
 8002392:	4313      	orrs	r3, r2
 8002394:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	693a      	ldr	r2, [r7, #16]
 800239a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f003 0303 	and.w	r3, r3, #3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d123      	bne.n	80023f0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	08da      	lsrs	r2, r3, #3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	3208      	adds	r2, #8
 80023b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	f003 0307 	and.w	r3, r3, #7
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	220f      	movs	r2, #15
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	43db      	mvns	r3, r3
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	4013      	ands	r3, r2
 80023ca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	691a      	ldr	r2, [r3, #16]
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	f003 0307 	and.w	r3, r3, #7
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	4313      	orrs	r3, r2
 80023e0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	08da      	lsrs	r2, r3, #3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	3208      	adds	r2, #8
 80023ea:	6939      	ldr	r1, [r7, #16]
 80023ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	2203      	movs	r2, #3
 80023fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002400:	43db      	mvns	r3, r3
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	4013      	ands	r3, r2
 8002406:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f003 0203 	and.w	r2, r3, #3
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	005b      	lsls	r3, r3, #1
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	693a      	ldr	r2, [r7, #16]
 800241a:	4313      	orrs	r3, r2
 800241c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	693a      	ldr	r2, [r7, #16]
 8002422:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800242c:	2b00      	cmp	r3, #0
 800242e:	f000 80ac 	beq.w	800258a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002432:	4b5f      	ldr	r3, [pc, #380]	; (80025b0 <HAL_GPIO_Init+0x330>)
 8002434:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002436:	4a5e      	ldr	r2, [pc, #376]	; (80025b0 <HAL_GPIO_Init+0x330>)
 8002438:	f043 0301 	orr.w	r3, r3, #1
 800243c:	6613      	str	r3, [r2, #96]	; 0x60
 800243e:	4b5c      	ldr	r3, [pc, #368]	; (80025b0 <HAL_GPIO_Init+0x330>)
 8002440:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	60bb      	str	r3, [r7, #8]
 8002448:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800244a:	4a5a      	ldr	r2, [pc, #360]	; (80025b4 <HAL_GPIO_Init+0x334>)
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	089b      	lsrs	r3, r3, #2
 8002450:	3302      	adds	r3, #2
 8002452:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002456:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	f003 0303 	and.w	r3, r3, #3
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	220f      	movs	r2, #15
 8002462:	fa02 f303 	lsl.w	r3, r2, r3
 8002466:	43db      	mvns	r3, r3
 8002468:	693a      	ldr	r2, [r7, #16]
 800246a:	4013      	ands	r3, r2
 800246c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002474:	d025      	beq.n	80024c2 <HAL_GPIO_Init+0x242>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a4f      	ldr	r2, [pc, #316]	; (80025b8 <HAL_GPIO_Init+0x338>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d01f      	beq.n	80024be <HAL_GPIO_Init+0x23e>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a4e      	ldr	r2, [pc, #312]	; (80025bc <HAL_GPIO_Init+0x33c>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d019      	beq.n	80024ba <HAL_GPIO_Init+0x23a>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a4d      	ldr	r2, [pc, #308]	; (80025c0 <HAL_GPIO_Init+0x340>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d013      	beq.n	80024b6 <HAL_GPIO_Init+0x236>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a4c      	ldr	r2, [pc, #304]	; (80025c4 <HAL_GPIO_Init+0x344>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d00d      	beq.n	80024b2 <HAL_GPIO_Init+0x232>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a4b      	ldr	r2, [pc, #300]	; (80025c8 <HAL_GPIO_Init+0x348>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d007      	beq.n	80024ae <HAL_GPIO_Init+0x22e>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a4a      	ldr	r2, [pc, #296]	; (80025cc <HAL_GPIO_Init+0x34c>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d101      	bne.n	80024aa <HAL_GPIO_Init+0x22a>
 80024a6:	2306      	movs	r3, #6
 80024a8:	e00c      	b.n	80024c4 <HAL_GPIO_Init+0x244>
 80024aa:	2307      	movs	r3, #7
 80024ac:	e00a      	b.n	80024c4 <HAL_GPIO_Init+0x244>
 80024ae:	2305      	movs	r3, #5
 80024b0:	e008      	b.n	80024c4 <HAL_GPIO_Init+0x244>
 80024b2:	2304      	movs	r3, #4
 80024b4:	e006      	b.n	80024c4 <HAL_GPIO_Init+0x244>
 80024b6:	2303      	movs	r3, #3
 80024b8:	e004      	b.n	80024c4 <HAL_GPIO_Init+0x244>
 80024ba:	2302      	movs	r3, #2
 80024bc:	e002      	b.n	80024c4 <HAL_GPIO_Init+0x244>
 80024be:	2301      	movs	r3, #1
 80024c0:	e000      	b.n	80024c4 <HAL_GPIO_Init+0x244>
 80024c2:	2300      	movs	r3, #0
 80024c4:	697a      	ldr	r2, [r7, #20]
 80024c6:	f002 0203 	and.w	r2, r2, #3
 80024ca:	0092      	lsls	r2, r2, #2
 80024cc:	4093      	lsls	r3, r2
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80024d4:	4937      	ldr	r1, [pc, #220]	; (80025b4 <HAL_GPIO_Init+0x334>)
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	089b      	lsrs	r3, r3, #2
 80024da:	3302      	adds	r3, #2
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024e2:	4b3b      	ldr	r3, [pc, #236]	; (80025d0 <HAL_GPIO_Init+0x350>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	43db      	mvns	r3, r3
 80024ec:	693a      	ldr	r2, [r7, #16]
 80024ee:	4013      	ands	r3, r2
 80024f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d003      	beq.n	8002506 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	4313      	orrs	r3, r2
 8002504:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002506:	4a32      	ldr	r2, [pc, #200]	; (80025d0 <HAL_GPIO_Init+0x350>)
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800250c:	4b30      	ldr	r3, [pc, #192]	; (80025d0 <HAL_GPIO_Init+0x350>)
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	43db      	mvns	r3, r3
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	4013      	ands	r3, r2
 800251a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d003      	beq.n	8002530 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002528:	693a      	ldr	r2, [r7, #16]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	4313      	orrs	r3, r2
 800252e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002530:	4a27      	ldr	r2, [pc, #156]	; (80025d0 <HAL_GPIO_Init+0x350>)
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002536:	4b26      	ldr	r3, [pc, #152]	; (80025d0 <HAL_GPIO_Init+0x350>)
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	43db      	mvns	r3, r3
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	4013      	ands	r3, r2
 8002544:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d003      	beq.n	800255a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002552:	693a      	ldr	r2, [r7, #16]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	4313      	orrs	r3, r2
 8002558:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800255a:	4a1d      	ldr	r2, [pc, #116]	; (80025d0 <HAL_GPIO_Init+0x350>)
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002560:	4b1b      	ldr	r3, [pc, #108]	; (80025d0 <HAL_GPIO_Init+0x350>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	43db      	mvns	r3, r3
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	4013      	ands	r3, r2
 800256e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d003      	beq.n	8002584 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800257c:	693a      	ldr	r2, [r7, #16]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	4313      	orrs	r3, r2
 8002582:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002584:	4a12      	ldr	r2, [pc, #72]	; (80025d0 <HAL_GPIO_Init+0x350>)
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	3301      	adds	r3, #1
 800258e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	fa22 f303 	lsr.w	r3, r2, r3
 800259a:	2b00      	cmp	r3, #0
 800259c:	f47f ae78 	bne.w	8002290 <HAL_GPIO_Init+0x10>
  }
}
 80025a0:	bf00      	nop
 80025a2:	bf00      	nop
 80025a4:	371c      	adds	r7, #28
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	40021000 	.word	0x40021000
 80025b4:	40010000 	.word	0x40010000
 80025b8:	48000400 	.word	0x48000400
 80025bc:	48000800 	.word	0x48000800
 80025c0:	48000c00 	.word	0x48000c00
 80025c4:	48001000 	.word	0x48001000
 80025c8:	48001400 	.word	0x48001400
 80025cc:	48001800 	.word	0x48001800
 80025d0:	40010400 	.word	0x40010400

080025d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	460b      	mov	r3, r1
 80025de:	807b      	strh	r3, [r7, #2]
 80025e0:	4613      	mov	r3, r2
 80025e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025e4:	787b      	ldrb	r3, [r7, #1]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d003      	beq.n	80025f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025ea:	887a      	ldrh	r2, [r7, #2]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025f0:	e002      	b.n	80025f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025f2:	887a      	ldrh	r2, [r7, #2]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80025f8:	bf00      	nop
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d101      	bne.n	8002616 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e08d      	b.n	8002732 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b00      	cmp	r3, #0
 8002620:	d106      	bne.n	8002630 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f7ff f980 	bl	8001930 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2224      	movs	r2, #36	; 0x24
 8002634:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f022 0201 	bic.w	r2, r2, #1
 8002646:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685a      	ldr	r2, [r3, #4]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002654:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	689a      	ldr	r2, [r3, #8]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002664:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d107      	bne.n	800267e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	689a      	ldr	r2, [r3, #8]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800267a:	609a      	str	r2, [r3, #8]
 800267c:	e006      	b.n	800268c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	689a      	ldr	r2, [r3, #8]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800268a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	2b02      	cmp	r3, #2
 8002692:	d108      	bne.n	80026a6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	685a      	ldr	r2, [r3, #4]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026a2:	605a      	str	r2, [r3, #4]
 80026a4:	e007      	b.n	80026b6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	685a      	ldr	r2, [r3, #4]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026b4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	6812      	ldr	r2, [r2, #0]
 80026c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026c8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68da      	ldr	r2, [r3, #12]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026d8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	691a      	ldr	r2, [r3, #16]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	695b      	ldr	r3, [r3, #20]
 80026e2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	430a      	orrs	r2, r1
 80026f2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	69d9      	ldr	r1, [r3, #28]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a1a      	ldr	r2, [r3, #32]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	430a      	orrs	r2, r1
 8002702:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f042 0201 	orr.w	r2, r2, #1
 8002712:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2220      	movs	r2, #32
 800271e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
	...

0800273c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b088      	sub	sp, #32
 8002740:	af02      	add	r7, sp, #8
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	4608      	mov	r0, r1
 8002746:	4611      	mov	r1, r2
 8002748:	461a      	mov	r2, r3
 800274a:	4603      	mov	r3, r0
 800274c:	817b      	strh	r3, [r7, #10]
 800274e:	460b      	mov	r3, r1
 8002750:	813b      	strh	r3, [r7, #8]
 8002752:	4613      	mov	r3, r2
 8002754:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b20      	cmp	r3, #32
 8002760:	f040 80f9 	bne.w	8002956 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002764:	6a3b      	ldr	r3, [r7, #32]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d002      	beq.n	8002770 <HAL_I2C_Mem_Write+0x34>
 800276a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800276c:	2b00      	cmp	r3, #0
 800276e:	d105      	bne.n	800277c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002776:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e0ed      	b.n	8002958 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002782:	2b01      	cmp	r3, #1
 8002784:	d101      	bne.n	800278a <HAL_I2C_Mem_Write+0x4e>
 8002786:	2302      	movs	r3, #2
 8002788:	e0e6      	b.n	8002958 <HAL_I2C_Mem_Write+0x21c>
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2201      	movs	r2, #1
 800278e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002792:	f7ff facb 	bl	8001d2c <HAL_GetTick>
 8002796:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	9300      	str	r3, [sp, #0]
 800279c:	2319      	movs	r3, #25
 800279e:	2201      	movs	r2, #1
 80027a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027a4:	68f8      	ldr	r0, [r7, #12]
 80027a6:	f000 fac3 	bl	8002d30 <I2C_WaitOnFlagUntilTimeout>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d001      	beq.n	80027b4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e0d1      	b.n	8002958 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2221      	movs	r2, #33	; 0x21
 80027b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2240      	movs	r2, #64	; 0x40
 80027c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2200      	movs	r2, #0
 80027c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6a3a      	ldr	r2, [r7, #32]
 80027ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80027d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2200      	movs	r2, #0
 80027da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80027dc:	88f8      	ldrh	r0, [r7, #6]
 80027de:	893a      	ldrh	r2, [r7, #8]
 80027e0:	8979      	ldrh	r1, [r7, #10]
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	9301      	str	r3, [sp, #4]
 80027e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e8:	9300      	str	r3, [sp, #0]
 80027ea:	4603      	mov	r3, r0
 80027ec:	68f8      	ldr	r0, [r7, #12]
 80027ee:	f000 f9d3 	bl	8002b98 <I2C_RequestMemoryWrite>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d005      	beq.n	8002804 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e0a9      	b.n	8002958 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002808:	b29b      	uxth	r3, r3
 800280a:	2bff      	cmp	r3, #255	; 0xff
 800280c:	d90e      	bls.n	800282c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	22ff      	movs	r2, #255	; 0xff
 8002812:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002818:	b2da      	uxtb	r2, r3
 800281a:	8979      	ldrh	r1, [r7, #10]
 800281c:	2300      	movs	r3, #0
 800281e:	9300      	str	r3, [sp, #0]
 8002820:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002824:	68f8      	ldr	r0, [r7, #12]
 8002826:	f000 fc3d 	bl	80030a4 <I2C_TransferConfig>
 800282a:	e00f      	b.n	800284c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002830:	b29a      	uxth	r2, r3
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800283a:	b2da      	uxtb	r2, r3
 800283c:	8979      	ldrh	r1, [r7, #10]
 800283e:	2300      	movs	r3, #0
 8002840:	9300      	str	r3, [sp, #0]
 8002842:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	f000 fc2c 	bl	80030a4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800284c:	697a      	ldr	r2, [r7, #20]
 800284e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002850:	68f8      	ldr	r0, [r7, #12]
 8002852:	f000 fabc 	bl	8002dce <I2C_WaitOnTXISFlagUntilTimeout>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d001      	beq.n	8002860 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e07b      	b.n	8002958 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002864:	781a      	ldrb	r2, [r3, #0]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002870:	1c5a      	adds	r2, r3, #1
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800287a:	b29b      	uxth	r3, r3
 800287c:	3b01      	subs	r3, #1
 800287e:	b29a      	uxth	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002888:	3b01      	subs	r3, #1
 800288a:	b29a      	uxth	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002894:	b29b      	uxth	r3, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d034      	beq.n	8002904 <HAL_I2C_Mem_Write+0x1c8>
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d130      	bne.n	8002904 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	9300      	str	r3, [sp, #0]
 80028a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a8:	2200      	movs	r2, #0
 80028aa:	2180      	movs	r1, #128	; 0x80
 80028ac:	68f8      	ldr	r0, [r7, #12]
 80028ae:	f000 fa3f 	bl	8002d30 <I2C_WaitOnFlagUntilTimeout>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d001      	beq.n	80028bc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e04d      	b.n	8002958 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	2bff      	cmp	r3, #255	; 0xff
 80028c4:	d90e      	bls.n	80028e4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	22ff      	movs	r2, #255	; 0xff
 80028ca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d0:	b2da      	uxtb	r2, r3
 80028d2:	8979      	ldrh	r1, [r7, #10]
 80028d4:	2300      	movs	r3, #0
 80028d6:	9300      	str	r3, [sp, #0]
 80028d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028dc:	68f8      	ldr	r0, [r7, #12]
 80028de:	f000 fbe1 	bl	80030a4 <I2C_TransferConfig>
 80028e2:	e00f      	b.n	8002904 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e8:	b29a      	uxth	r2, r3
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f2:	b2da      	uxtb	r2, r3
 80028f4:	8979      	ldrh	r1, [r7, #10]
 80028f6:	2300      	movs	r3, #0
 80028f8:	9300      	str	r3, [sp, #0]
 80028fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028fe:	68f8      	ldr	r0, [r7, #12]
 8002900:	f000 fbd0 	bl	80030a4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002908:	b29b      	uxth	r3, r3
 800290a:	2b00      	cmp	r3, #0
 800290c:	d19e      	bne.n	800284c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800290e:	697a      	ldr	r2, [r7, #20]
 8002910:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002912:	68f8      	ldr	r0, [r7, #12]
 8002914:	f000 faa2 	bl	8002e5c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e01a      	b.n	8002958 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2220      	movs	r2, #32
 8002928:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	6859      	ldr	r1, [r3, #4]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	4b0a      	ldr	r3, [pc, #40]	; (8002960 <HAL_I2C_Mem_Write+0x224>)
 8002936:	400b      	ands	r3, r1
 8002938:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2220      	movs	r2, #32
 800293e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002952:	2300      	movs	r3, #0
 8002954:	e000      	b.n	8002958 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002956:	2302      	movs	r3, #2
  }
}
 8002958:	4618      	mov	r0, r3
 800295a:	3718      	adds	r7, #24
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	fe00e800 	.word	0xfe00e800

08002964 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b088      	sub	sp, #32
 8002968:	af02      	add	r7, sp, #8
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	4608      	mov	r0, r1
 800296e:	4611      	mov	r1, r2
 8002970:	461a      	mov	r2, r3
 8002972:	4603      	mov	r3, r0
 8002974:	817b      	strh	r3, [r7, #10]
 8002976:	460b      	mov	r3, r1
 8002978:	813b      	strh	r3, [r7, #8]
 800297a:	4613      	mov	r3, r2
 800297c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002984:	b2db      	uxtb	r3, r3
 8002986:	2b20      	cmp	r3, #32
 8002988:	f040 80fd 	bne.w	8002b86 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800298c:	6a3b      	ldr	r3, [r7, #32]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d002      	beq.n	8002998 <HAL_I2C_Mem_Read+0x34>
 8002992:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002994:	2b00      	cmp	r3, #0
 8002996:	d105      	bne.n	80029a4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800299e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e0f1      	b.n	8002b88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d101      	bne.n	80029b2 <HAL_I2C_Mem_Read+0x4e>
 80029ae:	2302      	movs	r3, #2
 80029b0:	e0ea      	b.n	8002b88 <HAL_I2C_Mem_Read+0x224>
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2201      	movs	r2, #1
 80029b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80029ba:	f7ff f9b7 	bl	8001d2c <HAL_GetTick>
 80029be:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	9300      	str	r3, [sp, #0]
 80029c4:	2319      	movs	r3, #25
 80029c6:	2201      	movs	r2, #1
 80029c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029cc:	68f8      	ldr	r0, [r7, #12]
 80029ce:	f000 f9af 	bl	8002d30 <I2C_WaitOnFlagUntilTimeout>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d001      	beq.n	80029dc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e0d5      	b.n	8002b88 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2222      	movs	r2, #34	; 0x22
 80029e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2240      	movs	r2, #64	; 0x40
 80029e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2200      	movs	r2, #0
 80029f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6a3a      	ldr	r2, [r7, #32]
 80029f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80029fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2200      	movs	r2, #0
 8002a02:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a04:	88f8      	ldrh	r0, [r7, #6]
 8002a06:	893a      	ldrh	r2, [r7, #8]
 8002a08:	8979      	ldrh	r1, [r7, #10]
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	9301      	str	r3, [sp, #4]
 8002a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a10:	9300      	str	r3, [sp, #0]
 8002a12:	4603      	mov	r3, r0
 8002a14:	68f8      	ldr	r0, [r7, #12]
 8002a16:	f000 f913 	bl	8002c40 <I2C_RequestMemoryRead>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d005      	beq.n	8002a2c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e0ad      	b.n	8002b88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	2bff      	cmp	r3, #255	; 0xff
 8002a34:	d90e      	bls.n	8002a54 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	22ff      	movs	r2, #255	; 0xff
 8002a3a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a40:	b2da      	uxtb	r2, r3
 8002a42:	8979      	ldrh	r1, [r7, #10]
 8002a44:	4b52      	ldr	r3, [pc, #328]	; (8002b90 <HAL_I2C_Mem_Read+0x22c>)
 8002a46:	9300      	str	r3, [sp, #0]
 8002a48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a4c:	68f8      	ldr	r0, [r7, #12]
 8002a4e:	f000 fb29 	bl	80030a4 <I2C_TransferConfig>
 8002a52:	e00f      	b.n	8002a74 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a58:	b29a      	uxth	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a62:	b2da      	uxtb	r2, r3
 8002a64:	8979      	ldrh	r1, [r7, #10]
 8002a66:	4b4a      	ldr	r3, [pc, #296]	; (8002b90 <HAL_I2C_Mem_Read+0x22c>)
 8002a68:	9300      	str	r3, [sp, #0]
 8002a6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a6e:	68f8      	ldr	r0, [r7, #12]
 8002a70:	f000 fb18 	bl	80030a4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	9300      	str	r3, [sp, #0]
 8002a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	2104      	movs	r1, #4
 8002a7e:	68f8      	ldr	r0, [r7, #12]
 8002a80:	f000 f956 	bl	8002d30 <I2C_WaitOnFlagUntilTimeout>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e07c      	b.n	8002b88 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a98:	b2d2      	uxtb	r2, r2
 8002a9a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa0:	1c5a      	adds	r2, r3, #1
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	b29a      	uxth	r2, r3
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d034      	beq.n	8002b34 <HAL_I2C_Mem_Read+0x1d0>
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d130      	bne.n	8002b34 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	9300      	str	r3, [sp, #0]
 8002ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad8:	2200      	movs	r2, #0
 8002ada:	2180      	movs	r1, #128	; 0x80
 8002adc:	68f8      	ldr	r0, [r7, #12]
 8002ade:	f000 f927 	bl	8002d30 <I2C_WaitOnFlagUntilTimeout>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d001      	beq.n	8002aec <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e04d      	b.n	8002b88 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	2bff      	cmp	r3, #255	; 0xff
 8002af4:	d90e      	bls.n	8002b14 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	22ff      	movs	r2, #255	; 0xff
 8002afa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b00:	b2da      	uxtb	r2, r3
 8002b02:	8979      	ldrh	r1, [r7, #10]
 8002b04:	2300      	movs	r3, #0
 8002b06:	9300      	str	r3, [sp, #0]
 8002b08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b0c:	68f8      	ldr	r0, [r7, #12]
 8002b0e:	f000 fac9 	bl	80030a4 <I2C_TransferConfig>
 8002b12:	e00f      	b.n	8002b34 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b18:	b29a      	uxth	r2, r3
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b22:	b2da      	uxtb	r2, r3
 8002b24:	8979      	ldrh	r1, [r7, #10]
 8002b26:	2300      	movs	r3, #0
 8002b28:	9300      	str	r3, [sp, #0]
 8002b2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f000 fab8 	bl	80030a4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d19a      	bne.n	8002a74 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b3e:	697a      	ldr	r2, [r7, #20]
 8002b40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b42:	68f8      	ldr	r0, [r7, #12]
 8002b44:	f000 f98a 	bl	8002e5c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d001      	beq.n	8002b52 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e01a      	b.n	8002b88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2220      	movs	r2, #32
 8002b58:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	6859      	ldr	r1, [r3, #4]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	4b0b      	ldr	r3, [pc, #44]	; (8002b94 <HAL_I2C_Mem_Read+0x230>)
 8002b66:	400b      	ands	r3, r1
 8002b68:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2220      	movs	r2, #32
 8002b6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b82:	2300      	movs	r3, #0
 8002b84:	e000      	b.n	8002b88 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002b86:	2302      	movs	r3, #2
  }
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3718      	adds	r7, #24
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	80002400 	.word	0x80002400
 8002b94:	fe00e800 	.word	0xfe00e800

08002b98 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b086      	sub	sp, #24
 8002b9c:	af02      	add	r7, sp, #8
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	4608      	mov	r0, r1
 8002ba2:	4611      	mov	r1, r2
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	817b      	strh	r3, [r7, #10]
 8002baa:	460b      	mov	r3, r1
 8002bac:	813b      	strh	r3, [r7, #8]
 8002bae:	4613      	mov	r3, r2
 8002bb0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002bb2:	88fb      	ldrh	r3, [r7, #6]
 8002bb4:	b2da      	uxtb	r2, r3
 8002bb6:	8979      	ldrh	r1, [r7, #10]
 8002bb8:	4b20      	ldr	r3, [pc, #128]	; (8002c3c <I2C_RequestMemoryWrite+0xa4>)
 8002bba:	9300      	str	r3, [sp, #0]
 8002bbc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002bc0:	68f8      	ldr	r0, [r7, #12]
 8002bc2:	f000 fa6f 	bl	80030a4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bc6:	69fa      	ldr	r2, [r7, #28]
 8002bc8:	69b9      	ldr	r1, [r7, #24]
 8002bca:	68f8      	ldr	r0, [r7, #12]
 8002bcc:	f000 f8ff 	bl	8002dce <I2C_WaitOnTXISFlagUntilTimeout>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d001      	beq.n	8002bda <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e02c      	b.n	8002c34 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002bda:	88fb      	ldrh	r3, [r7, #6]
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d105      	bne.n	8002bec <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002be0:	893b      	ldrh	r3, [r7, #8]
 8002be2:	b2da      	uxtb	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	629a      	str	r2, [r3, #40]	; 0x28
 8002bea:	e015      	b.n	8002c18 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002bec:	893b      	ldrh	r3, [r7, #8]
 8002bee:	0a1b      	lsrs	r3, r3, #8
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	b2da      	uxtb	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bfa:	69fa      	ldr	r2, [r7, #28]
 8002bfc:	69b9      	ldr	r1, [r7, #24]
 8002bfe:	68f8      	ldr	r0, [r7, #12]
 8002c00:	f000 f8e5 	bl	8002dce <I2C_WaitOnTXISFlagUntilTimeout>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d001      	beq.n	8002c0e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e012      	b.n	8002c34 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c0e:	893b      	ldrh	r3, [r7, #8]
 8002c10:	b2da      	uxtb	r2, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	9300      	str	r3, [sp, #0]
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	2180      	movs	r1, #128	; 0x80
 8002c22:	68f8      	ldr	r0, [r7, #12]
 8002c24:	f000 f884 	bl	8002d30 <I2C_WaitOnFlagUntilTimeout>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e000      	b.n	8002c34 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3710      	adds	r7, #16
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	80002000 	.word	0x80002000

08002c40 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b086      	sub	sp, #24
 8002c44:	af02      	add	r7, sp, #8
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	4608      	mov	r0, r1
 8002c4a:	4611      	mov	r1, r2
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	4603      	mov	r3, r0
 8002c50:	817b      	strh	r3, [r7, #10]
 8002c52:	460b      	mov	r3, r1
 8002c54:	813b      	strh	r3, [r7, #8]
 8002c56:	4613      	mov	r3, r2
 8002c58:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002c5a:	88fb      	ldrh	r3, [r7, #6]
 8002c5c:	b2da      	uxtb	r2, r3
 8002c5e:	8979      	ldrh	r1, [r7, #10]
 8002c60:	4b20      	ldr	r3, [pc, #128]	; (8002ce4 <I2C_RequestMemoryRead+0xa4>)
 8002c62:	9300      	str	r3, [sp, #0]
 8002c64:	2300      	movs	r3, #0
 8002c66:	68f8      	ldr	r0, [r7, #12]
 8002c68:	f000 fa1c 	bl	80030a4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c6c:	69fa      	ldr	r2, [r7, #28]
 8002c6e:	69b9      	ldr	r1, [r7, #24]
 8002c70:	68f8      	ldr	r0, [r7, #12]
 8002c72:	f000 f8ac 	bl	8002dce <I2C_WaitOnTXISFlagUntilTimeout>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d001      	beq.n	8002c80 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e02c      	b.n	8002cda <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c80:	88fb      	ldrh	r3, [r7, #6]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d105      	bne.n	8002c92 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c86:	893b      	ldrh	r3, [r7, #8]
 8002c88:	b2da      	uxtb	r2, r3
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	629a      	str	r2, [r3, #40]	; 0x28
 8002c90:	e015      	b.n	8002cbe <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002c92:	893b      	ldrh	r3, [r7, #8]
 8002c94:	0a1b      	lsrs	r3, r3, #8
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	b2da      	uxtb	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ca0:	69fa      	ldr	r2, [r7, #28]
 8002ca2:	69b9      	ldr	r1, [r7, #24]
 8002ca4:	68f8      	ldr	r0, [r7, #12]
 8002ca6:	f000 f892 	bl	8002dce <I2C_WaitOnTXISFlagUntilTimeout>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d001      	beq.n	8002cb4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e012      	b.n	8002cda <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002cb4:	893b      	ldrh	r3, [r7, #8]
 8002cb6:	b2da      	uxtb	r2, r3
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	9300      	str	r3, [sp, #0]
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	2140      	movs	r1, #64	; 0x40
 8002cc8:	68f8      	ldr	r0, [r7, #12]
 8002cca:	f000 f831 	bl	8002d30 <I2C_WaitOnFlagUntilTimeout>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d001      	beq.n	8002cd8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e000      	b.n	8002cda <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	80002000 	.word	0x80002000

08002ce8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	699b      	ldr	r3, [r3, #24]
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d103      	bne.n	8002d06 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2200      	movs	r2, #0
 8002d04:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	699b      	ldr	r3, [r3, #24]
 8002d0c:	f003 0301 	and.w	r3, r3, #1
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d007      	beq.n	8002d24 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	699a      	ldr	r2, [r3, #24]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f042 0201 	orr.w	r2, r2, #1
 8002d22:	619a      	str	r2, [r3, #24]
  }
}
 8002d24:	bf00      	nop
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	603b      	str	r3, [r7, #0]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d40:	e031      	b.n	8002da6 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d48:	d02d      	beq.n	8002da6 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d4a:	f7fe ffef 	bl	8001d2c <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d302      	bcc.n	8002d60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d122      	bne.n	8002da6 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	699a      	ldr	r2, [r3, #24]
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	4013      	ands	r3, r2
 8002d6a:	68ba      	ldr	r2, [r7, #8]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	bf0c      	ite	eq
 8002d70:	2301      	moveq	r3, #1
 8002d72:	2300      	movne	r3, #0
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	461a      	mov	r2, r3
 8002d78:	79fb      	ldrb	r3, [r7, #7]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d113      	bne.n	8002da6 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d82:	f043 0220 	orr.w	r2, r3, #32
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2220      	movs	r2, #32
 8002d8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e00f      	b.n	8002dc6 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	699a      	ldr	r2, [r3, #24]
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	4013      	ands	r3, r2
 8002db0:	68ba      	ldr	r2, [r7, #8]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	bf0c      	ite	eq
 8002db6:	2301      	moveq	r3, #1
 8002db8:	2300      	movne	r3, #0
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	79fb      	ldrb	r3, [r7, #7]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d0be      	beq.n	8002d42 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3710      	adds	r7, #16
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b084      	sub	sp, #16
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	60f8      	str	r0, [r7, #12]
 8002dd6:	60b9      	str	r1, [r7, #8]
 8002dd8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002dda:	e033      	b.n	8002e44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	68b9      	ldr	r1, [r7, #8]
 8002de0:	68f8      	ldr	r0, [r7, #12]
 8002de2:	f000 f87f 	bl	8002ee4 <I2C_IsErrorOccurred>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d001      	beq.n	8002df0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e031      	b.n	8002e54 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002df6:	d025      	beq.n	8002e44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002df8:	f7fe ff98 	bl	8001d2c <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	68ba      	ldr	r2, [r7, #8]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d302      	bcc.n	8002e0e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d11a      	bne.n	8002e44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d013      	beq.n	8002e44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e20:	f043 0220 	orr.w	r2, r3, #32
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2220      	movs	r2, #32
 8002e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e007      	b.n	8002e54 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d1c4      	bne.n	8002ddc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e52:	2300      	movs	r3, #0
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3710      	adds	r7, #16
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e68:	e02f      	b.n	8002eca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	68b9      	ldr	r1, [r7, #8]
 8002e6e:	68f8      	ldr	r0, [r7, #12]
 8002e70:	f000 f838 	bl	8002ee4 <I2C_IsErrorOccurred>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e02d      	b.n	8002eda <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e7e:	f7fe ff55 	bl	8001d2c <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	68ba      	ldr	r2, [r7, #8]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d302      	bcc.n	8002e94 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d11a      	bne.n	8002eca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	f003 0320 	and.w	r3, r3, #32
 8002e9e:	2b20      	cmp	r3, #32
 8002ea0:	d013      	beq.n	8002eca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea6:	f043 0220 	orr.w	r2, r3, #32
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2220      	movs	r2, #32
 8002eb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e007      	b.n	8002eda <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	699b      	ldr	r3, [r3, #24]
 8002ed0:	f003 0320 	and.w	r3, r3, #32
 8002ed4:	2b20      	cmp	r3, #32
 8002ed6:	d1c8      	bne.n	8002e6a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3710      	adds	r7, #16
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
	...

08002ee4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b08a      	sub	sp, #40	; 0x28
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002efe:	2300      	movs	r3, #0
 8002f00:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	f003 0310 	and.w	r3, r3, #16
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d068      	beq.n	8002fe2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2210      	movs	r2, #16
 8002f16:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002f18:	e049      	b.n	8002fae <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f20:	d045      	beq.n	8002fae <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f22:	f7fe ff03 	bl	8001d2c <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	68ba      	ldr	r2, [r7, #8]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d302      	bcc.n	8002f38 <I2C_IsErrorOccurred+0x54>
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d13a      	bne.n	8002fae <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f42:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f4a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f5a:	d121      	bne.n	8002fa0 <I2C_IsErrorOccurred+0xbc>
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f62:	d01d      	beq.n	8002fa0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002f64:	7cfb      	ldrb	r3, [r7, #19]
 8002f66:	2b20      	cmp	r3, #32
 8002f68:	d01a      	beq.n	8002fa0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	685a      	ldr	r2, [r3, #4]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f78:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002f7a:	f7fe fed7 	bl	8001d2c <HAL_GetTick>
 8002f7e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f80:	e00e      	b.n	8002fa0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002f82:	f7fe fed3 	bl	8001d2c <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	2b19      	cmp	r3, #25
 8002f8e:	d907      	bls.n	8002fa0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002f90:	6a3b      	ldr	r3, [r7, #32]
 8002f92:	f043 0320 	orr.w	r3, r3, #32
 8002f96:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002f9e:	e006      	b.n	8002fae <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	f003 0320 	and.w	r3, r3, #32
 8002faa:	2b20      	cmp	r3, #32
 8002fac:	d1e9      	bne.n	8002f82 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	699b      	ldr	r3, [r3, #24]
 8002fb4:	f003 0320 	and.w	r3, r3, #32
 8002fb8:	2b20      	cmp	r3, #32
 8002fba:	d003      	beq.n	8002fc4 <I2C_IsErrorOccurred+0xe0>
 8002fbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d0aa      	beq.n	8002f1a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002fc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d103      	bne.n	8002fd4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2220      	movs	r2, #32
 8002fd2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002fd4:	6a3b      	ldr	r3, [r7, #32]
 8002fd6:	f043 0304 	orr.w	r3, r3, #4
 8002fda:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	699b      	ldr	r3, [r3, #24]
 8002fe8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d00b      	beq.n	800300c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002ff4:	6a3b      	ldr	r3, [r7, #32]
 8002ff6:	f043 0301 	orr.w	r3, r3, #1
 8002ffa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003004:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00b      	beq.n	800302e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003016:	6a3b      	ldr	r3, [r7, #32]
 8003018:	f043 0308 	orr.w	r3, r3, #8
 800301c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003026:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003034:	2b00      	cmp	r3, #0
 8003036:	d00b      	beq.n	8003050 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003038:	6a3b      	ldr	r3, [r7, #32]
 800303a:	f043 0302 	orr.w	r3, r3, #2
 800303e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003048:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003050:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003054:	2b00      	cmp	r3, #0
 8003056:	d01c      	beq.n	8003092 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003058:	68f8      	ldr	r0, [r7, #12]
 800305a:	f7ff fe45 	bl	8002ce8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	6859      	ldr	r1, [r3, #4]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	4b0d      	ldr	r3, [pc, #52]	; (80030a0 <I2C_IsErrorOccurred+0x1bc>)
 800306a:	400b      	ands	r3, r1
 800306c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003072:	6a3b      	ldr	r3, [r7, #32]
 8003074:	431a      	orrs	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2220      	movs	r2, #32
 800307e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003092:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003096:	4618      	mov	r0, r3
 8003098:	3728      	adds	r7, #40	; 0x28
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	fe00e800 	.word	0xfe00e800

080030a4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b087      	sub	sp, #28
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	607b      	str	r3, [r7, #4]
 80030ae:	460b      	mov	r3, r1
 80030b0:	817b      	strh	r3, [r7, #10]
 80030b2:	4613      	mov	r3, r2
 80030b4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80030b6:	897b      	ldrh	r3, [r7, #10]
 80030b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80030bc:	7a7b      	ldrb	r3, [r7, #9]
 80030be:	041b      	lsls	r3, r3, #16
 80030c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80030c4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80030ca:	6a3b      	ldr	r3, [r7, #32]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80030d2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	6a3b      	ldr	r3, [r7, #32]
 80030dc:	0d5b      	lsrs	r3, r3, #21
 80030de:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80030e2:	4b08      	ldr	r3, [pc, #32]	; (8003104 <I2C_TransferConfig+0x60>)
 80030e4:	430b      	orrs	r3, r1
 80030e6:	43db      	mvns	r3, r3
 80030e8:	ea02 0103 	and.w	r1, r2, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	697a      	ldr	r2, [r7, #20]
 80030f2:	430a      	orrs	r2, r1
 80030f4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80030f6:	bf00      	nop
 80030f8:	371c      	adds	r7, #28
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	03ff63ff 	.word	0x03ff63ff

08003108 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b20      	cmp	r3, #32
 800311c:	d138      	bne.n	8003190 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003124:	2b01      	cmp	r3, #1
 8003126:	d101      	bne.n	800312c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003128:	2302      	movs	r3, #2
 800312a:	e032      	b.n	8003192 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2224      	movs	r2, #36	; 0x24
 8003138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f022 0201 	bic.w	r2, r2, #1
 800314a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800315a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	6819      	ldr	r1, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	683a      	ldr	r2, [r7, #0]
 8003168:	430a      	orrs	r2, r1
 800316a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f042 0201 	orr.w	r2, r2, #1
 800317a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2220      	movs	r2, #32
 8003180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800318c:	2300      	movs	r3, #0
 800318e:	e000      	b.n	8003192 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003190:	2302      	movs	r3, #2
  }
}
 8003192:	4618      	mov	r0, r3
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr

0800319e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800319e:	b480      	push	{r7}
 80031a0:	b085      	sub	sp, #20
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
 80031a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	2b20      	cmp	r3, #32
 80031b2:	d139      	bne.n	8003228 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d101      	bne.n	80031c2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80031be:	2302      	movs	r3, #2
 80031c0:	e033      	b.n	800322a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2224      	movs	r2, #36	; 0x24
 80031ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f022 0201 	bic.w	r2, r2, #1
 80031e0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80031f0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	021b      	lsls	r3, r3, #8
 80031f6:	68fa      	ldr	r2, [r7, #12]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f042 0201 	orr.w	r2, r2, #1
 8003212:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2220      	movs	r2, #32
 8003218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003224:	2300      	movs	r3, #0
 8003226:	e000      	b.n	800322a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003228:	2302      	movs	r3, #2
  }
}
 800322a:	4618      	mov	r0, r3
 800322c:	3714      	adds	r7, #20
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
	...

08003238 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003238:	b480      	push	{r7}
 800323a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800323c:	4b04      	ldr	r3, [pc, #16]	; (8003250 <HAL_PWREx_GetVoltageRange+0x18>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003244:	4618      	mov	r0, r3
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	40007000 	.word	0x40007000

08003254 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003254:	b480      	push	{r7}
 8003256:	b085      	sub	sp, #20
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003262:	d130      	bne.n	80032c6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003264:	4b23      	ldr	r3, [pc, #140]	; (80032f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800326c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003270:	d038      	beq.n	80032e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003272:	4b20      	ldr	r3, [pc, #128]	; (80032f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800327a:	4a1e      	ldr	r2, [pc, #120]	; (80032f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800327c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003280:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003282:	4b1d      	ldr	r3, [pc, #116]	; (80032f8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2232      	movs	r2, #50	; 0x32
 8003288:	fb02 f303 	mul.w	r3, r2, r3
 800328c:	4a1b      	ldr	r2, [pc, #108]	; (80032fc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800328e:	fba2 2303 	umull	r2, r3, r2, r3
 8003292:	0c9b      	lsrs	r3, r3, #18
 8003294:	3301      	adds	r3, #1
 8003296:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003298:	e002      	b.n	80032a0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	3b01      	subs	r3, #1
 800329e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032a0:	4b14      	ldr	r3, [pc, #80]	; (80032f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032a2:	695b      	ldr	r3, [r3, #20]
 80032a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032ac:	d102      	bne.n	80032b4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d1f2      	bne.n	800329a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032b4:	4b0f      	ldr	r3, [pc, #60]	; (80032f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032b6:	695b      	ldr	r3, [r3, #20]
 80032b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032c0:	d110      	bne.n	80032e4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e00f      	b.n	80032e6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80032c6:	4b0b      	ldr	r3, [pc, #44]	; (80032f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80032ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032d2:	d007      	beq.n	80032e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80032d4:	4b07      	ldr	r3, [pc, #28]	; (80032f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032dc:	4a05      	ldr	r2, [pc, #20]	; (80032f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032e2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3714      	adds	r7, #20
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	40007000 	.word	0x40007000
 80032f8:	20000000 	.word	0x20000000
 80032fc:	431bde83 	.word	0x431bde83

08003300 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b088      	sub	sp, #32
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d101      	bne.n	8003312 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e3ca      	b.n	8003aa8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003312:	4b97      	ldr	r3, [pc, #604]	; (8003570 <HAL_RCC_OscConfig+0x270>)
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f003 030c 	and.w	r3, r3, #12
 800331a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800331c:	4b94      	ldr	r3, [pc, #592]	; (8003570 <HAL_RCC_OscConfig+0x270>)
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	f003 0303 	and.w	r3, r3, #3
 8003324:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0310 	and.w	r3, r3, #16
 800332e:	2b00      	cmp	r3, #0
 8003330:	f000 80e4 	beq.w	80034fc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d007      	beq.n	800334a <HAL_RCC_OscConfig+0x4a>
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	2b0c      	cmp	r3, #12
 800333e:	f040 808b 	bne.w	8003458 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	2b01      	cmp	r3, #1
 8003346:	f040 8087 	bne.w	8003458 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800334a:	4b89      	ldr	r3, [pc, #548]	; (8003570 <HAL_RCC_OscConfig+0x270>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d005      	beq.n	8003362 <HAL_RCC_OscConfig+0x62>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d101      	bne.n	8003362 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e3a2      	b.n	8003aa8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a1a      	ldr	r2, [r3, #32]
 8003366:	4b82      	ldr	r3, [pc, #520]	; (8003570 <HAL_RCC_OscConfig+0x270>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0308 	and.w	r3, r3, #8
 800336e:	2b00      	cmp	r3, #0
 8003370:	d004      	beq.n	800337c <HAL_RCC_OscConfig+0x7c>
 8003372:	4b7f      	ldr	r3, [pc, #508]	; (8003570 <HAL_RCC_OscConfig+0x270>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800337a:	e005      	b.n	8003388 <HAL_RCC_OscConfig+0x88>
 800337c:	4b7c      	ldr	r3, [pc, #496]	; (8003570 <HAL_RCC_OscConfig+0x270>)
 800337e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003382:	091b      	lsrs	r3, r3, #4
 8003384:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003388:	4293      	cmp	r3, r2
 800338a:	d223      	bcs.n	80033d4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a1b      	ldr	r3, [r3, #32]
 8003390:	4618      	mov	r0, r3
 8003392:	f000 fd55 	bl	8003e40 <RCC_SetFlashLatencyFromMSIRange>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d001      	beq.n	80033a0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e383      	b.n	8003aa8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033a0:	4b73      	ldr	r3, [pc, #460]	; (8003570 <HAL_RCC_OscConfig+0x270>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a72      	ldr	r2, [pc, #456]	; (8003570 <HAL_RCC_OscConfig+0x270>)
 80033a6:	f043 0308 	orr.w	r3, r3, #8
 80033aa:	6013      	str	r3, [r2, #0]
 80033ac:	4b70      	ldr	r3, [pc, #448]	; (8003570 <HAL_RCC_OscConfig+0x270>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a1b      	ldr	r3, [r3, #32]
 80033b8:	496d      	ldr	r1, [pc, #436]	; (8003570 <HAL_RCC_OscConfig+0x270>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033be:	4b6c      	ldr	r3, [pc, #432]	; (8003570 <HAL_RCC_OscConfig+0x270>)
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	69db      	ldr	r3, [r3, #28]
 80033ca:	021b      	lsls	r3, r3, #8
 80033cc:	4968      	ldr	r1, [pc, #416]	; (8003570 <HAL_RCC_OscConfig+0x270>)
 80033ce:	4313      	orrs	r3, r2
 80033d0:	604b      	str	r3, [r1, #4]
 80033d2:	e025      	b.n	8003420 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033d4:	4b66      	ldr	r3, [pc, #408]	; (8003570 <HAL_RCC_OscConfig+0x270>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a65      	ldr	r2, [pc, #404]	; (8003570 <HAL_RCC_OscConfig+0x270>)
 80033da:	f043 0308 	orr.w	r3, r3, #8
 80033de:	6013      	str	r3, [r2, #0]
 80033e0:	4b63      	ldr	r3, [pc, #396]	; (8003570 <HAL_RCC_OscConfig+0x270>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a1b      	ldr	r3, [r3, #32]
 80033ec:	4960      	ldr	r1, [pc, #384]	; (8003570 <HAL_RCC_OscConfig+0x270>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033f2:	4b5f      	ldr	r3, [pc, #380]	; (8003570 <HAL_RCC_OscConfig+0x270>)
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	69db      	ldr	r3, [r3, #28]
 80033fe:	021b      	lsls	r3, r3, #8
 8003400:	495b      	ldr	r1, [pc, #364]	; (8003570 <HAL_RCC_OscConfig+0x270>)
 8003402:	4313      	orrs	r3, r2
 8003404:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d109      	bne.n	8003420 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a1b      	ldr	r3, [r3, #32]
 8003410:	4618      	mov	r0, r3
 8003412:	f000 fd15 	bl	8003e40 <RCC_SetFlashLatencyFromMSIRange>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d001      	beq.n	8003420 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e343      	b.n	8003aa8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003420:	f000 fc4a 	bl	8003cb8 <HAL_RCC_GetSysClockFreq>
 8003424:	4602      	mov	r2, r0
 8003426:	4b52      	ldr	r3, [pc, #328]	; (8003570 <HAL_RCC_OscConfig+0x270>)
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	091b      	lsrs	r3, r3, #4
 800342c:	f003 030f 	and.w	r3, r3, #15
 8003430:	4950      	ldr	r1, [pc, #320]	; (8003574 <HAL_RCC_OscConfig+0x274>)
 8003432:	5ccb      	ldrb	r3, [r1, r3]
 8003434:	f003 031f 	and.w	r3, r3, #31
 8003438:	fa22 f303 	lsr.w	r3, r2, r3
 800343c:	4a4e      	ldr	r2, [pc, #312]	; (8003578 <HAL_RCC_OscConfig+0x278>)
 800343e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003440:	4b4e      	ldr	r3, [pc, #312]	; (800357c <HAL_RCC_OscConfig+0x27c>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4618      	mov	r0, r3
 8003446:	f7fe fc21 	bl	8001c8c <HAL_InitTick>
 800344a:	4603      	mov	r3, r0
 800344c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800344e:	7bfb      	ldrb	r3, [r7, #15]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d052      	beq.n	80034fa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003454:	7bfb      	ldrb	r3, [r7, #15]
 8003456:	e327      	b.n	8003aa8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d032      	beq.n	80034c6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003460:	4b43      	ldr	r3, [pc, #268]	; (8003570 <HAL_RCC_OscConfig+0x270>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a42      	ldr	r2, [pc, #264]	; (8003570 <HAL_RCC_OscConfig+0x270>)
 8003466:	f043 0301 	orr.w	r3, r3, #1
 800346a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800346c:	f7fe fc5e 	bl	8001d2c <HAL_GetTick>
 8003470:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003472:	e008      	b.n	8003486 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003474:	f7fe fc5a 	bl	8001d2c <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b02      	cmp	r3, #2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e310      	b.n	8003aa8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003486:	4b3a      	ldr	r3, [pc, #232]	; (8003570 <HAL_RCC_OscConfig+0x270>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	2b00      	cmp	r3, #0
 8003490:	d0f0      	beq.n	8003474 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003492:	4b37      	ldr	r3, [pc, #220]	; (8003570 <HAL_RCC_OscConfig+0x270>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a36      	ldr	r2, [pc, #216]	; (8003570 <HAL_RCC_OscConfig+0x270>)
 8003498:	f043 0308 	orr.w	r3, r3, #8
 800349c:	6013      	str	r3, [r2, #0]
 800349e:	4b34      	ldr	r3, [pc, #208]	; (8003570 <HAL_RCC_OscConfig+0x270>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a1b      	ldr	r3, [r3, #32]
 80034aa:	4931      	ldr	r1, [pc, #196]	; (8003570 <HAL_RCC_OscConfig+0x270>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034b0:	4b2f      	ldr	r3, [pc, #188]	; (8003570 <HAL_RCC_OscConfig+0x270>)
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	69db      	ldr	r3, [r3, #28]
 80034bc:	021b      	lsls	r3, r3, #8
 80034be:	492c      	ldr	r1, [pc, #176]	; (8003570 <HAL_RCC_OscConfig+0x270>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	604b      	str	r3, [r1, #4]
 80034c4:	e01a      	b.n	80034fc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80034c6:	4b2a      	ldr	r3, [pc, #168]	; (8003570 <HAL_RCC_OscConfig+0x270>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a29      	ldr	r2, [pc, #164]	; (8003570 <HAL_RCC_OscConfig+0x270>)
 80034cc:	f023 0301 	bic.w	r3, r3, #1
 80034d0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034d2:	f7fe fc2b 	bl	8001d2c <HAL_GetTick>
 80034d6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80034d8:	e008      	b.n	80034ec <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034da:	f7fe fc27 	bl	8001d2c <HAL_GetTick>
 80034de:	4602      	mov	r2, r0
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d901      	bls.n	80034ec <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e2dd      	b.n	8003aa8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80034ec:	4b20      	ldr	r3, [pc, #128]	; (8003570 <HAL_RCC_OscConfig+0x270>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0302 	and.w	r3, r3, #2
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d1f0      	bne.n	80034da <HAL_RCC_OscConfig+0x1da>
 80034f8:	e000      	b.n	80034fc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80034fa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0301 	and.w	r3, r3, #1
 8003504:	2b00      	cmp	r3, #0
 8003506:	d074      	beq.n	80035f2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	2b08      	cmp	r3, #8
 800350c:	d005      	beq.n	800351a <HAL_RCC_OscConfig+0x21a>
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	2b0c      	cmp	r3, #12
 8003512:	d10e      	bne.n	8003532 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	2b03      	cmp	r3, #3
 8003518:	d10b      	bne.n	8003532 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800351a:	4b15      	ldr	r3, [pc, #84]	; (8003570 <HAL_RCC_OscConfig+0x270>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d064      	beq.n	80035f0 <HAL_RCC_OscConfig+0x2f0>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d160      	bne.n	80035f0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e2ba      	b.n	8003aa8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800353a:	d106      	bne.n	800354a <HAL_RCC_OscConfig+0x24a>
 800353c:	4b0c      	ldr	r3, [pc, #48]	; (8003570 <HAL_RCC_OscConfig+0x270>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a0b      	ldr	r2, [pc, #44]	; (8003570 <HAL_RCC_OscConfig+0x270>)
 8003542:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003546:	6013      	str	r3, [r2, #0]
 8003548:	e026      	b.n	8003598 <HAL_RCC_OscConfig+0x298>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003552:	d115      	bne.n	8003580 <HAL_RCC_OscConfig+0x280>
 8003554:	4b06      	ldr	r3, [pc, #24]	; (8003570 <HAL_RCC_OscConfig+0x270>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a05      	ldr	r2, [pc, #20]	; (8003570 <HAL_RCC_OscConfig+0x270>)
 800355a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800355e:	6013      	str	r3, [r2, #0]
 8003560:	4b03      	ldr	r3, [pc, #12]	; (8003570 <HAL_RCC_OscConfig+0x270>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a02      	ldr	r2, [pc, #8]	; (8003570 <HAL_RCC_OscConfig+0x270>)
 8003566:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800356a:	6013      	str	r3, [r2, #0]
 800356c:	e014      	b.n	8003598 <HAL_RCC_OscConfig+0x298>
 800356e:	bf00      	nop
 8003570:	40021000 	.word	0x40021000
 8003574:	08005d2c 	.word	0x08005d2c
 8003578:	20000000 	.word	0x20000000
 800357c:	20000004 	.word	0x20000004
 8003580:	4ba0      	ldr	r3, [pc, #640]	; (8003804 <HAL_RCC_OscConfig+0x504>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a9f      	ldr	r2, [pc, #636]	; (8003804 <HAL_RCC_OscConfig+0x504>)
 8003586:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800358a:	6013      	str	r3, [r2, #0]
 800358c:	4b9d      	ldr	r3, [pc, #628]	; (8003804 <HAL_RCC_OscConfig+0x504>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a9c      	ldr	r2, [pc, #624]	; (8003804 <HAL_RCC_OscConfig+0x504>)
 8003592:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003596:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d013      	beq.n	80035c8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a0:	f7fe fbc4 	bl	8001d2c <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035a6:	e008      	b.n	80035ba <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035a8:	f7fe fbc0 	bl	8001d2c <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b64      	cmp	r3, #100	; 0x64
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e276      	b.n	8003aa8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035ba:	4b92      	ldr	r3, [pc, #584]	; (8003804 <HAL_RCC_OscConfig+0x504>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d0f0      	beq.n	80035a8 <HAL_RCC_OscConfig+0x2a8>
 80035c6:	e014      	b.n	80035f2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c8:	f7fe fbb0 	bl	8001d2c <HAL_GetTick>
 80035cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035ce:	e008      	b.n	80035e2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035d0:	f7fe fbac 	bl	8001d2c <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b64      	cmp	r3, #100	; 0x64
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e262      	b.n	8003aa8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035e2:	4b88      	ldr	r3, [pc, #544]	; (8003804 <HAL_RCC_OscConfig+0x504>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d1f0      	bne.n	80035d0 <HAL_RCC_OscConfig+0x2d0>
 80035ee:	e000      	b.n	80035f2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0302 	and.w	r3, r3, #2
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d060      	beq.n	80036c0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	2b04      	cmp	r3, #4
 8003602:	d005      	beq.n	8003610 <HAL_RCC_OscConfig+0x310>
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	2b0c      	cmp	r3, #12
 8003608:	d119      	bne.n	800363e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	2b02      	cmp	r3, #2
 800360e:	d116      	bne.n	800363e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003610:	4b7c      	ldr	r3, [pc, #496]	; (8003804 <HAL_RCC_OscConfig+0x504>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003618:	2b00      	cmp	r3, #0
 800361a:	d005      	beq.n	8003628 <HAL_RCC_OscConfig+0x328>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d101      	bne.n	8003628 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e23f      	b.n	8003aa8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003628:	4b76      	ldr	r3, [pc, #472]	; (8003804 <HAL_RCC_OscConfig+0x504>)
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	691b      	ldr	r3, [r3, #16]
 8003634:	061b      	lsls	r3, r3, #24
 8003636:	4973      	ldr	r1, [pc, #460]	; (8003804 <HAL_RCC_OscConfig+0x504>)
 8003638:	4313      	orrs	r3, r2
 800363a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800363c:	e040      	b.n	80036c0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d023      	beq.n	800368e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003646:	4b6f      	ldr	r3, [pc, #444]	; (8003804 <HAL_RCC_OscConfig+0x504>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a6e      	ldr	r2, [pc, #440]	; (8003804 <HAL_RCC_OscConfig+0x504>)
 800364c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003650:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003652:	f7fe fb6b 	bl	8001d2c <HAL_GetTick>
 8003656:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003658:	e008      	b.n	800366c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800365a:	f7fe fb67 	bl	8001d2c <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	2b02      	cmp	r3, #2
 8003666:	d901      	bls.n	800366c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e21d      	b.n	8003aa8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800366c:	4b65      	ldr	r3, [pc, #404]	; (8003804 <HAL_RCC_OscConfig+0x504>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003674:	2b00      	cmp	r3, #0
 8003676:	d0f0      	beq.n	800365a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003678:	4b62      	ldr	r3, [pc, #392]	; (8003804 <HAL_RCC_OscConfig+0x504>)
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	691b      	ldr	r3, [r3, #16]
 8003684:	061b      	lsls	r3, r3, #24
 8003686:	495f      	ldr	r1, [pc, #380]	; (8003804 <HAL_RCC_OscConfig+0x504>)
 8003688:	4313      	orrs	r3, r2
 800368a:	604b      	str	r3, [r1, #4]
 800368c:	e018      	b.n	80036c0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800368e:	4b5d      	ldr	r3, [pc, #372]	; (8003804 <HAL_RCC_OscConfig+0x504>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a5c      	ldr	r2, [pc, #368]	; (8003804 <HAL_RCC_OscConfig+0x504>)
 8003694:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003698:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800369a:	f7fe fb47 	bl	8001d2c <HAL_GetTick>
 800369e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036a0:	e008      	b.n	80036b4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036a2:	f7fe fb43 	bl	8001d2c <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d901      	bls.n	80036b4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e1f9      	b.n	8003aa8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036b4:	4b53      	ldr	r3, [pc, #332]	; (8003804 <HAL_RCC_OscConfig+0x504>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d1f0      	bne.n	80036a2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0308 	and.w	r3, r3, #8
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d03c      	beq.n	8003746 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	695b      	ldr	r3, [r3, #20]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d01c      	beq.n	800370e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036d4:	4b4b      	ldr	r3, [pc, #300]	; (8003804 <HAL_RCC_OscConfig+0x504>)
 80036d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036da:	4a4a      	ldr	r2, [pc, #296]	; (8003804 <HAL_RCC_OscConfig+0x504>)
 80036dc:	f043 0301 	orr.w	r3, r3, #1
 80036e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e4:	f7fe fb22 	bl	8001d2c <HAL_GetTick>
 80036e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036ea:	e008      	b.n	80036fe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036ec:	f7fe fb1e 	bl	8001d2c <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e1d4      	b.n	8003aa8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036fe:	4b41      	ldr	r3, [pc, #260]	; (8003804 <HAL_RCC_OscConfig+0x504>)
 8003700:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003704:	f003 0302 	and.w	r3, r3, #2
 8003708:	2b00      	cmp	r3, #0
 800370a:	d0ef      	beq.n	80036ec <HAL_RCC_OscConfig+0x3ec>
 800370c:	e01b      	b.n	8003746 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800370e:	4b3d      	ldr	r3, [pc, #244]	; (8003804 <HAL_RCC_OscConfig+0x504>)
 8003710:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003714:	4a3b      	ldr	r2, [pc, #236]	; (8003804 <HAL_RCC_OscConfig+0x504>)
 8003716:	f023 0301 	bic.w	r3, r3, #1
 800371a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800371e:	f7fe fb05 	bl	8001d2c <HAL_GetTick>
 8003722:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003724:	e008      	b.n	8003738 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003726:	f7fe fb01 	bl	8001d2c <HAL_GetTick>
 800372a:	4602      	mov	r2, r0
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	2b02      	cmp	r3, #2
 8003732:	d901      	bls.n	8003738 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e1b7      	b.n	8003aa8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003738:	4b32      	ldr	r3, [pc, #200]	; (8003804 <HAL_RCC_OscConfig+0x504>)
 800373a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800373e:	f003 0302 	and.w	r3, r3, #2
 8003742:	2b00      	cmp	r3, #0
 8003744:	d1ef      	bne.n	8003726 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0304 	and.w	r3, r3, #4
 800374e:	2b00      	cmp	r3, #0
 8003750:	f000 80a6 	beq.w	80038a0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003754:	2300      	movs	r3, #0
 8003756:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003758:	4b2a      	ldr	r3, [pc, #168]	; (8003804 <HAL_RCC_OscConfig+0x504>)
 800375a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800375c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d10d      	bne.n	8003780 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003764:	4b27      	ldr	r3, [pc, #156]	; (8003804 <HAL_RCC_OscConfig+0x504>)
 8003766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003768:	4a26      	ldr	r2, [pc, #152]	; (8003804 <HAL_RCC_OscConfig+0x504>)
 800376a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800376e:	6593      	str	r3, [r2, #88]	; 0x58
 8003770:	4b24      	ldr	r3, [pc, #144]	; (8003804 <HAL_RCC_OscConfig+0x504>)
 8003772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003774:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003778:	60bb      	str	r3, [r7, #8]
 800377a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800377c:	2301      	movs	r3, #1
 800377e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003780:	4b21      	ldr	r3, [pc, #132]	; (8003808 <HAL_RCC_OscConfig+0x508>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003788:	2b00      	cmp	r3, #0
 800378a:	d118      	bne.n	80037be <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800378c:	4b1e      	ldr	r3, [pc, #120]	; (8003808 <HAL_RCC_OscConfig+0x508>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a1d      	ldr	r2, [pc, #116]	; (8003808 <HAL_RCC_OscConfig+0x508>)
 8003792:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003796:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003798:	f7fe fac8 	bl	8001d2c <HAL_GetTick>
 800379c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800379e:	e008      	b.n	80037b2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037a0:	f7fe fac4 	bl	8001d2c <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e17a      	b.n	8003aa8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037b2:	4b15      	ldr	r3, [pc, #84]	; (8003808 <HAL_RCC_OscConfig+0x508>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d0f0      	beq.n	80037a0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d108      	bne.n	80037d8 <HAL_RCC_OscConfig+0x4d8>
 80037c6:	4b0f      	ldr	r3, [pc, #60]	; (8003804 <HAL_RCC_OscConfig+0x504>)
 80037c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037cc:	4a0d      	ldr	r2, [pc, #52]	; (8003804 <HAL_RCC_OscConfig+0x504>)
 80037ce:	f043 0301 	orr.w	r3, r3, #1
 80037d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037d6:	e029      	b.n	800382c <HAL_RCC_OscConfig+0x52c>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	2b05      	cmp	r3, #5
 80037de:	d115      	bne.n	800380c <HAL_RCC_OscConfig+0x50c>
 80037e0:	4b08      	ldr	r3, [pc, #32]	; (8003804 <HAL_RCC_OscConfig+0x504>)
 80037e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e6:	4a07      	ldr	r2, [pc, #28]	; (8003804 <HAL_RCC_OscConfig+0x504>)
 80037e8:	f043 0304 	orr.w	r3, r3, #4
 80037ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037f0:	4b04      	ldr	r3, [pc, #16]	; (8003804 <HAL_RCC_OscConfig+0x504>)
 80037f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f6:	4a03      	ldr	r2, [pc, #12]	; (8003804 <HAL_RCC_OscConfig+0x504>)
 80037f8:	f043 0301 	orr.w	r3, r3, #1
 80037fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003800:	e014      	b.n	800382c <HAL_RCC_OscConfig+0x52c>
 8003802:	bf00      	nop
 8003804:	40021000 	.word	0x40021000
 8003808:	40007000 	.word	0x40007000
 800380c:	4b9c      	ldr	r3, [pc, #624]	; (8003a80 <HAL_RCC_OscConfig+0x780>)
 800380e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003812:	4a9b      	ldr	r2, [pc, #620]	; (8003a80 <HAL_RCC_OscConfig+0x780>)
 8003814:	f023 0301 	bic.w	r3, r3, #1
 8003818:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800381c:	4b98      	ldr	r3, [pc, #608]	; (8003a80 <HAL_RCC_OscConfig+0x780>)
 800381e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003822:	4a97      	ldr	r2, [pc, #604]	; (8003a80 <HAL_RCC_OscConfig+0x780>)
 8003824:	f023 0304 	bic.w	r3, r3, #4
 8003828:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d016      	beq.n	8003862 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003834:	f7fe fa7a 	bl	8001d2c <HAL_GetTick>
 8003838:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800383a:	e00a      	b.n	8003852 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800383c:	f7fe fa76 	bl	8001d2c <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	f241 3288 	movw	r2, #5000	; 0x1388
 800384a:	4293      	cmp	r3, r2
 800384c:	d901      	bls.n	8003852 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e12a      	b.n	8003aa8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003852:	4b8b      	ldr	r3, [pc, #556]	; (8003a80 <HAL_RCC_OscConfig+0x780>)
 8003854:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003858:	f003 0302 	and.w	r3, r3, #2
 800385c:	2b00      	cmp	r3, #0
 800385e:	d0ed      	beq.n	800383c <HAL_RCC_OscConfig+0x53c>
 8003860:	e015      	b.n	800388e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003862:	f7fe fa63 	bl	8001d2c <HAL_GetTick>
 8003866:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003868:	e00a      	b.n	8003880 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800386a:	f7fe fa5f 	bl	8001d2c <HAL_GetTick>
 800386e:	4602      	mov	r2, r0
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	f241 3288 	movw	r2, #5000	; 0x1388
 8003878:	4293      	cmp	r3, r2
 800387a:	d901      	bls.n	8003880 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	e113      	b.n	8003aa8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003880:	4b7f      	ldr	r3, [pc, #508]	; (8003a80 <HAL_RCC_OscConfig+0x780>)
 8003882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1ed      	bne.n	800386a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800388e:	7ffb      	ldrb	r3, [r7, #31]
 8003890:	2b01      	cmp	r3, #1
 8003892:	d105      	bne.n	80038a0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003894:	4b7a      	ldr	r3, [pc, #488]	; (8003a80 <HAL_RCC_OscConfig+0x780>)
 8003896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003898:	4a79      	ldr	r2, [pc, #484]	; (8003a80 <HAL_RCC_OscConfig+0x780>)
 800389a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800389e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	f000 80fe 	beq.w	8003aa6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	f040 80d0 	bne.w	8003a54 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80038b4:	4b72      	ldr	r3, [pc, #456]	; (8003a80 <HAL_RCC_OscConfig+0x780>)
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	f003 0203 	and.w	r2, r3, #3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d130      	bne.n	800392a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d2:	3b01      	subs	r3, #1
 80038d4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d127      	bne.n	800392a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038e4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d11f      	bne.n	800392a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80038f4:	2a07      	cmp	r2, #7
 80038f6:	bf14      	ite	ne
 80038f8:	2201      	movne	r2, #1
 80038fa:	2200      	moveq	r2, #0
 80038fc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038fe:	4293      	cmp	r3, r2
 8003900:	d113      	bne.n	800392a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800390c:	085b      	lsrs	r3, r3, #1
 800390e:	3b01      	subs	r3, #1
 8003910:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003912:	429a      	cmp	r2, r3
 8003914:	d109      	bne.n	800392a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003920:	085b      	lsrs	r3, r3, #1
 8003922:	3b01      	subs	r3, #1
 8003924:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003926:	429a      	cmp	r2, r3
 8003928:	d06e      	beq.n	8003a08 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	2b0c      	cmp	r3, #12
 800392e:	d069      	beq.n	8003a04 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003930:	4b53      	ldr	r3, [pc, #332]	; (8003a80 <HAL_RCC_OscConfig+0x780>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d105      	bne.n	8003948 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800393c:	4b50      	ldr	r3, [pc, #320]	; (8003a80 <HAL_RCC_OscConfig+0x780>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d001      	beq.n	800394c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e0ad      	b.n	8003aa8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800394c:	4b4c      	ldr	r3, [pc, #304]	; (8003a80 <HAL_RCC_OscConfig+0x780>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a4b      	ldr	r2, [pc, #300]	; (8003a80 <HAL_RCC_OscConfig+0x780>)
 8003952:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003956:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003958:	f7fe f9e8 	bl	8001d2c <HAL_GetTick>
 800395c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800395e:	e008      	b.n	8003972 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003960:	f7fe f9e4 	bl	8001d2c <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b02      	cmp	r3, #2
 800396c:	d901      	bls.n	8003972 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e09a      	b.n	8003aa8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003972:	4b43      	ldr	r3, [pc, #268]	; (8003a80 <HAL_RCC_OscConfig+0x780>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1f0      	bne.n	8003960 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800397e:	4b40      	ldr	r3, [pc, #256]	; (8003a80 <HAL_RCC_OscConfig+0x780>)
 8003980:	68da      	ldr	r2, [r3, #12]
 8003982:	4b40      	ldr	r3, [pc, #256]	; (8003a84 <HAL_RCC_OscConfig+0x784>)
 8003984:	4013      	ands	r3, r2
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800398e:	3a01      	subs	r2, #1
 8003990:	0112      	lsls	r2, r2, #4
 8003992:	4311      	orrs	r1, r2
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003998:	0212      	lsls	r2, r2, #8
 800399a:	4311      	orrs	r1, r2
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80039a0:	0852      	lsrs	r2, r2, #1
 80039a2:	3a01      	subs	r2, #1
 80039a4:	0552      	lsls	r2, r2, #21
 80039a6:	4311      	orrs	r1, r2
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80039ac:	0852      	lsrs	r2, r2, #1
 80039ae:	3a01      	subs	r2, #1
 80039b0:	0652      	lsls	r2, r2, #25
 80039b2:	4311      	orrs	r1, r2
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80039b8:	0912      	lsrs	r2, r2, #4
 80039ba:	0452      	lsls	r2, r2, #17
 80039bc:	430a      	orrs	r2, r1
 80039be:	4930      	ldr	r1, [pc, #192]	; (8003a80 <HAL_RCC_OscConfig+0x780>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80039c4:	4b2e      	ldr	r3, [pc, #184]	; (8003a80 <HAL_RCC_OscConfig+0x780>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a2d      	ldr	r2, [pc, #180]	; (8003a80 <HAL_RCC_OscConfig+0x780>)
 80039ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039ce:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039d0:	4b2b      	ldr	r3, [pc, #172]	; (8003a80 <HAL_RCC_OscConfig+0x780>)
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	4a2a      	ldr	r2, [pc, #168]	; (8003a80 <HAL_RCC_OscConfig+0x780>)
 80039d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039da:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80039dc:	f7fe f9a6 	bl	8001d2c <HAL_GetTick>
 80039e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039e2:	e008      	b.n	80039f6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039e4:	f7fe f9a2 	bl	8001d2c <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d901      	bls.n	80039f6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e058      	b.n	8003aa8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039f6:	4b22      	ldr	r3, [pc, #136]	; (8003a80 <HAL_RCC_OscConfig+0x780>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d0f0      	beq.n	80039e4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a02:	e050      	b.n	8003aa6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e04f      	b.n	8003aa8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a08:	4b1d      	ldr	r3, [pc, #116]	; (8003a80 <HAL_RCC_OscConfig+0x780>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d148      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003a14:	4b1a      	ldr	r3, [pc, #104]	; (8003a80 <HAL_RCC_OscConfig+0x780>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a19      	ldr	r2, [pc, #100]	; (8003a80 <HAL_RCC_OscConfig+0x780>)
 8003a1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a1e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a20:	4b17      	ldr	r3, [pc, #92]	; (8003a80 <HAL_RCC_OscConfig+0x780>)
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	4a16      	ldr	r2, [pc, #88]	; (8003a80 <HAL_RCC_OscConfig+0x780>)
 8003a26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a2a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003a2c:	f7fe f97e 	bl	8001d2c <HAL_GetTick>
 8003a30:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a32:	e008      	b.n	8003a46 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a34:	f7fe f97a 	bl	8001d2c <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e030      	b.n	8003aa8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a46:	4b0e      	ldr	r3, [pc, #56]	; (8003a80 <HAL_RCC_OscConfig+0x780>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d0f0      	beq.n	8003a34 <HAL_RCC_OscConfig+0x734>
 8003a52:	e028      	b.n	8003aa6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	2b0c      	cmp	r3, #12
 8003a58:	d023      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a5a:	4b09      	ldr	r3, [pc, #36]	; (8003a80 <HAL_RCC_OscConfig+0x780>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a08      	ldr	r2, [pc, #32]	; (8003a80 <HAL_RCC_OscConfig+0x780>)
 8003a60:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a66:	f7fe f961 	bl	8001d2c <HAL_GetTick>
 8003a6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a6c:	e00c      	b.n	8003a88 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a6e:	f7fe f95d 	bl	8001d2c <HAL_GetTick>
 8003a72:	4602      	mov	r2, r0
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d905      	bls.n	8003a88 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e013      	b.n	8003aa8 <HAL_RCC_OscConfig+0x7a8>
 8003a80:	40021000 	.word	0x40021000
 8003a84:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a88:	4b09      	ldr	r3, [pc, #36]	; (8003ab0 <HAL_RCC_OscConfig+0x7b0>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d1ec      	bne.n	8003a6e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003a94:	4b06      	ldr	r3, [pc, #24]	; (8003ab0 <HAL_RCC_OscConfig+0x7b0>)
 8003a96:	68da      	ldr	r2, [r3, #12]
 8003a98:	4905      	ldr	r1, [pc, #20]	; (8003ab0 <HAL_RCC_OscConfig+0x7b0>)
 8003a9a:	4b06      	ldr	r3, [pc, #24]	; (8003ab4 <HAL_RCC_OscConfig+0x7b4>)
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	60cb      	str	r3, [r1, #12]
 8003aa0:	e001      	b.n	8003aa6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e000      	b.n	8003aa8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003aa6:	2300      	movs	r3, #0
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3720      	adds	r7, #32
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	40021000 	.word	0x40021000
 8003ab4:	feeefffc 	.word	0xfeeefffc

08003ab8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d101      	bne.n	8003acc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e0e7      	b.n	8003c9c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003acc:	4b75      	ldr	r3, [pc, #468]	; (8003ca4 <HAL_RCC_ClockConfig+0x1ec>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0307 	and.w	r3, r3, #7
 8003ad4:	683a      	ldr	r2, [r7, #0]
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d910      	bls.n	8003afc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ada:	4b72      	ldr	r3, [pc, #456]	; (8003ca4 <HAL_RCC_ClockConfig+0x1ec>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f023 0207 	bic.w	r2, r3, #7
 8003ae2:	4970      	ldr	r1, [pc, #448]	; (8003ca4 <HAL_RCC_ClockConfig+0x1ec>)
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aea:	4b6e      	ldr	r3, [pc, #440]	; (8003ca4 <HAL_RCC_ClockConfig+0x1ec>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0307 	and.w	r3, r3, #7
 8003af2:	683a      	ldr	r2, [r7, #0]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d001      	beq.n	8003afc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e0cf      	b.n	8003c9c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d010      	beq.n	8003b2a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	689a      	ldr	r2, [r3, #8]
 8003b0c:	4b66      	ldr	r3, [pc, #408]	; (8003ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d908      	bls.n	8003b2a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b18:	4b63      	ldr	r3, [pc, #396]	; (8003ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	4960      	ldr	r1, [pc, #384]	; (8003ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0301 	and.w	r3, r3, #1
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d04c      	beq.n	8003bd0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	2b03      	cmp	r3, #3
 8003b3c:	d107      	bne.n	8003b4e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b3e:	4b5a      	ldr	r3, [pc, #360]	; (8003ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d121      	bne.n	8003b8e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e0a6      	b.n	8003c9c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d107      	bne.n	8003b66 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b56:	4b54      	ldr	r3, [pc, #336]	; (8003ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d115      	bne.n	8003b8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e09a      	b.n	8003c9c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d107      	bne.n	8003b7e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b6e:	4b4e      	ldr	r3, [pc, #312]	; (8003ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d109      	bne.n	8003b8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e08e      	b.n	8003c9c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b7e:	4b4a      	ldr	r3, [pc, #296]	; (8003ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d101      	bne.n	8003b8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e086      	b.n	8003c9c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b8e:	4b46      	ldr	r3, [pc, #280]	; (8003ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f023 0203 	bic.w	r2, r3, #3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	4943      	ldr	r1, [pc, #268]	; (8003ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ba0:	f7fe f8c4 	bl	8001d2c <HAL_GetTick>
 8003ba4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ba6:	e00a      	b.n	8003bbe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ba8:	f7fe f8c0 	bl	8001d2c <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e06e      	b.n	8003c9c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bbe:	4b3a      	ldr	r3, [pc, #232]	; (8003ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f003 020c 	and.w	r2, r3, #12
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d1eb      	bne.n	8003ba8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0302 	and.w	r3, r3, #2
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d010      	beq.n	8003bfe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689a      	ldr	r2, [r3, #8]
 8003be0:	4b31      	ldr	r3, [pc, #196]	; (8003ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d208      	bcs.n	8003bfe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bec:	4b2e      	ldr	r3, [pc, #184]	; (8003ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	492b      	ldr	r1, [pc, #172]	; (8003ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bfe:	4b29      	ldr	r3, [pc, #164]	; (8003ca4 <HAL_RCC_ClockConfig+0x1ec>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0307 	and.w	r3, r3, #7
 8003c06:	683a      	ldr	r2, [r7, #0]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d210      	bcs.n	8003c2e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c0c:	4b25      	ldr	r3, [pc, #148]	; (8003ca4 <HAL_RCC_ClockConfig+0x1ec>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f023 0207 	bic.w	r2, r3, #7
 8003c14:	4923      	ldr	r1, [pc, #140]	; (8003ca4 <HAL_RCC_ClockConfig+0x1ec>)
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c1c:	4b21      	ldr	r3, [pc, #132]	; (8003ca4 <HAL_RCC_ClockConfig+0x1ec>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0307 	and.w	r3, r3, #7
 8003c24:	683a      	ldr	r2, [r7, #0]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d001      	beq.n	8003c2e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e036      	b.n	8003c9c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0304 	and.w	r3, r3, #4
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d008      	beq.n	8003c4c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c3a:	4b1b      	ldr	r3, [pc, #108]	; (8003ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	4918      	ldr	r1, [pc, #96]	; (8003ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0308 	and.w	r3, r3, #8
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d009      	beq.n	8003c6c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c58:	4b13      	ldr	r3, [pc, #76]	; (8003ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	00db      	lsls	r3, r3, #3
 8003c66:	4910      	ldr	r1, [pc, #64]	; (8003ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c6c:	f000 f824 	bl	8003cb8 <HAL_RCC_GetSysClockFreq>
 8003c70:	4602      	mov	r2, r0
 8003c72:	4b0d      	ldr	r3, [pc, #52]	; (8003ca8 <HAL_RCC_ClockConfig+0x1f0>)
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	091b      	lsrs	r3, r3, #4
 8003c78:	f003 030f 	and.w	r3, r3, #15
 8003c7c:	490b      	ldr	r1, [pc, #44]	; (8003cac <HAL_RCC_ClockConfig+0x1f4>)
 8003c7e:	5ccb      	ldrb	r3, [r1, r3]
 8003c80:	f003 031f 	and.w	r3, r3, #31
 8003c84:	fa22 f303 	lsr.w	r3, r2, r3
 8003c88:	4a09      	ldr	r2, [pc, #36]	; (8003cb0 <HAL_RCC_ClockConfig+0x1f8>)
 8003c8a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003c8c:	4b09      	ldr	r3, [pc, #36]	; (8003cb4 <HAL_RCC_ClockConfig+0x1fc>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4618      	mov	r0, r3
 8003c92:	f7fd fffb 	bl	8001c8c <HAL_InitTick>
 8003c96:	4603      	mov	r3, r0
 8003c98:	72fb      	strb	r3, [r7, #11]

  return status;
 8003c9a:	7afb      	ldrb	r3, [r7, #11]
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3710      	adds	r7, #16
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	40022000 	.word	0x40022000
 8003ca8:	40021000 	.word	0x40021000
 8003cac:	08005d2c 	.word	0x08005d2c
 8003cb0:	20000000 	.word	0x20000000
 8003cb4:	20000004 	.word	0x20000004

08003cb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b089      	sub	sp, #36	; 0x24
 8003cbc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	61fb      	str	r3, [r7, #28]
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cc6:	4b3e      	ldr	r3, [pc, #248]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	f003 030c 	and.w	r3, r3, #12
 8003cce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cd0:	4b3b      	ldr	r3, [pc, #236]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	f003 0303 	and.w	r3, r3, #3
 8003cd8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d005      	beq.n	8003cec <HAL_RCC_GetSysClockFreq+0x34>
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	2b0c      	cmp	r3, #12
 8003ce4:	d121      	bne.n	8003d2a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d11e      	bne.n	8003d2a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003cec:	4b34      	ldr	r3, [pc, #208]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0308 	and.w	r3, r3, #8
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d107      	bne.n	8003d08 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003cf8:	4b31      	ldr	r3, [pc, #196]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cfe:	0a1b      	lsrs	r3, r3, #8
 8003d00:	f003 030f 	and.w	r3, r3, #15
 8003d04:	61fb      	str	r3, [r7, #28]
 8003d06:	e005      	b.n	8003d14 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003d08:	4b2d      	ldr	r3, [pc, #180]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	091b      	lsrs	r3, r3, #4
 8003d0e:	f003 030f 	and.w	r3, r3, #15
 8003d12:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003d14:	4a2b      	ldr	r2, [pc, #172]	; (8003dc4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d1c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d10d      	bne.n	8003d40 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d28:	e00a      	b.n	8003d40 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	2b04      	cmp	r3, #4
 8003d2e:	d102      	bne.n	8003d36 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d30:	4b25      	ldr	r3, [pc, #148]	; (8003dc8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003d32:	61bb      	str	r3, [r7, #24]
 8003d34:	e004      	b.n	8003d40 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	2b08      	cmp	r3, #8
 8003d3a:	d101      	bne.n	8003d40 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d3c:	4b23      	ldr	r3, [pc, #140]	; (8003dcc <HAL_RCC_GetSysClockFreq+0x114>)
 8003d3e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	2b0c      	cmp	r3, #12
 8003d44:	d134      	bne.n	8003db0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d46:	4b1e      	ldr	r3, [pc, #120]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	f003 0303 	and.w	r3, r3, #3
 8003d4e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d003      	beq.n	8003d5e <HAL_RCC_GetSysClockFreq+0xa6>
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	2b03      	cmp	r3, #3
 8003d5a:	d003      	beq.n	8003d64 <HAL_RCC_GetSysClockFreq+0xac>
 8003d5c:	e005      	b.n	8003d6a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003d5e:	4b1a      	ldr	r3, [pc, #104]	; (8003dc8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003d60:	617b      	str	r3, [r7, #20]
      break;
 8003d62:	e005      	b.n	8003d70 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003d64:	4b19      	ldr	r3, [pc, #100]	; (8003dcc <HAL_RCC_GetSysClockFreq+0x114>)
 8003d66:	617b      	str	r3, [r7, #20]
      break;
 8003d68:	e002      	b.n	8003d70 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	617b      	str	r3, [r7, #20]
      break;
 8003d6e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d70:	4b13      	ldr	r3, [pc, #76]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	091b      	lsrs	r3, r3, #4
 8003d76:	f003 0307 	and.w	r3, r3, #7
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003d7e:	4b10      	ldr	r3, [pc, #64]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	0a1b      	lsrs	r3, r3, #8
 8003d84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d88:	697a      	ldr	r2, [r7, #20]
 8003d8a:	fb03 f202 	mul.w	r2, r3, r2
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d94:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d96:	4b0a      	ldr	r3, [pc, #40]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	0e5b      	lsrs	r3, r3, #25
 8003d9c:	f003 0303 	and.w	r3, r3, #3
 8003da0:	3301      	adds	r3, #1
 8003da2:	005b      	lsls	r3, r3, #1
 8003da4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003da6:	697a      	ldr	r2, [r7, #20]
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003db0:	69bb      	ldr	r3, [r7, #24]
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3724      	adds	r7, #36	; 0x24
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	40021000 	.word	0x40021000
 8003dc4:	08005d44 	.word	0x08005d44
 8003dc8:	00f42400 	.word	0x00f42400
 8003dcc:	007a1200 	.word	0x007a1200

08003dd0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dd4:	4b03      	ldr	r3, [pc, #12]	; (8003de4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr
 8003de2:	bf00      	nop
 8003de4:	20000000 	.word	0x20000000

08003de8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003dec:	f7ff fff0 	bl	8003dd0 <HAL_RCC_GetHCLKFreq>
 8003df0:	4602      	mov	r2, r0
 8003df2:	4b06      	ldr	r3, [pc, #24]	; (8003e0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	0a1b      	lsrs	r3, r3, #8
 8003df8:	f003 0307 	and.w	r3, r3, #7
 8003dfc:	4904      	ldr	r1, [pc, #16]	; (8003e10 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003dfe:	5ccb      	ldrb	r3, [r1, r3]
 8003e00:	f003 031f 	and.w	r3, r3, #31
 8003e04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	40021000 	.word	0x40021000
 8003e10:	08005d3c 	.word	0x08005d3c

08003e14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003e18:	f7ff ffda 	bl	8003dd0 <HAL_RCC_GetHCLKFreq>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	4b06      	ldr	r3, [pc, #24]	; (8003e38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	0adb      	lsrs	r3, r3, #11
 8003e24:	f003 0307 	and.w	r3, r3, #7
 8003e28:	4904      	ldr	r1, [pc, #16]	; (8003e3c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003e2a:	5ccb      	ldrb	r3, [r1, r3]
 8003e2c:	f003 031f 	and.w	r3, r3, #31
 8003e30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	40021000 	.word	0x40021000
 8003e3c:	08005d3c 	.word	0x08005d3c

08003e40 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b086      	sub	sp, #24
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003e48:	2300      	movs	r3, #0
 8003e4a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003e4c:	4b2a      	ldr	r3, [pc, #168]	; (8003ef8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d003      	beq.n	8003e60 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003e58:	f7ff f9ee 	bl	8003238 <HAL_PWREx_GetVoltageRange>
 8003e5c:	6178      	str	r0, [r7, #20]
 8003e5e:	e014      	b.n	8003e8a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e60:	4b25      	ldr	r3, [pc, #148]	; (8003ef8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e64:	4a24      	ldr	r2, [pc, #144]	; (8003ef8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e6a:	6593      	str	r3, [r2, #88]	; 0x58
 8003e6c:	4b22      	ldr	r3, [pc, #136]	; (8003ef8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e74:	60fb      	str	r3, [r7, #12]
 8003e76:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003e78:	f7ff f9de 	bl	8003238 <HAL_PWREx_GetVoltageRange>
 8003e7c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003e7e:	4b1e      	ldr	r3, [pc, #120]	; (8003ef8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e82:	4a1d      	ldr	r2, [pc, #116]	; (8003ef8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e88:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e90:	d10b      	bne.n	8003eaa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2b80      	cmp	r3, #128	; 0x80
 8003e96:	d919      	bls.n	8003ecc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2ba0      	cmp	r3, #160	; 0xa0
 8003e9c:	d902      	bls.n	8003ea4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e9e:	2302      	movs	r3, #2
 8003ea0:	613b      	str	r3, [r7, #16]
 8003ea2:	e013      	b.n	8003ecc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	613b      	str	r3, [r7, #16]
 8003ea8:	e010      	b.n	8003ecc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2b80      	cmp	r3, #128	; 0x80
 8003eae:	d902      	bls.n	8003eb6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	613b      	str	r3, [r7, #16]
 8003eb4:	e00a      	b.n	8003ecc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2b80      	cmp	r3, #128	; 0x80
 8003eba:	d102      	bne.n	8003ec2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ebc:	2302      	movs	r3, #2
 8003ebe:	613b      	str	r3, [r7, #16]
 8003ec0:	e004      	b.n	8003ecc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2b70      	cmp	r3, #112	; 0x70
 8003ec6:	d101      	bne.n	8003ecc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ec8:	2301      	movs	r3, #1
 8003eca:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003ecc:	4b0b      	ldr	r3, [pc, #44]	; (8003efc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f023 0207 	bic.w	r2, r3, #7
 8003ed4:	4909      	ldr	r1, [pc, #36]	; (8003efc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003edc:	4b07      	ldr	r3, [pc, #28]	; (8003efc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0307 	and.w	r3, r3, #7
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d001      	beq.n	8003eee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e000      	b.n	8003ef0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3718      	adds	r7, #24
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	40021000 	.word	0x40021000
 8003efc:	40022000 	.word	0x40022000

08003f00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b086      	sub	sp, #24
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f08:	2300      	movs	r3, #0
 8003f0a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d041      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f20:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003f24:	d02a      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003f26:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003f2a:	d824      	bhi.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003f2c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f30:	d008      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003f32:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f36:	d81e      	bhi.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d00a      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003f3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f40:	d010      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003f42:	e018      	b.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f44:	4b86      	ldr	r3, [pc, #536]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	4a85      	ldr	r2, [pc, #532]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f4e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f50:	e015      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	3304      	adds	r3, #4
 8003f56:	2100      	movs	r1, #0
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f000 fabb 	bl	80044d4 <RCCEx_PLLSAI1_Config>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f62:	e00c      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	3320      	adds	r3, #32
 8003f68:	2100      	movs	r1, #0
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f000 fba6 	bl	80046bc <RCCEx_PLLSAI2_Config>
 8003f70:	4603      	mov	r3, r0
 8003f72:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f74:	e003      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	74fb      	strb	r3, [r7, #19]
      break;
 8003f7a:	e000      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003f7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f7e:	7cfb      	ldrb	r3, [r7, #19]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d10b      	bne.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f84:	4b76      	ldr	r3, [pc, #472]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f8a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f92:	4973      	ldr	r1, [pc, #460]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003f9a:	e001      	b.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f9c:	7cfb      	ldrb	r3, [r7, #19]
 8003f9e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d041      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fb0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003fb4:	d02a      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003fb6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003fba:	d824      	bhi.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003fbc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003fc0:	d008      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003fc2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003fc6:	d81e      	bhi.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d00a      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003fcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003fd0:	d010      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003fd2:	e018      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003fd4:	4b62      	ldr	r3, [pc, #392]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	4a61      	ldr	r2, [pc, #388]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fde:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003fe0:	e015      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	3304      	adds	r3, #4
 8003fe6:	2100      	movs	r1, #0
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f000 fa73 	bl	80044d4 <RCCEx_PLLSAI1_Config>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ff2:	e00c      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	3320      	adds	r3, #32
 8003ff8:	2100      	movs	r1, #0
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f000 fb5e 	bl	80046bc <RCCEx_PLLSAI2_Config>
 8004000:	4603      	mov	r3, r0
 8004002:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004004:	e003      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	74fb      	strb	r3, [r7, #19]
      break;
 800400a:	e000      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800400c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800400e:	7cfb      	ldrb	r3, [r7, #19]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d10b      	bne.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004014:	4b52      	ldr	r3, [pc, #328]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800401a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004022:	494f      	ldr	r1, [pc, #316]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004024:	4313      	orrs	r3, r2
 8004026:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800402a:	e001      	b.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800402c:	7cfb      	ldrb	r3, [r7, #19]
 800402e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004038:	2b00      	cmp	r3, #0
 800403a:	f000 80a0 	beq.w	800417e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800403e:	2300      	movs	r3, #0
 8004040:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004042:	4b47      	ldr	r3, [pc, #284]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d101      	bne.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800404e:	2301      	movs	r3, #1
 8004050:	e000      	b.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004052:	2300      	movs	r3, #0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d00d      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004058:	4b41      	ldr	r3, [pc, #260]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800405a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800405c:	4a40      	ldr	r2, [pc, #256]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800405e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004062:	6593      	str	r3, [r2, #88]	; 0x58
 8004064:	4b3e      	ldr	r3, [pc, #248]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004068:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800406c:	60bb      	str	r3, [r7, #8]
 800406e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004070:	2301      	movs	r3, #1
 8004072:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004074:	4b3b      	ldr	r3, [pc, #236]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a3a      	ldr	r2, [pc, #232]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800407a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800407e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004080:	f7fd fe54 	bl	8001d2c <HAL_GetTick>
 8004084:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004086:	e009      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004088:	f7fd fe50 	bl	8001d2c <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	2b02      	cmp	r3, #2
 8004094:	d902      	bls.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	74fb      	strb	r3, [r7, #19]
        break;
 800409a:	e005      	b.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800409c:	4b31      	ldr	r3, [pc, #196]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d0ef      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80040a8:	7cfb      	ldrb	r3, [r7, #19]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d15c      	bne.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80040ae:	4b2c      	ldr	r3, [pc, #176]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040b8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d01f      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040c6:	697a      	ldr	r2, [r7, #20]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d019      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80040cc:	4b24      	ldr	r3, [pc, #144]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040d6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80040d8:	4b21      	ldr	r3, [pc, #132]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040de:	4a20      	ldr	r2, [pc, #128]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040e8:	4b1d      	ldr	r3, [pc, #116]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ee:	4a1c      	ldr	r2, [pc, #112]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80040f8:	4a19      	ldr	r2, [pc, #100]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	f003 0301 	and.w	r3, r3, #1
 8004106:	2b00      	cmp	r3, #0
 8004108:	d016      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800410a:	f7fd fe0f 	bl	8001d2c <HAL_GetTick>
 800410e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004110:	e00b      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004112:	f7fd fe0b 	bl	8001d2c <HAL_GetTick>
 8004116:	4602      	mov	r2, r0
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004120:	4293      	cmp	r3, r2
 8004122:	d902      	bls.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	74fb      	strb	r3, [r7, #19]
            break;
 8004128:	e006      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800412a:	4b0d      	ldr	r3, [pc, #52]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800412c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004130:	f003 0302 	and.w	r3, r3, #2
 8004134:	2b00      	cmp	r3, #0
 8004136:	d0ec      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004138:	7cfb      	ldrb	r3, [r7, #19]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d10c      	bne.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800413e:	4b08      	ldr	r3, [pc, #32]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004144:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800414e:	4904      	ldr	r1, [pc, #16]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004150:	4313      	orrs	r3, r2
 8004152:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004156:	e009      	b.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004158:	7cfb      	ldrb	r3, [r7, #19]
 800415a:	74bb      	strb	r3, [r7, #18]
 800415c:	e006      	b.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800415e:	bf00      	nop
 8004160:	40021000 	.word	0x40021000
 8004164:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004168:	7cfb      	ldrb	r3, [r7, #19]
 800416a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800416c:	7c7b      	ldrb	r3, [r7, #17]
 800416e:	2b01      	cmp	r3, #1
 8004170:	d105      	bne.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004172:	4b9e      	ldr	r3, [pc, #632]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004176:	4a9d      	ldr	r2, [pc, #628]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004178:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800417c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0301 	and.w	r3, r3, #1
 8004186:	2b00      	cmp	r3, #0
 8004188:	d00a      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800418a:	4b98      	ldr	r3, [pc, #608]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800418c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004190:	f023 0203 	bic.w	r2, r3, #3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004198:	4994      	ldr	r1, [pc, #592]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800419a:	4313      	orrs	r3, r2
 800419c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0302 	and.w	r3, r3, #2
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d00a      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041ac:	4b8f      	ldr	r3, [pc, #572]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041b2:	f023 020c 	bic.w	r2, r3, #12
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ba:	498c      	ldr	r1, [pc, #560]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0304 	and.w	r3, r3, #4
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d00a      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80041ce:	4b87      	ldr	r3, [pc, #540]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041d4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041dc:	4983      	ldr	r1, [pc, #524]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0308 	and.w	r3, r3, #8
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d00a      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80041f0:	4b7e      	ldr	r3, [pc, #504]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041fe:	497b      	ldr	r1, [pc, #492]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004200:	4313      	orrs	r3, r2
 8004202:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0310 	and.w	r3, r3, #16
 800420e:	2b00      	cmp	r3, #0
 8004210:	d00a      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004212:	4b76      	ldr	r3, [pc, #472]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004214:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004218:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004220:	4972      	ldr	r1, [pc, #456]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004222:	4313      	orrs	r3, r2
 8004224:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0320 	and.w	r3, r3, #32
 8004230:	2b00      	cmp	r3, #0
 8004232:	d00a      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004234:	4b6d      	ldr	r3, [pc, #436]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800423a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004242:	496a      	ldr	r1, [pc, #424]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004244:	4313      	orrs	r3, r2
 8004246:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004252:	2b00      	cmp	r3, #0
 8004254:	d00a      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004256:	4b65      	ldr	r3, [pc, #404]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800425c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004264:	4961      	ldr	r1, [pc, #388]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004266:	4313      	orrs	r3, r2
 8004268:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004274:	2b00      	cmp	r3, #0
 8004276:	d00a      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004278:	4b5c      	ldr	r3, [pc, #368]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800427a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800427e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004286:	4959      	ldr	r1, [pc, #356]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004288:	4313      	orrs	r3, r2
 800428a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004296:	2b00      	cmp	r3, #0
 8004298:	d00a      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800429a:	4b54      	ldr	r3, [pc, #336]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800429c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042a8:	4950      	ldr	r1, [pc, #320]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042aa:	4313      	orrs	r3, r2
 80042ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d00a      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80042bc:	4b4b      	ldr	r3, [pc, #300]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ca:	4948      	ldr	r1, [pc, #288]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d00a      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80042de:	4b43      	ldr	r3, [pc, #268]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ec:	493f      	ldr	r1, [pc, #252]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d028      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004300:	4b3a      	ldr	r3, [pc, #232]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004306:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800430e:	4937      	ldr	r1, [pc, #220]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004310:	4313      	orrs	r3, r2
 8004312:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800431a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800431e:	d106      	bne.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004320:	4b32      	ldr	r3, [pc, #200]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	4a31      	ldr	r2, [pc, #196]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004326:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800432a:	60d3      	str	r3, [r2, #12]
 800432c:	e011      	b.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004332:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004336:	d10c      	bne.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	3304      	adds	r3, #4
 800433c:	2101      	movs	r1, #1
 800433e:	4618      	mov	r0, r3
 8004340:	f000 f8c8 	bl	80044d4 <RCCEx_PLLSAI1_Config>
 8004344:	4603      	mov	r3, r0
 8004346:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004348:	7cfb      	ldrb	r3, [r7, #19]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d001      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800434e:	7cfb      	ldrb	r3, [r7, #19]
 8004350:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d028      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800435e:	4b23      	ldr	r3, [pc, #140]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004364:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800436c:	491f      	ldr	r1, [pc, #124]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800436e:	4313      	orrs	r3, r2
 8004370:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004378:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800437c:	d106      	bne.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800437e:	4b1b      	ldr	r3, [pc, #108]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	4a1a      	ldr	r2, [pc, #104]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004384:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004388:	60d3      	str	r3, [r2, #12]
 800438a:	e011      	b.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004390:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004394:	d10c      	bne.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	3304      	adds	r3, #4
 800439a:	2101      	movs	r1, #1
 800439c:	4618      	mov	r0, r3
 800439e:	f000 f899 	bl	80044d4 <RCCEx_PLLSAI1_Config>
 80043a2:	4603      	mov	r3, r0
 80043a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043a6:	7cfb      	ldrb	r3, [r7, #19]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d001      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80043ac:	7cfb      	ldrb	r3, [r7, #19]
 80043ae:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d02b      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80043bc:	4b0b      	ldr	r3, [pc, #44]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043ca:	4908      	ldr	r1, [pc, #32]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043cc:	4313      	orrs	r3, r2
 80043ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043da:	d109      	bne.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043dc:	4b03      	ldr	r3, [pc, #12]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	4a02      	ldr	r2, [pc, #8]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043e6:	60d3      	str	r3, [r2, #12]
 80043e8:	e014      	b.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80043ea:	bf00      	nop
 80043ec:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80043f8:	d10c      	bne.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	3304      	adds	r3, #4
 80043fe:	2101      	movs	r1, #1
 8004400:	4618      	mov	r0, r3
 8004402:	f000 f867 	bl	80044d4 <RCCEx_PLLSAI1_Config>
 8004406:	4603      	mov	r3, r0
 8004408:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800440a:	7cfb      	ldrb	r3, [r7, #19]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d001      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004410:	7cfb      	ldrb	r3, [r7, #19]
 8004412:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d02f      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004420:	4b2b      	ldr	r3, [pc, #172]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004426:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800442e:	4928      	ldr	r1, [pc, #160]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004430:	4313      	orrs	r3, r2
 8004432:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800443a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800443e:	d10d      	bne.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	3304      	adds	r3, #4
 8004444:	2102      	movs	r1, #2
 8004446:	4618      	mov	r0, r3
 8004448:	f000 f844 	bl	80044d4 <RCCEx_PLLSAI1_Config>
 800444c:	4603      	mov	r3, r0
 800444e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004450:	7cfb      	ldrb	r3, [r7, #19]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d014      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004456:	7cfb      	ldrb	r3, [r7, #19]
 8004458:	74bb      	strb	r3, [r7, #18]
 800445a:	e011      	b.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004460:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004464:	d10c      	bne.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	3320      	adds	r3, #32
 800446a:	2102      	movs	r1, #2
 800446c:	4618      	mov	r0, r3
 800446e:	f000 f925 	bl	80046bc <RCCEx_PLLSAI2_Config>
 8004472:	4603      	mov	r3, r0
 8004474:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004476:	7cfb      	ldrb	r3, [r7, #19]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d001      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800447c:	7cfb      	ldrb	r3, [r7, #19]
 800447e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004488:	2b00      	cmp	r3, #0
 800448a:	d00a      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800448c:	4b10      	ldr	r3, [pc, #64]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800448e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004492:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800449a:	490d      	ldr	r1, [pc, #52]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800449c:	4313      	orrs	r3, r2
 800449e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d00b      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80044ae:	4b08      	ldr	r3, [pc, #32]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80044b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044be:	4904      	ldr	r1, [pc, #16]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80044c6:	7cbb      	ldrb	r3, [r7, #18]
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3718      	adds	r7, #24
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	40021000 	.word	0x40021000

080044d4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044de:	2300      	movs	r3, #0
 80044e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80044e2:	4b75      	ldr	r3, [pc, #468]	; (80046b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	f003 0303 	and.w	r3, r3, #3
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d018      	beq.n	8004520 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80044ee:	4b72      	ldr	r3, [pc, #456]	; (80046b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	f003 0203 	and.w	r2, r3, #3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d10d      	bne.n	800451a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
       ||
 8004502:	2b00      	cmp	r3, #0
 8004504:	d009      	beq.n	800451a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004506:	4b6c      	ldr	r3, [pc, #432]	; (80046b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	091b      	lsrs	r3, r3, #4
 800450c:	f003 0307 	and.w	r3, r3, #7
 8004510:	1c5a      	adds	r2, r3, #1
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
       ||
 8004516:	429a      	cmp	r2, r3
 8004518:	d047      	beq.n	80045aa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	73fb      	strb	r3, [r7, #15]
 800451e:	e044      	b.n	80045aa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	2b03      	cmp	r3, #3
 8004526:	d018      	beq.n	800455a <RCCEx_PLLSAI1_Config+0x86>
 8004528:	2b03      	cmp	r3, #3
 800452a:	d825      	bhi.n	8004578 <RCCEx_PLLSAI1_Config+0xa4>
 800452c:	2b01      	cmp	r3, #1
 800452e:	d002      	beq.n	8004536 <RCCEx_PLLSAI1_Config+0x62>
 8004530:	2b02      	cmp	r3, #2
 8004532:	d009      	beq.n	8004548 <RCCEx_PLLSAI1_Config+0x74>
 8004534:	e020      	b.n	8004578 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004536:	4b60      	ldr	r3, [pc, #384]	; (80046b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d11d      	bne.n	800457e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004546:	e01a      	b.n	800457e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004548:	4b5b      	ldr	r3, [pc, #364]	; (80046b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004550:	2b00      	cmp	r3, #0
 8004552:	d116      	bne.n	8004582 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004558:	e013      	b.n	8004582 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800455a:	4b57      	ldr	r3, [pc, #348]	; (80046b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d10f      	bne.n	8004586 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004566:	4b54      	ldr	r3, [pc, #336]	; (80046b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d109      	bne.n	8004586 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004576:	e006      	b.n	8004586 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	73fb      	strb	r3, [r7, #15]
      break;
 800457c:	e004      	b.n	8004588 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800457e:	bf00      	nop
 8004580:	e002      	b.n	8004588 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004582:	bf00      	nop
 8004584:	e000      	b.n	8004588 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004586:	bf00      	nop
    }

    if(status == HAL_OK)
 8004588:	7bfb      	ldrb	r3, [r7, #15]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d10d      	bne.n	80045aa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800458e:	4b4a      	ldr	r3, [pc, #296]	; (80046b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6819      	ldr	r1, [r3, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	3b01      	subs	r3, #1
 80045a0:	011b      	lsls	r3, r3, #4
 80045a2:	430b      	orrs	r3, r1
 80045a4:	4944      	ldr	r1, [pc, #272]	; (80046b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045a6:	4313      	orrs	r3, r2
 80045a8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80045aa:	7bfb      	ldrb	r3, [r7, #15]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d17d      	bne.n	80046ac <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80045b0:	4b41      	ldr	r3, [pc, #260]	; (80046b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a40      	ldr	r2, [pc, #256]	; (80046b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045b6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80045ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045bc:	f7fd fbb6 	bl	8001d2c <HAL_GetTick>
 80045c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80045c2:	e009      	b.n	80045d8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045c4:	f7fd fbb2 	bl	8001d2c <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d902      	bls.n	80045d8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	73fb      	strb	r3, [r7, #15]
        break;
 80045d6:	e005      	b.n	80045e4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80045d8:	4b37      	ldr	r3, [pc, #220]	; (80046b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d1ef      	bne.n	80045c4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80045e4:	7bfb      	ldrb	r3, [r7, #15]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d160      	bne.n	80046ac <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d111      	bne.n	8004614 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045f0:	4b31      	ldr	r3, [pc, #196]	; (80046b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045f2:	691b      	ldr	r3, [r3, #16]
 80045f4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80045f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	6892      	ldr	r2, [r2, #8]
 8004600:	0211      	lsls	r1, r2, #8
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	68d2      	ldr	r2, [r2, #12]
 8004606:	0912      	lsrs	r2, r2, #4
 8004608:	0452      	lsls	r2, r2, #17
 800460a:	430a      	orrs	r2, r1
 800460c:	492a      	ldr	r1, [pc, #168]	; (80046b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800460e:	4313      	orrs	r3, r2
 8004610:	610b      	str	r3, [r1, #16]
 8004612:	e027      	b.n	8004664 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	2b01      	cmp	r3, #1
 8004618:	d112      	bne.n	8004640 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800461a:	4b27      	ldr	r3, [pc, #156]	; (80046b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004622:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	6892      	ldr	r2, [r2, #8]
 800462a:	0211      	lsls	r1, r2, #8
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	6912      	ldr	r2, [r2, #16]
 8004630:	0852      	lsrs	r2, r2, #1
 8004632:	3a01      	subs	r2, #1
 8004634:	0552      	lsls	r2, r2, #21
 8004636:	430a      	orrs	r2, r1
 8004638:	491f      	ldr	r1, [pc, #124]	; (80046b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800463a:	4313      	orrs	r3, r2
 800463c:	610b      	str	r3, [r1, #16]
 800463e:	e011      	b.n	8004664 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004640:	4b1d      	ldr	r3, [pc, #116]	; (80046b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004642:	691b      	ldr	r3, [r3, #16]
 8004644:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004648:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	6892      	ldr	r2, [r2, #8]
 8004650:	0211      	lsls	r1, r2, #8
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	6952      	ldr	r2, [r2, #20]
 8004656:	0852      	lsrs	r2, r2, #1
 8004658:	3a01      	subs	r2, #1
 800465a:	0652      	lsls	r2, r2, #25
 800465c:	430a      	orrs	r2, r1
 800465e:	4916      	ldr	r1, [pc, #88]	; (80046b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004660:	4313      	orrs	r3, r2
 8004662:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004664:	4b14      	ldr	r3, [pc, #80]	; (80046b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a13      	ldr	r2, [pc, #76]	; (80046b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800466a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800466e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004670:	f7fd fb5c 	bl	8001d2c <HAL_GetTick>
 8004674:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004676:	e009      	b.n	800468c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004678:	f7fd fb58 	bl	8001d2c <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	2b02      	cmp	r3, #2
 8004684:	d902      	bls.n	800468c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	73fb      	strb	r3, [r7, #15]
          break;
 800468a:	e005      	b.n	8004698 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800468c:	4b0a      	ldr	r3, [pc, #40]	; (80046b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d0ef      	beq.n	8004678 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004698:	7bfb      	ldrb	r3, [r7, #15]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d106      	bne.n	80046ac <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800469e:	4b06      	ldr	r3, [pc, #24]	; (80046b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046a0:	691a      	ldr	r2, [r3, #16]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	4904      	ldr	r1, [pc, #16]	; (80046b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046a8:	4313      	orrs	r3, r2
 80046aa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80046ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3710      	adds	r7, #16
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	40021000 	.word	0x40021000

080046bc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046c6:	2300      	movs	r3, #0
 80046c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80046ca:	4b6a      	ldr	r3, [pc, #424]	; (8004874 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	f003 0303 	and.w	r3, r3, #3
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d018      	beq.n	8004708 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80046d6:	4b67      	ldr	r3, [pc, #412]	; (8004874 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	f003 0203 	and.w	r2, r3, #3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d10d      	bne.n	8004702 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
       ||
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d009      	beq.n	8004702 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80046ee:	4b61      	ldr	r3, [pc, #388]	; (8004874 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	091b      	lsrs	r3, r3, #4
 80046f4:	f003 0307 	and.w	r3, r3, #7
 80046f8:	1c5a      	adds	r2, r3, #1
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
       ||
 80046fe:	429a      	cmp	r2, r3
 8004700:	d047      	beq.n	8004792 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	73fb      	strb	r3, [r7, #15]
 8004706:	e044      	b.n	8004792 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2b03      	cmp	r3, #3
 800470e:	d018      	beq.n	8004742 <RCCEx_PLLSAI2_Config+0x86>
 8004710:	2b03      	cmp	r3, #3
 8004712:	d825      	bhi.n	8004760 <RCCEx_PLLSAI2_Config+0xa4>
 8004714:	2b01      	cmp	r3, #1
 8004716:	d002      	beq.n	800471e <RCCEx_PLLSAI2_Config+0x62>
 8004718:	2b02      	cmp	r3, #2
 800471a:	d009      	beq.n	8004730 <RCCEx_PLLSAI2_Config+0x74>
 800471c:	e020      	b.n	8004760 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800471e:	4b55      	ldr	r3, [pc, #340]	; (8004874 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 0302 	and.w	r3, r3, #2
 8004726:	2b00      	cmp	r3, #0
 8004728:	d11d      	bne.n	8004766 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800472e:	e01a      	b.n	8004766 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004730:	4b50      	ldr	r3, [pc, #320]	; (8004874 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004738:	2b00      	cmp	r3, #0
 800473a:	d116      	bne.n	800476a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004740:	e013      	b.n	800476a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004742:	4b4c      	ldr	r3, [pc, #304]	; (8004874 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d10f      	bne.n	800476e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800474e:	4b49      	ldr	r3, [pc, #292]	; (8004874 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d109      	bne.n	800476e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800475e:	e006      	b.n	800476e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	73fb      	strb	r3, [r7, #15]
      break;
 8004764:	e004      	b.n	8004770 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004766:	bf00      	nop
 8004768:	e002      	b.n	8004770 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800476a:	bf00      	nop
 800476c:	e000      	b.n	8004770 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800476e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004770:	7bfb      	ldrb	r3, [r7, #15]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d10d      	bne.n	8004792 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004776:	4b3f      	ldr	r3, [pc, #252]	; (8004874 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6819      	ldr	r1, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	3b01      	subs	r3, #1
 8004788:	011b      	lsls	r3, r3, #4
 800478a:	430b      	orrs	r3, r1
 800478c:	4939      	ldr	r1, [pc, #228]	; (8004874 <RCCEx_PLLSAI2_Config+0x1b8>)
 800478e:	4313      	orrs	r3, r2
 8004790:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004792:	7bfb      	ldrb	r3, [r7, #15]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d167      	bne.n	8004868 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004798:	4b36      	ldr	r3, [pc, #216]	; (8004874 <RCCEx_PLLSAI2_Config+0x1b8>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a35      	ldr	r2, [pc, #212]	; (8004874 <RCCEx_PLLSAI2_Config+0x1b8>)
 800479e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047a4:	f7fd fac2 	bl	8001d2c <HAL_GetTick>
 80047a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80047aa:	e009      	b.n	80047c0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80047ac:	f7fd fabe 	bl	8001d2c <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d902      	bls.n	80047c0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	73fb      	strb	r3, [r7, #15]
        break;
 80047be:	e005      	b.n	80047cc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80047c0:	4b2c      	ldr	r3, [pc, #176]	; (8004874 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d1ef      	bne.n	80047ac <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80047cc:	7bfb      	ldrb	r3, [r7, #15]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d14a      	bne.n	8004868 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d111      	bne.n	80047fc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80047d8:	4b26      	ldr	r3, [pc, #152]	; (8004874 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047da:	695b      	ldr	r3, [r3, #20]
 80047dc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80047e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	6892      	ldr	r2, [r2, #8]
 80047e8:	0211      	lsls	r1, r2, #8
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	68d2      	ldr	r2, [r2, #12]
 80047ee:	0912      	lsrs	r2, r2, #4
 80047f0:	0452      	lsls	r2, r2, #17
 80047f2:	430a      	orrs	r2, r1
 80047f4:	491f      	ldr	r1, [pc, #124]	; (8004874 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	614b      	str	r3, [r1, #20]
 80047fa:	e011      	b.n	8004820 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80047fc:	4b1d      	ldr	r3, [pc, #116]	; (8004874 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047fe:	695b      	ldr	r3, [r3, #20]
 8004800:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004804:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	6892      	ldr	r2, [r2, #8]
 800480c:	0211      	lsls	r1, r2, #8
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	6912      	ldr	r2, [r2, #16]
 8004812:	0852      	lsrs	r2, r2, #1
 8004814:	3a01      	subs	r2, #1
 8004816:	0652      	lsls	r2, r2, #25
 8004818:	430a      	orrs	r2, r1
 800481a:	4916      	ldr	r1, [pc, #88]	; (8004874 <RCCEx_PLLSAI2_Config+0x1b8>)
 800481c:	4313      	orrs	r3, r2
 800481e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004820:	4b14      	ldr	r3, [pc, #80]	; (8004874 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a13      	ldr	r2, [pc, #76]	; (8004874 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004826:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800482a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800482c:	f7fd fa7e 	bl	8001d2c <HAL_GetTick>
 8004830:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004832:	e009      	b.n	8004848 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004834:	f7fd fa7a 	bl	8001d2c <HAL_GetTick>
 8004838:	4602      	mov	r2, r0
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	2b02      	cmp	r3, #2
 8004840:	d902      	bls.n	8004848 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	73fb      	strb	r3, [r7, #15]
          break;
 8004846:	e005      	b.n	8004854 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004848:	4b0a      	ldr	r3, [pc, #40]	; (8004874 <RCCEx_PLLSAI2_Config+0x1b8>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004850:	2b00      	cmp	r3, #0
 8004852:	d0ef      	beq.n	8004834 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004854:	7bfb      	ldrb	r3, [r7, #15]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d106      	bne.n	8004868 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800485a:	4b06      	ldr	r3, [pc, #24]	; (8004874 <RCCEx_PLLSAI2_Config+0x1b8>)
 800485c:	695a      	ldr	r2, [r3, #20]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	695b      	ldr	r3, [r3, #20]
 8004862:	4904      	ldr	r1, [pc, #16]	; (8004874 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004864:	4313      	orrs	r3, r2
 8004866:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004868:	7bfb      	ldrb	r3, [r7, #15]
}
 800486a:	4618      	mov	r0, r3
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	40021000 	.word	0x40021000

08004878 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d101      	bne.n	800488a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e040      	b.n	800490c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800488e:	2b00      	cmp	r3, #0
 8004890:	d106      	bne.n	80048a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f7fd f8a6 	bl	80019ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2224      	movs	r2, #36	; 0x24
 80048a4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f022 0201 	bic.w	r2, r2, #1
 80048b4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d002      	beq.n	80048c4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 fb6a 	bl	8004f98 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f000 f8af 	bl	8004a28 <UART_SetConfig>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d101      	bne.n	80048d4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e01b      	b.n	800490c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	685a      	ldr	r2, [r3, #4]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	689a      	ldr	r2, [r3, #8]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f042 0201 	orr.w	r2, r2, #1
 8004902:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f000 fbe9 	bl	80050dc <UART_CheckIdleState>
 800490a:	4603      	mov	r3, r0
}
 800490c:	4618      	mov	r0, r3
 800490e:	3708      	adds	r7, #8
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b08a      	sub	sp, #40	; 0x28
 8004918:	af02      	add	r7, sp, #8
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	603b      	str	r3, [r7, #0]
 8004920:	4613      	mov	r3, r2
 8004922:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004928:	2b20      	cmp	r3, #32
 800492a:	d178      	bne.n	8004a1e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d002      	beq.n	8004938 <HAL_UART_Transmit+0x24>
 8004932:	88fb      	ldrh	r3, [r7, #6]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d101      	bne.n	800493c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e071      	b.n	8004a20 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2200      	movs	r2, #0
 8004940:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2221      	movs	r2, #33	; 0x21
 8004948:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800494a:	f7fd f9ef 	bl	8001d2c <HAL_GetTick>
 800494e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	88fa      	ldrh	r2, [r7, #6]
 8004954:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	88fa      	ldrh	r2, [r7, #6]
 800495c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004968:	d108      	bne.n	800497c <HAL_UART_Transmit+0x68>
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d104      	bne.n	800497c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004972:	2300      	movs	r3, #0
 8004974:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	61bb      	str	r3, [r7, #24]
 800497a:	e003      	b.n	8004984 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004980:	2300      	movs	r3, #0
 8004982:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004984:	e030      	b.n	80049e8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	9300      	str	r3, [sp, #0]
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	2200      	movs	r2, #0
 800498e:	2180      	movs	r1, #128	; 0x80
 8004990:	68f8      	ldr	r0, [r7, #12]
 8004992:	f000 fc4b 	bl	800522c <UART_WaitOnFlagUntilTimeout>
 8004996:	4603      	mov	r3, r0
 8004998:	2b00      	cmp	r3, #0
 800499a:	d004      	beq.n	80049a6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2220      	movs	r2, #32
 80049a0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e03c      	b.n	8004a20 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d10b      	bne.n	80049c4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049ac:	69bb      	ldr	r3, [r7, #24]
 80049ae:	881a      	ldrh	r2, [r3, #0]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049b8:	b292      	uxth	r2, r2
 80049ba:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	3302      	adds	r3, #2
 80049c0:	61bb      	str	r3, [r7, #24]
 80049c2:	e008      	b.n	80049d6 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	781a      	ldrb	r2, [r3, #0]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	b292      	uxth	r2, r2
 80049ce:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	3301      	adds	r3, #1
 80049d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80049dc:	b29b      	uxth	r3, r3
 80049de:	3b01      	subs	r3, #1
 80049e0:	b29a      	uxth	r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d1c8      	bne.n	8004986 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	9300      	str	r3, [sp, #0]
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	2200      	movs	r2, #0
 80049fc:	2140      	movs	r1, #64	; 0x40
 80049fe:	68f8      	ldr	r0, [r7, #12]
 8004a00:	f000 fc14 	bl	800522c <UART_WaitOnFlagUntilTimeout>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d004      	beq.n	8004a14 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2220      	movs	r2, #32
 8004a0e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e005      	b.n	8004a20 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2220      	movs	r2, #32
 8004a18:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	e000      	b.n	8004a20 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004a1e:	2302      	movs	r3, #2
  }
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3720      	adds	r7, #32
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a2c:	b08a      	sub	sp, #40	; 0x28
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a32:	2300      	movs	r3, #0
 8004a34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	689a      	ldr	r2, [r3, #8]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	691b      	ldr	r3, [r3, #16]
 8004a40:	431a      	orrs	r2, r3
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	695b      	ldr	r3, [r3, #20]
 8004a46:	431a      	orrs	r2, r3
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	69db      	ldr	r3, [r3, #28]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	4ba4      	ldr	r3, [pc, #656]	; (8004ce8 <UART_SetConfig+0x2c0>)
 8004a58:	4013      	ands	r3, r2
 8004a5a:	68fa      	ldr	r2, [r7, #12]
 8004a5c:	6812      	ldr	r2, [r2, #0]
 8004a5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a60:	430b      	orrs	r3, r1
 8004a62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	68da      	ldr	r2, [r3, #12]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	430a      	orrs	r2, r1
 8004a78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a99      	ldr	r2, [pc, #612]	; (8004cec <UART_SetConfig+0x2c4>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d004      	beq.n	8004a94 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6a1b      	ldr	r3, [r3, #32]
 8004a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a90:	4313      	orrs	r3, r2
 8004a92:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aa4:	430a      	orrs	r2, r1
 8004aa6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a90      	ldr	r2, [pc, #576]	; (8004cf0 <UART_SetConfig+0x2c8>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d126      	bne.n	8004b00 <UART_SetConfig+0xd8>
 8004ab2:	4b90      	ldr	r3, [pc, #576]	; (8004cf4 <UART_SetConfig+0x2cc>)
 8004ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ab8:	f003 0303 	and.w	r3, r3, #3
 8004abc:	2b03      	cmp	r3, #3
 8004abe:	d81b      	bhi.n	8004af8 <UART_SetConfig+0xd0>
 8004ac0:	a201      	add	r2, pc, #4	; (adr r2, 8004ac8 <UART_SetConfig+0xa0>)
 8004ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ac6:	bf00      	nop
 8004ac8:	08004ad9 	.word	0x08004ad9
 8004acc:	08004ae9 	.word	0x08004ae9
 8004ad0:	08004ae1 	.word	0x08004ae1
 8004ad4:	08004af1 	.word	0x08004af1
 8004ad8:	2301      	movs	r3, #1
 8004ada:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ade:	e116      	b.n	8004d0e <UART_SetConfig+0x2e6>
 8004ae0:	2302      	movs	r3, #2
 8004ae2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ae6:	e112      	b.n	8004d0e <UART_SetConfig+0x2e6>
 8004ae8:	2304      	movs	r3, #4
 8004aea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004aee:	e10e      	b.n	8004d0e <UART_SetConfig+0x2e6>
 8004af0:	2308      	movs	r3, #8
 8004af2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004af6:	e10a      	b.n	8004d0e <UART_SetConfig+0x2e6>
 8004af8:	2310      	movs	r3, #16
 8004afa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004afe:	e106      	b.n	8004d0e <UART_SetConfig+0x2e6>
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a7c      	ldr	r2, [pc, #496]	; (8004cf8 <UART_SetConfig+0x2d0>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d138      	bne.n	8004b7c <UART_SetConfig+0x154>
 8004b0a:	4b7a      	ldr	r3, [pc, #488]	; (8004cf4 <UART_SetConfig+0x2cc>)
 8004b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b10:	f003 030c 	and.w	r3, r3, #12
 8004b14:	2b0c      	cmp	r3, #12
 8004b16:	d82d      	bhi.n	8004b74 <UART_SetConfig+0x14c>
 8004b18:	a201      	add	r2, pc, #4	; (adr r2, 8004b20 <UART_SetConfig+0xf8>)
 8004b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b1e:	bf00      	nop
 8004b20:	08004b55 	.word	0x08004b55
 8004b24:	08004b75 	.word	0x08004b75
 8004b28:	08004b75 	.word	0x08004b75
 8004b2c:	08004b75 	.word	0x08004b75
 8004b30:	08004b65 	.word	0x08004b65
 8004b34:	08004b75 	.word	0x08004b75
 8004b38:	08004b75 	.word	0x08004b75
 8004b3c:	08004b75 	.word	0x08004b75
 8004b40:	08004b5d 	.word	0x08004b5d
 8004b44:	08004b75 	.word	0x08004b75
 8004b48:	08004b75 	.word	0x08004b75
 8004b4c:	08004b75 	.word	0x08004b75
 8004b50:	08004b6d 	.word	0x08004b6d
 8004b54:	2300      	movs	r3, #0
 8004b56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b5a:	e0d8      	b.n	8004d0e <UART_SetConfig+0x2e6>
 8004b5c:	2302      	movs	r3, #2
 8004b5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b62:	e0d4      	b.n	8004d0e <UART_SetConfig+0x2e6>
 8004b64:	2304      	movs	r3, #4
 8004b66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b6a:	e0d0      	b.n	8004d0e <UART_SetConfig+0x2e6>
 8004b6c:	2308      	movs	r3, #8
 8004b6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b72:	e0cc      	b.n	8004d0e <UART_SetConfig+0x2e6>
 8004b74:	2310      	movs	r3, #16
 8004b76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b7a:	e0c8      	b.n	8004d0e <UART_SetConfig+0x2e6>
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a5e      	ldr	r2, [pc, #376]	; (8004cfc <UART_SetConfig+0x2d4>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d125      	bne.n	8004bd2 <UART_SetConfig+0x1aa>
 8004b86:	4b5b      	ldr	r3, [pc, #364]	; (8004cf4 <UART_SetConfig+0x2cc>)
 8004b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b8c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004b90:	2b30      	cmp	r3, #48	; 0x30
 8004b92:	d016      	beq.n	8004bc2 <UART_SetConfig+0x19a>
 8004b94:	2b30      	cmp	r3, #48	; 0x30
 8004b96:	d818      	bhi.n	8004bca <UART_SetConfig+0x1a2>
 8004b98:	2b20      	cmp	r3, #32
 8004b9a:	d00a      	beq.n	8004bb2 <UART_SetConfig+0x18a>
 8004b9c:	2b20      	cmp	r3, #32
 8004b9e:	d814      	bhi.n	8004bca <UART_SetConfig+0x1a2>
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d002      	beq.n	8004baa <UART_SetConfig+0x182>
 8004ba4:	2b10      	cmp	r3, #16
 8004ba6:	d008      	beq.n	8004bba <UART_SetConfig+0x192>
 8004ba8:	e00f      	b.n	8004bca <UART_SetConfig+0x1a2>
 8004baa:	2300      	movs	r3, #0
 8004bac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bb0:	e0ad      	b.n	8004d0e <UART_SetConfig+0x2e6>
 8004bb2:	2302      	movs	r3, #2
 8004bb4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bb8:	e0a9      	b.n	8004d0e <UART_SetConfig+0x2e6>
 8004bba:	2304      	movs	r3, #4
 8004bbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bc0:	e0a5      	b.n	8004d0e <UART_SetConfig+0x2e6>
 8004bc2:	2308      	movs	r3, #8
 8004bc4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bc8:	e0a1      	b.n	8004d0e <UART_SetConfig+0x2e6>
 8004bca:	2310      	movs	r3, #16
 8004bcc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bd0:	e09d      	b.n	8004d0e <UART_SetConfig+0x2e6>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a4a      	ldr	r2, [pc, #296]	; (8004d00 <UART_SetConfig+0x2d8>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d125      	bne.n	8004c28 <UART_SetConfig+0x200>
 8004bdc:	4b45      	ldr	r3, [pc, #276]	; (8004cf4 <UART_SetConfig+0x2cc>)
 8004bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004be2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004be6:	2bc0      	cmp	r3, #192	; 0xc0
 8004be8:	d016      	beq.n	8004c18 <UART_SetConfig+0x1f0>
 8004bea:	2bc0      	cmp	r3, #192	; 0xc0
 8004bec:	d818      	bhi.n	8004c20 <UART_SetConfig+0x1f8>
 8004bee:	2b80      	cmp	r3, #128	; 0x80
 8004bf0:	d00a      	beq.n	8004c08 <UART_SetConfig+0x1e0>
 8004bf2:	2b80      	cmp	r3, #128	; 0x80
 8004bf4:	d814      	bhi.n	8004c20 <UART_SetConfig+0x1f8>
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d002      	beq.n	8004c00 <UART_SetConfig+0x1d8>
 8004bfa:	2b40      	cmp	r3, #64	; 0x40
 8004bfc:	d008      	beq.n	8004c10 <UART_SetConfig+0x1e8>
 8004bfe:	e00f      	b.n	8004c20 <UART_SetConfig+0x1f8>
 8004c00:	2300      	movs	r3, #0
 8004c02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c06:	e082      	b.n	8004d0e <UART_SetConfig+0x2e6>
 8004c08:	2302      	movs	r3, #2
 8004c0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c0e:	e07e      	b.n	8004d0e <UART_SetConfig+0x2e6>
 8004c10:	2304      	movs	r3, #4
 8004c12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c16:	e07a      	b.n	8004d0e <UART_SetConfig+0x2e6>
 8004c18:	2308      	movs	r3, #8
 8004c1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c1e:	e076      	b.n	8004d0e <UART_SetConfig+0x2e6>
 8004c20:	2310      	movs	r3, #16
 8004c22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c26:	e072      	b.n	8004d0e <UART_SetConfig+0x2e6>
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a35      	ldr	r2, [pc, #212]	; (8004d04 <UART_SetConfig+0x2dc>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d12a      	bne.n	8004c88 <UART_SetConfig+0x260>
 8004c32:	4b30      	ldr	r3, [pc, #192]	; (8004cf4 <UART_SetConfig+0x2cc>)
 8004c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c40:	d01a      	beq.n	8004c78 <UART_SetConfig+0x250>
 8004c42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c46:	d81b      	bhi.n	8004c80 <UART_SetConfig+0x258>
 8004c48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c4c:	d00c      	beq.n	8004c68 <UART_SetConfig+0x240>
 8004c4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c52:	d815      	bhi.n	8004c80 <UART_SetConfig+0x258>
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d003      	beq.n	8004c60 <UART_SetConfig+0x238>
 8004c58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c5c:	d008      	beq.n	8004c70 <UART_SetConfig+0x248>
 8004c5e:	e00f      	b.n	8004c80 <UART_SetConfig+0x258>
 8004c60:	2300      	movs	r3, #0
 8004c62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c66:	e052      	b.n	8004d0e <UART_SetConfig+0x2e6>
 8004c68:	2302      	movs	r3, #2
 8004c6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c6e:	e04e      	b.n	8004d0e <UART_SetConfig+0x2e6>
 8004c70:	2304      	movs	r3, #4
 8004c72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c76:	e04a      	b.n	8004d0e <UART_SetConfig+0x2e6>
 8004c78:	2308      	movs	r3, #8
 8004c7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c7e:	e046      	b.n	8004d0e <UART_SetConfig+0x2e6>
 8004c80:	2310      	movs	r3, #16
 8004c82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c86:	e042      	b.n	8004d0e <UART_SetConfig+0x2e6>
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a17      	ldr	r2, [pc, #92]	; (8004cec <UART_SetConfig+0x2c4>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d13a      	bne.n	8004d08 <UART_SetConfig+0x2e0>
 8004c92:	4b18      	ldr	r3, [pc, #96]	; (8004cf4 <UART_SetConfig+0x2cc>)
 8004c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c98:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004c9c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ca0:	d01a      	beq.n	8004cd8 <UART_SetConfig+0x2b0>
 8004ca2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ca6:	d81b      	bhi.n	8004ce0 <UART_SetConfig+0x2b8>
 8004ca8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cac:	d00c      	beq.n	8004cc8 <UART_SetConfig+0x2a0>
 8004cae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cb2:	d815      	bhi.n	8004ce0 <UART_SetConfig+0x2b8>
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d003      	beq.n	8004cc0 <UART_SetConfig+0x298>
 8004cb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cbc:	d008      	beq.n	8004cd0 <UART_SetConfig+0x2a8>
 8004cbe:	e00f      	b.n	8004ce0 <UART_SetConfig+0x2b8>
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cc6:	e022      	b.n	8004d0e <UART_SetConfig+0x2e6>
 8004cc8:	2302      	movs	r3, #2
 8004cca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cce:	e01e      	b.n	8004d0e <UART_SetConfig+0x2e6>
 8004cd0:	2304      	movs	r3, #4
 8004cd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cd6:	e01a      	b.n	8004d0e <UART_SetConfig+0x2e6>
 8004cd8:	2308      	movs	r3, #8
 8004cda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cde:	e016      	b.n	8004d0e <UART_SetConfig+0x2e6>
 8004ce0:	2310      	movs	r3, #16
 8004ce2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ce6:	e012      	b.n	8004d0e <UART_SetConfig+0x2e6>
 8004ce8:	efff69f3 	.word	0xefff69f3
 8004cec:	40008000 	.word	0x40008000
 8004cf0:	40013800 	.word	0x40013800
 8004cf4:	40021000 	.word	0x40021000
 8004cf8:	40004400 	.word	0x40004400
 8004cfc:	40004800 	.word	0x40004800
 8004d00:	40004c00 	.word	0x40004c00
 8004d04:	40005000 	.word	0x40005000
 8004d08:	2310      	movs	r3, #16
 8004d0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a9f      	ldr	r2, [pc, #636]	; (8004f90 <UART_SetConfig+0x568>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d17a      	bne.n	8004e0e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004d18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d1c:	2b08      	cmp	r3, #8
 8004d1e:	d824      	bhi.n	8004d6a <UART_SetConfig+0x342>
 8004d20:	a201      	add	r2, pc, #4	; (adr r2, 8004d28 <UART_SetConfig+0x300>)
 8004d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d26:	bf00      	nop
 8004d28:	08004d4d 	.word	0x08004d4d
 8004d2c:	08004d6b 	.word	0x08004d6b
 8004d30:	08004d55 	.word	0x08004d55
 8004d34:	08004d6b 	.word	0x08004d6b
 8004d38:	08004d5b 	.word	0x08004d5b
 8004d3c:	08004d6b 	.word	0x08004d6b
 8004d40:	08004d6b 	.word	0x08004d6b
 8004d44:	08004d6b 	.word	0x08004d6b
 8004d48:	08004d63 	.word	0x08004d63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d4c:	f7ff f84c 	bl	8003de8 <HAL_RCC_GetPCLK1Freq>
 8004d50:	61f8      	str	r0, [r7, #28]
        break;
 8004d52:	e010      	b.n	8004d76 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d54:	4b8f      	ldr	r3, [pc, #572]	; (8004f94 <UART_SetConfig+0x56c>)
 8004d56:	61fb      	str	r3, [r7, #28]
        break;
 8004d58:	e00d      	b.n	8004d76 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d5a:	f7fe ffad 	bl	8003cb8 <HAL_RCC_GetSysClockFreq>
 8004d5e:	61f8      	str	r0, [r7, #28]
        break;
 8004d60:	e009      	b.n	8004d76 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d66:	61fb      	str	r3, [r7, #28]
        break;
 8004d68:	e005      	b.n	8004d76 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004d74:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	f000 80fb 	beq.w	8004f74 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	685a      	ldr	r2, [r3, #4]
 8004d82:	4613      	mov	r3, r2
 8004d84:	005b      	lsls	r3, r3, #1
 8004d86:	4413      	add	r3, r2
 8004d88:	69fa      	ldr	r2, [r7, #28]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d305      	bcc.n	8004d9a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004d94:	69fa      	ldr	r2, [r7, #28]
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d903      	bls.n	8004da2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004da0:	e0e8      	b.n	8004f74 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	2200      	movs	r2, #0
 8004da6:	461c      	mov	r4, r3
 8004da8:	4615      	mov	r5, r2
 8004daa:	f04f 0200 	mov.w	r2, #0
 8004dae:	f04f 0300 	mov.w	r3, #0
 8004db2:	022b      	lsls	r3, r5, #8
 8004db4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004db8:	0222      	lsls	r2, r4, #8
 8004dba:	68f9      	ldr	r1, [r7, #12]
 8004dbc:	6849      	ldr	r1, [r1, #4]
 8004dbe:	0849      	lsrs	r1, r1, #1
 8004dc0:	2000      	movs	r0, #0
 8004dc2:	4688      	mov	r8, r1
 8004dc4:	4681      	mov	r9, r0
 8004dc6:	eb12 0a08 	adds.w	sl, r2, r8
 8004dca:	eb43 0b09 	adc.w	fp, r3, r9
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	603b      	str	r3, [r7, #0]
 8004dd6:	607a      	str	r2, [r7, #4]
 8004dd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ddc:	4650      	mov	r0, sl
 8004dde:	4659      	mov	r1, fp
 8004de0:	f7fb fe8c 	bl	8000afc <__aeabi_uldivmod>
 8004de4:	4602      	mov	r2, r0
 8004de6:	460b      	mov	r3, r1
 8004de8:	4613      	mov	r3, r2
 8004dea:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004dec:	69bb      	ldr	r3, [r7, #24]
 8004dee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004df2:	d308      	bcc.n	8004e06 <UART_SetConfig+0x3de>
 8004df4:	69bb      	ldr	r3, [r7, #24]
 8004df6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dfa:	d204      	bcs.n	8004e06 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	69ba      	ldr	r2, [r7, #24]
 8004e02:	60da      	str	r2, [r3, #12]
 8004e04:	e0b6      	b.n	8004f74 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004e0c:	e0b2      	b.n	8004f74 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	69db      	ldr	r3, [r3, #28]
 8004e12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e16:	d15e      	bne.n	8004ed6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004e18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e1c:	2b08      	cmp	r3, #8
 8004e1e:	d828      	bhi.n	8004e72 <UART_SetConfig+0x44a>
 8004e20:	a201      	add	r2, pc, #4	; (adr r2, 8004e28 <UART_SetConfig+0x400>)
 8004e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e26:	bf00      	nop
 8004e28:	08004e4d 	.word	0x08004e4d
 8004e2c:	08004e55 	.word	0x08004e55
 8004e30:	08004e5d 	.word	0x08004e5d
 8004e34:	08004e73 	.word	0x08004e73
 8004e38:	08004e63 	.word	0x08004e63
 8004e3c:	08004e73 	.word	0x08004e73
 8004e40:	08004e73 	.word	0x08004e73
 8004e44:	08004e73 	.word	0x08004e73
 8004e48:	08004e6b 	.word	0x08004e6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e4c:	f7fe ffcc 	bl	8003de8 <HAL_RCC_GetPCLK1Freq>
 8004e50:	61f8      	str	r0, [r7, #28]
        break;
 8004e52:	e014      	b.n	8004e7e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e54:	f7fe ffde 	bl	8003e14 <HAL_RCC_GetPCLK2Freq>
 8004e58:	61f8      	str	r0, [r7, #28]
        break;
 8004e5a:	e010      	b.n	8004e7e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e5c:	4b4d      	ldr	r3, [pc, #308]	; (8004f94 <UART_SetConfig+0x56c>)
 8004e5e:	61fb      	str	r3, [r7, #28]
        break;
 8004e60:	e00d      	b.n	8004e7e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e62:	f7fe ff29 	bl	8003cb8 <HAL_RCC_GetSysClockFreq>
 8004e66:	61f8      	str	r0, [r7, #28]
        break;
 8004e68:	e009      	b.n	8004e7e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e6e:	61fb      	str	r3, [r7, #28]
        break;
 8004e70:	e005      	b.n	8004e7e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004e72:	2300      	movs	r3, #0
 8004e74:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004e7c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d077      	beq.n	8004f74 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	005a      	lsls	r2, r3, #1
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	085b      	lsrs	r3, r3, #1
 8004e8e:	441a      	add	r2, r3
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e98:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	2b0f      	cmp	r3, #15
 8004e9e:	d916      	bls.n	8004ece <UART_SetConfig+0x4a6>
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ea6:	d212      	bcs.n	8004ece <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ea8:	69bb      	ldr	r3, [r7, #24]
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	f023 030f 	bic.w	r3, r3, #15
 8004eb0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	085b      	lsrs	r3, r3, #1
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	f003 0307 	and.w	r3, r3, #7
 8004ebc:	b29a      	uxth	r2, r3
 8004ebe:	8afb      	ldrh	r3, [r7, #22]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	8afa      	ldrh	r2, [r7, #22]
 8004eca:	60da      	str	r2, [r3, #12]
 8004ecc:	e052      	b.n	8004f74 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004ed4:	e04e      	b.n	8004f74 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ed6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004eda:	2b08      	cmp	r3, #8
 8004edc:	d827      	bhi.n	8004f2e <UART_SetConfig+0x506>
 8004ede:	a201      	add	r2, pc, #4	; (adr r2, 8004ee4 <UART_SetConfig+0x4bc>)
 8004ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ee4:	08004f09 	.word	0x08004f09
 8004ee8:	08004f11 	.word	0x08004f11
 8004eec:	08004f19 	.word	0x08004f19
 8004ef0:	08004f2f 	.word	0x08004f2f
 8004ef4:	08004f1f 	.word	0x08004f1f
 8004ef8:	08004f2f 	.word	0x08004f2f
 8004efc:	08004f2f 	.word	0x08004f2f
 8004f00:	08004f2f 	.word	0x08004f2f
 8004f04:	08004f27 	.word	0x08004f27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f08:	f7fe ff6e 	bl	8003de8 <HAL_RCC_GetPCLK1Freq>
 8004f0c:	61f8      	str	r0, [r7, #28]
        break;
 8004f0e:	e014      	b.n	8004f3a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f10:	f7fe ff80 	bl	8003e14 <HAL_RCC_GetPCLK2Freq>
 8004f14:	61f8      	str	r0, [r7, #28]
        break;
 8004f16:	e010      	b.n	8004f3a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f18:	4b1e      	ldr	r3, [pc, #120]	; (8004f94 <UART_SetConfig+0x56c>)
 8004f1a:	61fb      	str	r3, [r7, #28]
        break;
 8004f1c:	e00d      	b.n	8004f3a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f1e:	f7fe fecb 	bl	8003cb8 <HAL_RCC_GetSysClockFreq>
 8004f22:	61f8      	str	r0, [r7, #28]
        break;
 8004f24:	e009      	b.n	8004f3a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f2a:	61fb      	str	r3, [r7, #28]
        break;
 8004f2c:	e005      	b.n	8004f3a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004f38:	bf00      	nop
    }

    if (pclk != 0U)
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d019      	beq.n	8004f74 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	085a      	lsrs	r2, r3, #1
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	441a      	add	r2, r3
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f52:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	2b0f      	cmp	r3, #15
 8004f58:	d909      	bls.n	8004f6e <UART_SetConfig+0x546>
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f60:	d205      	bcs.n	8004f6e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f62:	69bb      	ldr	r3, [r7, #24]
 8004f64:	b29a      	uxth	r2, r3
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	60da      	str	r2, [r3, #12]
 8004f6c:	e002      	b.n	8004f74 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2200      	movs	r2, #0
 8004f78:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004f80:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3728      	adds	r7, #40	; 0x28
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f8e:	bf00      	nop
 8004f90:	40008000 	.word	0x40008000
 8004f94:	00f42400 	.word	0x00f42400

08004f98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa4:	f003 0308 	and.w	r3, r3, #8
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d00a      	beq.n	8004fc2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	430a      	orrs	r2, r1
 8004fc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc6:	f003 0301 	and.w	r3, r3, #1
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d00a      	beq.n	8004fe4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	430a      	orrs	r2, r1
 8004fe2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe8:	f003 0302 	and.w	r3, r3, #2
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d00a      	beq.n	8005006 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	430a      	orrs	r2, r1
 8005004:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500a:	f003 0304 	and.w	r3, r3, #4
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00a      	beq.n	8005028 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	430a      	orrs	r2, r1
 8005026:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502c:	f003 0310 	and.w	r3, r3, #16
 8005030:	2b00      	cmp	r3, #0
 8005032:	d00a      	beq.n	800504a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	430a      	orrs	r2, r1
 8005048:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504e:	f003 0320 	and.w	r3, r3, #32
 8005052:	2b00      	cmp	r3, #0
 8005054:	d00a      	beq.n	800506c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	430a      	orrs	r2, r1
 800506a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005074:	2b00      	cmp	r3, #0
 8005076:	d01a      	beq.n	80050ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	430a      	orrs	r2, r1
 800508c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005092:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005096:	d10a      	bne.n	80050ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	430a      	orrs	r2, r1
 80050ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d00a      	beq.n	80050d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	430a      	orrs	r2, r1
 80050ce:	605a      	str	r2, [r3, #4]
  }
}
 80050d0:	bf00      	nop
 80050d2:	370c      	adds	r7, #12
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr

080050dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b098      	sub	sp, #96	; 0x60
 80050e0:	af02      	add	r7, sp, #8
 80050e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80050ec:	f7fc fe1e 	bl	8001d2c <HAL_GetTick>
 80050f0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 0308 	and.w	r3, r3, #8
 80050fc:	2b08      	cmp	r3, #8
 80050fe:	d12e      	bne.n	800515e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005100:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005104:	9300      	str	r3, [sp, #0]
 8005106:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005108:	2200      	movs	r2, #0
 800510a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 f88c 	bl	800522c <UART_WaitOnFlagUntilTimeout>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d021      	beq.n	800515e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005122:	e853 3f00 	ldrex	r3, [r3]
 8005126:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800512a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800512e:	653b      	str	r3, [r7, #80]	; 0x50
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	461a      	mov	r2, r3
 8005136:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005138:	647b      	str	r3, [r7, #68]	; 0x44
 800513a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800513c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800513e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005140:	e841 2300 	strex	r3, r2, [r1]
 8005144:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005146:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005148:	2b00      	cmp	r3, #0
 800514a:	d1e6      	bne.n	800511a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2220      	movs	r2, #32
 8005150:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e062      	b.n	8005224 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 0304 	and.w	r3, r3, #4
 8005168:	2b04      	cmp	r3, #4
 800516a:	d149      	bne.n	8005200 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800516c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005170:	9300      	str	r3, [sp, #0]
 8005172:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005174:	2200      	movs	r2, #0
 8005176:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 f856 	bl	800522c <UART_WaitOnFlagUntilTimeout>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d03c      	beq.n	8005200 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800518c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518e:	e853 3f00 	ldrex	r3, [r3]
 8005192:	623b      	str	r3, [r7, #32]
   return(result);
 8005194:	6a3b      	ldr	r3, [r7, #32]
 8005196:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800519a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	461a      	mov	r2, r3
 80051a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051a4:	633b      	str	r3, [r7, #48]	; 0x30
 80051a6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80051aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051ac:	e841 2300 	strex	r3, r2, [r1]
 80051b0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80051b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d1e6      	bne.n	8005186 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	3308      	adds	r3, #8
 80051be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	e853 3f00 	ldrex	r3, [r3]
 80051c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f023 0301 	bic.w	r3, r3, #1
 80051ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	3308      	adds	r3, #8
 80051d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051d8:	61fa      	str	r2, [r7, #28]
 80051da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051dc:	69b9      	ldr	r1, [r7, #24]
 80051de:	69fa      	ldr	r2, [r7, #28]
 80051e0:	e841 2300 	strex	r3, r2, [r1]
 80051e4:	617b      	str	r3, [r7, #20]
   return(result);
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d1e5      	bne.n	80051b8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2220      	movs	r2, #32
 80051f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051fc:	2303      	movs	r3, #3
 80051fe:	e011      	b.n	8005224 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2220      	movs	r2, #32
 8005204:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2220      	movs	r2, #32
 800520a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005222:	2300      	movs	r3, #0
}
 8005224:	4618      	mov	r0, r3
 8005226:	3758      	adds	r7, #88	; 0x58
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	603b      	str	r3, [r7, #0]
 8005238:	4613      	mov	r3, r2
 800523a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800523c:	e049      	b.n	80052d2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005244:	d045      	beq.n	80052d2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005246:	f7fc fd71 	bl	8001d2c <HAL_GetTick>
 800524a:	4602      	mov	r2, r0
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	1ad3      	subs	r3, r2, r3
 8005250:	69ba      	ldr	r2, [r7, #24]
 8005252:	429a      	cmp	r2, r3
 8005254:	d302      	bcc.n	800525c <UART_WaitOnFlagUntilTimeout+0x30>
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d101      	bne.n	8005260 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800525c:	2303      	movs	r3, #3
 800525e:	e048      	b.n	80052f2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 0304 	and.w	r3, r3, #4
 800526a:	2b00      	cmp	r3, #0
 800526c:	d031      	beq.n	80052d2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	69db      	ldr	r3, [r3, #28]
 8005274:	f003 0308 	and.w	r3, r3, #8
 8005278:	2b08      	cmp	r3, #8
 800527a:	d110      	bne.n	800529e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2208      	movs	r2, #8
 8005282:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005284:	68f8      	ldr	r0, [r7, #12]
 8005286:	f000 f838 	bl	80052fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2208      	movs	r2, #8
 800528e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2200      	movs	r2, #0
 8005296:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e029      	b.n	80052f2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	69db      	ldr	r3, [r3, #28]
 80052a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052ac:	d111      	bne.n	80052d2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80052b8:	68f8      	ldr	r0, [r7, #12]
 80052ba:	f000 f81e 	bl	80052fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2220      	movs	r2, #32
 80052c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	e00f      	b.n	80052f2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	69da      	ldr	r2, [r3, #28]
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	4013      	ands	r3, r2
 80052dc:	68ba      	ldr	r2, [r7, #8]
 80052de:	429a      	cmp	r2, r3
 80052e0:	bf0c      	ite	eq
 80052e2:	2301      	moveq	r3, #1
 80052e4:	2300      	movne	r3, #0
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	461a      	mov	r2, r3
 80052ea:	79fb      	ldrb	r3, [r7, #7]
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d0a6      	beq.n	800523e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3710      	adds	r7, #16
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}

080052fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052fa:	b480      	push	{r7}
 80052fc:	b095      	sub	sp, #84	; 0x54
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800530a:	e853 3f00 	ldrex	r3, [r3]
 800530e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005312:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005316:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	461a      	mov	r2, r3
 800531e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005320:	643b      	str	r3, [r7, #64]	; 0x40
 8005322:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005324:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005326:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005328:	e841 2300 	strex	r3, r2, [r1]
 800532c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800532e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005330:	2b00      	cmp	r3, #0
 8005332:	d1e6      	bne.n	8005302 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	3308      	adds	r3, #8
 800533a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800533c:	6a3b      	ldr	r3, [r7, #32]
 800533e:	e853 3f00 	ldrex	r3, [r3]
 8005342:	61fb      	str	r3, [r7, #28]
   return(result);
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	f023 0301 	bic.w	r3, r3, #1
 800534a:	64bb      	str	r3, [r7, #72]	; 0x48
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	3308      	adds	r3, #8
 8005352:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005354:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005356:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005358:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800535a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800535c:	e841 2300 	strex	r3, r2, [r1]
 8005360:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005364:	2b00      	cmp	r3, #0
 8005366:	d1e5      	bne.n	8005334 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800536c:	2b01      	cmp	r3, #1
 800536e:	d118      	bne.n	80053a2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	e853 3f00 	ldrex	r3, [r3]
 800537c:	60bb      	str	r3, [r7, #8]
   return(result);
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	f023 0310 	bic.w	r3, r3, #16
 8005384:	647b      	str	r3, [r7, #68]	; 0x44
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	461a      	mov	r2, r3
 800538c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800538e:	61bb      	str	r3, [r7, #24]
 8005390:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005392:	6979      	ldr	r1, [r7, #20]
 8005394:	69ba      	ldr	r2, [r7, #24]
 8005396:	e841 2300 	strex	r3, r2, [r1]
 800539a:	613b      	str	r3, [r7, #16]
   return(result);
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d1e6      	bne.n	8005370 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2220      	movs	r2, #32
 80053a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80053b6:	bf00      	nop
 80053b8:	3754      	adds	r7, #84	; 0x54
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr
	...

080053c4 <siprintf>:
 80053c4:	b40e      	push	{r1, r2, r3}
 80053c6:	b500      	push	{lr}
 80053c8:	b09c      	sub	sp, #112	; 0x70
 80053ca:	ab1d      	add	r3, sp, #116	; 0x74
 80053cc:	9002      	str	r0, [sp, #8]
 80053ce:	9006      	str	r0, [sp, #24]
 80053d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80053d4:	4809      	ldr	r0, [pc, #36]	; (80053fc <siprintf+0x38>)
 80053d6:	9107      	str	r1, [sp, #28]
 80053d8:	9104      	str	r1, [sp, #16]
 80053da:	4909      	ldr	r1, [pc, #36]	; (8005400 <siprintf+0x3c>)
 80053dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80053e0:	9105      	str	r1, [sp, #20]
 80053e2:	6800      	ldr	r0, [r0, #0]
 80053e4:	9301      	str	r3, [sp, #4]
 80053e6:	a902      	add	r1, sp, #8
 80053e8:	f000 f89a 	bl	8005520 <_svfiprintf_r>
 80053ec:	9b02      	ldr	r3, [sp, #8]
 80053ee:	2200      	movs	r2, #0
 80053f0:	701a      	strb	r2, [r3, #0]
 80053f2:	b01c      	add	sp, #112	; 0x70
 80053f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80053f8:	b003      	add	sp, #12
 80053fa:	4770      	bx	lr
 80053fc:	20000058 	.word	0x20000058
 8005400:	ffff0208 	.word	0xffff0208

08005404 <memset>:
 8005404:	4402      	add	r2, r0
 8005406:	4603      	mov	r3, r0
 8005408:	4293      	cmp	r3, r2
 800540a:	d100      	bne.n	800540e <memset+0xa>
 800540c:	4770      	bx	lr
 800540e:	f803 1b01 	strb.w	r1, [r3], #1
 8005412:	e7f9      	b.n	8005408 <memset+0x4>

08005414 <__errno>:
 8005414:	4b01      	ldr	r3, [pc, #4]	; (800541c <__errno+0x8>)
 8005416:	6818      	ldr	r0, [r3, #0]
 8005418:	4770      	bx	lr
 800541a:	bf00      	nop
 800541c:	20000058 	.word	0x20000058

08005420 <__libc_init_array>:
 8005420:	b570      	push	{r4, r5, r6, lr}
 8005422:	4d0d      	ldr	r5, [pc, #52]	; (8005458 <__libc_init_array+0x38>)
 8005424:	4c0d      	ldr	r4, [pc, #52]	; (800545c <__libc_init_array+0x3c>)
 8005426:	1b64      	subs	r4, r4, r5
 8005428:	10a4      	asrs	r4, r4, #2
 800542a:	2600      	movs	r6, #0
 800542c:	42a6      	cmp	r6, r4
 800542e:	d109      	bne.n	8005444 <__libc_init_array+0x24>
 8005430:	4d0b      	ldr	r5, [pc, #44]	; (8005460 <__libc_init_array+0x40>)
 8005432:	4c0c      	ldr	r4, [pc, #48]	; (8005464 <__libc_init_array+0x44>)
 8005434:	f000 fc6a 	bl	8005d0c <_init>
 8005438:	1b64      	subs	r4, r4, r5
 800543a:	10a4      	asrs	r4, r4, #2
 800543c:	2600      	movs	r6, #0
 800543e:	42a6      	cmp	r6, r4
 8005440:	d105      	bne.n	800544e <__libc_init_array+0x2e>
 8005442:	bd70      	pop	{r4, r5, r6, pc}
 8005444:	f855 3b04 	ldr.w	r3, [r5], #4
 8005448:	4798      	blx	r3
 800544a:	3601      	adds	r6, #1
 800544c:	e7ee      	b.n	800542c <__libc_init_array+0xc>
 800544e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005452:	4798      	blx	r3
 8005454:	3601      	adds	r6, #1
 8005456:	e7f2      	b.n	800543e <__libc_init_array+0x1e>
 8005458:	08005db0 	.word	0x08005db0
 800545c:	08005db0 	.word	0x08005db0
 8005460:	08005db0 	.word	0x08005db0
 8005464:	08005db4 	.word	0x08005db4

08005468 <__retarget_lock_acquire_recursive>:
 8005468:	4770      	bx	lr

0800546a <__retarget_lock_release_recursive>:
 800546a:	4770      	bx	lr

0800546c <__ssputs_r>:
 800546c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005470:	688e      	ldr	r6, [r1, #8]
 8005472:	461f      	mov	r7, r3
 8005474:	42be      	cmp	r6, r7
 8005476:	680b      	ldr	r3, [r1, #0]
 8005478:	4682      	mov	sl, r0
 800547a:	460c      	mov	r4, r1
 800547c:	4690      	mov	r8, r2
 800547e:	d82c      	bhi.n	80054da <__ssputs_r+0x6e>
 8005480:	898a      	ldrh	r2, [r1, #12]
 8005482:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005486:	d026      	beq.n	80054d6 <__ssputs_r+0x6a>
 8005488:	6965      	ldr	r5, [r4, #20]
 800548a:	6909      	ldr	r1, [r1, #16]
 800548c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005490:	eba3 0901 	sub.w	r9, r3, r1
 8005494:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005498:	1c7b      	adds	r3, r7, #1
 800549a:	444b      	add	r3, r9
 800549c:	106d      	asrs	r5, r5, #1
 800549e:	429d      	cmp	r5, r3
 80054a0:	bf38      	it	cc
 80054a2:	461d      	movcc	r5, r3
 80054a4:	0553      	lsls	r3, r2, #21
 80054a6:	d527      	bpl.n	80054f8 <__ssputs_r+0x8c>
 80054a8:	4629      	mov	r1, r5
 80054aa:	f000 f957 	bl	800575c <_malloc_r>
 80054ae:	4606      	mov	r6, r0
 80054b0:	b360      	cbz	r0, 800550c <__ssputs_r+0xa0>
 80054b2:	6921      	ldr	r1, [r4, #16]
 80054b4:	464a      	mov	r2, r9
 80054b6:	f000 fbc7 	bl	8005c48 <memcpy>
 80054ba:	89a3      	ldrh	r3, [r4, #12]
 80054bc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80054c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054c4:	81a3      	strh	r3, [r4, #12]
 80054c6:	6126      	str	r6, [r4, #16]
 80054c8:	6165      	str	r5, [r4, #20]
 80054ca:	444e      	add	r6, r9
 80054cc:	eba5 0509 	sub.w	r5, r5, r9
 80054d0:	6026      	str	r6, [r4, #0]
 80054d2:	60a5      	str	r5, [r4, #8]
 80054d4:	463e      	mov	r6, r7
 80054d6:	42be      	cmp	r6, r7
 80054d8:	d900      	bls.n	80054dc <__ssputs_r+0x70>
 80054da:	463e      	mov	r6, r7
 80054dc:	6820      	ldr	r0, [r4, #0]
 80054de:	4632      	mov	r2, r6
 80054e0:	4641      	mov	r1, r8
 80054e2:	f000 fb86 	bl	8005bf2 <memmove>
 80054e6:	68a3      	ldr	r3, [r4, #8]
 80054e8:	1b9b      	subs	r3, r3, r6
 80054ea:	60a3      	str	r3, [r4, #8]
 80054ec:	6823      	ldr	r3, [r4, #0]
 80054ee:	4433      	add	r3, r6
 80054f0:	6023      	str	r3, [r4, #0]
 80054f2:	2000      	movs	r0, #0
 80054f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054f8:	462a      	mov	r2, r5
 80054fa:	f000 fb4b 	bl	8005b94 <_realloc_r>
 80054fe:	4606      	mov	r6, r0
 8005500:	2800      	cmp	r0, #0
 8005502:	d1e0      	bne.n	80054c6 <__ssputs_r+0x5a>
 8005504:	6921      	ldr	r1, [r4, #16]
 8005506:	4650      	mov	r0, sl
 8005508:	f000 fbac 	bl	8005c64 <_free_r>
 800550c:	230c      	movs	r3, #12
 800550e:	f8ca 3000 	str.w	r3, [sl]
 8005512:	89a3      	ldrh	r3, [r4, #12]
 8005514:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005518:	81a3      	strh	r3, [r4, #12]
 800551a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800551e:	e7e9      	b.n	80054f4 <__ssputs_r+0x88>

08005520 <_svfiprintf_r>:
 8005520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005524:	4698      	mov	r8, r3
 8005526:	898b      	ldrh	r3, [r1, #12]
 8005528:	061b      	lsls	r3, r3, #24
 800552a:	b09d      	sub	sp, #116	; 0x74
 800552c:	4607      	mov	r7, r0
 800552e:	460d      	mov	r5, r1
 8005530:	4614      	mov	r4, r2
 8005532:	d50e      	bpl.n	8005552 <_svfiprintf_r+0x32>
 8005534:	690b      	ldr	r3, [r1, #16]
 8005536:	b963      	cbnz	r3, 8005552 <_svfiprintf_r+0x32>
 8005538:	2140      	movs	r1, #64	; 0x40
 800553a:	f000 f90f 	bl	800575c <_malloc_r>
 800553e:	6028      	str	r0, [r5, #0]
 8005540:	6128      	str	r0, [r5, #16]
 8005542:	b920      	cbnz	r0, 800554e <_svfiprintf_r+0x2e>
 8005544:	230c      	movs	r3, #12
 8005546:	603b      	str	r3, [r7, #0]
 8005548:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800554c:	e0d0      	b.n	80056f0 <_svfiprintf_r+0x1d0>
 800554e:	2340      	movs	r3, #64	; 0x40
 8005550:	616b      	str	r3, [r5, #20]
 8005552:	2300      	movs	r3, #0
 8005554:	9309      	str	r3, [sp, #36]	; 0x24
 8005556:	2320      	movs	r3, #32
 8005558:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800555c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005560:	2330      	movs	r3, #48	; 0x30
 8005562:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005708 <_svfiprintf_r+0x1e8>
 8005566:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800556a:	f04f 0901 	mov.w	r9, #1
 800556e:	4623      	mov	r3, r4
 8005570:	469a      	mov	sl, r3
 8005572:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005576:	b10a      	cbz	r2, 800557c <_svfiprintf_r+0x5c>
 8005578:	2a25      	cmp	r2, #37	; 0x25
 800557a:	d1f9      	bne.n	8005570 <_svfiprintf_r+0x50>
 800557c:	ebba 0b04 	subs.w	fp, sl, r4
 8005580:	d00b      	beq.n	800559a <_svfiprintf_r+0x7a>
 8005582:	465b      	mov	r3, fp
 8005584:	4622      	mov	r2, r4
 8005586:	4629      	mov	r1, r5
 8005588:	4638      	mov	r0, r7
 800558a:	f7ff ff6f 	bl	800546c <__ssputs_r>
 800558e:	3001      	adds	r0, #1
 8005590:	f000 80a9 	beq.w	80056e6 <_svfiprintf_r+0x1c6>
 8005594:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005596:	445a      	add	r2, fp
 8005598:	9209      	str	r2, [sp, #36]	; 0x24
 800559a:	f89a 3000 	ldrb.w	r3, [sl]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	f000 80a1 	beq.w	80056e6 <_svfiprintf_r+0x1c6>
 80055a4:	2300      	movs	r3, #0
 80055a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80055aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80055ae:	f10a 0a01 	add.w	sl, sl, #1
 80055b2:	9304      	str	r3, [sp, #16]
 80055b4:	9307      	str	r3, [sp, #28]
 80055b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80055ba:	931a      	str	r3, [sp, #104]	; 0x68
 80055bc:	4654      	mov	r4, sl
 80055be:	2205      	movs	r2, #5
 80055c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055c4:	4850      	ldr	r0, [pc, #320]	; (8005708 <_svfiprintf_r+0x1e8>)
 80055c6:	f7fa fe03 	bl	80001d0 <memchr>
 80055ca:	9a04      	ldr	r2, [sp, #16]
 80055cc:	b9d8      	cbnz	r0, 8005606 <_svfiprintf_r+0xe6>
 80055ce:	06d0      	lsls	r0, r2, #27
 80055d0:	bf44      	itt	mi
 80055d2:	2320      	movmi	r3, #32
 80055d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055d8:	0711      	lsls	r1, r2, #28
 80055da:	bf44      	itt	mi
 80055dc:	232b      	movmi	r3, #43	; 0x2b
 80055de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055e2:	f89a 3000 	ldrb.w	r3, [sl]
 80055e6:	2b2a      	cmp	r3, #42	; 0x2a
 80055e8:	d015      	beq.n	8005616 <_svfiprintf_r+0xf6>
 80055ea:	9a07      	ldr	r2, [sp, #28]
 80055ec:	4654      	mov	r4, sl
 80055ee:	2000      	movs	r0, #0
 80055f0:	f04f 0c0a 	mov.w	ip, #10
 80055f4:	4621      	mov	r1, r4
 80055f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80055fa:	3b30      	subs	r3, #48	; 0x30
 80055fc:	2b09      	cmp	r3, #9
 80055fe:	d94d      	bls.n	800569c <_svfiprintf_r+0x17c>
 8005600:	b1b0      	cbz	r0, 8005630 <_svfiprintf_r+0x110>
 8005602:	9207      	str	r2, [sp, #28]
 8005604:	e014      	b.n	8005630 <_svfiprintf_r+0x110>
 8005606:	eba0 0308 	sub.w	r3, r0, r8
 800560a:	fa09 f303 	lsl.w	r3, r9, r3
 800560e:	4313      	orrs	r3, r2
 8005610:	9304      	str	r3, [sp, #16]
 8005612:	46a2      	mov	sl, r4
 8005614:	e7d2      	b.n	80055bc <_svfiprintf_r+0x9c>
 8005616:	9b03      	ldr	r3, [sp, #12]
 8005618:	1d19      	adds	r1, r3, #4
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	9103      	str	r1, [sp, #12]
 800561e:	2b00      	cmp	r3, #0
 8005620:	bfbb      	ittet	lt
 8005622:	425b      	neglt	r3, r3
 8005624:	f042 0202 	orrlt.w	r2, r2, #2
 8005628:	9307      	strge	r3, [sp, #28]
 800562a:	9307      	strlt	r3, [sp, #28]
 800562c:	bfb8      	it	lt
 800562e:	9204      	strlt	r2, [sp, #16]
 8005630:	7823      	ldrb	r3, [r4, #0]
 8005632:	2b2e      	cmp	r3, #46	; 0x2e
 8005634:	d10c      	bne.n	8005650 <_svfiprintf_r+0x130>
 8005636:	7863      	ldrb	r3, [r4, #1]
 8005638:	2b2a      	cmp	r3, #42	; 0x2a
 800563a:	d134      	bne.n	80056a6 <_svfiprintf_r+0x186>
 800563c:	9b03      	ldr	r3, [sp, #12]
 800563e:	1d1a      	adds	r2, r3, #4
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	9203      	str	r2, [sp, #12]
 8005644:	2b00      	cmp	r3, #0
 8005646:	bfb8      	it	lt
 8005648:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800564c:	3402      	adds	r4, #2
 800564e:	9305      	str	r3, [sp, #20]
 8005650:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005718 <_svfiprintf_r+0x1f8>
 8005654:	7821      	ldrb	r1, [r4, #0]
 8005656:	2203      	movs	r2, #3
 8005658:	4650      	mov	r0, sl
 800565a:	f7fa fdb9 	bl	80001d0 <memchr>
 800565e:	b138      	cbz	r0, 8005670 <_svfiprintf_r+0x150>
 8005660:	9b04      	ldr	r3, [sp, #16]
 8005662:	eba0 000a 	sub.w	r0, r0, sl
 8005666:	2240      	movs	r2, #64	; 0x40
 8005668:	4082      	lsls	r2, r0
 800566a:	4313      	orrs	r3, r2
 800566c:	3401      	adds	r4, #1
 800566e:	9304      	str	r3, [sp, #16]
 8005670:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005674:	4825      	ldr	r0, [pc, #148]	; (800570c <_svfiprintf_r+0x1ec>)
 8005676:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800567a:	2206      	movs	r2, #6
 800567c:	f7fa fda8 	bl	80001d0 <memchr>
 8005680:	2800      	cmp	r0, #0
 8005682:	d038      	beq.n	80056f6 <_svfiprintf_r+0x1d6>
 8005684:	4b22      	ldr	r3, [pc, #136]	; (8005710 <_svfiprintf_r+0x1f0>)
 8005686:	bb1b      	cbnz	r3, 80056d0 <_svfiprintf_r+0x1b0>
 8005688:	9b03      	ldr	r3, [sp, #12]
 800568a:	3307      	adds	r3, #7
 800568c:	f023 0307 	bic.w	r3, r3, #7
 8005690:	3308      	adds	r3, #8
 8005692:	9303      	str	r3, [sp, #12]
 8005694:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005696:	4433      	add	r3, r6
 8005698:	9309      	str	r3, [sp, #36]	; 0x24
 800569a:	e768      	b.n	800556e <_svfiprintf_r+0x4e>
 800569c:	fb0c 3202 	mla	r2, ip, r2, r3
 80056a0:	460c      	mov	r4, r1
 80056a2:	2001      	movs	r0, #1
 80056a4:	e7a6      	b.n	80055f4 <_svfiprintf_r+0xd4>
 80056a6:	2300      	movs	r3, #0
 80056a8:	3401      	adds	r4, #1
 80056aa:	9305      	str	r3, [sp, #20]
 80056ac:	4619      	mov	r1, r3
 80056ae:	f04f 0c0a 	mov.w	ip, #10
 80056b2:	4620      	mov	r0, r4
 80056b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80056b8:	3a30      	subs	r2, #48	; 0x30
 80056ba:	2a09      	cmp	r2, #9
 80056bc:	d903      	bls.n	80056c6 <_svfiprintf_r+0x1a6>
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d0c6      	beq.n	8005650 <_svfiprintf_r+0x130>
 80056c2:	9105      	str	r1, [sp, #20]
 80056c4:	e7c4      	b.n	8005650 <_svfiprintf_r+0x130>
 80056c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80056ca:	4604      	mov	r4, r0
 80056cc:	2301      	movs	r3, #1
 80056ce:	e7f0      	b.n	80056b2 <_svfiprintf_r+0x192>
 80056d0:	ab03      	add	r3, sp, #12
 80056d2:	9300      	str	r3, [sp, #0]
 80056d4:	462a      	mov	r2, r5
 80056d6:	4b0f      	ldr	r3, [pc, #60]	; (8005714 <_svfiprintf_r+0x1f4>)
 80056d8:	a904      	add	r1, sp, #16
 80056da:	4638      	mov	r0, r7
 80056dc:	f3af 8000 	nop.w
 80056e0:	1c42      	adds	r2, r0, #1
 80056e2:	4606      	mov	r6, r0
 80056e4:	d1d6      	bne.n	8005694 <_svfiprintf_r+0x174>
 80056e6:	89ab      	ldrh	r3, [r5, #12]
 80056e8:	065b      	lsls	r3, r3, #25
 80056ea:	f53f af2d 	bmi.w	8005548 <_svfiprintf_r+0x28>
 80056ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 80056f0:	b01d      	add	sp, #116	; 0x74
 80056f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056f6:	ab03      	add	r3, sp, #12
 80056f8:	9300      	str	r3, [sp, #0]
 80056fa:	462a      	mov	r2, r5
 80056fc:	4b05      	ldr	r3, [pc, #20]	; (8005714 <_svfiprintf_r+0x1f4>)
 80056fe:	a904      	add	r1, sp, #16
 8005700:	4638      	mov	r0, r7
 8005702:	f000 f919 	bl	8005938 <_printf_i>
 8005706:	e7eb      	b.n	80056e0 <_svfiprintf_r+0x1c0>
 8005708:	08005d74 	.word	0x08005d74
 800570c:	08005d7e 	.word	0x08005d7e
 8005710:	00000000 	.word	0x00000000
 8005714:	0800546d 	.word	0x0800546d
 8005718:	08005d7a 	.word	0x08005d7a

0800571c <sbrk_aligned>:
 800571c:	b570      	push	{r4, r5, r6, lr}
 800571e:	4e0e      	ldr	r6, [pc, #56]	; (8005758 <sbrk_aligned+0x3c>)
 8005720:	460c      	mov	r4, r1
 8005722:	6831      	ldr	r1, [r6, #0]
 8005724:	4605      	mov	r5, r0
 8005726:	b911      	cbnz	r1, 800572e <sbrk_aligned+0x12>
 8005728:	f000 fa7e 	bl	8005c28 <_sbrk_r>
 800572c:	6030      	str	r0, [r6, #0]
 800572e:	4621      	mov	r1, r4
 8005730:	4628      	mov	r0, r5
 8005732:	f000 fa79 	bl	8005c28 <_sbrk_r>
 8005736:	1c43      	adds	r3, r0, #1
 8005738:	d00a      	beq.n	8005750 <sbrk_aligned+0x34>
 800573a:	1cc4      	adds	r4, r0, #3
 800573c:	f024 0403 	bic.w	r4, r4, #3
 8005740:	42a0      	cmp	r0, r4
 8005742:	d007      	beq.n	8005754 <sbrk_aligned+0x38>
 8005744:	1a21      	subs	r1, r4, r0
 8005746:	4628      	mov	r0, r5
 8005748:	f000 fa6e 	bl	8005c28 <_sbrk_r>
 800574c:	3001      	adds	r0, #1
 800574e:	d101      	bne.n	8005754 <sbrk_aligned+0x38>
 8005750:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005754:	4620      	mov	r0, r4
 8005756:	bd70      	pop	{r4, r5, r6, pc}
 8005758:	200002e4 	.word	0x200002e4

0800575c <_malloc_r>:
 800575c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005760:	1ccd      	adds	r5, r1, #3
 8005762:	f025 0503 	bic.w	r5, r5, #3
 8005766:	3508      	adds	r5, #8
 8005768:	2d0c      	cmp	r5, #12
 800576a:	bf38      	it	cc
 800576c:	250c      	movcc	r5, #12
 800576e:	2d00      	cmp	r5, #0
 8005770:	4607      	mov	r7, r0
 8005772:	db01      	blt.n	8005778 <_malloc_r+0x1c>
 8005774:	42a9      	cmp	r1, r5
 8005776:	d905      	bls.n	8005784 <_malloc_r+0x28>
 8005778:	230c      	movs	r3, #12
 800577a:	603b      	str	r3, [r7, #0]
 800577c:	2600      	movs	r6, #0
 800577e:	4630      	mov	r0, r6
 8005780:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005784:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005858 <_malloc_r+0xfc>
 8005788:	f000 f9f8 	bl	8005b7c <__malloc_lock>
 800578c:	f8d8 3000 	ldr.w	r3, [r8]
 8005790:	461c      	mov	r4, r3
 8005792:	bb5c      	cbnz	r4, 80057ec <_malloc_r+0x90>
 8005794:	4629      	mov	r1, r5
 8005796:	4638      	mov	r0, r7
 8005798:	f7ff ffc0 	bl	800571c <sbrk_aligned>
 800579c:	1c43      	adds	r3, r0, #1
 800579e:	4604      	mov	r4, r0
 80057a0:	d155      	bne.n	800584e <_malloc_r+0xf2>
 80057a2:	f8d8 4000 	ldr.w	r4, [r8]
 80057a6:	4626      	mov	r6, r4
 80057a8:	2e00      	cmp	r6, #0
 80057aa:	d145      	bne.n	8005838 <_malloc_r+0xdc>
 80057ac:	2c00      	cmp	r4, #0
 80057ae:	d048      	beq.n	8005842 <_malloc_r+0xe6>
 80057b0:	6823      	ldr	r3, [r4, #0]
 80057b2:	4631      	mov	r1, r6
 80057b4:	4638      	mov	r0, r7
 80057b6:	eb04 0903 	add.w	r9, r4, r3
 80057ba:	f000 fa35 	bl	8005c28 <_sbrk_r>
 80057be:	4581      	cmp	r9, r0
 80057c0:	d13f      	bne.n	8005842 <_malloc_r+0xe6>
 80057c2:	6821      	ldr	r1, [r4, #0]
 80057c4:	1a6d      	subs	r5, r5, r1
 80057c6:	4629      	mov	r1, r5
 80057c8:	4638      	mov	r0, r7
 80057ca:	f7ff ffa7 	bl	800571c <sbrk_aligned>
 80057ce:	3001      	adds	r0, #1
 80057d0:	d037      	beq.n	8005842 <_malloc_r+0xe6>
 80057d2:	6823      	ldr	r3, [r4, #0]
 80057d4:	442b      	add	r3, r5
 80057d6:	6023      	str	r3, [r4, #0]
 80057d8:	f8d8 3000 	ldr.w	r3, [r8]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d038      	beq.n	8005852 <_malloc_r+0xf6>
 80057e0:	685a      	ldr	r2, [r3, #4]
 80057e2:	42a2      	cmp	r2, r4
 80057e4:	d12b      	bne.n	800583e <_malloc_r+0xe2>
 80057e6:	2200      	movs	r2, #0
 80057e8:	605a      	str	r2, [r3, #4]
 80057ea:	e00f      	b.n	800580c <_malloc_r+0xb0>
 80057ec:	6822      	ldr	r2, [r4, #0]
 80057ee:	1b52      	subs	r2, r2, r5
 80057f0:	d41f      	bmi.n	8005832 <_malloc_r+0xd6>
 80057f2:	2a0b      	cmp	r2, #11
 80057f4:	d917      	bls.n	8005826 <_malloc_r+0xca>
 80057f6:	1961      	adds	r1, r4, r5
 80057f8:	42a3      	cmp	r3, r4
 80057fa:	6025      	str	r5, [r4, #0]
 80057fc:	bf18      	it	ne
 80057fe:	6059      	strne	r1, [r3, #4]
 8005800:	6863      	ldr	r3, [r4, #4]
 8005802:	bf08      	it	eq
 8005804:	f8c8 1000 	streq.w	r1, [r8]
 8005808:	5162      	str	r2, [r4, r5]
 800580a:	604b      	str	r3, [r1, #4]
 800580c:	4638      	mov	r0, r7
 800580e:	f104 060b 	add.w	r6, r4, #11
 8005812:	f000 f9b9 	bl	8005b88 <__malloc_unlock>
 8005816:	f026 0607 	bic.w	r6, r6, #7
 800581a:	1d23      	adds	r3, r4, #4
 800581c:	1af2      	subs	r2, r6, r3
 800581e:	d0ae      	beq.n	800577e <_malloc_r+0x22>
 8005820:	1b9b      	subs	r3, r3, r6
 8005822:	50a3      	str	r3, [r4, r2]
 8005824:	e7ab      	b.n	800577e <_malloc_r+0x22>
 8005826:	42a3      	cmp	r3, r4
 8005828:	6862      	ldr	r2, [r4, #4]
 800582a:	d1dd      	bne.n	80057e8 <_malloc_r+0x8c>
 800582c:	f8c8 2000 	str.w	r2, [r8]
 8005830:	e7ec      	b.n	800580c <_malloc_r+0xb0>
 8005832:	4623      	mov	r3, r4
 8005834:	6864      	ldr	r4, [r4, #4]
 8005836:	e7ac      	b.n	8005792 <_malloc_r+0x36>
 8005838:	4634      	mov	r4, r6
 800583a:	6876      	ldr	r6, [r6, #4]
 800583c:	e7b4      	b.n	80057a8 <_malloc_r+0x4c>
 800583e:	4613      	mov	r3, r2
 8005840:	e7cc      	b.n	80057dc <_malloc_r+0x80>
 8005842:	230c      	movs	r3, #12
 8005844:	603b      	str	r3, [r7, #0]
 8005846:	4638      	mov	r0, r7
 8005848:	f000 f99e 	bl	8005b88 <__malloc_unlock>
 800584c:	e797      	b.n	800577e <_malloc_r+0x22>
 800584e:	6025      	str	r5, [r4, #0]
 8005850:	e7dc      	b.n	800580c <_malloc_r+0xb0>
 8005852:	605b      	str	r3, [r3, #4]
 8005854:	deff      	udf	#255	; 0xff
 8005856:	bf00      	nop
 8005858:	200002e0 	.word	0x200002e0

0800585c <_printf_common>:
 800585c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005860:	4616      	mov	r6, r2
 8005862:	4699      	mov	r9, r3
 8005864:	688a      	ldr	r2, [r1, #8]
 8005866:	690b      	ldr	r3, [r1, #16]
 8005868:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800586c:	4293      	cmp	r3, r2
 800586e:	bfb8      	it	lt
 8005870:	4613      	movlt	r3, r2
 8005872:	6033      	str	r3, [r6, #0]
 8005874:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005878:	4607      	mov	r7, r0
 800587a:	460c      	mov	r4, r1
 800587c:	b10a      	cbz	r2, 8005882 <_printf_common+0x26>
 800587e:	3301      	adds	r3, #1
 8005880:	6033      	str	r3, [r6, #0]
 8005882:	6823      	ldr	r3, [r4, #0]
 8005884:	0699      	lsls	r1, r3, #26
 8005886:	bf42      	ittt	mi
 8005888:	6833      	ldrmi	r3, [r6, #0]
 800588a:	3302      	addmi	r3, #2
 800588c:	6033      	strmi	r3, [r6, #0]
 800588e:	6825      	ldr	r5, [r4, #0]
 8005890:	f015 0506 	ands.w	r5, r5, #6
 8005894:	d106      	bne.n	80058a4 <_printf_common+0x48>
 8005896:	f104 0a19 	add.w	sl, r4, #25
 800589a:	68e3      	ldr	r3, [r4, #12]
 800589c:	6832      	ldr	r2, [r6, #0]
 800589e:	1a9b      	subs	r3, r3, r2
 80058a0:	42ab      	cmp	r3, r5
 80058a2:	dc26      	bgt.n	80058f2 <_printf_common+0x96>
 80058a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80058a8:	1e13      	subs	r3, r2, #0
 80058aa:	6822      	ldr	r2, [r4, #0]
 80058ac:	bf18      	it	ne
 80058ae:	2301      	movne	r3, #1
 80058b0:	0692      	lsls	r2, r2, #26
 80058b2:	d42b      	bmi.n	800590c <_printf_common+0xb0>
 80058b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80058b8:	4649      	mov	r1, r9
 80058ba:	4638      	mov	r0, r7
 80058bc:	47c0      	blx	r8
 80058be:	3001      	adds	r0, #1
 80058c0:	d01e      	beq.n	8005900 <_printf_common+0xa4>
 80058c2:	6823      	ldr	r3, [r4, #0]
 80058c4:	6922      	ldr	r2, [r4, #16]
 80058c6:	f003 0306 	and.w	r3, r3, #6
 80058ca:	2b04      	cmp	r3, #4
 80058cc:	bf02      	ittt	eq
 80058ce:	68e5      	ldreq	r5, [r4, #12]
 80058d0:	6833      	ldreq	r3, [r6, #0]
 80058d2:	1aed      	subeq	r5, r5, r3
 80058d4:	68a3      	ldr	r3, [r4, #8]
 80058d6:	bf0c      	ite	eq
 80058d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058dc:	2500      	movne	r5, #0
 80058de:	4293      	cmp	r3, r2
 80058e0:	bfc4      	itt	gt
 80058e2:	1a9b      	subgt	r3, r3, r2
 80058e4:	18ed      	addgt	r5, r5, r3
 80058e6:	2600      	movs	r6, #0
 80058e8:	341a      	adds	r4, #26
 80058ea:	42b5      	cmp	r5, r6
 80058ec:	d11a      	bne.n	8005924 <_printf_common+0xc8>
 80058ee:	2000      	movs	r0, #0
 80058f0:	e008      	b.n	8005904 <_printf_common+0xa8>
 80058f2:	2301      	movs	r3, #1
 80058f4:	4652      	mov	r2, sl
 80058f6:	4649      	mov	r1, r9
 80058f8:	4638      	mov	r0, r7
 80058fa:	47c0      	blx	r8
 80058fc:	3001      	adds	r0, #1
 80058fe:	d103      	bne.n	8005908 <_printf_common+0xac>
 8005900:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005908:	3501      	adds	r5, #1
 800590a:	e7c6      	b.n	800589a <_printf_common+0x3e>
 800590c:	18e1      	adds	r1, r4, r3
 800590e:	1c5a      	adds	r2, r3, #1
 8005910:	2030      	movs	r0, #48	; 0x30
 8005912:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005916:	4422      	add	r2, r4
 8005918:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800591c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005920:	3302      	adds	r3, #2
 8005922:	e7c7      	b.n	80058b4 <_printf_common+0x58>
 8005924:	2301      	movs	r3, #1
 8005926:	4622      	mov	r2, r4
 8005928:	4649      	mov	r1, r9
 800592a:	4638      	mov	r0, r7
 800592c:	47c0      	blx	r8
 800592e:	3001      	adds	r0, #1
 8005930:	d0e6      	beq.n	8005900 <_printf_common+0xa4>
 8005932:	3601      	adds	r6, #1
 8005934:	e7d9      	b.n	80058ea <_printf_common+0x8e>
	...

08005938 <_printf_i>:
 8005938:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800593c:	7e0f      	ldrb	r7, [r1, #24]
 800593e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005940:	2f78      	cmp	r7, #120	; 0x78
 8005942:	4691      	mov	r9, r2
 8005944:	4680      	mov	r8, r0
 8005946:	460c      	mov	r4, r1
 8005948:	469a      	mov	sl, r3
 800594a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800594e:	d807      	bhi.n	8005960 <_printf_i+0x28>
 8005950:	2f62      	cmp	r7, #98	; 0x62
 8005952:	d80a      	bhi.n	800596a <_printf_i+0x32>
 8005954:	2f00      	cmp	r7, #0
 8005956:	f000 80d4 	beq.w	8005b02 <_printf_i+0x1ca>
 800595a:	2f58      	cmp	r7, #88	; 0x58
 800595c:	f000 80c0 	beq.w	8005ae0 <_printf_i+0x1a8>
 8005960:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005964:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005968:	e03a      	b.n	80059e0 <_printf_i+0xa8>
 800596a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800596e:	2b15      	cmp	r3, #21
 8005970:	d8f6      	bhi.n	8005960 <_printf_i+0x28>
 8005972:	a101      	add	r1, pc, #4	; (adr r1, 8005978 <_printf_i+0x40>)
 8005974:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005978:	080059d1 	.word	0x080059d1
 800597c:	080059e5 	.word	0x080059e5
 8005980:	08005961 	.word	0x08005961
 8005984:	08005961 	.word	0x08005961
 8005988:	08005961 	.word	0x08005961
 800598c:	08005961 	.word	0x08005961
 8005990:	080059e5 	.word	0x080059e5
 8005994:	08005961 	.word	0x08005961
 8005998:	08005961 	.word	0x08005961
 800599c:	08005961 	.word	0x08005961
 80059a0:	08005961 	.word	0x08005961
 80059a4:	08005ae9 	.word	0x08005ae9
 80059a8:	08005a11 	.word	0x08005a11
 80059ac:	08005aa3 	.word	0x08005aa3
 80059b0:	08005961 	.word	0x08005961
 80059b4:	08005961 	.word	0x08005961
 80059b8:	08005b0b 	.word	0x08005b0b
 80059bc:	08005961 	.word	0x08005961
 80059c0:	08005a11 	.word	0x08005a11
 80059c4:	08005961 	.word	0x08005961
 80059c8:	08005961 	.word	0x08005961
 80059cc:	08005aab 	.word	0x08005aab
 80059d0:	682b      	ldr	r3, [r5, #0]
 80059d2:	1d1a      	adds	r2, r3, #4
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	602a      	str	r2, [r5, #0]
 80059d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80059e0:	2301      	movs	r3, #1
 80059e2:	e09f      	b.n	8005b24 <_printf_i+0x1ec>
 80059e4:	6820      	ldr	r0, [r4, #0]
 80059e6:	682b      	ldr	r3, [r5, #0]
 80059e8:	0607      	lsls	r7, r0, #24
 80059ea:	f103 0104 	add.w	r1, r3, #4
 80059ee:	6029      	str	r1, [r5, #0]
 80059f0:	d501      	bpl.n	80059f6 <_printf_i+0xbe>
 80059f2:	681e      	ldr	r6, [r3, #0]
 80059f4:	e003      	b.n	80059fe <_printf_i+0xc6>
 80059f6:	0646      	lsls	r6, r0, #25
 80059f8:	d5fb      	bpl.n	80059f2 <_printf_i+0xba>
 80059fa:	f9b3 6000 	ldrsh.w	r6, [r3]
 80059fe:	2e00      	cmp	r6, #0
 8005a00:	da03      	bge.n	8005a0a <_printf_i+0xd2>
 8005a02:	232d      	movs	r3, #45	; 0x2d
 8005a04:	4276      	negs	r6, r6
 8005a06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a0a:	485a      	ldr	r0, [pc, #360]	; (8005b74 <_printf_i+0x23c>)
 8005a0c:	230a      	movs	r3, #10
 8005a0e:	e012      	b.n	8005a36 <_printf_i+0xfe>
 8005a10:	682b      	ldr	r3, [r5, #0]
 8005a12:	6820      	ldr	r0, [r4, #0]
 8005a14:	1d19      	adds	r1, r3, #4
 8005a16:	6029      	str	r1, [r5, #0]
 8005a18:	0605      	lsls	r5, r0, #24
 8005a1a:	d501      	bpl.n	8005a20 <_printf_i+0xe8>
 8005a1c:	681e      	ldr	r6, [r3, #0]
 8005a1e:	e002      	b.n	8005a26 <_printf_i+0xee>
 8005a20:	0641      	lsls	r1, r0, #25
 8005a22:	d5fb      	bpl.n	8005a1c <_printf_i+0xe4>
 8005a24:	881e      	ldrh	r6, [r3, #0]
 8005a26:	4853      	ldr	r0, [pc, #332]	; (8005b74 <_printf_i+0x23c>)
 8005a28:	2f6f      	cmp	r7, #111	; 0x6f
 8005a2a:	bf0c      	ite	eq
 8005a2c:	2308      	moveq	r3, #8
 8005a2e:	230a      	movne	r3, #10
 8005a30:	2100      	movs	r1, #0
 8005a32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a36:	6865      	ldr	r5, [r4, #4]
 8005a38:	60a5      	str	r5, [r4, #8]
 8005a3a:	2d00      	cmp	r5, #0
 8005a3c:	bfa2      	ittt	ge
 8005a3e:	6821      	ldrge	r1, [r4, #0]
 8005a40:	f021 0104 	bicge.w	r1, r1, #4
 8005a44:	6021      	strge	r1, [r4, #0]
 8005a46:	b90e      	cbnz	r6, 8005a4c <_printf_i+0x114>
 8005a48:	2d00      	cmp	r5, #0
 8005a4a:	d04b      	beq.n	8005ae4 <_printf_i+0x1ac>
 8005a4c:	4615      	mov	r5, r2
 8005a4e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005a52:	fb03 6711 	mls	r7, r3, r1, r6
 8005a56:	5dc7      	ldrb	r7, [r0, r7]
 8005a58:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005a5c:	4637      	mov	r7, r6
 8005a5e:	42bb      	cmp	r3, r7
 8005a60:	460e      	mov	r6, r1
 8005a62:	d9f4      	bls.n	8005a4e <_printf_i+0x116>
 8005a64:	2b08      	cmp	r3, #8
 8005a66:	d10b      	bne.n	8005a80 <_printf_i+0x148>
 8005a68:	6823      	ldr	r3, [r4, #0]
 8005a6a:	07de      	lsls	r6, r3, #31
 8005a6c:	d508      	bpl.n	8005a80 <_printf_i+0x148>
 8005a6e:	6923      	ldr	r3, [r4, #16]
 8005a70:	6861      	ldr	r1, [r4, #4]
 8005a72:	4299      	cmp	r1, r3
 8005a74:	bfde      	ittt	le
 8005a76:	2330      	movle	r3, #48	; 0x30
 8005a78:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a7c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005a80:	1b52      	subs	r2, r2, r5
 8005a82:	6122      	str	r2, [r4, #16]
 8005a84:	f8cd a000 	str.w	sl, [sp]
 8005a88:	464b      	mov	r3, r9
 8005a8a:	aa03      	add	r2, sp, #12
 8005a8c:	4621      	mov	r1, r4
 8005a8e:	4640      	mov	r0, r8
 8005a90:	f7ff fee4 	bl	800585c <_printf_common>
 8005a94:	3001      	adds	r0, #1
 8005a96:	d14a      	bne.n	8005b2e <_printf_i+0x1f6>
 8005a98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a9c:	b004      	add	sp, #16
 8005a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005aa2:	6823      	ldr	r3, [r4, #0]
 8005aa4:	f043 0320 	orr.w	r3, r3, #32
 8005aa8:	6023      	str	r3, [r4, #0]
 8005aaa:	4833      	ldr	r0, [pc, #204]	; (8005b78 <_printf_i+0x240>)
 8005aac:	2778      	movs	r7, #120	; 0x78
 8005aae:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005ab2:	6823      	ldr	r3, [r4, #0]
 8005ab4:	6829      	ldr	r1, [r5, #0]
 8005ab6:	061f      	lsls	r7, r3, #24
 8005ab8:	f851 6b04 	ldr.w	r6, [r1], #4
 8005abc:	d402      	bmi.n	8005ac4 <_printf_i+0x18c>
 8005abe:	065f      	lsls	r7, r3, #25
 8005ac0:	bf48      	it	mi
 8005ac2:	b2b6      	uxthmi	r6, r6
 8005ac4:	07df      	lsls	r7, r3, #31
 8005ac6:	bf48      	it	mi
 8005ac8:	f043 0320 	orrmi.w	r3, r3, #32
 8005acc:	6029      	str	r1, [r5, #0]
 8005ace:	bf48      	it	mi
 8005ad0:	6023      	strmi	r3, [r4, #0]
 8005ad2:	b91e      	cbnz	r6, 8005adc <_printf_i+0x1a4>
 8005ad4:	6823      	ldr	r3, [r4, #0]
 8005ad6:	f023 0320 	bic.w	r3, r3, #32
 8005ada:	6023      	str	r3, [r4, #0]
 8005adc:	2310      	movs	r3, #16
 8005ade:	e7a7      	b.n	8005a30 <_printf_i+0xf8>
 8005ae0:	4824      	ldr	r0, [pc, #144]	; (8005b74 <_printf_i+0x23c>)
 8005ae2:	e7e4      	b.n	8005aae <_printf_i+0x176>
 8005ae4:	4615      	mov	r5, r2
 8005ae6:	e7bd      	b.n	8005a64 <_printf_i+0x12c>
 8005ae8:	682b      	ldr	r3, [r5, #0]
 8005aea:	6826      	ldr	r6, [r4, #0]
 8005aec:	6961      	ldr	r1, [r4, #20]
 8005aee:	1d18      	adds	r0, r3, #4
 8005af0:	6028      	str	r0, [r5, #0]
 8005af2:	0635      	lsls	r5, r6, #24
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	d501      	bpl.n	8005afc <_printf_i+0x1c4>
 8005af8:	6019      	str	r1, [r3, #0]
 8005afa:	e002      	b.n	8005b02 <_printf_i+0x1ca>
 8005afc:	0670      	lsls	r0, r6, #25
 8005afe:	d5fb      	bpl.n	8005af8 <_printf_i+0x1c0>
 8005b00:	8019      	strh	r1, [r3, #0]
 8005b02:	2300      	movs	r3, #0
 8005b04:	6123      	str	r3, [r4, #16]
 8005b06:	4615      	mov	r5, r2
 8005b08:	e7bc      	b.n	8005a84 <_printf_i+0x14c>
 8005b0a:	682b      	ldr	r3, [r5, #0]
 8005b0c:	1d1a      	adds	r2, r3, #4
 8005b0e:	602a      	str	r2, [r5, #0]
 8005b10:	681d      	ldr	r5, [r3, #0]
 8005b12:	6862      	ldr	r2, [r4, #4]
 8005b14:	2100      	movs	r1, #0
 8005b16:	4628      	mov	r0, r5
 8005b18:	f7fa fb5a 	bl	80001d0 <memchr>
 8005b1c:	b108      	cbz	r0, 8005b22 <_printf_i+0x1ea>
 8005b1e:	1b40      	subs	r0, r0, r5
 8005b20:	6060      	str	r0, [r4, #4]
 8005b22:	6863      	ldr	r3, [r4, #4]
 8005b24:	6123      	str	r3, [r4, #16]
 8005b26:	2300      	movs	r3, #0
 8005b28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b2c:	e7aa      	b.n	8005a84 <_printf_i+0x14c>
 8005b2e:	6923      	ldr	r3, [r4, #16]
 8005b30:	462a      	mov	r2, r5
 8005b32:	4649      	mov	r1, r9
 8005b34:	4640      	mov	r0, r8
 8005b36:	47d0      	blx	sl
 8005b38:	3001      	adds	r0, #1
 8005b3a:	d0ad      	beq.n	8005a98 <_printf_i+0x160>
 8005b3c:	6823      	ldr	r3, [r4, #0]
 8005b3e:	079b      	lsls	r3, r3, #30
 8005b40:	d413      	bmi.n	8005b6a <_printf_i+0x232>
 8005b42:	68e0      	ldr	r0, [r4, #12]
 8005b44:	9b03      	ldr	r3, [sp, #12]
 8005b46:	4298      	cmp	r0, r3
 8005b48:	bfb8      	it	lt
 8005b4a:	4618      	movlt	r0, r3
 8005b4c:	e7a6      	b.n	8005a9c <_printf_i+0x164>
 8005b4e:	2301      	movs	r3, #1
 8005b50:	4632      	mov	r2, r6
 8005b52:	4649      	mov	r1, r9
 8005b54:	4640      	mov	r0, r8
 8005b56:	47d0      	blx	sl
 8005b58:	3001      	adds	r0, #1
 8005b5a:	d09d      	beq.n	8005a98 <_printf_i+0x160>
 8005b5c:	3501      	adds	r5, #1
 8005b5e:	68e3      	ldr	r3, [r4, #12]
 8005b60:	9903      	ldr	r1, [sp, #12]
 8005b62:	1a5b      	subs	r3, r3, r1
 8005b64:	42ab      	cmp	r3, r5
 8005b66:	dcf2      	bgt.n	8005b4e <_printf_i+0x216>
 8005b68:	e7eb      	b.n	8005b42 <_printf_i+0x20a>
 8005b6a:	2500      	movs	r5, #0
 8005b6c:	f104 0619 	add.w	r6, r4, #25
 8005b70:	e7f5      	b.n	8005b5e <_printf_i+0x226>
 8005b72:	bf00      	nop
 8005b74:	08005d85 	.word	0x08005d85
 8005b78:	08005d96 	.word	0x08005d96

08005b7c <__malloc_lock>:
 8005b7c:	4801      	ldr	r0, [pc, #4]	; (8005b84 <__malloc_lock+0x8>)
 8005b7e:	f7ff bc73 	b.w	8005468 <__retarget_lock_acquire_recursive>
 8005b82:	bf00      	nop
 8005b84:	200002dc 	.word	0x200002dc

08005b88 <__malloc_unlock>:
 8005b88:	4801      	ldr	r0, [pc, #4]	; (8005b90 <__malloc_unlock+0x8>)
 8005b8a:	f7ff bc6e 	b.w	800546a <__retarget_lock_release_recursive>
 8005b8e:	bf00      	nop
 8005b90:	200002dc 	.word	0x200002dc

08005b94 <_realloc_r>:
 8005b94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b98:	4680      	mov	r8, r0
 8005b9a:	4614      	mov	r4, r2
 8005b9c:	460e      	mov	r6, r1
 8005b9e:	b921      	cbnz	r1, 8005baa <_realloc_r+0x16>
 8005ba0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ba4:	4611      	mov	r1, r2
 8005ba6:	f7ff bdd9 	b.w	800575c <_malloc_r>
 8005baa:	b92a      	cbnz	r2, 8005bb8 <_realloc_r+0x24>
 8005bac:	f000 f85a 	bl	8005c64 <_free_r>
 8005bb0:	4625      	mov	r5, r4
 8005bb2:	4628      	mov	r0, r5
 8005bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bb8:	f000 f8a0 	bl	8005cfc <_malloc_usable_size_r>
 8005bbc:	4284      	cmp	r4, r0
 8005bbe:	4607      	mov	r7, r0
 8005bc0:	d802      	bhi.n	8005bc8 <_realloc_r+0x34>
 8005bc2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005bc6:	d812      	bhi.n	8005bee <_realloc_r+0x5a>
 8005bc8:	4621      	mov	r1, r4
 8005bca:	4640      	mov	r0, r8
 8005bcc:	f7ff fdc6 	bl	800575c <_malloc_r>
 8005bd0:	4605      	mov	r5, r0
 8005bd2:	2800      	cmp	r0, #0
 8005bd4:	d0ed      	beq.n	8005bb2 <_realloc_r+0x1e>
 8005bd6:	42bc      	cmp	r4, r7
 8005bd8:	4622      	mov	r2, r4
 8005bda:	4631      	mov	r1, r6
 8005bdc:	bf28      	it	cs
 8005bde:	463a      	movcs	r2, r7
 8005be0:	f000 f832 	bl	8005c48 <memcpy>
 8005be4:	4631      	mov	r1, r6
 8005be6:	4640      	mov	r0, r8
 8005be8:	f000 f83c 	bl	8005c64 <_free_r>
 8005bec:	e7e1      	b.n	8005bb2 <_realloc_r+0x1e>
 8005bee:	4635      	mov	r5, r6
 8005bf0:	e7df      	b.n	8005bb2 <_realloc_r+0x1e>

08005bf2 <memmove>:
 8005bf2:	4288      	cmp	r0, r1
 8005bf4:	b510      	push	{r4, lr}
 8005bf6:	eb01 0402 	add.w	r4, r1, r2
 8005bfa:	d902      	bls.n	8005c02 <memmove+0x10>
 8005bfc:	4284      	cmp	r4, r0
 8005bfe:	4623      	mov	r3, r4
 8005c00:	d807      	bhi.n	8005c12 <memmove+0x20>
 8005c02:	1e43      	subs	r3, r0, #1
 8005c04:	42a1      	cmp	r1, r4
 8005c06:	d008      	beq.n	8005c1a <memmove+0x28>
 8005c08:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c0c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005c10:	e7f8      	b.n	8005c04 <memmove+0x12>
 8005c12:	4402      	add	r2, r0
 8005c14:	4601      	mov	r1, r0
 8005c16:	428a      	cmp	r2, r1
 8005c18:	d100      	bne.n	8005c1c <memmove+0x2a>
 8005c1a:	bd10      	pop	{r4, pc}
 8005c1c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005c20:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005c24:	e7f7      	b.n	8005c16 <memmove+0x24>
	...

08005c28 <_sbrk_r>:
 8005c28:	b538      	push	{r3, r4, r5, lr}
 8005c2a:	4d06      	ldr	r5, [pc, #24]	; (8005c44 <_sbrk_r+0x1c>)
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	4604      	mov	r4, r0
 8005c30:	4608      	mov	r0, r1
 8005c32:	602b      	str	r3, [r5, #0]
 8005c34:	f7fb ff98 	bl	8001b68 <_sbrk>
 8005c38:	1c43      	adds	r3, r0, #1
 8005c3a:	d102      	bne.n	8005c42 <_sbrk_r+0x1a>
 8005c3c:	682b      	ldr	r3, [r5, #0]
 8005c3e:	b103      	cbz	r3, 8005c42 <_sbrk_r+0x1a>
 8005c40:	6023      	str	r3, [r4, #0]
 8005c42:	bd38      	pop	{r3, r4, r5, pc}
 8005c44:	200002e8 	.word	0x200002e8

08005c48 <memcpy>:
 8005c48:	440a      	add	r2, r1
 8005c4a:	4291      	cmp	r1, r2
 8005c4c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005c50:	d100      	bne.n	8005c54 <memcpy+0xc>
 8005c52:	4770      	bx	lr
 8005c54:	b510      	push	{r4, lr}
 8005c56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c5e:	4291      	cmp	r1, r2
 8005c60:	d1f9      	bne.n	8005c56 <memcpy+0xe>
 8005c62:	bd10      	pop	{r4, pc}

08005c64 <_free_r>:
 8005c64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c66:	2900      	cmp	r1, #0
 8005c68:	d044      	beq.n	8005cf4 <_free_r+0x90>
 8005c6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c6e:	9001      	str	r0, [sp, #4]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	f1a1 0404 	sub.w	r4, r1, #4
 8005c76:	bfb8      	it	lt
 8005c78:	18e4      	addlt	r4, r4, r3
 8005c7a:	f7ff ff7f 	bl	8005b7c <__malloc_lock>
 8005c7e:	4a1e      	ldr	r2, [pc, #120]	; (8005cf8 <_free_r+0x94>)
 8005c80:	9801      	ldr	r0, [sp, #4]
 8005c82:	6813      	ldr	r3, [r2, #0]
 8005c84:	b933      	cbnz	r3, 8005c94 <_free_r+0x30>
 8005c86:	6063      	str	r3, [r4, #4]
 8005c88:	6014      	str	r4, [r2, #0]
 8005c8a:	b003      	add	sp, #12
 8005c8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005c90:	f7ff bf7a 	b.w	8005b88 <__malloc_unlock>
 8005c94:	42a3      	cmp	r3, r4
 8005c96:	d908      	bls.n	8005caa <_free_r+0x46>
 8005c98:	6825      	ldr	r5, [r4, #0]
 8005c9a:	1961      	adds	r1, r4, r5
 8005c9c:	428b      	cmp	r3, r1
 8005c9e:	bf01      	itttt	eq
 8005ca0:	6819      	ldreq	r1, [r3, #0]
 8005ca2:	685b      	ldreq	r3, [r3, #4]
 8005ca4:	1949      	addeq	r1, r1, r5
 8005ca6:	6021      	streq	r1, [r4, #0]
 8005ca8:	e7ed      	b.n	8005c86 <_free_r+0x22>
 8005caa:	461a      	mov	r2, r3
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	b10b      	cbz	r3, 8005cb4 <_free_r+0x50>
 8005cb0:	42a3      	cmp	r3, r4
 8005cb2:	d9fa      	bls.n	8005caa <_free_r+0x46>
 8005cb4:	6811      	ldr	r1, [r2, #0]
 8005cb6:	1855      	adds	r5, r2, r1
 8005cb8:	42a5      	cmp	r5, r4
 8005cba:	d10b      	bne.n	8005cd4 <_free_r+0x70>
 8005cbc:	6824      	ldr	r4, [r4, #0]
 8005cbe:	4421      	add	r1, r4
 8005cc0:	1854      	adds	r4, r2, r1
 8005cc2:	42a3      	cmp	r3, r4
 8005cc4:	6011      	str	r1, [r2, #0]
 8005cc6:	d1e0      	bne.n	8005c8a <_free_r+0x26>
 8005cc8:	681c      	ldr	r4, [r3, #0]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	6053      	str	r3, [r2, #4]
 8005cce:	440c      	add	r4, r1
 8005cd0:	6014      	str	r4, [r2, #0]
 8005cd2:	e7da      	b.n	8005c8a <_free_r+0x26>
 8005cd4:	d902      	bls.n	8005cdc <_free_r+0x78>
 8005cd6:	230c      	movs	r3, #12
 8005cd8:	6003      	str	r3, [r0, #0]
 8005cda:	e7d6      	b.n	8005c8a <_free_r+0x26>
 8005cdc:	6825      	ldr	r5, [r4, #0]
 8005cde:	1961      	adds	r1, r4, r5
 8005ce0:	428b      	cmp	r3, r1
 8005ce2:	bf04      	itt	eq
 8005ce4:	6819      	ldreq	r1, [r3, #0]
 8005ce6:	685b      	ldreq	r3, [r3, #4]
 8005ce8:	6063      	str	r3, [r4, #4]
 8005cea:	bf04      	itt	eq
 8005cec:	1949      	addeq	r1, r1, r5
 8005cee:	6021      	streq	r1, [r4, #0]
 8005cf0:	6054      	str	r4, [r2, #4]
 8005cf2:	e7ca      	b.n	8005c8a <_free_r+0x26>
 8005cf4:	b003      	add	sp, #12
 8005cf6:	bd30      	pop	{r4, r5, pc}
 8005cf8:	200002e0 	.word	0x200002e0

08005cfc <_malloc_usable_size_r>:
 8005cfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d00:	1f18      	subs	r0, r3, #4
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	bfbc      	itt	lt
 8005d06:	580b      	ldrlt	r3, [r1, r0]
 8005d08:	18c0      	addlt	r0, r0, r3
 8005d0a:	4770      	bx	lr

08005d0c <_init>:
 8005d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d0e:	bf00      	nop
 8005d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d12:	bc08      	pop	{r3}
 8005d14:	469e      	mov	lr, r3
 8005d16:	4770      	bx	lr

08005d18 <_fini>:
 8005d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d1a:	bf00      	nop
 8005d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d1e:	bc08      	pop	{r3}
 8005d20:	469e      	mov	lr, r3
 8005d22:	4770      	bx	lr
