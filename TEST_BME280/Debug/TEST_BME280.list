
TEST_BME280.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005538  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080056c8  080056c8  000156c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005750  08005750  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08005750  08005750  00015750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005758  08005758  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005758  08005758  00015758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800575c  0800575c  0001575c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005760  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  2000005c  080057bc  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ec  080057bc  000202ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e3ae  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fa7  00000000  00000000  0002e47d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c60  00000000  00000000  00030428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000099e  00000000  00000000  00031088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026445  00000000  00000000  00031a26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fe55  00000000  00000000  00057e6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eaa1f  00000000  00000000  00067cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003858  00000000  00000000  001526e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00155f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080056b0 	.word	0x080056b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	080056b0 	.word	0x080056b0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_ldivmod>:
 8000270:	b97b      	cbnz	r3, 8000292 <__aeabi_ldivmod+0x22>
 8000272:	b972      	cbnz	r2, 8000292 <__aeabi_ldivmod+0x22>
 8000274:	2900      	cmp	r1, #0
 8000276:	bfbe      	ittt	lt
 8000278:	2000      	movlt	r0, #0
 800027a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800027e:	e006      	blt.n	800028e <__aeabi_ldivmod+0x1e>
 8000280:	bf08      	it	eq
 8000282:	2800      	cmpeq	r0, #0
 8000284:	bf1c      	itt	ne
 8000286:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800028a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800028e:	f000 b9bb 	b.w	8000608 <__aeabi_idiv0>
 8000292:	f1ad 0c08 	sub.w	ip, sp, #8
 8000296:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800029a:	2900      	cmp	r1, #0
 800029c:	db09      	blt.n	80002b2 <__aeabi_ldivmod+0x42>
 800029e:	2b00      	cmp	r3, #0
 80002a0:	db1a      	blt.n	80002d8 <__aeabi_ldivmod+0x68>
 80002a2:	f000 f84d 	bl	8000340 <__udivmoddi4>
 80002a6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ae:	b004      	add	sp, #16
 80002b0:	4770      	bx	lr
 80002b2:	4240      	negs	r0, r0
 80002b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	db1b      	blt.n	80002f4 <__aeabi_ldivmod+0x84>
 80002bc:	f000 f840 	bl	8000340 <__udivmoddi4>
 80002c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c8:	b004      	add	sp, #16
 80002ca:	4240      	negs	r0, r0
 80002cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002d0:	4252      	negs	r2, r2
 80002d2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d6:	4770      	bx	lr
 80002d8:	4252      	negs	r2, r2
 80002da:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002de:	f000 f82f 	bl	8000340 <__udivmoddi4>
 80002e2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ea:	b004      	add	sp, #16
 80002ec:	4240      	negs	r0, r0
 80002ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002f2:	4770      	bx	lr
 80002f4:	4252      	negs	r2, r2
 80002f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002fa:	f000 f821 	bl	8000340 <__udivmoddi4>
 80002fe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000302:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000306:	b004      	add	sp, #16
 8000308:	4252      	negs	r2, r2
 800030a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800030e:	4770      	bx	lr

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000320:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000324:	f000 b970 	b.w	8000608 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9e08      	ldr	r6, [sp, #32]
 8000346:	460d      	mov	r5, r1
 8000348:	4604      	mov	r4, r0
 800034a:	460f      	mov	r7, r1
 800034c:	2b00      	cmp	r3, #0
 800034e:	d14a      	bne.n	80003e6 <__udivmoddi4+0xa6>
 8000350:	428a      	cmp	r2, r1
 8000352:	4694      	mov	ip, r2
 8000354:	d965      	bls.n	8000422 <__udivmoddi4+0xe2>
 8000356:	fab2 f382 	clz	r3, r2
 800035a:	b143      	cbz	r3, 800036e <__udivmoddi4+0x2e>
 800035c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000360:	f1c3 0220 	rsb	r2, r3, #32
 8000364:	409f      	lsls	r7, r3
 8000366:	fa20 f202 	lsr.w	r2, r0, r2
 800036a:	4317      	orrs	r7, r2
 800036c:	409c      	lsls	r4, r3
 800036e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000372:	fa1f f58c 	uxth.w	r5, ip
 8000376:	fbb7 f1fe 	udiv	r1, r7, lr
 800037a:	0c22      	lsrs	r2, r4, #16
 800037c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000380:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000384:	fb01 f005 	mul.w	r0, r1, r5
 8000388:	4290      	cmp	r0, r2
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x62>
 800038c:	eb1c 0202 	adds.w	r2, ip, r2
 8000390:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000394:	f080 811c 	bcs.w	80005d0 <__udivmoddi4+0x290>
 8000398:	4290      	cmp	r0, r2
 800039a:	f240 8119 	bls.w	80005d0 <__udivmoddi4+0x290>
 800039e:	3902      	subs	r1, #2
 80003a0:	4462      	add	r2, ip
 80003a2:	1a12      	subs	r2, r2, r0
 80003a4:	b2a4      	uxth	r4, r4
 80003a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003b2:	fb00 f505 	mul.w	r5, r0, r5
 80003b6:	42a5      	cmp	r5, r4
 80003b8:	d90a      	bls.n	80003d0 <__udivmoddi4+0x90>
 80003ba:	eb1c 0404 	adds.w	r4, ip, r4
 80003be:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003c2:	f080 8107 	bcs.w	80005d4 <__udivmoddi4+0x294>
 80003c6:	42a5      	cmp	r5, r4
 80003c8:	f240 8104 	bls.w	80005d4 <__udivmoddi4+0x294>
 80003cc:	4464      	add	r4, ip
 80003ce:	3802      	subs	r0, #2
 80003d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003d4:	1b64      	subs	r4, r4, r5
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11e      	cbz	r6, 80003e2 <__udivmoddi4+0xa2>
 80003da:	40dc      	lsrs	r4, r3
 80003dc:	2300      	movs	r3, #0
 80003de:	e9c6 4300 	strd	r4, r3, [r6]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0xbc>
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	f000 80ed 	beq.w	80005ca <__udivmoddi4+0x28a>
 80003f0:	2100      	movs	r1, #0
 80003f2:	e9c6 0500 	strd	r0, r5, [r6]
 80003f6:	4608      	mov	r0, r1
 80003f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fc:	fab3 f183 	clz	r1, r3
 8000400:	2900      	cmp	r1, #0
 8000402:	d149      	bne.n	8000498 <__udivmoddi4+0x158>
 8000404:	42ab      	cmp	r3, r5
 8000406:	d302      	bcc.n	800040e <__udivmoddi4+0xce>
 8000408:	4282      	cmp	r2, r0
 800040a:	f200 80f8 	bhi.w	80005fe <__udivmoddi4+0x2be>
 800040e:	1a84      	subs	r4, r0, r2
 8000410:	eb65 0203 	sbc.w	r2, r5, r3
 8000414:	2001      	movs	r0, #1
 8000416:	4617      	mov	r7, r2
 8000418:	2e00      	cmp	r6, #0
 800041a:	d0e2      	beq.n	80003e2 <__udivmoddi4+0xa2>
 800041c:	e9c6 4700 	strd	r4, r7, [r6]
 8000420:	e7df      	b.n	80003e2 <__udivmoddi4+0xa2>
 8000422:	b902      	cbnz	r2, 8000426 <__udivmoddi4+0xe6>
 8000424:	deff      	udf	#255	; 0xff
 8000426:	fab2 f382 	clz	r3, r2
 800042a:	2b00      	cmp	r3, #0
 800042c:	f040 8090 	bne.w	8000550 <__udivmoddi4+0x210>
 8000430:	1a8a      	subs	r2, r1, r2
 8000432:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000436:	fa1f fe8c 	uxth.w	lr, ip
 800043a:	2101      	movs	r1, #1
 800043c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000440:	fb07 2015 	mls	r0, r7, r5, r2
 8000444:	0c22      	lsrs	r2, r4, #16
 8000446:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800044a:	fb0e f005 	mul.w	r0, lr, r5
 800044e:	4290      	cmp	r0, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x124>
 8000452:	eb1c 0202 	adds.w	r2, ip, r2
 8000456:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x122>
 800045c:	4290      	cmp	r0, r2
 800045e:	f200 80cb 	bhi.w	80005f8 <__udivmoddi4+0x2b8>
 8000462:	4645      	mov	r5, r8
 8000464:	1a12      	subs	r2, r2, r0
 8000466:	b2a4      	uxth	r4, r4
 8000468:	fbb2 f0f7 	udiv	r0, r2, r7
 800046c:	fb07 2210 	mls	r2, r7, r0, r2
 8000470:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000474:	fb0e fe00 	mul.w	lr, lr, r0
 8000478:	45a6      	cmp	lr, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x14e>
 800047c:	eb1c 0404 	adds.w	r4, ip, r4
 8000480:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000484:	d202      	bcs.n	800048c <__udivmoddi4+0x14c>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f200 80bb 	bhi.w	8000602 <__udivmoddi4+0x2c2>
 800048c:	4610      	mov	r0, r2
 800048e:	eba4 040e 	sub.w	r4, r4, lr
 8000492:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000496:	e79f      	b.n	80003d8 <__udivmoddi4+0x98>
 8000498:	f1c1 0720 	rsb	r7, r1, #32
 800049c:	408b      	lsls	r3, r1
 800049e:	fa22 fc07 	lsr.w	ip, r2, r7
 80004a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80004a6:	fa05 f401 	lsl.w	r4, r5, r1
 80004aa:	fa20 f307 	lsr.w	r3, r0, r7
 80004ae:	40fd      	lsrs	r5, r7
 80004b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004b4:	4323      	orrs	r3, r4
 80004b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80004ba:	fa1f fe8c 	uxth.w	lr, ip
 80004be:	fb09 5518 	mls	r5, r9, r8, r5
 80004c2:	0c1c      	lsrs	r4, r3, #16
 80004c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004c8:	fb08 f50e 	mul.w	r5, r8, lr
 80004cc:	42a5      	cmp	r5, r4
 80004ce:	fa02 f201 	lsl.w	r2, r2, r1
 80004d2:	fa00 f001 	lsl.w	r0, r0, r1
 80004d6:	d90b      	bls.n	80004f0 <__udivmoddi4+0x1b0>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004e0:	f080 8088 	bcs.w	80005f4 <__udivmoddi4+0x2b4>
 80004e4:	42a5      	cmp	r5, r4
 80004e6:	f240 8085 	bls.w	80005f4 <__udivmoddi4+0x2b4>
 80004ea:	f1a8 0802 	sub.w	r8, r8, #2
 80004ee:	4464      	add	r4, ip
 80004f0:	1b64      	subs	r4, r4, r5
 80004f2:	b29d      	uxth	r5, r3
 80004f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004f8:	fb09 4413 	mls	r4, r9, r3, r4
 80004fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000500:	fb03 fe0e 	mul.w	lr, r3, lr
 8000504:	45a6      	cmp	lr, r4
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x1da>
 8000508:	eb1c 0404 	adds.w	r4, ip, r4
 800050c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000510:	d26c      	bcs.n	80005ec <__udivmoddi4+0x2ac>
 8000512:	45a6      	cmp	lr, r4
 8000514:	d96a      	bls.n	80005ec <__udivmoddi4+0x2ac>
 8000516:	3b02      	subs	r3, #2
 8000518:	4464      	add	r4, ip
 800051a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800051e:	fba3 9502 	umull	r9, r5, r3, r2
 8000522:	eba4 040e 	sub.w	r4, r4, lr
 8000526:	42ac      	cmp	r4, r5
 8000528:	46c8      	mov	r8, r9
 800052a:	46ae      	mov	lr, r5
 800052c:	d356      	bcc.n	80005dc <__udivmoddi4+0x29c>
 800052e:	d053      	beq.n	80005d8 <__udivmoddi4+0x298>
 8000530:	b156      	cbz	r6, 8000548 <__udivmoddi4+0x208>
 8000532:	ebb0 0208 	subs.w	r2, r0, r8
 8000536:	eb64 040e 	sbc.w	r4, r4, lr
 800053a:	fa04 f707 	lsl.w	r7, r4, r7
 800053e:	40ca      	lsrs	r2, r1
 8000540:	40cc      	lsrs	r4, r1
 8000542:	4317      	orrs	r7, r2
 8000544:	e9c6 7400 	strd	r7, r4, [r6]
 8000548:	4618      	mov	r0, r3
 800054a:	2100      	movs	r1, #0
 800054c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000550:	f1c3 0120 	rsb	r1, r3, #32
 8000554:	fa02 fc03 	lsl.w	ip, r2, r3
 8000558:	fa20 f201 	lsr.w	r2, r0, r1
 800055c:	fa25 f101 	lsr.w	r1, r5, r1
 8000560:	409d      	lsls	r5, r3
 8000562:	432a      	orrs	r2, r5
 8000564:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000568:	fa1f fe8c 	uxth.w	lr, ip
 800056c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000570:	fb07 1510 	mls	r5, r7, r0, r1
 8000574:	0c11      	lsrs	r1, r2, #16
 8000576:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800057a:	fb00 f50e 	mul.w	r5, r0, lr
 800057e:	428d      	cmp	r5, r1
 8000580:	fa04 f403 	lsl.w	r4, r4, r3
 8000584:	d908      	bls.n	8000598 <__udivmoddi4+0x258>
 8000586:	eb1c 0101 	adds.w	r1, ip, r1
 800058a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800058e:	d22f      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 8000590:	428d      	cmp	r5, r1
 8000592:	d92d      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 8000594:	3802      	subs	r0, #2
 8000596:	4461      	add	r1, ip
 8000598:	1b49      	subs	r1, r1, r5
 800059a:	b292      	uxth	r2, r2
 800059c:	fbb1 f5f7 	udiv	r5, r1, r7
 80005a0:	fb07 1115 	mls	r1, r7, r5, r1
 80005a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005a8:	fb05 f10e 	mul.w	r1, r5, lr
 80005ac:	4291      	cmp	r1, r2
 80005ae:	d908      	bls.n	80005c2 <__udivmoddi4+0x282>
 80005b0:	eb1c 0202 	adds.w	r2, ip, r2
 80005b4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80005b8:	d216      	bcs.n	80005e8 <__udivmoddi4+0x2a8>
 80005ba:	4291      	cmp	r1, r2
 80005bc:	d914      	bls.n	80005e8 <__udivmoddi4+0x2a8>
 80005be:	3d02      	subs	r5, #2
 80005c0:	4462      	add	r2, ip
 80005c2:	1a52      	subs	r2, r2, r1
 80005c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005c8:	e738      	b.n	800043c <__udivmoddi4+0xfc>
 80005ca:	4631      	mov	r1, r6
 80005cc:	4630      	mov	r0, r6
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xa2>
 80005d0:	4639      	mov	r1, r7
 80005d2:	e6e6      	b.n	80003a2 <__udivmoddi4+0x62>
 80005d4:	4610      	mov	r0, r2
 80005d6:	e6fb      	b.n	80003d0 <__udivmoddi4+0x90>
 80005d8:	4548      	cmp	r0, r9
 80005da:	d2a9      	bcs.n	8000530 <__udivmoddi4+0x1f0>
 80005dc:	ebb9 0802 	subs.w	r8, r9, r2
 80005e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005e4:	3b01      	subs	r3, #1
 80005e6:	e7a3      	b.n	8000530 <__udivmoddi4+0x1f0>
 80005e8:	4645      	mov	r5, r8
 80005ea:	e7ea      	b.n	80005c2 <__udivmoddi4+0x282>
 80005ec:	462b      	mov	r3, r5
 80005ee:	e794      	b.n	800051a <__udivmoddi4+0x1da>
 80005f0:	4640      	mov	r0, r8
 80005f2:	e7d1      	b.n	8000598 <__udivmoddi4+0x258>
 80005f4:	46d0      	mov	r8, sl
 80005f6:	e77b      	b.n	80004f0 <__udivmoddi4+0x1b0>
 80005f8:	3d02      	subs	r5, #2
 80005fa:	4462      	add	r2, ip
 80005fc:	e732      	b.n	8000464 <__udivmoddi4+0x124>
 80005fe:	4608      	mov	r0, r1
 8000600:	e70a      	b.n	8000418 <__udivmoddi4+0xd8>
 8000602:	4464      	add	r4, ip
 8000604:	3802      	subs	r0, #2
 8000606:	e742      	b.n	800048e <__udivmoddi4+0x14e>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <BME280_compensate_T_int32.0>:
  MX_I2C1_Init();
  /* USER CODE BEGIN 2 */

  // Functions from BME280 manual
  int32_t BME280_compensate_T_int32(int32_t adc_T)
  {
 800060c:	b480      	push	{r7}
 800060e:	b087      	sub	sp, #28
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
 8000614:	4663      	mov	r3, ip
 8000616:	f8c7 c000 	str.w	ip, [r7]
	  int32_t var1, var2, T;
	  var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 800061a:	687a      	ldr	r2, [r7, #4]
 800061c:	10d1      	asrs	r1, r2, #3
 800061e:	8c1a      	ldrh	r2, [r3, #32]
 8000620:	0052      	lsls	r2, r2, #1
 8000622:	1a8a      	subs	r2, r1, r2
 8000624:	f9b3 101e 	ldrsh.w	r1, [r3, #30]
 8000628:	fb01 f202 	mul.w	r2, r1, r2
 800062c:	12d2      	asrs	r2, r2, #11
 800062e:	617a      	str	r2, [r7, #20]
	  var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1))) >> 12) * ((int32_t)dig_T3)) >> 14;
 8000630:	687a      	ldr	r2, [r7, #4]
 8000632:	1112      	asrs	r2, r2, #4
 8000634:	8c19      	ldrh	r1, [r3, #32]
 8000636:	1a52      	subs	r2, r2, r1
 8000638:	6879      	ldr	r1, [r7, #4]
 800063a:	1109      	asrs	r1, r1, #4
 800063c:	8c18      	ldrh	r0, [r3, #32]
 800063e:	1a09      	subs	r1, r1, r0
 8000640:	fb01 f202 	mul.w	r2, r1, r2
 8000644:	1312      	asrs	r2, r2, #12
 8000646:	f9b3 101c 	ldrsh.w	r1, [r3, #28]
 800064a:	fb01 f202 	mul.w	r2, r1, r2
 800064e:	1392      	asrs	r2, r2, #14
 8000650:	613a      	str	r2, [r7, #16]
	  t_fine = var1 + var2;
 8000652:	6979      	ldr	r1, [r7, #20]
 8000654:	693a      	ldr	r2, [r7, #16]
 8000656:	440a      	add	r2, r1
 8000658:	601a      	str	r2, [r3, #0]
	  T = (t_fine * 5 + 128) >> 8;
 800065a:	681a      	ldr	r2, [r3, #0]
 800065c:	4613      	mov	r3, r2
 800065e:	009b      	lsls	r3, r3, #2
 8000660:	4413      	add	r3, r2
 8000662:	3380      	adds	r3, #128	; 0x80
 8000664:	121b      	asrs	r3, r3, #8
 8000666:	60fb      	str	r3, [r7, #12]
	  return T;
 8000668:	68fb      	ldr	r3, [r7, #12]
  }
 800066a:	4618      	mov	r0, r3
 800066c:	371c      	adds	r7, #28
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
	...

08000678 <main>:
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b0b6      	sub	sp, #216	; 0xd8
 800067c:	af04      	add	r7, sp, #16
int main(void)
 800067e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000682:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	uint16_t dig_T1 = 0;
 8000686:	2300      	movs	r3, #0
 8000688:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
	int16_t dig_T2 = 0;
 800068c:	2300      	movs	r3, #0
 800068e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
	int16_t dig_T3 = 0;
 8000692:	2300      	movs	r3, #0
 8000694:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
	uint16_t dig_P1 = 0;
 8000698:	2300      	movs	r3, #0
 800069a:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
	int16_t dig_P2 = 0;
 800069e:	2300      	movs	r3, #0
 80006a0:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
	int16_t dig_P3 = 0;
 80006a4:	2300      	movs	r3, #0
 80006a6:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
	int16_t dig_P4 = 0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
	int16_t dig_P5 = 0;
 80006b0:	2300      	movs	r3, #0
 80006b2:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
	int16_t dig_P6 = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
	int16_t dig_P7 = 0;
 80006bc:	2300      	movs	r3, #0
 80006be:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	int16_t dig_P8 = 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
	int16_t dig_P9 = 0;
 80006c8:	2300      	movs	r3, #0
 80006ca:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
	uint8_t datatowrite = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  HAL_Init();
 80006d4:	f000 ff8c 	bl	80015f0 <HAL_Init>
  SystemClock_Config();
 80006d8:	f000 fc8d 	bl	8000ff6 <SystemClock_Config>
  MX_GPIO_Init();
 80006dc:	f000 fd6a 	bl	80011b4 <MX_GPIO_Init>
  MX_DMA_Init();
 80006e0:	f000 fd4a 	bl	8001178 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80006e4:	f000 fd18 	bl	8001118 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80006e8:	f000 fcd6 	bl	8001098 <MX_I2C1_Init>
	  return (uint32_t)(v_x1_u32r>>12);
  }


  //reset device
  datatowrite = 0xB6;
 80006ec:	23b6      	movs	r3, #182	; 0xb6
 80006ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  HAL_I2C_Mem_Write(&hi2c1, 0x77<<1, 0xE0, 1, &datatowrite, 1, 1000);
 80006f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006f6:	9302      	str	r3, [sp, #8]
 80006f8:	2301      	movs	r3, #1
 80006fa:	9301      	str	r3, [sp, #4]
 80006fc:	f107 035f 	add.w	r3, r7, #95	; 0x5f
 8000700:	9300      	str	r3, [sp, #0]
 8000702:	2301      	movs	r3, #1
 8000704:	22e0      	movs	r2, #224	; 0xe0
 8000706:	21ee      	movs	r1, #238	; 0xee
 8000708:	48b5      	ldr	r0, [pc, #724]	; (80009e0 <main+0x368>)
 800070a:	f001 fce9 	bl	80020e0 <HAL_I2C_Mem_Write>

  HAL_Delay(100);
 800070e:	2064      	movs	r0, #100	; 0x64
 8000710:	f000 ffea 	bl	80016e8 <HAL_Delay>

  //write to humidity
  datatowrite = 0x01;
 8000714:	2301      	movs	r3, #1
 8000716:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  HAL_I2C_Mem_Write(&hi2c1, 0x77<<1, 0xF2, 1, &datatowrite, 1, 1000);
 800071a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800071e:	9302      	str	r3, [sp, #8]
 8000720:	2301      	movs	r3, #1
 8000722:	9301      	str	r3, [sp, #4]
 8000724:	f107 035f 	add.w	r3, r7, #95	; 0x5f
 8000728:	9300      	str	r3, [sp, #0]
 800072a:	2301      	movs	r3, #1
 800072c:	22f2      	movs	r2, #242	; 0xf2
 800072e:	21ee      	movs	r1, #238	; 0xee
 8000730:	48ab      	ldr	r0, [pc, #684]	; (80009e0 <main+0x368>)
 8000732:	f001 fcd5 	bl	80020e0 <HAL_I2C_Mem_Write>

  HAL_Delay(100);
 8000736:	2064      	movs	r0, #100	; 0x64
 8000738:	f000 ffd6 	bl	80016e8 <HAL_Delay>

  //write to temp and pres
  datatowrite = (0x03 <<5) |(0x05 << 2) | 0x03;
 800073c:	2377      	movs	r3, #119	; 0x77
 800073e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  HAL_I2C_Mem_Write(&hi2c1, 0x77<<1, 0xF4, 1, &datatowrite, 1, 1000);
 8000742:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000746:	9302      	str	r3, [sp, #8]
 8000748:	2301      	movs	r3, #1
 800074a:	9301      	str	r3, [sp, #4]
 800074c:	f107 035f 	add.w	r3, r7, #95	; 0x5f
 8000750:	9300      	str	r3, [sp, #0]
 8000752:	2301      	movs	r3, #1
 8000754:	22f4      	movs	r2, #244	; 0xf4
 8000756:	21ee      	movs	r1, #238	; 0xee
 8000758:	48a1      	ldr	r0, [pc, #644]	; (80009e0 <main+0x368>)
 800075a:	f001 fcc1 	bl	80020e0 <HAL_I2C_Mem_Write>

  HAL_Delay(100);
 800075e:	2064      	movs	r0, #100	; 0x64
 8000760:	f000 ffc2 	bl	80016e8 <HAL_Delay>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	/* USER CODE END WHILE */

	HAL_I2C_Mem_Read(&hi2c1, 0x77<<1, 0x88, 1, trimdata, 25, 1000);
 8000764:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000768:	9302      	str	r3, [sp, #8]
 800076a:	2319      	movs	r3, #25
 800076c:	9301      	str	r3, [sp, #4]
 800076e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000772:	9300      	str	r3, [sp, #0]
 8000774:	2301      	movs	r3, #1
 8000776:	2288      	movs	r2, #136	; 0x88
 8000778:	21ee      	movs	r1, #238	; 0xee
 800077a:	4899      	ldr	r0, [pc, #612]	; (80009e0 <main+0x368>)
 800077c:	f001 fdc4 	bl	8002308 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, 0x77<<1, 0xE1, 1, (uint8_t *)trimdata+25, 7, 1000);
 8000780:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000784:	3319      	adds	r3, #25
 8000786:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800078a:	9202      	str	r2, [sp, #8]
 800078c:	2207      	movs	r2, #7
 800078e:	9201      	str	r2, [sp, #4]
 8000790:	9300      	str	r3, [sp, #0]
 8000792:	2301      	movs	r3, #1
 8000794:	22e1      	movs	r2, #225	; 0xe1
 8000796:	21ee      	movs	r1, #238	; 0xee
 8000798:	4891      	ldr	r0, [pc, #580]	; (80009e0 <main+0x368>)
 800079a:	f001 fdb5 	bl	8002308 <HAL_I2C_Mem_Read>

	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 800079e:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 80007a2:	021b      	lsls	r3, r3, #8
 80007a4:	b21a      	sxth	r2, r3
 80007a6:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 80007aa:	b21b      	sxth	r3, r3
 80007ac:	4313      	orrs	r3, r2
 80007ae:	b21b      	sxth	r3, r3
 80007b0:	b29b      	uxth	r3, r3
 80007b2:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 80007b6:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80007ba:	021b      	lsls	r3, r3, #8
 80007bc:	b21a      	sxth	r2, r3
 80007be:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 80007c2:	b21b      	sxth	r3, r3
 80007c4:	4313      	orrs	r3, r2
 80007c6:	b21b      	sxth	r3, r3
 80007c8:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 80007cc:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80007d0:	021b      	lsls	r3, r3, #8
 80007d2:	b21a      	sxth	r2, r3
 80007d4:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80007d8:	b21b      	sxth	r3, r3
 80007da:	4313      	orrs	r3, r2
 80007dc:	b21b      	sxth	r3, r3
 80007de:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 80007e2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80007e6:	021b      	lsls	r3, r3, #8
 80007e8:	b21a      	sxth	r2, r3
 80007ea:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80007ee:	b21b      	sxth	r3, r3
 80007f0:	4313      	orrs	r3, r2
 80007f2:	b21b      	sxth	r3, r3
 80007f4:	b29b      	uxth	r3, r3
 80007f6:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 80007fa:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 80007fe:	021b      	lsls	r3, r3, #8
 8000800:	b21a      	sxth	r2, r3
 8000802:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000806:	b21b      	sxth	r3, r3
 8000808:	4313      	orrs	r3, r2
 800080a:	b21b      	sxth	r3, r3
 800080c:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 8000810:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8000814:	021b      	lsls	r3, r3, #8
 8000816:	b21a      	sxth	r2, r3
 8000818:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 800081c:	b21b      	sxth	r3, r3
 800081e:	4313      	orrs	r3, r2
 8000820:	b21b      	sxth	r3, r3
 8000822:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 8000826:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800082a:	021b      	lsls	r3, r3, #8
 800082c:	b21a      	sxth	r2, r3
 800082e:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8000832:	b21b      	sxth	r3, r3
 8000834:	4313      	orrs	r3, r2
 8000836:	b21b      	sxth	r3, r3
 8000838:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 800083c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000840:	021b      	lsls	r3, r3, #8
 8000842:	b21a      	sxth	r2, r3
 8000844:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8000848:	b21b      	sxth	r3, r3
 800084a:	4313      	orrs	r3, r2
 800084c:	b21b      	sxth	r3, r3
 800084e:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 8000852:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8000856:	021b      	lsls	r3, r3, #8
 8000858:	b21a      	sxth	r2, r3
 800085a:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800085e:	b21b      	sxth	r3, r3
 8000860:	4313      	orrs	r3, r2
 8000862:	b21b      	sxth	r3, r3
 8000864:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 8000868:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800086c:	021b      	lsls	r3, r3, #8
 800086e:	b21a      	sxth	r2, r3
 8000870:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8000874:	b21b      	sxth	r3, r3
 8000876:	4313      	orrs	r3, r2
 8000878:	b21b      	sxth	r3, r3
 800087a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 800087e:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8000882:	021b      	lsls	r3, r3, #8
 8000884:	b21a      	sxth	r2, r3
 8000886:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800088a:	b21b      	sxth	r3, r3
 800088c:	4313      	orrs	r3, r2
 800088e:	b21b      	sxth	r3, r3
 8000890:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 8000894:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000898:	021b      	lsls	r3, r3, #8
 800089a:	b21a      	sxth	r2, r3
 800089c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80008a0:	b21b      	sxth	r3, r3
 80008a2:	4313      	orrs	r3, r2
 80008a4:	b21b      	sxth	r3, r3
 80008a6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
	dig_H1 = trimdata[24];
 80008aa:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 80008ae:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
	dig_H2 = (trimdata[26]<<8) | trimdata[25];
 80008b2:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 80008b6:	021b      	lsls	r3, r3, #8
 80008b8:	b21a      	sxth	r2, r3
 80008ba:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 80008be:	b21b      	sxth	r3, r3
 80008c0:	4313      	orrs	r3, r2
 80008c2:	b21b      	sxth	r3, r3
 80008c4:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
	dig_H3 = (trimdata[27]);
 80008c8:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80008cc:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
 80008d0:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 80008d4:	011b      	lsls	r3, r3, #4
 80008d6:	b21a      	sxth	r2, r3
 80008d8:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 80008dc:	b21b      	sxth	r3, r3
 80008de:	f003 030f 	and.w	r3, r3, #15
 80008e2:	b21b      	sxth	r3, r3
 80008e4:	4313      	orrs	r3, r2
 80008e6:	b21b      	sxth	r3, r3
 80008e8:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
	dig_H5 = (trimdata[30]<<4) | (trimdata[29]>>4);
 80008ec:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 80008f0:	011b      	lsls	r3, r3, #4
 80008f2:	b21a      	sxth	r2, r3
 80008f4:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 80008f8:	091b      	lsrs	r3, r3, #4
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	b21b      	sxth	r3, r3
 80008fe:	4313      	orrs	r3, r2
 8000900:	b21b      	sxth	r3, r3
 8000902:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	dig_H6 = (trimdata[31]);
 8000906:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800090a:	f887 30a4 	strb.w	r3, [r7, #164]	; 0xa4

	HAL_I2C_Mem_Read(&hi2c1, 0x77<<1, 0xF7, 1, RawData, 8, 1000);
 800090e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000912:	9302      	str	r3, [sp, #8]
 8000914:	2308      	movs	r3, #8
 8000916:	9301      	str	r3, [sp, #4]
 8000918:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800091c:	9300      	str	r3, [sp, #0]
 800091e:	2301      	movs	r3, #1
 8000920:	22f7      	movs	r2, #247	; 0xf7
 8000922:	21ee      	movs	r1, #238	; 0xee
 8000924:	482e      	ldr	r0, [pc, #184]	; (80009e0 <main+0x368>)
 8000926:	f001 fcef 	bl	8002308 <HAL_I2C_Mem_Read>

	pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 800092a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800092e:	031a      	lsls	r2, r3, #12
 8000930:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8000934:	011b      	lsls	r3, r3, #4
 8000936:	4313      	orrs	r3, r2
 8000938:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 800093c:	0912      	lsrs	r2, r2, #4
 800093e:	b2d2      	uxtb	r2, r2
 8000940:	4313      	orrs	r3, r2
 8000942:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 8000946:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800094a:	031a      	lsls	r2, r3, #12
 800094c:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8000950:	011b      	lsls	r3, r3, #4
 8000952:	4313      	orrs	r3, r2
 8000954:	f897 2059 	ldrb.w	r2, [r7, #89]	; 0x59
 8000958:	0912      	lsrs	r2, r2, #4
 800095a:	b2d2      	uxtb	r2, r2
 800095c:	4313      	orrs	r3, r2
 800095e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	hRaw = (RawData[6]<<8)|(RawData[7]);
 8000962:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8000966:	021b      	lsls	r3, r3, #8
 8000968:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 800096c:	4313      	orrs	r3, r2
 800096e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

	int temp = BME280_compensate_T_int32(tRaw);
 8000972:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000976:	469c      	mov	ip, r3
 8000978:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800097c:	f7ff fe46 	bl	800060c <BME280_compensate_T_int32.0>
 8000980:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
	int pressure = BME280_compensate_P_int64 (pRaw);
 8000984:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000988:	469c      	mov	ip, r3
 800098a:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800098e:	f000 f82d 	bl	80009ec <BME280_compensate_P_int64.1>
 8000992:	4603      	mov	r3, r0
 8000994:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	int humid = bme280_compensate_H_int32 (hRaw);
 8000998:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800099c:	469c      	mov	ip, r3
 800099e:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80009a2:	f000 facd 	bl	8000f40 <bme280_compensate_H_int32.2>
 80009a6:	4603      	mov	r3, r0
 80009a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

	int len = sprintf(SendData, "%d,%d,%d", temp, pressure, humid);
 80009ac:	1d38      	adds	r0, r7, #4
 80009ae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80009b2:	9300      	str	r3, [sp, #0]
 80009b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80009b8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80009bc:	4909      	ldr	r1, [pc, #36]	; (80009e4 <main+0x36c>)
 80009be:	f004 f9d3 	bl	8004d68 <siprintf>
 80009c2:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac

	HAL_UART_Transmit(&huart2, (uint8_t*)SendData, len, 10);// Sending in normal mode
 80009c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80009ca:	b29a      	uxth	r2, r3
 80009cc:	1d39      	adds	r1, r7, #4
 80009ce:	230a      	movs	r3, #10
 80009d0:	4805      	ldr	r0, [pc, #20]	; (80009e8 <main+0x370>)
 80009d2:	f003 fc71 	bl	80042b8 <HAL_UART_Transmit>
	HAL_Delay(1000);
 80009d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009da:	f000 fe85 	bl	80016e8 <HAL_Delay>
  {
 80009de:	e6c1      	b.n	8000764 <main+0xec>
 80009e0:	20000078 	.word	0x20000078
 80009e4:	080056c8 	.word	0x080056c8
 80009e8:	200000cc 	.word	0x200000cc

080009ec <BME280_compensate_P_int64.1>:
  {
 80009ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009f0:	b0cb      	sub	sp, #300	; 0x12c
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 80009f8:	4666      	mov	r6, ip
 80009fa:	f8c7 c108 	str.w	ip, [r7, #264]	; 0x108
  	var1 = ((int64_t)t_fine) - 128000;
 80009fe:	6833      	ldr	r3, [r6, #0]
 8000a00:	17da      	asrs	r2, r3, #31
 8000a02:	461c      	mov	r4, r3
 8000a04:	4615      	mov	r5, r2
 8000a06:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 8000a0a:	f145 3bff 	adc.w	fp, r5, #4294967295	; 0xffffffff
 8000a0e:	e9c7 ab48 	strd	sl, fp, [r7, #288]	; 0x120
  	var2 = var1 * var1 * (int64_t)dig_P6;
 8000a12:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8000a16:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000a1a:	fb03 f102 	mul.w	r1, r3, r2
 8000a1e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8000a22:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000a26:	fb02 f303 	mul.w	r3, r2, r3
 8000a2a:	18ca      	adds	r2, r1, r3
 8000a2c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000a30:	fba3 8903 	umull	r8, r9, r3, r3
 8000a34:	eb02 0309 	add.w	r3, r2, r9
 8000a38:	4699      	mov	r9, r3
 8000a3a:	f9b6 301a 	ldrsh.w	r3, [r6, #26]
 8000a3e:	b21b      	sxth	r3, r3
 8000a40:	17da      	asrs	r2, r3, #31
 8000a42:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8000a46:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8000a4a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8000a4e:	4603      	mov	r3, r0
 8000a50:	fb03 f209 	mul.w	r2, r3, r9
 8000a54:	460b      	mov	r3, r1
 8000a56:	fb08 f303 	mul.w	r3, r8, r3
 8000a5a:	4413      	add	r3, r2
 8000a5c:	4602      	mov	r2, r0
 8000a5e:	fba8 1202 	umull	r1, r2, r8, r2
 8000a62:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8000a66:	460a      	mov	r2, r1
 8000a68:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8000a6c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8000a70:	4413      	add	r3, r2
 8000a72:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8000a76:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8000a7a:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 8000a7e:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
  	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 8000a82:	f9b6 3018 	ldrsh.w	r3, [r6, #24]
 8000a86:	b21b      	sxth	r3, r3
 8000a88:	17da      	asrs	r2, r3, #31
 8000a8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000a8e:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8000a92:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000a96:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8000a9a:	462a      	mov	r2, r5
 8000a9c:	fb02 f203 	mul.w	r2, r2, r3
 8000aa0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000aa4:	4621      	mov	r1, r4
 8000aa6:	fb01 f303 	mul.w	r3, r1, r3
 8000aaa:	441a      	add	r2, r3
 8000aac:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000ab0:	4621      	mov	r1, r4
 8000ab2:	fba3 1301 	umull	r1, r3, r3, r1
 8000ab6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000aba:	460b      	mov	r3, r1
 8000abc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8000ac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000ac4:	18d3      	adds	r3, r2, r3
 8000ac6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000aca:	f04f 0000 	mov.w	r0, #0
 8000ace:	f04f 0100 	mov.w	r1, #0
 8000ad2:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8000ad6:	462b      	mov	r3, r5
 8000ad8:	0459      	lsls	r1, r3, #17
 8000ada:	4623      	mov	r3, r4
 8000adc:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8000ae0:	4623      	mov	r3, r4
 8000ae2:	0458      	lsls	r0, r3, #17
 8000ae4:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8000ae8:	1814      	adds	r4, r2, r0
 8000aea:	643c      	str	r4, [r7, #64]	; 0x40
 8000aec:	414b      	adcs	r3, r1
 8000aee:	647b      	str	r3, [r7, #68]	; 0x44
 8000af0:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8000af4:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
  	var2 = var2 + (((int64_t)dig_P4)<<35);
 8000af8:	f9b6 3016 	ldrsh.w	r3, [r6, #22]
 8000afc:	b21b      	sxth	r3, r3
 8000afe:	17da      	asrs	r2, r3, #31
 8000b00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000b04:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8000b08:	f04f 0000 	mov.w	r0, #0
 8000b0c:	f04f 0100 	mov.w	r1, #0
 8000b10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000b14:	00d9      	lsls	r1, r3, #3
 8000b16:	2000      	movs	r0, #0
 8000b18:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8000b1c:	1814      	adds	r4, r2, r0
 8000b1e:	63bc      	str	r4, [r7, #56]	; 0x38
 8000b20:	414b      	adcs	r3, r1
 8000b22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000b24:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8000b28:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
  	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 8000b2c:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8000b30:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000b34:	fb03 f102 	mul.w	r1, r3, r2
 8000b38:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8000b3c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000b40:	fb02 f303 	mul.w	r3, r2, r3
 8000b44:	18ca      	adds	r2, r1, r3
 8000b46:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000b4a:	fba3 1303 	umull	r1, r3, r3, r3
 8000b4e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8000b52:	460b      	mov	r3, r1
 8000b54:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8000b58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000b5c:	18d3      	adds	r3, r2, r3
 8000b5e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8000b62:	f9b6 3014 	ldrsh.w	r3, [r6, #20]
 8000b66:	b21b      	sxth	r3, r3
 8000b68:	17da      	asrs	r2, r3, #31
 8000b6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8000b6e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8000b72:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 8000b76:	462b      	mov	r3, r5
 8000b78:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8000b7c:	4642      	mov	r2, r8
 8000b7e:	fb02 f203 	mul.w	r2, r2, r3
 8000b82:	464b      	mov	r3, r9
 8000b84:	4621      	mov	r1, r4
 8000b86:	fb01 f303 	mul.w	r3, r1, r3
 8000b8a:	4413      	add	r3, r2
 8000b8c:	4622      	mov	r2, r4
 8000b8e:	4641      	mov	r1, r8
 8000b90:	fba2 1201 	umull	r1, r2, r2, r1
 8000b94:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8000b98:	460a      	mov	r2, r1
 8000b9a:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8000b9e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8000ba2:	4413      	add	r3, r2
 8000ba4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	f04f 0100 	mov.w	r1, #0
 8000bb0:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8000bb4:	4623      	mov	r3, r4
 8000bb6:	0a18      	lsrs	r0, r3, #8
 8000bb8:	462b      	mov	r3, r5
 8000bba:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000bbe:	462b      	mov	r3, r5
 8000bc0:	1219      	asrs	r1, r3, #8
 8000bc2:	f9b6 3012 	ldrsh.w	r3, [r6, #18]
 8000bc6:	b21b      	sxth	r3, r3
 8000bc8:	17da      	asrs	r2, r3, #31
 8000bca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000bce:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8000bd2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000bd6:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8000bda:	464a      	mov	r2, r9
 8000bdc:	fb02 f203 	mul.w	r2, r2, r3
 8000be0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000be4:	4644      	mov	r4, r8
 8000be6:	fb04 f303 	mul.w	r3, r4, r3
 8000bea:	441a      	add	r2, r3
 8000bec:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000bf0:	4644      	mov	r4, r8
 8000bf2:	fba3 4304 	umull	r4, r3, r3, r4
 8000bf6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8000bfa:	4623      	mov	r3, r4
 8000bfc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000c00:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000c04:	18d3      	adds	r3, r2, r3
 8000c06:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8000c0a:	f04f 0200 	mov.w	r2, #0
 8000c0e:	f04f 0300 	mov.w	r3, #0
 8000c12:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8000c16:	464c      	mov	r4, r9
 8000c18:	0323      	lsls	r3, r4, #12
 8000c1a:	4644      	mov	r4, r8
 8000c1c:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8000c20:	4644      	mov	r4, r8
 8000c22:	0322      	lsls	r2, r4, #12
 8000c24:	1884      	adds	r4, r0, r2
 8000c26:	633c      	str	r4, [r7, #48]	; 0x30
 8000c28:	eb41 0303 	adc.w	r3, r1, r3
 8000c2c:	637b      	str	r3, [r7, #52]	; 0x34
 8000c2e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8000c32:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
  	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 8000c36:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8000c3a:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8000c3e:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8000c42:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8000c46:	8a33      	ldrh	r3, [r6, #16]
 8000c48:	b29b      	uxth	r3, r3
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000c50:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8000c54:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8000c58:	462b      	mov	r3, r5
 8000c5a:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8000c5e:	4642      	mov	r2, r8
 8000c60:	fb02 f203 	mul.w	r2, r2, r3
 8000c64:	464b      	mov	r3, r9
 8000c66:	4621      	mov	r1, r4
 8000c68:	fb01 f303 	mul.w	r3, r1, r3
 8000c6c:	4413      	add	r3, r2
 8000c6e:	4622      	mov	r2, r4
 8000c70:	4641      	mov	r1, r8
 8000c72:	fba2 1201 	umull	r1, r2, r2, r1
 8000c76:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8000c7a:	460a      	mov	r2, r1
 8000c7c:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8000c80:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8000c84:	4413      	add	r3, r2
 8000c86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8000c8a:	f04f 0200 	mov.w	r2, #0
 8000c8e:	f04f 0300 	mov.w	r3, #0
 8000c92:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8000c96:	4629      	mov	r1, r5
 8000c98:	104a      	asrs	r2, r1, #1
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	17cb      	asrs	r3, r1, #31
 8000c9e:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
  	if (var1 == 0)
 8000ca2:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	d101      	bne.n	8000cae <BME280_compensate_P_int64.1+0x2c2>
  		return 0; // avoid exception caused by division by zero
 8000caa:	2300      	movs	r3, #0
 8000cac:	e142      	b.n	8000f34 <BME280_compensate_P_int64.1+0x548>
  	p = 1048576-adc_P;
 8000cae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000cb2:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8000cb6:	17da      	asrs	r2, r3, #31
 8000cb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8000cba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000cbc:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8000cc0:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
  	p = (((p<<31)-var2)*3125)/var1;
 8000cc4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000cc8:	105b      	asrs	r3, r3, #1
 8000cca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000cce:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000cd2:	07db      	lsls	r3, r3, #31
 8000cd4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000cd8:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8000cdc:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8000ce0:	4621      	mov	r1, r4
 8000ce2:	1a89      	subs	r1, r1, r2
 8000ce4:	67b9      	str	r1, [r7, #120]	; 0x78
 8000ce6:	4629      	mov	r1, r5
 8000ce8:	eb61 0303 	sbc.w	r3, r1, r3
 8000cec:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000cee:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8000cf2:	4622      	mov	r2, r4
 8000cf4:	462b      	mov	r3, r5
 8000cf6:	1891      	adds	r1, r2, r2
 8000cf8:	6239      	str	r1, [r7, #32]
 8000cfa:	415b      	adcs	r3, r3
 8000cfc:	627b      	str	r3, [r7, #36]	; 0x24
 8000cfe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000d02:	4621      	mov	r1, r4
 8000d04:	1851      	adds	r1, r2, r1
 8000d06:	61b9      	str	r1, [r7, #24]
 8000d08:	4629      	mov	r1, r5
 8000d0a:	414b      	adcs	r3, r1
 8000d0c:	61fb      	str	r3, [r7, #28]
 8000d0e:	f04f 0200 	mov.w	r2, #0
 8000d12:	f04f 0300 	mov.w	r3, #0
 8000d16:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8000d1a:	4649      	mov	r1, r9
 8000d1c:	018b      	lsls	r3, r1, #6
 8000d1e:	4641      	mov	r1, r8
 8000d20:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8000d24:	4641      	mov	r1, r8
 8000d26:	018a      	lsls	r2, r1, #6
 8000d28:	4641      	mov	r1, r8
 8000d2a:	1889      	adds	r1, r1, r2
 8000d2c:	6139      	str	r1, [r7, #16]
 8000d2e:	4649      	mov	r1, r9
 8000d30:	eb43 0101 	adc.w	r1, r3, r1
 8000d34:	6179      	str	r1, [r7, #20]
 8000d36:	f04f 0200 	mov.w	r2, #0
 8000d3a:	f04f 0300 	mov.w	r3, #0
 8000d3e:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8000d42:	4649      	mov	r1, r9
 8000d44:	008b      	lsls	r3, r1, #2
 8000d46:	4641      	mov	r1, r8
 8000d48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000d4c:	4641      	mov	r1, r8
 8000d4e:	008a      	lsls	r2, r1, #2
 8000d50:	4610      	mov	r0, r2
 8000d52:	4619      	mov	r1, r3
 8000d54:	4603      	mov	r3, r0
 8000d56:	4622      	mov	r2, r4
 8000d58:	189b      	adds	r3, r3, r2
 8000d5a:	60bb      	str	r3, [r7, #8]
 8000d5c:	460b      	mov	r3, r1
 8000d5e:	462a      	mov	r2, r5
 8000d60:	eb42 0303 	adc.w	r3, r2, r3
 8000d64:	60fb      	str	r3, [r7, #12]
 8000d66:	f04f 0200 	mov.w	r2, #0
 8000d6a:	f04f 0300 	mov.w	r3, #0
 8000d6e:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8000d72:	4649      	mov	r1, r9
 8000d74:	008b      	lsls	r3, r1, #2
 8000d76:	4641      	mov	r1, r8
 8000d78:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000d7c:	4641      	mov	r1, r8
 8000d7e:	008a      	lsls	r2, r1, #2
 8000d80:	4610      	mov	r0, r2
 8000d82:	4619      	mov	r1, r3
 8000d84:	4603      	mov	r3, r0
 8000d86:	4622      	mov	r2, r4
 8000d88:	189b      	adds	r3, r3, r2
 8000d8a:	673b      	str	r3, [r7, #112]	; 0x70
 8000d8c:	462b      	mov	r3, r5
 8000d8e:	460a      	mov	r2, r1
 8000d90:	eb42 0303 	adc.w	r3, r2, r3
 8000d94:	677b      	str	r3, [r7, #116]	; 0x74
 8000d96:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8000d9a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8000d9e:	f7ff fa67 	bl	8000270 <__aeabi_ldivmod>
 8000da2:	4602      	mov	r2, r0
 8000da4:	460b      	mov	r3, r1
 8000da6:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
  	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8000daa:	f9b6 300e 	ldrsh.w	r3, [r6, #14]
 8000dae:	b21b      	sxth	r3, r3
 8000db0:	17da      	asrs	r2, r3, #31
 8000db2:	66bb      	str	r3, [r7, #104]	; 0x68
 8000db4:	66fa      	str	r2, [r7, #108]	; 0x6c
 8000db6:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8000dba:	f04f 0000 	mov.w	r0, #0
 8000dbe:	f04f 0100 	mov.w	r1, #0
 8000dc2:	0b50      	lsrs	r0, r2, #13
 8000dc4:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000dc8:	1359      	asrs	r1, r3, #13
 8000dca:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8000dce:	462b      	mov	r3, r5
 8000dd0:	fb00 f203 	mul.w	r2, r0, r3
 8000dd4:	4623      	mov	r3, r4
 8000dd6:	fb03 f301 	mul.w	r3, r3, r1
 8000dda:	4413      	add	r3, r2
 8000ddc:	4622      	mov	r2, r4
 8000dde:	fba2 1200 	umull	r1, r2, r2, r0
 8000de2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8000de6:	460a      	mov	r2, r1
 8000de8:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8000dec:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8000df0:	4413      	add	r3, r2
 8000df2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8000df6:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8000dfa:	f04f 0000 	mov.w	r0, #0
 8000dfe:	f04f 0100 	mov.w	r1, #0
 8000e02:	0b50      	lsrs	r0, r2, #13
 8000e04:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000e08:	1359      	asrs	r1, r3, #13
 8000e0a:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8000e0e:	462b      	mov	r3, r5
 8000e10:	fb00 f203 	mul.w	r2, r0, r3
 8000e14:	4623      	mov	r3, r4
 8000e16:	fb03 f301 	mul.w	r3, r3, r1
 8000e1a:	4413      	add	r3, r2
 8000e1c:	4622      	mov	r2, r4
 8000e1e:	fba2 1200 	umull	r1, r2, r2, r0
 8000e22:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8000e26:	460a      	mov	r2, r1
 8000e28:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8000e2c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8000e30:	4413      	add	r3, r2
 8000e32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8000e36:	f04f 0200 	mov.w	r2, #0
 8000e3a:	f04f 0300 	mov.w	r3, #0
 8000e3e:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8000e42:	4621      	mov	r1, r4
 8000e44:	0e4a      	lsrs	r2, r1, #25
 8000e46:	4629      	mov	r1, r5
 8000e48:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8000e4c:	4629      	mov	r1, r5
 8000e4e:	164b      	asrs	r3, r1, #25
 8000e50:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
  	var2 = (((int64_t)dig_P8) * p) >> 19;
 8000e54:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8000e58:	b21b      	sxth	r3, r3
 8000e5a:	17da      	asrs	r2, r3, #31
 8000e5c:	663b      	str	r3, [r7, #96]	; 0x60
 8000e5e:	667a      	str	r2, [r7, #100]	; 0x64
 8000e60:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000e64:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8000e68:	462a      	mov	r2, r5
 8000e6a:	fb02 f203 	mul.w	r2, r2, r3
 8000e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000e72:	4621      	mov	r1, r4
 8000e74:	fb01 f303 	mul.w	r3, r1, r3
 8000e78:	4413      	add	r3, r2
 8000e7a:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8000e7e:	4621      	mov	r1, r4
 8000e80:	fba2 1201 	umull	r1, r2, r2, r1
 8000e84:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8000e88:	460a      	mov	r2, r1
 8000e8a:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8000e8e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8000e92:	4413      	add	r3, r2
 8000e94:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8000e98:	f04f 0200 	mov.w	r2, #0
 8000e9c:	f04f 0300 	mov.w	r3, #0
 8000ea0:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8000ea4:	4621      	mov	r1, r4
 8000ea6:	0cca      	lsrs	r2, r1, #19
 8000ea8:	4629      	mov	r1, r5
 8000eaa:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8000eae:	4629      	mov	r1, r5
 8000eb0:	14cb      	asrs	r3, r1, #19
 8000eb2:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
  	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8000eb6:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8000eba:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8000ebe:	1884      	adds	r4, r0, r2
 8000ec0:	65bc      	str	r4, [r7, #88]	; 0x58
 8000ec2:	eb41 0303 	adc.w	r3, r1, r3
 8000ec6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000ec8:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8000ecc:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8000ed0:	4621      	mov	r1, r4
 8000ed2:	1889      	adds	r1, r1, r2
 8000ed4:	6539      	str	r1, [r7, #80]	; 0x50
 8000ed6:	4629      	mov	r1, r5
 8000ed8:	eb43 0101 	adc.w	r1, r3, r1
 8000edc:	6579      	str	r1, [r7, #84]	; 0x54
 8000ede:	f04f 0000 	mov.w	r0, #0
 8000ee2:	f04f 0100 	mov.w	r1, #0
 8000ee6:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8000eea:	4623      	mov	r3, r4
 8000eec:	0a18      	lsrs	r0, r3, #8
 8000eee:	462b      	mov	r3, r5
 8000ef0:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000ef4:	462b      	mov	r3, r5
 8000ef6:	1219      	asrs	r1, r3, #8
 8000ef8:	f9b6 300a 	ldrsh.w	r3, [r6, #10]
 8000efc:	b21b      	sxth	r3, r3
 8000efe:	17da      	asrs	r2, r3, #31
 8000f00:	64bb      	str	r3, [r7, #72]	; 0x48
 8000f02:	64fa      	str	r2, [r7, #76]	; 0x4c
 8000f04:	f04f 0200 	mov.w	r2, #0
 8000f08:	f04f 0300 	mov.w	r3, #0
 8000f0c:	e9d7 5612 	ldrd	r5, r6, [r7, #72]	; 0x48
 8000f10:	4634      	mov	r4, r6
 8000f12:	0123      	lsls	r3, r4, #4
 8000f14:	462c      	mov	r4, r5
 8000f16:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000f1a:	462c      	mov	r4, r5
 8000f1c:	0122      	lsls	r2, r4, #4
 8000f1e:	1884      	adds	r4, r0, r2
 8000f20:	603c      	str	r4, [r7, #0]
 8000f22:	eb41 0303 	adc.w	r3, r1, r3
 8000f26:	607b      	str	r3, [r7, #4]
 8000f28:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000f2c:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
  	return (uint32_t)p;
 8000f30:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
  }
 8000f34:	4618      	mov	r0, r3
 8000f36:	f507 7796 	add.w	r7, r7, #300	; 0x12c
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000f40 <bme280_compensate_H_int32.2>:
  {
 8000f40:	b490      	push	{r4, r7}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	4663      	mov	r3, ip
 8000f4a:	f8c7 c000 	str.w	ip, [r7]
	  v_x1_u32r = (t_fine - ((int32_t)76800));
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	f5a2 3296 	sub.w	r2, r2, #76800	; 0x12c00
 8000f54:	60fa      	str	r2, [r7, #12]
	  v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) * v_x1_u32r)) +
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	0391      	lsls	r1, r2, #14
 8000f5a:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8000f5e:	0512      	lsls	r2, r2, #20
 8000f60:	1a89      	subs	r1, r1, r2
 8000f62:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8000f66:	4610      	mov	r0, r2
 8000f68:	68fa      	ldr	r2, [r7, #12]
 8000f6a:	fb00 f202 	mul.w	r2, r0, r2
 8000f6e:	1a8a      	subs	r2, r1, r2
 8000f70:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
	  ((int32_t)16384)) >> 15) * (((((((v_x1_u32r * ((int32_t)dig_H6)) >> 10) * (((v_x1_u32r *
 8000f74:	13d2      	asrs	r2, r2, #15
 8000f76:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
 8000f7a:	4608      	mov	r0, r1
 8000f7c:	68f9      	ldr	r1, [r7, #12]
 8000f7e:	fb00 f101 	mul.w	r1, r0, r1
 8000f82:	1289      	asrs	r1, r1, #10
	  ((int32_t)dig_H3)) >> 11) + ((int32_t)32768))) >> 10) + ((int32_t)2097152)) *
 8000f84:	f893 0023 	ldrb.w	r0, [r3, #35]	; 0x23
 8000f88:	4604      	mov	r4, r0
	  ((int32_t)16384)) >> 15) * (((((((v_x1_u32r * ((int32_t)dig_H6)) >> 10) * (((v_x1_u32r *
 8000f8a:	68f8      	ldr	r0, [r7, #12]
 8000f8c:	fb04 f000 	mul.w	r0, r4, r0
	  ((int32_t)dig_H3)) >> 11) + ((int32_t)32768))) >> 10) + ((int32_t)2097152)) *
 8000f90:	12c0      	asrs	r0, r0, #11
 8000f92:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
	  ((int32_t)16384)) >> 15) * (((((((v_x1_u32r * ((int32_t)dig_H6)) >> 10) * (((v_x1_u32r *
 8000f96:	fb00 f101 	mul.w	r1, r0, r1
	  ((int32_t)dig_H3)) >> 11) + ((int32_t)32768))) >> 10) + ((int32_t)2097152)) *
 8000f9a:	1289      	asrs	r1, r1, #10
 8000f9c:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
	  ((int32_t)dig_H2) + 8192) >> 14));
 8000fa0:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
	  ((int32_t)dig_H3)) >> 11) + ((int32_t)32768))) >> 10) + ((int32_t)2097152)) *
 8000fa4:	fb00 f101 	mul.w	r1, r0, r1
	  ((int32_t)dig_H2) + 8192) >> 14));
 8000fa8:	f501 5100 	add.w	r1, r1, #8192	; 0x2000
 8000fac:	1389      	asrs	r1, r1, #14
	  v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) * v_x1_u32r)) +
 8000fae:	fb01 f202 	mul.w	r2, r1, r2
 8000fb2:	60fa      	str	r2, [r7, #12]
	  v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) * ((int32_t)dig_H1)) >> 4)); v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 8000fb4:	68fa      	ldr	r2, [r7, #12]
 8000fb6:	13d2      	asrs	r2, r2, #15
 8000fb8:	68f9      	ldr	r1, [r7, #12]
 8000fba:	13c9      	asrs	r1, r1, #15
 8000fbc:	fb01 f202 	mul.w	r2, r1, r2
 8000fc0:	11d2      	asrs	r2, r2, #7
 8000fc2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8000fc6:	fb02 f303 	mul.w	r3, r2, r3
 8000fca:	111b      	asrs	r3, r3, #4
 8000fcc:	68fa      	ldr	r2, [r7, #12]
 8000fce:	1ad3      	subs	r3, r2, r3
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8000fd8:	60fb      	str	r3, [r7, #12]
	  v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8000fe0:	bfa8      	it	ge
 8000fe2:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8000fe6:	60fb      	str	r3, [r7, #12]
	  return (uint32_t)(v_x1_u32r>>12);
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	131b      	asrs	r3, r3, #12
  }
 8000fec:	4618      	mov	r0, r3
 8000fee:	3710      	adds	r7, #16
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bc90      	pop	{r4, r7}
 8000ff4:	4770      	bx	lr

08000ff6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b096      	sub	sp, #88	; 0x58
 8000ffa:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	2244      	movs	r2, #68	; 0x44
 8001002:	2100      	movs	r1, #0
 8001004:	4618      	mov	r0, r3
 8001006:	f003 fecf 	bl	8004da8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800100a:	463b      	mov	r3, r7
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001018:	f44f 7000 	mov.w	r0, #512	; 0x200
 800101c:	f001 fdec 	bl	8002bf8 <HAL_PWREx_ControlVoltageScaling>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001026:	f000 f92b 	bl	8001280 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800102a:	2302      	movs	r3, #2
 800102c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800102e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001032:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001034:	2310      	movs	r3, #16
 8001036:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001038:	2302      	movs	r3, #2
 800103a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800103c:	2302      	movs	r3, #2
 800103e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001040:	2301      	movs	r3, #1
 8001042:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001044:	230a      	movs	r3, #10
 8001046:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001048:	2307      	movs	r3, #7
 800104a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800104c:	2302      	movs	r3, #2
 800104e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001050:	2302      	movs	r3, #2
 8001052:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001054:	f107 0314 	add.w	r3, r7, #20
 8001058:	4618      	mov	r0, r3
 800105a:	f001 fe23 	bl	8002ca4 <HAL_RCC_OscConfig>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001064:	f000 f90c 	bl	8001280 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001068:	230f      	movs	r3, #15
 800106a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800106c:	2303      	movs	r3, #3
 800106e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001070:	2300      	movs	r3, #0
 8001072:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001074:	2300      	movs	r3, #0
 8001076:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001078:	2300      	movs	r3, #0
 800107a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800107c:	463b      	mov	r3, r7
 800107e:	2104      	movs	r1, #4
 8001080:	4618      	mov	r0, r3
 8001082:	f002 f9eb 	bl	800345c <HAL_RCC_ClockConfig>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800108c:	f000 f8f8 	bl	8001280 <Error_Handler>
  }
}
 8001090:	bf00      	nop
 8001092:	3758      	adds	r7, #88	; 0x58
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800109c:	4b1b      	ldr	r3, [pc, #108]	; (800110c <MX_I2C1_Init+0x74>)
 800109e:	4a1c      	ldr	r2, [pc, #112]	; (8001110 <MX_I2C1_Init+0x78>)
 80010a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80010a2:	4b1a      	ldr	r3, [pc, #104]	; (800110c <MX_I2C1_Init+0x74>)
 80010a4:	4a1b      	ldr	r2, [pc, #108]	; (8001114 <MX_I2C1_Init+0x7c>)
 80010a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80010a8:	4b18      	ldr	r3, [pc, #96]	; (800110c <MX_I2C1_Init+0x74>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010ae:	4b17      	ldr	r3, [pc, #92]	; (800110c <MX_I2C1_Init+0x74>)
 80010b0:	2201      	movs	r2, #1
 80010b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010b4:	4b15      	ldr	r3, [pc, #84]	; (800110c <MX_I2C1_Init+0x74>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80010ba:	4b14      	ldr	r3, [pc, #80]	; (800110c <MX_I2C1_Init+0x74>)
 80010bc:	2200      	movs	r2, #0
 80010be:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010c0:	4b12      	ldr	r3, [pc, #72]	; (800110c <MX_I2C1_Init+0x74>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010c6:	4b11      	ldr	r3, [pc, #68]	; (800110c <MX_I2C1_Init+0x74>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010cc:	4b0f      	ldr	r3, [pc, #60]	; (800110c <MX_I2C1_Init+0x74>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010d2:	480e      	ldr	r0, [pc, #56]	; (800110c <MX_I2C1_Init+0x74>)
 80010d4:	f000 ff68 	bl	8001fa8 <HAL_I2C_Init>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80010de:	f000 f8cf 	bl	8001280 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010e2:	2100      	movs	r1, #0
 80010e4:	4809      	ldr	r0, [pc, #36]	; (800110c <MX_I2C1_Init+0x74>)
 80010e6:	f001 fce1 	bl	8002aac <HAL_I2CEx_ConfigAnalogFilter>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80010f0:	f000 f8c6 	bl	8001280 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80010f4:	2100      	movs	r1, #0
 80010f6:	4805      	ldr	r0, [pc, #20]	; (800110c <MX_I2C1_Init+0x74>)
 80010f8:	f001 fd23 	bl	8002b42 <HAL_I2CEx_ConfigDigitalFilter>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001102:	f000 f8bd 	bl	8001280 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000078 	.word	0x20000078
 8001110:	40005400 	.word	0x40005400
 8001114:	10909cec 	.word	0x10909cec

08001118 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800111c:	4b14      	ldr	r3, [pc, #80]	; (8001170 <MX_USART2_UART_Init+0x58>)
 800111e:	4a15      	ldr	r2, [pc, #84]	; (8001174 <MX_USART2_UART_Init+0x5c>)
 8001120:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001122:	4b13      	ldr	r3, [pc, #76]	; (8001170 <MX_USART2_UART_Init+0x58>)
 8001124:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001128:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800112a:	4b11      	ldr	r3, [pc, #68]	; (8001170 <MX_USART2_UART_Init+0x58>)
 800112c:	2200      	movs	r2, #0
 800112e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001130:	4b0f      	ldr	r3, [pc, #60]	; (8001170 <MX_USART2_UART_Init+0x58>)
 8001132:	2200      	movs	r2, #0
 8001134:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001136:	4b0e      	ldr	r3, [pc, #56]	; (8001170 <MX_USART2_UART_Init+0x58>)
 8001138:	2200      	movs	r2, #0
 800113a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800113c:	4b0c      	ldr	r3, [pc, #48]	; (8001170 <MX_USART2_UART_Init+0x58>)
 800113e:	220c      	movs	r2, #12
 8001140:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001142:	4b0b      	ldr	r3, [pc, #44]	; (8001170 <MX_USART2_UART_Init+0x58>)
 8001144:	2200      	movs	r2, #0
 8001146:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001148:	4b09      	ldr	r3, [pc, #36]	; (8001170 <MX_USART2_UART_Init+0x58>)
 800114a:	2200      	movs	r2, #0
 800114c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800114e:	4b08      	ldr	r3, [pc, #32]	; (8001170 <MX_USART2_UART_Init+0x58>)
 8001150:	2200      	movs	r2, #0
 8001152:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001154:	4b06      	ldr	r3, [pc, #24]	; (8001170 <MX_USART2_UART_Init+0x58>)
 8001156:	2200      	movs	r2, #0
 8001158:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800115a:	4805      	ldr	r0, [pc, #20]	; (8001170 <MX_USART2_UART_Init+0x58>)
 800115c:	f003 f85e 	bl	800421c <HAL_UART_Init>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001166:	f000 f88b 	bl	8001280 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	200000cc 	.word	0x200000cc
 8001174:	40004400 	.word	0x40004400

08001178 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800117e:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <MX_DMA_Init+0x38>)
 8001180:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001182:	4a0b      	ldr	r2, [pc, #44]	; (80011b0 <MX_DMA_Init+0x38>)
 8001184:	f043 0301 	orr.w	r3, r3, #1
 8001188:	6493      	str	r3, [r2, #72]	; 0x48
 800118a:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <MX_DMA_Init+0x38>)
 800118c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	607b      	str	r3, [r7, #4]
 8001194:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001196:	2200      	movs	r2, #0
 8001198:	2100      	movs	r1, #0
 800119a:	2010      	movs	r0, #16
 800119c:	f000 fba3 	bl	80018e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80011a0:	2010      	movs	r0, #16
 80011a2:	f000 fbbc 	bl	800191e <HAL_NVIC_EnableIRQ>

}
 80011a6:	bf00      	nop
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40021000 	.word	0x40021000

080011b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b08a      	sub	sp, #40	; 0x28
 80011b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ba:	f107 0314 	add.w	r3, r7, #20
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	605a      	str	r2, [r3, #4]
 80011c4:	609a      	str	r2, [r3, #8]
 80011c6:	60da      	str	r2, [r3, #12]
 80011c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ca:	4b2b      	ldr	r3, [pc, #172]	; (8001278 <MX_GPIO_Init+0xc4>)
 80011cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ce:	4a2a      	ldr	r2, [pc, #168]	; (8001278 <MX_GPIO_Init+0xc4>)
 80011d0:	f043 0304 	orr.w	r3, r3, #4
 80011d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011d6:	4b28      	ldr	r3, [pc, #160]	; (8001278 <MX_GPIO_Init+0xc4>)
 80011d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011da:	f003 0304 	and.w	r3, r3, #4
 80011de:	613b      	str	r3, [r7, #16]
 80011e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011e2:	4b25      	ldr	r3, [pc, #148]	; (8001278 <MX_GPIO_Init+0xc4>)
 80011e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e6:	4a24      	ldr	r2, [pc, #144]	; (8001278 <MX_GPIO_Init+0xc4>)
 80011e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ee:	4b22      	ldr	r3, [pc, #136]	; (8001278 <MX_GPIO_Init+0xc4>)
 80011f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fa:	4b1f      	ldr	r3, [pc, #124]	; (8001278 <MX_GPIO_Init+0xc4>)
 80011fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fe:	4a1e      	ldr	r2, [pc, #120]	; (8001278 <MX_GPIO_Init+0xc4>)
 8001200:	f043 0301 	orr.w	r3, r3, #1
 8001204:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001206:	4b1c      	ldr	r3, [pc, #112]	; (8001278 <MX_GPIO_Init+0xc4>)
 8001208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	60bb      	str	r3, [r7, #8]
 8001210:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001212:	4b19      	ldr	r3, [pc, #100]	; (8001278 <MX_GPIO_Init+0xc4>)
 8001214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001216:	4a18      	ldr	r2, [pc, #96]	; (8001278 <MX_GPIO_Init+0xc4>)
 8001218:	f043 0302 	orr.w	r3, r3, #2
 800121c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800121e:	4b16      	ldr	r3, [pc, #88]	; (8001278 <MX_GPIO_Init+0xc4>)
 8001220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001222:	f003 0302 	and.w	r3, r3, #2
 8001226:	607b      	str	r3, [r7, #4]
 8001228:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800122a:	2200      	movs	r2, #0
 800122c:	2120      	movs	r1, #32
 800122e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001232:	f000 fea1 	bl	8001f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001236:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800123a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800123c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001240:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	2300      	movs	r3, #0
 8001244:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001246:	f107 0314 	add.w	r3, r7, #20
 800124a:	4619      	mov	r1, r3
 800124c:	480b      	ldr	r0, [pc, #44]	; (800127c <MX_GPIO_Init+0xc8>)
 800124e:	f000 fce9 	bl	8001c24 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001252:	2320      	movs	r3, #32
 8001254:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001256:	2301      	movs	r3, #1
 8001258:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125e:	2300      	movs	r3, #0
 8001260:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001262:	f107 0314 	add.w	r3, r7, #20
 8001266:	4619      	mov	r1, r3
 8001268:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800126c:	f000 fcda 	bl	8001c24 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001270:	bf00      	nop
 8001272:	3728      	adds	r7, #40	; 0x28
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40021000 	.word	0x40021000
 800127c:	48000800 	.word	0x48000800

08001280 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001284:	b672      	cpsid	i
}
 8001286:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001288:	e7fe      	b.n	8001288 <Error_Handler+0x8>
	...

0800128c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001292:	4b0f      	ldr	r3, [pc, #60]	; (80012d0 <HAL_MspInit+0x44>)
 8001294:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001296:	4a0e      	ldr	r2, [pc, #56]	; (80012d0 <HAL_MspInit+0x44>)
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	6613      	str	r3, [r2, #96]	; 0x60
 800129e:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <HAL_MspInit+0x44>)
 80012a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	607b      	str	r3, [r7, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012aa:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <HAL_MspInit+0x44>)
 80012ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ae:	4a08      	ldr	r2, [pc, #32]	; (80012d0 <HAL_MspInit+0x44>)
 80012b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b4:	6593      	str	r3, [r2, #88]	; 0x58
 80012b6:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <HAL_MspInit+0x44>)
 80012b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012be:	603b      	str	r3, [r7, #0]
 80012c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012c2:	bf00      	nop
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	40021000 	.word	0x40021000

080012d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b0ac      	sub	sp, #176	; 0xb0
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012dc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]
 80012e8:	60da      	str	r2, [r3, #12]
 80012ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012ec:	f107 0314 	add.w	r3, r7, #20
 80012f0:	2288      	movs	r2, #136	; 0x88
 80012f2:	2100      	movs	r1, #0
 80012f4:	4618      	mov	r0, r3
 80012f6:	f003 fd57 	bl	8004da8 <memset>
  if(hi2c->Instance==I2C1)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a21      	ldr	r2, [pc, #132]	; (8001384 <HAL_I2C_MspInit+0xb0>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d13b      	bne.n	800137c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001304:	2340      	movs	r3, #64	; 0x40
 8001306:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001308:	2300      	movs	r3, #0
 800130a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800130c:	f107 0314 	add.w	r3, r7, #20
 8001310:	4618      	mov	r0, r3
 8001312:	f002 fac7 	bl	80038a4 <HAL_RCCEx_PeriphCLKConfig>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800131c:	f7ff ffb0 	bl	8001280 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001320:	4b19      	ldr	r3, [pc, #100]	; (8001388 <HAL_I2C_MspInit+0xb4>)
 8001322:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001324:	4a18      	ldr	r2, [pc, #96]	; (8001388 <HAL_I2C_MspInit+0xb4>)
 8001326:	f043 0302 	orr.w	r3, r3, #2
 800132a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800132c:	4b16      	ldr	r3, [pc, #88]	; (8001388 <HAL_I2C_MspInit+0xb4>)
 800132e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001330:	f003 0302 	and.w	r3, r3, #2
 8001334:	613b      	str	r3, [r7, #16]
 8001336:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001338:	f44f 7340 	mov.w	r3, #768	; 0x300
 800133c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001340:	2312      	movs	r3, #18
 8001342:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	2300      	movs	r3, #0
 8001348:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800134c:	2303      	movs	r3, #3
 800134e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001352:	2304      	movs	r3, #4
 8001354:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001358:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800135c:	4619      	mov	r1, r3
 800135e:	480b      	ldr	r0, [pc, #44]	; (800138c <HAL_I2C_MspInit+0xb8>)
 8001360:	f000 fc60 	bl	8001c24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001364:	4b08      	ldr	r3, [pc, #32]	; (8001388 <HAL_I2C_MspInit+0xb4>)
 8001366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001368:	4a07      	ldr	r2, [pc, #28]	; (8001388 <HAL_I2C_MspInit+0xb4>)
 800136a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800136e:	6593      	str	r3, [r2, #88]	; 0x58
 8001370:	4b05      	ldr	r3, [pc, #20]	; (8001388 <HAL_I2C_MspInit+0xb4>)
 8001372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001374:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800137c:	bf00      	nop
 800137e:	37b0      	adds	r7, #176	; 0xb0
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	40005400 	.word	0x40005400
 8001388:	40021000 	.word	0x40021000
 800138c:	48000400 	.word	0x48000400

08001390 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b0ac      	sub	sp, #176	; 0xb0
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001398:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
 80013a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013a8:	f107 0314 	add.w	r3, r7, #20
 80013ac:	2288      	movs	r2, #136	; 0x88
 80013ae:	2100      	movs	r1, #0
 80013b0:	4618      	mov	r0, r3
 80013b2:	f003 fcf9 	bl	8004da8 <memset>
  if(huart->Instance==USART2)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a36      	ldr	r2, [pc, #216]	; (8001494 <HAL_UART_MspInit+0x104>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d164      	bne.n	800148a <HAL_UART_MspInit+0xfa>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80013c0:	2302      	movs	r3, #2
 80013c2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80013c4:	2300      	movs	r3, #0
 80013c6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013c8:	f107 0314 	add.w	r3, r7, #20
 80013cc:	4618      	mov	r0, r3
 80013ce:	f002 fa69 	bl	80038a4 <HAL_RCCEx_PeriphCLKConfig>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80013d8:	f7ff ff52 	bl	8001280 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013dc:	4b2e      	ldr	r3, [pc, #184]	; (8001498 <HAL_UART_MspInit+0x108>)
 80013de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013e0:	4a2d      	ldr	r2, [pc, #180]	; (8001498 <HAL_UART_MspInit+0x108>)
 80013e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013e6:	6593      	str	r3, [r2, #88]	; 0x58
 80013e8:	4b2b      	ldr	r3, [pc, #172]	; (8001498 <HAL_UART_MspInit+0x108>)
 80013ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f0:	613b      	str	r3, [r7, #16]
 80013f2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f4:	4b28      	ldr	r3, [pc, #160]	; (8001498 <HAL_UART_MspInit+0x108>)
 80013f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f8:	4a27      	ldr	r2, [pc, #156]	; (8001498 <HAL_UART_MspInit+0x108>)
 80013fa:	f043 0301 	orr.w	r3, r3, #1
 80013fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001400:	4b25      	ldr	r3, [pc, #148]	; (8001498 <HAL_UART_MspInit+0x108>)
 8001402:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001404:	f003 0301 	and.w	r3, r3, #1
 8001408:	60fb      	str	r3, [r7, #12]
 800140a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800140c:	230c      	movs	r3, #12
 800140e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001412:	2302      	movs	r3, #2
 8001414:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141e:	2303      	movs	r3, #3
 8001420:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001424:	2307      	movs	r3, #7
 8001426:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800142a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800142e:	4619      	mov	r1, r3
 8001430:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001434:	f000 fbf6 	bl	8001c24 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001438:	4b18      	ldr	r3, [pc, #96]	; (800149c <HAL_UART_MspInit+0x10c>)
 800143a:	4a19      	ldr	r2, [pc, #100]	; (80014a0 <HAL_UART_MspInit+0x110>)
 800143c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 800143e:	4b17      	ldr	r3, [pc, #92]	; (800149c <HAL_UART_MspInit+0x10c>)
 8001440:	2202      	movs	r2, #2
 8001442:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001444:	4b15      	ldr	r3, [pc, #84]	; (800149c <HAL_UART_MspInit+0x10c>)
 8001446:	2200      	movs	r2, #0
 8001448:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800144a:	4b14      	ldr	r3, [pc, #80]	; (800149c <HAL_UART_MspInit+0x10c>)
 800144c:	2200      	movs	r2, #0
 800144e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001450:	4b12      	ldr	r3, [pc, #72]	; (800149c <HAL_UART_MspInit+0x10c>)
 8001452:	2280      	movs	r2, #128	; 0x80
 8001454:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001456:	4b11      	ldr	r3, [pc, #68]	; (800149c <HAL_UART_MspInit+0x10c>)
 8001458:	2200      	movs	r2, #0
 800145a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800145c:	4b0f      	ldr	r3, [pc, #60]	; (800149c <HAL_UART_MspInit+0x10c>)
 800145e:	2200      	movs	r2, #0
 8001460:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001462:	4b0e      	ldr	r3, [pc, #56]	; (800149c <HAL_UART_MspInit+0x10c>)
 8001464:	2200      	movs	r2, #0
 8001466:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001468:	4b0c      	ldr	r3, [pc, #48]	; (800149c <HAL_UART_MspInit+0x10c>)
 800146a:	2200      	movs	r2, #0
 800146c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800146e:	480b      	ldr	r0, [pc, #44]	; (800149c <HAL_UART_MspInit+0x10c>)
 8001470:	f000 fa70 	bl	8001954 <HAL_DMA_Init>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 800147a:	f7ff ff01 	bl	8001280 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4a06      	ldr	r2, [pc, #24]	; (800149c <HAL_UART_MspInit+0x10c>)
 8001482:	675a      	str	r2, [r3, #116]	; 0x74
 8001484:	4a05      	ldr	r2, [pc, #20]	; (800149c <HAL_UART_MspInit+0x10c>)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800148a:	bf00      	nop
 800148c:	37b0      	adds	r7, #176	; 0xb0
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40004400 	.word	0x40004400
 8001498:	40021000 	.word	0x40021000
 800149c:	20000154 	.word	0x20000154
 80014a0:	4002006c 	.word	0x4002006c

080014a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014a8:	e7fe      	b.n	80014a8 <NMI_Handler+0x4>

080014aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ae:	e7fe      	b.n	80014ae <HardFault_Handler+0x4>

080014b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014b4:	e7fe      	b.n	80014b4 <MemManage_Handler+0x4>

080014b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014b6:	b480      	push	{r7}
 80014b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ba:	e7fe      	b.n	80014ba <BusFault_Handler+0x4>

080014bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014c0:	e7fe      	b.n	80014c0 <UsageFault_Handler+0x4>

080014c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014c2:	b480      	push	{r7}
 80014c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014c6:	bf00      	nop
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014d4:	bf00      	nop
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr

080014de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014de:	b480      	push	{r7}
 80014e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014e2:	bf00      	nop
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014f0:	f000 f8da 	bl	80016a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014f4:	bf00      	nop
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80014fc:	4802      	ldr	r0, [pc, #8]	; (8001508 <DMA1_Channel6_IRQHandler+0x10>)
 80014fe:	f000 fae1 	bl	8001ac4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	20000154 	.word	0x20000154

0800150c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001514:	4a14      	ldr	r2, [pc, #80]	; (8001568 <_sbrk+0x5c>)
 8001516:	4b15      	ldr	r3, [pc, #84]	; (800156c <_sbrk+0x60>)
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001520:	4b13      	ldr	r3, [pc, #76]	; (8001570 <_sbrk+0x64>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d102      	bne.n	800152e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001528:	4b11      	ldr	r3, [pc, #68]	; (8001570 <_sbrk+0x64>)
 800152a:	4a12      	ldr	r2, [pc, #72]	; (8001574 <_sbrk+0x68>)
 800152c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800152e:	4b10      	ldr	r3, [pc, #64]	; (8001570 <_sbrk+0x64>)
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4413      	add	r3, r2
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	429a      	cmp	r2, r3
 800153a:	d207      	bcs.n	800154c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800153c:	f003 fc3c 	bl	8004db8 <__errno>
 8001540:	4603      	mov	r3, r0
 8001542:	220c      	movs	r2, #12
 8001544:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001546:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800154a:	e009      	b.n	8001560 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800154c:	4b08      	ldr	r3, [pc, #32]	; (8001570 <_sbrk+0x64>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001552:	4b07      	ldr	r3, [pc, #28]	; (8001570 <_sbrk+0x64>)
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4413      	add	r3, r2
 800155a:	4a05      	ldr	r2, [pc, #20]	; (8001570 <_sbrk+0x64>)
 800155c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800155e:	68fb      	ldr	r3, [r7, #12]
}
 8001560:	4618      	mov	r0, r3
 8001562:	3718      	adds	r7, #24
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	20018000 	.word	0x20018000
 800156c:	00000400 	.word	0x00000400
 8001570:	2000019c 	.word	0x2000019c
 8001574:	200002f0 	.word	0x200002f0

08001578 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800157c:	4b06      	ldr	r3, [pc, #24]	; (8001598 <SystemInit+0x20>)
 800157e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001582:	4a05      	ldr	r2, [pc, #20]	; (8001598 <SystemInit+0x20>)
 8001584:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001588:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800158c:	bf00      	nop
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	e000ed00 	.word	0xe000ed00

0800159c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800159c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015d4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015a0:	f7ff ffea 	bl	8001578 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015a4:	480c      	ldr	r0, [pc, #48]	; (80015d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80015a6:	490d      	ldr	r1, [pc, #52]	; (80015dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80015a8:	4a0d      	ldr	r2, [pc, #52]	; (80015e0 <LoopForever+0xe>)
  movs r3, #0
 80015aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015ac:	e002      	b.n	80015b4 <LoopCopyDataInit>

080015ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015b2:	3304      	adds	r3, #4

080015b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015b8:	d3f9      	bcc.n	80015ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ba:	4a0a      	ldr	r2, [pc, #40]	; (80015e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015bc:	4c0a      	ldr	r4, [pc, #40]	; (80015e8 <LoopForever+0x16>)
  movs r3, #0
 80015be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015c0:	e001      	b.n	80015c6 <LoopFillZerobss>

080015c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015c4:	3204      	adds	r2, #4

080015c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015c8:	d3fb      	bcc.n	80015c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015ca:	f003 fbfb 	bl	8004dc4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015ce:	f7ff f853 	bl	8000678 <main>

080015d2 <LoopForever>:

LoopForever:
    b LoopForever
 80015d2:	e7fe      	b.n	80015d2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80015d4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80015d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015dc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80015e0:	08005760 	.word	0x08005760
  ldr r2, =_sbss
 80015e4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80015e8:	200002ec 	.word	0x200002ec

080015ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015ec:	e7fe      	b.n	80015ec <ADC1_2_IRQHandler>
	...

080015f0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015f6:	2300      	movs	r3, #0
 80015f8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015fa:	4b0c      	ldr	r3, [pc, #48]	; (800162c <HAL_Init+0x3c>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a0b      	ldr	r2, [pc, #44]	; (800162c <HAL_Init+0x3c>)
 8001600:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001604:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001606:	2003      	movs	r0, #3
 8001608:	f000 f962 	bl	80018d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800160c:	2000      	movs	r0, #0
 800160e:	f000 f80f 	bl	8001630 <HAL_InitTick>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d002      	beq.n	800161e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	71fb      	strb	r3, [r7, #7]
 800161c:	e001      	b.n	8001622 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800161e:	f7ff fe35 	bl	800128c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001622:	79fb      	ldrb	r3, [r7, #7]
}
 8001624:	4618      	mov	r0, r3
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	40022000 	.word	0x40022000

08001630 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001638:	2300      	movs	r3, #0
 800163a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800163c:	4b17      	ldr	r3, [pc, #92]	; (800169c <HAL_InitTick+0x6c>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d023      	beq.n	800168c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001644:	4b16      	ldr	r3, [pc, #88]	; (80016a0 <HAL_InitTick+0x70>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	4b14      	ldr	r3, [pc, #80]	; (800169c <HAL_InitTick+0x6c>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	4619      	mov	r1, r3
 800164e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001652:	fbb3 f3f1 	udiv	r3, r3, r1
 8001656:	fbb2 f3f3 	udiv	r3, r2, r3
 800165a:	4618      	mov	r0, r3
 800165c:	f000 f96d 	bl	800193a <HAL_SYSTICK_Config>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d10f      	bne.n	8001686 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2b0f      	cmp	r3, #15
 800166a:	d809      	bhi.n	8001680 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800166c:	2200      	movs	r2, #0
 800166e:	6879      	ldr	r1, [r7, #4]
 8001670:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001674:	f000 f937 	bl	80018e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001678:	4a0a      	ldr	r2, [pc, #40]	; (80016a4 <HAL_InitTick+0x74>)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6013      	str	r3, [r2, #0]
 800167e:	e007      	b.n	8001690 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	73fb      	strb	r3, [r7, #15]
 8001684:	e004      	b.n	8001690 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	73fb      	strb	r3, [r7, #15]
 800168a:	e001      	b.n	8001690 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001690:	7bfb      	ldrb	r3, [r7, #15]
}
 8001692:	4618      	mov	r0, r3
 8001694:	3710      	adds	r7, #16
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20000008 	.word	0x20000008
 80016a0:	20000000 	.word	0x20000000
 80016a4:	20000004 	.word	0x20000004

080016a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016ac:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <HAL_IncTick+0x20>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	461a      	mov	r2, r3
 80016b2:	4b06      	ldr	r3, [pc, #24]	; (80016cc <HAL_IncTick+0x24>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4413      	add	r3, r2
 80016b8:	4a04      	ldr	r2, [pc, #16]	; (80016cc <HAL_IncTick+0x24>)
 80016ba:	6013      	str	r3, [r2, #0]
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	20000008 	.word	0x20000008
 80016cc:	200001a0 	.word	0x200001a0

080016d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  return uwTick;
 80016d4:	4b03      	ldr	r3, [pc, #12]	; (80016e4 <HAL_GetTick+0x14>)
 80016d6:	681b      	ldr	r3, [r3, #0]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	200001a0 	.word	0x200001a0

080016e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016f0:	f7ff ffee 	bl	80016d0 <HAL_GetTick>
 80016f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001700:	d005      	beq.n	800170e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001702:	4b0a      	ldr	r3, [pc, #40]	; (800172c <HAL_Delay+0x44>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	461a      	mov	r2, r3
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	4413      	add	r3, r2
 800170c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800170e:	bf00      	nop
 8001710:	f7ff ffde 	bl	80016d0 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	68fa      	ldr	r2, [r7, #12]
 800171c:	429a      	cmp	r2, r3
 800171e:	d8f7      	bhi.n	8001710 <HAL_Delay+0x28>
  {
  }
}
 8001720:	bf00      	nop
 8001722:	bf00      	nop
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	20000008 	.word	0x20000008

08001730 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f003 0307 	and.w	r3, r3, #7
 800173e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001740:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <__NVIC_SetPriorityGrouping+0x44>)
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001746:	68ba      	ldr	r2, [r7, #8]
 8001748:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800174c:	4013      	ands	r3, r2
 800174e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001758:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800175c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001760:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001762:	4a04      	ldr	r2, [pc, #16]	; (8001774 <__NVIC_SetPriorityGrouping+0x44>)
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	60d3      	str	r3, [r2, #12]
}
 8001768:	bf00      	nop
 800176a:	3714      	adds	r7, #20
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	e000ed00 	.word	0xe000ed00

08001778 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800177c:	4b04      	ldr	r3, [pc, #16]	; (8001790 <__NVIC_GetPriorityGrouping+0x18>)
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	0a1b      	lsrs	r3, r3, #8
 8001782:	f003 0307 	and.w	r3, r3, #7
}
 8001786:	4618      	mov	r0, r3
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	e000ed00 	.word	0xe000ed00

08001794 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800179e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	db0b      	blt.n	80017be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017a6:	79fb      	ldrb	r3, [r7, #7]
 80017a8:	f003 021f 	and.w	r2, r3, #31
 80017ac:	4907      	ldr	r1, [pc, #28]	; (80017cc <__NVIC_EnableIRQ+0x38>)
 80017ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b2:	095b      	lsrs	r3, r3, #5
 80017b4:	2001      	movs	r0, #1
 80017b6:	fa00 f202 	lsl.w	r2, r0, r2
 80017ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017be:	bf00      	nop
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	e000e100 	.word	0xe000e100

080017d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	6039      	str	r1, [r7, #0]
 80017da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	db0a      	blt.n	80017fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	490c      	ldr	r1, [pc, #48]	; (800181c <__NVIC_SetPriority+0x4c>)
 80017ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ee:	0112      	lsls	r2, r2, #4
 80017f0:	b2d2      	uxtb	r2, r2
 80017f2:	440b      	add	r3, r1
 80017f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017f8:	e00a      	b.n	8001810 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	b2da      	uxtb	r2, r3
 80017fe:	4908      	ldr	r1, [pc, #32]	; (8001820 <__NVIC_SetPriority+0x50>)
 8001800:	79fb      	ldrb	r3, [r7, #7]
 8001802:	f003 030f 	and.w	r3, r3, #15
 8001806:	3b04      	subs	r3, #4
 8001808:	0112      	lsls	r2, r2, #4
 800180a:	b2d2      	uxtb	r2, r2
 800180c:	440b      	add	r3, r1
 800180e:	761a      	strb	r2, [r3, #24]
}
 8001810:	bf00      	nop
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	e000e100 	.word	0xe000e100
 8001820:	e000ed00 	.word	0xe000ed00

08001824 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001824:	b480      	push	{r7}
 8001826:	b089      	sub	sp, #36	; 0x24
 8001828:	af00      	add	r7, sp, #0
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f003 0307 	and.w	r3, r3, #7
 8001836:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	f1c3 0307 	rsb	r3, r3, #7
 800183e:	2b04      	cmp	r3, #4
 8001840:	bf28      	it	cs
 8001842:	2304      	movcs	r3, #4
 8001844:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	3304      	adds	r3, #4
 800184a:	2b06      	cmp	r3, #6
 800184c:	d902      	bls.n	8001854 <NVIC_EncodePriority+0x30>
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	3b03      	subs	r3, #3
 8001852:	e000      	b.n	8001856 <NVIC_EncodePriority+0x32>
 8001854:	2300      	movs	r3, #0
 8001856:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001858:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	43da      	mvns	r2, r3
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	401a      	ands	r2, r3
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800186c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	fa01 f303 	lsl.w	r3, r1, r3
 8001876:	43d9      	mvns	r1, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800187c:	4313      	orrs	r3, r2
         );
}
 800187e:	4618      	mov	r0, r3
 8001880:	3724      	adds	r7, #36	; 0x24
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
	...

0800188c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	3b01      	subs	r3, #1
 8001898:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800189c:	d301      	bcc.n	80018a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800189e:	2301      	movs	r3, #1
 80018a0:	e00f      	b.n	80018c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018a2:	4a0a      	ldr	r2, [pc, #40]	; (80018cc <SysTick_Config+0x40>)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	3b01      	subs	r3, #1
 80018a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018aa:	210f      	movs	r1, #15
 80018ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018b0:	f7ff ff8e 	bl	80017d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018b4:	4b05      	ldr	r3, [pc, #20]	; (80018cc <SysTick_Config+0x40>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ba:	4b04      	ldr	r3, [pc, #16]	; (80018cc <SysTick_Config+0x40>)
 80018bc:	2207      	movs	r2, #7
 80018be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	e000e010 	.word	0xe000e010

080018d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f7ff ff29 	bl	8001730 <__NVIC_SetPriorityGrouping>
}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b086      	sub	sp, #24
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	4603      	mov	r3, r0
 80018ee:	60b9      	str	r1, [r7, #8]
 80018f0:	607a      	str	r2, [r7, #4]
 80018f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80018f4:	2300      	movs	r3, #0
 80018f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018f8:	f7ff ff3e 	bl	8001778 <__NVIC_GetPriorityGrouping>
 80018fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	68b9      	ldr	r1, [r7, #8]
 8001902:	6978      	ldr	r0, [r7, #20]
 8001904:	f7ff ff8e 	bl	8001824 <NVIC_EncodePriority>
 8001908:	4602      	mov	r2, r0
 800190a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800190e:	4611      	mov	r1, r2
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff ff5d 	bl	80017d0 <__NVIC_SetPriority>
}
 8001916:	bf00      	nop
 8001918:	3718      	adds	r7, #24
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	b082      	sub	sp, #8
 8001922:	af00      	add	r7, sp, #0
 8001924:	4603      	mov	r3, r0
 8001926:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001928:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff ff31 	bl	8001794 <__NVIC_EnableIRQ>
}
 8001932:	bf00      	nop
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	b082      	sub	sp, #8
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f7ff ffa2 	bl	800188c <SysTick_Config>
 8001948:	4603      	mov	r3, r0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
	...

08001954 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001954:	b480      	push	{r7}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d101      	bne.n	8001966 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e098      	b.n	8001a98 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	461a      	mov	r2, r3
 800196c:	4b4d      	ldr	r3, [pc, #308]	; (8001aa4 <HAL_DMA_Init+0x150>)
 800196e:	429a      	cmp	r2, r3
 8001970:	d80f      	bhi.n	8001992 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	461a      	mov	r2, r3
 8001978:	4b4b      	ldr	r3, [pc, #300]	; (8001aa8 <HAL_DMA_Init+0x154>)
 800197a:	4413      	add	r3, r2
 800197c:	4a4b      	ldr	r2, [pc, #300]	; (8001aac <HAL_DMA_Init+0x158>)
 800197e:	fba2 2303 	umull	r2, r3, r2, r3
 8001982:	091b      	lsrs	r3, r3, #4
 8001984:	009a      	lsls	r2, r3, #2
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a48      	ldr	r2, [pc, #288]	; (8001ab0 <HAL_DMA_Init+0x15c>)
 800198e:	641a      	str	r2, [r3, #64]	; 0x40
 8001990:	e00e      	b.n	80019b0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	461a      	mov	r2, r3
 8001998:	4b46      	ldr	r3, [pc, #280]	; (8001ab4 <HAL_DMA_Init+0x160>)
 800199a:	4413      	add	r3, r2
 800199c:	4a43      	ldr	r2, [pc, #268]	; (8001aac <HAL_DMA_Init+0x158>)
 800199e:	fba2 2303 	umull	r2, r3, r2, r3
 80019a2:	091b      	lsrs	r3, r3, #4
 80019a4:	009a      	lsls	r2, r3, #2
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a42      	ldr	r2, [pc, #264]	; (8001ab8 <HAL_DMA_Init+0x164>)
 80019ae:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2202      	movs	r2, #2
 80019b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80019c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019ca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80019d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	691b      	ldr	r3, [r3, #16]
 80019da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	699b      	ldr	r3, [r3, #24]
 80019e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6a1b      	ldr	r3, [r3, #32]
 80019f2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80019f4:	68fa      	ldr	r2, [r7, #12]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	68fa      	ldr	r2, [r7, #12]
 8001a00:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a0a:	d039      	beq.n	8001a80 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a10:	4a27      	ldr	r2, [pc, #156]	; (8001ab0 <HAL_DMA_Init+0x15c>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d11a      	bne.n	8001a4c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001a16:	4b29      	ldr	r3, [pc, #164]	; (8001abc <HAL_DMA_Init+0x168>)
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1e:	f003 031c 	and.w	r3, r3, #28
 8001a22:	210f      	movs	r1, #15
 8001a24:	fa01 f303 	lsl.w	r3, r1, r3
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	4924      	ldr	r1, [pc, #144]	; (8001abc <HAL_DMA_Init+0x168>)
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001a30:	4b22      	ldr	r3, [pc, #136]	; (8001abc <HAL_DMA_Init+0x168>)
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6859      	ldr	r1, [r3, #4]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3c:	f003 031c 	and.w	r3, r3, #28
 8001a40:	fa01 f303 	lsl.w	r3, r1, r3
 8001a44:	491d      	ldr	r1, [pc, #116]	; (8001abc <HAL_DMA_Init+0x168>)
 8001a46:	4313      	orrs	r3, r2
 8001a48:	600b      	str	r3, [r1, #0]
 8001a4a:	e019      	b.n	8001a80 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001a4c:	4b1c      	ldr	r3, [pc, #112]	; (8001ac0 <HAL_DMA_Init+0x16c>)
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a54:	f003 031c 	and.w	r3, r3, #28
 8001a58:	210f      	movs	r1, #15
 8001a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a5e:	43db      	mvns	r3, r3
 8001a60:	4917      	ldr	r1, [pc, #92]	; (8001ac0 <HAL_DMA_Init+0x16c>)
 8001a62:	4013      	ands	r3, r2
 8001a64:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001a66:	4b16      	ldr	r3, [pc, #88]	; (8001ac0 <HAL_DMA_Init+0x16c>)
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6859      	ldr	r1, [r3, #4]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a72:	f003 031c 	and.w	r3, r3, #28
 8001a76:	fa01 f303 	lsl.w	r3, r1, r3
 8001a7a:	4911      	ldr	r1, [pc, #68]	; (8001ac0 <HAL_DMA_Init+0x16c>)
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2200      	movs	r2, #0
 8001a84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2201      	movs	r2, #1
 8001a8a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001a96:	2300      	movs	r3, #0
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3714      	adds	r7, #20
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr
 8001aa4:	40020407 	.word	0x40020407
 8001aa8:	bffdfff8 	.word	0xbffdfff8
 8001aac:	cccccccd 	.word	0xcccccccd
 8001ab0:	40020000 	.word	0x40020000
 8001ab4:	bffdfbf8 	.word	0xbffdfbf8
 8001ab8:	40020400 	.word	0x40020400
 8001abc:	400200a8 	.word	0x400200a8
 8001ac0:	400204a8 	.word	0x400204a8

08001ac4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae0:	f003 031c 	and.w	r3, r3, #28
 8001ae4:	2204      	movs	r2, #4
 8001ae6:	409a      	lsls	r2, r3
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	4013      	ands	r3, r2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d026      	beq.n	8001b3e <HAL_DMA_IRQHandler+0x7a>
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	f003 0304 	and.w	r3, r3, #4
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d021      	beq.n	8001b3e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0320 	and.w	r3, r3, #32
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d107      	bne.n	8001b18 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f022 0204 	bic.w	r2, r2, #4
 8001b16:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1c:	f003 021c 	and.w	r2, r3, #28
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b24:	2104      	movs	r1, #4
 8001b26:	fa01 f202 	lsl.w	r2, r1, r2
 8001b2a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d071      	beq.n	8001c18 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001b3c:	e06c      	b.n	8001c18 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b42:	f003 031c 	and.w	r3, r3, #28
 8001b46:	2202      	movs	r2, #2
 8001b48:	409a      	lsls	r2, r3
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d02e      	beq.n	8001bb0 <HAL_DMA_IRQHandler+0xec>
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d029      	beq.n	8001bb0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0320 	and.w	r3, r3, #32
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d10b      	bne.n	8001b82 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f022 020a 	bic.w	r2, r2, #10
 8001b78:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b86:	f003 021c 	and.w	r2, r3, #28
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8e:	2102      	movs	r1, #2
 8001b90:	fa01 f202 	lsl.w	r2, r1, r2
 8001b94:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d038      	beq.n	8001c18 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001bae:	e033      	b.n	8001c18 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb4:	f003 031c 	and.w	r3, r3, #28
 8001bb8:	2208      	movs	r2, #8
 8001bba:	409a      	lsls	r2, r3
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d02a      	beq.n	8001c1a <HAL_DMA_IRQHandler+0x156>
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	f003 0308 	and.w	r3, r3, #8
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d025      	beq.n	8001c1a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f022 020e 	bic.w	r2, r2, #14
 8001bdc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be2:	f003 021c 	and.w	r2, r3, #28
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bea:	2101      	movs	r1, #1
 8001bec:	fa01 f202 	lsl.w	r2, r1, r2
 8001bf0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d004      	beq.n	8001c1a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001c18:	bf00      	nop
 8001c1a:	bf00      	nop
}
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
	...

08001c24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b087      	sub	sp, #28
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c32:	e17f      	b.n	8001f34 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	2101      	movs	r1, #1
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c40:	4013      	ands	r3, r2
 8001c42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	f000 8171 	beq.w	8001f2e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f003 0303 	and.w	r3, r3, #3
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d005      	beq.n	8001c64 <HAL_GPIO_Init+0x40>
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f003 0303 	and.w	r3, r3, #3
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d130      	bne.n	8001cc6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	2203      	movs	r2, #3
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	43db      	mvns	r3, r3
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	68da      	ldr	r2, [r3, #12]
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	693a      	ldr	r2, [r7, #16]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	091b      	lsrs	r3, r3, #4
 8001cb0:	f003 0201 	and.w	r2, r3, #1
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f003 0303 	and.w	r3, r3, #3
 8001cce:	2b03      	cmp	r3, #3
 8001cd0:	d118      	bne.n	8001d04 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001cd8:	2201      	movs	r2, #1
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	08db      	lsrs	r3, r3, #3
 8001cee:	f003 0201 	and.w	r2, r3, #1
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	693a      	ldr	r2, [r7, #16]
 8001d02:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f003 0303 	and.w	r3, r3, #3
 8001d0c:	2b03      	cmp	r3, #3
 8001d0e:	d017      	beq.n	8001d40 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	2203      	movs	r2, #3
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	43db      	mvns	r3, r3
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	4013      	ands	r3, r2
 8001d26:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	689a      	ldr	r2, [r3, #8]
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	693a      	ldr	r2, [r7, #16]
 8001d3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f003 0303 	and.w	r3, r3, #3
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d123      	bne.n	8001d94 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	08da      	lsrs	r2, r3, #3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	3208      	adds	r2, #8
 8001d54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d58:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	f003 0307 	and.w	r3, r3, #7
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	220f      	movs	r2, #15
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	691a      	ldr	r2, [r3, #16]
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	f003 0307 	and.w	r3, r3, #7
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	693a      	ldr	r2, [r7, #16]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	08da      	lsrs	r2, r3, #3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	3208      	adds	r2, #8
 8001d8e:	6939      	ldr	r1, [r7, #16]
 8001d90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	2203      	movs	r2, #3
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	43db      	mvns	r3, r3
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	4013      	ands	r3, r2
 8001daa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f003 0203 	and.w	r2, r3, #3
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	693a      	ldr	r2, [r7, #16]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	693a      	ldr	r2, [r7, #16]
 8001dc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	f000 80ac 	beq.w	8001f2e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dd6:	4b5f      	ldr	r3, [pc, #380]	; (8001f54 <HAL_GPIO_Init+0x330>)
 8001dd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dda:	4a5e      	ldr	r2, [pc, #376]	; (8001f54 <HAL_GPIO_Init+0x330>)
 8001ddc:	f043 0301 	orr.w	r3, r3, #1
 8001de0:	6613      	str	r3, [r2, #96]	; 0x60
 8001de2:	4b5c      	ldr	r3, [pc, #368]	; (8001f54 <HAL_GPIO_Init+0x330>)
 8001de4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	60bb      	str	r3, [r7, #8]
 8001dec:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001dee:	4a5a      	ldr	r2, [pc, #360]	; (8001f58 <HAL_GPIO_Init+0x334>)
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	089b      	lsrs	r3, r3, #2
 8001df4:	3302      	adds	r3, #2
 8001df6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dfa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	f003 0303 	and.w	r3, r3, #3
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	220f      	movs	r2, #15
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0a:	43db      	mvns	r3, r3
 8001e0c:	693a      	ldr	r2, [r7, #16]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e18:	d025      	beq.n	8001e66 <HAL_GPIO_Init+0x242>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a4f      	ldr	r2, [pc, #316]	; (8001f5c <HAL_GPIO_Init+0x338>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d01f      	beq.n	8001e62 <HAL_GPIO_Init+0x23e>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a4e      	ldr	r2, [pc, #312]	; (8001f60 <HAL_GPIO_Init+0x33c>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d019      	beq.n	8001e5e <HAL_GPIO_Init+0x23a>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a4d      	ldr	r2, [pc, #308]	; (8001f64 <HAL_GPIO_Init+0x340>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d013      	beq.n	8001e5a <HAL_GPIO_Init+0x236>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a4c      	ldr	r2, [pc, #304]	; (8001f68 <HAL_GPIO_Init+0x344>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d00d      	beq.n	8001e56 <HAL_GPIO_Init+0x232>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a4b      	ldr	r2, [pc, #300]	; (8001f6c <HAL_GPIO_Init+0x348>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d007      	beq.n	8001e52 <HAL_GPIO_Init+0x22e>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a4a      	ldr	r2, [pc, #296]	; (8001f70 <HAL_GPIO_Init+0x34c>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d101      	bne.n	8001e4e <HAL_GPIO_Init+0x22a>
 8001e4a:	2306      	movs	r3, #6
 8001e4c:	e00c      	b.n	8001e68 <HAL_GPIO_Init+0x244>
 8001e4e:	2307      	movs	r3, #7
 8001e50:	e00a      	b.n	8001e68 <HAL_GPIO_Init+0x244>
 8001e52:	2305      	movs	r3, #5
 8001e54:	e008      	b.n	8001e68 <HAL_GPIO_Init+0x244>
 8001e56:	2304      	movs	r3, #4
 8001e58:	e006      	b.n	8001e68 <HAL_GPIO_Init+0x244>
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e004      	b.n	8001e68 <HAL_GPIO_Init+0x244>
 8001e5e:	2302      	movs	r3, #2
 8001e60:	e002      	b.n	8001e68 <HAL_GPIO_Init+0x244>
 8001e62:	2301      	movs	r3, #1
 8001e64:	e000      	b.n	8001e68 <HAL_GPIO_Init+0x244>
 8001e66:	2300      	movs	r3, #0
 8001e68:	697a      	ldr	r2, [r7, #20]
 8001e6a:	f002 0203 	and.w	r2, r2, #3
 8001e6e:	0092      	lsls	r2, r2, #2
 8001e70:	4093      	lsls	r3, r2
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e78:	4937      	ldr	r1, [pc, #220]	; (8001f58 <HAL_GPIO_Init+0x334>)
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	089b      	lsrs	r3, r3, #2
 8001e7e:	3302      	adds	r3, #2
 8001e80:	693a      	ldr	r2, [r7, #16]
 8001e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e86:	4b3b      	ldr	r3, [pc, #236]	; (8001f74 <HAL_GPIO_Init+0x350>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	43db      	mvns	r3, r3
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	4013      	ands	r3, r2
 8001e94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d003      	beq.n	8001eaa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001ea2:	693a      	ldr	r2, [r7, #16]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001eaa:	4a32      	ldr	r2, [pc, #200]	; (8001f74 <HAL_GPIO_Init+0x350>)
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001eb0:	4b30      	ldr	r3, [pc, #192]	; (8001f74 <HAL_GPIO_Init+0x350>)
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d003      	beq.n	8001ed4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001ecc:	693a      	ldr	r2, [r7, #16]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ed4:	4a27      	ldr	r2, [pc, #156]	; (8001f74 <HAL_GPIO_Init+0x350>)
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001eda:	4b26      	ldr	r3, [pc, #152]	; (8001f74 <HAL_GPIO_Init+0x350>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d003      	beq.n	8001efe <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001ef6:	693a      	ldr	r2, [r7, #16]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001efe:	4a1d      	ldr	r2, [pc, #116]	; (8001f74 <HAL_GPIO_Init+0x350>)
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001f04:	4b1b      	ldr	r3, [pc, #108]	; (8001f74 <HAL_GPIO_Init+0x350>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	4013      	ands	r3, r2
 8001f12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d003      	beq.n	8001f28 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f28:	4a12      	ldr	r2, [pc, #72]	; (8001f74 <HAL_GPIO_Init+0x350>)
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	3301      	adds	r3, #1
 8001f32:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	f47f ae78 	bne.w	8001c34 <HAL_GPIO_Init+0x10>
  }
}
 8001f44:	bf00      	nop
 8001f46:	bf00      	nop
 8001f48:	371c      	adds	r7, #28
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	40021000 	.word	0x40021000
 8001f58:	40010000 	.word	0x40010000
 8001f5c:	48000400 	.word	0x48000400
 8001f60:	48000800 	.word	0x48000800
 8001f64:	48000c00 	.word	0x48000c00
 8001f68:	48001000 	.word	0x48001000
 8001f6c:	48001400 	.word	0x48001400
 8001f70:	48001800 	.word	0x48001800
 8001f74:	40010400 	.word	0x40010400

08001f78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	460b      	mov	r3, r1
 8001f82:	807b      	strh	r3, [r7, #2]
 8001f84:	4613      	mov	r3, r2
 8001f86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f88:	787b      	ldrb	r3, [r7, #1]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d003      	beq.n	8001f96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f8e:	887a      	ldrh	r2, [r7, #2]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f94:	e002      	b.n	8001f9c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f96:	887a      	ldrh	r2, [r7, #2]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d101      	bne.n	8001fba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e08d      	b.n	80020d6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d106      	bne.n	8001fd4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f7ff f980 	bl	80012d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2224      	movs	r2, #36	; 0x24
 8001fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f022 0201 	bic.w	r2, r2, #1
 8001fea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685a      	ldr	r2, [r3, #4]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ff8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	689a      	ldr	r2, [r3, #8]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002008:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	2b01      	cmp	r3, #1
 8002010:	d107      	bne.n	8002022 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	689a      	ldr	r2, [r3, #8]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800201e:	609a      	str	r2, [r3, #8]
 8002020:	e006      	b.n	8002030 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	689a      	ldr	r2, [r3, #8]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800202e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	2b02      	cmp	r3, #2
 8002036:	d108      	bne.n	800204a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	685a      	ldr	r2, [r3, #4]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002046:	605a      	str	r2, [r3, #4]
 8002048:	e007      	b.n	800205a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	685a      	ldr	r2, [r3, #4]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002058:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	6812      	ldr	r2, [r2, #0]
 8002064:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002068:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800206c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68da      	ldr	r2, [r3, #12]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800207c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	691a      	ldr	r2, [r3, #16]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	695b      	ldr	r3, [r3, #20]
 8002086:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	430a      	orrs	r2, r1
 8002096:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	69d9      	ldr	r1, [r3, #28]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a1a      	ldr	r2, [r3, #32]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	430a      	orrs	r2, r1
 80020a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f042 0201 	orr.w	r2, r2, #1
 80020b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2220      	movs	r2, #32
 80020c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
	...

080020e0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b088      	sub	sp, #32
 80020e4:	af02      	add	r7, sp, #8
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	4608      	mov	r0, r1
 80020ea:	4611      	mov	r1, r2
 80020ec:	461a      	mov	r2, r3
 80020ee:	4603      	mov	r3, r0
 80020f0:	817b      	strh	r3, [r7, #10]
 80020f2:	460b      	mov	r3, r1
 80020f4:	813b      	strh	r3, [r7, #8]
 80020f6:	4613      	mov	r3, r2
 80020f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002100:	b2db      	uxtb	r3, r3
 8002102:	2b20      	cmp	r3, #32
 8002104:	f040 80f9 	bne.w	80022fa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002108:	6a3b      	ldr	r3, [r7, #32]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d002      	beq.n	8002114 <HAL_I2C_Mem_Write+0x34>
 800210e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002110:	2b00      	cmp	r3, #0
 8002112:	d105      	bne.n	8002120 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f44f 7200 	mov.w	r2, #512	; 0x200
 800211a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e0ed      	b.n	80022fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002126:	2b01      	cmp	r3, #1
 8002128:	d101      	bne.n	800212e <HAL_I2C_Mem_Write+0x4e>
 800212a:	2302      	movs	r3, #2
 800212c:	e0e6      	b.n	80022fc <HAL_I2C_Mem_Write+0x21c>
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2201      	movs	r2, #1
 8002132:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002136:	f7ff facb 	bl	80016d0 <HAL_GetTick>
 800213a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	9300      	str	r3, [sp, #0]
 8002140:	2319      	movs	r3, #25
 8002142:	2201      	movs	r2, #1
 8002144:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002148:	68f8      	ldr	r0, [r7, #12]
 800214a:	f000 fac3 	bl	80026d4 <I2C_WaitOnFlagUntilTimeout>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e0d1      	b.n	80022fc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2221      	movs	r2, #33	; 0x21
 800215c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2240      	movs	r2, #64	; 0x40
 8002164:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2200      	movs	r2, #0
 800216c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6a3a      	ldr	r2, [r7, #32]
 8002172:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002178:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2200      	movs	r2, #0
 800217e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002180:	88f8      	ldrh	r0, [r7, #6]
 8002182:	893a      	ldrh	r2, [r7, #8]
 8002184:	8979      	ldrh	r1, [r7, #10]
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	9301      	str	r3, [sp, #4]
 800218a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800218c:	9300      	str	r3, [sp, #0]
 800218e:	4603      	mov	r3, r0
 8002190:	68f8      	ldr	r0, [r7, #12]
 8002192:	f000 f9d3 	bl	800253c <I2C_RequestMemoryWrite>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d005      	beq.n	80021a8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e0a9      	b.n	80022fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	2bff      	cmp	r3, #255	; 0xff
 80021b0:	d90e      	bls.n	80021d0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	22ff      	movs	r2, #255	; 0xff
 80021b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021bc:	b2da      	uxtb	r2, r3
 80021be:	8979      	ldrh	r1, [r7, #10]
 80021c0:	2300      	movs	r3, #0
 80021c2:	9300      	str	r3, [sp, #0]
 80021c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021c8:	68f8      	ldr	r0, [r7, #12]
 80021ca:	f000 fc3d 	bl	8002a48 <I2C_TransferConfig>
 80021ce:	e00f      	b.n	80021f0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d4:	b29a      	uxth	r2, r3
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021de:	b2da      	uxtb	r2, r3
 80021e0:	8979      	ldrh	r1, [r7, #10]
 80021e2:	2300      	movs	r3, #0
 80021e4:	9300      	str	r3, [sp, #0]
 80021e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021ea:	68f8      	ldr	r0, [r7, #12]
 80021ec:	f000 fc2c 	bl	8002a48 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021f0:	697a      	ldr	r2, [r7, #20]
 80021f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021f4:	68f8      	ldr	r0, [r7, #12]
 80021f6:	f000 fabc 	bl	8002772 <I2C_WaitOnTXISFlagUntilTimeout>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d001      	beq.n	8002204 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e07b      	b.n	80022fc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002208:	781a      	ldrb	r2, [r3, #0]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002214:	1c5a      	adds	r2, r3, #1
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800221e:	b29b      	uxth	r3, r3
 8002220:	3b01      	subs	r3, #1
 8002222:	b29a      	uxth	r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800222c:	3b01      	subs	r3, #1
 800222e:	b29a      	uxth	r2, r3
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002238:	b29b      	uxth	r3, r3
 800223a:	2b00      	cmp	r3, #0
 800223c:	d034      	beq.n	80022a8 <HAL_I2C_Mem_Write+0x1c8>
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002242:	2b00      	cmp	r3, #0
 8002244:	d130      	bne.n	80022a8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	9300      	str	r3, [sp, #0]
 800224a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800224c:	2200      	movs	r2, #0
 800224e:	2180      	movs	r1, #128	; 0x80
 8002250:	68f8      	ldr	r0, [r7, #12]
 8002252:	f000 fa3f 	bl	80026d4 <I2C_WaitOnFlagUntilTimeout>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e04d      	b.n	80022fc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002264:	b29b      	uxth	r3, r3
 8002266:	2bff      	cmp	r3, #255	; 0xff
 8002268:	d90e      	bls.n	8002288 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	22ff      	movs	r2, #255	; 0xff
 800226e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002274:	b2da      	uxtb	r2, r3
 8002276:	8979      	ldrh	r1, [r7, #10]
 8002278:	2300      	movs	r3, #0
 800227a:	9300      	str	r3, [sp, #0]
 800227c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002280:	68f8      	ldr	r0, [r7, #12]
 8002282:	f000 fbe1 	bl	8002a48 <I2C_TransferConfig>
 8002286:	e00f      	b.n	80022a8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800228c:	b29a      	uxth	r2, r3
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002296:	b2da      	uxtb	r2, r3
 8002298:	8979      	ldrh	r1, [r7, #10]
 800229a:	2300      	movs	r3, #0
 800229c:	9300      	str	r3, [sp, #0]
 800229e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022a2:	68f8      	ldr	r0, [r7, #12]
 80022a4:	f000 fbd0 	bl	8002a48 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d19e      	bne.n	80021f0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022b2:	697a      	ldr	r2, [r7, #20]
 80022b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022b6:	68f8      	ldr	r0, [r7, #12]
 80022b8:	f000 faa2 	bl	8002800 <I2C_WaitOnSTOPFlagUntilTimeout>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e01a      	b.n	80022fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2220      	movs	r2, #32
 80022cc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	6859      	ldr	r1, [r3, #4]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	4b0a      	ldr	r3, [pc, #40]	; (8002304 <HAL_I2C_Mem_Write+0x224>)
 80022da:	400b      	ands	r3, r1
 80022dc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2220      	movs	r2, #32
 80022e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80022f6:	2300      	movs	r3, #0
 80022f8:	e000      	b.n	80022fc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80022fa:	2302      	movs	r3, #2
  }
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3718      	adds	r7, #24
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	fe00e800 	.word	0xfe00e800

08002308 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b088      	sub	sp, #32
 800230c:	af02      	add	r7, sp, #8
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	4608      	mov	r0, r1
 8002312:	4611      	mov	r1, r2
 8002314:	461a      	mov	r2, r3
 8002316:	4603      	mov	r3, r0
 8002318:	817b      	strh	r3, [r7, #10]
 800231a:	460b      	mov	r3, r1
 800231c:	813b      	strh	r3, [r7, #8]
 800231e:	4613      	mov	r3, r2
 8002320:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002328:	b2db      	uxtb	r3, r3
 800232a:	2b20      	cmp	r3, #32
 800232c:	f040 80fd 	bne.w	800252a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002330:	6a3b      	ldr	r3, [r7, #32]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d002      	beq.n	800233c <HAL_I2C_Mem_Read+0x34>
 8002336:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002338:	2b00      	cmp	r3, #0
 800233a:	d105      	bne.n	8002348 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002342:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e0f1      	b.n	800252c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800234e:	2b01      	cmp	r3, #1
 8002350:	d101      	bne.n	8002356 <HAL_I2C_Mem_Read+0x4e>
 8002352:	2302      	movs	r3, #2
 8002354:	e0ea      	b.n	800252c <HAL_I2C_Mem_Read+0x224>
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2201      	movs	r2, #1
 800235a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800235e:	f7ff f9b7 	bl	80016d0 <HAL_GetTick>
 8002362:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	9300      	str	r3, [sp, #0]
 8002368:	2319      	movs	r3, #25
 800236a:	2201      	movs	r2, #1
 800236c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002370:	68f8      	ldr	r0, [r7, #12]
 8002372:	f000 f9af 	bl	80026d4 <I2C_WaitOnFlagUntilTimeout>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e0d5      	b.n	800252c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2222      	movs	r2, #34	; 0x22
 8002384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2240      	movs	r2, #64	; 0x40
 800238c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2200      	movs	r2, #0
 8002394:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6a3a      	ldr	r2, [r7, #32]
 800239a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80023a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2200      	movs	r2, #0
 80023a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023a8:	88f8      	ldrh	r0, [r7, #6]
 80023aa:	893a      	ldrh	r2, [r7, #8]
 80023ac:	8979      	ldrh	r1, [r7, #10]
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	9301      	str	r3, [sp, #4]
 80023b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023b4:	9300      	str	r3, [sp, #0]
 80023b6:	4603      	mov	r3, r0
 80023b8:	68f8      	ldr	r0, [r7, #12]
 80023ba:	f000 f913 	bl	80025e4 <I2C_RequestMemoryRead>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d005      	beq.n	80023d0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e0ad      	b.n	800252c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	2bff      	cmp	r3, #255	; 0xff
 80023d8:	d90e      	bls.n	80023f8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	22ff      	movs	r2, #255	; 0xff
 80023de:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e4:	b2da      	uxtb	r2, r3
 80023e6:	8979      	ldrh	r1, [r7, #10]
 80023e8:	4b52      	ldr	r3, [pc, #328]	; (8002534 <HAL_I2C_Mem_Read+0x22c>)
 80023ea:	9300      	str	r3, [sp, #0]
 80023ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023f0:	68f8      	ldr	r0, [r7, #12]
 80023f2:	f000 fb29 	bl	8002a48 <I2C_TransferConfig>
 80023f6:	e00f      	b.n	8002418 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023fc:	b29a      	uxth	r2, r3
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002406:	b2da      	uxtb	r2, r3
 8002408:	8979      	ldrh	r1, [r7, #10]
 800240a:	4b4a      	ldr	r3, [pc, #296]	; (8002534 <HAL_I2C_Mem_Read+0x22c>)
 800240c:	9300      	str	r3, [sp, #0]
 800240e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002412:	68f8      	ldr	r0, [r7, #12]
 8002414:	f000 fb18 	bl	8002a48 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	9300      	str	r3, [sp, #0]
 800241c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800241e:	2200      	movs	r2, #0
 8002420:	2104      	movs	r1, #4
 8002422:	68f8      	ldr	r0, [r7, #12]
 8002424:	f000 f956 	bl	80026d4 <I2C_WaitOnFlagUntilTimeout>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e07c      	b.n	800252c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243c:	b2d2      	uxtb	r2, r2
 800243e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002444:	1c5a      	adds	r2, r3, #1
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800244e:	3b01      	subs	r3, #1
 8002450:	b29a      	uxth	r2, r3
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800245a:	b29b      	uxth	r3, r3
 800245c:	3b01      	subs	r3, #1
 800245e:	b29a      	uxth	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002468:	b29b      	uxth	r3, r3
 800246a:	2b00      	cmp	r3, #0
 800246c:	d034      	beq.n	80024d8 <HAL_I2C_Mem_Read+0x1d0>
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002472:	2b00      	cmp	r3, #0
 8002474:	d130      	bne.n	80024d8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	9300      	str	r3, [sp, #0]
 800247a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800247c:	2200      	movs	r2, #0
 800247e:	2180      	movs	r1, #128	; 0x80
 8002480:	68f8      	ldr	r0, [r7, #12]
 8002482:	f000 f927 	bl	80026d4 <I2C_WaitOnFlagUntilTimeout>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d001      	beq.n	8002490 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e04d      	b.n	800252c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002494:	b29b      	uxth	r3, r3
 8002496:	2bff      	cmp	r3, #255	; 0xff
 8002498:	d90e      	bls.n	80024b8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	22ff      	movs	r2, #255	; 0xff
 800249e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024a4:	b2da      	uxtb	r2, r3
 80024a6:	8979      	ldrh	r1, [r7, #10]
 80024a8:	2300      	movs	r3, #0
 80024aa:	9300      	str	r3, [sp, #0]
 80024ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024b0:	68f8      	ldr	r0, [r7, #12]
 80024b2:	f000 fac9 	bl	8002a48 <I2C_TransferConfig>
 80024b6:	e00f      	b.n	80024d8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024bc:	b29a      	uxth	r2, r3
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024c6:	b2da      	uxtb	r2, r3
 80024c8:	8979      	ldrh	r1, [r7, #10]
 80024ca:	2300      	movs	r3, #0
 80024cc:	9300      	str	r3, [sp, #0]
 80024ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024d2:	68f8      	ldr	r0, [r7, #12]
 80024d4:	f000 fab8 	bl	8002a48 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024dc:	b29b      	uxth	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d19a      	bne.n	8002418 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024e2:	697a      	ldr	r2, [r7, #20]
 80024e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024e6:	68f8      	ldr	r0, [r7, #12]
 80024e8:	f000 f98a 	bl	8002800 <I2C_WaitOnSTOPFlagUntilTimeout>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e01a      	b.n	800252c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2220      	movs	r2, #32
 80024fc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	6859      	ldr	r1, [r3, #4]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	4b0b      	ldr	r3, [pc, #44]	; (8002538 <HAL_I2C_Mem_Read+0x230>)
 800250a:	400b      	ands	r3, r1
 800250c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2220      	movs	r2, #32
 8002512:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002526:	2300      	movs	r3, #0
 8002528:	e000      	b.n	800252c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800252a:	2302      	movs	r3, #2
  }
}
 800252c:	4618      	mov	r0, r3
 800252e:	3718      	adds	r7, #24
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	80002400 	.word	0x80002400
 8002538:	fe00e800 	.word	0xfe00e800

0800253c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b086      	sub	sp, #24
 8002540:	af02      	add	r7, sp, #8
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	4608      	mov	r0, r1
 8002546:	4611      	mov	r1, r2
 8002548:	461a      	mov	r2, r3
 800254a:	4603      	mov	r3, r0
 800254c:	817b      	strh	r3, [r7, #10]
 800254e:	460b      	mov	r3, r1
 8002550:	813b      	strh	r3, [r7, #8]
 8002552:	4613      	mov	r3, r2
 8002554:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002556:	88fb      	ldrh	r3, [r7, #6]
 8002558:	b2da      	uxtb	r2, r3
 800255a:	8979      	ldrh	r1, [r7, #10]
 800255c:	4b20      	ldr	r3, [pc, #128]	; (80025e0 <I2C_RequestMemoryWrite+0xa4>)
 800255e:	9300      	str	r3, [sp, #0]
 8002560:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002564:	68f8      	ldr	r0, [r7, #12]
 8002566:	f000 fa6f 	bl	8002a48 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800256a:	69fa      	ldr	r2, [r7, #28]
 800256c:	69b9      	ldr	r1, [r7, #24]
 800256e:	68f8      	ldr	r0, [r7, #12]
 8002570:	f000 f8ff 	bl	8002772 <I2C_WaitOnTXISFlagUntilTimeout>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e02c      	b.n	80025d8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800257e:	88fb      	ldrh	r3, [r7, #6]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d105      	bne.n	8002590 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002584:	893b      	ldrh	r3, [r7, #8]
 8002586:	b2da      	uxtb	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	629a      	str	r2, [r3, #40]	; 0x28
 800258e:	e015      	b.n	80025bc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002590:	893b      	ldrh	r3, [r7, #8]
 8002592:	0a1b      	lsrs	r3, r3, #8
 8002594:	b29b      	uxth	r3, r3
 8002596:	b2da      	uxtb	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800259e:	69fa      	ldr	r2, [r7, #28]
 80025a0:	69b9      	ldr	r1, [r7, #24]
 80025a2:	68f8      	ldr	r0, [r7, #12]
 80025a4:	f000 f8e5 	bl	8002772 <I2C_WaitOnTXISFlagUntilTimeout>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e012      	b.n	80025d8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80025b2:	893b      	ldrh	r3, [r7, #8]
 80025b4:	b2da      	uxtb	r2, r3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	9300      	str	r3, [sp, #0]
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	2200      	movs	r2, #0
 80025c4:	2180      	movs	r1, #128	; 0x80
 80025c6:	68f8      	ldr	r0, [r7, #12]
 80025c8:	f000 f884 	bl	80026d4 <I2C_WaitOnFlagUntilTimeout>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e000      	b.n	80025d8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80025d6:	2300      	movs	r3, #0
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3710      	adds	r7, #16
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	80002000 	.word	0x80002000

080025e4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b086      	sub	sp, #24
 80025e8:	af02      	add	r7, sp, #8
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	4608      	mov	r0, r1
 80025ee:	4611      	mov	r1, r2
 80025f0:	461a      	mov	r2, r3
 80025f2:	4603      	mov	r3, r0
 80025f4:	817b      	strh	r3, [r7, #10]
 80025f6:	460b      	mov	r3, r1
 80025f8:	813b      	strh	r3, [r7, #8]
 80025fa:	4613      	mov	r3, r2
 80025fc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80025fe:	88fb      	ldrh	r3, [r7, #6]
 8002600:	b2da      	uxtb	r2, r3
 8002602:	8979      	ldrh	r1, [r7, #10]
 8002604:	4b20      	ldr	r3, [pc, #128]	; (8002688 <I2C_RequestMemoryRead+0xa4>)
 8002606:	9300      	str	r3, [sp, #0]
 8002608:	2300      	movs	r3, #0
 800260a:	68f8      	ldr	r0, [r7, #12]
 800260c:	f000 fa1c 	bl	8002a48 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002610:	69fa      	ldr	r2, [r7, #28]
 8002612:	69b9      	ldr	r1, [r7, #24]
 8002614:	68f8      	ldr	r0, [r7, #12]
 8002616:	f000 f8ac 	bl	8002772 <I2C_WaitOnTXISFlagUntilTimeout>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e02c      	b.n	800267e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002624:	88fb      	ldrh	r3, [r7, #6]
 8002626:	2b01      	cmp	r3, #1
 8002628:	d105      	bne.n	8002636 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800262a:	893b      	ldrh	r3, [r7, #8]
 800262c:	b2da      	uxtb	r2, r3
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	629a      	str	r2, [r3, #40]	; 0x28
 8002634:	e015      	b.n	8002662 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002636:	893b      	ldrh	r3, [r7, #8]
 8002638:	0a1b      	lsrs	r3, r3, #8
 800263a:	b29b      	uxth	r3, r3
 800263c:	b2da      	uxtb	r2, r3
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002644:	69fa      	ldr	r2, [r7, #28]
 8002646:	69b9      	ldr	r1, [r7, #24]
 8002648:	68f8      	ldr	r0, [r7, #12]
 800264a:	f000 f892 	bl	8002772 <I2C_WaitOnTXISFlagUntilTimeout>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d001      	beq.n	8002658 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e012      	b.n	800267e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002658:	893b      	ldrh	r3, [r7, #8]
 800265a:	b2da      	uxtb	r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	9300      	str	r3, [sp, #0]
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	2200      	movs	r2, #0
 800266a:	2140      	movs	r1, #64	; 0x40
 800266c:	68f8      	ldr	r0, [r7, #12]
 800266e:	f000 f831 	bl	80026d4 <I2C_WaitOnFlagUntilTimeout>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d001      	beq.n	800267c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e000      	b.n	800267e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3710      	adds	r7, #16
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	80002000 	.word	0x80002000

0800268c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d103      	bne.n	80026aa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2200      	movs	r2, #0
 80026a8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	f003 0301 	and.w	r3, r3, #1
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d007      	beq.n	80026c8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	699a      	ldr	r2, [r3, #24]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f042 0201 	orr.w	r2, r2, #1
 80026c6:	619a      	str	r2, [r3, #24]
  }
}
 80026c8:	bf00      	nop
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	603b      	str	r3, [r7, #0]
 80026e0:	4613      	mov	r3, r2
 80026e2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026e4:	e031      	b.n	800274a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026ec:	d02d      	beq.n	800274a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026ee:	f7fe ffef 	bl	80016d0 <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	683a      	ldr	r2, [r7, #0]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d302      	bcc.n	8002704 <I2C_WaitOnFlagUntilTimeout+0x30>
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d122      	bne.n	800274a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	699a      	ldr	r2, [r3, #24]
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	4013      	ands	r3, r2
 800270e:	68ba      	ldr	r2, [r7, #8]
 8002710:	429a      	cmp	r2, r3
 8002712:	bf0c      	ite	eq
 8002714:	2301      	moveq	r3, #1
 8002716:	2300      	movne	r3, #0
 8002718:	b2db      	uxtb	r3, r3
 800271a:	461a      	mov	r2, r3
 800271c:	79fb      	ldrb	r3, [r7, #7]
 800271e:	429a      	cmp	r2, r3
 8002720:	d113      	bne.n	800274a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002726:	f043 0220 	orr.w	r2, r3, #32
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2220      	movs	r2, #32
 8002732:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e00f      	b.n	800276a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	699a      	ldr	r2, [r3, #24]
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	4013      	ands	r3, r2
 8002754:	68ba      	ldr	r2, [r7, #8]
 8002756:	429a      	cmp	r2, r3
 8002758:	bf0c      	ite	eq
 800275a:	2301      	moveq	r3, #1
 800275c:	2300      	movne	r3, #0
 800275e:	b2db      	uxtb	r3, r3
 8002760:	461a      	mov	r2, r3
 8002762:	79fb      	ldrb	r3, [r7, #7]
 8002764:	429a      	cmp	r2, r3
 8002766:	d0be      	beq.n	80026e6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}

08002772 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002772:	b580      	push	{r7, lr}
 8002774:	b084      	sub	sp, #16
 8002776:	af00      	add	r7, sp, #0
 8002778:	60f8      	str	r0, [r7, #12]
 800277a:	60b9      	str	r1, [r7, #8]
 800277c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800277e:	e033      	b.n	80027e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	68b9      	ldr	r1, [r7, #8]
 8002784:	68f8      	ldr	r0, [r7, #12]
 8002786:	f000 f87f 	bl	8002888 <I2C_IsErrorOccurred>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e031      	b.n	80027f8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800279a:	d025      	beq.n	80027e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800279c:	f7fe ff98 	bl	80016d0 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	68ba      	ldr	r2, [r7, #8]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d302      	bcc.n	80027b2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d11a      	bne.n	80027e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	699b      	ldr	r3, [r3, #24]
 80027b8:	f003 0302 	and.w	r3, r3, #2
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d013      	beq.n	80027e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c4:	f043 0220 	orr.w	r2, r3, #32
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2220      	movs	r2, #32
 80027d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e007      	b.n	80027f8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d1c4      	bne.n	8002780 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80027f6:	2300      	movs	r3, #0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3710      	adds	r7, #16
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800280c:	e02f      	b.n	800286e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	68b9      	ldr	r1, [r7, #8]
 8002812:	68f8      	ldr	r0, [r7, #12]
 8002814:	f000 f838 	bl	8002888 <I2C_IsErrorOccurred>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e02d      	b.n	800287e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002822:	f7fe ff55 	bl	80016d0 <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	68ba      	ldr	r2, [r7, #8]
 800282e:	429a      	cmp	r2, r3
 8002830:	d302      	bcc.n	8002838 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d11a      	bne.n	800286e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	699b      	ldr	r3, [r3, #24]
 800283e:	f003 0320 	and.w	r3, r3, #32
 8002842:	2b20      	cmp	r3, #32
 8002844:	d013      	beq.n	800286e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284a:	f043 0220 	orr.w	r2, r3, #32
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2220      	movs	r2, #32
 8002856:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e007      	b.n	800287e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	f003 0320 	and.w	r3, r3, #32
 8002878:	2b20      	cmp	r3, #32
 800287a:	d1c8      	bne.n	800280e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3710      	adds	r7, #16
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
	...

08002888 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b08a      	sub	sp, #40	; 0x28
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002894:	2300      	movs	r3, #0
 8002896:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	699b      	ldr	r3, [r3, #24]
 80028a0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80028a2:	2300      	movs	r3, #0
 80028a4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	f003 0310 	and.w	r3, r3, #16
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d068      	beq.n	8002986 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2210      	movs	r2, #16
 80028ba:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80028bc:	e049      	b.n	8002952 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028c4:	d045      	beq.n	8002952 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80028c6:	f7fe ff03 	bl	80016d0 <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	68ba      	ldr	r2, [r7, #8]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d302      	bcc.n	80028dc <I2C_IsErrorOccurred+0x54>
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d13a      	bne.n	8002952 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028e6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80028ee:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028fe:	d121      	bne.n	8002944 <I2C_IsErrorOccurred+0xbc>
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002906:	d01d      	beq.n	8002944 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002908:	7cfb      	ldrb	r3, [r7, #19]
 800290a:	2b20      	cmp	r3, #32
 800290c:	d01a      	beq.n	8002944 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	685a      	ldr	r2, [r3, #4]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800291c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800291e:	f7fe fed7 	bl	80016d0 <HAL_GetTick>
 8002922:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002924:	e00e      	b.n	8002944 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002926:	f7fe fed3 	bl	80016d0 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b19      	cmp	r3, #25
 8002932:	d907      	bls.n	8002944 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002934:	6a3b      	ldr	r3, [r7, #32]
 8002936:	f043 0320 	orr.w	r3, r3, #32
 800293a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002942:	e006      	b.n	8002952 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	f003 0320 	and.w	r3, r3, #32
 800294e:	2b20      	cmp	r3, #32
 8002950:	d1e9      	bne.n	8002926 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	f003 0320 	and.w	r3, r3, #32
 800295c:	2b20      	cmp	r3, #32
 800295e:	d003      	beq.n	8002968 <I2C_IsErrorOccurred+0xe0>
 8002960:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002964:	2b00      	cmp	r3, #0
 8002966:	d0aa      	beq.n	80028be <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002968:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800296c:	2b00      	cmp	r3, #0
 800296e:	d103      	bne.n	8002978 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2220      	movs	r2, #32
 8002976:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002978:	6a3b      	ldr	r3, [r7, #32]
 800297a:	f043 0304 	orr.w	r3, r3, #4
 800297e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002994:	2b00      	cmp	r3, #0
 8002996:	d00b      	beq.n	80029b0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002998:	6a3b      	ldr	r3, [r7, #32]
 800299a:	f043 0301 	orr.w	r3, r3, #1
 800299e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029a8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d00b      	beq.n	80029d2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80029ba:	6a3b      	ldr	r3, [r7, #32]
 80029bc:	f043 0308 	orr.w	r3, r3, #8
 80029c0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029ca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d00b      	beq.n	80029f4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80029dc:	6a3b      	ldr	r3, [r7, #32]
 80029de:	f043 0302 	orr.w	r3, r3, #2
 80029e2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029ec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80029f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d01c      	beq.n	8002a36 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80029fc:	68f8      	ldr	r0, [r7, #12]
 80029fe:	f7ff fe45 	bl	800268c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	6859      	ldr	r1, [r3, #4]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	4b0d      	ldr	r3, [pc, #52]	; (8002a44 <I2C_IsErrorOccurred+0x1bc>)
 8002a0e:	400b      	ands	r3, r1
 8002a10:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a16:	6a3b      	ldr	r3, [r7, #32]
 8002a18:	431a      	orrs	r2, r3
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2220      	movs	r2, #32
 8002a22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002a36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3728      	adds	r7, #40	; 0x28
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	fe00e800 	.word	0xfe00e800

08002a48 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b087      	sub	sp, #28
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	607b      	str	r3, [r7, #4]
 8002a52:	460b      	mov	r3, r1
 8002a54:	817b      	strh	r3, [r7, #10]
 8002a56:	4613      	mov	r3, r2
 8002a58:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a5a:	897b      	ldrh	r3, [r7, #10]
 8002a5c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002a60:	7a7b      	ldrb	r3, [r7, #9]
 8002a62:	041b      	lsls	r3, r3, #16
 8002a64:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a68:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a6e:	6a3b      	ldr	r3, [r7, #32]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a76:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	685a      	ldr	r2, [r3, #4]
 8002a7e:	6a3b      	ldr	r3, [r7, #32]
 8002a80:	0d5b      	lsrs	r3, r3, #21
 8002a82:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002a86:	4b08      	ldr	r3, [pc, #32]	; (8002aa8 <I2C_TransferConfig+0x60>)
 8002a88:	430b      	orrs	r3, r1
 8002a8a:	43db      	mvns	r3, r3
 8002a8c:	ea02 0103 	and.w	r1, r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	697a      	ldr	r2, [r7, #20]
 8002a96:	430a      	orrs	r2, r1
 8002a98:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002a9a:	bf00      	nop
 8002a9c:	371c      	adds	r7, #28
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	03ff63ff 	.word	0x03ff63ff

08002aac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2b20      	cmp	r3, #32
 8002ac0:	d138      	bne.n	8002b34 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d101      	bne.n	8002ad0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002acc:	2302      	movs	r3, #2
 8002ace:	e032      	b.n	8002b36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2224      	movs	r2, #36	; 0x24
 8002adc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f022 0201 	bic.w	r2, r2, #1
 8002aee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002afe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	6819      	ldr	r1, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	683a      	ldr	r2, [r7, #0]
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f042 0201 	orr.w	r2, r2, #1
 8002b1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2220      	movs	r2, #32
 8002b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b30:	2300      	movs	r3, #0
 8002b32:	e000      	b.n	8002b36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002b34:	2302      	movs	r3, #2
  }
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	370c      	adds	r7, #12
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr

08002b42 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002b42:	b480      	push	{r7}
 8002b44:	b085      	sub	sp, #20
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
 8002b4a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	2b20      	cmp	r3, #32
 8002b56:	d139      	bne.n	8002bcc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d101      	bne.n	8002b66 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002b62:	2302      	movs	r3, #2
 8002b64:	e033      	b.n	8002bce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2224      	movs	r2, #36	; 0x24
 8002b72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f022 0201 	bic.w	r2, r2, #1
 8002b84:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b94:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	021b      	lsls	r3, r3, #8
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	68fa      	ldr	r2, [r7, #12]
 8002ba6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f042 0201 	orr.w	r2, r2, #1
 8002bb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2220      	movs	r2, #32
 8002bbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	e000      	b.n	8002bce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002bcc:	2302      	movs	r3, #2
  }
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3714      	adds	r7, #20
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
	...

08002bdc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002be0:	4b04      	ldr	r3, [pc, #16]	; (8002bf4 <HAL_PWREx_GetVoltageRange+0x18>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	40007000 	.word	0x40007000

08002bf8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b085      	sub	sp, #20
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c06:	d130      	bne.n	8002c6a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c08:	4b23      	ldr	r3, [pc, #140]	; (8002c98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c14:	d038      	beq.n	8002c88 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c16:	4b20      	ldr	r3, [pc, #128]	; (8002c98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c1e:	4a1e      	ldr	r2, [pc, #120]	; (8002c98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c24:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c26:	4b1d      	ldr	r3, [pc, #116]	; (8002c9c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2232      	movs	r2, #50	; 0x32
 8002c2c:	fb02 f303 	mul.w	r3, r2, r3
 8002c30:	4a1b      	ldr	r2, [pc, #108]	; (8002ca0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002c32:	fba2 2303 	umull	r2, r3, r2, r3
 8002c36:	0c9b      	lsrs	r3, r3, #18
 8002c38:	3301      	adds	r3, #1
 8002c3a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c3c:	e002      	b.n	8002c44 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	3b01      	subs	r3, #1
 8002c42:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c44:	4b14      	ldr	r3, [pc, #80]	; (8002c98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c46:	695b      	ldr	r3, [r3, #20]
 8002c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c50:	d102      	bne.n	8002c58 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d1f2      	bne.n	8002c3e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c58:	4b0f      	ldr	r3, [pc, #60]	; (8002c98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c5a:	695b      	ldr	r3, [r3, #20]
 8002c5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c64:	d110      	bne.n	8002c88 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e00f      	b.n	8002c8a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c6a:	4b0b      	ldr	r3, [pc, #44]	; (8002c98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c76:	d007      	beq.n	8002c88 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c78:	4b07      	ldr	r3, [pc, #28]	; (8002c98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c80:	4a05      	ldr	r2, [pc, #20]	; (8002c98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c86:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3714      	adds	r7, #20
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	40007000 	.word	0x40007000
 8002c9c:	20000000 	.word	0x20000000
 8002ca0:	431bde83 	.word	0x431bde83

08002ca4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b088      	sub	sp, #32
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d101      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e3ca      	b.n	800344c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cb6:	4b97      	ldr	r3, [pc, #604]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f003 030c 	and.w	r3, r3, #12
 8002cbe:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cc0:	4b94      	ldr	r3, [pc, #592]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	f003 0303 	and.w	r3, r3, #3
 8002cc8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0310 	and.w	r3, r3, #16
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	f000 80e4 	beq.w	8002ea0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d007      	beq.n	8002cee <HAL_RCC_OscConfig+0x4a>
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	2b0c      	cmp	r3, #12
 8002ce2:	f040 808b 	bne.w	8002dfc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	f040 8087 	bne.w	8002dfc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002cee:	4b89      	ldr	r3, [pc, #548]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d005      	beq.n	8002d06 <HAL_RCC_OscConfig+0x62>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d101      	bne.n	8002d06 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e3a2      	b.n	800344c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a1a      	ldr	r2, [r3, #32]
 8002d0a:	4b82      	ldr	r3, [pc, #520]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0308 	and.w	r3, r3, #8
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d004      	beq.n	8002d20 <HAL_RCC_OscConfig+0x7c>
 8002d16:	4b7f      	ldr	r3, [pc, #508]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d1e:	e005      	b.n	8002d2c <HAL_RCC_OscConfig+0x88>
 8002d20:	4b7c      	ldr	r3, [pc, #496]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002d22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d26:	091b      	lsrs	r3, r3, #4
 8002d28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d223      	bcs.n	8002d78 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a1b      	ldr	r3, [r3, #32]
 8002d34:	4618      	mov	r0, r3
 8002d36:	f000 fd55 	bl	80037e4 <RCC_SetFlashLatencyFromMSIRange>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d001      	beq.n	8002d44 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e383      	b.n	800344c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d44:	4b73      	ldr	r3, [pc, #460]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a72      	ldr	r2, [pc, #456]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002d4a:	f043 0308 	orr.w	r3, r3, #8
 8002d4e:	6013      	str	r3, [r2, #0]
 8002d50:	4b70      	ldr	r3, [pc, #448]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a1b      	ldr	r3, [r3, #32]
 8002d5c:	496d      	ldr	r1, [pc, #436]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d62:	4b6c      	ldr	r3, [pc, #432]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	69db      	ldr	r3, [r3, #28]
 8002d6e:	021b      	lsls	r3, r3, #8
 8002d70:	4968      	ldr	r1, [pc, #416]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	604b      	str	r3, [r1, #4]
 8002d76:	e025      	b.n	8002dc4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d78:	4b66      	ldr	r3, [pc, #408]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a65      	ldr	r2, [pc, #404]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002d7e:	f043 0308 	orr.w	r3, r3, #8
 8002d82:	6013      	str	r3, [r2, #0]
 8002d84:	4b63      	ldr	r3, [pc, #396]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a1b      	ldr	r3, [r3, #32]
 8002d90:	4960      	ldr	r1, [pc, #384]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d96:	4b5f      	ldr	r3, [pc, #380]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	69db      	ldr	r3, [r3, #28]
 8002da2:	021b      	lsls	r3, r3, #8
 8002da4:	495b      	ldr	r1, [pc, #364]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d109      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a1b      	ldr	r3, [r3, #32]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f000 fd15 	bl	80037e4 <RCC_SetFlashLatencyFromMSIRange>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d001      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e343      	b.n	800344c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002dc4:	f000 fc4a 	bl	800365c <HAL_RCC_GetSysClockFreq>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	4b52      	ldr	r3, [pc, #328]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	091b      	lsrs	r3, r3, #4
 8002dd0:	f003 030f 	and.w	r3, r3, #15
 8002dd4:	4950      	ldr	r1, [pc, #320]	; (8002f18 <HAL_RCC_OscConfig+0x274>)
 8002dd6:	5ccb      	ldrb	r3, [r1, r3]
 8002dd8:	f003 031f 	and.w	r3, r3, #31
 8002ddc:	fa22 f303 	lsr.w	r3, r2, r3
 8002de0:	4a4e      	ldr	r2, [pc, #312]	; (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002de2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002de4:	4b4e      	ldr	r3, [pc, #312]	; (8002f20 <HAL_RCC_OscConfig+0x27c>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7fe fc21 	bl	8001630 <HAL_InitTick>
 8002dee:	4603      	mov	r3, r0
 8002df0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002df2:	7bfb      	ldrb	r3, [r7, #15]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d052      	beq.n	8002e9e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002df8:	7bfb      	ldrb	r3, [r7, #15]
 8002dfa:	e327      	b.n	800344c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	699b      	ldr	r3, [r3, #24]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d032      	beq.n	8002e6a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e04:	4b43      	ldr	r3, [pc, #268]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a42      	ldr	r2, [pc, #264]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002e0a:	f043 0301 	orr.w	r3, r3, #1
 8002e0e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e10:	f7fe fc5e 	bl	80016d0 <HAL_GetTick>
 8002e14:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e16:	e008      	b.n	8002e2a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e18:	f7fe fc5a 	bl	80016d0 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e310      	b.n	800344c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e2a:	4b3a      	ldr	r3, [pc, #232]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d0f0      	beq.n	8002e18 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e36:	4b37      	ldr	r3, [pc, #220]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a36      	ldr	r2, [pc, #216]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002e3c:	f043 0308 	orr.w	r3, r3, #8
 8002e40:	6013      	str	r3, [r2, #0]
 8002e42:	4b34      	ldr	r3, [pc, #208]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a1b      	ldr	r3, [r3, #32]
 8002e4e:	4931      	ldr	r1, [pc, #196]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e54:	4b2f      	ldr	r3, [pc, #188]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	69db      	ldr	r3, [r3, #28]
 8002e60:	021b      	lsls	r3, r3, #8
 8002e62:	492c      	ldr	r1, [pc, #176]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	604b      	str	r3, [r1, #4]
 8002e68:	e01a      	b.n	8002ea0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e6a:	4b2a      	ldr	r3, [pc, #168]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a29      	ldr	r2, [pc, #164]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002e70:	f023 0301 	bic.w	r3, r3, #1
 8002e74:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e76:	f7fe fc2b 	bl	80016d0 <HAL_GetTick>
 8002e7a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e7c:	e008      	b.n	8002e90 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e7e:	f7fe fc27 	bl	80016d0 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e2dd      	b.n	800344c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e90:	4b20      	ldr	r3, [pc, #128]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1f0      	bne.n	8002e7e <HAL_RCC_OscConfig+0x1da>
 8002e9c:	e000      	b.n	8002ea0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e9e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0301 	and.w	r3, r3, #1
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d074      	beq.n	8002f96 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	2b08      	cmp	r3, #8
 8002eb0:	d005      	beq.n	8002ebe <HAL_RCC_OscConfig+0x21a>
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	2b0c      	cmp	r3, #12
 8002eb6:	d10e      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	2b03      	cmp	r3, #3
 8002ebc:	d10b      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ebe:	4b15      	ldr	r3, [pc, #84]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d064      	beq.n	8002f94 <HAL_RCC_OscConfig+0x2f0>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d160      	bne.n	8002f94 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e2ba      	b.n	800344c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ede:	d106      	bne.n	8002eee <HAL_RCC_OscConfig+0x24a>
 8002ee0:	4b0c      	ldr	r3, [pc, #48]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a0b      	ldr	r2, [pc, #44]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002ee6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eea:	6013      	str	r3, [r2, #0]
 8002eec:	e026      	b.n	8002f3c <HAL_RCC_OscConfig+0x298>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ef6:	d115      	bne.n	8002f24 <HAL_RCC_OscConfig+0x280>
 8002ef8:	4b06      	ldr	r3, [pc, #24]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a05      	ldr	r2, [pc, #20]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002efe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f02:	6013      	str	r3, [r2, #0]
 8002f04:	4b03      	ldr	r3, [pc, #12]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a02      	ldr	r2, [pc, #8]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002f0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f0e:	6013      	str	r3, [r2, #0]
 8002f10:	e014      	b.n	8002f3c <HAL_RCC_OscConfig+0x298>
 8002f12:	bf00      	nop
 8002f14:	40021000 	.word	0x40021000
 8002f18:	080056d4 	.word	0x080056d4
 8002f1c:	20000000 	.word	0x20000000
 8002f20:	20000004 	.word	0x20000004
 8002f24:	4ba0      	ldr	r3, [pc, #640]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a9f      	ldr	r2, [pc, #636]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 8002f2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f2e:	6013      	str	r3, [r2, #0]
 8002f30:	4b9d      	ldr	r3, [pc, #628]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a9c      	ldr	r2, [pc, #624]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 8002f36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d013      	beq.n	8002f6c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f44:	f7fe fbc4 	bl	80016d0 <HAL_GetTick>
 8002f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f4a:	e008      	b.n	8002f5e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f4c:	f7fe fbc0 	bl	80016d0 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	2b64      	cmp	r3, #100	; 0x64
 8002f58:	d901      	bls.n	8002f5e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e276      	b.n	800344c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f5e:	4b92      	ldr	r3, [pc, #584]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d0f0      	beq.n	8002f4c <HAL_RCC_OscConfig+0x2a8>
 8002f6a:	e014      	b.n	8002f96 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f6c:	f7fe fbb0 	bl	80016d0 <HAL_GetTick>
 8002f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f72:	e008      	b.n	8002f86 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f74:	f7fe fbac 	bl	80016d0 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b64      	cmp	r3, #100	; 0x64
 8002f80:	d901      	bls.n	8002f86 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e262      	b.n	800344c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f86:	4b88      	ldr	r3, [pc, #544]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d1f0      	bne.n	8002f74 <HAL_RCC_OscConfig+0x2d0>
 8002f92:	e000      	b.n	8002f96 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d060      	beq.n	8003064 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	2b04      	cmp	r3, #4
 8002fa6:	d005      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x310>
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	2b0c      	cmp	r3, #12
 8002fac:	d119      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d116      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fb4:	4b7c      	ldr	r3, [pc, #496]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d005      	beq.n	8002fcc <HAL_RCC_OscConfig+0x328>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d101      	bne.n	8002fcc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e23f      	b.n	800344c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fcc:	4b76      	ldr	r3, [pc, #472]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	061b      	lsls	r3, r3, #24
 8002fda:	4973      	ldr	r1, [pc, #460]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fe0:	e040      	b.n	8003064 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d023      	beq.n	8003032 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fea:	4b6f      	ldr	r3, [pc, #444]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a6e      	ldr	r2, [pc, #440]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 8002ff0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ff4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff6:	f7fe fb6b 	bl	80016d0 <HAL_GetTick>
 8002ffa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ffc:	e008      	b.n	8003010 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ffe:	f7fe fb67 	bl	80016d0 <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	2b02      	cmp	r3, #2
 800300a:	d901      	bls.n	8003010 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e21d      	b.n	800344c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003010:	4b65      	ldr	r3, [pc, #404]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003018:	2b00      	cmp	r3, #0
 800301a:	d0f0      	beq.n	8002ffe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800301c:	4b62      	ldr	r3, [pc, #392]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	061b      	lsls	r3, r3, #24
 800302a:	495f      	ldr	r1, [pc, #380]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 800302c:	4313      	orrs	r3, r2
 800302e:	604b      	str	r3, [r1, #4]
 8003030:	e018      	b.n	8003064 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003032:	4b5d      	ldr	r3, [pc, #372]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a5c      	ldr	r2, [pc, #368]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 8003038:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800303c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800303e:	f7fe fb47 	bl	80016d0 <HAL_GetTick>
 8003042:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003044:	e008      	b.n	8003058 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003046:	f7fe fb43 	bl	80016d0 <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	2b02      	cmp	r3, #2
 8003052:	d901      	bls.n	8003058 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e1f9      	b.n	800344c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003058:	4b53      	ldr	r3, [pc, #332]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003060:	2b00      	cmp	r3, #0
 8003062:	d1f0      	bne.n	8003046 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0308 	and.w	r3, r3, #8
 800306c:	2b00      	cmp	r3, #0
 800306e:	d03c      	beq.n	80030ea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	695b      	ldr	r3, [r3, #20]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d01c      	beq.n	80030b2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003078:	4b4b      	ldr	r3, [pc, #300]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 800307a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800307e:	4a4a      	ldr	r2, [pc, #296]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 8003080:	f043 0301 	orr.w	r3, r3, #1
 8003084:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003088:	f7fe fb22 	bl	80016d0 <HAL_GetTick>
 800308c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800308e:	e008      	b.n	80030a2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003090:	f7fe fb1e 	bl	80016d0 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b02      	cmp	r3, #2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e1d4      	b.n	800344c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030a2:	4b41      	ldr	r3, [pc, #260]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 80030a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030a8:	f003 0302 	and.w	r3, r3, #2
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d0ef      	beq.n	8003090 <HAL_RCC_OscConfig+0x3ec>
 80030b0:	e01b      	b.n	80030ea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030b2:	4b3d      	ldr	r3, [pc, #244]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 80030b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030b8:	4a3b      	ldr	r2, [pc, #236]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 80030ba:	f023 0301 	bic.w	r3, r3, #1
 80030be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030c2:	f7fe fb05 	bl	80016d0 <HAL_GetTick>
 80030c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030c8:	e008      	b.n	80030dc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030ca:	f7fe fb01 	bl	80016d0 <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d901      	bls.n	80030dc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e1b7      	b.n	800344c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030dc:	4b32      	ldr	r3, [pc, #200]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 80030de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1ef      	bne.n	80030ca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0304 	and.w	r3, r3, #4
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	f000 80a6 	beq.w	8003244 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030f8:	2300      	movs	r3, #0
 80030fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80030fc:	4b2a      	ldr	r3, [pc, #168]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 80030fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003100:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d10d      	bne.n	8003124 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003108:	4b27      	ldr	r3, [pc, #156]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 800310a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800310c:	4a26      	ldr	r2, [pc, #152]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 800310e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003112:	6593      	str	r3, [r2, #88]	; 0x58
 8003114:	4b24      	ldr	r3, [pc, #144]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 8003116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003118:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800311c:	60bb      	str	r3, [r7, #8]
 800311e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003120:	2301      	movs	r3, #1
 8003122:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003124:	4b21      	ldr	r3, [pc, #132]	; (80031ac <HAL_RCC_OscConfig+0x508>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800312c:	2b00      	cmp	r3, #0
 800312e:	d118      	bne.n	8003162 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003130:	4b1e      	ldr	r3, [pc, #120]	; (80031ac <HAL_RCC_OscConfig+0x508>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a1d      	ldr	r2, [pc, #116]	; (80031ac <HAL_RCC_OscConfig+0x508>)
 8003136:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800313a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800313c:	f7fe fac8 	bl	80016d0 <HAL_GetTick>
 8003140:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003142:	e008      	b.n	8003156 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003144:	f7fe fac4 	bl	80016d0 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b02      	cmp	r3, #2
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e17a      	b.n	800344c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003156:	4b15      	ldr	r3, [pc, #84]	; (80031ac <HAL_RCC_OscConfig+0x508>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800315e:	2b00      	cmp	r3, #0
 8003160:	d0f0      	beq.n	8003144 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	2b01      	cmp	r3, #1
 8003168:	d108      	bne.n	800317c <HAL_RCC_OscConfig+0x4d8>
 800316a:	4b0f      	ldr	r3, [pc, #60]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 800316c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003170:	4a0d      	ldr	r2, [pc, #52]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 8003172:	f043 0301 	orr.w	r3, r3, #1
 8003176:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800317a:	e029      	b.n	80031d0 <HAL_RCC_OscConfig+0x52c>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	2b05      	cmp	r3, #5
 8003182:	d115      	bne.n	80031b0 <HAL_RCC_OscConfig+0x50c>
 8003184:	4b08      	ldr	r3, [pc, #32]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 8003186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800318a:	4a07      	ldr	r2, [pc, #28]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 800318c:	f043 0304 	orr.w	r3, r3, #4
 8003190:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003194:	4b04      	ldr	r3, [pc, #16]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 8003196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800319a:	4a03      	ldr	r2, [pc, #12]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 800319c:	f043 0301 	orr.w	r3, r3, #1
 80031a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031a4:	e014      	b.n	80031d0 <HAL_RCC_OscConfig+0x52c>
 80031a6:	bf00      	nop
 80031a8:	40021000 	.word	0x40021000
 80031ac:	40007000 	.word	0x40007000
 80031b0:	4b9c      	ldr	r3, [pc, #624]	; (8003424 <HAL_RCC_OscConfig+0x780>)
 80031b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b6:	4a9b      	ldr	r2, [pc, #620]	; (8003424 <HAL_RCC_OscConfig+0x780>)
 80031b8:	f023 0301 	bic.w	r3, r3, #1
 80031bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031c0:	4b98      	ldr	r3, [pc, #608]	; (8003424 <HAL_RCC_OscConfig+0x780>)
 80031c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031c6:	4a97      	ldr	r2, [pc, #604]	; (8003424 <HAL_RCC_OscConfig+0x780>)
 80031c8:	f023 0304 	bic.w	r3, r3, #4
 80031cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d016      	beq.n	8003206 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031d8:	f7fe fa7a 	bl	80016d0 <HAL_GetTick>
 80031dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031de:	e00a      	b.n	80031f6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031e0:	f7fe fa76 	bl	80016d0 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e12a      	b.n	800344c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031f6:	4b8b      	ldr	r3, [pc, #556]	; (8003424 <HAL_RCC_OscConfig+0x780>)
 80031f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031fc:	f003 0302 	and.w	r3, r3, #2
 8003200:	2b00      	cmp	r3, #0
 8003202:	d0ed      	beq.n	80031e0 <HAL_RCC_OscConfig+0x53c>
 8003204:	e015      	b.n	8003232 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003206:	f7fe fa63 	bl	80016d0 <HAL_GetTick>
 800320a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800320c:	e00a      	b.n	8003224 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800320e:	f7fe fa5f 	bl	80016d0 <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	f241 3288 	movw	r2, #5000	; 0x1388
 800321c:	4293      	cmp	r3, r2
 800321e:	d901      	bls.n	8003224 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e113      	b.n	800344c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003224:	4b7f      	ldr	r3, [pc, #508]	; (8003424 <HAL_RCC_OscConfig+0x780>)
 8003226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1ed      	bne.n	800320e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003232:	7ffb      	ldrb	r3, [r7, #31]
 8003234:	2b01      	cmp	r3, #1
 8003236:	d105      	bne.n	8003244 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003238:	4b7a      	ldr	r3, [pc, #488]	; (8003424 <HAL_RCC_OscConfig+0x780>)
 800323a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800323c:	4a79      	ldr	r2, [pc, #484]	; (8003424 <HAL_RCC_OscConfig+0x780>)
 800323e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003242:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003248:	2b00      	cmp	r3, #0
 800324a:	f000 80fe 	beq.w	800344a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003252:	2b02      	cmp	r3, #2
 8003254:	f040 80d0 	bne.w	80033f8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003258:	4b72      	ldr	r3, [pc, #456]	; (8003424 <HAL_RCC_OscConfig+0x780>)
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	f003 0203 	and.w	r2, r3, #3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003268:	429a      	cmp	r2, r3
 800326a:	d130      	bne.n	80032ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003276:	3b01      	subs	r3, #1
 8003278:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800327a:	429a      	cmp	r2, r3
 800327c:	d127      	bne.n	80032ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003288:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800328a:	429a      	cmp	r2, r3
 800328c:	d11f      	bne.n	80032ce <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003298:	2a07      	cmp	r2, #7
 800329a:	bf14      	ite	ne
 800329c:	2201      	movne	r2, #1
 800329e:	2200      	moveq	r2, #0
 80032a0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d113      	bne.n	80032ce <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032b0:	085b      	lsrs	r3, r3, #1
 80032b2:	3b01      	subs	r3, #1
 80032b4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d109      	bne.n	80032ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c4:	085b      	lsrs	r3, r3, #1
 80032c6:	3b01      	subs	r3, #1
 80032c8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d06e      	beq.n	80033ac <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	2b0c      	cmp	r3, #12
 80032d2:	d069      	beq.n	80033a8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80032d4:	4b53      	ldr	r3, [pc, #332]	; (8003424 <HAL_RCC_OscConfig+0x780>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d105      	bne.n	80032ec <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80032e0:	4b50      	ldr	r3, [pc, #320]	; (8003424 <HAL_RCC_OscConfig+0x780>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d001      	beq.n	80032f0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e0ad      	b.n	800344c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80032f0:	4b4c      	ldr	r3, [pc, #304]	; (8003424 <HAL_RCC_OscConfig+0x780>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a4b      	ldr	r2, [pc, #300]	; (8003424 <HAL_RCC_OscConfig+0x780>)
 80032f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032fa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80032fc:	f7fe f9e8 	bl	80016d0 <HAL_GetTick>
 8003300:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003302:	e008      	b.n	8003316 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003304:	f7fe f9e4 	bl	80016d0 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b02      	cmp	r3, #2
 8003310:	d901      	bls.n	8003316 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e09a      	b.n	800344c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003316:	4b43      	ldr	r3, [pc, #268]	; (8003424 <HAL_RCC_OscConfig+0x780>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1f0      	bne.n	8003304 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003322:	4b40      	ldr	r3, [pc, #256]	; (8003424 <HAL_RCC_OscConfig+0x780>)
 8003324:	68da      	ldr	r2, [r3, #12]
 8003326:	4b40      	ldr	r3, [pc, #256]	; (8003428 <HAL_RCC_OscConfig+0x784>)
 8003328:	4013      	ands	r3, r2
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003332:	3a01      	subs	r2, #1
 8003334:	0112      	lsls	r2, r2, #4
 8003336:	4311      	orrs	r1, r2
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800333c:	0212      	lsls	r2, r2, #8
 800333e:	4311      	orrs	r1, r2
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003344:	0852      	lsrs	r2, r2, #1
 8003346:	3a01      	subs	r2, #1
 8003348:	0552      	lsls	r2, r2, #21
 800334a:	4311      	orrs	r1, r2
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003350:	0852      	lsrs	r2, r2, #1
 8003352:	3a01      	subs	r2, #1
 8003354:	0652      	lsls	r2, r2, #25
 8003356:	4311      	orrs	r1, r2
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800335c:	0912      	lsrs	r2, r2, #4
 800335e:	0452      	lsls	r2, r2, #17
 8003360:	430a      	orrs	r2, r1
 8003362:	4930      	ldr	r1, [pc, #192]	; (8003424 <HAL_RCC_OscConfig+0x780>)
 8003364:	4313      	orrs	r3, r2
 8003366:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003368:	4b2e      	ldr	r3, [pc, #184]	; (8003424 <HAL_RCC_OscConfig+0x780>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a2d      	ldr	r2, [pc, #180]	; (8003424 <HAL_RCC_OscConfig+0x780>)
 800336e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003372:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003374:	4b2b      	ldr	r3, [pc, #172]	; (8003424 <HAL_RCC_OscConfig+0x780>)
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	4a2a      	ldr	r2, [pc, #168]	; (8003424 <HAL_RCC_OscConfig+0x780>)
 800337a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800337e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003380:	f7fe f9a6 	bl	80016d0 <HAL_GetTick>
 8003384:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003386:	e008      	b.n	800339a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003388:	f7fe f9a2 	bl	80016d0 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b02      	cmp	r3, #2
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e058      	b.n	800344c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800339a:	4b22      	ldr	r3, [pc, #136]	; (8003424 <HAL_RCC_OscConfig+0x780>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d0f0      	beq.n	8003388 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033a6:	e050      	b.n	800344a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e04f      	b.n	800344c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033ac:	4b1d      	ldr	r3, [pc, #116]	; (8003424 <HAL_RCC_OscConfig+0x780>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d148      	bne.n	800344a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80033b8:	4b1a      	ldr	r3, [pc, #104]	; (8003424 <HAL_RCC_OscConfig+0x780>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a19      	ldr	r2, [pc, #100]	; (8003424 <HAL_RCC_OscConfig+0x780>)
 80033be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033c2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033c4:	4b17      	ldr	r3, [pc, #92]	; (8003424 <HAL_RCC_OscConfig+0x780>)
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	4a16      	ldr	r2, [pc, #88]	; (8003424 <HAL_RCC_OscConfig+0x780>)
 80033ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033ce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80033d0:	f7fe f97e 	bl	80016d0 <HAL_GetTick>
 80033d4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033d6:	e008      	b.n	80033ea <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033d8:	f7fe f97a 	bl	80016d0 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e030      	b.n	800344c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033ea:	4b0e      	ldr	r3, [pc, #56]	; (8003424 <HAL_RCC_OscConfig+0x780>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d0f0      	beq.n	80033d8 <HAL_RCC_OscConfig+0x734>
 80033f6:	e028      	b.n	800344a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	2b0c      	cmp	r3, #12
 80033fc:	d023      	beq.n	8003446 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033fe:	4b09      	ldr	r3, [pc, #36]	; (8003424 <HAL_RCC_OscConfig+0x780>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a08      	ldr	r2, [pc, #32]	; (8003424 <HAL_RCC_OscConfig+0x780>)
 8003404:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003408:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800340a:	f7fe f961 	bl	80016d0 <HAL_GetTick>
 800340e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003410:	e00c      	b.n	800342c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003412:	f7fe f95d 	bl	80016d0 <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2b02      	cmp	r3, #2
 800341e:	d905      	bls.n	800342c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e013      	b.n	800344c <HAL_RCC_OscConfig+0x7a8>
 8003424:	40021000 	.word	0x40021000
 8003428:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800342c:	4b09      	ldr	r3, [pc, #36]	; (8003454 <HAL_RCC_OscConfig+0x7b0>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d1ec      	bne.n	8003412 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003438:	4b06      	ldr	r3, [pc, #24]	; (8003454 <HAL_RCC_OscConfig+0x7b0>)
 800343a:	68da      	ldr	r2, [r3, #12]
 800343c:	4905      	ldr	r1, [pc, #20]	; (8003454 <HAL_RCC_OscConfig+0x7b0>)
 800343e:	4b06      	ldr	r3, [pc, #24]	; (8003458 <HAL_RCC_OscConfig+0x7b4>)
 8003440:	4013      	ands	r3, r2
 8003442:	60cb      	str	r3, [r1, #12]
 8003444:	e001      	b.n	800344a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e000      	b.n	800344c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3720      	adds	r7, #32
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	40021000 	.word	0x40021000
 8003458:	feeefffc 	.word	0xfeeefffc

0800345c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d101      	bne.n	8003470 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e0e7      	b.n	8003640 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003470:	4b75      	ldr	r3, [pc, #468]	; (8003648 <HAL_RCC_ClockConfig+0x1ec>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0307 	and.w	r3, r3, #7
 8003478:	683a      	ldr	r2, [r7, #0]
 800347a:	429a      	cmp	r2, r3
 800347c:	d910      	bls.n	80034a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800347e:	4b72      	ldr	r3, [pc, #456]	; (8003648 <HAL_RCC_ClockConfig+0x1ec>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f023 0207 	bic.w	r2, r3, #7
 8003486:	4970      	ldr	r1, [pc, #448]	; (8003648 <HAL_RCC_ClockConfig+0x1ec>)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	4313      	orrs	r3, r2
 800348c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800348e:	4b6e      	ldr	r3, [pc, #440]	; (8003648 <HAL_RCC_ClockConfig+0x1ec>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0307 	and.w	r3, r3, #7
 8003496:	683a      	ldr	r2, [r7, #0]
 8003498:	429a      	cmp	r2, r3
 800349a:	d001      	beq.n	80034a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e0cf      	b.n	8003640 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0302 	and.w	r3, r3, #2
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d010      	beq.n	80034ce <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	689a      	ldr	r2, [r3, #8]
 80034b0:	4b66      	ldr	r3, [pc, #408]	; (800364c <HAL_RCC_ClockConfig+0x1f0>)
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d908      	bls.n	80034ce <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034bc:	4b63      	ldr	r3, [pc, #396]	; (800364c <HAL_RCC_ClockConfig+0x1f0>)
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	4960      	ldr	r1, [pc, #384]	; (800364c <HAL_RCC_ClockConfig+0x1f0>)
 80034ca:	4313      	orrs	r3, r2
 80034cc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d04c      	beq.n	8003574 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	2b03      	cmp	r3, #3
 80034e0:	d107      	bne.n	80034f2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034e2:	4b5a      	ldr	r3, [pc, #360]	; (800364c <HAL_RCC_ClockConfig+0x1f0>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d121      	bne.n	8003532 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e0a6      	b.n	8003640 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d107      	bne.n	800350a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034fa:	4b54      	ldr	r3, [pc, #336]	; (800364c <HAL_RCC_ClockConfig+0x1f0>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d115      	bne.n	8003532 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e09a      	b.n	8003640 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d107      	bne.n	8003522 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003512:	4b4e      	ldr	r3, [pc, #312]	; (800364c <HAL_RCC_ClockConfig+0x1f0>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	2b00      	cmp	r3, #0
 800351c:	d109      	bne.n	8003532 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e08e      	b.n	8003640 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003522:	4b4a      	ldr	r3, [pc, #296]	; (800364c <HAL_RCC_ClockConfig+0x1f0>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800352a:	2b00      	cmp	r3, #0
 800352c:	d101      	bne.n	8003532 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e086      	b.n	8003640 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003532:	4b46      	ldr	r3, [pc, #280]	; (800364c <HAL_RCC_ClockConfig+0x1f0>)
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f023 0203 	bic.w	r2, r3, #3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	4943      	ldr	r1, [pc, #268]	; (800364c <HAL_RCC_ClockConfig+0x1f0>)
 8003540:	4313      	orrs	r3, r2
 8003542:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003544:	f7fe f8c4 	bl	80016d0 <HAL_GetTick>
 8003548:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800354a:	e00a      	b.n	8003562 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800354c:	f7fe f8c0 	bl	80016d0 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	f241 3288 	movw	r2, #5000	; 0x1388
 800355a:	4293      	cmp	r3, r2
 800355c:	d901      	bls.n	8003562 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e06e      	b.n	8003640 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003562:	4b3a      	ldr	r3, [pc, #232]	; (800364c <HAL_RCC_ClockConfig+0x1f0>)
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f003 020c 	and.w	r2, r3, #12
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	429a      	cmp	r2, r3
 8003572:	d1eb      	bne.n	800354c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0302 	and.w	r3, r3, #2
 800357c:	2b00      	cmp	r3, #0
 800357e:	d010      	beq.n	80035a2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	689a      	ldr	r2, [r3, #8]
 8003584:	4b31      	ldr	r3, [pc, #196]	; (800364c <HAL_RCC_ClockConfig+0x1f0>)
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800358c:	429a      	cmp	r2, r3
 800358e:	d208      	bcs.n	80035a2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003590:	4b2e      	ldr	r3, [pc, #184]	; (800364c <HAL_RCC_ClockConfig+0x1f0>)
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	492b      	ldr	r1, [pc, #172]	; (800364c <HAL_RCC_ClockConfig+0x1f0>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035a2:	4b29      	ldr	r3, [pc, #164]	; (8003648 <HAL_RCC_ClockConfig+0x1ec>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0307 	and.w	r3, r3, #7
 80035aa:	683a      	ldr	r2, [r7, #0]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d210      	bcs.n	80035d2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035b0:	4b25      	ldr	r3, [pc, #148]	; (8003648 <HAL_RCC_ClockConfig+0x1ec>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f023 0207 	bic.w	r2, r3, #7
 80035b8:	4923      	ldr	r1, [pc, #140]	; (8003648 <HAL_RCC_ClockConfig+0x1ec>)
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	4313      	orrs	r3, r2
 80035be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035c0:	4b21      	ldr	r3, [pc, #132]	; (8003648 <HAL_RCC_ClockConfig+0x1ec>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0307 	and.w	r3, r3, #7
 80035c8:	683a      	ldr	r2, [r7, #0]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d001      	beq.n	80035d2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e036      	b.n	8003640 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0304 	and.w	r3, r3, #4
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d008      	beq.n	80035f0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035de:	4b1b      	ldr	r3, [pc, #108]	; (800364c <HAL_RCC_ClockConfig+0x1f0>)
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	4918      	ldr	r1, [pc, #96]	; (800364c <HAL_RCC_ClockConfig+0x1f0>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0308 	and.w	r3, r3, #8
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d009      	beq.n	8003610 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035fc:	4b13      	ldr	r3, [pc, #76]	; (800364c <HAL_RCC_ClockConfig+0x1f0>)
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	691b      	ldr	r3, [r3, #16]
 8003608:	00db      	lsls	r3, r3, #3
 800360a:	4910      	ldr	r1, [pc, #64]	; (800364c <HAL_RCC_ClockConfig+0x1f0>)
 800360c:	4313      	orrs	r3, r2
 800360e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003610:	f000 f824 	bl	800365c <HAL_RCC_GetSysClockFreq>
 8003614:	4602      	mov	r2, r0
 8003616:	4b0d      	ldr	r3, [pc, #52]	; (800364c <HAL_RCC_ClockConfig+0x1f0>)
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	091b      	lsrs	r3, r3, #4
 800361c:	f003 030f 	and.w	r3, r3, #15
 8003620:	490b      	ldr	r1, [pc, #44]	; (8003650 <HAL_RCC_ClockConfig+0x1f4>)
 8003622:	5ccb      	ldrb	r3, [r1, r3]
 8003624:	f003 031f 	and.w	r3, r3, #31
 8003628:	fa22 f303 	lsr.w	r3, r2, r3
 800362c:	4a09      	ldr	r2, [pc, #36]	; (8003654 <HAL_RCC_ClockConfig+0x1f8>)
 800362e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003630:	4b09      	ldr	r3, [pc, #36]	; (8003658 <HAL_RCC_ClockConfig+0x1fc>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4618      	mov	r0, r3
 8003636:	f7fd fffb 	bl	8001630 <HAL_InitTick>
 800363a:	4603      	mov	r3, r0
 800363c:	72fb      	strb	r3, [r7, #11]

  return status;
 800363e:	7afb      	ldrb	r3, [r7, #11]
}
 8003640:	4618      	mov	r0, r3
 8003642:	3710      	adds	r7, #16
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	40022000 	.word	0x40022000
 800364c:	40021000 	.word	0x40021000
 8003650:	080056d4 	.word	0x080056d4
 8003654:	20000000 	.word	0x20000000
 8003658:	20000004 	.word	0x20000004

0800365c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800365c:	b480      	push	{r7}
 800365e:	b089      	sub	sp, #36	; 0x24
 8003660:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003662:	2300      	movs	r3, #0
 8003664:	61fb      	str	r3, [r7, #28]
 8003666:	2300      	movs	r3, #0
 8003668:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800366a:	4b3e      	ldr	r3, [pc, #248]	; (8003764 <HAL_RCC_GetSysClockFreq+0x108>)
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f003 030c 	and.w	r3, r3, #12
 8003672:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003674:	4b3b      	ldr	r3, [pc, #236]	; (8003764 <HAL_RCC_GetSysClockFreq+0x108>)
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	f003 0303 	and.w	r3, r3, #3
 800367c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d005      	beq.n	8003690 <HAL_RCC_GetSysClockFreq+0x34>
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	2b0c      	cmp	r3, #12
 8003688:	d121      	bne.n	80036ce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d11e      	bne.n	80036ce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003690:	4b34      	ldr	r3, [pc, #208]	; (8003764 <HAL_RCC_GetSysClockFreq+0x108>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0308 	and.w	r3, r3, #8
 8003698:	2b00      	cmp	r3, #0
 800369a:	d107      	bne.n	80036ac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800369c:	4b31      	ldr	r3, [pc, #196]	; (8003764 <HAL_RCC_GetSysClockFreq+0x108>)
 800369e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036a2:	0a1b      	lsrs	r3, r3, #8
 80036a4:	f003 030f 	and.w	r3, r3, #15
 80036a8:	61fb      	str	r3, [r7, #28]
 80036aa:	e005      	b.n	80036b8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80036ac:	4b2d      	ldr	r3, [pc, #180]	; (8003764 <HAL_RCC_GetSysClockFreq+0x108>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	091b      	lsrs	r3, r3, #4
 80036b2:	f003 030f 	and.w	r3, r3, #15
 80036b6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80036b8:	4a2b      	ldr	r2, [pc, #172]	; (8003768 <HAL_RCC_GetSysClockFreq+0x10c>)
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036c0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d10d      	bne.n	80036e4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036cc:	e00a      	b.n	80036e4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	2b04      	cmp	r3, #4
 80036d2:	d102      	bne.n	80036da <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80036d4:	4b25      	ldr	r3, [pc, #148]	; (800376c <HAL_RCC_GetSysClockFreq+0x110>)
 80036d6:	61bb      	str	r3, [r7, #24]
 80036d8:	e004      	b.n	80036e4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	2b08      	cmp	r3, #8
 80036de:	d101      	bne.n	80036e4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80036e0:	4b23      	ldr	r3, [pc, #140]	; (8003770 <HAL_RCC_GetSysClockFreq+0x114>)
 80036e2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	2b0c      	cmp	r3, #12
 80036e8:	d134      	bne.n	8003754 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80036ea:	4b1e      	ldr	r3, [pc, #120]	; (8003764 <HAL_RCC_GetSysClockFreq+0x108>)
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	f003 0303 	and.w	r3, r3, #3
 80036f2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d003      	beq.n	8003702 <HAL_RCC_GetSysClockFreq+0xa6>
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	2b03      	cmp	r3, #3
 80036fe:	d003      	beq.n	8003708 <HAL_RCC_GetSysClockFreq+0xac>
 8003700:	e005      	b.n	800370e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003702:	4b1a      	ldr	r3, [pc, #104]	; (800376c <HAL_RCC_GetSysClockFreq+0x110>)
 8003704:	617b      	str	r3, [r7, #20]
      break;
 8003706:	e005      	b.n	8003714 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003708:	4b19      	ldr	r3, [pc, #100]	; (8003770 <HAL_RCC_GetSysClockFreq+0x114>)
 800370a:	617b      	str	r3, [r7, #20]
      break;
 800370c:	e002      	b.n	8003714 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	617b      	str	r3, [r7, #20]
      break;
 8003712:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003714:	4b13      	ldr	r3, [pc, #76]	; (8003764 <HAL_RCC_GetSysClockFreq+0x108>)
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	091b      	lsrs	r3, r3, #4
 800371a:	f003 0307 	and.w	r3, r3, #7
 800371e:	3301      	adds	r3, #1
 8003720:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003722:	4b10      	ldr	r3, [pc, #64]	; (8003764 <HAL_RCC_GetSysClockFreq+0x108>)
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	0a1b      	lsrs	r3, r3, #8
 8003728:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800372c:	697a      	ldr	r2, [r7, #20]
 800372e:	fb03 f202 	mul.w	r2, r3, r2
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	fbb2 f3f3 	udiv	r3, r2, r3
 8003738:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800373a:	4b0a      	ldr	r3, [pc, #40]	; (8003764 <HAL_RCC_GetSysClockFreq+0x108>)
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	0e5b      	lsrs	r3, r3, #25
 8003740:	f003 0303 	and.w	r3, r3, #3
 8003744:	3301      	adds	r3, #1
 8003746:	005b      	lsls	r3, r3, #1
 8003748:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800374a:	697a      	ldr	r2, [r7, #20]
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003752:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003754:	69bb      	ldr	r3, [r7, #24]
}
 8003756:	4618      	mov	r0, r3
 8003758:	3724      	adds	r7, #36	; 0x24
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop
 8003764:	40021000 	.word	0x40021000
 8003768:	080056ec 	.word	0x080056ec
 800376c:	00f42400 	.word	0x00f42400
 8003770:	007a1200 	.word	0x007a1200

08003774 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003774:	b480      	push	{r7}
 8003776:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003778:	4b03      	ldr	r3, [pc, #12]	; (8003788 <HAL_RCC_GetHCLKFreq+0x14>)
 800377a:	681b      	ldr	r3, [r3, #0]
}
 800377c:	4618      	mov	r0, r3
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	20000000 	.word	0x20000000

0800378c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003790:	f7ff fff0 	bl	8003774 <HAL_RCC_GetHCLKFreq>
 8003794:	4602      	mov	r2, r0
 8003796:	4b06      	ldr	r3, [pc, #24]	; (80037b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	0a1b      	lsrs	r3, r3, #8
 800379c:	f003 0307 	and.w	r3, r3, #7
 80037a0:	4904      	ldr	r1, [pc, #16]	; (80037b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80037a2:	5ccb      	ldrb	r3, [r1, r3]
 80037a4:	f003 031f 	and.w	r3, r3, #31
 80037a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	40021000 	.word	0x40021000
 80037b4:	080056e4 	.word	0x080056e4

080037b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80037bc:	f7ff ffda 	bl	8003774 <HAL_RCC_GetHCLKFreq>
 80037c0:	4602      	mov	r2, r0
 80037c2:	4b06      	ldr	r3, [pc, #24]	; (80037dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	0adb      	lsrs	r3, r3, #11
 80037c8:	f003 0307 	and.w	r3, r3, #7
 80037cc:	4904      	ldr	r1, [pc, #16]	; (80037e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80037ce:	5ccb      	ldrb	r3, [r1, r3]
 80037d0:	f003 031f 	and.w	r3, r3, #31
 80037d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037d8:	4618      	mov	r0, r3
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	40021000 	.word	0x40021000
 80037e0:	080056e4 	.word	0x080056e4

080037e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b086      	sub	sp, #24
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80037ec:	2300      	movs	r3, #0
 80037ee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80037f0:	4b2a      	ldr	r3, [pc, #168]	; (800389c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d003      	beq.n	8003804 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80037fc:	f7ff f9ee 	bl	8002bdc <HAL_PWREx_GetVoltageRange>
 8003800:	6178      	str	r0, [r7, #20]
 8003802:	e014      	b.n	800382e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003804:	4b25      	ldr	r3, [pc, #148]	; (800389c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003808:	4a24      	ldr	r2, [pc, #144]	; (800389c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800380a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800380e:	6593      	str	r3, [r2, #88]	; 0x58
 8003810:	4b22      	ldr	r3, [pc, #136]	; (800389c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003814:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003818:	60fb      	str	r3, [r7, #12]
 800381a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800381c:	f7ff f9de 	bl	8002bdc <HAL_PWREx_GetVoltageRange>
 8003820:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003822:	4b1e      	ldr	r3, [pc, #120]	; (800389c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003826:	4a1d      	ldr	r2, [pc, #116]	; (800389c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003828:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800382c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003834:	d10b      	bne.n	800384e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2b80      	cmp	r3, #128	; 0x80
 800383a:	d919      	bls.n	8003870 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2ba0      	cmp	r3, #160	; 0xa0
 8003840:	d902      	bls.n	8003848 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003842:	2302      	movs	r3, #2
 8003844:	613b      	str	r3, [r7, #16]
 8003846:	e013      	b.n	8003870 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003848:	2301      	movs	r3, #1
 800384a:	613b      	str	r3, [r7, #16]
 800384c:	e010      	b.n	8003870 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2b80      	cmp	r3, #128	; 0x80
 8003852:	d902      	bls.n	800385a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003854:	2303      	movs	r3, #3
 8003856:	613b      	str	r3, [r7, #16]
 8003858:	e00a      	b.n	8003870 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2b80      	cmp	r3, #128	; 0x80
 800385e:	d102      	bne.n	8003866 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003860:	2302      	movs	r3, #2
 8003862:	613b      	str	r3, [r7, #16]
 8003864:	e004      	b.n	8003870 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2b70      	cmp	r3, #112	; 0x70
 800386a:	d101      	bne.n	8003870 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800386c:	2301      	movs	r3, #1
 800386e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003870:	4b0b      	ldr	r3, [pc, #44]	; (80038a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f023 0207 	bic.w	r2, r3, #7
 8003878:	4909      	ldr	r1, [pc, #36]	; (80038a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	4313      	orrs	r3, r2
 800387e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003880:	4b07      	ldr	r3, [pc, #28]	; (80038a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0307 	and.w	r3, r3, #7
 8003888:	693a      	ldr	r2, [r7, #16]
 800388a:	429a      	cmp	r2, r3
 800388c:	d001      	beq.n	8003892 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e000      	b.n	8003894 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3718      	adds	r7, #24
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	40021000 	.word	0x40021000
 80038a0:	40022000 	.word	0x40022000

080038a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b086      	sub	sp, #24
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80038ac:	2300      	movs	r3, #0
 80038ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80038b0:	2300      	movs	r3, #0
 80038b2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d041      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038c4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80038c8:	d02a      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80038ca:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80038ce:	d824      	bhi.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80038d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80038d4:	d008      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80038d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80038da:	d81e      	bhi.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d00a      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80038e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038e4:	d010      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80038e6:	e018      	b.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80038e8:	4b86      	ldr	r3, [pc, #536]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	4a85      	ldr	r2, [pc, #532]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038f2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80038f4:	e015      	b.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	3304      	adds	r3, #4
 80038fa:	2100      	movs	r1, #0
 80038fc:	4618      	mov	r0, r3
 80038fe:	f000 fabb 	bl	8003e78 <RCCEx_PLLSAI1_Config>
 8003902:	4603      	mov	r3, r0
 8003904:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003906:	e00c      	b.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	3320      	adds	r3, #32
 800390c:	2100      	movs	r1, #0
 800390e:	4618      	mov	r0, r3
 8003910:	f000 fba6 	bl	8004060 <RCCEx_PLLSAI2_Config>
 8003914:	4603      	mov	r3, r0
 8003916:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003918:	e003      	b.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	74fb      	strb	r3, [r7, #19]
      break;
 800391e:	e000      	b.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003920:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003922:	7cfb      	ldrb	r3, [r7, #19]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d10b      	bne.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003928:	4b76      	ldr	r3, [pc, #472]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800392a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800392e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003936:	4973      	ldr	r1, [pc, #460]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003938:	4313      	orrs	r3, r2
 800393a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800393e:	e001      	b.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003940:	7cfb      	ldrb	r3, [r7, #19]
 8003942:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d041      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003954:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003958:	d02a      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800395a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800395e:	d824      	bhi.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003960:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003964:	d008      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003966:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800396a:	d81e      	bhi.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x106>
 800396c:	2b00      	cmp	r3, #0
 800396e:	d00a      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003970:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003974:	d010      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003976:	e018      	b.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003978:	4b62      	ldr	r3, [pc, #392]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	4a61      	ldr	r2, [pc, #388]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800397e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003982:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003984:	e015      	b.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	3304      	adds	r3, #4
 800398a:	2100      	movs	r1, #0
 800398c:	4618      	mov	r0, r3
 800398e:	f000 fa73 	bl	8003e78 <RCCEx_PLLSAI1_Config>
 8003992:	4603      	mov	r3, r0
 8003994:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003996:	e00c      	b.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	3320      	adds	r3, #32
 800399c:	2100      	movs	r1, #0
 800399e:	4618      	mov	r0, r3
 80039a0:	f000 fb5e 	bl	8004060 <RCCEx_PLLSAI2_Config>
 80039a4:	4603      	mov	r3, r0
 80039a6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80039a8:	e003      	b.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	74fb      	strb	r3, [r7, #19]
      break;
 80039ae:	e000      	b.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80039b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039b2:	7cfb      	ldrb	r3, [r7, #19]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d10b      	bne.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80039b8:	4b52      	ldr	r3, [pc, #328]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039be:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039c6:	494f      	ldr	r1, [pc, #316]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80039ce:	e001      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039d0:	7cfb      	ldrb	r3, [r7, #19]
 80039d2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	f000 80a0 	beq.w	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039e2:	2300      	movs	r3, #0
 80039e4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80039e6:	4b47      	ldr	r3, [pc, #284]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d101      	bne.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80039f2:	2301      	movs	r3, #1
 80039f4:	e000      	b.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80039f6:	2300      	movs	r3, #0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d00d      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039fc:	4b41      	ldr	r3, [pc, #260]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a00:	4a40      	ldr	r2, [pc, #256]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a06:	6593      	str	r3, [r2, #88]	; 0x58
 8003a08:	4b3e      	ldr	r3, [pc, #248]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a10:	60bb      	str	r3, [r7, #8]
 8003a12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a14:	2301      	movs	r3, #1
 8003a16:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a18:	4b3b      	ldr	r3, [pc, #236]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a3a      	ldr	r2, [pc, #232]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a22:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a24:	f7fd fe54 	bl	80016d0 <HAL_GetTick>
 8003a28:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a2a:	e009      	b.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a2c:	f7fd fe50 	bl	80016d0 <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d902      	bls.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	74fb      	strb	r3, [r7, #19]
        break;
 8003a3e:	e005      	b.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a40:	4b31      	ldr	r3, [pc, #196]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d0ef      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003a4c:	7cfb      	ldrb	r3, [r7, #19]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d15c      	bne.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a52:	4b2c      	ldr	r3, [pc, #176]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a5c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d01f      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a6a:	697a      	ldr	r2, [r7, #20]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d019      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a70:	4b24      	ldr	r3, [pc, #144]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a7a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a7c:	4b21      	ldr	r3, [pc, #132]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a82:	4a20      	ldr	r2, [pc, #128]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a8c:	4b1d      	ldr	r3, [pc, #116]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a92:	4a1c      	ldr	r2, [pc, #112]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a9c:	4a19      	ldr	r2, [pc, #100]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	f003 0301 	and.w	r3, r3, #1
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d016      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aae:	f7fd fe0f 	bl	80016d0 <HAL_GetTick>
 8003ab2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ab4:	e00b      	b.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ab6:	f7fd fe0b 	bl	80016d0 <HAL_GetTick>
 8003aba:	4602      	mov	r2, r0
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d902      	bls.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	74fb      	strb	r3, [r7, #19]
            break;
 8003acc:	e006      	b.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ace:	4b0d      	ldr	r3, [pc, #52]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ad4:	f003 0302 	and.w	r3, r3, #2
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d0ec      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003adc:	7cfb      	ldrb	r3, [r7, #19]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d10c      	bne.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ae2:	4b08      	ldr	r3, [pc, #32]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ae8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003af2:	4904      	ldr	r1, [pc, #16]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003afa:	e009      	b.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003afc:	7cfb      	ldrb	r3, [r7, #19]
 8003afe:	74bb      	strb	r3, [r7, #18]
 8003b00:	e006      	b.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003b02:	bf00      	nop
 8003b04:	40021000 	.word	0x40021000
 8003b08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b0c:	7cfb      	ldrb	r3, [r7, #19]
 8003b0e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b10:	7c7b      	ldrb	r3, [r7, #17]
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d105      	bne.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b16:	4b9e      	ldr	r3, [pc, #632]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b1a:	4a9d      	ldr	r2, [pc, #628]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b20:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00a      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b2e:	4b98      	ldr	r3, [pc, #608]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b34:	f023 0203 	bic.w	r2, r3, #3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b3c:	4994      	ldr	r1, [pc, #592]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0302 	and.w	r3, r3, #2
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00a      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b50:	4b8f      	ldr	r3, [pc, #572]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b56:	f023 020c 	bic.w	r2, r3, #12
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b5e:	498c      	ldr	r1, [pc, #560]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0304 	and.w	r3, r3, #4
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00a      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b72:	4b87      	ldr	r3, [pc, #540]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b78:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b80:	4983      	ldr	r1, [pc, #524]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0308 	and.w	r3, r3, #8
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d00a      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b94:	4b7e      	ldr	r3, [pc, #504]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b9a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba2:	497b      	ldr	r1, [pc, #492]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0310 	and.w	r3, r3, #16
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00a      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003bb6:	4b76      	ldr	r3, [pc, #472]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bbc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bc4:	4972      	ldr	r1, [pc, #456]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0320 	and.w	r3, r3, #32
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d00a      	beq.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003bd8:	4b6d      	ldr	r3, [pc, #436]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bde:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003be6:	496a      	ldr	r1, [pc, #424]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00a      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003bfa:	4b65      	ldr	r3, [pc, #404]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c00:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c08:	4961      	ldr	r1, [pc, #388]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d00a      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c1c:	4b5c      	ldr	r3, [pc, #368]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c22:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c2a:	4959      	ldr	r1, [pc, #356]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d00a      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c3e:	4b54      	ldr	r3, [pc, #336]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c44:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c4c:	4950      	ldr	r1, [pc, #320]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d00a      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c60:	4b4b      	ldr	r3, [pc, #300]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c66:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c6e:	4948      	ldr	r1, [pc, #288]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d00a      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c82:	4b43      	ldr	r3, [pc, #268]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c90:	493f      	ldr	r1, [pc, #252]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d028      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ca4:	4b3a      	ldr	r3, [pc, #232]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003caa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cb2:	4937      	ldr	r1, [pc, #220]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cc2:	d106      	bne.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cc4:	4b32      	ldr	r3, [pc, #200]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	4a31      	ldr	r2, [pc, #196]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cce:	60d3      	str	r3, [r2, #12]
 8003cd0:	e011      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cd6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003cda:	d10c      	bne.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	3304      	adds	r3, #4
 8003ce0:	2101      	movs	r1, #1
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f000 f8c8 	bl	8003e78 <RCCEx_PLLSAI1_Config>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003cec:	7cfb      	ldrb	r3, [r7, #19]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d001      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003cf2:	7cfb      	ldrb	r3, [r7, #19]
 8003cf4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d028      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003d02:	4b23      	ldr	r3, [pc, #140]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d08:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d10:	491f      	ldr	r1, [pc, #124]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d20:	d106      	bne.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d22:	4b1b      	ldr	r3, [pc, #108]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	4a1a      	ldr	r2, [pc, #104]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d2c:	60d3      	str	r3, [r2, #12]
 8003d2e:	e011      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d34:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d38:	d10c      	bne.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	3304      	adds	r3, #4
 8003d3e:	2101      	movs	r1, #1
 8003d40:	4618      	mov	r0, r3
 8003d42:	f000 f899 	bl	8003e78 <RCCEx_PLLSAI1_Config>
 8003d46:	4603      	mov	r3, r0
 8003d48:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d4a:	7cfb      	ldrb	r3, [r7, #19]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d001      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003d50:	7cfb      	ldrb	r3, [r7, #19]
 8003d52:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d02b      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d60:	4b0b      	ldr	r3, [pc, #44]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d66:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d6e:	4908      	ldr	r1, [pc, #32]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d7e:	d109      	bne.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d80:	4b03      	ldr	r3, [pc, #12]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	4a02      	ldr	r2, [pc, #8]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d8a:	60d3      	str	r3, [r2, #12]
 8003d8c:	e014      	b.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003d8e:	bf00      	nop
 8003d90:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d98:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d9c:	d10c      	bne.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	3304      	adds	r3, #4
 8003da2:	2101      	movs	r1, #1
 8003da4:	4618      	mov	r0, r3
 8003da6:	f000 f867 	bl	8003e78 <RCCEx_PLLSAI1_Config>
 8003daa:	4603      	mov	r3, r0
 8003dac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003dae:	7cfb      	ldrb	r3, [r7, #19]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d001      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003db4:	7cfb      	ldrb	r3, [r7, #19]
 8003db6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d02f      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003dc4:	4b2b      	ldr	r3, [pc, #172]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dd2:	4928      	ldr	r1, [pc, #160]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003de2:	d10d      	bne.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	3304      	adds	r3, #4
 8003de8:	2102      	movs	r1, #2
 8003dea:	4618      	mov	r0, r3
 8003dec:	f000 f844 	bl	8003e78 <RCCEx_PLLSAI1_Config>
 8003df0:	4603      	mov	r3, r0
 8003df2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003df4:	7cfb      	ldrb	r3, [r7, #19]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d014      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003dfa:	7cfb      	ldrb	r3, [r7, #19]
 8003dfc:	74bb      	strb	r3, [r7, #18]
 8003dfe:	e011      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e08:	d10c      	bne.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	3320      	adds	r3, #32
 8003e0e:	2102      	movs	r1, #2
 8003e10:	4618      	mov	r0, r3
 8003e12:	f000 f925 	bl	8004060 <RCCEx_PLLSAI2_Config>
 8003e16:	4603      	mov	r3, r0
 8003e18:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e1a:	7cfb      	ldrb	r3, [r7, #19]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d001      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003e20:	7cfb      	ldrb	r3, [r7, #19]
 8003e22:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d00a      	beq.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003e30:	4b10      	ldr	r3, [pc, #64]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e36:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e3e:	490d      	ldr	r1, [pc, #52]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00b      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003e52:	4b08      	ldr	r3, [pc, #32]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e58:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e62:	4904      	ldr	r1, [pc, #16]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e64:	4313      	orrs	r3, r2
 8003e66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003e6a:	7cbb      	ldrb	r3, [r7, #18]
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3718      	adds	r7, #24
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	40021000 	.word	0x40021000

08003e78 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e82:	2300      	movs	r3, #0
 8003e84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003e86:	4b75      	ldr	r3, [pc, #468]	; (800405c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	f003 0303 	and.w	r3, r3, #3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d018      	beq.n	8003ec4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003e92:	4b72      	ldr	r3, [pc, #456]	; (800405c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	f003 0203 	and.w	r2, r3, #3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d10d      	bne.n	8003ebe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
       ||
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d009      	beq.n	8003ebe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003eaa:	4b6c      	ldr	r3, [pc, #432]	; (800405c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	091b      	lsrs	r3, r3, #4
 8003eb0:	f003 0307 	and.w	r3, r3, #7
 8003eb4:	1c5a      	adds	r2, r3, #1
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
       ||
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d047      	beq.n	8003f4e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	73fb      	strb	r3, [r7, #15]
 8003ec2:	e044      	b.n	8003f4e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2b03      	cmp	r3, #3
 8003eca:	d018      	beq.n	8003efe <RCCEx_PLLSAI1_Config+0x86>
 8003ecc:	2b03      	cmp	r3, #3
 8003ece:	d825      	bhi.n	8003f1c <RCCEx_PLLSAI1_Config+0xa4>
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d002      	beq.n	8003eda <RCCEx_PLLSAI1_Config+0x62>
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d009      	beq.n	8003eec <RCCEx_PLLSAI1_Config+0x74>
 8003ed8:	e020      	b.n	8003f1c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003eda:	4b60      	ldr	r3, [pc, #384]	; (800405c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d11d      	bne.n	8003f22 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003eea:	e01a      	b.n	8003f22 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003eec:	4b5b      	ldr	r3, [pc, #364]	; (800405c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d116      	bne.n	8003f26 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003efc:	e013      	b.n	8003f26 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003efe:	4b57      	ldr	r3, [pc, #348]	; (800405c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d10f      	bne.n	8003f2a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003f0a:	4b54      	ldr	r3, [pc, #336]	; (800405c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d109      	bne.n	8003f2a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003f1a:	e006      	b.n	8003f2a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	73fb      	strb	r3, [r7, #15]
      break;
 8003f20:	e004      	b.n	8003f2c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f22:	bf00      	nop
 8003f24:	e002      	b.n	8003f2c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f26:	bf00      	nop
 8003f28:	e000      	b.n	8003f2c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f2a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f2c:	7bfb      	ldrb	r3, [r7, #15]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d10d      	bne.n	8003f4e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003f32:	4b4a      	ldr	r3, [pc, #296]	; (800405c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6819      	ldr	r1, [r3, #0]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	3b01      	subs	r3, #1
 8003f44:	011b      	lsls	r3, r3, #4
 8003f46:	430b      	orrs	r3, r1
 8003f48:	4944      	ldr	r1, [pc, #272]	; (800405c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003f4e:	7bfb      	ldrb	r3, [r7, #15]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d17d      	bne.n	8004050 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003f54:	4b41      	ldr	r3, [pc, #260]	; (800405c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a40      	ldr	r2, [pc, #256]	; (800405c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f5a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003f5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f60:	f7fd fbb6 	bl	80016d0 <HAL_GetTick>
 8003f64:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f66:	e009      	b.n	8003f7c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f68:	f7fd fbb2 	bl	80016d0 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d902      	bls.n	8003f7c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	73fb      	strb	r3, [r7, #15]
        break;
 8003f7a:	e005      	b.n	8003f88 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f7c:	4b37      	ldr	r3, [pc, #220]	; (800405c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d1ef      	bne.n	8003f68 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003f88:	7bfb      	ldrb	r3, [r7, #15]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d160      	bne.n	8004050 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d111      	bne.n	8003fb8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f94:	4b31      	ldr	r3, [pc, #196]	; (800405c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f96:	691b      	ldr	r3, [r3, #16]
 8003f98:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003f9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	6892      	ldr	r2, [r2, #8]
 8003fa4:	0211      	lsls	r1, r2, #8
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	68d2      	ldr	r2, [r2, #12]
 8003faa:	0912      	lsrs	r2, r2, #4
 8003fac:	0452      	lsls	r2, r2, #17
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	492a      	ldr	r1, [pc, #168]	; (800405c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	610b      	str	r3, [r1, #16]
 8003fb6:	e027      	b.n	8004008 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d112      	bne.n	8003fe4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003fbe:	4b27      	ldr	r3, [pc, #156]	; (800405c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003fc6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	6892      	ldr	r2, [r2, #8]
 8003fce:	0211      	lsls	r1, r2, #8
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	6912      	ldr	r2, [r2, #16]
 8003fd4:	0852      	lsrs	r2, r2, #1
 8003fd6:	3a01      	subs	r2, #1
 8003fd8:	0552      	lsls	r2, r2, #21
 8003fda:	430a      	orrs	r2, r1
 8003fdc:	491f      	ldr	r1, [pc, #124]	; (800405c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	610b      	str	r3, [r1, #16]
 8003fe2:	e011      	b.n	8004008 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003fe4:	4b1d      	ldr	r3, [pc, #116]	; (800405c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fe6:	691b      	ldr	r3, [r3, #16]
 8003fe8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003fec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	6892      	ldr	r2, [r2, #8]
 8003ff4:	0211      	lsls	r1, r2, #8
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	6952      	ldr	r2, [r2, #20]
 8003ffa:	0852      	lsrs	r2, r2, #1
 8003ffc:	3a01      	subs	r2, #1
 8003ffe:	0652      	lsls	r2, r2, #25
 8004000:	430a      	orrs	r2, r1
 8004002:	4916      	ldr	r1, [pc, #88]	; (800405c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004004:	4313      	orrs	r3, r2
 8004006:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004008:	4b14      	ldr	r3, [pc, #80]	; (800405c <RCCEx_PLLSAI1_Config+0x1e4>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a13      	ldr	r2, [pc, #76]	; (800405c <RCCEx_PLLSAI1_Config+0x1e4>)
 800400e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004012:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004014:	f7fd fb5c 	bl	80016d0 <HAL_GetTick>
 8004018:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800401a:	e009      	b.n	8004030 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800401c:	f7fd fb58 	bl	80016d0 <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	2b02      	cmp	r3, #2
 8004028:	d902      	bls.n	8004030 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	73fb      	strb	r3, [r7, #15]
          break;
 800402e:	e005      	b.n	800403c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004030:	4b0a      	ldr	r3, [pc, #40]	; (800405c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004038:	2b00      	cmp	r3, #0
 800403a:	d0ef      	beq.n	800401c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800403c:	7bfb      	ldrb	r3, [r7, #15]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d106      	bne.n	8004050 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004042:	4b06      	ldr	r3, [pc, #24]	; (800405c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004044:	691a      	ldr	r2, [r3, #16]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	699b      	ldr	r3, [r3, #24]
 800404a:	4904      	ldr	r1, [pc, #16]	; (800405c <RCCEx_PLLSAI1_Config+0x1e4>)
 800404c:	4313      	orrs	r3, r2
 800404e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004050:	7bfb      	ldrb	r3, [r7, #15]
}
 8004052:	4618      	mov	r0, r3
 8004054:	3710      	adds	r7, #16
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	40021000 	.word	0x40021000

08004060 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800406a:	2300      	movs	r3, #0
 800406c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800406e:	4b6a      	ldr	r3, [pc, #424]	; (8004218 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	f003 0303 	and.w	r3, r3, #3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d018      	beq.n	80040ac <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800407a:	4b67      	ldr	r3, [pc, #412]	; (8004218 <RCCEx_PLLSAI2_Config+0x1b8>)
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	f003 0203 	and.w	r2, r3, #3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	429a      	cmp	r2, r3
 8004088:	d10d      	bne.n	80040a6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
       ||
 800408e:	2b00      	cmp	r3, #0
 8004090:	d009      	beq.n	80040a6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004092:	4b61      	ldr	r3, [pc, #388]	; (8004218 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	091b      	lsrs	r3, r3, #4
 8004098:	f003 0307 	and.w	r3, r3, #7
 800409c:	1c5a      	adds	r2, r3, #1
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
       ||
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d047      	beq.n	8004136 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	73fb      	strb	r3, [r7, #15]
 80040aa:	e044      	b.n	8004136 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2b03      	cmp	r3, #3
 80040b2:	d018      	beq.n	80040e6 <RCCEx_PLLSAI2_Config+0x86>
 80040b4:	2b03      	cmp	r3, #3
 80040b6:	d825      	bhi.n	8004104 <RCCEx_PLLSAI2_Config+0xa4>
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d002      	beq.n	80040c2 <RCCEx_PLLSAI2_Config+0x62>
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d009      	beq.n	80040d4 <RCCEx_PLLSAI2_Config+0x74>
 80040c0:	e020      	b.n	8004104 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80040c2:	4b55      	ldr	r3, [pc, #340]	; (8004218 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0302 	and.w	r3, r3, #2
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d11d      	bne.n	800410a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040d2:	e01a      	b.n	800410a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80040d4:	4b50      	ldr	r3, [pc, #320]	; (8004218 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d116      	bne.n	800410e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040e4:	e013      	b.n	800410e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80040e6:	4b4c      	ldr	r3, [pc, #304]	; (8004218 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d10f      	bne.n	8004112 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80040f2:	4b49      	ldr	r3, [pc, #292]	; (8004218 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d109      	bne.n	8004112 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004102:	e006      	b.n	8004112 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	73fb      	strb	r3, [r7, #15]
      break;
 8004108:	e004      	b.n	8004114 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800410a:	bf00      	nop
 800410c:	e002      	b.n	8004114 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800410e:	bf00      	nop
 8004110:	e000      	b.n	8004114 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004112:	bf00      	nop
    }

    if(status == HAL_OK)
 8004114:	7bfb      	ldrb	r3, [r7, #15]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d10d      	bne.n	8004136 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800411a:	4b3f      	ldr	r3, [pc, #252]	; (8004218 <RCCEx_PLLSAI2_Config+0x1b8>)
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6819      	ldr	r1, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	3b01      	subs	r3, #1
 800412c:	011b      	lsls	r3, r3, #4
 800412e:	430b      	orrs	r3, r1
 8004130:	4939      	ldr	r1, [pc, #228]	; (8004218 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004132:	4313      	orrs	r3, r2
 8004134:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004136:	7bfb      	ldrb	r3, [r7, #15]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d167      	bne.n	800420c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800413c:	4b36      	ldr	r3, [pc, #216]	; (8004218 <RCCEx_PLLSAI2_Config+0x1b8>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a35      	ldr	r2, [pc, #212]	; (8004218 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004142:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004146:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004148:	f7fd fac2 	bl	80016d0 <HAL_GetTick>
 800414c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800414e:	e009      	b.n	8004164 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004150:	f7fd fabe 	bl	80016d0 <HAL_GetTick>
 8004154:	4602      	mov	r2, r0
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	2b02      	cmp	r3, #2
 800415c:	d902      	bls.n	8004164 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	73fb      	strb	r3, [r7, #15]
        break;
 8004162:	e005      	b.n	8004170 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004164:	4b2c      	ldr	r3, [pc, #176]	; (8004218 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d1ef      	bne.n	8004150 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004170:	7bfb      	ldrb	r3, [r7, #15]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d14a      	bne.n	800420c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d111      	bne.n	80041a0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800417c:	4b26      	ldr	r3, [pc, #152]	; (8004218 <RCCEx_PLLSAI2_Config+0x1b8>)
 800417e:	695b      	ldr	r3, [r3, #20]
 8004180:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004184:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	6892      	ldr	r2, [r2, #8]
 800418c:	0211      	lsls	r1, r2, #8
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	68d2      	ldr	r2, [r2, #12]
 8004192:	0912      	lsrs	r2, r2, #4
 8004194:	0452      	lsls	r2, r2, #17
 8004196:	430a      	orrs	r2, r1
 8004198:	491f      	ldr	r1, [pc, #124]	; (8004218 <RCCEx_PLLSAI2_Config+0x1b8>)
 800419a:	4313      	orrs	r3, r2
 800419c:	614b      	str	r3, [r1, #20]
 800419e:	e011      	b.n	80041c4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80041a0:	4b1d      	ldr	r3, [pc, #116]	; (8004218 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041a2:	695b      	ldr	r3, [r3, #20]
 80041a4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80041a8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	6892      	ldr	r2, [r2, #8]
 80041b0:	0211      	lsls	r1, r2, #8
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	6912      	ldr	r2, [r2, #16]
 80041b6:	0852      	lsrs	r2, r2, #1
 80041b8:	3a01      	subs	r2, #1
 80041ba:	0652      	lsls	r2, r2, #25
 80041bc:	430a      	orrs	r2, r1
 80041be:	4916      	ldr	r1, [pc, #88]	; (8004218 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80041c4:	4b14      	ldr	r3, [pc, #80]	; (8004218 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a13      	ldr	r2, [pc, #76]	; (8004218 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041ce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041d0:	f7fd fa7e 	bl	80016d0 <HAL_GetTick>
 80041d4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80041d6:	e009      	b.n	80041ec <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80041d8:	f7fd fa7a 	bl	80016d0 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d902      	bls.n	80041ec <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	73fb      	strb	r3, [r7, #15]
          break;
 80041ea:	e005      	b.n	80041f8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80041ec:	4b0a      	ldr	r3, [pc, #40]	; (8004218 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d0ef      	beq.n	80041d8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80041f8:	7bfb      	ldrb	r3, [r7, #15]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d106      	bne.n	800420c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80041fe:	4b06      	ldr	r3, [pc, #24]	; (8004218 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004200:	695a      	ldr	r2, [r3, #20]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	695b      	ldr	r3, [r3, #20]
 8004206:	4904      	ldr	r1, [pc, #16]	; (8004218 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004208:	4313      	orrs	r3, r2
 800420a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800420c:	7bfb      	ldrb	r3, [r7, #15]
}
 800420e:	4618      	mov	r0, r3
 8004210:	3710      	adds	r7, #16
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	40021000 	.word	0x40021000

0800421c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b082      	sub	sp, #8
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d101      	bne.n	800422e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e040      	b.n	80042b0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004232:	2b00      	cmp	r3, #0
 8004234:	d106      	bne.n	8004244 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f7fd f8a6 	bl	8001390 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2224      	movs	r2, #36	; 0x24
 8004248:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f022 0201 	bic.w	r2, r2, #1
 8004258:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425e:	2b00      	cmp	r3, #0
 8004260:	d002      	beq.n	8004268 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 fb6a 	bl	800493c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f000 f8af 	bl	80043cc <UART_SetConfig>
 800426e:	4603      	mov	r3, r0
 8004270:	2b01      	cmp	r3, #1
 8004272:	d101      	bne.n	8004278 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e01b      	b.n	80042b0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	685a      	ldr	r2, [r3, #4]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004286:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	689a      	ldr	r2, [r3, #8]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004296:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f042 0201 	orr.w	r2, r2, #1
 80042a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f000 fbe9 	bl	8004a80 <UART_CheckIdleState>
 80042ae:	4603      	mov	r3, r0
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3708      	adds	r7, #8
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b08a      	sub	sp, #40	; 0x28
 80042bc:	af02      	add	r7, sp, #8
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	603b      	str	r3, [r7, #0]
 80042c4:	4613      	mov	r3, r2
 80042c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042cc:	2b20      	cmp	r3, #32
 80042ce:	d178      	bne.n	80043c2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d002      	beq.n	80042dc <HAL_UART_Transmit+0x24>
 80042d6:	88fb      	ldrh	r3, [r7, #6]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d101      	bne.n	80042e0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e071      	b.n	80043c4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2221      	movs	r2, #33	; 0x21
 80042ec:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042ee:	f7fd f9ef 	bl	80016d0 <HAL_GetTick>
 80042f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	88fa      	ldrh	r2, [r7, #6]
 80042f8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	88fa      	ldrh	r2, [r7, #6]
 8004300:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800430c:	d108      	bne.n	8004320 <HAL_UART_Transmit+0x68>
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d104      	bne.n	8004320 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004316:	2300      	movs	r3, #0
 8004318:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	61bb      	str	r3, [r7, #24]
 800431e:	e003      	b.n	8004328 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004324:	2300      	movs	r3, #0
 8004326:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004328:	e030      	b.n	800438c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	9300      	str	r3, [sp, #0]
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	2200      	movs	r2, #0
 8004332:	2180      	movs	r1, #128	; 0x80
 8004334:	68f8      	ldr	r0, [r7, #12]
 8004336:	f000 fc4b 	bl	8004bd0 <UART_WaitOnFlagUntilTimeout>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d004      	beq.n	800434a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2220      	movs	r2, #32
 8004344:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e03c      	b.n	80043c4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d10b      	bne.n	8004368 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	881a      	ldrh	r2, [r3, #0]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800435c:	b292      	uxth	r2, r2
 800435e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004360:	69bb      	ldr	r3, [r7, #24]
 8004362:	3302      	adds	r3, #2
 8004364:	61bb      	str	r3, [r7, #24]
 8004366:	e008      	b.n	800437a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	781a      	ldrb	r2, [r3, #0]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	b292      	uxth	r2, r2
 8004372:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	3301      	adds	r3, #1
 8004378:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004380:	b29b      	uxth	r3, r3
 8004382:	3b01      	subs	r3, #1
 8004384:	b29a      	uxth	r2, r3
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004392:	b29b      	uxth	r3, r3
 8004394:	2b00      	cmp	r3, #0
 8004396:	d1c8      	bne.n	800432a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	9300      	str	r3, [sp, #0]
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	2200      	movs	r2, #0
 80043a0:	2140      	movs	r1, #64	; 0x40
 80043a2:	68f8      	ldr	r0, [r7, #12]
 80043a4:	f000 fc14 	bl	8004bd0 <UART_WaitOnFlagUntilTimeout>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d004      	beq.n	80043b8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2220      	movs	r2, #32
 80043b2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	e005      	b.n	80043c4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2220      	movs	r2, #32
 80043bc:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80043be:	2300      	movs	r3, #0
 80043c0:	e000      	b.n	80043c4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80043c2:	2302      	movs	r3, #2
  }
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3720      	adds	r7, #32
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}

080043cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043d0:	b08a      	sub	sp, #40	; 0x28
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80043d6:	2300      	movs	r3, #0
 80043d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	689a      	ldr	r2, [r3, #8]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	691b      	ldr	r3, [r3, #16]
 80043e4:	431a      	orrs	r2, r3
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	431a      	orrs	r2, r3
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	69db      	ldr	r3, [r3, #28]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	4ba4      	ldr	r3, [pc, #656]	; (800468c <UART_SetConfig+0x2c0>)
 80043fc:	4013      	ands	r3, r2
 80043fe:	68fa      	ldr	r2, [r7, #12]
 8004400:	6812      	ldr	r2, [r2, #0]
 8004402:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004404:	430b      	orrs	r3, r1
 8004406:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	68da      	ldr	r2, [r3, #12]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	430a      	orrs	r2, r1
 800441c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a99      	ldr	r2, [pc, #612]	; (8004690 <UART_SetConfig+0x2c4>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d004      	beq.n	8004438 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6a1b      	ldr	r3, [r3, #32]
 8004432:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004434:	4313      	orrs	r3, r2
 8004436:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004448:	430a      	orrs	r2, r1
 800444a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a90      	ldr	r2, [pc, #576]	; (8004694 <UART_SetConfig+0x2c8>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d126      	bne.n	80044a4 <UART_SetConfig+0xd8>
 8004456:	4b90      	ldr	r3, [pc, #576]	; (8004698 <UART_SetConfig+0x2cc>)
 8004458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800445c:	f003 0303 	and.w	r3, r3, #3
 8004460:	2b03      	cmp	r3, #3
 8004462:	d81b      	bhi.n	800449c <UART_SetConfig+0xd0>
 8004464:	a201      	add	r2, pc, #4	; (adr r2, 800446c <UART_SetConfig+0xa0>)
 8004466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800446a:	bf00      	nop
 800446c:	0800447d 	.word	0x0800447d
 8004470:	0800448d 	.word	0x0800448d
 8004474:	08004485 	.word	0x08004485
 8004478:	08004495 	.word	0x08004495
 800447c:	2301      	movs	r3, #1
 800447e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004482:	e116      	b.n	80046b2 <UART_SetConfig+0x2e6>
 8004484:	2302      	movs	r3, #2
 8004486:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800448a:	e112      	b.n	80046b2 <UART_SetConfig+0x2e6>
 800448c:	2304      	movs	r3, #4
 800448e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004492:	e10e      	b.n	80046b2 <UART_SetConfig+0x2e6>
 8004494:	2308      	movs	r3, #8
 8004496:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800449a:	e10a      	b.n	80046b2 <UART_SetConfig+0x2e6>
 800449c:	2310      	movs	r3, #16
 800449e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044a2:	e106      	b.n	80046b2 <UART_SetConfig+0x2e6>
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a7c      	ldr	r2, [pc, #496]	; (800469c <UART_SetConfig+0x2d0>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d138      	bne.n	8004520 <UART_SetConfig+0x154>
 80044ae:	4b7a      	ldr	r3, [pc, #488]	; (8004698 <UART_SetConfig+0x2cc>)
 80044b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b4:	f003 030c 	and.w	r3, r3, #12
 80044b8:	2b0c      	cmp	r3, #12
 80044ba:	d82d      	bhi.n	8004518 <UART_SetConfig+0x14c>
 80044bc:	a201      	add	r2, pc, #4	; (adr r2, 80044c4 <UART_SetConfig+0xf8>)
 80044be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c2:	bf00      	nop
 80044c4:	080044f9 	.word	0x080044f9
 80044c8:	08004519 	.word	0x08004519
 80044cc:	08004519 	.word	0x08004519
 80044d0:	08004519 	.word	0x08004519
 80044d4:	08004509 	.word	0x08004509
 80044d8:	08004519 	.word	0x08004519
 80044dc:	08004519 	.word	0x08004519
 80044e0:	08004519 	.word	0x08004519
 80044e4:	08004501 	.word	0x08004501
 80044e8:	08004519 	.word	0x08004519
 80044ec:	08004519 	.word	0x08004519
 80044f0:	08004519 	.word	0x08004519
 80044f4:	08004511 	.word	0x08004511
 80044f8:	2300      	movs	r3, #0
 80044fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044fe:	e0d8      	b.n	80046b2 <UART_SetConfig+0x2e6>
 8004500:	2302      	movs	r3, #2
 8004502:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004506:	e0d4      	b.n	80046b2 <UART_SetConfig+0x2e6>
 8004508:	2304      	movs	r3, #4
 800450a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800450e:	e0d0      	b.n	80046b2 <UART_SetConfig+0x2e6>
 8004510:	2308      	movs	r3, #8
 8004512:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004516:	e0cc      	b.n	80046b2 <UART_SetConfig+0x2e6>
 8004518:	2310      	movs	r3, #16
 800451a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800451e:	e0c8      	b.n	80046b2 <UART_SetConfig+0x2e6>
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a5e      	ldr	r2, [pc, #376]	; (80046a0 <UART_SetConfig+0x2d4>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d125      	bne.n	8004576 <UART_SetConfig+0x1aa>
 800452a:	4b5b      	ldr	r3, [pc, #364]	; (8004698 <UART_SetConfig+0x2cc>)
 800452c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004530:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004534:	2b30      	cmp	r3, #48	; 0x30
 8004536:	d016      	beq.n	8004566 <UART_SetConfig+0x19a>
 8004538:	2b30      	cmp	r3, #48	; 0x30
 800453a:	d818      	bhi.n	800456e <UART_SetConfig+0x1a2>
 800453c:	2b20      	cmp	r3, #32
 800453e:	d00a      	beq.n	8004556 <UART_SetConfig+0x18a>
 8004540:	2b20      	cmp	r3, #32
 8004542:	d814      	bhi.n	800456e <UART_SetConfig+0x1a2>
 8004544:	2b00      	cmp	r3, #0
 8004546:	d002      	beq.n	800454e <UART_SetConfig+0x182>
 8004548:	2b10      	cmp	r3, #16
 800454a:	d008      	beq.n	800455e <UART_SetConfig+0x192>
 800454c:	e00f      	b.n	800456e <UART_SetConfig+0x1a2>
 800454e:	2300      	movs	r3, #0
 8004550:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004554:	e0ad      	b.n	80046b2 <UART_SetConfig+0x2e6>
 8004556:	2302      	movs	r3, #2
 8004558:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800455c:	e0a9      	b.n	80046b2 <UART_SetConfig+0x2e6>
 800455e:	2304      	movs	r3, #4
 8004560:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004564:	e0a5      	b.n	80046b2 <UART_SetConfig+0x2e6>
 8004566:	2308      	movs	r3, #8
 8004568:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800456c:	e0a1      	b.n	80046b2 <UART_SetConfig+0x2e6>
 800456e:	2310      	movs	r3, #16
 8004570:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004574:	e09d      	b.n	80046b2 <UART_SetConfig+0x2e6>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a4a      	ldr	r2, [pc, #296]	; (80046a4 <UART_SetConfig+0x2d8>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d125      	bne.n	80045cc <UART_SetConfig+0x200>
 8004580:	4b45      	ldr	r3, [pc, #276]	; (8004698 <UART_SetConfig+0x2cc>)
 8004582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004586:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800458a:	2bc0      	cmp	r3, #192	; 0xc0
 800458c:	d016      	beq.n	80045bc <UART_SetConfig+0x1f0>
 800458e:	2bc0      	cmp	r3, #192	; 0xc0
 8004590:	d818      	bhi.n	80045c4 <UART_SetConfig+0x1f8>
 8004592:	2b80      	cmp	r3, #128	; 0x80
 8004594:	d00a      	beq.n	80045ac <UART_SetConfig+0x1e0>
 8004596:	2b80      	cmp	r3, #128	; 0x80
 8004598:	d814      	bhi.n	80045c4 <UART_SetConfig+0x1f8>
 800459a:	2b00      	cmp	r3, #0
 800459c:	d002      	beq.n	80045a4 <UART_SetConfig+0x1d8>
 800459e:	2b40      	cmp	r3, #64	; 0x40
 80045a0:	d008      	beq.n	80045b4 <UART_SetConfig+0x1e8>
 80045a2:	e00f      	b.n	80045c4 <UART_SetConfig+0x1f8>
 80045a4:	2300      	movs	r3, #0
 80045a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045aa:	e082      	b.n	80046b2 <UART_SetConfig+0x2e6>
 80045ac:	2302      	movs	r3, #2
 80045ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045b2:	e07e      	b.n	80046b2 <UART_SetConfig+0x2e6>
 80045b4:	2304      	movs	r3, #4
 80045b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045ba:	e07a      	b.n	80046b2 <UART_SetConfig+0x2e6>
 80045bc:	2308      	movs	r3, #8
 80045be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045c2:	e076      	b.n	80046b2 <UART_SetConfig+0x2e6>
 80045c4:	2310      	movs	r3, #16
 80045c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045ca:	e072      	b.n	80046b2 <UART_SetConfig+0x2e6>
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a35      	ldr	r2, [pc, #212]	; (80046a8 <UART_SetConfig+0x2dc>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d12a      	bne.n	800462c <UART_SetConfig+0x260>
 80045d6:	4b30      	ldr	r3, [pc, #192]	; (8004698 <UART_SetConfig+0x2cc>)
 80045d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045e4:	d01a      	beq.n	800461c <UART_SetConfig+0x250>
 80045e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045ea:	d81b      	bhi.n	8004624 <UART_SetConfig+0x258>
 80045ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045f0:	d00c      	beq.n	800460c <UART_SetConfig+0x240>
 80045f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045f6:	d815      	bhi.n	8004624 <UART_SetConfig+0x258>
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d003      	beq.n	8004604 <UART_SetConfig+0x238>
 80045fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004600:	d008      	beq.n	8004614 <UART_SetConfig+0x248>
 8004602:	e00f      	b.n	8004624 <UART_SetConfig+0x258>
 8004604:	2300      	movs	r3, #0
 8004606:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800460a:	e052      	b.n	80046b2 <UART_SetConfig+0x2e6>
 800460c:	2302      	movs	r3, #2
 800460e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004612:	e04e      	b.n	80046b2 <UART_SetConfig+0x2e6>
 8004614:	2304      	movs	r3, #4
 8004616:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800461a:	e04a      	b.n	80046b2 <UART_SetConfig+0x2e6>
 800461c:	2308      	movs	r3, #8
 800461e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004622:	e046      	b.n	80046b2 <UART_SetConfig+0x2e6>
 8004624:	2310      	movs	r3, #16
 8004626:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800462a:	e042      	b.n	80046b2 <UART_SetConfig+0x2e6>
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a17      	ldr	r2, [pc, #92]	; (8004690 <UART_SetConfig+0x2c4>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d13a      	bne.n	80046ac <UART_SetConfig+0x2e0>
 8004636:	4b18      	ldr	r3, [pc, #96]	; (8004698 <UART_SetConfig+0x2cc>)
 8004638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800463c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004640:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004644:	d01a      	beq.n	800467c <UART_SetConfig+0x2b0>
 8004646:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800464a:	d81b      	bhi.n	8004684 <UART_SetConfig+0x2b8>
 800464c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004650:	d00c      	beq.n	800466c <UART_SetConfig+0x2a0>
 8004652:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004656:	d815      	bhi.n	8004684 <UART_SetConfig+0x2b8>
 8004658:	2b00      	cmp	r3, #0
 800465a:	d003      	beq.n	8004664 <UART_SetConfig+0x298>
 800465c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004660:	d008      	beq.n	8004674 <UART_SetConfig+0x2a8>
 8004662:	e00f      	b.n	8004684 <UART_SetConfig+0x2b8>
 8004664:	2300      	movs	r3, #0
 8004666:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800466a:	e022      	b.n	80046b2 <UART_SetConfig+0x2e6>
 800466c:	2302      	movs	r3, #2
 800466e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004672:	e01e      	b.n	80046b2 <UART_SetConfig+0x2e6>
 8004674:	2304      	movs	r3, #4
 8004676:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800467a:	e01a      	b.n	80046b2 <UART_SetConfig+0x2e6>
 800467c:	2308      	movs	r3, #8
 800467e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004682:	e016      	b.n	80046b2 <UART_SetConfig+0x2e6>
 8004684:	2310      	movs	r3, #16
 8004686:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800468a:	e012      	b.n	80046b2 <UART_SetConfig+0x2e6>
 800468c:	efff69f3 	.word	0xefff69f3
 8004690:	40008000 	.word	0x40008000
 8004694:	40013800 	.word	0x40013800
 8004698:	40021000 	.word	0x40021000
 800469c:	40004400 	.word	0x40004400
 80046a0:	40004800 	.word	0x40004800
 80046a4:	40004c00 	.word	0x40004c00
 80046a8:	40005000 	.word	0x40005000
 80046ac:	2310      	movs	r3, #16
 80046ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a9f      	ldr	r2, [pc, #636]	; (8004934 <UART_SetConfig+0x568>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d17a      	bne.n	80047b2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80046bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80046c0:	2b08      	cmp	r3, #8
 80046c2:	d824      	bhi.n	800470e <UART_SetConfig+0x342>
 80046c4:	a201      	add	r2, pc, #4	; (adr r2, 80046cc <UART_SetConfig+0x300>)
 80046c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ca:	bf00      	nop
 80046cc:	080046f1 	.word	0x080046f1
 80046d0:	0800470f 	.word	0x0800470f
 80046d4:	080046f9 	.word	0x080046f9
 80046d8:	0800470f 	.word	0x0800470f
 80046dc:	080046ff 	.word	0x080046ff
 80046e0:	0800470f 	.word	0x0800470f
 80046e4:	0800470f 	.word	0x0800470f
 80046e8:	0800470f 	.word	0x0800470f
 80046ec:	08004707 	.word	0x08004707
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046f0:	f7ff f84c 	bl	800378c <HAL_RCC_GetPCLK1Freq>
 80046f4:	61f8      	str	r0, [r7, #28]
        break;
 80046f6:	e010      	b.n	800471a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046f8:	4b8f      	ldr	r3, [pc, #572]	; (8004938 <UART_SetConfig+0x56c>)
 80046fa:	61fb      	str	r3, [r7, #28]
        break;
 80046fc:	e00d      	b.n	800471a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046fe:	f7fe ffad 	bl	800365c <HAL_RCC_GetSysClockFreq>
 8004702:	61f8      	str	r0, [r7, #28]
        break;
 8004704:	e009      	b.n	800471a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004706:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800470a:	61fb      	str	r3, [r7, #28]
        break;
 800470c:	e005      	b.n	800471a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800470e:	2300      	movs	r3, #0
 8004710:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004718:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	2b00      	cmp	r3, #0
 800471e:	f000 80fb 	beq.w	8004918 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	685a      	ldr	r2, [r3, #4]
 8004726:	4613      	mov	r3, r2
 8004728:	005b      	lsls	r3, r3, #1
 800472a:	4413      	add	r3, r2
 800472c:	69fa      	ldr	r2, [r7, #28]
 800472e:	429a      	cmp	r2, r3
 8004730:	d305      	bcc.n	800473e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004738:	69fa      	ldr	r2, [r7, #28]
 800473a:	429a      	cmp	r2, r3
 800473c:	d903      	bls.n	8004746 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004744:	e0e8      	b.n	8004918 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	2200      	movs	r2, #0
 800474a:	461c      	mov	r4, r3
 800474c:	4615      	mov	r5, r2
 800474e:	f04f 0200 	mov.w	r2, #0
 8004752:	f04f 0300 	mov.w	r3, #0
 8004756:	022b      	lsls	r3, r5, #8
 8004758:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800475c:	0222      	lsls	r2, r4, #8
 800475e:	68f9      	ldr	r1, [r7, #12]
 8004760:	6849      	ldr	r1, [r1, #4]
 8004762:	0849      	lsrs	r1, r1, #1
 8004764:	2000      	movs	r0, #0
 8004766:	4688      	mov	r8, r1
 8004768:	4681      	mov	r9, r0
 800476a:	eb12 0a08 	adds.w	sl, r2, r8
 800476e:	eb43 0b09 	adc.w	fp, r3, r9
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	603b      	str	r3, [r7, #0]
 800477a:	607a      	str	r2, [r7, #4]
 800477c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004780:	4650      	mov	r0, sl
 8004782:	4659      	mov	r1, fp
 8004784:	f7fb fdc4 	bl	8000310 <__aeabi_uldivmod>
 8004788:	4602      	mov	r2, r0
 800478a:	460b      	mov	r3, r1
 800478c:	4613      	mov	r3, r2
 800478e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004790:	69bb      	ldr	r3, [r7, #24]
 8004792:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004796:	d308      	bcc.n	80047aa <UART_SetConfig+0x3de>
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800479e:	d204      	bcs.n	80047aa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	69ba      	ldr	r2, [r7, #24]
 80047a6:	60da      	str	r2, [r3, #12]
 80047a8:	e0b6      	b.n	8004918 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80047b0:	e0b2      	b.n	8004918 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	69db      	ldr	r3, [r3, #28]
 80047b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047ba:	d15e      	bne.n	800487a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80047bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80047c0:	2b08      	cmp	r3, #8
 80047c2:	d828      	bhi.n	8004816 <UART_SetConfig+0x44a>
 80047c4:	a201      	add	r2, pc, #4	; (adr r2, 80047cc <UART_SetConfig+0x400>)
 80047c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ca:	bf00      	nop
 80047cc:	080047f1 	.word	0x080047f1
 80047d0:	080047f9 	.word	0x080047f9
 80047d4:	08004801 	.word	0x08004801
 80047d8:	08004817 	.word	0x08004817
 80047dc:	08004807 	.word	0x08004807
 80047e0:	08004817 	.word	0x08004817
 80047e4:	08004817 	.word	0x08004817
 80047e8:	08004817 	.word	0x08004817
 80047ec:	0800480f 	.word	0x0800480f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047f0:	f7fe ffcc 	bl	800378c <HAL_RCC_GetPCLK1Freq>
 80047f4:	61f8      	str	r0, [r7, #28]
        break;
 80047f6:	e014      	b.n	8004822 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047f8:	f7fe ffde 	bl	80037b8 <HAL_RCC_GetPCLK2Freq>
 80047fc:	61f8      	str	r0, [r7, #28]
        break;
 80047fe:	e010      	b.n	8004822 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004800:	4b4d      	ldr	r3, [pc, #308]	; (8004938 <UART_SetConfig+0x56c>)
 8004802:	61fb      	str	r3, [r7, #28]
        break;
 8004804:	e00d      	b.n	8004822 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004806:	f7fe ff29 	bl	800365c <HAL_RCC_GetSysClockFreq>
 800480a:	61f8      	str	r0, [r7, #28]
        break;
 800480c:	e009      	b.n	8004822 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800480e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004812:	61fb      	str	r3, [r7, #28]
        break;
 8004814:	e005      	b.n	8004822 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004816:	2300      	movs	r3, #0
 8004818:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004820:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d077      	beq.n	8004918 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	005a      	lsls	r2, r3, #1
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	085b      	lsrs	r3, r3, #1
 8004832:	441a      	add	r2, r3
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	fbb2 f3f3 	udiv	r3, r2, r3
 800483c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800483e:	69bb      	ldr	r3, [r7, #24]
 8004840:	2b0f      	cmp	r3, #15
 8004842:	d916      	bls.n	8004872 <UART_SetConfig+0x4a6>
 8004844:	69bb      	ldr	r3, [r7, #24]
 8004846:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800484a:	d212      	bcs.n	8004872 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	b29b      	uxth	r3, r3
 8004850:	f023 030f 	bic.w	r3, r3, #15
 8004854:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	085b      	lsrs	r3, r3, #1
 800485a:	b29b      	uxth	r3, r3
 800485c:	f003 0307 	and.w	r3, r3, #7
 8004860:	b29a      	uxth	r2, r3
 8004862:	8afb      	ldrh	r3, [r7, #22]
 8004864:	4313      	orrs	r3, r2
 8004866:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	8afa      	ldrh	r2, [r7, #22]
 800486e:	60da      	str	r2, [r3, #12]
 8004870:	e052      	b.n	8004918 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004878:	e04e      	b.n	8004918 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800487a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800487e:	2b08      	cmp	r3, #8
 8004880:	d827      	bhi.n	80048d2 <UART_SetConfig+0x506>
 8004882:	a201      	add	r2, pc, #4	; (adr r2, 8004888 <UART_SetConfig+0x4bc>)
 8004884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004888:	080048ad 	.word	0x080048ad
 800488c:	080048b5 	.word	0x080048b5
 8004890:	080048bd 	.word	0x080048bd
 8004894:	080048d3 	.word	0x080048d3
 8004898:	080048c3 	.word	0x080048c3
 800489c:	080048d3 	.word	0x080048d3
 80048a0:	080048d3 	.word	0x080048d3
 80048a4:	080048d3 	.word	0x080048d3
 80048a8:	080048cb 	.word	0x080048cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048ac:	f7fe ff6e 	bl	800378c <HAL_RCC_GetPCLK1Freq>
 80048b0:	61f8      	str	r0, [r7, #28]
        break;
 80048b2:	e014      	b.n	80048de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048b4:	f7fe ff80 	bl	80037b8 <HAL_RCC_GetPCLK2Freq>
 80048b8:	61f8      	str	r0, [r7, #28]
        break;
 80048ba:	e010      	b.n	80048de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048bc:	4b1e      	ldr	r3, [pc, #120]	; (8004938 <UART_SetConfig+0x56c>)
 80048be:	61fb      	str	r3, [r7, #28]
        break;
 80048c0:	e00d      	b.n	80048de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048c2:	f7fe fecb 	bl	800365c <HAL_RCC_GetSysClockFreq>
 80048c6:	61f8      	str	r0, [r7, #28]
        break;
 80048c8:	e009      	b.n	80048de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048ce:	61fb      	str	r3, [r7, #28]
        break;
 80048d0:	e005      	b.n	80048de <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80048d2:	2300      	movs	r3, #0
 80048d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80048dc:	bf00      	nop
    }

    if (pclk != 0U)
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d019      	beq.n	8004918 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	085a      	lsrs	r2, r3, #1
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	441a      	add	r2, r3
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048f6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	2b0f      	cmp	r3, #15
 80048fc:	d909      	bls.n	8004912 <UART_SetConfig+0x546>
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004904:	d205      	bcs.n	8004912 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	b29a      	uxth	r2, r3
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	60da      	str	r2, [r3, #12]
 8004910:	e002      	b.n	8004918 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2200      	movs	r2, #0
 800491c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2200      	movs	r2, #0
 8004922:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004924:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004928:	4618      	mov	r0, r3
 800492a:	3728      	adds	r7, #40	; 0x28
 800492c:	46bd      	mov	sp, r7
 800492e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004932:	bf00      	nop
 8004934:	40008000 	.word	0x40008000
 8004938:	00f42400 	.word	0x00f42400

0800493c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004948:	f003 0308 	and.w	r3, r3, #8
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00a      	beq.n	8004966 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	430a      	orrs	r2, r1
 8004964:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496a:	f003 0301 	and.w	r3, r3, #1
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00a      	beq.n	8004988 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	430a      	orrs	r2, r1
 8004986:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498c:	f003 0302 	and.w	r3, r3, #2
 8004990:	2b00      	cmp	r3, #0
 8004992:	d00a      	beq.n	80049aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	430a      	orrs	r2, r1
 80049a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ae:	f003 0304 	and.w	r3, r3, #4
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00a      	beq.n	80049cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	430a      	orrs	r2, r1
 80049ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d0:	f003 0310 	and.w	r3, r3, #16
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d00a      	beq.n	80049ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	430a      	orrs	r2, r1
 80049ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f2:	f003 0320 	and.w	r3, r3, #32
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d00a      	beq.n	8004a10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	430a      	orrs	r2, r1
 8004a0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d01a      	beq.n	8004a52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	430a      	orrs	r2, r1
 8004a30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a3a:	d10a      	bne.n	8004a52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00a      	beq.n	8004a74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	430a      	orrs	r2, r1
 8004a72:	605a      	str	r2, [r3, #4]
  }
}
 8004a74:	bf00      	nop
 8004a76:	370c      	adds	r7, #12
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b098      	sub	sp, #96	; 0x60
 8004a84:	af02      	add	r7, sp, #8
 8004a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a90:	f7fc fe1e 	bl	80016d0 <HAL_GetTick>
 8004a94:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0308 	and.w	r3, r3, #8
 8004aa0:	2b08      	cmp	r3, #8
 8004aa2:	d12e      	bne.n	8004b02 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004aa4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004aa8:	9300      	str	r3, [sp, #0]
 8004aaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004aac:	2200      	movs	r2, #0
 8004aae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 f88c 	bl	8004bd0 <UART_WaitOnFlagUntilTimeout>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d021      	beq.n	8004b02 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ac6:	e853 3f00 	ldrex	r3, [r3]
 8004aca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ace:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ad2:	653b      	str	r3, [r7, #80]	; 0x50
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	461a      	mov	r2, r3
 8004ada:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004adc:	647b      	str	r3, [r7, #68]	; 0x44
 8004ade:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004ae2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ae4:	e841 2300 	strex	r3, r2, [r1]
 8004ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004aea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d1e6      	bne.n	8004abe <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2220      	movs	r2, #32
 8004af4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	e062      	b.n	8004bc8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 0304 	and.w	r3, r3, #4
 8004b0c:	2b04      	cmp	r3, #4
 8004b0e:	d149      	bne.n	8004ba4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b14:	9300      	str	r3, [sp, #0]
 8004b16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 f856 	bl	8004bd0 <UART_WaitOnFlagUntilTimeout>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d03c      	beq.n	8004ba4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b32:	e853 3f00 	ldrex	r3, [r3]
 8004b36:	623b      	str	r3, [r7, #32]
   return(result);
 8004b38:	6a3b      	ldr	r3, [r7, #32]
 8004b3a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	461a      	mov	r2, r3
 8004b46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b48:	633b      	str	r3, [r7, #48]	; 0x30
 8004b4a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b4c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b50:	e841 2300 	strex	r3, r2, [r1]
 8004b54:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d1e6      	bne.n	8004b2a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	3308      	adds	r3, #8
 8004b62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	e853 3f00 	ldrex	r3, [r3]
 8004b6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f023 0301 	bic.w	r3, r3, #1
 8004b72:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	3308      	adds	r3, #8
 8004b7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b7c:	61fa      	str	r2, [r7, #28]
 8004b7e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b80:	69b9      	ldr	r1, [r7, #24]
 8004b82:	69fa      	ldr	r2, [r7, #28]
 8004b84:	e841 2300 	strex	r3, r2, [r1]
 8004b88:	617b      	str	r3, [r7, #20]
   return(result);
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d1e5      	bne.n	8004b5c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2220      	movs	r2, #32
 8004b94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	e011      	b.n	8004bc8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2220      	movs	r2, #32
 8004ba8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2220      	movs	r2, #32
 8004bae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004bc6:	2300      	movs	r3, #0
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3758      	adds	r7, #88	; 0x58
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	603b      	str	r3, [r7, #0]
 8004bdc:	4613      	mov	r3, r2
 8004bde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004be0:	e049      	b.n	8004c76 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004be2:	69bb      	ldr	r3, [r7, #24]
 8004be4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004be8:	d045      	beq.n	8004c76 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bea:	f7fc fd71 	bl	80016d0 <HAL_GetTick>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	1ad3      	subs	r3, r2, r3
 8004bf4:	69ba      	ldr	r2, [r7, #24]
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d302      	bcc.n	8004c00 <UART_WaitOnFlagUntilTimeout+0x30>
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d101      	bne.n	8004c04 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c00:	2303      	movs	r3, #3
 8004c02:	e048      	b.n	8004c96 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0304 	and.w	r3, r3, #4
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d031      	beq.n	8004c76 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	69db      	ldr	r3, [r3, #28]
 8004c18:	f003 0308 	and.w	r3, r3, #8
 8004c1c:	2b08      	cmp	r3, #8
 8004c1e:	d110      	bne.n	8004c42 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2208      	movs	r2, #8
 8004c26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c28:	68f8      	ldr	r0, [r7, #12]
 8004c2a:	f000 f838 	bl	8004c9e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2208      	movs	r2, #8
 8004c32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e029      	b.n	8004c96 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	69db      	ldr	r3, [r3, #28]
 8004c48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c50:	d111      	bne.n	8004c76 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c5a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c5c:	68f8      	ldr	r0, [r7, #12]
 8004c5e:	f000 f81e 	bl	8004c9e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2220      	movs	r2, #32
 8004c66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	e00f      	b.n	8004c96 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	69da      	ldr	r2, [r3, #28]
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	4013      	ands	r3, r2
 8004c80:	68ba      	ldr	r2, [r7, #8]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	bf0c      	ite	eq
 8004c86:	2301      	moveq	r3, #1
 8004c88:	2300      	movne	r3, #0
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	79fb      	ldrb	r3, [r7, #7]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d0a6      	beq.n	8004be2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3710      	adds	r7, #16
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}

08004c9e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c9e:	b480      	push	{r7}
 8004ca0:	b095      	sub	sp, #84	; 0x54
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cae:	e853 3f00 	ldrex	r3, [r3]
 8004cb2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004cba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cc4:	643b      	str	r3, [r7, #64]	; 0x40
 8004cc6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004cca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ccc:	e841 2300 	strex	r3, r2, [r1]
 8004cd0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d1e6      	bne.n	8004ca6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	3308      	adds	r3, #8
 8004cde:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce0:	6a3b      	ldr	r3, [r7, #32]
 8004ce2:	e853 3f00 	ldrex	r3, [r3]
 8004ce6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	f023 0301 	bic.w	r3, r3, #1
 8004cee:	64bb      	str	r3, [r7, #72]	; 0x48
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	3308      	adds	r3, #8
 8004cf6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cf8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004cfa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cfc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004cfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d00:	e841 2300 	strex	r3, r2, [r1]
 8004d04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d1e5      	bne.n	8004cd8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d118      	bne.n	8004d46 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	e853 3f00 	ldrex	r3, [r3]
 8004d20:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	f023 0310 	bic.w	r3, r3, #16
 8004d28:	647b      	str	r3, [r7, #68]	; 0x44
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	461a      	mov	r2, r3
 8004d30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d32:	61bb      	str	r3, [r7, #24]
 8004d34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d36:	6979      	ldr	r1, [r7, #20]
 8004d38:	69ba      	ldr	r2, [r7, #24]
 8004d3a:	e841 2300 	strex	r3, r2, [r1]
 8004d3e:	613b      	str	r3, [r7, #16]
   return(result);
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d1e6      	bne.n	8004d14 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2220      	movs	r2, #32
 8004d4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004d5a:	bf00      	nop
 8004d5c:	3754      	adds	r7, #84	; 0x54
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr
	...

08004d68 <siprintf>:
 8004d68:	b40e      	push	{r1, r2, r3}
 8004d6a:	b500      	push	{lr}
 8004d6c:	b09c      	sub	sp, #112	; 0x70
 8004d6e:	ab1d      	add	r3, sp, #116	; 0x74
 8004d70:	9002      	str	r0, [sp, #8]
 8004d72:	9006      	str	r0, [sp, #24]
 8004d74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004d78:	4809      	ldr	r0, [pc, #36]	; (8004da0 <siprintf+0x38>)
 8004d7a:	9107      	str	r1, [sp, #28]
 8004d7c:	9104      	str	r1, [sp, #16]
 8004d7e:	4909      	ldr	r1, [pc, #36]	; (8004da4 <siprintf+0x3c>)
 8004d80:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d84:	9105      	str	r1, [sp, #20]
 8004d86:	6800      	ldr	r0, [r0, #0]
 8004d88:	9301      	str	r3, [sp, #4]
 8004d8a:	a902      	add	r1, sp, #8
 8004d8c:	f000 f89a 	bl	8004ec4 <_svfiprintf_r>
 8004d90:	9b02      	ldr	r3, [sp, #8]
 8004d92:	2200      	movs	r2, #0
 8004d94:	701a      	strb	r2, [r3, #0]
 8004d96:	b01c      	add	sp, #112	; 0x70
 8004d98:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d9c:	b003      	add	sp, #12
 8004d9e:	4770      	bx	lr
 8004da0:	20000058 	.word	0x20000058
 8004da4:	ffff0208 	.word	0xffff0208

08004da8 <memset>:
 8004da8:	4402      	add	r2, r0
 8004daa:	4603      	mov	r3, r0
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d100      	bne.n	8004db2 <memset+0xa>
 8004db0:	4770      	bx	lr
 8004db2:	f803 1b01 	strb.w	r1, [r3], #1
 8004db6:	e7f9      	b.n	8004dac <memset+0x4>

08004db8 <__errno>:
 8004db8:	4b01      	ldr	r3, [pc, #4]	; (8004dc0 <__errno+0x8>)
 8004dba:	6818      	ldr	r0, [r3, #0]
 8004dbc:	4770      	bx	lr
 8004dbe:	bf00      	nop
 8004dc0:	20000058 	.word	0x20000058

08004dc4 <__libc_init_array>:
 8004dc4:	b570      	push	{r4, r5, r6, lr}
 8004dc6:	4d0d      	ldr	r5, [pc, #52]	; (8004dfc <__libc_init_array+0x38>)
 8004dc8:	4c0d      	ldr	r4, [pc, #52]	; (8004e00 <__libc_init_array+0x3c>)
 8004dca:	1b64      	subs	r4, r4, r5
 8004dcc:	10a4      	asrs	r4, r4, #2
 8004dce:	2600      	movs	r6, #0
 8004dd0:	42a6      	cmp	r6, r4
 8004dd2:	d109      	bne.n	8004de8 <__libc_init_array+0x24>
 8004dd4:	4d0b      	ldr	r5, [pc, #44]	; (8004e04 <__libc_init_array+0x40>)
 8004dd6:	4c0c      	ldr	r4, [pc, #48]	; (8004e08 <__libc_init_array+0x44>)
 8004dd8:	f000 fc6a 	bl	80056b0 <_init>
 8004ddc:	1b64      	subs	r4, r4, r5
 8004dde:	10a4      	asrs	r4, r4, #2
 8004de0:	2600      	movs	r6, #0
 8004de2:	42a6      	cmp	r6, r4
 8004de4:	d105      	bne.n	8004df2 <__libc_init_array+0x2e>
 8004de6:	bd70      	pop	{r4, r5, r6, pc}
 8004de8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dec:	4798      	blx	r3
 8004dee:	3601      	adds	r6, #1
 8004df0:	e7ee      	b.n	8004dd0 <__libc_init_array+0xc>
 8004df2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004df6:	4798      	blx	r3
 8004df8:	3601      	adds	r6, #1
 8004dfa:	e7f2      	b.n	8004de2 <__libc_init_array+0x1e>
 8004dfc:	08005758 	.word	0x08005758
 8004e00:	08005758 	.word	0x08005758
 8004e04:	08005758 	.word	0x08005758
 8004e08:	0800575c 	.word	0x0800575c

08004e0c <__retarget_lock_acquire_recursive>:
 8004e0c:	4770      	bx	lr

08004e0e <__retarget_lock_release_recursive>:
 8004e0e:	4770      	bx	lr

08004e10 <__ssputs_r>:
 8004e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e14:	688e      	ldr	r6, [r1, #8]
 8004e16:	461f      	mov	r7, r3
 8004e18:	42be      	cmp	r6, r7
 8004e1a:	680b      	ldr	r3, [r1, #0]
 8004e1c:	4682      	mov	sl, r0
 8004e1e:	460c      	mov	r4, r1
 8004e20:	4690      	mov	r8, r2
 8004e22:	d82c      	bhi.n	8004e7e <__ssputs_r+0x6e>
 8004e24:	898a      	ldrh	r2, [r1, #12]
 8004e26:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004e2a:	d026      	beq.n	8004e7a <__ssputs_r+0x6a>
 8004e2c:	6965      	ldr	r5, [r4, #20]
 8004e2e:	6909      	ldr	r1, [r1, #16]
 8004e30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004e34:	eba3 0901 	sub.w	r9, r3, r1
 8004e38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004e3c:	1c7b      	adds	r3, r7, #1
 8004e3e:	444b      	add	r3, r9
 8004e40:	106d      	asrs	r5, r5, #1
 8004e42:	429d      	cmp	r5, r3
 8004e44:	bf38      	it	cc
 8004e46:	461d      	movcc	r5, r3
 8004e48:	0553      	lsls	r3, r2, #21
 8004e4a:	d527      	bpl.n	8004e9c <__ssputs_r+0x8c>
 8004e4c:	4629      	mov	r1, r5
 8004e4e:	f000 f957 	bl	8005100 <_malloc_r>
 8004e52:	4606      	mov	r6, r0
 8004e54:	b360      	cbz	r0, 8004eb0 <__ssputs_r+0xa0>
 8004e56:	6921      	ldr	r1, [r4, #16]
 8004e58:	464a      	mov	r2, r9
 8004e5a:	f000 fbc7 	bl	80055ec <memcpy>
 8004e5e:	89a3      	ldrh	r3, [r4, #12]
 8004e60:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004e64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e68:	81a3      	strh	r3, [r4, #12]
 8004e6a:	6126      	str	r6, [r4, #16]
 8004e6c:	6165      	str	r5, [r4, #20]
 8004e6e:	444e      	add	r6, r9
 8004e70:	eba5 0509 	sub.w	r5, r5, r9
 8004e74:	6026      	str	r6, [r4, #0]
 8004e76:	60a5      	str	r5, [r4, #8]
 8004e78:	463e      	mov	r6, r7
 8004e7a:	42be      	cmp	r6, r7
 8004e7c:	d900      	bls.n	8004e80 <__ssputs_r+0x70>
 8004e7e:	463e      	mov	r6, r7
 8004e80:	6820      	ldr	r0, [r4, #0]
 8004e82:	4632      	mov	r2, r6
 8004e84:	4641      	mov	r1, r8
 8004e86:	f000 fb86 	bl	8005596 <memmove>
 8004e8a:	68a3      	ldr	r3, [r4, #8]
 8004e8c:	1b9b      	subs	r3, r3, r6
 8004e8e:	60a3      	str	r3, [r4, #8]
 8004e90:	6823      	ldr	r3, [r4, #0]
 8004e92:	4433      	add	r3, r6
 8004e94:	6023      	str	r3, [r4, #0]
 8004e96:	2000      	movs	r0, #0
 8004e98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e9c:	462a      	mov	r2, r5
 8004e9e:	f000 fb4b 	bl	8005538 <_realloc_r>
 8004ea2:	4606      	mov	r6, r0
 8004ea4:	2800      	cmp	r0, #0
 8004ea6:	d1e0      	bne.n	8004e6a <__ssputs_r+0x5a>
 8004ea8:	6921      	ldr	r1, [r4, #16]
 8004eaa:	4650      	mov	r0, sl
 8004eac:	f000 fbac 	bl	8005608 <_free_r>
 8004eb0:	230c      	movs	r3, #12
 8004eb2:	f8ca 3000 	str.w	r3, [sl]
 8004eb6:	89a3      	ldrh	r3, [r4, #12]
 8004eb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ebc:	81a3      	strh	r3, [r4, #12]
 8004ebe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ec2:	e7e9      	b.n	8004e98 <__ssputs_r+0x88>

08004ec4 <_svfiprintf_r>:
 8004ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ec8:	4698      	mov	r8, r3
 8004eca:	898b      	ldrh	r3, [r1, #12]
 8004ecc:	061b      	lsls	r3, r3, #24
 8004ece:	b09d      	sub	sp, #116	; 0x74
 8004ed0:	4607      	mov	r7, r0
 8004ed2:	460d      	mov	r5, r1
 8004ed4:	4614      	mov	r4, r2
 8004ed6:	d50e      	bpl.n	8004ef6 <_svfiprintf_r+0x32>
 8004ed8:	690b      	ldr	r3, [r1, #16]
 8004eda:	b963      	cbnz	r3, 8004ef6 <_svfiprintf_r+0x32>
 8004edc:	2140      	movs	r1, #64	; 0x40
 8004ede:	f000 f90f 	bl	8005100 <_malloc_r>
 8004ee2:	6028      	str	r0, [r5, #0]
 8004ee4:	6128      	str	r0, [r5, #16]
 8004ee6:	b920      	cbnz	r0, 8004ef2 <_svfiprintf_r+0x2e>
 8004ee8:	230c      	movs	r3, #12
 8004eea:	603b      	str	r3, [r7, #0]
 8004eec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ef0:	e0d0      	b.n	8005094 <_svfiprintf_r+0x1d0>
 8004ef2:	2340      	movs	r3, #64	; 0x40
 8004ef4:	616b      	str	r3, [r5, #20]
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	9309      	str	r3, [sp, #36]	; 0x24
 8004efa:	2320      	movs	r3, #32
 8004efc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f00:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f04:	2330      	movs	r3, #48	; 0x30
 8004f06:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80050ac <_svfiprintf_r+0x1e8>
 8004f0a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f0e:	f04f 0901 	mov.w	r9, #1
 8004f12:	4623      	mov	r3, r4
 8004f14:	469a      	mov	sl, r3
 8004f16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f1a:	b10a      	cbz	r2, 8004f20 <_svfiprintf_r+0x5c>
 8004f1c:	2a25      	cmp	r2, #37	; 0x25
 8004f1e:	d1f9      	bne.n	8004f14 <_svfiprintf_r+0x50>
 8004f20:	ebba 0b04 	subs.w	fp, sl, r4
 8004f24:	d00b      	beq.n	8004f3e <_svfiprintf_r+0x7a>
 8004f26:	465b      	mov	r3, fp
 8004f28:	4622      	mov	r2, r4
 8004f2a:	4629      	mov	r1, r5
 8004f2c:	4638      	mov	r0, r7
 8004f2e:	f7ff ff6f 	bl	8004e10 <__ssputs_r>
 8004f32:	3001      	adds	r0, #1
 8004f34:	f000 80a9 	beq.w	800508a <_svfiprintf_r+0x1c6>
 8004f38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f3a:	445a      	add	r2, fp
 8004f3c:	9209      	str	r2, [sp, #36]	; 0x24
 8004f3e:	f89a 3000 	ldrb.w	r3, [sl]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	f000 80a1 	beq.w	800508a <_svfiprintf_r+0x1c6>
 8004f48:	2300      	movs	r3, #0
 8004f4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f52:	f10a 0a01 	add.w	sl, sl, #1
 8004f56:	9304      	str	r3, [sp, #16]
 8004f58:	9307      	str	r3, [sp, #28]
 8004f5a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f5e:	931a      	str	r3, [sp, #104]	; 0x68
 8004f60:	4654      	mov	r4, sl
 8004f62:	2205      	movs	r2, #5
 8004f64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f68:	4850      	ldr	r0, [pc, #320]	; (80050ac <_svfiprintf_r+0x1e8>)
 8004f6a:	f7fb f931 	bl	80001d0 <memchr>
 8004f6e:	9a04      	ldr	r2, [sp, #16]
 8004f70:	b9d8      	cbnz	r0, 8004faa <_svfiprintf_r+0xe6>
 8004f72:	06d0      	lsls	r0, r2, #27
 8004f74:	bf44      	itt	mi
 8004f76:	2320      	movmi	r3, #32
 8004f78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f7c:	0711      	lsls	r1, r2, #28
 8004f7e:	bf44      	itt	mi
 8004f80:	232b      	movmi	r3, #43	; 0x2b
 8004f82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f86:	f89a 3000 	ldrb.w	r3, [sl]
 8004f8a:	2b2a      	cmp	r3, #42	; 0x2a
 8004f8c:	d015      	beq.n	8004fba <_svfiprintf_r+0xf6>
 8004f8e:	9a07      	ldr	r2, [sp, #28]
 8004f90:	4654      	mov	r4, sl
 8004f92:	2000      	movs	r0, #0
 8004f94:	f04f 0c0a 	mov.w	ip, #10
 8004f98:	4621      	mov	r1, r4
 8004f9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f9e:	3b30      	subs	r3, #48	; 0x30
 8004fa0:	2b09      	cmp	r3, #9
 8004fa2:	d94d      	bls.n	8005040 <_svfiprintf_r+0x17c>
 8004fa4:	b1b0      	cbz	r0, 8004fd4 <_svfiprintf_r+0x110>
 8004fa6:	9207      	str	r2, [sp, #28]
 8004fa8:	e014      	b.n	8004fd4 <_svfiprintf_r+0x110>
 8004faa:	eba0 0308 	sub.w	r3, r0, r8
 8004fae:	fa09 f303 	lsl.w	r3, r9, r3
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	9304      	str	r3, [sp, #16]
 8004fb6:	46a2      	mov	sl, r4
 8004fb8:	e7d2      	b.n	8004f60 <_svfiprintf_r+0x9c>
 8004fba:	9b03      	ldr	r3, [sp, #12]
 8004fbc:	1d19      	adds	r1, r3, #4
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	9103      	str	r1, [sp, #12]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	bfbb      	ittet	lt
 8004fc6:	425b      	neglt	r3, r3
 8004fc8:	f042 0202 	orrlt.w	r2, r2, #2
 8004fcc:	9307      	strge	r3, [sp, #28]
 8004fce:	9307      	strlt	r3, [sp, #28]
 8004fd0:	bfb8      	it	lt
 8004fd2:	9204      	strlt	r2, [sp, #16]
 8004fd4:	7823      	ldrb	r3, [r4, #0]
 8004fd6:	2b2e      	cmp	r3, #46	; 0x2e
 8004fd8:	d10c      	bne.n	8004ff4 <_svfiprintf_r+0x130>
 8004fda:	7863      	ldrb	r3, [r4, #1]
 8004fdc:	2b2a      	cmp	r3, #42	; 0x2a
 8004fde:	d134      	bne.n	800504a <_svfiprintf_r+0x186>
 8004fe0:	9b03      	ldr	r3, [sp, #12]
 8004fe2:	1d1a      	adds	r2, r3, #4
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	9203      	str	r2, [sp, #12]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	bfb8      	it	lt
 8004fec:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004ff0:	3402      	adds	r4, #2
 8004ff2:	9305      	str	r3, [sp, #20]
 8004ff4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80050bc <_svfiprintf_r+0x1f8>
 8004ff8:	7821      	ldrb	r1, [r4, #0]
 8004ffa:	2203      	movs	r2, #3
 8004ffc:	4650      	mov	r0, sl
 8004ffe:	f7fb f8e7 	bl	80001d0 <memchr>
 8005002:	b138      	cbz	r0, 8005014 <_svfiprintf_r+0x150>
 8005004:	9b04      	ldr	r3, [sp, #16]
 8005006:	eba0 000a 	sub.w	r0, r0, sl
 800500a:	2240      	movs	r2, #64	; 0x40
 800500c:	4082      	lsls	r2, r0
 800500e:	4313      	orrs	r3, r2
 8005010:	3401      	adds	r4, #1
 8005012:	9304      	str	r3, [sp, #16]
 8005014:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005018:	4825      	ldr	r0, [pc, #148]	; (80050b0 <_svfiprintf_r+0x1ec>)
 800501a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800501e:	2206      	movs	r2, #6
 8005020:	f7fb f8d6 	bl	80001d0 <memchr>
 8005024:	2800      	cmp	r0, #0
 8005026:	d038      	beq.n	800509a <_svfiprintf_r+0x1d6>
 8005028:	4b22      	ldr	r3, [pc, #136]	; (80050b4 <_svfiprintf_r+0x1f0>)
 800502a:	bb1b      	cbnz	r3, 8005074 <_svfiprintf_r+0x1b0>
 800502c:	9b03      	ldr	r3, [sp, #12]
 800502e:	3307      	adds	r3, #7
 8005030:	f023 0307 	bic.w	r3, r3, #7
 8005034:	3308      	adds	r3, #8
 8005036:	9303      	str	r3, [sp, #12]
 8005038:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800503a:	4433      	add	r3, r6
 800503c:	9309      	str	r3, [sp, #36]	; 0x24
 800503e:	e768      	b.n	8004f12 <_svfiprintf_r+0x4e>
 8005040:	fb0c 3202 	mla	r2, ip, r2, r3
 8005044:	460c      	mov	r4, r1
 8005046:	2001      	movs	r0, #1
 8005048:	e7a6      	b.n	8004f98 <_svfiprintf_r+0xd4>
 800504a:	2300      	movs	r3, #0
 800504c:	3401      	adds	r4, #1
 800504e:	9305      	str	r3, [sp, #20]
 8005050:	4619      	mov	r1, r3
 8005052:	f04f 0c0a 	mov.w	ip, #10
 8005056:	4620      	mov	r0, r4
 8005058:	f810 2b01 	ldrb.w	r2, [r0], #1
 800505c:	3a30      	subs	r2, #48	; 0x30
 800505e:	2a09      	cmp	r2, #9
 8005060:	d903      	bls.n	800506a <_svfiprintf_r+0x1a6>
 8005062:	2b00      	cmp	r3, #0
 8005064:	d0c6      	beq.n	8004ff4 <_svfiprintf_r+0x130>
 8005066:	9105      	str	r1, [sp, #20]
 8005068:	e7c4      	b.n	8004ff4 <_svfiprintf_r+0x130>
 800506a:	fb0c 2101 	mla	r1, ip, r1, r2
 800506e:	4604      	mov	r4, r0
 8005070:	2301      	movs	r3, #1
 8005072:	e7f0      	b.n	8005056 <_svfiprintf_r+0x192>
 8005074:	ab03      	add	r3, sp, #12
 8005076:	9300      	str	r3, [sp, #0]
 8005078:	462a      	mov	r2, r5
 800507a:	4b0f      	ldr	r3, [pc, #60]	; (80050b8 <_svfiprintf_r+0x1f4>)
 800507c:	a904      	add	r1, sp, #16
 800507e:	4638      	mov	r0, r7
 8005080:	f3af 8000 	nop.w
 8005084:	1c42      	adds	r2, r0, #1
 8005086:	4606      	mov	r6, r0
 8005088:	d1d6      	bne.n	8005038 <_svfiprintf_r+0x174>
 800508a:	89ab      	ldrh	r3, [r5, #12]
 800508c:	065b      	lsls	r3, r3, #25
 800508e:	f53f af2d 	bmi.w	8004eec <_svfiprintf_r+0x28>
 8005092:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005094:	b01d      	add	sp, #116	; 0x74
 8005096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800509a:	ab03      	add	r3, sp, #12
 800509c:	9300      	str	r3, [sp, #0]
 800509e:	462a      	mov	r2, r5
 80050a0:	4b05      	ldr	r3, [pc, #20]	; (80050b8 <_svfiprintf_r+0x1f4>)
 80050a2:	a904      	add	r1, sp, #16
 80050a4:	4638      	mov	r0, r7
 80050a6:	f000 f919 	bl	80052dc <_printf_i>
 80050aa:	e7eb      	b.n	8005084 <_svfiprintf_r+0x1c0>
 80050ac:	0800571c 	.word	0x0800571c
 80050b0:	08005726 	.word	0x08005726
 80050b4:	00000000 	.word	0x00000000
 80050b8:	08004e11 	.word	0x08004e11
 80050bc:	08005722 	.word	0x08005722

080050c0 <sbrk_aligned>:
 80050c0:	b570      	push	{r4, r5, r6, lr}
 80050c2:	4e0e      	ldr	r6, [pc, #56]	; (80050fc <sbrk_aligned+0x3c>)
 80050c4:	460c      	mov	r4, r1
 80050c6:	6831      	ldr	r1, [r6, #0]
 80050c8:	4605      	mov	r5, r0
 80050ca:	b911      	cbnz	r1, 80050d2 <sbrk_aligned+0x12>
 80050cc:	f000 fa7e 	bl	80055cc <_sbrk_r>
 80050d0:	6030      	str	r0, [r6, #0]
 80050d2:	4621      	mov	r1, r4
 80050d4:	4628      	mov	r0, r5
 80050d6:	f000 fa79 	bl	80055cc <_sbrk_r>
 80050da:	1c43      	adds	r3, r0, #1
 80050dc:	d00a      	beq.n	80050f4 <sbrk_aligned+0x34>
 80050de:	1cc4      	adds	r4, r0, #3
 80050e0:	f024 0403 	bic.w	r4, r4, #3
 80050e4:	42a0      	cmp	r0, r4
 80050e6:	d007      	beq.n	80050f8 <sbrk_aligned+0x38>
 80050e8:	1a21      	subs	r1, r4, r0
 80050ea:	4628      	mov	r0, r5
 80050ec:	f000 fa6e 	bl	80055cc <_sbrk_r>
 80050f0:	3001      	adds	r0, #1
 80050f2:	d101      	bne.n	80050f8 <sbrk_aligned+0x38>
 80050f4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80050f8:	4620      	mov	r0, r4
 80050fa:	bd70      	pop	{r4, r5, r6, pc}
 80050fc:	200002e4 	.word	0x200002e4

08005100 <_malloc_r>:
 8005100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005104:	1ccd      	adds	r5, r1, #3
 8005106:	f025 0503 	bic.w	r5, r5, #3
 800510a:	3508      	adds	r5, #8
 800510c:	2d0c      	cmp	r5, #12
 800510e:	bf38      	it	cc
 8005110:	250c      	movcc	r5, #12
 8005112:	2d00      	cmp	r5, #0
 8005114:	4607      	mov	r7, r0
 8005116:	db01      	blt.n	800511c <_malloc_r+0x1c>
 8005118:	42a9      	cmp	r1, r5
 800511a:	d905      	bls.n	8005128 <_malloc_r+0x28>
 800511c:	230c      	movs	r3, #12
 800511e:	603b      	str	r3, [r7, #0]
 8005120:	2600      	movs	r6, #0
 8005122:	4630      	mov	r0, r6
 8005124:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005128:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80051fc <_malloc_r+0xfc>
 800512c:	f000 f9f8 	bl	8005520 <__malloc_lock>
 8005130:	f8d8 3000 	ldr.w	r3, [r8]
 8005134:	461c      	mov	r4, r3
 8005136:	bb5c      	cbnz	r4, 8005190 <_malloc_r+0x90>
 8005138:	4629      	mov	r1, r5
 800513a:	4638      	mov	r0, r7
 800513c:	f7ff ffc0 	bl	80050c0 <sbrk_aligned>
 8005140:	1c43      	adds	r3, r0, #1
 8005142:	4604      	mov	r4, r0
 8005144:	d155      	bne.n	80051f2 <_malloc_r+0xf2>
 8005146:	f8d8 4000 	ldr.w	r4, [r8]
 800514a:	4626      	mov	r6, r4
 800514c:	2e00      	cmp	r6, #0
 800514e:	d145      	bne.n	80051dc <_malloc_r+0xdc>
 8005150:	2c00      	cmp	r4, #0
 8005152:	d048      	beq.n	80051e6 <_malloc_r+0xe6>
 8005154:	6823      	ldr	r3, [r4, #0]
 8005156:	4631      	mov	r1, r6
 8005158:	4638      	mov	r0, r7
 800515a:	eb04 0903 	add.w	r9, r4, r3
 800515e:	f000 fa35 	bl	80055cc <_sbrk_r>
 8005162:	4581      	cmp	r9, r0
 8005164:	d13f      	bne.n	80051e6 <_malloc_r+0xe6>
 8005166:	6821      	ldr	r1, [r4, #0]
 8005168:	1a6d      	subs	r5, r5, r1
 800516a:	4629      	mov	r1, r5
 800516c:	4638      	mov	r0, r7
 800516e:	f7ff ffa7 	bl	80050c0 <sbrk_aligned>
 8005172:	3001      	adds	r0, #1
 8005174:	d037      	beq.n	80051e6 <_malloc_r+0xe6>
 8005176:	6823      	ldr	r3, [r4, #0]
 8005178:	442b      	add	r3, r5
 800517a:	6023      	str	r3, [r4, #0]
 800517c:	f8d8 3000 	ldr.w	r3, [r8]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d038      	beq.n	80051f6 <_malloc_r+0xf6>
 8005184:	685a      	ldr	r2, [r3, #4]
 8005186:	42a2      	cmp	r2, r4
 8005188:	d12b      	bne.n	80051e2 <_malloc_r+0xe2>
 800518a:	2200      	movs	r2, #0
 800518c:	605a      	str	r2, [r3, #4]
 800518e:	e00f      	b.n	80051b0 <_malloc_r+0xb0>
 8005190:	6822      	ldr	r2, [r4, #0]
 8005192:	1b52      	subs	r2, r2, r5
 8005194:	d41f      	bmi.n	80051d6 <_malloc_r+0xd6>
 8005196:	2a0b      	cmp	r2, #11
 8005198:	d917      	bls.n	80051ca <_malloc_r+0xca>
 800519a:	1961      	adds	r1, r4, r5
 800519c:	42a3      	cmp	r3, r4
 800519e:	6025      	str	r5, [r4, #0]
 80051a0:	bf18      	it	ne
 80051a2:	6059      	strne	r1, [r3, #4]
 80051a4:	6863      	ldr	r3, [r4, #4]
 80051a6:	bf08      	it	eq
 80051a8:	f8c8 1000 	streq.w	r1, [r8]
 80051ac:	5162      	str	r2, [r4, r5]
 80051ae:	604b      	str	r3, [r1, #4]
 80051b0:	4638      	mov	r0, r7
 80051b2:	f104 060b 	add.w	r6, r4, #11
 80051b6:	f000 f9b9 	bl	800552c <__malloc_unlock>
 80051ba:	f026 0607 	bic.w	r6, r6, #7
 80051be:	1d23      	adds	r3, r4, #4
 80051c0:	1af2      	subs	r2, r6, r3
 80051c2:	d0ae      	beq.n	8005122 <_malloc_r+0x22>
 80051c4:	1b9b      	subs	r3, r3, r6
 80051c6:	50a3      	str	r3, [r4, r2]
 80051c8:	e7ab      	b.n	8005122 <_malloc_r+0x22>
 80051ca:	42a3      	cmp	r3, r4
 80051cc:	6862      	ldr	r2, [r4, #4]
 80051ce:	d1dd      	bne.n	800518c <_malloc_r+0x8c>
 80051d0:	f8c8 2000 	str.w	r2, [r8]
 80051d4:	e7ec      	b.n	80051b0 <_malloc_r+0xb0>
 80051d6:	4623      	mov	r3, r4
 80051d8:	6864      	ldr	r4, [r4, #4]
 80051da:	e7ac      	b.n	8005136 <_malloc_r+0x36>
 80051dc:	4634      	mov	r4, r6
 80051de:	6876      	ldr	r6, [r6, #4]
 80051e0:	e7b4      	b.n	800514c <_malloc_r+0x4c>
 80051e2:	4613      	mov	r3, r2
 80051e4:	e7cc      	b.n	8005180 <_malloc_r+0x80>
 80051e6:	230c      	movs	r3, #12
 80051e8:	603b      	str	r3, [r7, #0]
 80051ea:	4638      	mov	r0, r7
 80051ec:	f000 f99e 	bl	800552c <__malloc_unlock>
 80051f0:	e797      	b.n	8005122 <_malloc_r+0x22>
 80051f2:	6025      	str	r5, [r4, #0]
 80051f4:	e7dc      	b.n	80051b0 <_malloc_r+0xb0>
 80051f6:	605b      	str	r3, [r3, #4]
 80051f8:	deff      	udf	#255	; 0xff
 80051fa:	bf00      	nop
 80051fc:	200002e0 	.word	0x200002e0

08005200 <_printf_common>:
 8005200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005204:	4616      	mov	r6, r2
 8005206:	4699      	mov	r9, r3
 8005208:	688a      	ldr	r2, [r1, #8]
 800520a:	690b      	ldr	r3, [r1, #16]
 800520c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005210:	4293      	cmp	r3, r2
 8005212:	bfb8      	it	lt
 8005214:	4613      	movlt	r3, r2
 8005216:	6033      	str	r3, [r6, #0]
 8005218:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800521c:	4607      	mov	r7, r0
 800521e:	460c      	mov	r4, r1
 8005220:	b10a      	cbz	r2, 8005226 <_printf_common+0x26>
 8005222:	3301      	adds	r3, #1
 8005224:	6033      	str	r3, [r6, #0]
 8005226:	6823      	ldr	r3, [r4, #0]
 8005228:	0699      	lsls	r1, r3, #26
 800522a:	bf42      	ittt	mi
 800522c:	6833      	ldrmi	r3, [r6, #0]
 800522e:	3302      	addmi	r3, #2
 8005230:	6033      	strmi	r3, [r6, #0]
 8005232:	6825      	ldr	r5, [r4, #0]
 8005234:	f015 0506 	ands.w	r5, r5, #6
 8005238:	d106      	bne.n	8005248 <_printf_common+0x48>
 800523a:	f104 0a19 	add.w	sl, r4, #25
 800523e:	68e3      	ldr	r3, [r4, #12]
 8005240:	6832      	ldr	r2, [r6, #0]
 8005242:	1a9b      	subs	r3, r3, r2
 8005244:	42ab      	cmp	r3, r5
 8005246:	dc26      	bgt.n	8005296 <_printf_common+0x96>
 8005248:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800524c:	1e13      	subs	r3, r2, #0
 800524e:	6822      	ldr	r2, [r4, #0]
 8005250:	bf18      	it	ne
 8005252:	2301      	movne	r3, #1
 8005254:	0692      	lsls	r2, r2, #26
 8005256:	d42b      	bmi.n	80052b0 <_printf_common+0xb0>
 8005258:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800525c:	4649      	mov	r1, r9
 800525e:	4638      	mov	r0, r7
 8005260:	47c0      	blx	r8
 8005262:	3001      	adds	r0, #1
 8005264:	d01e      	beq.n	80052a4 <_printf_common+0xa4>
 8005266:	6823      	ldr	r3, [r4, #0]
 8005268:	6922      	ldr	r2, [r4, #16]
 800526a:	f003 0306 	and.w	r3, r3, #6
 800526e:	2b04      	cmp	r3, #4
 8005270:	bf02      	ittt	eq
 8005272:	68e5      	ldreq	r5, [r4, #12]
 8005274:	6833      	ldreq	r3, [r6, #0]
 8005276:	1aed      	subeq	r5, r5, r3
 8005278:	68a3      	ldr	r3, [r4, #8]
 800527a:	bf0c      	ite	eq
 800527c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005280:	2500      	movne	r5, #0
 8005282:	4293      	cmp	r3, r2
 8005284:	bfc4      	itt	gt
 8005286:	1a9b      	subgt	r3, r3, r2
 8005288:	18ed      	addgt	r5, r5, r3
 800528a:	2600      	movs	r6, #0
 800528c:	341a      	adds	r4, #26
 800528e:	42b5      	cmp	r5, r6
 8005290:	d11a      	bne.n	80052c8 <_printf_common+0xc8>
 8005292:	2000      	movs	r0, #0
 8005294:	e008      	b.n	80052a8 <_printf_common+0xa8>
 8005296:	2301      	movs	r3, #1
 8005298:	4652      	mov	r2, sl
 800529a:	4649      	mov	r1, r9
 800529c:	4638      	mov	r0, r7
 800529e:	47c0      	blx	r8
 80052a0:	3001      	adds	r0, #1
 80052a2:	d103      	bne.n	80052ac <_printf_common+0xac>
 80052a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80052a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052ac:	3501      	adds	r5, #1
 80052ae:	e7c6      	b.n	800523e <_printf_common+0x3e>
 80052b0:	18e1      	adds	r1, r4, r3
 80052b2:	1c5a      	adds	r2, r3, #1
 80052b4:	2030      	movs	r0, #48	; 0x30
 80052b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80052ba:	4422      	add	r2, r4
 80052bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80052c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80052c4:	3302      	adds	r3, #2
 80052c6:	e7c7      	b.n	8005258 <_printf_common+0x58>
 80052c8:	2301      	movs	r3, #1
 80052ca:	4622      	mov	r2, r4
 80052cc:	4649      	mov	r1, r9
 80052ce:	4638      	mov	r0, r7
 80052d0:	47c0      	blx	r8
 80052d2:	3001      	adds	r0, #1
 80052d4:	d0e6      	beq.n	80052a4 <_printf_common+0xa4>
 80052d6:	3601      	adds	r6, #1
 80052d8:	e7d9      	b.n	800528e <_printf_common+0x8e>
	...

080052dc <_printf_i>:
 80052dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052e0:	7e0f      	ldrb	r7, [r1, #24]
 80052e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80052e4:	2f78      	cmp	r7, #120	; 0x78
 80052e6:	4691      	mov	r9, r2
 80052e8:	4680      	mov	r8, r0
 80052ea:	460c      	mov	r4, r1
 80052ec:	469a      	mov	sl, r3
 80052ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80052f2:	d807      	bhi.n	8005304 <_printf_i+0x28>
 80052f4:	2f62      	cmp	r7, #98	; 0x62
 80052f6:	d80a      	bhi.n	800530e <_printf_i+0x32>
 80052f8:	2f00      	cmp	r7, #0
 80052fa:	f000 80d4 	beq.w	80054a6 <_printf_i+0x1ca>
 80052fe:	2f58      	cmp	r7, #88	; 0x58
 8005300:	f000 80c0 	beq.w	8005484 <_printf_i+0x1a8>
 8005304:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005308:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800530c:	e03a      	b.n	8005384 <_printf_i+0xa8>
 800530e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005312:	2b15      	cmp	r3, #21
 8005314:	d8f6      	bhi.n	8005304 <_printf_i+0x28>
 8005316:	a101      	add	r1, pc, #4	; (adr r1, 800531c <_printf_i+0x40>)
 8005318:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800531c:	08005375 	.word	0x08005375
 8005320:	08005389 	.word	0x08005389
 8005324:	08005305 	.word	0x08005305
 8005328:	08005305 	.word	0x08005305
 800532c:	08005305 	.word	0x08005305
 8005330:	08005305 	.word	0x08005305
 8005334:	08005389 	.word	0x08005389
 8005338:	08005305 	.word	0x08005305
 800533c:	08005305 	.word	0x08005305
 8005340:	08005305 	.word	0x08005305
 8005344:	08005305 	.word	0x08005305
 8005348:	0800548d 	.word	0x0800548d
 800534c:	080053b5 	.word	0x080053b5
 8005350:	08005447 	.word	0x08005447
 8005354:	08005305 	.word	0x08005305
 8005358:	08005305 	.word	0x08005305
 800535c:	080054af 	.word	0x080054af
 8005360:	08005305 	.word	0x08005305
 8005364:	080053b5 	.word	0x080053b5
 8005368:	08005305 	.word	0x08005305
 800536c:	08005305 	.word	0x08005305
 8005370:	0800544f 	.word	0x0800544f
 8005374:	682b      	ldr	r3, [r5, #0]
 8005376:	1d1a      	adds	r2, r3, #4
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	602a      	str	r2, [r5, #0]
 800537c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005380:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005384:	2301      	movs	r3, #1
 8005386:	e09f      	b.n	80054c8 <_printf_i+0x1ec>
 8005388:	6820      	ldr	r0, [r4, #0]
 800538a:	682b      	ldr	r3, [r5, #0]
 800538c:	0607      	lsls	r7, r0, #24
 800538e:	f103 0104 	add.w	r1, r3, #4
 8005392:	6029      	str	r1, [r5, #0]
 8005394:	d501      	bpl.n	800539a <_printf_i+0xbe>
 8005396:	681e      	ldr	r6, [r3, #0]
 8005398:	e003      	b.n	80053a2 <_printf_i+0xc6>
 800539a:	0646      	lsls	r6, r0, #25
 800539c:	d5fb      	bpl.n	8005396 <_printf_i+0xba>
 800539e:	f9b3 6000 	ldrsh.w	r6, [r3]
 80053a2:	2e00      	cmp	r6, #0
 80053a4:	da03      	bge.n	80053ae <_printf_i+0xd2>
 80053a6:	232d      	movs	r3, #45	; 0x2d
 80053a8:	4276      	negs	r6, r6
 80053aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053ae:	485a      	ldr	r0, [pc, #360]	; (8005518 <_printf_i+0x23c>)
 80053b0:	230a      	movs	r3, #10
 80053b2:	e012      	b.n	80053da <_printf_i+0xfe>
 80053b4:	682b      	ldr	r3, [r5, #0]
 80053b6:	6820      	ldr	r0, [r4, #0]
 80053b8:	1d19      	adds	r1, r3, #4
 80053ba:	6029      	str	r1, [r5, #0]
 80053bc:	0605      	lsls	r5, r0, #24
 80053be:	d501      	bpl.n	80053c4 <_printf_i+0xe8>
 80053c0:	681e      	ldr	r6, [r3, #0]
 80053c2:	e002      	b.n	80053ca <_printf_i+0xee>
 80053c4:	0641      	lsls	r1, r0, #25
 80053c6:	d5fb      	bpl.n	80053c0 <_printf_i+0xe4>
 80053c8:	881e      	ldrh	r6, [r3, #0]
 80053ca:	4853      	ldr	r0, [pc, #332]	; (8005518 <_printf_i+0x23c>)
 80053cc:	2f6f      	cmp	r7, #111	; 0x6f
 80053ce:	bf0c      	ite	eq
 80053d0:	2308      	moveq	r3, #8
 80053d2:	230a      	movne	r3, #10
 80053d4:	2100      	movs	r1, #0
 80053d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80053da:	6865      	ldr	r5, [r4, #4]
 80053dc:	60a5      	str	r5, [r4, #8]
 80053de:	2d00      	cmp	r5, #0
 80053e0:	bfa2      	ittt	ge
 80053e2:	6821      	ldrge	r1, [r4, #0]
 80053e4:	f021 0104 	bicge.w	r1, r1, #4
 80053e8:	6021      	strge	r1, [r4, #0]
 80053ea:	b90e      	cbnz	r6, 80053f0 <_printf_i+0x114>
 80053ec:	2d00      	cmp	r5, #0
 80053ee:	d04b      	beq.n	8005488 <_printf_i+0x1ac>
 80053f0:	4615      	mov	r5, r2
 80053f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80053f6:	fb03 6711 	mls	r7, r3, r1, r6
 80053fa:	5dc7      	ldrb	r7, [r0, r7]
 80053fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005400:	4637      	mov	r7, r6
 8005402:	42bb      	cmp	r3, r7
 8005404:	460e      	mov	r6, r1
 8005406:	d9f4      	bls.n	80053f2 <_printf_i+0x116>
 8005408:	2b08      	cmp	r3, #8
 800540a:	d10b      	bne.n	8005424 <_printf_i+0x148>
 800540c:	6823      	ldr	r3, [r4, #0]
 800540e:	07de      	lsls	r6, r3, #31
 8005410:	d508      	bpl.n	8005424 <_printf_i+0x148>
 8005412:	6923      	ldr	r3, [r4, #16]
 8005414:	6861      	ldr	r1, [r4, #4]
 8005416:	4299      	cmp	r1, r3
 8005418:	bfde      	ittt	le
 800541a:	2330      	movle	r3, #48	; 0x30
 800541c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005420:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005424:	1b52      	subs	r2, r2, r5
 8005426:	6122      	str	r2, [r4, #16]
 8005428:	f8cd a000 	str.w	sl, [sp]
 800542c:	464b      	mov	r3, r9
 800542e:	aa03      	add	r2, sp, #12
 8005430:	4621      	mov	r1, r4
 8005432:	4640      	mov	r0, r8
 8005434:	f7ff fee4 	bl	8005200 <_printf_common>
 8005438:	3001      	adds	r0, #1
 800543a:	d14a      	bne.n	80054d2 <_printf_i+0x1f6>
 800543c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005440:	b004      	add	sp, #16
 8005442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005446:	6823      	ldr	r3, [r4, #0]
 8005448:	f043 0320 	orr.w	r3, r3, #32
 800544c:	6023      	str	r3, [r4, #0]
 800544e:	4833      	ldr	r0, [pc, #204]	; (800551c <_printf_i+0x240>)
 8005450:	2778      	movs	r7, #120	; 0x78
 8005452:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005456:	6823      	ldr	r3, [r4, #0]
 8005458:	6829      	ldr	r1, [r5, #0]
 800545a:	061f      	lsls	r7, r3, #24
 800545c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005460:	d402      	bmi.n	8005468 <_printf_i+0x18c>
 8005462:	065f      	lsls	r7, r3, #25
 8005464:	bf48      	it	mi
 8005466:	b2b6      	uxthmi	r6, r6
 8005468:	07df      	lsls	r7, r3, #31
 800546a:	bf48      	it	mi
 800546c:	f043 0320 	orrmi.w	r3, r3, #32
 8005470:	6029      	str	r1, [r5, #0]
 8005472:	bf48      	it	mi
 8005474:	6023      	strmi	r3, [r4, #0]
 8005476:	b91e      	cbnz	r6, 8005480 <_printf_i+0x1a4>
 8005478:	6823      	ldr	r3, [r4, #0]
 800547a:	f023 0320 	bic.w	r3, r3, #32
 800547e:	6023      	str	r3, [r4, #0]
 8005480:	2310      	movs	r3, #16
 8005482:	e7a7      	b.n	80053d4 <_printf_i+0xf8>
 8005484:	4824      	ldr	r0, [pc, #144]	; (8005518 <_printf_i+0x23c>)
 8005486:	e7e4      	b.n	8005452 <_printf_i+0x176>
 8005488:	4615      	mov	r5, r2
 800548a:	e7bd      	b.n	8005408 <_printf_i+0x12c>
 800548c:	682b      	ldr	r3, [r5, #0]
 800548e:	6826      	ldr	r6, [r4, #0]
 8005490:	6961      	ldr	r1, [r4, #20]
 8005492:	1d18      	adds	r0, r3, #4
 8005494:	6028      	str	r0, [r5, #0]
 8005496:	0635      	lsls	r5, r6, #24
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	d501      	bpl.n	80054a0 <_printf_i+0x1c4>
 800549c:	6019      	str	r1, [r3, #0]
 800549e:	e002      	b.n	80054a6 <_printf_i+0x1ca>
 80054a0:	0670      	lsls	r0, r6, #25
 80054a2:	d5fb      	bpl.n	800549c <_printf_i+0x1c0>
 80054a4:	8019      	strh	r1, [r3, #0]
 80054a6:	2300      	movs	r3, #0
 80054a8:	6123      	str	r3, [r4, #16]
 80054aa:	4615      	mov	r5, r2
 80054ac:	e7bc      	b.n	8005428 <_printf_i+0x14c>
 80054ae:	682b      	ldr	r3, [r5, #0]
 80054b0:	1d1a      	adds	r2, r3, #4
 80054b2:	602a      	str	r2, [r5, #0]
 80054b4:	681d      	ldr	r5, [r3, #0]
 80054b6:	6862      	ldr	r2, [r4, #4]
 80054b8:	2100      	movs	r1, #0
 80054ba:	4628      	mov	r0, r5
 80054bc:	f7fa fe88 	bl	80001d0 <memchr>
 80054c0:	b108      	cbz	r0, 80054c6 <_printf_i+0x1ea>
 80054c2:	1b40      	subs	r0, r0, r5
 80054c4:	6060      	str	r0, [r4, #4]
 80054c6:	6863      	ldr	r3, [r4, #4]
 80054c8:	6123      	str	r3, [r4, #16]
 80054ca:	2300      	movs	r3, #0
 80054cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054d0:	e7aa      	b.n	8005428 <_printf_i+0x14c>
 80054d2:	6923      	ldr	r3, [r4, #16]
 80054d4:	462a      	mov	r2, r5
 80054d6:	4649      	mov	r1, r9
 80054d8:	4640      	mov	r0, r8
 80054da:	47d0      	blx	sl
 80054dc:	3001      	adds	r0, #1
 80054de:	d0ad      	beq.n	800543c <_printf_i+0x160>
 80054e0:	6823      	ldr	r3, [r4, #0]
 80054e2:	079b      	lsls	r3, r3, #30
 80054e4:	d413      	bmi.n	800550e <_printf_i+0x232>
 80054e6:	68e0      	ldr	r0, [r4, #12]
 80054e8:	9b03      	ldr	r3, [sp, #12]
 80054ea:	4298      	cmp	r0, r3
 80054ec:	bfb8      	it	lt
 80054ee:	4618      	movlt	r0, r3
 80054f0:	e7a6      	b.n	8005440 <_printf_i+0x164>
 80054f2:	2301      	movs	r3, #1
 80054f4:	4632      	mov	r2, r6
 80054f6:	4649      	mov	r1, r9
 80054f8:	4640      	mov	r0, r8
 80054fa:	47d0      	blx	sl
 80054fc:	3001      	adds	r0, #1
 80054fe:	d09d      	beq.n	800543c <_printf_i+0x160>
 8005500:	3501      	adds	r5, #1
 8005502:	68e3      	ldr	r3, [r4, #12]
 8005504:	9903      	ldr	r1, [sp, #12]
 8005506:	1a5b      	subs	r3, r3, r1
 8005508:	42ab      	cmp	r3, r5
 800550a:	dcf2      	bgt.n	80054f2 <_printf_i+0x216>
 800550c:	e7eb      	b.n	80054e6 <_printf_i+0x20a>
 800550e:	2500      	movs	r5, #0
 8005510:	f104 0619 	add.w	r6, r4, #25
 8005514:	e7f5      	b.n	8005502 <_printf_i+0x226>
 8005516:	bf00      	nop
 8005518:	0800572d 	.word	0x0800572d
 800551c:	0800573e 	.word	0x0800573e

08005520 <__malloc_lock>:
 8005520:	4801      	ldr	r0, [pc, #4]	; (8005528 <__malloc_lock+0x8>)
 8005522:	f7ff bc73 	b.w	8004e0c <__retarget_lock_acquire_recursive>
 8005526:	bf00      	nop
 8005528:	200002dc 	.word	0x200002dc

0800552c <__malloc_unlock>:
 800552c:	4801      	ldr	r0, [pc, #4]	; (8005534 <__malloc_unlock+0x8>)
 800552e:	f7ff bc6e 	b.w	8004e0e <__retarget_lock_release_recursive>
 8005532:	bf00      	nop
 8005534:	200002dc 	.word	0x200002dc

08005538 <_realloc_r>:
 8005538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800553c:	4680      	mov	r8, r0
 800553e:	4614      	mov	r4, r2
 8005540:	460e      	mov	r6, r1
 8005542:	b921      	cbnz	r1, 800554e <_realloc_r+0x16>
 8005544:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005548:	4611      	mov	r1, r2
 800554a:	f7ff bdd9 	b.w	8005100 <_malloc_r>
 800554e:	b92a      	cbnz	r2, 800555c <_realloc_r+0x24>
 8005550:	f000 f85a 	bl	8005608 <_free_r>
 8005554:	4625      	mov	r5, r4
 8005556:	4628      	mov	r0, r5
 8005558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800555c:	f000 f8a0 	bl	80056a0 <_malloc_usable_size_r>
 8005560:	4284      	cmp	r4, r0
 8005562:	4607      	mov	r7, r0
 8005564:	d802      	bhi.n	800556c <_realloc_r+0x34>
 8005566:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800556a:	d812      	bhi.n	8005592 <_realloc_r+0x5a>
 800556c:	4621      	mov	r1, r4
 800556e:	4640      	mov	r0, r8
 8005570:	f7ff fdc6 	bl	8005100 <_malloc_r>
 8005574:	4605      	mov	r5, r0
 8005576:	2800      	cmp	r0, #0
 8005578:	d0ed      	beq.n	8005556 <_realloc_r+0x1e>
 800557a:	42bc      	cmp	r4, r7
 800557c:	4622      	mov	r2, r4
 800557e:	4631      	mov	r1, r6
 8005580:	bf28      	it	cs
 8005582:	463a      	movcs	r2, r7
 8005584:	f000 f832 	bl	80055ec <memcpy>
 8005588:	4631      	mov	r1, r6
 800558a:	4640      	mov	r0, r8
 800558c:	f000 f83c 	bl	8005608 <_free_r>
 8005590:	e7e1      	b.n	8005556 <_realloc_r+0x1e>
 8005592:	4635      	mov	r5, r6
 8005594:	e7df      	b.n	8005556 <_realloc_r+0x1e>

08005596 <memmove>:
 8005596:	4288      	cmp	r0, r1
 8005598:	b510      	push	{r4, lr}
 800559a:	eb01 0402 	add.w	r4, r1, r2
 800559e:	d902      	bls.n	80055a6 <memmove+0x10>
 80055a0:	4284      	cmp	r4, r0
 80055a2:	4623      	mov	r3, r4
 80055a4:	d807      	bhi.n	80055b6 <memmove+0x20>
 80055a6:	1e43      	subs	r3, r0, #1
 80055a8:	42a1      	cmp	r1, r4
 80055aa:	d008      	beq.n	80055be <memmove+0x28>
 80055ac:	f811 2b01 	ldrb.w	r2, [r1], #1
 80055b0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80055b4:	e7f8      	b.n	80055a8 <memmove+0x12>
 80055b6:	4402      	add	r2, r0
 80055b8:	4601      	mov	r1, r0
 80055ba:	428a      	cmp	r2, r1
 80055bc:	d100      	bne.n	80055c0 <memmove+0x2a>
 80055be:	bd10      	pop	{r4, pc}
 80055c0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80055c4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80055c8:	e7f7      	b.n	80055ba <memmove+0x24>
	...

080055cc <_sbrk_r>:
 80055cc:	b538      	push	{r3, r4, r5, lr}
 80055ce:	4d06      	ldr	r5, [pc, #24]	; (80055e8 <_sbrk_r+0x1c>)
 80055d0:	2300      	movs	r3, #0
 80055d2:	4604      	mov	r4, r0
 80055d4:	4608      	mov	r0, r1
 80055d6:	602b      	str	r3, [r5, #0]
 80055d8:	f7fb ff98 	bl	800150c <_sbrk>
 80055dc:	1c43      	adds	r3, r0, #1
 80055de:	d102      	bne.n	80055e6 <_sbrk_r+0x1a>
 80055e0:	682b      	ldr	r3, [r5, #0]
 80055e2:	b103      	cbz	r3, 80055e6 <_sbrk_r+0x1a>
 80055e4:	6023      	str	r3, [r4, #0]
 80055e6:	bd38      	pop	{r3, r4, r5, pc}
 80055e8:	200002e8 	.word	0x200002e8

080055ec <memcpy>:
 80055ec:	440a      	add	r2, r1
 80055ee:	4291      	cmp	r1, r2
 80055f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80055f4:	d100      	bne.n	80055f8 <memcpy+0xc>
 80055f6:	4770      	bx	lr
 80055f8:	b510      	push	{r4, lr}
 80055fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005602:	4291      	cmp	r1, r2
 8005604:	d1f9      	bne.n	80055fa <memcpy+0xe>
 8005606:	bd10      	pop	{r4, pc}

08005608 <_free_r>:
 8005608:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800560a:	2900      	cmp	r1, #0
 800560c:	d044      	beq.n	8005698 <_free_r+0x90>
 800560e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005612:	9001      	str	r0, [sp, #4]
 8005614:	2b00      	cmp	r3, #0
 8005616:	f1a1 0404 	sub.w	r4, r1, #4
 800561a:	bfb8      	it	lt
 800561c:	18e4      	addlt	r4, r4, r3
 800561e:	f7ff ff7f 	bl	8005520 <__malloc_lock>
 8005622:	4a1e      	ldr	r2, [pc, #120]	; (800569c <_free_r+0x94>)
 8005624:	9801      	ldr	r0, [sp, #4]
 8005626:	6813      	ldr	r3, [r2, #0]
 8005628:	b933      	cbnz	r3, 8005638 <_free_r+0x30>
 800562a:	6063      	str	r3, [r4, #4]
 800562c:	6014      	str	r4, [r2, #0]
 800562e:	b003      	add	sp, #12
 8005630:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005634:	f7ff bf7a 	b.w	800552c <__malloc_unlock>
 8005638:	42a3      	cmp	r3, r4
 800563a:	d908      	bls.n	800564e <_free_r+0x46>
 800563c:	6825      	ldr	r5, [r4, #0]
 800563e:	1961      	adds	r1, r4, r5
 8005640:	428b      	cmp	r3, r1
 8005642:	bf01      	itttt	eq
 8005644:	6819      	ldreq	r1, [r3, #0]
 8005646:	685b      	ldreq	r3, [r3, #4]
 8005648:	1949      	addeq	r1, r1, r5
 800564a:	6021      	streq	r1, [r4, #0]
 800564c:	e7ed      	b.n	800562a <_free_r+0x22>
 800564e:	461a      	mov	r2, r3
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	b10b      	cbz	r3, 8005658 <_free_r+0x50>
 8005654:	42a3      	cmp	r3, r4
 8005656:	d9fa      	bls.n	800564e <_free_r+0x46>
 8005658:	6811      	ldr	r1, [r2, #0]
 800565a:	1855      	adds	r5, r2, r1
 800565c:	42a5      	cmp	r5, r4
 800565e:	d10b      	bne.n	8005678 <_free_r+0x70>
 8005660:	6824      	ldr	r4, [r4, #0]
 8005662:	4421      	add	r1, r4
 8005664:	1854      	adds	r4, r2, r1
 8005666:	42a3      	cmp	r3, r4
 8005668:	6011      	str	r1, [r2, #0]
 800566a:	d1e0      	bne.n	800562e <_free_r+0x26>
 800566c:	681c      	ldr	r4, [r3, #0]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	6053      	str	r3, [r2, #4]
 8005672:	440c      	add	r4, r1
 8005674:	6014      	str	r4, [r2, #0]
 8005676:	e7da      	b.n	800562e <_free_r+0x26>
 8005678:	d902      	bls.n	8005680 <_free_r+0x78>
 800567a:	230c      	movs	r3, #12
 800567c:	6003      	str	r3, [r0, #0]
 800567e:	e7d6      	b.n	800562e <_free_r+0x26>
 8005680:	6825      	ldr	r5, [r4, #0]
 8005682:	1961      	adds	r1, r4, r5
 8005684:	428b      	cmp	r3, r1
 8005686:	bf04      	itt	eq
 8005688:	6819      	ldreq	r1, [r3, #0]
 800568a:	685b      	ldreq	r3, [r3, #4]
 800568c:	6063      	str	r3, [r4, #4]
 800568e:	bf04      	itt	eq
 8005690:	1949      	addeq	r1, r1, r5
 8005692:	6021      	streq	r1, [r4, #0]
 8005694:	6054      	str	r4, [r2, #4]
 8005696:	e7ca      	b.n	800562e <_free_r+0x26>
 8005698:	b003      	add	sp, #12
 800569a:	bd30      	pop	{r4, r5, pc}
 800569c:	200002e0 	.word	0x200002e0

080056a0 <_malloc_usable_size_r>:
 80056a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056a4:	1f18      	subs	r0, r3, #4
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	bfbc      	itt	lt
 80056aa:	580b      	ldrlt	r3, [r1, r0]
 80056ac:	18c0      	addlt	r0, r0, r3
 80056ae:	4770      	bx	lr

080056b0 <_init>:
 80056b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056b2:	bf00      	nop
 80056b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056b6:	bc08      	pop	{r3}
 80056b8:	469e      	mov	lr, r3
 80056ba:	4770      	bx	lr

080056bc <_fini>:
 80056bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056be:	bf00      	nop
 80056c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056c2:	bc08      	pop	{r3}
 80056c4:	469e      	mov	lr, r3
 80056c6:	4770      	bx	lr
